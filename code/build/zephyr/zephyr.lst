
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
}

static uint8_t discovery_process_service(struct bt_gatt_dm *dm,
				      const struct bt_gatt_attr *attr,
				      struct bt_gatt_discover_params *params)
{
   0:	20005620 	.word	0x20005620
	int err;

	if (!attr) {
   4:	000131a1 	.word	0x000131a1
		return BT_GATT_ITER_STOP;
	}

	struct bt_gatt_service_val *service_val = attr->user_data;
	struct bt_gatt_dm_attr *cur_attr =
		attr_store(dm, attr, sizeof(*service_val));
   8:	00020d07 	.word	0x00020d07
   c:	00013159 	.word	0x00013159

	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
			bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY) == 0);

	if (!cur_attr) {
  10:	00013159 	.word	0x00013159
	LOG_DBG("Service detected, handles range: <%u, %u>",
		cur_attr->handle + 1,
		service_val->end_handle);

	struct bt_gatt_service_val *cur_service_val =
		bt_gatt_dm_attr_service_val(cur_attr);
  14:	00013159 	.word	0x00013159
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
  18:	00013159 	.word	0x00013159
	...
		LOG_ERR("Not enough memory for service attribute data.");
		discovery_complete_error(dm, -ENOMEM);
		return BT_GATT_ITER_STOP;
	}

	if (cur_attr->handle == cur_service_val->end_handle) {
  2c:	00012891 	.word	0x00012891
  30:	00013159 	.word	0x00013159
		/* No characteristics to discover, go to next service. */
		return BT_GATT_ITER_CONTINUE;
	}

	dm->discover_params.uuid         = NULL;
  34:	00000000 	.word	0x00000000
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
  38:	00012839 	.word	0x00012839
	dm->discover_params.start_handle = cur_attr->handle + 1;
  3c:	00013159 	.word	0x00013159

00000040 <_irq_vector_table>:
  40:	0001297d 00023b33 0001297d 0001297d     })..3;..})..})..
	dm->discover_params.end_handle   = cur_service_val->end_handle;
	LOG_DBG("Starting descriptors discovery");
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
  50:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..
		return BT_GATT_ITER_STOP;
  60:	00023afb 0001297d 0001297d 00023b19     .:..})..})...;..
		LOG_ERR("Not enough memory for service attribute.");
  70:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..
  80:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
  90:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..
		LOG_ERR("Not enough memory for service attribute data.");
  a0:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..
		discovery_complete_error(dm, -ENOMEM);
  b0:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..
  c0:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..

	if (err) {
		LOG_ERR("Descriptor discover failed, error: %d.", err);
  d0:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..
		discovery_complete_error(dm, -ENOMEM);
  e0:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..
		return BT_GATT_ITER_CONTINUE;
  f0:	0001297d 0001297d 0001297d 0001297d     })..})..})..})..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
		return -EINVAL;
	}
	/* NUS TX */
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_TX);
	if (!gatt_desc) {
		LOG_ERR("Missing NUS TX value descriptor in characteristic.");
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
		return -EINVAL;
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	LOG_DBG("Found handle for NUS TX characteristic.");
	nus_c->handles.tx = gatt_desc->handle;
	/* NUS TX CCC */
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
	if (!gatt_desc) {
		LOG_ERR("Missing NUS TX CCC in characteristic.");
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
		return -EINVAL;
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
	nus_c->handles.tx_ccc = gatt_desc->handle;

	/* NUS RX Characteristic */
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
	if (!gatt_chrc) {
		LOG_ERR("Missing NUS RX characteristic.");
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
		return -EINVAL;
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
	}
	/* NUS RX */
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_RX);
	if (!gatt_desc) {
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
		return -EINVAL;
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00b ff36 	bl	c284 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000

00000428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     428:	4801      	ldr	r0, [pc, #4]	; (430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     42a:	7800      	ldrb	r0, [r0, #0]
     42c:	4770      	bx	lr
     42e:	0000      	.short	0x0000
     430:	20000008 	.word	0x20000008

00000434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     434:	4905      	ldr	r1, [pc, #20]	; (44c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     436:	780a      	ldrb	r2, [r1, #0]
     438:	4290      	cmp	r0, r2
     43a:	d301      	bcc.n	440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     43c:	2000      	movs	r0, #0
     43e:	4770      	bx	lr
     440:	6849      	ldr	r1, [r1, #4]
     442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     44a:	4770      	bx	lr
     44c:	20000008 	.word	0x20000008
     450:	b570      	push	{r4, r5, r6, lr}
     452:	4605      	mov	r5, r0
     454:	2a20      	cmp	r2, #32
     456:	d027      	beq.n	4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     458:	4819      	ldr	r0, [pc, #100]	; (4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>)
     45a:	4c1a      	ldr	r4, [pc, #104]	; (4c4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>)
     45c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     468:	2920      	cmp	r1, #32
     46a:	d022      	beq.n	4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     46c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     470:	7840      	ldrb	r0, [r0, #1]
     472:	784c      	ldrb	r4, [r1, #1]
     474:	7048      	strb	r0, [r1, #1]
     476:	4620      	mov	r0, r4
     478:	4601      	mov	r1, r0
     47a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     47e:	4291      	cmp	r1, r2
     480:	7005      	strb	r5, [r0, #0]
     482:	7840      	ldrb	r0, [r0, #1]
     484:	d1f8      	bne.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     48a:	2a20      	cmp	r2, #32
     48c:	bf1a      	itte	ne
     48e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     492:	7054      	strbne	r4, [r2, #1]
     494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     498:	2220      	movs	r2, #32
     49a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     49e:	f88c 2001 	strb.w	r2, [ip, #1]
     4a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     4a6:	bd70      	pop	{r4, r5, r6, pc}
     4a8:	f240 217e 	movw	r1, #638	; 0x27e
     4ac:	2070      	movs	r0, #112	; 0x70
     4ae:	f003 f987 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4b2:	f893 4020 	ldrb.w	r4, [r3, #32]
     4b6:	7840      	ldrb	r0, [r0, #1]
     4b8:	f883 0020 	strb.w	r0, [r3, #32]
     4bc:	e7db      	b.n	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     4be:	0000      	.short	0x0000
     4c0:	20000d34 	.word	0x20000d34
     4c4:	20000db4 	.word	0x20000db4
     4c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	b085      	sub	sp, #20
     4ce:	4615      	mov	r5, r2
     4d0:	460c      	mov	r4, r1
     4d2:	f002 f915 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     4d6:	4428      	add	r0, r5
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4dc:	9002      	str	r0, [sp, #8]
     4de:	6821      	ldr	r1, [r4, #0]
     4e0:	1a08      	subs	r0, r1, r0
     4e2:	0200      	lsls	r0, r0, #8
     4e4:	17c1      	asrs	r1, r0, #31
     4e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4ea:	1200      	asrs	r0, r0, #8
     4ec:	2800      	cmp	r0, #0
     4ee:	f300 80d5 	bgt.w	69c <__data_size+0x34>
     4f2:	48ac      	ldr	r0, [pc, #688]	; (7a4 <__data_size+0x13c>)
     4f4:	9f08      	ldr	r7, [sp, #32]
     4f6:	4eac      	ldr	r6, [pc, #688]	; (7a8 <__data_size+0x140>)
     4f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4fc:	9003      	str	r0, [sp, #12]
     4fe:	f890 5020 	ldrb.w	r5, [r0, #32]
     502:	2020      	movs	r0, #32
     504:	46e9      	mov	r9, sp
     506:	f10d 0804 	add.w	r8, sp, #4
     50a:	f88d 0000 	strb.w	r0, [sp]
     50e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     512:	2d20      	cmp	r5, #32
     514:	bf18      	it	ne
     516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     51a:	d025      	beq.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     51c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     524:	6822      	ldr	r2, [r4, #0]
     526:	68c1      	ldr	r1, [r0, #12]
     528:	1a51      	subs	r1, r2, r1
     52a:	0209      	lsls	r1, r1, #8
     52c:	17ca      	asrs	r2, r1, #31
     52e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     532:	3008      	adds	r0, #8
     534:	1209      	asrs	r1, r1, #8
     536:	d417      	bmi.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     538:	8961      	ldrh	r1, [r4, #10]
     53a:	b171      	cbz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     53c:	8941      	ldrh	r1, [r0, #10]
     53e:	b961      	cbnz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     540:	f000 fdb4 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     544:	f002 f8dc 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     548:	6821      	ldr	r1, [r4, #0]
     54a:	1a08      	subs	r0, r1, r0
     54c:	0200      	lsls	r0, r0, #8
     54e:	17c1      	asrs	r1, r0, #31
     550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     554:	1200      	asrs	r0, r0, #8
     556:	2833      	cmp	r0, #51	; 0x33
     558:	db06      	blt.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     55a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     55e:	f889 5000 	strb.w	r5, [r9]
     562:	7845      	ldrb	r5, [r0, #1]
     564:	2d20      	cmp	r5, #32
     566:	d1d9      	bne.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     568:	f899 0000 	ldrb.w	r0, [r9]
     56c:	f888 0000 	strb.w	r0, [r8]
     570:	46a1      	mov	r9, r4
     572:	2d20      	cmp	r5, #32
     574:	bf1c      	itt	ne
     576:	488d      	ldrne	r0, [pc, #564]	; (7ac <__data_size+0x144>)
     578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     57c:	f000 810e 	beq.w	79c <__data_size+0x134>
     580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     588:	f8d9 2004 	ldr.w	r2, [r9, #4]
     58c:	f8da 1008 	ldr.w	r1, [sl, #8]
     590:	4648      	mov	r0, r9
     592:	1a89      	subs	r1, r1, r2
     594:	0209      	lsls	r1, r1, #8
     596:	17ca      	asrs	r2, r1, #31
     598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     59c:	f10a 0708 	add.w	r7, sl, #8
     5a0:	1209      	asrs	r1, r1, #8
     5a2:	d415      	bmi.n	5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>
     5a4:	8979      	ldrh	r1, [r7, #10]
     5a6:	2900      	cmp	r1, #0
     5a8:	f000 80f8 	beq.w	79c <__data_size+0x134>
     5ac:	8941      	ldrh	r1, [r0, #10]
     5ae:	2900      	cmp	r1, #0
     5b0:	f040 80f4 	bne.w	79c <__data_size+0x134>
     5b4:	f000 fd7a 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     5b8:	f002 f8a2 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5bc:	6839      	ldr	r1, [r7, #0]
     5be:	1a08      	subs	r0, r1, r0
     5c0:	0200      	lsls	r0, r0, #8
     5c2:	17c1      	asrs	r1, r0, #31
     5c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5c8:	1200      	asrs	r0, r0, #8
     5ca:	2833      	cmp	r0, #51	; 0x33
     5cc:	f280 80e6 	bge.w	79c <__data_size+0x134>
     5d0:	f888 5000 	strb.w	r5, [r8]
     5d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5d8:	f899 000c 	ldrb.w	r0, [r9, #12]
     5dc:	4281      	cmp	r1, r0
     5de:	d906      	bls.n	5ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x106>
     5e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5e4:	7845      	ldrb	r5, [r0, #1]
     5e6:	2d20      	cmp	r5, #32
     5e8:	d1ca      	bne.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     5ea:	f000 b8d7 	b.w	79c <__data_size+0x134>
     5ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5fa:	8a68      	ldrh	r0, [r5, #18]
     5fc:	68ef      	ldr	r7, [r5, #12]
     5fe:	2800      	cmp	r0, #0
     600:	d143      	bne.n	68a <__data_size+0x22>
     602:	8960      	ldrh	r0, [r4, #10]
     604:	b3e8      	cbz	r0, 682 <__data_size+0x1a>
     606:	68a8      	ldr	r0, [r5, #8]
     608:	f00b fe5c 	bl	c2c4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     60c:	8a69      	ldrh	r1, [r5, #18]
     60e:	7c2a      	ldrb	r2, [r5, #16]
     610:	4b67      	ldr	r3, [pc, #412]	; (7b0 <__data_size+0x148>)
     612:	4411      	add	r1, r2
     614:	1c49      	adds	r1, r1, #1
     616:	1842      	adds	r2, r0, r1
     618:	4298      	cmp	r0, r3
     61a:	d904      	bls.n	626 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     61c:	f240 6109 	movw	r1, #1545	; 0x609
     620:	2070      	movs	r0, #112	; 0x70
     622:	f003 f8cd 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     626:	4863      	ldr	r0, [pc, #396]	; (7b4 <__data_size+0x14c>)
     628:	4281      	cmp	r1, r0
     62a:	dd04      	ble.n	636 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     62c:	f240 610a 	movw	r1, #1546	; 0x60a
     630:	2070      	movs	r0, #112	; 0x70
     632:	f003 f8c5 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     636:	4860      	ldr	r0, [pc, #384]	; (7b8 <__data_size+0x150>)
     638:	4281      	cmp	r1, r0
     63a:	da04      	bge.n	646 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     63c:	f240 610b 	movw	r1, #1547	; 0x60b
     640:	2070      	movs	r0, #112	; 0x70
     642:	f003 f8bd 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     646:	485d      	ldr	r0, [pc, #372]	; (7bc <__data_size+0x154>)
     648:	4290      	cmp	r0, r2
     64a:	bfdc      	itt	le
     64c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     654:	dd05      	ble.n	662 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     656:	2a00      	cmp	r2, #0
     658:	bfbc      	itt	lt
     65a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     65e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     662:	4610      	mov	r0, r2
     664:	f002 f84c 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     66c:	1a78      	subs	r0, r7, r1
     66e:	0200      	lsls	r0, r0, #8
     670:	17c2      	asrs	r2, r0, #31
     672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     676:	1200      	asrs	r0, r0, #8
     678:	2833      	cmp	r0, #51	; 0x33
     67a:	bfb8      	it	lt
     67c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     680:	e000      	b.n	684 <__data_size+0x1c>
     682:	e002      	b.n	68a <__data_size+0x22>
     684:	bfb8      	it	lt
     686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     68a:	9802      	ldr	r0, [sp, #8]
     68c:	1a38      	subs	r0, r7, r0
     68e:	0200      	lsls	r0, r0, #8
     690:	17c1      	asrs	r1, r0, #31
     692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     696:	1200      	asrs	r0, r0, #8
     698:	2800      	cmp	r0, #0
     69a:	dd03      	ble.n	6a4 <__data_size+0x3c>
     69c:	b009      	add	sp, #36	; 0x24
     69e:	2000      	movs	r0, #0
     6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6a4:	e9d4 1000 	ldrd	r1, r0, [r4]
     6a8:	1a40      	subs	r0, r0, r1
     6aa:	4438      	add	r0, r7
     6ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     6b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6b4:	e9c4 1000 	strd	r1, r0, [r4]
     6b8:	9803      	ldr	r0, [sp, #12]
     6ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6be:	466f      	mov	r7, sp
     6c0:	f890 5020 	ldrb.w	r5, [r0, #32]
     6c4:	2020      	movs	r0, #32
     6c6:	f10d 0a04 	add.w	sl, sp, #4
     6ca:	f88d 0000 	strb.w	r0, [sp]
     6ce:	2d20      	cmp	r5, #32
     6d0:	bf1c      	itt	ne
     6d2:	4836      	ldrne	r0, [pc, #216]	; (7ac <__data_size+0x144>)
     6d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6d8:	d025      	beq.n	726 <__data_size+0xbe>
     6da:	bf00      	nop
     6dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6e4:	6822      	ldr	r2, [r4, #0]
     6e6:	68c1      	ldr	r1, [r0, #12]
     6e8:	1a51      	subs	r1, r2, r1
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	17ca      	asrs	r2, r1, #31
     6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6f2:	3008      	adds	r0, #8
     6f4:	1209      	asrs	r1, r1, #8
     6f6:	d416      	bmi.n	726 <__data_size+0xbe>
     6f8:	8961      	ldrh	r1, [r4, #10]
     6fa:	b171      	cbz	r1, 71a <__data_size+0xb2>
     6fc:	8941      	ldrh	r1, [r0, #10]
     6fe:	b961      	cbnz	r1, 71a <__data_size+0xb2>
     700:	f000 fcd4 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     704:	f001 fffc 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     708:	6821      	ldr	r1, [r4, #0]
     70a:	1a08      	subs	r0, r1, r0
     70c:	0200      	lsls	r0, r0, #8
     70e:	17c1      	asrs	r1, r0, #31
     710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     714:	1200      	asrs	r0, r0, #8
     716:	2833      	cmp	r0, #51	; 0x33
     718:	db05      	blt.n	726 <__data_size+0xbe>
     71a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     71e:	703d      	strb	r5, [r7, #0]
     720:	7845      	ldrb	r5, [r0, #1]
     722:	2d20      	cmp	r5, #32
     724:	d1da      	bne.n	6dc <__data_size+0x74>
     726:	7838      	ldrb	r0, [r7, #0]
     728:	f88a 0000 	strb.w	r0, [sl]
     72c:	4627      	mov	r7, r4
     72e:	2d20      	cmp	r5, #32
     730:	bf1c      	itt	ne
     732:	481e      	ldrne	r0, [pc, #120]	; (7ac <__data_size+0x144>)
     734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     738:	d030      	beq.n	79c <__data_size+0x134>
     73a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     73e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     742:	6879      	ldr	r1, [r7, #4]
     744:	f8d9 2008 	ldr.w	r2, [r9, #8]
     748:	4638      	mov	r0, r7
     74a:	1a51      	subs	r1, r2, r1
     74c:	0209      	lsls	r1, r1, #8
     74e:	17ca      	asrs	r2, r1, #31
     750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     754:	f109 0808 	add.w	r8, r9, #8
     758:	1209      	asrs	r1, r1, #8
     75a:	d412      	bmi.n	782 <__data_size+0x11a>
     75c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     760:	b1e1      	cbz	r1, 79c <__data_size+0x134>
     762:	8941      	ldrh	r1, [r0, #10]
     764:	b9d1      	cbnz	r1, 79c <__data_size+0x134>
     766:	f000 fca1 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     76a:	f001 ffc9 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     76e:	f8d8 1000 	ldr.w	r1, [r8]
     772:	1a08      	subs	r0, r1, r0
     774:	0200      	lsls	r0, r0, #8
     776:	17c1      	asrs	r1, r0, #31
     778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     77c:	1200      	asrs	r0, r0, #8
     77e:	2833      	cmp	r0, #51	; 0x33
     780:	da0c      	bge.n	79c <__data_size+0x134>
     782:	f88a 5000 	strb.w	r5, [sl]
     786:	f899 0014 	ldrb.w	r0, [r9, #20]
     78a:	7b39      	ldrb	r1, [r7, #12]
     78c:	4288      	cmp	r0, r1
     78e:	f67f af2e 	bls.w	5ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x106>
     792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     796:	7845      	ldrb	r5, [r0, #1]
     798:	2d20      	cmp	r5, #32
     79a:	d1ce      	bne.n	73a <__data_size+0xd2>
     79c:	b009      	add	sp, #36	; 0x24
     79e:	2001      	movs	r0, #1
     7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a4:	20000db4 	.word	0x20000db4
     7a8:	20000a34 	.word	0x20000a34
     7ac:	20000d34 	.word	0x20000d34
     7b0:	1e847fff 	.word	0x1e847fff
     7b4:	07a12000 	.word	0x07a12000
     7b8:	f85ee000 	.word	0xf85ee000
     7bc:	1e848000 	.word	0x1e848000
     7c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7c4:	4604      	mov	r4, r0
     7c6:	483c      	ldr	r0, [pc, #240]	; (8b8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb8>)
     7c8:	460e      	mov	r6, r1
     7ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7ce:	4f3b      	ldr	r7, [pc, #236]	; (8bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xbc>)
     7d0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7d4:	2020      	movs	r0, #32
     7d6:	4698      	mov	r8, r3
     7d8:	4692      	mov	sl, r2
     7da:	7010      	strb	r0, [r2, #0]
     7dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7e0:	2d20      	cmp	r5, #32
     7e2:	bf18      	it	ne
     7e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7e8:	d028      	beq.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     7ea:	bf00      	nop
     7ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7f4:	f100 0108 	add.w	r1, r0, #8
     7f8:	68c0      	ldr	r0, [r0, #12]
     7fa:	6822      	ldr	r2, [r4, #0]
     7fc:	1a10      	subs	r0, r2, r0
     7fe:	0200      	lsls	r0, r0, #8
     800:	17c2      	asrs	r2, r0, #31
     802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     806:	1200      	asrs	r0, r0, #8
     808:	d418      	bmi.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     80a:	8960      	ldrh	r0, [r4, #10]
     80c:	b178      	cbz	r0, 82e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e>
     80e:	8948      	ldrh	r0, [r1, #10]
     810:	b968      	cbnz	r0, 82e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e>
     812:	4608      	mov	r0, r1
     814:	f000 fc4a 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     818:	f001 ff72 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     81c:	6821      	ldr	r1, [r4, #0]
     81e:	1a08      	subs	r0, r1, r0
     820:	0200      	lsls	r0, r0, #8
     822:	17c1      	asrs	r1, r0, #31
     824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     828:	1200      	asrs	r0, r0, #8
     82a:	2833      	cmp	r0, #51	; 0x33
     82c:	db06      	blt.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     82e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     832:	f88a 5000 	strb.w	r5, [sl]
     836:	7845      	ldrb	r5, [r0, #1]
     838:	2d20      	cmp	r5, #32
     83a:	d1d7      	bne.n	7ec <__data_size+0x184>
     83c:	f89a 0000 	ldrb.w	r0, [sl]
     840:	f888 0000 	strb.w	r0, [r8]
     844:	2d20      	cmp	r5, #32
     846:	bf18      	it	ne
     848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     84c:	d030      	beq.n	8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     84e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     856:	6861      	ldr	r1, [r4, #4]
     858:	f8d9 2008 	ldr.w	r2, [r9, #8]
     85c:	4620      	mov	r0, r4
     85e:	1a51      	subs	r1, r2, r1
     860:	0209      	lsls	r1, r1, #8
     862:	17ca      	asrs	r2, r1, #31
     864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     868:	f109 0608 	add.w	r6, r9, #8
     86c:	1209      	asrs	r1, r1, #8
     86e:	d410      	bmi.n	892 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x92>
     870:	8971      	ldrh	r1, [r6, #10]
     872:	b1e9      	cbz	r1, 8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     874:	8941      	ldrh	r1, [r0, #10]
     876:	b9d9      	cbnz	r1, 8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     878:	f000 fc18 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     87c:	f001 ff40 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     880:	6831      	ldr	r1, [r6, #0]
     882:	1a08      	subs	r0, r1, r0
     884:	0200      	lsls	r0, r0, #8
     886:	17c1      	asrs	r1, r0, #31
     888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     88c:	1200      	asrs	r0, r0, #8
     88e:	2833      	cmp	r0, #51	; 0x33
     890:	da0e      	bge.n	8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     892:	f888 5000 	strb.w	r5, [r8]
     896:	f899 0014 	ldrb.w	r0, [r9, #20]
     89a:	7b21      	ldrb	r1, [r4, #12]
     89c:	4288      	cmp	r0, r1
     89e:	d802      	bhi.n	8a6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa6>
     8a0:	2000      	movs	r0, #0
     8a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     8aa:	7845      	ldrb	r5, [r0, #1]
     8ac:	2d20      	cmp	r5, #32
     8ae:	d1ce      	bne.n	84e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e>
     8b0:	2001      	movs	r0, #1
     8b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8b6:	0000      	.short	0x0000
     8b8:	20000db4 	.word	0x20000db4
     8bc:	20000a34 	.word	0x20000a34
     8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8c4:	b098      	sub	sp, #96	; 0x60
     8c6:	4616      	mov	r6, r2
     8c8:	460d      	mov	r5, r1
     8ca:	f04f 0800 	mov.w	r8, #0
     8ce:	f04f 0b01 	mov.w	fp, #1
     8d2:	f002 f997 	bl	2c04 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8d6:	4604      	mov	r4, r0
     8d8:	2d01      	cmp	r5, #1
     8da:	bf18      	it	ne
     8dc:	2d02      	cmpne	r5, #2
     8de:	d005      	beq.n	8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>
     8e0:	f640 1194 	movw	r1, #2452	; 0x994
     8e4:	f04f 0070 	mov.w	r0, #112	; 0x70
     8e8:	f002 ff6a 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8ec:	49f9      	ldr	r1, [pc, #996]	; (cd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d4>)
     8ee:	2001      	movs	r0, #1
     8f0:	6008      	str	r0, [r1, #0]
     8f2:	49f9      	ldr	r1, [pc, #996]	; (cd8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d8>)
     8f4:	6889      	ldr	r1, [r1, #8]
     8f6:	6008      	str	r0, [r1, #0]
     8f8:	2000      	movs	r0, #0
     8fa:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     8fe:	900c      	str	r0, [sp, #48]	; 0x30
     900:	1e40      	subs	r0, r0, #1
     902:	900e      	str	r0, [sp, #56]	; 0x38
     904:	49f5      	ldr	r1, [pc, #980]	; (cdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4dc>)
     906:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     90a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     90e:	3308      	adds	r3, #8
     910:	af0f      	add	r7, sp, #60	; 0x3c
     912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     914:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     918:	a80f      	add	r0, sp, #60	; 0x3c
     91a:	f000 fbc7 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     91e:	900d      	str	r0, [sp, #52]	; 0x34
     920:	48ee      	ldr	r0, [pc, #952]	; (cdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4dc>)
     922:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     926:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     92a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     92e:	f1b9 0f00 	cmp.w	r9, #0
     932:	bf14      	ite	ne
     934:	f04f 0a01 	movne.w	sl, #1
     938:	f04f 0a00 	moveq.w	sl, #0
     93c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     93e:	9014      	str	r0, [sp, #80]	; 0x50
     940:	f1ba 0f00 	cmp.w	sl, #0
     944:	d009      	beq.n	95a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15a>
     946:	48e6      	ldr	r0, [pc, #920]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     948:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     94c:	b928      	cbnz	r0, 95a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15a>
     94e:	f002 febf 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     952:	2800      	cmp	r0, #0
     954:	bf08      	it	eq
     956:	2701      	moveq	r7, #1
     958:	d000      	beq.n	95c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x15c>
     95a:	2700      	movs	r7, #0
     95c:	48e1      	ldr	r0, [pc, #900]	; (ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>)
     95e:	2200      	movs	r2, #0
     960:	9215      	str	r2, [sp, #84]	; 0x54
     962:	7800      	ldrb	r0, [r0, #0]
     964:	4616      	mov	r6, r2
     966:	2801      	cmp	r0, #1
     968:	bf18      	it	ne
     96a:	2803      	cmpne	r0, #3
     96c:	d140      	bne.n	9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     96e:	48dd      	ldr	r0, [pc, #884]	; (ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>)
     970:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     974:	eba8 0009 	sub.w	r0, r8, r9
     978:	9015      	str	r0, [sp, #84]	; 0x54
     97a:	45c8      	cmp	r8, r9
     97c:	d938      	bls.n	9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     97e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     980:	ea6f 0108 	mvn.w	r1, r8
     984:	f8df e360 	ldr.w	lr, [pc, #864]	; ce8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e8>
     988:	1858      	adds	r0, r3, r1
     98a:	f10d 0c0c 	add.w	ip, sp, #12
     98e:	aa17      	add	r2, sp, #92	; 0x5c
     990:	4573      	cmp	r3, lr
     992:	d904      	bls.n	99e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x19e>
     994:	f240 6109 	movw	r1, #1545	; 0x609
     998:	2070      	movs	r0, #112	; 0x70
     99a:	f002 ff11 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     99e:	4bd3      	ldr	r3, [pc, #844]	; (cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>)
     9a0:	4299      	cmp	r1, r3
     9a2:	dd04      	ble.n	9ae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1ae>
     9a4:	f240 610a 	movw	r1, #1546	; 0x60a
     9a8:	2070      	movs	r0, #112	; 0x70
     9aa:	f002 ff09 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9ae:	4bd0      	ldr	r3, [pc, #832]	; (cf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f0>)
     9b0:	4299      	cmp	r1, r3
     9b2:	da04      	bge.n	9be <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1be>
     9b4:	f240 610b 	movw	r1, #1547	; 0x60b
     9b8:	2070      	movs	r0, #112	; 0x70
     9ba:	f002 ff01 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9be:	49cd      	ldr	r1, [pc, #820]	; (cf4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f4>)
     9c0:	4281      	cmp	r1, r0
     9c2:	bfdc      	itt	le
     9c4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     9c8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9cc:	dd05      	ble.n	9da <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1da>
     9ce:	2800      	cmp	r0, #0
     9d0:	bfbc      	itt	lt
     9d2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9d6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9da:	4661      	mov	r1, ip
     9dc:	f001 feac 	bl	2738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9e0:	9803      	ldr	r0, [sp, #12]
     9e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9e8:	9003      	str	r0, [sp, #12]
     9ea:	1a08      	subs	r0, r1, r0
     9ec:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9f0:	2f00      	cmp	r7, #0
     9f2:	bf18      	it	ne
     9f4:	2632      	movne	r6, #50	; 0x32
     9f6:	d104      	bne.n	a02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x202>
     9f8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9fc:	2800      	cmp	r0, #0
     9fe:	bf18      	it	ne
     a00:	2602      	movne	r6, #2
     a02:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a06:	d008      	beq.n	a1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x21a>
     a08:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a0a:	1b00      	subs	r0, r0, r4
     a0c:	0200      	lsls	r0, r0, #8
     a0e:	17c1      	asrs	r1, r0, #31
     a10:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a14:	1200      	asrs	r0, r0, #8
     a16:	2801      	cmp	r0, #1
     a18:	da02      	bge.n	a20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x220>
     a1a:	2004      	movs	r0, #4
     a1c:	9918      	ldr	r1, [sp, #96]	; 0x60
     a1e:	e00b      	b.n	a38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x238>
     a20:	b147      	cbz	r7, a34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x234>
     a22:	48af      	ldr	r0, [pc, #700]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     a24:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a28:	b120      	cbz	r0, a34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x234>
     a2a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a2e:	1c06      	adds	r6, r0, #0
     a30:	bf18      	it	ne
     a32:	2602      	movne	r6, #2
     a34:	4621      	mov	r1, r4
     a36:	2001      	movs	r0, #1
     a38:	f1b9 0f00 	cmp.w	r9, #0
     a3c:	d002      	beq.n	a44 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x244>
     a3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a40:	2b1e      	cmp	r3, #30
     a42:	da02      	bge.n	a4a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24a>
     a44:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a48:	b113      	cbz	r3, a50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x250>
     a4a:	f04f 0b00 	mov.w	fp, #0
     a4e:	1e40      	subs	r0, r0, #1
     a50:	1983      	adds	r3, r0, r6
     a52:	48a4      	ldr	r0, [pc, #656]	; (ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>)
     a54:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a58:	7800      	ldrb	r0, [r0, #0]
     a5a:	9015      	str	r0, [sp, #84]	; 0x54
     a5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a5e:	1a80      	subs	r0, r0, r2
     a60:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     a64:	ebac 0001 	sub.w	r0, ip, r1
     a68:	0200      	lsls	r0, r0, #8
     a6a:	17c6      	asrs	r6, r0, #31
     a6c:	eb00 6016 	add.w	r0, r0, r6, lsr #24
     a70:	1200      	asrs	r0, r0, #8
     a72:	4298      	cmp	r0, r3
     a74:	db18      	blt.n	aa8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a8>
     a76:	2a00      	cmp	r2, #0
     a78:	bf18      	it	ne
     a7a:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a7e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a80:	9705      	str	r7, [sp, #20]
     a82:	2700      	movs	r7, #0
     a84:	f001 ffb6 	bl	29f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a88:	1a30      	subs	r0, r6, r0
     a8a:	0200      	lsls	r0, r0, #8
     a8c:	17c1      	asrs	r1, r0, #31
     a8e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a92:	1200      	asrs	r0, r0, #8
     a94:	283e      	cmp	r0, #62	; 0x3e
     a96:	da3f      	bge.n	b18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x318>
     a98:	2d01      	cmp	r5, #1
     a9a:	d020      	beq.n	ade <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2de>
     a9c:	1e70      	subs	r0, r6, #1
     a9e:	9905      	ldr	r1, [sp, #20]
     aa0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     aa4:	b319      	cbz	r1, aee <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ee>
     aa6:	e02d      	b.n	b04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x304>
     aa8:	b182      	cbz	r2, acc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2cc>
     aaa:	f1be 0f00 	cmp.w	lr, #0
     aae:	bf04      	itt	eq
     ab0:	9815      	ldreq	r0, [sp, #84]	; 0x54
     ab2:	2803      	cmpeq	r0, #3
     ab4:	d00a      	beq.n	acc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2cc>
     ab6:	b927      	cbnz	r7, ac2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c2>
     ab8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     abc:	2800      	cmp	r0, #0
     abe:	bf18      	it	ne
     ac0:	1e9b      	subne	r3, r3, #2
     ac2:	2200      	movs	r2, #0
     ac4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     ac8:	4690      	mov	r8, r2
     aca:	e7c7      	b.n	a5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x25c>
     acc:	bb07      	cbnz	r7, b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>
     ace:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     ad2:	b1e8      	cbz	r0, b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>
     ad4:	2000      	movs	r0, #0
     ad6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     ada:	1e9b      	subs	r3, r3, #2
     adc:	e7be      	b.n	a5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x25c>
     ade:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ae2:	d120      	bne.n	b26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x326>
     ae4:	f640 110d 	movw	r1, #2317	; 0x90d
     ae8:	2070      	movs	r0, #112	; 0x70
     aea:	f002 fe69 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aee:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     af2:	d007      	beq.n	b04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x304>
     af4:	1a21      	subs	r1, r4, r0
     af6:	0209      	lsls	r1, r1, #8
     af8:	17ca      	asrs	r2, r1, #31
     afa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     afe:	1209      	asrs	r1, r1, #8
     b00:	2904      	cmp	r1, #4
     b02:	dd03      	ble.n	b0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30c>
     b04:	4604      	mov	r4, r0
     b06:	f001 ff7b 	bl	2a00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b0a:	e00c      	b.n	b26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x326>
     b0c:	2900      	cmp	r1, #0
     b0e:	dd0a      	ble.n	b26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x326>
     b10:	b01b      	add	sp, #108	; 0x6c
     b12:	2000      	movs	r0, #0
     b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b18:	1e70      	subs	r0, r6, #1
     b1a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b1e:	4620      	mov	r0, r4
     b20:	f001 ff6e 	bl	2a00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b24:	4657      	mov	r7, sl
     b26:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b2a:	d024      	beq.n	b76 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x376>
     b2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     b30:	1b00      	subs	r0, r0, r4
     b32:	1b1b      	subs	r3, r3, r4
     b34:	4a70      	ldr	r2, [pc, #448]	; (cf8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f8>)
     b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     b3e:	4583      	cmp	fp, r0
     b40:	bf98      	it	ls
     b42:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b46:	d2e3      	bcs.n	b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>
     b48:	429a      	cmp	r2, r3
     b4a:	d3e1      	bcc.n	b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>
     b4c:	4620      	mov	r0, r4
     b4e:	f00b fbb9 	bl	c2c4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b52:	4965      	ldr	r1, [pc, #404]	; (ce8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e8>)
     b54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b56:	1c4b      	adds	r3, r1, #1
     b58:	1a16      	subs	r6, r2, r0
     b5a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b5e:	bf24      	itt	cs
     b60:	eba0 0c02 	subcs.w	ip, r0, r2
     b64:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b68:	d310      	bcc.n	b8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38c>
     b6a:	42b1      	cmp	r1, r6
     b6c:	d208      	bcs.n	b80 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x380>
     b6e:	1a08      	subs	r0, r1, r0
     b70:	4410      	add	r0, r2
     b72:	1c46      	adds	r6, r0, #1
     b74:	e00a      	b.n	b8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38c>
     b76:	f640 212d 	movw	r1, #2605	; 0xa2d
     b7a:	2070      	movs	r0, #112	; 0x70
     b7c:	f002 fe20 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b80:	4561      	cmp	r1, ip
     b82:	d22c      	bcs.n	bde <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3de>
     b84:	1a89      	subs	r1, r1, r2
     b86:	4408      	add	r0, r1
     b88:	1c40      	adds	r0, r0, #1
     b8a:	4246      	negs	r6, r0
     b8c:	4854      	ldr	r0, [pc, #336]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     b8e:	7f80      	ldrb	r0, [r0, #30]
     b90:	b350      	cbz	r0, be8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e8>
     b92:	4628      	mov	r0, r5
     b94:	4645      	mov	r5, r8
     b96:	f04f 0b00 	mov.w	fp, #0
     b9a:	46d8      	mov	r8, fp
     b9c:	2801      	cmp	r0, #1
     b9e:	d005      	beq.n	bac <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3ac>
     ba0:	2002      	movs	r0, #2
     ba2:	f002 f985 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ba6:	2001      	movs	r0, #1
     ba8:	f002 f982 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     bac:	45a9      	cmp	r9, r5
     bae:	d227      	bcs.n	c00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x400>
     bb0:	eba6 0105 	sub.w	r1, r6, r5
     bb4:	f04f 0301 	mov.w	r3, #1
     bb8:	f04f 0203 	mov.w	r2, #3
     bbc:	f04f 0002 	mov.w	r0, #2
     bc0:	f002 f8a2 	bl	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bc4:	2800      	cmp	r0, #0
     bc6:	bf08      	it	eq
     bc8:	f04f 0801 	moveq.w	r8, #1
     bcc:	f1b9 0f00 	cmp.w	r9, #0
     bd0:	d030      	beq.n	c34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x434>
     bd2:	2301      	movs	r3, #1
     bd4:	eba6 0109 	sub.w	r1, r6, r9
     bd8:	2203      	movs	r2, #3
     bda:	4618      	mov	r0, r3
     bdc:	e01e      	b.n	c1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x41c>
     bde:	f640 310c 	movw	r1, #2828	; 0xb0c
     be2:	2070      	movs	r0, #112	; 0x70
     be4:	f002 fdec 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     be8:	45c1      	cmp	r9, r8
     bea:	bf34      	ite	cc
     bec:	4640      	movcc	r0, r8
     bee:	4648      	movcs	r0, r9
     bf0:	4458      	add	r0, fp
     bf2:	42b0      	cmp	r0, r6
     bf4:	dbcd      	blt.n	b92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x392>
     bf6:	f44f 6124 	mov.w	r1, #2624	; 0xa40
     bfa:	2070      	movs	r0, #112	; 0x70
     bfc:	f002 fde0 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c00:	d910      	bls.n	c24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x424>
     c02:	2301      	movs	r3, #1
     c04:	eba6 0109 	sub.w	r1, r6, r9
     c08:	2203      	movs	r2, #3
     c0a:	4618      	mov	r0, r3
     c0c:	f002 f87c 	bl	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c10:	b328      	cbz	r0, c5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x45e>
     c12:	b17d      	cbz	r5, c34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x434>
     c14:	1b71      	subs	r1, r6, r5
     c16:	2301      	movs	r3, #1
     c18:	2203      	movs	r2, #3
     c1a:	2002      	movs	r0, #2
     c1c:	f002 f874 	bl	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c20:	b1e8      	cbz	r0, c5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x45e>
     c22:	e007      	b.n	c34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x434>
     c24:	ea55 0009 	orrs.w	r0, r5, r9
     c28:	d004      	beq.n	c34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x434>
     c2a:	f640 1177 	movw	r1, #2423	; 0x977
     c2e:	2070      	movs	r0, #112	; 0x70
     c30:	f002 fdc6 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c34:	2301      	movs	r3, #1
     c36:	2203      	movs	r2, #3
     c38:	4631      	mov	r1, r6
     c3a:	2000      	movs	r0, #0
     c3c:	f002 f864 	bl	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c40:	b168      	cbz	r0, c5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x45e>
     c42:	2501      	movs	r5, #1
     c44:	f1b8 0f00 	cmp.w	r8, #0
     c48:	d003      	beq.n	c52 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x452>
     c4a:	9814      	ldr	r0, [sp, #80]	; 0x50
     c4c:	900f      	str	r0, [sp, #60]	; 0x3c
     c4e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cfc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4fc>
     c56:	f1ba 0f00 	cmp.w	sl, #0
     c5a:	d10e      	bne.n	c7a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x47a>
     c5c:	e009      	b.n	c72 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x472>
     c5e:	2002      	movs	r0, #2
     c60:	f002 f926 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c64:	2001      	movs	r0, #1
     c66:	f002 f923 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c6a:	b01b      	add	sp, #108	; 0x6c
     c6c:	2000      	movs	r0, #0
     c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c72:	481b      	ldr	r0, [pc, #108]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     c74:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c78:	b100      	cbz	r0, c7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x47c>
     c7a:	b34f      	cbz	r7, cd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d0>
     c7c:	f8df a060 	ldr.w	sl, [pc, #96]	; ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>
     c80:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c84:	b118      	cbz	r0, c8e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48e>
     c86:	f002 fbeb 	bl	3460 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c8a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c8e:	b307      	cbz	r7, cd2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d2>
     c90:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     c94:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     c9c:	f8c8 0000 	str.w	r0, [r8]
     ca0:	2300      	movs	r3, #0
     ca2:	2203      	movs	r2, #3
     ca4:	2005      	movs	r0, #5
     ca6:	f002 f82f 	bl	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     caa:	b368      	cbz	r0, d08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x508>
     cac:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     cb0:	2005      	movs	r0, #5
     cb2:	f002 f9c9 	bl	3048 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     cb6:	4912      	ldr	r1, [pc, #72]	; (d00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x500>)
     cb8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     cbc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     cc0:	4910      	ldr	r1, [pc, #64]	; (d04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x504>)
     cc2:	12e0      	asrs	r0, r4, #11
     cc4:	6008      	str	r0, [r1, #0]
     cc6:	4c06      	ldr	r4, [pc, #24]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     cc8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     ccc:	b3e8      	cbz	r0, d4a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x54a>
     cce:	e030      	b.n	d32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x532>
     cd0:	e01b      	b.n	d0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x50a>
     cd2:	e01f      	b.n	d14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x514>
     cd4:	40000508 	.word	0x40000508
     cd8:	20000010 	.word	0x20000010
     cdc:	20000a34 	.word	0x20000a34
     ce0:	20000db4 	.word	0x20000db4
     ce4:	20000012 	.word	0x20000012
     ce8:	1e847fff 	.word	0x1e847fff
     cec:	07a12000 	.word	0x07a12000
     cf0:	f85ee000 	.word	0xf85ee000
     cf4:	1e848000 	.word	0x1e848000
     cf8:	003fffff 	.word	0x003fffff
     cfc:	4001f508 	.word	0x4001f508
     d00:	4001f098 	.word	0x4001f098
     d04:	4001f504 	.word	0x4001f504
     d08:	e025      	b.n	d56 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x556>
     d0a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>
     d0e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d12:	b1c8      	cbz	r0, d48 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x548>
     d14:	4c2b      	ldr	r4, [pc, #172]	; (dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>)
     d16:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d1a:	b150      	cbz	r0, d32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x532>
     d1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d20:	f8c8 0000 	str.w	r0, [r8]
     d24:	2005      	movs	r0, #5
     d26:	f002 f8c3 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d2a:	f002 fc01 	bl	3530 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d2e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d32:	eba6 0009 	sub.w	r0, r6, r9
     d36:	f1a0 0119 	sub.w	r1, r0, #25
     d3a:	2900      	cmp	r1, #0
     d3c:	dc15      	bgt.n	d6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x56a>
     d3e:	f640 2171 	movw	r1, #2673	; 0xa71
     d42:	2070      	movs	r0, #112	; 0x70
     d44:	f002 fd3c 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d48:	e000      	b.n	d4c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x54c>
     d4a:	e009      	b.n	d60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x560>
     d4c:	f002 fba4 	bl	3498 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d50:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d54:	e79b      	b.n	c8e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48e>
     d56:	f240 313e 	movw	r1, #830	; 0x33e
     d5a:	2070      	movs	r0, #112	; 0x70
     d5c:	f002 fd30 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d60:	f002 fbd8 	bl	3514 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d64:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d68:	e7e3      	b.n	d32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x532>
     d6a:	2203      	movs	r2, #3
     d6c:	2301      	movs	r3, #1
     d6e:	4610      	mov	r0, r2
     d70:	f001 ffca 	bl	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d74:	b308      	cbz	r0, dba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ba>
     d76:	4814      	ldr	r0, [pc, #80]	; (dc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c8>)
     d78:	6880      	ldr	r0, [r0, #8]
     d7a:	f8c0 b000 	str.w	fp, [r0]
     d7e:	4813      	ldr	r0, [pc, #76]	; (dcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5cc>)
     d80:	f8c0 b000 	str.w	fp, [r0]
     d84:	ac0c      	add	r4, sp, #48	; 0x30
     d86:	4812      	ldr	r0, [pc, #72]	; (dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     d88:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d8c:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d90:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d94:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d98:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d9c:	ac10      	add	r4, sp, #64	; 0x40
     d9e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     da2:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     da6:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     daa:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     dae:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     db2:	b01b      	add	sp, #108	; 0x6c
     db4:	2001      	movs	r0, #1
     db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     dba:	f640 2179 	movw	r1, #2681	; 0xa79
     dbe:	2070      	movs	r0, #112	; 0x70
     dc0:	f002 fcfe 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dc4:	20000db4 	.word	0x20000db4
     dc8:	20000010 	.word	0x20000010
     dcc:	40000508 	.word	0x40000508
     dd0:	20000a34 	.word	0x20000a34
     dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     dd8:	4606      	mov	r6, r0
     dda:	b083      	sub	sp, #12
     ddc:	7808      	ldrb	r0, [r1, #0]
     dde:	7390      	strb	r0, [r2, #14]
     de0:	7acf      	ldrb	r7, [r1, #11]
     de2:	7357      	strb	r7, [r2, #13]
     de4:	7a88      	ldrb	r0, [r1, #10]
     de6:	7310      	strb	r0, [r2, #12]
     de8:	8908      	ldrh	r0, [r1, #8]
     dea:	4614      	mov	r4, r2
     dec:	8150      	strh	r0, [r2, #10]
     dee:	460d      	mov	r5, r1
     df0:	780a      	ldrb	r2, [r1, #0]
     df2:	495f      	ldr	r1, [pc, #380]	; (f70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x770>)
     df4:	4699      	mov	r9, r3
     df6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     dfa:	424b      	negs	r3, r1
     dfc:	f1ac 0801 	sub.w	r8, ip, #1
     e00:	b15a      	cbz	r2, e1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x61a>
     e02:	43c0      	mvns	r0, r0
     e04:	f8d5 8004 	ldr.w	r8, [r5, #4]
     e08:	f104 0208 	add.w	r2, r4, #8
     e0c:	4288      	cmp	r0, r1
     e0e:	dd3d      	ble.n	e8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68c>
     e10:	f240 610a 	movw	r1, #1546	; 0x60a
     e14:	2070      	movs	r0, #112	; 0x70
     e16:	f002 fcd3 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e1a:	68ee      	ldr	r6, [r5, #12]
     e1c:	686d      	ldr	r5, [r5, #4]
     e1e:	ea6f 0900 	mvn.w	r9, r0
     e22:	f104 0208 	add.w	r2, r4, #8
     e26:	eb06 0009 	add.w	r0, r6, r9
     e2a:	4546      	cmp	r6, r8
     e2c:	d904      	bls.n	e38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x638>
     e2e:	f240 6109 	movw	r1, #1545	; 0x609
     e32:	2070      	movs	r0, #112	; 0x70
     e34:	f002 fcc4 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e38:	4589      	cmp	r9, r1
     e3a:	dce9      	bgt.n	e10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x610>
     e3c:	4599      	cmp	r9, r3
     e3e:	db28      	blt.n	e92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x692>
     e40:	4584      	cmp	ip, r0
     e42:	bfdc      	itt	le
     e44:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e48:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e4c:	dd05      	ble.n	e5a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x65a>
     e4e:	2800      	cmp	r0, #0
     e50:	bfbc      	itt	lt
     e52:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e56:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e5a:	4621      	mov	r1, r4
     e5c:	f001 fc6c 	bl	2738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e60:	6820      	ldr	r0, [r4, #0]
     e62:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e66:	1970      	adds	r0, r6, r5
     e68:	1c40      	adds	r0, r0, #1
     e6a:	6021      	str	r1, [r4, #0]
     e6c:	2f00      	cmp	r7, #0
     e6e:	bf08      	it	eq
     e70:	307a      	addeq	r0, #122	; 0x7a
     e72:	d003      	beq.n	e7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x67c>
     e74:	2f01      	cmp	r7, #1
     e76:	bf08      	it	eq
     e78:	3048      	addeq	r0, #72	; 0x48
     e7a:	d12d      	bne.n	ed8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6d8>
     e7c:	f001 fc40 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e84:	6060      	str	r0, [r4, #4]
     e86:	b003      	add	sp, #12
     e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e8c:	4601      	mov	r1, r0
     e8e:	4298      	cmp	r0, r3
     e90:	da04      	bge.n	e9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x69c>
     e92:	f240 610b 	movw	r1, #1547	; 0x60b
     e96:	2070      	movs	r0, #112	; 0x70
     e98:	f002 fc92 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e9c:	4584      	cmp	ip, r0
     e9e:	bfdc      	itt	le
     ea0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     ea4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     ea8:	dd05      	ble.n	eb6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6b6>
     eaa:	2800      	cmp	r0, #0
     eac:	bfbc      	itt	lt
     eae:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     eb2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     eb6:	4621      	mov	r1, r4
     eb8:	f001 fc3e 	bl	2738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ebc:	6820      	ldr	r0, [r4, #0]
     ebe:	2f00      	cmp	r7, #0
     ec0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ec4:	f108 0001 	add.w	r0, r8, #1
     ec8:	6021      	str	r1, [r4, #0]
     eca:	bf08      	it	eq
     ecc:	307a      	addeq	r0, #122	; 0x7a
     ece:	d008      	beq.n	ee2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e2>
     ed0:	2f01      	cmp	r7, #1
     ed2:	bf08      	it	eq
     ed4:	3048      	addeq	r0, #72	; 0x48
     ed6:	d004      	beq.n	ee2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e2>
     ed8:	f240 61b1 	movw	r1, #1713	; 0x6b1
     edc:	2070      	movs	r0, #112	; 0x70
     ede:	f002 fc6f 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ee2:	f001 fc0d 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ee6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     eea:	6061      	str	r1, [r4, #4]
     eec:	8960      	ldrh	r0, [r4, #10]
     eee:	aa01      	add	r2, sp, #4
     ef0:	4669      	mov	r1, sp
     ef2:	f001 fc21 	bl	2738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ef6:	481f      	ldr	r0, [pc, #124]	; (f74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x774>)
     ef8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     efc:	2920      	cmp	r1, #32
     efe:	d023      	beq.n	f48 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x748>
     f00:	6900      	ldr	r0, [r0, #16]
     f02:	1d40      	adds	r0, r0, #5
     f04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f08:	e9d4 2100 	ldrd	r2, r1, [r4]
     f0c:	1a89      	subs	r1, r1, r2
     f0e:	6020      	str	r0, [r4, #0]
     f10:	4408      	add	r0, r1
     f12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f16:	6060      	str	r0, [r4, #4]
     f18:	464b      	mov	r3, r9
     f1a:	4632      	mov	r2, r6
     f1c:	4621      	mov	r1, r4
     f1e:	68e8      	ldr	r0, [r5, #12]
     f20:	f7ff fad2 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
     f24:	2800      	cmp	r0, #0
     f26:	bf1c      	itt	ne
     f28:	b003      	addne	sp, #12
     f2a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f2e:	e9d4 1000 	ldrd	r1, r0, [r4]
     f32:	1a40      	subs	r0, r0, r1
     f34:	4430      	add	r0, r6
     f36:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f3e:	e9c4 1000 	strd	r1, r0, [r4]
     f42:	b003      	add	sp, #12
     f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f48:	8960      	ldrh	r0, [r4, #10]
     f4a:	f106 0709 	add.w	r7, r6, #9
     f4e:	b120      	cbz	r0, f5a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x75a>
     f50:	f002 fbbe 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f54:	2800      	cmp	r0, #0
     f56:	bf08      	it	eq
     f58:	3732      	addeq	r7, #50	; 0x32
     f5a:	4807      	ldr	r0, [pc, #28]	; (f78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x778>)
     f5c:	7841      	ldrb	r1, [r0, #1]
     f5e:	9800      	ldr	r0, [sp, #0]
     f60:	4281      	cmp	r1, r0
     f62:	bf84      	itt	hi
     f64:	1a08      	subhi	r0, r1, r0
     f66:	4407      	addhi	r7, r0
     f68:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f6c:	e7cc      	b.n	f08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x708>
     f6e:	0000      	.short	0x0000
     f70:	07a12000 	.word	0x07a12000
     f74:	20000db4 	.word	0x20000db4
     f78:	20000012 	.word	0x20000012
     f7c:	b510      	push	{r4, lr}
     f7e:	4c15      	ldr	r4, [pc, #84]	; (fd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7d4>)
     f80:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f84:	2820      	cmp	r0, #32
     f86:	bf18      	it	ne
     f88:	bd10      	popne	{r4, pc}
     f8a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f8e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f92:	f890 1020 	ldrb.w	r1, [r0, #32]
     f96:	2920      	cmp	r1, #32
     f98:	d017      	beq.n	fca <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7ca>
     f9a:	f8df c03c 	ldr.w	ip, [pc, #60]	; fd8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7d8>
     f9e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     fa2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     fa6:	785b      	ldrb	r3, [r3, #1]
     fa8:	f880 3020 	strb.w	r3, [r0, #32]
     fac:	2301      	movs	r3, #1
     fae:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     fb2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     fb6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     fba:	2002      	movs	r0, #2
     fbc:	f000 f8b0 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
     fc0:	2000      	movs	r0, #0
     fc2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fc6:	77a0      	strb	r0, [r4, #30]
     fc8:	bd10      	pop	{r4, pc}
     fca:	f240 318b 	movw	r1, #907	; 0x38b
     fce:	2070      	movs	r0, #112	; 0x70
     fd0:	f002 fbf6 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd4:	20000db4 	.word	0x20000db4
     fd8:	20000d34 	.word	0x20000d34
     fdc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fe0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
     fe4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fe8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fec:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     ff0:	2c20      	cmp	r4, #32
     ff2:	bf08      	it	eq
     ff4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     ff8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
     ffc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1000:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1004:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1008:	2607      	movs	r6, #7
    100a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    100e:	2801      	cmp	r0, #1
    1010:	d00e      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1012:	2804      	cmp	r0, #4
    1014:	bf08      	it	eq
    1016:	2602      	moveq	r6, #2
    1018:	d00a      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    101a:	2805      	cmp	r0, #5
    101c:	bf0c      	ite	eq
    101e:	2603      	moveq	r6, #3
    1020:	2806      	cmpne	r0, #6
    1022:	d005      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1024:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1028:	f04f 0070 	mov.w	r0, #112	; 0x70
    102c:	f002 fbc8 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1030:	f1bb 0f00 	cmp.w	fp, #0
    1034:	bf18      	it	ne
    1036:	f3af 8000 	nopne.w
    103a:	f3ef 8010 	mrs	r0, PRIMASK
    103e:	b672      	cpsid	i
    1040:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1044:	784a      	ldrb	r2, [r1, #1]
    1046:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    104a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    104e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1052:	42a2      	cmp	r2, r4
    1054:	bf04      	itt	eq
    1056:	2220      	moveq	r2, #32
    1058:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    105c:	b1b8      	cbz	r0, 108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    105e:	462a      	mov	r2, r5
    1060:	4621      	mov	r1, r4
    1062:	2001      	movs	r0, #1
    1064:	f000 f85c 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1068:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    106c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1070:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1074:	6840      	ldr	r0, [r0, #4]
    1076:	4631      	mov	r1, r6
    1078:	4790      	blx	r2
    107a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    107e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1082:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1086:	2c20      	cmp	r4, #32
    1088:	d1bc      	bne.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    108a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    108e:	4806      	ldr	r0, [pc, #24]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1090:	2800      	cmp	r0, #0
    1092:	bf18      	it	ne
    1094:	f3af 8000 	nopne.w
    1098:	b662      	cpsie	i
    109a:	e7e0      	b.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    109c:	20000db4 	.word	0x20000db4
    10a0:	00000000 	.word	0x00000000
    10a4:	20000d34 	.word	0x20000d34
    10a8:	00000000 	.word	0x00000000
    10ac:	b510      	push	{r4, lr}
    10ae:	4604      	mov	r4, r0
    10b0:	6800      	ldr	r0, [r0, #0]
    10b2:	f00b f907 	bl	c2c4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    10b6:	4602      	mov	r2, r0
    10b8:	8960      	ldrh	r0, [r4, #10]
    10ba:	7a21      	ldrb	r1, [r4, #8]
    10bc:	4b14      	ldr	r3, [pc, #80]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    10be:	4408      	add	r0, r1
    10c0:	1c41      	adds	r1, r0, #1
    10c2:	1850      	adds	r0, r2, r1
    10c4:	429a      	cmp	r2, r3
    10c6:	d904      	bls.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    10c8:	f240 6109 	movw	r1, #1545	; 0x609
    10cc:	2070      	movs	r0, #112	; 0x70
    10ce:	f002 fb77 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d2:	4a10      	ldr	r2, [pc, #64]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    10d4:	4291      	cmp	r1, r2
    10d6:	dd04      	ble.n	10e2 <CONFIG_FPROTECT_BLOCK_SIZE+0xe2>
    10d8:	f240 610a 	movw	r1, #1546	; 0x60a
    10dc:	2070      	movs	r0, #112	; 0x70
    10de:	f002 fb6f 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10e2:	4a0d      	ldr	r2, [pc, #52]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    10e4:	4291      	cmp	r1, r2
    10e6:	da04      	bge.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10e8:	f240 610b 	movw	r1, #1547	; 0x60b
    10ec:	2070      	movs	r0, #112	; 0x70
    10ee:	f002 fb67 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10f2:	490a      	ldr	r1, [pc, #40]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    10f4:	4281      	cmp	r1, r0
    10f6:	bfde      	ittt	le
    10f8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10fc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1100:	bd10      	pople	{r4, pc}
    1102:	2800      	cmp	r0, #0
    1104:	bfbc      	itt	lt
    1106:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    110a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    110e:	bd10      	pop	{r4, pc}
    1110:	1e847fff 	.word	0x1e847fff
    1114:	07a12000 	.word	0x07a12000
    1118:	f85ee000 	.word	0xf85ee000
    111c:	1e848000 	.word	0x1e848000
    1120:	f8df c054 	ldr.w	ip, [pc, #84]	; 1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    1124:	b510      	push	{r4, lr}
    1126:	2300      	movs	r3, #0
    1128:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    112c:	2807      	cmp	r0, #7
    112e:	d21e      	bcs.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1130:	e8df f000 	tbb	[pc, r0]
    1134:	05050505 	.word	0x05050505
    1138:	00040404 	.word	0x00040404
    113c:	2301      	movs	r3, #1
    113e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1142:	2b00      	cmp	r3, #0
    1144:	bf08      	it	eq
    1146:	bd10      	popeq	{r4, pc}
    1148:	480c      	ldr	r0, [pc, #48]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    114a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    114e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1152:	2820      	cmp	r0, #32
    1154:	bf0e      	itee	eq
    1156:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    115a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    115e:	7041      	strbne	r1, [r0, #1]
    1160:	2020      	movs	r0, #32
    1162:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1166:	7058      	strb	r0, [r3, #1]
    1168:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    116c:	bd10      	pop	{r4, pc}
    116e:	f44f 7115 	mov.w	r1, #596	; 0x254
    1172:	2070      	movs	r0, #112	; 0x70
    1174:	f002 fb24 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1178:	20000d34 	.word	0x20000d34
    117c:	20000db4 	.word	0x20000db4
    1180:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1184:	b083      	sub	sp, #12
    1186:	485c      	ldr	r0, [pc, #368]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1188:	9904      	ldr	r1, [sp, #16]
    118a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    118e:	9001      	str	r0, [sp, #4]
    1190:	f890 4020 	ldrb.w	r4, [r0, #32]
    1194:	9803      	ldr	r0, [sp, #12]
    1196:	4625      	mov	r5, r4
    1198:	2801      	cmp	r0, #1
    119a:	bf18      	it	ne
    119c:	2802      	cmpne	r0, #2
    119e:	d005      	beq.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    11a0:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    11a4:	f04f 0070 	mov.w	r0, #112	; 0x70
    11a8:	f002 fb0a 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11ac:	2700      	movs	r7, #0
    11ae:	2d20      	cmp	r5, #32
    11b0:	d04a      	beq.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    11b2:	4851      	ldr	r0, [pc, #324]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    11b4:	9100      	str	r1, [sp, #0]
    11b6:	2600      	movs	r6, #0
    11b8:	7f80      	ldrb	r0, [r0, #30]
    11ba:	2800      	cmp	r0, #0
    11bc:	bf08      	it	eq
    11be:	2602      	moveq	r6, #2
    11c0:	f001 fc18 	bl	29f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11c4:	f8df a138 	ldr.w	sl, [pc, #312]	; 1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
    11c8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11cc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11d0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    11d4:	688a      	ldr	r2, [r1, #8]
    11d6:	68c9      	ldr	r1, [r1, #12]
    11d8:	1a12      	subs	r2, r2, r0
    11da:	1a09      	subs	r1, r1, r0
    11dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11e4:	4296      	cmp	r6, r2
    11e6:	bf98      	it	ls
    11e8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11ec:	d201      	bcs.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    11ee:	4589      	cmp	r9, r1
    11f0:	d228      	bcs.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    11f2:	4a44      	ldr	r2, [pc, #272]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    11f4:	9900      	ldr	r1, [sp, #0]
    11f6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11fa:	4622      	mov	r2, r4
    11fc:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1200:	784c      	ldrb	r4, [r1, #1]
    1202:	2c20      	cmp	r4, #32
    1204:	d016      	beq.n	1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>
    1206:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    120a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    120e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1212:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1216:	eba8 0800 	sub.w	r8, r8, r0
    121a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    121e:	ebac 0100 	sub.w	r1, ip, r0
    1222:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1226:	4546      	cmp	r6, r8
    1228:	bf98      	it	ls
    122a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    122e:	d2e4      	bcs.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1230:	4589      	cmp	r9, r1
    1232:	d3e2      	bcc.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1234:	2a20      	cmp	r2, #32
    1236:	d005      	beq.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    1238:	2120      	movs	r1, #32
    123a:	2004      	movs	r0, #4
    123c:	9b00      	ldr	r3, [sp, #0]
    123e:	f7ff f907 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1242:	4604      	mov	r4, r0
    1244:	42ac      	cmp	r4, r5
    1246:	d115      	bne.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1248:	482f      	ldr	r0, [pc, #188]	; (1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>)
    124a:	2800      	cmp	r0, #0
    124c:	bf18      	it	ne
    124e:	f3af 8000 	nopne.w
    1252:	f001 fbcf 	bl	29f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1256:	4c28      	ldr	r4, [pc, #160]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1258:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    125c:	2920      	cmp	r1, #32
    125e:	d00d      	beq.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1260:	68e1      	ldr	r1, [r4, #12]
    1262:	1c82      	adds	r2, r0, #2
    1264:	1a51      	subs	r1, r2, r1
    1266:	0209      	lsls	r1, r1, #8
    1268:	17ca      	asrs	r2, r1, #31
    126a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    126e:	1209      	asrs	r1, r1, #8
    1270:	2900      	cmp	r1, #0
    1272:	dd03      	ble.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1274:	b005      	add	sp, #20
    1276:	2000      	movs	r0, #0
    1278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    127c:	2d20      	cmp	r5, #32
    127e:	d00d      	beq.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1280:	462a      	mov	r2, r5
    1282:	9903      	ldr	r1, [sp, #12]
    1284:	f7ff fb1c 	bl	8c0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc0>
    1288:	b358      	cbz	r0, 12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    128a:	9801      	ldr	r0, [sp, #4]
    128c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1290:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1294:	b005      	add	sp, #20
    1296:	2001      	movs	r0, #1
    1298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    129c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    12a0:	b118      	cbz	r0, 12aa <CONFIG_FPROTECT_BLOCK_SIZE+0x2aa>
    12a2:	f002 f8dd 	bl	3460 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    12a6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    12aa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    12ae:	b150      	cbz	r0, 12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    12b0:	4916      	ldr	r1, [pc, #88]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    12b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    12b6:	6008      	str	r0, [r1, #0]
    12b8:	2005      	movs	r0, #5
    12ba:	f001 fdf9 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12be:	f002 f937 	bl	3530 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12c2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12c6:	2004      	movs	r0, #4
    12c8:	f001 fdf2 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12cc:	f001 fe5e 	bl	2f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12d0:	2020      	movs	r0, #32
    12d2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12d6:	480e      	ldr	r0, [pc, #56]	; (1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>)
    12d8:	6880      	ldr	r0, [r0, #8]
    12da:	6007      	str	r7, [r0, #0]
    12dc:	480d      	ldr	r0, [pc, #52]	; (1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>)
    12de:	6007      	str	r7, [r0, #0]
    12e0:	e7d8      	b.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    12e2:	462a      	mov	r2, r5
    12e4:	2120      	movs	r1, #32
    12e6:	2004      	movs	r0, #4
    12e8:	9b04      	ldr	r3, [sp, #16]
    12ea:	f7ff f8b1 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12ee:	b005      	add	sp, #20
    12f0:	2000      	movs	r0, #0
    12f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12f6:	0000      	.short	0x0000
    12f8:	20000db4 	.word	0x20000db4
    12fc:	003fffff 	.word	0x003fffff
    1300:	20000a34 	.word	0x20000a34
    1304:	20000d34 	.word	0x20000d34
    1308:	00000000 	.word	0x00000000
    130c:	4001f508 	.word	0x4001f508
    1310:	20000010 	.word	0x20000010
    1314:	40000508 	.word	0x40000508

00001318 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1318:	4906      	ldr	r1, [pc, #24]	; (1334 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    131a:	b510      	push	{r4, lr}
    131c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1320:	2a20      	cmp	r2, #32
    1322:	bf1c      	itt	ne
    1324:	7788      	strbne	r0, [r1, #30]
    1326:	bd10      	popne	{r4, pc}
    1328:	f240 31ea 	movw	r1, #1002	; 0x3ea
    132c:	2070      	movs	r0, #112	; 0x70
    132e:	f002 fa47 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1332:	0000      	.short	0x0000
    1334:	20000db4 	.word	0x20000db4

00001338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    133c:	4e5b      	ldr	r6, [pc, #364]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    133e:	4681      	mov	r9, r0
    1340:	b085      	sub	sp, #20
    1342:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1346:	468a      	mov	sl, r1
    1348:	2820      	cmp	r0, #32
    134a:	d04d      	beq.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    134c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1350:	f106 040c 	add.w	r4, r6, #12
    1354:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1358:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    135c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1360:	2020      	movs	r0, #32
    1362:	f88d 0000 	strb.w	r0, [sp]
    1366:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    136a:	aa03      	add	r2, sp, #12
    136c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1370:	a901      	add	r1, sp, #4
    1372:	f890 5020 	ldrb.w	r5, [r0, #32]
    1376:	6930      	ldr	r0, [r6, #16]
    1378:	9002      	str	r0, [sp, #8]
    137a:	6830      	ldr	r0, [r6, #0]
    137c:	4448      	add	r0, r9
    137e:	f001 f9db 	bl	2738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1382:	68f8      	ldr	r0, [r7, #12]
    1384:	9901      	ldr	r1, [sp, #4]
    1386:	4a4a      	ldr	r2, [pc, #296]	; (14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>)
    1388:	4408      	add	r0, r1
    138a:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    138e:	4291      	cmp	r1, r2
    1390:	d82f      	bhi.n	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    1392:	68b9      	ldr	r1, [r7, #8]
    1394:	1a41      	subs	r1, r0, r1
    1396:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    139a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    139e:	d228      	bcs.n	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    13a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13a4:	6060      	str	r0, [r4, #4]
    13a6:	4630      	mov	r0, r6
    13a8:	f884 a00c 	strb.w	sl, [r4, #12]
    13ac:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    13b0:	46ea      	mov	sl, sp
    13b2:	2d20      	cmp	r5, #32
    13b4:	bf1c      	itt	ne
    13b6:	493f      	ldrne	r1, [pc, #252]	; (14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>)
    13b8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13bc:	d03c      	beq.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13be:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    13c2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13c6:	6860      	ldr	r0, [r4, #4]
    13c8:	68ba      	ldr	r2, [r7, #8]
    13ca:	4621      	mov	r1, r4
    13cc:	1a10      	subs	r0, r2, r0
    13ce:	0200      	lsls	r0, r0, #8
    13d0:	17c2      	asrs	r2, r0, #31
    13d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13d6:	f107 0608 	add.w	r6, r7, #8
    13da:	1200      	asrs	r0, r0, #8
    13dc:	d41b      	bmi.n	1416 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e>
    13de:	8970      	ldrh	r0, [r6, #10]
    13e0:	b350      	cbz	r0, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13e2:	8948      	ldrh	r0, [r1, #10]
    13e4:	b148      	cbz	r0, 13fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72>
    13e6:	e027      	b.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13e8:	f640 317b 	movw	r1, #2939	; 0xb7b
    13ec:	2070      	movs	r0, #112	; 0x70
    13ee:	f002 f9e7 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13f2:	b005      	add	sp, #20
    13f4:	2001      	movs	r0, #1
    13f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13fa:	4620      	mov	r0, r4
    13fc:	f7ff fe56 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1400:	f001 f97e 	bl	2700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1404:	6831      	ldr	r1, [r6, #0]
    1406:	1a08      	subs	r0, r1, r0
    1408:	0200      	lsls	r0, r0, #8
    140a:	17c1      	asrs	r1, r0, #31
    140c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1410:	1200      	asrs	r0, r0, #8
    1412:	2833      	cmp	r0, #51	; 0x33
    1414:	da10      	bge.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    1416:	f88a 5000 	strb.w	r5, [sl]
    141a:	7d39      	ldrb	r1, [r7, #20]
    141c:	7b20      	ldrb	r0, [r4, #12]
    141e:	4281      	cmp	r1, r0
    1420:	d805      	bhi.n	142e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa6>
    1422:	9802      	ldr	r0, [sp, #8]
    1424:	6060      	str	r0, [r4, #4]
    1426:	b005      	add	sp, #20
    1428:	2002      	movs	r0, #2
    142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    142e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1432:	7845      	ldrb	r5, [r0, #1]
    1434:	2d20      	cmp	r5, #32
    1436:	d1c2      	bne.n	13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
    1438:	2005      	movs	r0, #5
    143a:	f001 fd39 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    143e:	4c1b      	ldr	r4, [pc, #108]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    1440:	f04f 30ff 	mov.w	r0, #4294967295
    1444:	60a0      	str	r0, [r4, #8]
    1446:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    144a:	f89d 2000 	ldrb.w	r2, [sp]
    144e:	2120      	movs	r1, #32
    1450:	2a20      	cmp	r2, #32
    1452:	bf13      	iteet	ne
    1454:	2005      	movne	r0, #5
    1456:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    145a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    145e:	f7fe fff7 	blne	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1462:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1466:	4913      	ldr	r1, [pc, #76]	; (14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>)
    1468:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    146c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1470:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1474:	7048      	strb	r0, [r1, #1]
    1476:	6820      	ldr	r0, [r4, #0]
    1478:	4448      	add	r0, r9
    147a:	6020      	str	r0, [r4, #0]
    147c:	2001      	movs	r0, #1
    147e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1482:	7e60      	ldrb	r0, [r4, #25]
    1484:	2801      	cmp	r0, #1
    1486:	d105      	bne.n	1494 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10c>
    1488:	6920      	ldr	r0, [r4, #16]
    148a:	1e40      	subs	r0, r0, #1
    148c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1490:	f001 fb54 	bl	2b3c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1494:	f89d 0000 	ldrb.w	r0, [sp]
    1498:	2820      	cmp	r0, #32
    149a:	d003      	beq.n	14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    149c:	4806      	ldr	r0, [pc, #24]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    149e:	7840      	ldrb	r0, [r0, #1]
    14a0:	f002 fa5e 	bl	3960 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14a4:	b005      	add	sp, #20
    14a6:	2000      	movs	r0, #0
    14a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ac:	20000db4 	.word	0x20000db4
    14b0:	07a11f9b 	.word	0x07a11f9b
    14b4:	20000d34 	.word	0x20000d34
    14b8:	20000010 	.word	0x20000010

000014bc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    14bc:	b570      	push	{r4, r5, r6, lr}
    14be:	4a23      	ldr	r2, [pc, #140]	; (154c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    14c0:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14c4:	2920      	cmp	r1, #32
    14c6:	d039      	beq.n	153c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    14c8:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14cc:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    14d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    14d4:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    14d8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    14dc:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    14e0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    14e4:	f891 1020 	ldrb.w	r1, [r1, #32]
    14e8:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    14ec:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    14f0:	2920      	cmp	r1, #32
    14f2:	d028      	beq.n	1546 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    14f4:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    14f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    14fc:	7d2d      	ldrb	r5, [r5, #20]
    14fe:	4285      	cmp	r5, r0
    1500:	bf84      	itt	hi
    1502:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1506:	7849      	ldrbhi	r1, [r1, #1]
    1508:	d8f2      	bhi.n	14f0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    150a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    150e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1512:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1516:	6889      	ldr	r1, [r1, #8]
    1518:	6814      	ldr	r4, [r2, #0]
    151a:	1a08      	subs	r0, r1, r0
    151c:	0200      	lsls	r0, r0, #8
    151e:	17c1      	asrs	r1, r0, #31
    1520:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1524:	1200      	asrs	r0, r0, #8
    1526:	d407      	bmi.n	1538 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1528:	f00a fecc 	bl	c2c4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    152c:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1530:	4288      	cmp	r0, r1
    1532:	bf24      	itt	cs
    1534:	1b00      	subcs	r0, r0, r4
    1536:	bd70      	popcs	{r4, r5, r6, pc}
    1538:	2000      	movs	r0, #0
    153a:	bd70      	pop	{r4, r5, r6, pc}
    153c:	f640 314d 	movw	r1, #2893	; 0xb4d
    1540:	2070      	movs	r0, #112	; 0x70
    1542:	f002 f93d 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1546:	f04f 30ff 	mov.w	r0, #4294967295
    154a:	bd70      	pop	{r4, r5, r6, pc}
    154c:	20000db4 	.word	0x20000db4

00001550 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1550:	4806      	ldr	r0, [pc, #24]	; (156c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1552:	b510      	push	{r4, lr}
    1554:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1558:	2920      	cmp	r1, #32
    155a:	bf1c      	itt	ne
    155c:	7e00      	ldrbne	r0, [r0, #24]
    155e:	bd10      	popne	{r4, pc}
    1560:	f640 3174 	movw	r1, #2932	; 0xb74
    1564:	2070      	movs	r0, #112	; 0x70
    1566:	f002 f92b 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    156a:	0000      	.short	0x0000
    156c:	20000db4 	.word	0x20000db4

00001570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1570:	4602      	mov	r2, r0
    1572:	4b14      	ldr	r3, [pc, #80]	; (15c4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1574:	b510      	push	{r4, lr}
    1576:	4408      	add	r0, r1
    1578:	429a      	cmp	r2, r3
    157a:	d904      	bls.n	1586 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    157c:	f240 6109 	movw	r1, #1545	; 0x609
    1580:	2070      	movs	r0, #112	; 0x70
    1582:	f002 f91d 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1586:	4a10      	ldr	r2, [pc, #64]	; (15c8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1588:	4291      	cmp	r1, r2
    158a:	dd04      	ble.n	1596 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    158c:	f240 610a 	movw	r1, #1546	; 0x60a
    1590:	2070      	movs	r0, #112	; 0x70
    1592:	f002 f915 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1596:	4a0d      	ldr	r2, [pc, #52]	; (15cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1598:	4291      	cmp	r1, r2
    159a:	da04      	bge.n	15a6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    159c:	f240 610b 	movw	r1, #1547	; 0x60b
    15a0:	2070      	movs	r0, #112	; 0x70
    15a2:	f002 f90d 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15a6:	490a      	ldr	r1, [pc, #40]	; (15d0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    15a8:	4281      	cmp	r1, r0
    15aa:	bfde      	ittt	le
    15ac:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    15b0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    15b4:	bd10      	pople	{r4, pc}
    15b6:	2800      	cmp	r0, #0
    15b8:	bfbc      	itt	lt
    15ba:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    15be:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    15c2:	bd10      	pop	{r4, pc}
    15c4:	1e847fff 	.word	0x1e847fff
    15c8:	07a12000 	.word	0x07a12000
    15cc:	f85ee000 	.word	0xf85ee000
    15d0:	1e848000 	.word	0x1e848000

000015d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    15d4:	4a10      	ldr	r2, [pc, #64]	; (1618 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    15d6:	1a0b      	subs	r3, r1, r0
    15d8:	f102 0c01 	add.w	ip, r2, #1
    15dc:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    15e0:	bf3c      	itt	cc
    15e2:	4618      	movcc	r0, r3
    15e4:	4770      	bxcc	lr
    15e6:	b510      	push	{r4, lr}
    15e8:	1a44      	subs	r4, r0, r1
    15ea:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    15ee:	bf3c      	itt	cc
    15f0:	4618      	movcc	r0, r3
    15f2:	bd10      	popcc	{r4, pc}
    15f4:	429a      	cmp	r2, r3
    15f6:	d203      	bcs.n	1600 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    15f8:	1a10      	subs	r0, r2, r0
    15fa:	4408      	add	r0, r1
    15fc:	1c40      	adds	r0, r0, #1
    15fe:	bd10      	pop	{r4, pc}
    1600:	42a2      	cmp	r2, r4
    1602:	d204      	bcs.n	160e <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1604:	1a51      	subs	r1, r2, r1
    1606:	4408      	add	r0, r1
    1608:	1c40      	adds	r0, r0, #1
    160a:	4240      	negs	r0, r0
    160c:	bd10      	pop	{r4, pc}
    160e:	f640 310c 	movw	r1, #2828	; 0xb0c
    1612:	2070      	movs	r0, #112	; 0x70
    1614:	f002 f8d4 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1618:	1e847fff 	.word	0x1e847fff

0000161c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    161c:	4907      	ldr	r1, [pc, #28]	; (163c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    161e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1622:	4282      	cmp	r2, r0
    1624:	bf04      	itt	eq
    1626:	6848      	ldreq	r0, [r1, #4]
    1628:	4770      	bxeq	lr
    162a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    162e:	4904      	ldr	r1, [pc, #16]	; (1640 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1630:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1634:	3008      	adds	r0, #8
    1636:	f7ff bd39 	b.w	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    163a:	0000      	.short	0x0000
    163c:	20000db4 	.word	0x20000db4
    1640:	20000a34 	.word	0x20000a34

00001644 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1644:	490e      	ldr	r1, [pc, #56]	; (1680 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1646:	b510      	push	{r4, lr}
    1648:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    164c:	2820      	cmp	r0, #32
    164e:	d012      	beq.n	1676 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1650:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1654:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1658:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    165c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1660:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1664:	6840      	ldr	r0, [r0, #4]
    1666:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    166a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    166e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1672:	2104      	movs	r1, #4
    1674:	4710      	bx	r2
    1676:	f640 01bc 	movw	r1, #2236	; 0x8bc
    167a:	2070      	movs	r0, #112	; 0x70
    167c:	f002 f8a0 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1680:	20000db4 	.word	0x20000db4

00001684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1686:	4d6d      	ldr	r5, [pc, #436]	; (183c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1688:	496d      	ldr	r1, [pc, #436]	; (1840 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    168a:	2601      	movs	r6, #1
    168c:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1690:	2808      	cmp	r0, #8
    1692:	d273      	bcs.n	177c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1694:	e8df f000 	tbb	[pc, r0]
    1698:	af9d6704 	.word	0xaf9d6704
    169c:	b9b444cd 	.word	0xb9b444cd
    16a0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    16a4:	b918      	cbnz	r0, 16ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    16a6:	f001 fef7 	bl	3498 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16aa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    16ae:	8ae0      	ldrh	r0, [r4, #22]
    16b0:	b110      	cbz	r0, 16b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    16b2:	f002 f80d 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16b6:	b188      	cbz	r0, 16dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    16b8:	f7ff fc60 	bl	f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>
    16bc:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    16c0:	68a1      	ldr	r1, [r4, #8]
    16c2:	f1b1 3fff 	cmp.w	r1, #4294967295
    16c6:	d005      	beq.n	16d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    16c8:	2301      	movs	r3, #1
    16ca:	2203      	movs	r2, #3
    16cc:	2005      	movs	r0, #5
    16ce:	f001 fb1b 	bl	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    16d2:	b140      	cbz	r0, 16e6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    16d4:	7e60      	ldrb	r0, [r4, #25]
    16d6:	2801      	cmp	r0, #1
    16d8:	d110      	bne.n	16fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    16da:	e009      	b.n	16f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    16dc:	f44f 6107 	mov.w	r1, #2160	; 0x870
    16e0:	2070      	movs	r0, #112	; 0x70
    16e2:	f002 f86d 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16e6:	f640 0175 	movw	r1, #2165	; 0x875
    16ea:	2070      	movs	r0, #112	; 0x70
    16ec:	f002 f868 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16f0:	6920      	ldr	r0, [r4, #16]
    16f2:	1e40      	subs	r0, r0, #1
    16f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16f8:	f001 fa20 	bl	2b3c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    16fc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1700:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1704:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1708:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    170c:	6840      	ldr	r0, [r0, #4]
    170e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1712:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1716:	b001      	add	sp, #4
    1718:	2101      	movs	r1, #1
    171a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    171e:	4710      	bx	r2
    1720:	f7ff fc2c 	bl	f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>
    1724:	f04f 30ff 	mov.w	r0, #4294967295
    1728:	60a0      	str	r0, [r4, #8]
    172a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    172e:	f88d 0000 	strb.w	r0, [sp]
    1732:	f89d 0000 	ldrb.w	r0, [sp]
    1736:	b188      	cbz	r0, 175c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1738:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    173c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1740:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1744:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1748:	6840      	ldr	r0, [r0, #4]
    174a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    174e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1752:	b001      	add	sp, #4
    1754:	2106      	movs	r1, #6
    1756:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    175a:	4710      	bx	r2
    175c:	f640 0186 	movw	r1, #2182	; 0x886
    1760:	2070      	movs	r0, #112	; 0x70
    1762:	f002 f82d 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1766:	f7ff fc09 	bl	f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>
    176a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    176e:	f001 ffaf 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1772:	b120      	cbz	r0, 177e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1774:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1778:	b130      	cbz	r0, 1788 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    177a:	e009      	b.n	1790 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    177c:	e059      	b.n	1832 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    177e:	f640 0196 	movw	r1, #2198	; 0x896
    1782:	2070      	movs	r0, #112	; 0x70
    1784:	f002 f81c 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1788:	f001 fe86 	bl	3498 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    178c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1790:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1794:	b158      	cbz	r0, 17ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1796:	492b      	ldr	r1, [pc, #172]	; (1844 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1798:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    179c:	6008      	str	r0, [r1, #0]
    179e:	2005      	movs	r0, #5
    17a0:	f001 fb86 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    17a4:	f001 fec4 	bl	3530 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    17a8:	2000      	movs	r0, #0
    17aa:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    17ae:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17b2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17ba:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17be:	6840      	ldr	r0, [r0, #4]
    17c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17c4:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17c8:	b001      	add	sp, #4
    17ca:	2100      	movs	r1, #0
    17cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17d0:	4710      	bx	r2
    17d2:	f001 fc25 	bl	3020 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    17d6:	8ae0      	ldrh	r0, [r4, #22]
    17d8:	b110      	cbz	r0, 17e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    17da:	f001 ff79 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17de:	b128      	cbz	r0, 17ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    17e0:	4819      	ldr	r0, [pc, #100]	; (1848 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    17e2:	7800      	ldrb	r0, [r0, #0]
    17e4:	2803      	cmp	r0, #3
    17e6:	bf08      	it	eq
    17e8:	7766      	strbeq	r6, [r4, #29]
    17ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17ec:	f640 01a1 	movw	r1, #2209	; 0x8a1
    17f0:	2070      	movs	r0, #112	; 0x70
    17f2:	f001 ffe5 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f6:	4815      	ldr	r0, [pc, #84]	; (184c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    17f8:	6006      	str	r6, [r0, #0]
    17fa:	6888      	ldr	r0, [r1, #8]
    17fc:	6006      	str	r6, [r0, #0]
    17fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1800:	7808      	ldrb	r0, [r1, #0]
    1802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1806:	f002 b8ab 	b.w	3960 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    180a:	f7ff fbb7 	bl	f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>
    180e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1812:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1816:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    181a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    181e:	6840      	ldr	r0, [r0, #4]
    1820:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1824:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1828:	b001      	add	sp, #4
    182a:	2105      	movs	r1, #5
    182c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1830:	4710      	bx	r2
    1832:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1836:	2070      	movs	r0, #112	; 0x70
    1838:	f001 ffc2 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    183c:	20000a34 	.word	0x20000a34
    1840:	20000010 	.word	0x20000010
    1844:	4001f508 	.word	0x4001f508
    1848:	20000012 	.word	0x20000012
    184c:	40000508 	.word	0x40000508

00001850 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1850:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1854:	4682      	mov	sl, r0
    1856:	48dc      	ldr	r0, [pc, #880]	; (1bc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    1858:	b08b      	sub	sp, #44	; 0x2c
    185a:	6800      	ldr	r0, [r0, #0]
    185c:	4ddb      	ldr	r5, [pc, #876]	; (1bcc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    185e:	05c0      	lsls	r0, r0, #23
    1860:	0dc0      	lsrs	r0, r0, #23
    1862:	d00e      	beq.n	1882 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1864:	3810      	subs	r0, #16
    1866:	b240      	sxtb	r0, r0
    1868:	2800      	cmp	r0, #0
    186a:	bfb8      	it	lt
    186c:	f000 000f 	andlt.w	r0, r0, #15
    1870:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1874:	bfac      	ite	ge
    1876:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    187a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    187e:	0940      	lsrs	r0, r0, #5
    1880:	d00d      	beq.n	189e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1882:	980c      	ldr	r0, [sp, #48]	; 0x30
    1884:	f04f 0b00 	mov.w	fp, #0
    1888:	7800      	ldrb	r0, [r0, #0]
    188a:	2800      	cmp	r0, #0
    188c:	bf18      	it	ne
    188e:	2801      	cmpne	r0, #1
    1890:	d018      	beq.n	18c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1892:	f240 714f 	movw	r1, #1871	; 0x74f
    1896:	f04f 0070 	mov.w	r0, #112	; 0x70
    189a:	f001 ff91 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    189e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    18a2:	f04f 0b01 	mov.w	fp, #1
    18a6:	2820      	cmp	r0, #32
    18a8:	d007      	beq.n	18ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    18aa:	980c      	ldr	r0, [sp, #48]	; 0x30
    18ac:	7800      	ldrb	r0, [r0, #0]
    18ae:	b148      	cbz	r0, 18c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    18b0:	f240 714b 	movw	r1, #1867	; 0x74b
    18b4:	2070      	movs	r0, #112	; 0x70
    18b6:	f001 ff83 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ba:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    18be:	2070      	movs	r0, #112	; 0x70
    18c0:	f001 ff7e 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18c4:	4cc2      	ldr	r4, [pc, #776]	; (1bd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    18c6:	b124      	cbz	r4, 18d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    18c8:	2100      	movs	r1, #0
    18ca:	f240 7052 	movw	r0, #1874	; 0x752
    18ce:	f3af 8000 	nop.w
    18d2:	49c0      	ldr	r1, [pc, #768]	; (1bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    18d4:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    18d8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    18dc:	f04f 0801 	mov.w	r8, #1
    18e0:	9000      	str	r0, [sp, #0]
    18e2:	b124      	cbz	r4, 18ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    18e4:	2100      	movs	r1, #0
    18e6:	f240 705a 	movw	r0, #1882	; 0x75a
    18ea:	f3af 8000 	nop.w
    18ee:	f1b8 0f00 	cmp.w	r8, #0
    18f2:	d009      	beq.n	1908 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    18f4:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    18f8:	f04f 0900 	mov.w	r9, #0
    18fc:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1900:	f1bb 0f00 	cmp.w	fp, #0
    1904:	d007      	beq.n	1916 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    1906:	e032      	b.n	196e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    1908:	48b3      	ldr	r0, [pc, #716]	; (1bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    190a:	2800      	cmp	r0, #0
    190c:	bf18      	it	ne
    190e:	f3af 8000 	nopne.w
    1912:	b662      	cpsie	i
    1914:	e7ee      	b.n	18f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1916:	4637      	mov	r7, r6
    1918:	2001      	movs	r0, #1
    191a:	ea20 0607 	bic.w	r6, r0, r7
    191e:	48af      	ldr	r0, [pc, #700]	; (1bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1920:	2240      	movs	r2, #64	; 0x40
    1922:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1926:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    192a:	f00a fe39 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    192e:	b124      	cbz	r4, 193a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1930:	2100      	movs	r1, #0
    1932:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1936:	f3af 8000 	nop.w
    193a:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    193e:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1942:	6a09      	ldr	r1, [r1, #32]
    1944:	6201      	str	r1, [r0, #32]
    1946:	b124      	cbz	r4, 1952 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1948:	2100      	movs	r1, #0
    194a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    194e:	f3af 8000 	nop.w
    1952:	b124      	cbz	r4, 195e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    1954:	2100      	movs	r1, #0
    1956:	f240 7064 	movw	r0, #1892	; 0x764
    195a:	f3af 8000 	nop.w
    195e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1962:	f88d 0004 	strb.w	r0, [sp, #4]
    1966:	f89d 0004 	ldrb.w	r0, [sp, #4]
    196a:	2800      	cmp	r0, #0
    196c:	d1b9      	bne.n	18e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    196e:	b124      	cbz	r4, 197a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    1970:	2100      	movs	r1, #0
    1972:	f240 706e 	movw	r0, #1902	; 0x76e
    1976:	f3af 8000 	nop.w
    197a:	f001 f83b 	bl	29f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    197e:	4680      	mov	r8, r0
    1980:	4633      	mov	r3, r6
    1982:	aa06      	add	r2, sp, #24
    1984:	990c      	ldr	r1, [sp, #48]	; 0x30
    1986:	f7ff fa25 	bl	dd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d4>
    198a:	b124      	cbz	r4, 1996 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    198c:	2100      	movs	r1, #0
    198e:	f240 7075 	movw	r0, #1909	; 0x775
    1992:	f3af 8000 	nop.w
    1996:	4991      	ldr	r1, [pc, #580]	; (1bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1998:	a806      	add	r0, sp, #24
    199a:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    199e:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    19a2:	2901      	cmp	r1, #1
    19a4:	bf18      	it	ne
    19a6:	2902      	cmpne	r1, #2
    19a8:	d13c      	bne.n	1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    19aa:	9906      	ldr	r1, [sp, #24]
    19ac:	9b07      	ldr	r3, [sp, #28]
    19ae:	eba1 0108 	sub.w	r1, r1, r8
    19b2:	4a8b      	ldr	r2, [pc, #556]	; (1be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    19b4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19b8:	eba3 0308 	sub.w	r3, r3, r8
    19bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    19c0:	2902      	cmp	r1, #2
    19c2:	d371      	bcc.n	1aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19c4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    19c8:	d26e      	bcs.n	1aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19ca:	429a      	cmp	r2, r3
    19cc:	d36c      	bcc.n	1aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19ce:	f04f 0901 	mov.w	r9, #1
    19d2:	ab01      	add	r3, sp, #4
    19d4:	aa05      	add	r2, sp, #20
    19d6:	4631      	mov	r1, r6
    19d8:	f7fe fef2 	bl	7c0 <__data_size+0x158>
    19dc:	2800      	cmp	r0, #0
    19de:	d06b      	beq.n	1ab8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    19e0:	f89d 1014 	ldrb.w	r1, [sp, #20]
    19e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    19e8:	4633      	mov	r3, r6
    19ea:	428a      	cmp	r2, r1
    19ec:	d068      	beq.n	1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    19ee:	2005      	movs	r0, #5
    19f0:	f7fe fd2e 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    19f4:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    19f8:	7048      	strb	r0, [r1, #1]
    19fa:	f89d 0014 	ldrb.w	r0, [sp, #20]
    19fe:	2820      	cmp	r0, #32
    1a00:	bf03      	ittte	eq
    1a02:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a06:	f880 a020 	strbeq.w	sl, [r0, #32]
    1a0a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1a0e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a12:	bf18      	it	ne
    1a14:	f880 a001 	strbne.w	sl, [r0, #1]
    1a18:	4632      	mov	r2, r6
    1a1a:	4651      	mov	r1, sl
    1a1c:	f05f 0003 	movs.w	r0, #3
    1a20:	f7ff fb7e 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1a24:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a28:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1a2c:	f88d 0004 	strb.w	r0, [sp, #4]
    1a30:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1a34:	b124      	cbz	r4, 1a40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1a36:	2100      	movs	r1, #0
    1a38:	f240 707c 	movw	r0, #1916	; 0x77c
    1a3c:	f3af 8000 	nop.w
    1a40:	4868      	ldr	r0, [pc, #416]	; (1be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1a42:	2800      	cmp	r0, #0
    1a44:	bf18      	it	ne
    1a46:	f3af 8000 	nopne.w
    1a4a:	f3ef 8810 	mrs	r8, PRIMASK
    1a4e:	b672      	cpsid	i
    1a50:	b124      	cbz	r4, 1a5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1a52:	2100      	movs	r1, #0
    1a54:	f240 7082 	movw	r0, #1922	; 0x782
    1a58:	f3af 8000 	nop.w
    1a5c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1a60:	f88d 0004 	strb.w	r0, [sp, #4]
    1a64:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1a68:	2800      	cmp	r0, #0
    1a6a:	f47f af3a 	bne.w	18e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a6e:	b124      	cbz	r4, 1a7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1a70:	2100      	movs	r1, #0
    1a72:	f240 708a 	movw	r0, #1930	; 0x78a
    1a76:	f3af 8000 	nop.w
    1a7a:	f10d 0e18 	add.w	lr, sp, #24
    1a7e:	9800      	ldr	r0, [sp, #0]
    1a80:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1a84:	f100 0008 	add.w	r0, r0, #8
    1a88:	f1b9 0f00 	cmp.w	r9, #0
    1a8c:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1a90:	d044      	beq.n	1b1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1a92:	b124      	cbz	r4, 1a9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1a94:	2100      	movs	r1, #0
    1a96:	f240 7097 	movw	r0, #1943	; 0x797
    1a9a:	f3af 8000 	nop.w
    1a9e:	f1bb 0f00 	cmp.w	fp, #0
    1aa2:	d12c      	bne.n	1afe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1aa4:	e016      	b.n	1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1aa6:	e7ff      	b.n	1aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1aa8:	4632      	mov	r2, r6
    1aaa:	4651      	mov	r1, sl
    1aac:	2004      	movs	r0, #4
    1aae:	f7ff fb37 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1ab2:	f04f 0901 	mov.w	r9, #1
    1ab6:	e7b5      	b.n	1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1ab8:	4632      	mov	r2, r6
    1aba:	4651      	mov	r1, sl
    1abc:	2004      	movs	r0, #4
    1abe:	e7af      	b.n	1a20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1ac0:	2920      	cmp	r1, #32
    1ac2:	bf19      	ittee	ne
    1ac4:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1ac8:	7840      	ldrbne	r0, [r0, #1]
    1aca:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1ace:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1ad2:	e78f      	b.n	19f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1ad4:	b19f      	cbz	r7, 1afe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1ad6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1ada:	2820      	cmp	r0, #32
    1adc:	d10f      	bne.n	1afe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1ade:	b124      	cbz	r4, 1aea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1ae0:	2100      	movs	r1, #0
    1ae2:	f240 709c 	movw	r0, #1948	; 0x79c
    1ae6:	f3af 8000 	nop.w
    1aea:	4631      	mov	r1, r6
    1aec:	2002      	movs	r0, #2
    1aee:	f7ff fb47 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1af2:	b920      	cbnz	r0, 1afe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1af4:	980c      	ldr	r0, [sp, #48]	; 0x30
    1af6:	7800      	ldrb	r0, [r0, #0]
    1af8:	b3f0      	cbz	r0, 1b78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1afa:	2801      	cmp	r0, #1
    1afc:	d04c      	beq.n	1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1afe:	b124      	cbz	r4, 1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1b00:	2100      	movs	r1, #0
    1b02:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1b06:	f3af 8000 	nop.w
    1b0a:	f1bb 0f00 	cmp.w	fp, #0
    1b0e:	bf18      	it	ne
    1b10:	2001      	movne	r0, #1
    1b12:	d04a      	beq.n	1baa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1b14:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b18:	f04f 0901 	mov.w	r9, #1
    1b1c:	b124      	cbz	r4, 1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1b1e:	2100      	movs	r1, #0
    1b20:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1b24:	f3af 8000 	nop.w
    1b28:	f1b8 0f00 	cmp.w	r8, #0
    1b2c:	d045      	beq.n	1bba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1b2e:	b124      	cbz	r4, 1b3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1b30:	2100      	movs	r1, #0
    1b32:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1b36:	f3af 8000 	nop.w
    1b3a:	f1b9 0f00 	cmp.w	r9, #0
    1b3e:	d011      	beq.n	1b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b40:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b44:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b48:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b4c:	2820      	cmp	r0, #32
    1b4e:	d009      	beq.n	1b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b50:	b124      	cbz	r4, 1b5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1b52:	2100      	movs	r1, #0
    1b54:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1b58:	f3af 8000 	nop.w
    1b5c:	4822      	ldr	r0, [pc, #136]	; (1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1b5e:	7840      	ldrb	r0, [r0, #1]
    1b60:	f001 fefe 	bl	3960 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b64:	b124      	cbz	r4, 1b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1b66:	2100      	movs	r1, #0
    1b68:	f240 70da 	movw	r0, #2010	; 0x7da
    1b6c:	f3af 8000 	nop.w
    1b70:	b00d      	add	sp, #52	; 0x34
    1b72:	4648      	mov	r0, r9
    1b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b78:	e7ff      	b.n	1b7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1b7a:	b124      	cbz	r4, 1b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1b7c:	2100      	movs	r1, #0
    1b7e:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1b82:	f3af 8000 	nop.w
    1b86:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1b8a:	4651      	mov	r1, sl
    1b8c:	2004      	movs	r0, #4
    1b8e:	f7ff fac7 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1b92:	f04f 0901 	mov.w	r9, #1
    1b96:	e7c1      	b.n	1b1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1b98:	2c00      	cmp	r4, #0
    1b9a:	f43f aea2 	beq.w	18e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b9e:	2100      	movs	r1, #0
    1ba0:	f240 70af 	movw	r0, #1967	; 0x7af
    1ba4:	f3af 8000 	nop.w
    1ba8:	e69b      	b.n	18e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1baa:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1bae:	2001      	movs	r0, #1
    1bb0:	ea20 0101 	bic.w	r1, r0, r1
    1bb4:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1bb8:	e7ac      	b.n	1b14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1bba:	4807      	ldr	r0, [pc, #28]	; (1bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1bbc:	2800      	cmp	r0, #0
    1bbe:	bf18      	it	ne
    1bc0:	f3af 8000 	nopne.w
    1bc4:	b662      	cpsie	i
    1bc6:	e7b2      	b.n	1b2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1bc8:	e000ed04 	.word	0xe000ed04
    1bcc:	20000db4 	.word	0x20000db4
    1bd0:	00000000 	.word	0x00000000
    1bd4:	20000a34 	.word	0x20000a34
    1bd8:	00000000 	.word	0x00000000
    1bdc:	20000d34 	.word	0x20000d34
    1be0:	003fffff 	.word	0x003fffff
    1be4:	00000000 	.word	0x00000000
    1be8:	20000010 	.word	0x20000010

00001bec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1bec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bf0:	48a5      	ldr	r0, [pc, #660]	; (1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>)
    1bf2:	b08c      	sub	sp, #48	; 0x30
    1bf4:	6800      	ldr	r0, [r0, #0]
    1bf6:	05c0      	lsls	r0, r0, #23
    1bf8:	0dc0      	lsrs	r0, r0, #23
    1bfa:	d011      	beq.n	1c20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1bfc:	3810      	subs	r0, #16
    1bfe:	b240      	sxtb	r0, r0
    1c00:	2800      	cmp	r0, #0
    1c02:	bfb8      	it	lt
    1c04:	f000 000f 	andlt.w	r0, r0, #15
    1c08:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c0c:	bfac      	ite	ge
    1c0e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c12:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1c16:	0940      	lsrs	r0, r0, #5
    1c18:	bf08      	it	eq
    1c1a:	f04f 0901 	moveq.w	r9, #1
    1c1e:	d001      	beq.n	1c24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1c20:	f04f 0900 	mov.w	r9, #0
    1c24:	980c      	ldr	r0, [sp, #48]	; 0x30
    1c26:	7800      	ldrb	r0, [r0, #0]
    1c28:	2800      	cmp	r0, #0
    1c2a:	f04f 0000 	mov.w	r0, #0
    1c2e:	bf1c      	itt	ne
    1c30:	b00d      	addne	sp, #52	; 0x34
    1c32:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c36:	f8df a254 	ldr.w	sl, [pc, #596]	; 1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1c3a:	4d95      	ldr	r5, [pc, #596]	; (1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1c3c:	4c95      	ldr	r4, [pc, #596]	; (1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>)
    1c3e:	f04f 0b00 	mov.w	fp, #0
    1c42:	900b      	str	r0, [sp, #44]	; 0x2c
    1c44:	b125      	cbz	r5, 1c50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1c46:	2100      	movs	r1, #0
    1c48:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1c4c:	f3af 8000 	nop.w
    1c50:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1c54:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1c58:	f04f 0800 	mov.w	r8, #0
    1c5c:	b125      	cbz	r5, 1c68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1c5e:	2100      	movs	r1, #0
    1c60:	f240 605d 	movw	r0, #1629	; 0x65d
    1c64:	f3af 8000 	nop.w
    1c68:	f1b9 0f00 	cmp.w	r9, #0
    1c6c:	d11d      	bne.n	1caa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c6e:	4637      	mov	r7, r6
    1c70:	2001      	movs	r0, #1
    1c72:	ea20 0607 	bic.w	r6, r0, r7
    1c76:	4888      	ldr	r0, [pc, #544]	; (1e98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>)
    1c78:	2240      	movs	r2, #64	; 0x40
    1c7a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1c7e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1c82:	f00a fc8d 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c86:	b125      	cbz	r5, 1c92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1c88:	2100      	movs	r1, #0
    1c8a:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1c8e:	f3af 8000 	nop.w
    1c92:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1c96:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1c9a:	6a09      	ldr	r1, [r1, #32]
    1c9c:	6201      	str	r1, [r0, #32]
    1c9e:	b125      	cbz	r5, 1caa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1ca0:	2100      	movs	r1, #0
    1ca2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1ca6:	f3af 8000 	nop.w
    1caa:	b125      	cbz	r5, 1cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1cac:	2100      	movs	r1, #0
    1cae:	f240 6065 	movw	r0, #1637	; 0x665
    1cb2:	f3af 8000 	nop.w
    1cb6:	f000 fe9d 	bl	29f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1cba:	4607      	mov	r7, r0
    1cbc:	4633      	mov	r3, r6
    1cbe:	466a      	mov	r2, sp
    1cc0:	990c      	ldr	r1, [sp, #48]	; 0x30
    1cc2:	f7ff f887 	bl	dd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d4>
    1cc6:	b125      	cbz	r5, 1cd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1cc8:	2100      	movs	r1, #0
    1cca:	f240 606b 	movw	r0, #1643	; 0x66b
    1cce:	f3af 8000 	nop.w
    1cd2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cd6:	2820      	cmp	r0, #32
    1cd8:	d014      	beq.n	1d04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1cda:	6920      	ldr	r0, [r4, #16]
    1cdc:	9900      	ldr	r1, [sp, #0]
    1cde:	1a09      	subs	r1, r1, r0
    1ce0:	0209      	lsls	r1, r1, #8
    1ce2:	17ca      	asrs	r2, r1, #31
    1ce4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1ce8:	1209      	asrs	r1, r1, #8
    1cea:	d50b      	bpl.n	1d04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1cec:	e9dd 2100 	ldrd	r2, r1, [sp]
    1cf0:	1a89      	subs	r1, r1, r2
    1cf2:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1cf6:	4408      	add	r0, r1
    1cf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cfc:	e9cd 2000 	strd	r2, r0, [sp]
    1d00:	f04f 0801 	mov.w	r8, #1
    1d04:	b14d      	cbz	r5, 1d1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1d06:	2100      	movs	r1, #0
    1d08:	f240 6075 	movw	r0, #1653	; 0x675
    1d0c:	f3af 8000 	nop.w
    1d10:	2100      	movs	r1, #0
    1d12:	f240 607b 	movw	r0, #1659	; 0x67b
    1d16:	f3af 8000 	nop.w
    1d1a:	9800      	ldr	r0, [sp, #0]
    1d1c:	9901      	ldr	r1, [sp, #4]
    1d1e:	1bc0      	subs	r0, r0, r7
    1d20:	1bc9      	subs	r1, r1, r7
    1d22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d2a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d2e:	d205      	bcs.n	1d3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1d30:	458a      	cmp	sl, r1
    1d32:	d303      	bcc.n	1d3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1d34:	f1b9 0f00 	cmp.w	r9, #0
    1d38:	d10c      	bne.n	1d54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>
    1d3a:	e003      	b.n	1d44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    1d3c:	f1b9 0f00 	cmp.w	r9, #0
    1d40:	d038      	beq.n	1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>
    1d42:	e094      	b.n	1e6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x122>
    1d44:	4633      	mov	r3, r6
    1d46:	463a      	mov	r2, r7
    1d48:	4669      	mov	r1, sp
    1d4a:	4854      	ldr	r0, [pc, #336]	; (1e9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>)
    1d4c:	f7fe fbbc 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
    1d50:	ea48 0800 	orr.w	r8, r8, r0
    1d54:	f1b8 0f00 	cmp.w	r8, #0
    1d58:	d022      	beq.n	1da0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>
    1d5a:	9800      	ldr	r0, [sp, #0]
    1d5c:	f00a fab2 	bl	c2c4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d60:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d64:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1d68:	4b4d      	ldr	r3, [pc, #308]	; (1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>)
    1d6a:	4411      	add	r1, r2
    1d6c:	1c49      	adds	r1, r1, #1
    1d6e:	1842      	adds	r2, r0, r1
    1d70:	4298      	cmp	r0, r3
    1d72:	d841      	bhi.n	1df8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xac>
    1d74:	4849      	ldr	r0, [pc, #292]	; (1e9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>)
    1d76:	4281      	cmp	r1, r0
    1d78:	dc5a      	bgt.n	1e30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe4>
    1d7a:	4240      	negs	r0, r0
    1d7c:	4281      	cmp	r1, r0
    1d7e:	db5f      	blt.n	1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>
    1d80:	1c58      	adds	r0, r3, #1
    1d82:	4290      	cmp	r0, r2
    1d84:	bfdc      	itt	le
    1d86:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d8a:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d8e:	dd05      	ble.n	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d90:	2a00      	cmp	r2, #0
    1d92:	bfbc      	itt	lt
    1d94:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1d98:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d9c:	980c      	ldr	r0, [sp, #48]	; 0x30
    1d9e:	60c2      	str	r2, [r0, #12]
    1da0:	2001      	movs	r0, #1
    1da2:	900b      	str	r0, [sp, #44]	; 0x2c
    1da4:	2d00      	cmp	r5, #0
    1da6:	d062      	beq.n	1e6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x122>
    1da8:	2100      	movs	r1, #0
    1daa:	f240 608e 	movw	r0, #1678	; 0x68e
    1dae:	f3af 8000 	nop.w
    1db2:	e05c      	b.n	1e6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x122>
    1db4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1db8:	aa08      	add	r2, sp, #32
    1dba:	a907      	add	r1, sp, #28
    1dbc:	f000 fcbc 	bl	2738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1dc0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1dc4:	2820      	cmp	r0, #32
    1dc6:	d01c      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1dc8:	6920      	ldr	r0, [r4, #16]
    1dca:	1d40      	adds	r0, r0, #5
    1dcc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dd0:	e9dd 2100 	ldrd	r2, r1, [sp]
    1dd4:	1a89      	subs	r1, r1, r2
    1dd6:	4401      	add	r1, r0
    1dd8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1ddc:	e9cd 0100 	strd	r0, r1, [sp]
    1de0:	f00a fa70 	bl	c2c4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1de4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1de8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1dec:	4b2c      	ldr	r3, [pc, #176]	; (1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>)
    1dee:	4411      	add	r1, r2
    1df0:	1c4a      	adds	r2, r1, #1
    1df2:	1881      	adds	r1, r0, r2
    1df4:	4298      	cmp	r0, r3
    1df6:	d918      	bls.n	1e2a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xde>
    1df8:	f240 6109 	movw	r1, #1545	; 0x609
    1dfc:	2070      	movs	r0, #112	; 0x70
    1dfe:	f001 fcdf 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e02:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e06:	f107 0609 	add.w	r6, r7, #9
    1e0a:	b120      	cbz	r0, 1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e0c:	f001 fc60 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e10:	2800      	cmp	r0, #0
    1e12:	bf08      	it	eq
    1e14:	3632      	addeq	r6, #50	; 0x32
    1e16:	4823      	ldr	r0, [pc, #140]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1e18:	7841      	ldrb	r1, [r0, #1]
    1e1a:	9807      	ldr	r0, [sp, #28]
    1e1c:	4281      	cmp	r1, r0
    1e1e:	bf84      	itt	hi
    1e20:	1a08      	subhi	r0, r1, r0
    1e22:	4406      	addhi	r6, r0
    1e24:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e28:	e7d2      	b.n	1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1e2a:	481c      	ldr	r0, [pc, #112]	; (1e9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>)
    1e2c:	4282      	cmp	r2, r0
    1e2e:	dd04      	ble.n	1e3a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xee>
    1e30:	f240 610a 	movw	r1, #1546	; 0x60a
    1e34:	2070      	movs	r0, #112	; 0x70
    1e36:	f001 fcc3 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e3a:	481b      	ldr	r0, [pc, #108]	; (1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>)
    1e3c:	4282      	cmp	r2, r0
    1e3e:	da04      	bge.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e40:	f240 610b 	movw	r1, #1547	; 0x60b
    1e44:	2070      	movs	r0, #112	; 0x70
    1e46:	f001 fcbb 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e4a:	4818      	ldr	r0, [pc, #96]	; (1eac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>)
    1e4c:	4288      	cmp	r0, r1
    1e4e:	bfdc      	itt	le
    1e50:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1e54:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1e58:	dd05      	ble.n	1e66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e5a:	2900      	cmp	r1, #0
    1e5c:	bfbc      	itt	lt
    1e5e:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1e62:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1e66:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e68:	60c1      	str	r1, [r0, #12]
    1e6a:	2001      	movs	r0, #1
    1e6c:	900b      	str	r0, [sp, #44]	; 0x2c
    1e6e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1e72:	f88d 0010 	strb.w	r0, [sp, #16]
    1e76:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1e7a:	2800      	cmp	r0, #0
    1e7c:	f47f aee2 	bne.w	1c44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1e80:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e82:	b00d      	add	sp, #52	; 0x34
    1e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e88:	e000ed04 	.word	0xe000ed04
    1e8c:	003fffff 	.word	0x003fffff
    1e90:	00000000 	.word	0x00000000
    1e94:	20000db4 	.word	0x20000db4
    1e98:	20000d34 	.word	0x20000d34
    1e9c:	07a12000 	.word	0x07a12000
    1ea0:	1e847fff 	.word	0x1e847fff
    1ea4:	20000012 	.word	0x20000012
    1ea8:	f85ee000 	.word	0xf85ee000
    1eac:	1e848000 	.word	0x1e848000

00001eb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1eb0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1eb4:	4d88      	ldr	r5, [pc, #544]	; (20d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1eb6:	b08c      	sub	sp, #48	; 0x30
    1eb8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1ebc:	2000      	movs	r0, #0
    1ebe:	9009      	str	r0, [sp, #36]	; 0x24
    1ec0:	2001      	movs	r0, #1
    1ec2:	4c86      	ldr	r4, [pc, #536]	; (20dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    1ec4:	f04f 0900 	mov.w	r9, #0
    1ec8:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1ecc:	4680      	mov	r8, r0
    1ece:	9008      	str	r0, [sp, #32]
    1ed0:	b124      	cbz	r4, 1edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1ed2:	2100      	movs	r1, #0
    1ed4:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1ed8:	f3af 8000 	nop.w
    1edc:	9808      	ldr	r0, [sp, #32]
    1ede:	2800      	cmp	r0, #0
    1ee0:	d037      	beq.n	1f52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1ee2:	bf00      	nop
    1ee4:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1ee8:	b124      	cbz	r4, 1ef4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1eea:	2100      	movs	r1, #0
    1eec:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1ef0:	f3af 8000 	nop.w
    1ef4:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1ef8:	2240      	movs	r2, #64	; 0x40
    1efa:	ea28 060a 	bic.w	r6, r8, sl
    1efe:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f02:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1f06:	4683      	mov	fp, r0
    1f08:	f00a fb4a 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f0c:	b124      	cbz	r4, 1f18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1f0e:	2100      	movs	r1, #0
    1f10:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1f14:	f3af 8000 	nop.w
    1f18:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f1c:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1f20:	9000      	str	r0, [sp, #0]
    1f22:	6a09      	ldr	r1, [r1, #32]
    1f24:	6201      	str	r1, [r0, #32]
    1f26:	b124      	cbz	r4, 1f32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1f28:	2100      	movs	r1, #0
    1f2a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1f2e:	f3af 8000 	nop.w
    1f32:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f36:	f88d 0008 	strb.w	r0, [sp, #8]
    1f3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f3e:	b178      	cbz	r0, 1f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1f40:	2c00      	cmp	r4, #0
    1f42:	bf1c      	itt	ne
    1f44:	2100      	movne	r1, #0
    1f46:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1f4a:	d0c1      	beq.n	1ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f4c:	f3af 8000 	nop.w
    1f50:	e7be      	b.n	1ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f52:	4863      	ldr	r0, [pc, #396]	; (20e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    1f54:	2800      	cmp	r0, #0
    1f56:	bf18      	it	ne
    1f58:	f3af 8000 	nopne.w
    1f5c:	b662      	cpsie	i
    1f5e:	e7c1      	b.n	1ee4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1f60:	b124      	cbz	r4, 1f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1f62:	2100      	movs	r1, #0
    1f64:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1f68:	f3af 8000 	nop.w
    1f6c:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f6e:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1f72:	2803      	cmp	r0, #3
    1f74:	d172      	bne.n	205c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    1f76:	f8dd a000 	ldr.w	sl, [sp]
    1f7a:	f8cd a018 	str.w	sl, [sp, #24]
    1f7e:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f80:	f89a 0020 	ldrb.w	r0, [sl, #32]
    1f84:	4288      	cmp	r0, r1
    1f86:	bf14      	ite	ne
    1f88:	f04f 0b00 	movne.w	fp, #0
    1f8c:	f04f 0b01 	moveq.w	fp, #1
    1f90:	f10a 0c20 	add.w	ip, sl, #32
    1f94:	4686      	mov	lr, r0
    1f96:	2220      	movs	r2, #32
    1f98:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1f9c:	e003      	b.n	1fa6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1f9e:	4602      	mov	r2, r0
    1fa0:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1fa4:	7840      	ldrb	r0, [r0, #1]
    1fa6:	4288      	cmp	r0, r1
    1fa8:	d002      	beq.n	1fb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    1faa:	2820      	cmp	r0, #32
    1fac:	d00a      	beq.n	1fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1fae:	e7f6      	b.n	1f9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    1fb0:	2820      	cmp	r0, #32
    1fb2:	d007      	beq.n	1fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1fb4:	4586      	cmp	lr, r0
    1fb6:	d107      	bne.n	1fc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    1fb8:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1fbc:	7840      	ldrb	r0, [r0, #1]
    1fbe:	f88c 0000 	strb.w	r0, [ip]
    1fc2:	e007      	b.n	1fd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    1fc4:	4648      	mov	r0, r9
    1fc6:	e00c      	b.n	1fe2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    1fc8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1fcc:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1fd0:	7840      	ldrb	r0, [r0, #1]
    1fd2:	7048      	strb	r0, [r1, #1]
    1fd4:	b124      	cbz	r4, 1fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    1fd6:	2100      	movs	r1, #0
    1fd8:	f240 5037 	movw	r0, #1335	; 0x537
    1fdc:	f3af 8000 	nop.w
    1fe0:	4640      	mov	r0, r8
    1fe2:	ea10 0f0b 	tst.w	r0, fp
    1fe6:	bf18      	it	ne
    1fe8:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    1fec:	2800      	cmp	r0, #0
    1fee:	d052      	beq.n	2096 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    1ff0:	b124      	cbz	r4, 1ffc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    1ff2:	2100      	movs	r1, #0
    1ff4:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1ff8:	f3af 8000 	nop.w
    1ffc:	4632      	mov	r2, r6
    1ffe:	2001      	movs	r0, #1
    2000:	990c      	ldr	r1, [sp, #48]	; 0x30
    2002:	f7ff f88d 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    2006:	9806      	ldr	r0, [sp, #24]
    2008:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    200c:	f88d 0008 	strb.w	r0, [sp, #8]
    2010:	f89d a008 	ldrb.w	sl, [sp, #8]
    2014:	b124      	cbz	r4, 2020 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2016:	2100      	movs	r1, #0
    2018:	f640 0008 	movw	r0, #2056	; 0x808
    201c:	f3af 8000 	nop.w
    2020:	4830      	ldr	r0, [pc, #192]	; (20e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    2022:	2800      	cmp	r0, #0
    2024:	bf18      	it	ne
    2026:	f3af 8000 	nopne.w
    202a:	f3ef 8010 	mrs	r0, PRIMASK
    202e:	b672      	cpsid	i
    2030:	9008      	str	r0, [sp, #32]
    2032:	b124      	cbz	r4, 203e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2034:	2100      	movs	r1, #0
    2036:	f640 000d 	movw	r0, #2061	; 0x80d
    203a:	f3af 8000 	nop.w
    203e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2042:	f88d 0008 	strb.w	r0, [sp, #8]
    2046:	f89d 0008 	ldrb.w	r0, [sp, #8]
    204a:	b140      	cbz	r0, 205e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    204c:	2c00      	cmp	r4, #0
    204e:	bf1c      	itt	ne
    2050:	2100      	movne	r1, #0
    2052:	f640 0011 	movwne	r0, #2065	; 0x811
    2056:	f43f af3b 	beq.w	1ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    205a:	e777      	b.n	1f4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    205c:	e01b      	b.n	2096 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    205e:	f1ba 0f00 	cmp.w	sl, #0
    2062:	d008      	beq.n	2076 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2064:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2068:	2820      	cmp	r0, #32
    206a:	d104      	bne.n	2076 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    206c:	4631      	mov	r1, r6
    206e:	2002      	movs	r0, #2
    2070:	f7ff f886 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    2074:	b308      	cbz	r0, 20ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2076:	b124      	cbz	r4, 2082 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2078:	2100      	movs	r1, #0
    207a:	f640 0025 	movw	r0, #2085	; 0x825
    207e:	f3af 8000 	nop.w
    2082:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2086:	ea28 0000 	bic.w	r0, r8, r0
    208a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    208e:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2092:	2001      	movs	r0, #1
    2094:	9009      	str	r0, [sp, #36]	; 0x24
    2096:	b124      	cbz	r4, 20a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2098:	2100      	movs	r1, #0
    209a:	f640 002e 	movw	r0, #2094	; 0x82e
    209e:	f3af 8000 	nop.w
    20a2:	9808      	ldr	r0, [sp, #32]
    20a4:	b188      	cbz	r0, 20ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    20a6:	b124      	cbz	r4, 20b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    20a8:	2100      	movs	r1, #0
    20aa:	f640 0032 	movw	r0, #2098	; 0x832
    20ae:	f3af 8000 	nop.w
    20b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    20b4:	b00d      	add	sp, #52	; 0x34
    20b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20ba:	2c00      	cmp	r4, #0
    20bc:	d0f1      	beq.n	20a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    20be:	2100      	movs	r1, #0
    20c0:	f44f 6002 	mov.w	r0, #2080	; 0x820
    20c4:	f3af 8000 	nop.w
    20c8:	e7e6      	b.n	2098 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    20ca:	4805      	ldr	r0, [pc, #20]	; (20e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    20cc:	2800      	cmp	r0, #0
    20ce:	bf18      	it	ne
    20d0:	f3af 8000 	nopne.w
    20d4:	b662      	cpsie	i
    20d6:	e7e6      	b.n	20a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    20d8:	20000db4 	.word	0x20000db4
	...

000020e8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    20e8:	b510      	push	{r4, lr}
    20ea:	2820      	cmp	r0, #32
    20ec:	d211      	bcs.n	2112 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    20ee:	490e      	ldr	r1, [pc, #56]	; (2128 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    20f0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    20f4:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    20f8:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    20fc:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2100:	b13b      	cbz	r3, 2112 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2102:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2106:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    210a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    210e:	2a01      	cmp	r2, #1
    2110:	d001      	beq.n	2116 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2112:	2000      	movs	r0, #0
    2114:	bd10      	pop	{r4, pc}
    2116:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    211a:	4601      	mov	r1, r0
    211c:	2000      	movs	r0, #0
    211e:	f7fe ffff 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    2122:	2001      	movs	r0, #1
    2124:	bd10      	pop	{r4, pc}
    2126:	0000      	.short	0x0000
    2128:	20000db4 	.word	0x20000db4

0000212c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    212c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2130:	4e80      	ldr	r6, [pc, #512]	; (2334 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2132:	4680      	mov	r8, r0
    2134:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2138:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    213c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2140:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2144:	2800      	cmp	r0, #0
    2146:	d068      	beq.n	221a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2148:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    214c:	4d7a      	ldr	r5, [pc, #488]	; (2338 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    214e:	b125      	cbz	r5, 215a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2150:	2100      	movs	r1, #0
    2152:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2156:	f3af 8000 	nop.w
    215a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    215e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2162:	2801      	cmp	r0, #1
    2164:	d018      	beq.n	2198 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2166:	b2c0      	uxtb	r0, r0
    2168:	2804      	cmp	r0, #4
    216a:	bf1c      	itt	ne
    216c:	2805      	cmpne	r0, #5
    216e:	2806      	cmpne	r0, #6
    2170:	d058      	beq.n	2224 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2172:	b12d      	cbz	r5, 2180 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2174:	f04f 0100 	mov.w	r1, #0
    2178:	f640 30cd 	movw	r0, #3021	; 0xbcd
    217c:	f3af 8000 	nop.w
    2180:	f001 fc44 	bl	3a0c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2184:	b125      	cbz	r5, 2190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2186:	2100      	movs	r1, #0
    2188:	f640 30d1 	movw	r0, #3025	; 0xbd1
    218c:	f3af 8000 	nop.w
    2190:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2194:	2801      	cmp	r0, #1
    2196:	d1e6      	bne.n	2166 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2198:	2401      	movs	r4, #1
    219a:	b125      	cbz	r5, 21a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    219c:	2100      	movs	r1, #0
    219e:	f640 30d8 	movw	r0, #3032	; 0xbd8
    21a2:	f3af 8000 	nop.w
    21a6:	2c00      	cmp	r4, #0
    21a8:	d042      	beq.n	2230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    21aa:	2000      	movs	r0, #0
    21ac:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    21b0:	b125      	cbz	r5, 21bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    21b2:	2100      	movs	r1, #0
    21b4:	f640 30dd 	movw	r0, #3037	; 0xbdd
    21b8:	f3af 8000 	nop.w
    21bc:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    21c0:	2001      	movs	r0, #1
    21c2:	ea20 090b 	bic.w	r9, r0, fp
    21c6:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21ca:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21ce:	2240      	movs	r2, #64	; 0x40
    21d0:	f00a f9e6 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21d4:	b125      	cbz	r5, 21e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    21d6:	2100      	movs	r1, #0
    21d8:	f240 50cd 	movw	r0, #1485	; 0x5cd
    21dc:	f3af 8000 	nop.w
    21e0:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    21e4:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    21e8:	6a00      	ldr	r0, [r0, #32]
    21ea:	f8ca 0020 	str.w	r0, [sl, #32]
    21ee:	b125      	cbz	r5, 21fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    21f0:	2100      	movs	r1, #0
    21f2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    21f6:	f3af 8000 	nop.w
    21fa:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    21fe:	f88d 0000 	strb.w	r0, [sp]
    2202:	f89d 0000 	ldrb.w	r0, [sp]
    2206:	b1d0      	cbz	r0, 223e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    2208:	2d00      	cmp	r5, #0
    220a:	bf1c      	itt	ne
    220c:	2100      	movne	r1, #0
    220e:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2212:	d0c2      	beq.n	219a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2214:	f3af 8000 	nop.w
    2218:	e7bf      	b.n	219a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    221a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    221e:	2070      	movs	r0, #112	; 0x70
    2220:	f001 face 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2224:	464a      	mov	r2, r9
    2226:	4641      	mov	r1, r8
    2228:	2001      	movs	r0, #1
    222a:	f7fe ff79 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    222e:	e7a9      	b.n	2184 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2230:	4842      	ldr	r0, [pc, #264]	; (233c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2232:	2800      	cmp	r0, #0
    2234:	bf18      	it	ne
    2236:	f3af 8000 	nopne.w
    223a:	b662      	cpsie	i
    223c:	e7b5      	b.n	21aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    223e:	b125      	cbz	r5, 224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2240:	2100      	movs	r1, #0
    2242:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2246:	f3af 8000 	nop.w
    224a:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    224e:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2252:	4614      	mov	r4, r2
    2254:	f04f 0b20 	mov.w	fp, #32
    2258:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    225c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2260:	e003      	b.n	226a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2262:	46a3      	mov	fp, r4
    2264:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2268:	785c      	ldrb	r4, [r3, #1]
    226a:	4544      	cmp	r4, r8
    226c:	d002      	beq.n	2274 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    226e:	2c20      	cmp	r4, #32
    2270:	d02b      	beq.n	22ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2272:	e7f6      	b.n	2262 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2274:	2c20      	cmp	r4, #32
    2276:	d028      	beq.n	22ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2278:	42a2      	cmp	r2, r4
    227a:	d104      	bne.n	2286 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    227c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2280:	7840      	ldrb	r0, [r0, #1]
    2282:	7008      	strb	r0, [r1, #0]
    2284:	e005      	b.n	2292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2286:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    228a:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    228e:	7849      	ldrb	r1, [r1, #1]
    2290:	7041      	strb	r1, [r0, #1]
    2292:	f1ba 0f00 	cmp.w	sl, #0
    2296:	d011      	beq.n	22bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2298:	b125      	cbz	r5, 22a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    229a:	2100      	movs	r1, #0
    229c:	f240 502f 	movw	r0, #1327	; 0x52f
    22a0:	f3af 8000 	nop.w
    22a4:	f89a 0000 	ldrb.w	r0, [sl]
    22a8:	42a0      	cmp	r0, r4
    22aa:	d107      	bne.n	22bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    22ac:	b125      	cbz	r5, 22b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    22ae:	2100      	movs	r1, #0
    22b0:	f240 5032 	movw	r0, #1330	; 0x532
    22b4:	f3af 8000 	nop.w
    22b8:	f88a b000 	strb.w	fp, [sl]
    22bc:	b15d      	cbz	r5, 22d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22be:	2100      	movs	r1, #0
    22c0:	f240 5037 	movw	r0, #1335	; 0x537
    22c4:	f3af 8000 	nop.w
    22c8:	e000      	b.n	22cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    22ca:	b125      	cbz	r5, 22d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22cc:	2100      	movs	r1, #0
    22ce:	f640 30eb 	movw	r0, #3051	; 0xbeb
    22d2:	f3af 8000 	nop.w
    22d6:	481a      	ldr	r0, [pc, #104]	; (2340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    22d8:	2800      	cmp	r0, #0
    22da:	bf18      	it	ne
    22dc:	f3af 8000 	nopne.w
    22e0:	f3ef 8410 	mrs	r4, PRIMASK
    22e4:	b672      	cpsid	i
    22e6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22ea:	f88d 0000 	strb.w	r0, [sp]
    22ee:	f89d 0000 	ldrb.w	r0, [sp]
    22f2:	b138      	cbz	r0, 2304 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    22f4:	2d00      	cmp	r5, #0
    22f6:	bf1c      	itt	ne
    22f8:	2100      	movne	r1, #0
    22fa:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    22fe:	f43f af4c 	beq.w	219a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2302:	e787      	b.n	2214 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2304:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2308:	2001      	movs	r0, #1
    230a:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    230e:	b154      	cbz	r4, 2326 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2310:	2d00      	cmp	r5, #0
    2312:	bf08      	it	eq
    2314:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2318:	2100      	movs	r1, #0
    231a:	f640 30fe 	movw	r0, #3070	; 0xbfe
    231e:	f3af 8000 	nop.w
    2322:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2326:	4805      	ldr	r0, [pc, #20]	; (233c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2328:	2800      	cmp	r0, #0
    232a:	bf18      	it	ne
    232c:	f3af 8000 	nopne.w
    2330:	b662      	cpsie	i
    2332:	e7ed      	b.n	2310 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2334:	20000db4 	.word	0x20000db4
	...

00002344 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2344:	b570      	push	{r4, r5, r6, lr}
    2346:	460d      	mov	r5, r1
    2348:	4606      	mov	r6, r0
    234a:	f001 f9af 	bl	36ac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    234e:	480f      	ldr	r0, [pc, #60]	; (238c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2350:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2354:	2400      	movs	r4, #0
    2356:	3880      	subs	r0, #128	; 0x80
    2358:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    235c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2360:	b129      	cbz	r1, 236e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2362:	1c61      	adds	r1, r4, #1
    2364:	b2cc      	uxtb	r4, r1
    2366:	2c20      	cmp	r4, #32
    2368:	d3f8      	bcc.n	235c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    236a:	2020      	movs	r0, #32
    236c:	bd70      	pop	{r4, r5, r6, pc}
    236e:	4808      	ldr	r0, [pc, #32]	; (2390 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2370:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2374:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2378:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    237c:	4621      	mov	r1, r4
    237e:	6045      	str	r5, [r0, #4]
    2380:	2001      	movs	r0, #1
    2382:	f7fe fecd 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    2386:	4620      	mov	r0, r4
    2388:	bd70      	pop	{r4, r5, r6, pc}
    238a:	0000      	.short	0x0000
    238c:	20000db4 	.word	0x20000db4
    2390:	20000a34 	.word	0x20000a34

00002394 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2398:	b083      	sub	sp, #12
    239a:	f000 fb2b 	bl	29f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    239e:	4605      	mov	r5, r0
    23a0:	f000 fdf4 	bl	2f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23a4:	4c67      	ldr	r4, [pc, #412]	; (2544 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    23a6:	68a0      	ldr	r0, [r4, #8]
    23a8:	f1b0 3fff 	cmp.w	r0, #4294967295
    23ac:	bf1c      	itt	ne
    23ae:	f04f 30ff 	movne.w	r0, #4294967295
    23b2:	60a0      	strne	r0, [r4, #8]
    23b4:	7fa0      	ldrb	r0, [r4, #30]
    23b6:	f8df b190 	ldr.w	fp, [pc, #400]	; 2548 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    23ba:	b9a8      	cbnz	r0, 23e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    23bc:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    23c0:	1a08      	subs	r0, r1, r0
    23c2:	0200      	lsls	r0, r0, #8
    23c4:	17c1      	asrs	r1, r0, #31
    23c6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23ca:	1200      	asrs	r0, r0, #8
    23cc:	f44f 710c 	mov.w	r1, #560	; 0x230
    23d0:	f009 ffa5 	bl	c31e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23d4:	6921      	ldr	r1, [r4, #16]
    23d6:	4408      	add	r0, r1
    23d8:	1a28      	subs	r0, r5, r0
    23da:	0200      	lsls	r0, r0, #8
    23dc:	17c1      	asrs	r1, r0, #31
    23de:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23e2:	1200      	asrs	r0, r0, #8
    23e4:	0fc0      	lsrs	r0, r0, #31
    23e6:	d013      	beq.n	2410 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    23e8:	7e60      	ldrb	r0, [r4, #25]
    23ea:	b328      	cbz	r0, 2438 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    23ec:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    23f0:	f88d 0000 	strb.w	r0, [sp]
    23f4:	f89d 0000 	ldrb.w	r0, [sp]
    23f8:	b1f0      	cbz	r0, 2438 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    23fa:	f000 fc09 	bl	2c10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    23fe:	bf00      	nop
    2400:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2404:	b1f0      	cbz	r0, 2444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2406:	f240 4147 	movw	r1, #1095	; 0x447
    240a:	2070      	movs	r0, #112	; 0x70
    240c:	f001 f9d8 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2410:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2414:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2418:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    241c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2420:	6840      	ldr	r0, [r0, #4]
    2422:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2426:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    242a:	2108      	movs	r1, #8
    242c:	4790      	blx	r2
    242e:	f44f 6186 	mov.w	r1, #1072	; 0x430
    2432:	2070      	movs	r0, #112	; 0x70
    2434:	f001 f9c4 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2438:	1ce8      	adds	r0, r5, #3
    243a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    243e:	f000 fadf 	bl	2a00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2442:	e7dd      	b.n	2400 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2444:	f04f 0a01 	mov.w	sl, #1
    2448:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    244c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2450:	2820      	cmp	r0, #32
    2452:	d024      	beq.n	249e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2454:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2458:	2020      	movs	r0, #32
    245a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    245e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2462:	2600      	movs	r6, #0
    2464:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2468:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    246c:	4837      	ldr	r0, [pc, #220]	; (254c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    246e:	6026      	str	r6, [r4, #0]
    2470:	7800      	ldrb	r0, [r0, #0]
    2472:	2802      	cmp	r0, #2
    2474:	bf16      	itet	ne
    2476:	2803      	cmpne	r0, #3
    2478:	2001      	moveq	r0, #1
    247a:	2000      	movne	r0, #0
    247c:	7720      	strb	r0, [r4, #28]
    247e:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2482:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2486:	f899 0020 	ldrb.w	r0, [r9, #32]
    248a:	2820      	cmp	r0, #32
    248c:	d031      	beq.n	24f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    248e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2492:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2496:	7d81      	ldrb	r1, [r0, #22]
    2498:	2901      	cmp	r1, #1
    249a:	d005      	beq.n	24a8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    249c:	e029      	b.n	24f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    249e:	f240 414a 	movw	r1, #1098	; 0x44a
    24a2:	2070      	movs	r0, #112	; 0x70
    24a4:	f001 f98c 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24a8:	46ab      	mov	fp, r5
    24aa:	f100 0508 	add.w	r5, r0, #8
    24ae:	8a40      	ldrh	r0, [r0, #18]
    24b0:	aa01      	add	r2, sp, #4
    24b2:	4669      	mov	r1, sp
    24b4:	f000 f940 	bl	2738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24b8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24bc:	2820      	cmp	r0, #32
    24be:	d004      	beq.n	24ca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    24c0:	6920      	ldr	r0, [r4, #16]
    24c2:	1d40      	adds	r0, r0, #5
    24c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24c8:	e00b      	b.n	24e2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    24ca:	8968      	ldrh	r0, [r5, #10]
    24cc:	f10b 0b09 	add.w	fp, fp, #9
    24d0:	b128      	cbz	r0, 24de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    24d2:	f001 f8fd 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24d6:	2800      	cmp	r0, #0
    24d8:	bf08      	it	eq
    24da:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    24de:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    24e2:	e9d5 2100 	ldrd	r2, r1, [r5]
    24e6:	1a89      	subs	r1, r1, r2
    24e8:	6028      	str	r0, [r5, #0]
    24ea:	4408      	add	r0, r1
    24ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24f0:	6068      	str	r0, [r5, #4]
    24f2:	4639      	mov	r1, r7
    24f4:	2001      	movs	r0, #1
    24f6:	f7fe fe43 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    24fa:	2800      	cmp	r0, #0
    24fc:	d0f9      	beq.n	24f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    24fe:	4814      	ldr	r0, [pc, #80]	; (2550 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2500:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2504:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2508:	2802      	cmp	r0, #2
    250a:	d104      	bne.n	2516 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    250c:	463a      	mov	r2, r7
    250e:	4641      	mov	r1, r8
    2510:	2006      	movs	r0, #6
    2512:	f7fe fe05 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    2516:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    251a:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    251e:	2820      	cmp	r0, #32
    2520:	d003      	beq.n	252a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    2522:	480c      	ldr	r0, [pc, #48]	; (2554 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2524:	7840      	ldrb	r0, [r0, #1]
    2526:	f001 fa1b 	bl	3960 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    252a:	7f20      	ldrb	r0, [r4, #28]
    252c:	2800      	cmp	r0, #0
    252e:	bf04      	itt	eq
    2530:	b003      	addeq	sp, #12
    2532:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2536:	f000 fd73 	bl	3020 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    253a:	7726      	strb	r6, [r4, #28]
    253c:	7766      	strb	r6, [r4, #29]
    253e:	b003      	add	sp, #12
    2540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2544:	20000db4 	.word	0x20000db4
    2548:	20000a34 	.word	0x20000a34
    254c:	20000012 	.word	0x20000012
    2550:	20000d34 	.word	0x20000d34
    2554:	20000010 	.word	0x20000010

00002558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2558:	b510      	push	{r4, lr}
    255a:	4c32      	ldr	r4, [pc, #200]	; (2624 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    255c:	b082      	sub	sp, #8
    255e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2562:	2920      	cmp	r1, #32
    2564:	d008      	beq.n	2578 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2566:	68a1      	ldr	r1, [r4, #8]
    2568:	f1b1 3fff 	cmp.w	r1, #4294967295
    256c:	d009      	beq.n	2582 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    256e:	f640 21e9 	movw	r1, #2793	; 0xae9
    2572:	2070      	movs	r0, #112	; 0x70
    2574:	f001 f924 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2578:	f640 21e8 	movw	r1, #2792	; 0xae8
    257c:	2070      	movs	r0, #112	; 0x70
    257e:	f001 f91f 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2582:	6862      	ldr	r2, [r4, #4]
    2584:	4601      	mov	r1, r0
    2586:	4b28      	ldr	r3, [pc, #160]	; (2628 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2588:	1850      	adds	r0, r2, r1
    258a:	429a      	cmp	r2, r3
    258c:	d904      	bls.n	2598 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    258e:	f240 6109 	movw	r1, #1545	; 0x609
    2592:	2070      	movs	r0, #112	; 0x70
    2594:	f001 f914 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2598:	4a24      	ldr	r2, [pc, #144]	; (262c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    259a:	4291      	cmp	r1, r2
    259c:	dd04      	ble.n	25a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    259e:	f240 610a 	movw	r1, #1546	; 0x60a
    25a2:	2070      	movs	r0, #112	; 0x70
    25a4:	f001 f90c 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a8:	4a21      	ldr	r2, [pc, #132]	; (2630 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    25aa:	4291      	cmp	r1, r2
    25ac:	da04      	bge.n	25b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    25ae:	f240 610b 	movw	r1, #1547	; 0x60b
    25b2:	2070      	movs	r0, #112	; 0x70
    25b4:	f001 f904 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b8:	491e      	ldr	r1, [pc, #120]	; (2634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    25ba:	4281      	cmp	r1, r0
    25bc:	bfdc      	itt	le
    25be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25c6:	dd05      	ble.n	25d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    25c8:	2800      	cmp	r0, #0
    25ca:	bfbc      	itt	lt
    25cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25d4:	aa01      	add	r2, sp, #4
    25d6:	4669      	mov	r1, sp
    25d8:	f000 f8ae 	bl	2738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25dc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    25e0:	280f      	cmp	r0, #15
    25e2:	bf8c      	ite	hi
    25e4:	2001      	movhi	r0, #1
    25e6:	2000      	movls	r0, #0
    25e8:	9900      	ldr	r1, [sp, #0]
    25ea:	4408      	add	r0, r1
    25ec:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    25f0:	60a1      	str	r1, [r4, #8]
    25f2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    25f6:	f88d 0000 	strb.w	r0, [sp]
    25fa:	f89d 0000 	ldrb.w	r0, [sp]
    25fe:	2800      	cmp	r0, #0
    2600:	bf04      	itt	eq
    2602:	b002      	addeq	sp, #8
    2604:	bd10      	popeq	{r4, pc}
    2606:	2301      	movs	r3, #1
    2608:	2203      	movs	r2, #3
    260a:	2005      	movs	r0, #5
    260c:	f000 fb7c 	bl	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2610:	2800      	cmp	r0, #0
    2612:	bf1c      	itt	ne
    2614:	b002      	addne	sp, #8
    2616:	bd10      	popne	{r4, pc}
    2618:	f640 21f1 	movw	r1, #2801	; 0xaf1
    261c:	2070      	movs	r0, #112	; 0x70
    261e:	f001 f8cf 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2622:	0000      	.short	0x0000
    2624:	20000db4 	.word	0x20000db4
    2628:	1e847fff 	.word	0x1e847fff
    262c:	07a12000 	.word	0x07a12000
    2630:	f85ee000 	.word	0xf85ee000
    2634:	1e848000 	.word	0x1e848000

00002638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2638:	b570      	push	{r4, r5, r6, lr}
    263a:	4c1e      	ldr	r4, [pc, #120]	; (26b4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    263c:	2120      	movs	r1, #32
    263e:	f884 1020 	strb.w	r1, [r4, #32]
    2642:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2646:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    264a:	2000      	movs	r0, #0
    264c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2650:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2654:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2658:	1e42      	subs	r2, r0, #1
    265a:	60a2      	str	r2, [r4, #8]
    265c:	6020      	str	r0, [r4, #0]
    265e:	77a0      	strb	r0, [r4, #30]
    2660:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2664:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2668:	7720      	strb	r0, [r4, #28]
    266a:	7760      	strb	r0, [r4, #29]
    266c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2670:	4911      	ldr	r1, [pc, #68]	; (26b8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2672:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2676:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    267a:	7008      	strb	r0, [r1, #0]
    267c:	7048      	strb	r0, [r1, #1]
    267e:	8048      	strh	r0, [r1, #2]
    2680:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2684:	2210      	movs	r2, #16
    2686:	7088      	strb	r0, [r1, #2]
    2688:	f801 0f04 	strb.w	r0, [r1, #4]!
    268c:	1e52      	subs	r2, r2, #1
    268e:	d1fa      	bne.n	2686 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2690:	4d0a      	ldr	r5, [pc, #40]	; (26bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2692:	2601      	movs	r6, #1
    2694:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2698:	20ff      	movs	r0, #255	; 0xff
    269a:	7028      	strb	r0, [r5, #0]
    269c:	4808      	ldr	r0, [pc, #32]	; (26c0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    269e:	f001 f941 	bl	3924 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    26a2:	7068      	strb	r0, [r5, #1]
    26a4:	f001 f99c 	bl	39e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    26a8:	60a8      	str	r0, [r5, #8]
    26aa:	f000 fce7 	bl	307c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    26ae:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    26b2:	bd70      	pop	{r4, r5, r6, pc}
    26b4:	20000db4 	.word	0x20000db4
    26b8:	20000012 	.word	0x20000012
    26bc:	20000010 	.word	0x20000010
    26c0:	00000fdd 	.word	0x00000fdd

000026c4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    26c4:	b570      	push	{r4, r5, r6, lr}
    26c6:	4605      	mov	r5, r0
    26c8:	2001      	movs	r0, #1
    26ca:	fa00 f405 	lsl.w	r4, r0, r5
    26ce:	460e      	mov	r6, r1
    26d0:	2a00      	cmp	r2, #0
    26d2:	bf08      	it	eq
    26d4:	4808      	ldreq	r0, [pc, #32]	; (26f8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    26d6:	d00c      	beq.n	26f2 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    26d8:	2000      	movs	r0, #0
    26da:	f000 fcb5 	bl	3048 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    26de:	00e9      	lsls	r1, r5, #3
    26e0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    26e4:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    26e8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    26ec:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    26f0:	4802      	ldr	r0, [pc, #8]	; (26fc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    26f2:	6004      	str	r4, [r0, #0]
    26f4:	bd70      	pop	{r4, r5, r6, pc}
    26f6:	0000      	.short	0x0000
    26f8:	4001f508 	.word	0x4001f508
    26fc:	4001f504 	.word	0x4001f504

00002700 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2700:	0b41      	lsrs	r1, r0, #13
    2702:	f248 6237 	movw	r2, #34359	; 0x8637
    2706:	4351      	muls	r1, r2
    2708:	0c0a      	lsrs	r2, r1, #16
    270a:	4b09      	ldr	r3, [pc, #36]	; (2730 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    270c:	0251      	lsls	r1, r2, #9
    270e:	fb02 0203 	mla	r2, r2, r3, r0
    2712:	4808      	ldr	r0, [pc, #32]	; (2734 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2714:	4350      	muls	r0, r2
    2716:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    271a:	306e      	adds	r0, #110	; 0x6e
    271c:	0d40      	lsrs	r0, r0, #21
    271e:	425b      	negs	r3, r3
    2720:	fb10 f303 	smulbb	r3, r0, r3
    2724:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2728:	bf88      	it	hi
    272a:	1c49      	addhi	r1, r1, #1
    272c:	4408      	add	r0, r1
    272e:	4770      	bx	lr
    2730:	ffffc2f7 	.word	0xffffc2f7
    2734:	00010c6f 	.word	0x00010c6f

00002738 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2738:	0b43      	lsrs	r3, r0, #13
    273a:	f248 6c37 	movw	ip, #34359	; 0x8637
    273e:	fb03 f30c 	mul.w	r3, r3, ip
    2742:	b430      	push	{r4, r5}
    2744:	0c1b      	lsrs	r3, r3, #16
    2746:	f8df c044 	ldr.w	ip, [pc, #68]	; 278c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    274a:	025c      	lsls	r4, r3, #9
    274c:	fb03 030c 	mla	r3, r3, ip, r0
    2750:	480f      	ldr	r0, [pc, #60]	; (2790 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2752:	4358      	muls	r0, r3
    2754:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2758:	eb04 000c 	add.w	r0, r4, ip
    275c:	f643 5409 	movw	r4, #15625	; 0x3d09
    2760:	fb1c f404 	smulbb	r4, ip, r4
    2764:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2768:	f643 5508 	movw	r5, #15624	; 0x3d08
    276c:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2770:	442c      	add	r4, r5
    2772:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2776:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    277a:	bf84      	itt	hi
    277c:	f04f 0c00 	movhi.w	ip, #0
    2780:	1c40      	addhi	r0, r0, #1
    2782:	6008      	str	r0, [r1, #0]
    2784:	f882 c000 	strb.w	ip, [r2]
    2788:	bc30      	pop	{r4, r5}
    278a:	4770      	bx	lr
    278c:	ffffc2f7 	.word	0xffffc2f7
    2790:	00010c6f 	.word	0x00010c6f

00002794 <MPSL_IRQ_RTC0_Handler>:
    2794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2798:	4c36      	ldr	r4, [pc, #216]	; (2874 <MPSL_IRQ_RTC0_Handler+0xe0>)
    279a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    279e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    27a2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27a6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27aa:	f04f 0500 	mov.w	r5, #0
    27ae:	d019      	beq.n	27e4 <MPSL_IRQ_RTC0_Handler+0x50>
    27b0:	4831      	ldr	r0, [pc, #196]	; (2878 <MPSL_IRQ_RTC0_Handler+0xe4>)
    27b2:	6800      	ldr	r0, [r0, #0]
    27b4:	b1b0      	cbz	r0, 27e4 <MPSL_IRQ_RTC0_Handler+0x50>
    27b6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    27ba:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27be:	482f      	ldr	r0, [pc, #188]	; (287c <MPSL_IRQ_RTC0_Handler+0xe8>)
    27c0:	6800      	ldr	r0, [r0, #0]
    27c2:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    27c6:	1a40      	subs	r0, r0, r1
    27c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27cc:	2802      	cmp	r0, #2
    27ce:	d302      	bcc.n	27d6 <MPSL_IRQ_RTC0_Handler+0x42>
    27d0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27d4:	d306      	bcc.n	27e4 <MPSL_IRQ_RTC0_Handler+0x50>
    27d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    27da:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27de:	2004      	movs	r0, #4
    27e0:	f7fe ff50 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27e4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27e8:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    27ec:	d019      	beq.n	2822 <MPSL_IRQ_RTC0_Handler+0x8e>
    27ee:	4824      	ldr	r0, [pc, #144]	; (2880 <MPSL_IRQ_RTC0_Handler+0xec>)
    27f0:	6800      	ldr	r0, [r0, #0]
    27f2:	b1b0      	cbz	r0, 2822 <MPSL_IRQ_RTC0_Handler+0x8e>
    27f4:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    27f8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27fc:	4821      	ldr	r0, [pc, #132]	; (2884 <MPSL_IRQ_RTC0_Handler+0xf0>)
    27fe:	6800      	ldr	r0, [r0, #0]
    2800:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2804:	1a40      	subs	r0, r0, r1
    2806:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    280a:	2802      	cmp	r0, #2
    280c:	d302      	bcc.n	2814 <MPSL_IRQ_RTC0_Handler+0x80>
    280e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2812:	d306      	bcc.n	2822 <MPSL_IRQ_RTC0_Handler+0x8e>
    2814:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2818:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    281c:	2005      	movs	r0, #5
    281e:	f7fe ff31 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2822:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2826:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    282a:	bf08      	it	eq
    282c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2830:	4815      	ldr	r0, [pc, #84]	; (2888 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2832:	6800      	ldr	r0, [r0, #0]
    2834:	2800      	cmp	r0, #0
    2836:	bf08      	it	eq
    2838:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    283c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2840:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2844:	4811      	ldr	r0, [pc, #68]	; (288c <MPSL_IRQ_RTC0_Handler+0xf8>)
    2846:	6800      	ldr	r0, [r0, #0]
    2848:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    284c:	1a40      	subs	r0, r0, r1
    284e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2852:	2802      	cmp	r0, #2
    2854:	d304      	bcc.n	2860 <MPSL_IRQ_RTC0_Handler+0xcc>
    2856:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    285a:	bf38      	it	cc
    285c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2860:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2864:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    286c:	2006      	movs	r0, #6
    286e:	f7fe bf09 	b.w	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2872:	0000      	.short	0x0000
    2874:	4000b000 	.word	0x4000b000
    2878:	4000b140 	.word	0x4000b140
    287c:	4000b540 	.word	0x4000b540
    2880:	4000b144 	.word	0x4000b144
    2884:	4000b544 	.word	0x4000b544
    2888:	4000b148 	.word	0x4000b148
    288c:	4000b548 	.word	0x4000b548

00002890 <MPSL_IRQ_TIMER0_Handler>:
    2890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2894:	4d38      	ldr	r5, [pc, #224]	; (2978 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2896:	7828      	ldrb	r0, [r5, #0]
    2898:	2804      	cmp	r0, #4
    289a:	d068      	beq.n	296e <MPSL_IRQ_TIMER0_Handler+0xde>
    289c:	1ce8      	adds	r0, r5, #3
    289e:	2201      	movs	r2, #1
    28a0:	7801      	ldrb	r1, [r0, #0]
    28a2:	b159      	cbz	r1, 28bc <MPSL_IRQ_TIMER0_Handler+0x2c>
    28a4:	2901      	cmp	r1, #1
    28a6:	bf08      	it	eq
    28a8:	706a      	strbeq	r2, [r5, #1]
    28aa:	d002      	beq.n	28b2 <MPSL_IRQ_TIMER0_Handler+0x22>
    28ac:	7869      	ldrb	r1, [r5, #1]
    28ae:	2900      	cmp	r1, #0
    28b0:	d058      	beq.n	2964 <MPSL_IRQ_TIMER0_Handler+0xd4>
    28b2:	2102      	movs	r1, #2
    28b4:	7001      	strb	r1, [r0, #0]
    28b6:	7840      	ldrb	r0, [r0, #1]
    28b8:	f000 fafa 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28bc:	4c2f      	ldr	r4, [pc, #188]	; (297c <MPSL_IRQ_TIMER0_Handler+0xec>)
    28be:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28c2:	f04f 0800 	mov.w	r8, #0
    28c6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    28ca:	f44f 7780 	mov.w	r7, #256	; 0x100
    28ce:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    28d2:	d00a      	beq.n	28ea <MPSL_IRQ_TIMER0_Handler+0x5a>
    28d4:	482a      	ldr	r0, [pc, #168]	; (2980 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    28d6:	6800      	ldr	r0, [r0, #0]
    28d8:	b138      	cbz	r0, 28ea <MPSL_IRQ_TIMER0_Handler+0x5a>
    28da:	2003      	movs	r0, #3
    28dc:	f000 fae8 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28e0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    28e4:	2003      	movs	r0, #3
    28e6:	f7fe fecd 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28ea:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ee:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    28f2:	d00a      	beq.n	290a <MPSL_IRQ_TIMER0_Handler+0x7a>
    28f4:	4823      	ldr	r0, [pc, #140]	; (2984 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    28f6:	6800      	ldr	r0, [r0, #0]
    28f8:	b138      	cbz	r0, 290a <MPSL_IRQ_TIMER0_Handler+0x7a>
    28fa:	2002      	movs	r0, #2
    28fc:	f000 fad8 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2900:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2904:	2002      	movs	r0, #2
    2906:	f7fe febd 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    290a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    290e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2912:	d00a      	beq.n	292a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2914:	481c      	ldr	r0, [pc, #112]	; (2988 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    2916:	6800      	ldr	r0, [r0, #0]
    2918:	b138      	cbz	r0, 292a <MPSL_IRQ_TIMER0_Handler+0x9a>
    291a:	2001      	movs	r0, #1
    291c:	f000 fac8 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2920:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2924:	2001      	movs	r0, #1
    2926:	f7fe fead 	bl	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    292a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    292e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2932:	bf08      	it	eq
    2934:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2938:	4814      	ldr	r0, [pc, #80]	; (298c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    293a:	6800      	ldr	r0, [r0, #0]
    293c:	2800      	cmp	r0, #0
    293e:	bf08      	it	eq
    2940:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2944:	2000      	movs	r0, #0
    2946:	f000 fab3 	bl	2eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    294a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    294e:	2004      	movs	r0, #4
    2950:	7028      	strb	r0, [r5, #0]
    2952:	f8c5 8008 	str.w	r8, [r5, #8]
    2956:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    295a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    295e:	2000      	movs	r0, #0
    2960:	f7fe be90 	b.w	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2964:	f240 316a 	movw	r1, #874	; 0x36a
    2968:	206c      	movs	r0, #108	; 0x6c
    296a:	f000 ff29 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    296e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2972:	2007      	movs	r0, #7
    2974:	f7fe be86 	b.w	1684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2978:	2000001c 	.word	0x2000001c
    297c:	40008000 	.word	0x40008000
    2980:	4000814c 	.word	0x4000814c
    2984:	40008148 	.word	0x40008148
    2988:	40008144 	.word	0x40008144
    298c:	40008140 	.word	0x40008140
    2990:	2201      	movs	r2, #1
    2992:	0211      	lsls	r1, r2, #8
    2994:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2998:	2000      	movs	r0, #0
    299a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    299e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    29a2:	f3bf 8f4f 	dsb	sy
    29a6:	f3bf 8f6f 	isb	sy
    29aa:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    29ae:	490e      	ldr	r1, [pc, #56]	; (29e8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    29b0:	f841 2f04 	str.w	r2, [r1, #4]!
    29b4:	1e43      	subs	r3, r0, #1
    29b6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    29ba:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    29be:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    29c2:	4b0a      	ldr	r3, [pc, #40]	; (29ec <MPSL_IRQ_TIMER0_Handler+0x15c>)
    29c4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29c8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29cc:	1d1b      	adds	r3, r3, #4
    29ce:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29d2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    29d6:	1d1b      	adds	r3, r3, #4
    29d8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    29dc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    29e0:	60ca      	str	r2, [r1, #12]
    29e2:	4903      	ldr	r1, [pc, #12]	; (29f0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    29e4:	7048      	strb	r0, [r1, #1]
    29e6:	4770      	bx	lr
    29e8:	40008000 	.word	0x40008000
    29ec:	40008004 	.word	0x40008004
    29f0:	2000001c 	.word	0x2000001c

000029f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    29f4:	4801      	ldr	r0, [pc, #4]	; (29fc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    29f6:	6800      	ldr	r0, [r0, #0]
    29f8:	4770      	bx	lr
    29fa:	0000      	.short	0x0000
    29fc:	4000b504 	.word	0x4000b504

00002a00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a04:	4e47      	ldr	r6, [pc, #284]	; (2b24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2a06:	4605      	mov	r5, r0
    2a08:	1ef7      	subs	r7, r6, #3
    2a0a:	7832      	ldrb	r2, [r6, #0]
    2a0c:	68f9      	ldr	r1, [r7, #12]
    2a0e:	2a01      	cmp	r2, #1
    2a10:	bf04      	itt	eq
    2a12:	42a9      	cmpeq	r1, r5
    2a14:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a18:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2a1c:	4b42      	ldr	r3, [pc, #264]	; (2b28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2a1e:	6018      	str	r0, [r3, #0]
    2a20:	4842      	ldr	r0, [pc, #264]	; (2b2c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2a22:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a26:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2a2a:	f100 0304 	add.w	r3, r0, #4
    2a2e:	f04f 0400 	mov.w	r4, #0
    2a32:	2a00      	cmp	r2, #0
    2a34:	d061      	beq.n	2afa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2a36:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2a3a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2a3e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2a42:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2a46:	4b3a      	ldr	r3, [pc, #232]	; (2b30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2a48:	681b      	ldr	r3, [r3, #0]
    2a4a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a4e:	f04f 0801 	mov.w	r8, #1
    2a52:	2b00      	cmp	r3, #0
    2a54:	bf04      	itt	eq
    2a56:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    2a5a:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    2a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a62:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2a66:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    2a6a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2a6e:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    2a72:	1aeb      	subs	r3, r5, r3
    2a74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a78:	2b02      	cmp	r3, #2
    2a7a:	d34b      	bcc.n	2b14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2a80:	d248      	bcs.n	2b14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2a82:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    2a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a8a:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    2a8e:	b132      	cbz	r2, 2a9e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    2a90:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2a94:	1a8a      	subs	r2, r1, r2
    2a96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a9a:	2a02      	cmp	r2, #2
    2a9c:	d3f8      	bcc.n	2a90 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    2a9e:	f8c7 8008 	str.w	r8, [r7, #8]
    2aa2:	703c      	strb	r4, [r7, #0]
    2aa4:	f7ff ff74 	bl	2990 <MPSL_IRQ_TIMER0_Handler+0x100>
    2aa8:	4822      	ldr	r0, [pc, #136]	; (2b34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2aaa:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2aae:	f364 0101 	bfi	r1, r4, #0, #2
    2ab2:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2ab6:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2aba:	2102      	movs	r1, #2
    2abc:	f361 0201 	bfi	r2, r1, #0, #2
    2ac0:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2ac4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2ac8:	2104      	movs	r1, #4
    2aca:	f361 0203 	bfi	r2, r1, #0, #4
    2ace:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    2ad2:	f8c0 800c 	str.w	r8, [r0, #12]
    2ad6:	68b9      	ldr	r1, [r7, #8]
    2ad8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2adc:	1580      	asrs	r0, r0, #22
    2ade:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2ae2:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2ae6:	4914      	ldr	r1, [pc, #80]	; (2b38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2ae8:	05c0      	lsls	r0, r0, #23
    2aea:	6008      	str	r0, [r1, #0]
    2aec:	2004      	movs	r0, #4
    2aee:	60fd      	str	r5, [r7, #12]
    2af0:	7070      	strb	r0, [r6, #1]
    2af2:	f886 8000 	strb.w	r8, [r6]
    2af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2afa:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2afe:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2b02:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2b06:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2b0a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2b0e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2b12:	e798      	b.n	2a46 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    2b14:	2100      	movs	r1, #0
    2b16:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2b1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2b1e:	206c      	movs	r0, #108	; 0x6c
    2b20:	f000 fe4e 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b24:	2000001f 	.word	0x2000001f
    2b28:	4001f508 	.word	0x4001f508
    2b2c:	4000b000 	.word	0x4000b000
    2b30:	4000b148 	.word	0x4000b148
    2b34:	40008000 	.word	0x40008000
    2b38:	4001f504 	.word	0x4001f504

00002b3c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b3c:	b570      	push	{r4, r5, r6, lr}
    2b3e:	4c2c      	ldr	r4, [pc, #176]	; (2bf0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b40:	68e2      	ldr	r2, [r4, #12]
    2b42:	4282      	cmp	r2, r0
    2b44:	bf14      	ite	ne
    2b46:	2101      	movne	r1, #1
    2b48:	2100      	moveq	r1, #0
    2b4a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 2bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b4e:	f89c 5000 	ldrb.w	r5, [ip]
    2b52:	2d02      	cmp	r5, #2
    2b54:	d002      	beq.n	2b5c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2b56:	2900      	cmp	r1, #0
    2b58:	d037      	beq.n	2bca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    2b5a:	e002      	b.n	2b62 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2b5c:	2900      	cmp	r1, #0
    2b5e:	bf08      	it	eq
    2b60:	bd70      	popeq	{r4, r5, r6, pc}
    2b62:	7861      	ldrb	r1, [r4, #1]
    2b64:	b381      	cbz	r1, 2bc8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    2b66:	4b24      	ldr	r3, [pc, #144]	; (2bf8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2b6c:	6019      	str	r1, [r3, #0]
    2b6e:	138b      	asrs	r3, r1, #14
    2b70:	4922      	ldr	r1, [pc, #136]	; (2bfc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b72:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2b76:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2b7a:	2300      	movs	r3, #0
    2b7c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    2b80:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2b84:	1ac3      	subs	r3, r0, r3
    2b86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b8a:	2b02      	cmp	r3, #2
    2b8c:	d327      	bcc.n	2bde <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b92:	d224      	bcs.n	2bde <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2b94:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b9c:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2ba0:	b13d      	cbz	r5, 2bb2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    2ba2:	bf00      	nop
    2ba4:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2ba8:	1ad3      	subs	r3, r2, r3
    2baa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2bae:	2b02      	cmp	r3, #2
    2bb0:	d3f8      	bcc.n	2ba4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    2bb2:	4b13      	ldr	r3, [pc, #76]	; (2c00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2bb4:	2102      	movs	r1, #2
    2bb6:	074a      	lsls	r2, r1, #29
    2bb8:	601a      	str	r2, [r3, #0]
    2bba:	60e0      	str	r0, [r4, #12]
    2bbc:	2004      	movs	r0, #4
    2bbe:	f88c 0001 	strb.w	r0, [ip, #1]
    2bc2:	f88c 1000 	strb.w	r1, [ip]
    2bc6:	bd70      	pop	{r4, r5, r6, pc}
    2bc8:	e004      	b.n	2bd4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    2bca:	f240 2102 	movw	r1, #514	; 0x202
    2bce:	206c      	movs	r0, #108	; 0x6c
    2bd0:	f000 fdf6 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bd4:	f240 2106 	movw	r1, #518	; 0x206
    2bd8:	206c      	movs	r0, #108	; 0x6c
    2bda:	f000 fdf1 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bde:	2000      	movs	r0, #0
    2be0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2be4:	f240 2112 	movw	r1, #530	; 0x212
    2be8:	206c      	movs	r0, #108	; 0x6c
    2bea:	f000 fde9 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bee:	0000      	.short	0x0000
    2bf0:	2000001c 	.word	0x2000001c
    2bf4:	2000001f 	.word	0x2000001f
    2bf8:	4001f508 	.word	0x4001f508
    2bfc:	4000b000 	.word	0x4000b000
    2c00:	4001f504 	.word	0x4001f504

00002c04 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2c04:	4801      	ldr	r0, [pc, #4]	; (2c0c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2c06:	68c0      	ldr	r0, [r0, #12]
    2c08:	4770      	bx	lr
    2c0a:	0000      	.short	0x0000
    2c0c:	2000001c 	.word	0x2000001c

00002c10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c14:	4936      	ldr	r1, [pc, #216]	; (2cf0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2c16:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2c1a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2c1e:	4d35      	ldr	r5, [pc, #212]	; (2cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2c20:	1d0b      	adds	r3, r1, #4
    2c22:	2200      	movs	r2, #0
    2c24:	7828      	ldrb	r0, [r5, #0]
    2c26:	b168      	cbz	r0, 2c44 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    2c28:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2c2c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2c30:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2c34:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2c38:	4b2f      	ldr	r3, [pc, #188]	; (2cf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2c3a:	681b      	ldr	r3, [r3, #0]
    2c3c:	f04f 0c01 	mov.w	ip, #1
    2c40:	b99b      	cbnz	r3, 2c6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    2c42:	e00c      	b.n	2c5e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    2c44:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2c48:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2c4c:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    2c50:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    2c54:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2c58:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2c5c:	e7ec      	b.n	2c38 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2c5e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c62:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2c66:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    2c6a:	2802      	cmp	r0, #2
    2c6c:	d004      	beq.n	2c78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    2c6e:	f240 211e 	movw	r1, #542	; 0x21e
    2c72:	206c      	movs	r0, #108	; 0x6c
    2c74:	f000 fda4 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c78:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2c7c:	4c1f      	ldr	r4, [pc, #124]	; (2cfc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c7e:	1cc0      	adds	r0, r0, #3
    2c80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c84:	68e3      	ldr	r3, [r4, #12]
    2c86:	4e1e      	ldr	r6, [pc, #120]	; (2d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2c88:	4298      	cmp	r0, r3
    2c8a:	d00c      	beq.n	2ca6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2c8c:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    2c90:	1bdf      	subs	r7, r3, r7
    2c92:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2c96:	2f04      	cmp	r7, #4
    2c98:	d305      	bcc.n	2ca6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2c9a:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2c9e:	d202      	bcs.n	2ca6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2ca0:	f7ff feae 	bl	2a00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2ca4:	e01f      	b.n	2ce6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2ca6:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2caa:	1a18      	subs	r0, r3, r0
    2cac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cb0:	2802      	cmp	r0, #2
    2cb2:	d315      	bcc.n	2ce0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2cb4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2cb8:	d212      	bcs.n	2ce0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2cba:	4912      	ldr	r1, [pc, #72]	; (2d04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2cbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2cc0:	6008      	str	r0, [r1, #0]
    2cc2:	f8c4 c008 	str.w	ip, [r4, #8]
    2cc6:	7022      	strb	r2, [r4, #0]
    2cc8:	f8c6 c004 	str.w	ip, [r6, #4]
    2ccc:	f8c6 c00c 	str.w	ip, [r6, #12]
    2cd0:	0040      	lsls	r0, r0, #1
    2cd2:	1f09      	subs	r1, r1, #4
    2cd4:	6008      	str	r0, [r1, #0]
    2cd6:	2004      	movs	r0, #4
    2cd8:	7068      	strb	r0, [r5, #1]
    2cda:	f885 c000 	strb.w	ip, [r5]
    2cde:	e002      	b.n	2ce6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2ce0:	f8c4 c008 	str.w	ip, [r4, #8]
    2ce4:	7022      	strb	r2, [r4, #0]
    2ce6:	68a0      	ldr	r0, [r4, #8]
    2ce8:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    2cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cf0:	4000b000 	.word	0x4000b000
    2cf4:	2000001f 	.word	0x2000001f
    2cf8:	4000b148 	.word	0x4000b148
    2cfc:	2000001c 	.word	0x2000001c
    2d00:	40008000 	.word	0x40008000
    2d04:	4001f508 	.word	0x4001f508

00002d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d0c:	f8df c190 	ldr.w	ip, [pc, #400]	; 2ea0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    2d10:	2600      	movs	r6, #0
    2d12:	2701      	movs	r7, #1
    2d14:	f89c 4000 	ldrb.w	r4, [ip]
    2d18:	f89c c001 	ldrb.w	ip, [ip, #1]
    2d1c:	f44f 75a0 	mov.w	r5, #320	; 0x140
    2d20:	2807      	cmp	r0, #7
    2d22:	d27b      	bcs.n	2e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2d24:	e8df f000 	tbb	[pc, r0]
    2d28:	04040404 	.word	0x04040404
    2d2c:	006c6c6c 	.word	0x006c6c6c
    2d30:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2ea4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    2d34:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2d38:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    2d3c:	bf04      	itt	eq
    2d3e:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    2d42:	f1b8 0f00 	cmpeq.w	r8, #0
    2d46:	d002      	beq.n	2d4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d48:	2c02      	cmp	r4, #2
    2d4a:	d005      	beq.n	2d58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    2d4c:	e02c      	b.n	2da8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    2d4e:	f240 2151 	movw	r1, #593	; 0x251
    2d52:	206c      	movs	r0, #108	; 0x6c
    2d54:	f000 fd34 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d58:	f1ac 0804 	sub.w	r8, ip, #4
    2d5c:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2d60:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    2d64:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    2d68:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    2d6c:	2500      	movs	r5, #0
    2d6e:	2c01      	cmp	r4, #1
    2d70:	d002      	beq.n	2d78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    2d72:	2c02      	cmp	r4, #2
    2d74:	d00b      	beq.n	2d8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    2d76:	e014      	b.n	2da2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2d78:	f1bc 0f04 	cmp.w	ip, #4
    2d7c:	bf24      	itt	cs
    2d7e:	f8d8 9000 	ldrcs.w	r9, [r8]
    2d82:	f1b9 0f00 	cmpcs.w	r9, #0
    2d86:	bf08      	it	eq
    2d88:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2d8c:	e009      	b.n	2da2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2d8e:	f1bc 0f04 	cmp.w	ip, #4
    2d92:	bf24      	itt	cs
    2d94:	f8d8 9000 	ldrcs.w	r9, [r8]
    2d98:	f1b9 0f00 	cmpcs.w	r9, #0
    2d9c:	bf08      	it	eq
    2d9e:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    2da2:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    2da6:	d1e1      	bne.n	2d6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    2da8:	4c3f      	ldr	r4, [pc, #252]	; (2ea8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    2daa:	f100 0c10 	add.w	ip, r0, #16
    2dae:	fa07 fc0c 	lsl.w	ip, r7, ip
    2db2:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2db6:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2dba:	b1c2      	cbz	r2, 2dee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    2dbc:	f04f 0840 	mov.w	r8, #64	; 0x40
    2dc0:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    2dc4:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2dc8:	44a0      	add	r8, r4
    2dca:	f8c8 7000 	str.w	r7, [r8]
    2dce:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2dd2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2dd6:	eba1 0000 	sub.w	r0, r1, r0
    2dda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2dde:	4282      	cmp	r2, r0
    2de0:	bf98      	it	ls
    2de2:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    2de6:	bf28      	it	cs
    2de8:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    2dec:	d250      	bcs.n	2e90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2dee:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    2df2:	2b01      	cmp	r3, #1
    2df4:	bf08      	it	eq
    2df6:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2dfa:	2001      	movs	r0, #1
    2dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e00:	b134      	cbz	r4, 2e10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2e02:	4584      	cmp	ip, r0
    2e04:	d104      	bne.n	2e10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2e06:	f44f 711d 	mov.w	r1, #628	; 0x274
    2e0a:	206c      	movs	r0, #108	; 0x6c
    2e0c:	f000 fcd8 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e10:	f1a0 0c04 	sub.w	ip, r0, #4
    2e14:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    2e18:	2b01      	cmp	r3, #1
    2e1a:	e000      	b.n	2e1e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2e1c:	e03b      	b.n	2e96 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    2e1e:	bf0c      	ite	eq
    2e20:	f04f 0801 	moveq.w	r8, #1
    2e24:	f04f 0800 	movne.w	r8, #0
    2e28:	2c03      	cmp	r4, #3
    2e2a:	d304      	bcc.n	2e36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    2e2c:	f240 114d 	movw	r1, #333	; 0x14d
    2e30:	206c      	movs	r0, #108	; 0x6c
    2e32:	f000 fcc5 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e36:	f8df c074 	ldr.w	ip, [pc, #116]	; 2eac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    2e3a:	f104 0310 	add.w	r3, r4, #16
    2e3e:	fa07 f303 	lsl.w	r3, r7, r3
    2e42:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e46:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e4a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2e4e:	f84c 6004 	str.w	r6, [ip, r4]
    2e52:	1f00      	subs	r0, r0, #4
    2e54:	b2c0      	uxtb	r0, r0
    2e56:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2e5a:	b16a      	cbz	r2, 2e78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    2e5c:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    2e60:	1b0c      	subs	r4, r1, r4
    2e62:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2e66:	42a2      	cmp	r2, r4
    2e68:	bf98      	it	ls
    2e6a:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    2e6e:	bf24      	itt	cs
    2e70:	2100      	movcs	r1, #0
    2e72:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2e76:	d20b      	bcs.n	2e90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e78:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e7c:	f1b8 0f00 	cmp.w	r8, #0
    2e80:	bf18      	it	ne
    2e82:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e86:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e8a:	2001      	movs	r0, #1
    2e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e90:	2000      	movs	r0, #0
    2e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e96:	f240 2179 	movw	r1, #633	; 0x279
    2e9a:	206c      	movs	r0, #108	; 0x6c
    2e9c:	f000 fc90 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ea0:	2000001f 	.word	0x2000001f
    2ea4:	2000001c 	.word	0x2000001c
    2ea8:	40008000 	.word	0x40008000
    2eac:	4000b000 	.word	0x4000b000

00002eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2eb4:	2600      	movs	r6, #0
    2eb6:	f44f 77a0 	mov.w	r7, #320	; 0x140
    2eba:	f04f 0801 	mov.w	r8, #1
    2ebe:	2807      	cmp	r0, #7
    2ec0:	d251      	bcs.n	2f66 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    2ec2:	e8df f000 	tbb	[pc, r0]
    2ec6:	0404      	.short	0x0404
    2ec8:	19190404 	.word	0x19190404
    2ecc:	0019      	.short	0x0019
    2ece:	f100 0110 	add.w	r1, r0, #16
    2ed2:	fa08 f201 	lsl.w	r2, r8, r1
    2ed6:	4926      	ldr	r1, [pc, #152]	; (2f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2ed8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2edc:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2ee0:	2200      	movs	r2, #0
    2ee2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2ee6:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    2eea:	508e      	str	r6, [r1, r2]
    2eec:	4921      	ldr	r1, [pc, #132]	; (2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2eee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2ef2:	9000      	str	r0, [sp, #0]
    2ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ef8:	4d1f      	ldr	r5, [pc, #124]	; (2f78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2efa:	1f01      	subs	r1, r0, #4
    2efc:	b2cc      	uxtb	r4, r1
    2efe:	7829      	ldrb	r1, [r5, #0]
    2f00:	b179      	cbz	r1, 2f22 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2f02:	786a      	ldrb	r2, [r5, #1]
    2f04:	4282      	cmp	r2, r0
    2f06:	d10c      	bne.n	2f22 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2f08:	4a1c      	ldr	r2, [pc, #112]	; (2f7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2f0a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2f0e:	6010      	str	r0, [r2, #0]
    2f10:	2901      	cmp	r1, #1
    2f12:	bf08      	it	eq
    2f14:	f7ff fd3c 	bleq	2990 <MPSL_IRQ_TIMER0_Handler+0x100>
    2f18:	702e      	strb	r6, [r5, #0]
    2f1a:	4919      	ldr	r1, [pc, #100]	; (2f80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2f1c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2f20:	60c8      	str	r0, [r1, #12]
    2f22:	f104 0010 	add.w	r0, r4, #16
    2f26:	fa08 f100 	lsl.w	r1, r8, r0
    2f2a:	4816      	ldr	r0, [pc, #88]	; (2f84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2f2c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f30:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f34:	00a1      	lsls	r1, r4, #2
    2f36:	4401      	add	r1, r0
    2f38:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    2f3c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2f40:	1a89      	subs	r1, r1, r2
    2f42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f46:	2902      	cmp	r1, #2
    2f48:	d307      	bcc.n	2f5a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    2f4a:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    2f4e:	2100      	movs	r1, #0
    2f50:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    2f54:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    2f58:	5046      	str	r6, [r0, r1]
    2f5a:	480b      	ldr	r0, [pc, #44]	; (2f88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    2f5c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    2f60:	9000      	str	r0, [sp, #0]
    2f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f66:	f240 21f1 	movw	r1, #753	; 0x2f1
    2f6a:	206c      	movs	r0, #108	; 0x6c
    2f6c:	f000 fc28 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f70:	40008000 	.word	0x40008000
    2f74:	40008140 	.word	0x40008140
    2f78:	2000001f 	.word	0x2000001f
    2f7c:	4001f508 	.word	0x4001f508
    2f80:	2000001c 	.word	0x2000001c
    2f84:	4000b000 	.word	0x4000b000
    2f88:	4000b140 	.word	0x4000b140

00002f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f8c:	4920      	ldr	r1, [pc, #128]	; (3010 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2f8e:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2f92:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2f96:	481f      	ldr	r0, [pc, #124]	; (3014 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2f98:	1d0a      	adds	r2, r1, #4
    2f9a:	7803      	ldrb	r3, [r0, #0]
    2f9c:	2000      	movs	r0, #0
    2f9e:	b15b      	cbz	r3, 2fb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    2fa0:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2fa4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fa8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2fac:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fb0:	4919      	ldr	r1, [pc, #100]	; (3018 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2fb2:	6809      	ldr	r1, [r1, #0]
    2fb4:	b999      	cbnz	r1, 2fde <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    2fb6:	e00c      	b.n	2fd2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    2fb8:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2fbc:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2fc0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2fc4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fc8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2fcc:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fd0:	e7ee      	b.n	2fb0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    2fd2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2fda:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2fde:	490f      	ldr	r1, [pc, #60]	; (301c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2fe0:	f04f 32ff 	mov.w	r2, #4294967295
    2fe4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fe8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2fec:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2ff0:	1d0a      	adds	r2, r1, #4
    2ff2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    2ff6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2ffa:	1d12      	adds	r2, r2, #4
    2ffc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3000:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3004:	1d12      	adds	r2, r2, #4
    3006:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    300a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    300e:	4770      	bx	lr
    3010:	4000b000 	.word	0x4000b000
    3014:	2000001f 	.word	0x2000001f
    3018:	4000b148 	.word	0x4000b148
    301c:	40008000 	.word	0x40008000

00003020 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3020:	4808      	ldr	r0, [pc, #32]	; (3044 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3022:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3026:	2800      	cmp	r0, #0
    3028:	bfb8      	it	lt
    302a:	4770      	bxlt	lr
    302c:	f000 011f 	and.w	r1, r0, #31
    3030:	2201      	movs	r2, #1
    3032:	fa02 f101 	lsl.w	r1, r2, r1
    3036:	0940      	lsrs	r0, r0, #5
    3038:	0080      	lsls	r0, r0, #2
    303a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    303e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3042:	4770      	bx	lr
    3044:	2000001c 	.word	0x2000001c

00003048 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3048:	b510      	push	{r4, lr}
    304a:	2807      	cmp	r0, #7
    304c:	d20d      	bcs.n	306a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    304e:	e8df f000 	tbb	[pc, r0]
    3052:	0404      	.short	0x0404
    3054:	06060404 	.word	0x06060404
    3058:	0006      	.short	0x0006
    305a:	4906      	ldr	r1, [pc, #24]	; (3074 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    305c:	e002      	b.n	3064 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    305e:	1f00      	subs	r0, r0, #4
    3060:	4905      	ldr	r1, [pc, #20]	; (3078 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3062:	b2c0      	uxtb	r0, r0
    3064:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3068:	bd10      	pop	{r4, pc}
    306a:	f240 219d 	movw	r1, #669	; 0x29d
    306e:	206c      	movs	r0, #108	; 0x6c
    3070:	f000 fba6 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3074:	40008140 	.word	0x40008140
    3078:	4000b140 	.word	0x4000b140

0000307c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    307c:	b510      	push	{r4, lr}
    307e:	481c      	ldr	r0, [pc, #112]	; (30f0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3080:	2400      	movs	r4, #0
    3082:	2104      	movs	r1, #4
    3084:	7004      	strb	r4, [r0, #0]
    3086:	1ec0      	subs	r0, r0, #3
    3088:	7001      	strb	r1, [r0, #0]
    308a:	0589      	lsls	r1, r1, #22
    308c:	60c1      	str	r1, [r0, #12]
    308e:	f7ff fc7f 	bl	2990 <MPSL_IRQ_TIMER0_Handler+0x100>
    3092:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3096:	f44f 6200 	mov.w	r2, #2048	; 0x800
    309a:	f04f 0c01 	mov.w	ip, #1
    309e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    30a2:	f3bf 8f4f 	dsb	sy
    30a6:	f3bf 8f6f 	isb	sy
    30aa:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    30ae:	4811      	ldr	r0, [pc, #68]	; (30f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    30b0:	f8c0 c004 	str.w	ip, [r0, #4]
    30b4:	f8c0 c008 	str.w	ip, [r0, #8]
    30b8:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    30bc:	2900      	cmp	r1, #0
    30be:	d1fb      	bne.n	30b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    30c0:	1e49      	subs	r1, r1, #1
    30c2:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    30c6:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    30ca:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    30ce:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    30d2:	4909      	ldr	r1, [pc, #36]	; (30f8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    30d4:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    30d8:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    30dc:	1d09      	adds	r1, r1, #4
    30de:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    30e2:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    30e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    30ea:	f8c0 c000 	str.w	ip, [r0]
    30ee:	bd10      	pop	{r4, pc}
    30f0:	2000001f 	.word	0x2000001f
    30f4:	4000b000 	.word	0x4000b000
    30f8:	4000b004 	.word	0x4000b004

000030fc <MPSL_IRQ_CLOCK_Handler>:
    30fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3100:	4c16      	ldr	r4, [pc, #88]	; (315c <MPSL_IRQ_CLOCK_Handler+0x60>)
    3102:	7a60      	ldrb	r0, [r4, #9]
    3104:	2800      	cmp	r0, #0
    3106:	d027      	beq.n	3158 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3108:	f44f 7180 	mov.w	r1, #256	; 0x100
    310c:	058d      	lsls	r5, r1, #22
    310e:	4628      	mov	r0, r5
    3110:	f009 f929 	bl	c366 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3114:	4680      	mov	r8, r0
    3116:	f44f 7182 	mov.w	r1, #260	; 0x104
    311a:	4628      	mov	r0, r5
    311c:	f009 f923 	bl	c366 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3120:	2600      	movs	r6, #0
    3122:	4607      	mov	r7, r0
    3124:	f1b8 0f00 	cmp.w	r8, #0
    3128:	d009      	beq.n	313e <MPSL_IRQ_CLOCK_Handler+0x42>
    312a:	2001      	movs	r0, #1
    312c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3130:	7920      	ldrb	r0, [r4, #4]
    3132:	b120      	cbz	r0, 313e <MPSL_IRQ_CLOCK_Handler+0x42>
    3134:	7126      	strb	r6, [r4, #4]
    3136:	69e0      	ldr	r0, [r4, #28]
    3138:	b108      	cbz	r0, 313e <MPSL_IRQ_CLOCK_Handler+0x42>
    313a:	4780      	blx	r0
    313c:	61e6      	str	r6, [r4, #28]
    313e:	b137      	cbz	r7, 314e <MPSL_IRQ_CLOCK_Handler+0x52>
    3140:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3144:	2002      	movs	r0, #2
    3146:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    314a:	f000 fa6d 	bl	3628 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    314e:	4640      	mov	r0, r8
    3150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3154:	f000 b85a 	b.w	320c <MPSL_IRQ_CLOCK_Handler+0x110>
    3158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    315c:	2000002c 	.word	0x2000002c
    3160:	b510      	push	{r4, lr}
    3162:	f009 f9aa 	bl	c4ba <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3166:	b930      	cbnz	r0, 3176 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3168:	f009 f9c8 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    316c:	b918      	cbnz	r0, 3176 <MPSL_IRQ_CLOCK_Handler+0x7a>
    316e:	f009 f9fb 	bl	c568 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3172:	2800      	cmp	r0, #0
    3174:	d002      	beq.n	317c <MPSL_IRQ_CLOCK_Handler+0x80>
    3176:	4902      	ldr	r1, [pc, #8]	; (3180 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3178:	2002      	movs	r0, #2
    317a:	6008      	str	r0, [r1, #0]
    317c:	bd10      	pop	{r4, pc}
    317e:	0000      	.short	0x0000
    3180:	40000c34 	.word	0x40000c34
    3184:	b570      	push	{r4, r5, r6, lr}
    3186:	f000 f987 	bl	3498 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    318a:	f000 faa1 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    318e:	4c09      	ldr	r4, [pc, #36]	; (31b4 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3190:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3194:	b130      	cbz	r0, 31a4 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3196:	f7ff ffe3 	bl	3160 <MPSL_IRQ_CLOCK_Handler+0x64>
    319a:	2001      	movs	r0, #1
    319c:	6128      	str	r0, [r5, #16]
    319e:	2004      	movs	r0, #4
    31a0:	72a0      	strb	r0, [r4, #10]
    31a2:	e004      	b.n	31ae <MPSL_IRQ_CLOCK_Handler+0xb2>
    31a4:	2003      	movs	r0, #3
    31a6:	72a0      	strb	r0, [r4, #10]
    31a8:	2001      	movs	r0, #1
    31aa:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31ae:	2000      	movs	r0, #0
    31b0:	71e0      	strb	r0, [r4, #7]
    31b2:	bd70      	pop	{r4, r5, r6, pc}
    31b4:	2000002c 	.word	0x2000002c
    31b8:	b570      	push	{r4, r5, r6, lr}
    31ba:	4c13      	ldr	r4, [pc, #76]	; (3208 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    31bc:	79a0      	ldrb	r0, [r4, #6]
    31be:	b1f0      	cbz	r0, 31fe <MPSL_IRQ_CLOCK_Handler+0x102>
    31c0:	2801      	cmp	r0, #1
    31c2:	d003      	beq.n	31cc <MPSL_IRQ_CLOCK_Handler+0xd0>
    31c4:	79e1      	ldrb	r1, [r4, #7]
    31c6:	1e40      	subs	r0, r0, #1
    31c8:	4281      	cmp	r1, r0
    31ca:	da18      	bge.n	31fe <MPSL_IRQ_CLOCK_Handler+0x102>
    31cc:	f000 fa80 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31d0:	4605      	mov	r5, r0
    31d2:	f000 fb65 	bl	38a0 <mpsl_temperature_get>
    31d6:	79a1      	ldrb	r1, [r4, #6]
    31d8:	2901      	cmp	r1, #1
    31da:	d902      	bls.n	31e2 <MPSL_IRQ_CLOCK_Handler+0xe6>
    31dc:	79e1      	ldrb	r1, [r4, #7]
    31de:	1c49      	adds	r1, r1, #1
    31e0:	71e1      	strb	r1, [r4, #7]
    31e2:	b10d      	cbz	r5, 31e8 <MPSL_IRQ_CLOCK_Handler+0xec>
    31e4:	6961      	ldr	r1, [r4, #20]
    31e6:	e000      	b.n	31ea <MPSL_IRQ_CLOCK_Handler+0xee>
    31e8:	6921      	ldr	r1, [r4, #16]
    31ea:	1a41      	subs	r1, r0, r1
    31ec:	2902      	cmp	r1, #2
    31ee:	da02      	bge.n	31f6 <MPSL_IRQ_CLOCK_Handler+0xfa>
    31f0:	f111 0f02 	cmn.w	r1, #2
    31f4:	dc07      	bgt.n	3206 <MPSL_IRQ_CLOCK_Handler+0x10a>
    31f6:	b10d      	cbz	r5, 31fc <MPSL_IRQ_CLOCK_Handler+0x100>
    31f8:	6160      	str	r0, [r4, #20]
    31fa:	e000      	b.n	31fe <MPSL_IRQ_CLOCK_Handler+0x102>
    31fc:	6120      	str	r0, [r4, #16]
    31fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3202:	f7ff bfbf 	b.w	3184 <MPSL_IRQ_CLOCK_Handler+0x88>
    3206:	bd70      	pop	{r4, r5, r6, pc}
    3208:	2000002c 	.word	0x2000002c
    320c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3210:	4606      	mov	r6, r0
    3212:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3216:	f44f 7186 	mov.w	r1, #268	; 0x10c
    321a:	4628      	mov	r0, r5
    321c:	f009 f8a3 	bl	c366 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3220:	4680      	mov	r8, r0
    3222:	f44f 7188 	mov.w	r1, #272	; 0x110
    3226:	4628      	mov	r0, r5
    3228:	f009 f89d 	bl	c366 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    322c:	4c27      	ldr	r4, [pc, #156]	; (32cc <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    322e:	4682      	mov	sl, r0
    3230:	7827      	ldrb	r7, [r4, #0]
    3232:	f104 0008 	add.w	r0, r4, #8
    3236:	f009 f90a 	bl	c44e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    323a:	b110      	cbz	r0, 3242 <MPSL_IRQ_CLOCK_Handler+0x146>
    323c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3240:	e016      	b.n	3270 <MPSL_IRQ_CLOCK_Handler+0x174>
    3242:	f04f 0901 	mov.w	r9, #1
    3246:	b146      	cbz	r6, 325a <MPSL_IRQ_CLOCK_Handler+0x15e>
    3248:	7aa0      	ldrb	r0, [r4, #10]
    324a:	2803      	cmp	r0, #3
    324c:	d105      	bne.n	325a <MPSL_IRQ_CLOCK_Handler+0x15e>
    324e:	2004      	movs	r0, #4
    3250:	72a0      	strb	r0, [r4, #10]
    3252:	f7ff ff85 	bl	3160 <MPSL_IRQ_CLOCK_Handler+0x64>
    3256:	f8c5 9010 	str.w	r9, [r5, #16]
    325a:	2600      	movs	r6, #0
    325c:	f1b8 0f00 	cmp.w	r8, #0
    3260:	d018      	beq.n	3294 <MPSL_IRQ_CLOCK_Handler+0x198>
    3262:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3266:	7aa0      	ldrb	r0, [r4, #10]
    3268:	2804      	cmp	r0, #4
    326a:	d004      	beq.n	3276 <MPSL_IRQ_CLOCK_Handler+0x17a>
    326c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3270:	206d      	movs	r0, #109	; 0x6d
    3272:	f000 faa5 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3276:	f009 f920 	bl	c4ba <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    327a:	b928      	cbnz	r0, 3288 <MPSL_IRQ_CLOCK_Handler+0x18c>
    327c:	f009 f93e 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3280:	b910      	cbnz	r0, 3288 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3282:	f009 f971 	bl	c568 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3286:	b108      	cbz	r0, 328c <MPSL_IRQ_CLOCK_Handler+0x190>
    3288:	4811      	ldr	r0, [pc, #68]	; (32d0 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    328a:	6006      	str	r6, [r0, #0]
    328c:	2002      	movs	r0, #2
    328e:	72a0      	strb	r0, [r4, #10]
    3290:	f000 f8e6 	bl	3460 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3294:	f1ba 0f00 	cmp.w	sl, #0
    3298:	d008      	beq.n	32ac <MPSL_IRQ_CLOCK_Handler+0x1b0>
    329a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    329e:	7aa0      	ldrb	r0, [r4, #10]
    32a0:	2802      	cmp	r0, #2
    32a2:	d101      	bne.n	32a8 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    32a4:	f7ff ff88 	bl	31b8 <MPSL_IRQ_CLOCK_Handler+0xbc>
    32a8:	f8c5 9014 	str.w	r9, [r5, #20]
    32ac:	b13f      	cbz	r7, 32be <MPSL_IRQ_CLOCK_Handler+0x1c2>
    32ae:	7026      	strb	r6, [r4, #0]
    32b0:	7aa0      	ldrb	r0, [r4, #10]
    32b2:	2802      	cmp	r0, #2
    32b4:	d101      	bne.n	32ba <MPSL_IRQ_CLOCK_Handler+0x1be>
    32b6:	f7ff ff65 	bl	3184 <MPSL_IRQ_CLOCK_Handler+0x88>
    32ba:	f000 f8d1 	bl	3460 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32c2:	4802      	ldr	r0, [pc, #8]	; (32cc <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32c4:	3008      	adds	r0, #8
    32c6:	f009 b8d9 	b.w	c47c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    32ca:	0000      	.short	0x0000
    32cc:	2000002c 	.word	0x2000002c
    32d0:	40000c34 	.word	0x40000c34
    32d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32d8:	4c5c      	ldr	r4, [pc, #368]	; (344c <MPSL_IRQ_CLOCK_Handler+0x350>)
    32da:	f04f 0800 	mov.w	r8, #0
    32de:	4606      	mov	r6, r0
    32e0:	f8c4 8018 	str.w	r8, [r4, #24]
    32e4:	7843      	ldrb	r3, [r0, #1]
    32e6:	7882      	ldrb	r2, [r0, #2]
    32e8:	7800      	ldrb	r0, [r0, #0]
    32ea:	72e0      	strb	r0, [r4, #11]
    32ec:	7163      	strb	r3, [r4, #5]
    32ee:	2701      	movs	r7, #1
    32f0:	71a2      	strb	r2, [r4, #6]
    32f2:	07bd      	lsls	r5, r7, #30
    32f4:	f884 8007 	strb.w	r8, [r4, #7]
    32f8:	2805      	cmp	r0, #5
    32fa:	d224      	bcs.n	3346 <MPSL_IRQ_CLOCK_Handler+0x24a>
    32fc:	e8df f000 	tbb	[pc, r0]
    3300:	1f05030f 	.word	0x1f05030f
    3304:	0021      	.short	0x0021
    3306:	61a7      	str	r7, [r4, #24]
    3308:	e009      	b.n	331e <MPSL_IRQ_CLOCK_Handler+0x222>
    330a:	f000 f8c5 	bl	3498 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    330e:	2101      	movs	r1, #1
    3310:	4628      	mov	r0, r5
    3312:	f009 f82d 	bl	c370 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3316:	2800      	cmp	r0, #0
    3318:	d0f9      	beq.n	330e <MPSL_IRQ_CLOCK_Handler+0x212>
    331a:	2002      	movs	r0, #2
    331c:	61a0      	str	r0, [r4, #24]
    331e:	f009 f853 	bl	c3c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3322:	b1b0      	cbz	r0, 3352 <MPSL_IRQ_CLOCK_Handler+0x256>
    3324:	f000 f9ee 	bl	3704 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3328:	7e21      	ldrb	r1, [r4, #24]
    332a:	f001 0103 	and.w	r1, r1, #3
    332e:	4288      	cmp	r0, r1
    3330:	d10f      	bne.n	3352 <MPSL_IRQ_CLOCK_Handler+0x256>
    3332:	79b0      	ldrb	r0, [r6, #6]
    3334:	b150      	cbz	r0, 334c <MPSL_IRQ_CLOCK_Handler+0x250>
    3336:	2002      	movs	r0, #2
    3338:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    333c:	e06a      	b.n	3414 <MPSL_IRQ_CLOCK_Handler+0x318>
    333e:	4844      	ldr	r0, [pc, #272]	; (3450 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3340:	e7ec      	b.n	331c <MPSL_IRQ_CLOCK_Handler+0x220>
    3342:	4844      	ldr	r0, [pc, #272]	; (3454 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3344:	e7ea      	b.n	331c <MPSL_IRQ_CLOCK_Handler+0x220>
    3346:	f240 312d 	movw	r1, #813	; 0x32d
    334a:	e049      	b.n	33e0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    334c:	f000 f9ae 	bl	36ac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3350:	e060      	b.n	3414 <MPSL_IRQ_CLOCK_Handler+0x318>
    3352:	60ef      	str	r7, [r5, #12]
    3354:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3358:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    335c:	69a0      	ldr	r0, [r4, #24]
    335e:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3362:	f009 f896 	bl	c492 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3366:	b940      	cbnz	r0, 337a <MPSL_IRQ_CLOCK_Handler+0x27e>
    3368:	f009 f89d 	bl	c4a6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    336c:	b928      	cbnz	r0, 337a <MPSL_IRQ_CLOCK_Handler+0x27e>
    336e:	f009 f8b1 	bl	c4d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3372:	b910      	cbnz	r0, 337a <MPSL_IRQ_CLOCK_Handler+0x27e>
    3374:	f009 f8c2 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3378:	b138      	cbz	r0, 338a <MPSL_IRQ_CLOCK_Handler+0x28e>
    337a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    337e:	4836      	ldr	r0, [pc, #216]	; (3458 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3380:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3384:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3388:	6001      	str	r1, [r0, #0]
    338a:	f009 f882 	bl	c492 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    338e:	b940      	cbnz	r0, 33a2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3390:	f009 f889 	bl	c4a6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3394:	b928      	cbnz	r0, 33a2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3396:	f009 f89d 	bl	c4d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    339a:	b910      	cbnz	r0, 33a2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    339c:	f009 f8ae 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33a0:	b110      	cbz	r0, 33a8 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    33a2:	482d      	ldr	r0, [pc, #180]	; (3458 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    33a4:	3010      	adds	r0, #16
    33a6:	6007      	str	r7, [r0, #0]
    33a8:	60af      	str	r7, [r5, #8]
    33aa:	2002      	movs	r0, #2
    33ac:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33b0:	79b0      	ldrb	r0, [r6, #6]
    33b2:	bb78      	cbnz	r0, 3414 <MPSL_IRQ_CLOCK_Handler+0x318>
    33b4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    33b8:	f010 0f02 	tst.w	r0, #2
    33bc:	d00e      	beq.n	33dc <MPSL_IRQ_CLOCK_Handler+0x2e0>
    33be:	f8df 909c 	ldr.w	r9, [pc, #156]	; 345c <MPSL_IRQ_CLOCK_Handler+0x360>
    33c2:	f8d9 1000 	ldr.w	r1, [r9]
    33c6:	43c9      	mvns	r1, r1
    33c8:	f341 1700 	sbfx	r7, r1, #4, #1
    33cc:	f8d9 1000 	ldr.w	r1, [r9]
    33d0:	f041 0110 	orr.w	r1, r1, #16
    33d4:	f8c9 1000 	str.w	r1, [r9]
    33d8:	1c7f      	adds	r7, r7, #1
    33da:	e007      	b.n	33ec <MPSL_IRQ_CLOCK_Handler+0x2f0>
    33dc:	f240 21ee 	movw	r1, #750	; 0x2ee
    33e0:	206d      	movs	r0, #109	; 0x6d
    33e2:	f000 f9ed 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33e6:	bf00      	nop
    33e8:	f000 fb10 	bl	3a0c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    33ec:	4651      	mov	r1, sl
    33ee:	4628      	mov	r0, r5
    33f0:	f008 ffb9 	bl	c366 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    33f4:	2800      	cmp	r0, #0
    33f6:	d0f7      	beq.n	33e8 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    33f8:	f000 f958 	bl	36ac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    33fc:	b92f      	cbnz	r7, 340a <MPSL_IRQ_CLOCK_Handler+0x30e>
    33fe:	f8d9 1000 	ldr.w	r1, [r9]
    3402:	f021 0110 	bic.w	r1, r1, #16
    3406:	f8c9 1000 	str.w	r1, [r9]
    340a:	2002      	movs	r0, #2
    340c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3410:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3414:	79a0      	ldrb	r0, [r4, #6]
    3416:	b170      	cbz	r0, 3436 <MPSL_IRQ_CLOCK_Handler+0x33a>
    3418:	7830      	ldrb	r0, [r6, #0]
    341a:	b960      	cbnz	r0, 3436 <MPSL_IRQ_CLOCK_Handler+0x33a>
    341c:	f000 f958 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3420:	4606      	mov	r6, r0
    3422:	f000 fa3d 	bl	38a0 <mpsl_temperature_get>
    3426:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    342a:	b116      	cbz	r6, 3432 <MPSL_IRQ_CLOCK_Handler+0x336>
    342c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3430:	e001      	b.n	3436 <MPSL_IRQ_CLOCK_Handler+0x33a>
    3432:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3436:	2101      	movs	r1, #1
    3438:	4628      	mov	r0, r5
    343a:	f008 ff99 	bl	c370 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    343e:	b108      	cbz	r0, 3444 <MPSL_IRQ_CLOCK_Handler+0x348>
    3440:	f000 f940 	bl	36c4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3444:	f884 800a 	strb.w	r8, [r4, #10]
    3448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    344c:	2000002c 	.word	0x2000002c
    3450:	00020001 	.word	0x00020001
    3454:	00030001 	.word	0x00030001
    3458:	4000053c 	.word	0x4000053c
    345c:	e000ed10 	.word	0xe000ed10

00003460 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3460:	b510      	push	{r4, lr}
    3462:	f3ef 8410 	mrs	r4, PRIMASK
    3466:	b672      	cpsid	i
    3468:	480a      	ldr	r0, [pc, #40]	; (3494 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    346a:	7841      	ldrb	r1, [r0, #1]
    346c:	b129      	cbz	r1, 347a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    346e:	7841      	ldrb	r1, [r0, #1]
    3470:	1e49      	subs	r1, r1, #1
    3472:	7041      	strb	r1, [r0, #1]
    3474:	7841      	ldrb	r1, [r0, #1]
    3476:	b129      	cbz	r1, 3484 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3478:	e008      	b.n	348c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    347a:	f240 110d 	movw	r1, #269	; 0x10d
    347e:	206d      	movs	r0, #109	; 0x6d
    3480:	f000 f99e 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3484:	7880      	ldrb	r0, [r0, #2]
    3486:	b908      	cbnz	r0, 348c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3488:	f000 f930 	bl	36ec <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    348c:	2c00      	cmp	r4, #0
    348e:	d100      	bne.n	3492 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3490:	b662      	cpsie	i
    3492:	bd10      	pop	{r4, pc}
    3494:	2000002c 	.word	0x2000002c

00003498 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3498:	b510      	push	{r4, lr}
    349a:	f3ef 8410 	mrs	r4, PRIMASK
    349e:	b672      	cpsid	i
    34a0:	4806      	ldr	r0, [pc, #24]	; (34bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    34a2:	7841      	ldrb	r1, [r0, #1]
    34a4:	1c49      	adds	r1, r1, #1
    34a6:	7041      	strb	r1, [r0, #1]
    34a8:	7840      	ldrb	r0, [r0, #1]
    34aa:	2801      	cmp	r0, #1
    34ac:	d101      	bne.n	34b2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    34ae:	f008 ff76 	bl	c39e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    34b2:	2c00      	cmp	r4, #0
    34b4:	d100      	bne.n	34b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    34b6:	b662      	cpsie	i
    34b8:	bd10      	pop	{r4, pc}
    34ba:	0000      	.short	0x0000
    34bc:	2000002c 	.word	0x2000002c

000034c0 <mpsl_clock_hfclk_release>:
    34c0:	4805      	ldr	r0, [pc, #20]	; (34d8 <mpsl_clock_hfclk_release+0x18>)
    34c2:	b510      	push	{r4, lr}
    34c4:	78c1      	ldrb	r1, [r0, #3]
    34c6:	b121      	cbz	r1, 34d2 <mpsl_clock_hfclk_release+0x12>
    34c8:	2100      	movs	r1, #0
    34ca:	7101      	strb	r1, [r0, #4]
    34cc:	70c1      	strb	r1, [r0, #3]
    34ce:	f7ff ffc7 	bl	3460 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    34d2:	2000      	movs	r0, #0
    34d4:	bd10      	pop	{r4, pc}
    34d6:	0000      	.short	0x0000
    34d8:	2000002c 	.word	0x2000002c

000034dc <mpsl_clock_hfclk_request>:
    34dc:	b570      	push	{r4, r5, r6, lr}
    34de:	4c0c      	ldr	r4, [pc, #48]	; (3510 <mpsl_clock_hfclk_request+0x34>)
    34e0:	78e1      	ldrb	r1, [r4, #3]
    34e2:	b961      	cbnz	r1, 34fe <mpsl_clock_hfclk_request+0x22>
    34e4:	2501      	movs	r5, #1
    34e6:	70e5      	strb	r5, [r4, #3]
    34e8:	61e0      	str	r0, [r4, #28]
    34ea:	f7ff ffd5 	bl	3498 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34ee:	f000 f8ef 	bl	36d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34f2:	b130      	cbz	r0, 3502 <mpsl_clock_hfclk_request+0x26>
    34f4:	69e0      	ldr	r0, [r4, #28]
    34f6:	b110      	cbz	r0, 34fe <mpsl_clock_hfclk_request+0x22>
    34f8:	4780      	blx	r0
    34fa:	2000      	movs	r0, #0
    34fc:	61e0      	str	r0, [r4, #28]
    34fe:	2000      	movs	r0, #0
    3500:	bd70      	pop	{r4, r5, r6, pc}
    3502:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3506:	7125      	strb	r5, [r4, #4]
    3508:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    350c:	e7f7      	b.n	34fe <mpsl_clock_hfclk_request+0x22>
    350e:	0000      	.short	0x0000
    3510:	2000002c 	.word	0x2000002c

00003514 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3514:	f3ef 8010 	mrs	r0, PRIMASK
    3518:	b672      	cpsid	i
    351a:	4904      	ldr	r1, [pc, #16]	; (352c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    351c:	788a      	ldrb	r2, [r1, #2]
    351e:	1c52      	adds	r2, r2, #1
    3520:	708a      	strb	r2, [r1, #2]
    3522:	2800      	cmp	r0, #0
    3524:	d100      	bne.n	3528 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3526:	b662      	cpsie	i
    3528:	4770      	bx	lr
    352a:	0000      	.short	0x0000
    352c:	2000002c 	.word	0x2000002c

00003530 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3530:	b510      	push	{r4, lr}
    3532:	f3ef 8410 	mrs	r4, PRIMASK
    3536:	b672      	cpsid	i
    3538:	480a      	ldr	r0, [pc, #40]	; (3564 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    353a:	7881      	ldrb	r1, [r0, #2]
    353c:	b129      	cbz	r1, 354a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    353e:	7881      	ldrb	r1, [r0, #2]
    3540:	1e49      	subs	r1, r1, #1
    3542:	7081      	strb	r1, [r0, #2]
    3544:	7841      	ldrb	r1, [r0, #1]
    3546:	b129      	cbz	r1, 3554 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3548:	e008      	b.n	355c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    354a:	f240 1125 	movw	r1, #293	; 0x125
    354e:	206d      	movs	r0, #109	; 0x6d
    3550:	f000 f936 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3554:	7880      	ldrb	r0, [r0, #2]
    3556:	b908      	cbnz	r0, 355c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3558:	f000 f8c8 	bl	36ec <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    355c:	2c00      	cmp	r4, #0
    355e:	d100      	bne.n	3562 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3560:	b662      	cpsie	i
    3562:	bd10      	pop	{r4, pc}
    3564:	2000002c 	.word	0x2000002c

00003568 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    356c:	0004      	movs	r4, r0
    356e:	f06f 0015 	mvn.w	r0, #21
    3572:	d03c      	beq.n	35ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3574:	7821      	ldrb	r1, [r4, #0]
    3576:	2904      	cmp	r1, #4
    3578:	d839      	bhi.n	35ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    357a:	2900      	cmp	r1, #0
    357c:	7861      	ldrb	r1, [r4, #1]
    357e:	d038      	beq.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3580:	2900      	cmp	r1, #0
    3582:	d134      	bne.n	35ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3584:	78a1      	ldrb	r1, [r4, #2]
    3586:	2900      	cmp	r1, #0
    3588:	d131      	bne.n	35ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    358a:	2000      	movs	r0, #0
    358c:	f008 feb6 	bl	c2fc <MPSL_IRQ_RADIO_Handler+0x1e>
    3590:	2000      	movs	r0, #0
    3592:	f008 fea6 	bl	c2e2 <MPSL_IRQ_RADIO_Handler+0x4>
    3596:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    359a:	f04f 31ff 	mov.w	r1, #4294967295
    359e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    35a2:	2600      	movs	r6, #0
    35a4:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    35a8:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    35ac:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    35b0:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    35b4:	4f14      	ldr	r7, [pc, #80]	; (3608 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    35b6:	707e      	strb	r6, [r7, #1]
    35b8:	88a0      	ldrh	r0, [r4, #4]
    35ba:	81b8      	strh	r0, [r7, #12]
    35bc:	f008 fee6 	bl	c38c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    35c0:	2501      	movs	r5, #1
    35c2:	b108      	cbz	r0, 35c8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    35c4:	70fd      	strb	r5, [r7, #3]
    35c6:	707d      	strb	r5, [r7, #1]
    35c8:	2101      	movs	r1, #1
    35ca:	4640      	mov	r0, r8
    35cc:	f008 fed0 	bl	c370 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    35d0:	b108      	cbz	r0, 35d6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    35d2:	f000 f877 	bl	36c4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    35d6:	4620      	mov	r0, r4
    35d8:	f7ff fe7c 	bl	32d4 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    35dc:	727d      	strb	r5, [r7, #9]
    35de:	2000      	movs	r0, #0
    35e0:	f008 fe7f 	bl	c2e2 <MPSL_IRQ_RADIO_Handler+0x4>
    35e4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35e8:	4630      	mov	r0, r6
    35ea:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    35ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35f2:	2900      	cmp	r1, #0
    35f4:	d0fb      	beq.n	35ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35f6:	2920      	cmp	r1, #32
    35f8:	d8f9      	bhi.n	35ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35fa:	78a1      	ldrb	r1, [r4, #2]
    35fc:	2921      	cmp	r1, #33	; 0x21
    35fe:	d8f6      	bhi.n	35ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3600:	2901      	cmp	r1, #1
    3602:	d1c2      	bne.n	358a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3604:	e7f3      	b.n	35ee <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3606:	0000      	.short	0x0000
    3608:	2000002c 	.word	0x2000002c

0000360c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    360c:	4801      	ldr	r0, [pc, #4]	; (3614 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    360e:	8980      	ldrh	r0, [r0, #12]
    3610:	4770      	bx	lr
    3612:	0000      	.short	0x0000
    3614:	2000002c 	.word	0x2000002c

00003618 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3618:	4802      	ldr	r0, [pc, #8]	; (3624 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    361a:	7a80      	ldrb	r0, [r0, #10]
    361c:	2800      	cmp	r0, #0
    361e:	d000      	beq.n	3622 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3620:	2001      	movs	r0, #1
    3622:	4770      	bx	lr
    3624:	2000002c 	.word	0x2000002c

00003628 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    362a:	4d1f      	ldr	r5, [pc, #124]	; (36a8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    362c:	7ae8      	ldrb	r0, [r5, #11]
    362e:	2800      	cmp	r0, #0
    3630:	d10f      	bne.n	3652 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3632:	7e28      	ldrb	r0, [r5, #24]
    3634:	f000 0003 	and.w	r0, r0, #3
    3638:	f008 feb6 	bl	c3a8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    363c:	2800      	cmp	r0, #0
    363e:	d008      	beq.n	3652 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3640:	f3ef 8110 	mrs	r1, PRIMASK
    3644:	b672      	cpsid	i
    3646:	f7ff ffe7 	bl	3618 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    364a:	b118      	cbz	r0, 3654 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    364c:	2900      	cmp	r1, #0
    364e:	d100      	bne.n	3652 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3650:	b662      	cpsie	i
    3652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3654:	2601      	movs	r6, #1
    3656:	72ae      	strb	r6, [r5, #10]
    3658:	b901      	cbnz	r1, 365c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    365a:	b662      	cpsie	i
    365c:	2018      	movs	r0, #24
    365e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3662:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3666:	61a6      	str	r6, [r4, #24]
    3668:	f44f 7020 	mov.w	r0, #640	; 0x280
    366c:	f8ad 0000 	strh.w	r0, [sp]
    3670:	f8bd 0000 	ldrh.w	r0, [sp]
    3674:	1e41      	subs	r1, r0, #1
    3676:	f8ad 1000 	strh.w	r1, [sp]
    367a:	d2f9      	bcs.n	3670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    367c:	2700      	movs	r7, #0
    367e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3682:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3686:	4808      	ldr	r0, [pc, #32]	; (36a8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3688:	3008      	adds	r0, #8
    368a:	f008 fef3 	bl	c474 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    368e:	702f      	strb	r7, [r5, #0]
    3690:	f7ff fd78 	bl	3184 <MPSL_IRQ_CLOCK_Handler+0x88>
    3694:	6166      	str	r6, [r4, #20]
    3696:	7968      	ldrb	r0, [r5, #5]
    3698:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    369c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    36a0:	2018      	movs	r0, #24
    36a2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    36a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36a8:	2000002c 	.word	0x2000002c

000036ac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    36ac:	b510      	push	{r4, lr}
    36ae:	4c04      	ldr	r4, [pc, #16]	; (36c0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    36b0:	7e20      	ldrb	r0, [r4, #24]
    36b2:	f000 0003 	and.w	r0, r0, #3
    36b6:	f008 fe77 	bl	c3a8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    36ba:	2800      	cmp	r0, #0
    36bc:	d0f8      	beq.n	36b0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    36be:	bd10      	pop	{r4, pc}
    36c0:	2000002c 	.word	0x2000002c

000036c4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    36c4:	4901      	ldr	r1, [pc, #4]	; (36cc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    36c6:	2001      	movs	r0, #1
    36c8:	7008      	strb	r0, [r1, #0]
    36ca:	4770      	bx	lr
    36cc:	20000284 	.word	0x20000284

000036d0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    36d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36d4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    36d8:	b918      	cbnz	r0, 36e2 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    36da:	4803      	ldr	r0, [pc, #12]	; (36e8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    36dc:	7800      	ldrb	r0, [r0, #0]
    36de:	2800      	cmp	r0, #0
    36e0:	d000      	beq.n	36e4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    36e2:	2001      	movs	r0, #1
    36e4:	4770      	bx	lr
    36e6:	0000      	.short	0x0000
    36e8:	20000284 	.word	0x20000284

000036ec <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    36ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36f0:	2101      	movs	r1, #1
    36f2:	6041      	str	r1, [r0, #4]
    36f4:	2100      	movs	r1, #0
    36f6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    36fa:	4801      	ldr	r0, [pc, #4]	; (3700 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    36fc:	7001      	strb	r1, [r0, #0]
    36fe:	4770      	bx	lr
    3700:	20000284 	.word	0x20000284

00003704 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3704:	4802      	ldr	r0, [pc, #8]	; (3710 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3706:	6800      	ldr	r0, [r0, #0]
    3708:	f000 0003 	and.w	r0, r0, #3
    370c:	4770      	bx	lr
    370e:	0000      	.short	0x0000
    3710:	4000041c 	.word	0x4000041c
    3714:	b510      	push	{r4, lr}
    3716:	b131      	cbz	r1, 3726 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3718:	2901      	cmp	r1, #1
    371a:	d007      	beq.n	372c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    371c:	f240 3102 	movw	r1, #770	; 0x302
    3720:	a005      	add	r0, pc, #20	; (adr r0, 3738 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3722:	f000 f821 	bl	3768 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3726:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    372a:	e001      	b.n	3730 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    372c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3730:	f000 0001 	and.w	r0, r0, #1
    3734:	bd10      	pop	{r4, pc}
    3736:	0000      	.short	0x0000
    3738:	5f66726e 	.word	0x5f66726e
    373c:	636f6c63 	.word	0x636f6c63
    3740:	00682e6b 	.word	0x00682e6b
    3744:	f3bf 8f4f 	dsb	sy
    3748:	4805      	ldr	r0, [pc, #20]	; (3760 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    374a:	6801      	ldr	r1, [r0, #0]
    374c:	4a05      	ldr	r2, [pc, #20]	; (3764 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    374e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3752:	4311      	orrs	r1, r2
    3754:	6001      	str	r1, [r0, #0]
    3756:	f3bf 8f4f 	dsb	sy
    375a:	bf00      	nop
    375c:	e7fd      	b.n	375a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    375e:	0000      	.short	0x0000
    3760:	e000ed0c 	.word	0xe000ed0c
    3764:	05fa0004 	.word	0x05fa0004

00003768 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3768:	b672      	cpsid	i
    376a:	4a03      	ldr	r2, [pc, #12]	; (3778 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    376c:	6852      	ldr	r2, [r2, #4]
    376e:	b102      	cbz	r2, 3772 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3770:	4790      	blx	r2
    3772:	f7ff ffe7 	bl	3744 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3776:	0000      	.short	0x0000
    3778:	2000004c 	.word	0x2000004c
    377c:	4806      	ldr	r0, [pc, #24]	; (3798 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    377e:	b510      	push	{r4, lr}
    3780:	2100      	movs	r1, #0
    3782:	6001      	str	r1, [r0, #0]
    3784:	2101      	movs	r1, #1
    3786:	6001      	str	r1, [r0, #0]
    3788:	4608      	mov	r0, r1
    378a:	f008 fe34 	bl	c3f6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    378e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3792:	2001      	movs	r0, #1
    3794:	f008 be22 	b.w	c3dc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3798:	40001ffc 	.word	0x40001ffc
    379c:	4807      	ldr	r0, [pc, #28]	; (37bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    379e:	b510      	push	{r4, lr}
    37a0:	2101      	movs	r1, #1
    37a2:	6041      	str	r1, [r0, #4]
    37a4:	1e89      	subs	r1, r1, #2
    37a6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    37aa:	200c      	movs	r0, #12
    37ac:	f008 fe23 	bl	c3f6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37b4:	200c      	movs	r0, #12
    37b6:	f008 be11 	b.w	c3dc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37ba:	0000      	.short	0x0000
    37bc:	4000c000 	.word	0x4000c000

000037c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    37c0:	b50e      	push	{r1, r2, r3, lr}
    37c2:	b672      	cpsid	i
    37c4:	4a0f      	ldr	r2, [pc, #60]	; (3804 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    37c6:	6855      	ldr	r5, [r2, #4]
    37c8:	b1d5      	cbz	r5, 3800 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    37ca:	2200      	movs	r2, #0
    37cc:	4603      	mov	r3, r0
    37ce:	466e      	mov	r6, sp
    37d0:	240a      	movs	r4, #10
    37d2:	e003      	b.n	37dc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    37d4:	fbb0 f0f4 	udiv	r0, r0, r4
    37d8:	1c52      	adds	r2, r2, #1
    37da:	b2d2      	uxtb	r2, r2
    37dc:	2800      	cmp	r0, #0
    37de:	d1f9      	bne.n	37d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    37e0:	54b0      	strb	r0, [r6, r2]
    37e2:	e009      	b.n	37f8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    37e4:	fbb3 f0f4 	udiv	r0, r3, r4
    37e8:	fb04 3010 	mls	r0, r4, r0, r3
    37ec:	fbb3 f3f4 	udiv	r3, r3, r4
    37f0:	1e52      	subs	r2, r2, #1
    37f2:	b2d2      	uxtb	r2, r2
    37f4:	3030      	adds	r0, #48	; 0x30
    37f6:	54b0      	strb	r0, [r6, r2]
    37f8:	2a00      	cmp	r2, #0
    37fa:	d1f3      	bne.n	37e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    37fc:	4630      	mov	r0, r6
    37fe:	47a8      	blx	r5
    3800:	f7ff ffa0 	bl	3744 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3804:	2000004c 	.word	0x2000004c

00003808 <mpsl_init>:
    3808:	b570      	push	{r4, r5, r6, lr}
    380a:	4c17      	ldr	r4, [pc, #92]	; (3868 <mpsl_init+0x60>)
    380c:	4606      	mov	r6, r0
    380e:	460d      	mov	r5, r1
    3810:	7860      	ldrb	r0, [r4, #1]
    3812:	b110      	cbz	r0, 381a <mpsl_init+0x12>
    3814:	f04f 30ff 	mov.w	r0, #4294967295
    3818:	bd70      	pop	{r4, r5, r6, pc}
    381a:	b906      	cbnz	r6, 381e <mpsl_init+0x16>
    381c:	4e13      	ldr	r6, [pc, #76]	; (386c <mpsl_init+0x64>)
    381e:	6062      	str	r2, [r4, #4]
    3820:	7025      	strb	r5, [r4, #0]
    3822:	f7ff ffab 	bl	377c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3826:	f7ff ffb9 	bl	379c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    382a:	4630      	mov	r0, r6
    382c:	f7ff fe9c 	bl	3568 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3830:	0006      	movs	r6, r0
    3832:	d1f1      	bne.n	3818 <mpsl_init+0x10>
    3834:	f7fe ff00 	bl	2638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3838:	f7ff fef6 	bl	3628 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    383c:	f008 fd28 	bl	c290 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3840:	4628      	mov	r0, r5
    3842:	f008 fdcb 	bl	c3dc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3846:	2001      	movs	r0, #1
    3848:	2d00      	cmp	r5, #0
    384a:	db09      	blt.n	3860 <mpsl_init+0x58>
    384c:	f005 011f 	and.w	r1, r5, #31
    3850:	fa00 f101 	lsl.w	r1, r0, r1
    3854:	096a      	lsrs	r2, r5, #5
    3856:	0092      	lsls	r2, r2, #2
    3858:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    385c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3860:	7060      	strb	r0, [r4, #1]
    3862:	4630      	mov	r0, r6
    3864:	bd70      	pop	{r4, r5, r6, pc}
    3866:	0000      	.short	0x0000
    3868:	2000004c 	.word	0x2000004c
    386c:	0000c418 	.word	0x0000c418

00003870 <mpsl_is_initialized>:
    3870:	4801      	ldr	r0, [pc, #4]	; (3878 <mpsl_is_initialized+0x8>)
    3872:	7840      	ldrb	r0, [r0, #1]
    3874:	4770      	bx	lr
    3876:	0000      	.short	0x0000
    3878:	2000004c 	.word	0x2000004c

0000387c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    387c:	4807      	ldr	r0, [pc, #28]	; (389c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    387e:	f990 0000 	ldrsb.w	r0, [r0]
    3882:	2800      	cmp	r0, #0
    3884:	db09      	blt.n	389a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3886:	f000 021f 	and.w	r2, r0, #31
    388a:	2101      	movs	r1, #1
    388c:	4091      	lsls	r1, r2
    388e:	0940      	lsrs	r0, r0, #5
    3890:	0080      	lsls	r0, r0, #2
    3892:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3896:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    389a:	4770      	bx	lr
    389c:	2000004c 	.word	0x2000004c

000038a0 <mpsl_temperature_get>:
    38a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38a4:	2601      	movs	r6, #1
    38a6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    38aa:	0331      	lsls	r1, r6, #12
    38ac:	f04f 0800 	mov.w	r8, #0
    38b0:	4640      	mov	r0, r8
    38b2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    38b6:	f3bf 8f4f 	dsb	sy
    38ba:	f3bf 8f6f 	isb	sy
    38be:	4c16      	ldr	r4, [pc, #88]	; (3918 <mpsl_temperature_get+0x78>)
    38c0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    38c4:	200c      	movs	r0, #12
    38c6:	f008 fdb5 	bl	c434 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38ca:	4d14      	ldr	r5, [pc, #80]	; (391c <mpsl_temperature_get+0x7c>)
    38cc:	6828      	ldr	r0, [r5, #0]
    38ce:	43c0      	mvns	r0, r0
    38d0:	f340 1700 	sbfx	r7, r0, #4, #1
    38d4:	6828      	ldr	r0, [r5, #0]
    38d6:	f040 0010 	orr.w	r0, r0, #16
    38da:	6028      	str	r0, [r5, #0]
    38dc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    38e0:	6026      	str	r6, [r4, #0]
    38e2:	1c7f      	adds	r7, r7, #1
    38e4:	e002      	b.n	38ec <mpsl_temperature_get+0x4c>
    38e6:	bf00      	nop
    38e8:	f000 f890 	bl	3a0c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    38ec:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    38f0:	2800      	cmp	r0, #0
    38f2:	d0f9      	beq.n	38e8 <mpsl_temperature_get+0x48>
    38f4:	b91f      	cbnz	r7, 38fe <mpsl_temperature_get+0x5e>
    38f6:	6828      	ldr	r0, [r5, #0]
    38f8:	f020 0010 	bic.w	r0, r0, #16
    38fc:	6028      	str	r0, [r5, #0]
    38fe:	4808      	ldr	r0, [pc, #32]	; (3920 <mpsl_temperature_get+0x80>)
    3900:	6805      	ldr	r5, [r0, #0]
    3902:	6066      	str	r6, [r4, #4]
    3904:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3908:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    390c:	200c      	movs	r0, #12
    390e:	f008 fd91 	bl	c434 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3912:	4628      	mov	r0, r5
    3914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3918:	4000c000 	.word	0x4000c000
    391c:	e000ed10 	.word	0xe000ed10
    3920:	4000c508 	.word	0x4000c508

00003924 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3924:	b510      	push	{r4, lr}
    3926:	4602      	mov	r2, r0
    3928:	2005      	movs	r0, #5
    392a:	490c      	ldr	r1, [pc, #48]	; (395c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    392c:	e004      	b.n	3938 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    392e:	bf00      	nop
    3930:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3934:	791b      	ldrb	r3, [r3, #4]
    3936:	b133      	cbz	r3, 3946 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3938:	1e40      	subs	r0, r0, #1
    393a:	b2c0      	uxtb	r0, r0
    393c:	d2f8      	bcs.n	3930 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    393e:	2148      	movs	r1, #72	; 0x48
    3940:	2069      	movs	r0, #105	; 0x69
    3942:	f7ff ff3d 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3946:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    394a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    394e:	2200      	movs	r2, #0
    3950:	714a      	strb	r2, [r1, #5]
    3952:	718a      	strb	r2, [r1, #6]
    3954:	2201      	movs	r2, #1
    3956:	710a      	strb	r2, [r1, #4]
    3958:	bd10      	pop	{r4, pc}
    395a:	0000      	.short	0x0000
    395c:	20000de8 	.word	0x20000de8

00003960 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3960:	b510      	push	{r4, lr}
    3962:	2805      	cmp	r0, #5
    3964:	d301      	bcc.n	396a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3966:	2158      	movs	r1, #88	; 0x58
    3968:	e006      	b.n	3978 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    396a:	490a      	ldr	r1, [pc, #40]	; (3994 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    396c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3970:	7901      	ldrb	r1, [r0, #4]
    3972:	2901      	cmp	r1, #1
    3974:	d003      	beq.n	397e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3976:	2159      	movs	r1, #89	; 0x59
    3978:	2069      	movs	r0, #105	; 0x69
    397a:	f7ff ff21 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    397e:	7941      	ldrb	r1, [r0, #5]
    3980:	7982      	ldrb	r2, [r0, #6]
    3982:	1c49      	adds	r1, r1, #1
    3984:	b2c9      	uxtb	r1, r1
    3986:	428a      	cmp	r2, r1
    3988:	d000      	beq.n	398c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    398a:	7141      	strb	r1, [r0, #5]
    398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3990:	f7ff bf74 	b.w	387c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3994:	20000de8 	.word	0x20000de8

00003998 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3998:	b570      	push	{r4, r5, r6, lr}
    399a:	2505      	movs	r5, #5
    399c:	4e0e      	ldr	r6, [pc, #56]	; (39d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    399e:	4c0f      	ldr	r4, [pc, #60]	; (39dc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    39a0:	e016      	b.n	39d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39a2:	7821      	ldrb	r1, [r4, #0]
    39a4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    39a8:	7902      	ldrb	r2, [r0, #4]
    39aa:	2a01      	cmp	r2, #1
    39ac:	d108      	bne.n	39c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39ae:	7942      	ldrb	r2, [r0, #5]
    39b0:	7983      	ldrb	r3, [r0, #6]
    39b2:	429a      	cmp	r2, r3
    39b4:	d004      	beq.n	39c0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39b6:	7942      	ldrb	r2, [r0, #5]
    39b8:	7182      	strb	r2, [r0, #6]
    39ba:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    39be:	4780      	blx	r0
    39c0:	7820      	ldrb	r0, [r4, #0]
    39c2:	1c40      	adds	r0, r0, #1
    39c4:	b2c0      	uxtb	r0, r0
    39c6:	7020      	strb	r0, [r4, #0]
    39c8:	2805      	cmp	r0, #5
    39ca:	d301      	bcc.n	39d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39cc:	2000      	movs	r0, #0
    39ce:	7020      	strb	r0, [r4, #0]
    39d0:	1e6d      	subs	r5, r5, #1
    39d2:	b2ed      	uxtb	r5, r5
    39d4:	d2e5      	bcs.n	39a2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    39d6:	bd70      	pop	{r4, r5, r6, pc}
    39d8:	20000de8 	.word	0x20000de8
    39dc:	20000285 	.word	0x20000285

000039e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    39e0:	b500      	push	{lr}
    39e2:	f008 fd56 	bl	c492 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    39e6:	b940      	cbnz	r0, 39fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39e8:	f008 fd5d 	bl	c4a6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    39ec:	b928      	cbnz	r0, 39fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39ee:	f008 fd71 	bl	c4d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    39f2:	b910      	cbnz	r0, 39fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    39f4:	f008 fd82 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39f8:	b108      	cbz	r0, 39fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    39fa:	4802      	ldr	r0, [pc, #8]	; (3a04 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    39fc:	bd00      	pop	{pc}
    39fe:	4802      	ldr	r0, [pc, #8]	; (3a08 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3a00:	bd00      	pop	{pc}
    3a02:	0000      	.short	0x0000
    3a04:	4000050c 	.word	0x4000050c
    3a08:	4001e700 	.word	0x4001e700

00003a0c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3a0c:	b510      	push	{r4, lr}
    3a0e:	f008 fd75 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a12:	b330      	cbz	r0, 3a62 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3a14:	f3ef 8010 	mrs	r0, PRIMASK
    3a18:	b1c8      	cbz	r0, 3a4e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3a1a:	2100      	movs	r1, #0
    3a1c:	b672      	cpsid	i
    3a1e:	4812      	ldr	r0, [pc, #72]	; (3a68 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3a20:	6802      	ldr	r2, [r0, #0]
    3a22:	6803      	ldr	r3, [r0, #0]
    3a24:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3a28:	f043 0310 	orr.w	r3, r3, #16
    3a2c:	6003      	str	r3, [r0, #0]
    3a2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a32:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3a36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3a3a:	431c      	orrs	r4, r3
    3a3c:	d000      	beq.n	3a40 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3a3e:	bf40      	sev
    3a40:	bf20      	wfe
    3a42:	bf00      	nop
    3a44:	bf00      	nop
    3a46:	bf00      	nop
    3a48:	bf00      	nop
    3a4a:	b112      	cbz	r2, 3a52 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3a4c:	e005      	b.n	3a5a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3a4e:	2101      	movs	r1, #1
    3a50:	e7e4      	b.n	3a1c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3a52:	6802      	ldr	r2, [r0, #0]
    3a54:	f022 0210 	bic.w	r2, r2, #16
    3a58:	6002      	str	r2, [r0, #0]
    3a5a:	2900      	cmp	r1, #0
    3a5c:	d000      	beq.n	3a60 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3a5e:	b662      	cpsie	i
    3a60:	bd10      	pop	{r4, pc}
    3a62:	bf20      	wfe
    3a64:	bd10      	pop	{r4, pc}
    3a66:	0000      	.short	0x0000
    3a68:	e000ed10 	.word	0xe000ed10

00003a6c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3a6c:	0000c76d 0000c789 0000c777 0000c783     m.......w.......
    3a7c:	0000c771 0000c76b 0000c769 0000c78f     q...k...i.......
    3a8c:	0000c77d 0000c763 0000c75b 0000c75f     }...c...[..._...
    3a9c:	0000c755                                U...

00003aa0 <mpsl_fem_disable>:
    3aa0:	4801      	ldr	r0, [pc, #4]	; (3aa8 <mpsl_fem_disable+0x8>)
    3aa2:	6800      	ldr	r0, [r0, #0]
    3aa4:	6800      	ldr	r0, [r0, #0]
    3aa6:	4700      	bx	r0
    3aa8:	20000054 	.word	0x20000054

00003aac <mpsl_fem_lna_configuration_clear>:
    3aac:	4801      	ldr	r0, [pc, #4]	; (3ab4 <mpsl_fem_lna_configuration_clear+0x8>)
    3aae:	6800      	ldr	r0, [r0, #0]
    3ab0:	6900      	ldr	r0, [r0, #16]
    3ab2:	4700      	bx	r0
    3ab4:	20000054 	.word	0x20000054

00003ab8 <mpsl_fem_lna_configuration_set>:
    3ab8:	4a01      	ldr	r2, [pc, #4]	; (3ac0 <mpsl_fem_lna_configuration_set+0x8>)
    3aba:	6812      	ldr	r2, [r2, #0]
    3abc:	6892      	ldr	r2, [r2, #8]
    3abe:	4710      	bx	r2
    3ac0:	20000054 	.word	0x20000054

00003ac4 <mpsl_fem_pa_configuration_clear>:
    3ac4:	4801      	ldr	r0, [pc, #4]	; (3acc <mpsl_fem_pa_configuration_clear+0x8>)
    3ac6:	6800      	ldr	r0, [r0, #0]
    3ac8:	68c0      	ldr	r0, [r0, #12]
    3aca:	4700      	bx	r0
    3acc:	20000054 	.word	0x20000054

00003ad0 <mpsl_fem_pa_configuration_set>:
    3ad0:	4a01      	ldr	r2, [pc, #4]	; (3ad8 <mpsl_fem_pa_configuration_set+0x8>)
    3ad2:	6812      	ldr	r2, [r2, #0]
    3ad4:	6852      	ldr	r2, [r2, #4]
    3ad6:	4710      	bx	r2
    3ad8:	20000054 	.word	0x20000054

00003adc <mpsl_fem_pa_is_configured>:
    3adc:	4901      	ldr	r1, [pc, #4]	; (3ae4 <mpsl_fem_pa_is_configured+0x8>)
    3ade:	6809      	ldr	r1, [r1, #0]
    3ae0:	6a09      	ldr	r1, [r1, #32]
    3ae2:	4708      	bx	r1
    3ae4:	20000054 	.word	0x20000054

00003ae8 <mpsl_fem_device_config_254_apply_get>:
    3ae8:	4801      	ldr	r0, [pc, #4]	; (3af0 <mpsl_fem_device_config_254_apply_get+0x8>)
    3aea:	7800      	ldrb	r0, [r0, #0]
    3aec:	4770      	bx	lr
    3aee:	0000      	.short	0x0000
    3af0:	20000286 	.word	0x20000286
    3af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3af6:	4c17      	ldr	r4, [pc, #92]	; (3b54 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3af8:	7a20      	ldrb	r0, [r4, #8]
    3afa:	2802      	cmp	r0, #2
    3afc:	d200      	bcs.n	3b00 <mpsl_fem_device_config_254_apply_get+0x18>
    3afe:	2002      	movs	r0, #2
    3b00:	f88d 0001 	strb.w	r0, [sp, #1]
    3b04:	79e0      	ldrb	r0, [r4, #7]
    3b06:	2803      	cmp	r0, #3
    3b08:	d200      	bcs.n	3b0c <mpsl_fem_device_config_254_apply_get+0x24>
    3b0a:	2003      	movs	r0, #3
    3b0c:	f88d 0000 	strb.w	r0, [sp]
    3b10:	79a0      	ldrb	r0, [r4, #6]
    3b12:	f8ad 0004 	strh.w	r0, [sp, #4]
    3b16:	7960      	ldrb	r0, [r4, #5]
    3b18:	f8ad 0002 	strh.w	r0, [sp, #2]
    3b1c:	4668      	mov	r0, sp
    3b1e:	f006 ffeb 	bl	aaf8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3b22:	b108      	cbz	r0, 3b28 <mpsl_fem_device_config_254_apply_get+0x40>
    3b24:	2184      	movs	r1, #132	; 0x84
    3b26:	e010      	b.n	3b4a <mpsl_fem_device_config_254_apply_get+0x62>
    3b28:	68e0      	ldr	r0, [r4, #12]
    3b2a:	9002      	str	r0, [sp, #8]
    3b2c:	a802      	add	r0, sp, #8
    3b2e:	f006 fff9 	bl	ab24 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3b32:	b108      	cbz	r0, 3b38 <mpsl_fem_device_config_254_apply_get+0x50>
    3b34:	2188      	movs	r1, #136	; 0x88
    3b36:	e008      	b.n	3b4a <mpsl_fem_device_config_254_apply_get+0x62>
    3b38:	4807      	ldr	r0, [pc, #28]	; (3b58 <mpsl_fem_device_config_254_apply_get+0x70>)
    3b3a:	6800      	ldr	r0, [r0, #0]
    3b3c:	9003      	str	r0, [sp, #12]
    3b3e:	a803      	add	r0, sp, #12
    3b40:	f00b facb 	bl	f0da <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3b44:	2800      	cmp	r0, #0
    3b46:	d003      	beq.n	3b50 <mpsl_fem_device_config_254_apply_get+0x68>
    3b48:	218c      	movs	r1, #140	; 0x8c
    3b4a:	2003      	movs	r0, #3
    3b4c:	f000 f918 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b50:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3b52:	0000      	.short	0x0000
    3b54:	20000e10 	.word	0x20000e10
    3b58:	00003e6c 	.word	0x00003e6c
    3b5c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3b5e:	4604      	mov	r4, r0
    3b60:	460e      	mov	r6, r1
    3b62:	f100 0003 	add.w	r0, r0, #3
    3b66:	f020 0003 	bic.w	r0, r0, #3
    3b6a:	f04f 0100 	mov.w	r1, #0
    3b6e:	e9cd 0100 	strd	r0, r1, [sp]
    3b72:	7831      	ldrb	r1, [r6, #0]
    3b74:	0015      	movs	r5, r2
    3b76:	f88d 1005 	strb.w	r1, [sp, #5]
    3b7a:	d000      	beq.n	3b7e <mpsl_fem_device_config_254_apply_get+0x96>
    3b7c:	2000      	movs	r0, #0
    3b7e:	a901      	add	r1, sp, #4
    3b80:	f000 faee 	bl	4160 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3b84:	9900      	ldr	r1, [sp, #0]
    3b86:	4408      	add	r0, r1
    3b88:	490c      	ldr	r1, [pc, #48]	; (3bbc <mpsl_fem_device_config_254_apply_get+0xd4>)
    3b8a:	9000      	str	r0, [sp, #0]
    3b8c:	78c9      	ldrb	r1, [r1, #3]
    3b8e:	b149      	cbz	r1, 3ba4 <mpsl_fem_device_config_254_apply_get+0xbc>
    3b90:	7c31      	ldrb	r1, [r6, #16]
    3b92:	b139      	cbz	r1, 3ba4 <mpsl_fem_device_config_254_apply_get+0xbc>
    3b94:	2225      	movs	r2, #37	; 0x25
    3b96:	b105      	cbz	r5, 3b9a <mpsl_fem_device_config_254_apply_get+0xb2>
    3b98:	2000      	movs	r0, #0
    3b9a:	f000 fd29 	bl	45f0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3b9e:	9900      	ldr	r1, [sp, #0]
    3ba0:	4408      	add	r0, r1
    3ba2:	9000      	str	r0, [sp, #0]
    3ba4:	462a      	mov	r2, r5
    3ba6:	4631      	mov	r1, r6
    3ba8:	4668      	mov	r0, sp
    3baa:	f008 fdf2 	bl	c792 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3bae:	9800      	ldr	r0, [sp, #0]
    3bb0:	1dc0      	adds	r0, r0, #7
    3bb2:	f020 0007 	bic.w	r0, r0, #7
    3bb6:	9000      	str	r0, [sp, #0]
    3bb8:	1b00      	subs	r0, r0, r4
    3bba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3bbc:	20000058 	.word	0x20000058

00003bc0 <sdc_build_revision_get>:
    3bc0:	b510      	push	{r4, lr}
    3bc2:	b128      	cbz	r0, 3bd0 <sdc_build_revision_get+0x10>
    3bc4:	2214      	movs	r2, #20
    3bc6:	4904      	ldr	r1, [pc, #16]	; (3bd8 <sdc_build_revision_get+0x18>)
    3bc8:	f008 fcea 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3bcc:	2000      	movs	r0, #0
    3bce:	bd10      	pop	{r4, pc}
    3bd0:	f06f 0015 	mvn.w	r0, #21
    3bd4:	bd10      	pop	{r4, pc}
    3bd6:	0000      	.short	0x0000
    3bd8:	00003e88 	.word	0x00003e88

00003bdc <sdc_cfg_set>:
    3bdc:	b570      	push	{r4, r5, r6, lr}
    3bde:	0003      	movs	r3, r0
    3be0:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3be4:	d103      	bne.n	3bee <sdc_cfg_set+0x12>
    3be6:	4c2a      	ldr	r4, [pc, #168]	; (3c90 <sdc_cfg_set+0xb4>)
    3be8:	7863      	ldrb	r3, [r4, #1]
    3bea:	b10b      	cbz	r3, 3bf0 <sdc_cfg_set+0x14>
    3bec:	1180      	asrs	r0, r0, #6
    3bee:	bd70      	pop	{r4, r5, r6, pc}
    3bf0:	b319      	cbz	r1, 3c3a <sdc_cfg_set+0x5e>
    3bf2:	f06f 0515 	mvn.w	r5, #21
    3bf6:	b38a      	cbz	r2, 3c5c <sdc_cfg_set+0x80>
    3bf8:	4b26      	ldr	r3, [pc, #152]	; (3c94 <sdc_cfg_set+0xb8>)
    3bfa:	290c      	cmp	r1, #12
    3bfc:	d243      	bcs.n	3c86 <sdc_cfg_set+0xaa>
    3bfe:	e8df f001 	tbb	[pc, r1]
    3c02:	0642      	.short	0x0642
    3c04:	13100c09 	.word	0x13100c09
    3c08:	2818251d 	.word	0x2818251d
    3c0c:	332e      	.short	0x332e
    3c0e:	7810      	ldrb	r0, [r2, #0]
    3c10:	7018      	strb	r0, [r3, #0]
    3c12:	e02d      	b.n	3c70 <sdc_cfg_set+0x94>
    3c14:	7810      	ldrb	r0, [r2, #0]
    3c16:	7058      	strb	r0, [r3, #1]
    3c18:	e02a      	b.n	3c70 <sdc_cfg_set+0x94>
    3c1a:	6810      	ldr	r0, [r2, #0]
    3c1c:	f8c3 0005 	str.w	r0, [r3, #5]
    3c20:	e026      	b.n	3c70 <sdc_cfg_set+0x94>
    3c22:	6810      	ldr	r0, [r2, #0]
    3c24:	60d8      	str	r0, [r3, #12]
    3c26:	e023      	b.n	3c70 <sdc_cfg_set+0x94>
    3c28:	7811      	ldrb	r1, [r2, #0]
    3c2a:	2900      	cmp	r1, #0
    3c2c:	d1df      	bne.n	3bee <sdc_cfg_set+0x12>
    3c2e:	7099      	strb	r1, [r3, #2]
    3c30:	e01e      	b.n	3c70 <sdc_cfg_set+0x94>
    3c32:	7811      	ldrb	r1, [r2, #0]
    3c34:	2900      	cmp	r1, #0
    3c36:	d1da      	bne.n	3bee <sdc_cfg_set+0x12>
    3c38:	70d9      	strb	r1, [r3, #3]
    3c3a:	e019      	b.n	3c70 <sdc_cfg_set+0x94>
    3c3c:	78e0      	ldrb	r0, [r4, #3]
    3c3e:	b110      	cbz	r0, 3c46 <sdc_cfg_set+0x6a>
    3c40:	7810      	ldrb	r0, [r2, #0]
    3c42:	2802      	cmp	r0, #2
    3c44:	d31f      	bcc.n	3c86 <sdc_cfg_set+0xaa>
    3c46:	7810      	ldrb	r0, [r2, #0]
    3c48:	7418      	strb	r0, [r3, #16]
    3c4a:	e011      	b.n	3c70 <sdc_cfg_set+0x94>
    3c4c:	8810      	ldrh	r0, [r2, #0]
    3c4e:	8258      	strh	r0, [r3, #18]
    3c50:	e00e      	b.n	3c70 <sdc_cfg_set+0x94>
    3c52:	7811      	ldrb	r1, [r2, #0]
    3c54:	2900      	cmp	r1, #0
    3c56:	d1ca      	bne.n	3bee <sdc_cfg_set+0x12>
    3c58:	7119      	strb	r1, [r3, #4]
    3c5a:	e009      	b.n	3c70 <sdc_cfg_set+0x94>
    3c5c:	e013      	b.n	3c86 <sdc_cfg_set+0xaa>
    3c5e:	7810      	ldrb	r0, [r2, #0]
    3c60:	2802      	cmp	r0, #2
    3c62:	d310      	bcc.n	3c86 <sdc_cfg_set+0xaa>
    3c64:	7518      	strb	r0, [r3, #20]
    3c66:	e003      	b.n	3c70 <sdc_cfg_set+0x94>
    3c68:	7811      	ldrb	r1, [r2, #0]
    3c6a:	2900      	cmp	r1, #0
    3c6c:	d1bf      	bne.n	3bee <sdc_cfg_set+0x12>
    3c6e:	7559      	strb	r1, [r3, #21]
    3c70:	2201      	movs	r2, #1
    3c72:	4908      	ldr	r1, [pc, #32]	; (3c94 <sdc_cfg_set+0xb8>)
    3c74:	2000      	movs	r0, #0
    3c76:	f7ff ff71 	bl	3b5c <mpsl_fem_device_config_254_apply_get+0x74>
    3c7a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3c7e:	db04      	blt.n	3c8a <sdc_cfg_set+0xae>
    3c80:	f06f 000b 	mvn.w	r0, #11
    3c84:	bd70      	pop	{r4, r5, r6, pc}
    3c86:	4628      	mov	r0, r5
    3c88:	bd70      	pop	{r4, r5, r6, pc}
    3c8a:	2101      	movs	r1, #1
    3c8c:	70a1      	strb	r1, [r4, #2]
    3c8e:	bd70      	pop	{r4, r5, r6, pc}
    3c90:	20000058 	.word	0x20000058
    3c94:	20000e10 	.word	0x20000e10

00003c98 <sdc_enable>:
    3c98:	b570      	push	{r4, r5, r6, lr}
    3c9a:	460c      	mov	r4, r1
    3c9c:	0005      	movs	r5, r0
    3c9e:	d019      	beq.n	3cd4 <sdc_enable+0x3c>
    3ca0:	b1c4      	cbz	r4, 3cd4 <sdc_enable+0x3c>
    3ca2:	f000 f925 	bl	3ef0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3ca6:	b1c0      	cbz	r0, 3cda <sdc_enable+0x42>
    3ca8:	4628      	mov	r0, r5
    3caa:	f7ff fe3b 	bl	3924 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3cae:	4d0c      	ldr	r5, [pc, #48]	; (3ce0 <sdc_enable+0x48>)
    3cb0:	2200      	movs	r2, #0
    3cb2:	490c      	ldr	r1, [pc, #48]	; (3ce4 <sdc_enable+0x4c>)
    3cb4:	7028      	strb	r0, [r5, #0]
    3cb6:	4620      	mov	r0, r4
    3cb8:	f7ff ff50 	bl	3b5c <mpsl_fem_device_config_254_apply_get+0x74>
    3cbc:	f00b fe0e 	bl	f8dc <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3cc0:	2100      	movs	r1, #0
    3cc2:	7828      	ldrb	r0, [r5, #0]
    3cc4:	f007 f912 	bl	aeec <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3cc8:	f7ff ff14 	bl	3af4 <mpsl_fem_device_config_254_apply_get+0xc>
    3ccc:	2001      	movs	r0, #1
    3cce:	7068      	strb	r0, [r5, #1]
    3cd0:	2000      	movs	r0, #0
    3cd2:	bd70      	pop	{r4, r5, r6, pc}
    3cd4:	f06f 0015 	mvn.w	r0, #21
    3cd8:	bd70      	pop	{r4, r5, r6, pc}
    3cda:	f04f 30ff 	mov.w	r0, #4294967295
    3cde:	bd70      	pop	{r4, r5, r6, pc}
    3ce0:	20000058 	.word	0x20000058
    3ce4:	20000e10 	.word	0x20000e10

00003ce8 <sdc_init>:
    3ce8:	b530      	push	{r4, r5, lr}
    3cea:	b087      	sub	sp, #28
    3cec:	0005      	movs	r5, r0
    3cee:	d00c      	beq.n	3d0a <sdc_init+0x22>
    3cf0:	f7ff fdbe 	bl	3870 <mpsl_is_initialized>
    3cf4:	f04f 34ff 	mov.w	r4, #4294967295
    3cf8:	b120      	cbz	r0, 3d04 <sdc_init+0x1c>
    3cfa:	f7ff fc87 	bl	360c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3cfe:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3d02:	d905      	bls.n	3d10 <sdc_init+0x28>
    3d04:	4620      	mov	r0, r4
    3d06:	b007      	add	sp, #28
    3d08:	bd30      	pop	{r4, r5, pc}
    3d0a:	f06f 0015 	mvn.w	r0, #21
    3d0e:	e7fa      	b.n	3d06 <sdc_init+0x1e>
    3d10:	4c15      	ldr	r4, [pc, #84]	; (3d68 <sdc_init+0x80>)
    3d12:	4816      	ldr	r0, [pc, #88]	; (3d6c <sdc_init+0x84>)
    3d14:	6065      	str	r5, [r4, #4]
    3d16:	f000 f9e5 	bl	40e4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3d1a:	2000      	movs	r0, #0
    3d1c:	7060      	strb	r0, [r4, #1]
    3d1e:	70a0      	strb	r0, [r4, #2]
    3d20:	70e0      	strb	r0, [r4, #3]
    3d22:	4601      	mov	r1, r0
    3d24:	2218      	movs	r2, #24
    3d26:	4668      	mov	r0, sp
    3d28:	f008 fcb4 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d2c:	2218      	movs	r2, #24
    3d2e:	4910      	ldr	r1, [pc, #64]	; (3d70 <sdc_init+0x88>)
    3d30:	4668      	mov	r0, sp
    3d32:	f008 fc35 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d36:	2218      	movs	r2, #24
    3d38:	4669      	mov	r1, sp
    3d3a:	480e      	ldr	r0, [pc, #56]	; (3d74 <sdc_init+0x8c>)
    3d3c:	f008 fc30 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d40:	f3ef 8410 	mrs	r4, PRIMASK
    3d44:	b672      	cpsid	i
    3d46:	480c      	ldr	r0, [pc, #48]	; (3d78 <sdc_init+0x90>)
    3d48:	f06f 010c 	mvn.w	r1, #12
    3d4c:	f000 fcf2 	bl	4734 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3d50:	480a      	ldr	r0, [pc, #40]	; (3d7c <sdc_init+0x94>)
    3d52:	f000 fdbf 	bl	48d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3d56:	b118      	cbz	r0, 3d60 <sdc_init+0x78>
    3d58:	219a      	movs	r1, #154	; 0x9a
    3d5a:	2003      	movs	r0, #3
    3d5c:	f000 f810 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d60:	b904      	cbnz	r4, 3d64 <sdc_init+0x7c>
    3d62:	b662      	cpsie	i
    3d64:	2000      	movs	r0, #0
    3d66:	e7ce      	b.n	3d06 <sdc_init+0x1e>
    3d68:	20000058 	.word	0x20000058
    3d6c:	00003af5 	.word	0x00003af5
    3d70:	00003e70 	.word	0x00003e70
    3d74:	20000e10 	.word	0x20000e10
    3d78:	4000c000 	.word	0x4000c000
    3d7c:	00003f1d 	.word	0x00003f1d

00003d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3d80:	b50e      	push	{r1, r2, r3, lr}
    3d82:	b672      	cpsid	i
    3d84:	4a15      	ldr	r2, [pc, #84]	; (3ddc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3d86:	6855      	ldr	r5, [r2, #4]
    3d88:	b1d5      	cbz	r5, 3dc0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3d8a:	2200      	movs	r2, #0
    3d8c:	4603      	mov	r3, r0
    3d8e:	466e      	mov	r6, sp
    3d90:	240a      	movs	r4, #10
    3d92:	e003      	b.n	3d9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3d94:	fbb0 f0f4 	udiv	r0, r0, r4
    3d98:	1c52      	adds	r2, r2, #1
    3d9a:	b2d2      	uxtb	r2, r2
    3d9c:	2800      	cmp	r0, #0
    3d9e:	d1f9      	bne.n	3d94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3da0:	54b0      	strb	r0, [r6, r2]
    3da2:	e009      	b.n	3db8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3da4:	fbb3 f0f4 	udiv	r0, r3, r4
    3da8:	fb04 3010 	mls	r0, r4, r0, r3
    3dac:	fbb3 f3f4 	udiv	r3, r3, r4
    3db0:	1e52      	subs	r2, r2, #1
    3db2:	b2d2      	uxtb	r2, r2
    3db4:	3030      	adds	r0, #48	; 0x30
    3db6:	54b0      	strb	r0, [r6, r2]
    3db8:	2a00      	cmp	r2, #0
    3dba:	d1f3      	bne.n	3da4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3dbc:	4630      	mov	r0, r6
    3dbe:	47a8      	blx	r5
    3dc0:	f3bf 8f4f 	dsb	sy
    3dc4:	4806      	ldr	r0, [pc, #24]	; (3de0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3dc6:	6801      	ldr	r1, [r0, #0]
    3dc8:	4a06      	ldr	r2, [pc, #24]	; (3de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3dca:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3dce:	4311      	orrs	r1, r2
    3dd0:	6001      	str	r1, [r0, #0]
    3dd2:	f3bf 8f4f 	dsb	sy
    3dd6:	bf00      	nop
    3dd8:	e7fd      	b.n	3dd6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3dda:	0000      	.short	0x0000
    3ddc:	20000058 	.word	0x20000058
    3de0:	e000ed0c 	.word	0xe000ed0c
    3de4:	05fa0004 	.word	0x05fa0004

00003de8 <sdc_support_dle>:
    3de8:	4806      	ldr	r0, [pc, #24]	; (3e04 <sdc_support_dle+0x1c>)
    3dea:	b510      	push	{r4, lr}
    3dec:	7881      	ldrb	r1, [r0, #2]
    3dee:	7840      	ldrb	r0, [r0, #1]
    3df0:	4301      	orrs	r1, r0
    3df2:	d002      	beq.n	3dfa <sdc_support_dle+0x12>
    3df4:	f04f 30ff 	mov.w	r0, #4294967295
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	f006 fee9 	bl	abd0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3dfe:	2000      	movs	r0, #0
    3e00:	bd10      	pop	{r4, pc}
    3e02:	0000      	.short	0x0000
    3e04:	20000058 	.word	0x20000058

00003e08 <sdc_support_le_2m_phy>:
    3e08:	4806      	ldr	r0, [pc, #24]	; (3e24 <sdc_support_le_2m_phy+0x1c>)
    3e0a:	b510      	push	{r4, lr}
    3e0c:	7881      	ldrb	r1, [r0, #2]
    3e0e:	7840      	ldrb	r0, [r0, #1]
    3e10:	4301      	orrs	r1, r0
    3e12:	d002      	beq.n	3e1a <sdc_support_le_2m_phy+0x12>
    3e14:	f04f 30ff 	mov.w	r0, #4294967295
    3e18:	bd10      	pop	{r4, pc}
    3e1a:	f00b fa0b 	bl	f234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3e1e:	2000      	movs	r0, #0
    3e20:	bd10      	pop	{r4, pc}
    3e22:	0000      	.short	0x0000
    3e24:	20000058 	.word	0x20000058

00003e28 <sdc_support_master>:
    3e28:	4806      	ldr	r0, [pc, #24]	; (3e44 <sdc_support_master+0x1c>)
    3e2a:	b510      	push	{r4, lr}
    3e2c:	7881      	ldrb	r1, [r0, #2]
    3e2e:	7840      	ldrb	r0, [r0, #1]
    3e30:	4301      	orrs	r1, r0
    3e32:	d002      	beq.n	3e3a <sdc_support_master+0x12>
    3e34:	f04f 30ff 	mov.w	r0, #4294967295
    3e38:	bd10      	pop	{r4, pc}
    3e3a:	f007 f88d 	bl	af58 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    3e3e:	2000      	movs	r0, #0
    3e40:	bd10      	pop	{r4, pc}
    3e42:	0000      	.short	0x0000
    3e44:	20000058 	.word	0x20000058

00003e48 <sdc_support_scan>:
    3e48:	4807      	ldr	r0, [pc, #28]	; (3e68 <sdc_support_scan+0x20>)
    3e4a:	b510      	push	{r4, lr}
    3e4c:	7881      	ldrb	r1, [r0, #2]
    3e4e:	7842      	ldrb	r2, [r0, #1]
    3e50:	4311      	orrs	r1, r2
    3e52:	d002      	beq.n	3e5a <sdc_support_scan+0x12>
    3e54:	f04f 30ff 	mov.w	r0, #4294967295
    3e58:	bd10      	pop	{r4, pc}
    3e5a:	2101      	movs	r1, #1
    3e5c:	70c1      	strb	r1, [r0, #3]
    3e5e:	f007 f869 	bl	af34 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    3e62:	2000      	movs	r0, #0
    3e64:	bd10      	pop	{r4, pc}
    3e66:	0000      	.short	0x0000
    3e68:	20000058 	.word	0x20000058
    3e6c:	00000001 	.word	0x00000001
    3e70:	00010101 	.word	0x00010101
    3e74:	031b1b00 	.word	0x031b1b00
    3e78:	00000002 	.word	0x00000002
    3e7c:	00001d4c 	.word	0x00001d4c
    3e80:	001f0003 	.word	0x001f0003
    3e84:	00000000 	.word	0x00000000
    3e88:	66c5e70e 	.word	0x66c5e70e
    3e8c:	ac3c1867 	.word	0xac3c1867
    3e90:	81ccd2b3 	.word	0x81ccd2b3
    3e94:	c0f1dca3 	.word	0xc0f1dca3
    3e98:	220236c0 	.word	0x220236c0

00003e9c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3e9c:	4a05      	ldr	r2, [pc, #20]	; (3eb4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3e9e:	b510      	push	{r4, lr}
    3ea0:	6852      	ldr	r2, [r2, #4]
    3ea2:	b112      	cbz	r2, 3eaa <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ea8:	4710      	bx	r2
    3eaa:	2183      	movs	r1, #131	; 0x83
    3eac:	2004      	movs	r0, #4
    3eae:	f7ff ff67 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3eb2:	0000      	.short	0x0000
    3eb4:	20000e28 	.word	0x20000e28

00003eb8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3eb8:	4a05      	ldr	r2, [pc, #20]	; (3ed0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3eba:	b510      	push	{r4, lr}
    3ebc:	6812      	ldr	r2, [r2, #0]
    3ebe:	b112      	cbz	r2, 3ec6 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ec4:	4710      	bx	r2
    3ec6:	217d      	movs	r1, #125	; 0x7d
    3ec8:	2004      	movs	r0, #4
    3eca:	f7ff ff59 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ece:	0000      	.short	0x0000
    3ed0:	20000e28 	.word	0x20000e28

00003ed4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3ed4:	4a05      	ldr	r2, [pc, #20]	; (3eec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3ed6:	b510      	push	{r4, lr}
    3ed8:	6892      	ldr	r2, [r2, #8]
    3eda:	b112      	cbz	r2, 3ee2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ee0:	4710      	bx	r2
    3ee2:	2189      	movs	r1, #137	; 0x89
    3ee4:	2004      	movs	r0, #4
    3ee6:	f7ff ff4b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3eea:	0000      	.short	0x0000
    3eec:	20000e28 	.word	0x20000e28

00003ef0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3ef0:	4805      	ldr	r0, [pc, #20]	; (3f08 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3ef2:	6801      	ldr	r1, [r0, #0]
    3ef4:	b129      	cbz	r1, 3f02 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3ef6:	6841      	ldr	r1, [r0, #4]
    3ef8:	b119      	cbz	r1, 3f02 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3efa:	6880      	ldr	r0, [r0, #8]
    3efc:	b108      	cbz	r0, 3f02 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3efe:	2001      	movs	r0, #1
    3f00:	4770      	bx	lr
    3f02:	2000      	movs	r0, #0
    3f04:	4770      	bx	lr
    3f06:	0000      	.short	0x0000
    3f08:	20000e28 	.word	0x20000e28

00003f0c <sdc_rand_source_register>:
    3f0c:	4902      	ldr	r1, [pc, #8]	; (3f18 <sdc_rand_source_register+0xc>)
    3f0e:	c80d      	ldmia	r0, {r0, r2, r3}
    3f10:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3f14:	2000      	movs	r0, #0
    3f16:	4770      	bx	lr
    3f18:	20000e28 	.word	0x20000e28

00003f1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f1e:	4c12      	ldr	r4, [pc, #72]	; (3f68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3f20:	2600      	movs	r6, #0
    3f22:	6825      	ldr	r5, [r4, #0]
    3f24:	e011      	b.n	3f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f26:	9800      	ldr	r0, [sp, #0]
    3f28:	2802      	cmp	r0, #2
    3f2a:	d002      	beq.n	3f32 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3f2c:	2803      	cmp	r0, #3
    3f2e:	d10c      	bne.n	3f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3f30:	e006      	b.n	3f40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3f32:	6820      	ldr	r0, [r4, #0]
    3f34:	b110      	cbz	r0, 3f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3f36:	2000      	movs	r0, #0
    3f38:	6026      	str	r6, [r4, #0]
    3f3a:	e005      	b.n	3f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3f3c:	2128      	movs	r1, #40	; 0x28
    3f3e:	e00c      	b.n	3f5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f40:	6820      	ldr	r0, [r4, #0]
    3f42:	b168      	cbz	r0, 3f60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3f44:	2001      	movs	r0, #1
    3f46:	6026      	str	r6, [r4, #0]
    3f48:	47a8      	blx	r5
    3f4a:	4668      	mov	r0, sp
    3f4c:	f000 fc94 	bl	4878 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3f50:	2800      	cmp	r0, #0
    3f52:	d0e8      	beq.n	3f26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3f54:	2805      	cmp	r0, #5
    3f56:	d005      	beq.n	3f64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3f58:	2135      	movs	r1, #53	; 0x35
    3f5a:	2004      	movs	r0, #4
    3f5c:	f7ff ff10 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f60:	212d      	movs	r1, #45	; 0x2d
    3f62:	e7fa      	b.n	3f5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f66:	0000      	.short	0x0000
    3f68:	20000060 	.word	0x20000060
    3f6c:	b570      	push	{r4, r5, r6, lr}
    3f6e:	4c14      	ldr	r4, [pc, #80]	; (3fc0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    3f70:	4605      	mov	r5, r0
    3f72:	7820      	ldrb	r0, [r4, #0]
    3f74:	b140      	cbz	r0, 3f88 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3f76:	78a2      	ldrb	r2, [r4, #2]
    3f78:	1c61      	adds	r1, r4, #1
    3f7a:	4628      	mov	r0, r5
    3f7c:	1c92      	adds	r2, r2, #2
    3f7e:	f008 fb0f 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f82:	2000      	movs	r0, #0
    3f84:	7020      	strb	r0, [r4, #0]
    3f86:	e013      	b.n	3fb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3f88:	480e      	ldr	r0, [pc, #56]	; (3fc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f8a:	f001 ffc9 	bl	5f20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3f8e:	2800      	cmp	r0, #0
    3f90:	d00f      	beq.n	3fb2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f92:	480c      	ldr	r0, [pc, #48]	; (3fc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f94:	7800      	ldrb	r0, [r0, #0]
    3f96:	2814      	cmp	r0, #20
    3f98:	d104      	bne.n	3fa4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    3f9a:	210a      	movs	r1, #10
    3f9c:	203e      	movs	r0, #62	; 0x3e
    3f9e:	f008 fc50 	bl	c842 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3fa2:	b138      	cbz	r0, 3fb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    3fa4:	4907      	ldr	r1, [pc, #28]	; (3fc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3fa6:	4628      	mov	r0, r5
    3fa8:	f008 fca9 	bl	c8fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3fac:	2800      	cmp	r0, #0
    3fae:	d000      	beq.n	3fb2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3fb0:	2001      	movs	r0, #1
    3fb2:	bd70      	pop	{r4, r5, r6, pc}
    3fb4:	4903      	ldr	r1, [pc, #12]	; (3fc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3fb6:	4628      	mov	r0, r5
    3fb8:	f008 fede 	bl	cd78 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3fbc:	e7f8      	b.n	3fb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3fbe:	0000      	.short	0x0000
    3fc0:	20000f3c 	.word	0x20000f3c
    3fc4:	20000e34 	.word	0x20000e34
    3fc8:	b570      	push	{r4, r5, r6, lr}
    3fca:	780a      	ldrb	r2, [r1, #0]
    3fcc:	7082      	strb	r2, [r0, #2]
    3fce:	b33a      	cbz	r2, 4020 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3fd0:	2a01      	cmp	r2, #1
    3fd2:	d825      	bhi.n	4020 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3fd4:	2313      	movs	r3, #19
    3fd6:	7003      	strb	r3, [r0, #0]
    3fd8:	2300      	movs	r3, #0
    3fda:	e00a      	b.n	3ff2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    3fdc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3fe0:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3fe4:	78a6      	ldrb	r6, [r4, #2]
    3fe6:	70ee      	strb	r6, [r5, #3]
    3fe8:	8864      	ldrh	r4, [r4, #2]
    3fea:	0a24      	lsrs	r4, r4, #8
    3fec:	1c5b      	adds	r3, r3, #1
    3fee:	712c      	strb	r4, [r5, #4]
    3ff0:	b2db      	uxtb	r3, r3
    3ff2:	4293      	cmp	r3, r2
    3ff4:	d3f2      	bcc.n	3fdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    3ff6:	2300      	movs	r3, #0
    3ff8:	e00b      	b.n	4012 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    3ffa:	bf00      	nop
    3ffc:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4000:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4004:	792e      	ldrb	r6, [r5, #4]
    4006:	7166      	strb	r6, [r4, #5]
    4008:	88ad      	ldrh	r5, [r5, #4]
    400a:	0a2d      	lsrs	r5, r5, #8
    400c:	1c5b      	adds	r3, r3, #1
    400e:	71a5      	strb	r5, [r4, #6]
    4010:	b2db      	uxtb	r3, r3
    4012:	4293      	cmp	r3, r2
    4014:	d3f2      	bcc.n	3ffc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4016:	2101      	movs	r1, #1
    4018:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    401c:	b2c0      	uxtb	r0, r0
    401e:	bd70      	pop	{r4, r5, r6, pc}
    4020:	2000      	movs	r0, #0
    4022:	bd70      	pop	{r4, r5, r6, pc}

00004024 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4024:	2101      	movs	r1, #1
    4026:	4a0c      	ldr	r2, [pc, #48]	; (4058 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4028:	2840      	cmp	r0, #64	; 0x40
    402a:	d20c      	bcs.n	4046 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    402c:	2820      	cmp	r0, #32
    402e:	d803      	bhi.n	4038 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4030:	1e40      	subs	r0, r0, #1
    4032:	4081      	lsls	r1, r0
    4034:	6810      	ldr	r0, [r2, #0]
    4036:	e002      	b.n	403e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4038:	3821      	subs	r0, #33	; 0x21
    403a:	4081      	lsls	r1, r0
    403c:	6850      	ldr	r0, [r2, #4]
    403e:	4201      	tst	r1, r0
    4040:	d107      	bne.n	4052 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4042:	2000      	movs	r0, #0
    4044:	4770      	bx	lr
    4046:	28ff      	cmp	r0, #255	; 0xff
    4048:	d003      	beq.n	4052 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    404a:	3840      	subs	r0, #64	; 0x40
    404c:	4081      	lsls	r1, r0
    404e:	6890      	ldr	r0, [r2, #8]
    4050:	e7f5      	b.n	403e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4052:	2001      	movs	r0, #1
    4054:	4770      	bx	lr
    4056:	0000      	.short	0x0000
    4058:	20000064 	.word	0x20000064

0000405c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    405c:	2101      	movs	r1, #1
    405e:	1e40      	subs	r0, r0, #1
    4060:	4081      	lsls	r1, r0
    4062:	4804      	ldr	r0, [pc, #16]	; (4074 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4064:	68c0      	ldr	r0, [r0, #12]
    4066:	4201      	tst	r1, r0
    4068:	d001      	beq.n	406e <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    406a:	2001      	movs	r0, #1
    406c:	4770      	bx	lr
    406e:	2000      	movs	r0, #0
    4070:	4770      	bx	lr
    4072:	0000      	.short	0x0000
    4074:	20000064 	.word	0x20000064

00004078 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4078:	4901      	ldr	r1, [pc, #4]	; (4080 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    407a:	6800      	ldr	r0, [r0, #0]
    407c:	60c8      	str	r0, [r1, #12]
    407e:	4770      	bx	lr
    4080:	20000064 	.word	0x20000064

00004084 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4084:	4904      	ldr	r1, [pc, #16]	; (4098 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4086:	6802      	ldr	r2, [r0, #0]
    4088:	6840      	ldr	r0, [r0, #4]
    408a:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    408e:	600a      	str	r2, [r1, #0]
    4090:	4a02      	ldr	r2, [pc, #8]	; (409c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4092:	4310      	orrs	r0, r2
    4094:	6048      	str	r0, [r1, #4]
    4096:	4770      	bx	lr
    4098:	20000064 	.word	0x20000064
    409c:	024007f8 	.word	0x024007f8

000040a0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    40a0:	4901      	ldr	r1, [pc, #4]	; (40a8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    40a2:	6800      	ldr	r0, [r0, #0]
    40a4:	6088      	str	r0, [r1, #8]
    40a6:	4770      	bx	lr
    40a8:	20000064 	.word	0x20000064

000040ac <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    40ac:	4805      	ldr	r0, [pc, #20]	; (40c4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    40ae:	f04f 31ff 	mov.w	r1, #4294967295
    40b2:	6001      	str	r1, [r0, #0]
    40b4:	0cc9      	lsrs	r1, r1, #19
    40b6:	6041      	str	r1, [r0, #4]
    40b8:	2100      	movs	r1, #0
    40ba:	6081      	str	r1, [r0, #8]
    40bc:	211f      	movs	r1, #31
    40be:	60c1      	str	r1, [r0, #12]
    40c0:	4770      	bx	lr
    40c2:	0000      	.short	0x0000
    40c4:	20000064 	.word	0x20000064

000040c8 <sdc_hci_cmd_cb_reset>:
    40c8:	b510      	push	{r4, lr}
    40ca:	f7ff ffef 	bl	40ac <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    40ce:	f00b f88a 	bl	f1e6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    40d2:	4604      	mov	r4, r0
    40d4:	4802      	ldr	r0, [pc, #8]	; (40e0 <sdc_hci_cmd_cb_reset+0x18>)
    40d6:	6800      	ldr	r0, [r0, #0]
    40d8:	b100      	cbz	r0, 40dc <sdc_hci_cmd_cb_reset+0x14>
    40da:	4780      	blx	r0
    40dc:	4620      	mov	r0, r4
    40de:	bd10      	pop	{r4, pc}
    40e0:	20000074 	.word	0x20000074

000040e4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    40e4:	4901      	ldr	r1, [pc, #4]	; (40ec <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    40e6:	6008      	str	r0, [r1, #0]
    40e8:	4770      	bx	lr
    40ea:	0000      	.short	0x0000
    40ec:	20000074 	.word	0x20000074

000040f0 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    40f0:	2102      	movs	r1, #2
    40f2:	8001      	strh	r1, [r0, #0]
    40f4:	8041      	strh	r1, [r0, #2]
    40f6:	2100      	movs	r1, #0
    40f8:	7101      	strb	r1, [r0, #4]
    40fa:	210e      	movs	r1, #14
    40fc:	7141      	strb	r1, [r0, #5]
    40fe:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    4102:	80c1      	strh	r1, [r0, #6]
    4104:	4901      	ldr	r1, [pc, #4]	; (410c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4106:	6081      	str	r1, [r0, #8]
    4108:	2000      	movs	r0, #0
    410a:	4770      	bx	lr
    410c:	3c186766 	.word	0x3c186766

00004110 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4110:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4112:	4604      	mov	r4, r0
    4114:	4669      	mov	r1, sp
    4116:	f009 faed 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    411a:	b170      	cbz	r0, 413a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    411c:	f240 215a 	movw	r1, #602	; 0x25a
    4120:	e008      	b.n	4134 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4122:	bf00      	nop
    4124:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4128:	4621      	mov	r1, r4
    412a:	f000 f8a7 	bl	427c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    412e:	b120      	cbz	r0, 413a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4130:	f240 215f 	movw	r1, #607	; 0x25f
    4134:	2017      	movs	r0, #23
    4136:	f7ff fe23 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    413a:	4668      	mov	r0, sp
    413c:	f000 f850 	bl	41e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4140:	2800      	cmp	r0, #0
    4142:	d0ef      	beq.n	4124 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4144:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004148 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4148:	b510      	push	{r4, lr}
    414a:	b120      	cbz	r0, 4156 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    414c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4150:	2017      	movs	r0, #23
    4152:	f7ff fe15 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4156:	4801      	ldr	r0, [pc, #4]	; (415c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    4158:	7800      	ldrb	r0, [r0, #0]
    415a:	bd10      	pop	{r4, pc}
    415c:	20001040 	.word	0x20001040

00004160 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4162:	4605      	mov	r5, r0
    4164:	7808      	ldrb	r0, [r1, #0]
    4166:	784a      	ldrb	r2, [r1, #1]
    4168:	4290      	cmp	r0, r2
    416a:	d902      	bls.n	4172 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    416c:	f240 1163 	movw	r1, #355	; 0x163
    4170:	e00a      	b.n	4188 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4172:	9500      	str	r5, [sp, #0]
    4174:	b15d      	cbz	r5, 418e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    4176:	2600      	movs	r6, #0
    4178:	1ce8      	adds	r0, r5, #3
    417a:	784c      	ldrb	r4, [r1, #1]
    417c:	f020 0003 	bic.w	r0, r0, #3
    4180:	42a8      	cmp	r0, r5
    4182:	d006      	beq.n	4192 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    4184:	f240 1179 	movw	r1, #377	; 0x179
    4188:	2017      	movs	r0, #23
    418a:	f7ff fdf9 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    418e:	2601      	movs	r6, #1
    4190:	e7f2      	b.n	4178 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    4192:	4f12      	ldr	r7, [pc, #72]	; (41dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4194:	4631      	mov	r1, r6
    4196:	4668      	mov	r0, sp
    4198:	703c      	strb	r4, [r7, #0]
    419a:	f000 f8e1 	bl	4360 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    419e:	2000      	movs	r0, #0
    41a0:	4603      	mov	r3, r0
    41a2:	9900      	ldr	r1, [sp, #0]
    41a4:	1cc9      	adds	r1, r1, #3
    41a6:	f021 0103 	bic.w	r1, r1, #3
    41aa:	9100      	str	r1, [sp, #0]
    41ac:	b966      	cbnz	r6, 41c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    41ae:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    41b2:	6091      	str	r1, [r2, #8]
    41b4:	2100      	movs	r1, #0
    41b6:	e005      	b.n	41c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    41b8:	f8d2 c008 	ldr.w	ip, [r2, #8]
    41bc:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    41c0:	1c49      	adds	r1, r1, #1
    41c2:	b2c9      	uxtb	r1, r1
    41c4:	42a1      	cmp	r1, r4
    41c6:	d3f7      	bcc.n	41b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    41c8:	9900      	ldr	r1, [sp, #0]
    41ca:	1c40      	adds	r0, r0, #1
    41cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    41d0:	9100      	str	r1, [sp, #0]
    41d2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    41d6:	d0e4      	beq.n	41a2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    41d8:	1b48      	subs	r0, r1, r5
    41da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41dc:	20001040 	.word	0x20001040

000041e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    41e0:	b570      	push	{r4, r5, r6, lr}
    41e2:	4604      	mov	r4, r0
    41e4:	f009 fae0 	bl	d7a8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    41e8:	b108      	cbz	r0, 41ee <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    41ea:	2010      	movs	r0, #16
    41ec:	bd70      	pop	{r4, r5, r6, pc}
    41ee:	7825      	ldrb	r5, [r4, #0]
    41f0:	f000 f8f2 	bl	43d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    41f4:	4602      	mov	r2, r0
    41f6:	480c      	ldr	r0, [pc, #48]	; (4228 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    41f8:	8861      	ldrh	r1, [r4, #2]
    41fa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    41fe:	e00e      	b.n	421e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4200:	6883      	ldr	r3, [r0, #8]
    4202:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4206:	b143      	cbz	r3, 421a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4208:	1c4a      	adds	r2, r1, #1
    420a:	8062      	strh	r2, [r4, #2]
    420c:	80a1      	strh	r1, [r4, #4]
    420e:	6880      	ldr	r0, [r0, #8]
    4210:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4214:	60a0      	str	r0, [r4, #8]
    4216:	2000      	movs	r0, #0
    4218:	bd70      	pop	{r4, r5, r6, pc}
    421a:	1c49      	adds	r1, r1, #1
    421c:	b289      	uxth	r1, r1
    421e:	4291      	cmp	r1, r2
    4220:	d3ee      	bcc.n	4200 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4222:	8061      	strh	r1, [r4, #2]
    4224:	2005      	movs	r0, #5
    4226:	bd70      	pop	{r4, r5, r6, pc}
    4228:	20001040 	.word	0x20001040

0000422c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4230:	b949      	cbnz	r1, 4246 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4232:	4c11      	ldr	r4, [pc, #68]	; (4278 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4234:	2700      	movs	r7, #0
    4236:	463b      	mov	r3, r7
    4238:	f64f 76ff 	movw	r6, #65535	; 0xffff
    423c:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4240:	f814 c001 	ldrb.w	ip, [r4, r1]
    4244:	e00d      	b.n	4262 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4246:	2000      	movs	r0, #0
    4248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    424c:	19dc      	adds	r4, r3, r7
    424e:	f8d5 e008 	ldr.w	lr, [r5, #8]
    4252:	b2a4      	uxth	r4, r4
    4254:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4258:	f1be 0f00 	cmp.w	lr, #0
    425c:	d004      	beq.n	4268 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    425e:	1c5b      	adds	r3, r3, #1
    4260:	b29b      	uxth	r3, r3
    4262:	459c      	cmp	ip, r3
    4264:	d8f2      	bhi.n	424c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4266:	4634      	mov	r4, r6
    4268:	8004      	strh	r4, [r0, #0]
    426a:	4620      	mov	r0, r4
    426c:	42b4      	cmp	r4, r6
    426e:	d0ea      	beq.n	4246 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4274:	f000 b82c 	b.w	42d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    4278:	20001040 	.word	0x20001040

0000427c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    427c:	b570      	push	{r4, r5, r6, lr}
    427e:	4606      	mov	r6, r0
    4280:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4284:	f243 0502 	movw	r5, #12290	; 0x3002
    4288:	38ff      	subs	r0, #255	; 0xff
    428a:	d01a      	beq.n	42c2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    428c:	b109      	cbz	r1, 4292 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    428e:	2007      	movs	r0, #7
    4290:	bd70      	pop	{r4, r5, r6, pc}
    4292:	4630      	mov	r0, r6
    4294:	f000 f854 	bl	4340 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    4298:	0004      	movs	r4, r0
    429a:	d012      	beq.n	42c2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    429c:	480a      	ldr	r0, [pc, #40]	; (42c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    429e:	4621      	mov	r1, r4
    42a0:	6802      	ldr	r2, [r0, #0]
    42a2:	4630      	mov	r0, r6
    42a4:	4790      	blx	r2
    42a6:	4d09      	ldr	r5, [pc, #36]	; (42cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    42a8:	2000      	movs	r0, #0
    42aa:	68a9      	ldr	r1, [r5, #8]
    42ac:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    42b0:	f000 f888 	bl	43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    42b4:	4602      	mov	r2, r0
    42b6:	4621      	mov	r1, r4
    42b8:	6868      	ldr	r0, [r5, #4]
    42ba:	f009 fa05 	bl	d6c8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    42be:	2000      	movs	r0, #0
    42c0:	bd70      	pop	{r4, r5, r6, pc}
    42c2:	4628      	mov	r0, r5
    42c4:	bd70      	pop	{r4, r5, r6, pc}
    42c6:	0000      	.short	0x0000
    42c8:	000043ec 	.word	0x000043ec
    42cc:	20001040 	.word	0x20001040
    42d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42d4:	4690      	mov	r8, r2
    42d6:	460e      	mov	r6, r1
    42d8:	4607      	mov	r7, r0
    42da:	f009 fa1b 	bl	d714 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    42de:	b148      	cbz	r0, 42f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    42e0:	4815      	ldr	r0, [pc, #84]	; (4338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    42e2:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    42e6:	68a8      	ldr	r0, [r5, #8]
    42e8:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    42ec:	b128      	cbz	r0, 42fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    42ee:	f44f 719d 	mov.w	r1, #314	; 0x13a
    42f2:	e014      	b.n	431e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    42f4:	f240 1139 	movw	r1, #313	; 0x139
    42f8:	e011      	b.n	431e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    42fa:	6868      	ldr	r0, [r5, #4]
    42fc:	2800      	cmp	r0, #0
    42fe:	d018      	beq.n	4332 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    4300:	4630      	mov	r0, r6
    4302:	f000 f85f 	bl	43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4306:	4601      	mov	r1, r0
    4308:	6868      	ldr	r0, [r5, #4]
    430a:	f009 f98f 	bl	d62c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    430e:	0004      	movs	r4, r0
    4310:	d00e      	beq.n	4330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4312:	68a8      	ldr	r0, [r5, #8]
    4314:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4318:	b126      	cbz	r6, 4324 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    431a:	f240 1145 	movw	r1, #325	; 0x145
    431e:	2017      	movs	r0, #23
    4320:	f7ff fd2e 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4324:	4805      	ldr	r0, [pc, #20]	; (433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    4326:	4642      	mov	r2, r8
    4328:	4621      	mov	r1, r4
    432a:	6803      	ldr	r3, [r0, #0]
    432c:	4638      	mov	r0, r7
    432e:	4798      	blx	r3
    4330:	4620      	mov	r0, r4
    4332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4336:	0000      	.short	0x0000
    4338:	20001040 	.word	0x20001040
    433c:	000043e8 	.word	0x000043e8
    4340:	b570      	push	{r4, r5, r6, lr}
    4342:	460c      	mov	r4, r1
    4344:	4605      	mov	r5, r0
    4346:	f009 f9e5 	bl	d714 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    434a:	2800      	cmp	r0, #0
    434c:	d005      	beq.n	435a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    434e:	4803      	ldr	r0, [pc, #12]	; (435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    4350:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4354:	6880      	ldr	r0, [r0, #8]
    4356:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    435a:	bd70      	pop	{r4, r5, r6, pc}
    435c:	20001040 	.word	0x20001040
    4360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4364:	4e16      	ldr	r6, [pc, #88]	; (43c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    4366:	4688      	mov	r8, r1
    4368:	4605      	mov	r5, r0
    436a:	2400      	movs	r4, #0
    436c:	6828      	ldr	r0, [r5, #0]
    436e:	1cc0      	adds	r0, r0, #3
    4370:	f020 0003 	bic.w	r0, r0, #3
    4374:	6028      	str	r0, [r5, #0]
    4376:	4620      	mov	r0, r4
    4378:	f000 f824 	bl	43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    437c:	5d31      	ldrb	r1, [r6, r4]
    437e:	4348      	muls	r0, r1
    4380:	f1b8 0f00 	cmp.w	r8, #0
    4384:	d001      	beq.n	438a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    4386:	2200      	movs	r2, #0
    4388:	e000      	b.n	438c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    438a:	682a      	ldr	r2, [r5, #0]
    438c:	4601      	mov	r1, r0
    438e:	9200      	str	r2, [sp, #0]
    4390:	b132      	cbz	r2, 43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4392:	2700      	movs	r7, #0
    4394:	ea4f 000d 	mov.w	r0, sp
    4398:	f009 f975 	bl	d686 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    439c:	b11f      	cbz	r7, 43a6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    439e:	e006      	b.n	43ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    43a0:	2701      	movs	r7, #1
    43a2:	2000      	movs	r0, #0
    43a4:	e7f8      	b.n	4398 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    43a6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    43aa:	9a00      	ldr	r2, [sp, #0]
    43ac:	604a      	str	r2, [r1, #4]
    43ae:	6829      	ldr	r1, [r5, #0]
    43b0:	1c64      	adds	r4, r4, #1
    43b2:	4408      	add	r0, r1
    43b4:	6028      	str	r0, [r5, #0]
    43b6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    43ba:	d0d7      	beq.n	436c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    43bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43c0:	20001040 	.word	0x20001040
    43c4:	4903      	ldr	r1, [pc, #12]	; (43d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    43c6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    43ca:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    43ce:	1cc0      	adds	r0, r0, #3
    43d0:	4008      	ands	r0, r1
    43d2:	4770      	bx	lr
    43d4:	000043e4 	.word	0x000043e4
    43d8:	4801      	ldr	r0, [pc, #4]	; (43e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    43da:	7800      	ldrb	r0, [r0, #0]
    43dc:	4770      	bx	lr
    43de:	0000      	.short	0x0000
    43e0:	20001040 	.word	0x20001040
    43e4:	000001e0 	.word	0x000001e0
    43e8:	0000d729 	.word	0x0000d729
    43ec:	0000e8c1 	.word	0x0000e8c1

000043f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    43f0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43f4:	4c26      	ldr	r4, [pc, #152]	; (4490 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    43f6:	4680      	mov	r8, r0
    43f8:	b081      	sub	sp, #4
    43fa:	6820      	ldr	r0, [r4, #0]
    43fc:	469a      	mov	sl, r3
    43fe:	4693      	mov	fp, r2
    4400:	b158      	cbz	r0, 441a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4402:	7a02      	ldrb	r2, [r0, #8]
    4404:	4542      	cmp	r2, r8
    4406:	d903      	bls.n	4410 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4408:	6841      	ldr	r1, [r0, #4]
    440a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    440e:	b140      	cbz	r0, 4422 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4410:	f243 0002 	movw	r0, #12290	; 0x3002
    4414:	b005      	add	sp, #20
    4416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    441a:	21a5      	movs	r1, #165	; 0xa5
    441c:	2018      	movs	r0, #24
    441e:	f7ff fcaf 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4422:	4619      	mov	r1, r3
    4424:	9802      	ldr	r0, [sp, #8]
    4426:	f009 f997 	bl	d758 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    442a:	b286      	uxth	r6, r0
    442c:	4658      	mov	r0, fp
    442e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4430:	f009 f989 	bl	d746 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4434:	b285      	uxth	r5, r0
    4436:	1970      	adds	r0, r6, r5
    4438:	1d00      	adds	r0, r0, #4
    443a:	b287      	uxth	r7, r0
    443c:	6820      	ldr	r0, [r4, #0]
    443e:	46a1      	mov	r9, r4
    4440:	4639      	mov	r1, r7
    4442:	6800      	ldr	r0, [r0, #0]
    4444:	f009 f8f2 	bl	d62c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4448:	0004      	movs	r4, r0
    444a:	d01f      	beq.n	448c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    444c:	8067      	strh	r7, [r4, #2]
    444e:	8025      	strh	r5, [r4, #0]
    4450:	4629      	mov	r1, r5
    4452:	1d20      	adds	r0, r4, #4
    4454:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4456:	4607      	mov	r7, r0
    4458:	465a      	mov	r2, fp
    445a:	2301      	movs	r3, #1
    445c:	9500      	str	r5, [sp, #0]
    445e:	f009 f845 	bl	d4ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4462:	8820      	ldrh	r0, [r4, #0]
    4464:	4631      	mov	r1, r6
    4466:	4438      	add	r0, r7
    4468:	2301      	movs	r3, #1
    446a:	9a02      	ldr	r2, [sp, #8]
    446c:	f8cd a000 	str.w	sl, [sp]
    4470:	f009 f83c 	bl	d4ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4474:	8820      	ldrh	r0, [r4, #0]
    4476:	19c1      	adds	r1, r0, r7
    4478:	4638      	mov	r0, r7
    447a:	f009 f868 	bl	d54e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    447e:	f8d9 0000 	ldr.w	r0, [r9]
    4482:	6841      	ldr	r1, [r0, #4]
    4484:	2000      	movs	r0, #0
    4486:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    448a:	e7c3      	b.n	4414 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    448c:	2004      	movs	r0, #4
    448e:	e7c1      	b.n	4414 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4490:	20000078 	.word	0x20000078

00004494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4494:	b570      	push	{r4, r5, r6, lr}
    4496:	4c14      	ldr	r4, [pc, #80]	; (44e8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4498:	6823      	ldr	r3, [r4, #0]
    449a:	b18b      	cbz	r3, 44c0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    449c:	7a19      	ldrb	r1, [r3, #8]
    449e:	4281      	cmp	r1, r0
    44a0:	d912      	bls.n	44c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44a2:	685a      	ldr	r2, [r3, #4]
    44a4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    44a8:	b171      	cbz	r1, 44c8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    44aa:	2500      	movs	r5, #0
    44ac:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    44b0:	884a      	ldrh	r2, [r1, #2]
    44b2:	6818      	ldr	r0, [r3, #0]
    44b4:	f009 f908 	bl	d6c8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    44b8:	6821      	ldr	r1, [r4, #0]
    44ba:	2000      	movs	r0, #0
    44bc:	7a0a      	ldrb	r2, [r1, #8]
    44be:	e00c      	b.n	44da <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    44c0:	21c8      	movs	r1, #200	; 0xc8
    44c2:	2018      	movs	r0, #24
    44c4:	f7ff fc5c 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44c8:	f243 0002 	movw	r0, #12290	; 0x3002
    44cc:	bd70      	pop	{r4, r5, r6, pc}
    44ce:	684b      	ldr	r3, [r1, #4]
    44d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    44d4:	b933      	cbnz	r3, 44e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    44d6:	1c40      	adds	r0, r0, #1
    44d8:	b2c0      	uxtb	r0, r0
    44da:	4282      	cmp	r2, r0
    44dc:	d8f7      	bhi.n	44ce <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    44de:	6808      	ldr	r0, [r1, #0]
    44e0:	f009 f8e7 	bl	d6b2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    44e4:	2000      	movs	r0, #0
    44e6:	bd70      	pop	{r4, r5, r6, pc}
    44e8:	20000078 	.word	0x20000078

000044ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    44ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44f0:	460d      	mov	r5, r1
    44f2:	0004      	movs	r4, r0
    44f4:	4690      	mov	r8, r2
    44f6:	f04f 0600 	mov.w	r6, #0
    44fa:	d009      	beq.n	4510 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    44fc:	2700      	movs	r7, #0
    44fe:	1ce0      	adds	r0, r4, #3
    4500:	f020 0003 	bic.w	r0, r0, #3
    4504:	42a0      	cmp	r0, r4
    4506:	d005      	beq.n	4514 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4508:	2186      	movs	r1, #134	; 0x86
    450a:	2018      	movs	r0, #24
    450c:	f7ff fc38 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4510:	2701      	movs	r7, #1
    4512:	e7f4      	b.n	44fe <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4514:	b1cd      	cbz	r5, 454a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4516:	4611      	mov	r1, r2
    4518:	2000      	movs	r0, #0
    451a:	f009 f8b4 	bl	d686 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    451e:	300c      	adds	r0, #12
    4520:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4524:	b98f      	cbnz	r7, 454a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4526:	4f0a      	ldr	r7, [pc, #40]	; (4550 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4528:	f104 000c 	add.w	r0, r4, #12
    452c:	00aa      	lsls	r2, r5, #2
    452e:	603c      	str	r4, [r7, #0]
    4530:	7225      	strb	r5, [r4, #8]
    4532:	6060      	str	r0, [r4, #4]
    4534:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4538:	6020      	str	r0, [r4, #0]
    453a:	2100      	movs	r1, #0
    453c:	6860      	ldr	r0, [r4, #4]
    453e:	f008 f8a9 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4542:	4641      	mov	r1, r8
    4544:	6838      	ldr	r0, [r7, #0]
    4546:	f009 f89e 	bl	d686 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    454a:	4630      	mov	r0, r6
    454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4550:	20000078 	.word	0x20000078

00004554 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4554:	b570      	push	{r4, r5, r6, lr}
    4556:	4d08      	ldr	r5, [pc, #32]	; (4578 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4558:	6828      	ldr	r0, [r5, #0]
    455a:	2800      	cmp	r0, #0
    455c:	d00a      	beq.n	4574 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    455e:	2400      	movs	r4, #0
    4560:	e004      	b.n	456c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4562:	4620      	mov	r0, r4
    4564:	f7ff ff96 	bl	4494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4568:	1c64      	adds	r4, r4, #1
    456a:	b2e4      	uxtb	r4, r4
    456c:	6828      	ldr	r0, [r5, #0]
    456e:	7a00      	ldrb	r0, [r0, #8]
    4570:	42a0      	cmp	r0, r4
    4572:	d8f6      	bhi.n	4562 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4574:	bd70      	pop	{r4, r5, r6, pc}
    4576:	0000      	.short	0x0000
    4578:	20000078 	.word	0x20000078

0000457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    457c:	4909      	ldr	r1, [pc, #36]	; (45a4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    457e:	b510      	push	{r4, lr}
    4580:	4602      	mov	r2, r0
    4582:	6809      	ldr	r1, [r1, #0]
    4584:	2000      	movs	r0, #0
    4586:	b149      	cbz	r1, 459c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4588:	7a0b      	ldrb	r3, [r1, #8]
    458a:	4293      	cmp	r3, r2
    458c:	d905      	bls.n	459a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    458e:	6849      	ldr	r1, [r1, #4]
    4590:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4594:	2900      	cmp	r1, #0
    4596:	d000      	beq.n	459a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4598:	1d08      	adds	r0, r1, #4
    459a:	bd10      	pop	{r4, pc}
    459c:	21ee      	movs	r1, #238	; 0xee
    459e:	2018      	movs	r0, #24
    45a0:	f7ff fbee 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45a4:	20000078 	.word	0x20000078

000045a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    45a8:	490a      	ldr	r1, [pc, #40]	; (45d4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    45aa:	b510      	push	{r4, lr}
    45ac:	4602      	mov	r2, r0
    45ae:	6809      	ldr	r1, [r1, #0]
    45b0:	2000      	movs	r0, #0
    45b2:	b159      	cbz	r1, 45cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    45b4:	7a0b      	ldrb	r3, [r1, #8]
    45b6:	4293      	cmp	r3, r2
    45b8:	d907      	bls.n	45ca <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45ba:	6849      	ldr	r1, [r1, #4]
    45bc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    45c0:	2900      	cmp	r1, #0
    45c2:	d002      	beq.n	45ca <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45c4:	f831 0b04 	ldrh.w	r0, [r1], #4
    45c8:	4408      	add	r0, r1
    45ca:	bd10      	pop	{r4, pc}
    45cc:	21fc      	movs	r1, #252	; 0xfc
    45ce:	2018      	movs	r0, #24
    45d0:	f7ff fbd6 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45d4:	20000078 	.word	0x20000078

000045d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    45d8:	4801      	ldr	r0, [pc, #4]	; (45e0 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    45da:	7840      	ldrb	r0, [r0, #1]
    45dc:	4770      	bx	lr
    45de:	0000      	.short	0x0000
    45e0:	2000007c 	.word	0x2000007c

000045e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    45e4:	4801      	ldr	r0, [pc, #4]	; (45ec <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    45e6:	6840      	ldr	r0, [r0, #4]
    45e8:	4770      	bx	lr
    45ea:	0000      	.short	0x0000
    45ec:	2000007c 	.word	0x2000007c

000045f0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    45f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45f4:	460c      	mov	r4, r1
    45f6:	4607      	mov	r7, r0
    45f8:	4616      	mov	r6, r2
    45fa:	211c      	movs	r1, #28
    45fc:	4610      	mov	r0, r2
    45fe:	460d      	mov	r5, r1
    4600:	4622      	mov	r2, r4
    4602:	f008 ffce 	bl	d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    4606:	4680      	mov	r8, r0
    4608:	b157      	cbz	r7, 4620 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    460a:	4638      	mov	r0, r7
    460c:	4641      	mov	r1, r8
    460e:	4632      	mov	r2, r6
    4610:	462b      	mov	r3, r5
    4612:	9400      	str	r4, [sp, #0]
    4614:	f008 ff6a 	bl	d4ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4618:	4803      	ldr	r0, [pc, #12]	; (4628 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    461a:	6047      	str	r7, [r0, #4]
    461c:	7004      	strb	r4, [r0, #0]
    461e:	7046      	strb	r6, [r0, #1]
    4620:	4640      	mov	r0, r8
    4622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4626:	0000      	.short	0x0000
    4628:	2000007c 	.word	0x2000007c

0000462c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    462c:	4802      	ldr	r0, [pc, #8]	; (4638 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    462e:	7842      	ldrb	r2, [r0, #1]
    4630:	7801      	ldrb	r1, [r0, #0]
    4632:	6840      	ldr	r0, [r0, #4]
    4634:	f7ff bfdc 	b.w	45f0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4638:	2000007c 	.word	0x2000007c
    463c:	4909      	ldr	r1, [pc, #36]	; (4664 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    463e:	b510      	push	{r4, lr}
    4640:	4807      	ldr	r0, [pc, #28]	; (4660 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    4642:	6008      	str	r0, [r1, #0]
    4644:	4b08      	ldr	r3, [pc, #32]	; (4668 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    4646:	2011      	movs	r0, #17
    4648:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    464c:	2200      	movs	r2, #0
    464e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4652:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4656:	1c40      	adds	r0, r0, #1
    4658:	b2c0      	uxtb	r0, r0
    465a:	2814      	cmp	r0, #20
    465c:	d3f4      	bcc.n	4648 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    465e:	bd10      	pop	{r4, pc}
    4660:	fffe0000 	.word	0xfffe0000
    4664:	4001f508 	.word	0x4001f508
    4668:	4001f000 	.word	0x4001f000
    466c:	b570      	push	{r4, r5, r6, lr}
    466e:	2420      	movs	r4, #32
    4670:	2100      	movs	r1, #0
    4672:	2301      	movs	r3, #1
    4674:	fa20 f201 	lsr.w	r2, r0, r1
    4678:	07d2      	lsls	r2, r2, #31
    467a:	d020      	beq.n	46be <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    467c:	b24a      	sxtb	r2, r1
    467e:	2a00      	cmp	r2, #0
    4680:	db10      	blt.n	46a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    4682:	bf00      	nop
    4684:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4688:	ea4f 0686 	mov.w	r6, r6, lsl #2
    468c:	f002 051f 	and.w	r5, r2, #31
    4690:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4694:	fa03 f505 	lsl.w	r5, r3, r5
    4698:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    469c:	f3bf 8f4f 	dsb	sy
    46a0:	f3bf 8f6f 	isb	sy
    46a4:	db0b      	blt.n	46be <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    46a6:	f002 051f 	and.w	r5, r2, #31
    46aa:	ea4f 1252 	mov.w	r2, r2, lsr #5
    46ae:	ea4f 0282 	mov.w	r2, r2, lsl #2
    46b2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    46b6:	fa03 f505 	lsl.w	r5, r3, r5
    46ba:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    46be:	f101 0101 	add.w	r1, r1, #1
    46c2:	42a1      	cmp	r1, r4
    46c4:	d3d6      	bcc.n	4674 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    46c6:	bd70      	pop	{r4, r5, r6, pc}
    46c8:	b570      	push	{r4, r5, r6, lr}
    46ca:	0042      	lsls	r2, r0, #1
    46cc:	f04f 0100 	mov.w	r1, #0
    46d0:	d501      	bpl.n	46d6 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    46d2:	4a14      	ldr	r2, [pc, #80]	; (4724 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    46d4:	6011      	str	r1, [r2, #0]
    46d6:	f3c0 3280 	ubfx	r2, r0, #14, #1
    46da:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    46de:	429a      	cmp	r2, r3
    46e0:	d003      	beq.n	46ea <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    46e2:	2169      	movs	r1, #105	; 0x69
    46e4:	201b      	movs	r0, #27
    46e6:	f7ff fb4b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46ea:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    46ee:	d014      	beq.n	471a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    46f0:	4a0d      	ldr	r2, [pc, #52]	; (4728 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    46f2:	2001      	movs	r0, #1
    46f4:	6050      	str	r0, [r2, #4]
    46f6:	1e83      	subs	r3, r0, #2
    46f8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    46fc:	4a0b      	ldr	r2, [pc, #44]	; (472c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    46fe:	6090      	str	r0, [r2, #8]
    4700:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4704:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4708:	4c09      	ldr	r4, [pc, #36]	; (4730 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    470a:	6021      	str	r1, [r4, #0]
    470c:	1d25      	adds	r5, r4, #4
    470e:	6028      	str	r0, [r5, #0]
    4710:	6090      	str	r0, [r2, #8]
    4712:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4716:	6021      	str	r1, [r4, #0]
    4718:	6028      	str	r0, [r5, #0]
    471a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    471e:	f7ff bf8d 	b.w	463c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4722:	0000      	.short	0x0000
    4724:	4001e504 	.word	0x4001e504
    4728:	4000e000 	.word	0x4000e000
    472c:	4000f000 	.word	0x4000f000
    4730:	4000f500 	.word	0x4000f500

00004734 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4734:	b570      	push	{r4, r5, r6, lr}
    4736:	4c0a      	ldr	r4, [pc, #40]	; (4760 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4738:	460d      	mov	r5, r1
    473a:	6020      	str	r0, [r4, #0]
    473c:	f7ff ffc4 	bl	46c8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    4740:	6820      	ldr	r0, [r4, #0]
    4742:	f7ff ff93 	bl	466c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    4746:	f000 f883 	bl	4850 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    474a:	f7ff ff77 	bl	463c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    474e:	f009 f820 	bl	d792 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4752:	4628      	mov	r0, r5
    4754:	f000 f8b6 	bl	48c4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    475c:	f000 b8ce 	b.w	48fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4760:	20000084 	.word	0x20000084

00004764 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4764:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4768:	4c36      	ldr	r4, [pc, #216]	; (4844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    476a:	b082      	sub	sp, #8
    476c:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4770:	2601      	movs	r6, #1
    4772:	4835      	ldr	r0, [pc, #212]	; (4848 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4774:	f007 fe6b 	bl	c44e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4778:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4848 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    477c:	b920      	cbnz	r0, 4788 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    477e:	2600      	movs	r6, #0
    4780:	f109 0001 	add.w	r0, r9, #1
    4784:	f007 fe7a 	bl	c47c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4788:	f44f 7580 	mov.w	r5, #256	; 0x100
    478c:	f04f 0800 	mov.w	r8, #0
    4790:	1d2f      	adds	r7, r5, #4
    4792:	2101      	movs	r1, #1
    4794:	6061      	str	r1, [r4, #4]
    4796:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    479a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    479e:	9802      	ldr	r0, [sp, #8]
    47a0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    47a4:	6021      	str	r1, [r4, #0]
    47a6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 484c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    47aa:	e01c      	b.n	47e6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    47ac:	f8da 0000 	ldr.w	r0, [sl]
    47b0:	06c0      	lsls	r0, r0, #27
    47b2:	d518      	bpl.n	47e6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    47b4:	200e      	movs	r0, #14
    47b6:	f008 ffd8 	bl	d76a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    47ba:	f3ef 8010 	mrs	r0, PRIMASK
    47be:	9000      	str	r0, [sp, #0]
    47c0:	b672      	cpsid	i
    47c2:	2103      	movs	r1, #3
    47c4:	4620      	mov	r0, r4
    47c6:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    47ca:	4629      	mov	r1, r5
    47cc:	f008 ffda 	bl	d784 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47d0:	b930      	cbnz	r0, 47e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    47d2:	4639      	mov	r1, r7
    47d4:	4620      	mov	r0, r4
    47d6:	f008 ffd5 	bl	d784 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47da:	b908      	cbnz	r0, 47e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    47dc:	f7ff f916 	bl	3a0c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    47e0:	9800      	ldr	r0, [sp, #0]
    47e2:	b900      	cbnz	r0, 47e6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    47e4:	b662      	cpsie	i
    47e6:	4629      	mov	r1, r5
    47e8:	4620      	mov	r0, r4
    47ea:	f008 ffcb 	bl	d784 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47ee:	b928      	cbnz	r0, 47fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    47f0:	4639      	mov	r1, r7
    47f2:	4620      	mov	r0, r4
    47f4:	f008 ffc6 	bl	d784 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    47f8:	2800      	cmp	r0, #0
    47fa:	d0d7      	beq.n	47ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    47fc:	4639      	mov	r1, r7
    47fe:	4620      	mov	r0, r4
    4800:	f008 ffc0 	bl	d784 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4804:	2800      	cmp	r0, #0
    4806:	d1c4      	bne.n	4792 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    4808:	b136      	cbz	r6, 4818 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    480a:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    480e:	f109 0001 	add.w	r0, r9, #1
    4812:	f007 fe1c 	bl	c44e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4816:	e012      	b.n	483e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    4818:	f109 0001 	add.w	r0, r9, #1
    481c:	f007 fe17 	bl	c44e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4820:	2800      	cmp	r0, #0
    4822:	d1ad      	bne.n	4780 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4824:	2003      	movs	r0, #3
    4826:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    482a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    482e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4832:	200e      	movs	r0, #14
    4834:	f008 ff99 	bl	d76a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4838:	4803      	ldr	r0, [pc, #12]	; (4848 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    483a:	f007 fe1f 	bl	c47c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    483e:	2000      	movs	r0, #0
    4840:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4844:	4000e000 	.word	0x4000e000
    4848:	20000287 	.word	0x20000287
    484c:	e000ed10 	.word	0xe000ed10

00004850 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4850:	b510      	push	{r4, lr}
    4852:	4808      	ldr	r0, [pc, #32]	; (4874 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4854:	f007 fe0e 	bl	c474 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4858:	b108      	cbz	r0, 485e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    485a:	2125      	movs	r1, #37	; 0x25
    485c:	e006      	b.n	486c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    485e:	4805      	ldr	r0, [pc, #20]	; (4874 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4860:	1c40      	adds	r0, r0, #1
    4862:	f007 fe07 	bl	c474 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4866:	2800      	cmp	r0, #0
    4868:	d003      	beq.n	4872 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    486a:	2129      	movs	r1, #41	; 0x29
    486c:	201d      	movs	r0, #29
    486e:	f7ff fa87 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4872:	bd10      	pop	{r4, pc}
    4874:	20000287 	.word	0x20000287

00004878 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4878:	b570      	push	{r4, r5, r6, lr}
    487a:	4911      	ldr	r1, [pc, #68]	; (48c0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    487c:	680a      	ldr	r2, [r1, #0]
    487e:	b1ea      	cbz	r2, 48bc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4880:	2300      	movs	r3, #0
    4882:	461d      	mov	r5, r3
    4884:	2401      	movs	r4, #1
    4886:	684a      	ldr	r2, [r1, #4]
    4888:	1c52      	adds	r2, r2, #1
    488a:	604a      	str	r2, [r1, #4]
    488c:	2a0c      	cmp	r2, #12
    488e:	d300      	bcc.n	4892 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4890:	604d      	str	r5, [r1, #4]
    4892:	790e      	ldrb	r6, [r1, #4]
    4894:	fa04 f206 	lsl.w	r2, r4, r6
    4898:	680e      	ldr	r6, [r1, #0]
    489a:	4216      	tst	r6, r2
    489c:	d00b      	beq.n	48b6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    489e:	f3ef 8310 	mrs	r3, PRIMASK
    48a2:	b672      	cpsid	i
    48a4:	680c      	ldr	r4, [r1, #0]
    48a6:	4394      	bics	r4, r2
    48a8:	600c      	str	r4, [r1, #0]
    48aa:	b903      	cbnz	r3, 48ae <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    48ac:	b662      	cpsie	i
    48ae:	6849      	ldr	r1, [r1, #4]
    48b0:	6001      	str	r1, [r0, #0]
    48b2:	2000      	movs	r0, #0
    48b4:	bd70      	pop	{r4, r5, r6, pc}
    48b6:	1c5b      	adds	r3, r3, #1
    48b8:	2b0c      	cmp	r3, #12
    48ba:	d3e4      	bcc.n	4886 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    48bc:	2005      	movs	r0, #5
    48be:	bd70      	pop	{r4, r5, r6, pc}
    48c0:	20000088 	.word	0x20000088

000048c4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    48c4:	4802      	ldr	r0, [pc, #8]	; (48d0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    48c6:	2100      	movs	r1, #0
    48c8:	6001      	str	r1, [r0, #0]
    48ca:	6041      	str	r1, [r0, #4]
    48cc:	4770      	bx	lr
    48ce:	0000      	.short	0x0000
    48d0:	20000088 	.word	0x20000088

000048d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    48d4:	b510      	push	{r4, lr}
    48d6:	4c08      	ldr	r4, [pc, #32]	; (48f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    48d8:	7861      	ldrb	r1, [r4, #1]
    48da:	b109      	cbz	r1, 48e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    48dc:	200f      	movs	r0, #15
    48de:	bd10      	pop	{r4, pc}
    48e0:	f7ff f820 	bl	3924 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    48e4:	7020      	strb	r0, [r4, #0]
    48e6:	28ff      	cmp	r0, #255	; 0xff
    48e8:	d001      	beq.n	48ee <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    48ea:	2000      	movs	r0, #0
    48ec:	bd10      	pop	{r4, pc}
    48ee:	2176      	movs	r1, #118	; 0x76
    48f0:	201f      	movs	r0, #31
    48f2:	f7ff fa45 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f6:	0000      	.short	0x0000
    48f8:	20000090 	.word	0x20000090

000048fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    48fc:	4901      	ldr	r1, [pc, #4]	; (4904 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    48fe:	2000      	movs	r0, #0
    4900:	7048      	strb	r0, [r1, #1]
    4902:	4770      	bx	lr
    4904:	20000090 	.word	0x20000090

00004908 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4908:	4806      	ldr	r0, [pc, #24]	; (4924 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    490a:	4a07      	ldr	r2, [pc, #28]	; (4928 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    490c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    490e:	8852      	ldrh	r2, [r2, #2]
    4910:	4291      	cmp	r1, r2
    4912:	d104      	bne.n	491e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4914:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4918:	b108      	cbz	r0, 491e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    491a:	2000      	movs	r0, #0
    491c:	4770      	bx	lr
    491e:	2001      	movs	r0, #1
    4920:	4770      	bx	lr
    4922:	0000      	.short	0x0000
    4924:	200011c4 	.word	0x200011c4
    4928:	2000026c 	.word	0x2000026c

0000492c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    492c:	4901      	ldr	r1, [pc, #4]	; (4934 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    492e:	8048      	strh	r0, [r1, #2]
    4930:	4770      	bx	lr
    4932:	0000      	.short	0x0000
    4934:	2000026c 	.word	0x2000026c

00004938 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4938:	4808      	ldr	r0, [pc, #32]	; (495c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    493a:	4a09      	ldr	r2, [pc, #36]	; (4960 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    493c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    493e:	8852      	ldrh	r2, [r2, #2]
    4940:	4291      	cmp	r1, r2
    4942:	d109      	bne.n	4958 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4944:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4948:	8481      	strh	r1, [r0, #36]	; 0x24
    494a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    494e:	b119      	cbz	r1, 4958 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4950:	2100      	movs	r1, #0
    4952:	7001      	strb	r1, [r0, #0]
    4954:	2001      	movs	r0, #1
    4956:	4770      	bx	lr
    4958:	2000      	movs	r0, #0
    495a:	4770      	bx	lr
    495c:	200011c4 	.word	0x200011c4
    4960:	2000026c 	.word	0x2000026c

00004964 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4964:	4807      	ldr	r0, [pc, #28]	; (4984 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4966:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    496a:	2901      	cmp	r1, #1
    496c:	d007      	beq.n	497e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    496e:	2101      	movs	r1, #1
    4970:	7001      	strb	r1, [r0, #0]
    4972:	4805      	ldr	r0, [pc, #20]	; (4988 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4974:	4903      	ldr	r1, [pc, #12]	; (4984 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4976:	8800      	ldrh	r0, [r0, #0]
    4978:	8488      	strh	r0, [r1, #36]	; 0x24
    497a:	2001      	movs	r0, #1
    497c:	4770      	bx	lr
    497e:	2000      	movs	r0, #0
    4980:	4770      	bx	lr
    4982:	0000      	.short	0x0000
    4984:	200011c4 	.word	0x200011c4
    4988:	2000026c 	.word	0x2000026c

0000498c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    498c:	4906      	ldr	r1, [pc, #24]	; (49a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    498e:	4b07      	ldr	r3, [pc, #28]	; (49ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4990:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4992:	885b      	ldrh	r3, [r3, #2]
    4994:	429a      	cmp	r2, r3
    4996:	d105      	bne.n	49a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4998:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    499c:	b112      	cbz	r2, 49a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    499e:	6001      	str	r1, [r0, #0]
    49a0:	2001      	movs	r0, #1
    49a2:	4770      	bx	lr
    49a4:	2000      	movs	r0, #0
    49a6:	4770      	bx	lr
    49a8:	200011c4 	.word	0x200011c4
    49ac:	2000026c 	.word	0x2000026c

000049b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    49b0:	4909      	ldr	r1, [pc, #36]	; (49d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49b4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    49b8:	3bff      	subs	r3, #255	; 0xff
    49ba:	d002      	beq.n	49c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    49bc:	2100      	movs	r1, #0
    49be:	6001      	str	r1, [r0, #0]
    49c0:	e007      	b.n	49d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49c2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    49c6:	4904      	ldr	r1, [pc, #16]	; (49d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    49c8:	2a01      	cmp	r2, #1
    49ca:	d002      	beq.n	49d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    49cc:	6001      	str	r1, [r0, #0]
    49ce:	2001      	movs	r0, #1
    49d0:	4770      	bx	lr
    49d2:	2000      	movs	r0, #0
    49d4:	4770      	bx	lr
    49d6:	0000      	.short	0x0000
    49d8:	200011c4 	.word	0x200011c4

000049dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    49dc:	4901      	ldr	r1, [pc, #4]	; (49e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    49de:	8008      	strh	r0, [r1, #0]
    49e0:	4770      	bx	lr
    49e2:	0000      	.short	0x0000
    49e4:	2000026c 	.word	0x2000026c

000049e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    49e8:	4905      	ldr	r1, [pc, #20]	; (4a00 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    49ea:	2000      	movs	r0, #0
    49ec:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    49f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    49f4:	8488      	strh	r0, [r1, #36]	; 0x24
    49f6:	4903      	ldr	r1, [pc, #12]	; (4a04 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    49f8:	8008      	strh	r0, [r1, #0]
    49fa:	8048      	strh	r0, [r1, #2]
    49fc:	4770      	bx	lr
    49fe:	0000      	.short	0x0000
    4a00:	200011c4 	.word	0x200011c4
    4a04:	2000026c 	.word	0x2000026c
    4a08:	4905      	ldr	r1, [pc, #20]	; (4a20 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4a0a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a0c:	4282      	cmp	r2, r0
    4a0e:	d105      	bne.n	4a1c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4a10:	2000      	movs	r0, #0
    4a12:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a16:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a1a:	8488      	strh	r0, [r1, #36]	; 0x24
    4a1c:	4770      	bx	lr
    4a1e:	0000      	.short	0x0000
    4a20:	200011c4 	.word	0x200011c4

00004a24 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a24:	4a0a      	ldr	r2, [pc, #40]	; (4a50 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4a26:	b110      	cbz	r0, 4a2e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a28:	2801      	cmp	r0, #1
    4a2a:	d007      	beq.n	4a3c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4a2c:	e00e      	b.n	4a4c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a2e:	7850      	ldrb	r0, [r2, #1]
    4a30:	b160      	cbz	r0, 4a4c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a32:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4a36:	6008      	str	r0, [r1, #0]
    4a38:	88d0      	ldrh	r0, [r2, #6]
    4a3a:	e004      	b.n	4a46 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4a3c:	7810      	ldrb	r0, [r2, #0]
    4a3e:	b128      	cbz	r0, 4a4c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a40:	6890      	ldr	r0, [r2, #8]
    4a42:	6008      	str	r0, [r1, #0]
    4a44:	8990      	ldrh	r0, [r2, #12]
    4a46:	8088      	strh	r0, [r1, #4]
    4a48:	2001      	movs	r0, #1
    4a4a:	4770      	bx	lr
    4a4c:	2000      	movs	r0, #0
    4a4e:	4770      	bx	lr
    4a50:	20000289 	.word	0x20000289

00004a54 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4a54:	4a08      	ldr	r2, [pc, #32]	; (4a78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4a56:	2301      	movs	r3, #1
    4a58:	b138      	cbz	r0, 4a6a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4a5a:	2801      	cmp	r0, #1
    4a5c:	d104      	bne.n	4a68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4a5e:	7013      	strb	r3, [r2, #0]
    4a60:	6808      	ldr	r0, [r1, #0]
    4a62:	6090      	str	r0, [r2, #8]
    4a64:	8888      	ldrh	r0, [r1, #4]
    4a66:	8190      	strh	r0, [r2, #12]
    4a68:	4770      	bx	lr
    4a6a:	7053      	strb	r3, [r2, #1]
    4a6c:	6808      	ldr	r0, [r1, #0]
    4a6e:	f8c2 0002 	str.w	r0, [r2, #2]
    4a72:	8888      	ldrh	r0, [r1, #4]
    4a74:	80d0      	strh	r0, [r2, #6]
    4a76:	4770      	bx	lr
    4a78:	20000289 	.word	0x20000289

00004a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4a7c:	4906      	ldr	r1, [pc, #24]	; (4a98 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4a7e:	b110      	cbz	r0, 4a86 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4a80:	2801      	cmp	r0, #1
    4a82:	d002      	beq.n	4a8a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4a84:	e005      	b.n	4a92 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a86:	7848      	ldrb	r0, [r1, #1]
    4a88:	e000      	b.n	4a8c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4a8a:	7808      	ldrb	r0, [r1, #0]
    4a8c:	b108      	cbz	r0, 4a92 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a8e:	2001      	movs	r0, #1
    4a90:	4770      	bx	lr
    4a92:	2000      	movs	r0, #0
    4a94:	4770      	bx	lr
    4a96:	0000      	.short	0x0000
    4a98:	20000289 	.word	0x20000289

00004a9c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4a9c:	4901      	ldr	r1, [pc, #4]	; (4aa4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4a9e:	7448      	strb	r0, [r1, #17]
    4aa0:	4770      	bx	lr
    4aa2:	0000      	.short	0x0000
    4aa4:	20000a22 	.word	0x20000a22

00004aa8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4aa8:	b578      	push	{r3, r4, r5, r6, lr}
    4aaa:	4913      	ldr	r1, [pc, #76]	; (4af8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4aac:	7c4a      	ldrb	r2, [r1, #17]
    4aae:	b30a      	cbz	r2, 4af4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4ab0:	7c0a      	ldrb	r2, [r1, #16]
    4ab2:	f88d 2000 	strb.w	r2, [sp]
    4ab6:	9a00      	ldr	r2, [sp, #0]
    4ab8:	9200      	str	r2, [sp, #0]
    4aba:	f89d 2000 	ldrb.w	r2, [sp]
    4abe:	b1ca      	cbz	r2, 4af4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4ac0:	2300      	movs	r3, #0
    4ac2:	f101 0210 	add.w	r2, r1, #16
    4ac6:	241f      	movs	r4, #31
    4ac8:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4acc:	7c0e      	ldrb	r6, [r1, #16]
    4ace:	f88d 6000 	strb.w	r6, [sp]
    4ad2:	9e00      	ldr	r6, [sp, #0]
    4ad4:	9600      	str	r6, [sp, #0]
    4ad6:	f89d 6000 	ldrb.w	r6, [sp]
    4ada:	b14e      	cbz	r6, 4af0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4adc:	7013      	strb	r3, [r2, #0]
    4ade:	7043      	strb	r3, [r0, #1]
    4ae0:	7004      	strb	r4, [r0, #0]
    4ae2:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4ae6:	6046      	str	r6, [r0, #4]
    4ae8:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4aec:	6086      	str	r6, [r0, #8]
    4aee:	e7ed      	b.n	4acc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4af0:	2001      	movs	r0, #1
    4af2:	bd78      	pop	{r3, r4, r5, r6, pc}
    4af4:	2000      	movs	r0, #0
    4af6:	bd78      	pop	{r3, r4, r5, r6, pc}
    4af8:	20000a22 	.word	0x20000a22

00004afc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4afc:	b510      	push	{r4, lr}
    4afe:	4604      	mov	r4, r0
    4b00:	f000 f95c 	bl	4dbc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4b04:	b118      	cbz	r0, 4b0e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4b06:	21bd      	movs	r1, #189	; 0xbd
    4b08:	2027      	movs	r0, #39	; 0x27
    4b0a:	f7ff f939 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b0e:	4803      	ldr	r0, [pc, #12]	; (4b1c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4b10:	2101      	movs	r1, #1
    4b12:	f009 fa30 	bl	df76 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4b16:	4802      	ldr	r0, [pc, #8]	; (4b20 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4b18:	62c4      	str	r4, [r0, #44]	; 0x2c
    4b1a:	bd10      	pop	{r4, pc}
    4b1c:	20000a00 	.word	0x20000a00
    4b20:	200000ac 	.word	0x200000ac

00004b24 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4b24:	4901      	ldr	r1, [pc, #4]	; (4b2c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4b26:	2001      	movs	r0, #1
    4b28:	7188      	strb	r0, [r1, #6]
    4b2a:	4770      	bx	lr
    4b2c:	200000ac 	.word	0x200000ac

00004b30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b34:	4d66      	ldr	r5, [pc, #408]	; (4cd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    4b36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4b38:	782e      	ldrb	r6, [r5, #0]
    4b3a:	bbee      	cbnz	r6, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b3c:	b3e2      	cbz	r2, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b3e:	b3db      	cbz	r3, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b40:	b3d4      	cbz	r4, 4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4b42:	f105 0614 	add.w	r6, r5, #20
    4b46:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4b4a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4b4e:	2700      	movs	r7, #0
    4b50:	71af      	strb	r7, [r5, #6]
    4b52:	716f      	strb	r7, [r5, #5]
    4b54:	70ef      	strb	r7, [r5, #3]
    4b56:	70af      	strb	r7, [r5, #2]
    4b58:	712f      	strb	r7, [r5, #4]
    4b5a:	81af      	strh	r7, [r5, #12]
    4b5c:	81ef      	strh	r7, [r5, #14]
    4b5e:	f000 f971 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4b62:	4606      	mov	r6, r0
    4b64:	f000 f968 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4b68:	4604      	mov	r4, r0
    4b6a:	f006 fe91 	bl	b890 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4b6e:	f006 fb75 	bl	b25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4b72:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4b76:	f006 ff11 	bl	b99c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4b7a:	f104 0018 	add.w	r0, r4, #24
    4b7e:	f006 ffeb 	bl	bb58 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4b82:	6920      	ldr	r0, [r4, #16]
    4b84:	f006 ffde 	bl	bb44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4b88:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4b8c:	f007 f802 	bl	bb94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4b90:	f04f 0b01 	mov.w	fp, #1
    4b94:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    4b98:	2000      	movs	r0, #0
    4b9a:	f006 fd3d 	bl	b618 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4b9e:	2800      	cmp	r0, #0
    4ba0:	d07e      	beq.n	4ca0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    4ba2:	484c      	ldr	r0, [pc, #304]	; (4cd4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    4ba4:	f006 fdac 	bl	b700 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4ba8:	8820      	ldrh	r0, [r4, #0]
    4baa:	f7ff fcfd 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4bae:	6328      	str	r0, [r5, #48]	; 0x30
    4bb0:	8820      	ldrh	r0, [r4, #0]
    4bb2:	f7ff fce3 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4bb6:	e000      	b.n	4bba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    4bb8:	e00a      	b.n	4bd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    4bba:	6368      	str	r0, [r5, #52]	; 0x34
    4bbc:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    4bc0:	f88d 0000 	strb.w	r0, [sp]
    4bc4:	9800      	ldr	r0, [sp, #0]
    4bc6:	9000      	str	r0, [sp, #0]
    4bc8:	f89d 0000 	ldrb.w	r0, [sp]
    4bcc:	b118      	cbz	r0, 4bd6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    4bce:	e012      	b.n	4bf6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4bd0:	f44f 718a 	mov.w	r1, #276	; 0x114
    4bd4:	e079      	b.n	4cca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
    4bd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4bd8:	b168      	cbz	r0, 4bf6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4bda:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    4bdc:	88b1      	ldrh	r1, [r6, #4]
    4bde:	4288      	cmp	r0, r1
    4be0:	d109      	bne.n	4bf6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4be2:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    4be6:	2201      	movs	r2, #1
    4be8:	4408      	add	r0, r1
    4bea:	8670      	strh	r0, [r6, #50]	; 0x32
    4bec:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    4bf0:	6f21      	ldr	r1, [r4, #112]	; 0x70
    4bf2:	f7fd fd67 	bl	26c4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4bf6:	f106 0168 	add.w	r1, r6, #104	; 0x68
    4bfa:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4cd8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4bfe:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4c02:	f109 0808 	add.w	r8, r9, #8
    4c06:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4c0a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    4c0c:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4c10:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4c12:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4c16:	f000 f983 	bl	4f20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    4c1a:	4601      	mov	r1, r0
    4c1c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4c1e:	46ba      	mov	sl, r7
    4c20:	f008 ff94 	bl	db4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c24:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4c26:	4281      	cmp	r1, r0
    4c28:	d200      	bcs.n	4c2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    4c2a:	4608      	mov	r0, r1
    4c2c:	7228      	strb	r0, [r5, #8]
    4c2e:	46a8      	mov	r8, r5
    4c30:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4c34:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4c36:	7cf7      	ldrb	r7, [r6, #19]
    4c38:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4c3a:	2908      	cmp	r1, #8
    4c3c:	d100      	bne.n	4c40 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4c3e:	2104      	movs	r1, #4
    4c40:	f008 ff84 	bl	db4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c44:	b90f      	cbnz	r7, 4c4a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    4c46:	1d00      	adds	r0, r0, #4
    4c48:	b280      	uxth	r0, r0
    4c4a:	4285      	cmp	r5, r0
    4c4c:	d200      	bcs.n	4c50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    4c4e:	4628      	mov	r0, r5
    4c50:	b2c0      	uxtb	r0, r0
    4c52:	f888 0009 	strb.w	r0, [r8, #9]
    4c56:	7cf2      	ldrb	r2, [r6, #19]
    4c58:	b102      	cbz	r2, 4c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    4c5a:	2204      	movs	r2, #4
    4c5c:	4410      	add	r0, r2
    4c5e:	f888 0007 	strb.w	r0, [r8, #7]
    4c62:	7cb1      	ldrb	r1, [r6, #18]
    4c64:	b1a1      	cbz	r1, 4c90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
    4c66:	491c      	ldr	r1, [pc, #112]	; (4cd8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4c68:	3108      	adds	r1, #8
    4c6a:	f881 b018 	strb.w	fp, [r1, #24]
    4c6e:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
    4c72:	e9c1 0204 	strd	r0, r2, [r1, #16]
    4c76:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4c7a:	f008 fe14 	bl	d8a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4c7e:	4916      	ldr	r1, [pc, #88]	; (4cd8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4c80:	4603      	mov	r3, r0
    4c82:	22fb      	movs	r2, #251	; 0xfb
    4c84:	3108      	adds	r1, #8
    4c86:	2000      	movs	r0, #0
    4c88:	f006 fb32 	bl	b2f0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4c8c:	f006 fb66 	bl	b35c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4c90:	2001      	movs	r0, #1
    4c92:	f000 fb95 	bl	53c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    4c96:	4811      	ldr	r0, [pc, #68]	; (4cdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    4c98:	6800      	ldr	r0, [r0, #0]
    4c9a:	2803      	cmp	r0, #3
    4c9c:	d013      	beq.n	4cc6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    4c9e:	e000      	b.n	4ca2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    4ca0:	e00f      	b.n	4cc2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
    4ca2:	280b      	cmp	r0, #11
    4ca4:	d00f      	beq.n	4cc6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    4ca6:	4648      	mov	r0, r9
    4ca8:	f840 af52 	str.w	sl, [r0, #82]!
    4cac:	f8c0 a004 	str.w	sl, [r0, #4]
    4cb0:	4809      	ldr	r0, [pc, #36]	; (4cd8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4cb2:	88b1      	ldrh	r1, [r6, #4]
    4cb4:	3052      	adds	r0, #82	; 0x52
    4cb6:	8041      	strh	r1, [r0, #2]
    4cb8:	8821      	ldrh	r1, [r4, #0]
    4cba:	8001      	strh	r1, [r0, #0]
    4cbc:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4cc0:	7101      	strb	r1, [r0, #4]
    4cc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cc6:	f240 11c1 	movw	r1, #449	; 0x1c1
    4cca:	2027      	movs	r0, #39	; 0x27
    4ccc:	f7ff f858 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cd0:	200000ac 	.word	0x200000ac
    4cd4:	00005544 	.word	0x00005544
    4cd8:	200009d0 	.word	0x200009d0
    4cdc:	40001550 	.word	0x40001550

00004ce0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ce4:	4605      	mov	r5, r0
    4ce6:	f000 f8ad 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4cea:	4e33      	ldr	r6, [pc, #204]	; (4db8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4cec:	4604      	mov	r4, r0
    4cee:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4cf0:	7847      	ldrb	r7, [r0, #1]
    4cf2:	b10d      	cbz	r5, 4cf8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4cf4:	2d01      	cmp	r5, #1
    4cf6:	d103      	bne.n	4d00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4cf8:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4cfa:	f007 fd7a 	bl	c7f2 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4cfe:	7070      	strb	r0, [r6, #1]
    4d00:	7870      	ldrb	r0, [r6, #1]
    4d02:	f04f 0800 	mov.w	r8, #0
    4d06:	f04f 0901 	mov.w	r9, #1
    4d0a:	b150      	cbz	r0, 4d22 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4d0c:	2801      	cmp	r0, #1
    4d0e:	d01a      	beq.n	4d46 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4d10:	2802      	cmp	r0, #2
    4d12:	d034      	beq.n	4d7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4d14:	2803      	cmp	r0, #3
    4d16:	d048      	beq.n	4daa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4d18:	f240 4115 	movw	r1, #1045	; 0x415
    4d1c:	2027      	movs	r0, #39	; 0x27
    4d1e:	f7ff f82f 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d22:	2d01      	cmp	r5, #1
    4d24:	d032      	beq.n	4d8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d26:	f000 f8e7 	bl	4ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4d2a:	4639      	mov	r1, r7
    4d2c:	2201      	movs	r2, #1
    4d2e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d30:	f008 fa3d 	bl	d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d34:	e028      	b.n	4d88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4d36:	bf00      	nop
    4d38:	f884 8008 	strb.w	r8, [r4, #8]
    4d3c:	e031      	b.n	4da2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d3e:	bf00      	nop
    4d40:	f884 9008 	strb.w	r9, [r4, #8]
    4d44:	e02d      	b.n	4da2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d46:	2d01      	cmp	r5, #1
    4d48:	d008      	beq.n	4d5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4d4a:	f000 f8d5 	bl	4ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4d4e:	4639      	mov	r1, r7
    4d50:	2200      	movs	r2, #0
    4d52:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d54:	f008 fa2b 	bl	d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d58:	2d02      	cmp	r5, #2
    4d5a:	d00b      	beq.n	4d74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d5c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4d60:	1c40      	adds	r0, r0, #1
    4d62:	f141 0100 	adc.w	r1, r1, #0
    4d66:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4d6a:	7a20      	ldrb	r0, [r4, #8]
    4d6c:	2801      	cmp	r0, #1
    4d6e:	d003      	beq.n	4d78 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4d70:	f884 9008 	strb.w	r9, [r4, #8]
    4d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d78:	f884 8008 	strb.w	r8, [r4, #8]
    4d7c:	e7fa      	b.n	4d74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d7e:	2d01      	cmp	r5, #1
    4d80:	d004      	beq.n	4d8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d82:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d84:	f008 fc4d 	bl	d622 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d88:	2d02      	cmp	r5, #2
    4d8a:	d0f3      	beq.n	4d74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d8c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4d90:	1c40      	adds	r0, r0, #1
    4d92:	f141 0100 	adc.w	r1, r1, #0
    4d96:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4d9a:	7a20      	ldrb	r0, [r4, #8]
    4d9c:	2801      	cmp	r0, #1
    4d9e:	d1cf      	bne.n	4d40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4da0:	e7ca      	b.n	4d38 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4da2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4da6:	f001 b92b 	b.w	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4daa:	2d01      	cmp	r5, #1
    4dac:	d0e2      	beq.n	4d74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dae:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4db0:	f008 fc37 	bl	d622 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4db4:	e7f5      	b.n	4da2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4db6:	0000      	.short	0x0000
    4db8:	200000ac 	.word	0x200000ac

00004dbc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4dbc:	4804      	ldr	r0, [pc, #16]	; (4dd0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4dbe:	7800      	ldrb	r0, [r0, #0]
    4dc0:	b108      	cbz	r0, 4dc6 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4dc2:	200c      	movs	r0, #12
    4dc4:	4770      	bx	lr
    4dc6:	4903      	ldr	r1, [pc, #12]	; (4dd4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4dc8:	2000      	movs	r0, #0
    4dca:	7448      	strb	r0, [r1, #17]
    4dcc:	4770      	bx	lr
    4dce:	0000      	.short	0x0000
    4dd0:	200000ac 	.word	0x200000ac
    4dd4:	20000a22 	.word	0x20000a22

00004dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4dd8:	4812      	ldr	r0, [pc, #72]	; (4e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    4dda:	b508      	push	{r3, lr}
    4ddc:	7801      	ldrb	r1, [r0, #0]
    4dde:	b139      	cbz	r1, 4df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    4de0:	7800      	ldrb	r0, [r0, #0]
    4de2:	2801      	cmp	r0, #1
    4de4:	d006      	beq.n	4df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4de6:	f240 11d9 	movw	r1, #473	; 0x1d9
    4dea:	2027      	movs	r0, #39	; 0x27
    4dec:	f7fe ffc8 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4df0:	f000 f9ce 	bl	5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    4df4:	f000 f820 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4df8:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    4dfc:	f88d 1000 	strb.w	r1, [sp]
    4e00:	9900      	ldr	r1, [sp, #0]
    4e02:	9100      	str	r1, [sp, #0]
    4e04:	f89d 1000 	ldrb.w	r1, [sp]
    4e08:	2900      	cmp	r1, #0
    4e0a:	d10a      	bne.n	4e22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4e0c:	6f01      	ldr	r1, [r0, #112]	; 0x70
    4e0e:	2900      	cmp	r1, #0
    4e10:	d007      	beq.n	4e22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4e12:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    4e16:	2200      	movs	r2, #0
    4e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4e1c:	4611      	mov	r1, r2
    4e1e:	f7fd bc51 	b.w	26c4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4e22:	bd08      	pop	{r3, pc}
    4e24:	200000ac 	.word	0x200000ac
    4e28:	4a02      	ldr	r2, [pc, #8]	; (4e34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4e2a:	8993      	ldrh	r3, [r2, #12]
    4e2c:	4303      	orrs	r3, r0
    4e2e:	8193      	strh	r3, [r2, #12]
    4e30:	6952      	ldr	r2, [r2, #20]
    4e32:	4710      	bx	r2
    4e34:	200000ac 	.word	0x200000ac
    4e38:	4801      	ldr	r0, [pc, #4]	; (4e40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4e3a:	6840      	ldr	r0, [r0, #4]
    4e3c:	4770      	bx	lr
    4e3e:	0000      	.short	0x0000
    4e40:	200000e4 	.word	0x200000e4
    4e44:	4801      	ldr	r0, [pc, #4]	; (4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    4e46:	6840      	ldr	r0, [r0, #4]
    4e48:	3078      	adds	r0, #120	; 0x78
    4e4a:	4770      	bx	lr
    4e4c:	200000e4 	.word	0x200000e4
    4e50:	4a01      	ldr	r2, [pc, #4]	; (4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    4e52:	2100      	movs	r1, #0
    4e54:	6952      	ldr	r2, [r2, #20]
    4e56:	4710      	bx	r2
    4e58:	200000ac 	.word	0x200000ac
    4e5c:	b570      	push	{r4, r5, r6, lr}
    4e5e:	f7ff fff1 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4e62:	4604      	mov	r4, r0
    4e64:	f7ff ffe8 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4e68:	4605      	mov	r5, r0
    4e6a:	4621      	mov	r1, r4
    4e6c:	f008 ff36 	bl	dcdc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4e70:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4e74:	2901      	cmp	r1, #1
    4e76:	d114      	bne.n	4ea2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4e78:	2800      	cmp	r0, #0
    4e7a:	d012      	beq.n	4ea2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4e7c:	4909      	ldr	r1, [pc, #36]	; (4ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    4e7e:	2001      	movs	r0, #1
    4e80:	684a      	ldr	r2, [r1, #4]
    4e82:	8829      	ldrh	r1, [r5, #0]
    4e84:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    4e88:	7a61      	ldrb	r1, [r4, #9]
    4e8a:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    4e8e:	7aa1      	ldrb	r1, [r4, #10]
    4e90:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    4e94:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    4e98:	7010      	strb	r0, [r2, #0]
    4e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e9e:	f001 b8af 	b.w	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4ea2:	bd70      	pop	{r4, r5, r6, pc}
    4ea4:	200000e4 	.word	0x200000e4
    4ea8:	b570      	push	{r4, r5, r6, lr}
    4eaa:	4605      	mov	r5, r0
    4eac:	2901      	cmp	r1, #1
    4eae:	d81c      	bhi.n	4eea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4eb0:	4c10      	ldr	r4, [pc, #64]	; (4ef4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    4eb2:	69a1      	ldr	r1, [r4, #24]
    4eb4:	4788      	blx	r1
    4eb6:	b1c0      	cbz	r0, 4eea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4eb8:	7960      	ldrb	r0, [r4, #5]
    4eba:	b9b0      	cbnz	r0, 4eea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ebc:	2d01      	cmp	r5, #1
    4ebe:	d116      	bne.n	4eee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4ec0:	f104 0010 	add.w	r0, r4, #16
    4ec4:	7800      	ldrb	r0, [r0, #0]
    4ec6:	06c1      	lsls	r1, r0, #27
    4ec8:	d405      	bmi.n	4ed6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4eca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4ecc:	7809      	ldrb	r1, [r1, #0]
    4ece:	06c9      	lsls	r1, r1, #27
    4ed0:	d401      	bmi.n	4ed6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4ed2:	2101      	movs	r1, #1
    4ed4:	e000      	b.n	4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    4ed6:	2100      	movs	r1, #0
    4ed8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4eda:	b91a      	cbnz	r2, 4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4edc:	8962      	ldrh	r2, [r4, #10]
    4ede:	b10a      	cbz	r2, 4ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4ee0:	06c0      	lsls	r0, r0, #27
    4ee2:	d502      	bpl.n	4eea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ee4:	89a0      	ldrh	r0, [r4, #12]
    4ee6:	4301      	orrs	r1, r0
    4ee8:	d001      	beq.n	4eee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4eea:	2001      	movs	r0, #1
    4eec:	bd70      	pop	{r4, r5, r6, pc}
    4eee:	2000      	movs	r0, #0
    4ef0:	bd70      	pop	{r4, r5, r6, pc}
    4ef2:	0000      	.short	0x0000
    4ef4:	200000ac 	.word	0x200000ac
    4ef8:	b510      	push	{r4, lr}
    4efa:	4c08      	ldr	r4, [pc, #32]	; (4f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    4efc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4efe:	b138      	cbz	r0, 4f10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4f00:	8962      	ldrh	r2, [r4, #10]
    4f02:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4f04:	1cd2      	adds	r2, r2, #3
    4f06:	f007 fb4b 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f0c:	6260      	str	r0, [r4, #36]	; 0x24
    4f0e:	bd10      	pop	{r4, pc}
    4f10:	f240 415b 	movw	r1, #1115	; 0x45b
    4f14:	2027      	movs	r0, #39	; 0x27
    4f16:	f7fe ff33 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f1a:	0000      	.short	0x0000
    4f1c:	200000ac 	.word	0x200000ac
    4f20:	b510      	push	{r4, lr}
    4f22:	f7ff ff89 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4f26:	4604      	mov	r4, r0
    4f28:	f7ff ff8c 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f2c:	7b41      	ldrb	r1, [r0, #13]
    4f2e:	4a0a      	ldr	r2, [pc, #40]	; (4f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    4f30:	2924      	cmp	r1, #36	; 0x24
    4f32:	d008      	beq.n	4f46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4f34:	7b80      	ldrb	r0, [r0, #14]
    4f36:	2824      	cmp	r0, #36	; 0x24
    4f38:	d005      	beq.n	4f46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4f3a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4f3e:	2804      	cmp	r0, #4
    4f40:	d100      	bne.n	4f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f42:	2008      	movs	r0, #8
    4f44:	bd10      	pop	{r4, pc}
    4f46:	6850      	ldr	r0, [r2, #4]
    4f48:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    4f4c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f54:	f008 bcb5 	b.w	d8c2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    4f58:	200000e4 	.word	0x200000e4
    4f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f60:	4689      	mov	r9, r1
    4f62:	4606      	mov	r6, r0
    4f64:	f7ff ff6e 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f68:	4c58      	ldr	r4, [pc, #352]	; (50cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    4f6a:	2700      	movs	r7, #0
    4f6c:	4605      	mov	r5, r0
    4f6e:	f88d 7000 	strb.w	r7, [sp]
    4f72:	7820      	ldrb	r0, [r4, #0]
    4f74:	2802      	cmp	r0, #2
    4f76:	d004      	beq.n	4f82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    4f78:	f240 41ba 	movw	r1, #1210	; 0x4ba
    4f7c:	2027      	movs	r0, #39	; 0x27
    4f7e:	f7fe feff 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f82:	7ba0      	ldrb	r0, [r4, #14]
    4f84:	0640      	lsls	r0, r0, #25
    4f86:	d406      	bmi.n	4f96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    4f88:	2040      	movs	r0, #64	; 0x40
    4f8a:	f7ff ff61 	bl	4e50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    4f8e:	89e0      	ldrh	r0, [r4, #14]
    4f90:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4f94:	81e0      	strh	r0, [r4, #14]
    4f96:	7ce8      	ldrb	r0, [r5, #19]
    4f98:	f04f 0801 	mov.w	r8, #1
    4f9c:	b3c6      	cbz	r6, 5010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    4f9e:	f006 fa0d 	bl	b3bc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4fa2:	f006 f9f1 	bl	b388 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4fa6:	b968      	cbnz	r0, 4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4fa8:	7ce8      	ldrb	r0, [r5, #19]
    4faa:	b158      	cbz	r0, 4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4fac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fae:	7841      	ldrb	r1, [r0, #1]
    4fb0:	b141      	cbz	r1, 4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4fb2:	7800      	ldrb	r0, [r0, #0]
    4fb4:	7a29      	ldrb	r1, [r5, #8]
    4fb6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4fba:	4288      	cmp	r0, r1
    4fbc:	d102      	bne.n	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4fbe:	f884 8002 	strb.w	r8, [r4, #2]
    4fc2:	e064      	b.n	508e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    4fc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fc6:	7841      	ldrb	r1, [r0, #1]
    4fc8:	8161      	strh	r1, [r4, #10]
    4fca:	b121      	cbz	r1, 4fd6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    4fcc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4fce:	f008 faf5 	bl	d5bc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4fd2:	62a0      	str	r0, [r4, #40]	; 0x28
    4fd4:	e000      	b.n	4fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    4fd6:	62a7      	str	r7, [r4, #40]	; 0x28
    4fd8:	89e0      	ldrh	r0, [r4, #14]
    4fda:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4fde:	81e0      	strh	r0, [r4, #14]
    4fe0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4fe2:	79e9      	ldrb	r1, [r5, #7]
    4fe4:	7800      	ldrb	r0, [r0, #0]
    4fe6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4fea:	4288      	cmp	r0, r1
    4fec:	d005      	beq.n	4ffa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    4fee:	f000 f963 	bl	52b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    4ff2:	89e0      	ldrh	r0, [r4, #14]
    4ff4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4ff8:	81e0      	strh	r0, [r4, #14]
    4ffa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ffc:	7a29      	ldrb	r1, [r5, #8]
    4ffe:	7800      	ldrb	r0, [r0, #0]
    5000:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5004:	4288      	cmp	r0, r1
    5006:	d10e      	bne.n	5026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5008:	4668      	mov	r0, sp
    500a:	f000 f917 	bl	523c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    500e:	e00a      	b.n	5026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5010:	e7ff      	b.n	5012 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    5012:	b108      	cbz	r0, 5018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    5014:	f006 f9cc 	bl	b3b0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5018:	78e0      	ldrb	r0, [r4, #3]
    501a:	1c40      	adds	r0, r0, #1
    501c:	70e0      	strb	r0, [r4, #3]
    501e:	89e0      	ldrh	r0, [r4, #14]
    5020:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5024:	81e0      	strh	r0, [r4, #14]
    5026:	7ca8      	ldrb	r0, [r5, #18]
    5028:	b1a0      	cbz	r0, 5054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    502a:	f7ff ff05 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    502e:	4928      	ldr	r1, [pc, #160]	; (50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5030:	f881 8018 	strb.w	r8, [r1, #24]
    5034:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    5038:	e9c1 2304 	strd	r2, r3, [r1, #16]
    503c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5040:	f008 fc31 	bl	d8a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5044:	4603      	mov	r3, r0
    5046:	22fb      	movs	r2, #251	; 0xfb
    5048:	4921      	ldr	r1, [pc, #132]	; (50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    504a:	2000      	movs	r0, #0
    504c:	f006 f950 	bl	b2f0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5050:	f006 f984 	bl	b35c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5054:	4d1e      	ldr	r5, [pc, #120]	; (50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5056:	354a      	adds	r5, #74	; 0x4a
    5058:	f1b9 0f00 	cmp.w	r9, #0
    505c:	d104      	bne.n	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    505e:	78e1      	ldrb	r1, [r4, #3]
    5060:	2001      	movs	r0, #1
    5062:	f7ff ff21 	bl	4ea8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5066:	b1b0      	cbz	r0, 5096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    5068:	f006 fd48 	bl	bafc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    506c:	f89d 0000 	ldrb.w	r0, [sp]
    5070:	b110      	cbz	r0, 5078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    5072:	2000      	movs	r0, #0
    5074:	f7ff fe34 	bl	4ce0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5078:	b136      	cbz	r6, 5088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    507a:	70e7      	strb	r7, [r4, #3]
    507c:	7968      	ldrb	r0, [r5, #5]
    507e:	1c40      	adds	r0, r0, #1
    5080:	7168      	strb	r0, [r5, #5]
    5082:	f7ff feeb 	bl	4e5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5086:	e002      	b.n	508e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5088:	79a8      	ldrb	r0, [r5, #6]
    508a:	1c40      	adds	r0, r0, #1
    508c:	71a8      	strb	r0, [r5, #6]
    508e:	f000 f87f 	bl	5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5096:	f89d 0000 	ldrb.w	r0, [sp]
    509a:	b110      	cbz	r0, 50a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    509c:	2001      	movs	r0, #1
    509e:	f7ff fe1f 	bl	4ce0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50a2:	2000      	movs	r0, #0
    50a4:	f000 f98c 	bl	53c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    50a8:	f89d 0000 	ldrb.w	r0, [sp]
    50ac:	b110      	cbz	r0, 50b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    50ae:	2002      	movs	r0, #2
    50b0:	f7ff fe16 	bl	4ce0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50b4:	b136      	cbz	r6, 50c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    50b6:	70e7      	strb	r7, [r4, #3]
    50b8:	7968      	ldrb	r0, [r5, #5]
    50ba:	1c40      	adds	r0, r0, #1
    50bc:	7168      	strb	r0, [r5, #5]
    50be:	f7ff fecd 	bl	4e5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    50c2:	e7e6      	b.n	5092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    50c4:	79a8      	ldrb	r0, [r5, #6]
    50c6:	1c40      	adds	r0, r0, #1
    50c8:	71a8      	strb	r0, [r5, #6]
    50ca:	e7e2      	b.n	5092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    50cc:	200000ac 	.word	0x200000ac
    50d0:	200009d8 	.word	0x200009d8
    50d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50d8:	4688      	mov	r8, r1
    50da:	4681      	mov	r9, r0
    50dc:	f7ff feb2 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    50e0:	4d29      	ldr	r5, [pc, #164]	; (5188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    50e2:	4604      	mov	r4, r0
    50e4:	7828      	ldrb	r0, [r5, #0]
    50e6:	2801      	cmp	r0, #1
    50e8:	d004      	beq.n	50f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    50ea:	f240 416a 	movw	r1, #1130	; 0x46a
    50ee:	2027      	movs	r0, #39	; 0x27
    50f0:	f7fe fe46 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50f4:	7860      	ldrb	r0, [r4, #1]
    50f6:	2600      	movs	r6, #0
    50f8:	2701      	movs	r7, #1
    50fa:	b120      	cbz	r0, 5106 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    50fc:	7066      	strb	r6, [r4, #1]
    50fe:	2100      	movs	r1, #0
    5100:	2004      	movs	r0, #4
    5102:	f7ff fe91 	bl	4e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5106:	6a29      	ldr	r1, [r5, #32]
    5108:	7808      	ldrb	r0, [r1, #0]
    510a:	43c0      	mvns	r0, r0
    510c:	0780      	lsls	r0, r0, #30
    510e:	d109      	bne.n	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5110:	79a0      	ldrb	r0, [r4, #6]
    5112:	bb88      	cbnz	r0, 5178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5114:	2002      	movs	r0, #2
    5116:	f7ff fe87 	bl	4e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    511a:	6a28      	ldr	r0, [r5, #32]
    511c:	7800      	ldrb	r0, [r0, #0]
    511e:	43c0      	mvns	r0, r0
    5120:	0780      	lsls	r0, r0, #30
    5122:	d029      	beq.n	5178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5124:	6a28      	ldr	r0, [r5, #32]
    5126:	7840      	ldrb	r0, [r0, #1]
    5128:	b110      	cbz	r0, 5130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    512a:	2002      	movs	r0, #2
    512c:	71a0      	strb	r0, [r4, #6]
    512e:	e000      	b.n	5132 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5130:	71a7      	strb	r7, [r4, #6]
    5132:	7ce0      	ldrb	r0, [r4, #19]
    5134:	b1a0      	cbz	r0, 5160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    5136:	f7ff fe7f 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    513a:	4914      	ldr	r1, [pc, #80]	; (518c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    513c:	7a6d      	ldrb	r5, [r5, #9]
    513e:	760e      	strb	r6, [r1, #24]
    5140:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    5144:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5148:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    514c:	f008 fbab 	bl	d8a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5150:	4603      	mov	r3, r0
    5152:	462a      	mov	r2, r5
    5154:	490d      	ldr	r1, [pc, #52]	; (518c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5156:	2001      	movs	r0, #1
    5158:	f006 f8ca 	bl	b2f0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    515c:	f006 f8fe 	bl	b35c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5160:	ea38 0009 	bics.w	r0, r8, r9
    5164:	d004      	beq.n	5170 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    5166:	2100      	movs	r1, #0
    5168:	4608      	mov	r0, r1
    516a:	f7ff fe9d 	bl	4ea8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    516e:	b128      	cbz	r0, 517c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    5170:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5174:	f000 b80c 	b.w	5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5178:	2003      	movs	r0, #3
    517a:	e7d7      	b.n	512c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    517c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5180:	2000      	movs	r0, #0
    5182:	f000 b8df 	b.w	5344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    5186:	0000      	.short	0x0000
    5188:	200000ac 	.word	0x200000ac
    518c:	200009d8 	.word	0x200009d8
    5190:	b510      	push	{r4, lr}
    5192:	f006 f9a5 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5196:	f006 f861 	bl	b25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    519a:	4c0d      	ldr	r4, [pc, #52]	; (51d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    519c:	89e0      	ldrh	r0, [r4, #14]
    519e:	f7ff fe57 	bl	4e50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    51a2:	69e2      	ldr	r2, [r4, #28]
    51a4:	7961      	ldrb	r1, [r4, #5]
    51a6:	78a0      	ldrb	r0, [r4, #2]
    51a8:	4790      	blx	r2
    51aa:	480a      	ldr	r0, [pc, #40]	; (51d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    51ac:	7c40      	ldrb	r0, [r0, #17]
    51ae:	b158      	cbz	r0, 51c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    51b0:	4808      	ldr	r0, [pc, #32]	; (51d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    51b2:	3852      	subs	r0, #82	; 0x52
    51b4:	f850 1f52 	ldr.w	r1, [r0, #82]!
    51b8:	6081      	str	r1, [r0, #8]
    51ba:	6841      	ldr	r1, [r0, #4]
    51bc:	60c1      	str	r1, [r0, #12]
    51be:	4805      	ldr	r0, [pc, #20]	; (51d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    51c0:	2101      	movs	r1, #1
    51c2:	7401      	strb	r1, [r0, #16]
    51c4:	f000 ff1c 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    51c8:	2000      	movs	r0, #0
    51ca:	7020      	strb	r0, [r4, #0]
    51cc:	bd10      	pop	{r4, pc}
    51ce:	0000      	.short	0x0000
    51d0:	200000ac 	.word	0x200000ac
    51d4:	20000a22 	.word	0x20000a22
    51d8:	4808      	ldr	r0, [pc, #32]	; (51fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    51da:	b510      	push	{r4, lr}
    51dc:	7800      	ldrb	r0, [r0, #0]
    51de:	2802      	cmp	r0, #2
    51e0:	d004      	beq.n	51ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    51e2:	f240 2111 	movw	r1, #529	; 0x211
    51e6:	2027      	movs	r0, #39	; 0x27
    51e8:	f7fe fdca 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ec:	4904      	ldr	r1, [pc, #16]	; (5200 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    51ee:	2001      	movs	r0, #1
    51f0:	71c8      	strb	r0, [r1, #7]
    51f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51f6:	f7ff bfcb 	b.w	5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    51fa:	0000      	.short	0x0000
    51fc:	200000ac 	.word	0x200000ac
    5200:	20000a22 	.word	0x20000a22
    5204:	b430      	push	{r4, r5}
    5206:	4b0c      	ldr	r3, [pc, #48]	; (5238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    5208:	b942      	cbnz	r2, 521c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    520a:	79da      	ldrb	r2, [r3, #7]
    520c:	2aff      	cmp	r2, #255	; 0xff
    520e:	d105      	bne.n	521c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    5210:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5214:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5218:	42a2      	cmp	r2, r4
    521a:	d00b      	beq.n	5234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    521c:	b131      	cbz	r1, 522c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    521e:	79da      	ldrb	r2, [r3, #7]
    5220:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5224:	bc30      	pop	{r4, r5}
    5226:	4610      	mov	r0, r2
    5228:	f006 bca0 	b.w	bb6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    522c:	22ff      	movs	r2, #255	; 0xff
    522e:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5232:	e7f7      	b.n	5224 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5234:	bc30      	pop	{r4, r5}
    5236:	4770      	bx	lr
    5238:	200000ac 	.word	0x200000ac
    523c:	b570      	push	{r4, r5, r6, lr}
    523e:	4606      	mov	r6, r0
    5240:	f7ff fe00 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5244:	4a1b      	ldr	r2, [pc, #108]	; (52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    5246:	4604      	mov	r4, r0
    5248:	2501      	movs	r5, #1
    524a:	6a51      	ldr	r1, [r2, #36]	; 0x24
    524c:	7808      	ldrb	r0, [r1, #0]
    524e:	f000 0003 	and.w	r0, r0, #3
    5252:	2801      	cmp	r0, #1
    5254:	d00c      	beq.n	5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5256:	2802      	cmp	r0, #2
    5258:	d00a      	beq.n	5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    525a:	2803      	cmp	r0, #3
    525c:	d121      	bne.n	52a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    525e:	7065      	strb	r5, [r4, #1]
    5260:	89d0      	ldrh	r0, [r2, #14]
    5262:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5266:	81d0      	strh	r0, [r2, #14]
    5268:	2001      	movs	r0, #1
    526a:	f7ff fddd 	bl	4e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    526e:	e018      	b.n	52a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5270:	7848      	ldrb	r0, [r1, #1]
    5272:	b1b0      	cbz	r0, 52a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5274:	89d1      	ldrh	r1, [r2, #14]
    5276:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    527a:	81d1      	strh	r1, [r2, #14]
    527c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    527e:	2900      	cmp	r1, #0
    5280:	d009      	beq.n	5296 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    5282:	28fb      	cmp	r0, #251	; 0xfb
    5284:	d808      	bhi.n	5298 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    5286:	7990      	ldrb	r0, [r2, #6]
    5288:	b120      	cbz	r0, 5294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    528a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    528e:	2020      	movs	r0, #32
    5290:	f7ff bdde 	b.w	4e50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5294:	7035      	strb	r5, [r6, #0]
    5296:	bd70      	pop	{r4, r5, r6, pc}
    5298:	7950      	ldrb	r0, [r2, #5]
    529a:	f040 0010 	orr.w	r0, r0, #16
    529e:	7150      	strb	r0, [r2, #5]
    52a0:	bd70      	pop	{r4, r5, r6, pc}
    52a2:	7a20      	ldrb	r0, [r4, #8]
    52a4:	2801      	cmp	r0, #1
    52a6:	d001      	beq.n	52ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    52a8:	7225      	strb	r5, [r4, #8]
    52aa:	bd70      	pop	{r4, r5, r6, pc}
    52ac:	2000      	movs	r0, #0
    52ae:	7220      	strb	r0, [r4, #8]
    52b0:	bd70      	pop	{r4, r5, r6, pc}
    52b2:	0000      	.short	0x0000
    52b4:	200000ac 	.word	0x200000ac
    52b8:	b570      	push	{r4, r5, r6, lr}
    52ba:	f7ff fdc3 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52be:	4604      	mov	r4, r0
    52c0:	7980      	ldrb	r0, [r0, #6]
    52c2:	2800      	cmp	r0, #0
    52c4:	d027      	beq.n	5316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    52c6:	2802      	cmp	r0, #2
    52c8:	d10d      	bne.n	52e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    52ca:	4818      	ldr	r0, [pc, #96]	; (532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    52cc:	6b00      	ldr	r0, [r0, #48]	; 0x30
    52ce:	f007 ff47 	bl	d160 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    52d2:	b308      	cbz	r0, 5318 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    52d4:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    52d8:	1c40      	adds	r0, r0, #1
    52da:	f141 0100 	adc.w	r1, r1, #0
    52de:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    52e2:	f000 fe8d 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    52e6:	2500      	movs	r5, #0
    52e8:	71a5      	strb	r5, [r4, #6]
    52ea:	78a0      	ldrb	r0, [r4, #2]
    52ec:	2601      	movs	r6, #1
    52ee:	b170      	cbz	r0, 530e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    52f0:	70a5      	strb	r5, [r4, #2]
    52f2:	f7ff fb21 	bl	4938 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    52f6:	b190      	cbz	r0, 531e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    52f8:	2100      	movs	r1, #0
    52fa:	2008      	movs	r0, #8
    52fc:	f7ff fd94 	bl	4e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5300:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5304:	1c40      	adds	r0, r0, #1
    5306:	f141 0100 	adc.w	r1, r1, #0
    530a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    530e:	79e0      	ldrb	r0, [r4, #7]
    5310:	2801      	cmp	r0, #1
    5312:	d009      	beq.n	5328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    5314:	71e6      	strb	r6, [r4, #7]
    5316:	bd70      	pop	{r4, r5, r6, pc}
    5318:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    531c:	e001      	b.n	5322 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    531e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    5322:	2027      	movs	r0, #39	; 0x27
    5324:	f7fe fd2c 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5328:	71e5      	strb	r5, [r4, #7]
    532a:	bd70      	pop	{r4, r5, r6, pc}
    532c:	200000ac 	.word	0x200000ac
    5330:	4803      	ldr	r0, [pc, #12]	; (5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    5332:	7800      	ldrb	r0, [r0, #0]
    5334:	2800      	cmp	r0, #0
    5336:	d001      	beq.n	533c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    5338:	f7ff bf2a 	b.w	5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    533c:	4770      	bx	lr
    533e:	0000      	.short	0x0000
    5340:	200000ac 	.word	0x200000ac
    5344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5348:	4607      	mov	r7, r0
    534a:	f7ff fd75 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    534e:	4680      	mov	r8, r0
    5350:	f7ff fd78 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5354:	4c17      	ldr	r4, [pc, #92]	; (53b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    5356:	4605      	mov	r5, r0
    5358:	463a      	mov	r2, r7
    535a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    535c:	6260      	str	r0, [r4, #36]	; 0x24
    535e:	2101      	movs	r1, #1
    5360:	4640      	mov	r0, r8
    5362:	f7ff ff4f 	bl	5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    5366:	7ce8      	ldrb	r0, [r5, #19]
    5368:	2600      	movs	r6, #0
    536a:	b178      	cbz	r0, 538c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    536c:	4812      	ldr	r0, [pc, #72]	; (53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    536e:	f006 fb1b 	bl	b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5372:	4812      	ldr	r0, [pc, #72]	; (53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5374:	7606      	strb	r6, [r0, #24]
    5376:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    537a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    537e:	490e      	ldr	r1, [pc, #56]	; (53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5380:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5382:	f005 ff3d 	bl	b200 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5386:	f005 ff4f 	bl	b228 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    538a:	e004      	b.n	5396 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    538c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    538e:	f006 fb0b 	bl	b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5392:	f005 ff63 	bl	b25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5396:	b917      	cbnz	r7, 539e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    5398:	4630      	mov	r0, r6
    539a:	f006 f9b9 	bl	b710 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    539e:	2100      	movs	r1, #0
    53a0:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    53a4:	4608      	mov	r0, r1
    53a6:	f006 fb8b 	bl	bac0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    53aa:	2002      	movs	r0, #2
    53ac:	7020      	strb	r0, [r4, #0]
    53ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53b2:	0000      	.short	0x0000
    53b4:	200000ac 	.word	0x200000ac
    53b8:	200008d0 	.word	0x200008d0
    53bc:	200009d8 	.word	0x200009d8
    53c0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    53c4:	4604      	mov	r4, r0
    53c6:	f7ff fd3d 	bl	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    53ca:	4605      	mov	r5, r0
    53cc:	f7ff fd34 	bl	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    53d0:	4606      	mov	r6, r0
    53d2:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5538 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    53d6:	4622      	mov	r2, r4
    53d8:	2100      	movs	r1, #0
    53da:	f7ff ff13 	bl	5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    53de:	79a8      	ldrb	r0, [r5, #6]
    53e0:	f04f 0800 	mov.w	r8, #0
    53e4:	2701      	movs	r7, #1
    53e6:	f1a9 0420 	sub.w	r4, r9, #32
    53ea:	b140      	cbz	r0, 53fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    53ec:	2801      	cmp	r0, #1
    53ee:	d01f      	beq.n	5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    53f0:	2802      	cmp	r0, #2
    53f2:	d030      	beq.n	5456 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    53f4:	2803      	cmp	r0, #3
    53f6:	d03c      	beq.n	5472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    53f8:	f240 21ae 	movw	r1, #686	; 0x2ae
    53fc:	e058      	b.n	54b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    53fe:	7a20      	ldrb	r0, [r4, #8]
    5400:	2150      	movs	r1, #80	; 0x50
    5402:	f8ad 0004 	strh.w	r0, [sp, #4]
    5406:	5388      	strh	r0, [r1, r6]
    5408:	4648      	mov	r0, r9
    540a:	f7ff fabf 	bl	498c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    540e:	b128      	cbz	r0, 541c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    5410:	2080      	movs	r0, #128	; 0x80
    5412:	6a21      	ldr	r1, [r4, #32]
    5414:	f7ff fd08 	bl	4e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5418:	70af      	strb	r7, [r5, #2]
    541a:	e02e      	b.n	547a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    541c:	466a      	mov	r2, sp
    541e:	a901      	add	r1, sp, #4
    5420:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5422:	f008 fa58 	bl	d8d6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5426:	6220      	str	r0, [r4, #32]
    5428:	b110      	cbz	r0, 5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    542a:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    542e:	b111      	cbz	r1, 5436 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5430:	4842      	ldr	r0, [pc, #264]	; (553c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5432:	6220      	str	r0, [r4, #32]
    5434:	e021      	b.n	547a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5436:	f89d 1000 	ldrb.w	r1, [sp]
    543a:	b931      	cbnz	r1, 544a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    543c:	f8a0 8000 	strh.w	r8, [r0]
    5440:	f880 8002 	strb.w	r8, [r0, #2]
    5444:	2101      	movs	r1, #1
    5446:	f008 fd96 	bl	df76 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    544a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    544e:	6a20      	ldr	r0, [r4, #32]
    5450:	f008 fd4b 	bl	deea <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5454:	e011      	b.n	547a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5456:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    545a:	f8ad 0004 	strh.w	r0, [sp, #4]
    545e:	466a      	mov	r2, sp
    5460:	a901      	add	r1, sp, #4
    5462:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5464:	f008 fa37 	bl	d8d6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5468:	6220      	str	r0, [r4, #32]
    546a:	b930      	cbnz	r0, 547a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    546c:	f240 219f 	movw	r1, #671	; 0x29f
    5470:	e01e      	b.n	54b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5472:	4648      	mov	r0, r9
    5474:	f7ff fa8a 	bl	498c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5478:	b1c0      	cbz	r0, 54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    547a:	6a20      	ldr	r0, [r4, #32]
    547c:	2308      	movs	r3, #8
    547e:	7801      	ldrb	r1, [r0, #0]
    5480:	f021 0108 	bic.w	r1, r1, #8
    5484:	7001      	strb	r1, [r0, #0]
    5486:	79ea      	ldrb	r2, [r5, #7]
    5488:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    548c:	4311      	orrs	r1, r2
    548e:	f021 0104 	bic.w	r1, r1, #4
    5492:	7001      	strb	r1, [r0, #0]
    5494:	7a2a      	ldrb	r2, [r5, #8]
    5496:	2304      	movs	r3, #4
    5498:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    549c:	4311      	orrs	r1, r2
    549e:	f021 0110 	bic.w	r1, r1, #16
    54a2:	7001      	strb	r1, [r0, #0]
    54a4:	43c9      	mvns	r1, r1
    54a6:	0789      	lsls	r1, r1, #30
    54a8:	d005      	beq.n	54b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    54aa:	e007      	b.n	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    54ac:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    54b0:	2027      	movs	r0, #39	; 0x27
    54b2:	f7fe fc65 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54b6:	78c0      	ldrb	r0, [r0, #3]
    54b8:	2802      	cmp	r0, #2
    54ba:	d00f      	beq.n	54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    54bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54be:	f007 ffa0 	bl	d402 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    54c2:	b108      	cbz	r0, 54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    54c4:	2101      	movs	r1, #1
    54c6:	e00a      	b.n	54de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    54c8:	6a20      	ldr	r0, [r4, #32]
    54ca:	7800      	ldrb	r0, [r0, #0]
    54cc:	43c0      	mvns	r0, r0
    54ce:	0780      	lsls	r0, r0, #30
    54d0:	d004      	beq.n	54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    54d2:	f7ff fa19 	bl	4908 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    54d6:	f080 0101 	eor.w	r1, r0, #1
    54da:	e000      	b.n	54de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    54dc:	2100      	movs	r1, #0
    54de:	6a20      	ldr	r0, [r4, #32]
    54e0:	7802      	ldrb	r2, [r0, #0]
    54e2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    54e6:	7001      	strb	r1, [r0, #0]
    54e8:	7ca9      	ldrb	r1, [r5, #18]
    54ea:	b191      	cbz	r1, 5512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    54ec:	7841      	ldrb	r1, [r0, #1]
    54ee:	b181      	cbz	r1, 5512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    54f0:	4813      	ldr	r0, [pc, #76]	; (5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    54f2:	f006 fa59 	bl	b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54f6:	4811      	ldr	r0, [pc, #68]	; (553c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    54f8:	3828      	subs	r0, #40	; 0x28
    54fa:	7607      	strb	r7, [r0, #24]
    54fc:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5500:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5504:	480e      	ldr	r0, [pc, #56]	; (5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5506:	6a21      	ldr	r1, [r4, #32]
    5508:	f005 fe7a 	bl	b200 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    550c:	f005 fec4 	bl	b298 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5510:	e003      	b.n	551a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5512:	f006 fa49 	bl	b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5516:	f005 fea1 	bl	b25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    551a:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    551e:	2101      	movs	r1, #1
    5520:	2000      	movs	r0, #0
    5522:	f006 facd 	bl	bac0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5526:	7127      	strb	r7, [r4, #4]
    5528:	6a20      	ldr	r0, [r4, #32]
    552a:	8801      	ldrh	r1, [r0, #0]
    552c:	8221      	strh	r1, [r4, #16]
    552e:	7880      	ldrb	r0, [r0, #2]
    5530:	74a0      	strb	r0, [r4, #18]
    5532:	7027      	strb	r7, [r4, #0]
    5534:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5538:	200000cc 	.word	0x200000cc
    553c:	20000a00 	.word	0x20000a00
    5540:	200008d0 	.word	0x200008d0
    5544:	000051d9 	.word	0x000051d9
    5548:	00004f5d 	.word	0x00004f5d
    554c:	000050d5 	.word	0x000050d5
    5550:	00005331 	.word	0x00005331

00005554 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5554:	4800      	ldr	r0, [pc, #0]	; (5558 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5556:	4770      	bx	lr
    5558:	200013bd 	.word	0x200013bd

0000555c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    555c:	b570      	push	{r4, r5, r6, lr}
    555e:	2600      	movs	r6, #0
    5560:	4635      	mov	r5, r6
    5562:	4c0f      	ldr	r4, [pc, #60]	; (55a0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    5564:	e018      	b.n	5598 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    5566:	1960      	adds	r0, r4, r5
    5568:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    556c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5570:	2a01      	cmp	r2, #1
    5572:	d002      	beq.n	557a <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5574:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    5578:	b160      	cbz	r0, 5594 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    557a:	480a      	ldr	r0, [pc, #40]	; (55a4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    557c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5580:	1c73      	adds	r3, r6, #1
    5582:	5585      	strb	r5, [r0, r6]
    5584:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    5588:	4630      	mov	r0, r6
    558a:	b2de      	uxtb	r6, r3
    558c:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    5590:	f006 fbbe 	bl	bd10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5594:	1c6d      	adds	r5, r5, #1
    5596:	b2ed      	uxtb	r5, r5
    5598:	78a0      	ldrb	r0, [r4, #2]
    559a:	42a8      	cmp	r0, r5
    559c:	d8e3      	bhi.n	5566 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    559e:	bd70      	pop	{r4, r5, r6, pc}
    55a0:	200011ea 	.word	0x200011ea
    55a4:	20000274 	.word	0x20000274

000055a8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    55a8:	4904      	ldr	r1, [pc, #16]	; (55bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    55aa:	788a      	ldrb	r2, [r1, #2]
    55ac:	4282      	cmp	r2, r0
    55ae:	d903      	bls.n	55b8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    55b0:	4408      	add	r0, r1
    55b2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    55b6:	4770      	bx	lr
    55b8:	2000      	movs	r0, #0
    55ba:	4770      	bx	lr
    55bc:	200011ea 	.word	0x200011ea

000055c0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    55c0:	4904      	ldr	r1, [pc, #16]	; (55d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    55c2:	788a      	ldrb	r2, [r1, #2]
    55c4:	4282      	cmp	r2, r0
    55c6:	d903      	bls.n	55d0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    55c8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    55cc:	3083      	adds	r0, #131	; 0x83
    55ce:	4770      	bx	lr
    55d0:	2000      	movs	r0, #0
    55d2:	4770      	bx	lr
    55d4:	200011ea 	.word	0x200011ea

000055d8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    55d8:	4a05      	ldr	r2, [pc, #20]	; (55f0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    55da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    55de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    55e2:	6802      	ldr	r2, [r0, #0]
    55e4:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    55e8:	8880      	ldrh	r0, [r0, #4]
    55ea:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    55ee:	4770      	bx	lr
    55f0:	200011ea 	.word	0x200011ea

000055f4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    55f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55f8:	4607      	mov	r7, r0
    55fa:	2400      	movs	r4, #0
    55fc:	4d10      	ldr	r5, [pc, #64]	; (5640 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    55fe:	e019      	b.n	5634 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5600:	4620      	mov	r0, r4
    5602:	f7ff ffdd 	bl	55c0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    5606:	0003      	movs	r3, r0
    5608:	d012      	beq.n	5630 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    560a:	1928      	adds	r0, r5, r4
    560c:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5610:	b970      	cbnz	r0, 5630 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5612:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    5616:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    561a:	f206 160b 	addw	r6, r6, #267	; 0x10b
    561e:	463a      	mov	r2, r7
    5620:	4631      	mov	r1, r6
    5622:	4618      	mov	r0, r3
    5624:	f008 f8da 	bl	d7dc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5628:	4630      	mov	r0, r6
    562a:	4621      	mov	r1, r4
    562c:	f7ff ffd4 	bl	55d8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    5630:	1c64      	adds	r4, r4, #1
    5632:	b2e4      	uxtb	r4, r4
    5634:	78a8      	ldrb	r0, [r5, #2]
    5636:	42a0      	cmp	r0, r4
    5638:	d8e2      	bhi.n	5600 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    563a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    563e:	0000      	.short	0x0000
    5640:	200011ea 	.word	0x200011ea

00005644 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5648:	460e      	mov	r6, r1
    564a:	4607      	mov	r7, r0
    564c:	4615      	mov	r5, r2
    564e:	2106      	movs	r1, #6
    5650:	4630      	mov	r0, r6
    5652:	f008 fb93 	bl	dd7c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5656:	4c0d      	ldr	r4, [pc, #52]	; (568c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5658:	b160      	cbz	r0, 5674 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    565a:	2000      	movs	r0, #0
    565c:	e004      	b.n	5668 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    565e:	1821      	adds	r1, r4, r0
    5660:	1c40      	adds	r0, r0, #1
    5662:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5666:	b2c0      	uxtb	r0, r0
    5668:	78a1      	ldrb	r1, [r4, #2]
    566a:	4281      	cmp	r1, r0
    566c:	d8f7      	bhi.n	565e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    566e:	2001      	movs	r0, #1
    5670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5674:	4631      	mov	r1, r6
    5676:	4638      	mov	r0, r7
    5678:	f008 f93c 	bl	d8f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    567c:	2808      	cmp	r0, #8
    567e:	d003      	beq.n	5688 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5680:	4420      	add	r0, r4
    5682:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5686:	e7f2      	b.n	566e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5688:	2000      	movs	r0, #0
    568a:	e7f1      	b.n	5670 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    568c:	200011ea 	.word	0x200011ea

00005690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5690:	4904      	ldr	r1, [pc, #16]	; (56a4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5692:	788a      	ldrb	r2, [r1, #2]
    5694:	4282      	cmp	r2, r0
    5696:	d903      	bls.n	56a0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5698:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    569c:	1cc0      	adds	r0, r0, #3
    569e:	4770      	bx	lr
    56a0:	2000      	movs	r0, #0
    56a2:	4770      	bx	lr
    56a4:	200011ea 	.word	0x200011ea

000056a8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    56a8:	4908      	ldr	r1, [pc, #32]	; (56cc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    56aa:	788a      	ldrb	r2, [r1, #2]
    56ac:	4282      	cmp	r2, r0
    56ae:	d903      	bls.n	56b8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    56b0:	180a      	adds	r2, r1, r0
    56b2:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    56b6:	b10a      	cbz	r2, 56bc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    56b8:	2000      	movs	r0, #0
    56ba:	4770      	bx	lr
    56bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    56c0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    56c4:	f200 100b 	addw	r0, r0, #267	; 0x10b
    56c8:	4770      	bx	lr
    56ca:	0000      	.short	0x0000
    56cc:	200011ea 	.word	0x200011ea

000056d0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    56d0:	b510      	push	{r4, lr}
    56d2:	f240 12d3 	movw	r2, #467	; 0x1d3
    56d6:	2100      	movs	r1, #0
    56d8:	4808      	ldr	r0, [pc, #32]	; (56fc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    56da:	f006 ffdb 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56de:	2208      	movs	r2, #8
    56e0:	21ff      	movs	r1, #255	; 0xff
    56e2:	4807      	ldr	r0, [pc, #28]	; (5700 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    56e4:	f006 ffd6 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56e8:	4805      	ldr	r0, [pc, #20]	; (5700 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    56ea:	2100      	movs	r1, #0
    56ec:	1f00      	subs	r0, r0, #4
    56ee:	7001      	strb	r1, [r0, #0]
    56f0:	7041      	strb	r1, [r0, #1]
    56f2:	f44f 7161 	mov.w	r1, #900	; 0x384
    56f6:	8041      	strh	r1, [r0, #2]
    56f8:	bd10      	pop	{r4, pc}
    56fa:	0000      	.short	0x0000
    56fc:	200011ea 	.word	0x200011ea
    5700:	20000274 	.word	0x20000274

00005704 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5704:	4901      	ldr	r1, [pc, #4]	; (570c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5706:	7008      	strb	r0, [r1, #0]
    5708:	4770      	bx	lr
    570a:	0000      	.short	0x0000
    570c:	20000270 	.word	0x20000270

00005710 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5710:	4801      	ldr	r0, [pc, #4]	; (5718 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5712:	7800      	ldrb	r0, [r0, #0]
    5714:	4770      	bx	lr
    5716:	0000      	.short	0x0000
    5718:	20000270 	.word	0x20000270

0000571c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    571c:	4b0b      	ldr	r3, [pc, #44]	; (574c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    571e:	b510      	push	{r4, lr}
    5720:	789c      	ldrb	r4, [r3, #2]
    5722:	4284      	cmp	r4, r0
    5724:	d90f      	bls.n	5746 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5726:	4418      	add	r0, r3
    5728:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    572c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5730:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5734:	700b      	strb	r3, [r1, #0]
    5736:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    573a:	6011      	str	r1, [r2, #0]
    573c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5740:	8090      	strh	r0, [r2, #4]
    5742:	2001      	movs	r0, #1
    5744:	bd10      	pop	{r4, pc}
    5746:	2000      	movs	r0, #0
    5748:	bd10      	pop	{r4, pc}
    574a:	0000      	.short	0x0000
    574c:	200011ea 	.word	0x200011ea

00005750 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5750:	4907      	ldr	r1, [pc, #28]	; (5770 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5752:	788a      	ldrb	r2, [r1, #2]
    5754:	4282      	cmp	r2, r0
    5756:	d909      	bls.n	576c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5758:	4408      	add	r0, r1
    575a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    575e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5762:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5766:	f000 0001 	and.w	r0, r0, #1
    576a:	4770      	bx	lr
    576c:	2000      	movs	r0, #0
    576e:	4770      	bx	lr
    5770:	200011ea 	.word	0x200011ea

00005774 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5778:	4698      	mov	r8, r3
    577a:	4691      	mov	r9, r2
    577c:	460c      	mov	r4, r1
    577e:	4605      	mov	r5, r0
    5780:	f000 f962 	bl	5a48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5784:	4606      	mov	r6, r0
    5786:	2810      	cmp	r0, #16
    5788:	d006      	beq.n	5798 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    578a:	f000 f92d 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    578e:	2810      	cmp	r0, #16
    5790:	d002      	beq.n	5798 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5792:	2012      	movs	r0, #18
    5794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5798:	4f18      	ldr	r7, [pc, #96]	; (57fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    579a:	78b8      	ldrb	r0, [r7, #2]
    579c:	2808      	cmp	r0, #8
    579e:	d22a      	bcs.n	57f6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    57a0:	2e10      	cmp	r6, #16
    57a2:	d105      	bne.n	57b0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    57a4:	2200      	movs	r2, #0
    57a6:	4621      	mov	r1, r4
    57a8:	4628      	mov	r0, r5
    57aa:	f000 f931 	bl	5a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    57ae:	4606      	mov	r6, r0
    57b0:	78bc      	ldrb	r4, [r7, #2]
    57b2:	2210      	movs	r2, #16
    57b4:	1c60      	adds	r0, r4, #1
    57b6:	70b8      	strb	r0, [r7, #2]
    57b8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    57bc:	1ce8      	adds	r0, r5, #3
    57be:	4649      	mov	r1, r9
    57c0:	f008 fa7f 	bl	dcc2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    57c4:	f105 0083 	add.w	r0, r5, #131	; 0x83
    57c8:	2210      	movs	r2, #16
    57ca:	4641      	mov	r1, r8
    57cc:	f008 fa79 	bl	dcc2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    57d0:	2110      	movs	r1, #16
    57d2:	4640      	mov	r0, r8
    57d4:	f008 fad2 	bl	dd7c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57d8:	443c      	add	r4, r7
    57da:	2110      	movs	r1, #16
    57dc:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    57e0:	4648      	mov	r0, r9
    57e2:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    57e6:	f008 fac9 	bl	dd7c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57ea:	77e0      	strb	r0, [r4, #31]
    57ec:	f804 6c29 	strb.w	r6, [r4, #-41]
    57f0:	2000      	movs	r0, #0
    57f2:	73e0      	strb	r0, [r4, #15]
    57f4:	e7ce      	b.n	5794 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    57f6:	2007      	movs	r0, #7
    57f8:	e7cc      	b.n	5794 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    57fa:	0000      	.short	0x0000
    57fc:	200011ea 	.word	0x200011ea

00005800 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5800:	4806      	ldr	r0, [pc, #24]	; (581c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5802:	b510      	push	{r4, lr}
    5804:	7880      	ldrb	r0, [r0, #2]
    5806:	1e40      	subs	r0, r0, #1
    5808:	b244      	sxtb	r4, r0
    580a:	e004      	b.n	5816 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    580c:	b2e0      	uxtb	r0, r4
    580e:	f000 f963 	bl	5ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5812:	1e64      	subs	r4, r4, #1
    5814:	b264      	sxtb	r4, r4
    5816:	2c00      	cmp	r4, #0
    5818:	daf8      	bge.n	580c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    581a:	bd10      	pop	{r4, pc}
    581c:	200011ea 	.word	0x200011ea

00005820 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5820:	4801      	ldr	r0, [pc, #4]	; (5828 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5822:	8840      	ldrh	r0, [r0, #2]
    5824:	4770      	bx	lr
    5826:	0000      	.short	0x0000
    5828:	20000270 	.word	0x20000270

0000582c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    582c:	b138      	cbz	r0, 583e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    582e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5832:	4288      	cmp	r0, r1
    5834:	d803      	bhi.n	583e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5836:	4903      	ldr	r1, [pc, #12]	; (5844 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5838:	8048      	strh	r0, [r1, #2]
    583a:	2001      	movs	r0, #1
    583c:	4770      	bx	lr
    583e:	2000      	movs	r0, #0
    5840:	4770      	bx	lr
    5842:	0000      	.short	0x0000
    5844:	20000270 	.word	0x20000270

00005848 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    5848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    584c:	4614      	mov	r4, r2
    584e:	2501      	movs	r5, #1
    5850:	2200      	movs	r2, #0
    5852:	461f      	mov	r7, r3
    5854:	462e      	mov	r6, r5
    5856:	7022      	strb	r2, [r4, #0]
    5858:	f000 f8f6 	bl	5a48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    585c:	2810      	cmp	r0, #16
    585e:	d024      	beq.n	58aa <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5860:	f8df 8054 	ldr.w	r8, [pc, #84]	; 58b8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    5864:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    5868:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    586c:	f001 0101 	and.w	r1, r1, #1
    5870:	7021      	strb	r1, [r4, #0]
    5872:	f000 f8b9 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5876:	4604      	mov	r4, r0
    5878:	2810      	cmp	r0, #16
    587a:	d016      	beq.n	58aa <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    587c:	b107      	cbz	r7, 5880 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    587e:	703c      	strb	r4, [r7, #0]
    5880:	4620      	mov	r0, r4
    5882:	f7ff ff05 	bl	5690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5886:	b180      	cbz	r0, 58aa <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5888:	f898 1002 	ldrb.w	r1, [r8, #2]
    588c:	4640      	mov	r0, r8
    588e:	42a1      	cmp	r1, r4
    5890:	d903      	bls.n	589a <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    5892:	1901      	adds	r1, r0, r4
    5894:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    5898:	e000      	b.n	589c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    589a:	2600      	movs	r6, #0
    589c:	eb08 0004 	add.w	r0, r8, r4
    58a0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    58a4:	2801      	cmp	r0, #1
    58a6:	d004      	beq.n	58b2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    58a8:	2500      	movs	r5, #0
    58aa:	ea45 0006 	orr.w	r0, r5, r6
    58ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58b2:	2501      	movs	r5, #1
    58b4:	e7f9      	b.n	58aa <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    58b6:	0000      	.short	0x0000
    58b8:	200011ea 	.word	0x200011ea

000058bc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    58bc:	b570      	push	{r4, r5, r6, lr}
    58be:	460d      	mov	r5, r1
    58c0:	4606      	mov	r6, r0
    58c2:	f000 f8c1 	bl	5a48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    58c6:	4c10      	ldr	r4, [pc, #64]	; (5908 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    58c8:	2810      	cmp	r0, #16
    58ca:	d007      	beq.n	58dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    58cc:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    58d0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    58d4:	07c9      	lsls	r1, r1, #31
    58d6:	d001      	beq.n	58dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    58d8:	2001      	movs	r0, #1
    58da:	bd70      	pop	{r4, r5, r6, pc}
    58dc:	7861      	ldrb	r1, [r4, #1]
    58de:	2908      	cmp	r1, #8
    58e0:	d210      	bcs.n	5904 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    58e2:	2810      	cmp	r0, #16
    58e4:	d008      	beq.n	58f8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    58e6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    58ea:	2101      	movs	r1, #1
    58ec:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    58f0:	7860      	ldrb	r0, [r4, #1]
    58f2:	1c40      	adds	r0, r0, #1
    58f4:	7060      	strb	r0, [r4, #1]
    58f6:	e7ef      	b.n	58d8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    58f8:	2201      	movs	r2, #1
    58fa:	4629      	mov	r1, r5
    58fc:	4630      	mov	r0, r6
    58fe:	f000 f887 	bl	5a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5902:	e7f5      	b.n	58f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5904:	2000      	movs	r0, #0
    5906:	bd70      	pop	{r4, r5, r6, pc}
    5908:	200011ea 	.word	0x200011ea

0000590c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    590c:	b570      	push	{r4, r5, r6, lr}
    590e:	4d0b      	ldr	r5, [pc, #44]	; (593c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5910:	7828      	ldrb	r0, [r5, #0]
    5912:	1e40      	subs	r0, r0, #1
    5914:	b244      	sxtb	r4, r0
    5916:	e00a      	b.n	592e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5918:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    591c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5920:	07c0      	lsls	r0, r0, #31
    5922:	d002      	beq.n	592a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5924:	b2e0      	uxtb	r0, r4
    5926:	f000 f91f 	bl	5b68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    592a:	1e64      	subs	r4, r4, #1
    592c:	b264      	sxtb	r4, r4
    592e:	2c00      	cmp	r4, #0
    5930:	daf2      	bge.n	5918 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5932:	4903      	ldr	r1, [pc, #12]	; (5940 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5934:	2000      	movs	r0, #0
    5936:	7048      	strb	r0, [r1, #1]
    5938:	bd70      	pop	{r4, r5, r6, pc}
    593a:	0000      	.short	0x0000
    593c:	200011ea 	.word	0x200011ea
    5940:	20000270 	.word	0x20000270

00005944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5948:	2400      	movs	r4, #0
    594a:	4625      	mov	r5, r4
    594c:	4e18      	ldr	r6, [pc, #96]	; (59b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    594e:	e029      	b.n	59a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5950:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5954:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5958:	07c0      	lsls	r0, r0, #31
    595a:	d021      	beq.n	59a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    595c:	4628      	mov	r0, r5
    595e:	f000 f843 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5962:	4603      	mov	r3, r0
    5964:	f7ff fe94 	bl	5690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5968:	4601      	mov	r1, r0
    596a:	2000      	movs	r0, #0
    596c:	2b10      	cmp	r3, #16
    596e:	d009      	beq.n	5984 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5970:	18f2      	adds	r2, r6, r3
    5972:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5976:	f1bc 0f01 	cmp.w	ip, #1
    597a:	d002      	beq.n	5982 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    597c:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5980:	b102      	cbz	r2, 5984 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5982:	2001      	movs	r0, #1
    5984:	1e40      	subs	r0, r0, #1
    5986:	4201      	tst	r1, r0
    5988:	d10a      	bne.n	59a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    598a:	480a      	ldr	r0, [pc, #40]	; (59b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    598c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5990:	5503      	strb	r3, [r0, r4]
    5992:	4620      	mov	r0, r4
    5994:	1c64      	adds	r4, r4, #1
    5996:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    599a:	b2e4      	uxtb	r4, r4
    599c:	f006 f9b8 	bl	bd10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    59a0:	1c6d      	adds	r5, r5, #1
    59a2:	b2ed      	uxtb	r5, r5
    59a4:	7830      	ldrb	r0, [r6, #0]
    59a6:	42a8      	cmp	r0, r5
    59a8:	d8d2      	bhi.n	5950 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    59aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59ae:	0000      	.short	0x0000
    59b0:	200011ea 	.word	0x200011ea
    59b4:	20000274 	.word	0x20000274
    59b8:	4602      	mov	r2, r0
    59ba:	4809      	ldr	r0, [pc, #36]	; (59e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    59bc:	b510      	push	{r4, lr}
    59be:	7800      	ldrb	r0, [r0, #0]
    59c0:	460b      	mov	r3, r1
    59c2:	b158      	cbz	r0, 59dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    59c4:	4807      	ldr	r0, [pc, #28]	; (59e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    59c6:	7881      	ldrb	r1, [r0, #2]
    59c8:	b141      	cbz	r1, 59dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    59ca:	b10b      	cbz	r3, 59d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    59cc:	1cc0      	adds	r0, r0, #3
    59ce:	e001      	b.n	59d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    59d0:	4804      	ldr	r0, [pc, #16]	; (59e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    59d2:	3083      	adds	r0, #131	; 0x83
    59d4:	f005 fb36 	bl	b044 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    59d8:	2001      	movs	r0, #1
    59da:	bd10      	pop	{r4, pc}
    59dc:	2000      	movs	r0, #0
    59de:	bd10      	pop	{r4, pc}
    59e0:	20000270 	.word	0x20000270
    59e4:	200011ea 	.word	0x200011ea
    59e8:	4908      	ldr	r1, [pc, #32]	; (5a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    59ea:	b510      	push	{r4, lr}
    59ec:	4603      	mov	r3, r0
    59ee:	2000      	movs	r0, #0
    59f0:	788a      	ldrb	r2, [r1, #2]
    59f2:	e006      	b.n	5a02 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    59f4:	180c      	adds	r4, r1, r0
    59f6:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    59fa:	429c      	cmp	r4, r3
    59fc:	d004      	beq.n	5a08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    59fe:	1c40      	adds	r0, r0, #1
    5a00:	b2c0      	uxtb	r0, r0
    5a02:	4282      	cmp	r2, r0
    5a04:	d8f6      	bhi.n	59f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5a06:	2010      	movs	r0, #16
    5a08:	bd10      	pop	{r4, pc}
    5a0a:	0000      	.short	0x0000
    5a0c:	200011ea 	.word	0x200011ea
    5a10:	b570      	push	{r4, r5, r6, lr}
    5a12:	4b0c      	ldr	r3, [pc, #48]	; (5a44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5a14:	4604      	mov	r4, r0
    5a16:	7818      	ldrb	r0, [r3, #0]
    5a18:	1c45      	adds	r5, r0, #1
    5a1a:	701d      	strb	r5, [r3, #0]
    5a1c:	2810      	cmp	r0, #16
    5a1e:	d303      	bcc.n	5a28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5a20:	2146      	movs	r1, #70	; 0x46
    5a22:	2028      	movs	r0, #40	; 0x28
    5a24:	f7fe f9ac 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a28:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5a2c:	680d      	ldr	r5, [r1, #0]
    5a2e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5a32:	8889      	ldrh	r1, [r1, #4]
    5a34:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5a38:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5a3c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5a40:	bd70      	pop	{r4, r5, r6, pc}
    5a42:	0000      	.short	0x0000
    5a44:	200011ea 	.word	0x200011ea
    5a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a4c:	460f      	mov	r7, r1
    5a4e:	4606      	mov	r6, r0
    5a50:	2400      	movs	r4, #0
    5a52:	4d0d      	ldr	r5, [pc, #52]	; (5a88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5a54:	e00f      	b.n	5a76 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5a56:	bf00      	nop
    5a58:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a5c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5a60:	42b1      	cmp	r1, r6
    5a62:	d106      	bne.n	5a72 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5a64:	2206      	movs	r2, #6
    5a66:	4639      	mov	r1, r7
    5a68:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5a6c:	f006 fd86 	bl	c57c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a70:	b138      	cbz	r0, 5a82 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5a72:	1c64      	adds	r4, r4, #1
    5a74:	b2e4      	uxtb	r4, r4
    5a76:	7828      	ldrb	r0, [r5, #0]
    5a78:	42a0      	cmp	r0, r4
    5a7a:	d8ed      	bhi.n	5a58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5a7c:	2010      	movs	r0, #16
    5a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a82:	4620      	mov	r0, r4
    5a84:	e7fb      	b.n	5a7e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5a86:	0000      	.short	0x0000
    5a88:	200011ea 	.word	0x200011ea
    5a8c:	b570      	push	{r4, r5, r6, lr}
    5a8e:	4605      	mov	r5, r0
    5a90:	f7ff ffaa 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a94:	2810      	cmp	r0, #16
    5a96:	d11c      	bne.n	5ad2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a98:	4c0e      	ldr	r4, [pc, #56]	; (5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5a9a:	7820      	ldrb	r0, [r4, #0]
    5a9c:	1e40      	subs	r0, r0, #1
    5a9e:	b2c0      	uxtb	r0, r0
    5aa0:	7020      	strb	r0, [r4, #0]
    5aa2:	42a8      	cmp	r0, r5
    5aa4:	d015      	beq.n	5ad2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5aa6:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5aaa:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5aae:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5ab2:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5ab6:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5aba:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5abe:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5ac2:	7820      	ldrb	r0, [r4, #0]
    5ac4:	f7ff ff90 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5ac8:	2810      	cmp	r0, #16
    5aca:	d002      	beq.n	5ad2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5acc:	4420      	add	r0, r4
    5ace:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5ad2:	bd70      	pop	{r4, r5, r6, pc}
    5ad4:	200011ea 	.word	0x200011ea
    5ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5adc:	4c21      	ldr	r4, [pc, #132]	; (5b64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5ade:	4606      	mov	r6, r0
    5ae0:	19a7      	adds	r7, r4, r6
    5ae2:	78a0      	ldrb	r0, [r4, #2]
    5ae4:	1e40      	subs	r0, r0, #1
    5ae6:	b2c5      	uxtb	r5, r0
    5ae8:	70a5      	strb	r5, [r4, #2]
    5aea:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5aee:	42ae      	cmp	r6, r5
    5af0:	d02a      	beq.n	5b48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5af2:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5af6:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5afa:	f10a 0103 	add.w	r1, sl, #3
    5afe:	f109 0003 	add.w	r0, r9, #3
    5b02:	2210      	movs	r2, #16
    5b04:	f006 fd4c 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b08:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5b0c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5b10:	2210      	movs	r2, #16
    5b12:	f006 fd45 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b16:	1960      	adds	r0, r4, r5
    5b18:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5b1c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5b20:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5b24:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5b28:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5b2c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5b30:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5b34:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5b38:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5b3c:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5b40:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5b44:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5b48:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5b4c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5b50:	07c0      	lsls	r0, r0, #31
    5b52:	d104      	bne.n	5b5e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5b54:	4640      	mov	r0, r8
    5b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b5a:	f7ff bf97 	b.w	5a8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b62:	0000      	.short	0x0000
    5b64:	200011ea 	.word	0x200011ea
    5b68:	4905      	ldr	r1, [pc, #20]	; (5b80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5b6a:	784a      	ldrb	r2, [r1, #1]
    5b6c:	1e52      	subs	r2, r2, #1
    5b6e:	704a      	strb	r2, [r1, #1]
    5b70:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5b74:	2200      	movs	r2, #0
    5b76:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5b7a:	f7ff bf87 	b.w	5a8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b7e:	0000      	.short	0x0000
    5b80:	200011ea 	.word	0x200011ea

00005b84 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    5b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b88:	4604      	mov	r4, r0
    5b8a:	f100 0778 	add.w	r7, r0, #120	; 0x78
    5b8e:	b171      	cbz	r1, 5bae <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    5b90:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    5b94:	1e75      	subs	r5, r6, #1
    5b96:	2901      	cmp	r1, #1
    5b98:	d016      	beq.n	5bc8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    5b9a:	2902      	cmp	r1, #2
    5b9c:	d025      	beq.n	5bea <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    5b9e:	2903      	cmp	r1, #3
    5ba0:	d110      	bne.n	5bc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    5ba2:	4631      	mov	r1, r6
    5ba4:	4628      	mov	r0, r5
    5ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5baa:	f008 b939 	b.w	de20 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5bae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5bb2:	2100      	movs	r1, #0
    5bb4:	f006 fd6e 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bb8:	4638      	mov	r0, r7
    5bba:	f008 f8ee 	bl	dd9a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    5bbe:	2020      	movs	r0, #32
    5bc0:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    5bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bc8:	68e1      	ldr	r1, [r4, #12]
    5bca:	480d      	ldr	r0, [pc, #52]	; (5c00 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    5bcc:	460a      	mov	r2, r1
    5bce:	4408      	add	r0, r1
    5bd0:	fbb0 f0f1 	udiv	r0, r0, r1
    5bd4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    5bd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5bdc:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    5be0:	8ae3      	ldrh	r3, [r4, #22]
    5be2:	4638      	mov	r0, r7
    5be4:	f000 f80e 	bl	5c04 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5be8:	e7db      	b.n	5ba2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    5bea:	68c1      	ldr	r1, [r0, #12]
    5bec:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    5bf0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    5bf4:	4638      	mov	r0, r7
    5bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5bfa:	f000 b803 	b.w	5c04 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5bfe:	0000      	.short	0x0000
    5c00:	01c9c37f 	.word	0x01c9c37f
    5c04:	b530      	push	{r4, r5, lr}
    5c06:	2400      	movs	r4, #0
    5c08:	86c4      	strh	r4, [r0, #54]	; 0x36
    5c0a:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    5c0c:	4d13      	ldr	r5, [pc, #76]	; (5c5c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    5c0e:	434c      	muls	r4, r1
    5c10:	fbb4 f4f2 	udiv	r4, r4, r2
    5c14:	8744      	strh	r4, [r0, #58]	; 0x3a
    5c16:	f242 7410 	movw	r4, #10000	; 0x2710
    5c1a:	4363      	muls	r3, r4
    5c1c:	fbb3 f3f2 	udiv	r3, r3, r2
    5c20:	1c5b      	adds	r3, r3, #1
    5c22:	b29b      	uxth	r3, r3
    5c24:	fb03 f402 	mul.w	r4, r3, r2
    5c28:	8703      	strh	r3, [r0, #56]	; 0x38
    5c2a:	42ac      	cmp	r4, r5
    5c2c:	d901      	bls.n	5c32 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    5c2e:	1e5b      	subs	r3, r3, #1
    5c30:	8703      	strh	r3, [r0, #56]	; 0x38
    5c32:	4b0b      	ldr	r3, [pc, #44]	; (5c60 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    5c34:	f240 2471 	movw	r4, #625	; 0x271
    5c38:	fbb3 f3f2 	udiv	r3, r3, r2
    5c3c:	1c5b      	adds	r3, r3, #1
    5c3e:	87c3      	strh	r3, [r0, #62]	; 0x3e
    5c40:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5c42:	4363      	muls	r3, r4
    5c44:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5c48:	1e5b      	subs	r3, r3, #1
    5c4a:	fbb3 f3f2 	udiv	r3, r3, r2
    5c4e:	62c3      	str	r3, [r0, #44]	; 0x2c
    5c50:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5c52:	434b      	muls	r3, r1
    5c54:	fbb3 f1f2 	udiv	r1, r3, r2
    5c58:	6281      	str	r1, [r0, #40]	; 0x28
    5c5a:	bd30      	pop	{r4, r5, pc}
    5c5c:	01e84800 	.word	0x01e84800
    5c60:	02625a00 	.word	0x02625a00

00005c64 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5c64:	4909      	ldr	r1, [pc, #36]	; (5c8c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5c66:	b508      	push	{r3, lr}
    5c68:	7809      	ldrb	r1, [r1, #0]
    5c6a:	f88d 1000 	strb.w	r1, [sp]
    5c6e:	9900      	ldr	r1, [sp, #0]
    5c70:	9100      	str	r1, [sp, #0]
    5c72:	f89d 1000 	ldrb.w	r1, [sp]
    5c76:	b109      	cbz	r1, 5c7c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    5c78:	2000      	movs	r0, #0
    5c7a:	bd08      	pop	{r3, pc}
    5c7c:	4903      	ldr	r1, [pc, #12]	; (5c8c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5c7e:	f8d1 2001 	ldr.w	r2, [r1, #1]
    5c82:	6002      	str	r2, [r0, #0]
    5c84:	7949      	ldrb	r1, [r1, #5]
    5c86:	7101      	strb	r1, [r0, #4]
    5c88:	2001      	movs	r0, #1
    5c8a:	bd08      	pop	{r3, pc}
    5c8c:	20000297 	.word	0x20000297

00005c90 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    5c90:	4905      	ldr	r1, [pc, #20]	; (5ca8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    5c92:	2201      	movs	r2, #1
    5c94:	700a      	strb	r2, [r1, #0]
    5c96:	460a      	mov	r2, r1
    5c98:	6803      	ldr	r3, [r0, #0]
    5c9a:	f8c2 3001 	str.w	r3, [r2, #1]
    5c9e:	7900      	ldrb	r0, [r0, #4]
    5ca0:	7150      	strb	r0, [r2, #5]
    5ca2:	2000      	movs	r0, #0
    5ca4:	7008      	strb	r0, [r1, #0]
    5ca6:	4770      	bx	lr
    5ca8:	20000297 	.word	0x20000297

00005cac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5cac:	b570      	push	{r4, r5, r6, lr}
    5cae:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5cb2:	b28b      	uxth	r3, r1
    5cb4:	7ac5      	ldrb	r5, [r0, #11]
    5cb6:	ea83 0102 	eor.w	r1, r3, r2
    5cba:	2200      	movs	r2, #0
    5cbc:	b2cc      	uxtb	r4, r1
    5cbe:	0a09      	lsrs	r1, r1, #8
    5cc0:	fa94 f4a4 	rbit	r4, r4
    5cc4:	fa91 f1a1 	rbit	r1, r1
    5cc8:	0e24      	lsrs	r4, r4, #24
    5cca:	0e09      	lsrs	r1, r1, #24
    5ccc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5cd0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5cd4:	1c52      	adds	r2, r2, #1
    5cd6:	4419      	add	r1, r3
    5cd8:	b2d2      	uxtb	r2, r2
    5cda:	b289      	uxth	r1, r1
    5cdc:	2a03      	cmp	r2, #3
    5cde:	d3ed      	bcc.n	5cbc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5ce0:	4059      	eors	r1, r3
    5ce2:	2225      	movs	r2, #37	; 0x25
    5ce4:	fbb1 f3f2 	udiv	r3, r1, r2
    5ce8:	fb02 1213 	mls	r2, r2, r3, r1
    5cec:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5cf0:	f002 0607 	and.w	r6, r2, #7
    5cf4:	785b      	ldrb	r3, [r3, #1]
    5cf6:	2401      	movs	r4, #1
    5cf8:	fa04 f606 	lsl.w	r6, r4, r6
    5cfc:	4233      	tst	r3, r6
    5cfe:	d001      	beq.n	5d04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5d00:	4610      	mov	r0, r2
    5d02:	bd70      	pop	{r4, r5, r6, pc}
    5d04:	434d      	muls	r5, r1
    5d06:	0c29      	lsrs	r1, r5, #16
    5d08:	1c49      	adds	r1, r1, #1
    5d0a:	b2c9      	uxtb	r1, r1
    5d0c:	2200      	movs	r2, #0
    5d0e:	1885      	adds	r5, r0, r2
    5d10:	79ab      	ldrb	r3, [r5, #6]
    5d12:	428b      	cmp	r3, r1
    5d14:	d312      	bcc.n	5d3c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5d16:	f895 5001 	ldrb.w	r5, [r5, #1]
    5d1a:	2300      	movs	r3, #0
    5d1c:	fa04 f603 	lsl.w	r6, r4, r3
    5d20:	4235      	tst	r5, r6
    5d22:	d001      	beq.n	5d28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5d24:	1e49      	subs	r1, r1, #1
    5d26:	b2c9      	uxtb	r1, r1
    5d28:	b121      	cbz	r1, 5d34 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5d2a:	1c5b      	adds	r3, r3, #1
    5d2c:	b2db      	uxtb	r3, r3
    5d2e:	2b08      	cmp	r3, #8
    5d30:	d3f4      	bcc.n	5d1c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5d32:	e005      	b.n	5d40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5d34:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5d38:	b2c0      	uxtb	r0, r0
    5d3a:	bd70      	pop	{r4, r5, r6, pc}
    5d3c:	1ac9      	subs	r1, r1, r3
    5d3e:	b2c9      	uxtb	r1, r1
    5d40:	1c52      	adds	r2, r2, #1
    5d42:	b2d2      	uxtb	r2, r2
    5d44:	2a05      	cmp	r2, #5
    5d46:	d3e2      	bcc.n	5d0e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5d48:	f240 110d 	movw	r1, #269	; 0x10d
    5d4c:	2046      	movs	r0, #70	; 0x46
    5d4e:	f7fe f817 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d52:	0000      	movs	r0, r0
    5d54:	b570      	push	{r4, r5, r6, lr}
    5d56:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5d5a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5d5e:	2401      	movs	r4, #1
    5d60:	fb03 2101 	mla	r1, r3, r1, r2
    5d64:	2225      	movs	r2, #37	; 0x25
    5d66:	fbb1 f3f2 	udiv	r3, r1, r2
    5d6a:	fb02 1113 	mls	r1, r2, r3, r1
    5d6e:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5d72:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5d76:	f001 0307 	and.w	r3, r1, #7
    5d7a:	7d92      	ldrb	r2, [r2, #22]
    5d7c:	fa04 f303 	lsl.w	r3, r4, r3
    5d80:	421a      	tst	r2, r3
    5d82:	d003      	beq.n	5d8c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5d84:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5d88:	2000      	movs	r0, #0
    5d8a:	bd70      	pop	{r4, r5, r6, pc}
    5d8c:	f890 2020 	ldrb.w	r2, [r0, #32]
    5d90:	fbb1 f3f2 	udiv	r3, r1, r2
    5d94:	fb02 1113 	mls	r1, r2, r3, r1
    5d98:	1c49      	adds	r1, r1, #1
    5d9a:	b2c9      	uxtb	r1, r1
    5d9c:	2300      	movs	r3, #0
    5d9e:	18c5      	adds	r5, r0, r3
    5da0:	7eea      	ldrb	r2, [r5, #27]
    5da2:	428a      	cmp	r2, r1
    5da4:	d311      	bcc.n	5dca <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5da6:	f895 5016 	ldrb.w	r5, [r5, #22]
    5daa:	2200      	movs	r2, #0
    5dac:	fa04 f602 	lsl.w	r6, r4, r2
    5db0:	4235      	tst	r5, r6
    5db2:	d001      	beq.n	5db8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5db4:	1e49      	subs	r1, r1, #1
    5db6:	b2c9      	uxtb	r1, r1
    5db8:	b121      	cbz	r1, 5dc4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5dba:	1c52      	adds	r2, r2, #1
    5dbc:	b2d2      	uxtb	r2, r2
    5dbe:	2a08      	cmp	r2, #8
    5dc0:	d3f4      	bcc.n	5dac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5dc2:	e004      	b.n	5dce <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5dc4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5dc8:	e7dc      	b.n	5d84 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5dca:	1a89      	subs	r1, r1, r2
    5dcc:	b2c9      	uxtb	r1, r1
    5dce:	1c5b      	adds	r3, r3, #1
    5dd0:	b2db      	uxtb	r3, r3
    5dd2:	2b05      	cmp	r3, #5
    5dd4:	d3e3      	bcc.n	5d9e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5dd6:	201f      	movs	r0, #31
    5dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

00005ddc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5ddc:	7841      	ldrb	r1, [r0, #1]
    5dde:	b141      	cbz	r1, 5df2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5de0:	78c0      	ldrb	r0, [r0, #3]
    5de2:	2819      	cmp	r0, #25
    5de4:	d203      	bcs.n	5dee <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5de6:	4a04      	ldr	r2, [pc, #16]	; (5df8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5de8:	5c10      	ldrb	r0, [r2, r0]
    5dea:	4288      	cmp	r0, r1
    5dec:	d101      	bne.n	5df2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5dee:	2001      	movs	r0, #1
    5df0:	4770      	bx	lr
    5df2:	2000      	movs	r0, #0
    5df4:	4770      	bx	lr
    5df6:	0000      	.short	0x0000
    5df8:	0000fb4a 	.word	0x0000fb4a

00005dfc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5dfc:	b510      	push	{r4, lr}
    5dfe:	2201      	movs	r2, #1
    5e00:	70c1      	strb	r1, [r0, #3]
    5e02:	2919      	cmp	r1, #25
    5e04:	d202      	bcs.n	5e0c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5e06:	4a06      	ldr	r2, [pc, #24]	; (5e20 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5e08:	5c52      	ldrb	r2, [r2, r1]
    5e0a:	e006      	b.n	5e1a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5e0c:	29ff      	cmp	r1, #255	; 0xff
    5e0e:	d004      	beq.n	5e1a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5e10:	f240 31d5 	movw	r1, #981	; 0x3d5
    5e14:	202a      	movs	r0, #42	; 0x2a
    5e16:	f7fd ffb3 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e1a:	7042      	strb	r2, [r0, #1]
    5e1c:	bd10      	pop	{r4, pc}
    5e1e:	0000      	.short	0x0000
    5e20:	0000fb4a 	.word	0x0000fb4a

00005e24 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e28:	4c12      	ldr	r4, [pc, #72]	; (5e74 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e2a:	4607      	mov	r7, r0
    5e2c:	460e      	mov	r6, r1
    5e2e:	7da0      	ldrb	r0, [r4, #22]
    5e30:	b110      	cbz	r0, 5e38 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5e32:	8b20      	ldrh	r0, [r4, #24]
    5e34:	2800      	cmp	r0, #0
    5e36:	d012      	beq.n	5e5e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e38:	480e      	ldr	r0, [pc, #56]	; (5e74 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e3a:	3014      	adds	r0, #20
    5e3c:	4680      	mov	r8, r0
    5e3e:	f008 f920 	bl	e082 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e42:	b9a8      	cbnz	r0, 5e70 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e44:	8aa5      	ldrh	r5, [r4, #20]
    5e46:	8aa0      	ldrh	r0, [r4, #20]
    5e48:	4632      	mov	r2, r6
    5e4a:	4639      	mov	r1, r7
    5e4c:	f008 f951 	bl	e0f2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    5e50:	b138      	cbz	r0, 5e62 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5e52:	7da0      	ldrb	r0, [r4, #22]
    5e54:	b110      	cbz	r0, 5e5c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5e56:	8b20      	ldrh	r0, [r4, #24]
    5e58:	1e40      	subs	r0, r0, #1
    5e5a:	8320      	strh	r0, [r4, #24]
    5e5c:	2001      	movs	r0, #1
    5e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e62:	4640      	mov	r0, r8
    5e64:	f008 f90d 	bl	e082 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e68:	b910      	cbnz	r0, 5e70 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e6a:	8aa0      	ldrh	r0, [r4, #20]
    5e6c:	42a8      	cmp	r0, r5
    5e6e:	d1ea      	bne.n	5e46 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5e70:	2000      	movs	r0, #0
    5e72:	e7f4      	b.n	5e5e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e74:	2000104c 	.word	0x2000104c
    5e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5e7c:	468a      	mov	sl, r1
    5e7e:	4699      	mov	r9, r3
    5e80:	4615      	mov	r5, r2
    5e82:	4604      	mov	r4, r0
    5e84:	a901      	add	r1, sp, #4
    5e86:	f007 fd96 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e8a:	bbd8      	cbnz	r0, 5f04 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    5e8c:	9f02      	ldr	r7, [sp, #8]
    5e8e:	2001      	movs	r0, #1
    5e90:	3778      	adds	r7, #120	; 0x78
    5e92:	b18d      	cbz	r5, 5eb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x94>
    5e94:	4620      	mov	r0, r4
    5e96:	f7fe fb87 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5e9a:	0004      	movs	r4, r0
    5e9c:	d00e      	beq.n	5ebc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x98>
    5e9e:	4629      	mov	r1, r5
    5ea0:	f007 fa81 	bl	d3a6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5ea4:	0006      	movs	r6, r0
    5ea6:	d003      	beq.n	5eb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8c>
    5ea8:	4819      	ldr	r0, [pc, #100]	; (5f10 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xec>)
    5eaa:	8840      	ldrh	r0, [r0, #2]
    5eac:	42a8      	cmp	r0, r5
    5eae:	d207      	bcs.n	5ec0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    5eb0:	2000      	movs	r0, #0
    5eb2:	b004      	add	sp, #16
    5eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5eb8:	7538      	strb	r0, [r7, #20]
    5eba:	e023      	b.n	5f04 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    5ebc:	216e      	movs	r1, #110	; 0x6e
    5ebe:	e024      	b.n	5f0a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe6>
    5ec0:	4620      	mov	r0, r4
    5ec2:	4631      	mov	r1, r6
    5ec4:	aa03      	add	r2, sp, #12
    5ec6:	f007 fa67 	bl	d398 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    5eca:	9803      	ldr	r0, [sp, #12]
    5ecc:	f04f 0800 	mov.w	r8, #0
    5ed0:	f8a0 8000 	strh.w	r8, [r0]
    5ed4:	f880 8002 	strb.w	r8, [r0, #2]
    5ed8:	7d39      	ldrb	r1, [r7, #20]
    5eda:	b109      	cbz	r1, 5ee0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    5edc:	f04f 0a02 	mov.w	sl, #2
    5ee0:	4651      	mov	r1, sl
    5ee2:	f008 f848 	bl	df76 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5ee6:	4631      	mov	r1, r6
    5ee8:	2603      	movs	r6, #3
    5eea:	4620      	mov	r0, r4
    5eec:	464a      	mov	r2, r9
    5eee:	462b      	mov	r3, r5
    5ef0:	9600      	str	r6, [sp, #0]
    5ef2:	f007 f90e 	bl	d112 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    5ef6:	4620      	mov	r0, r4
    5ef8:	4629      	mov	r1, r5
    5efa:	f007 f9e3 	bl	d2c4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    5efe:	b118      	cbz	r0, 5f08 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    5f00:	f887 8014 	strb.w	r8, [r7, #20]
    5f04:	2001      	movs	r0, #1
    5f06:	e7d4      	b.n	5eb2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    5f08:	2184      	movs	r1, #132	; 0x84
    5f0a:	202b      	movs	r0, #43	; 0x2b
    5f0c:	f7fd ff38 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f10:	2000104c 	.word	0x2000104c

00005f14 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    5f14:	4901      	ldr	r1, [pc, #4]	; (5f1c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    5f16:	2001      	movs	r0, #1
    5f18:	7008      	strb	r0, [r1, #0]
    5f1a:	4770      	bx	lr
    5f1c:	2000027d 	.word	0x2000027d

00005f20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    5f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f24:	0006      	movs	r6, r0
    5f26:	d00a      	beq.n	5f3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    5f28:	4926      	ldr	r1, [pc, #152]	; (5fc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    5f2a:	2201      	movs	r2, #1
    5f2c:	7808      	ldrb	r0, [r1, #0]
    5f2e:	b148      	cbz	r0, 5f44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    5f30:	2000      	movs	r0, #0
    5f32:	7070      	strb	r0, [r6, #1]
    5f34:	2303      	movs	r3, #3
    5f36:	7033      	strb	r3, [r6, #0]
    5f38:	7132      	strb	r2, [r6, #4]
    5f3a:	7008      	strb	r0, [r1, #0]
    5f3c:	e03c      	b.n	5fb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    5f3e:	f240 21da 	movw	r1, #730	; 0x2da
    5f42:	e009      	b.n	5f58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    5f44:	4c1f      	ldr	r4, [pc, #124]	; (5fc4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    5f46:	1ce4      	adds	r4, r4, #3
    5f48:	7820      	ldrb	r0, [r4, #0]
    5f4a:	b940      	cbnz	r0, 5f5e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    5f4c:	1ca0      	adds	r0, r4, #2
    5f4e:	f008 f919 	bl	e184 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    5f52:	b120      	cbz	r0, 5f5e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    5f54:	f240 21e9 	movw	r1, #745	; 0x2e9
    5f58:	2010      	movs	r0, #16
    5f5a:	f7fd ff11 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f5e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    5f62:	2000      	movs	r0, #0
    5f64:	f7fe f8f0 	bl	4148 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5f68:	4f17      	ldr	r7, [pc, #92]	; (5fc8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    5f6a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5fcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    5f6e:	4605      	mov	r5, r0
    5f70:	6838      	ldr	r0, [r7, #0]
    5f72:	b130      	cbz	r0, 5f82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    5f74:	8860      	ldrh	r0, [r4, #2]
    5f76:	42a8      	cmp	r0, r5
    5f78:	d103      	bne.n	5f82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    5f7a:	4630      	mov	r0, r6
    5f7c:	f000 f9d2 	bl	6324 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    5f80:	e006      	b.n	5f90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
    5f82:	f8d9 0000 	ldr.w	r0, [r9]
    5f86:	b120      	cbz	r0, 5f92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
    5f88:	8860      	ldrh	r0, [r4, #2]
    5f8a:	4631      	mov	r1, r6
    5f8c:	f000 f920 	bl	61d0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
    5f90:	b990      	cbnz	r0, 5fb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    5f92:	1ca0      	adds	r0, r4, #2
    5f94:	f008 f8f6 	bl	e184 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    5f98:	b910      	cbnz	r0, 5fa0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    5f9a:	8861      	ldrh	r1, [r4, #2]
    5f9c:	4541      	cmp	r1, r8
    5f9e:	d1e7      	bne.n	5f70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
    5fa0:	480b      	ldr	r0, [pc, #44]	; (5fd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
    5fa2:	6801      	ldr	r1, [r0, #0]
    5fa4:	b111      	cbz	r1, 5fac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    5fa6:	4630      	mov	r0, r6
    5fa8:	4788      	blx	r1
    5faa:	b928      	cbnz	r0, 5fb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    5fac:	4809      	ldr	r0, [pc, #36]	; (5fd4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
    5fae:	6801      	ldr	r1, [r0, #0]
    5fb0:	b129      	cbz	r1, 5fbe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    5fb2:	4630      	mov	r0, r6
    5fb4:	4788      	blx	r1
    5fb6:	b110      	cbz	r0, 5fbe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    5fb8:	2001      	movs	r0, #1
    5fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fbe:	2000      	movs	r0, #0
    5fc0:	e7fb      	b.n	5fba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    5fc2:	0000      	.short	0x0000
    5fc4:	2000027d 	.word	0x2000027d
    5fc8:	200000f4 	.word	0x200000f4
    5fcc:	200000f0 	.word	0x200000f0
    5fd0:	200000f8 	.word	0x200000f8
    5fd4:	200000ec 	.word	0x200000ec

00005fd8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    5fd8:	4901      	ldr	r1, [pc, #4]	; (5fe0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    5fda:	7008      	strb	r0, [r1, #0]
    5fdc:	f000 b996 	b.w	630c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    5fe0:	2000027c 	.word	0x2000027c

00005fe4 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>:
    5fe4:	4902      	ldr	r1, [pc, #8]	; (5ff0 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA+0xc>)
    5fe6:	2001      	movs	r0, #1
    5fe8:	7048      	strb	r0, [r1, #1]
    5fea:	f000 b809 	b.w	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5fee:	0000      	.short	0x0000
    5ff0:	2000027d 	.word	0x2000027d

00005ff4 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>:
    5ff4:	4801      	ldr	r0, [pc, #4]	; (5ffc <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x8>)
    5ff6:	7840      	ldrb	r0, [r0, #1]
    5ff8:	4770      	bx	lr
    5ffa:	0000      	.short	0x0000
    5ffc:	2000027d 	.word	0x2000027d

00006000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6000:	4801      	ldr	r0, [pc, #4]	; (6008 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6002:	7800      	ldrb	r0, [r0, #0]
    6004:	f7fd bcac 	b.w	3960 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6008:	2000027c 	.word	0x2000027c

0000600c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    600c:	4904      	ldr	r1, [pc, #16]	; (6020 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14>)
    600e:	4803      	ldr	r0, [pc, #12]	; (601c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x10>)
    6010:	6008      	str	r0, [r1, #0]
    6012:	4905      	ldr	r1, [pc, #20]	; (6028 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c>)
    6014:	4803      	ldr	r0, [pc, #12]	; (6024 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x18>)
    6016:	6008      	str	r0, [r1, #0]
    6018:	4770      	bx	lr
    601a:	0000      	.short	0x0000
    601c:	0000889d 	.word	0x0000889d
    6020:	200000f0 	.word	0x200000f0
    6024:	00004aa9 	.word	0x00004aa9
    6028:	200000f8 	.word	0x200000f8

0000602c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    602c:	4902      	ldr	r1, [pc, #8]	; (6038 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    602e:	4801      	ldr	r0, [pc, #4]	; (6034 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    6030:	6008      	str	r0, [r1, #0]
    6032:	4770      	bx	lr
    6034:	00006591 	.word	0x00006591
    6038:	200000f4 	.word	0x200000f4
    603c:	b570      	push	{r4, r5, r6, lr}
    603e:	4604      	mov	r4, r0
    6040:	7800      	ldrb	r0, [r0, #0]
    6042:	2805      	cmp	r0, #5
    6044:	d001      	beq.n	604a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    6046:	216d      	movs	r1, #109	; 0x6d
    6048:	e056      	b.n	60f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    604a:	7ba0      	ldrb	r0, [r4, #14]
    604c:	06c0      	lsls	r0, r0, #27
    604e:	d401      	bmi.n	6054 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    6050:	216e      	movs	r1, #110	; 0x6e
    6052:	e051      	b.n	60f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6054:	221c      	movs	r2, #28
    6056:	1d21      	adds	r1, r4, #4
    6058:	482d      	ldr	r0, [pc, #180]	; (6110 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    605a:	f006 faa1 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    605e:	482c      	ldr	r0, [pc, #176]	; (6110 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6060:	7b22      	ldrb	r2, [r4, #12]
    6062:	f104 0120 	add.w	r1, r4, #32
    6066:	301c      	adds	r0, #28
    6068:	f006 fa9a 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    606c:	4828      	ldr	r0, [pc, #160]	; (6110 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    606e:	f04f 0201 	mov.w	r2, #1
    6072:	7a81      	ldrb	r1, [r0, #10]
    6074:	0749      	lsls	r1, r1, #29
    6076:	d502      	bpl.n	607e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    6078:	7cc1      	ldrb	r1, [r0, #19]
    607a:	29fe      	cmp	r1, #254	; 0xfe
    607c:	d00c      	beq.n	6098 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    607e:	2304      	movs	r3, #4
    6080:	7023      	strb	r3, [r4, #0]
    6082:	6801      	ldr	r1, [r0, #0]
    6084:	6061      	str	r1, [r4, #4]
    6086:	6841      	ldr	r1, [r0, #4]
    6088:	60a1      	str	r1, [r4, #8]
    608a:	8901      	ldrh	r1, [r0, #8]
    608c:	81a1      	strh	r1, [r4, #12]
    608e:	7a81      	ldrb	r1, [r0, #10]
    6090:	070d      	lsls	r5, r1, #28
    6092:	d519      	bpl.n	60c8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    6094:	73a3      	strb	r3, [r4, #14]
    6096:	e02b      	b.n	60f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    6098:	2113      	movs	r1, #19
    609a:	7021      	strb	r1, [r4, #0]
    609c:	7801      	ldrb	r1, [r0, #0]
    609e:	7121      	strb	r1, [r4, #4]
    60a0:	7162      	strb	r2, [r4, #5]
    60a2:	7841      	ldrb	r1, [r0, #1]
    60a4:	71a1      	strb	r1, [r4, #6]
    60a6:	f8d0 1002 	ldr.w	r1, [r0, #2]
    60aa:	f8c4 1007 	str.w	r1, [r4, #7]
    60ae:	88c1      	ldrh	r1, [r0, #6]
    60b0:	f8a4 100b 	strh.w	r1, [r4, #11]
    60b4:	21fe      	movs	r1, #254	; 0xfe
    60b6:	7361      	strb	r1, [r4, #13]
    60b8:	6941      	ldr	r1, [r0, #20]
    60ba:	f8c4 100e 	str.w	r1, [r4, #14]
    60be:	8b01      	ldrh	r1, [r0, #24]
    60c0:	8261      	strh	r1, [r4, #18]
    60c2:	7a40      	ldrb	r0, [r0, #9]
    60c4:	7520      	strb	r0, [r4, #20]
    60c6:	bd70      	pop	{r4, r5, r6, pc}
    60c8:	07cb      	lsls	r3, r1, #31
    60ca:	d003      	beq.n	60d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    60cc:	078b      	lsls	r3, r1, #30
    60ce:	d501      	bpl.n	60d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    60d0:	2100      	movs	r1, #0
    60d2:	e00c      	b.n	60ee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    60d4:	074b      	lsls	r3, r1, #29
    60d6:	d501      	bpl.n	60dc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    60d8:	73a2      	strb	r2, [r4, #14]
    60da:	e009      	b.n	60f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    60dc:	07ca      	lsls	r2, r1, #31
    60de:	d001      	beq.n	60e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
    60e0:	21b5      	movs	r1, #181	; 0xb5
    60e2:	e009      	b.n	60f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    60e4:	0789      	lsls	r1, r1, #30
    60e6:	d501      	bpl.n	60ec <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
    60e8:	2102      	movs	r1, #2
    60ea:	e000      	b.n	60ee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    60ec:	2103      	movs	r1, #3
    60ee:	73a1      	strb	r1, [r4, #14]
    60f0:	7a02      	ldrb	r2, [r0, #8]
    60f2:	2a1f      	cmp	r2, #31
    60f4:	d903      	bls.n	60fe <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    60f6:	21b8      	movs	r1, #184	; 0xb8
    60f8:	2010      	movs	r0, #16
    60fa:	f7fd fe41 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60fe:	f104 000f 	add.w	r0, r4, #15
    6102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6106:	4902      	ldr	r1, [pc, #8]	; (6110 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6108:	311c      	adds	r1, #28
    610a:	f006 ba49 	b.w	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    610e:	0000      	.short	0x0000
    6110:	20001068 	.word	0x20001068
    6114:	b510      	push	{r4, lr}
    6116:	492d      	ldr	r1, [pc, #180]	; (61cc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
    6118:	b086      	sub	sp, #24
    611a:	7c8a      	ldrb	r2, [r1, #18]
    611c:	7801      	ldrb	r1, [r0, #0]
    611e:	07d3      	lsls	r3, r2, #31
    6120:	d101      	bne.n	6126 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
    6122:	291d      	cmp	r1, #29
    6124:	d004      	beq.n	6130 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
    6126:	291c      	cmp	r1, #28
    6128:	d01f      	beq.n	616a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
    612a:	2915      	cmp	r1, #21
    612c:	d046      	beq.n	61bc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    612e:	e04a      	b.n	61c6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6130:	8880      	ldrh	r0, [r0, #4]
    6132:	f8ad 0000 	strh.w	r0, [sp]
    6136:	a902      	add	r1, sp, #8
    6138:	f007 fc3d 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    613c:	b110      	cbz	r0, 6144 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
    613e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    6142:	e035      	b.n	61b0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6144:	9803      	ldr	r0, [sp, #12]
    6146:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    614a:	f88d 1002 	strb.w	r1, [sp, #2]
    614e:	7841      	ldrb	r1, [r0, #1]
    6150:	f88d 1003 	strb.w	r1, [sp, #3]
    6154:	8840      	ldrh	r0, [r0, #2]
    6156:	f8ad 0004 	strh.w	r0, [sp, #4]
    615a:	2102      	movs	r1, #2
    615c:	4668      	mov	r0, sp
    615e:	f004 fd45 	bl	abec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6162:	b340      	cbz	r0, 61b6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6164:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    6168:	e022      	b.n	61b0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    616a:	0791      	lsls	r1, r2, #30
    616c:	d42b      	bmi.n	61c6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    616e:	8884      	ldrh	r4, [r0, #4]
    6170:	a903      	add	r1, sp, #12
    6172:	4620      	mov	r0, r4
    6174:	f008 ff8e 	bl	f094 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6178:	b110      	cbz	r0, 6180 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    617a:	f240 11a5 	movw	r1, #421	; 0x1a5
    617e:	e017      	b.n	61b0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6180:	f8ad 4000 	strh.w	r4, [sp]
    6184:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6188:	f8ad 0002 	strh.w	r0, [sp, #2]
    618c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6190:	f8ad 0004 	strh.w	r0, [sp, #4]
    6194:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6198:	f8ad 0006 	strh.w	r0, [sp, #6]
    619c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    61a0:	f8ad 0008 	strh.w	r0, [sp, #8]
    61a4:	4668      	mov	r0, sp
    61a6:	f008 ffa0 	bl	f0ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    61aa:	b120      	cbz	r0, 61b6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    61ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    61b0:	2010      	movs	r0, #16
    61b2:	f7fd fde5 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61b6:	2001      	movs	r0, #1
    61b8:	b006      	add	sp, #24
    61ba:	bd10      	pop	{r4, pc}
    61bc:	0751      	lsls	r1, r2, #29
    61be:	d402      	bmi.n	61c6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    61c0:	7b80      	ldrb	r0, [r0, #14]
    61c2:	07c0      	lsls	r0, r0, #31
    61c4:	d0f7      	beq.n	61b6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    61c6:	2000      	movs	r0, #0
    61c8:	e7f6      	b.n	61b8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
    61ca:	0000      	.short	0x0000
    61cc:	2000104c 	.word	0x2000104c
    61d0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61d4:	b087      	sub	sp, #28
    61d6:	460c      	mov	r4, r1
    61d8:	a902      	add	r1, sp, #8
    61da:	9807      	ldr	r0, [sp, #28]
    61dc:	f007 fbeb 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    61e0:	2800      	cmp	r0, #0
    61e2:	d17d      	bne.n	62e0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    61e4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6308 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
    61e8:	f04f 0801 	mov.w	r8, #1
    61ec:	4682      	mov	sl, r0
    61ee:	9803      	ldr	r0, [sp, #12]
    61f0:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    61f4:	2800      	cmp	r0, #0
    61f6:	d00c      	beq.n	6212 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    61f8:	f8d9 2000 	ldr.w	r2, [r9]
    61fc:	b162      	cbz	r2, 6218 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    61fe:	4621      	mov	r1, r4
    6200:	9807      	ldr	r0, [sp, #28]
    6202:	4790      	blx	r2
    6204:	b140      	cbz	r0, 6218 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    6206:	4620      	mov	r0, r4
    6208:	f7ff ff84 	bl	6114 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
    620c:	2800      	cmp	r0, #0
    620e:	d1ee      	bne.n	61ee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
    6210:	2001      	movs	r0, #1
    6212:	b009      	add	sp, #36	; 0x24
    6214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6218:	9d03      	ldr	r5, [sp, #12]
    621a:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    621e:	3578      	adds	r5, #120	; 0x78
    6220:	b950      	cbnz	r0, 6238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6222:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6226:	f88d 0004 	strb.w	r0, [sp, #4]
    622a:	9801      	ldr	r0, [sp, #4]
    622c:	9001      	str	r0, [sp, #4]
    622e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6232:	b108      	cbz	r0, 6238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6234:	2001      	movs	r0, #1
    6236:	e000      	b.n	623a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
    6238:	2000      	movs	r0, #0
    623a:	4683      	mov	fp, r0
    623c:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    6240:	b1c0      	cbz	r0, 6274 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    6242:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    6246:	0780      	lsls	r0, r0, #30
    6248:	d514      	bpl.n	6274 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    624a:	f884 a001 	strb.w	sl, [r4, #1]
    624e:	f884 8000 	strb.w	r8, [r4]
    6252:	f884 a004 	strb.w	sl, [r4, #4]
    6256:	9907      	ldr	r1, [sp, #28]
    6258:	f8a4 1005 	strh.w	r1, [r4, #5]
    625c:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    6260:	71e1      	strb	r1, [r4, #7]
    6262:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6266:	8121      	strh	r1, [r4, #8]
    6268:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    626c:	8161      	strh	r1, [r4, #10]
    626e:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    6272:	e7c8      	b.n	6206 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6274:	9807      	ldr	r0, [sp, #28]
    6276:	f7fe f997 	bl	45a8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    627a:	0007      	movs	r7, r0
    627c:	d00d      	beq.n	629a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    627e:	f007 f845 	bl	d30c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6282:	0006      	movs	r6, r0
    6284:	d015      	beq.n	62b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
    6286:	f884 a001 	strb.w	sl, [r4, #1]
    628a:	200f      	movs	r0, #15
    628c:	7020      	strb	r0, [r4, #0]
    628e:	9807      	ldr	r0, [sp, #28]
    6290:	80e0      	strh	r0, [r4, #6]
    6292:	8126      	strh	r6, [r4, #8]
    6294:	f884 8004 	strb.w	r8, [r4, #4]
    6298:	e007      	b.n	62aa <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
    629a:	f240 2133 	movw	r1, #563	; 0x233
    629e:	e02d      	b.n	62fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
    62a0:	2100      	movs	r1, #0
    62a2:	4638      	mov	r0, r7
    62a4:	460a      	mov	r2, r1
    62a6:	f007 f955 	bl	d554 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    62aa:	1e76      	subs	r6, r6, #1
    62ac:	b2b6      	uxth	r6, r6
    62ae:	d2f7      	bcs.n	62a0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
    62b0:	e7a9      	b.n	6206 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    62b2:	9807      	ldr	r0, [sp, #28]
    62b4:	f7fe f962 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    62b8:	b1f0      	cbz	r0, 62f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
    62ba:	f1bb 0f00 	cmp.w	fp, #0
    62be:	d020      	beq.n	6302 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    62c0:	f006 ff3e 	bl	d140 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    62c4:	b160      	cbz	r0, 62e0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    62c6:	9807      	ldr	r0, [sp, #28]
    62c8:	f007 fa73 	bl	d7b2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    62cc:	2100      	movs	r1, #0
    62ce:	9807      	ldr	r0, [sp, #28]
    62d0:	f7fd ffd4 	bl	427c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    62d4:	f884 a001 	strb.w	sl, [r4, #1]
    62d8:	210c      	movs	r1, #12
    62da:	4650      	mov	r0, sl
    62dc:	7021      	strb	r1, [r4, #0]
    62de:	e000      	b.n	62e2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
    62e0:	e00f      	b.n	6302 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    62e2:	f884 a004 	strb.w	sl, [r4, #4]
    62e6:	9907      	ldr	r1, [sp, #28]
    62e8:	f8a4 1005 	strh.w	r1, [r4, #5]
    62ec:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    62f0:	71e1      	strb	r1, [r4, #7]
    62f2:	3524      	adds	r5, #36	; 0x24
    62f4:	7028      	strb	r0, [r5, #0]
    62f6:	e786      	b.n	6206 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    62f8:	f240 2151 	movw	r1, #593	; 0x251
    62fc:	2010      	movs	r0, #16
    62fe:	f7fd fd3f 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6302:	2000      	movs	r0, #0
    6304:	e785      	b.n	6212 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    6306:	0000      	.short	0x0000
    6308:	200000f0 	.word	0x200000f0
    630c:	4804      	ldr	r0, [pc, #16]	; (6320 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    630e:	2100      	movs	r1, #0
    6310:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6314:	7001      	strb	r1, [r0, #0]
    6316:	8042      	strh	r2, [r0, #2]
    6318:	1f00      	subs	r0, r0, #4
    631a:	f8a0 1001 	strh.w	r1, [r0, #1]
    631e:	4770      	bx	lr
    6320:	20000280 	.word	0x20000280
    6324:	b570      	push	{r4, r5, r6, lr}
    6326:	4604      	mov	r4, r0
    6328:	481b      	ldr	r0, [pc, #108]	; (6398 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
    632a:	6801      	ldr	r1, [r0, #0]
    632c:	b319      	cbz	r1, 6376 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    632e:	4620      	mov	r0, r4
    6330:	4788      	blx	r1
    6332:	b300      	cbz	r0, 6376 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    6334:	7820      	ldrb	r0, [r4, #0]
    6336:	2818      	cmp	r0, #24
    6338:	d002      	beq.n	6340 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
    633a:	2805      	cmp	r0, #5
    633c:	d016      	beq.n	636c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
    633e:	e018      	b.n	6372 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6340:	7920      	ldrb	r0, [r4, #4]
    6342:	2801      	cmp	r0, #1
    6344:	d115      	bne.n	6372 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6346:	88e0      	ldrh	r0, [r4, #6]
    6348:	2100      	movs	r1, #0
    634a:	f007 f9ca 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    634e:	0004      	movs	r4, r0
    6350:	d00f      	beq.n	6372 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6352:	8820      	ldrh	r0, [r4, #0]
    6354:	f007 fa2d 	bl	d7b2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6358:	8820      	ldrh	r0, [r4, #0]
    635a:	2100      	movs	r1, #0
    635c:	f7fd ff8e 	bl	427c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6360:	b138      	cbz	r0, 6372 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6362:	f44f 7185 	mov.w	r1, #266	; 0x10a
    6366:	2010      	movs	r0, #16
    6368:	f7fd fd0a 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    636c:	4620      	mov	r0, r4
    636e:	f7ff fe65 	bl	603c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    6372:	2001      	movs	r0, #1
    6374:	bd70      	pop	{r4, r5, r6, pc}
    6376:	4d09      	ldr	r5, [pc, #36]	; (639c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
    6378:	7868      	ldrb	r0, [r5, #1]
    637a:	2800      	cmp	r0, #0
    637c:	d0fa      	beq.n	6374 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
    637e:	2600      	movs	r6, #0
    6380:	7066      	strb	r6, [r4, #1]
    6382:	2014      	movs	r0, #20
    6384:	7020      	strb	r0, [r4, #0]
    6386:	2220      	movs	r2, #32
    6388:	4631      	mov	r1, r6
    638a:	1d20      	adds	r0, r4, #4
    638c:	f006 f982 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6390:	2002      	movs	r0, #2
    6392:	7120      	strb	r0, [r4, #4]
    6394:	706e      	strb	r6, [r5, #1]
    6396:	e7ec      	b.n	6372 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6398:	200000f4 	.word	0x200000f4
    639c:	2000027d 	.word	0x2000027d

000063a0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    63a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    63a2:	f06f 021f 	mvn.w	r2, #31
    63a6:	0c01      	lsrs	r1, r0, #16
    63a8:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    63ac:	251f      	movs	r5, #31
    63ae:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    63b2:	3854      	subs	r0, #84	; 0x54
    63b4:	d00d      	beq.n	63d2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63b6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    63ba:	3855      	subs	r0, #85	; 0x55
    63bc:	d009      	beq.n	63d2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63be:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    63c2:	38aa      	subs	r0, #170	; 0xaa
    63c4:	d005      	beq.n	63d2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63c6:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    63ca:	38aa      	subs	r0, #170	; 0xaa
    63cc:	d001      	beq.n	63d2 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    63ce:	2001      	movs	r0, #1
    63d0:	e000      	b.n	63d4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    63d2:	2000      	movs	r0, #0
    63d4:	2200      	movs	r2, #0
    63d6:	4613      	mov	r3, r2
    63d8:	ea4f 0402 	mov.w	r4, r2
    63dc:	ea82 0701 	eor.w	r7, r2, r1
    63e0:	43ff      	mvns	r7, r7
    63e2:	431f      	orrs	r7, r3
    63e4:	1c7f      	adds	r7, r7, #1
    63e6:	d00f      	beq.n	6408 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    63e8:	f006 0701 	and.w	r7, r6, #1
    63ec:	0852      	lsrs	r2, r2, #1
    63ee:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    63f2:	f005 0701 	and.w	r7, r5, #1
    63f6:	085b      	lsrs	r3, r3, #1
    63f8:	0876      	lsrs	r6, r6, #1
    63fa:	086d      	lsrs	r5, r5, #1
    63fc:	1c64      	adds	r4, r4, #1
    63fe:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6402:	2c16      	cmp	r4, #22
    6404:	d3ea      	bcc.n	63dc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6408:	2000      	movs	r0, #0
    640a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000640c <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    640c:	4801      	ldr	r0, [pc, #4]	; (6414 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    640e:	f008 b846 	b.w	e49e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    6412:	0000      	.short	0x0000
    6414:	200000fc 	.word	0x200000fc

00006418 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    6418:	b510      	push	{r4, lr}
    641a:	4604      	mov	r4, r0
    641c:	f008 f82e 	bl	e47c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6420:	b310      	cbz	r0, 6468 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6422:	43e0      	mvns	r0, r4
    6424:	f008 f82a 	bl	e47c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6428:	b1f0      	cbz	r0, 6468 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    642a:	16a0      	asrs	r0, r4, #26
    642c:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    6430:	1e41      	subs	r1, r0, #1
    6432:	4208      	tst	r0, r1
    6434:	d018      	beq.n	6468 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6436:	ea84 0064 	eor.w	r0, r4, r4, asr #1
    643a:	f007 fae5 	bl	da08 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>
    643e:	2818      	cmp	r0, #24
    6440:	d812      	bhi.n	6468 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6442:	b2a0      	uxth	r0, r4
    6444:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    6448:	d107      	bne.n	645a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x42>
    644a:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    644e:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    6452:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    6456:	4281      	cmp	r1, r0
    6458:	d006      	beq.n	6468 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    645a:	4804      	ldr	r0, [pc, #16]	; (646c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    645c:	4044      	eors	r4, r0
    645e:	1e60      	subs	r0, r4, #1
    6460:	4204      	tst	r4, r0
    6462:	d001      	beq.n	6468 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6464:	2001      	movs	r0, #1
    6466:	bd10      	pop	{r4, pc}
    6468:	2000      	movs	r0, #0
    646a:	bd10      	pop	{r4, pc}
    646c:	8e89bed6 	.word	0x8e89bed6
    6470:	4801      	ldr	r0, [pc, #4]	; (6478 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x60>)
    6472:	f000 b803 	b.w	647c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    6476:	0000      	.short	0x0000
    6478:	200000fc 	.word	0x200000fc

0000647c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    647c:	b510      	push	{r4, lr}
    647e:	e9d0 2100 	ldrd	r2, r1, [r0]
    6482:	4b09      	ldr	r3, [pc, #36]	; (64a8 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    6484:	4c09      	ldr	r4, [pc, #36]	; (64ac <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    6486:	4353      	muls	r3, r2
    6488:	4354      	muls	r4, r2
    648a:	4051      	eors	r1, r2
    648c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    6490:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6494:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6498:	e9c0 2100 	strd	r2, r1, [r0]
    649c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    64a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    64a4:	4618      	mov	r0, r3
    64a6:	bd10      	pop	{r4, pc}
    64a8:	c6ef3760 	.word	0xc6ef3760
    64ac:	9e3779bb 	.word	0x9e3779bb

000064b0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    64b0:	4801      	ldr	r0, [pc, #4]	; (64b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    64b2:	6840      	ldr	r0, [r0, #4]
    64b4:	3080      	adds	r0, #128	; 0x80
    64b6:	4770      	bx	lr
    64b8:	20000104 	.word	0x20000104

000064bc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    64bc:	b510      	push	{r4, lr}
    64be:	4c1f      	ldr	r4, [pc, #124]	; (653c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    64c0:	6860      	ldr	r0, [r4, #4]
    64c2:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    64c6:	f008 f80b 	bl	e4e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    64ca:	6861      	ldr	r1, [r4, #4]
    64cc:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    64d0:	3132      	adds	r1, #50	; 0x32
    64d2:	f7fe faa7 	bl	4a24 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    64d6:	6860      	ldr	r0, [r4, #4]
    64d8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    64dc:	f008 f807 	bl	e4ee <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    64e0:	6861      	ldr	r1, [r4, #4]
    64e2:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    64e6:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    64ea:	3132      	adds	r1, #50	; 0x32
    64ec:	f007 ffe4 	bl	e4b8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    64f0:	b930      	cbnz	r0, 6500 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    64f2:	6861      	ldr	r1, [r4, #4]
    64f4:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    64f8:	3132      	adds	r1, #50	; 0x32
    64fa:	f007 ffe6 	bl	e4ca <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    64fe:	b108      	cbz	r0, 6504 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    6500:	2101      	movs	r1, #1
    6502:	e000      	b.n	6506 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6504:	2100      	movs	r1, #0
    6506:	6860      	ldr	r0, [r4, #4]
    6508:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    650c:	b919      	cbnz	r1, 6516 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    650e:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    6512:	2900      	cmp	r1, #0
    6514:	d010      	beq.n	6538 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    6516:	2100      	movs	r1, #0
    6518:	6781      	str	r1, [r0, #120]	; 0x78
    651a:	f005 fecc 	bl	c2b6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    651e:	6861      	ldr	r1, [r4, #4]
    6520:	6448      	str	r0, [r1, #68]	; 0x44
    6522:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    6526:	b110      	cbz	r0, 652e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    6528:	2000      	movs	r0, #0
    652a:	f7ff f863 	bl	55f4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    652e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6532:	2000      	movs	r0, #0
    6534:	f000 bdfa 	b.w	712c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x874>
    6538:	bd10      	pop	{r4, pc}
    653a:	0000      	.short	0x0000
    653c:	20000104 	.word	0x20000104

00006540 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    6540:	b510      	push	{r4, lr}
    6542:	4c09      	ldr	r4, [pc, #36]	; (6568 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    6544:	2803      	cmp	r0, #3
    6546:	6864      	ldr	r4, [r4, #4]
    6548:	d109      	bne.n	655e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    654a:	63e1      	str	r1, [r4, #60]	; 0x3c
    654c:	b13b      	cbz	r3, 655e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    654e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    6552:	6819      	ldr	r1, [r3, #0]
    6554:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    6558:	8899      	ldrh	r1, [r3, #4]
    655a:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    655e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6562:	2000      	movs	r0, #0
    6564:	bd10      	pop	{r4, pc}
    6566:	0000      	.short	0x0000
    6568:	20000104 	.word	0x20000104

0000656c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    656c:	4807      	ldr	r0, [pc, #28]	; (658c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    656e:	b508      	push	{r3, lr}
    6570:	6840      	ldr	r0, [r0, #4]
    6572:	7801      	ldrb	r1, [r0, #0]
    6574:	f88d 1000 	strb.w	r1, [sp]
    6578:	9900      	ldr	r1, [sp, #0]
    657a:	9100      	str	r1, [sp, #0]
    657c:	f89d 1000 	ldrb.w	r1, [sp]
    6580:	b109      	cbz	r1, 6586 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    6582:	8880      	ldrh	r0, [r0, #4]
    6584:	bd08      	pop	{r3, pc}
    6586:	f64f 70ff 	movw	r0, #65535	; 0xffff
    658a:	bd08      	pop	{r3, pc}
    658c:	20000104 	.word	0x20000104

00006590 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    6590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6592:	4604      	mov	r4, r0
    6594:	f007 fff3 	bl	e57e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    6598:	bb48      	cbnz	r0, 65ee <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    659a:	4e17      	ldr	r6, [pc, #92]	; (65f8 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    659c:	6870      	ldr	r0, [r6, #4]
    659e:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    65a2:	f88d 1000 	strb.w	r1, [sp]
    65a6:	9900      	ldr	r1, [sp, #0]
    65a8:	9100      	str	r1, [sp, #0]
    65aa:	f89d 1000 	ldrb.w	r1, [sp]
    65ae:	2500      	movs	r5, #0
    65b0:	b139      	cbz	r1, 65c2 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    65b2:	7065      	strb	r5, [r4, #1]
    65b4:	2107      	movs	r1, #7
    65b6:	7021      	strb	r1, [r4, #0]
    65b8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    65ba:	6061      	str	r1, [r4, #4]
    65bc:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    65c0:	e015      	b.n	65ee <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    65c2:	4620      	mov	r0, r4
    65c4:	f000 f9d0 	bl	6968 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    65c8:	b988      	cbnz	r0, 65ee <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    65ca:	6870      	ldr	r0, [r6, #4]
    65cc:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    65d0:	f88d 1000 	strb.w	r1, [sp]
    65d4:	9900      	ldr	r1, [sp, #0]
    65d6:	9100      	str	r1, [sp, #0]
    65d8:	f89d 1000 	ldrb.w	r1, [sp]
    65dc:	b149      	cbz	r1, 65f2 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    65de:	7065      	strb	r5, [r4, #1]
    65e0:	2118      	movs	r1, #24
    65e2:	7021      	strb	r1, [r4, #0]
    65e4:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    65e8:	6061      	str	r1, [r4, #4]
    65ea:	300a      	adds	r0, #10
    65ec:	7785      	strb	r5, [r0, #30]
    65ee:	2001      	movs	r0, #1
    65f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65f2:	2000      	movs	r0, #0
    65f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65f6:	0000      	.short	0x0000
    65f8:	20000104 	.word	0x20000104

000065fc <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    65fc:	4902      	ldr	r1, [pc, #8]	; (6608 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    65fe:	6849      	ldr	r1, [r1, #4]
    6600:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    6604:	2000      	movs	r0, #0
    6606:	4770      	bx	lr
    6608:	20000104 	.word	0x20000104

0000660c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    660c:	4809      	ldr	r0, [pc, #36]	; (6634 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    660e:	6841      	ldr	r1, [r0, #4]
    6610:	6d48      	ldr	r0, [r1, #84]	; 0x54
    6612:	b168      	cbz	r0, 6630 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    6614:	f101 0059 	add.w	r0, r1, #89	; 0x59
    6618:	2201      	movs	r2, #1
    661a:	7002      	strb	r2, [r0, #0]
    661c:	2300      	movs	r3, #0
    661e:	654b      	str	r3, [r1, #84]	; 0x54
    6620:	7003      	strb	r3, [r0, #0]
    6622:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    6626:	4082      	lsls	r2, r0
    6628:	4803      	ldr	r0, [pc, #12]	; (6638 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    662a:	6002      	str	r2, [r0, #0]
    662c:	2000      	movs	r0, #0
    662e:	4770      	bx	lr
    6630:	200c      	movs	r0, #12
    6632:	4770      	bx	lr
    6634:	20000104 	.word	0x20000104
    6638:	4001f508 	.word	0x4001f508

0000663c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    663c:	4909      	ldr	r1, [pc, #36]	; (6664 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    663e:	b510      	push	{r4, lr}
    6640:	6088      	str	r0, [r1, #8]
    6642:	68c8      	ldr	r0, [r1, #12]
    6644:	b150      	cbz	r0, 665c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    6646:	f000 ff73 	bl	7530 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    664a:	f000 f885 	bl	6758 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    664e:	2800      	cmp	r0, #0
    6650:	d007      	beq.n	6662 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    6652:	f640 01f9 	movw	r1, #2297	; 0x8f9
    6656:	2032      	movs	r0, #50	; 0x32
    6658:	f7fd fb92 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    665c:	f640 01f5 	movw	r1, #2293	; 0x8f5
    6660:	e7f9      	b.n	6656 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    6662:	bd10      	pop	{r4, pc}
    6664:	20000104 	.word	0x20000104

00006668 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    6668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    666c:	4c0f      	ldr	r4, [pc, #60]	; (66ac <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    666e:	4605      	mov	r5, r0
    6670:	4616      	mov	r6, r2
    6672:	6860      	ldr	r0, [r4, #4]
    6674:	460f      	mov	r7, r1
    6676:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    667a:	f007 ff38 	bl	e4ee <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    667e:	b158      	cbz	r0, 6698 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6680:	b955      	cbnz	r5, 6698 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6682:	4638      	mov	r0, r7
    6684:	f007 ff2c 	bl	e4e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6688:	4631      	mov	r1, r6
    668a:	f007 f933 	bl	d8f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    668e:	2808      	cmp	r0, #8
    6690:	d002      	beq.n	6698 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6692:	2001      	movs	r0, #1
    6694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6698:	6860      	ldr	r0, [r4, #4]
    669a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    669e:	f007 ff1f 	bl	e4e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    66a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66a6:	f7fe b9e9 	b.w	4a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    66aa:	0000      	.short	0x0000
    66ac:	20000104 	.word	0x20000104

000066b0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    66b0:	b570      	push	{r4, r5, r6, lr}
    66b2:	4c13      	ldr	r4, [pc, #76]	; (6700 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    66b4:	4615      	mov	r5, r2
    66b6:	460e      	mov	r6, r1
    66b8:	2800      	cmp	r0, #0
    66ba:	d016      	beq.n	66ea <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    66bc:	f04f 0200 	mov.w	r2, #0
    66c0:	6861      	ldr	r1, [r4, #4]
    66c2:	f801 2f39 	strb.w	r2, [r1, #57]!
    66c6:	7248      	strb	r0, [r1, #9]
    66c8:	f04f 0008 	mov.w	r0, #8
    66cc:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    66d0:	d114      	bne.n	66fc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66d2:	4630      	mov	r0, r6
    66d4:	f007 ff04 	bl	e4e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    66d8:	4629      	mov	r1, r5
    66da:	f007 f90b 	bl	d8f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    66de:	6861      	ldr	r1, [r4, #4]
    66e0:	2808      	cmp	r0, #8
    66e2:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    66e6:	d003      	beq.n	66f0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    66e8:	e008      	b.n	66fc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66ea:	f04f 0201 	mov.w	r2, #1
    66ee:	e7e7      	b.n	66c0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    66f0:	4630      	mov	r0, r6
    66f2:	f007 fefc 	bl	e4ee <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    66f6:	b108      	cbz	r0, 66fc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    66f8:	2012      	movs	r0, #18
    66fa:	bd70      	pop	{r4, r5, r6, pc}
    66fc:	2000      	movs	r0, #0
    66fe:	bd70      	pop	{r4, r5, r6, pc}
    6700:	20000104 	.word	0x20000104

00006704 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    6704:	4902      	ldr	r1, [pc, #8]	; (6710 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    6706:	4801      	ldr	r0, [pc, #4]	; (670c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    6708:	60c8      	str	r0, [r1, #12]
    670a:	4770      	bx	lr
    670c:	00007778 	.word	0x00007778
    6710:	20000104 	.word	0x20000104

00006714 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    6714:	4902      	ldr	r1, [pc, #8]	; (6720 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    6716:	6849      	ldr	r1, [r1, #4]
    6718:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    671c:	4770      	bx	lr
    671e:	0000      	.short	0x0000
    6720:	20000104 	.word	0x20000104

00006724 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    6724:	b570      	push	{r4, r5, r6, lr}
    6726:	4605      	mov	r5, r0
    6728:	f7fd ff56 	bl	45d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    672c:	4604      	mov	r4, r0
    672e:	f7fd ff59 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    6732:	4621      	mov	r1, r4
    6734:	f007 ff21 	bl	e57a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    6738:	0001      	movs	r1, r0
    673a:	d006      	beq.n	674a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    673c:	4805      	ldr	r0, [pc, #20]	; (6754 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    673e:	68c0      	ldr	r0, [r0, #12]
    6740:	6802      	ldr	r2, [r0, #0]
    6742:	4628      	mov	r0, r5
    6744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6748:	4710      	bx	r2
    674a:	f640 11f2 	movw	r1, #2546	; 0x9f2
    674e:	2032      	movs	r0, #50	; 0x32
    6750:	f7fd fb16 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6754:	20000104 	.word	0x20000104

00006758 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    6758:	b570      	push	{r4, r5, r6, lr}
    675a:	4d19      	ldr	r5, [pc, #100]	; (67c0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    675c:	6868      	ldr	r0, [r5, #4]
    675e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    6762:	2901      	cmp	r1, #1
    6764:	d004      	beq.n	6770 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6766:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    676a:	b108      	cbz	r0, 6770 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    676c:	200c      	movs	r0, #12
    676e:	bd70      	pop	{r4, r5, r6, pc}
    6770:	f7fd ff5c 	bl	462c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    6774:	f007 ff67 	bl	e646 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    6778:	6868      	ldr	r0, [r5, #4]
    677a:	2400      	movs	r4, #0
    677c:	7004      	strb	r4, [r0, #0]
    677e:	f100 0122 	add.w	r1, r0, #34	; 0x22
    6782:	700c      	strb	r4, [r1, #0]
    6784:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    6788:	f000 f8b4 	bl	68f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    678c:	6868      	ldr	r0, [r5, #4]
    678e:	2201      	movs	r2, #1
    6790:	2107      	movs	r1, #7
    6792:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    6796:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    679a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    679e:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    67a2:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    67a6:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    67aa:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    67ae:	f100 0159 	add.w	r1, r0, #89	; 0x59
    67b2:	700a      	strb	r2, [r1, #0]
    67b4:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    67b8:	6544      	str	r4, [r0, #84]	; 0x54
    67ba:	700c      	strb	r4, [r1, #0]
    67bc:	2000      	movs	r0, #0
    67be:	bd70      	pop	{r4, r5, r6, pc}
    67c0:	20000104 	.word	0x20000104

000067c4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    67c4:	4805      	ldr	r0, [pc, #20]	; (67dc <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    67c6:	b510      	push	{r4, lr}
    67c8:	6840      	ldr	r0, [r0, #4]
    67ca:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    67ce:	f007 fe87 	bl	e4e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    67d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67d6:	f7fe b951 	b.w	4a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    67da:	0000      	.short	0x0000
    67dc:	20000104 	.word	0x20000104

000067e0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    67e0:	b140      	cbz	r0, 67f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    67e2:	2802      	cmp	r0, #2
    67e4:	d006      	beq.n	67f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    67e6:	2200      	movs	r2, #0
    67e8:	4903      	ldr	r1, [pc, #12]	; (67f8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    67ea:	6849      	ldr	r1, [r1, #4]
    67ec:	f801 2f39 	strb.w	r2, [r1, #57]!
    67f0:	7208      	strb	r0, [r1, #8]
    67f2:	4770      	bx	lr
    67f4:	2201      	movs	r2, #1
    67f6:	e7f7      	b.n	67e8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    67f8:	20000104 	.word	0x20000104

000067fc <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    67fc:	4902      	ldr	r1, [pc, #8]	; (6808 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    67fe:	6849      	ldr	r1, [r1, #4]
    6800:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6804:	4770      	bx	lr
    6806:	0000      	.short	0x0000
    6808:	20000104 	.word	0x20000104

0000680c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    680c:	b510      	push	{r4, lr}
    680e:	4604      	mov	r4, r0
    6810:	7800      	ldrb	r0, [r0, #0]
    6812:	07c0      	lsls	r0, r0, #31
    6814:	d007      	beq.n	6826 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    6816:	2300      	movs	r3, #0
    6818:	7860      	ldrb	r0, [r4, #1]
    681a:	461a      	mov	r2, r3
    681c:	4619      	mov	r1, r3
    681e:	f7ff fe8f 	bl	6540 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    6822:	2800      	cmp	r0, #0
    6824:	d10c      	bne.n	6840 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    6826:	4b07      	ldr	r3, [pc, #28]	; (6844 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    6828:	78a0      	ldrb	r0, [r4, #2]
    682a:	6859      	ldr	r1, [r3, #4]
    682c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6830:	78e0      	ldrb	r0, [r4, #3]
    6832:	f7ff ffd5 	bl	67e0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    6836:	6859      	ldr	r1, [r3, #4]
    6838:	7920      	ldrb	r0, [r4, #4]
    683a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    683e:	2000      	movs	r0, #0
    6840:	bd10      	pop	{r4, pc}
    6842:	0000      	.short	0x0000
    6844:	20000104 	.word	0x20000104

00006848 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    6848:	4801      	ldr	r0, [pc, #4]	; (6850 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    684a:	68c0      	ldr	r0, [r0, #12]
    684c:	6840      	ldr	r0, [r0, #4]
    684e:	4700      	bx	r0
    6850:	20000104 	.word	0x20000104

00006854 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    6854:	b510      	push	{r4, lr}
    6856:	2000      	movs	r0, #0
    6858:	f000 fc8e 	bl	7178 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    685c:	f000 f84a 	bl	68f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6860:	f000 fe66 	bl	7530 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    6864:	4803      	ldr	r0, [pc, #12]	; (6874 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    6866:	6840      	ldr	r0, [r0, #4]
    6868:	2100      	movs	r1, #0
    686a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    686e:	4608      	mov	r0, r1
    6870:	bd10      	pop	{r4, pc}
    6872:	0000      	.short	0x0000
    6874:	20000104 	.word	0x20000104

00006878 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    6878:	b510      	push	{r4, lr}
    687a:	f000 f941 	bl	6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    687e:	4909      	ldr	r1, [pc, #36]	; (68a4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    6880:	2201      	movs	r2, #1
    6882:	b130      	cbz	r0, 6892 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    6884:	6848      	ldr	r0, [r1, #4]
    6886:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    688a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    688c:	881b      	ldrh	r3, [r3, #0]
    688e:	8583      	strh	r3, [r0, #44]	; 0x2c
    6890:	e004      	b.n	689c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    6892:	684b      	ldr	r3, [r1, #4]
    6894:	2000      	movs	r0, #0
    6896:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    689a:	8598      	strh	r0, [r3, #44]	; 0x2c
    689c:	6848      	ldr	r0, [r1, #4]
    689e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    68a2:	bd10      	pop	{r4, pc}
    68a4:	20000104 	.word	0x20000104

000068a8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    68a8:	4802      	ldr	r0, [pc, #8]	; (68b4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    68aa:	6840      	ldr	r0, [r0, #4]
    68ac:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    68b0:	4770      	bx	lr
    68b2:	0000      	.short	0x0000
    68b4:	20000104 	.word	0x20000104

000068b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    68b8:	b510      	push	{r4, lr}
    68ba:	f000 f921 	bl	6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    68be:	490c      	ldr	r1, [pc, #48]	; (68f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    68c0:	b128      	cbz	r0, 68ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    68c2:	6848      	ldr	r0, [r1, #4]
    68c4:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    68c8:	2801      	cmp	r0, #1
    68ca:	d00e      	beq.n	68ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    68cc:	e00c      	b.n	68e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    68ce:	6849      	ldr	r1, [r1, #4]
    68d0:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    68d4:	2801      	cmp	r0, #1
    68d6:	d001      	beq.n	68dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    68d8:	2802      	cmp	r0, #2
    68da:	d105      	bne.n	68e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    68dc:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    68e0:	2801      	cmp	r0, #1
    68e2:	d003      	beq.n	68ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    68e4:	2803      	cmp	r0, #3
    68e6:	d001      	beq.n	68ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    68e8:	2000      	movs	r0, #0
    68ea:	bd10      	pop	{r4, pc}
    68ec:	2001      	movs	r0, #1
    68ee:	bd10      	pop	{r4, pc}
    68f0:	20000104 	.word	0x20000104
    68f4:	b510      	push	{r4, lr}
    68f6:	4c07      	ldr	r4, [pc, #28]	; (6914 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    68f8:	6860      	ldr	r0, [r4, #4]
    68fa:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    68fe:	2800      	cmp	r0, #0
    6900:	d007      	beq.n	6912 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    6902:	f004 fdd3 	bl	b4ac <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6906:	f004 fbb5 	bl	b074 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    690a:	6861      	ldr	r1, [r4, #4]
    690c:	2000      	movs	r0, #0
    690e:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    6912:	bd10      	pop	{r4, pc}
    6914:	20000104 	.word	0x20000104
    6918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    691c:	4d10      	ldr	r5, [pc, #64]	; (6960 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    691e:	4606      	mov	r6, r0
    6920:	460f      	mov	r7, r1
    6922:	6868      	ldr	r0, [r5, #4]
    6924:	490f      	ldr	r1, [pc, #60]	; (6964 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    6926:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    692a:	5c0c      	ldrb	r4, [r1, r0]
    692c:	4620      	mov	r0, r4
    692e:	f005 f931 	bl	bb94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6932:	6868      	ldr	r0, [r5, #4]
    6934:	2101      	movs	r1, #1
    6936:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    693a:	2025      	movs	r0, #37	; 0x25
    693c:	f009 f86b 	bl	fa16 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    6940:	4638      	mov	r0, r7
    6942:	f005 f831 	bl	b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6946:	f04f 0101 	mov.w	r1, #1
    694a:	4608      	mov	r0, r1
    694c:	b126      	cbz	r6, 6958 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    694e:	f004 fe63 	bl	b618 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6952:	b918      	cbnz	r0, 695c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    6954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6958:	f004 fe12 	bl	b580 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    695c:	2001      	movs	r0, #1
    695e:	e7f9      	b.n	6954 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    6960:	20000104 	.word	0x20000104
    6964:	0000fb66 	.word	0x0000fb66
    6968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    696a:	4e20      	ldr	r6, [pc, #128]	; (69ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    696c:	4604      	mov	r4, r0
    696e:	6870      	ldr	r0, [r6, #4]
    6970:	7801      	ldrb	r1, [r0, #0]
    6972:	f88d 1000 	strb.w	r1, [sp]
    6976:	9900      	ldr	r1, [sp, #0]
    6978:	9100      	str	r1, [sp, #0]
    697a:	f89d 1000 	ldrb.w	r1, [sp]
    697e:	b389      	cbz	r1, 69e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    6980:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6982:	6882      	ldr	r2, [r0, #8]
    6984:	f841 2f03 	str.w	r2, [r1, #3]!
    6988:	8982      	ldrh	r2, [r0, #12]
    698a:	808a      	strh	r2, [r1, #4]
    698c:	79c0      	ldrb	r0, [r0, #7]
    698e:	f007 fda7 	bl	e4e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6992:	6871      	ldr	r1, [r6, #4]
    6994:	2500      	movs	r5, #0
    6996:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6998:	1c89      	adds	r1, r1, #2
    699a:	7090      	strb	r0, [r2, #2]
    699c:	7065      	strb	r5, [r4, #1]
    699e:	2014      	movs	r0, #20
    69a0:	7020      	strb	r0, [r4, #0]
    69a2:	2220      	movs	r2, #32
    69a4:	1d20      	adds	r0, r4, #4
    69a6:	f005 fdfb 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    69aa:	4a11      	ldr	r2, [pc, #68]	; (69f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    69ac:	7225      	strb	r5, [r4, #8]
    69ae:	2301      	movs	r3, #1
    69b0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    69b2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    69b6:	6871      	ldr	r1, [r6, #4]
    69b8:	700d      	strb	r5, [r1, #0]
    69ba:	f101 0028 	add.w	r0, r1, #40	; 0x28
    69be:	7005      	strb	r5, [r0, #0]
    69c0:	88e0      	ldrh	r0, [r4, #6]
    69c2:	8490      	strh	r0, [r2, #36]	; 0x24
    69c4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    69c6:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    69ca:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    69ce:	4610      	mov	r0, r2
    69d0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    69d4:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    69d6:	8800      	ldrh	r0, [r0, #0]
    69d8:	f7fd fdd0 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    69dc:	f006 fd6c 	bl	d4b8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    69e0:	2001      	movs	r0, #1
    69e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69e4:	e7ff      	b.n	69e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    69e6:	2000      	movs	r0, #0
    69e8:	e7fb      	b.n	69e2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    69ea:	0000      	.short	0x0000
    69ec:	20000104 	.word	0x20000104
    69f0:	200010a4 	.word	0x200010a4
    69f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69f6:	2600      	movs	r6, #0
    69f8:	460f      	mov	r7, r1
    69fa:	4605      	mov	r5, r0
    69fc:	f88d 6000 	strb.w	r6, [sp]
    6a00:	466b      	mov	r3, sp
    6a02:	f000 f89d 	bl	6b40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    6a06:	0001      	movs	r1, r0
    6a08:	4810      	ldr	r0, [pc, #64]	; (6a4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
    6a0a:	d003      	beq.n	6a14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
    6a0c:	6840      	ldr	r0, [r0, #4]
    6a0e:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
    6a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a14:	6840      	ldr	r0, [r0, #4]
    6a16:	f89d 1000 	ldrb.w	r1, [sp]
    6a1a:	2f07      	cmp	r7, #7
    6a1c:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    6a20:	d301      	bcc.n	6a26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    6a22:	4634      	mov	r4, r6
    6a24:	e002      	b.n	6a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6a26:	0022      	movs	r2, r4
    6a28:	d100      	bne.n	6a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6a2a:	460c      	mov	r4, r1
    6a2c:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
    6a30:	6869      	ldr	r1, [r5, #4]
    6a32:	2900      	cmp	r1, #0
    6a34:	d0ed      	beq.n	6a12 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
    6a36:	7c69      	ldrb	r1, [r5, #17]
    6a38:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    6a3c:	6869      	ldr	r1, [r5, #4]
    6a3e:	680a      	ldr	r2, [r1, #0]
    6a40:	f840 2f6e 	str.w	r2, [r0, #110]!
    6a44:	8889      	ldrh	r1, [r1, #4]
    6a46:	8081      	strh	r1, [r0, #4]
    6a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a4a:	0000      	.short	0x0000
    6a4c:	20000104 	.word	0x20000104
    6a50:	b510      	push	{r4, lr}
    6a52:	4915      	ldr	r1, [pc, #84]	; (6aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
    6a54:	6842      	ldr	r2, [r0, #4]
    6a56:	6849      	ldr	r1, [r1, #4]
    6a58:	7813      	ldrb	r3, [r2, #0]
    6a5a:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    6a5e:	42a3      	cmp	r3, r4
    6a60:	d11f      	bne.n	6aa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a62:	7853      	ldrb	r3, [r2, #1]
    6a64:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    6a68:	42a3      	cmp	r3, r4
    6a6a:	d11a      	bne.n	6aa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a6c:	7893      	ldrb	r3, [r2, #2]
    6a6e:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    6a72:	42a3      	cmp	r3, r4
    6a74:	d115      	bne.n	6aa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a76:	78d3      	ldrb	r3, [r2, #3]
    6a78:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    6a7c:	42a3      	cmp	r3, r4
    6a7e:	d110      	bne.n	6aa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a80:	7913      	ldrb	r3, [r2, #4]
    6a82:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    6a86:	42a3      	cmp	r3, r4
    6a88:	d10b      	bne.n	6aa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a8a:	7952      	ldrb	r2, [r2, #5]
    6a8c:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    6a90:	429a      	cmp	r2, r3
    6a92:	d106      	bne.n	6aa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a94:	7c40      	ldrb	r0, [r0, #17]
    6a96:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    6a9a:	4288      	cmp	r0, r1
    6a9c:	d101      	bne.n	6aa2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6a9e:	2001      	movs	r0, #1
    6aa0:	bd10      	pop	{r4, pc}
    6aa2:	2000      	movs	r0, #0
    6aa4:	bd10      	pop	{r4, pc}
    6aa6:	0000      	.short	0x0000
    6aa8:	20000104 	.word	0x20000104
    6aac:	b530      	push	{r4, r5, lr}
    6aae:	7801      	ldrb	r1, [r0, #0]
    6ab0:	b08b      	sub	sp, #44	; 0x2c
    6ab2:	f001 040f 	and.w	r4, r1, #15
    6ab6:	4622      	mov	r2, r4
    6ab8:	a901      	add	r1, sp, #4
    6aba:	f000 fee9 	bl	7890 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6abe:	a801      	add	r0, sp, #4
    6ac0:	f7ff ffc6 	bl	6a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
    6ac4:	4605      	mov	r5, r0
    6ac6:	f004 fd0b 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6aca:	f000 fb6f 	bl	71ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    6ace:	2c04      	cmp	r4, #4
    6ad0:	d111      	bne.n	6af6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6ad2:	b185      	cbz	r5, 6af6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6ad4:	a80a      	add	r0, sp, #40	; 0x28
    6ad6:	f000 fb75 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    6ada:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6ade:	9000      	str	r0, [sp, #0]
    6ae0:	4806      	ldr	r0, [pc, #24]	; (6afc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
    6ae2:	6840      	ldr	r0, [r0, #4]
    6ae4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6ae8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    6aec:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6af0:	a801      	add	r0, sp, #4
    6af2:	f007 fdaa 	bl	e64a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6af6:	b00b      	add	sp, #44	; 0x2c
    6af8:	2005      	movs	r0, #5
    6afa:	bd30      	pop	{r4, r5, pc}
    6afc:	20000104 	.word	0x20000104
    6b00:	4804      	ldr	r0, [pc, #16]	; (6b14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
    6b02:	6840      	ldr	r0, [r0, #4]
    6b04:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6b08:	2803      	cmp	r0, #3
    6b0a:	d001      	beq.n	6b10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    6b0c:	2000      	movs	r0, #0
    6b0e:	4770      	bx	lr
    6b10:	2001      	movs	r0, #1
    6b12:	4770      	bx	lr
    6b14:	20000104 	.word	0x20000104
    6b18:	4908      	ldr	r1, [pc, #32]	; (6b3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    6b1a:	b510      	push	{r4, lr}
    6b1c:	6849      	ldr	r1, [r1, #4]
    6b1e:	7c83      	ldrb	r3, [r0, #18]
    6b20:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6b24:	429a      	cmp	r2, r3
    6b26:	d105      	bne.n	6b34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
    6b28:	6880      	ldr	r0, [r0, #8]
    6b2a:	2206      	movs	r2, #6
    6b2c:	3132      	adds	r1, #50	; 0x32
    6b2e:	f005 fd25 	bl	c57c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6b32:	b108      	cbz	r0, 6b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6b34:	2000      	movs	r0, #0
    6b36:	bd10      	pop	{r4, pc}
    6b38:	2001      	movs	r0, #1
    6b3a:	bd10      	pop	{r4, pc}
    6b3c:	20000104 	.word	0x20000104
    6b40:	b570      	push	{r4, r5, r6, lr}
    6b42:	6841      	ldr	r1, [r0, #4]
    6b44:	461e      	mov	r6, r3
    6b46:	4604      	mov	r4, r0
    6b48:	b1c1      	cbz	r1, 6b7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    6b4a:	7c60      	ldrb	r0, [r4, #17]
    6b4c:	f007 fcbd 	bl	e4ca <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6b50:	4d10      	ldr	r5, [pc, #64]	; (6b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    6b52:	6869      	ldr	r1, [r5, #4]
    6b54:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6b58:	b141      	cbz	r1, 6b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6b5a:	b138      	cbz	r0, 6b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6b5c:	f006 fec0 	bl	d8e0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6b60:	6869      	ldr	r1, [r5, #4]
    6b62:	f801 0f64 	strb.w	r0, [r1, #100]!
    6b66:	7048      	strb	r0, [r1, #1]
    6b68:	2001      	movs	r0, #1
    6b6a:	71c8      	strb	r0, [r1, #7]
    6b6c:	686b      	ldr	r3, [r5, #4]
    6b6e:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6b72:	28ff      	cmp	r0, #255	; 0xff
    6b74:	d004      	beq.n	6b80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    6b76:	f7fe fdeb 	bl	5750 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6b7a:	7030      	strb	r0, [r6, #0]
    6b7c:	2000      	movs	r0, #0
    6b7e:	bd70      	pop	{r4, r5, r6, pc}
    6b80:	7c60      	ldrb	r0, [r4, #17]
    6b82:	4632      	mov	r2, r6
    6b84:	3364      	adds	r3, #100	; 0x64
    6b86:	6861      	ldr	r1, [r4, #4]
    6b88:	f7fe fe5e 	bl	5848 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    6b8c:	f080 0001 	eor.w	r0, r0, #1
    6b90:	bd70      	pop	{r4, r5, r6, pc}
    6b92:	0000      	.short	0x0000
    6b94:	20000104 	.word	0x20000104
    6b98:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6b9a:	4c3d      	ldr	r4, [pc, #244]	; (6c90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
    6b9c:	466f      	mov	r7, sp
    6b9e:	6860      	ldr	r0, [r4, #4]
    6ba0:	7801      	ldrb	r1, [r0, #0]
    6ba2:	f88d 1008 	strb.w	r1, [sp, #8]
    6ba6:	9902      	ldr	r1, [sp, #8]
    6ba8:	9102      	str	r1, [sp, #8]
    6baa:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6bae:	b111      	cbz	r1, 6bb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
    6bb0:	f241 41b1 	movw	r1, #5297	; 0x14b1
    6bb4:	e04f      	b.n	6c56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
    6bb6:	2500      	movs	r5, #0
    6bb8:	7085      	strb	r5, [r0, #2]
    6bba:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6bbc:	880a      	ldrh	r2, [r1, #0]
    6bbe:	8082      	strh	r2, [r0, #4]
    6bc0:	68c8      	ldr	r0, [r1, #12]
    6bc2:	f006 ff08 	bl	d9d6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6bc6:	6861      	ldr	r1, [r4, #4]
    6bc8:	8348      	strh	r0, [r1, #26]
    6bca:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6bcc:	8a82      	ldrh	r2, [r0, #20]
    6bce:	838a      	strh	r2, [r1, #28]
    6bd0:	8ac0      	ldrh	r0, [r0, #22]
    6bd2:	83c8      	strh	r0, [r1, #30]
    6bd4:	f881 5020 	strb.w	r5, [r1, #32]
    6bd8:	4669      	mov	r1, sp
    6bda:	68a0      	ldr	r0, [r4, #8]
    6bdc:	f007 fa03 	bl	dfe6 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6be0:	68a0      	ldr	r0, [r4, #8]
    6be2:	7800      	ldrb	r0, [r0, #0]
    6be4:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6be8:	6860      	ldr	r0, [r4, #4]
    6bea:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6bee:	b120      	cbz	r0, 6bfa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    6bf0:	4639      	mov	r1, r7
    6bf2:	4630      	mov	r0, r6
    6bf4:	f007 fc69 	bl	e4ca <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6bf8:	b940      	cbnz	r0, 6c0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    6bfa:	6860      	ldr	r0, [r4, #4]
    6bfc:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6c00:	b160      	cbz	r0, 6c1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6c02:	4639      	mov	r1, r7
    6c04:	4630      	mov	r0, r6
    6c06:	f007 fc57 	bl	e4b8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6c0a:	b138      	cbz	r0, 6c1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6c0c:	6860      	ldr	r0, [r4, #4]
    6c0e:	9900      	ldr	r1, [sp, #0]
    6c10:	f8c0 100e 	str.w	r1, [r0, #14]
    6c14:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6c18:	8241      	strh	r1, [r0, #18]
    6c1a:	e003      	b.n	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6c1c:	6860      	ldr	r0, [r4, #4]
    6c1e:	f8c0 500e 	str.w	r5, [r0, #14]
    6c22:	8245      	strh	r5, [r0, #18]
    6c24:	6861      	ldr	r1, [r4, #4]
    6c26:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6c2a:	28ff      	cmp	r0, #255	; 0xff
    6c2c:	d016      	beq.n	6c5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    6c2e:	f101 0208 	add.w	r2, r1, #8
    6c32:	1dc9      	adds	r1, r1, #7
    6c34:	f7fe fd72 	bl	571c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6c38:	b158      	cbz	r0, 6c52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    6c3a:	6860      	ldr	r0, [r4, #4]
    6c3c:	79c1      	ldrb	r1, [r0, #7]
    6c3e:	f041 0102 	orr.w	r1, r1, #2
    6c42:	71c1      	strb	r1, [r0, #7]
    6c44:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6c48:	6141      	str	r1, [r0, #20]
    6c4a:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6c4e:	8301      	strh	r1, [r0, #24]
    6c50:	e00f      	b.n	6c72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    6c52:	f241 41dc 	movw	r1, #5340	; 0x14dc
    6c56:	2032      	movs	r0, #50	; 0x32
    6c58:	f7fd f892 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c5c:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6c60:	71c8      	strb	r0, [r1, #7]
    6c62:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6c66:	6088      	str	r0, [r1, #8]
    6c68:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6c6c:	8188      	strh	r0, [r1, #12]
    6c6e:	614d      	str	r5, [r1, #20]
    6c70:	830d      	strh	r5, [r1, #24]
    6c72:	6860      	ldr	r0, [r4, #4]
    6c74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6c76:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6c7a:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6c7e:	2101      	movs	r1, #1
    6c80:	7001      	strb	r1, [r0, #0]
    6c82:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c84:	8800      	ldrh	r0, [r0, #0]
    6c86:	f7fd fc79 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6c8a:	f006 fc1b 	bl	d4c4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6c90:	20000104 	.word	0x20000104
    6c94:	b570      	push	{r4, r5, r6, lr}
    6c96:	4d39      	ldr	r5, [pc, #228]	; (6d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
    6c98:	4601      	mov	r1, r0
    6c9a:	2200      	movs	r2, #0
    6c9c:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6ca0:	365c      	adds	r6, #92	; 0x5c
    6ca2:	8002      	strh	r2, [r0, #0]
    6ca4:	2903      	cmp	r1, #3
    6ca6:	d002      	beq.n	6cae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    6ca8:	2905      	cmp	r1, #5
    6caa:	d004      	beq.n	6cb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
    6cac:	e056      	b.n	6d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6cae:	2103      	movs	r1, #3
    6cb0:	f007 f9b0 	bl	e014 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6cb4:	e052      	b.n	6d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6cb6:	2105      	movs	r1, #5
    6cb8:	f007 f9ac 	bl	e014 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6cbc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6cc0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6cc2:	6909      	ldr	r1, [r1, #16]
    6cc4:	f844 1f0f 	str.w	r1, [r4, #15]!
    6cc8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6cca:	8b0a      	ldrh	r2, [r1, #24]
    6ccc:	80a2      	strh	r2, [r4, #4]
    6cce:	7e89      	ldrb	r1, [r1, #26]
    6cd0:	71a1      	strb	r1, [r4, #6]
    6cd2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6cd4:	68c1      	ldr	r1, [r0, #12]
    6cd6:	8b80      	ldrh	r0, [r0, #28]
    6cd8:	f007 f84a 	bl	dd70 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6cdc:	71e0      	strb	r0, [r4, #7]
    6cde:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6ce2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6ce4:	68c1      	ldr	r1, [r0, #12]
    6ce6:	6a00      	ldr	r0, [r0, #32]
    6ce8:	f007 f837 	bl	dd5a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6cec:	75e0      	strb	r0, [r4, #23]
    6cee:	0a00      	lsrs	r0, r0, #8
    6cf0:	7620      	strb	r0, [r4, #24]
    6cf2:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6cf6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6cf8:	68c0      	ldr	r0, [r0, #12]
    6cfa:	f006 fe6c 	bl	d9d6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6cfe:	7660      	strb	r0, [r4, #25]
    6d00:	0a00      	lsrs	r0, r0, #8
    6d02:	76a0      	strb	r0, [r4, #26]
    6d04:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6d08:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6d0a:	8a89      	ldrh	r1, [r1, #20]
    6d0c:	76e1      	strb	r1, [r4, #27]
    6d0e:	0a09      	lsrs	r1, r1, #8
    6d10:	7721      	strb	r1, [r4, #28]
    6d12:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6d14:	8ac9      	ldrh	r1, [r1, #22]
    6d16:	7761      	strb	r1, [r4, #29]
    6d18:	0a09      	lsrs	r1, r1, #8
    6d1a:	77a1      	strb	r1, [r4, #30]
    6d1c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6d1e:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6d22:	f8c4 201f 	str.w	r2, [r4, #31]
    6d26:	7909      	ldrb	r1, [r1, #4]
    6d28:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6d2c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6d2e:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6d32:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6d36:	f001 011f 	and.w	r1, r1, #31
    6d3a:	f020 001f 	bic.w	r0, r0, #31
    6d3e:	4308      	orrs	r0, r1
    6d40:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6d44:	f004 f978 	bl	b038 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6d48:	2807      	cmp	r0, #7
    6d4a:	d900      	bls.n	6d4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    6d4c:	2007      	movs	r0, #7
    6d4e:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6d52:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6d56:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6d5a:	7021      	strb	r1, [r4, #0]
    6d5c:	f106 0112 	add.w	r1, r6, #18
    6d60:	68a8      	ldr	r0, [r5, #8]
    6d62:	f007 f972 	bl	e04a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6d66:	7e71      	ldrb	r1, [r6, #25]
    6d68:	68a8      	ldr	r0, [r5, #8]
    6d6a:	f007 f974 	bl	e056 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6d6e:	f000 fba7 	bl	74c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc08>
    6d72:	68a8      	ldr	r0, [r5, #8]
    6d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d78:	f004 be16 	b.w	b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6d7c:	20000104 	.word	0x20000104
    6d80:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6d84:	4f65      	ldr	r7, [pc, #404]	; (6f1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x664>)
    6d86:	4604      	mov	r4, r0
    6d88:	6878      	ldr	r0, [r7, #4]
    6d8a:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
    6d8e:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6d92:	b180      	cbz	r0, 6db6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    6d94:	2600      	movs	r6, #0
    6d96:	2500      	movs	r5, #0
    6d98:	7ca0      	ldrb	r0, [r4, #18]
    6d9a:	68a1      	ldr	r1, [r4, #8]
    6d9c:	f007 fb95 	bl	e4ca <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6da0:	4682      	mov	sl, r0
    6da2:	f7ff fead 	bl	6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6da6:	b140      	cbz	r0, 6dba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6da8:	6878      	ldr	r0, [r7, #4]
    6daa:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6dae:	b121      	cbz	r1, 6dba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6db0:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6db4:	e004      	b.n	6dc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
    6db6:	2601      	movs	r6, #1
    6db8:	e7ed      	b.n	6d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    6dba:	6878      	ldr	r0, [r7, #4]
    6dbc:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6dc0:	4683      	mov	fp, r0
    6dc2:	f7fe fbfd 	bl	55c0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6dc6:	ea5f 0900 	movs.w	r9, r0
    6dca:	d00c      	beq.n	6de6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6dcc:	4658      	mov	r0, fp
    6dce:	f7fe fbeb 	bl	55a8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6dd2:	b100      	cbz	r0, 6dd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
    6dd4:	2601      	movs	r6, #1
    6dd6:	f1ba 0f00 	cmp.w	sl, #0
    6dda:	d004      	beq.n	6de6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6ddc:	4648      	mov	r0, r9
    6dde:	68a1      	ldr	r1, [r4, #8]
    6de0:	f006 fd31 	bl	d846 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6de4:	4605      	mov	r5, r0
    6de6:	6878      	ldr	r0, [r7, #4]
    6de8:	46b9      	mov	r9, r7
    6dea:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6dee:	b10d      	cbz	r5, 6df4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    6df0:	f047 0702 	orr.w	r7, r7, #2
    6df4:	f7ff fe84 	bl	6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6df8:	b3a0      	cbz	r0, 6e64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6dfa:	6860      	ldr	r0, [r4, #4]
    6dfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6e00:	7802      	ldrb	r2, [r0, #0]
    6e02:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6e06:	429a      	cmp	r2, r3
    6e08:	d11f      	bne.n	6e4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e0a:	7842      	ldrb	r2, [r0, #1]
    6e0c:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6e10:	429a      	cmp	r2, r3
    6e12:	d11a      	bne.n	6e4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e14:	7882      	ldrb	r2, [r0, #2]
    6e16:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6e1a:	429a      	cmp	r2, r3
    6e1c:	d115      	bne.n	6e4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e1e:	78c2      	ldrb	r2, [r0, #3]
    6e20:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6e24:	429a      	cmp	r2, r3
    6e26:	d110      	bne.n	6e4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e28:	7902      	ldrb	r2, [r0, #4]
    6e2a:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6e2e:	429a      	cmp	r2, r3
    6e30:	d10b      	bne.n	6e4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e32:	7940      	ldrb	r0, [r0, #5]
    6e34:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6e38:	4290      	cmp	r0, r2
    6e3a:	d106      	bne.n	6e4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e3c:	7c60      	ldrb	r0, [r4, #17]
    6e3e:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6e42:	4288      	cmp	r0, r1
    6e44:	d101      	bne.n	6e4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6e46:	2001      	movs	r0, #1
    6e48:	e000      	b.n	6e4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
    6e4a:	2000      	movs	r0, #0
    6e4c:	4f34      	ldr	r7, [pc, #208]	; (6f20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x668>)
    6e4e:	4682      	mov	sl, r0
    6e50:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6e54:	2808      	cmp	r0, #8
    6e56:	d006      	beq.n	6e66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6e58:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6e5c:	4288      	cmp	r0, r1
    6e5e:	d102      	bne.n	6e66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6e60:	2001      	movs	r0, #1
    6e62:	e001      	b.n	6e68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
    6e64:	e021      	b.n	6eaa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    6e66:	2000      	movs	r0, #0
    6e68:	4681      	mov	r9, r0
    6e6a:	b925      	cbnz	r5, 6e76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
    6e6c:	b12e      	cbz	r6, 6e7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6e6e:	4620      	mov	r0, r4
    6e70:	f7ff fe52 	bl	6b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6e74:	b108      	cbz	r0, 6e7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6e76:	2001      	movs	r0, #1
    6e78:	e000      	b.n	6e7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    6e7a:	2000      	movs	r0, #0
    6e7c:	f1b8 0f00 	cmp.w	r8, #0
    6e80:	d009      	beq.n	6e96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6e82:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    6e86:	2901      	cmp	r1, #1
    6e88:	d003      	beq.n	6e92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5da>
    6e8a:	b921      	cbnz	r1, 6e96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6e8c:	ea5a 0109 	orrs.w	r1, sl, r9
    6e90:	d001      	beq.n	6e96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6e92:	2101      	movs	r1, #1
    6e94:	e000      	b.n	6e98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
    6e96:	2100      	movs	r1, #0
    6e98:	4208      	tst	r0, r1
    6e9a:	d003      	beq.n	6ea4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
    6e9c:	200c      	movs	r0, #12
    6e9e:	b004      	add	sp, #16
    6ea0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6ea4:	f004 fb1c 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6ea8:	e036      	b.n	6f18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    6eaa:	f004 fb19 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6eae:	f1b8 0f00 	cmp.w	r8, #0
    6eb2:	d031      	beq.n	6f18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    6eb4:	4620      	mov	r0, r4
    6eb6:	f7ff fe2f 	bl	6b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6eba:	b900      	cbnz	r0, 6ebe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x606>
    6ebc:	b175      	cbz	r5, 6edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x624>
    6ebe:	a803      	add	r0, sp, #12
    6ec0:	f000 f980 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    6ec4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6ec8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6ecc:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6ed0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6ed4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ed8:	463b      	mov	r3, r7
    6eda:	e018      	b.n	6f0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x656>
    6edc:	f8d9 0004 	ldr.w	r0, [r9, #4]
    6ee0:	464d      	mov	r5, r9
    6ee2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    6ee6:	2803      	cmp	r0, #3
    6ee8:	d001      	beq.n	6eee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x636>
    6eea:	2802      	cmp	r0, #2
    6eec:	d114      	bne.n	6f18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    6eee:	f1ba 0f00 	cmp.w	sl, #0
    6ef2:	d011      	beq.n	6f18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    6ef4:	a803      	add	r0, sp, #12
    6ef6:	f000 f965 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    6efa:	686a      	ldr	r2, [r5, #4]
    6efc:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6f00:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6f04:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6f08:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6f0c:	23fe      	movs	r3, #254	; 0xfe
    6f0e:	2101      	movs	r1, #1
    6f10:	4620      	mov	r0, r4
    6f12:	3232      	adds	r2, #50	; 0x32
    6f14:	f000 fc46 	bl	77a4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6f18:	2005      	movs	r0, #5
    6f1a:	e7c0      	b.n	6e9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e6>
    6f1c:	20000104 	.word	0x20000104
    6f20:	200010a4 	.word	0x200010a4
    6f24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6f26:	4c3f      	ldr	r4, [pc, #252]	; (7024 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x76c>)
    6f28:	4605      	mov	r5, r0
    6f2a:	6860      	ldr	r0, [r4, #4]
    6f2c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    6f30:	2900      	cmp	r1, #0
    6f32:	d06c      	beq.n	700e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    6f34:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6f38:	2802      	cmp	r0, #2
    6f3a:	d02c      	beq.n	6f96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6de>
    6f3c:	2801      	cmp	r0, #1
    6f3e:	d043      	beq.n	6fc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x710>
    6f40:	f7ff fdde 	bl	6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6f44:	2800      	cmp	r0, #0
    6f46:	d067      	beq.n	7018 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x760>
    6f48:	686a      	ldr	r2, [r5, #4]
    6f4a:	6861      	ldr	r1, [r4, #4]
    6f4c:	7810      	ldrb	r0, [r2, #0]
    6f4e:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6f52:	4298      	cmp	r0, r3
    6f54:	d14c      	bne.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f56:	7850      	ldrb	r0, [r2, #1]
    6f58:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6f5c:	4298      	cmp	r0, r3
    6f5e:	d147      	bne.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f60:	7890      	ldrb	r0, [r2, #2]
    6f62:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6f66:	4298      	cmp	r0, r3
    6f68:	d142      	bne.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f6a:	78d0      	ldrb	r0, [r2, #3]
    6f6c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6f70:	4298      	cmp	r0, r3
    6f72:	d13d      	bne.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f74:	7910      	ldrb	r0, [r2, #4]
    6f76:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6f7a:	4298      	cmp	r0, r3
    6f7c:	d138      	bne.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f7e:	7950      	ldrb	r0, [r2, #5]
    6f80:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6f84:	4290      	cmp	r0, r2
    6f86:	d133      	bne.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f88:	7c68      	ldrb	r0, [r5, #17]
    6f8a:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    6f8e:	4290      	cmp	r0, r2
    6f90:	d12e      	bne.n	6ff0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    6f92:	2001      	movs	r0, #1
    6f94:	e02d      	b.n	6ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73a>
    6f96:	a803      	add	r0, sp, #12
    6f98:	f000 f914 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    6f9c:	6862      	ldr	r2, [r4, #4]
    6f9e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6fa2:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6fa6:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6faa:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6fae:	23ff      	movs	r3, #255	; 0xff
    6fb0:	2100      	movs	r1, #0
    6fb2:	4628      	mov	r0, r5
    6fb4:	3232      	adds	r2, #50	; 0x32
    6fb6:	f000 fbf5 	bl	77a4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6fba:	6861      	ldr	r1, [r4, #4]
    6fbc:	2001      	movs	r0, #1
    6fbe:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    6fc2:	200b      	movs	r0, #11
    6fc4:	b004      	add	sp, #16
    6fc6:	bd70      	pop	{r4, r5, r6, pc}
    6fc8:	a803      	add	r0, sp, #12
    6fca:	f000 f8fb 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    6fce:	6862      	ldr	r2, [r4, #4]
    6fd0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6fd4:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6fd8:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6fdc:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6fe0:	23ff      	movs	r3, #255	; 0xff
    6fe2:	2100      	movs	r1, #0
    6fe4:	4628      	mov	r0, r5
    6fe6:	3232      	adds	r2, #50	; 0x32
    6fe8:	f000 fbdc 	bl	77a4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6fec:	2005      	movs	r0, #5
    6fee:	e7e9      	b.n	6fc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
    6ff0:	2000      	movs	r0, #0
    6ff2:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    6ff6:	2901      	cmp	r1, #1
    6ff8:	d00c      	beq.n	7014 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    6ffa:	b958      	cbnz	r0, 7014 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    6ffc:	490a      	ldr	r1, [pc, #40]	; (7028 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x770>)
    6ffe:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    7002:	2808      	cmp	r0, #8
    7004:	d003      	beq.n	700e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    7006:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    700a:	4281      	cmp	r1, r0
    700c:	d002      	beq.n	7014 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    700e:	f004 fa67 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7012:	e7eb      	b.n	6fec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>
    7014:	200c      	movs	r0, #12
    7016:	e7d5      	b.n	6fc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
    7018:	f640 6158 	movw	r1, #3672	; 0xe58
    701c:	2032      	movs	r0, #50	; 0x32
    701e:	f7fc feaf 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7022:	0000      	.short	0x0000
    7024:	20000104 	.word	0x20000104
    7028:	200010a4 	.word	0x200010a4
    702c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    702e:	4c1e      	ldr	r4, [pc, #120]	; (70a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f0>)
    7030:	4605      	mov	r5, r0
    7032:	6860      	ldr	r0, [r4, #4]
    7034:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7038:	b129      	cbz	r1, 7046 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78e>
    703a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    703e:	2802      	cmp	r0, #2
    7040:	d004      	beq.n	704c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x794>
    7042:	2801      	cmp	r0, #1
    7044:	d01b      	beq.n	707e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c6>
    7046:	f004 fa4b 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    704a:	e02a      	b.n	70a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7ea>
    704c:	a803      	add	r0, sp, #12
    704e:	f000 f8b9 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    7052:	6862      	ldr	r2, [r4, #4]
    7054:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7058:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    705c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7060:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7064:	23ff      	movs	r3, #255	; 0xff
    7066:	2106      	movs	r1, #6
    7068:	4628      	mov	r0, r5
    706a:	3232      	adds	r2, #50	; 0x32
    706c:	f000 fb9a 	bl	77a4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7070:	6862      	ldr	r2, [r4, #4]
    7072:	200b      	movs	r0, #11
    7074:	2100      	movs	r1, #0
    7076:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    707a:	b004      	add	sp, #16
    707c:	bd70      	pop	{r4, r5, r6, pc}
    707e:	a803      	add	r0, sp, #12
    7080:	f000 f8a0 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    7084:	6862      	ldr	r2, [r4, #4]
    7086:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    708a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    708e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7092:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7096:	23ff      	movs	r3, #255	; 0xff
    7098:	2106      	movs	r1, #6
    709a:	4628      	mov	r0, r5
    709c:	3232      	adds	r2, #50	; 0x32
    709e:	f000 fb81 	bl	77a4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    70a2:	2005      	movs	r0, #5
    70a4:	e7e9      	b.n	707a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    70a6:	0000      	.short	0x0000
    70a8:	20000104 	.word	0x20000104
    70ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    70ae:	b389      	cbz	r1, 7114 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85c>
    70b0:	2901      	cmp	r1, #1
    70b2:	d034      	beq.n	711e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x866>
    70b4:	2505      	movs	r5, #5
    70b6:	2902      	cmp	r1, #2
    70b8:	d004      	beq.n	70c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x80c>
    70ba:	2906      	cmp	r1, #6
    70bc:	d025      	beq.n	710a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x852>
    70be:	f004 fa0f 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    70c2:	e01f      	b.n	7104 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    70c4:	4606      	mov	r6, r0
    70c6:	f004 fa0b 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    70ca:	4c17      	ldr	r4, [pc, #92]	; (7128 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x870>)
    70cc:	6860      	ldr	r0, [r4, #4]
    70ce:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    70d2:	b1b9      	cbz	r1, 7104 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    70d4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    70d8:	2801      	cmp	r0, #1
    70da:	d001      	beq.n	70e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x828>
    70dc:	2802      	cmp	r0, #2
    70de:	d111      	bne.n	7104 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    70e0:	a803      	add	r0, sp, #12
    70e2:	f000 f86f 	bl	71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    70e6:	6862      	ldr	r2, [r4, #4]
    70e8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    70ec:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    70f0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    70f4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    70f8:	23ff      	movs	r3, #255	; 0xff
    70fa:	2102      	movs	r1, #2
    70fc:	4630      	mov	r0, r6
    70fe:	3232      	adds	r2, #50	; 0x32
    7100:	f000 fb50 	bl	77a4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7104:	b004      	add	sp, #16
    7106:	4628      	mov	r0, r5
    7108:	bd70      	pop	{r4, r5, r6, pc}
    710a:	b004      	add	sp, #16
    710c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7110:	f7ff bf8c 	b.w	702c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x774>
    7114:	b004      	add	sp, #16
    7116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    711a:	f7ff bf03 	b.w	6f24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x66c>
    711e:	b004      	add	sp, #16
    7120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7124:	f7ff be2c 	b.w	6d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7128:	20000104 	.word	0x20000104
    712c:	b570      	push	{r4, r5, r6, lr}
    712e:	4c11      	ldr	r4, [pc, #68]	; (7174 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8bc>)
    7130:	4605      	mov	r5, r0
    7132:	6861      	ldr	r1, [r4, #4]
    7134:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    7138:	2800      	cmp	r0, #0
    713a:	d019      	beq.n	7170 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    713c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    7140:	2800      	cmp	r0, #0
    7142:	d015      	beq.n	7170 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    7144:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    7148:	3132      	adds	r1, #50	; 0x32
    714a:	f007 f9be 	bl	e4ca <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    714e:	b140      	cbz	r0, 7162 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8aa>
    7150:	f7fe fa00 	bl	5554 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7154:	6861      	ldr	r1, [r4, #4]
    7156:	462a      	mov	r2, r5
    7158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    715c:	3132      	adds	r1, #50	; 0x32
    715e:	f006 bb3d 	b.w	d7dc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7162:	6860      	ldr	r0, [r4, #4]
    7164:	4629      	mov	r1, r5
    7166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    716a:	3032      	adds	r0, #50	; 0x32
    716c:	f006 bb25 	b.w	d7ba <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7170:	bd70      	pop	{r4, r5, r6, pc}
    7172:	0000      	.short	0x0000
    7174:	20000104 	.word	0x20000104
    7178:	4602      	mov	r2, r0
    717a:	480b      	ldr	r0, [pc, #44]	; (71a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f0>)
    717c:	b082      	sub	sp, #8
    717e:	6840      	ldr	r0, [r0, #4]
    7180:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    7184:	f88d 1000 	strb.w	r1, [sp]
    7188:	9900      	ldr	r1, [sp, #0]
    718a:	9100      	str	r1, [sp, #0]
    718c:	f89d 1000 	ldrb.w	r1, [sp]
    7190:	2900      	cmp	r1, #0
    7192:	d107      	bne.n	71a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>
    7194:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7196:	2900      	cmp	r1, #0
    7198:	d004      	beq.n	71a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>
    719a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    719e:	b002      	add	sp, #8
    71a0:	f7fb ba90 	b.w	26c4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    71a4:	b002      	add	sp, #8
    71a6:	4770      	bx	lr
    71a8:	20000104 	.word	0x20000104
    71ac:	b510      	push	{r4, lr}
    71ae:	4804      	ldr	r0, [pc, #16]	; (71c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
    71b0:	f004 fcac 	bl	bb0c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    71b4:	2800      	cmp	r0, #0
    71b6:	d102      	bne.n	71be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x906>
    71b8:	4901      	ldr	r1, [pc, #4]	; (71c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
    71ba:	207f      	movs	r0, #127	; 0x7f
    71bc:	7008      	strb	r0, [r1, #0]
    71be:	bd10      	pop	{r4, pc}
    71c0:	20000104 	.word	0x20000104
    71c4:	4a07      	ldr	r2, [pc, #28]	; (71e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>)
    71c6:	b510      	push	{r4, lr}
    71c8:	f992 1000 	ldrsb.w	r1, [r2]
    71cc:	297f      	cmp	r1, #127	; 0x7f
    71ce:	d003      	beq.n	71d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x920>
    71d0:	7001      	strb	r1, [r0, #0]
    71d2:	207f      	movs	r0, #127	; 0x7f
    71d4:	7010      	strb	r0, [r2, #0]
    71d6:	bd10      	pop	{r4, pc}
    71d8:	f240 319f 	movw	r1, #927	; 0x39f
    71dc:	2032      	movs	r0, #50	; 0x32
    71de:	f7fc fdcf 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71e2:	0000      	.short	0x0000
    71e4:	20000104 	.word	0x20000104
    71e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71ec:	4607      	mov	r7, r0
    71ee:	f7fd f9f3 	bl	45d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    71f2:	4604      	mov	r4, r0
    71f4:	f7fd f9f6 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    71f8:	4621      	mov	r1, r4
    71fa:	f007 f9be 	bl	e57a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    71fe:	0005      	movs	r5, r0
    7200:	d012      	beq.n	7228 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    7202:	4c2d      	ldr	r4, [pc, #180]	; (72b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa00>)
    7204:	6860      	ldr	r0, [r4, #4]
    7206:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    720a:	2801      	cmp	r0, #1
    720c:	d004      	beq.n	7218 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    720e:	2802      	cmp	r0, #2
    7210:	d002      	beq.n	7218 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    7212:	f7ff fc75 	bl	6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7216:	b150      	cbz	r0, 722e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x976>
    7218:	f06f 0613 	mvn.w	r6, #19
    721c:	b33f      	cbz	r7, 726e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b6>
    721e:	4628      	mov	r0, r5
    7220:	f006 fec9 	bl	dfb6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    7224:	b950      	cbnz	r0, 723c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
    7226:	e005      	b.n	7234 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x97c>
    7228:	f241 4181 	movw	r1, #5249	; 0x1481
    722c:	e03a      	b.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    722e:	f241 4187 	movw	r1, #5255	; 0x1487
    7232:	e037      	b.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    7234:	4628      	mov	r0, r5
    7236:	f006 fee0 	bl	dffa <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    723a:	b1c0      	cbz	r0, 726e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b6>
    723c:	6861      	ldr	r1, [r4, #4]
    723e:	4628      	mov	r0, r5
    7240:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7244:	2a05      	cmp	r2, #5
    7246:	d202      	bcs.n	724e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x996>
    7248:	f241 410b 	movw	r1, #5131	; 0x140b
    724c:	e02a      	b.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    724e:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7252:	2a0b      	cmp	r2, #11
    7254:	d302      	bcc.n	725c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a4>
    7256:	f241 410c 	movw	r1, #5132	; 0x140c
    725a:	e023      	b.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    725c:	68e2      	ldr	r2, [r4, #12]
    725e:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7262:	6952      	ldr	r2, [r2, #20]
    7264:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    7268:	5851      	ldr	r1, [r2, r1]
    726a:	4788      	blx	r1
    726c:	e016      	b.n	729c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e4>
    726e:	6860      	ldr	r0, [r4, #4]
    7270:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7274:	2905      	cmp	r1, #5
    7276:	d202      	bcs.n	727e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c6>
    7278:	f241 4177 	movw	r1, #5239	; 0x1477
    727c:	e012      	b.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    727e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7282:	290b      	cmp	r1, #11
    7284:	d302      	bcc.n	728c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
    7286:	f241 4178 	movw	r1, #5240	; 0x1478
    728a:	e00b      	b.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    728c:	68e1      	ldr	r1, [r4, #12]
    728e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7292:	6989      	ldr	r1, [r1, #24]
    7294:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    7298:	5808      	ldr	r0, [r1, r0]
    729a:	4780      	blx	r0
    729c:	280f      	cmp	r0, #15
    729e:	d304      	bcc.n	72aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f2>
    72a0:	f241 419c 	movw	r1, #5276	; 0x149c
    72a4:	2032      	movs	r0, #50	; 0x32
    72a6:	f7fc fd6b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72aa:	68e1      	ldr	r1, [r4, #12]
    72ac:	6909      	ldr	r1, [r1, #16]
    72ae:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    72b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72b6:	4700      	bx	r0
    72b8:	20000104 	.word	0x20000104
    72bc:	b510      	push	{r4, lr}
    72be:	b118      	cbz	r0, 72c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa10>
    72c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72c4:	f000 b924 	b.w	7510 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    72c8:	2900      	cmp	r1, #0
    72ca:	d01d      	beq.n	7308 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa50>
    72cc:	480f      	ldr	r0, [pc, #60]	; (730c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa54>)
    72ce:	6841      	ldr	r1, [r0, #4]
    72d0:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    72d4:	2a0b      	cmp	r2, #11
    72d6:	d202      	bcs.n	72de <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa26>
    72d8:	f241 5143 	movw	r1, #5443	; 0x1543
    72dc:	e005      	b.n	72ea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa32>
    72de:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    72e2:	2a0f      	cmp	r2, #15
    72e4:	d304      	bcc.n	72f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa38>
    72e6:	f241 5144 	movw	r1, #5444	; 0x1544
    72ea:	2032      	movs	r0, #50	; 0x32
    72ec:	f7fc fd48 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72f0:	68c0      	ldr	r0, [r0, #12]
    72f2:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    72f6:	6880      	ldr	r0, [r0, #8]
    72f8:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    72fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7300:	5840      	ldr	r0, [r0, r1]
    7302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7306:	4700      	bx	r0
    7308:	bd10      	pop	{r4, pc}
    730a:	0000      	.short	0x0000
    730c:	20000104 	.word	0x20000104
    7310:	b510      	push	{r4, lr}
    7312:	f7ff faef 	bl	68f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7316:	f000 f90b 	bl	7530 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    731a:	4805      	ldr	r0, [pc, #20]	; (7330 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa78>)
    731c:	6881      	ldr	r1, [r0, #8]
    731e:	2000      	movs	r0, #0
    7320:	f7ff fc3a 	bl	6b98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    7324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7328:	2003      	movs	r0, #3
    732a:	f000 bb79 	b.w	7a20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    732e:	0000      	.short	0x0000
    7330:	20000104 	.word	0x20000104
    7334:	b510      	push	{r4, lr}
    7336:	f7fd f94f 	bl	45d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    733a:	4604      	mov	r4, r0
    733c:	f7fd f952 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7340:	4621      	mov	r1, r4
    7342:	f007 f91a 	bl	e57a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7346:	b150      	cbz	r0, 735e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa6>
    7348:	f004 fb2e 	bl	b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    734c:	2000      	movs	r0, #0
    734e:	f004 f9df 	bl	b710 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7352:	4905      	ldr	r1, [pc, #20]	; (7368 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xab0>)
    7354:	2006      	movs	r0, #6
    7356:	6849      	ldr	r1, [r1, #4]
    7358:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    735c:	bd10      	pop	{r4, pc}
    735e:	f240 5184 	movw	r1, #1412	; 0x584
    7362:	2032      	movs	r0, #50	; 0x32
    7364:	f7fc fd0c 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7368:	20000104 	.word	0x20000104
    736c:	490f      	ldr	r1, [pc, #60]	; (73ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf4>)
    736e:	b510      	push	{r4, lr}
    7370:	6848      	ldr	r0, [r1, #4]
    7372:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7376:	2a06      	cmp	r2, #6
    7378:	d202      	bcs.n	7380 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac8>
    737a:	f241 5171 	movw	r1, #5489	; 0x1571
    737e:	e005      	b.n	738c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xad4>
    7380:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7384:	2a0b      	cmp	r2, #11
    7386:	d304      	bcc.n	7392 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xada>
    7388:	f241 5172 	movw	r1, #5490	; 0x1572
    738c:	2032      	movs	r0, #50	; 0x32
    738e:	f7fc fcf7 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7392:	68c9      	ldr	r1, [r1, #12]
    7394:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7398:	68c9      	ldr	r1, [r1, #12]
    739a:	f06f 0213 	mvn.w	r2, #19
    739e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    73a2:	5808      	ldr	r0, [r1, r0]
    73a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73a8:	4700      	bx	r0
    73aa:	0000      	.short	0x0000
    73ac:	20000104 	.word	0x20000104
    73b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73b4:	4c31      	ldr	r4, [pc, #196]	; (747c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc4>)
    73b6:	4605      	mov	r5, r0
    73b8:	460e      	mov	r6, r1
    73ba:	6860      	ldr	r0, [r4, #4]
    73bc:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    73c0:	b120      	cbz	r0, 73cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
    73c2:	2801      	cmp	r0, #1
    73c4:	d002      	beq.n	73cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
    73c6:	200c      	movs	r0, #12
    73c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73cc:	f004 fa60 	bl	b890 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    73d0:	f004 f86c 	bl	b4ac <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    73d4:	f003 fe4e 	bl	b074 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    73d8:	f004 fcc8 	bl	bd6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    73dc:	4828      	ldr	r0, [pc, #160]	; (7480 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc8>)
    73de:	f004 f98f 	bl	b700 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    73e2:	4828      	ldr	r0, [pc, #160]	; (7484 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbcc>)
    73e4:	f004 fbb8 	bl	bb58 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    73e8:	4827      	ldr	r0, [pc, #156]	; (7488 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd0>)
    73ea:	f004 fbab 	bl	bb44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    73ee:	4630      	mov	r0, r6
    73f0:	f004 fada 	bl	b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    73f4:	7968      	ldrb	r0, [r5, #5]
    73f6:	b110      	cbz	r0, 73fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb46>
    73f8:	2001      	movs	r0, #1
    73fa:	f7ff febd 	bl	7178 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    73fe:	7928      	ldrb	r0, [r5, #4]
    7400:	2803      	cmp	r0, #3
    7402:	d001      	beq.n	7408 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb50>
    7404:	b118      	cbz	r0, 740e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb56>
    7406:	e018      	b.n	743a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb82>
    7408:	f640 1188 	movw	r1, #2440	; 0x988
    740c:	e033      	b.n	7476 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbbe>
    740e:	6861      	ldr	r1, [r4, #4]
    7410:	2000      	movs	r0, #0
    7412:	2503      	movs	r5, #3
    7414:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    7418:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    741c:	1c52      	adds	r2, r2, #1
    741e:	fbb2 f7f5 	udiv	r7, r2, r5
    7422:	fb05 2217 	mls	r2, r5, r7, r2
    7426:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    742a:	fa23 f202 	lsr.w	r2, r3, r2
    742e:	07d2      	lsls	r2, r2, #31
    7430:	d103      	bne.n	743a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb82>
    7432:	1c40      	adds	r0, r0, #1
    7434:	b2c0      	uxtb	r0, r0
    7436:	2803      	cmp	r0, #3
    7438:	d3ee      	bcc.n	7418 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb60>
    743a:	6860      	ldr	r0, [r4, #4]
    743c:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    7440:	f004 faac 	bl	b99c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7444:	4631      	mov	r1, r6
    7446:	2001      	movs	r0, #1
    7448:	f7ff fa66 	bl	6918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    744c:	2800      	cmp	r0, #0
    744e:	d0bb      	beq.n	73c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb10>
    7450:	f000 f922 	bl	7698 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xde0>
    7454:	6860      	ldr	r0, [r4, #4]
    7456:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    745a:	b138      	cbz	r0, 746c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbb4>
    745c:	f7fe f87e 	bl	555c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    7460:	480a      	ldr	r0, [pc, #40]	; (748c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd4>)
    7462:	6800      	ldr	r0, [r0, #0]
    7464:	2803      	cmp	r0, #3
    7466:	d004      	beq.n	7472 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbba>
    7468:	2000      	movs	r0, #0
    746a:	e7ad      	b.n	73c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb10>
    746c:	f7fe fa6a 	bl	5944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7470:	e7f6      	b.n	7460 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xba8>
    7472:	f640 119a 	movw	r1, #2458	; 0x99a
    7476:	2032      	movs	r0, #50	; 0x32
    7478:	f7fc fc82 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    747c:	20000104 	.word	0x20000104
    7480:	00007794 	.word	0x00007794
    7484:	0000fb63 	.word	0x0000fb63
    7488:	8e89bed6 	.word	0x8e89bed6
    748c:	40001550 	.word	0x40001550
    7490:	b510      	push	{r4, lr}
    7492:	2000      	movs	r0, #0
    7494:	f7ff fe70 	bl	7178 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    7498:	4808      	ldr	r0, [pc, #32]	; (74bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>)
    749a:	6840      	ldr	r0, [r0, #4]
    749c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    74a0:	b128      	cbz	r0, 74ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf6>
    74a2:	2801      	cmp	r0, #1
    74a4:	d003      	beq.n	74ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf6>
    74a6:	2802      	cmp	r0, #2
    74a8:	d004      	beq.n	74b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbfc>
    74aa:	200c      	movs	r0, #12
    74ac:	bd10      	pop	{r4, pc}
    74ae:	f000 f82f 	bl	7510 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    74b2:	e001      	b.n	74b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc00>
    74b4:	f000 f844 	bl	7540 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc88>
    74b8:	2000      	movs	r0, #0
    74ba:	bd10      	pop	{r4, pc}
    74bc:	20000104 	.word	0x20000104
    74c0:	b570      	push	{r4, r5, r6, lr}
    74c2:	4c12      	ldr	r4, [pc, #72]	; (750c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>)
    74c4:	6860      	ldr	r0, [r4, #4]
    74c6:	f100 0532 	add.w	r5, r0, #50	; 0x32
    74ca:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    74ce:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    74d2:	b188      	cbz	r0, 74f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc40>
    74d4:	f7ff fb14 	bl	6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    74d8:	b130      	cbz	r0, 74e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
    74da:	6860      	ldr	r0, [r4, #4]
    74dc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    74e0:	b111      	cbz	r1, 74e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
    74e2:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    74e6:	e002      	b.n	74ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc36>
    74e8:	6860      	ldr	r0, [r4, #4]
    74ea:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    74ee:	f7fe f8db 	bl	56a8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    74f2:	b108      	cbz	r0, 74f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc40>
    74f4:	2601      	movs	r6, #1
    74f6:	4605      	mov	r5, r0
    74f8:	4629      	mov	r1, r5
    74fa:	68a0      	ldr	r0, [r4, #8]
    74fc:	f006 fdb2 	bl	e064 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7500:	4631      	mov	r1, r6
    7502:	68a0      	ldr	r0, [r4, #8]
    7504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7508:	f006 bdb2 	b.w	e070 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    750c:	20000104 	.word	0x20000104
    7510:	b510      	push	{r4, lr}
    7512:	f7ff f9ef 	bl	68f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7516:	4905      	ldr	r1, [pc, #20]	; (752c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc74>)
    7518:	2001      	movs	r0, #1
    751a:	6849      	ldr	r1, [r1, #4]
    751c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7524:	2000      	movs	r0, #0
    7526:	f000 ba7b 	b.w	7a20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    752a:	0000      	.short	0x0000
    752c:	20000104 	.word	0x20000104
    7530:	4902      	ldr	r1, [pc, #8]	; (753c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc84>)
    7532:	2000      	movs	r0, #0
    7534:	6849      	ldr	r1, [r1, #4]
    7536:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    753a:	4770      	bx	lr
    753c:	20000104 	.word	0x20000104
    7540:	b570      	push	{r4, r5, r6, lr}
    7542:	f7fd f849 	bl	45d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7546:	4604      	mov	r4, r0
    7548:	f7fd f84c 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    754c:	4621      	mov	r1, r4
    754e:	f007 f814 	bl	e57a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7552:	0004      	movs	r4, r0
    7554:	d020      	beq.n	7598 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce0>
    7556:	f007 f860 	bl	e61a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    755a:	2000      	movs	r0, #0
    755c:	f000 fa2a 	bl	79b4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7560:	b1f8      	cbz	r0, 75a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcea>
    7562:	4d1e      	ldr	r5, [pc, #120]	; (75dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd24>)
    7564:	6868      	ldr	r0, [r5, #4]
    7566:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    756a:	2802      	cmp	r0, #2
    756c:	d003      	beq.n	7576 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcbe>
    756e:	4621      	mov	r1, r4
    7570:	2000      	movs	r0, #0
    7572:	f7ff f9d1 	bl	6918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7576:	1ce0      	adds	r0, r4, #3
    7578:	f006 f9af 	bl	d8da <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    757c:	6869      	ldr	r1, [r5, #4]
    757e:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    7582:	b128      	cbz	r0, 7590 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    7584:	2440      	movs	r4, #64	; 0x40
    7586:	f003 fd95 	bl	b0b4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    758a:	4620      	mov	r0, r4
    758c:	f003 ff9c 	bl	b4c8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7590:	f7ff fab6 	bl	6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7594:	b970      	cbnz	r0, 75b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcfc>
    7596:	e008      	b.n	75aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcf2>
    7598:	f240 4177 	movw	r1, #1143	; 0x477
    759c:	2032      	movs	r0, #50	; 0x32
    759e:	f7fc fbef 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    75a6:	f7ff bfb3 	b.w	7510 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    75aa:	6868      	ldr	r0, [r5, #4]
    75ac:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    75b0:	2802      	cmp	r0, #2
    75b2:	d104      	bne.n	75be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd06>
    75b4:	2100      	movs	r1, #0
    75b6:	2201      	movs	r2, #1
    75b8:	4608      	mov	r0, r1
    75ba:	f004 fa81 	bl	bac0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    75be:	6868      	ldr	r0, [r5, #4]
    75c0:	21ff      	movs	r1, #255	; 0xff
    75c2:	f800 1f64 	strb.w	r1, [r0, #100]!
    75c6:	7041      	strb	r1, [r0, #1]
    75c8:	2100      	movs	r1, #0
    75ca:	7201      	strb	r1, [r0, #8]
    75cc:	71c1      	strb	r1, [r0, #7]
    75ce:	7241      	strb	r1, [r0, #9]
    75d0:	7601      	strb	r1, [r0, #24]
    75d2:	2105      	movs	r1, #5
    75d4:	f800 1c08 	strb.w	r1, [r0, #-8]
    75d8:	bd70      	pop	{r4, r5, r6, pc}
    75da:	0000      	.short	0x0000
    75dc:	20000104 	.word	0x20000104
    75e0:	b570      	push	{r4, r5, r6, lr}
    75e2:	f7fc fff9 	bl	45d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    75e6:	4604      	mov	r4, r0
    75e8:	f7fc fffc 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    75ec:	4621      	mov	r1, r4
    75ee:	f006 ffc4 	bl	e57a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    75f2:	0005      	movs	r5, r0
    75f4:	d028      	beq.n	7648 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd90>
    75f6:	4e19      	ldr	r6, [pc, #100]	; (765c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda4>)
    75f8:	2004      	movs	r0, #4
    75fa:	6874      	ldr	r4, [r6, #4]
    75fc:	345c      	adds	r4, #92	; 0x5c
    75fe:	f000 f9d9 	bl	79b4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7602:	b330      	cbz	r0, 7652 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd9a>
    7604:	200c      	movs	r0, #12
    7606:	7020      	strb	r0, [r4, #0]
    7608:	2001      	movs	r0, #1
    760a:	f000 fa09 	bl	7a20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    760e:	7828      	ldrb	r0, [r5, #0]
    7610:	6871      	ldr	r1, [r6, #4]
    7612:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7616:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    761a:	2005      	movs	r0, #5
    761c:	f7ff fb3a 	bl	6c94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7620:	4a0f      	ldr	r2, [pc, #60]	; (7660 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda8>)
    7622:	68b1      	ldr	r1, [r6, #8]
    7624:	2520      	movs	r5, #32
    7626:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7628:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    762c:	7808      	ldrb	r0, [r1, #0]
    762e:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    7632:	f020 0020 	bic.w	r0, r0, #32
    7636:	4318      	orrs	r0, r3
    7638:	7008      	strb	r0, [r1, #0]
    763a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    763c:	7ea2      	ldrb	r2, [r4, #26]
    763e:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    7642:	4011      	ands	r1, r2
    7644:	7001      	strb	r1, [r0, #0]
    7646:	bd70      	pop	{r4, r5, r6, pc}
    7648:	f240 51ef 	movw	r1, #1519	; 0x5ef
    764c:	2032      	movs	r0, #50	; 0x32
    764e:	f7fc fb97 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7656:	f7ff bf5b 	b.w	7510 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    765a:	0000      	.short	0x0000
    765c:	20000104 	.word	0x20000104
    7660:	200010a4 	.word	0x200010a4
    7664:	b510      	push	{r4, lr}
    7666:	2003      	movs	r0, #3
    7668:	f000 f9a4 	bl	79b4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    766c:	b168      	cbz	r0, 768a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdd2>
    766e:	2003      	movs	r0, #3
    7670:	f7ff fb10 	bl	6c94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7674:	2201      	movs	r2, #1
    7676:	4611      	mov	r1, r2
    7678:	2000      	movs	r0, #0
    767a:	f004 fa21 	bl	bac0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    767e:	4905      	ldr	r1, [pc, #20]	; (7694 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xddc>)
    7680:	200b      	movs	r0, #11
    7682:	6849      	ldr	r1, [r1, #4]
    7684:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7688:	bd10      	pop	{r4, pc}
    768a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    768e:	f7ff bf3f 	b.w	7510 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7692:	0000      	.short	0x0000
    7694:	20000104 	.word	0x20000104
    7698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    769c:	4c1d      	ldr	r4, [pc, #116]	; (7714 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe5c>)
    769e:	2600      	movs	r6, #0
    76a0:	6860      	ldr	r0, [r4, #4]
    76a2:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    76a6:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    76aa:	b911      	cbnz	r1, 76b2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdfa>
    76ac:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    76b0:	b350      	cbz	r0, 7708 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe50>
    76b2:	f004 fe00 	bl	c2b6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    76b6:	4680      	mov	r8, r0
    76b8:	6860      	ldr	r0, [r4, #4]
    76ba:	4641      	mov	r1, r8
    76bc:	6c40      	ldr	r0, [r0, #68]	; 0x44
    76be:	f7f9 ff89 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    76c2:	4f15      	ldr	r7, [pc, #84]	; (7718 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe60>)
    76c4:	4605      	mov	r5, r0
    76c6:	fb90 f0f7 	sdiv	r0, r0, r7
    76ca:	fb07 5010 	mls	r0, r7, r0, r5
    76ce:	4241      	negs	r1, r0
    76d0:	4640      	mov	r0, r8
    76d2:	f7f9 ff4d 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    76d6:	6861      	ldr	r1, [r4, #4]
    76d8:	6448      	str	r0, [r1, #68]	; 0x44
    76da:	fb95 f0f7 	sdiv	r0, r5, r7
    76de:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    76e0:	4410      	add	r0, r2
    76e2:	6788      	str	r0, [r1, #120]	; 0x78
    76e4:	f7fe f89c 	bl	5820 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    76e8:	6861      	ldr	r1, [r4, #4]
    76ea:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    76ec:	4290      	cmp	r0, r2
    76ee:	d80b      	bhi.n	7708 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe50>
    76f0:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    76f4:	678e      	str	r6, [r1, #120]	; 0x78
    76f6:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    76fa:	b110      	cbz	r0, 7702 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe4a>
    76fc:	2001      	movs	r0, #1
    76fe:	f7fd ff79 	bl	55f4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7702:	2001      	movs	r0, #1
    7704:	f7ff fd12 	bl	712c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x874>
    7708:	6861      	ldr	r1, [r4, #4]
    770a:	2002      	movs	r0, #2
    770c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7714:	20000104 	.word	0x20000104
    7718:	000f4240 	.word	0x000f4240
    771c:	00007531 	.word	0x00007531
    7720:	00007511 	.word	0x00007511
    7724:	0000e55b 	.word	0x0000e55b
    7728:	0000e55b 	.word	0x0000e55b
    772c:	0000e55b 	.word	0x0000e55b
    7730:	00007541 	.word	0x00007541
    7734:	0000e55b 	.word	0x0000e55b
    7738:	0000e55b 	.word	0x0000e55b
    773c:	0000e55b 	.word	0x0000e55b
    7740:	0000e55b 	.word	0x0000e55b
    7744:	0000e55b 	.word	0x0000e55b
    7748:	00007665 	.word	0x00007665
    774c:	000075e1 	.word	0x000075e1
    7750:	0000e55b 	.word	0x0000e55b
    7754:	0000e55b 	.word	0x0000e55b
    7758:	00007335 	.word	0x00007335
    775c:	00007311 	.word	0x00007311
    7760:	00000000 	.word	0x00000000
    7764:	0000e565 	.word	0x0000e565
    7768:	0000e503 	.word	0x0000e503
    776c:	0000e515 	.word	0x0000e515
    7770:	0000e523 	.word	0x0000e523
    7774:	00006aad 	.word	0x00006aad
    7778:	000073b1 	.word	0x000073b1
    777c:	00007491 	.word	0x00007491
    7780:	00007758 	.word	0x00007758
    7784:	00007760 	.word	0x00007760
    7788:	0000771c 	.word	0x0000771c
    778c:	00007770 	.word	0x00007770
    7790:	00007768 	.word	0x00007768
    7794:	0000736d 	.word	0x0000736d
    7798:	000071e9 	.word	0x000071e9
    779c:	000072bd 	.word	0x000072bd
    77a0:	0000e577 	.word	0x0000e577

000077a4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    77a4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    77a8:	461d      	mov	r5, r3
    77aa:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    77ae:	4616      	mov	r6, r2
    77b0:	4688      	mov	r8, r1
    77b2:	4681      	mov	r9, r0
    77b4:	f7fc ff16 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    77b8:	4604      	mov	r4, r0
    77ba:	f005 fd52 	bl	d262 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    77be:	2801      	cmp	r0, #1
    77c0:	d063      	beq.n	788a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    77c2:	4620      	mov	r0, r4
    77c4:	f006 ffa2 	bl	e70c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    77c8:	4604      	mov	r4, r0
    77ca:	221c      	movs	r2, #28
    77cc:	2100      	movs	r1, #0
    77ce:	f004 ff61 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    77d2:	2701      	movs	r7, #1
    77d4:	7027      	strb	r7, [r4, #0]
    77d6:	ea5f 0008 	movs.w	r0, r8
    77da:	d009      	beq.n	77f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    77dc:	2801      	cmp	r0, #1
    77de:	d00b      	beq.n	77f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    77e0:	2802      	cmp	r0, #2
    77e2:	d02d      	beq.n	7840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    77e4:	f1b8 0f06 	cmp.w	r8, #6
    77e8:	d02c      	beq.n	7844 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    77ea:	f240 217d 	movw	r1, #637	; 0x27d
    77ee:	e049      	b.n	7884 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    77f0:	7aa0      	ldrb	r0, [r4, #10]
    77f2:	f040 0001 	orr.w	r0, r0, #1
    77f6:	e026      	b.n	7846 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    77f8:	7aa0      	ldrb	r0, [r4, #10]
    77fa:	f040 0005 	orr.w	r0, r0, #5
    77fe:	bf00      	nop
    7800:	f040 0010 	orr.w	r0, r0, #16
    7804:	72a0      	strb	r0, [r4, #10]
    7806:	1c63      	adds	r3, r4, #1
    7808:	1ca2      	adds	r2, r4, #2
    780a:	4648      	mov	r0, r9
    780c:	990a      	ldr	r1, [sp, #40]	; 0x28
    780e:	f006 ff62 	bl	e6d6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    7812:	f884 a009 	strb.w	sl, [r4, #9]
    7816:	7327      	strb	r7, [r4, #12]
    7818:	2000      	movs	r0, #0
    781a:	7360      	strb	r0, [r4, #13]
    781c:	20ff      	movs	r0, #255	; 0xff
    781e:	73a0      	strb	r0, [r4, #14]
    7820:	7aa1      	ldrb	r1, [r4, #10]
    7822:	0749      	lsls	r1, r1, #29
    7824:	d518      	bpl.n	7858 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    7826:	f104 0014 	add.w	r0, r4, #20
    782a:	1e41      	subs	r1, r0, #1
    782c:	2d02      	cmp	r5, #2
    782e:	d00d      	beq.n	784c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7830:	2d03      	cmp	r5, #3
    7832:	d00b      	beq.n	784c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7834:	f8d9 2008 	ldr.w	r2, [r9, #8]
    7838:	6813      	ldr	r3, [r2, #0]
    783a:	6003      	str	r3, [r0, #0]
    783c:	8892      	ldrh	r2, [r2, #4]
    783e:	e008      	b.n	7852 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    7840:	7aa0      	ldrb	r0, [r4, #10]
    7842:	e7dd      	b.n	7800 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7844:	7aa0      	ldrb	r0, [r4, #10]
    7846:	f040 0002 	orr.w	r0, r0, #2
    784a:	e7d9      	b.n	7800 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    784c:	6832      	ldr	r2, [r6, #0]
    784e:	6002      	str	r2, [r0, #0]
    7850:	88b2      	ldrh	r2, [r6, #4]
    7852:	8082      	strh	r2, [r0, #4]
    7854:	700d      	strb	r5, [r1, #0]
    7856:	e000      	b.n	785a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    7858:	74e0      	strb	r0, [r4, #19]
    785a:	207f      	movs	r0, #127	; 0x7f
    785c:	76a0      	strb	r0, [r4, #26]
    785e:	f884 b01b 	strb.w	fp, [r4, #27]
    7862:	f7fc feb9 	bl	45d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7866:	4604      	mov	r4, r0
    7868:	f7fc febc 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    786c:	2201      	movs	r2, #1
    786e:	4621      	mov	r1, r4
    7870:	f006 ff55 	bl	e71e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    7874:	b120      	cbz	r0, 7880 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    7876:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    787a:	2005      	movs	r0, #5
    787c:	f000 b8d0 	b.w	7a20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7880:	f240 219d 	movw	r1, #669	; 0x29d
    7884:	2033      	movs	r0, #51	; 0x33
    7886:	f7fc fa7b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    788a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

00007890 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    7890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7894:	4616      	mov	r6, r2
    7896:	460c      	mov	r4, r1
    7898:	4605      	mov	r5, r0
    789a:	f006 fbaa 	bl	dff2 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    789e:	7460      	strb	r0, [r4, #17]
    78a0:	4628      	mov	r0, r5
    78a2:	f006 fb9d 	bl	dfe0 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    78a6:	74a0      	strb	r0, [r4, #18]
    78a8:	1cea      	adds	r2, r5, #3
    78aa:	4b14      	ldr	r3, [pc, #80]	; (78fc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    78ac:	1d90      	adds	r0, r2, #6
    78ae:	2100      	movs	r1, #0
    78b0:	2e07      	cmp	r6, #7
    78b2:	d21f      	bcs.n	78f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    78b4:	e8df f006 	tbb	[pc, r6]
    78b8:	1e110b04 	.word	0x1e110b04
    78bc:	00041e13 	.word	0x00041e13
    78c0:	781b      	ldrb	r3, [r3, #0]
    78c2:	e00d      	b.n	78e0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    78c4:	60e0      	str	r0, [r4, #12]
    78c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78ca:	60e1      	str	r1, [r4, #12]
    78cc:	e7fb      	b.n	78c6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    78ce:	785b      	ldrb	r3, [r3, #1]
    78d0:	7063      	strb	r3, [r4, #1]
    78d2:	e9c4 2001 	strd	r2, r0, [r4, #4]
    78d6:	7421      	strb	r1, [r4, #16]
    78d8:	e7f7      	b.n	78ca <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    78da:	789b      	ldrb	r3, [r3, #2]
    78dc:	e000      	b.n	78e0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    78de:	78db      	ldrb	r3, [r3, #3]
    78e0:	7063      	strb	r3, [r4, #1]
    78e2:	e9c4 2101 	strd	r2, r1, [r4, #4]
    78e6:	786a      	ldrb	r2, [r5, #1]
    78e8:	1f92      	subs	r2, r2, #6
    78ea:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    78ee:	7422      	strb	r2, [r4, #16]
    78f0:	d0eb      	beq.n	78ca <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    78f2:	e7e7      	b.n	78c4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    78f4:	7061      	strb	r1, [r4, #1]
    78f6:	6061      	str	r1, [r4, #4]
    78f8:	60a1      	str	r1, [r4, #8]
    78fa:	e7ec      	b.n	78d6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    78fc:	0000fb69 	.word	0x0000fb69

00007900 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    7900:	b570      	push	{r4, r5, r6, lr}
    7902:	f003 ff5d 	bl	b7c0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7906:	4c0e      	ldr	r4, [pc, #56]	; (7940 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    7908:	4606      	mov	r6, r0
    790a:	7860      	ldrb	r0, [r4, #1]
    790c:	b170      	cbz	r0, 792c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    790e:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    7912:	4632      	mov	r2, r6
    7914:	4628      	mov	r0, r5
    7916:	f006 f864 	bl	d9e2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    791a:	6060      	str	r0, [r4, #4]
    791c:	42a8      	cmp	r0, r5
    791e:	d005      	beq.n	792c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7920:	68e1      	ldr	r1, [r4, #12]
    7922:	1b40      	subs	r0, r0, r5
    7924:	4408      	add	r0, r1
    7926:	60e0      	str	r0, [r4, #12]
    7928:	f7fa fe16 	bl	2558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    792c:	6860      	ldr	r0, [r4, #4]
    792e:	42b0      	cmp	r0, r6
    7930:	d301      	bcc.n	7936 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    7932:	7820      	ldrb	r0, [r4, #0]
    7934:	b108      	cbz	r0, 793a <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7936:	2000      	movs	r0, #0
    7938:	bd70      	pop	{r4, r5, r6, pc}
    793a:	2001      	movs	r0, #1
    793c:	bd70      	pop	{r4, r5, r6, pc}
    793e:	0000      	.short	0x0000
    7940:	20001128 	.word	0x20001128

00007944 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7944:	b510      	push	{r4, lr}
    7946:	2905      	cmp	r1, #5
    7948:	d22d      	bcs.n	79a6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    794a:	e8df f001 	tbb	[pc, r1]
    794e:	0a05      	.short	0x0a05
    7950:	00280e03 	.word	0x00280e03
    7954:	2100      	movs	r1, #0
    7956:	e000      	b.n	795a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7958:	2101      	movs	r1, #1
    795a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    795e:	f000 babb 	b.w	7ed8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
    7962:	2103      	movs	r1, #3
    7964:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7968:	bd10      	pop	{r4, pc}
    796a:	4911      	ldr	r1, [pc, #68]	; (79b0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    796c:	4604      	mov	r4, r0
    796e:	68c0      	ldr	r0, [r0, #12]
    7970:	6008      	str	r0, [r1, #0]
    7972:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7976:	6220      	str	r0, [r4, #32]
    7978:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    797c:	83a0      	strh	r0, [r4, #28]
    797e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7982:	60e0      	str	r0, [r4, #12]
    7984:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7988:	82a0      	strh	r0, [r4, #20]
    798a:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    798e:	82e0      	strh	r0, [r4, #22]
    7990:	4620      	mov	r0, r4
    7992:	f006 fefe 	bl	e792 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    7996:	2002      	movs	r0, #2
    7998:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    799c:	bd10      	pop	{r4, pc}
    799e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79a2:	f006 bef6 	b.w	e792 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    79a6:	f640 3158 	movw	r1, #2904	; 0xb58
    79aa:	2035      	movs	r0, #53	; 0x35
    79ac:	f7fc f9e8 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79b0:	20000114 	.word	0x20000114

000079b4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    79b4:	b570      	push	{r4, r5, r6, lr}
    79b6:	4606      	mov	r6, r0
    79b8:	f004 fc7d 	bl	c2b6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    79bc:	4c17      	ldr	r4, [pc, #92]	; (7a1c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
    79be:	4601      	mov	r1, r0
    79c0:	6920      	ldr	r0, [r4, #16]
    79c2:	f7f9 fe07 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    79c6:	4605      	mov	r5, r0
    79c8:	b156      	cbz	r6, 79e0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    79ca:	2e03      	cmp	r6, #3
    79cc:	d00d      	beq.n	79ea <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    79ce:	2e04      	cmp	r6, #4
    79d0:	d00e      	beq.n	79f0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
    79d2:	2e06      	cmp	r6, #6
    79d4:	d01d      	beq.n	7a12 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    79d6:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    79da:	2035      	movs	r0, #53	; 0x35
    79dc:	f7fc f9d0 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79e0:	2001      	movs	r0, #1
    79e2:	f006 feba 	bl	e75a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    79e6:	3098      	adds	r0, #152	; 0x98
    79e8:	e004      	b.n	79f4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    79ea:	f44f 7057 	mov.w	r0, #860	; 0x35c
    79ee:	e001      	b.n	79f4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    79f0:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    79f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79f6:	4405      	add	r5, r0
    79f8:	39f1      	subs	r1, #241	; 0xf1
    79fa:	428d      	cmp	r5, r1
    79fc:	d307      	bcc.n	7a0e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    79fe:	2600      	movs	r6, #0
    7a00:	f000 fd36 	bl	8470 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x470>
    7a04:	b140      	cbz	r0, 7a18 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7a06:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7a08:	38f1      	subs	r0, #241	; 0xf1
    7a0a:	4285      	cmp	r5, r0
    7a0c:	d203      	bcs.n	7a16 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    7a0e:	2601      	movs	r6, #1
    7a10:	e002      	b.n	7a18 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7a12:	2001      	movs	r0, #1
    7a14:	bd70      	pop	{r4, r5, r6, pc}
    7a16:	2600      	movs	r6, #0
    7a18:	4630      	mov	r0, r6
    7a1a:	bd70      	pop	{r4, r5, r6, pc}
    7a1c:	20001138 	.word	0x20001138

00007a20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    7a20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7a22:	2501      	movs	r5, #1
    7a24:	4c24      	ldr	r4, [pc, #144]	; (7ab8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7a26:	2806      	cmp	r0, #6
    7a28:	d243      	bcs.n	7ab2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7a2a:	e8df f000 	tbb	[pc, r0]
    7a2e:	1903      	.short	0x1903
    7a30:	3e232319 	.word	0x3e232319
    7a34:	f7fe fae4 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7a38:	7860      	ldrb	r0, [r4, #1]
    7a3a:	bb88      	cbnz	r0, 7aa0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7a3c:	2200      	movs	r2, #0
    7a3e:	4611      	mov	r1, r2
    7a40:	4668      	mov	r0, sp
    7a42:	f000 fd5f 	bl	8504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x504>
    7a46:	b148      	cbz	r0, 7a5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7a48:	f7fe fd32 	bl	64b0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7a4c:	7800      	ldrb	r0, [r0, #0]
    7a4e:	4669      	mov	r1, sp
    7a50:	f006 feb1 	bl	e7b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7a54:	bb20      	cbnz	r0, 7aa0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7a56:	f640 2163 	movw	r1, #2659	; 0xa63
    7a5a:	e01c      	b.n	7a96 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7a5c:	70e5      	strb	r5, [r4, #3]
    7a5e:	e020      	b.n	7aa2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7a60:	2802      	cmp	r0, #2
    7a62:	d005      	beq.n	7a70 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7a64:	2000      	movs	r0, #0
    7a66:	b004      	add	sp, #16
    7a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a6c:	f000 ba50 	b.w	7f10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x244>
    7a70:	2001      	movs	r0, #1
    7a72:	e7f8      	b.n	7a66 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7a74:	2804      	cmp	r0, #4
    7a76:	d011      	beq.n	7a9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7a78:	f05f 0600 	movs.w	r6, #0
    7a7c:	f7fe fac0 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7a80:	7725      	strb	r5, [r4, #28]
    7a82:	7766      	strb	r6, [r4, #29]
    7a84:	69a1      	ldr	r1, [r4, #24]
    7a86:	2000      	movs	r0, #0
    7a88:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7a8c:	f000 faca 	bl	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    7a90:	b130      	cbz	r0, 7aa0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7a92:	f640 3118 	movw	r1, #2840	; 0xb18
    7a96:	2035      	movs	r0, #53	; 0x35
    7a98:	f7fc f972 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a9c:	2601      	movs	r6, #1
    7a9e:	e7ed      	b.n	7a7c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7aa0:	e7ff      	b.n	7aa2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7aa2:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7aa6:	f000 baad 	b.w	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7aaa:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7aae:	f7fe baa7 	b.w	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7ab2:	f640 31d4 	movw	r1, #3028	; 0xbd4
    7ab6:	e7ee      	b.n	7a96 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7ab8:	20001138 	.word	0x20001138

00007abc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    7abc:	b508      	push	{r3, lr}
    7abe:	2244      	movs	r2, #68	; 0x44
    7ac0:	2100      	movs	r1, #0
    7ac2:	480c      	ldr	r0, [pc, #48]	; (7af4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7ac4:	f004 fde6 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7ac8:	f7fe fcf2 	bl	64b0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7acc:	2120      	movs	r1, #32
    7ace:	7001      	strb	r1, [r0, #0]
    7ad0:	4808      	ldr	r0, [pc, #32]	; (7af4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7ad2:	3810      	subs	r0, #16
    7ad4:	2100      	movs	r1, #0
    7ad6:	6001      	str	r1, [r0, #0]
    7ad8:	6041      	str	r1, [r0, #4]
    7ada:	6081      	str	r1, [r0, #8]
    7adc:	60c1      	str	r1, [r0, #12]
    7ade:	f000 f80b 	bl	7af8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    7ae2:	f242 7010 	movw	r0, #10000	; 0x2710
    7ae6:	9000      	str	r0, [sp, #0]
    7ae8:	2201      	movs	r2, #1
    7aea:	4669      	mov	r1, sp
    7aec:	1080      	asrs	r0, r0, #2
    7aee:	f000 fad7 	bl	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    7af2:	bd08      	pop	{r3, pc}
    7af4:	20001138 	.word	0x20001138

00007af8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    7af8:	4804      	ldr	r0, [pc, #16]	; (7b0c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    7afa:	b510      	push	{r4, lr}
    7afc:	7800      	ldrb	r0, [r0, #0]
    7afe:	b108      	cbz	r0, 7b04 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    7b00:	f000 f8a8 	bl	7c54 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7b04:	f000 f8fe 	bl	7d04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    7b08:	2000      	movs	r0, #0
    7b0a:	bd10      	pop	{r4, pc}
    7b0c:	20001138 	.word	0x20001138

00007b10 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    7b10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7b14:	4c1e      	ldr	r4, [pc, #120]	; (7b90 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    7b16:	4607      	mov	r7, r0
    7b18:	460e      	mov	r6, r1
    7b1a:	7820      	ldrb	r0, [r4, #0]
    7b1c:	b118      	cbz	r0, 7b26 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x16>
    7b1e:	200c      	movs	r0, #12
    7b20:	b004      	add	sp, #16
    7b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b26:	f7fe fcc3 	bl	64b0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7b2a:	4605      	mov	r5, r0
    7b2c:	61a7      	str	r7, [r4, #24]
    7b2e:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    7b32:	b110      	cbz	r0, 7b3a <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x2a>
    7b34:	f44f 6184 	mov.w	r1, #1056	; 0x420
    7b38:	e026      	b.n	7b88 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7b3a:	2005      	movs	r0, #5
    7b3c:	7020      	strb	r0, [r4, #0]
    7b3e:	2000      	movs	r0, #0
    7b40:	7060      	strb	r0, [r4, #1]
    7b42:	7720      	strb	r0, [r4, #28]
    7b44:	4630      	mov	r0, r6
    7b46:	f000 f911 	bl	7d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7b4a:	f000 fc41 	bl	83d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d0>
    7b4e:	6320      	str	r0, [r4, #48]	; 0x30
    7b50:	2100      	movs	r1, #0
    7b52:	4810      	ldr	r0, [pc, #64]	; (7b94 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x84>)
    7b54:	f7fa fbf6 	bl	2344 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7b58:	7028      	strb	r0, [r5, #0]
    7b5a:	2820      	cmp	r0, #32
    7b5c:	d00c      	beq.n	7b78 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x68>
    7b5e:	2200      	movs	r2, #0
    7b60:	2101      	movs	r1, #1
    7b62:	4668      	mov	r0, sp
    7b64:	f000 fcce 	bl	8504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x504>
    7b68:	b148      	cbz	r0, 7b7e <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6e>
    7b6a:	7828      	ldrb	r0, [r5, #0]
    7b6c:	4669      	mov	r1, sp
    7b6e:	f006 fe22 	bl	e7b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7b72:	b138      	cbz	r0, 7b84 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    7b74:	2000      	movs	r0, #0
    7b76:	e7d3      	b.n	7b20 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    7b78:	f240 412f 	movw	r1, #1071	; 0x42f
    7b7c:	e004      	b.n	7b88 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7b7e:	f240 4132 	movw	r1, #1074	; 0x432
    7b82:	e001      	b.n	7b88 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7b84:	f240 4133 	movw	r1, #1075	; 0x433
    7b88:	2035      	movs	r0, #53	; 0x35
    7b8a:	f7fc f8f9 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b8e:	0000      	.short	0x0000
    7b90:	20001138 	.word	0x20001138
    7b94:	00007d8d 	.word	0x00007d8d

00007b98 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    7b98:	4902      	ldr	r1, [pc, #8]	; (7ba4 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    7b9a:	6989      	ldr	r1, [r1, #24]
    7b9c:	6001      	str	r1, [r0, #0]
    7b9e:	f000 b859 	b.w	7c54 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7ba2:	0000      	.short	0x0000
    7ba4:	20001138 	.word	0x20001138

00007ba8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    7ba8:	4901      	ldr	r1, [pc, #4]	; (7bb0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    7baa:	7048      	strb	r0, [r1, #1]
    7bac:	4770      	bx	lr
    7bae:	0000      	.short	0x0000
    7bb0:	20001128 	.word	0x20001128

00007bb4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    7bb4:	b570      	push	{r4, r5, r6, lr}
    7bb6:	4605      	mov	r5, r0
    7bb8:	4907      	ldr	r1, [pc, #28]	; (7bd8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
    7bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7bbe:	fbb1 f4f0 	udiv	r4, r1, r0
    7bc2:	f006 fe48 	bl	e856 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    7bc6:	1901      	adds	r1, r0, r4
    7bc8:	4628      	mov	r0, r5
    7bca:	f201 1137 	addw	r1, r1, #311	; 0x137
    7bce:	f006 fbc6 	bl	e35e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7bd2:	b280      	uxth	r0, r0
    7bd4:	bd70      	pop	{r4, r5, r6, pc}
    7bd6:	0000      	.short	0x0000
    7bd8:	00012105 	.word	0x00012105

00007bdc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    7bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7bde:	4606      	mov	r6, r0
    7be0:	b111      	cbz	r1, 7be8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
    7be2:	2011      	movs	r0, #17
    7be4:	b004      	add	sp, #16
    7be6:	bd70      	pop	{r4, r5, r6, pc}
    7be8:	4c18      	ldr	r4, [pc, #96]	; (7c4c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    7bea:	7820      	ldrb	r0, [r4, #0]
    7bec:	b108      	cbz	r0, 7bf2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
    7bee:	200c      	movs	r0, #12
    7bf0:	e7f8      	b.n	7be4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7bf2:	f7fe fc5d 	bl	64b0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7bf6:	4605      	mov	r5, r0
    7bf8:	2000      	movs	r0, #0
    7bfa:	7060      	strb	r0, [r4, #1]
    7bfc:	2004      	movs	r0, #4
    7bfe:	7020      	strb	r0, [r4, #0]
    7c00:	4630      	mov	r0, r6
    7c02:	f000 f8b3 	bl	7d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7c06:	f000 fbe3 	bl	83d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d0>
    7c0a:	6320      	str	r0, [r4, #48]	; 0x30
    7c0c:	2100      	movs	r1, #0
    7c0e:	4810      	ldr	r0, [pc, #64]	; (7c50 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
    7c10:	f7fa fb98 	bl	2344 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7c14:	7028      	strb	r0, [r5, #0]
    7c16:	2820      	cmp	r0, #32
    7c18:	d00c      	beq.n	7c34 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
    7c1a:	2200      	movs	r2, #0
    7c1c:	2101      	movs	r1, #1
    7c1e:	4668      	mov	r0, sp
    7c20:	f000 fc70 	bl	8504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x504>
    7c24:	b148      	cbz	r0, 7c3a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
    7c26:	7828      	ldrb	r0, [r5, #0]
    7c28:	4669      	mov	r1, sp
    7c2a:	f006 fdc4 	bl	e7b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7c2e:	b138      	cbz	r0, 7c40 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
    7c30:	2000      	movs	r0, #0
    7c32:	e7d7      	b.n	7be4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7c34:	f240 4196 	movw	r1, #1174	; 0x496
    7c38:	e004      	b.n	7c44 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7c3a:	f44f 6193 	mov.w	r1, #1176	; 0x498
    7c3e:	e001      	b.n	7c44 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7c40:	f240 4199 	movw	r1, #1177	; 0x499
    7c44:	2035      	movs	r0, #53	; 0x35
    7c46:	f7fc f89b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c4a:	0000      	.short	0x0000
    7c4c:	20001138 	.word	0x20001138
    7c50:	00007d8d 	.word	0x00007d8d

00007c54 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    7c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c58:	2700      	movs	r7, #0
    7c5a:	f7fe fc29 	bl	64b0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7c5e:	4c17      	ldr	r4, [pc, #92]	; (7cbc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
    7c60:	4605      	mov	r5, r0
    7c62:	7820      	ldrb	r0, [r4, #0]
    7c64:	2804      	cmp	r0, #4
    7c66:	d005      	beq.n	7c74 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7c68:	7820      	ldrb	r0, [r4, #0]
    7c6a:	2805      	cmp	r0, #5
    7c6c:	d002      	beq.n	7c74 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7c6e:	200c      	movs	r0, #12
    7c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c74:	2001      	movs	r0, #1
    7c76:	7060      	strb	r0, [r4, #1]
    7c78:	7b20      	ldrb	r0, [r4, #12]
    7c7a:	b160      	cbz	r0, 7c96 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    7c7c:	f3ef 8610 	mrs	r6, PRIMASK
    7c80:	b672      	cpsid	i
    7c82:	7b20      	ldrb	r0, [r4, #12]
    7c84:	b128      	cbz	r0, 7c92 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7c86:	7b60      	ldrb	r0, [r4, #13]
    7c88:	b118      	cbz	r0, 7c92 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7c8a:	f7fe fde3 	bl	6854 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7c8e:	f000 f9b9 	bl	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7c92:	b126      	cbz	r6, 7c9e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    7c94:	e004      	b.n	7ca0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7c96:	7828      	ldrb	r0, [r5, #0]
    7c98:	f7fa f90a 	bl	1eb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    7c9c:	e000      	b.n	7ca0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7c9e:	b662      	cpsie	i
    7ca0:	7828      	ldrb	r0, [r5, #0]
    7ca2:	f7fa fa43 	bl	212c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7ca6:	f000 fd5d 	bl	8764 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x764>
    7caa:	2000      	movs	r0, #0
    7cac:	7060      	strb	r0, [r4, #1]
    7cae:	7f20      	ldrb	r0, [r4, #28]
    7cb0:	b100      	cbz	r0, 7cb4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
    7cb2:	270c      	movs	r7, #12
    7cb4:	f000 fd80 	bl	87b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b8>
    7cb8:	4638      	mov	r0, r7
    7cba:	e7d9      	b.n	7c70 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    7cbc:	20001138 	.word	0x20001138

00007cc0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    7cc0:	4801      	ldr	r0, [pc, #4]	; (7cc8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    7cc2:	7800      	ldrb	r0, [r0, #0]
    7cc4:	4770      	bx	lr
    7cc6:	0000      	.short	0x0000
    7cc8:	20001138 	.word	0x20001138

00007ccc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    7ccc:	490c      	ldr	r1, [pc, #48]	; (7d00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    7cce:	b508      	push	{r3, lr}
    7cd0:	7809      	ldrb	r1, [r1, #0]
    7cd2:	b121      	cbz	r1, 7cde <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    7cd4:	f240 414f 	movw	r1, #1103	; 0x44f
    7cd8:	2035      	movs	r0, #53	; 0x35
    7cda:	f7fc f851 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cde:	2300      	movs	r3, #0
    7ce0:	9300      	str	r3, [sp, #0]
    7ce2:	7801      	ldrb	r1, [r0, #0]
    7ce4:	461a      	mov	r2, r3
    7ce6:	07c9      	lsls	r1, r1, #31
    7ce8:	d003      	beq.n	7cf2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    7cea:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7cee:	2201      	movs	r2, #1
    7cf0:	9000      	str	r0, [sp, #0]
    7cf2:	4669      	mov	r1, sp
    7cf4:	4618      	mov	r0, r3
    7cf6:	f000 f9d3 	bl	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    7cfa:	2000      	movs	r0, #0
    7cfc:	bd08      	pop	{r3, pc}
    7cfe:	0000      	.short	0x0000
    7d00:	20001138 	.word	0x20001138
    7d04:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7d06:	4c18      	ldr	r4, [pc, #96]	; (7d68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    7d08:	2001      	movs	r0, #1
    7d0a:	7020      	strb	r0, [r4, #0]
    7d0c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7d10:	e00b      	b.n	7d2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    7d12:	2100      	movs	r1, #0
    7d14:	f005 fce5 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7d18:	0006      	movs	r6, r0
    7d1a:	d010      	beq.n	7d3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    7d1c:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7d20:	f7fa fa04 	bl	212c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7d24:	4630      	mov	r0, r6
    7d26:	f006 fd5e 	bl	e7e6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    7d2a:	4669      	mov	r1, sp
    7d2c:	2000      	movs	r0, #0
    7d2e:	f005 fce1 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7d32:	b180      	cbz	r0, 7d56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7d34:	f44f 710f 	mov.w	r1, #572	; 0x23c
    7d38:	2035      	movs	r0, #53	; 0x35
    7d3a:	f7fc f821 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d3e:	f240 5141 	movw	r1, #1345	; 0x541
    7d42:	e7f9      	b.n	7d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    7d44:	9802      	ldr	r0, [sp, #8]
    7d46:	b130      	cbz	r0, 7d56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7d48:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7d4c:	b119      	cbz	r1, 7d56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7d4e:	8800      	ldrh	r0, [r0, #0]
    7d50:	42a8      	cmp	r0, r5
    7d52:	d1de      	bne.n	7d12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    7d54:	e004      	b.n	7d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    7d56:	4668      	mov	r0, sp
    7d58:	f7fc fa42 	bl	41e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7d5c:	2800      	cmp	r0, #0
    7d5e:	d0f1      	beq.n	7d44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    7d60:	2000      	movs	r0, #0
    7d62:	7020      	strb	r0, [r4, #0]
    7d64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7d66:	0000      	.short	0x0000
    7d68:	20001128 	.word	0x20001128
    7d6c:	4906      	ldr	r1, [pc, #24]	; (7d88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
    7d6e:	b140      	cbz	r0, 7d82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
    7d70:	2201      	movs	r2, #1
    7d72:	708a      	strb	r2, [r1, #2]
    7d74:	f242 7210 	movw	r2, #10000	; 0x2710
    7d78:	4350      	muls	r0, r2
    7d7a:	684a      	ldr	r2, [r1, #4]
    7d7c:	4410      	add	r0, r2
    7d7e:	6208      	str	r0, [r1, #32]
    7d80:	4770      	bx	lr
    7d82:	2000      	movs	r0, #0
    7d84:	7088      	strb	r0, [r1, #2]
    7d86:	4770      	bx	lr
    7d88:	20001138 	.word	0x20001138
    7d8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7d8e:	460d      	mov	r5, r1
    7d90:	2001      	movs	r0, #1
    7d92:	f006 fccb 	bl	e72c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7d96:	b2c4      	uxtb	r4, r0
    7d98:	200b      	movs	r0, #11
    7d9a:	f006 fcc7 	bl	e72c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7d9e:	b2c0      	uxtb	r0, r0
    7da0:	4284      	cmp	r4, r0
    7da2:	d002      	beq.n	7daa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
    7da4:	f240 21c5 	movw	r1, #709	; 0x2c5
    7da8:	e073      	b.n	7e92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7daa:	f7fe fb81 	bl	64b0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7dae:	2601      	movs	r6, #1
    7db0:	4c3b      	ldr	r4, [pc, #236]	; (7ea0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7db2:	2d09      	cmp	r5, #9
    7db4:	d270      	bcs.n	7e98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    7db6:	e8df f005 	tbb	[pc, r5]
    7dba:	3605      	.short	0x3605
    7dbc:	6f464a4a 	.word	0x6f464a4a
    7dc0:	006a665e 	.word	0x006a665e
    7dc4:	7326      	strb	r6, [r4, #12]
    7dc6:	7861      	ldrb	r1, [r4, #1]
    7dc8:	2900      	cmp	r1, #0
    7dca:	d12b      	bne.n	7e24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7dcc:	7800      	ldrb	r0, [r0, #0]
    7dce:	f7f9 fc25 	bl	161c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7dd2:	4605      	mov	r5, r0
    7dd4:	6120      	str	r0, [r4, #16]
    7dd6:	f000 fd09 	bl	87ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ec>
    7dda:	b118      	cbz	r0, 7de4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    7ddc:	2000      	movs	r0, #0
    7dde:	f88d 0004 	strb.w	r0, [sp, #4]
    7de2:	e001      	b.n	7de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
    7de4:	f88d 6004 	strb.w	r6, [sp, #4]
    7de8:	4629      	mov	r1, r5
    7dea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7dec:	f7f9 fbf2 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7df0:	6861      	ldr	r1, [r4, #4]
    7df2:	fbb0 f2f1 	udiv	r2, r0, r1
    7df6:	fb01 0012 	mls	r0, r1, r2, r0
    7dfa:	b150      	cbz	r0, 7e12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
    7dfc:	f05f 0000 	movs.w	r0, #0
    7e00:	f88d 0005 	strb.w	r0, [sp, #5]
    7e04:	4668      	mov	r0, sp
    7e06:	f7fe fc8d 	bl	6724 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7e0a:	b120      	cbz	r0, 7e16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
    7e0c:	f240 21ff 	movw	r1, #767	; 0x2ff
    7e10:	e03f      	b.n	7e92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7e12:	2001      	movs	r0, #1
    7e14:	e7f4      	b.n	7e00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
    7e16:	4922      	ldr	r1, [pc, #136]	; (7ea0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7e18:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e1a:	3910      	subs	r1, #16
    7e1c:	38e0      	subs	r0, #224	; 0xe0
    7e1e:	60c8      	str	r0, [r1, #12]
    7e20:	f7fa fb9a 	bl	2558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7e24:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7e26:	7860      	ldrb	r0, [r4, #1]
    7e28:	b128      	cbz	r0, 7e36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    7e2a:	f7fe fd13 	bl	6854 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7e2e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e32:	f000 b8e7 	b.w	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7e36:	7366      	strb	r6, [r4, #13]
    7e38:	f7fe fd06 	bl	6848 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7e3c:	2800      	cmp	r0, #0
    7e3e:	d0f1      	beq.n	7e24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7e40:	f240 3112 	movw	r1, #786	; 0x312
    7e44:	e025      	b.n	7e92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7e46:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e4a:	f003 bea9 	b.w	bba0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7e4e:	7805      	ldrb	r5, [r0, #0]
    7e50:	2201      	movs	r2, #1
    7e52:	2100      	movs	r1, #0
    7e54:	4668      	mov	r0, sp
    7e56:	f000 fb55 	bl	8504 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x504>
    7e5a:	b140      	cbz	r0, 7e6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
    7e5c:	4669      	mov	r1, sp
    7e5e:	4628      	mov	r0, r5
    7e60:	f006 fca9 	bl	e7b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7e64:	2800      	cmp	r0, #0
    7e66:	d1dd      	bne.n	7e24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7e68:	f640 217f 	movw	r1, #2687	; 0xa7f
    7e6c:	e011      	b.n	7e92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7e6e:	70e6      	strb	r6, [r4, #3]
    7e70:	f000 f818 	bl	7ea4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7e74:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7e76:	f000 fafb 	bl	8470 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x470>
    7e7a:	2800      	cmp	r0, #0
    7e7c:	d1fa      	bne.n	7e74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    7e7e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e82:	f006 bb3c 	b.w	e4fe <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7e86:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e8a:	f000 b80b 	b.w	7ea4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7e8e:	f240 3136 	movw	r1, #822	; 0x336
    7e92:	2035      	movs	r0, #53	; 0x35
    7e94:	f7fb ff74 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e98:	f240 313a 	movw	r1, #826	; 0x33a
    7e9c:	e7f9      	b.n	7e92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7e9e:	0000      	.short	0x0000
    7ea0:	20001138 	.word	0x20001138
    7ea4:	b510      	push	{r4, lr}
    7ea6:	4c0b      	ldr	r4, [pc, #44]	; (7ed4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x208>)
    7ea8:	7820      	ldrb	r0, [r4, #0]
    7eaa:	b130      	cbz	r0, 7eba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
    7eac:	f000 fc5a 	bl	8764 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x764>
    7eb0:	78e0      	ldrb	r0, [r4, #3]
    7eb2:	b158      	cbz	r0, 7ecc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7eb4:	7f20      	ldrb	r0, [r4, #28]
    7eb6:	b128      	cbz	r0, 7ec4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f8>
    7eb8:	e008      	b.n	7ecc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7eba:	f240 21b1 	movw	r1, #689	; 0x2b1
    7ebe:	2035      	movs	r0, #53	; 0x35
    7ec0:	f7fb ff5e 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ec4:	f7fe fcd8 	bl	6878 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    7ec8:	f7fe f89a 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ed0:	f000 bc72 	b.w	87b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b8>
    7ed4:	20001138 	.word	0x20001138
    7ed8:	b510      	push	{r4, lr}
    7eda:	4604      	mov	r4, r0
    7edc:	2901      	cmp	r1, #1
    7ede:	d102      	bne.n	7ee6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21a>
    7ee0:	480a      	ldr	r0, [pc, #40]	; (7f0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x240>)
    7ee2:	7800      	ldrb	r0, [r0, #0]
    7ee4:	b140      	cbz	r0, 7ef8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>
    7ee6:	2004      	movs	r0, #4
    7ee8:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7eec:	f003 fca4 	bl	b838 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ef4:	f7fa ba4e 	b.w	2394 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7ef8:	2200      	movs	r2, #0
    7efa:	2101      	movs	r1, #1
    7efc:	4620      	mov	r0, r4
    7efe:	f006 fc8a 	bl	e816 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    7f02:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    7f06:	1c40      	adds	r0, r0, #1
    7f08:	8020      	strh	r0, [r4, #0]
    7f0a:	e7ef      	b.n	7eec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x220>
    7f0c:	20001128 	.word	0x20001128
    7f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f14:	4c39      	ldr	r4, [pc, #228]	; (7ffc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x330>)
    7f16:	4682      	mov	sl, r0
    7f18:	6926      	ldr	r6, [r4, #16]
    7f1a:	f003 fc51 	bl	b7c0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7f1e:	4605      	mov	r5, r0
    7f20:	69a0      	ldr	r0, [r4, #24]
    7f22:	2201      	movs	r2, #1
    7f24:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    7f28:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    7f2c:	3062      	adds	r0, #98	; 0x62
    7f2e:	2101      	movs	r1, #1
    7f30:	7281      	strb	r1, [r0, #10]
    7f32:	69a0      	ldr	r0, [r4, #24]
    7f34:	2100      	movs	r1, #0
    7f36:	302c      	adds	r0, #44	; 0x2c
    7f38:	f006 f9f8 	bl	e32c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7f3c:	2101      	movs	r1, #1
    7f3e:	2000      	movs	r0, #0
    7f40:	f006 fc95 	bl	e86e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    7f44:	69a7      	ldr	r7, [r4, #24]
    7f46:	1971      	adds	r1, r6, r5
    7f48:	4408      	add	r0, r1
    7f4a:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    7f4e:	f8d7 800c 	ldr.w	r8, [r7, #12]
    7f52:	f002 fb67 	bl	a624 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    7f56:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    7f5a:	4288      	cmp	r0, r1
    7f5c:	d00a      	beq.n	7f74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2a8>
    7f5e:	464a      	mov	r2, r9
    7f60:	4641      	mov	r1, r8
    7f62:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    7f66:	f006 fdb0 	bl	eaca <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    7f6a:	4540      	cmp	r0, r8
    7f6c:	d903      	bls.n	7f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2aa>
    7f6e:	f240 51f6 	movw	r1, #1526	; 0x5f6
    7f72:	e022      	b.n	7fba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ee>
    7f74:	2000      	movs	r0, #0
    7f76:	4922      	ldr	r1, [pc, #136]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7f78:	4607      	mov	r7, r0
    7f7a:	6849      	ldr	r1, [r1, #4]
    7f7c:	4288      	cmp	r0, r1
    7f7e:	69a0      	ldr	r0, [r4, #24]
    7f80:	68c1      	ldr	r1, [r0, #12]
    7f82:	d202      	bcs.n	7f8a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2be>
    7f84:	440f      	add	r7, r1
    7f86:	6201      	str	r1, [r0, #32]
    7f88:	e008      	b.n	7f9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d0>
    7f8a:	4638      	mov	r0, r7
    7f8c:	f005 fee5 	bl	dd5a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7f90:	69a1      	ldr	r1, [r4, #24]
    7f92:	68c9      	ldr	r1, [r1, #12]
    7f94:	f005 fedd 	bl	dd52 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7f98:	69a1      	ldr	r1, [r4, #24]
    7f9a:	6208      	str	r0, [r1, #32]
    7f9c:	69a0      	ldr	r0, [r4, #24]
    7f9e:	68c1      	ldr	r1, [r0, #12]
    7fa0:	2005      	movs	r0, #5
    7fa2:	f005 fee0 	bl	dd66 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7fa6:	69a1      	ldr	r1, [r4, #24]
    7fa8:	b280      	uxth	r0, r0
    7faa:	8388      	strh	r0, [r1, #28]
    7fac:	69a1      	ldr	r1, [r4, #24]
    7fae:	6a09      	ldr	r1, [r1, #32]
    7fb0:	1a79      	subs	r1, r7, r1
    7fb2:	4288      	cmp	r0, r1
    7fb4:	d804      	bhi.n	7fc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f4>
    7fb6:	f640 21ee 	movw	r1, #2798	; 0xaee
    7fba:	2035      	movs	r0, #53	; 0x35
    7fbc:	f7fb fee0 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fc0:	2101      	movs	r1, #1
    7fc2:	4650      	mov	r0, sl
    7fc4:	f006 fc53 	bl	e86e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    7fc8:	4428      	add	r0, r5
    7fca:	19c5      	adds	r5, r0, r7
    7fcc:	2101      	movs	r1, #1
    7fce:	4650      	mov	r0, sl
    7fd0:	f005 fdf5 	bl	dbbe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7fd4:	4405      	add	r5, r0
    7fd6:	2001      	movs	r0, #1
    7fd8:	f007 fd0d 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7fdc:	f64a 2113 	movw	r1, #43539	; 0xaa13
    7fe0:	4408      	add	r0, r1
    7fe2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7fe6:	fbb0 f0f1 	udiv	r0, r0, r1
    7fea:	1a29      	subs	r1, r5, r0
    7fec:	4630      	mov	r0, r6
    7fee:	f7f9 fabf 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7ff2:	69a1      	ldr	r1, [r4, #24]
    7ff4:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    7ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ffc:	20001138 	.word	0x20001138
    8000:	20000114 	.word	0x20000114
    8004:	b510      	push	{r4, lr}
    8006:	4c06      	ldr	r4, [pc, #24]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    8008:	7b20      	ldrb	r0, [r4, #12]
    800a:	2800      	cmp	r0, #0
    800c:	d006      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    800e:	f003 fc13 	bl	b838 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8012:	f7fa f9bf 	bl	2394 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8016:	2000      	movs	r0, #0
    8018:	7320      	strb	r0, [r4, #12]
    801a:	7360      	strb	r0, [r4, #13]
    801c:	bd10      	pop	{r4, pc}
    801e:	0000      	.short	0x0000
    8020:	20001138 	.word	0x20001138
    8024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8026:	4c1c      	ldr	r4, [pc, #112]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    8028:	7820      	ldrb	r0, [r4, #0]
    802a:	2805      	cmp	r0, #5
    802c:	d002      	beq.n	8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    802e:	200c      	movs	r0, #12
    8030:	b004      	add	sp, #16
    8032:	bd10      	pop	{r4, pc}
    8034:	69a1      	ldr	r1, [r4, #24]
    8036:	b129      	cbz	r1, 8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    8038:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    803c:	b128      	cbz	r0, 804a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    803e:	f240 41fa 	movw	r1, #1274	; 0x4fa
    8042:	e025      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    8044:	f240 41f9 	movw	r1, #1273	; 0x4f9
    8048:	e022      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    804a:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    804e:	2820      	cmp	r0, #32
    8050:	d002      	beq.n	8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    8052:	f240 41fc 	movw	r1, #1276	; 0x4fc
    8056:	e01b      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    8058:	4810      	ldr	r0, [pc, #64]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    805a:	f7fa f973 	bl	2344 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    805e:	69a1      	ldr	r1, [r4, #24]
    8060:	2820      	cmp	r0, #32
    8062:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    8066:	d00e      	beq.n	8086 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86>
    8068:	2300      	movs	r3, #0
    806a:	2201      	movs	r2, #1
    806c:	4668      	mov	r0, sp
    806e:	f000 f8bd 	bl	81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    8072:	69a0      	ldr	r0, [r4, #24]
    8074:	4669      	mov	r1, sp
    8076:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    807a:	f006 fb9c 	bl	e7b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    807e:	b128      	cbz	r0, 808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
    8080:	2000      	movs	r0, #0
    8082:	61a0      	str	r0, [r4, #24]
    8084:	e7d4      	b.n	8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    8086:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    808a:	e001      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    808c:	f240 5103 	movw	r1, #1283	; 0x503
    8090:	2035      	movs	r0, #53	; 0x35
    8092:	f7fb fe75 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8096:	0000      	.short	0x0000
    8098:	20001138 	.word	0x20001138
    809c:	000080f5 	.word	0x000080f5
    80a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80a4:	4d11      	ldr	r5, [pc, #68]	; (80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>)
    80a6:	4616      	mov	r6, r2
    80a8:	460f      	mov	r7, r1
    80aa:	2400      	movs	r4, #0
    80ac:	6068      	str	r0, [r5, #4]
    80ae:	f006 fbd2 	bl	e856 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    80b2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    80b6:	2100      	movs	r1, #0
    80b8:	f81c 2001 	ldrb.w	r2, [ip, r1]
    80bc:	4232      	tst	r2, r6
    80be:	d007      	beq.n	80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
    80c0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    80c4:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    80c8:	1a1b      	subs	r3, r3, r0
    80ca:	1c64      	adds	r4, r4, #1
    80cc:	b2e4      	uxtb	r4, r4
    80ce:	6093      	str	r3, [r2, #8]
    80d0:	1c49      	adds	r1, r1, #1
    80d2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    80d6:	d0ef      	beq.n	80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    80d8:	f016 0f0e 	tst.w	r6, #14
    80dc:	d004      	beq.n	80e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
    80de:	f640 11b6 	movw	r1, #2486	; 0x9b6
    80e2:	2035      	movs	r0, #53	; 0x35
    80e4:	f7fb fe4c 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80ec:	20001138 	.word	0x20001138
    80f0:	0000fb6d 	.word	0x0000fb6d
    80f4:	b570      	push	{r4, r5, r6, lr}
    80f6:	460d      	mov	r5, r1
    80f8:	0004      	movs	r4, r0
    80fa:	d00c      	beq.n	8116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    80fc:	2001      	movs	r0, #1
    80fe:	f006 fb15 	bl	e72c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8102:	b2c6      	uxtb	r6, r0
    8104:	200b      	movs	r0, #11
    8106:	f006 fb11 	bl	e72c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    810a:	b2c0      	uxtb	r0, r0
    810c:	4286      	cmp	r6, r0
    810e:	d005      	beq.n	811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>
    8110:	f240 215f 	movw	r1, #607	; 0x25f
    8114:	e061      	b.n	81da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da>
    8116:	f44f 7117 	mov.w	r1, #604	; 0x25c
    811a:	e05e      	b.n	81da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da>
    811c:	2d09      	cmp	r5, #9
    811e:	d25f      	bcs.n	81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>
    8120:	e8df f005 	tbb	[pc, r5]
    8124:	3d3d3505 	.word	0x3d3d3505
    8128:	4b445e39 	.word	0x4b445e39
    812c:	0059      	.short	0x0059
    812e:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8132:	b348      	cbz	r0, 8188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>
    8134:	4620      	mov	r0, r4
    8136:	f000 fd69 	bl	8c0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    813a:	f006 fb8c 	bl	e856 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    813e:	f500 709c 	add.w	r0, r0, #312	; 0x138
    8142:	b285      	uxth	r5, r0
    8144:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8148:	2128      	movs	r1, #40	; 0x28
    814a:	f006 fb20 	bl	e78e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3a>
    814e:	182e      	adds	r6, r5, r0
    8150:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8152:	68e0      	ldr	r0, [r4, #12]
    8154:	4288      	cmp	r0, r1
    8156:	d200      	bcs.n	815a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a>
    8158:	4601      	mov	r1, r0
    815a:	4632      	mov	r2, r6
    815c:	4620      	mov	r0, r4
    815e:	f006 f86e 	bl	e23e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8162:	4d21      	ldr	r5, [pc, #132]	; (81e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>)
    8164:	4632      	mov	r2, r6
    8166:	6068      	str	r0, [r5, #4]
    8168:	4620      	mov	r0, r4
    816a:	68e1      	ldr	r1, [r4, #12]
    816c:	f006 f867 	bl	e23e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8170:	60a8      	str	r0, [r5, #8]
    8172:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8176:	f006 f8c3 	bl	e300 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    817a:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    817e:	60e8      	str	r0, [r5, #12]
    8180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8184:	f7fa b9e8 	b.w	2558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8188:	f240 2165 	movw	r1, #613	; 0x265
    818c:	e025      	b.n	81da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da>
    818e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8192:	f006 bbf2 	b.w	e97a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    8196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    819a:	f003 bd01 	b.w	bba0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    819e:	4620      	mov	r0, r4
    81a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81a4:	2201      	movs	r2, #1
    81a6:	2100      	movs	r1, #0
    81a8:	f006 bb35 	b.w	e816 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    81ac:	2001      	movs	r0, #1
    81ae:	f7f9 f8b3 	bl	1318 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    81b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81b6:	f005 bb74 	b.w	d8a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    81ba:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    81be:	2804      	cmp	r0, #4
    81c0:	d002      	beq.n	81c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c8>
    81c2:	f240 2199 	movw	r1, #665	; 0x299
    81c6:	e008      	b.n	81da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da>
    81c8:	4620      	mov	r0, r4
    81ca:	f006 fb0c 	bl	e7e6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    81ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81d2:	f7fd bf15 	b.w	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    81d6:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    81da:	2035      	movs	r0, #53	; 0x35
    81dc:	f7fb fdd0 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81e0:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    81e4:	e7f9      	b.n	81da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da>
    81e6:	0000      	.short	0x0000
    81e8:	20001128 	.word	0x20001128
    81ec:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    81f0:	4605      	mov	r5, r0
    81f2:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    81f6:	2600      	movs	r6, #0
    81f8:	f8d1 b020 	ldr.w	fp, [r1, #32]
    81fc:	469a      	mov	sl, r3
    81fe:	460c      	mov	r4, r1
    8200:	280d      	cmp	r0, #13
    8202:	d020      	beq.n	8246 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x246>
    8204:	280c      	cmp	r0, #12
    8206:	d01e      	beq.n	8246 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x246>
    8208:	2824      	cmp	r0, #36	; 0x24
    820a:	d01c      	beq.n	8246 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x246>
    820c:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8210:	2824      	cmp	r0, #36	; 0x24
    8212:	d018      	beq.n	8246 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x246>
    8214:	2000      	movs	r0, #0
    8216:	4680      	mov	r8, r0
    8218:	f006 fb12 	bl	e840 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    821c:	4681      	mov	r9, r0
    821e:	f1ba 0f00 	cmp.w	sl, #0
    8222:	d003      	beq.n	822c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22c>
    8224:	2101      	movs	r1, #1
    8226:	4620      	mov	r0, r4
    8228:	f006 fb4e 	bl	e8c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    822c:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8230:	2701      	movs	r7, #1
    8232:	b150      	cbz	r0, 824a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24a>
    8234:	2801      	cmp	r0, #1
    8236:	d01b      	beq.n	8270 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x270>
    8238:	2802      	cmp	r0, #2
    823a:	d011      	beq.n	8260 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x260>
    823c:	2803      	cmp	r0, #3
    823e:	d017      	beq.n	8270 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x270>
    8240:	f640 1139 	movw	r1, #2361	; 0x939
    8244:	e07b      	b.n	833e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33e>
    8246:	2001      	movs	r0, #1
    8248:	e7e5      	b.n	8216 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x216>
    824a:	9802      	ldr	r0, [sp, #8]
    824c:	b128      	cbz	r0, 825a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25a>
    824e:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    8252:	4620      	mov	r0, r4
    8254:	f006 fa9d 	bl	e792 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    8258:	e00b      	b.n	8272 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x272>
    825a:	f640 01ff 	movw	r1, #2303	; 0x8ff
    825e:	e06e      	b.n	833e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33e>
    8260:	4838      	ldr	r0, [pc, #224]	; (8344 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x344>)
    8262:	6801      	ldr	r1, [r0, #0]
    8264:	2003      	movs	r0, #3
    8266:	eb01 060b 	add.w	r6, r1, fp
    826a:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    826e:	e000      	b.n	8272 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x272>
    8270:	68e6      	ldr	r6, [r4, #12]
    8272:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8276:	4631      	mov	r1, r6
    8278:	f7f9 f97a 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    827c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8280:	60e8      	str	r0, [r5, #12]
    8282:	2000      	movs	r0, #0
    8284:	7028      	strb	r0, [r5, #0]
    8286:	f8a5 9008 	strh.w	r9, [r5, #8]
    828a:	4620      	mov	r0, r4
    828c:	f000 fc0c 	bl	8aa8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8290:	f1a8 0101 	sub.w	r1, r8, #1
    8294:	4208      	tst	r0, r1
    8296:	d101      	bne.n	829c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29c>
    8298:	72af      	strb	r7, [r5, #10]
    829a:	e005      	b.n	82a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a8>
    829c:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    82a0:	2801      	cmp	r0, #1
    82a2:	d017      	beq.n	82d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d4>
    82a4:	2003      	movs	r0, #3
    82a6:	72a8      	strb	r0, [r5, #10]
    82a8:	46b9      	mov	r9, r7
    82aa:	72ef      	strb	r7, [r5, #11]
    82ac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    82b0:	f006 f826 	bl	e300 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    82b4:	6068      	str	r0, [r5, #4]
    82b6:	f1ba 0f00 	cmp.w	sl, #0
    82ba:	d03c      	beq.n	8336 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x336>
    82bc:	4631      	mov	r1, r6
    82be:	4628      	mov	r0, r5
    82c0:	f005 fcdc 	bl	dc7c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    82c4:	b287      	uxth	r7, r0
    82c6:	4620      	mov	r0, r4
    82c8:	f000 fbee 	bl	8aa8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    82cc:	f1b8 0f00 	cmp.w	r8, #0
    82d0:	d002      	beq.n	82d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d8>
    82d2:	e014      	b.n	82fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fe>
    82d4:	2002      	movs	r0, #2
    82d6:	e7e6      	b.n	82a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a6>
    82d8:	42b8      	cmp	r0, r7
    82da:	d810      	bhi.n	82fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fe>
    82dc:	4607      	mov	r7, r0
    82de:	f885 900a 	strb.w	r9, [r5, #10]
    82e2:	fb06 f107 	mul.w	r1, r6, r7
    82e6:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    82ea:	f7f9 f941 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    82ee:	60e8      	str	r0, [r5, #12]
    82f0:	b31e      	cbz	r6, 833a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33a>
    82f2:	4631      	mov	r1, r6
    82f4:	4628      	mov	r0, r5
    82f6:	f005 fcc1 	bl	dc7c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    82fa:	4438      	add	r0, r7
    82fc:	b287      	uxth	r7, r0
    82fe:	4639      	mov	r1, r7
    8300:	4620      	mov	r0, r4
    8302:	f006 fae1 	bl	e8c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8306:	68e8      	ldr	r0, [r5, #12]
    8308:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    830c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    830e:	2800      	cmp	r0, #0
    8310:	d011      	beq.n	8336 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x336>
    8312:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8316:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    831a:	1a40      	subs	r0, r0, r1
    831c:	b202      	sxth	r2, r0
    831e:	2a00      	cmp	r2, #0
    8320:	dd09      	ble.n	8336 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x336>
    8322:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    8326:	4402      	add	r2, r0
    8328:	1e52      	subs	r2, r2, #1
    832a:	fb92 f2f0 	sdiv	r2, r2, r0
    832e:	b292      	uxth	r2, r2
    8330:	fb02 1000 	mla	r0, r2, r0, r1
    8334:	86e0      	strh	r0, [r4, #54]	; 0x36
    8336:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    833a:	f640 1174 	movw	r1, #2420	; 0x974
    833e:	2035      	movs	r0, #53	; 0x35
    8340:	f7fb fd1e 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8344:	20000114 	.word	0x20000114
    8348:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    834c:	460d      	mov	r5, r1
    834e:	4607      	mov	r7, r0
    8350:	f000 fa58 	bl	8804 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x804>
    8354:	4c1d      	ldr	r4, [pc, #116]	; (83cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3cc>)
    8356:	6861      	ldr	r1, [r4, #4]
    8358:	f7f9 f90a 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    835c:	4606      	mov	r6, r0
    835e:	4601      	mov	r1, r0
    8360:	4638      	mov	r0, r7
    8362:	f7f9 f937 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8366:	4607      	mov	r7, r0
    8368:	f006 fa7b 	bl	e862 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    836c:	4287      	cmp	r7, r0
    836e:	da10      	bge.n	8392 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x392>
    8370:	6960      	ldr	r0, [r4, #20]
    8372:	f000 fa47 	bl	8804 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x804>
    8376:	4631      	mov	r1, r6
    8378:	f7f9 f92c 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    837c:	6861      	ldr	r1, [r4, #4]
    837e:	fbb0 f0f1 	udiv	r0, r0, r1
    8382:	6028      	str	r0, [r5, #0]
    8384:	6861      	ldr	r1, [r4, #4]
    8386:	b004      	add	sp, #16
    8388:	4630      	mov	r0, r6
    838a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    838e:	f7f9 b8ef 	b.w	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8392:	2000      	movs	r0, #0
    8394:	f88d 0000 	strb.w	r0, [sp]
    8398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    839a:	9001      	str	r0, [sp, #4]
    839c:	f006 fa50 	bl	e840 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    83a0:	f8ad 0008 	strh.w	r0, [sp, #8]
    83a4:	2001      	movs	r0, #1
    83a6:	f88d 000b 	strb.w	r0, [sp, #11]
    83aa:	6960      	ldr	r0, [r4, #20]
    83ac:	f000 fa2a 	bl	8804 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x804>
    83b0:	9003      	str	r0, [sp, #12]
    83b2:	f000 f9c1 	bl	8738 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x738>
    83b6:	f88d 000a 	strb.w	r0, [sp, #10]
    83ba:	4668      	mov	r0, sp
    83bc:	6861      	ldr	r1, [r4, #4]
    83be:	f005 fc5d 	bl	dc7c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    83c2:	6028      	str	r0, [r5, #0]
    83c4:	9803      	ldr	r0, [sp, #12]
    83c6:	b004      	add	sp, #16
    83c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83cc:	20001138 	.word	0x20001138
    83d0:	b510      	push	{r4, lr}
    83d2:	2400      	movs	r4, #0
    83d4:	f006 fa3f 	bl	e856 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    83d8:	4a06      	ldr	r2, [pc, #24]	; (83f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f4>)
    83da:	2100      	movs	r1, #0
    83dc:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    83e0:	4404      	add	r4, r0
    83e2:	689b      	ldr	r3, [r3, #8]
    83e4:	1c49      	adds	r1, r1, #1
    83e6:	441c      	add	r4, r3
    83e8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    83ec:	d0f6      	beq.n	83dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>
    83ee:	4620      	mov	r0, r4
    83f0:	bd10      	pop	{r4, pc}
    83f2:	0000      	.short	0x0000
    83f4:	20001138 	.word	0x20001138
    83f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    83fa:	4c1b      	ldr	r4, [pc, #108]	; (8468 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x468>)
    83fc:	4606      	mov	r6, r0
    83fe:	460d      	mov	r5, r1
    8400:	78a0      	ldrb	r0, [r4, #2]
    8402:	b360      	cbz	r0, 845e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45e>
    8404:	4919      	ldr	r1, [pc, #100]	; (846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>)
    8406:	6a20      	ldr	r0, [r4, #32]
    8408:	4288      	cmp	r0, r1
    840a:	d828      	bhi.n	845e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45e>
    840c:	2000      	movs	r0, #0
    840e:	f88d 0000 	strb.w	r0, [sp]
    8412:	9501      	str	r5, [sp, #4]
    8414:	f006 fa14 	bl	e840 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    8418:	f8ad 0008 	strh.w	r0, [sp, #8]
    841c:	2001      	movs	r0, #1
    841e:	f88d 000b 	strb.w	r0, [sp, #11]
    8422:	f006 fa1e 	bl	e862 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    8426:	4601      	mov	r1, r0
    8428:	4630      	mov	r0, r6
    842a:	f7f9 f8a1 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    842e:	9003      	str	r0, [sp, #12]
    8430:	2003      	movs	r0, #3
    8432:	f88d 000a 	strb.w	r0, [sp, #10]
    8436:	4668      	mov	r0, sp
    8438:	f7f9 fbd8 	bl	1bec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    843c:	4606      	mov	r6, r0
    843e:	4629      	mov	r1, r5
    8440:	9803      	ldr	r0, [sp, #12]
    8442:	f7f9 f895 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8446:	4605      	mov	r5, r0
    8448:	6a21      	ldr	r1, [r4, #32]
    844a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    844c:	f7f9 f890 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8450:	4601      	mov	r1, r0
    8452:	b13e      	cbz	r6, 8464 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x464>
    8454:	4628      	mov	r0, r5
    8456:	f7f9 f8bd 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    845a:	2800      	cmp	r0, #0
    845c:	db02      	blt.n	8464 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x464>
    845e:	2001      	movs	r0, #1
    8460:	b004      	add	sp, #16
    8462:	bd70      	pop	{r4, r5, r6, pc}
    8464:	2000      	movs	r0, #0
    8466:	e7fb      	b.n	8460 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x460>
    8468:	20001138 	.word	0x20001138
    846c:	07a12000 	.word	0x07a12000
    8470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8474:	f003 ff1f 	bl	c2b6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8478:	4c21      	ldr	r4, [pc, #132]	; (8500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x500>)
    847a:	4607      	mov	r7, r0
    847c:	6920      	ldr	r0, [r4, #16]
    847e:	f000 f95b 	bl	8738 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x738>
    8482:	4606      	mov	r6, r0
    8484:	f7f9 f81a 	bl	14bc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    8488:	4605      	mov	r5, r0
    848a:	2865      	cmp	r0, #101	; 0x65
    848c:	d326      	bcc.n	84dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4dc>
    848e:	1c68      	adds	r0, r5, #1
    8490:	d027      	beq.n	84e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e2>
    8492:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8494:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8496:	1948      	adds	r0, r1, r5
    8498:	4282      	cmp	r2, r0
    849a:	d800      	bhi.n	849e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49e>
    849c:	1a55      	subs	r5, r2, r1
    849e:	f06f 0139 	mvn.w	r1, #57	; 0x39
    84a2:	4638      	mov	r0, r7
    84a4:	f7f9 f864 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    84a8:	4629      	mov	r1, r5
    84aa:	f000 f9bd 	bl	8828 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x828>
    84ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    84b0:	4408      	add	r0, r1
    84b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    84b4:	1a45      	subs	r5, r0, r1
    84b6:	f241 3088 	movw	r0, #5000	; 0x1388
    84ba:	4285      	cmp	r5, r0
    84bc:	d900      	bls.n	84c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c0>
    84be:	4605      	mov	r5, r0
    84c0:	f003 fef9 	bl	c2b6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    84c4:	4601      	mov	r1, r0
    84c6:	4638      	mov	r0, r7
    84c8:	f7f9 f884 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    84cc:	309d      	adds	r0, #157	; 0x9d
    84ce:	4285      	cmp	r5, r0
    84d0:	d304      	bcc.n	84dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4dc>
    84d2:	4631      	mov	r1, r6
    84d4:	4628      	mov	r0, r5
    84d6:	f7f8 ff2f 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    84da:	b120      	cbz	r0, 84e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e6>
    84dc:	2000      	movs	r0, #0
    84de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84e4:	e7e5      	b.n	84b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b2>
    84e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    84e8:	4905      	ldr	r1, [pc, #20]	; (8500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x500>)
    84ea:	4428      	add	r0, r5
    84ec:	3910      	subs	r1, #16
    84ee:	6260      	str	r0, [r4, #36]	; 0x24
    84f0:	68c8      	ldr	r0, [r1, #12]
    84f2:	4428      	add	r0, r5
    84f4:	60c8      	str	r0, [r1, #12]
    84f6:	f7fa f82f 	bl	2558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    84fa:	2001      	movs	r0, #1
    84fc:	e7ef      	b.n	84de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4de>
    84fe:	0000      	.short	0x0000
    8500:	20001138 	.word	0x20001138
    8504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8508:	b08c      	sub	sp, #48	; 0x30
    850a:	4616      	mov	r6, r2
    850c:	4607      	mov	r7, r0
    850e:	f003 fed2 	bl	c2b6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8512:	4c87      	ldr	r4, [pc, #540]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    8514:	9002      	str	r0, [sp, #8]
    8516:	2500      	movs	r5, #0
    8518:	f8d4 a008 	ldr.w	sl, [r4, #8]
    851c:	f006 f99b 	bl	e856 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    8520:	68a1      	ldr	r1, [r4, #8]
    8522:	4408      	add	r0, r1
    8524:	6861      	ldr	r1, [r4, #4]
    8526:	4288      	cmp	r0, r1
    8528:	d101      	bne.n	852e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52e>
    852a:	2001      	movs	r0, #1
    852c:	e000      	b.n	8530 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x530>
    852e:	2000      	movs	r0, #0
    8530:	4683      	mov	fp, r0
    8532:	980d      	ldr	r0, [sp, #52]	; 0x34
    8534:	ea06 090b 	and.w	r9, r6, fp
    8538:	2800      	cmp	r0, #0
    853a:	d065      	beq.n	8608 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x608>
    853c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    8540:	9802      	ldr	r0, [sp, #8]
    8542:	f7f9 f815 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8546:	9000      	str	r0, [sp, #0]
    8548:	f002 f872 	bl	a630 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    854c:	4680      	mov	r8, r0
    854e:	4878      	ldr	r0, [pc, #480]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    8550:	7800      	ldrb	r0, [r0, #0]
    8552:	4e77      	ldr	r6, [pc, #476]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    8554:	362c      	adds	r6, #44	; 0x2c
    8556:	2805      	cmp	r0, #5
    8558:	d12e      	bne.n	85b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b8>
    855a:	4875      	ldr	r0, [pc, #468]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    855c:	6980      	ldr	r0, [r0, #24]
    855e:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    8562:	f002 f845 	bl	a5f0 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    8566:	4604      	mov	r4, r0
    8568:	4540      	cmp	r0, r8
    856a:	d009      	beq.n	8580 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x580>
    856c:	4870      	ldr	r0, [pc, #448]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    856e:	4621      	mov	r1, r4
    8570:	6980      	ldr	r0, [r0, #24]
    8572:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8576:	f001 ffff 	bl	a578 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    857a:	2000      	movs	r0, #0
    857c:	6170      	str	r0, [r6, #20]
    857e:	e00c      	b.n	859a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59a>
    8580:	496b      	ldr	r1, [pc, #428]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    8582:	6988      	ldr	r0, [r1, #24]
    8584:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8588:	6170      	str	r0, [r6, #20]
    858a:	698a      	ldr	r2, [r1, #24]
    858c:	6b08      	ldr	r0, [r1, #48]	; 0x30
    858e:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    8592:	4290      	cmp	r0, r2
    8594:	d200      	bcs.n	8598 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x598>
    8596:	4610      	mov	r0, r2
    8598:	6308      	str	r0, [r1, #48]	; 0x30
    859a:	4865      	ldr	r0, [pc, #404]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    859c:	6980      	ldr	r0, [r0, #24]
    859e:	b130      	cbz	r0, 85ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ae>
    85a0:	b144      	cbz	r4, 85b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b4>
    85a2:	e9d4 1200 	ldrd	r1, r2, [r4]
    85a6:	4411      	add	r1, r2
    85a8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    85ac:	e004      	b.n	85b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b8>
    85ae:	f240 51c5 	movw	r1, #1477	; 0x5c5
    85b2:	e017      	b.n	85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    85b4:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    85b8:	4641      	mov	r1, r8
    85ba:	4630      	mov	r0, r6
    85bc:	f001 ffdc 	bl	a578 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    85c0:	ea5f 0008 	movs.w	r0, r8
    85c4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>
    85c8:	9a00      	ldr	r2, [sp, #0]
    85ca:	f8d8 4004 	ldr.w	r4, [r8, #4]
    85ce:	d00c      	beq.n	85ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ea>
    85d0:	e9d0 1000 	ldrd	r1, r0, [r0]
    85d4:	4408      	add	r0, r1
    85d6:	4621      	mov	r1, r4
    85d8:	f006 fa77 	bl	eaca <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    85dc:	42a0      	cmp	r0, r4
    85de:	d904      	bls.n	85ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ea>
    85e0:	f240 51e3 	movw	r1, #1507	; 0x5e3
    85e4:	2035      	movs	r0, #53	; 0x35
    85e6:	f7fb fbcb 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ea:	4601      	mov	r1, r0
    85ec:	9800      	ldr	r0, [sp, #0]
    85ee:	f7f8 ffbf 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85f2:	4606      	mov	r6, r0
    85f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    85f8:	4644      	mov	r4, r8
    85fa:	4241      	negs	r1, r0
    85fc:	4630      	mov	r0, r6
    85fe:	f7f8 ffb7 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8602:	62e0      	str	r0, [r4, #44]	; 0x2c
    8604:	2001      	movs	r0, #1
    8606:	e042      	b.n	868e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68e>
    8608:	f1b9 0f00 	cmp.w	r9, #0
    860c:	d018      	beq.n	8640 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x640>
    860e:	2001      	movs	r0, #1
    8610:	f006 f8a3 	bl	e75a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8614:	4604      	mov	r4, r0
    8616:	2001      	movs	r0, #1
    8618:	f007 f9ed 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    861c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8620:	4401      	add	r1, r0
    8622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8626:	fbb1 f0f0 	udiv	r0, r1, r0
    862a:	1821      	adds	r1, r4, r0
    862c:	31f1      	adds	r1, #241	; 0xf1
    862e:	9802      	ldr	r0, [sp, #8]
    8630:	f7ff fee2 	bl	83f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f8>
    8634:	b908      	cbnz	r0, 863a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63a>
    8636:	f04f 0a00 	mov.w	sl, #0
    863a:	9e02      	ldr	r6, [sp, #8]
    863c:	9508      	str	r5, [sp, #32]
    863e:	e027      	b.n	8690 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x690>
    8640:	b12e      	cbz	r6, 864e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64e>
    8642:	a908      	add	r1, sp, #32
    8644:	9802      	ldr	r0, [sp, #8]
    8646:	f7ff fe7f 	bl	8348 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x348>
    864a:	4606      	mov	r6, r0
    864c:	e020      	b.n	8690 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x690>
    864e:	9802      	ldr	r0, [sp, #8]
    8650:	f000 f8d8 	bl	8804 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x804>
    8654:	4c36      	ldr	r4, [pc, #216]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    8656:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    865a:	f7f8 ff89 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    865e:	4606      	mov	r6, r0
    8660:	6920      	ldr	r0, [r4, #16]
    8662:	f000 f8c3 	bl	87ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ec>
    8666:	6861      	ldr	r1, [r4, #4]
    8668:	4348      	muls	r0, r1
    866a:	78a1      	ldrb	r1, [r4, #2]
    866c:	b131      	cbz	r1, 867c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x67c>
    866e:	6a21      	ldr	r1, [r4, #32]
    8670:	4281      	cmp	r1, r0
    8672:	d302      	bcc.n	867a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x67a>
    8674:	1a09      	subs	r1, r1, r0
    8676:	6221      	str	r1, [r4, #32]
    8678:	e000      	b.n	867c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x67c>
    867a:	6225      	str	r5, [r4, #32]
    867c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    867e:	4601      	mov	r1, r0
    8680:	4610      	mov	r0, r2
    8682:	f7f8 ff75 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8686:	62e0      	str	r0, [r4, #44]	; 0x2c
    8688:	4630      	mov	r0, r6
    868a:	f000 f8af 	bl	87ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ec>
    868e:	9008      	str	r0, [sp, #32]
    8690:	2001      	movs	r0, #1
    8692:	f006 f862 	bl	e75a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8696:	4604      	mov	r4, r0
    8698:	2001      	movs	r0, #1
    869a:	f007 f9ac 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    869e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    86a2:	4401      	add	r1, r0
    86a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    86a8:	fbb1 f0f0 	udiv	r0, r1, r0
    86ac:	4404      	add	r4, r0
    86ae:	4651      	mov	r1, sl
    86b0:	4630      	mov	r0, r6
    86b2:	34f1      	adds	r4, #241	; 0xf1
    86b4:	f000 f8b8 	bl	8828 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x828>
    86b8:	491d      	ldr	r1, [pc, #116]	; (8730 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x730>)
    86ba:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    86be:	6892      	ldr	r2, [r2, #8]
    86c0:	4282      	cmp	r2, r0
    86c2:	d800      	bhi.n	86c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c6>
    86c4:	4610      	mov	r0, r2
    86c6:	6288      	str	r0, [r1, #40]	; 0x28
    86c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    86ca:	b102      	cbz	r2, 86ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ce>
    86cc:	610e      	str	r6, [r1, #16]
    86ce:	4688      	mov	r8, r1
    86d0:	614e      	str	r6, [r1, #20]
    86d2:	f1bb 0f00 	cmp.w	fp, #0
    86d6:	d002      	beq.n	86de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6de>
    86d8:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    86dc:	e001      	b.n	86e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e2>
    86de:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    86e2:	f04f 0a01 	mov.w	sl, #1
    86e6:	f887 a00b 	strb.w	sl, [r7, #11]
    86ea:	f006 f8a9 	bl	e840 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    86ee:	8138      	strh	r0, [r7, #8]
    86f0:	4630      	mov	r0, r6
    86f2:	f000 f821 	bl	8738 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x738>
    86f6:	72b8      	strb	r0, [r7, #10]
    86f8:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    86fc:	6078      	str	r0, [r7, #4]
    86fe:	f1b9 0f00 	cmp.w	r9, #0
    8702:	d008      	beq.n	8716 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x716>
    8704:	f887 a000 	strb.w	sl, [r7]
    8708:	490a      	ldr	r1, [pc, #40]	; (8734 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x734>)
    870a:	9802      	ldr	r0, [sp, #8]
    870c:	f000 f88c 	bl	8828 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x828>
    8710:	1b00      	subs	r0, r0, r4
    8712:	60f8      	str	r0, [r7, #12]
    8714:	e001      	b.n	871a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x71a>
    8716:	703d      	strb	r5, [r7, #0]
    8718:	60fe      	str	r6, [r7, #12]
    871a:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    871e:	42a0      	cmp	r0, r4
    8720:	d303      	bcc.n	872a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72a>
    8722:	2001      	movs	r0, #1
    8724:	b00f      	add	sp, #60	; 0x3c
    8726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    872a:	2000      	movs	r0, #0
    872c:	e7fa      	b.n	8724 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x724>
    872e:	0000      	.short	0x0000
    8730:	20001138 	.word	0x20001138
    8734:	07a12000 	.word	0x07a12000
    8738:	4a09      	ldr	r2, [pc, #36]	; (8760 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x760>)
    873a:	b510      	push	{r4, lr}
    873c:	7811      	ldrb	r1, [r2, #0]
    873e:	2904      	cmp	r1, #4
    8740:	d10c      	bne.n	875c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x75c>
    8742:	6851      	ldr	r1, [r2, #4]
    8744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    8746:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    874a:	004c      	lsls	r4, r1, #1
    874c:	4601      	mov	r1, r0
    874e:	4610      	mov	r0, r2
    8750:	f7f8 ff40 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8754:	42a0      	cmp	r0, r4
    8756:	d201      	bcs.n	875c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x75c>
    8758:	2003      	movs	r0, #3
    875a:	bd10      	pop	{r4, pc}
    875c:	2002      	movs	r0, #2
    875e:	bd10      	pop	{r4, pc}
    8760:	20001138 	.word	0x20001138
    8764:	b570      	push	{r4, r5, r6, lr}
    8766:	4d13      	ldr	r5, [pc, #76]	; (87b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b4>)
    8768:	7f28      	ldrb	r0, [r5, #28]
    876a:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    876e:	2800      	cmp	r0, #0
    8770:	7828      	ldrb	r0, [r5, #0]
    8772:	d00f      	beq.n	8794 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x794>
    8774:	2805      	cmp	r0, #5
    8776:	d004      	beq.n	8782 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x782>
    8778:	f240 318f 	movw	r1, #911	; 0x38f
    877c:	2035      	movs	r0, #53	; 0x35
    877e:	f7fb faff 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8782:	4620      	mov	r0, r4
    8784:	f005 ffe1 	bl	e74a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    8788:	b178      	cbz	r0, 87aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7aa>
    878a:	4620      	mov	r0, r4
    878c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8790:	f001 bed0 	b.w	a534 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    8794:	2805      	cmp	r0, #5
    8796:	d108      	bne.n	87aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7aa>
    8798:	4620      	mov	r0, r4
    879a:	f005 ffd6 	bl	e74a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    879e:	b920      	cbnz	r0, 87aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7aa>
    87a0:	69a8      	ldr	r0, [r5, #24]
    87a2:	f500 7084 	add.w	r0, r0, #264	; 0x108
    87a6:	f001 ff07 	bl	a5b8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    87aa:	4620      	mov	r0, r4
    87ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87b0:	f001 bf02 	b.w	a5b8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    87b4:	20001138 	.word	0x20001138
    87b8:	b510      	push	{r4, lr}
    87ba:	f7fd ff27 	bl	660c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    87be:	490a      	ldr	r1, [pc, #40]	; (87e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e8>)
    87c0:	2000      	movs	r0, #0
    87c2:	70c8      	strb	r0, [r1, #3]
    87c4:	7708      	strb	r0, [r1, #28]
    87c6:	6188      	str	r0, [r1, #24]
    87c8:	7008      	strb	r0, [r1, #0]
    87ca:	f7fd fe71 	bl	64b0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    87ce:	4604      	mov	r4, r0
    87d0:	7800      	ldrb	r0, [r0, #0]
    87d2:	f7f9 fc89 	bl	20e8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    87d6:	b110      	cbz	r0, 87de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7de>
    87d8:	2020      	movs	r0, #32
    87da:	7020      	strb	r0, [r4, #0]
    87dc:	bd10      	pop	{r4, pc}
    87de:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    87e2:	2035      	movs	r0, #53	; 0x35
    87e4:	f7fb facc 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87e8:	20001138 	.word	0x20001138
    87ec:	b510      	push	{r4, lr}
    87ee:	4c04      	ldr	r4, [pc, #16]	; (8800 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x800>)
    87f0:	4601      	mov	r1, r0
    87f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    87f4:	f7f8 feee 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    87f8:	6861      	ldr	r1, [r4, #4]
    87fa:	fbb0 f0f1 	udiv	r0, r0, r1
    87fe:	bd10      	pop	{r4, pc}
    8800:	20001138 	.word	0x20001138
    8804:	b510      	push	{r4, lr}
    8806:	4c07      	ldr	r4, [pc, #28]	; (8824 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x824>)
    8808:	4601      	mov	r1, r0
    880a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    880c:	f7f8 fee2 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8810:	6861      	ldr	r1, [r4, #4]
    8812:	fbb0 f2f1 	udiv	r2, r0, r1
    8816:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    881c:	4351      	muls	r1, r2
    881e:	f7f8 bea7 	b.w	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8822:	0000      	.short	0x0000
    8824:	20001138 	.word	0x20001138
    8828:	b570      	push	{r4, r5, r6, lr}
    882a:	4605      	mov	r5, r0
    882c:	480d      	ldr	r0, [pc, #52]	; (8864 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x864>)
    882e:	460c      	mov	r4, r1
    8830:	7881      	ldrb	r1, [r0, #2]
    8832:	b1a9      	cbz	r1, 8860 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x860>
    8834:	4a0c      	ldr	r2, [pc, #48]	; (8868 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x868>)
    8836:	6a01      	ldr	r1, [r0, #32]
    8838:	4291      	cmp	r1, r2
    883a:	d211      	bcs.n	8860 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x860>
    883c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    883e:	f7f8 fe97 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8842:	4606      	mov	r6, r0
    8844:	4621      	mov	r1, r4
    8846:	4628      	mov	r0, r5
    8848:	f7f8 fe92 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    884c:	4601      	mov	r1, r0
    884e:	4630      	mov	r0, r6
    8850:	f7f8 fec0 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8854:	2800      	cmp	r0, #0
    8856:	dd03      	ble.n	8860 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x860>
    8858:	1a20      	subs	r0, r4, r0
    885a:	d500      	bpl.n	885e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x85e>
    885c:	2000      	movs	r0, #0
    885e:	bd70      	pop	{r4, r5, r6, pc}
    8860:	4620      	mov	r0, r4
    8862:	bd70      	pop	{r4, r5, r6, pc}
    8864:	20001138 	.word	0x20001138
    8868:	07a12000 	.word	0x07a12000

0000886c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    886c:	4806      	ldr	r0, [pc, #24]	; (8888 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    886e:	4905      	ldr	r1, [pc, #20]	; (8884 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    8870:	6501      	str	r1, [r0, #80]	; 0x50
    8872:	4906      	ldr	r1, [pc, #24]	; (888c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    8874:	6541      	str	r1, [r0, #84]	; 0x54
    8876:	4807      	ldr	r0, [pc, #28]	; (8894 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    8878:	4905      	ldr	r1, [pc, #20]	; (8890 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    887a:	6501      	str	r1, [r0, #80]	; 0x50
    887c:	4906      	ldr	r1, [pc, #24]	; (8898 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    887e:	6541      	str	r1, [r0, #84]	; 0x54
    8880:	4770      	bx	lr
    8882:	0000      	.short	0x0000
    8884:	000099c9 	.word	0x000099c9
    8888:	2000012c 	.word	0x2000012c
    888c:	00009a95 	.word	0x00009a95
    8890:	0000a0c5 	.word	0x0000a0c5
    8894:	20000190 	.word	0x20000190
    8898:	0000a0f5 	.word	0x0000a0f5

0000889c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    889e:	460d      	mov	r5, r1
    88a0:	4607      	mov	r7, r0
    88a2:	2100      	movs	r1, #0
    88a4:	f004 ff1d 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    88a8:	1e04      	subs	r4, r0, #0
    88aa:	d051      	beq.n	8950 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    88ac:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    88b0:	2800      	cmp	r0, #0
    88b2:	d04d      	beq.n	8950 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    88b4:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    88b8:	f88d 0000 	strb.w	r0, [sp]
    88bc:	9800      	ldr	r0, [sp, #0]
    88be:	9000      	str	r0, [sp, #0]
    88c0:	f89d 0000 	ldrb.w	r0, [sp]
    88c4:	2600      	movs	r6, #0
    88c6:	b158      	cbz	r0, 88e0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    88c8:	706e      	strb	r6, [r5, #1]
    88ca:	2009      	movs	r0, #9
    88cc:	7028      	strb	r0, [r5, #0]
    88ce:	220a      	movs	r2, #10
    88d0:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    88d4:	1d28      	adds	r0, r5, #4
    88d6:	f003 fe63 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    88da:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    88de:	e0e1      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    88e0:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    88e4:	280e      	cmp	r0, #14
    88e6:	d01d      	beq.n	8924 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    88e8:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    88ec:	280d      	cmp	r0, #13
    88ee:	d027      	beq.n	8940 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    88f0:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    88f4:	f88d 0000 	strb.w	r0, [sp]
    88f8:	9800      	ldr	r0, [sp, #0]
    88fa:	9000      	str	r0, [sp, #0]
    88fc:	f89d 0000 	ldrb.w	r0, [sp]
    8900:	b3b0      	cbz	r0, 8970 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    8902:	706e      	strb	r6, [r5, #1]
    8904:	2008      	movs	r0, #8
    8906:	7028      	strb	r0, [r5, #0]
    8908:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    890c:	6068      	str	r0, [r5, #4]
    890e:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    8912:	60a8      	str	r0, [r5, #8]
    8914:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    8918:	60e8      	str	r0, [r5, #12]
    891a:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    891e:	f804 6c02 	strb.w	r6, [r4, #-2]
    8922:	e0bf      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8924:	8820      	ldrh	r0, [r4, #0]
    8926:	f7fb fe29 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    892a:	4607      	mov	r7, r0
    892c:	f004 fda9 	bl	d482 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8930:	b968      	cbnz	r0, 894e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    8932:	706e      	strb	r6, [r5, #1]
    8934:	200e      	movs	r0, #14
    8936:	7028      	strb	r0, [r5, #0]
    8938:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    893c:	6068      	str	r0, [r5, #4]
    893e:	e011      	b.n	8964 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    8940:	8820      	ldrh	r0, [r4, #0]
    8942:	f7fb fe1b 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8946:	4607      	mov	r7, r0
    8948:	f004 fd9b 	bl	d482 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    894c:	b108      	cbz	r0, 8952 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    894e:	2000      	movs	r0, #0
    8950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8952:	706e      	strb	r6, [r5, #1]
    8954:	200d      	movs	r0, #13
    8956:	7028      	strb	r0, [r5, #0]
    8958:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    895c:	6068      	str	r0, [r5, #4]
    895e:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    8962:	8128      	strh	r0, [r5, #8]
    8964:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8968:	4638      	mov	r0, r7
    896a:	f004 fda5 	bl	d4b8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    896e:	e099      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8970:	e7ff      	b.n	8972 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    8972:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    8976:	f88d 0000 	strb.w	r0, [sp]
    897a:	9800      	ldr	r0, [sp, #0]
    897c:	9000      	str	r0, [sp, #0]
    897e:	f89d 0000 	ldrb.w	r0, [sp]
    8982:	b130      	cbz	r0, 8992 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    8984:	706e      	strb	r6, [r5, #1]
    8986:	2010      	movs	r0, #16
    8988:	7028      	strb	r0, [r5, #0]
    898a:	80af      	strh	r7, [r5, #4]
    898c:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    8990:	e088      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8992:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    8996:	f88d 0000 	strb.w	r0, [sp]
    899a:	9800      	ldr	r0, [sp, #0]
    899c:	9000      	str	r0, [sp, #0]
    899e:	f89d 0000 	ldrb.w	r0, [sp]
    89a2:	b1c8      	cbz	r0, 89d8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    89a4:	706e      	strb	r6, [r5, #1]
    89a6:	2015      	movs	r0, #21
    89a8:	7028      	strb	r0, [r5, #0]
    89aa:	e00a      	b.n	89c2 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    89ac:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    89b0:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    89b4:	6068      	str	r0, [r5, #4]
    89b6:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    89ba:	60a8      	str	r0, [r5, #8]
    89bc:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    89c0:	60e8      	str	r0, [r5, #12]
    89c2:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    89c6:	f88d 0000 	strb.w	r0, [sp]
    89ca:	9800      	ldr	r0, [sp, #0]
    89cc:	9000      	str	r0, [sp, #0]
    89ce:	f89d 0000 	ldrb.w	r0, [sp]
    89d2:	2800      	cmp	r0, #0
    89d4:	d1ea      	bne.n	89ac <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    89d6:	e065      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    89d8:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    89dc:	f88d 0000 	strb.w	r0, [sp]
    89e0:	9800      	ldr	r0, [sp, #0]
    89e2:	9000      	str	r0, [sp, #0]
    89e4:	f89d 0000 	ldrb.w	r0, [sp]
    89e8:	b158      	cbz	r0, 8a02 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    89ea:	706e      	strb	r6, [r5, #1]
    89ec:	201c      	movs	r0, #28
    89ee:	7028      	strb	r0, [r5, #0]
    89f0:	220a      	movs	r2, #10
    89f2:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    89f6:	1d28      	adds	r0, r5, #4
    89f8:	f003 fdd2 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    89fc:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    8a00:	e050      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a02:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    8a06:	f88d 0000 	strb.w	r0, [sp]
    8a0a:	9800      	ldr	r0, [sp, #0]
    8a0c:	9000      	str	r0, [sp, #0]
    8a0e:	f89d 0000 	ldrb.w	r0, [sp]
    8a12:	b140      	cbz	r0, 8a26 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    8a14:	706e      	strb	r6, [r5, #1]
    8a16:	201d      	movs	r0, #29
    8a18:	7028      	strb	r0, [r5, #0]
    8a1a:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8a1e:	6068      	str	r0, [r5, #4]
    8a20:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    8a24:	e03e      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a26:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8a2a:	f88d 0000 	strb.w	r0, [sp]
    8a2e:	9800      	ldr	r0, [sp, #0]
    8a30:	9000      	str	r0, [sp, #0]
    8a32:	f89d 0000 	ldrb.w	r0, [sp]
    8a36:	b198      	cbz	r0, 8a60 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    8a38:	706e      	strb	r6, [r5, #1]
    8a3a:	201a      	movs	r0, #26
    8a3c:	7028      	strb	r0, [r5, #0]
    8a3e:	e004      	b.n	8a4a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    8a40:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    8a44:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    8a48:	6068      	str	r0, [r5, #4]
    8a4a:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8a4e:	f88d 0000 	strb.w	r0, [sp]
    8a52:	9800      	ldr	r0, [sp, #0]
    8a54:	9000      	str	r0, [sp, #0]
    8a56:	f89d 0000 	ldrb.w	r0, [sp]
    8a5a:	2800      	cmp	r0, #0
    8a5c:	d1f0      	bne.n	8a40 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    8a5e:	e021      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a60:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8a64:	f88d 0000 	strb.w	r0, [sp]
    8a68:	9800      	ldr	r0, [sp, #0]
    8a6a:	9000      	str	r0, [sp, #0]
    8a6c:	f89d 0000 	ldrb.w	r0, [sp]
    8a70:	2800      	cmp	r0, #0
    8a72:	f43f af6d 	beq.w	8950 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8a76:	706e      	strb	r6, [r5, #1]
    8a78:	2016      	movs	r0, #22
    8a7a:	7028      	strb	r0, [r5, #0]
    8a7c:	e008      	b.n	8a90 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    8a7e:	bf00      	nop
    8a80:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    8a84:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    8a88:	6068      	str	r0, [r5, #4]
    8a8a:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    8a8e:	8128      	strh	r0, [r5, #8]
    8a90:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8a94:	f88d 0000 	strb.w	r0, [sp]
    8a98:	9800      	ldr	r0, [sp, #0]
    8a9a:	9000      	str	r0, [sp, #0]
    8a9c:	f89d 0000 	ldrb.w	r0, [sp]
    8aa0:	2800      	cmp	r0, #0
    8aa2:	d1ed      	bne.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    8aa4:	2001      	movs	r0, #1
    8aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008aa8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    8aa8:	b570      	push	{r4, r5, r6, lr}
    8aaa:	4605      	mov	r5, r0
    8aac:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    8ab0:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    8ab4:	b1c9      	cbz	r1, 8aea <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    8ab6:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    8aba:	1a0c      	subs	r4, r1, r0
    8abc:	f1b4 0404 	subs.w	r4, r4, #4
    8ac0:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    8ac4:	b140      	cbz	r0, 8ad8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    8ac6:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    8aca:	2300      	movs	r3, #0
    8acc:	2109      	movs	r1, #9
    8ace:	f105 0078 	add.w	r0, r5, #120	; 0x78
    8ad2:	f004 ffca 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ad6:	b160      	cbz	r0, 8af2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8ad8:	4628      	mov	r0, r5
    8ada:	f005 ffe7 	bl	eaac <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    8ade:	b138      	cbz	r0, 8af0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    8ae0:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    8ae4:	1a40      	subs	r0, r0, r1
    8ae6:	1f00      	subs	r0, r0, #4
    8ae8:	e003      	b.n	8af2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8aea:	f1c0 0402 	rsb	r4, r0, #2
    8aee:	e7e7      	b.n	8ac0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    8af0:	4620      	mov	r0, r4
    8af2:	42a0      	cmp	r0, r4
    8af4:	da00      	bge.n	8af8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    8af6:	4604      	mov	r4, r0
    8af8:	2c00      	cmp	r4, #0
    8afa:	dc01      	bgt.n	8b00 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    8afc:	2000      	movs	r0, #0
    8afe:	bd70      	pop	{r4, r5, r6, pc}
    8b00:	b2a0      	uxth	r0, r4
    8b02:	bd70      	pop	{r4, r5, r6, pc}

00008b04 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    8b04:	481b      	ldr	r0, [pc, #108]	; (8b74 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    8b06:	491a      	ldr	r1, [pc, #104]	; (8b70 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    8b08:	6081      	str	r1, [r0, #8]
    8b0a:	491b      	ldr	r1, [pc, #108]	; (8b78 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    8b0c:	61c1      	str	r1, [r0, #28]
    8b0e:	491b      	ldr	r1, [pc, #108]	; (8b7c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    8b10:	62c1      	str	r1, [r0, #44]	; 0x2c
    8b12:	491b      	ldr	r1, [pc, #108]	; (8b80 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    8b14:	6101      	str	r1, [r0, #16]
    8b16:	491b      	ldr	r1, [pc, #108]	; (8b84 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    8b18:	6141      	str	r1, [r0, #20]
    8b1a:	491b      	ldr	r1, [pc, #108]	; (8b88 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    8b1c:	6441      	str	r1, [r0, #68]	; 0x44
    8b1e:	491b      	ldr	r1, [pc, #108]	; (8b8c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    8b20:	6181      	str	r1, [r0, #24]
    8b22:	491b      	ldr	r1, [pc, #108]	; (8b90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    8b24:	6301      	str	r1, [r0, #48]	; 0x30
    8b26:	491b      	ldr	r1, [pc, #108]	; (8b94 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    8b28:	6241      	str	r1, [r0, #36]	; 0x24
    8b2a:	491b      	ldr	r1, [pc, #108]	; (8b98 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    8b2c:	64c1      	str	r1, [r0, #76]	; 0x4c
    8b2e:	491b      	ldr	r1, [pc, #108]	; (8b9c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    8b30:	6481      	str	r1, [r0, #72]	; 0x48
    8b32:	491b      	ldr	r1, [pc, #108]	; (8ba0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    8b34:	6341      	str	r1, [r0, #52]	; 0x34
    8b36:	481c      	ldr	r0, [pc, #112]	; (8ba8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    8b38:	491a      	ldr	r1, [pc, #104]	; (8ba4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    8b3a:	6081      	str	r1, [r0, #8]
    8b3c:	491b      	ldr	r1, [pc, #108]	; (8bac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    8b3e:	61c1      	str	r1, [r0, #28]
    8b40:	491b      	ldr	r1, [pc, #108]	; (8bb0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    8b42:	6201      	str	r1, [r0, #32]
    8b44:	491b      	ldr	r1, [pc, #108]	; (8bb4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    8b46:	6041      	str	r1, [r0, #4]
    8b48:	491b      	ldr	r1, [pc, #108]	; (8bb8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    8b4a:	6001      	str	r1, [r0, #0]
    8b4c:	491b      	ldr	r1, [pc, #108]	; (8bbc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    8b4e:	6281      	str	r1, [r0, #40]	; 0x28
    8b50:	491b      	ldr	r1, [pc, #108]	; (8bc0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    8b52:	62c1      	str	r1, [r0, #44]	; 0x2c
    8b54:	491b      	ldr	r1, [pc, #108]	; (8bc4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    8b56:	60c1      	str	r1, [r0, #12]
    8b58:	491b      	ldr	r1, [pc, #108]	; (8bc8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    8b5a:	6181      	str	r1, [r0, #24]
    8b5c:	491b      	ldr	r1, [pc, #108]	; (8bcc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    8b5e:	6301      	str	r1, [r0, #48]	; 0x30
    8b60:	491b      	ldr	r1, [pc, #108]	; (8bd0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    8b62:	6481      	str	r1, [r0, #72]	; 0x48
    8b64:	491b      	ldr	r1, [pc, #108]	; (8bd4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    8b66:	64c1      	str	r1, [r0, #76]	; 0x4c
    8b68:	491b      	ldr	r1, [pc, #108]	; (8bd8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    8b6a:	6441      	str	r1, [r0, #68]	; 0x44
    8b6c:	4770      	bx	lr
    8b6e:	0000      	.short	0x0000
    8b70:	00009e51 	.word	0x00009e51
    8b74:	2000012c 	.word	0x2000012c
    8b78:	00009e8d 	.word	0x00009e8d
    8b7c:	00009b65 	.word	0x00009b65
    8b80:	000098a5 	.word	0x000098a5
    8b84:	00009d9d 	.word	0x00009d9d
    8b88:	00009d01 	.word	0x00009d01
    8b8c:	00009ddd 	.word	0x00009ddd
    8b90:	00009f29 	.word	0x00009f29
    8b94:	000098dd 	.word	0x000098dd
    8b98:	00009b39 	.word	0x00009b39
    8b9c:	00009b05 	.word	0x00009b05
    8ba0:	00009d8d 	.word	0x00009d8d
    8ba4:	0000a2a9 	.word	0x0000a2a9
    8ba8:	20000190 	.word	0x20000190
    8bac:	0000a2d9 	.word	0x0000a2d9
    8bb0:	0000a095 	.word	0x0000a095
    8bb4:	00009ff9 	.word	0x00009ff9
    8bb8:	0000a029 	.word	0x0000a029
    8bbc:	0000a165 	.word	0x0000a165
    8bc0:	0000a199 	.word	0x0000a199
    8bc4:	0000a059 	.word	0x0000a059
    8bc8:	0000a285 	.word	0x0000a285
    8bcc:	0000a319 	.word	0x0000a319
    8bd0:	0000a125 	.word	0x0000a125
    8bd4:	0000a155 	.word	0x0000a155
    8bd8:	0000a271 	.word	0x0000a271

00008bdc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    8bdc:	4806      	ldr	r0, [pc, #24]	; (8bf8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    8bde:	4905      	ldr	r1, [pc, #20]	; (8bf4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    8be0:	6581      	str	r1, [r0, #88]	; 0x58
    8be2:	4906      	ldr	r1, [pc, #24]	; (8bfc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    8be4:	65c1      	str	r1, [r0, #92]	; 0x5c
    8be6:	4807      	ldr	r0, [pc, #28]	; (8c04 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    8be8:	4905      	ldr	r1, [pc, #20]	; (8c00 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    8bea:	6581      	str	r1, [r0, #88]	; 0x58
    8bec:	4906      	ldr	r1, [pc, #24]	; (8c08 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    8bee:	6601      	str	r1, [r0, #96]	; 0x60
    8bf0:	4770      	bx	lr
    8bf2:	0000      	.short	0x0000
    8bf4:	00009b89 	.word	0x00009b89
    8bf8:	2000012c 	.word	0x2000012c
    8bfc:	00009c99 	.word	0x00009c99
    8c00:	0000a1c5 	.word	0x0000a1c5
    8c04:	20000190 	.word	0x20000190
    8c08:	0000a1f5 	.word	0x0000a1f5

00008c0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    8c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c0e:	4d36      	ldr	r5, [pc, #216]	; (8ce8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    8c10:	2600      	movs	r6, #0
    8c12:	4604      	mov	r4, r0
    8c14:	6068      	str	r0, [r5, #4]
    8c16:	806e      	strh	r6, [r5, #2]
    8c18:	706e      	strb	r6, [r5, #1]
    8c1a:	702e      	strb	r6, [r5, #0]
    8c1c:	8800      	ldrh	r0, [r0, #0]
    8c1e:	f7fb fedd 	bl	49dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8c22:	6868      	ldr	r0, [r5, #4]
    8c24:	8800      	ldrh	r0, [r0, #0]
    8c26:	f7fb fe81 	bl	492c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8c2a:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8c2e:	6869      	ldr	r1, [r5, #4]
    8c30:	1c40      	adds	r0, r0, #1
    8c32:	b282      	uxth	r2, r0
    8c34:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8c38:	f005 f8d1 	bl	ddde <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8c3c:	b120      	cbz	r0, 8c48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    8c3e:	f44f 71ac 	mov.w	r1, #344	; 0x158
    8c42:	2036      	movs	r0, #54	; 0x36
    8c44:	f7fb f89c 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c48:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    8c4c:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8c50:	4630      	mov	r0, r6
    8c52:	2924      	cmp	r1, #36	; 0x24
    8c54:	d10a      	bne.n	8c6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8c56:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8c5a:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8c5e:	1a51      	subs	r1, r2, r1
    8c60:	b209      	sxth	r1, r1
    8c62:	2900      	cmp	r1, #0
    8c64:	db02      	blt.n	8c6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8c66:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8c6a:	e00f      	b.n	8c8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8c6c:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8c70:	2924      	cmp	r1, #36	; 0x24
    8c72:	d001      	beq.n	8c78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8c74:	2925      	cmp	r1, #37	; 0x25
    8c76:	d10c      	bne.n	8c92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8c78:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8c7c:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8c80:	1a51      	subs	r1, r2, r1
    8c82:	b209      	sxth	r1, r1
    8c84:	2900      	cmp	r1, #0
    8c86:	db04      	blt.n	8c92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8c88:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8c8c:	f000 fd5a 	bl	9744 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8c90:	b318      	cbz	r0, 8cda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8c92:	f000 fbfd 	bl	9490 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8c96:	2800      	cmp	r0, #0
    8c98:	d125      	bne.n	8ce6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8c9a:	6868      	ldr	r0, [r5, #4]
    8c9c:	3078      	adds	r0, #120	; 0x78
    8c9e:	f005 fe7a 	bl	e996 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8ca2:	b120      	cbz	r0, 8cae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8ca4:	6868      	ldr	r0, [r5, #4]
    8ca6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8caa:	f000 faad 	bl	9208 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8cae:	480f      	ldr	r0, [pc, #60]	; (8cec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8cb0:	9000      	str	r0, [sp, #0]
    8cb2:	4b0f      	ldr	r3, [pc, #60]	; (8cf0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8cb4:	4a0f      	ldr	r2, [pc, #60]	; (8cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8cb6:	4621      	mov	r1, r4
    8cb8:	4630      	mov	r0, r6
    8cba:	f7fb ff39 	bl	4b30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8cbe:	6868      	ldr	r0, [r5, #4]
    8cc0:	2300      	movs	r3, #0
    8cc2:	2105      	movs	r1, #5
    8cc4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8cc8:	3078      	adds	r0, #120	; 0x78
    8cca:	f004 fece 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cce:	2800      	cmp	r0, #0
    8cd0:	d009      	beq.n	8ce6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8cd6:	f7fb bf25 	b.w	4b24 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8cde:	2100      	movs	r1, #0
    8ce0:	4608      	mov	r0, r1
    8ce2:	f000 bb81 	b.w	93e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ce8:	2000011c 	.word	0x2000011c
    8cec:	000093e9 	.word	0x000093e9
    8cf0:	00008e19 	.word	0x00008e19
    8cf4:	000096bd 	.word	0x000096bd
    8cf8:	4411      	add	r1, r2
    8cfa:	78c2      	ldrb	r2, [r0, #3]
    8cfc:	480c      	ldr	r0, [pc, #48]	; (8d30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8cfe:	1d89      	adds	r1, r1, #6
    8d00:	b289      	uxth	r1, r1
    8d02:	6840      	ldr	r0, [r0, #4]
    8d04:	2a01      	cmp	r2, #1
    8d06:	d006      	beq.n	8d16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8d08:	b142      	cbz	r2, 8d1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8d0a:	2a18      	cmp	r2, #24
    8d0c:	d105      	bne.n	8d1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8d0e:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8d12:	b132      	cbz	r2, 8d22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8d14:	e009      	b.n	8d2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8d16:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8d1a:	4770      	bx	lr
    8d1c:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8d20:	4770      	bx	lr
    8d22:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8d26:	b902      	cbnz	r2, 8d2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8d28:	2100      	movs	r1, #0
    8d2a:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8d2e:	4770      	bx	lr
    8d30:	2000011c 	.word	0x2000011c
    8d34:	490b      	ldr	r1, [pc, #44]	; (8d64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8d36:	78c2      	ldrb	r2, [r0, #3]
    8d38:	6849      	ldr	r1, [r1, #4]
    8d3a:	2a01      	cmp	r2, #1
    8d3c:	d006      	beq.n	8d4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8d3e:	b15a      	cbz	r2, 8d58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8d40:	2a18      	cmp	r2, #24
    8d42:	d108      	bne.n	8d56 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8d44:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8d48:	f005 b92f 	b.w	dfaa <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8d4c:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8d50:	7241      	strb	r1, [r0, #9]
    8d52:	0a09      	lsrs	r1, r1, #8
    8d54:	7281      	strb	r1, [r0, #10]
    8d56:	4770      	bx	lr
    8d58:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8d5c:	7341      	strb	r1, [r0, #13]
    8d5e:	0a09      	lsrs	r1, r1, #8
    8d60:	7381      	strb	r1, [r0, #14]
    8d62:	4770      	bx	lr
    8d64:	2000011c 	.word	0x2000011c
    8d68:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8d6a:	4c2a      	ldr	r4, [pc, #168]	; (8e14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8d6c:	2300      	movs	r3, #0
    8d6e:	4619      	mov	r1, r3
    8d70:	6860      	ldr	r0, [r4, #4]
    8d72:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8d76:	3078      	adds	r0, #120	; 0x78
    8d78:	f004 fe77 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d7c:	2800      	cmp	r0, #0
    8d7e:	d048      	beq.n	8e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d80:	6860      	ldr	r0, [r4, #4]
    8d82:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8d86:	f88d 1000 	strb.w	r1, [sp]
    8d8a:	9900      	ldr	r1, [sp, #0]
    8d8c:	9100      	str	r1, [sp, #0]
    8d8e:	f89d 1000 	ldrb.w	r1, [sp]
    8d92:	2900      	cmp	r1, #0
    8d94:	d03d      	beq.n	8e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8d96:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8d9a:	f004 febf 	bl	db1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8d9e:	2800      	cmp	r0, #0
    8da0:	d137      	bne.n	8e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8da2:	6860      	ldr	r0, [r4, #4]
    8da4:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8da8:	280a      	cmp	r0, #10
    8daa:	d932      	bls.n	8e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8dac:	4668      	mov	r0, sp
    8dae:	f7fc ff59 	bl	5c64 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8db2:	2800      	cmp	r0, #0
    8db4:	d02d      	beq.n	8e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8db6:	6861      	ldr	r1, [r4, #4]
    8db8:	2205      	movs	r2, #5
    8dba:	4668      	mov	r0, sp
    8dbc:	318e      	adds	r1, #142	; 0x8e
    8dbe:	f003 fbdd 	bl	c57c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8dc2:	2500      	movs	r5, #0
    8dc4:	b310      	cbz	r0, 8e0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8dc6:	6860      	ldr	r0, [r4, #4]
    8dc8:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8dcc:	7808      	ldrb	r0, [r1, #0]
    8dce:	b158      	cbz	r0, 8de8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8dd0:	2205      	movs	r2, #5
    8dd2:	4668      	mov	r0, sp
    8dd4:	1c49      	adds	r1, r1, #1
    8dd6:	f003 fbd1 	bl	c57c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8dda:	2800      	cmp	r0, #0
    8ddc:	d119      	bne.n	8e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8dde:	6860      	ldr	r0, [r4, #4]
    8de0:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8de4:	7800      	ldrb	r0, [r0, #0]
    8de6:	b940      	cbnz	r0, 8dfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8de8:	6860      	ldr	r0, [r4, #4]
    8dea:	9900      	ldr	r1, [sp, #0]
    8dec:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8df0:	f8c0 1001 	str.w	r1, [r0, #1]
    8df4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8df8:	7141      	strb	r1, [r0, #5]
    8dfa:	6860      	ldr	r0, [r4, #4]
    8dfc:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8e00:	7808      	ldrb	r0, [r1, #0]
    8e02:	1c40      	adds	r0, r0, #1
    8e04:	7008      	strb	r0, [r1, #0]
    8e06:	2001      	movs	r0, #1
    8e08:	f000 fd04 	bl	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e0c:	6860      	ldr	r0, [r4, #4]
    8e0e:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8e12:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8e14:	2000011c 	.word	0x2000011c
    8e18:	4a0c      	ldr	r2, [pc, #48]	; (8e4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8e1a:	7851      	ldrb	r1, [r2, #1]
    8e1c:	b999      	cbnz	r1, 8e46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8e1e:	4611      	mov	r1, r2
    8e20:	2801      	cmp	r0, #1
    8e22:	6849      	ldr	r1, [r1, #4]
    8e24:	d008      	beq.n	8e38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8e26:	7890      	ldrb	r0, [r2, #2]
    8e28:	0740      	lsls	r0, r0, #29
    8e2a:	d503      	bpl.n	8e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8e2c:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8e30:	2807      	cmp	r0, #7
    8e32:	d008      	beq.n	8e46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8e34:	2001      	movs	r0, #1
    8e36:	4770      	bx	lr
    8e38:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8e3c:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8e3e:	4288      	cmp	r0, r1
    8e40:	d801      	bhi.n	8e46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8e42:	f7fe bd5d 	b.w	7900 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8e46:	2000      	movs	r0, #0
    8e48:	4770      	bx	lr
    8e4a:	0000      	.short	0x0000
    8e4c:	2000011c 	.word	0x2000011c
    8e50:	b538      	push	{r3, r4, r5, lr}
    8e52:	4c87      	ldr	r4, [pc, #540]	; (9070 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8e54:	6860      	ldr	r0, [r4, #4]
    8e56:	3078      	adds	r0, #120	; 0x78
    8e58:	f005 fd9d 	bl	e996 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8e5c:	2800      	cmp	r0, #0
    8e5e:	d15b      	bne.n	8f18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8e60:	6860      	ldr	r0, [r4, #4]
    8e62:	2300      	movs	r3, #0
    8e64:	2101      	movs	r1, #1
    8e66:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8e6a:	3078      	adds	r0, #120	; 0x78
    8e6c:	f004 fdfd 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e70:	2800      	cmp	r0, #0
    8e72:	d151      	bne.n	8f18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8e74:	6860      	ldr	r0, [r4, #4]
    8e76:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8e7a:	f88d 1000 	strb.w	r1, [sp]
    8e7e:	9900      	ldr	r1, [sp, #0]
    8e80:	9100      	str	r1, [sp, #0]
    8e82:	f89d 1000 	ldrb.w	r1, [sp]
    8e86:	b109      	cbz	r1, 8e8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8e88:	2002      	movs	r0, #2
    8e8a:	e038      	b.n	8efe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8e8c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e90:	2300      	movs	r3, #0
    8e92:	4619      	mov	r1, r3
    8e94:	3078      	adds	r0, #120	; 0x78
    8e96:	f004 fde8 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e9a:	b128      	cbz	r0, 8ea8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8e9c:	6860      	ldr	r0, [r4, #4]
    8e9e:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8ea2:	b108      	cbz	r0, 8ea8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8ea4:	2012      	movs	r0, #18
    8ea6:	e02a      	b.n	8efe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8ea8:	6860      	ldr	r0, [r4, #4]
    8eaa:	2500      	movs	r5, #0
    8eac:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8eb0:	2a12      	cmp	r2, #18
    8eb2:	d01d      	beq.n	8ef0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8eb4:	dc04      	bgt.n	8ec0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8eb6:	2a03      	cmp	r2, #3
    8eb8:	d025      	beq.n	8f06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8eba:	2a11      	cmp	r2, #17
    8ebc:	d104      	bne.n	8ec8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8ebe:	e019      	b.n	8ef4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    8ec0:	2a18      	cmp	r2, #24
    8ec2:	d01b      	beq.n	8efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    8ec4:	2a23      	cmp	r2, #35	; 0x23
    8ec6:	d028      	beq.n	8f1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    8ec8:	2300      	movs	r3, #0
    8eca:	2104      	movs	r1, #4
    8ecc:	3078      	adds	r0, #120	; 0x78
    8ece:	f004 fdcc 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ed2:	2800      	cmp	r0, #0
    8ed4:	d120      	bne.n	8f18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8ed6:	6860      	ldr	r0, [r4, #4]
    8ed8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8edc:	2919      	cmp	r1, #25
    8ede:	d07c      	beq.n	8fda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    8ee0:	dc22      	bgt.n	8f28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    8ee2:	2901      	cmp	r1, #1
    8ee4:	d02c      	beq.n	8f40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    8ee6:	2902      	cmp	r1, #2
    8ee8:	d037      	beq.n	8f5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    8eea:	2903      	cmp	r1, #3
    8eec:	d134      	bne.n	8f58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    8eee:	e022      	b.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    8ef0:	200b      	movs	r0, #11
    8ef2:	e004      	b.n	8efe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8ef8:	f000 bba0 	b.w	963c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    8efc:	2006      	movs	r0, #6
    8efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f02:	f000 bc87 	b.w	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f06:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    8f0a:	7101      	strb	r1, [r0, #4]
    8f0c:	2007      	movs	r0, #7
    8f0e:	f000 fc81 	bl	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f12:	6860      	ldr	r0, [r4, #4]
    8f14:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8f18:	bd38      	pop	{r3, r4, r5, pc}
    8f1a:	2018      	movs	r0, #24
    8f1c:	f000 fc7a 	bl	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f20:	6860      	ldr	r0, [r4, #4]
    8f22:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    8f26:	bd38      	pop	{r3, r4, r5, pc}
    8f28:	291d      	cmp	r1, #29
    8f2a:	d018      	beq.n	8f5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8f2c:	291e      	cmp	r1, #30
    8f2e:	d016      	beq.n	8f5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8f30:	2921      	cmp	r1, #33	; 0x21
    8f32:	d176      	bne.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f34:	e056      	b.n	8fe4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    8f36:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    8f3a:	7141      	strb	r1, [r0, #5]
    8f3c:	2007      	movs	r0, #7
    8f3e:	e07e      	b.n	903e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    8f40:	200c      	movs	r0, #12
    8f42:	f000 fc67 	bl	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f46:	6860      	ldr	r0, [r4, #4]
    8f48:	f820 5fba 	strh.w	r5, [r0, #186]!
    8f4c:	7981      	ldrb	r1, [r0, #6]
    8f4e:	f041 0101 	orr.w	r1, r1, #1
    8f52:	7181      	strb	r1, [r0, #6]
    8f54:	f800 5c34 	strb.w	r5, [r0, #-52]
    8f58:	e063      	b.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f5a:	2013      	movs	r0, #19
    8f5c:	e037      	b.n	8fce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    8f5e:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    8f62:	f88d 2000 	strb.w	r2, [sp]
    8f66:	9a00      	ldr	r2, [sp, #0]
    8f68:	9200      	str	r2, [sp, #0]
    8f6a:	f89d 2000 	ldrb.w	r2, [sp]
    8f6e:	bbaa      	cbnz	r2, 8fdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    8f70:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    8f74:	f88d 2000 	strb.w	r2, [sp]
    8f78:	9a00      	ldr	r2, [sp, #0]
    8f7a:	9200      	str	r2, [sp, #0]
    8f7c:	f89d 2000 	ldrb.w	r2, [sp]
    8f80:	b1aa      	cbz	r2, 8fae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    8f82:	2924      	cmp	r1, #36	; 0x24
    8f84:	d011      	beq.n	8faa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8f86:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8f8a:	2924      	cmp	r1, #36	; 0x24
    8f8c:	d00d      	beq.n	8faa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8f8e:	2300      	movs	r3, #0
    8f90:	f500 7293 	add.w	r2, r0, #294	; 0x126
    8f94:	f500 7199 	add.w	r1, r0, #306	; 0x132
    8f98:	f005 f943 	bl	e222 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8f9c:	6860      	ldr	r0, [r4, #4]
    8f9e:	211e      	movs	r1, #30
    8fa0:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    8fa4:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    8fa8:	e003      	b.n	8fb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    8faa:	2301      	movs	r3, #1
    8fac:	e7f0      	b.n	8f90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    8fae:	291e      	cmp	r1, #30
    8fb0:	d137      	bne.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8fb2:	6860      	ldr	r0, [r4, #4]
    8fb4:	f005 f950 	bl	e258 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8fb8:	f000 f85c 	bl	9074 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    8fbc:	6861      	ldr	r1, [r4, #4]
    8fbe:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8fc2:	8bc2      	ldrh	r2, [r0, #30]
    8fc4:	f821 2ffe 	strh.w	r2, [r1, #254]!
    8fc8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8fca:	8048      	strh	r0, [r1, #2]
    8fcc:	2015      	movs	r0, #21
    8fce:	f000 fc21 	bl	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8fd2:	6860      	ldr	r0, [r4, #4]
    8fd4:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    8fd8:	e001      	b.n	8fde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    8fda:	e02f      	b.n	903c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    8fdc:	e021      	b.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8fde:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8fe2:	e01e      	b.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8fe4:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8fe8:	2901      	cmp	r1, #1
    8fea:	d108      	bne.n	8ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    8fec:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    8ff0:	f88d 1000 	strb.w	r1, [sp]
    8ff4:	9900      	ldr	r1, [sp, #0]
    8ff6:	9100      	str	r1, [sp, #0]
    8ff8:	f89d 1000 	ldrb.w	r1, [sp]
    8ffc:	b121      	cbz	r1, 9008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    8ffe:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9002:	2902      	cmp	r1, #2
    9004:	d005      	beq.n	9012 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    9006:	e00c      	b.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9008:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    900c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9010:	e002      	b.n	9018 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    9012:	f850 1f62 	ldr.w	r1, [r0, #98]!
    9016:	6840      	ldr	r0, [r0, #4]
    9018:	f000 fc1e 	bl	9858 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    901c:	2018      	movs	r0, #24
    901e:	f000 fbf9 	bl	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9022:	6860      	ldr	r0, [r4, #4]
    9024:	3078      	adds	r0, #120	; 0x78
    9026:	f005 fcb6 	bl	e996 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    902a:	2800      	cmp	r0, #0
    902c:	f47f af7b 	bne.w	8f26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    9030:	6860      	ldr	r0, [r4, #4]
    9032:	3078      	adds	r0, #120	; 0x78
    9034:	f005 fcaf 	bl	e996 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9038:	b128      	cbz	r0, 9046 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    903a:	e00f      	b.n	905c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    903c:	2011      	movs	r0, #17
    903e:	f000 fbe9 	bl	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9042:	6860      	ldr	r0, [r4, #4]
    9044:	e7c8      	b.n	8fd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    9046:	6860      	ldr	r0, [r4, #4]
    9048:	2300      	movs	r3, #0
    904a:	4619      	mov	r1, r3
    904c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9050:	3078      	adds	r0, #120	; 0x78
    9052:	f004 fd0a 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9056:	b108      	cbz	r0, 905c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9058:	f000 fa44 	bl	94e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    905c:	6860      	ldr	r0, [r4, #4]
    905e:	3078      	adds	r0, #120	; 0x78
    9060:	f005 fc99 	bl	e996 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9064:	2800      	cmp	r0, #0
    9066:	d1e1      	bne.n	902c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    9068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    906c:	f7ff be7c 	b.w	8d68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    9070:	2000011c 	.word	0x2000011c
    9074:	480a      	ldr	r0, [pc, #40]	; (90a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    9076:	b510      	push	{r4, lr}
    9078:	6841      	ldr	r1, [r0, #4]
    907a:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    907e:	2801      	cmp	r0, #1
    9080:	d009      	beq.n	9096 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    9082:	8808      	ldrh	r0, [r1, #0]
    9084:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9088:	312c      	adds	r1, #44	; 0x2c
    908a:	f005 f8a6 	bl	e1da <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    908e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9092:	f7fc bfb5 	b.w	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9096:	2002      	movs	r0, #2
    9098:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    909c:	bd10      	pop	{r4, pc}
    909e:	0000      	.short	0x0000
    90a0:	2000011c 	.word	0x2000011c
    90a4:	b570      	push	{r4, r5, r6, lr}
    90a6:	4c22      	ldr	r4, [pc, #136]	; (9130 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    90a8:	f04f 0500 	mov.w	r5, #0
    90ac:	8861      	ldrh	r1, [r4, #2]
    90ae:	0748      	lsls	r0, r1, #29
    90b0:	d510      	bpl.n	90d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    90b2:	6860      	ldr	r0, [r4, #4]
    90b4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    90b8:	2a03      	cmp	r2, #3
    90ba:	d004      	beq.n	90c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    90bc:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    90c0:	2a07      	cmp	r2, #7
    90c2:	d107      	bne.n	90d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    90c4:	e002      	b.n	90cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    90c6:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    90ca:	e026      	b.n	911a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    90cc:	2201      	movs	r2, #1
    90ce:	7022      	strb	r2, [r4, #0]
    90d0:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    90d4:	0788      	lsls	r0, r1, #30
    90d6:	d508      	bpl.n	90ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    90d8:	68a0      	ldr	r0, [r4, #8]
    90da:	78c0      	ldrb	r0, [r0, #3]
    90dc:	2819      	cmp	r0, #25
    90de:	d21a      	bcs.n	9116 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    90e0:	4914      	ldr	r1, [pc, #80]	; (9134 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    90e2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    90e6:	b1b0      	cbz	r0, 9116 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    90e8:	4780      	blx	r0
    90ea:	f000 f867 	bl	91bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    90ee:	f000 f823 	bl	9138 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    90f2:	4606      	mov	r6, r0
    90f4:	7860      	ldrb	r0, [r4, #1]
    90f6:	0700      	lsls	r0, r0, #28
    90f8:	d515      	bpl.n	9126 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    90fa:	6860      	ldr	r0, [r4, #4]
    90fc:	2300      	movs	r3, #0
    90fe:	2105      	movs	r1, #5
    9100:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9104:	3078      	adds	r0, #120	; 0x78
    9106:	f004 fcb0 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    910a:	b148      	cbz	r0, 9120 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    910c:	6860      	ldr	r0, [r4, #4]
    910e:	2608      	movs	r6, #8
    9110:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    9114:	e007      	b.n	9126 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    9116:	f240 61b1 	movw	r1, #1713	; 0x6b1
    911a:	2036      	movs	r0, #54	; 0x36
    911c:	f7fa fe30 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9120:	2000      	movs	r0, #0
    9122:	f7fb fddd 	bl	4ce0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9126:	6860      	ldr	r0, [r4, #4]
    9128:	f005 fc65 	bl	e9f6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    912c:	4630      	mov	r0, r6
    912e:	bd70      	pop	{r4, r5, r6, pc}
    9130:	2000011c 	.word	0x2000011c
    9134:	20000190 	.word	0x20000190
    9138:	b570      	push	{r4, r5, r6, lr}
    913a:	4c1e      	ldr	r4, [pc, #120]	; (91b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    913c:	2000      	movs	r0, #0
    913e:	78a1      	ldrb	r1, [r4, #2]
    9140:	07c9      	lsls	r1, r1, #31
    9142:	d01b      	beq.n	917c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    9144:	68e0      	ldr	r0, [r4, #12]
    9146:	2300      	movs	r3, #0
    9148:	2105      	movs	r1, #5
    914a:	78c5      	ldrb	r5, [r0, #3]
    914c:	6860      	ldr	r0, [r4, #4]
    914e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9152:	3078      	adds	r0, #120	; 0x78
    9154:	f004 fc89 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9158:	b188      	cbz	r0, 917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    915a:	2d06      	cmp	r5, #6
    915c:	d00f      	beq.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    915e:	dc06      	bgt.n	916e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    9160:	2d02      	cmp	r5, #2
    9162:	d00c      	beq.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9164:	2d04      	cmp	r5, #4
    9166:	d00a      	beq.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9168:	2d05      	cmp	r5, #5
    916a:	d106      	bne.n	917a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    916c:	e007      	b.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    916e:	2d0b      	cmp	r5, #11
    9170:	d005      	beq.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9172:	2d0d      	cmp	r5, #13
    9174:	d003      	beq.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9176:	2d11      	cmp	r5, #17
    9178:	d001      	beq.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    917a:	2008      	movs	r0, #8
    917c:	bd70      	pop	{r4, r5, r6, pc}
    917e:	68e0      	ldr	r0, [r4, #12]
    9180:	f7fc fe2c 	bl	5ddc <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9184:	b148      	cbz	r0, 919a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9186:	68e0      	ldr	r0, [r4, #12]
    9188:	78c0      	ldrb	r0, [r0, #3]
    918a:	2819      	cmp	r0, #25
    918c:	d205      	bcs.n	919a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    918e:	490a      	ldr	r1, [pc, #40]	; (91b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    9190:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9194:	b108      	cbz	r0, 919a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9196:	4780      	blx	r0
    9198:	e002      	b.n	91a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    919a:	2000      	movs	r0, #0
    919c:	f000 fbdc 	bl	9958 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    91a0:	6861      	ldr	r1, [r4, #4]
    91a2:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    91a6:	1c52      	adds	r2, r2, #1
    91a8:	f143 0300 	adc.w	r3, r3, #0
    91ac:	e9c1 2300 	strd	r2, r3, [r1]
    91b0:	bd70      	pop	{r4, r5, r6, pc}
    91b2:	0000      	.short	0x0000
    91b4:	2000011c 	.word	0x2000011c
    91b8:	2000012c 	.word	0x2000012c
    91bc:	b510      	push	{r4, lr}
    91be:	4c11      	ldr	r4, [pc, #68]	; (9204 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    91c0:	78a0      	ldrb	r0, [r4, #2]
    91c2:	0700      	lsls	r0, r0, #28
    91c4:	d517      	bpl.n	91f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    91c6:	6860      	ldr	r0, [r4, #4]
    91c8:	2100      	movs	r1, #0
    91ca:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    91ce:	f001 f97b 	bl	a4c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    91d2:	6860      	ldr	r0, [r4, #4]
    91d4:	3078      	adds	r0, #120	; 0x78
    91d6:	f005 fbde 	bl	e996 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    91da:	b168      	cbz	r0, 91f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    91dc:	6860      	ldr	r0, [r4, #4]
    91de:	21fe      	movs	r1, #254	; 0xfe
    91e0:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    91e4:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    91e8:	2908      	cmp	r1, #8
    91ea:	d104      	bne.n	91f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    91ec:	2102      	movs	r1, #2
    91ee:	7021      	strb	r1, [r4, #0]
    91f0:	2100      	movs	r1, #0
    91f2:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    91f6:	bd10      	pop	{r4, pc}
    91f8:	f240 61bd 	movw	r1, #1725	; 0x6bd
    91fc:	2036      	movs	r0, #54	; 0x36
    91fe:	f7fa fdbf 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9202:	0000      	.short	0x0000
    9204:	2000011c 	.word	0x2000011c
    9208:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    920a:	4605      	mov	r5, r0
    920c:	4668      	mov	r0, sp
    920e:	f7fb fbcf 	bl	49b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9212:	b318      	cbz	r0, 925c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    9214:	2222      	movs	r2, #34	; 0x22
    9216:	2100      	movs	r1, #0
    9218:	9800      	ldr	r0, [sp, #0]
    921a:	f003 fa3b 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    921e:	2103      	movs	r1, #3
    9220:	9800      	ldr	r0, [sp, #0]
    9222:	f004 fea8 	bl	df76 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9226:	9800      	ldr	r0, [sp, #0]
    9228:	7801      	ldrb	r1, [r0, #0]
    922a:	f021 0110 	bic.w	r1, r1, #16
    922e:	7001      	strb	r1, [r0, #0]
    9230:	4629      	mov	r1, r5
    9232:	f7fc fde3 	bl	5dfc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9236:	2100      	movs	r1, #0
    9238:	4c6a      	ldr	r4, [pc, #424]	; (93e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    923a:	2d19      	cmp	r5, #25
    923c:	d270      	bcs.n	9320 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    923e:	e8df f005 	tbb	[pc, r5]
    9242:	1c24      	.short	0x1c24
    9244:	c9c94c10 	.word	0xc9c94c10
    9248:	c97016c2 	.word	0xc97016c2
    924c:	c964c2c2 	.word	0xc964c2c2
    9250:	b6c9c9c9 	.word	0xb6c9c9c9
    9254:	8181c2c2 	.word	0x8181c2c2
    9258:	00a3c99a 	.word	0x00a3c99a
    925c:	f640 014f 	movw	r1, #2127	; 0x84f
    9260:	e0bd      	b.n	93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    9262:	6860      	ldr	r0, [r4, #4]
    9264:	9900      	ldr	r1, [sp, #0]
    9266:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    926a:	7108      	strb	r0, [r1, #4]
    926c:	e0ab      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    926e:	6861      	ldr	r1, [r4, #4]
    9270:	9800      	ldr	r0, [sp, #0]
    9272:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9276:	7101      	strb	r1, [r0, #4]
    9278:	e0a5      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    927a:	6860      	ldr	r0, [r4, #4]
    927c:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9280:	9800      	ldr	r0, [sp, #0]
    9282:	1c49      	adds	r1, r1, #1
    9284:	f004 fe57 	bl	df36 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    9288:	e09d      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    928a:	6860      	ldr	r0, [r4, #4]
    928c:	9d00      	ldr	r5, [sp, #0]
    928e:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    9292:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    9296:	f004 fd6b 	bl	dd70 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    929a:	7128      	strb	r0, [r5, #4]
    929c:	6860      	ldr	r0, [r4, #4]
    929e:	9d00      	ldr	r5, [sp, #0]
    92a0:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    92a4:	c803      	ldmia	r0, {r0, r1}
    92a6:	f004 fd58 	bl	dd5a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    92aa:	7168      	strb	r0, [r5, #5]
    92ac:	0a00      	lsrs	r0, r0, #8
    92ae:	71a8      	strb	r0, [r5, #6]
    92b0:	6860      	ldr	r0, [r4, #4]
    92b2:	9d00      	ldr	r5, [sp, #0]
    92b4:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    92b8:	f004 fb8d 	bl	d9d6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    92bc:	71e8      	strb	r0, [r5, #7]
    92be:	0a00      	lsrs	r0, r0, #8
    92c0:	7228      	strb	r0, [r5, #8]
    92c2:	6862      	ldr	r2, [r4, #4]
    92c4:	9800      	ldr	r0, [sp, #0]
    92c6:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    92ca:	7241      	strb	r1, [r0, #9]
    92cc:	0a09      	lsrs	r1, r1, #8
    92ce:	7281      	strb	r1, [r0, #10]
    92d0:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    92d4:	f004 fe34 	bl	df40 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    92d8:	e075      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    92da:	6861      	ldr	r1, [r4, #4]
    92dc:	9800      	ldr	r0, [sp, #0]
    92de:	f201 115b 	addw	r1, r1, #347	; 0x15b
    92e2:	f004 fe38 	bl	df56 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    92e6:	6861      	ldr	r1, [r4, #4]
    92e8:	9800      	ldr	r0, [sp, #0]
    92ea:	f201 1163 	addw	r1, r1, #355	; 0x163
    92ee:	f004 fe2b 	bl	df48 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    92f2:	6861      	ldr	r1, [r4, #4]
    92f4:	9800      	ldr	r0, [sp, #0]
    92f6:	f201 1175 	addw	r1, r1, #373	; 0x175
    92fa:	f004 fe31 	bl	df60 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    92fe:	6861      	ldr	r1, [r4, #4]
    9300:	9800      	ldr	r0, [sp, #0]
    9302:	31f0      	adds	r1, #240	; 0xf0
    9304:	f004 fe23 	bl	df4e <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    9308:	e05d      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    930a:	9800      	ldr	r0, [sp, #0]
    930c:	220b      	movs	r2, #11
    930e:	7102      	strb	r2, [r0, #4]
    9310:	2259      	movs	r2, #89	; 0x59
    9312:	7142      	strb	r2, [r0, #5]
    9314:	7181      	strb	r1, [r0, #6]
    9316:	21fe      	movs	r1, #254	; 0xfe
    9318:	71c1      	strb	r1, [r0, #7]
    931a:	2112      	movs	r1, #18
    931c:	7201      	strb	r1, [r0, #8]
    931e:	e052      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9320:	e058      	b.n	93d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    9322:	9101      	str	r1, [sp, #4]
    9324:	9102      	str	r1, [sp, #8]
    9326:	f001 fe5d 	bl	afe4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    932a:	f644 112f 	movw	r1, #18735	; 0x492f
    932e:	4008      	ands	r0, r1
    9330:	f88d 0004 	strb.w	r0, [sp, #4]
    9334:	0a00      	lsrs	r0, r0, #8
    9336:	f88d 0005 	strb.w	r0, [sp, #5]
    933a:	a901      	add	r1, sp, #4
    933c:	9800      	ldr	r0, [sp, #0]
    933e:	f004 fe15 	bl	df6c <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9342:	e040      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9344:	6860      	ldr	r0, [r4, #4]
    9346:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    934a:	9800      	ldr	r0, [sp, #0]
    934c:	f004 fe25 	bl	df9a <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9350:	6860      	ldr	r0, [r4, #4]
    9352:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    9356:	9800      	ldr	r0, [sp, #0]
    9358:	f004 fe23 	bl	dfa2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    935c:	6860      	ldr	r0, [r4, #4]
    935e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9362:	9800      	ldr	r0, [sp, #0]
    9364:	f004 fe11 	bl	df8a <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9368:	6860      	ldr	r0, [r4, #4]
    936a:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    936e:	9800      	ldr	r0, [sp, #0]
    9370:	f004 fe0f 	bl	df92 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9374:	e027      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9376:	6861      	ldr	r1, [r4, #4]
    9378:	9800      	ldr	r0, [sp, #0]
    937a:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    937e:	7102      	strb	r2, [r0, #4]
    9380:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    9384:	7141      	strb	r1, [r0, #5]
    9386:	e01e      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9388:	6860      	ldr	r0, [r4, #4]
    938a:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    938e:	f004 fc10 	bl	dbb2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9392:	4601      	mov	r1, r0
    9394:	9800      	ldr	r0, [sp, #0]
    9396:	f004 fe0c 	bl	dfb2 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    939a:	6860      	ldr	r0, [r4, #4]
    939c:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    93a0:	f004 fc07 	bl	dbb2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    93a4:	4601      	mov	r1, r0
    93a6:	9800      	ldr	r0, [sp, #0]
    93a8:	f004 fded 	bl	df86 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    93ac:	e00b      	b.n	93c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    93ae:	6860      	ldr	r0, [r4, #4]
    93b0:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    93b4:	9800      	ldr	r0, [sp, #0]
    93b6:	f004 fdba 	bl	df2e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    93ba:	6860      	ldr	r0, [r4, #4]
    93bc:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    93c0:	9800      	ldr	r0, [sp, #0]
    93c2:	f004 fdb6 	bl	df32 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    93c6:	f7fb facd 	bl	4964 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    93ca:	b130      	cbz	r0, 93da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    93cc:	9800      	ldr	r0, [sp, #0]
    93ce:	f7ff fcb1 	bl	8d34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    93d2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    93d4:	f640 01db 	movw	r1, #2267	; 0x8db
    93d8:	e001      	b.n	93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    93da:	f640 01e1 	movw	r1, #2273	; 0x8e1
    93de:	2036      	movs	r0, #54	; 0x36
    93e0:	f7fa fcce 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    93e4:	2000011c 	.word	0x2000011c
    93e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93ec:	4c27      	ldr	r4, [pc, #156]	; (948c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    93ee:	4680      	mov	r8, r0
    93f0:	460d      	mov	r5, r1
    93f2:	8860      	ldrh	r0, [r4, #2]
    93f4:	f04f 0600 	mov.w	r6, #0
    93f8:	05c1      	lsls	r1, r0, #23
    93fa:	4620      	mov	r0, r4
    93fc:	6840      	ldr	r0, [r0, #4]
    93fe:	d502      	bpl.n	9406 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    9400:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    9404:	e004      	b.n	9410 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    9406:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    940a:	1c49      	adds	r1, r1, #1
    940c:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    9410:	f005 fb4c 	bl	eaac <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    9414:	2701      	movs	r7, #1
    9416:	b1e0      	cbz	r0, 9452 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9418:	8860      	ldrh	r0, [r4, #2]
    941a:	0500      	lsls	r0, r0, #20
    941c:	d506      	bpl.n	942c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    941e:	6860      	ldr	r0, [r4, #4]
    9420:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9424:	b111      	cbz	r1, 942c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    9426:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    942a:	e012      	b.n	9452 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    942c:	6860      	ldr	r0, [r4, #4]
    942e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    9432:	1c49      	adds	r1, r1, #1
    9434:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9438:	f005 face 	bl	e9d8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    943c:	6860      	ldr	r0, [r4, #4]
    943e:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    9442:	4291      	cmp	r1, r2
    9444:	d305      	bcc.n	9452 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9446:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    944a:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    944e:	f7fc fdd7 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9452:	8860      	ldrh	r0, [r4, #2]
    9454:	f410 7f40 	tst.w	r0, #768	; 0x300
    9458:	d008      	beq.n	946c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    945a:	6860      	ldr	r0, [r4, #4]
    945c:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9460:	b921      	cbnz	r1, 946c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9462:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9466:	2101      	movs	r1, #1
    9468:	f7fe fa6c 	bl	7944 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    946c:	ea58 0005 	orrs.w	r0, r8, r5
    9470:	d104      	bne.n	947c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    9472:	f7ff fe17 	bl	90a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    9476:	4605      	mov	r5, r0
    9478:	f7ff fcea 	bl	8e50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    947c:	4629      	mov	r1, r5
    947e:	4640      	mov	r0, r8
    9480:	f000 ff7a 	bl	a378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    9484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9488:	f7fb ba56 	b.w	4938 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    948c:	2000011c 	.word	0x2000011c
    9490:	4813      	ldr	r0, [pc, #76]	; (94e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    9492:	6840      	ldr	r0, [r0, #4]
    9494:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    9498:	b129      	cbz	r1, 94a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    949a:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    949e:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    94a2:	4291      	cmp	r1, r2
    94a4:	d215      	bcs.n	94d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    94a6:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    94aa:	b129      	cbz	r1, 94b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    94ac:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    94b0:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    94b4:	4291      	cmp	r1, r2
    94b6:	d20c      	bcs.n	94d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    94b8:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    94bc:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    94c0:	428a      	cmp	r2, r1
    94c2:	d206      	bcs.n	94d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    94c4:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    94c8:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    94cc:	b11a      	cbz	r2, 94d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    94ce:	4288      	cmp	r0, r1
    94d0:	d303      	bcc.n	94da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    94d2:	2001      	movs	r0, #1
    94d4:	4770      	bx	lr
    94d6:	2806      	cmp	r0, #6
    94d8:	d2fb      	bcs.n	94d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    94da:	2000      	movs	r0, #0
    94dc:	4770      	bx	lr
    94de:	0000      	.short	0x0000
    94e0:	2000011c 	.word	0x2000011c
    94e4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    94e6:	4c54      	ldr	r4, [pc, #336]	; (9638 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    94e8:	6860      	ldr	r0, [r4, #4]
    94ea:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    94ee:	f88d 1000 	strb.w	r1, [sp]
    94f2:	9900      	ldr	r1, [sp, #0]
    94f4:	9100      	str	r1, [sp, #0]
    94f6:	f89d 1000 	ldrb.w	r1, [sp]
    94fa:	b129      	cbz	r1, 9508 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    94fc:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9500:	f004 fb0c 	bl	db1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9504:	2800      	cmp	r0, #0
    9506:	d00a      	beq.n	951e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    9508:	6860      	ldr	r0, [r4, #4]
    950a:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    950e:	b181      	cbz	r1, 9532 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    9510:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9514:	b149      	cbz	r1, 952a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    9516:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    951a:	b108      	cbz	r0, 9520 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    951c:	200a      	movs	r0, #10
    951e:	e087      	b.n	9630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9520:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    9524:	2036      	movs	r0, #54	; 0x36
    9526:	f7fa fc2b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    952a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    952e:	f000 b885 	b.w	963c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    9532:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    9536:	b109      	cbz	r1, 953c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    9538:	2008      	movs	r0, #8
    953a:	e079      	b.n	9630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    953c:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9540:	2500      	movs	r5, #0
    9542:	b181      	cbz	r1, 9566 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    9544:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9548:	0780      	lsls	r0, r0, #30
    954a:	d10b      	bne.n	9564 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    954c:	200c      	movs	r0, #12
    954e:	f000 f961 	bl	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9552:	6860      	ldr	r0, [r4, #4]
    9554:	2101      	movs	r1, #1
    9556:	f820 5fb4 	strh.w	r5, [r0, #180]!
    955a:	7101      	strb	r1, [r0, #4]
    955c:	7b01      	ldrb	r1, [r0, #12]
    955e:	f041 0101 	orr.w	r1, r1, #1
    9562:	7301      	strb	r1, [r0, #12]
    9564:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9566:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    956a:	f88d 1004 	strb.w	r1, [sp, #4]
    956e:	9901      	ldr	r1, [sp, #4]
    9570:	9101      	str	r1, [sp, #4]
    9572:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9576:	b141      	cbz	r1, 958a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    9578:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    957c:	f88d 1000 	strb.w	r1, [sp]
    9580:	9900      	ldr	r1, [sp, #0]
    9582:	9100      	str	r1, [sp, #0]
    9584:	f89d 1000 	ldrb.w	r1, [sp]
    9588:	b391      	cbz	r1, 95f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    958a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    958e:	2901      	cmp	r1, #1
    9590:	d1e8      	bne.n	9564 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9592:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9596:	f88d 1000 	strb.w	r1, [sp]
    959a:	9900      	ldr	r1, [sp, #0]
    959c:	9100      	str	r1, [sp, #0]
    959e:	f89d 1000 	ldrb.w	r1, [sp]
    95a2:	2900      	cmp	r1, #0
    95a4:	d1de      	bne.n	9564 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    95a6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    95aa:	f004 fab7 	bl	db1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    95ae:	2800      	cmp	r0, #0
    95b0:	d1d8      	bne.n	9564 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    95b2:	6860      	ldr	r0, [r4, #4]
    95b4:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    95b8:	f005 f9f5 	bl	e9a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    95bc:	4605      	mov	r5, r0
    95be:	6860      	ldr	r0, [r4, #4]
    95c0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    95c4:	f005 f9ef 	bl	e9a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    95c8:	4606      	mov	r6, r0
    95ca:	6860      	ldr	r0, [r4, #4]
    95cc:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    95d0:	4628      	mov	r0, r5
    95d2:	f005 f9f3 	bl	e9bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    95d6:	b350      	cbz	r0, 962e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    95d8:	6860      	ldr	r0, [r4, #4]
    95da:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    95de:	4630      	mov	r0, r6
    95e0:	f005 f9ec 	bl	e9bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    95e4:	b318      	cbz	r0, 962e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    95e6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    95ea:	2000      	movs	r0, #0
    95ec:	f000 b8ee 	b.w	97cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    95f0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    95f4:	2924      	cmp	r1, #36	; 0x24
    95f6:	d018      	beq.n	962a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    95f8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    95fc:	2924      	cmp	r1, #36	; 0x24
    95fe:	d014      	beq.n	962a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9600:	f05f 0300 	movs.w	r3, #0
    9604:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9608:	f500 7199 	add.w	r1, r0, #306	; 0x132
    960c:	f004 fe09 	bl	e222 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9610:	6860      	ldr	r0, [r4, #4]
    9612:	4602      	mov	r2, r0
    9614:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9618:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    961c:	8bc8      	ldrh	r0, [r1, #30]
    961e:	f822 0ffe 	strh.w	r0, [r2, #254]!
    9622:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    9624:	8050      	strh	r0, [r2, #2]
    9626:	2014      	movs	r0, #20
    9628:	e002      	b.n	9630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    962a:	2301      	movs	r3, #1
    962c:	e7ea      	b.n	9604 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    962e:	2016      	movs	r0, #22
    9630:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9634:	f000 b8ee 	b.w	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9638:	2000011c 	.word	0x2000011c
    963c:	b510      	push	{r4, lr}
    963e:	4c1e      	ldr	r4, [pc, #120]	; (96b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    9640:	6862      	ldr	r2, [r4, #4]
    9642:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9646:	2808      	cmp	r0, #8
    9648:	d20d      	bcs.n	9666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    964a:	f1c0 0108 	rsb	r1, r0, #8
    964e:	4410      	add	r0, r2
    9650:	b2c9      	uxtb	r1, r1
    9652:	f200 1075 	addw	r0, r0, #373	; 0x175
    9656:	f7fa fc21 	bl	3e9c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    965a:	6861      	ldr	r1, [r4, #4]
    965c:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9660:	4410      	add	r0, r2
    9662:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9666:	6862      	ldr	r2, [r4, #4]
    9668:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    966c:	3808      	subs	r0, #8
    966e:	2804      	cmp	r0, #4
    9670:	d20c      	bcs.n	968c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    9672:	f1c0 0104 	rsb	r1, r0, #4
    9676:	4410      	add	r0, r2
    9678:	b2c9      	uxtb	r1, r1
    967a:	30f0      	adds	r0, #240	; 0xf0
    967c:	f7fa fc0e 	bl	3e9c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9680:	6861      	ldr	r1, [r4, #4]
    9682:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9686:	4410      	add	r0, r2
    9688:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    968c:	6860      	ldr	r0, [r4, #4]
    968e:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    9692:	290c      	cmp	r1, #12
    9694:	d30e      	bcc.n	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    9696:	d005      	beq.n	96a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    9698:	f640 1131 	movw	r1, #2353	; 0x931
    969c:	f04f 0036 	mov.w	r0, #54	; 0x36
    96a0:	f7fa fb6e 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96a4:	2100      	movs	r1, #0
    96a6:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    96aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    96ae:	2003      	movs	r0, #3
    96b0:	f000 b8b0 	b.w	9814 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    96b4:	bd10      	pop	{r4, pc}
    96b6:	0000      	.short	0x0000
    96b8:	2000011c 	.word	0x2000011c
    96bc:	b570      	push	{r4, r5, r6, lr}
    96be:	4b20      	ldr	r3, [pc, #128]	; (9740 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    96c0:	4602      	mov	r2, r0
    96c2:	460c      	mov	r4, r1
    96c4:	8858      	ldrh	r0, [r3, #2]
    96c6:	4310      	orrs	r0, r2
    96c8:	8058      	strh	r0, [r3, #2]
    96ca:	4618      	mov	r0, r3
    96cc:	0791      	lsls	r1, r2, #30
    96ce:	6840      	ldr	r0, [r0, #4]
    96d0:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    96d4:	d507      	bpl.n	96e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    96d6:	b121      	cbz	r1, 96e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    96d8:	f640 21c5 	movw	r1, #2757	; 0xac5
    96dc:	2036      	movs	r0, #54	; 0x36
    96de:	f7fa fb4f 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96e2:	609c      	str	r4, [r3, #8]
    96e4:	e003      	b.n	96ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    96e6:	b101      	cbz	r1, 96ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    96e8:	60dc      	str	r4, [r3, #12]
    96ea:	0791      	lsls	r1, r2, #30
    96ec:	d515      	bpl.n	971a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    96ee:	78e1      	ldrb	r1, [r4, #3]
    96f0:	2906      	cmp	r1, #6
    96f2:	d002      	beq.n	96fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    96f4:	290b      	cmp	r1, #11
    96f6:	d110      	bne.n	971a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    96f8:	e008      	b.n	970c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    96fa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    96fe:	2918      	cmp	r1, #24
    9700:	d10b      	bne.n	971a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9702:	2100      	movs	r1, #0
    9704:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    9708:	2101      	movs	r1, #1
    970a:	e004      	b.n	9716 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    970c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9710:	2912      	cmp	r1, #18
    9712:	d102      	bne.n	971a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9714:	2100      	movs	r1, #0
    9716:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    971a:	0691      	lsls	r1, r2, #26
    971c:	d501      	bpl.n	9722 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    971e:	2108      	movs	r1, #8
    9720:	7059      	strb	r1, [r3, #1]
    9722:	0611      	lsls	r1, r2, #24
    9724:	d50a      	bpl.n	973c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    9726:	8a82      	ldrh	r2, [r0, #20]
    9728:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    972c:	4620      	mov	r0, r4
    972e:	f7ff fae3 	bl	8cf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    9732:	4620      	mov	r0, r4
    9734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9738:	f7ff bafc 	b.w	8d34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    973c:	bd70      	pop	{r4, r5, r6, pc}
    973e:	0000      	.short	0x0000
    9740:	2000011c 	.word	0x2000011c
    9744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9748:	4c1f      	ldr	r4, [pc, #124]	; (97c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    974a:	2501      	movs	r5, #1
    974c:	6862      	ldr	r2, [r4, #4]
    974e:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    9752:	b908      	cbnz	r0, 9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    9754:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9758:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    975c:	b909      	cbnz	r1, 9762 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    975e:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9762:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    9766:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    976a:	3262      	adds	r2, #98	; 0x62
    976c:	2001      	movs	r0, #1
    976e:	7290      	strb	r0, [r2, #10]
    9770:	2000      	movs	r0, #0
    9772:	f000 f82b 	bl	97cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9776:	6860      	ldr	r0, [r4, #4]
    9778:	302c      	adds	r0, #44	; 0x2c
    977a:	f004 fdc1 	bl	e300 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    977e:	4606      	mov	r6, r0
    9780:	6860      	ldr	r0, [r4, #4]
    9782:	f004 fd69 	bl	e258 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9786:	b1c0      	cbz	r0, 97ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9788:	6860      	ldr	r0, [r4, #4]
    978a:	302c      	adds	r0, #44	; 0x2c
    978c:	f004 fdb8 	bl	e300 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9790:	6861      	ldr	r1, [r4, #4]
    9792:	4607      	mov	r7, r0
    9794:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9798:	8808      	ldrh	r0, [r1, #0]
    979a:	312c      	adds	r1, #44	; 0x2c
    979c:	f004 fd1d 	bl	e1da <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    97a0:	42be      	cmp	r6, r7
    97a2:	d20a      	bcs.n	97ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    97a4:	f7f7 fed4 	bl	1550 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    97a8:	4601      	mov	r1, r0
    97aa:	1bb8      	subs	r0, r7, r6
    97ac:	2865      	cmp	r0, #101	; 0x65
    97ae:	d200      	bcs.n	97b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    97b0:	2065      	movs	r0, #101	; 0x65
    97b2:	f7f7 fdc1 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    97b6:	b100      	cbz	r0, 97ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    97b8:	2500      	movs	r5, #0
    97ba:	2104      	movs	r1, #4
    97bc:	6860      	ldr	r0, [r4, #4]
    97be:	f7fe f8c1 	bl	7944 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    97c2:	4628      	mov	r0, r5
    97c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97c8:	2000011c 	.word	0x2000011c
    97cc:	b510      	push	{r4, lr}
    97ce:	4c10      	ldr	r4, [pc, #64]	; (9810 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    97d0:	6861      	ldr	r1, [r4, #4]
    97d2:	880a      	ldrh	r2, [r1, #0]
    97d4:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    97d8:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    97dc:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    97e0:	f005 f8e1 	bl	e9a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    97e4:	6861      	ldr	r1, [r4, #4]
    97e6:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    97ea:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    97ee:	f005 f8da 	bl	e9a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    97f2:	6862      	ldr	r2, [r4, #4]
    97f4:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    97f8:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    97fc:	2001      	movs	r0, #1
    97fe:	7008      	strb	r0, [r1, #0]
    9800:	2000      	movs	r0, #0
    9802:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    9806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    980a:	f7fc bbf9 	b.w	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    980e:	0000      	.short	0x0000
    9810:	2000011c 	.word	0x2000011c
    9814:	490f      	ldr	r1, [pc, #60]	; (9854 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    9816:	280c      	cmp	r0, #12
    9818:	6849      	ldr	r1, [r1, #4]
    981a:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    981e:	d014      	beq.n	984a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9820:	2813      	cmp	r0, #19
    9822:	d012      	beq.n	984a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9824:	2818      	cmp	r0, #24
    9826:	d010      	beq.n	984a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9828:	2200      	movs	r2, #0
    982a:	2811      	cmp	r0, #17
    982c:	d00e      	beq.n	984c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    982e:	2807      	cmp	r0, #7
    9830:	d00b      	beq.n	984a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9832:	2815      	cmp	r0, #21
    9834:	d00a      	beq.n	984c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    9836:	2801      	cmp	r0, #1
    9838:	d007      	beq.n	984a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    983a:	2800      	cmp	r0, #0
    983c:	d005      	beq.n	984a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    983e:	2802      	cmp	r0, #2
    9840:	d003      	beq.n	984a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9842:	f821 2fb4 	strh.w	r2, [r1, #180]!
    9846:	2001      	movs	r0, #1
    9848:	7108      	strb	r0, [r1, #4]
    984a:	4770      	bx	lr
    984c:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    9850:	4770      	bx	lr
    9852:	0000      	.short	0x0000
    9854:	2000011c 	.word	0x2000011c
    9858:	b538      	push	{r3, r4, r5, lr}
    985a:	4c11      	ldr	r4, [pc, #68]	; (98a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    985c:	6862      	ldr	r2, [r4, #4]
    985e:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    9862:	f8ad 2000 	strh.w	r2, [sp]
    9866:	f004 f9d9 	bl	dc1c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    986a:	f89d 3000 	ldrb.w	r3, [sp]
    986e:	b2c2      	uxtb	r2, r0
    9870:	2100      	movs	r1, #0
    9872:	4293      	cmp	r3, r2
    9874:	d003      	beq.n	987e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    9876:	6863      	ldr	r3, [r4, #4]
    9878:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    987c:	e002      	b.n	9884 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    987e:	6862      	ldr	r2, [r4, #4]
    9880:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    9884:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9888:	f3c0 2007 	ubfx	r0, r0, #8, #8
    988c:	4282      	cmp	r2, r0
    988e:	d003      	beq.n	9898 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    9890:	6861      	ldr	r1, [r4, #4]
    9892:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    9896:	bd38      	pop	{r3, r4, r5, pc}
    9898:	6860      	ldr	r0, [r4, #4]
    989a:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    989e:	bd38      	pop	{r3, r4, r5, pc}
    98a0:	2000011c 	.word	0x2000011c
    98a4:	b510      	push	{r4, lr}
    98a6:	4c0c      	ldr	r4, [pc, #48]	; (98d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    98a8:	6861      	ldr	r1, [r4, #4]
    98aa:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    98ae:	2813      	cmp	r0, #19
    98b0:	d001      	beq.n	98b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    98b2:	2002      	movs	r0, #2
    98b4:	bd10      	pop	{r4, pc}
    98b6:	f201 117d 	addw	r1, r1, #381	; 0x17d
    98ba:	68e0      	ldr	r0, [r4, #12]
    98bc:	f004 fae9 	bl	de92 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    98c0:	6861      	ldr	r1, [r4, #4]
    98c2:	68e0      	ldr	r0, [r4, #12]
    98c4:	31f4      	adds	r1, #244	; 0xf4
    98c6:	f004 fae1 	bl	de8c <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    98ca:	6861      	ldr	r1, [r4, #4]
    98cc:	2016      	movs	r0, #22
    98ce:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    98d2:	2000      	movs	r0, #0
    98d4:	bd10      	pop	{r4, pc}
    98d6:	0000      	.short	0x0000
    98d8:	2000011c 	.word	0x2000011c
    98dc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    98de:	4c1d      	ldr	r4, [pc, #116]	; (9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    98e0:	2300      	movs	r3, #0
    98e2:	2107      	movs	r1, #7
    98e4:	6860      	ldr	r0, [r4, #4]
    98e6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    98ea:	3078      	adds	r0, #120	; 0x78
    98ec:	f004 f8bd 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98f0:	b370      	cbz	r0, 9950 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    98f2:	4669      	mov	r1, sp
    98f4:	68e0      	ldr	r0, [r4, #12]
    98f6:	f004 fad1 	bl	de9c <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    98fa:	f001 fb73 	bl	afe4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    98fe:	f644 112f 	movw	r1, #18735	; 0x492f
    9902:	4008      	ands	r0, r1
    9904:	f89d 2000 	ldrb.w	r2, [sp]
    9908:	6861      	ldr	r1, [r4, #4]
    990a:	4002      	ands	r2, r0
    990c:	2500      	movs	r5, #0
    990e:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    9912:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9916:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    991a:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    991e:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    9922:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    9926:	8808      	ldrh	r0, [r1, #0]
    9928:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    992c:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    9930:	9a00      	ldr	r2, [sp, #0]
    9932:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    9936:	9a01      	ldr	r2, [sp, #4]
    9938:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    993c:	2001      	movs	r0, #1
    993e:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    9942:	f7fc fb5d 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9946:	6860      	ldr	r0, [r4, #4]
    9948:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    994c:	2000      	movs	r0, #0
    994e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9950:	2001      	movs	r0, #1
    9952:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9954:	2000011c 	.word	0x2000011c
    9958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    995c:	4c19      	ldr	r4, [pc, #100]	; (99c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    995e:	2600      	movs	r6, #0
    9960:	2703      	movs	r7, #3
    9962:	f8d4 c004 	ldr.w	ip, [r4, #4]
    9966:	2501      	movs	r5, #1
    9968:	b1a0      	cbz	r0, 9994 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    996a:	68e0      	ldr	r0, [r4, #12]
    996c:	78c0      	ldrb	r0, [r0, #3]
    996e:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    9972:	fa05 f000 	lsl.w	r0, r5, r0
    9976:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    997a:	b130      	cbz	r0, 998a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    997c:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    9980:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    9984:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9988:	e017      	b.n	99ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    998a:	f240 5143 	movw	r1, #1347	; 0x543
    998e:	2036      	movs	r0, #54	; 0x36
    9990:	f7fa f9f6 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9994:	2300      	movs	r3, #0
    9996:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    999a:	4619      	mov	r1, r3
    999c:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    99a0:	f004 f863 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99a4:	b160      	cbz	r0, 99c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    99a6:	68e0      	ldr	r0, [r4, #12]
    99a8:	78c1      	ldrb	r1, [r0, #3]
    99aa:	6860      	ldr	r0, [r4, #4]
    99ac:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    99b0:	f800 7f86 	strb.w	r7, [r0, #134]!
    99b4:	8686      	strh	r6, [r0, #52]	; 0x34
    99b6:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    99ba:	2000      	movs	r0, #0
    99bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99c0:	2001      	movs	r0, #1
    99c2:	e7fb      	b.n	99bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    99c4:	2000011c 	.word	0x2000011c
    99c8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    99cc:	4c30      	ldr	r4, [pc, #192]	; (9a90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    99ce:	2300      	movs	r3, #0
    99d0:	4619      	mov	r1, r3
    99d2:	6860      	ldr	r0, [r4, #4]
    99d4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    99d8:	3078      	adds	r0, #120	; 0x78
    99da:	f004 f846 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99de:	b308      	cbz	r0, 9a24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    99e0:	68e0      	ldr	r0, [r4, #12]
    99e2:	f004 fa70 	bl	dec6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    99e6:	b300      	cbz	r0, 9a2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    99e8:	68e0      	ldr	r0, [r4, #12]
    99ea:	f004 fa62 	bl	deb2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    99ee:	4607      	mov	r7, r0
    99f0:	68e0      	ldr	r0, [r4, #12]
    99f2:	f004 fa62 	bl	deba <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    99f6:	4606      	mov	r6, r0
    99f8:	68e0      	ldr	r0, [r4, #12]
    99fa:	f004 fa58 	bl	deae <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    99fe:	4605      	mov	r5, r0
    9a00:	68e0      	ldr	r0, [r4, #12]
    9a02:	f004 fa58 	bl	deb6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9a06:	4601      	mov	r1, r0
    9a08:	9700      	str	r7, [sp, #0]
    9a0a:	6860      	ldr	r0, [r4, #4]
    9a0c:	4633      	mov	r3, r6
    9a0e:	462a      	mov	r2, r5
    9a10:	302c      	adds	r0, #44	; 0x2c
    9a12:	f004 fcaf 	bl	e374 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9a16:	6861      	ldr	r1, [r4, #4]
    9a18:	2501      	movs	r5, #1
    9a1a:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9a1e:	281c      	cmp	r0, #28
    9a20:	d008      	beq.n	9a34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    9a22:	e009      	b.n	9a38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    9a24:	2001      	movs	r0, #1
    9a26:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9a2a:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9a2e:	2000      	movs	r0, #0
    9a30:	f7ff bf92 	b.w	9958 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9a34:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    9a38:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9a3c:	2801      	cmp	r0, #1
    9a3e:	d011      	beq.n	9a64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9a40:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    9a44:	f88d 0004 	strb.w	r0, [sp, #4]
    9a48:	9801      	ldr	r0, [sp, #4]
    9a4a:	9001      	str	r0, [sp, #4]
    9a4c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9a50:	b940      	cbnz	r0, 9a64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9a52:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    9a56:	f88d 0000 	strb.w	r0, [sp]
    9a5a:	9800      	ldr	r0, [sp, #0]
    9a5c:	9000      	str	r0, [sp, #0]
    9a5e:	f89d 0000 	ldrb.w	r0, [sp]
    9a62:	b118      	cbz	r0, 9a6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    9a64:	201e      	movs	r0, #30
    9a66:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9a6a:	e00a      	b.n	9a82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    9a6c:	201d      	movs	r0, #29
    9a6e:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9a72:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    9a76:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9a7a:	f004 fc82 	bl	e382 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9a7e:	f7fc fabf 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a82:	6860      	ldr	r0, [r4, #4]
    9a84:	2100      	movs	r1, #0
    9a86:	f820 1fba 	strh.w	r1, [r0, #186]!
    9a8a:	7085      	strb	r5, [r0, #2]
    9a8c:	4608      	mov	r0, r1
    9a8e:	e7ca      	b.n	9a26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    9a90:	2000011c 	.word	0x2000011c
    9a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a96:	4c1a      	ldr	r4, [pc, #104]	; (9b00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    9a98:	2300      	movs	r3, #0
    9a9a:	210a      	movs	r1, #10
    9a9c:	6860      	ldr	r0, [r4, #4]
    9a9e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9aa2:	3078      	adds	r0, #120	; 0x78
    9aa4:	f003 ffe1 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9aa8:	b338      	cbz	r0, 9afa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    9aaa:	68e0      	ldr	r0, [r4, #12]
    9aac:	f004 fa0b 	bl	dec6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9ab0:	b1c8      	cbz	r0, 9ae6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    9ab2:	68e0      	ldr	r0, [r4, #12]
    9ab4:	f004 f9fd 	bl	deb2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9ab8:	4607      	mov	r7, r0
    9aba:	68e0      	ldr	r0, [r4, #12]
    9abc:	f004 f9fd 	bl	deba <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9ac0:	4606      	mov	r6, r0
    9ac2:	68e0      	ldr	r0, [r4, #12]
    9ac4:	f004 f9f3 	bl	deae <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9ac8:	4605      	mov	r5, r0
    9aca:	68e0      	ldr	r0, [r4, #12]
    9acc:	f004 f9f3 	bl	deb6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9ad0:	4601      	mov	r1, r0
    9ad2:	9700      	str	r7, [sp, #0]
    9ad4:	6860      	ldr	r0, [r4, #4]
    9ad6:	4633      	mov	r3, r6
    9ad8:	462a      	mov	r2, r5
    9ada:	302c      	adds	r0, #44	; 0x2c
    9adc:	f004 fc4a 	bl	e374 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9ae0:	6860      	ldr	r0, [r4, #4]
    9ae2:	f004 fbb9 	bl	e258 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ae6:	6861      	ldr	r1, [r4, #4]
    9ae8:	2000      	movs	r0, #0
    9aea:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9aee:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9af2:	f7ff fabf 	bl	9074 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9af6:	2000      	movs	r0, #0
    9af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9afa:	2001      	movs	r0, #1
    9afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9afe:	0000      	.short	0x0000
    9b00:	2000011c 	.word	0x2000011c
    9b04:	b510      	push	{r4, lr}
    9b06:	4c0b      	ldr	r4, [pc, #44]	; (9b34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    9b08:	2300      	movs	r3, #0
    9b0a:	4619      	mov	r1, r3
    9b0c:	6860      	ldr	r0, [r4, #4]
    9b0e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b12:	3078      	adds	r0, #120	; 0x78
    9b14:	f003 ffa9 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b18:	b150      	cbz	r0, 9b30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    9b1a:	6860      	ldr	r0, [r4, #4]
    9b1c:	2100      	movs	r1, #0
    9b1e:	f820 1fba 	strh.w	r1, [r0, #186]!
    9b22:	2101      	movs	r1, #1
    9b24:	7081      	strb	r1, [r0, #2]
    9b26:	2102      	movs	r1, #2
    9b28:	f800 1c34 	strb.w	r1, [r0, #-52]
    9b2c:	2000      	movs	r0, #0
    9b2e:	bd10      	pop	{r4, pc}
    9b30:	2001      	movs	r0, #1
    9b32:	bd10      	pop	{r4, pc}
    9b34:	2000011c 	.word	0x2000011c
    9b38:	b510      	push	{r4, lr}
    9b3a:	4c09      	ldr	r4, [pc, #36]	; (9b60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    9b3c:	2300      	movs	r3, #0
    9b3e:	2109      	movs	r1, #9
    9b40:	6860      	ldr	r0, [r4, #4]
    9b42:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9b46:	3078      	adds	r0, #120	; 0x78
    9b48:	f003 ff8f 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b4c:	2800      	cmp	r0, #0
    9b4e:	d006      	beq.n	9b5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    9b50:	6861      	ldr	r1, [r4, #4]
    9b52:	2000      	movs	r0, #0
    9b54:	f801 0fac 	strb.w	r0, [r1, #172]!
    9b58:	7308      	strb	r0, [r1, #12]
    9b5a:	f801 0c27 	strb.w	r0, [r1, #-39]
    9b5e:	bd10      	pop	{r4, pc}
    9b60:	2000011c 	.word	0x2000011c
    9b64:	4807      	ldr	r0, [pc, #28]	; (9b84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    9b66:	6840      	ldr	r0, [r0, #4]
    9b68:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9b6c:	290f      	cmp	r1, #15
    9b6e:	d001      	beq.n	9b74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    9b70:	2002      	movs	r0, #2
    9b72:	4770      	bx	lr
    9b74:	2100      	movs	r1, #0
    9b76:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9b7a:	2112      	movs	r1, #18
    9b7c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9b80:	2000      	movs	r0, #0
    9b82:	4770      	bx	lr
    9b84:	2000011c 	.word	0x2000011c
    9b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b8a:	4c42      	ldr	r4, [pc, #264]	; (9c94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    9b8c:	2600      	movs	r6, #0
    9b8e:	b087      	sub	sp, #28
    9b90:	6860      	ldr	r0, [r4, #4]
    9b92:	4633      	mov	r3, r6
    9b94:	4631      	mov	r1, r6
    9b96:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b9a:	3078      	adds	r0, #120	; 0x78
    9b9c:	f003 ff65 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ba0:	b180      	cbz	r0, 9bc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    9ba2:	6860      	ldr	r0, [r4, #4]
    9ba4:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9ba8:	2823      	cmp	r0, #35	; 0x23
    9baa:	d00e      	beq.n	9bca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9bac:	2824      	cmp	r0, #36	; 0x24
    9bae:	d00c      	beq.n	9bca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9bb0:	4668      	mov	r0, sp
    9bb2:	f7fa feeb 	bl	498c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    9bb6:	b150      	cbz	r0, 9bce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    9bb8:	9800      	ldr	r0, [sp, #0]
    9bba:	a901      	add	r1, sp, #4
    9bbc:	78c0      	ldrb	r0, [r0, #3]
    9bbe:	f88d 0004 	strb.w	r0, [sp, #4]
    9bc2:	e005      	b.n	9bd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    9bc4:	2001      	movs	r0, #1
    9bc6:	b007      	add	sp, #28
    9bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bca:	2020      	movs	r0, #32
    9bcc:	e7fb      	b.n	9bc6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9bce:	2100      	movs	r1, #0
    9bd0:	6860      	ldr	r0, [r4, #4]
    9bd2:	ab04      	add	r3, sp, #16
    9bd4:	2216      	movs	r2, #22
    9bd6:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9bda:	f004 f802 	bl	dbe2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    9bde:	2700      	movs	r7, #0
    9be0:	2501      	movs	r5, #1
    9be2:	b178      	cbz	r0, 9c04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    9be4:	6860      	ldr	r0, [r4, #4]
    9be6:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9bea:	2216      	movs	r2, #22
    9bec:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    9bf0:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9bf4:	2119      	movs	r1, #25
    9bf6:	f800 1f86 	strb.w	r1, [r0, #134]!
    9bfa:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9bfe:	8687      	strh	r7, [r0, #52]	; 0x34
    9c00:	2000      	movs	r0, #0
    9c02:	e7e0      	b.n	9bc6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9c04:	68e0      	ldr	r0, [r4, #12]
    9c06:	f004 f97a 	bl	defe <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9c0a:	b1a8      	cbz	r0, 9c38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    9c0c:	68e1      	ldr	r1, [r4, #12]
    9c0e:	7908      	ldrb	r0, [r1, #4]
    9c10:	f000 0207 	and.w	r2, r0, #7
    9c14:	6860      	ldr	r0, [r4, #4]
    9c16:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    9c1a:	7949      	ldrb	r1, [r1, #5]
    9c1c:	f001 0107 	and.w	r1, r1, #7
    9c20:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    9c24:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    9c28:	f88d 3018 	strb.w	r3, [sp, #24]
    9c2c:	9b06      	ldr	r3, [sp, #24]
    9c2e:	9301      	str	r3, [sp, #4]
    9c30:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9c34:	bb23      	cbnz	r3, 9c80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9c36:	e004      	b.n	9c42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    9c38:	2000      	movs	r0, #0
    9c3a:	f7ff fe8d 	bl	9958 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9c3e:	4606      	mov	r6, r0
    9c40:	e025      	b.n	9c8e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    9c42:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    9c46:	2b01      	cmp	r3, #1
    9c48:	d01a      	beq.n	9c80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9c4a:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    9c4e:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9c52:	4594      	cmp	ip, r2
    9c54:	d106      	bne.n	9c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9c56:	781a      	ldrb	r2, [r3, #0]
    9c58:	428a      	cmp	r2, r1
    9c5a:	d103      	bne.n	9c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9c5c:	2102      	movs	r1, #2
    9c5e:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    9c62:	e00d      	b.n	9c80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9c64:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    9c68:	8802      	ldrh	r2, [r0, #0]
    9c6a:	f821 2902 	strh.w	r2, [r1], #-2
    9c6e:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9c72:	710a      	strb	r2, [r1, #4]
    9c74:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9c78:	7148      	strb	r0, [r1, #5]
    9c7a:	700d      	strb	r5, [r1, #0]
    9c7c:	f7fc f9c0 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c80:	6860      	ldr	r0, [r4, #4]
    9c82:	2121      	movs	r1, #33	; 0x21
    9c84:	f800 1f86 	strb.w	r1, [r0, #134]!
    9c88:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9c8c:	8687      	strh	r7, [r0, #52]	; 0x34
    9c8e:	4630      	mov	r0, r6
    9c90:	e799      	b.n	9bc6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9c92:	0000      	.short	0x0000
    9c94:	2000011c 	.word	0x2000011c
    9c98:	b570      	push	{r4, r5, r6, lr}
    9c9a:	4c18      	ldr	r4, [pc, #96]	; (9cfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    9c9c:	6860      	ldr	r0, [r4, #4]
    9c9e:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9ca2:	281f      	cmp	r0, #31
    9ca4:	d001      	beq.n	9caa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    9ca6:	2001      	movs	r0, #1
    9ca8:	bd70      	pop	{r4, r5, r6, pc}
    9caa:	68e0      	ldr	r0, [r4, #12]
    9cac:	f004 f931 	bl	df12 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    9cb0:	b1d8      	cbz	r0, 9cea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    9cb2:	68e0      	ldr	r0, [r4, #12]
    9cb4:	2201      	movs	r2, #1
    9cb6:	7901      	ldrb	r1, [r0, #4]
    9cb8:	7940      	ldrb	r0, [r0, #5]
    9cba:	f001 0107 	and.w	r1, r1, #7
    9cbe:	f361 0507 	bfi	r5, r1, #0, #8
    9cc2:	4629      	mov	r1, r5
    9cc4:	f000 0007 	and.w	r0, r0, #7
    9cc8:	f360 210f 	bfi	r1, r0, #8, #8
    9ccc:	6860      	ldr	r0, [r4, #4]
    9cce:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    9cd2:	2200      	movs	r2, #0
    9cd4:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    9cd8:	2223      	movs	r2, #35	; 0x23
    9cda:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    9cde:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9ce2:	f7ff fdb9 	bl	9858 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9ce6:	2000      	movs	r0, #0
    9ce8:	bd70      	pop	{r4, r5, r6, pc}
    9cea:	2001      	movs	r0, #1
    9cec:	f7ff fe34 	bl	9958 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9cf0:	4604      	mov	r4, r0
    9cf2:	201e      	movs	r0, #30
    9cf4:	f7ff fd6a 	bl	97cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9cf8:	4620      	mov	r0, r4
    9cfa:	bd70      	pop	{r4, r5, r6, pc}
    9cfc:	2000011c 	.word	0x2000011c
    9d00:	b570      	push	{r4, r5, r6, lr}
    9d02:	4d07      	ldr	r5, [pc, #28]	; (9d20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    9d04:	2400      	movs	r4, #0
    9d06:	68e8      	ldr	r0, [r5, #12]
    9d08:	f004 f90d 	bl	df26 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9d0c:	2803      	cmp	r0, #3
    9d0e:	d105      	bne.n	9d1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    9d10:	68e8      	ldr	r0, [r5, #12]
    9d12:	f004 f90a 	bl	df2a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9d16:	f000 f805 	bl	9d24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9d1a:	4604      	mov	r4, r0
    9d1c:	4620      	mov	r0, r4
    9d1e:	bd70      	pop	{r4, r5, r6, pc}
    9d20:	2000011c 	.word	0x2000011c
    9d24:	b570      	push	{r4, r5, r6, lr}
    9d26:	4d18      	ldr	r5, [pc, #96]	; (9d88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    9d28:	6869      	ldr	r1, [r5, #4]
    9d2a:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    9d2e:	2a16      	cmp	r2, #22
    9d30:	d001      	beq.n	9d36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    9d32:	2a13      	cmp	r2, #19
    9d34:	d102      	bne.n	9d3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    9d36:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    9d3a:	b10a      	cbz	r2, 9d40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    9d3c:	2002      	movs	r0, #2
    9d3e:	bd70      	pop	{r4, r5, r6, pc}
    9d40:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    9d44:	2400      	movs	r4, #0
    9d46:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    9d4a:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    9d4e:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    9d52:	b122      	cbz	r2, 9d5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    9d54:	f240 21eb 	movw	r1, #747	; 0x2eb
    9d58:	2036      	movs	r0, #54	; 0x36
    9d5a:	f7fa f811 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d5e:	880a      	ldrh	r2, [r1, #0]
    9d60:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    9d64:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    9d68:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    9d6c:	200d      	movs	r0, #13
    9d6e:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    9d72:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    9d76:	f000 fb9b 	bl	a4b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9d7a:	f7fc f941 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d7e:	6868      	ldr	r0, [r5, #4]
    9d80:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9d84:	2000      	movs	r0, #0
    9d86:	bd70      	pop	{r4, r5, r6, pc}
    9d88:	2000011c 	.word	0x2000011c
    9d8c:	4802      	ldr	r0, [pc, #8]	; (9d98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    9d8e:	68c0      	ldr	r0, [r0, #12]
    9d90:	7900      	ldrb	r0, [r0, #4]
    9d92:	f7ff bfc7 	b.w	9d24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9d96:	0000      	.short	0x0000
    9d98:	2000011c 	.word	0x2000011c
    9d9c:	b510      	push	{r4, lr}
    9d9e:	4c0e      	ldr	r4, [pc, #56]	; (9dd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    9da0:	6860      	ldr	r0, [r4, #4]
    9da2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9da6:	2916      	cmp	r1, #22
    9da8:	d001      	beq.n	9dae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    9daa:	2002      	movs	r0, #2
    9dac:	bd10      	pop	{r4, pc}
    9dae:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9db2:	f200 1175 	addw	r1, r0, #373	; 0x175
    9db6:	2200      	movs	r2, #0
    9db8:	f200 1065 	addw	r0, r0, #357	; 0x165
    9dbc:	f003 fdbf 	bl	d93e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9dc0:	6860      	ldr	r0, [r4, #4]
    9dc2:	2100      	movs	r1, #0
    9dc4:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9dc8:	2101      	movs	r1, #1
    9dca:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9dce:	2118      	movs	r1, #24
    9dd0:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9dd4:	2000      	movs	r0, #0
    9dd6:	bd10      	pop	{r4, pc}
    9dd8:	2000011c 	.word	0x2000011c
    9ddc:	b570      	push	{r4, r5, r6, lr}
    9dde:	4d1b      	ldr	r5, [pc, #108]	; (9e4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    9de0:	6868      	ldr	r0, [r5, #4]
    9de2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9de6:	291a      	cmp	r1, #26
    9de8:	d001      	beq.n	9dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    9dea:	2002      	movs	r0, #2
    9dec:	bd70      	pop	{r4, r5, r6, pc}
    9dee:	2400      	movs	r4, #0
    9df0:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    9df4:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    9df8:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    9dfc:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    9e00:	b121      	cbz	r1, 9e0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    9e02:	f240 3113 	movw	r1, #787	; 0x313
    9e06:	2036      	movs	r0, #54	; 0x36
    9e08:	f7f9 ffba 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e0c:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9e10:	b141      	cbz	r1, 9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    9e12:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    9e16:	8801      	ldrh	r1, [r0, #0]
    9e18:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9e1c:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9e20:	210e      	movs	r1, #14
    9e22:	e008      	b.n	9e36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    9e24:	8801      	ldrh	r1, [r0, #0]
    9e26:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9e2a:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9e2e:	2101      	movs	r1, #1
    9e30:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    9e34:	210d      	movs	r1, #13
    9e36:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    9e3a:	f000 fb39 	bl	a4b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9e3e:	f7fc f8df 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9e42:	6868      	ldr	r0, [r5, #4]
    9e44:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9e48:	2000      	movs	r0, #0
    9e4a:	bd70      	pop	{r4, r5, r6, pc}
    9e4c:	2000011c 	.word	0x2000011c
    9e50:	b510      	push	{r4, lr}
    9e52:	4c0d      	ldr	r4, [pc, #52]	; (9e88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    9e54:	2300      	movs	r3, #0
    9e56:	2101      	movs	r1, #1
    9e58:	6860      	ldr	r0, [r4, #4]
    9e5a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9e5e:	3078      	adds	r0, #120	; 0x78
    9e60:	f003 fe03 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e64:	b108      	cbz	r0, 9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    9e66:	2000      	movs	r0, #0
    9e68:	bd10      	pop	{r4, pc}
    9e6a:	68e0      	ldr	r0, [r4, #12]
    9e6c:	f004 f827 	bl	debe <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9e70:	6861      	ldr	r1, [r4, #4]
    9e72:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    9e76:	2007      	movs	r0, #7
    9e78:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    9e7c:	2000      	movs	r0, #0
    9e7e:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    9e82:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9e86:	e7ee      	b.n	9e66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    9e88:	2000011c 	.word	0x2000011c
    9e8c:	b570      	push	{r4, r5, r6, lr}
    9e8e:	4c25      	ldr	r4, [pc, #148]	; (9f24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    9e90:	2600      	movs	r6, #0
    9e92:	2109      	movs	r1, #9
    9e94:	6860      	ldr	r0, [r4, #4]
    9e96:	4633      	mov	r3, r6
    9e98:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e9c:	3078      	adds	r0, #120	; 0x78
    9e9e:	f003 fde4 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ea2:	2500      	movs	r5, #0
    9ea4:	b118      	cbz	r0, 9eae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    9ea6:	68e0      	ldr	r0, [r4, #12]
    9ea8:	7900      	ldrb	r0, [r0, #4]
    9eaa:	2812      	cmp	r0, #18
    9eac:	d011      	beq.n	9ed2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    9eae:	6860      	ldr	r0, [r4, #4]
    9eb0:	210a      	movs	r1, #10
    9eb2:	2300      	movs	r3, #0
    9eb4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9eb8:	3078      	adds	r0, #120	; 0x78
    9eba:	f003 fdd6 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ebe:	b118      	cbz	r0, 9ec8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    9ec0:	68e0      	ldr	r0, [r4, #12]
    9ec2:	7900      	ldrb	r0, [r0, #4]
    9ec4:	2814      	cmp	r0, #20
    9ec6:	d008      	beq.n	9eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    9ec8:	68e0      	ldr	r0, [r4, #12]
    9eca:	7900      	ldrb	r0, [r0, #4]
    9ecc:	2816      	cmp	r0, #22
    9ece:	d012      	beq.n	9ef6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    9ed0:	e026      	b.n	9f20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9ed2:	f7ff fe31 	bl	9b38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    9ed6:	4606      	mov	r6, r0
    9ed8:	e022      	b.n	9f20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9eda:	6860      	ldr	r0, [r4, #4]
    9edc:	2105      	movs	r1, #5
    9ede:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9ee2:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9ee6:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9eea:	30c6      	adds	r0, #198	; 0xc6
    9eec:	f004 fcde 	bl	e8ac <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    9ef0:	f7ff f8c0 	bl	9074 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9ef4:	e014      	b.n	9f20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9ef6:	6860      	ldr	r0, [r4, #4]
    9ef8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9efc:	291f      	cmp	r1, #31
    9efe:	d10f      	bne.n	9f20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9f00:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9f04:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9f08:	2108      	movs	r1, #8
    9f0a:	30c6      	adds	r0, #198	; 0xc6
    9f0c:	f004 fcce 	bl	e8ac <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    9f10:	6860      	ldr	r0, [r4, #4]
    9f12:	210b      	movs	r1, #11
    9f14:	30c6      	adds	r0, #198	; 0xc6
    9f16:	f004 fcc9 	bl	e8ac <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    9f1a:	201a      	movs	r0, #26
    9f1c:	f7ff fc56 	bl	97cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9f20:	4630      	mov	r0, r6
    9f22:	bd70      	pop	{r4, r5, r6, pc}
    9f24:	2000011c 	.word	0x2000011c
    9f28:	b570      	push	{r4, r5, r6, lr}
    9f2a:	4c32      	ldr	r4, [pc, #200]	; (9ff4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    9f2c:	2300      	movs	r3, #0
    9f2e:	4619      	mov	r1, r3
    9f30:	6860      	ldr	r0, [r4, #4]
    9f32:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f36:	3078      	adds	r0, #120	; 0x78
    9f38:	f003 fd97 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f3c:	b940      	cbnz	r0, 9f50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    9f3e:	6860      	ldr	r0, [r4, #4]
    9f40:	2300      	movs	r3, #0
    9f42:	2108      	movs	r1, #8
    9f44:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f48:	3078      	adds	r0, #120	; 0x78
    9f4a:	f003 fd8e 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f4e:	b1f8      	cbz	r0, 9f90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    9f50:	6860      	ldr	r0, [r4, #4]
    9f52:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9f56:	0780      	lsls	r0, r0, #30
    9f58:	d412      	bmi.n	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    9f5a:	68e0      	ldr	r0, [r4, #12]
    9f5c:	f003 ffb1 	bl	dec2 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    9f60:	6861      	ldr	r1, [r4, #4]
    9f62:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    9f66:	68e0      	ldr	r0, [r4, #12]
    9f68:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    9f6c:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    9f70:	8840      	ldrh	r0, [r0, #2]
    9f72:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    9f76:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    9f7a:	f040 0002 	orr.w	r0, r0, #2
    9f7e:	7008      	strb	r0, [r1, #0]
    9f80:	6860      	ldr	r0, [r4, #4]
    9f82:	f04f 0500 	mov.w	r5, #0
    9f86:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9f8a:	07c9      	lsls	r1, r1, #31
    9f8c:	d002      	beq.n	9f94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    9f8e:	e010      	b.n	9fb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    9f90:	2001      	movs	r0, #1
    9f92:	bd70      	pop	{r4, r5, r6, pc}
    9f94:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f98:	2300      	movs	r3, #0
    9f9a:	4619      	mov	r1, r3
    9f9c:	3078      	adds	r0, #120	; 0x78
    9f9e:	f003 fd64 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fa2:	b160      	cbz	r0, 9fbe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    9fa4:	6860      	ldr	r0, [r4, #4]
    9fa6:	2101      	movs	r1, #1
    9fa8:	f800 1f86 	strb.w	r1, [r0, #134]!
    9fac:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    9fb0:	8685      	strh	r5, [r0, #52]	; 0x34
    9fb2:	6860      	ldr	r0, [r4, #4]
    9fb4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9fb8:	2901      	cmp	r1, #1
    9fba:	d005      	beq.n	9fc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    9fbc:	e00a      	b.n	9fd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    9fbe:	f240 314e 	movw	r1, #846	; 0x34e
    9fc2:	2036      	movs	r0, #54	; 0x36
    9fc4:	f7f9 fedc 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fc8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9fcc:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9fd0:	f7fc f816 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9fd4:	6860      	ldr	r0, [r4, #4]
    9fd6:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9fda:	b149      	cbz	r1, 9ff0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9fdc:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    9fe0:	f7fc f80e 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9fe4:	6860      	ldr	r0, [r4, #4]
    9fe6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9fea:	b909      	cbnz	r1, 9ff0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9fec:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9ff0:	2000      	movs	r0, #0
    9ff2:	bd70      	pop	{r4, r5, r6, pc}
    9ff4:	2000011c 	.word	0x2000011c
    9ff8:	b510      	push	{r4, lr}
    9ffa:	4c0a      	ldr	r4, [pc, #40]	; (a024 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    9ffc:	2300      	movs	r3, #0
    9ffe:	4619      	mov	r1, r3
    a000:	6860      	ldr	r0, [r4, #4]
    a002:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a006:	3078      	adds	r0, #120	; 0x78
    a008:	f003 fd2f 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a00c:	b120      	cbz	r0, a018 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    a00e:	6861      	ldr	r1, [r4, #4]
    a010:	200c      	movs	r0, #12
    a012:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a016:	bd10      	pop	{r4, pc}
    a018:	f240 51fa 	movw	r1, #1530	; 0x5fa
    a01c:	2036      	movs	r0, #54	; 0x36
    a01e:	f7f9 feaf 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a022:	0000      	.short	0x0000
    a024:	2000011c 	.word	0x2000011c
    a028:	b510      	push	{r4, lr}
    a02a:	4c0a      	ldr	r4, [pc, #40]	; (a054 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    a02c:	2300      	movs	r3, #0
    a02e:	4619      	mov	r1, r3
    a030:	6860      	ldr	r0, [r4, #4]
    a032:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a036:	3078      	adds	r0, #120	; 0x78
    a038:	f003 fd17 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a03c:	b120      	cbz	r0, a048 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    a03e:	6861      	ldr	r1, [r4, #4]
    a040:	200d      	movs	r0, #13
    a042:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a046:	bd10      	pop	{r4, pc}
    a048:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    a04c:	2036      	movs	r0, #54	; 0x36
    a04e:	f7f9 fe97 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a052:	0000      	.short	0x0000
    a054:	2000011c 	.word	0x2000011c
    a058:	b510      	push	{r4, lr}
    a05a:	4c0d      	ldr	r4, [pc, #52]	; (a090 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    a05c:	2300      	movs	r3, #0
    a05e:	4619      	mov	r1, r3
    a060:	6860      	ldr	r0, [r4, #4]
    a062:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a066:	3078      	adds	r0, #120	; 0x78
    a068:	f003 fcff 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a06c:	b918      	cbnz	r0, a076 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    a06e:	6860      	ldr	r0, [r4, #4]
    a070:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a074:	b138      	cbz	r0, a086 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    a076:	6860      	ldr	r0, [r4, #4]
    a078:	2101      	movs	r1, #1
    a07a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a07e:	2113      	movs	r1, #19
    a080:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a084:	bd10      	pop	{r4, pc}
    a086:	f240 6115 	movw	r1, #1557	; 0x615
    a08a:	2036      	movs	r0, #54	; 0x36
    a08c:	f7f9 fe78 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a090:	2000011c 	.word	0x2000011c
    a094:	b510      	push	{r4, lr}
    a096:	4c0a      	ldr	r4, [pc, #40]	; (a0c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    a098:	2300      	movs	r3, #0
    a09a:	4619      	mov	r1, r3
    a09c:	6860      	ldr	r0, [r4, #4]
    a09e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0a2:	3078      	adds	r0, #120	; 0x78
    a0a4:	f003 fce1 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0a8:	b120      	cbz	r0, a0b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    a0aa:	6861      	ldr	r1, [r4, #4]
    a0ac:	2004      	movs	r0, #4
    a0ae:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a0b2:	bd10      	pop	{r4, pc}
    a0b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
    a0b8:	2036      	movs	r0, #54	; 0x36
    a0ba:	f7f9 fe61 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0be:	0000      	.short	0x0000
    a0c0:	2000011c 	.word	0x2000011c
    a0c4:	b510      	push	{r4, lr}
    a0c6:	4c0a      	ldr	r4, [pc, #40]	; (a0f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    a0c8:	2300      	movs	r3, #0
    a0ca:	4619      	mov	r1, r3
    a0cc:	6860      	ldr	r0, [r4, #4]
    a0ce:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0d2:	3078      	adds	r0, #120	; 0x78
    a0d4:	f003 fcc9 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0d8:	b120      	cbz	r0, a0e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    a0da:	6861      	ldr	r1, [r4, #4]
    a0dc:	201c      	movs	r0, #28
    a0de:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a0e2:	bd10      	pop	{r4, pc}
    a0e4:	f240 614c 	movw	r1, #1612	; 0x64c
    a0e8:	2036      	movs	r0, #54	; 0x36
    a0ea:	f7f9 fe49 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0ee:	0000      	.short	0x0000
    a0f0:	2000011c 	.word	0x2000011c
    a0f4:	b510      	push	{r4, lr}
    a0f6:	4c0a      	ldr	r4, [pc, #40]	; (a120 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    a0f8:	2300      	movs	r3, #0
    a0fa:	4619      	mov	r1, r3
    a0fc:	6860      	ldr	r0, [r4, #4]
    a0fe:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a102:	3078      	adds	r0, #120	; 0x78
    a104:	f003 fcb1 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a108:	b120      	cbz	r0, a114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    a10a:	6861      	ldr	r1, [r4, #4]
    a10c:	2000      	movs	r0, #0
    a10e:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a112:	bd10      	pop	{r4, pc}
    a114:	f240 6153 	movw	r1, #1619	; 0x653
    a118:	2036      	movs	r0, #54	; 0x36
    a11a:	f7f9 fe31 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a11e:	0000      	.short	0x0000
    a120:	2000011c 	.word	0x2000011c
    a124:	b510      	push	{r4, lr}
    a126:	4c0a      	ldr	r4, [pc, #40]	; (a150 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    a128:	2300      	movs	r3, #0
    a12a:	4619      	mov	r1, r3
    a12c:	6860      	ldr	r0, [r4, #4]
    a12e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a132:	3078      	adds	r0, #120	; 0x78
    a134:	f003 fc99 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a138:	b120      	cbz	r0, a144 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    a13a:	6861      	ldr	r1, [r4, #4]
    a13c:	2005      	movs	r0, #5
    a13e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a142:	bd10      	pop	{r4, pc}
    a144:	f240 613f 	movw	r1, #1599	; 0x63f
    a148:	2036      	movs	r0, #54	; 0x36
    a14a:	f7f9 fe19 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a14e:	0000      	.short	0x0000
    a150:	2000011c 	.word	0x2000011c
    a154:	4902      	ldr	r1, [pc, #8]	; (a160 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    a156:	2000      	movs	r0, #0
    a158:	6849      	ldr	r1, [r1, #4]
    a15a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a15e:	4770      	bx	lr
    a160:	2000011c 	.word	0x2000011c
    a164:	b510      	push	{r4, lr}
    a166:	4c0b      	ldr	r4, [pc, #44]	; (a194 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    a168:	2300      	movs	r3, #0
    a16a:	4619      	mov	r1, r3
    a16c:	6860      	ldr	r0, [r4, #4]
    a16e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a172:	3078      	adds	r0, #120	; 0x78
    a174:	f003 fc79 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a178:	b138      	cbz	r0, a18a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    a17a:	6860      	ldr	r0, [r4, #4]
    a17c:	2101      	movs	r1, #1
    a17e:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a182:	210f      	movs	r1, #15
    a184:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a188:	bd10      	pop	{r4, pc}
    a18a:	f240 6106 	movw	r1, #1542	; 0x606
    a18e:	2036      	movs	r0, #54	; 0x36
    a190:	f7f9 fdf6 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a194:	2000011c 	.word	0x2000011c
    a198:	4809      	ldr	r0, [pc, #36]	; (a1c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    a19a:	b510      	push	{r4, lr}
    a19c:	6840      	ldr	r0, [r0, #4]
    a19e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a1a2:	2912      	cmp	r1, #18
    a1a4:	d004      	beq.n	a1b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    a1a6:	f240 610e 	movw	r1, #1550	; 0x60e
    a1aa:	2036      	movs	r0, #54	; 0x36
    a1ac:	f7f9 fde8 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1b0:	2101      	movs	r1, #1
    a1b2:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a1b6:	2111      	movs	r1, #17
    a1b8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a1bc:	bd10      	pop	{r4, pc}
    a1be:	0000      	.short	0x0000
    a1c0:	2000011c 	.word	0x2000011c
    a1c4:	b510      	push	{r4, lr}
    a1c6:	4c0a      	ldr	r4, [pc, #40]	; (a1f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    a1c8:	2300      	movs	r3, #0
    a1ca:	4619      	mov	r1, r3
    a1cc:	6860      	ldr	r0, [r4, #4]
    a1ce:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a1d2:	3078      	adds	r0, #120	; 0x78
    a1d4:	f003 fc49 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1d8:	b120      	cbz	r0, a1e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    a1da:	6861      	ldr	r1, [r4, #4]
    a1dc:	201f      	movs	r0, #31
    a1de:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a1e2:	bd10      	pop	{r4, pc}
    a1e4:	f240 615c 	movw	r1, #1628	; 0x65c
    a1e8:	2036      	movs	r0, #54	; 0x36
    a1ea:	f7f9 fdc9 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1ee:	0000      	.short	0x0000
    a1f0:	2000011c 	.word	0x2000011c
    a1f4:	b570      	push	{r4, r5, r6, lr}
    a1f6:	4c1d      	ldr	r4, [pc, #116]	; (a26c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    a1f8:	6860      	ldr	r0, [r4, #4]
    a1fa:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a1fe:	b911      	cbnz	r1, a206 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    a200:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a204:	b179      	cbz	r1, a226 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    a206:	2100      	movs	r1, #0
    a208:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a20c:	2224      	movs	r2, #36	; 0x24
    a20e:	2500      	movs	r5, #0
    a210:	2b21      	cmp	r3, #33	; 0x21
    a212:	d00a      	beq.n	a22a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    a214:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    a218:	2b23      	cmp	r3, #35	; 0x23
    a21a:	d01a      	beq.n	a252 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    a21c:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    a220:	2036      	movs	r0, #54	; 0x36
    a222:	f7f9 fdad 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a226:	2101      	movs	r1, #1
    a228:	e7ee      	b.n	a208 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    a22a:	b161      	cbz	r1, a246 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    a22c:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    a230:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    a234:	2801      	cmp	r0, #1
    a236:	d102      	bne.n	a23e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    a238:	2000      	movs	r0, #0
    a23a:	f7ff fac7 	bl	97cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a23e:	6860      	ldr	r0, [r4, #4]
    a240:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    a244:	e001      	b.n	a24a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    a246:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    a24a:	6860      	ldr	r0, [r4, #4]
    a24c:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a250:	bd70      	pop	{r4, r5, r6, pc}
    a252:	b129      	cbz	r1, a260 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    a254:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a258:	2000      	movs	r0, #0
    a25a:	f7ff fab7 	bl	97cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a25e:	e001      	b.n	a264 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    a260:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    a264:	6860      	ldr	r0, [r4, #4]
    a266:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a26a:	bd70      	pop	{r4, r5, r6, pc}
    a26c:	2000011c 	.word	0x2000011c
    a270:	4903      	ldr	r1, [pc, #12]	; (a280 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    a272:	2000      	movs	r0, #0
    a274:	6849      	ldr	r1, [r1, #4]
    a276:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a27a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a27e:	4770      	bx	lr
    a280:	2000011c 	.word	0x2000011c
    a284:	4807      	ldr	r0, [pc, #28]	; (a2a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    a286:	b510      	push	{r4, lr}
    a288:	6840      	ldr	r0, [r0, #4]
    a28a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a28e:	2918      	cmp	r1, #24
    a290:	d004      	beq.n	a29c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    a292:	f240 611e 	movw	r1, #1566	; 0x61e
    a296:	2036      	movs	r0, #54	; 0x36
    a298:	f7f9 fd72 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a29c:	211a      	movs	r1, #26
    a29e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a2a2:	bd10      	pop	{r4, pc}
    a2a4:	2000011c 	.word	0x2000011c
    a2a8:	b510      	push	{r4, lr}
    a2aa:	4c0a      	ldr	r4, [pc, #40]	; (a2d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    a2ac:	2300      	movs	r3, #0
    a2ae:	2101      	movs	r1, #1
    a2b0:	6860      	ldr	r0, [r4, #4]
    a2b2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a2b6:	3078      	adds	r0, #120	; 0x78
    a2b8:	f003 fbd7 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2bc:	2800      	cmp	r0, #0
    a2be:	d108      	bne.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    a2c0:	6860      	ldr	r0, [r4, #4]
    a2c2:	2108      	movs	r1, #8
    a2c4:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a2c8:	2100      	movs	r1, #0
    a2ca:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a2ce:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a2d2:	bd10      	pop	{r4, pc}
    a2d4:	2000011c 	.word	0x2000011c
    a2d8:	b570      	push	{r4, r5, r6, lr}
    a2da:	4c0e      	ldr	r4, [pc, #56]	; (a314 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    a2dc:	2300      	movs	r3, #0
    a2de:	4619      	mov	r1, r3
    a2e0:	6860      	ldr	r0, [r4, #4]
    a2e2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2e6:	3078      	adds	r0, #120	; 0x78
    a2e8:	f003 fbbf 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2ec:	2500      	movs	r5, #0
    a2ee:	b110      	cbz	r0, a2f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    a2f0:	6860      	ldr	r0, [r4, #4]
    a2f2:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a2f6:	6860      	ldr	r0, [r4, #4]
    a2f8:	2300      	movs	r3, #0
    a2fa:	4619      	mov	r1, r3
    a2fc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a300:	3078      	adds	r0, #120	; 0x78
    a302:	f003 fbb2 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a306:	2800      	cmp	r0, #0
    a308:	d002      	beq.n	a310 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    a30a:	6860      	ldr	r0, [r4, #4]
    a30c:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a310:	bd70      	pop	{r4, r5, r6, pc}
    a312:	0000      	.short	0x0000
    a314:	2000011c 	.word	0x2000011c
    a318:	b570      	push	{r4, r5, r6, lr}
    a31a:	4d16      	ldr	r5, [pc, #88]	; (a374 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    a31c:	f04f 0400 	mov.w	r4, #0
    a320:	6868      	ldr	r0, [r5, #4]
    a322:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a326:	0789      	lsls	r1, r1, #30
    a328:	d411      	bmi.n	a34e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    a32a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a32e:	2300      	movs	r3, #0
    a330:	4619      	mov	r1, r3
    a332:	3078      	adds	r0, #120	; 0x78
    a334:	f003 fb99 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a338:	b120      	cbz	r0, a344 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    a33a:	6869      	ldr	r1, [r5, #4]
    a33c:	2001      	movs	r0, #1
    a33e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a342:	e008      	b.n	a356 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    a344:	f240 612b 	movw	r1, #1579	; 0x62b
    a348:	2036      	movs	r0, #54	; 0x36
    a34a:	f7f9 fd19 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a34e:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    a352:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    a356:	6868      	ldr	r0, [r5, #4]
    a358:	2300      	movs	r3, #0
    a35a:	4619      	mov	r1, r3
    a35c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a360:	3078      	adds	r0, #120	; 0x78
    a362:	f003 fb82 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a366:	2800      	cmp	r0, #0
    a368:	d002      	beq.n	a370 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    a36a:	6868      	ldr	r0, [r5, #4]
    a36c:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a370:	bd70      	pop	{r4, r5, r6, pc}
    a372:	0000      	.short	0x0000
    a374:	2000011c 	.word	0x2000011c
    a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a37a:	4d4c      	ldr	r5, [pc, #304]	; (a4ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    a37c:	4607      	mov	r7, r0
    a37e:	460e      	mov	r6, r1
    a380:	6868      	ldr	r0, [r5, #4]
    a382:	f100 0478 	add.w	r4, r0, #120	; 0x78
    a386:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    a38a:	f88d 0000 	strb.w	r0, [sp]
    a38e:	9800      	ldr	r0, [sp, #0]
    a390:	9000      	str	r0, [sp, #0]
    a392:	f89d 0000 	ldrb.w	r0, [sp]
    a396:	b930      	cbnz	r0, a3a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    a398:	7c22      	ldrb	r2, [r4, #16]
    a39a:	2300      	movs	r3, #0
    a39c:	2101      	movs	r1, #1
    a39e:	4620      	mov	r0, r4
    a3a0:	f003 fb63 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3a4:	b110      	cbz	r0, a3ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    a3a6:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    a3a8:	1c40      	adds	r0, r0, #1
    a3aa:	8760      	strh	r0, [r4, #58]	; 0x3a
    a3ac:	2001      	movs	r0, #1
    a3ae:	213d      	movs	r1, #61	; 0x3d
    a3b0:	bbf7      	cbnz	r7, a430 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    a3b2:	782a      	ldrb	r2, [r5, #0]
    a3b4:	2a02      	cmp	r2, #2
    a3b6:	d006      	beq.n	a3c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    a3b8:	2a01      	cmp	r2, #1
    a3ba:	d006      	beq.n	a3ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    a3bc:	b1c6      	cbz	r6, a3f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    a3be:	06f2      	lsls	r2, r6, #27
    a3c0:	d507      	bpl.n	a3d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    a3c2:	211e      	movs	r1, #30
    a3c4:	e043      	b.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3c6:	2116      	movs	r1, #22
    a3c8:	e041      	b.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3ca:	6869      	ldr	r1, [r5, #4]
    a3cc:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    a3d0:	e03d      	b.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3d2:	0732      	lsls	r2, r6, #28
    a3d4:	d43b      	bmi.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3d6:	07b1      	lsls	r1, r6, #30
    a3d8:	d001      	beq.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    a3da:	212a      	movs	r1, #42	; 0x2a
    a3dc:	e037      	b.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3de:	06b1      	lsls	r1, r6, #26
    a3e0:	d404      	bmi.n	a3ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    a3e2:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    a3e6:	2036      	movs	r0, #54	; 0x36
    a3e8:	f7f9 fcca 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3ec:	2123      	movs	r1, #35	; 0x23
    a3ee:	e02e      	b.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a3f0:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    a3f4:	b129      	cbz	r1, a402 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    a3f6:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    a3f8:	1c4a      	adds	r2, r1, #1
    a3fa:	87a2      	strh	r2, [r4, #60]	; 0x3c
    a3fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a3fe:	4291      	cmp	r1, r2
    a400:	d21d      	bcs.n	a43e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a402:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    a406:	b139      	cbz	r1, a418 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    a408:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    a40c:	1c4a      	adds	r2, r1, #1
    a40e:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    a412:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a414:	4291      	cmp	r1, r2
    a416:	d212      	bcs.n	a43e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a418:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    a41a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    a41c:	428a      	cmp	r2, r1
    a41e:	d30b      	bcc.n	a438 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    a420:	686b      	ldr	r3, [r5, #4]
    a422:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    a426:	f88d 3000 	strb.w	r3, [sp]
    a42a:	9b00      	ldr	r3, [sp, #0]
    a42c:	9300      	str	r3, [sp, #0]
    a42e:	e000      	b.n	a432 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    a430:	e00d      	b.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a432:	f89d 3000 	ldrb.w	r3, [sp]
    a436:	b913      	cbnz	r3, a43e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a438:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    a43a:	429a      	cmp	r2, r3
    a43c:	d301      	bcc.n	a442 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    a43e:	2122      	movs	r1, #34	; 0x22
    a440:	e005      	b.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a442:	7c62      	ldrb	r2, [r4, #17]
    a444:	b1f2      	cbz	r2, a484 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    a446:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    a448:	428a      	cmp	r2, r1
    a44a:	d304      	bcc.n	a456 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a44c:	2108      	movs	r1, #8
    a44e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    a452:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    a456:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a45a:	f88d 0000 	strb.w	r0, [sp]
    a45e:	9800      	ldr	r0, [sp, #0]
    a460:	9000      	str	r0, [sp, #0]
    a462:	f89d 0000 	ldrb.w	r0, [sp]
    a466:	b1d8      	cbz	r0, a4a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    a468:	2000      	movs	r0, #0
    a46a:	7360      	strb	r0, [r4, #13]
    a46c:	73a0      	strb	r0, [r4, #14]
    a46e:	7460      	strb	r0, [r4, #17]
    a470:	2102      	movs	r1, #2
    a472:	6868      	ldr	r0, [r5, #4]
    a474:	f7fd fa66 	bl	7944 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a478:	6868      	ldr	r0, [r5, #4]
    a47a:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    a47e:	2901      	cmp	r1, #1
    a480:	d005      	beq.n	a48e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    a482:	e009      	b.n	a498 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    a484:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    a486:	2906      	cmp	r1, #6
    a488:	d3e5      	bcc.n	a456 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a48a:	213e      	movs	r1, #62	; 0x3e
    a48c:	e7df      	b.n	a44e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a48e:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    a492:	7801      	ldrb	r1, [r0, #0]
    a494:	1e49      	subs	r1, r1, #1
    a496:	7001      	strb	r1, [r0, #0]
    a498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a49c:	f7fb bdb0 	b.w	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a4a0:	6868      	ldr	r0, [r5, #4]
    a4a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a4a6:	2100      	movs	r1, #0
    a4a8:	f7fd ba4c 	b.w	7944 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a4ac:	2000011c 	.word	0x2000011c
    a4b0:	4804      	ldr	r0, [pc, #16]	; (a4c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    a4b2:	b510      	push	{r4, lr}
    a4b4:	6840      	ldr	r0, [r0, #4]
    a4b6:	8800      	ldrh	r0, [r0, #0]
    a4b8:	f7fa f860 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a4c0:	f003 b800 	b.w	d4c4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a4c4:	2000011c 	.word	0x2000011c
    a4c8:	4a19      	ldr	r2, [pc, #100]	; (a530 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    a4ca:	2901      	cmp	r1, #1
    a4cc:	6852      	ldr	r2, [r2, #4]
    a4ce:	d010      	beq.n	a4f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    a4d0:	2100      	movs	r1, #0
    a4d2:	b1c8      	cbz	r0, a508 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    a4d4:	2801      	cmp	r0, #1
    a4d6:	d022      	beq.n	a51e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    a4d8:	2803      	cmp	r0, #3
    a4da:	d109      	bne.n	a4f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4dc:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a4e0:	2813      	cmp	r0, #19
    a4e2:	d005      	beq.n	a4f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4e4:	2816      	cmp	r0, #22
    a4e6:	d003      	beq.n	a4f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4e8:	2818      	cmp	r0, #24
    a4ea:	d001      	beq.n	a4f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4ec:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    a4f0:	4770      	bx	lr
    a4f2:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    a4f6:	2801      	cmp	r0, #1
    a4f8:	d0fa      	beq.n	a4f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a4fa:	bf00      	nop
    a4fc:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    a500:	7801      	ldrb	r1, [r0, #0]
    a502:	1e49      	subs	r1, r1, #1
    a504:	7001      	strb	r1, [r0, #0]
    a506:	4770      	bx	lr
    a508:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a50c:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    a510:	1ac0      	subs	r0, r0, r3
    a512:	b200      	sxth	r0, r0
    a514:	2800      	cmp	r0, #0
    a516:	dbf6      	blt.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    a518:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    a51c:	4770      	bx	lr
    a51e:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a522:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    a526:	1a40      	subs	r0, r0, r1
    a528:	b200      	sxth	r0, r0
    a52a:	2800      	cmp	r0, #0
    a52c:	dae6      	bge.n	a4fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    a52e:	4770      	bx	lr
    a530:	2000011c 	.word	0x2000011c

0000a534 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a534:	b510      	push	{r4, lr}
    a536:	6941      	ldr	r1, [r0, #20]
    a538:	b119      	cbz	r1, a542 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a53a:	6842      	ldr	r2, [r0, #4]
    a53c:	684b      	ldr	r3, [r1, #4]
    a53e:	429a      	cmp	r2, r3
    a540:	d203      	bcs.n	a54a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a542:	21c1      	movs	r1, #193	; 0xc1
    a544:	2037      	movs	r0, #55	; 0x37
    a546:	f7f9 fc1b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a54a:	6902      	ldr	r2, [r0, #16]
    a54c:	610a      	str	r2, [r1, #16]
    a54e:	68c3      	ldr	r3, [r0, #12]
    a550:	60cb      	str	r3, [r1, #12]
    a552:	b10a      	cbz	r2, a558 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    a554:	60d1      	str	r1, [r2, #12]
    a556:	e001      	b.n	a55c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    a558:	4a06      	ldr	r2, [pc, #24]	; (a574 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    a55a:	6011      	str	r1, [r2, #0]
    a55c:	68ca      	ldr	r2, [r1, #12]
    a55e:	b132      	cbz	r2, a56e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    a560:	6111      	str	r1, [r2, #16]
    a562:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    a566:	4410      	add	r0, r2
    a568:	684a      	ldr	r2, [r1, #4]
    a56a:	1a80      	subs	r0, r0, r2
    a56c:	e000      	b.n	a570 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    a56e:	2000      	movs	r0, #0
    a570:	6088      	str	r0, [r1, #8]
    a572:	bd10      	pop	{r4, pc}
    a574:	200001f4 	.word	0x200001f4

0000a578 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a578:	b510      	push	{r4, lr}
    a57a:	2200      	movs	r2, #0
    a57c:	6101      	str	r1, [r0, #16]
    a57e:	b189      	cbz	r1, a5a4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    a580:	68cb      	ldr	r3, [r1, #12]
    a582:	60c8      	str	r0, [r1, #12]
    a584:	60c3      	str	r3, [r0, #12]
    a586:	b103      	cbz	r3, a58a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a588:	6118      	str	r0, [r3, #16]
    a58a:	6901      	ldr	r1, [r0, #16]
    a58c:	6082      	str	r2, [r0, #8]
    a58e:	2900      	cmp	r1, #0
    a590:	d00f      	beq.n	a5b2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a592:	688b      	ldr	r3, [r1, #8]
    a594:	b163      	cbz	r3, a5b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    a596:	6844      	ldr	r4, [r0, #4]
    a598:	42a3      	cmp	r3, r4
    a59a:	d207      	bcs.n	a5ac <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    a59c:	212a      	movs	r1, #42	; 0x2a
    a59e:	2037      	movs	r0, #55	; 0x37
    a5a0:	f7f9 fbee 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5a4:	4903      	ldr	r1, [pc, #12]	; (a5b4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    a5a6:	60c2      	str	r2, [r0, #12]
    a5a8:	6008      	str	r0, [r1, #0]
    a5aa:	e7ee      	b.n	a58a <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a5ac:	1b1b      	subs	r3, r3, r4
    a5ae:	6083      	str	r3, [r0, #8]
    a5b0:	608a      	str	r2, [r1, #8]
    a5b2:	bd10      	pop	{r4, pc}
    a5b4:	200001f4 	.word	0x200001f4

0000a5b8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a5b8:	6901      	ldr	r1, [r0, #16]
    a5ba:	b149      	cbz	r1, a5d0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a5bc:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a5c0:	441a      	add	r2, r3
    a5c2:	688b      	ldr	r3, [r1, #8]
    a5c4:	441a      	add	r2, r3
    a5c6:	608a      	str	r2, [r1, #8]
    a5c8:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    a5cc:	60d1      	str	r1, [r2, #12]
    a5ce:	e002      	b.n	a5d6 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a5d0:	4a06      	ldr	r2, [pc, #24]	; (a5ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a5d2:	68c1      	ldr	r1, [r0, #12]
    a5d4:	6011      	str	r1, [r2, #0]
    a5d6:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    a5da:	b109      	cbz	r1, a5e0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    a5dc:	6108      	str	r0, [r1, #16]
    a5de:	4770      	bx	lr
    a5e0:	2800      	cmp	r0, #0
    a5e2:	d0fc      	beq.n	a5de <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    a5e4:	2100      	movs	r1, #0
    a5e6:	6081      	str	r1, [r0, #8]
    a5e8:	4770      	bx	lr
    a5ea:	0000      	.short	0x0000
    a5ec:	200001f4 	.word	0x200001f4

0000a5f0 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a5f0:	b510      	push	{r4, lr}
    a5f2:	4604      	mov	r4, r0
    a5f4:	490a      	ldr	r1, [pc, #40]	; (a620 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a5f6:	2000      	movs	r0, #0
    a5f8:	4602      	mov	r2, r0
    a5fa:	6809      	ldr	r1, [r1, #0]
    a5fc:	1e43      	subs	r3, r0, #1
    a5fe:	e008      	b.n	a612 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    a600:	688a      	ldr	r2, [r1, #8]
    a602:	42a2      	cmp	r2, r4
    a604:	d303      	bcc.n	a60e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a606:	429a      	cmp	r2, r3
    a608:	d201      	bcs.n	a60e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a60a:	4613      	mov	r3, r2
    a60c:	4608      	mov	r0, r1
    a60e:	460a      	mov	r2, r1
    a610:	68c9      	ldr	r1, [r1, #12]
    a612:	2900      	cmp	r1, #0
    a614:	d1f4      	bne.n	a600 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    a616:	2800      	cmp	r0, #0
    a618:	d100      	bne.n	a61c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    a61a:	4610      	mov	r0, r2
    a61c:	bd10      	pop	{r4, pc}
    a61e:	0000      	.short	0x0000
    a620:	200001f4 	.word	0x200001f4

0000a624 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    a624:	4801      	ldr	r0, [pc, #4]	; (a62c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    a626:	6800      	ldr	r0, [r0, #0]
    a628:	4770      	bx	lr
    a62a:	0000      	.short	0x0000
    a62c:	200001f4 	.word	0x200001f4

0000a630 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a630:	4804      	ldr	r0, [pc, #16]	; (a644 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    a632:	6801      	ldr	r1, [r0, #0]
    a634:	2000      	movs	r0, #0
    a636:	e001      	b.n	a63c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a638:	4608      	mov	r0, r1
    a63a:	68c9      	ldr	r1, [r1, #12]
    a63c:	2900      	cmp	r1, #0
    a63e:	d1fb      	bne.n	a638 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    a640:	4770      	bx	lr
    a642:	0000      	.short	0x0000
    a644:	200001f4 	.word	0x200001f4

0000a648 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a648:	4801      	ldr	r0, [pc, #4]	; (a650 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    a64a:	2100      	movs	r1, #0
    a64c:	6001      	str	r1, [r0, #0]
    a64e:	4770      	bx	lr
    a650:	200001f4 	.word	0x200001f4

0000a654 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a654:	4903      	ldr	r1, [pc, #12]	; (a664 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    a656:	2000      	movs	r0, #0
    a658:	6809      	ldr	r1, [r1, #0]
    a65a:	2900      	cmp	r1, #0
    a65c:	d000      	beq.n	a660 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    a65e:	200c      	movs	r0, #12
    a660:	4770      	bx	lr
    a662:	0000      	.short	0x0000
    a664:	200001f4 	.word	0x200001f4

0000a668 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    a668:	b500      	push	{lr}
    a66a:	7941      	ldrb	r1, [r0, #5]
    a66c:	b095      	sub	sp, #84	; 0x54
    a66e:	b141      	cbz	r1, a682 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a670:	2901      	cmp	r1, #1
    a672:	d006      	beq.n	a682 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a674:	2902      	cmp	r1, #2
    a676:	d004      	beq.n	a682 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a678:	2903      	cmp	r1, #3
    a67a:	d002      	beq.n	a682 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a67c:	2012      	movs	r0, #18
    a67e:	b015      	add	sp, #84	; 0x54
    a680:	bd00      	pop	{pc}
    a682:	7901      	ldrb	r1, [r0, #4]
    a684:	f88d 1000 	strb.w	r1, [sp]
    a688:	7b01      	ldrb	r1, [r0, #12]
    a68a:	f88d 1001 	strb.w	r1, [sp, #1]
    a68e:	7942      	ldrb	r2, [r0, #5]
    a690:	2100      	movs	r1, #0
    a692:	2301      	movs	r3, #1
    a694:	b3e2      	cbz	r2, a710 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    a696:	2a02      	cmp	r2, #2
    a698:	d03b      	beq.n	a712 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a69a:	f88d 3002 	strb.w	r3, [sp, #2]
    a69e:	bf00      	nop
    a6a0:	f8d0 2006 	ldr.w	r2, [r0, #6]
    a6a4:	f8cd 2003 	str.w	r2, [sp, #3]
    a6a8:	8942      	ldrh	r2, [r0, #10]
    a6aa:	f8ad 2007 	strh.w	r2, [sp, #7]
    a6ae:	f88d 3009 	strb.w	r3, [sp, #9]
    a6b2:	f830 2b01 	ldrh.w	r2, [r0], #1
    a6b6:	f240 2371 	movw	r3, #625	; 0x271
    a6ba:	435a      	muls	r2, r3
    a6bc:	9203      	str	r2, [sp, #12]
    a6be:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    a6c2:	435a      	muls	r2, r3
    a6c4:	9206      	str	r2, [sp, #24]
    a6c6:	8982      	ldrh	r2, [r0, #12]
    a6c8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    a6cc:	89c2      	ldrh	r2, [r0, #14]
    a6ce:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a6d2:	8a02      	ldrh	r2, [r0, #16]
    a6d4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    a6d8:	8a42      	ldrh	r2, [r0, #18]
    a6da:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    a6de:	8a82      	ldrh	r2, [r0, #20]
    a6e0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    a6e4:	8ac0      	ldrh	r0, [r0, #22]
    a6e6:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    a6ea:	2007      	movs	r0, #7
    a6ec:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    a6f0:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    a6f4:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    a6f8:	9806      	ldr	r0, [sp, #24]
    a6fa:	f000 fb95 	bl	ae28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    a6fe:	b158      	cbz	r0, a718 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a700:	9803      	ldr	r0, [sp, #12]
    a702:	f000 fb85 	bl	ae10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    a706:	b138      	cbz	r0, a718 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a708:	4668      	mov	r0, sp
    a70a:	f000 f89f 	bl	a84c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    a70e:	e7b6      	b.n	a67e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    a710:	e7ff      	b.n	a712 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a712:	f88d 1002 	strb.w	r1, [sp, #2]
    a716:	e7c3      	b.n	a6a0 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    a718:	2030      	movs	r0, #48	; 0x30
    a71a:	e7b0      	b.n	a67e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000a71c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a71c:	4903      	ldr	r1, [pc, #12]	; (a72c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a71e:	884a      	ldrh	r2, [r1, #2]
    a720:	8002      	strh	r2, [r0, #0]
    a722:	7809      	ldrb	r1, [r1, #0]
    a724:	7081      	strb	r1, [r0, #2]
    a726:	2000      	movs	r0, #0
    a728:	4770      	bx	lr
    a72a:	0000      	.short	0x0000
    a72c:	2000104c 	.word	0x2000104c

0000a730 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a730:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a732:	460c      	mov	r4, r1
    a734:	4605      	mov	r5, r0
    a736:	8800      	ldrh	r0, [r0, #0]
    a738:	4669      	mov	r1, sp
    a73a:	f003 f93c 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a73e:	0001      	movs	r1, r0
    a740:	f04f 0000 	mov.w	r0, #0
    a744:	d005      	beq.n	a752 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    a746:	f8c4 0002 	str.w	r0, [r4, #2]
    a74a:	71a0      	strb	r0, [r4, #6]
    a74c:	8020      	strh	r0, [r4, #0]
    a74e:	2002      	movs	r0, #2
    a750:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a752:	9901      	ldr	r1, [sp, #4]
    a754:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    a758:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    a75c:	f8d1 2016 	ldr.w	r2, [r1, #22]
    a760:	f8c4 2002 	str.w	r2, [r4, #2]
    a764:	7e8a      	ldrb	r2, [r1, #26]
    a766:	71a2      	strb	r2, [r4, #6]
    a768:	882a      	ldrh	r2, [r5, #0]
    a76a:	8022      	strh	r2, [r4, #0]
    a76c:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    a770:	f88d 2008 	strb.w	r2, [sp, #8]
    a774:	9a02      	ldr	r2, [sp, #8]
    a776:	9202      	str	r2, [sp, #8]
    a778:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a77c:	2a00      	cmp	r2, #0
    a77e:	d1eb      	bne.n	a758 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    a780:	2000      	movs	r0, #0
    a782:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a784 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a784:	b51c      	push	{r2, r3, r4, lr}
    a786:	8800      	ldrh	r0, [r0, #0]
    a788:	4669      	mov	r1, sp
    a78a:	f003 f914 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a78e:	2800      	cmp	r0, #0
    a790:	d106      	bne.n	a7a0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    a792:	f89d 0000 	ldrb.w	r0, [sp]
    a796:	b120      	cbz	r0, a7a2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    a798:	480b      	ldr	r0, [pc, #44]	; (a7c8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    a79a:	7800      	ldrb	r0, [r0, #0]
    a79c:	b190      	cbz	r0, a7c4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    a79e:	2002      	movs	r0, #2
    a7a0:	bd1c      	pop	{r2, r3, r4, pc}
    a7a2:	9801      	ldr	r0, [sp, #4]
    a7a4:	f004 ff79 	bl	f69a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    a7a8:	2800      	cmp	r0, #0
    a7aa:	d0f8      	beq.n	a79e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    a7ac:	9801      	ldr	r0, [sp, #4]
    a7ae:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    a7b2:	b108      	cbz	r0, a7b8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    a7b4:	203a      	movs	r0, #58	; 0x3a
    a7b6:	bd1c      	pop	{r2, r3, r4, pc}
    a7b8:	9901      	ldr	r1, [sp, #4]
    a7ba:	2001      	movs	r0, #1
    a7bc:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    a7c0:	2000      	movs	r0, #0
    a7c2:	bd1c      	pop	{r2, r3, r4, pc}
    a7c4:	2011      	movs	r0, #17
    a7c6:	bd1c      	pop	{r2, r3, r4, pc}
    a7c8:	200001f8 	.word	0x200001f8

0000a7cc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a7cc:	b510      	push	{r4, lr}
    a7ce:	4604      	mov	r4, r0
    a7d0:	f004 ff5a 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    a7d4:	b130      	cbz	r0, a7e4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a7d6:	4804      	ldr	r0, [pc, #16]	; (a7e8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a7d8:	8881      	ldrh	r1, [r0, #4]
    a7da:	8021      	strh	r1, [r4, #0]
    a7dc:	88c0      	ldrh	r0, [r0, #6]
    a7de:	8060      	strh	r0, [r4, #2]
    a7e0:	2000      	movs	r0, #0
    a7e2:	bd10      	pop	{r4, pc}
    a7e4:	2001      	movs	r0, #1
    a7e6:	bd10      	pop	{r4, pc}
    a7e8:	20000206 	.word	0x20000206

0000a7ec <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a7ec:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a7ee:	4605      	mov	r5, r0
    a7f0:	f000 fbf8 	bl	afe4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a7f4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a7f8:	b310      	cbz	r0, a840 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a7fa:	2400      	movs	r4, #0
    a7fc:	a802      	add	r0, sp, #8
    a7fe:	f88d 4004 	strb.w	r4, [sp, #4]
    a802:	f88d 4008 	strb.w	r4, [sp, #8]
    a806:	9000      	str	r0, [sp, #0]
    a808:	78aa      	ldrb	r2, [r5, #2]
    a80a:	7869      	ldrb	r1, [r5, #1]
    a80c:	7828      	ldrb	r0, [r5, #0]
    a80e:	ab01      	add	r3, sp, #4
    a810:	f004 ffe7 	bl	f7e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    a814:	2800      	cmp	r0, #0
    a816:	d112      	bne.n	a83e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a818:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a81c:	f004 fd5e 	bl	f2dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a820:	b180      	cbz	r0, a844 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a822:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a826:	f004 fd59 	bl	f2dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a82a:	b158      	cbz	r0, a844 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a82c:	4806      	ldr	r0, [pc, #24]	; (a848 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a82e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a832:	7381      	strb	r1, [r0, #14]
    a834:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a838:	73c1      	strb	r1, [r0, #15]
    a83a:	8204      	strh	r4, [r0, #16]
    a83c:	2000      	movs	r0, #0
    a83e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a840:	2001      	movs	r0, #1
    a842:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a844:	2011      	movs	r0, #17
    a846:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a848:	2000104c 	.word	0x2000104c

0000a84c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a850:	a1a4      	add	r1, pc, #656	; (adr r1, aae4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    a852:	4605      	mov	r5, r0
    a854:	e9d1 8700 	ldrd	r8, r7, [r1]
    a858:	7a40      	ldrb	r0, [r0, #9]
    a85a:	b08d      	sub	sp, #52	; 0x34
    a85c:	0781      	lsls	r1, r0, #30
    a85e:	d502      	bpl.n	a866 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    a860:	f040 0001 	orr.w	r0, r0, #1
    a864:	7268      	strb	r0, [r5, #9]
    a866:	4628      	mov	r0, r5
    a868:	f004 fd97 	bl	f39a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    a86c:	2800      	cmp	r0, #0
    a86e:	d10c      	bne.n	a88a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a870:	f004 ff2e 	bl	f6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    a874:	b940      	cbnz	r0, a888 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a876:	f7fb fbbd 	bl	5ff4 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    a87a:	b928      	cbnz	r0, a888 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a87c:	f7fb fe76 	bl	656c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a880:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a884:	39ff      	subs	r1, #255	; 0xff
    a886:	d003      	beq.n	a890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    a888:	200c      	movs	r0, #12
    a88a:	b00d      	add	sp, #52	; 0x34
    a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a890:	7828      	ldrb	r0, [r5, #0]
    a892:	f04f 0b00 	mov.w	fp, #0
    a896:	f04f 0a01 	mov.w	sl, #1
    a89a:	b9e0      	cbnz	r0, a8d6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8a>
    a89c:	f895 9002 	ldrb.w	r9, [r5, #2]
    a8a0:	1cee      	adds	r6, r5, #3
    a8a2:	a909      	add	r1, sp, #36	; 0x24
    a8a4:	2000      	movs	r0, #0
    a8a6:	f002 ff25 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a8aa:	b178      	cbz	r0, a8cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    a8ac:	f240 2109 	movw	r1, #521	; 0x209
    a8b0:	e112      	b.n	aad8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    a8b2:	4648      	mov	r0, r9
    a8b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a8b6:	f004 f926 	bl	eb06 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a8ba:	78a1      	ldrb	r1, [r4, #2]
    a8bc:	4288      	cmp	r0, r1
    a8be:	d105      	bne.n	a8cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    a8c0:	2206      	movs	r2, #6
    a8c2:	4631      	mov	r1, r6
    a8c4:	1ce0      	adds	r0, r4, #3
    a8c6:	f001 fe59 	bl	c57c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    a8ca:	b328      	cbz	r0, a918 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    a8cc:	a809      	add	r0, sp, #36	; 0x24
    a8ce:	f7f9 fc87 	bl	41e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a8d2:	2800      	cmp	r0, #0
    a8d4:	d0ed      	beq.n	a8b2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    a8d6:	2103      	movs	r1, #3
    a8d8:	f105 0018 	add.w	r0, r5, #24
    a8dc:	f000 fab0 	bl	ae40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    a8e0:	2200      	movs	r2, #0
    a8e2:	4611      	mov	r1, r2
    a8e4:	a802      	add	r0, sp, #8
    a8e6:	f7f9 fca1 	bl	422c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a8ea:	0004      	movs	r4, r0
    a8ec:	d016      	beq.n	a91c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    a8ee:	2100      	movs	r1, #0
    a8f0:	f7fb f948 	bl	5b84 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    a8f4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    a8f8:	8020      	strh	r0, [r4, #0]
    a8fa:	487c      	ldr	r0, [pc, #496]	; (aaec <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    a8fc:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    a900:	f004 fec2 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    a904:	497a      	ldr	r1, [pc, #488]	; (aaf0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a4>)
    a906:	2800      	cmp	r0, #0
    a908:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a90c:	d008      	beq.n	a920 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    a90e:	884b      	ldrh	r3, [r1, #2]
    a910:	888a      	ldrh	r2, [r1, #4]
    a912:	84c3      	strh	r3, [r0, #38]	; 0x26
    a914:	8502      	strh	r2, [r0, #40]	; 0x28
    a916:	e006      	b.n	a926 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    a918:	200b      	movs	r0, #11
    a91a:	e7b6      	b.n	a88a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a91c:	2009      	movs	r0, #9
    a91e:	e7b4      	b.n	a88a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a920:	221b      	movs	r2, #27
    a922:	84c2      	strh	r2, [r0, #38]	; 0x26
    a924:	8502      	strh	r2, [r0, #40]	; 0x28
    a926:	4689      	mov	r9, r1
    a928:	4608      	mov	r0, r1
    a92a:	7849      	ldrb	r1, [r1, #1]
    a92c:	9100      	str	r1, [sp, #0]
    a92e:	7803      	ldrb	r3, [r0, #0]
    a930:	8882      	ldrh	r2, [r0, #4]
    a932:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    a936:	8820      	ldrh	r0, [r4, #0]
    a938:	f7f9 fd5a 	bl	43f0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a93c:	b110      	cbz	r0, a944 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf8>
    a93e:	f640 6199 	movw	r1, #3737	; 0xe99
    a942:	e0c9      	b.n	aad8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    a944:	f003 fd71 	bl	e42a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    a948:	6120      	str	r0, [r4, #16]
    a94a:	a06a      	add	r0, pc, #424	; (adr r0, aaf4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a8>)
    a94c:	f104 0618 	add.w	r6, r4, #24
    a950:	6800      	ldr	r0, [r0, #0]
    a952:	9000      	str	r0, [sp, #0]
    a954:	2103      	movs	r1, #3
    a956:	4668      	mov	r0, sp
    a958:	f7f9 faae 	bl	3eb8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    a95c:	2000      	movs	r0, #0
    a95e:	4669      	mov	r1, sp
    a960:	5c0a      	ldrb	r2, [r1, r0]
    a962:	5432      	strb	r2, [r6, r0]
    a964:	1c40      	adds	r0, r0, #1
    a966:	b2c0      	uxtb	r0, r0
    a968:	2803      	cmp	r0, #3
    a96a:	d3f9      	bcc.n	a960 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x114>
    a96c:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    a96e:	f003 f82e 	bl	d9ce <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a972:	60e0      	str	r0, [r4, #12]
    a974:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    a976:	82a0      	strh	r0, [r4, #20]
    a978:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    a97a:	82e0      	strh	r0, [r4, #22]
    a97c:	7a68      	ldrb	r0, [r5, #9]
    a97e:	f004 fc8c 	bl	f29a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    a982:	f8d9 1008 	ldr.w	r1, [r9, #8]
    a986:	464e      	mov	r6, r9
    a988:	4620      	mov	r0, r4
    a98a:	62e1      	str	r1, [r4, #44]	; 0x2c
    a98c:	f003 fee2 	bl	e754 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    a990:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    a994:	46d1      	mov	r9, sl
    a996:	4650      	mov	r0, sl
    a998:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    a99c:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    a9a0:	4852      	ldr	r0, [pc, #328]	; (aaec <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    a9a2:	3808      	subs	r0, #8
    a9a4:	6843      	ldr	r3, [r0, #4]
    a9a6:	b123      	cbz	r3, a9b2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x166>
    a9a8:	2201      	movs	r2, #1
    a9aa:	f504 7199 	add.w	r1, r4, #306	; 0x132
    a9ae:	4620      	mov	r0, r4
    a9b0:	4798      	blx	r3
    a9b2:	8821      	ldrh	r1, [r4, #0]
    a9b4:	f8ad 1014 	strh.w	r1, [sp, #20]
    a9b8:	7bb1      	ldrb	r1, [r6, #14]
    a9ba:	f88d 1016 	strb.w	r1, [sp, #22]
    a9be:	7bf1      	ldrb	r1, [r6, #15]
    a9c0:	f88d 1017 	strb.w	r1, [sp, #23]
    a9c4:	8a31      	ldrh	r1, [r6, #16]
    a9c6:	f8ad 1018 	strh.w	r1, [sp, #24]
    a9ca:	a908      	add	r1, sp, #32
    a9cc:	9100      	str	r1, [sp, #0]
    a9ce:	2000      	movs	r0, #0
    a9d0:	ab07      	add	r3, sp, #28
    a9d2:	aa05      	add	r2, sp, #20
    a9d4:	4621      	mov	r1, r4
    a9d6:	f004 fe18 	bl	f60a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    a9da:	0006      	movs	r6, r0
    a9dc:	d10f      	bne.n	a9fe <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b2>
    a9de:	f89d 001c 	ldrb.w	r0, [sp, #28]
    a9e2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    a9e6:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a9ea:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    a9ee:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    a9f2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    a9f6:	a909      	add	r1, sp, #36	; 0x24
    a9f8:	4620      	mov	r0, r4
    a9fa:	f003 f8d6 	bl	dbaa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a9fe:	46d8      	mov	r8, fp
    aa00:	f88d b00c 	strb.w	fp, [sp, #12]
    aa04:	2101      	movs	r1, #1
    aa06:	a803      	add	r0, sp, #12
    aa08:	f7f9 fa56 	bl	3eb8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    aa0c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    aa10:	f000 0107 	and.w	r1, r0, #7
    aa14:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    aa18:	4411      	add	r1, r2
    aa1a:	f3c0 1040 	ubfx	r0, r0, #5, #1
    aa1e:	4408      	add	r0, r1
    aa20:	f88d 000c 	strb.w	r0, [sp, #12]
    aa24:	1d40      	adds	r0, r0, #5
    aa26:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    aa2a:	2809      	cmp	r0, #9
    aa2c:	d202      	bcs.n	aa34 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e8>
    aa2e:	3008      	adds	r0, #8
    aa30:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    aa34:	2101      	movs	r1, #1
    aa36:	4620      	mov	r0, r4
    aa38:	f7fb f8a4 	bl	5b84 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    aa3c:	7868      	ldrb	r0, [r5, #1]
    aa3e:	f7fb fe69 	bl	6714 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    aa42:	bbee      	cbnz	r6, aac0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    aa44:	78a9      	ldrb	r1, [r5, #2]
    aa46:	7828      	ldrb	r0, [r5, #0]
    aa48:	1cea      	adds	r2, r5, #3
    aa4a:	f7fb fe0d 	bl	6668 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    aa4e:	b148      	cbz	r0, aa64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x218>
    aa50:	f7fb fd34 	bl	64bc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    aa54:	78a9      	ldrb	r1, [r5, #2]
    aa56:	7828      	ldrb	r0, [r5, #0]
    aa58:	1cea      	adds	r2, r5, #3
    aa5a:	f7fb fe29 	bl	66b0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    aa5e:	0006      	movs	r6, r0
    aa60:	d002      	beq.n	aa68 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21c>
    aa62:	e02f      	b.n	aac4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa64:	2612      	movs	r6, #18
    aa66:	e02d      	b.n	aac4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa68:	78a8      	ldrb	r0, [r5, #2]
    aa6a:	f004 f84c 	bl	eb06 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    aa6e:	4602      	mov	r2, r0
    aa70:	1ceb      	adds	r3, r5, #3
    aa72:	4621      	mov	r1, r4
    aa74:	2003      	movs	r0, #3
    aa76:	f7fb fd63 	bl	6540 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    aa7a:	0006      	movs	r6, r0
    aa7c:	d122      	bne.n	aac4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa7e:	464f      	mov	r7, r9
    aa80:	4648      	mov	r0, r9
    aa82:	f7fb fdbb 	bl	65fc <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    aa86:	0006      	movs	r6, r0
    aa88:	d11c      	bne.n	aac4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aa8a:	f88d 800c 	strb.w	r8, [sp, #12]
    aa8e:	7a68      	ldrb	r0, [r5, #9]
    aa90:	07c0      	lsls	r0, r0, #31
    aa92:	d005      	beq.n	aaa0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x254>
    aa94:	68e8      	ldr	r0, [r5, #12]
    aa96:	9004      	str	r0, [sp, #16]
    aa98:	69a8      	ldr	r0, [r5, #24]
    aa9a:	9005      	str	r0, [sp, #20]
    aa9c:	f88d 700c 	strb.w	r7, [sp, #12]
    aaa0:	a803      	add	r0, sp, #12
    aaa2:	f7fd f913 	bl	7ccc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    aaa6:	4606      	mov	r6, r0
    aaa8:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    aaac:	f7fb fea6 	bl	67fc <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    aab0:	b936      	cbnz	r6, aac0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    aab2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    aab6:	4620      	mov	r0, r4
    aab8:	f7fd f82a 	bl	7b10 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    aabc:	0006      	movs	r6, r0
    aabe:	e000      	b.n	aac2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x276>
    aac0:	e000      	b.n	aac4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aac2:	d00c      	beq.n	aade <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    aac4:	8820      	ldrh	r0, [r4, #0]
    aac6:	f002 fe74 	bl	d7b2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    aaca:	8820      	ldrh	r0, [r4, #0]
    aacc:	2100      	movs	r1, #0
    aace:	f7f9 fbd5 	bl	427c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    aad2:	b120      	cbz	r0, aade <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    aad4:	f640 715f 	movw	r1, #3935	; 0xf5f
    aad8:	2039      	movs	r0, #57	; 0x39
    aada:	f7f9 f951 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aade:	4630      	mov	r0, r6
    aae0:	e6d3      	b.n	a88a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aae2:	0000      	.short	0x0000
    aae4:	ffffffff 	.word	0xffffffff
    aae8:	0000001f 	.word	0x0000001f
    aaec:	20000200 	.word	0x20000200
    aaf0:	2000104c 	.word	0x2000104c
    aaf4:	00332211 	.word	0x00332211

0000aaf8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    aaf8:	7801      	ldrb	r1, [r0, #0]
    aafa:	b171      	cbz	r1, ab1a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    aafc:	7841      	ldrb	r1, [r0, #1]
    aafe:	b161      	cbz	r1, ab1a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab00:	8841      	ldrh	r1, [r0, #2]
    ab02:	291b      	cmp	r1, #27
    ab04:	d309      	bcc.n	ab1a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab06:	8881      	ldrh	r1, [r0, #4]
    ab08:	291b      	cmp	r1, #27
    ab0a:	d306      	bcc.n	ab1a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab0c:	4904      	ldr	r1, [pc, #16]	; (ab20 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ab0e:	6802      	ldr	r2, [r0, #0]
    ab10:	600a      	str	r2, [r1, #0]
    ab12:	8880      	ldrh	r0, [r0, #4]
    ab14:	8088      	strh	r0, [r1, #4]
    ab16:	2000      	movs	r0, #0
    ab18:	4770      	bx	lr
    ab1a:	2012      	movs	r0, #18
    ab1c:	4770      	bx	lr
    ab1e:	0000      	.short	0x0000
    ab20:	2000104c 	.word	0x2000104c

0000ab24 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ab24:	6800      	ldr	r0, [r0, #0]
    ab26:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ab2a:	4288      	cmp	r0, r1
    ab2c:	d303      	bcc.n	ab36 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ab2e:	4903      	ldr	r1, [pc, #12]	; (ab3c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ab30:	6088      	str	r0, [r1, #8]
    ab32:	2000      	movs	r0, #0
    ab34:	4770      	bx	lr
    ab36:	2012      	movs	r0, #18
    ab38:	4770      	bx	lr
    ab3a:	0000      	.short	0x0000
    ab3c:	2000104c 	.word	0x2000104c

0000ab40 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    ab40:	b510      	push	{r4, lr}
    ab42:	b086      	sub	sp, #24
    ab44:	4604      	mov	r4, r0
    ab46:	f004 fc9f 	bl	f488 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    ab4a:	2800      	cmp	r0, #0
    ab4c:	d103      	bne.n	ab56 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab4e:	f004 fdbf 	bl	f6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    ab52:	b110      	cbz	r0, ab5a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    ab54:	200c      	movs	r0, #12
    ab56:	b006      	add	sp, #24
    ab58:	bd10      	pop	{r4, pc}
    ab5a:	2102      	movs	r1, #2
    ab5c:	f104 0010 	add.w	r0, r4, #16
    ab60:	f000 f96e 	bl	ae40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    ab64:	78a0      	ldrb	r0, [r4, #2]
    ab66:	f88d 0008 	strb.w	r0, [sp, #8]
    ab6a:	78a0      	ldrb	r0, [r4, #2]
    ab6c:	f88d 0000 	strb.w	r0, [sp]
    ab70:	7860      	ldrb	r0, [r4, #1]
    ab72:	f88d 0003 	strb.w	r0, [sp, #3]
    ab76:	7820      	ldrb	r0, [r4, #0]
    ab78:	f88d 0002 	strb.w	r0, [sp, #2]
    ab7c:	7e20      	ldrb	r0, [r4, #24]
    ab7e:	f88d 0004 	strb.w	r0, [sp, #4]
    ab82:	78a0      	ldrb	r0, [r4, #2]
    ab84:	07c0      	lsls	r0, r0, #31
    ab86:	d00b      	beq.n	aba0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    ab88:	78e0      	ldrb	r0, [r4, #3]
    ab8a:	2801      	cmp	r0, #1
    ab8c:	d011      	beq.n	abb2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    ab8e:	b190      	cbz	r0, abb6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    ab90:	f05f 0000 	movs.w	r0, #0
    ab94:	f88d 0001 	strb.w	r0, [sp, #1]
    ab98:	68a0      	ldr	r0, [r4, #8]
    ab9a:	9003      	str	r0, [sp, #12]
    ab9c:	6920      	ldr	r0, [r4, #16]
    ab9e:	9004      	str	r0, [sp, #16]
    aba0:	a802      	add	r0, sp, #8
    aba2:	f7fd f893 	bl	7ccc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    aba6:	2800      	cmp	r0, #0
    aba8:	d1d5      	bne.n	ab56 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    abaa:	4668      	mov	r0, sp
    abac:	f7fb fe2e 	bl	680c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    abb0:	e7d1      	b.n	ab56 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    abb2:	2002      	movs	r0, #2
    abb4:	e7ee      	b.n	ab94 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    abb6:	2001      	movs	r0, #1
    abb8:	e7ec      	b.n	ab94 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000abbc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    abbc:	4a03      	ldr	r2, [pc, #12]	; (abcc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    abbe:	e9d2 1200 	ldrd	r1, r2, [r2]
    abc2:	6001      	str	r1, [r0, #0]
    abc4:	6042      	str	r2, [r0, #4]
    abc6:	2000      	movs	r0, #0
    abc8:	4770      	bx	lr
    abca:	0000      	.short	0x0000
    abcc:	0000aecc 	.word	0x0000aecc

0000abd0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    abd0:	b510      	push	{r4, lr}
    abd2:	2005      	movs	r0, #5
    abd4:	f000 f9fc 	bl	afd0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    abd8:	f7fd fe48 	bl	886c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    abdc:	4902      	ldr	r1, [pc, #8]	; (abe8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    abde:	4801      	ldr	r0, [pc, #4]	; (abe4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    abe0:	6048      	str	r0, [r1, #4]
    abe2:	bd10      	pop	{r4, pc}
    abe4:	0000ad15 	.word	0x0000ad15
    abe8:	200001f8 	.word	0x200001f8

0000abec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    abec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abf0:	b086      	sub	sp, #24
    abf2:	468a      	mov	sl, r1
    abf4:	4606      	mov	r6, r0
    abf6:	8800      	ldrh	r0, [r0, #0]
    abf8:	a901      	add	r1, sp, #4
    abfa:	f002 fedc 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    abfe:	2800      	cmp	r0, #0
    ac00:	d139      	bne.n	ac76 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ac02:	9802      	ldr	r0, [sp, #8]
    ac04:	f04f 0801 	mov.w	r8, #1
    ac08:	4601      	mov	r1, r0
    ac0a:	4689      	mov	r9, r1
    ac0c:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    ac10:	f88d 1000 	strb.w	r1, [sp]
    ac14:	9900      	ldr	r1, [sp, #0]
    ac16:	9100      	str	r1, [sp, #0]
    ac18:	f89d 5000 	ldrb.w	r5, [sp]
    ac1c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ac20:	3078      	adds	r0, #120	; 0x78
    ac22:	2921      	cmp	r1, #33	; 0x21
    ac24:	d100      	bne.n	ac28 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ac26:	b13d      	cbz	r5, ac38 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ac28:	2400      	movs	r4, #0
    ac2a:	304e      	adds	r0, #78	; 0x4e
    ac2c:	2108      	movs	r1, #8
    ac2e:	4607      	mov	r7, r0
    ac30:	f003 ff5f 	bl	eaf2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ac34:	b110      	cbz	r0, ac3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ac36:	e007      	b.n	ac48 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ac38:	2401      	movs	r4, #1
    ac3a:	e7f6      	b.n	ac2a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ac3c:	210b      	movs	r1, #11
    ac3e:	4638      	mov	r0, r7
    ac40:	f003 ff57 	bl	eaf2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ac44:	b900      	cbnz	r0, ac48 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ac46:	b1ac      	cbz	r4, ac74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ac48:	a804      	add	r0, sp, #16
    ac4a:	9000      	str	r0, [sp, #0]
    ac4c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ac50:	ab03      	add	r3, sp, #12
    ac52:	4632      	mov	r2, r6
    ac54:	4649      	mov	r1, r9
    ac56:	f004 fcd8 	bl	f60a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ac5a:	0007      	movs	r7, r0
    ac5c:	d10b      	bne.n	ac76 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ac5e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ac62:	9c02      	ldr	r4, [sp, #8]
    ac64:	b150      	cbz	r0, ac7c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    ac66:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    ac6a:	bf00      	nop
    ac6c:	f884 8001 	strb.w	r8, [r4, #1]
    ac70:	b94d      	cbnz	r5, ac86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    ac72:	e006      	b.n	ac82 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    ac74:	201a      	movs	r0, #26
    ac76:	b006      	add	sp, #24
    ac78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac7c:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    ac80:	e7f4      	b.n	ac6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    ac82:	7820      	ldrb	r0, [r4, #0]
    ac84:	b108      	cbz	r0, ac8a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    ac86:	273a      	movs	r7, #58	; 0x3a
    ac88:	e012      	b.n	acb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    ac8a:	f884 a000 	strb.w	sl, [r4]
    ac8e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ac92:	70a0      	strb	r0, [r4, #2]
    ac94:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ac98:	70e1      	strb	r1, [r4, #3]
    ac9a:	f88d 0000 	strb.w	r0, [sp]
    ac9e:	f88d 1001 	strb.w	r1, [sp, #1]
    aca2:	88b0      	ldrh	r0, [r6, #4]
    aca4:	f8ad 0002 	strh.w	r0, [sp, #2]
    aca8:	4669      	mov	r1, sp
    acaa:	4648      	mov	r0, r9
    acac:	f002 ff7d 	bl	dbaa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    acb0:	2000      	movs	r0, #0
    acb2:	7060      	strb	r0, [r4, #1]
    acb4:	4638      	mov	r0, r7
    acb6:	e7de      	b.n	ac76 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000acb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    acb8:	b510      	push	{r4, lr}
    acba:	f002 fd8e 	bl	d7da <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    acbe:	f7fa fd07 	bl	56d0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    acc2:	f000 f99f 	bl	b004 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    acc6:	f003 fa5b 	bl	e180 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    acca:	4810      	ldr	r0, [pc, #64]	; (ad0c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    accc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    acd0:	4b0f      	ldr	r3, [pc, #60]	; (ad10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    acd2:	8281      	strh	r1, [r0, #20]
    acd4:	2100      	movs	r1, #0
    acd6:	7581      	strb	r1, [r0, #22]
    acd8:	8301      	strh	r1, [r0, #24]
    acda:	221b      	movs	r2, #27
    acdc:	801a      	strh	r2, [r3, #0]
    acde:	f44f 74a4 	mov.w	r4, #328	; 0x148
    ace2:	805c      	strh	r4, [r3, #2]
    ace4:	809a      	strh	r2, [r3, #4]
    ace6:	80dc      	strh	r4, [r3, #6]
    ace8:	7381      	strb	r1, [r0, #14]
    acea:	73c1      	strb	r1, [r0, #15]
    acec:	2303      	movs	r3, #3
    acee:	7003      	strb	r3, [r0, #0]
    acf0:	2302      	movs	r3, #2
    acf2:	7043      	strb	r3, [r0, #1]
    acf4:	8042      	strh	r2, [r0, #2]
    acf6:	8082      	strh	r2, [r0, #4]
    acf8:	f640 62a6 	movw	r2, #3750	; 0xea6
    acfc:	6082      	str	r2, [r0, #8]
    acfe:	4a04      	ldr	r2, [pc, #16]	; (ad10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    ad00:	1f92      	subs	r2, r2, #6
    ad02:	7011      	strb	r1, [r2, #0]
    ad04:	7481      	strb	r1, [r0, #18]
    ad06:	7301      	strb	r1, [r0, #12]
    ad08:	bd10      	pop	{r4, pc}
    ad0a:	0000      	.short	0x0000
    ad0c:	2000104c 	.word	0x2000104c
    ad10:	20000206 	.word	0x20000206
    ad14:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad18:	4692      	mov	sl, r2
    ad1a:	460f      	mov	r7, r1
    ad1c:	4681      	mov	r9, r0
    ad1e:	f004 fcb3 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ad22:	2800      	cmp	r0, #0
    ad24:	d063      	beq.n	adee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ad26:	4933      	ldr	r1, [pc, #204]	; (adf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13c>)
    ad28:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    ad2c:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    ad30:	8808      	ldrh	r0, [r1, #0]
    ad32:	4290      	cmp	r0, r2
    ad34:	d300      	bcc.n	ad38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    ad36:	4610      	mov	r0, r2
    ad38:	4680      	mov	r8, r0
    ad3a:	8888      	ldrh	r0, [r1, #4]
    ad3c:	42b0      	cmp	r0, r6
    ad3e:	d200      	bcs.n	ad42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8a>
    ad40:	4606      	mov	r6, r0
    ad42:	884c      	ldrh	r4, [r1, #2]
    ad44:	f640 0048 	movw	r0, #2120	; 0x848
    ad48:	4284      	cmp	r4, r0
    ad4a:	d300      	bcc.n	ad4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    ad4c:	4604      	mov	r4, r0
    ad4e:	88cd      	ldrh	r5, [r1, #6]
    ad50:	4285      	cmp	r5, r0
    ad52:	d300      	bcc.n	ad56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    ad54:	4605      	mov	r5, r0
    ad56:	4284      	cmp	r4, r0
    ad58:	d300      	bcc.n	ad5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    ad5a:	4604      	mov	r4, r0
    ad5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ad60:	2e1b      	cmp	r6, #27
    ad62:	d001      	beq.n	ad68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    ad64:	428d      	cmp	r5, r1
    ad66:	d104      	bne.n	ad72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xba>
    ad68:	f1b8 0f1b 	cmp.w	r8, #27
    ad6c:	d03f      	beq.n	adee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ad6e:	428c      	cmp	r4, r1
    ad70:	d03d      	beq.n	adee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ad72:	466a      	mov	r2, sp
    ad74:	4651      	mov	r1, sl
    ad76:	4648      	mov	r0, r9
    ad78:	f004 fc11 	bl	f59e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    ad7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ad80:	4641      	mov	r1, r8
    ad82:	4540      	cmp	r0, r8
    ad84:	d900      	bls.n	ad88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd0>
    ad86:	4608      	mov	r0, r1
    ad88:	80f8      	strh	r0, [r7, #6]
    ad8a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ad8e:	42a1      	cmp	r1, r4
    ad90:	d800      	bhi.n	ad94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
    ad92:	460c      	mov	r4, r1
    ad94:	813c      	strh	r4, [r7, #8]
    ad96:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ad9a:	42b1      	cmp	r1, r6
    ad9c:	d800      	bhi.n	ada0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
    ad9e:	460e      	mov	r6, r1
    ada0:	807e      	strh	r6, [r7, #2]
    ada2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ada6:	42a9      	cmp	r1, r5
    ada8:	d900      	bls.n	adac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    adaa:	4629      	mov	r1, r5
    adac:	80b9      	strh	r1, [r7, #4]
    adae:	2201      	movs	r2, #1
    adb0:	703a      	strb	r2, [r7, #0]
    adb2:	381b      	subs	r0, #27
    adb4:	28e0      	cmp	r0, #224	; 0xe0
    adb6:	d902      	bls.n	adbe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
    adb8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    adbc:	e014      	b.n	ade8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    adbe:	3e1b      	subs	r6, #27
    adc0:	2ee0      	cmp	r6, #224	; 0xe0
    adc2:	d902      	bls.n	adca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x112>
    adc4:	f640 4182 	movw	r1, #3202	; 0xc82
    adc8:	e00e      	b.n	ade8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    adca:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    adce:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    add2:	4284      	cmp	r4, r0
    add4:	d902      	bls.n	addc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    add6:	f640 4184 	movw	r1, #3204	; 0xc84
    adda:	e005      	b.n	ade8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    addc:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    ade0:	4281      	cmp	r1, r0
    ade2:	d904      	bls.n	adee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ade4:	f640 4186 	movw	r1, #3206	; 0xc86
    ade8:	2039      	movs	r0, #57	; 0x39
    adea:	f7f8 ffc9 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adee:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adf2:	0000      	.short	0x0000
    adf4:	20000206 	.word	0x20000206
    adf8:	4904      	ldr	r1, [pc, #16]	; (ae0c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>)
    adfa:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    adfe:	4288      	cmp	r0, r1
    ae00:	d301      	bcc.n	ae06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    ae02:	2000      	movs	r0, #0
    ae04:	4770      	bx	lr
    ae06:	2001      	movs	r0, #1
    ae08:	4770      	bx	lr
    ae0a:	0000      	.short	0x0000
    ae0c:	0270f3cc 	.word	0x0270f3cc
    ae10:	4904      	ldr	r1, [pc, #16]	; (ae24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16c>)
    ae12:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ae16:	4288      	cmp	r0, r1
    ae18:	d301      	bcc.n	ae1e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    ae1a:	2000      	movs	r0, #0
    ae1c:	4770      	bx	lr
    ae1e:	2001      	movs	r0, #1
    ae20:	4770      	bx	lr
    ae22:	0000      	.short	0x0000
    ae24:	009c363d 	.word	0x009c363d
    ae28:	4904      	ldr	r1, [pc, #16]	; (ae3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>)
    ae2a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ae2e:	4288      	cmp	r0, r1
    ae30:	d301      	bcc.n	ae36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17e>
    ae32:	2000      	movs	r0, #0
    ae34:	4770      	bx	lr
    ae36:	2001      	movs	r0, #1
    ae38:	4770      	bx	lr
    ae3a:	0000      	.short	0x0000
    ae3c:	009c363d 	.word	0x009c363d
    ae40:	b530      	push	{r4, r5, lr}
    ae42:	2200      	movs	r2, #0
    ae44:	4d07      	ldr	r5, [pc, #28]	; (ae64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>)
    ae46:	e009      	b.n	ae5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a4>
    ae48:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    ae4c:	462b      	mov	r3, r5
    ae4e:	429c      	cmp	r4, r3
    ae50:	d800      	bhi.n	ae54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19c>
    ae52:	4623      	mov	r3, r4
    ae54:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    ae58:	1c52      	adds	r2, r2, #1
    ae5a:	b2d2      	uxtb	r2, r2
    ae5c:	428a      	cmp	r2, r1
    ae5e:	d3f3      	bcc.n	ae48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x190>
    ae60:	bd30      	pop	{r4, r5, pc}
    ae62:	0000      	.short	0x0000
    ae64:	00f42400 	.word	0x00f42400
    ae68:	4a09      	ldr	r2, [pc, #36]	; (ae90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>)
    ae6a:	4290      	cmp	r0, r2
    ae6c:	d80b      	bhi.n	ae86 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    ae6e:	2901      	cmp	r1, #1
    ae70:	d002      	beq.n	ae78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    ae72:	2904      	cmp	r1, #4
    ae74:	d003      	beq.n	ae7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    ae76:	e008      	b.n	ae8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    ae78:	f240 7153 	movw	r1, #1875	; 0x753
    ae7c:	e001      	b.n	ae82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    ae7e:	f640 11c4 	movw	r1, #2500	; 0x9c4
    ae82:	4288      	cmp	r0, r1
    ae84:	d201      	bcs.n	ae8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    ae86:	2000      	movs	r0, #0
    ae88:	4770      	bx	lr
    ae8a:	2001      	movs	r0, #1
    ae8c:	4770      	bx	lr
    ae8e:	0000      	.short	0x0000
    ae90:	0270fd8f 	.word	0x0270fd8f
    ae94:	b510      	push	{r4, lr}
    ae96:	4604      	mov	r4, r0
    ae98:	88c1      	ldrh	r1, [r0, #6]
    ae9a:	8880      	ldrh	r0, [r0, #4]
    ae9c:	f004 fa33 	bl	f306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    aea0:	2800      	cmp	r0, #0
    aea2:	d10f      	bne.n	aec4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    aea4:	8861      	ldrh	r1, [r4, #2]
    aea6:	8820      	ldrh	r0, [r4, #0]
    aea8:	f004 fa2d 	bl	f306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    aeac:	2800      	cmp	r0, #0
    aeae:	d109      	bne.n	aec4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    aeb0:	4805      	ldr	r0, [pc, #20]	; (aec8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x210>)
    aeb2:	88a1      	ldrh	r1, [r4, #4]
    aeb4:	8081      	strh	r1, [r0, #4]
    aeb6:	8821      	ldrh	r1, [r4, #0]
    aeb8:	8001      	strh	r1, [r0, #0]
    aeba:	88e1      	ldrh	r1, [r4, #6]
    aebc:	80c1      	strh	r1, [r0, #6]
    aebe:	8861      	ldrh	r1, [r4, #2]
    aec0:	8041      	strh	r1, [r0, #2]
    aec2:	2000      	movs	r0, #0
    aec4:	bd10      	pop	{r4, pc}
    aec6:	0000      	.short	0x0000
    aec8:	20000206 	.word	0x20000206
    aecc:	0b12fe0b 	.word	0x0b12fe0b
    aed0:	12fe0059 	.word	0x12fe0059
    aed4:	05060708 	.word	0x05060708
    aed8:	00020304 	.word	0x00020304
    aedc:	f0f4f8fc 	.word	0xf0f4f8fc
    aee0:	0304d8ec 	.word	0x0304d8ec
    aee4:	f4f8fc00 	.word	0xf4f8fc00
    aee8:	00d8ecf0 	.word	0x00d8ecf0

0000aeec <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    aeec:	b510      	push	{r4, lr}
    aeee:	460c      	mov	r4, r1
    aef0:	f7fb f872 	bl	5fd8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    aef4:	4805      	ldr	r0, [pc, #20]	; (af0c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    aef6:	6004      	str	r4, [r0, #0]
    aef8:	6840      	ldr	r0, [r0, #4]
    aefa:	f004 fca1 	bl	f840 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    aefe:	f004 f997 	bl	f230 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    af02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af06:	f7fb ba81 	b.w	640c <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    af0a:	0000      	.short	0x0000
    af0c:	20000210 	.word	0x20000210

0000af10 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    af10:	b510      	push	{r4, lr}
    af12:	4c07      	ldr	r4, [pc, #28]	; (af30 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    af14:	68a0      	ldr	r0, [r4, #8]
    af16:	f004 fc93 	bl	f840 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    af1a:	68e0      	ldr	r0, [r4, #12]
    af1c:	f004 fc90 	bl	f840 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    af20:	f002 fc5b 	bl	d7da <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    af24:	f7fa fbd4 	bl	56d0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    af28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af2c:	f7ff bec4 	b.w	acb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    af30:	20000210 	.word	0x20000210

0000af34 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    af34:	b500      	push	{lr}
    af36:	4905      	ldr	r1, [pc, #20]	; (af4c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    af38:	4805      	ldr	r0, [pc, #20]	; (af50 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    af3a:	f004 fc74 	bl	f826 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af3e:	4804      	ldr	r0, [pc, #16]	; (af50 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    af40:	4904      	ldr	r1, [pc, #16]	; (af54 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    af42:	1d00      	adds	r0, r0, #4
    af44:	f85d eb04 	ldr.w	lr, [sp], #4
    af48:	f004 bc6d 	b.w	f826 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af4c:	20000238 	.word	0x20000238
    af50:	20000214 	.word	0x20000214
    af54:	20000240 	.word	0x20000240

0000af58 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    af58:	b500      	push	{lr}
    af5a:	4908      	ldr	r1, [pc, #32]	; (af7c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    af5c:	4808      	ldr	r0, [pc, #32]	; (af80 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af5e:	f004 fc62 	bl	f826 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af62:	4807      	ldr	r0, [pc, #28]	; (af80 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af64:	4907      	ldr	r1, [pc, #28]	; (af84 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    af66:	1d00      	adds	r0, r0, #4
    af68:	f004 fc5d 	bl	f826 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af6c:	4804      	ldr	r0, [pc, #16]	; (af80 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af6e:	4906      	ldr	r1, [pc, #24]	; (af88 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    af70:	3008      	adds	r0, #8
    af72:	f85d eb04 	ldr.w	lr, [sp], #4
    af76:	f004 bc56 	b.w	f826 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af7a:	0000      	.short	0x0000
    af7c:	20000228 	.word	0x20000228
    af80:	20000214 	.word	0x20000214
    af84:	20000230 	.word	0x20000230
    af88:	20000220 	.word	0x20000220
    af8c:	b510      	push	{r4, lr}
    af8e:	f002 fc12 	bl	d7b6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    af92:	4806      	ldr	r0, [pc, #24]	; (afac <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x54>)
    af94:	f7f9 fdb2 	bl	4afc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    af98:	2000      	movs	r0, #0
    af9a:	f7f9 f8b9 	bl	4110 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    af9e:	f7fd fdb1 	bl	8b04 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    afa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afa6:	f7fb b831 	b.w	600c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    afaa:	0000      	.short	0x0000
    afac:	200013cd 	.word	0x200013cd
    afb0:	b510      	push	{r4, lr}
    afb2:	f7fb fba7 	bl	6704 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    afb6:	f7ff fb47 	bl	a648 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    afba:	f7fc fd7f 	bl	7abc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    afbe:	4803      	ldr	r0, [pc, #12]	; (afcc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    afc0:	f7fb fb3c 	bl	663c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    afc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afc8:	f7fb b830 	b.w	602c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    afcc:	200013cd 	.word	0x200013cd

0000afd0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    afd0:	2101      	movs	r1, #1
    afd2:	4081      	lsls	r1, r0
    afd4:	4802      	ldr	r0, [pc, #8]	; (afe0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    afd6:	6802      	ldr	r2, [r0, #0]
    afd8:	4311      	orrs	r1, r2
    afda:	6001      	str	r1, [r0, #0]
    afdc:	4770      	bx	lr
    afde:	0000      	.short	0x0000
    afe0:	20000248 	.word	0x20000248

0000afe4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    afe4:	4801      	ldr	r0, [pc, #4]	; (afec <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    afe6:	6800      	ldr	r0, [r0, #0]
    afe8:	4770      	bx	lr
    afea:	0000      	.short	0x0000
    afec:	20000248 	.word	0x20000248

0000aff0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    aff0:	4803      	ldr	r0, [pc, #12]	; (b000 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    aff2:	8800      	ldrh	r0, [r0, #0]
    aff4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    aff8:	0040      	lsls	r0, r0, #1
    affa:	1c40      	adds	r0, r0, #1
    affc:	4770      	bx	lr
    affe:	0000      	.short	0x0000
    b000:	20000248 	.word	0x20000248

0000b004 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b004:	b510      	push	{r4, lr}
    b006:	f7f8 fb01 	bl	360c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b00a:	2200      	movs	r2, #0
    b00c:	4b08      	ldr	r3, [pc, #32]	; (b030 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b00e:	4611      	mov	r1, r2
    b010:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b014:	4284      	cmp	r4, r0
    b016:	d303      	bcc.n	b020 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b018:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b01c:	7882      	ldrb	r2, [r0, #2]
    b01e:	e003      	b.n	b028 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b020:	1c49      	adds	r1, r1, #1
    b022:	b2c9      	uxtb	r1, r1
    b024:	290c      	cmp	r1, #12
    b026:	d3f3      	bcc.n	b010 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b028:	4802      	ldr	r0, [pc, #8]	; (b034 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b02a:	7002      	strb	r2, [r0, #0]
    b02c:	bd10      	pop	{r4, pc}
    b02e:	0000      	.short	0x0000
    b030:	0000f8ac 	.word	0x0000f8ac
    b034:	2000029d 	.word	0x2000029d

0000b038 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    b038:	4801      	ldr	r0, [pc, #4]	; (b040 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    b03a:	7800      	ldrb	r0, [r0, #0]
    b03c:	4770      	bx	lr
    b03e:	0000      	.short	0x0000
    b040:	2000029d 	.word	0x2000029d

0000b044 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b044:	b570      	push	{r4, r5, r6, lr}
    b046:	4605      	mov	r5, r0
    b048:	4616      	mov	r6, r2
    b04a:	460c      	mov	r4, r1
    b04c:	2002      	movs	r0, #2
    b04e:	f000 f9f9 	bl	b444 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b052:	4906      	ldr	r1, [pc, #24]	; (b06c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b054:	2001      	movs	r0, #1
    b056:	1ef6      	subs	r6, r6, #3
    b058:	7008      	strb	r0, [r1, #0]
    b05a:	4805      	ldr	r0, [pc, #20]	; (b070 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b05c:	6006      	str	r6, [r0, #0]
    b05e:	4804      	ldr	r0, [pc, #16]	; (b070 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b060:	3808      	subs	r0, #8
    b062:	6005      	str	r5, [r0, #0]
    b064:	1f00      	subs	r0, r0, #4
    b066:	6004      	str	r4, [r0, #0]
    b068:	bd70      	pop	{r4, r5, r6, pc}
    b06a:	0000      	.short	0x0000
    b06c:	2000029e 	.word	0x2000029e
    b070:	4000f510 	.word	0x4000f510

0000b074 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b074:	b510      	push	{r4, lr}
    b076:	4c0c      	ldr	r4, [pc, #48]	; (b0a8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b078:	7820      	ldrb	r0, [r4, #0]
    b07a:	b180      	cbz	r0, b09e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b07c:	490b      	ldr	r1, [pc, #44]	; (b0ac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b07e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b082:	6008      	str	r0, [r1, #0]
    b084:	f000 f86a 	bl	b15c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b088:	2100      	movs	r1, #0
    b08a:	b120      	cbz	r0, b096 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b08c:	2001      	movs	r0, #1
    b08e:	7060      	strb	r0, [r4, #1]
    b090:	4807      	ldr	r0, [pc, #28]	; (b0b0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b092:	6800      	ldr	r0, [r0, #0]
    b094:	e001      	b.n	b09a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b096:	7061      	strb	r1, [r4, #1]
    b098:	2010      	movs	r0, #16
    b09a:	70a0      	strb	r0, [r4, #2]
    b09c:	7021      	strb	r1, [r4, #0]
    b09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0a2:	2000      	movs	r0, #0
    b0a4:	f000 b9ce 	b.w	b444 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b0a8:	2000029e 	.word	0x2000029e
    b0ac:	4001f508 	.word	0x4001f508
    b0b0:	4000f400 	.word	0x4000f400

0000b0b4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b0b4:	b510      	push	{r4, lr}
    b0b6:	2002      	movs	r0, #2
    b0b8:	f000 f9c4 	bl	b444 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b0bc:	4904      	ldr	r1, [pc, #16]	; (b0d0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b0be:	2001      	movs	r0, #1
    b0c0:	7008      	strb	r0, [r1, #0]
    b0c2:	f000 f859 	bl	b178 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b0c6:	4903      	ldr	r1, [pc, #12]	; (b0d4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b0c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b0cc:	6008      	str	r0, [r1, #0]
    b0ce:	bd10      	pop	{r4, pc}
    b0d0:	2000029e 	.word	0x2000029e
    b0d4:	4001f504 	.word	0x4001f504

0000b0d8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b0d8:	4803      	ldr	r0, [pc, #12]	; (b0e8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b0da:	2100      	movs	r1, #0
    b0dc:	7001      	strb	r1, [r0, #0]
    b0de:	7041      	strb	r1, [r0, #1]
    b0e0:	2110      	movs	r1, #16
    b0e2:	7081      	strb	r1, [r0, #2]
    b0e4:	4770      	bx	lr
    b0e6:	0000      	.short	0x0000
    b0e8:	2000029e 	.word	0x2000029e

0000b0ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b0ec:	4807      	ldr	r0, [pc, #28]	; (b10c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b0ee:	b510      	push	{r4, lr}
    b0f0:	7801      	ldrb	r1, [r0, #0]
    b0f2:	b141      	cbz	r1, b106 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b0f4:	f000 f832 	bl	b15c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b0f8:	b118      	cbz	r0, b102 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b0fa:	4805      	ldr	r0, [pc, #20]	; (b110 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b0fc:	6800      	ldr	r0, [r0, #0]
    b0fe:	b2c0      	uxtb	r0, r0
    b100:	bd10      	pop	{r4, pc}
    b102:	2010      	movs	r0, #16
    b104:	bd10      	pop	{r4, pc}
    b106:	7880      	ldrb	r0, [r0, #2]
    b108:	bd10      	pop	{r4, pc}
    b10a:	0000      	.short	0x0000
    b10c:	2000029e 	.word	0x2000029e
    b110:	4000f400 	.word	0x4000f400

0000b114 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b114:	4808      	ldr	r0, [pc, #32]	; (b138 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b116:	b510      	push	{r4, lr}
    b118:	7801      	ldrb	r1, [r0, #0]
    b11a:	b159      	cbz	r1, b134 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b11c:	4807      	ldr	r0, [pc, #28]	; (b13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b11e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b122:	b128      	cbz	r0, b130 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b124:	f000 f80c 	bl	b140 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b128:	2800      	cmp	r0, #0
    b12a:	d000      	beq.n	b12e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b12c:	2001      	movs	r0, #1
    b12e:	bd10      	pop	{r4, pc}
    b130:	2002      	movs	r0, #2
    b132:	bd10      	pop	{r4, pc}
    b134:	7840      	ldrb	r0, [r0, #1]
    b136:	bd10      	pop	{r4, pc}
    b138:	2000029e 	.word	0x2000029e
    b13c:	4000f000 	.word	0x4000f000
    b140:	4805      	ldr	r0, [pc, #20]	; (b158 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b142:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b146:	b111      	cbz	r1, b14e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b148:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b14c:	b108      	cbz	r0, b152 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b14e:	2000      	movs	r0, #0
    b150:	4770      	bx	lr
    b152:	2001      	movs	r0, #1
    b154:	4770      	bx	lr
    b156:	0000      	.short	0x0000
    b158:	4000f000 	.word	0x4000f000
    b15c:	4805      	ldr	r0, [pc, #20]	; (b174 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b15e:	b510      	push	{r4, lr}
    b160:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b164:	b120      	cbz	r0, b170 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b166:	f7ff ffeb 	bl	b140 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b16a:	b108      	cbz	r0, b170 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b16c:	2001      	movs	r0, #1
    b16e:	bd10      	pop	{r4, pc}
    b170:	2000      	movs	r0, #0
    b172:	bd10      	pop	{r4, pc}
    b174:	4000f000 	.word	0x4000f000
    b178:	4804      	ldr	r0, [pc, #16]	; (b18c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b17a:	2100      	movs	r1, #0
    b17c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b180:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b184:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b188:	4770      	bx	lr
    b18a:	0000      	.short	0x0000
    b18c:	4000f000 	.word	0x4000f000

0000b190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b190:	4a08      	ldr	r2, [pc, #32]	; (b1b4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b192:	b510      	push	{r4, lr}
    b194:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b198:	4907      	ldr	r1, [pc, #28]	; (b1b8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b19a:	4610      	mov	r0, r2
    b19c:	f7f8 fc8c 	bl	3ab8 <mpsl_fem_lna_configuration_set>
    b1a0:	2800      	cmp	r0, #0
    b1a2:	d005      	beq.n	b1b0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b1a4:	1c40      	adds	r0, r0, #1
    b1a6:	d003      	beq.n	b1b0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b1a8:	217d      	movs	r1, #125	; 0x7d
    b1aa:	2040      	movs	r0, #64	; 0x40
    b1ac:	f7f8 fde8 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1b0:	bd10      	pop	{r4, pc}
    b1b2:	0000      	.short	0x0000
    b1b4:	2000024c 	.word	0x2000024c
    b1b8:	0000b1e8 	.word	0x0000b1e8

0000b1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b1bc:	4a08      	ldr	r2, [pc, #32]	; (b1e0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b1be:	b510      	push	{r4, lr}
    b1c0:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b1c4:	4907      	ldr	r1, [pc, #28]	; (b1e4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b1c6:	4610      	mov	r0, r2
    b1c8:	f7f8 fc82 	bl	3ad0 <mpsl_fem_pa_configuration_set>
    b1cc:	2800      	cmp	r0, #0
    b1ce:	d005      	beq.n	b1dc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b1d0:	1c40      	adds	r0, r0, #1
    b1d2:	d003      	beq.n	b1dc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b1d4:	2172      	movs	r1, #114	; 0x72
    b1d6:	2040      	movs	r0, #64	; 0x40
    b1d8:	f7f8 fdd2 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1dc:	bd10      	pop	{r4, pc}
    b1de:	0000      	.short	0x0000
    b1e0:	2000024c 	.word	0x2000024c
    b1e4:	0000b1e8 	.word	0x0000b1e8
    b1e8:	00000001 	.word	0x00000001
    b1ec:	40001110 	.word	0x40001110
	...

0000b200 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b200:	4a07      	ldr	r2, [pc, #28]	; (b220 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b202:	b510      	push	{r4, lr}
    b204:	7853      	ldrb	r3, [r2, #1]
    b206:	b133      	cbz	r3, b216 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b208:	4b06      	ldr	r3, [pc, #24]	; (b224 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b20a:	6019      	str	r1, [r3, #0]
    b20c:	1d19      	adds	r1, r3, #4
    b20e:	6008      	str	r0, [r1, #0]
    b210:	2001      	movs	r0, #1
    b212:	7090      	strb	r0, [r2, #2]
    b214:	bd10      	pop	{r4, pc}
    b216:	21ba      	movs	r1, #186	; 0xba
    b218:	203c      	movs	r0, #60	; 0x3c
    b21a:	f7f8 fdb1 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b21e:	0000      	.short	0x0000
    b220:	200002a1 	.word	0x200002a1
    b224:	4000f50c 	.word	0x4000f50c

0000b228 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b228:	4809      	ldr	r0, [pc, #36]	; (b250 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b22a:	b510      	push	{r4, lr}
    b22c:	7801      	ldrb	r1, [r0, #0]
    b22e:	b151      	cbz	r1, b246 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b230:	7880      	ldrb	r0, [r0, #2]
    b232:	b140      	cbz	r0, b246 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b234:	4907      	ldr	r1, [pc, #28]	; (b254 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b236:	2000      	movs	r0, #0
    b238:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b23c:	4906      	ldr	r1, [pc, #24]	; (b258 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b23e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b242:	6008      	str	r0, [r1, #0]
    b244:	bd10      	pop	{r4, pc}
    b246:	21e1      	movs	r1, #225	; 0xe1
    b248:	203c      	movs	r0, #60	; 0x3c
    b24a:	f7f8 fd99 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b24e:	0000      	.short	0x0000
    b250:	200002a1 	.word	0x200002a1
    b254:	4000f000 	.word	0x4000f000
    b258:	4001f504 	.word	0x4001f504

0000b25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b25c:	b570      	push	{r4, r5, r6, lr}
    b25e:	4c0b      	ldr	r4, [pc, #44]	; (b28c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b260:	2500      	movs	r5, #0
    b262:	7820      	ldrb	r0, [r4, #0]
    b264:	b158      	cbz	r0, b27e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b266:	f000 f8e5 	bl	b434 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b26a:	4809      	ldr	r0, [pc, #36]	; (b290 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b26c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b270:	b118      	cbz	r0, b27a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b272:	4808      	ldr	r0, [pc, #32]	; (b294 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b274:	6800      	ldr	r0, [r0, #0]
    b276:	70e0      	strb	r0, [r4, #3]
    b278:	e000      	b.n	b27c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b27a:	70e5      	strb	r5, [r4, #3]
    b27c:	7025      	strb	r5, [r4, #0]
    b27e:	2000      	movs	r0, #0
    b280:	f000 f8e0 	bl	b444 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b284:	7065      	strb	r5, [r4, #1]
    b286:	70a5      	strb	r5, [r4, #2]
    b288:	bd70      	pop	{r4, r5, r6, pc}
    b28a:	0000      	.short	0x0000
    b28c:	200002a1 	.word	0x200002a1
    b290:	4000f000 	.word	0x4000f000
    b294:	4000f400 	.word	0x4000f400

0000b298 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b298:	480d      	ldr	r0, [pc, #52]	; (b2d0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b29a:	b510      	push	{r4, lr}
    b29c:	7801      	ldrb	r1, [r0, #0]
    b29e:	b191      	cbz	r1, b2c6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b2a0:	7880      	ldrb	r0, [r0, #2]
    b2a2:	b180      	cbz	r0, b2c6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b2a4:	490b      	ldr	r1, [pc, #44]	; (b2d4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b2a6:	2000      	movs	r0, #0
    b2a8:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b2ac:	4a0a      	ldr	r2, [pc, #40]	; (b2d8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b2ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b2b2:	6010      	str	r0, [r2, #0]
    b2b4:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b2b8:	2a01      	cmp	r2, #1
    b2ba:	d103      	bne.n	b2c4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b2bc:	604a      	str	r2, [r1, #4]
    b2be:	4906      	ldr	r1, [pc, #24]	; (b2d8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b2c0:	1d09      	adds	r1, r1, #4
    b2c2:	6008      	str	r0, [r1, #0]
    b2c4:	bd10      	pop	{r4, pc}
    b2c6:	21d1      	movs	r1, #209	; 0xd1
    b2c8:	203c      	movs	r0, #60	; 0x3c
    b2ca:	f7f8 fd59 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ce:	0000      	.short	0x0000
    b2d0:	200002a1 	.word	0x200002a1
    b2d4:	4000f000 	.word	0x4000f000
    b2d8:	4001f504 	.word	0x4001f504

0000b2dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b2dc:	4803      	ldr	r0, [pc, #12]	; (b2ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b2de:	2100      	movs	r1, #0
    b2e0:	7001      	strb	r1, [r0, #0]
    b2e2:	7041      	strb	r1, [r0, #1]
    b2e4:	7081      	strb	r1, [r0, #2]
    b2e6:	70c1      	strb	r1, [r0, #3]
    b2e8:	4770      	bx	lr
    b2ea:	0000      	.short	0x0000
    b2ec:	200002a1 	.word	0x200002a1

0000b2f0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2f4:	4605      	mov	r5, r0
    b2f6:	461c      	mov	r4, r3
    b2f8:	4690      	mov	r8, r2
    b2fa:	460f      	mov	r7, r1
    b2fc:	2001      	movs	r0, #1
    b2fe:	f000 f8a1 	bl	b444 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b302:	4e12      	ldr	r6, [pc, #72]	; (b34c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b304:	4812      	ldr	r0, [pc, #72]	; (b350 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b306:	7134      	strb	r4, [r6, #4]
    b308:	6007      	str	r7, [r0, #0]
    b30a:	4911      	ldr	r1, [pc, #68]	; (b350 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b30c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b310:	1f09      	subs	r1, r1, #4
    b312:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b316:	6008      	str	r0, [r1, #0]
    b318:	f001 f8f0 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b31c:	b938      	cbnz	r0, b32e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b31e:	480c      	ldr	r0, [pc, #48]	; (b350 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b320:	3010      	adds	r0, #16
    b322:	6801      	ldr	r1, [r0, #0]
    b324:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b328:	ea41 0108 	orr.w	r1, r1, r8
    b32c:	6001      	str	r1, [r0, #0]
    b32e:	f000 f881 	bl	b434 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b332:	b93d      	cbnz	r5, b344 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b334:	4808      	ldr	r0, [pc, #32]	; (b358 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b336:	4a07      	ldr	r2, [pc, #28]	; (b354 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b338:	4906      	ldr	r1, [pc, #24]	; (b354 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b33a:	3afc      	subs	r2, #252	; 0xfc
    b33c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b340:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b344:	2001      	movs	r0, #1
    b346:	7070      	strb	r0, [r6, #1]
    b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b34c:	200002a1 	.word	0x200002a1
    b350:	4000f508 	.word	0x4000f508
    b354:	4000f100 	.word	0x4000f100
    b358:	4001f088 	.word	0x4001f088

0000b35c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b35c:	4808      	ldr	r0, [pc, #32]	; (b380 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b35e:	b510      	push	{r4, lr}
    b360:	7841      	ldrb	r1, [r0, #1]
    b362:	b149      	cbz	r1, b378 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b364:	2101      	movs	r1, #1
    b366:	7001      	strb	r1, [r0, #0]
    b368:	4806      	ldr	r0, [pc, #24]	; (b384 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b36a:	2200      	movs	r2, #0
    b36c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b370:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b374:	6001      	str	r1, [r0, #0]
    b376:	bd10      	pop	{r4, pc}
    b378:	21c5      	movs	r1, #197	; 0xc5
    b37a:	203c      	movs	r0, #60	; 0x3c
    b37c:	f7f8 fd00 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b380:	200002a1 	.word	0x200002a1
    b384:	4000f000 	.word	0x4000f000

0000b388 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b388:	4806      	ldr	r0, [pc, #24]	; (b3a4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b38a:	7801      	ldrb	r1, [r0, #0]
    b38c:	b141      	cbz	r1, b3a0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b38e:	4806      	ldr	r0, [pc, #24]	; (b3a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b390:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b394:	2800      	cmp	r0, #0
    b396:	d002      	beq.n	b39e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b398:	4804      	ldr	r0, [pc, #16]	; (b3ac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b39a:	6800      	ldr	r0, [r0, #0]
    b39c:	b2c0      	uxtb	r0, r0
    b39e:	4770      	bx	lr
    b3a0:	78c0      	ldrb	r0, [r0, #3]
    b3a2:	4770      	bx	lr
    b3a4:	200002a1 	.word	0x200002a1
    b3a8:	4000f000 	.word	0x4000f000
    b3ac:	4000f400 	.word	0x4000f400

0000b3b0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b3b0:	4901      	ldr	r1, [pc, #4]	; (b3b8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b3b2:	2001      	movs	r0, #1
    b3b4:	6088      	str	r0, [r1, #8]
    b3b6:	4770      	bx	lr
    b3b8:	4000f000 	.word	0x4000f000

0000b3bc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b3c0:	2800      	cmp	r0, #0
    b3c2:	d02e      	beq.n	b422 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b3c4:	4818      	ldr	r0, [pc, #96]	; (b428 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b3c6:	7800      	ldrb	r0, [r0, #0]
    b3c8:	b1b0      	cbz	r0, b3f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b3ca:	4d18      	ldr	r5, [pc, #96]	; (b42c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b3cc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b3d0:	2800      	cmp	r0, #0
    b3d2:	d126      	bne.n	b422 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b3d4:	2702      	movs	r7, #2
    b3d6:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b3da:	4c15      	ldr	r4, [pc, #84]	; (b430 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b3dc:	6820      	ldr	r0, [r4, #0]
    b3de:	43c0      	mvns	r0, r0
    b3e0:	f340 1600 	sbfx	r6, r0, #4, #1
    b3e4:	6820      	ldr	r0, [r4, #0]
    b3e6:	f040 0010 	orr.w	r0, r0, #16
    b3ea:	6020      	str	r0, [r4, #0]
    b3ec:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b3f0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b3f4:	1c76      	adds	r6, r6, #1
    b3f6:	e009      	b.n	b40c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b3f8:	f240 1153 	movw	r1, #339	; 0x153
    b3fc:	203c      	movs	r0, #60	; 0x3c
    b3fe:	f7f8 fcbf 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b402:	bf00      	nop
    b404:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b408:	f7f8 fb00 	bl	3a0c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b40c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b410:	2800      	cmp	r0, #0
    b412:	d0f7      	beq.n	b404 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b414:	b91e      	cbnz	r6, b41e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b416:	6820      	ldr	r0, [r4, #0]
    b418:	f020 0010 	bic.w	r0, r0, #16
    b41c:	6020      	str	r0, [r4, #0]
    b41e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b426:	0000      	.short	0x0000
    b428:	200002a1 	.word	0x200002a1
    b42c:	4000f000 	.word	0x4000f000
    b430:	e000ed10 	.word	0xe000ed10
    b434:	4902      	ldr	r1, [pc, #8]	; (b440 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b436:	4801      	ldr	r0, [pc, #4]	; (b43c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b438:	6008      	str	r0, [r1, #0]
    b43a:	4770      	bx	lr
    b43c:	02020000 	.word	0x02020000
    b440:	4001f508 	.word	0x4001f508

0000b444 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b444:	b510      	push	{r4, lr}
    b446:	4604      	mov	r4, r0
    b448:	f000 f822 	bl	b490 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b44c:	2c00      	cmp	r4, #0
    b44e:	d017      	beq.n	b480 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b450:	4a0c      	ldr	r2, [pc, #48]	; (b484 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b452:	480c      	ldr	r0, [pc, #48]	; (b484 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b454:	490c      	ldr	r1, [pc, #48]	; (b488 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b456:	3214      	adds	r2, #20
    b458:	4b0c      	ldr	r3, [pc, #48]	; (b48c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b45a:	2c01      	cmp	r4, #1
    b45c:	d005      	beq.n	b46a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b45e:	2c02      	cmp	r4, #2
    b460:	d008      	beq.n	b474 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b462:	2183      	movs	r1, #131	; 0x83
    b464:	203d      	movs	r0, #61	; 0x3d
    b466:	f7f8 fc8b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b46a:	2402      	movs	r4, #2
    b46c:	6004      	str	r4, [r0, #0]
    b46e:	6011      	str	r1, [r2, #0]
    b470:	0620      	lsls	r0, r4, #24
    b472:	e004      	b.n	b47e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b474:	2403      	movs	r4, #3
    b476:	6004      	str	r4, [r0, #0]
    b478:	6011      	str	r1, [r2, #0]
    b47a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b47e:	6018      	str	r0, [r3, #0]
    b480:	bd10      	pop	{r4, pc}
    b482:	0000      	.short	0x0000
    b484:	4000f500 	.word	0x4000f500
    b488:	200014cf 	.word	0x200014cf
    b48c:	4001f504 	.word	0x4001f504
    b490:	4804      	ldr	r0, [pc, #16]	; (b4a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b492:	2100      	movs	r1, #0
    b494:	6001      	str	r1, [r0, #0]
    b496:	6001      	str	r1, [r0, #0]
    b498:	4903      	ldr	r1, [pc, #12]	; (b4a8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b49a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b49e:	6008      	str	r0, [r1, #0]
    b4a0:	4770      	bx	lr
    b4a2:	0000      	.short	0x0000
    b4a4:	4000f500 	.word	0x4000f500
    b4a8:	4001f508 	.word	0x4001f508

0000b4ac <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b4ac:	4805      	ldr	r0, [pc, #20]	; (b4c4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b4ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b4b2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b4b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b4ba:	2100      	movs	r1, #0
    b4bc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b4c0:	4770      	bx	lr
    b4c2:	0000      	.short	0x0000
    b4c4:	40001000 	.word	0x40001000

0000b4c8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b4c8:	4904      	ldr	r1, [pc, #16]	; (b4dc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b4ca:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b4ce:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b4d2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b4d6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b4da:	4770      	bx	lr
    b4dc:	40001000 	.word	0x40001000

0000b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4e2:	4c23      	ldr	r4, [pc, #140]	; (b570 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b4e4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4e8:	f010 0f10 	tst.w	r0, #16
    b4ec:	d001      	beq.n	b4f2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b4ee:	2701      	movs	r7, #1
    b4f0:	e000      	b.n	b4f4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b4f2:	2700      	movs	r7, #0
    b4f4:	2010      	movs	r0, #16
    b4f6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b4fa:	2002      	movs	r0, #2
    b4fc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b500:	481c      	ldr	r0, [pc, #112]	; (b574 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b502:	2500      	movs	r5, #0
    b504:	491d      	ldr	r1, [pc, #116]	; (b57c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b506:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b50a:	481b      	ldr	r0, [pc, #108]	; (b578 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b50c:	6008      	str	r0, [r1, #0]
    b50e:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b512:	f44f 7688 	mov.w	r6, #272	; 0x110
    b516:	f010 0fff 	tst.w	r0, #255	; 0xff
    b51a:	d018      	beq.n	b54e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b51c:	20ff      	movs	r0, #255	; 0xff
    b51e:	f88d 0000 	strb.w	r0, [sp]
    b522:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b526:	2001      	movs	r0, #1
    b528:	6120      	str	r0, [r4, #16]
    b52a:	e004      	b.n	b536 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b52c:	f89d 0000 	ldrb.w	r0, [sp]
    b530:	1e40      	subs	r0, r0, #1
    b532:	f88d 0000 	strb.w	r0, [sp]
    b536:	f89d 0000 	ldrb.w	r0, [sp]
    b53a:	b128      	cbz	r0, b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b53c:	4631      	mov	r1, r6
    b53e:	4620      	mov	r0, r4
    b540:	f004 fa83 	bl	fa4a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b544:	2800      	cmp	r0, #0
    b546:	d0f1      	beq.n	b52c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b548:	f89d 0000 	ldrb.w	r0, [sp]
    b54c:	b158      	cbz	r0, b566 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b54e:	f000 fc91 	bl	be74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b552:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b556:	f000 fe0d 	bl	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b55a:	2f00      	cmp	r7, #0
    b55c:	d002      	beq.n	b564 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b55e:	2010      	movs	r0, #16
    b560:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b566:	f240 718f 	movw	r1, #1935	; 0x78f
    b56a:	203e      	movs	r0, #62	; 0x3e
    b56c:	f7f8 fc08 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b570:	40001000 	.word	0x40001000
    b574:	2000118c 	.word	0x2000118c
    b578:	0c0e0000 	.word	0x0c0e0000
    b57c:	4001f508 	.word	0x4001f508

0000b580 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b584:	4d20      	ldr	r5, [pc, #128]	; (b608 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b586:	4607      	mov	r7, r0
    b588:	4688      	mov	r8, r1
    b58a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b58e:	07c1      	lsls	r1, r0, #31
    b590:	d018      	beq.n	b5c4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b592:	4a1e      	ldr	r2, [pc, #120]	; (b60c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b594:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b598:	6011      	str	r1, [r2, #0]
    b59a:	4c1d      	ldr	r4, [pc, #116]	; (b610 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b59c:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b5a0:	f041 0101 	orr.w	r1, r1, #1
    b5a4:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b5a8:	f040 0002 	orr.w	r0, r0, #2
    b5ac:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b5b0:	4640      	mov	r0, r8
    b5b2:	f000 fe43 	bl	c23c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b5b6:	f000 fbfb 	bl	bdb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b5ba:	2601      	movs	r6, #1
    b5bc:	b13f      	cbz	r7, b5ce <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b5be:	2f01      	cmp	r7, #1
    b5c0:	d00e      	beq.n	b5e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b5c2:	e016      	b.n	b5f2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b5c4:	f240 611a 	movw	r1, #1562	; 0x61a
    b5c8:	203e      	movs	r0, #62	; 0x3e
    b5ca:	f7f8 fbd9 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5ce:	4640      	mov	r0, r8
    b5d0:	f000 fc1e 	bl	be10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b5d4:	4640      	mov	r0, r8
    b5d6:	f000 fbcf 	bl	bd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b5da:	726e      	strb	r6, [r5, #9]
    b5dc:	6026      	str	r6, [r4, #0]
    b5de:	e008      	b.n	b5f2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b5e0:	f000 fc3e 	bl	be60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b5e4:	f000 fd8c 	bl	c100 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b5e8:	2002      	movs	r0, #2
    b5ea:	7268      	strb	r0, [r5, #9]
    b5ec:	f000 fcb0 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b5f0:	6066      	str	r6, [r4, #4]
    b5f2:	4808      	ldr	r0, [pc, #32]	; (b614 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b5f4:	64c6      	str	r6, [r0, #76]	; 0x4c
    b5f6:	4807      	ldr	r0, [pc, #28]	; (b614 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b5f8:	300c      	adds	r0, #12
    b5fa:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b5fe:	4638      	mov	r0, r7
    b600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b604:	f004 ba09 	b.w	fa1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b608:	2000118c 	.word	0x2000118c
    b60c:	4001f504 	.word	0x4001f504
    b610:	40001000 	.word	0x40001000
    b614:	40008000 	.word	0x40008000

0000b618 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b61c:	4d35      	ldr	r5, [pc, #212]	; (b6f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b61e:	4606      	mov	r6, r0
    b620:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b624:	4689      	mov	r9, r1
    b626:	6028      	str	r0, [r5, #0]
    b628:	4c33      	ldr	r4, [pc, #204]	; (b6f8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b62a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b62e:	f040 0002 	orr.w	r0, r0, #2
    b632:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b636:	4608      	mov	r0, r1
    b638:	f000 fe00 	bl	c23c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b63c:	f000 fbb8 	bl	bdb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b640:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b644:	2700      	movs	r7, #0
    b646:	b116      	cbz	r6, b64e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b648:	2e01      	cmp	r6, #1
    b64a:	d027      	beq.n	b69c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b64c:	e03f      	b.n	b6ce <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b64e:	4648      	mov	r0, r9
    b650:	f000 fbde 	bl	be10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b654:	79e0      	ldrb	r0, [r4, #7]
    b656:	2801      	cmp	r0, #1
    b658:	d105      	bne.n	b666 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b65a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b65e:	f041 0108 	orr.w	r1, r1, #8
    b662:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b666:	4648      	mov	r0, r9
    b668:	f000 fb86 	bl	bd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b66c:	2001      	movs	r0, #1
    b66e:	7260      	strb	r0, [r4, #9]
    b670:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b672:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b676:	62a0      	str	r0, [r4, #40]	; 0x28
    b678:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b67c:	6028      	str	r0, [r5, #0]
    b67e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b682:	f1b9 0f02 	cmp.w	r9, #2
    b686:	d007      	beq.n	b698 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b688:	f640 0034 	movw	r0, #2100	; 0x834
    b68c:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b690:	4410      	add	r0, r2
    b692:	fbb0 f7f1 	udiv	r7, r0, r1
    b696:	e01a      	b.n	b6ce <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b698:	4608      	mov	r0, r1
    b69a:	e7f7      	b.n	b68c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b69c:	f000 fbe0 	bl	be60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b6a0:	f000 fd2e 	bl	c100 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b6a4:	79e0      	ldrb	r0, [r4, #7]
    b6a6:	2801      	cmp	r0, #1
    b6a8:	d105      	bne.n	b6b6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b6aa:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b6ae:	f041 0104 	orr.w	r1, r1, #4
    b6b2:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b6b6:	2002      	movs	r0, #2
    b6b8:	7260      	strb	r0, [r4, #9]
    b6ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b6bc:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b6c0:	62a0      	str	r0, [r4, #40]	; 0x28
    b6c2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b6c6:	6028      	str	r0, [r5, #0]
    b6c8:	2729      	movs	r7, #41	; 0x29
    b6ca:	f000 fc41 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b6ce:	f000 fc2b 	bl	bf28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b6d2:	f000 fded 	bl	c2b0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b6d6:	6800      	ldr	r0, [r0, #0]
    b6d8:	2801      	cmp	r0, #1
    b6da:	d006      	beq.n	b6ea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b6dc:	2100      	movs	r1, #0
    b6de:	4630      	mov	r0, r6
    b6e0:	f004 f99b 	bl	fa1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b6e4:	4638      	mov	r0, r7
    b6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6ea:	f7ff fef9 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b6ee:	2000      	movs	r0, #0
    b6f0:	e7f9      	b.n	b6e6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b6f2:	0000      	.short	0x0000
    b6f4:	4001f504 	.word	0x4001f504
    b6f8:	2000118c 	.word	0x2000118c
    b6fc:	40001000 	.word	0x40001000

0000b700 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b700:	b510      	push	{r4, lr}
    b702:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b704:	4901      	ldr	r1, [pc, #4]	; (b70c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b706:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b70a:	bd10      	pop	{r4, pc}
    b70c:	2000117c 	.word	0x2000117c

0000b710 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b710:	b570      	push	{r4, r5, r6, lr}
    b712:	4c11      	ldr	r4, [pc, #68]	; (b758 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b714:	4606      	mov	r6, r0
    b716:	2002      	movs	r0, #2
    b718:	7320      	strb	r0, [r4, #12]
    b71a:	2596      	movs	r5, #150	; 0x96
    b71c:	f000 f85e 	bl	b7dc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b720:	4602      	mov	r2, r0
    b722:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b726:	f894 1020 	ldrb.w	r1, [r4, #32]
    b72a:	2801      	cmp	r0, #1
    b72c:	d00f      	beq.n	b74e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    b72e:	4628      	mov	r0, r5
    b730:	f004 f995 	bl	fa5e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b734:	6120      	str	r0, [r4, #16]
    b736:	4809      	ldr	r0, [pc, #36]	; (b75c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b738:	2100      	movs	r1, #0
    b73a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b73e:	6921      	ldr	r1, [r4, #16]
    b740:	69e0      	ldr	r0, [r4, #28]
    b742:	4408      	add	r0, r1
    b744:	4905      	ldr	r1, [pc, #20]	; (b75c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b746:	1d09      	adds	r1, r1, #4
    b748:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b74c:	bd70      	pop	{r4, r5, r6, pc}
    b74e:	4633      	mov	r3, r6
    b750:	4628      	mov	r0, r5
    b752:	f004 f9a0 	bl	fa96 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b756:	e7ed      	b.n	b734 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b758:	2000118c 	.word	0x2000118c
    b75c:	40008000 	.word	0x40008000

0000b760 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b764:	2238      	movs	r2, #56	; 0x38
    b766:	2100      	movs	r1, #0
    b768:	4813      	ldr	r0, [pc, #76]	; (b7b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b76a:	f000 ff93 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b76e:	f000 fd01 	bl	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b772:	f000 fe98 	bl	c4a6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b776:	4d11      	ldr	r5, [pc, #68]	; (b7bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b778:	4e10      	ldr	r6, [pc, #64]	; (b7bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b77a:	2400      	movs	r4, #0
    b77c:	4f0f      	ldr	r7, [pc, #60]	; (b7bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b77e:	3508      	adds	r5, #8
    b780:	3610      	adds	r6, #16
    b782:	b928      	cbnz	r0, b790 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b784:	f000 fea6 	bl	c4d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b788:	b910      	cbnz	r0, b790 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b78a:	f000 fead 	bl	c4e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b78e:	b108      	cbz	r0, b794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b790:	2224      	movs	r2, #36	; 0x24
    b792:	e006      	b.n	b7a2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b794:	f000 fee8 	bl	c568 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b798:	b910      	cbnz	r0, b7a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b79a:	f000 fedb 	bl	c554 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b79e:	b140      	cbz	r0, b7b2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b7a0:	2240      	movs	r2, #64	; 0x40
    b7a2:	21ff      	movs	r1, #255	; 0xff
    b7a4:	4638      	mov	r0, r7
    b7a6:	f000 ff75 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b7aa:	602c      	str	r4, [r5, #0]
    b7ac:	6034      	str	r4, [r6, #0]
    b7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7b2:	2238      	movs	r2, #56	; 0x38
    b7b4:	e7f5      	b.n	b7a2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b7b6:	0000      	.short	0x0000
    b7b8:	2000118c 	.word	0x2000118c
    b7bc:	40000e00 	.word	0x40000e00

0000b7c0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b7c0:	4805      	ldr	r0, [pc, #20]	; (b7d8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    b7c2:	b510      	push	{r4, lr}
    b7c4:	69c0      	ldr	r0, [r0, #28]
    b7c6:	2800      	cmp	r0, #0
    b7c8:	d104      	bne.n	b7d4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    b7ca:	f240 11fb 	movw	r1, #507	; 0x1fb
    b7ce:	203e      	movs	r0, #62	; 0x3e
    b7d0:	f7f8 fad6 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7d4:	bd10      	pop	{r4, pc}
    b7d6:	0000      	.short	0x0000
    b7d8:	2000118c 	.word	0x2000118c

0000b7dc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b7dc:	4814      	ldr	r0, [pc, #80]	; (b830 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b7de:	b510      	push	{r4, lr}
    b7e0:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b7e4:	7a40      	ldrb	r0, [r0, #9]
    b7e6:	b141      	cbz	r1, b7fa <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b7e8:	2902      	cmp	r1, #2
    b7ea:	d00b      	beq.n	b804 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b7ec:	2802      	cmp	r0, #2
    b7ee:	d009      	beq.n	b804 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b7f0:	2901      	cmp	r1, #1
    b7f2:	d00b      	beq.n	b80c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b7f4:	2801      	cmp	r0, #1
    b7f6:	d009      	beq.n	b80c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b7f8:	e016      	b.n	b828 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b7fa:	2800      	cmp	r0, #0
    b7fc:	d1f6      	bne.n	b7ec <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b7fe:	f240 117d 	movw	r1, #381	; 0x17d
    b802:	e00e      	b.n	b822 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    b804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b808:	f000 bc2a 	b.w	c060 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b80c:	4809      	ldr	r0, [pc, #36]	; (b834 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b80e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b812:	f000 000f 	and.w	r0, r0, #15
    b816:	2803      	cmp	r0, #3
    b818:	d006      	beq.n	b828 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b81a:	2804      	cmp	r0, #4
    b81c:	d006      	beq.n	b82c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    b81e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b822:	203e      	movs	r0, #62	; 0x3e
    b824:	f7f8 faac 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b828:	2001      	movs	r0, #1
    b82a:	bd10      	pop	{r4, pc}
    b82c:	2002      	movs	r0, #2
    b82e:	bd10      	pop	{r4, pc}
    b830:	2000118c 	.word	0x2000118c
    b834:	40001000 	.word	0x40001000

0000b838 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b838:	b510      	push	{r4, lr}
    b83a:	f000 fc7d 	bl	c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b83e:	f7ff fe4f 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b842:	f004 f880 	bl	f946 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b846:	480f      	ldr	r0, [pc, #60]	; (b884 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b848:	4a0f      	ldr	r2, [pc, #60]	; (b888 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b84a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b84c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b850:	6011      	str	r1, [r2, #0]
    b852:	2400      	movs	r4, #0
    b854:	6284      	str	r4, [r0, #40]	; 0x28
    b856:	7304      	strb	r4, [r0, #12]
    b858:	61c4      	str	r4, [r0, #28]
    b85a:	6184      	str	r4, [r0, #24]
    b85c:	f000 fc6c 	bl	c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b860:	480a      	ldr	r0, [pc, #40]	; (b88c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b862:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b866:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b86a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b86e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b872:	2001      	movs	r0, #1
    b874:	f004 f8a0 	bl	f9b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b87c:	2001      	movs	r0, #1
    b87e:	f004 b88e 	b.w	f99e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b882:	0000      	.short	0x0000
    b884:	2000118c 	.word	0x2000118c
    b888:	4001f508 	.word	0x4001f508
    b88c:	40008000 	.word	0x40008000

0000b890 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b890:	b570      	push	{r4, r5, r6, lr}
    b892:	2001      	movs	r0, #1
    b894:	f004 f890 	bl	f9b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b898:	4c37      	ldr	r4, [pc, #220]	; (b978 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b89a:	2000      	movs	r0, #0
    b89c:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b8a0:	2001      	movs	r0, #1
    b8a2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b8a6:	f000 fe35 	bl	c514 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b8aa:	4d34      	ldr	r5, [pc, #208]	; (b97c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8ac:	b118      	cbz	r0, b8b6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    b8ae:	6828      	ldr	r0, [r5, #0]
    b8b0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b8b4:	6028      	str	r0, [r5, #0]
    b8b6:	f000 fe21 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b8ba:	b128      	cbz	r0, b8c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    b8bc:	6828      	ldr	r0, [r5, #0]
    b8be:	4930      	ldr	r1, [pc, #192]	; (b980 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b8c0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b8c4:	4308      	orrs	r0, r1
    b8c6:	6028      	str	r0, [r5, #0]
    b8c8:	f000 fe34 	bl	c534 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b8cc:	b138      	cbz	r0, b8de <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    b8ce:	482b      	ldr	r0, [pc, #172]	; (b97c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8d0:	1d00      	adds	r0, r0, #4
    b8d2:	6801      	ldr	r1, [r0, #0]
    b8d4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b8d8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b8dc:	6001      	str	r1, [r0, #0]
    b8de:	4927      	ldr	r1, [pc, #156]	; (b97c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8e0:	4828      	ldr	r0, [pc, #160]	; (b984 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b8e2:	313c      	adds	r1, #60	; 0x3c
    b8e4:	6008      	str	r0, [r1, #0]
    b8e6:	f7f8 f8ff 	bl	3ae8 <mpsl_fem_device_config_254_apply_get>
    b8ea:	b140      	cbz	r0, b8fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b8ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8f0:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b8f4:	1c41      	adds	r1, r0, #1
    b8f6:	d002      	beq.n	b8fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b8f8:	4920      	ldr	r1, [pc, #128]	; (b97c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b8fa:	3110      	adds	r1, #16
    b8fc:	6008      	str	r0, [r1, #0]
    b8fe:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b902:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b904:	1c41      	adds	r1, r0, #1
    b906:	d004      	beq.n	b912 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    b908:	491f      	ldr	r1, [pc, #124]	; (b988 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b90a:	680a      	ldr	r2, [r1, #0]
    b90c:	f360 4217 	bfi	r2, r0, #16, #8
    b910:	600a      	str	r2, [r1, #0]
    b912:	f240 1103 	movw	r1, #259	; 0x103
    b916:	f240 605b 	movw	r0, #1627	; 0x65b
    b91a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    b91e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    b922:	2001      	movs	r0, #1
    b924:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    b928:	f000 fc88 	bl	c23c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b92c:	f240 1001 	movw	r0, #257	; 0x101
    b930:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    b934:	2002      	movs	r0, #2
    b936:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b93a:	4915      	ldr	r1, [pc, #84]	; (b990 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b93c:	4813      	ldr	r0, [pc, #76]	; (b98c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b93e:	6008      	str	r0, [r1, #0]
    b940:	4914      	ldr	r1, [pc, #80]	; (b994 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b942:	2000      	movs	r0, #0
    b944:	4d14      	ldr	r5, [pc, #80]	; (b998 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b946:	8608      	strh	r0, [r1, #48]	; 0x30
    b948:	3110      	adds	r1, #16
    b94a:	61c8      	str	r0, [r1, #28]
    b94c:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    b950:	7028      	strb	r0, [r5, #0]
    b952:	2001      	movs	r0, #1
    b954:	f004 f823 	bl	f99e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b958:	2010      	movs	r0, #16
    b95a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b95e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b962:	2002      	movs	r0, #2
    b964:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    b968:	6868      	ldr	r0, [r5, #4]
    b96a:	2800      	cmp	r0, #0
    b96c:	d002      	beq.n	b974 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    b96e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b972:	4700      	bx	r0
    b974:	bd70      	pop	{r4, r5, r6, pc}
    b976:	0000      	.short	0x0000
    b978:	40001000 	.word	0x40001000
    b97c:	4000173c 	.word	0x4000173c
    b980:	80000096 	.word	0x80000096
    b984:	8900002c 	.word	0x8900002c
    b988:	4000158c 	.word	0x4000158c
    b98c:	0c0e0000 	.word	0x0c0e0000
    b990:	4001f508 	.word	0x4001f508
    b994:	2000117c 	.word	0x2000117c
    b998:	20000264 	.word	0x20000264

0000b99c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b99c:	4901      	ldr	r1, [pc, #4]	; (b9a4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b99e:	7508      	strb	r0, [r1, #20]
    b9a0:	4770      	bx	lr
    b9a2:	0000      	.short	0x0000
    b9a4:	2000118c 	.word	0x2000118c

0000b9a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b9a8:	4905      	ldr	r1, [pc, #20]	; (b9c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b9aa:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    b9ae:	4805      	ldr	r0, [pc, #20]	; (b9c4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    b9b0:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b9b4:	f041 0101 	orr.w	r1, r1, #1
    b9b8:	7001      	strb	r1, [r0, #0]
    b9ba:	f000 ba7b 	b.w	beb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    b9be:	0000      	.short	0x0000
    b9c0:	40001000 	.word	0x40001000
    b9c4:	2000118c 	.word	0x2000118c

0000b9c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9cc:	4e36      	ldr	r6, [pc, #216]	; (baa8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    b9ce:	4607      	mov	r7, r0
    b9d0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b9d4:	4689      	mov	r9, r1
    b9d6:	4614      	mov	r4, r2
    b9d8:	6030      	str	r0, [r6, #0]
    b9da:	4610      	mov	r0, r2
    b9dc:	f000 fc2e 	bl	c23c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b9e0:	f000 f9e6 	bl	bdb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b9e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; baac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    b9e8:	4d31      	ldr	r5, [pc, #196]	; (bab0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    b9ea:	f04f 0801 	mov.w	r8, #1
    b9ee:	b127      	cbz	r7, b9fa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b9f0:	2f01      	cmp	r7, #1
    b9f2:	d01d      	beq.n	ba30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b9f4:	f240 710f 	movw	r1, #1807	; 0x70f
    b9f8:	e04c      	b.n	ba94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    b9fa:	4620      	mov	r0, r4
    b9fc:	f000 fa08 	bl	be10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    ba00:	4620      	mov	r0, r4
    ba02:	f000 f9b9 	bl	bd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ba06:	2c02      	cmp	r4, #2
    ba08:	d00f      	beq.n	ba2a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    ba0a:	f640 0034 	movw	r0, #2100	; 0x834
    ba0e:	bf00      	nop
    ba10:	f649 51f8 	movw	r1, #40440	; 0x9df8
    ba14:	4401      	add	r1, r0
    ba16:	4648      	mov	r0, r9
    ba18:	f000 fbb4 	bl	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    ba1c:	4604      	mov	r4, r0
    ba1e:	4650      	mov	r0, sl
    ba20:	f000 fb9c 	bl	c15c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ba24:	f885 8009 	strb.w	r8, [r5, #9]
    ba28:	e014      	b.n	ba54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    ba2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ba2e:	e7ef      	b.n	ba10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    ba30:	f000 fa16 	bl	be60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ba34:	f000 fb64 	bl	c100 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    ba38:	f000 fa8a 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    ba3c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ba40:	4648      	mov	r0, r9
    ba42:	f000 fb9f 	bl	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    ba46:	4604      	mov	r4, r0
    ba48:	4818      	ldr	r0, [pc, #96]	; (baac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    ba4a:	1d00      	adds	r0, r0, #4
    ba4c:	f000 fb86 	bl	c15c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ba50:	2002      	movs	r0, #2
    ba52:	7268      	strb	r0, [r5, #9]
    ba54:	f8df 905c 	ldr.w	r9, [pc, #92]	; bab4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    ba58:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    ba5c:	4917      	ldr	r1, [pc, #92]	; (babc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ba5e:	4816      	ldr	r0, [pc, #88]	; (bab8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ba60:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ba64:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ba66:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ba6a:	62a8      	str	r0, [r5, #40]	; 0x28
    ba6c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ba70:	6030      	str	r0, [r6, #0]
    ba72:	2010      	movs	r0, #16
    ba74:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    ba78:	03c0      	lsls	r0, r0, #15
    ba7a:	6030      	str	r0, [r6, #0]
    ba7c:	f000 fa54 	bl	bf28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    ba80:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    ba84:	480b      	ldr	r0, [pc, #44]	; (bab4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ba86:	300c      	adds	r0, #12
    ba88:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ba8c:	42a0      	cmp	r0, r4
    ba8e:	d304      	bcc.n	ba9a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    ba90:	f240 7136 	movw	r1, #1846	; 0x736
    ba94:	203e      	movs	r0, #62	; 0x3e
    ba96:	f7f8 f973 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba9a:	4621      	mov	r1, r4
    ba9c:	4638      	mov	r0, r7
    ba9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    baa2:	f003 bfba 	b.w	fa1a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    baa6:	0000      	.short	0x0000
    baa8:	4001f504 	.word	0x4001f504
    baac:	40001000 	.word	0x40001000
    bab0:	2000118c 	.word	0x2000118c
    bab4:	40008000 	.word	0x40008000
    bab8:	40008140 	.word	0x40008140
    babc:	4001f098 	.word	0x4001f098

0000bac0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bac0:	4b0d      	ldr	r3, [pc, #52]	; (baf8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bac2:	b510      	push	{r4, lr}
    bac4:	71d8      	strb	r0, [r3, #7]
    bac6:	729a      	strb	r2, [r3, #10]
    bac8:	b151      	cbz	r1, bae0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    baca:	2002      	movs	r0, #2
    bacc:	7218      	strb	r0, [r3, #8]
    bace:	2801      	cmp	r0, #1
    bad0:	d008      	beq.n	bae4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bad2:	2802      	cmp	r0, #2
    bad4:	d00f      	beq.n	baf6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bad6:	f640 1112 	movw	r1, #2322	; 0x912
    bada:	203e      	movs	r0, #62	; 0x3e
    badc:	f7f8 f950 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bae0:	2001      	movs	r0, #1
    bae2:	e7f3      	b.n	bacc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bae4:	7a58      	ldrb	r0, [r3, #9]
    bae6:	2802      	cmp	r0, #2
    bae8:	d105      	bne.n	baf6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    baea:	f000 f9b9 	bl	be60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    baee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    baf2:	f000 bb05 	b.w	c100 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    baf6:	bd10      	pop	{r4, pc}
    baf8:	2000118c 	.word	0x2000118c

0000bafc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bafc:	4902      	ldr	r1, [pc, #8]	; (bb08 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bafe:	2000      	movs	r0, #0
    bb00:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bb04:	4770      	bx	lr
    bb06:	0000      	.short	0x0000
    bb08:	40008000 	.word	0x40008000

0000bb0c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bb0c:	b538      	push	{r3, r4, r5, lr}
    bb0e:	4c0b      	ldr	r4, [pc, #44]	; (bb3c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bb10:	4605      	mov	r5, r0
    bb12:	f44f 718e 	mov.w	r1, #284	; 0x11c
    bb16:	4620      	mov	r0, r4
    bb18:	f003 ff97 	bl	fa4a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bb1c:	2800      	cmp	r0, #0
    bb1e:	d00c      	beq.n	bb3a <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    bb20:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    bb24:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bb28:	4240      	negs	r0, r0
    bb2a:	7028      	strb	r0, [r5, #0]
    bb2c:	2000      	movs	r0, #0
    bb2e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    bb32:	4803      	ldr	r0, [pc, #12]	; (bb40 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bb34:	6800      	ldr	r0, [r0, #0]
    bb36:	9000      	str	r0, [sp, #0]
    bb38:	2001      	movs	r0, #1
    bb3a:	bd38      	pop	{r3, r4, r5, pc}
    bb3c:	40001000 	.word	0x40001000
    bb40:	4000111c 	.word	0x4000111c

0000bb44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bb44:	4903      	ldr	r1, [pc, #12]	; (bb54 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bb46:	0e02      	lsrs	r2, r0, #24
    bb48:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bb4c:	0200      	lsls	r0, r0, #8
    bb4e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bb52:	4770      	bx	lr
    bb54:	40001000 	.word	0x40001000

0000bb58 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bb58:	6800      	ldr	r0, [r0, #0]
    bb5a:	4903      	ldr	r1, [pc, #12]	; (bb68 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bb5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb60:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bb64:	4770      	bx	lr
    bb66:	0000      	.short	0x0000
    bb68:	40001000 	.word	0x40001000

0000bb6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bb6c:	b510      	push	{r4, lr}
    bb6e:	f000 fb41 	bl	c1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    bb72:	4807      	ldr	r0, [pc, #28]	; (bb90 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    bb74:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bb78:	b2c0      	uxtb	r0, r0
    bb7a:	2803      	cmp	r0, #3
    bb7c:	d001      	beq.n	bb82 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    bb7e:	280b      	cmp	r0, #11
    bb80:	d104      	bne.n	bb8c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    bb82:	f44f 7121 	mov.w	r1, #644	; 0x284
    bb86:	203e      	movs	r0, #62	; 0x3e
    bb88:	f7f8 f8fa 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb8c:	bd10      	pop	{r4, pc}
    bb8e:	0000      	.short	0x0000
    bb90:	40001000 	.word	0x40001000

0000bb94 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bb94:	4901      	ldr	r1, [pc, #4]	; (bb9c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bb96:	7548      	strb	r0, [r1, #21]
    bb98:	4770      	bx	lr
    bb9a:	0000      	.short	0x0000
    bb9c:	2000118c 	.word	0x2000118c

0000bba0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bba4:	4853      	ldr	r0, [pc, #332]	; (bcf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bba6:	f04f 0a01 	mov.w	sl, #1
    bbaa:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bbae:	4851      	ldr	r0, [pc, #324]	; (bcf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bbb0:	300c      	adds	r0, #12
    bbb2:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bbb6:	4850      	ldr	r0, [pc, #320]	; (bcf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bbb8:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    bbbc:	4c4f      	ldr	r4, [pc, #316]	; (bcfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bbbe:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    bbc2:	f000 f957 	bl	be74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bbc6:	494e      	ldr	r1, [pc, #312]	; (bd00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bbc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bbca:	6008      	str	r0, [r1, #0]
    bbcc:	f8df 9134 	ldr.w	r9, [pc, #308]	; bd04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    bbd0:	2600      	movs	r6, #0
    bbd2:	62a6      	str	r6, [r4, #40]	; 0x28
    bbd4:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    bbd8:	f240 121d 	movw	r2, #285	; 0x11d
    bbdc:	4391      	bics	r1, r2
    bbde:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    bbe2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bbe6:	f000 f9c5 	bl	bf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    bbea:	4605      	mov	r5, r0
    bbec:	4841      	ldr	r0, [pc, #260]	; (bcf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bbee:	3008      	adds	r0, #8
    bbf0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bbf4:	61e0      	str	r0, [r4, #28]
    bbf6:	f7ff fdf1 	bl	b7dc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bbfa:	f884 0020 	strb.w	r0, [r4, #32]
    bbfe:	7a60      	ldrb	r0, [r4, #9]
    bc00:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bc04:	61a6      	str	r6, [r4, #24]
    bc06:	4e40      	ldr	r6, [pc, #256]	; (bd08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bc08:	07a8      	lsls	r0, r5, #30
    bc0a:	d502      	bpl.n	bc12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    bc0c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bc10:	61a0      	str	r0, [r4, #24]
    bc12:	0728      	lsls	r0, r5, #28
    bc14:	d502      	bpl.n	bc1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    bc16:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bc1a:	61a0      	str	r0, [r4, #24]
    bc1c:	f04f 0800 	mov.w	r8, #0
    bc20:	4639      	mov	r1, r7
    bc22:	4628      	mov	r0, r5
    bc24:	f000 fa32 	bl	c08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    bc28:	b918      	cbnz	r0, bc32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bc2a:	f8c9 a010 	str.w	sl, [r9, #16]
    bc2e:	f04f 0801 	mov.w	r8, #1
    bc32:	4f32      	ldr	r7, [pc, #200]	; (bcfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bc34:	07e8      	lsls	r0, r5, #31
    bc36:	f1a7 0710 	sub.w	r7, r7, #16
    bc3a:	d002      	beq.n	bc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    bc3c:	6838      	ldr	r0, [r7, #0]
    bc3e:	4780      	blx	r0
    bc40:	e031      	b.n	bca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bc42:	07a8      	lsls	r0, r5, #30
    bc44:	d526      	bpl.n	bc94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    bc46:	0768      	lsls	r0, r5, #29
    bc48:	d41e      	bmi.n	bc88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc4a:	f000 fc73 	bl	c534 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bc4e:	b9d8      	cbnz	r0, bc88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc50:	f000 fc60 	bl	c514 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc54:	b9c0      	cbnz	r0, bc88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc56:	482d      	ldr	r0, [pc, #180]	; (bd0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bc58:	6800      	ldr	r0, [r0, #0]
    bc5a:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bc5e:	f3c0 6100 	ubfx	r1, r0, #24, #1
    bc62:	f000 030f 	and.w	r3, r0, #15
    bc66:	f3c0 1203 	ubfx	r2, r0, #4, #4
    bc6a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bc6e:	b159      	cbz	r1, bc88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc70:	b10b      	cbz	r3, bc76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bc72:	b102      	cbz	r2, bc76 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bc74:	b940      	cbnz	r0, bc88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc76:	4825      	ldr	r0, [pc, #148]	; (bd0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bc78:	1d00      	adds	r0, r0, #4
    bc7a:	6800      	ldr	r0, [r0, #0]
    bc7c:	b120      	cbz	r0, bc88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc7e:	f1bc 0f03 	cmp.w	ip, #3
    bc82:	d201      	bcs.n	bc88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bc84:	f045 0504 	orr.w	r5, r5, #4
    bc88:	f345 0080 	sbfx	r0, r5, #2, #1
    bc8c:	4641      	mov	r1, r8
    bc8e:	1c40      	adds	r0, r0, #1
    bc90:	687a      	ldr	r2, [r7, #4]
    bc92:	e007      	b.n	bca4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    bc94:	f015 0f28 	tst.w	r5, #40	; 0x28
    bc98:	d005      	beq.n	bca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bc9a:	f345 1140 	sbfx	r1, r5, #5, #1
    bc9e:	68ba      	ldr	r2, [r7, #8]
    bca0:	4640      	mov	r0, r8
    bca2:	1c49      	adds	r1, r1, #1
    bca4:	4790      	blx	r2
    bca6:	06e8      	lsls	r0, r5, #27
    bca8:	d501      	bpl.n	bcae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    bcaa:	68f8      	ldr	r0, [r7, #12]
    bcac:	4780      	blx	r0
    bcae:	7a60      	ldrb	r0, [r4, #9]
    bcb0:	2802      	cmp	r0, #2
    bcb2:	d11c      	bne.n	bcee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bcb4:	7b20      	ldrb	r0, [r4, #12]
    bcb6:	2800      	cmp	r0, #0
    bcb8:	d019      	beq.n	bcee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bcba:	2802      	cmp	r0, #2
    bcbc:	d004      	beq.n	bcc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    bcbe:	2801      	cmp	r0, #1
    bcc0:	d006      	beq.n	bcd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    bcc2:	f640 21e1 	movw	r1, #2785	; 0xae1
    bcc6:	e009      	b.n	bcdc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bcc8:	6921      	ldr	r1, [r4, #16]
    bcca:	69e0      	ldr	r0, [r4, #28]
    bccc:	4408      	add	r0, r1
    bcce:	e008      	b.n	bce2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    bcd0:	69e1      	ldr	r1, [r4, #28]
    bcd2:	6920      	ldr	r0, [r4, #16]
    bcd4:	4288      	cmp	r0, r1
    bcd6:	d804      	bhi.n	bce2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    bcd8:	f640 21e2 	movw	r1, #2786	; 0xae2
    bcdc:	203e      	movs	r0, #62	; 0x3e
    bcde:	f7f8 f84f 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bce2:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    bce6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bcea:	f000 ba17 	b.w	c11c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    bcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bcf2:	0000      	.short	0x0000
    bcf4:	40008000 	.word	0x40008000
    bcf8:	4000b000 	.word	0x4000b000
    bcfc:	2000118c 	.word	0x2000118c
    bd00:	4001f508 	.word	0x4001f508
    bd04:	40001000 	.word	0x40001000
    bd08:	40008004 	.word	0x40008004
    bd0c:	40001450 	.word	0x40001450

0000bd10 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bd10:	b570      	push	{r4, r5, r6, lr}
    bd12:	4b15      	ldr	r3, [pc, #84]	; (bd68 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    bd14:	888c      	ldrh	r4, [r1, #4]
    bd16:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    bd1a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    bd1e:	780c      	ldrb	r4, [r1, #0]
    bd20:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bd24:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bd28:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    bd2c:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    bd30:	2101      	movs	r1, #1
    bd32:	4081      	lsls	r1, r0
    bd34:	430c      	orrs	r4, r1
    bd36:	b2e4      	uxtb	r4, r4
    bd38:	b132      	cbz	r2, bd48 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    bd3a:	2a01      	cmp	r2, #1
    bd3c:	d00a      	beq.n	bd54 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    bd3e:	f240 41ac 	movw	r1, #1196	; 0x4ac
    bd42:	203e      	movs	r0, #62	; 0x3e
    bd44:	f7f8 f81c 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd48:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bd4c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bd50:	4388      	bics	r0, r1
    bd52:	e004      	b.n	bd5e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    bd54:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bd58:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    bd5c:	b2c0      	uxtb	r0, r0
    bd5e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    bd62:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bd66:	bd70      	pop	{r4, r5, r6, pc}
    bd68:	40001000 	.word	0x40001000

0000bd6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bd6c:	4901      	ldr	r1, [pc, #4]	; (bd74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bd6e:	2001      	movs	r0, #1
    bd70:	7008      	strb	r0, [r1, #0]
    bd72:	4770      	bx	lr
    bd74:	20000264 	.word	0x20000264
    bd78:	b510      	push	{r4, lr}
    bd7a:	4604      	mov	r4, r0
    bd7c:	f000 fbda 	bl	c534 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd80:	2800      	cmp	r0, #0
    bd82:	d00e      	beq.n	bda2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bd84:	4a09      	ldr	r2, [pc, #36]	; (bdac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bd86:	6811      	ldr	r1, [r2, #0]
    bd88:	0650      	lsls	r0, r2, #25
    bd8a:	2c02      	cmp	r4, #2
    bd8c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bd90:	d008      	beq.n	bda4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    bd92:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bd96:	bf00      	nop
    bd98:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bd9c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bda0:	6010      	str	r0, [r2, #0]
    bda2:	bd10      	pop	{r4, pc}
    bda4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bda8:	e7f6      	b.n	bd98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bdaa:	0000      	.short	0x0000
    bdac:	40001588 	.word	0x40001588
    bdb0:	4815      	ldr	r0, [pc, #84]	; (be08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    bdb2:	7d41      	ldrb	r1, [r0, #21]
    bdb4:	2925      	cmp	r1, #37	; 0x25
    bdb6:	d00a      	beq.n	bdce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    bdb8:	2926      	cmp	r1, #38	; 0x26
    bdba:	d00b      	beq.n	bdd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    bdbc:	2927      	cmp	r1, #39	; 0x27
    bdbe:	d00c      	beq.n	bdda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    bdc0:	7d40      	ldrb	r0, [r0, #21]
    bdc2:	0040      	lsls	r0, r0, #1
    bdc4:	290a      	cmp	r1, #10
    bdc6:	d80b      	bhi.n	bde0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    bdc8:	f600 1064 	addw	r0, r0, #2404	; 0x964
    bdcc:	e00a      	b.n	bde4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    bdce:	f640 1062 	movw	r0, #2402	; 0x962
    bdd2:	e00f      	b.n	bdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bdd4:	f640 107a 	movw	r0, #2426	; 0x97a
    bdd8:	e00c      	b.n	bdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bdda:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    bdde:	e009      	b.n	bdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bde0:	f600 1066 	addw	r0, r0, #2406	; 0x966
    bde4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    bde8:	d204      	bcs.n	bdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bdea:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    bdee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bdf2:	e001      	b.n	bdf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    bdf4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    bdf8:	4a04      	ldr	r2, [pc, #16]	; (be0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    bdfa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    bdfe:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    be02:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    be06:	4770      	bx	lr
    be08:	2000118c 	.word	0x2000118c
    be0c:	40001000 	.word	0x40001000
    be10:	4912      	ldr	r1, [pc, #72]	; (be5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    be12:	b508      	push	{r3, lr}
    be14:	f991 2014 	ldrsb.w	r2, [r1, #20]
    be18:	7d49      	ldrb	r1, [r1, #21]
    be1a:	2801      	cmp	r0, #1
    be1c:	d00a      	beq.n	be34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    be1e:	2802      	cmp	r0, #2
    be20:	d00a      	beq.n	be38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    be22:	2804      	cmp	r0, #4
    be24:	d00a      	beq.n	be3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    be26:	2808      	cmp	r0, #8
    be28:	d00a      	beq.n	be40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    be2a:	f240 31ed 	movw	r1, #1005	; 0x3ed
    be2e:	2006      	movs	r0, #6
    be30:	f7f7 ffa6 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be34:	2000      	movs	r0, #0
    be36:	e004      	b.n	be42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    be38:	2001      	movs	r0, #1
    be3a:	e002      	b.n	be42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    be3c:	2003      	movs	r0, #3
    be3e:	e000      	b.n	be42 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    be40:	2002      	movs	r0, #2
    be42:	466b      	mov	r3, sp
    be44:	f7f4 fad6 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    be48:	b118      	cbz	r0, be52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    be4a:	f240 41de 	movw	r1, #1246	; 0x4de
    be4e:	203e      	movs	r0, #62	; 0x3e
    be50:	e7ee      	b.n	be30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    be52:	f99d 0000 	ldrsb.w	r0, [sp]
    be56:	f000 f9eb 	bl	c230 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    be5a:	bd08      	pop	{r3, pc}
    be5c:	2000118c 	.word	0x2000118c
    be60:	4803      	ldr	r0, [pc, #12]	; (be70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    be62:	7a01      	ldrb	r1, [r0, #8]
    be64:	2901      	cmp	r1, #1
    be66:	d102      	bne.n	be6e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    be68:	7a80      	ldrb	r0, [r0, #10]
    be6a:	f7ff bfd1 	b.w	be10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    be6e:	4770      	bx	lr
    be70:	2000118c 	.word	0x2000118c
    be74:	4805      	ldr	r0, [pc, #20]	; (be8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    be76:	7a40      	ldrb	r0, [r0, #9]
    be78:	2801      	cmp	r0, #1
    be7a:	d003      	beq.n	be84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    be7c:	2802      	cmp	r0, #2
    be7e:	d103      	bne.n	be88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    be80:	f003 bd49 	b.w	f916 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    be84:	f003 bd53 	b.w	f92e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    be88:	4770      	bx	lr
    be8a:	0000      	.short	0x0000
    be8c:	2000118c 	.word	0x2000118c
    be90:	4807      	ldr	r0, [pc, #28]	; (beb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    be92:	2100      	movs	r1, #0
    be94:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    be98:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    be9c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    bea0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bea4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    bea8:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    beac:	4770      	bx	lr
    beae:	0000      	.short	0x0000
    beb0:	40001000 	.word	0x40001000
    beb4:	4818      	ldr	r0, [pc, #96]	; (bf18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    beb6:	b510      	push	{r4, lr}
    beb8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    bebc:	07c1      	lsls	r1, r0, #31
    bebe:	d029      	beq.n	bf14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bec0:	0781      	lsls	r1, r0, #30
    bec2:	d514      	bpl.n	beee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    bec4:	4815      	ldr	r0, [pc, #84]	; (bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    bec6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    beca:	f041 0101 	orr.w	r1, r1, #1
    bece:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bed2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bed6:	b2c0      	uxtb	r0, r0
    bed8:	280b      	cmp	r0, #11
    beda:	d005      	beq.n	bee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    bedc:	280a      	cmp	r0, #10
    bede:	d003      	beq.n	bee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    bee0:	2803      	cmp	r0, #3
    bee2:	d001      	beq.n	bee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    bee4:	2802      	cmp	r0, #2
    bee6:	d115      	bne.n	bf14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bee8:	f240 510f 	movw	r1, #1295	; 0x50f
    beec:	e00f      	b.n	bf0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    beee:	0740      	lsls	r0, r0, #29
    bef0:	d510      	bpl.n	bf14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bef2:	480a      	ldr	r0, [pc, #40]	; (bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    bef4:	490a      	ldr	r1, [pc, #40]	; (bf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    bef6:	3008      	adds	r0, #8
    bef8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    befc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    bf00:	4808      	ldr	r0, [pc, #32]	; (bf24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    bf02:	f003 fda7 	bl	fa54 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    bf06:	2800      	cmp	r0, #0
    bf08:	d004      	beq.n	bf14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bf0a:	f240 5117 	movw	r1, #1303	; 0x517
    bf0e:	203e      	movs	r0, #62	; 0x3e
    bf10:	f7f7 ff36 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf14:	bd10      	pop	{r4, pc}
    bf16:	0000      	.short	0x0000
    bf18:	2000118c 	.word	0x2000118c
    bf1c:	40001000 	.word	0x40001000
    bf20:	4001f098 	.word	0x4001f098
    bf24:	40008000 	.word	0x40008000
    bf28:	4808      	ldr	r0, [pc, #32]	; (bf4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    bf2a:	4601      	mov	r1, r0
    bf2c:	79c2      	ldrb	r2, [r0, #7]
    bf2e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    bf32:	b112      	cbz	r2, bf3a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    bf34:	2a01      	cmp	r2, #1
    bf36:	d003      	beq.n	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    bf38:	e006      	b.n	bf48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    bf3a:	f041 0102 	orr.w	r1, r1, #2
    bf3e:	e001      	b.n	bf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    bf40:	f041 0104 	orr.w	r1, r1, #4
    bf44:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    bf48:	f7ff bfb4 	b.w	beb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    bf4c:	2000118c 	.word	0x2000118c
    bf50:	b510      	push	{r4, lr}
    bf52:	f000 faef 	bl	c534 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bf56:	2800      	cmp	r0, #0
    bf58:	d108      	bne.n	bf6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    bf5a:	f000 fadb 	bl	c514 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bf5e:	2800      	cmp	r0, #0
    bf60:	d104      	bne.n	bf6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    bf62:	4803      	ldr	r0, [pc, #12]	; (bf70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    bf64:	6801      	ldr	r1, [r0, #0]
    bf66:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bf6a:	6001      	str	r1, [r0, #0]
    bf6c:	bd10      	pop	{r4, pc}
    bf6e:	0000      	.short	0x0000
    bf70:	40001568 	.word	0x40001568
    bf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf78:	4d35      	ldr	r5, [pc, #212]	; (c050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    bf7a:	2400      	movs	r4, #0
    bf7c:	7b28      	ldrb	r0, [r5, #12]
    bf7e:	b138      	cbz	r0, bf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bf80:	f44f 71a2 	mov.w	r1, #324	; 0x144
    bf84:	4833      	ldr	r0, [pc, #204]	; (c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    bf86:	f003 fd65 	bl	fa54 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    bf8a:	b108      	cbz	r0, bf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bf8c:	2601      	movs	r6, #1
    bf8e:	e000      	b.n	bf92 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    bf90:	2600      	movs	r6, #0
    bf92:	7a68      	ldrb	r0, [r5, #9]
    bf94:	4f30      	ldr	r7, [pc, #192]	; (c058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    bf96:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bf9a:	2801      	cmp	r0, #1
    bf9c:	d002      	beq.n	bfa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    bf9e:	2802      	cmp	r0, #2
    bfa0:	d008      	beq.n	bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bfa2:	e018      	b.n	bfd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    bfa4:	4638      	mov	r0, r7
    bfa6:	f003 fd50 	bl	fa4a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bfaa:	b108      	cbz	r0, bfb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    bfac:	2408      	movs	r4, #8
    bfae:	e012      	b.n	bfd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    bfb0:	2400      	movs	r4, #0
    bfb2:	e010      	b.n	bfd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    bfb4:	4638      	mov	r0, r7
    bfb6:	f003 fd48 	bl	fa4a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bfba:	b100      	cbz	r0, bfbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    bfbc:	2002      	movs	r0, #2
    bfbe:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    bfc2:	43c9      	mvns	r1, r1
    bfc4:	f341 0100 	sbfx	r1, r1, #0, #1
    bfc8:	1c49      	adds	r1, r1, #1
    bfca:	d001      	beq.n	bfd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    bfcc:	2400      	movs	r4, #0
    bfce:	e000      	b.n	bfd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    bfd0:	2404      	movs	r4, #4
    bfd2:	4304      	orrs	r4, r0
    bfd4:	4334      	orrs	r4, r6
    bfd6:	f014 0f0b 	tst.w	r4, #11
    bfda:	d107      	bne.n	bfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    bfdc:	f44f 7188 	mov.w	r1, #272	; 0x110
    bfe0:	4638      	mov	r0, r7
    bfe2:	f003 fd32 	bl	fa4a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bfe6:	b100      	cbz	r0, bfea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    bfe8:	2010      	movs	r0, #16
    bfea:	4304      	orrs	r4, r0
    bfec:	481b      	ldr	r0, [pc, #108]	; (c05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    bfee:	7800      	ldrb	r0, [r0, #0]
    bff0:	b1f8      	cbz	r0, c032 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    bff2:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    bff6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    bffa:	d007      	beq.n	c00c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    bffc:	f44f 718a 	mov.w	r1, #276	; 0x114
    c000:	4638      	mov	r0, r7
    c002:	f003 fd22 	bl	fa4a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c006:	b108      	cbz	r0, c00c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c008:	2001      	movs	r0, #1
    c00a:	e000      	b.n	c00e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c00c:	2000      	movs	r0, #0
    c00e:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c012:	b13e      	cbz	r6, c024 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c014:	f44f 718c 	mov.w	r1, #280	; 0x118
    c018:	4638      	mov	r0, r7
    c01a:	f003 fd16 	bl	fa4a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c01e:	b108      	cbz	r0, c024 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c020:	2001      	movs	r0, #1
    c022:	e000      	b.n	c026 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    c024:	2000      	movs	r0, #0
    c026:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c02a:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c02e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c032:	f7ff ff2d 	bl	be90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    c036:	06e0      	lsls	r0, r4, #27
    c038:	d506      	bpl.n	c048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c03a:	0720      	lsls	r0, r4, #28
    c03c:	d404      	bmi.n	c048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c03e:	7a68      	ldrb	r0, [r5, #9]
    c040:	2801      	cmp	r0, #1
    c042:	d101      	bne.n	c048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c044:	f044 0420 	orr.w	r4, r4, #32
    c048:	4620      	mov	r0, r4
    c04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c04e:	0000      	.short	0x0000
    c050:	2000118c 	.word	0x2000118c
    c054:	40008000 	.word	0x40008000
    c058:	40001000 	.word	0x40001000
    c05c:	20000264 	.word	0x20000264
    c060:	4809      	ldr	r0, [pc, #36]	; (c088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    c062:	b510      	push	{r4, lr}
    c064:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c068:	f000 000f 	and.w	r0, r0, #15
    c06c:	2803      	cmp	r0, #3
    c06e:	d006      	beq.n	c07e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    c070:	2804      	cmp	r0, #4
    c072:	d006      	beq.n	c082 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    c074:	f240 11dd 	movw	r1, #477	; 0x1dd
    c078:	203e      	movs	r0, #62	; 0x3e
    c07a:	f7f7 fe81 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c07e:	2001      	movs	r0, #1
    c080:	bd10      	pop	{r4, pc}
    c082:	2002      	movs	r0, #2
    c084:	bd10      	pop	{r4, pc}
    c086:	0000      	.short	0x0000
    c088:	40001000 	.word	0x40001000
    c08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c090:	4c19      	ldr	r4, [pc, #100]	; (c0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c092:	460d      	mov	r5, r1
    c094:	7a21      	ldrb	r1, [r4, #8]
    c096:	b129      	cbz	r1, c0a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    c098:	f010 0f11 	tst.w	r0, #17
    c09c:	d00b      	beq.n	c0b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c09e:	f7ff fa1f 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c0a2:	e027      	b.n	c0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c0a4:	4915      	ldr	r1, [pc, #84]	; (c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    c0a6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c0aa:	6008      	str	r0, [r1, #0]
    c0ac:	f000 f862 	bl	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c0b0:	2000      	movs	r0, #0
    c0b2:	7320      	strb	r0, [r4, #12]
    c0b4:	e01e      	b.n	c0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c0b6:	2901      	cmp	r1, #1
    c0b8:	d001      	beq.n	c0be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    c0ba:	2601      	movs	r6, #1
    c0bc:	e000      	b.n	c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c0be:	2600      	movs	r6, #0
    c0c0:	79e0      	ldrb	r0, [r4, #7]
    c0c2:	2801      	cmp	r0, #1
    c0c4:	d00e      	beq.n	c0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c0c6:	2700      	movs	r7, #0
    c0c8:	f000 f854 	bl	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c0cc:	2196      	movs	r1, #150	; 0x96
    c0ce:	4630      	mov	r0, r6
    c0d0:	f000 f866 	bl	c1a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c0d4:	4601      	mov	r1, r0
    c0d6:	b14f      	cbz	r7, c0ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c0d8:	353b      	adds	r5, #59	; 0x3b
    c0da:	428d      	cmp	r5, r1
    c0dc:	d904      	bls.n	c0e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    c0de:	2000      	movs	r0, #0
    c0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0e4:	2701      	movs	r7, #1
    c0e6:	e7ef      	b.n	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c0e8:	2001      	movs	r0, #1
    c0ea:	71e0      	strb	r0, [r4, #7]
    c0ec:	7aa2      	ldrb	r2, [r4, #10]
    c0ee:	4630      	mov	r0, r6
    c0f0:	f7ff fc6a 	bl	b9c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c0f4:	2001      	movs	r0, #1
    c0f6:	e7f3      	b.n	c0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c0f8:	2000118c 	.word	0x2000118c
    c0fc:	4001f508 	.word	0x4001f508
    c100:	4805      	ldr	r0, [pc, #20]	; (c118 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    c102:	2100      	movs	r1, #0
    c104:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c108:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c10c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c110:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c114:	4770      	bx	lr
    c116:	0000      	.short	0x0000
    c118:	40001000 	.word	0x40001000
    c11c:	4804      	ldr	r0, [pc, #16]	; (c130 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c11e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c120:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c124:	6281      	str	r1, [r0, #40]	; 0x28
    c126:	4903      	ldr	r1, [pc, #12]	; (c134 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    c128:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c12c:	6008      	str	r0, [r1, #0]
    c12e:	4770      	bx	lr
    c130:	2000118c 	.word	0x2000118c
    c134:	4001f504 	.word	0x4001f504
    c138:	4a07      	ldr	r2, [pc, #28]	; (c158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c13a:	2000      	movs	r0, #0
    c13c:	3208      	adds	r2, #8
    c13e:	4906      	ldr	r1, [pc, #24]	; (c158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c140:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c144:	1d0a      	adds	r2, r1, #4
    c146:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c14a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c14e:	4902      	ldr	r1, [pc, #8]	; (c158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c150:	310c      	adds	r1, #12
    c152:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c156:	4770      	bx	lr
    c158:	40008000 	.word	0x40008000
    c15c:	4903      	ldr	r1, [pc, #12]	; (c16c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    c15e:	79c9      	ldrb	r1, [r1, #7]
    c160:	2900      	cmp	r1, #0
    c162:	d102      	bne.n	c16a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    c164:	4902      	ldr	r1, [pc, #8]	; (c170 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    c166:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c16a:	4770      	bx	lr
    c16c:	2000118c 	.word	0x2000118c
    c170:	4001f098 	.word	0x4001f098
    c174:	4802      	ldr	r0, [pc, #8]	; (c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    c176:	2100      	movs	r1, #0
    c178:	71c1      	strb	r1, [r0, #7]
    c17a:	7201      	strb	r1, [r0, #8]
    c17c:	7241      	strb	r1, [r0, #9]
    c17e:	4770      	bx	lr
    c180:	2000118c 	.word	0x2000118c
    c184:	4a05      	ldr	r2, [pc, #20]	; (c19c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    c186:	79d2      	ldrb	r2, [r2, #7]
    c188:	2a01      	cmp	r2, #1
    c18a:	d006      	beq.n	c19a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    c18c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c190:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c194:	fbb1 f1f2 	udiv	r1, r1, r2
    c198:	1a40      	subs	r0, r0, r1
    c19a:	4770      	bx	lr
    c19c:	2000118c 	.word	0x2000118c
    c1a0:	b570      	push	{r4, r5, r6, lr}
    c1a2:	4c13      	ldr	r4, [pc, #76]	; (c1f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    c1a4:	4603      	mov	r3, r0
    c1a6:	460d      	mov	r5, r1
    c1a8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c1ac:	2000      	movs	r0, #0
    c1ae:	b15a      	cbz	r2, c1c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c1b0:	4621      	mov	r1, r4
    c1b2:	f891 1020 	ldrb.w	r1, [r1, #32]
    c1b6:	b163      	cbz	r3, c1d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    c1b8:	2b01      	cmp	r3, #1
    c1ba:	d111      	bne.n	c1e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    c1bc:	2a01      	cmp	r2, #1
    c1be:	4628      	mov	r0, r5
    c1c0:	d012      	beq.n	c1e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    c1c2:	f003 fc8c 	bl	fade <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c1c6:	e009      	b.n	c1dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c1c8:	f240 7152 	movw	r1, #1874	; 0x752
    c1cc:	203e      	movs	r0, #62	; 0x3e
    c1ce:	f7f7 fdd7 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1d2:	2a01      	cmp	r2, #1
    c1d4:	4628      	mov	r0, r5
    c1d6:	d004      	beq.n	c1e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c1d8:	f003 fc8f 	bl	fafa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c1dc:	69e1      	ldr	r1, [r4, #28]
    c1de:	4408      	add	r0, r1
    c1e0:	bd70      	pop	{r4, r5, r6, pc}
    c1e2:	f003 fca4 	bl	fb2e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c1e6:	e7f9      	b.n	c1dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c1e8:	f003 fc92 	bl	fb10 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c1ec:	e7f6      	b.n	c1dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c1ee:	0000      	.short	0x0000
    c1f0:	2000118c 	.word	0x2000118c
    c1f4:	b510      	push	{r4, lr}
    c1f6:	2200      	movs	r2, #0
    c1f8:	2901      	cmp	r1, #1
    c1fa:	d008      	beq.n	c20e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    c1fc:	2902      	cmp	r1, #2
    c1fe:	d004      	beq.n	c20a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    c200:	f240 2163 	movw	r1, #611	; 0x263
    c204:	203e      	movs	r0, #62	; 0x3e
    c206:	f7f7 fdbb 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c20a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c20e:	4905      	ldr	r1, [pc, #20]	; (c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    c210:	430a      	orrs	r2, r1
    c212:	4905      	ldr	r1, [pc, #20]	; (c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c214:	600a      	str	r2, [r1, #0]
    c216:	4905      	ldr	r1, [pc, #20]	; (c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    c218:	4308      	orrs	r0, r1
    c21a:	4903      	ldr	r1, [pc, #12]	; (c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c21c:	1d09      	adds	r1, r1, #4
    c21e:	6008      	str	r0, [r1, #0]
    c220:	bd10      	pop	{r4, pc}
    c222:	0000      	.short	0x0000
    c224:	00100108 	.word	0x00100108
    c228:	40001514 	.word	0x40001514
    c22c:	02030000 	.word	0x02030000

0000c230 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c230:	4901      	ldr	r1, [pc, #4]	; (c238 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c232:	b2c0      	uxtb	r0, r0
    c234:	6008      	str	r0, [r1, #0]
    c236:	4770      	bx	lr
    c238:	4000150c 	.word	0x4000150c

0000c23c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c23c:	b510      	push	{r4, lr}
    c23e:	4907      	ldr	r1, [pc, #28]	; (c25c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c240:	2801      	cmp	r0, #1
    c242:	d005      	beq.n	c250 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c244:	2802      	cmp	r0, #2
    c246:	d005      	beq.n	c254 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c248:	218b      	movs	r1, #139	; 0x8b
    c24a:	203f      	movs	r0, #63	; 0x3f
    c24c:	f7f7 fd98 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c250:	2003      	movs	r0, #3
    c252:	e000      	b.n	c256 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c254:	2004      	movs	r0, #4
    c256:	6008      	str	r0, [r1, #0]
    c258:	bd10      	pop	{r4, pc}
    c25a:	0000      	.short	0x0000
    c25c:	40001510 	.word	0x40001510

0000c260 <strcmp>:
    c260:	f810 2b01 	ldrb.w	r2, [r0], #1
    c264:	f811 3b01 	ldrb.w	r3, [r1], #1
    c268:	2a01      	cmp	r2, #1
    c26a:	bf28      	it	cs
    c26c:	429a      	cmpcs	r2, r3
    c26e:	d0f7      	beq.n	c260 <strcmp>
    c270:	1ad0      	subs	r0, r2, r3
    c272:	4770      	bx	lr

0000c274 <strlen>:
    c274:	4603      	mov	r3, r0
    c276:	f813 2b01 	ldrb.w	r2, [r3], #1
    c27a:	2a00      	cmp	r2, #0
    c27c:	d1fb      	bne.n	c276 <strlen+0x2>
    c27e:	1a18      	subs	r0, r3, r0
    c280:	3801      	subs	r0, #1
    c282:	4770      	bx	lr

0000c284 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c284:	4770      	bx	lr
    c286:	2100      	movs	r1, #0
    c288:	7081      	strb	r1, [r0, #2]
    c28a:	7001      	strb	r1, [r0, #0]
    c28c:	7041      	strb	r1, [r0, #1]
    c28e:	4770      	bx	lr

0000c290 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c290:	b570      	push	{r4, r5, r6, lr}
    c292:	f7f4 f8c9 	bl	428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c296:	4605      	mov	r5, r0
    c298:	2400      	movs	r4, #0
    c29a:	e006      	b.n	c2aa <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c29c:	4620      	mov	r0, r4
    c29e:	f7f4 f8c9 	bl	434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c2a2:	f7ff fff0 	bl	c286 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c2a6:	1c64      	adds	r4, r4, #1
    c2a8:	b2e4      	uxtb	r4, r4
    c2aa:	42ac      	cmp	r4, r5
    c2ac:	d3f6      	bcc.n	c29c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c2ae:	bd70      	pop	{r4, r5, r6, pc}

0000c2b0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c2b0:	2000      	movs	r0, #0
    c2b2:	f7f6 bec9 	b.w	3048 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c2b6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c2b6:	b510      	push	{r4, lr}
    c2b8:	f7f6 fb9c 	bl	29f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2c0:	f000 b800 	b.w	c2c4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c2c4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c2c4:	0a41      	lsrs	r1, r0, #9
    c2c6:	f643 5209 	movw	r2, #15625	; 0x3d09
    c2ca:	4351      	muls	r1, r2
    c2cc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c2d0:	fb10 f002 	smulbb	r0, r0, r2
    c2d4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c2d8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c2dc:	4770      	bx	lr

0000c2de <MPSL_IRQ_RADIO_Handler>:
    c2de:	f7f5 b9b1 	b.w	1644 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c2e2:	2800      	cmp	r0, #0
    c2e4:	db09      	blt.n	c2fa <MPSL_IRQ_RADIO_Handler+0x1c>
    c2e6:	f000 021f 	and.w	r2, r0, #31
    c2ea:	2101      	movs	r1, #1
    c2ec:	4091      	lsls	r1, r2
    c2ee:	0940      	lsrs	r0, r0, #5
    c2f0:	0080      	lsls	r0, r0, #2
    c2f2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c2f6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c2fa:	4770      	bx	lr
    c2fc:	2800      	cmp	r0, #0
    c2fe:	db0d      	blt.n	c31c <MPSL_IRQ_RADIO_Handler+0x3e>
    c300:	f000 021f 	and.w	r2, r0, #31
    c304:	2101      	movs	r1, #1
    c306:	4091      	lsls	r1, r2
    c308:	0940      	lsrs	r0, r0, #5
    c30a:	0080      	lsls	r0, r0, #2
    c30c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c310:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c314:	f3bf 8f4f 	dsb	sy
    c318:	f3bf 8f6f 	isb	sy
    c31c:	4770      	bx	lr

0000c31e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c31e:	b570      	push	{r4, r5, r6, lr}
    c320:	4602      	mov	r2, r0
    c322:	2000      	movs	r0, #0
    c324:	2900      	cmp	r1, #0
    c326:	d01d      	beq.n	c364 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c328:	fba2 0101 	umull	r0, r1, r2, r1
    c32c:	0a40      	lsrs	r0, r0, #9
    c32e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c332:	0a49      	lsrs	r1, r1, #9
    c334:	1c40      	adds	r0, r0, #1
    c336:	f141 0100 	adc.w	r1, r1, #0
    c33a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c33e:	1883      	adds	r3, r0, r2
    c340:	f141 0100 	adc.w	r1, r1, #0
    c344:	1c5b      	adds	r3, r3, #1
    c346:	f141 0400 	adc.w	r4, r1, #0
    c34a:	2100      	movs	r1, #0
    c34c:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c350:	41a1      	sbcs	r1, r4
    c352:	d203      	bcs.n	c35c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c354:	2171      	movs	r1, #113	; 0x71
    c356:	206d      	movs	r0, #109	; 0x6d
    c358:	f7f7 fa32 	bl	37c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c35c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c360:	fbb0 f0f2 	udiv	r0, r0, r2
    c364:	bd70      	pop	{r4, r5, r6, pc}
    c366:	5840      	ldr	r0, [r0, r1]
    c368:	2800      	cmp	r0, #0
    c36a:	d000      	beq.n	c36e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c36c:	2001      	movs	r0, #1
    c36e:	4770      	bx	lr
    c370:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c374:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c378:	f002 0201 	and.w	r2, r2, #1
    c37c:	03c0      	lsls	r0, r0, #15
    c37e:	d503      	bpl.n	c388 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c380:	428a      	cmp	r2, r1
    c382:	d101      	bne.n	c388 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c384:	2001      	movs	r0, #1
    c386:	4770      	bx	lr
    c388:	2000      	movs	r0, #0
    c38a:	4770      	bx	lr

0000c38c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c38c:	b510      	push	{r4, lr}
    c38e:	2101      	movs	r1, #1
    c390:	0788      	lsls	r0, r1, #30
    c392:	f7f7 f9bf 	bl	3714 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c396:	2800      	cmp	r0, #0
    c398:	d000      	beq.n	c39c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c39a:	2001      	movs	r0, #1
    c39c:	bd10      	pop	{r4, pc}

0000c39e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c39e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3a2:	2101      	movs	r1, #1
    c3a4:	6001      	str	r1, [r0, #0]
    c3a6:	4770      	bx	lr

0000c3a8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c3a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c3ac:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c3b0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c3b4:	f002 0203 	and.w	r2, r2, #3
    c3b8:	03c9      	lsls	r1, r1, #15
    c3ba:	d503      	bpl.n	c3c4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c3bc:	4282      	cmp	r2, r0
    c3be:	d101      	bne.n	c3c4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c3c0:	2001      	movs	r0, #1
    c3c2:	4770      	bx	lr
    c3c4:	2000      	movs	r0, #0
    c3c6:	4770      	bx	lr

0000c3c8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c3c8:	b510      	push	{r4, lr}
    c3ca:	2100      	movs	r1, #0
    c3cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3d0:	f7f7 f9a0 	bl	3714 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c3d4:	2800      	cmp	r0, #0
    c3d6:	d000      	beq.n	c3da <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c3d8:	2001      	movs	r0, #1
    c3da:	bd10      	pop	{r4, pc}
    c3dc:	2800      	cmp	r0, #0
    c3de:	db09      	blt.n	c3f4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c3e0:	f000 021f 	and.w	r2, r0, #31
    c3e4:	2101      	movs	r1, #1
    c3e6:	4091      	lsls	r1, r2
    c3e8:	0940      	lsrs	r0, r0, #5
    c3ea:	0080      	lsls	r0, r0, #2
    c3ec:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3f0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c3f4:	4770      	bx	lr
    c3f6:	2800      	cmp	r0, #0
    c3f8:	db0d      	blt.n	c416 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c3fa:	f000 021f 	and.w	r2, r0, #31
    c3fe:	2101      	movs	r1, #1
    c400:	4091      	lsls	r1, r2
    c402:	0940      	lsrs	r0, r0, #5
    c404:	0080      	lsls	r0, r0, #2
    c406:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c40a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c40e:	f3bf 8f4f 	dsb	sy
    c412:	f3bf 8f6f 	isb	sy
    c416:	4770      	bx	lr
    c418:	00021000 	.word	0x00021000
    c41c:	000000fa 	.word	0x000000fa
    c420:	24625723 	.word	0x24625723
    c424:	578f3123 	.word	0x578f3123
    c428:	2fd1ee74 	.word	0x2fd1ee74
    c42c:	4594c088 	.word	0x4594c088
    c430:	36f9a2f7 	.word	0x36f9a2f7
    c434:	2800      	cmp	r0, #0
    c436:	db09      	blt.n	c44c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c438:	f000 021f 	and.w	r2, r0, #31
    c43c:	2101      	movs	r1, #1
    c43e:	4091      	lsls	r1, r2
    c440:	0940      	lsrs	r0, r0, #5
    c442:	0080      	lsls	r0, r0, #2
    c444:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c448:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c44c:	4770      	bx	lr

0000c44e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c44e:	f3ef 8110 	mrs	r1, PRIMASK
    c452:	b672      	cpsid	i
    c454:	7802      	ldrb	r2, [r0, #0]
    c456:	2a01      	cmp	r2, #1
    c458:	d001      	beq.n	c45e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c45a:	2201      	movs	r2, #1
    c45c:	e000      	b.n	c460 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c45e:	2200      	movs	r2, #0
    c460:	2301      	movs	r3, #1
    c462:	7003      	strb	r3, [r0, #0]
    c464:	b901      	cbnz	r1, c468 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c466:	b662      	cpsie	i
    c468:	b10a      	cbz	r2, c46e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c46a:	2000      	movs	r0, #0
    c46c:	4770      	bx	lr
    c46e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c472:	4770      	bx	lr

0000c474 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c474:	2100      	movs	r1, #0
    c476:	7001      	strb	r1, [r0, #0]
    c478:	4608      	mov	r0, r1
    c47a:	4770      	bx	lr

0000c47c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c47c:	f3ef 8110 	mrs	r1, PRIMASK
    c480:	b672      	cpsid	i
    c482:	2200      	movs	r2, #0
    c484:	7002      	strb	r2, [r0, #0]
    c486:	b901      	cbnz	r1, c48a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c488:	b662      	cpsie	i
    c48a:	2000      	movs	r0, #0
    c48c:	4770      	bx	lr

0000c48e <mpsl_low_priority_process>:
    c48e:	f7f7 ba83 	b.w	3998 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c492 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c492:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c496:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c49a:	280f      	cmp	r0, #15
    c49c:	d001      	beq.n	c4a2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c49e:	2000      	movs	r0, #0
    c4a0:	4770      	bx	lr
    c4a2:	2001      	movs	r0, #1
    c4a4:	4770      	bx	lr

0000c4a6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c4a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4aa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4ae:	280a      	cmp	r0, #10
    c4b0:	d001      	beq.n	c4b6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c4b2:	2000      	movs	r0, #0
    c4b4:	4770      	bx	lr
    c4b6:	2001      	movs	r0, #1
    c4b8:	4770      	bx	lr

0000c4ba <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c4ba:	b500      	push	{lr}
    c4bc:	f7ff fff3 	bl	c4a6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c4c0:	b120      	cbz	r0, c4cc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c4c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4c6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4ca:	b108      	cbz	r0, c4d0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c4cc:	2000      	movs	r0, #0
    c4ce:	bd00      	pop	{pc}
    c4d0:	2001      	movs	r0, #1
    c4d2:	bd00      	pop	{pc}

0000c4d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c4d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4dc:	280e      	cmp	r0, #14
    c4de:	d001      	beq.n	c4e4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c4e0:	2000      	movs	r0, #0
    c4e2:	4770      	bx	lr
    c4e4:	2001      	movs	r0, #1
    c4e6:	4770      	bx	lr

0000c4e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c4e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4ec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4f0:	2810      	cmp	r0, #16
    c4f2:	d001      	beq.n	c4f8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c4f4:	2000      	movs	r0, #0
    c4f6:	4770      	bx	lr
    c4f8:	2001      	movs	r0, #1
    c4fa:	4770      	bx	lr

0000c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c4fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c500:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c504:	2806      	cmp	r0, #6
    c506:	d003      	beq.n	c510 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c508:	1c40      	adds	r0, r0, #1
    c50a:	d001      	beq.n	c510 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c50c:	2000      	movs	r0, #0
    c50e:	4770      	bx	lr
    c510:	2001      	movs	r0, #1
    c512:	4770      	bx	lr

0000c514 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c514:	b500      	push	{lr}
    c516:	f7ff fff1 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c51a:	b148      	cbz	r0, c530 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c51c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c520:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c524:	2806      	cmp	r0, #6
    c526:	d303      	bcc.n	c530 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c528:	1c40      	adds	r0, r0, #1
    c52a:	d001      	beq.n	c530 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c52c:	2001      	movs	r0, #1
    c52e:	bd00      	pop	{pc}
    c530:	2000      	movs	r0, #0
    c532:	bd00      	pop	{pc}

0000c534 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c534:	b500      	push	{lr}
    c536:	f7ff ffe1 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c53a:	b138      	cbz	r0, c54c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c53c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c540:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c544:	2806      	cmp	r0, #6
    c546:	d303      	bcc.n	c550 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c548:	1c40      	adds	r0, r0, #1
    c54a:	d001      	beq.n	c550 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c54c:	2000      	movs	r0, #0
    c54e:	bd00      	pop	{pc}
    c550:	2001      	movs	r0, #1
    c552:	bd00      	pop	{pc}

0000c554 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c554:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c558:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c55c:	280d      	cmp	r0, #13
    c55e:	d001      	beq.n	c564 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c560:	2000      	movs	r0, #0
    c562:	4770      	bx	lr
    c564:	2001      	movs	r0, #1
    c566:	4770      	bx	lr

0000c568 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c568:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c56c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c570:	2808      	cmp	r0, #8
    c572:	d001      	beq.n	c578 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c574:	2000      	movs	r0, #0
    c576:	4770      	bx	lr
    c578:	2001      	movs	r0, #1
    c57a:	4770      	bx	lr

0000c57c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c57c:	2a00      	cmp	r2, #0
    c57e:	bf04      	itt	eq
    c580:	2000      	moveq	r0, #0
    c582:	4770      	bxeq	lr
    c584:	1e52      	subs	r2, r2, #1
    c586:	d007      	beq.n	c598 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c588:	7803      	ldrb	r3, [r0, #0]
    c58a:	f891 c000 	ldrb.w	ip, [r1]
    c58e:	4563      	cmp	r3, ip
    c590:	bf04      	itt	eq
    c592:	1c40      	addeq	r0, r0, #1
    c594:	1c49      	addeq	r1, r1, #1
    c596:	d0f5      	beq.n	c584 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c598:	7800      	ldrb	r0, [r0, #0]
    c59a:	7809      	ldrb	r1, [r1, #0]
    c59c:	1a40      	subs	r0, r0, r1
    c59e:	4770      	bx	lr

0000c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c5a0:	b4f0      	push	{r4, r5, r6, r7}
    c5a2:	ea80 0c01 	eor.w	ip, r0, r1
    c5a6:	4603      	mov	r3, r0
    c5a8:	f01c 0f03 	tst.w	ip, #3
    c5ac:	d13c      	bne.n	c628 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5ae:	f013 0f03 	tst.w	r3, #3
    c5b2:	d00b      	beq.n	c5cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c5b4:	2a00      	cmp	r2, #0
    c5b6:	bf04      	itt	eq
    c5b8:	bcf0      	popeq	{r4, r5, r6, r7}
    c5ba:	4770      	bxeq	lr
    c5bc:	f811 cb01 	ldrb.w	ip, [r1], #1
    c5c0:	f803 cb01 	strb.w	ip, [r3], #1
    c5c4:	1e52      	subs	r2, r2, #1
    c5c6:	f013 0f03 	tst.w	r3, #3
    c5ca:	d1f3      	bne.n	c5b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c5cc:	2a03      	cmp	r2, #3
    c5ce:	d94f      	bls.n	c670 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c5d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5d4:	d24c      	bcs.n	c670 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c5d6:	f1c2 0c00 	rsb	ip, r2, #0
    c5da:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c5de:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c5e2:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c5e6:	f1cc 0c00 	rsb	ip, ip, #0
    c5ea:	f1bc 0f00 	cmp.w	ip, #0
    c5ee:	dd1b      	ble.n	c628 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5f0:	1f0d      	subs	r5, r1, #4
    c5f2:	1f1c      	subs	r4, r3, #4
    c5f4:	f01c 0f01 	tst.w	ip, #1
    c5f8:	d003      	beq.n	c602 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c5fa:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c5fe:	f844 6f04 	str.w	r6, [r4, #4]!
    c602:	ea5f 066c 	movs.w	r6, ip, asr #1
    c606:	d007      	beq.n	c618 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c608:	686f      	ldr	r7, [r5, #4]
    c60a:	6067      	str	r7, [r4, #4]
    c60c:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c610:	f844 7f08 	str.w	r7, [r4, #8]!
    c614:	1e76      	subs	r6, r6, #1
    c616:	d1f7      	bne.n	c608 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c618:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c61c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c620:	f1cc 0c00 	rsb	ip, ip, #0
    c624:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c628:	2a00      	cmp	r2, #0
    c62a:	bf04      	itt	eq
    c62c:	bcf0      	popeq	{r4, r5, r6, r7}
    c62e:	4770      	bxeq	lr
    c630:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c634:	d226      	bcs.n	c684 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c636:	2a00      	cmp	r2, #0
    c638:	bfdc      	itt	le
    c63a:	bcf0      	pople	{r4, r5, r6, r7}
    c63c:	4770      	bxle	lr
    c63e:	1e49      	subs	r1, r1, #1
    c640:	1e5b      	subs	r3, r3, #1
    c642:	f012 0f01 	tst.w	r2, #1
    c646:	d003      	beq.n	c650 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c648:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c64c:	f803 cf01 	strb.w	ip, [r3, #1]!
    c650:	1052      	asrs	r2, r2, #1
    c652:	bf04      	itt	eq
    c654:	bcf0      	popeq	{r4, r5, r6, r7}
    c656:	4770      	bxeq	lr
    c658:	f891 c001 	ldrb.w	ip, [r1, #1]
    c65c:	f883 c001 	strb.w	ip, [r3, #1]
    c660:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c664:	f803 cf02 	strb.w	ip, [r3, #2]!
    c668:	1e52      	subs	r2, r2, #1
    c66a:	d1f5      	bne.n	c658 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c66c:	bcf0      	pop	{r4, r5, r6, r7}
    c66e:	4770      	bx	lr
    c670:	2a04      	cmp	r2, #4
    c672:	d3d9      	bcc.n	c628 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c674:	f851 cb04 	ldr.w	ip, [r1], #4
    c678:	1f12      	subs	r2, r2, #4
    c67a:	f843 cb04 	str.w	ip, [r3], #4
    c67e:	2a04      	cmp	r2, #4
    c680:	d2f8      	bcs.n	c674 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c682:	e7d1      	b.n	c628 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c684:	f811 cb01 	ldrb.w	ip, [r1], #1
    c688:	f803 cb01 	strb.w	ip, [r3], #1
    c68c:	1e52      	subs	r2, r2, #1
    c68e:	d1f9      	bne.n	c684 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c690:	bcf0      	pop	{r4, r5, r6, r7}
    c692:	4770      	bx	lr

0000c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c694:	b470      	push	{r4, r5, r6}
    c696:	4603      	mov	r3, r0
    c698:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c69c:	f010 0f03 	tst.w	r0, #3
    c6a0:	d009      	beq.n	c6b6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c6a2:	2a00      	cmp	r2, #0
    c6a4:	bf04      	itt	eq
    c6a6:	bc70      	popeq	{r4, r5, r6}
    c6a8:	4770      	bxeq	lr
    c6aa:	f803 cb01 	strb.w	ip, [r3], #1
    c6ae:	1e52      	subs	r2, r2, #1
    c6b0:	f013 0f03 	tst.w	r3, #3
    c6b4:	d1f5      	bne.n	c6a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c6b6:	b2c9      	uxtb	r1, r1
    c6b8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c6bc:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c6c0:	2a03      	cmp	r2, #3
    c6c2:	d939      	bls.n	c738 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c6c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c6c8:	d236      	bcs.n	c738 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c6ca:	4251      	negs	r1, r2
    c6cc:	17cc      	asrs	r4, r1, #31
    c6ce:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c6d2:	1089      	asrs	r1, r1, #2
    c6d4:	424e      	negs	r6, r1
    c6d6:	2e00      	cmp	r6, #0
    c6d8:	dd11      	ble.n	c6fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6da:	1f19      	subs	r1, r3, #4
    c6dc:	f016 0f01 	tst.w	r6, #1
    c6e0:	bf18      	it	ne
    c6e2:	f841 5f04 	strne.w	r5, [r1, #4]!
    c6e6:	1074      	asrs	r4, r6, #1
    c6e8:	d004      	beq.n	c6f4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c6ea:	604d      	str	r5, [r1, #4]
    c6ec:	f841 5f08 	str.w	r5, [r1, #8]!
    c6f0:	1e64      	subs	r4, r4, #1
    c6f2:	d1fa      	bne.n	c6ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c6f4:	4271      	negs	r1, r6
    c6f6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c6fa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c6fe:	2a00      	cmp	r2, #0
    c700:	bf04      	itt	eq
    c702:	bc70      	popeq	{r4, r5, r6}
    c704:	4770      	bxeq	lr
    c706:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c70a:	d21d      	bcs.n	c748 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c70c:	2a00      	cmp	r2, #0
    c70e:	bfdc      	itt	le
    c710:	bc70      	pople	{r4, r5, r6}
    c712:	4770      	bxle	lr
    c714:	1e59      	subs	r1, r3, #1
    c716:	f012 0f01 	tst.w	r2, #1
    c71a:	bf18      	it	ne
    c71c:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c720:	1052      	asrs	r2, r2, #1
    c722:	bf04      	itt	eq
    c724:	bc70      	popeq	{r4, r5, r6}
    c726:	4770      	bxeq	lr
    c728:	f881 c001 	strb.w	ip, [r1, #1]
    c72c:	f801 cf02 	strb.w	ip, [r1, #2]!
    c730:	1e52      	subs	r2, r2, #1
    c732:	d1f9      	bne.n	c728 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c734:	bc70      	pop	{r4, r5, r6}
    c736:	4770      	bx	lr
    c738:	2a04      	cmp	r2, #4
    c73a:	d3e0      	bcc.n	c6fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c73c:	1f12      	subs	r2, r2, #4
    c73e:	f843 5b04 	str.w	r5, [r3], #4
    c742:	2a04      	cmp	r2, #4
    c744:	d2fa      	bcs.n	c73c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c746:	e7da      	b.n	c6fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c748:	f803 cb01 	strb.w	ip, [r3], #1
    c74c:	1e52      	subs	r2, r2, #1
    c74e:	d1fb      	bne.n	c748 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c750:	bc70      	pop	{r4, r5, r6}
    c752:	4770      	bx	lr
    c754:	f04f 30ff 	mov.w	r0, #4294967295
    c758:	4770      	bx	lr
    c75a:	2000      	movs	r0, #0
    c75c:	4770      	bx	lr
    c75e:	2000      	movs	r0, #0
    c760:	4770      	bx	lr
    c762:	f04f 30ff 	mov.w	r0, #4294967295
    c766:	4770      	bx	lr
    c768:	4770      	bx	lr
    c76a:	4770      	bx	lr
    c76c:	2000      	movs	r0, #0
    c76e:	4770      	bx	lr
    c770:	f04f 30ff 	mov.w	r0, #4294967295
    c774:	4770      	bx	lr
    c776:	f04f 30ff 	mov.w	r0, #4294967295
    c77a:	4770      	bx	lr
    c77c:	2100      	movs	r1, #0
    c77e:	7001      	strb	r1, [r0, #0]
    c780:	4770      	bx	lr
    c782:	f04f 30ff 	mov.w	r0, #4294967295
    c786:	4770      	bx	lr
    c788:	f04f 30ff 	mov.w	r0, #4294967295
    c78c:	4770      	bx	lr
    c78e:	2000      	movs	r0, #0
    c790:	4770      	bx	lr
    c792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c796:	4606      	mov	r6, r0
    c798:	460c      	mov	r4, r1
    c79a:	7808      	ldrb	r0, [r1, #0]
    c79c:	7849      	ldrb	r1, [r1, #1]
    c79e:	2700      	movs	r7, #0
    c7a0:	4408      	add	r0, r1
    c7a2:	4691      	mov	r9, r2
    c7a4:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c7a8:	463d      	mov	r5, r7
    c7aa:	e00e      	b.n	c7ca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c7ac:	7a23      	ldrb	r3, [r4, #8]
    c7ae:	2b02      	cmp	r3, #2
    c7b0:	d200      	bcs.n	c7b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    c7b2:	2302      	movs	r3, #2
    c7b4:	79e2      	ldrb	r2, [r4, #7]
    c7b6:	2a03      	cmp	r2, #3
    c7b8:	d200      	bcs.n	c7bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    c7ba:	2203      	movs	r2, #3
    c7bc:	79a1      	ldrb	r1, [r4, #6]
    c7be:	7960      	ldrb	r0, [r4, #5]
    c7c0:	f000 ffb3 	bl	d72a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c7c4:	1c6d      	adds	r5, r5, #1
    c7c6:	4407      	add	r7, r0
    c7c8:	b2ed      	uxtb	r5, r5
    c7ca:	4545      	cmp	r5, r8
    c7cc:	d3ee      	bcc.n	c7ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    c7ce:	6830      	ldr	r0, [r6, #0]
    c7d0:	1cc0      	adds	r0, r0, #3
    c7d2:	f020 0003 	bic.w	r0, r0, #3
    c7d6:	6030      	str	r0, [r6, #0]
    c7d8:	f1b9 0f00 	cmp.w	r9, #0
    c7dc:	d000      	beq.n	c7e0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    c7de:	2000      	movs	r0, #0
    c7e0:	463a      	mov	r2, r7
    c7e2:	4641      	mov	r1, r8
    c7e4:	f7f7 fe82 	bl	44ec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c7e8:	6831      	ldr	r1, [r6, #0]
    c7ea:	4408      	add	r0, r1
    c7ec:	6030      	str	r0, [r6, #0]
    c7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c7f2 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c7f2:	2000      	movs	r0, #0
    c7f4:	4770      	bx	lr

0000c7f6 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c7f6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c7f8:	4604      	mov	r4, r0
    c7fa:	1d01      	adds	r1, r0, #4
    c7fc:	4668      	mov	r0, sp
    c7fe:	f7f9 fb11 	bl	5e24 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c802:	2800      	cmp	r0, #0
    c804:	d004      	beq.n	c810 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c806:	4669      	mov	r1, sp
    c808:	4620      	mov	r0, r4
    c80a:	f000 f848 	bl	c89e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c80e:	2001      	movs	r0, #1
    c810:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c812 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c812:	b50e      	push	{r1, r2, r3, lr}
    c814:	4601      	mov	r1, r0
    c816:	4668      	mov	r0, sp
    c818:	f000 f827 	bl	c86a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c81c:	4668      	mov	r0, sp
    c81e:	f001 fc51 	bl	e0c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c822:	bd0e      	pop	{r1, r2, r3, pc}

0000c824 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c824:	b510      	push	{r4, lr}
    c826:	4604      	mov	r4, r0
    c828:	4620      	mov	r0, r4
    c82a:	f7f7 fb9f 	bl	3f6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c82e:	2800      	cmp	r0, #0
    c830:	d006      	beq.n	c840 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c832:	78a1      	ldrb	r1, [r4, #2]
    c834:	7820      	ldrb	r0, [r4, #0]
    c836:	f000 f804 	bl	c842 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c83a:	2800      	cmp	r0, #0
    c83c:	d0f4      	beq.n	c828 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c83e:	2001      	movs	r0, #1
    c840:	bd10      	pop	{r4, pc}
    c842:	b570      	push	{r4, r5, r6, lr}
    c844:	460c      	mov	r4, r1
    c846:	4605      	mov	r5, r0
    c848:	f7f7 fbec 	bl	4024 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c84c:	2800      	cmp	r0, #0
    c84e:	d002      	beq.n	c856 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c850:	2d3e      	cmp	r5, #62	; 0x3e
    c852:	d001      	beq.n	c858 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c854:	2001      	movs	r0, #1
    c856:	bd70      	pop	{r4, r5, r6, pc}
    c858:	2c12      	cmp	r4, #18
    c85a:	d004      	beq.n	c866 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c85c:	4620      	mov	r0, r4
    c85e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c862:	f7f7 bbfb 	b.w	405c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c866:	2000      	movs	r0, #0
    c868:	bd70      	pop	{r4, r5, r6, pc}

0000c86a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c86a:	880a      	ldrh	r2, [r1, #0]
    c86c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c870:	8002      	strh	r2, [r0, #0]
    c872:	884a      	ldrh	r2, [r1, #2]
    c874:	8042      	strh	r2, [r0, #2]
    c876:	784a      	ldrb	r2, [r1, #1]
    c878:	0993      	lsrs	r3, r2, #6
    c87a:	2200      	movs	r2, #0
    c87c:	7142      	strb	r2, [r0, #5]
    c87e:	784b      	ldrb	r3, [r1, #1]
    c880:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c884:	b11b      	cbz	r3, c88e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c886:	2b01      	cmp	r3, #1
    c888:	d005      	beq.n	c896 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c88a:	2b02      	cmp	r3, #2
    c88c:	d005      	beq.n	c89a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c88e:	7102      	strb	r2, [r0, #4]
    c890:	1d09      	adds	r1, r1, #4
    c892:	6081      	str	r1, [r0, #8]
    c894:	4770      	bx	lr
    c896:	2201      	movs	r2, #1
    c898:	e7f9      	b.n	c88e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c89a:	2202      	movs	r2, #2
    c89c:	e7f7      	b.n	c88e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c89e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c89e:	b510      	push	{r4, lr}
    c8a0:	460c      	mov	r4, r1
    c8a2:	7809      	ldrb	r1, [r1, #0]
    c8a4:	7001      	strb	r1, [r0, #0]
    c8a6:	7841      	ldrb	r1, [r0, #1]
    c8a8:	f021 010f 	bic.w	r1, r1, #15
    c8ac:	7041      	strb	r1, [r0, #1]
    c8ae:	8822      	ldrh	r2, [r4, #0]
    c8b0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c8b4:	4311      	orrs	r1, r2
    c8b6:	7041      	strb	r1, [r0, #1]
    c8b8:	78a2      	ldrb	r2, [r4, #2]
    c8ba:	7082      	strb	r2, [r0, #2]
    c8bc:	8862      	ldrh	r2, [r4, #2]
    c8be:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c8c2:	0a12      	lsrs	r2, r2, #8
    c8c4:	70c2      	strb	r2, [r0, #3]
    c8c6:	7041      	strb	r1, [r0, #1]
    c8c8:	7922      	ldrb	r2, [r4, #4]
    c8ca:	f002 0203 	and.w	r2, r2, #3
    c8ce:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c8d2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c8d6:	7041      	strb	r1, [r0, #1]
    c8d8:	7962      	ldrb	r2, [r4, #5]
    c8da:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c8de:	7041      	strb	r1, [r0, #1]
    c8e0:	68a1      	ldr	r1, [r4, #8]
    c8e2:	1d02      	adds	r2, r0, #4
    c8e4:	4291      	cmp	r1, r2
    c8e6:	d006      	beq.n	c8f6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c8e8:	8862      	ldrh	r2, [r4, #2]
    c8ea:	2afb      	cmp	r2, #251	; 0xfb
    c8ec:	d300      	bcc.n	c8f0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c8ee:	22fb      	movs	r2, #251	; 0xfb
    c8f0:	1d00      	adds	r0, r0, #4
    c8f2:	f7ff fe55 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c8f6:	78a0      	ldrb	r0, [r4, #2]
    c8f8:	1d00      	adds	r0, r0, #4
    c8fa:	b2c0      	uxtb	r0, r0
    c8fc:	bd10      	pop	{r4, pc}

0000c8fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c8fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c902:	4604      	mov	r4, r0
    c904:	f891 c000 	ldrb.w	ip, [r1]
    c908:	2000      	movs	r0, #0
    c90a:	270c      	movs	r7, #12
    c90c:	223e      	movs	r2, #62	; 0x3e
    c90e:	2612      	movs	r6, #18
    c910:	25ff      	movs	r5, #255	; 0xff
    c912:	f04f 0b14 	mov.w	fp, #20
    c916:	f04f 0e13 	mov.w	lr, #19
    c91a:	f04f 0a05 	mov.w	sl, #5
    c91e:	f104 030d 	add.w	r3, r4, #13
    c922:	f04f 0911 	mov.w	r9, #17
    c926:	f1bc 0f20 	cmp.w	ip, #32
    c92a:	d272      	bcs.n	ca12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c92c:	e8df f00c 	tbb	[pc, ip]
    c930:	29271071 	.word	0x29271071
    c934:	a46dfc2e 	.word	0xa46dfc2e
    c938:	fbdac0ae 	.word	0xfbdac0ae
    c93c:	f7f8f9fa 	.word	0xf7f8f9fa
    c940:	507171f6 	.word	0x507171f6
    c944:	f3f4f572 	.word	0xf3f4f572
    c948:	eff0f1f2 	.word	0xeff0f1f2
    c94c:	ec71edee 	.word	0xec71edee
    c950:	7027      	strb	r7, [r4, #0]
    c952:	7908      	ldrb	r0, [r1, #4]
    c954:	70a0      	strb	r0, [r4, #2]
    c956:	7948      	ldrb	r0, [r1, #5]
    c958:	70e0      	strb	r0, [r4, #3]
    c95a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c95e:	0a00      	lsrs	r0, r0, #8
    c960:	7120      	strb	r0, [r4, #4]
    c962:	79c8      	ldrb	r0, [r1, #7]
    c964:	7160      	strb	r0, [r4, #5]
    c966:	7a08      	ldrb	r0, [r1, #8]
    c968:	71a0      	strb	r0, [r4, #6]
    c96a:	8908      	ldrh	r0, [r1, #8]
    c96c:	0a00      	lsrs	r0, r0, #8
    c96e:	71e0      	strb	r0, [r4, #7]
    c970:	7a88      	ldrb	r0, [r1, #10]
    c972:	7220      	strb	r0, [r4, #8]
    c974:	8948      	ldrh	r0, [r1, #10]
    c976:	0a00      	lsrs	r0, r0, #8
    c978:	7260      	strb	r0, [r4, #9]
    c97a:	2008      	movs	r0, #8
    c97c:	e154      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c97e:	2010      	movs	r0, #16
    c980:	e000      	b.n	c984 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    c982:	201a      	movs	r0, #26
    c984:	7020      	strb	r0, [r4, #0]
    c986:	7908      	ldrb	r0, [r1, #4]
    c988:	70a0      	strb	r0, [r4, #2]
    c98a:	e154      	b.n	cc36 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    c98c:	7022      	strb	r2, [r4, #0]
    c98e:	2002      	movs	r0, #2
    c990:	70a0      	strb	r0, [r4, #2]
    c992:	7908      	ldrb	r0, [r1, #4]
    c994:	70e0      	strb	r0, [r4, #3]
    c996:	7b88      	ldrb	r0, [r1, #14]
    c998:	7120      	strb	r0, [r4, #4]
    c99a:	7948      	ldrb	r0, [r1, #5]
    c99c:	7160      	strb	r0, [r4, #5]
    c99e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c9a2:	f8c4 0006 	str.w	r0, [r4, #6]
    c9a6:	8948      	ldrh	r0, [r1, #10]
    c9a8:	8160      	strh	r0, [r4, #10]
    c9aa:	7b08      	ldrb	r0, [r1, #12]
    c9ac:	7320      	strb	r0, [r4, #12]
    c9ae:	7b0e      	ldrb	r6, [r1, #12]
    c9b0:	1d0d      	adds	r5, r1, #4
    c9b2:	2e1f      	cmp	r6, #31
    c9b4:	d300      	bcc.n	c9b8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    c9b6:	261f      	movs	r6, #31
    c9b8:	4618      	mov	r0, r3
    c9ba:	4632      	mov	r2, r6
    c9bc:	f105 010b 	add.w	r1, r5, #11
    c9c0:	f7ff fdee 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c9c4:	360d      	adds	r6, #13
    c9c6:	7a69      	ldrb	r1, [r5, #9]
    c9c8:	55a1      	strb	r1, [r4, r6]
    c9ca:	1e76      	subs	r6, r6, #1
    c9cc:	b2f0      	uxtb	r0, r6
    c9ce:	e129      	b.n	cc24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    c9d0:	7022      	strb	r2, [r4, #0]
    c9d2:	200b      	movs	r0, #11
    c9d4:	70a0      	strb	r0, [r4, #2]
    c9d6:	7908      	ldrb	r0, [r1, #4]
    c9d8:	70e0      	strb	r0, [r4, #3]
    c9da:	7948      	ldrb	r0, [r1, #5]
    c9dc:	7120      	strb	r0, [r4, #4]
    c9de:	7988      	ldrb	r0, [r1, #6]
    c9e0:	7160      	strb	r0, [r4, #5]
    c9e2:	f8d1 0007 	ldr.w	r0, [r1, #7]
    c9e6:	f8c4 0006 	str.w	r0, [r4, #6]
    c9ea:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    c9ee:	8160      	strh	r0, [r4, #10]
    c9f0:	7b48      	ldrb	r0, [r1, #13]
    c9f2:	7320      	strb	r0, [r4, #12]
    c9f4:	f8d1 000e 	ldr.w	r0, [r1, #14]
    c9f8:	f8c4 000d 	str.w	r0, [r4, #13]
    c9fc:	8a48      	ldrh	r0, [r1, #18]
    c9fe:	f8a4 0011 	strh.w	r0, [r4, #17]
    ca02:	7d08      	ldrb	r0, [r1, #20]
    ca04:	74e0      	strb	r0, [r4, #19]
    ca06:	4630      	mov	r0, r6
    ca08:	e10e      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca0a:	4620      	mov	r0, r4
    ca0c:	f000 f98d 	bl	cd2a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    ca10:	e108      	b.n	cc24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    ca12:	e10b      	b.n	cc2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    ca14:	7022      	strb	r2, [r4, #0]
    ca16:	200a      	movs	r0, #10
    ca18:	70a0      	strb	r0, [r4, #2]
    ca1a:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    ca1e:	70e0      	strb	r0, [r4, #3]
    ca20:	7888      	ldrb	r0, [r1, #2]
    ca22:	7120      	strb	r0, [r4, #4]
    ca24:	8848      	ldrh	r0, [r1, #2]
    ca26:	0a00      	lsrs	r0, r0, #8
    ca28:	7160      	strb	r0, [r4, #5]
    ca2a:	7908      	ldrb	r0, [r1, #4]
    ca2c:	71a0      	strb	r0, [r4, #6]
    ca2e:	7948      	ldrb	r0, [r1, #5]
    ca30:	71e0      	strb	r0, [r4, #7]
    ca32:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca36:	60a0      	str	r0, [r4, #8]
    ca38:	8948      	ldrh	r0, [r1, #10]
    ca3a:	81a0      	strh	r0, [r4, #12]
    ca3c:	68c8      	ldr	r0, [r1, #12]
    ca3e:	f8c4 000e 	str.w	r0, [r4, #14]
    ca42:	8a08      	ldrh	r0, [r1, #16]
    ca44:	8260      	strh	r0, [r4, #18]
    ca46:	f8d1 0012 	ldr.w	r0, [r1, #18]
    ca4a:	6160      	str	r0, [r4, #20]
    ca4c:	8ac8      	ldrh	r0, [r1, #22]
    ca4e:	8320      	strh	r0, [r4, #24]
    ca50:	7e08      	ldrb	r0, [r1, #24]
    ca52:	76a0      	strb	r0, [r4, #26]
    ca54:	8b08      	ldrh	r0, [r1, #24]
    ca56:	0a00      	lsrs	r0, r0, #8
    ca58:	76e0      	strb	r0, [r4, #27]
    ca5a:	7e88      	ldrb	r0, [r1, #26]
    ca5c:	7720      	strb	r0, [r4, #28]
    ca5e:	8b48      	ldrh	r0, [r1, #26]
    ca60:	0a00      	lsrs	r0, r0, #8
    ca62:	7760      	strb	r0, [r4, #29]
    ca64:	7f08      	ldrb	r0, [r1, #28]
    ca66:	77a0      	strb	r0, [r4, #30]
    ca68:	8b88      	ldrh	r0, [r1, #28]
    ca6a:	0a00      	lsrs	r0, r0, #8
    ca6c:	77e0      	strb	r0, [r4, #31]
    ca6e:	7f88      	ldrb	r0, [r1, #30]
    ca70:	f884 0020 	strb.w	r0, [r4, #32]
    ca74:	201f      	movs	r0, #31
    ca76:	e0d7      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca78:	7022      	strb	r2, [r4, #0]
    ca7a:	f884 b002 	strb.w	fp, [r4, #2]
    ca7e:	7908      	ldrb	r0, [r1, #4]
    ca80:	70e0      	strb	r0, [r4, #3]
    ca82:	8888      	ldrh	r0, [r1, #4]
    ca84:	0a00      	lsrs	r0, r0, #8
    ca86:	7120      	strb	r0, [r4, #4]
    ca88:	7988      	ldrb	r0, [r1, #6]
    ca8a:	e0ed      	b.n	cc68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ca8c:	7022      	strb	r2, [r4, #0]
    ca8e:	2004      	movs	r0, #4
    ca90:	70a0      	strb	r0, [r4, #2]
    ca92:	7908      	ldrb	r0, [r1, #4]
    ca94:	70e0      	strb	r0, [r4, #3]
    ca96:	7988      	ldrb	r0, [r1, #6]
    ca98:	7120      	strb	r0, [r4, #4]
    ca9a:	88c8      	ldrh	r0, [r1, #6]
    ca9c:	0a00      	lsrs	r0, r0, #8
    ca9e:	7160      	strb	r0, [r4, #5]
    caa0:	6888      	ldr	r0, [r1, #8]
    caa2:	f8c4 0006 	str.w	r0, [r4, #6]
    caa6:	68c8      	ldr	r0, [r1, #12]
    caa8:	f8c4 000a 	str.w	r0, [r4, #10]
    caac:	200c      	movs	r0, #12
    caae:	e0bb      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cab0:	7022      	strb	r2, [r4, #0]
    cab2:	2003      	movs	r0, #3
    cab4:	70a0      	strb	r0, [r4, #2]
    cab6:	7908      	ldrb	r0, [r1, #4]
    cab8:	70e0      	strb	r0, [r4, #3]
    caba:	7988      	ldrb	r0, [r1, #6]
    cabc:	7120      	strb	r0, [r4, #4]
    cabe:	88c8      	ldrh	r0, [r1, #6]
    cac0:	0a00      	lsrs	r0, r0, #8
    cac2:	7160      	strb	r0, [r4, #5]
    cac4:	7a08      	ldrb	r0, [r1, #8]
    cac6:	71a0      	strb	r0, [r4, #6]
    cac8:	8908      	ldrh	r0, [r1, #8]
    caca:	0a00      	lsrs	r0, r0, #8
    cacc:	71e0      	strb	r0, [r4, #7]
    cace:	7a88      	ldrb	r0, [r1, #10]
    cad0:	7220      	strb	r0, [r4, #8]
    cad2:	8948      	ldrh	r0, [r1, #10]
    cad4:	0a00      	lsrs	r0, r0, #8
    cad6:	7260      	strb	r0, [r4, #9]
    cad8:	7b08      	ldrb	r0, [r1, #12]
    cada:	72a0      	strb	r0, [r4, #10]
    cadc:	8988      	ldrh	r0, [r1, #12]
    cade:	0a00      	lsrs	r0, r0, #8
    cae0:	72e0      	strb	r0, [r4, #11]
    cae2:	e120      	b.n	cd26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    cae4:	7022      	strb	r2, [r4, #0]
    cae6:	f884 a002 	strb.w	sl, [r4, #2]
    caea:	7908      	ldrb	r0, [r1, #4]
    caec:	70e0      	strb	r0, [r4, #3]
    caee:	8888      	ldrh	r0, [r1, #4]
    caf0:	0a00      	lsrs	r0, r0, #8
    caf2:	7120      	strb	r0, [r4, #4]
    caf4:	f8d1 0006 	ldr.w	r0, [r1, #6]
    caf8:	f8c4 0005 	str.w	r0, [r4, #5]
    cafc:	f8d1 000a 	ldr.w	r0, [r1, #10]
    cb00:	f8c4 0009 	str.w	r0, [r4, #9]
    cb04:	89c8      	ldrh	r0, [r1, #14]
    cb06:	e010      	b.n	cb2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    cb08:	e0fa      	b.n	cd00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    cb0a:	e0ce      	b.n	ccaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cb0c:	e0af      	b.n	cc6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    cb0e:	e0da      	b.n	ccc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    cb10:	e0e8      	b.n	cce4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    cb12:	e0a1      	b.n	cc58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    cb14:	e08c      	b.n	cc30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    cb16:	e090      	b.n	cc3a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    cb18:	e033      	b.n	cb82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cb1a:	e02f      	b.n	cb7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cb1c:	e043      	b.n	cba6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    cb1e:	e03d      	b.n	cb9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    cb20:	e021      	b.n	cb66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    cb22:	e015      	b.n	cb50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    cb24:	e008      	b.n	cb38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    cb26:	e004      	b.n	cb32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cb28:	e046      	b.n	cbb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    cb2a:	f8a4 000d 	strh.w	r0, [r4, #13]
    cb2e:	200d      	movs	r0, #13
    cb30:	e07a      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb32:	f884 9000 	strb.w	r9, [r4]
    cb36:	e038      	b.n	cbaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    cb38:	f884 a000 	strb.w	sl, [r4]
    cb3c:	7908      	ldrb	r0, [r1, #4]
    cb3e:	70a0      	strb	r0, [r4, #2]
    cb40:	7948      	ldrb	r0, [r1, #5]
    cb42:	70e0      	strb	r0, [r4, #3]
    cb44:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cb48:	0a00      	lsrs	r0, r0, #8
    cb4a:	7120      	strb	r0, [r4, #4]
    cb4c:	79c8      	ldrb	r0, [r1, #7]
    cb4e:	e08b      	b.n	cc68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cb50:	2008      	movs	r0, #8
    cb52:	7020      	strb	r0, [r4, #0]
    cb54:	7908      	ldrb	r0, [r1, #4]
    cb56:	70a0      	strb	r0, [r4, #2]
    cb58:	7988      	ldrb	r0, [r1, #6]
    cb5a:	70e0      	strb	r0, [r4, #3]
    cb5c:	88c8      	ldrh	r0, [r1, #6]
    cb5e:	0a00      	lsrs	r0, r0, #8
    cb60:	7120      	strb	r0, [r4, #4]
    cb62:	7a08      	ldrb	r0, [r1, #8]
    cb64:	e080      	b.n	cc68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cb66:	2030      	movs	r0, #48	; 0x30
    cb68:	7020      	strb	r0, [r4, #0]
    cb6a:	7908      	ldrb	r0, [r1, #4]
    cb6c:	70a0      	strb	r0, [r4, #2]
    cb6e:	7988      	ldrb	r0, [r1, #6]
    cb70:	70e0      	strb	r0, [r4, #3]
    cb72:	88c8      	ldrh	r0, [r1, #6]
    cb74:	0a00      	lsrs	r0, r0, #8
    cb76:	7120      	strb	r0, [r4, #4]
    cb78:	2003      	movs	r0, #3
    cb7a:	e055      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb7c:	7022      	strb	r2, [r4, #0]
    cb7e:	2007      	movs	r0, #7
    cb80:	e077      	b.n	cc72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    cb82:	7022      	strb	r2, [r4, #0]
    cb84:	70a7      	strb	r7, [r4, #2]
    cb86:	7908      	ldrb	r0, [r1, #4]
    cb88:	70e0      	strb	r0, [r4, #3]
    cb8a:	7988      	ldrb	r0, [r1, #6]
    cb8c:	7120      	strb	r0, [r4, #4]
    cb8e:	88c8      	ldrh	r0, [r1, #6]
    cb90:	0a00      	lsrs	r0, r0, #8
    cb92:	7160      	strb	r0, [r4, #5]
    cb94:	7a08      	ldrb	r0, [r1, #8]
    cb96:	71a0      	strb	r0, [r4, #6]
    cb98:	7a48      	ldrb	r0, [r1, #9]
    cb9a:	e05a      	b.n	cc52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    cb9c:	4620      	mov	r0, r4
    cb9e:	1d09      	adds	r1, r1, #4
    cba0:	f7f7 fa12 	bl	3fc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    cba4:	e03e      	b.n	cc24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cba6:	2057      	movs	r0, #87	; 0x57
    cba8:	7020      	strb	r0, [r4, #0]
    cbaa:	7908      	ldrb	r0, [r1, #4]
    cbac:	70a0      	strb	r0, [r4, #2]
    cbae:	8888      	ldrh	r0, [r1, #4]
    cbb0:	0a00      	lsrs	r0, r0, #8
    cbb2:	70e0      	strb	r0, [r4, #3]
    cbb4:	2002      	movs	r0, #2
    cbb6:	e037      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbb8:	7022      	strb	r2, [r4, #0]
    cbba:	220d      	movs	r2, #13
    cbbc:	70a2      	strb	r2, [r4, #2]
    cbbe:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cbc2:	70e2      	strb	r2, [r4, #3]
    cbc4:	894a      	ldrh	r2, [r1, #10]
    cbc6:	80a2      	strh	r2, [r4, #4]
    cbc8:	784a      	ldrb	r2, [r1, #1]
    cbca:	71a2      	strb	r2, [r4, #6]
    cbcc:	f8d1 2002 	ldr.w	r2, [r1, #2]
    cbd0:	f8c4 2007 	str.w	r2, [r4, #7]
    cbd4:	88ca      	ldrh	r2, [r1, #6]
    cbd6:	f8a4 200b 	strh.w	r2, [r4, #11]
    cbda:	7b0a      	ldrb	r2, [r1, #12]
    cbdc:	4620      	mov	r0, r4
    cbde:	7362      	strb	r2, [r4, #13]
    cbe0:	7b4a      	ldrb	r2, [r1, #13]
    cbe2:	7382      	strb	r2, [r0, #14]
    cbe4:	7b8a      	ldrb	r2, [r1, #14]
    cbe6:	73c2      	strb	r2, [r0, #15]
    cbe8:	7e8a      	ldrb	r2, [r1, #26]
    cbea:	7402      	strb	r2, [r0, #16]
    cbec:	7a4a      	ldrb	r2, [r1, #9]
    cbee:	7442      	strb	r2, [r0, #17]
    cbf0:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cbf4:	f8ad 2000 	strh.w	r2, [sp]
    cbf8:	8242      	strh	r2, [r0, #18]
    cbfa:	7cca      	ldrb	r2, [r1, #19]
    cbfc:	7502      	strb	r2, [r0, #20]
    cbfe:	694a      	ldr	r2, [r1, #20]
    cc00:	f8c0 2015 	str.w	r2, [r0, #21]
    cc04:	8b0a      	ldrh	r2, [r1, #24]
    cc06:	f8a0 2019 	strh.w	r2, [r0, #25]
    cc0a:	7a0a      	ldrb	r2, [r1, #8]
    cc0c:	76c2      	strb	r2, [r0, #27]
    cc0e:	7a0d      	ldrb	r5, [r1, #8]
    cc10:	2de5      	cmp	r5, #229	; 0xe5
    cc12:	d300      	bcc.n	cc16 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    cc14:	25e5      	movs	r5, #229	; 0xe5
    cc16:	462a      	mov	r2, r5
    cc18:	301c      	adds	r0, #28
    cc1a:	311c      	adds	r1, #28
    cc1c:	f7ff fcc0 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc20:	351a      	adds	r5, #26
    cc22:	b2e8      	uxtb	r0, r5
    cc24:	2800      	cmp	r0, #0
    cc26:	d001      	beq.n	cc2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cc28:	7060      	strb	r0, [r4, #1]
    cc2a:	1c80      	adds	r0, r0, #2
    cc2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc30:	7022      	strb	r2, [r4, #0]
    cc32:	f884 9002 	strb.w	r9, [r4, #2]
    cc36:	2001      	movs	r0, #1
    cc38:	e7f6      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc3a:	7022      	strb	r2, [r4, #0]
    cc3c:	70a6      	strb	r6, [r4, #2]
    cc3e:	7908      	ldrb	r0, [r1, #4]
    cc40:	70e0      	strb	r0, [r4, #3]
    cc42:	7948      	ldrb	r0, [r1, #5]
    cc44:	7120      	strb	r0, [r4, #4]
    cc46:	7988      	ldrb	r0, [r1, #6]
    cc48:	7160      	strb	r0, [r4, #5]
    cc4a:	88c8      	ldrh	r0, [r1, #6]
    cc4c:	0a00      	lsrs	r0, r0, #8
    cc4e:	71a0      	strb	r0, [r4, #6]
    cc50:	7a08      	ldrb	r0, [r1, #8]
    cc52:	71e0      	strb	r0, [r4, #7]
    cc54:	2006      	movs	r0, #6
    cc56:	e7e7      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc58:	7025      	strb	r5, [r4, #0]
    cc5a:	20a1      	movs	r0, #161	; 0xa1
    cc5c:	70a0      	strb	r0, [r4, #2]
    cc5e:	7908      	ldrb	r0, [r1, #4]
    cc60:	70e0      	strb	r0, [r4, #3]
    cc62:	7948      	ldrb	r0, [r1, #5]
    cc64:	7120      	strb	r0, [r4, #4]
    cc66:	2000      	movs	r0, #0
    cc68:	7160      	strb	r0, [r4, #5]
    cc6a:	2004      	movs	r0, #4
    cc6c:	e7dc      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc6e:	7025      	strb	r5, [r4, #0]
    cc70:	20a2      	movs	r0, #162	; 0xa2
    cc72:	70a0      	strb	r0, [r4, #2]
    cc74:	7908      	ldrb	r0, [r1, #4]
    cc76:	70e0      	strb	r0, [r4, #3]
    cc78:	8888      	ldrh	r0, [r1, #4]
    cc7a:	0a00      	lsrs	r0, r0, #8
    cc7c:	7120      	strb	r0, [r4, #4]
    cc7e:	7988      	ldrb	r0, [r1, #6]
    cc80:	7160      	strb	r0, [r4, #5]
    cc82:	88c8      	ldrh	r0, [r1, #6]
    cc84:	0a00      	lsrs	r0, r0, #8
    cc86:	71a0      	strb	r0, [r4, #6]
    cc88:	7a08      	ldrb	r0, [r1, #8]
    cc8a:	71e0      	strb	r0, [r4, #7]
    cc8c:	8908      	ldrh	r0, [r1, #8]
    cc8e:	0a00      	lsrs	r0, r0, #8
    cc90:	7220      	strb	r0, [r4, #8]
    cc92:	7a88      	ldrb	r0, [r1, #10]
    cc94:	7260      	strb	r0, [r4, #9]
    cc96:	8948      	ldrh	r0, [r1, #10]
    cc98:	0a00      	lsrs	r0, r0, #8
    cc9a:	72a0      	strb	r0, [r4, #10]
    cc9c:	7b08      	ldrb	r0, [r1, #12]
    cc9e:	72e0      	strb	r0, [r4, #11]
    cca0:	8988      	ldrh	r0, [r1, #12]
    cca2:	0a00      	lsrs	r0, r0, #8
    cca4:	7320      	strb	r0, [r4, #12]
    cca6:	200b      	movs	r0, #11
    cca8:	e7be      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ccaa:	7025      	strb	r5, [r4, #0]
    ccac:	20a3      	movs	r0, #163	; 0xa3
    ccae:	70a0      	strb	r0, [r4, #2]
    ccb0:	7908      	ldrb	r0, [r1, #4]
    ccb2:	70e0      	strb	r0, [r4, #3]
    ccb4:	8888      	ldrh	r0, [r1, #4]
    ccb6:	0a00      	lsrs	r0, r0, #8
    ccb8:	7120      	strb	r0, [r4, #4]
    ccba:	7988      	ldrb	r0, [r1, #6]
    ccbc:	7160      	strb	r0, [r4, #5]
    ccbe:	79c8      	ldrb	r0, [r1, #7]
    ccc0:	71a0      	strb	r0, [r4, #6]
    ccc2:	2005      	movs	r0, #5
    ccc4:	e7b0      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ccc6:	7022      	strb	r2, [r4, #0]
    ccc8:	f884 e002 	strb.w	lr, [r4, #2]
    cccc:	7908      	ldrb	r0, [r1, #4]
    ccce:	70e0      	strb	r0, [r4, #3]
    ccd0:	7948      	ldrb	r0, [r1, #5]
    ccd2:	7120      	strb	r0, [r4, #4]
    ccd4:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ccd8:	f8c4 0005 	str.w	r0, [r4, #5]
    ccdc:	8948      	ldrh	r0, [r1, #10]
    ccde:	f8a4 0009 	strh.w	r0, [r4, #9]
    cce2:	e020      	b.n	cd26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    cce4:	7025      	strb	r5, [r4, #0]
    cce6:	20a4      	movs	r0, #164	; 0xa4
    cce8:	70a0      	strb	r0, [r4, #2]
    ccea:	7908      	ldrb	r0, [r1, #4]
    ccec:	70e0      	strb	r0, [r4, #3]
    ccee:	8888      	ldrh	r0, [r1, #4]
    ccf0:	0a00      	lsrs	r0, r0, #8
    ccf2:	7120      	strb	r0, [r4, #4]
    ccf4:	7988      	ldrb	r0, [r1, #6]
    ccf6:	7160      	strb	r0, [r4, #5]
    ccf8:	79c8      	ldrb	r0, [r1, #7]
    ccfa:	71a0      	strb	r0, [r4, #6]
    ccfc:	2007      	movs	r0, #7
    ccfe:	e793      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cd00:	7025      	strb	r5, [r4, #0]
    cd02:	2080      	movs	r0, #128	; 0x80
    cd04:	70a0      	strb	r0, [r4, #2]
    cd06:	888a      	ldrh	r2, [r1, #4]
    cd08:	f8a4 2003 	strh.w	r2, [r4, #3]
    cd0c:	88ca      	ldrh	r2, [r1, #6]
    cd0e:	f8a4 2005 	strh.w	r2, [r4, #5]
    cd12:	7a0a      	ldrb	r2, [r1, #8]
    cd14:	71e2      	strb	r2, [r4, #7]
    cd16:	7a4a      	ldrb	r2, [r1, #9]
    cd18:	8122      	strh	r2, [r4, #8]
    cd1a:	7a8a      	ldrb	r2, [r1, #10]
    cd1c:	72a2      	strb	r2, [r4, #10]
    cd1e:	7ac9      	ldrb	r1, [r1, #11]
    cd20:	f001 0101 	and.w	r1, r1, #1
    cd24:	72e1      	strb	r1, [r4, #11]
    cd26:	200a      	movs	r0, #10
    cd28:	e77e      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000cd2a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    cd2a:	223e      	movs	r2, #62	; 0x3e
    cd2c:	7002      	strb	r2, [r0, #0]
    cd2e:	2201      	movs	r2, #1
    cd30:	7082      	strb	r2, [r0, #2]
    cd32:	790a      	ldrb	r2, [r1, #4]
    cd34:	70c2      	strb	r2, [r0, #3]
    cd36:	798a      	ldrb	r2, [r1, #6]
    cd38:	7102      	strb	r2, [r0, #4]
    cd3a:	88ca      	ldrh	r2, [r1, #6]
    cd3c:	0a12      	lsrs	r2, r2, #8
    cd3e:	7142      	strb	r2, [r0, #5]
    cd40:	7a0a      	ldrb	r2, [r1, #8]
    cd42:	7182      	strb	r2, [r0, #6]
    cd44:	7a4a      	ldrb	r2, [r1, #9]
    cd46:	71c2      	strb	r2, [r0, #7]
    cd48:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cd4c:	6082      	str	r2, [r0, #8]
    cd4e:	89ca      	ldrh	r2, [r1, #14]
    cd50:	8182      	strh	r2, [r0, #12]
    cd52:	7c0a      	ldrb	r2, [r1, #16]
    cd54:	7382      	strb	r2, [r0, #14]
    cd56:	8a0a      	ldrh	r2, [r1, #16]
    cd58:	0a12      	lsrs	r2, r2, #8
    cd5a:	73c2      	strb	r2, [r0, #15]
    cd5c:	7c8a      	ldrb	r2, [r1, #18]
    cd5e:	7402      	strb	r2, [r0, #16]
    cd60:	8a4a      	ldrh	r2, [r1, #18]
    cd62:	0a12      	lsrs	r2, r2, #8
    cd64:	7442      	strb	r2, [r0, #17]
    cd66:	7d0a      	ldrb	r2, [r1, #20]
    cd68:	7482      	strb	r2, [r0, #18]
    cd6a:	8a8a      	ldrh	r2, [r1, #20]
    cd6c:	0a12      	lsrs	r2, r2, #8
    cd6e:	74c2      	strb	r2, [r0, #19]
    cd70:	7d89      	ldrb	r1, [r1, #22]
    cd72:	7501      	strb	r1, [r0, #20]
    cd74:	2013      	movs	r0, #19
    cd76:	4770      	bx	lr

0000cd78 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cd78:	223e      	movs	r2, #62	; 0x3e
    cd7a:	7002      	strb	r2, [r0, #0]
    cd7c:	2201      	movs	r2, #1
    cd7e:	7082      	strb	r2, [r0, #2]
    cd80:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cd84:	70c2      	strb	r2, [r0, #3]
    cd86:	788a      	ldrb	r2, [r1, #2]
    cd88:	7102      	strb	r2, [r0, #4]
    cd8a:	884a      	ldrh	r2, [r1, #2]
    cd8c:	0a12      	lsrs	r2, r2, #8
    cd8e:	7142      	strb	r2, [r0, #5]
    cd90:	790a      	ldrb	r2, [r1, #4]
    cd92:	7182      	strb	r2, [r0, #6]
    cd94:	794a      	ldrb	r2, [r1, #5]
    cd96:	71c2      	strb	r2, [r0, #7]
    cd98:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cd9c:	6082      	str	r2, [r0, #8]
    cd9e:	894a      	ldrh	r2, [r1, #10]
    cda0:	8182      	strh	r2, [r0, #12]
    cda2:	7e0a      	ldrb	r2, [r1, #24]
    cda4:	7382      	strb	r2, [r0, #14]
    cda6:	8b0a      	ldrh	r2, [r1, #24]
    cda8:	0a12      	lsrs	r2, r2, #8
    cdaa:	73c2      	strb	r2, [r0, #15]
    cdac:	7e8a      	ldrb	r2, [r1, #26]
    cdae:	7402      	strb	r2, [r0, #16]
    cdb0:	8b4a      	ldrh	r2, [r1, #26]
    cdb2:	0a12      	lsrs	r2, r2, #8
    cdb4:	7442      	strb	r2, [r0, #17]
    cdb6:	7f0a      	ldrb	r2, [r1, #28]
    cdb8:	7482      	strb	r2, [r0, #18]
    cdba:	8b8a      	ldrh	r2, [r1, #28]
    cdbc:	0a12      	lsrs	r2, r2, #8
    cdbe:	74c2      	strb	r2, [r0, #19]
    cdc0:	7f89      	ldrb	r1, [r1, #30]
    cdc2:	7501      	strb	r1, [r0, #20]
    cdc4:	2113      	movs	r1, #19
    cdc6:	7041      	strb	r1, [r0, #1]
    cdc8:	4608      	mov	r0, r1
    cdca:	4770      	bx	lr

0000cdcc <sdc_hci_data_get>:
    cdcc:	b510      	push	{r4, lr}
    cdce:	b120      	cbz	r0, cdda <sdc_hci_data_get+0xe>
    cdd0:	f7ff fd11 	bl	c7f6 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cdd4:	b120      	cbz	r0, cde0 <sdc_hci_data_get+0x14>
    cdd6:	2000      	movs	r0, #0
    cdd8:	bd10      	pop	{r4, pc}
    cdda:	f06f 0015 	mvn.w	r0, #21
    cdde:	bd10      	pop	{r4, pc}
    cde0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cde4:	bd10      	pop	{r4, pc}

0000cde6 <sdc_hci_data_put>:
    cde6:	b510      	push	{r4, lr}
    cde8:	f06f 0415 	mvn.w	r4, #21
    cdec:	b120      	cbz	r0, cdf8 <sdc_hci_data_put+0x12>
    cdee:	f7ff fd10 	bl	c812 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cdf2:	b108      	cbz	r0, cdf8 <sdc_hci_data_put+0x12>
    cdf4:	2000      	movs	r0, #0
    cdf6:	bd10      	pop	{r4, pc}
    cdf8:	4620      	mov	r0, r4
    cdfa:	bd10      	pop	{r4, pc}

0000cdfc <sdc_hci_evt_get>:
    cdfc:	b510      	push	{r4, lr}
    cdfe:	b120      	cbz	r0, ce0a <sdc_hci_evt_get+0xe>
    ce00:	f7ff fd10 	bl	c824 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    ce04:	b120      	cbz	r0, ce10 <sdc_hci_evt_get+0x14>
    ce06:	2000      	movs	r0, #0
    ce08:	bd10      	pop	{r4, pc}
    ce0a:	f06f 0015 	mvn.w	r0, #21
    ce0e:	bd10      	pop	{r4, pc}
    ce10:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ce14:	bd10      	pop	{r4, pc}

0000ce16 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    ce16:	f002 b98e 	b.w	f136 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000ce1a <sdc_hci_cmd_cb_read_transmit_power_level>:
    ce1a:	f002 b9cd 	b.w	f1b8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000ce1e <sdc_hci_cmd_cb_set_event_mask>:
    ce1e:	b510      	push	{r4, lr}
    ce20:	f7f7 f930 	bl	4084 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    ce24:	2000      	movs	r0, #0
    ce26:	bd10      	pop	{r4, pc}

0000ce28 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    ce28:	b510      	push	{r4, lr}
    ce2a:	f7f7 f939 	bl	40a0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    ce2e:	2000      	movs	r0, #0
    ce30:	bd10      	pop	{r4, pc}

0000ce32 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    ce32:	f002 b9dd 	b.w	f1f0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000ce36 <sdc_hci_cmd_vs_conn_event_extend>:
    ce36:	b508      	push	{r3, lr}
    ce38:	7800      	ldrb	r0, [r0, #0]
    ce3a:	f88d 0000 	strb.w	r0, [sp]
    ce3e:	4668      	mov	r0, sp
    ce40:	f002 f94b 	bl	f0da <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ce44:	bd08      	pop	{r3, pc}

0000ce46 <sdc_hci_cmd_vs_conn_update>:
    ce46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ce48:	2100      	movs	r1, #0
    ce4a:	9100      	str	r1, [sp, #0]
    ce4c:	9101      	str	r1, [sp, #4]
    ce4e:	9102      	str	r1, [sp, #8]
    ce50:	9103      	str	r1, [sp, #12]
    ce52:	f8d0 1002 	ldr.w	r1, [r0, #2]
    ce56:	f641 524c 	movw	r2, #7500	; 0x1d4c
    ce5a:	4291      	cmp	r1, r2
    ce5c:	d304      	bcc.n	ce68 <sdc_hci_cmd_vs_conn_update+0x22>
    ce5e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ce62:	fbb1 f1f2 	udiv	r1, r1, r2
    ce66:	e005      	b.n	ce74 <sdc_hci_cmd_vs_conn_update+0x2e>
    ce68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ce6c:	fbb1 f1f2 	udiv	r1, r1, r2
    ce70:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    ce74:	8802      	ldrh	r2, [r0, #0]
    ce76:	b289      	uxth	r1, r1
    ce78:	f8ad 2000 	strh.w	r2, [sp]
    ce7c:	f8ad 1002 	strh.w	r1, [sp, #2]
    ce80:	f8ad 1004 	strh.w	r1, [sp, #4]
    ce84:	88c1      	ldrh	r1, [r0, #6]
    ce86:	f8ad 1006 	strh.w	r1, [sp, #6]
    ce8a:	8900      	ldrh	r0, [r0, #8]
    ce8c:	f8ad 0008 	strh.w	r0, [sp, #8]
    ce90:	4668      	mov	r0, sp
    ce92:	f001 fed9 	bl	ec48 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    ce96:	b004      	add	sp, #16
    ce98:	bd10      	pop	{r4, pc}

0000ce9a <sdc_hci_cmd_vs_event_length_set>:
    ce9a:	f7fd be43 	b.w	ab24 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ce9e <sdc_hci_cmd_vs_llpm_mode_set>:
    ce9e:	2001      	movs	r0, #1
    cea0:	4770      	bx	lr

0000cea2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cea2:	7800      	ldrb	r0, [r0, #0]
    cea4:	b100      	cbz	r0, cea8 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cea6:	2001      	movs	r0, #1
    cea8:	f002 b8ef 	b.w	f08a <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ceac <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ceac:	b570      	push	{r4, r5, r6, lr}
    ceae:	4605      	mov	r5, r0
    ceb0:	2210      	movs	r2, #16
    ceb2:	2100      	movs	r1, #0
    ceb4:	f7ff fbee 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ceb8:	2210      	movs	r2, #16
    ceba:	2100      	movs	r1, #0
    cebc:	f105 0010 	add.w	r0, r5, #16
    cec0:	f7ff fbe8 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cec4:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cec8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cecc:	1c40      	adds	r0, r0, #1
    cece:	d10b      	bne.n	cee8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ced0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ced4:	1c40      	adds	r0, r0, #1
    ced6:	d107      	bne.n	cee8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ced8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cedc:	1c40      	adds	r0, r0, #1
    cede:	d103      	bne.n	cee8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cee0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cee4:	1c40      	adds	r0, r0, #1
    cee6:	d00b      	beq.n	cf00 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cee8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    ceec:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cef0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    cef4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cef8:	612a      	str	r2, [r5, #16]
    cefa:	6168      	str	r0, [r5, #20]
    cefc:	61a9      	str	r1, [r5, #24]
    cefe:	61eb      	str	r3, [r5, #28]
    cf00:	2000      	movs	r0, #0
    cf02:	f7f7 fdbb 	bl	4a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cf06:	b918      	cbnz	r0, cf10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cf08:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cf0c:	07c0      	lsls	r0, r0, #31
    cf0e:	d118      	bne.n	cf42 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cf10:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cf14:	1c40      	adds	r0, r0, #1
    cf16:	d10b      	bne.n	cf30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf18:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cf1c:	1c40      	adds	r0, r0, #1
    cf1e:	d107      	bne.n	cf30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf20:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cf24:	1c40      	adds	r0, r0, #1
    cf26:	d103      	bne.n	cf30 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf28:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cf2c:	1c40      	adds	r0, r0, #1
    cf2e:	d008      	beq.n	cf42 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cf30:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cf34:	6861      	ldr	r1, [r4, #4]
    cf36:	68a2      	ldr	r2, [r4, #8]
    cf38:	68e3      	ldr	r3, [r4, #12]
    cf3a:	6028      	str	r0, [r5, #0]
    cf3c:	6069      	str	r1, [r5, #4]
    cf3e:	60aa      	str	r2, [r5, #8]
    cf40:	60eb      	str	r3, [r5, #12]
    cf42:	2000      	movs	r0, #0
    cf44:	bd70      	pop	{r4, r5, r6, pc}

0000cf46 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cf46:	b538      	push	{r3, r4, r5, lr}
    cf48:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cf4c:	4604      	mov	r4, r0
    cf4e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cf52:	1c40      	adds	r0, r0, #1
    cf54:	d105      	bne.n	cf62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cf56:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cf5a:	43c0      	mvns	r0, r0
    cf5c:	0400      	lsls	r0, r0, #16
    cf5e:	0c00      	lsrs	r0, r0, #16
    cf60:	d03e      	beq.n	cfe0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cf62:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cf66:	07c0      	lsls	r0, r0, #31
    cf68:	d03a      	beq.n	cfe0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cf6a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cf6e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    cf72:	f8ad 1000 	strh.w	r1, [sp]
    cf76:	f8c4 0001 	str.w	r0, [r4, #1]
    cf7a:	f8bd 0000 	ldrh.w	r0, [sp]
    cf7e:	f8a4 0005 	strh.w	r0, [r4, #5]
    cf82:	79a0      	ldrb	r0, [r4, #6]
    cf84:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cf88:	71a0      	strb	r0, [r4, #6]
    cf8a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cf8e:	1c40      	adds	r0, r0, #1
    cf90:	d00f      	beq.n	cfb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cf92:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cf96:	1c40      	adds	r0, r0, #1
    cf98:	d00b      	beq.n	cfb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cf9a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cf9e:	1c40      	adds	r0, r0, #1
    cfa0:	d007      	beq.n	cfb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cfa2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cfa6:	1c40      	adds	r0, r0, #1
    cfa8:	d003      	beq.n	cfb2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cfaa:	2000      	movs	r0, #0
    cfac:	f7f7 fd66 	bl	4a7c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cfb0:	b140      	cbz	r0, cfc4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    cfb2:	2210      	movs	r2, #16
    cfb4:	2100      	movs	r1, #0
    cfb6:	1de0      	adds	r0, r4, #7
    cfb8:	f7ff fb6c 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cfbc:	2001      	movs	r0, #1
    cfbe:	7020      	strb	r0, [r4, #0]
    cfc0:	2000      	movs	r0, #0
    cfc2:	bd38      	pop	{r3, r4, r5, pc}
    cfc4:	f855 2f90 	ldr.w	r2, [r5, #144]!
    cfc8:	6869      	ldr	r1, [r5, #4]
    cfca:	68a8      	ldr	r0, [r5, #8]
    cfcc:	68eb      	ldr	r3, [r5, #12]
    cfce:	f8c4 2007 	str.w	r2, [r4, #7]
    cfd2:	f8c4 100b 	str.w	r1, [r4, #11]
    cfd6:	f8c4 000f 	str.w	r0, [r4, #15]
    cfda:	f8c4 3013 	str.w	r3, [r4, #19]
    cfde:	e7ed      	b.n	cfbc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    cfe0:	2000      	movs	r0, #0
    cfe2:	e7ec      	b.n	cfbe <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000cfe4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cfe4:	f002 b86b 	b.w	f0be <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cfe8 <sdc_hci_cmd_ip_read_bd_addr>:
    cfe8:	f002 b8b6 	b.w	f158 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cfec <sdc_hci_cmd_ip_read_local_version_information>:
    cfec:	f7fd bde6 	b.w	abbc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cff0 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    cff0:	f001 bde1 	b.w	ebb6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cff4 <sdc_hci_cmd_le_add_device_to_white_list>:
    cff4:	f001 bdfa 	b.w	ebec <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cff8 <sdc_hci_cmd_le_clear_resolving_list>:
    cff8:	f001 be0f 	b.w	ec1a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000cffc <sdc_hci_cmd_le_clear_white_list>:
    cffc:	f001 be1a 	b.w	ec34 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d000 <sdc_hci_cmd_le_conn_update>:
    d000:	f001 be22 	b.w	ec48 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d004 <sdc_hci_cmd_le_create_conn>:
    d004:	f7fd bb30 	b.w	a668 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d008 <sdc_hci_cmd_le_create_conn_cancel>:
    d008:	f001 be60 	b.w	eccc <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d00c <sdc_hci_cmd_le_enable_encryption>:
    d00c:	f001 bff4 	b.w	eff8 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d010 <sdc_hci_cmd_le_encrypt>:
    d010:	f001 be84 	b.w	ed1c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d014 <sdc_hci_cmd_le_rand>:
    d014:	f001 be8b 	b.w	ed2e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d018 <sdc_hci_cmd_le_read_buffer_size>:
    d018:	f7fd bb80 	b.w	a71c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d01c <sdc_hci_cmd_le_read_channel_map>:
    d01c:	f7fd bb88 	b.w	a730 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d020 <sdc_hci_cmd_le_read_max_data_length>:
    d020:	f001 be8b 	b.w	ed3a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d024 <sdc_hci_cmd_le_read_phy>:
    d024:	f001 be99 	b.w	ed5a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d028 <sdc_hci_cmd_le_read_remote_features>:
    d028:	f7fd bbac 	b.w	a784 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d02c <sdc_hci_cmd_le_read_resolving_list_size>:
    d02c:	f001 bec0 	b.w	edb0 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d030 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d030:	f7fd bbcc 	b.w	a7cc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d034 <sdc_hci_cmd_le_read_transmit_power>:
    d034:	f001 bec0 	b.w	edb8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d038 <sdc_hci_cmd_le_read_white_list_size>:
    d038:	f001 bec7 	b.w	edca <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d03c <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d03c:	f001 bec9 	b.w	edd2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d040 <sdc_hci_cmd_le_remove_device_from_white_list>:
    d040:	f001 bee0 	b.w	ee04 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d044 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d044:	f001 bef3 	b.w	ee2e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d048 <sdc_hci_cmd_le_set_data_length>:
    d048:	f001 beff 	b.w	ee4a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d04c <sdc_hci_cmd_le_set_default_phy>:
    d04c:	f7fd bbce 	b.w	a7ec <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d050 <sdc_hci_cmd_le_set_event_mask>:
    d050:	b510      	push	{r4, lr}
    d052:	f7f7 f811 	bl	4078 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d056:	2000      	movs	r0, #0
    d058:	bd10      	pop	{r4, pc}

0000d05a <sdc_hci_cmd_le_set_host_channel_classification>:
    d05a:	f001 bf1d 	b.w	ee98 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d05e <sdc_hci_cmd_le_set_phy>:
    d05e:	f001 bf3b 	b.w	eed8 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d062 <sdc_hci_cmd_le_set_privacy_mode>:
    d062:	f001 bf59 	b.w	ef18 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d066 <sdc_hci_cmd_le_set_random_address>:
    d066:	f001 bf6d 	b.w	ef44 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d06a <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d06a:	f001 bf79 	b.w	ef60 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d06e <sdc_hci_cmd_le_set_scan_enable>:
    d06e:	f001 bf80 	b.w	ef72 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d072 <sdc_hci_cmd_le_set_scan_params>:
    d072:	f001 bf94 	b.w	ef9e <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d076 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d076:	f001 bff1 	b.w	f05c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d07a <sdc_hci_cmd_lc_disconnect>:
    d07a:	f001 bd4b 	b.w	eb14 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d07e <sdc_hci_cmd_lc_read_remote_version_information>:
    d07e:	f002 b877 	b.w	f170 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d082:	b570      	push	{r4, r5, r6, lr}
    d084:	880b      	ldrh	r3, [r1, #0]
    d086:	7f04      	ldrb	r4, [r0, #28]
    d088:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d08c:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d090:	8802      	ldrh	r2, [r0, #0]
    d092:	4435      	add	r5, r6
    d094:	1da4      	adds	r4, r4, #6
    d096:	882d      	ldrh	r5, [r5, #0]
    d098:	4422      	add	r2, r4
    d09a:	b292      	uxth	r2, r2
    d09c:	4425      	add	r5, r4
    d09e:	1e54      	subs	r4, r2, #1
    d0a0:	442c      	add	r4, r5
    d0a2:	fb94 f4f2 	sdiv	r4, r4, r2
    d0a6:	fb02 6204 	mla	r2, r2, r4, r6
    d0aa:	8840      	ldrh	r0, [r0, #2]
    d0ac:	b292      	uxth	r2, r2
    d0ae:	4290      	cmp	r0, r2
    d0b0:	d903      	bls.n	d0ba <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d0b2:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d0b6:	4310      	orrs	r0, r2
    d0b8:	e002      	b.n	d0c0 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d0ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d0be:	4398      	bics	r0, r3
    d0c0:	8008      	strh	r0, [r1, #0]
    d0c2:	bd70      	pop	{r4, r5, r6, pc}
    d0c4:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d0c8:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d0cc:	429a      	cmp	r2, r3
    d0ce:	d107      	bne.n	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d0d0:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d0d4:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d0d8:	4288      	cmp	r0, r1
    d0da:	d001      	beq.n	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d0dc:	2001      	movs	r0, #1
    d0de:	4770      	bx	lr
    d0e0:	2000      	movs	r0, #0
    d0e2:	4770      	bx	lr

0000d0e4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d0e4:	b570      	push	{r4, r5, r6, lr}
    d0e6:	7f00      	ldrb	r0, [r0, #28]
    d0e8:	461c      	mov	r4, r3
    d0ea:	1d80      	adds	r0, r0, #6
    d0ec:	4408      	add	r0, r1
    d0ee:	4613      	mov	r3, r2
    d0f0:	8809      	ldrh	r1, [r1, #0]
    d0f2:	9a04      	ldr	r2, [sp, #16]
    d0f4:	1cc9      	adds	r1, r1, #3
    d0f6:	b289      	uxth	r1, r1
    d0f8:	1915      	adds	r5, r2, r4
    d0fa:	1ec0      	subs	r0, r0, #3
    d0fc:	428d      	cmp	r5, r1
    d0fe:	d805      	bhi.n	d10c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d100:	1881      	adds	r1, r0, r2
    d102:	4622      	mov	r2, r4
    d104:	4618      	mov	r0, r3
    d106:	f7ff fa4b 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d10a:	e000      	b.n	d10e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d10c:	2400      	movs	r4, #0
    d10e:	4620      	mov	r0, r4
    d110:	bd70      	pop	{r4, r5, r6, pc}

0000d112 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d112:	b570      	push	{r4, r5, r6, lr}
    d114:	7f00      	ldrb	r0, [r0, #28]
    d116:	461c      	mov	r4, r3
    d118:	1d80      	adds	r0, r0, #6
    d11a:	4408      	add	r0, r1
    d11c:	4613      	mov	r3, r2
    d11e:	8809      	ldrh	r1, [r1, #0]
    d120:	9a04      	ldr	r2, [sp, #16]
    d122:	1cc9      	adds	r1, r1, #3
    d124:	b289      	uxth	r1, r1
    d126:	1915      	adds	r5, r2, r4
    d128:	1ec0      	subs	r0, r0, #3
    d12a:	428d      	cmp	r5, r1
    d12c:	d805      	bhi.n	d13a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d12e:	4410      	add	r0, r2
    d130:	4622      	mov	r2, r4
    d132:	4619      	mov	r1, r3
    d134:	f7ff fa34 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d138:	e000      	b.n	d13c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d13a:	2400      	movs	r4, #0
    d13c:	4620      	mov	r0, r4
    d13e:	bd70      	pop	{r4, r5, r6, pc}

0000d140 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d140:	8881      	ldrh	r1, [r0, #4]
    d142:	88c0      	ldrh	r0, [r0, #6]
    d144:	4288      	cmp	r0, r1
    d146:	d101      	bne.n	d14c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d148:	2001      	movs	r0, #1
    d14a:	4770      	bx	lr
    d14c:	2000      	movs	r0, #0
    d14e:	4770      	bx	lr

0000d150 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d150:	8881      	ldrh	r1, [r0, #4]
    d152:	8900      	ldrh	r0, [r0, #8]
    d154:	4288      	cmp	r0, r1
    d156:	d101      	bne.n	d15c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d158:	2001      	movs	r0, #1
    d15a:	4770      	bx	lr
    d15c:	2000      	movs	r0, #0
    d15e:	4770      	bx	lr

0000d160 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d160:	b570      	push	{r4, r5, r6, lr}
    d162:	4604      	mov	r4, r0
    d164:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d168:	8880      	ldrh	r0, [r0, #4]
    d16a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d16e:	4401      	add	r1, r0
    d170:	8a20      	ldrh	r0, [r4, #16]
    d172:	2800      	cmp	r0, #0
    d174:	d01a      	beq.n	d1ac <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d176:	89a2      	ldrh	r2, [r4, #12]
    d178:	2500      	movs	r5, #0
    d17a:	4410      	add	r0, r2
    d17c:	b280      	uxth	r0, r0
    d17e:	81a0      	strh	r0, [r4, #12]
    d180:	880a      	ldrh	r2, [r1, #0]
    d182:	4290      	cmp	r0, r2
    d184:	d905      	bls.n	d192 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d186:	f240 1163 	movw	r1, #355	; 0x163
    d18a:	f04f 0014 	mov.w	r0, #20
    d18e:	f7f6 fdf7 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d192:	d109      	bne.n	d1a8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d194:	69a0      	ldr	r0, [r4, #24]
    d196:	b108      	cbz	r0, d19c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d198:	7f40      	ldrb	r0, [r0, #29]
    d19a:	7088      	strb	r0, [r1, #2]
    d19c:	f104 0104 	add.w	r1, r4, #4
    d1a0:	4620      	mov	r0, r4
    d1a2:	f7ff ff6e 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d1a6:	81a5      	strh	r5, [r4, #12]
    d1a8:	8225      	strh	r5, [r4, #16]
    d1aa:	2001      	movs	r0, #1
    d1ac:	bd70      	pop	{r4, r5, r6, pc}

0000d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1b0:	4604      	mov	r4, r0
    d1b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d1b6:	88c0      	ldrh	r0, [r0, #6]
    d1b8:	460e      	mov	r6, r1
    d1ba:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d1be:	8a60      	ldrh	r0, [r4, #18]
    d1c0:	19d9      	adds	r1, r3, r7
    d1c2:	b108      	cbz	r0, d1c8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d1c4:	42b0      	cmp	r0, r6
    d1c6:	d201      	bcs.n	d1cc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d1c8:	2000      	movs	r0, #0
    d1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1cc:	89e0      	ldrh	r0, [r4, #14]
    d1ce:	2500      	movs	r5, #0
    d1d0:	b140      	cbz	r0, d1e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d1d2:	f8b1 c000 	ldrh.w	ip, [r1]
    d1d6:	4560      	cmp	r0, ip
    d1d8:	d008      	beq.n	d1ec <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d1da:	f240 214b 	movw	r1, #587	; 0x24b
    d1de:	2014      	movs	r0, #20
    d1e0:	f7f6 fdce 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1e4:	7f60      	ldrb	r0, [r4, #29]
    d1e6:	7088      	strb	r0, [r1, #2]
    d1e8:	800d      	strh	r5, [r1, #0]
    d1ea:	e00e      	b.n	d20a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d1ec:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d1f0:	4418      	add	r0, r3
    d1f2:	f10c 0c06 	add.w	ip, ip, #6
    d1f6:	44bc      	add	ip, r7
    d1f8:	4460      	add	r0, ip
    d1fa:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d1fe:	f820 cc03 	strh.w	ip, [r0, #-3]
    d202:	f894 c020 	ldrb.w	ip, [r4, #32]
    d206:	f800 cc01 	strb.w	ip, [r0, #-1]
    d20a:	89e0      	ldrh	r0, [r4, #14]
    d20c:	4430      	add	r0, r6
    d20e:	81e0      	strh	r0, [r4, #14]
    d210:	8808      	ldrh	r0, [r1, #0]
    d212:	4430      	add	r0, r6
    d214:	8008      	strh	r0, [r1, #0]
    d216:	b19a      	cbz	r2, d240 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d218:	1da1      	adds	r1, r4, #6
    d21a:	4620      	mov	r0, r4
    d21c:	f7ff ff31 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d220:	81e5      	strh	r5, [r4, #14]
    d222:	7f60      	ldrb	r0, [r4, #29]
    d224:	1c40      	adds	r0, r0, #1
    d226:	7760      	strb	r0, [r4, #29]
    d228:	7da0      	ldrb	r0, [r4, #22]
    d22a:	f88d 0000 	strb.w	r0, [sp]
    d22e:	9800      	ldr	r0, [sp, #0]
    d230:	9000      	str	r0, [sp, #0]
    d232:	f89d 0000 	ldrb.w	r0, [sp]
    d236:	b178      	cbz	r0, d258 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d238:	88e0      	ldrh	r0, [r4, #6]
    d23a:	82a0      	strh	r0, [r4, #20]
    d23c:	75a5      	strb	r5, [r4, #22]
    d23e:	e00b      	b.n	d258 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d240:	7f20      	ldrb	r0, [r4, #28]
    d242:	89e1      	ldrh	r1, [r4, #14]
    d244:	1d80      	adds	r0, r0, #6
    d246:	4438      	add	r0, r7
    d248:	4419      	add	r1, r3
    d24a:	4408      	add	r0, r1
    d24c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d250:	83e1      	strh	r1, [r4, #30]
    d252:	7880      	ldrb	r0, [r0, #2]
    d254:	f884 0020 	strb.w	r0, [r4, #32]
    d258:	8265      	strh	r5, [r4, #18]
    d25a:	2001      	movs	r0, #1
    d25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d25e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d25e:	1cc0      	adds	r0, r0, #3
    d260:	4770      	bx	lr

0000d262 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d262:	b510      	push	{r4, lr}
    d264:	88c2      	ldrh	r2, [r0, #6]
    d266:	8943      	ldrh	r3, [r0, #10]
    d268:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    d26c:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    d270:	1a61      	subs	r1, r4, r1
    d272:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d27a:	429a      	cmp	r2, r3
    d27c:	d101      	bne.n	d282 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d27e:	8842      	ldrh	r2, [r0, #2]
    d280:	4411      	add	r1, r2
    d282:	7f02      	ldrb	r2, [r0, #28]
    d284:	8800      	ldrh	r0, [r0, #0]
    d286:	4410      	add	r0, r2
    d288:	1d80      	adds	r0, r0, #6
    d28a:	b280      	uxth	r0, r0
    d28c:	fb91 f0f0 	sdiv	r0, r1, r0
    d290:	b280      	uxth	r0, r0
    d292:	bd10      	pop	{r4, pc}

0000d294 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d294:	b510      	push	{r4, lr}
    d296:	4604      	mov	r4, r0
    d298:	88c0      	ldrh	r0, [r0, #6]
    d29a:	88a1      	ldrh	r1, [r4, #4]
    d29c:	4281      	cmp	r1, r0
    d29e:	d007      	beq.n	d2b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2a0:	89a0      	ldrh	r0, [r4, #12]
    d2a2:	b928      	cbnz	r0, d2b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2a4:	8a20      	ldrh	r0, [r4, #16]
    d2a6:	b918      	cbnz	r0, d2b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2a8:	88a0      	ldrh	r0, [r4, #4]
    d2aa:	8aa1      	ldrh	r1, [r4, #20]
    d2ac:	4288      	cmp	r0, r1
    d2ae:	d101      	bne.n	d2b4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d2b0:	2000      	movs	r0, #0
    d2b2:	bd10      	pop	{r4, pc}
    d2b4:	1d21      	adds	r1, r4, #4
    d2b6:	4620      	mov	r0, r4
    d2b8:	f7ff fee3 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2bc:	2000      	movs	r0, #0
    d2be:	8220      	strh	r0, [r4, #16]
    d2c0:	2001      	movs	r0, #1
    d2c2:	bd10      	pop	{r4, pc}

0000d2c4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d2c4:	b510      	push	{r4, lr}
    d2c6:	4604      	mov	r4, r0
    d2c8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d2cc:	88c0      	ldrh	r0, [r0, #6]
    d2ce:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d2d2:	4402      	add	r2, r0
    d2d4:	8820      	ldrh	r0, [r4, #0]
    d2d6:	2845      	cmp	r0, #69	; 0x45
    d2d8:	d200      	bcs.n	d2dc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d2da:	2045      	movs	r0, #69	; 0x45
    d2dc:	4288      	cmp	r0, r1
    d2de:	d204      	bcs.n	d2ea <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d2e0:	f240 1119 	movw	r1, #281	; 0x119
    d2e4:	2014      	movs	r0, #20
    d2e6:	f7f6 fd4b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2ea:	7de0      	ldrb	r0, [r4, #23]
    d2ec:	2800      	cmp	r0, #0
    d2ee:	d003      	beq.n	d2f8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d2f0:	8810      	ldrh	r0, [r2, #0]
    d2f2:	4288      	cmp	r0, r1
    d2f4:	d201      	bcs.n	d2fa <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d2f6:	2000      	movs	r0, #0
    d2f8:	bd10      	pop	{r4, pc}
    d2fa:	8011      	strh	r1, [r2, #0]
    d2fc:	1da1      	adds	r1, r4, #6
    d2fe:	4620      	mov	r0, r4
    d300:	f7ff febf 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d304:	2000      	movs	r0, #0
    d306:	75e0      	strb	r0, [r4, #23]
    d308:	2001      	movs	r0, #1
    d30a:	bd10      	pop	{r4, pc}

0000d30c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d310:	8941      	ldrh	r1, [r0, #10]
    d312:	8886      	ldrh	r6, [r0, #4]
    d314:	4604      	mov	r4, r0
    d316:	2500      	movs	r5, #0
    d318:	f100 070a 	add.w	r7, r0, #10
    d31c:	e006      	b.n	d32c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d31e:	4639      	mov	r1, r7
    d320:	4620      	mov	r0, r4
    d322:	f7ff feae 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d326:	1c6d      	adds	r5, r5, #1
    d328:	8961      	ldrh	r1, [r4, #10]
    d32a:	b2ad      	uxth	r5, r5
    d32c:	42b1      	cmp	r1, r6
    d32e:	d1f6      	bne.n	d31e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d330:	4628      	mov	r0, r5
    d332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d336 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d336:	b530      	push	{r4, r5, lr}
    d338:	88c4      	ldrh	r4, [r0, #6]
    d33a:	8881      	ldrh	r1, [r0, #4]
    d33c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d340:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d344:	4413      	add	r3, r2
    d346:	8882      	ldrh	r2, [r0, #4]
    d348:	8a85      	ldrh	r5, [r0, #20]
    d34a:	42aa      	cmp	r2, r5
    d34c:	d012      	beq.n	d374 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d34e:	42a1      	cmp	r1, r4
    d350:	d010      	beq.n	d374 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d352:	8981      	ldrh	r1, [r0, #12]
    d354:	b971      	cbnz	r1, d374 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d356:	6982      	ldr	r2, [r0, #24]
    d358:	b172      	cbz	r2, d378 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d35a:	4610      	mov	r0, r2
    d35c:	f7ff fef8 	bl	d150 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d360:	b950      	cbnz	r0, d378 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d362:	8910      	ldrh	r0, [r2, #8]
    d364:	3224      	adds	r2, #36	; 0x24
    d366:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d36a:	4410      	add	r0, r2
    d36c:	7899      	ldrb	r1, [r3, #2]
    d36e:	7880      	ldrb	r0, [r0, #2]
    d370:	4288      	cmp	r0, r1
    d372:	d101      	bne.n	d378 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d374:	2000      	movs	r0, #0
    d376:	bd30      	pop	{r4, r5, pc}
    d378:	4618      	mov	r0, r3
    d37a:	bd30      	pop	{r4, r5, pc}

0000d37c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d37c:	8803      	ldrh	r3, [r0, #0]
    d37e:	2b45      	cmp	r3, #69	; 0x45
    d380:	d200      	bcs.n	d384 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d382:	2345      	movs	r3, #69	; 0x45
    d384:	8013      	strh	r3, [r2, #0]
    d386:	88c2      	ldrh	r2, [r0, #6]
    d388:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    d38c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d390:	441a      	add	r2, r3
    d392:	600a      	str	r2, [r1, #0]
    d394:	89c0      	ldrh	r0, [r0, #14]
    d396:	4770      	bx	lr

0000d398 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d398:	7f00      	ldrb	r0, [r0, #28]
    d39a:	1d80      	adds	r0, r0, #6
    d39c:	4408      	add	r0, r1
    d39e:	1ec0      	subs	r0, r0, #3
    d3a0:	6010      	str	r0, [r2, #0]
    d3a2:	8808      	ldrh	r0, [r1, #0]
    d3a4:	4770      	bx	lr

0000d3a6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3aa:	460e      	mov	r6, r1
    d3ac:	88c1      	ldrh	r1, [r0, #6]
    d3ae:	8902      	ldrh	r2, [r0, #8]
    d3b0:	4604      	mov	r4, r0
    d3b2:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d3b6:	8800      	ldrh	r0, [r0, #0]
    d3b8:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d3bc:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d3c0:	2845      	cmp	r0, #69	; 0x45
    d3c2:	d200      	bcs.n	d3c6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d3c4:	2045      	movs	r0, #69	; 0x45
    d3c6:	42b0      	cmp	r0, r6
    d3c8:	d203      	bcs.n	d3d2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d3ca:	21db      	movs	r1, #219	; 0xdb
    d3cc:	2014      	movs	r0, #20
    d3ce:	f7f6 fcd7 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3d2:	4610      	mov	r0, r2
    d3d4:	f7ff fe76 	bl	d0c4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d3d8:	b110      	cbz	r0, d3e0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d3da:	2000      	movs	r0, #0
    d3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3e0:	42af      	cmp	r7, r5
    d3e2:	d908      	bls.n	d3f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3e4:	7f21      	ldrb	r1, [r4, #28]
    d3e6:	1b78      	subs	r0, r7, r5
    d3e8:	1a40      	subs	r0, r0, r1
    d3ea:	1f80      	subs	r0, r0, #6
    d3ec:	4286      	cmp	r6, r0
    d3ee:	dd02      	ble.n	d3f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3f0:	2000      	movs	r0, #0
    d3f2:	75e0      	strb	r0, [r4, #23]
    d3f4:	e7f1      	b.n	d3da <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d3f6:	eb08 0005 	add.w	r0, r8, r5
    d3fa:	2101      	movs	r1, #1
    d3fc:	8006      	strh	r6, [r0, #0]
    d3fe:	75e1      	strb	r1, [r4, #23]
    d400:	e7ec      	b.n	d3dc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d402 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d402:	b538      	push	{r3, r4, r5, lr}
    d404:	88c4      	ldrh	r4, [r0, #6]
    d406:	8881      	ldrh	r1, [r0, #4]
    d408:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d40c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d410:	441a      	add	r2, r3
    d412:	42a1      	cmp	r1, r4
    d414:	d010      	beq.n	d438 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d416:	8983      	ldrh	r3, [r0, #12]
    d418:	8a05      	ldrh	r5, [r0, #16]
    d41a:	8812      	ldrh	r2, [r2, #0]
    d41c:	442b      	add	r3, r5
    d41e:	4293      	cmp	r3, r2
    d420:	d308      	bcc.n	d434 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d422:	f8ad 1000 	strh.w	r1, [sp]
    d426:	4669      	mov	r1, sp
    d428:	f7ff fe2b 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d42c:	f8bd 0000 	ldrh.w	r0, [sp]
    d430:	42a0      	cmp	r0, r4
    d432:	d001      	beq.n	d438 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d434:	2001      	movs	r0, #1
    d436:	bd38      	pop	{r3, r4, r5, pc}
    d438:	2000      	movs	r0, #0
    d43a:	bd38      	pop	{r3, r4, r5, pc}

0000d43c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d43c:	b570      	push	{r4, r5, r6, lr}
    d43e:	88c6      	ldrh	r6, [r0, #6]
    d440:	8885      	ldrh	r5, [r0, #4]
    d442:	4603      	mov	r3, r0
    d444:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d448:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d44c:	4420      	add	r0, r4
    d44e:	42b5      	cmp	r5, r6
    d450:	d102      	bne.n	d458 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d452:	2000      	movs	r0, #0
    d454:	8218      	strh	r0, [r3, #16]
    d456:	bd70      	pop	{r4, r5, r6, pc}
    d458:	8804      	ldrh	r4, [r0, #0]
    d45a:	899d      	ldrh	r5, [r3, #12]
    d45c:	7f1e      	ldrb	r6, [r3, #28]
    d45e:	1b64      	subs	r4, r4, r5
    d460:	4435      	add	r5, r6
    d462:	4428      	add	r0, r5
    d464:	880d      	ldrh	r5, [r1, #0]
    d466:	b2a4      	uxth	r4, r4
    d468:	1cc0      	adds	r0, r0, #3
    d46a:	42a5      	cmp	r5, r4
    d46c:	d900      	bls.n	d470 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d46e:	800c      	strh	r4, [r1, #0]
    d470:	899c      	ldrh	r4, [r3, #12]
    d472:	b124      	cbz	r4, d47e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d474:	2400      	movs	r4, #0
    d476:	7014      	strb	r4, [r2, #0]
    d478:	8809      	ldrh	r1, [r1, #0]
    d47a:	8219      	strh	r1, [r3, #16]
    d47c:	bd70      	pop	{r4, r5, r6, pc}
    d47e:	2401      	movs	r4, #1
    d480:	e7f9      	b.n	d476 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d482 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d482:	b508      	push	{r3, lr}
    d484:	8a81      	ldrh	r1, [r0, #20]
    d486:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d48a:	3aff      	subs	r2, #255	; 0xff
    d48c:	d008      	beq.n	d4a0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d48e:	7d82      	ldrb	r2, [r0, #22]
    d490:	f88d 2000 	strb.w	r2, [sp]
    d494:	9a00      	ldr	r2, [sp, #0]
    d496:	9200      	str	r2, [sp, #0]
    d498:	f89d 2000 	ldrb.w	r2, [sp]
    d49c:	b952      	cbnz	r2, d4b4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d49e:	e004      	b.n	d4aa <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d4a0:	f44f 7162 	mov.w	r1, #904	; 0x388
    d4a4:	2014      	movs	r0, #20
    d4a6:	f7f6 fc6b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4aa:	8880      	ldrh	r0, [r0, #4]
    d4ac:	4281      	cmp	r1, r0
    d4ae:	d101      	bne.n	d4b4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d4b0:	2000      	movs	r0, #0
    d4b2:	bd08      	pop	{r3, pc}
    d4b4:	2001      	movs	r0, #1
    d4b6:	bd08      	pop	{r3, pc}

0000d4b8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d4b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4bc:	8281      	strh	r1, [r0, #20]
    d4be:	2100      	movs	r1, #0
    d4c0:	7581      	strb	r1, [r0, #22]
    d4c2:	4770      	bx	lr

0000d4c4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d4c4:	b510      	push	{r4, lr}
    d4c6:	8a81      	ldrh	r1, [r0, #20]
    d4c8:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d4cc:	3aff      	subs	r2, #255	; 0xff
    d4ce:	d004      	beq.n	d4da <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d4d0:	f44f 7159 	mov.w	r1, #868	; 0x364
    d4d4:	2014      	movs	r0, #20
    d4d6:	f7f6 fc53 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4da:	88c1      	ldrh	r1, [r0, #6]
    d4dc:	8281      	strh	r1, [r0, #20]
    d4de:	89c1      	ldrh	r1, [r0, #14]
    d4e0:	b109      	cbz	r1, d4e6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d4e2:	2101      	movs	r1, #1
    d4e4:	e000      	b.n	d4e8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d4e6:	2100      	movs	r1, #0
    d4e8:	7581      	strb	r1, [r0, #22]
    d4ea:	bd10      	pop	{r4, pc}

0000d4ec <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4f0:	461d      	mov	r5, r3
    d4f2:	4616      	mov	r6, r2
    d4f4:	9f06      	ldr	r7, [sp, #24]
    d4f6:	460b      	mov	r3, r1
    d4f8:	4604      	mov	r4, r0
    d4fa:	463a      	mov	r2, r7
    d4fc:	4629      	mov	r1, r5
    d4fe:	4630      	mov	r0, r6
    d500:	f000 f84f 	bl	d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d504:	4283      	cmp	r3, r0
    d506:	d201      	bcs.n	d50c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d508:	21a8      	movs	r1, #168	; 0xa8
    d50a:	e018      	b.n	d53e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d50c:	1ce0      	adds	r0, r4, #3
    d50e:	f020 0103 	bic.w	r1, r0, #3
    d512:	4620      	mov	r0, r4
    d514:	42a1      	cmp	r1, r4
    d516:	d001      	beq.n	d51c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d518:	21a9      	movs	r1, #169	; 0xa9
    d51a:	e010      	b.n	d53e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d51c:	2224      	movs	r2, #36	; 0x24
    d51e:	2100      	movs	r1, #0
    d520:	f7ff f8b8 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d524:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d528:	82a0      	strh	r0, [r4, #20]
    d52a:	19a8      	adds	r0, r5, r6
    d52c:	1d80      	adds	r0, r0, #6
    d52e:	4378      	muls	r0, r7
    d530:	b280      	uxth	r0, r0
    d532:	7725      	strb	r5, [r4, #28]
    d534:	8060      	strh	r0, [r4, #2]
    d536:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d53a:	d903      	bls.n	d544 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d53c:	21af      	movs	r1, #175	; 0xaf
    d53e:	2014      	movs	r0, #20
    d540:	f7f6 fc1e 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d544:	8026      	strh	r6, [r4, #0]
    d546:	2000      	movs	r0, #0
    d548:	7760      	strb	r0, [r4, #29]
    d54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d54e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d54e:	6181      	str	r1, [r0, #24]
    d550:	6188      	str	r0, [r1, #24]
    d552:	4770      	bx	lr

0000d554 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d558:	460b      	mov	r3, r1
    d55a:	4604      	mov	r4, r0
    d55c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d560:	8905      	ldrh	r5, [r0, #8]
    d562:	8946      	ldrh	r6, [r0, #10]
    d564:	8880      	ldrh	r0, [r0, #4]
    d566:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d56a:	4439      	add	r1, r7
    d56c:	460f      	mov	r7, r1
    d56e:	4285      	cmp	r5, r0
    d570:	d102      	bne.n	d578 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d572:	2000      	movs	r0, #0
    d574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d578:	b10a      	cbz	r2, d57e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d57a:	1cc8      	adds	r0, r1, #3
    d57c:	6010      	str	r0, [r2, #0]
    d57e:	b123      	cbz	r3, d58a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d580:	7f22      	ldrb	r2, [r4, #28]
    d582:	1cf9      	adds	r1, r7, #3
    d584:	4618      	mov	r0, r3
    d586:	f7ff f80b 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d58a:	883f      	ldrh	r7, [r7, #0]
    d58c:	f104 0108 	add.w	r1, r4, #8
    d590:	4620      	mov	r0, r4
    d592:	f7ff fd76 	bl	d082 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d596:	42b5      	cmp	r5, r6
    d598:	d101      	bne.n	d59e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d59a:	8920      	ldrh	r0, [r4, #8]
    d59c:	8160      	strh	r0, [r4, #10]
    d59e:	4638      	mov	r0, r7
    d5a0:	e7e8      	b.n	d574 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5a2:	4401      	add	r1, r0
    d5a4:	1d89      	adds	r1, r1, #6
    d5a6:	4351      	muls	r1, r2
    d5a8:	b28a      	uxth	r2, r1
    d5aa:	2100      	movs	r1, #0
    d5ac:	2845      	cmp	r0, #69	; 0x45
    d5ae:	d201      	bcs.n	d5b4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d5b0:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d5b4:	3224      	adds	r2, #36	; 0x24
    d5b6:	1850      	adds	r0, r2, r1
    d5b8:	b280      	uxth	r0, r0
    d5ba:	4770      	bx	lr

0000d5bc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5c0:	4688      	mov	r8, r1
    d5c2:	88c1      	ldrh	r1, [r0, #6]
    d5c4:	4604      	mov	r4, r0
    d5c6:	8900      	ldrh	r0, [r0, #8]
    d5c8:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d5cc:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d5d0:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d5d4:	eb05 0906 	add.w	r9, r5, r6
    d5d8:	f7ff fd74 	bl	d0c4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d5dc:	2200      	movs	r2, #0
    d5de:	b998      	cbnz	r0, d608 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d5e0:	8820      	ldrh	r0, [r4, #0]
    d5e2:	2845      	cmp	r0, #69	; 0x45
    d5e4:	d200      	bcs.n	d5e8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d5e6:	2045      	movs	r0, #69	; 0x45
    d5e8:	42b7      	cmp	r7, r6
    d5ea:	d906      	bls.n	d5fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d5ec:	7f23      	ldrb	r3, [r4, #28]
    d5ee:	1bb9      	subs	r1, r7, r6
    d5f0:	1ac9      	subs	r1, r1, r3
    d5f2:	1f89      	subs	r1, r1, #6
    d5f4:	4281      	cmp	r1, r0
    d5f6:	da00      	bge.n	d5fa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d5f8:	4608      	mov	r0, r1
    d5fa:	89e1      	ldrh	r1, [r4, #14]
    d5fc:	b111      	cbz	r1, d604 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d5fe:	f8b9 3000 	ldrh.w	r3, [r9]
    d602:	1ac0      	subs	r0, r0, r3
    d604:	4540      	cmp	r0, r8
    d606:	da03      	bge.n	d610 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d608:	8262      	strh	r2, [r4, #18]
    d60a:	2000      	movs	r0, #0
    d60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d610:	7f20      	ldrb	r0, [r4, #28]
    d612:	4429      	add	r1, r5
    d614:	1d80      	adds	r0, r0, #6
    d616:	4430      	add	r0, r6
    d618:	4408      	add	r0, r1
    d61a:	f8a4 8012 	strh.w	r8, [r4, #18]
    d61e:	1ec0      	subs	r0, r0, #3
    d620:	e7f4      	b.n	d60c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d622 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d622:	2100      	movs	r1, #0
    d624:	81c1      	strh	r1, [r0, #14]
    d626:	8241      	strh	r1, [r0, #18]
    d628:	7581      	strb	r1, [r0, #22]
    d62a:	4770      	bx	lr

0000d62c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d62c:	b570      	push	{r4, r5, r6, lr}
    d62e:	2300      	movs	r3, #0
    d630:	2908      	cmp	r1, #8
    d632:	d204      	bcs.n	d63e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d634:	f240 11cb 	movw	r1, #459	; 0x1cb
    d638:	2015      	movs	r0, #21
    d63a:	f7f6 fba1 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d63e:	6802      	ldr	r2, [r0, #0]
    d640:	b90a      	cbnz	r2, d646 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d642:	e01e      	b.n	d682 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d644:	4610      	mov	r0, r2
    d646:	6802      	ldr	r2, [r0, #0]
    d648:	8893      	ldrh	r3, [r2, #4]
    d64a:	428b      	cmp	r3, r1
    d64c:	d002      	beq.n	d654 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d64e:	6813      	ldr	r3, [r2, #0]
    d650:	2b00      	cmp	r3, #0
    d652:	d1f7      	bne.n	d644 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d654:	8894      	ldrh	r4, [r2, #4]
    d656:	4613      	mov	r3, r2
    d658:	428c      	cmp	r4, r1
    d65a:	d101      	bne.n	d660 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d65c:	6811      	ldr	r1, [r2, #0]
    d65e:	e00d      	b.n	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d660:	f101 0508 	add.w	r5, r1, #8
    d664:	b2ae      	uxth	r6, r5
    d666:	2500      	movs	r5, #0
    d668:	42b4      	cmp	r4, r6
    d66a:	d309      	bcc.n	d680 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d66c:	1a64      	subs	r4, r4, r1
    d66e:	4411      	add	r1, r2
    d670:	600d      	str	r5, [r1, #0]
    d672:	808c      	strh	r4, [r1, #4]
    d674:	6802      	ldr	r2, [r0, #0]
    d676:	6812      	ldr	r2, [r2, #0]
    d678:	6002      	str	r2, [r0, #0]
    d67a:	600a      	str	r2, [r1, #0]
    d67c:	6001      	str	r1, [r0, #0]
    d67e:	e000      	b.n	d682 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d680:	2300      	movs	r3, #0
    d682:	4618      	mov	r0, r3
    d684:	bd70      	pop	{r4, r5, r6, pc}

0000d686 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d686:	b510      	push	{r4, lr}
    d688:	000c      	movs	r4, r1
    d68a:	d006      	beq.n	d69a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d68c:	2c08      	cmp	r4, #8
    d68e:	d209      	bcs.n	d6a4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d690:	f240 1195 	movw	r1, #405	; 0x195
    d694:	2015      	movs	r0, #21
    d696:	f7f6 fb73 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d69a:	b108      	cbz	r0, d6a0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d69c:	2100      	movs	r1, #0
    d69e:	6001      	str	r1, [r0, #0]
    d6a0:	2000      	movs	r0, #0
    d6a2:	bd10      	pop	{r4, pc}
    d6a4:	b118      	cbz	r0, d6ae <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d6a6:	b2a1      	uxth	r1, r4
    d6a8:	6800      	ldr	r0, [r0, #0]
    d6aa:	f000 f814 	bl	d6d6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d6ae:	1d20      	adds	r0, r4, #4
    d6b0:	bd10      	pop	{r4, pc}

0000d6b2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d6b2:	2100      	movs	r1, #0
    d6b4:	6802      	ldr	r2, [r0, #0]
    d6b6:	e003      	b.n	d6c0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d6b8:	8893      	ldrh	r3, [r2, #4]
    d6ba:	6812      	ldr	r2, [r2, #0]
    d6bc:	4419      	add	r1, r3
    d6be:	b289      	uxth	r1, r1
    d6c0:	2a00      	cmp	r2, #0
    d6c2:	d1f9      	bne.n	d6b8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d6c4:	f000 b807 	b.w	d6d6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d6c8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d6c8:	2300      	movs	r3, #0
    d6ca:	600b      	str	r3, [r1, #0]
    d6cc:	808a      	strh	r2, [r1, #4]
    d6ce:	6802      	ldr	r2, [r0, #0]
    d6d0:	600a      	str	r2, [r1, #0]
    d6d2:	6001      	str	r1, [r0, #0]
    d6d4:	4770      	bx	lr
    d6d6:	2300      	movs	r3, #0
    d6d8:	6043      	str	r3, [r0, #4]
    d6da:	1d02      	adds	r2, r0, #4
    d6dc:	8101      	strh	r1, [r0, #8]
    d6de:	6002      	str	r2, [r0, #0]
    d6e0:	4770      	bx	lr

0000d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d6e2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d6e6:	3aff      	subs	r2, #255	; 0xff
    d6e8:	d000      	beq.n	d6ec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d6ea:	b109      	cbz	r1, d6f0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d6ec:	2000      	movs	r0, #0
    d6ee:	4770      	bx	lr
    d6f0:	f7f6 be26 	b.w	4340 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d6f4:	b570      	push	{r4, r5, r6, lr}
    d6f6:	4605      	mov	r5, r0
    d6f8:	460c      	mov	r4, r1
    d6fa:	4608      	mov	r0, r1
    d6fc:	f000 f854 	bl	d7a8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d700:	b108      	cbz	r0, d706 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d702:	2010      	movs	r0, #16
    d704:	bd70      	pop	{r4, r5, r6, pc}
    d706:	b10d      	cbz	r5, d70c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    d708:	2007      	movs	r0, #7
    d70a:	bd70      	pop	{r4, r5, r6, pc}
    d70c:	7025      	strb	r5, [r4, #0]
    d70e:	2000      	movs	r0, #0
    d710:	8060      	strh	r0, [r4, #2]
    d712:	bd70      	pop	{r4, r5, r6, pc}
    d714:	b510      	push	{r4, lr}
    d716:	4604      	mov	r4, r0
    d718:	f7f6 fe5e 	bl	43d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    d71c:	42a0      	cmp	r0, r4
    d71e:	d901      	bls.n	d724 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    d720:	2001      	movs	r0, #1
    d722:	bd10      	pop	{r4, pc}
    d724:	2000      	movs	r0, #0
    d726:	bd10      	pop	{r4, pc}
    d728:	4770      	bx	lr

0000d72a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d72a:	b570      	push	{r4, r5, r6, lr}
    d72c:	460e      	mov	r6, r1
    d72e:	461d      	mov	r5, r3
    d730:	4611      	mov	r1, r2
    d732:	f000 f811 	bl	d758 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d736:	4604      	mov	r4, r0
    d738:	4629      	mov	r1, r5
    d73a:	4630      	mov	r0, r6
    d73c:	f000 f803 	bl	d746 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d740:	4420      	add	r0, r4
    d742:	1d00      	adds	r0, r0, #4
    d744:	bd70      	pop	{r4, r5, r6, pc}
    d746:	b510      	push	{r4, lr}
    d748:	460a      	mov	r2, r1
    d74a:	2101      	movs	r1, #1
    d74c:	f7ff ff29 	bl	d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d750:	1cc0      	adds	r0, r0, #3
    d752:	f020 0003 	bic.w	r0, r0, #3
    d756:	bd10      	pop	{r4, pc}
    d758:	b510      	push	{r4, lr}
    d75a:	460a      	mov	r2, r1
    d75c:	2101      	movs	r1, #1
    d75e:	f7ff ff20 	bl	d5a2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d762:	1cc0      	adds	r0, r0, #3
    d764:	f020 0003 	bic.w	r0, r0, #3
    d768:	bd10      	pop	{r4, pc}
    d76a:	2800      	cmp	r0, #0
    d76c:	db09      	blt.n	d782 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d76e:	f000 021f 	and.w	r2, r0, #31
    d772:	2101      	movs	r1, #1
    d774:	4091      	lsls	r1, r2
    d776:	0940      	lsrs	r0, r0, #5
    d778:	0080      	lsls	r0, r0, #2
    d77a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d77e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d782:	4770      	bx	lr
    d784:	5840      	ldr	r0, [r0, r1]
    d786:	2800      	cmp	r0, #0
    d788:	d000      	beq.n	d78c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d78a:	2001      	movs	r0, #1
    d78c:	4770      	bx	lr

0000d78e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d78e:	f7f6 bfe9 	b.w	4764 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d792 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d792:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d796:	2000      	movs	r0, #0
    d798:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d79c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d7a0:	2001      	movs	r0, #1
    d7a2:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d7a6:	4770      	bx	lr

0000d7a8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d7a8:	b108      	cbz	r0, d7ae <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d7aa:	2000      	movs	r0, #0
    d7ac:	4770      	bx	lr
    d7ae:	2001      	movs	r0, #1
    d7b0:	4770      	bx	lr

0000d7b2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d7b2:	f7f7 b929 	b.w	4a08 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d7b6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d7b6:	f7f7 b917 	b.w	49e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d7ba <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d7ba:	b510      	push	{r4, lr}
    d7bc:	2900      	cmp	r1, #0
    d7be:	4604      	mov	r4, r0
    d7c0:	f04f 0106 	mov.w	r1, #6
    d7c4:	d002      	beq.n	d7cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d7c6:	f7f6 fb69 	bl	3e9c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7ca:	e001      	b.n	d7d0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d7cc:	f7f6 fb82 	bl	3ed4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7d0:	7960      	ldrb	r0, [r4, #5]
    d7d2:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d7d6:	7160      	strb	r0, [r4, #5]
    d7d8:	bd10      	pop	{r4, pc}

0000d7da <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d7da:	4770      	bx	lr

0000d7dc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d7dc:	b530      	push	{r4, r5, lr}
    d7de:	460c      	mov	r4, r1
    d7e0:	4605      	mov	r5, r0
    d7e2:	b08d      	sub	sp, #52	; 0x34
    d7e4:	f04f 0103 	mov.w	r1, #3
    d7e8:	f104 0003 	add.w	r0, r4, #3
    d7ec:	b112      	cbz	r2, d7f4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d7ee:	f7f6 fb55 	bl	3e9c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7f2:	e001      	b.n	d7f8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d7f4:	f7f6 fb6e 	bl	3ed4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7f8:	7960      	ldrb	r0, [r4, #5]
    d7fa:	220d      	movs	r2, #13
    d7fc:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d800:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d804:	7160      	strb	r0, [r4, #5]
    d806:	2100      	movs	r1, #0
    d808:	a804      	add	r0, sp, #16
    d80a:	f7fe ff43 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d80e:	78e0      	ldrb	r0, [r4, #3]
    d810:	f88d 001f 	strb.w	r0, [sp, #31]
    d814:	7920      	ldrb	r0, [r4, #4]
    d816:	f88d 001e 	strb.w	r0, [sp, #30]
    d81a:	7960      	ldrb	r0, [r4, #5]
    d81c:	f88d 001d 	strb.w	r0, [sp, #29]
    d820:	2210      	movs	r2, #16
    d822:	4629      	mov	r1, r5
    d824:	4668      	mov	r0, sp
    d826:	f7fe febb 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d82a:	4668      	mov	r0, sp
    d82c:	f7ff ffaf 	bl	d78e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d830:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d834:	7020      	strb	r0, [r4, #0]
    d836:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d83a:	7060      	strb	r0, [r4, #1]
    d83c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d840:	70a0      	strb	r0, [r4, #2]
    d842:	b00d      	add	sp, #52	; 0x34
    d844:	bd30      	pop	{r4, r5, pc}

0000d846 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d846:	b530      	push	{r4, r5, lr}
    d848:	b08d      	sub	sp, #52	; 0x34
    d84a:	460c      	mov	r4, r1
    d84c:	4605      	mov	r5, r0
    d84e:	220d      	movs	r2, #13
    d850:	2100      	movs	r1, #0
    d852:	a804      	add	r0, sp, #16
    d854:	f7fe ff1e 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d858:	78e0      	ldrb	r0, [r4, #3]
    d85a:	f88d 001f 	strb.w	r0, [sp, #31]
    d85e:	7920      	ldrb	r0, [r4, #4]
    d860:	f88d 001e 	strb.w	r0, [sp, #30]
    d864:	7960      	ldrb	r0, [r4, #5]
    d866:	f88d 001d 	strb.w	r0, [sp, #29]
    d86a:	2210      	movs	r2, #16
    d86c:	4629      	mov	r1, r5
    d86e:	4668      	mov	r0, sp
    d870:	f7fe fe96 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d874:	4668      	mov	r0, sp
    d876:	f7ff ff8a 	bl	d78e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d87a:	7820      	ldrb	r0, [r4, #0]
    d87c:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d880:	4288      	cmp	r0, r1
    d882:	d10c      	bne.n	d89e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d884:	7860      	ldrb	r0, [r4, #1]
    d886:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d88a:	4288      	cmp	r0, r1
    d88c:	d107      	bne.n	d89e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d88e:	78a0      	ldrb	r0, [r4, #2]
    d890:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d894:	4288      	cmp	r0, r1
    d896:	d102      	bne.n	d89e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d898:	2001      	movs	r0, #1
    d89a:	b00d      	add	sp, #52	; 0x34
    d89c:	bd30      	pop	{r4, r5, pc}
    d89e:	2000      	movs	r0, #0
    d8a0:	e7fb      	b.n	d89a <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d8a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d8a2:	f7f7 bc75 	b.w	5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    d8a6:	b510      	push	{r4, lr}
    d8a8:	2801      	cmp	r0, #1
    d8aa:	d008      	beq.n	d8be <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d8ac:	2802      	cmp	r0, #2
    d8ae:	d004      	beq.n	d8ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d8b0:	f240 31ad 	movw	r1, #941	; 0x3ad
    d8b4:	2006      	movs	r0, #6
    d8b6:	f7f6 fa63 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8ba:	2001      	movs	r0, #1
    d8bc:	bd10      	pop	{r4, pc}
    d8be:	2000      	movs	r0, #0
    d8c0:	bd10      	pop	{r4, pc}
    d8c2:	2900      	cmp	r1, #0
    d8c4:	d004      	beq.n	d8d0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d8c6:	2801      	cmp	r0, #1
    d8c8:	d003      	beq.n	d8d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d8ca:	2901      	cmp	r1, #1
    d8cc:	d001      	beq.n	d8d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d8ce:	2002      	movs	r0, #2
    d8d0:	4770      	bx	lr
    d8d2:	2001      	movs	r0, #1
    d8d4:	4770      	bx	lr
    d8d6:	f7ff bdb1 	b.w	d43c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d8da <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d8da:	2101      	movs	r1, #1
    d8dc:	f7f8 b86c 	b.w	59b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d8e0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d8e0:	b510      	push	{r4, lr}
    d8e2:	f002 f806 	bl	f8f2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d8e6:	b118      	cbz	r0, d8f0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8ec:	f7fd bbfe 	b.w	b0ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d8f0:	20ff      	movs	r0, #255	; 0xff
    d8f2:	bd10      	pop	{r4, pc}

0000d8f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d8f4:	b510      	push	{r4, lr}
    d8f6:	f7f8 f8a7 	bl	5a48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d8fa:	2810      	cmp	r0, #16
    d8fc:	d003      	beq.n	d906 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d8fe:	f7f8 f873 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d902:	2810      	cmp	r0, #16
    d904:	d100      	bne.n	d908 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d906:	2008      	movs	r0, #8
    d908:	bd10      	pop	{r4, pc}

0000d90a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d90a:	b510      	push	{r4, lr}
    d90c:	f7f8 f89c 	bl	5a48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d910:	2810      	cmp	r0, #16
    d912:	d007      	beq.n	d924 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d914:	f7f8 f868 	bl	59e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d918:	2810      	cmp	r0, #16
    d91a:	d003      	beq.n	d924 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d91c:	f7f8 f8dc 	bl	5ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d920:	2001      	movs	r0, #1
    d922:	bd10      	pop	{r4, pc}
    d924:	2000      	movs	r0, #0
    d926:	bd10      	pop	{r4, pc}

0000d928 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d928:	b510      	push	{r4, lr}
    d92a:	f7f8 f88d 	bl	5a48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d92e:	2810      	cmp	r0, #16
    d930:	d003      	beq.n	d93a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d932:	f7f8 f919 	bl	5b68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d936:	2001      	movs	r0, #1
    d938:	bd10      	pop	{r4, pc}
    d93a:	2000      	movs	r0, #0
    d93c:	bd10      	pop	{r4, pc}

0000d93e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d93e:	b570      	push	{r4, r5, r6, lr}
    d940:	460e      	mov	r6, r1
    d942:	b08c      	sub	sp, #48	; 0x30
    d944:	4614      	mov	r4, r2
    d946:	4601      	mov	r1, r0
    d948:	461d      	mov	r5, r3
    d94a:	2210      	movs	r2, #16
    d94c:	4668      	mov	r0, sp
    d94e:	f000 f9b8 	bl	dcc2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d952:	2210      	movs	r2, #16
    d954:	4631      	mov	r1, r6
    d956:	a804      	add	r0, sp, #16
    d958:	f000 f9b3 	bl	dcc2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d95c:	4668      	mov	r0, sp
    d95e:	f7ff ff16 	bl	d78e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d962:	a908      	add	r1, sp, #32
    d964:	f04f 0210 	mov.w	r2, #16
    d968:	4628      	mov	r0, r5
    d96a:	b11c      	cbz	r4, d974 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d96c:	f000 f9a9 	bl	dcc2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d970:	b00c      	add	sp, #48	; 0x30
    d972:	bd70      	pop	{r4, r5, r6, pc}
    d974:	f7fe fe14 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d978:	e7fa      	b.n	d970 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    d97a:	0781      	lsls	r1, r0, #30
    d97c:	d501      	bpl.n	d982 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    d97e:	2002      	movs	r0, #2
    d980:	4770      	bx	lr
    d982:	07c0      	lsls	r0, r0, #31
    d984:	d0fc      	beq.n	d980 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    d986:	2001      	movs	r0, #1
    d988:	4770      	bx	lr

0000d98a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    d98a:	b530      	push	{r4, r5, lr}
    d98c:	4605      	mov	r5, r0
    d98e:	7900      	ldrb	r0, [r0, #4]
    d990:	0940      	lsrs	r0, r0, #5
    d992:	d10e      	bne.n	d9b2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    d994:	2400      	movs	r4, #0
    d996:	4623      	mov	r3, r4
    d998:	5ce8      	ldrb	r0, [r5, r3]
    d99a:	f000 f855 	bl	da48 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>
    d99e:	1c5b      	adds	r3, r3, #1
    d9a0:	4420      	add	r0, r4
    d9a2:	b2db      	uxtb	r3, r3
    d9a4:	b2c4      	uxtb	r4, r0
    d9a6:	2b05      	cmp	r3, #5
    d9a8:	d3f6      	bcc.n	d998 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    d9aa:	2c01      	cmp	r4, #1
    d9ac:	d901      	bls.n	d9b2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    d9ae:	2001      	movs	r0, #1
    d9b0:	bd30      	pop	{r4, r5, pc}
    d9b2:	2000      	movs	r0, #0
    d9b4:	bd30      	pop	{r4, r5, pc}

0000d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d9b6:	b510      	push	{r4, lr}
    d9b8:	460c      	mov	r4, r1
    d9ba:	2100      	movs	r1, #0
    d9bc:	f7ff fe91 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d9c0:	6060      	str	r0, [r4, #4]
    d9c2:	b110      	cbz	r0, d9ca <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    d9c4:	2000      	movs	r0, #0
    d9c6:	7020      	strb	r0, [r4, #0]
    d9c8:	bd10      	pop	{r4, pc}
    d9ca:	2002      	movs	r0, #2
    d9cc:	bd10      	pop	{r4, pc}

0000d9ce <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d9ce:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d9d2:	4348      	muls	r0, r1
    d9d4:	4770      	bx	lr

0000d9d6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d9d6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d9da:	fbb0 f0f1 	udiv	r0, r0, r1
    d9de:	b280      	uxth	r0, r0
    d9e0:	4770      	bx	lr

0000d9e2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d9e2:	b570      	push	{r4, r5, r6, lr}
    d9e4:	4604      	mov	r4, r0
    d9e6:	4290      	cmp	r0, r2
    d9e8:	d20b      	bcs.n	da02 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d9ea:	1b10      	subs	r0, r2, r4
    d9ec:	2865      	cmp	r0, #101	; 0x65
    d9ee:	d200      	bcs.n	d9f2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d9f0:	2065      	movs	r0, #101	; 0x65
    d9f2:	1825      	adds	r5, r4, r0
    d9f4:	428d      	cmp	r5, r1
    d9f6:	d803      	bhi.n	da00 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d9f8:	2104      	movs	r1, #4
    d9fa:	f7f3 fc9d 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d9fe:	b108      	cbz	r0, da04 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    da00:	4620      	mov	r0, r4
    da02:	bd70      	pop	{r4, r5, r6, pc}
    da04:	4628      	mov	r0, r5
    da06:	bd70      	pop	{r4, r5, r6, pc}

0000da08 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>:
    da08:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    da0c:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    da10:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    da14:	4408      	add	r0, r1
    da16:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    da1a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    da1e:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    da22:	4408      	add	r0, r1
    da24:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    da28:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    da2c:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    da30:	4408      	add	r0, r1
    da32:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    da36:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    da3a:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    da3e:	4408      	add	r0, r1
    da40:	b281      	uxth	r1, r0
    da42:	eb01 4010 	add.w	r0, r1, r0, lsr #16
    da46:	4770      	bx	lr

0000da48 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>:
    da48:	f000 0155 	and.w	r1, r0, #85	; 0x55
    da4c:	2255      	movs	r2, #85	; 0x55
    da4e:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    da52:	4408      	add	r0, r1
    da54:	f000 0133 	and.w	r1, r0, #51	; 0x33
    da58:	2233      	movs	r2, #51	; 0x33
    da5a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    da5e:	4408      	add	r0, r1
    da60:	f000 010f 	and.w	r1, r0, #15
    da64:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    da68:	4770      	bx	lr

0000da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    da6a:	b510      	push	{r4, lr}
    da6c:	f1a2 030f 	sub.w	r3, r2, #15
    da70:	290c      	cmp	r1, #12
    da72:	d24f      	bcs.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da74:	e8df f001 	tbb	[pc, r1]
    da78:	120d0806 	.word	0x120d0806
    da7c:	2f271815 	.word	0x2f271815
    da80:	3d354c32 	.word	0x3d354c32
    da84:	b3a2      	cbz	r2, daf0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    da86:	e045      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da88:	2a07      	cmp	r2, #7
    da8a:	d045      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da8c:	2a08      	cmp	r2, #8
    da8e:	d043      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da90:	e040      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da92:	2a0c      	cmp	r2, #12
    da94:	d040      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da96:	2a0b      	cmp	r2, #11
    da98:	d03e      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da9a:	e03b      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da9c:	2a0d      	cmp	r2, #13
    da9e:	d03b      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daa0:	e038      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    daa2:	2b0c      	cmp	r3, #12
    daa4:	d938      	bls.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daa6:	e035      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    daa8:	2a12      	cmp	r2, #18
    daaa:	d035      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daac:	2a11      	cmp	r2, #17
    daae:	d033      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dab0:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    dab4:	b120      	cbz	r0, dac0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    dab6:	2a12      	cmp	r2, #18
    dab8:	d32c      	bcc.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    daba:	2a1a      	cmp	r2, #26
    dabc:	d92c      	bls.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dabe:	e029      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dac0:	2a16      	cmp	r2, #22
    dac2:	d2fa      	bcs.n	daba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    dac4:	e026      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dac6:	2b03      	cmp	r3, #3
    dac8:	d926      	bls.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daca:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    dace:	b308      	cbz	r0, db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dad0:	2a1b      	cmp	r2, #27
    dad2:	d921      	bls.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dad4:	e01e      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dad6:	2a04      	cmp	r2, #4
    dad8:	d01e      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dada:	e01b      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dadc:	2a01      	cmp	r2, #1
    dade:	d01b      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dae0:	e018      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dae2:	2a1c      	cmp	r2, #28
    dae4:	d018      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dae6:	2a1d      	cmp	r2, #29
    dae8:	d016      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daea:	2a1e      	cmp	r2, #30
    daec:	d014      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daee:	e011      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    daf0:	e012      	b.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daf2:	2a1f      	cmp	r2, #31
    daf4:	d010      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    daf6:	2a20      	cmp	r2, #32
    daf8:	d00e      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dafa:	2a21      	cmp	r2, #33	; 0x21
    dafc:	d00c      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dafe:	2a22      	cmp	r2, #34	; 0x22
    db00:	d00a      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    db02:	2a23      	cmp	r2, #35	; 0x23
    db04:	d008      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    db06:	2a24      	cmp	r2, #36	; 0x24
    db08:	d006      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    db0a:	2a26      	cmp	r2, #38	; 0x26
    db0c:	d004      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    db0e:	e001      	b.n	db14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    db10:	2a05      	cmp	r2, #5
    db12:	d001      	beq.n	db18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    db14:	2000      	movs	r0, #0
    db16:	bd10      	pop	{r4, pc}
    db18:	2001      	movs	r0, #1
    db1a:	bd10      	pop	{r4, pc}

0000db1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    db1c:	280c      	cmp	r0, #12
    db1e:	d013      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db20:	280b      	cmp	r0, #11
    db22:	d011      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db24:	280d      	cmp	r0, #13
    db26:	d00f      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db28:	281f      	cmp	r0, #31
    db2a:	d00d      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db2c:	2820      	cmp	r0, #32
    db2e:	d00b      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db30:	2821      	cmp	r0, #33	; 0x21
    db32:	d009      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db34:	2822      	cmp	r0, #34	; 0x22
    db36:	d007      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db38:	2823      	cmp	r0, #35	; 0x23
    db3a:	d005      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db3c:	2824      	cmp	r0, #36	; 0x24
    db3e:	d003      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db40:	2826      	cmp	r0, #38	; 0x26
    db42:	d001      	beq.n	db48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    db44:	2000      	movs	r0, #0
    db46:	4770      	bx	lr
    db48:	2001      	movs	r0, #1
    db4a:	4770      	bx	lr

0000db4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    db4c:	f011 0f0c 	tst.w	r1, #12
    db50:	d016      	beq.n	db80 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    db52:	074a      	lsls	r2, r1, #29
    db54:	f44f 7116 	mov.w	r1, #600	; 0x258
    db58:	2a00      	cmp	r2, #0
    db5a:	da02      	bge.n	db62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    db5c:	f04f 0210 	mov.w	r2, #16
    db60:	e001      	b.n	db66 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    db62:	f04f 0240 	mov.w	r2, #64	; 0x40
    db66:	da01      	bge.n	db6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    db68:	f04f 0196 	mov.w	r1, #150	; 0x96
    db6c:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    db70:	eba0 0301 	sub.w	r3, r0, r1
    db74:	4288      	cmp	r0, r1
    db76:	d910      	bls.n	db9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db78:	fb93 f0f2 	sdiv	r0, r3, r2
    db7c:	b280      	uxth	r0, r0
    db7e:	4770      	bx	lr
    db80:	2902      	cmp	r1, #2
    db82:	d002      	beq.n	db8a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    db84:	2870      	cmp	r0, #112	; 0x70
    db86:	d80a      	bhi.n	db9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    db88:	e007      	b.n	db9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db8a:	283c      	cmp	r0, #60	; 0x3c
    db8c:	d905      	bls.n	db9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    db8e:	383c      	subs	r0, #60	; 0x3c
    db90:	17c1      	asrs	r1, r0, #31
    db92:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    db96:	1080      	asrs	r0, r0, #2
    db98:	e7f0      	b.n	db7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    db9a:	2000      	movs	r0, #0
    db9c:	e7ee      	b.n	db7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    db9e:	3870      	subs	r0, #112	; 0x70
    dba0:	17c1      	asrs	r1, r0, #31
    dba2:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dba6:	10c0      	asrs	r0, r0, #3
    dba8:	e7e8      	b.n	db7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000dbaa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dbaa:	6809      	ldr	r1, [r1, #0]
    dbac:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dbb0:	4770      	bx	lr

0000dbb2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    dbb2:	2801      	cmp	r0, #1
    dbb4:	d002      	beq.n	dbbc <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dbb6:	2802      	cmp	r0, #2
    dbb8:	d000      	beq.n	dbbc <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dbba:	2000      	movs	r0, #0
    dbbc:	4770      	bx	lr

0000dbbe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dbbe:	b510      	push	{r4, lr}
    dbc0:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dbc4:	2901      	cmp	r1, #1
    dbc6:	d006      	beq.n	dbd6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    dbc8:	2902      	cmp	r1, #2
    dbca:	d005      	beq.n	dbd8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    dbcc:	f240 31b1 	movw	r1, #945	; 0x3b1
    dbd0:	2029      	movs	r0, #41	; 0x29
    dbd2:	f7f6 f8d5 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbd6:	b108      	cbz	r0, dbdc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dbd8:	4610      	mov	r0, r2
    dbda:	bd10      	pop	{r4, pc}
    dbdc:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dbe0:	bd10      	pop	{r4, pc}

0000dbe2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dbe2:	b530      	push	{r4, r5, lr}
    dbe4:	242a      	movs	r4, #42	; 0x2a
    dbe6:	2523      	movs	r5, #35	; 0x23
    dbe8:	2a16      	cmp	r2, #22
    dbea:	d105      	bne.n	dbf8 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    dbec:	280c      	cmp	r0, #12
    dbee:	d007      	beq.n	dc00 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbf0:	280d      	cmp	r0, #13
    dbf2:	d005      	beq.n	dc00 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dbf4:	281f      	cmp	r0, #31
    dbf6:	d005      	beq.n	dc04 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    dbf8:	b171      	cbz	r1, dc18 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    dbfa:	2a16      	cmp	r2, #22
    dbfc:	d10c      	bne.n	dc18 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    dbfe:	e004      	b.n	dc0a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    dc00:	701c      	strb	r4, [r3, #0]
    dc02:	e000      	b.n	dc06 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    dc04:	701d      	strb	r5, [r3, #0]
    dc06:	2001      	movs	r0, #1
    dc08:	bd30      	pop	{r4, r5, pc}
    dc0a:	7808      	ldrb	r0, [r1, #0]
    dc0c:	2801      	cmp	r0, #1
    dc0e:	d0f7      	beq.n	dc00 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dc10:	2800      	cmp	r0, #0
    dc12:	d0f5      	beq.n	dc00 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dc14:	2816      	cmp	r0, #22
    dc16:	d0f5      	beq.n	dc04 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    dc18:	2000      	movs	r0, #0
    dc1a:	bd30      	pop	{r4, r5, pc}

0000dc1c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc1e:	b2cf      	uxtb	r7, r1
    dc20:	4606      	mov	r6, r0
    dc22:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dc26:	4621      	mov	r1, r4
    dc28:	4638      	mov	r0, r7
    dc2a:	f000 f8ca 	bl	ddc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    dc2e:	b2f5      	uxtb	r5, r6
    dc30:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dc34:	b920      	cbnz	r0, dc40 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dc36:	4631      	mov	r1, r6
    dc38:	4628      	mov	r0, r5
    dc3a:	f000 f8c2 	bl	ddc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    dc3e:	b140      	cbz	r0, dc52 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dc40:	4027      	ands	r7, r4
    dc42:	4035      	ands	r5, r6
    dc44:	403d      	ands	r5, r7
    dc46:	4644      	mov	r4, r8
    dc48:	f365 0407 	bfi	r4, r5, #0, #8
    dc4c:	f365 240f 	bfi	r4, r5, #8, #8
    dc50:	e006      	b.n	dc60 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dc52:	4025      	ands	r5, r4
    dc54:	4644      	mov	r4, r8
    dc56:	f365 0407 	bfi	r4, r5, #0, #8
    dc5a:	403e      	ands	r6, r7
    dc5c:	f366 240f 	bfi	r4, r6, #8, #8
    dc60:	b2e0      	uxtb	r0, r4
    dc62:	f7ff fe8a 	bl	d97a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dc66:	f88d 0000 	strb.w	r0, [sp]
    dc6a:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dc6e:	f7ff fe84 	bl	d97a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dc72:	f88d 0001 	strb.w	r0, [sp, #1]
    dc76:	f8bd 0000 	ldrh.w	r0, [sp]
    dc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dc7c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc80:	460c      	mov	r4, r1
    dc82:	4605      	mov	r5, r0
    dc84:	68c6      	ldr	r6, [r0, #12]
    dc86:	f7f3 ffb1 	bl	1bec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dc8a:	b198      	cbz	r0, dcb4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    dc8c:	b1bc      	cbz	r4, dcbe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dc8e:	4630      	mov	r0, r6
    dc90:	68e9      	ldr	r1, [r5, #12]
    dc92:	f7f3 fc9f 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dc96:	2800      	cmp	r0, #0
    dc98:	dd11      	ble.n	dcbe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dc9a:	4420      	add	r0, r4
    dc9c:	1e40      	subs	r0, r0, #1
    dc9e:	fbb0 f7f4 	udiv	r7, r0, r4
    dca2:	fb07 f104 	mul.w	r1, r7, r4
    dca6:	4630      	mov	r0, r6
    dca8:	f7f3 fc62 	bl	1570 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dcac:	60e8      	str	r0, [r5, #12]
    dcae:	4638      	mov	r0, r7
    dcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcb4:	f240 2136 	movw	r1, #566	; 0x236
    dcb8:	2029      	movs	r0, #41	; 0x29
    dcba:	f7f6 f861 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcbe:	2000      	movs	r0, #0
    dcc0:	e7f6      	b.n	dcb0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000dcc2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dcc2:	b530      	push	{r4, r5, lr}
    dcc4:	4613      	mov	r3, r2
    dcc6:	e006      	b.n	dcd6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dcc8:	18cc      	adds	r4, r1, r3
    dcca:	1ad5      	subs	r5, r2, r3
    dccc:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dcd0:	1e5b      	subs	r3, r3, #1
    dcd2:	5544      	strb	r4, [r0, r5]
    dcd4:	b2db      	uxtb	r3, r3
    dcd6:	2b00      	cmp	r3, #0
    dcd8:	d1f6      	bne.n	dcc8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dcda:	bd30      	pop	{r4, r5, pc}

0000dcdc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dcdc:	b538      	push	{r3, r4, r5, lr}
    dcde:	4605      	mov	r5, r0
    dce0:	460c      	mov	r4, r1
    dce2:	4668      	mov	r0, sp
    dce4:	f7fd ff12 	bl	bb0c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dce8:	b310      	cbz	r0, dd30 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    dcea:	f99d 0000 	ldrsb.w	r0, [sp]
    dcee:	7260      	strb	r0, [r4, #9]
    dcf0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    dcf4:	72a1      	strb	r1, [r4, #10]
    dcf6:	f994 100b 	ldrsb.w	r1, [r4, #11]
    dcfa:	2200      	movs	r2, #0
    dcfc:	1a41      	subs	r1, r0, r1
    dcfe:	d500      	bpl.n	dd02 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    dd00:	4249      	negs	r1, r1
    dd02:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    dd06:	428b      	cmp	r3, r1
    dd08:	dc10      	bgt.n	dd2c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dd0a:	2bff      	cmp	r3, #255	; 0xff
    dd0c:	d00e      	beq.n	dd2c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dd0e:	7b21      	ldrb	r1, [r4, #12]
    dd10:	1c49      	adds	r1, r1, #1
    dd12:	b2c9      	uxtb	r1, r1
    dd14:	7321      	strb	r1, [r4, #12]
    dd16:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    dd1a:	4299      	cmp	r1, r3
    dd1c:	d802      	bhi.n	dd24 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    dd1e:	7ae1      	ldrb	r1, [r4, #11]
    dd20:	297f      	cmp	r1, #127	; 0x7f
    dd22:	d103      	bne.n	dd2c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dd24:	72e0      	strb	r0, [r4, #11]
    dd26:	2000      	movs	r0, #0
    dd28:	7320      	strb	r0, [r4, #12]
    dd2a:	2201      	movs	r2, #1
    dd2c:	4610      	mov	r0, r2
    dd2e:	bd38      	pop	{r3, r4, r5, pc}
    dd30:	207f      	movs	r0, #127	; 0x7f
    dd32:	7260      	strb	r0, [r4, #9]
    dd34:	2000      	movs	r0, #0
    dd36:	bd38      	pop	{r3, r4, r5, pc}

0000dd38 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dd38:	2300      	movs	r3, #0
    dd3a:	6283      	str	r3, [r0, #40]	; 0x28
    dd3c:	8602      	strh	r2, [r0, #48]	; 0x30
    dd3e:	f240 2371 	movw	r3, #625	; 0x271
    dd42:	435a      	muls	r2, r3
    dd44:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dd48:	1e52      	subs	r2, r2, #1
    dd4a:	fbb2 f1f1 	udiv	r1, r2, r1
    dd4e:	62c1      	str	r1, [r0, #44]	; 0x2c
    dd50:	4770      	bx	lr

0000dd52 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dd52:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd56:	4348      	muls	r0, r1
    dd58:	4770      	bx	lr

0000dd5a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    dd5a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd5e:	fbb0 f0f1 	udiv	r0, r0, r1
    dd62:	b280      	uxth	r0, r0
    dd64:	4770      	bx	lr

0000dd66 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dd66:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd6a:	fb10 f001 	smulbb	r0, r0, r1
    dd6e:	4770      	bx	lr

0000dd70 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    dd70:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dd74:	fbb0 f0f1 	udiv	r0, r0, r1
    dd78:	b2c0      	uxtb	r0, r0
    dd7a:	4770      	bx	lr

0000dd7c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dd7c:	b510      	push	{r4, lr}
    dd7e:	2300      	movs	r3, #0
    dd80:	461a      	mov	r2, r3
    dd82:	e003      	b.n	dd8c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dd84:	5c84      	ldrb	r4, [r0, r2]
    dd86:	4323      	orrs	r3, r4
    dd88:	1c52      	adds	r2, r2, #1
    dd8a:	b2d2      	uxtb	r2, r2
    dd8c:	428a      	cmp	r2, r1
    dd8e:	d3f9      	bcc.n	dd84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dd90:	b10b      	cbz	r3, dd96 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dd92:	2000      	movs	r0, #0
    dd94:	bd10      	pop	{r4, pc}
    dd96:	2001      	movs	r0, #1
    dd98:	bd10      	pop	{r4, pc}
    dd9a:	b510      	push	{r4, lr}
    dd9c:	4604      	mov	r4, r0
    dd9e:	f7fd f921 	bl	afe4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    dda2:	f644 112b 	movw	r1, #18731	; 0x492b
    dda6:	4008      	ands	r0, r1
    dda8:	2101      	movs	r1, #1
    ddaa:	7561      	strb	r1, [r4, #21]
    ddac:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    ddb0:	0a00      	lsrs	r0, r0, #8
    ddb2:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    ddb6:	20fe      	movs	r0, #254	; 0xfe
    ddb8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    ddbc:	207f      	movs	r0, #127	; 0x7f
    ddbe:	7260      	strb	r0, [r4, #9]
    ddc0:	bd10      	pop	{r4, pc}
    ddc2:	2801      	cmp	r0, #1
    ddc4:	d002      	beq.n	ddcc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    ddc6:	2802      	cmp	r0, #2
    ddc8:	d003      	beq.n	ddd2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    ddca:	e004      	b.n	ddd6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ddcc:	2901      	cmp	r1, #1
    ddce:	d004      	beq.n	ddda <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ddd0:	e001      	b.n	ddd6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ddd2:	2902      	cmp	r1, #2
    ddd4:	d001      	beq.n	ddda <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ddd6:	2000      	movs	r0, #0
    ddd8:	4770      	bx	lr
    ddda:	2001      	movs	r0, #1
    dddc:	4770      	bx	lr

0000ddde <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ddde:	b510      	push	{r4, lr}
    dde0:	4604      	mov	r4, r0
    dde2:	f890 0020 	ldrb.w	r0, [r0, #32]
    dde6:	b108      	cbz	r0, ddec <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dde8:	2825      	cmp	r0, #37	; 0x25
    ddea:	d901      	bls.n	ddf0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ddec:	2012      	movs	r0, #18
    ddee:	bd10      	pop	{r4, pc}
    ddf0:	b12a      	cbz	r2, ddfe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ddf2:	7d60      	ldrb	r0, [r4, #21]
    ddf4:	b128      	cbz	r0, de02 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ddf6:	2801      	cmp	r0, #1
    ddf8:	d009      	beq.n	de0e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ddfa:	201f      	movs	r0, #31
    ddfc:	bd10      	pop	{r4, pc}
    ddfe:	2000      	movs	r0, #0
    de00:	bd10      	pop	{r4, pc}
    de02:	4620      	mov	r0, r4
    de04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de08:	4611      	mov	r1, r2
    de0a:	f7f7 bfa3 	b.w	5d54 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    de0e:	88a2      	ldrh	r2, [r4, #4]
    de10:	6909      	ldr	r1, [r1, #16]
    de12:	f104 0015 	add.w	r0, r4, #21
    de16:	f7f7 ff49 	bl	5cac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    de1a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    de1e:	e7ee      	b.n	ddfe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000de20 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    de20:	b530      	push	{r4, r5, lr}
    de22:	1c42      	adds	r2, r0, #1
    de24:	428a      	cmp	r2, r1
    de26:	d004      	beq.n	de32 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    de28:	680a      	ldr	r2, [r1, #0]
    de2a:	f8c0 2001 	str.w	r2, [r0, #1]
    de2e:	7909      	ldrb	r1, [r1, #4]
    de30:	7141      	strb	r1, [r0, #5]
    de32:	7941      	ldrb	r1, [r0, #5]
    de34:	f001 011f 	and.w	r1, r1, #31
    de38:	7141      	strb	r1, [r0, #5]
    de3a:	2100      	movs	r1, #0
    de3c:	72c1      	strb	r1, [r0, #11]
    de3e:	1843      	adds	r3, r0, r1
    de40:	1c49      	adds	r1, r1, #1
    de42:	785c      	ldrb	r4, [r3, #1]
    de44:	b2c9      	uxtb	r1, r1
    de46:	f004 0201 	and.w	r2, r4, #1
    de4a:	0864      	lsrs	r4, r4, #1
    de4c:	f004 0501 	and.w	r5, r4, #1
    de50:	4415      	add	r5, r2
    de52:	0862      	lsrs	r2, r4, #1
    de54:	f002 0401 	and.w	r4, r2, #1
    de58:	442c      	add	r4, r5
    de5a:	0852      	lsrs	r2, r2, #1
    de5c:	f002 0501 	and.w	r5, r2, #1
    de60:	442c      	add	r4, r5
    de62:	0852      	lsrs	r2, r2, #1
    de64:	f002 0501 	and.w	r5, r2, #1
    de68:	442c      	add	r4, r5
    de6a:	0852      	lsrs	r2, r2, #1
    de6c:	f002 0501 	and.w	r5, r2, #1
    de70:	442c      	add	r4, r5
    de72:	0852      	lsrs	r2, r2, #1
    de74:	f002 0501 	and.w	r5, r2, #1
    de78:	442c      	add	r4, r5
    de7a:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    de7e:	719a      	strb	r2, [r3, #6]
    de80:	7ac3      	ldrb	r3, [r0, #11]
    de82:	2905      	cmp	r1, #5
    de84:	441a      	add	r2, r3
    de86:	72c2      	strb	r2, [r0, #11]
    de88:	d3d9      	bcc.n	de3e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    de8a:	bd30      	pop	{r4, r5, pc}

0000de8c <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    de8c:	68c0      	ldr	r0, [r0, #12]
    de8e:	6008      	str	r0, [r1, #0]
    de90:	4770      	bx	lr

0000de92 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    de92:	6842      	ldr	r2, [r0, #4]
    de94:	600a      	str	r2, [r1, #0]
    de96:	6880      	ldr	r0, [r0, #8]
    de98:	6048      	str	r0, [r1, #4]
    de9a:	4770      	bx	lr

0000de9c <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    de9c:	6842      	ldr	r2, [r0, #4]
    de9e:	600a      	str	r2, [r1, #0]
    dea0:	6880      	ldr	r0, [r0, #8]
    dea2:	6048      	str	r0, [r1, #4]
    dea4:	4770      	bx	lr

0000dea6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    dea6:	7800      	ldrb	r0, [r0, #0]
    dea8:	f000 0003 	and.w	r0, r0, #3
    deac:	4770      	bx	lr

0000deae <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    deae:	8880      	ldrh	r0, [r0, #4]
    deb0:	4770      	bx	lr

0000deb2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    deb2:	88c0      	ldrh	r0, [r0, #6]
    deb4:	4770      	bx	lr

0000deb6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    deb6:	8900      	ldrh	r0, [r0, #8]
    deb8:	4770      	bx	lr

0000deba <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    deba:	8940      	ldrh	r0, [r0, #10]
    debc:	4770      	bx	lr

0000debe <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    debe:	7900      	ldrb	r0, [r0, #4]
    dec0:	4770      	bx	lr

0000dec2 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    dec2:	7900      	ldrb	r0, [r0, #4]
    dec4:	4770      	bx	lr

0000dec6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    dec6:	8901      	ldrh	r1, [r0, #8]
    dec8:	291b      	cmp	r1, #27
    deca:	d30c      	bcc.n	dee6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    decc:	8941      	ldrh	r1, [r0, #10]
    dece:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ded2:	4291      	cmp	r1, r2
    ded4:	d307      	bcc.n	dee6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ded6:	8881      	ldrh	r1, [r0, #4]
    ded8:	291b      	cmp	r1, #27
    deda:	d304      	bcc.n	dee6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dedc:	88c0      	ldrh	r0, [r0, #6]
    dede:	4290      	cmp	r0, r2
    dee0:	d301      	bcc.n	dee6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    dee2:	2001      	movs	r0, #1
    dee4:	4770      	bx	lr
    dee6:	2000      	movs	r0, #0
    dee8:	4770      	bx	lr

0000deea <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    deea:	b510      	push	{r4, lr}
    deec:	29fb      	cmp	r1, #251	; 0xfb
    deee:	d904      	bls.n	defa <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    def0:	f44f 61af 	mov.w	r1, #1400	; 0x578
    def4:	202a      	movs	r0, #42	; 0x2a
    def6:	f7f5 ff43 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    defa:	7041      	strb	r1, [r0, #1]
    defc:	bd10      	pop	{r4, pc}

0000defe <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    defe:	7901      	ldrb	r1, [r0, #4]
    df00:	0749      	lsls	r1, r1, #29
    df02:	d004      	beq.n	df0e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    df04:	7940      	ldrb	r0, [r0, #5]
    df06:	0740      	lsls	r0, r0, #29
    df08:	d001      	beq.n	df0e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    df0a:	2001      	movs	r0, #1
    df0c:	4770      	bx	lr
    df0e:	2000      	movs	r0, #0
    df10:	4770      	bx	lr

0000df12 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    df12:	7901      	ldrb	r1, [r0, #4]
    df14:	0749      	lsls	r1, r1, #29
    df16:	d004      	beq.n	df22 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    df18:	7940      	ldrb	r0, [r0, #5]
    df1a:	0740      	lsls	r0, r0, #29
    df1c:	d001      	beq.n	df22 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    df1e:	2001      	movs	r0, #1
    df20:	4770      	bx	lr
    df22:	2000      	movs	r0, #0
    df24:	4770      	bx	lr

0000df26 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    df26:	7900      	ldrb	r0, [r0, #4]
    df28:	4770      	bx	lr

0000df2a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    df2a:	7940      	ldrb	r0, [r0, #5]
    df2c:	4770      	bx	lr

0000df2e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    df2e:	7101      	strb	r1, [r0, #4]
    df30:	4770      	bx	lr

0000df32 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    df32:	7141      	strb	r1, [r0, #5]
    df34:	4770      	bx	lr

0000df36 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    df36:	680a      	ldr	r2, [r1, #0]
    df38:	6042      	str	r2, [r0, #4]
    df3a:	7909      	ldrb	r1, [r1, #4]
    df3c:	7201      	strb	r1, [r0, #8]
    df3e:	4770      	bx	lr

0000df40 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    df40:	72c1      	strb	r1, [r0, #11]
    df42:	0a09      	lsrs	r1, r1, #8
    df44:	7301      	strb	r1, [r0, #12]
    df46:	4770      	bx	lr

0000df48 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    df48:	8809      	ldrh	r1, [r1, #0]
    df4a:	8181      	strh	r1, [r0, #12]
    df4c:	4770      	bx	lr

0000df4e <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    df4e:	6809      	ldr	r1, [r1, #0]
    df50:	f8c0 1016 	str.w	r1, [r0, #22]
    df54:	4770      	bx	lr

0000df56 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    df56:	680a      	ldr	r2, [r1, #0]
    df58:	6042      	str	r2, [r0, #4]
    df5a:	6849      	ldr	r1, [r1, #4]
    df5c:	6081      	str	r1, [r0, #8]
    df5e:	4770      	bx	lr

0000df60 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    df60:	680a      	ldr	r2, [r1, #0]
    df62:	f840 2f0e 	str.w	r2, [r0, #14]!
    df66:	6849      	ldr	r1, [r1, #4]
    df68:	6041      	str	r1, [r0, #4]
    df6a:	4770      	bx	lr

0000df6c <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    df6c:	680a      	ldr	r2, [r1, #0]
    df6e:	6042      	str	r2, [r0, #4]
    df70:	6849      	ldr	r1, [r1, #4]
    df72:	6081      	str	r1, [r0, #8]
    df74:	4770      	bx	lr

0000df76 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    df76:	7802      	ldrb	r2, [r0, #0]
    df78:	f001 0103 	and.w	r1, r1, #3
    df7c:	f022 0203 	bic.w	r2, r2, #3
    df80:	430a      	orrs	r2, r1
    df82:	7002      	strb	r2, [r0, #0]
    df84:	4770      	bx	lr

0000df86 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    df86:	7101      	strb	r1, [r0, #4]
    df88:	4770      	bx	lr

0000df8a <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    df8a:	7101      	strb	r1, [r0, #4]
    df8c:	0a09      	lsrs	r1, r1, #8
    df8e:	7141      	strb	r1, [r0, #5]
    df90:	4770      	bx	lr

0000df92 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    df92:	7181      	strb	r1, [r0, #6]
    df94:	0a09      	lsrs	r1, r1, #8
    df96:	71c1      	strb	r1, [r0, #7]
    df98:	4770      	bx	lr

0000df9a <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    df9a:	7201      	strb	r1, [r0, #8]
    df9c:	0a09      	lsrs	r1, r1, #8
    df9e:	7241      	strb	r1, [r0, #9]
    dfa0:	4770      	bx	lr

0000dfa2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    dfa2:	7281      	strb	r1, [r0, #10]
    dfa4:	0a09      	lsrs	r1, r1, #8
    dfa6:	72c1      	strb	r1, [r0, #11]
    dfa8:	4770      	bx	lr

0000dfaa <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    dfaa:	7181      	strb	r1, [r0, #6]
    dfac:	0a09      	lsrs	r1, r1, #8
    dfae:	71c1      	strb	r1, [r0, #7]
    dfb0:	4770      	bx	lr

0000dfb2 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    dfb2:	7141      	strb	r1, [r0, #5]
    dfb4:	4770      	bx	lr

0000dfb6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    dfb6:	7841      	ldrb	r1, [r0, #1]
    dfb8:	7800      	ldrb	r0, [r0, #0]
    dfba:	f010 000f 	ands.w	r0, r0, #15
    dfbe:	d005      	beq.n	dfcc <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    dfc0:	2801      	cmp	r0, #1
    dfc2:	d007      	beq.n	dfd4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    dfc4:	2802      	cmp	r0, #2
    dfc6:	d001      	beq.n	dfcc <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    dfc8:	2806      	cmp	r0, #6
    dfca:	d105      	bne.n	dfd8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    dfcc:	1f89      	subs	r1, r1, #6
    dfce:	291f      	cmp	r1, #31
    dfd0:	d904      	bls.n	dfdc <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    dfd2:	e001      	b.n	dfd8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    dfd4:	290c      	cmp	r1, #12
    dfd6:	d001      	beq.n	dfdc <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    dfd8:	2000      	movs	r0, #0
    dfda:	4770      	bx	lr
    dfdc:	2001      	movs	r0, #1
    dfde:	4770      	bx	lr

0000dfe0 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    dfe0:	7800      	ldrb	r0, [r0, #0]
    dfe2:	09c0      	lsrs	r0, r0, #7
    dfe4:	4770      	bx	lr

0000dfe6 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    dfe6:	f850 2f03 	ldr.w	r2, [r0, #3]!
    dfea:	600a      	str	r2, [r1, #0]
    dfec:	8880      	ldrh	r0, [r0, #4]
    dfee:	8088      	strh	r0, [r1, #4]
    dff0:	4770      	bx	lr

0000dff2 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    dff2:	7800      	ldrb	r0, [r0, #0]
    dff4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    dff8:	4770      	bx	lr

0000dffa <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    dffa:	7801      	ldrb	r1, [r0, #0]
    dffc:	f001 010f 	and.w	r1, r1, #15
    e000:	2904      	cmp	r1, #4
    e002:	d105      	bne.n	e010 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    e004:	7840      	ldrb	r0, [r0, #1]
    e006:	1f80      	subs	r0, r0, #6
    e008:	281f      	cmp	r0, #31
    e00a:	d801      	bhi.n	e010 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    e00c:	2001      	movs	r0, #1
    e00e:	4770      	bx	lr
    e010:	2000      	movs	r0, #0
    e012:	4770      	bx	lr

0000e014 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e014:	b510      	push	{r4, lr}
    e016:	7802      	ldrb	r2, [r0, #0]
    e018:	f001 030f 	and.w	r3, r1, #15
    e01c:	f022 020f 	bic.w	r2, r2, #15
    e020:	431a      	orrs	r2, r3
    e022:	7002      	strb	r2, [r0, #0]
    e024:	2907      	cmp	r1, #7
    e026:	d20c      	bcs.n	e042 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e028:	e8df f001 	tbb	[pc, r1]
    e02c:	06040604 	.word	0x06040604
    e030:	00040804 	.word	0x00040804
    e034:	2106      	movs	r1, #6
    e036:	e002      	b.n	e03e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e038:	210c      	movs	r1, #12
    e03a:	e000      	b.n	e03e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e03c:	2122      	movs	r1, #34	; 0x22
    e03e:	7041      	strb	r1, [r0, #1]
    e040:	bd10      	pop	{r4, pc}
    e042:	216e      	movs	r1, #110	; 0x6e
    e044:	202a      	movs	r0, #42	; 0x2a
    e046:	f7f5 fe9b 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e04a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e04a:	680a      	ldr	r2, [r1, #0]
    e04c:	f840 2f09 	str.w	r2, [r0, #9]!
    e050:	8889      	ldrh	r1, [r1, #4]
    e052:	8081      	strh	r1, [r0, #4]
    e054:	4770      	bx	lr

0000e056 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e056:	7802      	ldrb	r2, [r0, #0]
    e058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e05c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e060:	7002      	strb	r2, [r0, #0]
    e062:	4770      	bx	lr

0000e064 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e064:	680a      	ldr	r2, [r1, #0]
    e066:	f840 2f03 	str.w	r2, [r0, #3]!
    e06a:	8889      	ldrh	r1, [r1, #4]
    e06c:	8081      	strh	r1, [r0, #4]
    e06e:	4770      	bx	lr

0000e070 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e070:	7802      	ldrb	r2, [r0, #0]
    e072:	2340      	movs	r3, #64	; 0x40
    e074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e078:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e07c:	430a      	orrs	r2, r1
    e07e:	7002      	strb	r2, [r0, #0]
    e080:	4770      	bx	lr

0000e082 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e082:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e086:	4604      	mov	r4, r0
    e088:	2000      	movs	r0, #0
    e08a:	f7f6 f85d 	bl	4148 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e08e:	2600      	movs	r6, #0
    e090:	4605      	mov	r5, r0
    e092:	4637      	mov	r7, r6
    e094:	e00e      	b.n	e0b4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e096:	8820      	ldrh	r0, [r4, #0]
    e098:	1c40      	adds	r0, r0, #1
    e09a:	b280      	uxth	r0, r0
    e09c:	8020      	strh	r0, [r4, #0]
    e09e:	42a8      	cmp	r0, r5
    e0a0:	d300      	bcc.n	e0a4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e0a2:	8027      	strh	r7, [r4, #0]
    e0a4:	8820      	ldrh	r0, [r4, #0]
    e0a6:	4669      	mov	r1, sp
    e0a8:	f7ff fc85 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e0ac:	2800      	cmp	r0, #0
    e0ae:	d007      	beq.n	e0c0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e0b0:	1c76      	adds	r6, r6, #1
    e0b2:	b2f6      	uxtb	r6, r6
    e0b4:	42ae      	cmp	r6, r5
    e0b6:	d3ee      	bcc.n	e096 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e0b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e0bc:	8020      	strh	r0, [r4, #0]
    e0be:	2012      	movs	r0, #18
    e0c0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e0c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e0c4:	b510      	push	{r4, lr}
    e0c6:	7901      	ldrb	r1, [r0, #4]
    e0c8:	b119      	cbz	r1, e0d2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e0ca:	2901      	cmp	r1, #1
    e0cc:	d006      	beq.n	e0dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e0ce:	2000      	movs	r0, #0
    e0d0:	bd10      	pop	{r4, pc}
    e0d2:	8842      	ldrh	r2, [r0, #2]
    e0d4:	6883      	ldr	r3, [r0, #8]
    e0d6:	8800      	ldrh	r0, [r0, #0]
    e0d8:	2102      	movs	r1, #2
    e0da:	e003      	b.n	e0e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e0dc:	8842      	ldrh	r2, [r0, #2]
    e0de:	6883      	ldr	r3, [r0, #8]
    e0e0:	8800      	ldrh	r0, [r0, #0]
    e0e2:	2101      	movs	r1, #1
    e0e4:	f7f7 fec8 	bl	5e78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    e0e8:	b908      	cbnz	r0, e0ee <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e0ea:	f7f7 ff13 	bl	5f14 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e0ee:	2001      	movs	r0, #1
    e0f0:	bd10      	pop	{r4, pc}
    e0f2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e0f6:	460e      	mov	r6, r1
    e0f8:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e0fc:	4617      	mov	r7, r2
    e0fe:	39ff      	subs	r1, #255	; 0xff
    e100:	d014      	beq.n	e12c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e102:	8030      	strh	r0, [r6, #0]
    e104:	2100      	movs	r1, #0
    e106:	7171      	strb	r1, [r6, #5]
    e108:	f7f6 fa38 	bl	457c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e10c:	4604      	mov	r4, r0
    e10e:	f7ff f912 	bl	d336 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e112:	0005      	movs	r5, r0
    e114:	d00a      	beq.n	e12c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e116:	4620      	mov	r0, r4
    e118:	4629      	mov	r1, r5
    e11a:	aa01      	add	r2, sp, #4
    e11c:	f7ff f93c 	bl	d398 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e120:	8070      	strh	r0, [r6, #2]
    e122:	b130      	cbz	r0, e132 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    e124:	28fb      	cmp	r0, #251	; 0xfb
    e126:	d906      	bls.n	e136 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    e128:	21ae      	movs	r1, #174	; 0xae
    e12a:	e026      	b.n	e17a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e12c:	2000      	movs	r0, #0
    e12e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e132:	21ad      	movs	r1, #173	; 0xad
    e134:	e021      	b.n	e17a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e136:	9801      	ldr	r0, [sp, #4]
    e138:	f7ff feb5 	bl	dea6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e13c:	2801      	cmp	r0, #1
    e13e:	d003      	beq.n	e148 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e140:	2802      	cmp	r0, #2
    e142:	d001      	beq.n	e148 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e144:	21bd      	movs	r1, #189	; 0xbd
    e146:	e018      	b.n	e17a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e148:	7130      	strb	r0, [r6, #4]
    e14a:	4629      	mov	r1, r5
    e14c:	8873      	ldrh	r3, [r6, #2]
    e14e:	2503      	movs	r5, #3
    e150:	4620      	mov	r0, r4
    e152:	463a      	mov	r2, r7
    e154:	9500      	str	r5, [sp, #0]
    e156:	f7fe ffc5 	bl	d0e4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e15a:	4620      	mov	r0, r4
    e15c:	60b7      	str	r7, [r6, #8]
    e15e:	f7ff f899 	bl	d294 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e162:	b138      	cbz	r0, e174 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    e164:	2100      	movs	r1, #0
    e166:	4620      	mov	r0, r4
    e168:	460a      	mov	r2, r1
    e16a:	f7ff f9f3 	bl	d554 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e16e:	b118      	cbz	r0, e178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    e170:	2001      	movs	r0, #1
    e172:	e7dc      	b.n	e12e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    e174:	21cd      	movs	r1, #205	; 0xcd
    e176:	e000      	b.n	e17a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e178:	21d2      	movs	r1, #210	; 0xd2
    e17a:	202b      	movs	r0, #43	; 0x2b
    e17c:	f7f5 fe00 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e180 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e180:	f7f8 b8c4 	b.w	630c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    e184:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e188:	4604      	mov	r4, r0
    e18a:	2000      	movs	r0, #0
    e18c:	f7f5 ffdc 	bl	4148 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e190:	4605      	mov	r5, r0
    e192:	1c40      	adds	r0, r0, #1
    e194:	2600      	movs	r6, #0
    e196:	b2c7      	uxtb	r7, r0
    e198:	46b0      	mov	r8, r6
    e19a:	e017      	b.n	e1cc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
    e19c:	8820      	ldrh	r0, [r4, #0]
    e19e:	1c40      	adds	r0, r0, #1
    e1a0:	b280      	uxth	r0, r0
    e1a2:	8020      	strh	r0, [r4, #0]
    e1a4:	42b8      	cmp	r0, r7
    e1a6:	d302      	bcc.n	e1ae <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    e1a8:	4640      	mov	r0, r8
    e1aa:	f8a4 8000 	strh.w	r8, [r4]
    e1ae:	b280      	uxth	r0, r0
    e1b0:	42a8      	cmp	r0, r5
    e1b2:	d304      	bcc.n	e1be <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e1b4:	42b8      	cmp	r0, r7
    e1b6:	d202      	bcs.n	e1be <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e1b8:	2000      	movs	r0, #0
    e1ba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e1be:	4669      	mov	r1, sp
    e1c0:	f7ff fbf9 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e1c4:	2800      	cmp	r0, #0
    e1c6:	d0f8      	beq.n	e1ba <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
    e1c8:	1c76      	adds	r6, r6, #1
    e1ca:	b2f6      	uxtb	r6, r6
    e1cc:	42be      	cmp	r6, r7
    e1ce:	d3e5      	bcc.n	e19c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    e1d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e1d4:	8020      	strh	r0, [r4, #0]
    e1d6:	2012      	movs	r0, #18
    e1d8:	e7ef      	b.n	e1ba <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0000e1da <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e1da:	b570      	push	{r4, r5, r6, lr}
    e1dc:	8050      	strh	r0, [r2, #2]
    e1de:	890c      	ldrh	r4, [r1, #8]
    e1e0:	8094      	strh	r4, [r2, #4]
    e1e2:	898b      	ldrh	r3, [r1, #12]
    e1e4:	80d3      	strh	r3, [r2, #6]
    e1e6:	8948      	ldrh	r0, [r1, #10]
    e1e8:	8110      	strh	r0, [r2, #8]
    e1ea:	89cd      	ldrh	r5, [r1, #14]
    e1ec:	8155      	strh	r5, [r2, #10]
    e1ee:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e1f0:	42ae      	cmp	r6, r5
    e1f2:	d108      	bne.n	e206 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e1f4:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e1f6:	4285      	cmp	r5, r0
    e1f8:	d105      	bne.n	e206 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e1fa:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e1fc:	429d      	cmp	r5, r3
    e1fe:	d102      	bne.n	e206 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e200:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e202:	42a3      	cmp	r3, r4
    e204:	d001      	beq.n	e20a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e206:	2301      	movs	r3, #1
    e208:	e000      	b.n	e20c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e20a:	2300      	movs	r3, #0
    e20c:	7313      	strb	r3, [r2, #12]
    e20e:	8548      	strh	r0, [r1, #42]	; 0x2a
    e210:	8950      	ldrh	r0, [r2, #10]
    e212:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e214:	8890      	ldrh	r0, [r2, #4]
    e216:	8588      	strh	r0, [r1, #44]	; 0x2c
    e218:	88d0      	ldrh	r0, [r2, #6]
    e21a:	8608      	strh	r0, [r1, #48]	; 0x30
    e21c:	2001      	movs	r0, #1
    e21e:	7010      	strb	r0, [r2, #0]
    e220:	bd70      	pop	{r4, r5, r6, pc}

0000e222 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e222:	b510      	push	{r4, lr}
    e224:	888c      	ldrh	r4, [r1, #4]
    e226:	890a      	ldrh	r2, [r1, #8]
    e228:	884b      	ldrh	r3, [r1, #2]
    e22a:	88c9      	ldrh	r1, [r1, #6]
    e22c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e230:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e234:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e238:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e23c:	bd10      	pop	{r4, pc}

0000e23e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e23e:	b570      	push	{r4, r5, r6, lr}
    e240:	4615      	mov	r5, r2
    e242:	460c      	mov	r4, r1
    e244:	f000 f8c7 	bl	e3d6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e248:	3096      	adds	r0, #150	; 0x96
    e24a:	4428      	add	r0, r5
    e24c:	42a0      	cmp	r0, r4
    e24e:	d801      	bhi.n	e254 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e250:	1a20      	subs	r0, r4, r0
    e252:	bd70      	pop	{r4, r5, r6, pc}
    e254:	2000      	movs	r0, #0
    e256:	bd70      	pop	{r4, r5, r6, pc}

0000e258 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e25c:	4604      	mov	r4, r0
    e25e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e260:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e262:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e266:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e26a:	4285      	cmp	r5, r0
    e26c:	d300      	bcc.n	e270 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e26e:	4605      	mov	r5, r0
    e270:	4620      	mov	r0, r4
    e272:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e276:	f000 f89e 	bl	e3b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e27a:	4601      	mov	r1, r0
    e27c:	86e5      	strh	r5, [r4, #54]	; 0x36
    e27e:	8761      	strh	r1, [r4, #58]	; 0x3a
    e280:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e282:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e286:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e288:	4680      	mov	r8, r0
    e28a:	42aa      	cmp	r2, r5
    e28c:	d200      	bcs.n	e290 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e28e:	462a      	mov	r2, r5
    e290:	428b      	cmp	r3, r1
    e292:	d200      	bcs.n	e296 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e294:	460b      	mov	r3, r1
    e296:	8202      	strh	r2, [r0, #16]
    e298:	f8a8 3012 	strh.w	r3, [r8, #18]
    e29c:	42bd      	cmp	r5, r7
    e29e:	d101      	bne.n	e2a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e2a0:	42b1      	cmp	r1, r6
    e2a2:	d001      	beq.n	e2a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e2a4:	2001      	movs	r0, #1
    e2a6:	e000      	b.n	e2aa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e2a8:	2000      	movs	r0, #0
    e2aa:	4681      	mov	r9, r0
    e2ac:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e2b0:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e2b4:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e2b6:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e2b8:	4285      	cmp	r5, r0
    e2ba:	d300      	bcc.n	e2be <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e2bc:	4605      	mov	r5, r0
    e2be:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e2c2:	4620      	mov	r0, r4
    e2c4:	f000 f87f 	bl	e3c6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e2c8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e2cc:	2902      	cmp	r1, #2
    e2ce:	d108      	bne.n	e2e2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e2d0:	42af      	cmp	r7, r5
    e2d2:	d200      	bcs.n	e2d6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e2d4:	463d      	mov	r5, r7
    e2d6:	4286      	cmp	r6, r0
    e2d8:	d200      	bcs.n	e2dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e2da:	4630      	mov	r0, r6
    e2dc:	2100      	movs	r1, #0
    e2de:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e2e2:	f8a8 5008 	strh.w	r5, [r8, #8]
    e2e6:	f8a8 000c 	strh.w	r0, [r8, #12]
    e2ea:	42bd      	cmp	r5, r7
    e2ec:	d101      	bne.n	e2f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e2ee:	42b0      	cmp	r0, r6
    e2f0:	d001      	beq.n	e2f6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e2f2:	2001      	movs	r0, #1
    e2f4:	e000      	b.n	e2f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e2f6:	2000      	movs	r0, #0
    e2f8:	ea40 0009 	orr.w	r0, r0, r9
    e2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e300 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e300:	6840      	ldr	r0, [r0, #4]
    e302:	4770      	bx	lr

0000e304 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e308:	4616      	mov	r6, r2
    e30a:	460f      	mov	r7, r1
    e30c:	4604      	mov	r4, r0
    e30e:	f000 f862 	bl	e3d6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e312:	4605      	mov	r5, r0
    e314:	463a      	mov	r2, r7
    e316:	68e1      	ldr	r1, [r4, #12]
    e318:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e31a:	f000 f847 	bl	e3ac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e31e:	19a9      	adds	r1, r5, r6
    e320:	4281      	cmp	r1, r0
    e322:	d300      	bcc.n	e326 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e324:	4608      	mov	r0, r1
    e326:	6320      	str	r0, [r4, #48]	; 0x30
    e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e32c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e32c:	221b      	movs	r2, #27
    e32e:	8402      	strh	r2, [r0, #32]
    e330:	8382      	strh	r2, [r0, #28]
    e332:	82c2      	strh	r2, [r0, #22]
    e334:	8282      	strh	r2, [r0, #20]
    e336:	8142      	strh	r2, [r0, #10]
    e338:	8202      	strh	r2, [r0, #16]
    e33a:	8102      	strh	r2, [r0, #8]
    e33c:	8542      	strh	r2, [r0, #42]	; 0x2a
    e33e:	8582      	strh	r2, [r0, #44]	; 0x2c
    e340:	8482      	strh	r2, [r0, #36]	; 0x24
    e342:	2900      	cmp	r1, #0
    e344:	d10a      	bne.n	e35c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e346:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e34a:	8441      	strh	r1, [r0, #34]	; 0x22
    e34c:	83c1      	strh	r1, [r0, #30]
    e34e:	8341      	strh	r1, [r0, #26]
    e350:	8301      	strh	r1, [r0, #24]
    e352:	81c1      	strh	r1, [r0, #14]
    e354:	8241      	strh	r1, [r0, #18]
    e356:	8181      	strh	r1, [r0, #12]
    e358:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e35a:	8601      	strh	r1, [r0, #48]	; 0x30
    e35c:	4770      	bx	lr

0000e35e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e35e:	6800      	ldr	r0, [r0, #0]
    e360:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e364:	4290      	cmp	r0, r2
    e366:	d903      	bls.n	e370 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e368:	1a40      	subs	r0, r0, r1
    e36a:	389c      	subs	r0, #156	; 0x9c
    e36c:	0840      	lsrs	r0, r0, #1
    e36e:	4770      	bx	lr
    e370:	2000      	movs	r0, #0
    e372:	4770      	bx	lr

0000e374 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e374:	b510      	push	{r4, lr}
    e376:	9c02      	ldr	r4, [sp, #8]
    e378:	8281      	strh	r1, [r0, #20]
    e37a:	82c2      	strh	r2, [r0, #22]
    e37c:	8303      	strh	r3, [r0, #24]
    e37e:	8344      	strh	r4, [r0, #26]
    e380:	bd10      	pop	{r4, pc}

0000e382 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e382:	8050      	strh	r0, [r2, #2]
    e384:	8a88      	ldrh	r0, [r1, #20]
    e386:	8090      	strh	r0, [r2, #4]
    e388:	8ac8      	ldrh	r0, [r1, #22]
    e38a:	80d0      	strh	r0, [r2, #6]
    e38c:	8b08      	ldrh	r0, [r1, #24]
    e38e:	8110      	strh	r0, [r2, #8]
    e390:	8b48      	ldrh	r0, [r1, #26]
    e392:	8150      	strh	r0, [r2, #10]
    e394:	2001      	movs	r0, #1
    e396:	7010      	strb	r0, [r2, #0]
    e398:	4770      	bx	lr
    e39a:	2902      	cmp	r1, #2
    e39c:	d003      	beq.n	e3a6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e39e:	00c0      	lsls	r0, r0, #3
    e3a0:	3070      	adds	r0, #112	; 0x70
    e3a2:	b280      	uxth	r0, r0
    e3a4:	4770      	bx	lr
    e3a6:	0080      	lsls	r0, r0, #2
    e3a8:	303c      	adds	r0, #60	; 0x3c
    e3aa:	e7fa      	b.n	e3a2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e3ac:	4288      	cmp	r0, r1
    e3ae:	d300      	bcc.n	e3b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e3b0:	4608      	mov	r0, r1
    e3b2:	1a80      	subs	r0, r0, r2
    e3b4:	4770      	bx	lr
    e3b6:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e3ba:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e3be:	4281      	cmp	r1, r0
    e3c0:	d200      	bcs.n	e3c4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e3c2:	4608      	mov	r0, r1
    e3c4:	4770      	bx	lr
    e3c6:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e3ca:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e3ce:	4281      	cmp	r1, r0
    e3d0:	d200      	bcs.n	e3d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e3d2:	4608      	mov	r0, r1
    e3d4:	4770      	bx	lr
    e3d6:	2196      	movs	r1, #150	; 0x96
    e3d8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e3dc:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e3e0:	f000 b800 	b.w	e3e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3e8:	460d      	mov	r5, r1
    e3ea:	4606      	mov	r6, r0
    e3ec:	4698      	mov	r8, r3
    e3ee:	4617      	mov	r7, r2
    e3f0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e3f2:	4611      	mov	r1, r2
    e3f4:	f7ff ffd1 	bl	e39a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e3f8:	4604      	mov	r4, r0
    e3fa:	4639      	mov	r1, r7
    e3fc:	4630      	mov	r0, r6
    e3fe:	f7ff ffe2 	bl	e3c6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e402:	42a0      	cmp	r0, r4
    e404:	d200      	bcs.n	e408 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e406:	4604      	mov	r4, r0
    e408:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e40a:	4641      	mov	r1, r8
    e40c:	f7ff ffc5 	bl	e39a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e410:	4607      	mov	r7, r0
    e412:	4641      	mov	r1, r8
    e414:	4630      	mov	r0, r6
    e416:	f7ff ffce 	bl	e3b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e41a:	42b8      	cmp	r0, r7
    e41c:	d300      	bcc.n	e420 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e41e:	4638      	mov	r0, r7
    e420:	4420      	add	r0, r4
    e422:	4428      	add	r0, r5
    e424:	1d80      	adds	r0, r0, #6
    e426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e42a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e42a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e42c:	2700      	movs	r7, #0
    e42e:	463d      	mov	r5, r7
    e430:	2623      	movs	r6, #35	; 0x23
    e432:	f7f8 f81d 	bl	6470 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x58>
    e436:	4604      	mov	r4, r0
    e438:	f7f7 ffee 	bl	6418 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e43c:	b190      	cbz	r0, e464 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    e43e:	4669      	mov	r1, sp
    e440:	2000      	movs	r0, #0
    e442:	f7ff f957 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e446:	e003      	b.n	e450 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x26>
    e448:	9802      	ldr	r0, [sp, #8]
    e44a:	6901      	ldr	r1, [r0, #16]
    e44c:	42a1      	cmp	r1, r4
    e44e:	d009      	beq.n	e464 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    e450:	4668      	mov	r0, sp
    e452:	f7f5 fec5 	bl	41e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e456:	2800      	cmp	r0, #0
    e458:	d0f6      	beq.n	e448 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x1e>
    e45a:	4625      	mov	r5, r4
    e45c:	4620      	mov	r0, r4
    e45e:	f7f7 ff9f 	bl	63a0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e462:	4607      	mov	r7, r0
    e464:	1e76      	subs	r6, r6, #1
    e466:	d001      	beq.n	e46c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x42>
    e468:	2f00      	cmp	r7, #0
    e46a:	d0e2      	beq.n	e432 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8>
    e46c:	b10d      	cbz	r5, e472 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x48>
    e46e:	4628      	mov	r0, r5
    e470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e472:	f240 1177 	movw	r1, #375	; 0x177
    e476:	200f      	movs	r0, #15
    e478:	f7f5 fc82 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e47c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e480:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e484:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e488:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e48c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e490:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e494:	d001      	beq.n	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x70>
    e496:	2000      	movs	r0, #0
    e498:	4770      	bx	lr
    e49a:	2001      	movs	r0, #1
    e49c:	4770      	bx	lr

0000e49e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    e49e:	b510      	push	{r4, lr}
    e4a0:	4604      	mov	r4, r0
    e4a2:	2108      	movs	r1, #8
    e4a4:	4620      	mov	r0, r4
    e4a6:	f7f5 fd15 	bl	3ed4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e4aa:	6820      	ldr	r0, [r4, #0]
    e4ac:	2800      	cmp	r0, #0
    e4ae:	d102      	bne.n	e4b6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    e4b0:	6860      	ldr	r0, [r4, #4]
    e4b2:	2800      	cmp	r0, #0
    e4b4:	d0f5      	beq.n	e4a2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    e4b6:	bd10      	pop	{r4, pc}
    e4b8:	2801      	cmp	r0, #1
    e4ba:	d102      	bne.n	e4c2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    e4bc:	7948      	ldrb	r0, [r1, #5]
    e4be:	0980      	lsrs	r0, r0, #6
    e4c0:	d001      	beq.n	e4c6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    e4c2:	2000      	movs	r0, #0
    e4c4:	4770      	bx	lr
    e4c6:	2001      	movs	r0, #1
    e4c8:	4770      	bx	lr
    e4ca:	2801      	cmp	r0, #1
    e4cc:	d106      	bne.n	e4dc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e4ce:	7948      	ldrb	r0, [r1, #5]
    e4d0:	2101      	movs	r1, #1
    e4d2:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e4d6:	d101      	bne.n	e4dc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e4d8:	2001      	movs	r0, #1
    e4da:	4770      	bx	lr
    e4dc:	2000      	movs	r0, #0
    e4de:	4770      	bx	lr
    e4e0:	b118      	cbz	r0, e4ea <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    e4e2:	2802      	cmp	r0, #2
    e4e4:	d001      	beq.n	e4ea <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    e4e6:	2001      	movs	r0, #1
    e4e8:	4770      	bx	lr
    e4ea:	2000      	movs	r0, #0
    e4ec:	4770      	bx	lr
    e4ee:	2802      	cmp	r0, #2
    e4f0:	d003      	beq.n	e4fa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    e4f2:	2803      	cmp	r0, #3
    e4f4:	d001      	beq.n	e4fa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    e4f6:	2000      	movs	r0, #0
    e4f8:	4770      	bx	lr
    e4fa:	2001      	movs	r0, #1
    e4fc:	4770      	bx	lr

0000e4fe <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e4fe:	f7f9 b807 	b.w	7510 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    e502:	b510      	push	{r4, lr}
    e504:	f7f8 fe52 	bl	71ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    e508:	f7f8 f9f4 	bl	68f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e50c:	f7fc ffe8 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e510:	2005      	movs	r0, #5
    e512:	bd10      	pop	{r4, pc}
    e514:	b510      	push	{r4, lr}
    e516:	f7f8 fe49 	bl	71ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    e51a:	f7fc ffe1 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e51e:	2005      	movs	r0, #5
    e520:	bd10      	pop	{r4, pc}
    e522:	b530      	push	{r4, r5, lr}
    e524:	b089      	sub	sp, #36	; 0x24
    e526:	4605      	mov	r5, r0
    e528:	f7f8 fe40 	bl	71ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    e52c:	7828      	ldrb	r0, [r5, #0]
    e52e:	4669      	mov	r1, sp
    e530:	f000 040f 	and.w	r4, r0, #15
    e534:	4622      	mov	r2, r4
    e536:	4628      	mov	r0, r5
    e538:	f7f9 f9aa 	bl	7890 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e53c:	2200      	movs	r2, #0
    e53e:	4621      	mov	r1, r4
    e540:	4668      	mov	r0, sp
    e542:	f7f8 fa57 	bl	69f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    e546:	4621      	mov	r1, r4
    e548:	4668      	mov	r0, sp
    e54a:	f7f8 fdaf 	bl	70ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f4>
    e54e:	4604      	mov	r4, r0
    e550:	f7f8 f9d0 	bl	68f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e554:	b009      	add	sp, #36	; 0x24
    e556:	4620      	mov	r0, r4
    e558:	bd30      	pop	{r4, r5, pc}
    e55a:	f240 21f2 	movw	r1, #754	; 0x2f2
    e55e:	2032      	movs	r0, #50	; 0x32
    e560:	f7f5 fc0e 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e564:	b510      	push	{r4, lr}
    e566:	f7f8 fe21 	bl	71ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    e56a:	f7fc ffb9 	bl	b4e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e572:	f7f8 bfe5 	b.w	7540 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc88>
    e576:	f7f8 bfcb 	b.w	7510 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    e57a:	f7ff b81f 	b.w	d5bc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000e57e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    e57e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e580:	b08b      	sub	sp, #44	; 0x2c
    e582:	4607      	mov	r7, r0
    e584:	f7f6 f82e 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e588:	4604      	mov	r4, r0
    e58a:	f7fe fed4 	bl	d336 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e58e:	0005      	movs	r5, r0
    e590:	d00c      	beq.n	e5ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    e592:	4620      	mov	r0, r4
    e594:	4629      	mov	r1, r5
    e596:	466a      	mov	r2, sp
    e598:	f7fe fefe 	bl	d398 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e59c:	4606      	mov	r6, r0
    e59e:	f7f6 f81b 	bl	45d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e5a2:	42b0      	cmp	r0, r6
    e5a4:	d005      	beq.n	e5b2 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    e5a6:	f44f 7198 	mov.w	r1, #304	; 0x130
    e5aa:	e033      	b.n	e614 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    e5ac:	2000      	movs	r0, #0
    e5ae:	b00b      	add	sp, #44	; 0x2c
    e5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5b2:	a901      	add	r1, sp, #4
    e5b4:	9800      	ldr	r0, [sp, #0]
    e5b6:	f000 f8b4 	bl	e722 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    e5ba:	1d3e      	adds	r6, r7, #4
    e5bc:	4628      	mov	r0, r5
    e5be:	f7fe fe4e 	bl	d25e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e5c2:	4605      	mov	r5, r0
    e5c4:	4601      	mov	r1, r0
    e5c6:	221c      	movs	r2, #28
    e5c8:	4630      	mov	r0, r6
    e5ca:	f7fd ffe9 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e5ce:	7aa8      	ldrb	r0, [r5, #10]
    e5d0:	f04f 0500 	mov.w	r5, #0
    e5d4:	06c1      	lsls	r1, r0, #27
    e5d6:	d50d      	bpl.n	e5f4 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e5d8:	0740      	lsls	r0, r0, #29
    e5da:	d40a      	bmi.n	e5f2 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    e5dc:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e5e0:	f106 001c 	add.w	r0, r6, #28
    e5e4:	9904      	ldr	r1, [sp, #16]
    e5e6:	f7fd ffdb 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e5ea:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e5ee:	7230      	strb	r0, [r6, #8]
    e5f0:	e000      	b.n	e5f4 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e5f2:	7235      	strb	r5, [r6, #8]
    e5f4:	707d      	strb	r5, [r7, #1]
    e5f6:	2005      	movs	r0, #5
    e5f8:	7038      	strb	r0, [r7, #0]
    e5fa:	4620      	mov	r0, r4
    e5fc:	f7fe fe4a 	bl	d294 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e600:	b130      	cbz	r0, e610 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    e602:	2100      	movs	r1, #0
    e604:	4620      	mov	r0, r4
    e606:	460a      	mov	r2, r1
    e608:	f7fe ffa4 	bl	d554 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e60c:	2001      	movs	r0, #1
    e60e:	e7ce      	b.n	e5ae <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    e610:	f240 1173 	movw	r1, #371	; 0x173
    e614:	2033      	movs	r0, #51	; 0x33
    e616:	f7f5 fbb3 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e61a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e61a:	b510      	push	{r4, lr}
    e61c:	f7f5 ffe2 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e620:	f000 f874 	bl	e70c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e624:	4604      	mov	r4, r0
    e626:	221c      	movs	r2, #28
    e628:	2100      	movs	r1, #0
    e62a:	f7fe f833 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e62e:	207f      	movs	r0, #127	; 0x7f
    e630:	76a0      	strb	r0, [r4, #26]
    e632:	21ff      	movs	r1, #255	; 0xff
    e634:	73a1      	strb	r1, [r4, #14]
    e636:	7061      	strb	r1, [r4, #1]
    e638:	74e1      	strb	r1, [r4, #19]
    e63a:	7aa0      	ldrb	r0, [r4, #10]
    e63c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e640:	3020      	adds	r0, #32
    e642:	72a0      	strb	r0, [r4, #10]
    e644:	bd10      	pop	{r4, pc}

0000e646 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    e646:	f7ff bfe8 	b.w	e61a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000e64a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e64e:	461e      	mov	r6, r3
    e650:	4617      	mov	r7, r2
    e652:	4689      	mov	r9, r1
    e654:	4682      	mov	sl, r0
    e656:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e65a:	f7f5 ffc3 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e65e:	4604      	mov	r4, r0
    e660:	f7fe fdff 	bl	d262 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e664:	2801      	cmp	r0, #1
    e666:	d034      	beq.n	e6d2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e668:	4620      	mov	r0, r4
    e66a:	f000 f84f 	bl	e70c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e66e:	4604      	mov	r4, r0
    e670:	221c      	movs	r2, #28
    e672:	2100      	movs	r1, #0
    e674:	f7fe f80e 	bl	c694 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e678:	2501      	movs	r5, #1
    e67a:	7025      	strb	r5, [r4, #0]
    e67c:	1c63      	adds	r3, r4, #1
    e67e:	1ca2      	adds	r2, r4, #2
    e680:	4649      	mov	r1, r9
    e682:	4650      	mov	r0, sl
    e684:	f000 f827 	bl	e6d6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    e688:	f884 8009 	strb.w	r8, [r4, #9]
    e68c:	7aa0      	ldrb	r0, [r4, #10]
    e68e:	21ff      	movs	r1, #255	; 0xff
    e690:	f367 0000 	bfi	r0, r7, #0, #1
    e694:	f040 001a 	orr.w	r0, r0, #26
    e698:	72a0      	strb	r0, [r4, #10]
    e69a:	7325      	strb	r5, [r4, #12]
    e69c:	2000      	movs	r0, #0
    e69e:	7360      	strb	r0, [r4, #13]
    e6a0:	73a1      	strb	r1, [r4, #14]
    e6a2:	74e1      	strb	r1, [r4, #19]
    e6a4:	207f      	movs	r0, #127	; 0x7f
    e6a6:	76a0      	strb	r0, [r4, #26]
    e6a8:	76e6      	strb	r6, [r4, #27]
    e6aa:	f7f5 ff95 	bl	45d8 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e6ae:	4604      	mov	r4, r0
    e6b0:	f7f5 ff98 	bl	45e4 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e6b4:	2201      	movs	r2, #1
    e6b6:	4621      	mov	r1, r4
    e6b8:	f000 f831 	bl	e71e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    e6bc:	b120      	cbz	r0, e6c8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    e6be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e6c2:	2005      	movs	r0, #5
    e6c4:	f7f9 b9ac 	b.w	7a20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    e6c8:	f240 21c9 	movw	r1, #713	; 0x2c9
    e6cc:	2033      	movs	r0, #51	; 0x33
    e6ce:	f7f5 fb57 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6d6:	b510      	push	{r4, lr}
    e6d8:	461c      	mov	r4, r3
    e6da:	460b      	mov	r3, r1
    e6dc:	29ff      	cmp	r1, #255	; 0xff
    e6de:	d00d      	beq.n	e6fc <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    e6e0:	4621      	mov	r1, r4
    e6e2:	4618      	mov	r0, r3
    e6e4:	f7f7 f81a 	bl	571c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    e6e8:	b120      	cbz	r0, e6f4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    e6ea:	7820      	ldrb	r0, [r4, #0]
    e6ec:	f040 0002 	orr.w	r0, r0, #2
    e6f0:	7020      	strb	r0, [r4, #0]
    e6f2:	bd10      	pop	{r4, pc}
    e6f4:	2150      	movs	r1, #80	; 0x50
    e6f6:	2033      	movs	r0, #51	; 0x33
    e6f8:	f7f5 fb42 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6fc:	7c41      	ldrb	r1, [r0, #17]
    e6fe:	7021      	strb	r1, [r4, #0]
    e700:	6840      	ldr	r0, [r0, #4]
    e702:	6801      	ldr	r1, [r0, #0]
    e704:	6011      	str	r1, [r2, #0]
    e706:	8880      	ldrh	r0, [r0, #4]
    e708:	8090      	strh	r0, [r2, #4]
    e70a:	bd10      	pop	{r4, pc}
    e70c:	b51c      	push	{r2, r3, r4, lr}
    e70e:	4669      	mov	r1, sp
    e710:	aa01      	add	r2, sp, #4
    e712:	f7fe fe33 	bl	d37c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e716:	9800      	ldr	r0, [sp, #0]
    e718:	f7fe fda1 	bl	d25e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e71c:	bd1c      	pop	{r2, r3, r4, pc}
    e71e:	f7fe bd46 	b.w	d1ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000e722 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    e722:	7802      	ldrb	r2, [r0, #0]
    e724:	f002 020f 	and.w	r2, r2, #15
    e728:	f7f9 b8b2 	b.w	7890 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e72c:	2800      	cmp	r0, #0
    e72e:	db04      	blt.n	e73a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    e730:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e734:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    e738:	e005      	b.n	e746 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    e73a:	f000 000f 	and.w	r0, r0, #15
    e73e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e742:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    e746:	0940      	lsrs	r0, r0, #5
    e748:	4770      	bx	lr
    e74a:	6940      	ldr	r0, [r0, #20]
    e74c:	2800      	cmp	r0, #0
    e74e:	d000      	beq.n	e752 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
    e750:	2001      	movs	r0, #1
    e752:	4770      	bx	lr

0000e754 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    e754:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    e758:	4770      	bx	lr
    e75a:	b510      	push	{r4, lr}
    e75c:	2808      	cmp	r0, #8
    e75e:	d00a      	beq.n	e776 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x22>
    e760:	2804      	cmp	r0, #4
    e762:	d00a      	beq.n	e77a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x26>
    e764:	2802      	cmp	r0, #2
    e766:	d00a      	beq.n	e77e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2a>
    e768:	2108      	movs	r1, #8
    e76a:	2801      	cmp	r0, #1
    e76c:	d009      	beq.n	e782 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    e76e:	21d9      	movs	r1, #217	; 0xd9
    e770:	2005      	movs	r0, #5
    e772:	f7f5 fb05 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e776:	2140      	movs	r1, #64	; 0x40
    e778:	e7f7      	b.n	e76a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e77a:	2110      	movs	r1, #16
    e77c:	e7f5      	b.n	e76a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e77e:	2104      	movs	r1, #4
    e780:	e7f3      	b.n	e76a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e782:	222a      	movs	r2, #42	; 0x2a
    e784:	2028      	movs	r0, #40	; 0x28
    e786:	fb11 0002 	smlabb	r0, r1, r2, r0
    e78a:	b280      	uxth	r0, r0
    e78c:	bd10      	pop	{r4, pc}
    e78e:	2000      	movs	r0, #0
    e790:	4770      	bx	lr
    e792:	b570      	push	{r4, r5, r6, lr}
    e794:	4604      	mov	r4, r0
    e796:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    e79a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    e79e:	f000 f80c 	bl	e7ba <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x66>
    e7a2:	4605      	mov	r5, r0
    e7a4:	f000 f857 	bl	e856 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    e7a8:	4601      	mov	r1, r0
    e7aa:	462a      	mov	r2, r5
    e7ac:	4620      	mov	r0, r4
    e7ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e7b2:	f7ff bda7 	b.w	e304 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e7b6:	f7f3 b84b 	b.w	1850 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e7ba:	b510      	push	{r4, lr}
    e7bc:	4604      	mov	r4, r0
    e7be:	4608      	mov	r0, r1
    e7c0:	f001 f919 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e7c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e7c8:	2c02      	cmp	r4, #2
    e7ca:	d00a      	beq.n	e7e2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x8e>
    e7cc:	f640 0234 	movw	r2, #2100	; 0x834
    e7d0:	4410      	add	r0, r2
    e7d2:	f24a 5295 	movw	r2, #42389	; 0xa595
    e7d6:	4410      	add	r0, r2
    e7d8:	fbb0 f0f1 	udiv	r0, r0, r1
    e7dc:	f200 1037 	addw	r0, r0, #311	; 0x137
    e7e0:	bd10      	pop	{r4, pc}
    e7e2:	460a      	mov	r2, r1
    e7e4:	e7f4      	b.n	e7d0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7c>
    e7e6:	b510      	push	{r4, lr}
    e7e8:	4604      	mov	r4, r0
    e7ea:	2000      	movs	r0, #0
    e7ec:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    e7f0:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e7f4:	f7f3 fc78 	bl	20e8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e7f8:	b140      	cbz	r0, e80c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb8>
    e7fa:	2020      	movs	r0, #32
    e7fc:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    e800:	f504 7084 	add.w	r0, r4, #264	; 0x108
    e804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e808:	f7fb bed6 	b.w	a5b8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    e80c:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    e810:	2035      	movs	r0, #53	; 0x35
    e812:	f7f5 fab5 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e816:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e818:	4613      	mov	r3, r2
    e81a:	460a      	mov	r2, r1
    e81c:	4604      	mov	r4, r0
    e81e:	4601      	mov	r1, r0
    e820:	4668      	mov	r0, sp
    e822:	f7f9 fce3 	bl	81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    e826:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e82a:	4669      	mov	r1, sp
    e82c:	f7ff ffc3 	bl	e7b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    e830:	2800      	cmp	r0, #0
    e832:	d104      	bne.n	e83e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xea>
    e834:	f640 2139 	movw	r1, #2617	; 0xa39
    e838:	2035      	movs	r0, #53	; 0x35
    e83a:	f7f5 faa1 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e83e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    e840:	b510      	push	{r4, lr}
    e842:	245b      	movs	r4, #91	; 0x5b
    e844:	f001 f895 	bl	f972 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e848:	b910      	cbnz	r0, e850 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    e84a:	f001 f888 	bl	f95e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e84e:	b100      	cbz	r0, e852 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfe>
    e850:	2462      	movs	r4, #98	; 0x62
    e852:	4620      	mov	r0, r4
    e854:	bd10      	pop	{r4, pc}
    e856:	b510      	push	{r4, lr}
    e858:	f7ff fff2 	bl	e840 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    e85c:	3069      	adds	r0, #105	; 0x69
    e85e:	b280      	uxth	r0, r0
    e860:	bd10      	pop	{r4, pc}
    e862:	b510      	push	{r4, lr}
    e864:	f7ff ffec 	bl	e840 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    e868:	30ff      	adds	r0, #255	; 0xff
    e86a:	b280      	uxth	r0, r0
    e86c:	bd10      	pop	{r4, pc}
    e86e:	b1d0      	cbz	r0, e8a6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x152>
    e870:	2908      	cmp	r1, #8
    e872:	d011      	beq.n	e898 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x144>
    e874:	2904      	cmp	r1, #4
    e876:	d00b      	beq.n	e890 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x13c>
    e878:	2000      	movs	r0, #0
    e87a:	2902      	cmp	r1, #2
    e87c:	d010      	beq.n	e8a0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x14c>
    e87e:	2108      	movs	r1, #8
    e880:	3028      	adds	r0, #40	; 0x28
    e882:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    e886:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    e88a:	4408      	add	r0, r1
    e88c:	3098      	adds	r0, #152	; 0x98
    e88e:	4770      	bx	lr
    e890:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    e894:	2110      	movs	r1, #16
    e896:	e7f4      	b.n	e882 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e898:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e89c:	2140      	movs	r1, #64	; 0x40
    e89e:	e7f0      	b.n	e882 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e8a0:	2104      	movs	r1, #4
    e8a2:	3018      	adds	r0, #24
    e8a4:	e7ed      	b.n	e882 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e8a6:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    e8aa:	4770      	bx	lr
    e8ac:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e8b0:	f001 0307 	and.w	r3, r1, #7
    e8b4:	7802      	ldrb	r2, [r0, #0]
    e8b6:	2101      	movs	r1, #1
    e8b8:	4099      	lsls	r1, r3
    e8ba:	438a      	bics	r2, r1
    e8bc:	7002      	strb	r2, [r0, #0]
    e8be:	4770      	bx	lr

0000e8c0 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    e8c0:	f7f5 bde8 	b.w	4494 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e8c4 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    e8c4:	2000      	movs	r0, #0
    e8c6:	4770      	bx	lr

0000e8c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    e8c8:	b538      	push	{r3, r4, r5, lr}
    e8ca:	460d      	mov	r5, r1
    e8cc:	4604      	mov	r4, r0
    e8ce:	e050      	b.n	e972 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    e8d0:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    e8d4:	1c40      	adds	r0, r0, #1
    e8d6:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    e8da:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    e8de:	1c40      	adds	r0, r0, #1
    e8e0:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    e8e4:	4620      	mov	r0, r4
    e8e6:	f000 f8e1 	bl	eaac <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    e8ea:	b198      	cbz	r0, e914 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e8ec:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e8f0:	1c40      	adds	r0, r0, #1
    e8f2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e8f6:	4620      	mov	r0, r4
    e8f8:	f000 f86e 	bl	e9d8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    e8fc:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    e900:	4288      	cmp	r0, r1
    e902:	d307      	bcc.n	e914 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e904:	2000      	movs	r0, #0
    e906:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e90a:	2001      	movs	r0, #1
    e90c:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    e910:	f7f7 fb76 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e914:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    e918:	b120      	cbz	r0, e924 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    e91a:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    e91e:	1c40      	adds	r0, r0, #1
    e920:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    e924:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    e928:	b120      	cbz	r0, e934 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    e92a:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    e92e:	1c40      	adds	r0, r0, #1
    e930:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    e934:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    e938:	f88d 0000 	strb.w	r0, [sp]
    e93c:	9800      	ldr	r0, [sp, #0]
    e93e:	9000      	str	r0, [sp, #0]
    e940:	f89d 0000 	ldrb.w	r0, [sp]
    e944:	b940      	cbnz	r0, e958 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    e946:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    e94a:	2300      	movs	r3, #0
    e94c:	2101      	movs	r1, #1
    e94e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    e952:	f7ff f88a 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e956:	b120      	cbz	r0, e962 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    e958:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    e95c:	1c40      	adds	r0, r0, #1
    e95e:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    e962:	4620      	mov	r0, r4
    e964:	f000 f847 	bl	e9f6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    e968:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e96c:	1c40      	adds	r0, r0, #1
    e96e:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    e972:	1e6d      	subs	r5, r5, #1
    e974:	b2ad      	uxth	r5, r5
    e976:	d2ab      	bcs.n	e8d0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    e978:	bd38      	pop	{r3, r4, r5, pc}

0000e97a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    e97a:	b510      	push	{r4, lr}
    e97c:	f7fa fd88 	bl	9490 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    e980:	b128      	cbz	r0, e98e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    e982:	2000      	movs	r0, #0
    e984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e988:	4601      	mov	r1, r0
    e98a:	f7fa bd2d 	b.w	93e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    e98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e992:	f7f6 ba21 	b.w	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    e996:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    e99a:	28fe      	cmp	r0, #254	; 0xfe
    e99c:	d001      	beq.n	e9a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    e99e:	2001      	movs	r0, #1
    e9a0:	4770      	bx	lr
    e9a2:	2000      	movs	r0, #0
    e9a4:	4770      	bx	lr
    e9a6:	b510      	push	{r4, lr}
    e9a8:	2801      	cmp	r0, #1
    e9aa:	d006      	beq.n	e9ba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e9ac:	2802      	cmp	r0, #2
    e9ae:	d004      	beq.n	e9ba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e9b0:	f240 2163 	movw	r1, #611	; 0x263
    e9b4:	2006      	movs	r0, #6
    e9b6:	f7f5 f9e3 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9ba:	bd10      	pop	{r4, pc}
    e9bc:	2801      	cmp	r0, #1
    e9be:	d002      	beq.n	e9c6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    e9c0:	2802      	cmp	r0, #2
    e9c2:	d105      	bne.n	e9d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e9c4:	e002      	b.n	e9cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    e9c6:	2901      	cmp	r1, #1
    e9c8:	d004      	beq.n	e9d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e9ca:	e001      	b.n	e9d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e9cc:	2902      	cmp	r1, #2
    e9ce:	d001      	beq.n	e9d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e9d0:	2000      	movs	r0, #0
    e9d2:	4770      	bx	lr
    e9d4:	2001      	movs	r0, #1
    e9d6:	4770      	bx	lr
    e9d8:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    e9dc:	428a      	cmp	r2, r1
    e9de:	d301      	bcc.n	e9e4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    e9e0:	1a51      	subs	r1, r2, r1
    e9e2:	e000      	b.n	e9e6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    e9e4:	2100      	movs	r1, #0
    e9e6:	8a82      	ldrh	r2, [r0, #20]
    e9e8:	1d52      	adds	r2, r2, #5
    e9ea:	428a      	cmp	r2, r1
    e9ec:	d302      	bcc.n	e9f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    e9ee:	2101      	movs	r1, #1
    e9f0:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    e9f4:	4770      	bx	lr
    e9f6:	b570      	push	{r4, r5, r6, lr}
    e9f8:	4604      	mov	r4, r0
    e9fa:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    e9fe:	2500      	movs	r5, #0
    ea00:	2601      	movs	r6, #1
    ea02:	280c      	cmp	r0, #12
    ea04:	d02c      	beq.n	ea60 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    ea06:	280d      	cmp	r0, #13
    ea08:	d129      	bne.n	ea5e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    ea0a:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    ea0e:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    ea12:	1c40      	adds	r0, r0, #1
    ea14:	4288      	cmp	r0, r1
    ea16:	d122      	bne.n	ea5e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    ea18:	8820      	ldrh	r0, [r4, #0]
    ea1a:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    ea1e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    ea22:	f7fe ffd8 	bl	d9d6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    ea26:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    ea2a:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    ea2e:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    ea32:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    ea36:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    ea3a:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    ea3e:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    ea42:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    ea46:	2102      	movs	r1, #2
    ea48:	4620      	mov	r0, r4
    ea4a:	f7f7 f89b 	bl	5b84 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    ea4e:	f7f7 fad7 	bl	6000 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ea52:	2103      	movs	r1, #3
    ea54:	4620      	mov	r0, r4
    ea56:	f7f8 ff75 	bl	7944 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    ea5a:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    ea5e:	bd70      	pop	{r4, r5, r6, pc}
    ea60:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    ea64:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    ea68:	1c40      	adds	r0, r0, #1
    ea6a:	4288      	cmp	r0, r1
    ea6c:	d1f7      	bne.n	ea5e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    ea6e:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    ea72:	f8d0 1001 	ldr.w	r1, [r0, #1]
    ea76:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    ea7a:	7940      	ldrb	r0, [r0, #5]
    ea7c:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    ea80:	2103      	movs	r1, #3
    ea82:	4620      	mov	r0, r4
    ea84:	f7f7 f87e 	bl	5b84 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    ea88:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    ea8c:	7800      	ldrb	r0, [r0, #0]
    ea8e:	b140      	cbz	r0, eaa2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    ea90:	2101      	movs	r1, #1
    ea92:	20fe      	movs	r0, #254	; 0xfe
    ea94:	f7fb fd18 	bl	a4c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    ea98:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    ea9c:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    eaa0:	bd70      	pop	{r4, r5, r6, pc}
    eaa2:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    eaa6:	2036      	movs	r0, #54	; 0x36
    eaa8:	f7f5 f96a 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaac:	b510      	push	{r4, lr}
    eaae:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    eab2:	b941      	cbnz	r1, eac6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    eab4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    eab8:	2300      	movs	r3, #0
    eaba:	2106      	movs	r1, #6
    eabc:	3078      	adds	r0, #120	; 0x78
    eabe:	f7fe ffd4 	bl	da6a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eac2:	2800      	cmp	r0, #0
    eac4:	d000      	beq.n	eac8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    eac6:	2001      	movs	r0, #1
    eac8:	bd10      	pop	{r4, pc}

0000eaca <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    eaca:	b510      	push	{r4, lr}
    eacc:	460c      	mov	r4, r1
    eace:	4601      	mov	r1, r0
    ead0:	4610      	mov	r0, r2
    ead2:	f7f2 fd7f 	bl	15d4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ead6:	2800      	cmp	r0, #0
    ead8:	da06      	bge.n	eae8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    eada:	1a21      	subs	r1, r4, r0
    eadc:	1e49      	subs	r1, r1, #1
    eade:	fbb1 f1f4 	udiv	r1, r1, r4
    eae2:	fb01 0004 	mla	r0, r1, r4, r0
    eae6:	bd10      	pop	{r4, pc}
    eae8:	fb90 f1f4 	sdiv	r1, r0, r4
    eaec:	fb01 0014 	mls	r0, r1, r4, r0
    eaf0:	bd10      	pop	{r4, pc}
    eaf2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    eaf6:	f001 0107 	and.w	r1, r1, #7
    eafa:	7800      	ldrb	r0, [r0, #0]
    eafc:	2201      	movs	r2, #1
    eafe:	408a      	lsls	r2, r1
    eb00:	4010      	ands	r0, r2
    eb02:	40c8      	lsrs	r0, r1
    eb04:	4770      	bx	lr
    eb06:	b118      	cbz	r0, eb10 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    eb08:	2802      	cmp	r0, #2
    eb0a:	d001      	beq.n	eb10 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    eb0c:	2001      	movs	r0, #1
    eb0e:	4770      	bx	lr
    eb10:	2000      	movs	r0, #0
    eb12:	4770      	bx	lr

0000eb14 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    eb14:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    eb16:	7881      	ldrb	r1, [r0, #2]
    eb18:	4604      	mov	r4, r0
    eb1a:	291a      	cmp	r1, #26
    eb1c:	d025      	beq.n	eb6a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    eb1e:	dc0e      	bgt.n	eb3e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    eb20:	2916      	cmp	r1, #22
    eb22:	d22d      	bcs.n	eb80 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eb24:	e8df f001 	tbb	[pc, r1]
    eb28:	2c2c2c2c 	.word	0x2c2c2c2c
    eb2c:	2c2c212c 	.word	0x2c2c212c
    eb30:	2c2c2c2c 	.word	0x2c2c2c2c
    eb34:	2c2c2c2c 	.word	0x2c2c2c2c
    eb38:	212c2c2c 	.word	0x212c2c2c
    eb3c:	2121      	.short	0x2121
    eb3e:	292a      	cmp	r1, #42	; 0x2a
    eb40:	d01e      	beq.n	eb80 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eb42:	dc0b      	bgt.n	eb5c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    eb44:	f1a1 011e 	sub.w	r1, r1, #30
    eb48:	290c      	cmp	r1, #12
    eb4a:	d219      	bcs.n	eb80 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eb4c:	e8df f001 	tbb	[pc, r1]
    eb50:	18181818 	.word	0x18181818
    eb54:	18181818 	.word	0x18181818
    eb58:	0d181818 	.word	0x0d181818
    eb5c:	393a      	subs	r1, #58	; 0x3a
    eb5e:	2904      	cmp	r1, #4
    eb60:	d20e      	bcs.n	eb80 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eb62:	e8df f001 	tbb	[pc, r1]
    eb66:	020d      	.short	0x020d
    eb68:	020d      	.short	0x020d
    eb6a:	8820      	ldrh	r0, [r4, #0]
    eb6c:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    eb70:	d206      	bcs.n	eb80 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eb72:	2701      	movs	r7, #1
    eb74:	4669      	mov	r1, sp
    eb76:	f7fe ff1e 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eb7a:	b118      	cbz	r0, eb84 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    eb7c:	2002      	movs	r0, #2
    eb7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb80:	2012      	movs	r0, #18
    eb82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eb84:	9d01      	ldr	r5, [sp, #4]
    eb86:	4668      	mov	r0, sp
    eb88:	462e      	mov	r6, r5
    eb8a:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    eb8e:	f206 163d 	addw	r6, r6, #317	; 0x13d
    eb92:	f000 fd7f 	bl	f694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    eb96:	b138      	cbz	r0, eba8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    eb98:	7828      	ldrb	r0, [r5, #0]
    eb9a:	f88d 0008 	strb.w	r0, [sp, #8]
    eb9e:	9802      	ldr	r0, [sp, #8]
    eba0:	9002      	str	r0, [sp, #8]
    eba2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eba6:	b108      	cbz	r0, ebac <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    eba8:	200c      	movs	r0, #12
    ebaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ebac:	702f      	strb	r7, [r5, #0]
    ebae:	78a0      	ldrb	r0, [r4, #2]
    ebb0:	7030      	strb	r0, [r6, #0]
    ebb2:	2000      	movs	r0, #0
    ebb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ebb6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ebb6:	b510      	push	{r4, lr}
    ebb8:	4604      	mov	r4, r0
    ebba:	7800      	ldrb	r0, [r0, #0]
    ebbc:	b118      	cbz	r0, ebc6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ebbe:	2801      	cmp	r0, #1
    ebc0:	d001      	beq.n	ebc6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ebc2:	2012      	movs	r0, #18
    ebc4:	bd10      	pop	{r4, pc}
    ebc6:	f000 fd7c 	bl	f6c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ebca:	b120      	cbz	r0, ebd6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ebcc:	f7f6 fda0 	bl	5710 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ebd0:	b108      	cbz	r0, ebd6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ebd2:	200c      	movs	r0, #12
    ebd4:	bd10      	pop	{r4, pc}
    ebd6:	7820      	ldrb	r0, [r4, #0]
    ebd8:	f7ff ff95 	bl	eb06 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ebdc:	1de2      	adds	r2, r4, #7
    ebde:	f104 0317 	add.w	r3, r4, #23
    ebe2:	1c61      	adds	r1, r4, #1
    ebe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebe8:	f7f6 bdc4 	b.w	5774 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000ebec <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ebec:	b510      	push	{r4, lr}
    ebee:	4604      	mov	r4, r0
    ebf0:	f000 fe0e 	bl	f810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ebf4:	b108      	cbz	r0, ebfa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ebf6:	200c      	movs	r0, #12
    ebf8:	bd10      	pop	{r4, pc}
    ebfa:	7820      	ldrb	r0, [r4, #0]
    ebfc:	b118      	cbz	r0, ec06 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ebfe:	2801      	cmp	r0, #1
    ec00:	d001      	beq.n	ec06 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ec02:	2012      	movs	r0, #18
    ec04:	bd10      	pop	{r4, pc}
    ec06:	f7ff ff7e 	bl	eb06 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ec0a:	1c61      	adds	r1, r4, #1
    ec0c:	f7f6 fe56 	bl	58bc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ec10:	b108      	cbz	r0, ec16 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    ec12:	2000      	movs	r0, #0
    ec14:	bd10      	pop	{r4, pc}
    ec16:	2007      	movs	r0, #7
    ec18:	bd10      	pop	{r4, pc}

0000ec1a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ec1a:	b510      	push	{r4, lr}
    ec1c:	f000 fd51 	bl	f6c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ec20:	b120      	cbz	r0, ec2c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ec22:	f7f6 fd75 	bl	5710 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ec26:	b108      	cbz	r0, ec2c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ec28:	200c      	movs	r0, #12
    ec2a:	bd10      	pop	{r4, pc}
    ec2c:	f7f6 fde8 	bl	5800 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ec30:	2000      	movs	r0, #0
    ec32:	bd10      	pop	{r4, pc}

0000ec34 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ec34:	b510      	push	{r4, lr}
    ec36:	f000 fdeb 	bl	f810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ec3a:	b108      	cbz	r0, ec40 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ec3c:	200c      	movs	r0, #12
    ec3e:	bd10      	pop	{r4, pc}
    ec40:	f7f6 fe64 	bl	590c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ec44:	2000      	movs	r0, #0
    ec46:	bd10      	pop	{r4, pc}

0000ec48 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    ec48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec4a:	4605      	mov	r5, r0
    ec4c:	f000 fafa 	bl	f244 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    ec50:	2800      	cmp	r0, #0
    ec52:	d112      	bne.n	ec7a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    ec54:	8828      	ldrh	r0, [r5, #0]
    ec56:	2100      	movs	r1, #0
    ec58:	f7fe fd43 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec5c:	0004      	movs	r4, r0
    ec5e:	d00d      	beq.n	ec7c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ec60:	f000 fd1b 	bl	f69a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    ec64:	b150      	cbz	r0, ec7c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    ec66:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    ec6a:	f88d 0000 	strb.w	r0, [sp]
    ec6e:	9800      	ldr	r0, [sp, #0]
    ec70:	9000      	str	r0, [sp, #0]
    ec72:	f89d 0000 	ldrb.w	r0, [sp]
    ec76:	b118      	cbz	r0, ec80 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    ec78:	203a      	movs	r0, #58	; 0x3a
    ec7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec7c:	2002      	movs	r0, #2
    ec7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec80:	88a8      	ldrh	r0, [r5, #4]
    ec82:	f7fe fea4 	bl	d9ce <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ec86:	4606      	mov	r6, r0
    ec88:	4601      	mov	r1, r0
    ec8a:	2008      	movs	r0, #8
    ec8c:	f7ff f86b 	bl	dd66 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ec90:	4601      	mov	r1, r0
    ec92:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    ec96:	4281      	cmp	r1, r0
    ec98:	d301      	bcc.n	ec9e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    ec9a:	42b0      	cmp	r0, r6
    ec9c:	d301      	bcc.n	eca2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    ec9e:	2012      	movs	r0, #18
    eca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eca2:	4631      	mov	r1, r6
    eca4:	2005      	movs	r0, #5
    eca6:	f7ff f85e 	bl	dd66 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    ecaa:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    ecae:	2000      	movs	r0, #0
    ecb0:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    ecb4:	88e8      	ldrh	r0, [r5, #6]
    ecb6:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    ecba:	8928      	ldrh	r0, [r5, #8]
    ecbc:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    ecc0:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    ecc4:	2001      	movs	r0, #1
    ecc6:	7020      	strb	r0, [r4, #0]
    ecc8:	2000      	movs	r0, #0
    ecca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eccc <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    eccc:	b508      	push	{r3, lr}
    ecce:	f7f7 f991 	bl	5ff4 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    ecd2:	b970      	cbnz	r0, ecf2 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    ecd4:	f7f8 fff4 	bl	7cc0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    ecd8:	2805      	cmp	r0, #5
    ecda:	d005      	beq.n	ece8 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    ecdc:	f7f7 fc46 	bl	656c <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    ece0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ece4:	39ff      	subs	r1, #255	; 0xff
    ece6:	d004      	beq.n	ecf2 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    ece8:	4668      	mov	r0, sp
    ecea:	f7f8 ff55 	bl	7b98 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    ecee:	b110      	cbz	r0, ecf6 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    ecf0:	e012      	b.n	ed18 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x4c>
    ecf2:	200c      	movs	r0, #12
    ecf4:	bd08      	pop	{r3, pc}
    ecf6:	9800      	ldr	r0, [sp, #0]
    ecf8:	8800      	ldrh	r0, [r0, #0]
    ecfa:	f7fe fd5a 	bl	d7b2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ecfe:	9800      	ldr	r0, [sp, #0]
    ed00:	2100      	movs	r1, #0
    ed02:	8800      	ldrh	r0, [r0, #0]
    ed04:	f7f5 faba 	bl	427c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ed08:	b120      	cbz	r0, ed14 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    ed0a:	f640 717f 	movw	r1, #3967	; 0xf7f
    ed0e:	2039      	movs	r0, #57	; 0x39
    ed10:	f7f5 f836 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed14:	f7f7 f966 	bl	5fe4 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>
    ed18:	2000      	movs	r0, #0
    ed1a:	bd08      	pop	{r3, pc}

0000ed1c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    ed1c:	b510      	push	{r4, lr}
    ed1e:	460b      	mov	r3, r1
    ed20:	2201      	movs	r2, #1
    ed22:	f100 0110 	add.w	r1, r0, #16
    ed26:	f7fe fe0a 	bl	d93e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ed2a:	2000      	movs	r0, #0
    ed2c:	bd10      	pop	{r4, pc}

0000ed2e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    ed2e:	b510      	push	{r4, lr}
    ed30:	2108      	movs	r1, #8
    ed32:	f7f5 f8cf 	bl	3ed4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ed36:	2000      	movs	r0, #0
    ed38:	bd10      	pop	{r4, pc}

0000ed3a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    ed3a:	b510      	push	{r4, lr}
    ed3c:	4604      	mov	r4, r0
    ed3e:	f000 fca3 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ed42:	b140      	cbz	r0, ed56 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    ed44:	20fb      	movs	r0, #251	; 0xfb
    ed46:	8020      	strh	r0, [r4, #0]
    ed48:	f640 0148 	movw	r1, #2120	; 0x848
    ed4c:	8061      	strh	r1, [r4, #2]
    ed4e:	80a0      	strh	r0, [r4, #4]
    ed50:	80e1      	strh	r1, [r4, #6]
    ed52:	2000      	movs	r0, #0
    ed54:	bd10      	pop	{r4, pc}
    ed56:	2001      	movs	r0, #1
    ed58:	bd10      	pop	{r4, pc}

0000ed5a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    ed5a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ed5c:	460d      	mov	r5, r1
    ed5e:	4606      	mov	r6, r0
    ed60:	f7fc f940 	bl	afe4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ed64:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ed68:	b300      	cbz	r0, edac <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    ed6a:	8830      	ldrh	r0, [r6, #0]
    ed6c:	4669      	mov	r1, sp
    ed6e:	f7fe fe22 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ed72:	2800      	cmp	r0, #0
    ed74:	d119      	bne.n	edaa <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    ed76:	9c01      	ldr	r4, [sp, #4]
    ed78:	2700      	movs	r7, #0
    ed7a:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    ed7e:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    ed82:	f000 fa94 	bl	f2ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    ed86:	70a8      	strb	r0, [r5, #2]
    ed88:	7860      	ldrb	r0, [r4, #1]
    ed8a:	f000 fa90 	bl	f2ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    ed8e:	70e8      	strb	r0, [r5, #3]
    ed90:	78a0      	ldrb	r0, [r4, #2]
    ed92:	f88d 0008 	strb.w	r0, [sp, #8]
    ed96:	9802      	ldr	r0, [sp, #8]
    ed98:	9002      	str	r0, [sp, #8]
    ed9a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ed9e:	3c6a      	subs	r4, #106	; 0x6a
    eda0:	2800      	cmp	r0, #0
    eda2:	d1ea      	bne.n	ed7a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    eda4:	8830      	ldrh	r0, [r6, #0]
    eda6:	8028      	strh	r0, [r5, #0]
    eda8:	2000      	movs	r0, #0
    edaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    edac:	2001      	movs	r0, #1
    edae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000edb0 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    edb0:	2108      	movs	r1, #8
    edb2:	7001      	strb	r1, [r0, #0]
    edb4:	2000      	movs	r0, #0
    edb6:	4770      	bx	lr

0000edb8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    edb8:	b510      	push	{r4, lr}
    edba:	4604      	mov	r4, r0
    edbc:	20d8      	movs	r0, #216	; 0xd8
    edbe:	7020      	strb	r0, [r4, #0]
    edc0:	f000 fc43 	bl	f64a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    edc4:	7060      	strb	r0, [r4, #1]
    edc6:	2000      	movs	r0, #0
    edc8:	bd10      	pop	{r4, pc}

0000edca <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    edca:	2108      	movs	r1, #8
    edcc:	7001      	strb	r1, [r0, #0]
    edce:	2000      	movs	r0, #0
    edd0:	4770      	bx	lr

0000edd2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    edd2:	b510      	push	{r4, lr}
    edd4:	4604      	mov	r4, r0
    edd6:	7800      	ldrb	r0, [r0, #0]
    edd8:	b108      	cbz	r0, edde <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    edda:	2801      	cmp	r0, #1
    eddc:	d110      	bne.n	ee00 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    edde:	f000 fc70 	bl	f6c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ede2:	b120      	cbz	r0, edee <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ede4:	f7f6 fc94 	bl	5710 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ede8:	b108      	cbz	r0, edee <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    edea:	200c      	movs	r0, #12
    edec:	bd10      	pop	{r4, pc}
    edee:	7820      	ldrb	r0, [r4, #0]
    edf0:	f7ff fe89 	bl	eb06 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    edf4:	1c61      	adds	r1, r4, #1
    edf6:	f7fe fd88 	bl	d90a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    edfa:	b108      	cbz	r0, ee00 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    edfc:	2000      	movs	r0, #0
    edfe:	bd10      	pop	{r4, pc}
    ee00:	2012      	movs	r0, #18
    ee02:	bd10      	pop	{r4, pc}

0000ee04 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ee04:	b510      	push	{r4, lr}
    ee06:	4604      	mov	r4, r0
    ee08:	f000 fd02 	bl	f810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ee0c:	b108      	cbz	r0, ee12 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ee0e:	200c      	movs	r0, #12
    ee10:	bd10      	pop	{r4, pc}
    ee12:	7820      	ldrb	r0, [r4, #0]
    ee14:	b108      	cbz	r0, ee1a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ee16:	2801      	cmp	r0, #1
    ee18:	d107      	bne.n	ee2a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ee1a:	f7ff fe74 	bl	eb06 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ee1e:	1c61      	adds	r1, r4, #1
    ee20:	f7fe fd82 	bl	d928 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ee24:	b108      	cbz	r0, ee2a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ee26:	2000      	movs	r0, #0
    ee28:	bd10      	pop	{r4, pc}
    ee2a:	2012      	movs	r0, #18
    ee2c:	bd10      	pop	{r4, pc}

0000ee2e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ee2e:	b510      	push	{r4, lr}
    ee30:	4604      	mov	r4, r0
    ee32:	f000 fc46 	bl	f6c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ee36:	b108      	cbz	r0, ee3c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ee38:	200c      	movs	r0, #12
    ee3a:	bd10      	pop	{r4, pc}
    ee3c:	7820      	ldrb	r0, [r4, #0]
    ee3e:	f000 0001 	and.w	r0, r0, #1
    ee42:	f7f6 fc5f 	bl	5704 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ee46:	2000      	movs	r0, #0
    ee48:	bd10      	pop	{r4, pc}

0000ee4a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ee4a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ee4c:	460d      	mov	r5, r1
    ee4e:	4604      	mov	r4, r0
    ee50:	f000 fc1a 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ee54:	b130      	cbz	r0, ee64 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ee56:	88a2      	ldrh	r2, [r4, #4]
    ee58:	f244 2090 	movw	r0, #17040	; 0x4290
    ee5c:	4282      	cmp	r2, r0
    ee5e:	d903      	bls.n	ee68 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ee60:	2012      	movs	r0, #18
    ee62:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ee64:	2001      	movs	r0, #1
    ee66:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ee68:	f640 0048 	movw	r0, #2120	; 0x848
    ee6c:	4282      	cmp	r2, r0
    ee6e:	d300      	bcc.n	ee72 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ee70:	4602      	mov	r2, r0
    ee72:	8820      	ldrh	r0, [r4, #0]
    ee74:	f8ad 0000 	strh.w	r0, [sp]
    ee78:	8860      	ldrh	r0, [r4, #2]
    ee7a:	f8ad 0002 	strh.w	r0, [sp, #2]
    ee7e:	f8ad 2004 	strh.w	r2, [sp, #4]
    ee82:	8860      	ldrh	r0, [r4, #2]
    ee84:	f8ad 0006 	strh.w	r0, [sp, #6]
    ee88:	f8ad 2008 	strh.w	r2, [sp, #8]
    ee8c:	8820      	ldrh	r0, [r4, #0]
    ee8e:	8028      	strh	r0, [r5, #0]
    ee90:	4668      	mov	r0, sp
    ee92:	f000 fc28 	bl	f6e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ee96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ee98 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    ee98:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ee9a:	4604      	mov	r4, r0
    ee9c:	f7fe fd75 	bl	d98a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    eea0:	b160      	cbz	r0, eebc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    eea2:	4620      	mov	r0, r4
    eea4:	f7f6 fef4 	bl	5c90 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    eea8:	4669      	mov	r1, sp
    eeaa:	2000      	movs	r0, #0
    eeac:	f7fe fc22 	bl	d6f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eeb0:	b150      	cbz	r0, eec8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    eeb2:	f241 0104 	movw	r1, #4100	; 0x1004
    eeb6:	2039      	movs	r0, #57	; 0x39
    eeb8:	f7f4 ff62 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eebc:	2012      	movs	r0, #18
    eebe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eec0:	9802      	ldr	r0, [sp, #8]
    eec2:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    eec6:	e000      	b.n	eeca <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    eec8:	2401      	movs	r4, #1
    eeca:	4668      	mov	r0, sp
    eecc:	f7f5 f988 	bl	41e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eed0:	2800      	cmp	r0, #0
    eed2:	d0f5      	beq.n	eec0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    eed4:	2000      	movs	r0, #0
    eed6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eed8 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    eed8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eeda:	4604      	mov	r4, r0
    eedc:	f7fc f882 	bl	afe4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eee0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    eee4:	b1b0      	cbz	r0, ef14 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    eee6:	f10d 0007 	add.w	r0, sp, #7
    eeea:	9000      	str	r0, [sp, #0]
    eeec:	7922      	ldrb	r2, [r4, #4]
    eeee:	78e1      	ldrb	r1, [r4, #3]
    eef0:	78a0      	ldrb	r0, [r4, #2]
    eef2:	f10d 0306 	add.w	r3, sp, #6
    eef6:	f000 fc74 	bl	f7e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    eefa:	2800      	cmp	r0, #0
    eefc:	d109      	bne.n	ef12 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    eefe:	8820      	ldrh	r0, [r4, #0]
    ef00:	f8ad 0004 	strh.w	r0, [sp, #4]
    ef04:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ef08:	f8ad 0008 	strh.w	r0, [sp, #8]
    ef0c:	a801      	add	r0, sp, #4
    ef0e:	f000 f8f8 	bl	f102 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ef12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ef14:	2001      	movs	r0, #1
    ef16:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ef18 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    ef18:	b510      	push	{r4, lr}
    ef1a:	4604      	mov	r4, r0
    ef1c:	f000 fbd1 	bl	f6c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ef20:	b120      	cbz	r0, ef2c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ef22:	f7f6 fbf5 	bl	5710 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ef26:	b108      	cbz	r0, ef2c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ef28:	200c      	movs	r0, #12
    ef2a:	bd10      	pop	{r4, pc}
    ef2c:	7820      	ldrb	r0, [r4, #0]
    ef2e:	f7ff fdea 	bl	eb06 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ef32:	79e2      	ldrb	r2, [r4, #7]
    ef34:	1c61      	adds	r1, r4, #1
    ef36:	f7f6 fb85 	bl	5644 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ef3a:	b108      	cbz	r0, ef40 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ef3c:	2000      	movs	r0, #0
    ef3e:	bd10      	pop	{r4, pc}
    ef40:	2002      	movs	r0, #2
    ef42:	bd10      	pop	{r4, pc}

0000ef44 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ef44:	b510      	push	{r4, lr}
    ef46:	4604      	mov	r4, r0
    ef48:	2001      	movs	r0, #1
    ef4a:	f000 f9bb 	bl	f2c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    ef4e:	b128      	cbz	r0, ef5c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ef50:	4621      	mov	r1, r4
    ef52:	2001      	movs	r0, #1
    ef54:	f7f5 fd7e 	bl	4a54 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ef58:	2000      	movs	r0, #0
    ef5a:	bd10      	pop	{r4, pc}
    ef5c:	200c      	movs	r0, #12
    ef5e:	bd10      	pop	{r4, pc}

0000ef60 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ef60:	b510      	push	{r4, lr}
    ef62:	8800      	ldrh	r0, [r0, #0]
    ef64:	f7f6 fc62 	bl	582c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ef68:	b108      	cbz	r0, ef6e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ef6a:	2000      	movs	r0, #0
    ef6c:	bd10      	pop	{r4, pc}
    ef6e:	2030      	movs	r0, #48	; 0x30
    ef70:	bd10      	pop	{r4, pc}

0000ef72 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    ef72:	b51c      	push	{r2, r3, r4, lr}
    ef74:	7801      	ldrb	r1, [r0, #0]
    ef76:	f88d 1000 	strb.w	r1, [sp]
    ef7a:	7840      	ldrb	r0, [r0, #1]
    ef7c:	f88d 0001 	strb.w	r0, [sp, #1]
    ef80:	2000      	movs	r0, #0
    ef82:	f8ad 0002 	strh.w	r0, [sp, #2]
    ef86:	f8ad 0004 	strh.w	r0, [sp, #4]
    ef8a:	4601      	mov	r1, r0
    ef8c:	4668      	mov	r0, sp
    ef8e:	f000 f9e4 	bl	f35a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    ef92:	2800      	cmp	r0, #0
    ef94:	d102      	bne.n	ef9c <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    ef96:	4668      	mov	r0, sp
    ef98:	f000 f9c3 	bl	f322 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    ef9c:	bd1c      	pop	{r2, r3, r4, pc}

0000ef9e <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    ef9e:	b500      	push	{lr}
    efa0:	b087      	sub	sp, #28
    efa2:	7941      	ldrb	r1, [r0, #5]
    efa4:	f88d 1000 	strb.w	r1, [sp]
    efa8:	7981      	ldrb	r1, [r0, #6]
    efaa:	f88d 1001 	strb.w	r1, [sp, #1]
    efae:	2101      	movs	r1, #1
    efb0:	f88d 1002 	strb.w	r1, [sp, #2]
    efb4:	7801      	ldrb	r1, [r0, #0]
    efb6:	f88d 1003 	strb.w	r1, [sp, #3]
    efba:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    efbe:	f240 2271 	movw	r2, #625	; 0x271
    efc2:	4351      	muls	r1, r2
    efc4:	9102      	str	r1, [sp, #8]
    efc6:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    efca:	4350      	muls	r0, r2
    efcc:	9004      	str	r0, [sp, #16]
    efce:	2007      	movs	r0, #7
    efd0:	f88d 0018 	strb.w	r0, [sp, #24]
    efd4:	2000      	movs	r0, #0
    efd6:	f88d 0019 	strb.w	r0, [sp, #25]
    efda:	9804      	ldr	r0, [sp, #16]
    efdc:	f7fb ff24 	bl	ae28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    efe0:	b140      	cbz	r0, eff4 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    efe2:	9802      	ldr	r0, [sp, #8]
    efe4:	f7fb ff14 	bl	ae10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    efe8:	b120      	cbz	r0, eff4 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    efea:	4668      	mov	r0, sp
    efec:	f7fb fda8 	bl	ab40 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    eff0:	b007      	add	sp, #28
    eff2:	bd00      	pop	{pc}
    eff4:	2030      	movs	r0, #48	; 0x30
    eff6:	e7fb      	b.n	eff0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000eff8 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    eff8:	b570      	push	{r4, r5, r6, lr}
    effa:	4605      	mov	r5, r0
    effc:	8800      	ldrh	r0, [r0, #0]
    effe:	2100      	movs	r1, #0
    f000:	f7fe fb6f 	bl	d6e2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f004:	0004      	movs	r4, r0
    f006:	d007      	beq.n	f018 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f008:	f000 fb47 	bl	f69a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f00c:	b120      	cbz	r0, f018 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f00e:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    f012:	b118      	cbz	r0, f01c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f014:	203a      	movs	r0, #58	; 0x3a
    f016:	bd70      	pop	{r4, r5, r6, pc}
    f018:	2002      	movs	r0, #2
    f01a:	bd70      	pop	{r4, r5, r6, pc}
    f01c:	2100      	movs	r1, #0
    f01e:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    f022:	f7ff fd66 	bl	eaf2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f026:	2801      	cmp	r0, #1
    f028:	d001      	beq.n	f02e <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f02a:	201a      	movs	r0, #26
    f02c:	bd70      	pop	{r4, r5, r6, pc}
    f02e:	f8d5 1002 	ldr.w	r1, [r5, #2]
    f032:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    f036:	f8d5 1006 	ldr.w	r1, [r5, #6]
    f03a:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    f03e:	8969      	ldrh	r1, [r5, #10]
    f040:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    f044:	2210      	movs	r2, #16
    f046:	f105 010c 	add.w	r1, r5, #12
    f04a:	f204 1065 	addw	r0, r4, #357	; 0x165
    f04e:	f7fd faa7 	bl	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f052:	2001      	movs	r0, #1
    f054:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    f058:	2000      	movs	r0, #0
    f05a:	bd70      	pop	{r4, r5, r6, pc}

0000f05c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f05c:	b51c      	push	{r2, r3, r4, lr}
    f05e:	4604      	mov	r4, r0
    f060:	f000 fb12 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f064:	b178      	cbz	r0, f086 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f066:	8820      	ldrh	r0, [r4, #0]
    f068:	f8ad 0000 	strh.w	r0, [sp]
    f06c:	8860      	ldrh	r0, [r4, #2]
    f06e:	f8ad 0002 	strh.w	r0, [sp, #2]
    f072:	8820      	ldrh	r0, [r4, #0]
    f074:	f8ad 0004 	strh.w	r0, [sp, #4]
    f078:	8860      	ldrh	r0, [r4, #2]
    f07a:	f8ad 0006 	strh.w	r0, [sp, #6]
    f07e:	4668      	mov	r0, sp
    f080:	f7fb ff08 	bl	ae94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1dc>
    f084:	bd1c      	pop	{r2, r3, r4, pc}
    f086:	2001      	movs	r0, #1
    f088:	bd1c      	pop	{r2, r3, r4, pc}

0000f08a <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f08a:	b510      	push	{r4, lr}
    f08c:	f7f5 fd06 	bl	4a9c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f090:	2000      	movs	r0, #0
    f092:	bd10      	pop	{r4, pc}

0000f094 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f094:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f096:	460c      	mov	r4, r1
    f098:	4605      	mov	r5, r0
    f09a:	f000 faf5 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f09e:	b160      	cbz	r0, f0ba <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f0a0:	4669      	mov	r1, sp
    f0a2:	4628      	mov	r0, r5
    f0a4:	f7fe fc87 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f0a8:	2800      	cmp	r0, #0
    f0aa:	d105      	bne.n	f0b8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f0ac:	2101      	movs	r1, #1
    f0ae:	4622      	mov	r2, r4
    f0b0:	9801      	ldr	r0, [sp, #4]
    f0b2:	f000 fa74 	bl	f59e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f0b6:	2000      	movs	r0, #0
    f0b8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f0ba:	2001      	movs	r0, #1
    f0bc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f0be <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f0be:	b510      	push	{r4, lr}
    f0c0:	4604      	mov	r4, r0
    f0c2:	2000      	movs	r0, #0
    f0c4:	f000 f8fe 	bl	f2c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    f0c8:	b128      	cbz	r0, f0d6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f0ca:	4621      	mov	r1, r4
    f0cc:	2000      	movs	r0, #0
    f0ce:	f7f5 fcc1 	bl	4a54 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f0d2:	2000      	movs	r0, #0
    f0d4:	bd10      	pop	{r4, pc}
    f0d6:	200c      	movs	r0, #12
    f0d8:	bd10      	pop	{r4, pc}

0000f0da <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f0da:	b510      	push	{r4, lr}
    f0dc:	7800      	ldrb	r0, [r0, #0]
    f0de:	f000 0001 	and.w	r0, r0, #1
    f0e2:	f7f8 fd61 	bl	7ba8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    f0e6:	2000      	movs	r0, #0
    f0e8:	bd10      	pop	{r4, pc}

0000f0ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f0ea:	b510      	push	{r4, lr}
    f0ec:	4604      	mov	r4, r0
    f0ee:	f000 facb 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f0f2:	b120      	cbz	r0, f0fe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f0f4:	4620      	mov	r0, r4
    f0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0fa:	f000 baf4 	b.w	f6e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    f0fe:	2001      	movs	r0, #1
    f100:	bd10      	pop	{r4, pc}

0000f102 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f102:	b510      	push	{r4, lr}
    f104:	4604      	mov	r4, r0
    f106:	8880      	ldrh	r0, [r0, #4]
    f108:	b128      	cbz	r0, f116 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f10a:	2801      	cmp	r0, #1
    f10c:	d003      	beq.n	f116 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f10e:	2802      	cmp	r0, #2
    f110:	d001      	beq.n	f116 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f112:	2012      	movs	r0, #18
    f114:	bd10      	pop	{r4, pc}
    f116:	78e0      	ldrb	r0, [r4, #3]
    f118:	f000 f8e0 	bl	f2dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f11c:	b148      	cbz	r0, f132 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f11e:	78a0      	ldrb	r0, [r4, #2]
    f120:	f000 f8dc 	bl	f2dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f124:	b128      	cbz	r0, f132 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f126:	4620      	mov	r0, r4
    f128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f12c:	2101      	movs	r1, #1
    f12e:	f7fb bd5d 	b.w	abec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f132:	2011      	movs	r0, #17
    f134:	bd10      	pop	{r4, pc}

0000f136 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f136:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f138:	460c      	mov	r4, r1
    f13a:	4605      	mov	r5, r0
    f13c:	8800      	ldrh	r0, [r0, #0]
    f13e:	4669      	mov	r1, sp
    f140:	f7fe fc39 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f144:	2800      	cmp	r0, #0
    f146:	d106      	bne.n	f156 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f148:	9801      	ldr	r0, [sp, #4]
    f14a:	8829      	ldrh	r1, [r5, #0]
    f14c:	8021      	strh	r1, [r4, #0]
    f14e:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    f152:	8060      	strh	r0, [r4, #2]
    f154:	2000      	movs	r0, #0
    f156:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f158 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f158:	b510      	push	{r4, lr}
    f15a:	4604      	mov	r4, r0
    f15c:	4601      	mov	r1, r0
    f15e:	2000      	movs	r0, #0
    f160:	f7f5 fc60 	bl	4a24 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f164:	b910      	cbnz	r0, f16c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f166:	2000      	movs	r0, #0
    f168:	6020      	str	r0, [r4, #0]
    f16a:	80a0      	strh	r0, [r4, #4]
    f16c:	2000      	movs	r0, #0
    f16e:	bd10      	pop	{r4, pc}

0000f170 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f170:	b51c      	push	{r2, r3, r4, lr}
    f172:	8800      	ldrh	r0, [r0, #0]
    f174:	4669      	mov	r1, sp
    f176:	f7fe fc1e 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f17a:	b968      	cbnz	r0, f198 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f17c:	4668      	mov	r0, sp
    f17e:	f000 fa89 	bl	f694 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    f182:	b148      	cbz	r0, f198 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f184:	9801      	ldr	r0, [sp, #4]
    f186:	2201      	movs	r2, #1
    f188:	4601      	mov	r1, r0
    f18a:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    f18e:	3078      	adds	r0, #120	; 0x78
    f190:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    f194:	b92b      	cbnz	r3, f1a2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f196:	e001      	b.n	f19c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    f198:	2002      	movs	r0, #2
    f19a:	bd1c      	pop	{r2, r3, r4, pc}
    f19c:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    f1a0:	b10b      	cbz	r3, f1a6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    f1a2:	203a      	movs	r0, #58	; 0x3a
    f1a4:	bd1c      	pop	{r2, r3, r4, pc}
    f1a6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    f1aa:	079b      	lsls	r3, r3, #30
    f1ac:	d100      	bne.n	f1b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    f1ae:	700a      	strb	r2, [r1, #0]
    f1b0:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    f1b4:	2000      	movs	r0, #0
    f1b6:	bd1c      	pop	{r2, r3, r4, pc}

0000f1b8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f1b8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f1ba:	460c      	mov	r4, r1
    f1bc:	4605      	mov	r5, r0
    f1be:	8800      	ldrh	r0, [r0, #0]
    f1c0:	4669      	mov	r1, sp
    f1c2:	f7fe fbf8 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f1c6:	b108      	cbz	r0, f1cc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f1c8:	2002      	movs	r0, #2
    f1ca:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f1cc:	78a8      	ldrb	r0, [r5, #2]
    f1ce:	b130      	cbz	r0, f1de <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f1d0:	f000 fa3b 	bl	f64a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    f1d4:	70a0      	strb	r0, [r4, #2]
    f1d6:	8828      	ldrh	r0, [r5, #0]
    f1d8:	8020      	strh	r0, [r4, #0]
    f1da:	2000      	movs	r0, #0
    f1dc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f1de:	9801      	ldr	r0, [sp, #4]
    f1e0:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f1e4:	e7f6      	b.n	f1d4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f1e6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f1e6:	b510      	push	{r4, lr}
    f1e8:	f7fb fe92 	bl	af10 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f1ec:	2000      	movs	r0, #0
    f1ee:	bd10      	pop	{r4, pc}

0000f1f0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f1f0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f1f4:	4604      	mov	r4, r0
    f1f6:	8840      	ldrh	r0, [r0, #2]
    f1f8:	460d      	mov	r5, r1
    f1fa:	b1b8      	cbz	r0, f22c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f1fc:	8820      	ldrh	r0, [r4, #0]
    f1fe:	4669      	mov	r1, sp
    f200:	f7fe fbd9 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f204:	2800      	cmp	r0, #0
    f206:	d10f      	bne.n	f228 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f208:	8820      	ldrh	r0, [r4, #0]
    f20a:	8028      	strh	r0, [r5, #0]
    f20c:	9e01      	ldr	r6, [sp, #4]
    f20e:	f106 050c 	add.w	r5, r6, #12
    f212:	3678      	adds	r6, #120	; 0x78
    f214:	682f      	ldr	r7, [r5, #0]
    f216:	8862      	ldrh	r2, [r4, #2]
    f218:	4639      	mov	r1, r7
    f21a:	4630      	mov	r0, r6
    f21c:	f7fe fd8c 	bl	dd38 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f220:	6828      	ldr	r0, [r5, #0]
    f222:	42b8      	cmp	r0, r7
    f224:	d1f6      	bne.n	f214 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f226:	2000      	movs	r0, #0
    f228:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f22c:	2012      	movs	r0, #18
    f22e:	e7fb      	b.n	f228 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f230 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f230:	f7fb bd42 	b.w	acb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f234:	b510      	push	{r4, lr}
    f236:	2008      	movs	r0, #8
    f238:	f7fb feca 	bl	afd0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f240:	f7f9 bccc 	b.w	8bdc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000f244 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    f244:	b510      	push	{r4, lr}
    f246:	4604      	mov	r4, r0
    f248:	2000      	movs	r0, #0
    f24a:	8822      	ldrh	r2, [r4, #0]
    f24c:	b086      	sub	sp, #24
    f24e:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    f252:	39ff      	subs	r1, #255	; 0xff
    f254:	d008      	beq.n	f268 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    f256:	a903      	add	r1, sp, #12
    f258:	4610      	mov	r0, r2
    f25a:	f7fe fbac 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f25e:	b110      	cbz	r0, f266 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    f260:	2002      	movs	r0, #2
    f262:	b006      	add	sp, #24
    f264:	bd10      	pop	{r4, pc}
    f266:	9804      	ldr	r0, [sp, #16]
    f268:	8921      	ldrh	r1, [r4, #8]
    f26a:	89a3      	ldrh	r3, [r4, #12]
    f26c:	8962      	ldrh	r2, [r4, #10]
    f26e:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f272:	88e3      	ldrh	r3, [r4, #6]
    f274:	88a2      	ldrh	r2, [r4, #4]
    f276:	8861      	ldrh	r1, [r4, #2]
    f278:	f000 f966 	bl	f548 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f27c:	b108      	cbz	r0, f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    f27e:	2000      	movs	r0, #0
    f280:	e7ef      	b.n	f262 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f282:	2030      	movs	r0, #48	; 0x30
    f284:	e7ed      	b.n	f262 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f286:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f28a:	4288      	cmp	r0, r1
    f28c:	d303      	bcc.n	f296 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    f28e:	f640 0148 	movw	r1, #2120	; 0x848
    f292:	4288      	cmp	r0, r1
    f294:	d300      	bcc.n	f298 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    f296:	4608      	mov	r0, r1
    f298:	4770      	bx	lr
    f29a:	07c1      	lsls	r1, r0, #31
    f29c:	d001      	beq.n	f2a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    f29e:	2001      	movs	r0, #1
    f2a0:	4770      	bx	lr
    f2a2:	0780      	lsls	r0, r0, #30
    f2a4:	d501      	bpl.n	f2aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    f2a6:	2002      	movs	r0, #2
    f2a8:	4770      	bx	lr
    f2aa:	2000      	movs	r0, #0
    f2ac:	4770      	bx	lr
    f2ae:	b510      	push	{r4, lr}
    f2b0:	2801      	cmp	r0, #1
    f2b2:	d006      	beq.n	f2c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f2b4:	2802      	cmp	r0, #2
    f2b6:	d004      	beq.n	f2c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f2b8:	f240 2163 	movw	r1, #611	; 0x263
    f2bc:	2006      	movs	r0, #6
    f2be:	f7f4 fd5f 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2c2:	bd10      	pop	{r4, pc}
    f2c4:	b510      	push	{r4, lr}
    f2c6:	f000 fa03 	bl	f6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f2ca:	b128      	cbz	r0, f2d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f2cc:	f7f7 faec 	bl	68a8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    f2d0:	2801      	cmp	r0, #1
    f2d2:	d001      	beq.n	f2d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f2d4:	2000      	movs	r0, #0
    f2d6:	bd10      	pop	{r4, pc}
    f2d8:	2001      	movs	r0, #1
    f2da:	bd10      	pop	{r4, pc}
    f2dc:	b510      	push	{r4, lr}
    f2de:	0004      	movs	r4, r0
    f2e0:	d005      	beq.n	f2ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f2e2:	f7fb fe85 	bl	aff0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f2e6:	4384      	bics	r4, r0
    f2e8:	d001      	beq.n	f2ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f2ea:	2000      	movs	r0, #0
    f2ec:	bd10      	pop	{r4, pc}
    f2ee:	2001      	movs	r0, #1
    f2f0:	bd10      	pop	{r4, pc}
    f2f2:	28fb      	cmp	r0, #251	; 0xfb
    f2f4:	d803      	bhi.n	f2fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
    f2f6:	f640 0048 	movw	r0, #2120	; 0x848
    f2fa:	4281      	cmp	r1, r0
    f2fc:	d901      	bls.n	f302 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
    f2fe:	2011      	movs	r0, #17
    f300:	4770      	bx	lr
    f302:	2000      	movs	r0, #0
    f304:	4770      	bx	lr
    f306:	381b      	subs	r0, #27
    f308:	28e1      	cmp	r0, #225	; 0xe1
    f30a:	d206      	bcs.n	f31a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f30c:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f310:	d303      	bcc.n	f31a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f312:	f244 2090 	movw	r0, #17040	; 0x4290
    f316:	4281      	cmp	r1, r0
    f318:	d901      	bls.n	f31e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
    f31a:	2012      	movs	r0, #18
    f31c:	4770      	bx	lr
    f31e:	2000      	movs	r0, #0
    f320:	4770      	bx	lr
    f322:	b510      	push	{r4, lr}
    f324:	4604      	mov	r4, r0
    f326:	7800      	ldrb	r0, [r0, #0]
    f328:	2801      	cmp	r0, #1
    f32a:	d009      	beq.n	f340 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
    f32c:	f7f8 fcc8 	bl	7cc0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f330:	2805      	cmp	r0, #5
    f332:	d003      	beq.n	f33c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
    f334:	f7f8 fc8e 	bl	7c54 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    f338:	2800      	cmp	r0, #0
    f33a:	d000      	beq.n	f33e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
    f33c:	200c      	movs	r0, #12
    f33e:	bd10      	pop	{r4, pc}
    f340:	f7f7 fa40 	bl	67c4 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    f344:	b138      	cbz	r0, f356 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
    f346:	f7f7 f8b9 	bl	64bc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f34a:	88a1      	ldrh	r1, [r4, #4]
    f34c:	8860      	ldrh	r0, [r4, #2]
    f34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f352:	f7f8 bc43 	b.w	7bdc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    f356:	2012      	movs	r0, #18
    f358:	bd10      	pop	{r4, pc}
    f35a:	7802      	ldrb	r2, [r0, #0]
    f35c:	2a01      	cmp	r2, #1
    f35e:	d001      	beq.n	f364 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
    f360:	b1ba      	cbz	r2, f392 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f362:	e018      	b.n	f396 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f364:	7842      	ldrb	r2, [r0, #1]
    f366:	b13a      	cbz	r2, f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f368:	2a01      	cmp	r2, #1
    f36a:	d005      	beq.n	f378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f36c:	2a02      	cmp	r2, #2
    f36e:	d112      	bne.n	f396 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f370:	b189      	cbz	r1, f396 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f372:	8881      	ldrh	r1, [r0, #4]
    f374:	b179      	cbz	r1, f396 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f376:	e000      	b.n	f37a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
    f378:	b159      	cbz	r1, f392 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f37a:	8841      	ldrh	r1, [r0, #2]
    f37c:	b149      	cbz	r1, f392 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f37e:	8880      	ldrh	r0, [r0, #4]
    f380:	b138      	cbz	r0, f392 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f382:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f386:	0049      	lsls	r1, r1, #1
    f388:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f38c:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    f390:	d201      	bcs.n	f396 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f392:	2000      	movs	r0, #0
    f394:	4770      	bx	lr
    f396:	2012      	movs	r0, #18
    f398:	4770      	bx	lr
    f39a:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    f39e:	7a45      	ldrb	r5, [r0, #9]
    f3a0:	4604      	mov	r4, r0
    f3a2:	0768      	lsls	r0, r5, #29
    f3a4:	d06c      	beq.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3a6:	08e8      	lsrs	r0, r5, #3
    f3a8:	d16a      	bne.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3aa:	2d02      	cmp	r5, #2
    f3ac:	d068      	beq.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3ae:	f7fb fe1f 	bl	aff0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f3b2:	ea25 0000 	bic.w	r0, r5, r0
    f3b6:	0740      	lsls	r0, r0, #29
    f3b8:	d102      	bne.n	f3c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
    f3ba:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f3be:	b110      	cbz	r0, f3c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
    f3c0:	2011      	movs	r0, #17
    f3c2:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    f3c6:	2d01      	cmp	r5, #1
    f3c8:	d15a      	bne.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3ca:	27ff      	movs	r7, #255	; 0xff
    f3cc:	2101      	movs	r1, #1
    f3ce:	69a0      	ldr	r0, [r4, #24]
    f3d0:	f7fb fd4a 	bl	ae68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    f3d4:	b3e8      	cbz	r0, f452 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f3d6:	46a8      	mov	r8, r5
    f3d8:	2600      	movs	r6, #0
    f3da:	4635      	mov	r5, r6
    f3dc:	42bd      	cmp	r5, r7
    f3de:	d02f      	beq.n	f440 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f3e0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    f3e4:	6988      	ldr	r0, [r1, #24]
    f3e6:	68c9      	ldr	r1, [r1, #12]
    f3e8:	4288      	cmp	r0, r1
    f3ea:	d849      	bhi.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f3ec:	4406      	add	r6, r0
    f3ee:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    f3f2:	4681      	mov	r9, r0
    f3f4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    f3f6:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    f3fa:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    f3fc:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f400:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f402:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    f404:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    f406:	2000      	movs	r0, #0
    f408:	f000 f89e 	bl	f548 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f40c:	b308      	cbz	r0, f452 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f40e:	b1bd      	cbz	r5, f440 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f410:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    f414:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    f418:	4281      	cmp	r1, r0
    f41a:	d131      	bne.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f41c:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    f420:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    f424:	4281      	cmp	r1, r0
    f426:	d12b      	bne.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f428:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    f42c:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    f430:	4281      	cmp	r1, r0
    f432:	d125      	bne.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f434:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    f438:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    f43c:	4281      	cmp	r1, r0
    f43e:	d11f      	bne.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f440:	1c6d      	adds	r5, r5, #1
    f442:	b2ed      	uxtb	r5, r5
    f444:	4545      	cmp	r5, r8
    f446:	d3c9      	bcc.n	f3dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
    f448:	68e0      	ldr	r0, [r4, #12]
    f44a:	42b0      	cmp	r0, r6
    f44c:	d318      	bcc.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f44e:	7820      	ldrb	r0, [r4, #0]
    f450:	e000      	b.n	f454 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
    f452:	e003      	b.n	f45c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
    f454:	b120      	cbz	r0, f460 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
    f456:	2801      	cmp	r0, #1
    f458:	d112      	bne.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f45a:	e004      	b.n	f466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
    f45c:	2030      	movs	r0, #48	; 0x30
    f45e:	e7b0      	b.n	f3c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f460:	78a0      	ldrb	r0, [r4, #2]
    f462:	2800      	cmp	r0, #0
    f464:	d1f7      	bne.n	f456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
    f466:	7860      	ldrb	r0, [r4, #1]
    f468:	b128      	cbz	r0, f476 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f46a:	2801      	cmp	r0, #1
    f46c:	d003      	beq.n	f476 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f46e:	2802      	cmp	r0, #2
    f470:	d001      	beq.n	f476 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f472:	2803      	cmp	r0, #3
    f474:	d104      	bne.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f476:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f47a:	b108      	cbz	r0, f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f47c:	2807      	cmp	r0, #7
    f47e:	d901      	bls.n	f484 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    f480:	2012      	movs	r0, #18
    f482:	e79e      	b.n	f3c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f484:	2000      	movs	r0, #0
    f486:	e79c      	b.n	f3c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f488:	b570      	push	{r4, r5, r6, lr}
    f48a:	4604      	mov	r4, r0
    f48c:	7800      	ldrb	r0, [r0, #0]
    f48e:	2500      	movs	r5, #0
    f490:	2801      	cmp	r0, #1
    f492:	d004      	beq.n	f49e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f494:	b118      	cbz	r0, f49e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f496:	2802      	cmp	r0, #2
    f498:	d001      	beq.n	f49e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f49a:	2803      	cmp	r0, #3
    f49c:	d139      	bne.n	f512 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f49e:	7860      	ldrb	r0, [r4, #1]
    f4a0:	b128      	cbz	r0, f4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f4a2:	2801      	cmp	r0, #1
    f4a4:	d003      	beq.n	f4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f4a6:	2802      	cmp	r0, #2
    f4a8:	d001      	beq.n	f4ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f4aa:	2803      	cmp	r0, #3
    f4ac:	d131      	bne.n	f512 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f4ae:	7e60      	ldrb	r0, [r4, #25]
    f4b0:	b948      	cbnz	r0, f4c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    f4b2:	78a0      	ldrb	r0, [r4, #2]
    f4b4:	2801      	cmp	r0, #1
    f4b6:	d12c      	bne.n	f512 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f4b8:	f7fb fd9a 	bl	aff0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f4bc:	4601      	mov	r1, r0
    f4be:	78a0      	ldrb	r0, [r4, #2]
    f4c0:	ea30 0101 	bics.w	r1, r0, r1
    f4c4:	d001      	beq.n	f4ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
    f4c6:	2011      	movs	r0, #17
    f4c8:	bd70      	pop	{r4, r5, r6, pc}
    f4ca:	07c0      	lsls	r0, r0, #31
    f4cc:	d006      	beq.n	f4dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
    f4ce:	78e0      	ldrb	r0, [r4, #3]
    f4d0:	2301      	movs	r3, #1
    f4d2:	6922      	ldr	r2, [r4, #16]
    f4d4:	68a1      	ldr	r1, [r4, #8]
    f4d6:	f000 f820 	bl	f51a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f4da:	4605      	mov	r5, r0
    f4dc:	78a0      	ldrb	r0, [r4, #2]
    f4de:	0780      	lsls	r0, r0, #30
    f4e0:	d506      	bpl.n	f4f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    f4e2:	78e0      	ldrb	r0, [r4, #3]
    f4e4:	2302      	movs	r3, #2
    f4e6:	6922      	ldr	r2, [r4, #16]
    f4e8:	68a1      	ldr	r1, [r4, #8]
    f4ea:	f000 f816 	bl	f51a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f4ee:	4305      	orrs	r5, r0
    f4f0:	78a0      	ldrb	r0, [r4, #2]
    f4f2:	0740      	lsls	r0, r0, #29
    f4f4:	d506      	bpl.n	f504 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
    f4f6:	78e0      	ldrb	r0, [r4, #3]
    f4f8:	2304      	movs	r3, #4
    f4fa:	6922      	ldr	r2, [r4, #16]
    f4fc:	68a1      	ldr	r1, [r4, #8]
    f4fe:	f000 f80c 	bl	f51a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f502:	4305      	orrs	r5, r0
    f504:	b10d      	cbz	r5, f50a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
    f506:	4628      	mov	r0, r5
    f508:	bd70      	pop	{r4, r5, r6, pc}
    f50a:	7e20      	ldrb	r0, [r4, #24]
    f50c:	b108      	cbz	r0, f512 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f50e:	2807      	cmp	r0, #7
    f510:	d901      	bls.n	f516 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
    f512:	2012      	movs	r0, #18
    f514:	bd70      	pop	{r4, r5, r6, pc}
    f516:	2000      	movs	r0, #0
    f518:	bd70      	pop	{r4, r5, r6, pc}
    f51a:	b570      	push	{r4, r5, r6, lr}
    f51c:	4614      	mov	r4, r2
    f51e:	460d      	mov	r5, r1
    f520:	b108      	cbz	r0, f526 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
    f522:	2801      	cmp	r0, #1
    f524:	d10a      	bne.n	f53c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
    f526:	4619      	mov	r1, r3
    f528:	4610      	mov	r0, r2
    f52a:	f7fb fc9d 	bl	ae68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    f52e:	b138      	cbz	r0, f540 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f530:	4628      	mov	r0, r5
    f532:	f7fb fc61 	bl	adf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x140>
    f536:	b118      	cbz	r0, f540 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f538:	42ac      	cmp	r4, r5
    f53a:	d903      	bls.n	f544 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    f53c:	2012      	movs	r0, #18
    f53e:	bd70      	pop	{r4, r5, r6, pc}
    f540:	2030      	movs	r0, #48	; 0x30
    f542:	bd70      	pop	{r4, r5, r6, pc}
    f544:	2000      	movs	r0, #0
    f546:	bd70      	pop	{r4, r5, r6, pc}
    f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f54c:	461d      	mov	r5, r3
    f54e:	4610      	mov	r0, r2
    f550:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    f554:	1f8b      	subs	r3, r1, #6
    f556:	f640 427a 	movw	r2, #3194	; 0xc7a
    f55a:	9e08      	ldr	r6, [sp, #32]
    f55c:	4293      	cmp	r3, r2
    f55e:	d81c      	bhi.n	f59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f560:	1f83      	subs	r3, r0, #6
    f562:	4293      	cmp	r3, r2
    f564:	d819      	bhi.n	f59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f566:	4281      	cmp	r1, r0
    f568:	d817      	bhi.n	f59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f56a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f56e:	d214      	bcs.n	f59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f570:	f1a4 010a 	sub.w	r1, r4, #10
    f574:	1f12      	subs	r2, r2, #4
    f576:	4291      	cmp	r1, r2
    f578:	d80f      	bhi.n	f59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f57a:	f7fe fa28 	bl	d9ce <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f57e:	1c6d      	adds	r5, r5, #1
    f580:	4368      	muls	r0, r5
    f582:	f240 2171 	movw	r1, #625	; 0x271
    f586:	0040      	lsls	r0, r0, #1
    f588:	434c      	muls	r4, r1
    f58a:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    f58e:	d204      	bcs.n	f59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f590:	42b7      	cmp	r7, r6
    f592:	d802      	bhi.n	f59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f594:	2001      	movs	r0, #1
    f596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f59a:	2000      	movs	r0, #0
    f59c:	e7fb      	b.n	f596 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
    f59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5a2:	4606      	mov	r6, r0
    f5a4:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f5a8:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f5ac:	4615      	mov	r5, r2
    f5ae:	302c      	adds	r0, #44	; 0x2c
    f5b0:	f7f8 fb00 	bl	7bb4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    f5b4:	4680      	mov	r8, r0
    f5b6:	2102      	movs	r1, #2
    f5b8:	f7fe fac8 	bl	db4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f5bc:	4287      	cmp	r7, r0
    f5be:	d200      	bcs.n	f5c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    f5c0:	4638      	mov	r0, r7
    f5c2:	4607      	mov	r7, r0
    f5c4:	2102      	movs	r1, #2
    f5c6:	4640      	mov	r0, r8
    f5c8:	f7fe fac0 	bl	db4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f5cc:	4284      	cmp	r4, r0
    f5ce:	d200      	bcs.n	f5d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    f5d0:	4620      	mov	r0, r4
    f5d2:	8831      	ldrh	r1, [r6, #0]
    f5d4:	8029      	strh	r1, [r5, #0]
    f5d6:	2f1b      	cmp	r7, #27
    f5d8:	d913      	bls.n	f602 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    f5da:	2ffb      	cmp	r7, #251	; 0xfb
    f5dc:	d300      	bcc.n	f5e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f5de:	27fb      	movs	r7, #251	; 0xfb
    f5e0:	806f      	strh	r7, [r5, #2]
    f5e2:	281b      	cmp	r0, #27
    f5e4:	d90f      	bls.n	f606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
    f5e6:	28fb      	cmp	r0, #251	; 0xfb
    f5e8:	d300      	bcc.n	f5ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f5ea:	20fb      	movs	r0, #251	; 0xfb
    f5ec:	80e8      	strh	r0, [r5, #6]
    f5ee:	4640      	mov	r0, r8
    f5f0:	f7ff fe49 	bl	f286 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f5f4:	80a8      	strh	r0, [r5, #4]
    f5f6:	4640      	mov	r0, r8
    f5f8:	f7ff fe45 	bl	f286 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f5fc:	8128      	strh	r0, [r5, #8]
    f5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f602:	271b      	movs	r7, #27
    f604:	e7ec      	b.n	f5e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f606:	201b      	movs	r0, #27
    f608:	e7f0      	b.n	f5ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f60e:	7890      	ldrb	r0, [r2, #2]
    f610:	9e06      	ldr	r6, [sp, #24]
    f612:	461d      	mov	r5, r3
    f614:	4614      	mov	r4, r2
    f616:	b908      	cbnz	r0, f61c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
    f618:	f7fb fcea 	bl	aff0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f61c:	78e4      	ldrb	r4, [r4, #3]
    f61e:	4607      	mov	r7, r0
    f620:	b914      	cbnz	r4, f628 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e4>
    f622:	f7fb fce5 	bl	aff0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f626:	4604      	mov	r4, r0
    f628:	b16f      	cbz	r7, f646 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f62a:	b164      	cbz	r4, f646 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f62c:	4638      	mov	r0, r7
    f62e:	f7ff fe34 	bl	f29a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f632:	4620      	mov	r0, r4
    f634:	f7ff fe31 	bl	f29a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f638:	b12f      	cbz	r7, f646 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f63a:	b124      	cbz	r4, f646 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f63c:	702f      	strb	r7, [r5, #0]
    f63e:	7034      	strb	r4, [r6, #0]
    f640:	2000      	movs	r0, #0
    f642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f646:	2009      	movs	r0, #9
    f648:	e7fb      	b.n	f642 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fe>
    f64a:	b510      	push	{r4, lr}
    f64c:	f7fc ff4c 	bl	c4e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f650:	b928      	cbnz	r0, f65e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    f652:	f7fc ff7f 	bl	c554 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f656:	b910      	cbnz	r0, f65e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    f658:	f7fc ff86 	bl	c568 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f65c:	b108      	cbz	r0, f662 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41e>
    f65e:	2008      	movs	r0, #8
    f660:	bd10      	pop	{r4, pc}
    f662:	f7fc ff16 	bl	c492 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f666:	b940      	cbnz	r0, f67a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f668:	f7fc ff1d 	bl	c4a6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f66c:	b928      	cbnz	r0, f67a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f66e:	f7fc ff31 	bl	c4d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f672:	b910      	cbnz	r0, f67a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f674:	f7fc ff42 	bl	c4fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f678:	b108      	cbz	r0, f67e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x43a>
    f67a:	2004      	movs	r0, #4
    f67c:	bd10      	pop	{r4, pc}
    f67e:	f240 519c 	movw	r1, #1436	; 0x59c
    f682:	2039      	movs	r0, #57	; 0x39
    f684:	f7f4 fb7c 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f688:	b510      	push	{r4, lr}
    f68a:	f7fb fcab 	bl	afe4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f68e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f692:	bd10      	pop	{r4, pc}
    f694:	6840      	ldr	r0, [r0, #4]
    f696:	f000 b800 	b.w	f69a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f69a:	b508      	push	{r3, lr}
    f69c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    f6a0:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f6a4:	f88d 0000 	strb.w	r0, [sp]
    f6a8:	9800      	ldr	r0, [sp, #0]
    f6aa:	9000      	str	r0, [sp, #0]
    f6ac:	f89d 0000 	ldrb.w	r0, [sp]
    f6b0:	1e40      	subs	r0, r0, #1
    f6b2:	4208      	tst	r0, r1
    f6b4:	d003      	beq.n	f6be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    f6b6:	2904      	cmp	r1, #4
    f6b8:	d001      	beq.n	f6be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    f6ba:	2001      	movs	r0, #1
    f6bc:	bd08      	pop	{r3, pc}
    f6be:	2000      	movs	r0, #0
    f6c0:	bd08      	pop	{r3, pc}
    f6c2:	b510      	push	{r4, lr}
    f6c4:	f000 f804 	bl	f6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f6c8:	2800      	cmp	r0, #0
    f6ca:	d000      	beq.n	f6ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48a>
    f6cc:	2001      	movs	r0, #1
    f6ce:	bd10      	pop	{r4, pc}
    f6d0:	b510      	push	{r4, lr}
    f6d2:	f7f8 faf5 	bl	7cc0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f6d6:	2804      	cmp	r0, #4
    f6d8:	d003      	beq.n	f6e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f6da:	2805      	cmp	r0, #5
    f6dc:	d001      	beq.n	f6e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f6de:	2000      	movs	r0, #0
    f6e0:	bd10      	pop	{r4, pc}
    f6e2:	2001      	movs	r0, #1
    f6e4:	bd10      	pop	{r4, pc}
    f6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6e8:	b089      	sub	sp, #36	; 0x24
    f6ea:	4604      	mov	r4, r0
    f6ec:	8800      	ldrh	r0, [r0, #0]
    f6ee:	a906      	add	r1, sp, #24
    f6f0:	f7fe f961 	bl	d9b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6f4:	2800      	cmp	r0, #0
    f6f6:	d143      	bne.n	f780 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f6f8:	9807      	ldr	r0, [sp, #28]
    f6fa:	2601      	movs	r6, #1
    f6fc:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    f700:	f88d 1008 	strb.w	r1, [sp, #8]
    f704:	9902      	ldr	r1, [sp, #8]
    f706:	9102      	str	r1, [sp, #8]
    f708:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f70c:	f88d 100c 	strb.w	r1, [sp, #12]
    f710:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    f714:	3078      	adds	r0, #120	; 0x78
    f716:	291d      	cmp	r1, #29
    f718:	d102      	bne.n	f720 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
    f71a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f71e:	b141      	cbz	r1, f732 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
    f720:	2100      	movs	r1, #0
    f722:	f88d 1004 	strb.w	r1, [sp, #4]
    f726:	2105      	movs	r1, #5
    f728:	304e      	adds	r0, #78	; 0x4e
    f72a:	f7ff f9e2 	bl	eaf2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f72e:	b110      	cbz	r0, f736 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
    f730:	e004      	b.n	f73c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
    f732:	2101      	movs	r1, #1
    f734:	e7f5      	b.n	f722 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
    f736:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f73a:	b300      	cbz	r0, f77e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
    f73c:	8921      	ldrh	r1, [r4, #8]
    f73e:	88e0      	ldrh	r0, [r4, #6]
    f740:	f7ff fde1 	bl	f306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f744:	2800      	cmp	r0, #0
    f746:	d11b      	bne.n	f780 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f748:	88a1      	ldrh	r1, [r4, #4]
    f74a:	8860      	ldrh	r0, [r4, #2]
    f74c:	f7ff fddb 	bl	f306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f750:	2800      	cmp	r0, #0
    f752:	d115      	bne.n	f780 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f754:	8921      	ldrh	r1, [r4, #8]
    f756:	88e0      	ldrh	r0, [r4, #6]
    f758:	f7ff fdcb 	bl	f2f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f75c:	2800      	cmp	r0, #0
    f75e:	d10f      	bne.n	f780 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f760:	88a1      	ldrh	r1, [r4, #4]
    f762:	8860      	ldrh	r0, [r4, #2]
    f764:	f7ff fdc5 	bl	f2f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f768:	0007      	movs	r7, r0
    f76a:	d109      	bne.n	f780 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f76c:	9807      	ldr	r0, [sp, #28]
    f76e:	f500 7599 	add.w	r5, r0, #306	; 0x132
    f772:	706e      	strb	r6, [r5, #1]
    f774:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f778:	b121      	cbz	r1, f784 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
    f77a:	273a      	movs	r7, #58	; 0x3a
    f77c:	e02d      	b.n	f7da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
    f77e:	201a      	movs	r0, #26
    f780:	b009      	add	sp, #36	; 0x24
    f782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f784:	4631      	mov	r1, r6
    f786:	aa03      	add	r2, sp, #12
    f788:	f7ff ff09 	bl	f59e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f78c:	8861      	ldrh	r1, [r4, #2]
    f78e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    f792:	4281      	cmp	r1, r0
    f794:	d200      	bcs.n	f798 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
    f796:	4608      	mov	r0, r1
    f798:	80e8      	strh	r0, [r5, #6]
    f79a:	88a1      	ldrh	r1, [r4, #4]
    f79c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f7a0:	4281      	cmp	r1, r0
    f7a2:	d200      	bcs.n	f7a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
    f7a4:	4608      	mov	r0, r1
    f7a6:	8128      	strh	r0, [r5, #8]
    f7a8:	88e2      	ldrh	r2, [r4, #6]
    f7aa:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    f7ae:	428a      	cmp	r2, r1
    f7b0:	d200      	bcs.n	f7b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
    f7b2:	4611      	mov	r1, r2
    f7b4:	8069      	strh	r1, [r5, #2]
    f7b6:	8922      	ldrh	r2, [r4, #8]
    f7b8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    f7bc:	428a      	cmp	r2, r1
    f7be:	d200      	bcs.n	f7c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
    f7c0:	4611      	mov	r1, r2
    f7c2:	f640 0248 	movw	r2, #2120	; 0x848
    f7c6:	80a9      	strh	r1, [r5, #4]
    f7c8:	4291      	cmp	r1, r2
    f7ca:	d300      	bcc.n	f7ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
    f7cc:	4611      	mov	r1, r2
    f7ce:	80a9      	strh	r1, [r5, #4]
    f7d0:	4290      	cmp	r0, r2
    f7d2:	d200      	bcs.n	f7d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
    f7d4:	4602      	mov	r2, r0
    f7d6:	812a      	strh	r2, [r5, #8]
    f7d8:	702e      	strb	r6, [r5, #0]
    f7da:	2000      	movs	r0, #0
    f7dc:	7068      	strb	r0, [r5, #1]
    f7de:	4638      	mov	r0, r7
    f7e0:	e7ce      	b.n	f780 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f7e2:	b530      	push	{r4, r5, lr}
    f7e4:	f340 0400 	sbfx	r4, r0, #0, #1
    f7e8:	f340 0040 	sbfx	r0, r0, #1, #1
    f7ec:	1c40      	adds	r0, r0, #1
    f7ee:	9d03      	ldr	r5, [sp, #12]
    f7f0:	1c64      	adds	r4, r4, #1
    f7f2:	d000      	beq.n	f7f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
    f7f4:	b119      	cbz	r1, f7fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f7f6:	b100      	cbz	r0, f7fa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
    f7f8:	b10a      	cbz	r2, f7fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f7fa:	b91c      	cbnz	r4, f804 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
    f7fc:	e001      	b.n	f802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
    f7fe:	2011      	movs	r0, #17
    f800:	bd30      	pop	{r4, r5, pc}
    f802:	2100      	movs	r1, #0
    f804:	7019      	strb	r1, [r3, #0]
    f806:	b900      	cbnz	r0, f80a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
    f808:	2200      	movs	r2, #0
    f80a:	702a      	strb	r2, [r5, #0]
    f80c:	2000      	movs	r0, #0
    f80e:	bd30      	pop	{r4, r5, pc}
    f810:	b510      	push	{r4, lr}
    f812:	f7ff ff5d 	bl	f6d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f816:	b120      	cbz	r0, f822 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f818:	f7f7 f84e 	bl	68b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    f81c:	b108      	cbz	r0, f822 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f81e:	2001      	movs	r0, #1
    f820:	bd10      	pop	{r4, pc}
    f822:	2000      	movs	r0, #0
    f824:	bd10      	pop	{r4, pc}

0000f826 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f826:	6802      	ldr	r2, [r0, #0]
    f828:	b912      	cbnz	r2, f830 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f82a:	6001      	str	r1, [r0, #0]
    f82c:	4770      	bx	lr
    f82e:	4602      	mov	r2, r0
    f830:	6850      	ldr	r0, [r2, #4]
    f832:	b108      	cbz	r0, f838 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f834:	428a      	cmp	r2, r1
    f836:	d1fa      	bne.n	f82e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f838:	428a      	cmp	r2, r1
    f83a:	d0f7      	beq.n	f82c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f83c:	6051      	str	r1, [r2, #4]
    f83e:	4770      	bx	lr
    f840:	b510      	push	{r4, lr}
    f842:	4604      	mov	r4, r0
    f844:	e002      	b.n	f84c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f846:	6820      	ldr	r0, [r4, #0]
    f848:	4780      	blx	r0
    f84a:	6864      	ldr	r4, [r4, #4]
    f84c:	2c00      	cmp	r4, #0
    f84e:	d1fa      	bne.n	f846 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    f850:	bd10      	pop	{r4, pc}
    f852:	b510      	push	{r4, lr}
    f854:	2000      	movs	r0, #0
    f856:	f7f4 fc5b 	bl	4110 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f85a:	f7f4 fe7b 	bl	4554 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f85e:	f7f5 f8c3 	bl	49e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f862:	f7f5 faab 	bl	4dbc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f866:	2800      	cmp	r0, #0
    f868:	d003      	beq.n	f872 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    f86a:	21b8      	movs	r1, #184	; 0xb8
    f86c:	2001      	movs	r0, #1
    f86e:	f7f4 fa87 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f872:	bd10      	pop	{r4, pc}
    f874:	b510      	push	{r4, lr}
    f876:	f000 f80a 	bl	f88e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    f87a:	f7ff f823 	bl	e8c4 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
    f87e:	2800      	cmp	r0, #0
    f880:	d004      	beq.n	f88c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
    f882:	f240 1135 	movw	r1, #309	; 0x135
    f886:	2001      	movs	r0, #1
    f888:	f7f4 fa7a 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f88c:	bd10      	pop	{r4, pc}
    f88e:	b510      	push	{r4, lr}
    f890:	f7f8 f932 	bl	7af8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    f894:	b120      	cbz	r0, f8a0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
    f896:	f240 111d 	movw	r1, #285	; 0x11d
    f89a:	2001      	movs	r0, #1
    f89c:	f7f4 fa70 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8a0:	f7f6 ff5a 	bl	6758 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    f8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8a8:	f7fa bed4 	b.w	a654 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    f8ac:	000b0001 	.word	0x000b0001
    f8b0:	000a0002 	.word	0x000a0002
    f8b4:	00090005 	.word	0x00090005
    f8b8:	0008000a 	.word	0x0008000a
    f8bc:	00070014 	.word	0x00070014
    f8c0:	0006001e 	.word	0x0006001e
    f8c4:	00050032 	.word	0x00050032
    f8c8:	0004004b 	.word	0x0004004b
    f8cc:	00030064 	.word	0x00030064
    f8d0:	00020096 	.word	0x00020096
    f8d4:	000100fa 	.word	0x000100fa
    f8d8:	000001f4 	.word	0x000001f4

0000f8dc <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f8dc:	b510      	push	{r4, lr}
    f8de:	f7fb ff3f 	bl	b760 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f8e2:	f000 f850 	bl	f986 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f8e6:	f7fb fbf7 	bl	b0d8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8ee:	f7fb bcf5 	b.w	b2dc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f8f2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f8f2:	b510      	push	{r4, lr}
    f8f4:	24c8      	movs	r4, #200	; 0xc8
    f8f6:	1e64      	subs	r4, r4, #1
    f8f8:	b2e4      	uxtb	r4, r4
    f8fa:	f7fb fc0b 	bl	b114 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f8fe:	2802      	cmp	r0, #2
    f900:	d003      	beq.n	f90a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f902:	2801      	cmp	r0, #1
    f904:	d000      	beq.n	f908 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f906:	2000      	movs	r0, #0
    f908:	bd10      	pop	{r4, pc}
    f90a:	2c00      	cmp	r4, #0
    f90c:	d1f3      	bne.n	f8f6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f90e:	2193      	movs	r1, #147	; 0x93
    f910:	203b      	movs	r0, #59	; 0x3b
    f912:	f7f4 fa35 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f916 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f916:	b510      	push	{r4, lr}
    f918:	f7f4 f8c8 	bl	3aac <mpsl_fem_lna_configuration_clear>
    f91c:	2800      	cmp	r0, #0
    f91e:	d005      	beq.n	f92c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f920:	1c40      	adds	r0, r0, #1
    f922:	d003      	beq.n	f92c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f924:	2150      	movs	r1, #80	; 0x50
    f926:	2040      	movs	r0, #64	; 0x40
    f928:	f7f4 fa2a 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f92c:	bd10      	pop	{r4, pc}

0000f92e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f92e:	b510      	push	{r4, lr}
    f930:	f7f4 f8c8 	bl	3ac4 <mpsl_fem_pa_configuration_clear>
    f934:	2800      	cmp	r0, #0
    f936:	d005      	beq.n	f944 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f938:	1c40      	adds	r0, r0, #1
    f93a:	d003      	beq.n	f944 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f93c:	2149      	movs	r1, #73	; 0x49
    f93e:	2040      	movs	r0, #64	; 0x40
    f940:	f7f4 fa1e 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f944:	bd10      	pop	{r4, pc}

0000f946 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f946:	b510      	push	{r4, lr}
    f948:	f7f4 f8aa 	bl	3aa0 <mpsl_fem_disable>
    f94c:	2800      	cmp	r0, #0
    f94e:	d005      	beq.n	f95c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f950:	1c40      	adds	r0, r0, #1
    f952:	d003      	beq.n	f95c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f954:	2157      	movs	r1, #87	; 0x57
    f956:	2040      	movs	r0, #64	; 0x40
    f958:	f7f4 fa12 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f95c:	bd10      	pop	{r4, pc}

0000f95e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f95e:	b510      	push	{r4, lr}
    f960:	2100      	movs	r1, #0
    f962:	4608      	mov	r0, r1
    f964:	f7f4 f8a8 	bl	3ab8 <mpsl_fem_lna_configuration_set>
    f968:	b108      	cbz	r0, f96e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f96a:	2000      	movs	r0, #0
    f96c:	bd10      	pop	{r4, pc}
    f96e:	2001      	movs	r0, #1
    f970:	bd10      	pop	{r4, pc}

0000f972 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f972:	b508      	push	{r3, lr}
    f974:	4668      	mov	r0, sp
    f976:	f7f4 f8b1 	bl	3adc <mpsl_fem_pa_is_configured>
    f97a:	f89d 0000 	ldrb.w	r0, [sp]
    f97e:	2800      	cmp	r0, #0
    f980:	d000      	beq.n	f984 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f982:	2001      	movs	r0, #1
    f984:	bd08      	pop	{r3, pc}

0000f986 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f986:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f98a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f98e:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f992:	f3bf 8f4f 	dsb	sy
    f996:	f3bf 8f6f 	isb	sy
    f99a:	f7fb bd79 	b.w	b490 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f99e:	2800      	cmp	r0, #0
    f9a0:	db09      	blt.n	f9b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f9a2:	f000 021f 	and.w	r2, r0, #31
    f9a6:	2101      	movs	r1, #1
    f9a8:	4091      	lsls	r1, r2
    f9aa:	0940      	lsrs	r0, r0, #5
    f9ac:	0080      	lsls	r0, r0, #2
    f9ae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f9b2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f9b6:	4770      	bx	lr
    f9b8:	2800      	cmp	r0, #0
    f9ba:	db0d      	blt.n	f9d8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f9bc:	f000 021f 	and.w	r2, r0, #31
    f9c0:	2101      	movs	r1, #1
    f9c2:	4091      	lsls	r1, r2
    f9c4:	0940      	lsrs	r0, r0, #5
    f9c6:	0080      	lsls	r0, r0, #2
    f9c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f9cc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f9d0:	f3bf 8f4f 	dsb	sy
    f9d4:	f3bf 8f6f 	isb	sy
    f9d8:	4770      	bx	lr

0000f9da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f9da:	b510      	push	{r4, lr}
    f9dc:	2801      	cmp	r0, #1
    f9de:	d006      	beq.n	f9ee <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f9e0:	2802      	cmp	r0, #2
    f9e2:	d006      	beq.n	f9f2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f9e4:	f640 3141 	movw	r1, #2881	; 0xb41
    f9e8:	203e      	movs	r0, #62	; 0x3e
    f9ea:	f7f4 f9c9 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9ee:	2028      	movs	r0, #40	; 0x28
    f9f0:	bd10      	pop	{r4, pc}
    f9f2:	2018      	movs	r0, #24
    f9f4:	bd10      	pop	{r4, pc}

0000f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f9f6:	b510      	push	{r4, lr}
    f9f8:	2801      	cmp	r0, #1
    f9fa:	d006      	beq.n	fa0a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f9fc:	2802      	cmp	r0, #2
    f9fe:	d007      	beq.n	fa10 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    fa00:	f640 3155 	movw	r1, #2901	; 0xb55
    fa04:	203e      	movs	r0, #62	; 0x3e
    fa06:	f7f4 f9bb 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa0a:	f641 6014 	movw	r0, #7700	; 0x1e14
    fa0e:	bd10      	pop	{r4, pc}
    fa10:	f241 1030 	movw	r0, #4400	; 0x1130
    fa14:	bd10      	pop	{r4, pc}

0000fa16 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    fa16:	f7fc bbed 	b.w	c1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    fa1a:	b510      	push	{r4, lr}
    fa1c:	460a      	mov	r2, r1
    fa1e:	b130      	cbz	r0, fa2e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    fa20:	2801      	cmp	r0, #1
    fa22:	d00b      	beq.n	fa3c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    fa24:	f240 6114 	movw	r1, #1556	; 0x614
    fa28:	203e      	movs	r0, #62	; 0x3e
    fa2a:	f7f4 f9a9 	bl	3d80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa32:	f102 0128 	add.w	r1, r2, #40	; 0x28
    fa36:	4610      	mov	r0, r2
    fa38:	f7fb bbc0 	b.w	b1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    fa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa40:	f102 0129 	add.w	r1, r2, #41	; 0x29
    fa44:	4610      	mov	r0, r2
    fa46:	f7fb bba3 	b.w	b190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    fa4a:	5840      	ldr	r0, [r0, r1]
    fa4c:	2800      	cmp	r0, #0
    fa4e:	d000      	beq.n	fa52 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    fa50:	2001      	movs	r0, #1
    fa52:	4770      	bx	lr
    fa54:	5840      	ldr	r0, [r0, r1]
    fa56:	2800      	cmp	r0, #0
    fa58:	d000      	beq.n	fa5c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    fa5a:	2001      	movs	r0, #1
    fa5c:	4770      	bx	lr

0000fa5e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    fa5e:	b570      	push	{r4, r5, r6, lr}
    fa60:	4605      	mov	r5, r0
    fa62:	4614      	mov	r4, r2
    fa64:	4608      	mov	r0, r1
    fa66:	f7ff ffc6 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fa6a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    fa6e:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    fa72:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    fa76:	4620      	mov	r0, r4
    fa78:	f7ff ffbd 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fa7c:	4428      	add	r0, r5
    fa7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fa82:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    fa86:	fbb0 f5f1 	udiv	r5, r0, r1
    fa8a:	4620      	mov	r0, r4
    fa8c:	f7ff ffa5 	bl	f9da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fa90:	4428      	add	r0, r5
    fa92:	1d40      	adds	r0, r0, #5
    fa94:	bd70      	pop	{r4, r5, r6, pc}

0000fa96 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    fa96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa9a:	4607      	mov	r7, r0
    fa9c:	461d      	mov	r5, r3
    fa9e:	460e      	mov	r6, r1
    faa0:	4614      	mov	r4, r2
    faa2:	4610      	mov	r0, r2
    faa4:	f7ff ffa7 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    faa8:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    faac:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    fab0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    fab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fab8:	2e02      	cmp	r6, #2
    faba:	d00e      	beq.n	fada <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    fabc:	f240 52dc 	movw	r2, #1500	; 0x5dc
    fac0:	4411      	add	r1, r2
    fac2:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    fac6:	fbb1 f6f0 	udiv	r6, r1, r0
    faca:	4620      	mov	r0, r4
    facc:	f7ff ff85 	bl	f9da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fad0:	4430      	add	r0, r6
    fad2:	4428      	add	r0, r5
    fad4:	1d40      	adds	r0, r0, #5
    fad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fada:	4602      	mov	r2, r0
    fadc:	e7f0      	b.n	fac0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000fade <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    fade:	b510      	push	{r4, lr}
    fae0:	4604      	mov	r4, r0
    fae2:	4608      	mov	r0, r1
    fae4:	f7ff ff87 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fae8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    faec:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    faf0:	fbb0 f0f1 	udiv	r0, r0, r1
    faf4:	1a20      	subs	r0, r4, r0
    faf6:	1e80      	subs	r0, r0, #2
    faf8:	bd10      	pop	{r4, pc}

0000fafa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    fafa:	b510      	push	{r4, lr}
    fafc:	4604      	mov	r4, r0
    fafe:	4608      	mov	r0, r1
    fb00:	f7ff ff79 	bl	f9f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fb04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fb08:	fbb0 f0f1 	udiv	r0, r0, r1
    fb0c:	1a20      	subs	r0, r4, r0
    fb0e:	bd10      	pop	{r4, pc}

0000fb10 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    fb10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fb14:	2902      	cmp	r1, #2
    fb16:	d008      	beq.n	fb2a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    fb18:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fb1c:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    fb20:	fbb1 f1f2 	udiv	r1, r1, r2
    fb24:	4408      	add	r0, r1
    fb26:	1e80      	subs	r0, r0, #2
    fb28:	4770      	bx	lr
    fb2a:	4611      	mov	r1, r2
    fb2c:	e7f6      	b.n	fb1c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000fb2e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    fb2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fb32:	2902      	cmp	r1, #2
    fb34:	d007      	beq.n	fb46 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    fb36:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fb3a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    fb3e:	fbb1 f1f2 	udiv	r1, r1, r2
    fb42:	4408      	add	r0, r1
    fb44:	4770      	bx	lr
    fb46:	4611      	mov	r1, r2
    fb48:	e7f7      	b.n	fb3a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    fb4a:	080c      	.short	0x080c
    fb4c:	010d1702 	.word	0x010d1702
    fb50:	09090201 	.word	0x09090201
    fb54:	02060101 	.word	0x02060101
    fb58:	03181809 	.word	0x03181809
    fb5c:	09090101 	.word	0x09090101
    fb60:	0303      	.short	0x0303
    fb62:	05          	.byte	0x05
    fb63:	55          	.byte	0x55
    fb64:	26255555 	.word	0x26255555
    fb68:	27          	.byte	0x27
    fb69:	01          	.byte	0x01
    fb6a:	0103      	.short	0x0103
    fb6c:	01          	.byte	0x01
    fb6d:	01          	.byte	0x01
	...

0000fb70 <main>:
int nulls_azimuth[];
int min_encoder_search = 0;
int max_encoder_search = 270;

void main(void)
{
    fb70:	b508      	push	{r3, lr}
    fb72:	4b0d      	ldr	r3, [pc, #52]	; (fba8 <main+0x38>)
    fb74:	4a0d      	ldr	r2, [pc, #52]	; (fbac <main+0x3c>)
    fb76:	1a9b      	subs	r3, r3, r2
    fb78:	08db      	lsrs	r3, r3, #3
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
    fb7a:	f04f 0200 	mov.w	r2, #0
    fb7e:	2103      	movs	r1, #3
    fb80:	f361 0202 	bfi	r2, r1, #0, #3
    fb84:	f36f 02c5 	bfc	r2, #3, #3
    fb88:	f363 128f 	bfi	r2, r3, #6, #10
    fb8c:	4908      	ldr	r1, [pc, #32]	; (fbb0 <main+0x40>)
    fb8e:	4809      	ldr	r0, [pc, #36]	; (fbb4 <main+0x44>)
    fb90:	f001 fb28 	bl	111e4 <log_1>
	initiate_modules();
    fb94:	f010 f806 	bl	1fba4 <initiate_modules>
	test_me();
    fb98:	f000 f95c 	bl	fe54 <test_me>
	test_me_2();
    fb9c:	f000 f818 	bl	fbd0 <test_me_2>
	test_me_3();
    fba0:	f000 f970 	bl	fe84 <test_me_3>

}
    fba4:	bd08      	pop	{r3, pc}
    fba6:	bf00      	nop
    fba8:	00024cc8 	.word	0x00024cc8
    fbac:	00024ca0 	.word	0x00024ca0
    fbb0:	00024e88 	.word	0x00024e88
    fbb4:	00024e9c 	.word	0x00024e9c

0000fbb8 <send_data_delta>:

int8_t data_delta[5];
int8_t data_zigma[5];

void send_data_delta(int8_t rssi, int index){
    data_delta[index] = rssi;
    fbb8:	4b01      	ldr	r3, [pc, #4]	; (fbc0 <send_data_delta+0x8>)
    fbba:	5458      	strb	r0, [r3, r1]
}
    fbbc:	4770      	bx	lr
    fbbe:	bf00      	nop
    fbc0:	20001f70 	.word	0x20001f70

0000fbc4 <send_data_zigma>:
void send_data_zigma(int8_t rssi, int index){
    data_zigma[index] = rssi;
    fbc4:	4b01      	ldr	r3, [pc, #4]	; (fbcc <send_data_zigma+0x8>)
    fbc6:	5458      	strb	r0, [r3, r1]
}
    fbc8:	4770      	bx	lr
    fbca:	bf00      	nop
    fbcc:	20001f78 	.word	0x20001f78

0000fbd0 <test_me_2>:



void test_me_2(){
    fbd0:	b508      	push	{r3, lr}
    fbd2:	4b08      	ldr	r3, [pc, #32]	; (fbf4 <test_me_2+0x24>)
    fbd4:	4a08      	ldr	r2, [pc, #32]	; (fbf8 <test_me_2+0x28>)
    fbd6:	1a9b      	subs	r3, r3, r2
    fbd8:	08db      	lsrs	r3, r3, #3
    LOG_INF("aaaaaahehhehehe");
    fbda:	f04f 0100 	mov.w	r1, #0
    fbde:	2203      	movs	r2, #3
    fbe0:	f362 0102 	bfi	r1, r2, #0, #3
    fbe4:	f36f 01c5 	bfc	r1, #3, #3
    fbe8:	f363 118f 	bfi	r1, r3, #6, #10
    fbec:	4803      	ldr	r0, [pc, #12]	; (fbfc <test_me_2+0x2c>)
    fbee:	f001 fbaf 	bl	11350 <log_0>
}
    fbf2:	bd08      	pop	{r3, pc}
    fbf4:	00024ca0 	.word	0x00024ca0
    fbf8:	00024ca0 	.word	0x00024ca0
    fbfc:	00024eb4 	.word	0x00024eb4

0000fc00 <set_observer>:

extern struct k_sem my_sem; 
bool send_data_state = false;

void set_observer(bool state){
	send_data_state = state;
    fc00:	4b01      	ldr	r3, [pc, #4]	; (fc08 <set_observer+0x8>)
    fc02:	7018      	strb	r0, [r3, #0]
}
    fc04:	4770      	bx	lr
    fc06:	bf00      	nop
    fc08:	200036ba 	.word	0x200036ba

0000fc0c <device_found>:
	//set gpio switch to value;
}

static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
			 struct net_buf_simple *ad)
{	
    fc0c:	b538      	push	{r3, r4, r5, lr}
	if(send_data_state){
    fc0e:	4b1e      	ldr	r3, [pc, #120]	; (fc88 <device_found+0x7c>)
    fc10:	781b      	ldrb	r3, [r3, #0]
    fc12:	b903      	cbnz	r3, fc16 <device_found+0xa>





}
    fc14:	bd38      	pop	{r3, r4, r5, pc}
    fc16:	460c      	mov	r4, r1
    fc18:	4b1c      	ldr	r3, [pc, #112]	; (fc8c <device_found+0x80>)
    fc1a:	4a1d      	ldr	r2, [pc, #116]	; (fc90 <device_found+0x84>)
    fc1c:	1a9b      	subs	r3, r3, r2
    fc1e:	08db      	lsrs	r3, r3, #3
    	LOG_INF("%d",rssi);
    fc20:	f04f 0200 	mov.w	r2, #0
    fc24:	2103      	movs	r1, #3
    fc26:	f361 0202 	bfi	r2, r1, #0, #3
    fc2a:	f36f 02c5 	bfc	r2, #3, #3
    fc2e:	f363 128f 	bfi	r2, r3, #6, #10
    fc32:	4621      	mov	r1, r4
    fc34:	4817      	ldr	r0, [pc, #92]	; (fc94 <device_found+0x88>)
    fc36:	f001 fad5 	bl	111e4 <log_1>
		if(!state){
    fc3a:	4b17      	ldr	r3, [pc, #92]	; (fc98 <device_found+0x8c>)
    fc3c:	781b      	ldrb	r3, [r3, #0]
    fc3e:	b97b      	cbnz	r3, fc60 <device_found+0x54>
			send_data_delta(rssi, counter);
    fc40:	4d16      	ldr	r5, [pc, #88]	; (fc9c <device_found+0x90>)
    fc42:	6829      	ldr	r1, [r5, #0]
    fc44:	4620      	mov	r0, r4
    fc46:	f7ff ffb7 	bl	fbb8 <send_data_delta>
			counter +=1;
    fc4a:	682b      	ldr	r3, [r5, #0]
    fc4c:	3301      	adds	r3, #1
    fc4e:	602b      	str	r3, [r5, #0]
			if(counter > 4){
    fc50:	2b04      	cmp	r3, #4
    fc52:	dddf      	ble.n	fc14 <device_found+0x8>
				counter = 0;
    fc54:	2200      	movs	r2, #0
    fc56:	602a      	str	r2, [r5, #0]
				state = true;
    fc58:	4b0f      	ldr	r3, [pc, #60]	; (fc98 <device_found+0x8c>)
    fc5a:	2201      	movs	r2, #1
    fc5c:	701a      	strb	r2, [r3, #0]
    fc5e:	e7d9      	b.n	fc14 <device_found+0x8>
			send_data_zigma(rssi, counter);
    fc60:	4d0e      	ldr	r5, [pc, #56]	; (fc9c <device_found+0x90>)
    fc62:	6829      	ldr	r1, [r5, #0]
    fc64:	4620      	mov	r0, r4
    fc66:	f7ff ffad 	bl	fbc4 <send_data_zigma>
			counter += 1;
    fc6a:	682b      	ldr	r3, [r5, #0]
    fc6c:	3301      	adds	r3, #1
    fc6e:	602b      	str	r3, [r5, #0]
			if(counter > 4){
    fc70:	2b04      	cmp	r3, #4
    fc72:	ddcf      	ble.n	fc14 <device_found+0x8>
				state = false;
    fc74:	2000      	movs	r0, #0
    fc76:	4b08      	ldr	r3, [pc, #32]	; (fc98 <device_found+0x8c>)
    fc78:	7018      	strb	r0, [r3, #0]
				counter = 0;
    fc7a:	6028      	str	r0, [r5, #0]
				set_observer(false);
    fc7c:	f7ff ffc0 	bl	fc00 <set_observer>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    fc80:	4807      	ldr	r0, [pc, #28]	; (fca0 <device_found+0x94>)
    fc82:	f00b ffb5 	bl	1bbf0 <z_impl_k_sem_give>
}
    fc86:	e7c5      	b.n	fc14 <device_found+0x8>
    fc88:	200036ba 	.word	0x200036ba
    fc8c:	00024cb0 	.word	0x00024cb0
    fc90:	00024ca0 	.word	0x00024ca0
    fc94:	000264b4 	.word	0x000264b4
    fc98:	200036bb 	.word	0x200036bb
    fc9c:	20001f80 	.word	0x20001f80
    fca0:	20000768 	.word	0x20000768

0000fca4 <add_filter_accept_list_from_string>:


int add_filter_accept_list_from_string(const char *addr_str,const char *type){
    fca4:	b510      	push	{r4, lr}
    fca6:	b084      	sub	sp, #16
    int err;
	bt_addr_le_t addr_le = {.a = BT_ADDR_LE_ANY, .type = BT_ADDR_LE_RANDOM};
    fca8:	2300      	movs	r3, #0
    fcaa:	f8cd 3002 	str.w	r3, [sp, #2]
    fcae:	f88d 3006 	strb.w	r3, [sp, #6]
    fcb2:	2201      	movs	r2, #1
    fcb4:	f88d 2000 	strb.w	r2, [sp]
    fcb8:	9302      	str	r3, [sp, #8]
    fcba:	f8cd 300b 	str.w	r3, [sp, #11]
    fcbe:	ab02      	add	r3, sp, #8
    fcc0:	f88d 3001 	strb.w	r3, [sp, #1]
	err = bt_addr_le_from_str(addr_str, type, &addr_le);
    fcc4:	466a      	mov	r2, sp
    fcc6:	f003 fd1d 	bl	13704 <bt_addr_le_from_str>
	if (err){
    fcca:	b938      	cbnz	r0, fcdc <add_filter_accept_list_from_string+0x38>
		LOG_ERR("error: %d", err);
	}
	err = bt_le_filter_accept_list_add(&addr_le);
    fccc:	4668      	mov	r0, sp
    fcce:	f005 fbfb 	bl	154c8 <bt_le_filter_accept_list_add>
	if (err){
    fcd2:	4604      	mov	r4, r0
    fcd4:	b9a0      	cbnz	r0, fd00 <add_filter_accept_list_from_string+0x5c>
		LOG_ERR("Could not add to acceptlist (error: %d)", err);
		return err;
	}
    return err;
}
    fcd6:	4620      	mov	r0, r4
    fcd8:	b004      	add	sp, #16
    fcda:	bd10      	pop	{r4, pc}
    fcdc:	4601      	mov	r1, r0
    fcde:	4b11      	ldr	r3, [pc, #68]	; (fd24 <add_filter_accept_list_from_string+0x80>)
    fce0:	4a11      	ldr	r2, [pc, #68]	; (fd28 <add_filter_accept_list_from_string+0x84>)
    fce2:	1a9b      	subs	r3, r3, r2
    fce4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("error: %d", err);
    fce6:	f04f 0200 	mov.w	r2, #0
    fcea:	2001      	movs	r0, #1
    fcec:	f360 0202 	bfi	r2, r0, #0, #3
    fcf0:	f36f 02c5 	bfc	r2, #3, #3
    fcf4:	f363 128f 	bfi	r2, r3, #6, #10
    fcf8:	480c      	ldr	r0, [pc, #48]	; (fd2c <add_filter_accept_list_from_string+0x88>)
    fcfa:	f001 fa73 	bl	111e4 <log_1>
    fcfe:	e7e5      	b.n	fccc <add_filter_accept_list_from_string+0x28>
    fd00:	4b08      	ldr	r3, [pc, #32]	; (fd24 <add_filter_accept_list_from_string+0x80>)
    fd02:	4a09      	ldr	r2, [pc, #36]	; (fd28 <add_filter_accept_list_from_string+0x84>)
    fd04:	1a9b      	subs	r3, r3, r2
    fd06:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not add to acceptlist (error: %d)", err);
    fd08:	f04f 0200 	mov.w	r2, #0
    fd0c:	2101      	movs	r1, #1
    fd0e:	f361 0202 	bfi	r2, r1, #0, #3
    fd12:	f36f 02c5 	bfc	r2, #3, #3
    fd16:	f363 128f 	bfi	r2, r3, #6, #10
    fd1a:	4601      	mov	r1, r0
    fd1c:	4804      	ldr	r0, [pc, #16]	; (fd30 <add_filter_accept_list_from_string+0x8c>)
    fd1e:	f001 fa61 	bl	111e4 <log_1>
		return err;
    fd22:	e7d8      	b.n	fcd6 <add_filter_accept_list_from_string+0x32>
    fd24:	00024cb0 	.word	0x00024cb0
    fd28:	00024ca0 	.word	0x00024ca0
    fd2c:	00024ed4 	.word	0x00024ed4
    fd30:	00024ee0 	.word	0x00024ee0

0000fd34 <init_bluethooth_scan>:


int init_bluethooth_scan(){
    fd34:	b510      	push	{r4, lr}
    fd36:	b086      	sub	sp, #24

	struct bt_le_scan_param scan_param = {
    fd38:	2400      	movs	r4, #0
    fd3a:	9401      	str	r4, [sp, #4]
    fd3c:	9404      	str	r4, [sp, #16]
    fd3e:	9405      	str	r4, [sp, #20]
    fd40:	2301      	movs	r3, #1
    fd42:	f88d 3004 	strb.w	r3, [sp, #4]
    fd46:	2302      	movs	r3, #2
    fd48:	9302      	str	r3, [sp, #8]
    fd4a:	2360      	movs	r3, #96	; 0x60
    fd4c:	f8ad 300c 	strh.w	r3, [sp, #12]
    fd50:	2330      	movs	r3, #48	; 0x30
    fd52:	f8ad 300e 	strh.w	r3, [sp, #14]
    fd56:	4b35      	ldr	r3, [pc, #212]	; (fe2c <init_bluethooth_scan+0xf8>)
    fd58:	4a35      	ldr	r2, [pc, #212]	; (fe30 <init_bluethooth_scan+0xfc>)
    fd5a:	1a9b      	subs	r3, r3, r2
    fd5c:	08db      	lsrs	r3, r3, #3
		.options    = BT_LE_SCAN_OPT_FILTER_ACCEPT_LIST,
		.interval   = BT_GAP_SCAN_FAST_INTERVAL,
		.window     = BT_GAP_SCAN_FAST_WINDOW,
	};
	int err;
	LOG_INF("Starting Observer\n");
    fd5e:	f04f 0100 	mov.w	r1, #0
    fd62:	2203      	movs	r2, #3
    fd64:	f362 0102 	bfi	r1, r2, #0, #3
    fd68:	f364 01c5 	bfi	r1, r4, #3, #3
    fd6c:	f363 118f 	bfi	r1, r3, #6, #10
    fd70:	4830      	ldr	r0, [pc, #192]	; (fe34 <init_bluethooth_scan+0x100>)
    fd72:	f001 faed 	bl	11350 <log_0>
	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    fd76:	4620      	mov	r0, r4
    fd78:	f005 fafc 	bl	15374 <bt_enable>
	if (err) {
    fd7c:	b9f0      	cbnz	r0, fdbc <init_bluethooth_scan+0x88>
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
		return err;
	}
    err = add_filter_accept_list_from_string("C8:4A:E6:23:F5:13", "(random)");
    fd7e:	492e      	ldr	r1, [pc, #184]	; (fe38 <init_bluethooth_scan+0x104>)
    fd80:	482e      	ldr	r0, [pc, #184]	; (fe3c <init_bluethooth_scan+0x108>)
    fd82:	f7ff ff8f 	bl	fca4 <add_filter_accept_list_from_string>
	if (err){
    fd86:	4604      	mov	r4, r0
    fd88:	bb58      	cbnz	r0, fde2 <init_bluethooth_scan+0xae>
    fd8a:	4b28      	ldr	r3, [pc, #160]	; (fe2c <init_bluethooth_scan+0xf8>)
    fd8c:	4a28      	ldr	r2, [pc, #160]	; (fe30 <init_bluethooth_scan+0xfc>)
    fd8e:	1a9b      	subs	r3, r3, r2
    fd90:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not add to acceptlist (error: %d)", err);
		return err;
	}    
	LOG_INF("Bluetooth initialized\n");
    fd92:	f04f 0100 	mov.w	r1, #0
    fd96:	2203      	movs	r2, #3
    fd98:	f362 0102 	bfi	r1, r2, #0, #3
    fd9c:	f36f 01c5 	bfc	r1, #3, #3
    fda0:	f363 118f 	bfi	r1, r3, #6, #10
    fda4:	4826      	ldr	r0, [pc, #152]	; (fe40 <init_bluethooth_scan+0x10c>)
    fda6:	f001 fad3 	bl	11350 <log_0>

	err = bt_le_scan_start(&scan_param, device_found);
    fdaa:	4926      	ldr	r1, [pc, #152]	; (fe44 <init_bluethooth_scan+0x110>)
    fdac:	a801      	add	r0, sp, #4
    fdae:	f006 f873 	bl	15e98 <bt_le_scan_start>
	if (err) {
    fdb2:	4604      	mov	r4, r0
    fdb4:	bb38      	cbnz	r0, fe06 <init_bluethooth_scan+0xd2>
		LOG_ERR("Starting scanning failed (err %d)\n", err);
		return err;
	}
	return err;
    fdb6:	4620      	mov	r0, r4
    fdb8:	b006      	add	sp, #24
    fdba:	bd10      	pop	{r4, pc}
    fdbc:	4604      	mov	r4, r0
    fdbe:	4b1b      	ldr	r3, [pc, #108]	; (fe2c <init_bluethooth_scan+0xf8>)
    fdc0:	4a1b      	ldr	r2, [pc, #108]	; (fe30 <init_bluethooth_scan+0xfc>)
    fdc2:	1a9b      	subs	r3, r3, r2
    fdc4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
    fdc6:	f04f 0200 	mov.w	r2, #0
    fdca:	2101      	movs	r1, #1
    fdcc:	f361 0202 	bfi	r2, r1, #0, #3
    fdd0:	f36f 02c5 	bfc	r2, #3, #3
    fdd4:	f363 128f 	bfi	r2, r3, #6, #10
    fdd8:	4601      	mov	r1, r0
    fdda:	481b      	ldr	r0, [pc, #108]	; (fe48 <init_bluethooth_scan+0x114>)
    fddc:	f001 fa02 	bl	111e4 <log_1>
		return err;
    fde0:	e7e9      	b.n	fdb6 <init_bluethooth_scan+0x82>
    fde2:	4b12      	ldr	r3, [pc, #72]	; (fe2c <init_bluethooth_scan+0xf8>)
    fde4:	4a12      	ldr	r2, [pc, #72]	; (fe30 <init_bluethooth_scan+0xfc>)
    fde6:	1a9b      	subs	r3, r3, r2
    fde8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not add to acceptlist (error: %d)", err);
    fdea:	f04f 0200 	mov.w	r2, #0
    fdee:	2101      	movs	r1, #1
    fdf0:	f361 0202 	bfi	r2, r1, #0, #3
    fdf4:	f36f 02c5 	bfc	r2, #3, #3
    fdf8:	f363 128f 	bfi	r2, r3, #6, #10
    fdfc:	4601      	mov	r1, r0
    fdfe:	4813      	ldr	r0, [pc, #76]	; (fe4c <init_bluethooth_scan+0x118>)
    fe00:	f001 f9f0 	bl	111e4 <log_1>
		return err;
    fe04:	e7d7      	b.n	fdb6 <init_bluethooth_scan+0x82>
    fe06:	4b09      	ldr	r3, [pc, #36]	; (fe2c <init_bluethooth_scan+0xf8>)
    fe08:	4a09      	ldr	r2, [pc, #36]	; (fe30 <init_bluethooth_scan+0xfc>)
    fe0a:	1a9b      	subs	r3, r3, r2
    fe0c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Starting scanning failed (err %d)\n", err);
    fe0e:	f04f 0200 	mov.w	r2, #0
    fe12:	2101      	movs	r1, #1
    fe14:	f361 0202 	bfi	r2, r1, #0, #3
    fe18:	f36f 02c5 	bfc	r2, #3, #3
    fe1c:	f363 128f 	bfi	r2, r3, #6, #10
    fe20:	4601      	mov	r1, r0
    fe22:	480b      	ldr	r0, [pc, #44]	; (fe50 <init_bluethooth_scan+0x11c>)
    fe24:	f001 f9de 	bl	111e4 <log_1>
		return err;
    fe28:	e7c5      	b.n	fdb6 <init_bluethooth_scan+0x82>
    fe2a:	bf00      	nop
    fe2c:	00024cb0 	.word	0x00024cb0
    fe30:	00024ca0 	.word	0x00024ca0
    fe34:	00024f08 	.word	0x00024f08
    fe38:	00024f3c 	.word	0x00024f3c
    fe3c:	00024f48 	.word	0x00024f48
    fe40:	00024f5c 	.word	0x00024f5c
    fe44:	0000fc0d 	.word	0x0000fc0d
    fe48:	00024f1c 	.word	0x00024f1c
    fe4c:	00024ee0 	.word	0x00024ee0
    fe50:	00024f74 	.word	0x00024f74

0000fe54 <test_me>:
#define LOG_MODULE_NAME SEARCHER
LOG_MODULE_REGISTER(LOG_MODULE_NAME);

extern struct k_sem my_sem;

void test_me(){
    fe54:	b508      	push	{r3, lr}
    fe56:	4b08      	ldr	r3, [pc, #32]	; (fe78 <test_me+0x24>)
    fe58:	4a08      	ldr	r2, [pc, #32]	; (fe7c <test_me+0x28>)
    fe5a:	1a9b      	subs	r3, r3, r2
    fe5c:	08db      	lsrs	r3, r3, #3
    LOG_INF("hehhehehe");
    fe5e:	f04f 0100 	mov.w	r1, #0
    fe62:	2203      	movs	r2, #3
    fe64:	f362 0102 	bfi	r1, r2, #0, #3
    fe68:	f36f 01c5 	bfc	r1, #3, #3
    fe6c:	f363 118f 	bfi	r1, r3, #6, #10
    fe70:	4803      	ldr	r0, [pc, #12]	; (fe80 <test_me+0x2c>)
    fe72:	f001 fa6d 	bl	11350 <log_0>
}
    fe76:	bd08      	pop	{r3, pc}
    fe78:	00024cb8 	.word	0x00024cb8
    fe7c:	00024ca0 	.word	0x00024ca0
    fe80:	00024fa4 	.word	0x00024fa4

0000fe84 <test_me_3>:
#include "encoder.h"

#define LOG_MODULE_NAME ENCODER
LOG_MODULE_REGISTER(LOG_MODULE_NAME);

void test_me_3(){
    fe84:	b508      	push	{r3, lr}
    fe86:	4b08      	ldr	r3, [pc, #32]	; (fea8 <test_me_3+0x24>)
    fe88:	4a08      	ldr	r2, [pc, #32]	; (feac <test_me_3+0x28>)
    fe8a:	1a9b      	subs	r3, r3, r2
    fe8c:	08db      	lsrs	r3, r3, #3
    LOG_INF("dsadsahehhehehe");
    fe8e:	f04f 0100 	mov.w	r1, #0
    fe92:	2203      	movs	r2, #3
    fe94:	f362 0102 	bfi	r1, r2, #0, #3
    fe98:	f36f 01c5 	bfc	r1, #3, #3
    fe9c:	f363 118f 	bfi	r1, r3, #6, #10
    fea0:	4803      	ldr	r0, [pc, #12]	; (feb0 <test_me_3+0x2c>)
    fea2:	f001 fa55 	bl	11350 <log_0>
    fea6:	bd08      	pop	{r3, pc}
    fea8:	00024ca8 	.word	0x00024ca8
    feac:	00024ca0 	.word	0x00024ca0
    feb0:	00024fbc 	.word	0x00024fbc

0000feb4 <timer_init>:

// Timer CC register use to reset the timer.
#define TIMER_RELOAD_CC_NUM 5

int timer_init()
{
    feb4:	b510      	push	{r4, lr}
    NRF_TIMER3->BITMODE                 = TIMER_BITMODE_BITMODE_24Bit << TIMER_BITMODE_BITMODE_Pos;
    feb6:	4b10      	ldr	r3, [pc, #64]	; (fef8 <timer_init+0x44>)
    feb8:	2202      	movs	r2, #2
    feba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_TIMER3->PRESCALER               = 0;
    febe:	2400      	movs	r4, #0
    fec0:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    NRF_TIMER3->SHORTS                  = TIMER_SHORTS_COMPARE0_CLEAR_Msk << TIMER_RELOAD_CC_NUM;
    fec4:	2220      	movs	r2, #32
    fec6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_TIMER3->MODE                    = TIMER_MODE_MODE_Timer << TIMER_MODE_MODE_Pos;
    feca:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    NRF_TIMER3->CC[TIMER_RELOAD_CC_NUM] = TIMER_RELOAD;
    fece:	4a0b      	ldr	r2, [pc, #44]	; (fefc <timer_init+0x48>)
    fed0:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
    fed4:	4b0a      	ldr	r3, [pc, #40]	; (ff00 <timer_init+0x4c>)
    fed6:	4a0b      	ldr	r2, [pc, #44]	; (ff04 <timer_init+0x50>)
    fed8:	1a9b      	subs	r3, r3, r2
    feda:	08db      	lsrs	r3, r3, #3

    LOG_INF("Timer initialized.");
    fedc:	f04f 0100 	mov.w	r1, #0
    fee0:	2203      	movs	r2, #3
    fee2:	f362 0102 	bfi	r1, r2, #0, #3
    fee6:	f364 01c5 	bfi	r1, r4, #3, #3
    feea:	f363 118f 	bfi	r1, r3, #6, #10
    feee:	4806      	ldr	r0, [pc, #24]	; (ff08 <timer_init+0x54>)
    fef0:	f001 fa2e 	bl	11350 <log_0>
    return 0 ;
}
    fef4:	4620      	mov	r0, r4
    fef6:	bd10      	pop	{r4, pc}
    fef8:	4001a000 	.word	0x4001a000
    fefc:	0004e200 	.word	0x0004e200
    ff00:	00024cc0 	.word	0x00024cc0
    ff04:	00024ca0 	.word	0x00024ca0
    ff08:	00024fd4 	.word	0x00024fd4

0000ff0c <timer_start>:

int timer_start()
{
    ff0c:	b508      	push	{r3, lr}
    NRF_TIMER3->TASKS_START = 1;
    ff0e:	4b0a      	ldr	r3, [pc, #40]	; (ff38 <timer_start+0x2c>)
    ff10:	2201      	movs	r2, #1
    ff12:	601a      	str	r2, [r3, #0]
    ff14:	4b09      	ldr	r3, [pc, #36]	; (ff3c <timer_start+0x30>)
    ff16:	4a0a      	ldr	r2, [pc, #40]	; (ff40 <timer_start+0x34>)
    ff18:	1a9b      	subs	r3, r3, r2
    ff1a:	08db      	lsrs	r3, r3, #3
    
    LOG_INF("Timer started.");
    ff1c:	f04f 0100 	mov.w	r1, #0
    ff20:	2203      	movs	r2, #3
    ff22:	f362 0102 	bfi	r1, r2, #0, #3
    ff26:	f36f 01c5 	bfc	r1, #3, #3
    ff2a:	f363 118f 	bfi	r1, r3, #6, #10
    ff2e:	4805      	ldr	r0, [pc, #20]	; (ff44 <timer_start+0x38>)
    ff30:	f001 fa0e 	bl	11350 <log_0>
    return 0;
}
    ff34:	2000      	movs	r0, #0
    ff36:	bd08      	pop	{r3, pc}
    ff38:	4001a000 	.word	0x4001a000
    ff3c:	00024cc0 	.word	0x00024cc0
    ff40:	00024ca0 	.word	0x00024ca0
    ff44:	00024fe8 	.word	0x00024fe8

0000ff48 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    ff48:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    ff4a:	680b      	ldr	r3, [r1, #0]
    ff4c:	3301      	adds	r3, #1
    ff4e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    ff50:	4b01      	ldr	r3, [pc, #4]	; (ff58 <char_out+0x10>)
    ff52:	681b      	ldr	r3, [r3, #0]
    ff54:	4798      	blx	r3
}
    ff56:	bd08      	pop	{r3, pc}
    ff58:	20000410 	.word	0x20000410

0000ff5c <__printk_hook_install>:
	_char_out = fn;
    ff5c:	4b01      	ldr	r3, [pc, #4]	; (ff64 <__printk_hook_install+0x8>)
    ff5e:	6018      	str	r0, [r3, #0]
}
    ff60:	4770      	bx	lr
    ff62:	bf00      	nop
    ff64:	20000410 	.word	0x20000410

0000ff68 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    ff68:	b500      	push	{lr}
    ff6a:	b083      	sub	sp, #12
    ff6c:	4602      	mov	r2, r0
    ff6e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    ff70:	2100      	movs	r1, #0
    ff72:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    ff74:	a901      	add	r1, sp, #4
    ff76:	4803      	ldr	r0, [pc, #12]	; (ff84 <vprintk+0x1c>)
    ff78:	f000 f94e 	bl	10218 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    ff7c:	b003      	add	sp, #12
    ff7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ff82:	bf00      	nop
    ff84:	0000ff49 	.word	0x0000ff49

0000ff88 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    ff88:	b510      	push	{r4, lr}
    ff8a:	b084      	sub	sp, #16
    ff8c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    ff8e:	9001      	str	r0, [sp, #4]
    ff90:	9102      	str	r1, [sp, #8]
    ff92:	2100      	movs	r1, #0
    ff94:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    ff96:	a901      	add	r1, sp, #4
    ff98:	4805      	ldr	r0, [pc, #20]	; (ffb0 <vsnprintk+0x28>)
    ff9a:	f000 f93d 	bl	10218 <cbvprintf>

	if (ctx.count < ctx.max) {
    ff9e:	9b03      	ldr	r3, [sp, #12]
    ffa0:	9a02      	ldr	r2, [sp, #8]
    ffa2:	4293      	cmp	r3, r2
    ffa4:	da01      	bge.n	ffaa <vsnprintk+0x22>
		str[ctx.count] = '\0';
    ffa6:	2200      	movs	r2, #0
    ffa8:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    ffaa:	9803      	ldr	r0, [sp, #12]
    ffac:	b004      	add	sp, #16
    ffae:	bd10      	pop	{r4, pc}
    ffb0:	0001fc63 	.word	0x0001fc63

0000ffb4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    ffb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ffb8:	b083      	sub	sp, #12
    ffba:	4604      	mov	r4, r0
    ffbc:	4608      	mov	r0, r1
    ffbe:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ffc0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    ffc2:	f013 0f08 	tst.w	r3, #8
    ffc6:	d105      	bne.n	ffd4 <process_event+0x20>
    ffc8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    ffcc:	2300      	movs	r3, #0
    ffce:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    ffd0:	9301      	str	r3, [sp, #4]
}
    ffd2:	e069      	b.n	100a8 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    ffd4:	2901      	cmp	r1, #1
    ffd6:	d009      	beq.n	ffec <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    ffd8:	f043 0320 	orr.w	r3, r3, #32
    ffdc:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ffde:	f385 8811 	msr	BASEPRI, r5
    ffe2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    ffe6:	b003      	add	sp, #12
    ffe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    ffec:	f043 0310 	orr.w	r3, r3, #16
    fff0:	8323      	strh	r3, [r4, #24]
    fff2:	e7f4      	b.n	ffde <process_event+0x2a>
			evt = process_recheck(mgr);
    fff4:	4620      	mov	r0, r4
    fff6:	f00f fe8f 	bl	1fd18 <process_recheck>
    fffa:	e057      	b.n	100ac <process_event+0xf8>
			res = mgr->last_res;
    fffc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   10000:	464a      	mov	r2, r9
   10002:	4669      	mov	r1, sp
   10004:	4620      	mov	r0, r4
   10006:	f00f fea0 	bl	1fd4a <process_complete>
		onoff_transition_fn transit = NULL;
   1000a:	2700      	movs	r7, #0
   1000c:	e05a      	b.n	100c4 <process_event+0x110>
			transit = mgr->transitions->start;
   1000e:	6923      	ldr	r3, [r4, #16]
   10010:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   10012:	2106      	movs	r1, #6
   10014:	4620      	mov	r0, r4
   10016:	f00f fe58 	bl	1fcca <set_state>
		res = 0;
   1001a:	f04f 0900 	mov.w	r9, #0
   1001e:	e051      	b.n	100c4 <process_event+0x110>
			transit = mgr->transitions->stop;
   10020:	6923      	ldr	r3, [r4, #16]
   10022:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   10024:	2104      	movs	r1, #4
   10026:	4620      	mov	r0, r4
   10028:	f00f fe4f 	bl	1fcca <set_state>
		res = 0;
   1002c:	f04f 0900 	mov.w	r9, #0
   10030:	e048      	b.n	100c4 <process_event+0x110>
			transit = mgr->transitions->reset;
   10032:	6923      	ldr	r3, [r4, #16]
   10034:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   10036:	2105      	movs	r1, #5
   10038:	4620      	mov	r0, r4
   1003a:	f00f fe46 	bl	1fcca <set_state>
		res = 0;
   1003e:	f04f 0900 	mov.w	r9, #0
   10042:	e03f      	b.n	100c4 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   10044:	2200      	movs	r2, #0
   10046:	e046      	b.n	100d6 <process_event+0x122>
   10048:	2200      	movs	r2, #0
   1004a:	e044      	b.n	100d6 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1004c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   10050:	8323      	strh	r3, [r4, #24]
   10052:	f385 8811 	msr	BASEPRI, r5
   10056:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1005a:	2900      	cmp	r1, #0
   1005c:	d144      	bne.n	100e8 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1005e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   10060:	b12b      	cbz	r3, 1006e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   10062:	464b      	mov	r3, r9
   10064:	4642      	mov	r2, r8
   10066:	4669      	mov	r1, sp
   10068:	4620      	mov	r0, r4
   1006a:	f00f fee4 	bl	1fe36 <notify_all>
			if (transit != NULL) {
   1006e:	b117      	cbz	r7, 10076 <process_event+0xc2>
				transit(mgr, transition_complete);
   10070:	4925      	ldr	r1, [pc, #148]	; (10108 <process_event+0x154>)
   10072:	4620      	mov	r0, r4
   10074:	47b8      	blx	r7
	__asm__ volatile(
   10076:	f04f 0340 	mov.w	r3, #64	; 0x40
   1007a:	f3ef 8511 	mrs	r5, BASEPRI
   1007e:	f383 8812 	msr	BASEPRI_MAX, r3
   10082:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10086:	8b23      	ldrh	r3, [r4, #24]
   10088:	f023 0308 	bic.w	r3, r3, #8
   1008c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1008e:	8b23      	ldrh	r3, [r4, #24]
   10090:	f013 0f10 	tst.w	r3, #16
   10094:	d02e      	beq.n	100f4 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10096:	f023 0310 	bic.w	r3, r3, #16
   1009a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1009c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1009e:	8b26      	ldrh	r6, [r4, #24]
   100a0:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   100a4:	2800      	cmp	r0, #0
   100a6:	d09a      	beq.n	ffde <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   100a8:	2802      	cmp	r0, #2
   100aa:	d0a3      	beq.n	fff4 <process_event+0x40>
		if (evt == EVT_NOP) {
   100ac:	2800      	cmp	r0, #0
   100ae:	d096      	beq.n	ffde <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   100b0:	2801      	cmp	r0, #1
   100b2:	d0a3      	beq.n	fffc <process_event+0x48>
		} else if (evt == EVT_START) {
   100b4:	2803      	cmp	r0, #3
   100b6:	d0aa      	beq.n	1000e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   100b8:	2804      	cmp	r0, #4
   100ba:	d0b1      	beq.n	10020 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   100bc:	2805      	cmp	r0, #5
   100be:	d0b8      	beq.n	10032 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   100c0:	2700      	movs	r7, #0
		res = 0;
   100c2:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   100c4:	8b23      	ldrh	r3, [r4, #24]
   100c6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   100ca:	45b0      	cmp	r8, r6
   100cc:	d0ba      	beq.n	10044 <process_event+0x90>
   100ce:	68a2      	ldr	r2, [r4, #8]
   100d0:	2a00      	cmp	r2, #0
   100d2:	d0b9      	beq.n	10048 <process_event+0x94>
   100d4:	2201      	movs	r2, #1
		if (do_monitors
   100d6:	4611      	mov	r1, r2
   100d8:	2a00      	cmp	r2, #0
   100da:	d1b7      	bne.n	1004c <process_event+0x98>
   100dc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   100de:	2a00      	cmp	r2, #0
   100e0:	d1b4      	bne.n	1004c <process_event+0x98>
		    || (transit != NULL)) {
   100e2:	2f00      	cmp	r7, #0
   100e4:	d1b2      	bne.n	1004c <process_event+0x98>
   100e6:	e7d2      	b.n	1008e <process_event+0xda>
				notify_monitors(mgr, state, res);
   100e8:	464a      	mov	r2, r9
   100ea:	4641      	mov	r1, r8
   100ec:	4620      	mov	r0, r4
   100ee:	f00f fdf4 	bl	1fcda <notify_monitors>
   100f2:	e7b4      	b.n	1005e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   100f4:	f013 0f20 	tst.w	r3, #32
   100f8:	d004      	beq.n	10104 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   100fa:	f023 0320 	bic.w	r3, r3, #32
   100fe:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   10100:	2002      	movs	r0, #2
   10102:	e7cc      	b.n	1009e <process_event+0xea>
		evt = EVT_NOP;
   10104:	2000      	movs	r0, #0
   10106:	e7ca      	b.n	1009e <process_event+0xea>
   10108:	0001fe65 	.word	0x0001fe65

0001010c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   1010c:	b410      	push	{r4}
   1010e:	4604      	mov	r4, r0
	const char *sp = *str;
   10110:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   10112:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   10114:	7813      	ldrb	r3, [r2, #0]
   10116:	4907      	ldr	r1, [pc, #28]	; (10134 <extract_decimal+0x28>)
   10118:	5c59      	ldrb	r1, [r3, r1]
   1011a:	f011 0f04 	tst.w	r1, #4
   1011e:	d006      	beq.n	1012e <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
   10120:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10124:	3201      	adds	r2, #1
   10126:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1012a:	3830      	subs	r0, #48	; 0x30
   1012c:	e7f2      	b.n	10114 <extract_decimal+0x8>
	}
	*str = sp;
   1012e:	6022      	str	r2, [r4, #0]
	return val;
}
   10130:	bc10      	pop	{r4}
   10132:	4770      	bx	lr
   10134:	00026f85 	.word	0x00026f85

00010138 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   10138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1013c:	b083      	sub	sp, #12
   1013e:	4604      	mov	r4, r0
   10140:	460d      	mov	r5, r1
   10142:	9201      	str	r2, [sp, #4]
   10144:	469a      	mov	sl, r3
   10146:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   1014a:	78d3      	ldrb	r3, [r2, #3]
   1014c:	4a31      	ldr	r2, [pc, #196]	; (10214 <encode_uint+0xdc>)
   1014e:	f813 b002 	ldrb.w	fp, [r3, r2]
   10152:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   10156:	2b6f      	cmp	r3, #111	; 0x6f
   10158:	d00f      	beq.n	1017a <encode_uint+0x42>
   1015a:	d906      	bls.n	1016a <encode_uint+0x32>
   1015c:	2b70      	cmp	r3, #112	; 0x70
   1015e:	d00f      	beq.n	10180 <encode_uint+0x48>
   10160:	2b78      	cmp	r3, #120	; 0x78
   10162:	d110      	bne.n	10186 <encode_uint+0x4e>
		return 16;
   10164:	f04f 0910 	mov.w	r9, #16
   10168:	e023      	b.n	101b2 <encode_uint+0x7a>
	switch (specifier) {
   1016a:	2b58      	cmp	r3, #88	; 0x58
   1016c:	d002      	beq.n	10174 <encode_uint+0x3c>
   1016e:	f04f 090a 	mov.w	r9, #10
   10172:	e01e      	b.n	101b2 <encode_uint+0x7a>
		return 16;
   10174:	f04f 0910 	mov.w	r9, #16
   10178:	e01b      	b.n	101b2 <encode_uint+0x7a>
		return 8;
   1017a:	f04f 0908 	mov.w	r9, #8
   1017e:	e018      	b.n	101b2 <encode_uint+0x7a>
		return 16;
   10180:	f04f 0910 	mov.w	r9, #16
   10184:	e015      	b.n	101b2 <encode_uint+0x7a>
	switch (specifier) {
   10186:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   1018a:	e012      	b.n	101b2 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1018c:	b2d2      	uxtb	r2, r2
   1018e:	3230      	adds	r2, #48	; 0x30
   10190:	b2d2      	uxtb	r2, r2
   10192:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   10196:	4632      	mov	r2, r6
   10198:	463b      	mov	r3, r7
   1019a:	4620      	mov	r0, r4
   1019c:	4629      	mov	r1, r5
   1019e:	f7ef ffaf 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   101a2:	42bd      	cmp	r5, r7
   101a4:	bf08      	it	eq
   101a6:	42b4      	cmpeq	r4, r6
   101a8:	d318      	bcc.n	101dc <encode_uint+0xa4>
   101aa:	45d0      	cmp	r8, sl
   101ac:	d916      	bls.n	101dc <encode_uint+0xa4>
		value /= radix;
   101ae:	4604      	mov	r4, r0
   101b0:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   101b2:	464e      	mov	r6, r9
   101b4:	2700      	movs	r7, #0
   101b6:	464a      	mov	r2, r9
   101b8:	463b      	mov	r3, r7
   101ba:	4620      	mov	r0, r4
   101bc:	4629      	mov	r1, r5
   101be:	f7ef ff9f 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   101c2:	2a09      	cmp	r2, #9
   101c4:	d9e2      	bls.n	1018c <encode_uint+0x54>
   101c6:	f1bb 0f01 	cmp.w	fp, #1
   101ca:	d003      	beq.n	101d4 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   101cc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   101ce:	3257      	adds	r2, #87	; 0x57
   101d0:	b2d2      	uxtb	r2, r2
   101d2:	e7de      	b.n	10192 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   101d4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   101d6:	3237      	adds	r2, #55	; 0x37
   101d8:	b2d2      	uxtb	r2, r2
   101da:	e7da      	b.n	10192 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   101dc:	9b01      	ldr	r3, [sp, #4]
   101de:	781b      	ldrb	r3, [r3, #0]
   101e0:	f013 0f20 	tst.w	r3, #32
   101e4:	d005      	beq.n	101f2 <encode_uint+0xba>
		if (radix == 8) {
   101e6:	f1b9 0f08 	cmp.w	r9, #8
   101ea:	d006      	beq.n	101fa <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   101ec:	f1b9 0f10 	cmp.w	r9, #16
   101f0:	d009      	beq.n	10206 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   101f2:	4640      	mov	r0, r8
   101f4:	b003      	add	sp, #12
   101f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   101fa:	9a01      	ldr	r2, [sp, #4]
   101fc:	7893      	ldrb	r3, [r2, #2]
   101fe:	f043 0308 	orr.w	r3, r3, #8
   10202:	7093      	strb	r3, [r2, #2]
   10204:	e7f5      	b.n	101f2 <encode_uint+0xba>
			conv->altform_0c = true;
   10206:	9a01      	ldr	r2, [sp, #4]
   10208:	7893      	ldrb	r3, [r2, #2]
   1020a:	f043 0310 	orr.w	r3, r3, #16
   1020e:	7093      	strb	r3, [r2, #2]
   10210:	e7ef      	b.n	101f2 <encode_uint+0xba>
   10212:	bf00      	nop
   10214:	00026f85 	.word	0x00026f85

00010218 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1021c:	b093      	sub	sp, #76	; 0x4c
   1021e:	4606      	mov	r6, r0
   10220:	460d      	mov	r5, r1
   10222:	4692      	mov	sl, r2
   10224:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10226:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10228:	f89a 0000 	ldrb.w	r0, [sl]
   1022c:	2800      	cmp	r0, #0
   1022e:	f000 84d6 	beq.w	10bde <cbvprintf+0x9c6>
		if (*fp != '%') {
   10232:	2825      	cmp	r0, #37	; 0x25
   10234:	d008      	beq.n	10248 <cbvprintf+0x30>
			OUTC(*fp++);
   10236:	f10a 0a01 	add.w	sl, sl, #1
   1023a:	4629      	mov	r1, r5
   1023c:	47b0      	blx	r6
   1023e:	2800      	cmp	r0, #0
   10240:	f2c0 84ce 	blt.w	10be0 <cbvprintf+0x9c8>
   10244:	3401      	adds	r4, #1
			continue;
   10246:	e7ef      	b.n	10228 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   10248:	2300      	movs	r3, #0
   1024a:	9306      	str	r3, [sp, #24]
   1024c:	9307      	str	r3, [sp, #28]
   1024e:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   10250:	9308      	str	r3, [sp, #32]
   10252:	9309      	str	r3, [sp, #36]	; 0x24
   10254:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   10256:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   1025a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1025e:	2b25      	cmp	r3, #37	; 0x25
   10260:	d001      	beq.n	10266 <cbvprintf+0x4e>
	bool loop = true;
   10262:	2701      	movs	r7, #1
   10264:	e02c      	b.n	102c0 <cbvprintf+0xa8>
		conv->specifier = *sp++;
   10266:	f10a 0802 	add.w	r8, sl, #2
   1026a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   1026e:	e1a8      	b.n	105c2 <cbvprintf+0x3aa>
			conv->flag_dash = true;
   10270:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10274:	f043 0304 	orr.w	r3, r3, #4
   10278:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   1027c:	b1ff      	cbz	r7, 102be <cbvprintf+0xa6>
			++sp;
   1027e:	f108 0801 	add.w	r8, r8, #1
   10282:	e01c      	b.n	102be <cbvprintf+0xa6>
			conv->flag_plus = true;
   10284:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10288:	f043 0308 	orr.w	r3, r3, #8
   1028c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10290:	e7f4      	b.n	1027c <cbvprintf+0x64>
			conv->flag_space = true;
   10292:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10296:	f043 0310 	orr.w	r3, r3, #16
   1029a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   1029e:	e7ed      	b.n	1027c <cbvprintf+0x64>
			conv->flag_hash = true;
   102a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   102a4:	f043 0320 	orr.w	r3, r3, #32
   102a8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   102ac:	e7e6      	b.n	1027c <cbvprintf+0x64>
			conv->flag_zero = true;
   102ae:	f89d 3020 	ldrb.w	r3, [sp, #32]
   102b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   102b6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   102ba:	e7df      	b.n	1027c <cbvprintf+0x64>
		switch (*sp) {
   102bc:	2700      	movs	r7, #0
	} while (loop);
   102be:	b34f      	cbz	r7, 10314 <cbvprintf+0xfc>
		switch (*sp) {
   102c0:	f898 3000 	ldrb.w	r3, [r8]
   102c4:	3b20      	subs	r3, #32
   102c6:	2b10      	cmp	r3, #16
   102c8:	d8f8      	bhi.n	102bc <cbvprintf+0xa4>
   102ca:	a201      	add	r2, pc, #4	; (adr r2, 102d0 <cbvprintf+0xb8>)
   102cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   102d0:	00010293 	.word	0x00010293
   102d4:	000102bd 	.word	0x000102bd
   102d8:	000102bd 	.word	0x000102bd
   102dc:	000102a1 	.word	0x000102a1
   102e0:	000102bd 	.word	0x000102bd
   102e4:	000102bd 	.word	0x000102bd
   102e8:	000102bd 	.word	0x000102bd
   102ec:	000102bd 	.word	0x000102bd
   102f0:	000102bd 	.word	0x000102bd
   102f4:	000102bd 	.word	0x000102bd
   102f8:	000102bd 	.word	0x000102bd
   102fc:	00010285 	.word	0x00010285
   10300:	000102bd 	.word	0x000102bd
   10304:	00010271 	.word	0x00010271
   10308:	000102bd 	.word	0x000102bd
   1030c:	000102bd 	.word	0x000102bd
   10310:	000102af 	.word	0x000102af
	if (conv->flag_zero && conv->flag_dash) {
   10314:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10318:	f003 0344 	and.w	r3, r3, #68	; 0x44
   1031c:	2b44      	cmp	r3, #68	; 0x44
   1031e:	d06d      	beq.n	103fc <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   10320:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   10324:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1032c:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   10330:	f898 3000 	ldrb.w	r3, [r8]
   10334:	2b2a      	cmp	r3, #42	; 0x2a
   10336:	d068      	beq.n	1040a <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   10338:	a805      	add	r0, sp, #20
   1033a:	f7ff fee7 	bl	1010c <extract_decimal>
	if (sp != wp) {
   1033e:	9b05      	ldr	r3, [sp, #20]
   10340:	4598      	cmp	r8, r3
   10342:	d012      	beq.n	1036a <cbvprintf+0x152>
		conv->width_present = true;
   10344:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1034c:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   10350:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   10352:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   10356:	2800      	cmp	r0, #0
   10358:	db60      	blt.n	1041c <cbvprintf+0x204>
   1035a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   1035c:	4313      	orrs	r3, r2
   1035e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10362:	f363 0241 	bfi	r2, r3, #1, #1
   10366:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   1036a:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   1036c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1036e:	781b      	ldrb	r3, [r3, #0]
   10370:	2b2e      	cmp	r3, #46	; 0x2e
   10372:	bf14      	ite	ne
   10374:	2300      	movne	r3, #0
   10376:	2301      	moveq	r3, #1
   10378:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1037c:	f363 0241 	bfi	r2, r3, #1, #1
   10380:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   10384:	2b00      	cmp	r3, #0
   10386:	d04b      	beq.n	10420 <cbvprintf+0x208>
	++sp;
   10388:	9b05      	ldr	r3, [sp, #20]
   1038a:	1c5a      	adds	r2, r3, #1
   1038c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   1038e:	785b      	ldrb	r3, [r3, #1]
   10390:	2b2a      	cmp	r3, #42	; 0x2a
   10392:	d048      	beq.n	10426 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   10394:	a805      	add	r0, sp, #20
   10396:	f7ff feb9 	bl	1010c <extract_decimal>
	conv->prec_value = prec;
   1039a:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   1039c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   103a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   103a4:	2800      	cmp	r0, #0
   103a6:	db47      	blt.n	10438 <cbvprintf+0x220>
   103a8:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   103aa:	4313      	orrs	r3, r2
   103ac:	f89d 2020 	ldrb.w	r2, [sp, #32]
   103b0:	f363 0241 	bfi	r2, r3, #1, #1
   103b4:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   103b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   103bc:	f898 3000 	ldrb.w	r3, [r8]
   103c0:	3b4c      	subs	r3, #76	; 0x4c
   103c2:	2b2e      	cmp	r3, #46	; 0x2e
   103c4:	f200 80dc 	bhi.w	10580 <cbvprintf+0x368>
   103c8:	e8df f003 	tbb	[pc, r3]
   103cc:	dadadaca 	.word	0xdadadaca
   103d0:	dadadada 	.word	0xdadadada
   103d4:	dadadada 	.word	0xdadadada
   103d8:	dadadada 	.word	0xdadadada
   103dc:	dadadada 	.word	0xdadadada
   103e0:	dadadada 	.word	0xdadadada
   103e4:	dadadada 	.word	0xdadadada
   103e8:	da6ada38 	.word	0xda6ada38
   103ec:	dadada51 	.word	0xdadada51
   103f0:	dadadada 	.word	0xdadadada
   103f4:	dadadac0 	.word	0xdadadac0
   103f8:	dada      	.short	0xdada
   103fa:	b6          	.byte	0xb6
   103fb:	00          	.byte	0x00
		conv->flag_zero = false;
   103fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10400:	f36f 1386 	bfc	r3, #6, #1
   10404:	f88d 3020 	strb.w	r3, [sp, #32]
   10408:	e78a      	b.n	10320 <cbvprintf+0x108>
		conv->width_star = true;
   1040a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1040e:	f043 0301 	orr.w	r3, r3, #1
   10412:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   10416:	4643      	mov	r3, r8
   10418:	3301      	adds	r3, #1
   1041a:	e7a7      	b.n	1036c <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   1041c:	2201      	movs	r2, #1
   1041e:	e79d      	b.n	1035c <cbvprintf+0x144>
		return sp;
   10420:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10424:	e7ca      	b.n	103bc <cbvprintf+0x1a4>
		conv->prec_star = true;
   10426:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1042a:	f043 0304 	orr.w	r3, r3, #4
   1042e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   10432:	f102 0801 	add.w	r8, r2, #1
   10436:	e7c1      	b.n	103bc <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   10438:	2201      	movs	r2, #1
   1043a:	e7b6      	b.n	103aa <cbvprintf+0x192>
		if (*++sp == 'h') {
   1043c:	f108 0201 	add.w	r2, r8, #1
   10440:	f898 3001 	ldrb.w	r3, [r8, #1]
   10444:	2b68      	cmp	r3, #104	; 0x68
   10446:	d008      	beq.n	1045a <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   10448:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1044c:	2102      	movs	r1, #2
   1044e:	f361 03c6 	bfi	r3, r1, #3, #4
   10452:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   10456:	4690      	mov	r8, r2
   10458:	e02b      	b.n	104b2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   1045a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1045e:	2201      	movs	r2, #1
   10460:	f362 03c6 	bfi	r3, r2, #3, #4
   10464:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   10468:	f108 0802 	add.w	r8, r8, #2
   1046c:	e021      	b.n	104b2 <cbvprintf+0x29a>
		if (*++sp == 'l') {
   1046e:	f108 0201 	add.w	r2, r8, #1
   10472:	f898 3001 	ldrb.w	r3, [r8, #1]
   10476:	2b6c      	cmp	r3, #108	; 0x6c
   10478:	d008      	beq.n	1048c <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   1047a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1047e:	2103      	movs	r1, #3
   10480:	f361 03c6 	bfi	r3, r1, #3, #4
   10484:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   10488:	4690      	mov	r8, r2
   1048a:	e012      	b.n	104b2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   1048c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10490:	2204      	movs	r2, #4
   10492:	f362 03c6 	bfi	r3, r2, #3, #4
   10496:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   1049a:	f108 0802 	add.w	r8, r8, #2
   1049e:	e008      	b.n	104b2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   104a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   104a4:	2205      	movs	r2, #5
   104a6:	f362 03c6 	bfi	r3, r2, #3, #4
   104aa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   104ae:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   104b2:	f818 3b01 	ldrb.w	r3, [r8], #1
   104b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   104ba:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   104be:	2a37      	cmp	r2, #55	; 0x37
   104c0:	f200 8150 	bhi.w	10764 <cbvprintf+0x54c>
   104c4:	e8df f012 	tbh	[pc, r2, lsl #1]
   104c8:	014e0126 	.word	0x014e0126
   104cc:	014e014e 	.word	0x014e014e
   104d0:	01260126 	.word	0x01260126
   104d4:	014e0126 	.word	0x014e0126
   104d8:	014e014e 	.word	0x014e014e
   104dc:	014e014e 	.word	0x014e014e
   104e0:	014e014e 	.word	0x014e014e
   104e4:	014e014e 	.word	0x014e014e
   104e8:	014e014e 	.word	0x014e014e
   104ec:	014e014e 	.word	0x014e014e
   104f0:	014e014e 	.word	0x014e014e
   104f4:	0113014e 	.word	0x0113014e
   104f8:	014e014e 	.word	0x014e014e
   104fc:	014e014e 	.word	0x014e014e
   10500:	014e014e 	.word	0x014e014e
   10504:	014e014e 	.word	0x014e014e
   10508:	014e0126 	.word	0x014e0126
   1050c:	00630113 	.word	0x00630113
   10510:	01260126 	.word	0x01260126
   10514:	014e0126 	.word	0x014e0126
   10518:	014e0063 	.word	0x014e0063
   1051c:	014e014e 	.word	0x014e014e
   10520:	012f014e 	.word	0x012f014e
   10524:	013f0113 	.word	0x013f0113
   10528:	014e014e 	.word	0x014e014e
   1052c:	014e013f 	.word	0x014e013f
   10530:	014e0113 	.word	0x014e0113
   10534:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   10538:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1053c:	2206      	movs	r2, #6
   1053e:	f362 03c6 	bfi	r3, r2, #3, #4
   10542:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10546:	f108 0801 	add.w	r8, r8, #1
		break;
   1054a:	e7b2      	b.n	104b2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   1054c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10550:	2207      	movs	r2, #7
   10552:	f362 03c6 	bfi	r3, r2, #3, #4
   10556:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1055a:	f108 0801 	add.w	r8, r8, #1
		break;
   1055e:	e7a8      	b.n	104b2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   10560:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10564:	2208      	movs	r2, #8
   10566:	f362 03c6 	bfi	r3, r2, #3, #4
   1056a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1056e:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   10572:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10576:	f043 0302 	orr.w	r3, r3, #2
   1057a:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   1057e:	e798      	b.n	104b2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   10580:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10584:	f36f 03c6 	bfc	r3, #3, #4
   10588:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   1058c:	e791      	b.n	104b2 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   1058e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   10592:	2101      	movs	r1, #1
   10594:	f361 0202 	bfi	r2, r1, #0, #3
   10598:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   1059c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   105a0:	f002 0278 	and.w	r2, r2, #120	; 0x78
   105a4:	2a40      	cmp	r2, #64	; 0x40
   105a6:	f000 80aa 	beq.w	106fe <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   105aa:	2b63      	cmp	r3, #99	; 0x63
   105ac:	f000 80ae 	beq.w	1070c <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   105b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   105b4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   105b8:	4317      	orrs	r7, r2
   105ba:	f367 0341 	bfi	r3, r7, #1, #1
   105be:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   105c2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   105c6:	f013 0f01 	tst.w	r3, #1
   105ca:	f000 80da 	beq.w	10782 <cbvprintf+0x56a>
			width = va_arg(ap, int);
   105ce:	9b03      	ldr	r3, [sp, #12]
   105d0:	1d1a      	adds	r2, r3, #4
   105d2:	9203      	str	r2, [sp, #12]
   105d4:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   105d6:	2f00      	cmp	r7, #0
   105d8:	f2c0 80cb 	blt.w	10772 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   105dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   105e0:	f013 0f04 	tst.w	r3, #4
   105e4:	f000 80df 	beq.w	107a6 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   105e8:	9b03      	ldr	r3, [sp, #12]
   105ea:	1d1a      	adds	r2, r3, #4
   105ec:	9203      	str	r2, [sp, #12]
   105ee:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   105f2:	f1bb 0f00 	cmp.w	fp, #0
   105f6:	f2c0 80cd 	blt.w	10794 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   105fa:	2300      	movs	r3, #0
   105fc:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   105fe:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   10600:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10604:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   10608:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   1060c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   10610:	2b01      	cmp	r3, #1
   10612:	f000 80d1 	beq.w	107b8 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   10616:	2b02      	cmp	r3, #2
   10618:	f000 8116 	beq.w	10848 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   1061c:	2b04      	cmp	r3, #4
   1061e:	f000 8167 	beq.w	108f0 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   10622:	2b03      	cmp	r3, #3
   10624:	f000 817e 	beq.w	10924 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   10628:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1062c:	f019 0303 	ands.w	r3, r9, #3
   10630:	9302      	str	r3, [sp, #8]
   10632:	f040 817d 	bne.w	10930 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   10636:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1063a:	3b25      	subs	r3, #37	; 0x25
   1063c:	2b53      	cmp	r3, #83	; 0x53
   1063e:	f200 8233 	bhi.w	10aa8 <cbvprintf+0x890>
   10642:	e8df f013 	tbh	[pc, r3, lsl #1]
   10646:	0181      	.short	0x0181
   10648:	02310231 	.word	0x02310231
   1064c:	02310231 	.word	0x02310231
   10650:	02310231 	.word	0x02310231
   10654:	02310231 	.word	0x02310231
   10658:	02310231 	.word	0x02310231
   1065c:	02310231 	.word	0x02310231
   10660:	02310231 	.word	0x02310231
   10664:	02310231 	.word	0x02310231
   10668:	02310231 	.word	0x02310231
   1066c:	02310231 	.word	0x02310231
   10670:	02310231 	.word	0x02310231
   10674:	02310231 	.word	0x02310231
   10678:	02310231 	.word	0x02310231
   1067c:	02310231 	.word	0x02310231
   10680:	02310231 	.word	0x02310231
   10684:	02310231 	.word	0x02310231
   10688:	02310231 	.word	0x02310231
   1068c:	02310231 	.word	0x02310231
   10690:	02310231 	.word	0x02310231
   10694:	02310231 	.word	0x02310231
   10698:	02310231 	.word	0x02310231
   1069c:	02310231 	.word	0x02310231
   106a0:	02310231 	.word	0x02310231
   106a4:	02310231 	.word	0x02310231
   106a8:	02310231 	.word	0x02310231
   106ac:	023101c7 	.word	0x023101c7
   106b0:	02310231 	.word	0x02310231
   106b4:	02310231 	.word	0x02310231
   106b8:	02310231 	.word	0x02310231
   106bc:	02310231 	.word	0x02310231
   106c0:	01a10231 	.word	0x01a10231
   106c4:	023101ab 	.word	0x023101ab
   106c8:	02310231 	.word	0x02310231
   106cc:	01ab0231 	.word	0x01ab0231
   106d0:	02310231 	.word	0x02310231
   106d4:	02310231 	.word	0x02310231
   106d8:	01c70208 	.word	0x01c70208
   106dc:	023101ea 	.word	0x023101ea
   106e0:	018f0231 	.word	0x018f0231
   106e4:	01c70231 	.word	0x01c70231
   106e8:	02310231 	.word	0x02310231
   106ec:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   106ee:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   106f2:	2102      	movs	r1, #2
   106f4:	f361 0202 	bfi	r2, r1, #0, #3
   106f8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   106fc:	e74e      	b.n	1059c <cbvprintf+0x384>
			conv->invalid = true;
   106fe:	f89d 1020 	ldrb.w	r1, [sp, #32]
   10702:	f041 0101 	orr.w	r1, r1, #1
   10706:	f88d 1020 	strb.w	r1, [sp, #32]
   1070a:	e74e      	b.n	105aa <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1070c:	1e17      	subs	r7, r2, #0
   1070e:	bf18      	it	ne
   10710:	2701      	movne	r7, #1
   10712:	e74d      	b.n	105b0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   10714:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10718:	2204      	movs	r2, #4
   1071a:	f362 0302 	bfi	r3, r2, #0, #3
   1071e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   10722:	2701      	movs	r7, #1
			break;
   10724:	e744      	b.n	105b0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   10726:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1072a:	2203      	movs	r2, #3
   1072c:	f362 0302 	bfi	r3, r2, #0, #3
   10730:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   10734:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10738:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1073c:	2b40      	cmp	r3, #64	; 0x40
   1073e:	f47f af37 	bne.w	105b0 <cbvprintf+0x398>
			unsupported = true;
   10742:	2701      	movs	r7, #1
   10744:	e734      	b.n	105b0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   10746:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1074a:	2203      	movs	r2, #3
   1074c:	f362 0302 	bfi	r3, r2, #0, #3
   10750:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   10754:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10758:	f013 0f78 	tst.w	r3, #120	; 0x78
   1075c:	f43f af28 	beq.w	105b0 <cbvprintf+0x398>
			unsupported = true;
   10760:	2701      	movs	r7, #1
   10762:	e725      	b.n	105b0 <cbvprintf+0x398>
		conv->invalid = true;
   10764:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10768:	f043 0301 	orr.w	r3, r3, #1
   1076c:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   10770:	e71e      	b.n	105b0 <cbvprintf+0x398>
				conv->flag_dash = true;
   10772:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10776:	f043 0304 	orr.w	r3, r3, #4
   1077a:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   1077e:	427f      	negs	r7, r7
   10780:	e72c      	b.n	105dc <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   10782:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   10786:	2b00      	cmp	r3, #0
   10788:	db02      	blt.n	10790 <cbvprintf+0x578>
		int width = -1;
   1078a:	f04f 37ff 	mov.w	r7, #4294967295
   1078e:	e725      	b.n	105dc <cbvprintf+0x3c4>
			width = conv->width_value;
   10790:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10792:	e723      	b.n	105dc <cbvprintf+0x3c4>
				conv->prec_present = false;
   10794:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10798:	f36f 0341 	bfc	r3, #1, #1
   1079c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   107a0:	f04f 3bff 	mov.w	fp, #4294967295
   107a4:	e729      	b.n	105fa <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   107a6:	f013 0f02 	tst.w	r3, #2
   107aa:	d002      	beq.n	107b2 <cbvprintf+0x59a>
			precision = conv->prec_value;
   107ac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   107b0:	e723      	b.n	105fa <cbvprintf+0x3e2>
		int precision = -1;
   107b2:	f04f 3bff 	mov.w	fp, #4294967295
   107b6:	e720      	b.n	105fa <cbvprintf+0x3e2>
			switch (length_mod) {
   107b8:	1ecb      	subs	r3, r1, #3
   107ba:	2b04      	cmp	r3, #4
   107bc:	d804      	bhi.n	107c8 <cbvprintf+0x5b0>
   107be:	e8df f003 	tbb	[pc, r3]
   107c2:	1d0b      	.short	0x1d0b
   107c4:	3529      	.short	0x3529
   107c6:	35          	.byte	0x35
   107c7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   107c8:	9b03      	ldr	r3, [sp, #12]
   107ca:	1d1a      	adds	r2, r3, #4
   107cc:	9203      	str	r2, [sp, #12]
   107ce:	681a      	ldr	r2, [r3, #0]
   107d0:	17d3      	asrs	r3, r2, #31
   107d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   107d6:	e006      	b.n	107e6 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   107d8:	9b03      	ldr	r3, [sp, #12]
   107da:	1d1a      	adds	r2, r3, #4
   107dc:	9203      	str	r2, [sp, #12]
   107de:	681a      	ldr	r2, [r3, #0]
   107e0:	17d3      	asrs	r3, r2, #31
   107e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   107e6:	2901      	cmp	r1, #1
   107e8:	d028      	beq.n	1083c <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   107ea:	2902      	cmp	r1, #2
   107ec:	f47f af1c 	bne.w	10628 <cbvprintf+0x410>
				value->sint = (short)value->sint;
   107f0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   107f4:	17d3      	asrs	r3, r2, #31
   107f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   107fa:	e715      	b.n	10628 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   107fc:	9b03      	ldr	r3, [sp, #12]
   107fe:	3307      	adds	r3, #7
   10800:	f023 0307 	bic.w	r3, r3, #7
   10804:	f103 0208 	add.w	r2, r3, #8
   10808:	9203      	str	r2, [sp, #12]
   1080a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1080e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   10812:	e7e8      	b.n	107e6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   10814:	9b03      	ldr	r3, [sp, #12]
   10816:	3307      	adds	r3, #7
   10818:	f023 0307 	bic.w	r3, r3, #7
   1081c:	f103 0208 	add.w	r2, r3, #8
   10820:	9203      	str	r2, [sp, #12]
   10822:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   10826:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1082a:	e7dc      	b.n	107e6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1082c:	9b03      	ldr	r3, [sp, #12]
   1082e:	1d1a      	adds	r2, r3, #4
   10830:	9203      	str	r2, [sp, #12]
   10832:	681a      	ldr	r2, [r3, #0]
   10834:	17d3      	asrs	r3, r2, #31
				value->sint =
   10836:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1083a:	e7d4      	b.n	107e6 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   1083c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10840:	9306      	str	r3, [sp, #24]
   10842:	2300      	movs	r3, #0
   10844:	9307      	str	r3, [sp, #28]
   10846:	e6ef      	b.n	10628 <cbvprintf+0x410>
			switch (length_mod) {
   10848:	1ecb      	subs	r3, r1, #3
   1084a:	2b04      	cmp	r3, #4
   1084c:	d804      	bhi.n	10858 <cbvprintf+0x640>
   1084e:	e8df f003 	tbb	[pc, r3]
   10852:	1f0b      	.short	0x1f0b
   10854:	4135      	.short	0x4135
   10856:	41          	.byte	0x41
   10857:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   10858:	9b03      	ldr	r3, [sp, #12]
   1085a:	1d1a      	adds	r2, r3, #4
   1085c:	9203      	str	r2, [sp, #12]
   1085e:	681b      	ldr	r3, [r3, #0]
   10860:	9306      	str	r3, [sp, #24]
   10862:	2300      	movs	r3, #0
   10864:	9307      	str	r3, [sp, #28]
				break;
   10866:	e01e      	b.n	108a6 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   10868:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   1086c:	2b63      	cmp	r3, #99	; 0x63
   1086e:	d007      	beq.n	10880 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   10870:	9b03      	ldr	r3, [sp, #12]
   10872:	1d1a      	adds	r2, r3, #4
   10874:	9203      	str	r2, [sp, #12]
   10876:	681b      	ldr	r3, [r3, #0]
   10878:	9306      	str	r3, [sp, #24]
   1087a:	2300      	movs	r3, #0
   1087c:	9307      	str	r3, [sp, #28]
   1087e:	e012      	b.n	108a6 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   10880:	9b03      	ldr	r3, [sp, #12]
   10882:	1d1a      	adds	r2, r3, #4
   10884:	9203      	str	r2, [sp, #12]
   10886:	681b      	ldr	r3, [r3, #0]
   10888:	9306      	str	r3, [sp, #24]
   1088a:	2300      	movs	r3, #0
   1088c:	9307      	str	r3, [sp, #28]
   1088e:	e00a      	b.n	108a6 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   10890:	9b03      	ldr	r3, [sp, #12]
   10892:	3307      	adds	r3, #7
   10894:	f023 0307 	bic.w	r3, r3, #7
   10898:	f103 0208 	add.w	r2, r3, #8
   1089c:	9203      	str	r2, [sp, #12]
   1089e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   108a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   108a6:	2901      	cmp	r1, #1
   108a8:	d01c      	beq.n	108e4 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   108aa:	2902      	cmp	r1, #2
   108ac:	f47f aebc 	bne.w	10628 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   108b0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   108b4:	9306      	str	r3, [sp, #24]
   108b6:	2300      	movs	r3, #0
   108b8:	9307      	str	r3, [sp, #28]
   108ba:	e6b5      	b.n	10628 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   108bc:	9b03      	ldr	r3, [sp, #12]
   108be:	3307      	adds	r3, #7
   108c0:	f023 0307 	bic.w	r3, r3, #7
   108c4:	f103 0208 	add.w	r2, r3, #8
   108c8:	9203      	str	r2, [sp, #12]
   108ca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   108ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   108d2:	e7e8      	b.n	108a6 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   108d4:	9b03      	ldr	r3, [sp, #12]
   108d6:	1d1a      	adds	r2, r3, #4
   108d8:	9203      	str	r2, [sp, #12]
   108da:	681b      	ldr	r3, [r3, #0]
				value->uint =
   108dc:	9306      	str	r3, [sp, #24]
   108de:	2300      	movs	r3, #0
   108e0:	9307      	str	r3, [sp, #28]
				break;
   108e2:	e7e0      	b.n	108a6 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   108e4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   108e8:	9306      	str	r3, [sp, #24]
   108ea:	2300      	movs	r3, #0
   108ec:	9307      	str	r3, [sp, #28]
   108ee:	e69b      	b.n	10628 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   108f0:	2908      	cmp	r1, #8
   108f2:	d00b      	beq.n	1090c <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   108f4:	9b03      	ldr	r3, [sp, #12]
   108f6:	3307      	adds	r3, #7
   108f8:	f023 0307 	bic.w	r3, r3, #7
   108fc:	f103 0208 	add.w	r2, r3, #8
   10900:	9203      	str	r2, [sp, #12]
   10902:	e9d3 2300 	ldrd	r2, r3, [r3]
   10906:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1090a:	e68d      	b.n	10628 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   1090c:	9b03      	ldr	r3, [sp, #12]
   1090e:	3307      	adds	r3, #7
   10910:	f023 0307 	bic.w	r3, r3, #7
   10914:	f103 0208 	add.w	r2, r3, #8
   10918:	9203      	str	r2, [sp, #12]
   1091a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1091e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10922:	e681      	b.n	10628 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   10924:	9b03      	ldr	r3, [sp, #12]
   10926:	1d1a      	adds	r2, r3, #4
   10928:	9203      	str	r2, [sp, #12]
   1092a:	681b      	ldr	r3, [r3, #0]
   1092c:	9306      	str	r3, [sp, #24]
   1092e:	e67b      	b.n	10628 <cbvprintf+0x410>
			OUTS(sp, fp);
   10930:	4643      	mov	r3, r8
   10932:	4652      	mov	r2, sl
   10934:	4629      	mov	r1, r5
   10936:	4630      	mov	r0, r6
   10938:	f00f fd0d 	bl	20356 <outs>
   1093c:	2800      	cmp	r0, #0
   1093e:	f2c0 814f 	blt.w	10be0 <cbvprintf+0x9c8>
   10942:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   10944:	46c2      	mov	sl, r8
			continue;
   10946:	e46f      	b.n	10228 <cbvprintf+0x10>
		case '%':
			OUTC('%');
   10948:	4629      	mov	r1, r5
   1094a:	2025      	movs	r0, #37	; 0x25
   1094c:	47b0      	blx	r6
   1094e:	2800      	cmp	r0, #0
   10950:	f2c0 8146 	blt.w	10be0 <cbvprintf+0x9c8>
   10954:	3401      	adds	r4, #1
		char sign = 0;
   10956:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1095a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1095e:	f04f 0a00 	mov.w	sl, #0
			break;
   10962:	e0a7      	b.n	10ab4 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   10964:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   10968:	f1bb 0f00 	cmp.w	fp, #0
   1096c:	db08      	blt.n	10980 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   1096e:	4659      	mov	r1, fp
   10970:	4650      	mov	r0, sl
   10972:	f014 f804 	bl	2497e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   10976:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   1097a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   1097e:	e099      	b.n	10ab4 <cbvprintf+0x89c>
				len = strlen(bps);
   10980:	4650      	mov	r0, sl
   10982:	f7fb fc77 	bl	c274 <strlen>
   10986:	e7f6      	b.n	10976 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10988:	9b06      	ldr	r3, [sp, #24]
   1098a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   1098e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   10992:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   10996:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   1099a:	e08b      	b.n	10ab4 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   1099c:	f019 0f08 	tst.w	r9, #8
   109a0:	d105      	bne.n	109ae <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   109a2:	f019 0910 	ands.w	r9, r9, #16
   109a6:	d004      	beq.n	109b2 <cbvprintf+0x79a>
				sign = ' ';
   109a8:	f04f 0920 	mov.w	r9, #32
   109ac:	e001      	b.n	109b2 <cbvprintf+0x79a>
				sign = '+';
   109ae:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   109b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   109b6:	2a00      	cmp	r2, #0
   109b8:	f173 0100 	sbcs.w	r1, r3, #0
   109bc:	db02      	blt.n	109c4 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   109be:	e9cd 2306 	strd	r2, r3, [sp, #24]
   109c2:	e009      	b.n	109d8 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   109c4:	4252      	negs	r2, r2
   109c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   109ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   109ce:	f04f 092d 	mov.w	r9, #45	; 0x2d
   109d2:	e001      	b.n	109d8 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   109d4:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   109d8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   109dc:	9300      	str	r3, [sp, #0]
   109de:	ab0c      	add	r3, sp, #48	; 0x30
   109e0:	aa08      	add	r2, sp, #32
   109e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   109e6:	f7ff fba7 	bl	10138 <encode_uint>
   109ea:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   109ec:	f1bb 0f00 	cmp.w	fp, #0
   109f0:	f2c0 8090 	blt.w	10b14 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   109f4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   109f8:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   109fc:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10a00:	f36f 1286 	bfc	r2, #6, #1
   10a04:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   10a08:	459b      	cmp	fp, r3
   10a0a:	f240 8086 	bls.w	10b1a <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   10a0e:	ebab 0303 	sub.w	r3, fp, r3
   10a12:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   10a14:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10a18:	e04c      	b.n	10ab4 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   10a1a:	9806      	ldr	r0, [sp, #24]
   10a1c:	b930      	cbnz	r0, 10a2c <cbvprintf+0x814>
		char sign = 0;
   10a1e:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   10a22:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 10be8 <cbvprintf+0x9d0>
			bps = "(nil)";
   10a26:	f1ab 0a05 	sub.w	sl, fp, #5
   10a2a:	e043      	b.n	10ab4 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10a2c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   10a30:	9300      	str	r3, [sp, #0]
   10a32:	ab0c      	add	r3, sp, #48	; 0x30
   10a34:	aa08      	add	r2, sp, #32
   10a36:	2100      	movs	r1, #0
   10a38:	f7ff fb7e 	bl	10138 <encode_uint>
   10a3c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   10a3e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10a42:	f043 0310 	orr.w	r3, r3, #16
   10a46:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   10a4a:	2378      	movs	r3, #120	; 0x78
   10a4c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   10a50:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   10a54:	e7ca      	b.n	109ec <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   10a56:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   10a58:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10a5c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   10a60:	2b07      	cmp	r3, #7
   10a62:	d806      	bhi.n	10a72 <cbvprintf+0x85a>
   10a64:	e8df f003 	tbb	[pc, r3]
   10a68:	100e0c04 	.word	0x100e0c04
   10a6c:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   10a70:	6014      	str	r4, [r2, #0]
		char sign = 0;
   10a72:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   10a76:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   10a7a:	f04f 0a00 	mov.w	sl, #0
}
   10a7e:	e019      	b.n	10ab4 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   10a80:	7014      	strb	r4, [r2, #0]
		break;
   10a82:	e7f6      	b.n	10a72 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   10a84:	8014      	strh	r4, [r2, #0]
		break;
   10a86:	e7f4      	b.n	10a72 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   10a88:	6014      	str	r4, [r2, #0]
		break;
   10a8a:	e7f2      	b.n	10a72 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   10a8c:	4620      	mov	r0, r4
   10a8e:	17e1      	asrs	r1, r4, #31
   10a90:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   10a94:	e7ed      	b.n	10a72 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   10a96:	4620      	mov	r0, r4
   10a98:	17e1      	asrs	r1, r4, #31
   10a9a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   10a9e:	e7e8      	b.n	10a72 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   10aa0:	6014      	str	r4, [r2, #0]
		break;
   10aa2:	e7e6      	b.n	10a72 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10aa4:	6014      	str	r4, [r2, #0]
		break;
   10aa6:	e7e4      	b.n	10a72 <cbvprintf+0x85a>
		switch (conv->specifier) {
   10aa8:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10aac:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10ab0:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   10ab4:	f1ba 0f00 	cmp.w	sl, #0
   10ab8:	f000 808e 	beq.w	10bd8 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   10abc:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   10ac0:	f1b9 0f00 	cmp.w	r9, #0
   10ac4:	d000      	beq.n	10ac8 <cbvprintf+0x8b0>
			nj_len += 1U;
   10ac6:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   10ac8:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   10acc:	f011 0f10 	tst.w	r1, #16
   10ad0:	d026      	beq.n	10b20 <cbvprintf+0x908>
			nj_len += 2U;
   10ad2:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   10ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ad6:	4413      	add	r3, r2
		if (conv->pad_fp) {
   10ad8:	f011 0f40 	tst.w	r1, #64	; 0x40
   10adc:	d001      	beq.n	10ae2 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   10ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10ae0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   10ae2:	2f00      	cmp	r7, #0
   10ae4:	dd32      	ble.n	10b4c <cbvprintf+0x934>
			width -= (int)nj_len;
   10ae6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   10ae8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10aec:	f013 0f04 	tst.w	r3, #4
   10af0:	d12c      	bne.n	10b4c <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   10af2:	f013 0f40 	tst.w	r3, #64	; 0x40
   10af6:	d018      	beq.n	10b2a <cbvprintf+0x912>
					if (sign != 0) {
   10af8:	f1b9 0f00 	cmp.w	r9, #0
   10afc:	d018      	beq.n	10b30 <cbvprintf+0x918>
						OUTC(sign);
   10afe:	4629      	mov	r1, r5
   10b00:	4648      	mov	r0, r9
   10b02:	47b0      	blx	r6
   10b04:	2800      	cmp	r0, #0
   10b06:	db6b      	blt.n	10be0 <cbvprintf+0x9c8>
   10b08:	3401      	adds	r4, #1
						sign = 0;
   10b0a:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   10b0e:	2330      	movs	r3, #48	; 0x30
   10b10:	9302      	str	r3, [sp, #8]
   10b12:	e00f      	b.n	10b34 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   10b14:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10b18:	e7cc      	b.n	10ab4 <cbvprintf+0x89c>
   10b1a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10b1e:	e7c9      	b.n	10ab4 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   10b20:	f011 0f08 	tst.w	r1, #8
   10b24:	d0d6      	beq.n	10ad4 <cbvprintf+0x8bc>
			nj_len += 1U;
   10b26:	3201      	adds	r2, #1
   10b28:	e7d4      	b.n	10ad4 <cbvprintf+0x8bc>
				char pad = ' ';
   10b2a:	2320      	movs	r3, #32
   10b2c:	9302      	str	r3, [sp, #8]
   10b2e:	e001      	b.n	10b34 <cbvprintf+0x91c>
					pad = '0';
   10b30:	2330      	movs	r3, #48	; 0x30
   10b32:	9302      	str	r3, [sp, #8]
   10b34:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   10b36:	1e5f      	subs	r7, r3, #1
   10b38:	2b00      	cmp	r3, #0
   10b3a:	dd07      	ble.n	10b4c <cbvprintf+0x934>
					OUTC(pad);
   10b3c:	4629      	mov	r1, r5
   10b3e:	9802      	ldr	r0, [sp, #8]
   10b40:	47b0      	blx	r6
   10b42:	2800      	cmp	r0, #0
   10b44:	db4c      	blt.n	10be0 <cbvprintf+0x9c8>
   10b46:	3401      	adds	r4, #1
				while (width-- > 0) {
   10b48:	463b      	mov	r3, r7
   10b4a:	e7f4      	b.n	10b36 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   10b4c:	f1b9 0f00 	cmp.w	r9, #0
   10b50:	d005      	beq.n	10b5e <cbvprintf+0x946>
			OUTC(sign);
   10b52:	4629      	mov	r1, r5
   10b54:	4648      	mov	r0, r9
   10b56:	47b0      	blx	r6
   10b58:	2800      	cmp	r0, #0
   10b5a:	db41      	blt.n	10be0 <cbvprintf+0x9c8>
   10b5c:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   10b5e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10b62:	f3c3 1200 	ubfx	r2, r3, #4, #1
   10b66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10b6a:	4313      	orrs	r3, r2
   10b6c:	d005      	beq.n	10b7a <cbvprintf+0x962>
				OUTC('0');
   10b6e:	4629      	mov	r1, r5
   10b70:	2030      	movs	r0, #48	; 0x30
   10b72:	47b0      	blx	r6
   10b74:	2800      	cmp	r0, #0
   10b76:	db33      	blt.n	10be0 <cbvprintf+0x9c8>
   10b78:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   10b7a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10b7e:	f013 0f10 	tst.w	r3, #16
   10b82:	d006      	beq.n	10b92 <cbvprintf+0x97a>
				OUTC(conv->specifier);
   10b84:	4629      	mov	r1, r5
   10b86:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10b8a:	47b0      	blx	r6
   10b8c:	2800      	cmp	r0, #0
   10b8e:	db27      	blt.n	10be0 <cbvprintf+0x9c8>
   10b90:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   10b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   10b94:	f103 39ff 	add.w	r9, r3, #4294967295
   10b98:	2b00      	cmp	r3, #0
   10b9a:	dd07      	ble.n	10bac <cbvprintf+0x994>
				OUTC('0');
   10b9c:	4629      	mov	r1, r5
   10b9e:	2030      	movs	r0, #48	; 0x30
   10ba0:	47b0      	blx	r6
   10ba2:	2800      	cmp	r0, #0
   10ba4:	db1c      	blt.n	10be0 <cbvprintf+0x9c8>
   10ba6:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   10ba8:	464b      	mov	r3, r9
   10baa:	e7f3      	b.n	10b94 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   10bac:	465b      	mov	r3, fp
   10bae:	4652      	mov	r2, sl
   10bb0:	4629      	mov	r1, r5
   10bb2:	4630      	mov	r0, r6
   10bb4:	f00f fbcf 	bl	20356 <outs>
   10bb8:	2800      	cmp	r0, #0
   10bba:	db11      	blt.n	10be0 <cbvprintf+0x9c8>
   10bbc:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   10bbe:	2f00      	cmp	r7, #0
   10bc0:	dd07      	ble.n	10bd2 <cbvprintf+0x9ba>
			OUTC(' ');
   10bc2:	4629      	mov	r1, r5
   10bc4:	2020      	movs	r0, #32
   10bc6:	47b0      	blx	r6
   10bc8:	2800      	cmp	r0, #0
   10bca:	db09      	blt.n	10be0 <cbvprintf+0x9c8>
   10bcc:	3401      	adds	r4, #1
			--width;
   10bce:	3f01      	subs	r7, #1
   10bd0:	e7f5      	b.n	10bbe <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   10bd2:	46c2      	mov	sl, r8
   10bd4:	f7ff bb28 	b.w	10228 <cbvprintf+0x10>
   10bd8:	46c2      	mov	sl, r8
   10bda:	f7ff bb25 	b.w	10228 <cbvprintf+0x10>
		}
	}

	return count;
   10bde:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   10be0:	b013      	add	sp, #76	; 0x4c
   10be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10be6:	bf00      	nop
   10be8:	00025005 	.word	0x00025005

00010bec <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   10bec:	b508      	push	{r3, lr}
   10bee:	f04f 0240 	mov.w	r2, #64	; 0x40
   10bf2:	f3ef 8311 	mrs	r3, BASEPRI
   10bf6:	f382 8812 	msr	BASEPRI_MAX, r2
   10bfa:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   10bfe:	f002 fc6f 	bl	134e0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   10c02:	4803      	ldr	r0, [pc, #12]	; (10c10 <sys_reboot+0x24>)
   10c04:	f00f f845 	bl	1fc92 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10c08:	f001 fd16 	bl	12638 <arch_cpu_idle>
   10c0c:	e7fc      	b.n	10c08 <sys_reboot+0x1c>
   10c0e:	bf00      	nop
   10c10:	00025008 	.word	0x00025008

00010c14 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   10c14:	4b05      	ldr	r3, [pc, #20]	; (10c2c <is_rodata+0x18>)
   10c16:	4298      	cmp	r0, r3
   10c18:	d304      	bcc.n	10c24 <is_rodata+0x10>
   10c1a:	4b05      	ldr	r3, [pc, #20]	; (10c30 <is_rodata+0x1c>)
   10c1c:	4298      	cmp	r0, r3
   10c1e:	d303      	bcc.n	10c28 <is_rodata+0x14>
   10c20:	2000      	movs	r0, #0
   10c22:	4770      	bx	lr
   10c24:	2000      	movs	r0, #0
   10c26:	4770      	bx	lr
   10c28:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   10c2a:	4770      	bx	lr
   10c2c:	000249a4 	.word	0x000249a4
   10c30:	00027088 	.word	0x00027088

00010c34 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   10c34:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   10c36:	4b06      	ldr	r3, [pc, #24]	; (10c50 <thread_set+0x1c>)
   10c38:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   10c3a:	b118      	cbz	r0, 10c44 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   10c3c:	4b05      	ldr	r3, [pc, #20]	; (10c54 <thread_set+0x20>)
   10c3e:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   10c40:	2b09      	cmp	r3, #9
   10c42:	dc00      	bgt.n	10c46 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   10c44:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   10c46:	4804      	ldr	r0, [pc, #16]	; (10c58 <thread_set+0x24>)
   10c48:	f00a ffd2 	bl	1bbf0 <z_impl_k_sem_give>
}
   10c4c:	e7fa      	b.n	10c44 <thread_set+0x10>
   10c4e:	bf00      	nop
   10c50:	20001fb4 	.word	0x20001fb4
   10c54:	20001f84 	.word	0x20001f84
   10c58:	20000750 	.word	0x20000750

00010c5c <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   10c5c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   10c5e:	4802      	ldr	r0, [pc, #8]	; (10c68 <log_process_thread_timer_expiry_fn+0xc>)
   10c60:	f00a ffc6 	bl	1bbf0 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   10c64:	bd08      	pop	{r3, pc}
   10c66:	bf00      	nop
   10c68:	20000750 	.word	0x20000750

00010c6c <next_pending>:
{
   10c6c:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   10c6e:	4803      	ldr	r0, [pc, #12]	; (10c7c <next_pending+0x10>)
   10c70:	f00f fb9a 	bl	203a8 <log_list_head_peek>
}
   10c74:	3800      	subs	r0, #0
   10c76:	bf18      	it	ne
   10c78:	2001      	movne	r0, #1
   10c7a:	bd08      	pop	{r3, pc}
   10c7c:	20001f90 	.word	0x20001f90

00010c80 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   10c80:	b530      	push	{r4, r5, lr}
   10c82:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   10c84:	2200      	movs	r2, #0
   10c86:	490f      	ldr	r1, [pc, #60]	; (10cc4 <enable_logger+0x44>)
   10c88:	480f      	ldr	r0, [pc, #60]	; (10cc8 <enable_logger+0x48>)
   10c8a:	f013 fd49 	bl	24720 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10c8e:	4d0f      	ldr	r5, [pc, #60]	; (10ccc <enable_logger+0x4c>)
   10c90:	2200      	movs	r2, #0
   10c92:	2300      	movs	r3, #0
   10c94:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10c98:	2400      	movs	r4, #0
   10c9a:	9404      	str	r4, [sp, #16]
   10c9c:	230e      	movs	r3, #14
   10c9e:	9303      	str	r3, [sp, #12]
   10ca0:	9402      	str	r4, [sp, #8]
   10ca2:	9401      	str	r4, [sp, #4]
   10ca4:	9400      	str	r4, [sp, #0]
   10ca6:	4b0a      	ldr	r3, [pc, #40]	; (10cd0 <enable_logger+0x50>)
   10ca8:	f44f 7240 	mov.w	r2, #768	; 0x300
   10cac:	4909      	ldr	r1, [pc, #36]	; (10cd4 <enable_logger+0x54>)
   10cae:	4628      	mov	r0, r5
   10cb0:	f013 f883 	bl	23dba <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   10cb4:	4908      	ldr	r1, [pc, #32]	; (10cd8 <enable_logger+0x58>)
   10cb6:	4628      	mov	r0, r5
   10cb8:	f00a fda2 	bl	1b800 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   10cbc:	4620      	mov	r0, r4
   10cbe:	b009      	add	sp, #36	; 0x24
   10cc0:	bd30      	pop	{r4, r5, pc}
   10cc2:	bf00      	nop
   10cc4:	00010c5d 	.word	0x00010c5d
   10cc8:	200015e0 	.word	0x200015e0
   10ccc:	20001618 	.word	0x20001618
   10cd0:	00011409 	.word	0x00011409
   10cd4:	20003880 	.word	0x20003880
   10cd8:	00025034 	.word	0x00025034

00010cdc <z_log_get_s_mask>:
{
   10cdc:	b470      	push	{r4, r5, r6}
   10cde:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   10ce0:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   10ce2:	4605      	mov	r5, r0
	bool arm = false;
   10ce4:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   10ce6:	e001      	b.n	10cec <z_log_get_s_mask+0x10>
			arm = !arm;
   10ce8:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   10cec:	f813 2b01 	ldrb.w	r2, [r3], #1
   10cf0:	b19a      	cbz	r2, 10d1a <z_log_get_s_mask+0x3e>
   10cf2:	428d      	cmp	r5, r1
   10cf4:	d211      	bcs.n	10d1a <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   10cf6:	2a25      	cmp	r2, #37	; 0x25
   10cf8:	d0f6      	beq.n	10ce8 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   10cfa:	2c00      	cmp	r4, #0
   10cfc:	d0f6      	beq.n	10cec <z_log_get_s_mask+0x10>
   10cfe:	4e08      	ldr	r6, [pc, #32]	; (10d20 <z_log_get_s_mask+0x44>)
   10d00:	5d96      	ldrb	r6, [r2, r6]
   10d02:	f016 0f03 	tst.w	r6, #3
   10d06:	d0f1      	beq.n	10cec <z_log_get_s_mask+0x10>
			if (curr == 's') {
   10d08:	2a73      	cmp	r2, #115	; 0x73
   10d0a:	d002      	beq.n	10d12 <z_log_get_s_mask+0x36>
			arg++;
   10d0c:	3501      	adds	r5, #1
			arm = false;
   10d0e:	2400      	movs	r4, #0
   10d10:	e7ec      	b.n	10cec <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   10d12:	2201      	movs	r2, #1
   10d14:	40aa      	lsls	r2, r5
   10d16:	4310      	orrs	r0, r2
   10d18:	e7f8      	b.n	10d0c <z_log_get_s_mask+0x30>
}
   10d1a:	bc70      	pop	{r4, r5, r6}
   10d1c:	4770      	bx	lr
   10d1e:	bf00      	nop
   10d20:	00026f85 	.word	0x00026f85

00010d24 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10d24:	4b18      	ldr	r3, [pc, #96]	; (10d88 <log_init+0x64>)
   10d26:	f3bf 8f5b 	dmb	ish
   10d2a:	e853 2f00 	ldrex	r2, [r3]
   10d2e:	1c51      	adds	r1, r2, #1
   10d30:	e843 1000 	strex	r0, r1, [r3]
   10d34:	2800      	cmp	r0, #0
   10d36:	d1f8      	bne.n	10d2a <log_init+0x6>
   10d38:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   10d3c:	bb1a      	cbnz	r2, 10d86 <log_init+0x62>
{
   10d3e:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   10d40:	2400      	movs	r4, #0
   10d42:	e009      	b.n	10d58 <log_init+0x34>
					   backend->cb->ctx,
   10d44:	4b11      	ldr	r3, [pc, #68]	; (10d8c <log_init+0x68>)
   10d46:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   10d4a:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   10d4c:	2204      	movs	r2, #4
   10d4e:	6819      	ldr	r1, [r3, #0]
   10d50:	4628      	mov	r0, r5
   10d52:	f000 fb9d 	bl	11490 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10d56:	3401      	adds	r4, #1
   10d58:	4b0d      	ldr	r3, [pc, #52]	; (10d90 <log_init+0x6c>)
   10d5a:	4a0c      	ldr	r2, [pc, #48]	; (10d8c <log_init+0x68>)
   10d5c:	1a9b      	subs	r3, r3, r2
   10d5e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10d62:	da0f      	bge.n	10d84 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
   10d64:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   10d66:	4d09      	ldr	r5, [pc, #36]	; (10d8c <log_init+0x68>)
   10d68:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   10d6c:	7b2b      	ldrb	r3, [r5, #12]
   10d6e:	2b00      	cmp	r3, #0
   10d70:	d0f1      	beq.n	10d56 <log_init+0x32>
			if (backend->api->init != NULL) {
   10d72:	0123      	lsls	r3, r4, #4
   10d74:	4a05      	ldr	r2, [pc, #20]	; (10d8c <log_init+0x68>)
   10d76:	58d3      	ldr	r3, [r2, r3]
   10d78:	699b      	ldr	r3, [r3, #24]
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	d0e2      	beq.n	10d44 <log_init+0x20>
				backend->api->init(backend);
   10d7e:	4628      	mov	r0, r5
   10d80:	4798      	blx	r3
   10d82:	e7df      	b.n	10d44 <log_init+0x20>
}
   10d84:	bd70      	pop	{r4, r5, r6, pc}
   10d86:	4770      	bx	lr
   10d88:	20001f8c 	.word	0x20001f8c
   10d8c:	00024db0 	.word	0x00024db0
   10d90:	00024dc0 	.word	0x00024dc0

00010d94 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   10d94:	b138      	cbz	r0, 10da6 <log_set_timestamp_func+0x12>
{
   10d96:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   10d98:	4a04      	ldr	r2, [pc, #16]	; (10dac <log_set_timestamp_func+0x18>)
   10d9a:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   10d9c:	4608      	mov	r0, r1
   10d9e:	f000 fdf3 	bl	11988 <log_output_timestamp_freq_set>
	return 0;
   10da2:	2000      	movs	r0, #0
}
   10da4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   10da6:	f06f 0015 	mvn.w	r0, #21
}
   10daa:	4770      	bx	lr
   10dac:	20000414 	.word	0x20000414

00010db0 <log_core_init>:
{
   10db0:	b508      	push	{r3, lr}
	panic_mode = false;
   10db2:	2300      	movs	r3, #0
   10db4:	4a0a      	ldr	r2, [pc, #40]	; (10de0 <log_core_init+0x30>)
   10db6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   10db8:	4a0a      	ldr	r2, [pc, #40]	; (10de4 <log_core_init+0x34>)
   10dba:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   10dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10dc0:	4809      	ldr	r0, [pc, #36]	; (10de8 <log_core_init+0x38>)
   10dc2:	f7ff ffe7 	bl	10d94 <log_set_timestamp_func>
		log_msg_pool_init();
   10dc6:	f000 fb85 	bl	114d4 <log_msg_pool_init>
		log_list_init(&list);
   10dca:	4808      	ldr	r0, [pc, #32]	; (10dec <log_core_init+0x3c>)
   10dcc:	f00f fade 	bl	2038c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   10dd0:	2308      	movs	r3, #8
   10dd2:	2248      	movs	r2, #72	; 0x48
   10dd4:	4906      	ldr	r1, [pc, #24]	; (10df0 <log_core_init+0x40>)
   10dd6:	4807      	ldr	r0, [pc, #28]	; (10df4 <log_core_init+0x44>)
   10dd8:	f012 ff8c 	bl	23cf4 <k_mem_slab_init>
}
   10ddc:	bd08      	pop	{r3, pc}
   10dde:	bf00      	nop
   10de0:	200036bd 	.word	0x200036bd
   10de4:	20001f88 	.word	0x20001f88
   10de8:	000203c1 	.word	0x000203c1
   10dec:	20001f90 	.word	0x20001f90
   10df0:	20007128 	.word	0x20007128
   10df4:	20001f98 	.word	0x20001f98

00010df8 <get_msg>:
{
   10df8:	b510      	push	{r4, lr}
   10dfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   10dfe:	f3ef 8411 	mrs	r4, BASEPRI
   10e02:	f383 8812 	msr	BASEPRI_MAX, r3
   10e06:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   10e0a:	4804      	ldr	r0, [pc, #16]	; (10e1c <get_msg+0x24>)
   10e0c:	f00f face 	bl	203ac <log_list_head_get>
	__asm__ volatile(
   10e10:	f384 8811 	msr	BASEPRI, r4
   10e14:	f3bf 8f6f 	isb	sy
}
   10e18:	bd10      	pop	{r4, pc}
   10e1a:	bf00      	nop
   10e1c:	20001f90 	.word	0x20001f90

00010e20 <z_log_notify_backend_enabled>:
{
   10e20:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   10e22:	4b05      	ldr	r3, [pc, #20]	; (10e38 <z_log_notify_backend_enabled+0x18>)
   10e24:	781b      	ldrb	r3, [r3, #0]
   10e26:	b11b      	cbz	r3, 10e30 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   10e28:	4b03      	ldr	r3, [pc, #12]	; (10e38 <z_log_notify_backend_enabled+0x18>)
   10e2a:	2201      	movs	r2, #1
   10e2c:	701a      	strb	r2, [r3, #0]
}
   10e2e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   10e30:	4802      	ldr	r0, [pc, #8]	; (10e3c <z_log_notify_backend_enabled+0x1c>)
   10e32:	f00a fedd 	bl	1bbf0 <z_impl_k_sem_give>
}
   10e36:	e7f7      	b.n	10e28 <z_log_notify_backend_enabled+0x8>
   10e38:	200036bc 	.word	0x200036bc
   10e3c:	20000750 	.word	0x20000750

00010e40 <z_log_dropped>:
   10e40:	4b0c      	ldr	r3, [pc, #48]	; (10e74 <z_log_dropped+0x34>)
   10e42:	f3bf 8f5b 	dmb	ish
   10e46:	e853 2f00 	ldrex	r2, [r3]
   10e4a:	3201      	adds	r2, #1
   10e4c:	e843 2100 	strex	r1, r2, [r3]
   10e50:	2900      	cmp	r1, #0
   10e52:	d1f8      	bne.n	10e46 <z_log_dropped+0x6>
   10e54:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10e58:	4b07      	ldr	r3, [pc, #28]	; (10e78 <z_log_dropped+0x38>)
   10e5a:	f3bf 8f5b 	dmb	ish
   10e5e:	e853 2f00 	ldrex	r2, [r3]
   10e62:	3a01      	subs	r2, #1
   10e64:	e843 2100 	strex	r1, r2, [r3]
   10e68:	2900      	cmp	r1, #0
   10e6a:	d1f8      	bne.n	10e5e <z_log_dropped+0x1e>
   10e6c:	f3bf 8f5b 	dmb	ish
}
   10e70:	4770      	bx	lr
   10e72:	bf00      	nop
   10e74:	20001f88 	.word	0x20001f88
   10e78:	20001f84 	.word	0x20001f84

00010e7c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10e7c:	4b06      	ldr	r3, [pc, #24]	; (10e98 <z_log_dropped_read_and_clear+0x1c>)
}
   10e7e:	2000      	movs	r0, #0
   10e80:	4602      	mov	r2, r0
   10e82:	f3bf 8f5b 	dmb	ish
   10e86:	e853 0f00 	ldrex	r0, [r3]
   10e8a:	e843 2100 	strex	r1, r2, [r3]
   10e8e:	2900      	cmp	r1, #0
   10e90:	d1f9      	bne.n	10e86 <z_log_dropped_read_and_clear+0xa>
   10e92:	f3bf 8f5b 	dmb	ish
   10e96:	4770      	bx	lr
   10e98:	20001f88 	.word	0x20001f88

00010e9c <dropped_notify>:
{
   10e9c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   10e9e:	f7ff ffed 	bl	10e7c <z_log_dropped_read_and_clear>
   10ea2:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   10ea4:	2400      	movs	r4, #0
   10ea6:	e000      	b.n	10eaa <dropped_notify+0xe>
   10ea8:	3401      	adds	r4, #1
   10eaa:	4b0b      	ldr	r3, [pc, #44]	; (10ed8 <dropped_notify+0x3c>)
   10eac:	4a0b      	ldr	r2, [pc, #44]	; (10edc <dropped_notify+0x40>)
   10eae:	1a9b      	subs	r3, r3, r2
   10eb0:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10eb4:	da0f      	bge.n	10ed6 <dropped_notify+0x3a>
   10eb6:	4809      	ldr	r0, [pc, #36]	; (10edc <dropped_notify+0x40>)
   10eb8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   10ebc:	6843      	ldr	r3, [r0, #4]
   10ebe:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   10ec0:	2b00      	cmp	r3, #0
   10ec2:	d0f1      	beq.n	10ea8 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   10ec4:	0123      	lsls	r3, r4, #4
   10ec6:	4a05      	ldr	r2, [pc, #20]	; (10edc <dropped_notify+0x40>)
   10ec8:	58d3      	ldr	r3, [r2, r3]
   10eca:	691b      	ldr	r3, [r3, #16]
   10ecc:	2b00      	cmp	r3, #0
   10ece:	d0eb      	beq.n	10ea8 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   10ed0:	4629      	mov	r1, r5
   10ed2:	4798      	blx	r3
   10ed4:	e7e8      	b.n	10ea8 <dropped_notify+0xc>
}
   10ed6:	bd38      	pop	{r3, r4, r5, pc}
   10ed8:	00024dc0 	.word	0x00024dc0
   10edc:	00024db0 	.word	0x00024db0

00010ee0 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   10ee0:	4b03      	ldr	r3, [pc, #12]	; (10ef0 <z_log_dropped_pending+0x10>)
   10ee2:	6818      	ldr	r0, [r3, #0]
}
   10ee4:	2800      	cmp	r0, #0
   10ee6:	bfd4      	ite	le
   10ee8:	2000      	movle	r0, #0
   10eea:	2001      	movgt	r0, #1
   10eec:	4770      	bx	lr
   10eee:	bf00      	nop
   10ef0:	20001f88 	.word	0x20001f88

00010ef4 <z_log_strdup>:
{
   10ef4:	b570      	push	{r4, r5, r6, lr}
   10ef6:	b082      	sub	sp, #8
   10ef8:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   10efa:	f7ff fe8b 	bl	10c14 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   10efe:	bb10      	cbnz	r0, 10f46 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   10f00:	2200      	movs	r2, #0
   10f02:	2300      	movs	r3, #0
   10f04:	a901      	add	r1, sp, #4
   10f06:	4811      	ldr	r0, [pc, #68]	; (10f4c <z_log_strdup+0x58>)
   10f08:	f00a fc24 	bl	1b754 <k_mem_slab_alloc>
	if (err != 0) {
   10f0c:	b108      	cbz	r0, 10f12 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   10f0e:	4c10      	ldr	r4, [pc, #64]	; (10f50 <z_log_strdup+0x5c>)
   10f10:	e019      	b.n	10f46 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   10f12:	9b01      	ldr	r3, [sp, #4]
   10f14:	2201      	movs	r2, #1
   10f16:	f3bf 8f5b 	dmb	ish
   10f1a:	e853 1f00 	ldrex	r1, [r3]
   10f1e:	e843 2000 	strex	r0, r2, [r3]
   10f22:	2800      	cmp	r0, #0
   10f24:	d1f9      	bne.n	10f1a <z_log_strdup+0x26>
   10f26:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   10f2a:	9d01      	ldr	r5, [sp, #4]
   10f2c:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   10f2e:	2241      	movs	r2, #65	; 0x41
   10f30:	4621      	mov	r1, r4
   10f32:	4630      	mov	r0, r6
   10f34:	f013 fd10 	bl	24958 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   10f38:	237e      	movs	r3, #126	; 0x7e
   10f3a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   10f3e:	2300      	movs	r3, #0
   10f40:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
	return dup->buf;
   10f44:	4634      	mov	r4, r6
}
   10f46:	4620      	mov	r0, r4
   10f48:	b002      	add	sp, #8
   10f4a:	bd70      	pop	{r4, r5, r6, pc}
   10f4c:	20001f98 	.word	0x20001f98
   10f50:	0002503c 	.word	0x0002503c

00010f54 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   10f54:	b140      	cbz	r0, 10f68 <log_is_strdup+0x14>
   10f56:	4a07      	ldr	r2, [pc, #28]	; (10f74 <log_is_strdup+0x20>)
   10f58:	4290      	cmp	r0, r2
   10f5a:	d307      	bcc.n	10f6c <log_is_strdup+0x18>
   10f5c:	f502 7210 	add.w	r2, r2, #576	; 0x240
   10f60:	4290      	cmp	r0, r2
   10f62:	d305      	bcc.n	10f70 <log_is_strdup+0x1c>
   10f64:	2000      	movs	r0, #0
   10f66:	4770      	bx	lr
   10f68:	2000      	movs	r0, #0
   10f6a:	4770      	bx	lr
   10f6c:	2000      	movs	r0, #0
   10f6e:	4770      	bx	lr
   10f70:	2001      	movs	r0, #1
}
   10f72:	4770      	bx	lr
   10f74:	20007128 	.word	0x20007128

00010f78 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10f78:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   10f7a:	f013 0f01 	tst.w	r3, #1
   10f7e:	d000      	beq.n	10f82 <detect_missed_strdup+0xa>
   10f80:	4770      	bx	lr
{
   10f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10f86:	b083      	sub	sp, #12
   10f88:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   10f8a:	f00f fada 	bl	20542 <log_msg_str_get>
   10f8e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10f90:	4630      	mov	r0, r6
   10f92:	f00f fac1 	bl	20518 <log_msg_nargs_get>
   10f96:	4601      	mov	r1, r0
   10f98:	4638      	mov	r0, r7
   10f9a:	f7ff fe9f 	bl	10cdc <z_log_get_s_mask>
   10f9e:	4605      	mov	r5, r0
	while (mask) {
   10fa0:	e004      	b.n	10fac <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   10fa2:	2301      	movs	r3, #1
   10fa4:	fa03 f404 	lsl.w	r4, r3, r4
   10fa8:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   10fac:	b36d      	cbz	r5, 1100a <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   10fae:	fab5 f485 	clz	r4, r5
   10fb2:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   10fb6:	4621      	mov	r1, r4
   10fb8:	4630      	mov	r0, r6
   10fba:	f00f fab0 	bl	2051e <log_msg_arg_get>
   10fbe:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   10fc0:	f7ff fe28 	bl	10c14 <is_rodata>
   10fc4:	2800      	cmp	r0, #0
   10fc6:	d1ec      	bne.n	10fa2 <detect_missed_strdup+0x2a>
   10fc8:	4648      	mov	r0, r9
   10fca:	f7ff ffc3 	bl	10f54 <log_is_strdup>
   10fce:	2800      	cmp	r0, #0
   10fd0:	d1e7      	bne.n	10fa2 <detect_missed_strdup+0x2a>
   10fd2:	4b0f      	ldr	r3, [pc, #60]	; (11010 <detect_missed_strdup+0x98>)
   10fd4:	4599      	cmp	r9, r3
   10fd6:	d0e4      	beq.n	10fa2 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   10fd8:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   10fda:	f3c1 1189 	ubfx	r1, r1, #6, #10
   10fde:	f000 fa47 	bl	11470 <log_source_name_get>
   10fe2:	4602      	mov	r2, r0
   10fe4:	4b0b      	ldr	r3, [pc, #44]	; (11014 <detect_missed_strdup+0x9c>)
   10fe6:	490c      	ldr	r1, [pc, #48]	; (11018 <detect_missed_strdup+0xa0>)
   10fe8:	1a5b      	subs	r3, r3, r1
   10fea:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10fec:	2101      	movs	r1, #1
   10fee:	f361 0802 	bfi	r8, r1, #0, #3
   10ff2:	f36f 08c5 	bfc	r8, #3, #3
   10ff6:	f363 188f 	bfi	r8, r3, #6, #10
   10ffa:	f8ad 8000 	strh.w	r8, [sp]
   10ffe:	463b      	mov	r3, r7
   11000:	4621      	mov	r1, r4
   11002:	4806      	ldr	r0, [pc, #24]	; (1101c <detect_missed_strdup+0xa4>)
   11004:	f000 f8b0 	bl	11168 <log_3>
   11008:	e7cb      	b.n	10fa2 <detect_missed_strdup+0x2a>
}
   1100a:	b003      	add	sp, #12
   1100c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11010:	0002503c 	.word	0x0002503c
   11014:	00024d40 	.word	0x00024d40
   11018:	00024ca0 	.word	0x00024ca0
   1101c:	00025058 	.word	0x00025058

00011020 <msg_process>:
{
   11020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11022:	4606      	mov	r6, r0
	if (!bypass) {
   11024:	bb19      	cbnz	r1, 1106e <msg_process+0x4e>
		    !panic_mode) {
   11026:	4b14      	ldr	r3, [pc, #80]	; (11078 <msg_process+0x58>)
   11028:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   1102a:	b10b      	cbz	r3, 11030 <msg_process+0x10>
{
   1102c:	2400      	movs	r4, #0
   1102e:	e003      	b.n	11038 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   11030:	f7ff ffa2 	bl	10f78 <detect_missed_strdup>
   11034:	e7fa      	b.n	1102c <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   11036:	3401      	adds	r4, #1
   11038:	4b10      	ldr	r3, [pc, #64]	; (1107c <msg_process+0x5c>)
   1103a:	4a11      	ldr	r2, [pc, #68]	; (11080 <msg_process+0x60>)
   1103c:	1a9b      	subs	r3, r3, r2
   1103e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11042:	da14      	bge.n	1106e <msg_process+0x4e>
	return &__log_backends_start[idx];
   11044:	4d0e      	ldr	r5, [pc, #56]	; (11080 <msg_process+0x60>)
   11046:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   1104a:	686b      	ldr	r3, [r5, #4]
   1104c:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   1104e:	2b00      	cmp	r3, #0
   11050:	d0f1      	beq.n	11036 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   11052:	4631      	mov	r1, r6
   11054:	4628      	mov	r0, r5
   11056:	f00f f9b1 	bl	203bc <msg_filter_check>
			if (log_backend_is_active(backend) &&
   1105a:	2800      	cmp	r0, #0
   1105c:	d0eb      	beq.n	11036 <msg_process+0x16>
	backend->api->put(backend, msg);
   1105e:	0127      	lsls	r7, r4, #4
   11060:	4b07      	ldr	r3, [pc, #28]	; (11080 <msg_process+0x60>)
   11062:	59db      	ldr	r3, [r3, r7]
   11064:	685b      	ldr	r3, [r3, #4]
   11066:	4631      	mov	r1, r6
   11068:	4628      	mov	r0, r5
   1106a:	4798      	blx	r3
}
   1106c:	e7e3      	b.n	11036 <msg_process+0x16>
			log_msg_put(msg.msg);
   1106e:	4630      	mov	r0, r6
   11070:	f00f fa69 	bl	20546 <log_msg_put>
}
   11074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11076:	bf00      	nop
   11078:	200036bd 	.word	0x200036bd
   1107c:	00024dc0 	.word	0x00024dc0
   11080:	00024db0 	.word	0x00024db0

00011084 <z_impl_log_process>:
{
   11084:	b510      	push	{r4, lr}
   11086:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   11088:	4b11      	ldr	r3, [pc, #68]	; (110d0 <z_impl_log_process+0x4c>)
   1108a:	781b      	ldrb	r3, [r3, #0]
   1108c:	b903      	cbnz	r3, 11090 <z_impl_log_process+0xc>
   1108e:	b1d0      	cbz	r0, 110c6 <z_impl_log_process+0x42>
	msg = get_msg();
   11090:	f7ff feb2 	bl	10df8 <get_msg>
	if (msg.msg) {
   11094:	4603      	mov	r3, r0
   11096:	b180      	cbz	r0, 110ba <z_impl_log_process+0x36>
		if (!bypass) {
   11098:	b95c      	cbnz	r4, 110b2 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1109a:	4a0e      	ldr	r2, [pc, #56]	; (110d4 <z_impl_log_process+0x50>)
   1109c:	f3bf 8f5b 	dmb	ish
   110a0:	e852 1f00 	ldrex	r1, [r2]
   110a4:	3901      	subs	r1, #1
   110a6:	e842 1000 	strex	r0, r1, [r2]
   110aa:	2800      	cmp	r0, #0
   110ac:	d1f8      	bne.n	110a0 <z_impl_log_process+0x1c>
   110ae:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   110b2:	4621      	mov	r1, r4
   110b4:	4618      	mov	r0, r3
   110b6:	f7ff ffb3 	bl	11020 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   110ba:	b914      	cbnz	r4, 110c2 <z_impl_log_process+0x3e>
   110bc:	f7ff ff10 	bl	10ee0 <z_log_dropped_pending>
   110c0:	b910      	cbnz	r0, 110c8 <z_impl_log_process+0x44>
	return next_pending();
   110c2:	f7ff fdd3 	bl	10c6c <next_pending>
}
   110c6:	bd10      	pop	{r4, pc}
		dropped_notify();
   110c8:	f7ff fee8 	bl	10e9c <dropped_notify>
   110cc:	e7f9      	b.n	110c2 <z_impl_log_process+0x3e>
   110ce:	bf00      	nop
   110d0:	200036bc 	.word	0x200036bc
   110d4:	20001f84 	.word	0x20001f84

000110d8 <z_log_msg_post_finalize>:
{
   110d8:	b510      	push	{r4, lr}
   110da:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   110dc:	4b1d      	ldr	r3, [pc, #116]	; (11154 <z_log_msg_post_finalize+0x7c>)
   110de:	f3bf 8f5b 	dmb	ish
   110e2:	e853 2f00 	ldrex	r2, [r3]
   110e6:	1c51      	adds	r1, r2, #1
   110e8:	e843 1000 	strex	r0, r1, [r3]
   110ec:	2800      	cmp	r0, #0
   110ee:	d1f8      	bne.n	110e2 <z_log_msg_post_finalize+0xa>
   110f0:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   110f4:	4b18      	ldr	r3, [pc, #96]	; (11158 <z_log_msg_post_finalize+0x80>)
   110f6:	781b      	ldrb	r3, [r3, #0]
   110f8:	b93b      	cbnz	r3, 1110a <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
   110fa:	4b18      	ldr	r3, [pc, #96]	; (1115c <z_log_msg_post_finalize+0x84>)
   110fc:	681b      	ldr	r3, [r3, #0]
   110fe:	b103      	cbz	r3, 11102 <z_log_msg_post_finalize+0x2a>
   11100:	b19a      	cbz	r2, 1112a <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11102:	2a0a      	cmp	r2, #10
   11104:	d01c      	beq.n	11140 <z_log_msg_post_finalize+0x68>
}
   11106:	b002      	add	sp, #8
   11108:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   1110a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1110e:	f3ef 8411 	mrs	r4, BASEPRI
   11112:	f383 8812 	msr	BASEPRI_MAX, r3
   11116:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   1111a:	2000      	movs	r0, #0
   1111c:	f7ff ffb2 	bl	11084 <z_impl_log_process>
	__asm__ volatile(
   11120:	f384 8811 	msr	BASEPRI, r4
   11124:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11128:	e7ed      	b.n	11106 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
   1112a:	2200      	movs	r2, #0
   1112c:	2300      	movs	r3, #0
   1112e:	e9cd 2300 	strd	r2, r3, [sp]
   11132:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11136:	2300      	movs	r3, #0
   11138:	4809      	ldr	r0, [pc, #36]	; (11160 <z_log_msg_post_finalize+0x88>)
   1113a:	f00b fd5d 	bl	1cbf8 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
   1113e:	e7e2      	b.n	11106 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11140:	2b00      	cmp	r3, #0
   11142:	d0e0      	beq.n	11106 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
   11144:	4806      	ldr	r0, [pc, #24]	; (11160 <z_log_msg_post_finalize+0x88>)
   11146:	f013 faf7 	bl	24738 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1114a:	4806      	ldr	r0, [pc, #24]	; (11164 <z_log_msg_post_finalize+0x8c>)
   1114c:	f00a fd50 	bl	1bbf0 <z_impl_k_sem_give>
}
   11150:	e7d9      	b.n	11106 <z_log_msg_post_finalize+0x2e>
   11152:	bf00      	nop
   11154:	20001f84 	.word	0x20001f84
   11158:	200036bd 	.word	0x200036bd
   1115c:	20001fb4 	.word	0x20001fb4
   11160:	200015e0 	.word	0x200015e0
   11164:	20000750 	.word	0x20000750

00011168 <log_3>:
{
   11168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1116c:	4680      	mov	r8, r0
   1116e:	460f      	mov	r7, r1
   11170:	4616      	mov	r6, r2
   11172:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11174:	f000 f9d2 	bl	1151c <log_msg_chunk_alloc>

	if (msg != NULL) {
   11178:	4604      	mov	r4, r0
   1117a:	b140      	cbz	r0, 1118e <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1117c:	2301      	movs	r3, #1
   1117e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11180:	2200      	movs	r2, #0
   11182:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11184:	f04f 0300 	mov.w	r3, #0
   11188:	f362 0300 	bfi	r3, r2, #0, #1
   1118c:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   1118e:	b14c      	cbz	r4, 111a4 <log_3+0x3c>
		msg->str = str;
   11190:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   11194:	7a63      	ldrb	r3, [r4, #9]
   11196:	2203      	movs	r2, #3
   11198:	f362 1307 	bfi	r3, r2, #4, #4
   1119c:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   1119e:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   111a0:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   111a2:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   111a4:	b1c4      	cbz	r4, 111d8 <log_3+0x70>
	msg->hdr.ids = src_level;
   111a6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   111aa:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   111ac:	4b0b      	ldr	r3, [pc, #44]	; (111dc <log_3+0x74>)
   111ae:	681b      	ldr	r3, [r3, #0]
   111b0:	4798      	blx	r3
   111b2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   111b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   111b8:	f3ef 8511 	mrs	r5, BASEPRI
   111bc:	f383 8812 	msr	BASEPRI_MAX, r3
   111c0:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   111c4:	4621      	mov	r1, r4
   111c6:	4806      	ldr	r0, [pc, #24]	; (111e0 <log_3+0x78>)
   111c8:	f00f f8e4 	bl	20394 <log_list_add_tail>
	__asm__ volatile(
   111cc:	f385 8811 	msr	BASEPRI, r5
   111d0:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   111d4:	f7ff ff80 	bl	110d8 <z_log_msg_post_finalize>
}
   111d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111dc:	20000414 	.word	0x20000414
   111e0:	20001f90 	.word	0x20001f90

000111e4 <log_1>:
{
   111e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111e6:	4606      	mov	r6, r0
   111e8:	460d      	mov	r5, r1
   111ea:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   111ec:	f000 f996 	bl	1151c <log_msg_chunk_alloc>
	if (msg != NULL) {
   111f0:	4604      	mov	r4, r0
   111f2:	b140      	cbz	r0, 11206 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   111f4:	2301      	movs	r3, #1
   111f6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   111f8:	2100      	movs	r1, #0
   111fa:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   111fc:	f04f 0300 	mov.w	r3, #0
   11200:	f361 0300 	bfi	r3, r1, #0, #1
   11204:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11206:	b134      	cbz	r4, 11216 <log_1+0x32>
		msg->str = str;
   11208:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   1120a:	7a63      	ldrb	r3, [r4, #9]
   1120c:	2201      	movs	r2, #1
   1120e:	f362 1307 	bfi	r3, r2, #4, #4
   11212:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11214:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   11216:	b1b4      	cbz	r4, 11246 <log_1+0x62>
	msg->hdr.ids = src_level;
   11218:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   1121a:	4b0b      	ldr	r3, [pc, #44]	; (11248 <log_1+0x64>)
   1121c:	681b      	ldr	r3, [r3, #0]
   1121e:	4798      	blx	r3
   11220:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11222:	f04f 0340 	mov.w	r3, #64	; 0x40
   11226:	f3ef 8511 	mrs	r5, BASEPRI
   1122a:	f383 8812 	msr	BASEPRI_MAX, r3
   1122e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11232:	4621      	mov	r1, r4
   11234:	4805      	ldr	r0, [pc, #20]	; (1124c <log_1+0x68>)
   11236:	f00f f8ad 	bl	20394 <log_list_add_tail>
	__asm__ volatile(
   1123a:	f385 8811 	msr	BASEPRI, r5
   1123e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11242:	f7ff ff49 	bl	110d8 <z_log_msg_post_finalize>
}
   11246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11248:	20000414 	.word	0x20000414
   1124c:	20001f90 	.word	0x20001f90

00011250 <log_2>:
{
   11250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11254:	4607      	mov	r7, r0
   11256:	460e      	mov	r6, r1
   11258:	4615      	mov	r5, r2
   1125a:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1125c:	f000 f95e 	bl	1151c <log_msg_chunk_alloc>
	if (msg != NULL) {
   11260:	4604      	mov	r4, r0
   11262:	b140      	cbz	r0, 11276 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   11264:	2301      	movs	r3, #1
   11266:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11268:	2200      	movs	r2, #0
   1126a:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   1126c:	f04f 0300 	mov.w	r3, #0
   11270:	f362 0300 	bfi	r3, r2, #0, #1
   11274:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11276:	b13c      	cbz	r4, 11288 <log_2+0x38>
		msg->str = str;
   11278:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   1127a:	7a63      	ldrb	r3, [r4, #9]
   1127c:	2202      	movs	r2, #2
   1127e:	f362 1307 	bfi	r3, r2, #4, #4
   11282:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11284:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   11286:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   11288:	b1bc      	cbz	r4, 112ba <log_2+0x6a>
	msg->hdr.ids = src_level;
   1128a:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   1128e:	4b0c      	ldr	r3, [pc, #48]	; (112c0 <log_2+0x70>)
   11290:	681b      	ldr	r3, [r3, #0]
   11292:	4798      	blx	r3
   11294:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11296:	f04f 0340 	mov.w	r3, #64	; 0x40
   1129a:	f3ef 8511 	mrs	r5, BASEPRI
   1129e:	f383 8812 	msr	BASEPRI_MAX, r3
   112a2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   112a6:	4621      	mov	r1, r4
   112a8:	4806      	ldr	r0, [pc, #24]	; (112c4 <log_2+0x74>)
   112aa:	f00f f873 	bl	20394 <log_list_add_tail>
	__asm__ volatile(
   112ae:	f385 8811 	msr	BASEPRI, r5
   112b2:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   112b6:	f7ff ff0f 	bl	110d8 <z_log_msg_post_finalize>
}
   112ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112be:	bf00      	nop
   112c0:	20000414 	.word	0x20000414
   112c4:	20001f90 	.word	0x20001f90

000112c8 <log_n>:
{
   112c8:	b538      	push	{r3, r4, r5, lr}
   112ca:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   112cc:	f00f f97f 	bl	205ce <log_msg_create_n>
		if (msg == NULL) {
   112d0:	b1b8      	cbz	r0, 11302 <log_n+0x3a>
   112d2:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   112d4:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   112d6:	4b0b      	ldr	r3, [pc, #44]	; (11304 <log_n+0x3c>)
   112d8:	681b      	ldr	r3, [r3, #0]
   112da:	4798      	blx	r3
   112dc:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   112de:	f04f 0340 	mov.w	r3, #64	; 0x40
   112e2:	f3ef 8411 	mrs	r4, BASEPRI
   112e6:	f383 8812 	msr	BASEPRI_MAX, r3
   112ea:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   112ee:	4629      	mov	r1, r5
   112f0:	4805      	ldr	r0, [pc, #20]	; (11308 <log_n+0x40>)
   112f2:	f00f f84f 	bl	20394 <log_list_add_tail>
	__asm__ volatile(
   112f6:	f384 8811 	msr	BASEPRI, r4
   112fa:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   112fe:	f7ff feeb 	bl	110d8 <z_log_msg_post_finalize>
}
   11302:	bd38      	pop	{r3, r4, r5, pc}
   11304:	20000414 	.word	0x20000414
   11308:	20001f90 	.word	0x20001f90

0001130c <log_hexdump>:
{
   1130c:	b538      	push	{r3, r4, r5, lr}
   1130e:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   11310:	f00f f971 	bl	205f6 <log_msg_hexdump_create>
		if (msg == NULL) {
   11314:	b1b8      	cbz	r0, 11346 <log_hexdump+0x3a>
   11316:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11318:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   1131a:	4b0b      	ldr	r3, [pc, #44]	; (11348 <log_hexdump+0x3c>)
   1131c:	681b      	ldr	r3, [r3, #0]
   1131e:	4798      	blx	r3
   11320:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   11322:	f04f 0340 	mov.w	r3, #64	; 0x40
   11326:	f3ef 8411 	mrs	r4, BASEPRI
   1132a:	f383 8812 	msr	BASEPRI_MAX, r3
   1132e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11332:	4629      	mov	r1, r5
   11334:	4805      	ldr	r0, [pc, #20]	; (1134c <log_hexdump+0x40>)
   11336:	f00f f82d 	bl	20394 <log_list_add_tail>
	__asm__ volatile(
   1133a:	f384 8811 	msr	BASEPRI, r4
   1133e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11342:	f7ff fec9 	bl	110d8 <z_log_msg_post_finalize>
}
   11346:	bd38      	pop	{r3, r4, r5, pc}
   11348:	20000414 	.word	0x20000414
   1134c:	20001f90 	.word	0x20001f90

00011350 <log_0>:
{
   11350:	b570      	push	{r4, r5, r6, lr}
   11352:	4605      	mov	r5, r0
   11354:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11356:	f000 f8e1 	bl	1151c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1135a:	4604      	mov	r4, r0
   1135c:	b140      	cbz	r0, 11370 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
   1135e:	2301      	movs	r3, #1
   11360:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11362:	2200      	movs	r2, #0
   11364:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11366:	f04f 0300 	mov.w	r3, #0
   1136a:	f362 0300 	bfi	r3, r2, #0, #1
   1136e:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11370:	b104      	cbz	r4, 11374 <log_0+0x24>
		msg->str = str;
   11372:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   11374:	b1b4      	cbz	r4, 113a4 <log_0+0x54>
	msg->hdr.ids = src_level;
   11376:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11378:	4b0b      	ldr	r3, [pc, #44]	; (113a8 <log_0+0x58>)
   1137a:	681b      	ldr	r3, [r3, #0]
   1137c:	4798      	blx	r3
   1137e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11380:	f04f 0340 	mov.w	r3, #64	; 0x40
   11384:	f3ef 8511 	mrs	r5, BASEPRI
   11388:	f383 8812 	msr	BASEPRI_MAX, r3
   1138c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11390:	4621      	mov	r1, r4
   11392:	4806      	ldr	r0, [pc, #24]	; (113ac <log_0+0x5c>)
   11394:	f00e fffe 	bl	20394 <log_list_add_tail>
	__asm__ volatile(
   11398:	f385 8811 	msr	BASEPRI, r5
   1139c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   113a0:	f7ff fe9a 	bl	110d8 <z_log_msg_post_finalize>
}
   113a4:	bd70      	pop	{r4, r5, r6, pc}
   113a6:	bf00      	nop
   113a8:	20000414 	.word	0x20000414
   113ac:	20001f90 	.word	0x20001f90

000113b0 <z_impl_log_panic>:
	if (panic_mode) {
   113b0:	4b12      	ldr	r3, [pc, #72]	; (113fc <z_impl_log_panic+0x4c>)
   113b2:	781b      	ldrb	r3, [r3, #0]
   113b4:	b103      	cbz	r3, 113b8 <z_impl_log_panic+0x8>
   113b6:	4770      	bx	lr
{
   113b8:	b510      	push	{r4, lr}
	log_init();
   113ba:	f7ff fcb3 	bl	10d24 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   113be:	2400      	movs	r4, #0
   113c0:	e000      	b.n	113c4 <z_impl_log_panic+0x14>
   113c2:	3401      	adds	r4, #1
   113c4:	4b0e      	ldr	r3, [pc, #56]	; (11400 <z_impl_log_panic+0x50>)
   113c6:	4a0f      	ldr	r2, [pc, #60]	; (11404 <z_impl_log_panic+0x54>)
   113c8:	1a9b      	subs	r3, r3, r2
   113ca:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   113ce:	da0c      	bge.n	113ea <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   113d0:	480c      	ldr	r0, [pc, #48]	; (11404 <z_impl_log_panic+0x54>)
   113d2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   113d6:	6843      	ldr	r3, [r0, #4]
   113d8:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   113da:	2b00      	cmp	r3, #0
   113dc:	d0f1      	beq.n	113c2 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   113de:	0123      	lsls	r3, r4, #4
   113e0:	4a08      	ldr	r2, [pc, #32]	; (11404 <z_impl_log_panic+0x54>)
   113e2:	58d3      	ldr	r3, [r2, r3]
   113e4:	695b      	ldr	r3, [r3, #20]
   113e6:	4798      	blx	r3
}
   113e8:	e7eb      	b.n	113c2 <z_impl_log_panic+0x12>
   113ea:	2000      	movs	r0, #0
   113ec:	f7ff fe4a 	bl	11084 <z_impl_log_process>
		while (log_process(false) == true) {
   113f0:	2800      	cmp	r0, #0
   113f2:	d1fa      	bne.n	113ea <z_impl_log_panic+0x3a>
	panic_mode = true;
   113f4:	4b01      	ldr	r3, [pc, #4]	; (113fc <z_impl_log_panic+0x4c>)
   113f6:	2201      	movs	r2, #1
   113f8:	701a      	strb	r2, [r3, #0]
}
   113fa:	bd10      	pop	{r4, pc}
   113fc:	200036bd 	.word	0x200036bd
   11400:	00024dc0 	.word	0x00024dc0
   11404:	00024db0 	.word	0x00024db0

00011408 <log_process_thread_func>:
{
   11408:	b508      	push	{r3, lr}
	log_init();
   1140a:	f7ff fc8b 	bl	10d24 <log_init>
	return z_impl_z_current_get();
   1140e:	f00b f9cb 	bl	1c7a8 <z_impl_z_current_get>
	thread_set(k_current_get());
   11412:	f7ff fc0f 	bl	10c34 <thread_set>
   11416:	e006      	b.n	11426 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
   11418:	f04f 32ff 	mov.w	r2, #4294967295
   1141c:	f04f 33ff 	mov.w	r3, #4294967295
   11420:	4804      	ldr	r0, [pc, #16]	; (11434 <log_process_thread_func+0x2c>)
   11422:	f00a fc0d 	bl	1bc40 <z_impl_k_sem_take>
   11426:	2000      	movs	r0, #0
   11428:	f7ff fe2c 	bl	11084 <z_impl_log_process>
		if (log_process(false) == false) {
   1142c:	2800      	cmp	r0, #0
   1142e:	d1fa      	bne.n	11426 <log_process_thread_func+0x1e>
   11430:	e7f2      	b.n	11418 <log_process_thread_func+0x10>
   11432:	bf00      	nop
   11434:	20000750 	.word	0x20000750

00011438 <z_log_free>:
{
   11438:	b500      	push	{lr}
   1143a:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1143c:	3804      	subs	r0, #4
   1143e:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11440:	f3bf 8f5b 	dmb	ish
   11444:	e850 3f00 	ldrex	r3, [r0]
   11448:	1e5a      	subs	r2, r3, #1
   1144a:	e840 2100 	strex	r1, r2, [r0]
   1144e:	2900      	cmp	r1, #0
   11450:	d1f8      	bne.n	11444 <z_log_free+0xc>
   11452:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   11456:	2b01      	cmp	r3, #1
   11458:	d002      	beq.n	11460 <z_log_free+0x28>
}
   1145a:	b003      	add	sp, #12
   1145c:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   11460:	a901      	add	r1, sp, #4
   11462:	4802      	ldr	r0, [pc, #8]	; (1146c <z_log_free+0x34>)
   11464:	f012 fc54 	bl	23d10 <k_mem_slab_free>
}
   11468:	e7f7      	b.n	1145a <z_log_free+0x22>
   1146a:	bf00      	nop
   1146c:	20001f98 	.word	0x20001f98

00011470 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   11470:	4b05      	ldr	r3, [pc, #20]	; (11488 <log_source_name_get+0x18>)
   11472:	4a06      	ldr	r2, [pc, #24]	; (1148c <log_source_name_get+0x1c>)
   11474:	1a9b      	subs	r3, r3, r2
   11476:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   1147a:	d202      	bcs.n	11482 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   1147c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   11480:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   11482:	2000      	movs	r0, #0
}
   11484:	4770      	bx	lr
   11486:	bf00      	nop
   11488:	00024db0 	.word	0x00024db0
   1148c:	00024ca0 	.word	0x00024ca0

00011490 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   11490:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   11492:	4b07      	ldr	r3, [pc, #28]	; (114b0 <log_backend_enable+0x20>)
   11494:	1ac3      	subs	r3, r0, r3
   11496:	111b      	asrs	r3, r3, #4
   11498:	3301      	adds	r3, #1
	backend->cb->id = id;
   1149a:	6842      	ldr	r2, [r0, #4]
   1149c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   1149e:	6843      	ldr	r3, [r0, #4]
   114a0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   114a2:	6843      	ldr	r3, [r0, #4]
   114a4:	2201      	movs	r2, #1
   114a6:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   114a8:	f7ff fcba 	bl	10e20 <z_log_notify_backend_enabled>
}
   114ac:	bd08      	pop	{r3, pc}
   114ae:	bf00      	nop
   114b0:	00024db0 	.word	0x00024db0

000114b4 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   114b4:	b510      	push	{r4, lr}
   114b6:	b082      	sub	sp, #8
   114b8:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   114ba:	9b01      	ldr	r3, [sp, #4]
   114bc:	b133      	cbz	r3, 114cc <cont_free+0x18>
		next = cont->next;
   114be:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   114c0:	a901      	add	r1, sp, #4
   114c2:	4803      	ldr	r0, [pc, #12]	; (114d0 <cont_free+0x1c>)
   114c4:	f012 fc24 	bl	23d10 <k_mem_slab_free>
		cont = next;
   114c8:	9401      	str	r4, [sp, #4]
   114ca:	e7f6      	b.n	114ba <cont_free+0x6>
	}
}
   114cc:	b002      	add	sp, #8
   114ce:	bd10      	pop	{r4, pc}
   114d0:	20001fb8 	.word	0x20001fb8

000114d4 <log_msg_pool_init>:
{
   114d4:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   114d6:	2320      	movs	r3, #32
   114d8:	461a      	mov	r2, r3
   114da:	4902      	ldr	r1, [pc, #8]	; (114e4 <log_msg_pool_init+0x10>)
   114dc:	4802      	ldr	r0, [pc, #8]	; (114e8 <log_msg_pool_init+0x14>)
   114de:	f012 fc09 	bl	23cf4 <k_mem_slab_init>
}
   114e2:	bd08      	pop	{r3, pc}
   114e4:	20007368 	.word	0x20007368
   114e8:	20001fb8 	.word	0x20001fb8

000114ec <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   114ec:	b510      	push	{r4, lr}
   114ee:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   114f0:	2300      	movs	r3, #0
   114f2:	9301      	str	r3, [sp, #4]
   114f4:	2001      	movs	r0, #1
   114f6:	f7ff fdc5 	bl	11084 <z_impl_log_process>
   114fa:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   114fc:	f7ff fca0 	bl	10e40 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   11500:	2200      	movs	r2, #0
   11502:	2300      	movs	r3, #0
   11504:	a901      	add	r1, sp, #4
   11506:	4804      	ldr	r0, [pc, #16]	; (11518 <log_msg_no_space_handle+0x2c>)
   11508:	f00a f924 	bl	1b754 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   1150c:	b108      	cbz	r0, 11512 <log_msg_no_space_handle+0x26>
   1150e:	2c00      	cmp	r4, #0
   11510:	d1f0      	bne.n	114f4 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   11512:	9801      	ldr	r0, [sp, #4]
   11514:	b002      	add	sp, #8
   11516:	bd10      	pop	{r4, pc}
   11518:	20001fb8 	.word	0x20001fb8

0001151c <log_msg_chunk_alloc>:
{
   1151c:	b500      	push	{lr}
   1151e:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   11520:	2300      	movs	r3, #0
   11522:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   11524:	f00e ff52 	bl	203cc <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11528:	b150      	cbz	r0, 11540 <log_msg_chunk_alloc+0x24>
   1152a:	2200      	movs	r2, #0
   1152c:	2300      	movs	r3, #0
   1152e:	a901      	add	r1, sp, #4
   11530:	4807      	ldr	r0, [pc, #28]	; (11550 <log_msg_chunk_alloc+0x34>)
   11532:	f00a f90f 	bl	1b754 <k_mem_slab_alloc>
	if (err != 0) {
   11536:	b930      	cbnz	r0, 11546 <log_msg_chunk_alloc+0x2a>
}
   11538:	9801      	ldr	r0, [sp, #4]
   1153a:	b003      	add	sp, #12
   1153c:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11540:	2200      	movs	r2, #0
   11542:	2300      	movs	r3, #0
   11544:	e7f3      	b.n	1152e <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   11546:	f7ff ffd1 	bl	114ec <log_msg_no_space_handle>
   1154a:	9001      	str	r0, [sp, #4]
   1154c:	e7f4      	b.n	11538 <log_msg_chunk_alloc+0x1c>
   1154e:	bf00      	nop
   11550:	20001fb8 	.word	0x20001fb8

00011554 <msg_free>:
{
   11554:	b5f0      	push	{r4, r5, r6, r7, lr}
   11556:	b083      	sub	sp, #12
   11558:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   1155a:	4604      	mov	r4, r0
   1155c:	f00e ffdc 	bl	20518 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11560:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   11562:	f013 0f01 	tst.w	r3, #1
   11566:	d101      	bne.n	1156c <msg_free+0x18>
   11568:	4606      	mov	r6, r0
   1156a:	bb50      	cbnz	r0, 115c2 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   1156c:	9b01      	ldr	r3, [sp, #4]
   1156e:	7a1a      	ldrb	r2, [r3, #8]
   11570:	f012 0f02 	tst.w	r2, #2
   11574:	d128      	bne.n	115c8 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   11576:	a901      	add	r1, sp, #4
   11578:	4815      	ldr	r0, [pc, #84]	; (115d0 <msg_free+0x7c>)
   1157a:	f012 fbc9 	bl	23d10 <k_mem_slab_free>
}
   1157e:	b003      	add	sp, #12
   11580:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   11582:	9801      	ldr	r0, [sp, #4]
   11584:	f00e ffdd 	bl	20542 <log_msg_str_get>
   11588:	4631      	mov	r1, r6
   1158a:	f7ff fba7 	bl	10cdc <z_log_get_s_mask>
					if (smask == 0U) {
   1158e:	4607      	mov	r7, r0
   11590:	b988      	cbnz	r0, 115b6 <msg_free+0x62>
   11592:	e7eb      	b.n	1156c <msg_free+0x18>
					z_log_free(buf);
   11594:	4628      	mov	r0, r5
   11596:	f7ff ff4f 	bl	11438 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   1159a:	3401      	adds	r4, #1
   1159c:	42b4      	cmp	r4, r6
   1159e:	d2e5      	bcs.n	1156c <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   115a0:	4621      	mov	r1, r4
   115a2:	9801      	ldr	r0, [sp, #4]
   115a4:	f00e ffbb 	bl	2051e <log_msg_arg_get>
   115a8:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   115aa:	f7ff fcd3 	bl	10f54 <log_is_strdup>
   115ae:	2800      	cmp	r0, #0
   115b0:	d0f3      	beq.n	1159a <msg_free+0x46>
				if (smask == 0U) {
   115b2:	2f00      	cmp	r7, #0
   115b4:	d0e5      	beq.n	11582 <msg_free+0x2e>
				if (smask & BIT(i)) {
   115b6:	fa27 f304 	lsr.w	r3, r7, r4
   115ba:	f013 0f01 	tst.w	r3, #1
   115be:	d0ec      	beq.n	1159a <msg_free+0x46>
   115c0:	e7e8      	b.n	11594 <msg_free+0x40>
		uint32_t smask = 0U;
   115c2:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   115c4:	463c      	mov	r4, r7
   115c6:	e7e9      	b.n	1159c <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   115c8:	6958      	ldr	r0, [r3, #20]
   115ca:	f7ff ff73 	bl	114b4 <cont_free>
   115ce:	e7d2      	b.n	11576 <msg_free+0x22>
   115d0:	20001fb8 	.word	0x20001fb8

000115d4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   115d4:	b40e      	push	{r1, r2, r3}
   115d6:	b500      	push	{lr}
   115d8:	b082      	sub	sp, #8
   115da:	4601      	mov	r1, r0
   115dc:	ab03      	add	r3, sp, #12
   115de:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   115e2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   115e4:	4803      	ldr	r0, [pc, #12]	; (115f4 <print_formatted+0x20>)
   115e6:	f7fe fe17 	bl	10218 <cbvprintf>
	va_end(args);

	return length;
}
   115ea:	b002      	add	sp, #8
   115ec:	f85d eb04 	ldr.w	lr, [sp], #4
   115f0:	b003      	add	sp, #12
   115f2:	4770      	bx	lr
   115f4:	000209c9 	.word	0x000209c9

000115f8 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   115f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   115fa:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   115fc:	f011 0f44 	tst.w	r1, #68	; 0x44
   11600:	d005      	beq.n	1160e <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   11602:	4b1a      	ldr	r3, [pc, #104]	; (1166c <timestamp_print+0x74>)
   11604:	681c      	ldr	r4, [r3, #0]
   11606:	b934      	cbnz	r4, 11616 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   11608:	2000      	movs	r0, #0
	}

	return length;
}
   1160a:	b005      	add	sp, #20
   1160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   1160e:	4918      	ldr	r1, [pc, #96]	; (11670 <timestamp_print+0x78>)
   11610:	f7ff ffe0 	bl	115d4 <print_formatted>
   11614:	e7f9      	b.n	1160a <timestamp_print+0x12>
		timestamp /= timestamp_div;
   11616:	4b17      	ldr	r3, [pc, #92]	; (11674 <timestamp_print+0x7c>)
   11618:	6819      	ldr	r1, [r3, #0]
   1161a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   1161e:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   11622:	4a15      	ldr	r2, [pc, #84]	; (11678 <timestamp_print+0x80>)
   11624:	fba2 3205 	umull	r3, r2, r2, r5
   11628:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   1162a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   1162e:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   11632:	4b12      	ldr	r3, [pc, #72]	; (1167c <timestamp_print+0x84>)
   11634:	fba3 7306 	umull	r7, r3, r3, r6
   11638:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   1163a:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   1163e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   11642:	fb05 f101 	mul.w	r1, r5, r1
   11646:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1164a:	fb07 1114 	mls	r1, r7, r4, r1
   1164e:	fb05 f101 	mul.w	r1, r5, r1
   11652:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   11656:	9402      	str	r4, [sp, #8]
   11658:	9701      	str	r7, [sp, #4]
   1165a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1165e:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   11662:	9100      	str	r1, [sp, #0]
   11664:	4906      	ldr	r1, [pc, #24]	; (11680 <timestamp_print+0x88>)
   11666:	f7ff ffb5 	bl	115d4 <print_formatted>
   1166a:	e7ce      	b.n	1160a <timestamp_print+0x12>
   1166c:	20001fd4 	.word	0x20001fd4
   11670:	0002509c 	.word	0x0002509c
   11674:	20001fd8 	.word	0x20001fd8
   11678:	91a2b3c5 	.word	0x91a2b3c5
   1167c:	88888889 	.word	0x88888889
   11680:	000250a8 	.word	0x000250a8

00011684 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   11684:	b161      	cbz	r1, 116a0 <color_print+0x1c>
{
   11686:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   11688:	b12a      	cbz	r2, 11696 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   1168a:	4a06      	ldr	r2, [pc, #24]	; (116a4 <color_print+0x20>)
   1168c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11690:	b912      	cbnz	r2, 11698 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   11692:	4a05      	ldr	r2, [pc, #20]	; (116a8 <color_print+0x24>)
   11694:	e000      	b.n	11698 <color_print+0x14>
   11696:	4a04      	ldr	r2, [pc, #16]	; (116a8 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   11698:	4904      	ldr	r1, [pc, #16]	; (116ac <color_print+0x28>)
   1169a:	f7ff ff9b 	bl	115d4 <print_formatted>
	}
}
   1169e:	bd08      	pop	{r3, pc}
   116a0:	4770      	bx	lr
   116a2:	bf00      	nop
   116a4:	00025120 	.word	0x00025120
   116a8:	000250c4 	.word	0x000250c4
   116ac:	000250cc 	.word	0x000250cc

000116b0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   116b0:	f011 0f10 	tst.w	r1, #16
   116b4:	d10b      	bne.n	116ce <newline_print+0x1e>
{
   116b6:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   116b8:	f011 0f20 	tst.w	r1, #32
   116bc:	d003      	beq.n	116c6 <newline_print+0x16>
		print_formatted(ctx, "\n");
   116be:	4904      	ldr	r1, [pc, #16]	; (116d0 <newline_print+0x20>)
   116c0:	f7ff ff88 	bl	115d4 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   116c4:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   116c6:	4903      	ldr	r1, [pc, #12]	; (116d4 <newline_print+0x24>)
   116c8:	f7ff ff84 	bl	115d4 <print_formatted>
   116cc:	e7fa      	b.n	116c4 <newline_print+0x14>
   116ce:	4770      	bx	lr
   116d0:	00026f2c 	.word	0x00026f2c
   116d4:	00026e60 	.word	0x00026e60

000116d8 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   116d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116dc:	4605      	mov	r5, r0
   116de:	460f      	mov	r7, r1
   116e0:	4616      	mov	r6, r2
   116e2:	4698      	mov	r8, r3
	newline_print(output, flags);
   116e4:	9906      	ldr	r1, [sp, #24]
   116e6:	f7ff ffe3 	bl	116b0 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   116ea:	2400      	movs	r4, #0
   116ec:	4544      	cmp	r4, r8
   116ee:	da05      	bge.n	116fc <hexdump_line_print+0x24>
		print_formatted(output, " ");
   116f0:	4924      	ldr	r1, [pc, #144]	; (11784 <hexdump_line_print+0xac>)
   116f2:	4628      	mov	r0, r5
   116f4:	f7ff ff6e 	bl	115d4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   116f8:	3401      	adds	r4, #1
   116fa:	e7f7      	b.n	116ec <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   116fc:	2400      	movs	r4, #0
   116fe:	e009      	b.n	11714 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   11700:	4920      	ldr	r1, [pc, #128]	; (11784 <hexdump_line_print+0xac>)
   11702:	4628      	mov	r0, r5
   11704:	f7ff ff66 	bl	115d4 <print_formatted>
   11708:	e00b      	b.n	11722 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   1170a:	491f      	ldr	r1, [pc, #124]	; (11788 <hexdump_line_print+0xb0>)
   1170c:	4628      	mov	r0, r5
   1170e:	f7ff ff61 	bl	115d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11712:	3401      	adds	r4, #1
   11714:	2c0f      	cmp	r4, #15
   11716:	dc0c      	bgt.n	11732 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   11718:	2c00      	cmp	r4, #0
   1171a:	dd02      	ble.n	11722 <hexdump_line_print+0x4a>
   1171c:	f014 0f07 	tst.w	r4, #7
   11720:	d0ee      	beq.n	11700 <hexdump_line_print+0x28>
		if (i < length) {
   11722:	42b4      	cmp	r4, r6
   11724:	d2f1      	bcs.n	1170a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   11726:	5d3a      	ldrb	r2, [r7, r4]
   11728:	4918      	ldr	r1, [pc, #96]	; (1178c <hexdump_line_print+0xb4>)
   1172a:	4628      	mov	r0, r5
   1172c:	f7ff ff52 	bl	115d4 <print_formatted>
   11730:	e7ef      	b.n	11712 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   11732:	4917      	ldr	r1, [pc, #92]	; (11790 <hexdump_line_print+0xb8>)
   11734:	4628      	mov	r0, r5
   11736:	f7ff ff4d 	bl	115d4 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1173a:	2400      	movs	r4, #0
   1173c:	e009      	b.n	11752 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   1173e:	4911      	ldr	r1, [pc, #68]	; (11784 <hexdump_line_print+0xac>)
   11740:	4628      	mov	r0, r5
   11742:	f7ff ff47 	bl	115d4 <print_formatted>
   11746:	e00b      	b.n	11760 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   11748:	4912      	ldr	r1, [pc, #72]	; (11794 <hexdump_line_print+0xbc>)
   1174a:	4628      	mov	r0, r5
   1174c:	f7ff ff42 	bl	115d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11750:	3401      	adds	r4, #1
   11752:	2c0f      	cmp	r4, #15
   11754:	dc13      	bgt.n	1177e <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
   11756:	2c00      	cmp	r4, #0
   11758:	dd02      	ble.n	11760 <hexdump_line_print+0x88>
   1175a:	f014 0f07 	tst.w	r4, #7
   1175e:	d0ee      	beq.n	1173e <hexdump_line_print+0x66>
		if (i < length) {
   11760:	42b4      	cmp	r4, r6
   11762:	d207      	bcs.n	11774 <hexdump_line_print+0x9c>
			char c = (char)data[i];
   11764:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
   11766:	4b0c      	ldr	r3, [pc, #48]	; (11798 <hexdump_line_print+0xc0>)
   11768:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
   1176a:	f013 0f97 	tst.w	r3, #151	; 0x97
   1176e:	d1eb      	bne.n	11748 <hexdump_line_print+0x70>
   11770:	222e      	movs	r2, #46	; 0x2e
   11772:	e7e9      	b.n	11748 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
   11774:	4903      	ldr	r1, [pc, #12]	; (11784 <hexdump_line_print+0xac>)
   11776:	4628      	mov	r0, r5
   11778:	f7ff ff2c 	bl	115d4 <print_formatted>
   1177c:	e7e8      	b.n	11750 <hexdump_line_print+0x78>
		}
	}
}
   1177e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11782:	bf00      	nop
   11784:	000250f4 	.word	0x000250f4
   11788:	000250d8 	.word	0x000250d8
   1178c:	000250d0 	.word	0x000250d0
   11790:	000250dc 	.word	0x000250dc
   11794:	000250e0 	.word	0x000250e0
   11798:	00026f85 	.word	0x00026f85

0001179c <ids_print>:
{
   1179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117a0:	4680      	mov	r8, r0
   117a2:	4616      	mov	r6, r2
   117a4:	461d      	mov	r5, r3
   117a6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   117aa:	b959      	cbnz	r1, 117c4 <ids_print+0x28>
	int total = 0;
   117ac:	2400      	movs	r4, #0
	if (source_id >= 0) {
   117ae:	2f00      	cmp	r7, #0
   117b0:	db1c      	blt.n	117ec <ids_print+0x50>
		total += print_formatted(output,
   117b2:	b186      	cbz	r6, 117d6 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   117b4:	2301      	movs	r3, #1
   117b6:	9a07      	ldr	r2, [sp, #28]
   117b8:	4093      	lsls	r3, r2
				(func_on &&
   117ba:	f013 0f10 	tst.w	r3, #16
   117be:	d118      	bne.n	117f2 <ids_print+0x56>
		total += print_formatted(output,
   117c0:	4e0d      	ldr	r6, [pc, #52]	; (117f8 <ids_print+0x5c>)
   117c2:	e009      	b.n	117d8 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   117c4:	4b0d      	ldr	r3, [pc, #52]	; (117fc <ids_print+0x60>)
   117c6:	9a07      	ldr	r2, [sp, #28]
   117c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   117cc:	490c      	ldr	r1, [pc, #48]	; (11800 <ids_print+0x64>)
   117ce:	f7ff ff01 	bl	115d4 <print_formatted>
   117d2:	4604      	mov	r4, r0
   117d4:	e7eb      	b.n	117ae <ids_print+0x12>
		total += print_formatted(output,
   117d6:	4e08      	ldr	r6, [pc, #32]	; (117f8 <ids_print+0x5c>)
   117d8:	4639      	mov	r1, r7
   117da:	4628      	mov	r0, r5
   117dc:	f7ff fe48 	bl	11470 <log_source_name_get>
   117e0:	4602      	mov	r2, r0
   117e2:	4631      	mov	r1, r6
   117e4:	4640      	mov	r0, r8
   117e6:	f7ff fef5 	bl	115d4 <print_formatted>
   117ea:	4404      	add	r4, r0
}
   117ec:	4620      	mov	r0, r4
   117ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   117f2:	4e04      	ldr	r6, [pc, #16]	; (11804 <ids_print+0x68>)
   117f4:	e7f0      	b.n	117d8 <ids_print+0x3c>
   117f6:	bf00      	nop
   117f8:	000250e4 	.word	0x000250e4
   117fc:	0002515c 	.word	0x0002515c
   11800:	000250f0 	.word	0x000250f0
   11804:	000250ec 	.word	0x000250ec

00011808 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   11808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1180c:	b085      	sub	sp, #20
   1180e:	4605      	mov	r5, r0
   11810:	460c      	mov	r4, r1
   11812:	4616      	mov	r6, r2
   11814:	9303      	str	r3, [sp, #12]
   11816:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1181a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1181e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   11822:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   11826:	f00e fdcf 	bl	203c8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   1182a:	b1e8      	cbz	r0, 11868 <prefix_print+0x60>
   1182c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   1182e:	4913      	ldr	r1, [pc, #76]	; (1187c <prefix_print+0x74>)
   11830:	4628      	mov	r0, r5
   11832:	f7ff fecf 	bl	115d4 <print_formatted>
   11836:	4607      	mov	r7, r0
	}

	if (stamp) {
   11838:	f1bb 0f00 	cmp.w	fp, #0
   1183c:	d116      	bne.n	1186c <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   1183e:	4642      	mov	r2, r8
   11840:	4651      	mov	r1, sl
   11842:	4628      	mov	r0, r5
   11844:	f00e ff40 	bl	206c8 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   11848:	f8cd 8004 	str.w	r8, [sp, #4]
   1184c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   11850:	9300      	str	r3, [sp, #0]
   11852:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   11856:	4632      	mov	r2, r6
   11858:	4649      	mov	r1, r9
   1185a:	4628      	mov	r0, r5
   1185c:	f7ff ff9e 	bl	1179c <ids_print>
			domain_id, source_id, level);


	return length;
}
   11860:	4438      	add	r0, r7
   11862:	b005      	add	sp, #20
   11864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   11868:	2700      	movs	r7, #0
   1186a:	e7e5      	b.n	11838 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   1186c:	9a03      	ldr	r2, [sp, #12]
   1186e:	4621      	mov	r1, r4
   11870:	4628      	mov	r0, r5
   11872:	f7ff fec1 	bl	115f8 <timestamp_print>
   11876:	4407      	add	r7, r0
   11878:	e7e1      	b.n	1183e <prefix_print+0x36>
   1187a:	bf00      	nop
   1187c:	000250f8 	.word	0x000250f8

00011880 <hexdump_print>:
{
   11880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11884:	b089      	sub	sp, #36	; 0x24
   11886:	4607      	mov	r7, r0
   11888:	460e      	mov	r6, r1
   1188a:	4691      	mov	r9, r2
   1188c:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
   1188e:	f00e fe58 	bl	20542 <log_msg_str_get>
   11892:	4602      	mov	r2, r0
   11894:	490e      	ldr	r1, [pc, #56]	; (118d0 <hexdump_print+0x50>)
   11896:	4630      	mov	r0, r6
   11898:	f7ff fe9c 	bl	115d4 <print_formatted>
	uint32_t offset = 0U;
   1189c:	2400      	movs	r4, #0
		length = sizeof(buf);
   1189e:	2510      	movs	r5, #16
   118a0:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   118a2:	4623      	mov	r3, r4
   118a4:	aa03      	add	r2, sp, #12
   118a6:	eb0d 0105 	add.w	r1, sp, r5
   118aa:	4638      	mov	r0, r7
   118ac:	f00e fef7 	bl	2069e <log_msg_hexdump_data_get>
		if (length) {
   118b0:	9a03      	ldr	r2, [sp, #12]
   118b2:	b152      	cbz	r2, 118ca <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   118b4:	f8cd 8000 	str.w	r8, [sp]
   118b8:	464b      	mov	r3, r9
   118ba:	eb0d 0105 	add.w	r1, sp, r5
   118be:	4630      	mov	r0, r6
   118c0:	f7ff ff0a 	bl	116d8 <hexdump_line_print>
			offset += length;
   118c4:	9d03      	ldr	r5, [sp, #12]
   118c6:	442c      	add	r4, r5
		length = sizeof(buf);
   118c8:	e7e9      	b.n	1189e <hexdump_print+0x1e>
}
   118ca:	b009      	add	sp, #36	; 0x24
   118cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   118d0:	000250cc 	.word	0x000250cc

000118d4 <raw_string_print>:
{
   118d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   118d6:	b083      	sub	sp, #12
   118d8:	4606      	mov	r6, r0
   118da:	460c      	mov	r4, r1
	bool eol = false;
   118dc:	2700      	movs	r7, #0
	size_t offset = 0;
   118de:	463d      	mov	r5, r7
   118e0:	e00d      	b.n	118fe <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
   118e2:	68a2      	ldr	r2, [r4, #8]
   118e4:	4413      	add	r3, r2
   118e6:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   118ea:	2f0a      	cmp	r7, #10
   118ec:	bf14      	ite	ne
   118ee:	2700      	movne	r7, #0
   118f0:	2701      	moveq	r7, #1
		log_output_flush(output);
   118f2:	4620      	mov	r0, r4
   118f4:	f00f f85b 	bl	209ae <log_output_flush>
		offset += length;
   118f8:	9b01      	ldr	r3, [sp, #4]
   118fa:	441d      	add	r5, r3
	} while (length > 0);
   118fc:	b173      	cbz	r3, 1191c <raw_string_print+0x48>
		length = output->size;
   118fe:	68e3      	ldr	r3, [r4, #12]
   11900:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   11902:	462b      	mov	r3, r5
   11904:	aa01      	add	r2, sp, #4
   11906:	68a1      	ldr	r1, [r4, #8]
   11908:	4630      	mov	r0, r6
   1190a:	f00e fec8 	bl	2069e <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   1190e:	6863      	ldr	r3, [r4, #4]
   11910:	9a01      	ldr	r2, [sp, #4]
   11912:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   11914:	9b01      	ldr	r3, [sp, #4]
   11916:	2b00      	cmp	r3, #0
   11918:	d0eb      	beq.n	118f2 <raw_string_print+0x1e>
   1191a:	e7e2      	b.n	118e2 <raw_string_print+0xe>
	if (eol) {
   1191c:	b90f      	cbnz	r7, 11922 <raw_string_print+0x4e>
}
   1191e:	b003      	add	sp, #12
   11920:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   11922:	4902      	ldr	r1, [pc, #8]	; (1192c <raw_string_print+0x58>)
   11924:	4620      	mov	r0, r4
   11926:	f7ff fe55 	bl	115d4 <print_formatted>
}
   1192a:	e7f8      	b.n	1191e <raw_string_print+0x4a>
   1192c:	000250fc 	.word	0x000250fc

00011930 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   11930:	b570      	push	{r4, r5, r6, lr}
   11932:	b082      	sub	sp, #8
   11934:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   11936:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11938:	f242 730f 	movw	r3, #9999	; 0x270f
   1193c:	428b      	cmp	r3, r1
   1193e:	bf28      	it	cs
   11940:	460b      	movcs	r3, r1
   11942:	4a0e      	ldr	r2, [pc, #56]	; (1197c <log_output_dropped_process+0x4c>)
   11944:	2105      	movs	r1, #5
   11946:	4668      	mov	r0, sp
   11948:	f00e f9b1 	bl	1fcae <snprintk>
   1194c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   1194e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   11950:	685b      	ldr	r3, [r3, #4]
   11952:	220b      	movs	r2, #11
   11954:	490a      	ldr	r1, [pc, #40]	; (11980 <log_output_dropped_process+0x50>)
   11956:	4628      	mov	r0, r5
   11958:	f00e fea9 	bl	206ae <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   1195c:	6863      	ldr	r3, [r4, #4]
   1195e:	685b      	ldr	r3, [r3, #4]
   11960:	4632      	mov	r2, r6
   11962:	4669      	mov	r1, sp
   11964:	4628      	mov	r0, r5
   11966:	f00e fea2 	bl	206ae <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   1196a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1196c:	685b      	ldr	r3, [r3, #4]
   1196e:	221b      	movs	r2, #27
   11970:	4904      	ldr	r1, [pc, #16]	; (11984 <log_output_dropped_process+0x54>)
   11972:	4628      	mov	r0, r5
   11974:	f00e fe9b 	bl	206ae <buffer_write>
}
   11978:	b002      	add	sp, #8
   1197a:	bd70      	pop	{r4, r5, r6, pc}
   1197c:	000264b4 	.word	0x000264b4
   11980:	00025150 	.word	0x00025150
   11984:	00025134 	.word	0x00025134

00011988 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   11988:	4b07      	ldr	r3, [pc, #28]	; (119a8 <log_output_timestamp_freq_set+0x20>)
   1198a:	2201      	movs	r2, #1
   1198c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1198e:	4b07      	ldr	r3, [pc, #28]	; (119ac <log_output_timestamp_freq_set+0x24>)
   11990:	4298      	cmp	r0, r3
   11992:	d905      	bls.n	119a0 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   11994:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   11996:	4a04      	ldr	r2, [pc, #16]	; (119a8 <log_output_timestamp_freq_set+0x20>)
   11998:	6813      	ldr	r3, [r2, #0]
   1199a:	005b      	lsls	r3, r3, #1
   1199c:	6013      	str	r3, [r2, #0]
   1199e:	e7f6      	b.n	1198e <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   119a0:	4b03      	ldr	r3, [pc, #12]	; (119b0 <log_output_timestamp_freq_set+0x28>)
   119a2:	6018      	str	r0, [r3, #0]
}
   119a4:	4770      	bx	lr
   119a6:	bf00      	nop
   119a8:	20001fd8 	.word	0x20001fd8
   119ac:	000f4240 	.word	0x000f4240
   119b0:	20001fd4 	.word	0x20001fd4

000119b4 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   119b4:	b570      	push	{r4, r5, r6, lr}
   119b6:	4606      	mov	r6, r0
   119b8:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   119ba:	2400      	movs	r4, #0
   119bc:	42ac      	cmp	r4, r5
   119be:	d207      	bcs.n	119d0 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
   119c0:	4b04      	ldr	r3, [pc, #16]	; (119d4 <char_out+0x20>)
   119c2:	6818      	ldr	r0, [r3, #0]
   119c4:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   119c6:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   119c8:	685b      	ldr	r3, [r3, #4]
   119ca:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   119cc:	3401      	adds	r4, #1
   119ce:	e7f5      	b.n	119bc <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   119d0:	4628      	mov	r0, r5
   119d2:	bd70      	pop	{r4, r5, r6, pc}
   119d4:	20001ff0 	.word	0x20001ff0

000119d8 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   119d8:	4b01      	ldr	r3, [pc, #4]	; (119e0 <log_backend_uart_init+0x8>)
   119da:	4a02      	ldr	r2, [pc, #8]	; (119e4 <log_backend_uart_init+0xc>)
   119dc:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   119de:	4770      	bx	lr
   119e0:	20001ff0 	.word	0x20001ff0
   119e4:	00024ad4 	.word	0x00024ad4

000119e8 <panic>:

static void panic(struct log_backend const *const backend)
{
   119e8:	b508      	push	{r3, lr}
	in_panic = true;
   119ea:	4b03      	ldr	r3, [pc, #12]	; (119f8 <panic+0x10>)
   119ec:	2201      	movs	r2, #1
   119ee:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   119f0:	4802      	ldr	r0, [pc, #8]	; (119fc <panic+0x14>)
   119f2:	f00e ffdc 	bl	209ae <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   119f6:	bd08      	pop	{r3, pc}
   119f8:	200036be 	.word	0x200036be
   119fc:	000251ac 	.word	0x000251ac

00011a00 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   11a00:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   11a02:	4802      	ldr	r0, [pc, #8]	; (11a0c <dropped+0xc>)
   11a04:	f7ff ff94 	bl	11930 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   11a08:	bd08      	pop	{r3, pc}
   11a0a:	bf00      	nop
   11a0c:	000251ac 	.word	0x000251ac

00011a10 <put>:
{
   11a10:	b510      	push	{r4, lr}
   11a12:	460c      	mov	r4, r1
	log_msg_get(msg);
   11a14:	4608      	mov	r0, r1
   11a16:	f00e fd72 	bl	204fe <log_msg_get>
	log_output_msg_process(output, msg, flags);
   11a1a:	220f      	movs	r2, #15
   11a1c:	4621      	mov	r1, r4
   11a1e:	4803      	ldr	r0, [pc, #12]	; (11a2c <put+0x1c>)
   11a20:	f00e ffee 	bl	20a00 <log_output_msg_process>
	log_msg_put(msg);
   11a24:	4620      	mov	r0, r4
   11a26:	f00e fd8e 	bl	20546 <log_msg_put>
}
   11a2a:	bd10      	pop	{r4, pc}
   11a2c:	000251ac 	.word	0x000251ac

00011a30 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   11a30:	b570      	push	{r4, r5, r6, lr}
   11a32:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   11a34:	4b2c      	ldr	r3, [pc, #176]	; (11ae8 <pm_system_resume+0xb8>)
   11a36:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11a38:	f004 031f 	and.w	r3, r4, #31
   11a3c:	2201      	movs	r2, #1
   11a3e:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11a40:	0961      	lsrs	r1, r4, #5
   11a42:	4b2a      	ldr	r3, [pc, #168]	; (11aec <pm_system_resume+0xbc>)
   11a44:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11a48:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11a4a:	f3bf 8f5b 	dmb	ish
   11a4e:	e853 1f00 	ldrex	r1, [r3]
   11a52:	ea01 0500 	and.w	r5, r1, r0
   11a56:	e843 5600 	strex	r6, r5, [r3]
   11a5a:	2e00      	cmp	r6, #0
   11a5c:	d1f7      	bne.n	11a4e <pm_system_resume+0x1e>
   11a5e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   11a62:	420a      	tst	r2, r1
   11a64:	d03d      	beq.n	11ae2 <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
   11a66:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   11a6a:	009a      	lsls	r2, r3, #2
   11a6c:	4b20      	ldr	r3, [pc, #128]	; (11af0 <pm_system_resume+0xc0>)
   11a6e:	4413      	add	r3, r2
   11a70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11a74:	ab04      	add	r3, sp, #16
   11a76:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   11a7a:	4b1e      	ldr	r3, [pc, #120]	; (11af4 <pm_system_resume+0xc4>)
   11a7c:	b163      	cbz	r3, 11a98 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   11a7e:	f00f f9bf 	bl	20e00 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   11a82:	f04f 0340 	mov.w	r3, #64	; 0x40
   11a86:	f3ef 8611 	mrs	r6, BASEPRI
   11a8a:	f383 8812 	msr	BASEPRI_MAX, r3
   11a8e:	f3bf 8f6f 	isb	sy
   11a92:	4b19      	ldr	r3, [pc, #100]	; (11af8 <pm_system_resume+0xc8>)
   11a94:	681d      	ldr	r5, [r3, #0]
   11a96:	e00a      	b.n	11aae <pm_system_resume+0x7e>
	__asm__ volatile(
   11a98:	2300      	movs	r3, #0
   11a9a:	f383 8811 	msr	BASEPRI, r3
   11a9e:	f3bf 8f6f 	isb	sy
}
   11aa2:	e7ee      	b.n	11a82 <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11aa4:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   11aa6:	b10d      	cbz	r5, 11aac <pm_system_resume+0x7c>
	return node->next;
   11aa8:	682b      	ldr	r3, [r5, #0]
   11aaa:	b16b      	cbz	r3, 11ac8 <pm_system_resume+0x98>
{
   11aac:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11aae:	b15d      	cbz	r5, 11ac8 <pm_system_resume+0x98>
			callback = notifier->state_exit;
   11ab0:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   11ab2:	2a00      	cmp	r2, #0
   11ab4:	d0f6      	beq.n	11aa4 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
   11ab6:	4b0c      	ldr	r3, [pc, #48]	; (11ae8 <pm_system_resume+0xb8>)
   11ab8:	7d1b      	ldrb	r3, [r3, #20]
   11aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11abe:	0099      	lsls	r1, r3, #2
   11ac0:	4b0b      	ldr	r3, [pc, #44]	; (11af0 <pm_system_resume+0xc0>)
   11ac2:	5c58      	ldrb	r0, [r3, r1]
   11ac4:	4790      	blx	r2
   11ac6:	e7ed      	b.n	11aa4 <pm_system_resume+0x74>
	__asm__ volatile(
   11ac8:	f386 8811 	msr	BASEPRI, r6
   11acc:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   11ad0:	4807      	ldr	r0, [pc, #28]	; (11af0 <pm_system_resume+0xc0>)
   11ad2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11ad6:	00a2      	lsls	r2, r4, #2
   11ad8:	1881      	adds	r1, r0, r2
   11ada:	2300      	movs	r3, #0
   11adc:	5083      	str	r3, [r0, r2]
   11ade:	604b      	str	r3, [r1, #4]
   11ae0:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
   11ae2:	b004      	add	sp, #16
   11ae4:	bd70      	pop	{r4, r5, r6, pc}
   11ae6:	bf00      	nop
   11ae8:	20002c9c 	.word	0x20002c9c
   11aec:	20002000 	.word	0x20002000
   11af0:	20002004 	.word	0x20002004
   11af4:	00020e01 	.word	0x00020e01
   11af8:	20001ff8 	.word	0x20001ff8

00011afc <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   11afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11afe:	b089      	sub	sp, #36	; 0x24
   11b00:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   11b02:	4b55      	ldr	r3, [pc, #340]	; (11c58 <pm_system_suspend+0x15c>)
   11b04:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11b06:	f004 031f 	and.w	r3, r4, #31
   11b0a:	2201      	movs	r2, #1
   11b0c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   11b0e:	0961      	lsrs	r1, r4, #5
   11b10:	4b52      	ldr	r3, [pc, #328]	; (11c5c <pm_system_suspend+0x160>)
   11b12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11b16:	f3bf 8f5b 	dmb	ish
   11b1a:	e853 1f00 	ldrex	r1, [r3]
   11b1e:	ea41 0002 	orr.w	r0, r1, r2
   11b22:	e843 0600 	strex	r6, r0, [r3]
   11b26:	2e00      	cmp	r6, #0
   11b28:	d1f7      	bne.n	11b1a <pm_system_suspend+0x1e>
   11b2a:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   11b2e:	420a      	tst	r2, r1
   11b30:	d017      	beq.n	11b62 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   11b32:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   11b36:	4a4a      	ldr	r2, [pc, #296]	; (11c60 <pm_system_suspend+0x164>)
   11b38:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   11b3c:	2b00      	cmp	r3, #0
   11b3e:	f000 8088 	beq.w	11c52 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   11b42:	f1b5 3fff 	cmp.w	r5, #4294967295
   11b46:	d11c      	bne.n	11b82 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   11b48:	f00a faf0 	bl	1c12c <k_sched_lock>
	__asm__ volatile(
   11b4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11b50:	f3ef 8611 	mrs	r6, BASEPRI
   11b54:	f383 8812 	msr	BASEPRI_MAX, r3
   11b58:	f3bf 8f6f 	isb	sy
	return list->head;
   11b5c:	4b41      	ldr	r3, [pc, #260]	; (11c64 <pm_system_suspend+0x168>)
   11b5e:	681d      	ldr	r5, [r3, #0]
   11b60:	e02a      	b.n	11bb8 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   11b62:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   11b66:	4b3e      	ldr	r3, [pc, #248]	; (11c60 <pm_system_suspend+0x164>)
   11b68:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   11b6c:	466f      	mov	r7, sp
   11b6e:	462a      	mov	r2, r5
   11b70:	4621      	mov	r1, r4
   11b72:	4638      	mov	r0, r7
   11b74:	f00e ff83 	bl	20a7e <pm_policy_next_state>
   11b78:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   11b7c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   11b80:	e7d7      	b.n	11b32 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
   11b82:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   11b86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11b8a:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   11b8c:	0c59      	lsrs	r1, r3, #17
   11b8e:	03d8      	lsls	r0, r3, #15
   11b90:	4e35      	ldr	r6, [pc, #212]	; (11c68 <pm_system_suspend+0x16c>)
   11b92:	4a36      	ldr	r2, [pc, #216]	; (11c6c <pm_system_suspend+0x170>)
   11b94:	2300      	movs	r3, #0
   11b96:	1980      	adds	r0, r0, r6
   11b98:	f04f 0600 	mov.w	r6, #0
   11b9c:	eb46 0101 	adc.w	r1, r6, r1
   11ba0:	f7ee faae 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   11ba4:	2101      	movs	r1, #1
   11ba6:	1a28      	subs	r0, r5, r0
   11ba8:	f012 fd55 	bl	24656 <z_set_timeout_expiry>
   11bac:	e7cc      	b.n	11b48 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11bae:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   11bb0:	b10d      	cbz	r5, 11bb6 <pm_system_suspend+0xba>
	return node->next;
   11bb2:	682b      	ldr	r3, [r5, #0]
   11bb4:	b16b      	cbz	r3, 11bd2 <pm_system_suspend+0xd6>
{
   11bb6:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11bb8:	b15d      	cbz	r5, 11bd2 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
   11bba:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   11bbc:	2a00      	cmp	r2, #0
   11bbe:	d0f6      	beq.n	11bae <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
   11bc0:	4b25      	ldr	r3, [pc, #148]	; (11c58 <pm_system_suspend+0x15c>)
   11bc2:	7d1b      	ldrb	r3, [r3, #20]
   11bc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11bc8:	4925      	ldr	r1, [pc, #148]	; (11c60 <pm_system_suspend+0x164>)
   11bca:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   11bce:	4790      	blx	r2
   11bd0:	e7ed      	b.n	11bae <pm_system_suspend+0xb2>
	__asm__ volatile(
   11bd2:	f386 8811 	msr	BASEPRI, r6
   11bd6:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   11bda:	f004 031f 	and.w	r3, r4, #31
   11bde:	2101      	movs	r1, #1
   11be0:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11be2:	0963      	lsrs	r3, r4, #5
   11be4:	4a22      	ldr	r2, [pc, #136]	; (11c70 <pm_system_suspend+0x174>)
   11be6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11bea:	f3bf 8f5b 	dmb	ish
   11bee:	e853 2f00 	ldrex	r2, [r3]
   11bf2:	430a      	orrs	r2, r1
   11bf4:	e843 2000 	strex	r0, r2, [r3]
   11bf8:	2800      	cmp	r0, #0
   11bfa:	d1f8      	bne.n	11bee <pm_system_suspend+0xf2>
   11bfc:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   11c00:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   11c04:	4a16      	ldr	r2, [pc, #88]	; (11c60 <pm_system_suspend+0x164>)
   11c06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11c0e:	ab08      	add	r3, sp, #32
   11c10:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   11c14:	4b17      	ldr	r3, [pc, #92]	; (11c74 <pm_system_suspend+0x178>)
   11c16:	b10b      	cbz	r3, 11c1c <pm_system_suspend+0x120>
		pm_power_state_set(info);
   11c18:	f00f f8df 	bl	20dda <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   11c1c:	f7ff ff08 	bl	11a30 <pm_system_resume>
	k_sched_unlock();
   11c20:	f00a fc82 	bl	1c528 <k_sched_unlock>
	bool ret = true;
   11c24:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   11c26:	f004 021f 	and.w	r2, r4, #31
   11c2a:	2301      	movs	r3, #1
   11c2c:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11c2e:	0964      	lsrs	r4, r4, #5
   11c30:	4a0a      	ldr	r2, [pc, #40]	; (11c5c <pm_system_suspend+0x160>)
   11c32:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   11c36:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11c38:	f3bf 8f5b 	dmb	ish
   11c3c:	e854 2f00 	ldrex	r2, [r4]
   11c40:	401a      	ands	r2, r3
   11c42:	e844 2100 	strex	r1, r2, [r4]
   11c46:	2900      	cmp	r1, #0
   11c48:	d1f8      	bne.n	11c3c <pm_system_suspend+0x140>
   11c4a:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   11c4e:	b009      	add	sp, #36	; 0x24
   11c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
   11c52:	2000      	movs	r0, #0
   11c54:	e7e7      	b.n	11c26 <pm_system_suspend+0x12a>
   11c56:	bf00      	nop
   11c58:	20002c9c 	.word	0x20002c9c
   11c5c:	20002010 	.word	0x20002010
   11c60:	20002004 	.word	0x20002004
   11c64:	20001ff8 	.word	0x20001ff8
   11c68:	000f423f 	.word	0x000f423f
   11c6c:	000f4240 	.word	0x000f4240
   11c70:	20002000 	.word	0x20002000
   11c74:	00020ddb 	.word	0x00020ddb

00011c78 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   11c78:	b4f0      	push	{r4, r5, r6, r7}
   11c7a:	b08c      	sub	sp, #48	; 0x30
   11c7c:	4607      	mov	r7, r0
   11c7e:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   11c80:	ac01      	add	r4, sp, #4
   11c82:	4d2a      	ldr	r5, [pc, #168]	; (11d2c <tc_aes128_set_encrypt_key+0xb4>)
   11c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   11c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   11c94:	2f00      	cmp	r7, #0
   11c96:	d045      	beq.n	11d24 <tc_aes128_set_encrypt_key+0xac>
   11c98:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   11c9a:	2e00      	cmp	r6, #0
   11c9c:	d044      	beq.n	11d28 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   11c9e:	2300      	movs	r3, #0
   11ca0:	e00f      	b.n	11cc2 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11ca2:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   11ca6:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   11caa:	784a      	ldrb	r2, [r1, #1]
   11cac:	0412      	lsls	r2, r2, #16
   11cae:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11cb2:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11cb4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11cb8:	78c9      	ldrb	r1, [r1, #3]
   11cba:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11cbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   11cc0:	3301      	adds	r3, #1
   11cc2:	2b03      	cmp	r3, #3
   11cc4:	d9ed      	bls.n	11ca2 <tc_aes128_set_encrypt_key+0x2a>
   11cc6:	e006      	b.n	11cd6 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   11cc8:	1f19      	subs	r1, r3, #4
   11cca:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   11cce:	404a      	eors	r2, r1
   11cd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   11cd4:	3301      	adds	r3, #1
   11cd6:	2b2b      	cmp	r3, #43	; 0x2b
   11cd8:	d820      	bhi.n	11d1c <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   11cda:	1e5a      	subs	r2, r3, #1
   11cdc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   11ce0:	f013 0f03 	tst.w	r3, #3
   11ce4:	d1f0      	bne.n	11cc8 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   11ce6:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11cea:	0e11      	lsrs	r1, r2, #24
   11cec:	4c10      	ldr	r4, [pc, #64]	; (11d30 <tc_aes128_set_encrypt_key+0xb8>)
   11cee:	5c65      	ldrb	r5, [r4, r1]
   11cf0:	f3c2 4107 	ubfx	r1, r2, #16, #8
   11cf4:	5c61      	ldrb	r1, [r4, r1]
   11cf6:	0409      	lsls	r1, r1, #16
   11cf8:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   11cfc:	f3c2 2507 	ubfx	r5, r2, #8, #8
   11d00:	5d65      	ldrb	r5, [r4, r5]
   11d02:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   11d06:	b2d2      	uxtb	r2, r2
   11d08:	5ca2      	ldrb	r2, [r4, r2]
   11d0a:	4311      	orrs	r1, r2
   11d0c:	f023 0203 	bic.w	r2, r3, #3
   11d10:	ac0c      	add	r4, sp, #48	; 0x30
   11d12:	4422      	add	r2, r4
   11d14:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   11d18:	404a      	eors	r2, r1
   11d1a:	e7d5      	b.n	11cc8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   11d1c:	2001      	movs	r0, #1
}
   11d1e:	b00c      	add	sp, #48	; 0x30
   11d20:	bcf0      	pop	{r4, r5, r6, r7}
   11d22:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   11d24:	2000      	movs	r0, #0
   11d26:	e7fa      	b.n	11d1e <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   11d28:	2000      	movs	r0, #0
   11d2a:	e7f8      	b.n	11d1e <tc_aes128_set_encrypt_key+0xa6>
   11d2c:	00024e30 	.word	0x00024e30
   11d30:	000251e0 	.word	0x000251e0

00011d34 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   11d34:	2800      	cmp	r0, #0
   11d36:	f000 839a 	beq.w	1246e <tc_aes_encrypt+0x73a>
{
   11d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d3e:	b088      	sub	sp, #32
   11d40:	4616      	mov	r6, r2
   11d42:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   11d44:	2900      	cmp	r1, #0
   11d46:	f000 8394 	beq.w	12472 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   11d4a:	2a00      	cmp	r2, #0
   11d4c:	f000 8393 	beq.w	12476 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   11d50:	2310      	movs	r3, #16
   11d52:	460a      	mov	r2, r1
   11d54:	4619      	mov	r1, r3
   11d56:	eb0d 0003 	add.w	r0, sp, r3
   11d5a:	f00e fe95 	bl	20a88 <_copy>
	add_round_key(state, s->words);
   11d5e:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   11d60:	6833      	ldr	r3, [r6, #0]
   11d62:	f89d 2010 	ldrb.w	r2, [sp, #16]
   11d66:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11d6a:	f88d 2010 	strb.w	r2, [sp, #16]
   11d6e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11d72:	f89d 1011 	ldrb.w	r1, [sp, #17]
   11d76:	404a      	eors	r2, r1
   11d78:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   11d7c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11d80:	f89d 1012 	ldrb.w	r1, [sp, #18]
   11d84:	404a      	eors	r2, r1
   11d86:	f88d 2012 	strb.w	r2, [sp, #18]
   11d8a:	b2db      	uxtb	r3, r3
   11d8c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   11d90:	4053      	eors	r3, r2
   11d92:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   11d96:	6873      	ldr	r3, [r6, #4]
   11d98:	f89d 2014 	ldrb.w	r2, [sp, #20]
   11d9c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11da0:	f88d 2014 	strb.w	r2, [sp, #20]
   11da4:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11da8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   11dac:	404a      	eors	r2, r1
   11dae:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   11db2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11db6:	f89d 1016 	ldrb.w	r1, [sp, #22]
   11dba:	404a      	eors	r2, r1
   11dbc:	f88d 2016 	strb.w	r2, [sp, #22]
   11dc0:	b2db      	uxtb	r3, r3
   11dc2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11dc6:	4053      	eors	r3, r2
   11dc8:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   11dcc:	68b3      	ldr	r3, [r6, #8]
   11dce:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11dd2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11dd6:	f88d 2018 	strb.w	r2, [sp, #24]
   11dda:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11dde:	f89d 1019 	ldrb.w	r1, [sp, #25]
   11de2:	404a      	eors	r2, r1
   11de4:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   11de8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11dec:	f89d 101a 	ldrb.w	r1, [sp, #26]
   11df0:	404a      	eors	r2, r1
   11df2:	f88d 201a 	strb.w	r2, [sp, #26]
   11df6:	b2db      	uxtb	r3, r3
   11df8:	f89d 201b 	ldrb.w	r2, [sp, #27]
   11dfc:	4053      	eors	r3, r2
   11dfe:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   11e02:	68f3      	ldr	r3, [r6, #12]
   11e04:	f89d 201c 	ldrb.w	r2, [sp, #28]
   11e08:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11e0c:	f88d 201c 	strb.w	r2, [sp, #28]
   11e10:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11e14:	f89d 101d 	ldrb.w	r1, [sp, #29]
   11e18:	404a      	eors	r2, r1
   11e1a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   11e1e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11e22:	f89d 101e 	ldrb.w	r1, [sp, #30]
   11e26:	404a      	eors	r2, r1
   11e28:	f88d 201e 	strb.w	r2, [sp, #30]
   11e2c:	b2db      	uxtb	r3, r3
   11e2e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   11e32:	4053      	eors	r3, r2
   11e34:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   11e38:	2400      	movs	r4, #0
}
   11e3a:	e239      	b.n	122b0 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   11e3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   11e40:	f88d 3000 	strb.w	r3, [sp]
   11e44:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11e48:	f88d 3001 	strb.w	r3, [sp, #1]
   11e4c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11e50:	f88d 3002 	strb.w	r3, [sp, #2]
   11e54:	f89d 301f 	ldrb.w	r3, [sp, #31]
   11e58:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   11e5c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11e60:	f88d 3004 	strb.w	r3, [sp, #4]
   11e64:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11e68:	f88d 3005 	strb.w	r3, [sp, #5]
   11e6c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   11e70:	f88d 3006 	strb.w	r3, [sp, #6]
   11e74:	f89d 3013 	ldrb.w	r3, [sp, #19]
   11e78:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   11e7c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11e80:	f88d 3008 	strb.w	r3, [sp, #8]
   11e84:	f89d 301d 	ldrb.w	r3, [sp, #29]
   11e88:	f88d 3009 	strb.w	r3, [sp, #9]
   11e8c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   11e90:	f88d 300a 	strb.w	r3, [sp, #10]
   11e94:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11e98:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   11e9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   11ea0:	f88d 300c 	strb.w	r3, [sp, #12]
   11ea4:	f89d 3011 	ldrb.w	r3, [sp, #17]
   11ea8:	f88d 300d 	strb.w	r3, [sp, #13]
   11eac:	f89d 3016 	ldrb.w	r3, [sp, #22]
   11eb0:	f88d 300e 	strb.w	r3, [sp, #14]
   11eb4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   11eb8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   11ebc:	2310      	movs	r3, #16
   11ebe:	466a      	mov	r2, sp
   11ec0:	4619      	mov	r1, r3
   11ec2:	eb0d 0003 	add.w	r0, sp, r3
   11ec6:	f00e fddf 	bl	20a88 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   11eca:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11ece:	f00e fdec 	bl	20aaa <_double_byte>
   11ed2:	4680      	mov	r8, r0
   11ed4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   11ed8:	f00e fde7 	bl	20aaa <_double_byte>
   11edc:	4601      	mov	r1, r0
   11ede:	f89d 0011 	ldrb.w	r0, [sp, #17]
   11ee2:	f89d 2012 	ldrb.w	r2, [sp, #18]
   11ee6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   11eea:	4041      	eors	r1, r0
   11eec:	ea88 0801 	eor.w	r8, r8, r1
   11ef0:	ea82 0208 	eor.w	r2, r2, r8
   11ef4:	4053      	eors	r3, r2
   11ef6:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   11efa:	f89d 8010 	ldrb.w	r8, [sp, #16]
   11efe:	f00e fdd4 	bl	20aaa <_double_byte>
   11f02:	ea88 0800 	eor.w	r8, r8, r0
   11f06:	fa5f f888 	uxtb.w	r8, r8
   11f0a:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11f0e:	f00e fdcc 	bl	20aaa <_double_byte>
   11f12:	4602      	mov	r2, r0
   11f14:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11f18:	f89d 3013 	ldrb.w	r3, [sp, #19]
   11f1c:	4042      	eors	r2, r0
   11f1e:	ea88 0802 	eor.w	r8, r8, r2
   11f22:	ea83 0308 	eor.w	r3, r3, r8
   11f26:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   11f2a:	f89d 8010 	ldrb.w	r8, [sp, #16]
   11f2e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   11f32:	ea88 0803 	eor.w	r8, r8, r3
   11f36:	f00e fdb8 	bl	20aaa <_double_byte>
   11f3a:	ea88 0800 	eor.w	r8, r8, r0
   11f3e:	fa5f f888 	uxtb.w	r8, r8
   11f42:	f89d 0013 	ldrb.w	r0, [sp, #19]
   11f46:	f00e fdb0 	bl	20aaa <_double_byte>
   11f4a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   11f4e:	4058      	eors	r0, r3
   11f50:	ea88 0800 	eor.w	r8, r8, r0
   11f54:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   11f58:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11f5c:	f00e fda5 	bl	20aaa <_double_byte>
   11f60:	f89d 2010 	ldrb.w	r2, [sp, #16]
   11f64:	f89d 3011 	ldrb.w	r3, [sp, #17]
   11f68:	f89d 8012 	ldrb.w	r8, [sp, #18]
   11f6c:	4050      	eors	r0, r2
   11f6e:	4043      	eors	r3, r0
   11f70:	ea88 0803 	eor.w	r8, r8, r3
   11f74:	fa5f f888 	uxtb.w	r8, r8
   11f78:	f89d 0013 	ldrb.w	r0, [sp, #19]
   11f7c:	f00e fd95 	bl	20aaa <_double_byte>
   11f80:	ea88 0800 	eor.w	r8, r8, r0
   11f84:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   11f88:	f89d 0014 	ldrb.w	r0, [sp, #20]
   11f8c:	f00e fd8d 	bl	20aaa <_double_byte>
   11f90:	4680      	mov	r8, r0
   11f92:	f89d 0015 	ldrb.w	r0, [sp, #21]
   11f96:	f00e fd88 	bl	20aaa <_double_byte>
   11f9a:	4601      	mov	r1, r0
   11f9c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   11fa0:	f89d 2016 	ldrb.w	r2, [sp, #22]
   11fa4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11fa8:	4041      	eors	r1, r0
   11faa:	ea88 0801 	eor.w	r8, r8, r1
   11fae:	ea82 0208 	eor.w	r2, r2, r8
   11fb2:	4053      	eors	r3, r2
   11fb4:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   11fb8:	f89d 8014 	ldrb.w	r8, [sp, #20]
   11fbc:	f00e fd75 	bl	20aaa <_double_byte>
   11fc0:	ea88 0800 	eor.w	r8, r8, r0
   11fc4:	fa5f f888 	uxtb.w	r8, r8
   11fc8:	f89d 0016 	ldrb.w	r0, [sp, #22]
   11fcc:	f00e fd6d 	bl	20aaa <_double_byte>
   11fd0:	4602      	mov	r2, r0
   11fd2:	f89d 0016 	ldrb.w	r0, [sp, #22]
   11fd6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11fda:	4042      	eors	r2, r0
   11fdc:	ea88 0802 	eor.w	r8, r8, r2
   11fe0:	ea83 0308 	eor.w	r3, r3, r8
   11fe4:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   11fe8:	f89d 8014 	ldrb.w	r8, [sp, #20]
   11fec:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11ff0:	ea88 0803 	eor.w	r8, r8, r3
   11ff4:	f00e fd59 	bl	20aaa <_double_byte>
   11ff8:	ea88 0800 	eor.w	r8, r8, r0
   11ffc:	fa5f f888 	uxtb.w	r8, r8
   12000:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12004:	f00e fd51 	bl	20aaa <_double_byte>
   12008:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1200c:	4058      	eors	r0, r3
   1200e:	ea88 0800 	eor.w	r8, r8, r0
   12012:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12016:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1201a:	f00e fd46 	bl	20aaa <_double_byte>
   1201e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12022:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12026:	f89d 8016 	ldrb.w	r8, [sp, #22]
   1202a:	4050      	eors	r0, r2
   1202c:	4043      	eors	r3, r0
   1202e:	ea88 0803 	eor.w	r8, r8, r3
   12032:	fa5f f888 	uxtb.w	r8, r8
   12036:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1203a:	f00e fd36 	bl	20aaa <_double_byte>
   1203e:	ea88 0800 	eor.w	r8, r8, r0
   12042:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12046:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1204a:	f00e fd2e 	bl	20aaa <_double_byte>
   1204e:	4680      	mov	r8, r0
   12050:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12054:	f00e fd29 	bl	20aaa <_double_byte>
   12058:	4601      	mov	r1, r0
   1205a:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1205e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   12062:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12066:	4041      	eors	r1, r0
   12068:	ea88 0801 	eor.w	r8, r8, r1
   1206c:	ea82 0208 	eor.w	r2, r2, r8
   12070:	4053      	eors	r3, r2
   12072:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12076:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1207a:	f00e fd16 	bl	20aaa <_double_byte>
   1207e:	ea88 0800 	eor.w	r8, r8, r0
   12082:	fa5f f888 	uxtb.w	r8, r8
   12086:	f89d 001a 	ldrb.w	r0, [sp, #26]
   1208a:	f00e fd0e 	bl	20aaa <_double_byte>
   1208e:	4602      	mov	r2, r0
   12090:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12094:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12098:	4042      	eors	r2, r0
   1209a:	ea88 0802 	eor.w	r8, r8, r2
   1209e:	ea83 0308 	eor.w	r3, r3, r8
   120a2:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   120a6:	f89d 8018 	ldrb.w	r8, [sp, #24]
   120aa:	f89d 3019 	ldrb.w	r3, [sp, #25]
   120ae:	ea88 0803 	eor.w	r8, r8, r3
   120b2:	f00e fcfa 	bl	20aaa <_double_byte>
   120b6:	ea88 0800 	eor.w	r8, r8, r0
   120ba:	fa5f f888 	uxtb.w	r8, r8
   120be:	f89d 001b 	ldrb.w	r0, [sp, #27]
   120c2:	f00e fcf2 	bl	20aaa <_double_byte>
   120c6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   120ca:	4058      	eors	r0, r3
   120cc:	ea88 0800 	eor.w	r8, r8, r0
   120d0:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   120d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
   120d8:	f00e fce7 	bl	20aaa <_double_byte>
   120dc:	f89d 2018 	ldrb.w	r2, [sp, #24]
   120e0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   120e4:	f89d 801a 	ldrb.w	r8, [sp, #26]
   120e8:	4050      	eors	r0, r2
   120ea:	4043      	eors	r3, r0
   120ec:	ea88 0803 	eor.w	r8, r8, r3
   120f0:	fa5f f888 	uxtb.w	r8, r8
   120f4:	f89d 001b 	ldrb.w	r0, [sp, #27]
   120f8:	f00e fcd7 	bl	20aaa <_double_byte>
   120fc:	ea88 0800 	eor.w	r8, r8, r0
   12100:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12104:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12108:	f00e fccf 	bl	20aaa <_double_byte>
   1210c:	4680      	mov	r8, r0
   1210e:	f89d 001d 	ldrb.w	r0, [sp, #29]
   12112:	f00e fcca 	bl	20aaa <_double_byte>
   12116:	4601      	mov	r1, r0
   12118:	f89d 001d 	ldrb.w	r0, [sp, #29]
   1211c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   12120:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12124:	4041      	eors	r1, r0
   12126:	ea88 0801 	eor.w	r8, r8, r1
   1212a:	ea82 0208 	eor.w	r2, r2, r8
   1212e:	4053      	eors	r3, r2
   12130:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12134:	f89d 801c 	ldrb.w	r8, [sp, #28]
   12138:	f00e fcb7 	bl	20aaa <_double_byte>
   1213c:	ea88 0800 	eor.w	r8, r8, r0
   12140:	fa5f f888 	uxtb.w	r8, r8
   12144:	f89d 001e 	ldrb.w	r0, [sp, #30]
   12148:	f00e fcaf 	bl	20aaa <_double_byte>
   1214c:	4602      	mov	r2, r0
   1214e:	f89d 001e 	ldrb.w	r0, [sp, #30]
   12152:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12156:	4042      	eors	r2, r0
   12158:	ea88 0802 	eor.w	r8, r8, r2
   1215c:	ea83 0308 	eor.w	r3, r3, r8
   12160:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12164:	f89d 801c 	ldrb.w	r8, [sp, #28]
   12168:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1216c:	ea88 0803 	eor.w	r8, r8, r3
   12170:	f00e fc9b 	bl	20aaa <_double_byte>
   12174:	ea88 0800 	eor.w	r8, r8, r0
   12178:	fa5f f888 	uxtb.w	r8, r8
   1217c:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12180:	f00e fc93 	bl	20aaa <_double_byte>
   12184:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12188:	4058      	eors	r0, r3
   1218a:	ea88 0800 	eor.w	r8, r8, r0
   1218e:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12192:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12196:	f00e fc88 	bl	20aaa <_double_byte>
   1219a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1219e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   121a2:	f89d 801e 	ldrb.w	r8, [sp, #30]
   121a6:	4050      	eors	r0, r2
   121a8:	4043      	eors	r3, r0
   121aa:	ea88 0803 	eor.w	r8, r8, r3
   121ae:	fa5f f888 	uxtb.w	r8, r8
   121b2:	f89d 001f 	ldrb.w	r0, [sp, #31]
   121b6:	f00e fc78 	bl	20aaa <_double_byte>
   121ba:	ea88 0800 	eor.w	r8, r8, r0
   121be:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   121c2:	2310      	movs	r3, #16
   121c4:	466a      	mov	r2, sp
   121c6:	4619      	mov	r1, r3
   121c8:	eb0d 0003 	add.w	r0, sp, r3
   121cc:	f00e fc5c 	bl	20a88 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   121d0:	3401      	adds	r4, #1
   121d2:	0123      	lsls	r3, r4, #4
   121d4:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   121d8:	58eb      	ldr	r3, [r5, r3]
   121da:	f89d 1010 	ldrb.w	r1, [sp, #16]
   121de:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   121e2:	f88d 1010 	strb.w	r1, [sp, #16]
   121e6:	f3c3 4107 	ubfx	r1, r3, #16, #8
   121ea:	f89d 0011 	ldrb.w	r0, [sp, #17]
   121ee:	4041      	eors	r1, r0
   121f0:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   121f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   121f8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   121fc:	4041      	eors	r1, r0
   121fe:	f88d 1012 	strb.w	r1, [sp, #18]
   12202:	b2db      	uxtb	r3, r3
   12204:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12208:	404b      	eors	r3, r1
   1220a:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1220e:	6853      	ldr	r3, [r2, #4]
   12210:	f89d 1014 	ldrb.w	r1, [sp, #20]
   12214:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12218:	f88d 1014 	strb.w	r1, [sp, #20]
   1221c:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12220:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12224:	4041      	eors	r1, r0
   12226:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1222a:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1222e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12232:	4041      	eors	r1, r0
   12234:	f88d 1016 	strb.w	r1, [sp, #22]
   12238:	b2db      	uxtb	r3, r3
   1223a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1223e:	404b      	eors	r3, r1
   12240:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12244:	6893      	ldr	r3, [r2, #8]
   12246:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1224a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1224e:	f88d 1018 	strb.w	r1, [sp, #24]
   12252:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12256:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1225a:	4041      	eors	r1, r0
   1225c:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12260:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12264:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12268:	4041      	eors	r1, r0
   1226a:	f88d 101a 	strb.w	r1, [sp, #26]
   1226e:	b2db      	uxtb	r3, r3
   12270:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12274:	404b      	eors	r3, r1
   12276:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1227a:	68d3      	ldr	r3, [r2, #12]
   1227c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12280:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12284:	f88d 201c 	strb.w	r2, [sp, #28]
   12288:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1228c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12290:	404a      	eors	r2, r1
   12292:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12296:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1229a:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1229e:	404a      	eors	r2, r1
   122a0:	f88d 201e 	strb.w	r2, [sp, #30]
   122a4:	b2db      	uxtb	r3, r3
   122a6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   122aa:	4053      	eors	r3, r2
   122ac:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   122b0:	2c08      	cmp	r4, #8
   122b2:	d80a      	bhi.n	122ca <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   122b4:	2300      	movs	r3, #0
   122b6:	2b0f      	cmp	r3, #15
   122b8:	f63f adc0 	bhi.w	11e3c <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   122bc:	a904      	add	r1, sp, #16
   122be:	5cc8      	ldrb	r0, [r1, r3]
   122c0:	4a6e      	ldr	r2, [pc, #440]	; (1247c <tc_aes_encrypt+0x748>)
   122c2:	5c10      	ldrb	r0, [r2, r0]
   122c4:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   122c6:	3301      	adds	r3, #1
   122c8:	e7f5      	b.n	122b6 <tc_aes_encrypt+0x582>
   122ca:	2300      	movs	r3, #0
   122cc:	e005      	b.n	122da <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   122ce:	aa04      	add	r2, sp, #16
   122d0:	5cd1      	ldrb	r1, [r2, r3]
   122d2:	486a      	ldr	r0, [pc, #424]	; (1247c <tc_aes_encrypt+0x748>)
   122d4:	5c41      	ldrb	r1, [r0, r1]
   122d6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   122d8:	3301      	adds	r3, #1
   122da:	2b0f      	cmp	r3, #15
   122dc:	d9f7      	bls.n	122ce <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   122de:	f89d 3010 	ldrb.w	r3, [sp, #16]
   122e2:	f88d 3000 	strb.w	r3, [sp]
   122e6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   122ea:	f88d 3001 	strb.w	r3, [sp, #1]
   122ee:	f89d 301a 	ldrb.w	r3, [sp, #26]
   122f2:	f88d 3002 	strb.w	r3, [sp, #2]
   122f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   122fa:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   122fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12302:	f88d 3004 	strb.w	r3, [sp, #4]
   12306:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1230a:	f88d 3005 	strb.w	r3, [sp, #5]
   1230e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12312:	f88d 3006 	strb.w	r3, [sp, #6]
   12316:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1231a:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1231e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12322:	f88d 3008 	strb.w	r3, [sp, #8]
   12326:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1232a:	f88d 3009 	strb.w	r3, [sp, #9]
   1232e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12332:	f88d 300a 	strb.w	r3, [sp, #10]
   12336:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1233a:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1233e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12342:	f88d 300c 	strb.w	r3, [sp, #12]
   12346:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1234a:	f88d 300d 	strb.w	r3, [sp, #13]
   1234e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12352:	f88d 300e 	strb.w	r3, [sp, #14]
   12356:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1235a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1235e:	2310      	movs	r3, #16
   12360:	466a      	mov	r2, sp
   12362:	4619      	mov	r1, r3
   12364:	eb0d 0003 	add.w	r0, sp, r3
   12368:	f00e fb8e 	bl	20a88 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   1236c:	1c63      	adds	r3, r4, #1
   1236e:	011a      	lsls	r2, r3, #4
   12370:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12374:	58b2      	ldr	r2, [r6, r2]
   12376:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1237a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   1237e:	f88d 1010 	strb.w	r1, [sp, #16]
   12382:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12386:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1238a:	4041      	eors	r1, r0
   1238c:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12390:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12394:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12398:	4041      	eors	r1, r0
   1239a:	f88d 1012 	strb.w	r1, [sp, #18]
   1239e:	b2d2      	uxtb	r2, r2
   123a0:	f89d 1013 	ldrb.w	r1, [sp, #19]
   123a4:	404a      	eors	r2, r1
   123a6:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   123aa:	685a      	ldr	r2, [r3, #4]
   123ac:	f89d 1014 	ldrb.w	r1, [sp, #20]
   123b0:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   123b4:	f88d 1014 	strb.w	r1, [sp, #20]
   123b8:	f3c2 4107 	ubfx	r1, r2, #16, #8
   123bc:	f89d 0015 	ldrb.w	r0, [sp, #21]
   123c0:	4041      	eors	r1, r0
   123c2:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   123c6:	f3c2 2107 	ubfx	r1, r2, #8, #8
   123ca:	f89d 0016 	ldrb.w	r0, [sp, #22]
   123ce:	4041      	eors	r1, r0
   123d0:	f88d 1016 	strb.w	r1, [sp, #22]
   123d4:	b2d2      	uxtb	r2, r2
   123d6:	f89d 1017 	ldrb.w	r1, [sp, #23]
   123da:	404a      	eors	r2, r1
   123dc:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   123e0:	689a      	ldr	r2, [r3, #8]
   123e2:	f89d 1018 	ldrb.w	r1, [sp, #24]
   123e6:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   123ea:	f88d 1018 	strb.w	r1, [sp, #24]
   123ee:	f3c2 4107 	ubfx	r1, r2, #16, #8
   123f2:	f89d 0019 	ldrb.w	r0, [sp, #25]
   123f6:	4041      	eors	r1, r0
   123f8:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   123fc:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12400:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12404:	4041      	eors	r1, r0
   12406:	f88d 101a 	strb.w	r1, [sp, #26]
   1240a:	b2d2      	uxtb	r2, r2
   1240c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12410:	404a      	eors	r2, r1
   12412:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12416:	68db      	ldr	r3, [r3, #12]
   12418:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1241c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12420:	f88d 201c 	strb.w	r2, [sp, #28]
   12424:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12428:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1242c:	404a      	eors	r2, r1
   1242e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12432:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12436:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1243a:	404a      	eors	r2, r1
   1243c:	f88d 201e 	strb.w	r2, [sp, #30]
   12440:	b2db      	uxtb	r3, r3
   12442:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12446:	4053      	eors	r3, r2
   12448:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1244c:	2310      	movs	r3, #16
   1244e:	eb0d 0203 	add.w	r2, sp, r3
   12452:	4619      	mov	r1, r3
   12454:	4638      	mov	r0, r7
   12456:	f00e fb17 	bl	20a88 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1245a:	2210      	movs	r2, #16
   1245c:	2100      	movs	r1, #0
   1245e:	eb0d 0002 	add.w	r0, sp, r2
   12462:	f00e fb1e 	bl	20aa2 <_set>

	return TC_CRYPTO_SUCCESS;
   12466:	2001      	movs	r0, #1
}
   12468:	b008      	add	sp, #32
   1246a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   1246e:	2000      	movs	r0, #0
}
   12470:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12472:	2000      	movs	r0, #0
   12474:	e7f8      	b.n	12468 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   12476:	2000      	movs	r0, #0
   12478:	e7f6      	b.n	12468 <tc_aes_encrypt+0x734>
   1247a:	bf00      	nop
   1247c:	000251e0 	.word	0x000251e0

00012480 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   12480:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   12482:	4802      	ldr	r0, [pc, #8]	; (1248c <nrf_cc3xx_platform_abort_init+0xc>)
   12484:	f00a ff6c 	bl	1d360 <nrf_cc3xx_platform_set_abort>
}
   12488:	bd08      	pop	{r3, pc}
   1248a:	bf00      	nop
   1248c:	000252e0 	.word	0x000252e0

00012490 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12490:	b1d0      	cbz	r0, 124c8 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12492:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12494:	6842      	ldr	r2, [r0, #4]
   12496:	2a04      	cmp	r2, #4
   12498:	d005      	beq.n	124a6 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1249a:	b1d2      	cbz	r2, 124d2 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   1249c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1249e:	f009 fb27 	bl	1baf0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   124a2:	2000      	movs	r0, #0
    }
}
   124a4:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   124a6:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   124a8:	2200      	movs	r2, #0
   124aa:	f3bf 8f5b 	dmb	ish
   124ae:	e853 1f00 	ldrex	r1, [r3]
   124b2:	2901      	cmp	r1, #1
   124b4:	d103      	bne.n	124be <mutex_unlock_platform+0x2e>
   124b6:	e843 2000 	strex	r0, r2, [r3]
   124ba:	2800      	cmp	r0, #0
   124bc:	d1f7      	bne.n	124ae <mutex_unlock_platform+0x1e>
   124be:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   124c2:	d104      	bne.n	124ce <mutex_unlock_platform+0x3e>
   124c4:	4610      	mov	r0, r2
   124c6:	e7ed      	b.n	124a4 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   124c8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   124cc:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   124ce:	4802      	ldr	r0, [pc, #8]	; (124d8 <mutex_unlock_platform+0x48>)
   124d0:	e7e8      	b.n	124a4 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   124d2:	4802      	ldr	r0, [pc, #8]	; (124dc <mutex_unlock_platform+0x4c>)
   124d4:	e7e6      	b.n	124a4 <mutex_unlock_platform+0x14>
   124d6:	bf00      	nop
   124d8:	ffff8fe9 	.word	0xffff8fe9
   124dc:	ffff8fea 	.word	0xffff8fea

000124e0 <mutex_lock_platform>:
    if(mutex == NULL) {
   124e0:	b320      	cbz	r0, 1252c <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   124e2:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   124e4:	6842      	ldr	r2, [r0, #4]
   124e6:	2a04      	cmp	r2, #4
   124e8:	d002      	beq.n	124f0 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   124ea:	b992      	cbnz	r2, 12512 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   124ec:	4811      	ldr	r0, [pc, #68]	; (12534 <mutex_lock_platform+0x54>)
   124ee:	e00f      	b.n	12510 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   124f0:	6803      	ldr	r3, [r0, #0]
   124f2:	2201      	movs	r2, #1
   124f4:	f3bf 8f5b 	dmb	ish
   124f8:	e853 1f00 	ldrex	r1, [r3]
   124fc:	2900      	cmp	r1, #0
   124fe:	d103      	bne.n	12508 <mutex_lock_platform+0x28>
   12500:	e843 2000 	strex	r0, r2, [r3]
   12504:	2800      	cmp	r0, #0
   12506:	d1f7      	bne.n	124f8 <mutex_lock_platform+0x18>
   12508:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1250c:	d10c      	bne.n	12528 <mutex_lock_platform+0x48>
   1250e:	2000      	movs	r0, #0
}
   12510:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   12512:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   12514:	f04f 32ff 	mov.w	r2, #4294967295
   12518:	f04f 33ff 	mov.w	r3, #4294967295
   1251c:	f009 fa5e 	bl	1b9dc <z_impl_k_mutex_lock>
        if (ret == 0) {
   12520:	2800      	cmp	r0, #0
   12522:	d0f5      	beq.n	12510 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   12524:	4804      	ldr	r0, [pc, #16]	; (12538 <mutex_lock_platform+0x58>)
   12526:	e7f3      	b.n	12510 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12528:	4803      	ldr	r0, [pc, #12]	; (12538 <mutex_lock_platform+0x58>)
   1252a:	e7f1      	b.n	12510 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1252c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   12530:	4770      	bx	lr
   12532:	bf00      	nop
   12534:	ffff8fea 	.word	0xffff8fea
   12538:	ffff8fe9 	.word	0xffff8fe9

0001253c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1253c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1253e:	4604      	mov	r4, r0
   12540:	b190      	cbz	r0, 12568 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12542:	6863      	ldr	r3, [r4, #4]
   12544:	2b04      	cmp	r3, #4
   12546:	d00e      	beq.n	12566 <mutex_free_platform+0x2a>
   12548:	2b08      	cmp	r3, #8
   1254a:	d00c      	beq.n	12566 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1254c:	b15b      	cbz	r3, 12566 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1254e:	f013 0f02 	tst.w	r3, #2
   12552:	d10e      	bne.n	12572 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12554:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memset, void *, int)
   12556:	2200      	movs	r2, #0
   12558:	601a      	str	r2, [r3, #0]
   1255a:	605a      	str	r2, [r3, #4]
   1255c:	609a      	str	r2, [r3, #8]
   1255e:	60da      	str	r2, [r3, #12]
   12560:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12562:	2300      	movs	r3, #0
   12564:	6063      	str	r3, [r4, #4]
}
   12566:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   12568:	4b05      	ldr	r3, [pc, #20]	; (12580 <mutex_free_platform+0x44>)
   1256a:	685b      	ldr	r3, [r3, #4]
   1256c:	4805      	ldr	r0, [pc, #20]	; (12584 <mutex_free_platform+0x48>)
   1256e:	4798      	blx	r3
   12570:	e7e7      	b.n	12542 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   12572:	4621      	mov	r1, r4
   12574:	4804      	ldr	r0, [pc, #16]	; (12588 <mutex_free_platform+0x4c>)
   12576:	f011 fbcb 	bl	23d10 <k_mem_slab_free>
        mutex->mutex = NULL;
   1257a:	2300      	movs	r3, #0
   1257c:	6023      	str	r3, [r4, #0]
   1257e:	e7f0      	b.n	12562 <mutex_free_platform+0x26>
   12580:	200005f8 	.word	0x200005f8
   12584:	000252e8 	.word	0x000252e8
   12588:	20002014 	.word	0x20002014

0001258c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1258c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1258e:	4604      	mov	r4, r0
   12590:	b178      	cbz	r0, 125b2 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12592:	6863      	ldr	r3, [r4, #4]
   12594:	2b04      	cmp	r3, #4
   12596:	d00b      	beq.n	125b0 <mutex_init_platform+0x24>
   12598:	2b08      	cmp	r3, #8
   1259a:	d009      	beq.n	125b0 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1259c:	b90b      	cbnz	r3, 125a2 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   1259e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   125a0:	b163      	cbz	r3, 125bc <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   125a2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   125a4:	f011 fc47 	bl	23e36 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   125a8:	6863      	ldr	r3, [r4, #4]
   125aa:	f043 0301 	orr.w	r3, r3, #1
   125ae:	6063      	str	r3, [r4, #4]
}
   125b0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   125b2:	4b10      	ldr	r3, [pc, #64]	; (125f4 <mutex_init_platform+0x68>)
   125b4:	685b      	ldr	r3, [r3, #4]
   125b6:	4810      	ldr	r0, [pc, #64]	; (125f8 <mutex_init_platform+0x6c>)
   125b8:	4798      	blx	r3
   125ba:	e7ea      	b.n	12592 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   125bc:	f04f 32ff 	mov.w	r2, #4294967295
   125c0:	f04f 33ff 	mov.w	r3, #4294967295
   125c4:	4621      	mov	r1, r4
   125c6:	480d      	ldr	r0, [pc, #52]	; (125fc <mutex_init_platform+0x70>)
   125c8:	f009 f8c4 	bl	1b754 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   125cc:	b908      	cbnz	r0, 125d2 <mutex_init_platform+0x46>
   125ce:	6823      	ldr	r3, [r4, #0]
   125d0:	b91b      	cbnz	r3, 125da <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   125d2:	4b08      	ldr	r3, [pc, #32]	; (125f4 <mutex_init_platform+0x68>)
   125d4:	685b      	ldr	r3, [r3, #4]
   125d6:	480a      	ldr	r0, [pc, #40]	; (12600 <mutex_init_platform+0x74>)
   125d8:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   125da:	6823      	ldr	r3, [r4, #0]
   125dc:	2200      	movs	r2, #0
   125de:	601a      	str	r2, [r3, #0]
   125e0:	605a      	str	r2, [r3, #4]
   125e2:	609a      	str	r2, [r3, #8]
   125e4:	60da      	str	r2, [r3, #12]
   125e6:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   125e8:	6863      	ldr	r3, [r4, #4]
   125ea:	f043 0302 	orr.w	r3, r3, #2
   125ee:	6063      	str	r3, [r4, #4]
   125f0:	e7d7      	b.n	125a2 <mutex_init_platform+0x16>
   125f2:	bf00      	nop
   125f4:	200005f8 	.word	0x200005f8
   125f8:	000252e8 	.word	0x000252e8
   125fc:	20002014 	.word	0x20002014
   12600:	00025310 	.word	0x00025310

00012604 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12604:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   12606:	2340      	movs	r3, #64	; 0x40
   12608:	2214      	movs	r2, #20
   1260a:	4904      	ldr	r1, [pc, #16]	; (1261c <nrf_cc3xx_platform_mutex_init+0x18>)
   1260c:	4804      	ldr	r0, [pc, #16]	; (12620 <nrf_cc3xx_platform_mutex_init+0x1c>)
   1260e:	f011 fb71 	bl	23cf4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   12612:	4904      	ldr	r1, [pc, #16]	; (12624 <nrf_cc3xx_platform_mutex_init+0x20>)
   12614:	4804      	ldr	r0, [pc, #16]	; (12628 <nrf_cc3xx_platform_mutex_init+0x24>)
   12616:	f00a ff5b 	bl	1d4d0 <nrf_cc3xx_platform_set_mutexes>
}
   1261a:	bd08      	pop	{r3, pc}
   1261c:	20002030 	.word	0x20002030
   12620:	20002014 	.word	0x20002014
   12624:	00025350 	.word	0x00025350
   12628:	00025340 	.word	0x00025340

0001262c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1262c:	4901      	ldr	r1, [pc, #4]	; (12634 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1262e:	2210      	movs	r2, #16
	str	r2, [r1]
   12630:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12632:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12634:	e000ed10 	.word	0xe000ed10

00012638 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12638:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1263a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1263c:	f380 8811 	msr	BASEPRI, r0
	isb
   12640:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12644:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12648:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1264a:	b662      	cpsie	i
	isb
   1264c:	f3bf 8f6f 	isb	sy

	bx	lr
   12650:	4770      	bx	lr
   12652:	bf00      	nop

00012654 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12654:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12656:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12658:	f381 8811 	msr	BASEPRI, r1

	wfe
   1265c:	bf20      	wfe

	msr	BASEPRI, r0
   1265e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12662:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12664:	4770      	bx	lr
   12666:	bf00      	nop

00012668 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   12668:	b570      	push	{r4, r5, r6, lr}
   1266a:	b082      	sub	sp, #8
   1266c:	4604      	mov	r4, r0
   1266e:	4d1f      	ldr	r5, [pc, #124]	; (126ec <esf_dump+0x84>)
   12670:	4b1f      	ldr	r3, [pc, #124]	; (126f0 <esf_dump+0x88>)
   12672:	1aed      	subs	r5, r5, r3
   12674:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12676:	2601      	movs	r6, #1
   12678:	f04f 0300 	mov.w	r3, #0
   1267c:	f366 0302 	bfi	r3, r6, #0, #3
   12680:	f36f 03c5 	bfc	r3, #3, #3
   12684:	f365 138f 	bfi	r3, r5, #6, #10
   12688:	f8ad 3000 	strh.w	r3, [sp]
   1268c:	6883      	ldr	r3, [r0, #8]
   1268e:	6842      	ldr	r2, [r0, #4]
   12690:	6801      	ldr	r1, [r0, #0]
   12692:	4818      	ldr	r0, [pc, #96]	; (126f4 <esf_dump+0x8c>)
   12694:	f7fe fd68 	bl	11168 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12698:	f04f 0300 	mov.w	r3, #0
   1269c:	f366 0302 	bfi	r3, r6, #0, #3
   126a0:	f36f 03c5 	bfc	r3, #3, #3
   126a4:	f365 138f 	bfi	r3, r5, #6, #10
   126a8:	f8ad 3000 	strh.w	r3, [sp]
   126ac:	6963      	ldr	r3, [r4, #20]
   126ae:	6922      	ldr	r2, [r4, #16]
   126b0:	68e1      	ldr	r1, [r4, #12]
   126b2:	4811      	ldr	r0, [pc, #68]	; (126f8 <esf_dump+0x90>)
   126b4:	f7fe fd58 	bl	11168 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   126b8:	f04f 0200 	mov.w	r2, #0
   126bc:	f366 0202 	bfi	r2, r6, #0, #3
   126c0:	f36f 02c5 	bfc	r2, #3, #3
   126c4:	f365 128f 	bfi	r2, r5, #6, #10
   126c8:	69e1      	ldr	r1, [r4, #28]
   126ca:	480c      	ldr	r0, [pc, #48]	; (126fc <esf_dump+0x94>)
   126cc:	f7fe fd8a 	bl	111e4 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   126d0:	f04f 0200 	mov.w	r2, #0
   126d4:	f366 0202 	bfi	r2, r6, #0, #3
   126d8:	f36f 02c5 	bfc	r2, #3, #3
   126dc:	f365 128f 	bfi	r2, r5, #6, #10
   126e0:	69a1      	ldr	r1, [r4, #24]
   126e2:	4807      	ldr	r0, [pc, #28]	; (12700 <esf_dump+0x98>)
   126e4:	f7fe fd7e 	bl	111e4 <log_1>
		esf->basic.pc);
}
   126e8:	b002      	add	sp, #8
   126ea:	bd70      	pop	{r4, r5, r6, pc}
   126ec:	00024d78 	.word	0x00024d78
   126f0:	00024ca0 	.word	0x00024ca0
   126f4:	00025364 	.word	0x00025364
   126f8:	00025394 	.word	0x00025394
   126fc:	000253c4 	.word	0x000253c4
   12700:	000253d4 	.word	0x000253d4

00012704 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12704:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12706:	2b00      	cmp	r3, #0
   12708:	db08      	blt.n	1271c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1270a:	f000 001f 	and.w	r0, r0, #31
   1270e:	095b      	lsrs	r3, r3, #5
   12710:	2201      	movs	r2, #1
   12712:	fa02 f000 	lsl.w	r0, r2, r0
   12716:	4a02      	ldr	r2, [pc, #8]	; (12720 <arch_irq_enable+0x1c>)
   12718:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1271c:	4770      	bx	lr
   1271e:	bf00      	nop
   12720:	e000e100 	.word	0xe000e100

00012724 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12724:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12726:	2b00      	cmp	r3, #0
   12728:	db0d      	blt.n	12746 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1272a:	f000 001f 	and.w	r0, r0, #31
   1272e:	095b      	lsrs	r3, r3, #5
   12730:	2201      	movs	r2, #1
   12732:	fa02 f000 	lsl.w	r0, r2, r0
   12736:	3320      	adds	r3, #32
   12738:	4a03      	ldr	r2, [pc, #12]	; (12748 <arch_irq_disable+0x24>)
   1273a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1273e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12742:	f3bf 8f6f 	isb	sy
}
   12746:	4770      	bx	lr
   12748:	e000e100 	.word	0xe000e100

0001274c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1274c:	0942      	lsrs	r2, r0, #5
   1274e:	4b05      	ldr	r3, [pc, #20]	; (12764 <arch_irq_is_enabled+0x18>)
   12750:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12754:	f000 001f 	and.w	r0, r0, #31
   12758:	2301      	movs	r3, #1
   1275a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1275e:	4010      	ands	r0, r2
   12760:	4770      	bx	lr
   12762:	bf00      	nop
   12764:	e000e100 	.word	0xe000e100

00012768 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12768:	f012 0f01 	tst.w	r2, #1
   1276c:	d10c      	bne.n	12788 <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1276e:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12770:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12772:	2b00      	cmp	r3, #0
   12774:	db0a      	blt.n	1278c <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12776:	0149      	lsls	r1, r1, #5
   12778:	b2c9      	uxtb	r1, r1
   1277a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1277e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   12782:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   12786:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12788:	2100      	movs	r1, #0
   1278a:	e7f1      	b.n	12770 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1278c:	f000 000f 	and.w	r0, r0, #15
   12790:	0149      	lsls	r1, r1, #5
   12792:	b2c9      	uxtb	r1, r1
   12794:	4b01      	ldr	r3, [pc, #4]	; (1279c <z_arm_irq_priority_set+0x34>)
   12796:	5419      	strb	r1, [r3, r0]
}
   12798:	4770      	bx	lr
   1279a:	bf00      	nop
   1279c:	e000ed14 	.word	0xe000ed14

000127a0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   127a0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   127a2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   127a4:	4b05      	ldr	r3, [pc, #20]	; (127bc <_arch_isr_direct_pm+0x1c>)
   127a6:	699b      	ldr	r3, [r3, #24]
   127a8:	b90b      	cbnz	r3, 127ae <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   127aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   127ac:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   127ae:	4b03      	ldr	r3, [pc, #12]	; (127bc <_arch_isr_direct_pm+0x1c>)
   127b0:	2200      	movs	r2, #0
   127b2:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   127b4:	f011 fb23 	bl	23dfe <z_pm_save_idle_exit>
   127b8:	e7f7      	b.n	127aa <_arch_isr_direct_pm+0xa>
   127ba:	bf00      	nop
   127bc:	20002c9c 	.word	0x20002c9c

000127c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   127c0:	bf30      	wfi
    b z_SysNmiOnReset
   127c2:	f7ff bffd 	b.w	127c0 <z_SysNmiOnReset>
   127c6:	bf00      	nop

000127c8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   127c8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   127ca:	4b0b      	ldr	r3, [pc, #44]	; (127f8 <z_arm_prep_c+0x30>)
   127cc:	4a0b      	ldr	r2, [pc, #44]	; (127fc <z_arm_prep_c+0x34>)
   127ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   127d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   127d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   127d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   127dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   127e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   127e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   127e8:	f008 ff3e 	bl	1b668 <z_bss_zero>
	z_data_copy();
   127ec:	f00a f82c 	bl	1c848 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   127f0:	f000 fcbc 	bl	1316c <z_arm_interrupt_init>
	z_cstart();
   127f4:	f008 ff44 	bl	1b680 <z_cstart>
   127f8:	e000ed00 	.word	0xe000ed00
   127fc:	00000000 	.word	0x00000000

00012800 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12800:	4a0a      	ldr	r2, [pc, #40]	; (1282c <arch_swap+0x2c>)
   12802:	6893      	ldr	r3, [r2, #8]
   12804:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   12808:	4909      	ldr	r1, [pc, #36]	; (12830 <arch_swap+0x30>)
   1280a:	6809      	ldr	r1, [r1, #0]
   1280c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12810:	4908      	ldr	r1, [pc, #32]	; (12834 <arch_swap+0x34>)
   12812:	684b      	ldr	r3, [r1, #4]
   12814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12818:	604b      	str	r3, [r1, #4]
   1281a:	2300      	movs	r3, #0
   1281c:	f383 8811 	msr	BASEPRI, r3
   12820:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12824:	6893      	ldr	r3, [r2, #8]
}
   12826:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   1282a:	4770      	bx	lr
   1282c:	20002c9c 	.word	0x20002c9c
   12830:	00026cd0 	.word	0x00026cd0
   12834:	e000ed00 	.word	0xe000ed00

00012838 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12838:	4913      	ldr	r1, [pc, #76]	; (12888 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1283a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1283c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12840:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12842:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12846:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1284a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1284c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12850:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12854:	4f0d      	ldr	r7, [pc, #52]	; (1288c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12856:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1285a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1285c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1285e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12860:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   12864:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12866:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1286a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1286e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12870:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12872:	f000 fd1d 	bl	132b0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12876:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1287a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1287e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12882:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12886:	4770      	bx	lr
    ldr r1, =_kernel
   12888:	20002c9c 	.word	0x20002c9c
    ldr v4, =_SCS_ICSR
   1288c:	e000ed04 	.word	0xe000ed04

00012890 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   12890:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12894:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12896:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1289a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1289e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   128a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   128a4:	2902      	cmp	r1, #2
    beq _oops
   128a6:	d0ff      	beq.n	128a8 <_oops>

000128a8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   128a8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   128aa:	f00e fa20 	bl	20cee <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   128ae:	bd01      	pop	{r0, pc}

000128b0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   128b0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   128b2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   128b6:	490d      	ldr	r1, [pc, #52]	; (128ec <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   128b8:	f021 0101 	bic.w	r1, r1, #1
   128bc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   128c0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   128c4:	9b01      	ldr	r3, [sp, #4]
   128c6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   128ca:	9b02      	ldr	r3, [sp, #8]
   128cc:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   128d0:	9b03      	ldr	r3, [sp, #12]
   128d2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   128d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   128da:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   128de:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   128e0:	2300      	movs	r3, #0
   128e2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   128e6:	bc10      	pop	{r4}
   128e8:	4770      	bx	lr
   128ea:	bf00      	nop
   128ec:	0001ff71 	.word	0x0001ff71

000128f0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   128f0:	4b16      	ldr	r3, [pc, #88]	; (1294c <z_check_thread_stack_fail+0x5c>)
   128f2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   128f4:	b1da      	cbz	r2, 1292e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   128f6:	f110 0f16 	cmn.w	r0, #22
   128fa:	d01a      	beq.n	12932 <z_check_thread_stack_fail+0x42>
{
   128fc:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   128fe:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   12902:	f1a3 0420 	sub.w	r4, r3, #32
   12906:	4284      	cmp	r4, r0
   12908:	d805      	bhi.n	12916 <z_check_thread_stack_fail+0x26>
   1290a:	4283      	cmp	r3, r0
   1290c:	d908      	bls.n	12920 <z_check_thread_stack_fail+0x30>
   1290e:	428b      	cmp	r3, r1
   12910:	d808      	bhi.n	12924 <z_check_thread_stack_fail+0x34>
   12912:	2100      	movs	r1, #0
   12914:	e000      	b.n	12918 <z_check_thread_stack_fail+0x28>
   12916:	2100      	movs	r1, #0
   12918:	b931      	cbnz	r1, 12928 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1291a:	2000      	movs	r0, #0
}
   1291c:	bc10      	pop	{r4}
   1291e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12920:	2100      	movs	r1, #0
   12922:	e7f9      	b.n	12918 <z_check_thread_stack_fail+0x28>
   12924:	2101      	movs	r1, #1
   12926:	e7f7      	b.n	12918 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   12928:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1292c:	e7f6      	b.n	1291c <z_check_thread_stack_fail+0x2c>
		return 0;
   1292e:	2000      	movs	r0, #0
   12930:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12932:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   12936:	428b      	cmp	r3, r1
   12938:	bf94      	ite	ls
   1293a:	2100      	movls	r1, #0
   1293c:	2101      	movhi	r1, #1
   1293e:	b909      	cbnz	r1, 12944 <z_check_thread_stack_fail+0x54>
	return 0;
   12940:	2000      	movs	r0, #0
}
   12942:	4770      	bx	lr
		return thread->stack_info.start;
   12944:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   12948:	4770      	bx	lr
   1294a:	bf00      	nop
   1294c:	20002c9c 	.word	0x20002c9c

00012950 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   12950:	b508      	push	{r3, lr}
   12952:	460d      	mov	r5, r1
   12954:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12956:	4b08      	ldr	r3, [pc, #32]	; (12978 <arch_switch_to_main_thread+0x28>)
   12958:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1295a:	f000 fca9 	bl	132b0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1295e:	4620      	mov	r0, r4
   12960:	f385 8809 	msr	PSP, r5
   12964:	2100      	movs	r1, #0
   12966:	b663      	cpsie	if
   12968:	f381 8811 	msr	BASEPRI, r1
   1296c:	f3bf 8f6f 	isb	sy
   12970:	2200      	movs	r2, #0
   12972:	2300      	movs	r3, #0
   12974:	f00d fafc 	bl	1ff70 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12978:	20002c9c 	.word	0x20002c9c

0001297c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1297c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1297e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12980:	4a0b      	ldr	r2, [pc, #44]	; (129b0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12982:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   12984:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12986:	bf1e      	ittt	ne
	movne	r1, #0
   12988:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1298a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1298c:	f011 fa37 	blne	23dfe <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12990:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12992:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12996:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1299a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1299e:	4905      	ldr	r1, [pc, #20]	; (129b4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   129a0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   129a2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   129a4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   129a6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   129aa:	4903      	ldr	r1, [pc, #12]	; (129b8 <_isr_wrapper+0x3c>)
	bx r1
   129ac:	4708      	bx	r1
   129ae:	0000      	.short	0x0000
	ldr r2, =_kernel
   129b0:	20002c9c 	.word	0x20002c9c
	ldr r1, =_sw_isr_table
   129b4:	00024aec 	.word	0x00024aec
	ldr r1, =z_arm_int_exit
   129b8:	000129bd 	.word	0x000129bd

000129bc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   129bc:	4b04      	ldr	r3, [pc, #16]	; (129d0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   129be:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   129c0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   129c2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   129c4:	d003      	beq.n	129ce <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   129c6:	4903      	ldr	r1, [pc, #12]	; (129d4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   129c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   129cc:	600a      	str	r2, [r1, #0]

000129ce <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   129ce:	4770      	bx	lr
	ldr r3, =_kernel
   129d0:	20002c9c 	.word	0x20002c9c
	ldr r1, =_SCS_ICSR
   129d4:	e000ed04 	.word	0xe000ed04

000129d8 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   129d8:	b508      	push	{r3, lr}
   129da:	4b4e      	ldr	r3, [pc, #312]	; (12b14 <usage_fault+0x13c>)
   129dc:	4a4e      	ldr	r2, [pc, #312]	; (12b18 <usage_fault+0x140>)
   129de:	1a9b      	subs	r3, r3, r2
   129e0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   129e2:	f04f 0100 	mov.w	r1, #0
   129e6:	2201      	movs	r2, #1
   129e8:	f362 0102 	bfi	r1, r2, #0, #3
   129ec:	f36f 01c5 	bfc	r1, #3, #3
   129f0:	f363 118f 	bfi	r1, r3, #6, #10
   129f4:	4849      	ldr	r0, [pc, #292]	; (12b1c <usage_fault+0x144>)
   129f6:	f7fe fcab 	bl	11350 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   129fa:	4b49      	ldr	r3, [pc, #292]	; (12b20 <usage_fault+0x148>)
   129fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   129fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   12a02:	d121      	bne.n	12a48 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12a04:	4b46      	ldr	r3, [pc, #280]	; (12b20 <usage_fault+0x148>)
   12a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a08:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   12a0c:	d12d      	bne.n	12a6a <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12a0e:	4b44      	ldr	r3, [pc, #272]	; (12b20 <usage_fault+0x148>)
   12a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a12:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   12a16:	d139      	bne.n	12a8c <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12a18:	4b41      	ldr	r3, [pc, #260]	; (12b20 <usage_fault+0x148>)
   12a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a1c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   12a20:	d145      	bne.n	12aae <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12a22:	4b3f      	ldr	r3, [pc, #252]	; (12b20 <usage_fault+0x148>)
   12a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   12a2a:	d151      	bne.n	12ad0 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12a2c:	4b3c      	ldr	r3, [pc, #240]	; (12b20 <usage_fault+0x148>)
   12a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12a34:	d15d      	bne.n	12af2 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12a36:	4a3a      	ldr	r2, [pc, #232]	; (12b20 <usage_fault+0x148>)
   12a38:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12a3a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12a3e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   12a42:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   12a44:	2000      	movs	r0, #0
   12a46:	bd08      	pop	{r3, pc}
   12a48:	4b32      	ldr	r3, [pc, #200]	; (12b14 <usage_fault+0x13c>)
   12a4a:	4a33      	ldr	r2, [pc, #204]	; (12b18 <usage_fault+0x140>)
   12a4c:	1a9b      	subs	r3, r3, r2
   12a4e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   12a50:	f04f 0100 	mov.w	r1, #0
   12a54:	2201      	movs	r2, #1
   12a56:	f362 0102 	bfi	r1, r2, #0, #3
   12a5a:	f36f 01c5 	bfc	r1, #3, #3
   12a5e:	f363 118f 	bfi	r1, r3, #6, #10
   12a62:	4830      	ldr	r0, [pc, #192]	; (12b24 <usage_fault+0x14c>)
   12a64:	f7fe fc74 	bl	11350 <log_0>
   12a68:	e7cc      	b.n	12a04 <usage_fault+0x2c>
   12a6a:	4b2a      	ldr	r3, [pc, #168]	; (12b14 <usage_fault+0x13c>)
   12a6c:	4a2a      	ldr	r2, [pc, #168]	; (12b18 <usage_fault+0x140>)
   12a6e:	1a9b      	subs	r3, r3, r2
   12a70:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   12a72:	f04f 0100 	mov.w	r1, #0
   12a76:	2201      	movs	r2, #1
   12a78:	f362 0102 	bfi	r1, r2, #0, #3
   12a7c:	f36f 01c5 	bfc	r1, #3, #3
   12a80:	f363 118f 	bfi	r1, r3, #6, #10
   12a84:	4828      	ldr	r0, [pc, #160]	; (12b28 <usage_fault+0x150>)
   12a86:	f7fe fc63 	bl	11350 <log_0>
   12a8a:	e7c0      	b.n	12a0e <usage_fault+0x36>
   12a8c:	4b21      	ldr	r3, [pc, #132]	; (12b14 <usage_fault+0x13c>)
   12a8e:	4a22      	ldr	r2, [pc, #136]	; (12b18 <usage_fault+0x140>)
   12a90:	1a9b      	subs	r3, r3, r2
   12a92:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   12a94:	f04f 0100 	mov.w	r1, #0
   12a98:	2201      	movs	r2, #1
   12a9a:	f362 0102 	bfi	r1, r2, #0, #3
   12a9e:	f36f 01c5 	bfc	r1, #3, #3
   12aa2:	f363 118f 	bfi	r1, r3, #6, #10
   12aa6:	4821      	ldr	r0, [pc, #132]	; (12b2c <usage_fault+0x154>)
   12aa8:	f7fe fc52 	bl	11350 <log_0>
   12aac:	e7b4      	b.n	12a18 <usage_fault+0x40>
   12aae:	4b19      	ldr	r3, [pc, #100]	; (12b14 <usage_fault+0x13c>)
   12ab0:	4a19      	ldr	r2, [pc, #100]	; (12b18 <usage_fault+0x140>)
   12ab2:	1a9b      	subs	r3, r3, r2
   12ab4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   12ab6:	f04f 0100 	mov.w	r1, #0
   12aba:	2201      	movs	r2, #1
   12abc:	f362 0102 	bfi	r1, r2, #0, #3
   12ac0:	f36f 01c5 	bfc	r1, #3, #3
   12ac4:	f363 118f 	bfi	r1, r3, #6, #10
   12ac8:	4819      	ldr	r0, [pc, #100]	; (12b30 <usage_fault+0x158>)
   12aca:	f7fe fc41 	bl	11350 <log_0>
   12ace:	e7a8      	b.n	12a22 <usage_fault+0x4a>
   12ad0:	4b10      	ldr	r3, [pc, #64]	; (12b14 <usage_fault+0x13c>)
   12ad2:	4a11      	ldr	r2, [pc, #68]	; (12b18 <usage_fault+0x140>)
   12ad4:	1a9b      	subs	r3, r3, r2
   12ad6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   12ad8:	f04f 0100 	mov.w	r1, #0
   12adc:	2201      	movs	r2, #1
   12ade:	f362 0102 	bfi	r1, r2, #0, #3
   12ae2:	f36f 01c5 	bfc	r1, #3, #3
   12ae6:	f363 118f 	bfi	r1, r3, #6, #10
   12aea:	4812      	ldr	r0, [pc, #72]	; (12b34 <usage_fault+0x15c>)
   12aec:	f7fe fc30 	bl	11350 <log_0>
   12af0:	e79c      	b.n	12a2c <usage_fault+0x54>
   12af2:	4b08      	ldr	r3, [pc, #32]	; (12b14 <usage_fault+0x13c>)
   12af4:	4a08      	ldr	r2, [pc, #32]	; (12b18 <usage_fault+0x140>)
   12af6:	1a9b      	subs	r3, r3, r2
   12af8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   12afa:	f04f 0100 	mov.w	r1, #0
   12afe:	2201      	movs	r2, #1
   12b00:	f362 0102 	bfi	r1, r2, #0, #3
   12b04:	f36f 01c5 	bfc	r1, #3, #3
   12b08:	f363 118f 	bfi	r1, r3, #6, #10
   12b0c:	480a      	ldr	r0, [pc, #40]	; (12b38 <usage_fault+0x160>)
   12b0e:	f7fe fc1f 	bl	11350 <log_0>
   12b12:	e790      	b.n	12a36 <usage_fault+0x5e>
   12b14:	00024d78 	.word	0x00024d78
   12b18:	00024ca0 	.word	0x00024ca0
   12b1c:	00025404 	.word	0x00025404
   12b20:	e000ed00 	.word	0xe000ed00
   12b24:	0002541c 	.word	0x0002541c
   12b28:	00025430 	.word	0x00025430
   12b2c:	0002544c 	.word	0x0002544c
   12b30:	0002546c 	.word	0x0002546c
   12b34:	00025494 	.word	0x00025494
   12b38:	000254b0 	.word	0x000254b0

00012b3c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   12b3c:	b508      	push	{r3, lr}
	*recoverable = false;
   12b3e:	2200      	movs	r2, #0
   12b40:	700a      	strb	r2, [r1, #0]
   12b42:	4b08      	ldr	r3, [pc, #32]	; (12b64 <debug_monitor+0x28>)
   12b44:	4908      	ldr	r1, [pc, #32]	; (12b68 <debug_monitor+0x2c>)
   12b46:	1a5b      	subs	r3, r3, r1
   12b48:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   12b4a:	f04f 0100 	mov.w	r1, #0
   12b4e:	2001      	movs	r0, #1
   12b50:	f360 0102 	bfi	r1, r0, #0, #3
   12b54:	f362 01c5 	bfi	r1, r2, #3, #3
   12b58:	f363 118f 	bfi	r1, r3, #6, #10
   12b5c:	4803      	ldr	r0, [pc, #12]	; (12b6c <debug_monitor+0x30>)
   12b5e:	f7fe fbf7 	bl	11350 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   12b62:	bd08      	pop	{r3, pc}
   12b64:	00024d78 	.word	0x00024d78
   12b68:	00024ca0 	.word	0x00024ca0
   12b6c:	000254dc 	.word	0x000254dc

00012b70 <bus_fault>:
{
   12b70:	b570      	push	{r4, r5, r6, lr}
   12b72:	4605      	mov	r5, r0
   12b74:	460e      	mov	r6, r1
   12b76:	4614      	mov	r4, r2
   12b78:	4b5e      	ldr	r3, [pc, #376]	; (12cf4 <bus_fault+0x184>)
   12b7a:	4a5f      	ldr	r2, [pc, #380]	; (12cf8 <bus_fault+0x188>)
   12b7c:	1a9b      	subs	r3, r3, r2
   12b7e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   12b80:	f04f 0100 	mov.w	r1, #0
   12b84:	2201      	movs	r2, #1
   12b86:	f362 0102 	bfi	r1, r2, #0, #3
   12b8a:	f36f 01c5 	bfc	r1, #3, #3
   12b8e:	f363 118f 	bfi	r1, r3, #6, #10
   12b92:	485a      	ldr	r0, [pc, #360]	; (12cfc <bus_fault+0x18c>)
   12b94:	f7fe fbdc 	bl	11350 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12b98:	4b59      	ldr	r3, [pc, #356]	; (12d00 <bus_fault+0x190>)
   12b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b9c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12ba0:	d124      	bne.n	12bec <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12ba2:	4b57      	ldr	r3, [pc, #348]	; (12d00 <bus_fault+0x190>)
   12ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12ba6:	f413 6f00 	tst.w	r3, #2048	; 0x800
   12baa:	d130      	bne.n	12c0e <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12bac:	4b54      	ldr	r3, [pc, #336]	; (12d00 <bus_fault+0x190>)
   12bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bb0:	f413 7f00 	tst.w	r3, #512	; 0x200
   12bb4:	d13c      	bne.n	12c30 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12bb6:	4b52      	ldr	r3, [pc, #328]	; (12d00 <bus_fault+0x190>)
   12bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bba:	f413 6f80 	tst.w	r3, #1024	; 0x400
   12bbe:	d165      	bne.n	12c8c <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12bc0:	4b4f      	ldr	r3, [pc, #316]	; (12d00 <bus_fault+0x190>)
   12bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bc4:	f413 7f80 	tst.w	r3, #256	; 0x100
   12bc8:	d171      	bne.n	12cae <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12bca:	4b4d      	ldr	r3, [pc, #308]	; (12d00 <bus_fault+0x190>)
   12bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12bd2:	d17d      	bne.n	12cd0 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12bd4:	4a4a      	ldr	r2, [pc, #296]	; (12d00 <bus_fault+0x190>)
   12bd6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12bd8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12bdc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12bde:	2101      	movs	r1, #1
   12be0:	4628      	mov	r0, r5
   12be2:	f00e f896 	bl	20d12 <memory_fault_recoverable>
   12be6:	7020      	strb	r0, [r4, #0]
}
   12be8:	2000      	movs	r0, #0
   12bea:	bd70      	pop	{r4, r5, r6, pc}
   12bec:	4b41      	ldr	r3, [pc, #260]	; (12cf4 <bus_fault+0x184>)
   12bee:	4a42      	ldr	r2, [pc, #264]	; (12cf8 <bus_fault+0x188>)
   12bf0:	1a9b      	subs	r3, r3, r2
   12bf2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   12bf4:	f04f 0100 	mov.w	r1, #0
   12bf8:	2201      	movs	r2, #1
   12bfa:	f362 0102 	bfi	r1, r2, #0, #3
   12bfe:	f36f 01c5 	bfc	r1, #3, #3
   12c02:	f363 118f 	bfi	r1, r3, #6, #10
   12c06:	483f      	ldr	r0, [pc, #252]	; (12d04 <bus_fault+0x194>)
   12c08:	f7fe fba2 	bl	11350 <log_0>
   12c0c:	e7c9      	b.n	12ba2 <bus_fault+0x32>
   12c0e:	4b39      	ldr	r3, [pc, #228]	; (12cf4 <bus_fault+0x184>)
   12c10:	4a39      	ldr	r2, [pc, #228]	; (12cf8 <bus_fault+0x188>)
   12c12:	1a9b      	subs	r3, r3, r2
   12c14:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   12c16:	f04f 0100 	mov.w	r1, #0
   12c1a:	2201      	movs	r2, #1
   12c1c:	f362 0102 	bfi	r1, r2, #0, #3
   12c20:	f36f 01c5 	bfc	r1, #3, #3
   12c24:	f363 118f 	bfi	r1, r3, #6, #10
   12c28:	4837      	ldr	r0, [pc, #220]	; (12d08 <bus_fault+0x198>)
   12c2a:	f7fe fb91 	bl	11350 <log_0>
   12c2e:	e7bd      	b.n	12bac <bus_fault+0x3c>
   12c30:	4b30      	ldr	r3, [pc, #192]	; (12cf4 <bus_fault+0x184>)
   12c32:	4a31      	ldr	r2, [pc, #196]	; (12cf8 <bus_fault+0x188>)
   12c34:	1a9b      	subs	r3, r3, r2
   12c36:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   12c38:	f04f 0100 	mov.w	r1, #0
   12c3c:	2201      	movs	r2, #1
   12c3e:	f362 0102 	bfi	r1, r2, #0, #3
   12c42:	f36f 01c5 	bfc	r1, #3, #3
   12c46:	f363 118f 	bfi	r1, r3, #6, #10
   12c4a:	4830      	ldr	r0, [pc, #192]	; (12d0c <bus_fault+0x19c>)
   12c4c:	f7fe fb80 	bl	11350 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   12c50:	4b2b      	ldr	r3, [pc, #172]	; (12d00 <bus_fault+0x190>)
   12c52:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12c56:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   12c5a:	d0ac      	beq.n	12bb6 <bus_fault+0x46>
   12c5c:	4b25      	ldr	r3, [pc, #148]	; (12cf4 <bus_fault+0x184>)
   12c5e:	4a26      	ldr	r2, [pc, #152]	; (12cf8 <bus_fault+0x188>)
   12c60:	1a9b      	subs	r3, r3, r2
   12c62:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12c64:	f04f 0200 	mov.w	r2, #0
   12c68:	2001      	movs	r0, #1
   12c6a:	f360 0202 	bfi	r2, r0, #0, #3
   12c6e:	f36f 02c5 	bfc	r2, #3, #3
   12c72:	f363 128f 	bfi	r2, r3, #6, #10
   12c76:	4826      	ldr	r0, [pc, #152]	; (12d10 <bus_fault+0x1a0>)
   12c78:	f7fe fab4 	bl	111e4 <log_1>
			if (from_hard_fault != 0) {
   12c7c:	2e00      	cmp	r6, #0
   12c7e:	d09a      	beq.n	12bb6 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12c80:	4a1f      	ldr	r2, [pc, #124]	; (12d00 <bus_fault+0x190>)
   12c82:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12c84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12c88:	6293      	str	r3, [r2, #40]	; 0x28
   12c8a:	e794      	b.n	12bb6 <bus_fault+0x46>
   12c8c:	4b19      	ldr	r3, [pc, #100]	; (12cf4 <bus_fault+0x184>)
   12c8e:	4a1a      	ldr	r2, [pc, #104]	; (12cf8 <bus_fault+0x188>)
   12c90:	1a9b      	subs	r3, r3, r2
   12c92:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   12c94:	f04f 0100 	mov.w	r1, #0
   12c98:	2201      	movs	r2, #1
   12c9a:	f362 0102 	bfi	r1, r2, #0, #3
   12c9e:	f36f 01c5 	bfc	r1, #3, #3
   12ca2:	f363 118f 	bfi	r1, r3, #6, #10
   12ca6:	481b      	ldr	r0, [pc, #108]	; (12d14 <bus_fault+0x1a4>)
   12ca8:	f7fe fb52 	bl	11350 <log_0>
   12cac:	e788      	b.n	12bc0 <bus_fault+0x50>
   12cae:	4b11      	ldr	r3, [pc, #68]	; (12cf4 <bus_fault+0x184>)
   12cb0:	4a11      	ldr	r2, [pc, #68]	; (12cf8 <bus_fault+0x188>)
   12cb2:	1a9b      	subs	r3, r3, r2
   12cb4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   12cb6:	f04f 0100 	mov.w	r1, #0
   12cba:	2201      	movs	r2, #1
   12cbc:	f362 0102 	bfi	r1, r2, #0, #3
   12cc0:	f36f 01c5 	bfc	r1, #3, #3
   12cc4:	f363 118f 	bfi	r1, r3, #6, #10
   12cc8:	4813      	ldr	r0, [pc, #76]	; (12d18 <bus_fault+0x1a8>)
   12cca:	f7fe fb41 	bl	11350 <log_0>
   12cce:	e781      	b.n	12bd4 <bus_fault+0x64>
   12cd0:	4b08      	ldr	r3, [pc, #32]	; (12cf4 <bus_fault+0x184>)
   12cd2:	4a09      	ldr	r2, [pc, #36]	; (12cf8 <bus_fault+0x188>)
   12cd4:	1a9b      	subs	r3, r3, r2
   12cd6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12cd8:	f04f 0100 	mov.w	r1, #0
   12cdc:	2201      	movs	r2, #1
   12cde:	f362 0102 	bfi	r1, r2, #0, #3
   12ce2:	f36f 01c5 	bfc	r1, #3, #3
   12ce6:	f363 118f 	bfi	r1, r3, #6, #10
   12cea:	480c      	ldr	r0, [pc, #48]	; (12d1c <bus_fault+0x1ac>)
   12cec:	f7fe fb30 	bl	11350 <log_0>
   12cf0:	e770      	b.n	12bd4 <bus_fault+0x64>
   12cf2:	bf00      	nop
   12cf4:	00024d78 	.word	0x00024d78
   12cf8:	00024ca0 	.word	0x00024ca0
   12cfc:	00025500 	.word	0x00025500
   12d00:	e000ed00 	.word	0xe000ed00
   12d04:	00025518 	.word	0x00025518
   12d08:	0002552c 	.word	0x0002552c
   12d0c:	00025540 	.word	0x00025540
   12d10:	0002555c 	.word	0x0002555c
   12d14:	00025574 	.word	0x00025574
   12d18:	00025590 	.word	0x00025590
   12d1c:	000255a8 	.word	0x000255a8

00012d20 <mem_manage_fault>:
{
   12d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d22:	4605      	mov	r5, r0
   12d24:	460c      	mov	r4, r1
   12d26:	4616      	mov	r6, r2
   12d28:	4b64      	ldr	r3, [pc, #400]	; (12ebc <mem_manage_fault+0x19c>)
   12d2a:	4a65      	ldr	r2, [pc, #404]	; (12ec0 <mem_manage_fault+0x1a0>)
   12d2c:	1a9b      	subs	r3, r3, r2
   12d2e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   12d30:	f04f 0100 	mov.w	r1, #0
   12d34:	2201      	movs	r2, #1
   12d36:	f362 0102 	bfi	r1, r2, #0, #3
   12d3a:	f36f 01c5 	bfc	r1, #3, #3
   12d3e:	f363 118f 	bfi	r1, r3, #6, #10
   12d42:	4860      	ldr	r0, [pc, #384]	; (12ec4 <mem_manage_fault+0x1a4>)
   12d44:	f7fe fb04 	bl	11350 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12d48:	4b5f      	ldr	r3, [pc, #380]	; (12ec8 <mem_manage_fault+0x1a8>)
   12d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d4c:	f013 0f10 	tst.w	r3, #16
   12d50:	d132      	bne.n	12db8 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12d52:	4b5d      	ldr	r3, [pc, #372]	; (12ec8 <mem_manage_fault+0x1a8>)
   12d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d56:	f013 0f08 	tst.w	r3, #8
   12d5a:	d13e      	bne.n	12dda <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12d5c:	4b5a      	ldr	r3, [pc, #360]	; (12ec8 <mem_manage_fault+0x1a8>)
   12d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d60:	f013 0f02 	tst.w	r3, #2
   12d64:	d14a      	bne.n	12dfc <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   12d66:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12d6a:	4b57      	ldr	r3, [pc, #348]	; (12ec8 <mem_manage_fault+0x1a8>)
   12d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d6e:	f013 0f01 	tst.w	r3, #1
   12d72:	d175      	bne.n	12e60 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12d74:	4b54      	ldr	r3, [pc, #336]	; (12ec8 <mem_manage_fault+0x1a8>)
   12d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d78:	f013 0f20 	tst.w	r3, #32
   12d7c:	f040 8081 	bne.w	12e82 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12d80:	4b51      	ldr	r3, [pc, #324]	; (12ec8 <mem_manage_fault+0x1a8>)
   12d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d84:	f013 0f10 	tst.w	r3, #16
   12d88:	d104      	bne.n	12d94 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   12d8a:	4b4f      	ldr	r3, [pc, #316]	; (12ec8 <mem_manage_fault+0x1a8>)
   12d8c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12d8e:	f014 0402 	ands.w	r4, r4, #2
   12d92:	d005      	beq.n	12da0 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   12d94:	4b4c      	ldr	r3, [pc, #304]	; (12ec8 <mem_manage_fault+0x1a8>)
   12d96:	685c      	ldr	r4, [r3, #4]
   12d98:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   12d9c:	f040 8082 	bne.w	12ea4 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12da0:	4a49      	ldr	r2, [pc, #292]	; (12ec8 <mem_manage_fault+0x1a8>)
   12da2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12da4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12da8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12daa:	2101      	movs	r1, #1
   12dac:	4628      	mov	r0, r5
   12dae:	f00d ffb0 	bl	20d12 <memory_fault_recoverable>
   12db2:	7030      	strb	r0, [r6, #0]
}
   12db4:	4620      	mov	r0, r4
   12db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12db8:	4b40      	ldr	r3, [pc, #256]	; (12ebc <mem_manage_fault+0x19c>)
   12dba:	4a41      	ldr	r2, [pc, #260]	; (12ec0 <mem_manage_fault+0x1a0>)
   12dbc:	1a9b      	subs	r3, r3, r2
   12dbe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   12dc0:	f04f 0100 	mov.w	r1, #0
   12dc4:	2201      	movs	r2, #1
   12dc6:	f362 0102 	bfi	r1, r2, #0, #3
   12dca:	f36f 01c5 	bfc	r1, #3, #3
   12dce:	f363 118f 	bfi	r1, r3, #6, #10
   12dd2:	483e      	ldr	r0, [pc, #248]	; (12ecc <mem_manage_fault+0x1ac>)
   12dd4:	f7fe fabc 	bl	11350 <log_0>
   12dd8:	e7bb      	b.n	12d52 <mem_manage_fault+0x32>
   12dda:	4b38      	ldr	r3, [pc, #224]	; (12ebc <mem_manage_fault+0x19c>)
   12ddc:	4a38      	ldr	r2, [pc, #224]	; (12ec0 <mem_manage_fault+0x1a0>)
   12dde:	1a9b      	subs	r3, r3, r2
   12de0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   12de2:	f04f 0100 	mov.w	r1, #0
   12de6:	2201      	movs	r2, #1
   12de8:	f362 0102 	bfi	r1, r2, #0, #3
   12dec:	f36f 01c5 	bfc	r1, #3, #3
   12df0:	f363 118f 	bfi	r1, r3, #6, #10
   12df4:	4836      	ldr	r0, [pc, #216]	; (12ed0 <mem_manage_fault+0x1b0>)
   12df6:	f7fe faab 	bl	11350 <log_0>
   12dfa:	e7af      	b.n	12d5c <mem_manage_fault+0x3c>
   12dfc:	4b2f      	ldr	r3, [pc, #188]	; (12ebc <mem_manage_fault+0x19c>)
   12dfe:	4a30      	ldr	r2, [pc, #192]	; (12ec0 <mem_manage_fault+0x1a0>)
   12e00:	1a9b      	subs	r3, r3, r2
   12e02:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   12e04:	f04f 0100 	mov.w	r1, #0
   12e08:	2201      	movs	r2, #1
   12e0a:	f362 0102 	bfi	r1, r2, #0, #3
   12e0e:	f36f 01c5 	bfc	r1, #3, #3
   12e12:	f363 118f 	bfi	r1, r3, #6, #10
   12e16:	482f      	ldr	r0, [pc, #188]	; (12ed4 <mem_manage_fault+0x1b4>)
   12e18:	f7fe fa9a 	bl	11350 <log_0>
		uint32_t temp = SCB->MMFAR;
   12e1c:	4b2a      	ldr	r3, [pc, #168]	; (12ec8 <mem_manage_fault+0x1a8>)
   12e1e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   12e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12e22:	f013 0f80 	tst.w	r3, #128	; 0x80
   12e26:	d102      	bne.n	12e2e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   12e28:	f06f 0715 	mvn.w	r7, #21
   12e2c:	e79d      	b.n	12d6a <mem_manage_fault+0x4a>
   12e2e:	4b23      	ldr	r3, [pc, #140]	; (12ebc <mem_manage_fault+0x19c>)
   12e30:	4a23      	ldr	r2, [pc, #140]	; (12ec0 <mem_manage_fault+0x1a0>)
   12e32:	1a9b      	subs	r3, r3, r2
   12e34:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12e36:	f04f 0200 	mov.w	r2, #0
   12e3a:	2101      	movs	r1, #1
   12e3c:	f361 0202 	bfi	r2, r1, #0, #3
   12e40:	f36f 02c5 	bfc	r2, #3, #3
   12e44:	f363 128f 	bfi	r2, r3, #6, #10
   12e48:	4639      	mov	r1, r7
   12e4a:	4823      	ldr	r0, [pc, #140]	; (12ed8 <mem_manage_fault+0x1b8>)
   12e4c:	f7fe f9ca 	bl	111e4 <log_1>
			if (from_hard_fault != 0) {
   12e50:	2c00      	cmp	r4, #0
   12e52:	d08a      	beq.n	12d6a <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12e54:	4a1c      	ldr	r2, [pc, #112]	; (12ec8 <mem_manage_fault+0x1a8>)
   12e56:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12e5c:	6293      	str	r3, [r2, #40]	; 0x28
   12e5e:	e784      	b.n	12d6a <mem_manage_fault+0x4a>
   12e60:	4b16      	ldr	r3, [pc, #88]	; (12ebc <mem_manage_fault+0x19c>)
   12e62:	4a17      	ldr	r2, [pc, #92]	; (12ec0 <mem_manage_fault+0x1a0>)
   12e64:	1a9b      	subs	r3, r3, r2
   12e66:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   12e68:	f04f 0100 	mov.w	r1, #0
   12e6c:	2201      	movs	r2, #1
   12e6e:	f362 0102 	bfi	r1, r2, #0, #3
   12e72:	f36f 01c5 	bfc	r1, #3, #3
   12e76:	f363 118f 	bfi	r1, r3, #6, #10
   12e7a:	4818      	ldr	r0, [pc, #96]	; (12edc <mem_manage_fault+0x1bc>)
   12e7c:	f7fe fa68 	bl	11350 <log_0>
   12e80:	e778      	b.n	12d74 <mem_manage_fault+0x54>
   12e82:	4b0e      	ldr	r3, [pc, #56]	; (12ebc <mem_manage_fault+0x19c>)
   12e84:	4a0e      	ldr	r2, [pc, #56]	; (12ec0 <mem_manage_fault+0x1a0>)
   12e86:	1a9b      	subs	r3, r3, r2
   12e88:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   12e8a:	f04f 0100 	mov.w	r1, #0
   12e8e:	2201      	movs	r2, #1
   12e90:	f362 0102 	bfi	r1, r2, #0, #3
   12e94:	f36f 01c5 	bfc	r1, #3, #3
   12e98:	f363 118f 	bfi	r1, r3, #6, #10
   12e9c:	4810      	ldr	r0, [pc, #64]	; (12ee0 <mem_manage_fault+0x1c0>)
   12e9e:	f7fe fa57 	bl	11350 <log_0>
   12ea2:	e76d      	b.n	12d80 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12ea4:	4629      	mov	r1, r5
   12ea6:	4638      	mov	r0, r7
   12ea8:	f7ff fd22 	bl	128f0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   12eac:	4604      	mov	r4, r0
   12eae:	2800      	cmp	r0, #0
   12eb0:	f43f af76 	beq.w	12da0 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   12eb4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   12eb8:	2402      	movs	r4, #2
   12eba:	e771      	b.n	12da0 <mem_manage_fault+0x80>
   12ebc:	00024d78 	.word	0x00024d78
   12ec0:	00024ca0 	.word	0x00024ca0
   12ec4:	000255d8 	.word	0x000255d8
   12ec8:	e000ed00 	.word	0xe000ed00
   12ecc:	000255f0 	.word	0x000255f0
   12ed0:	0002552c 	.word	0x0002552c
   12ed4:	00025624 	.word	0x00025624
   12ed8:	0002563c 	.word	0x0002563c
   12edc:	00025654 	.word	0x00025654
   12ee0:	000255a8 	.word	0x000255a8

00012ee4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   12ee4:	b570      	push	{r4, r5, r6, lr}
   12ee6:	4605      	mov	r5, r0
   12ee8:	460c      	mov	r4, r1
   12eea:	4b47      	ldr	r3, [pc, #284]	; (13008 <hard_fault+0x124>)
   12eec:	4a47      	ldr	r2, [pc, #284]	; (1300c <hard_fault+0x128>)
   12eee:	1a9b      	subs	r3, r3, r2
   12ef0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   12ef2:	f04f 0100 	mov.w	r1, #0
   12ef6:	2201      	movs	r2, #1
   12ef8:	f362 0102 	bfi	r1, r2, #0, #3
   12efc:	f36f 01c5 	bfc	r1, #3, #3
   12f00:	f363 118f 	bfi	r1, r3, #6, #10
   12f04:	4842      	ldr	r0, [pc, #264]	; (13010 <hard_fault+0x12c>)
   12f06:	f7fe fa23 	bl	11350 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   12f0a:	2300      	movs	r3, #0
   12f0c:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12f0e:	4b41      	ldr	r3, [pc, #260]	; (13014 <hard_fault+0x130>)
   12f10:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   12f12:	f016 0602 	ands.w	r6, r6, #2
   12f16:	d109      	bne.n	12f2c <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12f18:	4b3e      	ldr	r3, [pc, #248]	; (13014 <hard_fault+0x130>)
   12f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12f1c:	2b00      	cmp	r3, #0
   12f1e:	db17      	blt.n	12f50 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12f20:	4b3c      	ldr	r3, [pc, #240]	; (13014 <hard_fault+0x130>)
   12f22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   12f24:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   12f28:	d124      	bne.n	12f74 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   12f2a:	bd70      	pop	{r4, r5, r6, pc}
   12f2c:	4b36      	ldr	r3, [pc, #216]	; (13008 <hard_fault+0x124>)
   12f2e:	4a37      	ldr	r2, [pc, #220]	; (1300c <hard_fault+0x128>)
   12f30:	1a9b      	subs	r3, r3, r2
   12f32:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   12f34:	f04f 0100 	mov.w	r1, #0
   12f38:	2201      	movs	r2, #1
   12f3a:	f362 0102 	bfi	r1, r2, #0, #3
   12f3e:	f36f 01c5 	bfc	r1, #3, #3
   12f42:	f363 118f 	bfi	r1, r3, #6, #10
   12f46:	4834      	ldr	r0, [pc, #208]	; (13018 <hard_fault+0x134>)
   12f48:	f7fe fa02 	bl	11350 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12f4c:	2000      	movs	r0, #0
   12f4e:	e7ec      	b.n	12f2a <hard_fault+0x46>
   12f50:	4b2d      	ldr	r3, [pc, #180]	; (13008 <hard_fault+0x124>)
   12f52:	4a2e      	ldr	r2, [pc, #184]	; (1300c <hard_fault+0x128>)
   12f54:	1a9b      	subs	r3, r3, r2
   12f56:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   12f58:	f04f 0100 	mov.w	r1, #0
   12f5c:	2201      	movs	r2, #1
   12f5e:	f362 0102 	bfi	r1, r2, #0, #3
   12f62:	f36f 01c5 	bfc	r1, #3, #3
   12f66:	f363 118f 	bfi	r1, r3, #6, #10
   12f6a:	482c      	ldr	r0, [pc, #176]	; (1301c <hard_fault+0x138>)
   12f6c:	f7fe f9f0 	bl	11350 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12f70:	4630      	mov	r0, r6
   12f72:	e7da      	b.n	12f2a <hard_fault+0x46>
   12f74:	4b24      	ldr	r3, [pc, #144]	; (13008 <hard_fault+0x124>)
   12f76:	4a25      	ldr	r2, [pc, #148]	; (1300c <hard_fault+0x128>)
   12f78:	1a9b      	subs	r3, r3, r2
   12f7a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   12f7c:	f04f 0100 	mov.w	r1, #0
   12f80:	2201      	movs	r2, #1
   12f82:	f362 0102 	bfi	r1, r2, #0, #3
   12f86:	f36f 01c5 	bfc	r1, #3, #3
   12f8a:	f363 118f 	bfi	r1, r3, #6, #10
   12f8e:	4824      	ldr	r0, [pc, #144]	; (13020 <hard_fault+0x13c>)
   12f90:	f7fe f9de 	bl	11350 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   12f94:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   12f96:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12f9a:	f64d 7302 	movw	r3, #57090	; 0xdf02
   12f9e:	429a      	cmp	r2, r3
   12fa0:	d00e      	beq.n	12fc0 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
   12fa2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   12fa6:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   12faa:	781b      	ldrb	r3, [r3, #0]
   12fac:	b9db      	cbnz	r3, 12fe6 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
   12fae:	4b1d      	ldr	r3, [pc, #116]	; (13024 <hard_fault+0x140>)
   12fb0:	781b      	ldrb	r3, [r3, #0]
   12fb2:	b9f3      	cbnz	r3, 12ff2 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
   12fb4:	4b1c      	ldr	r3, [pc, #112]	; (13028 <hard_fault+0x144>)
   12fb6:	881b      	ldrh	r3, [r3, #0]
   12fb8:	b29b      	uxth	r3, r3
   12fba:	bb03      	cbnz	r3, 12ffe <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12fbc:	4630      	mov	r0, r6
	return reason;
   12fbe:	e7b4      	b.n	12f2a <hard_fault+0x46>
   12fc0:	4b11      	ldr	r3, [pc, #68]	; (13008 <hard_fault+0x124>)
   12fc2:	4a12      	ldr	r2, [pc, #72]	; (1300c <hard_fault+0x128>)
   12fc4:	1a9b      	subs	r3, r3, r2
   12fc6:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   12fc8:	f04f 0200 	mov.w	r2, #0
   12fcc:	2101      	movs	r1, #1
   12fce:	f361 0202 	bfi	r2, r1, #0, #3
   12fd2:	f36f 02c5 	bfc	r2, #3, #3
   12fd6:	f363 128f 	bfi	r2, r3, #6, #10
   12fda:	6829      	ldr	r1, [r5, #0]
   12fdc:	4813      	ldr	r0, [pc, #76]	; (1302c <hard_fault+0x148>)
   12fde:	f7fe f901 	bl	111e4 <log_1>
			reason = esf->basic.r0;
   12fe2:	6828      	ldr	r0, [r5, #0]
   12fe4:	e7a1      	b.n	12f2a <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
   12fe6:	4622      	mov	r2, r4
   12fe8:	2101      	movs	r1, #1
   12fea:	4628      	mov	r0, r5
   12fec:	f7ff fe98 	bl	12d20 <mem_manage_fault>
   12ff0:	e79b      	b.n	12f2a <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
   12ff2:	4622      	mov	r2, r4
   12ff4:	2101      	movs	r1, #1
   12ff6:	4628      	mov	r0, r5
   12ff8:	f7ff fdba 	bl	12b70 <bus_fault>
   12ffc:	e795      	b.n	12f2a <hard_fault+0x46>
			reason = usage_fault(esf);
   12ffe:	4628      	mov	r0, r5
   13000:	f7ff fcea 	bl	129d8 <usage_fault>
   13004:	e791      	b.n	12f2a <hard_fault+0x46>
   13006:	bf00      	nop
   13008:	00024d78 	.word	0x00024d78
   1300c:	00024ca0 	.word	0x00024ca0
   13010:	00025674 	.word	0x00025674
   13014:	e000ed00 	.word	0xe000ed00
   13018:	0002568c 	.word	0x0002568c
   1301c:	000256b0 	.word	0x000256b0
   13020:	000256c0 	.word	0x000256c0
   13024:	e000ed29 	.word	0xe000ed29
   13028:	e000ed2a 	.word	0xe000ed2a
   1302c:	000256e0 	.word	0x000256e0

00013030 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   13030:	b508      	push	{r3, lr}
   13032:	460a      	mov	r2, r1
   13034:	480b      	ldr	r0, [pc, #44]	; (13064 <reserved_exception+0x34>)
   13036:	4b0c      	ldr	r3, [pc, #48]	; (13068 <reserved_exception+0x38>)
   13038:	1ac0      	subs	r0, r0, r3
   1303a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   1303c:	f04f 0300 	mov.w	r3, #0
   13040:	2101      	movs	r1, #1
   13042:	f361 0302 	bfi	r3, r1, #0, #3
   13046:	f36f 03c5 	bfc	r3, #3, #3
   1304a:	f360 138f 	bfi	r3, r0, #6, #10
   1304e:	2a0f      	cmp	r2, #15
   13050:	dc05      	bgt.n	1305e <reserved_exception+0x2e>
   13052:	4906      	ldr	r1, [pc, #24]	; (1306c <reserved_exception+0x3c>)
   13054:	3a10      	subs	r2, #16
   13056:	4806      	ldr	r0, [pc, #24]	; (13070 <reserved_exception+0x40>)
   13058:	f7fe f8fa 	bl	11250 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   1305c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   1305e:	4905      	ldr	r1, [pc, #20]	; (13074 <reserved_exception+0x44>)
   13060:	e7f8      	b.n	13054 <reserved_exception+0x24>
   13062:	bf00      	nop
   13064:	00024d78 	.word	0x00024d78
   13068:	00024ca0 	.word	0x00024ca0
   1306c:	000256fc 	.word	0x000256fc
   13070:	00025730 	.word	0x00025730
   13074:	00025714 	.word	0x00025714

00013078 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1307a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1307c:	4b2e      	ldr	r3, [pc, #184]	; (13138 <z_arm_fault+0xc0>)
   1307e:	685d      	ldr	r5, [r3, #4]
   13080:	f3c5 0508 	ubfx	r5, r5, #0, #9
   13084:	2300      	movs	r3, #0
   13086:	f383 8811 	msr	BASEPRI, r3
   1308a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1308e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13092:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13096:	d12a      	bne.n	130ee <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13098:	f002 030c 	and.w	r3, r2, #12
   1309c:	2b08      	cmp	r3, #8
   1309e:	d010      	beq.n	130c2 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   130a0:	f012 0f08 	tst.w	r2, #8
   130a4:	d020      	beq.n	130e8 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
   130a6:	460c      	mov	r4, r1
	*nested_exc = false;
   130a8:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   130aa:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   130ae:	4629      	mov	r1, r5
   130b0:	4620      	mov	r0, r4
   130b2:	f00d fe30 	bl	20d16 <fault_handle>
   130b6:	4606      	mov	r6, r0
	if (recoverable) {
   130b8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   130bc:	b1d3      	cbz	r3, 130f4 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   130be:	b00b      	add	sp, #44	; 0x2c
   130c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   130c2:	4b1e      	ldr	r3, [pc, #120]	; (1313c <z_arm_fault+0xc4>)
   130c4:	4a1e      	ldr	r2, [pc, #120]	; (13140 <z_arm_fault+0xc8>)
   130c6:	1a9b      	subs	r3, r3, r2
   130c8:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   130ca:	f04f 0100 	mov.w	r1, #0
   130ce:	2201      	movs	r2, #1
   130d0:	f362 0102 	bfi	r1, r2, #0, #3
   130d4:	f36f 01c5 	bfc	r1, #3, #3
   130d8:	f363 118f 	bfi	r1, r3, #6, #10
   130dc:	4819      	ldr	r0, [pc, #100]	; (13144 <z_arm_fault+0xcc>)
   130de:	f7fe f937 	bl	11350 <log_0>
	*nested_exc = false;
   130e2:	2700      	movs	r7, #0
		return NULL;
   130e4:	463c      	mov	r4, r7
   130e6:	e7e0      	b.n	130aa <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   130e8:	4604      	mov	r4, r0
			*nested_exc = true;
   130ea:	2701      	movs	r7, #1
   130ec:	e7dd      	b.n	130aa <z_arm_fault+0x32>
	*nested_exc = false;
   130ee:	2700      	movs	r7, #0
		return NULL;
   130f0:	463c      	mov	r4, r7
   130f2:	e7da      	b.n	130aa <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   130f4:	ad01      	add	r5, sp, #4
   130f6:	6820      	ldr	r0, [r4, #0]
   130f8:	6861      	ldr	r1, [r4, #4]
   130fa:	68a2      	ldr	r2, [r4, #8]
   130fc:	68e3      	ldr	r3, [r4, #12]
   130fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13100:	6920      	ldr	r0, [r4, #16]
   13102:	6961      	ldr	r1, [r4, #20]
   13104:	69a2      	ldr	r2, [r4, #24]
   13106:	69e3      	ldr	r3, [r4, #28]
   13108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
   1310a:	b14f      	cbz	r7, 13120 <z_arm_fault+0xa8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1310c:	9b08      	ldr	r3, [sp, #32]
   1310e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13112:	b95a      	cbnz	r2, 1312c <z_arm_fault+0xb4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13114:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13118:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1311c:	9308      	str	r3, [sp, #32]
   1311e:	e005      	b.n	1312c <z_arm_fault+0xb4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13120:	9b08      	ldr	r3, [sp, #32]
   13122:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13126:	f023 0301 	bic.w	r3, r3, #1
   1312a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1312c:	a901      	add	r1, sp, #4
   1312e:	4630      	mov	r0, r6
   13130:	f00d fdd1 	bl	20cd6 <z_arm_fatal_error>
   13134:	e7c3      	b.n	130be <z_arm_fault+0x46>
   13136:	bf00      	nop
   13138:	e000ed00 	.word	0xe000ed00
   1313c:	00024d78 	.word	0x00024d78
   13140:	00024ca0 	.word	0x00024ca0
   13144:	00025744 	.word	0x00025744

00013148 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13148:	4a02      	ldr	r2, [pc, #8]	; (13154 <z_arm_fault_init+0xc>)
   1314a:	6953      	ldr	r3, [r2, #20]
   1314c:	f043 0310 	orr.w	r3, r3, #16
   13150:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13152:	4770      	bx	lr
   13154:	e000ed00 	.word	0xe000ed00

00013158 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13158:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1315c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13160:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13162:	4672      	mov	r2, lr
	bl z_arm_fault
   13164:	f7ff ff88 	bl	13078 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13168:	bd01      	pop	{r0, pc}
   1316a:	bf00      	nop

0001316c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1316c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1316e:	e006      	b.n	1317e <z_arm_interrupt_init+0x12>
   13170:	f002 010f 	and.w	r1, r2, #15
   13174:	4b09      	ldr	r3, [pc, #36]	; (1319c <z_arm_interrupt_init+0x30>)
   13176:	440b      	add	r3, r1
   13178:	2140      	movs	r1, #64	; 0x40
   1317a:	7619      	strb	r1, [r3, #24]
   1317c:	3201      	adds	r2, #1
   1317e:	2a2f      	cmp	r2, #47	; 0x2f
   13180:	dc0a      	bgt.n	13198 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   13182:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   13184:	2b00      	cmp	r3, #0
   13186:	dbf3      	blt.n	13170 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13188:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1318c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13190:	2140      	movs	r1, #64	; 0x40
   13192:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13196:	e7f1      	b.n	1317c <z_arm_interrupt_init+0x10>
	}
}
   13198:	4770      	bx	lr
   1319a:	bf00      	nop
   1319c:	e000ecfc 	.word	0xe000ecfc

000131a0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   131a0:	2000      	movs	r0, #0
    msr CONTROL, r0
   131a2:	f380 8814 	msr	CONTROL, r0
    isb
   131a6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   131aa:	f011 fbf5 	bl	24998 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   131ae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   131b0:	490d      	ldr	r1, [pc, #52]	; (131e8 <__start+0x48>)
    str r0, [r1]
   131b2:	6008      	str	r0, [r1, #0]
    dsb
   131b4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   131b8:	480c      	ldr	r0, [pc, #48]	; (131ec <__start+0x4c>)
    msr msp, r0
   131ba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   131be:	f000 f829 	bl	13214 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   131c2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   131c4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   131c8:	4809      	ldr	r0, [pc, #36]	; (131f0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   131ca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   131ce:	1840      	adds	r0, r0, r1
    msr PSP, r0
   131d0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   131d4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   131d8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   131da:	4308      	orrs	r0, r1
    msr CONTROL, r0
   131dc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   131e0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   131e4:	f7ff faf0 	bl	127c8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   131e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   131ec:	20005620 	.word	0x20005620
    ldr r0, =z_interrupt_stacks
   131f0:	200057a0 	.word	0x200057a0

000131f4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   131f4:	4b06      	ldr	r3, [pc, #24]	; (13210 <z_arm_clear_arm_mpu_config+0x1c>)
   131f6:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   131f8:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   131fc:	2300      	movs	r3, #0
   131fe:	4283      	cmp	r3, r0
   13200:	da05      	bge.n	1320e <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13202:	4a03      	ldr	r2, [pc, #12]	; (13210 <z_arm_clear_arm_mpu_config+0x1c>)
   13204:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13206:	2100      	movs	r1, #0
   13208:	6111      	str	r1, [r2, #16]
   1320a:	3301      	adds	r3, #1
   1320c:	e7f7      	b.n	131fe <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   1320e:	4770      	bx	lr
   13210:	e000ed90 	.word	0xe000ed90

00013214 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13214:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13216:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13218:	2400      	movs	r4, #0
   1321a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1321e:	f7ff ffe9 	bl	131f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13222:	4623      	mov	r3, r4
   13224:	e008      	b.n	13238 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   13226:	f103 0120 	add.w	r1, r3, #32
   1322a:	4a0e      	ldr	r2, [pc, #56]	; (13264 <z_arm_init_arch_hw_at_boot+0x50>)
   1322c:	f04f 30ff 	mov.w	r0, #4294967295
   13230:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13234:	3301      	adds	r3, #1
   13236:	b2db      	uxtb	r3, r3
   13238:	2b07      	cmp	r3, #7
   1323a:	d9f4      	bls.n	13226 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1323c:	2300      	movs	r3, #0
   1323e:	e008      	b.n	13252 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13240:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13244:	4a07      	ldr	r2, [pc, #28]	; (13264 <z_arm_init_arch_hw_at_boot+0x50>)
   13246:	f04f 30ff 	mov.w	r0, #4294967295
   1324a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1324e:	3301      	adds	r3, #1
   13250:	b2db      	uxtb	r3, r3
   13252:	2b07      	cmp	r3, #7
   13254:	d9f4      	bls.n	13240 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13256:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13258:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1325c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13260:	bd10      	pop	{r4, pc}
   13262:	bf00      	nop
   13264:	e000e100 	.word	0xe000e100

00013268 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13268:	b508      	push	{r3, lr}
	if (_current == thread) {
   1326a:	4b08      	ldr	r3, [pc, #32]	; (1328c <z_impl_k_thread_abort+0x24>)
   1326c:	689b      	ldr	r3, [r3, #8]
   1326e:	4283      	cmp	r3, r0
   13270:	d002      	beq.n	13278 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   13272:	f009 faaf 	bl	1c7d4 <z_thread_abort>
}
   13276:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13278:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1327c:	2b00      	cmp	r3, #0
   1327e:	d0f8      	beq.n	13272 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13280:	4a03      	ldr	r2, [pc, #12]	; (13290 <z_impl_k_thread_abort+0x28>)
   13282:	6853      	ldr	r3, [r2, #4]
   13284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13288:	6053      	str	r3, [r2, #4]
   1328a:	e7f2      	b.n	13272 <z_impl_k_thread_abort+0xa>
   1328c:	20002c9c 	.word	0x20002c9c
   13290:	e000ed00 	.word	0xe000ed00

00013294 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13294:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13296:	4b03      	ldr	r3, [pc, #12]	; (132a4 <z_arm_configure_static_mpu_regions+0x10>)
   13298:	4a03      	ldr	r2, [pc, #12]	; (132a8 <z_arm_configure_static_mpu_regions+0x14>)
   1329a:	2101      	movs	r1, #1
   1329c:	4803      	ldr	r0, [pc, #12]	; (132ac <z_arm_configure_static_mpu_regions+0x18>)
   1329e:	f00d fd8f 	bl	20dc0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   132a2:	bd08      	pop	{r3, pc}
   132a4:	20040000 	.word	0x20040000
   132a8:	20000000 	.word	0x20000000
   132ac:	00025774 	.word	0x00025774

000132b0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   132b0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   132b2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   132b6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   132b8:	4804      	ldr	r0, [pc, #16]	; (132cc <z_arm_configure_dynamic_mpu_regions+0x1c>)
   132ba:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   132bc:	2320      	movs	r3, #32
   132be:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   132c0:	4b03      	ldr	r3, [pc, #12]	; (132d0 <z_arm_configure_dynamic_mpu_regions+0x20>)
   132c2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   132c4:	2101      	movs	r1, #1
   132c6:	f00d fd7f 	bl	20dc8 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   132ca:	bd08      	pop	{r3, pc}
   132cc:	20002530 	.word	0x20002530
   132d0:	150b0000 	.word	0x150b0000

000132d4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   132d4:	4a06      	ldr	r2, [pc, #24]	; (132f0 <region_init+0x1c>)
   132d6:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   132d8:	680b      	ldr	r3, [r1, #0]
   132da:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   132de:	4303      	orrs	r3, r0
   132e0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   132e4:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   132e6:	688b      	ldr	r3, [r1, #8]
   132e8:	f043 0301 	orr.w	r3, r3, #1
   132ec:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   132ee:	4770      	bx	lr
   132f0:	e000ed90 	.word	0xe000ed90

000132f4 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   132f4:	b510      	push	{r4, lr}
   132f6:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   132f8:	2807      	cmp	r0, #7
   132fa:	d803      	bhi.n	13304 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   132fc:	f7ff ffea 	bl	132d4 <region_init>

	return index;
   13300:	4620      	mov	r0, r4
}
   13302:	bd10      	pop	{r4, pc}
   13304:	4b09      	ldr	r3, [pc, #36]	; (1332c <region_allocate_and_init+0x38>)
   13306:	4a0a      	ldr	r2, [pc, #40]	; (13330 <region_allocate_and_init+0x3c>)
   13308:	1a9b      	subs	r3, r3, r2
   1330a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1330c:	f04f 0200 	mov.w	r2, #0
   13310:	2101      	movs	r1, #1
   13312:	f361 0202 	bfi	r2, r1, #0, #3
   13316:	f36f 02c5 	bfc	r2, #3, #3
   1331a:	f363 128f 	bfi	r2, r3, #6, #10
   1331e:	4601      	mov	r1, r0
   13320:	4804      	ldr	r0, [pc, #16]	; (13334 <region_allocate_and_init+0x40>)
   13322:	f7fd ff5f 	bl	111e4 <log_1>
		return -EINVAL;
   13326:	f06f 0015 	mvn.w	r0, #21
   1332a:	e7ea      	b.n	13302 <region_allocate_and_init+0xe>
   1332c:	00024d58 	.word	0x00024d58
   13330:	00024ca0 	.word	0x00024ca0
   13334:	00025780 	.word	0x00025780

00013338 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1333c:	4680      	mov	r8, r0
   1333e:	460f      	mov	r7, r1
   13340:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   13342:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   13344:	2400      	movs	r4, #0
   13346:	e009      	b.n	1335c <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13348:	4629      	mov	r1, r5
   1334a:	b2f0      	uxtb	r0, r6
   1334c:	f00d fd19 	bl	20d82 <mpu_configure_region>
   13350:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   13352:	f110 0f16 	cmn.w	r0, #22
   13356:	d025      	beq.n	133a4 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   13358:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   1335a:	3401      	adds	r4, #1
   1335c:	42bc      	cmp	r4, r7
   1335e:	da21      	bge.n	133a4 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   13360:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   13364:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   13368:	686a      	ldr	r2, [r5, #4]
   1336a:	2a00      	cmp	r2, #0
   1336c:	d0f5      	beq.n	1335a <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   1336e:	f1ba 0f00 	cmp.w	sl, #0
   13372:	d0e9      	beq.n	13348 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   13374:	4628      	mov	r0, r5
   13376:	f00d fcf3 	bl	20d60 <mpu_partition_is_valid>
		if (do_sanity_check &&
   1337a:	2800      	cmp	r0, #0
   1337c:	d1e4      	bne.n	13348 <mpu_configure_regions+0x10>
   1337e:	4b0b      	ldr	r3, [pc, #44]	; (133ac <mpu_configure_regions+0x74>)
   13380:	4a0b      	ldr	r2, [pc, #44]	; (133b0 <mpu_configure_regions+0x78>)
   13382:	1a9b      	subs	r3, r3, r2
   13384:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   13386:	f04f 0200 	mov.w	r2, #0
   1338a:	2101      	movs	r1, #1
   1338c:	f361 0202 	bfi	r2, r1, #0, #3
   13390:	f36f 02c5 	bfc	r2, #3, #3
   13394:	f363 128f 	bfi	r2, r3, #6, #10
   13398:	4621      	mov	r1, r4
   1339a:	4806      	ldr	r0, [pc, #24]	; (133b4 <mpu_configure_regions+0x7c>)
   1339c:	f7fd ff22 	bl	111e4 <log_1>
			return -EINVAL;
   133a0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   133a4:	4630      	mov	r0, r6
   133a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   133aa:	bf00      	nop
   133ac:	00024d58 	.word	0x00024d58
   133b0:	00024ca0 	.word	0x00024ca0
   133b4:	000257a8 	.word	0x000257a8

000133b8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   133b8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   133ba:	4c03      	ldr	r4, [pc, #12]	; (133c8 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   133bc:	2301      	movs	r3, #1
   133be:	7822      	ldrb	r2, [r4, #0]
   133c0:	f7ff ffba 	bl	13338 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   133c4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   133c6:	bd10      	pop	{r4, pc}
   133c8:	200036bf 	.word	0x200036bf

000133cc <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   133cc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   133ce:	2300      	movs	r3, #0
   133d0:	4a08      	ldr	r2, [pc, #32]	; (133f4 <mpu_configure_dynamic_mpu_regions+0x28>)
   133d2:	7812      	ldrb	r2, [r2, #0]
   133d4:	f7ff ffb0 	bl	13338 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   133d8:	f110 0f16 	cmn.w	r0, #22
   133dc:	d008      	beq.n	133f0 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   133de:	4603      	mov	r3, r0
   133e0:	2b07      	cmp	r3, #7
   133e2:	dc05      	bgt.n	133f0 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   133e4:	4a04      	ldr	r2, [pc, #16]	; (133f8 <mpu_configure_dynamic_mpu_regions+0x2c>)
   133e6:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   133e8:	2100      	movs	r1, #0
   133ea:	6111      	str	r1, [r2, #16]
   133ec:	3301      	adds	r3, #1
   133ee:	e7f7      	b.n	133e0 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   133f0:	bd08      	pop	{r3, pc}
   133f2:	bf00      	nop
   133f4:	200036bf 	.word	0x200036bf
   133f8:	e000ed90 	.word	0xe000ed90

000133fc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   133fc:	4b03      	ldr	r3, [pc, #12]	; (1340c <arm_core_mpu_enable+0x10>)
   133fe:	2205      	movs	r2, #5
   13400:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13402:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13406:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1340a:	4770      	bx	lr
   1340c:	e000ed90 	.word	0xe000ed90

00013410 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13410:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13414:	4b01      	ldr	r3, [pc, #4]	; (1341c <arm_core_mpu_disable+0xc>)
   13416:	2200      	movs	r2, #0
   13418:	605a      	str	r2, [r3, #4]
}
   1341a:	4770      	bx	lr
   1341c:	e000ed90 	.word	0xe000ed90

00013420 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   13420:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13422:	4b0e      	ldr	r3, [pc, #56]	; (1345c <z_arm_mpu_init+0x3c>)
   13424:	681d      	ldr	r5, [r3, #0]
   13426:	2d08      	cmp	r5, #8
   13428:	d815      	bhi.n	13456 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1342a:	f7ff fff1 	bl	13410 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1342e:	2400      	movs	r4, #0
   13430:	42a5      	cmp	r5, r4
   13432:	d90a      	bls.n	1344a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   13434:	4b09      	ldr	r3, [pc, #36]	; (1345c <z_arm_mpu_init+0x3c>)
   13436:	6859      	ldr	r1, [r3, #4]
   13438:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1343c:	0093      	lsls	r3, r2, #2
   1343e:	4419      	add	r1, r3
   13440:	4620      	mov	r0, r4
   13442:	f7ff ff47 	bl	132d4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13446:	3401      	adds	r4, #1
   13448:	e7f2      	b.n	13430 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1344a:	4b05      	ldr	r3, [pc, #20]	; (13460 <z_arm_mpu_init+0x40>)
   1344c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1344e:	f7ff ffd5 	bl	133fc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13452:	2000      	movs	r0, #0
}
   13454:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   13456:	f04f 30ff 	mov.w	r0, #4294967295
   1345a:	e7fb      	b.n	13454 <z_arm_mpu_init+0x34>
   1345c:	000257dc 	.word	0x000257dc
   13460:	200036bf 	.word	0x200036bf

00013464 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13464:	4b01      	ldr	r3, [pc, #4]	; (1346c <__stdout_hook_install+0x8>)
   13466:	6018      	str	r0, [r3, #0]
}
   13468:	4770      	bx	lr
   1346a:	bf00      	nop
   1346c:	20000438 	.word	0x20000438

00013470 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   13470:	4b06      	ldr	r3, [pc, #24]	; (1348c <nrf52_errata_197+0x1c>)
   13472:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   13474:	4a06      	ldr	r2, [pc, #24]	; (13490 <nrf52_errata_197+0x20>)
   13476:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   13478:	2b08      	cmp	r3, #8
   1347a:	d001      	beq.n	13480 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1347c:	2000      	movs	r0, #0
   1347e:	4770      	bx	lr
                switch(var2)
   13480:	2a02      	cmp	r2, #2
   13482:	d001      	beq.n	13488 <nrf52_errata_197+0x18>
                        return false;
   13484:	2000      	movs	r0, #0
   13486:	4770      	bx	lr
                        return true;
   13488:	2001      	movs	r0, #1
    #endif
}
   1348a:	4770      	bx	lr
   1348c:	10000130 	.word	0x10000130
   13490:	10000134 	.word	0x10000134

00013494 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   13494:	b510      	push	{r4, lr}
	__asm__ volatile(
   13496:	f04f 0340 	mov.w	r3, #64	; 0x40
   1349a:	f3ef 8411 	mrs	r4, BASEPRI
   1349e:	f383 8812 	msr	BASEPRI_MAX, r3
   134a2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   134a6:	2301      	movs	r3, #1
   134a8:	4a0b      	ldr	r2, [pc, #44]	; (134d8 <nordicsemi_nrf52_init+0x44>)
   134aa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   134ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   134b2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   134b6:	f7ff ffdb 	bl	13470 <nrf52_errata_197>
   134ba:	b110      	cbz	r0, 134c2 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   134bc:	4b07      	ldr	r3, [pc, #28]	; (134dc <nordicsemi_nrf52_init+0x48>)
   134be:	2201      	movs	r2, #1
   134c0:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   134c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   134c6:	2201      	movs	r2, #1
   134c8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   134cc:	f384 8811 	msr	BASEPRI, r4
   134d0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   134d4:	2000      	movs	r0, #0
   134d6:	bd10      	pop	{r4, pc}
   134d8:	4001e000 	.word	0x4001e000
   134dc:	40000638 	.word	0x40000638

000134e0 <sys_arch_reboot>:
    *p_gpregret = val;
   134e0:	b2c0      	uxtb	r0, r0
   134e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   134e6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   134ea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   134ee:	4905      	ldr	r1, [pc, #20]	; (13504 <sys_arch_reboot+0x24>)
   134f0:	68ca      	ldr	r2, [r1, #12]
   134f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   134f6:	4b04      	ldr	r3, [pc, #16]	; (13508 <sys_arch_reboot+0x28>)
   134f8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   134fa:	60cb      	str	r3, [r1, #12]
   134fc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13500:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13502:	e7fd      	b.n	13500 <sys_arch_reboot+0x20>
   13504:	e000ed00 	.word	0xe000ed00
   13508:	05fa0004 	.word	0x05fa0004

0001350c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1350c:	b130      	cbz	r0, 1351c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   1350e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13510:	0180      	lsls	r0, r0, #6
   13512:	4b03      	ldr	r3, [pc, #12]	; (13520 <arch_busy_wait+0x14>)
   13514:	f043 0301 	orr.w	r3, r3, #1
   13518:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   1351a:	bd08      	pop	{r3, pc}
   1351c:	4770      	bx	lr
   1351e:	bf00      	nop
   13520:	00024e80 	.word	0x00024e80

00013524 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13524:	2940      	cmp	r1, #64	; 0x40
   13526:	bf28      	it	cs
   13528:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   1352a:	2300      	movs	r3, #0
   1352c:	428b      	cmp	r3, r1
   1352e:	d217      	bcs.n	13560 <bt_hex_real+0x3c>
{
   13530:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   13532:	5cc4      	ldrb	r4, [r0, r3]
   13534:	0924      	lsrs	r4, r4, #4
   13536:	005a      	lsls	r2, r3, #1
   13538:	4e0c      	ldr	r6, [pc, #48]	; (1356c <bt_hex_real+0x48>)
   1353a:	5d34      	ldrb	r4, [r6, r4]
   1353c:	4d0c      	ldr	r5, [pc, #48]	; (13570 <bt_hex_real+0x4c>)
   1353e:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13542:	5cc4      	ldrb	r4, [r0, r3]
   13544:	f004 040f 	and.w	r4, r4, #15
   13548:	3201      	adds	r2, #1
   1354a:	5d34      	ldrb	r4, [r6, r4]
   1354c:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   1354e:	3301      	adds	r3, #1
   13550:	428b      	cmp	r3, r1
   13552:	d3ee      	bcc.n	13532 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   13554:	4806      	ldr	r0, [pc, #24]	; (13570 <bt_hex_real+0x4c>)
   13556:	2200      	movs	r2, #0
   13558:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   1355c:	bc70      	pop	{r4, r5, r6}
   1355e:	4770      	bx	lr
	str[i * 2] = '\0';
   13560:	4803      	ldr	r0, [pc, #12]	; (13570 <bt_hex_real+0x4c>)
   13562:	2200      	movs	r2, #0
   13564:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   13568:	4770      	bx	lr
   1356a:	bf00      	nop
   1356c:	0002584c 	.word	0x0002584c
   13570:	2000253c 	.word	0x2000253c

00013574 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   13574:	b5f0      	push	{r4, r5, r6, r7, lr}
   13576:	b08b      	sub	sp, #44	; 0x2c
   13578:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1357a:	7803      	ldrb	r3, [r0, #0]
   1357c:	2b03      	cmp	r3, #3
   1357e:	d838      	bhi.n	135f2 <bt_addr_le_str_real+0x7e>
   13580:	e8df f003 	tbb	[pc, r3]
   13584:	312b2102 	.word	0x312b2102
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   13588:	4b1d      	ldr	r3, [pc, #116]	; (13600 <bt_addr_le_str_real+0x8c>)
   1358a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1358e:	9007      	str	r0, [sp, #28]
   13590:	f8ad 1020 	strh.w	r1, [sp, #32]
   13594:	0c09      	lsrs	r1, r1, #16
   13596:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1359a:	7963      	ldrb	r3, [r4, #5]
   1359c:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1359e:	78e1      	ldrb	r1, [r4, #3]
   135a0:	78a0      	ldrb	r0, [r4, #2]
   135a2:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   135a4:	4d17      	ldr	r5, [pc, #92]	; (13604 <bt_addr_le_str_real+0x90>)
   135a6:	af07      	add	r7, sp, #28
   135a8:	9705      	str	r7, [sp, #20]
   135aa:	9604      	str	r6, [sp, #16]
   135ac:	9003      	str	r0, [sp, #12]
   135ae:	9102      	str	r1, [sp, #8]
   135b0:	9201      	str	r2, [sp, #4]
   135b2:	9300      	str	r3, [sp, #0]
   135b4:	79a3      	ldrb	r3, [r4, #6]
   135b6:	4a14      	ldr	r2, [pc, #80]	; (13608 <bt_addr_le_str_real+0x94>)
   135b8:	211e      	movs	r1, #30
   135ba:	4628      	mov	r0, r5
   135bc:	f00c fb77 	bl	1fcae <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   135c0:	4628      	mov	r0, r5
   135c2:	b00b      	add	sp, #44	; 0x2c
   135c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   135c6:	4b11      	ldr	r3, [pc, #68]	; (1360c <bt_addr_le_str_real+0x98>)
   135c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   135cc:	9007      	str	r0, [sp, #28]
   135ce:	f8ad 1020 	strh.w	r1, [sp, #32]
   135d2:	0c09      	lsrs	r1, r1, #16
   135d4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   135d8:	e7df      	b.n	1359a <bt_addr_le_str_real+0x26>
		strcpy(type, "public-id");
   135da:	4a0d      	ldr	r2, [pc, #52]	; (13610 <bt_addr_le_str_real+0x9c>)
   135dc:	ab07      	add	r3, sp, #28
   135de:	ca07      	ldmia	r2, {r0, r1, r2}
   135e0:	c303      	stmia	r3!, {r0, r1}
   135e2:	801a      	strh	r2, [r3, #0]
		break;
   135e4:	e7d9      	b.n	1359a <bt_addr_le_str_real+0x26>
		strcpy(type, "random-id");
   135e6:	4a0b      	ldr	r2, [pc, #44]	; (13614 <bt_addr_le_str_real+0xa0>)
   135e8:	ab07      	add	r3, sp, #28
   135ea:	ca07      	ldmia	r2, {r0, r1, r2}
   135ec:	c303      	stmia	r3!, {r0, r1}
   135ee:	801a      	strh	r2, [r3, #0]
		break;
   135f0:	e7d3      	b.n	1359a <bt_addr_le_str_real+0x26>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   135f2:	4a09      	ldr	r2, [pc, #36]	; (13618 <bt_addr_le_str_real+0xa4>)
   135f4:	210a      	movs	r1, #10
   135f6:	a807      	add	r0, sp, #28
   135f8:	f00c fb59 	bl	1fcae <snprintk>
		break;
   135fc:	e7cd      	b.n	1359a <bt_addr_le_str_real+0x26>
   135fe:	bf00      	nop
   13600:	00025800 	.word	0x00025800
   13604:	200025c0 	.word	0x200025c0
   13608:	00025810 	.word	0x00025810
   1360c:	00025808 	.word	0x00025808
   13610:	00025834 	.word	0x00025834
   13614:	00025840 	.word	0x00025840
   13618:	00026610 	.word	0x00026610

0001361c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1361c:	b470      	push	{r4, r5, r6}
   1361e:	4605      	mov	r5, r0
   13620:	460c      	mov	r4, r1
	switch (src->type) {
   13622:	7803      	ldrb	r3, [r0, #0]
   13624:	2b01      	cmp	r3, #1
   13626:	d011      	beq.n	1364c <uuid_to_uuid128+0x30>
   13628:	2b02      	cmp	r3, #2
   1362a:	d021      	beq.n	13670 <uuid_to_uuid128+0x54>
   1362c:	b10b      	cbz	r3, 13632 <uuid_to_uuid128+0x16>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1362e:	bc70      	pop	{r4, r5, r6}
   13630:	4770      	bx	lr
		*dst = uuid128_base;
   13632:	4e15      	ldr	r6, [pc, #84]	; (13688 <uuid_to_uuid128+0x6c>)
   13634:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13636:	6020      	str	r0, [r4, #0]
   13638:	6061      	str	r1, [r4, #4]
   1363a:	60a2      	str	r2, [r4, #8]
   1363c:	60e3      	str	r3, [r4, #12]
   1363e:	7833      	ldrb	r3, [r6, #0]
   13640:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   13642:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13644:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   13646:	0a1b      	lsrs	r3, r3, #8
   13648:	73a3      	strb	r3, [r4, #14]
}
   1364a:	e7f0      	b.n	1362e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   1364c:	4e0e      	ldr	r6, [pc, #56]	; (13688 <uuid_to_uuid128+0x6c>)
   1364e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13650:	6020      	str	r0, [r4, #0]
   13652:	6061      	str	r1, [r4, #4]
   13654:	60a2      	str	r2, [r4, #8]
   13656:	60e3      	str	r3, [r4, #12]
   13658:	7833      	ldrb	r3, [r6, #0]
   1365a:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   1365c:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   1365e:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   13660:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13664:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13666:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   13668:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   1366a:	0e1b      	lsrs	r3, r3, #24
   1366c:	7423      	strb	r3, [r4, #16]
}
   1366e:	e7de      	b.n	1362e <uuid_to_uuid128+0x12>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13670:	6800      	ldr	r0, [r0, #0]
   13672:	6869      	ldr	r1, [r5, #4]
   13674:	68aa      	ldr	r2, [r5, #8]
   13676:	68eb      	ldr	r3, [r5, #12]
   13678:	6020      	str	r0, [r4, #0]
   1367a:	6061      	str	r1, [r4, #4]
   1367c:	60a2      	str	r2, [r4, #8]
   1367e:	60e3      	str	r3, [r4, #12]
   13680:	7c2b      	ldrb	r3, [r5, #16]
   13682:	7423      	strb	r3, [r4, #16]
   13684:	e7d3      	b.n	1362e <uuid_to_uuid128+0x12>
   13686:	bf00      	nop
   13688:	00025868 	.word	0x00025868

0001368c <bt_addr_from_str>:

	return 0;
}

int bt_addr_from_str(const char *str, bt_addr_t *addr)
{
   1368c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1368e:	b083      	sub	sp, #12
   13690:	4605      	mov	r5, r0
   13692:	460f      	mov	r7, r1
	int i, j;
	uint8_t tmp;

	if (strlen(str) != 17U) {
   13694:	f7f8 fdee 	bl	c274 <strlen>
   13698:	2811      	cmp	r0, #17
   1369a:	d12a      	bne.n	136f2 <bt_addr_from_str+0x66>
		return -EINVAL;
	}

	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   1369c:	2401      	movs	r4, #1
   1369e:	2605      	movs	r6, #5
   136a0:	e012      	b.n	136c8 <bt_addr_from_str+0x3c>
		if (!(j % 3) && (*str != ':')) {
			return -EINVAL;
		} else if (*str == ':') {
   136a2:	2a3a      	cmp	r2, #58	; 0x3a
   136a4:	d020      	beq.n	136e8 <bt_addr_from_str+0x5c>
			i--;
			continue;
		}

		addr->val[i] = addr->val[i] << 4;
   136a6:	5dbb      	ldrb	r3, [r7, r6]
   136a8:	011b      	lsls	r3, r3, #4
   136aa:	55bb      	strb	r3, [r7, r6]

		if (char2hex(*str, &tmp) < 0) {
   136ac:	f10d 0107 	add.w	r1, sp, #7
   136b0:	7828      	ldrb	r0, [r5, #0]
   136b2:	f00c fa7f 	bl	1fbb4 <char2hex>
   136b6:	2800      	cmp	r0, #0
   136b8:	db1e      	blt.n	136f8 <bt_addr_from_str+0x6c>
			return -EINVAL;
		}

		addr->val[i] |= tmp;
   136ba:	5dbb      	ldrb	r3, [r7, r6]
   136bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   136c0:	4313      	orrs	r3, r2
   136c2:	55bb      	strb	r3, [r7, r6]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   136c4:	3501      	adds	r5, #1
   136c6:	3401      	adds	r4, #1
   136c8:	782a      	ldrb	r2, [r5, #0]
   136ca:	b17a      	cbz	r2, 136ec <bt_addr_from_str+0x60>
		if (!(j % 3) && (*str != ':')) {
   136cc:	4b0c      	ldr	r3, [pc, #48]	; (13700 <bt_addr_from_str+0x74>)
   136ce:	fb83 1304 	smull	r1, r3, r3, r4
   136d2:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   136d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   136da:	429c      	cmp	r4, r3
   136dc:	d1e1      	bne.n	136a2 <bt_addr_from_str+0x16>
   136de:	2a3a      	cmp	r2, #58	; 0x3a
   136e0:	d0df      	beq.n	136a2 <bt_addr_from_str+0x16>
			return -EINVAL;
   136e2:	f06f 0015 	mvn.w	r0, #21
   136e6:	e002      	b.n	136ee <bt_addr_from_str+0x62>
			i--;
   136e8:	3e01      	subs	r6, #1
			continue;
   136ea:	e7eb      	b.n	136c4 <bt_addr_from_str+0x38>
	}

	return 0;
   136ec:	2000      	movs	r0, #0
}
   136ee:	b003      	add	sp, #12
   136f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   136f2:	f06f 0015 	mvn.w	r0, #21
   136f6:	e7fa      	b.n	136ee <bt_addr_from_str+0x62>
			return -EINVAL;
   136f8:	f06f 0015 	mvn.w	r0, #21
   136fc:	e7f7      	b.n	136ee <bt_addr_from_str+0x62>
   136fe:	bf00      	nop
   13700:	55555556 	.word	0x55555556

00013704 <bt_addr_le_from_str>:

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   13704:	b538      	push	{r3, r4, r5, lr}
   13706:	460d      	mov	r5, r1
   13708:	4614      	mov	r4, r2
	int err;

	err = bt_addr_from_str(str, &addr->a);
   1370a:	1c51      	adds	r1, r2, #1
   1370c:	f7ff ffbe 	bl	1368c <bt_addr_from_str>
	if (err < 0) {
   13710:	2800      	cmp	r0, #0
   13712:	db06      	blt.n	13722 <bt_addr_le_from_str+0x1e>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   13714:	491e      	ldr	r1, [pc, #120]	; (13790 <bt_addr_le_from_str+0x8c>)
   13716:	4628      	mov	r0, r5
   13718:	f7f8 fda2 	bl	c260 <strcmp>
   1371c:	b910      	cbnz	r0, 13724 <bt_addr_le_from_str+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   1371e:	2000      	movs	r0, #0
   13720:	7020      	strb	r0, [r4, #0]
	} else {
		return -EINVAL;
	}

	return 0;
}
   13722:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   13724:	491b      	ldr	r1, [pc, #108]	; (13794 <bt_addr_le_from_str+0x90>)
   13726:	4628      	mov	r0, r5
   13728:	f7f8 fd9a 	bl	c260 <strcmp>
   1372c:	2800      	cmp	r0, #0
   1372e:	d0f6      	beq.n	1371e <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   13730:	4919      	ldr	r1, [pc, #100]	; (13798 <bt_addr_le_from_str+0x94>)
   13732:	4628      	mov	r0, r5
   13734:	f7f8 fd94 	bl	c260 <strcmp>
   13738:	b918      	cbnz	r0, 13742 <bt_addr_le_from_str+0x3e>
		addr->type = BT_ADDR_LE_RANDOM;
   1373a:	2301      	movs	r3, #1
   1373c:	7023      	strb	r3, [r4, #0]
	return 0;
   1373e:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM;
   13740:	e7ef      	b.n	13722 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   13742:	4916      	ldr	r1, [pc, #88]	; (1379c <bt_addr_le_from_str+0x98>)
   13744:	4628      	mov	r0, r5
   13746:	f7f8 fd8b 	bl	c260 <strcmp>
   1374a:	2800      	cmp	r0, #0
   1374c:	d0f5      	beq.n	1373a <bt_addr_le_from_str+0x36>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   1374e:	4914      	ldr	r1, [pc, #80]	; (137a0 <bt_addr_le_from_str+0x9c>)
   13750:	4628      	mov	r0, r5
   13752:	f7f8 fd85 	bl	c260 <strcmp>
   13756:	b918      	cbnz	r0, 13760 <bt_addr_le_from_str+0x5c>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   13758:	2302      	movs	r3, #2
   1375a:	7023      	strb	r3, [r4, #0]
	return 0;
   1375c:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   1375e:	e7e0      	b.n	13722 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   13760:	4910      	ldr	r1, [pc, #64]	; (137a4 <bt_addr_le_from_str+0xa0>)
   13762:	4628      	mov	r0, r5
   13764:	f7f8 fd7c 	bl	c260 <strcmp>
   13768:	2800      	cmp	r0, #0
   1376a:	d0f5      	beq.n	13758 <bt_addr_le_from_str+0x54>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   1376c:	490e      	ldr	r1, [pc, #56]	; (137a8 <bt_addr_le_from_str+0xa4>)
   1376e:	4628      	mov	r0, r5
   13770:	f7f8 fd76 	bl	c260 <strcmp>
   13774:	b918      	cbnz	r0, 1377e <bt_addr_le_from_str+0x7a>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   13776:	2303      	movs	r3, #3
   13778:	7023      	strb	r3, [r4, #0]
	return 0;
   1377a:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM_ID;
   1377c:	e7d1      	b.n	13722 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   1377e:	490b      	ldr	r1, [pc, #44]	; (137ac <bt_addr_le_from_str+0xa8>)
   13780:	4628      	mov	r0, r5
   13782:	f7f8 fd6d 	bl	c260 <strcmp>
   13786:	2800      	cmp	r0, #0
   13788:	d0f5      	beq.n	13776 <bt_addr_le_from_str+0x72>
		return -EINVAL;
   1378a:	f06f 0015 	mvn.w	r0, #21
   1378e:	e7c8      	b.n	13722 <bt_addr_le_from_str+0x1e>
   13790:	00025800 	.word	0x00025800
   13794:	0002587c 	.word	0x0002587c
   13798:	00025808 	.word	0x00025808
   1379c:	00024f3c 	.word	0x00024f3c
   137a0:	00025834 	.word	0x00025834
   137a4:	00025888 	.word	0x00025888
   137a8:	00025840 	.word	0x00025840
   137ac:	00025894 	.word	0x00025894

000137b0 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   137b0:	b538      	push	{r3, r4, r5, lr}
   137b2:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   137b4:	4805      	ldr	r0, [pc, #20]	; (137cc <bt_buf_get_rx+0x1c>)
   137b6:	f00f f9d8 	bl	22b6a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   137ba:	4605      	mov	r5, r0
   137bc:	b120      	cbz	r0, 137c8 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   137be:	2100      	movs	r1, #0
   137c0:	3008      	adds	r0, #8
   137c2:	f00f f9f4 	bl	22bae <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   137c6:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   137c8:	4628      	mov	r0, r5
   137ca:	bd38      	pop	{r3, r4, r5, pc}
   137cc:	20000878 	.word	0x20000878

000137d0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   137d0:	b510      	push	{r4, lr}
   137d2:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   137d4:	4b0a      	ldr	r3, [pc, #40]	; (13800 <bt_buf_get_cmd_complete+0x30>)
   137d6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   137da:	b158      	cbz	r0, 137f4 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   137dc:	f00f fa1e 	bl	22c1c <net_buf_ref>
   137e0:	4604      	mov	r4, r0
   137e2:	2301      	movs	r3, #1
   137e4:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   137e6:	2100      	movs	r1, #0
   137e8:	8181      	strh	r1, [r0, #12]
   137ea:	3008      	adds	r0, #8
   137ec:	f00f f9df 	bl	22bae <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   137f0:	4620      	mov	r0, r4
   137f2:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   137f4:	460b      	mov	r3, r1
   137f6:	2001      	movs	r0, #1
   137f8:	f7ff ffda 	bl	137b0 <bt_buf_get_rx>
   137fc:	4604      	mov	r4, r0
   137fe:	e7f7      	b.n	137f0 <bt_buf_get_cmd_complete+0x20>
   13800:	200002a8 	.word	0x200002a8

00013804 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13804:	b510      	push	{r4, lr}
	switch (evt) {
   13806:	280f      	cmp	r0, #15
   13808:	d90d      	bls.n	13826 <bt_buf_get_evt+0x22>
   1380a:	2813      	cmp	r0, #19
   1380c:	d10d      	bne.n	1382a <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   1380e:	4814      	ldr	r0, [pc, #80]	; (13860 <bt_buf_get_evt+0x5c>)
   13810:	f00f f9ab 	bl	22b6a <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   13814:	4604      	mov	r4, r0
   13816:	b198      	cbz	r0, 13840 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   13818:	2100      	movs	r1, #0
   1381a:	3008      	adds	r0, #8
   1381c:	f00f f9c7 	bl	22bae <net_buf_simple_reserve>
   13820:	2301      	movs	r3, #1
   13822:	7523      	strb	r3, [r4, #20]
}
   13824:	e00c      	b.n	13840 <bt_buf_get_evt+0x3c>
	switch (evt) {
   13826:	280e      	cmp	r0, #14
   13828:	d205      	bcs.n	13836 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   1382a:	b959      	cbnz	r1, 13844 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1382c:	2001      	movs	r0, #1
   1382e:	f7ff ffbf 	bl	137b0 <bt_buf_get_rx>
   13832:	4604      	mov	r4, r0
   13834:	e004      	b.n	13840 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   13836:	4610      	mov	r0, r2
   13838:	4619      	mov	r1, r3
   1383a:	f7ff ffc9 	bl	137d0 <bt_buf_get_cmd_complete>
   1383e:	4604      	mov	r4, r0
	}
}
   13840:	4620      	mov	r0, r4
   13842:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   13844:	4807      	ldr	r0, [pc, #28]	; (13864 <bt_buf_get_evt+0x60>)
   13846:	f00f f990 	bl	22b6a <net_buf_alloc_fixed>
			if (buf) {
   1384a:	4604      	mov	r4, r0
   1384c:	2800      	cmp	r0, #0
   1384e:	d0f7      	beq.n	13840 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   13850:	2100      	movs	r1, #0
   13852:	3008      	adds	r0, #8
   13854:	f00f f9ab 	bl	22bae <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13858:	2301      	movs	r3, #1
   1385a:	7523      	strb	r3, [r4, #20]
			return buf;
   1385c:	e7f0      	b.n	13840 <bt_buf_get_evt+0x3c>
   1385e:	bf00      	nop
   13860:	200008a4 	.word	0x200008a4
   13864:	200007f4 	.word	0x200007f4

00013868 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   13868:	2300      	movs	r3, #0
   1386a:	2b00      	cmp	r3, #0
   1386c:	dd00      	ble.n	13870 <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   1386e:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   13870:	4a05      	ldr	r2, [pc, #20]	; (13888 <conn_handle_disconnected+0x20>)
   13872:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   13876:	b922      	cbnz	r2, 13882 <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13878:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   1387c:	4902      	ldr	r1, [pc, #8]	; (13888 <conn_handle_disconnected+0x20>)
   1387e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   13882:	3301      	adds	r3, #1
   13884:	e7f1      	b.n	1386a <conn_handle_disconnected+0x2>
   13886:	bf00      	nop
   13888:	200025f8 	.word	0x200025f8

0001388c <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   1388c:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   13890:	2300      	movs	r3, #0
   13892:	2b00      	cmp	r3, #0
   13894:	dd01      	ble.n	1389a <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   13896:	2000      	movs	r0, #0
}
   13898:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   1389a:	4a06      	ldr	r2, [pc, #24]	; (138b4 <conn_handle_is_disconnected+0x28>)
   1389c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   138a0:	4282      	cmp	r2, r0
   138a2:	d001      	beq.n	138a8 <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   138a4:	3301      	adds	r3, #1
   138a6:	e7f4      	b.n	13892 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   138a8:	4a02      	ldr	r2, [pc, #8]	; (138b4 <conn_handle_is_disconnected+0x28>)
   138aa:	2100      	movs	r1, #0
   138ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   138b0:	2001      	movs	r0, #1
   138b2:	4770      	bx	lr
   138b4:	200025f8 	.word	0x200025f8

000138b8 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   138b8:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   138ba:	7851      	ldrb	r1, [r2, #1]
   138bc:	4b08      	ldr	r3, [pc, #32]	; (138e0 <read_local_ver_complete+0x28>)
   138be:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   138c2:	8851      	ldrh	r1, [r2, #2]
   138c4:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   138c8:	7911      	ldrb	r1, [r2, #4]
   138ca:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   138ce:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   138d2:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   138d6:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   138da:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   138de:	4770      	bx	lr
   138e0:	200002a8 	.word	0x200002a8

000138e4 <read_le_features_complete>:
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   138e4:	4b03      	ldr	r3, [pc, #12]	; (138f4 <read_le_features_complete+0x10>)
   138e6:	6882      	ldr	r2, [r0, #8]
   138e8:	f852 0f01 	ldr.w	r0, [r2, #1]!
   138ec:	6851      	ldr	r1, [r2, #4]
   138ee:	c303      	stmia	r3!, {r0, r1}
}
   138f0:	4770      	bx	lr
   138f2:	bf00      	nop
   138f4:	20000378 	.word	0x20000378

000138f8 <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
   138f8:	b4f0      	push	{r4, r5, r6, r7}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   138fa:	6886      	ldr	r6, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
   138fc:	1c74      	adds	r4, r6, #1
   138fe:	4f07      	ldr	r7, [pc, #28]	; (1391c <read_supported_commands_complete+0x24>)
   13900:	3641      	adds	r6, #65	; 0x41
   13902:	463d      	mov	r5, r7
   13904:	6820      	ldr	r0, [r4, #0]
   13906:	6861      	ldr	r1, [r4, #4]
   13908:	68a2      	ldr	r2, [r4, #8]
   1390a:	68e3      	ldr	r3, [r4, #12]
   1390c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1390e:	3410      	adds	r4, #16
   13910:	462f      	mov	r7, r5
   13912:	42b4      	cmp	r4, r6
   13914:	d1f5      	bne.n	13902 <read_supported_commands_complete+0xa>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
   13916:	bcf0      	pop	{r4, r5, r6, r7}
   13918:	4770      	bx	lr
   1391a:	bf00      	nop
   1391c:	20000320 	.word	0x20000320

00013920 <read_local_features_complete>:
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   13920:	4b03      	ldr	r3, [pc, #12]	; (13930 <read_local_features_complete+0x10>)
   13922:	6882      	ldr	r2, [r0, #8]
   13924:	f852 0f01 	ldr.w	r0, [r2, #1]!
   13928:	6851      	ldr	r1, [r2, #4]
   1392a:	c303      	stmia	r3!, {r0, r1}
}
   1392c:	4770      	bx	lr
   1392e:	bf00      	nop
   13930:	20000318 	.word	0x20000318

00013934 <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   13934:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   13936:	7a19      	ldrb	r1, [r3, #8]
   13938:	79da      	ldrb	r2, [r3, #7]
   1393a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   1393e:	7998      	ldrb	r0, [r3, #6]
   13940:	795a      	ldrb	r2, [r3, #5]
   13942:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   13946:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   1394a:	7918      	ldrb	r0, [r3, #4]
   1394c:	78d9      	ldrb	r1, [r3, #3]
   1394e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   13952:	7898      	ldrb	r0, [r3, #2]
   13954:	785b      	ldrb	r3, [r3, #1]
   13956:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1395a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   1395e:	4903      	ldr	r1, [pc, #12]	; (1396c <le_read_supp_states_complete+0x38>)
   13960:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   13964:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   13968:	4770      	bx	lr
   1396a:	bf00      	nop
   1396c:	200002a8 	.word	0x200002a8

00013970 <hci_reset_complete>:
{
   13970:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   13972:	6883      	ldr	r3, [r0, #8]
   13974:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   13976:	b9a3      	cbnz	r3, 139a2 <hci_reset_complete+0x32>
		bt_scan_reset();
   13978:	f002 f8aa 	bl	15ad0 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1397c:	f3bf 8f5b 	dmb	ish
   13980:	4b08      	ldr	r3, [pc, #32]	; (139a4 <hci_reset_complete+0x34>)
   13982:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   13986:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1398a:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1398e:	f3bf 8f5b 	dmb	ish
   13992:	e853 1f00 	ldrex	r1, [r3]
   13996:	e843 2000 	strex	r0, r2, [r3]
   1399a:	2800      	cmp	r0, #0
   1399c:	d1f9      	bne.n	13992 <hci_reset_complete+0x22>
   1399e:	f3bf 8f5b 	dmb	ish
}
   139a2:	bd08      	pop	{r3, pc}
   139a4:	200002a8 	.word	0x200002a8

000139a8 <le_read_buffer_size_complete>:
{
   139a8:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   139aa:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   139ac:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   139b0:	b299      	uxth	r1, r3
   139b2:	4806      	ldr	r0, [pc, #24]	; (139cc <le_read_buffer_size_complete+0x24>)
   139b4:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   139b8:	b901      	cbnz	r1, 139bc <le_read_buffer_size_complete+0x14>
}
   139ba:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   139bc:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   139be:	460a      	mov	r2, r1
   139c0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   139c4:	f010 fb1f 	bl	24006 <z_impl_k_sem_init>
   139c8:	e7f7      	b.n	139ba <le_read_buffer_size_complete+0x12>
   139ca:	bf00      	nop
   139cc:	200002a8 	.word	0x200002a8

000139d0 <read_buffer_size_complete>:
{
   139d0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   139d2:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   139d4:	4b08      	ldr	r3, [pc, #32]	; (139f8 <read_buffer_size_complete+0x28>)
   139d6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   139da:	b103      	cbz	r3, 139de <read_buffer_size_complete+0xe>
}
   139dc:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   139de:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   139e2:	4805      	ldr	r0, [pc, #20]	; (139f8 <read_buffer_size_complete+0x28>)
   139e4:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   139e8:	8891      	ldrh	r1, [r2, #4]
   139ea:	460a      	mov	r2, r1
   139ec:	f500 7080 	add.w	r0, r0, #256	; 0x100
   139f0:	f010 fb09 	bl	24006 <z_impl_k_sem_init>
   139f4:	e7f2      	b.n	139dc <read_buffer_size_complete+0xc>
   139f6:	bf00      	nop
   139f8:	200002a8 	.word	0x200002a8

000139fc <hci_data_buf_overflow>:
{
   139fc:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   139fe:	6881      	ldr	r1, [r0, #8]
   13a00:	4b08      	ldr	r3, [pc, #32]	; (13a24 <hci_data_buf_overflow+0x28>)
   13a02:	4a09      	ldr	r2, [pc, #36]	; (13a28 <hci_data_buf_overflow+0x2c>)
   13a04:	1a9b      	subs	r3, r3, r2
   13a06:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   13a08:	f04f 0200 	mov.w	r2, #0
   13a0c:	2002      	movs	r0, #2
   13a0e:	f360 0202 	bfi	r2, r0, #0, #3
   13a12:	f36f 02c5 	bfc	r2, #3, #3
   13a16:	f363 128f 	bfi	r2, r3, #6, #10
   13a1a:	7809      	ldrb	r1, [r1, #0]
   13a1c:	4803      	ldr	r0, [pc, #12]	; (13a2c <hci_data_buf_overflow+0x30>)
   13a1e:	f7fd fbe1 	bl	111e4 <log_1>
}
   13a22:	bd08      	pop	{r3, pc}
   13a24:	00024cf8 	.word	0x00024cf8
   13a28:	00024ca0 	.word	0x00024ca0
   13a2c:	000258d8 	.word	0x000258d8

00013a30 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   13a30:	b108      	cbz	r0, 13a36 <find_pending_connect+0x6>
	return NULL;
   13a32:	2000      	movs	r0, #0
}
   13a34:	4770      	bx	lr
{
   13a36:	b500      	push	{lr}
   13a38:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   13a3a:	2206      	movs	r2, #6
   13a3c:	f002 ff22 	bl	16884 <bt_conn_lookup_state_le>
		if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) && !conn) {
   13a40:	b110      	cbz	r0, 13a48 <find_pending_connect+0x18>
}
   13a42:	b003      	add	sp, #12
   13a44:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   13a48:	4b07      	ldr	r3, [pc, #28]	; (13a68 <find_pending_connect+0x38>)
   13a4a:	e893 0003 	ldmia.w	r3, {r0, r1}
   13a4e:	9000      	str	r0, [sp, #0]
   13a50:	f8ad 1004 	strh.w	r1, [sp, #4]
   13a54:	0c09      	lsrs	r1, r1, #16
   13a56:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(BT_ID_DEFAULT,
   13a5a:	2203      	movs	r2, #3
   13a5c:	4669      	mov	r1, sp
   13a5e:	2000      	movs	r0, #0
   13a60:	f002 ff10 	bl	16884 <bt_conn_lookup_state_le>
		return conn;
   13a64:	e7ed      	b.n	13a42 <find_pending_connect+0x12>
   13a66:	bf00      	nop
   13a68:	00024e5c 	.word	0x00024e5c

00013a6c <hci_disconn_complete>:
{
   13a6c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13a6e:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13a70:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   13a74:	7823      	ldrb	r3, [r4, #0]
   13a76:	b103      	cbz	r3, 13a7a <hci_disconn_complete+0xe>
}
   13a78:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   13a7a:	4630      	mov	r0, r6
   13a7c:	f002 fcea 	bl	16454 <bt_conn_lookup_handle>
	if (!conn) {
   13a80:	4605      	mov	r5, r0
   13a82:	b158      	cbz	r0, 13a9c <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   13a84:	78e3      	ldrb	r3, [r4, #3]
   13a86:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13a88:	2100      	movs	r1, #0
   13a8a:	f002 fced 	bl	16468 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   13a8e:	78ab      	ldrb	r3, [r5, #2]
   13a90:	2b01      	cmp	r3, #1
   13a92:	d015      	beq.n	13ac0 <hci_disconn_complete+0x54>
		bt_conn_unref(conn);
   13a94:	4628      	mov	r0, r5
   13a96:	f00d fcf0 	bl	2147a <bt_conn_unref>
		return;
   13a9a:	e7ed      	b.n	13a78 <hci_disconn_complete+0xc>
   13a9c:	4b0a      	ldr	r3, [pc, #40]	; (13ac8 <hci_disconn_complete+0x5c>)
   13a9e:	4a0b      	ldr	r2, [pc, #44]	; (13acc <hci_disconn_complete+0x60>)
   13aa0:	1a9b      	subs	r3, r3, r2
   13aa2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   13aa4:	f04f 0200 	mov.w	r2, #0
   13aa8:	2101      	movs	r1, #1
   13aaa:	f361 0202 	bfi	r2, r1, #0, #3
   13aae:	f36f 02c5 	bfc	r2, #3, #3
   13ab2:	f363 128f 	bfi	r2, r3, #6, #10
   13ab6:	4631      	mov	r1, r6
   13ab8:	4805      	ldr	r0, [pc, #20]	; (13ad0 <hci_disconn_complete+0x64>)
   13aba:	f7fd fb93 	bl	111e4 <log_1>
		return;
   13abe:	e7db      	b.n	13a78 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   13ac0:	4628      	mov	r0, r5
   13ac2:	f00d fcda 	bl	2147a <bt_conn_unref>
   13ac6:	e7d7      	b.n	13a78 <hci_disconn_complete+0xc>
   13ac8:	00024cf8 	.word	0x00024cf8
   13acc:	00024ca0 	.word	0x00024ca0
   13ad0:	00025900 	.word	0x00025900

00013ad4 <le_data_len_change>:
{
   13ad4:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   13ad6:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13ad8:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   13ada:	4620      	mov	r0, r4
   13adc:	f002 fcba 	bl	16454 <bt_conn_lookup_handle>
	if (!conn) {
   13ae0:	b110      	cbz	r0, 13ae8 <le_data_len_change+0x14>
	bt_conn_unref(conn);
   13ae2:	f00d fcca 	bl	2147a <bt_conn_unref>
}
   13ae6:	bd10      	pop	{r4, pc}
   13ae8:	4b08      	ldr	r3, [pc, #32]	; (13b0c <le_data_len_change+0x38>)
   13aea:	4a09      	ldr	r2, [pc, #36]	; (13b10 <le_data_len_change+0x3c>)
   13aec:	1a9b      	subs	r3, r3, r2
   13aee:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13af0:	f04f 0200 	mov.w	r2, #0
   13af4:	2101      	movs	r1, #1
   13af6:	f361 0202 	bfi	r2, r1, #0, #3
   13afa:	f36f 02c5 	bfc	r2, #3, #3
   13afe:	f363 128f 	bfi	r2, r3, #6, #10
   13b02:	4621      	mov	r1, r4
   13b04:	4803      	ldr	r0, [pc, #12]	; (13b14 <le_data_len_change+0x40>)
   13b06:	f7fd fb6d 	bl	111e4 <log_1>
		return;
   13b0a:	e7ec      	b.n	13ae6 <le_data_len_change+0x12>
   13b0c:	00024cf8 	.word	0x00024cf8
   13b10:	00024ca0 	.word	0x00024ca0
   13b14:	00025928 	.word	0x00025928

00013b18 <hci_num_completed_packets>:
{
   13b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   13b1c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   13b20:	2700      	movs	r7, #0
   13b22:	e05c      	b.n	13bde <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   13b24:	3b01      	subs	r3, #1
   13b26:	61e3      	str	r3, [r4, #28]
   13b28:	f382 8811 	msr	BASEPRI, r2
   13b2c:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   13b30:	4620      	mov	r0, r4
   13b32:	f002 fab9 	bl	160a8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   13b36:	f008 f85b 	bl	1bbf0 <z_impl_k_sem_give>
				continue;
   13b3a:	e025      	b.n	13b88 <hci_num_completed_packets+0x70>
	list->tail = node;
   13b3c:	61a1      	str	r1, [r4, #24]
   13b3e:	f382 8811 	msr	BASEPRI, r2
   13b42:	f3bf 8f6f 	isb	sy
			if (!node) {
   13b46:	2b00      	cmp	r3, #0
   13b48:	d036      	beq.n	13bb8 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   13b4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   13b4e:	f3ef 8111 	mrs	r1, BASEPRI
   13b52:	f382 8812 	msr	BASEPRI_MAX, r2
   13b56:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   13b5a:	68da      	ldr	r2, [r3, #12]
   13b5c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   13b5e:	2200      	movs	r2, #0
   13b60:	60da      	str	r2, [r3, #12]
	parent->next = child;
   13b62:	601a      	str	r2, [r3, #0]
	return list->tail;
   13b64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   13b66:	2a00      	cmp	r2, #0
   13b68:	d05a      	beq.n	13c20 <hci_num_completed_packets+0x108>
	parent->next = child;
   13b6a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13b6c:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   13b6e:	f381 8811 	msr	BASEPRI, r1
   13b72:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   13b76:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13b7a:	f008 fa03 	bl	1bf84 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   13b7e:	4620      	mov	r0, r4
   13b80:	f002 fa92 	bl	160a8 <bt_conn_get_pkts>
   13b84:	f008 f834 	bl	1bbf0 <z_impl_k_sem_give>
{
   13b88:	462e      	mov	r6, r5
		while (count--) {
   13b8a:	1e75      	subs	r5, r6, #1
   13b8c:	b2ad      	uxth	r5, r5
   13b8e:	b316      	cbz	r6, 13bd6 <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   13b90:	f04f 0340 	mov.w	r3, #64	; 0x40
   13b94:	f3ef 8211 	mrs	r2, BASEPRI
   13b98:	f383 8812 	msr	BASEPRI_MAX, r3
   13b9c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   13ba0:	69e3      	ldr	r3, [r4, #28]
   13ba2:	2b00      	cmp	r3, #0
   13ba4:	d1be      	bne.n	13b24 <hci_num_completed_packets+0xc>
	return list->head;
   13ba6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13ba8:	2b00      	cmp	r3, #0
   13baa:	d0c8      	beq.n	13b3e <hci_num_completed_packets+0x26>
	return node->next;
   13bac:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   13bae:	6161      	str	r1, [r4, #20]
	return list->tail;
   13bb0:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13bb2:	4298      	cmp	r0, r3
   13bb4:	d1c3      	bne.n	13b3e <hci_num_completed_packets+0x26>
   13bb6:	e7c1      	b.n	13b3c <hci_num_completed_packets+0x24>
   13bb8:	4b1c      	ldr	r3, [pc, #112]	; (13c2c <hci_num_completed_packets+0x114>)
   13bba:	4a1d      	ldr	r2, [pc, #116]	; (13c30 <hci_num_completed_packets+0x118>)
   13bbc:	1a9b      	subs	r3, r3, r2
   13bbe:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   13bc0:	2201      	movs	r2, #1
   13bc2:	f362 0902 	bfi	r9, r2, #0, #3
   13bc6:	f36f 09c5 	bfc	r9, #3, #3
   13bca:	f363 198f 	bfi	r9, r3, #6, #10
   13bce:	4649      	mov	r1, r9
   13bd0:	4818      	ldr	r0, [pc, #96]	; (13c34 <hci_num_completed_packets+0x11c>)
   13bd2:	f7fd fbbd 	bl	11350 <log_0>
		bt_conn_unref(conn);
   13bd6:	4620      	mov	r0, r4
   13bd8:	f00d fc4f 	bl	2147a <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   13bdc:	3701      	adds	r7, #1
   13bde:	f898 3000 	ldrb.w	r3, [r8]
   13be2:	429f      	cmp	r7, r3
   13be4:	da1f      	bge.n	13c26 <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   13be6:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   13bea:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   13bee:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   13bf2:	4628      	mov	r0, r5
   13bf4:	f002 fc2e 	bl	16454 <bt_conn_lookup_handle>
		if (!conn) {
   13bf8:	4604      	mov	r4, r0
   13bfa:	2800      	cmp	r0, #0
   13bfc:	d1c5      	bne.n	13b8a <hci_num_completed_packets+0x72>
   13bfe:	4b0b      	ldr	r3, [pc, #44]	; (13c2c <hci_num_completed_packets+0x114>)
   13c00:	4a0b      	ldr	r2, [pc, #44]	; (13c30 <hci_num_completed_packets+0x118>)
   13c02:	1a9b      	subs	r3, r3, r2
   13c04:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   13c06:	2201      	movs	r2, #1
   13c08:	f362 0a02 	bfi	sl, r2, #0, #3
   13c0c:	f36f 0ac5 	bfc	sl, #3, #3
   13c10:	f363 1a8f 	bfi	sl, r3, #6, #10
   13c14:	4652      	mov	r2, sl
   13c16:	4629      	mov	r1, r5
   13c18:	4807      	ldr	r0, [pc, #28]	; (13c38 <hci_num_completed_packets+0x120>)
   13c1a:	f7fd fae3 	bl	111e4 <log_1>
			continue;
   13c1e:	e7dd      	b.n	13bdc <hci_num_completed_packets+0xc4>
	list->tail = node;
   13c20:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   13c22:	6223      	str	r3, [r4, #32]
}
   13c24:	e7a3      	b.n	13b6e <hci_num_completed_packets+0x56>
}
   13c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c2a:	bf00      	nop
   13c2c:	00024cf8 	.word	0x00024cf8
   13c30:	00024ca0 	.word	0x00024ca0
   13c34:	00025968 	.word	0x00025968
   13c38:	0002594c 	.word	0x0002594c

00013c3c <hci_cmd_done>:
{
   13c3c:	b570      	push	{r4, r5, r6, lr}
   13c3e:	b084      	sub	sp, #16
   13c40:	4605      	mov	r5, r0
   13c42:	460e      	mov	r6, r1
   13c44:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13c46:	7990      	ldrb	r0, [r2, #6]
   13c48:	f005 f8b4 	bl	18db4 <net_buf_pool_get>
   13c4c:	4b55      	ldr	r3, [pc, #340]	; (13da4 <hci_cmd_done+0x168>)
   13c4e:	4283      	cmp	r3, r0
   13c50:	d01c      	beq.n	13c8c <hci_cmd_done+0x50>
   13c52:	4b55      	ldr	r3, [pc, #340]	; (13da8 <hci_cmd_done+0x16c>)
   13c54:	4a55      	ldr	r2, [pc, #340]	; (13dac <hci_cmd_done+0x170>)
   13c56:	1a9b      	subs	r3, r3, r2
   13c58:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   13c5a:	f04f 0600 	mov.w	r6, #0
   13c5e:	2202      	movs	r2, #2
   13c60:	f362 0602 	bfi	r6, r2, #0, #3
   13c64:	f36f 06c5 	bfc	r6, #3, #3
   13c68:	f363 168f 	bfi	r6, r3, #6, #10
   13c6c:	9500      	str	r5, [sp, #0]
   13c6e:	79a0      	ldrb	r0, [r4, #6]
   13c70:	9001      	str	r0, [sp, #4]
   13c72:	f005 f89f 	bl	18db4 <net_buf_pool_get>
   13c76:	9002      	str	r0, [sp, #8]
   13c78:	4b4a      	ldr	r3, [pc, #296]	; (13da4 <hci_cmd_done+0x168>)
   13c7a:	9303      	str	r3, [sp, #12]
   13c7c:	4633      	mov	r3, r6
   13c7e:	2204      	movs	r2, #4
   13c80:	4669      	mov	r1, sp
   13c82:	484b      	ldr	r0, [pc, #300]	; (13db0 <hci_cmd_done+0x174>)
   13c84:	f7fd fb20 	bl	112c8 <log_n>
}
   13c88:	b004      	add	sp, #16
   13c8a:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   13c8c:	4620      	mov	r0, r4
   13c8e:	f00e feb9 	bl	22a04 <net_buf_id>
   13c92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13c96:	4b47      	ldr	r3, [pc, #284]	; (13db4 <hci_cmd_done+0x178>)
   13c98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13c9c:	8843      	ldrh	r3, [r0, #2]
   13c9e:	42ab      	cmp	r3, r5
   13ca0:	d133      	bne.n	13d0a <hci_cmd_done+0xce>
	if (bt_dev.sent_cmd) {
   13ca2:	4b45      	ldr	r3, [pc, #276]	; (13db8 <hci_cmd_done+0x17c>)
   13ca4:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   13ca8:	b128      	cbz	r0, 13cb6 <hci_cmd_done+0x7a>
		net_buf_unref(bt_dev.sent_cmd);
   13caa:	f00e ff91 	bl	22bd0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13cae:	4b42      	ldr	r3, [pc, #264]	; (13db8 <hci_cmd_done+0x17c>)
   13cb0:	2200      	movs	r2, #0
   13cb2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   13cb6:	4620      	mov	r0, r4
   13cb8:	f00e fea4 	bl	22a04 <net_buf_id>
   13cbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13cc0:	4b3c      	ldr	r3, [pc, #240]	; (13db4 <hci_cmd_done+0x178>)
   13cc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13cc6:	6843      	ldr	r3, [r0, #4]
   13cc8:	b10b      	cbz	r3, 13cce <hci_cmd_done+0x92>
   13cca:	2e00      	cmp	r6, #0
   13ccc:	d039      	beq.n	13d42 <hci_cmd_done+0x106>
	if (cmd(buf)->sync) {
   13cce:	4620      	mov	r0, r4
   13cd0:	f00e fe98 	bl	22a04 <net_buf_id>
   13cd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13cd8:	4b36      	ldr	r3, [pc, #216]	; (13db4 <hci_cmd_done+0x178>)
   13cda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13cde:	6883      	ldr	r3, [r0, #8]
   13ce0:	2b00      	cmp	r3, #0
   13ce2:	d0d1      	beq.n	13c88 <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   13ce4:	4620      	mov	r0, r4
   13ce6:	f00e fe8d 	bl	22a04 <net_buf_id>
   13cea:	4d32      	ldr	r5, [pc, #200]	; (13db4 <hci_cmd_done+0x178>)
   13cec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13cf0:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   13cf4:	4620      	mov	r0, r4
   13cf6:	f00e fe85 	bl	22a04 <net_buf_id>
   13cfa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13cfe:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   13d02:	68a8      	ldr	r0, [r5, #8]
   13d04:	f007 ff74 	bl	1bbf0 <z_impl_k_sem_give>
}
   13d08:	e7be      	b.n	13c88 <hci_cmd_done+0x4c>
   13d0a:	4b27      	ldr	r3, [pc, #156]	; (13da8 <hci_cmd_done+0x16c>)
   13d0c:	4a27      	ldr	r2, [pc, #156]	; (13dac <hci_cmd_done+0x170>)
   13d0e:	1a9b      	subs	r3, r3, r2
   13d10:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   13d12:	f04f 0600 	mov.w	r6, #0
   13d16:	2202      	movs	r2, #2
   13d18:	f362 0602 	bfi	r6, r2, #0, #3
   13d1c:	f36f 06c5 	bfc	r6, #3, #3
   13d20:	f363 168f 	bfi	r6, r3, #6, #10
   13d24:	4620      	mov	r0, r4
   13d26:	f00e fe6d 	bl	22a04 <net_buf_id>
   13d2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13d2e:	4b21      	ldr	r3, [pc, #132]	; (13db4 <hci_cmd_done+0x178>)
   13d30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d34:	4633      	mov	r3, r6
   13d36:	8842      	ldrh	r2, [r0, #2]
   13d38:	4629      	mov	r1, r5
   13d3a:	4820      	ldr	r0, [pc, #128]	; (13dbc <hci_cmd_done+0x180>)
   13d3c:	f7fd fa88 	bl	11250 <log_2>
		return;
   13d40:	e7a2      	b.n	13c88 <hci_cmd_done+0x4c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13d42:	4620      	mov	r0, r4
   13d44:	f00e fe5e 	bl	22a04 <net_buf_id>
   13d48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13d4c:	4b19      	ldr	r3, [pc, #100]	; (13db4 <hci_cmd_done+0x178>)
   13d4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d52:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   13d54:	6813      	ldr	r3, [r2, #0]
   13d56:	6851      	ldr	r1, [r2, #4]
   13d58:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13d5a:	f001 051f 	and.w	r5, r1, #31
   13d5e:	2201      	movs	r2, #1
   13d60:	40aa      	lsls	r2, r5

	if (val) {
   13d62:	b170      	cbz	r0, 13d82 <hci_cmd_done+0x146>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13d64:	0949      	lsrs	r1, r1, #5
   13d66:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13d6a:	f3bf 8f5b 	dmb	ish
   13d6e:	e853 1f00 	ldrex	r1, [r3]
   13d72:	4311      	orrs	r1, r2
   13d74:	e843 1000 	strex	r0, r1, [r3]
   13d78:	2800      	cmp	r0, #0
   13d7a:	d1f8      	bne.n	13d6e <hci_cmd_done+0x132>
   13d7c:	f3bf 8f5b 	dmb	ish
   13d80:	e7a5      	b.n	13cce <hci_cmd_done+0x92>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13d82:	0949      	lsrs	r1, r1, #5
   13d84:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13d88:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d8a:	f3bf 8f5b 	dmb	ish
   13d8e:	e853 1f00 	ldrex	r1, [r3]
   13d92:	4011      	ands	r1, r2
   13d94:	e843 1000 	strex	r0, r1, [r3]
   13d98:	2800      	cmp	r0, #0
   13d9a:	d1f8      	bne.n	13d8e <hci_cmd_done+0x152>
   13d9c:	f3bf 8f5b 	dmb	ish
	}
}
   13da0:	e795      	b.n	13cce <hci_cmd_done+0x92>
   13da2:	bf00      	nop
   13da4:	2000084c 	.word	0x2000084c
   13da8:	00024cf8 	.word	0x00024cf8
   13dac:	00024ca0 	.word	0x00024ca0
   13db0:	00025980 	.word	0x00025980
   13db4:	200025e0 	.word	0x200025e0
   13db8:	200002a8 	.word	0x200002a8
   13dbc:	000259b8 	.word	0x000259b8

00013dc0 <hci_cmd_status>:
{
   13dc0:	b538      	push	{r3, r4, r5, lr}
   13dc2:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13dc4:	2104      	movs	r1, #4
   13dc6:	3008      	adds	r0, #8
   13dc8:	f00e ff6d 	bl	22ca6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13dcc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13dce:	4622      	mov	r2, r4
   13dd0:	7801      	ldrb	r1, [r0, #0]
   13dd2:	8840      	ldrh	r0, [r0, #2]
   13dd4:	f7ff ff32 	bl	13c3c <hci_cmd_done>
	if (ncmd) {
   13dd8:	b905      	cbnz	r5, 13ddc <hci_cmd_status+0x1c>
}
   13dda:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   13ddc:	4801      	ldr	r0, [pc, #4]	; (13de4 <hci_cmd_status+0x24>)
   13dde:	f007 ff07 	bl	1bbf0 <z_impl_k_sem_give>
   13de2:	e7fa      	b.n	13dda <hci_cmd_status+0x1a>
   13de4:	200003c0 	.word	0x200003c0

00013de8 <hci_cmd_complete>:
{
   13de8:	b538      	push	{r3, r4, r5, lr}
   13dea:	4604      	mov	r4, r0
   13dec:	2103      	movs	r1, #3
   13dee:	3008      	adds	r0, #8
   13df0:	f00e ff59 	bl	22ca6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13df4:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   13df6:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   13df8:	4622      	mov	r2, r4
   13dfa:	7819      	ldrb	r1, [r3, #0]
   13dfc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13e00:	f7ff ff1c 	bl	13c3c <hci_cmd_done>
	if (ncmd) {
   13e04:	b905      	cbnz	r5, 13e08 <hci_cmd_complete+0x20>
}
   13e06:	bd38      	pop	{r3, r4, r5, pc}
   13e08:	4801      	ldr	r0, [pc, #4]	; (13e10 <hci_cmd_complete+0x28>)
   13e0a:	f007 fef1 	bl	1bbf0 <z_impl_k_sem_give>
   13e0e:	e7fa      	b.n	13e06 <hci_cmd_complete+0x1e>
   13e10:	200003c0 	.word	0x200003c0

00013e14 <hci_hardware_error>:
{
   13e14:	b508      	push	{r3, lr}
   13e16:	2101      	movs	r1, #1
   13e18:	3008      	adds	r0, #8
   13e1a:	f00e ff44 	bl	22ca6 <net_buf_simple_pull_mem>
   13e1e:	4b09      	ldr	r3, [pc, #36]	; (13e44 <hci_hardware_error+0x30>)
   13e20:	4a09      	ldr	r2, [pc, #36]	; (13e48 <hci_hardware_error+0x34>)
   13e22:	1a9b      	subs	r3, r3, r2
   13e24:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   13e26:	f04f 0200 	mov.w	r2, #0
   13e2a:	2101      	movs	r1, #1
   13e2c:	f361 0202 	bfi	r2, r1, #0, #3
   13e30:	f36f 02c5 	bfc	r2, #3, #3
   13e34:	f363 128f 	bfi	r2, r3, #6, #10
   13e38:	7801      	ldrb	r1, [r0, #0]
   13e3a:	4804      	ldr	r0, [pc, #16]	; (13e4c <hci_hardware_error+0x38>)
   13e3c:	f7fd f9d2 	bl	111e4 <log_1>
}
   13e40:	bd08      	pop	{r3, pc}
   13e42:	bf00      	nop
   13e44:	00024cf8 	.word	0x00024cf8
   13e48:	00024ca0 	.word	0x00024ca0
   13e4c:	000259ec 	.word	0x000259ec

00013e50 <hci_vendor_event>:
{
   13e50:	b510      	push	{r4, lr}
   13e52:	4b0c      	ldr	r3, [pc, #48]	; (13e84 <hci_vendor_event+0x34>)
   13e54:	4a0c      	ldr	r2, [pc, #48]	; (13e88 <hci_vendor_event+0x38>)
   13e56:	1a9b      	subs	r3, r3, r2
   13e58:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   13e5a:	f04f 0400 	mov.w	r4, #0
   13e5e:	2202      	movs	r2, #2
   13e60:	f362 0402 	bfi	r4, r2, #0, #3
   13e64:	f36f 04c5 	bfc	r4, #3, #3
   13e68:	f363 148f 	bfi	r4, r3, #6, #10
   13e6c:	8981      	ldrh	r1, [r0, #12]
   13e6e:	6880      	ldr	r0, [r0, #8]
   13e70:	f7ff fb58 	bl	13524 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   13e74:	f7fd f83e 	bl	10ef4 <z_log_strdup>
   13e78:	4601      	mov	r1, r0
   13e7a:	4622      	mov	r2, r4
   13e7c:	4803      	ldr	r0, [pc, #12]	; (13e8c <hci_vendor_event+0x3c>)
   13e7e:	f7fd f9b1 	bl	111e4 <log_1>
}
   13e82:	bd10      	pop	{r4, pc}
   13e84:	00024cf8 	.word	0x00024cf8
   13e88:	00024ca0 	.word	0x00024ca0
   13e8c:	00025a10 	.word	0x00025a10

00013e90 <hci_acl>:
{
   13e90:	b570      	push	{r4, r5, r6, lr}
   13e92:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13e94:	8983      	ldrh	r3, [r0, #12]
   13e96:	2b03      	cmp	r3, #3
   13e98:	d923      	bls.n	13ee2 <hci_acl+0x52>
   13e9a:	2104      	movs	r1, #4
   13e9c:	f104 0008 	add.w	r0, r4, #8
   13ea0:	f00e ff01 	bl	22ca6 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   13ea4:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13ea6:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   13ea8:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   13eaa:	f3c0 000b 	ubfx	r0, r0, #0, #12
   13eae:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13eb0:	23ff      	movs	r3, #255	; 0xff
   13eb2:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   13eb4:	89a1      	ldrh	r1, [r4, #12]
   13eb6:	4291      	cmp	r1, r2
   13eb8:	d021      	beq.n	13efe <hci_acl+0x6e>
   13eba:	4823      	ldr	r0, [pc, #140]	; (13f48 <hci_acl+0xb8>)
   13ebc:	4b23      	ldr	r3, [pc, #140]	; (13f4c <hci_acl+0xbc>)
   13ebe:	1ac0      	subs	r0, r0, r3
   13ec0:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   13ec2:	f04f 0300 	mov.w	r3, #0
   13ec6:	2501      	movs	r5, #1
   13ec8:	f365 0302 	bfi	r3, r5, #0, #3
   13ecc:	f36f 03c5 	bfc	r3, #3, #3
   13ed0:	f360 138f 	bfi	r3, r0, #6, #10
   13ed4:	481e      	ldr	r0, [pc, #120]	; (13f50 <hci_acl+0xc0>)
   13ed6:	f7fd f9bb 	bl	11250 <log_2>
		net_buf_unref(buf);
   13eda:	4620      	mov	r0, r4
   13edc:	f00e fe78 	bl	22bd0 <net_buf_unref>
}
   13ee0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13ee2:	f240 13b5 	movw	r3, #437	; 0x1b5
   13ee6:	4a1b      	ldr	r2, [pc, #108]	; (13f54 <hci_acl+0xc4>)
   13ee8:	491b      	ldr	r1, [pc, #108]	; (13f58 <hci_acl+0xc8>)
   13eea:	481c      	ldr	r0, [pc, #112]	; (13f5c <hci_acl+0xcc>)
   13eec:	f00b fed1 	bl	1fc92 <printk>
   13ef0:	4040      	eors	r0, r0
   13ef2:	f380 8811 	msr	BASEPRI, r0
   13ef6:	f04f 0003 	mov.w	r0, #3
   13efa:	df02      	svc	2
   13efc:	e7cd      	b.n	13e9a <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13efe:	f002 faa9 	bl	16454 <bt_conn_lookup_handle>
	if (!conn) {
   13f02:	4605      	mov	r5, r0
   13f04:	b158      	cbz	r0, 13f1e <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   13f06:	f002 fbd5 	bl	166b4 <bt_conn_index>
   13f0a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   13f0c:	4632      	mov	r2, r6
   13f0e:	4621      	mov	r1, r4
   13f10:	4628      	mov	r0, r5
   13f12:	f00d fa7f 	bl	21414 <bt_conn_recv>
	bt_conn_unref(conn);
   13f16:	4628      	mov	r0, r5
   13f18:	f00d faaf 	bl	2147a <bt_conn_unref>
   13f1c:	e7e0      	b.n	13ee0 <hci_acl+0x50>
   13f1e:	4b0a      	ldr	r3, [pc, #40]	; (13f48 <hci_acl+0xb8>)
   13f20:	4a0a      	ldr	r2, [pc, #40]	; (13f4c <hci_acl+0xbc>)
   13f22:	1a9b      	subs	r3, r3, r2
   13f24:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   13f26:	f04f 0200 	mov.w	r2, #0
   13f2a:	2101      	movs	r1, #1
   13f2c:	f361 0202 	bfi	r2, r1, #0, #3
   13f30:	f36f 02c5 	bfc	r2, #3, #3
   13f34:	f363 128f 	bfi	r2, r3, #6, #10
   13f38:	8ae1      	ldrh	r1, [r4, #22]
   13f3a:	4809      	ldr	r0, [pc, #36]	; (13f60 <hci_acl+0xd0>)
   13f3c:	f7fd f952 	bl	111e4 <log_1>
		net_buf_unref(buf);
   13f40:	4620      	mov	r0, r4
   13f42:	f00e fe45 	bl	22bd0 <net_buf_unref>
		return;
   13f46:	e7cb      	b.n	13ee0 <hci_acl+0x50>
   13f48:	00024cf8 	.word	0x00024cf8
   13f4c:	00024ca0 	.word	0x00024ca0
   13f50:	00025aa4 	.word	0x00025aa4
   13f54:	00025a34 	.word	0x00025a34
   13f58:	00025a68 	.word	0x00025a68
   13f5c:	00025a84 	.word	0x00025a84
   13f60:	00025ac8 	.word	0x00025ac8

00013f64 <le_conn_update_complete>:
{
   13f64:	b570      	push	{r4, r5, r6, lr}
   13f66:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   13f68:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   13f6a:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   13f6e:	4630      	mov	r0, r6
   13f70:	f002 fa70 	bl	16454 <bt_conn_lookup_handle>
	if (!conn) {
   13f74:	b148      	cbz	r0, 13f8a <le_conn_update_complete+0x26>
   13f76:	4605      	mov	r5, r0
	if (!evt->status) {
   13f78:	7823      	ldrb	r3, [r4, #0]
   13f7a:	b1c3      	cbz	r3, 13fae <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   13f7c:	2b1a      	cmp	r3, #26
   13f7e:	d025      	beq.n	13fcc <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   13f80:	4628      	mov	r0, r5
   13f82:	f00d fa7a 	bl	2147a <bt_conn_unref>
}
   13f86:	b002      	add	sp, #8
   13f88:	bd70      	pop	{r4, r5, r6, pc}
   13f8a:	4b24      	ldr	r3, [pc, #144]	; (1401c <le_conn_update_complete+0xb8>)
   13f8c:	4a24      	ldr	r2, [pc, #144]	; (14020 <le_conn_update_complete+0xbc>)
   13f8e:	1a9b      	subs	r3, r3, r2
   13f90:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13f92:	f04f 0200 	mov.w	r2, #0
   13f96:	2101      	movs	r1, #1
   13f98:	f361 0202 	bfi	r2, r1, #0, #3
   13f9c:	f36f 02c5 	bfc	r2, #3, #3
   13fa0:	f363 128f 	bfi	r2, r3, #6, #10
   13fa4:	4631      	mov	r1, r6
   13fa6:	481f      	ldr	r0, [pc, #124]	; (14024 <le_conn_update_complete+0xc0>)
   13fa8:	f7fd f91c 	bl	111e4 <log_1>
		return;
   13fac:	e7eb      	b.n	13f86 <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   13fae:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   13fb2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   13fb6:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   13fba:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13fbe:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13fc2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   13fc6:	f002 fbab 	bl	16720 <notify_le_param_updated>
   13fca:	e7d9      	b.n	13f80 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   13fcc:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   13fce:	2b01      	cmp	r3, #1
   13fd0:	d1d6      	bne.n	13f80 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   13fd2:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13fd4:	f3bf 8f5b 	dmb	ish
   13fd8:	e853 2f00 	ldrex	r2, [r3]
   13fdc:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   13fe0:	e843 1000 	strex	r0, r1, [r3]
   13fe4:	2800      	cmp	r0, #0
   13fe6:	d1f7      	bne.n	13fd8 <le_conn_update_complete+0x74>
   13fe8:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   13fec:	f412 6f80 	tst.w	r2, #1024	; 0x400
   13ff0:	d1c6      	bne.n	13f80 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   13ff2:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   13ff6:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   13ffa:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   13ffe:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   14002:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   14006:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   1400a:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   1400e:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   14012:	4669      	mov	r1, sp
   14014:	4628      	mov	r0, r5
   14016:	f00d fb87 	bl	21728 <bt_l2cap_update_conn_param>
   1401a:	e7b1      	b.n	13f80 <le_conn_update_complete+0x1c>
   1401c:	00024cf8 	.word	0x00024cf8
   14020:	00024ca0 	.word	0x00024ca0
   14024:	00025928 	.word	0x00025928

00014028 <hci_le_meta_event>:
{
   14028:	b5f0      	push	{r4, r5, r6, r7, lr}
   1402a:	b083      	sub	sp, #12
   1402c:	4604      	mov	r4, r0
   1402e:	2101      	movs	r1, #1
   14030:	3008      	adds	r0, #8
   14032:	f00e fe38 	bl	22ca6 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14036:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   14038:	2300      	movs	r3, #0
   1403a:	2b07      	cmp	r3, #7
   1403c:	d823      	bhi.n	14086 <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   1403e:	4a20      	ldr	r2, [pc, #128]	; (140c0 <hci_le_meta_event+0x98>)
   14040:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   14044:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14048:	4295      	cmp	r5, r2
   1404a:	d108      	bne.n	1405e <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   1404c:	89a1      	ldrh	r1, [r4, #12]
   1404e:	7843      	ldrb	r3, [r0, #1]
   14050:	4299      	cmp	r1, r3
   14052:	d306      	bcc.n	14062 <hci_le_meta_event+0x3a>
		handler->handler(buf);
   14054:	6843      	ldr	r3, [r0, #4]
   14056:	4620      	mov	r0, r4
   14058:	4798      	blx	r3
}
   1405a:	b003      	add	sp, #12
   1405c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   1405e:	3301      	adds	r3, #1
   14060:	e7eb      	b.n	1403a <hci_le_meta_event+0x12>
   14062:	4a18      	ldr	r2, [pc, #96]	; (140c4 <hci_le_meta_event+0x9c>)
   14064:	4b18      	ldr	r3, [pc, #96]	; (140c8 <hci_le_meta_event+0xa0>)
   14066:	1ad2      	subs	r2, r2, r3
   14068:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1406a:	f04f 0300 	mov.w	r3, #0
   1406e:	2001      	movs	r0, #1
   14070:	f360 0302 	bfi	r3, r0, #0, #3
   14074:	f36f 03c5 	bfc	r3, #3, #3
   14078:	f362 138f 	bfi	r3, r2, #6, #10
   1407c:	462a      	mov	r2, r5
   1407e:	4813      	ldr	r0, [pc, #76]	; (140cc <hci_le_meta_event+0xa4>)
   14080:	f7fd f8e6 	bl	11250 <log_2>
			return;
   14084:	e7e9      	b.n	1405a <hci_le_meta_event+0x32>
   14086:	4b0f      	ldr	r3, [pc, #60]	; (140c4 <hci_le_meta_event+0x9c>)
   14088:	4a0f      	ldr	r2, [pc, #60]	; (140c8 <hci_le_meta_event+0xa0>)
   1408a:	1a9b      	subs	r3, r3, r2
   1408c:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   1408e:	f04f 0600 	mov.w	r6, #0
   14092:	2202      	movs	r2, #2
   14094:	f362 0602 	bfi	r6, r2, #0, #3
   14098:	f36f 06c5 	bfc	r6, #3, #3
   1409c:	f363 168f 	bfi	r6, r3, #6, #10
   140a0:	89a7      	ldrh	r7, [r4, #12]
   140a2:	4639      	mov	r1, r7
   140a4:	68a0      	ldr	r0, [r4, #8]
   140a6:	f7ff fa3d 	bl	13524 <bt_hex_real>
   140aa:	f7fc ff23 	bl	10ef4 <z_log_strdup>
   140ae:	4603      	mov	r3, r0
   140b0:	f8ad 6000 	strh.w	r6, [sp]
   140b4:	463a      	mov	r2, r7
   140b6:	4629      	mov	r1, r5
   140b8:	4805      	ldr	r0, [pc, #20]	; (140d0 <hci_le_meta_event+0xa8>)
   140ba:	f7fd f855 	bl	11168 <log_3>
}
   140be:	e7cc      	b.n	1405a <hci_le_meta_event+0x32>
   140c0:	00025e6c 	.word	0x00025e6c
   140c4:	00024cf8 	.word	0x00024cf8
   140c8:	00024ca0 	.word	0x00024ca0
   140cc:	00025aec 	.word	0x00025aec
   140d0:	00025b10 	.word	0x00025b10

000140d4 <hci_event>:
{
   140d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   140d6:	b083      	sub	sp, #12
   140d8:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   140da:	8983      	ldrh	r3, [r0, #12]
   140dc:	2b01      	cmp	r3, #1
   140de:	d916      	bls.n	1410e <hci_event+0x3a>
   140e0:	2102      	movs	r1, #2
   140e2:	f104 0008 	add.w	r0, r4, #8
   140e6:	f00e fdde 	bl	22ca6 <net_buf_simple_pull_mem>
   140ea:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   140ec:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   140ee:	3b05      	subs	r3, #5
   140f0:	2b15      	cmp	r3, #21
   140f2:	d81c      	bhi.n	1412e <hci_event+0x5a>
   140f4:	e8df f003 	tbb	[pc, r3]
   140f8:	1b1b1b19 	.word	0x1b1b1b19
   140fc:	1b1b1b1b 	.word	0x1b1b1b1b
   14100:	1b36361b 	.word	0x1b36361b
   14104:	1b361b1b 	.word	0x1b361b1b
   14108:	1b1b1b1b 	.word	0x1b1b1b1b
   1410c:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1410e:	f640 1317 	movw	r3, #2327	; 0x917
   14112:	4a35      	ldr	r2, [pc, #212]	; (141e8 <hci_event+0x114>)
   14114:	4935      	ldr	r1, [pc, #212]	; (141ec <hci_event+0x118>)
   14116:	4836      	ldr	r0, [pc, #216]	; (141f0 <hci_event+0x11c>)
   14118:	f00b fdbb 	bl	1fc92 <printk>
   1411c:	4040      	eors	r0, r0
   1411e:	f380 8811 	msr	BASEPRI, r0
   14122:	f04f 0003 	mov.w	r0, #3
   14126:	df02      	svc	2
   14128:	e7da      	b.n	140e0 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1412a:	2303      	movs	r3, #3
   1412c:	e000      	b.n	14130 <hci_event+0x5c>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1412e:	2302      	movs	r3, #2
   14130:	f013 0f02 	tst.w	r3, #2
   14134:	d018      	beq.n	14168 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14136:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   14138:	2300      	movs	r3, #0
   1413a:	2b03      	cmp	r3, #3
   1413c:	d836      	bhi.n	141ac <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   1413e:	4a2d      	ldr	r2, [pc, #180]	; (141f4 <hci_event+0x120>)
   14140:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   14144:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14148:	4295      	cmp	r5, r2
   1414a:	d11b      	bne.n	14184 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   1414c:	89a1      	ldrh	r1, [r4, #12]
   1414e:	7843      	ldrb	r3, [r0, #1]
   14150:	4299      	cmp	r1, r3
   14152:	d319      	bcc.n	14188 <hci_event+0xb4>
		handler->handler(buf);
   14154:	6843      	ldr	r3, [r0, #4]
   14156:	4620      	mov	r0, r4
   14158:	4798      	blx	r3
	net_buf_unref(buf);
   1415a:	4620      	mov	r0, r4
   1415c:	f00e fd38 	bl	22bd0 <net_buf_unref>
}
   14160:	b003      	add	sp, #12
   14162:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   14164:	2301      	movs	r3, #1
   14166:	e7e3      	b.n	14130 <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14168:	f640 131b 	movw	r3, #2331	; 0x91b
   1416c:	4a1e      	ldr	r2, [pc, #120]	; (141e8 <hci_event+0x114>)
   1416e:	4922      	ldr	r1, [pc, #136]	; (141f8 <hci_event+0x124>)
   14170:	481f      	ldr	r0, [pc, #124]	; (141f0 <hci_event+0x11c>)
   14172:	f00b fd8e 	bl	1fc92 <printk>
   14176:	4040      	eors	r0, r0
   14178:	f380 8811 	msr	BASEPRI, r0
   1417c:	f04f 0003 	mov.w	r0, #3
   14180:	df02      	svc	2
   14182:	e7d8      	b.n	14136 <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   14184:	3301      	adds	r3, #1
   14186:	e7d8      	b.n	1413a <hci_event+0x66>
   14188:	4a1c      	ldr	r2, [pc, #112]	; (141fc <hci_event+0x128>)
   1418a:	4b1d      	ldr	r3, [pc, #116]	; (14200 <hci_event+0x12c>)
   1418c:	1ad2      	subs	r2, r2, r3
   1418e:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14190:	f04f 0300 	mov.w	r3, #0
   14194:	2001      	movs	r0, #1
   14196:	f360 0302 	bfi	r3, r0, #0, #3
   1419a:	f36f 03c5 	bfc	r3, #3, #3
   1419e:	f362 138f 	bfi	r3, r2, #6, #10
   141a2:	462a      	mov	r2, r5
   141a4:	4817      	ldr	r0, [pc, #92]	; (14204 <hci_event+0x130>)
   141a6:	f7fd f853 	bl	11250 <log_2>
			return;
   141aa:	e7d6      	b.n	1415a <hci_event+0x86>
   141ac:	4b13      	ldr	r3, [pc, #76]	; (141fc <hci_event+0x128>)
   141ae:	4a14      	ldr	r2, [pc, #80]	; (14200 <hci_event+0x12c>)
   141b0:	1a9b      	subs	r3, r3, r2
   141b2:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   141b4:	f04f 0600 	mov.w	r6, #0
   141b8:	2202      	movs	r2, #2
   141ba:	f362 0602 	bfi	r6, r2, #0, #3
   141be:	f36f 06c5 	bfc	r6, #3, #3
   141c2:	f363 168f 	bfi	r6, r3, #6, #10
   141c6:	89a7      	ldrh	r7, [r4, #12]
   141c8:	4639      	mov	r1, r7
   141ca:	68a0      	ldr	r0, [r4, #8]
   141cc:	f7ff f9aa 	bl	13524 <bt_hex_real>
   141d0:	f7fc fe90 	bl	10ef4 <z_log_strdup>
   141d4:	4603      	mov	r3, r0
   141d6:	f8ad 6000 	strh.w	r6, [sp]
   141da:	463a      	mov	r2, r7
   141dc:	4629      	mov	r1, r5
   141de:	480a      	ldr	r0, [pc, #40]	; (14208 <hci_event+0x134>)
   141e0:	f7fc ffc2 	bl	11168 <log_3>
   141e4:	e7b9      	b.n	1415a <hci_event+0x86>
   141e6:	bf00      	nop
   141e8:	00025a34 	.word	0x00025a34
   141ec:	00025a68 	.word	0x00025a68
   141f0:	00025a84 	.word	0x00025a84
   141f4:	00025ebc 	.word	0x00025ebc
   141f8:	00025b34 	.word	0x00025b34
   141fc:	00024cf8 	.word	0x00024cf8
   14200:	00024ca0 	.word	0x00024ca0
   14204:	00025aec 	.word	0x00025aec
   14208:	00025b10 	.word	0x00025b10

0001420c <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   1420c:	b538      	push	{r3, r4, r5, lr}
   1420e:	e003      	b.n	14218 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   14210:	f7ff ff60 	bl	140d4 <hci_event>
	z_impl_k_yield();
   14214:	f008 fa08 	bl	1c628 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14218:	f04f 32ff 	mov.w	r2, #4294967295
   1421c:	f04f 33ff 	mov.w	r3, #4294967295
   14220:	480f      	ldr	r0, [pc, #60]	; (14260 <hci_rx_thread+0x54>)
   14222:	f00e fca9 	bl	22b78 <net_buf_get>
   14226:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14228:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   1422a:	2901      	cmp	r1, #1
   1422c:	d0f0      	beq.n	14210 <hci_rx_thread+0x4>
   1422e:	2903      	cmp	r1, #3
   14230:	d102      	bne.n	14238 <hci_rx_thread+0x2c>
			hci_acl(buf);
   14232:	f7ff fe2d 	bl	13e90 <hci_acl>
			break;
   14236:	e7ed      	b.n	14214 <hci_rx_thread+0x8>
   14238:	4b0a      	ldr	r3, [pc, #40]	; (14264 <hci_rx_thread+0x58>)
   1423a:	4a0b      	ldr	r2, [pc, #44]	; (14268 <hci_rx_thread+0x5c>)
   1423c:	1a9b      	subs	r3, r3, r2
   1423e:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14240:	2201      	movs	r2, #1
   14242:	f362 0502 	bfi	r5, r2, #0, #3
   14246:	f36f 05c5 	bfc	r5, #3, #3
   1424a:	f363 158f 	bfi	r5, r3, #6, #10
   1424e:	462a      	mov	r2, r5
   14250:	4806      	ldr	r0, [pc, #24]	; (1426c <hci_rx_thread+0x60>)
   14252:	f7fc ffc7 	bl	111e4 <log_1>
			net_buf_unref(buf);
   14256:	4620      	mov	r0, r4
   14258:	f00e fcba 	bl	22bd0 <net_buf_unref>
			break;
   1425c:	e7da      	b.n	14214 <hci_rx_thread+0x8>
   1425e:	bf00      	nop
   14260:	200003dc 	.word	0x200003dc
   14264:	00024cf8 	.word	0x00024cf8
   14268:	00024ca0 	.word	0x00024ca0
   1426c:	00025b64 	.word	0x00025b64

00014270 <bt_hci_cmd_state_set_init>:
{
   14270:	b510      	push	{r4, lr}
   14272:	460c      	mov	r4, r1
	state->target = target;
   14274:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   14276:	604b      	str	r3, [r1, #4]
	state->val = val;
   14278:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1427c:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   1427e:	f00e fbc1 	bl	22a04 <net_buf_id>
   14282:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14286:	4b02      	ldr	r3, [pc, #8]	; (14290 <bt_hci_cmd_state_set_init+0x20>)
   14288:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1428c:	6044      	str	r4, [r0, #4]
}
   1428e:	bd10      	pop	{r4, pc}
   14290:	200025e0 	.word	0x200025e0

00014294 <bt_hci_cmd_create>:
{
   14294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14298:	4682      	mov	sl, r0
   1429a:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   1429c:	f04f 32ff 	mov.w	r2, #4294967295
   142a0:	f04f 33ff 	mov.w	r3, #4294967295
   142a4:	4817      	ldr	r0, [pc, #92]	; (14304 <bt_hci_cmd_create+0x70>)
   142a6:	f00e fc60 	bl	22b6a <net_buf_alloc_fixed>
   142aa:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   142ac:	f100 0808 	add.w	r8, r0, #8
   142b0:	2100      	movs	r1, #0
   142b2:	4640      	mov	r0, r8
   142b4:	f00e fc7b 	bl	22bae <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   142b8:	2700      	movs	r7, #0
   142ba:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   142bc:	4620      	mov	r0, r4
   142be:	f00e fba1 	bl	22a04 <net_buf_id>
   142c2:	4d11      	ldr	r5, [pc, #68]	; (14308 <bt_hci_cmd_create+0x74>)
   142c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   142c8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   142cc:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   142d0:	4620      	mov	r0, r4
   142d2:	f00e fb97 	bl	22a04 <net_buf_id>
   142d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   142da:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   142de:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   142e0:	4620      	mov	r0, r4
   142e2:	f00e fb8f 	bl	22a04 <net_buf_id>
   142e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   142ea:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   142ee:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   142f0:	2103      	movs	r1, #3
   142f2:	4640      	mov	r0, r8
   142f4:	f00e fcb6 	bl	22c64 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   142f8:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   142fc:	7086      	strb	r6, [r0, #2]
}
   142fe:	4620      	mov	r0, r4
   14300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14304:	2000084c 	.word	0x2000084c
   14308:	200025e0 	.word	0x200025e0

0001430c <bt_hci_cmd_send_sync>:
{
   1430c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1430e:	b087      	sub	sp, #28
   14310:	4606      	mov	r6, r0
   14312:	4615      	mov	r5, r2
	if (!buf) {
   14314:	460c      	mov	r4, r1
   14316:	b361      	cbz	r1, 14372 <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14318:	2201      	movs	r2, #1
   1431a:	2100      	movs	r1, #0
   1431c:	4668      	mov	r0, sp
   1431e:	f00f fe72 	bl	24006 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14322:	4620      	mov	r0, r4
   14324:	f00e fb6e 	bl	22a04 <net_buf_id>
   14328:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1432c:	4b2f      	ldr	r3, [pc, #188]	; (143ec <bt_hci_cmd_send_sync+0xe0>)
   1432e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14332:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14336:	4620      	mov	r0, r4
   14338:	f00e fc70 	bl	22c1c <net_buf_ref>
   1433c:	4601      	mov	r1, r0
   1433e:	482c      	ldr	r0, [pc, #176]	; (143f0 <bt_hci_cmd_send_sync+0xe4>)
   14340:	f00e fc39 	bl	22bb6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14344:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14348:	2300      	movs	r3, #0
   1434a:	4668      	mov	r0, sp
   1434c:	f007 fc78 	bl	1bc40 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14350:	4607      	mov	r7, r0
   14352:	b9b0      	cbnz	r0, 14382 <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   14354:	4620      	mov	r0, r4
   14356:	f00e fb55 	bl	22a04 <net_buf_id>
   1435a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1435e:	4b23      	ldr	r3, [pc, #140]	; (143ec <bt_hci_cmd_send_sync+0xe0>)
   14360:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   14364:	b9ff      	cbnz	r7, 143a6 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   14366:	2d00      	cmp	r5, #0
   14368:	d03a      	beq.n	143e0 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   1436a:	602c      	str	r4, [r5, #0]
	return 0;
   1436c:	2000      	movs	r0, #0
}
   1436e:	b007      	add	sp, #28
   14370:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   14372:	f7ff ff8f 	bl	14294 <bt_hci_cmd_create>
		if (!buf) {
   14376:	4604      	mov	r4, r0
   14378:	2800      	cmp	r0, #0
   1437a:	d1cd      	bne.n	14318 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   1437c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14380:	e7f5      	b.n	1436e <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14382:	f240 1331 	movw	r3, #305	; 0x131
   14386:	4a1b      	ldr	r2, [pc, #108]	; (143f4 <bt_hci_cmd_send_sync+0xe8>)
   14388:	491b      	ldr	r1, [pc, #108]	; (143f8 <bt_hci_cmd_send_sync+0xec>)
   1438a:	481c      	ldr	r0, [pc, #112]	; (143fc <bt_hci_cmd_send_sync+0xf0>)
   1438c:	f00b fc81 	bl	1fc92 <printk>
   14390:	4639      	mov	r1, r7
   14392:	481b      	ldr	r0, [pc, #108]	; (14400 <bt_hci_cmd_send_sync+0xf4>)
   14394:	f00b fc7d 	bl	1fc92 <printk>
   14398:	4040      	eors	r0, r0
   1439a:	f380 8811 	msr	BASEPRI, r0
   1439e:	f04f 0003 	mov.w	r0, #3
   143a2:	df02      	svc	2
   143a4:	e7d6      	b.n	14354 <bt_hci_cmd_send_sync+0x48>
   143a6:	4a17      	ldr	r2, [pc, #92]	; (14404 <bt_hci_cmd_send_sync+0xf8>)
   143a8:	4b17      	ldr	r3, [pc, #92]	; (14408 <bt_hci_cmd_send_sync+0xfc>)
   143aa:	1ad2      	subs	r2, r2, r3
   143ac:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   143ae:	f04f 0300 	mov.w	r3, #0
   143b2:	2102      	movs	r1, #2
   143b4:	f361 0302 	bfi	r3, r1, #0, #3
   143b8:	f36f 03c5 	bfc	r3, #3, #3
   143bc:	f362 138f 	bfi	r3, r2, #6, #10
   143c0:	463a      	mov	r2, r7
   143c2:	4631      	mov	r1, r6
   143c4:	4811      	ldr	r0, [pc, #68]	; (1440c <bt_hci_cmd_send_sync+0x100>)
   143c6:	f7fc ff43 	bl	11250 <log_2>
		net_buf_unref(buf);
   143ca:	4620      	mov	r0, r4
   143cc:	f00e fc00 	bl	22bd0 <net_buf_unref>
		switch (status) {
   143d0:	2f09      	cmp	r7, #9
   143d2:	d002      	beq.n	143da <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   143d4:	f06f 0004 	mvn.w	r0, #4
   143d8:	e7c9      	b.n	1436e <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   143da:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   143de:	e7c6      	b.n	1436e <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   143e0:	4620      	mov	r0, r4
   143e2:	f00e fbf5 	bl	22bd0 <net_buf_unref>
	return 0;
   143e6:	2000      	movs	r0, #0
   143e8:	e7c1      	b.n	1436e <bt_hci_cmd_send_sync+0x62>
   143ea:	bf00      	nop
   143ec:	200025e0 	.word	0x200025e0
   143f0:	200003f4 	.word	0x200003f4
   143f4:	00025a34 	.word	0x00025a34
   143f8:	00025b78 	.word	0x00025b78
   143fc:	00025a84 	.word	0x00025a84
   14400:	00025b84 	.word	0x00025b84
   14404:	00024cf8 	.word	0x00024cf8
   14408:	00024ca0 	.word	0x00024ca0
   1440c:	00025ba4 	.word	0x00025ba4

00014410 <common_init>:
{
   14410:	b510      	push	{r4, lr}
   14412:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14414:	4b22      	ldr	r3, [pc, #136]	; (144a0 <common_init+0x90>)
   14416:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1441a:	689b      	ldr	r3, [r3, #8]
   1441c:	f013 0f01 	tst.w	r3, #1
   14420:	d10d      	bne.n	1443e <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14422:	aa01      	add	r2, sp, #4
   14424:	2100      	movs	r1, #0
   14426:	f640 4003 	movw	r0, #3075	; 0xc03
   1442a:	f7ff ff6f 	bl	1430c <bt_hci_cmd_send_sync>
		if (err) {
   1442e:	4604      	mov	r4, r0
   14430:	b968      	cbnz	r0, 1444e <common_init+0x3e>
		hci_reset_complete(rsp);
   14432:	9801      	ldr	r0, [sp, #4]
   14434:	f7ff fa9c 	bl	13970 <hci_reset_complete>
		net_buf_unref(rsp);
   14438:	9801      	ldr	r0, [sp, #4]
   1443a:	f00e fbc9 	bl	22bd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1443e:	aa01      	add	r2, sp, #4
   14440:	2100      	movs	r1, #0
   14442:	f241 0003 	movw	r0, #4099	; 0x1003
   14446:	f7ff ff61 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   1444a:	4604      	mov	r4, r0
   1444c:	b110      	cbz	r0, 14454 <common_init+0x44>
}
   1444e:	4620      	mov	r0, r4
   14450:	b002      	add	sp, #8
   14452:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   14454:	9801      	ldr	r0, [sp, #4]
   14456:	f7ff fa63 	bl	13920 <read_local_features_complete>
	net_buf_unref(rsp);
   1445a:	9801      	ldr	r0, [sp, #4]
   1445c:	f00e fbb8 	bl	22bd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14460:	aa01      	add	r2, sp, #4
   14462:	2100      	movs	r1, #0
   14464:	f241 0001 	movw	r0, #4097	; 0x1001
   14468:	f7ff ff50 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   1446c:	4604      	mov	r4, r0
   1446e:	2800      	cmp	r0, #0
   14470:	d1ed      	bne.n	1444e <common_init+0x3e>
	read_local_ver_complete(rsp);
   14472:	9801      	ldr	r0, [sp, #4]
   14474:	f7ff fa20 	bl	138b8 <read_local_ver_complete>
	net_buf_unref(rsp);
   14478:	9801      	ldr	r0, [sp, #4]
   1447a:	f00e fba9 	bl	22bd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1447e:	aa01      	add	r2, sp, #4
   14480:	2100      	movs	r1, #0
   14482:	f241 0002 	movw	r0, #4098	; 0x1002
   14486:	f7ff ff41 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   1448a:	4604      	mov	r4, r0
   1448c:	2800      	cmp	r0, #0
   1448e:	d1de      	bne.n	1444e <common_init+0x3e>
	read_supported_commands_complete(rsp);
   14490:	9801      	ldr	r0, [sp, #4]
   14492:	f7ff fa31 	bl	138f8 <read_supported_commands_complete>
	net_buf_unref(rsp);
   14496:	9801      	ldr	r0, [sp, #4]
   14498:	f00e fb9a 	bl	22bd0 <net_buf_unref>
	return 0;
   1449c:	e7d7      	b.n	1444e <common_init+0x3e>
   1449e:	bf00      	nop
   144a0:	200002a8 	.word	0x200002a8

000144a4 <hci_le_read_max_data_len>:
{
   144a4:	b570      	push	{r4, r5, r6, lr}
   144a6:	b082      	sub	sp, #8
   144a8:	4605      	mov	r5, r0
   144aa:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   144ac:	aa01      	add	r2, sp, #4
   144ae:	2100      	movs	r1, #0
   144b0:	f242 002f 	movw	r0, #8239	; 0x202f
   144b4:	f7ff ff2a 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   144b8:	4606      	mov	r6, r0
   144ba:	b960      	cbnz	r0, 144d6 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   144bc:	9801      	ldr	r0, [sp, #4]
   144be:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   144c0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   144c4:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   144c6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   144ca:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   144cc:	f00e fb80 	bl	22bd0 <net_buf_unref>
}
   144d0:	4630      	mov	r0, r6
   144d2:	b002      	add	sp, #8
   144d4:	bd70      	pop	{r4, r5, r6, pc}
   144d6:	4b08      	ldr	r3, [pc, #32]	; (144f8 <hci_le_read_max_data_len+0x54>)
   144d8:	4a08      	ldr	r2, [pc, #32]	; (144fc <hci_le_read_max_data_len+0x58>)
   144da:	1a9b      	subs	r3, r3, r2
   144dc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
   144de:	f04f 0100 	mov.w	r1, #0
   144e2:	2201      	movs	r2, #1
   144e4:	f362 0102 	bfi	r1, r2, #0, #3
   144e8:	f36f 01c5 	bfc	r1, #3, #3
   144ec:	f363 118f 	bfi	r1, r3, #6, #10
   144f0:	4803      	ldr	r0, [pc, #12]	; (14500 <hci_le_read_max_data_len+0x5c>)
   144f2:	f7fc ff2d 	bl	11350 <log_0>
		return err;
   144f6:	e7eb      	b.n	144d0 <hci_le_read_max_data_len+0x2c>
   144f8:	00024cf8 	.word	0x00024cf8
   144fc:	00024ca0 	.word	0x00024ca0
   14500:	00025bc0 	.word	0x00025bc0

00014504 <le_set_event_mask>:
{
   14504:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14506:	2108      	movs	r1, #8
   14508:	f242 0001 	movw	r0, #8193	; 0x2001
   1450c:	f7ff fec2 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   14510:	b398      	cbz	r0, 1457a <le_set_event_mask+0x76>
   14512:	4604      	mov	r4, r0
   14514:	2108      	movs	r1, #8
   14516:	4408      	add	r0, r1
   14518:	f00e fba4 	bl	22c64 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1451c:	4b18      	ldr	r3, [pc, #96]	; (14580 <le_set_event_mask+0x7c>)
   1451e:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   14522:	f011 0f02 	tst.w	r1, #2
   14526:	d125      	bne.n	14574 <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   14528:	220f      	movs	r2, #15
   1452a:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1452c:	f011 0f20 	tst.w	r1, #32
   14530:	d001      	beq.n	14536 <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   14532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   14536:	4912      	ldr	r1, [pc, #72]	; (14580 <le_set_event_mask+0x7c>)
   14538:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1453c:	f011 0f09 	tst.w	r1, #9
   14540:	d001      	beq.n	14546 <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   14542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   14546:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   14548:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1454c:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1454e:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   14550:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   14552:	0e12      	lsrs	r2, r2, #24
   14554:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   14556:	b29a      	uxth	r2, r3
	dst[0] = val;
   14558:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1455a:	0a12      	lsrs	r2, r2, #8
   1455c:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   1455e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   14560:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14562:	0a13      	lsrs	r3, r2, #8
   14564:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14566:	2200      	movs	r2, #0
   14568:	4621      	mov	r1, r4
   1456a:	f242 0001 	movw	r0, #8193	; 0x2001
   1456e:	f7ff fecd 	bl	1430c <bt_hci_cmd_send_sync>
}
   14572:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14574:	222f      	movs	r2, #47	; 0x2f
   14576:	2300      	movs	r3, #0
   14578:	e7d8      	b.n	1452c <le_set_event_mask+0x28>
		return -ENOBUFS;
   1457a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1457e:	e7f8      	b.n	14572 <le_set_event_mask+0x6e>
   14580:	200002a8 	.word	0x200002a8

00014584 <le_init>:
{
   14584:	b510      	push	{r4, lr}
   14586:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   14588:	4b50      	ldr	r3, [pc, #320]	; (146cc <le_init+0x148>)
   1458a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1458e:	f013 0f40 	tst.w	r3, #64	; 0x40
   14592:	d00a      	beq.n	145aa <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14594:	aa01      	add	r2, sp, #4
   14596:	2100      	movs	r1, #0
   14598:	f242 0003 	movw	r0, #8195	; 0x2003
   1459c:	f7ff feb6 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   145a0:	4603      	mov	r3, r0
   145a2:	b1a8      	cbz	r0, 145d0 <le_init+0x4c>
}
   145a4:	4618      	mov	r0, r3
   145a6:	b002      	add	sp, #8
   145a8:	bd10      	pop	{r4, pc}
   145aa:	4b49      	ldr	r3, [pc, #292]	; (146d0 <le_init+0x14c>)
   145ac:	4a49      	ldr	r2, [pc, #292]	; (146d4 <le_init+0x150>)
   145ae:	1a9b      	subs	r3, r3, r2
   145b0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   145b2:	f04f 0100 	mov.w	r1, #0
   145b6:	2201      	movs	r2, #1
   145b8:	f362 0102 	bfi	r1, r2, #0, #3
   145bc:	f36f 01c5 	bfc	r1, #3, #3
   145c0:	f363 118f 	bfi	r1, r3, #6, #10
   145c4:	4844      	ldr	r0, [pc, #272]	; (146d8 <le_init+0x154>)
   145c6:	f7fc fec3 	bl	11350 <log_0>
		return -ENODEV;
   145ca:	f06f 0312 	mvn.w	r3, #18
   145ce:	e7e9      	b.n	145a4 <le_init+0x20>
	read_le_features_complete(rsp);
   145d0:	9801      	ldr	r0, [sp, #4]
   145d2:	f7ff f987 	bl	138e4 <read_le_features_complete>
	net_buf_unref(rsp);
   145d6:	9801      	ldr	r0, [sp, #4]
   145d8:	f00e fafa 	bl	22bd0 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   145dc:	aa01      	add	r2, sp, #4
   145de:	2100      	movs	r1, #0
   145e0:	f242 0002 	movw	r0, #8194	; 0x2002
   145e4:	f7ff fe92 	bl	1430c <bt_hci_cmd_send_sync>
		if (err) {
   145e8:	4603      	mov	r3, r0
   145ea:	2800      	cmp	r0, #0
   145ec:	d1da      	bne.n	145a4 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   145ee:	9801      	ldr	r0, [sp, #4]
   145f0:	f7ff f9da 	bl	139a8 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   145f4:	9801      	ldr	r0, [sp, #4]
   145f6:	f00e faeb 	bl	22bd0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   145fa:	4b34      	ldr	r3, [pc, #208]	; (146cc <le_init+0x148>)
   145fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14600:	f013 0f20 	tst.w	r3, #32
   14604:	d032      	beq.n	1466c <le_init+0xe8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14606:	4b31      	ldr	r3, [pc, #196]	; (146cc <le_init+0x148>)
   14608:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1460c:	f013 0f08 	tst.w	r3, #8
   14610:	d144      	bne.n	1469c <le_init+0x118>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   14612:	4b2e      	ldr	r3, [pc, #184]	; (146cc <le_init+0x148>)
   14614:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14618:	f013 0f20 	tst.w	r3, #32
   1461c:	d022      	beq.n	14664 <le_init+0xe0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1461e:	f10d 0102 	add.w	r1, sp, #2
   14622:	4668      	mov	r0, sp
   14624:	f7ff ff3e 	bl	144a4 <hci_le_read_max_data_len>
		if (err) {
   14628:	4603      	mov	r3, r0
   1462a:	2800      	cmp	r0, #0
   1462c:	d1ba      	bne.n	145a4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1462e:	2104      	movs	r1, #4
   14630:	f242 0024 	movw	r0, #8228	; 0x2024
   14634:	f7ff fe2e 	bl	14294 <bt_hci_cmd_create>
		if (!buf) {
   14638:	4604      	mov	r4, r0
   1463a:	2800      	cmp	r0, #0
   1463c:	d03f      	beq.n	146be <le_init+0x13a>
   1463e:	2104      	movs	r1, #4
   14640:	3008      	adds	r0, #8
   14642:	f00e fb0f 	bl	22c64 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14646:	f8bd 3000 	ldrh.w	r3, [sp]
   1464a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1464c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14650:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14652:	2200      	movs	r2, #0
   14654:	4621      	mov	r1, r4
   14656:	f242 0024 	movw	r0, #8228	; 0x2024
   1465a:	f7ff fe57 	bl	1430c <bt_hci_cmd_send_sync>
		if (err) {
   1465e:	4603      	mov	r3, r0
   14660:	2800      	cmp	r0, #0
   14662:	d19f      	bne.n	145a4 <le_init+0x20>
	return  le_set_event_mask();
   14664:	f7ff ff4e 	bl	14504 <le_set_event_mask>
   14668:	4603      	mov	r3, r0
   1466a:	e79b      	b.n	145a4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1466c:	2102      	movs	r1, #2
   1466e:	f640 406d 	movw	r0, #3181	; 0xc6d
   14672:	f7ff fe0f 	bl	14294 <bt_hci_cmd_create>
		if (!buf) {
   14676:	4604      	mov	r4, r0
   14678:	b320      	cbz	r0, 146c4 <le_init+0x140>
   1467a:	2102      	movs	r1, #2
   1467c:	3008      	adds	r0, #8
   1467e:	f00e faf1 	bl	22c64 <net_buf_simple_add>
		cp_le->le = 0x01;
   14682:	2301      	movs	r3, #1
   14684:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   14686:	2200      	movs	r2, #0
   14688:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1468a:	4621      	mov	r1, r4
   1468c:	f640 406d 	movw	r0, #3181	; 0xc6d
   14690:	f7ff fe3c 	bl	1430c <bt_hci_cmd_send_sync>
		if (err) {
   14694:	4603      	mov	r3, r0
   14696:	2800      	cmp	r0, #0
   14698:	d0b5      	beq.n	14606 <le_init+0x82>
   1469a:	e783      	b.n	145a4 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1469c:	aa01      	add	r2, sp, #4
   1469e:	2100      	movs	r1, #0
   146a0:	f242 001c 	movw	r0, #8220	; 0x201c
   146a4:	f7ff fe32 	bl	1430c <bt_hci_cmd_send_sync>
		if (err) {
   146a8:	4603      	mov	r3, r0
   146aa:	2800      	cmp	r0, #0
   146ac:	f47f af7a 	bne.w	145a4 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   146b0:	9801      	ldr	r0, [sp, #4]
   146b2:	f7ff f93f 	bl	13934 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   146b6:	9801      	ldr	r0, [sp, #4]
   146b8:	f00e fa8a 	bl	22bd0 <net_buf_unref>
   146bc:	e7a9      	b.n	14612 <le_init+0x8e>
			return -ENOBUFS;
   146be:	f06f 0368 	mvn.w	r3, #104	; 0x68
   146c2:	e76f      	b.n	145a4 <le_init+0x20>
			return -ENOBUFS;
   146c4:	f06f 0368 	mvn.w	r3, #104	; 0x68
   146c8:	e76c      	b.n	145a4 <le_init+0x20>
   146ca:	bf00      	nop
   146cc:	200002a8 	.word	0x200002a8
   146d0:	00024cf8 	.word	0x00024cf8
   146d4:	00024ca0 	.word	0x00024ca0
   146d8:	00025be0 	.word	0x00025be0

000146dc <bt_br_init>:
{
   146dc:	b510      	push	{r4, lr}
   146de:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   146e0:	4b0b      	ldr	r3, [pc, #44]	; (14710 <bt_br_init+0x34>)
   146e2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   146e6:	b11b      	cbz	r3, 146f0 <bt_br_init+0x14>
		return 0;
   146e8:	2400      	movs	r4, #0
}
   146ea:	4620      	mov	r0, r4
   146ec:	b002      	add	sp, #8
   146ee:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   146f0:	aa01      	add	r2, sp, #4
   146f2:	2100      	movs	r1, #0
   146f4:	f241 0005 	movw	r0, #4101	; 0x1005
   146f8:	f7ff fe08 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   146fc:	4604      	mov	r4, r0
   146fe:	2800      	cmp	r0, #0
   14700:	d1f3      	bne.n	146ea <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   14702:	9801      	ldr	r0, [sp, #4]
   14704:	f7ff f964 	bl	139d0 <read_buffer_size_complete>
	net_buf_unref(rsp);
   14708:	9801      	ldr	r0, [sp, #4]
   1470a:	f00e fa61 	bl	22bd0 <net_buf_unref>
	return 0;
   1470e:	e7ec      	b.n	146ea <bt_br_init+0xe>
   14710:	200002a8 	.word	0x200002a8

00014714 <hci_vs_init>:
{
   14714:	b510      	push	{r4, lr}
   14716:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14718:	aa01      	add	r2, sp, #4
   1471a:	2100      	movs	r1, #0
   1471c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14720:	f7ff fdf4 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   14724:	bb38      	cbnz	r0, 14776 <hci_vs_init+0x62>
	net_buf_unref(rsp);
   14726:	9801      	ldr	r0, [sp, #4]
   14728:	f00e fa52 	bl	22bd0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1472c:	aa01      	add	r2, sp, #4
   1472e:	2100      	movs	r1, #0
   14730:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14734:	f7ff fdea 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   14738:	bb78      	cbnz	r0, 1479a <hci_vs_init+0x86>
	rp.cmds = (void *)rsp->data;
   1473a:	9801      	ldr	r0, [sp, #4]
   1473c:	6883      	ldr	r3, [r0, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1473e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   14742:	4c27      	ldr	r4, [pc, #156]	; (147e0 <hci_vs_init+0xcc>)
   14744:	f8a4 30b9 	strh.w	r3, [r4, #185]	; 0xb9
	net_buf_unref(rsp);
   14748:	f00e fa42 	bl	22bd0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1474c:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   14750:	f013 0f04 	tst.w	r3, #4
   14754:	d01f      	beq.n	14796 <hci_vs_init+0x82>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   14756:	aa01      	add	r2, sp, #4
   14758:	2100      	movs	r1, #0
   1475a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1475e:	f7ff fdd5 	bl	1430c <bt_hci_cmd_send_sync>
		if (err) {
   14762:	bb58      	cbnz	r0, 147bc <hci_vs_init+0xa8>
		rp.feat = (void *)rsp->data;
   14764:	9801      	ldr	r0, [sp, #4]
   14766:	6883      	ldr	r3, [r0, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14768:	785a      	ldrb	r2, [r3, #1]
   1476a:	4b1d      	ldr	r3, [pc, #116]	; (147e0 <hci_vs_init+0xcc>)
   1476c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		net_buf_unref(rsp);
   14770:	f00e fa2e 	bl	22bd0 <net_buf_unref>
   14774:	e00f      	b.n	14796 <hci_vs_init+0x82>
   14776:	4b1b      	ldr	r3, [pc, #108]	; (147e4 <hci_vs_init+0xd0>)
   14778:	4a1b      	ldr	r2, [pc, #108]	; (147e8 <hci_vs_init+0xd4>)
   1477a:	1a9b      	subs	r3, r3, r2
   1477c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   1477e:	f04f 0100 	mov.w	r1, #0
   14782:	2202      	movs	r2, #2
   14784:	f362 0102 	bfi	r1, r2, #0, #3
   14788:	f36f 01c5 	bfc	r1, #3, #3
   1478c:	f363 118f 	bfi	r1, r3, #6, #10
   14790:	4816      	ldr	r0, [pc, #88]	; (147ec <hci_vs_init+0xd8>)
   14792:	f7fc fddd 	bl	11350 <log_0>
}
   14796:	b002      	add	sp, #8
   14798:	bd10      	pop	{r4, pc}
   1479a:	4b12      	ldr	r3, [pc, #72]	; (147e4 <hci_vs_init+0xd0>)
   1479c:	4a12      	ldr	r2, [pc, #72]	; (147e8 <hci_vs_init+0xd4>)
   1479e:	1a9b      	subs	r3, r3, r2
   147a0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read supported vendor commands");
   147a2:	f04f 0100 	mov.w	r1, #0
   147a6:	2202      	movs	r2, #2
   147a8:	f362 0102 	bfi	r1, r2, #0, #3
   147ac:	f36f 01c5 	bfc	r1, #3, #3
   147b0:	f363 118f 	bfi	r1, r3, #6, #10
   147b4:	480e      	ldr	r0, [pc, #56]	; (147f0 <hci_vs_init+0xdc>)
   147b6:	f7fc fdcb 	bl	11350 <log_0>
		return;
   147ba:	e7ec      	b.n	14796 <hci_vs_init+0x82>
   147bc:	4b09      	ldr	r3, [pc, #36]	; (147e4 <hci_vs_init+0xd0>)
   147be:	4a0a      	ldr	r2, [pc, #40]	; (147e8 <hci_vs_init+0xd4>)
   147c0:	1a9b      	subs	r3, r3, r2
   147c2:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   147c4:	f04f 0100 	mov.w	r1, #0
   147c8:	2202      	movs	r2, #2
   147ca:	f362 0102 	bfi	r1, r2, #0, #3
   147ce:	f36f 01c5 	bfc	r1, #3, #3
   147d2:	f363 118f 	bfi	r1, r3, #6, #10
   147d6:	4807      	ldr	r0, [pc, #28]	; (147f4 <hci_vs_init+0xe0>)
   147d8:	f7fc fdba 	bl	11350 <log_0>
			return;
   147dc:	e7db      	b.n	14796 <hci_vs_init+0x82>
   147de:	bf00      	nop
   147e0:	200002a8 	.word	0x200002a8
   147e4:	00024cf8 	.word	0x00024cf8
   147e8:	00024ca0 	.word	0x00024ca0
   147ec:	00025c04 	.word	0x00025c04
   147f0:	00025c28 	.word	0x00025c28
   147f4:	00025c54 	.word	0x00025c54

000147f8 <hci_init>:
{
   147f8:	b508      	push	{r3, lr}
	err = common_init();
   147fa:	f7ff fe09 	bl	14410 <common_init>
	if (err) {
   147fe:	4603      	mov	r3, r0
   14800:	b108      	cbz	r0, 14806 <hci_init+0xe>
}
   14802:	4618      	mov	r0, r3
   14804:	bd08      	pop	{r3, pc}
	err = le_init();
   14806:	f7ff febd 	bl	14584 <le_init>
	if (err) {
   1480a:	4603      	mov	r3, r0
   1480c:	2800      	cmp	r0, #0
   1480e:	d1f8      	bne.n	14802 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14810:	4b16      	ldr	r3, [pc, #88]	; (1486c <hci_init+0x74>)
   14812:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14816:	f013 0f20 	tst.w	r3, #32
   1481a:	d00e      	beq.n	1483a <hci_init+0x42>
	else if (!bt_dev.le.acl_mtu) {
   1481c:	4b13      	ldr	r3, [pc, #76]	; (1486c <hci_init+0x74>)
   1481e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   14822:	b183      	cbz	r3, 14846 <hci_init+0x4e>
	err = set_event_mask();
   14824:	f00c fb7e 	bl	20f24 <set_event_mask>
	if (err) {
   14828:	4603      	mov	r3, r0
   1482a:	2800      	cmp	r0, #0
   1482c:	d1e9      	bne.n	14802 <hci_init+0xa>
	hci_vs_init();
   1482e:	f7ff ff71 	bl	14714 <hci_vs_init>
	err = bt_id_init();
   14832:	f001 f8bf 	bl	159b4 <bt_id_init>
   14836:	4603      	mov	r3, r0
	if (err) {
   14838:	e7e3      	b.n	14802 <hci_init+0xa>
		err = bt_br_init();
   1483a:	f7ff ff4f 	bl	146dc <bt_br_init>
		if (err) {
   1483e:	4603      	mov	r3, r0
   14840:	2800      	cmp	r0, #0
   14842:	d0ef      	beq.n	14824 <hci_init+0x2c>
   14844:	e7dd      	b.n	14802 <hci_init+0xa>
   14846:	4b0a      	ldr	r3, [pc, #40]	; (14870 <hci_init+0x78>)
   14848:	4a0a      	ldr	r2, [pc, #40]	; (14874 <hci_init+0x7c>)
   1484a:	1a9b      	subs	r3, r3, r2
   1484c:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL BR/EDR buffers not initialized");
   1484e:	f04f 0100 	mov.w	r1, #0
   14852:	2201      	movs	r2, #1
   14854:	f362 0102 	bfi	r1, r2, #0, #3
   14858:	f36f 01c5 	bfc	r1, #3, #3
   1485c:	f363 118f 	bfi	r1, r3, #6, #10
   14860:	4805      	ldr	r0, [pc, #20]	; (14878 <hci_init+0x80>)
   14862:	f7fc fd75 	bl	11350 <log_0>
		return -EIO;
   14866:	f06f 0304 	mvn.w	r3, #4
   1486a:	e7ca      	b.n	14802 <hci_init+0xa>
   1486c:	200002a8 	.word	0x200002a8
   14870:	00024cf8 	.word	0x00024cf8
   14874:	00024ca0 	.word	0x00024ca0
   14878:	00025c80 	.word	0x00025c80

0001487c <bt_le_create_conn_legacy>:
{
   1487c:	b570      	push	{r4, r5, r6, lr}
   1487e:	b088      	sub	sp, #32
   14880:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14882:	f3bf 8f5b 	dmb	ish
   14886:	6840      	ldr	r0, [r0, #4]
   14888:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1488c:	f000 0601 	and.w	r6, r0, #1
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   14890:	f10d 010b 	add.w	r1, sp, #11
   14894:	4630      	mov	r0, r6
   14896:	f001 f863 	bl	15960 <bt_id_set_create_conn_own_addr>
	if (err) {
   1489a:	b108      	cbz	r0, 148a0 <bt_le_create_conn_legacy+0x24>
}
   1489c:	b008      	add	sp, #32
   1489e:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   148a0:	2119      	movs	r1, #25
   148a2:	f242 000d 	movw	r0, #8205	; 0x200d
   148a6:	f7ff fcf5 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   148aa:	4605      	mov	r5, r0
   148ac:	2800      	cmp	r0, #0
   148ae:	d04a      	beq.n	14946 <bt_le_create_conn_legacy+0xca>
   148b0:	2119      	movs	r1, #25
   148b2:	3008      	adds	r0, #8
   148b4:	f00e f9d6 	bl	22c64 <net_buf_simple_add>
   148b8:	4603      	mov	r3, r0
__ssp_bos_icheck3(memset, void *, int)
   148ba:	2200      	movs	r2, #0
   148bc:	6002      	str	r2, [r0, #0]
   148be:	6042      	str	r2, [r0, #4]
   148c0:	6082      	str	r2, [r0, #8]
   148c2:	60c2      	str	r2, [r0, #12]
   148c4:	6102      	str	r2, [r0, #16]
   148c6:	6142      	str	r2, [r0, #20]
   148c8:	7602      	strb	r2, [r0, #24]
	cp->own_addr_type = own_addr_type;
   148ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
   148ce:	7302      	strb	r2, [r0, #12]
	if (use_filter) {
   148d0:	b366      	cbz	r6, 1492c <bt_le_create_conn_legacy+0xb0>
		bt_addr_le_copy(&cp->peer_addr, BT_ADDR_LE_ANY);
   148d2:	2200      	movs	r2, #0
   148d4:	9206      	str	r2, [sp, #24]
   148d6:	f8cd 201b 	str.w	r2, [sp, #27]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   148da:	f8c0 2005 	str.w	r2, [r0, #5]
   148de:	6082      	str	r2, [r0, #8]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_FILTER;
   148e0:	2201      	movs	r2, #1
   148e2:	7102      	strb	r2, [r0, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   148e4:	4a19      	ldr	r2, [pc, #100]	; (1494c <bt_le_create_conn_legacy+0xd0>)
   148e6:	8991      	ldrh	r1, [r2, #12]
   148e8:	8019      	strh	r1, [r3, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   148ea:	89d1      	ldrh	r1, [r2, #14]
   148ec:	8059      	strh	r1, [r3, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   148ee:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   148f2:	f8a3 100d 	strh.w	r1, [r3, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   148f6:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   148fa:	f8a3 100f 	strh.w	r1, [r3, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   148fe:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
   14902:	f8a3 1011 	strh.w	r1, [r3, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   14906:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1490a:	f8a3 1013 	strh.w	r1, [r3, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   1490e:	2301      	movs	r3, #1
   14910:	9300      	str	r3, [sp, #0]
   14912:	230b      	movs	r3, #11
   14914:	32cc      	adds	r2, #204	; 0xcc
   14916:	a903      	add	r1, sp, #12
   14918:	4628      	mov	r0, r5
   1491a:	f7ff fca9 	bl	14270 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   1491e:	2200      	movs	r2, #0
   14920:	4629      	mov	r1, r5
   14922:	f242 000d 	movw	r0, #8205	; 0x200d
   14926:	f7ff fcf1 	bl	1430c <bt_hci_cmd_send_sync>
   1492a:	e7b7      	b.n	1489c <bt_le_create_conn_legacy+0x20>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   1492c:	4622      	mov	r2, r4
   1492e:	f852 1f88 	ldr.w	r1, [r2, #136]!
   14932:	f8c0 1005 	str.w	r1, [r0, #5]
   14936:	8891      	ldrh	r1, [r2, #4]
   14938:	7992      	ldrb	r2, [r2, #6]
   1493a:	f8a0 1009 	strh.w	r1, [r0, #9]
   1493e:	72c2      	strb	r2, [r0, #11]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   14940:	2200      	movs	r2, #0
   14942:	7102      	strb	r2, [r0, #4]
   14944:	e7ce      	b.n	148e4 <bt_le_create_conn_legacy+0x68>
		return -ENOBUFS;
   14946:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1494a:	e7a7      	b.n	1489c <bt_le_create_conn_legacy+0x20>
   1494c:	200002a8 	.word	0x200002a8

00014950 <le_conn_complete_cancel>:
{
   14950:	b510      	push	{r4, lr}
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   14952:	2100      	movs	r1, #0
   14954:	4608      	mov	r0, r1
   14956:	f7ff f86b 	bl	13a30 <find_pending_connect>
	if (!conn) {
   1495a:	b180      	cbz	r0, 1497e <le_conn_complete_cancel+0x2e>
   1495c:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1495e:	2302      	movs	r3, #2
   14960:	7243      	strb	r3, [r0, #9]
   14962:	f3bf 8f5b 	dmb	ish
   14966:	6843      	ldr	r3, [r0, #4]
   14968:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1496c:	f013 0f01 	tst.w	r3, #1
   14970:	d016      	beq.n	149a0 <le_conn_complete_cancel+0x50>
			bt_le_create_conn(conn);
   14972:	f00c faf9 	bl	20f68 <bt_le_create_conn>
	bt_conn_unref(conn);
   14976:	4620      	mov	r0, r4
   14978:	f00c fd7f 	bl	2147a <bt_conn_unref>
}
   1497c:	bd10      	pop	{r4, pc}
   1497e:	4b0a      	ldr	r3, [pc, #40]	; (149a8 <le_conn_complete_cancel+0x58>)
   14980:	4a0a      	ldr	r2, [pc, #40]	; (149ac <le_conn_complete_cancel+0x5c>)
   14982:	1a9b      	subs	r3, r3, r2
   14984:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending central connection");
   14986:	f04f 0100 	mov.w	r1, #0
   1498a:	2201      	movs	r2, #1
   1498c:	f362 0102 	bfi	r1, r2, #0, #3
   14990:	f36f 01c5 	bfc	r1, #3, #3
   14994:	f363 118f 	bfi	r1, r3, #6, #10
   14998:	4805      	ldr	r0, [pc, #20]	; (149b0 <le_conn_complete_cancel+0x60>)
   1499a:	f7fc fcd9 	bl	11350 <log_0>
		return;
   1499e:	e7ed      	b.n	1497c <le_conn_complete_cancel+0x2c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   149a0:	2100      	movs	r1, #0
   149a2:	f001 fd61 	bl	16468 <bt_conn_set_state>
   149a6:	e7e6      	b.n	14976 <le_conn_complete_cancel+0x26>
   149a8:	00024cf8 	.word	0x00024cf8
   149ac:	00024ca0 	.word	0x00024ca0
   149b0:	00025ca4 	.word	0x00025ca4

000149b4 <bt_send>:
{
   149b4:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   149b6:	4b03      	ldr	r3, [pc, #12]	; (149c4 <bt_send+0x10>)
   149b8:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   149bc:	691b      	ldr	r3, [r3, #16]
   149be:	4798      	blx	r3
}
   149c0:	bd08      	pop	{r3, pc}
   149c2:	bf00      	nop
   149c4:	200002a8 	.word	0x200002a8

000149c8 <bt_hci_cmd_send>:
{
   149c8:	b538      	push	{r3, r4, r5, lr}
   149ca:	4604      	mov	r4, r0
	if (!buf) {
   149cc:	460d      	mov	r5, r1
   149ce:	b151      	cbz	r1, 149e6 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   149d0:	f640 4335 	movw	r3, #3125	; 0xc35
   149d4:	429c      	cmp	r4, r3
   149d6:	d00e      	beq.n	149f6 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   149d8:	4629      	mov	r1, r5
   149da:	4814      	ldr	r0, [pc, #80]	; (14a2c <bt_hci_cmd_send+0x64>)
   149dc:	f00e f8eb 	bl	22bb6 <net_buf_put>
	return 0;
   149e0:	2400      	movs	r4, #0
}
   149e2:	4620      	mov	r0, r4
   149e4:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   149e6:	f7ff fc55 	bl	14294 <bt_hci_cmd_create>
		if (!buf) {
   149ea:	4605      	mov	r5, r0
   149ec:	2800      	cmp	r0, #0
   149ee:	d1ef      	bne.n	149d0 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   149f0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   149f4:	e7f5      	b.n	149e2 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   149f6:	4628      	mov	r0, r5
   149f8:	f7ff ffdc 	bl	149b4 <bt_send>
		if (err) {
   149fc:	4604      	mov	r4, r0
   149fe:	2800      	cmp	r0, #0
   14a00:	d0ef      	beq.n	149e2 <bt_hci_cmd_send+0x1a>
   14a02:	4b0b      	ldr	r3, [pc, #44]	; (14a30 <bt_hci_cmd_send+0x68>)
   14a04:	4a0b      	ldr	r2, [pc, #44]	; (14a34 <bt_hci_cmd_send+0x6c>)
   14a06:	1a9b      	subs	r3, r3, r2
   14a08:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   14a0a:	f04f 0200 	mov.w	r2, #0
   14a0e:	2101      	movs	r1, #1
   14a10:	f361 0202 	bfi	r2, r1, #0, #3
   14a14:	f36f 02c5 	bfc	r2, #3, #3
   14a18:	f363 128f 	bfi	r2, r3, #6, #10
   14a1c:	4601      	mov	r1, r0
   14a1e:	4806      	ldr	r0, [pc, #24]	; (14a38 <bt_hci_cmd_send+0x70>)
   14a20:	f7fc fbe0 	bl	111e4 <log_1>
			net_buf_unref(buf);
   14a24:	4628      	mov	r0, r5
   14a26:	f00e f8d3 	bl	22bd0 <net_buf_unref>
		return err;
   14a2a:	e7da      	b.n	149e2 <bt_hci_cmd_send+0x1a>
   14a2c:	200003f4 	.word	0x200003f4
   14a30:	00024cf8 	.word	0x00024cf8
   14a34:	00024ca0 	.word	0x00024ca0
   14a38:	00025cc4 	.word	0x00025cc4

00014a3c <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   14a3c:	7a83      	ldrb	r3, [r0, #10]
   14a3e:	2b07      	cmp	r3, #7
   14a40:	d000      	beq.n	14a44 <conn_auto_initiate+0x8>
   14a42:	4770      	bx	lr
{
   14a44:	b530      	push	{r4, r5, lr}
   14a46:	b085      	sub	sp, #20
   14a48:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14a4a:	1d05      	adds	r5, r0, #4
   14a4c:	f3bf 8f5b 	dmb	ish
   14a50:	6843      	ldr	r3, [r0, #4]
   14a52:	f3bf 8f5b 	dmb	ish
   14a56:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   14a5a:	d10b      	bne.n	14a74 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14a5c:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14a5e:	b12b      	cbz	r3, 14a6c <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   14a60:	4b37      	ldr	r3, [pc, #220]	; (14b40 <conn_auto_initiate+0x104>)
   14a62:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14a66:	f013 0f08 	tst.w	r3, #8
   14a6a:	d003      	beq.n	14a74 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   14a6c:	4620      	mov	r0, r4
   14a6e:	f00c fb03 	bl	21078 <hci_le_read_remote_features>
		if (!err) {
   14a72:	b1d0      	cbz	r0, 14aaa <conn_auto_initiate+0x6e>
   14a74:	f3bf 8f5b 	dmb	ish
   14a78:	6863      	ldr	r3, [r4, #4]
   14a7a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14a7e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   14a82:	d105      	bne.n	14a90 <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   14a84:	4b2e      	ldr	r3, [pc, #184]	; (14b40 <conn_auto_initiate+0x104>)
   14a86:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   14a8a:	f013 0f01 	tst.w	r3, #1
   14a8e:	d10e      	bne.n	14aae <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   14a90:	4b2b      	ldr	r3, [pc, #172]	; (14b40 <conn_auto_initiate+0x104>)
   14a92:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   14a96:	f013 0f20 	tst.w	r3, #32
   14a9a:	d006      	beq.n	14aaa <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14a9c:	4b28      	ldr	r3, [pc, #160]	; (14b40 <conn_auto_initiate+0x104>)
   14a9e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   14aa2:	689b      	ldr	r3, [r3, #8]
   14aa4:	f013 0f02 	tst.w	r3, #2
   14aa8:	d128      	bne.n	14afc <conn_auto_initiate+0xc0>
}
   14aaa:	b005      	add	sp, #20
   14aac:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   14aae:	2100      	movs	r1, #0
   14ab0:	9100      	str	r1, [sp, #0]
   14ab2:	2302      	movs	r3, #2
   14ab4:	461a      	mov	r2, r3
   14ab6:	4620      	mov	r0, r4
   14ab8:	f00c faba 	bl	21030 <bt_le_set_phy>
		if (!err) {
   14abc:	4601      	mov	r1, r0
   14abe:	b180      	cbz	r0, 14ae2 <conn_auto_initiate+0xa6>
   14ac0:	4b20      	ldr	r3, [pc, #128]	; (14b44 <conn_auto_initiate+0x108>)
   14ac2:	4a21      	ldr	r2, [pc, #132]	; (14b48 <conn_auto_initiate+0x10c>)
   14ac4:	1a9b      	subs	r3, r3, r2
   14ac6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set LE PHY (%d)", err);
   14ac8:	f04f 0200 	mov.w	r2, #0
   14acc:	2001      	movs	r0, #1
   14ace:	f360 0202 	bfi	r2, r0, #0, #3
   14ad2:	f36f 02c5 	bfc	r2, #3, #3
   14ad6:	f363 128f 	bfi	r2, r3, #6, #10
   14ada:	481c      	ldr	r0, [pc, #112]	; (14b4c <conn_auto_initiate+0x110>)
   14adc:	f7fc fb82 	bl	111e4 <log_1>
   14ae0:	e7d6      	b.n	14a90 <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14ae2:	f3bf 8f5b 	dmb	ish
   14ae6:	e855 3f00 	ldrex	r3, [r5]
   14aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14aee:	e845 3200 	strex	r2, r3, [r5]
   14af2:	2a00      	cmp	r2, #0
   14af4:	d1f7      	bne.n	14ae6 <conn_auto_initiate+0xaa>
   14af6:	f3bf 8f5b 	dmb	ish
			return;
   14afa:	e7d6      	b.n	14aaa <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14afc:	f10d 010e 	add.w	r1, sp, #14
   14b00:	a803      	add	r0, sp, #12
   14b02:	f7ff fccf 	bl	144a4 <hci_le_read_max_data_len>
			if (!err) {
   14b06:	2800      	cmp	r0, #0
   14b08:	d1cf      	bne.n	14aaa <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   14b0a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   14b0e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   14b12:	4620      	mov	r0, r4
   14b14:	f00c fa70 	bl	20ff8 <bt_le_set_data_len>
				if (err) {
   14b18:	4601      	mov	r1, r0
   14b1a:	2800      	cmp	r0, #0
   14b1c:	d0c5      	beq.n	14aaa <conn_auto_initiate+0x6e>
   14b1e:	4b09      	ldr	r3, [pc, #36]	; (14b44 <conn_auto_initiate+0x108>)
   14b20:	4a09      	ldr	r2, [pc, #36]	; (14b48 <conn_auto_initiate+0x10c>)
   14b22:	1a9b      	subs	r3, r3, r2
   14b24:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
   14b26:	f04f 0200 	mov.w	r2, #0
   14b2a:	2001      	movs	r0, #1
   14b2c:	f360 0202 	bfi	r2, r0, #0, #3
   14b30:	f36f 02c5 	bfc	r2, #3, #3
   14b34:	f363 128f 	bfi	r2, r3, #6, #10
   14b38:	4805      	ldr	r0, [pc, #20]	; (14b50 <conn_auto_initiate+0x114>)
   14b3a:	f7fc fb53 	bl	111e4 <log_1>
		}
   14b3e:	e7b4      	b.n	14aaa <conn_auto_initiate+0x6e>
   14b40:	200002a8 	.word	0x200002a8
   14b44:	00024cf8 	.word	0x00024cf8
   14b48:	00024ca0 	.word	0x00024ca0
   14b4c:	00025ce8 	.word	0x00025ce8
   14b50:	00025d04 	.word	0x00025d04

00014b54 <bt_hci_le_enh_conn_complete>:
{
   14b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b58:	b084      	sub	sp, #16
   14b5a:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14b5c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   14b60:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   14b64:	4640      	mov	r0, r8
   14b66:	f7fe fe91 	bl	1388c <conn_handle_is_disconnected>
   14b6a:	4606      	mov	r6, r0
	if (evt->status) {
   14b6c:	7820      	ldrb	r0, [r4, #0]
   14b6e:	b1d8      	cbz	r0, 14ba8 <bt_hci_le_enh_conn_complete+0x54>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14b70:	2802      	cmp	r0, #2
   14b72:	d013      	beq.n	14b9c <bt_hci_le_enh_conn_complete+0x48>
   14b74:	4b6b      	ldr	r3, [pc, #428]	; (14d24 <bt_hci_le_enh_conn_complete+0x1d0>)
   14b76:	4a6c      	ldr	r2, [pc, #432]	; (14d28 <bt_hci_le_enh_conn_complete+0x1d4>)
   14b78:	1a9b      	subs	r3, r3, r2
   14b7a:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   14b7c:	f04f 0200 	mov.w	r2, #0
   14b80:	2102      	movs	r1, #2
   14b82:	f361 0202 	bfi	r2, r1, #0, #3
   14b86:	f36f 02c5 	bfc	r2, #3, #3
   14b8a:	f363 128f 	bfi	r2, r3, #6, #10
   14b8e:	4601      	mov	r1, r0
   14b90:	4866      	ldr	r0, [pc, #408]	; (14d2c <bt_hci_le_enh_conn_complete+0x1d8>)
   14b92:	f7fc fb27 	bl	111e4 <log_1>
}
   14b96:	b004      	add	sp, #16
   14b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			le_conn_complete_cancel();
   14b9c:	f7ff fed8 	bl	14950 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   14ba0:	2000      	movs	r0, #0
   14ba2:	f000 fffd 	bl	15ba0 <bt_le_scan_update>
			return;
   14ba6:	e7f6      	b.n	14b96 <bt_hci_le_enh_conn_complete+0x42>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14ba8:	7923      	ldrb	r3, [r4, #4]
   14baa:	3b02      	subs	r3, #2
   14bac:	b2db      	uxtb	r3, r3
   14bae:	2b01      	cmp	r3, #1
   14bb0:	d961      	bls.n	14c76 <bt_hci_le_enh_conn_complete+0x122>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   14bb2:	78e3      	ldrb	r3, [r4, #3]
   14bb4:	2b01      	cmp	r3, #1
   14bb6:	d078      	beq.n	14caa <bt_hci_le_enh_conn_complete+0x156>
				bt_lookup_id_addr(id, &evt->peer_addr));
   14bb8:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   14bba:	4629      	mov	r1, r5
   14bbc:	f00c faea 	bl	21194 <bt_lookup_id_addr>
   14bc0:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   14bc2:	6800      	ldr	r0, [r0, #0]
   14bc4:	9000      	str	r0, [sp, #0]
   14bc6:	889a      	ldrh	r2, [r3, #4]
   14bc8:	799b      	ldrb	r3, [r3, #6]
   14bca:	f8ad 2004 	strh.w	r2, [sp, #4]
   14bce:	f88d 3006 	strb.w	r3, [sp, #6]
   14bd2:	6860      	ldr	r0, [r4, #4]
   14bd4:	9002      	str	r0, [sp, #8]
   14bd6:	8922      	ldrh	r2, [r4, #8]
   14bd8:	7aa3      	ldrb	r3, [r4, #10]
   14bda:	f8ad 200c 	strh.w	r2, [sp, #12]
   14bde:	f88d 300e 	strb.w	r3, [sp, #14]
	conn = find_pending_connect(evt->role, &id_addr);
   14be2:	4669      	mov	r1, sp
   14be4:	78e0      	ldrb	r0, [r4, #3]
   14be6:	f7fe ff23 	bl	13a30 <find_pending_connect>
   14bea:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   14bec:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14bee:	b963      	cbnz	r3, 14c0a <bt_hci_le_enh_conn_complete+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14bf0:	4b4f      	ldr	r3, [pc, #316]	; (14d30 <bt_hci_le_enh_conn_complete+0x1dc>)
   14bf2:	f3bf 8f5b 	dmb	ish
   14bf6:	e853 2f00 	ldrex	r2, [r3]
   14bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   14bfe:	e843 2100 	strex	r1, r2, [r3]
   14c02:	2900      	cmp	r1, #0
   14c04:	d1f7      	bne.n	14bf6 <bt_hci_le_enh_conn_complete+0xa2>
   14c06:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   14c0a:	2d00      	cmp	r5, #0
   14c0c:	d051      	beq.n	14cb2 <bt_hci_le_enh_conn_complete+0x15e>
	conn->handle = handle;
   14c0e:	462b      	mov	r3, r5
   14c10:	f823 7b88 	strh.w	r7, [r3], #136
   14c14:	9800      	ldr	r0, [sp, #0]
   14c16:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   14c1a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   14c1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   14c22:	8099      	strh	r1, [r3, #4]
   14c24:	719a      	strb	r2, [r3, #6]
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14c26:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   14c2a:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14c2e:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   14c32:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14c36:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   14c3a:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   14c3e:	78e3      	ldrb	r3, [r4, #3]
   14c40:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   14c42:	2200      	movs	r2, #0
   14c44:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14c46:	2b00      	cmp	r3, #0
   14c48:	d04d      	beq.n	14ce6 <bt_hci_le_enh_conn_complete+0x192>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14c4a:	2107      	movs	r1, #7
   14c4c:	4628      	mov	r0, r5
   14c4e:	f001 fc0b 	bl	16468 <bt_conn_set_state>
	if (is_disconnected) {
   14c52:	2e00      	cmp	r6, #0
   14c54:	d161      	bne.n	14d1a <bt_hci_le_enh_conn_complete+0x1c6>
	bt_conn_connected(conn);
   14c56:	4628      	mov	r0, r5
   14c58:	f00c fc48 	bl	214ec <bt_conn_connected>
	conn_auto_initiate(conn);
   14c5c:	4628      	mov	r0, r5
   14c5e:	f7ff feed 	bl	14a3c <conn_auto_initiate>
	bt_conn_unref(conn);
   14c62:	4628      	mov	r0, r5
   14c64:	f00c fc09 	bl	2147a <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   14c68:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14c6a:	2b00      	cmp	r3, #0
   14c6c:	d193      	bne.n	14b96 <bt_hci_le_enh_conn_complete+0x42>
		bt_le_scan_update(false);
   14c6e:	2000      	movs	r0, #0
   14c70:	f000 ff96 	bl	15ba0 <bt_le_scan_update>
   14c74:	e78f      	b.n	14b96 <bt_hci_le_enh_conn_complete+0x42>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14c76:	4623      	mov	r3, r4
   14c78:	f853 0f04 	ldr.w	r0, [r3, #4]!
   14c7c:	9000      	str	r0, [sp, #0]
   14c7e:	889a      	ldrh	r2, [r3, #4]
   14c80:	799b      	ldrb	r3, [r3, #6]
   14c82:	f8ad 2004 	strh.w	r2, [sp, #4]
   14c86:	f88d 3006 	strb.w	r3, [sp, #6]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14c8a:	b2c0      	uxtb	r0, r0
   14c8c:	3802      	subs	r0, #2
   14c8e:	f88d 0000 	strb.w	r0, [sp]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   14c92:	4623      	mov	r3, r4
	memcpy(dst, src, sizeof(*dst));
   14c94:	f853 2f11 	ldr.w	r2, [r3, #17]!
   14c98:	f8cd 2009 	str.w	r2, [sp, #9]
   14c9c:	889b      	ldrh	r3, [r3, #4]
   14c9e:	f8ad 300d 	strh.w	r3, [sp, #13]
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14ca2:	2301      	movs	r3, #1
   14ca4:	f88d 3008 	strb.w	r3, [sp, #8]
   14ca8:	e79b      	b.n	14be2 <bt_hci_le_enh_conn_complete+0x8e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   14caa:	4b22      	ldr	r3, [pc, #136]	; (14d34 <bt_hci_le_enh_conn_complete+0x1e0>)
   14cac:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14cb0:	e782      	b.n	14bb8 <bt_hci_le_enh_conn_complete+0x64>
   14cb2:	4b1c      	ldr	r3, [pc, #112]	; (14d24 <bt_hci_le_enh_conn_complete+0x1d0>)
   14cb4:	4a1c      	ldr	r2, [pc, #112]	; (14d28 <bt_hci_le_enh_conn_complete+0x1d4>)
   14cb6:	1a9b      	subs	r3, r3, r2
   14cb8:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   14cba:	2201      	movs	r2, #1
   14cbc:	f362 0502 	bfi	r5, r2, #0, #3
   14cc0:	f36f 05c5 	bfc	r5, #3, #3
   14cc4:	f363 158f 	bfi	r5, r3, #6, #10
   14cc8:	1d20      	adds	r0, r4, #4
   14cca:	f7fe fc53 	bl	13574 <bt_addr_le_str_real>
   14cce:	f7fc f911 	bl	10ef4 <z_log_strdup>
   14cd2:	4601      	mov	r1, r0
   14cd4:	462a      	mov	r2, r5
   14cd6:	4818      	ldr	r0, [pc, #96]	; (14d38 <bt_hci_le_enh_conn_complete+0x1e4>)
   14cd8:	f7fc fa84 	bl	111e4 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   14cdc:	211f      	movs	r1, #31
   14cde:	4640      	mov	r0, r8
   14ce0:	f00c f946 	bl	20f70 <bt_hci_disconnect>
		return;
   14ce4:	e757      	b.n	14b96 <bt_hci_le_enh_conn_complete+0x42>
   14ce6:	9802      	ldr	r0, [sp, #8]
   14ce8:	f8c5 0096 	str.w	r0, [r5, #150]	; 0x96
   14cec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   14cf0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14cf4:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
   14cf8:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
					&bt_dev.id_addr[conn->id]);
   14cfc:	7a2b      	ldrb	r3, [r5, #8]
   14cfe:	490d      	ldr	r1, [pc, #52]	; (14d34 <bt_hci_le_enh_conn_complete+0x1e0>)
   14d00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   14d04:	18ca      	adds	r2, r1, r3
   14d06:	58cb      	ldr	r3, [r1, r3]
   14d08:	f8c5 308f 	str.w	r3, [r5, #143]	; 0x8f
   14d0c:	8891      	ldrh	r1, [r2, #4]
   14d0e:	7993      	ldrb	r3, [r2, #6]
   14d10:	f8a5 1093 	strh.w	r1, [r5, #147]	; 0x93
   14d14:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
}
   14d18:	e797      	b.n	14c4a <bt_hci_le_enh_conn_complete+0xf6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14d1a:	2101      	movs	r1, #1
   14d1c:	4628      	mov	r0, r5
   14d1e:	f001 fba3 	bl	16468 <bt_conn_set_state>
   14d22:	e798      	b.n	14c56 <bt_hci_le_enh_conn_complete+0x102>
   14d24:	00024cf8 	.word	0x00024cf8
   14d28:	00024ca0 	.word	0x00024ca0
   14d2c:	00025d20 	.word	0x00025d20
   14d30:	20000374 	.word	0x20000374
   14d34:	200002a8 	.word	0x200002a8
   14d38:	00025d3c 	.word	0x00025d3c

00014d3c <le_phy_update_complete>:
{
   14d3c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   14d3e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14d40:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   14d44:	4628      	mov	r0, r5
   14d46:	f001 fb85 	bl	16454 <bt_conn_lookup_handle>
	if (!conn) {
   14d4a:	b1a0      	cbz	r0, 14d76 <le_phy_update_complete+0x3a>
   14d4c:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   14d4e:	1d03      	adds	r3, r0, #4
   14d50:	f3bf 8f5b 	dmb	ish
   14d54:	e853 2f00 	ldrex	r2, [r3]
   14d58:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   14d5c:	e843 1000 	strex	r0, r1, [r3]
   14d60:	2800      	cmp	r0, #0
   14d62:	d1f7      	bne.n	14d54 <le_phy_update_complete+0x18>
   14d64:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14d68:	f012 0f80 	tst.w	r2, #128	; 0x80
   14d6c:	d115      	bne.n	14d9a <le_phy_update_complete+0x5e>
	bt_conn_unref(conn);
   14d6e:	4620      	mov	r0, r4
   14d70:	f00c fb83 	bl	2147a <bt_conn_unref>
}
   14d74:	bd38      	pop	{r3, r4, r5, pc}
   14d76:	4b11      	ldr	r3, [pc, #68]	; (14dbc <le_phy_update_complete+0x80>)
   14d78:	4a11      	ldr	r2, [pc, #68]	; (14dc0 <le_phy_update_complete+0x84>)
   14d7a:	1a9b      	subs	r3, r3, r2
   14d7c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14d7e:	f04f 0200 	mov.w	r2, #0
   14d82:	2101      	movs	r1, #1
   14d84:	f361 0202 	bfi	r2, r1, #0, #3
   14d88:	f36f 02c5 	bfc	r2, #3, #3
   14d8c:	f363 128f 	bfi	r2, r3, #6, #10
   14d90:	4629      	mov	r1, r5
   14d92:	480c      	ldr	r0, [pc, #48]	; (14dc4 <le_phy_update_complete+0x88>)
   14d94:	f7fc fa26 	bl	111e4 <log_1>
		return;
   14d98:	e7ec      	b.n	14d74 <le_phy_update_complete+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14d9a:	f3bf 8f5b 	dmb	ish
   14d9e:	e853 2f00 	ldrex	r2, [r3]
   14da2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   14da6:	e843 2100 	strex	r1, r2, [r3]
   14daa:	2900      	cmp	r1, #0
   14dac:	d1f7      	bne.n	14d9e <le_phy_update_complete+0x62>
   14dae:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   14db2:	4620      	mov	r0, r4
   14db4:	f7ff fe42 	bl	14a3c <conn_auto_initiate>
   14db8:	e7d9      	b.n	14d6e <le_phy_update_complete+0x32>
   14dba:	bf00      	nop
   14dbc:	00024cf8 	.word	0x00024cf8
   14dc0:	00024ca0 	.word	0x00024ca0
   14dc4:	00025928 	.word	0x00025928

00014dc8 <le_remote_feat_complete>:
{
   14dc8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   14dca:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14dcc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   14dd0:	4630      	mov	r0, r6
   14dd2:	f001 fb3f 	bl	16454 <bt_conn_lookup_handle>
	if (!conn) {
   14dd6:	b1e8      	cbz	r0, 14e14 <le_remote_feat_complete+0x4c>
   14dd8:	4605      	mov	r5, r0
	if (!evt->status) {
   14dda:	7823      	ldrb	r3, [r4, #0]
   14ddc:	b933      	cbnz	r3, 14dec <le_remote_feat_complete+0x24>
   14dde:	f854 2f03 	ldr.w	r2, [r4, #3]!
   14de2:	6863      	ldr	r3, [r4, #4]
   14de4:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   14de8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   14dec:	1d2b      	adds	r3, r5, #4
   14dee:	f3bf 8f5b 	dmb	ish
   14df2:	e853 2f00 	ldrex	r2, [r3]
   14df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14dfa:	e843 2100 	strex	r1, r2, [r3]
   14dfe:	2900      	cmp	r1, #0
   14e00:	d1f7      	bne.n	14df2 <le_remote_feat_complete+0x2a>
   14e02:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   14e06:	4628      	mov	r0, r5
   14e08:	f7ff fe18 	bl	14a3c <conn_auto_initiate>
	bt_conn_unref(conn);
   14e0c:	4628      	mov	r0, r5
   14e0e:	f00c fb34 	bl	2147a <bt_conn_unref>
}
   14e12:	bd70      	pop	{r4, r5, r6, pc}
   14e14:	4b08      	ldr	r3, [pc, #32]	; (14e38 <le_remote_feat_complete+0x70>)
   14e16:	4a09      	ldr	r2, [pc, #36]	; (14e3c <le_remote_feat_complete+0x74>)
   14e18:	1a9b      	subs	r3, r3, r2
   14e1a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14e1c:	f04f 0200 	mov.w	r2, #0
   14e20:	2101      	movs	r1, #1
   14e22:	f361 0202 	bfi	r2, r1, #0, #3
   14e26:	f36f 02c5 	bfc	r2, #3, #3
   14e2a:	f363 128f 	bfi	r2, r3, #6, #10
   14e2e:	4631      	mov	r1, r6
   14e30:	4803      	ldr	r0, [pc, #12]	; (14e40 <le_remote_feat_complete+0x78>)
   14e32:	f7fc f9d7 	bl	111e4 <log_1>
		return;
   14e36:	e7ec      	b.n	14e12 <le_remote_feat_complete+0x4a>
   14e38:	00024cf8 	.word	0x00024cf8
   14e3c:	00024ca0 	.word	0x00024ca0
   14e40:	00025928 	.word	0x00025928

00014e44 <le_conn_param_neg_reply>:
{
   14e44:	b570      	push	{r4, r5, r6, lr}
   14e46:	4605      	mov	r5, r0
   14e48:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   14e4a:	2103      	movs	r1, #3
   14e4c:	f242 0021 	movw	r0, #8225	; 0x2021
   14e50:	f7ff fa20 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   14e54:	b160      	cbz	r0, 14e70 <le_conn_param_neg_reply+0x2c>
   14e56:	4606      	mov	r6, r0
   14e58:	2103      	movs	r1, #3
   14e5a:	3008      	adds	r0, #8
   14e5c:	f00d ff02 	bl	22c64 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   14e60:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   14e62:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14e64:	4631      	mov	r1, r6
   14e66:	f242 0021 	movw	r0, #8225	; 0x2021
   14e6a:	f7ff fdad 	bl	149c8 <bt_hci_cmd_send>
}
   14e6e:	bd70      	pop	{r4, r5, r6, pc}
   14e70:	4b08      	ldr	r3, [pc, #32]	; (14e94 <le_conn_param_neg_reply+0x50>)
   14e72:	4a09      	ldr	r2, [pc, #36]	; (14e98 <le_conn_param_neg_reply+0x54>)
   14e74:	1a9b      	subs	r3, r3, r2
   14e76:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   14e78:	f04f 0100 	mov.w	r1, #0
   14e7c:	2201      	movs	r2, #1
   14e7e:	f362 0102 	bfi	r1, r2, #0, #3
   14e82:	f36f 01c5 	bfc	r1, #3, #3
   14e86:	f363 118f 	bfi	r1, r3, #6, #10
   14e8a:	4804      	ldr	r0, [pc, #16]	; (14e9c <le_conn_param_neg_reply+0x58>)
   14e8c:	f7fc fa60 	bl	11350 <log_0>
		return;
   14e90:	e7ed      	b.n	14e6e <le_conn_param_neg_reply+0x2a>
   14e92:	bf00      	nop
   14e94:	00024cf8 	.word	0x00024cf8
   14e98:	00024ca0 	.word	0x00024ca0
   14e9c:	00025d58 	.word	0x00025d58

00014ea0 <le_conn_param_req>:
{
   14ea0:	b530      	push	{r4, r5, lr}
   14ea2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   14ea4:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14ea6:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14ea8:	885a      	ldrh	r2, [r3, #2]
   14eaa:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   14eae:	889a      	ldrh	r2, [r3, #4]
   14eb0:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   14eb4:	88da      	ldrh	r2, [r3, #6]
   14eb6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14eba:	891b      	ldrh	r3, [r3, #8]
   14ebc:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   14ec0:	4620      	mov	r0, r4
   14ec2:	f001 fac7 	bl	16454 <bt_conn_lookup_handle>
	if (!conn) {
   14ec6:	b168      	cbz	r0, 14ee4 <le_conn_param_req+0x44>
   14ec8:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   14eca:	4669      	mov	r1, sp
   14ecc:	f001 fc7a 	bl	167c4 <le_param_req>
   14ed0:	b9f0      	cbnz	r0, 14f10 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   14ed2:	211e      	movs	r1, #30
   14ed4:	4620      	mov	r0, r4
   14ed6:	f7ff ffb5 	bl	14e44 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   14eda:	4628      	mov	r0, r5
   14edc:	f00c facd 	bl	2147a <bt_conn_unref>
}
   14ee0:	b003      	add	sp, #12
   14ee2:	bd30      	pop	{r4, r5, pc}
   14ee4:	4b0d      	ldr	r3, [pc, #52]	; (14f1c <le_conn_param_req+0x7c>)
   14ee6:	4a0e      	ldr	r2, [pc, #56]	; (14f20 <le_conn_param_req+0x80>)
   14ee8:	1a9b      	subs	r3, r3, r2
   14eea:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14eec:	f04f 0200 	mov.w	r2, #0
   14ef0:	2101      	movs	r1, #1
   14ef2:	f361 0202 	bfi	r2, r1, #0, #3
   14ef6:	f36f 02c5 	bfc	r2, #3, #3
   14efa:	f363 128f 	bfi	r2, r3, #6, #10
   14efe:	4621      	mov	r1, r4
   14f00:	4808      	ldr	r0, [pc, #32]	; (14f24 <le_conn_param_req+0x84>)
   14f02:	f7fc f96f 	bl	111e4 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   14f06:	2102      	movs	r1, #2
   14f08:	4620      	mov	r0, r4
   14f0a:	f7ff ff9b 	bl	14e44 <le_conn_param_neg_reply>
		return;
   14f0e:	e7e7      	b.n	14ee0 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   14f10:	4669      	mov	r1, sp
   14f12:	4620      	mov	r0, r4
   14f14:	f00c f906 	bl	21124 <le_conn_param_req_reply>
   14f18:	e7df      	b.n	14eda <le_conn_param_req+0x3a>
   14f1a:	bf00      	nop
   14f1c:	00024cf8 	.word	0x00024cf8
   14f20:	00024ca0 	.word	0x00024ca0
   14f24:	00025928 	.word	0x00025928

00014f28 <send_cmd>:
{
   14f28:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14f2a:	2200      	movs	r2, #0
   14f2c:	2300      	movs	r3, #0
   14f2e:	4837      	ldr	r0, [pc, #220]	; (1500c <send_cmd+0xe4>)
   14f30:	f00d fe22 	bl	22b78 <net_buf_get>
	BT_ASSERT(buf);
   14f34:	4604      	mov	r4, r0
   14f36:	b370      	cbz	r0, 14f96 <send_cmd+0x6e>
   14f38:	4d35      	ldr	r5, [pc, #212]	; (15010 <send_cmd+0xe8>)
   14f3a:	f04f 32ff 	mov.w	r2, #4294967295
   14f3e:	f04f 33ff 	mov.w	r3, #4294967295
   14f42:	f505 708c 	add.w	r0, r5, #280	; 0x118
   14f46:	f006 fe7b 	bl	1bc40 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14f4a:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   14f4e:	b1b3      	cbz	r3, 14f7e <send_cmd+0x56>
   14f50:	4b30      	ldr	r3, [pc, #192]	; (15014 <send_cmd+0xec>)
   14f52:	4a31      	ldr	r2, [pc, #196]	; (15018 <send_cmd+0xf0>)
   14f54:	1a9b      	subs	r3, r3, r2
   14f56:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   14f58:	f04f 0100 	mov.w	r1, #0
   14f5c:	2201      	movs	r2, #1
   14f5e:	f362 0102 	bfi	r1, r2, #0, #3
   14f62:	f36f 01c5 	bfc	r1, #3, #3
   14f66:	f363 118f 	bfi	r1, r3, #6, #10
   14f6a:	482c      	ldr	r0, [pc, #176]	; (1501c <send_cmd+0xf4>)
   14f6c:	f7fc f9f0 	bl	11350 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   14f70:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   14f74:	f00d fe2c 	bl	22bd0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14f78:	2300      	movs	r3, #0
   14f7a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   14f7e:	4620      	mov	r0, r4
   14f80:	f00d fe4c 	bl	22c1c <net_buf_ref>
   14f84:	4b22      	ldr	r3, [pc, #136]	; (15010 <send_cmd+0xe8>)
   14f86:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   14f8a:	4620      	mov	r0, r4
   14f8c:	f7ff fd12 	bl	149b4 <bt_send>
	if (err) {
   14f90:	4601      	mov	r1, r0
   14f92:	b970      	cbnz	r0, 14fb2 <send_cmd+0x8a>
}
   14f94:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   14f96:	f640 132a 	movw	r3, #2346	; 0x92a
   14f9a:	4a21      	ldr	r2, [pc, #132]	; (15020 <send_cmd+0xf8>)
   14f9c:	4921      	ldr	r1, [pc, #132]	; (15024 <send_cmd+0xfc>)
   14f9e:	4822      	ldr	r0, [pc, #136]	; (15028 <send_cmd+0x100>)
   14fa0:	f00a fe77 	bl	1fc92 <printk>
   14fa4:	4040      	eors	r0, r0
   14fa6:	f380 8811 	msr	BASEPRI, r0
   14faa:	f04f 0003 	mov.w	r0, #3
   14fae:	df02      	svc	2
   14fb0:	e7c2      	b.n	14f38 <send_cmd+0x10>
   14fb2:	4b18      	ldr	r3, [pc, #96]	; (15014 <send_cmd+0xec>)
   14fb4:	4a18      	ldr	r2, [pc, #96]	; (15018 <send_cmd+0xf0>)
   14fb6:	1a9b      	subs	r3, r3, r2
   14fb8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   14fba:	f04f 0200 	mov.w	r2, #0
   14fbe:	2001      	movs	r0, #1
   14fc0:	f360 0202 	bfi	r2, r0, #0, #3
   14fc4:	f36f 02c5 	bfc	r2, #3, #3
   14fc8:	f363 128f 	bfi	r2, r3, #6, #10
   14fcc:	4817      	ldr	r0, [pc, #92]	; (1502c <send_cmd+0x104>)
   14fce:	f7fc f909 	bl	111e4 <log_1>
	z_impl_k_sem_give(sem);
   14fd2:	4d0f      	ldr	r5, [pc, #60]	; (15010 <send_cmd+0xe8>)
   14fd4:	f505 708c 	add.w	r0, r5, #280	; 0x118
   14fd8:	f006 fe0a 	bl	1bbf0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14fdc:	4620      	mov	r0, r4
   14fde:	f00d fd11 	bl	22a04 <net_buf_id>
   14fe2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14fe6:	4b12      	ldr	r3, [pc, #72]	; (15030 <send_cmd+0x108>)
   14fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14fec:	4622      	mov	r2, r4
   14fee:	211f      	movs	r1, #31
   14ff0:	8840      	ldrh	r0, [r0, #2]
   14ff2:	f7fe fe23 	bl	13c3c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   14ff6:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   14ffa:	f00d fde9 	bl	22bd0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14ffe:	2300      	movs	r3, #0
   15000:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
   15004:	4620      	mov	r0, r4
   15006:	f00d fde3 	bl	22bd0 <net_buf_unref>
   1500a:	e7c3      	b.n	14f94 <send_cmd+0x6c>
   1500c:	200003f4 	.word	0x200003f4
   15010:	200002a8 	.word	0x200002a8
   15014:	00024cf8 	.word	0x00024cf8
   15018:	00024ca0 	.word	0x00024ca0
   1501c:	00025d74 	.word	0x00025d74
   15020:	00025a34 	.word	0x00025a34
   15024:	0002698c 	.word	0x0002698c
   15028:	00025a84 	.word	0x00025a84
   1502c:	00025cc4 	.word	0x00025cc4
   15030:	200025e0 	.word	0x200025e0

00015034 <process_events>:
{
   15034:	b570      	push	{r4, r5, r6, lr}
   15036:	4604      	mov	r4, r0
   15038:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   1503a:	e013      	b.n	15064 <process_events+0x30>
				send_cmd();
   1503c:	f7ff ff74 	bl	14f28 <send_cmd>
   15040:	e00e      	b.n	15060 <process_events+0x2c>
   15042:	4b12      	ldr	r3, [pc, #72]	; (1508c <process_events+0x58>)
   15044:	4a12      	ldr	r2, [pc, #72]	; (15090 <process_events+0x5c>)
   15046:	1a9b      	subs	r3, r3, r2
   15048:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1504a:	2202      	movs	r2, #2
   1504c:	f362 0602 	bfi	r6, r2, #0, #3
   15050:	f36f 06c5 	bfc	r6, #3, #3
   15054:	f363 168f 	bfi	r6, r3, #6, #10
   15058:	4632      	mov	r2, r6
   1505a:	480e      	ldr	r0, [pc, #56]	; (15094 <process_events+0x60>)
   1505c:	f7fc f8c2 	bl	111e4 <log_1>
	for (; count; ev++, count--) {
   15060:	3414      	adds	r4, #20
   15062:	3d01      	subs	r5, #1
   15064:	b185      	cbz	r5, 15088 <process_events+0x54>
		switch (ev->state) {
   15066:	68e1      	ldr	r1, [r4, #12]
   15068:	f3c1 3145 	ubfx	r1, r1, #13, #6
   1506c:	2901      	cmp	r1, #1
   1506e:	d9f7      	bls.n	15060 <process_events+0x2c>
   15070:	2904      	cmp	r1, #4
   15072:	d1e6      	bne.n	15042 <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15074:	7b23      	ldrb	r3, [r4, #12]
   15076:	2b00      	cmp	r3, #0
   15078:	d0e0      	beq.n	1503c <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1507a:	2b01      	cmp	r3, #1
   1507c:	d1f0      	bne.n	15060 <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   1507e:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   15080:	3838      	subs	r0, #56	; 0x38
   15082:	f001 fcab 	bl	169dc <bt_conn_process_tx>
   15086:	e7eb      	b.n	15060 <process_events+0x2c>
}
   15088:	bd70      	pop	{r4, r5, r6, pc}
   1508a:	bf00      	nop
   1508c:	00024cf8 	.word	0x00024cf8
   15090:	00024ca0 	.word	0x00024ca0
   15094:	00025d90 	.word	0x00025d90

00015098 <hci_tx_thread>:
{
   15098:	b538      	push	{r3, r4, r5, lr}
   1509a:	e005      	b.n	150a8 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   1509c:	4621      	mov	r1, r4
   1509e:	4813      	ldr	r0, [pc, #76]	; (150ec <hci_tx_thread+0x54>)
   150a0:	f7ff ffc8 	bl	15034 <process_events>
	z_impl_k_yield();
   150a4:	f007 fac0 	bl	1c628 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   150a8:	4d10      	ldr	r5, [pc, #64]	; (150ec <hci_tx_thread+0x54>)
   150aa:	68eb      	ldr	r3, [r5, #12]
   150ac:	f36f 3352 	bfc	r3, #13, #6
   150b0:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   150b2:	f105 0014 	add.w	r0, r5, #20
   150b6:	f001 f9ab 	bl	16410 <bt_conn_prepare_events>
   150ba:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   150bc:	f04f 32ff 	mov.w	r2, #4294967295
   150c0:	f04f 33ff 	mov.w	r3, #4294967295
   150c4:	4621      	mov	r1, r4
   150c6:	4628      	mov	r0, r5
   150c8:	f007 fe06 	bl	1ccd8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   150cc:	2800      	cmp	r0, #0
   150ce:	d0e5      	beq.n	1509c <hci_tx_thread+0x4>
   150d0:	f640 1393 	movw	r3, #2451	; 0x993
   150d4:	4a06      	ldr	r2, [pc, #24]	; (150f0 <hci_tx_thread+0x58>)
   150d6:	4907      	ldr	r1, [pc, #28]	; (150f4 <hci_tx_thread+0x5c>)
   150d8:	4807      	ldr	r0, [pc, #28]	; (150f8 <hci_tx_thread+0x60>)
   150da:	f00a fdda 	bl	1fc92 <printk>
   150de:	4040      	eors	r0, r0
   150e0:	f380 8811 	msr	BASEPRI, r0
   150e4:	f04f 0003 	mov.w	r0, #3
   150e8:	df02      	svc	2
   150ea:	e7d7      	b.n	1509c <hci_tx_thread+0x4>
   150ec:	2000043c 	.word	0x2000043c
   150f0:	00025a34 	.word	0x00025a34
   150f4:	00025b78 	.word	0x00025b78
   150f8:	00025a84 	.word	0x00025a84

000150fc <hci_event_prio>:
{
   150fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15100:	b084      	sub	sp, #16
   15102:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15104:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15108:	4628      	mov	r0, r5
   1510a:	f00d fde4 	bl	22cd6 <net_buf_simple_headroom>
   1510e:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   15112:	89a3      	ldrh	r3, [r4, #12]
   15114:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15118:	2b01      	cmp	r3, #1
   1511a:	d915      	bls.n	15148 <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1511c:	2102      	movs	r1, #2
   1511e:	4628      	mov	r0, r5
   15120:	f00d fdc1 	bl	22ca6 <net_buf_simple_pull_mem>
   15124:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15126:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   15128:	3b05      	subs	r3, #5
   1512a:	2b15      	cmp	r3, #21
   1512c:	d81c      	bhi.n	15168 <hci_event_prio+0x6c>
   1512e:	e8df f003 	tbb	[pc, r3]
   15132:	1b19      	.short	0x1b19
   15134:	1b1b1b1b 	.word	0x1b1b1b1b
   15138:	3f1b1b1b 	.word	0x3f1b1b1b
   1513c:	1b1b1b3f 	.word	0x1b1b1b3f
   15140:	1b1b1b3f 	.word	0x1b1b1b3f
   15144:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15148:	f640 5327 	movw	r3, #3367	; 0xd27
   1514c:	4a3b      	ldr	r2, [pc, #236]	; (1523c <hci_event_prio+0x140>)
   1514e:	493c      	ldr	r1, [pc, #240]	; (15240 <hci_event_prio+0x144>)
   15150:	483c      	ldr	r0, [pc, #240]	; (15244 <hci_event_prio+0x148>)
   15152:	f00a fd9e 	bl	1fc92 <printk>
   15156:	4040      	eors	r0, r0
   15158:	f380 8811 	msr	BASEPRI, r0
   1515c:	f04f 0003 	mov.w	r0, #3
   15160:	df02      	svc	2
   15162:	e7db      	b.n	1511c <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15164:	2603      	movs	r6, #3
   15166:	e000      	b.n	1516a <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   15168:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1516a:	f016 0f01 	tst.w	r6, #1
   1516e:	d021      	beq.n	151b4 <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15170:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   15172:	2300      	movs	r3, #0
   15174:	2b04      	cmp	r3, #4
   15176:	d83f      	bhi.n	151f8 <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   15178:	4a33      	ldr	r2, [pc, #204]	; (15248 <hci_event_prio+0x14c>)
   1517a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   1517e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   15182:	4295      	cmp	r5, r2
   15184:	d124      	bne.n	151d0 <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   15186:	89a1      	ldrh	r1, [r4, #12]
   15188:	7843      	ldrb	r3, [r0, #1]
   1518a:	4299      	cmp	r1, r3
   1518c:	d322      	bcc.n	151d4 <hci_event_prio+0xd8>
		handler->handler(buf);
   1518e:	6843      	ldr	r3, [r0, #4]
   15190:	4620      	mov	r0, r4
   15192:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15194:	f016 0f02 	tst.w	r6, #2
   15198:	d04c      	beq.n	15234 <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   1519a:	6923      	ldr	r3, [r4, #16]
   1519c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   151a0:	4413      	add	r3, r2
   151a2:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   151a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   151a8:	81a3      	strh	r3, [r4, #12]
}
   151aa:	b004      	add	sp, #16
   151ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   151b0:	2601      	movs	r6, #1
   151b2:	e7da      	b.n	1516a <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   151b4:	f640 532b 	movw	r3, #3371	; 0xd2b
   151b8:	4a20      	ldr	r2, [pc, #128]	; (1523c <hci_event_prio+0x140>)
   151ba:	4924      	ldr	r1, [pc, #144]	; (1524c <hci_event_prio+0x150>)
   151bc:	4821      	ldr	r0, [pc, #132]	; (15244 <hci_event_prio+0x148>)
   151be:	f00a fd68 	bl	1fc92 <printk>
   151c2:	4040      	eors	r0, r0
   151c4:	f380 8811 	msr	BASEPRI, r0
   151c8:	f04f 0003 	mov.w	r0, #3
   151cc:	df02      	svc	2
   151ce:	e7cf      	b.n	15170 <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   151d0:	3301      	adds	r3, #1
   151d2:	e7cf      	b.n	15174 <hci_event_prio+0x78>
   151d4:	4a1e      	ldr	r2, [pc, #120]	; (15250 <hci_event_prio+0x154>)
   151d6:	4b1f      	ldr	r3, [pc, #124]	; (15254 <hci_event_prio+0x158>)
   151d8:	1ad2      	subs	r2, r2, r3
   151da:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   151dc:	f04f 0300 	mov.w	r3, #0
   151e0:	2001      	movs	r0, #1
   151e2:	f360 0302 	bfi	r3, r0, #0, #3
   151e6:	f36f 03c5 	bfc	r3, #3, #3
   151ea:	f362 138f 	bfi	r3, r2, #6, #10
   151ee:	462a      	mov	r2, r5
   151f0:	4819      	ldr	r0, [pc, #100]	; (15258 <hci_event_prio+0x15c>)
   151f2:	f7fc f82d 	bl	11250 <log_2>
			return;
   151f6:	e7cd      	b.n	15194 <hci_event_prio+0x98>
   151f8:	4b15      	ldr	r3, [pc, #84]	; (15250 <hci_event_prio+0x154>)
   151fa:	4a16      	ldr	r2, [pc, #88]	; (15254 <hci_event_prio+0x158>)
   151fc:	1a9b      	subs	r3, r3, r2
   151fe:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15200:	f04f 0700 	mov.w	r7, #0
   15204:	2202      	movs	r2, #2
   15206:	f362 0702 	bfi	r7, r2, #0, #3
   1520a:	f36f 07c5 	bfc	r7, #3, #3
   1520e:	f363 178f 	bfi	r7, r3, #6, #10
   15212:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   15216:	4641      	mov	r1, r8
   15218:	68a0      	ldr	r0, [r4, #8]
   1521a:	f7fe f983 	bl	13524 <bt_hex_real>
   1521e:	f7fb fe69 	bl	10ef4 <z_log_strdup>
   15222:	4603      	mov	r3, r0
   15224:	f8ad 7000 	strh.w	r7, [sp]
   15228:	4642      	mov	r2, r8
   1522a:	4629      	mov	r1, r5
   1522c:	480b      	ldr	r0, [pc, #44]	; (1525c <hci_event_prio+0x160>)
   1522e:	f7fb ff9b 	bl	11168 <log_3>
   15232:	e7af      	b.n	15194 <hci_event_prio+0x98>
		net_buf_unref(buf);
   15234:	4620      	mov	r0, r4
   15236:	f00d fccb 	bl	22bd0 <net_buf_unref>
}
   1523a:	e7b6      	b.n	151aa <hci_event_prio+0xae>
   1523c:	00025a34 	.word	0x00025a34
   15240:	00025a68 	.word	0x00025a68
   15244:	00025a84 	.word	0x00025a84
   15248:	00025edc 	.word	0x00025edc
   1524c:	00025db4 	.word	0x00025db4
   15250:	00024cf8 	.word	0x00024cf8
   15254:	00024ca0 	.word	0x00024ca0
   15258:	00025aec 	.word	0x00025aec
   1525c:	00025b10 	.word	0x00025b10

00015260 <bt_recv>:
{
   15260:	b538      	push	{r3, r4, r5, lr}
   15262:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15264:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15266:	2d01      	cmp	r5, #1
   15268:	d007      	beq.n	1527a <bt_recv+0x1a>
   1526a:	2d03      	cmp	r5, #3
   1526c:	d12c      	bne.n	152c8 <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   1526e:	4601      	mov	r1, r0
   15270:	4821      	ldr	r0, [pc, #132]	; (152f8 <bt_recv+0x98>)
   15272:	f00d fca0 	bl	22bb6 <net_buf_put>
		return 0;
   15276:	2000      	movs	r0, #0
}
   15278:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   1527a:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1527c:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   1527e:	3b05      	subs	r3, #5
   15280:	2b15      	cmp	r3, #21
   15282:	d80e      	bhi.n	152a2 <bt_recv+0x42>
   15284:	e8df f003 	tbb	[pc, r3]
   15288:	0d0d0d0b 	.word	0x0d0d0d0b
   1528c:	0d0d0d0d 	.word	0x0d0d0d0d
   15290:	0d0e0e0d 	.word	0x0d0e0e0d
   15294:	0d0e0d0d 	.word	0x0d0e0d0d
   15298:	0d0d0d0d 	.word	0x0d0d0d0d
   1529c:	0e0d      	.short	0x0e0d
   1529e:	2503      	movs	r5, #3
   152a0:	e000      	b.n	152a4 <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   152a2:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   152a4:	f015 0f01 	tst.w	r5, #1
   152a8:	d104      	bne.n	152b4 <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   152aa:	f015 0f02 	tst.w	r5, #2
   152ae:	d105      	bne.n	152bc <bt_recv+0x5c>
		return 0;
   152b0:	2000      	movs	r0, #0
   152b2:	e7e1      	b.n	15278 <bt_recv+0x18>
			hci_event_prio(buf);
   152b4:	4620      	mov	r0, r4
   152b6:	f7ff ff21 	bl	150fc <hci_event_prio>
   152ba:	e7f6      	b.n	152aa <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   152bc:	4621      	mov	r1, r4
   152be:	480e      	ldr	r0, [pc, #56]	; (152f8 <bt_recv+0x98>)
   152c0:	f00d fc79 	bl	22bb6 <net_buf_put>
		return 0;
   152c4:	2000      	movs	r0, #0
   152c6:	e7d7      	b.n	15278 <bt_recv+0x18>
   152c8:	4b0c      	ldr	r3, [pc, #48]	; (152fc <bt_recv+0x9c>)
   152ca:	4a0d      	ldr	r2, [pc, #52]	; (15300 <bt_recv+0xa0>)
   152cc:	1a9b      	subs	r3, r3, r2
   152ce:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   152d0:	f04f 0200 	mov.w	r2, #0
   152d4:	2101      	movs	r1, #1
   152d6:	f361 0202 	bfi	r2, r1, #0, #3
   152da:	f36f 02c5 	bfc	r2, #3, #3
   152de:	f363 128f 	bfi	r2, r3, #6, #10
   152e2:	4629      	mov	r1, r5
   152e4:	4807      	ldr	r0, [pc, #28]	; (15304 <bt_recv+0xa4>)
   152e6:	f7fb ff7d 	bl	111e4 <log_1>
		net_buf_unref(buf);
   152ea:	4620      	mov	r0, r4
   152ec:	f00d fc70 	bl	22bd0 <net_buf_unref>
		return -EINVAL;
   152f0:	f06f 0015 	mvn.w	r0, #21
   152f4:	e7c0      	b.n	15278 <bt_recv+0x18>
   152f6:	bf00      	nop
   152f8:	200003dc 	.word	0x200003dc
   152fc:	00024cf8 	.word	0x00024cf8
   15300:	00024ca0 	.word	0x00024ca0
   15304:	00025dd0 	.word	0x00025dd0

00015308 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15308:	4b0a      	ldr	r3, [pc, #40]	; (15334 <bt_hci_driver_register+0x2c>)
   1530a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1530e:	b943      	cbnz	r3, 15322 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   15310:	68c3      	ldr	r3, [r0, #12]
   15312:	b14b      	cbz	r3, 15328 <bt_hci_driver_register+0x20>
   15314:	6903      	ldr	r3, [r0, #16]
   15316:	b153      	cbz	r3, 1532e <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   15318:	4b06      	ldr	r3, [pc, #24]	; (15334 <bt_hci_driver_register+0x2c>)
   1531a:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	return 0;
   1531e:	2000      	movs	r0, #0
   15320:	4770      	bx	lr
		return -EALREADY;
   15322:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15326:	4770      	bx	lr
		return -EINVAL;
   15328:	f06f 0015 	mvn.w	r0, #21
   1532c:	4770      	bx	lr
   1532e:	f06f 0015 	mvn.w	r0, #21
}
   15332:	4770      	bx	lr
   15334:	200002a8 	.word	0x200002a8

00015338 <bt_finalize_init>:
{
   15338:	b508      	push	{r3, lr}
   1533a:	4b08      	ldr	r3, [pc, #32]	; (1535c <bt_finalize_init+0x24>)
   1533c:	f3bf 8f5b 	dmb	ish
   15340:	e853 2f00 	ldrex	r2, [r3]
   15344:	f042 0202 	orr.w	r2, r2, #2
   15348:	e843 2100 	strex	r1, r2, [r3]
   1534c:	2900      	cmp	r1, #0
   1534e:	d1f7      	bne.n	15340 <bt_finalize_init+0x8>
   15350:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   15354:	2000      	movs	r0, #0
   15356:	f000 fc23 	bl	15ba0 <bt_le_scan_update>
}
   1535a:	bd08      	pop	{r3, pc}
   1535c:	20000374 	.word	0x20000374

00015360 <init_work>:
{
   15360:	b508      	push	{r3, lr}
	err = bt_init();
   15362:	f00b ff04 	bl	2116e <bt_init>
	if (ready_cb) {
   15366:	4b02      	ldr	r3, [pc, #8]	; (15370 <init_work+0x10>)
   15368:	681b      	ldr	r3, [r3, #0]
   1536a:	b103      	cbz	r3, 1536e <init_work+0xe>
		ready_cb(err);
   1536c:	4798      	blx	r3
}
   1536e:	bd08      	pop	{r3, pc}
   15370:	200025fc 	.word	0x200025fc

00015374 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   15374:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15378:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   1537a:	4b41      	ldr	r3, [pc, #260]	; (15480 <bt_enable+0x10c>)
   1537c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   15380:	2b00      	cmp	r3, #0
   15382:	d050      	beq.n	15426 <bt_enable+0xb2>
   15384:	4605      	mov	r5, r0
   15386:	4b3f      	ldr	r3, [pc, #252]	; (15484 <bt_enable+0x110>)
   15388:	f3bf 8f5b 	dmb	ish
   1538c:	e853 2f00 	ldrex	r2, [r3]
   15390:	f042 0101 	orr.w	r1, r2, #1
   15394:	e843 1000 	strex	r0, r1, [r3]
   15398:	2800      	cmp	r0, #0
   1539a:	d1f7      	bne.n	1538c <bt_enable+0x18>
   1539c:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   153a0:	f012 0f01 	tst.w	r2, #1
   153a4:	d168      	bne.n	15478 <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   153a6:	4b38      	ldr	r3, [pc, #224]	; (15488 <bt_enable+0x114>)
   153a8:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   153aa:	f04f 0800 	mov.w	r8, #0
   153ae:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   153b2:	4e36      	ldr	r6, [pc, #216]	; (1548c <bt_enable+0x118>)
   153b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   153b8:	2400      	movs	r4, #0
   153ba:	9404      	str	r4, [sp, #16]
   153bc:	f06f 0308 	mvn.w	r3, #8
   153c0:	9303      	str	r3, [sp, #12]
   153c2:	9402      	str	r4, [sp, #8]
   153c4:	9401      	str	r4, [sp, #4]
   153c6:	9400      	str	r4, [sp, #0]
   153c8:	4b31      	ldr	r3, [pc, #196]	; (15490 <bt_enable+0x11c>)
   153ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   153ce:	4931      	ldr	r1, [pc, #196]	; (15494 <bt_enable+0x120>)
   153d0:	4630      	mov	r0, r6
   153d2:	f00e fcf2 	bl	23dba <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   153d6:	4930      	ldr	r1, [pc, #192]	; (15498 <bt_enable+0x124>)
   153d8:	4630      	mov	r0, r6
   153da:	f006 fa11 	bl	1b800 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   153de:	4e2f      	ldr	r6, [pc, #188]	; (1549c <bt_enable+0x128>)
   153e0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   153e4:	9404      	str	r4, [sp, #16]
   153e6:	f06f 0307 	mvn.w	r3, #7
   153ea:	9303      	str	r3, [sp, #12]
   153ec:	9402      	str	r4, [sp, #8]
   153ee:	9401      	str	r4, [sp, #4]
   153f0:	9400      	str	r4, [sp, #0]
   153f2:	4b2b      	ldr	r3, [pc, #172]	; (154a0 <bt_enable+0x12c>)
   153f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   153f8:	492a      	ldr	r1, [pc, #168]	; (154a4 <bt_enable+0x130>)
   153fa:	4630      	mov	r0, r6
   153fc:	f00e fcdd 	bl	23dba <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15400:	4929      	ldr	r1, [pc, #164]	; (154a8 <bt_enable+0x134>)
   15402:	4630      	mov	r0, r6
   15404:	f006 f9fc 	bl	1b800 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   15408:	4b1d      	ldr	r3, [pc, #116]	; (15480 <bt_enable+0x10c>)
   1540a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1540e:	68db      	ldr	r3, [r3, #12]
   15410:	4798      	blx	r3
	if (err) {
   15412:	4604      	mov	r4, r0
   15414:	b9d0      	cbnz	r0, 1544c <bt_enable+0xd8>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   15416:	b35d      	cbz	r5, 15470 <bt_enable+0xfc>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   15418:	4824      	ldr	r0, [pc, #144]	; (154ac <bt_enable+0x138>)
   1541a:	f006 fdb3 	bl	1bf84 <k_work_submit>
	return 0;
}
   1541e:	4620      	mov	r0, r4
   15420:	b008      	add	sp, #32
   15422:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   15426:	4b22      	ldr	r3, [pc, #136]	; (154b0 <bt_enable+0x13c>)
   15428:	4a22      	ldr	r2, [pc, #136]	; (154b4 <bt_enable+0x140>)
   1542a:	1a9b      	subs	r3, r3, r2
   1542c:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   1542e:	f04f 0100 	mov.w	r1, #0
   15432:	2201      	movs	r2, #1
   15434:	f362 0102 	bfi	r1, r2, #0, #3
   15438:	f36f 01c5 	bfc	r1, #3, #3
   1543c:	f363 118f 	bfi	r1, r3, #6, #10
   15440:	481d      	ldr	r0, [pc, #116]	; (154b8 <bt_enable+0x144>)
   15442:	f7fb ff85 	bl	11350 <log_0>
		return -ENODEV;
   15446:	f06f 0412 	mvn.w	r4, #18
   1544a:	e7e8      	b.n	1541e <bt_enable+0xaa>
   1544c:	4b18      	ldr	r3, [pc, #96]	; (154b0 <bt_enable+0x13c>)
   1544e:	4a19      	ldr	r2, [pc, #100]	; (154b4 <bt_enable+0x140>)
   15450:	1a9b      	subs	r3, r3, r2
   15452:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   15454:	f04f 0200 	mov.w	r2, #0
   15458:	2101      	movs	r1, #1
   1545a:	f361 0202 	bfi	r2, r1, #0, #3
   1545e:	f36f 02c5 	bfc	r2, #3, #3
   15462:	f363 128f 	bfi	r2, r3, #6, #10
   15466:	4601      	mov	r1, r0
   15468:	4814      	ldr	r0, [pc, #80]	; (154bc <bt_enable+0x148>)
   1546a:	f7fb febb 	bl	111e4 <log_1>
		return err;
   1546e:	e7d6      	b.n	1541e <bt_enable+0xaa>
		return bt_init();
   15470:	f00b fe7d 	bl	2116e <bt_init>
   15474:	4604      	mov	r4, r0
   15476:	e7d2      	b.n	1541e <bt_enable+0xaa>
		return -EALREADY;
   15478:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1547c:	e7cf      	b.n	1541e <bt_enable+0xaa>
   1547e:	bf00      	nop
   15480:	200002a8 	.word	0x200002a8
   15484:	20000374 	.word	0x20000374
   15488:	200025fc 	.word	0x200025fc
   1548c:	20001788 	.word	0x20001788
   15490:	00015099 	.word	0x00015099
   15494:	20003fc0 	.word	0x20003fc0
   15498:	00025e00 	.word	0x00025e00
   1549c:	200016d0 	.word	0x200016d0
   154a0:	0001420d 	.word	0x0001420d
   154a4:	20003ba0 	.word	0x20003ba0
   154a8:	00025e08 	.word	0x00025e08
   154ac:	20000364 	.word	0x20000364
   154b0:	00024cf8 	.word	0x00024cf8
   154b4:	00024ca0 	.word	0x00024ca0
   154b8:	00025de4 	.word	0x00025de4
   154bc:	00025e10 	.word	0x00025e10

000154c0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   154c0:	4800      	ldr	r0, [pc, #0]	; (154c4 <bt_get_name+0x4>)
   154c2:	4770      	bx	lr
   154c4:	00025e2c 	.word	0x00025e2c

000154c8 <bt_le_filter_accept_list_add>:
	}
}

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_filter_accept_list_add(const bt_addr_le_t *addr)
{
   154c8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   154ca:	f3bf 8f5b 	dmb	ish
   154ce:	4b1d      	ldr	r3, [pc, #116]	; (15544 <bt_le_filter_accept_list_add+0x7c>)
   154d0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   154d4:	f3bf 8f5b 	dmb	ish
	struct bt_hci_cp_le_add_dev_to_fal *cp;
	struct net_buf *buf;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   154d8:	f013 0f02 	tst.w	r3, #2
   154dc:	d02c      	beq.n	15538 <bt_le_filter_accept_list_add+0x70>
   154de:	4604      	mov	r4, r0
		return -EAGAIN;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_FAL, sizeof(*cp));
   154e0:	2107      	movs	r1, #7
   154e2:	f242 0011 	movw	r0, #8209	; 0x2011
   154e6:	f7fe fed5 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   154ea:	4605      	mov	r5, r0
   154ec:	b338      	cbz	r0, 1553e <bt_le_filter_accept_list_add+0x76>
	return net_buf_simple_add(&buf->b, len);
   154ee:	2107      	movs	r1, #7
   154f0:	3008      	adds	r0, #8
   154f2:	f00d fbb7 	bl	22c64 <net_buf_simple_add>
   154f6:	6823      	ldr	r3, [r4, #0]
   154f8:	6003      	str	r3, [r0, #0]
   154fa:	88a2      	ldrh	r2, [r4, #4]
   154fc:	79a3      	ldrb	r3, [r4, #6]
   154fe:	8082      	strh	r2, [r0, #4]
   15500:	7183      	strb	r3, [r0, #6]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->addr, addr);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_FAL, buf, NULL);
   15502:	2200      	movs	r2, #0
   15504:	4629      	mov	r1, r5
   15506:	f242 0011 	movw	r0, #8209	; 0x2011
   1550a:	f7fe feff 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   1550e:	4604      	mov	r4, r0
   15510:	b908      	cbnz	r0, 15516 <bt_le_filter_accept_list_add+0x4e>

		return err;
	}

	return 0;
}
   15512:	4620      	mov	r0, r4
   15514:	bd38      	pop	{r3, r4, r5, pc}
   15516:	4b0c      	ldr	r3, [pc, #48]	; (15548 <bt_le_filter_accept_list_add+0x80>)
   15518:	4a0c      	ldr	r2, [pc, #48]	; (1554c <bt_le_filter_accept_list_add+0x84>)
   1551a:	1a9b      	subs	r3, r3, r2
   1551c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to add device to filter accept list");
   1551e:	f04f 0100 	mov.w	r1, #0
   15522:	2201      	movs	r2, #1
   15524:	f362 0102 	bfi	r1, r2, #0, #3
   15528:	f36f 01c5 	bfc	r1, #3, #3
   1552c:	f363 118f 	bfi	r1, r3, #6, #10
   15530:	4807      	ldr	r0, [pc, #28]	; (15550 <bt_le_filter_accept_list_add+0x88>)
   15532:	f7fb ff0d 	bl	11350 <log_0>
		return err;
   15536:	e7ec      	b.n	15512 <bt_le_filter_accept_list_add+0x4a>
		return -EAGAIN;
   15538:	f06f 040a 	mvn.w	r4, #10
   1553c:	e7e9      	b.n	15512 <bt_le_filter_accept_list_add+0x4a>
		return -ENOBUFS;
   1553e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15542:	e7e6      	b.n	15512 <bt_le_filter_accept_list_add+0x4a>
   15544:	200002a8 	.word	0x200002a8
   15548:	00024cf8 	.word	0x00024cf8
   1554c:	00024ca0 	.word	0x00024ca0
   15550:	00025e34 	.word	0x00025e34

00015554 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   15554:	b570      	push	{r4, r5, r6, lr}
   15556:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   15558:	2400      	movs	r4, #0
   1555a:	4b0a      	ldr	r3, [pc, #40]	; (15584 <id_find+0x30>)
   1555c:	79db      	ldrb	r3, [r3, #7]
   1555e:	42a3      	cmp	r3, r4
   15560:	d90c      	bls.n	1557c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   15562:	4626      	mov	r6, r4
   15564:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   15568:	2207      	movs	r2, #7
   1556a:	4b06      	ldr	r3, [pc, #24]	; (15584 <id_find+0x30>)
   1556c:	4419      	add	r1, r3
   1556e:	4628      	mov	r0, r5
   15570:	f00f f9b4 	bl	248dc <memcmp>
   15574:	b120      	cbz	r0, 15580 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   15576:	3401      	adds	r4, #1
   15578:	b2e4      	uxtb	r4, r4
   1557a:	e7ee      	b.n	1555a <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   1557c:	f06f 0601 	mvn.w	r6, #1
}
   15580:	4630      	mov	r0, r6
   15582:	bd70      	pop	{r4, r5, r6, pc}
   15584:	200002a8 	.word	0x200002a8

00015588 <set_random_address>:
{
   15588:	b538      	push	{r3, r4, r5, lr}
   1558a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1558c:	2206      	movs	r2, #6
   1558e:	4913      	ldr	r1, [pc, #76]	; (155dc <set_random_address+0x54>)
   15590:	f00f f9a4 	bl	248dc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15594:	b900      	cbnz	r0, 15598 <set_random_address+0x10>
}
   15596:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   15598:	2106      	movs	r1, #6
   1559a:	f242 0005 	movw	r0, #8197	; 0x2005
   1559e:	f7fe fe79 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   155a2:	4605      	mov	r5, r0
   155a4:	b1b8      	cbz	r0, 155d6 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   155a6:	2206      	movs	r2, #6
   155a8:	4621      	mov	r1, r4
   155aa:	3008      	adds	r0, #8
   155ac:	f00d fb60 	bl	22c70 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   155b0:	2200      	movs	r2, #0
   155b2:	4629      	mov	r1, r5
   155b4:	f242 0005 	movw	r0, #8197	; 0x2005
   155b8:	f7fe fea8 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   155bc:	2800      	cmp	r0, #0
   155be:	d1ea      	bne.n	15596 <set_random_address+0xe>
	memcpy(dst, src, sizeof(*dst));
   155c0:	4b07      	ldr	r3, [pc, #28]	; (155e0 <set_random_address+0x58>)
   155c2:	6822      	ldr	r2, [r4, #0]
   155c4:	f8c3 2061 	str.w	r2, [r3, #97]	; 0x61
   155c8:	88a2      	ldrh	r2, [r4, #4]
   155ca:	f8a3 2065 	strh.w	r2, [r3, #101]	; 0x65
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   155ce:	2201      	movs	r2, #1
   155d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	return 0;
   155d4:	e7df      	b.n	15596 <set_random_address+0xe>
		return -ENOBUFS;
   155d6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   155da:	e7dc      	b.n	15596 <set_random_address+0xe>
   155dc:	20000309 	.word	0x20000309
   155e0:	200002a8 	.word	0x200002a8

000155e4 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   155e4:	b530      	push	{r4, r5, lr}
   155e6:	b085      	sub	sp, #20
   155e8:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   155ea:	460d      	mov	r5, r1
   155ec:	b149      	cbz	r1, 15602 <id_create+0x1e>
   155ee:	2300      	movs	r3, #0
   155f0:	9302      	str	r3, [sp, #8]
   155f2:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   155f6:	2207      	movs	r2, #7
   155f8:	a902      	add	r1, sp, #8
   155fa:	4628      	mov	r0, r5
   155fc:	f00f f96e 	bl	248dc <memcmp>
   15600:	bb00      	cbnz	r0, 15644 <id_create+0x60>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   15602:	4668      	mov	r0, sp
   15604:	f00b fc69 	bl	20eda <bt_addr_le_create_static>
			if (err) {
   15608:	4603      	mov	r3, r0
   1560a:	b9c0      	cbnz	r0, 1563e <id_create+0x5a>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   1560c:	4668      	mov	r0, sp
   1560e:	f7ff ffa1 	bl	15554 <id_find>
   15612:	2800      	cmp	r0, #0
   15614:	daf5      	bge.n	15602 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   15616:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1561a:	4a10      	ldr	r2, [pc, #64]	; (1565c <id_create+0x78>)
   1561c:	18a3      	adds	r3, r4, r2
   1561e:	9800      	ldr	r0, [sp, #0]
   15620:	50a0      	str	r0, [r4, r2]
   15622:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   15626:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1562a:	8099      	strh	r1, [r3, #4]
   1562c:	719a      	strb	r2, [r3, #6]

		if (addr) {
   1562e:	b12d      	cbz	r5, 1563c <id_create+0x58>
   15630:	681a      	ldr	r2, [r3, #0]
   15632:	602a      	str	r2, [r5, #0]
   15634:	889a      	ldrh	r2, [r3, #4]
   15636:	799b      	ldrb	r3, [r3, #6]
   15638:	80aa      	strh	r2, [r5, #4]
   1563a:	71ab      	strb	r3, [r5, #6]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1563c:	2300      	movs	r3, #0
}
   1563e:	4618      	mov	r0, r3
   15640:	b005      	add	sp, #20
   15642:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   15644:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15648:	4a04      	ldr	r2, [pc, #16]	; (1565c <id_create+0x78>)
   1564a:	18a3      	adds	r3, r4, r2
   1564c:	6829      	ldr	r1, [r5, #0]
   1564e:	50a1      	str	r1, [r4, r2]
   15650:	88a9      	ldrh	r1, [r5, #4]
   15652:	79aa      	ldrb	r2, [r5, #6]
   15654:	8099      	strh	r1, [r3, #4]
   15656:	719a      	strb	r2, [r3, #6]
}
   15658:	e7f0      	b.n	1563c <id_create+0x58>
   1565a:	bf00      	nop
   1565c:	200002a8 	.word	0x200002a8

00015660 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15660:	b570      	push	{r4, r5, r6, lr}
   15662:	b084      	sub	sp, #16
   15664:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15666:	4605      	mov	r5, r0
   15668:	b340      	cbz	r0, 156bc <bt_id_create+0x5c>
   1566a:	2300      	movs	r3, #0
   1566c:	9300      	str	r3, [sp, #0]
   1566e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   15672:	2207      	movs	r2, #7
   15674:	4669      	mov	r1, sp
   15676:	f00f f931 	bl	248dc <memcmp>
   1567a:	b1f8      	cbz	r0, 156bc <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1567c:	782b      	ldrb	r3, [r5, #0]
   1567e:	2b01      	cmp	r3, #1
   15680:	d104      	bne.n	1568c <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   15682:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15684:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15688:	2bc0      	cmp	r3, #192	; 0xc0
   1568a:	d012      	beq.n	156b2 <bt_id_create+0x52>
   1568c:	4b24      	ldr	r3, [pc, #144]	; (15720 <bt_id_create+0xc0>)
   1568e:	4a25      	ldr	r2, [pc, #148]	; (15724 <bt_id_create+0xc4>)
   15690:	1a9b      	subs	r3, r3, r2
   15692:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   15694:	f04f 0100 	mov.w	r1, #0
   15698:	2201      	movs	r2, #1
   1569a:	f362 0102 	bfi	r1, r2, #0, #3
   1569e:	f36f 01c5 	bfc	r1, #3, #3
   156a2:	f363 118f 	bfi	r1, r3, #6, #10
   156a6:	4820      	ldr	r0, [pc, #128]	; (15728 <bt_id_create+0xc8>)
   156a8:	f7fb fe52 	bl	11350 <log_0>
			return -EINVAL;
   156ac:	f06f 0015 	mvn.w	r0, #21
   156b0:	e028      	b.n	15704 <bt_id_create+0xa4>
		}

		if (id_find(addr) >= 0) {
   156b2:	4628      	mov	r0, r5
   156b4:	f7ff ff4e 	bl	15554 <id_find>
   156b8:	2800      	cmp	r0, #0
   156ba:	da25      	bge.n	15708 <bt_id_create+0xa8>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   156bc:	bb54      	cbnz	r4, 15714 <bt_id_create+0xb4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   156be:	4b1b      	ldr	r3, [pc, #108]	; (1572c <bt_id_create+0xcc>)
   156c0:	79db      	ldrb	r3, [r3, #7]
   156c2:	2b01      	cmp	r3, #1
   156c4:	d029      	beq.n	1571a <bt_id_create+0xba>
   156c6:	f3bf 8f5b 	dmb	ish
   156ca:	4b19      	ldr	r3, [pc, #100]	; (15730 <bt_id_create+0xd0>)
   156cc:	681b      	ldr	r3, [r3, #0]
   156ce:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   156d2:	f013 0f01 	tst.w	r3, #1
   156d6:	d10a      	bne.n	156ee <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   156d8:	b1cd      	cbz	r5, 1570e <bt_id_create+0xae>
   156da:	2300      	movs	r3, #0
   156dc:	9302      	str	r3, [sp, #8]
   156de:	f8cd 300b 	str.w	r3, [sp, #11]
   156e2:	2207      	movs	r2, #7
   156e4:	a902      	add	r1, sp, #8
   156e6:	4628      	mov	r0, r5
   156e8:	f00f f8f8 	bl	248dc <memcmp>
   156ec:	b178      	cbz	r0, 1570e <bt_id_create+0xae>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   156ee:	4b0f      	ldr	r3, [pc, #60]	; (1572c <bt_id_create+0xcc>)
   156f0:	79de      	ldrb	r6, [r3, #7]
   156f2:	1c72      	adds	r2, r6, #1
   156f4:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   156f6:	4622      	mov	r2, r4
   156f8:	4629      	mov	r1, r5
   156fa:	4630      	mov	r0, r6
   156fc:	f7ff ff72 	bl	155e4 <id_create>
	if (err) {
   15700:	b900      	cbnz	r0, 15704 <bt_id_create+0xa4>
		return err;
	}

	return new_id;
   15702:	4630      	mov	r0, r6
}
   15704:	b004      	add	sp, #16
   15706:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   15708:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1570c:	e7fa      	b.n	15704 <bt_id_create+0xa4>
			return -EINVAL;
   1570e:	f06f 0015 	mvn.w	r0, #21
   15712:	e7f7      	b.n	15704 <bt_id_create+0xa4>
		return -EINVAL;
   15714:	f06f 0015 	mvn.w	r0, #21
   15718:	e7f4      	b.n	15704 <bt_id_create+0xa4>
		return -ENOMEM;
   1571a:	f06f 000b 	mvn.w	r0, #11
   1571e:	e7f1      	b.n	15704 <bt_id_create+0xa4>
   15720:	00024d00 	.word	0x00024d00
   15724:	00024ca0 	.word	0x00024ca0
   15728:	00025f04 	.word	0x00025f04
   1572c:	200002a8 	.word	0x200002a8
   15730:	20000374 	.word	0x20000374

00015734 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   15734:	b530      	push	{r4, r5, lr}
   15736:	b087      	sub	sp, #28
   15738:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1573a:	aa01      	add	r2, sp, #4
   1573c:	2100      	movs	r1, #0
   1573e:	f241 0009 	movw	r0, #4105	; 0x1009
   15742:	f7fe fde3 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   15746:	b9f0      	cbnz	r0, 15786 <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   15748:	9b01      	ldr	r3, [sp, #4]
   1574a:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1574c:	3401      	adds	r4, #1
   1574e:	2300      	movs	r3, #0
   15750:	9302      	str	r3, [sp, #8]
   15752:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   15756:	2206      	movs	r2, #6
   15758:	a902      	add	r1, sp, #8
   1575a:	4620      	mov	r0, r4
   1575c:	f00f f8be 	bl	248dc <memcmp>
   15760:	b158      	cbz	r0, 1577a <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   15762:	4b18      	ldr	r3, [pc, #96]	; (157c4 <bt_id_read_public_addr+0x90>)
   15764:	e893 0003 	ldmia.w	r3, {r0, r1}
   15768:	9004      	str	r0, [sp, #16]
   1576a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1576e:	2206      	movs	r2, #6
   15770:	a904      	add	r1, sp, #16
   15772:	4620      	mov	r0, r4
   15774:	f00f f8b2 	bl	248dc <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15778:	b9b8      	cbnz	r0, 157aa <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1577a:	9801      	ldr	r0, [sp, #4]
   1577c:	f00d fa28 	bl	22bd0 <net_buf_unref>
		return 0U;
   15780:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   15782:	b007      	add	sp, #28
   15784:	bd30      	pop	{r4, r5, pc}
   15786:	4b10      	ldr	r3, [pc, #64]	; (157c8 <bt_id_read_public_addr+0x94>)
   15788:	4a10      	ldr	r2, [pc, #64]	; (157cc <bt_id_read_public_addr+0x98>)
   1578a:	1a9b      	subs	r3, r3, r2
   1578c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   1578e:	f04f 0100 	mov.w	r1, #0
   15792:	2202      	movs	r2, #2
   15794:	f362 0102 	bfi	r1, r2, #0, #3
   15798:	f36f 01c5 	bfc	r1, #3, #3
   1579c:	f363 118f 	bfi	r1, r3, #6, #10
   157a0:	480b      	ldr	r0, [pc, #44]	; (157d0 <bt_id_read_public_addr+0x9c>)
   157a2:	f7fb fdd5 	bl	11350 <log_0>
		return 0U;
   157a6:	2000      	movs	r0, #0
   157a8:	e7eb      	b.n	15782 <bt_id_read_public_addr+0x4e>
   157aa:	6823      	ldr	r3, [r4, #0]
   157ac:	f8c5 3001 	str.w	r3, [r5, #1]
   157b0:	88a3      	ldrh	r3, [r4, #4]
   157b2:	f8a5 3005 	strh.w	r3, [r5, #5]
	addr->type = BT_ADDR_LE_PUBLIC;
   157b6:	2300      	movs	r3, #0
   157b8:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   157ba:	9801      	ldr	r0, [sp, #4]
   157bc:	f00d fa08 	bl	22bd0 <net_buf_unref>
	return 1U;
   157c0:	2001      	movs	r0, #1
   157c2:	e7de      	b.n	15782 <bt_id_read_public_addr+0x4e>
   157c4:	00024e64 	.word	0x00024e64
   157c8:	00024d00 	.word	0x00024d00
   157cc:	00024ca0 	.word	0x00024ca0
   157d0:	00025f34 	.word	0x00025f34

000157d4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   157d4:	b500      	push	{lr}
   157d6:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   157d8:	4668      	mov	r0, sp
   157da:	f7ff ffab 	bl	15734 <bt_id_read_public_addr>
   157de:	4b06      	ldr	r3, [pc, #24]	; (157f8 <bt_setup_public_id_addr+0x24>)
   157e0:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   157e2:	b918      	cbnz	r0, 157ec <bt_setup_public_id_addr+0x18>
		return 0;
   157e4:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   157e6:	b003      	add	sp, #12
   157e8:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   157ec:	2200      	movs	r2, #0
   157ee:	4669      	mov	r1, sp
   157f0:	4610      	mov	r0, r2
   157f2:	f7ff fef7 	bl	155e4 <id_create>
   157f6:	e7f6      	b.n	157e6 <bt_setup_public_id_addr+0x12>
   157f8:	200002a8 	.word	0x200002a8

000157fc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   157fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15800:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15802:	4b37      	ldr	r3, [pc, #220]	; (158e0 <bt_read_static_addr+0xe4>)
   15804:	f893 60ba 	ldrb.w	r6, [r3, #186]	; 0xba
   15808:	f016 0601 	ands.w	r6, r6, #1
   1580c:	d012      	beq.n	15834 <bt_read_static_addr+0x38>
   1580e:	4607      	mov	r7, r0
   15810:	460d      	mov	r5, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   15812:	aa01      	add	r2, sp, #4
   15814:	2100      	movs	r1, #0
   15816:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1581a:	f7fe fd77 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   1581e:	4604      	mov	r4, r0
   15820:	b9c8      	cbnz	r0, 15856 <bt_read_static_addr+0x5a>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   15822:	9b01      	ldr	r3, [sp, #4]
   15824:	f8d3 8008 	ldr.w	r8, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   15828:	f898 6001 	ldrb.w	r6, [r8, #1]
   1582c:	42ae      	cmp	r6, r5
   1582e:	bf28      	it	cs
   15830:	462e      	movcs	r6, r5
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   15832:	e039      	b.n	158a8 <bt_read_static_addr+0xac>
   15834:	4b2b      	ldr	r3, [pc, #172]	; (158e4 <bt_read_static_addr+0xe8>)
   15836:	4a2c      	ldr	r2, [pc, #176]	; (158e8 <bt_read_static_addr+0xec>)
   15838:	1a9b      	subs	r3, r3, r2
   1583a:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   1583c:	f04f 0100 	mov.w	r1, #0
   15840:	2202      	movs	r2, #2
   15842:	f362 0102 	bfi	r1, r2, #0, #3
   15846:	f36f 01c5 	bfc	r1, #3, #3
   1584a:	f363 118f 	bfi	r1, r3, #6, #10
   1584e:	4827      	ldr	r0, [pc, #156]	; (158ec <bt_read_static_addr+0xf0>)
   15850:	f7fb fd7e 	bl	11350 <log_0>
		return 0;
   15854:	e02e      	b.n	158b4 <bt_read_static_addr+0xb8>
   15856:	4b23      	ldr	r3, [pc, #140]	; (158e4 <bt_read_static_addr+0xe8>)
   15858:	4a23      	ldr	r2, [pc, #140]	; (158e8 <bt_read_static_addr+0xec>)
   1585a:	1a9b      	subs	r3, r3, r2
   1585c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   1585e:	f04f 0100 	mov.w	r1, #0
   15862:	2202      	movs	r2, #2
   15864:	f362 0102 	bfi	r1, r2, #0, #3
   15868:	f36f 01c5 	bfc	r1, #3, #3
   1586c:	f363 118f 	bfi	r1, r3, #6, #10
   15870:	481f      	ldr	r0, [pc, #124]	; (158f0 <bt_read_static_addr+0xf4>)
   15872:	f7fb fd6d 	bl	11350 <log_0>
		return 0;
   15876:	2600      	movs	r6, #0
   15878:	e01c      	b.n	158b4 <bt_read_static_addr+0xb8>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1587a:	2116      	movs	r1, #22
   1587c:	fb01 f104 	mul.w	r1, r1, r4
   15880:	187a      	adds	r2, r7, r1
   15882:	4643      	mov	r3, r8
   15884:	f853 5f02 	ldr.w	r5, [r3, #2]!
   15888:	f8d3 e004 	ldr.w	lr, [r3, #4]
   1588c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   15890:	68d8      	ldr	r0, [r3, #12]
   15892:	507d      	str	r5, [r7, r1]
   15894:	f8c2 e004 	str.w	lr, [r2, #4]
   15898:	f8c2 c008 	str.w	ip, [r2, #8]
   1589c:	60d0      	str	r0, [r2, #12]
   1589e:	691d      	ldr	r5, [r3, #16]
   158a0:	6115      	str	r5, [r2, #16]
   158a2:	8a9b      	ldrh	r3, [r3, #20]
   158a4:	8293      	strh	r3, [r2, #20]
	for (i = 0; i < cnt; i++) {
   158a6:	3401      	adds	r4, #1
   158a8:	42a6      	cmp	r6, r4
   158aa:	dce6      	bgt.n	1587a <bt_read_static_addr+0x7e>
	}

	net_buf_unref(rsp);
   158ac:	9801      	ldr	r0, [sp, #4]
   158ae:	f00d f98f 	bl	22bd0 <net_buf_unref>
	if (!cnt) {
   158b2:	b11e      	cbz	r6, 158bc <bt_read_static_addr+0xc0>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   158b4:	4630      	mov	r0, r6
   158b6:	b002      	add	sp, #8
   158b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   158bc:	4b09      	ldr	r3, [pc, #36]	; (158e4 <bt_read_static_addr+0xe8>)
   158be:	4a0a      	ldr	r2, [pc, #40]	; (158e8 <bt_read_static_addr+0xec>)
   158c0:	1a9b      	subs	r3, r3, r2
   158c2:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   158c4:	f04f 0100 	mov.w	r1, #0
   158c8:	2202      	movs	r2, #2
   158ca:	f362 0102 	bfi	r1, r2, #0, #3
   158ce:	f36f 01c5 	bfc	r1, #3, #3
   158d2:	f363 118f 	bfi	r1, r3, #6, #10
   158d6:	4807      	ldr	r0, [pc, #28]	; (158f4 <bt_read_static_addr+0xf8>)
   158d8:	f7fb fd3a 	bl	11350 <log_0>
   158dc:	e7ea      	b.n	158b4 <bt_read_static_addr+0xb8>
   158de:	bf00      	nop
   158e0:	200002a8 	.word	0x200002a8
   158e4:	00024d00 	.word	0x00024d00
   158e8:	00024ca0 	.word	0x00024ca0
   158ec:	00025f54 	.word	0x00025f54
   158f0:	00025f80 	.word	0x00025f80
   158f4:	00025fa0 	.word	0x00025fa0

000158f8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   158f8:	b510      	push	{r4, lr}
   158fa:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   158fc:	4b17      	ldr	r3, [pc, #92]	; (1595c <bt_setup_random_id_addr+0x64>)
   158fe:	79dc      	ldrb	r4, [r3, #7]
   15900:	b934      	cbnz	r4, 15910 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   15902:	2101      	movs	r1, #1
   15904:	a802      	add	r0, sp, #8
   15906:	f7ff ff79 	bl	157fc <bt_read_static_addr>
   1590a:	4b14      	ldr	r3, [pc, #80]	; (1595c <bt_setup_random_id_addr+0x64>)
   1590c:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   1590e:	b938      	cbnz	r0, 15920 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   15910:	2100      	movs	r1, #0
   15912:	4608      	mov	r0, r1
   15914:	f7ff fea4 	bl	15660 <bt_id_create>
   15918:	4603      	mov	r3, r0
}
   1591a:	4618      	mov	r0, r3
   1591c:	b008      	add	sp, #32
   1591e:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15920:	4b0e      	ldr	r3, [pc, #56]	; (1595c <bt_setup_random_id_addr+0x64>)
   15922:	79db      	ldrb	r3, [r3, #7]
   15924:	42a3      	cmp	r3, r4
   15926:	d917      	bls.n	15958 <bt_setup_random_id_addr+0x60>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   15928:	2316      	movs	r3, #22
   1592a:	aa02      	add	r2, sp, #8
   1592c:	fb03 2304 	mla	r3, r3, r4, r2
	memcpy(dst, src, sizeof(*dst));
   15930:	681a      	ldr	r2, [r3, #0]
   15932:	f8cd 2001 	str.w	r2, [sp, #1]
   15936:	889b      	ldrh	r3, [r3, #4]
   15938:	f8ad 3005 	strh.w	r3, [sp, #5]
				addr.type = BT_ADDR_LE_RANDOM;
   1593c:	2301      	movs	r3, #1
   1593e:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   15942:	2200      	movs	r2, #0
   15944:	4669      	mov	r1, sp
   15946:	4620      	mov	r0, r4
   15948:	f7ff fe4c 	bl	155e4 <id_create>
				if (err) {
   1594c:	4603      	mov	r3, r0
   1594e:	2800      	cmp	r0, #0
   15950:	d1e3      	bne.n	1591a <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15952:	3401      	adds	r4, #1
   15954:	b2e4      	uxtb	r4, r4
   15956:	e7e3      	b.n	15920 <bt_setup_random_id_addr+0x28>
			return 0;
   15958:	2300      	movs	r3, #0
   1595a:	e7de      	b.n	1591a <bt_setup_random_id_addr+0x22>
   1595c:	200002a8 	.word	0x200002a8

00015960 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   15960:	b510      	push	{r4, lr}
   15962:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   15964:	4b07      	ldr	r3, [pc, #28]	; (15984 <bt_id_set_create_conn_own_addr+0x24>)
   15966:	781b      	ldrb	r3, [r3, #0]
   15968:	2b01      	cmp	r3, #1
   1596a:	d004      	beq.n	15976 <bt_id_set_create_conn_own_addr+0x16>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   1596c:	4b05      	ldr	r3, [pc, #20]	; (15984 <bt_id_set_create_conn_own_addr+0x24>)
   1596e:	781b      	ldrb	r3, [r3, #0]
   15970:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   15972:	2000      	movs	r0, #0
}
   15974:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   15976:	4804      	ldr	r0, [pc, #16]	; (15988 <bt_id_set_create_conn_own_addr+0x28>)
   15978:	f7ff fe06 	bl	15588 <set_random_address>
			if (err) {
   1597c:	2800      	cmp	r0, #0
   1597e:	d0f5      	beq.n	1596c <bt_id_set_create_conn_own_addr+0xc>
   15980:	e7f8      	b.n	15974 <bt_id_set_create_conn_own_addr+0x14>
   15982:	bf00      	nop
   15984:	200002a8 	.word	0x200002a8
   15988:	200002a9 	.word	0x200002a9

0001598c <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   1598c:	b510      	push	{r4, lr}
   1598e:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   15990:	4b07      	ldr	r3, [pc, #28]	; (159b0 <bt_id_set_scan_own_addr+0x24>)
   15992:	781b      	ldrb	r3, [r3, #0]
   15994:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   15996:	f00b fbfb 	bl	21190 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   1599a:	b108      	cbz	r0, 159a0 <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
   1599c:	2000      	movs	r0, #0
}
   1599e:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   159a0:	f00b fbfa 	bl	21198 <bt_id_set_private_addr>
			if (err) {
   159a4:	2800      	cmp	r0, #0
   159a6:	d1fa      	bne.n	1599e <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   159a8:	2301      	movs	r3, #1
   159aa:	7023      	strb	r3, [r4, #0]
   159ac:	e7f7      	b.n	1599e <bt_id_set_scan_own_addr+0x12>
   159ae:	bf00      	nop
   159b0:	200002a8 	.word	0x200002a8

000159b4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   159b4:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   159b6:	4b25      	ldr	r3, [pc, #148]	; (15a4c <bt_id_init+0x98>)
   159b8:	79db      	ldrb	r3, [r3, #7]
   159ba:	b12b      	cbz	r3, 159c8 <bt_id_init+0x14>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   159bc:	4b23      	ldr	r3, [pc, #140]	; (15a4c <bt_id_init+0x98>)
   159be:	79db      	ldrb	r3, [r3, #7]
   159c0:	b1c3      	cbz	r3, 159f4 <bt_id_init+0x40>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   159c2:	2400      	movs	r4, #0
}
   159c4:	4620      	mov	r0, r4
   159c6:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   159c8:	f7ff ff04 	bl	157d4 <bt_setup_public_id_addr>
		if (err) {
   159cc:	4604      	mov	r4, r0
   159ce:	2800      	cmp	r0, #0
   159d0:	d0f4      	beq.n	159bc <bt_id_init+0x8>
   159d2:	4b1f      	ldr	r3, [pc, #124]	; (15a50 <bt_id_init+0x9c>)
   159d4:	4a1f      	ldr	r2, [pc, #124]	; (15a54 <bt_id_init+0xa0>)
   159d6:	1a9b      	subs	r3, r3, r2
   159d8:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   159da:	f04f 0100 	mov.w	r1, #0
   159de:	2201      	movs	r2, #1
   159e0:	f362 0102 	bfi	r1, r2, #0, #3
   159e4:	f36f 01c5 	bfc	r1, #3, #3
   159e8:	f363 118f 	bfi	r1, r3, #6, #10
   159ec:	481a      	ldr	r0, [pc, #104]	; (15a58 <bt_id_init+0xa4>)
   159ee:	f7fb fcaf 	bl	11350 <log_0>
			return err;
   159f2:	e7e7      	b.n	159c4 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   159f4:	f7ff ff80 	bl	158f8 <bt_setup_random_id_addr>
		if (err) {
   159f8:	4604      	mov	r4, r0
   159fa:	b9b0      	cbnz	r0, 15a2a <bt_id_init+0x76>
		err = set_random_address(&bt_dev.id_addr[0].a);
   159fc:	4817      	ldr	r0, [pc, #92]	; (15a5c <bt_id_init+0xa8>)
   159fe:	f7ff fdc3 	bl	15588 <set_random_address>
		if (err) {
   15a02:	4604      	mov	r4, r0
   15a04:	2800      	cmp	r0, #0
   15a06:	d0dd      	beq.n	159c4 <bt_id_init+0x10>
   15a08:	4b11      	ldr	r3, [pc, #68]	; (15a50 <bt_id_init+0x9c>)
   15a0a:	4a12      	ldr	r2, [pc, #72]	; (15a54 <bt_id_init+0xa0>)
   15a0c:	1a9b      	subs	r3, r3, r2
   15a0e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   15a10:	f04f 0100 	mov.w	r1, #0
   15a14:	2201      	movs	r2, #1
   15a16:	f362 0102 	bfi	r1, r2, #0, #3
   15a1a:	f36f 01c5 	bfc	r1, #3, #3
   15a1e:	f363 118f 	bfi	r1, r3, #6, #10
   15a22:	480f      	ldr	r0, [pc, #60]	; (15a60 <bt_id_init+0xac>)
   15a24:	f7fb fc94 	bl	11350 <log_0>
			return err;
   15a28:	e7cc      	b.n	159c4 <bt_id_init+0x10>
   15a2a:	4b09      	ldr	r3, [pc, #36]	; (15a50 <bt_id_init+0x9c>)
   15a2c:	4a09      	ldr	r2, [pc, #36]	; (15a54 <bt_id_init+0xa0>)
   15a2e:	1a9b      	subs	r3, r3, r2
   15a30:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   15a32:	f04f 0100 	mov.w	r1, #0
   15a36:	2201      	movs	r2, #1
   15a38:	f362 0102 	bfi	r1, r2, #0, #3
   15a3c:	f36f 01c5 	bfc	r1, #3, #3
   15a40:	f363 118f 	bfi	r1, r3, #6, #10
   15a44:	4804      	ldr	r0, [pc, #16]	; (15a58 <bt_id_init+0xa4>)
   15a46:	f7fb fc83 	bl	11350 <log_0>
			return err;
   15a4a:	e7bb      	b.n	159c4 <bt_id_init+0x10>
   15a4c:	200002a8 	.word	0x200002a8
   15a50:	00024d00 	.word	0x00024d00
   15a54:	00024ca0 	.word	0x00024ca0
   15a58:	00025fcc 	.word	0x00025fcc
   15a5c:	200002a9 	.word	0x200002a9
   15a60:	00025fec 	.word	0x00025fec

00015a64 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   15a64:	b530      	push	{r4, r5, lr}
   15a66:	b087      	sub	sp, #28
   15a68:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15a6a:	2102      	movs	r1, #2
   15a6c:	f242 000c 	movw	r0, #8204	; 0x200c
   15a70:	f7fe fc10 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   15a74:	b330      	cbz	r0, 15ac4 <bt_le_scan_set_enable_legacy+0x60>
   15a76:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   15a78:	2102      	movs	r1, #2
   15a7a:	3008      	adds	r0, #8
   15a7c:	f00d f8f2 	bl	22c64 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   15a80:	2c01      	cmp	r4, #1
   15a82:	d015      	beq.n	15ab0 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   15a84:	2300      	movs	r3, #0
   15a86:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   15a88:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15a8a:	2c01      	cmp	r4, #1
   15a8c:	bf14      	ite	ne
   15a8e:	2400      	movne	r4, #0
   15a90:	2401      	moveq	r4, #1
   15a92:	9400      	str	r4, [sp, #0]
   15a94:	2305      	movs	r3, #5
   15a96:	4a0d      	ldr	r2, [pc, #52]	; (15acc <bt_le_scan_set_enable_legacy+0x68>)
   15a98:	a903      	add	r1, sp, #12
   15a9a:	4628      	mov	r0, r5
   15a9c:	f7fe fbe8 	bl	14270 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   15aa0:	2200      	movs	r2, #0
   15aa2:	4629      	mov	r1, r5
   15aa4:	f242 000c 	movw	r0, #8204	; 0x200c
   15aa8:	f7fe fc30 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   15aac:	b007      	add	sp, #28
   15aae:	bd30      	pop	{r4, r5, pc}
   15ab0:	f3bf 8f5b 	dmb	ish
   15ab4:	4b05      	ldr	r3, [pc, #20]	; (15acc <bt_le_scan_set_enable_legacy+0x68>)
   15ab6:	681b      	ldr	r3, [r3, #0]
   15ab8:	f3bf 8f5b 	dmb	ish
   15abc:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   15ac0:	7043      	strb	r3, [r0, #1]
   15ac2:	e7e1      	b.n	15a88 <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   15ac4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15ac8:	e7f0      	b.n	15aac <bt_le_scan_set_enable_legacy+0x48>
   15aca:	bf00      	nop
   15acc:	20000374 	.word	0x20000374

00015ad0 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   15ad0:	4b01      	ldr	r3, [pc, #4]	; (15ad8 <bt_scan_reset+0x8>)
   15ad2:	2200      	movs	r2, #0
   15ad4:	601a      	str	r2, [r3, #0]
}
   15ad6:	4770      	bx	lr
   15ad8:	20002608 	.word	0x20002608

00015adc <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   15adc:	b530      	push	{r4, r5, lr}
   15ade:	b083      	sub	sp, #12
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   15ae0:	2300      	movs	r3, #0
   15ae2:	f8ad 3005 	strh.w	r3, [sp, #5]

	set_param.scan_type = scan_type;
   15ae6:	f88d 0000 	strb.w	r0, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   15aea:	f8ad 1001 	strh.w	r1, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   15aee:	f8ad 2003 	strh.w	r2, [sp, #3]
   15af2:	f3bf 8f5b 	dmb	ish
   15af6:	4b29      	ldr	r3, [pc, #164]	; (15b9c <start_le_scan_legacy+0xc0>)
   15af8:	681b      	ldr	r3, [r3, #0]
   15afa:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
   15afe:	f413 7f00 	tst.w	r3, #512	; 0x200
   15b02:	d00e      	beq.n	15b22 <start_le_scan_legacy+0x46>
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
   15b04:	2301      	movs	r3, #1
   15b06:	f88d 3006 	strb.w	r3, [sp, #6]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   15b0a:	2801      	cmp	r0, #1
   15b0c:	bf14      	ite	ne
   15b0e:	2400      	movne	r4, #0
   15b10:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   15b12:	f10d 0105 	add.w	r1, sp, #5
   15b16:	4620      	mov	r0, r4
   15b18:	f7ff ff38 	bl	1598c <bt_id_set_scan_own_addr>
	if (err) {
   15b1c:	b128      	cbz	r0, 15b2a <start_le_scan_legacy+0x4e>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   15b1e:	b003      	add	sp, #12
   15b20:	bd30      	pop	{r4, r5, pc}
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   15b22:	2300      	movs	r3, #0
   15b24:	f88d 3006 	strb.w	r3, [sp, #6]
   15b28:	e7ef      	b.n	15b0a <start_le_scan_legacy+0x2e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   15b2a:	2107      	movs	r1, #7
   15b2c:	f242 000b 	movw	r0, #8203	; 0x200b
   15b30:	f7fe fbb0 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   15b34:	4605      	mov	r5, r0
   15b36:	b370      	cbz	r0, 15b96 <start_le_scan_legacy+0xba>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15b38:	2207      	movs	r2, #7
   15b3a:	4669      	mov	r1, sp
   15b3c:	3008      	adds	r0, #8
   15b3e:	f00d f897 	bl	22c70 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   15b42:	2200      	movs	r2, #0
   15b44:	4629      	mov	r1, r5
   15b46:	f242 000b 	movw	r0, #8203	; 0x200b
   15b4a:	f7fe fbdf 	bl	1430c <bt_hci_cmd_send_sync>
	if (err) {
   15b4e:	2800      	cmp	r0, #0
   15b50:	d1e5      	bne.n	15b1e <start_le_scan_legacy+0x42>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   15b52:	2001      	movs	r0, #1
   15b54:	f00b fb6a 	bl	2122c <bt_le_scan_set_enable>
	if (err) {
   15b58:	2800      	cmp	r0, #0
   15b5a:	d1e0      	bne.n	15b1e <start_le_scan_legacy+0x42>
	if (val) {
   15b5c:	b16c      	cbz	r4, 15b7a <start_le_scan_legacy+0x9e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15b5e:	4b0f      	ldr	r3, [pc, #60]	; (15b9c <start_le_scan_legacy+0xc0>)
   15b60:	f3bf 8f5b 	dmb	ish
   15b64:	e853 2f00 	ldrex	r2, [r3]
   15b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   15b6c:	e843 2100 	strex	r1, r2, [r3]
   15b70:	2900      	cmp	r1, #0
   15b72:	d1f7      	bne.n	15b64 <start_le_scan_legacy+0x88>
   15b74:	f3bf 8f5b 	dmb	ish
   15b78:	e7d1      	b.n	15b1e <start_le_scan_legacy+0x42>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15b7a:	4b08      	ldr	r3, [pc, #32]	; (15b9c <start_le_scan_legacy+0xc0>)
   15b7c:	f3bf 8f5b 	dmb	ish
   15b80:	e853 2f00 	ldrex	r2, [r3]
   15b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   15b88:	e843 2100 	strex	r1, r2, [r3]
   15b8c:	2900      	cmp	r1, #0
   15b8e:	d1f7      	bne.n	15b80 <start_le_scan_legacy+0xa4>
   15b90:	f3bf 8f5b 	dmb	ish
}
   15b94:	e7c3      	b.n	15b1e <start_le_scan_legacy+0x42>
		return -ENOBUFS;
   15b96:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15b9a:	e7c0      	b.n	15b1e <start_le_scan_legacy+0x42>
   15b9c:	20000374 	.word	0x20000374

00015ba0 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   15ba0:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ba2:	f3bf 8f5b 	dmb	ish
   15ba6:	4b21      	ldr	r3, [pc, #132]	; (15c2c <bt_le_scan_update+0x8c>)
   15ba8:	681b      	ldr	r3, [r3, #0]
   15baa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15bae:	f3c3 1480 	ubfx	r4, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15bb2:	f013 0f40 	tst.w	r3, #64	; 0x40
   15bb6:	d002      	beq.n	15bbe <bt_le_scan_update+0x1e>
		return 0;
   15bb8:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   15bba:	4620      	mov	r0, r4
   15bbc:	bd38      	pop	{r3, r4, r5, pc}
   15bbe:	4605      	mov	r5, r0
   15bc0:	f3bf 8f5b 	dmb	ish
   15bc4:	4b19      	ldr	r3, [pc, #100]	; (15c2c <bt_le_scan_update+0x8c>)
   15bc6:	681b      	ldr	r3, [r3, #0]
   15bc8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15bcc:	f013 0f20 	tst.w	r3, #32
   15bd0:	d003      	beq.n	15bda <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   15bd2:	2000      	movs	r0, #0
   15bd4:	f00b fb2a 	bl	2122c <bt_le_scan_set_enable>
		if (err) {
   15bd8:	bb28      	cbnz	r0, 15c26 <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   15bda:	2206      	movs	r2, #6
   15bdc:	2100      	movs	r1, #0
   15bde:	4608      	mov	r0, r1
   15be0:	f000 fe50 	bl	16884 <bt_conn_lookup_state_le>
		if (conn) {
   15be4:	b110      	cbz	r0, 15bec <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   15be6:	f00b fc48 	bl	2147a <bt_conn_unref>
			return 0;
   15bea:	e7e6      	b.n	15bba <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   15bec:	2202      	movs	r2, #2
   15bee:	2100      	movs	r1, #0
   15bf0:	4608      	mov	r0, r1
   15bf2:	f000 fe47 	bl	16884 <bt_conn_lookup_state_le>
		if (conn) {
   15bf6:	4603      	mov	r3, r0
   15bf8:	2800      	cmp	r0, #0
   15bfa:	d0de      	beq.n	15bba <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15bfc:	4a0b      	ldr	r2, [pc, #44]	; (15c2c <bt_le_scan_update+0x8c>)
   15bfe:	f3bf 8f5b 	dmb	ish
   15c02:	e852 1f00 	ldrex	r1, [r2]
   15c06:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   15c0a:	e842 1000 	strex	r0, r1, [r2]
   15c0e:	2800      	cmp	r0, #0
   15c10:	d1f7      	bne.n	15c02 <bt_le_scan_update+0x62>
   15c12:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   15c16:	4618      	mov	r0, r3
   15c18:	f00b fc2f 	bl	2147a <bt_conn_unref>
			return start_passive_scan(fast_scan);
   15c1c:	4628      	mov	r0, r5
   15c1e:	f00b fb09 	bl	21234 <start_passive_scan>
   15c22:	4604      	mov	r4, r0
   15c24:	e7c9      	b.n	15bba <bt_le_scan_update+0x1a>
			return err;
   15c26:	4604      	mov	r4, r0
   15c28:	e7c7      	b.n	15bba <bt_le_scan_update+0x1a>
   15c2a:	bf00      	nop
   15c2c:	20000374 	.word	0x20000374

00015c30 <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   15c30:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15c32:	f3bf 8f5b 	dmb	ish
   15c36:	4b21      	ldr	r3, [pc, #132]	; (15cbc <check_pending_conn+0x8c>)
   15c38:	681b      	ldr	r3, [r3, #0]
   15c3a:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15c3e:	f013 0f40 	tst.w	r3, #64	; 0x40
   15c42:	d103      	bne.n	15c4c <check_pending_conn+0x1c>
   15c44:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   15c46:	f012 0f01 	tst.w	r2, #1
   15c4a:	d100      	bne.n	15c4e <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   15c4c:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   15c4e:	2202      	movs	r2, #2
   15c50:	4601      	mov	r1, r0
   15c52:	2000      	movs	r0, #0
   15c54:	f000 fe16 	bl	16884 <bt_conn_lookup_state_le>
	if (!conn) {
   15c58:	4605      	mov	r5, r0
   15c5a:	2800      	cmp	r0, #0
   15c5c:	d0f6      	beq.n	15c4c <check_pending_conn+0x1c>
   15c5e:	f3bf 8f5b 	dmb	ish
   15c62:	4b16      	ldr	r3, [pc, #88]	; (15cbc <check_pending_conn+0x8c>)
   15c64:	681b      	ldr	r3, [r3, #0]
   15c66:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   15c6a:	f013 0f20 	tst.w	r3, #32
   15c6e:	d003      	beq.n	15c78 <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   15c70:	2000      	movs	r0, #0
   15c72:	f00b fadb 	bl	2122c <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   15c76:	b960      	cbnz	r0, 15c92 <check_pending_conn+0x62>
   15c78:	6823      	ldr	r3, [r4, #0]
   15c7a:	f8c5 3096 	str.w	r3, [r5, #150]	; 0x96
   15c7e:	88a2      	ldrh	r2, [r4, #4]
   15c80:	79a3      	ldrb	r3, [r4, #6]
   15c82:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
   15c86:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
	if (bt_le_create_conn(conn)) {
   15c8a:	4628      	mov	r0, r5
   15c8c:	f00b f96c 	bl	20f68 <bt_le_create_conn>
   15c90:	b160      	cbz	r0, 15cac <check_pending_conn+0x7c>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   15c92:	231f      	movs	r3, #31
   15c94:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15c96:	2100      	movs	r1, #0
   15c98:	4628      	mov	r0, r5
   15c9a:	f000 fbe5 	bl	16468 <bt_conn_set_state>
	bt_conn_unref(conn);
   15c9e:	4628      	mov	r0, r5
   15ca0:	f00b fbeb 	bl	2147a <bt_conn_unref>
	bt_le_scan_update(false);
   15ca4:	2000      	movs	r0, #0
   15ca6:	f7ff ff7b 	bl	15ba0 <bt_le_scan_update>
   15caa:	e7cf      	b.n	15c4c <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   15cac:	2106      	movs	r1, #6
   15cae:	4628      	mov	r0, r5
   15cb0:	f000 fbda 	bl	16468 <bt_conn_set_state>
	bt_conn_unref(conn);
   15cb4:	4628      	mov	r0, r5
   15cb6:	f00b fbe0 	bl	2147a <bt_conn_unref>
	return;
   15cba:	e7c7      	b.n	15c4c <check_pending_conn+0x1c>
   15cbc:	20000374 	.word	0x20000374

00015cc0 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   15cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cc4:	b083      	sub	sp, #12
   15cc6:	4682      	mov	sl, r0
   15cc8:	4688      	mov	r8, r1
   15cca:	4615      	mov	r5, r2
   15ccc:	4699      	mov	r9, r3
   15cce:	f3bf 8f5b 	dmb	ish
   15cd2:	4b44      	ldr	r3, [pc, #272]	; (15de4 <le_adv_recv+0x124>)
   15cd4:	681b      	ldr	r3, [r3, #0]
   15cd6:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	BT_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr),
	       info->adv_type, len, info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   15cda:	f013 0f40 	tst.w	r3, #64	; 0x40
   15cde:	d003      	beq.n	15ce8 <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   15ce0:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   15ce2:	f013 0f04 	tst.w	r3, #4
   15ce6:	d179      	bne.n	15ddc <le_adv_recv+0x11c>
		BT_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   15ce8:	f89a 2000 	ldrb.w	r2, [sl]
   15cec:	1e93      	subs	r3, r2, #2
   15cee:	b2db      	uxtb	r3, r3
   15cf0:	2b01      	cmp	r3, #1
   15cf2:	d933      	bls.n	15d5c <le_adv_recv+0x9c>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   15cf4:	2aff      	cmp	r2, #255	; 0xff
   15cf6:	d041      	beq.n	15d7c <le_adv_recv+0xbc>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   15cf8:	4651      	mov	r1, sl
   15cfa:	2000      	movs	r0, #0
   15cfc:	f00b fa4a 	bl	21194 <bt_lookup_id_addr>
   15d00:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   15d02:	6800      	ldr	r0, [r0, #0]
   15d04:	9000      	str	r0, [sp, #0]
   15d06:	889a      	ldrh	r2, [r3, #4]
   15d08:	799b      	ldrb	r3, [r3, #6]
   15d0a:	f8ad 2004 	strh.w	r2, [sp, #4]
   15d0e:	f88d 3006 	strb.w	r3, [sp, #6]
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	info->addr = &id_addr;
   15d12:	f8c8 d000 	str.w	sp, [r8]

	if (scan_dev_found_cb) {
   15d16:	4b34      	ldr	r3, [pc, #208]	; (15de8 <le_adv_recv+0x128>)
   15d18:	681b      	ldr	r3, [r3, #0]
   15d1a:	b19b      	cbz	r3, 15d44 <le_adv_recv+0x84>
	state->offset = net_buf_simple_headroom(buf);
   15d1c:	4628      	mov	r0, r5
   15d1e:	f00c ffda 	bl	22cd6 <net_buf_simple_headroom>
   15d22:	b284      	uxth	r4, r0
	state->len = buf->len;
   15d24:	88ae      	ldrh	r6, [r5, #4]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   15d26:	f8a5 9004 	strh.w	r9, [r5, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   15d2a:	4b2f      	ldr	r3, [pc, #188]	; (15de8 <le_adv_recv+0x128>)
   15d2c:	681f      	ldr	r7, [r3, #0]
   15d2e:	462b      	mov	r3, r5
   15d30:	f898 2007 	ldrb.w	r2, [r8, #7]
   15d34:	f998 1005 	ldrsb.w	r1, [r8, #5]
   15d38:	4668      	mov	r0, sp
   15d3a:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   15d3c:	68ab      	ldr	r3, [r5, #8]
   15d3e:	4423      	add	r3, r4
   15d40:	602b      	str	r3, [r5, #0]
	buf->len = state->len;
   15d42:	80ae      	strh	r6, [r5, #4]
	return list->head;
   15d44:	4b29      	ldr	r3, [pc, #164]	; (15dec <le_adv_recv+0x12c>)
   15d46:	681e      	ldr	r6, [r3, #0]

		net_buf_simple_restore(buf, &state);
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15d48:	b1ee      	cbz	r6, 15d86 <le_adv_recv+0xc6>
   15d4a:	3e08      	subs	r6, #8
   15d4c:	d01d      	beq.n	15d8a <le_adv_recv+0xca>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15d4e:	f116 0408 	adds.w	r4, r6, #8
   15d52:	d01f      	beq.n	15d94 <le_adv_recv+0xd4>
	return node->next;
   15d54:	68b4      	ldr	r4, [r6, #8]
   15d56:	b1ec      	cbz	r4, 15d94 <le_adv_recv+0xd4>
   15d58:	3c08      	subs	r4, #8
   15d5a:	e01b      	b.n	15d94 <le_adv_recv+0xd4>
   15d5c:	f8da 0000 	ldr.w	r0, [sl]
   15d60:	9000      	str	r0, [sp, #0]
   15d62:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   15d66:	f89a 3006 	ldrb.w	r3, [sl, #6]
   15d6a:	f8ad 2004 	strh.w	r2, [sp, #4]
   15d6e:	f88d 3006 	strb.w	r3, [sp, #6]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15d72:	b2c3      	uxtb	r3, r0
   15d74:	3b02      	subs	r3, #2
   15d76:	f88d 3000 	strb.w	r3, [sp]
   15d7a:	e7ca      	b.n	15d12 <le_adv_recv+0x52>
   15d7c:	2300      	movs	r3, #0
   15d7e:	9300      	str	r3, [sp, #0]
   15d80:	f8cd 3003 	str.w	r3, [sp, #3]
   15d84:	e7c5      	b.n	15d12 <le_adv_recv+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15d86:	4634      	mov	r4, r6
   15d88:	e004      	b.n	15d94 <le_adv_recv+0xd4>
   15d8a:	4634      	mov	r4, r6
   15d8c:	e002      	b.n	15d94 <le_adv_recv+0xd4>
   15d8e:	4622      	mov	r2, r4
   15d90:	4626      	mov	r6, r4
   15d92:	4614      	mov	r4, r2
   15d94:	b1e6      	cbz	r6, 15dd0 <le_adv_recv+0x110>
		if (listener->recv) {
   15d96:	6833      	ldr	r3, [r6, #0]
   15d98:	b183      	cbz	r3, 15dbc <le_adv_recv+0xfc>
	state->offset = net_buf_simple_headroom(buf);
   15d9a:	4628      	mov	r0, r5
   15d9c:	f00c ff9b 	bl	22cd6 <net_buf_simple_headroom>
   15da0:	b287      	uxth	r7, r0
	state->len = buf->len;
   15da2:	f8b5 b004 	ldrh.w	fp, [r5, #4]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   15da6:	f8a5 9004 	strh.w	r9, [r5, #4]
			listener->recv(info, buf);
   15daa:	6833      	ldr	r3, [r6, #0]
   15dac:	4629      	mov	r1, r5
   15dae:	4640      	mov	r0, r8
   15db0:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   15db2:	68a8      	ldr	r0, [r5, #8]
   15db4:	4438      	add	r0, r7
   15db6:	6028      	str	r0, [r5, #0]
	buf->len = state->len;
   15db8:	f8a5 b004 	strh.w	fp, [r5, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15dbc:	2c00      	cmp	r4, #0
   15dbe:	d0e6      	beq.n	15d8e <le_adv_recv+0xce>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15dc0:	f114 0208 	adds.w	r2, r4, #8
   15dc4:	d0e4      	beq.n	15d90 <le_adv_recv+0xd0>
	return node->next;
   15dc6:	68a2      	ldr	r2, [r4, #8]
   15dc8:	2a00      	cmp	r2, #0
   15dca:	d0e1      	beq.n	15d90 <le_adv_recv+0xd0>
   15dcc:	3a08      	subs	r2, #8
   15dce:	e7df      	b.n	15d90 <le_adv_recv+0xd0>
			net_buf_simple_restore(buf, &state);
		}
	}

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   15dd0:	f898 2008 	ldrb.w	r2, [r8, #8]
   15dd4:	4651      	mov	r1, sl
   15dd6:	4668      	mov	r0, sp
   15dd8:	f7ff ff2a 	bl	15c30 <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   15ddc:	b003      	add	sp, #12
   15dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15de2:	bf00      	nop
   15de4:	20000374 	.word	0x20000374
   15de8:	20002608 	.word	0x20002608
   15dec:	20002600 	.word	0x20002600

00015df0 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   15df0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15df2:	b085      	sub	sp, #20
   15df4:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   15df6:	f100 0608 	add.w	r6, r0, #8
   15dfa:	4630      	mov	r0, r6
   15dfc:	f00c ff5b 	bl	22cb6 <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   15e00:	1e45      	subs	r5, r0, #1
   15e02:	b2ed      	uxtb	r5, r5
   15e04:	2800      	cmp	r0, #0
   15e06:	d03f      	beq.n	15e88 <bt_hci_le_adv_report+0x98>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   15e08:	89bb      	ldrh	r3, [r7, #12]
   15e0a:	2b08      	cmp	r3, #8
   15e0c:	d92c      	bls.n	15e68 <bt_hci_le_adv_report+0x78>
	return net_buf_simple_pull_mem(&buf->b, len);
   15e0e:	2109      	movs	r1, #9
   15e10:	4630      	mov	r0, r6
   15e12:	f00c ff48 	bl	22ca6 <net_buf_simple_pull_mem>
   15e16:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   15e18:	2301      	movs	r3, #1
   15e1a:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   15e1e:	2200      	movs	r2, #0
   15e20:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   15e24:	237f      	movs	r3, #127	; 0x7f
   15e26:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   15e2a:	7a03      	ldrb	r3, [r0, #8]
   15e2c:	4403      	add	r3, r0
   15e2e:	f993 3009 	ldrsb.w	r3, [r3, #9]
   15e32:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   15e36:	23ff      	movs	r3, #255	; 0xff
   15e38:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   15e3c:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   15e40:	7800      	ldrb	r0, [r0, #0]
   15e42:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   15e46:	f00b f9bd 	bl	211c4 <get_adv_props_legacy>
   15e4a:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   15e4e:	7a23      	ldrb	r3, [r4, #8]
   15e50:	4632      	mov	r2, r6
   15e52:	4669      	mov	r1, sp
   15e54:	1c60      	adds	r0, r4, #1
   15e56:	f7ff ff33 	bl	15cc0 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   15e5a:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   15e5c:	3101      	adds	r1, #1
   15e5e:	4630      	mov	r0, r6
   15e60:	f00c ff19 	bl	22c96 <net_buf_simple_pull>
	while (num_reports--) {
   15e64:	4628      	mov	r0, r5
   15e66:	e7cb      	b.n	15e00 <bt_hci_le_adv_report+0x10>
   15e68:	4b08      	ldr	r3, [pc, #32]	; (15e8c <bt_hci_le_adv_report+0x9c>)
   15e6a:	4a09      	ldr	r2, [pc, #36]	; (15e90 <bt_hci_le_adv_report+0xa0>)
   15e6c:	1a9b      	subs	r3, r3, r2
   15e6e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected end of buffer");
   15e70:	f04f 0100 	mov.w	r1, #0
   15e74:	2201      	movs	r2, #1
   15e76:	f362 0102 	bfi	r1, r2, #0, #3
   15e7a:	f36f 01c5 	bfc	r1, #3, #3
   15e7e:	f363 118f 	bfi	r1, r3, #6, #10
   15e82:	4804      	ldr	r0, [pc, #16]	; (15e94 <bt_hci_le_adv_report+0xa4>)
   15e84:	f7fb fa64 	bl	11350 <log_0>
	}
}
   15e88:	b005      	add	sp, #20
   15e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e8c:	00024d18 	.word	0x00024d18
   15e90:	00024ca0 	.word	0x00024ca0
   15e94:	00026014 	.word	0x00026014

00015e98 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   15e98:	b538      	push	{r3, r4, r5, lr}
   15e9a:	f3bf 8f5b 	dmb	ish
   15e9e:	4b5a      	ldr	r3, [pc, #360]	; (16008 <bt_le_scan_start+0x170>)
   15ea0:	681b      	ldr	r3, [r3, #0]
   15ea2:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15ea6:	f013 0f02 	tst.w	r3, #2
   15eaa:	f000 80a1 	beq.w	15ff0 <bt_le_scan_start+0x158>
   15eae:	4604      	mov	r4, r0
   15eb0:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   15eb2:	f00b f998 	bl	211e6 <valid_le_scan_param>
   15eb6:	2800      	cmp	r0, #0
   15eb8:	f000 809d 	beq.w	15ff6 <bt_le_scan_start+0x15e>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   15ebc:	7823      	ldrb	r3, [r4, #0]
   15ebe:	b123      	cbz	r3, 15eca <bt_le_scan_start+0x32>
   15ec0:	f00b f97e 	bl	211c0 <bt_id_scan_random_addr_check>
   15ec4:	2800      	cmp	r0, #0
   15ec6:	f000 8099 	beq.w	15ffc <bt_le_scan_start+0x164>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15eca:	4b4f      	ldr	r3, [pc, #316]	; (16008 <bt_le_scan_start+0x170>)
   15ecc:	f3bf 8f5b 	dmb	ish
   15ed0:	e853 2f00 	ldrex	r2, [r3]
   15ed4:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   15ed8:	e843 1000 	strex	r0, r1, [r3]
   15edc:	2800      	cmp	r0, #0
   15ede:	d1f7      	bne.n	15ed0 <bt_le_scan_start+0x38>
   15ee0:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15ee4:	f012 0f40 	tst.w	r2, #64	; 0x40
   15ee8:	f040 808b 	bne.w	16002 <bt_le_scan_start+0x16a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15eec:	f3bf 8f5b 	dmb	ish
   15ef0:	681b      	ldr	r3, [r3, #0]
   15ef2:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15ef6:	f013 0f20 	tst.w	r3, #32
   15efa:	d003      	beq.n	15f04 <bt_le_scan_start+0x6c>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   15efc:	2000      	movs	r0, #0
   15efe:	f00b f995 	bl	2122c <bt_le_scan_set_enable>
		if (err) {
   15f02:	bb68      	cbnz	r0, 15f60 <bt_le_scan_start+0xc8>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   15f04:	6863      	ldr	r3, [r4, #4]
	if (val) {
   15f06:	f013 0f01 	tst.w	r3, #1
   15f0a:	d037      	beq.n	15f7c <bt_le_scan_start+0xe4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15f0c:	4b3e      	ldr	r3, [pc, #248]	; (16008 <bt_le_scan_start+0x170>)
   15f0e:	f3bf 8f5b 	dmb	ish
   15f12:	e853 2f00 	ldrex	r2, [r3]
   15f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   15f1a:	e843 2100 	strex	r1, r2, [r3]
   15f1e:	2900      	cmp	r1, #0
   15f20:	d1f7      	bne.n	15f12 <bt_le_scan_start+0x7a>
   15f22:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTERED,
			  param->options & BT_LE_SCAN_OPT_FILTER_ACCEPT_LIST);
   15f26:	6863      	ldr	r3, [r4, #4]
   15f28:	f013 0f02 	tst.w	r3, #2
   15f2c:	d034      	beq.n	15f98 <bt_le_scan_start+0x100>
   15f2e:	4b36      	ldr	r3, [pc, #216]	; (16008 <bt_le_scan_start+0x170>)
   15f30:	f3bf 8f5b 	dmb	ish
   15f34:	e853 2f00 	ldrex	r2, [r3]
   15f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   15f3c:	e843 2100 	strex	r1, r2, [r3]
   15f40:	2900      	cmp	r1, #0
   15f42:	d1f7      	bne.n	15f34 <bt_le_scan_start+0x9c>
   15f44:	f3bf 8f5b 	dmb	ish
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
   15f48:	89a3      	ldrh	r3, [r4, #12]
   15f4a:	bb9b      	cbnz	r3, 15fb4 <bt_le_scan_start+0x11c>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
   15f4c:	8962      	ldrh	r2, [r4, #10]
   15f4e:	8921      	ldrh	r1, [r4, #8]
   15f50:	7820      	ldrb	r0, [r4, #0]
   15f52:	f7ff fdc3 	bl	15adc <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
   15f56:	2800      	cmp	r0, #0
   15f58:	d13c      	bne.n	15fd4 <bt_le_scan_start+0x13c>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   15f5a:	4b2c      	ldr	r3, [pc, #176]	; (1600c <bt_le_scan_start+0x174>)
   15f5c:	601d      	str	r5, [r3, #0]

	return 0;
}
   15f5e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15f60:	4b29      	ldr	r3, [pc, #164]	; (16008 <bt_le_scan_start+0x170>)
   15f62:	f3bf 8f5b 	dmb	ish
   15f66:	e853 2f00 	ldrex	r2, [r3]
   15f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15f6e:	e843 2100 	strex	r1, r2, [r3]
   15f72:	2900      	cmp	r1, #0
   15f74:	d1f7      	bne.n	15f66 <bt_le_scan_start+0xce>
   15f76:	f3bf 8f5b 	dmb	ish
			return err;
   15f7a:	e7f0      	b.n	15f5e <bt_le_scan_start+0xc6>
   15f7c:	4b22      	ldr	r3, [pc, #136]	; (16008 <bt_le_scan_start+0x170>)
   15f7e:	f3bf 8f5b 	dmb	ish
   15f82:	e853 2f00 	ldrex	r2, [r3]
   15f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   15f8a:	e843 2100 	strex	r1, r2, [r3]
   15f8e:	2900      	cmp	r1, #0
   15f90:	d1f7      	bne.n	15f82 <bt_le_scan_start+0xea>
   15f92:	f3bf 8f5b 	dmb	ish
   15f96:	e7c6      	b.n	15f26 <bt_le_scan_start+0x8e>
   15f98:	4b1b      	ldr	r3, [pc, #108]	; (16008 <bt_le_scan_start+0x170>)
   15f9a:	f3bf 8f5b 	dmb	ish
   15f9e:	e853 2f00 	ldrex	r2, [r3]
   15fa2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   15fa6:	e843 2100 	strex	r1, r2, [r3]
   15faa:	2900      	cmp	r1, #0
   15fac:	d1f7      	bne.n	15f9e <bt_le_scan_start+0x106>
   15fae:	f3bf 8f5b 	dmb	ish
   15fb2:	e7c9      	b.n	15f48 <bt_le_scan_start+0xb0>
   15fb4:	4b14      	ldr	r3, [pc, #80]	; (16008 <bt_le_scan_start+0x170>)
   15fb6:	f3bf 8f5b 	dmb	ish
   15fba:	e853 2f00 	ldrex	r2, [r3]
   15fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15fc2:	e843 2100 	strex	r1, r2, [r3]
   15fc6:	2900      	cmp	r1, #0
   15fc8:	d1f7      	bne.n	15fba <bt_le_scan_start+0x122>
   15fca:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
   15fce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15fd2:	e7c4      	b.n	15f5e <bt_le_scan_start+0xc6>
   15fd4:	4b0c      	ldr	r3, [pc, #48]	; (16008 <bt_le_scan_start+0x170>)
   15fd6:	f3bf 8f5b 	dmb	ish
   15fda:	e853 2f00 	ldrex	r2, [r3]
   15fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15fe2:	e843 2100 	strex	r1, r2, [r3]
   15fe6:	2900      	cmp	r1, #0
   15fe8:	d1f7      	bne.n	15fda <bt_le_scan_start+0x142>
   15fea:	f3bf 8f5b 	dmb	ish
		return err;
   15fee:	e7b6      	b.n	15f5e <bt_le_scan_start+0xc6>
		return -EAGAIN;
   15ff0:	f06f 000a 	mvn.w	r0, #10
   15ff4:	e7b3      	b.n	15f5e <bt_le_scan_start+0xc6>
		return -EINVAL;
   15ff6:	f06f 0015 	mvn.w	r0, #21
   15ffa:	e7b0      	b.n	15f5e <bt_le_scan_start+0xc6>
		return -EINVAL;
   15ffc:	f06f 0015 	mvn.w	r0, #21
   16000:	e7ad      	b.n	15f5e <bt_le_scan_start+0xc6>
		return -EALREADY;
   16002:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16006:	e7aa      	b.n	15f5e <bt_le_scan_start+0xc6>
   16008:	20000374 	.word	0x20000374
   1600c:	20002608 	.word	0x20002608

00016010 <tx_free>:
		return "(unknown)";
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
   16010:	b508      	push	{r3, lr}
   16012:	4601      	mov	r1, r0
	tx->cb = NULL;
   16014:	2300      	movs	r3, #0
   16016:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   16018:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1601a:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1601c:	4801      	ldr	r0, [pc, #4]	; (16024 <tx_free+0x14>)
   1601e:	f00d ff9f 	bl	23f60 <k_queue_append>
}
   16022:	bd08      	pop	{r3, pc}
   16024:	200007b0 	.word	0x200007b0

00016028 <conn_tx_alloc>:
		__ASSERT(false, "Invalid connection type %u", conn->type);
	}
}

static struct bt_conn_tx *conn_tx_alloc(void)
{
   16028:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1602a:	f006 fbbd 	bl	1c7a8 <z_impl_z_current_get>
	/* The TX context always get freed in the system workqueue,
	 * so if we're in the same workqueue but there are no immediate
	 * contexts available, there's no chance we'll get one by waiting.
	 */
	if (k_current_get() == &k_sys_work_q.thread) {
   1602e:	4b08      	ldr	r3, [pc, #32]	; (16050 <conn_tx_alloc+0x28>)
   16030:	4283      	cmp	r3, r0
   16032:	d007      	beq.n	16044 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   16034:	f04f 32ff 	mov.w	r2, #4294967295
   16038:	f04f 33ff 	mov.w	r3, #4294967295
   1603c:	4805      	ldr	r0, [pc, #20]	; (16054 <conn_tx_alloc+0x2c>)
   1603e:	f005 fd9b 	bl	1bb78 <z_impl_k_queue_get>

		BT_WARN("Unable to get an immediate free conn_tx");
	}

	return k_fifo_get(&free_tx, K_FOREVER);
}
   16042:	bd08      	pop	{r3, pc}
   16044:	2200      	movs	r2, #0
   16046:	2300      	movs	r3, #0
   16048:	4802      	ldr	r0, [pc, #8]	; (16054 <conn_tx_alloc+0x2c>)
   1604a:	f005 fd95 	bl	1bb78 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1604e:	e7f8      	b.n	16042 <conn_tx_alloc+0x1a>
   16050:	20001e90 	.word	0x20001e90
   16054:	200007b0 	.word	0x200007b0

00016058 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   16058:	b538      	push	{r3, r4, r5, lr}
   1605a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1605c:	4b0f      	ldr	r3, [pc, #60]	; (1609c <notify_connected+0x44>)
   1605e:	681c      	ldr	r4, [r3, #0]
   16060:	e000      	b.n	16064 <notify_connected+0xc>
   16062:	6924      	ldr	r4, [r4, #16]
   16064:	b134      	cbz	r4, 16074 <notify_connected+0x1c>
		if (cb->connected) {
   16066:	6823      	ldr	r3, [r4, #0]
   16068:	2b00      	cmp	r3, #0
   1606a:	d0fa      	beq.n	16062 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   1606c:	7a69      	ldrb	r1, [r5, #9]
   1606e:	4628      	mov	r0, r5
   16070:	4798      	blx	r3
   16072:	e7f6      	b.n	16062 <notify_connected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16074:	4c0a      	ldr	r4, [pc, #40]	; (160a0 <notify_connected+0x48>)
   16076:	e000      	b.n	1607a <notify_connected+0x22>
   16078:	3414      	adds	r4, #20
   1607a:	4b0a      	ldr	r3, [pc, #40]	; (160a4 <notify_connected+0x4c>)
   1607c:	429c      	cmp	r4, r3
   1607e:	d206      	bcs.n	1608e <notify_connected+0x36>
		if (cb->connected) {
   16080:	6823      	ldr	r3, [r4, #0]
   16082:	2b00      	cmp	r3, #0
   16084:	d0f8      	beq.n	16078 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   16086:	7a69      	ldrb	r1, [r5, #9]
   16088:	4628      	mov	r0, r5
   1608a:	4798      	blx	r3
   1608c:	e7f4      	b.n	16078 <notify_connected+0x20>
		}
	}

	if (!conn->err) {
   1608e:	7a6b      	ldrb	r3, [r5, #9]
   16090:	b103      	cbz	r3, 16094 <notify_connected+0x3c>
		bt_gatt_connected(conn);
	}
}
   16092:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   16094:	4628      	mov	r0, r5
   16096:	f002 fdd5 	bl	18c44 <bt_gatt_connected>
}
   1609a:	e7fa      	b.n	16092 <notify_connected+0x3a>
   1609c:	2000260c 	.word	0x2000260c
   160a0:	00024c90 	.word	0x00024c90
   160a4:	00024c90 	.word	0x00024c90

000160a8 <bt_conn_get_pkts>:
}
   160a8:	4800      	ldr	r0, [pc, #0]	; (160ac <bt_conn_get_pkts+0x4>)
   160aa:	4770      	bx	lr
   160ac:	200003a8 	.word	0x200003a8

000160b0 <send_frag>:
{
   160b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   160b4:	4605      	mov	r5, r0
   160b6:	460e      	mov	r6, r1
   160b8:	4691      	mov	r9, r2
   160ba:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   160bc:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   160be:	f7ff fff3 	bl	160a8 <bt_conn_get_pkts>
   160c2:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   160c4:	f04f 32ff 	mov.w	r2, #4294967295
   160c8:	f04f 33ff 	mov.w	r3, #4294967295
   160cc:	f005 fdb8 	bl	1bc40 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   160d0:	7aab      	ldrb	r3, [r5, #10]
   160d2:	2b07      	cmp	r3, #7
   160d4:	d159      	bne.n	1618a <send_frag+0xda>
   160d6:	f04f 0240 	mov.w	r2, #64	; 0x40
   160da:	f3ef 8311 	mrs	r3, BASEPRI
   160de:	f382 8812 	msr	BASEPRI_MAX, r2
   160e2:	f3bf 8f6f 	isb	sy
	if (tx) {
   160e6:	b1af      	cbz	r7, 16114 <send_frag+0x64>
	parent->next = child;
   160e8:	2200      	movs	r2, #0
   160ea:	603a      	str	r2, [r7, #0]
	return list->tail;
   160ec:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   160ee:	b172      	cbz	r2, 1610e <send_frag+0x5e>
	parent->next = child;
   160f0:	6017      	str	r7, [r2, #0]
	list->tail = node;
   160f2:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   160f4:	f383 8811 	msr	BASEPRI, r3
   160f8:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   160fc:	464a      	mov	r2, r9
   160fe:	4631      	mov	r1, r6
   16100:	4628      	mov	r0, r5
   16102:	f00b f8c8 	bl	21296 <send_acl>
	if (err) {
   16106:	4601      	mov	r1, r0
   16108:	b988      	cbnz	r0, 1612e <send_frag+0x7e>
	return true;
   1610a:	2001      	movs	r0, #1
   1610c:	e046      	b.n	1619c <send_frag+0xec>
   1610e:	61af      	str	r7, [r5, #24]
	list->head = node;
   16110:	616f      	str	r7, [r5, #20]
}
   16112:	e7ef      	b.n	160f4 <send_frag+0x44>
	return list->tail;
   16114:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   16116:	b13a      	cbz	r2, 16128 <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   16118:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   1611c:	f8da 2000 	ldr.w	r2, [sl]
   16120:	3201      	adds	r2, #1
   16122:	f8ca 2000 	str.w	r2, [sl]
   16126:	e7e5      	b.n	160f4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   16128:	f105 0a1c 	add.w	sl, r5, #28
   1612c:	e7f6      	b.n	1611c <send_frag+0x6c>
   1612e:	4b26      	ldr	r3, [pc, #152]	; (161c8 <send_frag+0x118>)
   16130:	4a26      	ldr	r2, [pc, #152]	; (161cc <send_frag+0x11c>)
   16132:	1a9b      	subs	r3, r3, r2
   16134:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   16136:	f04f 0200 	mov.w	r2, #0
   1613a:	2001      	movs	r0, #1
   1613c:	f360 0202 	bfi	r2, r0, #0, #3
   16140:	f36f 02c5 	bfc	r2, #3, #3
   16144:	f363 128f 	bfi	r2, r3, #6, #10
   16148:	4821      	ldr	r0, [pc, #132]	; (161d0 <send_frag+0x120>)
   1614a:	f7fb f84b 	bl	111e4 <log_1>
	__asm__ volatile(
   1614e:	f04f 0340 	mov.w	r3, #64	; 0x40
   16152:	f3ef 8011 	mrs	r0, BASEPRI
   16156:	f383 8812 	msr	BASEPRI_MAX, r3
   1615a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1615e:	b347      	cbz	r7, 161b2 <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   16160:	4639      	mov	r1, r7
	return list->head;
   16162:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16164:	2200      	movs	r2, #0
   16166:	b163      	cbz	r3, 16182 <send_frag+0xd2>
   16168:	428b      	cmp	r3, r1
   1616a:	d002      	beq.n	16172 <send_frag+0xc2>
   1616c:	461a      	mov	r2, r3
   1616e:	681b      	ldr	r3, [r3, #0]
   16170:	e7f9      	b.n	16166 <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   16172:	b1aa      	cbz	r2, 161a0 <send_frag+0xf0>
	return node->next;
   16174:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   16176:	6013      	str	r3, [r2, #0]
	return list->tail;
   16178:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1617a:	42bb      	cmp	r3, r7
   1617c:	d017      	beq.n	161ae <send_frag+0xfe>
	parent->next = child;
   1617e:	2300      	movs	r3, #0
   16180:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   16182:	f380 8811 	msr	BASEPRI, r0
   16186:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1618a:	4640      	mov	r0, r8
   1618c:	f005 fd30 	bl	1bbf0 <z_impl_k_sem_give>
	if (tx) {
   16190:	b117      	cbz	r7, 16198 <send_frag+0xe8>
		tx_free(tx);
   16192:	4638      	mov	r0, r7
   16194:	f7ff ff3c 	bl	16010 <tx_free>
	if (always_consume) {
   16198:	b98c      	cbnz	r4, 161be <send_frag+0x10e>
	return false;
   1619a:	4620      	mov	r0, r4
}
   1619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   161a0:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   161a2:	616b      	str	r3, [r5, #20]
	return list->tail;
   161a4:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   161a6:	42ba      	cmp	r2, r7
   161a8:	d1e9      	bne.n	1617e <send_frag+0xce>
	list->tail = node;
   161aa:	61ab      	str	r3, [r5, #24]
}
   161ac:	e7e7      	b.n	1617e <send_frag+0xce>
	list->tail = node;
   161ae:	61aa      	str	r2, [r5, #24]
}
   161b0:	e7e5      	b.n	1617e <send_frag+0xce>
			(*pending_no_cb)--;
   161b2:	f8da 3000 	ldr.w	r3, [sl]
   161b6:	3b01      	subs	r3, #1
   161b8:	f8ca 3000 	str.w	r3, [sl]
   161bc:	e7e1      	b.n	16182 <send_frag+0xd2>
		net_buf_unref(buf);
   161be:	4630      	mov	r0, r6
   161c0:	f00c fd06 	bl	22bd0 <net_buf_unref>
	return false;
   161c4:	2000      	movs	r0, #0
   161c6:	e7e9      	b.n	1619c <send_frag+0xec>
   161c8:	00024ce0 	.word	0x00024ce0
   161cc:	00024ca0 	.word	0x00024ca0
   161d0:	00025cc4 	.word	0x00025cc4

000161d4 <bt_acl_recv>:
{
   161d4:	b570      	push	{r4, r5, r6, lr}
   161d6:	4604      	mov	r4, r0
   161d8:	460d      	mov	r5, r1
	switch (flags) {
   161da:	2a01      	cmp	r2, #1
   161dc:	d02d      	beq.n	1623a <bt_acl_recv+0x66>
   161de:	4611      	mov	r1, r2
   161e0:	2a02      	cmp	r2, #2
   161e2:	d173      	bne.n	162cc <bt_acl_recv+0xf8>
		if (conn->rx) {
   161e4:	6903      	ldr	r3, [r0, #16]
   161e6:	b193      	cbz	r3, 1620e <bt_acl_recv+0x3a>
   161e8:	4b4e      	ldr	r3, [pc, #312]	; (16324 <bt_acl_recv+0x150>)
   161ea:	4a4f      	ldr	r2, [pc, #316]	; (16328 <bt_acl_recv+0x154>)
   161ec:	1a9b      	subs	r3, r3, r2
   161ee:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   161f0:	f04f 0100 	mov.w	r1, #0
   161f4:	2201      	movs	r2, #1
   161f6:	f362 0102 	bfi	r1, r2, #0, #3
   161fa:	f36f 01c5 	bfc	r1, #3, #3
   161fe:	f363 118f 	bfi	r1, r3, #6, #10
   16202:	484a      	ldr	r0, [pc, #296]	; (1632c <bt_acl_recv+0x158>)
   16204:	f7fb f8a4 	bl	11350 <log_0>
			bt_conn_reset_rx_state(conn);
   16208:	4620      	mov	r0, r4
   1620a:	f00b f8a7 	bl	2135c <bt_conn_reset_rx_state>
		conn->rx = buf;
   1620e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16210:	6921      	ldr	r1, [r4, #16]
   16212:	8988      	ldrh	r0, [r1, #12]
   16214:	2801      	cmp	r0, #1
   16216:	d96f      	bls.n	162f8 <bt_acl_recv+0x124>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   16218:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1621a:	785d      	ldrb	r5, [r3, #1]
   1621c:	781a      	ldrb	r2, [r3, #0]
   1621e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   16222:	3204      	adds	r2, #4
   16224:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   16226:	4290      	cmp	r0, r2
   16228:	d366      	bcc.n	162f8 <bt_acl_recv+0x124>
	if (conn->rx->len > acl_total_len) {
   1622a:	d866      	bhi.n	162fa <bt_acl_recv+0x126>
	conn->rx = NULL;
   1622c:	2300      	movs	r3, #0
   1622e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16230:	2201      	movs	r2, #1
   16232:	4620      	mov	r0, r4
   16234:	f000 fe40 	bl	16eb8 <bt_l2cap_recv>
   16238:	e05e      	b.n	162f8 <bt_acl_recv+0x124>
		if (!conn->rx) {
   1623a:	6900      	ldr	r0, [r0, #16]
   1623c:	b180      	cbz	r0, 16260 <bt_acl_recv+0x8c>
		if (!buf->len) {
   1623e:	898e      	ldrh	r6, [r1, #12]
   16240:	b32e      	cbz	r6, 1628e <bt_acl_recv+0xba>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   16242:	3008      	adds	r0, #8
   16244:	f00c fd4b 	bl	22cde <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   16248:	4286      	cmp	r6, r0
   1624a:	d824      	bhi.n	16296 <bt_acl_recv+0xc2>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1624c:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1624e:	89aa      	ldrh	r2, [r5, #12]
   16250:	68a9      	ldr	r1, [r5, #8]
   16252:	3008      	adds	r0, #8
   16254:	f00c fd0c 	bl	22c70 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   16258:	4628      	mov	r0, r5
   1625a:	f00c fcb9 	bl	22bd0 <net_buf_unref>
		break;
   1625e:	e7d7      	b.n	16210 <bt_acl_recv+0x3c>
   16260:	4b30      	ldr	r3, [pc, #192]	; (16324 <bt_acl_recv+0x150>)
   16262:	4a31      	ldr	r2, [pc, #196]	; (16328 <bt_acl_recv+0x154>)
   16264:	1a9b      	subs	r3, r3, r2
   16266:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   16268:	f04f 0100 	mov.w	r1, #0
   1626c:	2201      	movs	r2, #1
   1626e:	f362 0102 	bfi	r1, r2, #0, #3
   16272:	f36f 01c5 	bfc	r1, #3, #3
   16276:	f363 118f 	bfi	r1, r3, #6, #10
   1627a:	482d      	ldr	r0, [pc, #180]	; (16330 <bt_acl_recv+0x15c>)
   1627c:	f7fb f868 	bl	11350 <log_0>
			bt_conn_reset_rx_state(conn);
   16280:	4620      	mov	r0, r4
   16282:	f00b f86b 	bl	2135c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   16286:	4628      	mov	r0, r5
   16288:	f00c fca2 	bl	22bd0 <net_buf_unref>
			return;
   1628c:	e034      	b.n	162f8 <bt_acl_recv+0x124>
			net_buf_unref(buf);
   1628e:	4608      	mov	r0, r1
   16290:	f00c fc9e 	bl	22bd0 <net_buf_unref>
			return;
   16294:	e030      	b.n	162f8 <bt_acl_recv+0x124>
   16296:	4b23      	ldr	r3, [pc, #140]	; (16324 <bt_acl_recv+0x150>)
   16298:	4a23      	ldr	r2, [pc, #140]	; (16328 <bt_acl_recv+0x154>)
   1629a:	1a9b      	subs	r3, r3, r2
   1629c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   1629e:	f04f 0100 	mov.w	r1, #0
   162a2:	2201      	movs	r2, #1
   162a4:	f362 0102 	bfi	r1, r2, #0, #3
   162a8:	f36f 01c5 	bfc	r1, #3, #3
   162ac:	f363 118f 	bfi	r1, r3, #6, #10
   162b0:	4820      	ldr	r0, [pc, #128]	; (16334 <bt_acl_recv+0x160>)
   162b2:	f7fb f84d 	bl	11350 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   162b6:	2200      	movs	r2, #0
   162b8:	6921      	ldr	r1, [r4, #16]
   162ba:	4620      	mov	r0, r4
   162bc:	f000 fdfc 	bl	16eb8 <bt_l2cap_recv>
			conn->rx = NULL;
   162c0:	2300      	movs	r3, #0
   162c2:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   162c4:	4628      	mov	r0, r5
   162c6:	f00c fc83 	bl	22bd0 <net_buf_unref>
			return;
   162ca:	e015      	b.n	162f8 <bt_acl_recv+0x124>
   162cc:	4b15      	ldr	r3, [pc, #84]	; (16324 <bt_acl_recv+0x150>)
   162ce:	4a16      	ldr	r2, [pc, #88]	; (16328 <bt_acl_recv+0x154>)
   162d0:	1a9b      	subs	r3, r3, r2
   162d2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   162d4:	f04f 0200 	mov.w	r2, #0
   162d8:	2001      	movs	r0, #1
   162da:	f360 0202 	bfi	r2, r0, #0, #3
   162de:	f36f 02c5 	bfc	r2, #3, #3
   162e2:	f363 128f 	bfi	r2, r3, #6, #10
   162e6:	4814      	ldr	r0, [pc, #80]	; (16338 <bt_acl_recv+0x164>)
   162e8:	f7fa ff7c 	bl	111e4 <log_1>
		bt_conn_reset_rx_state(conn);
   162ec:	4620      	mov	r0, r4
   162ee:	f00b f835 	bl	2135c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   162f2:	4628      	mov	r0, r5
   162f4:	f00c fc6c 	bl	22bd0 <net_buf_unref>
}
   162f8:	bd70      	pop	{r4, r5, r6, pc}
   162fa:	490a      	ldr	r1, [pc, #40]	; (16324 <bt_acl_recv+0x150>)
   162fc:	4b0a      	ldr	r3, [pc, #40]	; (16328 <bt_acl_recv+0x154>)
   162fe:	1ac9      	subs	r1, r1, r3
   16300:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   16302:	f04f 0300 	mov.w	r3, #0
   16306:	2501      	movs	r5, #1
   16308:	f365 0302 	bfi	r3, r5, #0, #3
   1630c:	f36f 03c5 	bfc	r3, #3, #3
   16310:	f361 138f 	bfi	r3, r1, #6, #10
   16314:	4601      	mov	r1, r0
   16316:	4809      	ldr	r0, [pc, #36]	; (1633c <bt_acl_recv+0x168>)
   16318:	f7fa ff9a 	bl	11250 <log_2>
		bt_conn_reset_rx_state(conn);
   1631c:	4620      	mov	r0, r4
   1631e:	f00b f81d 	bl	2135c <bt_conn_reset_rx_state>
		return;
   16322:	e7e9      	b.n	162f8 <bt_acl_recv+0x124>
   16324:	00024ce0 	.word	0x00024ce0
   16328:	00024ca0 	.word	0x00024ca0
   1632c:	00026030 	.word	0x00026030
   16330:	00026050 	.word	0x00026050
   16334:	00026070 	.word	0x00026070
   16338:	00026098 	.word	0x00026098
   1633c:	000260b8 	.word	0x000260b8

00016340 <bt_conn_send_cb>:
{
   16340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16344:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   16346:	7a83      	ldrb	r3, [r0, #10]
   16348:	2b07      	cmp	r3, #7
   1634a:	d118      	bne.n	1637e <bt_conn_send_cb+0x3e>
   1634c:	4604      	mov	r4, r0
   1634e:	460d      	mov	r5, r1
   16350:	4616      	mov	r6, r2
	if (cb) {
   16352:	2a00      	cmp	r2, #0
   16354:	d04f      	beq.n	163f6 <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   16356:	f7ff fe67 	bl	16028 <conn_tx_alloc>
		if (!tx) {
   1635a:	4680      	mov	r8, r0
   1635c:	b310      	cbz	r0, 163a4 <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   1635e:	7aa3      	ldrb	r3, [r4, #10]
   16360:	2b07      	cmp	r3, #7
   16362:	d132      	bne.n	163ca <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   16364:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   16366:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   16368:	2300      	movs	r3, #0
   1636a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1636c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1636e:	4629      	mov	r1, r5
   16370:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16374:	f00c fc1f 	bl	22bb6 <net_buf_put>
	return 0;
   16378:	2000      	movs	r0, #0
}
   1637a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1637e:	4b1f      	ldr	r3, [pc, #124]	; (163fc <bt_conn_send_cb+0xbc>)
   16380:	4a1f      	ldr	r2, [pc, #124]	; (16400 <bt_conn_send_cb+0xc0>)
   16382:	1a9b      	subs	r3, r3, r2
   16384:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   16386:	f04f 0100 	mov.w	r1, #0
   1638a:	2201      	movs	r2, #1
   1638c:	f362 0102 	bfi	r1, r2, #0, #3
   16390:	f36f 01c5 	bfc	r1, #3, #3
   16394:	f363 118f 	bfi	r1, r3, #6, #10
   16398:	481a      	ldr	r0, [pc, #104]	; (16404 <bt_conn_send_cb+0xc4>)
   1639a:	f7fa ffd9 	bl	11350 <log_0>
		return -ENOTCONN;
   1639e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   163a2:	e7ea      	b.n	1637a <bt_conn_send_cb+0x3a>
   163a4:	4b15      	ldr	r3, [pc, #84]	; (163fc <bt_conn_send_cb+0xbc>)
   163a6:	4a16      	ldr	r2, [pc, #88]	; (16400 <bt_conn_send_cb+0xc0>)
   163a8:	1a9b      	subs	r3, r3, r2
   163aa:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   163ac:	f04f 0100 	mov.w	r1, #0
   163b0:	2201      	movs	r2, #1
   163b2:	f362 0102 	bfi	r1, r2, #0, #3
   163b6:	f36f 01c5 	bfc	r1, #3, #3
   163ba:	f363 118f 	bfi	r1, r3, #6, #10
   163be:	4812      	ldr	r0, [pc, #72]	; (16408 <bt_conn_send_cb+0xc8>)
   163c0:	f7fa ffc6 	bl	11350 <log_0>
			return -ENOBUFS;
   163c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   163c8:	e7d7      	b.n	1637a <bt_conn_send_cb+0x3a>
   163ca:	4b0c      	ldr	r3, [pc, #48]	; (163fc <bt_conn_send_cb+0xbc>)
   163cc:	4a0c      	ldr	r2, [pc, #48]	; (16400 <bt_conn_send_cb+0xc0>)
   163ce:	1a9b      	subs	r3, r3, r2
   163d0:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   163d2:	f04f 0100 	mov.w	r1, #0
   163d6:	2202      	movs	r2, #2
   163d8:	f362 0102 	bfi	r1, r2, #0, #3
   163dc:	f36f 01c5 	bfc	r1, #3, #3
   163e0:	f363 118f 	bfi	r1, r3, #6, #10
   163e4:	4809      	ldr	r0, [pc, #36]	; (1640c <bt_conn_send_cb+0xcc>)
   163e6:	f7fa ffb3 	bl	11350 <log_0>
			tx_free(tx);
   163ea:	4640      	mov	r0, r8
   163ec:	f7ff fe10 	bl	16010 <tx_free>
			return -ENOTCONN;
   163f0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   163f4:	e7c1      	b.n	1637a <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   163f6:	2300      	movs	r3, #0
   163f8:	614b      	str	r3, [r1, #20]
   163fa:	e7b8      	b.n	1636e <bt_conn_send_cb+0x2e>
   163fc:	00024ce0 	.word	0x00024ce0
   16400:	00024ca0 	.word	0x00024ca0
   16404:	000260d4 	.word	0x000260d4
   16408:	000260e4 	.word	0x000260e4
   1640c:	00026104 	.word	0x00026104

00016410 <bt_conn_prepare_events>:
{
   16410:	b570      	push	{r4, r5, r6, lr}
   16412:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   16414:	4b0d      	ldr	r3, [pc, #52]	; (1644c <bt_conn_prepare_events+0x3c>)
   16416:	2400      	movs	r4, #0
   16418:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1641a:	4622      	mov	r2, r4
   1641c:	2101      	movs	r1, #1
   1641e:	f00e fa18 	bl	24852 <k_poll_event_init>
   16422:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16424:	2c00      	cmp	r4, #0
   16426:	dd01      	ble.n	1642c <bt_conn_prepare_events+0x1c>
}
   16428:	4628      	mov	r0, r5
   1642a:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
   1642c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   16430:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   16434:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   16438:	4b05      	ldr	r3, [pc, #20]	; (16450 <bt_conn_prepare_events+0x40>)
   1643a:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1643e:	f00a ffb4 	bl	213aa <conn_prepare_events>
   16442:	b900      	cbnz	r0, 16446 <bt_conn_prepare_events+0x36>
			ev_count++;
   16444:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16446:	3401      	adds	r4, #1
   16448:	e7ec      	b.n	16424 <bt_conn_prepare_events+0x14>
   1644a:	bf00      	nop
   1644c:	20000478 	.word	0x20000478
   16450:	20001840 	.word	0x20001840

00016454 <bt_conn_lookup_handle>:
{
   16454:	b508      	push	{r3, lr}
   16456:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   16458:	2101      	movs	r1, #1
   1645a:	4802      	ldr	r0, [pc, #8]	; (16464 <bt_conn_lookup_handle+0x10>)
   1645c:	f00b f81a 	bl	21494 <conn_lookup_handle>
}
   16460:	bd08      	pop	{r3, pc}
   16462:	bf00      	nop
   16464:	20001840 	.word	0x20001840

00016468 <bt_conn_set_state>:
{
   16468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1646a:	460e      	mov	r6, r1
	if (conn->state == state) {
   1646c:	7a85      	ldrb	r5, [r0, #10]
   1646e:	428d      	cmp	r5, r1
   16470:	d014      	beq.n	1649c <bt_conn_set_state+0x34>
   16472:	4604      	mov	r4, r0
	conn->state = state;
   16474:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   16476:	2d00      	cmp	r5, #0
   16478:	d03d      	beq.n	164f6 <bt_conn_set_state+0x8e>
   1647a:	2d06      	cmp	r5, #6
   1647c:	d041      	beq.n	16502 <bt_conn_set_state+0x9a>
	switch (conn->state) {
   1647e:	7aa3      	ldrb	r3, [r4, #10]
   16480:	2b08      	cmp	r3, #8
   16482:	f200 80e3 	bhi.w	1664c <bt_conn_set_state+0x1e4>
   16486:	e8df f013 	tbh	[pc, r3, lsl #1]
   1648a:	0053      	.short	0x0053
   1648c:	00e000dd 	.word	0x00e000dd
   16490:	00e000e0 	.word	0x00e000e0
   16494:	00b900e0 	.word	0x00b900e0
   16498:	00e00043 	.word	0x00e00043
   1649c:	4b74      	ldr	r3, [pc, #464]	; (16670 <bt_conn_set_state+0x208>)
   1649e:	4a75      	ldr	r2, [pc, #468]	; (16674 <bt_conn_set_state+0x20c>)
   164a0:	1a9b      	subs	r3, r3, r2
   164a2:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   164a4:	f04f 0200 	mov.w	r2, #0
   164a8:	2102      	movs	r1, #2
   164aa:	f361 0202 	bfi	r2, r1, #0, #3
   164ae:	f36f 02c5 	bfc	r2, #3, #3
   164b2:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   164b6:	2e08      	cmp	r6, #8
   164b8:	d819      	bhi.n	164ee <bt_conn_set_state+0x86>
   164ba:	e8df f006 	tbb	[pc, r6]
   164be:	1a05      	.short	0x1a05
   164c0:	0c0e100a 	.word	0x0c0e100a
   164c4:	1412      	.short	0x1412
   164c6:	16          	.byte	0x16
   164c7:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   164c8:	496b      	ldr	r1, [pc, #428]	; (16678 <bt_conn_set_state+0x210>)
   164ca:	486c      	ldr	r0, [pc, #432]	; (1667c <bt_conn_set_state+0x214>)
   164cc:	f7fa fe8a 	bl	111e4 <log_1>
		return;
   164d0:	e0bb      	b.n	1664a <bt_conn_set_state+0x1e2>
		return "connect-scan";
   164d2:	496b      	ldr	r1, [pc, #428]	; (16680 <bt_conn_set_state+0x218>)
   164d4:	e7f9      	b.n	164ca <bt_conn_set_state+0x62>
		return "connect-dir-adv";
   164d6:	496b      	ldr	r1, [pc, #428]	; (16684 <bt_conn_set_state+0x21c>)
   164d8:	e7f7      	b.n	164ca <bt_conn_set_state+0x62>
		return "connect-adv";
   164da:	496b      	ldr	r1, [pc, #428]	; (16688 <bt_conn_set_state+0x220>)
   164dc:	e7f5      	b.n	164ca <bt_conn_set_state+0x62>
		return "connect-auto";
   164de:	496b      	ldr	r1, [pc, #428]	; (1668c <bt_conn_set_state+0x224>)
   164e0:	e7f3      	b.n	164ca <bt_conn_set_state+0x62>
		return "connect";
   164e2:	496b      	ldr	r1, [pc, #428]	; (16690 <bt_conn_set_state+0x228>)
   164e4:	e7f1      	b.n	164ca <bt_conn_set_state+0x62>
		return "connected";
   164e6:	496b      	ldr	r1, [pc, #428]	; (16694 <bt_conn_set_state+0x22c>)
   164e8:	e7ef      	b.n	164ca <bt_conn_set_state+0x62>
		return "disconnect";
   164ea:	496b      	ldr	r1, [pc, #428]	; (16698 <bt_conn_set_state+0x230>)
   164ec:	e7ed      	b.n	164ca <bt_conn_set_state+0x62>
		return "(unknown)";
   164ee:	496b      	ldr	r1, [pc, #428]	; (1669c <bt_conn_set_state+0x234>)
   164f0:	e7eb      	b.n	164ca <bt_conn_set_state+0x62>
		return "disconnect-complete";
   164f2:	496b      	ldr	r1, [pc, #428]	; (166a0 <bt_conn_set_state+0x238>)
   164f4:	e7e9      	b.n	164ca <bt_conn_set_state+0x62>
		if (conn->type != BT_CONN_TYPE_ISO) {
   164f6:	7883      	ldrb	r3, [r0, #2]
   164f8:	2b08      	cmp	r3, #8
   164fa:	d0c0      	beq.n	1647e <bt_conn_set_state+0x16>
			bt_conn_ref(conn);
   164fc:	f00a ff96 	bl	2142c <bt_conn_ref>
   16500:	e7bd      	b.n	1647e <bt_conn_set_state+0x16>
		    conn->type == BT_CONN_TYPE_LE) {
   16502:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16504:	2b01      	cmp	r3, #1
   16506:	d1ba      	bne.n	1647e <bt_conn_set_state+0x16>
			k_work_cancel_delayable(&conn->deferred_work);
   16508:	3058      	adds	r0, #88	; 0x58
   1650a:	f00d fe71 	bl	241f0 <k_work_cancel_delayable>
   1650e:	e7b6      	b.n	1647e <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   16510:	78a3      	ldrb	r3, [r4, #2]
   16512:	2b04      	cmp	r3, #4
   16514:	f000 8099 	beq.w	1664a <bt_conn_set_state+0x1e2>
		k_fifo_init(&conn->tx_queue);
   16518:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1651c:	f00d fd14 	bl	23f48 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   16520:	2100      	movs	r1, #0
   16522:	4860      	ldr	r0, [pc, #384]	; (166a4 <bt_conn_set_state+0x23c>)
   16524:	f006 fe7a 	bl	1d21c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   16528:	2300      	movs	r3, #0
   1652a:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1652c:	6563      	str	r3, [r4, #84]	; 0x54
}
   1652e:	e08c      	b.n	1664a <bt_conn_set_state+0x1e2>
		if (conn->type == BT_CONN_TYPE_SCO) {
   16530:	78a3      	ldrb	r3, [r4, #2]
   16532:	2b04      	cmp	r3, #4
   16534:	d009      	beq.n	1654a <bt_conn_set_state+0xe2>
		switch (old_state) {
   16536:	2d08      	cmp	r5, #8
   16538:	f200 8087 	bhi.w	1664a <bt_conn_set_state+0x1e2>
   1653c:	e8df f005 	tbb	[pc, r5]
   16540:	4430094c 	.word	0x4430094c
   16544:	4c263a48 	.word	0x4c263a48
   16548:	4c          	.byte	0x4c
   16549:	00          	.byte	0x00
			bt_conn_unref(conn);
   1654a:	4620      	mov	r0, r4
   1654c:	f00a ff95 	bl	2147a <bt_conn_unref>
			break;
   16550:	e07b      	b.n	1664a <bt_conn_set_state+0x1e2>
			tx_notify(conn);
   16552:	4620      	mov	r0, r4
   16554:	f00a fe7a 	bl	2124c <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   16558:	78a3      	ldrb	r3, [r4, #2]
   1655a:	2b01      	cmp	r3, #1
   1655c:	d011      	beq.n	16582 <bt_conn_set_state+0x11a>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1655e:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16560:	f3bf 8f5b 	dmb	ish
   16564:	e854 3f00 	ldrex	r3, [r4]
   16568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1656c:	e844 3200 	strex	r2, r3, [r4]
   16570:	2a00      	cmp	r2, #0
   16572:	d1f7      	bne.n	16564 <bt_conn_set_state+0xfc>
   16574:	f3bf 8f5b 	dmb	ish
   16578:	2100      	movs	r1, #0
   1657a:	484a      	ldr	r0, [pc, #296]	; (166a4 <bt_conn_set_state+0x23c>)
   1657c:	f006 fe4e 	bl	1d21c <z_impl_k_poll_signal_raise>
   16580:	e063      	b.n	1664a <bt_conn_set_state+0x1e2>
				k_work_cancel_delayable(&conn->deferred_work);
   16582:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16586:	f00d fe33 	bl	241f0 <k_work_cancel_delayable>
   1658a:	e7e8      	b.n	1655e <bt_conn_set_state+0xf6>
			if (conn->err) {
   1658c:	7a63      	ldrb	r3, [r4, #9]
   1658e:	b91b      	cbnz	r3, 16598 <bt_conn_set_state+0x130>
			bt_conn_unref(conn);
   16590:	4620      	mov	r0, r4
   16592:	f00a ff72 	bl	2147a <bt_conn_unref>
			break;
   16596:	e058      	b.n	1664a <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   16598:	4620      	mov	r0, r4
   1659a:	f7ff fd5d 	bl	16058 <notify_connected>
   1659e:	e7f7      	b.n	16590 <bt_conn_set_state+0x128>
			if (conn->err) {
   165a0:	7a63      	ldrb	r3, [r4, #9]
   165a2:	b91b      	cbnz	r3, 165ac <bt_conn_set_state+0x144>
			bt_conn_unref(conn);
   165a4:	4620      	mov	r0, r4
   165a6:	f00a ff68 	bl	2147a <bt_conn_unref>
			break;
   165aa:	e04e      	b.n	1664a <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   165ac:	4620      	mov	r0, r4
   165ae:	f7ff fd53 	bl	16058 <notify_connected>
   165b2:	e7f7      	b.n	165a4 <bt_conn_set_state+0x13c>
			if (conn->err) {
   165b4:	7a63      	ldrb	r3, [r4, #9]
   165b6:	b91b      	cbnz	r3, 165c0 <bt_conn_set_state+0x158>
			bt_conn_unref(conn);
   165b8:	4620      	mov	r0, r4
   165ba:	f00a ff5e 	bl	2147a <bt_conn_unref>
			break;
   165be:	e044      	b.n	1664a <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   165c0:	4620      	mov	r0, r4
   165c2:	f7ff fd49 	bl	16058 <notify_connected>
   165c6:	e7f7      	b.n	165b8 <bt_conn_set_state+0x150>
			bt_conn_unref(conn);
   165c8:	4620      	mov	r0, r4
   165ca:	f00a ff56 	bl	2147a <bt_conn_unref>
			break;
   165ce:	e03c      	b.n	1664a <bt_conn_set_state+0x1e2>
			bt_conn_unref(conn);
   165d0:	4620      	mov	r0, r4
   165d2:	f00a ff52 	bl	2147a <bt_conn_unref>
			break;
   165d6:	e038      	b.n	1664a <bt_conn_set_state+0x1e2>
   165d8:	4b25      	ldr	r3, [pc, #148]	; (16670 <bt_conn_set_state+0x208>)
   165da:	4a26      	ldr	r2, [pc, #152]	; (16674 <bt_conn_set_state+0x20c>)
   165dc:	1a9b      	subs	r3, r3, r2
   165de:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   165e0:	f04f 0200 	mov.w	r2, #0
   165e4:	2102      	movs	r1, #2
   165e6:	f361 0202 	bfi	r2, r1, #0, #3
   165ea:	f36f 02c5 	bfc	r2, #3, #3
   165ee:	f363 128f 	bfi	r2, r3, #6, #10
   165f2:	4631      	mov	r1, r6
   165f4:	482c      	ldr	r0, [pc, #176]	; (166a8 <bt_conn_set_state+0x240>)
   165f6:	f7fa fdf5 	bl	111e4 <log_1>
   165fa:	e026      	b.n	1664a <bt_conn_set_state+0x1e2>
		if (conn->type == BT_CONN_TYPE_SCO) {
   165fc:	78a3      	ldrb	r3, [r4, #2]
   165fe:	2b04      	cmp	r3, #4
   16600:	d023      	beq.n	1664a <bt_conn_set_state+0x1e2>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16602:	2b01      	cmp	r3, #1
   16604:	d121      	bne.n	1664a <bt_conn_set_state+0x1e2>
					K_MSEC(10 * bt_dev.create_param.timeout));
   16606:	4b29      	ldr	r3, [pc, #164]	; (166ac <bt_conn_set_state+0x244>)
   16608:	8a9b      	ldrh	r3, [r3, #20]
   1660a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1660e:	005b      	lsls	r3, r3, #1
   16610:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16614:	17df      	asrs	r7, r3, #31
		} else {
			return (t * to_hz + off) / from_hz;
   16616:	03f9      	lsls	r1, r7, #15
   16618:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1661c:	03d8      	lsls	r0, r3, #15
   1661e:	f240 35e7 	movw	r5, #999	; 0x3e7
   16622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16626:	2300      	movs	r3, #0
   16628:	1940      	adds	r0, r0, r5
   1662a:	f04f 0500 	mov.w	r5, #0
   1662e:	eb45 0101 	adc.w	r1, r5, r1
   16632:	f7e9 fd65 	bl	100 <__aeabi_uldivmod>
   16636:	4602      	mov	r2, r0
   16638:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1663a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1663e:	f005 fce7 	bl	1c010 <k_work_schedule>
   16642:	e002      	b.n	1664a <bt_conn_set_state+0x1e2>
		process_unack_tx(conn);
   16644:	4620      	mov	r0, r4
   16646:	f00a fe48 	bl	212da <process_unack_tx>
}
   1664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1664c:	4b08      	ldr	r3, [pc, #32]	; (16670 <bt_conn_set_state+0x208>)
   1664e:	4a09      	ldr	r2, [pc, #36]	; (16674 <bt_conn_set_state+0x20c>)
   16650:	1a9b      	subs	r3, r3, r2
   16652:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   16654:	f04f 0200 	mov.w	r2, #0
   16658:	2102      	movs	r1, #2
   1665a:	f361 0202 	bfi	r2, r1, #0, #3
   1665e:	f36f 02c5 	bfc	r2, #3, #3
   16662:	f363 128f 	bfi	r2, r3, #6, #10
   16666:	4631      	mov	r1, r6
   16668:	4811      	ldr	r0, [pc, #68]	; (166b0 <bt_conn_set_state+0x248>)
   1666a:	f7fa fdbb 	bl	111e4 <log_1>
   1666e:	e7ec      	b.n	1664a <bt_conn_set_state+0x1e2>
   16670:	00024ce0 	.word	0x00024ce0
   16674:	00024ca0 	.word	0x00024ca0
   16678:	0002619c 	.word	0x0002619c
   1667c:	000261ac 	.word	0x000261ac
   16680:	0002614c 	.word	0x0002614c
   16684:	0002615c 	.word	0x0002615c
   16688:	0002616c 	.word	0x0002616c
   1668c:	00026178 	.word	0x00026178
   16690:	00026188 	.word	0x00026188
   16694:	00026444 	.word	0x00026444
   16698:	00026190 	.word	0x00026190
   1669c:	0002612c 	.word	0x0002612c
   166a0:	00026138 	.word	0x00026138
   166a4:	20000478 	.word	0x20000478
   166a8:	000261c0 	.word	0x000261c0
   166ac:	200002a8 	.word	0x200002a8
   166b0:	000261d8 	.word	0x000261d8

000166b4 <bt_conn_index>:
		index = conn - acl_conns;
   166b4:	4b03      	ldr	r3, [pc, #12]	; (166c4 <bt_conn_index+0x10>)
   166b6:	1ac0      	subs	r0, r0, r3
   166b8:	1180      	asrs	r0, r0, #6
   166ba:	4b03      	ldr	r3, [pc, #12]	; (166c8 <bt_conn_index+0x14>)
   166bc:	fb03 f000 	mul.w	r0, r3, r0
}
   166c0:	b2c0      	uxtb	r0, r0
   166c2:	4770      	bx	lr
   166c4:	20001840 	.word	0x20001840
   166c8:	aaaaaaab 	.word	0xaaaaaaab

000166cc <bt_conn_create_pdu_timeout>:
{
   166cc:	b538      	push	{r3, r4, r5, lr}
   166ce:	460c      	mov	r4, r1
	if (!pool) {
   166d0:	4601      	mov	r1, r0
   166d2:	b150      	cbz	r0, 166ea <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   166d4:	4608      	mov	r0, r1
   166d6:	f00c fa48 	bl	22b6a <net_buf_alloc_fixed>
	if (!buf) {
   166da:	4605      	mov	r5, r0
   166dc:	b138      	cbz	r0, 166ee <bt_conn_create_pdu_timeout+0x22>
	net_buf_simple_reserve(&buf->b, reserve);
   166de:	1d21      	adds	r1, r4, #4
   166e0:	3008      	adds	r0, #8
   166e2:	f00c fa64 	bl	22bae <net_buf_simple_reserve>
}
   166e6:	4628      	mov	r0, r5
   166e8:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   166ea:	4909      	ldr	r1, [pc, #36]	; (16710 <bt_conn_create_pdu_timeout+0x44>)
   166ec:	e7f2      	b.n	166d4 <bt_conn_create_pdu_timeout+0x8>
   166ee:	4b09      	ldr	r3, [pc, #36]	; (16714 <bt_conn_create_pdu_timeout+0x48>)
   166f0:	4a09      	ldr	r2, [pc, #36]	; (16718 <bt_conn_create_pdu_timeout+0x4c>)
   166f2:	1a9b      	subs	r3, r3, r2
   166f4:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   166f6:	f04f 0100 	mov.w	r1, #0
   166fa:	2202      	movs	r2, #2
   166fc:	f362 0102 	bfi	r1, r2, #0, #3
   16700:	f36f 01c5 	bfc	r1, #3, #3
   16704:	f363 118f 	bfi	r1, r3, #6, #10
   16708:	4804      	ldr	r0, [pc, #16]	; (1671c <bt_conn_create_pdu_timeout+0x50>)
   1670a:	f7fa fe21 	bl	11350 <log_0>
		return NULL;
   1670e:	e7ea      	b.n	166e6 <bt_conn_create_pdu_timeout+0x1a>
   16710:	200007c8 	.word	0x200007c8
   16714:	00024ce0 	.word	0x00024ce0
   16718:	00024ca0 	.word	0x00024ca0
   1671c:	000261f4 	.word	0x000261f4

00016720 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   16720:	b570      	push	{r4, r5, r6, lr}
   16722:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16724:	f3bf 8f5b 	dmb	ish
   16728:	6843      	ldr	r3, [r0, #4]
   1672a:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1672e:	f413 7f00 	tst.w	r3, #512	; 0x200
   16732:	d010      	beq.n	16756 <notify_le_param_updated+0x36>
   16734:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   16736:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   1673a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1673e:	428b      	cmp	r3, r1
   16740:	d309      	bcc.n	16756 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   16742:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   16746:	428b      	cmp	r3, r1
   16748:	d805      	bhi.n	16756 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   1674a:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   1674e:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   16752:	4299      	cmp	r1, r3
   16754:	d002      	beq.n	1675c <notify_le_param_updated+0x3c>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   16756:	4b18      	ldr	r3, [pc, #96]	; (167b8 <notify_le_param_updated+0x98>)
   16758:	681d      	ldr	r5, [r3, #0]
   1675a:	e00d      	b.n	16778 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1675c:	f3bf 8f5b 	dmb	ish
   16760:	e852 3f00 	ldrex	r3, [r2]
   16764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   16768:	e842 3100 	strex	r1, r3, [r2]
   1676c:	2900      	cmp	r1, #0
   1676e:	d1f7      	bne.n	16760 <notify_le_param_updated+0x40>
   16770:	f3bf 8f5b 	dmb	ish
}
   16774:	e7ef      	b.n	16756 <notify_le_param_updated+0x36>
   16776:	692d      	ldr	r5, [r5, #16]
   16778:	b15d      	cbz	r5, 16792 <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   1677a:	68ee      	ldr	r6, [r5, #12]
   1677c:	2e00      	cmp	r6, #0
   1677e:	d0fa      	beq.n	16776 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   16780:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   16784:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   16788:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1678c:	4620      	mov	r0, r4
   1678e:	47b0      	blx	r6
   16790:	e7f1      	b.n	16776 <notify_le_param_updated+0x56>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16792:	4d0a      	ldr	r5, [pc, #40]	; (167bc <notify_le_param_updated+0x9c>)
   16794:	e000      	b.n	16798 <notify_le_param_updated+0x78>
   16796:	3514      	adds	r5, #20
   16798:	4b09      	ldr	r3, [pc, #36]	; (167c0 <notify_le_param_updated+0xa0>)
   1679a:	429d      	cmp	r5, r3
   1679c:	d20b      	bcs.n	167b6 <notify_le_param_updated+0x96>
		if (cb->le_param_updated) {
   1679e:	68ee      	ldr	r6, [r5, #12]
   167a0:	2e00      	cmp	r6, #0
   167a2:	d0f8      	beq.n	16796 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   167a4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   167a8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   167ac:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   167b0:	4620      	mov	r0, r4
   167b2:	47b0      	blx	r6
   167b4:	e7ef      	b.n	16796 <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   167b6:	bd70      	pop	{r4, r5, r6, pc}
   167b8:	2000260c 	.word	0x2000260c
   167bc:	00024c90 	.word	0x00024c90
   167c0:	00024c90 	.word	0x00024c90

000167c4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167c6:	4606      	mov	r6, r0
   167c8:	460d      	mov	r5, r1
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   167ca:	4608      	mov	r0, r1
   167cc:	f00a fbea 	bl	20fa4 <bt_le_conn_params_valid>
   167d0:	4607      	mov	r7, r0
   167d2:	b338      	cbz	r0, 16824 <le_param_req+0x60>
		return false;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   167d4:	4b15      	ldr	r3, [pc, #84]	; (1682c <le_param_req+0x68>)
   167d6:	681c      	ldr	r4, [r3, #0]
   167d8:	e000      	b.n	167dc <le_param_req+0x18>
   167da:	6924      	ldr	r4, [r4, #16]
   167dc:	b16c      	cbz	r4, 167fa <le_param_req+0x36>
		if (!cb->le_param_req) {
   167de:	68a3      	ldr	r3, [r4, #8]
   167e0:	2b00      	cmp	r3, #0
   167e2:	d0fa      	beq.n	167da <le_param_req+0x16>
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
   167e4:	4629      	mov	r1, r5
   167e6:	4630      	mov	r0, r6
   167e8:	4798      	blx	r3
   167ea:	b1d0      	cbz	r0, 16822 <le_param_req+0x5e>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
   167ec:	4628      	mov	r0, r5
   167ee:	f00a fbd9 	bl	20fa4 <bt_le_conn_params_valid>
   167f2:	2800      	cmp	r0, #0
   167f4:	d1f1      	bne.n	167da <le_param_req+0x16>
			return false;
   167f6:	4607      	mov	r7, r0
   167f8:	e014      	b.n	16824 <le_param_req+0x60>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   167fa:	4c0d      	ldr	r4, [pc, #52]	; (16830 <le_param_req+0x6c>)
   167fc:	e000      	b.n	16800 <le_param_req+0x3c>
   167fe:	3414      	adds	r4, #20
   16800:	4b0c      	ldr	r3, [pc, #48]	; (16834 <le_param_req+0x70>)
   16802:	429c      	cmp	r4, r3
   16804:	d20e      	bcs.n	16824 <le_param_req+0x60>
		if (!cb->le_param_req) {
   16806:	68a3      	ldr	r3, [r4, #8]
   16808:	2b00      	cmp	r3, #0
   1680a:	d0f8      	beq.n	167fe <le_param_req+0x3a>
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
   1680c:	4629      	mov	r1, r5
   1680e:	4630      	mov	r0, r6
   16810:	4798      	blx	r3
   16812:	b148      	cbz	r0, 16828 <le_param_req+0x64>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
   16814:	4628      	mov	r0, r5
   16816:	f00a fbc5 	bl	20fa4 <bt_le_conn_params_valid>
   1681a:	2800      	cmp	r0, #0
   1681c:	d1ef      	bne.n	167fe <le_param_req+0x3a>
			return false;
   1681e:	4607      	mov	r7, r0
   16820:	e000      	b.n	16824 <le_param_req+0x60>
			return false;
   16822:	4607      	mov	r7, r0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   16824:	4638      	mov	r0, r7
   16826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   16828:	4607      	mov	r7, r0
   1682a:	e7fb      	b.n	16824 <le_param_req+0x60>
   1682c:	2000260c 	.word	0x2000260c
   16830:	00024c90 	.word	0x00024c90
   16834:	00024c90 	.word	0x00024c90

00016838 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   16838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1683a:	4607      	mov	r7, r0
   1683c:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1683e:	2400      	movs	r4, #0
   16840:	2c00      	cmp	r4, #0
   16842:	dd02      	ble.n	1684a <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   16844:	2500      	movs	r5, #0
}
   16846:	4628      	mov	r0, r5
   16848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1684a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1684e:	480c      	ldr	r0, [pc, #48]	; (16880 <bt_conn_lookup_addr_le+0x48>)
   16850:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   16854:	f00a fdea 	bl	2142c <bt_conn_ref>
		if (!conn) {
   16858:	4605      	mov	r5, r0
   1685a:	b170      	cbz	r0, 1687a <bt_conn_lookup_addr_le+0x42>
		if (conn->type != BT_CONN_TYPE_LE) {
   1685c:	7883      	ldrb	r3, [r0, #2]
   1685e:	2b01      	cmp	r3, #1
   16860:	d109      	bne.n	16876 <bt_conn_lookup_addr_le+0x3e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   16862:	4632      	mov	r2, r6
   16864:	4639      	mov	r1, r7
   16866:	f00a fe4b 	bl	21500 <bt_conn_is_peer_addr_le>
   1686a:	2800      	cmp	r0, #0
   1686c:	d1eb      	bne.n	16846 <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   1686e:	4628      	mov	r0, r5
   16870:	f00a fe03 	bl	2147a <bt_conn_unref>
			continue;
   16874:	e001      	b.n	1687a <bt_conn_lookup_addr_le+0x42>
			bt_conn_unref(conn);
   16876:	f00a fe00 	bl	2147a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1687a:	3401      	adds	r4, #1
   1687c:	e7e0      	b.n	16840 <bt_conn_lookup_addr_le+0x8>
   1687e:	bf00      	nop
   16880:	20001840 	.word	0x20001840

00016884 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16888:	4607      	mov	r7, r0
   1688a:	460e      	mov	r6, r1
   1688c:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1688e:	2400      	movs	r4, #0
   16890:	2c00      	cmp	r4, #0
   16892:	dd03      	ble.n	1689c <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   16894:	2500      	movs	r5, #0
}
   16896:	4628      	mov	r0, r5
   16898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1689c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   168a0:	4b10      	ldr	r3, [pc, #64]	; (168e4 <bt_conn_lookup_state_le+0x60>)
   168a2:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   168a6:	f00a fdc1 	bl	2142c <bt_conn_ref>
		if (!conn) {
   168aa:	4605      	mov	r5, r0
   168ac:	b188      	cbz	r0, 168d2 <bt_conn_lookup_state_le+0x4e>
		if (conn->type != BT_CONN_TYPE_LE) {
   168ae:	7883      	ldrb	r3, [r0, #2]
   168b0:	2b01      	cmp	r3, #1
   168b2:	d110      	bne.n	168d6 <bt_conn_lookup_state_le+0x52>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   168b4:	b126      	cbz	r6, 168c0 <bt_conn_lookup_state_le+0x3c>
   168b6:	4632      	mov	r2, r6
   168b8:	4639      	mov	r1, r7
   168ba:	f00a fe21 	bl	21500 <bt_conn_is_peer_addr_le>
   168be:	b168      	cbz	r0, 168dc <bt_conn_lookup_state_le+0x58>
		if (!(conn->state == state && conn->id == id)) {
   168c0:	7aab      	ldrb	r3, [r5, #10]
   168c2:	4543      	cmp	r3, r8
   168c4:	d102      	bne.n	168cc <bt_conn_lookup_state_le+0x48>
   168c6:	7a2b      	ldrb	r3, [r5, #8]
   168c8:	42bb      	cmp	r3, r7
   168ca:	d0e4      	beq.n	16896 <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   168cc:	4628      	mov	r0, r5
   168ce:	f00a fdd4 	bl	2147a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   168d2:	3401      	adds	r4, #1
   168d4:	e7dc      	b.n	16890 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   168d6:	f00a fdd0 	bl	2147a <bt_conn_unref>
			continue;
   168da:	e7fa      	b.n	168d2 <bt_conn_lookup_state_le+0x4e>
			bt_conn_unref(conn);
   168dc:	4628      	mov	r0, r5
   168de:	f00a fdcc 	bl	2147a <bt_conn_unref>
			continue;
   168e2:	e7f6      	b.n	168d2 <bt_conn_lookup_state_le+0x4e>
   168e4:	20001840 	.word	0x20001840

000168e8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   168e8:	b508      	push	{r3, lr}
   168ea:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   168ec:	4801      	ldr	r0, [pc, #4]	; (168f4 <bt_conn_create_frag_timeout+0xc>)
   168ee:	f7ff feed 	bl	166cc <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   168f2:	bd08      	pop	{r3, pc}
   168f4:	20000820 	.word	0x20000820

000168f8 <create_frag>:
{
   168f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   168fa:	4606      	mov	r6, r0
   168fc:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   168fe:	f04f 32ff 	mov.w	r2, #4294967295
   16902:	f04f 33ff 	mov.w	r3, #4294967295
   16906:	2000      	movs	r0, #0
   16908:	f7ff ffee 	bl	168e8 <bt_conn_create_frag_timeout>
   1690c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1690e:	7ab3      	ldrb	r3, [r6, #10]
   16910:	2b07      	cmp	r3, #7
   16912:	d11a      	bne.n	1694a <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   16914:	2300      	movs	r3, #0
   16916:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   16918:	4b10      	ldr	r3, [pc, #64]	; (1695c <create_frag+0x64>)
   1691a:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1691e:	f100 0708 	add.w	r7, r0, #8
   16922:	4638      	mov	r0, r7
   16924:	f00c f9db 	bl	22cde <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16928:	4286      	cmp	r6, r0
   1692a:	d212      	bcs.n	16952 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   1692c:	4b0b      	ldr	r3, [pc, #44]	; (1695c <create_frag+0x64>)
   1692e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16932:	4632      	mov	r2, r6
   16934:	f855 1f08 	ldr.w	r1, [r5, #8]!
   16938:	4638      	mov	r0, r7
   1693a:	f00c f999 	bl	22c70 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1693e:	4631      	mov	r1, r6
   16940:	4628      	mov	r0, r5
   16942:	f00c f9a8 	bl	22c96 <net_buf_simple_pull>
}
   16946:	4620      	mov	r0, r4
   16948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1694a:	f00c f941 	bl	22bd0 <net_buf_unref>
		return NULL;
   1694e:	2400      	movs	r4, #0
   16950:	e7f9      	b.n	16946 <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   16952:	4638      	mov	r0, r7
   16954:	f00c f9c3 	bl	22cde <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16958:	b286      	uxth	r6, r0
   1695a:	e7ea      	b.n	16932 <create_frag+0x3a>
   1695c:	200002a8 	.word	0x200002a8

00016960 <send_buf>:
{
   16960:	b538      	push	{r3, r4, r5, lr}
   16962:	4605      	mov	r5, r0
   16964:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   16966:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   16968:	4a1b      	ldr	r2, [pc, #108]	; (169d8 <send_buf+0x78>)
   1696a:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1696e:	429a      	cmp	r2, r3
   16970:	d21f      	bcs.n	169b2 <send_buf+0x52>
	frag = create_frag(conn, buf);
   16972:	f7ff ffc1 	bl	168f8 <create_frag>
	if (!frag) {
   16976:	4601      	mov	r1, r0
   16978:	b350      	cbz	r0, 169d0 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1697a:	2301      	movs	r3, #1
   1697c:	2200      	movs	r2, #0
   1697e:	4628      	mov	r0, r5
   16980:	f7ff fb96 	bl	160b0 <send_frag>
   16984:	4603      	mov	r3, r0
   16986:	b1c8      	cbz	r0, 169bc <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   16988:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   1698a:	4a13      	ldr	r2, [pc, #76]	; (169d8 <send_buf+0x78>)
   1698c:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   16990:	429a      	cmp	r2, r3
   16992:	d215      	bcs.n	169c0 <send_buf+0x60>
		frag = create_frag(conn, buf);
   16994:	4621      	mov	r1, r4
   16996:	4628      	mov	r0, r5
   16998:	f7ff ffae 	bl	168f8 <create_frag>
		if (!frag) {
   1699c:	4601      	mov	r1, r0
   1699e:	b1c8      	cbz	r0, 169d4 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   169a0:	2301      	movs	r3, #1
   169a2:	461a      	mov	r2, r3
   169a4:	4628      	mov	r0, r5
   169a6:	f7ff fb83 	bl	160b0 <send_frag>
   169aa:	4603      	mov	r3, r0
   169ac:	2800      	cmp	r0, #0
   169ae:	d1eb      	bne.n	16988 <send_buf+0x28>
   169b0:	e004      	b.n	169bc <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   169b2:	2300      	movs	r3, #0
   169b4:	2202      	movs	r2, #2
   169b6:	f7ff fb7b 	bl	160b0 <send_frag>
   169ba:	4603      	mov	r3, r0
}
   169bc:	4618      	mov	r0, r3
   169be:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   169c0:	2300      	movs	r3, #0
   169c2:	2203      	movs	r2, #3
   169c4:	4621      	mov	r1, r4
   169c6:	4628      	mov	r0, r5
   169c8:	f7ff fb72 	bl	160b0 <send_frag>
   169cc:	4603      	mov	r3, r0
   169ce:	e7f5      	b.n	169bc <send_buf+0x5c>
		return false;
   169d0:	2300      	movs	r3, #0
   169d2:	e7f3      	b.n	169bc <send_buf+0x5c>
			return false;
   169d4:	2300      	movs	r3, #0
   169d6:	e7f1      	b.n	169bc <send_buf+0x5c>
   169d8:	200002a8 	.word	0x200002a8

000169dc <bt_conn_process_tx>:
{
   169dc:	b538      	push	{r3, r4, r5, lr}
   169de:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   169e0:	7a83      	ldrb	r3, [r0, #10]
   169e2:	b97b      	cbnz	r3, 16a04 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   169e4:	1d03      	adds	r3, r0, #4
   169e6:	f3bf 8f5b 	dmb	ish
   169ea:	e853 2f00 	ldrex	r2, [r3]
   169ee:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   169f2:	e843 1000 	strex	r0, r1, [r3]
   169f6:	2800      	cmp	r0, #0
   169f8:	d1f7      	bne.n	169ea <bt_conn_process_tx+0xe>
   169fa:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   169fe:	f012 0f40 	tst.w	r2, #64	; 0x40
   16a02:	d10d      	bne.n	16a20 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16a04:	2200      	movs	r2, #0
   16a06:	2300      	movs	r3, #0
   16a08:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16a0c:	f00c f8b4 	bl	22b78 <net_buf_get>
	BT_ASSERT(buf);
   16a10:	4605      	mov	r5, r0
   16a12:	b148      	cbz	r0, 16a28 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   16a14:	4629      	mov	r1, r5
   16a16:	4620      	mov	r0, r4
   16a18:	f7ff ffa2 	bl	16960 <send_buf>
   16a1c:	b190      	cbz	r0, 16a44 <bt_conn_process_tx+0x68>
}
   16a1e:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   16a20:	4620      	mov	r0, r4
   16a22:	f00a fca4 	bl	2136e <conn_cleanup>
		return;
   16a26:	e7fa      	b.n	16a1e <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   16a28:	f240 23e7 	movw	r3, #743	; 0x2e7
   16a2c:	4a07      	ldr	r2, [pc, #28]	; (16a4c <bt_conn_process_tx+0x70>)
   16a2e:	4908      	ldr	r1, [pc, #32]	; (16a50 <bt_conn_process_tx+0x74>)
   16a30:	4808      	ldr	r0, [pc, #32]	; (16a54 <bt_conn_process_tx+0x78>)
   16a32:	f009 f92e 	bl	1fc92 <printk>
   16a36:	4040      	eors	r0, r0
   16a38:	f380 8811 	msr	BASEPRI, r0
   16a3c:	f04f 0003 	mov.w	r0, #3
   16a40:	df02      	svc	2
   16a42:	e7e7      	b.n	16a14 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   16a44:	4628      	mov	r0, r5
   16a46:	f00c f8c3 	bl	22bd0 <net_buf_unref>
   16a4a:	e7e8      	b.n	16a1e <bt_conn_process_tx+0x42>
   16a4c:	00026220 	.word	0x00026220
   16a50:	0002698c 	.word	0x0002698c
   16a54:	00025a84 	.word	0x00025a84

00016a58 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16a58:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   16a5a:	2400      	movs	r4, #0
   16a5c:	e006      	b.n	16a6c <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   16a5e:	4911      	ldr	r1, [pc, #68]	; (16aa4 <bt_conn_init+0x4c>)
   16a60:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   16a64:	4810      	ldr	r0, [pc, #64]	; (16aa8 <bt_conn_init+0x50>)
   16a66:	f00d fa7b 	bl	23f60 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   16a6a:	3401      	adds	r4, #1
   16a6c:	2c02      	cmp	r4, #2
   16a6e:	ddf6      	ble.n	16a5e <bt_conn_init+0x6>
	}

	bt_att_init();
   16a70:	f00b fba0 	bl	221b4 <bt_att_init>

	err = bt_smp_init();
   16a74:	f00b ff9e 	bl	229b4 <bt_smp_init>
	if (err) {
   16a78:	4604      	mov	r4, r0
   16a7a:	b108      	cbz	r0, 16a80 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   16a7c:	4620      	mov	r0, r4
   16a7e:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
   16a80:	f00a fe7f 	bl	21782 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16a84:	4625      	mov	r5, r4
   16a86:	2d00      	cmp	r5, #0
   16a88:	dcf8      	bgt.n	16a7c <bt_conn_init+0x24>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16a8a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   16a8e:	4b07      	ldr	r3, [pc, #28]	; (16aac <bt_conn_init+0x54>)
   16a90:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   16a94:	f00a fcca 	bl	2142c <bt_conn_ref>
			if (!conn) {
   16a98:	b108      	cbz	r0, 16a9e <bt_conn_init+0x46>
			bt_conn_unref(conn);
   16a9a:	f00a fcee 	bl	2147a <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16a9e:	3501      	adds	r5, #1
   16aa0:	e7f1      	b.n	16a86 <bt_conn_init+0x2e>
   16aa2:	bf00      	nop
   16aa4:	20002610 	.word	0x20002610
   16aa8:	200007b0 	.word	0x200007b0
   16aac:	20001840 	.word	0x20001840

00016ab0 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   16ab0:	4a05      	ldr	r2, [pc, #20]	; (16ac8 <get_ident+0x18>)
   16ab2:	7813      	ldrb	r3, [r2, #0]
   16ab4:	3301      	adds	r3, #1
   16ab6:	b2db      	uxtb	r3, r3
   16ab8:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   16aba:	b90b      	cbnz	r3, 16ac0 <get_ident+0x10>
		ident++;
   16abc:	3301      	adds	r3, #1
   16abe:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   16ac0:	4b01      	ldr	r3, [pc, #4]	; (16ac8 <get_ident+0x18>)
   16ac2:	7818      	ldrb	r0, [r3, #0]
   16ac4:	4770      	bx	lr
   16ac6:	bf00      	nop
   16ac8:	200036c0 	.word	0x200036c0

00016acc <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   16acc:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   16ace:	898b      	ldrh	r3, [r1, #12]
   16ad0:	2b01      	cmp	r3, #1
   16ad2:	d900      	bls.n	16ad6 <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   16ad4:	bd08      	pop	{r3, pc}
   16ad6:	4b08      	ldr	r3, [pc, #32]	; (16af8 <le_conn_param_rsp+0x2c>)
   16ad8:	4a08      	ldr	r2, [pc, #32]	; (16afc <le_conn_param_rsp+0x30>)
   16ada:	1a9b      	subs	r3, r3, r2
   16adc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   16ade:	f04f 0100 	mov.w	r1, #0
   16ae2:	2201      	movs	r2, #1
   16ae4:	f362 0102 	bfi	r1, r2, #0, #3
   16ae8:	f36f 01c5 	bfc	r1, #3, #3
   16aec:	f363 118f 	bfi	r1, r3, #6, #10
   16af0:	4803      	ldr	r0, [pc, #12]	; (16b00 <le_conn_param_rsp+0x34>)
   16af2:	f7fa fc2d 	bl	11350 <log_0>
		return;
   16af6:	e7ed      	b.n	16ad4 <le_conn_param_rsp+0x8>
   16af8:	00024d08 	.word	0x00024d08
   16afc:	00024ca0 	.word	0x00024ca0
   16b00:	00026278 	.word	0x00026278

00016b04 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   16b04:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   16b06:	2300      	movs	r3, #0
   16b08:	2b00      	cmp	r3, #0
   16b0a:	dd13      	ble.n	16b34 <l2cap_accept+0x30>
   16b0c:	4b12      	ldr	r3, [pc, #72]	; (16b58 <l2cap_accept+0x54>)
   16b0e:	4a13      	ldr	r2, [pc, #76]	; (16b5c <l2cap_accept+0x58>)
   16b10:	1a9b      	subs	r3, r3, r2
   16b12:	08db      	lsrs	r3, r3, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   16b14:	f04f 0200 	mov.w	r2, #0
   16b18:	2101      	movs	r1, #1
   16b1a:	f361 0202 	bfi	r2, r1, #0, #3
   16b1e:	f36f 02c5 	bfc	r2, #3, #3
   16b22:	f363 128f 	bfi	r2, r3, #6, #10
   16b26:	4601      	mov	r1, r0
   16b28:	480d      	ldr	r0, [pc, #52]	; (16b60 <l2cap_accept+0x5c>)
   16b2a:	f7fa fb5b 	bl	111e4 <log_1>

	return -ENOMEM;
   16b2e:	f06f 000b 	mvn.w	r0, #11
}
   16b32:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   16b34:	22e8      	movs	r2, #232	; 0xe8
   16b36:	fb02 f203 	mul.w	r2, r2, r3
   16b3a:	4c0a      	ldr	r4, [pc, #40]	; (16b64 <l2cap_accept+0x60>)
   16b3c:	58a2      	ldr	r2, [r4, r2]
   16b3e:	b10a      	cbz	r2, 16b44 <l2cap_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   16b40:	3301      	adds	r3, #1
   16b42:	e7e1      	b.n	16b08 <l2cap_accept+0x4>
		l2cap->chan.chan.ops = &ops;
   16b44:	4a07      	ldr	r2, [pc, #28]	; (16b64 <l2cap_accept+0x60>)
   16b46:	20e8      	movs	r0, #232	; 0xe8
   16b48:	fb00 2303 	mla	r3, r0, r3, r2
   16b4c:	4a06      	ldr	r2, [pc, #24]	; (16b68 <l2cap_accept+0x64>)
   16b4e:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   16b50:	600b      	str	r3, [r1, #0]
		return 0;
   16b52:	2000      	movs	r0, #0
   16b54:	e7ed      	b.n	16b32 <l2cap_accept+0x2e>
   16b56:	bf00      	nop
   16b58:	00024d08 	.word	0x00024d08
   16b5c:	00024ca0 	.word	0x00024ca0
   16b60:	00026294 	.word	0x00026294
   16b64:	20001900 	.word	0x20001900
   16b68:	0002641c 	.word	0x0002641c

00016b6c <l2cap_rtx_timeout>:
{
   16b6c:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   16b6e:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   16b72:	f850 5c10 	ldr.w	r5, [r0, #-16]
   16b76:	4b0c      	ldr	r3, [pc, #48]	; (16ba8 <l2cap_rtx_timeout+0x3c>)
   16b78:	4a0c      	ldr	r2, [pc, #48]	; (16bac <l2cap_rtx_timeout+0x40>)
   16b7a:	1a9b      	subs	r3, r3, r2
   16b7c:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   16b7e:	f04f 0200 	mov.w	r2, #0
   16b82:	2101      	movs	r1, #1
   16b84:	f361 0202 	bfi	r2, r1, #0, #3
   16b88:	f36f 02c5 	bfc	r2, #3, #3
   16b8c:	f363 128f 	bfi	r2, r3, #6, #10
   16b90:	4621      	mov	r1, r4
   16b92:	4807      	ldr	r0, [pc, #28]	; (16bb0 <l2cap_rtx_timeout+0x44>)
   16b94:	f7fa fb26 	bl	111e4 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   16b98:	4621      	mov	r1, r4
   16b9a:	4628      	mov	r0, r5
   16b9c:	f00a fd0c 	bl	215b8 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   16ba0:	4620      	mov	r0, r4
   16ba2:	f00a fd31 	bl	21608 <bt_l2cap_chan_del>
}
   16ba6:	bd38      	pop	{r3, r4, r5, pc}
   16ba8:	00024d08 	.word	0x00024d08
   16bac:	00024ca0 	.word	0x00024ca0
   16bb0:	000262bc 	.word	0x000262bc

00016bb4 <l2cap_chan_add>:
{
   16bb4:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   16bb6:	b1d9      	cbz	r1, 16bf0 <l2cap_chan_add+0x3c>
   16bb8:	4604      	mov	r4, r0
   16bba:	4615      	mov	r5, r2
   16bbc:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   16bbe:	4914      	ldr	r1, [pc, #80]	; (16c10 <l2cap_chan_add+0x5c>)
   16bc0:	f106 0010 	add.w	r0, r6, #16
   16bc4:	f00d fac8 	bl	24158 <k_work_init_delayable>
	atomic_clear(chan->status);
   16bc8:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16bcc:	2200      	movs	r2, #0
   16bce:	f3bf 8f5b 	dmb	ish
   16bd2:	e853 1f00 	ldrex	r1, [r3]
   16bd6:	e843 2000 	strex	r0, r2, [r3]
   16bda:	2800      	cmp	r0, #0
   16bdc:	d1f9      	bne.n	16bd2 <l2cap_chan_add+0x1e>
   16bde:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   16be2:	462a      	mov	r2, r5
   16be4:	4631      	mov	r1, r6
   16be6:	4620      	mov	r0, r4
   16be8:	f00a fd21 	bl	2162e <bt_l2cap_chan_add>
	return true;
   16bec:	2001      	movs	r0, #1
}
   16bee:	bd70      	pop	{r4, r5, r6, pc}
   16bf0:	4b08      	ldr	r3, [pc, #32]	; (16c14 <l2cap_chan_add+0x60>)
   16bf2:	4a09      	ldr	r2, [pc, #36]	; (16c18 <l2cap_chan_add+0x64>)
   16bf4:	1a9b      	subs	r3, r3, r2
   16bf6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   16bf8:	2201      	movs	r2, #1
   16bfa:	f362 0102 	bfi	r1, r2, #0, #3
   16bfe:	f36f 01c5 	bfc	r1, #3, #3
   16c02:	f363 118f 	bfi	r1, r3, #6, #10
   16c06:	4805      	ldr	r0, [pc, #20]	; (16c1c <l2cap_chan_add+0x68>)
   16c08:	f7fa fba2 	bl	11350 <log_0>
		return false;
   16c0c:	2000      	movs	r0, #0
   16c0e:	e7ee      	b.n	16bee <l2cap_chan_add+0x3a>
   16c10:	00016b6d 	.word	0x00016b6d
   16c14:	00024d08 	.word	0x00024d08
   16c18:	00024ca0 	.word	0x00024ca0
   16c1c:	000262cc 	.word	0x000262cc

00016c20 <bt_l2cap_connected>:
{
   16c20:	b530      	push	{r4, r5, lr}
   16c22:	b083      	sub	sp, #12
   16c24:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16c26:	4c1a      	ldr	r4, [pc, #104]	; (16c90 <bt_l2cap_connected+0x70>)
   16c28:	e000      	b.n	16c2c <bt_l2cap_connected+0xc>
   16c2a:	340c      	adds	r4, #12
   16c2c:	4b19      	ldr	r3, [pc, #100]	; (16c94 <bt_l2cap_connected+0x74>)
   16c2e:	429c      	cmp	r4, r3
   16c30:	d22c      	bcs.n	16c8c <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   16c32:	6863      	ldr	r3, [r4, #4]
   16c34:	a901      	add	r1, sp, #4
   16c36:	4628      	mov	r0, r5
   16c38:	4798      	blx	r3
   16c3a:	2800      	cmp	r0, #0
   16c3c:	dbf5      	blt.n	16c2a <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   16c3e:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   16c40:	8823      	ldrh	r3, [r4, #0]
   16c42:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   16c46:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   16c4a:	68a2      	ldr	r2, [r4, #8]
   16c4c:	4628      	mov	r0, r5
   16c4e:	f7ff ffb1 	bl	16bb4 <l2cap_chan_add>
   16c52:	b1d8      	cbz	r0, 16c8c <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   16c54:	9801      	ldr	r0, [sp, #4]
   16c56:	6843      	ldr	r3, [r0, #4]
   16c58:	681b      	ldr	r3, [r3, #0]
   16c5a:	b103      	cbz	r3, 16c5e <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   16c5c:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   16c5e:	9b01      	ldr	r3, [sp, #4]
   16c60:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16c62:	f3bf 8f5b 	dmb	ish
   16c66:	e853 2f00 	ldrex	r2, [r3]
   16c6a:	f042 0201 	orr.w	r2, r2, #1
   16c6e:	e843 2100 	strex	r1, r2, [r3]
   16c72:	2900      	cmp	r1, #0
   16c74:	d1f7      	bne.n	16c66 <bt_l2cap_connected+0x46>
   16c76:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   16c7a:	9801      	ldr	r0, [sp, #4]
   16c7c:	6843      	ldr	r3, [r0, #4]
   16c7e:	699b      	ldr	r3, [r3, #24]
   16c80:	2b00      	cmp	r3, #0
   16c82:	d0d2      	beq.n	16c2a <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   16c84:	f100 0168 	add.w	r1, r0, #104	; 0x68
   16c88:	4798      	blx	r3
   16c8a:	e7ce      	b.n	16c2a <bt_l2cap_connected+0xa>
}
   16c8c:	b003      	add	sp, #12
   16c8e:	bd30      	pop	{r4, r5, pc}
   16c90:	00024c6c 	.word	0x00024c6c
   16c94:	00024c90 	.word	0x00024c90

00016c98 <l2cap_create_le_sig_pdu>:
{
   16c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c9a:	460c      	mov	r4, r1
   16c9c:	4616      	mov	r6, r2
   16c9e:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   16ca0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16ca4:	2300      	movs	r3, #0
   16ca6:	2100      	movs	r1, #0
   16ca8:	4608      	mov	r0, r1
   16caa:	f00a fcd0 	bl	2164e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   16cae:	4607      	mov	r7, r0
   16cb0:	b140      	cbz	r0, 16cc4 <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   16cb2:	2104      	movs	r1, #4
   16cb4:	3008      	adds	r0, #8
   16cb6:	f00b ffd5 	bl	22c64 <net_buf_simple_add>
	hdr->code = code;
   16cba:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   16cbc:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   16cbe:	8045      	strh	r5, [r0, #2]
}
   16cc0:	4638      	mov	r0, r7
   16cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16cc4:	4b08      	ldr	r3, [pc, #32]	; (16ce8 <l2cap_create_le_sig_pdu+0x50>)
   16cc6:	4a09      	ldr	r2, [pc, #36]	; (16cec <l2cap_create_le_sig_pdu+0x54>)
   16cc8:	1a9b      	subs	r3, r3, r2
   16cca:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   16ccc:	f04f 0200 	mov.w	r2, #0
   16cd0:	2101      	movs	r1, #1
   16cd2:	f361 0202 	bfi	r2, r1, #0, #3
   16cd6:	f36f 02c5 	bfc	r2, #3, #3
   16cda:	f363 128f 	bfi	r2, r3, #6, #10
   16cde:	4621      	mov	r1, r4
   16ce0:	4803      	ldr	r0, [pc, #12]	; (16cf0 <l2cap_create_le_sig_pdu+0x58>)
   16ce2:	f7fa fa7f 	bl	111e4 <log_1>
		return NULL;
   16ce6:	e7eb      	b.n	16cc0 <l2cap_create_le_sig_pdu+0x28>
   16ce8:	00024d08 	.word	0x00024d08
   16cec:	00024ca0 	.word	0x00024ca0
   16cf0:	000262f0 	.word	0x000262f0

00016cf4 <le_conn_param_update_req>:
{
   16cf4:	b570      	push	{r4, r5, r6, lr}
   16cf6:	b084      	sub	sp, #16
   16cf8:	4614      	mov	r4, r2
	struct bt_conn *conn = l2cap->chan.chan.conn;
   16cfa:	6805      	ldr	r5, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   16cfc:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
   16cfe:	8992      	ldrh	r2, [r2, #12]
   16d00:	2a07      	cmp	r2, #7
   16d02:	d932      	bls.n	16d6a <le_conn_param_update_req+0x76>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   16d04:	78ea      	ldrb	r2, [r5, #3]
   16d06:	2a00      	cmp	r2, #0
   16d08:	d140      	bne.n	16d8c <le_conn_param_update_req+0x98>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   16d0a:	881a      	ldrh	r2, [r3, #0]
   16d0c:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   16d10:	885a      	ldrh	r2, [r3, #2]
   16d12:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   16d16:	889a      	ldrh	r2, [r3, #4]
   16d18:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   16d1c:	88db      	ldrh	r3, [r3, #6]
   16d1e:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   16d22:	2302      	movs	r3, #2
   16d24:	460a      	mov	r2, r1
   16d26:	2113      	movs	r1, #19
   16d28:	4620      	mov	r0, r4
   16d2a:	f7ff ffb5 	bl	16c98 <l2cap_create_le_sig_pdu>
	if (!buf) {
   16d2e:	4606      	mov	r6, r0
   16d30:	b390      	cbz	r0, 16d98 <le_conn_param_update_req+0xa4>
	accepted = le_param_req(conn, &param);
   16d32:	a902      	add	r1, sp, #8
   16d34:	4628      	mov	r0, r5
   16d36:	f7ff fd45 	bl	167c4 <le_param_req>
   16d3a:	4604      	mov	r4, r0
   16d3c:	2102      	movs	r1, #2
   16d3e:	f106 0008 	add.w	r0, r6, #8
   16d42:	f00b ff8f 	bl	22c64 <net_buf_simple_add>
	if (accepted) {
   16d46:	b34c      	cbz	r4, 16d9c <le_conn_param_update_req+0xa8>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   16d48:	2300      	movs	r3, #0
   16d4a:	7003      	strb	r3, [r0, #0]
   16d4c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   16d4e:	2300      	movs	r3, #0
   16d50:	9300      	str	r3, [sp, #0]
   16d52:	4632      	mov	r2, r6
   16d54:	2105      	movs	r1, #5
   16d56:	4628      	mov	r0, r5
   16d58:	f00a fc7e 	bl	21658 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   16d5c:	bb18      	cbnz	r0, 16da6 <le_conn_param_update_req+0xb2>
	if (accepted) {
   16d5e:	b1dc      	cbz	r4, 16d98 <le_conn_param_update_req+0xa4>
		bt_conn_le_conn_update(conn, &param);
   16d60:	a902      	add	r1, sp, #8
   16d62:	4628      	mov	r0, r5
   16d64:	f00a fbf3 	bl	2154e <bt_conn_le_conn_update>
   16d68:	e016      	b.n	16d98 <le_conn_param_update_req+0xa4>
   16d6a:	4b11      	ldr	r3, [pc, #68]	; (16db0 <le_conn_param_update_req+0xbc>)
   16d6c:	4a11      	ldr	r2, [pc, #68]	; (16db4 <le_conn_param_update_req+0xc0>)
   16d6e:	1a9b      	subs	r3, r3, r2
   16d70:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn update param req");
   16d72:	f04f 0100 	mov.w	r1, #0
   16d76:	2201      	movs	r2, #1
   16d78:	f362 0102 	bfi	r1, r2, #0, #3
   16d7c:	f36f 01c5 	bfc	r1, #3, #3
   16d80:	f363 118f 	bfi	r1, r3, #6, #10
   16d84:	480c      	ldr	r0, [pc, #48]	; (16db8 <le_conn_param_update_req+0xc4>)
   16d86:	f7fa fae3 	bl	11350 <log_0>
		return;
   16d8a:	e005      	b.n	16d98 <le_conn_param_update_req+0xa4>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   16d8c:	2200      	movs	r2, #0
   16d8e:	9200      	str	r2, [sp, #0]
   16d90:	4613      	mov	r3, r2
   16d92:	4628      	mov	r0, r5
   16d94:	f00a fc75 	bl	21682 <l2cap_send_reject>
}
   16d98:	b004      	add	sp, #16
   16d9a:	bd70      	pop	{r4, r5, r6, pc}
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   16d9c:	2301      	movs	r3, #1
   16d9e:	7003      	strb	r3, [r0, #0]
   16da0:	2300      	movs	r3, #0
   16da2:	7043      	strb	r3, [r0, #1]
   16da4:	e7d3      	b.n	16d4e <le_conn_param_update_req+0x5a>
		net_buf_unref(buf);
   16da6:	4630      	mov	r0, r6
   16da8:	f00b ff12 	bl	22bd0 <net_buf_unref>
   16dac:	e7d7      	b.n	16d5e <le_conn_param_update_req+0x6a>
   16dae:	bf00      	nop
   16db0:	00024d08 	.word	0x00024d08
   16db4:	00024ca0 	.word	0x00024ca0
   16db8:	00026318 	.word	0x00026318

00016dbc <l2cap_recv>:
{
   16dbc:	b570      	push	{r4, r5, r6, lr}
   16dbe:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   16dc0:	898b      	ldrh	r3, [r1, #12]
   16dc2:	2b03      	cmp	r3, #3
   16dc4:	d92e      	bls.n	16e24 <l2cap_recv+0x68>
   16dc6:	4606      	mov	r6, r0
   16dc8:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   16dca:	2104      	movs	r1, #4
   16dcc:	f104 0008 	add.w	r0, r4, #8
   16dd0:	f00b ff69 	bl	22ca6 <net_buf_simple_pull_mem>
   16dd4:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   16dd6:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   16dd8:	89a1      	ldrh	r1, [r4, #12]
   16dda:	4291      	cmp	r1, r2
   16ddc:	d135      	bne.n	16e4a <l2cap_recv+0x8e>
	if (!hdr->ident) {
   16dde:	7841      	ldrb	r1, [r0, #1]
   16de0:	2900      	cmp	r1, #0
   16de2:	d043      	beq.n	16e6c <l2cap_recv+0xb0>
	switch (hdr->code) {
   16de4:	7803      	ldrb	r3, [r0, #0]
   16de6:	2b12      	cmp	r3, #18
   16de8:	d054      	beq.n	16e94 <l2cap_recv+0xd8>
   16dea:	2b13      	cmp	r3, #19
   16dec:	d04d      	beq.n	16e8a <l2cap_recv+0xce>
   16dee:	2b01      	cmp	r3, #1
   16df0:	d028      	beq.n	16e44 <l2cap_recv+0x88>
   16df2:	492b      	ldr	r1, [pc, #172]	; (16ea0 <l2cap_recv+0xe4>)
   16df4:	4a2b      	ldr	r2, [pc, #172]	; (16ea4 <l2cap_recv+0xe8>)
   16df6:	1a89      	subs	r1, r1, r2
   16df8:	08c9      	lsrs	r1, r1, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   16dfa:	f04f 0200 	mov.w	r2, #0
   16dfe:	2002      	movs	r0, #2
   16e00:	f360 0202 	bfi	r2, r0, #0, #3
   16e04:	f36f 02c5 	bfc	r2, #3, #3
   16e08:	f361 128f 	bfi	r2, r1, #6, #10
   16e0c:	4619      	mov	r1, r3
   16e0e:	4826      	ldr	r0, [pc, #152]	; (16ea8 <l2cap_recv+0xec>)
   16e10:	f7fa f9e8 	bl	111e4 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   16e14:	7869      	ldrb	r1, [r5, #1]
   16e16:	2200      	movs	r2, #0
   16e18:	9200      	str	r2, [sp, #0]
   16e1a:	4613      	mov	r3, r2
   16e1c:	6830      	ldr	r0, [r6, #0]
   16e1e:	f00a fc30 	bl	21682 <l2cap_send_reject>
		break;
   16e22:	e00f      	b.n	16e44 <l2cap_recv+0x88>
   16e24:	4b1e      	ldr	r3, [pc, #120]	; (16ea0 <l2cap_recv+0xe4>)
   16e26:	4a1f      	ldr	r2, [pc, #124]	; (16ea4 <l2cap_recv+0xe8>)
   16e28:	1a9b      	subs	r3, r3, r2
   16e2a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   16e2c:	f04f 0100 	mov.w	r1, #0
   16e30:	2201      	movs	r2, #1
   16e32:	f362 0102 	bfi	r1, r2, #0, #3
   16e36:	f36f 01c5 	bfc	r1, #3, #3
   16e3a:	f363 118f 	bfi	r1, r3, #6, #10
   16e3e:	481b      	ldr	r0, [pc, #108]	; (16eac <l2cap_recv+0xf0>)
   16e40:	f7fa fa86 	bl	11350 <log_0>
}
   16e44:	2000      	movs	r0, #0
   16e46:	b002      	add	sp, #8
   16e48:	bd70      	pop	{r4, r5, r6, pc}
   16e4a:	4815      	ldr	r0, [pc, #84]	; (16ea0 <l2cap_recv+0xe4>)
   16e4c:	4b15      	ldr	r3, [pc, #84]	; (16ea4 <l2cap_recv+0xe8>)
   16e4e:	1ac0      	subs	r0, r0, r3
   16e50:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   16e52:	f04f 0300 	mov.w	r3, #0
   16e56:	2401      	movs	r4, #1
   16e58:	f364 0302 	bfi	r3, r4, #0, #3
   16e5c:	f36f 03c5 	bfc	r3, #3, #3
   16e60:	f360 138f 	bfi	r3, r0, #6, #10
   16e64:	4812      	ldr	r0, [pc, #72]	; (16eb0 <l2cap_recv+0xf4>)
   16e66:	f7fa f9f3 	bl	11250 <log_2>
		return 0;
   16e6a:	e7eb      	b.n	16e44 <l2cap_recv+0x88>
   16e6c:	4b0c      	ldr	r3, [pc, #48]	; (16ea0 <l2cap_recv+0xe4>)
   16e6e:	4a0d      	ldr	r2, [pc, #52]	; (16ea4 <l2cap_recv+0xe8>)
   16e70:	1a9b      	subs	r3, r3, r2
   16e72:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   16e74:	2201      	movs	r2, #1
   16e76:	f362 0102 	bfi	r1, r2, #0, #3
   16e7a:	f36f 01c5 	bfc	r1, #3, #3
   16e7e:	f363 118f 	bfi	r1, r3, #6, #10
   16e82:	480c      	ldr	r0, [pc, #48]	; (16eb4 <l2cap_recv+0xf8>)
   16e84:	f7fa fa64 	bl	11350 <log_0>
		return 0;
   16e88:	e7dc      	b.n	16e44 <l2cap_recv+0x88>
		le_conn_param_rsp(l2cap, buf);
   16e8a:	4621      	mov	r1, r4
   16e8c:	4630      	mov	r0, r6
   16e8e:	f7ff fe1d 	bl	16acc <le_conn_param_rsp>
		break;
   16e92:	e7d7      	b.n	16e44 <l2cap_recv+0x88>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   16e94:	4622      	mov	r2, r4
   16e96:	4630      	mov	r0, r6
   16e98:	f7ff ff2c 	bl	16cf4 <le_conn_param_update_req>
			break;
   16e9c:	e7d2      	b.n	16e44 <l2cap_recv+0x88>
   16e9e:	bf00      	nop
   16ea0:	00024d08 	.word	0x00024d08
   16ea4:	00024ca0 	.word	0x00024ca0
   16ea8:	000263a4 	.word	0x000263a4
   16eac:	0002633c 	.word	0x0002633c
   16eb0:	0002635c 	.word	0x0002635c
   16eb4:	00026380 	.word	0x00026380

00016eb8 <bt_l2cap_recv>:
{
   16eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16eba:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   16ebc:	898b      	ldrh	r3, [r1, #12]
   16ebe:	2b03      	cmp	r3, #3
   16ec0:	d911      	bls.n	16ee6 <bt_l2cap_recv+0x2e>
   16ec2:	4605      	mov	r5, r0
   16ec4:	4616      	mov	r6, r2
   16ec6:	2104      	movs	r1, #4
   16ec8:	f104 0008 	add.w	r0, r4, #8
   16ecc:	f00b feeb 	bl	22ca6 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   16ed0:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   16ed2:	4639      	mov	r1, r7
   16ed4:	4628      	mov	r0, r5
   16ed6:	f00a fc14 	bl	21702 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16eda:	b1c0      	cbz	r0, 16f0e <bt_l2cap_recv+0x56>
	l2cap_chan_recv(chan, buf, complete);
   16edc:	4632      	mov	r2, r6
   16ede:	4621      	mov	r1, r4
   16ee0:	f00a fb5c 	bl	2159c <l2cap_chan_recv>
}
   16ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ee6:	4b14      	ldr	r3, [pc, #80]	; (16f38 <bt_l2cap_recv+0x80>)
   16ee8:	4a14      	ldr	r2, [pc, #80]	; (16f3c <bt_l2cap_recv+0x84>)
   16eea:	1a9b      	subs	r3, r3, r2
   16eec:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   16eee:	f04f 0100 	mov.w	r1, #0
   16ef2:	2201      	movs	r2, #1
   16ef4:	f362 0102 	bfi	r1, r2, #0, #3
   16ef8:	f36f 01c5 	bfc	r1, #3, #3
   16efc:	f363 118f 	bfi	r1, r3, #6, #10
   16f00:	480f      	ldr	r0, [pc, #60]	; (16f40 <bt_l2cap_recv+0x88>)
   16f02:	f7fa fa25 	bl	11350 <log_0>
		net_buf_unref(buf);
   16f06:	4620      	mov	r0, r4
   16f08:	f00b fe62 	bl	22bd0 <net_buf_unref>
		return;
   16f0c:	e7ea      	b.n	16ee4 <bt_l2cap_recv+0x2c>
   16f0e:	4b0a      	ldr	r3, [pc, #40]	; (16f38 <bt_l2cap_recv+0x80>)
   16f10:	4a0a      	ldr	r2, [pc, #40]	; (16f3c <bt_l2cap_recv+0x84>)
   16f12:	1a9b      	subs	r3, r3, r2
   16f14:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   16f16:	f04f 0200 	mov.w	r2, #0
   16f1a:	2102      	movs	r1, #2
   16f1c:	f361 0202 	bfi	r2, r1, #0, #3
   16f20:	f36f 02c5 	bfc	r2, #3, #3
   16f24:	f363 128f 	bfi	r2, r3, #6, #10
   16f28:	4639      	mov	r1, r7
   16f2a:	4806      	ldr	r0, [pc, #24]	; (16f44 <bt_l2cap_recv+0x8c>)
   16f2c:	f7fa f95a 	bl	111e4 <log_1>
		net_buf_unref(buf);
   16f30:	4620      	mov	r0, r4
   16f32:	f00b fe4d 	bl	22bd0 <net_buf_unref>
		return;
   16f36:	e7d5      	b.n	16ee4 <bt_l2cap_recv+0x2c>
   16f38:	00024d08 	.word	0x00024d08
   16f3c:	00024ca0 	.word	0x00024ca0
   16f40:	000263c4 	.word	0x000263c4
   16f44:	000263e4 	.word	0x000263e4

00016f48 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   16f48:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   16f4a:	4b03      	ldr	r3, [pc, #12]	; (16f58 <att_cfm_sent+0x10>)
   16f4c:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16f50:	f00a fc18 	bl	21784 <att_sent>
}
   16f54:	bd08      	pop	{r3, pc}
   16f56:	bf00      	nop
   16f58:	00021a7f 	.word	0x00021a7f

00016f5c <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   16f5c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   16f5e:	4b03      	ldr	r3, [pc, #12]	; (16f6c <att_rsp_sent+0x10>)
   16f60:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16f64:	f00a fc0e 	bl	21784 <att_sent>
}
   16f68:	bd08      	pop	{r3, pc}
   16f6a:	bf00      	nop
   16f6c:	00021a9b 	.word	0x00021a9b

00016f70 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   16f70:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   16f72:	4b03      	ldr	r3, [pc, #12]	; (16f80 <att_req_sent+0x10>)
   16f74:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16f78:	f00a fc04 	bl	21784 <att_sent>
}
   16f7c:	bd08      	pop	{r3, pc}
   16f7e:	bf00      	nop
   16f80:	00021a67 	.word	0x00021a67

00016f84 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   16f84:	4b08      	ldr	r3, [pc, #32]	; (16fa8 <att_cb+0x24>)
   16f86:	4298      	cmp	r0, r3
   16f88:	d009      	beq.n	16f9e <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   16f8a:	4b08      	ldr	r3, [pc, #32]	; (16fac <att_cb+0x28>)
   16f8c:	4298      	cmp	r0, r3
   16f8e:	d008      	beq.n	16fa2 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   16f90:	4b07      	ldr	r3, [pc, #28]	; (16fb0 <att_cb+0x2c>)
   16f92:	4298      	cmp	r0, r3
   16f94:	d001      	beq.n	16f9a <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   16f96:	4807      	ldr	r0, [pc, #28]	; (16fb4 <att_cb+0x30>)
	}
}
   16f98:	4770      	bx	lr
		return att_req_sent;
   16f9a:	4807      	ldr	r0, [pc, #28]	; (16fb8 <att_cb+0x34>)
   16f9c:	4770      	bx	lr
		return att_rsp_sent;
   16f9e:	4807      	ldr	r0, [pc, #28]	; (16fbc <att_cb+0x38>)
   16fa0:	4770      	bx	lr
		return att_cfm_sent;
   16fa2:	4807      	ldr	r0, [pc, #28]	; (16fc0 <att_cb+0x3c>)
   16fa4:	4770      	bx	lr
   16fa6:	bf00      	nop
   16fa8:	00021a9b 	.word	0x00021a9b
   16fac:	00021a7f 	.word	0x00021a7f
   16fb0:	00021a67 	.word	0x00021a67
   16fb4:	00021785 	.word	0x00021785
   16fb8:	00016f71 	.word	0x00016f71
   16fbc:	00016f5d 	.word	0x00016f5d
   16fc0:	00016f49 	.word	0x00016f49

00016fc4 <chan_cb>:
{
   16fc4:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   16fc6:	6883      	ldr	r3, [r0, #8]
   16fc8:	7818      	ldrb	r0, [r3, #0]
   16fca:	f00a fc24 	bl	21816 <att_op_get_type>
   16fce:	3801      	subs	r0, #1
   16fd0:	2804      	cmp	r0, #4
   16fd2:	d808      	bhi.n	16fe6 <chan_cb+0x22>
   16fd4:	e8df f000 	tbb	[pc, r0]
   16fd8:	09070305 	.word	0x09070305
   16fdc:	05          	.byte	0x05
   16fdd:	00          	.byte	0x00
   16fde:	4804      	ldr	r0, [pc, #16]	; (16ff0 <chan_cb+0x2c>)
   16fe0:	e000      	b.n	16fe4 <chan_cb+0x20>
		return chan_req_sent;
   16fe2:	4804      	ldr	r0, [pc, #16]	; (16ff4 <chan_cb+0x30>)
}
   16fe4:	bd08      	pop	{r3, pc}
		return NULL;
   16fe6:	2000      	movs	r0, #0
   16fe8:	e7fc      	b.n	16fe4 <chan_cb+0x20>
		return chan_cfm_sent;
   16fea:	4803      	ldr	r0, [pc, #12]	; (16ff8 <chan_cb+0x34>)
   16fec:	e7fa      	b.n	16fe4 <chan_cb+0x20>
   16fee:	bf00      	nop
   16ff0:	00021a9b 	.word	0x00021a9b
   16ff4:	00021a67 	.word	0x00021a67
   16ff8:	00021a7f 	.word	0x00021a7f

00016ffc <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   16ffc:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   16ffe:	7a83      	ldrb	r3, [r0, #10]
   17000:	2b07      	cmp	r3, #7
   17002:	d111      	bne.n	17028 <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   17004:	2104      	movs	r1, #4
   17006:	f00a fb7c 	bl	21702 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1700a:	4604      	mov	r4, r0
   1700c:	b1f0      	cbz	r0, 1704c <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1700e:	f3bf 8f5b 	dmb	ish
   17012:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   17016:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1701a:	f013 0f04 	tst.w	r3, #4
   1701e:	d126      	bne.n	1706e <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   17020:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   17024:	4620      	mov	r0, r4
   17026:	bd10      	pop	{r4, pc}
   17028:	4b1a      	ldr	r3, [pc, #104]	; (17094 <att_get+0x98>)
   1702a:	4a1b      	ldr	r2, [pc, #108]	; (17098 <att_get+0x9c>)
   1702c:	1a9b      	subs	r3, r3, r2
   1702e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   17030:	f04f 0100 	mov.w	r1, #0
   17034:	2202      	movs	r2, #2
   17036:	f362 0102 	bfi	r1, r2, #0, #3
   1703a:	f36f 01c5 	bfc	r1, #3, #3
   1703e:	f363 118f 	bfi	r1, r3, #6, #10
   17042:	4816      	ldr	r0, [pc, #88]	; (1709c <att_get+0xa0>)
   17044:	f7fa f984 	bl	11350 <log_0>
		return NULL;
   17048:	2400      	movs	r4, #0
   1704a:	e7eb      	b.n	17024 <att_get+0x28>
   1704c:	4b11      	ldr	r3, [pc, #68]	; (17094 <att_get+0x98>)
   1704e:	4a12      	ldr	r2, [pc, #72]	; (17098 <att_get+0x9c>)
   17050:	1a9b      	subs	r3, r3, r2
   17052:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   17054:	f04f 0100 	mov.w	r1, #0
   17058:	2201      	movs	r2, #1
   1705a:	f362 0102 	bfi	r1, r2, #0, #3
   1705e:	f36f 01c5 	bfc	r1, #3, #3
   17062:	f363 118f 	bfi	r1, r3, #6, #10
   17066:	480e      	ldr	r0, [pc, #56]	; (170a0 <att_get+0xa4>)
   17068:	f7fa f972 	bl	11350 <log_0>
		return NULL;
   1706c:	e7da      	b.n	17024 <att_get+0x28>
   1706e:	4b09      	ldr	r3, [pc, #36]	; (17094 <att_get+0x98>)
   17070:	4a09      	ldr	r2, [pc, #36]	; (17098 <att_get+0x9c>)
   17072:	1a9b      	subs	r3, r3, r2
   17074:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   17076:	f04f 0100 	mov.w	r1, #0
   1707a:	2202      	movs	r2, #2
   1707c:	f362 0102 	bfi	r1, r2, #0, #3
   17080:	f36f 01c5 	bfc	r1, #3, #3
   17084:	f363 118f 	bfi	r1, r3, #6, #10
   17088:	4806      	ldr	r0, [pc, #24]	; (170a4 <att_get+0xa8>)
   1708a:	f7fa f961 	bl	11350 <log_0>
		return NULL;
   1708e:	2400      	movs	r4, #0
   17090:	e7c8      	b.n	17024 <att_get+0x28>
   17092:	bf00      	nop
   17094:	00024cd0 	.word	0x00024cd0
   17098:	00024ca0 	.word	0x00024ca0
   1709c:	00026440 	.word	0x00026440
   170a0:	00026450 	.word	0x00026450
   170a4:	0002646c 	.word	0x0002646c

000170a8 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   170a8:	b570      	push	{r4, r5, r6, lr}
   170aa:	b082      	sub	sp, #8
   170ac:	4605      	mov	r5, r0
   170ae:	460e      	mov	r6, r1
	return list->head;
   170b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   170b2:	b10b      	cbz	r3, 170b8 <att_chan_new+0x10>
   170b4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   170b8:	9301      	str	r3, [sp, #4]
	int quota = 0;
   170ba:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   170bc:	e014      	b.n	170e8 <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   170be:	3101      	adds	r1, #1
   170c0:	e017      	b.n	170f2 <att_chan_new+0x4a>
   170c2:	4b2d      	ldr	r3, [pc, #180]	; (17178 <att_chan_new+0xd0>)
   170c4:	4a2d      	ldr	r2, [pc, #180]	; (1717c <att_chan_new+0xd4>)
   170c6:	1a9b      	subs	r3, r3, r2
   170c8:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   170ca:	f04f 0200 	mov.w	r2, #0
   170ce:	2001      	movs	r0, #1
   170d0:	f360 0202 	bfi	r2, r0, #0, #3
   170d4:	f36f 02c5 	bfc	r2, #3, #3
   170d8:	f363 128f 	bfi	r2, r3, #6, #10
   170dc:	4828      	ldr	r0, [pc, #160]	; (17180 <att_chan_new+0xd8>)
   170de:	f7fa f881 	bl	111e4 <log_1>
			return NULL;
   170e2:	2400      	movs	r4, #0
   170e4:	e033      	b.n	1714e <att_chan_new+0xa6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   170e6:	9301      	str	r3, [sp, #4]
   170e8:	9c01      	ldr	r4, [sp, #4]
   170ea:	b174      	cbz	r4, 1710a <att_chan_new+0x62>
		if (chan->att == att) {
   170ec:	6823      	ldr	r3, [r4, #0]
   170ee:	42ab      	cmp	r3, r5
   170f0:	d0e5      	beq.n	170be <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   170f2:	2901      	cmp	r1, #1
   170f4:	d0e5      	beq.n	170c2 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   170f6:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   170fa:	d0f4      	beq.n	170e6 <att_chan_new+0x3e>
	return node->next;
   170fc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17100:	2b00      	cmp	r3, #0
   17102:	d0f0      	beq.n	170e6 <att_chan_new+0x3e>
   17104:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   17108:	e7ed      	b.n	170e6 <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1710a:	2200      	movs	r2, #0
   1710c:	2300      	movs	r3, #0
   1710e:	a901      	add	r1, sp, #4
   17110:	481c      	ldr	r0, [pc, #112]	; (17184 <att_chan_new+0xdc>)
   17112:	f004 fb1f 	bl	1b754 <k_mem_slab_alloc>
   17116:	b9e8      	cbnz	r0, 17154 <att_chan_new+0xac>
__ssp_bos_icheck3(memset, void *, int)
   17118:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1711c:	2100      	movs	r1, #0
   1711e:	9801      	ldr	r0, [sp, #4]
   17120:	f00d fc12 	bl	24948 <memset>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
	chan->chan.chan.ops = &ops;
   17124:	9801      	ldr	r0, [sp, #4]
   17126:	4b18      	ldr	r3, [pc, #96]	; (17188 <att_chan_new+0xe0>)
   17128:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   1712a:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   1712c:	f00c ff0c 	bl	23f48 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   17130:	9b01      	ldr	r3, [sp, #4]
   17132:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17134:	f3bf 8f5b 	dmb	ish
   17138:	e853 2f00 	ldrex	r2, [r3]
   1713c:	e843 6100 	strex	r1, r6, [r3]
   17140:	2900      	cmp	r1, #0
   17142:	d1f9      	bne.n	17138 <att_chan_new+0x90>
   17144:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   17148:	9b01      	ldr	r3, [sp, #4]
   1714a:	601d      	str	r5, [r3, #0]

	return chan;
   1714c:	9c01      	ldr	r4, [sp, #4]
}
   1714e:	4620      	mov	r0, r4
   17150:	b002      	add	sp, #8
   17152:	bd70      	pop	{r4, r5, r6, pc}
   17154:	4b08      	ldr	r3, [pc, #32]	; (17178 <att_chan_new+0xd0>)
   17156:	4a09      	ldr	r2, [pc, #36]	; (1717c <att_chan_new+0xd4>)
   17158:	1a9b      	subs	r3, r3, r2
   1715a:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1715c:	f04f 0200 	mov.w	r2, #0
   17160:	2101      	movs	r1, #1
   17162:	f361 0202 	bfi	r2, r1, #0, #3
   17166:	f36f 02c5 	bfc	r2, #3, #3
   1716a:	f363 128f 	bfi	r2, r3, #6, #10
   1716e:	6829      	ldr	r1, [r5, #0]
   17170:	4806      	ldr	r0, [pc, #24]	; (1718c <att_chan_new+0xe4>)
   17172:	f7fa f837 	bl	111e4 <log_1>
		return NULL;
   17176:	e7ea      	b.n	1714e <att_chan_new+0xa6>
   17178:	00024cd0 	.word	0x00024cd0
   1717c:	00024ca0 	.word	0x00024ca0
   17180:	00026490 	.word	0x00026490
   17184:	200006a0 	.word	0x200006a0
   17188:	20000488 	.word	0x20000488
   1718c:	000264b8 	.word	0x000264b8

00017190 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   17190:	b570      	push	{r4, r5, r6, lr}
   17192:	b082      	sub	sp, #8
   17194:	4606      	mov	r6, r0
   17196:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   17198:	2200      	movs	r2, #0
   1719a:	2300      	movs	r3, #0
   1719c:	a901      	add	r1, sp, #4
   1719e:	4819      	ldr	r0, [pc, #100]	; (17204 <bt_att_accept+0x74>)
   171a0:	f004 fad8 	bl	1b754 <k_mem_slab_alloc>
   171a4:	b9b0      	cbnz	r0, 171d4 <bt_att_accept+0x44>
   171a6:	4605      	mov	r5, r0
   171a8:	222c      	movs	r2, #44	; 0x2c
   171aa:	2100      	movs	r1, #0
   171ac:	9801      	ldr	r0, [sp, #4]
   171ae:	f00d fbcb 	bl	24948 <memset>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
	att->conn = conn;
   171b2:	9b01      	ldr	r3, [sp, #4]
   171b4:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   171b6:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   171b8:	2100      	movs	r1, #0
   171ba:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   171bc:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   171be:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   171c0:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   171c2:	f7ff ff71 	bl	170a8 <att_chan_new>
	if (!chan) {
   171c6:	4603      	mov	r3, r0
   171c8:	b1c0      	cbz	r0, 171fc <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   171ca:	3308      	adds	r3, #8
   171cc:	6023      	str	r3, [r4, #0]

	return 0;
}
   171ce:	4628      	mov	r0, r5
   171d0:	b002      	add	sp, #8
   171d2:	bd70      	pop	{r4, r5, r6, pc}
   171d4:	4b0c      	ldr	r3, [pc, #48]	; (17208 <bt_att_accept+0x78>)
   171d6:	4a0d      	ldr	r2, [pc, #52]	; (1720c <bt_att_accept+0x7c>)
   171d8:	1a9b      	subs	r3, r3, r2
   171da:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   171dc:	f04f 0200 	mov.w	r2, #0
   171e0:	2101      	movs	r1, #1
   171e2:	f361 0202 	bfi	r2, r1, #0, #3
   171e6:	f36f 02c5 	bfc	r2, #3, #3
   171ea:	f363 128f 	bfi	r2, r3, #6, #10
   171ee:	4631      	mov	r1, r6
   171f0:	4807      	ldr	r0, [pc, #28]	; (17210 <bt_att_accept+0x80>)
   171f2:	f7f9 fff7 	bl	111e4 <log_1>
		return -ENOMEM;
   171f6:	f06f 050b 	mvn.w	r5, #11
   171fa:	e7e8      	b.n	171ce <bt_att_accept+0x3e>
		return -ENOMEM;
   171fc:	f06f 050b 	mvn.w	r5, #11
   17200:	e7e5      	b.n	171ce <bt_att_accept+0x3e>
   17202:	bf00      	nop
   17204:	20000684 	.word	0x20000684
   17208:	00024cd0 	.word	0x00024cd0
   1720c:	00024ca0 	.word	0x00024ca0
   17210:	000264e0 	.word	0x000264e0

00017214 <bt_att_released>:
{
   17214:	b500      	push	{lr}
   17216:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17218:	3808      	subs	r0, #8
   1721a:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1721c:	a901      	add	r1, sp, #4
   1721e:	4803      	ldr	r0, [pc, #12]	; (1722c <bt_att_released+0x18>)
   17220:	f00c fd76 	bl	23d10 <k_mem_slab_free>
}
   17224:	b003      	add	sp, #12
   17226:	f85d fb04 	ldr.w	pc, [sp], #4
   1722a:	bf00      	nop
   1722c:	200006a0 	.word	0x200006a0

00017230 <chan_send>:
{
   17230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17234:	b083      	sub	sp, #12
   17236:	4604      	mov	r4, r0
   17238:	460d      	mov	r5, r1
   1723a:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   1723c:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1723e:	781b      	ldrb	r3, [r3, #0]
   17240:	2bd2      	cmp	r3, #210	; 0xd2
   17242:	d021      	beq.n	17288 <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   17244:	f105 0008 	add.w	r0, r5, #8
   17248:	f00b fd45 	bl	22cd6 <net_buf_simple_headroom>
   1724c:	b287      	uxth	r7, r0
	state->len = buf->len;
   1724e:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   17252:	b3a6      	cbz	r6, 172be <chan_send+0x8e>
   17254:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17258:	f854 8b08 	ldr.w	r8, [r4], #8
   1725c:	4630      	mov	r0, r6
   1725e:	f7ff fe91 	bl	16f84 <att_cb>
   17262:	4603      	mov	r3, r0
   17264:	f8d8 0000 	ldr.w	r0, [r8]
   17268:	9400      	str	r4, [sp, #0]
   1726a:	462a      	mov	r2, r5
   1726c:	2104      	movs	r1, #4
   1726e:	f00a f9f3 	bl	21658 <bt_l2cap_send_cb>
	if (err) {
   17272:	4680      	mov	r8, r0
   17274:	b120      	cbz	r0, 17280 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   17276:	6928      	ldr	r0, [r5, #16]
   17278:	4438      	add	r0, r7
   1727a:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   1727c:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   17280:	4640      	mov	r0, r8
   17282:	b003      	add	sp, #12
   17284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   17288:	6803      	ldr	r3, [r0, #0]
   1728a:	6818      	ldr	r0, [r3, #0]
   1728c:	f00b fb8f 	bl	229ae <bt_smp_sign>
		if (err) {
   17290:	4680      	mov	r8, r0
   17292:	2800      	cmp	r0, #0
   17294:	d0d6      	beq.n	17244 <chan_send+0x14>
   17296:	4b0c      	ldr	r3, [pc, #48]	; (172c8 <chan_send+0x98>)
   17298:	4a0c      	ldr	r2, [pc, #48]	; (172cc <chan_send+0x9c>)
   1729a:	1a9b      	subs	r3, r3, r2
   1729c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   1729e:	f04f 0100 	mov.w	r1, #0
   172a2:	2201      	movs	r2, #1
   172a4:	f362 0102 	bfi	r1, r2, #0, #3
   172a8:	f36f 01c5 	bfc	r1, #3, #3
   172ac:	f363 118f 	bfi	r1, r3, #6, #10
   172b0:	4807      	ldr	r0, [pc, #28]	; (172d0 <chan_send+0xa0>)
   172b2:	f7fa f84d 	bl	11350 <log_0>
			net_buf_unref(buf);
   172b6:	4628      	mov	r0, r5
   172b8:	f00b fc8a 	bl	22bd0 <net_buf_unref>
			return err;
   172bc:	e7e0      	b.n	17280 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   172be:	4628      	mov	r0, r5
   172c0:	f7ff fe80 	bl	16fc4 <chan_cb>
   172c4:	4606      	mov	r6, r0
   172c6:	e7c5      	b.n	17254 <chan_send+0x24>
   172c8:	00024cd0 	.word	0x00024cd0
   172cc:	00024ca0 	.word	0x00024ca0
   172d0:	00026508 	.word	0x00026508

000172d4 <read_group_cb>:
{
   172d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   172d6:	b085      	sub	sp, #20
   172d8:	4605      	mov	r5, r0
   172da:	460e      	mov	r6, r1
   172dc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   172de:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   172e0:	2300      	movs	r3, #0
   172e2:	f88d 3008 	strb.w	r3, [sp, #8]
   172e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   172ea:	f8ad 300a 	strh.w	r3, [sp, #10]
   172ee:	a902      	add	r1, sp, #8
   172f0:	6800      	ldr	r0, [r0, #0]
   172f2:	f009 fda3 	bl	20e3c <bt_uuid_cmp>
   172f6:	b158      	cbz	r0, 17310 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   172f8:	2300      	movs	r3, #0
   172fa:	f88d 300c 	strb.w	r3, [sp, #12]
   172fe:	f642 0301 	movw	r3, #10241	; 0x2801
   17302:	f8ad 300e 	strh.w	r3, [sp, #14]
   17306:	a903      	add	r1, sp, #12
   17308:	6828      	ldr	r0, [r5, #0]
   1730a:	f009 fd97 	bl	20e3c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1730e:	bb30      	cbnz	r0, 1735e <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   17310:	6861      	ldr	r1, [r4, #4]
   17312:	6828      	ldr	r0, [r5, #0]
   17314:	f009 fd92 	bl	20e3c <bt_uuid_cmp>
   17318:	bb48      	cbnz	r0, 1736e <read_group_cb+0x9a>
	if (data->rsp->len &&
   1731a:	68e3      	ldr	r3, [r4, #12]
   1731c:	781a      	ldrb	r2, [r3, #0]
   1731e:	b132      	cbz	r2, 1732e <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   17320:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   17324:	68a1      	ldr	r1, [r4, #8]
   17326:	8989      	ldrh	r1, [r1, #12]
   17328:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1732a:	4293      	cmp	r3, r2
   1732c:	db24      	blt.n	17378 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1732e:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   17330:	2104      	movs	r1, #4
   17332:	3008      	adds	r0, #8
   17334:	f00b fc96 	bl	22c64 <net_buf_simple_add>
   17338:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1733a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1733c:	6923      	ldr	r3, [r4, #16]
   1733e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   17340:	9401      	str	r4, [sp, #4]
   17342:	4b10      	ldr	r3, [pc, #64]	; (17384 <read_group_cb+0xb0>)
   17344:	9300      	str	r3, [sp, #0]
   17346:	2300      	movs	r3, #0
   17348:	68a2      	ldr	r2, [r4, #8]
   1734a:	4629      	mov	r1, r5
   1734c:	4638      	mov	r0, r7
   1734e:	f00a fc87 	bl	21c60 <att_chan_read>
	if (read < 0) {
   17352:	2800      	cmp	r0, #0
   17354:	db12      	blt.n	1737c <read_group_cb+0xa8>
	if (!data->group) {
   17356:	6923      	ldr	r3, [r4, #16]
   17358:	b193      	cbz	r3, 17380 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   1735a:	2001      	movs	r0, #1
   1735c:	e00a      	b.n	17374 <read_group_cb+0xa0>
		if (data->group &&
   1735e:	6923      	ldr	r3, [r4, #16]
   17360:	b11b      	cbz	r3, 1736a <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   17362:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   17364:	42b2      	cmp	r2, r6
   17366:	d200      	bcs.n	1736a <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   17368:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1736a:	2001      	movs	r0, #1
   1736c:	e002      	b.n	17374 <read_group_cb+0xa0>
		data->group = NULL;
   1736e:	2300      	movs	r3, #0
   17370:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   17372:	2001      	movs	r0, #1
}
   17374:	b005      	add	sp, #20
   17376:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   17378:	2000      	movs	r0, #0
   1737a:	e7fb      	b.n	17374 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   1737c:	2000      	movs	r0, #0
   1737e:	e7f9      	b.n	17374 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   17380:	2000      	movs	r0, #0
   17382:	e7f7      	b.n	17374 <read_group_cb+0xa0>
   17384:	000217e9 	.word	0x000217e9

00017388 <read_type_cb>:
{
   17388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1738c:	b083      	sub	sp, #12
   1738e:	4606      	mov	r6, r0
   17390:	4688      	mov	r8, r1
   17392:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   17394:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   17396:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   17398:	6851      	ldr	r1, [r2, #4]
   1739a:	6800      	ldr	r0, [r0, #0]
   1739c:	f009 fd4e 	bl	20e3c <bt_uuid_cmp>
   173a0:	b120      	cbz	r0, 173ac <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   173a2:	2501      	movs	r5, #1
}
   173a4:	4628      	mov	r0, r5
   173a6:	b003      	add	sp, #12
   173a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   173ac:	2215      	movs	r2, #21
   173ae:	4631      	mov	r1, r6
   173b0:	4628      	mov	r0, r5
   173b2:	f00b fa5b 	bl	2286c <bt_gatt_check_perm>
   173b6:	4605      	mov	r5, r0
   173b8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   173ba:	b130      	cbz	r0, 173ca <read_type_cb+0x42>
		if (data->rsp->len) {
   173bc:	68e3      	ldr	r3, [r4, #12]
   173be:	781b      	ldrb	r3, [r3, #0]
   173c0:	b10b      	cbz	r3, 173c6 <read_type_cb+0x3e>
			data->err = 0x00;
   173c2:	2300      	movs	r3, #0
   173c4:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   173c6:	2500      	movs	r5, #0
   173c8:	e7ec      	b.n	173a4 <read_type_cb+0x1c>
	data->err = 0x00;
   173ca:	f04f 0900 	mov.w	r9, #0
   173ce:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   173d2:	68a0      	ldr	r0, [r4, #8]
   173d4:	f00b fc26 	bl	22c24 <net_buf_frag_last>
   173d8:	2102      	movs	r1, #2
   173da:	3008      	adds	r0, #8
   173dc:	f00b fc42 	bl	22c64 <net_buf_simple_add>
   173e0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   173e2:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   173e6:	9401      	str	r4, [sp, #4]
   173e8:	4b11      	ldr	r3, [pc, #68]	; (17430 <read_type_cb+0xa8>)
   173ea:	9300      	str	r3, [sp, #0]
   173ec:	464b      	mov	r3, r9
   173ee:	68a2      	ldr	r2, [r4, #8]
   173f0:	4631      	mov	r1, r6
   173f2:	4638      	mov	r0, r7
   173f4:	f00a fc34 	bl	21c60 <att_chan_read>
	if (read < 0) {
   173f8:	2800      	cmp	r0, #0
   173fa:	db07      	blt.n	1740c <read_type_cb+0x84>
	if (!data->item) {
   173fc:	6923      	ldr	r3, [r4, #16]
   173fe:	2b00      	cmp	r3, #0
   17400:	d0d0      	beq.n	173a4 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   17402:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   17406:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   17408:	2200      	movs	r2, #0

	while (buf) {
   1740a:	e006      	b.n	1741a <read_type_cb+0x92>
		data->err = err_to_att(read);
   1740c:	f00a f9d0 	bl	217b0 <err_to_att>
   17410:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   17412:	e7c7      	b.n	173a4 <read_type_cb+0x1c>
		bytes += buf->len;
   17414:	8999      	ldrh	r1, [r3, #12]
   17416:	440a      	add	r2, r1
		buf = buf->frags;
   17418:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1741a:	2b00      	cmp	r3, #0
   1741c:	d1fa      	bne.n	17414 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1741e:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17420:	68e3      	ldr	r3, [r4, #12]
   17422:	781d      	ldrb	r5, [r3, #0]
   17424:	42aa      	cmp	r2, r5
   17426:	bf94      	ite	ls
   17428:	2500      	movls	r5, #0
   1742a:	2501      	movhi	r5, #1
   1742c:	e7ba      	b.n	173a4 <read_type_cb+0x1c>
   1742e:	bf00      	nop
   17430:	000217c1 	.word	0x000217c1

00017434 <find_type_cb>:
{
   17434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17438:	b093      	sub	sp, #76	; 0x4c
   1743a:	4606      	mov	r6, r0
   1743c:	460f      	mov	r7, r1
   1743e:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   17440:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   17444:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17448:	2300      	movs	r3, #0
   1744a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1744e:	f642 0301 	movw	r3, #10241	; 0x2801
   17452:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   17456:	a910      	add	r1, sp, #64	; 0x40
   17458:	6800      	ldr	r0, [r0, #0]
   1745a:	f009 fcef 	bl	20e3c <bt_uuid_cmp>
   1745e:	b928      	cbnz	r0, 1746c <find_type_cb+0x38>
	data->group = NULL;
   17460:	2300      	movs	r3, #0
   17462:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   17464:	2001      	movs	r0, #1
}
   17466:	b013      	add	sp, #76	; 0x4c
   17468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1746c:	2300      	movs	r3, #0
   1746e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   17472:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17476:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1747a:	a911      	add	r1, sp, #68	; 0x44
   1747c:	6830      	ldr	r0, [r6, #0]
   1747e:	f009 fcdd 	bl	20e3c <bt_uuid_cmp>
   17482:	b928      	cbnz	r0, 17490 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17484:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   17488:	6868      	ldr	r0, [r5, #4]
   1748a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1748c:	2400      	movs	r4, #0
	while (buf) {
   1748e:	e00a      	b.n	174a6 <find_type_cb+0x72>
		if (data->group &&
   17490:	68ab      	ldr	r3, [r5, #8]
   17492:	b11b      	cbz	r3, 1749c <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   17494:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   17496:	42ba      	cmp	r2, r7
   17498:	d200      	bcs.n	1749c <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1749a:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1749c:	2001      	movs	r0, #1
   1749e:	e7e2      	b.n	17466 <find_type_cb+0x32>
		bytes += buf->len;
   174a0:	899a      	ldrh	r2, [r3, #12]
   174a2:	4414      	add	r4, r2
		buf = buf->frags;
   174a4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   174a6:	2b00      	cmp	r3, #0
   174a8:	d1fa      	bne.n	174a0 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   174aa:	1b0c      	subs	r4, r1, r4
   174ac:	2c03      	cmp	r4, #3
   174ae:	d801      	bhi.n	174b4 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   174b0:	2000      	movs	r0, #0
   174b2:	e7d8      	b.n	17466 <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   174b4:	f00b fbb6 	bl	22c24 <net_buf_frag_last>
   174b8:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   174ba:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   174be:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   174c0:	2200      	movs	r2, #0
	while (buf) {
   174c2:	b11b      	cbz	r3, 174cc <find_type_cb+0x98>
		bytes += buf->len;
   174c4:	8999      	ldrh	r1, [r3, #12]
   174c6:	440a      	add	r2, r1
		buf = buf->frags;
   174c8:	681b      	ldr	r3, [r3, #0]
   174ca:	e7fa      	b.n	174c2 <find_type_cb+0x8e>
   174cc:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   174d0:	f104 0b08 	add.w	fp, r4, #8
   174d4:	4658      	mov	r0, fp
   174d6:	f00b fc02 	bl	22cde <net_buf_simple_tailroom>
   174da:	4582      	cmp	sl, r0
   174dc:	d22b      	bcs.n	17536 <find_type_cb+0x102>
   174de:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   174e2:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   174e4:	2200      	movs	r2, #0
	while (buf) {
   174e6:	e002      	b.n	174ee <find_type_cb+0xba>
		bytes += buf->len;
   174e8:	8999      	ldrh	r1, [r3, #12]
   174ea:	440a      	add	r2, r1
		buf = buf->frags;
   174ec:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   174ee:	2b00      	cmp	r3, #0
   174f0:	d1fa      	bne.n	174e8 <find_type_cb+0xb4>
   174f2:	1a80      	subs	r0, r0, r2
	if (!len) {
   174f4:	b318      	cbz	r0, 1753e <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   174f6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   174fa:	2300      	movs	r3, #0
   174fc:	9300      	str	r3, [sp, #0]
   174fe:	2310      	movs	r3, #16
   17500:	aa0c      	add	r2, sp, #48	; 0x30
   17502:	4631      	mov	r1, r6
   17504:	4648      	mov	r0, r9
   17506:	47c0      	blx	r8
	if (read < 0) {
   17508:	1e06      	subs	r6, r0, #0
   1750a:	dba9      	blt.n	17460 <find_type_cb+0x2c>
	if (read != data->value_len) {
   1750c:	7c2a      	ldrb	r2, [r5, #16]
   1750e:	42b2      	cmp	r2, r6
   17510:	d049      	beq.n	175a6 <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   17512:	68e9      	ldr	r1, [r5, #12]
   17514:	a807      	add	r0, sp, #28
   17516:	f009 fcaf 	bl	20e78 <bt_uuid_create>
   1751a:	b300      	cbz	r0, 1755e <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1751c:	b2f2      	uxtb	r2, r6
   1751e:	a90c      	add	r1, sp, #48	; 0x30
   17520:	a802      	add	r0, sp, #8
   17522:	f009 fca9 	bl	20e78 <bt_uuid_create>
   17526:	b360      	cbz	r0, 17582 <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   17528:	a902      	add	r1, sp, #8
   1752a:	a807      	add	r0, sp, #28
   1752c:	f009 fc86 	bl	20e3c <bt_uuid_cmp>
   17530:	2800      	cmp	r0, #0
   17532:	d040      	beq.n	175b6 <find_type_cb+0x182>
   17534:	e794      	b.n	17460 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   17536:	4658      	mov	r0, fp
   17538:	f00b fbd1 	bl	22cde <net_buf_simple_tailroom>
   1753c:	e7da      	b.n	174f4 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1753e:	686b      	ldr	r3, [r5, #4]
   17540:	7998      	ldrb	r0, [r3, #6]
   17542:	f001 fc37 	bl	18db4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   17546:	2200      	movs	r2, #0
   17548:	2300      	movs	r3, #0
   1754a:	f00b fb0e 	bl	22b6a <net_buf_alloc_fixed>
		if (!frag) {
   1754e:	4604      	mov	r4, r0
   17550:	2800      	cmp	r0, #0
   17552:	d088      	beq.n	17466 <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   17554:	4601      	mov	r1, r0
   17556:	6868      	ldr	r0, [r5, #4]
   17558:	f00b fb75 	bl	22c46 <net_buf_frag_add>
   1755c:	e7cb      	b.n	174f6 <find_type_cb+0xc2>
   1755e:	4b1c      	ldr	r3, [pc, #112]	; (175d0 <find_type_cb+0x19c>)
   17560:	4a1c      	ldr	r2, [pc, #112]	; (175d4 <find_type_cb+0x1a0>)
   17562:	1a9b      	subs	r3, r3, r2
   17564:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   17566:	f04f 0200 	mov.w	r2, #0
   1756a:	2102      	movs	r1, #2
   1756c:	f361 0202 	bfi	r2, r1, #0, #3
   17570:	f36f 02c5 	bfc	r2, #3, #3
   17574:	f363 128f 	bfi	r2, r3, #6, #10
   17578:	7c29      	ldrb	r1, [r5, #16]
   1757a:	4817      	ldr	r0, [pc, #92]	; (175d8 <find_type_cb+0x1a4>)
   1757c:	f7f9 fe32 	bl	111e4 <log_1>
			goto skip;
   17580:	e76e      	b.n	17460 <find_type_cb+0x2c>
   17582:	4b13      	ldr	r3, [pc, #76]	; (175d0 <find_type_cb+0x19c>)
   17584:	4a13      	ldr	r2, [pc, #76]	; (175d4 <find_type_cb+0x1a0>)
   17586:	1a9b      	subs	r3, r3, r2
   17588:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   1758a:	f04f 0200 	mov.w	r2, #0
   1758e:	2102      	movs	r1, #2
   17590:	f361 0202 	bfi	r2, r1, #0, #3
   17594:	f36f 02c5 	bfc	r2, #3, #3
   17598:	f363 128f 	bfi	r2, r3, #6, #10
   1759c:	4631      	mov	r1, r6
   1759e:	480f      	ldr	r0, [pc, #60]	; (175dc <find_type_cb+0x1a8>)
   175a0:	f7f9 fe20 	bl	111e4 <log_1>
			goto skip;
   175a4:	e75c      	b.n	17460 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   175a6:	4632      	mov	r2, r6
   175a8:	a90c      	add	r1, sp, #48	; 0x30
   175aa:	68e8      	ldr	r0, [r5, #12]
   175ac:	f00d f996 	bl	248dc <memcmp>
   175b0:	2800      	cmp	r0, #0
   175b2:	f47f af55 	bne.w	17460 <find_type_cb+0x2c>
	data->err = 0x00;
   175b6:	2300      	movs	r3, #0
   175b8:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   175ba:	2104      	movs	r1, #4
   175bc:	f104 0008 	add.w	r0, r4, #8
   175c0:	f00b fb50 	bl	22c64 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   175c4:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   175c6:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   175c8:	68ab      	ldr	r3, [r5, #8]
   175ca:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   175cc:	2001      	movs	r0, #1
   175ce:	e74a      	b.n	17466 <find_type_cb+0x32>
   175d0:	00024cd0 	.word	0x00024cd0
   175d4:	00024ca0 	.word	0x00024ca0
   175d8:	0002651c 	.word	0x0002651c
   175dc:	0002653c 	.word	0x0002653c

000175e0 <bt_att_connected>:
{
   175e0:	b538      	push	{r3, r4, r5, lr}
   175e2:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   175e4:	4605      	mov	r5, r0
   175e6:	f855 0908 	ldr.w	r0, [r5], #-8
   175ea:	f00a fcb2 	bl	21f52 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   175ee:	4629      	mov	r1, r5
   175f0:	6800      	ldr	r0, [r0, #0]
   175f2:	f00a f991 	bl	21918 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   175f6:	f3bf 8f5b 	dmb	ish
   175fa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   175fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   17602:	f013 0f08 	tst.w	r3, #8
   17606:	d104      	bne.n	17612 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   17608:	2317      	movs	r3, #23
   1760a:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1760e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   17612:	4628      	mov	r0, r5
   17614:	f00a fc57 	bl	21ec6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   17618:	4902      	ldr	r1, [pc, #8]	; (17624 <bt_att_connected+0x44>)
   1761a:	f504 7084 	add.w	r0, r4, #264	; 0x108
   1761e:	f00c fd9b 	bl	24158 <k_work_init_delayable>
}
   17622:	bd38      	pop	{r3, r4, r5, pc}
   17624:	00017f4d 	.word	0x00017f4d

00017628 <bt_att_chan_create_pdu>:
{
   17628:	b538      	push	{r3, r4, r5, lr}
   1762a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1762c:	3201      	adds	r2, #1
   1762e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   17632:	428a      	cmp	r2, r1
   17634:	d810      	bhi.n	17658 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   17636:	4628      	mov	r0, r5
   17638:	f00a f8ed 	bl	21816 <att_op_get_type>
   1763c:	2802      	cmp	r0, #2
   1763e:	d01d      	beq.n	1767c <bt_att_chan_create_pdu+0x54>
   17640:	2804      	cmp	r0, #4
   17642:	d01b      	beq.n	1767c <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   17644:	f04f 32ff 	mov.w	r2, #4294967295
   17648:	f04f 33ff 	mov.w	r3, #4294967295
   1764c:	2100      	movs	r1, #0
   1764e:	4608      	mov	r0, r1
   17650:	f009 fffd 	bl	2164e <bt_l2cap_create_pdu_timeout>
   17654:	4604      	mov	r4, r0
   17656:	e019      	b.n	1768c <bt_att_chan_create_pdu+0x64>
   17658:	481a      	ldr	r0, [pc, #104]	; (176c4 <bt_att_chan_create_pdu+0x9c>)
   1765a:	4b1b      	ldr	r3, [pc, #108]	; (176c8 <bt_att_chan_create_pdu+0xa0>)
   1765c:	1ac0      	subs	r0, r0, r3
   1765e:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   17660:	f04f 0300 	mov.w	r3, #0
   17664:	2402      	movs	r4, #2
   17666:	f364 0302 	bfi	r3, r4, #0, #3
   1766a:	f36f 03c5 	bfc	r3, #3, #3
   1766e:	f360 138f 	bfi	r3, r0, #6, #10
   17672:	4816      	ldr	r0, [pc, #88]	; (176cc <bt_att_chan_create_pdu+0xa4>)
   17674:	f7f9 fdec 	bl	11250 <log_2>
		return NULL;
   17678:	2400      	movs	r4, #0
   1767a:	e00e      	b.n	1769a <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1767c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   17680:	2300      	movs	r3, #0
   17682:	2100      	movs	r1, #0
   17684:	4608      	mov	r0, r1
   17686:	f009 ffe2 	bl	2164e <bt_l2cap_create_pdu_timeout>
   1768a:	4604      	mov	r4, r0
	if (!buf) {
   1768c:	b13c      	cbz	r4, 1769e <bt_att_chan_create_pdu+0x76>
   1768e:	2101      	movs	r1, #1
   17690:	f104 0008 	add.w	r0, r4, #8
   17694:	f00b fae6 	bl	22c64 <net_buf_simple_add>
	hdr->code = op;
   17698:	7005      	strb	r5, [r0, #0]
}
   1769a:	4620      	mov	r0, r4
   1769c:	bd38      	pop	{r3, r4, r5, pc}
   1769e:	4b09      	ldr	r3, [pc, #36]	; (176c4 <bt_att_chan_create_pdu+0x9c>)
   176a0:	4a09      	ldr	r2, [pc, #36]	; (176c8 <bt_att_chan_create_pdu+0xa0>)
   176a2:	1a9b      	subs	r3, r3, r2
   176a4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   176a6:	f04f 0200 	mov.w	r2, #0
   176aa:	2101      	movs	r1, #1
   176ac:	f361 0202 	bfi	r2, r1, #0, #3
   176b0:	f36f 02c5 	bfc	r2, #3, #3
   176b4:	f363 128f 	bfi	r2, r3, #6, #10
   176b8:	4629      	mov	r1, r5
   176ba:	4805      	ldr	r0, [pc, #20]	; (176d0 <bt_att_chan_create_pdu+0xa8>)
   176bc:	f7f9 fd92 	bl	111e4 <log_1>
		return NULL;
   176c0:	e7eb      	b.n	1769a <bt_att_chan_create_pdu+0x72>
   176c2:	bf00      	nop
   176c4:	00024cd0 	.word	0x00024cd0
   176c8:	00024ca0 	.word	0x00024ca0
   176cc:	0002655c 	.word	0x0002655c
   176d0:	000262f0 	.word	0x000262f0

000176d4 <send_err_rsp>:
	if (!req) {
   176d4:	b901      	cbnz	r1, 176d8 <send_err_rsp+0x4>
   176d6:	4770      	bx	lr
{
   176d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176dc:	4606      	mov	r6, r0
   176de:	4615      	mov	r5, r2
   176e0:	461c      	mov	r4, r3
   176e2:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   176e4:	2204      	movs	r2, #4
   176e6:	2101      	movs	r1, #1
   176e8:	f7ff ff9e 	bl	17628 <bt_att_chan_create_pdu>
	if (!buf) {
   176ec:	4680      	mov	r8, r0
   176ee:	b160      	cbz	r0, 1770a <send_err_rsp+0x36>
   176f0:	2104      	movs	r1, #4
   176f2:	3008      	adds	r0, #8
   176f4:	f00b fab6 	bl	22c64 <net_buf_simple_add>
	rsp->request = req;
   176f8:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   176fa:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   176fe:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   17700:	4a03      	ldr	r2, [pc, #12]	; (17710 <send_err_rsp+0x3c>)
   17702:	4641      	mov	r1, r8
   17704:	4630      	mov	r0, r6
   17706:	f00a fa9e 	bl	21c46 <bt_att_chan_send_rsp>
}
   1770a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1770e:	bf00      	nop
   17710:	00021a9b 	.word	0x00021a9b

00017714 <bt_att_recv>:
{
   17714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   17718:	898b      	ldrh	r3, [r1, #12]
   1771a:	b1bb      	cbz	r3, 1774c <bt_att_recv+0x38>
   1771c:	4607      	mov	r7, r0
   1771e:	460e      	mov	r6, r1
   17720:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   17724:	2101      	movs	r1, #1
   17726:	f106 0008 	add.w	r0, r6, #8
   1772a:	f00b fabc 	bl	22ca6 <net_buf_simple_pull_mem>
   1772e:	4605      	mov	r5, r0
	if (!att_chan->att) {
   17730:	f857 3c08 	ldr.w	r3, [r7, #-8]
   17734:	b1d3      	cbz	r3, 1776c <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17736:	2300      	movs	r3, #0
   17738:	2b0c      	cmp	r3, #12
   1773a:	d81e      	bhi.n	1777a <bt_att_recv+0x66>
		if (hdr->code == handlers[i].op) {
   1773c:	782c      	ldrb	r4, [r5, #0]
   1773e:	4a58      	ldr	r2, [pc, #352]	; (178a0 <bt_att_recv+0x18c>)
   17740:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   17744:	4294      	cmp	r4, r2
   17746:	d014      	beq.n	17772 <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17748:	3301      	adds	r3, #1
   1774a:	e7f5      	b.n	17738 <bt_att_recv+0x24>
   1774c:	4b55      	ldr	r3, [pc, #340]	; (178a4 <bt_att_recv+0x190>)
   1774e:	4a56      	ldr	r2, [pc, #344]	; (178a8 <bt_att_recv+0x194>)
   17750:	1a9b      	subs	r3, r3, r2
   17752:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   17754:	f04f 0100 	mov.w	r1, #0
   17758:	2201      	movs	r2, #1
   1775a:	f362 0102 	bfi	r1, r2, #0, #3
   1775e:	f36f 01c5 	bfc	r1, #3, #3
   17762:	f363 118f 	bfi	r1, r3, #6, #10
   17766:	4851      	ldr	r0, [pc, #324]	; (178ac <bt_att_recv+0x198>)
   17768:	f7f9 fdf2 	bl	11350 <log_0>
}
   1776c:	2000      	movs	r0, #0
   1776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   17772:	4c4b      	ldr	r4, [pc, #300]	; (178a0 <bt_att_recv+0x18c>)
   17774:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   17778:	e000      	b.n	1777c <bt_att_recv+0x68>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1777a:	2400      	movs	r4, #0
	if (!handler) {
   1777c:	b1cc      	cbz	r4, 177b2 <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   1777e:	78a3      	ldrb	r3, [r4, #2]
   17780:	2b01      	cmp	r3, #1
   17782:	d036      	beq.n	177f2 <bt_att_recv+0xde>
		} else if (handler->type == ATT_INDICATION &&
   17784:	78a3      	ldrb	r3, [r4, #2]
   17786:	2b05      	cmp	r3, #5
   17788:	d055      	beq.n	17836 <bt_att_recv+0x122>
	if (buf->len < handler->expect_len) {
   1778a:	89b1      	ldrh	r1, [r6, #12]
   1778c:	7863      	ldrb	r3, [r4, #1]
   1778e:	4299      	cmp	r1, r3
   17790:	d372      	bcc.n	17878 <bt_att_recv+0x164>
		err = handler->func(att_chan, buf);
   17792:	6863      	ldr	r3, [r4, #4]
   17794:	4631      	mov	r1, r6
   17796:	4640      	mov	r0, r8
   17798:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1779a:	78a3      	ldrb	r3, [r4, #2]
   1779c:	2b01      	cmp	r3, #1
   1779e:	d1e5      	bne.n	1776c <bt_att_recv+0x58>
   177a0:	2800      	cmp	r0, #0
   177a2:	d0e3      	beq.n	1776c <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   177a4:	4603      	mov	r3, r0
   177a6:	2200      	movs	r2, #0
   177a8:	7829      	ldrb	r1, [r5, #0]
   177aa:	4640      	mov	r0, r8
   177ac:	f7ff ff92 	bl	176d4 <send_err_rsp>
   177b0:	e7dc      	b.n	1776c <bt_att_recv+0x58>
   177b2:	4b3c      	ldr	r3, [pc, #240]	; (178a4 <bt_att_recv+0x190>)
   177b4:	4a3c      	ldr	r2, [pc, #240]	; (178a8 <bt_att_recv+0x194>)
   177b6:	1a9b      	subs	r3, r3, r2
   177b8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   177ba:	f04f 0200 	mov.w	r2, #0
   177be:	2102      	movs	r1, #2
   177c0:	f361 0202 	bfi	r2, r1, #0, #3
   177c4:	f36f 02c5 	bfc	r2, #3, #3
   177c8:	f363 128f 	bfi	r2, r3, #6, #10
   177cc:	7829      	ldrb	r1, [r5, #0]
   177ce:	4838      	ldr	r0, [pc, #224]	; (178b0 <bt_att_recv+0x19c>)
   177d0:	f7f9 fd08 	bl	111e4 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   177d4:	782c      	ldrb	r4, [r5, #0]
   177d6:	4620      	mov	r0, r4
   177d8:	f00a f81d 	bl	21816 <att_op_get_type>
   177dc:	2800      	cmp	r0, #0
   177de:	d0c5      	beq.n	1776c <bt_att_recv+0x58>
   177e0:	2805      	cmp	r0, #5
   177e2:	d0c3      	beq.n	1776c <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   177e4:	2306      	movs	r3, #6
   177e6:	2200      	movs	r2, #0
   177e8:	4621      	mov	r1, r4
   177ea:	4640      	mov	r0, r8
   177ec:	f7ff ff72 	bl	176d4 <send_err_rsp>
		return 0;
   177f0:	e7bc      	b.n	1776c <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   177f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   177f6:	f3bf 8f5b 	dmb	ish
   177fa:	e853 2f00 	ldrex	r2, [r3]
   177fe:	f042 0101 	orr.w	r1, r2, #1
   17802:	e843 1000 	strex	r0, r1, [r3]
   17806:	2800      	cmp	r0, #0
   17808:	d1f7      	bne.n	177fa <bt_att_recv+0xe6>
   1780a:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1780e:	f012 0f01 	tst.w	r2, #1
   17812:	d0b7      	beq.n	17784 <bt_att_recv+0x70>
   17814:	4b23      	ldr	r3, [pc, #140]	; (178a4 <bt_att_recv+0x190>)
   17816:	4a24      	ldr	r2, [pc, #144]	; (178a8 <bt_att_recv+0x194>)
   17818:	1a9b      	subs	r3, r3, r2
   1781a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   1781c:	f04f 0100 	mov.w	r1, #0
   17820:	2202      	movs	r2, #2
   17822:	f362 0102 	bfi	r1, r2, #0, #3
   17826:	f36f 01c5 	bfc	r1, #3, #3
   1782a:	f363 118f 	bfi	r1, r3, #6, #10
   1782e:	4821      	ldr	r0, [pc, #132]	; (178b4 <bt_att_recv+0x1a0>)
   17830:	f7f9 fd8e 	bl	11350 <log_0>
			return 0;
   17834:	e79a      	b.n	1776c <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   17836:	37e8      	adds	r7, #232	; 0xe8
   17838:	f3bf 8f5b 	dmb	ish
   1783c:	e857 3f00 	ldrex	r3, [r7]
   17840:	f043 0202 	orr.w	r2, r3, #2
   17844:	e847 2100 	strex	r1, r2, [r7]
   17848:	2900      	cmp	r1, #0
   1784a:	d1f7      	bne.n	1783c <bt_att_recv+0x128>
   1784c:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   17850:	f013 0f02 	tst.w	r3, #2
   17854:	d099      	beq.n	1778a <bt_att_recv+0x76>
   17856:	4b13      	ldr	r3, [pc, #76]	; (178a4 <bt_att_recv+0x190>)
   17858:	4a13      	ldr	r2, [pc, #76]	; (178a8 <bt_att_recv+0x194>)
   1785a:	1a9b      	subs	r3, r3, r2
   1785c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   1785e:	f04f 0100 	mov.w	r1, #0
   17862:	2202      	movs	r2, #2
   17864:	f362 0102 	bfi	r1, r2, #0, #3
   17868:	f36f 01c5 	bfc	r1, #3, #3
   1786c:	f363 118f 	bfi	r1, r3, #6, #10
   17870:	4811      	ldr	r0, [pc, #68]	; (178b8 <bt_att_recv+0x1a4>)
   17872:	f7f9 fd6d 	bl	11350 <log_0>
			return 0;
   17876:	e779      	b.n	1776c <bt_att_recv+0x58>
   17878:	4a0a      	ldr	r2, [pc, #40]	; (178a4 <bt_att_recv+0x190>)
   1787a:	4b0b      	ldr	r3, [pc, #44]	; (178a8 <bt_att_recv+0x194>)
   1787c:	1ad2      	subs	r2, r2, r3
   1787e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   17880:	f04f 0300 	mov.w	r3, #0
   17884:	2001      	movs	r0, #1
   17886:	f360 0302 	bfi	r3, r0, #0, #3
   1788a:	f36f 03c5 	bfc	r3, #3, #3
   1788e:	f362 138f 	bfi	r3, r2, #6, #10
   17892:	782a      	ldrb	r2, [r5, #0]
   17894:	4809      	ldr	r0, [pc, #36]	; (178bc <bt_att_recv+0x1a8>)
   17896:	f7f9 fcdb 	bl	11250 <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   1789a:	2004      	movs	r0, #4
   1789c:	e77d      	b.n	1779a <bt_att_recv+0x86>
   1789e:	bf00      	nop
   178a0:	00026660 	.word	0x00026660
   178a4:	00024cd0 	.word	0x00024cd0
   178a8:	00024ca0 	.word	0x00024ca0
   178ac:	00026584 	.word	0x00026584
   178b0:	000265a0 	.word	0x000265a0
   178b4:	000265bc 	.word	0x000265bc
   178b8:	000265d8 	.word	0x000265d8
   178bc:	000265f8 	.word	0x000265f8

000178c0 <att_write_rsp>:
{
   178c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178c4:	b08a      	sub	sp, #40	; 0x28
   178c6:	4604      	mov	r4, r0
   178c8:	4616      	mov	r6, r2
   178ca:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   178cc:	6803      	ldr	r3, [r0, #0]
   178ce:	4688      	mov	r8, r1
   178d0:	3900      	subs	r1, #0
   178d2:	bf18      	it	ne
   178d4:	2101      	movne	r1, #1
   178d6:	6818      	ldr	r0, [r3, #0]
   178d8:	f00a fff4 	bl	228c4 <bt_gatt_change_aware>
   178dc:	2800      	cmp	r0, #0
   178de:	d051      	beq.n	17984 <att_write_rsp+0xc4>
	if (!handle) {
   178e0:	b925      	cbnz	r5, 178ec <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   178e2:	2701      	movs	r7, #1
}
   178e4:	4638      	mov	r0, r7
   178e6:	b00a      	add	sp, #40	; 0x28
   178e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   178ec:	2300      	movs	r3, #0
   178ee:	9304      	str	r3, [sp, #16]
   178f0:	9305      	str	r3, [sp, #20]
   178f2:	9306      	str	r3, [sp, #24]
   178f4:	9307      	str	r3, [sp, #28]
   178f6:	9308      	str	r3, [sp, #32]
   178f8:	9309      	str	r3, [sp, #36]	; 0x24
	if (rsp) {
   178fa:	b13e      	cbz	r6, 1790c <att_write_rsp+0x4c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   178fc:	461a      	mov	r2, r3
   178fe:	4631      	mov	r1, r6
   17900:	4620      	mov	r0, r4
   17902:	f7ff fe91 	bl	17628 <bt_att_chan_create_pdu>
   17906:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   17908:	2800      	cmp	r0, #0
   1790a:	d03d      	beq.n	17988 <att_write_rsp+0xc8>
	data.conn = chan->att->conn;
   1790c:	6823      	ldr	r3, [r4, #0]
   1790e:	681b      	ldr	r3, [r3, #0]
   17910:	9304      	str	r3, [sp, #16]
	data.req = req;
   17912:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   17916:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1791a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1791e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17920:	9307      	str	r3, [sp, #28]
	data.len = len;
   17922:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   17926:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1792a:	2301      	movs	r3, #1
   1792c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   17930:	ab04      	add	r3, sp, #16
   17932:	9302      	str	r3, [sp, #8]
   17934:	4b15      	ldr	r3, [pc, #84]	; (1798c <att_write_rsp+0xcc>)
   17936:	9301      	str	r3, [sp, #4]
   17938:	2200      	movs	r2, #0
   1793a:	9200      	str	r2, [sp, #0]
   1793c:	4613      	mov	r3, r2
   1793e:	4629      	mov	r1, r5
   17940:	4628      	mov	r0, r5
   17942:	f000 fde1 	bl	18508 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17946:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1794a:	b93f      	cbnz	r7, 1795c <att_write_rsp+0x9c>
	if (data.buf) {
   1794c:	9905      	ldr	r1, [sp, #20]
   1794e:	2900      	cmp	r1, #0
   17950:	d0c8      	beq.n	178e4 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17952:	4a0f      	ldr	r2, [pc, #60]	; (17990 <att_write_rsp+0xd0>)
   17954:	4620      	mov	r0, r4
   17956:	f00a f976 	bl	21c46 <bt_att_chan_send_rsp>
   1795a:	e7c3      	b.n	178e4 <att_write_rsp+0x24>
		if (rsp) {
   1795c:	b926      	cbnz	r6, 17968 <att_write_rsp+0xa8>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1795e:	f1b8 0f18 	cmp.w	r8, #24
   17962:	d00c      	beq.n	1797e <att_write_rsp+0xbe>
   17964:	2700      	movs	r7, #0
   17966:	e7bd      	b.n	178e4 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   17968:	9805      	ldr	r0, [sp, #20]
   1796a:	f00b f931 	bl	22bd0 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1796e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   17972:	462a      	mov	r2, r5
   17974:	4641      	mov	r1, r8
   17976:	4620      	mov	r0, r4
   17978:	f7ff feac 	bl	176d4 <send_err_rsp>
   1797c:	e7ef      	b.n	1795e <att_write_rsp+0x9e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1797e:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   17982:	e7af      	b.n	178e4 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17984:	2712      	movs	r7, #18
   17986:	e7ad      	b.n	178e4 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   17988:	270e      	movs	r7, #14
   1798a:	e7ab      	b.n	178e4 <att_write_rsp+0x24>
   1798c:	00021be9 	.word	0x00021be9
   17990:	00021a9b 	.word	0x00021a9b

00017994 <bt_att_create_pdu>:
{
   17994:	b570      	push	{r4, r5, r6, lr}
   17996:	460e      	mov	r6, r1
   17998:	4615      	mov	r5, r2
	att = att_get(conn);
   1799a:	f7ff fb2f 	bl	16ffc <att_get>
	if (!att) {
   1799e:	4604      	mov	r4, r0
   179a0:	b340      	cbz	r0, 179f4 <bt_att_create_pdu+0x60>
	return list->head;
   179a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   179a4:	b344      	cbz	r4, 179f8 <bt_att_create_pdu+0x64>
   179a6:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   179aa:	d027      	beq.n	179fc <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   179ac:	f514 70a2 	adds.w	r0, r4, #324	; 0x144
   179b0:	d008      	beq.n	179c4 <bt_att_create_pdu+0x30>
	return node->next;
   179b2:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   179b6:	b128      	cbz	r0, 179c4 <bt_att_create_pdu+0x30>
   179b8:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   179bc:	e002      	b.n	179c4 <bt_att_create_pdu+0x30>
   179be:	4603      	mov	r3, r0
   179c0:	4604      	mov	r4, r0
   179c2:	4618      	mov	r0, r3
   179c4:	b1e4      	cbz	r4, 17a00 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   179c6:	1c6b      	adds	r3, r5, #1
   179c8:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   179cc:	4293      	cmp	r3, r2
   179ce:	d90b      	bls.n	179e8 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   179d0:	2800      	cmp	r0, #0
   179d2:	d0f4      	beq.n	179be <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   179d4:	f510 73a2 	adds.w	r3, r0, #324	; 0x144
   179d8:	d0f2      	beq.n	179c0 <bt_att_create_pdu+0x2c>
	return node->next;
   179da:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   179de:	2b00      	cmp	r3, #0
   179e0:	d0ee      	beq.n	179c0 <bt_att_create_pdu+0x2c>
   179e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   179e6:	e7eb      	b.n	179c0 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   179e8:	462a      	mov	r2, r5
   179ea:	4631      	mov	r1, r6
   179ec:	4620      	mov	r0, r4
   179ee:	f7ff fe1b 	bl	17628 <bt_att_chan_create_pdu>
   179f2:	4604      	mov	r4, r0
}
   179f4:	4620      	mov	r0, r4
   179f6:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   179f8:	4620      	mov	r0, r4
   179fa:	e7e3      	b.n	179c4 <bt_att_create_pdu+0x30>
   179fc:	4620      	mov	r0, r4
   179fe:	e7e1      	b.n	179c4 <bt_att_create_pdu+0x30>
   17a00:	4b08      	ldr	r3, [pc, #32]	; (17a24 <bt_att_create_pdu+0x90>)
   17a02:	4a09      	ldr	r2, [pc, #36]	; (17a28 <bt_att_create_pdu+0x94>)
   17a04:	1a9b      	subs	r3, r3, r2
   17a06:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   17a08:	f04f 0200 	mov.w	r2, #0
   17a0c:	2102      	movs	r1, #2
   17a0e:	f361 0202 	bfi	r2, r1, #0, #3
   17a12:	f36f 02c5 	bfc	r2, #3, #3
   17a16:	f363 128f 	bfi	r2, r3, #6, #10
   17a1a:	1c69      	adds	r1, r5, #1
   17a1c:	4803      	ldr	r0, [pc, #12]	; (17a2c <bt_att_create_pdu+0x98>)
   17a1e:	f7f9 fbe1 	bl	111e4 <log_1>
	return NULL;
   17a22:	e7e7      	b.n	179f4 <bt_att_create_pdu+0x60>
   17a24:	00024cd0 	.word	0x00024cd0
   17a28:	00024ca0 	.word	0x00024ca0
   17a2c:	00026618 	.word	0x00026618

00017a30 <att_read_group_rsp>:
{
   17a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a34:	b08a      	sub	sp, #40	; 0x28
   17a36:	4605      	mov	r5, r0
   17a38:	4688      	mov	r8, r1
   17a3a:	4616      	mov	r6, r2
   17a3c:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   17a3e:	2400      	movs	r4, #0
   17a40:	9405      	str	r4, [sp, #20]
   17a42:	9406      	str	r4, [sp, #24]
   17a44:	9407      	str	r4, [sp, #28]
   17a46:	9408      	str	r4, [sp, #32]
   17a48:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   17a4a:	2201      	movs	r2, #1
   17a4c:	2111      	movs	r1, #17
   17a4e:	6880      	ldr	r0, [r0, #8]
   17a50:	f7ff ffa0 	bl	17994 <bt_att_create_pdu>
   17a54:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   17a56:	b358      	cbz	r0, 17ab0 <att_read_group_rsp+0x80>
	data.chan = chan;
   17a58:	9505      	str	r5, [sp, #20]
	data.uuid = uuid;
   17a5a:	f8cd 8018 	str.w	r8, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   17a5e:	2101      	movs	r1, #1
   17a60:	3008      	adds	r0, #8
   17a62:	f00b f8ff 	bl	22c64 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17a66:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   17a68:	4622      	mov	r2, r4
   17a6a:	7004      	strb	r4, [r0, #0]
	data.group = NULL;
   17a6c:	9409      	str	r4, [sp, #36]	; 0x24
   17a6e:	ab05      	add	r3, sp, #20
   17a70:	9302      	str	r3, [sp, #8]
   17a72:	4b10      	ldr	r3, [pc, #64]	; (17ab4 <att_read_group_rsp+0x84>)
   17a74:	9301      	str	r3, [sp, #4]
   17a76:	9400      	str	r4, [sp, #0]
   17a78:	4623      	mov	r3, r4
   17a7a:	4639      	mov	r1, r7
   17a7c:	4630      	mov	r0, r6
   17a7e:	f000 fd43 	bl	18508 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   17a82:	9b08      	ldr	r3, [sp, #32]
   17a84:	781c      	ldrb	r4, [r3, #0]
   17a86:	b14c      	cbz	r4, 17a9c <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17a88:	4a0b      	ldr	r2, [pc, #44]	; (17ab8 <att_read_group_rsp+0x88>)
   17a8a:	9907      	ldr	r1, [sp, #28]
   17a8c:	4628      	mov	r0, r5
   17a8e:	f00a f8da 	bl	21c46 <bt_att_chan_send_rsp>
	return 0;
   17a92:	2400      	movs	r4, #0
}
   17a94:	4620      	mov	r0, r4
   17a96:	b00a      	add	sp, #40	; 0x28
   17a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   17a9c:	9807      	ldr	r0, [sp, #28]
   17a9e:	f00b f897 	bl	22bd0 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   17aa2:	230a      	movs	r3, #10
   17aa4:	4632      	mov	r2, r6
   17aa6:	2110      	movs	r1, #16
   17aa8:	4628      	mov	r0, r5
   17aaa:	f7ff fe13 	bl	176d4 <send_err_rsp>
		return 0;
   17aae:	e7f1      	b.n	17a94 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   17ab0:	240e      	movs	r4, #14
   17ab2:	e7ef      	b.n	17a94 <att_read_group_rsp+0x64>
   17ab4:	000172d5 	.word	0x000172d5
   17ab8:	00021a9b 	.word	0x00021a9b

00017abc <att_read_mult_req>:
{
   17abc:	b570      	push	{r4, r5, r6, lr}
   17abe:	b088      	sub	sp, #32
   17ac0:	4606      	mov	r6, r0
   17ac2:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   17ac4:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   17ac6:	2101      	movs	r1, #1
   17ac8:	4620      	mov	r0, r4
   17aca:	f00a fefb 	bl	228c4 <bt_gatt_change_aware>
   17ace:	2800      	cmp	r0, #0
   17ad0:	d037      	beq.n	17b42 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   17ad2:	2200      	movs	r2, #0
   17ad4:	9204      	str	r2, [sp, #16]
   17ad6:	9205      	str	r2, [sp, #20]
   17ad8:	9206      	str	r2, [sp, #24]
   17ada:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   17adc:	210f      	movs	r1, #15
   17ade:	4620      	mov	r0, r4
   17ae0:	f7ff ff58 	bl	17994 <bt_att_create_pdu>
   17ae4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17ae6:	b378      	cbz	r0, 17b48 <att_read_mult_req+0x8c>
	data.chan = chan;
   17ae8:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   17aea:	89ab      	ldrh	r3, [r5, #12]
   17aec:	2b01      	cmp	r3, #1
   17aee:	d921      	bls.n	17b34 <att_read_mult_req+0x78>
	return net_buf_simple_pull_le16(&buf->b);
   17af0:	f105 0008 	add.w	r0, r5, #8
   17af4:	f00b f8e7 	bl	22cc6 <net_buf_simple_pull_le16>
   17af8:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17afa:	2301      	movs	r3, #1
   17afc:	f88d 301c 	strb.w	r3, [sp, #28]
   17b00:	ab04      	add	r3, sp, #16
   17b02:	9302      	str	r3, [sp, #8]
   17b04:	4b11      	ldr	r3, [pc, #68]	; (17b4c <att_read_mult_req+0x90>)
   17b06:	9301      	str	r3, [sp, #4]
   17b08:	2200      	movs	r2, #0
   17b0a:	9200      	str	r2, [sp, #0]
   17b0c:	4613      	mov	r3, r2
   17b0e:	4601      	mov	r1, r0
   17b10:	f000 fcfa 	bl	18508 <bt_gatt_foreach_attr_type>
		if (data.err) {
   17b14:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17b18:	2b00      	cmp	r3, #0
   17b1a:	d0e6      	beq.n	17aea <att_read_mult_req+0x2e>
			net_buf_unref(data.buf);
   17b1c:	9806      	ldr	r0, [sp, #24]
   17b1e:	f00b f857 	bl	22bd0 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   17b22:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17b26:	4622      	mov	r2, r4
   17b28:	210e      	movs	r1, #14
   17b2a:	4630      	mov	r0, r6
   17b2c:	f7ff fdd2 	bl	176d4 <send_err_rsp>
			return 0;
   17b30:	2000      	movs	r0, #0
   17b32:	e007      	b.n	17b44 <att_read_mult_req+0x88>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17b34:	4a06      	ldr	r2, [pc, #24]	; (17b50 <att_read_mult_req+0x94>)
   17b36:	9906      	ldr	r1, [sp, #24]
   17b38:	4630      	mov	r0, r6
   17b3a:	f00a f884 	bl	21c46 <bt_att_chan_send_rsp>
	return 0;
   17b3e:	2000      	movs	r0, #0
   17b40:	e000      	b.n	17b44 <att_read_mult_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17b42:	2012      	movs	r0, #18
}
   17b44:	b008      	add	sp, #32
   17b46:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   17b48:	200e      	movs	r0, #14
   17b4a:	e7fb      	b.n	17b44 <att_read_mult_req+0x88>
   17b4c:	00021db7 	.word	0x00021db7
   17b50:	00021a9b 	.word	0x00021a9b

00017b54 <att_read_rsp>:
{
   17b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b58:	b088      	sub	sp, #32
   17b5a:	4604      	mov	r4, r0
   17b5c:	4688      	mov	r8, r1
   17b5e:	4616      	mov	r6, r2
   17b60:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17b62:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   17b64:	2101      	movs	r1, #1
   17b66:	4638      	mov	r0, r7
   17b68:	f00a feac 	bl	228c4 <bt_gatt_change_aware>
   17b6c:	2800      	cmp	r0, #0
   17b6e:	d038      	beq.n	17be2 <att_read_rsp+0x8e>
	if (!handle) {
   17b70:	b925      	cbnz	r5, 17b7c <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   17b72:	2601      	movs	r6, #1
}
   17b74:	4630      	mov	r0, r6
   17b76:	b008      	add	sp, #32
   17b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   17b7c:	2200      	movs	r2, #0
   17b7e:	9204      	str	r2, [sp, #16]
   17b80:	9205      	str	r2, [sp, #20]
   17b82:	9206      	str	r2, [sp, #24]
   17b84:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   17b86:	4631      	mov	r1, r6
   17b88:	4638      	mov	r0, r7
   17b8a:	f7ff ff03 	bl	17994 <bt_att_create_pdu>
   17b8e:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17b90:	b348      	cbz	r0, 17be6 <att_read_rsp+0x92>
	data.chan = chan;
   17b92:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   17b94:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   17b98:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17b9c:	2301      	movs	r3, #1
   17b9e:	f88d 301c 	strb.w	r3, [sp, #28]
   17ba2:	ab04      	add	r3, sp, #16
   17ba4:	9302      	str	r3, [sp, #8]
   17ba6:	4b11      	ldr	r3, [pc, #68]	; (17bec <att_read_rsp+0x98>)
   17ba8:	9301      	str	r3, [sp, #4]
   17baa:	2200      	movs	r2, #0
   17bac:	9200      	str	r2, [sp, #0]
   17bae:	4613      	mov	r3, r2
   17bb0:	4629      	mov	r1, r5
   17bb2:	4628      	mov	r0, r5
   17bb4:	f000 fca8 	bl	18508 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17bb8:	f89d 601c 	ldrb.w	r6, [sp, #28]
   17bbc:	b92e      	cbnz	r6, 17bca <att_read_rsp+0x76>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17bbe:	4a0c      	ldr	r2, [pc, #48]	; (17bf0 <att_read_rsp+0x9c>)
   17bc0:	9906      	ldr	r1, [sp, #24]
   17bc2:	4620      	mov	r0, r4
   17bc4:	f00a f83f 	bl	21c46 <bt_att_chan_send_rsp>
	return 0;
   17bc8:	e7d4      	b.n	17b74 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   17bca:	9806      	ldr	r0, [sp, #24]
   17bcc:	f00b f800 	bl	22bd0 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   17bd0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17bd4:	462a      	mov	r2, r5
   17bd6:	4641      	mov	r1, r8
   17bd8:	4620      	mov	r0, r4
   17bda:	f7ff fd7b 	bl	176d4 <send_err_rsp>
		return 0;
   17bde:	2600      	movs	r6, #0
   17be0:	e7c8      	b.n	17b74 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17be2:	2612      	movs	r6, #18
   17be4:	e7c6      	b.n	17b74 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   17be6:	260e      	movs	r6, #14
   17be8:	e7c4      	b.n	17b74 <att_read_rsp+0x20>
   17bea:	bf00      	nop
   17bec:	00021db7 	.word	0x00021db7
   17bf0:	00021a9b 	.word	0x00021a9b

00017bf4 <att_read_type_rsp>:
{
   17bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17bf8:	b08a      	sub	sp, #40	; 0x28
   17bfa:	4605      	mov	r5, r0
   17bfc:	4688      	mov	r8, r1
   17bfe:	4616      	mov	r6, r2
   17c00:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   17c02:	2400      	movs	r4, #0
   17c04:	9404      	str	r4, [sp, #16]
   17c06:	9405      	str	r4, [sp, #20]
   17c08:	9406      	str	r4, [sp, #24]
   17c0a:	9407      	str	r4, [sp, #28]
   17c0c:	9408      	str	r4, [sp, #32]
   17c0e:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   17c10:	2201      	movs	r2, #1
   17c12:	2109      	movs	r1, #9
   17c14:	6880      	ldr	r0, [r0, #8]
   17c16:	f7ff febd 	bl	17994 <bt_att_create_pdu>
   17c1a:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17c1c:	b370      	cbz	r0, 17c7c <att_read_type_rsp+0x88>
	data.chan = chan;
   17c1e:	9504      	str	r5, [sp, #16]
	data.uuid = uuid;
   17c20:	f8cd 8014 	str.w	r8, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   17c24:	2101      	movs	r1, #1
   17c26:	3008      	adds	r0, #8
   17c28:	f00b f81c 	bl	22c64 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17c2c:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   17c2e:	4622      	mov	r2, r4
   17c30:	7004      	strb	r4, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17c32:	230a      	movs	r3, #10
   17c34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17c38:	ab04      	add	r3, sp, #16
   17c3a:	9302      	str	r3, [sp, #8]
   17c3c:	4b10      	ldr	r3, [pc, #64]	; (17c80 <att_read_type_rsp+0x8c>)
   17c3e:	9301      	str	r3, [sp, #4]
   17c40:	9400      	str	r4, [sp, #0]
   17c42:	4623      	mov	r3, r4
   17c44:	4639      	mov	r1, r7
   17c46:	4630      	mov	r0, r6
   17c48:	f000 fc5e 	bl	18508 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17c4c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   17c50:	b944      	cbnz	r4, 17c64 <att_read_type_rsp+0x70>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17c52:	4a0c      	ldr	r2, [pc, #48]	; (17c84 <att_read_type_rsp+0x90>)
   17c54:	9906      	ldr	r1, [sp, #24]
   17c56:	4628      	mov	r0, r5
   17c58:	f009 fff5 	bl	21c46 <bt_att_chan_send_rsp>
}
   17c5c:	4620      	mov	r0, r4
   17c5e:	b00a      	add	sp, #40	; 0x28
   17c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   17c64:	9806      	ldr	r0, [sp, #24]
   17c66:	f00a ffb3 	bl	22bd0 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   17c6a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   17c6e:	4632      	mov	r2, r6
   17c70:	2108      	movs	r1, #8
   17c72:	4628      	mov	r0, r5
   17c74:	f7ff fd2e 	bl	176d4 <send_err_rsp>
		return 0;
   17c78:	2400      	movs	r4, #0
   17c7a:	e7ef      	b.n	17c5c <att_read_type_rsp+0x68>
		return BT_ATT_ERR_UNLIKELY;
   17c7c:	240e      	movs	r4, #14
   17c7e:	e7ed      	b.n	17c5c <att_read_type_rsp+0x68>
   17c80:	00017389 	.word	0x00017389
   17c84:	00021a9b 	.word	0x00021a9b

00017c88 <att_find_type_rsp>:
{
   17c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c8a:	b08b      	sub	sp, #44	; 0x2c
   17c8c:	4604      	mov	r4, r0
   17c8e:	460d      	mov	r5, r1
   17c90:	4616      	mov	r6, r2
   17c92:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   17c94:	2200      	movs	r2, #0
   17c96:	9205      	str	r2, [sp, #20]
   17c98:	9206      	str	r2, [sp, #24]
   17c9a:	9207      	str	r2, [sp, #28]
   17c9c:	9208      	str	r2, [sp, #32]
   17c9e:	9209      	str	r2, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   17ca0:	2107      	movs	r1, #7
   17ca2:	6880      	ldr	r0, [r0, #8]
   17ca4:	f7ff fe76 	bl	17994 <bt_att_create_pdu>
   17ca8:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17caa:	b358      	cbz	r0, 17d04 <att_find_type_rsp+0x7c>
	data.chan = chan;
   17cac:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   17cae:	2200      	movs	r2, #0
   17cb0:	9207      	str	r2, [sp, #28]
	data.value = value;
   17cb2:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   17cb4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   17cb8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17cbc:	230a      	movs	r3, #10
   17cbe:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   17cc2:	ab05      	add	r3, sp, #20
   17cc4:	9302      	str	r3, [sp, #8]
   17cc6:	4b10      	ldr	r3, [pc, #64]	; (17d08 <att_find_type_rsp+0x80>)
   17cc8:	9301      	str	r3, [sp, #4]
   17cca:	9200      	str	r2, [sp, #0]
   17ccc:	4613      	mov	r3, r2
   17cce:	4631      	mov	r1, r6
   17cd0:	4628      	mov	r0, r5
   17cd2:	f000 fc19 	bl	18508 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17cd6:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   17cda:	b93e      	cbnz	r6, 17cec <att_find_type_rsp+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17cdc:	4a0b      	ldr	r2, [pc, #44]	; (17d0c <att_find_type_rsp+0x84>)
   17cde:	9906      	ldr	r1, [sp, #24]
   17ce0:	4620      	mov	r0, r4
   17ce2:	f009 ffb0 	bl	21c46 <bt_att_chan_send_rsp>
}
   17ce6:	4630      	mov	r0, r6
   17ce8:	b00b      	add	sp, #44	; 0x2c
   17cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   17cec:	9806      	ldr	r0, [sp, #24]
   17cee:	f00a ff6f 	bl	22bd0 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   17cf2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   17cf6:	462a      	mov	r2, r5
   17cf8:	2106      	movs	r1, #6
   17cfa:	4620      	mov	r0, r4
   17cfc:	f7ff fcea 	bl	176d4 <send_err_rsp>
		return 0;
   17d00:	2600      	movs	r6, #0
   17d02:	e7f0      	b.n	17ce6 <att_find_type_rsp+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   17d04:	260e      	movs	r6, #14
   17d06:	e7ee      	b.n	17ce6 <att_find_type_rsp+0x5e>
   17d08:	00017435 	.word	0x00017435
   17d0c:	00021a9b 	.word	0x00021a9b

00017d10 <att_find_info_rsp>:
{
   17d10:	b570      	push	{r4, r5, r6, lr}
   17d12:	b088      	sub	sp, #32
   17d14:	4604      	mov	r4, r0
   17d16:	460e      	mov	r6, r1
   17d18:	4615      	mov	r5, r2
	(void)memset(&data, 0, sizeof(data));
   17d1a:	2200      	movs	r2, #0
   17d1c:	9204      	str	r2, [sp, #16]
   17d1e:	9205      	str	r2, [sp, #20]
   17d20:	9206      	str	r2, [sp, #24]
   17d22:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   17d24:	2105      	movs	r1, #5
   17d26:	6880      	ldr	r0, [r0, #8]
   17d28:	f7ff fe34 	bl	17994 <bt_att_create_pdu>
   17d2c:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   17d2e:	b300      	cbz	r0, 17d72 <att_find_info_rsp+0x62>
	data.chan = chan;
   17d30:	9404      	str	r4, [sp, #16]
   17d32:	ab04      	add	r3, sp, #16
   17d34:	9302      	str	r3, [sp, #8]
   17d36:	4b10      	ldr	r3, [pc, #64]	; (17d78 <att_find_info_rsp+0x68>)
   17d38:	9301      	str	r3, [sp, #4]
   17d3a:	2200      	movs	r2, #0
   17d3c:	9200      	str	r2, [sp, #0]
   17d3e:	4613      	mov	r3, r2
   17d40:	4629      	mov	r1, r5
   17d42:	4630      	mov	r0, r6
   17d44:	f000 fbe0 	bl	18508 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   17d48:	9b06      	ldr	r3, [sp, #24]
   17d4a:	b13b      	cbz	r3, 17d5c <att_find_info_rsp+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17d4c:	4a0b      	ldr	r2, [pc, #44]	; (17d7c <att_find_info_rsp+0x6c>)
   17d4e:	9905      	ldr	r1, [sp, #20]
   17d50:	4620      	mov	r0, r4
   17d52:	f009 ff78 	bl	21c46 <bt_att_chan_send_rsp>
	return 0;
   17d56:	2000      	movs	r0, #0
}
   17d58:	b008      	add	sp, #32
   17d5a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(data.buf);
   17d5c:	9805      	ldr	r0, [sp, #20]
   17d5e:	f00a ff37 	bl	22bd0 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   17d62:	230a      	movs	r3, #10
   17d64:	4632      	mov	r2, r6
   17d66:	2104      	movs	r1, #4
   17d68:	4620      	mov	r0, r4
   17d6a:	f7ff fcb3 	bl	176d4 <send_err_rsp>
		return 0;
   17d6e:	2000      	movs	r0, #0
   17d70:	e7f2      	b.n	17d58 <att_find_info_rsp+0x48>
		return BT_ATT_ERR_UNLIKELY;
   17d72:	200e      	movs	r0, #14
   17d74:	e7f0      	b.n	17d58 <att_find_info_rsp+0x48>
   17d76:	bf00      	nop
   17d78:	00021dff 	.word	0x00021dff
   17d7c:	00021a9b 	.word	0x00021a9b

00017d80 <att_mtu_req>:
{
   17d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d82:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   17d84:	6803      	ldr	r3, [r0, #0]
   17d86:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d88:	f3bf 8f5b 	dmb	ish
   17d8c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   17d90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   17d94:	f013 0f08 	tst.w	r3, #8
   17d98:	d122      	bne.n	17de0 <att_mtu_req+0x60>
	req = (void *)buf->data;
   17d9a:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   17d9c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   17d9e:	2e16      	cmp	r6, #22
   17da0:	d920      	bls.n	17de4 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   17da2:	2202      	movs	r2, #2
   17da4:	2103      	movs	r1, #3
   17da6:	f7ff fdf5 	bl	17994 <bt_att_create_pdu>
	if (!pdu) {
   17daa:	4607      	mov	r7, r0
   17dac:	b1e0      	cbz	r0, 17de8 <att_mtu_req+0x68>
   17dae:	2102      	movs	r1, #2
   17db0:	3008      	adds	r0, #8
   17db2:	f00a ff57 	bl	22c64 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   17db6:	2500      	movs	r5, #0
   17db8:	2317      	movs	r3, #23
   17dba:	7003      	strb	r3, [r0, #0]
   17dbc:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   17dbe:	4a0b      	ldr	r2, [pc, #44]	; (17dec <att_mtu_req+0x6c>)
   17dc0:	4639      	mov	r1, r7
   17dc2:	4620      	mov	r0, r4
   17dc4:	f009 ff3f 	bl	21c46 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   17dc8:	2e17      	cmp	r6, #23
   17dca:	bf28      	it	cs
   17dcc:	2617      	movcs	r6, #23
   17dce:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   17dd2:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   17dd6:	4620      	mov	r0, r4
   17dd8:	f00a f875 	bl	21ec6 <att_chan_mtu_updated>
	return 0;
   17ddc:	4628      	mov	r0, r5
}
   17dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   17de0:	2006      	movs	r0, #6
   17de2:	e7fc      	b.n	17dde <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   17de4:	2004      	movs	r0, #4
   17de6:	e7fa      	b.n	17dde <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   17de8:	200e      	movs	r0, #14
   17dea:	e7f8      	b.n	17dde <att_mtu_req+0x5e>
   17dec:	00021a9b 	.word	0x00021a9b

00017df0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   17df0:	b500      	push	{lr}
   17df2:	b083      	sub	sp, #12
   17df4:	4602      	mov	r2, r0
   17df6:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   17df8:	2100      	movs	r1, #0
   17dfa:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17dfc:	a901      	add	r1, sp, #4
   17dfe:	4808      	ldr	r0, [pc, #32]	; (17e20 <bt_att_req_alloc+0x30>)
   17e00:	f003 fca8 	bl	1b754 <k_mem_slab_alloc>
   17e04:	b948      	cbnz	r0, 17e1a <bt_att_req_alloc+0x2a>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   17e06:	9b01      	ldr	r3, [sp, #4]
   17e08:	2200      	movs	r2, #0
   17e0a:	601a      	str	r2, [r3, #0]
   17e0c:	605a      	str	r2, [r3, #4]
   17e0e:	609a      	str	r2, [r3, #8]
   17e10:	60da      	str	r2, [r3, #12]

	return req;
   17e12:	9801      	ldr	r0, [sp, #4]
}
   17e14:	b003      	add	sp, #12
   17e16:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   17e1a:	2000      	movs	r0, #0
   17e1c:	e7fa      	b.n	17e14 <bt_att_req_alloc+0x24>
   17e1e:	bf00      	nop
   17e20:	200006bc 	.word	0x200006bc

00017e24 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   17e24:	b500      	push	{lr}
   17e26:	b083      	sub	sp, #12
   17e28:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   17e2a:	6880      	ldr	r0, [r0, #8]
   17e2c:	b120      	cbz	r0, 17e38 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   17e2e:	f00a fecf 	bl	22bd0 <net_buf_unref>
		req->buf = NULL;
   17e32:	9b01      	ldr	r3, [sp, #4]
   17e34:	2200      	movs	r2, #0
   17e36:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   17e38:	a901      	add	r1, sp, #4
   17e3a:	4803      	ldr	r0, [pc, #12]	; (17e48 <bt_att_req_free+0x24>)
   17e3c:	f00b ff68 	bl	23d10 <k_mem_slab_free>
}
   17e40:	b003      	add	sp, #12
   17e42:	f85d fb04 	ldr.w	pc, [sp], #4
   17e46:	bf00      	nop
   17e48:	200006bc 	.word	0x200006bc

00017e4c <att_handle_rsp>:
{
   17e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e50:	b082      	sub	sp, #8
   17e52:	4604      	mov	r4, r0
   17e54:	460f      	mov	r7, r1
   17e56:	4691      	mov	r9, r2
   17e58:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   17e5a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   17e5e:	f00c f9c7 	bl	241f0 <k_work_cancel_delayable>
	if (!chan->req) {
   17e62:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   17e66:	b1f8      	cbz	r0, 17ea8 <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   17e68:	4b1a      	ldr	r3, [pc, #104]	; (17ed4 <att_handle_rsp+0x88>)
   17e6a:	4298      	cmp	r0, r3
   17e6c:	d02e      	beq.n	17ecc <att_handle_rsp+0x80>
	func = chan->req->func;
   17e6e:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   17e70:	f04f 0a00 	mov.w	sl, #0
   17e74:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   17e78:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   17e7c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   17e80:	f7ff ffd0 	bl	17e24 <bt_att_req_free>
	chan->req = NULL;
   17e84:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   17e88:	6820      	ldr	r0, [r4, #0]
   17e8a:	f009 fda8 	bl	219de <att_req_send_process>
	if (func) {
   17e8e:	b13d      	cbz	r5, 17ea0 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   17e90:	6823      	ldr	r3, [r4, #0]
   17e92:	6818      	ldr	r0, [r3, #0]
   17e94:	f8cd 8000 	str.w	r8, [sp]
   17e98:	464b      	mov	r3, r9
   17e9a:	463a      	mov	r2, r7
   17e9c:	4631      	mov	r1, r6
   17e9e:	47a8      	blx	r5
}
   17ea0:	2000      	movs	r0, #0
   17ea2:	b002      	add	sp, #8
   17ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17ea8:	4b0b      	ldr	r3, [pc, #44]	; (17ed8 <att_handle_rsp+0x8c>)
   17eaa:	4a0c      	ldr	r2, [pc, #48]	; (17edc <att_handle_rsp+0x90>)
   17eac:	1a9b      	subs	r3, r3, r2
   17eae:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   17eb0:	f04f 0100 	mov.w	r1, #0
   17eb4:	2202      	movs	r2, #2
   17eb6:	f362 0102 	bfi	r1, r2, #0, #3
   17eba:	f36f 01c5 	bfc	r1, #3, #3
   17ebe:	f363 118f 	bfi	r1, r3, #6, #10
   17ec2:	4807      	ldr	r0, [pc, #28]	; (17ee0 <att_handle_rsp+0x94>)
   17ec4:	f7f9 fa44 	bl	11350 <log_0>
	bt_att_func_t func = NULL;
   17ec8:	2500      	movs	r5, #0
		goto process;
   17eca:	e7dd      	b.n	17e88 <att_handle_rsp+0x3c>
		chan->req = NULL;
   17ecc:	2500      	movs	r5, #0
   17ece:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   17ed2:	e7d9      	b.n	17e88 <att_handle_rsp+0x3c>
   17ed4:	20002640 	.word	0x20002640
   17ed8:	00024cd0 	.word	0x00024cd0
   17edc:	00024ca0 	.word	0x00024ca0
   17ee0:	00026634 	.word	0x00026634

00017ee4 <att_reset>:
{
   17ee4:	b530      	push	{r4, r5, lr}
   17ee6:	b085      	sub	sp, #20
   17ee8:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   17eea:	2200      	movs	r2, #0
   17eec:	2300      	movs	r3, #0
   17eee:	9803      	ldr	r0, [sp, #12]
   17ef0:	300c      	adds	r0, #12
   17ef2:	f00a fe41 	bl	22b78 <net_buf_get>
   17ef6:	4603      	mov	r3, r0
   17ef8:	b118      	cbz	r0, 17f02 <att_reset+0x1e>
		net_buf_unref(buf);
   17efa:	4618      	mov	r0, r3
   17efc:	f00a fe68 	bl	22bd0 <net_buf_unref>
   17f00:	e7f3      	b.n	17eea <att_reset+0x6>
	att->conn = NULL;
   17f02:	9b03      	ldr	r3, [sp, #12]
   17f04:	2200      	movs	r2, #0
   17f06:	601a      	str	r2, [r3, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   17f08:	e004      	b.n	17f14 <att_reset+0x30>
	list->tail = node;
   17f0a:	609a      	str	r2, [r3, #8]
}
   17f0c:	e00a      	b.n	17f24 <att_reset+0x40>
		bt_att_req_free(req);
   17f0e:	4620      	mov	r0, r4
   17f10:	f7ff ff88 	bl	17e24 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   17f14:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   17f16:	685c      	ldr	r4, [r3, #4]
   17f18:	b17c      	cbz	r4, 17f3a <att_reset+0x56>
	return node->next;
   17f1a:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   17f1c:	605a      	str	r2, [r3, #4]
	return list->tail;
   17f1e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17f20:	42a1      	cmp	r1, r4
   17f22:	d0f2      	beq.n	17f0a <att_reset+0x26>
		if (req->func) {
   17f24:	6865      	ldr	r5, [r4, #4]
   17f26:	2d00      	cmp	r5, #0
   17f28:	d0f1      	beq.n	17f0e <att_reset+0x2a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   17f2a:	68e3      	ldr	r3, [r4, #12]
   17f2c:	9300      	str	r3, [sp, #0]
   17f2e:	2300      	movs	r3, #0
   17f30:	461a      	mov	r2, r3
   17f32:	210e      	movs	r1, #14
   17f34:	4618      	mov	r0, r3
   17f36:	47a8      	blx	r5
   17f38:	e7e9      	b.n	17f0e <att_reset+0x2a>
	k_mem_slab_free(&att_slab, (void **)&att);
   17f3a:	a903      	add	r1, sp, #12
   17f3c:	4802      	ldr	r0, [pc, #8]	; (17f48 <att_reset+0x64>)
   17f3e:	f00b fee7 	bl	23d10 <k_mem_slab_free>
}
   17f42:	b005      	add	sp, #20
   17f44:	bd30      	pop	{r4, r5, pc}
   17f46:	bf00      	nop
   17f48:	20000684 	.word	0x20000684

00017f4c <att_timeout>:
{
   17f4c:	b510      	push	{r4, lr}
   17f4e:	4604      	mov	r4, r0
   17f50:	4b0a      	ldr	r3, [pc, #40]	; (17f7c <att_timeout+0x30>)
   17f52:	4a0b      	ldr	r2, [pc, #44]	; (17f80 <att_timeout+0x34>)
   17f54:	1a9b      	subs	r3, r3, r2
   17f56:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   17f58:	f04f 0100 	mov.w	r1, #0
   17f5c:	2201      	movs	r2, #1
   17f5e:	f362 0102 	bfi	r1, r2, #0, #3
   17f62:	f36f 01c5 	bfc	r1, #3, #3
   17f66:	f363 118f 	bfi	r1, r3, #6, #10
   17f6a:	4806      	ldr	r0, [pc, #24]	; (17f84 <att_timeout+0x38>)
   17f6c:	f7f9 f9f0 	bl	11350 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   17f70:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
   17f74:	f00a f963 	bl	2223e <bt_att_disconnected>
}
   17f78:	bd10      	pop	{r4, pc}
   17f7a:	bf00      	nop
   17f7c:	00024cd0 	.word	0x00024cd0
   17f80:	00024ca0 	.word	0x00024ca0
   17f84:	0002664c 	.word	0x0002664c

00017f88 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17f88:	4b0d      	ldr	r3, [pc, #52]	; (17fc0 <bt_gatt_service_init+0x38>)
   17f8a:	2201      	movs	r2, #1
   17f8c:	f3bf 8f5b 	dmb	ish
   17f90:	e853 1f00 	ldrex	r1, [r3]
   17f94:	2900      	cmp	r1, #0
   17f96:	d103      	bne.n	17fa0 <bt_gatt_service_init+0x18>
   17f98:	e843 2000 	strex	r0, r2, [r3]
   17f9c:	2800      	cmp	r0, #0
   17f9e:	d1f7      	bne.n	17f90 <bt_gatt_service_init+0x8>
   17fa0:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   17fa4:	d101      	bne.n	17faa <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17fa6:	4b07      	ldr	r3, [pc, #28]	; (17fc4 <bt_gatt_service_init+0x3c>)
   17fa8:	e006      	b.n	17fb8 <bt_gatt_service_init+0x30>
   17faa:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   17fac:	685a      	ldr	r2, [r3, #4]
   17fae:	4906      	ldr	r1, [pc, #24]	; (17fc8 <bt_gatt_service_init+0x40>)
   17fb0:	8808      	ldrh	r0, [r1, #0]
   17fb2:	4402      	add	r2, r0
   17fb4:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17fb6:	3308      	adds	r3, #8
   17fb8:	4a04      	ldr	r2, [pc, #16]	; (17fcc <bt_gatt_service_init+0x44>)
   17fba:	4293      	cmp	r3, r2
   17fbc:	d3f6      	bcc.n	17fac <bt_gatt_service_init+0x24>
	}
}
   17fbe:	4770      	bx	lr
   17fc0:	20002690 	.word	0x20002690
   17fc4:	00024c90 	.word	0x00024c90
   17fc8:	200036b8 	.word	0x200036b8
   17fcc:	00024ca0 	.word	0x00024ca0

00017fd0 <find_cf_cfg>:
{
   17fd0:	b570      	push	{r4, r5, r6, lr}
   17fd2:	b082      	sub	sp, #8
   17fd4:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17fd6:	2400      	movs	r4, #0
   17fd8:	2c00      	cmp	r4, #0
   17fda:	dd03      	ble.n	17fe4 <find_cf_cfg+0x14>
	return NULL;
   17fdc:	2500      	movs	r5, #0
}
   17fde:	4628      	mov	r0, r5
   17fe0:	b002      	add	sp, #8
   17fe2:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17fe4:	4d0e      	ldr	r5, [pc, #56]	; (18020 <find_cf_cfg+0x50>)
   17fe6:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   17fea:	b166      	cbz	r6, 18006 <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17fec:	490c      	ldr	r1, [pc, #48]	; (18020 <find_cf_cfg+0x50>)
   17fee:	0123      	lsls	r3, r4, #4
   17ff0:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   17ff4:	3201      	adds	r2, #1
   17ff6:	5cc9      	ldrb	r1, [r1, r3]
   17ff8:	4630      	mov	r0, r6
   17ffa:	f009 fa81 	bl	21500 <bt_conn_is_peer_addr_le>
   17ffe:	2800      	cmp	r0, #0
   18000:	d1ed      	bne.n	17fde <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18002:	3401      	adds	r4, #1
   18004:	e7e8      	b.n	17fd8 <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   18006:	4628      	mov	r0, r5
   18008:	2300      	movs	r3, #0
   1800a:	9300      	str	r3, [sp, #0]
   1800c:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   18010:	2207      	movs	r2, #7
   18012:	4669      	mov	r1, sp
   18014:	3001      	adds	r0, #1
   18016:	f00c fc61 	bl	248dc <memcmp>
   1801a:	2800      	cmp	r0, #0
   1801c:	d1f1      	bne.n	18002 <find_cf_cfg+0x32>
   1801e:	e7de      	b.n	17fde <find_cf_cfg+0xe>
   18020:	20002658 	.word	0x20002658

00018024 <find_sc_cfg>:
{
   18024:	b570      	push	{r4, r5, r6, lr}
   18026:	4606      	mov	r6, r0
   18028:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1802a:	2400      	movs	r4, #0
   1802c:	b10c      	cbz	r4, 18032 <find_sc_cfg+0xe>
	return NULL;
   1802e:	2000      	movs	r0, #0
}
   18030:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   18032:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18036:	4a0c      	ldr	r2, [pc, #48]	; (18068 <find_sc_cfg+0x44>)
   18038:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1803c:	429e      	cmp	r6, r3
   1803e:	d001      	beq.n	18044 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18040:	3401      	adds	r4, #1
   18042:	e7f3      	b.n	1802c <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   18044:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18048:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1804c:	2207      	movs	r2, #7
   1804e:	4629      	mov	r1, r5
   18050:	3001      	adds	r0, #1
   18052:	f00c fc43 	bl	248dc <memcmp>
		if (id == sc_cfg[i].id &&
   18056:	2800      	cmp	r0, #0
   18058:	d1f2      	bne.n	18040 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   1805a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1805e:	4802      	ldr	r0, [pc, #8]	; (18068 <find_sc_cfg+0x44>)
   18060:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   18064:	e7e4      	b.n	18030 <find_sc_cfg+0xc>
   18066:	bf00      	nop
   18068:	2000266c 	.word	0x2000266c

0001806c <sc_clear>:
{
   1806c:	b538      	push	{r3, r4, r5, lr}
   1806e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18070:	f100 0588 	add.w	r5, r0, #136	; 0x88
   18074:	4629      	mov	r1, r5
   18076:	7a00      	ldrb	r0, [r0, #8]
   18078:	f009 f888 	bl	2118c <bt_addr_le_is_bonded>
   1807c:	b1b8      	cbz	r0, 180ae <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1807e:	4629      	mov	r1, r5
   18080:	7a20      	ldrb	r0, [r4, #8]
   18082:	f00a fa3e 	bl	22502 <bt_gatt_clear_sc>
		if (err) {
   18086:	4601      	mov	r1, r0
   18088:	b900      	cbnz	r0, 1808c <sc_clear+0x20>
}
   1808a:	bd38      	pop	{r3, r4, r5, pc}
   1808c:	4b0c      	ldr	r3, [pc, #48]	; (180c0 <sc_clear+0x54>)
   1808e:	4a0d      	ldr	r2, [pc, #52]	; (180c4 <sc_clear+0x58>)
   18090:	1a9b      	subs	r3, r3, r2
   18092:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   18094:	f04f 0200 	mov.w	r2, #0
   18098:	2001      	movs	r0, #1
   1809a:	f360 0202 	bfi	r2, r0, #0, #3
   1809e:	f36f 02c5 	bfc	r2, #3, #3
   180a2:	f363 128f 	bfi	r2, r3, #6, #10
   180a6:	4808      	ldr	r0, [pc, #32]	; (180c8 <sc_clear+0x5c>)
   180a8:	f7f9 f89c 	bl	111e4 <log_1>
   180ac:	e7ed      	b.n	1808a <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   180ae:	4629      	mov	r1, r5
   180b0:	7a20      	ldrb	r0, [r4, #8]
   180b2:	f7ff ffb7 	bl	18024 <find_sc_cfg>
		if (cfg) {
   180b6:	2800      	cmp	r0, #0
   180b8:	d0e7      	beq.n	1808a <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   180ba:	f00a fa1d 	bl	224f8 <clear_sc_cfg>
}
   180be:	e7e4      	b.n	1808a <sc_clear+0x1e>
   180c0:	00024ce8 	.word	0x00024ce8
   180c4:	00024ca0 	.word	0x00024ca0
   180c8:	000266c8 	.word	0x000266c8

000180cc <sc_indicate_rsp>:
{
   180cc:	b510      	push	{r4, lr}
   180ce:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   180d0:	4b19      	ldr	r3, [pc, #100]	; (18138 <sc_indicate_rsp+0x6c>)
   180d2:	f103 0250 	add.w	r2, r3, #80	; 0x50
   180d6:	f3bf 8f5b 	dmb	ish
   180da:	e852 1f00 	ldrex	r1, [r2]
   180de:	f021 0102 	bic.w	r1, r1, #2
   180e2:	e842 1000 	strex	r0, r1, [r2]
   180e6:	2800      	cmp	r0, #0
   180e8:	d1f7      	bne.n	180da <sc_indicate_rsp+0xe>
   180ea:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   180ee:	f3bf 8f5b 	dmb	ish
   180f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   180f4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   180f8:	f013 0f01 	tst.w	r3, #1
   180fc:	d116      	bne.n	1812c <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   180fe:	4620      	mov	r0, r4
   18100:	f7ff ff66 	bl	17fd0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   18104:	4603      	mov	r3, r0
   18106:	b180      	cbz	r0, 1812a <sc_indicate_rsp+0x5e>
   18108:	7a02      	ldrb	r2, [r0, #8]
   1810a:	f012 0f01 	tst.w	r2, #1
   1810e:	d00c      	beq.n	1812a <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   18110:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18112:	f3bf 8f5b 	dmb	ish
   18116:	e853 2f00 	ldrex	r2, [r3]
   1811a:	f042 0201 	orr.w	r2, r2, #1
   1811e:	e843 2100 	strex	r1, r2, [r3]
   18122:	2900      	cmp	r1, #0
   18124:	d1f7      	bne.n	18116 <sc_indicate_rsp+0x4a>
   18126:	f3bf 8f5b 	dmb	ish
}
   1812a:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1812c:	2200      	movs	r2, #0
   1812e:	2300      	movs	r3, #0
   18130:	4802      	ldr	r0, [pc, #8]	; (1813c <sc_indicate_rsp+0x70>)
   18132:	f003 ff75 	bl	1c020 <k_work_reschedule>
   18136:	e7e2      	b.n	180fe <sc_indicate_rsp+0x32>
   18138:	20001a50 	.word	0x20001a50
   1813c:	20001a70 	.word	0x20001a70

00018140 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   18140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18144:	b083      	sub	sp, #12
   18146:	4615      	mov	r5, r2
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   18148:	6882      	ldr	r2, [r0, #8]
   1814a:	4b30      	ldr	r3, [pc, #192]	; (1820c <disconnected_cb+0xcc>)
   1814c:	429a      	cmp	r2, r3
   1814e:	d003      	beq.n	18158 <disconnected_cb+0x18>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   18150:	2001      	movs	r0, #1
   18152:	b003      	add	sp, #12
   18154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18158:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1815a:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1815c:	897b      	ldrh	r3, [r7, #10]
   1815e:	2b00      	cmp	r3, #0
   18160:	d0f6      	beq.n	18150 <disconnected_cb+0x10>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18162:	2600      	movs	r6, #0
	value_used = false;
   18164:	46b1      	mov	r9, r6
   18166:	e021      	b.n	181ac <disconnected_cb+0x6c>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   18168:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   1816c:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   18170:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   18174:	b1cb      	cbz	r3, 181aa <disconnected_cb+0x6a>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18176:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1817a:	f108 0a01 	add.w	sl, r8, #1
   1817e:	4652      	mov	r2, sl
   18180:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   18184:	4628      	mov	r0, r5
   18186:	f009 f9bb 	bl	21500 <bt_conn_is_peer_addr_le>
   1818a:	bb00      	cbnz	r0, 181ce <disconnected_cb+0x8e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1818c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   18190:	4651      	mov	r1, sl
   18192:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   18196:	f7fe fb4f 	bl	16838 <bt_conn_lookup_addr_le>
			if (tmp) {
   1819a:	4603      	mov	r3, r0
   1819c:	b128      	cbz	r0, 181aa <disconnected_cb+0x6a>
				if (tmp->state == BT_CONN_CONNECTED) {
   1819e:	7a82      	ldrb	r2, [r0, #10]
   181a0:	2a07      	cmp	r2, #7
   181a2:	d011      	beq.n	181c8 <disconnected_cb+0x88>
				bt_conn_unref(tmp);
   181a4:	4618      	mov	r0, r3
   181a6:	f009 f968 	bl	2147a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   181aa:	3601      	adds	r6, #1
   181ac:	2e00      	cmp	r6, #0
   181ae:	d0db      	beq.n	18168 <disconnected_cb+0x28>
	if (!value_used) {
   181b0:	f1b9 0f00 	cmp.w	r9, #0
   181b4:	d1cc      	bne.n	18150 <disconnected_cb+0x10>
		ccc->value = 0U;
   181b6:	2300      	movs	r3, #0
   181b8:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   181ba:	68fb      	ldr	r3, [r7, #12]
   181bc:	2b00      	cmp	r3, #0
   181be:	d0c7      	beq.n	18150 <disconnected_cb+0x10>
			ccc->cfg_changed(attr, ccc->value);
   181c0:	2100      	movs	r1, #0
   181c2:	4620      	mov	r0, r4
   181c4:	4798      	blx	r3
   181c6:	e7c3      	b.n	18150 <disconnected_cb+0x10>
					value_used = true;
   181c8:	f04f 0901 	mov.w	r9, #1
   181cc:	e7ea      	b.n	181a4 <disconnected_cb+0x64>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   181ce:	f105 0388 	add.w	r3, r5, #136	; 0x88
   181d2:	9301      	str	r3, [sp, #4]
   181d4:	4619      	mov	r1, r3
   181d6:	7a28      	ldrb	r0, [r5, #8]
   181d8:	f008 ffd8 	bl	2118c <bt_addr_le_is_bonded>
   181dc:	b950      	cbnz	r0, 181f4 <disconnected_cb+0xb4>
				if (ccc == &sc_ccc) {
   181de:	4b0c      	ldr	r3, [pc, #48]	; (18210 <disconnected_cb+0xd0>)
   181e0:	429f      	cmp	r7, r3
   181e2:	d003      	beq.n	181ec <disconnected_cb+0xac>
				clear_ccc_cfg(cfg);
   181e4:	4640      	mov	r0, r8
   181e6:	f00a f9f4 	bl	225d2 <clear_ccc_cfg>
   181ea:	e7de      	b.n	181aa <disconnected_cb+0x6a>
					sc_clear(conn);
   181ec:	4628      	mov	r0, r5
   181ee:	f7ff ff3d 	bl	1806c <sc_clear>
   181f2:	e7f7      	b.n	181e4 <disconnected_cb+0xa4>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   181f4:	9a01      	ldr	r2, [sp, #4]
   181f6:	6813      	ldr	r3, [r2, #0]
   181f8:	f8c8 3001 	str.w	r3, [r8, #1]
   181fc:	4613      	mov	r3, r2
   181fe:	8892      	ldrh	r2, [r2, #4]
   18200:	799b      	ldrb	r3, [r3, #6]
   18202:	f8aa 2004 	strh.w	r2, [sl, #4]
   18206:	f88a 3006 	strb.w	r3, [sl, #6]
}
   1820a:	e7ce      	b.n	181aa <disconnected_cb+0x6a>
   1820c:	0001835d 	.word	0x0001835d
   18210:	20000524 	.word	0x20000524

00018214 <cf_write>:
{
   18214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18218:	461d      	mov	r5, r3
   1821a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1821e:	2b01      	cmp	r3, #1
   18220:	d843      	bhi.n	182aa <cf_write+0x96>
   18222:	4606      	mov	r6, r0
   18224:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   18226:	462f      	mov	r7, r5
   18228:	442b      	add	r3, r5
   1822a:	2b01      	cmp	r3, #1
   1822c:	d840      	bhi.n	182b0 <cf_write+0x9c>
	cfg = find_cf_cfg(conn);
   1822e:	f7ff fecf 	bl	17fd0 <find_cf_cfg>
	if (!cfg) {
   18232:	4604      	mov	r4, r0
   18234:	b310      	cbz	r0, 1827c <cf_write+0x68>
	if (!cfg) {
   18236:	b32c      	cbz	r4, 18284 <cf_write+0x70>
	if (!cf_set_value(cfg, value, len)) {
   18238:	462a      	mov	r2, r5
   1823a:	4641      	mov	r1, r8
   1823c:	4620      	mov	r0, r4
   1823e:	f00a f861 	bl	22304 <cf_set_value>
   18242:	b3c0      	cbz	r0, 182b6 <cf_write+0xa2>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18244:	4633      	mov	r3, r6
   18246:	f853 2f88 	ldr.w	r2, [r3, #136]!
   1824a:	f8c4 2001 	str.w	r2, [r4, #1]
   1824e:	889a      	ldrh	r2, [r3, #4]
   18250:	799b      	ldrb	r3, [r3, #6]
   18252:	f8a4 2005 	strh.w	r2, [r4, #5]
   18256:	71e3      	strb	r3, [r4, #7]
	cfg->id = conn->id;
   18258:	7a33      	ldrb	r3, [r6, #8]
   1825a:	f804 3b0c 	strb.w	r3, [r4], #12
   1825e:	f3bf 8f5b 	dmb	ish
   18262:	e854 3f00 	ldrex	r3, [r4]
   18266:	f043 0301 	orr.w	r3, r3, #1
   1826a:	e844 3200 	strex	r2, r3, [r4]
   1826e:	2a00      	cmp	r2, #0
   18270:	d1f7      	bne.n	18262 <cf_write+0x4e>
   18272:	f3bf 8f5b 	dmb	ish
}
   18276:	4638      	mov	r0, r7
   18278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1827c:	f7ff fea8 	bl	17fd0 <find_cf_cfg>
   18280:	4604      	mov	r4, r0
   18282:	e7d8      	b.n	18236 <cf_write+0x22>
   18284:	4b0d      	ldr	r3, [pc, #52]	; (182bc <cf_write+0xa8>)
   18286:	4a0e      	ldr	r2, [pc, #56]	; (182c0 <cf_write+0xac>)
   18288:	1a9b      	subs	r3, r3, r2
   1828a:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   1828c:	f04f 0100 	mov.w	r1, #0
   18290:	2202      	movs	r2, #2
   18292:	f362 0102 	bfi	r1, r2, #0, #3
   18296:	f36f 01c5 	bfc	r1, #3, #3
   1829a:	f363 118f 	bfi	r1, r3, #6, #10
   1829e:	4809      	ldr	r0, [pc, #36]	; (182c4 <cf_write+0xb0>)
   182a0:	f7f9 f856 	bl	11350 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   182a4:	f06f 0710 	mvn.w	r7, #16
   182a8:	e7e5      	b.n	18276 <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   182aa:	f06f 0706 	mvn.w	r7, #6
   182ae:	e7e2      	b.n	18276 <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   182b0:	f06f 070c 	mvn.w	r7, #12
   182b4:	e7df      	b.n	18276 <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   182b6:	f06f 0712 	mvn.w	r7, #18
   182ba:	e7dc      	b.n	18276 <cf_write+0x62>
   182bc:	00024ce8 	.word	0x00024ce8
   182c0:	00024ca0 	.word	0x00024ca0
   182c4:	000266e0 	.word	0x000266e0

000182c8 <sc_save>:
{
   182c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182cc:	b082      	sub	sp, #8
   182ce:	4607      	mov	r7, r0
   182d0:	4688      	mov	r8, r1
   182d2:	4616      	mov	r6, r2
   182d4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   182d6:	f7ff fea5 	bl	18024 <find_sc_cfg>
	if (!cfg) {
   182da:	4604      	mov	r4, r0
   182dc:	b170      	cbz	r0, 182fc <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   182de:	8923      	ldrh	r3, [r4, #8]
   182e0:	b90b      	cbnz	r3, 182e6 <sc_save+0x1e>
   182e2:	8963      	ldrh	r3, [r4, #10]
   182e4:	b38b      	cbz	r3, 1834a <sc_save+0x82>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   182e6:	462b      	mov	r3, r5
   182e8:	4632      	mov	r2, r6
   182ea:	f104 010a 	add.w	r1, r4, #10
   182ee:	f104 0008 	add.w	r0, r4, #8
   182f2:	f009 fff2 	bl	222da <update_range>
}
   182f6:	b002      	add	sp, #8
   182f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   182fc:	9000      	str	r0, [sp, #0]
   182fe:	f8cd 0003 	str.w	r0, [sp, #3]
   18302:	4669      	mov	r1, sp
   18304:	f7ff fe8e 	bl	18024 <find_sc_cfg>
		if (!cfg) {
   18308:	4604      	mov	r4, r0
   1830a:	b168      	cbz	r0, 18328 <sc_save+0x60>
		cfg->id = id;
   1830c:	4603      	mov	r3, r0
   1830e:	f803 7b01 	strb.w	r7, [r3], #1
   18312:	f8d8 2000 	ldr.w	r2, [r8]
   18316:	f8c0 2001 	str.w	r2, [r0, #1]
   1831a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   1831e:	f898 2006 	ldrb.w	r2, [r8, #6]
   18322:	8099      	strh	r1, [r3, #4]
   18324:	719a      	strb	r2, [r3, #6]
   18326:	e7da      	b.n	182de <sc_save+0x16>
   18328:	4b09      	ldr	r3, [pc, #36]	; (18350 <sc_save+0x88>)
   1832a:	4a0a      	ldr	r2, [pc, #40]	; (18354 <sc_save+0x8c>)
   1832c:	1a9b      	subs	r3, r3, r2
   1832e:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   18330:	f04f 0100 	mov.w	r1, #0
   18334:	2201      	movs	r2, #1
   18336:	f362 0102 	bfi	r1, r2, #0, #3
   1833a:	f36f 01c5 	bfc	r1, #3, #3
   1833e:	f363 118f 	bfi	r1, r3, #6, #10
   18342:	4805      	ldr	r0, [pc, #20]	; (18358 <sc_save+0x90>)
   18344:	f7f9 f804 	bl	11350 <log_0>
			return;
   18348:	e7d5      	b.n	182f6 <sc_save+0x2e>
		cfg->data.start = start;
   1834a:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1834c:	8165      	strh	r5, [r4, #10]
		goto done;
   1834e:	e7d2      	b.n	182f6 <sc_save+0x2e>
   18350:	00024ce8 	.word	0x00024ce8
   18354:	00024ca0 	.word	0x00024ca0
   18358:	0002670c 	.word	0x0002670c

0001835c <bt_gatt_attr_write_ccc>:
{
   1835c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18360:	461c      	mov	r4, r3
   18362:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   18366:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   18368:	2b00      	cmp	r3, #0
   1836a:	d15a      	bne.n	18422 <bt_gatt_attr_write_ccc+0xc6>
   1836c:	4681      	mov	r9, r0
   1836e:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   18370:	1e63      	subs	r3, r4, #1
   18372:	b29b      	uxth	r3, r3
   18374:	2b01      	cmp	r3, #1
   18376:	d857      	bhi.n	18428 <bt_gatt_attr_write_ccc+0xcc>
	if (len < sizeof(uint16_t)) {
   18378:	2c01      	cmp	r4, #1
   1837a:	d91d      	bls.n	183b8 <bt_gatt_attr_write_ccc+0x5c>
   1837c:	7853      	ldrb	r3, [r2, #1]
   1837e:	7815      	ldrb	r5, [r2, #0]
   18380:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   18384:	4639      	mov	r1, r7
   18386:	4648      	mov	r0, r9
   18388:	f00a f88a 	bl	224a0 <find_ccc_cfg>
	if (!cfg) {
   1838c:	4680      	mov	r8, r0
   1838e:	b1a8      	cbz	r0, 183bc <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
   18390:	693b      	ldr	r3, [r7, #16]
   18392:	b143      	cbz	r3, 183a6 <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   18394:	462a      	mov	r2, r5
   18396:	4631      	mov	r1, r6
   18398:	4648      	mov	r0, r9
   1839a:	4798      	blx	r3
		if (write < 0) {
   1839c:	2800      	cmp	r0, #0
   1839e:	db09      	blt.n	183b4 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
   183a0:	3801      	subs	r0, #1
   183a2:	2801      	cmp	r0, #1
   183a4:	d843      	bhi.n	1842e <bt_gatt_attr_write_ccc+0xd2>
	cfg->value = value;
   183a6:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   183aa:	897b      	ldrh	r3, [r7, #10]
   183ac:	429d      	cmp	r5, r3
   183ae:	d12f      	bne.n	18410 <bt_gatt_attr_write_ccc+0xb4>
	if (!value) {
   183b0:	b39d      	cbz	r5, 1841a <bt_gatt_attr_write_ccc+0xbe>
	return len;
   183b2:	4620      	mov	r0, r4
}
   183b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   183b8:	7815      	ldrb	r5, [r2, #0]
   183ba:	e7e3      	b.n	18384 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   183bc:	b90d      	cbnz	r5, 183c2 <bt_gatt_attr_write_ccc+0x66>
			return len;
   183be:	4620      	mov	r0, r4
   183c0:	e7f8      	b.n	183b4 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   183c2:	4639      	mov	r1, r7
   183c4:	2000      	movs	r0, #0
   183c6:	f00a f86b 	bl	224a0 <find_ccc_cfg>
		if (!cfg) {
   183ca:	4680      	mov	r8, r0
   183cc:	b168      	cbz	r0, 183ea <bt_gatt_attr_write_ccc+0x8e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   183ce:	464b      	mov	r3, r9
   183d0:	f853 2f88 	ldr.w	r2, [r3, #136]!
   183d4:	f8c0 2001 	str.w	r2, [r0, #1]
   183d8:	889a      	ldrh	r2, [r3, #4]
   183da:	799b      	ldrb	r3, [r3, #6]
   183dc:	f8a0 2005 	strh.w	r2, [r0, #5]
   183e0:	71c3      	strb	r3, [r0, #7]
		cfg->id = conn->id;
   183e2:	f899 3008 	ldrb.w	r3, [r9, #8]
   183e6:	7003      	strb	r3, [r0, #0]
   183e8:	e7d2      	b.n	18390 <bt_gatt_attr_write_ccc+0x34>
   183ea:	4b12      	ldr	r3, [pc, #72]	; (18434 <bt_gatt_attr_write_ccc+0xd8>)
   183ec:	4a12      	ldr	r2, [pc, #72]	; (18438 <bt_gatt_attr_write_ccc+0xdc>)
   183ee:	1a9b      	subs	r3, r3, r2
   183f0:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   183f2:	f04f 0100 	mov.w	r1, #0
   183f6:	2202      	movs	r2, #2
   183f8:	f362 0102 	bfi	r1, r2, #0, #3
   183fc:	f36f 01c5 	bfc	r1, #3, #3
   18400:	f363 118f 	bfi	r1, r3, #6, #10
   18404:	480d      	ldr	r0, [pc, #52]	; (1843c <bt_gatt_attr_write_ccc+0xe0>)
   18406:	f7f8 ffa3 	bl	11350 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1840a:	f06f 0010 	mvn.w	r0, #16
   1840e:	e7d1      	b.n	183b4 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   18410:	4639      	mov	r1, r7
   18412:	4630      	mov	r0, r6
   18414:	f009 ffa7 	bl	22366 <gatt_ccc_changed>
   18418:	e7ca      	b.n	183b0 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   1841a:	4640      	mov	r0, r8
   1841c:	f00a f8d9 	bl	225d2 <clear_ccc_cfg>
   18420:	e7c7      	b.n	183b2 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18422:	f06f 0006 	mvn.w	r0, #6
   18426:	e7c5      	b.n	183b4 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18428:	f06f 000c 	mvn.w	r0, #12
   1842c:	e7c2      	b.n	183b4 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1842e:	f06f 000d 	mvn.w	r0, #13
   18432:	e7bf      	b.n	183b4 <bt_gatt_attr_write_ccc+0x58>
   18434:	00024ce8 	.word	0x00024ce8
   18438:	00024ca0 	.word	0x00024ca0
   1843c:	0002672c 	.word	0x0002672c

00018440 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18440:	4b13      	ldr	r3, [pc, #76]	; (18490 <bt_gatt_init+0x50>)
   18442:	2201      	movs	r2, #1
   18444:	f3bf 8f5b 	dmb	ish
   18448:	e853 1f00 	ldrex	r1, [r3]
   1844c:	2900      	cmp	r1, #0
   1844e:	d103      	bne.n	18458 <bt_gatt_init+0x18>
   18450:	e843 2000 	strex	r0, r2, [r3]
   18454:	2800      	cmp	r0, #0
   18456:	d1f7      	bne.n	18448 <bt_gatt_init+0x8>
   18458:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1845c:	d116      	bne.n	1848c <bt_gatt_init+0x4c>
{
   1845e:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   18460:	f7ff fd92 	bl	17f88 <bt_gatt_service_init>
	list->head = NULL;
   18464:	4b0b      	ldr	r3, [pc, #44]	; (18494 <bt_gatt_init+0x54>)
   18466:	2200      	movs	r2, #0
   18468:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1846a:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1846c:	4c0a      	ldr	r4, [pc, #40]	; (18498 <bt_gatt_init+0x58>)
   1846e:	490b      	ldr	r1, [pc, #44]	; (1849c <bt_gatt_init+0x5c>)
   18470:	4620      	mov	r0, r4
   18472:	f00b fe71 	bl	24158 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   18476:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1847a:	2300      	movs	r3, #0
   1847c:	4620      	mov	r0, r4
   1847e:	f003 fdc7 	bl	1c010 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   18482:	4907      	ldr	r1, [pc, #28]	; (184a0 <bt_gatt_init+0x60>)
   18484:	4807      	ldr	r0, [pc, #28]	; (184a4 <bt_gatt_init+0x64>)
   18486:	f00b fe67 	bl	24158 <k_work_init_delayable>
}
   1848a:	bd10      	pop	{r4, pc}
   1848c:	4770      	bx	lr
   1848e:	bf00      	nop
   18490:	20002668 	.word	0x20002668
   18494:	20002650 	.word	0x20002650
   18498:	200019f8 	.word	0x200019f8
   1849c:	00022863 	.word	0x00022863
   184a0:	00018879 	.word	0x00018879
   184a4:	20001a70 	.word	0x20001a70

000184a8 <bt_gatt_attr_get_handle>:
	if (!attr) {
   184a8:	b328      	cbz	r0, 184f6 <bt_gatt_attr_get_handle+0x4e>
{
   184aa:	b4f0      	push	{r4, r5, r6, r7}
   184ac:	4606      	mov	r6, r0
	if (attr->handle) {
   184ae:	8a00      	ldrh	r0, [r0, #16]
   184b0:	bb20      	cbnz	r0, 184fc <bt_gatt_attr_get_handle+0x54>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   184b2:	4d13      	ldr	r5, [pc, #76]	; (18500 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   184b4:	2201      	movs	r2, #1
   184b6:	e003      	b.n	184c0 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   184b8:	686b      	ldr	r3, [r5, #4]
   184ba:	441a      	add	r2, r3
   184bc:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   184be:	3508      	adds	r5, #8
   184c0:	4b10      	ldr	r3, [pc, #64]	; (18504 <bt_gatt_attr_get_handle+0x5c>)
   184c2:	429d      	cmp	r5, r3
   184c4:	d21a      	bcs.n	184fc <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   184c6:	682c      	ldr	r4, [r5, #0]
   184c8:	42b4      	cmp	r4, r6
   184ca:	d8f5      	bhi.n	184b8 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   184cc:	686f      	ldr	r7, [r5, #4]
   184ce:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   184d2:	009b      	lsls	r3, r3, #2
   184d4:	3b14      	subs	r3, #20
   184d6:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   184d8:	42b3      	cmp	r3, r6
   184da:	d3ed      	bcc.n	184b8 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   184dc:	2300      	movs	r3, #0
   184de:	429f      	cmp	r7, r3
   184e0:	d9ed      	bls.n	184be <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   184e2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   184e6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   184ea:	42b1      	cmp	r1, r6
   184ec:	d005      	beq.n	184fa <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   184ee:	3301      	adds	r3, #1
   184f0:	3201      	adds	r2, #1
   184f2:	b292      	uxth	r2, r2
   184f4:	e7f3      	b.n	184de <bt_gatt_attr_get_handle+0x36>
		return 0;
   184f6:	2000      	movs	r0, #0
}
   184f8:	4770      	bx	lr
				return handle;
   184fa:	4610      	mov	r0, r2
}
   184fc:	bcf0      	pop	{r4, r5, r6, r7}
   184fe:	4770      	bx	lr
   18500:	00024c90 	.word	0x00024c90
   18504:	00024ca0 	.word	0x00024ca0

00018508 <bt_gatt_foreach_attr_type>:
{
   18508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1850c:	b089      	sub	sp, #36	; 0x24
   1850e:	4607      	mov	r7, r0
   18510:	468a      	mov	sl, r1
   18512:	4690      	mov	r8, r2
   18514:	4699      	mov	r9, r3
   18516:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1851a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1851e:	b91b      	cbnz	r3, 18528 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   18520:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18524:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   18528:	4b19      	ldr	r3, [pc, #100]	; (18590 <bt_gatt_foreach_attr_type+0x88>)
   1852a:	881b      	ldrh	r3, [r3, #0]
   1852c:	42bb      	cmp	r3, r7
   1852e:	d22c      	bcs.n	1858a <bt_gatt_foreach_attr_type+0x82>
}
   18530:	b009      	add	sp, #36	; 0x24
   18532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   18536:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18538:	3608      	adds	r6, #8
   1853a:	4b16      	ldr	r3, [pc, #88]	; (18594 <bt_gatt_foreach_attr_type+0x8c>)
   1853c:	429e      	cmp	r6, r3
   1853e:	d2f7      	bcs.n	18530 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   18540:	6873      	ldr	r3, [r6, #4]
   18542:	18e2      	adds	r2, r4, r3
   18544:	42ba      	cmp	r2, r7
   18546:	d3f6      	bcc.n	18536 <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   18548:	2500      	movs	r5, #0
   1854a:	9707      	str	r7, [sp, #28]
   1854c:	6873      	ldr	r3, [r6, #4]
   1854e:	42ab      	cmp	r3, r5
   18550:	d919      	bls.n	18586 <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18552:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   18556:	f8cd b010 	str.w	fp, [sp, #16]
   1855a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1855c:	9303      	str	r3, [sp, #12]
   1855e:	ab12      	add	r3, sp, #72	; 0x48
   18560:	9302      	str	r3, [sp, #8]
   18562:	f8cd 9004 	str.w	r9, [sp, #4]
   18566:	f8cd 8000 	str.w	r8, [sp]
   1856a:	4653      	mov	r3, sl
   1856c:	9a07      	ldr	r2, [sp, #28]
   1856e:	4621      	mov	r1, r4
   18570:	6837      	ldr	r7, [r6, #0]
   18572:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   18576:	f009 fff3 	bl	22560 <gatt_foreach_iter>
   1857a:	2800      	cmp	r0, #0
   1857c:	d0d8      	beq.n	18530 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1857e:	3501      	adds	r5, #1
   18580:	3401      	adds	r4, #1
   18582:	b2a4      	uxth	r4, r4
   18584:	e7e2      	b.n	1854c <bt_gatt_foreach_attr_type+0x44>
   18586:	9f07      	ldr	r7, [sp, #28]
   18588:	e7d6      	b.n	18538 <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1858a:	4e03      	ldr	r6, [pc, #12]	; (18598 <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   1858c:	2401      	movs	r4, #1
   1858e:	e7d4      	b.n	1853a <bt_gatt_foreach_attr_type+0x32>
   18590:	200036b8 	.word	0x200036b8
   18594:	00024ca0 	.word	0x00024ca0
   18598:	00024c90 	.word	0x00024c90

0001859c <db_hash_gen>:
{
   1859c:	b510      	push	{r4, lr}
   1859e:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   185a0:	2300      	movs	r3, #0
   185a2:	9348      	str	r3, [sp, #288]	; 0x120
   185a4:	9349      	str	r3, [sp, #292]	; 0x124
   185a6:	934a      	str	r3, [sp, #296]	; 0x128
   185a8:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   185aa:	aa1c      	add	r2, sp, #112	; 0x70
   185ac:	a948      	add	r1, sp, #288	; 0x120
   185ae:	a804      	add	r0, sp, #16
   185b0:	f008 fabe 	bl	20b30 <tc_cmac_setup>
   185b4:	b190      	cbz	r0, 185dc <db_hash_gen+0x40>
   185b6:	ac04      	add	r4, sp, #16
   185b8:	9402      	str	r4, [sp, #8]
   185ba:	4b26      	ldr	r3, [pc, #152]	; (18654 <db_hash_gen+0xb8>)
   185bc:	9301      	str	r3, [sp, #4]
   185be:	2200      	movs	r2, #0
   185c0:	9200      	str	r2, [sp, #0]
   185c2:	4613      	mov	r3, r2
   185c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   185c8:	2001      	movs	r0, #1
   185ca:	f7ff ff9d 	bl	18508 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   185ce:	4621      	mov	r1, r4
   185d0:	4821      	ldr	r0, [pc, #132]	; (18658 <db_hash_gen+0xbc>)
   185d2:	f008 fb48 	bl	20c66 <tc_cmac_final>
   185d6:	b190      	cbz	r0, 185fe <db_hash_gen+0x62>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   185d8:	2300      	movs	r3, #0
   185da:	e029      	b.n	18630 <db_hash_gen+0x94>
   185dc:	4b1f      	ldr	r3, [pc, #124]	; (1865c <db_hash_gen+0xc0>)
   185de:	4a20      	ldr	r2, [pc, #128]	; (18660 <db_hash_gen+0xc4>)
   185e0:	1a9b      	subs	r3, r3, r2
   185e2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   185e4:	f04f 0100 	mov.w	r1, #0
   185e8:	2201      	movs	r2, #1
   185ea:	f362 0102 	bfi	r1, r2, #0, #3
   185ee:	f36f 01c5 	bfc	r1, #3, #3
   185f2:	f363 118f 	bfi	r1, r3, #6, #10
   185f6:	481b      	ldr	r0, [pc, #108]	; (18664 <db_hash_gen+0xc8>)
   185f8:	f7f8 feaa 	bl	11350 <log_0>
		return;
   185fc:	e027      	b.n	1864e <db_hash_gen+0xb2>
   185fe:	4b17      	ldr	r3, [pc, #92]	; (1865c <db_hash_gen+0xc0>)
   18600:	4a17      	ldr	r2, [pc, #92]	; (18660 <db_hash_gen+0xc4>)
   18602:	1a9b      	subs	r3, r3, r2
   18604:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   18606:	f04f 0100 	mov.w	r1, #0
   1860a:	2201      	movs	r2, #1
   1860c:	f362 0102 	bfi	r1, r2, #0, #3
   18610:	f36f 01c5 	bfc	r1, #3, #3
   18614:	f363 118f 	bfi	r1, r3, #6, #10
   18618:	4813      	ldr	r0, [pc, #76]	; (18668 <db_hash_gen+0xcc>)
   1861a:	f7f8 fe99 	bl	11350 <log_0>
		return;
   1861e:	e016      	b.n	1864e <db_hash_gen+0xb2>
		uint8_t tmp = ((uint8_t *)buf)[i];
   18620:	4a0d      	ldr	r2, [pc, #52]	; (18658 <db_hash_gen+0xbc>)
   18622:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   18624:	f1c3 010f 	rsb	r1, r3, #15
   18628:	5c54      	ldrb	r4, [r2, r1]
   1862a:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1862c:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   1862e:	3301      	adds	r3, #1
   18630:	2b07      	cmp	r3, #7
   18632:	d9f5      	bls.n	18620 <db_hash_gen+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18634:	4b0d      	ldr	r3, [pc, #52]	; (1866c <db_hash_gen+0xd0>)
   18636:	f3bf 8f5b 	dmb	ish
   1863a:	e853 2f00 	ldrex	r2, [r3]
   1863e:	f042 0204 	orr.w	r2, r2, #4
   18642:	e843 2100 	strex	r1, r2, [r3]
   18646:	2900      	cmp	r1, #0
   18648:	d1f7      	bne.n	1863a <db_hash_gen+0x9e>
   1864a:	f3bf 8f5b 	dmb	ish
}
   1864e:	b04c      	add	sp, #304	; 0x130
   18650:	bd10      	pop	{r4, pc}
   18652:	bf00      	nop
   18654:	000223c1 	.word	0x000223c1
   18658:	200019e8 	.word	0x200019e8
   1865c:	00024ce8 	.word	0x00024ce8
   18660:	00024ca0 	.word	0x00024ca0
   18664:	00026748 	.word	0x00026748
   18668:	00026764 	.word	0x00026764
   1866c:	20001aa0 	.word	0x20001aa0

00018670 <gatt_find_by_uuid>:
{
   18670:	b510      	push	{r4, lr}
   18672:	b084      	sub	sp, #16
   18674:	4604      	mov	r4, r0
   18676:	460a      	mov	r2, r1
	found->attr = NULL;
   18678:	2300      	movs	r3, #0
   1867a:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1867c:	9002      	str	r0, [sp, #8]
   1867e:	4907      	ldr	r1, [pc, #28]	; (1869c <gatt_find_by_uuid+0x2c>)
   18680:	9101      	str	r1, [sp, #4]
   18682:	2101      	movs	r1, #1
   18684:	9100      	str	r1, [sp, #0]
   18686:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1868a:	8880      	ldrh	r0, [r0, #4]
   1868c:	f7ff ff3c 	bl	18508 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   18690:	6820      	ldr	r0, [r4, #0]
}
   18692:	3800      	subs	r0, #0
   18694:	bf18      	it	ne
   18696:	2001      	movne	r0, #1
   18698:	b004      	add	sp, #16
   1869a:	bd10      	pop	{r4, pc}
   1869c:	000223b9 	.word	0x000223b9

000186a0 <gatt_indicate>:
{
   186a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   186a4:	b082      	sub	sp, #8
   186a6:	4606      	mov	r6, r0
   186a8:	460f      	mov	r7, r1
   186aa:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   186ac:	2214      	movs	r2, #20
   186ae:	6861      	ldr	r1, [r4, #4]
   186b0:	f00a f8dc 	bl	2286c <bt_gatt_check_perm>
   186b4:	bb80      	cbnz	r0, 18718 <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   186b6:	8aa5      	ldrh	r5, [r4, #20]
   186b8:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   186ba:	9500      	str	r5, [sp, #0]
   186bc:	231d      	movs	r3, #29
   186be:	2200      	movs	r2, #0
   186c0:	4621      	mov	r1, r4
   186c2:	482d      	ldr	r0, [pc, #180]	; (18778 <gatt_indicate+0xd8>)
   186c4:	f009 ff77 	bl	225b6 <gatt_req_alloc>
	if (!req) {
   186c8:	4680      	mov	r8, r0
   186ca:	2800      	cmp	r0, #0
   186cc:	d051      	beq.n	18772 <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   186ce:	462a      	mov	r2, r5
   186d0:	211d      	movs	r1, #29
   186d2:	4630      	mov	r0, r6
   186d4:	f7ff f95e 	bl	17994 <bt_att_create_pdu>
	if (!buf) {
   186d8:	4681      	mov	r9, r0
   186da:	b380      	cbz	r0, 1873e <gatt_indicate+0x9e>
   186dc:	f100 0a08 	add.w	sl, r0, #8
   186e0:	2102      	movs	r1, #2
   186e2:	4650      	mov	r0, sl
   186e4:	f00a fabe 	bl	22c64 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   186e8:	4605      	mov	r5, r0
   186ea:	f825 7b02 	strh.w	r7, [r5], #2
   186ee:	8aa1      	ldrh	r1, [r4, #20]
   186f0:	4650      	mov	r0, sl
   186f2:	f00a fab7 	bl	22c64 <net_buf_simple_add>
   186f6:	8aa2      	ldrh	r2, [r4, #20]
   186f8:	6921      	ldr	r1, [r4, #16]
   186fa:	4628      	mov	r0, r5
   186fc:	f00c f8fc 	bl	248f8 <memcpy>
	req->buf = buf;
   18700:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   18704:	4641      	mov	r1, r8
   18706:	4630      	mov	r0, r6
   18708:	f009 fdd0 	bl	222ac <bt_att_req_send>
	if (err) {
   1870c:	4604      	mov	r4, r0
   1870e:	bb60      	cbnz	r0, 1876a <gatt_indicate+0xca>
}
   18710:	4620      	mov	r0, r4
   18712:	b002      	add	sp, #8
   18714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18718:	4b18      	ldr	r3, [pc, #96]	; (1877c <gatt_indicate+0xdc>)
   1871a:	4a19      	ldr	r2, [pc, #100]	; (18780 <gatt_indicate+0xe0>)
   1871c:	1a9b      	subs	r3, r3, r2
   1871e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   18720:	f04f 0100 	mov.w	r1, #0
   18724:	2202      	movs	r2, #2
   18726:	f362 0102 	bfi	r1, r2, #0, #3
   1872a:	f36f 01c5 	bfc	r1, #3, #3
   1872e:	f363 118f 	bfi	r1, r3, #6, #10
   18732:	4814      	ldr	r0, [pc, #80]	; (18784 <gatt_indicate+0xe4>)
   18734:	f7f8 fe0c 	bl	11350 <log_0>
		return -EPERM;
   18738:	f04f 34ff 	mov.w	r4, #4294967295
   1873c:	e7e8      	b.n	18710 <gatt_indicate+0x70>
   1873e:	4b0f      	ldr	r3, [pc, #60]	; (1877c <gatt_indicate+0xdc>)
   18740:	4a0f      	ldr	r2, [pc, #60]	; (18780 <gatt_indicate+0xe0>)
   18742:	1a9b      	subs	r3, r3, r2
   18744:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   18746:	f04f 0100 	mov.w	r1, #0
   1874a:	2202      	movs	r2, #2
   1874c:	f362 0102 	bfi	r1, r2, #0, #3
   18750:	f36f 01c5 	bfc	r1, #3, #3
   18754:	f363 118f 	bfi	r1, r3, #6, #10
   18758:	480b      	ldr	r0, [pc, #44]	; (18788 <gatt_indicate+0xe8>)
   1875a:	f7f8 fdf9 	bl	11350 <log_0>
		bt_att_req_free(req);
   1875e:	4640      	mov	r0, r8
   18760:	f7ff fb60 	bl	17e24 <bt_att_req_free>
		return -ENOMEM;
   18764:	f06f 040b 	mvn.w	r4, #11
   18768:	e7d2      	b.n	18710 <gatt_indicate+0x70>
		bt_att_req_free(req);
   1876a:	4640      	mov	r0, r8
   1876c:	f7ff fb5a 	bl	17e24 <bt_att_req_free>
   18770:	e7ce      	b.n	18710 <gatt_indicate+0x70>
		return -ENOMEM;
   18772:	f06f 040b 	mvn.w	r4, #11
   18776:	e7cb      	b.n	18710 <gatt_indicate+0x70>
   18778:	00022397 	.word	0x00022397
   1877c:	00024ce8 	.word	0x00024ce8
   18780:	00024ca0 	.word	0x00024ca0
   18784:	00026780 	.word	0x00026780
   18788:	00026798 	.word	0x00026798

0001878c <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1878c:	f3bf 8f5b 	dmb	ish
   18790:	4b37      	ldr	r3, [pc, #220]	; (18870 <bt_gatt_indicate+0xe4>)
   18792:	681b      	ldr	r3, [r3, #0]
   18794:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18798:	f013 0f02 	tst.w	r3, #2
   1879c:	d05e      	beq.n	1885c <bt_gatt_indicate+0xd0>
{
   1879e:	b530      	push	{r4, r5, lr}
   187a0:	b08d      	sub	sp, #52	; 0x34
   187a2:	4605      	mov	r5, r0
   187a4:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   187a6:	b110      	cbz	r0, 187ae <bt_gatt_indicate+0x22>
   187a8:	7a83      	ldrb	r3, [r0, #10]
   187aa:	2b07      	cmp	r3, #7
   187ac:	d159      	bne.n	18862 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   187ae:	6860      	ldr	r0, [r4, #4]
   187b0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   187b2:	f7ff fe79 	bl	184a8 <bt_gatt_attr_get_handle>
   187b6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   187ba:	6821      	ldr	r1, [r4, #0]
   187bc:	b341      	cbz	r1, 18810 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   187be:	a805      	add	r0, sp, #20
   187c0:	f7ff ff56 	bl	18670 <gatt_find_by_uuid>
   187c4:	2800      	cmp	r0, #0
   187c6:	d04f      	beq.n	18868 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   187c8:	9b05      	ldr	r3, [sp, #20]
   187ca:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   187cc:	9b05      	ldr	r3, [sp, #20]
   187ce:	6818      	ldr	r0, [r3, #0]
   187d0:	2300      	movs	r3, #0
   187d2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   187d6:	f642 0303 	movw	r3, #10243	; 0x2803
   187da:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   187de:	a90b      	add	r1, sp, #44	; 0x2c
   187e0:	f008 fb2c 	bl	20e3c <bt_uuid_cmp>
   187e4:	b948      	cbnz	r0, 187fa <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   187e6:	9805      	ldr	r0, [sp, #20]
   187e8:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   187ea:	799b      	ldrb	r3, [r3, #6]
   187ec:	f013 0f20 	tst.w	r3, #32
   187f0:	d013      	beq.n	1881a <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   187f2:	f009 ffe0 	bl	227b6 <bt_gatt_attr_value_handle>
   187f6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   187fa:	b18d      	cbz	r5, 18820 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   187fc:	2301      	movs	r3, #1
   187fe:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   18800:	4622      	mov	r2, r4
   18802:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   18806:	4628      	mov	r0, r5
   18808:	f7ff ff4a 	bl	186a0 <gatt_indicate>
}
   1880c:	b00d      	add	sp, #52	; 0x34
   1880e:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   18810:	2800      	cmp	r0, #0
   18812:	d1db      	bne.n	187cc <bt_gatt_indicate+0x40>
			return -ENOENT;
   18814:	f06f 0001 	mvn.w	r0, #1
   18818:	e7f8      	b.n	1880c <bt_gatt_indicate+0x80>
			return -EINVAL;
   1881a:	f06f 0015 	mvn.w	r0, #21
   1881e:	e7f5      	b.n	1880c <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   18820:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   18824:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   18826:	2302      	movs	r3, #2
   18828:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1882c:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1882e:	2300      	movs	r3, #0
   18830:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18832:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   18836:	f642 1202 	movw	r2, #10498	; 0x2902
   1883a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1883e:	aa05      	add	r2, sp, #20
   18840:	9202      	str	r2, [sp, #8]
   18842:	4a0c      	ldr	r2, [pc, #48]	; (18874 <bt_gatt_indicate+0xe8>)
   18844:	9201      	str	r2, [sp, #4]
   18846:	2201      	movs	r2, #1
   18848:	9200      	str	r2, [sp, #0]
   1884a:	aa0a      	add	r2, sp, #40	; 0x28
   1884c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18850:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   18854:	f7ff fe58 	bl	18508 <bt_gatt_foreach_attr_type>
	return data.err;
   18858:	9807      	ldr	r0, [sp, #28]
   1885a:	e7d7      	b.n	1880c <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1885c:	f06f 000a 	mvn.w	r0, #10
}
   18860:	4770      	bx	lr
		return -ENOTCONN;
   18862:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18866:	e7d1      	b.n	1880c <bt_gatt_indicate+0x80>
			return -ENOENT;
   18868:	f06f 0001 	mvn.w	r0, #1
   1886c:	e7ce      	b.n	1880c <bt_gatt_indicate+0x80>
   1886e:	bf00      	nop
   18870:	20000374 	.word	0x20000374
   18874:	00018a41 	.word	0x00018a41

00018878 <sc_process>:
{
   18878:	b510      	push	{r4, lr}
   1887a:	b082      	sub	sp, #8
   1887c:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1887e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   18882:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   18886:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1888a:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1888e:	f1a0 0120 	sub.w	r1, r0, #32
   18892:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18896:	f3bf 8f5b 	dmb	ish
   1889a:	e854 2f00 	ldrex	r2, [r4]
   1889e:	f022 0201 	bic.w	r2, r2, #1
   188a2:	e844 2000 	strex	r0, r2, [r4]
   188a6:	2800      	cmp	r0, #0
   188a8:	d1f7      	bne.n	1889a <sc_process+0x22>
   188aa:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   188ae:	2000      	movs	r0, #0
   188b0:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   188b4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   188b8:	4a0e      	ldr	r2, [pc, #56]	; (188f4 <sc_process+0x7c>)
   188ba:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   188be:	4a0e      	ldr	r2, [pc, #56]	; (188f8 <sc_process+0x80>)
   188c0:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   188c4:	aa01      	add	r2, sp, #4
   188c6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   188ca:	2204      	movs	r2, #4
   188cc:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   188d0:	f7ff ff5c 	bl	1878c <bt_gatt_indicate>
   188d4:	b108      	cbz	r0, 188da <sc_process+0x62>
}
   188d6:	b002      	add	sp, #8
   188d8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   188da:	f3bf 8f5b 	dmb	ish
   188de:	e854 3f00 	ldrex	r3, [r4]
   188e2:	f043 0302 	orr.w	r3, r3, #2
   188e6:	e844 3200 	strex	r2, r3, [r4]
   188ea:	2a00      	cmp	r2, #0
   188ec:	d1f7      	bne.n	188de <sc_process+0x66>
   188ee:	f3bf 8f5b 	dmb	ish
   188f2:	e7f0      	b.n	188d6 <sc_process+0x5e>
   188f4:	00026858 	.word	0x00026858
   188f8:	000180cd 	.word	0x000180cd

000188fc <sc_restore>:
{
   188fc:	b510      	push	{r4, lr}
   188fe:	b082      	sub	sp, #8
   18900:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18902:	f100 0188 	add.w	r1, r0, #136	; 0x88
   18906:	7a00      	ldrb	r0, [r0, #8]
   18908:	f7ff fb8c 	bl	18024 <find_sc_cfg>
	if (!cfg) {
   1890c:	b1f0      	cbz	r0, 1894c <sc_restore+0x50>
   1890e:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   18910:	8902      	ldrh	r2, [r0, #8]
   18912:	b90a      	cbnz	r2, 18918 <sc_restore+0x1c>
   18914:	8941      	ldrh	r1, [r0, #10]
   18916:	b1c9      	cbz	r1, 1894c <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   18918:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1891c:	895b      	ldrh	r3, [r3, #10]
   1891e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   18922:	4620      	mov	r0, r4
   18924:	f7fd fec6 	bl	166b4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18928:	4912      	ldr	r1, [pc, #72]	; (18974 <sc_restore+0x78>)
   1892a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1892e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18932:	4a11      	ldr	r2, [pc, #68]	; (18978 <sc_restore+0x7c>)
   18934:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   18936:	4a11      	ldr	r2, [pc, #68]	; (1897c <sc_restore+0x80>)
   18938:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1893a:	aa01      	add	r2, sp, #4
   1893c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1893e:	2204      	movs	r2, #4
   18940:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18942:	4619      	mov	r1, r3
   18944:	4620      	mov	r0, r4
   18946:	f7ff ff21 	bl	1878c <bt_gatt_indicate>
   1894a:	b908      	cbnz	r0, 18950 <sc_restore+0x54>
}
   1894c:	b002      	add	sp, #8
   1894e:	bd10      	pop	{r4, pc}
   18950:	4b0b      	ldr	r3, [pc, #44]	; (18980 <sc_restore+0x84>)
   18952:	4a0c      	ldr	r2, [pc, #48]	; (18984 <sc_restore+0x88>)
   18954:	1a9b      	subs	r3, r3, r2
   18956:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   18958:	f04f 0100 	mov.w	r1, #0
   1895c:	2201      	movs	r2, #1
   1895e:	f362 0102 	bfi	r1, r2, #0, #3
   18962:	f36f 01c5 	bfc	r1, #3, #3
   18966:	f363 118f 	bfi	r1, r3, #6, #10
   1896a:	4807      	ldr	r0, [pc, #28]	; (18988 <sc_restore+0x8c>)
   1896c:	f7f8 fcf0 	bl	11350 <log_0>
   18970:	e7ec      	b.n	1894c <sc_restore+0x50>
   18972:	bf00      	nop
   18974:	20002678 	.word	0x20002678
   18978:	00026858 	.word	0x00026858
   1897c:	00022519 	.word	0x00022519
   18980:	00024ce8 	.word	0x00024ce8
   18984:	00024ca0 	.word	0x00024ca0
   18988:	000267c0 	.word	0x000267c0

0001898c <gatt_notify>:
{
   1898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18990:	4606      	mov	r6, r0
   18992:	460f      	mov	r7, r1
   18994:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   18996:	2214      	movs	r2, #20
   18998:	6861      	ldr	r1, [r4, #4]
   1899a:	f009 ff67 	bl	2286c <bt_gatt_check_perm>
   1899e:	bb08      	cbnz	r0, 189e4 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   189a0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   189a2:	3202      	adds	r2, #2
   189a4:	211b      	movs	r1, #27
   189a6:	4630      	mov	r0, r6
   189a8:	f7fe fff4 	bl	17994 <bt_att_create_pdu>
	if (!buf) {
   189ac:	4680      	mov	r8, r0
   189ae:	b360      	cbz	r0, 18a0a <gatt_notify+0x7e>
   189b0:	f100 0908 	add.w	r9, r0, #8
   189b4:	2102      	movs	r1, #2
   189b6:	4648      	mov	r0, r9
   189b8:	f00a f954 	bl	22c64 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   189bc:	4605      	mov	r5, r0
   189be:	f825 7b02 	strh.w	r7, [r5], #2
   189c2:	89a1      	ldrh	r1, [r4, #12]
   189c4:	4648      	mov	r0, r9
   189c6:	f00a f94d 	bl	22c64 <net_buf_simple_add>
   189ca:	89a2      	ldrh	r2, [r4, #12]
   189cc:	68a1      	ldr	r1, [r4, #8]
   189ce:	4628      	mov	r0, r5
   189d0:	f00b ff92 	bl	248f8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   189d4:	6963      	ldr	r3, [r4, #20]
   189d6:	6922      	ldr	r2, [r4, #16]
   189d8:	4641      	mov	r1, r8
   189da:	4630      	mov	r0, r6
   189dc:	f009 fc41 	bl	22262 <bt_att_send>
}
   189e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   189e4:	4b12      	ldr	r3, [pc, #72]	; (18a30 <gatt_notify+0xa4>)
   189e6:	4a13      	ldr	r2, [pc, #76]	; (18a34 <gatt_notify+0xa8>)
   189e8:	1a9b      	subs	r3, r3, r2
   189ea:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   189ec:	f04f 0100 	mov.w	r1, #0
   189f0:	2202      	movs	r2, #2
   189f2:	f362 0102 	bfi	r1, r2, #0, #3
   189f6:	f36f 01c5 	bfc	r1, #3, #3
   189fa:	f363 118f 	bfi	r1, r3, #6, #10
   189fe:	480e      	ldr	r0, [pc, #56]	; (18a38 <gatt_notify+0xac>)
   18a00:	f7f8 fca6 	bl	11350 <log_0>
		return -EPERM;
   18a04:	f04f 30ff 	mov.w	r0, #4294967295
   18a08:	e7ea      	b.n	189e0 <gatt_notify+0x54>
   18a0a:	4b09      	ldr	r3, [pc, #36]	; (18a30 <gatt_notify+0xa4>)
   18a0c:	4a09      	ldr	r2, [pc, #36]	; (18a34 <gatt_notify+0xa8>)
   18a0e:	1a9b      	subs	r3, r3, r2
   18a10:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   18a12:	f04f 0100 	mov.w	r1, #0
   18a16:	2202      	movs	r2, #2
   18a18:	f362 0102 	bfi	r1, r2, #0, #3
   18a1c:	f36f 01c5 	bfc	r1, #3, #3
   18a20:	f363 118f 	bfi	r1, r3, #6, #10
   18a24:	4805      	ldr	r0, [pc, #20]	; (18a3c <gatt_notify+0xb0>)
   18a26:	f7f8 fc93 	bl	11350 <log_0>
		return -ENOMEM;
   18a2a:	f06f 000b 	mvn.w	r0, #11
   18a2e:	e7d7      	b.n	189e0 <gatt_notify+0x54>
   18a30:	00024ce8 	.word	0x00024ce8
   18a34:	00024ca0 	.word	0x00024ca0
   18a38:	00026780 	.word	0x00026780
   18a3c:	000267e0 	.word	0x000267e0

00018a40 <notify_cb>:
{
   18a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a44:	b083      	sub	sp, #12
   18a46:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18a48:	6882      	ldr	r2, [r0, #8]
   18a4a:	4b50      	ldr	r3, [pc, #320]	; (18b8c <notify_cb+0x14c>)
   18a4c:	429a      	cmp	r2, r3
   18a4e:	d005      	beq.n	18a5c <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   18a50:	f04f 0a01 	mov.w	sl, #1
}
   18a54:	4650      	mov	r0, sl
   18a56:	b003      	add	sp, #12
   18a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a5c:	4607      	mov	r7, r0
	ccc = attr->user_data;
   18a5e:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18a60:	4b4b      	ldr	r3, [pc, #300]	; (18b90 <notify_cb+0x150>)
   18a62:	429d      	cmp	r5, r3
   18a64:	d031      	beq.n	18aca <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18a66:	2400      	movs	r4, #0
   18a68:	e05c      	b.n	18b24 <notify_cb+0xe4>
				sc = (struct sc_data *)data->ind_params->data;
   18a6a:	6933      	ldr	r3, [r6, #16]
   18a6c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   18a6e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18a72:	8853      	ldrh	r3, [r2, #2]
   18a74:	8812      	ldrh	r2, [r2, #0]
   18a76:	4649      	mov	r1, r9
   18a78:	f8df c118 	ldr.w	ip, [pc, #280]	; 18b94 <notify_cb+0x154>
   18a7c:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   18a80:	f7ff fc22 	bl	182c8 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18a84:	3401      	adds	r4, #1
   18a86:	2c00      	cmp	r4, #0
   18a88:	d1ed      	bne.n	18a66 <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   18a8a:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   18a8e:	4b41      	ldr	r3, [pc, #260]	; (18b94 <notify_cb+0x154>)
   18a90:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   18a94:	f109 0901 	add.w	r9, r9, #1
   18a98:	2300      	movs	r3, #0
   18a9a:	9300      	str	r3, [sp, #0]
   18a9c:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   18aa0:	2207      	movs	r2, #7
   18aa2:	4669      	mov	r1, sp
   18aa4:	4648      	mov	r0, r9
   18aa6:	f00b ff19 	bl	248dc <memcmp>
   18aaa:	2800      	cmp	r0, #0
   18aac:	d0ea      	beq.n	18a84 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   18aae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18ab2:	2207      	movs	r2, #7
   18ab4:	4649      	mov	r1, r9
   18ab6:	4837      	ldr	r0, [pc, #220]	; (18b94 <notify_cb+0x154>)
   18ab8:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   18abc:	f7fd fee2 	bl	16884 <bt_conn_lookup_state_le>
			if (!conn) {
   18ac0:	2800      	cmp	r0, #0
   18ac2:	d0d2      	beq.n	18a6a <notify_cb+0x2a>
			bt_conn_unref(conn);
   18ac4:	f008 fcd9 	bl	2147a <bt_conn_unref>
   18ac8:	e7dc      	b.n	18a84 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18aca:	2400      	movs	r4, #0
   18acc:	e7db      	b.n	18a86 <notify_cb+0x46>
			bt_conn_unref(conn);
   18ace:	f008 fcd4 	bl	2147a <bt_conn_unref>
			continue;
   18ad2:	e026      	b.n	18b22 <notify_cb+0xe2>
			bt_conn_unref(conn);
   18ad4:	4648      	mov	r0, r9
   18ad6:	f008 fcd0 	bl	2147a <bt_conn_unref>
			continue;
   18ada:	e022      	b.n	18b22 <notify_cb+0xe2>
   18adc:	4b2e      	ldr	r3, [pc, #184]	; (18b98 <notify_cb+0x158>)
   18ade:	4a2f      	ldr	r2, [pc, #188]	; (18b9c <notify_cb+0x15c>)
   18ae0:	1a9b      	subs	r3, r3, r2
   18ae2:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   18ae4:	2202      	movs	r2, #2
   18ae6:	f362 0802 	bfi	r8, r2, #0, #3
   18aea:	f36f 08c5 	bfc	r8, #3, #3
   18aee:	f363 188f 	bfi	r8, r3, #6, #10
   18af2:	4641      	mov	r1, r8
   18af4:	482a      	ldr	r0, [pc, #168]	; (18ba0 <notify_cb+0x160>)
   18af6:	f7f8 fc2b 	bl	11350 <log_0>
			continue;
   18afa:	e012      	b.n	18b22 <notify_cb+0xe2>
			err = gatt_indicate(conn, data->handle,
   18afc:	6932      	ldr	r2, [r6, #16]
   18afe:	88b1      	ldrh	r1, [r6, #4]
   18b00:	4648      	mov	r0, r9
   18b02:	f7ff fdcd 	bl	186a0 <gatt_indicate>
			if (err == 0) {
   18b06:	4683      	mov	fp, r0
   18b08:	b918      	cbnz	r0, 18b12 <notify_cb+0xd2>
				data->ind_params->_ref++;
   18b0a:	6932      	ldr	r2, [r6, #16]
   18b0c:	7d93      	ldrb	r3, [r2, #22]
   18b0e:	3301      	adds	r3, #1
   18b10:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18b12:	4648      	mov	r0, r9
   18b14:	f008 fcb1 	bl	2147a <bt_conn_unref>
		if (err < 0) {
   18b18:	f1bb 0f00 	cmp.w	fp, #0
   18b1c:	db9a      	blt.n	18a54 <notify_cb+0x14>
		data->err = 0;
   18b1e:	2300      	movs	r3, #0
   18b20:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18b22:	3401      	adds	r4, #1
   18b24:	bb74      	cbnz	r4, 18b84 <notify_cb+0x144>
		if (cfg->value != data->type) {
   18b26:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18b2a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   18b2e:	891a      	ldrh	r2, [r3, #8]
   18b30:	89b3      	ldrh	r3, [r6, #12]
   18b32:	429a      	cmp	r2, r3
   18b34:	d1f5      	bne.n	18b22 <notify_cb+0xe2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18b36:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18b3a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   18b3e:	3101      	adds	r1, #1
   18b40:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   18b44:	f7fd fe78 	bl	16838 <bt_conn_lookup_addr_le>
		if (!conn) {
   18b48:	4681      	mov	r9, r0
   18b4a:	2800      	cmp	r0, #0
   18b4c:	d0e9      	beq.n	18b22 <notify_cb+0xe2>
		if (conn->state != BT_CONN_CONNECTED) {
   18b4e:	7a83      	ldrb	r3, [r0, #10]
   18b50:	2b07      	cmp	r3, #7
   18b52:	d1bc      	bne.n	18ace <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18b54:	696b      	ldr	r3, [r5, #20]
   18b56:	b11b      	cbz	r3, 18b60 <notify_cb+0x120>
   18b58:	4639      	mov	r1, r7
   18b5a:	4798      	blx	r3
   18b5c:	2800      	cmp	r0, #0
   18b5e:	d0b9      	beq.n	18ad4 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   18b60:	2214      	movs	r2, #20
   18b62:	4639      	mov	r1, r7
   18b64:	4648      	mov	r0, r9
   18b66:	f009 fe81 	bl	2286c <bt_gatt_check_perm>
   18b6a:	4682      	mov	sl, r0
   18b6c:	2800      	cmp	r0, #0
   18b6e:	d1b5      	bne.n	18adc <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   18b70:	89b3      	ldrh	r3, [r6, #12]
   18b72:	2b02      	cmp	r3, #2
   18b74:	d0c2      	beq.n	18afc <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18b76:	6932      	ldr	r2, [r6, #16]
   18b78:	88b1      	ldrh	r1, [r6, #4]
   18b7a:	4648      	mov	r0, r9
   18b7c:	f7ff ff06 	bl	1898c <gatt_notify>
   18b80:	4683      	mov	fp, r0
   18b82:	e7c6      	b.n	18b12 <notify_cb+0xd2>
	return BT_GATT_ITER_CONTINUE;
   18b84:	f04f 0a01 	mov.w	sl, #1
   18b88:	e764      	b.n	18a54 <notify_cb+0x14>
   18b8a:	bf00      	nop
   18b8c:	0001835d 	.word	0x0001835d
   18b90:	20000524 	.word	0x20000524
   18b94:	2000266c 	.word	0x2000266c
   18b98:	00024ce8 	.word	0x00024ce8
   18b9c:	00024ca0 	.word	0x00024ca0
   18ba0:	00026780 	.word	0x00026780

00018ba4 <update_ccc>:
{
   18ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
   18ba8:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   18baa:	6882      	ldr	r2, [r0, #8]
   18bac:	4b20      	ldr	r3, [pc, #128]	; (18c30 <update_ccc+0x8c>)
   18bae:	429a      	cmp	r2, r3
   18bb0:	d002      	beq.n	18bb8 <update_ccc+0x14>
}
   18bb2:	2001      	movs	r0, #1
   18bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18bb8:	4604      	mov	r4, r0
	ccc = attr->user_data;
   18bba:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18bbe:	2500      	movs	r5, #0
   18bc0:	2d00      	cmp	r5, #0
   18bc2:	d1f6      	bne.n	18bb2 <update_ccc+0xe>
		if (!cfg->value ||
   18bc4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   18bc8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   18bcc:	891b      	ldrh	r3, [r3, #8]
   18bce:	b36b      	cbz	r3, 18c2c <update_ccc+0x88>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18bd0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   18bd4:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   18bd8:	3201      	adds	r2, #1
   18bda:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   18bde:	4638      	mov	r0, r7
   18be0:	f008 fc8e 	bl	21500 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   18be4:	b310      	cbz	r0, 18c2c <update_ccc+0x88>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18be6:	222a      	movs	r2, #42	; 0x2a
   18be8:	4621      	mov	r1, r4
   18bea:	4638      	mov	r0, r7
   18bec:	f009 fe3e 	bl	2286c <bt_gatt_check_perm>
		if (err) {
   18bf0:	b108      	cbz	r0, 18bf6 <update_ccc+0x52>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   18bf2:	2803      	cmp	r0, #3
   18bf4:	d00a      	beq.n	18c0c <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   18bf6:	4641      	mov	r1, r8
   18bf8:	4620      	mov	r0, r4
   18bfa:	f009 fbb4 	bl	22366 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   18bfe:	4b0d      	ldr	r3, [pc, #52]	; (18c34 <update_ccc+0x90>)
   18c00:	4598      	cmp	r8, r3
   18c02:	d1d6      	bne.n	18bb2 <update_ccc+0xe>
			sc_restore(conn);
   18c04:	4638      	mov	r0, r7
   18c06:	f7ff fe79 	bl	188fc <sc_restore>
   18c0a:	e7d2      	b.n	18bb2 <update_ccc+0xe>
   18c0c:	4b0a      	ldr	r3, [pc, #40]	; (18c38 <update_ccc+0x94>)
   18c0e:	4a0b      	ldr	r2, [pc, #44]	; (18c3c <update_ccc+0x98>)
   18c10:	1a9b      	subs	r3, r3, r2
   18c12:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   18c14:	2202      	movs	r2, #2
   18c16:	f362 0602 	bfi	r6, r2, #0, #3
   18c1a:	f36f 06c5 	bfc	r6, #3, #3
   18c1e:	f363 168f 	bfi	r6, r3, #6, #10
   18c22:	4632      	mov	r2, r6
   18c24:	4621      	mov	r1, r4
   18c26:	4806      	ldr	r0, [pc, #24]	; (18c40 <update_ccc+0x9c>)
   18c28:	f7f8 fadc 	bl	111e4 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18c2c:	3501      	adds	r5, #1
   18c2e:	e7c7      	b.n	18bc0 <update_ccc+0x1c>
   18c30:	0001835d 	.word	0x0001835d
   18c34:	20000524 	.word	0x20000524
   18c38:	00024ce8 	.word	0x00024ce8
   18c3c:	00024ca0 	.word	0x00024ca0
   18c40:	0002680c 	.word	0x0002680c

00018c44 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   18c44:	b500      	push	{lr}
   18c46:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   18c48:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   18c4a:	2001      	movs	r0, #1
   18c4c:	f88d 0014 	strb.w	r0, [sp, #20]
   18c50:	ab04      	add	r3, sp, #16
   18c52:	9302      	str	r3, [sp, #8]
   18c54:	4b05      	ldr	r3, [pc, #20]	; (18c6c <bt_gatt_connected+0x28>)
   18c56:	9301      	str	r3, [sp, #4]
   18c58:	2200      	movs	r2, #0
   18c5a:	9200      	str	r2, [sp, #0]
   18c5c:	4613      	mov	r3, r2
   18c5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18c62:	f7ff fc51 	bl	18508 <bt_gatt_foreach_attr_type>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   18c66:	b007      	add	sp, #28
   18c68:	f85d fb04 	ldr.w	pc, [sp], #4
   18c6c:	00018ba5 	.word	0x00018ba5

00018c70 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   18c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c72:	4605      	mov	r5, r0
   18c74:	460e      	mov	r6, r1
   18c76:	4617      	mov	r7, r2
	return list->head;
   18c78:	4b0a      	ldr	r3, [pc, #40]	; (18ca4 <bt_gatt_att_max_mtu_changed+0x34>)
   18c7a:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18c7c:	b134      	cbz	r4, 18c8c <bt_gatt_att_max_mtu_changed+0x1c>
   18c7e:	3c04      	subs	r4, #4
   18c80:	e004      	b.n	18c8c <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18c82:	1d23      	adds	r3, r4, #4
   18c84:	d00b      	beq.n	18c9e <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   18c86:	6864      	ldr	r4, [r4, #4]
   18c88:	b15c      	cbz	r4, 18ca2 <bt_gatt_att_max_mtu_changed+0x32>
   18c8a:	3c04      	subs	r4, #4
   18c8c:	b14c      	cbz	r4, 18ca2 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   18c8e:	6823      	ldr	r3, [r4, #0]
   18c90:	2b00      	cmp	r3, #0
   18c92:	d0f6      	beq.n	18c82 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   18c94:	463a      	mov	r2, r7
   18c96:	4631      	mov	r1, r6
   18c98:	4628      	mov	r0, r5
   18c9a:	4798      	blx	r3
   18c9c:	e7f1      	b.n	18c82 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18c9e:	461c      	mov	r4, r3
   18ca0:	e7f4      	b.n	18c8c <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   18ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ca4:	20002650 	.word	0x20002650

00018ca8 <db_hash_read>:
{
   18ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18caa:	b085      	sub	sp, #20
   18cac:	4604      	mov	r4, r0
   18cae:	460d      	mov	r5, r1
   18cb0:	4616      	mov	r6, r2
   18cb2:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18cb4:	4812      	ldr	r0, [pc, #72]	; (18d00 <db_hash_read+0x58>)
   18cb6:	f100 0140 	add.w	r1, r0, #64	; 0x40
   18cba:	3010      	adds	r0, #16
   18cbc:	f00b faa8 	bl	24210 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18cc0:	f3bf 8f5b 	dmb	ish
   18cc4:	4b0f      	ldr	r3, [pc, #60]	; (18d04 <db_hash_read+0x5c>)
   18cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   18cc8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   18ccc:	f013 0f04 	tst.w	r3, #4
   18cd0:	d012      	beq.n	18cf8 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   18cd2:	2101      	movs	r1, #1
   18cd4:	4620      	mov	r0, r4
   18cd6:	f009 fdf5 	bl	228c4 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   18cda:	2310      	movs	r3, #16
   18cdc:	9302      	str	r3, [sp, #8]
   18cde:	4b08      	ldr	r3, [pc, #32]	; (18d00 <db_hash_read+0x58>)
   18ce0:	9301      	str	r3, [sp, #4]
   18ce2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18ce6:	9300      	str	r3, [sp, #0]
   18ce8:	463b      	mov	r3, r7
   18cea:	4632      	mov	r2, r6
   18cec:	4629      	mov	r1, r5
   18cee:	4620      	mov	r0, r4
   18cf0:	f009 fcc2 	bl	22678 <bt_gatt_attr_read>
}
   18cf4:	b005      	add	sp, #20
   18cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   18cf8:	2001      	movs	r0, #1
   18cfa:	f7ff fc4f 	bl	1859c <db_hash_gen>
   18cfe:	e7e8      	b.n	18cd2 <db_hash_read+0x2a>
   18d00:	200019e8 	.word	0x200019e8
   18d04:	20001a50 	.word	0x20001a50

00018d08 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18d08:	b510      	push	{r4, lr}
   18d0a:	b084      	sub	sp, #16
   18d0c:	4604      	mov	r4, r0
   18d0e:	9002      	str	r0, [sp, #8]
   18d10:	4b07      	ldr	r3, [pc, #28]	; (18d30 <bt_gatt_disconnected+0x28>)
   18d12:	9301      	str	r3, [sp, #4]
   18d14:	2200      	movs	r2, #0
   18d16:	9200      	str	r2, [sp, #0]
   18d18:	4613      	mov	r3, r2
   18d1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18d1e:	2001      	movs	r0, #1
   18d20:	f7ff fbf2 	bl	18508 <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   18d24:	4620      	mov	r0, r4
   18d26:	f009 fc71 	bl	2260c <remove_cf_cfg>
#endif
}
   18d2a:	b004      	add	sp, #16
   18d2c:	bd10      	pop	{r4, pc}
   18d2e:	bf00      	nop
   18d30:	00018141 	.word	0x00018141

00018d34 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18d34:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18d36:	2300      	movs	r3, #0
   18d38:	2b00      	cmp	r3, #0
   18d3a:	dd13      	ble.n	18d64 <bt_smp_accept+0x30>
   18d3c:	4b12      	ldr	r3, [pc, #72]	; (18d88 <bt_smp_accept+0x54>)
   18d3e:	4a13      	ldr	r2, [pc, #76]	; (18d8c <bt_smp_accept+0x58>)
   18d40:	1a9b      	subs	r3, r3, r2
   18d42:	08db      	lsrs	r3, r3, #3
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   18d44:	f04f 0200 	mov.w	r2, #0
   18d48:	2101      	movs	r1, #1
   18d4a:	f361 0202 	bfi	r2, r1, #0, #3
   18d4e:	f36f 02c5 	bfc	r2, #3, #3
   18d52:	f363 128f 	bfi	r2, r3, #6, #10
   18d56:	4601      	mov	r1, r0
   18d58:	480d      	ldr	r0, [pc, #52]	; (18d90 <bt_smp_accept+0x5c>)
   18d5a:	f7f8 fa43 	bl	111e4 <log_1>

	return -ENOMEM;
   18d5e:	f06f 000b 	mvn.w	r0, #11
}
   18d62:	bd10      	pop	{r4, pc}
		if (smp->chan.conn) {
   18d64:	22e8      	movs	r2, #232	; 0xe8
   18d66:	fb02 f203 	mul.w	r2, r2, r3
   18d6a:	4c0a      	ldr	r4, [pc, #40]	; (18d94 <bt_smp_accept+0x60>)
   18d6c:	58a2      	ldr	r2, [r4, r2]
   18d6e:	b10a      	cbz	r2, 18d74 <bt_smp_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18d70:	3301      	adds	r3, #1
   18d72:	e7e1      	b.n	18d38 <bt_smp_accept+0x4>
		smp->chan.ops = &ops;
   18d74:	4a07      	ldr	r2, [pc, #28]	; (18d94 <bt_smp_accept+0x60>)
   18d76:	20e8      	movs	r0, #232	; 0xe8
   18d78:	fb00 2303 	mla	r3, r0, r3, r2
   18d7c:	4a06      	ldr	r2, [pc, #24]	; (18d98 <bt_smp_accept+0x64>)
   18d7e:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   18d80:	600b      	str	r3, [r1, #0]
		return 0;
   18d82:	2000      	movs	r0, #0
   18d84:	e7ed      	b.n	18d62 <bt_smp_accept+0x2e>
   18d86:	bf00      	nop
   18d88:	00024d20 	.word	0x00024d20
   18d8c:	00024ca0 	.word	0x00024ca0
   18d90:	00026934 	.word	0x00026934
   18d94:	20001aa8 	.word	0x20001aa8
   18d98:	00026964 	.word	0x00026964

00018d9c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   18d9c:	4b03      	ldr	r3, [pc, #12]	; (18dac <pool_id+0x10>)
   18d9e:	1ac0      	subs	r0, r0, r3
   18da0:	1080      	asrs	r0, r0, #2
}
   18da2:	4b03      	ldr	r3, [pc, #12]	; (18db0 <pool_id+0x14>)
   18da4:	fb03 f000 	mul.w	r0, r3, r0
   18da8:	4770      	bx	lr
   18daa:	bf00      	nop
   18dac:	200007c8 	.word	0x200007c8
   18db0:	ba2e8ba3 	.word	0xba2e8ba3

00018db4 <net_buf_pool_get>:
}
   18db4:	222c      	movs	r2, #44	; 0x2c
   18db6:	4b02      	ldr	r3, [pc, #8]	; (18dc0 <net_buf_pool_get+0xc>)
   18db8:	fb02 3000 	mla	r0, r2, r0, r3
   18dbc:	4770      	bx	lr
   18dbe:	bf00      	nop
   18dc0:	200007c8 	.word	0x200007c8

00018dc4 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   18dc4:	4800      	ldr	r0, [pc, #0]	; (18dc8 <get_hf_flags+0x4>)
   18dc6:	4770      	bx	lr
   18dc8:	200026e4 	.word	0x200026e4

00018dcc <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   18dcc:	4b03      	ldr	r3, [pc, #12]	; (18ddc <get_subsys+0x10>)
   18dce:	1ac0      	subs	r0, r0, r3
   18dd0:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   18dd2:	4b03      	ldr	r3, [pc, #12]	; (18de0 <get_subsys+0x14>)
   18dd4:	fb03 f000 	mul.w	r0, r3, r0
   18dd8:	4770      	bx	lr
   18dda:	bf00      	nop
   18ddc:	200026a4 	.word	0x200026a4
   18de0:	b6db6db7 	.word	0xb6db6db7

00018de4 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   18de4:	b538      	push	{r3, r4, r5, lr}
   18de6:	4605      	mov	r5, r0
   18de8:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18dea:	f7ff ffef 	bl	18dcc <get_subsys>
   18dee:	4601      	mov	r1, r0
   18df0:	2240      	movs	r2, #64	; 0x40
   18df2:	4803      	ldr	r0, [pc, #12]	; (18e00 <onoff_stop+0x1c>)
   18df4:	f009 fff5 	bl	22de2 <stop>
   18df8:	4601      	mov	r1, r0
	notify(mgr, res);
   18dfa:	4628      	mov	r0, r5
   18dfc:	47a0      	blx	r4
}
   18dfe:	bd38      	pop	{r3, r4, r5, pc}
   18e00:	00024a44 	.word	0x00024a44

00018e04 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   18e04:	b530      	push	{r4, r5, lr}
   18e06:	b083      	sub	sp, #12
   18e08:	4605      	mov	r5, r0
   18e0a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18e0c:	f7ff ffde 	bl	18dcc <get_subsys>
   18e10:	4601      	mov	r1, r0
   18e12:	2340      	movs	r3, #64	; 0x40
   18e14:	9300      	str	r3, [sp, #0]
   18e16:	4623      	mov	r3, r4
   18e18:	4a05      	ldr	r2, [pc, #20]	; (18e30 <onoff_start+0x2c>)
   18e1a:	4806      	ldr	r0, [pc, #24]	; (18e34 <onoff_start+0x30>)
   18e1c:	f009 fffb 	bl	22e16 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   18e20:	1e01      	subs	r1, r0, #0
   18e22:	db01      	blt.n	18e28 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   18e24:	b003      	add	sp, #12
   18e26:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   18e28:	4628      	mov	r0, r5
   18e2a:	47a0      	blx	r4
}
   18e2c:	e7fa      	b.n	18e24 <onoff_start+0x20>
   18e2e:	bf00      	nop
   18e30:	00022e5f 	.word	0x00022e5f
   18e34:	00024a44 	.word	0x00024a44

00018e38 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   18e38:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   18e3a:	b110      	cbz	r0, 18e42 <clock_event_handler+0xa>
   18e3c:	2801      	cmp	r0, #1
   18e3e:	d00d      	beq.n	18e5c <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   18e40:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   18e42:	2100      	movs	r1, #0
   18e44:	4808      	ldr	r0, [pc, #32]	; (18e68 <clock_event_handler+0x30>)
   18e46:	f009 ff53 	bl	22cf0 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   18e4a:	6883      	ldr	r3, [r0, #8]
   18e4c:	f013 0f07 	tst.w	r3, #7
   18e50:	d1f6      	bne.n	18e40 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   18e52:	2100      	movs	r1, #0
   18e54:	4804      	ldr	r0, [pc, #16]	; (18e68 <clock_event_handler+0x30>)
   18e56:	f009 ffb2 	bl	22dbe <clkstarted_handle>
   18e5a:	e7f1      	b.n	18e40 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18e5c:	2101      	movs	r1, #1
   18e5e:	4802      	ldr	r0, [pc, #8]	; (18e68 <clock_event_handler+0x30>)
   18e60:	f009 ffad 	bl	22dbe <clkstarted_handle>
}
   18e64:	e7ec      	b.n	18e40 <clock_event_handler+0x8>
   18e66:	bf00      	nop
   18e68:	00024a44 	.word	0x00024a44

00018e6c <generic_hfclk_start>:
{
   18e6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   18e6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18e72:	f3ef 8411 	mrs	r4, BASEPRI
   18e76:	f383 8812 	msr	BASEPRI_MAX, r3
   18e7a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   18e7e:	4a13      	ldr	r2, [pc, #76]	; (18ecc <generic_hfclk_start+0x60>)
   18e80:	6813      	ldr	r3, [r2, #0]
   18e82:	f043 0302 	orr.w	r3, r3, #2
   18e86:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   18e88:	f013 0f01 	tst.w	r3, #1
   18e8c:	d108      	bne.n	18ea0 <generic_hfclk_start+0x34>
	bool already_started = false;
   18e8e:	2300      	movs	r3, #0
	__asm__ volatile(
   18e90:	f384 8811 	msr	BASEPRI, r4
   18e94:	f3bf 8f6f 	isb	sy
	if (already_started) {
   18e98:	b99b      	cbnz	r3, 18ec2 <generic_hfclk_start+0x56>
	hfclk_start();
   18e9a:	f009 ffe8 	bl	22e6e <hfclk_start>
}
   18e9e:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18ea4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18ea8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   18eac:	f012 0f01 	tst.w	r2, #1
   18eb0:	d101      	bne.n	18eb6 <generic_hfclk_start+0x4a>
	bool already_started = false;
   18eb2:	2300      	movs	r3, #0
   18eb4:	e7ec      	b.n	18e90 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   18eb6:	f7ff ff85 	bl	18dc4 <get_hf_flags>
   18eba:	f009 ff6d 	bl	22d98 <set_on_state>
			already_started = true;
   18ebe:	2301      	movs	r3, #1
   18ec0:	e7e6      	b.n	18e90 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   18ec2:	2100      	movs	r1, #0
   18ec4:	4802      	ldr	r0, [pc, #8]	; (18ed0 <generic_hfclk_start+0x64>)
   18ec6:	f009 ff7a 	bl	22dbe <clkstarted_handle>
		return;
   18eca:	e7e8      	b.n	18e9e <generic_hfclk_start+0x32>
   18ecc:	200026f4 	.word	0x200026f4
   18ed0:	00024a44 	.word	0x00024a44

00018ed4 <generic_hfclk_stop>:
{
   18ed4:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18ed6:	4b0a      	ldr	r3, [pc, #40]	; (18f00 <generic_hfclk_stop+0x2c>)
   18ed8:	f3bf 8f5b 	dmb	ish
   18edc:	e853 2f00 	ldrex	r2, [r3]
   18ee0:	f022 0102 	bic.w	r1, r2, #2
   18ee4:	e843 1000 	strex	r0, r1, [r3]
   18ee8:	2800      	cmp	r0, #0
   18eea:	d1f7      	bne.n	18edc <generic_hfclk_stop+0x8>
   18eec:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   18ef0:	f012 0f01 	tst.w	r2, #1
   18ef4:	d000      	beq.n	18ef8 <generic_hfclk_stop+0x24>
}
   18ef6:	bd08      	pop	{r3, pc}
	hfclk_stop();
   18ef8:	f009 ffc3 	bl	22e82 <hfclk_stop>
   18efc:	e7fb      	b.n	18ef6 <generic_hfclk_stop+0x22>
   18efe:	bf00      	nop
   18f00:	200026f4 	.word	0x200026f4

00018f04 <api_blocking_start>:
{
   18f04:	b500      	push	{lr}
   18f06:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18f08:	f8cd d000 	str.w	sp, [sp]
   18f0c:	f8cd d004 	str.w	sp, [sp, #4]
   18f10:	2300      	movs	r3, #0
   18f12:	9302      	str	r3, [sp, #8]
   18f14:	2301      	movs	r3, #1
   18f16:	9303      	str	r3, [sp, #12]
   18f18:	ab04      	add	r3, sp, #16
   18f1a:	9304      	str	r3, [sp, #16]
   18f1c:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18f1e:	466b      	mov	r3, sp
   18f20:	4a06      	ldr	r2, [pc, #24]	; (18f3c <api_blocking_start+0x38>)
   18f22:	f009 ff94 	bl	22e4e <api_start>
	if (err < 0) {
   18f26:	2800      	cmp	r0, #0
   18f28:	db05      	blt.n	18f36 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   18f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   18f2e:	2300      	movs	r3, #0
   18f30:	4668      	mov	r0, sp
   18f32:	f002 fe85 	bl	1bc40 <z_impl_k_sem_take>
}
   18f36:	b007      	add	sp, #28
   18f38:	f85d fb04 	ldr.w	pc, [sp], #4
   18f3c:	00022e97 	.word	0x00022e97

00018f40 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   18f40:	b570      	push	{r4, r5, r6, lr}
   18f42:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18f44:	2200      	movs	r2, #0
   18f46:	2101      	movs	r1, #1
   18f48:	4610      	mov	r0, r2
   18f4a:	f7f9 fc0d 	bl	12768 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   18f4e:	2000      	movs	r0, #0
   18f50:	f7f9 fbd8 	bl	12704 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   18f54:	4811      	ldr	r0, [pc, #68]	; (18f9c <clk_init+0x5c>)
   18f56:	f001 fb53 	bl	1a600 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   18f5a:	4b11      	ldr	r3, [pc, #68]	; (18fa0 <clk_init+0x60>)
   18f5c:	4298      	cmp	r0, r3
   18f5e:	d11a      	bne.n	18f96 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   18f60:	f00a fdfd 	bl	23b5e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   18f64:	2400      	movs	r4, #0
   18f66:	e003      	b.n	18f70 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18f68:	2301      	movs	r3, #1
   18f6a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   18f6c:	441c      	add	r4, r3
   18f6e:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   18f70:	2c01      	cmp	r4, #1
   18f72:	d80e      	bhi.n	18f92 <clk_init+0x52>
						get_sub_data(dev, i);
   18f74:	4621      	mov	r1, r4
   18f76:	4630      	mov	r0, r6
   18f78:	f009 feba 	bl	22cf0 <get_sub_data>
   18f7c:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   18f7e:	4621      	mov	r1, r4
   18f80:	4630      	mov	r0, r6
   18f82:	f009 fec2 	bl	22d0a <get_onoff_manager>
   18f86:	4907      	ldr	r1, [pc, #28]	; (18fa4 <clk_init+0x64>)
   18f88:	f006 ff7a 	bl	1fe80 <onoff_manager_init>
		if (err < 0) {
   18f8c:	2800      	cmp	r0, #0
   18f8e:	daeb      	bge.n	18f68 <clk_init+0x28>
   18f90:	e000      	b.n	18f94 <clk_init+0x54>
	}

	return 0;
   18f92:	2000      	movs	r0, #0
}
   18f94:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   18f96:	f06f 0004 	mvn.w	r0, #4
   18f9a:	e7fb      	b.n	18f94 <clk_init+0x54>
   18f9c:	00018e39 	.word	0x00018e39
   18fa0:	0bad0000 	.word	0x0bad0000
   18fa4:	000269f4 	.word	0x000269f4

00018fa8 <lfclk_spinwait>:
{
   18fa8:	b570      	push	{r4, r5, r6, lr}
   18faa:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   18fac:	2801      	cmp	r0, #1
   18fae:	d107      	bne.n	18fc0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   18fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18fb4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   18fb8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   18fbc:	2b01      	cmp	r3, #1
   18fbe:	d058      	beq.n	19072 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18fc0:	f00a fee4 	bl	23d8c <k_is_in_isr>
   18fc4:	b928      	cbnz	r0, 18fd2 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   18fc6:	4b2e      	ldr	r3, [pc, #184]	; (19080 <lfclk_spinwait+0xd8>)
   18fc8:	781b      	ldrb	r3, [r3, #0]
   18fca:	2b00      	cmp	r3, #0
   18fcc:	d041      	beq.n	19052 <lfclk_spinwait+0xaa>
   18fce:	2300      	movs	r3, #0
   18fd0:	e000      	b.n	18fd4 <lfclk_spinwait+0x2c>
   18fd2:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   18fd4:	461c      	mov	r4, r3
   18fd6:	2b00      	cmp	r3, #0
   18fd8:	d03d      	beq.n	19056 <lfclk_spinwait+0xae>
	__asm__ volatile(
   18fda:	f04f 0340 	mov.w	r3, #64	; 0x40
   18fde:	f3ef 8611 	mrs	r6, BASEPRI
   18fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   18fe6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   18fea:	b924      	cbnz	r4, 18ff6 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   18fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18ff0:	2202      	movs	r2, #2
   18ff2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18ffa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   18ffe:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19002:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   19006:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1900a:	d12b      	bne.n	19064 <lfclk_spinwait+0xbc>
    return false;
   1900c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1900e:	b11a      	cbz	r2, 19018 <lfclk_spinwait+0x70>
   19010:	2b01      	cmp	r3, #1
   19012:	d029      	beq.n	19068 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   19014:	2d01      	cmp	r5, #1
   19016:	d027      	beq.n	19068 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19018:	b1fc      	cbz	r4, 1905a <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1901a:	4630      	mov	r0, r6
   1901c:	f7f9 fb1a 	bl	12654 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   19020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19024:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19028:	2b00      	cmp	r3, #0
   1902a:	d1e4      	bne.n	18ff6 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1902c:	4b15      	ldr	r3, [pc, #84]	; (19084 <lfclk_spinwait+0xdc>)
   1902e:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   19030:	2b00      	cmp	r3, #0
   19032:	d0e0      	beq.n	18ff6 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19034:	4b13      	ldr	r3, [pc, #76]	; (19084 <lfclk_spinwait+0xdc>)
   19036:	2200      	movs	r2, #0
   19038:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1903a:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1903c:	2301      	movs	r3, #1
   1903e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19042:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19046:	4a10      	ldr	r2, [pc, #64]	; (19088 <lfclk_spinwait+0xe0>)
   19048:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1904c:	4a0f      	ldr	r2, [pc, #60]	; (1908c <lfclk_spinwait+0xe4>)
   1904e:	6013      	str	r3, [r2, #0]
}
   19050:	e7d1      	b.n	18ff6 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19052:	2301      	movs	r3, #1
   19054:	e7be      	b.n	18fd4 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   19056:	2600      	movs	r6, #0
   19058:	e7c7      	b.n	18fea <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   1905a:	2021      	movs	r0, #33	; 0x21
   1905c:	2100      	movs	r1, #0
   1905e:	f003 fb77 	bl	1c750 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19062:	e7dd      	b.n	19020 <lfclk_spinwait+0x78>
                return true;
   19064:	2201      	movs	r2, #1
   19066:	e7d2      	b.n	1900e <lfclk_spinwait+0x66>
	if (isr_mode) {
   19068:	b124      	cbz	r4, 19074 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   1906a:	f386 8811 	msr	BASEPRI, r6
   1906e:	f3bf 8f6f 	isb	sy
}
   19072:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   19074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19078:	2202      	movs	r2, #2
   1907a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1907e:	e7f8      	b.n	19072 <lfclk_spinwait+0xca>
   19080:	200036c1 	.word	0x200036c1
   19084:	40000104 	.word	0x40000104
   19088:	e000e100 	.word	0xe000e100
   1908c:	40000008 	.word	0x40000008

00019090 <z_nrf_clock_control_lf_on>:
{
   19090:	b510      	push	{r4, lr}
   19092:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19094:	4b10      	ldr	r3, [pc, #64]	; (190d8 <z_nrf_clock_control_lf_on+0x48>)
   19096:	2101      	movs	r1, #1
   19098:	f3bf 8f5b 	dmb	ish
   1909c:	e853 2f00 	ldrex	r2, [r3]
   190a0:	e843 1000 	strex	r0, r1, [r3]
   190a4:	2800      	cmp	r0, #0
   190a6:	d1f9      	bne.n	1909c <z_nrf_clock_control_lf_on+0xc>
   190a8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   190ac:	b11a      	cbz	r2, 190b6 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   190ae:	1e63      	subs	r3, r4, #1
   190b0:	2b01      	cmp	r3, #1
   190b2:	d90c      	bls.n	190ce <z_nrf_clock_control_lf_on+0x3e>
}
   190b4:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   190b6:	4809      	ldr	r0, [pc, #36]	; (190dc <z_nrf_clock_control_lf_on+0x4c>)
   190b8:	f009 fe27 	bl	22d0a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   190bc:	4908      	ldr	r1, [pc, #32]	; (190e0 <z_nrf_clock_control_lf_on+0x50>)
   190be:	2300      	movs	r3, #0
   190c0:	604b      	str	r3, [r1, #4]
   190c2:	60cb      	str	r3, [r1, #12]
   190c4:	2301      	movs	r3, #1
   190c6:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   190c8:	f006 fef6 	bl	1feb8 <onoff_request>
   190cc:	e7ef      	b.n	190ae <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   190ce:	4620      	mov	r0, r4
   190d0:	f7ff ff6a 	bl	18fa8 <lfclk_spinwait>
		break;
   190d4:	e7ee      	b.n	190b4 <z_nrf_clock_control_lf_on+0x24>
   190d6:	bf00      	nop
   190d8:	200026f8 	.word	0x200026f8
   190dc:	00024a44 	.word	0x00024a44
   190e0:	20002694 	.word	0x20002694

000190e4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   190e4:	b510      	push	{r4, lr}
   190e6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   190e8:	280a      	cmp	r0, #10
   190ea:	d007      	beq.n	190fc <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   190ec:	4b07      	ldr	r3, [pc, #28]	; (1910c <console_out+0x28>)
   190ee:	6818      	ldr	r0, [r3, #0]
   190f0:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   190f2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   190f4:	685b      	ldr	r3, [r3, #4]
   190f6:	4798      	blx	r3

	return c;
}
   190f8:	4620      	mov	r0, r4
   190fa:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   190fc:	4b03      	ldr	r3, [pc, #12]	; (1910c <console_out+0x28>)
   190fe:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   19100:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   19102:	685b      	ldr	r3, [r3, #4]
   19104:	210d      	movs	r1, #13
   19106:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   19108:	e7f0      	b.n	190ec <console_out+0x8>
   1910a:	bf00      	nop
   1910c:	200026fc 	.word	0x200026fc

00019110 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   19110:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   19112:	4c04      	ldr	r4, [pc, #16]	; (19124 <uart_console_hook_install+0x14>)
   19114:	4620      	mov	r0, r4
   19116:	f7fa f9a5 	bl	13464 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   1911a:	4620      	mov	r0, r4
   1911c:	f7f6 ff1e 	bl	ff5c <__printk_hook_install>
#endif
}
   19120:	bd10      	pop	{r4, pc}
   19122:	bf00      	nop
   19124:	000190e5 	.word	0x000190e5

00019128 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   19128:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1912a:	4806      	ldr	r0, [pc, #24]	; (19144 <uart_console_init+0x1c>)
   1912c:	4b06      	ldr	r3, [pc, #24]	; (19148 <uart_console_init+0x20>)
   1912e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   19130:	f00a fd4c 	bl	23bcc <z_device_ready>
   19134:	b118      	cbz	r0, 1913e <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   19136:	f7ff ffeb 	bl	19110 <uart_console_hook_install>

	return 0;
   1913a:	2000      	movs	r0, #0
}
   1913c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1913e:	f06f 0012 	mvn.w	r0, #18
   19142:	e7fb      	b.n	1913c <uart_console_init+0x14>
   19144:	00024ad4 	.word	0x00024ad4
   19148:	200026fc 	.word	0x200026fc

0001914c <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1914c:	4b1f      	ldr	r3, [pc, #124]	; (191cc <get_drive+0x80>)
   1914e:	4003      	ands	r3, r0
   19150:	4a1f      	ldr	r2, [pc, #124]	; (191d0 <get_drive+0x84>)
   19152:	4293      	cmp	r3, r2
   19154:	d032      	beq.n	191bc <get_drive+0x70>
   19156:	d816      	bhi.n	19186 <get_drive+0x3a>
   19158:	2b06      	cmp	r3, #6
   1915a:	d02b      	beq.n	191b4 <get_drive+0x68>
   1915c:	d906      	bls.n	1916c <get_drive+0x20>
   1915e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19162:	d10d      	bne.n	19180 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   19164:	2301      	movs	r3, #1
   19166:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19168:	2000      	movs	r0, #0
		break;
   1916a:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1916c:	b1fb      	cbz	r3, 191ae <get_drive+0x62>
   1916e:	2b02      	cmp	r3, #2
   19170:	d103      	bne.n	1917a <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   19172:	2304      	movs	r3, #4
   19174:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19176:	2000      	movs	r0, #0
		break;
   19178:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1917a:	f06f 0015 	mvn.w	r0, #21
   1917e:	4770      	bx	lr
   19180:	f06f 0015 	mvn.w	r0, #21
   19184:	4770      	bx	lr
   19186:	4a13      	ldr	r2, [pc, #76]	; (191d4 <get_drive+0x88>)
   19188:	4293      	cmp	r3, r2
   1918a:	d01b      	beq.n	191c4 <get_drive+0x78>
   1918c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   19190:	d103      	bne.n	1919a <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   19192:	2303      	movs	r3, #3
   19194:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19196:	2000      	movs	r0, #0
		break;
   19198:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1919a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1919e:	d103      	bne.n	191a8 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   191a0:	2302      	movs	r3, #2
   191a2:	700b      	strb	r3, [r1, #0]
	int err = 0;
   191a4:	2000      	movs	r0, #0
		break;
   191a6:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   191a8:	f06f 0015 	mvn.w	r0, #21
   191ac:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   191ae:	2000      	movs	r0, #0
   191b0:	7008      	strb	r0, [r1, #0]
		break;
   191b2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   191b4:	2306      	movs	r3, #6
   191b6:	700b      	strb	r3, [r1, #0]
	int err = 0;
   191b8:	2000      	movs	r0, #0
		break;
   191ba:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   191bc:	2307      	movs	r3, #7
   191be:	700b      	strb	r3, [r1, #0]
	int err = 0;
   191c0:	2000      	movs	r0, #0
		break;
   191c2:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   191c4:	2305      	movs	r3, #5
   191c6:	700b      	strb	r3, [r1, #0]
	int err = 0;
   191c8:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   191ca:	4770      	bx	lr
   191cc:	00f00006 	.word	0x00f00006
   191d0:	00100006 	.word	0x00100006
   191d4:	00400002 	.word	0x00400002

000191d8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   191d8:	b128      	cbz	r0, 191e6 <get_dev+0xe>
   191da:	2801      	cmp	r0, #1
   191dc:	d101      	bne.n	191e2 <get_dev+0xa>
   191de:	4803      	ldr	r0, [pc, #12]	; (191ec <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   191e0:	4770      	bx	lr
	const struct device *dev = NULL;
   191e2:	2000      	movs	r0, #0
   191e4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   191e6:	4802      	ldr	r0, [pc, #8]	; (191f0 <get_dev+0x18>)
   191e8:	4770      	bx	lr
   191ea:	bf00      	nop
   191ec:	00024a5c 	.word	0x00024a5c
   191f0:	00024a74 	.word	0x00024a74

000191f4 <gpio_nrfx_pin_interrupt_configure>:
{
   191f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   191f6:	b085      	sub	sp, #20
   191f8:	460e      	mov	r6, r1
   191fa:	4619      	mov	r1, r3
	return port->config;
   191fc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   191fe:	7b1b      	ldrb	r3, [r3, #12]
   19200:	f006 051f 	and.w	r5, r6, #31
   19204:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   19208:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1920c:	d022      	beq.n	19254 <gpio_nrfx_pin_interrupt_configure+0x60>
   1920e:	4607      	mov	r7, r0
   19210:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   19212:	2300      	movs	r3, #0
   19214:	9302      	str	r3, [sp, #8]
   19216:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   19218:	4610      	mov	r0, r2
   1921a:	f009 fe74 	bl	22f06 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1921e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   19222:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   19224:	6899      	ldr	r1, [r3, #8]
   19226:	40f1      	lsrs	r1, r6
   19228:	f011 0f01 	tst.w	r1, #1
   1922c:	d102      	bne.n	19234 <gpio_nrfx_pin_interrupt_configure+0x40>
   1922e:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   19232:	d014      	beq.n	1925e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19234:	2300      	movs	r3, #0
   19236:	aa02      	add	r2, sp, #8
   19238:	4619      	mov	r1, r3
   1923a:	4628      	mov	r0, r5
   1923c:	f001 fda2 	bl	1ad84 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19240:	4b1b      	ldr	r3, [pc, #108]	; (192b0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   19242:	4298      	cmp	r0, r3
   19244:	d131      	bne.n	192aa <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   19246:	2101      	movs	r1, #1
   19248:	4628      	mov	r0, r5
   1924a:	f001 ff73 	bl	1b134 <nrfx_gpiote_trigger_enable>
	return 0;
   1924e:	2000      	movs	r0, #0
}
   19250:	b005      	add	sp, #20
   19252:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   19254:	4628      	mov	r0, r5
   19256:	f001 ffd1 	bl	1b1fc <nrfx_gpiote_trigger_disable>
		return 0;
   1925a:	2000      	movs	r0, #0
   1925c:	e7f8      	b.n	19250 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1925e:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   19262:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19264:	2a01      	cmp	r2, #1
   19266:	d014      	beq.n	19292 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   19268:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1926c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   19274:	f013 0f01 	tst.w	r3, #1
   19278:	d1dc      	bne.n	19234 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1927a:	f10d 0107 	add.w	r1, sp, #7
   1927e:	4628      	mov	r0, r5
   19280:	f001 fefc 	bl	1b07c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   19284:	4b0b      	ldr	r3, [pc, #44]	; (192b4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   19286:	4298      	cmp	r0, r3
   19288:	d005      	beq.n	19296 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   1928a:	f10d 0307 	add.w	r3, sp, #7
   1928e:	9303      	str	r3, [sp, #12]
   19290:	e7d0      	b.n	19234 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   19292:	4a09      	ldr	r2, [pc, #36]	; (192b8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   19294:	e7ea      	b.n	1926c <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   19296:	f10d 0007 	add.w	r0, sp, #7
   1929a:	f001 ff43 	bl	1b124 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1929e:	4b04      	ldr	r3, [pc, #16]	; (192b0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   192a0:	4298      	cmp	r0, r3
   192a2:	d0f2      	beq.n	1928a <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   192a4:	f06f 000b 	mvn.w	r0, #11
   192a8:	e7d2      	b.n	19250 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   192aa:	f06f 0004 	mvn.w	r0, #4
   192ae:	e7cf      	b.n	19250 <gpio_nrfx_pin_interrupt_configure+0x5c>
   192b0:	0bad0000 	.word	0x0bad0000
   192b4:	0bad0004 	.word	0x0bad0004
   192b8:	50000300 	.word	0x50000300

000192bc <pin_uninit>:
{
   192bc:	b530      	push	{r4, r5, lr}
   192be:	b083      	sub	sp, #12
   192c0:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   192c2:	f10d 0107 	add.w	r1, sp, #7
   192c6:	f001 fed9 	bl	1b07c <nrfx_gpiote_channel_get>
   192ca:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   192cc:	4620      	mov	r0, r4
   192ce:	f001 ffc5 	bl	1b25c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   192d2:	4b0b      	ldr	r3, [pc, #44]	; (19300 <pin_uninit+0x44>)
   192d4:	4298      	cmp	r0, r3
   192d6:	d10f      	bne.n	192f8 <pin_uninit+0x3c>
	if (free_ch) {
   192d8:	429d      	cmp	r5, r3
   192da:	d005      	beq.n	192e8 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   192dc:	4b08      	ldr	r3, [pc, #32]	; (19300 <pin_uninit+0x44>)
   192de:	4298      	cmp	r0, r3
   192e0:	d107      	bne.n	192f2 <pin_uninit+0x36>
   192e2:	2000      	movs	r0, #0
}
   192e4:	b003      	add	sp, #12
   192e6:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   192e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   192ec:	f001 ff12 	bl	1b114 <nrfx_gpiote_channel_free>
   192f0:	e7f4      	b.n	192dc <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   192f2:	f06f 0004 	mvn.w	r0, #4
   192f6:	e7f5      	b.n	192e4 <pin_uninit+0x28>
		return -EIO;
   192f8:	f06f 0004 	mvn.w	r0, #4
   192fc:	e7f2      	b.n	192e4 <pin_uninit+0x28>
   192fe:	bf00      	nop
   19300:	0bad0000 	.word	0x0bad0000

00019304 <gpio_nrfx_pin_configure>:
{
   19304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19308:	b087      	sub	sp, #28
	return port->config;
   1930a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1930e:	f898 300c 	ldrb.w	r3, [r8, #12]
   19312:	f001 051f 	and.w	r5, r1, #31
   19316:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1931a:	2a00      	cmp	r2, #0
   1931c:	d044      	beq.n	193a8 <gpio_nrfx_pin_configure+0xa4>
   1931e:	460c      	mov	r4, r1
   19320:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   19322:	2600      	movs	r6, #0
   19324:	9603      	str	r6, [sp, #12]
   19326:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   19328:	f10d 0117 	add.w	r1, sp, #23
   1932c:	4620      	mov	r0, r4
   1932e:	f001 fea5 	bl	1b07c <nrfx_gpiote_channel_get>
   19332:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19334:	4633      	mov	r3, r6
   19336:	aa03      	add	r2, sp, #12
   19338:	4631      	mov	r1, r6
   1933a:	4628      	mov	r0, r5
   1933c:	f001 fd22 	bl	1ad84 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19340:	4b30      	ldr	r3, [pc, #192]	; (19404 <gpio_nrfx_pin_configure+0x100>)
   19342:	4298      	cmp	r0, r3
   19344:	d15b      	bne.n	193fe <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   19346:	4599      	cmp	r9, r3
   19348:	d036      	beq.n	193b8 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   1934a:	f417 7f00 	tst.w	r7, #512	; 0x200
   1934e:	d043      	beq.n	193d8 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   19350:	f10d 0103 	add.w	r1, sp, #3
   19354:	4638      	mov	r0, r7
   19356:	f7ff fef9 	bl	1914c <get_drive>
		if (rv != 0) {
   1935a:	4606      	mov	r6, r0
   1935c:	bb40      	cbnz	r0, 193b0 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   1935e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19362:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   19366:	f417 7f80 	tst.w	r7, #256	; 0x100
   1936a:	bf0c      	ite	eq
   1936c:	2301      	moveq	r3, #1
   1936e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   19370:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   19374:	4638      	mov	r0, r7
   19376:	f009 fd93 	bl	22ea0 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1937a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1937e:	f417 6f00 	tst.w	r7, #2048	; 0x800
   19382:	d01e      	beq.n	193c2 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   19384:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19388:	2101      	movs	r1, #1
   1938a:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   1938e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   19392:	2200      	movs	r2, #0
   19394:	a901      	add	r1, sp, #4
   19396:	4628      	mov	r0, r5
   19398:	f001 fdaa 	bl	1aef0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1939c:	4b19      	ldr	r3, [pc, #100]	; (19404 <gpio_nrfx_pin_configure+0x100>)
   1939e:	4298      	cmp	r0, r3
   193a0:	d006      	beq.n	193b0 <gpio_nrfx_pin_configure+0xac>
   193a2:	f06f 0615 	mvn.w	r6, #21
   193a6:	e003      	b.n	193b0 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   193a8:	4628      	mov	r0, r5
   193aa:	f7ff ff87 	bl	192bc <pin_uninit>
   193ae:	4606      	mov	r6, r0
}
   193b0:	4630      	mov	r0, r6
   193b2:	b007      	add	sp, #28
   193b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   193b8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   193bc:	f001 feaa 	bl	1b114 <nrfx_gpiote_channel_free>
   193c0:	e7c3      	b.n	1934a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   193c2:	f417 6f80 	tst.w	r7, #1024	; 0x400
   193c6:	d0e4      	beq.n	19392 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   193c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   193cc:	2301      	movs	r3, #1
   193ce:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   193d2:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   193d6:	e7dc      	b.n	19392 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   193d8:	4638      	mov	r0, r7
   193da:	f009 fd61 	bl	22ea0 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   193de:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   193e2:	2300      	movs	r3, #0
   193e4:	461a      	mov	r2, r3
   193e6:	a902      	add	r1, sp, #8
   193e8:	4628      	mov	r0, r5
   193ea:	f001 fccb 	bl	1ad84 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   193ee:	4b05      	ldr	r3, [pc, #20]	; (19404 <gpio_nrfx_pin_configure+0x100>)
   193f0:	4298      	cmp	r0, r3
   193f2:	d101      	bne.n	193f8 <gpio_nrfx_pin_configure+0xf4>
   193f4:	2600      	movs	r6, #0
   193f6:	e7db      	b.n	193b0 <gpio_nrfx_pin_configure+0xac>
   193f8:	f06f 0615 	mvn.w	r6, #21
   193fc:	e7d8      	b.n	193b0 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   193fe:	f06f 0615 	mvn.w	r6, #21
   19402:	e7d5      	b.n	193b0 <gpio_nrfx_pin_configure+0xac>
   19404:	0bad0000 	.word	0x0bad0000

00019408 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   19408:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1940a:	f001 fe79 	bl	1b100 <nrfx_gpiote_is_init>
   1940e:	b108      	cbz	r0, 19414 <gpio_nrfx_init+0xc>
		return 0;
   19410:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   19412:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   19414:	f001 fe4a 	bl	1b0ac <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   19418:	4b08      	ldr	r3, [pc, #32]	; (1943c <gpio_nrfx_init+0x34>)
   1941a:	4298      	cmp	r0, r3
   1941c:	d10a      	bne.n	19434 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1941e:	2100      	movs	r1, #0
   19420:	4807      	ldr	r0, [pc, #28]	; (19440 <gpio_nrfx_init+0x38>)
   19422:	f001 fe25 	bl	1b070 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19426:	2200      	movs	r2, #0
   19428:	2105      	movs	r1, #5
   1942a:	2006      	movs	r0, #6
   1942c:	f7f9 f99c 	bl	12768 <z_arm_irq_priority_set>
	return 0;
   19430:	2000      	movs	r0, #0
   19432:	e7ee      	b.n	19412 <gpio_nrfx_init+0xa>
		return -EIO;
   19434:	f06f 0004 	mvn.w	r0, #4
   19438:	e7eb      	b.n	19412 <gpio_nrfx_init+0xa>
   1943a:	bf00      	nop
   1943c:	0bad0000 	.word	0x0bad0000
   19440:	00022f97 	.word	0x00022f97

00019444 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
   19444:	b410      	push	{r4}
	return dev->config;
   19446:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   19448:	2900      	cmp	r1, #0
   1944a:	d17e      	bne.n	1954a <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1944c:	68da      	ldr	r2, [r3, #12]
   1944e:	f1b2 3fff 	cmp.w	r2, #4294967295
   19452:	d017      	beq.n	19484 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
   19454:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19458:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1945a:	2a01      	cmp	r2, #1
   1945c:	d065      	beq.n	1952a <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
   1945e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19462:	2201      	movs	r2, #1
   19464:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   19466:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   1946a:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   1946c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19470:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19472:	2a01      	cmp	r2, #1
   19474:	d05b      	beq.n	1952e <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
   19476:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1947a:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1947e:	2103      	movs	r1, #3
   19480:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   19484:	691a      	ldr	r2, [r3, #16]
   19486:	f1b2 3fff 	cmp.w	r2, #4294967295
   1948a:	d00f      	beq.n	194ac <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   1948c:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   1948e:	2900      	cmp	r1, #0
   19490:	d04f      	beq.n	19532 <uarte_nrfx_pins_configure+0xee>
   19492:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   19494:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19498:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1949a:	2a01      	cmp	r2, #1
   1949c:	d04b      	beq.n	19536 <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
   1949e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   194a2:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   194a4:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   194a8:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   194ac:	695a      	ldr	r2, [r3, #20]
   194ae:	f1b2 3fff 	cmp.w	r2, #4294967295
   194b2:	d017      	beq.n	194e4 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
   194b4:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   194b8:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   194ba:	2a01      	cmp	r2, #1
   194bc:	d03d      	beq.n	1953a <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
   194be:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   194c2:	2201      	movs	r2, #1
   194c4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   194c6:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   194ca:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   194cc:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   194d0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   194d2:	2a01      	cmp	r2, #1
   194d4:	d033      	beq.n	1953e <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
   194d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   194da:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   194de:	2103      	movs	r1, #3
   194e0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   194e4:	699a      	ldr	r2, [r3, #24]
   194e6:	f1b2 3fff 	cmp.w	r2, #4294967295
   194ea:	d00e      	beq.n	1950a <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   194ec:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   194ee:	b341      	cbz	r1, 19542 <uarte_nrfx_pins_configure+0xfe>
   194f0:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   194f2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   194f6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   194f8:	2a01      	cmp	r2, #1
   194fa:	d024      	beq.n	19546 <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
   194fc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19500:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   19502:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   19506:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1950a:	681a      	ldr	r2, [r3, #0]
   1950c:	68d8      	ldr	r0, [r3, #12]
   1950e:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   19510:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   19514:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   19518:	681a      	ldr	r2, [r3, #0]
   1951a:	6959      	ldr	r1, [r3, #20]
   1951c:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   1951e:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   19522:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   19526:	bc10      	pop	{r4}
   19528:	4770      	bx	lr
        case 1: return NRF_P1;
   1952a:	482c      	ldr	r0, [pc, #176]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   1952c:	e799      	b.n	19462 <uarte_nrfx_pins_configure+0x1e>
   1952e:	482b      	ldr	r0, [pc, #172]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   19530:	e7a3      	b.n	1947a <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
   19532:	2000      	movs	r0, #0
   19534:	e7ae      	b.n	19494 <uarte_nrfx_pins_configure+0x50>
   19536:	4c29      	ldr	r4, [pc, #164]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   19538:	e7b3      	b.n	194a2 <uarte_nrfx_pins_configure+0x5e>
   1953a:	4828      	ldr	r0, [pc, #160]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   1953c:	e7c1      	b.n	194c2 <uarte_nrfx_pins_configure+0x7e>
   1953e:	4827      	ldr	r0, [pc, #156]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   19540:	e7cb      	b.n	194da <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
   19542:	2000      	movs	r0, #0
   19544:	e7d5      	b.n	194f2 <uarte_nrfx_pins_configure+0xae>
   19546:	4c25      	ldr	r4, [pc, #148]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   19548:	e7da      	b.n	19500 <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1954a:	68da      	ldr	r2, [r3, #12]
   1954c:	f1b2 3fff 	cmp.w	r2, #4294967295
   19550:	d00b      	beq.n	1956a <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
   19552:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19556:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19558:	2a01      	cmp	r2, #1
   1955a:	d037      	beq.n	195cc <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
   1955c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19560:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   19564:	2102      	movs	r1, #2
   19566:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1956a:	691a      	ldr	r2, [r3, #16]
   1956c:	f1b2 3fff 	cmp.w	r2, #4294967295
   19570:	d00b      	beq.n	1958a <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
   19572:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19576:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19578:	2a01      	cmp	r2, #1
   1957a:	d029      	beq.n	195d0 <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
   1957c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19580:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   19584:	2102      	movs	r1, #2
   19586:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1958a:	695a      	ldr	r2, [r3, #20]
   1958c:	f1b2 3fff 	cmp.w	r2, #4294967295
   19590:	d00b      	beq.n	195aa <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
   19592:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19596:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19598:	2a01      	cmp	r2, #1
   1959a:	d01b      	beq.n	195d4 <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
   1959c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   195a0:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   195a4:	2102      	movs	r1, #2
   195a6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   195aa:	699a      	ldr	r2, [r3, #24]
   195ac:	f1b2 3fff 	cmp.w	r2, #4294967295
   195b0:	d0ab      	beq.n	1950a <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
   195b2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   195b6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   195b8:	2a01      	cmp	r2, #1
   195ba:	d00d      	beq.n	195d8 <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
   195bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   195c0:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   195c4:	2102      	movs	r1, #2
   195c6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   195ca:	e79e      	b.n	1950a <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
   195cc:	4803      	ldr	r0, [pc, #12]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   195ce:	e7c7      	b.n	19560 <uarte_nrfx_pins_configure+0x11c>
   195d0:	4802      	ldr	r0, [pc, #8]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   195d2:	e7d5      	b.n	19580 <uarte_nrfx_pins_configure+0x13c>
   195d4:	4801      	ldr	r0, [pc, #4]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   195d6:	e7e3      	b.n	195a0 <uarte_nrfx_pins_configure+0x15c>
   195d8:	4800      	ldr	r0, [pc, #0]	; (195dc <uarte_nrfx_pins_configure+0x198>)
   195da:	e7f1      	b.n	195c0 <uarte_nrfx_pins_configure+0x17c>
   195dc:	50000300 	.word	0x50000300

000195e0 <baudrate_set>:
	return dev->config;
   195e0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   195e2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   195e4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   195e8:	d06f      	beq.n	196ca <baudrate_set+0xea>
   195ea:	d83a      	bhi.n	19662 <baudrate_set+0x82>
   195ec:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   195f0:	d06e      	beq.n	196d0 <baudrate_set+0xf0>
   195f2:	d90a      	bls.n	1960a <baudrate_set+0x2a>
   195f4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   195f8:	d075      	beq.n	196e6 <baudrate_set+0x106>
   195fa:	d924      	bls.n	19646 <baudrate_set+0x66>
   195fc:	f647 2312 	movw	r3, #31250	; 0x7a12
   19600:	4299      	cmp	r1, r3
   19602:	d12b      	bne.n	1965c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   19604:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   19608:	e013      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   1960a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1960e:	d061      	beq.n	196d4 <baudrate_set+0xf4>
   19610:	d907      	bls.n	19622 <baudrate_set+0x42>
   19612:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   19616:	d063      	beq.n	196e0 <baudrate_set+0x100>
   19618:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1961c:	d110      	bne.n	19640 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1961e:	4b3c      	ldr	r3, [pc, #240]	; (19710 <baudrate_set+0x130>)
   19620:	e007      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   19622:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   19626:	d058      	beq.n	196da <baudrate_set+0xfa>
   19628:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1962c:	d105      	bne.n	1963a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1962e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   19632:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   19636:	2000      	movs	r0, #0
   19638:	4770      	bx	lr
	switch (baudrate) {
   1963a:	f06f 0015 	mvn.w	r0, #21
   1963e:	4770      	bx	lr
   19640:	f06f 0015 	mvn.w	r0, #21
   19644:	4770      	bx	lr
   19646:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1964a:	d04e      	beq.n	196ea <baudrate_set+0x10a>
   1964c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   19650:	d101      	bne.n	19656 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   19652:	4b30      	ldr	r3, [pc, #192]	; (19714 <baudrate_set+0x134>)
   19654:	e7ed      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   19656:	f06f 0015 	mvn.w	r0, #21
   1965a:	4770      	bx	lr
   1965c:	f06f 0015 	mvn.w	r0, #21
   19660:	4770      	bx	lr
   19662:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   19666:	d042      	beq.n	196ee <baudrate_set+0x10e>
   19668:	d909      	bls.n	1967e <baudrate_set+0x9e>
   1966a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1966e:	d046      	beq.n	196fe <baudrate_set+0x11e>
   19670:	d91f      	bls.n	196b2 <baudrate_set+0xd2>
   19672:	4b29      	ldr	r3, [pc, #164]	; (19718 <baudrate_set+0x138>)
   19674:	4299      	cmp	r1, r3
   19676:	d148      	bne.n	1970a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   19678:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1967c:	e7d9      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   1967e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   19682:	d037      	beq.n	196f4 <baudrate_set+0x114>
   19684:	d905      	bls.n	19692 <baudrate_set+0xb2>
   19686:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1968a:	d10f      	bne.n	196ac <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1968c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   19690:	e7cf      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   19692:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   19696:	4299      	cmp	r1, r3
   19698:	d02e      	beq.n	196f8 <baudrate_set+0x118>
   1969a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1969e:	d102      	bne.n	196a6 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   196a0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   196a4:	e7c5      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   196a6:	f06f 0015 	mvn.w	r0, #21
   196aa:	4770      	bx	lr
   196ac:	f06f 0015 	mvn.w	r0, #21
   196b0:	4770      	bx	lr
   196b2:	4b1a      	ldr	r3, [pc, #104]	; (1971c <baudrate_set+0x13c>)
   196b4:	4299      	cmp	r1, r3
   196b6:	d025      	beq.n	19704 <baudrate_set+0x124>
   196b8:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   196bc:	d102      	bne.n	196c4 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   196be:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   196c2:	e7b6      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   196c4:	f06f 0015 	mvn.w	r0, #21
   196c8:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   196ca:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   196ce:	e7b0      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   196d0:	4b13      	ldr	r3, [pc, #76]	; (19720 <baudrate_set+0x140>)
   196d2:	e7ae      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   196d4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   196d8:	e7ab      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   196da:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   196de:	e7a8      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   196e0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   196e4:	e7a5      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   196e6:	4b0f      	ldr	r3, [pc, #60]	; (19724 <baudrate_set+0x144>)
   196e8:	e7a3      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   196ea:	4b0f      	ldr	r3, [pc, #60]	; (19728 <baudrate_set+0x148>)
   196ec:	e7a1      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   196ee:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   196f2:	e79e      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   196f4:	4b0d      	ldr	r3, [pc, #52]	; (1972c <baudrate_set+0x14c>)
   196f6:	e79c      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   196f8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   196fc:	e799      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   196fe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19702:	e796      	b.n	19632 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   19704:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   19708:	e793      	b.n	19632 <baudrate_set+0x52>
	switch (baudrate) {
   1970a:	f06f 0015 	mvn.w	r0, #21
}
   1970e:	4770      	bx	lr
   19710:	0013b000 	.word	0x0013b000
   19714:	004ea000 	.word	0x004ea000
   19718:	000f4240 	.word	0x000f4240
   1971c:	0003d090 	.word	0x0003d090
   19720:	00275000 	.word	0x00275000
   19724:	0075c000 	.word	0x0075c000
   19728:	003af000 	.word	0x003af000
   1972c:	013a9000 	.word	0x013a9000

00019730 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   19730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19734:	4605      	mov	r5, r0
   19736:	460f      	mov	r7, r1
	return dev->data;
   19738:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1973c:	f00a fb26 	bl	23d8c <k_is_in_isr>
   19740:	b920      	cbnz	r0, 1974c <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   19742:	4b16      	ldr	r3, [pc, #88]	; (1979c <uarte_nrfx_poll_out+0x6c>)
   19744:	781b      	ldrb	r3, [r3, #0]
   19746:	b1ab      	cbz	r3, 19774 <uarte_nrfx_poll_out+0x44>
   19748:	2300      	movs	r3, #0
   1974a:	e000      	b.n	1974e <uarte_nrfx_poll_out+0x1e>
   1974c:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1974e:	b19b      	cbz	r3, 19778 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   19750:	f04f 0340 	mov.w	r3, #64	; 0x40
   19754:	f3ef 8411 	mrs	r4, BASEPRI
   19758:	f383 8812 	msr	BASEPRI_MAX, r3
   1975c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   19760:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   19762:	4628      	mov	r0, r5
   19764:	f009 fce1 	bl	2312a <is_tx_ready>
   19768:	b950      	cbnz	r0, 19780 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   1976a:	f384 8811 	msr	BASEPRI, r4
   1976e:	f3bf 8f6f 	isb	sy
}
   19772:	e7ed      	b.n	19750 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19774:	2301      	movs	r3, #1
   19776:	e7ea      	b.n	1974e <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   19778:	4628      	mov	r0, r5
   1977a:	f009 fd25 	bl	231c8 <wait_tx_ready>
   1977e:	4606      	mov	r6, r0
	}

	data->char_out = c;
   19780:	4641      	mov	r1, r8
   19782:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   19786:	2201      	movs	r2, #1
   19788:	4628      	mov	r0, r5
   1978a:	f009 fce8 	bl	2315e <tx_start>
	__asm__ volatile(
   1978e:	f386 8811 	msr	BASEPRI, r6
   19792:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   19796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1979a:	bf00      	nop
   1979c:	200036c1 	.word	0x200036c1

000197a0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   197a0:	b538      	push	{r3, r4, r5, lr}
   197a2:	4604      	mov	r4, r0
   197a4:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   197a6:	f101 0012 	add.w	r0, r1, #18
   197aa:	f001 fdab 	bl	1b304 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   197ae:	4b14      	ldr	r3, [pc, #80]	; (19800 <endtx_stoptx_ppi_init+0x60>)
   197b0:	4298      	cmp	r0, r3
   197b2:	d111      	bne.n	197d8 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   197b4:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   197b6:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   197ba:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   197bc:	4a11      	ldr	r2, [pc, #68]	; (19804 <endtx_stoptx_ppi_init+0x64>)
   197be:	33a2      	adds	r3, #162	; 0xa2
   197c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   197c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   197c8:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   197ca:	7ca9      	ldrb	r1, [r5, #18]
   197cc:	2301      	movs	r3, #1
   197ce:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   197d0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   197d4:	2000      	movs	r0, #0
}
   197d6:	bd38      	pop	{r3, r4, r5, pc}
   197d8:	4b0b      	ldr	r3, [pc, #44]	; (19808 <endtx_stoptx_ppi_init+0x68>)
   197da:	4a0c      	ldr	r2, [pc, #48]	; (1980c <endtx_stoptx_ppi_init+0x6c>)
   197dc:	1a9b      	subs	r3, r3, r2
   197de:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   197e0:	f04f 0100 	mov.w	r1, #0
   197e4:	2201      	movs	r2, #1
   197e6:	f362 0102 	bfi	r1, r2, #0, #3
   197ea:	f36f 01c5 	bfc	r1, #3, #3
   197ee:	f363 118f 	bfi	r1, r3, #6, #10
   197f2:	4807      	ldr	r0, [pc, #28]	; (19810 <endtx_stoptx_ppi_init+0x70>)
   197f4:	f7f7 fdac 	bl	11350 <log_0>
		return -EIO;
   197f8:	f06f 0004 	mvn.w	r0, #4
   197fc:	e7eb      	b.n	197d6 <endtx_stoptx_ppi_init+0x36>
   197fe:	bf00      	nop
   19800:	0bad0000 	.word	0x0bad0000
   19804:	4001f000 	.word	0x4001f000
   19808:	00024da8 	.word	0x00024da8
   1980c:	00024ca0 	.word	0x00024ca0
   19810:	00026a54 	.word	0x00026a54

00019814 <random_byte_get>:
	__asm__ volatile(
   19814:	f04f 0340 	mov.w	r3, #64	; 0x40
   19818:	f3ef 8211 	mrs	r2, BASEPRI
   1981c:	f383 8812 	msr	BASEPRI_MAX, r3
   19820:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19824:	4b09      	ldr	r3, [pc, #36]	; (1984c <random_byte_get+0x38>)
   19826:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   19828:	b16b      	cbz	r3, 19846 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1982a:	4b09      	ldr	r3, [pc, #36]	; (19850 <random_byte_get+0x3c>)
   1982c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   19830:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19832:	f503 7380 	add.w	r3, r3, #256	; 0x100
   19836:	2100      	movs	r1, #0
   19838:	6019      	str	r1, [r3, #0]
   1983a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1983c:	f382 8811 	msr	BASEPRI, r2
   19840:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   19844:	4770      	bx	lr
	int retval = -EAGAIN;
   19846:	f06f 000a 	mvn.w	r0, #10
   1984a:	e7f7      	b.n	1983c <random_byte_get+0x28>
   1984c:	4000d100 	.word	0x4000d100
   19850:	4000d000 	.word	0x4000d000

00019854 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   19854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19858:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1985a:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1985e:	78c5      	ldrb	r5, [r0, #3]
   19860:	462f      	mov	r7, r5
	__asm__ volatile(
   19862:	f04f 0340 	mov.w	r3, #64	; 0x40
   19866:	f3ef 8811 	mrs	r8, BASEPRI
   1986a:	f383 8812 	msr	BASEPRI_MAX, r3
   1986e:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   19872:	7800      	ldrb	r0, [r0, #0]
   19874:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   19876:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1987a:	ebac 0c00 	sub.w	ip, ip, r0
   1987e:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   19882:	4562      	cmp	r2, ip
   19884:	d901      	bls.n	1988a <rng_pool_get+0x36>
		len = available;
   19886:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1988a:	1883      	adds	r3, r0, r2
   1988c:	402b      	ands	r3, r5
   1988e:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   19890:	f388 8811 	msr	BASEPRI, r8
   19894:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   19898:	460b      	mov	r3, r1
}
   1989a:	e006      	b.n	198aa <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1989c:	1932      	adds	r2, r6, r4
   1989e:	7952      	ldrb	r2, [r2, #5]
   198a0:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   198a4:	3401      	adds	r4, #1
   198a6:	403c      	ands	r4, r7
	while (likely(len--)) {
   198a8:	462a      	mov	r2, r5
   198aa:	1e55      	subs	r5, r2, #1
   198ac:	b2ad      	uxth	r5, r5
   198ae:	2a00      	cmp	r2, #0
   198b0:	d1f4      	bne.n	1989c <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   198b2:	4570      	cmp	r0, lr
   198b4:	d10d      	bne.n	198d2 <rng_pool_get+0x7e>
	__asm__ volatile(
   198b6:	f04f 0040 	mov.w	r0, #64	; 0x40
   198ba:	f3ef 8211 	mrs	r2, BASEPRI
   198be:	f380 8812 	msr	BASEPRI_MAX, r0
   198c2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   198c6:	7830      	ldrb	r0, [r6, #0]
   198c8:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   198ca:	f382 8811 	msr	BASEPRI, r2
   198ce:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   198d2:	1a5b      	subs	r3, r3, r1
   198d4:	b298      	uxth	r0, r3
	available = available - len;
   198d6:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   198da:	7933      	ldrb	r3, [r6, #4]
   198dc:	4563      	cmp	r3, ip
   198de:	d302      	bcc.n	198e6 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   198e0:	4b02      	ldr	r3, [pc, #8]	; (198ec <rng_pool_get+0x98>)
   198e2:	2201      	movs	r2, #1
   198e4:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   198e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198ea:	bf00      	nop
   198ec:	4000d000 	.word	0x4000d000

000198f0 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   198f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198f2:	460d      	mov	r5, r1
   198f4:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   198f6:	f013 0f01 	tst.w	r3, #1
   198fa:	d103      	bne.n	19904 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   198fc:	4822      	ldr	r0, [pc, #136]	; (19988 <entropy_nrf5_get_entropy_isr+0x98>)
   198fe:	f7ff ffa9 	bl	19854 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   19902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   19904:	b90a      	cbnz	r2, 1990a <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   19906:	4620      	mov	r0, r4
   19908:	e7fb      	b.n	19902 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   1990a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1990e:	f3ef 8611 	mrs	r6, BASEPRI
   19912:	f383 8812 	msr	BASEPRI_MAX, r3
   19916:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1991a:	200d      	movs	r0, #13
   1991c:	f7f8 ff16 	bl	1274c <arch_irq_is_enabled>
   19920:	4607      	mov	r7, r0
		irq_disable(IRQN);
   19922:	200d      	movs	r0, #13
   19924:	f7f8 fefe 	bl	12724 <arch_irq_disable>
	__asm__ volatile(
   19928:	f386 8811 	msr	BASEPRI, r6
   1992c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19930:	4b16      	ldr	r3, [pc, #88]	; (1998c <entropy_nrf5_get_entropy_isr+0x9c>)
   19932:	2200      	movs	r2, #0
   19934:	601a      	str	r2, [r3, #0]
   19936:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19938:	4b15      	ldr	r3, [pc, #84]	; (19990 <entropy_nrf5_get_entropy_isr+0xa0>)
   1993a:	2201      	movs	r2, #1
   1993c:	601a      	str	r2, [r3, #0]
   1993e:	4b15      	ldr	r3, [pc, #84]	; (19994 <entropy_nrf5_get_entropy_isr+0xa4>)
   19940:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19944:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   19948:	4626      	mov	r6, r4
   1994a:	e004      	b.n	19956 <entropy_nrf5_get_entropy_isr+0x66>
   1994c:	f3bf 8f4f 	dsb	sy
				__WFE();
   19950:	bf20      	wfe
				__SEV();
   19952:	bf40      	sev
				__WFE();
   19954:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19956:	4b0d      	ldr	r3, [pc, #52]	; (1998c <entropy_nrf5_get_entropy_isr+0x9c>)
   19958:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1995a:	2b00      	cmp	r3, #0
   1995c:	d0f6      	beq.n	1994c <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   1995e:	f7ff ff59 	bl	19814 <random_byte_get>
   19962:	4b0c      	ldr	r3, [pc, #48]	; (19994 <entropy_nrf5_get_entropy_isr+0xa4>)
   19964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19968:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1996c:	2800      	cmp	r0, #0
   1996e:	db02      	blt.n	19976 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   19970:	3e01      	subs	r6, #1
   19972:	b2b6      	uxth	r6, r6
   19974:	55a8      	strb	r0, [r5, r6]
		} while (len);
   19976:	2e00      	cmp	r6, #0
   19978:	d1ed      	bne.n	19956 <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1997a:	2f00      	cmp	r7, #0
   1997c:	d0c3      	beq.n	19906 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1997e:	200d      	movs	r0, #13
   19980:	f7f8 fec0 	bl	12704 <arch_irq_enable>
   19984:	e7bf      	b.n	19906 <entropy_nrf5_get_entropy_isr+0x16>
   19986:	bf00      	nop
   19988:	20002748 	.word	0x20002748
   1998c:	4000d100 	.word	0x4000d100
   19990:	4000d000 	.word	0x4000d000
   19994:	e000e100 	.word	0xe000e100

00019998 <isr>:
{
   19998:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1999a:	f7ff ff3b 	bl	19814 <random_byte_get>
	if (byte < 0) {
   1999e:	2800      	cmp	r0, #0
   199a0:	db06      	blt.n	199b0 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   199a2:	b2c4      	uxtb	r4, r0
   199a4:	4621      	mov	r1, r4
   199a6:	480a      	ldr	r0, [pc, #40]	; (199d0 <isr+0x38>)
   199a8:	f009 fc9d 	bl	232e6 <rng_pool_put>
	if (ret < 0) {
   199ac:	2800      	cmp	r0, #0
   199ae:	db00      	blt.n	199b2 <isr+0x1a>
}
   199b0:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   199b2:	4621      	mov	r1, r4
   199b4:	4807      	ldr	r0, [pc, #28]	; (199d4 <isr+0x3c>)
   199b6:	f009 fc96 	bl	232e6 <rng_pool_put>
		if (ret < 0) {
   199ba:	2800      	cmp	r0, #0
   199bc:	db03      	blt.n	199c6 <isr+0x2e>
	z_impl_k_sem_give(sem);
   199be:	4806      	ldr	r0, [pc, #24]	; (199d8 <isr+0x40>)
   199c0:	f002 f916 	bl	1bbf0 <z_impl_k_sem_give>
}
   199c4:	e7f4      	b.n	199b0 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   199c6:	4b05      	ldr	r3, [pc, #20]	; (199dc <isr+0x44>)
   199c8:	2201      	movs	r2, #1
   199ca:	601a      	str	r2, [r3, #0]
}
   199cc:	e7f7      	b.n	199be <isr+0x26>
   199ce:	bf00      	nop
   199d0:	20002748 	.word	0x20002748
   199d4:	2000275d 	.word	0x2000275d
   199d8:	20002730 	.word	0x20002730
   199dc:	4000d004 	.word	0x4000d004

000199e0 <entropy_nrf5_get_entropy>:
{
   199e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   199e2:	460f      	mov	r7, r1
   199e4:	4614      	mov	r4, r2
	while (len) {
   199e6:	e002      	b.n	199ee <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   199e8:	1b64      	subs	r4, r4, r5
   199ea:	b2a4      	uxth	r4, r4
		buf += bytes;
   199ec:	442f      	add	r7, r5
	while (len) {
   199ee:	b1e4      	cbz	r4, 19a2a <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   199f0:	4e0f      	ldr	r6, [pc, #60]	; (19a30 <entropy_nrf5_get_entropy+0x50>)
   199f2:	f04f 32ff 	mov.w	r2, #4294967295
   199f6:	f04f 33ff 	mov.w	r3, #4294967295
   199fa:	4630      	mov	r0, r6
   199fc:	f002 f920 	bl	1bc40 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19a00:	4622      	mov	r2, r4
   19a02:	4639      	mov	r1, r7
   19a04:	f106 0045 	add.w	r0, r6, #69	; 0x45
   19a08:	f7ff ff24 	bl	19854 <rng_pool_get>
   19a0c:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   19a0e:	4630      	mov	r0, r6
   19a10:	f002 f8ee 	bl	1bbf0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   19a14:	2d00      	cmp	r5, #0
   19a16:	d1e7      	bne.n	199e8 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   19a18:	f04f 32ff 	mov.w	r2, #4294967295
   19a1c:	f04f 33ff 	mov.w	r3, #4294967295
   19a20:	f106 0018 	add.w	r0, r6, #24
   19a24:	f002 f90c 	bl	1bc40 <z_impl_k_sem_take>
			continue;
   19a28:	e7e1      	b.n	199ee <entropy_nrf5_get_entropy+0xe>
}
   19a2a:	2000      	movs	r0, #0
   19a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a2e:	bf00      	nop
   19a30:	20002718 	.word	0x20002718

00019a34 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   19a34:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   19a36:	4c18      	ldr	r4, [pc, #96]	; (19a98 <entropy_nrf5_init+0x64>)
   19a38:	2201      	movs	r2, #1
   19a3a:	4611      	mov	r1, r2
   19a3c:	4620      	mov	r0, r4
   19a3e:	f00a fae2 	bl	24006 <z_impl_k_sem_init>
   19a42:	2201      	movs	r2, #1
   19a44:	2100      	movs	r1, #0
   19a46:	f104 0018 	add.w	r0, r4, #24
   19a4a:	f00a fadc 	bl	24006 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   19a4e:	2204      	movs	r2, #4
   19a50:	2108      	movs	r1, #8
   19a52:	f104 0045 	add.w	r0, r4, #69	; 0x45
   19a56:	f009 fc5a 	bl	2330e <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   19a5a:	220c      	movs	r2, #12
   19a5c:	2110      	movs	r1, #16
   19a5e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19a62:	f009 fc54 	bl	2330e <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   19a66:	4b0d      	ldr	r3, [pc, #52]	; (19a9c <entropy_nrf5_init+0x68>)
   19a68:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19a6c:	f022 0201 	bic.w	r2, r2, #1
   19a70:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19a74:	4a0a      	ldr	r2, [pc, #40]	; (19aa0 <entropy_nrf5_init+0x6c>)
   19a76:	2400      	movs	r4, #0
   19a78:	6014      	str	r4, [r2, #0]
   19a7a:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   19a7c:	2101      	movs	r1, #1
   19a7e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19a82:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   19a84:	4622      	mov	r2, r4
   19a86:	200d      	movs	r0, #13
   19a88:	f7f8 fe6e 	bl	12768 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   19a8c:	200d      	movs	r0, #13
   19a8e:	f7f8 fe39 	bl	12704 <arch_irq_enable>

	return 0;
}
   19a92:	4620      	mov	r0, r4
   19a94:	bd10      	pop	{r4, pc}
   19a96:	bf00      	nop
   19a98:	20002718 	.word	0x20002718
   19a9c:	4000d000 	.word	0x4000d000
   19aa0:	4000d100 	.word	0x4000d100

00019aa4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   19aa4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   19aa8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19aac:	4b01      	ldr	r3, [pc, #4]	; (19ab4 <set_comparator+0x10>)
   19aae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   19ab2:	4770      	bx	lr
   19ab4:	40011000 	.word	0x40011000

00019ab8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   19ab8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19abc:	4b01      	ldr	r3, [pc, #4]	; (19ac4 <get_comparator+0xc>)
   19abe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   19ac2:	4770      	bx	lr
   19ac4:	40011000 	.word	0x40011000

00019ac8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19acc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   19ace:	4a02      	ldr	r2, [pc, #8]	; (19ad8 <event_enable+0x10>)
   19ad0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   19ad4:	4770      	bx	lr
   19ad6:	bf00      	nop
   19ad8:	40011000 	.word	0x40011000

00019adc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19ae0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   19ae2:	4a02      	ldr	r2, [pc, #8]	; (19aec <event_disable+0x10>)
   19ae4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   19ae8:	4770      	bx	lr
   19aea:	bf00      	nop
   19aec:	40011000 	.word	0x40011000

00019af0 <counter>:
     return p_reg->COUNTER;
   19af0:	4b01      	ldr	r3, [pc, #4]	; (19af8 <counter+0x8>)
   19af2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   19af6:	4770      	bx	lr
   19af8:	40011000 	.word	0x40011000

00019afc <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   19afc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   19afe:	2301      	movs	r3, #1
   19b00:	4083      	lsls	r3, r0
   19b02:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19b04:	4a10      	ldr	r2, [pc, #64]	; (19b48 <compare_int_lock+0x4c>)
   19b06:	f3bf 8f5b 	dmb	ish
   19b0a:	e852 1f00 	ldrex	r1, [r2]
   19b0e:	ea01 0c04 	and.w	ip, r1, r4
   19b12:	e842 ce00 	strex	lr, ip, [r2]
   19b16:	f1be 0f00 	cmp.w	lr, #0
   19b1a:	d1f6      	bne.n	19b0a <compare_int_lock+0xe>
   19b1c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19b24:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   19b28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   19b30:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   19b34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19b38:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   19b3c:	420b      	tst	r3, r1
}
   19b3e:	bf14      	ite	ne
   19b40:	2001      	movne	r0, #1
   19b42:	2000      	moveq	r0, #0
   19b44:	bd10      	pop	{r4, pc}
   19b46:	bf00      	nop
   19b48:	20002770 	.word	0x20002770

00019b4c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   19b4c:	b570      	push	{r4, r5, r6, lr}
   19b4e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   19b50:	f009 fc25 	bl	2339e <full_int_lock>
   19b54:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   19b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19b5a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   19b5c:	4a17      	ldr	r2, [pc, #92]	; (19bbc <channel_processing_check_and_clear+0x70>)
   19b5e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19b62:	4213      	tst	r3, r2
   19b64:	d105      	bne.n	19b72 <channel_processing_check_and_clear+0x26>
	bool result = false;
   19b66:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   19b68:	4628      	mov	r0, r5
   19b6a:	f009 fc1c 	bl	233a6 <full_int_unlock>

	return result;
}
   19b6e:	4630      	mov	r0, r6
   19b70:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   19b72:	2301      	movs	r3, #1
   19b74:	40a3      	lsls	r3, r4
   19b76:	43db      	mvns	r3, r3
   19b78:	4a11      	ldr	r2, [pc, #68]	; (19bc0 <channel_processing_check_and_clear+0x74>)
   19b7a:	f3bf 8f5b 	dmb	ish
   19b7e:	e852 1f00 	ldrex	r1, [r2]
   19b82:	ea01 0003 	and.w	r0, r1, r3
   19b86:	e842 0600 	strex	r6, r0, [r2]
   19b8a:	2e00      	cmp	r6, #0
   19b8c:	d1f7      	bne.n	19b7e <channel_processing_check_and_clear+0x32>
   19b8e:	f3bf 8f5b 	dmb	ish
   19b92:	b959      	cbnz	r1, 19bac <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19b94:	f104 0350 	add.w	r3, r4, #80	; 0x50
   19b98:	009b      	lsls	r3, r3, #2
   19b9a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19ba0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   19ba4:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   19ba6:	b113      	cbz	r3, 19bae <channel_processing_check_and_clear+0x62>
   19ba8:	2301      	movs	r3, #1
   19baa:	e000      	b.n	19bae <channel_processing_check_and_clear+0x62>
   19bac:	2301      	movs	r3, #1
		if (result) {
   19bae:	461e      	mov	r6, r3
   19bb0:	2b00      	cmp	r3, #0
   19bb2:	d0d9      	beq.n	19b68 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   19bb4:	4620      	mov	r0, r4
   19bb6:	f009 fbe3 	bl	23380 <event_clear>
   19bba:	e7d5      	b.n	19b68 <channel_processing_check_and_clear+0x1c>
   19bbc:	40011000 	.word	0x40011000
   19bc0:	2000276c 	.word	0x2000276c

00019bc4 <compare_int_unlock>:
	if (key) {
   19bc4:	b901      	cbnz	r1, 19bc8 <compare_int_unlock+0x4>
}
   19bc6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   19bc8:	2301      	movs	r3, #1
   19bca:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19bcc:	4a11      	ldr	r2, [pc, #68]	; (19c14 <compare_int_unlock+0x50>)
   19bce:	f3bf 8f5b 	dmb	ish
   19bd2:	e852 1f00 	ldrex	r1, [r2]
   19bd6:	4319      	orrs	r1, r3
   19bd8:	e842 1c00 	strex	ip, r1, [r2]
   19bdc:	f1bc 0f00 	cmp.w	ip, #0
   19be0:	d1f7      	bne.n	19bd2 <compare_int_unlock+0xe>
   19be2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19bea:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   19bec:	4a0a      	ldr	r2, [pc, #40]	; (19c18 <compare_int_unlock+0x54>)
   19bee:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19bf2:	f3bf 8f5b 	dmb	ish
   19bf6:	4b09      	ldr	r3, [pc, #36]	; (19c1c <compare_int_unlock+0x58>)
   19bf8:	681b      	ldr	r3, [r3, #0]
   19bfa:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   19bfe:	fa23 f000 	lsr.w	r0, r3, r0
   19c02:	f010 0f01 	tst.w	r0, #1
   19c06:	d0de      	beq.n	19bc6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19c08:	4b05      	ldr	r3, [pc, #20]	; (19c20 <compare_int_unlock+0x5c>)
   19c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   19c0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   19c12:	e7d8      	b.n	19bc6 <compare_int_unlock+0x2>
   19c14:	20002770 	.word	0x20002770
   19c18:	40011000 	.word	0x40011000
   19c1c:	2000276c 	.word	0x2000276c
   19c20:	e000e100 	.word	0xe000e100

00019c24 <sys_clock_timeout_handler>:
{
   19c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c26:	4607      	mov	r7, r0
   19c28:	4614      	mov	r4, r2
   19c2a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   19c2c:	4610      	mov	r0, r2
   19c2e:	4619      	mov	r1, r3
   19c30:	f009 fbb2 	bl	23398 <absolute_time_to_cc>
   19c34:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   19c36:	4b15      	ldr	r3, [pc, #84]	; (19c8c <sys_clock_timeout_handler+0x68>)
   19c38:	681a      	ldr	r2, [r3, #0]
   19c3a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   19c3c:	601c      	str	r4, [r3, #0]
   19c3e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   19c40:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   19c44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   19c48:	d308      	bcc.n	19c5c <sys_clock_timeout_handler+0x38>
	return false;
   19c4a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   19c4c:	f002 ff08 	bl	1ca60 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   19c50:	4638      	mov	r0, r7
   19c52:	f7ff ff31 	bl	19ab8 <get_comparator>
   19c56:	42a8      	cmp	r0, r5
   19c58:	d00c      	beq.n	19c74 <sys_clock_timeout_handler+0x50>
}
   19c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   19c5c:	4b0c      	ldr	r3, [pc, #48]	; (19c90 <sys_clock_timeout_handler+0x6c>)
   19c5e:	6819      	ldr	r1, [r3, #0]
   19c60:	0a0b      	lsrs	r3, r1, #8
   19c62:	060a      	lsls	r2, r1, #24
   19c64:	1952      	adds	r2, r2, r5
   19c66:	f143 0300 	adc.w	r3, r3, #0
   19c6a:	490a      	ldr	r1, [pc, #40]	; (19c94 <sys_clock_timeout_handler+0x70>)
   19c6c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   19c70:	2401      	movs	r4, #1
   19c72:	e7eb      	b.n	19c4c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   19c74:	b11c      	cbz	r4, 19c7e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   19c76:	4638      	mov	r0, r7
   19c78:	f7ff ff26 	bl	19ac8 <event_enable>
}
   19c7c:	e7ed      	b.n	19c5a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   19c7e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   19c82:	4638      	mov	r0, r7
   19c84:	f7ff ff0e 	bl	19aa4 <set_comparator>
   19c88:	e7f5      	b.n	19c76 <sys_clock_timeout_handler+0x52>
   19c8a:	bf00      	nop
   19c8c:	20001ba8 	.word	0x20001ba8
   19c90:	20002774 	.word	0x20002774
   19c94:	20001b90 	.word	0x20001b90

00019c98 <z_nrf_rtc_timer_read>:
{
   19c98:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   19c9a:	4b0d      	ldr	r3, [pc, #52]	; (19cd0 <z_nrf_rtc_timer_read+0x38>)
   19c9c:	681b      	ldr	r3, [r3, #0]
   19c9e:	0a1d      	lsrs	r5, r3, #8
   19ca0:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   19ca2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   19ca6:	f7ff ff23 	bl	19af0 <counter>
   19caa:	4603      	mov	r3, r0
	val += cntr;
   19cac:	1820      	adds	r0, r4, r0
   19cae:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   19cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19cb6:	d20a      	bcs.n	19cce <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   19cb8:	4b06      	ldr	r3, [pc, #24]	; (19cd4 <z_nrf_rtc_timer_read+0x3c>)
   19cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   19cbe:	4299      	cmp	r1, r3
   19cc0:	bf08      	it	eq
   19cc2:	4290      	cmpeq	r0, r2
   19cc4:	d203      	bcs.n	19cce <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   19cc6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   19cca:	f141 0100 	adc.w	r1, r1, #0
}
   19cce:	bd38      	pop	{r3, r4, r5, pc}
   19cd0:	20002774 	.word	0x20002774
   19cd4:	20001b90 	.word	0x20001b90

00019cd8 <compare_set_nolocks>:
{
   19cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19cdc:	4606      	mov	r6, r0
   19cde:	4614      	mov	r4, r2
   19ce0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   19ce2:	4610      	mov	r0, r2
   19ce4:	4619      	mov	r1, r3
   19ce6:	f009 fb57 	bl	23398 <absolute_time_to_cc>
   19cea:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   19cec:	f7ff ffd4 	bl	19c98 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   19cf0:	42a9      	cmp	r1, r5
   19cf2:	bf08      	it	eq
   19cf4:	42a0      	cmpeq	r0, r4
   19cf6:	d21e      	bcs.n	19d36 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   19cf8:	ebb4 0800 	subs.w	r8, r4, r0
   19cfc:	eb65 0901 	sbc.w	r9, r5, r1
   19d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19d04:	2300      	movs	r3, #0
   19d06:	454b      	cmp	r3, r9
   19d08:	bf08      	it	eq
   19d0a:	4542      	cmpeq	r2, r8
   19d0c:	d32e      	bcc.n	19d6c <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   19d0e:	4b19      	ldr	r3, [pc, #100]	; (19d74 <compare_set_nolocks+0x9c>)
   19d10:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   19d14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   19d18:	42ab      	cmp	r3, r5
   19d1a:	bf08      	it	eq
   19d1c:	42a2      	cmpeq	r2, r4
   19d1e:	d018      	beq.n	19d52 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   19d20:	4639      	mov	r1, r7
   19d22:	4630      	mov	r0, r6
   19d24:	f009 fb42 	bl	233ac <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   19d28:	4639      	mov	r1, r7
   19d2a:	f009 fb25 	bl	23378 <counter_sub>
   19d2e:	1824      	adds	r4, r4, r0
   19d30:	f145 0500 	adc.w	r5, r5, #0
   19d34:	e00d      	b.n	19d52 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   19d36:	2301      	movs	r3, #1
   19d38:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19d3a:	4a0f      	ldr	r2, [pc, #60]	; (19d78 <compare_set_nolocks+0xa0>)
   19d3c:	f3bf 8f5b 	dmb	ish
   19d40:	e852 1f00 	ldrex	r1, [r2]
   19d44:	4319      	orrs	r1, r3
   19d46:	e842 1000 	strex	r0, r1, [r2]
   19d4a:	2800      	cmp	r0, #0
   19d4c:	d1f8      	bne.n	19d40 <compare_set_nolocks+0x68>
   19d4e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   19d52:	4b08      	ldr	r3, [pc, #32]	; (19d74 <compare_set_nolocks+0x9c>)
   19d54:	0132      	lsls	r2, r6, #4
   19d56:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   19d5a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   19d5e:	9908      	ldr	r1, [sp, #32]
   19d60:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   19d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19d64:	6073      	str	r3, [r6, #4]
	return ret;
   19d66:	2000      	movs	r0, #0
}
   19d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   19d6c:	f06f 0015 	mvn.w	r0, #21
   19d70:	e7fa      	b.n	19d68 <compare_set_nolocks+0x90>
   19d72:	bf00      	nop
   19d74:	20001b98 	.word	0x20001b98
   19d78:	2000276c 	.word	0x2000276c

00019d7c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   19d7c:	b530      	push	{r4, r5, lr}
   19d7e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   19d80:	2300      	movs	r3, #0
   19d82:	4a1e      	ldr	r2, [pc, #120]	; (19dfc <sys_clock_driver_init+0x80>)
   19d84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   19d88:	2b00      	cmp	r3, #0
   19d8a:	dd25      	ble.n	19dd8 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   19d8c:	4c1b      	ldr	r4, [pc, #108]	; (19dfc <sys_clock_driver_init+0x80>)
   19d8e:	2502      	movs	r5, #2
   19d90:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19d94:	4b1a      	ldr	r3, [pc, #104]	; (19e00 <sys_clock_driver_init+0x84>)
   19d96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   19d9a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   19d9e:	2200      	movs	r2, #0
   19da0:	2101      	movs	r1, #1
   19da2:	2011      	movs	r0, #17
   19da4:	f7f8 fce0 	bl	12768 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   19da8:	2011      	movs	r0, #17
   19daa:	f7f8 fcab 	bl	12704 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19dae:	2301      	movs	r3, #1
   19db0:	4a14      	ldr	r2, [pc, #80]	; (19e04 <sys_clock_driver_init+0x88>)
   19db2:	6013      	str	r3, [r2, #0]
   19db4:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   19db6:	4a14      	ldr	r2, [pc, #80]	; (19e08 <sys_clock_driver_init+0x8c>)
   19db8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   19dba:	2400      	movs	r4, #0
   19dbc:	9401      	str	r4, [sp, #4]
   19dbe:	4b13      	ldr	r3, [pc, #76]	; (19e0c <sys_clock_driver_init+0x90>)
   19dc0:	9300      	str	r3, [sp, #0]
   19dc2:	4a13      	ldr	r2, [pc, #76]	; (19e10 <sys_clock_driver_init+0x94>)
   19dc4:	2300      	movs	r3, #0
   19dc6:	4620      	mov	r0, r4
   19dc8:	f009 fb2b 	bl	23422 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   19dcc:	4628      	mov	r0, r5
   19dce:	f7ff f95f 	bl	19090 <z_nrf_clock_control_lf_on>

	return 0;
}
   19dd2:	4620      	mov	r0, r4
   19dd4:	b003      	add	sp, #12
   19dd6:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   19dd8:	4a0e      	ldr	r2, [pc, #56]	; (19e14 <sys_clock_driver_init+0x98>)
   19dda:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   19dde:	f04f 30ff 	mov.w	r0, #4294967295
   19de2:	f04f 31ff 	mov.w	r1, #4294967295
   19de6:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19dea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19dee:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   19df0:	4902      	ldr	r1, [pc, #8]	; (19dfc <sys_clock_driver_init+0x80>)
   19df2:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   19df6:	3301      	adds	r3, #1
   19df8:	e7c6      	b.n	19d88 <sys_clock_driver_init+0xc>
   19dfa:	bf00      	nop
   19dfc:	40011000 	.word	0x40011000
   19e00:	e000e100 	.word	0xe000e100
   19e04:	40011008 	.word	0x40011008
   19e08:	20002770 	.word	0x20002770
   19e0c:	00019c25 	.word	0x00019c25
   19e10:	007fffff 	.word	0x007fffff
   19e14:	20001b98 	.word	0x20001b98

00019e18 <process_channel>:
{
   19e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e1c:	b082      	sub	sp, #8
   19e1e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   19e20:	f7ff fe94 	bl	19b4c <channel_processing_check_and_clear>
   19e24:	b910      	cbnz	r0, 19e2c <process_channel+0x14>
}
   19e26:	b002      	add	sp, #8
   19e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   19e2c:	f7ff ff34 	bl	19c98 <z_nrf_rtc_timer_read>
   19e30:	4606      	mov	r6, r0
   19e32:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   19e34:	f009 fab3 	bl	2339e <full_int_lock>
   19e38:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   19e3a:	4b13      	ldr	r3, [pc, #76]	; (19e88 <process_channel+0x70>)
   19e3c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   19e40:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   19e44:	454f      	cmp	r7, r9
   19e46:	bf08      	it	eq
   19e48:	4546      	cmpeq	r6, r8
   19e4a:	d20b      	bcs.n	19e64 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   19e4c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   19e4e:	4650      	mov	r0, sl
   19e50:	f009 faa9 	bl	233a6 <full_int_unlock>
		if (handler) {
   19e54:	2e00      	cmp	r6, #0
   19e56:	d0e6      	beq.n	19e26 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   19e58:	9500      	str	r5, [sp, #0]
   19e5a:	4642      	mov	r2, r8
   19e5c:	464b      	mov	r3, r9
   19e5e:	4620      	mov	r0, r4
   19e60:	47b0      	blx	r6
}
   19e62:	e7e0      	b.n	19e26 <process_channel+0xe>
			handler = cc_data[chan].callback;
   19e64:	4a08      	ldr	r2, [pc, #32]	; (19e88 <process_channel+0x70>)
   19e66:	0123      	lsls	r3, r4, #4
   19e68:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   19e6c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   19e6e:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   19e70:	2000      	movs	r0, #0
   19e72:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   19e74:	f04f 32ff 	mov.w	r2, #4294967295
   19e78:	f04f 33ff 	mov.w	r3, #4294967295
   19e7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   19e80:	4620      	mov	r0, r4
   19e82:	f7ff fe2b 	bl	19adc <event_disable>
   19e86:	e7e2      	b.n	19e4e <process_channel+0x36>
   19e88:	20001b98 	.word	0x20001b98

00019e8c <rtc_nrf_isr>:
{
   19e8c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   19e8e:	4b0d      	ldr	r3, [pc, #52]	; (19ec4 <rtc_nrf_isr+0x38>)
   19e90:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   19e94:	f013 0f02 	tst.w	r3, #2
   19e98:	d00a      	beq.n	19eb0 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19e9a:	4b0b      	ldr	r3, [pc, #44]	; (19ec8 <rtc_nrf_isr+0x3c>)
   19e9c:	681b      	ldr	r3, [r3, #0]
   19e9e:	b13b      	cbz	r3, 19eb0 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19ea0:	4b09      	ldr	r3, [pc, #36]	; (19ec8 <rtc_nrf_isr+0x3c>)
   19ea2:	2200      	movs	r2, #0
   19ea4:	601a      	str	r2, [r3, #0]
   19ea6:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   19ea8:	4a08      	ldr	r2, [pc, #32]	; (19ecc <rtc_nrf_isr+0x40>)
   19eaa:	6813      	ldr	r3, [r2, #0]
   19eac:	3301      	adds	r3, #1
   19eae:	6013      	str	r3, [r2, #0]
{
   19eb0:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   19eb2:	2c00      	cmp	r4, #0
   19eb4:	dd00      	ble.n	19eb8 <rtc_nrf_isr+0x2c>
}
   19eb6:	bd10      	pop	{r4, pc}
		process_channel(chan);
   19eb8:	4620      	mov	r0, r4
   19eba:	f7ff ffad 	bl	19e18 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   19ebe:	3401      	adds	r4, #1
   19ec0:	e7f7      	b.n	19eb2 <rtc_nrf_isr+0x26>
   19ec2:	bf00      	nop
   19ec4:	40011000 	.word	0x40011000
   19ec8:	40011104 	.word	0x40011104
   19ecc:	20002774 	.word	0x20002774

00019ed0 <sys_clock_set_timeout>:
{
   19ed0:	b510      	push	{r4, lr}
   19ed2:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19ed4:	f1b0 3fff 	cmp.w	r0, #4294967295
   19ed8:	d007      	beq.n	19eea <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   19eda:	1e44      	subs	r4, r0, #1
   19edc:	2c00      	cmp	r4, #0
   19ede:	dd07      	ble.n	19ef0 <sys_clock_set_timeout+0x20>
   19ee0:	4b11      	ldr	r3, [pc, #68]	; (19f28 <sys_clock_set_timeout+0x58>)
   19ee2:	429c      	cmp	r4, r3
   19ee4:	dd05      	ble.n	19ef2 <sys_clock_set_timeout+0x22>
   19ee6:	4c11      	ldr	r4, [pc, #68]	; (19f2c <sys_clock_set_timeout+0x5c>)
   19ee8:	e003      	b.n	19ef2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19eea:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   19eee:	e7f4      	b.n	19eda <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   19ef0:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   19ef2:	f7ff fed1 	bl	19c98 <z_nrf_rtc_timer_read>
   19ef6:	4b0e      	ldr	r3, [pc, #56]	; (19f30 <sys_clock_set_timeout+0x60>)
   19ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
   19efc:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   19efe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19f02:	d300      	bcc.n	19f06 <sys_clock_set_timeout+0x36>
		ticks = 0;
   19f04:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   19f06:	4404      	add	r4, r0
   19f08:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   19f0a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   19f0e:	d300      	bcc.n	19f12 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   19f10:	4c06      	ldr	r4, [pc, #24]	; (19f2c <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   19f12:	2000      	movs	r0, #0
   19f14:	9001      	str	r0, [sp, #4]
   19f16:	4907      	ldr	r1, [pc, #28]	; (19f34 <sys_clock_set_timeout+0x64>)
   19f18:	9100      	str	r1, [sp, #0]
   19f1a:	1912      	adds	r2, r2, r4
   19f1c:	f143 0300 	adc.w	r3, r3, #0
   19f20:	f009 fa7f 	bl	23422 <compare_set>
}
   19f24:	b002      	add	sp, #8
   19f26:	bd10      	pop	{r4, pc}
   19f28:	007ffffe 	.word	0x007ffffe
   19f2c:	007fffff 	.word	0x007fffff
   19f30:	20001ba8 	.word	0x20001ba8
   19f34:	00019c25 	.word	0x00019c25

00019f38 <sys_clock_elapsed>:
{
   19f38:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   19f3a:	f7ff fead 	bl	19c98 <z_nrf_rtc_timer_read>
   19f3e:	4b02      	ldr	r3, [pc, #8]	; (19f48 <sys_clock_elapsed+0x10>)
   19f40:	681b      	ldr	r3, [r3, #0]
}
   19f42:	1ac0      	subs	r0, r0, r3
   19f44:	bd08      	pop	{r3, pc}
   19f46:	bf00      	nop
   19f48:	20001ba8 	.word	0x20001ba8

00019f4c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19f4c:	b508      	push	{r3, lr}
   19f4e:	4602      	mov	r2, r0
   19f50:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   19f52:	4802      	ldr	r0, [pc, #8]	; (19f5c <multithreading_lock_acquire+0x10>)
   19f54:	f001 fd42 	bl	1b9dc <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   19f58:	bd08      	pop	{r3, pc}
   19f5a:	bf00      	nop
   19f5c:	20000700 	.word	0x20000700

00019f60 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   19f60:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   19f62:	4802      	ldr	r0, [pc, #8]	; (19f6c <multithreading_lock_release+0xc>)
   19f64:	f001 fdc4 	bl	1baf0 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   19f68:	bd08      	pop	{r3, pc}
   19f6a:	bf00      	nop
   19f6c:	20000700 	.word	0x20000700

00019f70 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   19f70:	b508      	push	{r3, lr}
	z_impl_log_panic();
   19f72:	f7f7 fa1d 	bl	113b0 <z_impl_log_panic>
   19f76:	4b09      	ldr	r3, [pc, #36]	; (19f9c <k_sys_fatal_error_handler+0x2c>)
   19f78:	4a09      	ldr	r2, [pc, #36]	; (19fa0 <k_sys_fatal_error_handler+0x30>)
   19f7a:	1a9b      	subs	r3, r3, r2
   19f7c:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   19f7e:	f04f 0100 	mov.w	r1, #0
   19f82:	2201      	movs	r2, #1
   19f84:	f362 0102 	bfi	r1, r2, #0, #3
   19f88:	f36f 01c5 	bfc	r1, #3, #3
   19f8c:	f363 118f 	bfi	r1, r3, #6, #10
   19f90:	4804      	ldr	r0, [pc, #16]	; (19fa4 <k_sys_fatal_error_handler+0x34>)
   19f92:	f7f7 f9dd 	bl	11350 <log_0>
		sys_arch_reboot(0);
   19f96:	2000      	movs	r0, #0
   19f98:	f7f9 faa2 	bl	134e0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   19f9c:	00024d38 	.word	0x00024d38
   19fa0:	00024ca0 	.word	0x00024ca0
   19fa4:	00026b1c 	.word	0x00026b1c

00019fa8 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   19fa8:	b510      	push	{r4, lr}
   19faa:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   19fac:	4a03      	ldr	r2, [pc, #12]	; (19fbc <rand_prio_low_vector_get_blocking+0x14>)
   19fae:	6810      	ldr	r0, [r2, #0]
   19fb0:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   19fb2:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   19fb4:	680c      	ldr	r4, [r1, #0]
   19fb6:	4619      	mov	r1, r3
   19fb8:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   19fba:	bd10      	pop	{r4, pc}
   19fbc:	20002778 	.word	0x20002778

00019fc0 <sdc_assertion_handler>:
{
   19fc0:	b538      	push	{r3, r4, r5, lr}
   19fc2:	460d      	mov	r5, r1
   19fc4:	4b0d      	ldr	r3, [pc, #52]	; (19ffc <sdc_assertion_handler+0x3c>)
   19fc6:	4a0e      	ldr	r2, [pc, #56]	; (1a000 <sdc_assertion_handler+0x40>)
   19fc8:	1a9b      	subs	r3, r3, r2
   19fca:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   19fcc:	f04f 0400 	mov.w	r4, #0
   19fd0:	2201      	movs	r2, #1
   19fd2:	f362 0402 	bfi	r4, r2, #0, #3
   19fd6:	f36f 04c5 	bfc	r4, #3, #3
   19fda:	f363 148f 	bfi	r4, r3, #6, #10
   19fde:	f7f6 ff89 	bl	10ef4 <z_log_strdup>
   19fe2:	4601      	mov	r1, r0
   19fe4:	4623      	mov	r3, r4
   19fe6:	462a      	mov	r2, r5
   19fe8:	4806      	ldr	r0, [pc, #24]	; (1a004 <sdc_assertion_handler+0x44>)
   19fea:	f7f7 f931 	bl	11250 <log_2>
	k_oops();
   19fee:	4040      	eors	r0, r0
   19ff0:	f380 8811 	msr	BASEPRI, r0
   19ff4:	f04f 0003 	mov.w	r0, #3
   19ff8:	df02      	svc	2
}
   19ffa:	bd38      	pop	{r3, r4, r5, pc}
   19ffc:	00024d90 	.word	0x00024d90
   1a000:	00024ca0 	.word	0x00024ca0
   1a004:	00026b3c 	.word	0x00026b3c

0001a008 <host_signal>:
{
   1a008:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1a00a:	4802      	ldr	r0, [pc, #8]	; (1a014 <host_signal+0xc>)
   1a00c:	f001 fdf0 	bl	1bbf0 <z_impl_k_sem_give>
}
   1a010:	bd08      	pop	{r3, pc}
   1a012:	bf00      	nop
   1a014:	20000780 	.word	0x20000780

0001a018 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1a018:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1a01a:	4803      	ldr	r0, [pc, #12]	; (1a028 <hci_driver_init+0x10>)
   1a01c:	f7fb f974 	bl	15308 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1a020:	4802      	ldr	r0, [pc, #8]	; (1a02c <hci_driver_init+0x14>)
   1a022:	f7e9 fe61 	bl	3ce8 <sdc_init>
	return err;
}
   1a026:	bd08      	pop	{r3, pc}
   1a028:	00026c5c 	.word	0x00026c5c
   1a02c:	00019fc1 	.word	0x00019fc1

0001a030 <acl_handle>:
{
   1a030:	b538      	push	{r3, r4, r5, lr}
   1a032:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a034:	f04f 30ff 	mov.w	r0, #4294967295
   1a038:	f04f 31ff 	mov.w	r1, #4294967295
   1a03c:	f7ff ff86 	bl	19f4c <multithreading_lock_acquire>
	if (!errcode) {
   1a040:	4605      	mov	r5, r0
   1a042:	b108      	cbz	r0, 1a048 <acl_handle+0x18>
}
   1a044:	4628      	mov	r0, r5
   1a046:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1a048:	68a0      	ldr	r0, [r4, #8]
   1a04a:	f7f2 fecc 	bl	cde6 <sdc_hci_data_put>
   1a04e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1a050:	f7ff ff86 	bl	19f60 <multithreading_lock_release>
		if (errcode) {
   1a054:	2d00      	cmp	r5, #0
   1a056:	d0f5      	beq.n	1a044 <acl_handle+0x14>
   1a058:	4801      	ldr	r0, [pc, #4]	; (1a060 <acl_handle+0x30>)
   1a05a:	f001 fdc9 	bl	1bbf0 <z_impl_k_sem_give>
}
   1a05e:	e7f1      	b.n	1a044 <acl_handle+0x14>
   1a060:	20000780 	.word	0x20000780

0001a064 <cmd_handle>:
{
   1a064:	b538      	push	{r3, r4, r5, lr}
   1a066:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a068:	f04f 30ff 	mov.w	r0, #4294967295
   1a06c:	f04f 31ff 	mov.w	r1, #4294967295
   1a070:	f7ff ff6c 	bl	19f4c <multithreading_lock_acquire>
	if (!errcode) {
   1a074:	4604      	mov	r4, r0
   1a076:	b110      	cbz	r0, 1a07e <cmd_handle+0x1a>
	if (errcode) {
   1a078:	b144      	cbz	r4, 1a08c <cmd_handle+0x28>
}
   1a07a:	4620      	mov	r0, r4
   1a07c:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1a07e:	68a8      	ldr	r0, [r5, #8]
   1a080:	f000 f9c4 	bl	1a40c <hci_internal_cmd_put>
   1a084:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a086:	f7ff ff6b 	bl	19f60 <multithreading_lock_release>
   1a08a:	e7f5      	b.n	1a078 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   1a08c:	4801      	ldr	r0, [pc, #4]	; (1a094 <cmd_handle+0x30>)
   1a08e:	f001 fdaf 	bl	1bbf0 <z_impl_k_sem_give>
	return 0;
   1a092:	e7f2      	b.n	1a07a <cmd_handle+0x16>
   1a094:	20000780 	.word	0x20000780

0001a098 <rand_prio_high_vector_get>:
{
   1a098:	b538      	push	{r3, r4, r5, lr}
   1a09a:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1a09c:	4b07      	ldr	r3, [pc, #28]	; (1a0bc <rand_prio_high_vector_get+0x24>)
   1a09e:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1a0a0:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a0a2:	685d      	ldr	r5, [r3, #4]
   1a0a4:	b13d      	cbz	r5, 1a0b6 <rand_prio_high_vector_get+0x1e>
   1a0a6:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a0a8:	2300      	movs	r3, #0
   1a0aa:	4621      	mov	r1, r4
   1a0ac:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1a0ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1a0b2:	b2c0      	uxtb	r0, r0
   1a0b4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1a0b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a0ba:	e7f8      	b.n	1a0ae <rand_prio_high_vector_get+0x16>
   1a0bc:	20002778 	.word	0x20002778

0001a0c0 <rand_prio_low_vector_get>:
{
   1a0c0:	b538      	push	{r3, r4, r5, lr}
   1a0c2:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1a0c4:	4b07      	ldr	r3, [pc, #28]	; (1a0e4 <rand_prio_low_vector_get+0x24>)
   1a0c6:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   1a0c8:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1a0ca:	685d      	ldr	r5, [r3, #4]
   1a0cc:	b13d      	cbz	r5, 1a0de <rand_prio_low_vector_get+0x1e>
   1a0ce:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1a0d0:	2300      	movs	r3, #0
   1a0d2:	4621      	mov	r1, r4
   1a0d4:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1a0d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1a0da:	b2c0      	uxtb	r0, r0
   1a0dc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1a0de:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a0e2:	e7f8      	b.n	1a0d6 <rand_prio_low_vector_get+0x16>
   1a0e4:	20002778 	.word	0x20002778

0001a0e8 <event_packet_process>:
{
   1a0e8:	b570      	push	{r4, r5, r6, lr}
   1a0ea:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1a0ec:	f009 f9b6 	bl	2345c <event_packet_is_discardable>
   1a0f0:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1a0f2:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a0f4:	461d      	mov	r5, r3
   1a0f6:	b183      	cbz	r3, 1a11a <event_packet_process+0x32>
   1a0f8:	2200      	movs	r2, #0
   1a0fa:	2300      	movs	r3, #0
   1a0fc:	4629      	mov	r1, r5
   1a0fe:	f7f9 fb81 	bl	13804 <bt_buf_get_evt>
	if (!evt_buf) {
   1a102:	4606      	mov	r6, r0
   1a104:	b170      	cbz	r0, 1a124 <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1a106:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a108:	3202      	adds	r2, #2
   1a10a:	4621      	mov	r1, r4
   1a10c:	3008      	adds	r0, #8
   1a10e:	f008 fdaf 	bl	22c70 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1a112:	4630      	mov	r0, r6
   1a114:	f7fb f8a4 	bl	15260 <bt_recv>
}
   1a118:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a11a:	f04f 32ff 	mov.w	r2, #4294967295
   1a11e:	f04f 33ff 	mov.w	r3, #4294967295
   1a122:	e7eb      	b.n	1a0fc <event_packet_process+0x14>
		if (discardable) {
   1a124:	2d00      	cmp	r5, #0
   1a126:	d1f7      	bne.n	1a118 <event_packet_process+0x30>
   1a128:	4b08      	ldr	r3, [pc, #32]	; (1a14c <event_packet_process+0x64>)
   1a12a:	4a09      	ldr	r2, [pc, #36]	; (1a150 <event_packet_process+0x68>)
   1a12c:	1a9b      	subs	r3, r3, r2
   1a12e:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   1a130:	f04f 0100 	mov.w	r1, #0
   1a134:	2201      	movs	r2, #1
   1a136:	f362 0102 	bfi	r1, r2, #0, #3
   1a13a:	f36f 01c5 	bfc	r1, #3, #3
   1a13e:	f363 118f 	bfi	r1, r3, #6, #10
   1a142:	4804      	ldr	r0, [pc, #16]	; (1a154 <event_packet_process+0x6c>)
   1a144:	f7f7 f904 	bl	11350 <log_0>
		return;
   1a148:	e7e6      	b.n	1a118 <event_packet_process+0x30>
   1a14a:	bf00      	nop
   1a14c:	00024d90 	.word	0x00024d90
   1a150:	00024ca0 	.word	0x00024ca0
   1a154:	00026b64 	.word	0x00026b64

0001a158 <data_packet_process>:
{
   1a158:	b538      	push	{r3, r4, r5, lr}
   1a15a:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1a15c:	f04f 32ff 	mov.w	r2, #4294967295
   1a160:	f04f 33ff 	mov.w	r3, #4294967295
   1a164:	2003      	movs	r0, #3
   1a166:	f7f9 fb23 	bl	137b0 <bt_buf_get_rx>
	if (!data_buf) {
   1a16a:	b150      	cbz	r0, 1a182 <data_packet_process+0x2a>
   1a16c:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1a16e:	8862      	ldrh	r2, [r4, #2]
   1a170:	3204      	adds	r2, #4
   1a172:	4621      	mov	r1, r4
   1a174:	3008      	adds	r0, #8
   1a176:	f008 fd7b 	bl	22c70 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1a17a:	4628      	mov	r0, r5
   1a17c:	f7fb f870 	bl	15260 <bt_recv>
}
   1a180:	bd38      	pop	{r3, r4, r5, pc}
   1a182:	4b08      	ldr	r3, [pc, #32]	; (1a1a4 <data_packet_process+0x4c>)
   1a184:	4a08      	ldr	r2, [pc, #32]	; (1a1a8 <data_packet_process+0x50>)
   1a186:	1a9b      	subs	r3, r3, r2
   1a188:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   1a18a:	f04f 0100 	mov.w	r1, #0
   1a18e:	2201      	movs	r2, #1
   1a190:	f362 0102 	bfi	r1, r2, #0, #3
   1a194:	f36f 01c5 	bfc	r1, #3, #3
   1a198:	f363 118f 	bfi	r1, r3, #6, #10
   1a19c:	4803      	ldr	r0, [pc, #12]	; (1a1ac <data_packet_process+0x54>)
   1a19e:	f7f7 f8d7 	bl	11350 <log_0>
		return;
   1a1a2:	e7ed      	b.n	1a180 <data_packet_process+0x28>
   1a1a4:	00024d90 	.word	0x00024d90
   1a1a8:	00024ca0 	.word	0x00024ca0
   1a1ac:	00026b80 	.word	0x00026b80

0001a1b0 <recv_thread>:
{
   1a1b0:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   1a1b2:	2500      	movs	r5, #0
	bool received_evt = false;
   1a1b4:	462c      	mov	r4, r5
   1a1b6:	e00a      	b.n	1a1ce <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   1a1b8:	4d0b      	ldr	r5, [pc, #44]	; (1a1e8 <recv_thread+0x38>)
   1a1ba:	4628      	mov	r0, r5
   1a1bc:	f009 f97e 	bl	234bc <fetch_and_process_hci_evt>
   1a1c0:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   1a1c2:	4628      	mov	r0, r5
   1a1c4:	f009 f993 	bl	234ee <fetch_and_process_acl_data>
   1a1c8:	4605      	mov	r5, r0
	z_impl_k_yield();
   1a1ca:	f002 fa2d 	bl	1c628 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   1a1ce:	2c00      	cmp	r4, #0
   1a1d0:	d1f2      	bne.n	1a1b8 <recv_thread+0x8>
   1a1d2:	2d00      	cmp	r5, #0
   1a1d4:	d1f0      	bne.n	1a1b8 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1a1d6:	f04f 32ff 	mov.w	r2, #4294967295
   1a1da:	f04f 33ff 	mov.w	r3, #4294967295
   1a1de:	4803      	ldr	r0, [pc, #12]	; (1a1ec <recv_thread+0x3c>)
   1a1e0:	f001 fd2e 	bl	1bc40 <z_impl_k_sem_take>
   1a1e4:	e7e8      	b.n	1a1b8 <recv_thread+0x8>
   1a1e6:	bf00      	nop
   1a1e8:	2000277c 	.word	0x2000277c
   1a1ec:	20000780 	.word	0x20000780

0001a1f0 <configure_memory_usage>:
{
   1a1f0:	b500      	push	{lr}
   1a1f2:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   1a1f4:	2101      	movs	r1, #1
   1a1f6:	f88d 1004 	strb.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a1fa:	aa01      	add	r2, sp, #4
   1a1fc:	2000      	movs	r0, #0
   1a1fe:	f7e9 fced 	bl	3bdc <sdc_cfg_set>
	if (required_memory < 0) {
   1a202:	2800      	cmp	r0, #0
   1a204:	db3b      	blt.n	1a27e <configure_memory_usage+0x8e>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1a206:	2000      	movs	r0, #0
   1a208:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a20c:	aa01      	add	r2, sp, #4
   1a20e:	2102      	movs	r1, #2
   1a210:	f7e9 fce4 	bl	3bdc <sdc_cfg_set>
	if (required_memory < 0) {
   1a214:	2800      	cmp	r0, #0
   1a216:	db32      	blt.n	1a27e <configure_memory_usage+0x8e>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1a218:	231b      	movs	r3, #27
   1a21a:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1a21e:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   1a222:	2302      	movs	r3, #2
   1a224:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   1a228:	2103      	movs	r1, #3
   1a22a:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a22e:	aa01      	add	r2, sp, #4
   1a230:	2000      	movs	r0, #0
   1a232:	f7e9 fcd3 	bl	3bdc <sdc_cfg_set>
	if (required_memory < 0) {
   1a236:	2800      	cmp	r0, #0
   1a238:	db21      	blt.n	1a27e <configure_memory_usage+0x8e>
	cfg.event_length.event_length_us =
   1a23a:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1a23e:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a240:	aa01      	add	r2, sp, #4
   1a242:	2104      	movs	r1, #4
   1a244:	2000      	movs	r0, #0
   1a246:	f7e9 fcc9 	bl	3bdc <sdc_cfg_set>
	if (required_memory < 0) {
   1a24a:	2800      	cmp	r0, #0
   1a24c:	db17      	blt.n	1a27e <configure_memory_usage+0x8e>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1a24e:	2000      	movs	r0, #0
   1a250:	f88d 0004 	strb.w	r0, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a254:	aa01      	add	r2, sp, #4
   1a256:	2105      	movs	r1, #5
   1a258:	f7e9 fcc0 	bl	3bdc <sdc_cfg_set>
	if (required_memory < 0) {
   1a25c:	2800      	cmp	r0, #0
   1a25e:	db0e      	blt.n	1a27e <configure_memory_usage+0x8e>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1a260:	2303      	movs	r3, #3
   1a262:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a266:	aa01      	add	r2, sp, #4
   1a268:	2106      	movs	r1, #6
   1a26a:	2000      	movs	r0, #0
   1a26c:	f7e9 fcb6 	bl	3bdc <sdc_cfg_set>
		if (required_memory < 0) {
   1a270:	2800      	cmp	r0, #0
   1a272:	db04      	blt.n	1a27e <configure_memory_usage+0x8e>
	if (required_memory > sizeof(sdc_mempool)) {
   1a274:	f240 4386 	movw	r3, #1158	; 0x486
   1a278:	4298      	cmp	r0, r3
   1a27a:	d803      	bhi.n	1a284 <configure_memory_usage+0x94>
	return 0;
   1a27c:	2000      	movs	r0, #0
}
   1a27e:	b003      	add	sp, #12
   1a280:	f85d fb04 	ldr.w	pc, [sp], #4
   1a284:	4a0d      	ldr	r2, [pc, #52]	; (1a2bc <configure_memory_usage+0xcc>)
   1a286:	4b0e      	ldr	r3, [pc, #56]	; (1a2c0 <configure_memory_usage+0xd0>)
   1a288:	1ad2      	subs	r2, r2, r3
   1a28a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   1a28c:	f04f 0300 	mov.w	r3, #0
   1a290:	2101      	movs	r1, #1
   1a292:	f361 0302 	bfi	r3, r1, #0, #3
   1a296:	f36f 03c5 	bfc	r3, #3, #3
   1a29a:	f362 138f 	bfi	r3, r2, #6, #10
   1a29e:	4602      	mov	r2, r0
   1a2a0:	f240 4186 	movw	r1, #1158	; 0x486
   1a2a4:	4807      	ldr	r0, [pc, #28]	; (1a2c4 <configure_memory_usage+0xd4>)
   1a2a6:	f7f6 ffd3 	bl	11250 <log_2>
		k_panic();
   1a2aa:	4040      	eors	r0, r0
   1a2ac:	f380 8811 	msr	BASEPRI, r0
   1a2b0:	f04f 0004 	mov.w	r0, #4
   1a2b4:	df02      	svc	2
		return -ENOMEM;
   1a2b6:	f06f 000b 	mvn.w	r0, #11
   1a2ba:	e7e0      	b.n	1a27e <configure_memory_usage+0x8e>
   1a2bc:	00024d90 	.word	0x00024d90
   1a2c0:	00024ca0 	.word	0x00024ca0
   1a2c4:	00026b9c 	.word	0x00026b9c

0001a2c8 <hci_driver_open>:
{
   1a2c8:	b530      	push	{r4, r5, lr}
   1a2ca:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a2cc:	4d41      	ldr	r5, [pc, #260]	; (1a3d4 <hci_driver_open+0x10c>)
   1a2ce:	2200      	movs	r2, #0
   1a2d0:	2300      	movs	r3, #0
   1a2d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a2d6:	2400      	movs	r4, #0
   1a2d8:	9404      	str	r4, [sp, #16]
   1a2da:	f06f 0309 	mvn.w	r3, #9
   1a2de:	9303      	str	r3, [sp, #12]
   1a2e0:	9402      	str	r4, [sp, #8]
   1a2e2:	9401      	str	r4, [sp, #4]
   1a2e4:	9400      	str	r4, [sp, #0]
   1a2e6:	4b3c      	ldr	r3, [pc, #240]	; (1a3d8 <hci_driver_open+0x110>)
   1a2e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a2ec:	493b      	ldr	r1, [pc, #236]	; (1a3dc <hci_driver_open+0x114>)
   1a2ee:	4628      	mov	r0, r5
   1a2f0:	f009 fd63 	bl	23dba <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a2f4:	493a      	ldr	r1, [pc, #232]	; (1a3e0 <hci_driver_open+0x118>)
   1a2f6:	4628      	mov	r0, r5
   1a2f8:	f001 fa82 	bl	1b800 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1a2fc:	a80b      	add	r0, sp, #44	; 0x2c
   1a2fe:	f7e9 fc5f 	bl	3bc0 <sdc_build_revision_get>
   1a302:	4a38      	ldr	r2, [pc, #224]	; (1a3e4 <hci_driver_open+0x11c>)
   1a304:	4b38      	ldr	r3, [pc, #224]	; (1a3e8 <hci_driver_open+0x120>)
   1a306:	1ad2      	subs	r2, r2, r3
   1a308:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1a30a:	f04f 0300 	mov.w	r3, #0
   1a30e:	2103      	movs	r1, #3
   1a310:	f361 0302 	bfi	r3, r1, #0, #3
   1a314:	f364 03c5 	bfi	r3, r4, #3, #3
   1a318:	f362 138f 	bfi	r3, r2, #6, #10
   1a31c:	2214      	movs	r2, #20
   1a31e:	a90b      	add	r1, sp, #44	; 0x2c
   1a320:	4832      	ldr	r0, [pc, #200]	; (1a3ec <hci_driver_open+0x124>)
   1a322:	f7f6 fff3 	bl	1130c <log_hexdump>
	err = configure_supported_features();
   1a326:	f009 f8fb 	bl	23520 <configure_supported_features>
	if (err) {
   1a32a:	4604      	mov	r4, r0
   1a32c:	b110      	cbz	r0, 1a334 <hci_driver_open+0x6c>
}
   1a32e:	4620      	mov	r0, r4
   1a330:	b011      	add	sp, #68	; 0x44
   1a332:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   1a334:	f7ff ff5c 	bl	1a1f0 <configure_memory_usage>
	if (err) {
   1a338:	4604      	mov	r4, r0
   1a33a:	2800      	cmp	r0, #0
   1a33c:	d1f7      	bne.n	1a32e <hci_driver_open+0x66>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1a33e:	482c      	ldr	r0, [pc, #176]	; (1a3f0 <hci_driver_open+0x128>)
   1a340:	f001 f81c 	bl	1b37c <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a344:	4b2b      	ldr	r3, [pc, #172]	; (1a3f4 <hci_driver_open+0x12c>)
   1a346:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1a348:	b1a8      	cbz	r0, 1a376 <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   1a34a:	4a2b      	ldr	r2, [pc, #172]	; (1a3f8 <hci_driver_open+0x130>)
   1a34c:	ab08      	add	r3, sp, #32
   1a34e:	ca07      	ldmia	r2, {r0, r1, r2}
   1a350:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1a354:	4618      	mov	r0, r3
   1a356:	f7e9 fdd9 	bl	3f0c <sdc_rand_source_register>
	if (err) {
   1a35a:	4604      	mov	r4, r0
   1a35c:	b9f0      	cbnz	r0, 1a39c <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1a35e:	f04f 30ff 	mov.w	r0, #4294967295
   1a362:	f04f 31ff 	mov.w	r1, #4294967295
   1a366:	f7ff fdf1 	bl	19f4c <multithreading_lock_acquire>
	if (!err) {
   1a36a:	4605      	mov	r5, r0
   1a36c:	b350      	cbz	r0, 1a3c4 <hci_driver_open+0xfc>
	if (err < 0) {
   1a36e:	2d00      	cmp	r5, #0
   1a370:	dadd      	bge.n	1a32e <hci_driver_open+0x66>
		return err;
   1a372:	462c      	mov	r4, r5
   1a374:	e7db      	b.n	1a32e <hci_driver_open+0x66>
   1a376:	4b1b      	ldr	r3, [pc, #108]	; (1a3e4 <hci_driver_open+0x11c>)
   1a378:	4a1b      	ldr	r2, [pc, #108]	; (1a3e8 <hci_driver_open+0x120>)
   1a37a:	1a9b      	subs	r3, r3, r2
   1a37c:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   1a37e:	f04f 0100 	mov.w	r1, #0
   1a382:	2201      	movs	r2, #1
   1a384:	f362 0102 	bfi	r1, r2, #0, #3
   1a388:	f36f 01c5 	bfc	r1, #3, #3
   1a38c:	f363 118f 	bfi	r1, r3, #6, #10
   1a390:	481a      	ldr	r0, [pc, #104]	; (1a3fc <hci_driver_open+0x134>)
   1a392:	f7f6 ffdd 	bl	11350 <log_0>
		return -ENODEV;
   1a396:	f06f 0412 	mvn.w	r4, #18
   1a39a:	e7c8      	b.n	1a32e <hci_driver_open+0x66>
   1a39c:	4b11      	ldr	r3, [pc, #68]	; (1a3e4 <hci_driver_open+0x11c>)
   1a39e:	4a12      	ldr	r2, [pc, #72]	; (1a3e8 <hci_driver_open+0x120>)
   1a3a0:	1a9b      	subs	r3, r3, r2
   1a3a2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   1a3a4:	f04f 0200 	mov.w	r2, #0
   1a3a8:	2101      	movs	r1, #1
   1a3aa:	f361 0202 	bfi	r2, r1, #0, #3
   1a3ae:	f36f 02c5 	bfc	r2, #3, #3
   1a3b2:	f363 128f 	bfi	r2, r3, #6, #10
   1a3b6:	4601      	mov	r1, r0
   1a3b8:	4811      	ldr	r0, [pc, #68]	; (1a400 <hci_driver_open+0x138>)
   1a3ba:	f7f6 ff13 	bl	111e4 <log_1>
		return -EINVAL;
   1a3be:	f06f 0415 	mvn.w	r4, #21
   1a3c2:	e7b4      	b.n	1a32e <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   1a3c4:	490f      	ldr	r1, [pc, #60]	; (1a404 <hci_driver_open+0x13c>)
   1a3c6:	4810      	ldr	r0, [pc, #64]	; (1a408 <hci_driver_open+0x140>)
   1a3c8:	f7e9 fc66 	bl	3c98 <sdc_enable>
   1a3cc:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1a3ce:	f7ff fdc7 	bl	19f60 <multithreading_lock_release>
   1a3d2:	e7cc      	b.n	1a36e <hci_driver_open+0xa6>
   1a3d4:	20001bb0 	.word	0x20001bb0
   1a3d8:	0001a1b1 	.word	0x0001a1b1
   1a3dc:	200045e0 	.word	0x200045e0
   1a3e0:	00026bc0 	.word	0x00026bc0
   1a3e4:	00024d90 	.word	0x00024d90
   1a3e8:	00024ca0 	.word	0x00024ca0
   1a3ec:	00026bc8 	.word	0x00026bc8
   1a3f0:	00026ae8 	.word	0x00026ae8
   1a3f4:	20002778 	.word	0x20002778
   1a3f8:	00024e6c 	.word	0x00024e6c
   1a3fc:	00026bf0 	.word	0x00026bf0
   1a400:	00026c10 	.word	0x00026c10
   1a404:	200027c4 	.word	0x200027c4
   1a408:	0001a009 	.word	0x0001a009

0001a40c <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1a40c:	4b0b      	ldr	r3, [pc, #44]	; (1a43c <hci_internal_cmd_put+0x30>)
   1a40e:	781b      	ldrb	r3, [r3, #0]
   1a410:	b96b      	cbnz	r3, 1a42e <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1a412:	7883      	ldrb	r3, [r0, #2]
   1a414:	3303      	adds	r3, #3
   1a416:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1a41a:	dc0b      	bgt.n	1a434 <hci_internal_cmd_put+0x28>
{
   1a41c:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1a41e:	4c07      	ldr	r4, [pc, #28]	; (1a43c <hci_internal_cmd_put+0x30>)
   1a420:	1c61      	adds	r1, r4, #1
   1a422:	f009 fb11 	bl	23a48 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1a426:	2301      	movs	r3, #1
   1a428:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1a42a:	2000      	movs	r0, #0
}
   1a42c:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1a42e:	f04f 30ff 	mov.w	r0, #4294967295
   1a432:	4770      	bx	lr
		return -EINVAL;
   1a434:	f06f 0015 	mvn.w	r0, #21
}
   1a438:	4770      	bx	lr
   1a43a:	bf00      	nop
   1a43c:	20002c4c 	.word	0x20002c4c

0001a440 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1a440:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1a442:	4b07      	ldr	r3, [pc, #28]	; (1a460 <hci_internal_evt_get+0x20>)
   1a444:	781b      	ldrb	r3, [r3, #0]
   1a446:	b143      	cbz	r3, 1a45a <hci_internal_evt_get+0x1a>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   1a448:	4c05      	ldr	r4, [pc, #20]	; (1a460 <hci_internal_evt_get+0x20>)
   1a44a:	78a2      	ldrb	r2, [r4, #2]
   1a44c:	3202      	adds	r2, #2
   1a44e:	1c61      	adds	r1, r4, #1
   1a450:	f00a fa52 	bl	248f8 <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   1a454:	2000      	movs	r0, #0
   1a456:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1a458:	bd10      	pop	{r4, pc}
	return sdc_hci_evt_get(evt_out);
   1a45a:	f7f2 fccf 	bl	cdfc <sdc_hci_evt_get>
   1a45e:	e7fb      	b.n	1a458 <hci_internal_evt_get+0x18>
   1a460:	20002c4c 	.word	0x20002c4c

0001a464 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1a464:	b538      	push	{r3, r4, r5, lr}
   1a466:	4605      	mov	r5, r0
   1a468:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1a46a:	4b0a      	ldr	r3, [pc, #40]	; (1a494 <bt_rand+0x30>)
   1a46c:	681b      	ldr	r3, [r3, #0]
   1a46e:	b13b      	cbz	r3, 1a480 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1a470:	4b08      	ldr	r3, [pc, #32]	; (1a494 <bt_rand+0x30>)
   1a472:	6818      	ldr	r0, [r3, #0]
   1a474:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   1a476:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   1a478:	681b      	ldr	r3, [r3, #0]
   1a47a:	4629      	mov	r1, r5
   1a47c:	4798      	blx	r3
}
   1a47e:	bd38      	pop	{r3, r4, r5, pc}
   1a480:	4805      	ldr	r0, [pc, #20]	; (1a498 <bt_rand+0x34>)
   1a482:	f000 ff7b 	bl	1b37c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a486:	4b03      	ldr	r3, [pc, #12]	; (1a494 <bt_rand+0x30>)
   1a488:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1a48a:	2800      	cmp	r0, #0
   1a48c:	d1f0      	bne.n	1a470 <bt_rand+0xc>
			return -ENODEV;
   1a48e:	f06f 0012 	mvn.w	r0, #18
   1a492:	e7f4      	b.n	1a47e <bt_rand+0x1a>
   1a494:	20002c94 	.word	0x20002c94
   1a498:	00026ae8 	.word	0x00026ae8

0001a49c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1a49c:	b510      	push	{r4, lr}
   1a49e:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1a4a0:	f009 fb29 	bl	23af6 <m_config_clock_source_get>
   1a4a4:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1a4a8:	2332      	movs	r3, #50	; 0x32
   1a4aa:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1a4ae:	2300      	movs	r3, #0
   1a4b0:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   1a4b4:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1a4b8:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a4bc:	4a0c      	ldr	r2, [pc, #48]	; (1a4f0 <mpsl_lib_init+0x54>)
   1a4be:	2119      	movs	r1, #25
   1a4c0:	4668      	mov	r0, sp
   1a4c2:	f7e9 f9a1 	bl	3808 <mpsl_init>
	if (err) {
   1a4c6:	4604      	mov	r4, r0
   1a4c8:	b110      	cbz	r0, 1a4d0 <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1a4ca:	4620      	mov	r0, r4
   1a4cc:	b002      	add	sp, #8
   1a4ce:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a4d0:	2201      	movs	r2, #1
   1a4d2:	2100      	movs	r1, #0
   1a4d4:	2008      	movs	r0, #8
   1a4d6:	f7f8 f947 	bl	12768 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a4da:	2201      	movs	r2, #1
   1a4dc:	2100      	movs	r1, #0
   1a4de:	200b      	movs	r0, #11
   1a4e0:	f7f8 f942 	bl	12768 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a4e4:	2201      	movs	r2, #1
   1a4e6:	2100      	movs	r1, #0
   1a4e8:	4610      	mov	r0, r2
   1a4ea:	f7f8 f93d 	bl	12768 <z_arm_irq_priority_set>
	return 0;
   1a4ee:	e7ec      	b.n	1a4ca <mpsl_lib_init+0x2e>
   1a4f0:	0001a4f5 	.word	0x0001a4f5

0001a4f4 <m_assert_handler>:
{
   1a4f4:	b538      	push	{r3, r4, r5, lr}
   1a4f6:	460d      	mov	r5, r1
   1a4f8:	4b0d      	ldr	r3, [pc, #52]	; (1a530 <m_assert_handler+0x3c>)
   1a4fa:	4a0e      	ldr	r2, [pc, #56]	; (1a534 <m_assert_handler+0x40>)
   1a4fc:	1a9b      	subs	r3, r3, r2
   1a4fe:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1a500:	f04f 0400 	mov.w	r4, #0
   1a504:	2201      	movs	r2, #1
   1a506:	f362 0402 	bfi	r4, r2, #0, #3
   1a50a:	f36f 04c5 	bfc	r4, #3, #3
   1a50e:	f363 148f 	bfi	r4, r3, #6, #10
   1a512:	f7f6 fcef 	bl	10ef4 <z_log_strdup>
   1a516:	4601      	mov	r1, r0
   1a518:	4623      	mov	r3, r4
   1a51a:	462a      	mov	r2, r5
   1a51c:	4806      	ldr	r0, [pc, #24]	; (1a538 <m_assert_handler+0x44>)
   1a51e:	f7f6 fe97 	bl	11250 <log_2>
	k_oops();
   1a522:	4040      	eors	r0, r0
   1a524:	f380 8811 	msr	BASEPRI, r0
   1a528:	f04f 0003 	mov.w	r0, #3
   1a52c:	df02      	svc	2
}
   1a52e:	bd38      	pop	{r3, r4, r5, pc}
   1a530:	00024d50 	.word	0x00024d50
   1a534:	00024ca0 	.word	0x00024ca0
   1a538:	00026c90 	.word	0x00026c90

0001a53c <signal_thread>:
{
   1a53c:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   1a53e:	f04f 34ff 	mov.w	r4, #4294967295
   1a542:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1a546:	4622      	mov	r2, r4
   1a548:	462b      	mov	r3, r5
   1a54a:	4806      	ldr	r0, [pc, #24]	; (1a564 <signal_thread+0x28>)
   1a54c:	f001 fb78 	bl	1bc40 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a550:	4620      	mov	r0, r4
   1a552:	4629      	mov	r1, r5
   1a554:	f7ff fcfa 	bl	19f4c <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1a558:	f7f1 ff99 	bl	c48e <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1a55c:	f7ff fd00 	bl	19f60 <multithreading_lock_release>
	while (true) {
   1a560:	e7ed      	b.n	1a53e <signal_thread+0x2>
   1a562:	bf00      	nop
   1a564:	20000798 	.word	0x20000798

0001a568 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1a568:	b530      	push	{r4, r5, lr}
   1a56a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a56c:	4d0f      	ldr	r5, [pc, #60]	; (1a5ac <mpsl_signal_thread_init+0x44>)
   1a56e:	2200      	movs	r2, #0
   1a570:	2300      	movs	r3, #0
   1a572:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a576:	2400      	movs	r4, #0
   1a578:	9404      	str	r4, [sp, #16]
   1a57a:	f06f 0309 	mvn.w	r3, #9
   1a57e:	9303      	str	r3, [sp, #12]
   1a580:	9402      	str	r4, [sp, #8]
   1a582:	9401      	str	r4, [sp, #4]
   1a584:	9400      	str	r4, [sp, #0]
   1a586:	4b0a      	ldr	r3, [pc, #40]	; (1a5b0 <mpsl_signal_thread_init+0x48>)
   1a588:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a58c:	4909      	ldr	r1, [pc, #36]	; (1a5b4 <mpsl_signal_thread_init+0x4c>)
   1a58e:	4628      	mov	r0, r5
   1a590:	f009 fc13 	bl	23dba <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a594:	4908      	ldr	r1, [pc, #32]	; (1a5b8 <mpsl_signal_thread_init+0x50>)
   1a596:	4628      	mov	r0, r5
   1a598:	f001 f932 	bl	1b800 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1a59c:	4622      	mov	r2, r4
   1a59e:	2104      	movs	r1, #4
   1a5a0:	2019      	movs	r0, #25
   1a5a2:	f7f8 f8e1 	bl	12768 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1a5a6:	4620      	mov	r0, r4
   1a5a8:	b009      	add	sp, #36	; 0x24
   1a5aa:	bd30      	pop	{r4, r5, pc}
   1a5ac:	20001c68 	.word	0x20001c68
   1a5b0:	0001a53d 	.word	0x0001a53d
   1a5b4:	20004a00 	.word	0x20004a00
   1a5b8:	00026ca4 	.word	0x00026ca4

0001a5bc <mpsl_low_prio_irq_handler>:
{
   1a5bc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1a5be:	4802      	ldr	r0, [pc, #8]	; (1a5c8 <mpsl_low_prio_irq_handler+0xc>)
   1a5c0:	f001 fb16 	bl	1bbf0 <z_impl_k_sem_give>
}
   1a5c4:	bd08      	pop	{r3, pc}
   1a5c6:	bf00      	nop
   1a5c8:	20000798 	.word	0x20000798

0001a5cc <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   1a5cc:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a5ce:	4b02      	ldr	r3, [pc, #8]	; (1a5d8 <mpsl_hfclk_callback+0xc>)
   1a5d0:	681b      	ldr	r3, [r3, #0]
   1a5d2:	2000      	movs	r0, #0
   1a5d4:	4798      	blx	r3
}
   1a5d6:	bd08      	pop	{r3, pc}
   1a5d8:	20002c98 	.word	0x20002c98

0001a5dc <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1a5dc:	b508      	push	{r3, lr}
	switch (domain) {
   1a5de:	b128      	cbz	r0, 1a5ec <nrfx_clock_start+0x10>
   1a5e0:	2801      	cmp	r0, #1
   1a5e2:	d102      	bne.n	1a5ea <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1a5e4:	4804      	ldr	r0, [pc, #16]	; (1a5f8 <nrfx_clock_start+0x1c>)
   1a5e6:	f7e8 ff79 	bl	34dc <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1a5ea:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a5ec:	4b03      	ldr	r3, [pc, #12]	; (1a5fc <nrfx_clock_start+0x20>)
   1a5ee:	681b      	ldr	r3, [r3, #0]
   1a5f0:	2001      	movs	r0, #1
   1a5f2:	4798      	blx	r3
}
   1a5f4:	e7f9      	b.n	1a5ea <nrfx_clock_start+0xe>
   1a5f6:	bf00      	nop
   1a5f8:	0001a5cd 	.word	0x0001a5cd
   1a5fc:	20002c98 	.word	0x20002c98

0001a600 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1a600:	4b01      	ldr	r3, [pc, #4]	; (1a608 <nrfx_clock_init+0x8>)
   1a602:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1a604:	4801      	ldr	r0, [pc, #4]	; (1a60c <nrfx_clock_init+0xc>)
   1a606:	4770      	bx	lr
   1a608:	20002c98 	.word	0x20002c98
   1a60c:	0bad0000 	.word	0x0bad0000

0001a610 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a610:	4b03      	ldr	r3, [pc, #12]	; (1a620 <nrf52_errata_36+0x10>)
   1a612:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1a614:	2b08      	cmp	r3, #8
   1a616:	d001      	beq.n	1a61c <nrf52_errata_36+0xc>
        return false;
   1a618:	2000      	movs	r0, #0
   1a61a:	4770      	bx	lr
                        return true;
   1a61c:	2001      	movs	r0, #1
}
   1a61e:	4770      	bx	lr
   1a620:	10000130 	.word	0x10000130

0001a624 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a624:	4b03      	ldr	r3, [pc, #12]	; (1a634 <nrf52_errata_66+0x10>)
   1a626:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1a628:	2b08      	cmp	r3, #8
   1a62a:	d001      	beq.n	1a630 <nrf52_errata_66+0xc>
        return false;
   1a62c:	2000      	movs	r0, #0
   1a62e:	4770      	bx	lr
                        return true;
   1a630:	2001      	movs	r0, #1
}
   1a632:	4770      	bx	lr
   1a634:	10000130 	.word	0x10000130

0001a638 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a638:	4b08      	ldr	r3, [pc, #32]	; (1a65c <nrf52_errata_98+0x24>)
   1a63a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a63c:	3304      	adds	r3, #4
   1a63e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1a640:	2a08      	cmp	r2, #8
   1a642:	d001      	beq.n	1a648 <nrf52_errata_98+0x10>
        return false;
   1a644:	2000      	movs	r0, #0
   1a646:	4770      	bx	lr
                switch(var2)
   1a648:	2b00      	cmp	r3, #0
   1a64a:	d804      	bhi.n	1a656 <nrf52_errata_98+0x1e>
   1a64c:	e8df f003 	tbb	[pc, r3]
   1a650:	01          	.byte	0x01
   1a651:	00          	.byte	0x00
            if (var1 == 0x08)
   1a652:	2001      	movs	r0, #1
   1a654:	4770      	bx	lr
                        return false;
   1a656:	2000      	movs	r0, #0
}
   1a658:	4770      	bx	lr
   1a65a:	bf00      	nop
   1a65c:	10000130 	.word	0x10000130

0001a660 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a660:	4b08      	ldr	r3, [pc, #32]	; (1a684 <nrf52_errata_103+0x24>)
   1a662:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a664:	3304      	adds	r3, #4
   1a666:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1a668:	2a08      	cmp	r2, #8
   1a66a:	d001      	beq.n	1a670 <nrf52_errata_103+0x10>
        return false;
   1a66c:	2000      	movs	r0, #0
   1a66e:	4770      	bx	lr
                switch(var2)
   1a670:	2b00      	cmp	r3, #0
   1a672:	d804      	bhi.n	1a67e <nrf52_errata_103+0x1e>
   1a674:	e8df f003 	tbb	[pc, r3]
   1a678:	01          	.byte	0x01
   1a679:	00          	.byte	0x00
            if (var1 == 0x08)
   1a67a:	2001      	movs	r0, #1
   1a67c:	4770      	bx	lr
                        return false;
   1a67e:	2000      	movs	r0, #0
}
   1a680:	4770      	bx	lr
   1a682:	bf00      	nop
   1a684:	10000130 	.word	0x10000130

0001a688 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a688:	4b08      	ldr	r3, [pc, #32]	; (1a6ac <nrf52_errata_115+0x24>)
   1a68a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a68c:	3304      	adds	r3, #4
   1a68e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1a690:	2a08      	cmp	r2, #8
   1a692:	d001      	beq.n	1a698 <nrf52_errata_115+0x10>
        return false;
   1a694:	2000      	movs	r0, #0
   1a696:	4770      	bx	lr
                switch(var2)
   1a698:	2b00      	cmp	r3, #0
   1a69a:	d804      	bhi.n	1a6a6 <nrf52_errata_115+0x1e>
   1a69c:	e8df f003 	tbb	[pc, r3]
   1a6a0:	01          	.byte	0x01
   1a6a1:	00          	.byte	0x00
            if (var1 == 0x08)
   1a6a2:	2001      	movs	r0, #1
   1a6a4:	4770      	bx	lr
                        return false;
   1a6a6:	2000      	movs	r0, #0
}
   1a6a8:	4770      	bx	lr
   1a6aa:	bf00      	nop
   1a6ac:	10000130 	.word	0x10000130

0001a6b0 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a6b0:	4b08      	ldr	r3, [pc, #32]	; (1a6d4 <nrf52_errata_120+0x24>)
   1a6b2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a6b4:	3304      	adds	r3, #4
   1a6b6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1a6b8:	2a08      	cmp	r2, #8
   1a6ba:	d001      	beq.n	1a6c0 <nrf52_errata_120+0x10>
        return false;
   1a6bc:	2000      	movs	r0, #0
   1a6be:	4770      	bx	lr
                switch(var2)
   1a6c0:	2b00      	cmp	r3, #0
   1a6c2:	d804      	bhi.n	1a6ce <nrf52_errata_120+0x1e>
   1a6c4:	e8df f003 	tbb	[pc, r3]
   1a6c8:	01          	.byte	0x01
   1a6c9:	00          	.byte	0x00
            if (var1 == 0x08)
   1a6ca:	2001      	movs	r0, #1
   1a6cc:	4770      	bx	lr
                        return false;
   1a6ce:	2000      	movs	r0, #0
}
   1a6d0:	4770      	bx	lr
   1a6d2:	bf00      	nop
   1a6d4:	10000130 	.word	0x10000130

0001a6d8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a6d8:	4b03      	ldr	r3, [pc, #12]	; (1a6e8 <nrf52_errata_136+0x10>)
   1a6da:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1a6dc:	2b08      	cmp	r3, #8
   1a6de:	d001      	beq.n	1a6e4 <nrf52_errata_136+0xc>
        return false;
   1a6e0:	2000      	movs	r0, #0
   1a6e2:	4770      	bx	lr
                        return true;
   1a6e4:	2001      	movs	r0, #1
}
   1a6e6:	4770      	bx	lr
   1a6e8:	10000130 	.word	0x10000130

0001a6ec <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a6ec:	4b06      	ldr	r3, [pc, #24]	; (1a708 <nrf52_configuration_249+0x1c>)
   1a6ee:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a6f0:	4a06      	ldr	r2, [pc, #24]	; (1a70c <nrf52_configuration_249+0x20>)
   1a6f2:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1a6f4:	2b08      	cmp	r3, #8
   1a6f6:	d001      	beq.n	1a6fc <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a6f8:	2000      	movs	r0, #0
   1a6fa:	4770      	bx	lr
                switch(var2)
   1a6fc:	2a04      	cmp	r2, #4
   1a6fe:	d801      	bhi.n	1a704 <nrf52_configuration_249+0x18>
   1a700:	2000      	movs	r0, #0
   1a702:	4770      	bx	lr
                        return true;
   1a704:	2001      	movs	r0, #1
    #endif
}
   1a706:	4770      	bx	lr
   1a708:	10000130 	.word	0x10000130
   1a70c:	10000134 	.word	0x10000134

0001a710 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a710:	4b02      	ldr	r3, [pc, #8]	; (1a71c <nvmc_wait+0xc>)
   1a712:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1a716:	2b00      	cmp	r3, #0
   1a718:	d0fa      	beq.n	1a710 <nvmc_wait>
}
   1a71a:	4770      	bx	lr
   1a71c:	4001e000 	.word	0x4001e000

0001a720 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   1a720:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a722:	4b03      	ldr	r3, [pc, #12]	; (1a730 <nvmc_config+0x10>)
   1a724:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   1a728:	f7ff fff2 	bl	1a710 <nvmc_wait>
}
   1a72c:	bd08      	pop	{r3, pc}
   1a72e:	bf00      	nop
   1a730:	4001e000 	.word	0x4001e000

0001a734 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1a734:	4b01      	ldr	r3, [pc, #4]	; (1a73c <SystemCoreClockUpdate+0x8>)
   1a736:	4a02      	ldr	r2, [pc, #8]	; (1a740 <SystemCoreClockUpdate+0xc>)
   1a738:	601a      	str	r2, [r3, #0]
}
   1a73a:	4770      	bx	lr
   1a73c:	20000564 	.word	0x20000564
   1a740:	03d09000 	.word	0x03d09000

0001a744 <SystemInit>:

void SystemInit(void)
{
   1a744:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1a746:	f7ff ff63 	bl	1a610 <nrf52_errata_36>
   1a74a:	b140      	cbz	r0, 1a75e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1a74c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a750:	2200      	movs	r2, #0
   1a752:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1a756:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1a75a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1a75e:	f7ff ff61 	bl	1a624 <nrf52_errata_66>
   1a762:	2800      	cmp	r0, #0
   1a764:	d046      	beq.n	1a7f4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1a766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a76a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1a76e:	4b56      	ldr	r3, [pc, #344]	; (1a8c8 <SystemInit+0x184>)
   1a770:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1a774:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1a778:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1a77c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1a780:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1a784:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1a788:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1a78c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1a790:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1a794:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1a798:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1a79c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1a7a0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1a7a4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1a7a8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1a7ac:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1a7b0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1a7b4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1a7b8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1a7bc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1a7c0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1a7c4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1a7c8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1a7cc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1a7d0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1a7d4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1a7d8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1a7dc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1a7e0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1a7e4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1a7e8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1a7ec:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1a7f0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1a7f4:	f7ff ff20 	bl	1a638 <nrf52_errata_98>
   1a7f8:	b110      	cbz	r0, 1a800 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1a7fa:	4b34      	ldr	r3, [pc, #208]	; (1a8cc <SystemInit+0x188>)
   1a7fc:	4a34      	ldr	r2, [pc, #208]	; (1a8d0 <SystemInit+0x18c>)
   1a7fe:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1a800:	f7ff ff2e 	bl	1a660 <nrf52_errata_103>
   1a804:	b118      	cbz	r0, 1a80e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1a806:	4b33      	ldr	r3, [pc, #204]	; (1a8d4 <SystemInit+0x190>)
   1a808:	22fb      	movs	r2, #251	; 0xfb
   1a80a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1a80e:	f7ff ff3b 	bl	1a688 <nrf52_errata_115>
   1a812:	b148      	cbz	r0, 1a828 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1a814:	4930      	ldr	r1, [pc, #192]	; (1a8d8 <SystemInit+0x194>)
   1a816:	680b      	ldr	r3, [r1, #0]
   1a818:	f023 030f 	bic.w	r3, r3, #15
   1a81c:	4a2f      	ldr	r2, [pc, #188]	; (1a8dc <SystemInit+0x198>)
   1a81e:	6812      	ldr	r2, [r2, #0]
   1a820:	f002 020f 	and.w	r2, r2, #15
   1a824:	4313      	orrs	r3, r2
   1a826:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1a828:	f7ff ff42 	bl	1a6b0 <nrf52_errata_120>
   1a82c:	b118      	cbz	r0, 1a836 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1a82e:	4b2c      	ldr	r3, [pc, #176]	; (1a8e0 <SystemInit+0x19c>)
   1a830:	f44f 7200 	mov.w	r2, #512	; 0x200
   1a834:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1a836:	f7ff ff4f 	bl	1a6d8 <nrf52_errata_136>
   1a83a:	b160      	cbz	r0, 1a856 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1a83c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a840:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1a844:	f013 0f01 	tst.w	r3, #1
   1a848:	d005      	beq.n	1a856 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1a84a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a84e:	f06f 0201 	mvn.w	r2, #1
   1a852:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1a856:	f7ff ff49 	bl	1a6ec <nrf52_configuration_249>
   1a85a:	b138      	cbz	r0, 1a86c <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1a85c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a860:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1a864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a868:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a86c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a870:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1a874:	2b00      	cmp	r3, #0
   1a876:	db08      	blt.n	1a88a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1a878:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a87c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a880:	2b00      	cmp	r3, #0
   1a882:	db02      	blt.n	1a88a <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1a884:	f7ff ff56 	bl	1a734 <SystemCoreClockUpdate>
}
   1a888:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1a88a:	2001      	movs	r0, #1
   1a88c:	f7ff ff48 	bl	1a720 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a890:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1a894:	2512      	movs	r5, #18
   1a896:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1a89a:	f7ff ff39 	bl	1a710 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1a89e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1a8a2:	f7ff ff35 	bl	1a710 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1a8a6:	2000      	movs	r0, #0
   1a8a8:	f7ff ff3a 	bl	1a720 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   1a8ac:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1a8b0:	490c      	ldr	r1, [pc, #48]	; (1a8e4 <SystemInit+0x1a0>)
   1a8b2:	68ca      	ldr	r2, [r1, #12]
   1a8b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a8b8:	4b0b      	ldr	r3, [pc, #44]	; (1a8e8 <SystemInit+0x1a4>)
   1a8ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1a8bc:	60cb      	str	r3, [r1, #12]
   1a8be:	f3bf 8f4f 	dsb	sy
    __NOP();
   1a8c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1a8c4:	e7fd      	b.n	1a8c2 <SystemInit+0x17e>
   1a8c6:	bf00      	nop
   1a8c8:	4000c000 	.word	0x4000c000
   1a8cc:	4000568c 	.word	0x4000568c
   1a8d0:	00038148 	.word	0x00038148
   1a8d4:	4000f000 	.word	0x4000f000
   1a8d8:	40000ee4 	.word	0x40000ee4
   1a8dc:	10000258 	.word	0x10000258
   1a8e0:	40029640 	.word	0x40029640
   1a8e4:	e000ed00 	.word	0xe000ed00
   1a8e8:	05fa0004 	.word	0x05fa0004

0001a8ec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1a8ec:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1a8ee:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1a8f0:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   1a8f4:	f1d3 031f 	rsbs	r3, r3, #31
   1a8f8:	d415      	bmi.n	1a926 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1a8fa:	2201      	movs	r2, #1
   1a8fc:	409a      	lsls	r2, r3
   1a8fe:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a902:	f3bf 8f5b 	dmb	ish
   1a906:	e850 5f00 	ldrex	r5, [r0]
   1a90a:	42a5      	cmp	r5, r4
   1a90c:	d104      	bne.n	1a918 <nrfx_flag32_alloc+0x2c>
   1a90e:	e840 2c00 	strex	ip, r2, [r0]
   1a912:	f1bc 0f00 	cmp.w	ip, #0
   1a916:	d1f6      	bne.n	1a906 <nrfx_flag32_alloc+0x1a>
   1a918:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1a91c:	d1e7      	bne.n	1a8ee <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   1a91e:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   1a920:	4802      	ldr	r0, [pc, #8]	; (1a92c <nrfx_flag32_alloc+0x40>)
}
   1a922:	bc30      	pop	{r4, r5}
   1a924:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   1a926:	4802      	ldr	r0, [pc, #8]	; (1a930 <nrfx_flag32_alloc+0x44>)
   1a928:	e7fb      	b.n	1a922 <nrfx_flag32_alloc+0x36>
   1a92a:	bf00      	nop
   1a92c:	0bad0000 	.word	0x0bad0000
   1a930:	0bad0002 	.word	0x0bad0002

0001a934 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1a934:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1a936:	6803      	ldr	r3, [r0, #0]
   1a938:	460c      	mov	r4, r1
   1a93a:	fa23 f101 	lsr.w	r1, r3, r1
   1a93e:	f011 0f01 	tst.w	r1, #1
   1a942:	d114      	bne.n	1a96e <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   1a944:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1a946:	2301      	movs	r3, #1
   1a948:	40a3      	lsls	r3, r4
   1a94a:	4313      	orrs	r3, r2
   1a94c:	f3bf 8f5b 	dmb	ish
   1a950:	e850 1f00 	ldrex	r1, [r0]
   1a954:	4291      	cmp	r1, r2
   1a956:	d104      	bne.n	1a962 <nrfx_flag32_free+0x2e>
   1a958:	e840 3c00 	strex	ip, r3, [r0]
   1a95c:	f1bc 0f00 	cmp.w	ip, #0
   1a960:	d1f6      	bne.n	1a950 <nrfx_flag32_free+0x1c>
   1a962:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1a966:	d1ed      	bne.n	1a944 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1a968:	4802      	ldr	r0, [pc, #8]	; (1a974 <nrfx_flag32_free+0x40>)
}
   1a96a:	bc10      	pop	{r4}
   1a96c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   1a96e:	4802      	ldr	r0, [pc, #8]	; (1a978 <nrfx_flag32_free+0x44>)
   1a970:	e7fb      	b.n	1a96a <nrfx_flag32_free+0x36>
   1a972:	bf00      	nop
   1a974:	0bad0000 	.word	0x0bad0000
   1a978:	0bad0004 	.word	0x0bad0004

0001a97c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1a97c:	3008      	adds	r0, #8
   1a97e:	4b03      	ldr	r3, [pc, #12]	; (1a98c <pin_in_use+0x10>)
   1a980:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1a984:	f000 0001 	and.w	r0, r0, #1
   1a988:	4770      	bx	lr
   1a98a:	bf00      	nop
   1a98c:	20000568 	.word	0x20000568

0001a990 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a990:	3008      	adds	r0, #8
   1a992:	4b03      	ldr	r3, [pc, #12]	; (1a9a0 <pin_in_use_by_te+0x10>)
   1a994:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1a998:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a99c:	4770      	bx	lr
   1a99e:	bf00      	nop
   1a9a0:	20000568 	.word	0x20000568

0001a9a4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1a9a4:	3008      	adds	r0, #8
   1a9a6:	4b04      	ldr	r3, [pc, #16]	; (1a9b8 <pin_has_trigger+0x14>)
   1a9a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1a9ac:	f010 001c 	ands.w	r0, r0, #28
   1a9b0:	bf18      	it	ne
   1a9b2:	2001      	movne	r0, #1
   1a9b4:	4770      	bx	lr
   1a9b6:	bf00      	nop
   1a9b8:	20000568 	.word	0x20000568

0001a9bc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a9bc:	3008      	adds	r0, #8
   1a9be:	4b03      	ldr	r3, [pc, #12]	; (1a9cc <pin_is_output+0x10>)
   1a9c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1a9c4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1a9c8:	4770      	bx	lr
   1a9ca:	bf00      	nop
   1a9cc:	20000568 	.word	0x20000568

0001a9d0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a9d0:	3008      	adds	r0, #8
   1a9d2:	4b02      	ldr	r3, [pc, #8]	; (1a9dc <pin_te_get+0xc>)
   1a9d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1a9d8:	0b40      	lsrs	r0, r0, #13
   1a9da:	4770      	bx	lr
   1a9dc:	20000568 	.word	0x20000568

0001a9e0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1a9e0:	2200      	movs	r2, #0
   1a9e2:	e004      	b.n	1a9ee <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1a9e4:	f04f 33ff 	mov.w	r3, #4294967295
   1a9e8:	4283      	cmp	r3, r0
   1a9ea:	d00f      	beq.n	1aa0c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1a9ec:	3201      	adds	r2, #1
   1a9ee:	2a2f      	cmp	r2, #47	; 0x2f
   1a9f0:	d80a      	bhi.n	1aa08 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1a9f2:	f102 0308 	add.w	r3, r2, #8
   1a9f6:	4906      	ldr	r1, [pc, #24]	; (1aa10 <handler_in_use+0x30>)
   1a9f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1a9fc:	f413 7f80 	tst.w	r3, #256	; 0x100
   1aa00:	d0f0      	beq.n	1a9e4 <handler_in_use+0x4>
   1aa02:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1aa06:	e7ef      	b.n	1a9e8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   1aa08:	2000      	movs	r0, #0
   1aa0a:	4770      	bx	lr
            return true;
   1aa0c:	2001      	movs	r0, #1
}
   1aa0e:	4770      	bx	lr
   1aa10:	20000568 	.word	0x20000568

0001aa14 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1aa14:	2300      	movs	r3, #0
   1aa16:	b113      	cbz	r3, 1aa1e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   1aa18:	f04f 30ff 	mov.w	r0, #4294967295
}
   1aa1c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1aa1e:	4a07      	ldr	r2, [pc, #28]	; (1aa3c <find_handler+0x28>)
   1aa20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1aa24:	4282      	cmp	r2, r0
   1aa26:	d001      	beq.n	1aa2c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1aa28:	3301      	adds	r3, #1
   1aa2a:	e7f4      	b.n	1aa16 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1aa2c:	4a03      	ldr	r2, [pc, #12]	; (1aa3c <find_handler+0x28>)
   1aa2e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1aa32:	6852      	ldr	r2, [r2, #4]
   1aa34:	428a      	cmp	r2, r1
   1aa36:	d1f7      	bne.n	1aa28 <find_handler+0x14>
            return i;
   1aa38:	4618      	mov	r0, r3
   1aa3a:	4770      	bx	lr
   1aa3c:	20000568 	.word	0x20000568

0001aa40 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1aa40:	3008      	adds	r0, #8
   1aa42:	4b06      	ldr	r3, [pc, #24]	; (1aa5c <channel_handler_get+0x1c>)
   1aa44:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1aa48:	f410 7f80 	tst.w	r0, #256	; 0x100
   1aa4c:	d004      	beq.n	1aa58 <channel_handler_get+0x18>
   1aa4e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   1aa52:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1aa56:	4770      	bx	lr
        return NULL;
   1aa58:	2000      	movs	r0, #0
}
   1aa5a:	4770      	bx	lr
   1aa5c:	20000568 	.word	0x20000568

0001aa60 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1aa60:	b570      	push	{r4, r5, r6, lr}
   1aa62:	4604      	mov	r4, r0
   1aa64:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1aa66:	f7ff ffeb 	bl	1aa40 <channel_handler_get>

    if (handler)
   1aa6a:	b120      	cbz	r0, 1aa76 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1aa6c:	6806      	ldr	r6, [r0, #0]
   1aa6e:	6842      	ldr	r2, [r0, #4]
   1aa70:	4629      	mov	r1, r5
   1aa72:	4620      	mov	r0, r4
   1aa74:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1aa76:	4b04      	ldr	r3, [pc, #16]	; (1aa88 <call_handler+0x28>)
   1aa78:	689b      	ldr	r3, [r3, #8]
   1aa7a:	b123      	cbz	r3, 1aa86 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1aa7c:	4a02      	ldr	r2, [pc, #8]	; (1aa88 <call_handler+0x28>)
   1aa7e:	68d2      	ldr	r2, [r2, #12]
   1aa80:	4629      	mov	r1, r5
   1aa82:	4620      	mov	r0, r4
   1aa84:	4798      	blx	r3
    }
}
   1aa86:	bd70      	pop	{r4, r5, r6, pc}
   1aa88:	20000568 	.word	0x20000568

0001aa8c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   1aa8c:	b570      	push	{r4, r5, r6, lr}
   1aa8e:	4604      	mov	r4, r0
   1aa90:	460d      	mov	r5, r1
   1aa92:	4616      	mov	r6, r2
    if (is_level(trigger))
   1aa94:	4608      	mov	r0, r1
   1aa96:	f009 f894 	bl	23bc2 <is_level>
   1aa9a:	b9d0      	cbnz	r0, 1aad2 <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1aa9c:	2e02      	cmp	r6, #2
   1aa9e:	d03e      	beq.n	1ab1e <next_sense_cond_call_handler+0x92>
   1aaa0:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   1aaa2:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1aaa6:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1aaa8:	2901      	cmp	r1, #1
   1aaaa:	d03a      	beq.n	1ab22 <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
   1aaac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1aab0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1aab4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1aab8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1aabc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1aac0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1aac4:	2d03      	cmp	r5, #3
   1aac6:	d030      	beq.n	1ab2a <next_sense_cond_call_handler+0x9e>
   1aac8:	2e02      	cmp	r6, #2
   1aaca:	d02c      	beq.n	1ab26 <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1aacc:	2e03      	cmp	r6, #3
   1aace:	d031      	beq.n	1ab34 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   1aad0:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   1aad2:	4629      	mov	r1, r5
   1aad4:	4620      	mov	r0, r4
   1aad6:	f7ff ffc3 	bl	1aa60 <call_handler>
    *p_pin = pin_number & 0x1F;
   1aada:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1aade:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1aae0:	2c01      	cmp	r4, #1
   1aae2:	d01a      	beq.n	1ab1a <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
   1aae4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1aae8:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
   1aaec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1aaf0:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1aaf4:	4296      	cmp	r6, r2
   1aaf6:	d1eb      	bne.n	1aad0 <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1aaf8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1aafc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1ab00:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1ab04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ab08:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1ab0c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ab10:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1ab14:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   1ab18:	e7da      	b.n	1aad0 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   1ab1a:	4908      	ldr	r1, [pc, #32]	; (1ab3c <next_sense_cond_call_handler+0xb0>)
   1ab1c:	e7e4      	b.n	1aae8 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1ab1e:	2003      	movs	r0, #3
   1ab20:	e7bf      	b.n	1aaa2 <next_sense_cond_call_handler+0x16>
   1ab22:	4906      	ldr	r1, [pc, #24]	; (1ab3c <next_sense_cond_call_handler+0xb0>)
   1ab24:	e7c4      	b.n	1aab0 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1ab26:	2d01      	cmp	r5, #1
   1ab28:	d1d0      	bne.n	1aacc <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   1ab2a:	4629      	mov	r1, r5
   1ab2c:	4620      	mov	r0, r4
   1ab2e:	f7ff ff97 	bl	1aa60 <call_handler>
}
   1ab32:	e7cd      	b.n	1aad0 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1ab34:	2d02      	cmp	r5, #2
   1ab36:	d1cb      	bne.n	1aad0 <next_sense_cond_call_handler+0x44>
   1ab38:	e7f7      	b.n	1ab2a <next_sense_cond_call_handler+0x9e>
   1ab3a:	bf00      	nop
   1ab3c:	50000300 	.word	0x50000300

0001ab40 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   1ab40:	b410      	push	{r4}
   1ab42:	b083      	sub	sp, #12
   1ab44:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1ab46:	4b12      	ldr	r3, [pc, #72]	; (1ab90 <latch_pending_read_and_check+0x50>)
   1ab48:	e893 0003 	ldmia.w	r3, {r0, r1}
   1ab4c:	ab02      	add	r3, sp, #8
   1ab4e:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1ab52:	4620      	mov	r0, r4
   1ab54:	2300      	movs	r3, #0
   1ab56:	e00b      	b.n	1ab70 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   1ab58:	aa02      	add	r2, sp, #8
   1ab5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1ab5e:	f852 2c08 	ldr.w	r2, [r2, #-8]
   1ab62:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1ab66:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1ab6a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1ab6e:	3301      	adds	r3, #1
   1ab70:	2b01      	cmp	r3, #1
   1ab72:	d9f1      	bls.n	1ab58 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1ab74:	2300      	movs	r3, #0
   1ab76:	2b01      	cmp	r3, #1
   1ab78:	d804      	bhi.n	1ab84 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   1ab7a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1ab7e:	b92a      	cbnz	r2, 1ab8c <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1ab80:	3301      	adds	r3, #1
   1ab82:	e7f8      	b.n	1ab76 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   1ab84:	2000      	movs	r0, #0
}
   1ab86:	b003      	add	sp, #12
   1ab88:	bc10      	pop	{r4}
   1ab8a:	4770      	bx	lr
            return true;
   1ab8c:	2001      	movs	r0, #1
   1ab8e:	e7fa      	b.n	1ab86 <latch_pending_read_and_check+0x46>
   1ab90:	00024e78 	.word	0x00024e78

0001ab94 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ab94:	f100 0208 	add.w	r2, r0, #8
   1ab98:	4b0e      	ldr	r3, [pc, #56]	; (1abd4 <release_handler+0x40>)
   1ab9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1ab9e:	f413 7f80 	tst.w	r3, #256	; 0x100
   1aba2:	d016      	beq.n	1abd2 <release_handler+0x3e>
{
   1aba4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1aba6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1abaa:	4610      	mov	r0, r2
   1abac:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1abb0:	4a08      	ldr	r2, [pc, #32]	; (1abd4 <release_handler+0x40>)
   1abb2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1abb6:	4620      	mov	r0, r4
   1abb8:	f7ff ff12 	bl	1a9e0 <handler_in_use>
   1abbc:	b100      	cbz	r0, 1abc0 <release_handler+0x2c>
}
   1abbe:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   1abc0:	4804      	ldr	r0, [pc, #16]	; (1abd4 <release_handler+0x40>)
   1abc2:	2300      	movs	r3, #0
   1abc4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1abc8:	4621      	mov	r1, r4
   1abca:	3074      	adds	r0, #116	; 0x74
   1abcc:	f7ff feb2 	bl	1a934 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1abd0:	e7f5      	b.n	1abbe <release_handler+0x2a>
   1abd2:	4770      	bx	lr
   1abd4:	20000568 	.word	0x20000568

0001abd8 <pin_handler_trigger_uninit>:
{
   1abd8:	b510      	push	{r4, lr}
   1abda:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   1abdc:	f7ff fed8 	bl	1a990 <pin_in_use_by_te>
   1abe0:	b140      	cbz	r0, 1abf4 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1abe2:	4620      	mov	r0, r4
   1abe4:	f7ff fef4 	bl	1a9d0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1abe8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1abec:	4b06      	ldr	r3, [pc, #24]	; (1ac08 <pin_handler_trigger_uninit+0x30>)
   1abee:	2200      	movs	r2, #0
   1abf0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1abf4:	4620      	mov	r0, r4
   1abf6:	f7ff ffcd 	bl	1ab94 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1abfa:	3408      	adds	r4, #8
   1abfc:	4b03      	ldr	r3, [pc, #12]	; (1ac0c <pin_handler_trigger_uninit+0x34>)
   1abfe:	2200      	movs	r2, #0
   1ac00:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   1ac04:	bd10      	pop	{r4, pc}
   1ac06:	bf00      	nop
   1ac08:	40006000 	.word	0x40006000
   1ac0c:	20000568 	.word	0x20000568

0001ac10 <pin_handler_set>:
{
   1ac10:	b570      	push	{r4, r5, r6, lr}
   1ac12:	b082      	sub	sp, #8
   1ac14:	4606      	mov	r6, r0
   1ac16:	460c      	mov	r4, r1
   1ac18:	4615      	mov	r5, r2
    release_handler(pin);
   1ac1a:	f7ff ffbb 	bl	1ab94 <release_handler>
    if (!handler)
   1ac1e:	b324      	cbz	r4, 1ac6a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   1ac20:	4629      	mov	r1, r5
   1ac22:	4620      	mov	r0, r4
   1ac24:	f7ff fef6 	bl	1aa14 <find_handler>
    if (handler_id < 0)
   1ac28:	1e03      	subs	r3, r0, #0
   1ac2a:	db13      	blt.n	1ac54 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   1ac2c:	4a10      	ldr	r2, [pc, #64]	; (1ac70 <pin_handler_set+0x60>)
   1ac2e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1ac32:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1ac36:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ac38:	025b      	lsls	r3, r3, #9
   1ac3a:	b29b      	uxth	r3, r3
   1ac3c:	f106 0008 	add.w	r0, r6, #8
   1ac40:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   1ac44:	430b      	orrs	r3, r1
   1ac46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1ac4a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   1ac4e:	4809      	ldr	r0, [pc, #36]	; (1ac74 <pin_handler_set+0x64>)
}
   1ac50:	b002      	add	sp, #8
   1ac52:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1ac54:	f10d 0107 	add.w	r1, sp, #7
   1ac58:	4807      	ldr	r0, [pc, #28]	; (1ac78 <pin_handler_set+0x68>)
   1ac5a:	f7ff fe47 	bl	1a8ec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1ac5e:	4b05      	ldr	r3, [pc, #20]	; (1ac74 <pin_handler_set+0x64>)
   1ac60:	4298      	cmp	r0, r3
   1ac62:	d1f5      	bne.n	1ac50 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1ac64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ac68:	e7e0      	b.n	1ac2c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   1ac6a:	4802      	ldr	r0, [pc, #8]	; (1ac74 <pin_handler_set+0x64>)
   1ac6c:	e7f0      	b.n	1ac50 <pin_handler_set+0x40>
   1ac6e:	bf00      	nop
   1ac70:	20000568 	.word	0x20000568
   1ac74:	0bad0000 	.word	0x0bad0000
   1ac78:	200005dc 	.word	0x200005dc

0001ac7c <port_event_handle>:

static void port_event_handle(void)
{
   1ac7c:	b570      	push	{r4, r5, r6, lr}
   1ac7e:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1ac80:	4a2c      	ldr	r2, [pc, #176]	; (1ad34 <port_event_handle+0xb8>)
   1ac82:	466b      	mov	r3, sp
   1ac84:	e892 0003 	ldmia.w	r2, {r0, r1}
   1ac88:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1ac8c:	2300      	movs	r3, #0
   1ac8e:	a802      	add	r0, sp, #8
   1ac90:	e00b      	b.n	1acaa <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   1ac92:	aa04      	add	r2, sp, #16
   1ac94:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1ac98:	f852 2c10 	ldr.w	r2, [r2, #-16]
   1ac9c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1aca0:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1aca4:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1aca8:	3301      	adds	r3, #1
   1acaa:	2b01      	cmp	r3, #1
   1acac:	d9f1      	bls.n	1ac92 <port_event_handle+0x16>
   1acae:	e03d      	b.n	1ad2c <port_event_handle+0xb0>
        case 1: return NRF_P1;
   1acb0:	4e21      	ldr	r6, [pc, #132]	; (1ad38 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1acb2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   1acb6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   1acba:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1acbe:	f7ff fee5 	bl	1aa8c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   1acc2:	2301      	movs	r3, #1
   1acc4:	40ab      	lsls	r3, r5
   1acc6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   1acca:	ab04      	add	r3, sp, #16
   1accc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1acd0:	f853 0c08 	ldr.w	r0, [r3, #-8]
   1acd4:	b1f8      	cbz	r0, 1ad16 <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
   1acd6:	fa90 f0a0 	rbit	r0, r0
   1acda:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   1acde:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ace2:	f100 0208 	add.w	r2, r0, #8
   1ace6:	4b15      	ldr	r3, [pc, #84]	; (1ad3c <port_event_handle+0xc0>)
   1ace8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   1acec:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1acf0:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   1acf2:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1acf6:	ae02      	add	r6, sp, #8
   1acf8:	2301      	movs	r3, #1
   1acfa:	fa03 f202 	lsl.w	r2, r3, r2
   1acfe:	5d73      	ldrb	r3, [r6, r5]
   1ad00:	ea23 0302 	bic.w	r3, r3, r2
   1ad04:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
   1ad06:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   1ad0a:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ad0c:	2b01      	cmp	r3, #1
   1ad0e:	d0cf      	beq.n	1acb0 <port_event_handle+0x34>
        case 0: return NRF_P0;
   1ad10:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1ad14:	e7cd      	b.n	1acb2 <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ad16:	3401      	adds	r4, #1
   1ad18:	2c01      	cmp	r4, #1
   1ad1a:	d9d6      	bls.n	1acca <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ad1c:	4b08      	ldr	r3, [pc, #32]	; (1ad40 <port_event_handle+0xc4>)
   1ad1e:	2200      	movs	r2, #0
   1ad20:	601a      	str	r2, [r3, #0]
   1ad22:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   1ad24:	a802      	add	r0, sp, #8
   1ad26:	f7ff ff0b 	bl	1ab40 <latch_pending_read_and_check>
   1ad2a:	b108      	cbz	r0, 1ad30 <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ad2c:	2400      	movs	r4, #0
   1ad2e:	e7f3      	b.n	1ad18 <port_event_handle+0x9c>
}
   1ad30:	b004      	add	sp, #16
   1ad32:	bd70      	pop	{r4, r5, r6, pc}
   1ad34:	00024e78 	.word	0x00024e78
   1ad38:	50000300 	.word	0x50000300
   1ad3c:	20000568 	.word	0x20000568
   1ad40:	4000617c 	.word	0x4000617c

0001ad44 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   1ad44:	b538      	push	{r3, r4, r5, lr}
   1ad46:	4604      	mov	r4, r0
    while (mask)
   1ad48:	b1cc      	cbz	r4, 1ad7e <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   1ad4a:	fa94 f3a4 	rbit	r3, r4
   1ad4e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1ad52:	2201      	movs	r2, #1
   1ad54:	409a      	lsls	r2, r3
   1ad56:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ad5a:	4a09      	ldr	r2, [pc, #36]	; (1ad80 <gpiote_evt_handle+0x3c>)
   1ad5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1ad60:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1ad64:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1ad68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1ad6c:	f3c0 4001 	ubfx	r0, r0, #16, #2
   1ad70:	f008 ff25 	bl	23bbe <gpiote_polarity_to_trigger>
   1ad74:	4601      	mov	r1, r0
   1ad76:	4628      	mov	r0, r5
   1ad78:	f7ff fe72 	bl	1aa60 <call_handler>
   1ad7c:	e7e4      	b.n	1ad48 <gpiote_evt_handle+0x4>
    }
}
   1ad7e:	bd38      	pop	{r3, r4, r5, pc}
   1ad80:	40006000 	.word	0x40006000

0001ad84 <nrfx_gpiote_input_configure>:
{
   1ad84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ad88:	4604      	mov	r4, r0
   1ad8a:	4615      	mov	r5, r2
   1ad8c:	461e      	mov	r6, r3
    if (p_input_config)
   1ad8e:	b361      	cbz	r1, 1adea <nrfx_gpiote_input_configure+0x66>
   1ad90:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   1ad92:	f008 fefe 	bl	23b92 <pin_is_task_output>
   1ad96:	2800      	cmp	r0, #0
   1ad98:	f040 8097 	bne.w	1aeca <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
   1ad9c:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1ada0:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ada2:	2b01      	cmp	r3, #1
   1ada4:	d042      	beq.n	1ae2c <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
   1ada6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1adaa:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1adae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1adb2:	2f00      	cmp	r7, #0
   1adb4:	d03c      	beq.n	1ae30 <nrfx_gpiote_input_configure+0xac>
   1adb6:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1adb8:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   1adbc:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1adc0:	2f00      	cmp	r7, #0
   1adc2:	d037      	beq.n	1ae34 <nrfx_gpiote_input_configure+0xb0>
   1adc4:	7839      	ldrb	r1, [r7, #0]
   1adc6:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1adc8:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   1adca:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1adce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1add2:	4a42      	ldr	r2, [pc, #264]	; (1aedc <nrfx_gpiote_input_configure+0x158>)
   1add4:	f104 0108 	add.w	r1, r4, #8
   1add8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1addc:	f023 0302 	bic.w	r3, r3, #2
   1ade0:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1ade2:	f043 0301 	orr.w	r3, r3, #1
   1ade6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1adea:	b1b5      	cbz	r5, 1ae1a <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1adec:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1adf0:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   1adf4:	4620      	mov	r0, r4
   1adf6:	f7ff fde1 	bl	1a9bc <pin_is_output>
   1adfa:	b1e8      	cbz	r0, 1ae38 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
   1adfc:	f1b9 0f00 	cmp.w	r9, #0
   1ae00:	d165      	bne.n	1aece <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1ae02:	4b36      	ldr	r3, [pc, #216]	; (1aedc <nrfx_gpiote_input_configure+0x158>)
   1ae04:	f104 0208 	add.w	r2, r4, #8
   1ae08:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   1ae0c:	f020 001c 	bic.w	r0, r0, #28
   1ae10:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1ae12:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   1ae16:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   1ae1a:	2e00      	cmp	r6, #0
   1ae1c:	d05b      	beq.n	1aed6 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1ae1e:	6872      	ldr	r2, [r6, #4]
   1ae20:	6831      	ldr	r1, [r6, #0]
   1ae22:	4620      	mov	r0, r4
   1ae24:	f7ff fef4 	bl	1ac10 <pin_handler_set>
}
   1ae28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
   1ae2c:	482c      	ldr	r0, [pc, #176]	; (1aee0 <nrfx_gpiote_input_configure+0x15c>)
   1ae2e:	e7bc      	b.n	1adaa <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1ae30:	2100      	movs	r1, #0
   1ae32:	e7c1      	b.n	1adb8 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1ae34:	2100      	movs	r1, #0
   1ae36:	e7c7      	b.n	1adc8 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1ae38:	4b28      	ldr	r3, [pc, #160]	; (1aedc <nrfx_gpiote_input_configure+0x158>)
   1ae3a:	f104 0208 	add.w	r2, r4, #8
   1ae3e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   1ae42:	f027 0720 	bic.w	r7, r7, #32
   1ae46:	04ff      	lsls	r7, r7, #19
   1ae48:	0cff      	lsrs	r7, r7, #19
   1ae4a:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   1ae4e:	f1b9 0f00 	cmp.w	r9, #0
   1ae52:	d0d6      	beq.n	1ae02 <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
   1ae54:	f1b8 0f03 	cmp.w	r8, #3
   1ae58:	d83b      	bhi.n	1aed2 <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1ae5a:	686b      	ldr	r3, [r5, #4]
   1ae5c:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1ae5e:	f1b8 0f00 	cmp.w	r8, #0
   1ae62:	d106      	bne.n	1ae72 <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   1ae64:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   1ae68:	4b1e      	ldr	r3, [pc, #120]	; (1aee4 <nrfx_gpiote_input_configure+0x160>)
   1ae6a:	2200      	movs	r2, #0
   1ae6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1ae70:	e7c7      	b.n	1ae02 <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   1ae72:	4640      	mov	r0, r8
   1ae74:	f008 fea4 	bl	23bc0 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1ae78:	4b1a      	ldr	r3, [pc, #104]	; (1aee4 <nrfx_gpiote_input_configure+0x160>)
   1ae7a:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1ae7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1ae82:	f021 0103 	bic.w	r1, r1, #3
   1ae86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ae8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1ae8e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1ae92:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1ae96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ae9a:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   1ae9e:	0221      	lsls	r1, r4, #8
   1aea0:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1aea4:	0400      	lsls	r0, r0, #16
   1aea6:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aeaa:	4301      	orrs	r1, r0
   1aeac:	ea4c 0101 	orr.w	r1, ip, r1
   1aeb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1aeb4:	036d      	lsls	r5, r5, #13
   1aeb6:	b2ad      	uxth	r5, r5
   1aeb8:	f104 0308 	add.w	r3, r4, #8
   1aebc:	432f      	orrs	r7, r5
   1aebe:	f047 0720 	orr.w	r7, r7, #32
   1aec2:	4a06      	ldr	r2, [pc, #24]	; (1aedc <nrfx_gpiote_input_configure+0x158>)
   1aec4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   1aec8:	e79b      	b.n	1ae02 <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
   1aeca:	4807      	ldr	r0, [pc, #28]	; (1aee8 <nrfx_gpiote_input_configure+0x164>)
   1aecc:	e7ac      	b.n	1ae28 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
   1aece:	4806      	ldr	r0, [pc, #24]	; (1aee8 <nrfx_gpiote_input_configure+0x164>)
   1aed0:	e7aa      	b.n	1ae28 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
   1aed2:	4805      	ldr	r0, [pc, #20]	; (1aee8 <nrfx_gpiote_input_configure+0x164>)
   1aed4:	e7a8      	b.n	1ae28 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
   1aed6:	4805      	ldr	r0, [pc, #20]	; (1aeec <nrfx_gpiote_input_configure+0x168>)
   1aed8:	e7a6      	b.n	1ae28 <nrfx_gpiote_input_configure+0xa4>
   1aeda:	bf00      	nop
   1aedc:	20000568 	.word	0x20000568
   1aee0:	50000300 	.word	0x50000300
   1aee4:	40006000 	.word	0x40006000
   1aee8:	0bad0004 	.word	0x0bad0004
   1aeec:	0bad0000 	.word	0x0bad0000

0001aef0 <nrfx_gpiote_output_configure>:
{
   1aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aef2:	4604      	mov	r4, r0
   1aef4:	4615      	mov	r5, r2
    if (p_config)
   1aef6:	2900      	cmp	r1, #0
   1aef8:	d052      	beq.n	1afa0 <nrfx_gpiote_output_configure+0xb0>
   1aefa:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1aefc:	f008 fe58 	bl	23bb0 <pin_is_input>
   1af00:	b128      	cbz	r0, 1af0e <nrfx_gpiote_output_configure+0x1e>
   1af02:	4620      	mov	r0, r4
   1af04:	f7ff fd44 	bl	1a990 <pin_in_use_by_te>
   1af08:	2800      	cmp	r0, #0
   1af0a:	f040 809d 	bne.w	1b048 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1af0e:	4620      	mov	r0, r4
   1af10:	f7ff fd48 	bl	1a9a4 <pin_has_trigger>
   1af14:	b118      	cbz	r0, 1af1e <nrfx_gpiote_output_configure+0x2e>
   1af16:	7873      	ldrb	r3, [r6, #1]
   1af18:	2b01      	cmp	r3, #1
   1af1a:	f000 8097 	beq.w	1b04c <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1af1e:	f106 0c01 	add.w	ip, r6, #1
   1af22:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   1af24:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1af28:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1af2a:	2b01      	cmp	r3, #1
   1af2c:	d07c      	beq.n	1b028 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
   1af2e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1af32:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1af36:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1af3a:	f1bc 0f00 	cmp.w	ip, #0
   1af3e:	d075      	beq.n	1b02c <nrfx_gpiote_output_configure+0x13c>
   1af40:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1af42:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1af46:	2f00      	cmp	r7, #0
   1af48:	d072      	beq.n	1b030 <nrfx_gpiote_output_configure+0x140>
   1af4a:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1af4e:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1af52:	2e00      	cmp	r6, #0
   1af54:	d06f      	beq.n	1b036 <nrfx_gpiote_output_configure+0x146>
   1af56:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1af5a:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   1af5e:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1af62:	f1bc 0f00 	cmp.w	ip, #0
   1af66:	d069      	beq.n	1b03c <nrfx_gpiote_output_configure+0x14c>
   1af68:	7873      	ldrb	r3, [r6, #1]
   1af6a:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1af6c:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1af70:	2f00      	cmp	r7, #0
   1af72:	d065      	beq.n	1b040 <nrfx_gpiote_output_configure+0x150>
   1af74:	78b7      	ldrb	r7, [r6, #2]
   1af76:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1af78:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1af7a:	2e00      	cmp	r6, #0
   1af7c:	d062      	beq.n	1b044 <nrfx_gpiote_output_configure+0x154>
   1af7e:	7836      	ldrb	r6, [r6, #0]
   1af80:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1af82:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1af84:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   1af86:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1af8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1af8e:	4a33      	ldr	r2, [pc, #204]	; (1b05c <nrfx_gpiote_output_configure+0x16c>)
   1af90:	f104 0108 	add.w	r1, r4, #8
   1af94:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1af98:	f043 0303 	orr.w	r3, r3, #3
   1af9c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1afa0:	2d00      	cmp	r5, #0
   1afa2:	d055      	beq.n	1b050 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
   1afa4:	4620      	mov	r0, r4
   1afa6:	f008 fe03 	bl	23bb0 <pin_is_input>
   1afaa:	2800      	cmp	r0, #0
   1afac:	d152      	bne.n	1b054 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
   1afae:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   1afb0:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   1afb4:	4b2a      	ldr	r3, [pc, #168]	; (1b060 <nrfx_gpiote_output_configure+0x170>)
   1afb6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1afba:	4928      	ldr	r1, [pc, #160]	; (1b05c <nrfx_gpiote_output_configure+0x16c>)
   1afbc:	f104 0008 	add.w	r0, r4, #8
   1afc0:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   1afc4:	f023 0320 	bic.w	r3, r3, #32
   1afc8:	04db      	lsls	r3, r3, #19
   1afca:	0cdb      	lsrs	r3, r3, #19
   1afcc:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1afd0:	7869      	ldrb	r1, [r5, #1]
   1afd2:	2900      	cmp	r1, #0
   1afd4:	d040      	beq.n	1b058 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1afd6:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1afda:	4d21      	ldr	r5, [pc, #132]	; (1b060 <nrfx_gpiote_output_configure+0x170>)
   1afdc:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   1afe0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1afe4:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
   1afe8:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   1afec:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aff0:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   1aff4:	0220      	lsls	r0, r4, #8
   1aff6:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1affa:	0409      	lsls	r1, r1, #16
   1affc:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b000:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1b002:	ea4f 500c 	mov.w	r0, ip, lsl #20
   1b006:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1b00a:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b00c:	4339      	orrs	r1, r7
   1b00e:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1b012:	0352      	lsls	r2, r2, #13
   1b014:	b292      	uxth	r2, r2
   1b016:	3408      	adds	r4, #8
   1b018:	431a      	orrs	r2, r3
   1b01a:	f042 0220 	orr.w	r2, r2, #32
   1b01e:	4b0f      	ldr	r3, [pc, #60]	; (1b05c <nrfx_gpiote_output_configure+0x16c>)
   1b020:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   1b024:	480f      	ldr	r0, [pc, #60]	; (1b064 <nrfx_gpiote_output_configure+0x174>)
   1b026:	e014      	b.n	1b052 <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
   1b028:	490f      	ldr	r1, [pc, #60]	; (1b068 <nrfx_gpiote_output_configure+0x178>)
   1b02a:	e782      	b.n	1af32 <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1b02c:	2300      	movs	r3, #0
   1b02e:	e788      	b.n	1af42 <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1b030:	f04f 0e00 	mov.w	lr, #0
   1b034:	e78b      	b.n	1af4e <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1b036:	f04f 0e00 	mov.w	lr, #0
   1b03a:	e78e      	b.n	1af5a <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1b03c:	2300      	movs	r3, #0
   1b03e:	e795      	b.n	1af6c <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1b040:	2700      	movs	r7, #0
   1b042:	e799      	b.n	1af78 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1b044:	2600      	movs	r6, #0
   1b046:	e79c      	b.n	1af82 <nrfx_gpiote_output_configure+0x92>
   1b048:	4808      	ldr	r0, [pc, #32]	; (1b06c <nrfx_gpiote_output_configure+0x17c>)
   1b04a:	e002      	b.n	1b052 <nrfx_gpiote_output_configure+0x162>
   1b04c:	4807      	ldr	r0, [pc, #28]	; (1b06c <nrfx_gpiote_output_configure+0x17c>)
   1b04e:	e000      	b.n	1b052 <nrfx_gpiote_output_configure+0x162>
   1b050:	4804      	ldr	r0, [pc, #16]	; (1b064 <nrfx_gpiote_output_configure+0x174>)
}
   1b052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   1b054:	4805      	ldr	r0, [pc, #20]	; (1b06c <nrfx_gpiote_output_configure+0x17c>)
   1b056:	e7fc      	b.n	1b052 <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
   1b058:	4802      	ldr	r0, [pc, #8]	; (1b064 <nrfx_gpiote_output_configure+0x174>)
   1b05a:	e7fa      	b.n	1b052 <nrfx_gpiote_output_configure+0x162>
   1b05c:	20000568 	.word	0x20000568
   1b060:	40006000 	.word	0x40006000
   1b064:	0bad0000 	.word	0x0bad0000
   1b068:	50000300 	.word	0x50000300
   1b06c:	0bad0004 	.word	0x0bad0004

0001b070 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1b070:	4b01      	ldr	r3, [pc, #4]	; (1b078 <nrfx_gpiote_global_callback_set+0x8>)
   1b072:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   1b074:	60d9      	str	r1, [r3, #12]
}
   1b076:	4770      	bx	lr
   1b078:	20000568 	.word	0x20000568

0001b07c <nrfx_gpiote_channel_get>:
{
   1b07c:	b538      	push	{r3, r4, r5, lr}
   1b07e:	4604      	mov	r4, r0
   1b080:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   1b082:	f7ff fc85 	bl	1a990 <pin_in_use_by_te>
   1b086:	b140      	cbz	r0, 1b09a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b088:	f104 0008 	add.w	r0, r4, #8
   1b08c:	4b04      	ldr	r3, [pc, #16]	; (1b0a0 <nrfx_gpiote_channel_get+0x24>)
   1b08e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   1b092:	0b5b      	lsrs	r3, r3, #13
   1b094:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1b096:	4803      	ldr	r0, [pc, #12]	; (1b0a4 <nrfx_gpiote_channel_get+0x28>)
}
   1b098:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b09a:	4803      	ldr	r0, [pc, #12]	; (1b0a8 <nrfx_gpiote_channel_get+0x2c>)
   1b09c:	e7fc      	b.n	1b098 <nrfx_gpiote_channel_get+0x1c>
   1b09e:	bf00      	nop
   1b0a0:	20000568 	.word	0x20000568
   1b0a4:	0bad0000 	.word	0x0bad0000
   1b0a8:	0bad0004 	.word	0x0bad0004

0001b0ac <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1b0ac:	4b0f      	ldr	r3, [pc, #60]	; (1b0ec <nrfx_gpiote_init+0x40>)
   1b0ae:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1b0b2:	b10b      	cbz	r3, 1b0b8 <nrfx_gpiote_init+0xc>
        return err_code;
   1b0b4:	480e      	ldr	r0, [pc, #56]	; (1b0f0 <nrfx_gpiote_init+0x44>)
}
   1b0b6:	4770      	bx	lr
{
   1b0b8:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1b0ba:	4c0c      	ldr	r4, [pc, #48]	; (1b0ec <nrfx_gpiote_init+0x40>)
   1b0bc:	2260      	movs	r2, #96	; 0x60
   1b0be:	2100      	movs	r1, #0
   1b0c0:	f104 0010 	add.w	r0, r4, #16
   1b0c4:	f009 fc40 	bl	24948 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1b0c8:	2006      	movs	r0, #6
   1b0ca:	f7f7 fb1b 	bl	12704 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b0ce:	4b09      	ldr	r3, [pc, #36]	; (1b0f4 <nrfx_gpiote_init+0x48>)
   1b0d0:	2200      	movs	r2, #0
   1b0d2:	601a      	str	r2, [r3, #0]
   1b0d4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1b0d6:	4b08      	ldr	r3, [pc, #32]	; (1b0f8 <nrfx_gpiote_init+0x4c>)
   1b0d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b0dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1b0e0:	2301      	movs	r3, #1
   1b0e2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1b0e6:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   1b0e8:	4804      	ldr	r0, [pc, #16]	; (1b0fc <nrfx_gpiote_init+0x50>)
}
   1b0ea:	bd10      	pop	{r4, pc}
   1b0ec:	20000568 	.word	0x20000568
   1b0f0:	0bad0005 	.word	0x0bad0005
   1b0f4:	4000617c 	.word	0x4000617c
   1b0f8:	40006000 	.word	0x40006000
   1b0fc:	0bad0000 	.word	0x0bad0000

0001b100 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1b100:	4b03      	ldr	r3, [pc, #12]	; (1b110 <nrfx_gpiote_is_init+0x10>)
   1b102:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1b106:	3800      	subs	r0, #0
   1b108:	bf18      	it	ne
   1b10a:	2001      	movne	r0, #1
   1b10c:	4770      	bx	lr
   1b10e:	bf00      	nop
   1b110:	20000568 	.word	0x20000568

0001b114 <nrfx_gpiote_channel_free>:
{
   1b114:	b508      	push	{r3, lr}
   1b116:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1b118:	4801      	ldr	r0, [pc, #4]	; (1b120 <nrfx_gpiote_channel_free+0xc>)
   1b11a:	f7ff fc0b 	bl	1a934 <nrfx_flag32_free>
}
   1b11e:	bd08      	pop	{r3, pc}
   1b120:	200005d8 	.word	0x200005d8

0001b124 <nrfx_gpiote_channel_alloc>:
{
   1b124:	b508      	push	{r3, lr}
   1b126:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1b128:	4801      	ldr	r0, [pc, #4]	; (1b130 <nrfx_gpiote_channel_alloc+0xc>)
   1b12a:	f7ff fbdf 	bl	1a8ec <nrfx_flag32_alloc>
}
   1b12e:	bd08      	pop	{r3, pc}
   1b130:	200005d8 	.word	0x200005d8

0001b134 <nrfx_gpiote_trigger_enable>:
{
   1b134:	b538      	push	{r3, r4, r5, lr}
   1b136:	4604      	mov	r4, r0
   1b138:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b13a:	f7ff fc29 	bl	1a990 <pin_in_use_by_te>
   1b13e:	b308      	cbz	r0, 1b184 <nrfx_gpiote_trigger_enable+0x50>
   1b140:	4620      	mov	r0, r4
   1b142:	f008 fd35 	bl	23bb0 <pin_is_input>
   1b146:	b1e8      	cbz	r0, 1b184 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   1b148:	4620      	mov	r0, r4
   1b14a:	f7ff fc41 	bl	1a9d0 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1b14e:	0083      	lsls	r3, r0, #2
   1b150:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   1b154:	b29b      	uxth	r3, r3
   1b156:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b15a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b15e:	2200      	movs	r2, #0
   1b160:	601a      	str	r2, [r3, #0]
   1b162:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1b164:	4a22      	ldr	r2, [pc, #136]	; (1b1f0 <nrfx_gpiote_trigger_enable+0xbc>)
   1b166:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1b16a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1b16e:	f043 0301 	orr.w	r3, r3, #1
   1b172:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   1b176:	b39d      	cbz	r5, 1b1e0 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1b178:	2301      	movs	r3, #1
   1b17a:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   1b17e:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   1b182:	e02d      	b.n	1b1e0 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b184:	f104 0308 	add.w	r3, r4, #8
   1b188:	4a1a      	ldr	r2, [pc, #104]	; (1b1f4 <nrfx_gpiote_trigger_enable+0xc0>)
   1b18a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1b18e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1b192:	2b04      	cmp	r3, #4
   1b194:	d012      	beq.n	1b1bc <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1b196:	2b05      	cmp	r3, #5
   1b198:	d023      	beq.n	1b1e2 <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
   1b19a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1b19e:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b1a0:	2b01      	cmp	r3, #1
   1b1a2:	d009      	beq.n	1b1b8 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
   1b1a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   1b1a8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b1ac:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1b1ae:	f013 0f01 	tst.w	r3, #1
   1b1b2:	d018      	beq.n	1b1e6 <nrfx_gpiote_trigger_enable+0xb2>
   1b1b4:	2003      	movs	r0, #3
   1b1b6:	e002      	b.n	1b1be <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   1b1b8:	4b0f      	ldr	r3, [pc, #60]	; (1b1f8 <nrfx_gpiote_trigger_enable+0xc4>)
   1b1ba:	e7f5      	b.n	1b1a8 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1b1bc:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   1b1be:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1b1c2:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b1c4:	2c01      	cmp	r4, #1
   1b1c6:	d010      	beq.n	1b1ea <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
   1b1c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1b1cc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1b1d0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1b1d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1b1d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1b1dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   1b1e0:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1b1e2:	2002      	movs	r0, #2
   1b1e4:	e7eb      	b.n	1b1be <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1b1e6:	2002      	movs	r0, #2
   1b1e8:	e7e9      	b.n	1b1be <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   1b1ea:	4903      	ldr	r1, [pc, #12]	; (1b1f8 <nrfx_gpiote_trigger_enable+0xc4>)
   1b1ec:	e7ee      	b.n	1b1cc <nrfx_gpiote_trigger_enable+0x98>
   1b1ee:	bf00      	nop
   1b1f0:	40006000 	.word	0x40006000
   1b1f4:	20000568 	.word	0x20000568
   1b1f8:	50000300 	.word	0x50000300

0001b1fc <nrfx_gpiote_trigger_disable>:
{
   1b1fc:	b510      	push	{r4, lr}
   1b1fe:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b200:	f7ff fbc6 	bl	1a990 <pin_in_use_by_te>
   1b204:	b1a0      	cbz	r0, 1b230 <nrfx_gpiote_trigger_disable+0x34>
   1b206:	4620      	mov	r0, r4
   1b208:	f008 fcd2 	bl	23bb0 <pin_is_input>
   1b20c:	b180      	cbz	r0, 1b230 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   1b20e:	4620      	mov	r0, r4
   1b210:	f7ff fbde 	bl	1a9d0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1b214:	2201      	movs	r2, #1
   1b216:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1b218:	4b0e      	ldr	r3, [pc, #56]	; (1b254 <nrfx_gpiote_trigger_disable+0x58>)
   1b21a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1b21e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1b222:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   1b226:	f022 0203 	bic.w	r2, r2, #3
   1b22a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   1b22e:	e00e      	b.n	1b24e <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   1b230:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1b234:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b236:	2c01      	cmp	r4, #1
   1b238:	d00a      	beq.n	1b250 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   1b23a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1b23e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b242:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1b246:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1b24a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1b24e:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   1b250:	4901      	ldr	r1, [pc, #4]	; (1b258 <nrfx_gpiote_trigger_disable+0x5c>)
   1b252:	e7f4      	b.n	1b23e <nrfx_gpiote_trigger_disable+0x42>
   1b254:	40006000 	.word	0x40006000
   1b258:	50000300 	.word	0x50000300

0001b25c <nrfx_gpiote_pin_uninit>:
{
   1b25c:	b510      	push	{r4, lr}
   1b25e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1b260:	f7ff fb8c 	bl	1a97c <pin_in_use>
   1b264:	b908      	cbnz	r0, 1b26a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   1b266:	480c      	ldr	r0, [pc, #48]	; (1b298 <nrfx_gpiote_pin_uninit+0x3c>)
}
   1b268:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   1b26a:	4620      	mov	r0, r4
   1b26c:	f7ff ffc6 	bl	1b1fc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1b270:	4620      	mov	r0, r4
   1b272:	f7ff fcb1 	bl	1abd8 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   1b276:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1b27a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b27c:	2c01      	cmp	r4, #1
   1b27e:	d008      	beq.n	1b292 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   1b280:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1b284:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b288:	2102      	movs	r1, #2
   1b28a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   1b28e:	4803      	ldr	r0, [pc, #12]	; (1b29c <nrfx_gpiote_pin_uninit+0x40>)
   1b290:	e7ea      	b.n	1b268 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   1b292:	4a03      	ldr	r2, [pc, #12]	; (1b2a0 <nrfx_gpiote_pin_uninit+0x44>)
   1b294:	e7f6      	b.n	1b284 <nrfx_gpiote_pin_uninit+0x28>
   1b296:	bf00      	nop
   1b298:	0bad0004 	.word	0x0bad0004
   1b29c:	0bad0000 	.word	0x0bad0000
   1b2a0:	50000300 	.word	0x50000300

0001b2a4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   1b2a4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1b2a6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   1b2a8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b2ac:	2100      	movs	r1, #0
    uint32_t status = 0;
   1b2ae:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b2b0:	e003      	b.n	1b2ba <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   1b2b2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   1b2b4:	3304      	adds	r3, #4
   1b2b6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b2b8:	3101      	adds	r1, #1
   1b2ba:	2907      	cmp	r1, #7
   1b2bc:	d814      	bhi.n	1b2e8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b2be:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1b2c2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   1b2c6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1b2c8:	2a00      	cmp	r2, #0
   1b2ca:	d0f2      	beq.n	1b2b2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1b2cc:	4a0b      	ldr	r2, [pc, #44]	; (1b2fc <nrfx_gpiote_irq_handler+0x58>)
   1b2ce:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1b2d2:	4210      	tst	r0, r2
   1b2d4:	d0ed      	beq.n	1b2b2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   1b2d6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1b2da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b2de:	2400      	movs	r4, #0
   1b2e0:	6014      	str	r4, [r2, #0]
   1b2e2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   1b2e4:	4305      	orrs	r5, r0
   1b2e6:	e7e4      	b.n	1b2b2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b2e8:	4b05      	ldr	r3, [pc, #20]	; (1b300 <nrfx_gpiote_irq_handler+0x5c>)
   1b2ea:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1b2ec:	b91b      	cbnz	r3, 1b2f6 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   1b2ee:	4628      	mov	r0, r5
   1b2f0:	f7ff fd28 	bl	1ad44 <gpiote_evt_handle>
}
   1b2f4:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   1b2f6:	f7ff fcc1 	bl	1ac7c <port_event_handle>
   1b2fa:	e7f8      	b.n	1b2ee <nrfx_gpiote_irq_handler+0x4a>
   1b2fc:	40006000 	.word	0x40006000
   1b300:	4000617c 	.word	0x4000617c

0001b304 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1b304:	b508      	push	{r3, lr}
   1b306:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1b308:	4801      	ldr	r0, [pc, #4]	; (1b310 <nrfx_ppi_channel_alloc+0xc>)
   1b30a:	f7ff faef 	bl	1a8ec <nrfx_flag32_alloc>
}
   1b30e:	bd08      	pop	{r3, pc}
   1b310:	200005e4 	.word	0x200005e4

0001b314 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1b314:	4b03      	ldr	r3, [pc, #12]	; (1b324 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1b316:	4a04      	ldr	r2, [pc, #16]	; (1b328 <z_device_state_init+0x14>)
   1b318:	4293      	cmp	r3, r2
   1b31a:	d201      	bcs.n	1b320 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1b31c:	3318      	adds	r3, #24
   1b31e:	e7fa      	b.n	1b316 <z_device_state_init+0x2>
	}
}
   1b320:	4770      	bx	lr
   1b322:	bf00      	nop
   1b324:	00024a44 	.word	0x00024a44
   1b328:	00024aec 	.word	0x00024aec

0001b32c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1b32c:	b570      	push	{r4, r5, r6, lr}
   1b32e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b330:	4b11      	ldr	r3, [pc, #68]	; (1b378 <z_sys_init_run_level+0x4c>)
   1b332:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b336:	e009      	b.n	1b34c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1b338:	4240      	negs	r0, r0
   1b33a:	e017      	b.n	1b36c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1b33c:	68eb      	ldr	r3, [r5, #12]
   1b33e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1b340:	68ea      	ldr	r2, [r5, #12]
   1b342:	7853      	ldrb	r3, [r2, #1]
   1b344:	f043 0301 	orr.w	r3, r3, #1
   1b348:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b34a:	3408      	adds	r4, #8
   1b34c:	1c73      	adds	r3, r6, #1
   1b34e:	4a0a      	ldr	r2, [pc, #40]	; (1b378 <z_sys_init_run_level+0x4c>)
   1b350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b354:	42a3      	cmp	r3, r4
   1b356:	d90d      	bls.n	1b374 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1b358:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1b35a:	6823      	ldr	r3, [r4, #0]
   1b35c:	4628      	mov	r0, r5
   1b35e:	4798      	blx	r3
		if (dev != NULL) {
   1b360:	2d00      	cmp	r5, #0
   1b362:	d0f2      	beq.n	1b34a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1b364:	2800      	cmp	r0, #0
   1b366:	d0eb      	beq.n	1b340 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1b368:	2800      	cmp	r0, #0
   1b36a:	dbe5      	blt.n	1b338 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1b36c:	28ff      	cmp	r0, #255	; 0xff
   1b36e:	dde5      	ble.n	1b33c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1b370:	20ff      	movs	r0, #255	; 0xff
   1b372:	e7e3      	b.n	1b33c <z_sys_init_run_level+0x10>
		}
	}
}
   1b374:	bd70      	pop	{r4, r5, r6, pc}
   1b376:	bf00      	nop
   1b378:	00026cbc 	.word	0x00026cbc

0001b37c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1b37c:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1b37e:	4605      	mov	r5, r0
   1b380:	b328      	cbz	r0, 1b3ce <z_impl_device_get_binding+0x52>
   1b382:	7803      	ldrb	r3, [r0, #0]
   1b384:	b32b      	cbz	r3, 1b3d2 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1b386:	4c14      	ldr	r4, [pc, #80]	; (1b3d8 <z_impl_device_get_binding+0x5c>)
   1b388:	e000      	b.n	1b38c <z_impl_device_get_binding+0x10>
   1b38a:	3418      	adds	r4, #24
   1b38c:	4b13      	ldr	r3, [pc, #76]	; (1b3dc <z_impl_device_get_binding+0x60>)
   1b38e:	429c      	cmp	r4, r3
   1b390:	d008      	beq.n	1b3a4 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1b392:	4620      	mov	r0, r4
   1b394:	f008 fc1a 	bl	23bcc <z_device_ready>
   1b398:	2800      	cmp	r0, #0
   1b39a:	d0f6      	beq.n	1b38a <z_impl_device_get_binding+0xe>
   1b39c:	6823      	ldr	r3, [r4, #0]
   1b39e:	42ab      	cmp	r3, r5
   1b3a0:	d1f3      	bne.n	1b38a <z_impl_device_get_binding+0xe>
   1b3a2:	e012      	b.n	1b3ca <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1b3a4:	4c0c      	ldr	r4, [pc, #48]	; (1b3d8 <z_impl_device_get_binding+0x5c>)
   1b3a6:	e000      	b.n	1b3aa <z_impl_device_get_binding+0x2e>
   1b3a8:	3418      	adds	r4, #24
   1b3aa:	4b0c      	ldr	r3, [pc, #48]	; (1b3dc <z_impl_device_get_binding+0x60>)
   1b3ac:	429c      	cmp	r4, r3
   1b3ae:	d00b      	beq.n	1b3c8 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b3b0:	4620      	mov	r0, r4
   1b3b2:	f008 fc0b 	bl	23bcc <z_device_ready>
   1b3b6:	2800      	cmp	r0, #0
   1b3b8:	d0f6      	beq.n	1b3a8 <z_impl_device_get_binding+0x2c>
   1b3ba:	6821      	ldr	r1, [r4, #0]
   1b3bc:	4628      	mov	r0, r5
   1b3be:	f7f0 ff4f 	bl	c260 <strcmp>
   1b3c2:	2800      	cmp	r0, #0
   1b3c4:	d1f0      	bne.n	1b3a8 <z_impl_device_get_binding+0x2c>
   1b3c6:	e000      	b.n	1b3ca <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1b3c8:	2400      	movs	r4, #0
}
   1b3ca:	4620      	mov	r0, r4
   1b3cc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1b3ce:	4604      	mov	r4, r0
   1b3d0:	e7fb      	b.n	1b3ca <z_impl_device_get_binding+0x4e>
   1b3d2:	2400      	movs	r4, #0
   1b3d4:	e7f9      	b.n	1b3ca <z_impl_device_get_binding+0x4e>
   1b3d6:	bf00      	nop
   1b3d8:	00024a44 	.word	0x00024a44
   1b3dc:	00024aec 	.word	0x00024aec

0001b3e0 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   1b3e0:	2804      	cmp	r0, #4
   1b3e2:	d80c      	bhi.n	1b3fe <reason_to_str+0x1e>
   1b3e4:	e8df f000 	tbb	[pc, r0]
   1b3e8:	07050d03 	.word	0x07050d03
   1b3ec:	09          	.byte	0x09
   1b3ed:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1b3ee:	4806      	ldr	r0, [pc, #24]	; (1b408 <reason_to_str+0x28>)
   1b3f0:	4770      	bx	lr
		return "Stack overflow";
   1b3f2:	4806      	ldr	r0, [pc, #24]	; (1b40c <reason_to_str+0x2c>)
   1b3f4:	4770      	bx	lr
		return "Kernel oops";
   1b3f6:	4806      	ldr	r0, [pc, #24]	; (1b410 <reason_to_str+0x30>)
   1b3f8:	4770      	bx	lr
		return "Kernel panic";
   1b3fa:	4806      	ldr	r0, [pc, #24]	; (1b414 <reason_to_str+0x34>)
   1b3fc:	4770      	bx	lr
	default:
		return "Unknown error";
   1b3fe:	4806      	ldr	r0, [pc, #24]	; (1b418 <reason_to_str+0x38>)
   1b400:	4770      	bx	lr
		return "Unhandled interrupt";
   1b402:	4806      	ldr	r0, [pc, #24]	; (1b41c <reason_to_str+0x3c>)
	}
}
   1b404:	4770      	bx	lr
   1b406:	bf00      	nop
   1b408:	00026d24 	.word	0x00026d24
   1b40c:	00026cf8 	.word	0x00026cf8
   1b410:	00026d08 	.word	0x00026d08
   1b414:	00026d14 	.word	0x00026d14
   1b418:	00026cd4 	.word	0x00026cd4
   1b41c:	00026ce4 	.word	0x00026ce4

0001b420 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1b420:	b130      	cbz	r0, 1b430 <thread_name_get+0x10>
{
   1b422:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1b424:	f008 fcb8 	bl	23d98 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1b428:	b120      	cbz	r0, 1b434 <thread_name_get+0x14>
   1b42a:	7803      	ldrb	r3, [r0, #0]
   1b42c:	b123      	cbz	r3, 1b438 <thread_name_get+0x18>
}
   1b42e:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1b430:	4802      	ldr	r0, [pc, #8]	; (1b43c <thread_name_get+0x1c>)
}
   1b432:	4770      	bx	lr
		thread_name = "unknown";
   1b434:	4801      	ldr	r0, [pc, #4]	; (1b43c <thread_name_get+0x1c>)
   1b436:	e7fa      	b.n	1b42e <thread_name_get+0xe>
   1b438:	4800      	ldr	r0, [pc, #0]	; (1b43c <thread_name_get+0x1c>)
	return thread_name;
   1b43a:	e7f8      	b.n	1b42e <thread_name_get+0xe>
   1b43c:	00026d34 	.word	0x00026d34

0001b440 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1b440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b444:	b082      	sub	sp, #8
   1b446:	4605      	mov	r5, r0
   1b448:	460e      	mov	r6, r1
	__asm__ volatile(
   1b44a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b44e:	f3ef 8711 	mrs	r7, BASEPRI
   1b452:	f383 8812 	msr	BASEPRI_MAX, r3
   1b456:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1b45a:	f001 f9a5 	bl	1c7a8 <z_impl_z_current_get>
   1b45e:	4604      	mov	r4, r0
   1b460:	4b29      	ldr	r3, [pc, #164]	; (1b508 <z_fatal_error+0xc8>)
   1b462:	4a2a      	ldr	r2, [pc, #168]	; (1b50c <z_fatal_error+0xcc>)
   1b464:	1a9b      	subs	r3, r3, r2
   1b466:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1b468:	f04f 0800 	mov.w	r8, #0
   1b46c:	2201      	movs	r2, #1
   1b46e:	f362 0802 	bfi	r8, r2, #0, #3
   1b472:	f36f 08c5 	bfc	r8, #3, #3
   1b476:	f363 188f 	bfi	r8, r3, #6, #10
   1b47a:	4628      	mov	r0, r5
   1b47c:	f7ff ffb0 	bl	1b3e0 <reason_to_str>
   1b480:	4602      	mov	r2, r0
   1b482:	f8ad 8000 	strh.w	r8, [sp]
   1b486:	2300      	movs	r3, #0
   1b488:	4629      	mov	r1, r5
   1b48a:	4821      	ldr	r0, [pc, #132]	; (1b510 <z_fatal_error+0xd0>)
   1b48c:	f7f5 fe6c 	bl	11168 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1b490:	b11e      	cbz	r6, 1b49a <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1b492:	69f3      	ldr	r3, [r6, #28]
   1b494:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1b498:	bb2b      	cbnz	r3, 1b4e6 <z_fatal_error+0xa6>
   1b49a:	4b1b      	ldr	r3, [pc, #108]	; (1b508 <z_fatal_error+0xc8>)
   1b49c:	4a1b      	ldr	r2, [pc, #108]	; (1b50c <z_fatal_error+0xcc>)
   1b49e:	1a9b      	subs	r3, r3, r2
   1b4a0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1b4a2:	f04f 0800 	mov.w	r8, #0
   1b4a6:	2201      	movs	r2, #1
   1b4a8:	f362 0802 	bfi	r8, r2, #0, #3
   1b4ac:	f36f 08c5 	bfc	r8, #3, #3
   1b4b0:	f363 188f 	bfi	r8, r3, #6, #10
   1b4b4:	4620      	mov	r0, r4
   1b4b6:	f7ff ffb3 	bl	1b420 <thread_name_get>
   1b4ba:	f7f5 fd1b 	bl	10ef4 <z_log_strdup>
   1b4be:	4602      	mov	r2, r0
   1b4c0:	4643      	mov	r3, r8
   1b4c2:	4621      	mov	r1, r4
   1b4c4:	4813      	ldr	r0, [pc, #76]	; (1b514 <z_fatal_error+0xd4>)
   1b4c6:	f7f5 fec3 	bl	11250 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1b4ca:	4631      	mov	r1, r6
   1b4cc:	4628      	mov	r0, r5
   1b4ce:	f7fe fd4f 	bl	19f70 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1b4d2:	f387 8811 	msr	BASEPRI, r7
   1b4d6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1b4da:	4620      	mov	r0, r4
   1b4dc:	f7f7 fec4 	bl	13268 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1b4e0:	b002      	add	sp, #8
   1b4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b4e6:	4b08      	ldr	r3, [pc, #32]	; (1b508 <z_fatal_error+0xc8>)
   1b4e8:	4a08      	ldr	r2, [pc, #32]	; (1b50c <z_fatal_error+0xcc>)
   1b4ea:	1a9b      	subs	r3, r3, r2
   1b4ec:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   1b4ee:	f04f 0100 	mov.w	r1, #0
   1b4f2:	2201      	movs	r2, #1
   1b4f4:	f362 0102 	bfi	r1, r2, #0, #3
   1b4f8:	f36f 01c5 	bfc	r1, #3, #3
   1b4fc:	f363 118f 	bfi	r1, r3, #6, #10
   1b500:	4805      	ldr	r0, [pc, #20]	; (1b518 <z_fatal_error+0xd8>)
   1b502:	f7f5 ff25 	bl	11350 <log_0>
   1b506:	e7c8      	b.n	1b49a <z_fatal_error+0x5a>
   1b508:	00024d78 	.word	0x00024d78
   1b50c:	00024ca0 	.word	0x00024ca0
   1b510:	00026d3c 	.word	0x00026d3c
   1b514:	00026d88 	.word	0x00026d88
   1b518:	00026d64 	.word	0x00026d64

0001b51c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b51e:	b089      	sub	sp, #36	; 0x24
   1b520:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1b522:	4b15      	ldr	r3, [pc, #84]	; (1b578 <init_idle_thread+0x5c>)
   1b524:	25b8      	movs	r5, #184	; 0xb8
   1b526:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1b52a:	4b14      	ldr	r3, [pc, #80]	; (1b57c <init_idle_thread+0x60>)
   1b52c:	f44f 76b0 	mov.w	r6, #352	; 0x160
   1b530:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1b534:	af06      	add	r7, sp, #24
   1b536:	4603      	mov	r3, r0
   1b538:	4a11      	ldr	r2, [pc, #68]	; (1b580 <init_idle_thread+0x64>)
   1b53a:	2108      	movs	r1, #8
   1b53c:	4638      	mov	r0, r7
   1b53e:	f004 fbb6 	bl	1fcae <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1b542:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b546:	480f      	ldr	r0, [pc, #60]	; (1b584 <init_idle_thread+0x68>)
   1b548:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1b54c:	9705      	str	r7, [sp, #20]
   1b54e:	2301      	movs	r3, #1
   1b550:	9304      	str	r3, [sp, #16]
   1b552:	230f      	movs	r3, #15
   1b554:	9303      	str	r3, [sp, #12]
   1b556:	2300      	movs	r3, #0
   1b558:	9302      	str	r3, [sp, #8]
   1b55a:	9301      	str	r3, [sp, #4]
   1b55c:	9400      	str	r4, [sp, #0]
   1b55e:	4b0a      	ldr	r3, [pc, #40]	; (1b588 <init_idle_thread+0x6c>)
   1b560:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b564:	4631      	mov	r1, r6
   1b566:	4628      	mov	r0, r5
   1b568:	f000 f96e 	bl	1b848 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b56c:	7b6b      	ldrb	r3, [r5, #13]
   1b56e:	f023 0304 	bic.w	r3, r3, #4
   1b572:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1b574:	b009      	add	sp, #36	; 0x24
   1b576:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b578:	20001d20 	.word	0x20001d20
   1b57c:	20005640 	.word	0x20005640
   1b580:	00026da0 	.word	0x00026da0
   1b584:	20002c9c 	.word	0x20002c9c
   1b588:	0001b9ad 	.word	0x0001b9ad

0001b58c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1b58c:	b570      	push	{r4, r5, r6, lr}
   1b58e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1b590:	f001 f83e 	bl	1c610 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1b594:	4d1b      	ldr	r5, [pc, #108]	; (1b604 <prepare_multithreading+0x78>)
   1b596:	4b1c      	ldr	r3, [pc, #112]	; (1b608 <prepare_multithreading+0x7c>)
   1b598:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b59a:	4b1c      	ldr	r3, [pc, #112]	; (1b60c <prepare_multithreading+0x80>)
   1b59c:	9305      	str	r3, [sp, #20]
   1b59e:	2301      	movs	r3, #1
   1b5a0:	9304      	str	r3, [sp, #16]
   1b5a2:	2400      	movs	r4, #0
   1b5a4:	9403      	str	r4, [sp, #12]
   1b5a6:	9402      	str	r4, [sp, #8]
   1b5a8:	9401      	str	r4, [sp, #4]
   1b5aa:	9400      	str	r4, [sp, #0]
   1b5ac:	4b18      	ldr	r3, [pc, #96]	; (1b610 <prepare_multithreading+0x84>)
   1b5ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b5b2:	4918      	ldr	r1, [pc, #96]	; (1b614 <prepare_multithreading+0x88>)
   1b5b4:	4628      	mov	r0, r5
   1b5b6:	f000 f947 	bl	1b848 <z_setup_new_thread>
   1b5ba:	4606      	mov	r6, r0
   1b5bc:	7b6b      	ldrb	r3, [r5, #13]
   1b5be:	f023 0304 	bic.w	r3, r3, #4
   1b5c2:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1b5c4:	4628      	mov	r0, r5
   1b5c6:	f008 fec2 	bl	2434e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1b5ca:	2c00      	cmp	r4, #0
   1b5cc:	dd02      	ble.n	1b5d4 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1b5ce:	4630      	mov	r0, r6
   1b5d0:	b006      	add	sp, #24
   1b5d2:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1b5d4:	4620      	mov	r0, r4
   1b5d6:	f7ff ffa1 	bl	1b51c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1b5da:	4b0f      	ldr	r3, [pc, #60]	; (1b618 <prepare_multithreading+0x8c>)
   1b5dc:	22b8      	movs	r2, #184	; 0xb8
   1b5de:	fb02 3204 	mla	r2, r2, r4, r3
   1b5e2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1b5e6:	4b08      	ldr	r3, [pc, #32]	; (1b608 <prepare_multithreading+0x7c>)
   1b5e8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1b5ec:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1b5ee:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1b5f0:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   1b5f4:	4a09      	ldr	r2, [pc, #36]	; (1b61c <prepare_multithreading+0x90>)
   1b5f6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1b5fa:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1b5fe:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1b600:	3401      	adds	r4, #1
   1b602:	e7e2      	b.n	1b5ca <prepare_multithreading+0x3e>
   1b604:	20001dd8 	.word	0x20001dd8
   1b608:	20002c9c 	.word	0x20002c9c
   1b60c:	00026dac 	.word	0x00026dac
   1b610:	0001b621 	.word	0x0001b621
   1b614:	20004e20 	.word	0x20004e20
   1b618:	20001d20 	.word	0x20001d20
   1b61c:	200057a0 	.word	0x200057a0

0001b620 <bg_thread_main>:
{
   1b620:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1b622:	4b0a      	ldr	r3, [pc, #40]	; (1b64c <bg_thread_main+0x2c>)
   1b624:	2201      	movs	r2, #1
   1b626:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b628:	2002      	movs	r0, #2
   1b62a:	f7ff fe7f 	bl	1b32c <z_sys_init_run_level>
	boot_banner();
   1b62e:	f001 fe35 	bl	1d29c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1b632:	2003      	movs	r0, #3
   1b634:	f7ff fe7a 	bl	1b32c <z_sys_init_run_level>
	z_init_static_threads();
   1b638:	f000 f96a 	bl	1b910 <z_init_static_threads>
	main();
   1b63c:	f7f4 fa98 	bl	fb70 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b640:	4a03      	ldr	r2, [pc, #12]	; (1b650 <bg_thread_main+0x30>)
   1b642:	7b13      	ldrb	r3, [r2, #12]
   1b644:	f023 0301 	bic.w	r3, r3, #1
   1b648:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b64a:	bd08      	pop	{r3, pc}
   1b64c:	200036c1 	.word	0x200036c1
   1b650:	20001dd8 	.word	0x20001dd8

0001b654 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1b654:	b508      	push	{r3, lr}
   1b656:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b658:	4a01      	ldr	r2, [pc, #4]	; (1b660 <switch_to_main_thread+0xc>)
   1b65a:	4802      	ldr	r0, [pc, #8]	; (1b664 <switch_to_main_thread+0x10>)
   1b65c:	f7f7 f978 	bl	12950 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b660:	0001b621 	.word	0x0001b621
   1b664:	20001dd8 	.word	0x20001dd8

0001b668 <z_bss_zero>:
{
   1b668:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b66a:	4803      	ldr	r0, [pc, #12]	; (1b678 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
   1b66c:	4a03      	ldr	r2, [pc, #12]	; (1b67c <z_bss_zero+0x14>)
   1b66e:	1a12      	subs	r2, r2, r0
   1b670:	2100      	movs	r1, #0
   1b672:	f009 f969 	bl	24948 <memset>
}
   1b676:	bd08      	pop	{r3, pc}
   1b678:	200008d0 	.word	0x200008d0
   1b67c:	20003880 	.word	0x20003880

0001b680 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1b680:	b500      	push	{lr}
   1b682:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b684:	f7f5 fb94 	bl	10db0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1b688:	4b1d      	ldr	r3, [pc, #116]	; (1b700 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b68a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1b68e:	4c1d      	ldr	r4, [pc, #116]	; (1b704 <z_cstart+0x84>)
   1b690:	6963      	ldr	r3, [r4, #20]
   1b692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b696:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b698:	23e0      	movs	r3, #224	; 0xe0
   1b69a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1b69e:	2320      	movs	r3, #32
   1b6a0:	77e3      	strb	r3, [r4, #31]
   1b6a2:	2500      	movs	r5, #0
   1b6a4:	7625      	strb	r5, [r4, #24]
   1b6a6:	7665      	strb	r5, [r4, #25]
   1b6a8:	76a5      	strb	r5, [r4, #26]
   1b6aa:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b6ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b6b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b6b4:	6263      	str	r3, [r4, #36]	; 0x24
   1b6b6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b6ba:	f7f7 fd45 	bl	13148 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b6be:	f7f6 ffb5 	bl	1262c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b6c2:	f04f 33ff 	mov.w	r3, #4294967295
   1b6c6:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b6c8:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1b6ca:	f7f7 fea9 	bl	13420 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1b6ce:	f7f7 fde1 	bl	13294 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1b6d2:	2401      	movs	r4, #1
   1b6d4:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1b6d8:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1b6dc:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1b6de:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1b6e0:	4b09      	ldr	r3, [pc, #36]	; (1b708 <z_cstart+0x88>)
   1b6e2:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1b6e6:	f7ff fe15 	bl	1b314 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b6ea:	4628      	mov	r0, r5
   1b6ec:	f7ff fe1e 	bl	1b32c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b6f0:	4620      	mov	r0, r4
   1b6f2:	f7ff fe1b 	bl	1b32c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1b6f6:	f7ff ff49 	bl	1b58c <prepare_multithreading>
   1b6fa:	f7ff ffab 	bl	1b654 <switch_to_main_thread>
   1b6fe:	bf00      	nop
   1b700:	20005fc0 	.word	0x20005fc0
   1b704:	e000ed00 	.word	0xe000ed00
   1b708:	20002c9c 	.word	0x20002c9c

0001b70c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1b70c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1b70e:	4c06      	ldr	r4, [pc, #24]	; (1b728 <statics_init+0x1c>)
   1b710:	4b06      	ldr	r3, [pc, #24]	; (1b72c <statics_init+0x20>)
   1b712:	429c      	cmp	r4, r3
   1b714:	d206      	bcs.n	1b724 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1b716:	68a2      	ldr	r2, [r4, #8]
   1b718:	6861      	ldr	r1, [r4, #4]
   1b71a:	4620      	mov	r0, r4
   1b71c:	f008 fa63 	bl	23be6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1b720:	3414      	adds	r4, #20
   1b722:	e7f5      	b.n	1b710 <statics_init+0x4>
		}
	}
	return 0;
}
   1b724:	2000      	movs	r0, #0
   1b726:	bd10      	pop	{r4, pc}
   1b728:	200006d8 	.word	0x200006d8
   1b72c:	200006ec 	.word	0x200006ec

0001b730 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1b730:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b732:	4c06      	ldr	r4, [pc, #24]	; (1b74c <init_mem_slab_module+0x1c>)
	int rc = 0;
   1b734:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b736:	4b06      	ldr	r3, [pc, #24]	; (1b750 <init_mem_slab_module+0x20>)
   1b738:	429c      	cmp	r4, r3
   1b73a:	d206      	bcs.n	1b74a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1b73c:	4620      	mov	r0, r4
   1b73e:	f008 fac2 	bl	23cc6 <create_free_list>
		if (rc < 0) {
   1b742:	2800      	cmp	r0, #0
   1b744:	db01      	blt.n	1b74a <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b746:	341c      	adds	r4, #28
   1b748:	e7f5      	b.n	1b736 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1b74a:	bd10      	pop	{r4, pc}
   1b74c:	20000684 	.word	0x20000684
   1b750:	200006d8 	.word	0x200006d8

0001b754 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1b754:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b756:	b083      	sub	sp, #12
   1b758:	460c      	mov	r4, r1
   1b75a:	461f      	mov	r7, r3
	__asm__ volatile(
   1b75c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b760:	f3ef 8111 	mrs	r1, BASEPRI
   1b764:	f383 8812 	msr	BASEPRI_MAX, r3
   1b768:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1b76c:	6943      	ldr	r3, [r0, #20]
   1b76e:	b16b      	cbz	r3, 1b78c <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   1b770:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b772:	6943      	ldr	r3, [r0, #20]
   1b774:	681b      	ldr	r3, [r3, #0]
   1b776:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b778:	6983      	ldr	r3, [r0, #24]
   1b77a:	3301      	adds	r3, #1
   1b77c:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1b77e:	2000      	movs	r0, #0
	__asm__ volatile(
   1b780:	f381 8811 	msr	BASEPRI, r1
   1b784:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1b788:	b003      	add	sp, #12
   1b78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b78c:	4616      	mov	r6, r2
   1b78e:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1b792:	ea56 0307 	orrs.w	r3, r6, r7
   1b796:	d104      	bne.n	1b7a2 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1b798:	2300      	movs	r3, #0
   1b79a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b79c:	f06f 000b 	mvn.w	r0, #11
   1b7a0:	e7ee      	b.n	1b780 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1b7a2:	e9cd 6700 	strd	r6, r7, [sp]
   1b7a6:	4602      	mov	r2, r0
   1b7a8:	4628      	mov	r0, r5
   1b7aa:	f000 fe07 	bl	1c3bc <z_pend_curr>
		if (result == 0) {
   1b7ae:	2800      	cmp	r0, #0
   1b7b0:	d1ea      	bne.n	1b788 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   1b7b2:	4b02      	ldr	r3, [pc, #8]	; (1b7bc <k_mem_slab_alloc+0x68>)
   1b7b4:	689b      	ldr	r3, [r3, #8]
   1b7b6:	695b      	ldr	r3, [r3, #20]
   1b7b8:	6023      	str	r3, [r4, #0]
		return result;
   1b7ba:	e7e5      	b.n	1b788 <k_mem_slab_alloc+0x34>
   1b7bc:	20002c9c 	.word	0x20002c9c

0001b7c0 <z_thread_monitor_exit>:
	__asm__ volatile(
   1b7c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7c4:	f3ef 8111 	mrs	r1, BASEPRI
   1b7c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7cc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1b7d0:	4b0a      	ldr	r3, [pc, #40]	; (1b7fc <z_thread_monitor_exit+0x3c>)
   1b7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b7d4:	4283      	cmp	r3, r0
   1b7d6:	d104      	bne.n	1b7e2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1b7d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1b7da:	4b08      	ldr	r3, [pc, #32]	; (1b7fc <z_thread_monitor_exit+0x3c>)
   1b7dc:	629a      	str	r2, [r3, #40]	; 0x28
   1b7de:	e007      	b.n	1b7f0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1b7e0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1b7e2:	b113      	cbz	r3, 1b7ea <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1b7e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1b7e6:	4282      	cmp	r2, r0
   1b7e8:	d1fa      	bne.n	1b7e0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1b7ea:	b10b      	cbz	r3, 1b7f0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1b7ec:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1b7ee:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1b7f0:	f381 8811 	msr	BASEPRI, r1
   1b7f4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1b7f8:	4770      	bx	lr
   1b7fa:	bf00      	nop
   1b7fc:	20002c9c 	.word	0x20002c9c

0001b800 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1b800:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1b802:	4604      	mov	r4, r0
   1b804:	b140      	cbz	r0, 1b818 <z_impl_k_thread_name_set+0x18>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1b806:	2220      	movs	r2, #32
   1b808:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1b80c:	f009 f8a4 	bl	24958 <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1b810:	2000      	movs	r0, #0
   1b812:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1b816:	bd10      	pop	{r4, pc}
		thread = _current;
   1b818:	4b01      	ldr	r3, [pc, #4]	; (1b820 <z_impl_k_thread_name_set+0x20>)
   1b81a:	689c      	ldr	r4, [r3, #8]
   1b81c:	e7f3      	b.n	1b806 <z_impl_k_thread_name_set+0x6>
   1b81e:	bf00      	nop
   1b820:	20002c9c 	.word	0x20002c9c

0001b824 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1b824:	b538      	push	{r3, r4, r5, lr}
   1b826:	4614      	mov	r4, r2
   1b828:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b82a:	ea54 0305 	orrs.w	r3, r4, r5
   1b82e:	d102      	bne.n	1b836 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1b830:	f008 fab4 	bl	23d9c <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1b834:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b836:	462b      	mov	r3, r5
   1b838:	4902      	ldr	r1, [pc, #8]	; (1b844 <schedule_new_thread+0x20>)
   1b83a:	3018      	adds	r0, #24
   1b83c:	f001 f866 	bl	1c90c <z_add_timeout>
   1b840:	e7f8      	b.n	1b834 <schedule_new_thread+0x10>
   1b842:	bf00      	nop
   1b844:	00024387 	.word	0x00024387

0001b848 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b84c:	b085      	sub	sp, #20
   1b84e:	4604      	mov	r4, r0
   1b850:	460f      	mov	r7, r1
   1b852:	4615      	mov	r5, r2
   1b854:	461e      	mov	r6, r3
   1b856:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1b85a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1b85e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1b862:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b866:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b86a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1b86c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1b86e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b870:	2204      	movs	r2, #4
   1b872:	9911      	ldr	r1, [sp, #68]	; 0x44
   1b874:	f008 fa96 	bl	23da4 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1b878:	462a      	mov	r2, r5
   1b87a:	4639      	mov	r1, r7
   1b87c:	4620      	mov	r0, r4
   1b87e:	f008 fa73 	bl	23d68 <setup_thread_stack>
   1b882:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b884:	f8cd 8008 	str.w	r8, [sp, #8]
   1b888:	f8cd 9004 	str.w	r9, [sp, #4]
   1b88c:	f8cd a000 	str.w	sl, [sp]
   1b890:	4633      	mov	r3, r6
   1b892:	4602      	mov	r2, r0
   1b894:	4639      	mov	r1, r7
   1b896:	4620      	mov	r0, r4
   1b898:	f7f7 f80a 	bl	128b0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1b89c:	2300      	movs	r3, #0
   1b89e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1b8a0:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1b8a2:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1b8a6:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1b8aa:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1b8ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8b2:	f3ef 8211 	mrs	r2, BASEPRI
   1b8b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1b8be:	4b13      	ldr	r3, [pc, #76]	; (1b90c <z_setup_new_thread+0xc4>)
   1b8c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1b8c2:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1b8c4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   1b8c6:	f382 8811 	msr	BASEPRI, r2
   1b8ca:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1b8ce:	f1bb 0f00 	cmp.w	fp, #0
   1b8d2:	d013      	beq.n	1b8fc <z_setup_new_thread+0xb4>
   1b8d4:	221f      	movs	r2, #31
   1b8d6:	4659      	mov	r1, fp
   1b8d8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1b8dc:	f009 f83c 	bl	24958 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1b8e0:	2300      	movs	r3, #0
   1b8e2:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1b8e6:	4b09      	ldr	r3, [pc, #36]	; (1b90c <z_setup_new_thread+0xc4>)
   1b8e8:	689b      	ldr	r3, [r3, #8]
   1b8ea:	b15b      	cbz	r3, 1b904 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1b8ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1b8f0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   1b8f4:	4628      	mov	r0, r5
   1b8f6:	b005      	add	sp, #20
   1b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1b8fc:	2300      	movs	r3, #0
   1b8fe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1b902:	e7f0      	b.n	1b8e6 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1b904:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1b908:	e7f4      	b.n	1b8f4 <z_setup_new_thread+0xac>
   1b90a:	bf00      	nop
   1b90c:	20002c9c 	.word	0x20002c9c

0001b910 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1b910:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1b914:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1b916:	4c23      	ldr	r4, [pc, #140]	; (1b9a4 <z_init_static_threads+0x94>)
   1b918:	4b23      	ldr	r3, [pc, #140]	; (1b9a8 <z_init_static_threads+0x98>)
   1b91a:	429c      	cmp	r4, r3
   1b91c:	d215      	bcs.n	1b94a <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1b91e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b920:	9305      	str	r3, [sp, #20]
   1b922:	6a23      	ldr	r3, [r4, #32]
   1b924:	9304      	str	r3, [sp, #16]
   1b926:	69e3      	ldr	r3, [r4, #28]
   1b928:	9303      	str	r3, [sp, #12]
   1b92a:	69a3      	ldr	r3, [r4, #24]
   1b92c:	9302      	str	r3, [sp, #8]
   1b92e:	6963      	ldr	r3, [r4, #20]
   1b930:	9301      	str	r3, [sp, #4]
   1b932:	6923      	ldr	r3, [r4, #16]
   1b934:	9300      	str	r3, [sp, #0]
   1b936:	68e3      	ldr	r3, [r4, #12]
   1b938:	68a2      	ldr	r2, [r4, #8]
   1b93a:	6861      	ldr	r1, [r4, #4]
   1b93c:	6820      	ldr	r0, [r4, #0]
   1b93e:	f7ff ff83 	bl	1b848 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1b942:	6823      	ldr	r3, [r4, #0]
   1b944:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1b946:	3430      	adds	r4, #48	; 0x30
   1b948:	e7e6      	b.n	1b918 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1b94a:	f000 fbef 	bl	1c12c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b94e:	4c15      	ldr	r4, [pc, #84]	; (1b9a4 <z_init_static_threads+0x94>)
   1b950:	e01b      	b.n	1b98a <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1b952:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1b954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b958:	ea4f 79e3 	mov.w	r9, r3, asr #31
   1b95c:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1b960:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1b964:	03d8      	lsls	r0, r3, #15
   1b966:	f240 35e7 	movw	r5, #999	; 0x3e7
   1b96a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b96e:	2300      	movs	r3, #0
   1b970:	1940      	adds	r0, r0, r5
   1b972:	f04f 0500 	mov.w	r5, #0
   1b976:	eb45 0101 	adc.w	r1, r5, r1
   1b97a:	f7e4 fbc1 	bl	100 <__aeabi_uldivmod>
   1b97e:	4602      	mov	r2, r0
   1b980:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1b982:	4630      	mov	r0, r6
   1b984:	f7ff ff4e 	bl	1b824 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b988:	3430      	adds	r4, #48	; 0x30
   1b98a:	4b07      	ldr	r3, [pc, #28]	; (1b9a8 <z_init_static_threads+0x98>)
   1b98c:	429c      	cmp	r4, r3
   1b98e:	d204      	bcs.n	1b99a <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b990:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b992:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b996:	d0f7      	beq.n	1b988 <z_init_static_threads+0x78>
   1b998:	e7db      	b.n	1b952 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1b99a:	f000 fdc5 	bl	1c528 <k_sched_unlock>
}
   1b99e:	b006      	add	sp, #24
   1b9a0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1b9a4:	20000684 	.word	0x20000684
   1b9a8:	20000684 	.word	0x20000684

0001b9ac <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1b9ac:	b508      	push	{r3, lr}
   1b9ae:	e001      	b.n	1b9b4 <idle+0x8>
	arch_cpu_idle();
   1b9b0:	f7f6 fe42 	bl	12638 <arch_cpu_idle>
	__asm__ volatile(
   1b9b4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b9b8:	f3ef 8311 	mrs	r3, BASEPRI
   1b9bc:	f382 8812 	msr	BASEPRI_MAX, r2
   1b9c0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1b9c4:	f008 fe31 	bl	2462a <z_get_next_timeout_expiry>
   1b9c8:	4b03      	ldr	r3, [pc, #12]	; (1b9d8 <idle+0x2c>)
   1b9ca:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1b9cc:	f7f6 f896 	bl	11afc <pm_system_suspend>
   1b9d0:	2800      	cmp	r0, #0
   1b9d2:	d1ef      	bne.n	1b9b4 <idle+0x8>
   1b9d4:	e7ec      	b.n	1b9b0 <idle+0x4>
   1b9d6:	bf00      	nop
   1b9d8:	20002c9c 	.word	0x20002c9c

0001b9dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b9dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b9e0:	b083      	sub	sp, #12
   1b9e2:	4604      	mov	r4, r0
   1b9e4:	461d      	mov	r5, r3
   1b9e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9ea:	f3ef 8711 	mrs	r7, BASEPRI
   1b9ee:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b9f6:	68c1      	ldr	r1, [r0, #12]
   1b9f8:	b999      	cbnz	r1, 1ba22 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1b9fa:	2900      	cmp	r1, #0
   1b9fc:	d14f      	bne.n	1ba9e <z_impl_k_mutex_lock+0xc2>
   1b9fe:	4b3a      	ldr	r3, [pc, #232]	; (1bae8 <z_impl_k_mutex_lock+0x10c>)
   1ba00:	689b      	ldr	r3, [r3, #8]
   1ba02:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ba06:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1ba08:	3101      	adds	r1, #1
   1ba0a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1ba0c:	4b36      	ldr	r3, [pc, #216]	; (1bae8 <z_impl_k_mutex_lock+0x10c>)
   1ba0e:	689b      	ldr	r3, [r3, #8]
   1ba10:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1ba12:	f387 8811 	msr	BASEPRI, r7
   1ba16:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1ba1a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1ba1c:	b003      	add	sp, #12
   1ba1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ba22:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ba24:	6882      	ldr	r2, [r0, #8]
   1ba26:	4b30      	ldr	r3, [pc, #192]	; (1bae8 <z_impl_k_mutex_lock+0x10c>)
   1ba28:	689b      	ldr	r3, [r3, #8]
   1ba2a:	429a      	cmp	r2, r3
   1ba2c:	d0e5      	beq.n	1b9fa <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1ba2e:	ea55 0106 	orrs.w	r1, r5, r6
   1ba32:	bf0c      	ite	eq
   1ba34:	f04f 0801 	moveq.w	r8, #1
   1ba38:	f04f 0800 	movne.w	r8, #0
   1ba3c:	d031      	beq.n	1baa2 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1ba3e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ba42:	4649      	mov	r1, r9
   1ba44:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1ba48:	f008 f9df 	bl	23e0a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ba4c:	4581      	cmp	r9, r0
   1ba4e:	dc2f      	bgt.n	1bab0 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1ba50:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ba54:	9600      	str	r6, [sp, #0]
   1ba56:	9501      	str	r5, [sp, #4]
   1ba58:	4622      	mov	r2, r4
   1ba5a:	4639      	mov	r1, r7
   1ba5c:	4823      	ldr	r0, [pc, #140]	; (1baec <z_impl_k_mutex_lock+0x110>)
   1ba5e:	f000 fcad 	bl	1c3bc <z_pend_curr>
	if (got_mutex == 0) {
   1ba62:	2800      	cmp	r0, #0
   1ba64:	d0da      	beq.n	1ba1c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1ba66:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba6a:	f3ef 8511 	mrs	r5, BASEPRI
   1ba6e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba72:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1ba76:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba78:	42a3      	cmp	r3, r4
   1ba7a:	d01f      	beq.n	1babc <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ba7c:	b1f3      	cbz	r3, 1babc <z_impl_k_mutex_lock+0xe0>
   1ba7e:	6921      	ldr	r1, [r4, #16]
   1ba80:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1ba84:	f008 f9c1 	bl	23e0a <new_prio_for_inheritance>
   1ba88:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ba8a:	4620      	mov	r0, r4
   1ba8c:	f008 f9c8 	bl	23e20 <adjust_owner_prio>
   1ba90:	b9b0      	cbnz	r0, 1bac0 <z_impl_k_mutex_lock+0xe4>
   1ba92:	f1b9 0f00 	cmp.w	r9, #0
   1ba96:	d015      	beq.n	1bac4 <z_impl_k_mutex_lock+0xe8>
   1ba98:	f04f 0801 	mov.w	r8, #1
   1ba9c:	e012      	b.n	1bac4 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1ba9e:	6923      	ldr	r3, [r4, #16]
   1baa0:	e7b1      	b.n	1ba06 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1baa2:	f387 8811 	msr	BASEPRI, r7
   1baa6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1baaa:	f06f 000f 	mvn.w	r0, #15
   1baae:	e7b5      	b.n	1ba1c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1bab0:	4601      	mov	r1, r0
   1bab2:	4620      	mov	r0, r4
   1bab4:	f008 f9b4 	bl	23e20 <adjust_owner_prio>
   1bab8:	4681      	mov	r9, r0
   1baba:	e7cb      	b.n	1ba54 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1babc:	6921      	ldr	r1, [r4, #16]
   1babe:	e7e4      	b.n	1ba8a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1bac0:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1bac4:	f1b8 0f00 	cmp.w	r8, #0
   1bac8:	d106      	bne.n	1bad8 <z_impl_k_mutex_lock+0xfc>
   1baca:	f385 8811 	msr	BASEPRI, r5
   1bace:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1bad2:	f06f 000a 	mvn.w	r0, #10
   1bad6:	e7a1      	b.n	1ba1c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1bad8:	4629      	mov	r1, r5
   1bada:	4804      	ldr	r0, [pc, #16]	; (1baec <z_impl_k_mutex_lock+0x110>)
   1badc:	f000 fb0a 	bl	1c0f4 <z_reschedule>
	return -EAGAIN;
   1bae0:	f06f 000a 	mvn.w	r0, #10
   1bae4:	e79a      	b.n	1ba1c <z_impl_k_mutex_lock+0x40>
   1bae6:	bf00      	nop
   1bae8:	20002c9c 	.word	0x20002c9c
   1baec:	20002cc8 	.word	0x20002cc8

0001baf0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1baf0:	6882      	ldr	r2, [r0, #8]
   1baf2:	2a00      	cmp	r2, #0
   1baf4:	d035      	beq.n	1bb62 <z_impl_k_mutex_unlock+0x72>
{
   1baf6:	b538      	push	{r3, r4, r5, lr}
   1baf8:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1bafa:	4b1d      	ldr	r3, [pc, #116]	; (1bb70 <z_impl_k_mutex_unlock+0x80>)
   1bafc:	689b      	ldr	r3, [r3, #8]
   1bafe:	429a      	cmp	r2, r3
   1bb00:	d132      	bne.n	1bb68 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1bb02:	7bda      	ldrb	r2, [r3, #15]
   1bb04:	3a01      	subs	r2, #1
   1bb06:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1bb08:	68c3      	ldr	r3, [r0, #12]
   1bb0a:	2b01      	cmp	r3, #1
   1bb0c:	d905      	bls.n	1bb1a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1bb0e:	3b01      	subs	r3, #1
   1bb10:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1bb12:	f000 fd09 	bl	1c528 <k_sched_unlock>

	return 0;
   1bb16:	2000      	movs	r0, #0
}
   1bb18:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1bb1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb1e:	f3ef 8511 	mrs	r5, BASEPRI
   1bb22:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb26:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1bb2a:	6901      	ldr	r1, [r0, #16]
   1bb2c:	f008 f978 	bl	23e20 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1bb30:	4620      	mov	r0, r4
   1bb32:	f008 fcce 	bl	244d2 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1bb36:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1bb38:	b160      	cbz	r0, 1bb54 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1bb3a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1bb3e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1bb40:	2300      	movs	r3, #0
   1bb42:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1bb46:	f008 fc02 	bl	2434e <z_ready_thread>
		z_reschedule(&lock, key);
   1bb4a:	4629      	mov	r1, r5
   1bb4c:	4809      	ldr	r0, [pc, #36]	; (1bb74 <z_impl_k_mutex_unlock+0x84>)
   1bb4e:	f000 fad1 	bl	1c0f4 <z_reschedule>
   1bb52:	e7de      	b.n	1bb12 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1bb54:	2300      	movs	r3, #0
   1bb56:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1bb58:	f385 8811 	msr	BASEPRI, r5
   1bb5c:	f3bf 8f6f 	isb	sy
   1bb60:	e7d7      	b.n	1bb12 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1bb62:	f06f 0015 	mvn.w	r0, #21
}
   1bb66:	4770      	bx	lr
		return -EPERM;
   1bb68:	f04f 30ff 	mov.w	r0, #4294967295
   1bb6c:	e7d4      	b.n	1bb18 <z_impl_k_mutex_unlock+0x28>
   1bb6e:	bf00      	nop
   1bb70:	20002c9c 	.word	0x20002c9c
   1bb74:	20002cc8 	.word	0x20002cc8

0001bb78 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1bb78:	b5d0      	push	{r4, r6, r7, lr}
   1bb7a:	b082      	sub	sp, #8
   1bb7c:	4601      	mov	r1, r0
   1bb7e:	4616      	mov	r6, r2
   1bb80:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1bb82:	4602      	mov	r2, r0
	__asm__ volatile(
   1bb84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb88:	f3ef 8411 	mrs	r4, BASEPRI
   1bb8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb90:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1bb94:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1bb98:	b188      	cbz	r0, 1bbbe <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bb9a:	6803      	ldr	r3, [r0, #0]
   1bb9c:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1bba0:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1bba2:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bba4:	4290      	cmp	r0, r2
   1bba6:	d008      	beq.n	1bbba <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1bba8:	2101      	movs	r1, #1
   1bbaa:	f008 f9be 	bl	23f2a <z_queue_node_peek>
	__asm__ volatile(
   1bbae:	f384 8811 	msr	BASEPRI, r4
   1bbb2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1bbb6:	b002      	add	sp, #8
   1bbb8:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   1bbba:	604b      	str	r3, [r1, #4]
}
   1bbbc:	e7f4      	b.n	1bba8 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bbbe:	ea56 0307 	orrs.w	r3, r6, r7
   1bbc2:	d00a      	beq.n	1bbda <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1bbc4:	e9cd 6700 	strd	r6, r7, [sp]
   1bbc8:	4621      	mov	r1, r4
   1bbca:	4610      	mov	r0, r2
   1bbcc:	f000 fbf6 	bl	1c3bc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1bbd0:	b948      	cbnz	r0, 1bbe6 <z_impl_k_queue_get+0x6e>
   1bbd2:	4b06      	ldr	r3, [pc, #24]	; (1bbec <z_impl_k_queue_get+0x74>)
   1bbd4:	689b      	ldr	r3, [r3, #8]
   1bbd6:	6958      	ldr	r0, [r3, #20]
   1bbd8:	e7ed      	b.n	1bbb6 <z_impl_k_queue_get+0x3e>
   1bbda:	f384 8811 	msr	BASEPRI, r4
   1bbde:	f3bf 8f6f 	isb	sy
		return NULL;
   1bbe2:	2000      	movs	r0, #0
   1bbe4:	e7e7      	b.n	1bbb6 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1bbe6:	2000      	movs	r0, #0
   1bbe8:	e7e5      	b.n	1bbb6 <z_impl_k_queue_get+0x3e>
   1bbea:	bf00      	nop
   1bbec:	20002c9c 	.word	0x20002c9c

0001bbf0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1bbf0:	b538      	push	{r3, r4, r5, lr}
   1bbf2:	4604      	mov	r4, r0
	__asm__ volatile(
   1bbf4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbf8:	f3ef 8511 	mrs	r5, BASEPRI
   1bbfc:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1bc04:	f008 fc65 	bl	244d2 <z_unpend_first_thread>

	if (thread != NULL) {
   1bc08:	b148      	cbz	r0, 1bc1e <z_impl_k_sem_give+0x2e>
   1bc0a:	2200      	movs	r2, #0
   1bc0c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1bc10:	f008 fb9d 	bl	2434e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1bc14:	4629      	mov	r1, r5
   1bc16:	4809      	ldr	r0, [pc, #36]	; (1bc3c <z_impl_k_sem_give+0x4c>)
   1bc18:	f000 fa6c 	bl	1c0f4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1bc1c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bc1e:	68a3      	ldr	r3, [r4, #8]
   1bc20:	68e2      	ldr	r2, [r4, #12]
   1bc22:	4293      	cmp	r3, r2
   1bc24:	d008      	beq.n	1bc38 <z_impl_k_sem_give+0x48>
   1bc26:	2201      	movs	r2, #1
   1bc28:	4413      	add	r3, r2
   1bc2a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bc2c:	2102      	movs	r1, #2
   1bc2e:	f104 0010 	add.w	r0, r4, #16
   1bc32:	f008 fe25 	bl	24880 <z_handle_obj_poll_events>
}
   1bc36:	e7ed      	b.n	1bc14 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bc38:	2200      	movs	r2, #0
   1bc3a:	e7f5      	b.n	1bc28 <z_impl_k_sem_give+0x38>
   1bc3c:	20002cc8 	.word	0x20002cc8

0001bc40 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1bc40:	b530      	push	{r4, r5, lr}
   1bc42:	b083      	sub	sp, #12
   1bc44:	461d      	mov	r5, r3
   1bc46:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc4a:	f3ef 8111 	mrs	r1, BASEPRI
   1bc4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1bc56:	6883      	ldr	r3, [r0, #8]
   1bc58:	b143      	cbz	r3, 1bc6c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1bc5a:	3b01      	subs	r3, #1
   1bc5c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1bc5e:	f381 8811 	msr	BASEPRI, r1
   1bc62:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1bc66:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1bc68:	b003      	add	sp, #12
   1bc6a:	bd30      	pop	{r4, r5, pc}
   1bc6c:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bc6e:	ea54 0305 	orrs.w	r3, r4, r5
   1bc72:	d006      	beq.n	1bc82 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bc74:	e9cd 4500 	strd	r4, r5, [sp]
   1bc78:	4602      	mov	r2, r0
   1bc7a:	4805      	ldr	r0, [pc, #20]	; (1bc90 <z_impl_k_sem_take+0x50>)
   1bc7c:	f000 fb9e 	bl	1c3bc <z_pend_curr>
	return ret;
   1bc80:	e7f2      	b.n	1bc68 <z_impl_k_sem_take+0x28>
   1bc82:	f381 8811 	msr	BASEPRI, r1
   1bc86:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1bc8a:	f06f 000f 	mvn.w	r0, #15
   1bc8e:	e7eb      	b.n	1bc68 <z_impl_k_sem_take+0x28>
   1bc90:	20002cc8 	.word	0x20002cc8

0001bc94 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1bc94:	b510      	push	{r4, lr}
   1bc96:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1bc98:	4b08      	ldr	r3, [pc, #32]	; (1bcbc <k_sys_work_q_init+0x28>)
   1bc9a:	9302      	str	r3, [sp, #8]
   1bc9c:	2400      	movs	r4, #0
   1bc9e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1bca2:	ab02      	add	r3, sp, #8
   1bca4:	9300      	str	r3, [sp, #0]
   1bca6:	f04f 33ff 	mov.w	r3, #4294967295
   1bcaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1bcae:	4904      	ldr	r1, [pc, #16]	; (1bcc0 <k_sys_work_q_init+0x2c>)
   1bcb0:	4804      	ldr	r0, [pc, #16]	; (1bcc4 <k_sys_work_q_init+0x30>)
   1bcb2:	f000 f96f 	bl	1bf94 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1bcb6:	4620      	mov	r0, r4
   1bcb8:	b004      	add	sp, #16
   1bcba:	bd10      	pop	{r4, pc}
   1bcbc:	00026db8 	.word	0x00026db8
   1bcc0:	20005fc0 	.word	0x20005fc0
   1bcc4:	20001e90 	.word	0x20001e90

0001bcc8 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcca:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1bccc:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1bcce:	f013 0f02 	tst.w	r3, #2
   1bcd2:	d15b      	bne.n	1bd8c <submit_to_queue_locked+0xc4>
   1bcd4:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1bcd6:	f013 0f04 	tst.w	r3, #4
   1bcda:	d15c      	bne.n	1bd96 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1bcdc:	680b      	ldr	r3, [r1, #0]
   1bcde:	2b00      	cmp	r3, #0
   1bce0:	d037      	beq.n	1bd52 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1bce2:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1bce4:	f013 0f01 	tst.w	r3, #1
   1bce8:	d036      	beq.n	1bd58 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1bcea:	68a3      	ldr	r3, [r4, #8]
   1bcec:	602b      	str	r3, [r5, #0]
			ret = 2;
   1bcee:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1bcf0:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1bcf2:	2e00      	cmp	r6, #0
   1bcf4:	d03e      	beq.n	1bd74 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1bcf6:	4b29      	ldr	r3, [pc, #164]	; (1bd9c <submit_to_queue_locked+0xd4>)
   1bcf8:	689b      	ldr	r3, [r3, #8]
   1bcfa:	42b3      	cmp	r3, r6
   1bcfc:	d02e      	beq.n	1bd5c <submit_to_queue_locked+0x94>
   1bcfe:	2300      	movs	r3, #0
   1bd00:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1bd02:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1bd06:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1bd0a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1bd0e:	f013 0f01 	tst.w	r3, #1
   1bd12:	d032      	beq.n	1bd7a <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1bd14:	b101      	cbz	r1, 1bd18 <submit_to_queue_locked+0x50>
   1bd16:	b39a      	cbz	r2, 1bd80 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1bd18:	b100      	cbz	r0, 1bd1c <submit_to_queue_locked+0x54>
   1bd1a:	b3a1      	cbz	r1, 1bd86 <submit_to_queue_locked+0xbe>
	parent->next = child;
   1bd1c:	2300      	movs	r3, #0
   1bd1e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1bd20:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1bd24:	b30b      	cbz	r3, 1bd6a <submit_to_queue_locked+0xa2>
	parent->next = child;
   1bd26:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bd28:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1bd2c:	2200      	movs	r2, #0
   1bd2e:	4611      	mov	r1, r2
   1bd30:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1bd34:	f008 fc0d 	bl	24552 <z_sched_wake>
		ret = 1;
   1bd38:	2001      	movs	r0, #1

		if (rc < 0) {
   1bd3a:	2800      	cmp	r0, #0
   1bd3c:	db06      	blt.n	1bd4c <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1bd3e:	68e3      	ldr	r3, [r4, #12]
   1bd40:	f043 0304 	orr.w	r3, r3, #4
   1bd44:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1bd46:	682b      	ldr	r3, [r5, #0]
   1bd48:	60a3      	str	r3, [r4, #8]
   1bd4a:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1bd4c:	2800      	cmp	r0, #0
   1bd4e:	dc21      	bgt.n	1bd94 <submit_to_queue_locked+0xcc>
   1bd50:	e01e      	b.n	1bd90 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1bd52:	6883      	ldr	r3, [r0, #8]
   1bd54:	600b      	str	r3, [r1, #0]
   1bd56:	e7c4      	b.n	1bce2 <submit_to_queue_locked+0x1a>
		ret = 1;
   1bd58:	2701      	movs	r7, #1
   1bd5a:	e7c9      	b.n	1bcf0 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1bd5c:	f008 f816 	bl	23d8c <k_is_in_isr>
   1bd60:	b908      	cbnz	r0, 1bd66 <submit_to_queue_locked+0x9e>
   1bd62:	2301      	movs	r3, #1
   1bd64:	e7cc      	b.n	1bd00 <submit_to_queue_locked+0x38>
   1bd66:	2300      	movs	r3, #0
   1bd68:	e7ca      	b.n	1bd00 <submit_to_queue_locked+0x38>
   1bd6a:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1bd6e:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1bd72:	e7db      	b.n	1bd2c <submit_to_queue_locked+0x64>
		return -EINVAL;
   1bd74:	f06f 0015 	mvn.w	r0, #21
   1bd78:	e7df      	b.n	1bd3a <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1bd7a:	f06f 0012 	mvn.w	r0, #18
   1bd7e:	e7dc      	b.n	1bd3a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1bd80:	f06f 000f 	mvn.w	r0, #15
   1bd84:	e7d9      	b.n	1bd3a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1bd86:	f06f 000f 	mvn.w	r0, #15
   1bd8a:	e7d6      	b.n	1bd3a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1bd8c:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1bd90:	2300      	movs	r3, #0
   1bd92:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1bd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1bd96:	2000      	movs	r0, #0
   1bd98:	e7fa      	b.n	1bd90 <submit_to_queue_locked+0xc8>
   1bd9a:	bf00      	nop
   1bd9c:	20002c9c 	.word	0x20002c9c

0001bda0 <finalize_cancel_locked>:
{
   1bda0:	b570      	push	{r4, r5, r6, lr}
   1bda2:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1bda4:	68c3      	ldr	r3, [r0, #12]
   1bda6:	f023 0302 	bic.w	r3, r3, #2
   1bdaa:	60c3      	str	r3, [r0, #12]
	return list->head;
   1bdac:	4b19      	ldr	r3, [pc, #100]	; (1be14 <finalize_cancel_locked+0x74>)
   1bdae:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1bdb0:	b1e8      	cbz	r0, 1bdee <finalize_cancel_locked+0x4e>
   1bdb2:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bdb4:	b100      	cbz	r0, 1bdb8 <finalize_cancel_locked+0x18>
	return node->next;
   1bdb6:	6804      	ldr	r4, [r0, #0]
   1bdb8:	2600      	movs	r6, #0
   1bdba:	e01d      	b.n	1bdf8 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   1bdbc:	b15e      	cbz	r6, 1bdd6 <finalize_cancel_locked+0x36>
	return node->next;
   1bdbe:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1bdc0:	6033      	str	r3, [r6, #0]
	return list->tail;
   1bdc2:	4b14      	ldr	r3, [pc, #80]	; (1be14 <finalize_cancel_locked+0x74>)
   1bdc4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bdc6:	4298      	cmp	r0, r3
   1bdc8:	d00e      	beq.n	1bde8 <finalize_cancel_locked+0x48>
	parent->next = child;
   1bdca:	2300      	movs	r3, #0
   1bdcc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1bdd0:	f7ff ff0e 	bl	1bbf0 <z_impl_k_sem_give>
}
   1bdd4:	e015      	b.n	1be02 <finalize_cancel_locked+0x62>
	return node->next;
   1bdd6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1bdd8:	4b0e      	ldr	r3, [pc, #56]	; (1be14 <finalize_cancel_locked+0x74>)
   1bdda:	601a      	str	r2, [r3, #0]
	return list->tail;
   1bddc:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bdde:	4298      	cmp	r0, r3
   1bde0:	d1f3      	bne.n	1bdca <finalize_cancel_locked+0x2a>
	list->tail = node;
   1bde2:	4b0c      	ldr	r3, [pc, #48]	; (1be14 <finalize_cancel_locked+0x74>)
   1bde4:	605a      	str	r2, [r3, #4]
}
   1bde6:	e7f0      	b.n	1bdca <finalize_cancel_locked+0x2a>
	list->tail = node;
   1bde8:	4b0a      	ldr	r3, [pc, #40]	; (1be14 <finalize_cancel_locked+0x74>)
   1bdea:	605e      	str	r6, [r3, #4]
}
   1bdec:	e7ed      	b.n	1bdca <finalize_cancel_locked+0x2a>
   1bdee:	4604      	mov	r4, r0
   1bdf0:	e7e2      	b.n	1bdb8 <finalize_cancel_locked+0x18>
   1bdf2:	4623      	mov	r3, r4
   1bdf4:	4620      	mov	r0, r4
   1bdf6:	461c      	mov	r4, r3
   1bdf8:	b150      	cbz	r0, 1be10 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1bdfa:	6843      	ldr	r3, [r0, #4]
   1bdfc:	42ab      	cmp	r3, r5
   1bdfe:	d0dd      	beq.n	1bdbc <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1be00:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1be02:	2c00      	cmp	r4, #0
   1be04:	d0f5      	beq.n	1bdf2 <finalize_cancel_locked+0x52>
   1be06:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1be08:	2c00      	cmp	r4, #0
   1be0a:	d0f3      	beq.n	1bdf4 <finalize_cancel_locked+0x54>
	return node->next;
   1be0c:	6823      	ldr	r3, [r4, #0]
   1be0e:	e7f1      	b.n	1bdf4 <finalize_cancel_locked+0x54>
}
   1be10:	bd70      	pop	{r4, r5, r6, pc}
   1be12:	bf00      	nop
   1be14:	20002cc8 	.word	0x20002cc8

0001be18 <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   1be18:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1be1a:	68c5      	ldr	r5, [r0, #12]
   1be1c:	f015 0f02 	tst.w	r5, #2
   1be20:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   1be24:	d101      	bne.n	1be2a <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   1be26:	4628      	mov	r0, r5
   1be28:	bd70      	pop	{r4, r5, r6, pc}
   1be2a:	4604      	mov	r4, r0
   1be2c:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1be2e:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   1be32:	2201      	movs	r2, #1
   1be34:	2100      	movs	r1, #0
   1be36:	f008 f8e6 	bl	24006 <z_impl_k_sem_init>
	canceler->work = work;
   1be3a:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1be3c:	2300      	movs	r3, #0
   1be3e:	6033      	str	r3, [r6, #0]
	return list->tail;
   1be40:	4b05      	ldr	r3, [pc, #20]	; (1be58 <cancel_sync_locked+0x40>)
   1be42:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1be44:	b11b      	cbz	r3, 1be4e <cancel_sync_locked+0x36>
	parent->next = child;
   1be46:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1be48:	4b03      	ldr	r3, [pc, #12]	; (1be58 <cancel_sync_locked+0x40>)
   1be4a:	605e      	str	r6, [r3, #4]
}
   1be4c:	e7eb      	b.n	1be26 <cancel_sync_locked+0xe>
   1be4e:	4b02      	ldr	r3, [pc, #8]	; (1be58 <cancel_sync_locked+0x40>)
   1be50:	605e      	str	r6, [r3, #4]
	list->head = node;
   1be52:	601e      	str	r6, [r3, #0]
}
   1be54:	e7e7      	b.n	1be26 <cancel_sync_locked+0xe>
   1be56:	bf00      	nop
   1be58:	20002cc8 	.word	0x20002cc8

0001be5c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1be5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be5e:	b085      	sub	sp, #20
   1be60:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1be62:	e016      	b.n	1be92 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1be64:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1be68:	f023 0204 	bic.w	r2, r3, #4
   1be6c:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1be70:	f013 0f04 	tst.w	r3, #4
   1be74:	d158      	bne.n	1bf28 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1be76:	2300      	movs	r3, #0
   1be78:	9302      	str	r3, [sp, #8]
   1be7a:	f04f 32ff 	mov.w	r2, #4294967295
   1be7e:	f04f 33ff 	mov.w	r3, #4294967295
   1be82:	e9cd 2300 	strd	r2, r3, [sp]
   1be86:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1be8a:	4631      	mov	r1, r6
   1be8c:	482e      	ldr	r0, [pc, #184]	; (1bf48 <work_queue_main+0xec>)
   1be8e:	f000 fcc9 	bl	1c824 <z_sched_wait>
	__asm__ volatile(
   1be92:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be96:	f3ef 8611 	mrs	r6, BASEPRI
   1be9a:	f383 8812 	msr	BASEPRI_MAX, r3
   1be9e:	f3bf 8f6f 	isb	sy
	return list->head;
   1bea2:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1bea6:	2c00      	cmp	r4, #0
   1bea8:	d0dc      	beq.n	1be64 <work_queue_main+0x8>
	return node->next;
   1beaa:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1beac:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1beb0:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1beb4:	4294      	cmp	r4, r2
   1beb6:	d034      	beq.n	1bf22 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1beb8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1bebc:	f043 0302 	orr.w	r3, r3, #2
   1bec0:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1bec4:	68e3      	ldr	r3, [r4, #12]
   1bec6:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1beca:	f023 0304 	bic.w	r3, r3, #4
   1bece:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1bed0:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1bed2:	2c00      	cmp	r4, #0
   1bed4:	d0cf      	beq.n	1be76 <work_queue_main+0x1a>
	__asm__ volatile(
   1bed6:	f386 8811 	msr	BASEPRI, r6
   1beda:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1bede:	4620      	mov	r0, r4
   1bee0:	4798      	blx	r3
	__asm__ volatile(
   1bee2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bee6:	f3ef 8611 	mrs	r6, BASEPRI
   1beea:	f383 8812 	msr	BASEPRI_MAX, r3
   1beee:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1bef2:	68e3      	ldr	r3, [r4, #12]
   1bef4:	f023 0301 	bic.w	r3, r3, #1
   1bef8:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1befa:	f013 0f02 	tst.w	r3, #2
   1befe:	d11e      	bne.n	1bf3e <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   1bf00:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1bf04:	f023 0302 	bic.w	r3, r3, #2
   1bf08:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1bf0c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1bf10:	f386 8811 	msr	BASEPRI, r6
   1bf14:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1bf18:	2b00      	cmp	r3, #0
   1bf1a:	d1ba      	bne.n	1be92 <work_queue_main+0x36>
	z_impl_k_yield();
   1bf1c:	f000 fb84 	bl	1c628 <z_impl_k_yield>
}
   1bf20:	e7b7      	b.n	1be92 <work_queue_main+0x36>
	list->tail = node;
   1bf22:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1bf26:	e7c7      	b.n	1beb8 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1bf28:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1bf2c:	2200      	movs	r2, #0
   1bf2e:	2101      	movs	r1, #1
   1bf30:	4638      	mov	r0, r7
   1bf32:	f008 fb0e 	bl	24552 <z_sched_wake>
   1bf36:	2800      	cmp	r0, #0
   1bf38:	d1f8      	bne.n	1bf2c <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1bf3a:	2300      	movs	r3, #0
   1bf3c:	e7c9      	b.n	1bed2 <work_queue_main+0x76>
			finalize_cancel_locked(work);
   1bf3e:	4620      	mov	r0, r4
   1bf40:	f7ff ff2e 	bl	1bda0 <finalize_cancel_locked>
   1bf44:	e7dc      	b.n	1bf00 <work_queue_main+0xa4>
   1bf46:	bf00      	nop
   1bf48:	20002cc8 	.word	0x20002cc8

0001bf4c <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1bf4c:	b570      	push	{r4, r5, r6, lr}
   1bf4e:	4606      	mov	r6, r0
   1bf50:	4608      	mov	r0, r1
   1bf52:	4614      	mov	r4, r2
   1bf54:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bf56:	ea54 0305 	orrs.w	r3, r4, r5
   1bf5a:	d00c      	beq.n	1bf76 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   1bf5c:	68cb      	ldr	r3, [r1, #12]
   1bf5e:	f043 0308 	orr.w	r3, r3, #8
   1bf62:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1bf64:	6833      	ldr	r3, [r6, #0]
   1bf66:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1bf68:	462b      	mov	r3, r5
   1bf6a:	4905      	ldr	r1, [pc, #20]	; (1bf80 <schedule_for_queue_locked+0x34>)
   1bf6c:	3010      	adds	r0, #16
   1bf6e:	f000 fccd 	bl	1c90c <z_add_timeout>

	return ret;
   1bf72:	2001      	movs	r0, #1
}
   1bf74:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   1bf76:	4631      	mov	r1, r6
   1bf78:	f7ff fea6 	bl	1bcc8 <submit_to_queue_locked>
   1bf7c:	e7fa      	b.n	1bf74 <schedule_for_queue_locked+0x28>
   1bf7e:	bf00      	nop
   1bf80:	000240b1 	.word	0x000240b1

0001bf84 <k_work_submit>:
{
   1bf84:	b508      	push	{r3, lr}
   1bf86:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1bf88:	4801      	ldr	r0, [pc, #4]	; (1bf90 <k_work_submit+0xc>)
   1bf8a:	f008 f8c5 	bl	24118 <k_work_submit_to_queue>
}
   1bf8e:	bd08      	pop	{r3, pc}
   1bf90:	20001e90 	.word	0x20001e90

0001bf94 <k_work_queue_start>:
{
   1bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf96:	b089      	sub	sp, #36	; 0x24
   1bf98:	4604      	mov	r4, r0
   1bf9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1bf9c:	2000      	movs	r0, #0
   1bf9e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1bfa2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1bfa6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1bfaa:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1bfae:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1bfb2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1bfb6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1bfba:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1bfbe:	b1fd      	cbz	r5, 1c000 <k_work_queue_start+0x6c>
   1bfc0:	7928      	ldrb	r0, [r5, #4]
   1bfc2:	b9f8      	cbnz	r0, 1c004 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1bfc4:	2001      	movs	r0, #1
	*flagp = flags;
   1bfc6:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bfca:	f04f 36ff 	mov.w	r6, #4294967295
   1bfce:	f04f 37ff 	mov.w	r7, #4294967295
   1bfd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1bfd6:	2000      	movs	r0, #0
   1bfd8:	9004      	str	r0, [sp, #16]
   1bfda:	9303      	str	r3, [sp, #12]
   1bfdc:	9002      	str	r0, [sp, #8]
   1bfde:	9001      	str	r0, [sp, #4]
   1bfe0:	9400      	str	r4, [sp, #0]
   1bfe2:	4b0a      	ldr	r3, [pc, #40]	; (1c00c <k_work_queue_start+0x78>)
   1bfe4:	4620      	mov	r0, r4
   1bfe6:	f007 fee8 	bl	23dba <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1bfea:	b125      	cbz	r5, 1bff6 <k_work_queue_start+0x62>
   1bfec:	6829      	ldr	r1, [r5, #0]
   1bfee:	b111      	cbz	r1, 1bff6 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1bff0:	4620      	mov	r0, r4
   1bff2:	f7ff fc05 	bl	1b800 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1bff6:	4620      	mov	r0, r4
   1bff8:	f007 fed0 	bl	23d9c <z_impl_k_thread_start>
}
   1bffc:	b009      	add	sp, #36	; 0x24
   1bffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1c000:	2001      	movs	r0, #1
   1c002:	e7e0      	b.n	1bfc6 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1c004:	f240 1001 	movw	r0, #257	; 0x101
   1c008:	e7dd      	b.n	1bfc6 <k_work_queue_start+0x32>
   1c00a:	bf00      	nop
   1c00c:	0001be5d 	.word	0x0001be5d

0001c010 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1c010:	b508      	push	{r3, lr}
   1c012:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1c014:	4801      	ldr	r0, [pc, #4]	; (1c01c <k_work_schedule+0xc>)
   1c016:	f008 f8ab 	bl	24170 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1c01a:	bd08      	pop	{r3, pc}
   1c01c:	20001e90 	.word	0x20001e90

0001c020 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1c020:	b508      	push	{r3, lr}
   1c022:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1c024:	4801      	ldr	r0, [pc, #4]	; (1c02c <k_work_reschedule+0xc>)
   1c026:	f008 f8bd 	bl	241a4 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1c02a:	bd08      	pop	{r3, pc}
   1c02c:	20001e90 	.word	0x20001e90

0001c030 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1c030:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c032:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c036:	bf08      	it	eq
   1c038:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1c03c:	d100      	bne.n	1c040 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1c03e:	bd38      	pop	{r3, r4, r5, pc}
   1c040:	4902      	ldr	r1, [pc, #8]	; (1c04c <add_thread_timeout+0x1c>)
   1c042:	3018      	adds	r0, #24
   1c044:	f000 fc62 	bl	1c90c <z_add_timeout>
   1c048:	e7f9      	b.n	1c03e <add_thread_timeout+0xe>
   1c04a:	bf00      	nop
   1c04c:	00024387 	.word	0x00024387

0001c050 <z_reset_time_slice>:
{
   1c050:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1c052:	4b08      	ldr	r3, [pc, #32]	; (1c074 <z_reset_time_slice+0x24>)
   1c054:	681b      	ldr	r3, [r3, #0]
   1c056:	b903      	cbnz	r3, 1c05a <z_reset_time_slice+0xa>
}
   1c058:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1c05a:	f7fd ff6d 	bl	19f38 <sys_clock_elapsed>
   1c05e:	4603      	mov	r3, r0
   1c060:	4a04      	ldr	r2, [pc, #16]	; (1c074 <z_reset_time_slice+0x24>)
   1c062:	6810      	ldr	r0, [r2, #0]
   1c064:	4403      	add	r3, r0
   1c066:	4a04      	ldr	r2, [pc, #16]	; (1c078 <z_reset_time_slice+0x28>)
   1c068:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1c06a:	2100      	movs	r1, #0
   1c06c:	f008 faf3 	bl	24656 <z_set_timeout_expiry>
}
   1c070:	e7f2      	b.n	1c058 <z_reset_time_slice+0x8>
   1c072:	bf00      	nop
   1c074:	20002cd8 	.word	0x20002cd8
   1c078:	20002c9c 	.word	0x20002c9c

0001c07c <k_sched_time_slice_set>:
{
   1c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c080:	4606      	mov	r6, r0
   1c082:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1c084:	2300      	movs	r3, #0
	__asm__ volatile(
   1c086:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c08a:	f3ef 8711 	mrs	r7, BASEPRI
   1c08e:	f382 8812 	msr	BASEPRI_MAX, r2
   1c092:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c096:	e009      	b.n	1c0ac <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   1c098:	4b13      	ldr	r3, [pc, #76]	; (1c0e8 <k_sched_time_slice_set+0x6c>)
   1c09a:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   1c09e:	f7ff ffd7 	bl	1c050 <z_reset_time_slice>
	__asm__ volatile(
   1c0a2:	f387 8811 	msr	BASEPRI, r7
   1c0a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c0aa:	2301      	movs	r3, #1
   1c0ac:	b9cb      	cbnz	r3, 1c0e2 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   1c0ae:	2300      	movs	r3, #0
   1c0b0:	4a0e      	ldr	r2, [pc, #56]	; (1c0ec <k_sched_time_slice_set+0x70>)
   1c0b2:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1c0b4:	0c75      	lsrs	r5, r6, #17
   1c0b6:	03f4      	lsls	r4, r6, #15
   1c0b8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c0bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c0c0:	2300      	movs	r3, #0
   1c0c2:	1820      	adds	r0, r4, r0
   1c0c4:	f04f 0100 	mov.w	r1, #0
   1c0c8:	eb45 0101 	adc.w	r1, r5, r1
   1c0cc:	f7e4 f818 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1c0d0:	4b07      	ldr	r3, [pc, #28]	; (1c0f0 <k_sched_time_slice_set+0x74>)
   1c0d2:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1c0d4:	2e00      	cmp	r6, #0
   1c0d6:	dddf      	ble.n	1c098 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   1c0d8:	2802      	cmp	r0, #2
   1c0da:	bfb8      	it	lt
   1c0dc:	2002      	movlt	r0, #2
   1c0de:	6018      	str	r0, [r3, #0]
   1c0e0:	e7da      	b.n	1c098 <k_sched_time_slice_set+0x1c>
}
   1c0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0e6:	bf00      	nop
   1c0e8:	20002cd4 	.word	0x20002cd4
   1c0ec:	20002c9c 	.word	0x20002c9c
   1c0f0:	20002cd8 	.word	0x20002cd8

0001c0f4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1c0f4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1c0f6:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c0f8:	b921      	cbnz	r1, 1c104 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c0fa:	f3ef 8305 	mrs	r3, IPSR
   1c0fe:	b913      	cbnz	r3, 1c106 <z_reschedule+0x12>
   1c100:	2101      	movs	r1, #1
   1c102:	e000      	b.n	1c106 <z_reschedule+0x12>
   1c104:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1c106:	f011 0f01 	tst.w	r1, #1
   1c10a:	d007      	beq.n	1c11c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1c10c:	4b06      	ldr	r3, [pc, #24]	; (1c128 <z_reschedule+0x34>)
   1c10e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1c110:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1c112:	429a      	cmp	r2, r3
   1c114:	d002      	beq.n	1c11c <z_reschedule+0x28>
	ret = arch_swap(key);
   1c116:	f7f6 fb73 	bl	12800 <arch_swap>
		z_swap(lock, key);
   1c11a:	e003      	b.n	1c124 <z_reschedule+0x30>
   1c11c:	f380 8811 	msr	BASEPRI, r0
   1c120:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1c124:	bd08      	pop	{r3, pc}
   1c126:	bf00      	nop
   1c128:	20002c9c 	.word	0x20002c9c

0001c12c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1c12c:	2300      	movs	r3, #0
	__asm__ volatile(
   1c12e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c132:	f3ef 8111 	mrs	r1, BASEPRI
   1c136:	f382 8812 	msr	BASEPRI_MAX, r2
   1c13a:	f3bf 8f6f 	isb	sy
   1c13e:	b953      	cbnz	r3, 1c156 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1c140:	4b05      	ldr	r3, [pc, #20]	; (1c158 <k_sched_lock+0x2c>)
   1c142:	689a      	ldr	r2, [r3, #8]
   1c144:	7bd3      	ldrb	r3, [r2, #15]
   1c146:	3b01      	subs	r3, #1
   1c148:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1c14a:	f381 8811 	msr	BASEPRI, r1
   1c14e:	f3bf 8f6f 	isb	sy
   1c152:	2301      	movs	r3, #1
   1c154:	e7f3      	b.n	1c13e <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1c156:	4770      	bx	lr
   1c158:	20002c9c 	.word	0x20002c9c

0001c15c <update_cache>:
{
   1c15c:	b538      	push	{r3, r4, r5, lr}
   1c15e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   1c160:	480f      	ldr	r0, [pc, #60]	; (1c1a0 <update_cache+0x44>)
   1c162:	f008 f8ed 	bl	24340 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1c166:	4605      	mov	r5, r0
   1c168:	b170      	cbz	r0, 1c188 <update_cache+0x2c>
	if (preempt_ok != 0) {
   1c16a:	b984      	cbnz	r4, 1c18e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1c16c:	4b0d      	ldr	r3, [pc, #52]	; (1c1a4 <update_cache+0x48>)
   1c16e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1c170:	7b5a      	ldrb	r2, [r3, #13]
   1c172:	f012 0f1f 	tst.w	r2, #31
   1c176:	d10a      	bne.n	1c18e <update_cache+0x32>
	return node->next != NULL;
   1c178:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1c17a:	b942      	cbnz	r2, 1c18e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1c17c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1c17e:	2a7f      	cmp	r2, #127	; 0x7f
   1c180:	d905      	bls.n	1c18e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1c182:	4a08      	ldr	r2, [pc, #32]	; (1c1a4 <update_cache+0x48>)
   1c184:	61d3      	str	r3, [r2, #28]
   1c186:	e00a      	b.n	1c19e <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1c188:	4b06      	ldr	r3, [pc, #24]	; (1c1a4 <update_cache+0x48>)
   1c18a:	68dd      	ldr	r5, [r3, #12]
   1c18c:	e7ed      	b.n	1c16a <update_cache+0xe>
		if (thread != _current) {
   1c18e:	4b05      	ldr	r3, [pc, #20]	; (1c1a4 <update_cache+0x48>)
   1c190:	689b      	ldr	r3, [r3, #8]
   1c192:	42ab      	cmp	r3, r5
   1c194:	d001      	beq.n	1c19a <update_cache+0x3e>
			z_reset_time_slice();
   1c196:	f7ff ff5b 	bl	1c050 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1c19a:	4b02      	ldr	r3, [pc, #8]	; (1c1a4 <update_cache+0x48>)
   1c19c:	61dd      	str	r5, [r3, #28]
}
   1c19e:	bd38      	pop	{r3, r4, r5, pc}
   1c1a0:	20002cbc 	.word	0x20002cbc
   1c1a4:	20002c9c 	.word	0x20002c9c

0001c1a8 <move_thread_to_end_of_prio_q>:
{
   1c1a8:	b538      	push	{r3, r4, r5, lr}
   1c1aa:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1c1ac:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1c1ae:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1c1b2:	2b00      	cmp	r3, #0
   1c1b4:	db28      	blt.n	1c208 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1c1b6:	7b6b      	ldrb	r3, [r5, #13]
   1c1b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c1bc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1c1be:	4b1a      	ldr	r3, [pc, #104]	; (1c228 <move_thread_to_end_of_prio_q+0x80>)
   1c1c0:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c1c4:	429c      	cmp	r4, r3
   1c1c6:	d02d      	beq.n	1c224 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c1c8:	b16c      	cbz	r4, 1c1e6 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c1ca:	4621      	mov	r1, r4
   1c1cc:	4628      	mov	r0, r5
   1c1ce:	f008 f84e 	bl	2426e <z_sched_prio_cmp>
   1c1d2:	2800      	cmp	r0, #0
   1c1d4:	dc20      	bgt.n	1c218 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c1d6:	b134      	cbz	r4, 1c1e6 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1c1d8:	4b13      	ldr	r3, [pc, #76]	; (1c228 <move_thread_to_end_of_prio_q+0x80>)
   1c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c1dc:	429c      	cmp	r4, r3
   1c1de:	d002      	beq.n	1c1e6 <move_thread_to_end_of_prio_q+0x3e>
   1c1e0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c1e2:	2c00      	cmp	r4, #0
   1c1e4:	d1f0      	bne.n	1c1c8 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1c1e6:	4b10      	ldr	r3, [pc, #64]	; (1c228 <move_thread_to_end_of_prio_q+0x80>)
   1c1e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1c1ea:	f103 0120 	add.w	r1, r3, #32
   1c1ee:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1c1f0:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1c1f2:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1c1f4:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1c1f6:	4b0c      	ldr	r3, [pc, #48]	; (1c228 <move_thread_to_end_of_prio_q+0x80>)
   1c1f8:	6898      	ldr	r0, [r3, #8]
   1c1fa:	42a8      	cmp	r0, r5
   1c1fc:	bf14      	ite	ne
   1c1fe:	2000      	movne	r0, #0
   1c200:	2001      	moveq	r0, #1
   1c202:	f7ff ffab 	bl	1c15c <update_cache>
}
   1c206:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c208:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c20c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1c20e:	4601      	mov	r1, r0
   1c210:	4806      	ldr	r0, [pc, #24]	; (1c22c <move_thread_to_end_of_prio_q+0x84>)
   1c212:	f008 f86a 	bl	242ea <z_priq_dumb_remove>
}
   1c216:	e7ce      	b.n	1c1b6 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1c218:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1c21a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1c21c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1c21e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1c220:	6065      	str	r5, [r4, #4]
}
   1c222:	e7e8      	b.n	1c1f6 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c224:	2400      	movs	r4, #0
   1c226:	e7cf      	b.n	1c1c8 <move_thread_to_end_of_prio_q+0x20>
   1c228:	20002c9c 	.word	0x20002c9c
   1c22c:	20002cbc 	.word	0x20002cbc

0001c230 <z_time_slice>:
{
   1c230:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c232:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c236:	f3ef 8411 	mrs	r4, BASEPRI
   1c23a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c23e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1c242:	4b1c      	ldr	r3, [pc, #112]	; (1c2b4 <z_time_slice+0x84>)
   1c244:	689b      	ldr	r3, [r3, #8]
   1c246:	4a1c      	ldr	r2, [pc, #112]	; (1c2b8 <z_time_slice+0x88>)
   1c248:	6812      	ldr	r2, [r2, #0]
   1c24a:	4293      	cmp	r3, r2
   1c24c:	d01d      	beq.n	1c28a <z_time_slice+0x5a>
	pending_current = NULL;
   1c24e:	4a1a      	ldr	r2, [pc, #104]	; (1c2b8 <z_time_slice+0x88>)
   1c250:	2100      	movs	r1, #0
   1c252:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1c254:	4a19      	ldr	r2, [pc, #100]	; (1c2bc <z_time_slice+0x8c>)
   1c256:	6812      	ldr	r2, [r2, #0]
   1c258:	b322      	cbz	r2, 1c2a4 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1c25a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1c25c:	2a7f      	cmp	r2, #127	; 0x7f
   1c25e:	d821      	bhi.n	1c2a4 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1c260:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1c262:	f012 0f1f 	tst.w	r2, #31
   1c266:	d11d      	bne.n	1c2a4 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1c268:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1c26c:	4a14      	ldr	r2, [pc, #80]	; (1c2c0 <z_time_slice+0x90>)
   1c26e:	6812      	ldr	r2, [r2, #0]
   1c270:	4291      	cmp	r1, r2
   1c272:	db17      	blt.n	1c2a4 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1c274:	4a13      	ldr	r2, [pc, #76]	; (1c2c4 <z_time_slice+0x94>)
   1c276:	4293      	cmp	r3, r2
   1c278:	d014      	beq.n	1c2a4 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1c27a:	4a0e      	ldr	r2, [pc, #56]	; (1c2b4 <z_time_slice+0x84>)
   1c27c:	6912      	ldr	r2, [r2, #16]
   1c27e:	4282      	cmp	r2, r0
   1c280:	dd0a      	ble.n	1c298 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1c282:	1a10      	subs	r0, r2, r0
   1c284:	4b0b      	ldr	r3, [pc, #44]	; (1c2b4 <z_time_slice+0x84>)
   1c286:	6118      	str	r0, [r3, #16]
   1c288:	e00f      	b.n	1c2aa <z_time_slice+0x7a>
		z_reset_time_slice();
   1c28a:	f7ff fee1 	bl	1c050 <z_reset_time_slice>
	__asm__ volatile(
   1c28e:	f384 8811 	msr	BASEPRI, r4
   1c292:	f3bf 8f6f 	isb	sy
		return;
   1c296:	e00c      	b.n	1c2b2 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   1c298:	4618      	mov	r0, r3
   1c29a:	f7ff ff85 	bl	1c1a8 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1c29e:	f7ff fed7 	bl	1c050 <z_reset_time_slice>
   1c2a2:	e002      	b.n	1c2aa <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1c2a4:	4b03      	ldr	r3, [pc, #12]	; (1c2b4 <z_time_slice+0x84>)
   1c2a6:	2200      	movs	r2, #0
   1c2a8:	611a      	str	r2, [r3, #16]
   1c2aa:	f384 8811 	msr	BASEPRI, r4
   1c2ae:	f3bf 8f6f 	isb	sy
}
   1c2b2:	bd10      	pop	{r4, pc}
   1c2b4:	20002c9c 	.word	0x20002c9c
   1c2b8:	20002cd0 	.word	0x20002cd0
   1c2bc:	20002cd8 	.word	0x20002cd8
   1c2c0:	20002cd4 	.word	0x20002cd4
   1c2c4:	20001d20 	.word	0x20001d20

0001c2c8 <ready_thread>:
{
   1c2c8:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1c2ca:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1c2cc:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1c2d0:	2a00      	cmp	r2, #0
   1c2d2:	db2d      	blt.n	1c330 <ready_thread+0x68>
   1c2d4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c2d6:	f013 0f1f 	tst.w	r3, #31
   1c2da:	d105      	bne.n	1c2e8 <ready_thread+0x20>
	return node->next != NULL;
   1c2dc:	6982      	ldr	r2, [r0, #24]
   1c2de:	b10a      	cbz	r2, 1c2e4 <ready_thread+0x1c>
   1c2e0:	2200      	movs	r2, #0
   1c2e2:	e002      	b.n	1c2ea <ready_thread+0x22>
   1c2e4:	2201      	movs	r2, #1
   1c2e6:	e000      	b.n	1c2ea <ready_thread+0x22>
   1c2e8:	2200      	movs	r2, #0
   1c2ea:	b30a      	cbz	r2, 1c330 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1c2ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c2f0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1c2f2:	4b14      	ldr	r3, [pc, #80]	; (1c344 <ready_thread+0x7c>)
   1c2f4:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c2f8:	429d      	cmp	r5, r3
   1c2fa:	d020      	beq.n	1c33e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c2fc:	b16d      	cbz	r5, 1c31a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c2fe:	4629      	mov	r1, r5
   1c300:	4620      	mov	r0, r4
   1c302:	f007 ffb4 	bl	2426e <z_sched_prio_cmp>
   1c306:	2800      	cmp	r0, #0
   1c308:	dc13      	bgt.n	1c332 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c30a:	b135      	cbz	r5, 1c31a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1c30c:	4b0d      	ldr	r3, [pc, #52]	; (1c344 <ready_thread+0x7c>)
   1c30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c310:	429d      	cmp	r5, r3
   1c312:	d002      	beq.n	1c31a <ready_thread+0x52>
   1c314:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c316:	2d00      	cmp	r5, #0
   1c318:	d1f0      	bne.n	1c2fc <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1c31a:	4b0a      	ldr	r3, [pc, #40]	; (1c344 <ready_thread+0x7c>)
   1c31c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1c31e:	f103 0120 	add.w	r1, r3, #32
   1c322:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1c324:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1c326:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c328:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   1c32a:	2000      	movs	r0, #0
   1c32c:	f7ff ff16 	bl	1c15c <update_cache>
}
   1c330:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1c332:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1c334:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c336:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1c338:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c33a:	606c      	str	r4, [r5, #4]
}
   1c33c:	e7f5      	b.n	1c32a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c33e:	2500      	movs	r5, #0
   1c340:	e7dc      	b.n	1c2fc <ready_thread+0x34>
   1c342:	bf00      	nop
   1c344:	20002c9c 	.word	0x20002c9c

0001c348 <z_sched_start>:
{
   1c348:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c34a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c34e:	f3ef 8411 	mrs	r4, BASEPRI
   1c352:	f383 8812 	msr	BASEPRI_MAX, r3
   1c356:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1c35a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1c35c:	f013 0f04 	tst.w	r3, #4
   1c360:	d104      	bne.n	1c36c <z_sched_start+0x24>
	__asm__ volatile(
   1c362:	f384 8811 	msr	BASEPRI, r4
   1c366:	f3bf 8f6f 	isb	sy
}
   1c36a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c36c:	f023 0304 	bic.w	r3, r3, #4
   1c370:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1c372:	f7ff ffa9 	bl	1c2c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1c376:	4621      	mov	r1, r4
   1c378:	4801      	ldr	r0, [pc, #4]	; (1c380 <z_sched_start+0x38>)
   1c37a:	f7ff febb 	bl	1c0f4 <z_reschedule>
   1c37e:	e7f4      	b.n	1c36a <z_sched_start+0x22>
   1c380:	20002cd4 	.word	0x20002cd4

0001c384 <unready_thread>:
{
   1c384:	b510      	push	{r4, lr}
   1c386:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1c388:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1c38a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1c38e:	2b00      	cmp	r3, #0
   1c390:	db08      	blt.n	1c3a4 <unready_thread+0x20>
	update_cache(thread == _current);
   1c392:	4b08      	ldr	r3, [pc, #32]	; (1c3b4 <unready_thread+0x30>)
   1c394:	6898      	ldr	r0, [r3, #8]
   1c396:	42a0      	cmp	r0, r4
   1c398:	bf14      	ite	ne
   1c39a:	2000      	movne	r0, #0
   1c39c:	2001      	moveq	r0, #1
   1c39e:	f7ff fedd 	bl	1c15c <update_cache>
}
   1c3a2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c3a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c3a8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1c3aa:	4601      	mov	r1, r0
   1c3ac:	4802      	ldr	r0, [pc, #8]	; (1c3b8 <unready_thread+0x34>)
   1c3ae:	f007 ff9c 	bl	242ea <z_priq_dumb_remove>
}
   1c3b2:	e7ee      	b.n	1c392 <unready_thread+0xe>
   1c3b4:	20002c9c 	.word	0x20002c9c
   1c3b8:	20002cbc 	.word	0x20002cbc

0001c3bc <z_pend_curr>:
{
   1c3bc:	b510      	push	{r4, lr}
   1c3be:	460c      	mov	r4, r1
   1c3c0:	4611      	mov	r1, r2
	pending_current = _current;
   1c3c2:	4b06      	ldr	r3, [pc, #24]	; (1c3dc <z_pend_curr+0x20>)
   1c3c4:	6898      	ldr	r0, [r3, #8]
   1c3c6:	4b06      	ldr	r3, [pc, #24]	; (1c3e0 <z_pend_curr+0x24>)
   1c3c8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1c3ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c3ce:	f008 f838 	bl	24442 <pend>
   1c3d2:	4620      	mov	r0, r4
   1c3d4:	f7f6 fa14 	bl	12800 <arch_swap>
}
   1c3d8:	bd10      	pop	{r4, pc}
   1c3da:	bf00      	nop
   1c3dc:	20002c9c 	.word	0x20002c9c
   1c3e0:	20002cd0 	.word	0x20002cd0

0001c3e4 <z_set_prio>:
{
   1c3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c3e8:	4604      	mov	r4, r0
   1c3ea:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1c3ec:	2300      	movs	r3, #0
	__asm__ volatile(
   1c3ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c3f2:	f3ef 8611 	mrs	r6, BASEPRI
   1c3f6:	f382 8812 	msr	BASEPRI_MAX, r2
   1c3fa:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1c3fe:	4698      	mov	r8, r3
   1c400:	e008      	b.n	1c414 <z_set_prio+0x30>
		if (need_sched) {
   1c402:	f012 0801 	ands.w	r8, r2, #1
   1c406:	d111      	bne.n	1c42c <z_set_prio+0x48>
			thread->base.prio = prio;
   1c408:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1c40a:	f386 8811 	msr	BASEPRI, r6
   1c40e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c412:	2301      	movs	r3, #1
   1c414:	461a      	mov	r2, r3
   1c416:	2b00      	cmp	r3, #0
   1c418:	d13d      	bne.n	1c496 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1c41a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c41c:	f013 0f1f 	tst.w	r3, #31
   1c420:	d1ef      	bne.n	1c402 <z_set_prio+0x1e>
	return node->next != NULL;
   1c422:	69a1      	ldr	r1, [r4, #24]
   1c424:	2900      	cmp	r1, #0
   1c426:	d1ec      	bne.n	1c402 <z_set_prio+0x1e>
   1c428:	2201      	movs	r2, #1
   1c42a:	e7ea      	b.n	1c402 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c430:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1c432:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1c4a0 <z_set_prio+0xbc>
   1c436:	4621      	mov	r1, r4
   1c438:	4648      	mov	r0, r9
   1c43a:	f007 ff56 	bl	242ea <z_priq_dumb_remove>
				thread->base.prio = prio;
   1c43e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1c440:	7b63      	ldrb	r3, [r4, #13]
   1c442:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c446:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1c448:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c44c:	454d      	cmp	r5, r9
   1c44e:	d020      	beq.n	1c492 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c450:	b16d      	cbz	r5, 1c46e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c452:	4629      	mov	r1, r5
   1c454:	4620      	mov	r0, r4
   1c456:	f007 ff0a 	bl	2426e <z_sched_prio_cmp>
   1c45a:	2800      	cmp	r0, #0
   1c45c:	dc13      	bgt.n	1c486 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c45e:	b135      	cbz	r5, 1c46e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1c460:	4b0e      	ldr	r3, [pc, #56]	; (1c49c <z_set_prio+0xb8>)
   1c462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c464:	429d      	cmp	r5, r3
   1c466:	d002      	beq.n	1c46e <z_set_prio+0x8a>
   1c468:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c46a:	2d00      	cmp	r5, #0
   1c46c:	d1f0      	bne.n	1c450 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1c46e:	4b0b      	ldr	r3, [pc, #44]	; (1c49c <z_set_prio+0xb8>)
   1c470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1c472:	f103 0120 	add.w	r1, r3, #32
   1c476:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1c478:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1c47a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c47c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1c47e:	2001      	movs	r0, #1
   1c480:	f7ff fe6c 	bl	1c15c <update_cache>
   1c484:	e7c1      	b.n	1c40a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1c486:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1c488:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c48a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1c48c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c48e:	606c      	str	r4, [r5, #4]
}
   1c490:	e7f5      	b.n	1c47e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c492:	2500      	movs	r5, #0
   1c494:	e7dc      	b.n	1c450 <z_set_prio+0x6c>
}
   1c496:	4640      	mov	r0, r8
   1c498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c49c:	20002c9c 	.word	0x20002c9c
   1c4a0:	20002cbc 	.word	0x20002cbc

0001c4a4 <z_impl_k_thread_suspend>:
{
   1c4a4:	b538      	push	{r3, r4, r5, lr}
   1c4a6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1c4a8:	3018      	adds	r0, #24
   1c4aa:	f008 f8a0 	bl	245ee <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1c4ae:	2300      	movs	r3, #0
	__asm__ volatile(
   1c4b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c4b4:	f3ef 8511 	mrs	r5, BASEPRI
   1c4b8:	f382 8812 	msr	BASEPRI_MAX, r2
   1c4bc:	f3bf 8f6f 	isb	sy
   1c4c0:	e010      	b.n	1c4e4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c4c2:	7b63      	ldrb	r3, [r4, #13]
   1c4c4:	f043 0310 	orr.w	r3, r3, #16
   1c4c8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1c4ca:	4b15      	ldr	r3, [pc, #84]	; (1c520 <z_impl_k_thread_suspend+0x7c>)
   1c4cc:	6898      	ldr	r0, [r3, #8]
   1c4ce:	42a0      	cmp	r0, r4
   1c4d0:	bf14      	ite	ne
   1c4d2:	2000      	movne	r0, #0
   1c4d4:	2001      	moveq	r0, #1
   1c4d6:	f7ff fe41 	bl	1c15c <update_cache>
	__asm__ volatile(
   1c4da:	f385 8811 	msr	BASEPRI, r5
   1c4de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c4e2:	2301      	movs	r3, #1
   1c4e4:	b963      	cbnz	r3, 1c500 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1c4e6:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1c4e8:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1c4ec:	2b00      	cmp	r3, #0
   1c4ee:	dae8      	bge.n	1c4c2 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c4f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c4f4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1c4f6:	4621      	mov	r1, r4
   1c4f8:	480a      	ldr	r0, [pc, #40]	; (1c524 <z_impl_k_thread_suspend+0x80>)
   1c4fa:	f007 fef6 	bl	242ea <z_priq_dumb_remove>
}
   1c4fe:	e7e0      	b.n	1c4c2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1c500:	4b07      	ldr	r3, [pc, #28]	; (1c520 <z_impl_k_thread_suspend+0x7c>)
   1c502:	689b      	ldr	r3, [r3, #8]
   1c504:	42a3      	cmp	r3, r4
   1c506:	d000      	beq.n	1c50a <z_impl_k_thread_suspend+0x66>
}
   1c508:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c50a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c50e:	f3ef 8011 	mrs	r0, BASEPRI
   1c512:	f383 8812 	msr	BASEPRI_MAX, r3
   1c516:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1c51a:	f007 fed1 	bl	242c0 <z_reschedule_irqlock>
   1c51e:	e7f3      	b.n	1c508 <z_impl_k_thread_suspend+0x64>
   1c520:	20002c9c 	.word	0x20002c9c
   1c524:	20002cbc 	.word	0x20002cbc

0001c528 <k_sched_unlock>:

void k_sched_unlock(void)
{
   1c528:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1c52a:	2300      	movs	r3, #0
   1c52c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c530:	f3ef 8411 	mrs	r4, BASEPRI
   1c534:	f382 8812 	msr	BASEPRI_MAX, r2
   1c538:	f3bf 8f6f 	isb	sy
   1c53c:	b96b      	cbnz	r3, 1c55a <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1c53e:	4b0c      	ldr	r3, [pc, #48]	; (1c570 <k_sched_unlock+0x48>)
   1c540:	689a      	ldr	r2, [r3, #8]
   1c542:	7bd3      	ldrb	r3, [r2, #15]
   1c544:	3301      	adds	r3, #1
   1c546:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1c548:	2000      	movs	r0, #0
   1c54a:	f7ff fe07 	bl	1c15c <update_cache>
	__asm__ volatile(
   1c54e:	f384 8811 	msr	BASEPRI, r4
   1c552:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c556:	2301      	movs	r3, #1
   1c558:	e7f0      	b.n	1c53c <k_sched_unlock+0x14>
	__asm__ volatile(
   1c55a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c55e:	f3ef 8011 	mrs	r0, BASEPRI
   1c562:	f383 8812 	msr	BASEPRI_MAX, r3
   1c566:	f3bf 8f6f 	isb	sy
   1c56a:	f007 fea9 	bl	242c0 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1c56e:	bd10      	pop	{r4, pc}
   1c570:	20002c9c 	.word	0x20002c9c

0001c574 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   1c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1c576:	7b43      	ldrb	r3, [r0, #13]
   1c578:	f013 0f08 	tst.w	r3, #8
   1c57c:	d145      	bne.n	1c60a <end_thread+0x96>
   1c57e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1c580:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1c584:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c588:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1c58a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1c58e:	d114      	bne.n	1c5ba <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   1c590:	68ab      	ldr	r3, [r5, #8]
   1c592:	b15b      	cbz	r3, 1c5ac <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c594:	4628      	mov	r0, r5
   1c596:	f007 fe68 	bl	2426a <pended_on_thread>
   1c59a:	4629      	mov	r1, r5
   1c59c:	f007 fea5 	bl	242ea <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c5a0:	7b6b      	ldrb	r3, [r5, #13]
   1c5a2:	f023 0302 	bic.w	r3, r3, #2
   1c5a6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1c5a8:	2300      	movs	r3, #0
   1c5aa:	60ab      	str	r3, [r5, #8]
   1c5ac:	f105 0018 	add.w	r0, r5, #24
   1c5b0:	f008 f81d 	bl	245ee <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1c5b4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c5b8:	e01c      	b.n	1c5f4 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c5ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c5be:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1c5c0:	4601      	mov	r1, r0
   1c5c2:	4812      	ldr	r0, [pc, #72]	; (1c60c <end_thread+0x98>)
   1c5c4:	f007 fe91 	bl	242ea <z_priq_dumb_remove>
}
   1c5c8:	e7e2      	b.n	1c590 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c5ca:	4620      	mov	r0, r4
   1c5cc:	f007 fe4d 	bl	2426a <pended_on_thread>
   1c5d0:	4621      	mov	r1, r4
   1c5d2:	f007 fe8a 	bl	242ea <z_priq_dumb_remove>
   1c5d6:	7b63      	ldrb	r3, [r4, #13]
   1c5d8:	f023 0302 	bic.w	r3, r3, #2
   1c5dc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1c5de:	2600      	movs	r6, #0
   1c5e0:	60a6      	str	r6, [r4, #8]
   1c5e2:	f104 0018 	add.w	r0, r4, #24
   1c5e6:	f008 f802 	bl	245ee <z_abort_timeout>
   1c5ea:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1c5ee:	4620      	mov	r0, r4
   1c5f0:	f7ff fe6a 	bl	1c2c8 <ready_thread>
	return list->head == list;
   1c5f4:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c5f6:	42bc      	cmp	r4, r7
   1c5f8:	d001      	beq.n	1c5fe <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c5fa:	2c00      	cmp	r4, #0
   1c5fc:	d1e5      	bne.n	1c5ca <end_thread+0x56>
		update_cache(1);
   1c5fe:	2001      	movs	r0, #1
   1c600:	f7ff fdac 	bl	1c15c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1c604:	4628      	mov	r0, r5
   1c606:	f7ff f8db 	bl	1b7c0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1c60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c60c:	20002cbc 	.word	0x20002cbc

0001c610 <z_sched_init>:
{
   1c610:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1c612:	4804      	ldr	r0, [pc, #16]	; (1c624 <z_sched_init+0x14>)
   1c614:	f007 ff99 	bl	2454a <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1c618:	2100      	movs	r1, #0
   1c61a:	4608      	mov	r0, r1
   1c61c:	f7ff fd2e 	bl	1c07c <k_sched_time_slice_set>
}
   1c620:	bd08      	pop	{r3, pc}
   1c622:	bf00      	nop
   1c624:	20002cb8 	.word	0x20002cb8

0001c628 <z_impl_k_yield>:
{
   1c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c62a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c62e:	f3ef 8611 	mrs	r6, BASEPRI
   1c632:	f383 8812 	msr	BASEPRI_MAX, r3
   1c636:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   1c63a:	4c1c      	ldr	r4, [pc, #112]	; (1c6ac <z_impl_k_yield+0x84>)
   1c63c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c63e:	7b4b      	ldrb	r3, [r1, #13]
   1c640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c644:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1c646:	f104 0720 	add.w	r7, r4, #32
   1c64a:	4638      	mov	r0, r7
   1c64c:	f007 fe4d 	bl	242ea <z_priq_dumb_remove>
	queue_thread(_current);
   1c650:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1c652:	7b6b      	ldrb	r3, [r5, #13]
   1c654:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c658:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1c65a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c65c:	42bc      	cmp	r4, r7
   1c65e:	d023      	beq.n	1c6a8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c660:	b16c      	cbz	r4, 1c67e <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c662:	4621      	mov	r1, r4
   1c664:	4628      	mov	r0, r5
   1c666:	f007 fe02 	bl	2426e <z_sched_prio_cmp>
   1c66a:	2800      	cmp	r0, #0
   1c66c:	dc16      	bgt.n	1c69c <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c66e:	b134      	cbz	r4, 1c67e <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1c670:	4b0e      	ldr	r3, [pc, #56]	; (1c6ac <z_impl_k_yield+0x84>)
   1c672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c674:	429c      	cmp	r4, r3
   1c676:	d002      	beq.n	1c67e <z_impl_k_yield+0x56>
   1c678:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c67a:	2c00      	cmp	r4, #0
   1c67c:	d1f0      	bne.n	1c660 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1c67e:	4b0b      	ldr	r3, [pc, #44]	; (1c6ac <z_impl_k_yield+0x84>)
   1c680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1c682:	f103 0120 	add.w	r1, r3, #32
   1c686:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1c688:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1c68a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1c68c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1c68e:	2001      	movs	r0, #1
   1c690:	f7ff fd64 	bl	1c15c <update_cache>
   1c694:	4630      	mov	r0, r6
   1c696:	f7f6 f8b3 	bl	12800 <arch_swap>
}
   1c69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1c69c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1c69e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1c6a0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1c6a2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1c6a4:	6065      	str	r5, [r4, #4]
}
   1c6a6:	e7f2      	b.n	1c68e <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c6a8:	2400      	movs	r4, #0
   1c6aa:	e7d9      	b.n	1c660 <z_impl_k_yield+0x38>
   1c6ac:	20002c9c 	.word	0x20002c9c

0001c6b0 <z_tick_sleep>:
{
   1c6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c6b4:	4604      	mov	r4, r0
   1c6b6:	460d      	mov	r5, r1
	if (ticks == 0) {
   1c6b8:	ea54 0105 	orrs.w	r1, r4, r5
   1c6bc:	d037      	beq.n	1c72e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1c6be:	f06f 0101 	mvn.w	r1, #1
   1c6c2:	1a0a      	subs	r2, r1, r0
   1c6c4:	f04f 31ff 	mov.w	r1, #4294967295
   1c6c8:	eb61 0305 	sbc.w	r3, r1, r5
   1c6cc:	2a01      	cmp	r2, #1
   1c6ce:	f173 0300 	sbcs.w	r3, r3, #0
   1c6d2:	db30      	blt.n	1c736 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1c6d4:	f06f 0601 	mvn.w	r6, #1
   1c6d8:	1a36      	subs	r6, r6, r0
   1c6da:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6de:	f3ef 8811 	mrs	r8, BASEPRI
   1c6e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6e6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1c6ea:	4f16      	ldr	r7, [pc, #88]	; (1c744 <z_tick_sleep+0x94>)
   1c6ec:	68b8      	ldr	r0, [r7, #8]
   1c6ee:	4b16      	ldr	r3, [pc, #88]	; (1c748 <z_tick_sleep+0x98>)
   1c6f0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1c6f2:	f7ff fe47 	bl	1c384 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1c6f6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c6f8:	4622      	mov	r2, r4
   1c6fa:	462b      	mov	r3, r5
   1c6fc:	4913      	ldr	r1, [pc, #76]	; (1c74c <z_tick_sleep+0x9c>)
   1c6fe:	3018      	adds	r0, #24
   1c700:	f000 f904 	bl	1c90c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1c704:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c706:	7b53      	ldrb	r3, [r2, #13]
   1c708:	f043 0310 	orr.w	r3, r3, #16
   1c70c:	7353      	strb	r3, [r2, #13]
   1c70e:	4640      	mov	r0, r8
   1c710:	f7f6 f876 	bl	12800 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1c714:	2500      	movs	r5, #0
   1c716:	f007 ffc9 	bl	246ac <sys_clock_tick_get_32>
   1c71a:	1a34      	subs	r4, r6, r0
   1c71c:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1c720:	2c01      	cmp	r4, #1
   1c722:	f175 0300 	sbcs.w	r3, r5, #0
   1c726:	da0a      	bge.n	1c73e <z_tick_sleep+0x8e>
	return 0;
   1c728:	2000      	movs	r0, #0
}
   1c72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1c72e:	f7ff ff7b 	bl	1c628 <z_impl_k_yield>
		return 0;
   1c732:	2000      	movs	r0, #0
   1c734:	e7f9      	b.n	1c72a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1c736:	f007 ffb9 	bl	246ac <sys_clock_tick_get_32>
   1c73a:	1906      	adds	r6, r0, r4
   1c73c:	e7cd      	b.n	1c6da <z_tick_sleep+0x2a>
		return ticks;
   1c73e:	4620      	mov	r0, r4
   1c740:	e7f3      	b.n	1c72a <z_tick_sleep+0x7a>
   1c742:	bf00      	nop
   1c744:	20002c9c 	.word	0x20002c9c
   1c748:	20002cd0 	.word	0x20002cd0
   1c74c:	00024387 	.word	0x00024387

0001c750 <z_impl_k_sleep>:
{
   1c750:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c752:	f1b1 3fff 	cmp.w	r1, #4294967295
   1c756:	bf08      	it	eq
   1c758:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1c75c:	d01a      	beq.n	1c794 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1c75e:	f7ff ffa7 	bl	1c6b0 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1c762:	4604      	mov	r4, r0
   1c764:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   1c766:	0169      	lsls	r1, r5, #5
   1c768:	0143      	lsls	r3, r0, #5
   1c76a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1c76e:	1a18      	subs	r0, r3, r0
   1c770:	eb62 0305 	sbc.w	r3, r2, r5
   1c774:	009a      	lsls	r2, r3, #2
   1c776:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   1c77a:	0081      	lsls	r1, r0, #2
   1c77c:	4613      	mov	r3, r2
   1c77e:	1908      	adds	r0, r1, r4
   1c780:	eb45 0303 	adc.w	r3, r5, r3
   1c784:	00da      	lsls	r2, r3, #3
   1c786:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1c78a:	00c1      	lsls	r1, r0, #3
   1c78c:	0bc8      	lsrs	r0, r1, #15
   1c78e:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1c792:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1c794:	4b03      	ldr	r3, [pc, #12]	; (1c7a4 <z_impl_k_sleep+0x54>)
   1c796:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1c798:	f7ff fe84 	bl	1c4a4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1c79c:	f04f 30ff 	mov.w	r0, #4294967295
   1c7a0:	e7f7      	b.n	1c792 <z_impl_k_sleep+0x42>
   1c7a2:	bf00      	nop
   1c7a4:	20002c9c 	.word	0x20002c9c

0001c7a8 <z_impl_z_current_get>:
}
   1c7a8:	4b01      	ldr	r3, [pc, #4]	; (1c7b0 <z_impl_z_current_get+0x8>)
   1c7aa:	6898      	ldr	r0, [r3, #8]
   1c7ac:	4770      	bx	lr
   1c7ae:	bf00      	nop
   1c7b0:	20002c9c 	.word	0x20002c9c

0001c7b4 <z_impl_k_is_preempt_thread>:
   1c7b4:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1c7b8:	b933      	cbnz	r3, 1c7c8 <z_impl_k_is_preempt_thread+0x14>
   1c7ba:	4b05      	ldr	r3, [pc, #20]	; (1c7d0 <z_impl_k_is_preempt_thread+0x1c>)
   1c7bc:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1c7be:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1c7c0:	2b7f      	cmp	r3, #127	; 0x7f
   1c7c2:	d803      	bhi.n	1c7cc <z_impl_k_is_preempt_thread+0x18>
   1c7c4:	2001      	movs	r0, #1
   1c7c6:	4770      	bx	lr
   1c7c8:	2000      	movs	r0, #0
   1c7ca:	4770      	bx	lr
   1c7cc:	2000      	movs	r0, #0
}
   1c7ce:	4770      	bx	lr
   1c7d0:	20002c9c 	.word	0x20002c9c

0001c7d4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1c7d4:	b538      	push	{r3, r4, r5, lr}
   1c7d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7da:	f3ef 8511 	mrs	r5, BASEPRI
   1c7de:	f383 8812 	msr	BASEPRI_MAX, r3
   1c7e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1c7e6:	7b43      	ldrb	r3, [r0, #13]
   1c7e8:	f013 0f08 	tst.w	r3, #8
   1c7ec:	d004      	beq.n	1c7f8 <z_thread_abort+0x24>
	__asm__ volatile(
   1c7ee:	f385 8811 	msr	BASEPRI, r5
   1c7f2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1c7f6:	bd38      	pop	{r3, r4, r5, pc}
   1c7f8:	4604      	mov	r4, r0
	end_thread(thread);
   1c7fa:	f7ff febb 	bl	1c574 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1c7fe:	4b08      	ldr	r3, [pc, #32]	; (1c820 <z_thread_abort+0x4c>)
   1c800:	689b      	ldr	r3, [r3, #8]
   1c802:	42a3      	cmp	r3, r4
   1c804:	d004      	beq.n	1c810 <z_thread_abort+0x3c>
   1c806:	f385 8811 	msr	BASEPRI, r5
   1c80a:	f3bf 8f6f 	isb	sy
   1c80e:	e7f2      	b.n	1c7f6 <z_thread_abort+0x22>
   1c810:	f3ef 8305 	mrs	r3, IPSR
   1c814:	2b00      	cmp	r3, #0
   1c816:	d1f6      	bne.n	1c806 <z_thread_abort+0x32>
   1c818:	4628      	mov	r0, r5
   1c81a:	f7f5 fff1 	bl	12800 <arch_swap>
	return ret;
   1c81e:	e7f2      	b.n	1c806 <z_thread_abort+0x32>
   1c820:	20002c9c 	.word	0x20002c9c

0001c824 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1c824:	b5d0      	push	{r4, r6, r7, lr}
   1c826:	b082      	sub	sp, #8
   1c828:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1c82a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1c82e:	e9cd 6700 	strd	r6, r7, [sp]
   1c832:	f7ff fdc3 	bl	1c3bc <z_pend_curr>

	if (data != NULL) {
   1c836:	b11c      	cbz	r4, 1c840 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1c838:	4b02      	ldr	r3, [pc, #8]	; (1c844 <z_sched_wait+0x20>)
   1c83a:	689b      	ldr	r3, [r3, #8]
   1c83c:	695b      	ldr	r3, [r3, #20]
   1c83e:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1c840:	b002      	add	sp, #8
   1c842:	bdd0      	pop	{r4, r6, r7, pc}
   1c844:	20002c9c 	.word	0x20002c9c

0001c848 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1c848:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1c84a:	4806      	ldr	r0, [pc, #24]	; (1c864 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c84c:	4a06      	ldr	r2, [pc, #24]	; (1c868 <z_data_copy+0x20>)
   1c84e:	1a12      	subs	r2, r2, r0
   1c850:	4906      	ldr	r1, [pc, #24]	; (1c86c <z_data_copy+0x24>)
   1c852:	f008 f851 	bl	248f8 <memcpy>
   1c856:	4a06      	ldr	r2, [pc, #24]	; (1c870 <z_data_copy+0x28>)
   1c858:	4906      	ldr	r1, [pc, #24]	; (1c874 <z_data_copy+0x2c>)
   1c85a:	4807      	ldr	r0, [pc, #28]	; (1c878 <z_data_copy+0x30>)
   1c85c:	f008 f84c 	bl	248f8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1c860:	bd08      	pop	{r3, pc}
   1c862:	bf00      	nop
   1c864:	20000000 	.word	0x20000000
   1c868:	200008d0 	.word	0x200008d0
   1c86c:	00027088 	.word	0x00027088
   1c870:	00000000 	.word	0x00000000
   1c874:	00027088 	.word	0x00027088
   1c878:	20000000 	.word	0x20000000

0001c87c <first>:
	return list->head == list;
   1c87c:	4b03      	ldr	r3, [pc, #12]	; (1c88c <first+0x10>)
   1c87e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c880:	4298      	cmp	r0, r3
   1c882:	d000      	beq.n	1c886 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1c884:	4770      	bx	lr
   1c886:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1c888:	e7fc      	b.n	1c884 <first+0x8>
   1c88a:	bf00      	nop
   1c88c:	200005e8 	.word	0x200005e8

0001c890 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c890:	b130      	cbz	r0, 1c8a0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1c892:	4a04      	ldr	r2, [pc, #16]	; (1c8a4 <next+0x14>)
   1c894:	6852      	ldr	r2, [r2, #4]
   1c896:	4290      	cmp	r0, r2
   1c898:	d001      	beq.n	1c89e <next+0xe>
   1c89a:	6800      	ldr	r0, [r0, #0]
   1c89c:	4770      	bx	lr
   1c89e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1c8a0:	4770      	bx	lr
   1c8a2:	bf00      	nop
   1c8a4:	200005e8 	.word	0x200005e8

0001c8a8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1c8a8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c8aa:	4b04      	ldr	r3, [pc, #16]	; (1c8bc <elapsed+0x14>)
   1c8ac:	681b      	ldr	r3, [r3, #0]
   1c8ae:	b10b      	cbz	r3, 1c8b4 <elapsed+0xc>
   1c8b0:	2000      	movs	r0, #0
}
   1c8b2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c8b4:	f7fd fb40 	bl	19f38 <sys_clock_elapsed>
   1c8b8:	e7fb      	b.n	1c8b2 <elapsed+0xa>
   1c8ba:	bf00      	nop
   1c8bc:	20002cdc 	.word	0x20002cdc

0001c8c0 <next_timeout>:

static int32_t next_timeout(void)
{
   1c8c0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1c8c2:	f7ff ffdb 	bl	1c87c <first>
   1c8c6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1c8c8:	f7ff ffee 	bl	1c8a8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1c8cc:	b18c      	cbz	r4, 1c8f2 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c8ce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1c8d2:	1a12      	subs	r2, r2, r0
   1c8d4:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1c8d8:	2a01      	cmp	r2, #1
   1c8da:	f173 0100 	sbcs.w	r1, r3, #0
   1c8de:	db11      	blt.n	1c904 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c8e0:	4610      	mov	r0, r2
   1c8e2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c8e6:	f173 0300 	sbcs.w	r3, r3, #0
   1c8ea:	db04      	blt.n	1c8f6 <next_timeout+0x36>
   1c8ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c8f0:	e001      	b.n	1c8f6 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1c8f2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c8f6:	4b04      	ldr	r3, [pc, #16]	; (1c908 <next_timeout+0x48>)
   1c8f8:	691b      	ldr	r3, [r3, #16]
   1c8fa:	b113      	cbz	r3, 1c902 <next_timeout+0x42>
   1c8fc:	4283      	cmp	r3, r0
   1c8fe:	da00      	bge.n	1c902 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1c900:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1c902:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1c904:	2000      	movs	r0, #0
   1c906:	e7f6      	b.n	1c8f6 <next_timeout+0x36>
   1c908:	20002c9c 	.word	0x20002c9c

0001c90c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1c90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c910:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c912:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c916:	bf08      	it	eq
   1c918:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1c91c:	f000 8096 	beq.w	1ca4c <z_add_timeout+0x140>
   1c920:	4682      	mov	sl, r0
   1c922:	4614      	mov	r4, r2
   1c924:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c926:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1c928:	2300      	movs	r3, #0
	__asm__ volatile(
   1c92a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c92e:	f3ef 8b11 	mrs	fp, BASEPRI
   1c932:	f382 8812 	msr	BASEPRI_MAX, r2
   1c936:	f3bf 8f6f 	isb	sy
   1c93a:	e02e      	b.n	1c99a <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1c93c:	2201      	movs	r2, #1
   1c93e:	2300      	movs	r3, #0
   1c940:	e04b      	b.n	1c9da <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1c942:	f7ff ffb1 	bl	1c8a8 <elapsed>
   1c946:	1822      	adds	r2, r4, r0
   1c948:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1c94c:	3201      	adds	r2, #1
   1c94e:	f143 0300 	adc.w	r3, r3, #0
   1c952:	f8ca 2010 	str.w	r2, [sl, #16]
   1c956:	f8ca 3014 	str.w	r3, [sl, #20]
   1c95a:	e042      	b.n	1c9e2 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1c95c:	9b00      	ldr	r3, [sp, #0]
   1c95e:	1ac2      	subs	r2, r0, r3
   1c960:	9b01      	ldr	r3, [sp, #4]
   1c962:	eb61 0303 	sbc.w	r3, r1, r3
   1c966:	f8cc 2010 	str.w	r2, [ip, #16]
   1c96a:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1c96e:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1c972:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1c976:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1c97a:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1c97e:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1c982:	f1bc 0f00 	cmp.w	ip, #0
   1c986:	d049      	beq.n	1ca1c <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c988:	f7ff ff78 	bl	1c87c <first>
   1c98c:	4582      	cmp	sl, r0
   1c98e:	d050      	beq.n	1ca32 <z_add_timeout+0x126>
	__asm__ volatile(
   1c990:	f38b 8811 	msr	BASEPRI, fp
   1c994:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1c998:	2301      	movs	r3, #1
   1c99a:	2b00      	cmp	r3, #0
   1c99c:	d156      	bne.n	1ca4c <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1c99e:	f06f 0301 	mvn.w	r3, #1
   1c9a2:	ebb3 0804 	subs.w	r8, r3, r4
   1c9a6:	f04f 30ff 	mov.w	r0, #4294967295
   1c9aa:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1c9ae:	f1b8 0f00 	cmp.w	r8, #0
   1c9b2:	f179 0300 	sbcs.w	r3, r9, #0
   1c9b6:	dbc4      	blt.n	1c942 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1c9b8:	4a26      	ldr	r2, [pc, #152]	; (1ca54 <z_add_timeout+0x148>)
   1c9ba:	6813      	ldr	r3, [r2, #0]
   1c9bc:	6852      	ldr	r2, [r2, #4]
   1c9be:	18e3      	adds	r3, r4, r3
   1c9c0:	eb45 0202 	adc.w	r2, r5, r2
   1c9c4:	f06f 0101 	mvn.w	r1, #1
   1c9c8:	1ace      	subs	r6, r1, r3
   1c9ca:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   1c9ce:	4632      	mov	r2, r6
   1c9d0:	463b      	mov	r3, r7
   1c9d2:	2e01      	cmp	r6, #1
   1c9d4:	f177 0100 	sbcs.w	r1, r7, #0
   1c9d8:	dbb0      	blt.n	1c93c <z_add_timeout+0x30>
   1c9da:	f8ca 2010 	str.w	r2, [sl, #16]
   1c9de:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1c9e2:	f7ff ff4b 	bl	1c87c <first>
   1c9e6:	4684      	mov	ip, r0
   1c9e8:	f1bc 0f00 	cmp.w	ip, #0
   1c9ec:	d0c9      	beq.n	1c982 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   1c9ee:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1c9f2:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1c9f6:	e9cd 2300 	strd	r2, r3, [sp]
   1c9fa:	4282      	cmp	r2, r0
   1c9fc:	418b      	sbcs	r3, r1
   1c9fe:	dbad      	blt.n	1c95c <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   1ca00:	9b00      	ldr	r3, [sp, #0]
   1ca02:	1a1a      	subs	r2, r3, r0
   1ca04:	9b01      	ldr	r3, [sp, #4]
   1ca06:	eb63 0301 	sbc.w	r3, r3, r1
   1ca0a:	f8ca 2010 	str.w	r2, [sl, #16]
   1ca0e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1ca12:	4660      	mov	r0, ip
   1ca14:	f7ff ff3c 	bl	1c890 <next>
   1ca18:	4684      	mov	ip, r0
   1ca1a:	e7e5      	b.n	1c9e8 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1ca1c:	4b0e      	ldr	r3, [pc, #56]	; (1ca58 <z_add_timeout+0x14c>)
   1ca1e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1ca20:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   1ca24:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   1ca28:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1ca2c:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1ca30:	e7aa      	b.n	1c988 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1ca32:	f7ff ff45 	bl	1c8c0 <next_timeout>

			if (next_time == 0 ||
   1ca36:	4603      	mov	r3, r0
   1ca38:	b118      	cbz	r0, 1ca42 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1ca3a:	4a08      	ldr	r2, [pc, #32]	; (1ca5c <z_add_timeout+0x150>)
   1ca3c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1ca3e:	4282      	cmp	r2, r0
   1ca40:	d0a6      	beq.n	1c990 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1ca42:	2100      	movs	r1, #0
   1ca44:	4618      	mov	r0, r3
   1ca46:	f7fd fa43 	bl	19ed0 <sys_clock_set_timeout>
   1ca4a:	e7a1      	b.n	1c990 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1ca4c:	b003      	add	sp, #12
   1ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca52:	bf00      	nop
   1ca54:	20001f68 	.word	0x20001f68
   1ca58:	200005e8 	.word	0x200005e8
   1ca5c:	20002c9c 	.word	0x20002c9c

0001ca60 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca62:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1ca64:	f7ff fbe4 	bl	1c230 <z_time_slice>
	__asm__ volatile(
   1ca68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca6c:	f3ef 8511 	mrs	r5, BASEPRI
   1ca70:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca74:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1ca78:	4b28      	ldr	r3, [pc, #160]	; (1cb1c <sys_clock_announce+0xbc>)
   1ca7a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ca7c:	f7ff fefe 	bl	1c87c <first>
   1ca80:	4604      	mov	r4, r0
   1ca82:	b350      	cbz	r0, 1cada <sys_clock_announce+0x7a>
   1ca84:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1ca88:	4b24      	ldr	r3, [pc, #144]	; (1cb1c <sys_clock_announce+0xbc>)
   1ca8a:	681b      	ldr	r3, [r3, #0]
   1ca8c:	17d9      	asrs	r1, r3, #31
   1ca8e:	42b3      	cmp	r3, r6
   1ca90:	eb71 0207 	sbcs.w	r2, r1, r7
   1ca94:	db21      	blt.n	1cada <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1ca96:	4a22      	ldr	r2, [pc, #136]	; (1cb20 <sys_clock_announce+0xc0>)
   1ca98:	e9d2 0100 	ldrd	r0, r1, [r2]
   1ca9c:	1980      	adds	r0, r0, r6
   1ca9e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1caa2:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1caa6:	1b9b      	subs	r3, r3, r6
   1caa8:	4a1c      	ldr	r2, [pc, #112]	; (1cb1c <sys_clock_announce+0xbc>)
   1caaa:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   1caac:	2200      	movs	r2, #0
   1caae:	2300      	movs	r3, #0
   1cab0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1cab4:	4620      	mov	r0, r4
   1cab6:	f007 fd83 	bl	245c0 <remove_timeout>
	__asm__ volatile(
   1caba:	f385 8811 	msr	BASEPRI, r5
   1cabe:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1cac2:	68a3      	ldr	r3, [r4, #8]
   1cac4:	4620      	mov	r0, r4
   1cac6:	4798      	blx	r3
	__asm__ volatile(
   1cac8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cacc:	f3ef 8511 	mrs	r5, BASEPRI
   1cad0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cad4:	f3bf 8f6f 	isb	sy
   1cad8:	e7d0      	b.n	1ca7c <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   1cada:	b144      	cbz	r4, 1caee <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1cadc:	4b0f      	ldr	r3, [pc, #60]	; (1cb1c <sys_clock_announce+0xbc>)
   1cade:	6819      	ldr	r1, [r3, #0]
   1cae0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1cae4:	1a52      	subs	r2, r2, r1
   1cae6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   1caea:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   1caee:	480c      	ldr	r0, [pc, #48]	; (1cb20 <sys_clock_announce+0xc0>)
   1caf0:	490a      	ldr	r1, [pc, #40]	; (1cb1c <sys_clock_announce+0xbc>)
   1caf2:	680c      	ldr	r4, [r1, #0]
   1caf4:	e9d0 2300 	ldrd	r2, r3, [r0]
   1caf8:	1912      	adds	r2, r2, r4
   1cafa:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   1cafe:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   1cb02:	2400      	movs	r4, #0
   1cb04:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1cb06:	f7ff fedb 	bl	1c8c0 <next_timeout>
   1cb0a:	4621      	mov	r1, r4
   1cb0c:	f7fd f9e0 	bl	19ed0 <sys_clock_set_timeout>
	__asm__ volatile(
   1cb10:	f385 8811 	msr	BASEPRI, r5
   1cb14:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1cb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cb1a:	bf00      	nop
   1cb1c:	20002cdc 	.word	0x20002cdc
   1cb20:	20001f68 	.word	0x20001f68

0001cb24 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1cb24:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1cb26:	2100      	movs	r1, #0
	__asm__ volatile(
   1cb28:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb2c:	f3ef 8411 	mrs	r4, BASEPRI
   1cb30:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb34:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1cb38:	2200      	movs	r2, #0
   1cb3a:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1cb3c:	b969      	cbnz	r1, 1cb5a <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1cb3e:	f7fd f9fb 	bl	19f38 <sys_clock_elapsed>
   1cb42:	4b07      	ldr	r3, [pc, #28]	; (1cb60 <sys_clock_tick_get+0x3c>)
   1cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb48:	1812      	adds	r2, r2, r0
   1cb4a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1cb4e:	f384 8811 	msr	BASEPRI, r4
   1cb52:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1cb56:	2101      	movs	r1, #1
   1cb58:	e7f0      	b.n	1cb3c <sys_clock_tick_get+0x18>
	}
	return t;
}
   1cb5a:	4610      	mov	r0, r2
   1cb5c:	4619      	mov	r1, r3
   1cb5e:	bd10      	pop	{r4, pc}
   1cb60:	20001f68 	.word	0x20001f68

0001cb64 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1cb64:	b570      	push	{r4, r5, r6, lr}
   1cb66:	4604      	mov	r4, r0
	__asm__ volatile(
   1cb68:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb6c:	f3ef 8611 	mrs	r6, BASEPRI
   1cb70:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb74:	f3bf 8f6f 	isb	sy
   1cb78:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1cb7a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1cb7e:	ea52 0103 	orrs.w	r1, r2, r3
   1cb82:	d005      	beq.n	1cb90 <z_timer_expiration_handler+0x2c>
   1cb84:	f1b3 3fff 	cmp.w	r3, #4294967295
   1cb88:	bf08      	it	eq
   1cb8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1cb8e:	d127      	bne.n	1cbe0 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1cb90:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb92:	3301      	adds	r3, #1
   1cb94:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1cb96:	6a23      	ldr	r3, [r4, #32]
   1cb98:	b173      	cbz	r3, 1cbb8 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   1cb9a:	f386 8811 	msr	BASEPRI, r6
   1cb9e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1cba2:	6a23      	ldr	r3, [r4, #32]
   1cba4:	4620      	mov	r0, r4
   1cba6:	4798      	blx	r3
	__asm__ volatile(
   1cba8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cbac:	f3ef 8511 	mrs	r5, BASEPRI
   1cbb0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbb4:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1cbb8:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1cbbc:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cbbe:	42a3      	cmp	r3, r4
   1cbc0:	d012      	beq.n	1cbe8 <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1cbc2:	b18c      	cbz	r4, 1cbe8 <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   1cbc4:	4620      	mov	r0, r4
   1cbc6:	f007 fb5c 	bl	24282 <z_unpend_thread_no_timeout>
   1cbca:	2300      	movs	r3, #0
   1cbcc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   1cbd0:	f385 8811 	msr	BASEPRI, r5
   1cbd4:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   1cbd8:	4620      	mov	r0, r4
   1cbda:	f007 fbb8 	bl	2434e <z_ready_thread>
}
   1cbde:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1cbe0:	4904      	ldr	r1, [pc, #16]	; (1cbf4 <z_timer_expiration_handler+0x90>)
   1cbe2:	f7ff fe93 	bl	1c90c <z_add_timeout>
   1cbe6:	e7d3      	b.n	1cb90 <z_timer_expiration_handler+0x2c>
   1cbe8:	f385 8811 	msr	BASEPRI, r5
   1cbec:	f3bf 8f6f 	isb	sy
		return;
   1cbf0:	e7f5      	b.n	1cbde <z_timer_expiration_handler+0x7a>
   1cbf2:	bf00      	nop
   1cbf4:	0001cb65 	.word	0x0001cb65

0001cbf8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1cbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbfc:	b087      	sub	sp, #28
   1cbfe:	4614      	mov	r4, r2
   1cc00:	461d      	mov	r5, r3
   1cc02:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1cc06:	f1b3 3fff 	cmp.w	r3, #4294967295
   1cc0a:	bf08      	it	eq
   1cc0c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1cc10:	d035      	beq.n	1cc7e <z_impl_k_timer_start+0x86>
   1cc12:	4606      	mov	r6, r0
   1cc14:	4613      	mov	r3, r2
   1cc16:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1cc18:	f1b9 3fff 	cmp.w	r9, #4294967295
   1cc1c:	bf08      	it	eq
   1cc1e:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   1cc22:	d012      	beq.n	1cc4a <z_impl_k_timer_start+0x52>
   1cc24:	ea58 0109 	orrs.w	r1, r8, r9
   1cc28:	d00f      	beq.n	1cc4a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   1cc2a:	f06f 0701 	mvn.w	r7, #1
   1cc2e:	ebb7 0708 	subs.w	r7, r7, r8
   1cc32:	9702      	str	r7, [sp, #8]
   1cc34:	f04f 31ff 	mov.w	r1, #4294967295
   1cc38:	eb61 0709 	sbc.w	r7, r1, r9
   1cc3c:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1cc3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1cc42:	2800      	cmp	r0, #0
   1cc44:	f171 0100 	sbcs.w	r1, r1, #0
   1cc48:	db1c      	blt.n	1cc84 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1cc4a:	f06f 0101 	mvn.w	r1, #1
   1cc4e:	ebb1 0a03 	subs.w	sl, r1, r3
   1cc52:	f04f 31ff 	mov.w	r1, #4294967295
   1cc56:	eb61 0b02 	sbc.w	fp, r1, r2
   1cc5a:	f1ba 0f00 	cmp.w	sl, #0
   1cc5e:	f17b 0100 	sbcs.w	r1, fp, #0
   1cc62:	db23      	blt.n	1ccac <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1cc64:	4630      	mov	r0, r6
   1cc66:	f007 fcc2 	bl	245ee <z_abort_timeout>
	timer->period = period;
   1cc6a:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   1cc6e:	2300      	movs	r3, #0
   1cc70:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1cc72:	4622      	mov	r2, r4
   1cc74:	462b      	mov	r3, r5
   1cc76:	4917      	ldr	r1, [pc, #92]	; (1ccd4 <z_impl_k_timer_start+0xdc>)
   1cc78:	4630      	mov	r0, r6
   1cc7a:	f7ff fe47 	bl	1c90c <z_add_timeout>
		     duration);
}
   1cc7e:	b007      	add	sp, #28
   1cc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   1cc84:	f118 31ff 	adds.w	r1, r8, #4294967295
   1cc88:	9104      	str	r1, [sp, #16]
   1cc8a:	f149 31ff 	adc.w	r1, r9, #4294967295
   1cc8e:	9105      	str	r1, [sp, #20]
   1cc90:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   1cc94:	4638      	mov	r0, r7
   1cc96:	4641      	mov	r1, r8
   1cc98:	2f01      	cmp	r7, #1
   1cc9a:	f178 0700 	sbcs.w	r7, r8, #0
   1cc9e:	db02      	blt.n	1cca6 <z_impl_k_timer_start+0xae>
   1cca0:	4680      	mov	r8, r0
   1cca2:	4689      	mov	r9, r1
   1cca4:	e7d1      	b.n	1cc4a <z_impl_k_timer_start+0x52>
   1cca6:	2001      	movs	r0, #1
   1cca8:	2100      	movs	r1, #0
   1ccaa:	e7f9      	b.n	1cca0 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1ccac:	f113 33ff 	adds.w	r3, r3, #4294967295
   1ccb0:	9300      	str	r3, [sp, #0]
   1ccb2:	f142 33ff 	adc.w	r3, r2, #4294967295
   1ccb6:	9301      	str	r3, [sp, #4]
   1ccb8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ccbc:	4602      	mov	r2, r0
   1ccbe:	460b      	mov	r3, r1
   1ccc0:	2800      	cmp	r0, #0
   1ccc2:	f171 0100 	sbcs.w	r1, r1, #0
   1ccc6:	db02      	blt.n	1ccce <z_impl_k_timer_start+0xd6>
   1ccc8:	4614      	mov	r4, r2
   1ccca:	461d      	mov	r5, r3
   1cccc:	e7ca      	b.n	1cc64 <z_impl_k_timer_start+0x6c>
   1ccce:	2200      	movs	r2, #0
   1ccd0:	4613      	mov	r3, r2
   1ccd2:	e7f9      	b.n	1ccc8 <z_impl_k_timer_start+0xd0>
   1ccd4:	0001cb65 	.word	0x0001cb65

0001ccd8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccdc:	b08d      	sub	sp, #52	; 0x34
   1ccde:	4605      	mov	r5, r0
   1cce0:	9107      	str	r1, [sp, #28]
   1cce2:	9202      	str	r2, [sp, #8]
   1cce4:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1cce6:	4ba4      	ldr	r3, [pc, #656]	; (1cf78 <z_impl_k_poll+0x2a0>)
   1cce8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1ccec:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   1ccf0:	2301      	movs	r3, #1
   1ccf2:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   1ccf6:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1ccfa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1ccfe:	4613      	mov	r3, r2
   1cd00:	430b      	orrs	r3, r1
   1cd02:	bf0c      	ite	eq
   1cd04:	2301      	moveq	r3, #1
   1cd06:	2300      	movne	r3, #0
   1cd08:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   1cd0a:	2600      	movs	r6, #0
	int events_registered = 0;
   1cd0c:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   1cd0e:	e02e      	b.n	1cd6e <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   1cd10:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1cd12:	689b      	ldr	r3, [r3, #8]
   1cd14:	b1c3      	cbz	r3, 1cd48 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1cd16:	2302      	movs	r3, #2
   1cd18:	9305      	str	r3, [sp, #20]
			return true;
   1cd1a:	2301      	movs	r3, #1
   1cd1c:	e014      	b.n	1cd48 <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   1cd1e:	6923      	ldr	r3, [r4, #16]
	return list->head;
   1cd20:	681b      	ldr	r3, [r3, #0]
   1cd22:	b18b      	cbz	r3, 1cd48 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1cd24:	2304      	movs	r3, #4
   1cd26:	9305      	str	r3, [sp, #20]
			return true;
   1cd28:	2301      	movs	r3, #1
   1cd2a:	e00d      	b.n	1cd48 <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   1cd2c:	6923      	ldr	r3, [r4, #16]
   1cd2e:	689b      	ldr	r3, [r3, #8]
   1cd30:	b153      	cbz	r3, 1cd48 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   1cd32:	2301      	movs	r3, #1
   1cd34:	9305      	str	r3, [sp, #20]
   1cd36:	e007      	b.n	1cd48 <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   1cd38:	6923      	ldr	r3, [r4, #16]
   1cd3a:	6a1b      	ldr	r3, [r3, #32]
   1cd3c:	b123      	cbz	r3, 1cd48 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1cd3e:	2310      	movs	r3, #16
   1cd40:	9305      	str	r3, [sp, #20]
			return true;
   1cd42:	2301      	movs	r3, #1
   1cd44:	e000      	b.n	1cd48 <z_impl_k_poll+0x70>
	switch (event->type) {
   1cd46:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   1cd48:	2b00      	cmp	r3, #0
   1cd4a:	d03d      	beq.n	1cdc8 <z_impl_k_poll+0xf0>
	event->poller = NULL;
   1cd4c:	2100      	movs	r1, #0
   1cd4e:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1cd50:	68e3      	ldr	r3, [r4, #12]
   1cd52:	f3c3 3245 	ubfx	r2, r3, #13, #6
   1cd56:	9805      	ldr	r0, [sp, #20]
   1cd58:	4302      	orrs	r2, r0
   1cd5a:	f362 3352 	bfi	r3, r2, #13, #6
   1cd5e:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1cd60:	7039      	strb	r1, [r7, #0]
   1cd62:	9b08      	ldr	r3, [sp, #32]
   1cd64:	f383 8811 	msr	BASEPRI, r3
   1cd68:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1cd6c:	3601      	adds	r6, #1
   1cd6e:	9b07      	ldr	r3, [sp, #28]
   1cd70:	42b3      	cmp	r3, r6
   1cd72:	f340 81bf 	ble.w	1d0f4 <z_impl_k_poll+0x41c>
	__asm__ volatile(
   1cd76:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd7a:	f3ef 8211 	mrs	r2, BASEPRI
   1cd7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd82:	f3bf 8f6f 	isb	sy
   1cd86:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   1cd88:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1cd8c:	00a3      	lsls	r3, r4, #2
   1cd8e:	9309      	str	r3, [sp, #36]	; 0x24
   1cd90:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   1cd94:	7b63      	ldrb	r3, [r4, #13]
   1cd96:	f003 031f 	and.w	r3, r3, #31
   1cd9a:	3b01      	subs	r3, #1
   1cd9c:	2b07      	cmp	r3, #7
   1cd9e:	d8d2      	bhi.n	1cd46 <z_impl_k_poll+0x6e>
   1cda0:	a201      	add	r2, pc, #4	; (adr r2, 1cda8 <z_impl_k_poll+0xd0>)
   1cda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cda6:	bf00      	nop
   1cda8:	0001cd2d 	.word	0x0001cd2d
   1cdac:	0001cd11 	.word	0x0001cd11
   1cdb0:	0001cd47 	.word	0x0001cd47
   1cdb4:	0001cd1f 	.word	0x0001cd1f
   1cdb8:	0001cd47 	.word	0x0001cd47
   1cdbc:	0001cd47 	.word	0x0001cd47
   1cdc0:	0001cd47 	.word	0x0001cd47
   1cdc4:	0001cd39 	.word	0x0001cd39
		} else if (!just_check && poller->is_polling) {
   1cdc8:	9b06      	ldr	r3, [sp, #24]
   1cdca:	2b00      	cmp	r3, #0
   1cdcc:	d1c9      	bne.n	1cd62 <z_impl_k_poll+0x8a>
   1cdce:	783b      	ldrb	r3, [r7, #0]
   1cdd0:	2b00      	cmp	r3, #0
   1cdd2:	d0c6      	beq.n	1cd62 <z_impl_k_poll+0x8a>
	switch (event->type) {
   1cdd4:	7b63      	ldrb	r3, [r4, #13]
   1cdd6:	f003 031f 	and.w	r3, r3, #31
   1cdda:	3b01      	subs	r3, #1
   1cddc:	2b07      	cmp	r3, #7
   1cdde:	d846      	bhi.n	1ce6e <z_impl_k_poll+0x196>
   1cde0:	e8df f013 	tbh	[pc, r3, lsl #1]
   1cde4:	000800cc 	.word	0x000800cc
   1cde8:	006a0045 	.word	0x006a0045
   1cdec:	00450045 	.word	0x00450045
   1cdf0:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   1cdf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1cdf8:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1cdfc:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ce00:	4598      	cmp	r8, r3
   1ce02:	d02b      	beq.n	1ce5c <z_impl_k_poll+0x184>
   1ce04:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1ce08:	b343      	cbz	r3, 1ce5c <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ce0a:	6898      	ldr	r0, [r3, #8]
   1ce0c:	f007 fcaf 	bl	2476e <poller_thread>
   1ce10:	900b      	str	r0, [sp, #44]	; 0x2c
   1ce12:	4638      	mov	r0, r7
   1ce14:	f007 fcab 	bl	2476e <poller_thread>
   1ce18:	4601      	mov	r1, r0
   1ce1a:	900a      	str	r0, [sp, #40]	; 0x28
   1ce1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ce1e:	f007 fa26 	bl	2426e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1ce22:	2800      	cmp	r0, #0
   1ce24:	dc1a      	bgt.n	1ce5c <z_impl_k_poll+0x184>
	return list->head == list;
   1ce26:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ce2a:	45d0      	cmp	r8, sl
   1ce2c:	d02f      	beq.n	1ce8e <z_impl_k_poll+0x1b6>
   1ce2e:	4653      	mov	r3, sl
   1ce30:	46a2      	mov	sl, r4
   1ce32:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ce34:	b38c      	cbz	r4, 1ce9a <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   1ce36:	68a0      	ldr	r0, [r4, #8]
   1ce38:	f007 fc99 	bl	2476e <poller_thread>
   1ce3c:	4601      	mov	r1, r0
   1ce3e:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ce40:	f007 fa15 	bl	2426e <z_sched_prio_cmp>
   1ce44:	2800      	cmp	r0, #0
   1ce46:	dc16      	bgt.n	1ce76 <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ce48:	b34c      	cbz	r4, 1ce9e <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   1ce4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ce4e:	429c      	cmp	r4, r3
   1ce50:	d030      	beq.n	1ceb4 <z_impl_k_poll+0x1dc>
   1ce52:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ce54:	2c00      	cmp	r4, #0
   1ce56:	d1ed      	bne.n	1ce34 <z_impl_k_poll+0x15c>
   1ce58:	4654      	mov	r4, sl
   1ce5a:	e021      	b.n	1cea0 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   1ce5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1ce60:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ce62:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1ce66:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1ce68:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ce6a:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   1ce6e:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   1ce70:	f10b 0b01 	add.w	fp, fp, #1
   1ce74:	e775      	b.n	1cd62 <z_impl_k_poll+0x8a>
   1ce76:	4623      	mov	r3, r4
   1ce78:	4654      	mov	r4, sl
   1ce7a:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1ce7c:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1ce7e:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1ce80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ce82:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1ce86:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1ce88:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1ce8c:	e7ef      	b.n	1ce6e <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ce8e:	f04f 0a00 	mov.w	sl, #0
   1ce92:	4653      	mov	r3, sl
   1ce94:	46a2      	mov	sl, r4
   1ce96:	461c      	mov	r4, r3
   1ce98:	e7cc      	b.n	1ce34 <z_impl_k_poll+0x15c>
   1ce9a:	4654      	mov	r4, sl
   1ce9c:	e000      	b.n	1cea0 <z_impl_k_poll+0x1c8>
   1ce9e:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1cea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cea6:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1ceaa:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1ceac:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ceae:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1ceb2:	e7dc      	b.n	1ce6e <z_impl_k_poll+0x196>
   1ceb4:	4654      	mov	r4, sl
   1ceb6:	e7f3      	b.n	1cea0 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   1ceb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1cebc:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1cec0:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1cec4:	4598      	cmp	r8, r3
   1cec6:	d02b      	beq.n	1cf20 <z_impl_k_poll+0x248>
   1cec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1cecc:	b343      	cbz	r3, 1cf20 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1cece:	6898      	ldr	r0, [r3, #8]
   1ced0:	f007 fc4d 	bl	2476e <poller_thread>
   1ced4:	900b      	str	r0, [sp, #44]	; 0x2c
   1ced6:	4638      	mov	r0, r7
   1ced8:	f007 fc49 	bl	2476e <poller_thread>
   1cedc:	4601      	mov	r1, r0
   1cede:	900a      	str	r0, [sp, #40]	; 0x28
   1cee0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1cee2:	f007 f9c4 	bl	2426e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1cee6:	2800      	cmp	r0, #0
   1cee8:	dc1a      	bgt.n	1cf20 <z_impl_k_poll+0x248>
	return list->head == list;
   1ceea:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ceee:	45d0      	cmp	r8, sl
   1cef0:	d02c      	beq.n	1cf4c <z_impl_k_poll+0x274>
   1cef2:	4653      	mov	r3, sl
   1cef4:	46a2      	mov	sl, r4
   1cef6:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cef8:	b374      	cbz	r4, 1cf58 <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   1cefa:	68a0      	ldr	r0, [r4, #8]
   1cefc:	f007 fc37 	bl	2476e <poller_thread>
   1cf00:	4601      	mov	r1, r0
   1cf02:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cf04:	f007 f9b3 	bl	2426e <z_sched_prio_cmp>
   1cf08:	2800      	cmp	r0, #0
   1cf0a:	dc13      	bgt.n	1cf34 <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cf0c:	b334      	cbz	r4, 1cf5c <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   1cf0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1cf12:	429c      	cmp	r4, r3
   1cf14:	d02d      	beq.n	1cf72 <z_impl_k_poll+0x29a>
   1cf16:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cf18:	2c00      	cmp	r4, #0
   1cf1a:	d1ed      	bne.n	1cef8 <z_impl_k_poll+0x220>
   1cf1c:	4654      	mov	r4, sl
   1cf1e:	e01e      	b.n	1cf5e <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   1cf20:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cf24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cf26:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cf2a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cf2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cf2e:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1cf32:	e79c      	b.n	1ce6e <z_impl_k_poll+0x196>
   1cf34:	4623      	mov	r3, r4
   1cf36:	4654      	mov	r4, sl
   1cf38:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1cf3a:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1cf3c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1cf3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cf40:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1cf44:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1cf46:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1cf4a:	e790      	b.n	1ce6e <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cf4c:	f04f 0a00 	mov.w	sl, #0
   1cf50:	4653      	mov	r3, sl
   1cf52:	46a2      	mov	sl, r4
   1cf54:	461c      	mov	r4, r3
   1cf56:	e7cf      	b.n	1cef8 <z_impl_k_poll+0x220>
   1cf58:	4654      	mov	r4, sl
   1cf5a:	e000      	b.n	1cf5e <z_impl_k_poll+0x286>
   1cf5c:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1cf5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cf62:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cf64:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cf68:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cf6a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cf6c:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1cf70:	e77d      	b.n	1ce6e <z_impl_k_poll+0x196>
   1cf72:	4654      	mov	r4, sl
   1cf74:	e7f3      	b.n	1cf5e <z_impl_k_poll+0x286>
   1cf76:	bf00      	nop
   1cf78:	20002c9c 	.word	0x20002c9c
		add_event(&event->signal->poll_events, event, poller);
   1cf7c:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   1cf80:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1cf84:	4598      	cmp	r8, r3
   1cf86:	d02b      	beq.n	1cfe0 <z_impl_k_poll+0x308>
   1cf88:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1cf8c:	b343      	cbz	r3, 1cfe0 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1cf8e:	6898      	ldr	r0, [r3, #8]
   1cf90:	f007 fbed 	bl	2476e <poller_thread>
   1cf94:	4682      	mov	sl, r0
   1cf96:	4638      	mov	r0, r7
   1cf98:	f007 fbe9 	bl	2476e <poller_thread>
   1cf9c:	4601      	mov	r1, r0
   1cf9e:	900a      	str	r0, [sp, #40]	; 0x28
   1cfa0:	4650      	mov	r0, sl
   1cfa2:	f007 f964 	bl	2426e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1cfa6:	2800      	cmp	r0, #0
   1cfa8:	dc1a      	bgt.n	1cfe0 <z_impl_k_poll+0x308>
	return list->head == list;
   1cfaa:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cfae:	45d0      	cmp	r8, sl
   1cfb0:	d02c      	beq.n	1d00c <z_impl_k_poll+0x334>
   1cfb2:	4653      	mov	r3, sl
   1cfb4:	46a2      	mov	sl, r4
   1cfb6:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cfb8:	b374      	cbz	r4, 1d018 <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   1cfba:	68a0      	ldr	r0, [r4, #8]
   1cfbc:	f007 fbd7 	bl	2476e <poller_thread>
   1cfc0:	4601      	mov	r1, r0
   1cfc2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cfc4:	f007 f953 	bl	2426e <z_sched_prio_cmp>
   1cfc8:	2800      	cmp	r0, #0
   1cfca:	dc13      	bgt.n	1cff4 <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cfcc:	b334      	cbz	r4, 1d01c <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   1cfce:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1cfd2:	429c      	cmp	r4, r3
   1cfd4:	d02d      	beq.n	1d032 <z_impl_k_poll+0x35a>
   1cfd6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cfd8:	2c00      	cmp	r4, #0
   1cfda:	d1ed      	bne.n	1cfb8 <z_impl_k_poll+0x2e0>
   1cfdc:	4654      	mov	r4, sl
   1cfde:	e01e      	b.n	1d01e <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   1cfe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cfe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cfe6:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cfea:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cfec:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cfee:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1cff2:	e73c      	b.n	1ce6e <z_impl_k_poll+0x196>
   1cff4:	4623      	mov	r3, r4
   1cff6:	4654      	mov	r4, sl
   1cff8:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1cffa:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1cffc:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1cffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d000:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1d004:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d006:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1d00a:	e730      	b.n	1ce6e <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d00c:	f04f 0a00 	mov.w	sl, #0
   1d010:	4653      	mov	r3, sl
   1d012:	46a2      	mov	sl, r4
   1d014:	461c      	mov	r4, r3
   1d016:	e7cf      	b.n	1cfb8 <z_impl_k_poll+0x2e0>
   1d018:	4654      	mov	r4, sl
   1d01a:	e000      	b.n	1d01e <z_impl_k_poll+0x346>
   1d01c:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1d01e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1d022:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d024:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1d028:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1d02a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d02c:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1d030:	e71d      	b.n	1ce6e <z_impl_k_poll+0x196>
   1d032:	4654      	mov	r4, sl
   1d034:	e7f3      	b.n	1d01e <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   1d036:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1d03a:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   1d03e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d042:	4598      	cmp	r8, r3
   1d044:	d02b      	beq.n	1d09e <z_impl_k_poll+0x3c6>
   1d046:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1d04a:	b343      	cbz	r3, 1d09e <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1d04c:	6898      	ldr	r0, [r3, #8]
   1d04e:	f007 fb8e 	bl	2476e <poller_thread>
   1d052:	900b      	str	r0, [sp, #44]	; 0x2c
   1d054:	4638      	mov	r0, r7
   1d056:	f007 fb8a 	bl	2476e <poller_thread>
   1d05a:	4601      	mov	r1, r0
   1d05c:	900a      	str	r0, [sp, #40]	; 0x28
   1d05e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d060:	f007 f905 	bl	2426e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1d064:	2800      	cmp	r0, #0
   1d066:	dc1a      	bgt.n	1d09e <z_impl_k_poll+0x3c6>
	return list->head == list;
   1d068:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d06c:	45d0      	cmp	r8, sl
   1d06e:	d02c      	beq.n	1d0ca <z_impl_k_poll+0x3f2>
   1d070:	4653      	mov	r3, sl
   1d072:	46a2      	mov	sl, r4
   1d074:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d076:	b374      	cbz	r4, 1d0d6 <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1d078:	68a0      	ldr	r0, [r4, #8]
   1d07a:	f007 fb78 	bl	2476e <poller_thread>
   1d07e:	4601      	mov	r1, r0
   1d080:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d082:	f007 f8f4 	bl	2426e <z_sched_prio_cmp>
   1d086:	2800      	cmp	r0, #0
   1d088:	dc13      	bgt.n	1d0b2 <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d08a:	b334      	cbz	r4, 1d0da <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   1d08c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d090:	429c      	cmp	r4, r3
   1d092:	d02d      	beq.n	1d0f0 <z_impl_k_poll+0x418>
   1d094:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d096:	2c00      	cmp	r4, #0
   1d098:	d1ed      	bne.n	1d076 <z_impl_k_poll+0x39e>
   1d09a:	4654      	mov	r4, sl
   1d09c:	e01e      	b.n	1d0dc <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   1d09e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1d0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d0a4:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1d0a8:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1d0aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d0ac:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1d0b0:	e6dd      	b.n	1ce6e <z_impl_k_poll+0x196>
   1d0b2:	4623      	mov	r3, r4
   1d0b4:	4654      	mov	r4, sl
   1d0b6:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1d0b8:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1d0ba:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1d0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d0be:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1d0c2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d0c4:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1d0c8:	e6d1      	b.n	1ce6e <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d0ca:	f04f 0a00 	mov.w	sl, #0
   1d0ce:	4653      	mov	r3, sl
   1d0d0:	46a2      	mov	sl, r4
   1d0d2:	461c      	mov	r4, r3
   1d0d4:	e7cf      	b.n	1d076 <z_impl_k_poll+0x39e>
   1d0d6:	4654      	mov	r4, sl
   1d0d8:	e000      	b.n	1d0dc <z_impl_k_poll+0x404>
   1d0da:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1d0dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1d0e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d0e2:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1d0e6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1d0e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d0ea:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1d0ee:	e6be      	b.n	1ce6e <z_impl_k_poll+0x196>
   1d0f0:	4654      	mov	r4, sl
   1d0f2:	e7f3      	b.n	1d0dc <z_impl_k_poll+0x404>
   1d0f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0f8:	f3ef 8111 	mrs	r1, BASEPRI
   1d0fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d100:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1d104:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   1d108:	b1cb      	cbz	r3, 1d13e <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1d10a:	2300      	movs	r3, #0
   1d10c:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d110:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1d114:	4323      	orrs	r3, r4
   1d116:	d045      	beq.n	1d1a4 <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d118:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1d11c:	e9cd 3400 	strd	r3, r4, [sp]
   1d120:	4a3c      	ldr	r2, [pc, #240]	; (1d214 <z_impl_k_poll+0x53c>)
   1d122:	483d      	ldr	r0, [pc, #244]	; (1d218 <z_impl_k_poll+0x540>)
   1d124:	f7ff f94a 	bl	1c3bc <z_pend_curr>
   1d128:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d12c:	f3ef 8c11 	mrs	ip, BASEPRI
   1d130:	f383 8812 	msr	BASEPRI_MAX, r3
   1d134:	f3bf 8f6f 	isb	sy
   1d138:	4661      	mov	r1, ip
	while (num_events--) {
   1d13a:	465b      	mov	r3, fp
   1d13c:	e04e      	b.n	1d1dc <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   1d13e:	4608      	mov	r0, r1
	while (num_events--) {
   1d140:	465b      	mov	r3, fp
   1d142:	e014      	b.n	1d16e <z_impl_k_poll+0x496>
	return node->next != NULL;
   1d144:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1d146:	b12a      	cbz	r2, 1d154 <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1d148:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1d14a:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1d14c:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1d14e:	2200      	movs	r2, #0
   1d150:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   1d152:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   1d154:	f380 8811 	msr	BASEPRI, r0
   1d158:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d15c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d160:	f3ef 8011 	mrs	r0, BASEPRI
   1d164:	f383 8812 	msr	BASEPRI_MAX, r3
   1d168:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1d16c:	463b      	mov	r3, r7
   1d16e:	1e5f      	subs	r7, r3, #1
   1d170:	b193      	cbz	r3, 1d198 <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   1d172:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1d176:	009e      	lsls	r6, r3, #2
   1d178:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1d17c:	2200      	movs	r2, #0
   1d17e:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1d180:	7b5a      	ldrb	r2, [r3, #13]
   1d182:	f002 021f 	and.w	r2, r2, #31
   1d186:	2a08      	cmp	r2, #8
   1d188:	d8e4      	bhi.n	1d154 <z_impl_k_poll+0x47c>
   1d18a:	2401      	movs	r4, #1
   1d18c:	fa04 f202 	lsl.w	r2, r4, r2
   1d190:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1d194:	d0de      	beq.n	1d154 <z_impl_k_poll+0x47c>
   1d196:	e7d5      	b.n	1d144 <z_impl_k_poll+0x46c>
	__asm__ volatile(
   1d198:	f381 8811 	msr	BASEPRI, r1
   1d19c:	f3bf 8f6f 	isb	sy
		return 0;
   1d1a0:	4618      	mov	r0, r3
   1d1a2:	e034      	b.n	1d20e <z_impl_k_poll+0x536>
   1d1a4:	f381 8811 	msr	BASEPRI, r1
   1d1a8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1d1ac:	f06f 000a 	mvn.w	r0, #10
   1d1b0:	e02d      	b.n	1d20e <z_impl_k_poll+0x536>
	return node->next != NULL;
   1d1b2:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1d1b4:	b12a      	cbz	r2, 1d1c2 <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   1d1b6:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   1d1b8:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   1d1ba:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   1d1bc:	2200      	movs	r2, #0
   1d1be:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   1d1c0:	605a      	str	r2, [r3, #4]
   1d1c2:	f381 8811 	msr	BASEPRI, r1
   1d1c6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d1ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d1ce:	f3ef 8111 	mrs	r1, BASEPRI
   1d1d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1d6:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1d1da:	4623      	mov	r3, r4
   1d1dc:	1e5c      	subs	r4, r3, #1
   1d1de:	b193      	cbz	r3, 1d206 <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   1d1e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d1e4:	009f      	lsls	r7, r3, #2
   1d1e6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1d1ea:	2200      	movs	r2, #0
   1d1ec:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1d1ee:	7b5a      	ldrb	r2, [r3, #13]
   1d1f0:	f002 021f 	and.w	r2, r2, #31
   1d1f4:	2a08      	cmp	r2, #8
   1d1f6:	d8e4      	bhi.n	1d1c2 <z_impl_k_poll+0x4ea>
   1d1f8:	2601      	movs	r6, #1
   1d1fa:	fa06 f202 	lsl.w	r2, r6, r2
   1d1fe:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1d202:	d0de      	beq.n	1d1c2 <z_impl_k_poll+0x4ea>
   1d204:	e7d5      	b.n	1d1b2 <z_impl_k_poll+0x4da>
	__asm__ volatile(
   1d206:	f38c 8811 	msr	BASEPRI, ip
   1d20a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1d20e:	b00d      	add	sp, #52	; 0x34
   1d210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d214:	200005f0 	.word	0x200005f0
   1d218:	20002ce0 	.word	0x20002ce0

0001d21c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1d21c:	b538      	push	{r3, r4, r5, lr}
   1d21e:	4603      	mov	r3, r0
	__asm__ volatile(
   1d220:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d224:	f3ef 8511 	mrs	r5, BASEPRI
   1d228:	f382 8812 	msr	BASEPRI_MAX, r2
   1d22c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1d230:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1d232:	2201      	movs	r2, #1
   1d234:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1d236:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d238:	4283      	cmp	r3, r0
   1d23a:	d011      	beq.n	1d260 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   1d23c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1d23e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1d240:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d242:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d244:	2300      	movs	r3, #0
   1d246:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1d248:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   1d24a:	b148      	cbz	r0, 1d260 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d24c:	2101      	movs	r1, #1
   1d24e:	f007 fade 	bl	2480e <signal_poll_event>
   1d252:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1d254:	4629      	mov	r1, r5
   1d256:	4805      	ldr	r0, [pc, #20]	; (1d26c <z_impl_k_poll_signal_raise+0x50>)
   1d258:	f7fe ff4c 	bl	1c0f4 <z_reschedule>
	return rc;
}
   1d25c:	4620      	mov	r0, r4
   1d25e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d260:	f385 8811 	msr	BASEPRI, r5
   1d264:	f3bf 8f6f 	isb	sy
		return 0;
   1d268:	2400      	movs	r4, #0
   1d26a:	e7f7      	b.n	1d25c <z_impl_k_poll_signal_raise+0x40>
   1d26c:	20002ce0 	.word	0x20002ce0

0001d270 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1d270:	b538      	push	{r3, r4, r5, lr}
   1d272:	4604      	mov	r4, r0
   1d274:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1d276:	f006 fd89 	bl	23d8c <k_is_in_isr>
   1d27a:	b948      	cbnz	r0, 1d290 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1d27c:	4b05      	ldr	r3, [pc, #20]	; (1d294 <z_thread_aligned_alloc+0x24>)
   1d27e:	689b      	ldr	r3, [r3, #8]
   1d280:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1d284:	b118      	cbz	r0, 1d28e <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1d286:	462a      	mov	r2, r5
   1d288:	4621      	mov	r1, r4
   1d28a:	f007 fb09 	bl	248a0 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1d28e:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1d290:	4801      	ldr	r0, [pc, #4]	; (1d298 <z_thread_aligned_alloc+0x28>)
   1d292:	e7f7      	b.n	1d284 <z_thread_aligned_alloc+0x14>
   1d294:	20002c9c 	.word	0x20002c9c
   1d298:	200006d8 	.word	0x200006d8

0001d29c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1d29c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1d29e:	4a03      	ldr	r2, [pc, #12]	; (1d2ac <boot_banner+0x10>)
   1d2a0:	4903      	ldr	r1, [pc, #12]	; (1d2b0 <boot_banner+0x14>)
   1d2a2:	4804      	ldr	r0, [pc, #16]	; (1d2b4 <boot_banner+0x18>)
   1d2a4:	f002 fcf5 	bl	1fc92 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1d2a8:	bd08      	pop	{r3, pc}
   1d2aa:	bf00      	nop
   1d2ac:	00025030 	.word	0x00025030
   1d2b0:	00026dc4 	.word	0x00026dc4
   1d2b4:	00026dd4 	.word	0x00026dd4

0001d2b8 <nrf_cc3xx_platform_init>:
   1d2b8:	b510      	push	{r4, lr}
   1d2ba:	4c0c      	ldr	r4, [pc, #48]	; (1d2ec <nrf_cc3xx_platform_init+0x34>)
   1d2bc:	6823      	ldr	r3, [r4, #0]
   1d2be:	b113      	cbz	r3, 1d2c6 <nrf_cc3xx_platform_init+0xe>
   1d2c0:	4b0b      	ldr	r3, [pc, #44]	; (1d2f0 <nrf_cc3xx_platform_init+0x38>)
   1d2c2:	681b      	ldr	r3, [r3, #0]
   1d2c4:	b92b      	cbnz	r3, 1d2d2 <nrf_cc3xx_platform_init+0x1a>
   1d2c6:	f000 fe73 	bl	1dfb0 <CC_LibInit>
   1d2ca:	b930      	cbnz	r0, 1d2da <nrf_cc3xx_platform_init+0x22>
   1d2cc:	4b08      	ldr	r3, [pc, #32]	; (1d2f0 <nrf_cc3xx_platform_init+0x38>)
   1d2ce:	2201      	movs	r2, #1
   1d2d0:	601a      	str	r2, [r3, #0]
   1d2d2:	2301      	movs	r3, #1
   1d2d4:	6023      	str	r3, [r4, #0]
   1d2d6:	2000      	movs	r0, #0
   1d2d8:	bd10      	pop	{r4, pc}
   1d2da:	3801      	subs	r0, #1
   1d2dc:	2806      	cmp	r0, #6
   1d2de:	d901      	bls.n	1d2e4 <nrf_cc3xx_platform_init+0x2c>
   1d2e0:	4804      	ldr	r0, [pc, #16]	; (1d2f4 <nrf_cc3xx_platform_init+0x3c>)
   1d2e2:	bd10      	pop	{r4, pc}
   1d2e4:	4b04      	ldr	r3, [pc, #16]	; (1d2f8 <nrf_cc3xx_platform_init+0x40>)
   1d2e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d2ea:	bd10      	pop	{r4, pc}
   1d2ec:	20002ce0 	.word	0x20002ce0
   1d2f0:	20002ce4 	.word	0x20002ce4
   1d2f4:	ffff8ffe 	.word	0xffff8ffe
   1d2f8:	00026dfc 	.word	0x00026dfc

0001d2fc <nrf_cc3xx_platform_abort>:
   1d2fc:	f3bf 8f4f 	dsb	sy
   1d300:	4905      	ldr	r1, [pc, #20]	; (1d318 <nrf_cc3xx_platform_abort+0x1c>)
   1d302:	4b06      	ldr	r3, [pc, #24]	; (1d31c <nrf_cc3xx_platform_abort+0x20>)
   1d304:	68ca      	ldr	r2, [r1, #12]
   1d306:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1d30a:	4313      	orrs	r3, r2
   1d30c:	60cb      	str	r3, [r1, #12]
   1d30e:	f3bf 8f4f 	dsb	sy
   1d312:	bf00      	nop
   1d314:	e7fd      	b.n	1d312 <nrf_cc3xx_platform_abort+0x16>
   1d316:	bf00      	nop
   1d318:	e000ed00 	.word	0xe000ed00
   1d31c:	05fa0004 	.word	0x05fa0004

0001d320 <CC_PalAbort>:
   1d320:	b4f0      	push	{r4, r5, r6, r7}
   1d322:	4f09      	ldr	r7, [pc, #36]	; (1d348 <CC_PalAbort+0x28>)
   1d324:	4e09      	ldr	r6, [pc, #36]	; (1d34c <CC_PalAbort+0x2c>)
   1d326:	4c0a      	ldr	r4, [pc, #40]	; (1d350 <CC_PalAbort+0x30>)
   1d328:	4a0a      	ldr	r2, [pc, #40]	; (1d354 <CC_PalAbort+0x34>)
   1d32a:	4d0b      	ldr	r5, [pc, #44]	; (1d358 <CC_PalAbort+0x38>)
   1d32c:	490b      	ldr	r1, [pc, #44]	; (1d35c <CC_PalAbort+0x3c>)
   1d32e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1d332:	603b      	str	r3, [r7, #0]
   1d334:	6852      	ldr	r2, [r2, #4]
   1d336:	6033      	str	r3, [r6, #0]
   1d338:	6023      	str	r3, [r4, #0]
   1d33a:	2400      	movs	r4, #0
   1d33c:	602b      	str	r3, [r5, #0]
   1d33e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1d342:	bcf0      	pop	{r4, r5, r6, r7}
   1d344:	4710      	bx	r2
   1d346:	bf00      	nop
   1d348:	5002b400 	.word	0x5002b400
   1d34c:	5002b404 	.word	0x5002b404
   1d350:	5002b408 	.word	0x5002b408
   1d354:	200005f8 	.word	0x200005f8
   1d358:	5002b40c 	.word	0x5002b40c
   1d35c:	5002a000 	.word	0x5002a000

0001d360 <nrf_cc3xx_platform_set_abort>:
   1d360:	e9d0 1200 	ldrd	r1, r2, [r0]
   1d364:	4b01      	ldr	r3, [pc, #4]	; (1d36c <nrf_cc3xx_platform_set_abort+0xc>)
   1d366:	e9c3 1200 	strd	r1, r2, [r3]
   1d36a:	4770      	bx	lr
   1d36c:	200005f8 	.word	0x200005f8

0001d370 <nrf_cc3xx_platform_ctr_drbg_init>:
   1d370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d374:	4c15      	ldr	r4, [pc, #84]	; (1d3cc <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1d376:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1d3d4 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1d37a:	2800      	cmp	r0, #0
   1d37c:	bf18      	it	ne
   1d37e:	4604      	movne	r4, r0
   1d380:	b083      	sub	sp, #12
   1d382:	6820      	ldr	r0, [r4, #0]
   1d384:	4540      	cmp	r0, r8
   1d386:	d01d      	beq.n	1d3c4 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1d388:	460d      	mov	r5, r1
   1d38a:	4620      	mov	r0, r4
   1d38c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1d390:	f104 0904 	add.w	r9, r4, #4
   1d394:	4616      	mov	r6, r2
   1d396:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1d39a:	f000 f8d3 	bl	1d544 <mbedtls_platform_zeroize>
   1d39e:	4648      	mov	r0, r9
   1d3a0:	f000 fcf2 	bl	1dd88 <cc_mbedtls_entropy_init>
   1d3a4:	4638      	mov	r0, r7
   1d3a6:	f000 fb1f 	bl	1d9e8 <cc_mbedtls_ctr_drbg_init>
   1d3aa:	4909      	ldr	r1, [pc, #36]	; (1d3d0 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1d3ac:	9600      	str	r6, [sp, #0]
   1d3ae:	464a      	mov	r2, r9
   1d3b0:	4638      	mov	r0, r7
   1d3b2:	462b      	mov	r3, r5
   1d3b4:	f000 fb2e 	bl	1da14 <cc_mbedtls_ctr_drbg_seed>
   1d3b8:	b908      	cbnz	r0, 1d3be <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1d3ba:	f8c4 8000 	str.w	r8, [r4]
   1d3be:	b003      	add	sp, #12
   1d3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d3c4:	2000      	movs	r0, #0
   1d3c6:	b003      	add	sp, #12
   1d3c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d3cc:	200036c4 	.word	0x200036c4
   1d3d0:	0001de05 	.word	0x0001de05
   1d3d4:	5ac9bca5 	.word	0x5ac9bca5

0001d3d8 <nrf_cc3xx_platform_ctr_drbg_get>:
   1d3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3da:	4c0d      	ldr	r4, [pc, #52]	; (1d410 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1d3dc:	4e0d      	ldr	r6, [pc, #52]	; (1d414 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1d3de:	2800      	cmp	r0, #0
   1d3e0:	bf08      	it	eq
   1d3e2:	4620      	moveq	r0, r4
   1d3e4:	b083      	sub	sp, #12
   1d3e6:	6807      	ldr	r7, [r0, #0]
   1d3e8:	42b7      	cmp	r7, r6
   1d3ea:	d10e      	bne.n	1d40a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1d3ec:	2600      	movs	r6, #0
   1d3ee:	461d      	mov	r5, r3
   1d3f0:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1d3f4:	9600      	str	r6, [sp, #0]
   1d3f6:	4633      	mov	r3, r6
   1d3f8:	4614      	mov	r4, r2
   1d3fa:	f000 fb57 	bl	1daac <cc_mbedtls_ctr_drbg_random_with_add>
   1d3fe:	2800      	cmp	r0, #0
   1d400:	bf18      	it	ne
   1d402:	4634      	movne	r4, r6
   1d404:	602c      	str	r4, [r5, #0]
   1d406:	b003      	add	sp, #12
   1d408:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d40a:	4803      	ldr	r0, [pc, #12]	; (1d418 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1d40c:	e7fb      	b.n	1d406 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1d40e:	bf00      	nop
   1d410:	200036c4 	.word	0x200036c4
   1d414:	5ac9bca5 	.word	0x5ac9bca5
   1d418:	ffff8fe8 	.word	0xffff8fe8

0001d41c <mutex_free>:
   1d41c:	b510      	push	{r4, lr}
   1d41e:	4604      	mov	r4, r0
   1d420:	b130      	cbz	r0, 1d430 <mutex_free+0x14>
   1d422:	6863      	ldr	r3, [r4, #4]
   1d424:	06db      	lsls	r3, r3, #27
   1d426:	d502      	bpl.n	1d42e <mutex_free+0x12>
   1d428:	2300      	movs	r3, #0
   1d42a:	6023      	str	r3, [r4, #0]
   1d42c:	6063      	str	r3, [r4, #4]
   1d42e:	bd10      	pop	{r4, pc}
   1d430:	4b02      	ldr	r3, [pc, #8]	; (1d43c <mutex_free+0x20>)
   1d432:	4803      	ldr	r0, [pc, #12]	; (1d440 <mutex_free+0x24>)
   1d434:	685b      	ldr	r3, [r3, #4]
   1d436:	4798      	blx	r3
   1d438:	e7f3      	b.n	1d422 <mutex_free+0x6>
   1d43a:	bf00      	nop
   1d43c:	200005f8 	.word	0x200005f8
   1d440:	00026e18 	.word	0x00026e18

0001d444 <mutex_unlock>:
   1d444:	b168      	cbz	r0, 1d462 <mutex_unlock+0x1e>
   1d446:	6843      	ldr	r3, [r0, #4]
   1d448:	b13b      	cbz	r3, 1d45a <mutex_unlock+0x16>
   1d44a:	06db      	lsls	r3, r3, #27
   1d44c:	d507      	bpl.n	1d45e <mutex_unlock+0x1a>
   1d44e:	f3bf 8f5f 	dmb	sy
   1d452:	2300      	movs	r3, #0
   1d454:	6003      	str	r3, [r0, #0]
   1d456:	4618      	mov	r0, r3
   1d458:	4770      	bx	lr
   1d45a:	4803      	ldr	r0, [pc, #12]	; (1d468 <mutex_unlock+0x24>)
   1d45c:	4770      	bx	lr
   1d45e:	4803      	ldr	r0, [pc, #12]	; (1d46c <mutex_unlock+0x28>)
   1d460:	4770      	bx	lr
   1d462:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1d466:	4770      	bx	lr
   1d468:	ffff8fea 	.word	0xffff8fea
   1d46c:	ffff8fe9 	.word	0xffff8fe9

0001d470 <mutex_init>:
   1d470:	b510      	push	{r4, lr}
   1d472:	4604      	mov	r4, r0
   1d474:	b120      	cbz	r0, 1d480 <mutex_init+0x10>
   1d476:	2200      	movs	r2, #0
   1d478:	2311      	movs	r3, #17
   1d47a:	6022      	str	r2, [r4, #0]
   1d47c:	6063      	str	r3, [r4, #4]
   1d47e:	bd10      	pop	{r4, pc}
   1d480:	4801      	ldr	r0, [pc, #4]	; (1d488 <mutex_init+0x18>)
   1d482:	f7ff ff4d 	bl	1d320 <CC_PalAbort>
   1d486:	e7f6      	b.n	1d476 <mutex_init+0x6>
   1d488:	00026e40 	.word	0x00026e40

0001d48c <mutex_lock>:
   1d48c:	b1c0      	cbz	r0, 1d4c0 <mutex_lock+0x34>
   1d48e:	6843      	ldr	r3, [r0, #4]
   1d490:	b1a3      	cbz	r3, 1d4bc <mutex_lock+0x30>
   1d492:	06db      	lsls	r3, r3, #27
   1d494:	d510      	bpl.n	1d4b8 <mutex_lock+0x2c>
   1d496:	2201      	movs	r2, #1
   1d498:	f3bf 8f5b 	dmb	ish
   1d49c:	e850 3f00 	ldrex	r3, [r0]
   1d4a0:	e840 2100 	strex	r1, r2, [r0]
   1d4a4:	2900      	cmp	r1, #0
   1d4a6:	d1f9      	bne.n	1d49c <mutex_lock+0x10>
   1d4a8:	f3bf 8f5b 	dmb	ish
   1d4ac:	2b01      	cmp	r3, #1
   1d4ae:	d0f3      	beq.n	1d498 <mutex_lock+0xc>
   1d4b0:	f3bf 8f5f 	dmb	sy
   1d4b4:	2000      	movs	r0, #0
   1d4b6:	4770      	bx	lr
   1d4b8:	4803      	ldr	r0, [pc, #12]	; (1d4c8 <mutex_lock+0x3c>)
   1d4ba:	4770      	bx	lr
   1d4bc:	4803      	ldr	r0, [pc, #12]	; (1d4cc <mutex_lock+0x40>)
   1d4be:	4770      	bx	lr
   1d4c0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1d4c4:	4770      	bx	lr
   1d4c6:	bf00      	nop
   1d4c8:	ffff8fe9 	.word	0xffff8fe9
   1d4cc:	ffff8fea 	.word	0xffff8fea

0001d4d0 <nrf_cc3xx_platform_set_mutexes>:
   1d4d0:	b570      	push	{r4, r5, r6, lr}
   1d4d2:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d4d6:	4c13      	ldr	r4, [pc, #76]	; (1d524 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1d4d8:	4d13      	ldr	r5, [pc, #76]	; (1d528 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1d4da:	e9c4 2300 	strd	r2, r3, [r4]
   1d4de:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1d4e2:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1d4e6:	4b11      	ldr	r3, [pc, #68]	; (1d52c <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1d4e8:	6808      	ldr	r0, [r1, #0]
   1d4ea:	6018      	str	r0, [r3, #0]
   1d4ec:	6848      	ldr	r0, [r1, #4]
   1d4ee:	6058      	str	r0, [r3, #4]
   1d4f0:	6888      	ldr	r0, [r1, #8]
   1d4f2:	6098      	str	r0, [r3, #8]
   1d4f4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1d4f8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1d4fc:	60de      	str	r6, [r3, #12]
   1d4fe:	6118      	str	r0, [r3, #16]
   1d500:	06cb      	lsls	r3, r1, #27
   1d502:	d50d      	bpl.n	1d520 <nrf_cc3xx_platform_set_mutexes+0x50>
   1d504:	2300      	movs	r3, #0
   1d506:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1d50a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1d50e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1d512:	4790      	blx	r2
   1d514:	6823      	ldr	r3, [r4, #0]
   1d516:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1d51a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d51e:	4718      	bx	r3
   1d520:	bd70      	pop	{r4, r5, r6, pc}
   1d522:	bf00      	nop
   1d524:	20000608 	.word	0x20000608
   1d528:	200036c4 	.word	0x200036c4
   1d52c:	20000618 	.word	0x20000618

0001d530 <mbedtls_zeroize_internal>:
   1d530:	b138      	cbz	r0, 1d542 <mbedtls_zeroize_internal+0x12>
   1d532:	b131      	cbz	r1, 1d542 <mbedtls_zeroize_internal+0x12>
   1d534:	4401      	add	r1, r0
   1d536:	2200      	movs	r2, #0
   1d538:	4603      	mov	r3, r0
   1d53a:	3001      	adds	r0, #1
   1d53c:	4281      	cmp	r1, r0
   1d53e:	701a      	strb	r2, [r3, #0]
   1d540:	d1fa      	bne.n	1d538 <mbedtls_zeroize_internal+0x8>
   1d542:	4770      	bx	lr

0001d544 <mbedtls_platform_zeroize>:
   1d544:	b138      	cbz	r0, 1d556 <mbedtls_platform_zeroize+0x12>
   1d546:	b131      	cbz	r1, 1d556 <mbedtls_platform_zeroize+0x12>
   1d548:	4401      	add	r1, r0
   1d54a:	2200      	movs	r2, #0
   1d54c:	4603      	mov	r3, r0
   1d54e:	3001      	adds	r0, #1
   1d550:	4288      	cmp	r0, r1
   1d552:	701a      	strb	r2, [r3, #0]
   1d554:	d1fa      	bne.n	1d54c <mbedtls_platform_zeroize+0x8>
   1d556:	4770      	bx	lr

0001d558 <block_cipher_df>:
   1d558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d55c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1d560:	b0b1      	sub	sp, #196	; 0xc4
   1d562:	f200 812e 	bhi.w	1d7c2 <block_cipher_df+0x26a>
   1d566:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1d7d4 <block_cipher_df+0x27c>
   1d56a:	4614      	mov	r4, r2
   1d56c:	460d      	mov	r5, r1
   1d56e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1d572:	2100      	movs	r1, #0
   1d574:	4682      	mov	sl, r0
   1d576:	4648      	mov	r0, r9
   1d578:	f007 f9e6 	bl	24948 <memset>
   1d57c:	a813      	add	r0, sp, #76	; 0x4c
   1d57e:	f001 f9e5 	bl	1e94c <cc_mbedtls_aes_init>
   1d582:	2600      	movs	r6, #0
   1d584:	4629      	mov	r1, r5
   1d586:	2320      	movs	r3, #32
   1d588:	ba65      	rev16	r5, r4
   1d58a:	4622      	mov	r2, r4
   1d58c:	f109 0018 	add.w	r0, r9, #24
   1d590:	f8a9 5012 	strh.w	r5, [r9, #18]
   1d594:	f889 3017 	strb.w	r3, [r9, #23]
   1d598:	f8a9 6010 	strh.w	r6, [r9, #16]
   1d59c:	f007 f9ac 	bl	248f8 <memcpy>
   1d5a0:	eb09 0304 	add.w	r3, r9, r4
   1d5a4:	2280      	movs	r2, #128	; 0x80
   1d5a6:	4d88      	ldr	r5, [pc, #544]	; (1d7c8 <block_cipher_df+0x270>)
   1d5a8:	761a      	strb	r2, [r3, #24]
   1d5aa:	4b88      	ldr	r3, [pc, #544]	; (1d7cc <block_cipher_df+0x274>)
   1d5ac:	9503      	str	r5, [sp, #12]
   1d5ae:	9304      	str	r3, [sp, #16]
   1d5b0:	a813      	add	r0, sp, #76	; 0x4c
   1d5b2:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1d5b6:	a903      	add	r1, sp, #12
   1d5b8:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1d5bc:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1d5c0:	f001 f9da 	bl	1e978 <cc_mbedtls_aes_setkey_enc>
   1d5c4:	4680      	mov	r8, r0
   1d5c6:	2800      	cmp	r0, #0
   1d5c8:	f040 80da 	bne.w	1d780 <block_cipher_df+0x228>
   1d5cc:	f104 0319 	add.w	r3, r4, #25
   1d5d0:	9301      	str	r3, [sp, #4]
   1d5d2:	af07      	add	r7, sp, #28
   1d5d4:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1d5d8:	2210      	movs	r2, #16
   1d5da:	2100      	movs	r1, #0
   1d5dc:	4638      	mov	r0, r7
   1d5de:	f007 f9b3 	bl	24948 <memset>
   1d5e2:	4c7b      	ldr	r4, [pc, #492]	; (1d7d0 <block_cipher_df+0x278>)
   1d5e4:	9d01      	ldr	r5, [sp, #4]
   1d5e6:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1d5ea:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1d5ee:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1d5f2:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1d5f6:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1d5fa:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1d5fe:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1d602:	404e      	eors	r6, r1
   1d604:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1d608:	f88d 601d 	strb.w	r6, [sp, #29]
   1d60c:	ea8e 0303 	eor.w	r3, lr, r3
   1d610:	4050      	eors	r0, r2
   1d612:	ea8c 0101 	eor.w	r1, ip, r1
   1d616:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1d61a:	f88d 301c 	strb.w	r3, [sp, #28]
   1d61e:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1d622:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1d626:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1d62a:	f88d 001e 	strb.w	r0, [sp, #30]
   1d62e:	f88d 101f 	strb.w	r1, [sp, #31]
   1d632:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1d636:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1d63a:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1d63e:	405a      	eors	r2, r3
   1d640:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1d644:	f88d 2020 	strb.w	r2, [sp, #32]
   1d648:	ea8c 0606 	eor.w	r6, ip, r6
   1d64c:	4048      	eors	r0, r1
   1d64e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1d652:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1d656:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1d65a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1d65e:	ea8e 0303 	eor.w	r3, lr, r3
   1d662:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1d666:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1d66a:	ea8c 0101 	eor.w	r1, ip, r1
   1d66e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1d672:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1d676:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1d67a:	ea82 020c 	eor.w	r2, r2, ip
   1d67e:	4073      	eors	r3, r6
   1d680:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1d684:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1d688:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1d68c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1d690:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1d694:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1d698:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1d69c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1d6a0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1d6a4:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1d6a8:	ea8e 0202 	eor.w	r2, lr, r2
   1d6ac:	4041      	eors	r1, r0
   1d6ae:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1d6b2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1d6b6:	4073      	eors	r3, r6
   1d6b8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1d6bc:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1d6c0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1d6c4:	ea8c 0000 	eor.w	r0, ip, r0
   1d6c8:	4056      	eors	r6, r2
   1d6ca:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1d6ce:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1d6d2:	463b      	mov	r3, r7
   1d6d4:	463a      	mov	r2, r7
   1d6d6:	2101      	movs	r1, #1
   1d6d8:	a813      	add	r0, sp, #76	; 0x4c
   1d6da:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1d6de:	f001 f965 	bl	1e9ac <cc_mbedtls_aes_crypt_ecb>
   1d6e2:	2d10      	cmp	r5, #16
   1d6e4:	bf94      	ite	ls
   1d6e6:	1b6d      	subls	r5, r5, r5
   1d6e8:	3d10      	subhi	r5, #16
   1d6ea:	2800      	cmp	r0, #0
   1d6ec:	d167      	bne.n	1d7be <block_cipher_df+0x266>
   1d6ee:	3410      	adds	r4, #16
   1d6f0:	2d00      	cmp	r5, #0
   1d6f2:	f47f af78 	bne.w	1d5e6 <block_cipher_df+0x8e>
   1d6f6:	eb0b 0008 	add.w	r0, fp, r8
   1d6fa:	2210      	movs	r2, #16
   1d6fc:	4639      	mov	r1, r7
   1d6fe:	f007 f8fb 	bl	248f8 <memcpy>
   1d702:	f899 3003 	ldrb.w	r3, [r9, #3]
   1d706:	f108 0810 	add.w	r8, r8, #16
   1d70a:	3301      	adds	r3, #1
   1d70c:	f1b8 0f20 	cmp.w	r8, #32
   1d710:	f889 3003 	strb.w	r3, [r9, #3]
   1d714:	f47f af60 	bne.w	1d5d8 <block_cipher_df+0x80>
   1d718:	2280      	movs	r2, #128	; 0x80
   1d71a:	4659      	mov	r1, fp
   1d71c:	a813      	add	r0, sp, #76	; 0x4c
   1d71e:	f001 f92b 	bl	1e978 <cc_mbedtls_aes_setkey_enc>
   1d722:	4680      	mov	r8, r0
   1d724:	bb78      	cbnz	r0, 1d786 <block_cipher_df+0x22e>
   1d726:	f10a 0520 	add.w	r5, sl, #32
   1d72a:	4654      	mov	r4, sl
   1d72c:	ab0f      	add	r3, sp, #60	; 0x3c
   1d72e:	461a      	mov	r2, r3
   1d730:	2101      	movs	r1, #1
   1d732:	a813      	add	r0, sp, #76	; 0x4c
   1d734:	f001 f93a 	bl	1e9ac <cc_mbedtls_aes_crypt_ecb>
   1d738:	2210      	movs	r2, #16
   1d73a:	4680      	mov	r8, r0
   1d73c:	a90f      	add	r1, sp, #60	; 0x3c
   1d73e:	4620      	mov	r0, r4
   1d740:	4414      	add	r4, r2
   1d742:	f1b8 0f00 	cmp.w	r8, #0
   1d746:	d11e      	bne.n	1d786 <block_cipher_df+0x22e>
   1d748:	f007 f8d6 	bl	248f8 <memcpy>
   1d74c:	42ac      	cmp	r4, r5
   1d74e:	d1ed      	bne.n	1d72c <block_cipher_df+0x1d4>
   1d750:	a813      	add	r0, sp, #76	; 0x4c
   1d752:	f001 f90b 	bl	1e96c <cc_mbedtls_aes_free>
   1d756:	481f      	ldr	r0, [pc, #124]	; (1d7d4 <block_cipher_df+0x27c>)
   1d758:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1d75c:	f7ff fef2 	bl	1d544 <mbedtls_platform_zeroize>
   1d760:	4658      	mov	r0, fp
   1d762:	2120      	movs	r1, #32
   1d764:	f7ff feee 	bl	1d544 <mbedtls_platform_zeroize>
   1d768:	a803      	add	r0, sp, #12
   1d76a:	2110      	movs	r1, #16
   1d76c:	f7ff feea 	bl	1d544 <mbedtls_platform_zeroize>
   1d770:	4638      	mov	r0, r7
   1d772:	2110      	movs	r1, #16
   1d774:	f7ff fee6 	bl	1d544 <mbedtls_platform_zeroize>
   1d778:	4640      	mov	r0, r8
   1d77a:	b031      	add	sp, #196	; 0xc4
   1d77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d780:	af07      	add	r7, sp, #28
   1d782:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1d786:	a813      	add	r0, sp, #76	; 0x4c
   1d788:	f001 f8f0 	bl	1e96c <cc_mbedtls_aes_free>
   1d78c:	4811      	ldr	r0, [pc, #68]	; (1d7d4 <block_cipher_df+0x27c>)
   1d78e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1d792:	f7ff fed7 	bl	1d544 <mbedtls_platform_zeroize>
   1d796:	4658      	mov	r0, fp
   1d798:	2120      	movs	r1, #32
   1d79a:	f7ff fed3 	bl	1d544 <mbedtls_platform_zeroize>
   1d79e:	a803      	add	r0, sp, #12
   1d7a0:	2110      	movs	r1, #16
   1d7a2:	f7ff fecf 	bl	1d544 <mbedtls_platform_zeroize>
   1d7a6:	4638      	mov	r0, r7
   1d7a8:	2110      	movs	r1, #16
   1d7aa:	f7ff fecb 	bl	1d544 <mbedtls_platform_zeroize>
   1d7ae:	4650      	mov	r0, sl
   1d7b0:	2120      	movs	r1, #32
   1d7b2:	f7ff fec7 	bl	1d544 <mbedtls_platform_zeroize>
   1d7b6:	4640      	mov	r0, r8
   1d7b8:	b031      	add	sp, #196	; 0xc4
   1d7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7be:	4680      	mov	r8, r0
   1d7c0:	e7e1      	b.n	1d786 <block_cipher_df+0x22e>
   1d7c2:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1d7c6:	e7f6      	b.n	1d7b6 <block_cipher_df+0x25e>
   1d7c8:	03020100 	.word	0x03020100
   1d7cc:	07060504 	.word	0x07060504
   1d7d0:	20002d08 	.word	0x20002d08
   1d7d4:	20002cf8 	.word	0x20002cf8

0001d7d8 <ctr_drbg_update_internal>:
   1d7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7dc:	b088      	sub	sp, #32
   1d7de:	4604      	mov	r4, r0
   1d7e0:	2220      	movs	r2, #32
   1d7e2:	460d      	mov	r5, r1
   1d7e4:	4668      	mov	r0, sp
   1d7e6:	2100      	movs	r1, #0
   1d7e8:	eb04 0802 	add.w	r8, r4, r2
   1d7ec:	f007 f8ac 	bl	24948 <memset>
   1d7f0:	466e      	mov	r6, sp
   1d7f2:	7be2      	ldrb	r2, [r4, #15]
   1d7f4:	3201      	adds	r2, #1
   1d7f6:	b2d2      	uxtb	r2, r2
   1d7f8:	73e2      	strb	r2, [r4, #15]
   1d7fa:	2a00      	cmp	r2, #0
   1d7fc:	d14d      	bne.n	1d89a <ctr_drbg_update_internal+0xc2>
   1d7fe:	7ba2      	ldrb	r2, [r4, #14]
   1d800:	3201      	adds	r2, #1
   1d802:	b2d2      	uxtb	r2, r2
   1d804:	73a2      	strb	r2, [r4, #14]
   1d806:	2a00      	cmp	r2, #0
   1d808:	d147      	bne.n	1d89a <ctr_drbg_update_internal+0xc2>
   1d80a:	7b63      	ldrb	r3, [r4, #13]
   1d80c:	3301      	adds	r3, #1
   1d80e:	b2db      	uxtb	r3, r3
   1d810:	7363      	strb	r3, [r4, #13]
   1d812:	2b00      	cmp	r3, #0
   1d814:	d141      	bne.n	1d89a <ctr_drbg_update_internal+0xc2>
   1d816:	7b23      	ldrb	r3, [r4, #12]
   1d818:	3301      	adds	r3, #1
   1d81a:	b2db      	uxtb	r3, r3
   1d81c:	7323      	strb	r3, [r4, #12]
   1d81e:	2b00      	cmp	r3, #0
   1d820:	d13b      	bne.n	1d89a <ctr_drbg_update_internal+0xc2>
   1d822:	7ae3      	ldrb	r3, [r4, #11]
   1d824:	3301      	adds	r3, #1
   1d826:	b2db      	uxtb	r3, r3
   1d828:	72e3      	strb	r3, [r4, #11]
   1d82a:	2b00      	cmp	r3, #0
   1d82c:	d135      	bne.n	1d89a <ctr_drbg_update_internal+0xc2>
   1d82e:	7aa3      	ldrb	r3, [r4, #10]
   1d830:	3301      	adds	r3, #1
   1d832:	b2db      	uxtb	r3, r3
   1d834:	72a3      	strb	r3, [r4, #10]
   1d836:	2b00      	cmp	r3, #0
   1d838:	d12f      	bne.n	1d89a <ctr_drbg_update_internal+0xc2>
   1d83a:	7a63      	ldrb	r3, [r4, #9]
   1d83c:	3301      	adds	r3, #1
   1d83e:	b2db      	uxtb	r3, r3
   1d840:	7263      	strb	r3, [r4, #9]
   1d842:	bb53      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d844:	7a23      	ldrb	r3, [r4, #8]
   1d846:	3301      	adds	r3, #1
   1d848:	b2db      	uxtb	r3, r3
   1d84a:	7223      	strb	r3, [r4, #8]
   1d84c:	bb2b      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d84e:	79e3      	ldrb	r3, [r4, #7]
   1d850:	3301      	adds	r3, #1
   1d852:	b2db      	uxtb	r3, r3
   1d854:	71e3      	strb	r3, [r4, #7]
   1d856:	bb03      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d858:	79a3      	ldrb	r3, [r4, #6]
   1d85a:	3301      	adds	r3, #1
   1d85c:	b2db      	uxtb	r3, r3
   1d85e:	71a3      	strb	r3, [r4, #6]
   1d860:	b9db      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d862:	7963      	ldrb	r3, [r4, #5]
   1d864:	3301      	adds	r3, #1
   1d866:	b2db      	uxtb	r3, r3
   1d868:	7163      	strb	r3, [r4, #5]
   1d86a:	b9b3      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d86c:	7923      	ldrb	r3, [r4, #4]
   1d86e:	3301      	adds	r3, #1
   1d870:	b2db      	uxtb	r3, r3
   1d872:	7123      	strb	r3, [r4, #4]
   1d874:	b98b      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d876:	78e3      	ldrb	r3, [r4, #3]
   1d878:	3301      	adds	r3, #1
   1d87a:	b2db      	uxtb	r3, r3
   1d87c:	70e3      	strb	r3, [r4, #3]
   1d87e:	b963      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d880:	78a3      	ldrb	r3, [r4, #2]
   1d882:	3301      	adds	r3, #1
   1d884:	b2db      	uxtb	r3, r3
   1d886:	70a3      	strb	r3, [r4, #2]
   1d888:	b93b      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d88a:	7863      	ldrb	r3, [r4, #1]
   1d88c:	3301      	adds	r3, #1
   1d88e:	b2db      	uxtb	r3, r3
   1d890:	7063      	strb	r3, [r4, #1]
   1d892:	b913      	cbnz	r3, 1d89a <ctr_drbg_update_internal+0xc2>
   1d894:	7823      	ldrb	r3, [r4, #0]
   1d896:	3301      	adds	r3, #1
   1d898:	7023      	strb	r3, [r4, #0]
   1d89a:	4633      	mov	r3, r6
   1d89c:	4622      	mov	r2, r4
   1d89e:	2101      	movs	r1, #1
   1d8a0:	4640      	mov	r0, r8
   1d8a2:	f001 f883 	bl	1e9ac <cc_mbedtls_aes_crypt_ecb>
   1d8a6:	4607      	mov	r7, r0
   1d8a8:	2800      	cmp	r0, #0
   1d8aa:	d12b      	bne.n	1d904 <ctr_drbg_update_internal+0x12c>
   1d8ac:	3610      	adds	r6, #16
   1d8ae:	ab08      	add	r3, sp, #32
   1d8b0:	429e      	cmp	r6, r3
   1d8b2:	d19e      	bne.n	1d7f2 <ctr_drbg_update_internal+0x1a>
   1d8b4:	9e01      	ldr	r6, [sp, #4]
   1d8b6:	686a      	ldr	r2, [r5, #4]
   1d8b8:	9f00      	ldr	r7, [sp, #0]
   1d8ba:	6829      	ldr	r1, [r5, #0]
   1d8bc:	68ab      	ldr	r3, [r5, #8]
   1d8be:	4072      	eors	r2, r6
   1d8c0:	9e02      	ldr	r6, [sp, #8]
   1d8c2:	9201      	str	r2, [sp, #4]
   1d8c4:	4079      	eors	r1, r7
   1d8c6:	4073      	eors	r3, r6
   1d8c8:	9100      	str	r1, [sp, #0]
   1d8ca:	9e03      	ldr	r6, [sp, #12]
   1d8cc:	68e9      	ldr	r1, [r5, #12]
   1d8ce:	692a      	ldr	r2, [r5, #16]
   1d8d0:	9302      	str	r3, [sp, #8]
   1d8d2:	4071      	eors	r1, r6
   1d8d4:	9e04      	ldr	r6, [sp, #16]
   1d8d6:	696b      	ldr	r3, [r5, #20]
   1d8d8:	9103      	str	r1, [sp, #12]
   1d8da:	4056      	eors	r6, r2
   1d8dc:	9a05      	ldr	r2, [sp, #20]
   1d8de:	9604      	str	r6, [sp, #16]
   1d8e0:	ea83 0102 	eor.w	r1, r3, r2
   1d8e4:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1d8e8:	9d06      	ldr	r5, [sp, #24]
   1d8ea:	9105      	str	r1, [sp, #20]
   1d8ec:	4055      	eors	r5, r2
   1d8ee:	9a07      	ldr	r2, [sp, #28]
   1d8f0:	4640      	mov	r0, r8
   1d8f2:	4053      	eors	r3, r2
   1d8f4:	4669      	mov	r1, sp
   1d8f6:	2280      	movs	r2, #128	; 0x80
   1d8f8:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1d8fc:	f001 f83c 	bl	1e978 <cc_mbedtls_aes_setkey_enc>
   1d900:	4607      	mov	r7, r0
   1d902:	b138      	cbz	r0, 1d914 <ctr_drbg_update_internal+0x13c>
   1d904:	4668      	mov	r0, sp
   1d906:	2120      	movs	r1, #32
   1d908:	f7ff fe1c 	bl	1d544 <mbedtls_platform_zeroize>
   1d90c:	4638      	mov	r0, r7
   1d90e:	b008      	add	sp, #32
   1d910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d914:	2210      	movs	r2, #16
   1d916:	4620      	mov	r0, r4
   1d918:	eb0d 0102 	add.w	r1, sp, r2
   1d91c:	f006 ffec 	bl	248f8 <memcpy>
   1d920:	e7f0      	b.n	1d904 <ctr_drbg_update_internal+0x12c>
   1d922:	bf00      	nop

0001d924 <mbedtls_ctr_drbg_reseed_internal>:
   1d924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d928:	4604      	mov	r4, r0
   1d92a:	6980      	ldr	r0, [r0, #24]
   1d92c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1d930:	d852      	bhi.n	1d9d8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d932:	461d      	mov	r5, r3
   1d934:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1d938:	42ab      	cmp	r3, r5
   1d93a:	d34d      	bcc.n	1d9d8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d93c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1d940:	1a18      	subs	r0, r3, r0
   1d942:	4290      	cmp	r0, r2
   1d944:	4616      	mov	r6, r2
   1d946:	d347      	bcc.n	1d9d8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d948:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1d9e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1d94c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1d950:	460f      	mov	r7, r1
   1d952:	4648      	mov	r0, r9
   1d954:	2100      	movs	r1, #0
   1d956:	f006 fff7 	bl	24948 <memset>
   1d95a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1d95e:	69a2      	ldr	r2, [r4, #24]
   1d960:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1d964:	4649      	mov	r1, r9
   1d966:	4798      	blx	r3
   1d968:	2800      	cmp	r0, #0
   1d96a:	d138      	bne.n	1d9de <mbedtls_ctr_drbg_reseed_internal+0xba>
   1d96c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1d970:	b13d      	cbz	r5, 1d982 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1d972:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1d976:	462a      	mov	r2, r5
   1d978:	eb09 0108 	add.w	r1, r9, r8
   1d97c:	4798      	blx	r3
   1d97e:	bb70      	cbnz	r0, 1d9de <mbedtls_ctr_drbg_reseed_internal+0xba>
   1d980:	44a8      	add	r8, r5
   1d982:	b107      	cbz	r7, 1d986 <mbedtls_ctr_drbg_reseed_internal+0x62>
   1d984:	b9c6      	cbnz	r6, 1d9b8 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1d986:	4917      	ldr	r1, [pc, #92]	; (1d9e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d988:	4642      	mov	r2, r8
   1d98a:	4608      	mov	r0, r1
   1d98c:	f7ff fde4 	bl	1d558 <block_cipher_df>
   1d990:	4605      	mov	r5, r0
   1d992:	b138      	cbz	r0, 1d9a4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1d994:	4813      	ldr	r0, [pc, #76]	; (1d9e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d996:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1d99a:	f7ff fdd3 	bl	1d544 <mbedtls_platform_zeroize>
   1d99e:	4628      	mov	r0, r5
   1d9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d9a4:	490f      	ldr	r1, [pc, #60]	; (1d9e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d9a6:	4620      	mov	r0, r4
   1d9a8:	f7ff ff16 	bl	1d7d8 <ctr_drbg_update_internal>
   1d9ac:	4605      	mov	r5, r0
   1d9ae:	2800      	cmp	r0, #0
   1d9b0:	d1f0      	bne.n	1d994 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d9b2:	2301      	movs	r3, #1
   1d9b4:	6123      	str	r3, [r4, #16]
   1d9b6:	e7ed      	b.n	1d994 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d9b8:	4639      	mov	r1, r7
   1d9ba:	eb09 0008 	add.w	r0, r9, r8
   1d9be:	4632      	mov	r2, r6
   1d9c0:	f006 ff9a 	bl	248f8 <memcpy>
   1d9c4:	4907      	ldr	r1, [pc, #28]	; (1d9e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d9c6:	44b0      	add	r8, r6
   1d9c8:	4642      	mov	r2, r8
   1d9ca:	4608      	mov	r0, r1
   1d9cc:	f7ff fdc4 	bl	1d558 <block_cipher_df>
   1d9d0:	4605      	mov	r5, r0
   1d9d2:	2800      	cmp	r0, #0
   1d9d4:	d1de      	bne.n	1d994 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d9d6:	e7e5      	b.n	1d9a4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1d9d8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1d9dc:	e7df      	b.n	1d99e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1d9de:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1d9e2:	e7dc      	b.n	1d99e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1d9e4:	20002e98 	.word	0x20002e98

0001d9e8 <cc_mbedtls_ctr_drbg_init>:
   1d9e8:	b510      	push	{r4, lr}
   1d9ea:	22a4      	movs	r2, #164	; 0xa4
   1d9ec:	4604      	mov	r4, r0
   1d9ee:	2100      	movs	r1, #0
   1d9f0:	f006 ffaa 	bl	24948 <memset>
   1d9f4:	4b06      	ldr	r3, [pc, #24]	; (1da10 <cc_mbedtls_ctr_drbg_init+0x28>)
   1d9f6:	f04f 31ff 	mov.w	r1, #4294967295
   1d9fa:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1d9fe:	6121      	str	r1, [r4, #16]
   1da00:	61e2      	str	r2, [r4, #28]
   1da02:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1da06:	681b      	ldr	r3, [r3, #0]
   1da08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1da0c:	4718      	bx	r3
   1da0e:	bf00      	nop
   1da10:	2000065c 	.word	0x2000065c

0001da14 <cc_mbedtls_ctr_drbg_seed>:
   1da14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da18:	b085      	sub	sp, #20
   1da1a:	4605      	mov	r5, r0
   1da1c:	460f      	mov	r7, r1
   1da1e:	4616      	mov	r6, r2
   1da20:	4668      	mov	r0, sp
   1da22:	2210      	movs	r2, #16
   1da24:	2100      	movs	r1, #0
   1da26:	4699      	mov	r9, r3
   1da28:	f006 ff8e 	bl	24948 <memset>
   1da2c:	4b1d      	ldr	r3, [pc, #116]	; (1daa4 <cc_mbedtls_ctr_drbg_seed+0x90>)
   1da2e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1da32:	681b      	ldr	r3, [r3, #0]
   1da34:	4640      	mov	r0, r8
   1da36:	4798      	blx	r3
   1da38:	b120      	cbz	r0, 1da44 <cc_mbedtls_ctr_drbg_seed+0x30>
   1da3a:	4604      	mov	r4, r0
   1da3c:	4620      	mov	r0, r4
   1da3e:	b005      	add	sp, #20
   1da40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1da44:	f105 0420 	add.w	r4, r5, #32
   1da48:	4620      	mov	r0, r4
   1da4a:	f000 ff7f 	bl	1e94c <cc_mbedtls_aes_init>
   1da4e:	69aa      	ldr	r2, [r5, #24]
   1da50:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1da54:	692e      	ldr	r6, [r5, #16]
   1da56:	b9e2      	cbnz	r2, 1da92 <cc_mbedtls_ctr_drbg_seed+0x7e>
   1da58:	2220      	movs	r2, #32
   1da5a:	2e00      	cmp	r6, #0
   1da5c:	61aa      	str	r2, [r5, #24]
   1da5e:	db1f      	blt.n	1daa0 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1da60:	4620      	mov	r0, r4
   1da62:	4669      	mov	r1, sp
   1da64:	2280      	movs	r2, #128	; 0x80
   1da66:	f000 ff87 	bl	1e978 <cc_mbedtls_aes_setkey_enc>
   1da6a:	4604      	mov	r4, r0
   1da6c:	b930      	cbnz	r0, 1da7c <cc_mbedtls_ctr_drbg_seed+0x68>
   1da6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1da70:	4633      	mov	r3, r6
   1da72:	4649      	mov	r1, r9
   1da74:	4628      	mov	r0, r5
   1da76:	f7ff ff55 	bl	1d924 <mbedtls_ctr_drbg_reseed_internal>
   1da7a:	4604      	mov	r4, r0
   1da7c:	4b0a      	ldr	r3, [pc, #40]	; (1daa8 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1da7e:	4640      	mov	r0, r8
   1da80:	681b      	ldr	r3, [r3, #0]
   1da82:	4798      	blx	r3
   1da84:	2800      	cmp	r0, #0
   1da86:	bf18      	it	ne
   1da88:	4604      	movne	r4, r0
   1da8a:	4620      	mov	r0, r4
   1da8c:	b005      	add	sp, #20
   1da8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1da92:	2e00      	cmp	r6, #0
   1da94:	dae4      	bge.n	1da60 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1da96:	2a17      	cmp	r2, #23
   1da98:	d802      	bhi.n	1daa0 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1da9a:	1c53      	adds	r3, r2, #1
   1da9c:	085e      	lsrs	r6, r3, #1
   1da9e:	e7df      	b.n	1da60 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1daa0:	2600      	movs	r6, #0
   1daa2:	e7dd      	b.n	1da60 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1daa4:	20000660 	.word	0x20000660
   1daa8:	20000664 	.word	0x20000664

0001daac <cc_mbedtls_ctr_drbg_random_with_add>:
   1daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dab0:	b08d      	sub	sp, #52	; 0x34
   1dab2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1dab6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1daba:	f200 80e4 	bhi.w	1dc86 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1dabe:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1dac2:	f200 80dd 	bhi.w	1dc80 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1dac6:	4604      	mov	r4, r0
   1dac8:	4615      	mov	r5, r2
   1daca:	460e      	mov	r6, r1
   1dacc:	2220      	movs	r2, #32
   1dace:	2100      	movs	r1, #0
   1dad0:	a804      	add	r0, sp, #16
   1dad2:	461f      	mov	r7, r3
   1dad4:	f006 ff38 	bl	24948 <memset>
   1dad8:	4b6c      	ldr	r3, [pc, #432]	; (1dc8c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1dada:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1dade:	681b      	ldr	r3, [r3, #0]
   1dae0:	4648      	mov	r0, r9
   1dae2:	4798      	blx	r3
   1dae4:	4683      	mov	fp, r0
   1dae6:	2800      	cmp	r0, #0
   1dae8:	f040 8093 	bne.w	1dc12 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1daec:	6922      	ldr	r2, [r4, #16]
   1daee:	69e3      	ldr	r3, [r4, #28]
   1daf0:	429a      	cmp	r2, r3
   1daf2:	f300 8092 	bgt.w	1dc1a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1daf6:	6963      	ldr	r3, [r4, #20]
   1daf8:	2b00      	cmp	r3, #0
   1dafa:	f040 808e 	bne.w	1dc1a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1dafe:	f1b8 0f00 	cmp.w	r8, #0
   1db02:	f040 80a9 	bne.w	1dc58 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1db06:	f8df a188 	ldr.w	sl, [pc, #392]	; 1dc90 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1db0a:	466f      	mov	r7, sp
   1db0c:	2d00      	cmp	r5, #0
   1db0e:	f000 8098 	beq.w	1dc42 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1db12:	f104 0820 	add.w	r8, r4, #32
   1db16:	466f      	mov	r7, sp
   1db18:	e00e      	b.n	1db38 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1db1a:	2d10      	cmp	r5, #16
   1db1c:	46ab      	mov	fp, r5
   1db1e:	bf28      	it	cs
   1db20:	f04f 0b10 	movcs.w	fp, #16
   1db24:	4630      	mov	r0, r6
   1db26:	465a      	mov	r2, fp
   1db28:	4639      	mov	r1, r7
   1db2a:	f006 fee5 	bl	248f8 <memcpy>
   1db2e:	ebb5 050b 	subs.w	r5, r5, fp
   1db32:	445e      	add	r6, fp
   1db34:	f000 8085 	beq.w	1dc42 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1db38:	7be3      	ldrb	r3, [r4, #15]
   1db3a:	3301      	adds	r3, #1
   1db3c:	b2db      	uxtb	r3, r3
   1db3e:	73e3      	strb	r3, [r4, #15]
   1db40:	2b00      	cmp	r3, #0
   1db42:	d14d      	bne.n	1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db44:	7ba3      	ldrb	r3, [r4, #14]
   1db46:	3301      	adds	r3, #1
   1db48:	b2db      	uxtb	r3, r3
   1db4a:	73a3      	strb	r3, [r4, #14]
   1db4c:	2b00      	cmp	r3, #0
   1db4e:	d147      	bne.n	1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db50:	7b63      	ldrb	r3, [r4, #13]
   1db52:	3301      	adds	r3, #1
   1db54:	b2db      	uxtb	r3, r3
   1db56:	7363      	strb	r3, [r4, #13]
   1db58:	2b00      	cmp	r3, #0
   1db5a:	d141      	bne.n	1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db5c:	7b23      	ldrb	r3, [r4, #12]
   1db5e:	3301      	adds	r3, #1
   1db60:	b2db      	uxtb	r3, r3
   1db62:	7323      	strb	r3, [r4, #12]
   1db64:	2b00      	cmp	r3, #0
   1db66:	d13b      	bne.n	1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db68:	7ae3      	ldrb	r3, [r4, #11]
   1db6a:	3301      	adds	r3, #1
   1db6c:	b2db      	uxtb	r3, r3
   1db6e:	72e3      	strb	r3, [r4, #11]
   1db70:	2b00      	cmp	r3, #0
   1db72:	d135      	bne.n	1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db74:	7aa3      	ldrb	r3, [r4, #10]
   1db76:	3301      	adds	r3, #1
   1db78:	b2db      	uxtb	r3, r3
   1db7a:	72a3      	strb	r3, [r4, #10]
   1db7c:	2b00      	cmp	r3, #0
   1db7e:	d12f      	bne.n	1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db80:	7a63      	ldrb	r3, [r4, #9]
   1db82:	3301      	adds	r3, #1
   1db84:	b2db      	uxtb	r3, r3
   1db86:	7263      	strb	r3, [r4, #9]
   1db88:	bb53      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db8a:	7a23      	ldrb	r3, [r4, #8]
   1db8c:	3301      	adds	r3, #1
   1db8e:	b2db      	uxtb	r3, r3
   1db90:	7223      	strb	r3, [r4, #8]
   1db92:	bb2b      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db94:	79e3      	ldrb	r3, [r4, #7]
   1db96:	3301      	adds	r3, #1
   1db98:	b2db      	uxtb	r3, r3
   1db9a:	71e3      	strb	r3, [r4, #7]
   1db9c:	bb03      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1db9e:	79a3      	ldrb	r3, [r4, #6]
   1dba0:	3301      	adds	r3, #1
   1dba2:	b2db      	uxtb	r3, r3
   1dba4:	71a3      	strb	r3, [r4, #6]
   1dba6:	b9db      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1dba8:	7963      	ldrb	r3, [r4, #5]
   1dbaa:	3301      	adds	r3, #1
   1dbac:	b2db      	uxtb	r3, r3
   1dbae:	7163      	strb	r3, [r4, #5]
   1dbb0:	b9b3      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1dbb2:	7923      	ldrb	r3, [r4, #4]
   1dbb4:	3301      	adds	r3, #1
   1dbb6:	b2db      	uxtb	r3, r3
   1dbb8:	7123      	strb	r3, [r4, #4]
   1dbba:	b98b      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1dbbc:	78e3      	ldrb	r3, [r4, #3]
   1dbbe:	3301      	adds	r3, #1
   1dbc0:	b2db      	uxtb	r3, r3
   1dbc2:	70e3      	strb	r3, [r4, #3]
   1dbc4:	b963      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1dbc6:	78a3      	ldrb	r3, [r4, #2]
   1dbc8:	3301      	adds	r3, #1
   1dbca:	b2db      	uxtb	r3, r3
   1dbcc:	70a3      	strb	r3, [r4, #2]
   1dbce:	b93b      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1dbd0:	7863      	ldrb	r3, [r4, #1]
   1dbd2:	3301      	adds	r3, #1
   1dbd4:	b2db      	uxtb	r3, r3
   1dbd6:	7063      	strb	r3, [r4, #1]
   1dbd8:	b913      	cbnz	r3, 1dbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1dbda:	7823      	ldrb	r3, [r4, #0]
   1dbdc:	3301      	adds	r3, #1
   1dbde:	7023      	strb	r3, [r4, #0]
   1dbe0:	463b      	mov	r3, r7
   1dbe2:	4622      	mov	r2, r4
   1dbe4:	2101      	movs	r1, #1
   1dbe6:	4640      	mov	r0, r8
   1dbe8:	f000 fee0 	bl	1e9ac <cc_mbedtls_aes_crypt_ecb>
   1dbec:	4683      	mov	fp, r0
   1dbee:	2800      	cmp	r0, #0
   1dbf0:	d093      	beq.n	1db1a <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1dbf2:	f8da 3000 	ldr.w	r3, [sl]
   1dbf6:	4648      	mov	r0, r9
   1dbf8:	4798      	blx	r3
   1dbfa:	2120      	movs	r1, #32
   1dbfc:	4603      	mov	r3, r0
   1dbfe:	a804      	add	r0, sp, #16
   1dc00:	2b00      	cmp	r3, #0
   1dc02:	bf18      	it	ne
   1dc04:	469b      	movne	fp, r3
   1dc06:	f7ff fc9d 	bl	1d544 <mbedtls_platform_zeroize>
   1dc0a:	4638      	mov	r0, r7
   1dc0c:	2110      	movs	r1, #16
   1dc0e:	f7ff fc99 	bl	1d544 <mbedtls_platform_zeroize>
   1dc12:	4658      	mov	r0, fp
   1dc14:	b00d      	add	sp, #52	; 0x34
   1dc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc1a:	4642      	mov	r2, r8
   1dc1c:	4639      	mov	r1, r7
   1dc1e:	2300      	movs	r3, #0
   1dc20:	4620      	mov	r0, r4
   1dc22:	f7ff fe7f 	bl	1d924 <mbedtls_ctr_drbg_reseed_internal>
   1dc26:	f8df a068 	ldr.w	sl, [pc, #104]	; 1dc90 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1dc2a:	2800      	cmp	r0, #0
   1dc2c:	f43f af6d 	beq.w	1db0a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1dc30:	f8da 3000 	ldr.w	r3, [sl]
   1dc34:	4648      	mov	r0, r9
   1dc36:	4798      	blx	r3
   1dc38:	4683      	mov	fp, r0
   1dc3a:	2800      	cmp	r0, #0
   1dc3c:	f43f af65 	beq.w	1db0a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1dc40:	e7e7      	b.n	1dc12 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1dc42:	a904      	add	r1, sp, #16
   1dc44:	4620      	mov	r0, r4
   1dc46:	f7ff fdc7 	bl	1d7d8 <ctr_drbg_update_internal>
   1dc4a:	4683      	mov	fp, r0
   1dc4c:	2800      	cmp	r0, #0
   1dc4e:	d1d0      	bne.n	1dbf2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1dc50:	6923      	ldr	r3, [r4, #16]
   1dc52:	3301      	adds	r3, #1
   1dc54:	6123      	str	r3, [r4, #16]
   1dc56:	e7cc      	b.n	1dbf2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1dc58:	4642      	mov	r2, r8
   1dc5a:	4639      	mov	r1, r7
   1dc5c:	a804      	add	r0, sp, #16
   1dc5e:	f7ff fc7b 	bl	1d558 <block_cipher_df>
   1dc62:	4683      	mov	fp, r0
   1dc64:	b118      	cbz	r0, 1dc6e <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1dc66:	f8df a028 	ldr.w	sl, [pc, #40]	; 1dc90 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1dc6a:	466f      	mov	r7, sp
   1dc6c:	e7c1      	b.n	1dbf2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1dc6e:	a904      	add	r1, sp, #16
   1dc70:	4620      	mov	r0, r4
   1dc72:	f7ff fdb1 	bl	1d7d8 <ctr_drbg_update_internal>
   1dc76:	4683      	mov	fp, r0
   1dc78:	2800      	cmp	r0, #0
   1dc7a:	f43f af44 	beq.w	1db06 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1dc7e:	e7f2      	b.n	1dc66 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1dc80:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1dc84:	e7c5      	b.n	1dc12 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1dc86:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1dc8a:	e7c2      	b.n	1dc12 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1dc8c:	20000660 	.word	0x20000660
   1dc90:	20000664 	.word	0x20000664

0001dc94 <entropy_update>:
   1dc94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dc98:	2b20      	cmp	r3, #32
   1dc9a:	b08b      	sub	sp, #44	; 0x2c
   1dc9c:	461d      	mov	r5, r3
   1dc9e:	4606      	mov	r6, r0
   1dca0:	4689      	mov	r9, r1
   1dca2:	4690      	mov	r8, r2
   1dca4:	d826      	bhi.n	1dcf4 <entropy_update+0x60>
   1dca6:	b2db      	uxtb	r3, r3
   1dca8:	af02      	add	r7, sp, #8
   1dcaa:	6831      	ldr	r1, [r6, #0]
   1dcac:	f88d 9004 	strb.w	r9, [sp, #4]
   1dcb0:	f88d 3005 	strb.w	r3, [sp, #5]
   1dcb4:	f106 0904 	add.w	r9, r6, #4
   1dcb8:	b921      	cbnz	r1, 1dcc4 <entropy_update+0x30>
   1dcba:	4648      	mov	r0, r9
   1dcbc:	f000 feba 	bl	1ea34 <cc_mbedtls_sha256_starts>
   1dcc0:	4604      	mov	r4, r0
   1dcc2:	b940      	cbnz	r0, 1dcd6 <entropy_update+0x42>
   1dcc4:	2301      	movs	r3, #1
   1dcc6:	6033      	str	r3, [r6, #0]
   1dcc8:	2202      	movs	r2, #2
   1dcca:	a901      	add	r1, sp, #4
   1dccc:	4648      	mov	r0, r9
   1dcce:	f000 fec5 	bl	1ea5c <cc_mbedtls_sha256_update>
   1dcd2:	4604      	mov	r4, r0
   1dcd4:	b138      	cbz	r0, 1dce6 <entropy_update+0x52>
   1dcd6:	4638      	mov	r0, r7
   1dcd8:	2120      	movs	r1, #32
   1dcda:	f7ff fc33 	bl	1d544 <mbedtls_platform_zeroize>
   1dcde:	4620      	mov	r0, r4
   1dce0:	b00b      	add	sp, #44	; 0x2c
   1dce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dce6:	462a      	mov	r2, r5
   1dce8:	4641      	mov	r1, r8
   1dcea:	4648      	mov	r0, r9
   1dcec:	f000 feb6 	bl	1ea5c <cc_mbedtls_sha256_update>
   1dcf0:	4604      	mov	r4, r0
   1dcf2:	e7f0      	b.n	1dcd6 <entropy_update+0x42>
   1dcf4:	af02      	add	r7, sp, #8
   1dcf6:	4619      	mov	r1, r3
   1dcf8:	4610      	mov	r0, r2
   1dcfa:	2300      	movs	r3, #0
   1dcfc:	463a      	mov	r2, r7
   1dcfe:	f000 ffad 	bl	1ec5c <cc_mbedtls_sha256>
   1dd02:	4604      	mov	r4, r0
   1dd04:	2800      	cmp	r0, #0
   1dd06:	d1e6      	bne.n	1dcd6 <entropy_update+0x42>
   1dd08:	2320      	movs	r3, #32
   1dd0a:	461d      	mov	r5, r3
   1dd0c:	46b8      	mov	r8, r7
   1dd0e:	e7cc      	b.n	1dcaa <entropy_update+0x16>

0001dd10 <entropy_gather_internal.part.0>:
   1dd10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd12:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1dd16:	b0a7      	sub	sp, #156	; 0x9c
   1dd18:	2b00      	cmp	r3, #0
   1dd1a:	bfd8      	it	le
   1dd1c:	ae02      	addle	r6, sp, #8
   1dd1e:	dd2c      	ble.n	1dd7a <entropy_gather_internal.part.0+0x6a>
   1dd20:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1dd24:	4605      	mov	r5, r0
   1dd26:	2300      	movs	r3, #0
   1dd28:	ae02      	add	r6, sp, #8
   1dd2a:	9301      	str	r3, [sp, #4]
   1dd2c:	f1a4 0701 	sub.w	r7, r4, #1
   1dd30:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1dd34:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1dd38:	4631      	mov	r1, r6
   1dd3a:	ab01      	add	r3, sp, #4
   1dd3c:	2290      	movs	r2, #144	; 0x90
   1dd3e:	47a0      	blx	r4
   1dd40:	fab7 f787 	clz	r7, r7
   1dd44:	097f      	lsrs	r7, r7, #5
   1dd46:	4604      	mov	r4, r0
   1dd48:	b910      	cbnz	r0, 1dd50 <entropy_gather_internal.part.0+0x40>
   1dd4a:	9b01      	ldr	r3, [sp, #4]
   1dd4c:	b93b      	cbnz	r3, 1dd5e <entropy_gather_internal.part.0+0x4e>
   1dd4e:	b1a7      	cbz	r7, 1dd7a <entropy_gather_internal.part.0+0x6a>
   1dd50:	4630      	mov	r0, r6
   1dd52:	2190      	movs	r1, #144	; 0x90
   1dd54:	f7ff fbf6 	bl	1d544 <mbedtls_platform_zeroize>
   1dd58:	4620      	mov	r0, r4
   1dd5a:	b027      	add	sp, #156	; 0x9c
   1dd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dd5e:	4601      	mov	r1, r0
   1dd60:	4632      	mov	r2, r6
   1dd62:	4628      	mov	r0, r5
   1dd64:	f7ff ff96 	bl	1dc94 <entropy_update>
   1dd68:	b950      	cbnz	r0, 1dd80 <entropy_gather_internal.part.0+0x70>
   1dd6a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1dd6e:	9a01      	ldr	r2, [sp, #4]
   1dd70:	4413      	add	r3, r2
   1dd72:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1dd76:	2f00      	cmp	r7, #0
   1dd78:	d1ea      	bne.n	1dd50 <entropy_gather_internal.part.0+0x40>
   1dd7a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1dd7e:	e7e7      	b.n	1dd50 <entropy_gather_internal.part.0+0x40>
   1dd80:	4604      	mov	r4, r0
   1dd82:	4620      	mov	r0, r4
   1dd84:	b027      	add	sp, #156	; 0x9c
   1dd86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dd88 <cc_mbedtls_entropy_init>:
   1dd88:	b570      	push	{r4, r5, r6, lr}
   1dd8a:	2500      	movs	r5, #0
   1dd8c:	4604      	mov	r4, r0
   1dd8e:	4629      	mov	r1, r5
   1dd90:	2214      	movs	r2, #20
   1dd92:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1dd96:	30f8      	adds	r0, #248	; 0xf8
   1dd98:	f006 fdd6 	bl	24948 <memset>
   1dd9c:	4b15      	ldr	r3, [pc, #84]	; (1ddf4 <cc_mbedtls_entropy_init+0x6c>)
   1dd9e:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1dda2:	681b      	ldr	r3, [r3, #0]
   1dda4:	4630      	mov	r0, r6
   1dda6:	4798      	blx	r3
   1dda8:	4620      	mov	r0, r4
   1ddaa:	f840 5b04 	str.w	r5, [r0], #4
   1ddae:	f000 fe27 	bl	1ea00 <cc_mbedtls_sha256_init>
   1ddb2:	4b11      	ldr	r3, [pc, #68]	; (1ddf8 <cc_mbedtls_entropy_init+0x70>)
   1ddb4:	4630      	mov	r0, r6
   1ddb6:	681b      	ldr	r3, [r3, #0]
   1ddb8:	4798      	blx	r3
   1ddba:	b9c8      	cbnz	r0, 1ddf0 <cc_mbedtls_entropy_init+0x68>
   1ddbc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1ddc0:	42ab      	cmp	r3, r5
   1ddc2:	dc0f      	bgt.n	1dde4 <cc_mbedtls_entropy_init+0x5c>
   1ddc4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1ddc8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1ddcc:	490b      	ldr	r1, [pc, #44]	; (1ddfc <cc_mbedtls_entropy_init+0x74>)
   1ddce:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1ddd2:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1ddd6:	3301      	adds	r3, #1
   1ddd8:	2020      	movs	r0, #32
   1ddda:	2101      	movs	r1, #1
   1dddc:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1dde0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1dde4:	4b06      	ldr	r3, [pc, #24]	; (1de00 <cc_mbedtls_entropy_init+0x78>)
   1dde6:	4630      	mov	r0, r6
   1dde8:	681b      	ldr	r3, [r3, #0]
   1ddea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ddee:	4718      	bx	r3
   1ddf0:	bd70      	pop	{r4, r5, r6, pc}
   1ddf2:	bf00      	nop
   1ddf4:	2000065c 	.word	0x2000065c
   1ddf8:	20000660 	.word	0x20000660
   1ddfc:	0001e851 	.word	0x0001e851
   1de00:	20000664 	.word	0x20000664

0001de04 <cc_mbedtls_entropy_func>:
   1de04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de08:	2a20      	cmp	r2, #32
   1de0a:	b088      	sub	sp, #32
   1de0c:	d876      	bhi.n	1defc <cc_mbedtls_entropy_func+0xf8>
   1de0e:	4b3d      	ldr	r3, [pc, #244]	; (1df04 <cc_mbedtls_entropy_func+0x100>)
   1de10:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1de14:	681b      	ldr	r3, [r3, #0]
   1de16:	4604      	mov	r4, r0
   1de18:	4648      	mov	r0, r9
   1de1a:	4617      	mov	r7, r2
   1de1c:	4688      	mov	r8, r1
   1de1e:	4798      	blx	r3
   1de20:	4605      	mov	r5, r0
   1de22:	bba0      	cbnz	r0, 1de8e <cc_mbedtls_entropy_func+0x8a>
   1de24:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1de28:	f240 1601 	movw	r6, #257	; 0x101
   1de2c:	e001      	b.n	1de32 <cc_mbedtls_entropy_func+0x2e>
   1de2e:	3e01      	subs	r6, #1
   1de30:	d060      	beq.n	1def4 <cc_mbedtls_entropy_func+0xf0>
   1de32:	4620      	mov	r0, r4
   1de34:	b37b      	cbz	r3, 1de96 <cc_mbedtls_entropy_func+0x92>
   1de36:	f7ff ff6b 	bl	1dd10 <entropy_gather_internal.part.0>
   1de3a:	4605      	mov	r5, r0
   1de3c:	bb68      	cbnz	r0, 1de9a <cc_mbedtls_entropy_func+0x96>
   1de3e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1de42:	2b00      	cmp	r3, #0
   1de44:	ddf3      	ble.n	1de2e <cc_mbedtls_entropy_func+0x2a>
   1de46:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1de4a:	4290      	cmp	r0, r2
   1de4c:	d3ef      	bcc.n	1de2e <cc_mbedtls_entropy_func+0x2a>
   1de4e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1de52:	2a01      	cmp	r2, #1
   1de54:	d1eb      	bne.n	1de2e <cc_mbedtls_entropy_func+0x2a>
   1de56:	281f      	cmp	r0, #31
   1de58:	d9e9      	bls.n	1de2e <cc_mbedtls_entropy_func+0x2a>
   1de5a:	466e      	mov	r6, sp
   1de5c:	4629      	mov	r1, r5
   1de5e:	2220      	movs	r2, #32
   1de60:	4630      	mov	r0, r6
   1de62:	f104 0a04 	add.w	sl, r4, #4
   1de66:	f006 fd6f 	bl	24948 <memset>
   1de6a:	4631      	mov	r1, r6
   1de6c:	4650      	mov	r0, sl
   1de6e:	f000 fe1f 	bl	1eab0 <cc_mbedtls_sha256_finish>
   1de72:	4605      	mov	r5, r0
   1de74:	b198      	cbz	r0, 1de9e <cc_mbedtls_entropy_func+0x9a>
   1de76:	4630      	mov	r0, r6
   1de78:	2120      	movs	r1, #32
   1de7a:	f7ff fb63 	bl	1d544 <mbedtls_platform_zeroize>
   1de7e:	4b22      	ldr	r3, [pc, #136]	; (1df08 <cc_mbedtls_entropy_func+0x104>)
   1de80:	4648      	mov	r0, r9
   1de82:	681b      	ldr	r3, [r3, #0]
   1de84:	4798      	blx	r3
   1de86:	2800      	cmp	r0, #0
   1de88:	bf18      	it	ne
   1de8a:	f06f 051d 	mvnne.w	r5, #29
   1de8e:	4628      	mov	r0, r5
   1de90:	b008      	add	sp, #32
   1de92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1de96:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1de9a:	466e      	mov	r6, sp
   1de9c:	e7eb      	b.n	1de76 <cc_mbedtls_entropy_func+0x72>
   1de9e:	4650      	mov	r0, sl
   1dea0:	f000 fdc2 	bl	1ea28 <cc_mbedtls_sha256_free>
   1dea4:	4650      	mov	r0, sl
   1dea6:	f000 fdab 	bl	1ea00 <cc_mbedtls_sha256_init>
   1deaa:	4629      	mov	r1, r5
   1deac:	4650      	mov	r0, sl
   1deae:	f000 fdc1 	bl	1ea34 <cc_mbedtls_sha256_starts>
   1deb2:	4605      	mov	r5, r0
   1deb4:	2800      	cmp	r0, #0
   1deb6:	d1de      	bne.n	1de76 <cc_mbedtls_entropy_func+0x72>
   1deb8:	4650      	mov	r0, sl
   1deba:	2220      	movs	r2, #32
   1debc:	4631      	mov	r1, r6
   1debe:	f000 fdcd 	bl	1ea5c <cc_mbedtls_sha256_update>
   1dec2:	4605      	mov	r5, r0
   1dec4:	2800      	cmp	r0, #0
   1dec6:	d1d6      	bne.n	1de76 <cc_mbedtls_entropy_func+0x72>
   1dec8:	4603      	mov	r3, r0
   1deca:	4632      	mov	r2, r6
   1decc:	2120      	movs	r1, #32
   1dece:	4630      	mov	r0, r6
   1ded0:	f000 fec4 	bl	1ec5c <cc_mbedtls_sha256>
   1ded4:	4605      	mov	r5, r0
   1ded6:	2800      	cmp	r0, #0
   1ded8:	d1cd      	bne.n	1de76 <cc_mbedtls_entropy_func+0x72>
   1deda:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1dede:	2b00      	cmp	r3, #0
   1dee0:	bfc4      	itt	gt
   1dee2:	2300      	movgt	r3, #0
   1dee4:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1dee8:	463a      	mov	r2, r7
   1deea:	4640      	mov	r0, r8
   1deec:	4631      	mov	r1, r6
   1deee:	f006 fd03 	bl	248f8 <memcpy>
   1def2:	e7c0      	b.n	1de76 <cc_mbedtls_entropy_func+0x72>
   1def4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1def8:	466e      	mov	r6, sp
   1defa:	e7bc      	b.n	1de76 <cc_mbedtls_entropy_func+0x72>
   1defc:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1df00:	e7c5      	b.n	1de8e <cc_mbedtls_entropy_func+0x8a>
   1df02:	bf00      	nop
   1df04:	20000660 	.word	0x20000660
   1df08:	20000664 	.word	0x20000664

0001df0c <RndStartupTest.constprop.0>:
   1df0c:	b530      	push	{r4, r5, lr}
   1df0e:	b0c3      	sub	sp, #268	; 0x10c
   1df10:	22dc      	movs	r2, #220	; 0xdc
   1df12:	2100      	movs	r1, #0
   1df14:	a80b      	add	r0, sp, #44	; 0x2c
   1df16:	f006 fd17 	bl	24948 <memset>
   1df1a:	2228      	movs	r2, #40	; 0x28
   1df1c:	2100      	movs	r1, #0
   1df1e:	a801      	add	r0, sp, #4
   1df20:	f006 fd12 	bl	24948 <memset>
   1df24:	a801      	add	r0, sp, #4
   1df26:	f000 fec1 	bl	1ecac <RNG_PLAT_SetUserRngParameters>
   1df2a:	4604      	mov	r4, r0
   1df2c:	b110      	cbz	r0, 1df34 <RndStartupTest.constprop.0+0x28>
   1df2e:	4620      	mov	r0, r4
   1df30:	b043      	add	sp, #268	; 0x10c
   1df32:	bd30      	pop	{r4, r5, pc}
   1df34:	4d18      	ldr	r5, [pc, #96]	; (1df98 <RndStartupTest.constprop.0+0x8c>)
   1df36:	f04f 31ff 	mov.w	r1, #4294967295
   1df3a:	6828      	ldr	r0, [r5, #0]
   1df3c:	f000 f93c 	bl	1e1b8 <CC_PalMutexLock>
   1df40:	4604      	mov	r4, r0
   1df42:	b9c0      	cbnz	r0, 1df76 <RndStartupTest.constprop.0+0x6a>
   1df44:	2000      	movs	r0, #0
   1df46:	f000 f967 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1df4a:	bb00      	cbnz	r0, 1df8e <RndStartupTest.constprop.0+0x82>
   1df4c:	4a13      	ldr	r2, [pc, #76]	; (1df9c <RndStartupTest.constprop.0+0x90>)
   1df4e:	a901      	add	r1, sp, #4
   1df50:	a80b      	add	r0, sp, #44	; 0x2c
   1df52:	f000 fc6f 	bl	1e834 <LLF_RND_RunTrngStartupTest>
   1df56:	4604      	mov	r4, r0
   1df58:	2001      	movs	r0, #1
   1df5a:	f000 f95d 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1df5e:	b990      	cbnz	r0, 1df86 <RndStartupTest.constprop.0+0x7a>
   1df60:	6828      	ldr	r0, [r5, #0]
   1df62:	f000 f931 	bl	1e1c8 <CC_PalMutexUnlock>
   1df66:	2800      	cmp	r0, #0
   1df68:	d0e1      	beq.n	1df2e <RndStartupTest.constprop.0+0x22>
   1df6a:	480d      	ldr	r0, [pc, #52]	; (1dfa0 <RndStartupTest.constprop.0+0x94>)
   1df6c:	f7ff f9d8 	bl	1d320 <CC_PalAbort>
   1df70:	4620      	mov	r0, r4
   1df72:	b043      	add	sp, #268	; 0x10c
   1df74:	bd30      	pop	{r4, r5, pc}
   1df76:	480b      	ldr	r0, [pc, #44]	; (1dfa4 <RndStartupTest.constprop.0+0x98>)
   1df78:	f7ff f9d2 	bl	1d320 <CC_PalAbort>
   1df7c:	2c01      	cmp	r4, #1
   1df7e:	bf08      	it	eq
   1df80:	2405      	moveq	r4, #5
   1df82:	d0ed      	beq.n	1df60 <RndStartupTest.constprop.0+0x54>
   1df84:	e7de      	b.n	1df44 <RndStartupTest.constprop.0+0x38>
   1df86:	4808      	ldr	r0, [pc, #32]	; (1dfa8 <RndStartupTest.constprop.0+0x9c>)
   1df88:	f7ff f9ca 	bl	1d320 <CC_PalAbort>
   1df8c:	e7e8      	b.n	1df60 <RndStartupTest.constprop.0+0x54>
   1df8e:	4807      	ldr	r0, [pc, #28]	; (1dfac <RndStartupTest.constprop.0+0xa0>)
   1df90:	f7ff f9c6 	bl	1d320 <CC_PalAbort>
   1df94:	e7da      	b.n	1df4c <RndStartupTest.constprop.0+0x40>
   1df96:	bf00      	nop
   1df98:	20000658 	.word	0x20000658
   1df9c:	20003080 	.word	0x20003080
   1dfa0:	00026ebc 	.word	0x00026ebc
   1dfa4:	00026e64 	.word	0x00026e64
   1dfa8:	00026e9c 	.word	0x00026e9c
   1dfac:	00026e7c 	.word	0x00026e7c

0001dfb0 <CC_LibInit>:
   1dfb0:	b510      	push	{r4, lr}
   1dfb2:	b082      	sub	sp, #8
   1dfb4:	f000 f854 	bl	1e060 <CC_HalInit>
   1dfb8:	b128      	cbz	r0, 1dfc6 <CC_LibInit+0x16>
   1dfba:	f000 f8a3 	bl	1e104 <CC_PalTerminate>
   1dfbe:	2403      	movs	r4, #3
   1dfc0:	4620      	mov	r0, r4
   1dfc2:	b002      	add	sp, #8
   1dfc4:	bd10      	pop	{r4, pc}
   1dfc6:	f000 f86f 	bl	1e0a8 <CC_PalInit>
   1dfca:	b9d0      	cbnz	r0, 1e002 <CC_LibInit+0x52>
   1dfcc:	f000 f924 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1dfd0:	b9d8      	cbnz	r0, 1e00a <CC_LibInit+0x5a>
   1dfd2:	4b1e      	ldr	r3, [pc, #120]	; (1e04c <CC_LibInit+0x9c>)
   1dfd4:	681b      	ldr	r3, [r3, #0]
   1dfd6:	0e1b      	lsrs	r3, r3, #24
   1dfd8:	2bf0      	cmp	r3, #240	; 0xf0
   1dfda:	d10a      	bne.n	1dff2 <CC_LibInit+0x42>
   1dfdc:	4a1c      	ldr	r2, [pc, #112]	; (1e050 <CC_LibInit+0xa0>)
   1dfde:	4b1d      	ldr	r3, [pc, #116]	; (1e054 <CC_LibInit+0xa4>)
   1dfe0:	6812      	ldr	r2, [r2, #0]
   1dfe2:	429a      	cmp	r2, r3
   1dfe4:	d029      	beq.n	1e03a <CC_LibInit+0x8a>
   1dfe6:	f000 f83d 	bl	1e064 <CC_HalTerminate>
   1dfea:	2407      	movs	r4, #7
   1dfec:	f000 f88a 	bl	1e104 <CC_PalTerminate>
   1dff0:	e7e6      	b.n	1dfc0 <CC_LibInit+0x10>
   1dff2:	f000 f837 	bl	1e064 <CC_HalTerminate>
   1dff6:	f000 f885 	bl	1e104 <CC_PalTerminate>
   1dffa:	2406      	movs	r4, #6
   1dffc:	4620      	mov	r0, r4
   1dffe:	b002      	add	sp, #8
   1e000:	bd10      	pop	{r4, pc}
   1e002:	2404      	movs	r4, #4
   1e004:	4620      	mov	r0, r4
   1e006:	b002      	add	sp, #8
   1e008:	bd10      	pop	{r4, pc}
   1e00a:	f000 f82b 	bl	1e064 <CC_HalTerminate>
   1e00e:	f000 f879 	bl	1e104 <CC_PalTerminate>
   1e012:	f7ff ff7b 	bl	1df0c <RndStartupTest.constprop.0>
   1e016:	4604      	mov	r4, r0
   1e018:	b958      	cbnz	r0, 1e032 <CC_LibInit+0x82>
   1e01a:	4602      	mov	r2, r0
   1e01c:	4601      	mov	r1, r0
   1e01e:	f7ff f9a7 	bl	1d370 <nrf_cc3xx_platform_ctr_drbg_init>
   1e022:	b930      	cbnz	r0, 1e032 <CC_LibInit+0x82>
   1e024:	490c      	ldr	r1, [pc, #48]	; (1e058 <CC_LibInit+0xa8>)
   1e026:	ab01      	add	r3, sp, #4
   1e028:	2268      	movs	r2, #104	; 0x68
   1e02a:	f7ff f9d5 	bl	1d3d8 <nrf_cc3xx_platform_ctr_drbg_get>
   1e02e:	2800      	cmp	r0, #0
   1e030:	d0c6      	beq.n	1dfc0 <CC_LibInit+0x10>
   1e032:	2405      	movs	r4, #5
   1e034:	4620      	mov	r0, r4
   1e036:	b002      	add	sp, #8
   1e038:	bd10      	pop	{r4, pc}
   1e03a:	2001      	movs	r0, #1
   1e03c:	f000 f8ec 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1e040:	2800      	cmp	r0, #0
   1e042:	d1e2      	bne.n	1e00a <CC_LibInit+0x5a>
   1e044:	4b05      	ldr	r3, [pc, #20]	; (1e05c <CC_LibInit+0xac>)
   1e046:	6018      	str	r0, [r3, #0]
   1e048:	e7e3      	b.n	1e012 <CC_LibInit+0x62>
   1e04a:	bf00      	nop
   1e04c:	5002b928 	.word	0x5002b928
   1e050:	5002ba24 	.word	0x5002ba24
   1e054:	20e00000 	.word	0x20e00000
   1e058:	20003018 	.word	0x20003018
   1e05c:	5002ba0c 	.word	0x5002ba0c

0001e060 <CC_HalInit>:
   1e060:	2000      	movs	r0, #0
   1e062:	4770      	bx	lr

0001e064 <CC_HalTerminate>:
   1e064:	2000      	movs	r0, #0
   1e066:	4770      	bx	lr

0001e068 <CC_HalClearInterruptBit>:
   1e068:	0543      	lsls	r3, r0, #21
   1e06a:	d503      	bpl.n	1e074 <CC_HalClearInterruptBit+0xc>
   1e06c:	4b03      	ldr	r3, [pc, #12]	; (1e07c <CC_HalClearInterruptBit+0x14>)
   1e06e:	f04f 32ff 	mov.w	r2, #4294967295
   1e072:	601a      	str	r2, [r3, #0]
   1e074:	4b02      	ldr	r3, [pc, #8]	; (1e080 <CC_HalClearInterruptBit+0x18>)
   1e076:	6018      	str	r0, [r3, #0]
   1e078:	4770      	bx	lr
   1e07a:	bf00      	nop
   1e07c:	5002b108 	.word	0x5002b108
   1e080:	5002ba08 	.word	0x5002ba08

0001e084 <CC_HalMaskInterrupt>:
   1e084:	4b01      	ldr	r3, [pc, #4]	; (1e08c <CC_HalMaskInterrupt+0x8>)
   1e086:	6018      	str	r0, [r3, #0]
   1e088:	4770      	bx	lr
   1e08a:	bf00      	nop
   1e08c:	5002ba04 	.word	0x5002ba04

0001e090 <CC_HalWaitInterrupt>:
   1e090:	b108      	cbz	r0, 1e096 <CC_HalWaitInterrupt+0x6>
   1e092:	f000 b86f 	b.w	1e174 <CC_PalWaitInterrupt>
   1e096:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1e09a:	4770      	bx	lr

0001e09c <CC_HalWaitInterruptRND>:
   1e09c:	b108      	cbz	r0, 1e0a2 <CC_HalWaitInterruptRND+0x6>
   1e09e:	f000 b84f 	b.w	1e140 <CC_PalWaitInterruptRND>
   1e0a2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1e0a6:	4770      	bx	lr

0001e0a8 <CC_PalInit>:
   1e0a8:	b510      	push	{r4, lr}
   1e0aa:	4811      	ldr	r0, [pc, #68]	; (1e0f0 <CC_PalInit+0x48>)
   1e0ac:	f000 f870 	bl	1e190 <CC_PalMutexCreate>
   1e0b0:	b100      	cbz	r0, 1e0b4 <CC_PalInit+0xc>
   1e0b2:	bd10      	pop	{r4, pc}
   1e0b4:	480f      	ldr	r0, [pc, #60]	; (1e0f4 <CC_PalInit+0x4c>)
   1e0b6:	f000 f86b 	bl	1e190 <CC_PalMutexCreate>
   1e0ba:	2800      	cmp	r0, #0
   1e0bc:	d1f9      	bne.n	1e0b2 <CC_PalInit+0xa>
   1e0be:	4c0e      	ldr	r4, [pc, #56]	; (1e0f8 <CC_PalInit+0x50>)
   1e0c0:	4620      	mov	r0, r4
   1e0c2:	f000 f865 	bl	1e190 <CC_PalMutexCreate>
   1e0c6:	2800      	cmp	r0, #0
   1e0c8:	d1f3      	bne.n	1e0b2 <CC_PalInit+0xa>
   1e0ca:	4b0c      	ldr	r3, [pc, #48]	; (1e0fc <CC_PalInit+0x54>)
   1e0cc:	480c      	ldr	r0, [pc, #48]	; (1e100 <CC_PalInit+0x58>)
   1e0ce:	601c      	str	r4, [r3, #0]
   1e0d0:	f000 f85e 	bl	1e190 <CC_PalMutexCreate>
   1e0d4:	4601      	mov	r1, r0
   1e0d6:	2800      	cmp	r0, #0
   1e0d8:	d1eb      	bne.n	1e0b2 <CC_PalInit+0xa>
   1e0da:	f000 f82d 	bl	1e138 <CC_PalDmaInit>
   1e0de:	4604      	mov	r4, r0
   1e0e0:	b108      	cbz	r0, 1e0e6 <CC_PalInit+0x3e>
   1e0e2:	4620      	mov	r0, r4
   1e0e4:	bd10      	pop	{r4, pc}
   1e0e6:	f000 f879 	bl	1e1dc <CC_PalPowerSaveModeInit>
   1e0ea:	4620      	mov	r0, r4
   1e0ec:	e7fa      	b.n	1e0e4 <CC_PalInit+0x3c>
   1e0ee:	bf00      	nop
   1e0f0:	20000654 	.word	0x20000654
   1e0f4:	20000648 	.word	0x20000648
   1e0f8:	20000650 	.word	0x20000650
   1e0fc:	20000658 	.word	0x20000658
   1e100:	2000064c 	.word	0x2000064c

0001e104 <CC_PalTerminate>:
   1e104:	b508      	push	{r3, lr}
   1e106:	4808      	ldr	r0, [pc, #32]	; (1e128 <CC_PalTerminate+0x24>)
   1e108:	f000 f84c 	bl	1e1a4 <CC_PalMutexDestroy>
   1e10c:	4807      	ldr	r0, [pc, #28]	; (1e12c <CC_PalTerminate+0x28>)
   1e10e:	f000 f849 	bl	1e1a4 <CC_PalMutexDestroy>
   1e112:	4807      	ldr	r0, [pc, #28]	; (1e130 <CC_PalTerminate+0x2c>)
   1e114:	f000 f846 	bl	1e1a4 <CC_PalMutexDestroy>
   1e118:	4806      	ldr	r0, [pc, #24]	; (1e134 <CC_PalTerminate+0x30>)
   1e11a:	f000 f843 	bl	1e1a4 <CC_PalMutexDestroy>
   1e11e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e122:	f000 b80b 	b.w	1e13c <CC_PalDmaTerminate>
   1e126:	bf00      	nop
   1e128:	20000654 	.word	0x20000654
   1e12c:	20000648 	.word	0x20000648
   1e130:	20000650 	.word	0x20000650
   1e134:	2000064c 	.word	0x2000064c

0001e138 <CC_PalDmaInit>:
   1e138:	2000      	movs	r0, #0
   1e13a:	4770      	bx	lr

0001e13c <CC_PalDmaTerminate>:
   1e13c:	4770      	bx	lr
   1e13e:	bf00      	nop

0001e140 <CC_PalWaitInterruptRND>:
   1e140:	b410      	push	{r4}
   1e142:	4c08      	ldr	r4, [pc, #32]	; (1e164 <CC_PalWaitInterruptRND+0x24>)
   1e144:	4602      	mov	r2, r0
   1e146:	6823      	ldr	r3, [r4, #0]
   1e148:	4213      	tst	r3, r2
   1e14a:	d0fc      	beq.n	1e146 <CC_PalWaitInterruptRND+0x6>
   1e14c:	b121      	cbz	r1, 1e158 <CC_PalWaitInterruptRND+0x18>
   1e14e:	4b06      	ldr	r3, [pc, #24]	; (1e168 <CC_PalWaitInterruptRND+0x28>)
   1e150:	4806      	ldr	r0, [pc, #24]	; (1e16c <CC_PalWaitInterruptRND+0x2c>)
   1e152:	681b      	ldr	r3, [r3, #0]
   1e154:	600b      	str	r3, [r1, #0]
   1e156:	6003      	str	r3, [r0, #0]
   1e158:	4b05      	ldr	r3, [pc, #20]	; (1e170 <CC_PalWaitInterruptRND+0x30>)
   1e15a:	601a      	str	r2, [r3, #0]
   1e15c:	2000      	movs	r0, #0
   1e15e:	bc10      	pop	{r4}
   1e160:	4770      	bx	lr
   1e162:	bf00      	nop
   1e164:	5002ba00 	.word	0x5002ba00
   1e168:	5002b104 	.word	0x5002b104
   1e16c:	5002b108 	.word	0x5002b108
   1e170:	5002ba08 	.word	0x5002ba08

0001e174 <CC_PalWaitInterrupt>:
   1e174:	4904      	ldr	r1, [pc, #16]	; (1e188 <CC_PalWaitInterrupt+0x14>)
   1e176:	4602      	mov	r2, r0
   1e178:	680b      	ldr	r3, [r1, #0]
   1e17a:	421a      	tst	r2, r3
   1e17c:	d0fc      	beq.n	1e178 <CC_PalWaitInterrupt+0x4>
   1e17e:	4b03      	ldr	r3, [pc, #12]	; (1e18c <CC_PalWaitInterrupt+0x18>)
   1e180:	2000      	movs	r0, #0
   1e182:	601a      	str	r2, [r3, #0]
   1e184:	4770      	bx	lr
   1e186:	bf00      	nop
   1e188:	5002ba00 	.word	0x5002ba00
   1e18c:	5002ba08 	.word	0x5002ba08

0001e190 <CC_PalMutexCreate>:
   1e190:	b508      	push	{r3, lr}
   1e192:	4b03      	ldr	r3, [pc, #12]	; (1e1a0 <CC_PalMutexCreate+0x10>)
   1e194:	6802      	ldr	r2, [r0, #0]
   1e196:	681b      	ldr	r3, [r3, #0]
   1e198:	6810      	ldr	r0, [r2, #0]
   1e19a:	4798      	blx	r3
   1e19c:	2000      	movs	r0, #0
   1e19e:	bd08      	pop	{r3, pc}
   1e1a0:	20000608 	.word	0x20000608

0001e1a4 <CC_PalMutexDestroy>:
   1e1a4:	b508      	push	{r3, lr}
   1e1a6:	4b03      	ldr	r3, [pc, #12]	; (1e1b4 <CC_PalMutexDestroy+0x10>)
   1e1a8:	6802      	ldr	r2, [r0, #0]
   1e1aa:	685b      	ldr	r3, [r3, #4]
   1e1ac:	6810      	ldr	r0, [r2, #0]
   1e1ae:	4798      	blx	r3
   1e1b0:	2000      	movs	r0, #0
   1e1b2:	bd08      	pop	{r3, pc}
   1e1b4:	20000608 	.word	0x20000608

0001e1b8 <CC_PalMutexLock>:
   1e1b8:	4b02      	ldr	r3, [pc, #8]	; (1e1c4 <CC_PalMutexLock+0xc>)
   1e1ba:	6802      	ldr	r2, [r0, #0]
   1e1bc:	689b      	ldr	r3, [r3, #8]
   1e1be:	6810      	ldr	r0, [r2, #0]
   1e1c0:	4718      	bx	r3
   1e1c2:	bf00      	nop
   1e1c4:	20000608 	.word	0x20000608

0001e1c8 <CC_PalMutexUnlock>:
   1e1c8:	b508      	push	{r3, lr}
   1e1ca:	4b03      	ldr	r3, [pc, #12]	; (1e1d8 <CC_PalMutexUnlock+0x10>)
   1e1cc:	6802      	ldr	r2, [r0, #0]
   1e1ce:	68db      	ldr	r3, [r3, #12]
   1e1d0:	6810      	ldr	r0, [r2, #0]
   1e1d2:	4798      	blx	r3
   1e1d4:	2000      	movs	r0, #0
   1e1d6:	bd08      	pop	{r3, pc}
   1e1d8:	20000608 	.word	0x20000608

0001e1dc <CC_PalPowerSaveModeInit>:
   1e1dc:	b570      	push	{r4, r5, r6, lr}
   1e1de:	4c09      	ldr	r4, [pc, #36]	; (1e204 <CC_PalPowerSaveModeInit+0x28>)
   1e1e0:	4d09      	ldr	r5, [pc, #36]	; (1e208 <CC_PalPowerSaveModeInit+0x2c>)
   1e1e2:	6920      	ldr	r0, [r4, #16]
   1e1e4:	68ab      	ldr	r3, [r5, #8]
   1e1e6:	4798      	blx	r3
   1e1e8:	b118      	cbz	r0, 1e1f2 <CC_PalPowerSaveModeInit+0x16>
   1e1ea:	4b08      	ldr	r3, [pc, #32]	; (1e20c <CC_PalPowerSaveModeInit+0x30>)
   1e1ec:	4808      	ldr	r0, [pc, #32]	; (1e210 <CC_PalPowerSaveModeInit+0x34>)
   1e1ee:	685b      	ldr	r3, [r3, #4]
   1e1f0:	4798      	blx	r3
   1e1f2:	4a08      	ldr	r2, [pc, #32]	; (1e214 <CC_PalPowerSaveModeInit+0x38>)
   1e1f4:	68eb      	ldr	r3, [r5, #12]
   1e1f6:	6920      	ldr	r0, [r4, #16]
   1e1f8:	2100      	movs	r1, #0
   1e1fa:	6011      	str	r1, [r2, #0]
   1e1fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e200:	4718      	bx	r3
   1e202:	bf00      	nop
   1e204:	20000618 	.word	0x20000618
   1e208:	20000608 	.word	0x20000608
   1e20c:	200005f8 	.word	0x200005f8
   1e210:	00026ed4 	.word	0x00026ed4
   1e214:	200032a0 	.word	0x200032a0

0001e218 <CC_PalPowerSaveModeSelect>:
   1e218:	b570      	push	{r4, r5, r6, lr}
   1e21a:	4d1a      	ldr	r5, [pc, #104]	; (1e284 <CC_PalPowerSaveModeSelect+0x6c>)
   1e21c:	4e1a      	ldr	r6, [pc, #104]	; (1e288 <CC_PalPowerSaveModeSelect+0x70>)
   1e21e:	4604      	mov	r4, r0
   1e220:	68b2      	ldr	r2, [r6, #8]
   1e222:	6928      	ldr	r0, [r5, #16]
   1e224:	4790      	blx	r2
   1e226:	b9f0      	cbnz	r0, 1e266 <CC_PalPowerSaveModeSelect+0x4e>
   1e228:	b15c      	cbz	r4, 1e242 <CC_PalPowerSaveModeSelect+0x2a>
   1e22a:	4c18      	ldr	r4, [pc, #96]	; (1e28c <CC_PalPowerSaveModeSelect+0x74>)
   1e22c:	6823      	ldr	r3, [r4, #0]
   1e22e:	b1ab      	cbz	r3, 1e25c <CC_PalPowerSaveModeSelect+0x44>
   1e230:	2b01      	cmp	r3, #1
   1e232:	d01a      	beq.n	1e26a <CC_PalPowerSaveModeSelect+0x52>
   1e234:	3b01      	subs	r3, #1
   1e236:	6023      	str	r3, [r4, #0]
   1e238:	6928      	ldr	r0, [r5, #16]
   1e23a:	68f3      	ldr	r3, [r6, #12]
   1e23c:	4798      	blx	r3
   1e23e:	2000      	movs	r0, #0
   1e240:	bd70      	pop	{r4, r5, r6, pc}
   1e242:	4c12      	ldr	r4, [pc, #72]	; (1e28c <CC_PalPowerSaveModeSelect+0x74>)
   1e244:	6821      	ldr	r1, [r4, #0]
   1e246:	b939      	cbnz	r1, 1e258 <CC_PalPowerSaveModeSelect+0x40>
   1e248:	4b11      	ldr	r3, [pc, #68]	; (1e290 <CC_PalPowerSaveModeSelect+0x78>)
   1e24a:	4a12      	ldr	r2, [pc, #72]	; (1e294 <CC_PalPowerSaveModeSelect+0x7c>)
   1e24c:	2001      	movs	r0, #1
   1e24e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1e252:	6813      	ldr	r3, [r2, #0]
   1e254:	2b00      	cmp	r3, #0
   1e256:	d1fc      	bne.n	1e252 <CC_PalPowerSaveModeSelect+0x3a>
   1e258:	3101      	adds	r1, #1
   1e25a:	6021      	str	r1, [r4, #0]
   1e25c:	68f3      	ldr	r3, [r6, #12]
   1e25e:	6928      	ldr	r0, [r5, #16]
   1e260:	4798      	blx	r3
   1e262:	2000      	movs	r0, #0
   1e264:	bd70      	pop	{r4, r5, r6, pc}
   1e266:	480c      	ldr	r0, [pc, #48]	; (1e298 <CC_PalPowerSaveModeSelect+0x80>)
   1e268:	bd70      	pop	{r4, r5, r6, pc}
   1e26a:	4a0a      	ldr	r2, [pc, #40]	; (1e294 <CC_PalPowerSaveModeSelect+0x7c>)
   1e26c:	6813      	ldr	r3, [r2, #0]
   1e26e:	2b00      	cmp	r3, #0
   1e270:	d1fc      	bne.n	1e26c <CC_PalPowerSaveModeSelect+0x54>
   1e272:	4a07      	ldr	r2, [pc, #28]	; (1e290 <CC_PalPowerSaveModeSelect+0x78>)
   1e274:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1e278:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1e27c:	f7ff ff02 	bl	1e084 <CC_HalMaskInterrupt>
   1e280:	6823      	ldr	r3, [r4, #0]
   1e282:	e7d7      	b.n	1e234 <CC_PalPowerSaveModeSelect+0x1c>
   1e284:	20000618 	.word	0x20000618
   1e288:	20000608 	.word	0x20000608
   1e28c:	200032a0 	.word	0x200032a0
   1e290:	5002a000 	.word	0x5002a000
   1e294:	5002b910 	.word	0x5002b910
   1e298:	ffff8fe9 	.word	0xffff8fe9

0001e29c <mutex_init>:
   1e29c:	4b01      	ldr	r3, [pc, #4]	; (1e2a4 <mutex_init+0x8>)
   1e29e:	681b      	ldr	r3, [r3, #0]
   1e2a0:	4718      	bx	r3
   1e2a2:	bf00      	nop
   1e2a4:	20000608 	.word	0x20000608

0001e2a8 <mutex_lock>:
   1e2a8:	4b01      	ldr	r3, [pc, #4]	; (1e2b0 <mutex_lock+0x8>)
   1e2aa:	689b      	ldr	r3, [r3, #8]
   1e2ac:	4718      	bx	r3
   1e2ae:	bf00      	nop
   1e2b0:	20000608 	.word	0x20000608

0001e2b4 <mutex_unlock>:
   1e2b4:	4b01      	ldr	r3, [pc, #4]	; (1e2bc <mutex_unlock+0x8>)
   1e2b6:	68db      	ldr	r3, [r3, #12]
   1e2b8:	4718      	bx	r3
   1e2ba:	bf00      	nop
   1e2bc:	20000608 	.word	0x20000608

0001e2c0 <startTrngHW>:
   1e2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e2c4:	2800      	cmp	r0, #0
   1e2c6:	d07b      	beq.n	1e3c0 <startTrngHW+0x100>
   1e2c8:	460c      	mov	r4, r1
   1e2ca:	2900      	cmp	r1, #0
   1e2cc:	d078      	beq.n	1e3c0 <startTrngHW+0x100>
   1e2ce:	461d      	mov	r5, r3
   1e2d0:	2b00      	cmp	r3, #0
   1e2d2:	d075      	beq.n	1e3c0 <startTrngHW+0x100>
   1e2d4:	4606      	mov	r6, r0
   1e2d6:	b122      	cbz	r2, 1e2e2 <startTrngHW+0x22>
   1e2d8:	2201      	movs	r2, #1
   1e2da:	2300      	movs	r3, #0
   1e2dc:	602a      	str	r2, [r5, #0]
   1e2de:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   1e2e2:	682b      	ldr	r3, [r5, #0]
   1e2e4:	2b00      	cmp	r3, #0
   1e2e6:	d067      	beq.n	1e3b8 <startTrngHW+0xf8>
   1e2e8:	4629      	mov	r1, r5
   1e2ea:	4620      	mov	r0, r4
   1e2ec:	f000 fda4 	bl	1ee38 <LLF_RND_GetFastestRosc>
   1e2f0:	4607      	mov	r7, r0
   1e2f2:	2800      	cmp	r0, #0
   1e2f4:	d161      	bne.n	1e3ba <startTrngHW+0xfa>
   1e2f6:	6828      	ldr	r0, [r5, #0]
   1e2f8:	4621      	mov	r1, r4
   1e2fa:	f000 fd7f 	bl	1edfc <LLF_RND_GetRoscSampleCnt>
   1e2fe:	4607      	mov	r7, r0
   1e300:	2800      	cmp	r0, #0
   1e302:	d15a      	bne.n	1e3ba <startTrngHW+0xfa>
   1e304:	682b      	ldr	r3, [r5, #0]
   1e306:	2b08      	cmp	r3, #8
   1e308:	d069      	beq.n	1e3de <startTrngHW+0x11e>
   1e30a:	2b04      	cmp	r3, #4
   1e30c:	d06a      	beq.n	1e3e4 <startTrngHW+0x124>
   1e30e:	f1a3 0802 	sub.w	r8, r3, #2
   1e312:	fab8 f888 	clz	r8, r8
   1e316:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1e31a:	4b34      	ldr	r3, [pc, #208]	; (1e3ec <startTrngHW+0x12c>)
   1e31c:	4934      	ldr	r1, [pc, #208]	; (1e3f0 <startTrngHW+0x130>)
   1e31e:	4a35      	ldr	r2, [pc, #212]	; (1e3f4 <startTrngHW+0x134>)
   1e320:	2001      	movs	r0, #1
   1e322:	6018      	str	r0, [r3, #0]
   1e324:	469c      	mov	ip, r3
   1e326:	6008      	str	r0, [r1, #0]
   1e328:	f8cc 0000 	str.w	r0, [ip]
   1e32c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e32e:	6013      	str	r3, [r2, #0]
   1e330:	6811      	ldr	r1, [r2, #0]
   1e332:	428b      	cmp	r3, r1
   1e334:	d1f8      	bne.n	1e328 <startTrngHW+0x68>
   1e336:	4b30      	ldr	r3, [pc, #192]	; (1e3f8 <startTrngHW+0x138>)
   1e338:	f04f 0900 	mov.w	r9, #0
   1e33c:	f8c3 9000 	str.w	r9, [r3]
   1e340:	f04f 30ff 	mov.w	r0, #4294967295
   1e344:	f7ff fe90 	bl	1e068 <CC_HalClearInterruptBit>
   1e348:	4b2c      	ldr	r3, [pc, #176]	; (1e3fc <startTrngHW+0x13c>)
   1e34a:	f06f 021b 	mvn.w	r2, #27
   1e34e:	601a      	str	r2, [r3, #0]
   1e350:	4648      	mov	r0, r9
   1e352:	f7ff fe97 	bl	1e084 <CC_HalMaskInterrupt>
   1e356:	4a2a      	ldr	r2, [pc, #168]	; (1e400 <startTrngHW+0x140>)
   1e358:	4b2a      	ldr	r3, [pc, #168]	; (1e404 <startTrngHW+0x144>)
   1e35a:	f8c2 8000 	str.w	r8, [r2]
   1e35e:	6818      	ldr	r0, [r3, #0]
   1e360:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1e364:	f7ff fe8e 	bl	1e084 <CC_HalMaskInterrupt>
   1e368:	4b27      	ldr	r3, [pc, #156]	; (1e408 <startTrngHW+0x148>)
   1e36a:	220a      	movs	r2, #10
   1e36c:	601a      	str	r2, [r3, #0]
   1e36e:	9908      	ldr	r1, [sp, #32]
   1e370:	6923      	ldr	r3, [r4, #16]
   1e372:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e374:	2901      	cmp	r1, #1
   1e376:	d027      	beq.n	1e3c8 <startTrngHW+0x108>
   1e378:	4924      	ldr	r1, [pc, #144]	; (1e40c <startTrngHW+0x14c>)
   1e37a:	fba1 1303 	umull	r1, r3, r1, r3
   1e37e:	091b      	lsrs	r3, r3, #4
   1e380:	fb03 f302 	mul.w	r3, r3, r2
   1e384:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e388:	4921      	ldr	r1, [pc, #132]	; (1e410 <startTrngHW+0x150>)
   1e38a:	4a1b      	ldr	r2, [pc, #108]	; (1e3f8 <startTrngHW+0x138>)
   1e38c:	03db      	lsls	r3, r3, #15
   1e38e:	099b      	lsrs	r3, r3, #6
   1e390:	600b      	str	r3, [r1, #0]
   1e392:	2301      	movs	r3, #1
   1e394:	6013      	str	r3, [r2, #0]
   1e396:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   1e39a:	682a      	ldr	r2, [r5, #0]
   1e39c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e3a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1e3a4:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1e3a8:	682a      	ldr	r2, [r5, #0]
   1e3aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e3ae:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1e3b2:	4638      	mov	r0, r7
   1e3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e3b8:	4f16      	ldr	r7, [pc, #88]	; (1e414 <startTrngHW+0x154>)
   1e3ba:	4638      	mov	r0, r7
   1e3bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e3c0:	4f15      	ldr	r7, [pc, #84]	; (1e418 <startTrngHW+0x158>)
   1e3c2:	4638      	mov	r0, r7
   1e3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e3c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e3cc:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1e3d0:	3101      	adds	r1, #1
   1e3d2:	d002      	beq.n	1e3da <startTrngHW+0x11a>
   1e3d4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1e3d8:	e7ce      	b.n	1e378 <startTrngHW+0xb8>
   1e3da:	2316      	movs	r3, #22
   1e3dc:	e7d0      	b.n	1e380 <startTrngHW+0xc0>
   1e3de:	f04f 0803 	mov.w	r8, #3
   1e3e2:	e79a      	b.n	1e31a <startTrngHW+0x5a>
   1e3e4:	f04f 0802 	mov.w	r8, #2
   1e3e8:	e797      	b.n	1e31a <startTrngHW+0x5a>
   1e3ea:	bf00      	nop
   1e3ec:	5002b1c4 	.word	0x5002b1c4
   1e3f0:	5002b140 	.word	0x5002b140
   1e3f4:	5002b130 	.word	0x5002b130
   1e3f8:	5002b12c 	.word	0x5002b12c
   1e3fc:	5002b100 	.word	0x5002b100
   1e400:	5002b10c 	.word	0x5002b10c
   1e404:	5002ba04 	.word	0x5002ba04
   1e408:	5002b138 	.word	0x5002b138
   1e40c:	aaaaaaab 	.word	0xaaaaaaab
   1e410:	5002b1d8 	.word	0x5002b1d8
   1e414:	00f10c31 	.word	0x00f10c31
   1e418:	00f10c35 	.word	0x00f10c35

0001e41c <LLF_RND_RepetitionCounterTest.part.0>:
   1e41c:	b4f0      	push	{r4, r5, r6, r7}
   1e41e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1e422:	2400      	movs	r4, #0
   1e424:	f10c 3cff 	add.w	ip, ip, #4294967295
   1e428:	4626      	mov	r6, r4
   1e42a:	4627      	mov	r7, r4
   1e42c:	e006      	b.n	1e43c <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1e42e:	429f      	cmp	r7, r3
   1e430:	d016      	beq.n	1e460 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1e432:	2601      	movs	r6, #1
   1e434:	4565      	cmp	r5, ip
   1e436:	d819      	bhi.n	1e46c <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1e438:	462c      	mov	r4, r5
   1e43a:	461f      	mov	r7, r3
   1e43c:	0963      	lsrs	r3, r4, #5
   1e43e:	f004 011f 	and.w	r1, r4, #31
   1e442:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1e446:	291f      	cmp	r1, #31
   1e448:	fa23 f301 	lsr.w	r3, r3, r1
   1e44c:	f104 0501 	add.w	r5, r4, #1
   1e450:	bf18      	it	ne
   1e452:	f003 0301 	andne.w	r3, r3, #1
   1e456:	2c00      	cmp	r4, #0
   1e458:	d1e9      	bne.n	1e42e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1e45a:	2601      	movs	r6, #1
   1e45c:	4635      	mov	r5, r6
   1e45e:	e7eb      	b.n	1e438 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1e460:	3601      	adds	r6, #1
   1e462:	4296      	cmp	r6, r2
   1e464:	d1e6      	bne.n	1e434 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1e466:	4803      	ldr	r0, [pc, #12]	; (1e474 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1e468:	bcf0      	pop	{r4, r5, r6, r7}
   1e46a:	4770      	bx	lr
   1e46c:	2000      	movs	r0, #0
   1e46e:	bcf0      	pop	{r4, r5, r6, r7}
   1e470:	4770      	bx	lr
   1e472:	bf00      	nop
   1e474:	00f10c36 	.word	0x00f10c36

0001e478 <LLF_RND_AdaptiveProportionTest>:
   1e478:	2800      	cmp	r0, #0
   1e47a:	d061      	beq.n	1e540 <LLF_RND_AdaptiveProportionTest+0xc8>
   1e47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e480:	1e4c      	subs	r4, r1, #1
   1e482:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1e486:	d227      	bcs.n	1e4d8 <LLF_RND_AdaptiveProportionTest+0x60>
   1e488:	b333      	cbz	r3, 1e4d8 <LLF_RND_AdaptiveProportionTest+0x60>
   1e48a:	b32a      	cbz	r2, 1e4d8 <LLF_RND_AdaptiveProportionTest+0x60>
   1e48c:	00cd      	lsls	r5, r1, #3
   1e48e:	2b01      	cmp	r3, #1
   1e490:	f105 3eff 	add.w	lr, r5, #4294967295
   1e494:	d030      	beq.n	1e4f8 <LLF_RND_AdaptiveProportionTest+0x80>
   1e496:	2100      	movs	r1, #0
   1e498:	468c      	mov	ip, r1
   1e49a:	460f      	mov	r7, r1
   1e49c:	460e      	mov	r6, r1
   1e49e:	f103 38ff 	add.w	r8, r3, #4294967295
   1e4a2:	094c      	lsrs	r4, r1, #5
   1e4a4:	f001 051f 	and.w	r5, r1, #31
   1e4a8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1e4ac:	2d1f      	cmp	r5, #31
   1e4ae:	fa24 f405 	lsr.w	r4, r4, r5
   1e4b2:	bf18      	it	ne
   1e4b4:	f004 0401 	andne.w	r4, r4, #1
   1e4b8:	b921      	cbnz	r1, 1e4c4 <LLF_RND_AdaptiveProportionTest+0x4c>
   1e4ba:	2601      	movs	r6, #1
   1e4bc:	46b4      	mov	ip, r6
   1e4be:	4631      	mov	r1, r6
   1e4c0:	4627      	mov	r7, r4
   1e4c2:	e7ee      	b.n	1e4a2 <LLF_RND_AdaptiveProportionTest+0x2a>
   1e4c4:	42b3      	cmp	r3, r6
   1e4c6:	d013      	beq.n	1e4f0 <LLF_RND_AdaptiveProportionTest+0x78>
   1e4c8:	42a7      	cmp	r7, r4
   1e4ca:	d101      	bne.n	1e4d0 <LLF_RND_AdaptiveProportionTest+0x58>
   1e4cc:	f10c 0c01 	add.w	ip, ip, #1
   1e4d0:	4546      	cmp	r6, r8
   1e4d2:	d104      	bne.n	1e4de <LLF_RND_AdaptiveProportionTest+0x66>
   1e4d4:	4562      	cmp	r2, ip
   1e4d6:	d202      	bcs.n	1e4de <LLF_RND_AdaptiveProportionTest+0x66>
   1e4d8:	481a      	ldr	r0, [pc, #104]	; (1e544 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1e4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e4de:	463c      	mov	r4, r7
   1e4e0:	3101      	adds	r1, #1
   1e4e2:	458e      	cmp	lr, r1
   1e4e4:	f106 0601 	add.w	r6, r6, #1
   1e4e8:	d2ea      	bcs.n	1e4c0 <LLF_RND_AdaptiveProportionTest+0x48>
   1e4ea:	2000      	movs	r0, #0
   1e4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e4f0:	2600      	movs	r6, #0
   1e4f2:	f04f 0c01 	mov.w	ip, #1
   1e4f6:	e7f3      	b.n	1e4e0 <LLF_RND_AdaptiveProportionTest+0x68>
   1e4f8:	2600      	movs	r6, #0
   1e4fa:	46b4      	mov	ip, r6
   1e4fc:	4637      	mov	r7, r6
   1e4fe:	4634      	mov	r4, r6
   1e500:	0961      	lsrs	r1, r4, #5
   1e502:	f004 031f 	and.w	r3, r4, #31
   1e506:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1e50a:	2b1f      	cmp	r3, #31
   1e50c:	fa21 f103 	lsr.w	r1, r1, r3
   1e510:	bf18      	it	ne
   1e512:	f001 0101 	andne.w	r1, r1, #1
   1e516:	b13c      	cbz	r4, 1e528 <LLF_RND_AdaptiveProportionTest+0xb0>
   1e518:	b95f      	cbnz	r7, 1e532 <LLF_RND_AdaptiveProportionTest+0xba>
   1e51a:	458c      	cmp	ip, r1
   1e51c:	d001      	beq.n	1e522 <LLF_RND_AdaptiveProportionTest+0xaa>
   1e51e:	4661      	mov	r1, ip
   1e520:	e008      	b.n	1e534 <LLF_RND_AdaptiveProportionTest+0xbc>
   1e522:	3601      	adds	r6, #1
   1e524:	4661      	mov	r1, ip
   1e526:	e005      	b.n	1e534 <LLF_RND_AdaptiveProportionTest+0xbc>
   1e528:	2601      	movs	r6, #1
   1e52a:	4634      	mov	r4, r6
   1e52c:	468c      	mov	ip, r1
   1e52e:	2701      	movs	r7, #1
   1e530:	e7e6      	b.n	1e500 <LLF_RND_AdaptiveProportionTest+0x88>
   1e532:	463e      	mov	r6, r7
   1e534:	42b2      	cmp	r2, r6
   1e536:	d3cf      	bcc.n	1e4d8 <LLF_RND_AdaptiveProportionTest+0x60>
   1e538:	3401      	adds	r4, #1
   1e53a:	42ac      	cmp	r4, r5
   1e53c:	d1f6      	bne.n	1e52c <LLF_RND_AdaptiveProportionTest+0xb4>
   1e53e:	e7d4      	b.n	1e4ea <LLF_RND_AdaptiveProportionTest+0x72>
   1e540:	4800      	ldr	r0, [pc, #0]	; (1e544 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1e542:	4770      	bx	lr
   1e544:	00f10c37 	.word	0x00f10c37

0001e548 <getTrngSource>:
   1e548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e54c:	b08d      	sub	sp, #52	; 0x34
   1e54e:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1e552:	4607      	mov	r7, r0
   1e554:	460c      	mov	r4, r1
   1e556:	2d00      	cmp	r5, #0
   1e558:	d14d      	bne.n	1e5f6 <getTrngSource+0xae>
   1e55a:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1e55e:	601e      	str	r6, [r3, #0]
   1e560:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e562:	2100      	movs	r1, #0
   1e564:	6019      	str	r1, [r3, #0]
   1e566:	2a00      	cmp	r2, #0
   1e568:	f000 8120 	beq.w	1e7ac <getTrngSource+0x264>
   1e56c:	4a9b      	ldr	r2, [pc, #620]	; (1e7dc <getTrngSource+0x294>)
   1e56e:	4b9c      	ldr	r3, [pc, #624]	; (1e7e0 <getTrngSource+0x298>)
   1e570:	6811      	ldr	r1, [r2, #0]
   1e572:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e574:	681b      	ldr	r3, [r3, #0]
   1e576:	429a      	cmp	r2, r3
   1e578:	d148      	bne.n	1e60c <getTrngSource+0xc4>
   1e57a:	290a      	cmp	r1, #10
   1e57c:	d146      	bne.n	1e60c <getTrngSource+0xc4>
   1e57e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   1e582:	9304      	str	r3, [sp, #16]
   1e584:	4b97      	ldr	r3, [pc, #604]	; (1e7e4 <getTrngSource+0x29c>)
   1e586:	fba3 230a 	umull	r2, r3, r3, sl
   1e58a:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1e58e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1e592:	f106 0208 	add.w	r2, r6, #8
   1e596:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1e59a:	2304      	movs	r3, #4
   1e59c:	9203      	str	r2, [sp, #12]
   1e59e:	9302      	str	r3, [sp, #8]
   1e5a0:	46b8      	mov	r8, r7
   1e5a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e5a4:	f8c3 a000 	str.w	sl, [r3]
   1e5a8:	f1ba 0f00 	cmp.w	sl, #0
   1e5ac:	f000 80c4 	beq.w	1e738 <getTrngSource+0x1f0>
   1e5b0:	9e03      	ldr	r6, [sp, #12]
   1e5b2:	4655      	mov	r5, sl
   1e5b4:	f04f 0900 	mov.w	r9, #0
   1e5b8:	f000 fc4e 	bl	1ee58 <LLF_RND_TurnOffTrng>
   1e5bc:	2300      	movs	r3, #0
   1e5be:	9305      	str	r3, [sp, #20]
   1e5c0:	f1b8 0f00 	cmp.w	r8, #0
   1e5c4:	f000 80e6 	beq.w	1e794 <getTrngSource+0x24c>
   1e5c8:	2c00      	cmp	r4, #0
   1e5ca:	f000 80e3 	beq.w	1e794 <getTrngSource+0x24c>
   1e5ce:	9b04      	ldr	r3, [sp, #16]
   1e5d0:	2b00      	cmp	r3, #0
   1e5d2:	f000 80dd 	beq.w	1e790 <getTrngSource+0x248>
   1e5d6:	a904      	add	r1, sp, #16
   1e5d8:	4620      	mov	r0, r4
   1e5da:	f000 fc2d 	bl	1ee38 <LLF_RND_GetFastestRosc>
   1e5de:	b1b8      	cbz	r0, 1e610 <getTrngSource+0xc8>
   1e5e0:	4b81      	ldr	r3, [pc, #516]	; (1e7e8 <getTrngSource+0x2a0>)
   1e5e2:	4298      	cmp	r0, r3
   1e5e4:	f040 80a8 	bne.w	1e738 <getTrngSource+0x1f0>
   1e5e8:	9002      	str	r0, [sp, #8]
   1e5ea:	f000 fc35 	bl	1ee58 <LLF_RND_TurnOffTrng>
   1e5ee:	9802      	ldr	r0, [sp, #8]
   1e5f0:	b00d      	add	sp, #52	; 0x34
   1e5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1e5fa:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1e5fe:	3001      	adds	r0, #1
   1e600:	bf14      	ite	ne
   1e602:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1e606:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1e60a:	e7a8      	b.n	1e55e <getTrngSource+0x16>
   1e60c:	4877      	ldr	r0, [pc, #476]	; (1e7ec <getTrngSource+0x2a4>)
   1e60e:	e7eb      	b.n	1e5e8 <getTrngSource+0xa0>
   1e610:	9804      	ldr	r0, [sp, #16]
   1e612:	4621      	mov	r1, r4
   1e614:	f000 fbf2 	bl	1edfc <LLF_RND_GetRoscSampleCnt>
   1e618:	2800      	cmp	r0, #0
   1e61a:	d1e1      	bne.n	1e5e0 <getTrngSource+0x98>
   1e61c:	9f04      	ldr	r7, [sp, #16]
   1e61e:	2f08      	cmp	r7, #8
   1e620:	f000 80ba 	beq.w	1e798 <getTrngSource+0x250>
   1e624:	2f04      	cmp	r7, #4
   1e626:	f000 80b9 	beq.w	1e79c <getTrngSource+0x254>
   1e62a:	f1a7 0702 	sub.w	r7, r7, #2
   1e62e:	fab7 f787 	clz	r7, r7
   1e632:	097f      	lsrs	r7, r7, #5
   1e634:	496e      	ldr	r1, [pc, #440]	; (1e7f0 <getTrngSource+0x2a8>)
   1e636:	2301      	movs	r3, #1
   1e638:	600b      	str	r3, [r1, #0]
   1e63a:	f841 3c84 	str.w	r3, [r1, #-132]
   1e63e:	4619      	mov	r1, r3
   1e640:	4b6b      	ldr	r3, [pc, #428]	; (1e7f0 <getTrngSource+0x2a8>)
   1e642:	4867      	ldr	r0, [pc, #412]	; (1e7e0 <getTrngSource+0x298>)
   1e644:	6019      	str	r1, [r3, #0]
   1e646:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e648:	6003      	str	r3, [r0, #0]
   1e64a:	6800      	ldr	r0, [r0, #0]
   1e64c:	4283      	cmp	r3, r0
   1e64e:	d1f7      	bne.n	1e640 <getTrngSource+0xf8>
   1e650:	4a68      	ldr	r2, [pc, #416]	; (1e7f4 <getTrngSource+0x2ac>)
   1e652:	2300      	movs	r3, #0
   1e654:	6013      	str	r3, [r2, #0]
   1e656:	f04f 30ff 	mov.w	r0, #4294967295
   1e65a:	f7ff fd05 	bl	1e068 <CC_HalClearInterruptBit>
   1e65e:	2300      	movs	r3, #0
   1e660:	4618      	mov	r0, r3
   1e662:	4b65      	ldr	r3, [pc, #404]	; (1e7f8 <getTrngSource+0x2b0>)
   1e664:	f06f 011b 	mvn.w	r1, #27
   1e668:	6019      	str	r1, [r3, #0]
   1e66a:	f7ff fd0b 	bl	1e084 <CC_HalMaskInterrupt>
   1e66e:	4963      	ldr	r1, [pc, #396]	; (1e7fc <getTrngSource+0x2b4>)
   1e670:	4b63      	ldr	r3, [pc, #396]	; (1e800 <getTrngSource+0x2b8>)
   1e672:	600f      	str	r7, [r1, #0]
   1e674:	6818      	ldr	r0, [r3, #0]
   1e676:	4f5b      	ldr	r7, [pc, #364]	; (1e7e4 <getTrngSource+0x29c>)
   1e678:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1e67c:	f7ff fd02 	bl	1e084 <CC_HalMaskInterrupt>
   1e680:	4b56      	ldr	r3, [pc, #344]	; (1e7dc <getTrngSource+0x294>)
   1e682:	4860      	ldr	r0, [pc, #384]	; (1e804 <getTrngSource+0x2bc>)
   1e684:	210a      	movs	r1, #10
   1e686:	6019      	str	r1, [r3, #0]
   1e688:	6921      	ldr	r1, [r4, #16]
   1e68a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e68c:	fba7 c101 	umull	ip, r1, r7, r1
   1e690:	0909      	lsrs	r1, r1, #4
   1e692:	fb03 f301 	mul.w	r3, r3, r1
   1e696:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e69a:	03db      	lsls	r3, r3, #15
   1e69c:	099b      	lsrs	r3, r3, #6
   1e69e:	6003      	str	r3, [r0, #0]
   1e6a0:	4b54      	ldr	r3, [pc, #336]	; (1e7f4 <getTrngSource+0x2ac>)
   1e6a2:	2201      	movs	r2, #1
   1e6a4:	601a      	str	r2, [r3, #0]
   1e6a6:	9904      	ldr	r1, [sp, #16]
   1e6a8:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1e6ac:	020b      	lsls	r3, r1, #8
   1e6ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1e6b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1e6b6:	4313      	orrs	r3, r2
   1e6b8:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1e6bc:	a805      	add	r0, sp, #20
   1e6be:	f000 fb8d 	bl	1eddc <LLF_RND_WaitRngInterrupt>
   1e6c2:	9b05      	ldr	r3, [sp, #20]
   1e6c4:	f003 031a 	and.w	r3, r3, #26
   1e6c8:	4303      	orrs	r3, r0
   1e6ca:	d135      	bne.n	1e738 <getTrngSource+0x1f0>
   1e6cc:	4a4e      	ldr	r2, [pc, #312]	; (1e808 <getTrngSource+0x2c0>)
   1e6ce:	4b4f      	ldr	r3, [pc, #316]	; (1e80c <getTrngSource+0x2c4>)
   1e6d0:	6812      	ldr	r2, [r2, #0]
   1e6d2:	9206      	str	r2, [sp, #24]
   1e6d4:	681a      	ldr	r2, [r3, #0]
   1e6d6:	9207      	str	r2, [sp, #28]
   1e6d8:	685a      	ldr	r2, [r3, #4]
   1e6da:	9208      	str	r2, [sp, #32]
   1e6dc:	689a      	ldr	r2, [r3, #8]
   1e6de:	9209      	str	r2, [sp, #36]	; 0x24
   1e6e0:	68da      	ldr	r2, [r3, #12]
   1e6e2:	920a      	str	r2, [sp, #40]	; 0x28
   1e6e4:	3310      	adds	r3, #16
   1e6e6:	fba7 2705 	umull	r2, r7, r7, r5
   1e6ea:	681b      	ldr	r3, [r3, #0]
   1e6ec:	930b      	str	r3, [sp, #44]	; 0x2c
   1e6ee:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1e6f2:	d102      	bne.n	1e6fa <getTrngSource+0x1b2>
   1e6f4:	f1bb 0f00 	cmp.w	fp, #0
   1e6f8:	d141      	bne.n	1e77e <getTrngSource+0x236>
   1e6fa:	2218      	movs	r2, #24
   1e6fc:	4630      	mov	r0, r6
   1e6fe:	eb0d 0102 	add.w	r1, sp, r2
   1e702:	f000 fb0f 	bl	1ed24 <CC_PalMemCopyPlat>
   1e706:	3d18      	subs	r5, #24
   1e708:	3618      	adds	r6, #24
   1e70a:	f109 0901 	add.w	r9, r9, #1
   1e70e:	2d00      	cmp	r5, #0
   1e710:	f47f af52 	bne.w	1e5b8 <getTrngSource+0x70>
   1e714:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1e718:	d85d      	bhi.n	1e7d6 <getTrngSource+0x28e>
   1e71a:	9d03      	ldr	r5, [sp, #12]
   1e71c:	6962      	ldr	r2, [r4, #20]
   1e71e:	4651      	mov	r1, sl
   1e720:	4628      	mov	r0, r5
   1e722:	f7ff fe7b 	bl	1e41c <LLF_RND_RepetitionCounterTest.part.0>
   1e726:	2800      	cmp	r0, #0
   1e728:	d04b      	beq.n	1e7c2 <getTrngSource+0x27a>
   1e72a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1e72c:	2300      	movs	r3, #0
   1e72e:	6013      	str	r3, [r2, #0]
   1e730:	4b2d      	ldr	r3, [pc, #180]	; (1e7e8 <getTrngSource+0x2a0>)
   1e732:	4298      	cmp	r0, r3
   1e734:	f43f af58 	beq.w	1e5e8 <getTrngSource+0xa0>
   1e738:	9d04      	ldr	r5, [sp, #16]
   1e73a:	2d08      	cmp	r5, #8
   1e73c:	d034      	beq.n	1e7a8 <getTrngSource+0x260>
   1e73e:	2200      	movs	r2, #0
   1e740:	ab04      	add	r3, sp, #16
   1e742:	006d      	lsls	r5, r5, #1
   1e744:	9200      	str	r2, [sp, #0]
   1e746:	4621      	mov	r1, r4
   1e748:	4640      	mov	r0, r8
   1e74a:	9504      	str	r5, [sp, #16]
   1e74c:	f7ff fdb8 	bl	1e2c0 <startTrngHW>
   1e750:	4b2f      	ldr	r3, [pc, #188]	; (1e810 <getTrngSource+0x2c8>)
   1e752:	4298      	cmp	r0, r3
   1e754:	d024      	beq.n	1e7a0 <getTrngSource+0x258>
   1e756:	2800      	cmp	r0, #0
   1e758:	f47f af46 	bne.w	1e5e8 <getTrngSource+0xa0>
   1e75c:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1e760:	0a13      	lsrs	r3, r2, #8
   1e762:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1e766:	4313      	orrs	r3, r2
   1e768:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e76c:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1e770:	9b02      	ldr	r3, [sp, #8]
   1e772:	3b01      	subs	r3, #1
   1e774:	9302      	str	r3, [sp, #8]
   1e776:	f47f af14 	bne.w	1e5a2 <getTrngSource+0x5a>
   1e77a:	2000      	movs	r0, #0
   1e77c:	e734      	b.n	1e5e8 <getTrngSource+0xa0>
   1e77e:	4630      	mov	r0, r6
   1e780:	465a      	mov	r2, fp
   1e782:	a906      	add	r1, sp, #24
   1e784:	f000 face 	bl	1ed24 <CC_PalMemCopyPlat>
   1e788:	eba5 050b 	sub.w	r5, r5, fp
   1e78c:	445e      	add	r6, fp
   1e78e:	e7bc      	b.n	1e70a <getTrngSource+0x1c2>
   1e790:	481f      	ldr	r0, [pc, #124]	; (1e810 <getTrngSource+0x2c8>)
   1e792:	e725      	b.n	1e5e0 <getTrngSource+0x98>
   1e794:	481f      	ldr	r0, [pc, #124]	; (1e814 <getTrngSource+0x2cc>)
   1e796:	e723      	b.n	1e5e0 <getTrngSource+0x98>
   1e798:	2703      	movs	r7, #3
   1e79a:	e74b      	b.n	1e634 <getTrngSource+0xec>
   1e79c:	2702      	movs	r7, #2
   1e79e:	e749      	b.n	1e634 <getTrngSource+0xec>
   1e7a0:	6a23      	ldr	r3, [r4, #32]
   1e7a2:	2b00      	cmp	r3, #0
   1e7a4:	f43f af20 	beq.w	1e5e8 <getTrngSource+0xa0>
   1e7a8:	481b      	ldr	r0, [pc, #108]	; (1e818 <getTrngSource+0x2d0>)
   1e7aa:	e71d      	b.n	1e5e8 <getTrngSource+0xa0>
   1e7ac:	9500      	str	r5, [sp, #0]
   1e7ae:	ab04      	add	r3, sp, #16
   1e7b0:	2201      	movs	r2, #1
   1e7b2:	4621      	mov	r1, r4
   1e7b4:	4638      	mov	r0, r7
   1e7b6:	f7ff fd83 	bl	1e2c0 <startTrngHW>
   1e7ba:	2800      	cmp	r0, #0
   1e7bc:	f43f aee2 	beq.w	1e584 <getTrngSource+0x3c>
   1e7c0:	e712      	b.n	1e5e8 <getTrngSource+0xa0>
   1e7c2:	69a2      	ldr	r2, [r4, #24]
   1e7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1e7c8:	4651      	mov	r1, sl
   1e7ca:	4628      	mov	r0, r5
   1e7cc:	f7ff fe54 	bl	1e478 <LLF_RND_AdaptiveProportionTest>
   1e7d0:	2800      	cmp	r0, #0
   1e7d2:	d1aa      	bne.n	1e72a <getTrngSource+0x1e2>
   1e7d4:	e7d1      	b.n	1e77a <getTrngSource+0x232>
   1e7d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e7d8:	601d      	str	r5, [r3, #0]
   1e7da:	e7ad      	b.n	1e738 <getTrngSource+0x1f0>
   1e7dc:	5002b138 	.word	0x5002b138
   1e7e0:	5002b130 	.word	0x5002b130
   1e7e4:	aaaaaaab 	.word	0xaaaaaaab
   1e7e8:	00f10c02 	.word	0x00f10c02
   1e7ec:	00f10c30 	.word	0x00f10c30
   1e7f0:	5002b1c4 	.word	0x5002b1c4
   1e7f4:	5002b12c 	.word	0x5002b12c
   1e7f8:	5002b100 	.word	0x5002b100
   1e7fc:	5002b10c 	.word	0x5002b10c
   1e800:	5002ba04 	.word	0x5002ba04
   1e804:	5002b1d8 	.word	0x5002b1d8
   1e808:	5002b114 	.word	0x5002b114
   1e80c:	5002b118 	.word	0x5002b118
   1e810:	00f10c31 	.word	0x00f10c31
   1e814:	00f10c35 	.word	0x00f10c35
   1e818:	00f10c32 	.word	0x00f10c32

0001e81c <LLF_RND_GetTrngSource>:
   1e81c:	b430      	push	{r4, r5}
   1e81e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1e822:	9d04      	ldr	r5, [sp, #16]
   1e824:	9402      	str	r4, [sp, #8]
   1e826:	2400      	movs	r4, #0
   1e828:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1e82c:	bc30      	pop	{r4, r5}
   1e82e:	f7ff be8b 	b.w	1e548 <getTrngSource>
   1e832:	bf00      	nop

0001e834 <LLF_RND_RunTrngStartupTest>:
   1e834:	b510      	push	{r4, lr}
   1e836:	b086      	sub	sp, #24
   1e838:	ab05      	add	r3, sp, #20
   1e83a:	2401      	movs	r4, #1
   1e83c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1e840:	9300      	str	r3, [sp, #0]
   1e842:	2200      	movs	r2, #0
   1e844:	ab04      	add	r3, sp, #16
   1e846:	f7ff fe7f 	bl	1e548 <getTrngSource>
   1e84a:	b006      	add	sp, #24
   1e84c:	bd10      	pop	{r4, pc}
   1e84e:	bf00      	nop

0001e850 <mbedtls_hardware_poll>:
   1e850:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e852:	b089      	sub	sp, #36	; 0x24
   1e854:	9205      	str	r2, [sp, #20]
   1e856:	2900      	cmp	r1, #0
   1e858:	d064      	beq.n	1e924 <mbedtls_hardware_poll+0xd4>
   1e85a:	461c      	mov	r4, r3
   1e85c:	2b00      	cmp	r3, #0
   1e85e:	d061      	beq.n	1e924 <mbedtls_hardware_poll+0xd4>
   1e860:	4615      	mov	r5, r2
   1e862:	2a00      	cmp	r2, #0
   1e864:	d05e      	beq.n	1e924 <mbedtls_hardware_poll+0xd4>
   1e866:	4f31      	ldr	r7, [pc, #196]	; (1e92c <mbedtls_hardware_poll+0xdc>)
   1e868:	460e      	mov	r6, r1
   1e86a:	6838      	ldr	r0, [r7, #0]
   1e86c:	f04f 31ff 	mov.w	r1, #4294967295
   1e870:	f7ff fca2 	bl	1e1b8 <CC_PalMutexLock>
   1e874:	2800      	cmp	r0, #0
   1e876:	d14b      	bne.n	1e910 <mbedtls_hardware_poll+0xc0>
   1e878:	2000      	movs	r0, #0
   1e87a:	f7ff fccd 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1e87e:	2800      	cmp	r0, #0
   1e880:	d142      	bne.n	1e908 <mbedtls_hardware_poll+0xb8>
   1e882:	482b      	ldr	r0, [pc, #172]	; (1e930 <mbedtls_hardware_poll+0xe0>)
   1e884:	f000 fa12 	bl	1ecac <RNG_PLAT_SetUserRngParameters>
   1e888:	b1d8      	cbz	r0, 1e8c2 <mbedtls_hardware_poll+0x72>
   1e88a:	2001      	movs	r0, #1
   1e88c:	f04f 36ff 	mov.w	r6, #4294967295
   1e890:	f7ff fcc2 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1e894:	2800      	cmp	r0, #0
   1e896:	d133      	bne.n	1e900 <mbedtls_hardware_poll+0xb0>
   1e898:	4826      	ldr	r0, [pc, #152]	; (1e934 <mbedtls_hardware_poll+0xe4>)
   1e89a:	f44f 7108 	mov.w	r1, #544	; 0x220
   1e89e:	f7fe fe47 	bl	1d530 <mbedtls_zeroize_internal>
   1e8a2:	4825      	ldr	r0, [pc, #148]	; (1e938 <mbedtls_hardware_poll+0xe8>)
   1e8a4:	21dc      	movs	r1, #220	; 0xdc
   1e8a6:	f7fe fe43 	bl	1d530 <mbedtls_zeroize_internal>
   1e8aa:	4821      	ldr	r0, [pc, #132]	; (1e930 <mbedtls_hardware_poll+0xe0>)
   1e8ac:	2128      	movs	r1, #40	; 0x28
   1e8ae:	f7fe fe3f 	bl	1d530 <mbedtls_zeroize_internal>
   1e8b2:	6838      	ldr	r0, [r7, #0]
   1e8b4:	f7ff fc88 	bl	1e1c8 <CC_PalMutexUnlock>
   1e8b8:	2800      	cmp	r0, #0
   1e8ba:	d12d      	bne.n	1e918 <mbedtls_hardware_poll+0xc8>
   1e8bc:	4630      	mov	r0, r6
   1e8be:	b009      	add	sp, #36	; 0x24
   1e8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e8c2:	491c      	ldr	r1, [pc, #112]	; (1e934 <mbedtls_hardware_poll+0xe4>)
   1e8c4:	9003      	str	r0, [sp, #12]
   1e8c6:	ab07      	add	r3, sp, #28
   1e8c8:	4602      	mov	r2, r0
   1e8ca:	9102      	str	r1, [sp, #8]
   1e8cc:	9300      	str	r3, [sp, #0]
   1e8ce:	4918      	ldr	r1, [pc, #96]	; (1e930 <mbedtls_hardware_poll+0xe0>)
   1e8d0:	4819      	ldr	r0, [pc, #100]	; (1e938 <mbedtls_hardware_poll+0xe8>)
   1e8d2:	9401      	str	r4, [sp, #4]
   1e8d4:	ab05      	add	r3, sp, #20
   1e8d6:	f7ff ffa1 	bl	1e81c <LLF_RND_GetTrngSource>
   1e8da:	4603      	mov	r3, r0
   1e8dc:	2800      	cmp	r0, #0
   1e8de:	d1d4      	bne.n	1e88a <mbedtls_hardware_poll+0x3a>
   1e8e0:	6822      	ldr	r2, [r4, #0]
   1e8e2:	42aa      	cmp	r2, r5
   1e8e4:	d3d1      	bcc.n	1e88a <mbedtls_hardware_poll+0x3a>
   1e8e6:	9907      	ldr	r1, [sp, #28]
   1e8e8:	4630      	mov	r0, r6
   1e8ea:	3108      	adds	r1, #8
   1e8ec:	462a      	mov	r2, r5
   1e8ee:	461e      	mov	r6, r3
   1e8f0:	f000 fa18 	bl	1ed24 <CC_PalMemCopyPlat>
   1e8f4:	6025      	str	r5, [r4, #0]
   1e8f6:	2001      	movs	r0, #1
   1e8f8:	f7ff fc8e 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1e8fc:	2800      	cmp	r0, #0
   1e8fe:	d0cb      	beq.n	1e898 <mbedtls_hardware_poll+0x48>
   1e900:	480e      	ldr	r0, [pc, #56]	; (1e93c <mbedtls_hardware_poll+0xec>)
   1e902:	f7fe fd0d 	bl	1d320 <CC_PalAbort>
   1e906:	e7c7      	b.n	1e898 <mbedtls_hardware_poll+0x48>
   1e908:	480d      	ldr	r0, [pc, #52]	; (1e940 <mbedtls_hardware_poll+0xf0>)
   1e90a:	f7fe fd09 	bl	1d320 <CC_PalAbort>
   1e90e:	e7b8      	b.n	1e882 <mbedtls_hardware_poll+0x32>
   1e910:	480c      	ldr	r0, [pc, #48]	; (1e944 <mbedtls_hardware_poll+0xf4>)
   1e912:	f7fe fd05 	bl	1d320 <CC_PalAbort>
   1e916:	e7af      	b.n	1e878 <mbedtls_hardware_poll+0x28>
   1e918:	480b      	ldr	r0, [pc, #44]	; (1e948 <mbedtls_hardware_poll+0xf8>)
   1e91a:	f7fe fd01 	bl	1d320 <CC_PalAbort>
   1e91e:	4630      	mov	r0, r6
   1e920:	b009      	add	sp, #36	; 0x24
   1e922:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e924:	f04f 36ff 	mov.w	r6, #4294967295
   1e928:	e7c8      	b.n	1e8bc <mbedtls_hardware_poll+0x6c>
   1e92a:	bf00      	nop
   1e92c:	20000658 	.word	0x20000658
   1e930:	200035a0 	.word	0x200035a0
   1e934:	20003380 	.word	0x20003380
   1e938:	200032a4 	.word	0x200032a4
   1e93c:	00026e9c 	.word	0x00026e9c
   1e940:	00026e7c 	.word	0x00026e7c
   1e944:	00026e64 	.word	0x00026e64
   1e948:	00026ef4 	.word	0x00026ef4

0001e94c <cc_mbedtls_aes_init>:
   1e94c:	b510      	push	{r4, lr}
   1e94e:	4604      	mov	r4, r0
   1e950:	b130      	cbz	r0, 1e960 <cc_mbedtls_aes_init+0x14>
   1e952:	2200      	movs	r2, #0
   1e954:	2301      	movs	r3, #1
   1e956:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1e95a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1e95e:	bd10      	pop	{r4, pc}
   1e960:	4801      	ldr	r0, [pc, #4]	; (1e968 <cc_mbedtls_aes_init+0x1c>)
   1e962:	f7fe fcdd 	bl	1d320 <CC_PalAbort>
   1e966:	e7f4      	b.n	1e952 <cc_mbedtls_aes_init+0x6>
   1e968:	00026f0c 	.word	0x00026f0c

0001e96c <cc_mbedtls_aes_free>:
   1e96c:	b118      	cbz	r0, 1e976 <cc_mbedtls_aes_free+0xa>
   1e96e:	2274      	movs	r2, #116	; 0x74
   1e970:	2100      	movs	r1, #0
   1e972:	f000 b9d9 	b.w	1ed28 <CC_PalMemSetPlat>
   1e976:	4770      	bx	lr

0001e978 <cc_mbedtls_aes_setkey_enc>:
   1e978:	b190      	cbz	r0, 1e9a0 <cc_mbedtls_aes_setkey_enc+0x28>
   1e97a:	b1a1      	cbz	r1, 1e9a6 <cc_mbedtls_aes_setkey_enc+0x2e>
   1e97c:	b510      	push	{r4, lr}
   1e97e:	2a80      	cmp	r2, #128	; 0x80
   1e980:	f04f 0400 	mov.w	r4, #0
   1e984:	6384      	str	r4, [r0, #56]	; 0x38
   1e986:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1e98a:	d106      	bne.n	1e99a <cc_mbedtls_aes_setkey_enc+0x22>
   1e98c:	6304      	str	r4, [r0, #48]	; 0x30
   1e98e:	2210      	movs	r2, #16
   1e990:	3010      	adds	r0, #16
   1e992:	f000 f9c7 	bl	1ed24 <CC_PalMemCopyPlat>
   1e996:	4620      	mov	r0, r4
   1e998:	bd10      	pop	{r4, pc}
   1e99a:	f06f 001f 	mvn.w	r0, #31
   1e99e:	bd10      	pop	{r4, pc}
   1e9a0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e9a4:	4770      	bx	lr
   1e9a6:	f06f 001f 	mvn.w	r0, #31
   1e9aa:	4770      	bx	lr

0001e9ac <cc_mbedtls_aes_crypt_ecb>:
   1e9ac:	b320      	cbz	r0, 1e9f8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1e9ae:	b31a      	cbz	r2, 1e9f8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1e9b0:	b313      	cbz	r3, 1e9f8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1e9b2:	2901      	cmp	r1, #1
   1e9b4:	d820      	bhi.n	1e9f8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1e9b6:	b570      	push	{r4, r5, r6, lr}
   1e9b8:	4604      	mov	r4, r0
   1e9ba:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1e9bc:	b086      	sub	sp, #24
   1e9be:	d016      	beq.n	1e9ee <cc_mbedtls_aes_crypt_ecb+0x42>
   1e9c0:	2901      	cmp	r1, #1
   1e9c2:	d116      	bne.n	1e9f2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1e9c4:	2100      	movs	r1, #0
   1e9c6:	2510      	movs	r5, #16
   1e9c8:	ae04      	add	r6, sp, #16
   1e9ca:	6361      	str	r1, [r4, #52]	; 0x34
   1e9cc:	4610      	mov	r0, r2
   1e9ce:	e9cd 5600 	strd	r5, r6, [sp]
   1e9d2:	aa02      	add	r2, sp, #8
   1e9d4:	4629      	mov	r1, r5
   1e9d6:	f000 fa4d 	bl	1ee74 <SetDataBuffersInfo>
   1e9da:	b950      	cbnz	r0, 1e9f2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1e9dc:	462b      	mov	r3, r5
   1e9de:	4632      	mov	r2, r6
   1e9e0:	a902      	add	r1, sp, #8
   1e9e2:	4620      	mov	r0, r4
   1e9e4:	f000 fcda 	bl	1f39c <ProcessAesDrv>
   1e9e8:	b918      	cbnz	r0, 1e9f2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1e9ea:	b006      	add	sp, #24
   1e9ec:	bd70      	pop	{r4, r5, r6, pc}
   1e9ee:	2900      	cmp	r1, #0
   1e9f0:	d0e8      	beq.n	1e9c4 <cc_mbedtls_aes_crypt_ecb+0x18>
   1e9f2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e9f6:	e7f8      	b.n	1e9ea <cc_mbedtls_aes_crypt_ecb+0x3e>
   1e9f8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e9fc:	4770      	bx	lr
   1e9fe:	bf00      	nop

0001ea00 <cc_mbedtls_sha256_init>:
   1ea00:	b510      	push	{r4, lr}
   1ea02:	4604      	mov	r4, r0
   1ea04:	b128      	cbz	r0, 1ea12 <cc_mbedtls_sha256_init+0x12>
   1ea06:	4620      	mov	r0, r4
   1ea08:	21f0      	movs	r1, #240	; 0xf0
   1ea0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ea0e:	f000 b98d 	b.w	1ed2c <CC_PalMemSetZeroPlat>
   1ea12:	4804      	ldr	r0, [pc, #16]	; (1ea24 <cc_mbedtls_sha256_init+0x24>)
   1ea14:	f7fe fc84 	bl	1d320 <CC_PalAbort>
   1ea18:	4620      	mov	r0, r4
   1ea1a:	21f0      	movs	r1, #240	; 0xf0
   1ea1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ea20:	f000 b984 	b.w	1ed2c <CC_PalMemSetZeroPlat>
   1ea24:	00026f20 	.word	0x00026f20

0001ea28 <cc_mbedtls_sha256_free>:
   1ea28:	b110      	cbz	r0, 1ea30 <cc_mbedtls_sha256_free+0x8>
   1ea2a:	21f0      	movs	r1, #240	; 0xf0
   1ea2c:	f7fe bd80 	b.w	1d530 <mbedtls_zeroize_internal>
   1ea30:	4770      	bx	lr
   1ea32:	bf00      	nop

0001ea34 <cc_mbedtls_sha256_starts>:
   1ea34:	b508      	push	{r3, lr}
   1ea36:	b161      	cbz	r1, 1ea52 <cc_mbedtls_sha256_starts+0x1e>
   1ea38:	2901      	cmp	r1, #1
   1ea3a:	d107      	bne.n	1ea4c <cc_mbedtls_sha256_starts+0x18>
   1ea3c:	2102      	movs	r1, #2
   1ea3e:	f000 f85b 	bl	1eaf8 <mbedtls_sha_starts_internal>
   1ea42:	2800      	cmp	r0, #0
   1ea44:	bf18      	it	ne
   1ea46:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1ea4a:	bd08      	pop	{r3, pc}
   1ea4c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ea50:	bd08      	pop	{r3, pc}
   1ea52:	2101      	movs	r1, #1
   1ea54:	f000 f850 	bl	1eaf8 <mbedtls_sha_starts_internal>
   1ea58:	e7f3      	b.n	1ea42 <cc_mbedtls_sha256_starts+0xe>
   1ea5a:	bf00      	nop

0001ea5c <cc_mbedtls_sha256_update>:
   1ea5c:	b570      	push	{r4, r5, r6, lr}
   1ea5e:	188e      	adds	r6, r1, r2
   1ea60:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1ea64:	b0a0      	sub	sp, #128	; 0x80
   1ea66:	460b      	mov	r3, r1
   1ea68:	4614      	mov	r4, r2
   1ea6a:	4605      	mov	r5, r0
   1ea6c:	d801      	bhi.n	1ea72 <cc_mbedtls_sha256_update+0x16>
   1ea6e:	2a80      	cmp	r2, #128	; 0x80
   1ea70:	d90c      	bls.n	1ea8c <cc_mbedtls_sha256_update+0x30>
   1ea72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ea76:	d917      	bls.n	1eaa8 <cc_mbedtls_sha256_update+0x4c>
   1ea78:	4622      	mov	r2, r4
   1ea7a:	4619      	mov	r1, r3
   1ea7c:	4628      	mov	r0, r5
   1ea7e:	f000 f87d 	bl	1eb7c <mbedtls_sha_update_internal>
   1ea82:	4604      	mov	r4, r0
   1ea84:	b984      	cbnz	r4, 1eaa8 <cc_mbedtls_sha256_update+0x4c>
   1ea86:	4620      	mov	r0, r4
   1ea88:	b020      	add	sp, #128	; 0x80
   1ea8a:	bd70      	pop	{r4, r5, r6, pc}
   1ea8c:	4668      	mov	r0, sp
   1ea8e:	f000 f949 	bl	1ed24 <CC_PalMemCopyPlat>
   1ea92:	4622      	mov	r2, r4
   1ea94:	4669      	mov	r1, sp
   1ea96:	4628      	mov	r0, r5
   1ea98:	f000 f870 	bl	1eb7c <mbedtls_sha_update_internal>
   1ea9c:	2180      	movs	r1, #128	; 0x80
   1ea9e:	4604      	mov	r4, r0
   1eaa0:	4668      	mov	r0, sp
   1eaa2:	f000 f943 	bl	1ed2c <CC_PalMemSetZeroPlat>
   1eaa6:	e7ed      	b.n	1ea84 <cc_mbedtls_sha256_update+0x28>
   1eaa8:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1eaac:	e7eb      	b.n	1ea86 <cc_mbedtls_sha256_update+0x2a>
   1eaae:	bf00      	nop

0001eab0 <cc_mbedtls_sha256_finish>:
   1eab0:	b570      	push	{r4, r5, r6, lr}
   1eab2:	b1e8      	cbz	r0, 1eaf0 <cc_mbedtls_sha256_finish+0x40>
   1eab4:	460e      	mov	r6, r1
   1eab6:	b1d9      	cbz	r1, 1eaf0 <cc_mbedtls_sha256_finish+0x40>
   1eab8:	4604      	mov	r4, r0
   1eaba:	f000 f831 	bl	1eb20 <mbedtls_sha_finish_internal>
   1eabe:	4605      	mov	r5, r0
   1eac0:	b9b0      	cbnz	r0, 1eaf0 <cc_mbedtls_sha256_finish+0x40>
   1eac2:	6823      	ldr	r3, [r4, #0]
   1eac4:	2b01      	cmp	r3, #1
   1eac6:	d00b      	beq.n	1eae0 <cc_mbedtls_sha256_finish+0x30>
   1eac8:	2b02      	cmp	r3, #2
   1eaca:	d001      	beq.n	1ead0 <cc_mbedtls_sha256_finish+0x20>
   1eacc:	4628      	mov	r0, r5
   1eace:	bd70      	pop	{r4, r5, r6, pc}
   1ead0:	f104 0108 	add.w	r1, r4, #8
   1ead4:	4630      	mov	r0, r6
   1ead6:	221c      	movs	r2, #28
   1ead8:	f000 f924 	bl	1ed24 <CC_PalMemCopyPlat>
   1eadc:	4628      	mov	r0, r5
   1eade:	bd70      	pop	{r4, r5, r6, pc}
   1eae0:	f104 0108 	add.w	r1, r4, #8
   1eae4:	4630      	mov	r0, r6
   1eae6:	2220      	movs	r2, #32
   1eae8:	f000 f91c 	bl	1ed24 <CC_PalMemCopyPlat>
   1eaec:	4628      	mov	r0, r5
   1eaee:	bd70      	pop	{r4, r5, r6, pc}
   1eaf0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1eaf4:	e7ea      	b.n	1eacc <cc_mbedtls_sha256_finish+0x1c>
   1eaf6:	bf00      	nop

0001eaf8 <mbedtls_sha_starts_internal>:
   1eaf8:	b178      	cbz	r0, 1eb1a <mbedtls_sha_starts_internal+0x22>
   1eafa:	b538      	push	{r3, r4, r5, lr}
   1eafc:	4604      	mov	r4, r0
   1eafe:	460d      	mov	r5, r1
   1eb00:	21f0      	movs	r1, #240	; 0xf0
   1eb02:	f000 f913 	bl	1ed2c <CC_PalMemSetZeroPlat>
   1eb06:	2340      	movs	r3, #64	; 0x40
   1eb08:	6025      	str	r5, [r4, #0]
   1eb0a:	65e3      	str	r3, [r4, #92]	; 0x5c
   1eb0c:	4620      	mov	r0, r4
   1eb0e:	f000 f9e5 	bl	1eedc <InitHashDrv>
   1eb12:	3800      	subs	r0, #0
   1eb14:	bf18      	it	ne
   1eb16:	2001      	movne	r0, #1
   1eb18:	bd38      	pop	{r3, r4, r5, pc}
   1eb1a:	2001      	movs	r0, #1
   1eb1c:	4770      	bx	lr
   1eb1e:	bf00      	nop

0001eb20 <mbedtls_sha_finish_internal>:
   1eb20:	b570      	push	{r4, r5, r6, lr}
   1eb22:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1eb24:	b0a4      	sub	sp, #144	; 0x90
   1eb26:	4604      	mov	r4, r0
   1eb28:	ae04      	add	r6, sp, #16
   1eb2a:	b9e5      	cbnz	r5, 1eb66 <mbedtls_sha_finish_internal+0x46>
   1eb2c:	2201      	movs	r2, #1
   1eb2e:	2300      	movs	r3, #0
   1eb30:	6062      	str	r2, [r4, #4]
   1eb32:	4630      	mov	r0, r6
   1eb34:	e9cd 3300 	strd	r3, r3, [sp]
   1eb38:	aa02      	add	r2, sp, #8
   1eb3a:	4629      	mov	r1, r5
   1eb3c:	f000 f99a 	bl	1ee74 <SetDataBuffersInfo>
   1eb40:	b110      	cbz	r0, 1eb48 <mbedtls_sha_finish_internal+0x28>
   1eb42:	2001      	movs	r0, #1
   1eb44:	b024      	add	sp, #144	; 0x90
   1eb46:	bd70      	pop	{r4, r5, r6, pc}
   1eb48:	462a      	mov	r2, r5
   1eb4a:	a902      	add	r1, sp, #8
   1eb4c:	4620      	mov	r0, r4
   1eb4e:	f000 f9ef 	bl	1ef30 <ProcessHashDrv>
   1eb52:	2800      	cmp	r0, #0
   1eb54:	d1f5      	bne.n	1eb42 <mbedtls_sha_finish_internal+0x22>
   1eb56:	4620      	mov	r0, r4
   1eb58:	f000 fb18 	bl	1f18c <FinishHashDrv>
   1eb5c:	2800      	cmp	r0, #0
   1eb5e:	d1f0      	bne.n	1eb42 <mbedtls_sha_finish_internal+0x22>
   1eb60:	6620      	str	r0, [r4, #96]	; 0x60
   1eb62:	b024      	add	sp, #144	; 0x90
   1eb64:	bd70      	pop	{r4, r5, r6, pc}
   1eb66:	2d80      	cmp	r5, #128	; 0x80
   1eb68:	462a      	mov	r2, r5
   1eb6a:	4630      	mov	r0, r6
   1eb6c:	bf28      	it	cs
   1eb6e:	2280      	movcs	r2, #128	; 0x80
   1eb70:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1eb74:	f000 f8d6 	bl	1ed24 <CC_PalMemCopyPlat>
   1eb78:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1eb7a:	e7d7      	b.n	1eb2c <mbedtls_sha_finish_internal+0xc>

0001eb7c <mbedtls_sha_update_internal>:
   1eb7c:	2800      	cmp	r0, #0
   1eb7e:	d054      	beq.n	1ec2a <mbedtls_sha_update_internal+0xae>
   1eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb82:	4614      	mov	r4, r2
   1eb84:	b0a5      	sub	sp, #148	; 0x94
   1eb86:	b1b2      	cbz	r2, 1ebb6 <mbedtls_sha_update_internal+0x3a>
   1eb88:	460e      	mov	r6, r1
   1eb8a:	b351      	cbz	r1, 1ebe2 <mbedtls_sha_update_internal+0x66>
   1eb8c:	4605      	mov	r5, r0
   1eb8e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1eb92:	1a1a      	subs	r2, r3, r0
   1eb94:	fbb2 f7f3 	udiv	r7, r2, r3
   1eb98:	fb03 2717 	mls	r7, r3, r7, r2
   1eb9c:	42a7      	cmp	r7, r4
   1eb9e:	bf28      	it	cs
   1eba0:	4627      	movcs	r7, r4
   1eba2:	2f00      	cmp	r7, #0
   1eba4:	d143      	bne.n	1ec2e <mbedtls_sha_update_internal+0xb2>
   1eba6:	4283      	cmp	r3, r0
   1eba8:	d008      	beq.n	1ebbc <mbedtls_sha_update_internal+0x40>
   1ebaa:	fbb4 f7f3 	udiv	r7, r4, r3
   1ebae:	fb03 f707 	mul.w	r7, r3, r7
   1ebb2:	b9cf      	cbnz	r7, 1ebe8 <mbedtls_sha_update_internal+0x6c>
   1ebb4:	bb6c      	cbnz	r4, 1ec12 <mbedtls_sha_update_internal+0x96>
   1ebb6:	2000      	movs	r0, #0
   1ebb8:	b025      	add	sp, #148	; 0x94
   1ebba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ebbc:	2b80      	cmp	r3, #128	; 0x80
   1ebbe:	bf28      	it	cs
   1ebc0:	2380      	movcs	r3, #128	; 0x80
   1ebc2:	461a      	mov	r2, r3
   1ebc4:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1ebc8:	a804      	add	r0, sp, #16
   1ebca:	f000 f8ab 	bl	1ed24 <CC_PalMemCopyPlat>
   1ebce:	2300      	movs	r3, #0
   1ebd0:	e9cd 3300 	strd	r3, r3, [sp]
   1ebd4:	a804      	add	r0, sp, #16
   1ebd6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1ebd8:	aa02      	add	r2, sp, #8
   1ebda:	f000 f94b 	bl	1ee74 <SetDataBuffersInfo>
   1ebde:	2800      	cmp	r0, #0
   1ebe0:	d032      	beq.n	1ec48 <mbedtls_sha_update_internal+0xcc>
   1ebe2:	2001      	movs	r0, #1
   1ebe4:	b025      	add	sp, #148	; 0x94
   1ebe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ebe8:	2300      	movs	r3, #0
   1ebea:	e9cd 3300 	strd	r3, r3, [sp]
   1ebee:	aa02      	add	r2, sp, #8
   1ebf0:	4639      	mov	r1, r7
   1ebf2:	4630      	mov	r0, r6
   1ebf4:	f000 f93e 	bl	1ee74 <SetDataBuffersInfo>
   1ebf8:	2800      	cmp	r0, #0
   1ebfa:	d1f2      	bne.n	1ebe2 <mbedtls_sha_update_internal+0x66>
   1ebfc:	a902      	add	r1, sp, #8
   1ebfe:	463a      	mov	r2, r7
   1ec00:	4628      	mov	r0, r5
   1ec02:	f000 f995 	bl	1ef30 <ProcessHashDrv>
   1ec06:	2800      	cmp	r0, #0
   1ec08:	d1eb      	bne.n	1ebe2 <mbedtls_sha_update_internal+0x66>
   1ec0a:	1be4      	subs	r4, r4, r7
   1ec0c:	443e      	add	r6, r7
   1ec0e:	2c00      	cmp	r4, #0
   1ec10:	d0d1      	beq.n	1ebb6 <mbedtls_sha_update_internal+0x3a>
   1ec12:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1ec14:	3019      	adds	r0, #25
   1ec16:	4622      	mov	r2, r4
   1ec18:	4631      	mov	r1, r6
   1ec1a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1ec1e:	f000 f881 	bl	1ed24 <CC_PalMemCopyPlat>
   1ec22:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1ec24:	4422      	add	r2, r4
   1ec26:	662a      	str	r2, [r5, #96]	; 0x60
   1ec28:	e7c5      	b.n	1ebb6 <mbedtls_sha_update_internal+0x3a>
   1ec2a:	2001      	movs	r0, #1
   1ec2c:	4770      	bx	lr
   1ec2e:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1ec32:	4418      	add	r0, r3
   1ec34:	463a      	mov	r2, r7
   1ec36:	f000 f875 	bl	1ed24 <CC_PalMemCopyPlat>
   1ec3a:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1ec3e:	4438      	add	r0, r7
   1ec40:	443e      	add	r6, r7
   1ec42:	1be4      	subs	r4, r4, r7
   1ec44:	6628      	str	r0, [r5, #96]	; 0x60
   1ec46:	e7ae      	b.n	1eba6 <mbedtls_sha_update_internal+0x2a>
   1ec48:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1ec4a:	a902      	add	r1, sp, #8
   1ec4c:	4628      	mov	r0, r5
   1ec4e:	f000 f96f 	bl	1ef30 <ProcessHashDrv>
   1ec52:	2800      	cmp	r0, #0
   1ec54:	d1c5      	bne.n	1ebe2 <mbedtls_sha_update_internal+0x66>
   1ec56:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ec58:	6628      	str	r0, [r5, #96]	; 0x60
   1ec5a:	e7a6      	b.n	1ebaa <mbedtls_sha_update_internal+0x2e>

0001ec5c <cc_mbedtls_sha256>:
   1ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec5e:	461c      	mov	r4, r3
   1ec60:	4605      	mov	r5, r0
   1ec62:	4811      	ldr	r0, [pc, #68]	; (1eca8 <cc_mbedtls_sha256+0x4c>)
   1ec64:	460e      	mov	r6, r1
   1ec66:	4617      	mov	r7, r2
   1ec68:	f7ff feca 	bl	1ea00 <cc_mbedtls_sha256_init>
   1ec6c:	4621      	mov	r1, r4
   1ec6e:	480e      	ldr	r0, [pc, #56]	; (1eca8 <cc_mbedtls_sha256+0x4c>)
   1ec70:	f7ff fee0 	bl	1ea34 <cc_mbedtls_sha256_starts>
   1ec74:	4604      	mov	r4, r0
   1ec76:	b120      	cbz	r0, 1ec82 <cc_mbedtls_sha256+0x26>
   1ec78:	480b      	ldr	r0, [pc, #44]	; (1eca8 <cc_mbedtls_sha256+0x4c>)
   1ec7a:	f7ff fed5 	bl	1ea28 <cc_mbedtls_sha256_free>
   1ec7e:	4620      	mov	r0, r4
   1ec80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec82:	4809      	ldr	r0, [pc, #36]	; (1eca8 <cc_mbedtls_sha256+0x4c>)
   1ec84:	4632      	mov	r2, r6
   1ec86:	4629      	mov	r1, r5
   1ec88:	f7ff fee8 	bl	1ea5c <cc_mbedtls_sha256_update>
   1ec8c:	4604      	mov	r4, r0
   1ec8e:	2800      	cmp	r0, #0
   1ec90:	d1f2      	bne.n	1ec78 <cc_mbedtls_sha256+0x1c>
   1ec92:	4639      	mov	r1, r7
   1ec94:	4804      	ldr	r0, [pc, #16]	; (1eca8 <cc_mbedtls_sha256+0x4c>)
   1ec96:	f7ff ff0b 	bl	1eab0 <cc_mbedtls_sha256_finish>
   1ec9a:	4604      	mov	r4, r0
   1ec9c:	4802      	ldr	r0, [pc, #8]	; (1eca8 <cc_mbedtls_sha256+0x4c>)
   1ec9e:	f7ff fec3 	bl	1ea28 <cc_mbedtls_sha256_free>
   1eca2:	4620      	mov	r0, r4
   1eca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eca6:	bf00      	nop
   1eca8:	200035c8 	.word	0x200035c8

0001ecac <RNG_PLAT_SetUserRngParameters>:
   1ecac:	b530      	push	{r4, r5, lr}
   1ecae:	b083      	sub	sp, #12
   1ecb0:	231c      	movs	r3, #28
   1ecb2:	a901      	add	r1, sp, #4
   1ecb4:	4604      	mov	r4, r0
   1ecb6:	9301      	str	r3, [sp, #4]
   1ecb8:	f000 f83c 	bl	1ed34 <CC_PalTrngParamGet>
   1ecbc:	4605      	mov	r5, r0
   1ecbe:	b938      	cbnz	r0, 1ecd0 <RNG_PLAT_SetUserRngParameters+0x24>
   1ecc0:	9b01      	ldr	r3, [sp, #4]
   1ecc2:	2b1c      	cmp	r3, #28
   1ecc4:	d007      	beq.n	1ecd6 <RNG_PLAT_SetUserRngParameters+0x2a>
   1ecc6:	4d15      	ldr	r5, [pc, #84]	; (1ed1c <RNG_PLAT_SetUserRngParameters+0x70>)
   1ecc8:	4620      	mov	r0, r4
   1ecca:	211c      	movs	r1, #28
   1eccc:	f000 f82e 	bl	1ed2c <CC_PalMemSetZeroPlat>
   1ecd0:	4628      	mov	r0, r5
   1ecd2:	b003      	add	sp, #12
   1ecd4:	bd30      	pop	{r4, r5, pc}
   1ecd6:	e9d4 3200 	ldrd	r3, r2, [r4]
   1ecda:	2101      	movs	r1, #1
   1ecdc:	3b00      	subs	r3, #0
   1ecde:	bf18      	it	ne
   1ece0:	2301      	movne	r3, #1
   1ece2:	61e1      	str	r1, [r4, #28]
   1ece4:	b10a      	cbz	r2, 1ecea <RNG_PLAT_SetUserRngParameters+0x3e>
   1ece6:	f043 0302 	orr.w	r3, r3, #2
   1ecea:	68a2      	ldr	r2, [r4, #8]
   1ecec:	b932      	cbnz	r2, 1ecfc <RNG_PLAT_SetUserRngParameters+0x50>
   1ecee:	68e2      	ldr	r2, [r4, #12]
   1ecf0:	b942      	cbnz	r2, 1ed04 <RNG_PLAT_SetUserRngParameters+0x58>
   1ecf2:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1ecf6:	b97b      	cbnz	r3, 1ed18 <RNG_PLAT_SetUserRngParameters+0x6c>
   1ecf8:	4d09      	ldr	r5, [pc, #36]	; (1ed20 <RNG_PLAT_SetUserRngParameters+0x74>)
   1ecfa:	e7e5      	b.n	1ecc8 <RNG_PLAT_SetUserRngParameters+0x1c>
   1ecfc:	68e2      	ldr	r2, [r4, #12]
   1ecfe:	f043 0304 	orr.w	r3, r3, #4
   1ed02:	b13a      	cbz	r2, 1ed14 <RNG_PLAT_SetUserRngParameters+0x68>
   1ed04:	f043 0308 	orr.w	r3, r3, #8
   1ed08:	2200      	movs	r2, #0
   1ed0a:	4628      	mov	r0, r5
   1ed0c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1ed10:	b003      	add	sp, #12
   1ed12:	bd30      	pop	{r4, r5, pc}
   1ed14:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1ed18:	4615      	mov	r5, r2
   1ed1a:	e7d9      	b.n	1ecd0 <RNG_PLAT_SetUserRngParameters+0x24>
   1ed1c:	00f00c37 	.word	0x00f00c37
   1ed20:	00f00c0e 	.word	0x00f00c0e

0001ed24 <CC_PalMemCopyPlat>:
   1ed24:	f005 bdf6 	b.w	24914 <memmove>

0001ed28 <CC_PalMemSetPlat>:
   1ed28:	f005 be0e 	b.w	24948 <memset>

0001ed2c <CC_PalMemSetZeroPlat>:
   1ed2c:	460a      	mov	r2, r1
   1ed2e:	2100      	movs	r1, #0
   1ed30:	f005 be0a 	b.w	24948 <memset>

0001ed34 <CC_PalTrngParamGet>:
   1ed34:	b118      	cbz	r0, 1ed3e <CC_PalTrngParamGet+0xa>
   1ed36:	b111      	cbz	r1, 1ed3e <CC_PalTrngParamGet+0xa>
   1ed38:	680b      	ldr	r3, [r1, #0]
   1ed3a:	2b1c      	cmp	r3, #28
   1ed3c:	d001      	beq.n	1ed42 <CC_PalTrngParamGet+0xe>
   1ed3e:	2001      	movs	r0, #1
   1ed40:	4770      	bx	lr
   1ed42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed46:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1ed4a:	3201      	adds	r2, #1
   1ed4c:	bf14      	ite	ne
   1ed4e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1ed52:	f241 225c 	movweq	r2, #4700	; 0x125c
   1ed56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed5a:	6002      	str	r2, [r0, #0]
   1ed5c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1ed60:	3201      	adds	r2, #1
   1ed62:	bf14      	ite	ne
   1ed64:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1ed68:	f641 1264 	movweq	r2, #6500	; 0x1964
   1ed6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed70:	6042      	str	r2, [r0, #4]
   1ed72:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1ed76:	3201      	adds	r2, #1
   1ed78:	bf14      	ite	ne
   1ed7a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1ed7e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1ed82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed86:	6082      	str	r2, [r0, #8]
   1ed88:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1ed8c:	3201      	adds	r2, #1
   1ed8e:	bf14      	ite	ne
   1ed90:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1ed94:	f241 3288 	movweq	r2, #5000	; 0x1388
   1ed98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed9c:	60c2      	str	r2, [r0, #12]
   1ed9e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1eda2:	3201      	adds	r2, #1
   1eda4:	bf14      	ite	ne
   1eda6:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1edaa:	2290      	moveq	r2, #144	; 0x90
   1edac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1edb0:	6102      	str	r2, [r0, #16]
   1edb2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1edb6:	3201      	adds	r2, #1
   1edb8:	bf14      	ite	ne
   1edba:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1edbe:	2251      	moveq	r2, #81	; 0x51
   1edc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1edc4:	6142      	str	r2, [r0, #20]
   1edc6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1edca:	3201      	adds	r2, #1
   1edcc:	bf14      	ite	ne
   1edce:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1edd2:	f240 3337 	movweq	r3, #823	; 0x337
   1edd6:	6183      	str	r3, [r0, #24]
   1edd8:	2000      	movs	r0, #0
   1edda:	4770      	bx	lr

0001eddc <LLF_RND_WaitRngInterrupt>:
   1eddc:	b508      	push	{r3, lr}
   1edde:	4601      	mov	r1, r0
   1ede0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1ede4:	f7ff f95a 	bl	1e09c <CC_HalWaitInterruptRND>
   1ede8:	4902      	ldr	r1, [pc, #8]	; (1edf4 <LLF_RND_WaitRngInterrupt+0x18>)
   1edea:	4a03      	ldr	r2, [pc, #12]	; (1edf8 <LLF_RND_WaitRngInterrupt+0x1c>)
   1edec:	2300      	movs	r3, #0
   1edee:	600b      	str	r3, [r1, #0]
   1edf0:	6013      	str	r3, [r2, #0]
   1edf2:	bd08      	pop	{r3, pc}
   1edf4:	5002b1c8 	.word	0x5002b1c8
   1edf8:	5002b12c 	.word	0x5002b12c

0001edfc <LLF_RND_GetRoscSampleCnt>:
   1edfc:	3801      	subs	r0, #1
   1edfe:	2807      	cmp	r0, #7
   1ee00:	d805      	bhi.n	1ee0e <LLF_RND_GetRoscSampleCnt+0x12>
   1ee02:	e8df f000 	tbb	[pc, r0]
   1ee06:	0e0a      	.short	0x0e0a
   1ee08:	04041204 	.word	0x04041204
   1ee0c:	0604      	.short	0x0604
   1ee0e:	4809      	ldr	r0, [pc, #36]	; (1ee34 <LLF_RND_GetRoscSampleCnt+0x38>)
   1ee10:	4770      	bx	lr
   1ee12:	68cb      	ldr	r3, [r1, #12]
   1ee14:	624b      	str	r3, [r1, #36]	; 0x24
   1ee16:	2000      	movs	r0, #0
   1ee18:	4770      	bx	lr
   1ee1a:	680b      	ldr	r3, [r1, #0]
   1ee1c:	624b      	str	r3, [r1, #36]	; 0x24
   1ee1e:	2000      	movs	r0, #0
   1ee20:	4770      	bx	lr
   1ee22:	684b      	ldr	r3, [r1, #4]
   1ee24:	624b      	str	r3, [r1, #36]	; 0x24
   1ee26:	2000      	movs	r0, #0
   1ee28:	4770      	bx	lr
   1ee2a:	688b      	ldr	r3, [r1, #8]
   1ee2c:	624b      	str	r3, [r1, #36]	; 0x24
   1ee2e:	2000      	movs	r0, #0
   1ee30:	4770      	bx	lr
   1ee32:	bf00      	nop
   1ee34:	00f10c31 	.word	0x00f10c31

0001ee38 <LLF_RND_GetFastestRosc>:
   1ee38:	680b      	ldr	r3, [r1, #0]
   1ee3a:	e002      	b.n	1ee42 <LLF_RND_GetFastestRosc+0xa>
   1ee3c:	2b08      	cmp	r3, #8
   1ee3e:	600b      	str	r3, [r1, #0]
   1ee40:	d806      	bhi.n	1ee50 <LLF_RND_GetFastestRosc+0x18>
   1ee42:	6a02      	ldr	r2, [r0, #32]
   1ee44:	4213      	tst	r3, r2
   1ee46:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ee4a:	d0f7      	beq.n	1ee3c <LLF_RND_GetFastestRosc+0x4>
   1ee4c:	2000      	movs	r0, #0
   1ee4e:	4770      	bx	lr
   1ee50:	4800      	ldr	r0, [pc, #0]	; (1ee54 <LLF_RND_GetFastestRosc+0x1c>)
   1ee52:	4770      	bx	lr
   1ee54:	00f10c31 	.word	0x00f10c31

0001ee58 <LLF_RND_TurnOffTrng>:
   1ee58:	4904      	ldr	r1, [pc, #16]	; (1ee6c <LLF_RND_TurnOffTrng+0x14>)
   1ee5a:	4a05      	ldr	r2, [pc, #20]	; (1ee70 <LLF_RND_TurnOffTrng+0x18>)
   1ee5c:	2300      	movs	r3, #0
   1ee5e:	600b      	str	r3, [r1, #0]
   1ee60:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1ee64:	6013      	str	r3, [r2, #0]
   1ee66:	f7ff b8ff 	b.w	1e068 <CC_HalClearInterruptBit>
   1ee6a:	bf00      	nop
   1ee6c:	5002b12c 	.word	0x5002b12c
   1ee70:	5002b1c4 	.word	0x5002b1c4

0001ee74 <SetDataBuffersInfo>:
   1ee74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee76:	b083      	sub	sp, #12
   1ee78:	2400      	movs	r4, #0
   1ee7a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1ee7e:	f88d 4007 	strb.w	r4, [sp, #7]
   1ee82:	d325      	bcc.n	1eed0 <SetDataBuffersInfo+0x5c>
   1ee84:	460c      	mov	r4, r1
   1ee86:	4404      	add	r4, r0
   1ee88:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1ee8c:	4605      	mov	r5, r0
   1ee8e:	d81f      	bhi.n	1eed0 <SetDataBuffersInfo+0x5c>
   1ee90:	4617      	mov	r7, r2
   1ee92:	461e      	mov	r6, r3
   1ee94:	2201      	movs	r2, #1
   1ee96:	f10d 0307 	add.w	r3, sp, #7
   1ee9a:	f000 fe7f 	bl	1fb9c <CC_PalDataBufferAttrGet>
   1ee9e:	4604      	mov	r4, r0
   1eea0:	b9b0      	cbnz	r0, 1eed0 <SetDataBuffersInfo+0x5c>
   1eea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1eea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1eea8:	603d      	str	r5, [r7, #0]
   1eeaa:	713b      	strb	r3, [r7, #4]
   1eeac:	b192      	cbz	r2, 1eed4 <SetDataBuffersInfo+0x60>
   1eeae:	b14e      	cbz	r6, 1eec4 <SetDataBuffersInfo+0x50>
   1eeb0:	4602      	mov	r2, r0
   1eeb2:	9908      	ldr	r1, [sp, #32]
   1eeb4:	f10d 0307 	add.w	r3, sp, #7
   1eeb8:	4630      	mov	r0, r6
   1eeba:	f000 fe6f 	bl	1fb9c <CC_PalDataBufferAttrGet>
   1eebe:	b938      	cbnz	r0, 1eed0 <SetDataBuffersInfo+0x5c>
   1eec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1eec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1eec6:	4620      	mov	r0, r4
   1eec8:	6016      	str	r6, [r2, #0]
   1eeca:	7113      	strb	r3, [r2, #4]
   1eecc:	b003      	add	sp, #12
   1eece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eed0:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1eed4:	4620      	mov	r0, r4
   1eed6:	b003      	add	sp, #12
   1eed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eeda:	bf00      	nop

0001eedc <InitHashDrv>:
   1eedc:	b1e8      	cbz	r0, 1ef1a <InitHashDrv+0x3e>
   1eede:	b510      	push	{r4, lr}
   1eee0:	6804      	ldr	r4, [r0, #0]
   1eee2:	2c01      	cmp	r4, #1
   1eee4:	d004      	beq.n	1eef0 <InitHashDrv+0x14>
   1eee6:	2c02      	cmp	r4, #2
   1eee8:	d010      	beq.n	1ef0c <InitHashDrv+0x30>
   1eeea:	b144      	cbz	r4, 1eefe <InitHashDrv+0x22>
   1eeec:	480c      	ldr	r0, [pc, #48]	; (1ef20 <InitHashDrv+0x44>)
   1eeee:	bd10      	pop	{r4, pc}
   1eef0:	490c      	ldr	r1, [pc, #48]	; (1ef24 <InitHashDrv+0x48>)
   1eef2:	2220      	movs	r2, #32
   1eef4:	3008      	adds	r0, #8
   1eef6:	f7ff ff15 	bl	1ed24 <CC_PalMemCopyPlat>
   1eefa:	2000      	movs	r0, #0
   1eefc:	bd10      	pop	{r4, pc}
   1eefe:	490a      	ldr	r1, [pc, #40]	; (1ef28 <InitHashDrv+0x4c>)
   1ef00:	2214      	movs	r2, #20
   1ef02:	3008      	adds	r0, #8
   1ef04:	f7ff ff0e 	bl	1ed24 <CC_PalMemCopyPlat>
   1ef08:	4620      	mov	r0, r4
   1ef0a:	bd10      	pop	{r4, pc}
   1ef0c:	4907      	ldr	r1, [pc, #28]	; (1ef2c <InitHashDrv+0x50>)
   1ef0e:	2220      	movs	r2, #32
   1ef10:	3008      	adds	r0, #8
   1ef12:	f7ff ff07 	bl	1ed24 <CC_PalMemCopyPlat>
   1ef16:	2000      	movs	r0, #0
   1ef18:	bd10      	pop	{r4, pc}
   1ef1a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1ef1e:	4770      	bx	lr
   1ef20:	00f30001 	.word	0x00f30001
   1ef24:	00026f64 	.word	0x00026f64
   1ef28:	00026f30 	.word	0x00026f30
   1ef2c:	00026f44 	.word	0x00026f44

0001ef30 <ProcessHashDrv>:
   1ef30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef34:	2900      	cmp	r1, #0
   1ef36:	f000 80ef 	beq.w	1f118 <ProcessHashDrv+0x1e8>
   1ef3a:	4604      	mov	r4, r0
   1ef3c:	2800      	cmp	r0, #0
   1ef3e:	f000 80ef 	beq.w	1f120 <ProcessHashDrv+0x1f0>
   1ef42:	6803      	ldr	r3, [r0, #0]
   1ef44:	4617      	mov	r7, r2
   1ef46:	460e      	mov	r6, r1
   1ef48:	2b00      	cmp	r3, #0
   1ef4a:	f000 80b9 	beq.w	1f0c0 <ProcessHashDrv+0x190>
   1ef4e:	3b01      	subs	r3, #1
   1ef50:	2b01      	cmp	r3, #1
   1ef52:	f200 80cd 	bhi.w	1f0f0 <ProcessHashDrv+0x1c0>
   1ef56:	4874      	ldr	r0, [pc, #464]	; (1f128 <ProcessHashDrv+0x1f8>)
   1ef58:	f04f 31ff 	mov.w	r1, #4294967295
   1ef5c:	f04f 0802 	mov.w	r8, #2
   1ef60:	f7ff f92a 	bl	1e1b8 <CC_PalMutexLock>
   1ef64:	2800      	cmp	r0, #0
   1ef66:	f040 80b5 	bne.w	1f0d4 <ProcessHashDrv+0x1a4>
   1ef6a:	2000      	movs	r0, #0
   1ef6c:	f7ff f954 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1ef70:	4605      	mov	r5, r0
   1ef72:	2800      	cmp	r0, #0
   1ef74:	f040 80b8 	bne.w	1f0e8 <ProcessHashDrv+0x1b8>
   1ef78:	4a6c      	ldr	r2, [pc, #432]	; (1f12c <ProcessHashDrv+0x1fc>)
   1ef7a:	6813      	ldr	r3, [r2, #0]
   1ef7c:	2b00      	cmp	r3, #0
   1ef7e:	d1fc      	bne.n	1ef7a <ProcessHashDrv+0x4a>
   1ef80:	486b      	ldr	r0, [pc, #428]	; (1f130 <ProcessHashDrv+0x200>)
   1ef82:	6803      	ldr	r3, [r0, #0]
   1ef84:	2b00      	cmp	r3, #0
   1ef86:	d1fc      	bne.n	1ef82 <ProcessHashDrv+0x52>
   1ef88:	f04f 30ff 	mov.w	r0, #4294967295
   1ef8c:	f7ff f86c 	bl	1e068 <CC_HalClearInterruptBit>
   1ef90:	4b68      	ldr	r3, [pc, #416]	; (1f134 <ProcessHashDrv+0x204>)
   1ef92:	6818      	ldr	r0, [r3, #0]
   1ef94:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1ef98:	f7ff f874 	bl	1e084 <CC_HalMaskInterrupt>
   1ef9c:	4866      	ldr	r0, [pc, #408]	; (1f138 <ProcessHashDrv+0x208>)
   1ef9e:	4a67      	ldr	r2, [pc, #412]	; (1f13c <ProcessHashDrv+0x20c>)
   1efa0:	4967      	ldr	r1, [pc, #412]	; (1f140 <ProcessHashDrv+0x210>)
   1efa2:	2301      	movs	r3, #1
   1efa4:	6003      	str	r3, [r0, #0]
   1efa6:	2007      	movs	r0, #7
   1efa8:	6010      	str	r0, [r2, #0]
   1efaa:	600b      	str	r3, [r1, #0]
   1efac:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1efb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1efb2:	6013      	str	r3, [r2, #0]
   1efb4:	4b63      	ldr	r3, [pc, #396]	; (1f144 <ProcessHashDrv+0x214>)
   1efb6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1efb8:	6051      	str	r1, [r2, #4]
   1efba:	f8c3 8000 	str.w	r8, [r3]
   1efbe:	6823      	ldr	r3, [r4, #0]
   1efc0:	b15b      	cbz	r3, 1efda <ProcessHashDrv+0xaa>
   1efc2:	3b01      	subs	r3, #1
   1efc4:	2b01      	cmp	r3, #1
   1efc6:	d817      	bhi.n	1eff8 <ProcessHashDrv+0xc8>
   1efc8:	4b5f      	ldr	r3, [pc, #380]	; (1f148 <ProcessHashDrv+0x218>)
   1efca:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1efcc:	601a      	str	r2, [r3, #0]
   1efce:	6a22      	ldr	r2, [r4, #32]
   1efd0:	f843 2c04 	str.w	r2, [r3, #-4]
   1efd4:	69e2      	ldr	r2, [r4, #28]
   1efd6:	f843 2c08 	str.w	r2, [r3, #-8]
   1efda:	4b5c      	ldr	r3, [pc, #368]	; (1f14c <ProcessHashDrv+0x21c>)
   1efdc:	69a2      	ldr	r2, [r4, #24]
   1efde:	601a      	str	r2, [r3, #0]
   1efe0:	6962      	ldr	r2, [r4, #20]
   1efe2:	f843 2c04 	str.w	r2, [r3, #-4]
   1efe6:	6922      	ldr	r2, [r4, #16]
   1efe8:	f843 2c08 	str.w	r2, [r3, #-8]
   1efec:	68e2      	ldr	r2, [r4, #12]
   1efee:	f843 2c0c 	str.w	r2, [r3, #-12]
   1eff2:	68a2      	ldr	r2, [r4, #8]
   1eff4:	f843 2c10 	str.w	r2, [r3, #-16]
   1eff8:	4a55      	ldr	r2, [pc, #340]	; (1f150 <ProcessHashDrv+0x220>)
   1effa:	6813      	ldr	r3, [r2, #0]
   1effc:	2b00      	cmp	r3, #0
   1effe:	d1fc      	bne.n	1effa <ProcessHashDrv+0xca>
   1f000:	2f00      	cmp	r7, #0
   1f002:	d059      	beq.n	1f0b8 <ProcessHashDrv+0x188>
   1f004:	6863      	ldr	r3, [r4, #4]
   1f006:	2b01      	cmp	r3, #1
   1f008:	bf04      	itt	eq
   1f00a:	4a52      	ldreq	r2, [pc, #328]	; (1f154 <ProcessHashDrv+0x224>)
   1f00c:	6013      	streq	r3, [r2, #0]
   1f00e:	4a52      	ldr	r2, [pc, #328]	; (1f158 <ProcessHashDrv+0x228>)
   1f010:	4b52      	ldr	r3, [pc, #328]	; (1f15c <ProcessHashDrv+0x22c>)
   1f012:	6831      	ldr	r1, [r6, #0]
   1f014:	6011      	str	r1, [r2, #0]
   1f016:	2040      	movs	r0, #64	; 0x40
   1f018:	601f      	str	r7, [r3, #0]
   1f01a:	f7ff f839 	bl	1e090 <CC_HalWaitInterrupt>
   1f01e:	4605      	mov	r5, r0
   1f020:	4a4b      	ldr	r2, [pc, #300]	; (1f150 <ProcessHashDrv+0x220>)
   1f022:	6813      	ldr	r3, [r2, #0]
   1f024:	2b00      	cmp	r3, #0
   1f026:	d1fc      	bne.n	1f022 <ProcessHashDrv+0xf2>
   1f028:	4a41      	ldr	r2, [pc, #260]	; (1f130 <ProcessHashDrv+0x200>)
   1f02a:	6813      	ldr	r3, [r2, #0]
   1f02c:	2b00      	cmp	r3, #0
   1f02e:	d1fc      	bne.n	1f02a <ProcessHashDrv+0xfa>
   1f030:	6823      	ldr	r3, [r4, #0]
   1f032:	b15b      	cbz	r3, 1f04c <ProcessHashDrv+0x11c>
   1f034:	3b01      	subs	r3, #1
   1f036:	2b01      	cmp	r3, #1
   1f038:	d817      	bhi.n	1f06a <ProcessHashDrv+0x13a>
   1f03a:	4a43      	ldr	r2, [pc, #268]	; (1f148 <ProcessHashDrv+0x218>)
   1f03c:	4b48      	ldr	r3, [pc, #288]	; (1f160 <ProcessHashDrv+0x230>)
   1f03e:	6812      	ldr	r2, [r2, #0]
   1f040:	6262      	str	r2, [r4, #36]	; 0x24
   1f042:	681a      	ldr	r2, [r3, #0]
   1f044:	6222      	str	r2, [r4, #32]
   1f046:	3b04      	subs	r3, #4
   1f048:	681b      	ldr	r3, [r3, #0]
   1f04a:	61e3      	str	r3, [r4, #28]
   1f04c:	4a3f      	ldr	r2, [pc, #252]	; (1f14c <ProcessHashDrv+0x21c>)
   1f04e:	4b45      	ldr	r3, [pc, #276]	; (1f164 <ProcessHashDrv+0x234>)
   1f050:	6812      	ldr	r2, [r2, #0]
   1f052:	61a2      	str	r2, [r4, #24]
   1f054:	681a      	ldr	r2, [r3, #0]
   1f056:	6162      	str	r2, [r4, #20]
   1f058:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1f05c:	6122      	str	r2, [r4, #16]
   1f05e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1f062:	60e2      	str	r2, [r4, #12]
   1f064:	3b0c      	subs	r3, #12
   1f066:	681b      	ldr	r3, [r3, #0]
   1f068:	60a3      	str	r3, [r4, #8]
   1f06a:	4b3f      	ldr	r3, [pc, #252]	; (1f168 <ProcessHashDrv+0x238>)
   1f06c:	4a3f      	ldr	r2, [pc, #252]	; (1f16c <ProcessHashDrv+0x23c>)
   1f06e:	681b      	ldr	r3, [r3, #0]
   1f070:	64a3      	str	r3, [r4, #72]	; 0x48
   1f072:	6812      	ldr	r2, [r2, #0]
   1f074:	4b32      	ldr	r3, [pc, #200]	; (1f140 <ProcessHashDrv+0x210>)
   1f076:	64e2      	str	r2, [r4, #76]	; 0x4c
   1f078:	4836      	ldr	r0, [pc, #216]	; (1f154 <ProcessHashDrv+0x224>)
   1f07a:	493d      	ldr	r1, [pc, #244]	; (1f170 <ProcessHashDrv+0x240>)
   1f07c:	2201      	movs	r2, #1
   1f07e:	601a      	str	r2, [r3, #0]
   1f080:	2300      	movs	r3, #0
   1f082:	4a33      	ldr	r2, [pc, #204]	; (1f150 <ProcessHashDrv+0x220>)
   1f084:	6003      	str	r3, [r0, #0]
   1f086:	600b      	str	r3, [r1, #0]
   1f088:	6813      	ldr	r3, [r2, #0]
   1f08a:	2b00      	cmp	r3, #0
   1f08c:	d1fc      	bne.n	1f088 <ProcessHashDrv+0x158>
   1f08e:	4a2a      	ldr	r2, [pc, #168]	; (1f138 <ProcessHashDrv+0x208>)
   1f090:	6013      	str	r3, [r2, #0]
   1f092:	2d00      	cmp	r5, #0
   1f094:	d13a      	bne.n	1f10c <ProcessHashDrv+0x1dc>
   1f096:	4b27      	ldr	r3, [pc, #156]	; (1f134 <ProcessHashDrv+0x204>)
   1f098:	6818      	ldr	r0, [r3, #0]
   1f09a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1f09e:	f7fe fff1 	bl	1e084 <CC_HalMaskInterrupt>
   1f0a2:	2001      	movs	r0, #1
   1f0a4:	f7ff f8b8 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1f0a8:	bb60      	cbnz	r0, 1f104 <ProcessHashDrv+0x1d4>
   1f0aa:	481f      	ldr	r0, [pc, #124]	; (1f128 <ProcessHashDrv+0x1f8>)
   1f0ac:	f7ff f88c 	bl	1e1c8 <CC_PalMutexUnlock>
   1f0b0:	bb10      	cbnz	r0, 1f0f8 <ProcessHashDrv+0x1c8>
   1f0b2:	4628      	mov	r0, r5
   1f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f0b8:	4b2d      	ldr	r3, [pc, #180]	; (1f170 <ProcessHashDrv+0x240>)
   1f0ba:	2204      	movs	r2, #4
   1f0bc:	601a      	str	r2, [r3, #0]
   1f0be:	e7af      	b.n	1f020 <ProcessHashDrv+0xf0>
   1f0c0:	4819      	ldr	r0, [pc, #100]	; (1f128 <ProcessHashDrv+0x1f8>)
   1f0c2:	f04f 31ff 	mov.w	r1, #4294967295
   1f0c6:	f04f 0801 	mov.w	r8, #1
   1f0ca:	f7ff f875 	bl	1e1b8 <CC_PalMutexLock>
   1f0ce:	2800      	cmp	r0, #0
   1f0d0:	f43f af4b 	beq.w	1ef6a <ProcessHashDrv+0x3a>
   1f0d4:	4827      	ldr	r0, [pc, #156]	; (1f174 <ProcessHashDrv+0x244>)
   1f0d6:	f7fe f923 	bl	1d320 <CC_PalAbort>
   1f0da:	2000      	movs	r0, #0
   1f0dc:	f7ff f89c 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1f0e0:	4605      	mov	r5, r0
   1f0e2:	2800      	cmp	r0, #0
   1f0e4:	f43f af48 	beq.w	1ef78 <ProcessHashDrv+0x48>
   1f0e8:	4823      	ldr	r0, [pc, #140]	; (1f178 <ProcessHashDrv+0x248>)
   1f0ea:	f7fe f919 	bl	1d320 <CC_PalAbort>
   1f0ee:	e743      	b.n	1ef78 <ProcessHashDrv+0x48>
   1f0f0:	4d22      	ldr	r5, [pc, #136]	; (1f17c <ProcessHashDrv+0x24c>)
   1f0f2:	4628      	mov	r0, r5
   1f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f0f8:	4821      	ldr	r0, [pc, #132]	; (1f180 <ProcessHashDrv+0x250>)
   1f0fa:	f7fe f911 	bl	1d320 <CC_PalAbort>
   1f0fe:	4628      	mov	r0, r5
   1f100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f104:	481f      	ldr	r0, [pc, #124]	; (1f184 <ProcessHashDrv+0x254>)
   1f106:	f7fe f90b 	bl	1d320 <CC_PalAbort>
   1f10a:	e7ce      	b.n	1f0aa <ProcessHashDrv+0x17a>
   1f10c:	f104 0008 	add.w	r0, r4, #8
   1f110:	2110      	movs	r1, #16
   1f112:	f7ff fe0b 	bl	1ed2c <CC_PalMemSetZeroPlat>
   1f116:	e7be      	b.n	1f096 <ProcessHashDrv+0x166>
   1f118:	4d1b      	ldr	r5, [pc, #108]	; (1f188 <ProcessHashDrv+0x258>)
   1f11a:	4628      	mov	r0, r5
   1f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f120:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1f124:	e7c5      	b.n	1f0b2 <ProcessHashDrv+0x182>
   1f126:	bf00      	nop
   1f128:	20000654 	.word	0x20000654
   1f12c:	5002b91c 	.word	0x5002b91c
   1f130:	5002bc20 	.word	0x5002bc20
   1f134:	5002ba04 	.word	0x5002ba04
   1f138:	5002b818 	.word	0x5002b818
   1f13c:	5002b900 	.word	0x5002b900
   1f140:	5002b7c4 	.word	0x5002b7c4
   1f144:	5002b7c0 	.word	0x5002b7c0
   1f148:	5002b65c 	.word	0x5002b65c
   1f14c:	5002b650 	.word	0x5002b650
   1f150:	5002b910 	.word	0x5002b910
   1f154:	5002b684 	.word	0x5002b684
   1f158:	5002bc28 	.word	0x5002bc28
   1f15c:	5002bc2c 	.word	0x5002bc2c
   1f160:	5002b658 	.word	0x5002b658
   1f164:	5002b64c 	.word	0x5002b64c
   1f168:	5002b7cc 	.word	0x5002b7cc
   1f16c:	5002b7d0 	.word	0x5002b7d0
   1f170:	5002b7c8 	.word	0x5002b7c8
   1f174:	00026e64 	.word	0x00026e64
   1f178:	00026e7c 	.word	0x00026e7c
   1f17c:	00f30001 	.word	0x00f30001
   1f180:	00026ebc 	.word	0x00026ebc
   1f184:	00026e9c 	.word	0x00026e9c
   1f188:	00f30003 	.word	0x00f30003

0001f18c <FinishHashDrv>:
   1f18c:	2800      	cmp	r0, #0
   1f18e:	d03b      	beq.n	1f208 <FinishHashDrv+0x7c>
   1f190:	b4f0      	push	{r4, r5, r6, r7}
   1f192:	b082      	sub	sp, #8
   1f194:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1f196:	9301      	str	r3, [sp, #4]
   1f198:	6883      	ldr	r3, [r0, #8]
   1f19a:	fa93 fc83 	rev.w	ip, r3
   1f19e:	9b01      	ldr	r3, [sp, #4]
   1f1a0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1f1a4:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1f1a8:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1f1ac:	ba1b      	rev	r3, r3
   1f1ae:	6243      	str	r3, [r0, #36]	; 0x24
   1f1b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1f1b2:	9301      	str	r3, [sp, #4]
   1f1b4:	ba09      	rev	r1, r1
   1f1b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1f1b8:	61c1      	str	r1, [r0, #28]
   1f1ba:	ba12      	rev	r2, r2
   1f1bc:	6202      	str	r2, [r0, #32]
   1f1be:	ba3f      	rev	r7, r7
   1f1c0:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1f1c4:	ba36      	rev	r6, r6
   1f1c6:	ba2d      	rev	r5, r5
   1f1c8:	ba24      	rev	r4, r4
   1f1ca:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1f1ce:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1f1d2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1f1d4:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1f1d6:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1f1d8:	6184      	str	r4, [r0, #24]
   1f1da:	fa93 fc83 	rev.w	ip, r3
   1f1de:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1f1e0:	9b01      	ldr	r3, [sp, #4]
   1f1e2:	ba3f      	rev	r7, r7
   1f1e4:	ba36      	rev	r6, r6
   1f1e6:	ba2d      	rev	r5, r5
   1f1e8:	ba24      	rev	r4, r4
   1f1ea:	ba09      	rev	r1, r1
   1f1ec:	ba12      	rev	r2, r2
   1f1ee:	ba1b      	rev	r3, r3
   1f1f0:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1f1f4:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1f1f8:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1f1fc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1f200:	2000      	movs	r0, #0
   1f202:	b002      	add	sp, #8
   1f204:	bcf0      	pop	{r4, r5, r6, r7}
   1f206:	4770      	bx	lr
   1f208:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1f20c:	4770      	bx	lr
   1f20e:	bf00      	nop

0001f210 <LoadAesKey>:
   1f210:	2800      	cmp	r0, #0
   1f212:	d03b      	beq.n	1f28c <LoadAesKey+0x7c>
   1f214:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1f218:	2b00      	cmp	r3, #0
   1f21a:	d02c      	beq.n	1f276 <LoadAesKey+0x66>
   1f21c:	2b03      	cmp	r3, #3
   1f21e:	b510      	push	{r4, lr}
   1f220:	d00f      	beq.n	1f242 <LoadAesKey+0x32>
   1f222:	481c      	ldr	r0, [pc, #112]	; (1f294 <LoadAesKey+0x84>)
   1f224:	4c1c      	ldr	r4, [pc, #112]	; (1f298 <LoadAesKey+0x88>)
   1f226:	6822      	ldr	r2, [r4, #0]
   1f228:	4b1c      	ldr	r3, [pc, #112]	; (1f29c <LoadAesKey+0x8c>)
   1f22a:	6812      	ldr	r2, [r2, #0]
   1f22c:	601a      	str	r2, [r3, #0]
   1f22e:	6822      	ldr	r2, [r4, #0]
   1f230:	6852      	ldr	r2, [r2, #4]
   1f232:	605a      	str	r2, [r3, #4]
   1f234:	6822      	ldr	r2, [r4, #0]
   1f236:	6892      	ldr	r2, [r2, #8]
   1f238:	609a      	str	r2, [r3, #8]
   1f23a:	6822      	ldr	r2, [r4, #0]
   1f23c:	68d2      	ldr	r2, [r2, #12]
   1f23e:	60da      	str	r2, [r3, #12]
   1f240:	bd10      	pop	{r4, pc}
   1f242:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1f244:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1f246:	4c14      	ldr	r4, [pc, #80]	; (1f298 <LoadAesKey+0x88>)
   1f248:	f000 fba4 	bl	1f994 <kmu_validate_kdr_slot_and_size>
   1f24c:	2800      	cmp	r0, #0
   1f24e:	d1ea      	bne.n	1f226 <LoadAesKey+0x16>
   1f250:	6821      	ldr	r1, [r4, #0]
   1f252:	4a12      	ldr	r2, [pc, #72]	; (1f29c <LoadAesKey+0x8c>)
   1f254:	6809      	ldr	r1, [r1, #0]
   1f256:	6011      	str	r1, [r2, #0]
   1f258:	6821      	ldr	r1, [r4, #0]
   1f25a:	4b11      	ldr	r3, [pc, #68]	; (1f2a0 <LoadAesKey+0x90>)
   1f25c:	6849      	ldr	r1, [r1, #4]
   1f25e:	6019      	str	r1, [r3, #0]
   1f260:	6821      	ldr	r1, [r4, #0]
   1f262:	6889      	ldr	r1, [r1, #8]
   1f264:	6091      	str	r1, [r2, #8]
   1f266:	6822      	ldr	r2, [r4, #0]
   1f268:	68d2      	ldr	r2, [r2, #12]
   1f26a:	609a      	str	r2, [r3, #8]
   1f26c:	f000 fb9e 	bl	1f9ac <kmu_use_kdr_key>
   1f270:	2800      	cmp	r0, #0
   1f272:	d1d8      	bne.n	1f226 <LoadAesKey+0x16>
   1f274:	bd10      	pop	{r4, pc}
   1f276:	4a09      	ldr	r2, [pc, #36]	; (1f29c <LoadAesKey+0x8c>)
   1f278:	6901      	ldr	r1, [r0, #16]
   1f27a:	6011      	str	r1, [r2, #0]
   1f27c:	6941      	ldr	r1, [r0, #20]
   1f27e:	6051      	str	r1, [r2, #4]
   1f280:	6981      	ldr	r1, [r0, #24]
   1f282:	6091      	str	r1, [r2, #8]
   1f284:	69c1      	ldr	r1, [r0, #28]
   1f286:	60d1      	str	r1, [r2, #12]
   1f288:	4618      	mov	r0, r3
   1f28a:	4770      	bx	lr
   1f28c:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1f290:	4770      	bx	lr
   1f292:	bf00      	nop
   1f294:	00f10009 	.word	0x00f10009
   1f298:	20000644 	.word	0x20000644
   1f29c:	5002b400 	.word	0x5002b400
   1f2a0:	5002b404 	.word	0x5002b404

0001f2a4 <InitAes.part.0>:
   1f2a4:	4a32      	ldr	r2, [pc, #200]	; (1f370 <InitAes.part.0+0xcc>)
   1f2a6:	b510      	push	{r4, lr}
   1f2a8:	4604      	mov	r4, r0
   1f2aa:	6813      	ldr	r3, [r2, #0]
   1f2ac:	2b00      	cmp	r3, #0
   1f2ae:	d1fc      	bne.n	1f2aa <InitAes.part.0+0x6>
   1f2b0:	4a30      	ldr	r2, [pc, #192]	; (1f374 <InitAes.part.0+0xd0>)
   1f2b2:	6813      	ldr	r3, [r2, #0]
   1f2b4:	2b00      	cmp	r3, #0
   1f2b6:	d1fc      	bne.n	1f2b2 <InitAes.part.0+0xe>
   1f2b8:	4a2f      	ldr	r2, [pc, #188]	; (1f378 <InitAes.part.0+0xd4>)
   1f2ba:	6813      	ldr	r3, [r2, #0]
   1f2bc:	2b00      	cmp	r3, #0
   1f2be:	d1fc      	bne.n	1f2ba <InitAes.part.0+0x16>
   1f2c0:	4a2e      	ldr	r2, [pc, #184]	; (1f37c <InitAes.part.0+0xd8>)
   1f2c2:	6813      	ldr	r3, [r2, #0]
   1f2c4:	2b00      	cmp	r3, #0
   1f2c6:	d1fc      	bne.n	1f2c2 <InitAes.part.0+0x1e>
   1f2c8:	4a2d      	ldr	r2, [pc, #180]	; (1f380 <InitAes.part.0+0xdc>)
   1f2ca:	6813      	ldr	r3, [r2, #0]
   1f2cc:	2b00      	cmp	r3, #0
   1f2ce:	d1fc      	bne.n	1f2ca <InitAes.part.0+0x26>
   1f2d0:	4a2c      	ldr	r2, [pc, #176]	; (1f384 <InitAes.part.0+0xe0>)
   1f2d2:	6813      	ldr	r3, [r2, #0]
   1f2d4:	2b00      	cmp	r3, #0
   1f2d6:	d1fc      	bne.n	1f2d2 <InitAes.part.0+0x2e>
   1f2d8:	f04f 30ff 	mov.w	r0, #4294967295
   1f2dc:	f7fe fec4 	bl	1e068 <CC_HalClearInterruptBit>
   1f2e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f2e2:	f023 0304 	bic.w	r3, r3, #4
   1f2e6:	2b03      	cmp	r3, #3
   1f2e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f2ea:	d036      	beq.n	1f35a <InitAes.part.0+0xb6>
   1f2ec:	2b01      	cmp	r3, #1
   1f2ee:	4b26      	ldr	r3, [pc, #152]	; (1f388 <InitAes.part.0+0xe4>)
   1f2f0:	6818      	ldr	r0, [r3, #0]
   1f2f2:	bf0c      	ite	eq
   1f2f4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1f2f8:	f020 0020 	bicne.w	r0, r0, #32
   1f2fc:	f7fe fec2 	bl	1e084 <CC_HalMaskInterrupt>
   1f300:	4b22      	ldr	r3, [pc, #136]	; (1f38c <InitAes.part.0+0xe8>)
   1f302:	4a1b      	ldr	r2, [pc, #108]	; (1f370 <InitAes.part.0+0xcc>)
   1f304:	2101      	movs	r1, #1
   1f306:	6019      	str	r1, [r3, #0]
   1f308:	6813      	ldr	r3, [r2, #0]
   1f30a:	2b00      	cmp	r3, #0
   1f30c:	d1fc      	bne.n	1f308 <InitAes.part.0+0x64>
   1f30e:	4a19      	ldr	r2, [pc, #100]	; (1f374 <InitAes.part.0+0xd0>)
   1f310:	6813      	ldr	r3, [r2, #0]
   1f312:	2b00      	cmp	r3, #0
   1f314:	d1fc      	bne.n	1f310 <InitAes.part.0+0x6c>
   1f316:	491e      	ldr	r1, [pc, #120]	; (1f390 <InitAes.part.0+0xec>)
   1f318:	4a15      	ldr	r2, [pc, #84]	; (1f370 <InitAes.part.0+0xcc>)
   1f31a:	600b      	str	r3, [r1, #0]
   1f31c:	6813      	ldr	r3, [r2, #0]
   1f31e:	2b00      	cmp	r3, #0
   1f320:	d1fc      	bne.n	1f31c <InitAes.part.0+0x78>
   1f322:	4a14      	ldr	r2, [pc, #80]	; (1f374 <InitAes.part.0+0xd0>)
   1f324:	6813      	ldr	r3, [r2, #0]
   1f326:	2b00      	cmp	r3, #0
   1f328:	d1fc      	bne.n	1f324 <InitAes.part.0+0x80>
   1f32a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1f32c:	f022 0104 	bic.w	r1, r2, #4
   1f330:	2903      	cmp	r1, #3
   1f332:	bf18      	it	ne
   1f334:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1f336:	4917      	ldr	r1, [pc, #92]	; (1f394 <InitAes.part.0+0xf0>)
   1f338:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1f33c:	bf18      	it	ne
   1f33e:	f003 0301 	andne.w	r3, r3, #1
   1f342:	f002 021c 	and.w	r2, r2, #28
   1f346:	4313      	orrs	r3, r2
   1f348:	600b      	str	r3, [r1, #0]
   1f34a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f34c:	2b07      	cmp	r3, #7
   1f34e:	d102      	bne.n	1f356 <InitAes.part.0+0xb2>
   1f350:	4b11      	ldr	r3, [pc, #68]	; (1f398 <InitAes.part.0+0xf4>)
   1f352:	2201      	movs	r2, #1
   1f354:	601a      	str	r2, [r3, #0]
   1f356:	2000      	movs	r0, #0
   1f358:	bd10      	pop	{r4, pc}
   1f35a:	2b01      	cmp	r3, #1
   1f35c:	4b0a      	ldr	r3, [pc, #40]	; (1f388 <InitAes.part.0+0xe4>)
   1f35e:	6818      	ldr	r0, [r3, #0]
   1f360:	bf0c      	ite	eq
   1f362:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1f366:	f020 0010 	bicne.w	r0, r0, #16
   1f36a:	f7fe fe8b 	bl	1e084 <CC_HalMaskInterrupt>
   1f36e:	e7c7      	b.n	1f300 <InitAes.part.0+0x5c>
   1f370:	5002b910 	.word	0x5002b910
   1f374:	5002b470 	.word	0x5002b470
   1f378:	5002bd20 	.word	0x5002bd20
   1f37c:	5002bc20 	.word	0x5002bc20
   1f380:	5002bd38 	.word	0x5002bd38
   1f384:	5002bc38 	.word	0x5002bc38
   1f388:	5002ba04 	.word	0x5002ba04
   1f38c:	5002b900 	.word	0x5002b900
   1f390:	5002b4bc 	.word	0x5002b4bc
   1f394:	5002b4c0 	.word	0x5002b4c0
   1f398:	5002b47c 	.word	0x5002b47c

0001f39c <ProcessAesDrv>:
   1f39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3a0:	b087      	sub	sp, #28
   1f3a2:	2900      	cmp	r1, #0
   1f3a4:	f000 80a5 	beq.w	1f4f2 <ProcessAesDrv+0x156>
   1f3a8:	4616      	mov	r6, r2
   1f3aa:	2a00      	cmp	r2, #0
   1f3ac:	f000 80a1 	beq.w	1f4f2 <ProcessAesDrv+0x156>
   1f3b0:	4604      	mov	r4, r0
   1f3b2:	2800      	cmp	r0, #0
   1f3b4:	f000 813f 	beq.w	1f636 <ProcessAesDrv+0x29a>
   1f3b8:	461f      	mov	r7, r3
   1f3ba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1f3bc:	460d      	mov	r5, r1
   1f3be:	2b00      	cmp	r3, #0
   1f3c0:	d150      	bne.n	1f464 <ProcessAesDrv+0xc8>
   1f3c2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1f3c6:	d252      	bcs.n	1f46e <ProcessAesDrv+0xd2>
   1f3c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1f3cc:	2b04      	cmp	r3, #4
   1f3ce:	f000 8109 	beq.w	1f5e4 <ProcessAesDrv+0x248>
   1f3d2:	f04f 0800 	mov.w	r8, #0
   1f3d6:	48aa      	ldr	r0, [pc, #680]	; (1f680 <ProcessAesDrv+0x2e4>)
   1f3d8:	f04f 31ff 	mov.w	r1, #4294967295
   1f3dc:	f7fe feec 	bl	1e1b8 <CC_PalMutexLock>
   1f3e0:	2800      	cmp	r0, #0
   1f3e2:	f040 80de 	bne.w	1f5a2 <ProcessAesDrv+0x206>
   1f3e6:	2000      	movs	r0, #0
   1f3e8:	f7fe ff16 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1f3ec:	2800      	cmp	r0, #0
   1f3ee:	f040 80e1 	bne.w	1f5b4 <ProcessAesDrv+0x218>
   1f3f2:	4ba4      	ldr	r3, [pc, #656]	; (1f684 <ProcessAesDrv+0x2e8>)
   1f3f4:	4aa4      	ldr	r2, [pc, #656]	; (1f688 <ProcessAesDrv+0x2ec>)
   1f3f6:	2101      	movs	r1, #1
   1f3f8:	6019      	str	r1, [r3, #0]
   1f3fa:	6813      	ldr	r3, [r2, #0]
   1f3fc:	2b00      	cmp	r3, #0
   1f3fe:	d1fc      	bne.n	1f3fa <ProcessAesDrv+0x5e>
   1f400:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f402:	2b03      	cmp	r3, #3
   1f404:	dc39      	bgt.n	1f47a <ProcessAesDrv+0xde>
   1f406:	2b00      	cmp	r3, #0
   1f408:	da3a      	bge.n	1f480 <ProcessAesDrv+0xe4>
   1f40a:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1f6d4 <ProcessAesDrv+0x338>
   1f40e:	4a9e      	ldr	r2, [pc, #632]	; (1f688 <ProcessAesDrv+0x2ec>)
   1f410:	6813      	ldr	r3, [r2, #0]
   1f412:	2b00      	cmp	r3, #0
   1f414:	d1fc      	bne.n	1f410 <ProcessAesDrv+0x74>
   1f416:	f1b8 0f00 	cmp.w	r8, #0
   1f41a:	f040 80da 	bne.w	1f5d2 <ProcessAesDrv+0x236>
   1f41e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f420:	f023 0304 	bic.w	r3, r3, #4
   1f424:	2b03      	cmp	r3, #3
   1f426:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f428:	d058      	beq.n	1f4dc <ProcessAesDrv+0x140>
   1f42a:	2b01      	cmp	r3, #1
   1f42c:	4b97      	ldr	r3, [pc, #604]	; (1f68c <ProcessAesDrv+0x2f0>)
   1f42e:	6818      	ldr	r0, [r3, #0]
   1f430:	bf0c      	ite	eq
   1f432:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1f436:	f040 0020 	orrne.w	r0, r0, #32
   1f43a:	f7fe fe23 	bl	1e084 <CC_HalMaskInterrupt>
   1f43e:	4b91      	ldr	r3, [pc, #580]	; (1f684 <ProcessAesDrv+0x2e8>)
   1f440:	2200      	movs	r2, #0
   1f442:	601a      	str	r2, [r3, #0]
   1f444:	2001      	movs	r0, #1
   1f446:	f7fe fee7 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1f44a:	2800      	cmp	r0, #0
   1f44c:	f040 80bd 	bne.w	1f5ca <ProcessAesDrv+0x22e>
   1f450:	488b      	ldr	r0, [pc, #556]	; (1f680 <ProcessAesDrv+0x2e4>)
   1f452:	f7fe feb9 	bl	1e1c8 <CC_PalMutexUnlock>
   1f456:	2800      	cmp	r0, #0
   1f458:	f040 80b0 	bne.w	1f5bc <ProcessAesDrv+0x220>
   1f45c:	4648      	mov	r0, r9
   1f45e:	b007      	add	sp, #28
   1f460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f464:	2b01      	cmp	r3, #1
   1f466:	d1af      	bne.n	1f3c8 <ProcessAesDrv+0x2c>
   1f468:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1f46c:	d3ac      	bcc.n	1f3c8 <ProcessAesDrv+0x2c>
   1f46e:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1f6d8 <ProcessAesDrv+0x33c>
   1f472:	4648      	mov	r0, r9
   1f474:	b007      	add	sp, #28
   1f476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f47a:	3b06      	subs	r3, #6
   1f47c:	2b01      	cmp	r3, #1
   1f47e:	d8c4      	bhi.n	1f40a <ProcessAesDrv+0x6e>
   1f480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f482:	2b01      	cmp	r3, #1
   1f484:	f200 80d4 	bhi.w	1f630 <ProcessAesDrv+0x294>
   1f488:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f48a:	2b01      	cmp	r3, #1
   1f48c:	d837      	bhi.n	1f4fe <ProcessAesDrv+0x162>
   1f48e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f490:	2b01      	cmp	r3, #1
   1f492:	f200 8131 	bhi.w	1f6f8 <ProcessAesDrv+0x35c>
   1f496:	4620      	mov	r0, r4
   1f498:	f7ff ff04 	bl	1f2a4 <InitAes.part.0>
   1f49c:	4681      	mov	r9, r0
   1f49e:	2800      	cmp	r0, #0
   1f4a0:	d1b5      	bne.n	1f40e <ProcessAesDrv+0x72>
   1f4a2:	4620      	mov	r0, r4
   1f4a4:	f7ff feb4 	bl	1f210 <LoadAesKey>
   1f4a8:	4681      	mov	r9, r0
   1f4aa:	2800      	cmp	r0, #0
   1f4ac:	d1af      	bne.n	1f40e <ProcessAesDrv+0x72>
   1f4ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f4b0:	2b07      	cmp	r3, #7
   1f4b2:	d8aa      	bhi.n	1f40a <ProcessAesDrv+0x6e>
   1f4b4:	a201      	add	r2, pc, #4	; (adr r2, 1f4bc <ProcessAesDrv+0x120>)
   1f4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f4ba:	bf00      	nop
   1f4bc:	0001f519 	.word	0x0001f519
   1f4c0:	0001f505 	.word	0x0001f505
   1f4c4:	0001f675 	.word	0x0001f675
   1f4c8:	0001f505 	.word	0x0001f505
   1f4cc:	0001f40b 	.word	0x0001f40b
   1f4d0:	0001f40b 	.word	0x0001f40b
   1f4d4:	0001f675 	.word	0x0001f675
   1f4d8:	0001f505 	.word	0x0001f505
   1f4dc:	2b01      	cmp	r3, #1
   1f4de:	4b6b      	ldr	r3, [pc, #428]	; (1f68c <ProcessAesDrv+0x2f0>)
   1f4e0:	6818      	ldr	r0, [r3, #0]
   1f4e2:	bf0c      	ite	eq
   1f4e4:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1f4e8:	f040 0010 	orrne.w	r0, r0, #16
   1f4ec:	f7fe fdca 	bl	1e084 <CC_HalMaskInterrupt>
   1f4f0:	e7a5      	b.n	1f43e <ProcessAesDrv+0xa2>
   1f4f2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1f6dc <ProcessAesDrv+0x340>
   1f4f6:	4648      	mov	r0, r9
   1f4f8:	b007      	add	sp, #28
   1f4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4fe:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1f6e0 <ProcessAesDrv+0x344>
   1f502:	e784      	b.n	1f40e <ProcessAesDrv+0x72>
   1f504:	4b62      	ldr	r3, [pc, #392]	; (1f690 <ProcessAesDrv+0x2f4>)
   1f506:	6822      	ldr	r2, [r4, #0]
   1f508:	601a      	str	r2, [r3, #0]
   1f50a:	6862      	ldr	r2, [r4, #4]
   1f50c:	605a      	str	r2, [r3, #4]
   1f50e:	68a2      	ldr	r2, [r4, #8]
   1f510:	609a      	str	r2, [r3, #8]
   1f512:	68e2      	ldr	r2, [r4, #12]
   1f514:	60da      	str	r2, [r3, #12]
   1f516:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f518:	682a      	ldr	r2, [r5, #0]
   1f51a:	f023 0304 	bic.w	r3, r3, #4
   1f51e:	2b03      	cmp	r3, #3
   1f520:	d009      	beq.n	1f536 <ProcessAesDrv+0x19a>
   1f522:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1f524:	6833      	ldr	r3, [r6, #0]
   1f526:	2901      	cmp	r1, #1
   1f528:	bf07      	ittee	eq
   1f52a:	485a      	ldreq	r0, [pc, #360]	; (1f694 <ProcessAesDrv+0x2f8>)
   1f52c:	495a      	ldreq	r1, [pc, #360]	; (1f698 <ProcessAesDrv+0x2fc>)
   1f52e:	485b      	ldrne	r0, [pc, #364]	; (1f69c <ProcessAesDrv+0x300>)
   1f530:	495b      	ldrne	r1, [pc, #364]	; (1f6a0 <ProcessAesDrv+0x304>)
   1f532:	6003      	str	r3, [r0, #0]
   1f534:	600f      	str	r7, [r1, #0]
   1f536:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f538:	2b01      	cmp	r3, #1
   1f53a:	bf0b      	itete	eq
   1f53c:	4b59      	ldreq	r3, [pc, #356]	; (1f6a4 <ProcessAesDrv+0x308>)
   1f53e:	4b5a      	ldrne	r3, [pc, #360]	; (1f6a8 <ProcessAesDrv+0x30c>)
   1f540:	495a      	ldreq	r1, [pc, #360]	; (1f6ac <ProcessAesDrv+0x310>)
   1f542:	495b      	ldrne	r1, [pc, #364]	; (1f6b0 <ProcessAesDrv+0x314>)
   1f544:	600a      	str	r2, [r1, #0]
   1f546:	601f      	str	r7, [r3, #0]
   1f548:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f54a:	f023 0304 	bic.w	r3, r3, #4
   1f54e:	2b03      	cmp	r3, #3
   1f550:	d074      	beq.n	1f63c <ProcessAesDrv+0x2a0>
   1f552:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f554:	2b01      	cmp	r3, #1
   1f556:	bf0c      	ite	eq
   1f558:	2080      	moveq	r0, #128	; 0x80
   1f55a:	2020      	movne	r0, #32
   1f55c:	f7fe fd98 	bl	1e090 <CC_HalWaitInterrupt>
   1f560:	4681      	mov	r9, r0
   1f562:	2800      	cmp	r0, #0
   1f564:	f47f af53 	bne.w	1f40e <ProcessAesDrv+0x72>
   1f568:	4b47      	ldr	r3, [pc, #284]	; (1f688 <ProcessAesDrv+0x2ec>)
   1f56a:	681a      	ldr	r2, [r3, #0]
   1f56c:	2a00      	cmp	r2, #0
   1f56e:	d1fc      	bne.n	1f56a <ProcessAesDrv+0x1ce>
   1f570:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f572:	3b01      	subs	r3, #1
   1f574:	4691      	mov	r9, r2
   1f576:	2b06      	cmp	r3, #6
   1f578:	d810      	bhi.n	1f59c <ProcessAesDrv+0x200>
   1f57a:	e8df f003 	tbb	[pc, r3]
   1f57e:	7d04      	.short	0x7d04
   1f580:	7d0f0f04 	.word	0x7d0f0f04
   1f584:	04          	.byte	0x04
   1f585:	00          	.byte	0x00
   1f586:	4a42      	ldr	r2, [pc, #264]	; (1f690 <ProcessAesDrv+0x2f4>)
   1f588:	4b4a      	ldr	r3, [pc, #296]	; (1f6b4 <ProcessAesDrv+0x318>)
   1f58a:	6812      	ldr	r2, [r2, #0]
   1f58c:	6022      	str	r2, [r4, #0]
   1f58e:	681a      	ldr	r2, [r3, #0]
   1f590:	6062      	str	r2, [r4, #4]
   1f592:	685a      	ldr	r2, [r3, #4]
   1f594:	60a2      	str	r2, [r4, #8]
   1f596:	3308      	adds	r3, #8
   1f598:	681b      	ldr	r3, [r3, #0]
   1f59a:	60e3      	str	r3, [r4, #12]
   1f59c:	2301      	movs	r3, #1
   1f59e:	65a3      	str	r3, [r4, #88]	; 0x58
   1f5a0:	e735      	b.n	1f40e <ProcessAesDrv+0x72>
   1f5a2:	4845      	ldr	r0, [pc, #276]	; (1f6b8 <ProcessAesDrv+0x31c>)
   1f5a4:	f7fd febc 	bl	1d320 <CC_PalAbort>
   1f5a8:	2000      	movs	r0, #0
   1f5aa:	f7fe fe35 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1f5ae:	2800      	cmp	r0, #0
   1f5b0:	f43f af1f 	beq.w	1f3f2 <ProcessAesDrv+0x56>
   1f5b4:	4841      	ldr	r0, [pc, #260]	; (1f6bc <ProcessAesDrv+0x320>)
   1f5b6:	f7fd feb3 	bl	1d320 <CC_PalAbort>
   1f5ba:	e71a      	b.n	1f3f2 <ProcessAesDrv+0x56>
   1f5bc:	4840      	ldr	r0, [pc, #256]	; (1f6c0 <ProcessAesDrv+0x324>)
   1f5be:	f7fd feaf 	bl	1d320 <CC_PalAbort>
   1f5c2:	4648      	mov	r0, r9
   1f5c4:	b007      	add	sp, #28
   1f5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5ca:	483e      	ldr	r0, [pc, #248]	; (1f6c4 <ProcessAesDrv+0x328>)
   1f5cc:	f7fd fea8 	bl	1d320 <CC_PalAbort>
   1f5d0:	e73e      	b.n	1f450 <ProcessAesDrv+0xb4>
   1f5d2:	2304      	movs	r3, #4
   1f5d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1f5d8:	2120      	movs	r1, #32
   1f5da:	f104 0010 	add.w	r0, r4, #16
   1f5de:	f7ff fba5 	bl	1ed2c <CC_PalMemSetZeroPlat>
   1f5e2:	e71c      	b.n	1f41e <ProcessAesDrv+0x82>
   1f5e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1f5e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1f5e8:	f000 f9c8 	bl	1f97c <kmu_validate_slot_and_size>
   1f5ec:	b9e8      	cbnz	r0, 1f62a <ProcessAesDrv+0x28e>
   1f5ee:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1f6e4 <ProcessAesDrv+0x348>
   1f5f2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1f6e8 <ProcessAesDrv+0x34c>
   1f5f6:	f8d8 3000 	ldr.w	r3, [r8]
   1f5fa:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1f6ec <ProcessAesDrv+0x350>
   1f5fe:	681b      	ldr	r3, [r3, #0]
   1f600:	f8cb 3000 	str.w	r3, [fp]
   1f604:	f8d8 3000 	ldr.w	r3, [r8]
   1f608:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1f6f0 <ProcessAesDrv+0x354>
   1f60c:	685b      	ldr	r3, [r3, #4]
   1f60e:	f8ca 3000 	str.w	r3, [sl]
   1f612:	f8d8 3000 	ldr.w	r3, [r8]
   1f616:	4a2c      	ldr	r2, [pc, #176]	; (1f6c8 <ProcessAesDrv+0x32c>)
   1f618:	689b      	ldr	r3, [r3, #8]
   1f61a:	f8c9 3000 	str.w	r3, [r9]
   1f61e:	f8d8 3000 	ldr.w	r3, [r8]
   1f622:	68db      	ldr	r3, [r3, #12]
   1f624:	6013      	str	r3, [r2, #0]
   1f626:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1f628:	b171      	cbz	r1, 1f648 <ProcessAesDrv+0x2ac>
   1f62a:	f04f 0801 	mov.w	r8, #1
   1f62e:	e6d2      	b.n	1f3d6 <ProcessAesDrv+0x3a>
   1f630:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1f6f4 <ProcessAesDrv+0x358>
   1f634:	e6eb      	b.n	1f40e <ProcessAesDrv+0x72>
   1f636:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1f63a:	e70f      	b.n	1f45c <ProcessAesDrv+0xc0>
   1f63c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f63e:	2b01      	cmp	r3, #1
   1f640:	bf0c      	ite	eq
   1f642:	2040      	moveq	r0, #64	; 0x40
   1f644:	2010      	movne	r0, #16
   1f646:	e789      	b.n	1f55c <ProcessAesDrv+0x1c0>
   1f648:	f104 0310 	add.w	r3, r4, #16
   1f64c:	4618      	mov	r0, r3
   1f64e:	9305      	str	r3, [sp, #20]
   1f650:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1f654:	e9cd 3200 	strd	r3, r2, [sp]
   1f658:	9002      	str	r0, [sp, #8]
   1f65a:	2010      	movs	r0, #16
   1f65c:	9003      	str	r0, [sp, #12]
   1f65e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1f662:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1f664:	f000 f9ae 	bl	1f9c4 <kmu_derive_cmac>
   1f668:	2800      	cmp	r0, #0
   1f66a:	d148      	bne.n	1f6fe <ProcessAesDrv+0x362>
   1f66c:	2300      	movs	r3, #0
   1f66e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1f672:	e7da      	b.n	1f62a <ProcessAesDrv+0x28e>
   1f674:	4b15      	ldr	r3, [pc, #84]	; (1f6cc <ProcessAesDrv+0x330>)
   1f676:	e746      	b.n	1f506 <ProcessAesDrv+0x16a>
   1f678:	4a14      	ldr	r2, [pc, #80]	; (1f6cc <ProcessAesDrv+0x330>)
   1f67a:	4b15      	ldr	r3, [pc, #84]	; (1f6d0 <ProcessAesDrv+0x334>)
   1f67c:	e785      	b.n	1f58a <ProcessAesDrv+0x1ee>
   1f67e:	bf00      	nop
   1f680:	20000654 	.word	0x20000654
   1f684:	5002b810 	.word	0x5002b810
   1f688:	5002b910 	.word	0x5002b910
   1f68c:	5002ba04 	.word	0x5002ba04
   1f690:	5002b440 	.word	0x5002b440
   1f694:	5002bd28 	.word	0x5002bd28
   1f698:	5002bd2c 	.word	0x5002bd2c
   1f69c:	5002bd30 	.word	0x5002bd30
   1f6a0:	5002bd34 	.word	0x5002bd34
   1f6a4:	5002bc2c 	.word	0x5002bc2c
   1f6a8:	5002bc34 	.word	0x5002bc34
   1f6ac:	5002bc28 	.word	0x5002bc28
   1f6b0:	5002bc30 	.word	0x5002bc30
   1f6b4:	5002b444 	.word	0x5002b444
   1f6b8:	00026e64 	.word	0x00026e64
   1f6bc:	00026e7c 	.word	0x00026e7c
   1f6c0:	00026ebc 	.word	0x00026ebc
   1f6c4:	00026e9c 	.word	0x00026e9c
   1f6c8:	5002b40c 	.word	0x5002b40c
   1f6cc:	5002b460 	.word	0x5002b460
   1f6d0:	5002b464 	.word	0x5002b464
   1f6d4:	00f10001 	.word	0x00f10001
   1f6d8:	00f10005 	.word	0x00f10005
   1f6dc:	00f1000b 	.word	0x00f1000b
   1f6e0:	00f10003 	.word	0x00f10003
   1f6e4:	20000644 	.word	0x20000644
   1f6e8:	5002b400 	.word	0x5002b400
   1f6ec:	5002b404 	.word	0x5002b404
   1f6f0:	5002b408 	.word	0x5002b408
   1f6f4:	00f10002 	.word	0x00f10002
   1f6f8:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1f734 <ProcessAesDrv+0x398>
   1f6fc:	e687      	b.n	1f40e <ProcessAesDrv+0x72>
   1f6fe:	f8d8 3000 	ldr.w	r3, [r8]
   1f702:	4a0b      	ldr	r2, [pc, #44]	; (1f730 <ProcessAesDrv+0x394>)
   1f704:	681b      	ldr	r3, [r3, #0]
   1f706:	f8cb 3000 	str.w	r3, [fp]
   1f70a:	f8d8 3000 	ldr.w	r3, [r8]
   1f70e:	685b      	ldr	r3, [r3, #4]
   1f710:	f8ca 3000 	str.w	r3, [sl]
   1f714:	f8d8 3000 	ldr.w	r3, [r8]
   1f718:	689b      	ldr	r3, [r3, #8]
   1f71a:	f8c9 3000 	str.w	r3, [r9]
   1f71e:	f8d8 3000 	ldr.w	r3, [r8]
   1f722:	68db      	ldr	r3, [r3, #12]
   1f724:	6013      	str	r3, [r2, #0]
   1f726:	9805      	ldr	r0, [sp, #20]
   1f728:	2110      	movs	r1, #16
   1f72a:	f7ff faff 	bl	1ed2c <CC_PalMemSetZeroPlat>
   1f72e:	e79d      	b.n	1f66c <ProcessAesDrv+0x2d0>
   1f730:	5002b40c 	.word	0x5002b40c
   1f734:	00f10004 	.word	0x00f10004

0001f738 <FinishAesDrv>:
   1f738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f73c:	b301      	cbz	r1, 1f780 <FinishAesDrv+0x48>
   1f73e:	b1fa      	cbz	r2, 1f780 <FinishAesDrv+0x48>
   1f740:	4604      	mov	r4, r0
   1f742:	2800      	cmp	r0, #0
   1f744:	d07a      	beq.n	1f83c <FinishAesDrv+0x104>
   1f746:	461d      	mov	r5, r3
   1f748:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1f74a:	2b07      	cmp	r3, #7
   1f74c:	460e      	mov	r6, r1
   1f74e:	d01b      	beq.n	1f788 <FinishAesDrv+0x50>
   1f750:	b95d      	cbnz	r5, 1f76a <FinishAesDrv+0x32>
   1f752:	2b03      	cmp	r3, #3
   1f754:	d110      	bne.n	1f778 <FinishAesDrv+0x40>
   1f756:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1f758:	b973      	cbnz	r3, 1f778 <FinishAesDrv+0x40>
   1f75a:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1f75e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1f762:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1f766:	600b      	str	r3, [r1, #0]
   1f768:	2510      	movs	r5, #16
   1f76a:	462b      	mov	r3, r5
   1f76c:	4631      	mov	r1, r6
   1f76e:	4620      	mov	r0, r4
   1f770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f774:	f7ff be12 	b.w	1f39c <ProcessAesDrv>
   1f778:	462f      	mov	r7, r5
   1f77a:	4638      	mov	r0, r7
   1f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f780:	4f66      	ldr	r7, [pc, #408]	; (1f91c <FinishAesDrv+0x1e4>)
   1f782:	4638      	mov	r0, r7
   1f784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f788:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1f78a:	2b00      	cmp	r3, #0
   1f78c:	d159      	bne.n	1f842 <FinishAesDrv+0x10a>
   1f78e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1f792:	d25b      	bcs.n	1f84c <FinishAesDrv+0x114>
   1f794:	b915      	cbnz	r5, 1f79c <FinishAesDrv+0x64>
   1f796:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1f798:	2b00      	cmp	r3, #0
   1f79a:	d157      	bne.n	1f84c <FinishAesDrv+0x114>
   1f79c:	4860      	ldr	r0, [pc, #384]	; (1f920 <FinishAesDrv+0x1e8>)
   1f79e:	f04f 31ff 	mov.w	r1, #4294967295
   1f7a2:	f7fe fd09 	bl	1e1b8 <CC_PalMutexLock>
   1f7a6:	2800      	cmp	r0, #0
   1f7a8:	f040 8097 	bne.w	1f8da <FinishAesDrv+0x1a2>
   1f7ac:	2000      	movs	r0, #0
   1f7ae:	f7fe fd33 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1f7b2:	2800      	cmp	r0, #0
   1f7b4:	f040 808d 	bne.w	1f8d2 <FinishAesDrv+0x19a>
   1f7b8:	4b5a      	ldr	r3, [pc, #360]	; (1f924 <FinishAesDrv+0x1ec>)
   1f7ba:	4a5b      	ldr	r2, [pc, #364]	; (1f928 <FinishAesDrv+0x1f0>)
   1f7bc:	2101      	movs	r1, #1
   1f7be:	6019      	str	r1, [r3, #0]
   1f7c0:	6813      	ldr	r3, [r2, #0]
   1f7c2:	2b00      	cmp	r3, #0
   1f7c4:	d1fc      	bne.n	1f7c0 <FinishAesDrv+0x88>
   1f7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f7c8:	2b03      	cmp	r3, #3
   1f7ca:	dd20      	ble.n	1f80e <FinishAesDrv+0xd6>
   1f7cc:	3b06      	subs	r3, #6
   1f7ce:	2b01      	cmp	r3, #1
   1f7d0:	d81f      	bhi.n	1f812 <FinishAesDrv+0xda>
   1f7d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f7d4:	2b01      	cmp	r3, #1
   1f7d6:	d83b      	bhi.n	1f850 <FinishAesDrv+0x118>
   1f7d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f7da:	2b01      	cmp	r3, #1
   1f7dc:	f200 8085 	bhi.w	1f8ea <FinishAesDrv+0x1b2>
   1f7e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f7e2:	2b01      	cmp	r3, #1
   1f7e4:	f200 8083 	bhi.w	1f8ee <FinishAesDrv+0x1b6>
   1f7e8:	4620      	mov	r0, r4
   1f7ea:	f7ff fd5b 	bl	1f2a4 <InitAes.part.0>
   1f7ee:	4607      	mov	r7, r0
   1f7f0:	b980      	cbnz	r0, 1f814 <FinishAesDrv+0xdc>
   1f7f2:	4620      	mov	r0, r4
   1f7f4:	f7ff fd0c 	bl	1f210 <LoadAesKey>
   1f7f8:	4607      	mov	r7, r0
   1f7fa:	b958      	cbnz	r0, 1f814 <FinishAesDrv+0xdc>
   1f7fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f7fe:	2b07      	cmp	r3, #7
   1f800:	d807      	bhi.n	1f812 <FinishAesDrv+0xda>
   1f802:	e8df f003 	tbb	[pc, r3]
   1f806:	2730      	.short	0x2730
   1f808:	06062755 	.word	0x06062755
   1f80c:	2755      	.short	0x2755
   1f80e:	2b00      	cmp	r3, #0
   1f810:	dadf      	bge.n	1f7d2 <FinishAesDrv+0x9a>
   1f812:	4f46      	ldr	r7, [pc, #280]	; (1f92c <FinishAesDrv+0x1f4>)
   1f814:	4a44      	ldr	r2, [pc, #272]	; (1f928 <FinishAesDrv+0x1f0>)
   1f816:	6813      	ldr	r3, [r2, #0]
   1f818:	2b00      	cmp	r3, #0
   1f81a:	d1fc      	bne.n	1f816 <FinishAesDrv+0xde>
   1f81c:	4a41      	ldr	r2, [pc, #260]	; (1f924 <FinishAesDrv+0x1ec>)
   1f81e:	2001      	movs	r0, #1
   1f820:	6013      	str	r3, [r2, #0]
   1f822:	f7fe fcf9 	bl	1e218 <CC_PalPowerSaveModeSelect>
   1f826:	2800      	cmp	r0, #0
   1f828:	d15b      	bne.n	1f8e2 <FinishAesDrv+0x1aa>
   1f82a:	483d      	ldr	r0, [pc, #244]	; (1f920 <FinishAesDrv+0x1e8>)
   1f82c:	f7fe fccc 	bl	1e1c8 <CC_PalMutexUnlock>
   1f830:	2800      	cmp	r0, #0
   1f832:	d0a2      	beq.n	1f77a <FinishAesDrv+0x42>
   1f834:	483e      	ldr	r0, [pc, #248]	; (1f930 <FinishAesDrv+0x1f8>)
   1f836:	f7fd fd73 	bl	1d320 <CC_PalAbort>
   1f83a:	e79e      	b.n	1f77a <FinishAesDrv+0x42>
   1f83c:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1f840:	e79b      	b.n	1f77a <FinishAesDrv+0x42>
   1f842:	2b01      	cmp	r3, #1
   1f844:	d1a6      	bne.n	1f794 <FinishAesDrv+0x5c>
   1f846:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1f84a:	d3a3      	bcc.n	1f794 <FinishAesDrv+0x5c>
   1f84c:	4f39      	ldr	r7, [pc, #228]	; (1f934 <FinishAesDrv+0x1fc>)
   1f84e:	e794      	b.n	1f77a <FinishAesDrv+0x42>
   1f850:	4f39      	ldr	r7, [pc, #228]	; (1f938 <FinishAesDrv+0x200>)
   1f852:	e7df      	b.n	1f814 <FinishAesDrv+0xdc>
   1f854:	4b39      	ldr	r3, [pc, #228]	; (1f93c <FinishAesDrv+0x204>)
   1f856:	6822      	ldr	r2, [r4, #0]
   1f858:	601a      	str	r2, [r3, #0]
   1f85a:	6862      	ldr	r2, [r4, #4]
   1f85c:	605a      	str	r2, [r3, #4]
   1f85e:	68a2      	ldr	r2, [r4, #8]
   1f860:	609a      	str	r2, [r3, #8]
   1f862:	68e2      	ldr	r2, [r4, #12]
   1f864:	60da      	str	r2, [r3, #12]
   1f866:	4936      	ldr	r1, [pc, #216]	; (1f940 <FinishAesDrv+0x208>)
   1f868:	4a36      	ldr	r2, [pc, #216]	; (1f944 <FinishAesDrv+0x20c>)
   1f86a:	2301      	movs	r3, #1
   1f86c:	600b      	str	r3, [r1, #0]
   1f86e:	6015      	str	r5, [r2, #0]
   1f870:	2d00      	cmp	r5, #0
   1f872:	d13e      	bne.n	1f8f2 <FinishAesDrv+0x1ba>
   1f874:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1f876:	b90a      	cbnz	r2, 1f87c <FinishAesDrv+0x144>
   1f878:	4a33      	ldr	r2, [pc, #204]	; (1f948 <FinishAesDrv+0x210>)
   1f87a:	6013      	str	r3, [r2, #0]
   1f87c:	4b2a      	ldr	r3, [pc, #168]	; (1f928 <FinishAesDrv+0x1f0>)
   1f87e:	681f      	ldr	r7, [r3, #0]
   1f880:	2f00      	cmp	r7, #0
   1f882:	d1fc      	bne.n	1f87e <FinishAesDrv+0x146>
   1f884:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f886:	3b01      	subs	r3, #1
   1f888:	2b06      	cmp	r3, #6
   1f88a:	d8c3      	bhi.n	1f814 <FinishAesDrv+0xdc>
   1f88c:	a201      	add	r2, pc, #4	; (adr r2, 1f894 <FinishAesDrv+0x15c>)
   1f88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f892:	bf00      	nop
   1f894:	0001f8b5 	.word	0x0001f8b5
   1f898:	0001f8cd 	.word	0x0001f8cd
   1f89c:	0001f8b5 	.word	0x0001f8b5
   1f8a0:	0001f815 	.word	0x0001f815
   1f8a4:	0001f815 	.word	0x0001f815
   1f8a8:	0001f8cd 	.word	0x0001f8cd
   1f8ac:	0001f8b5 	.word	0x0001f8b5
   1f8b0:	4b26      	ldr	r3, [pc, #152]	; (1f94c <FinishAesDrv+0x214>)
   1f8b2:	e7d0      	b.n	1f856 <FinishAesDrv+0x11e>
   1f8b4:	4a21      	ldr	r2, [pc, #132]	; (1f93c <FinishAesDrv+0x204>)
   1f8b6:	4b26      	ldr	r3, [pc, #152]	; (1f950 <FinishAesDrv+0x218>)
   1f8b8:	6812      	ldr	r2, [r2, #0]
   1f8ba:	6022      	str	r2, [r4, #0]
   1f8bc:	681a      	ldr	r2, [r3, #0]
   1f8be:	6062      	str	r2, [r4, #4]
   1f8c0:	685a      	ldr	r2, [r3, #4]
   1f8c2:	60a2      	str	r2, [r4, #8]
   1f8c4:	3308      	adds	r3, #8
   1f8c6:	681b      	ldr	r3, [r3, #0]
   1f8c8:	60e3      	str	r3, [r4, #12]
   1f8ca:	e7a3      	b.n	1f814 <FinishAesDrv+0xdc>
   1f8cc:	4a1f      	ldr	r2, [pc, #124]	; (1f94c <FinishAesDrv+0x214>)
   1f8ce:	4b21      	ldr	r3, [pc, #132]	; (1f954 <FinishAesDrv+0x21c>)
   1f8d0:	e7f2      	b.n	1f8b8 <FinishAesDrv+0x180>
   1f8d2:	4821      	ldr	r0, [pc, #132]	; (1f958 <FinishAesDrv+0x220>)
   1f8d4:	f7fd fd24 	bl	1d320 <CC_PalAbort>
   1f8d8:	e76e      	b.n	1f7b8 <FinishAesDrv+0x80>
   1f8da:	4820      	ldr	r0, [pc, #128]	; (1f95c <FinishAesDrv+0x224>)
   1f8dc:	f7fd fd20 	bl	1d320 <CC_PalAbort>
   1f8e0:	e764      	b.n	1f7ac <FinishAesDrv+0x74>
   1f8e2:	481f      	ldr	r0, [pc, #124]	; (1f960 <FinishAesDrv+0x228>)
   1f8e4:	f7fd fd1c 	bl	1d320 <CC_PalAbort>
   1f8e8:	e79f      	b.n	1f82a <FinishAesDrv+0xf2>
   1f8ea:	4f1e      	ldr	r7, [pc, #120]	; (1f964 <FinishAesDrv+0x22c>)
   1f8ec:	e792      	b.n	1f814 <FinishAesDrv+0xdc>
   1f8ee:	4f1e      	ldr	r7, [pc, #120]	; (1f968 <FinishAesDrv+0x230>)
   1f8f0:	e790      	b.n	1f814 <FinishAesDrv+0xdc>
   1f8f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1f8f4:	6833      	ldr	r3, [r6, #0]
   1f8f6:	2a01      	cmp	r2, #1
   1f8f8:	d00a      	beq.n	1f910 <FinishAesDrv+0x1d8>
   1f8fa:	491c      	ldr	r1, [pc, #112]	; (1f96c <FinishAesDrv+0x234>)
   1f8fc:	4a1c      	ldr	r2, [pc, #112]	; (1f970 <FinishAesDrv+0x238>)
   1f8fe:	600b      	str	r3, [r1, #0]
   1f900:	2010      	movs	r0, #16
   1f902:	6015      	str	r5, [r2, #0]
   1f904:	f7fe fbc4 	bl	1e090 <CC_HalWaitInterrupt>
   1f908:	4607      	mov	r7, r0
   1f90a:	2800      	cmp	r0, #0
   1f90c:	d0b6      	beq.n	1f87c <FinishAesDrv+0x144>
   1f90e:	e781      	b.n	1f814 <FinishAesDrv+0xdc>
   1f910:	4918      	ldr	r1, [pc, #96]	; (1f974 <FinishAesDrv+0x23c>)
   1f912:	4a19      	ldr	r2, [pc, #100]	; (1f978 <FinishAesDrv+0x240>)
   1f914:	600b      	str	r3, [r1, #0]
   1f916:	2040      	movs	r0, #64	; 0x40
   1f918:	6015      	str	r5, [r2, #0]
   1f91a:	e7f3      	b.n	1f904 <FinishAesDrv+0x1cc>
   1f91c:	00f1000b 	.word	0x00f1000b
   1f920:	20000654 	.word	0x20000654
   1f924:	5002b810 	.word	0x5002b810
   1f928:	5002b910 	.word	0x5002b910
   1f92c:	00f10001 	.word	0x00f10001
   1f930:	00026ebc 	.word	0x00026ebc
   1f934:	00f10005 	.word	0x00f10005
   1f938:	00f10002 	.word	0x00f10002
   1f93c:	5002b440 	.word	0x5002b440
   1f940:	5002b47c 	.word	0x5002b47c
   1f944:	5002b4bc 	.word	0x5002b4bc
   1f948:	5002b524 	.word	0x5002b524
   1f94c:	5002b460 	.word	0x5002b460
   1f950:	5002b444 	.word	0x5002b444
   1f954:	5002b464 	.word	0x5002b464
   1f958:	00026e7c 	.word	0x00026e7c
   1f95c:	00026e64 	.word	0x00026e64
   1f960:	00026e9c 	.word	0x00026e9c
   1f964:	00f10003 	.word	0x00f10003
   1f968:	00f10004 	.word	0x00f10004
   1f96c:	5002bc30 	.word	0x5002bc30
   1f970:	5002bc34 	.word	0x5002bc34
   1f974:	5002bc28 	.word	0x5002bc28
   1f978:	5002bc2c 	.word	0x5002bc2c

0001f97c <kmu_validate_slot_and_size>:
   1f97c:	b921      	cbnz	r1, 1f988 <kmu_validate_slot_and_size+0xc>
   1f97e:	4b03      	ldr	r3, [pc, #12]	; (1f98c <kmu_validate_slot_and_size+0x10>)
   1f980:	2800      	cmp	r0, #0
   1f982:	bf18      	it	ne
   1f984:	4618      	movne	r0, r3
   1f986:	4770      	bx	lr
   1f988:	4801      	ldr	r0, [pc, #4]	; (1f990 <kmu_validate_slot_and_size+0x14>)
   1f98a:	4770      	bx	lr
   1f98c:	00f70001 	.word	0x00f70001
   1f990:	00f70003 	.word	0x00f70003

0001f994 <kmu_validate_kdr_slot_and_size>:
   1f994:	b921      	cbnz	r1, 1f9a0 <kmu_validate_kdr_slot_and_size+0xc>
   1f996:	4b03      	ldr	r3, [pc, #12]	; (1f9a4 <kmu_validate_kdr_slot_and_size+0x10>)
   1f998:	2800      	cmp	r0, #0
   1f99a:	bf18      	it	ne
   1f99c:	4618      	movne	r0, r3
   1f99e:	4770      	bx	lr
   1f9a0:	4801      	ldr	r0, [pc, #4]	; (1f9a8 <kmu_validate_kdr_slot_and_size+0x14>)
   1f9a2:	4770      	bx	lr
   1f9a4:	00f70001 	.word	0x00f70001
   1f9a8:	00f70003 	.word	0x00f70003

0001f9ac <kmu_use_kdr_key>:
   1f9ac:	4903      	ldr	r1, [pc, #12]	; (1f9bc <kmu_use_kdr_key+0x10>)
   1f9ae:	4b04      	ldr	r3, [pc, #16]	; (1f9c0 <kmu_use_kdr_key+0x14>)
   1f9b0:	2000      	movs	r0, #0
   1f9b2:	2201      	movs	r2, #1
   1f9b4:	6008      	str	r0, [r1, #0]
   1f9b6:	601a      	str	r2, [r3, #0]
   1f9b8:	4770      	bx	lr
   1f9ba:	bf00      	nop
   1f9bc:	5002ba38 	.word	0x5002ba38
   1f9c0:	5002b478 	.word	0x5002b478

0001f9c4 <kmu_derive_cmac>:
   1f9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9c8:	b0cd      	sub	sp, #308	; 0x134
   1f9ca:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1f9ce:	460f      	mov	r7, r1
   1f9d0:	2100      	movs	r1, #0
   1f9d2:	460c      	mov	r4, r1
   1f9d4:	4681      	mov	r9, r0
   1f9d6:	4616      	mov	r6, r2
   1f9d8:	a80e      	add	r0, sp, #56	; 0x38
   1f9da:	2274      	movs	r2, #116	; 0x74
   1f9dc:	469b      	mov	fp, r3
   1f9de:	f004 ffb3 	bl	24948 <memset>
   1f9e2:	4621      	mov	r1, r4
   1f9e4:	2280      	movs	r2, #128	; 0x80
   1f9e6:	a82c      	add	r0, sp, #176	; 0xb0
   1f9e8:	942b      	str	r4, [sp, #172]	; 0xac
   1f9ea:	f004 ffad 	bl	24948 <memset>
   1f9ee:	2384      	movs	r3, #132	; 0x84
   1f9f0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f9f4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1f9f8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1f9fc:	9305      	str	r3, [sp, #20]
   1f9fe:	d860      	bhi.n	1fac2 <kmu_derive_cmac+0xfe>
   1fa00:	ab05      	add	r3, sp, #20
   1fa02:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1fa06:	9301      	str	r3, [sp, #4]
   1fa08:	9502      	str	r5, [sp, #8]
   1fa0a:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1fa0e:	4659      	mov	r1, fp
   1fa10:	4630      	mov	r0, r6
   1fa12:	f8cd a000 	str.w	sl, [sp]
   1fa16:	f000 f865 	bl	1fae4 <UtilCmacBuildDataForDerivation>
   1fa1a:	2800      	cmp	r0, #0
   1fa1c:	d14c      	bne.n	1fab8 <kmu_derive_cmac+0xf4>
   1fa1e:	2303      	movs	r3, #3
   1fa20:	f88d 3013 	strb.w	r3, [sp, #19]
   1fa24:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1fa28:	901c      	str	r0, [sp, #112]	; 0x70
   1fa2a:	2200      	movs	r2, #0
   1fa2c:	2110      	movs	r1, #16
   1fa2e:	a80e      	add	r0, sp, #56	; 0x38
   1fa30:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1fa34:	2607      	movs	r6, #7
   1fa36:	2301      	movs	r3, #1
   1fa38:	2401      	movs	r4, #1
   1fa3a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1fa3e:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1fa42:	971a      	str	r7, [sp, #104]	; 0x68
   1fa44:	961b      	str	r6, [sp, #108]	; 0x6c
   1fa46:	9426      	str	r4, [sp, #152]	; 0x98
   1fa48:	f10d 0920 	add.w	r9, sp, #32
   1fa4c:	f7ff f96e 	bl	1ed2c <CC_PalMemSetZeroPlat>
   1fa50:	2110      	movs	r1, #16
   1fa52:	e9cd 1900 	strd	r1, r9, [sp]
   1fa56:	ab0a      	add	r3, sp, #40	; 0x28
   1fa58:	9905      	ldr	r1, [sp, #20]
   1fa5a:	4650      	mov	r0, sl
   1fa5c:	aa06      	add	r2, sp, #24
   1fa5e:	f7ff fa09 	bl	1ee74 <SetDataBuffersInfo>
   1fa62:	4607      	mov	r7, r0
   1fa64:	b150      	cbz	r0, 1fa7c <kmu_derive_cmac+0xb8>
   1fa66:	e01e      	b.n	1faa6 <kmu_derive_cmac+0xe2>
   1fa68:	f7ff f95c 	bl	1ed24 <CC_PalMemCopyPlat>
   1fa6c:	2110      	movs	r1, #16
   1fa6e:	a80e      	add	r0, sp, #56	; 0x38
   1fa70:	f7ff f95c 	bl	1ed2c <CC_PalMemSetZeroPlat>
   1fa74:	3401      	adds	r4, #1
   1fa76:	1bad      	subs	r5, r5, r6
   1fa78:	b2e4      	uxtb	r4, r4
   1fa7a:	d027      	beq.n	1facc <kmu_derive_cmac+0x108>
   1fa7c:	9b05      	ldr	r3, [sp, #20]
   1fa7e:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1fa82:	2d10      	cmp	r5, #16
   1fa84:	464a      	mov	r2, r9
   1fa86:	a906      	add	r1, sp, #24
   1fa88:	a80e      	add	r0, sp, #56	; 0x38
   1fa8a:	462e      	mov	r6, r5
   1fa8c:	bf28      	it	cs
   1fa8e:	2610      	movcs	r6, #16
   1fa90:	f7ff fe52 	bl	1f738 <FinishAesDrv>
   1fa94:	4603      	mov	r3, r0
   1fa96:	4632      	mov	r2, r6
   1fa98:	eb08 0007 	add.w	r0, r8, r7
   1fa9c:	a90e      	add	r1, sp, #56	; 0x38
   1fa9e:	4437      	add	r7, r6
   1faa0:	2b00      	cmp	r3, #0
   1faa2:	d0e1      	beq.n	1fa68 <kmu_derive_cmac+0xa4>
   1faa4:	461f      	mov	r7, r3
   1faa6:	a80e      	add	r0, sp, #56	; 0x38
   1faa8:	2274      	movs	r2, #116	; 0x74
   1faaa:	2100      	movs	r1, #0
   1faac:	f7ff f93c 	bl	1ed28 <CC_PalMemSetPlat>
   1fab0:	4638      	mov	r0, r7
   1fab2:	b04d      	add	sp, #308	; 0x134
   1fab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fab8:	4f08      	ldr	r7, [pc, #32]	; (1fadc <kmu_derive_cmac+0x118>)
   1faba:	4638      	mov	r0, r7
   1fabc:	b04d      	add	sp, #308	; 0x134
   1fabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fac2:	4f07      	ldr	r7, [pc, #28]	; (1fae0 <kmu_derive_cmac+0x11c>)
   1fac4:	4638      	mov	r0, r7
   1fac6:	b04d      	add	sp, #308	; 0x134
   1fac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1facc:	a80e      	add	r0, sp, #56	; 0x38
   1face:	2274      	movs	r2, #116	; 0x74
   1fad0:	2100      	movs	r1, #0
   1fad2:	462f      	mov	r7, r5
   1fad4:	f7ff f928 	bl	1ed28 <CC_PalMemSetPlat>
   1fad8:	e7ea      	b.n	1fab0 <kmu_derive_cmac+0xec>
   1fada:	bf00      	nop
   1fadc:	00f1000e 	.word	0x00f1000e
   1fae0:	00f1000f 	.word	0x00f1000f

0001fae4 <UtilCmacBuildDataForDerivation>:
   1fae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fae8:	b082      	sub	sp, #8
   1faea:	2600      	movs	r6, #0
   1faec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1faee:	9601      	str	r6, [sp, #4]
   1faf0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1faf4:	d83c      	bhi.n	1fb70 <UtilCmacBuildDataForDerivation+0x8c>
   1faf6:	00ee      	lsls	r6, r5, #3
   1faf8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1fafc:	f101 35ff 	add.w	r5, r1, #4294967295
   1fb00:	461f      	mov	r7, r3
   1fb02:	bf34      	ite	cc
   1fb04:	2303      	movcc	r3, #3
   1fb06:	2304      	movcs	r3, #4
   1fb08:	2d3f      	cmp	r5, #63	; 0x3f
   1fb0a:	460c      	mov	r4, r1
   1fb0c:	9300      	str	r3, [sp, #0]
   1fb0e:	d82f      	bhi.n	1fb70 <UtilCmacBuildDataForDerivation+0x8c>
   1fb10:	b370      	cbz	r0, 1fb70 <UtilCmacBuildDataForDerivation+0x8c>
   1fb12:	4690      	mov	r8, r2
   1fb14:	b117      	cbz	r7, 1fb1c <UtilCmacBuildDataForDerivation+0x38>
   1fb16:	b35a      	cbz	r2, 1fb70 <UtilCmacBuildDataForDerivation+0x8c>
   1fb18:	2f40      	cmp	r7, #64	; 0x40
   1fb1a:	d829      	bhi.n	1fb70 <UtilCmacBuildDataForDerivation+0x8c>
   1fb1c:	9a08      	ldr	r2, [sp, #32]
   1fb1e:	b33a      	cbz	r2, 1fb70 <UtilCmacBuildDataForDerivation+0x8c>
   1fb20:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fb22:	6811      	ldr	r1, [r2, #0]
   1fb24:	b321      	cbz	r1, 1fb70 <UtilCmacBuildDataForDerivation+0x8c>
   1fb26:	19e2      	adds	r2, r4, r7
   1fb28:	4413      	add	r3, r2
   1fb2a:	4299      	cmp	r1, r3
   1fb2c:	d320      	bcc.n	1fb70 <UtilCmacBuildDataForDerivation+0x8c>
   1fb2e:	9b08      	ldr	r3, [sp, #32]
   1fb30:	4622      	mov	r2, r4
   1fb32:	4601      	mov	r1, r0
   1fb34:	1c58      	adds	r0, r3, #1
   1fb36:	f7ff f8f5 	bl	1ed24 <CC_PalMemCopyPlat>
   1fb3a:	9b08      	ldr	r3, [sp, #32]
   1fb3c:	4423      	add	r3, r4
   1fb3e:	2200      	movs	r2, #0
   1fb40:	3402      	adds	r4, #2
   1fb42:	705a      	strb	r2, [r3, #1]
   1fb44:	bb07      	cbnz	r7, 1fb88 <UtilCmacBuildDataForDerivation+0xa4>
   1fb46:	2eff      	cmp	r6, #255	; 0xff
   1fb48:	9600      	str	r6, [sp, #0]
   1fb4a:	d915      	bls.n	1fb78 <UtilCmacBuildDataForDerivation+0x94>
   1fb4c:	9b08      	ldr	r3, [sp, #32]
   1fb4e:	0235      	lsls	r5, r6, #8
   1fb50:	b2ad      	uxth	r5, r5
   1fb52:	1918      	adds	r0, r3, r4
   1fb54:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1fb58:	2202      	movs	r2, #2
   1fb5a:	a901      	add	r1, sp, #4
   1fb5c:	9501      	str	r5, [sp, #4]
   1fb5e:	f7ff f8e1 	bl	1ed24 <CC_PalMemCopyPlat>
   1fb62:	3402      	adds	r4, #2
   1fb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb66:	2000      	movs	r0, #0
   1fb68:	601c      	str	r4, [r3, #0]
   1fb6a:	b002      	add	sp, #8
   1fb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb70:	4809      	ldr	r0, [pc, #36]	; (1fb98 <UtilCmacBuildDataForDerivation+0xb4>)
   1fb72:	b002      	add	sp, #8
   1fb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb78:	9b08      	ldr	r3, [sp, #32]
   1fb7a:	2201      	movs	r2, #1
   1fb7c:	1918      	adds	r0, r3, r4
   1fb7e:	4669      	mov	r1, sp
   1fb80:	f7ff f8d0 	bl	1ed24 <CC_PalMemCopyPlat>
   1fb84:	3401      	adds	r4, #1
   1fb86:	e7ed      	b.n	1fb64 <UtilCmacBuildDataForDerivation+0x80>
   1fb88:	9b08      	ldr	r3, [sp, #32]
   1fb8a:	4641      	mov	r1, r8
   1fb8c:	1918      	adds	r0, r3, r4
   1fb8e:	463a      	mov	r2, r7
   1fb90:	f7ff f8c8 	bl	1ed24 <CC_PalMemCopyPlat>
   1fb94:	443c      	add	r4, r7
   1fb96:	e7d6      	b.n	1fb46 <UtilCmacBuildDataForDerivation+0x62>
   1fb98:	80000006 	.word	0x80000006

0001fb9c <CC_PalDataBufferAttrGet>:
   1fb9c:	2000      	movs	r0, #0
   1fb9e:	7018      	strb	r0, [r3, #0]
   1fba0:	4770      	bx	lr
   1fba2:	bf00      	nop

0001fba4 <initiate_modules>:
#include "initiater.h"


int initiate_modules(){
   1fba4:	b508      	push	{r3, lr}
    int err;
   	// err = configure_dk_buttons_leds();
	err = timer_init();
   1fba6:	f7f0 f985 	bl	feb4 <timer_init>
	err = timer_start();
   1fbaa:	f7f0 f9af 	bl	ff0c <timer_start>
	err = init_bluethooth_scan();
   1fbae:	f7f0 f8c1 	bl	fd34 <init_bluethooth_scan>

    return err;
   1fbb2:	bd08      	pop	{r3, pc}

0001fbb4 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1fbb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1fbb8:	b2db      	uxtb	r3, r3
   1fbba:	2b09      	cmp	r3, #9
   1fbbc:	d802      	bhi.n	1fbc4 <char2hex+0x10>
		*x = c - '0';
   1fbbe:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1fbc0:	2000      	movs	r0, #0
   1fbc2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1fbc4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1fbc8:	b2db      	uxtb	r3, r3
   1fbca:	2b05      	cmp	r3, #5
   1fbcc:	d803      	bhi.n	1fbd6 <char2hex+0x22>
		*x = c - 'a' + 10;
   1fbce:	3857      	subs	r0, #87	; 0x57
   1fbd0:	7008      	strb	r0, [r1, #0]
	return 0;
   1fbd2:	2000      	movs	r0, #0
   1fbd4:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   1fbd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1fbda:	b2db      	uxtb	r3, r3
   1fbdc:	2b05      	cmp	r3, #5
   1fbde:	d803      	bhi.n	1fbe8 <char2hex+0x34>
		*x = c - 'A' + 10;
   1fbe0:	3837      	subs	r0, #55	; 0x37
   1fbe2:	7008      	strb	r0, [r1, #0]
	return 0;
   1fbe4:	2000      	movs	r0, #0
   1fbe6:	4770      	bx	lr
		return -EINVAL;
   1fbe8:	f06f 0015 	mvn.w	r0, #21
}
   1fbec:	4770      	bx	lr

0001fbee <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1fbee:	4602      	mov	r2, r0
   1fbf0:	b1b0      	cbz	r0, 1fc20 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1fbf2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1fbf4:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1fbf8:	2b02      	cmp	r3, #2
   1fbfa:	d00b      	beq.n	1fc14 <sys_notify_validate+0x26>
   1fbfc:	2b03      	cmp	r3, #3
   1fbfe:	d004      	beq.n	1fc0a <sys_notify_validate+0x1c>
   1fc00:	2b01      	cmp	r3, #1
   1fc02:	d004      	beq.n	1fc0e <sys_notify_validate+0x20>
   1fc04:	f06f 0015 	mvn.w	r0, #21
   1fc08:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1fc0a:	6803      	ldr	r3, [r0, #0]
   1fc0c:	b15b      	cbz	r3, 1fc26 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1fc0e:	2000      	movs	r0, #0
   1fc10:	6090      	str	r0, [r2, #8]
   1fc12:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1fc14:	6803      	ldr	r3, [r0, #0]
   1fc16:	2b00      	cmp	r3, #0
   1fc18:	d1f9      	bne.n	1fc0e <sys_notify_validate+0x20>
			rv = -EINVAL;
   1fc1a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1fc1e:	4770      	bx	lr
		return -EINVAL;
   1fc20:	f06f 0015 	mvn.w	r0, #21
   1fc24:	4770      	bx	lr
			rv = -EINVAL;
   1fc26:	f06f 0015 	mvn.w	r0, #21
   1fc2a:	4770      	bx	lr

0001fc2c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1fc2c:	b510      	push	{r4, lr}
   1fc2e:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1fc30:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1fc32:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1fc36:	6081      	str	r1, [r0, #8]
	switch (method) {
   1fc38:	2a02      	cmp	r2, #2
   1fc3a:	d004      	beq.n	1fc46 <sys_notify_finalize+0x1a>
   1fc3c:	2a03      	cmp	r2, #3
   1fc3e:	d105      	bne.n	1fc4c <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1fc40:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1fc42:	2000      	movs	r0, #0
		break;
   1fc44:	e004      	b.n	1fc50 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   1fc46:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1fc48:	2400      	movs	r4, #0
		break;
   1fc4a:	e001      	b.n	1fc50 <sys_notify_finalize+0x24>
	switch (method) {
   1fc4c:	2400      	movs	r4, #0
   1fc4e:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1fc50:	2200      	movs	r2, #0
   1fc52:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1fc54:	b108      	cbz	r0, 1fc5a <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   1fc56:	f7fd fae1 	bl	1d21c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1fc5a:	4620      	mov	r0, r4
   1fc5c:	bd10      	pop	{r4, pc}

0001fc5e <arch_printk_char_out>:
}
   1fc5e:	2000      	movs	r0, #0
   1fc60:	4770      	bx	lr

0001fc62 <str_out>:
{
   1fc62:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1fc64:	680c      	ldr	r4, [r1, #0]
   1fc66:	b154      	cbz	r4, 1fc7e <str_out+0x1c>
   1fc68:	688a      	ldr	r2, [r1, #8]
   1fc6a:	684b      	ldr	r3, [r1, #4]
   1fc6c:	429a      	cmp	r2, r3
   1fc6e:	da06      	bge.n	1fc7e <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1fc70:	3b01      	subs	r3, #1
   1fc72:	429a      	cmp	r2, r3
   1fc74:	d008      	beq.n	1fc88 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   1fc76:	1c53      	adds	r3, r2, #1
   1fc78:	608b      	str	r3, [r1, #8]
   1fc7a:	54a0      	strb	r0, [r4, r2]
   1fc7c:	e002      	b.n	1fc84 <str_out+0x22>
		ctx->count++;
   1fc7e:	688b      	ldr	r3, [r1, #8]
   1fc80:	3301      	adds	r3, #1
   1fc82:	608b      	str	r3, [r1, #8]
}
   1fc84:	bc10      	pop	{r4}
   1fc86:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1fc88:	1c53      	adds	r3, r2, #1
   1fc8a:	608b      	str	r3, [r1, #8]
   1fc8c:	2300      	movs	r3, #0
   1fc8e:	54a3      	strb	r3, [r4, r2]
   1fc90:	e7f8      	b.n	1fc84 <str_out+0x22>

0001fc92 <printk>:
{
   1fc92:	b40f      	push	{r0, r1, r2, r3}
   1fc94:	b500      	push	{lr}
   1fc96:	b083      	sub	sp, #12
   1fc98:	a904      	add	r1, sp, #16
   1fc9a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1fc9e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1fca0:	f7f0 f962 	bl	ff68 <vprintk>
}
   1fca4:	b003      	add	sp, #12
   1fca6:	f85d eb04 	ldr.w	lr, [sp], #4
   1fcaa:	b004      	add	sp, #16
   1fcac:	4770      	bx	lr

0001fcae <snprintk>:
{
   1fcae:	b40c      	push	{r2, r3}
   1fcb0:	b500      	push	{lr}
   1fcb2:	b083      	sub	sp, #12
   1fcb4:	ab04      	add	r3, sp, #16
   1fcb6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1fcba:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1fcbc:	f7f0 f964 	bl	ff88 <vsnprintk>
}
   1fcc0:	b003      	add	sp, #12
   1fcc2:	f85d eb04 	ldr.w	lr, [sp], #4
   1fcc6:	b002      	add	sp, #8
   1fcc8:	4770      	bx	lr

0001fcca <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1fcca:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1fcce:	8b01      	ldrh	r1, [r0, #24]
   1fcd0:	f021 0107 	bic.w	r1, r1, #7
   1fcd4:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1fcd6:	8301      	strh	r1, [r0, #24]
}
   1fcd8:	4770      	bx	lr

0001fcda <notify_monitors>:
{
   1fcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fcde:	4606      	mov	r6, r0
   1fce0:	460f      	mov	r7, r1
   1fce2:	4690      	mov	r8, r2
	return list->head;
   1fce4:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1fce6:	b119      	cbz	r1, 1fcf0 <notify_monitors+0x16>
   1fce8:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fcea:	b131      	cbz	r1, 1fcfa <notify_monitors+0x20>
	return node->next;
   1fcec:	680c      	ldr	r4, [r1, #0]
   1fcee:	e004      	b.n	1fcfa <notify_monitors+0x20>
   1fcf0:	460c      	mov	r4, r1
   1fcf2:	e002      	b.n	1fcfa <notify_monitors+0x20>
   1fcf4:	4623      	mov	r3, r4
   1fcf6:	4621      	mov	r1, r4
   1fcf8:	461c      	mov	r4, r3
   1fcfa:	b159      	cbz	r1, 1fd14 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1fcfc:	684d      	ldr	r5, [r1, #4]
   1fcfe:	4643      	mov	r3, r8
   1fd00:	463a      	mov	r2, r7
   1fd02:	4630      	mov	r0, r6
   1fd04:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1fd06:	2c00      	cmp	r4, #0
   1fd08:	d0f4      	beq.n	1fcf4 <notify_monitors+0x1a>
   1fd0a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fd0c:	2c00      	cmp	r4, #0
   1fd0e:	d0f2      	beq.n	1fcf6 <notify_monitors+0x1c>
	return node->next;
   1fd10:	6823      	ldr	r3, [r4, #0]
   1fd12:	e7f0      	b.n	1fcf6 <notify_monitors+0x1c>
}
   1fd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fd18 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fd18:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1fd1a:	f013 0307 	ands.w	r3, r3, #7
   1fd1e:	d103      	bne.n	1fd28 <process_recheck+0x10>
	return list->head;
   1fd20:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1fd22:	b10a      	cbz	r2, 1fd28 <process_recheck+0x10>
		evt = EVT_START;
   1fd24:	2003      	movs	r0, #3
   1fd26:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1fd28:	2b02      	cmp	r3, #2
   1fd2a:	d003      	beq.n	1fd34 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1fd2c:	2b01      	cmp	r3, #1
   1fd2e:	d006      	beq.n	1fd3e <process_recheck+0x26>
	int evt = EVT_NOP;
   1fd30:	2000      	movs	r0, #0
   1fd32:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1fd34:	8b42      	ldrh	r2, [r0, #26]
   1fd36:	2a00      	cmp	r2, #0
   1fd38:	d1f8      	bne.n	1fd2c <process_recheck+0x14>
		evt = EVT_STOP;
   1fd3a:	2004      	movs	r0, #4
   1fd3c:	4770      	bx	lr
   1fd3e:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1fd40:	b10b      	cbz	r3, 1fd46 <process_recheck+0x2e>
		evt = EVT_RESET;
   1fd42:	2005      	movs	r0, #5
}
   1fd44:	4770      	bx	lr
	int evt = EVT_NOP;
   1fd46:	2000      	movs	r0, #0
   1fd48:	4770      	bx	lr

0001fd4a <process_complete>:
{
   1fd4a:	b538      	push	{r3, r4, r5, lr}
   1fd4c:	4604      	mov	r4, r0
   1fd4e:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fd50:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   1fd52:	2a00      	cmp	r2, #0
   1fd54:	db07      	blt.n	1fd66 <process_complete+0x1c>
   1fd56:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1fd5a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1fd5c:	2a01      	cmp	r2, #1
   1fd5e:	d90e      	bls.n	1fd7e <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1fd60:	2b04      	cmp	r3, #4
   1fd62:	d032      	beq.n	1fdca <process_complete+0x80>
}
   1fd64:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   1fd66:	e9d0 0100 	ldrd	r0, r1, [r0]
   1fd6a:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1fd6e:	2300      	movs	r3, #0
   1fd70:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1fd72:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1fd74:	2101      	movs	r1, #1
   1fd76:	4620      	mov	r0, r4
   1fd78:	f7ff ffa7 	bl	1fcca <set_state>
   1fd7c:	e7f2      	b.n	1fd64 <process_complete+0x1a>
		*clients = mgr->clients;
   1fd7e:	e9d0 0100 	ldrd	r0, r1, [r0]
   1fd82:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1fd86:	2200      	movs	r2, #0
   1fd88:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1fd8a:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1fd8c:	2b06      	cmp	r3, #6
   1fd8e:	d117      	bne.n	1fdc0 <process_complete+0x76>
	return list->head;
   1fd90:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1fd92:	b13b      	cbz	r3, 1fda4 <process_complete+0x5a>
				mgr->refs += 1U;
   1fd94:	8b62      	ldrh	r2, [r4, #26]
   1fd96:	3201      	adds	r2, #1
   1fd98:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fd9a:	2b00      	cmp	r3, #0
   1fd9c:	d0f9      	beq.n	1fd92 <process_complete+0x48>
	return node->next;
   1fd9e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1fda0:	2b00      	cmp	r3, #0
   1fda2:	d1f6      	bne.n	1fd92 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1fda4:	2102      	movs	r1, #2
   1fda6:	4620      	mov	r0, r4
   1fda8:	f7ff ff8f 	bl	1fcca <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1fdac:	4620      	mov	r0, r4
   1fdae:	f7ff ffb3 	bl	1fd18 <process_recheck>
   1fdb2:	2800      	cmp	r0, #0
   1fdb4:	d0d6      	beq.n	1fd64 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1fdb6:	8b23      	ldrh	r3, [r4, #24]
   1fdb8:	f043 0320 	orr.w	r3, r3, #32
   1fdbc:	8323      	strh	r3, [r4, #24]
   1fdbe:	e7d1      	b.n	1fd64 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1fdc0:	2100      	movs	r1, #0
   1fdc2:	4620      	mov	r0, r4
   1fdc4:	f7ff ff81 	bl	1fcca <set_state>
   1fdc8:	e7f0      	b.n	1fdac <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   1fdca:	2100      	movs	r1, #0
   1fdcc:	f7ff ff7d 	bl	1fcca <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1fdd0:	4620      	mov	r0, r4
   1fdd2:	f7ff ffa1 	bl	1fd18 <process_recheck>
   1fdd6:	2800      	cmp	r0, #0
   1fdd8:	d0c4      	beq.n	1fd64 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1fdda:	8b23      	ldrh	r3, [r4, #24]
   1fddc:	f043 0320 	orr.w	r3, r3, #32
   1fde0:	8323      	strh	r3, [r4, #24]
}
   1fde2:	e7bf      	b.n	1fd64 <process_complete+0x1a>

0001fde4 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1fde4:	b158      	cbz	r0, 1fdfe <validate_args+0x1a>
{
   1fde6:	b510      	push	{r4, lr}
   1fde8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1fdea:	b159      	cbz	r1, 1fe04 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   1fdec:	1d08      	adds	r0, r1, #4
   1fdee:	f7ff fefe 	bl	1fbee <sys_notify_validate>
	if ((rv == 0)
   1fdf2:	b918      	cbnz	r0, 1fdfc <validate_args+0x18>
	    && ((cli->notify.flags
   1fdf4:	68a3      	ldr	r3, [r4, #8]
   1fdf6:	f033 0303 	bics.w	r3, r3, #3
   1fdfa:	d106      	bne.n	1fe0a <validate_args+0x26>
}
   1fdfc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fdfe:	f06f 0015 	mvn.w	r0, #21
}
   1fe02:	4770      	bx	lr
		return -EINVAL;
   1fe04:	f06f 0015 	mvn.w	r0, #21
   1fe08:	e7f8      	b.n	1fdfc <validate_args+0x18>
		rv = -EINVAL;
   1fe0a:	f06f 0015 	mvn.w	r0, #21
   1fe0e:	e7f5      	b.n	1fdfc <validate_args+0x18>

0001fe10 <notify_one>:
{
   1fe10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe14:	4607      	mov	r7, r0
   1fe16:	460c      	mov	r4, r1
   1fe18:	4616      	mov	r6, r2
   1fe1a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1fe1c:	4619      	mov	r1, r3
   1fe1e:	1d20      	adds	r0, r4, #4
   1fe20:	f7ff ff04 	bl	1fc2c <sys_notify_finalize>
	if (cb) {
   1fe24:	b128      	cbz	r0, 1fe32 <notify_one+0x22>
   1fe26:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   1fe28:	462b      	mov	r3, r5
   1fe2a:	4632      	mov	r2, r6
   1fe2c:	4621      	mov	r1, r4
   1fe2e:	4638      	mov	r0, r7
   1fe30:	47c0      	blx	r8
}
   1fe32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fe36 <notify_all>:
{
   1fe36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fe3a:	4681      	mov	r9, r0
   1fe3c:	460c      	mov	r4, r1
   1fe3e:	4690      	mov	r8, r2
   1fe40:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   1fe42:	e005      	b.n	1fe50 <notify_all+0x1a>
	list->tail = node;
   1fe44:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   1fe46:	463b      	mov	r3, r7
   1fe48:	4642      	mov	r2, r8
   1fe4a:	4648      	mov	r0, r9
   1fe4c:	f7ff ffe0 	bl	1fe10 <notify_one>
	return list->head;
   1fe50:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1fe52:	b129      	cbz	r1, 1fe60 <notify_all+0x2a>
	return node->next;
   1fe54:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1fe56:	6025      	str	r5, [r4, #0]
	return list->tail;
   1fe58:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fe5a:	428e      	cmp	r6, r1
   1fe5c:	d1f3      	bne.n	1fe46 <notify_all+0x10>
   1fe5e:	e7f1      	b.n	1fe44 <notify_all+0xe>
}
   1fe60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001fe64 <transition_complete>:
{
   1fe64:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fe66:	f04f 0440 	mov.w	r4, #64	; 0x40
   1fe6a:	f3ef 8211 	mrs	r2, BASEPRI
   1fe6e:	f384 8812 	msr	BASEPRI_MAX, r4
   1fe72:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1fe76:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   1fe78:	2101      	movs	r1, #1
   1fe7a:	f7f0 f89b 	bl	ffb4 <process_event>
}
   1fe7e:	bd10      	pop	{r4, pc}

0001fe80 <onoff_manager_init>:
	if ((mgr == NULL)
   1fe80:	4603      	mov	r3, r0
   1fe82:	b168      	cbz	r0, 1fea0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1fe84:	b179      	cbz	r1, 1fea6 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   1fe86:	680a      	ldr	r2, [r1, #0]
   1fe88:	b182      	cbz	r2, 1feac <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   1fe8a:	684a      	ldr	r2, [r1, #4]
   1fe8c:	b18a      	cbz	r2, 1feb2 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1fe8e:	2000      	movs	r0, #0
   1fe90:	6018      	str	r0, [r3, #0]
   1fe92:	6058      	str	r0, [r3, #4]
   1fe94:	6098      	str	r0, [r3, #8]
   1fe96:	60d8      	str	r0, [r3, #12]
   1fe98:	6158      	str	r0, [r3, #20]
   1fe9a:	6198      	str	r0, [r3, #24]
   1fe9c:	6119      	str	r1, [r3, #16]
	return 0;
   1fe9e:	4770      	bx	lr
		return -EINVAL;
   1fea0:	f06f 0015 	mvn.w	r0, #21
   1fea4:	4770      	bx	lr
   1fea6:	f06f 0015 	mvn.w	r0, #21
   1feaa:	4770      	bx	lr
   1feac:	f06f 0015 	mvn.w	r0, #21
   1feb0:	4770      	bx	lr
   1feb2:	f06f 0015 	mvn.w	r0, #21
}
   1feb6:	4770      	bx	lr

0001feb8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1feba:	4604      	mov	r4, r0
   1febc:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1febe:	f7ff ff91 	bl	1fde4 <validate_args>

	if (rv < 0) {
   1fec2:	1e06      	subs	r6, r0, #0
   1fec4:	db37      	blt.n	1ff36 <onoff_request+0x7e>
   1fec6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1feca:	f3ef 8211 	mrs	r2, BASEPRI
   1fece:	f383 8812 	msr	BASEPRI_MAX, r3
   1fed2:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fed6:	8b25      	ldrh	r5, [r4, #24]
   1fed8:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1fedc:	8b63      	ldrh	r3, [r4, #26]
   1fede:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1fee2:	428b      	cmp	r3, r1
   1fee4:	d02f      	beq.n	1ff46 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1fee6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1fee8:	2d02      	cmp	r5, #2
   1feea:	d00c      	beq.n	1ff06 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1feec:	b18d      	cbz	r5, 1ff12 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1feee:	2d04      	cmp	r5, #4
   1fef0:	d00f      	beq.n	1ff12 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1fef2:	2d06      	cmp	r5, #6
   1fef4:	d00d      	beq.n	1ff12 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1fef6:	2d05      	cmp	r5, #5
   1fef8:	d01f      	beq.n	1ff3a <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1fefa:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1fefe:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1ff00:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1ff02:	4608      	mov	r0, r1
   1ff04:	e00a      	b.n	1ff1c <onoff_request+0x64>
		mgr->refs += 1U;
   1ff06:	3301      	adds	r3, #1
   1ff08:	8363      	strh	r3, [r4, #26]
		notify = true;
   1ff0a:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1ff0c:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1ff0e:	4618      	mov	r0, r3
   1ff10:	e004      	b.n	1ff1c <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1ff12:	fab5 f385 	clz	r3, r5
   1ff16:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1ff18:	2100      	movs	r1, #0
		add_client = true;
   1ff1a:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1ff1c:	b128      	cbz	r0, 1ff2a <onoff_request+0x72>
	parent->next = child;
   1ff1e:	2000      	movs	r0, #0
   1ff20:	6038      	str	r0, [r7, #0]
	return list->tail;
   1ff22:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1ff24:	b1a8      	cbz	r0, 1ff52 <onoff_request+0x9a>
	parent->next = child;
   1ff26:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1ff28:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1ff2a:	b9ab      	cbnz	r3, 1ff58 <onoff_request+0xa0>
	__asm__ volatile(
   1ff2c:	f382 8811 	msr	BASEPRI, r2
   1ff30:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1ff34:	b9a9      	cbnz	r1, 1ff62 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1ff36:	4630      	mov	r0, r6
   1ff38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1ff3a:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1ff3e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1ff40:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1ff42:	4608      	mov	r0, r1
   1ff44:	e7ea      	b.n	1ff1c <onoff_request+0x64>
		rv = -EAGAIN;
   1ff46:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1ff4a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1ff4c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1ff4e:	4608      	mov	r0, r1
   1ff50:	e7e4      	b.n	1ff1c <onoff_request+0x64>
   1ff52:	6067      	str	r7, [r4, #4]
	list->head = node;
   1ff54:	6027      	str	r7, [r4, #0]
}
   1ff56:	e7e8      	b.n	1ff2a <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1ff58:	2102      	movs	r1, #2
   1ff5a:	4620      	mov	r0, r4
   1ff5c:	f7f0 f82a 	bl	ffb4 <process_event>
   1ff60:	e7e9      	b.n	1ff36 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1ff62:	2300      	movs	r3, #0
   1ff64:	462a      	mov	r2, r5
   1ff66:	4639      	mov	r1, r7
   1ff68:	4620      	mov	r0, r4
   1ff6a:	f7ff ff51 	bl	1fe10 <notify_one>
   1ff6e:	e7e2      	b.n	1ff36 <onoff_request+0x7e>

0001ff70 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ff70:	b508      	push	{r3, lr}
   1ff72:	4604      	mov	r4, r0
   1ff74:	4608      	mov	r0, r1
   1ff76:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1ff78:	461a      	mov	r2, r3
   1ff7a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1ff7c:	f7fc fc14 	bl	1c7a8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1ff80:	f7f3 f972 	bl	13268 <z_impl_k_thread_abort>

0001ff84 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ff84:	00c9      	lsls	r1, r1, #3
   1ff86:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1ff88:	4408      	add	r0, r1
   1ff8a:	4770      	bx	lr

0001ff8c <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1ff8c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1ff90:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   1ff92:	4299      	cmp	r1, r3
   1ff94:	d00e      	beq.n	1ffb4 <free_list_remove_bidx+0x28>
{
   1ff96:	b410      	push	{r4}
   1ff98:	00cc      	lsls	r4, r1, #3
   1ff9a:	4404      	add	r4, r0
   1ff9c:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1ff9e:	3204      	adds	r2, #4
   1ffa0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1ffa4:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1ffa6:	3206      	adds	r2, #6
   1ffa8:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   1ffaa:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1ffac:	3304      	adds	r3, #4
   1ffae:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1ffb0:	bc10      	pop	{r4}
   1ffb2:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   1ffb4:	2301      	movs	r3, #1
   1ffb6:	fa03 f102 	lsl.w	r1, r3, r2
   1ffba:	68c3      	ldr	r3, [r0, #12]
   1ffbc:	ea23 0301 	bic.w	r3, r3, r1
   1ffc0:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1ffc2:	3204      	adds	r2, #4
   1ffc4:	2300      	movs	r3, #0
   1ffc6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   1ffca:	4770      	bx	lr

0001ffcc <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1ffcc:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1ffce:	1d13      	adds	r3, r2, #4
   1ffd0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1ffd4:	b984      	cbnz	r4, 1fff8 <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   1ffd6:	2301      	movs	r3, #1
   1ffd8:	fa03 f402 	lsl.w	r4, r3, r2
   1ffdc:	68c3      	ldr	r3, [r0, #12]
   1ffde:	4323      	orrs	r3, r4
   1ffe0:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1ffe2:	3204      	adds	r2, #4
   1ffe4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1ffe8:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   1ffea:	1d1a      	adds	r2, r3, #4
   1ffec:	b289      	uxth	r1, r1
   1ffee:	5281      	strh	r1, [r0, r2]
   1fff0:	3306      	adds	r3, #6
   1fff2:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1fff4:	bc70      	pop	{r4, r5, r6}
   1fff6:	4770      	bx	lr
	void *cmem = &buf[c];
   1fff8:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   1fffa:	3204      	adds	r2, #4
   1fffc:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   1fffe:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   20000:	1d2e      	adds	r6, r5, #4
   20002:	5383      	strh	r3, [r0, r6]
   20004:	3506      	adds	r5, #6
   20006:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   20008:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2000a:	3306      	adds	r3, #6
   2000c:	b289      	uxth	r1, r1
   2000e:	52c1      	strh	r1, [r0, r3]
   20010:	5281      	strh	r1, [r0, r2]
   20012:	e7ef      	b.n	1fff4 <free_list_add_bidx+0x28>

00020014 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   20014:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   20016:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   20018:	3302      	adds	r3, #2
   2001a:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   2001c:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2001e:	1a89      	subs	r1, r1, r2
   20020:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20024:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   20026:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20028:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   2002a:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   2002c:	3402      	adds	r4, #2
   2002e:	5303      	strh	r3, [r0, r4]
   20030:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20034:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   20038:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   2003a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   2003e:	bc30      	pop	{r4, r5}
   20040:	4770      	bx	lr

00020042 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   20042:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   20044:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   20046:	3102      	adds	r1, #2
   20048:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   2004a:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   2004c:	3402      	adds	r4, #2
   2004e:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20050:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   20052:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20056:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   20058:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   2005a:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   2005c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   20060:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   20064:	bc30      	pop	{r4, r5}
   20066:	4770      	bx	lr

00020068 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   20068:	3904      	subs	r1, #4
   2006a:	1a08      	subs	r0, r1, r0
}
   2006c:	08c0      	lsrs	r0, r0, #3
   2006e:	4770      	bx	lr

00020070 <free_list_remove>:
{
   20070:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   20072:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   20076:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20078:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2007a:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   2007e:	f1c2 021f 	rsb	r2, r2, #31
   20082:	f7ff ff83 	bl	1ff8c <free_list_remove_bidx>
}
   20086:	bd08      	pop	{r3, pc}

00020088 <free_list_add>:
{
   20088:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2008a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2008e:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20090:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   20092:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   20096:	f1c2 021f 	rsb	r2, r2, #31
   2009a:	f7ff ff97 	bl	1ffcc <free_list_add_bidx>
}
   2009e:	bd08      	pop	{r3, pc}

000200a0 <free_chunk>:
{
   200a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200a2:	4604      	mov	r4, r0
   200a4:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   200a6:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   200a8:	1cb7      	adds	r7, r6, #2
   200aa:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   200ac:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   200b0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   200b4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   200b6:	f013 0f01 	tst.w	r3, #1
   200ba:	d00c      	beq.n	200d6 <free_chunk+0x36>
   200bc:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   200be:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   200c0:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   200c4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   200c6:	f013 0f01 	tst.w	r3, #1
   200ca:	d00e      	beq.n	200ea <free_chunk+0x4a>
	free_list_add(h, c);
   200cc:	4629      	mov	r1, r5
   200ce:	4620      	mov	r0, r4
   200d0:	f7ff ffda 	bl	20088 <free_list_add>
}
   200d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   200d6:	f7ff ffcb 	bl	20070 <free_list_remove>
   200da:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   200dc:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   200e0:	4629      	mov	r1, r5
   200e2:	4620      	mov	r0, r4
   200e4:	f7ff ffad 	bl	20042 <merge_chunks>
   200e8:	e7e8      	b.n	200bc <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   200ea:	4620      	mov	r0, r4
   200ec:	f7ff ffc0 	bl	20070 <free_list_remove>
   200f0:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   200f2:	462a      	mov	r2, r5
   200f4:	1a69      	subs	r1, r5, r1
   200f6:	4620      	mov	r0, r4
   200f8:	f7ff ffa3 	bl	20042 <merge_chunks>
   200fc:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   200fe:	1aed      	subs	r5, r5, r3
   20100:	e7e4      	b.n	200cc <free_chunk+0x2c>

00020102 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   20102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   20104:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   20108:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2010c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   20110:	b1b7      	cbz	r7, 20140 <alloc_chunk+0x3e>
   20112:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   20116:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   20118:	1d14      	adds	r4, r2, #4
   2011a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   2011e:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   20120:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   20124:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   20128:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   2012c:	d912      	bls.n	20154 <alloc_chunk+0x52>
   2012e:	4405      	add	r5, r0
   20130:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   20132:	1d15      	adds	r5, r2, #4
   20134:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   20138:	3e01      	subs	r6, #1
   2013a:	d001      	beq.n	20140 <alloc_chunk+0x3e>
   2013c:	42a7      	cmp	r7, r4
   2013e:	d1eb      	bne.n	20118 <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   20140:	68c4      	ldr	r4, [r0, #12]
   20142:	f1c3 0220 	rsb	r2, r3, #32
   20146:	2301      	movs	r3, #1
   20148:	4093      	lsls	r3, r2
   2014a:	425b      	negs	r3, r3

	if (bmask != 0U) {
   2014c:	401c      	ands	r4, r3
   2014e:	d105      	bne.n	2015c <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   20150:	4620      	mov	r0, r4
   20152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   20154:	4621      	mov	r1, r4
   20156:	f7ff ff19 	bl	1ff8c <free_list_remove_bidx>
				return c;
   2015a:	e7f9      	b.n	20150 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   2015c:	fa94 f2a4 	rbit	r2, r4
   20160:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   20164:	1d13      	adds	r3, r2, #4
   20166:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2016a:	4621      	mov	r1, r4
   2016c:	f7ff ff0e 	bl	1ff8c <free_list_remove_bidx>
		return c;
   20170:	e7ee      	b.n	20150 <alloc_chunk+0x4e>

00020172 <sys_heap_free>:
	if (mem == NULL) {
   20172:	b179      	cbz	r1, 20194 <sys_heap_free+0x22>
{
   20174:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   20176:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   20178:	4620      	mov	r0, r4
   2017a:	f7ff ff75 	bl	20068 <mem_to_chunkid>
   2017e:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   20180:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   20184:	8853      	ldrh	r3, [r2, #2]
   20186:	f023 0301 	bic.w	r3, r3, #1
   2018a:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   2018c:	4620      	mov	r0, r4
   2018e:	f7ff ff87 	bl	200a0 <free_chunk>
}
   20192:	bd10      	pop	{r4, pc}
   20194:	4770      	bx	lr

00020196 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   20196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   20198:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   2019a:	b341      	cbz	r1, 201ee <sys_heap_alloc+0x58>
   2019c:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   2019e:	68aa      	ldr	r2, [r5, #8]
   201a0:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   201a4:	d925      	bls.n	201f2 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   201a6:	330b      	adds	r3, #11
   201a8:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   201aa:	4621      	mov	r1, r4
   201ac:	4628      	mov	r0, r5
   201ae:	f7ff ffa8 	bl	20102 <alloc_chunk>
	if (c == 0U) {
   201b2:	4607      	mov	r7, r0
   201b4:	b1f8      	cbz	r0, 201f6 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   201b6:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   201b8:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   201bc:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   201be:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   201c2:	d309      	bcc.n	201d8 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   201c4:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   201c6:	885a      	ldrh	r2, [r3, #2]
   201c8:	f042 0201 	orr.w	r2, r2, #1
   201cc:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   201ce:	4639      	mov	r1, r7
   201d0:	4628      	mov	r0, r5
   201d2:	f7ff fed7 	bl	1ff84 <chunk_mem>
}
   201d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   201d8:	4404      	add	r4, r0
   201da:	4622      	mov	r2, r4
   201dc:	4601      	mov	r1, r0
   201de:	4628      	mov	r0, r5
   201e0:	f7ff ff18 	bl	20014 <split_chunks>
		free_list_add(h, c + chunk_sz);
   201e4:	4621      	mov	r1, r4
   201e6:	4628      	mov	r0, r5
   201e8:	f7ff ff4e 	bl	20088 <free_list_add>
   201ec:	e7ea      	b.n	201c4 <sys_heap_alloc+0x2e>
		return NULL;
   201ee:	2000      	movs	r0, #0
   201f0:	e7f1      	b.n	201d6 <sys_heap_alloc+0x40>
   201f2:	2000      	movs	r0, #0
   201f4:	e7ef      	b.n	201d6 <sys_heap_alloc+0x40>
		return NULL;
   201f6:	2000      	movs	r0, #0
   201f8:	e7ed      	b.n	201d6 <sys_heap_alloc+0x40>

000201fa <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   201fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201fe:	460d      	mov	r5, r1
   20200:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   20202:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   20204:	424b      	negs	r3, r1
   20206:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   2020a:	ea31 0303 	bics.w	r3, r1, r3
   2020e:	d03e      	beq.n	2028e <sys_heap_aligned_alloc+0x94>
		align -= rew;
   20210:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   20214:	f1b8 0f03 	cmp.w	r8, #3
   20218:	d844      	bhi.n	202a4 <sys_heap_aligned_alloc+0xaa>
   2021a:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2021c:	2c00      	cmp	r4, #0
   2021e:	d057      	beq.n	202d0 <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   20220:	68b3      	ldr	r3, [r6, #8]
   20222:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   20226:	d955      	bls.n	202d4 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   20228:	1929      	adds	r1, r5, r4
   2022a:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2022c:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2022e:	08c9      	lsrs	r1, r1, #3
   20230:	4630      	mov	r0, r6
   20232:	f7ff ff66 	bl	20102 <alloc_chunk>

	if (c0 == 0) {
   20236:	4607      	mov	r7, r0
   20238:	2800      	cmp	r0, #0
   2023a:	d04d      	beq.n	202d8 <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   2023c:	4601      	mov	r1, r0
   2023e:	4630      	mov	r0, r6
   20240:	f7ff fea0 	bl	1ff84 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   20244:	4440      	add	r0, r8
   20246:	4428      	add	r0, r5
   20248:	3801      	subs	r0, #1
   2024a:	426d      	negs	r5, r5
   2024c:	4005      	ands	r5, r0
   2024e:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   20252:	442c      	add	r4, r5
   20254:	3407      	adds	r4, #7
   20256:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   2025a:	4629      	mov	r1, r5
   2025c:	4630      	mov	r0, r6
   2025e:	f7ff ff03 	bl	20068 <mem_to_chunkid>
   20262:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   20264:	1ba4      	subs	r4, r4, r6
   20266:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   20268:	4287      	cmp	r7, r0
   2026a:	d31d      	bcc.n	202a8 <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   2026c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   20270:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   20274:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   20276:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   2027a:	429c      	cmp	r4, r3
   2027c:	d31e      	bcc.n	202bc <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   2027e:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   20280:	8873      	ldrh	r3, [r6, #2]
   20282:	f043 0301 	orr.w	r3, r3, #1
   20286:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   20288:	4628      	mov	r0, r5
   2028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   2028e:	2904      	cmp	r1, #4
   20290:	d903      	bls.n	2029a <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   20292:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   20296:	2204      	movs	r2, #4
   20298:	e7c0      	b.n	2021c <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   2029a:	4611      	mov	r1, r2
   2029c:	f7ff ff7b 	bl	20196 <sys_heap_alloc>
   202a0:	4605      	mov	r5, r0
   202a2:	e7f1      	b.n	20288 <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   202a4:	2204      	movs	r2, #4
   202a6:	e7b9      	b.n	2021c <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   202a8:	4602      	mov	r2, r0
   202aa:	4639      	mov	r1, r7
   202ac:	4630      	mov	r0, r6
   202ae:	f7ff feb1 	bl	20014 <split_chunks>
		free_list_add(h, c0);
   202b2:	4639      	mov	r1, r7
   202b4:	4630      	mov	r0, r6
   202b6:	f7ff fee7 	bl	20088 <free_list_add>
   202ba:	e7d7      	b.n	2026c <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   202bc:	4622      	mov	r2, r4
   202be:	4641      	mov	r1, r8
   202c0:	4630      	mov	r0, r6
   202c2:	f7ff fea7 	bl	20014 <split_chunks>
		free_list_add(h, c_end);
   202c6:	4621      	mov	r1, r4
   202c8:	4630      	mov	r0, r6
   202ca:	f7ff fedd 	bl	20088 <free_list_add>
   202ce:	e7d6      	b.n	2027e <sys_heap_aligned_alloc+0x84>
		return NULL;
   202d0:	2500      	movs	r5, #0
   202d2:	e7d9      	b.n	20288 <sys_heap_aligned_alloc+0x8e>
   202d4:	2500      	movs	r5, #0
   202d6:	e7d7      	b.n	20288 <sys_heap_aligned_alloc+0x8e>
		return NULL;
   202d8:	2500      	movs	r5, #0
   202da:	e7d5      	b.n	20288 <sys_heap_aligned_alloc+0x8e>

000202dc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   202dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202de:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   202e0:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   202e2:	1dc8      	adds	r0, r1, #7
   202e4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   202e8:	440d      	add	r5, r1
   202ea:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   202ee:	1a2d      	subs	r5, r5, r0
   202f0:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   202f4:	4607      	mov	r7, r0
	heap->heap = h;
   202f6:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   202f8:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   202fc:	2300      	movs	r3, #0
   202fe:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   20300:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   20304:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   20308:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   2030c:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2030e:	f102 0c07 	add.w	ip, r2, #7
   20312:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   20316:	42b3      	cmp	r3, r6
   20318:	da05      	bge.n	20326 <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   2031a:	1d1a      	adds	r2, r3, #4
   2031c:	2400      	movs	r4, #0
   2031e:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   20322:	3301      	adds	r3, #1
   20324:	e7f7      	b.n	20316 <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20326:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   20328:	b29b      	uxth	r3, r3
   2032a:	2200      	movs	r2, #0
   2032c:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2032e:	f043 0301 	orr.w	r3, r3, #1
   20332:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   20334:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20338:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   2033a:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   2033e:	1c94      	adds	r4, r2, #2
   20340:	5306      	strh	r6, [r0, r4]
   20342:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   20344:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   20348:	4405      	add	r5, r0
   2034a:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2034c:	2301      	movs	r3, #1
   2034e:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   20350:	f7ff fe9a 	bl	20088 <free_list_add>
}
   20354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020356 <outs>:
{
   20356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2035a:	4607      	mov	r7, r0
   2035c:	460e      	mov	r6, r1
   2035e:	4614      	mov	r4, r2
   20360:	4698      	mov	r8, r3
	size_t count = 0;
   20362:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20364:	e006      	b.n	20374 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   20366:	4631      	mov	r1, r6
   20368:	f814 0b01 	ldrb.w	r0, [r4], #1
   2036c:	47b8      	blx	r7
		if (rc < 0) {
   2036e:	2800      	cmp	r0, #0
   20370:	db09      	blt.n	20386 <outs+0x30>
		++count;
   20372:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20374:	4544      	cmp	r4, r8
   20376:	d3f6      	bcc.n	20366 <outs+0x10>
   20378:	f1b8 0f00 	cmp.w	r8, #0
   2037c:	d102      	bne.n	20384 <outs+0x2e>
   2037e:	7823      	ldrb	r3, [r4, #0]
   20380:	2b00      	cmp	r3, #0
   20382:	d1f0      	bne.n	20366 <outs+0x10>
	return (int)count;
   20384:	4628      	mov	r0, r5
}
   20386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002038a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2038a:	4770      	bx	lr

0002038c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2038c:	2300      	movs	r3, #0
   2038e:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   20390:	6003      	str	r3, [r0, #0]
}
   20392:	4770      	bx	lr

00020394 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   20394:	6803      	ldr	r3, [r0, #0]
   20396:	b12b      	cbz	r3, 203a4 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   20398:	6843      	ldr	r3, [r0, #4]
   2039a:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   2039c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2039e:	2300      	movs	r3, #0
   203a0:	600b      	str	r3, [r1, #0]
}
   203a2:	4770      	bx	lr
		list->head = msg;
   203a4:	6001      	str	r1, [r0, #0]
   203a6:	e7f9      	b.n	2039c <log_list_add_tail+0x8>

000203a8 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   203a8:	6800      	ldr	r0, [r0, #0]
   203aa:	4770      	bx	lr

000203ac <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   203ac:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   203ae:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   203b0:	b108      	cbz	r0, 203b6 <log_list_head_get+0xa>
		list->head = list->head->next;
   203b2:	6802      	ldr	r2, [r0, #0]
   203b4:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   203b6:	4770      	bx	lr

000203b8 <dummy_timestamp>:
}
   203b8:	2000      	movs	r0, #0
   203ba:	4770      	bx	lr

000203bc <msg_filter_check>:
}
   203bc:	2001      	movs	r0, #1
   203be:	4770      	bx	lr

000203c0 <default_get_timestamp>:
{
   203c0:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   203c2:	f003 f847 	bl	23454 <sys_clock_cycle_get_32>
}
   203c6:	bd08      	pop	{r3, pc}

000203c8 <z_log_get_tag>:
}
   203c8:	2000      	movs	r0, #0
   203ca:	4770      	bx	lr

000203cc <block_on_alloc>:
}
   203cc:	2000      	movs	r0, #0
   203ce:	4770      	bx	lr

000203d0 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   203d0:	2901      	cmp	r1, #1
   203d2:	d906      	bls.n	203e2 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   203d4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   203d6:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   203d8:	2906      	cmp	r1, #6
   203da:	d907      	bls.n	203ec <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   203dc:	3907      	subs	r1, #7
		cont = cont->next;
   203de:	681b      	ldr	r3, [r3, #0]
   203e0:	e7fa      	b.n	203d8 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   203e2:	3104      	adds	r1, #4
   203e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   203e8:	6888      	ldr	r0, [r1, #8]
   203ea:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   203ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   203f0:	6848      	ldr	r0, [r1, #4]
}
   203f2:	4770      	bx	lr

000203f4 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   203f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203f8:	460d      	mov	r5, r1
	struct log_msg_cont *cont = msg->payload.ext.next;
   203fa:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   203fc:	2a03      	cmp	r2, #3
   203fe:	d917      	bls.n	20430 <copy_args_to_msg+0x3c>
   20400:	6809      	ldr	r1, [r1, #0]
   20402:	686b      	ldr	r3, [r5, #4]
   20404:	6181      	str	r1, [r0, #24]
   20406:	61c3      	str	r3, [r0, #28]
		(void)memcpy(msg->payload.ext.data.args, args,
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   20408:	1e94      	subs	r4, r2, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   2040a:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   2040c:	b1b4      	cbz	r4, 2043c <copy_args_to_msg+0x48>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   2040e:	46a0      	mov	r8, r4
   20410:	2c07      	cmp	r4, #7
   20412:	bf28      	it	cs
   20414:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   20418:	ea4f 0788 	mov.w	r7, r8, lsl #2
   2041c:	463a      	mov	r2, r7
   2041e:	4629      	mov	r1, r5
   20420:	1d30      	adds	r0, r6, #4
   20422:	f004 fa69 	bl	248f8 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   20426:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   2042a:	443d      	add	r5, r7
		cont = cont->next;
   2042c:	6836      	ldr	r6, [r6, #0]
   2042e:	e7ed      	b.n	2040c <copy_args_to_msg+0x18>
   20430:	0092      	lsls	r2, r2, #2
   20432:	3014      	adds	r0, #20
   20434:	f004 fa60 	bl	248f8 <memcpy>
		nargs  = 0U;
   20438:	2400      	movs	r4, #0
   2043a:	e7e7      	b.n	2040c <copy_args_to_msg+0x18>
	}
}
   2043c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020440 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   20440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20444:	461c      	mov	r4, r3
   20446:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2044a:	8903      	ldrh	r3, [r0, #8]
   2044c:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   20450:	42a3      	cmp	r3, r4
   20452:	d91f      	bls.n	20494 <log_msg_hexdump_data_op+0x54>
   20454:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   20456:	6811      	ldr	r1, [r2, #0]
   20458:	4421      	add	r1, r4
   2045a:	4299      	cmp	r1, r3
   2045c:	d901      	bls.n	20462 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   2045e:	1b19      	subs	r1, r3, r4
   20460:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   20462:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20464:	2b0c      	cmp	r3, #12
   20466:	d919      	bls.n	2049c <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   20468:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   2046c:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2046e:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   20470:	42a3      	cmp	r3, r4
   20472:	d91e      	bls.n	204b2 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20474:	42bb      	cmp	r3, r7
   20476:	bf28      	it	cs
   20478:	463b      	movcs	r3, r7
   2047a:	461d      	mov	r5, r3

		if (put_op) {
   2047c:	f1b9 0f00 	cmp.w	r9, #0
   20480:	d010      	beq.n	204a4 <log_msg_hexdump_data_op+0x64>
   20482:	461a      	mov	r2, r3
   20484:	4641      	mov	r1, r8
   20486:	eb0c 0004 	add.w	r0, ip, r4
   2048a:	f004 fa35 	bl	248f8 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   2048e:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   20490:	44a8      	add	r8, r5
   20492:	e021      	b.n	204d8 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   20494:	2300      	movs	r3, #0
   20496:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   20498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   2049c:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   204a0:	2600      	movs	r6, #0
   204a2:	e7e5      	b.n	20470 <log_msg_hexdump_data_op+0x30>
   204a4:	461a      	mov	r2, r3
   204a6:	eb0c 0104 	add.w	r1, ip, r4
   204aa:	4640      	mov	r0, r8
   204ac:	f004 fa24 	bl	248f8 <memcpy>
   204b0:	e7ed      	b.n	2048e <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   204b2:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   204b4:	b91e      	cbnz	r6, 204be <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   204b6:	6946      	ldr	r6, [r0, #20]
   204b8:	e001      	b.n	204be <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   204ba:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   204bc:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   204be:	2c1b      	cmp	r4, #27
   204c0:	d8fb      	bhi.n	204ba <log_msg_hexdump_data_op+0x7a>
   204c2:	e009      	b.n	204d8 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   204c4:	1931      	adds	r1, r6, r4
   204c6:	462a      	mov	r2, r5
   204c8:	3104      	adds	r1, #4
   204ca:	4640      	mov	r0, r8
   204cc:	f004 fa14 	bl	248f8 <memcpy>
		cont = cont->next;
   204d0:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   204d2:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   204d4:	44a8      	add	r8, r5
		offset = 0;
   204d6:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   204d8:	2f00      	cmp	r7, #0
   204da:	d0dd      	beq.n	20498 <log_msg_hexdump_data_op+0x58>
   204dc:	2e00      	cmp	r6, #0
   204de:	d0db      	beq.n	20498 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   204e0:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   204e4:	42bd      	cmp	r5, r7
   204e6:	bf28      	it	cs
   204e8:	463d      	movcs	r5, r7
		if (put_op) {
   204ea:	f1b9 0f00 	cmp.w	r9, #0
   204ee:	d0e9      	beq.n	204c4 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   204f0:	1930      	adds	r0, r6, r4
   204f2:	462a      	mov	r2, r5
   204f4:	4641      	mov	r1, r8
   204f6:	3004      	adds	r0, #4
   204f8:	f004 f9fe 	bl	248f8 <memcpy>
   204fc:	e7e8      	b.n	204d0 <log_msg_hexdump_data_op+0x90>

000204fe <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   204fe:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20500:	f3bf 8f5b 	dmb	ish
   20504:	e850 3f00 	ldrex	r3, [r0]
   20508:	3301      	adds	r3, #1
   2050a:	e840 3200 	strex	r2, r3, [r0]
   2050e:	2a00      	cmp	r2, #0
   20510:	d1f8      	bne.n	20504 <log_msg_get+0x6>
   20512:	f3bf 8f5b 	dmb	ish
}
   20516:	4770      	bx	lr

00020518 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   20518:	7a40      	ldrb	r0, [r0, #9]
}
   2051a:	0900      	lsrs	r0, r0, #4
   2051c:	4770      	bx	lr

0002051e <log_msg_arg_get>:
{
   2051e:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   20520:	7a43      	ldrb	r3, [r0, #9]
   20522:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   20526:	d20a      	bcs.n	2053e <log_msg_arg_get+0x20>
   20528:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2052a:	2a03      	cmp	r2, #3
   2052c:	d804      	bhi.n	20538 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   2052e:	3104      	adds	r1, #4
   20530:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   20534:	6840      	ldr	r0, [r0, #4]
   20536:	e003      	b.n	20540 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   20538:	f7ff ff4a 	bl	203d0 <cont_arg_get>
   2053c:	e000      	b.n	20540 <log_msg_arg_get+0x22>
		return 0;
   2053e:	2000      	movs	r0, #0
}
   20540:	bd08      	pop	{r3, pc}

00020542 <log_msg_str_get>:
}
   20542:	6900      	ldr	r0, [r0, #16]
   20544:	4770      	bx	lr

00020546 <log_msg_put>:
{
   20546:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   20548:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2054a:	f3bf 8f5b 	dmb	ish
   2054e:	e853 2f00 	ldrex	r2, [r3]
   20552:	3a01      	subs	r2, #1
   20554:	e843 2100 	strex	r1, r2, [r3]
   20558:	2900      	cmp	r1, #0
   2055a:	d1f8      	bne.n	2054e <log_msg_put+0x8>
   2055c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   20560:	6843      	ldr	r3, [r0, #4]
   20562:	b103      	cbz	r3, 20566 <log_msg_put+0x20>
}
   20564:	bd08      	pop	{r3, pc}
		msg_free(msg);
   20566:	f7f0 fff5 	bl	11554 <msg_free>
}
   2056a:	e7fb      	b.n	20564 <log_msg_put+0x1e>

0002056c <msg_alloc>:
{
   2056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2056e:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   20570:	f7f0 ffd4 	bl	1151c <log_msg_chunk_alloc>
	if (msg != NULL) {
   20574:	4607      	mov	r7, r0
   20576:	b140      	cbz	r0, 2058a <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   20578:	2301      	movs	r3, #1
   2057a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2057c:	2200      	movs	r2, #0
   2057e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   20580:	f04f 0300 	mov.w	r3, #0
   20584:	f362 0300 	bfi	r3, r2, #0, #1
   20588:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2058a:	b1f7      	cbz	r7, 205ca <msg_alloc+0x5e>
   2058c:	2d03      	cmp	r5, #3
   2058e:	d91c      	bls.n	205ca <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   20590:	7a7b      	ldrb	r3, [r7, #9]
   20592:	f36f 1307 	bfc	r3, #4, #4
   20596:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   20598:	7a3b      	ldrb	r3, [r7, #8]
   2059a:	f043 0302 	orr.w	r3, r3, #2
   2059e:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   205a0:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   205a2:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   205a6:	2300      	movs	r3, #0
   205a8:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   205aa:	2d00      	cmp	r5, #0
   205ac:	dd0d      	ble.n	205ca <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   205ae:	f7f0 ffb5 	bl	1151c <log_msg_chunk_alloc>
		if (cont == NULL) {
   205b2:	4604      	mov	r4, r0
   205b4:	b128      	cbz	r0, 205c2 <msg_alloc+0x56>
		*next = cont;
   205b6:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   205b8:	2300      	movs	r3, #0
   205ba:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   205bc:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   205be:	3d07      	subs	r5, #7
   205c0:	e7f3      	b.n	205aa <msg_alloc+0x3e>
			msg_free(msg);
   205c2:	4638      	mov	r0, r7
   205c4:	f7f0 ffc6 	bl	11554 <msg_free>
			return NULL;
   205c8:	4627      	mov	r7, r4
}
   205ca:	4638      	mov	r0, r7
   205cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000205ce <log_msg_create_n>:
{
   205ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205d0:	4607      	mov	r7, r0
   205d2:	460e      	mov	r6, r1
   205d4:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   205d6:	4610      	mov	r0, r2
   205d8:	f7ff ffc8 	bl	2056c <msg_alloc>
	if (msg != NULL) {
   205dc:	4605      	mov	r5, r0
   205de:	b140      	cbz	r0, 205f2 <log_msg_create_n+0x24>
		msg->str = str;
   205e0:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   205e2:	7a43      	ldrb	r3, [r0, #9]
   205e4:	f364 1307 	bfi	r3, r4, #4, #4
   205e8:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   205ea:	4622      	mov	r2, r4
   205ec:	4631      	mov	r1, r6
   205ee:	f7ff ff01 	bl	203f4 <copy_args_to_msg>
}
   205f2:	4628      	mov	r0, r5
   205f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000205f6 <log_msg_hexdump_create>:
{
   205f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   205fa:	4606      	mov	r6, r0
   205fc:	460f      	mov	r7, r1
   205fe:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   20600:	f643 75ff 	movw	r5, #16383	; 0x3fff
   20604:	4295      	cmp	r5, r2
   20606:	bf28      	it	cs
   20608:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   2060a:	f7f0 ff87 	bl	1151c <log_msg_chunk_alloc>
	if (msg == NULL) {
   2060e:	4681      	mov	r9, r0
   20610:	2800      	cmp	r0, #0
   20612:	d041      	beq.n	20698 <log_msg_hexdump_create+0xa2>
	msg->hdr.ref_cnt = 1;
   20614:	2301      	movs	r3, #1
   20616:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   20618:	7a03      	ldrb	r3, [r0, #8]
   2061a:	f043 0301 	orr.w	r3, r3, #1
   2061e:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   20620:	8903      	ldrh	r3, [r0, #8]
   20622:	f365 038f 	bfi	r3, r5, #2, #14
   20626:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   20628:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2062a:	2c0c      	cmp	r4, #12
   2062c:	d923      	bls.n	20676 <log_msg_hexdump_create+0x80>
   2062e:	683a      	ldr	r2, [r7, #0]
   20630:	687b      	ldr	r3, [r7, #4]
   20632:	6182      	str	r2, [r0, #24]
   20634:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   20636:	2300      	movs	r3, #0
   20638:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   2063a:	7a03      	ldrb	r3, [r0, #8]
   2063c:	f043 0302 	orr.w	r3, r3, #2
   20640:	7203      	strb	r3, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20642:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20644:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   20646:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   2064a:	b32d      	cbz	r5, 20698 <log_msg_hexdump_create+0xa2>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2064c:	f7f0 ff66 	bl	1151c <log_msg_chunk_alloc>
		if (cont == NULL) {
   20650:	4604      	mov	r4, r0
   20652:	b1e8      	cbz	r0, 20690 <log_msg_hexdump_create+0x9a>
		*prev_cont = cont;
   20654:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   20658:	2300      	movs	r3, #0
   2065a:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   2065c:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   2065e:	462e      	mov	r6, r5
   20660:	2d1c      	cmp	r5, #28
   20662:	bf28      	it	cs
   20664:	261c      	movcs	r6, #28
   20666:	4632      	mov	r2, r6
   20668:	4639      	mov	r1, r7
   2066a:	3004      	adds	r0, #4
   2066c:	f004 f944 	bl	248f8 <memcpy>
		data += chunk_length;
   20670:	4437      	add	r7, r6
		length -= chunk_length;
   20672:	1bad      	subs	r5, r5, r6
   20674:	e7e9      	b.n	2064a <log_msg_hexdump_create+0x54>
   20676:	462a      	mov	r2, r5
   20678:	4639      	mov	r1, r7
   2067a:	3014      	adds	r0, #20
   2067c:	f004 f93c 	bl	248f8 <memcpy>
		msg->hdr.params.generic.ext = 0;
   20680:	f899 3008 	ldrb.w	r3, [r9, #8]
   20684:	f36f 0341 	bfc	r3, #1, #1
   20688:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   2068c:	2500      	movs	r5, #0
   2068e:	e7da      	b.n	20646 <log_msg_hexdump_create+0x50>
			msg_free(msg);
   20690:	4648      	mov	r0, r9
   20692:	f7f0 ff5f 	bl	11554 <msg_free>
			return NULL;
   20696:	46a1      	mov	r9, r4
}
   20698:	4648      	mov	r0, r9
   2069a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002069e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2069e:	b510      	push	{r4, lr}
   206a0:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   206a2:	2400      	movs	r4, #0
   206a4:	9400      	str	r4, [sp, #0]
   206a6:	f7ff fecb 	bl	20440 <log_msg_hexdump_data_op>
}
   206aa:	b002      	add	sp, #8
   206ac:	bd10      	pop	{r4, pc}

000206ae <buffer_write>:
{
   206ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   206b0:	4607      	mov	r7, r0
   206b2:	460d      	mov	r5, r1
   206b4:	4614      	mov	r4, r2
   206b6:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   206b8:	4632      	mov	r2, r6
   206ba:	4621      	mov	r1, r4
   206bc:	4628      	mov	r0, r5
   206be:	47b8      	blx	r7
		buf += processed;
   206c0:	4405      	add	r5, r0
	} while (len != 0);
   206c2:	1a24      	subs	r4, r4, r0
   206c4:	d1f8      	bne.n	206b8 <buffer_write+0xa>
}
   206c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000206c8 <color_prefix>:
{
   206c8:	b508      	push	{r3, lr}
   206ca:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   206cc:	2201      	movs	r2, #1
   206ce:	f7f0 ffd9 	bl	11684 <color_print>
}
   206d2:	bd08      	pop	{r3, pc}

000206d4 <color_postfix>:
{
   206d4:	b508      	push	{r3, lr}
   206d6:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   206d8:	2200      	movs	r2, #0
   206da:	f7f0 ffd3 	bl	11684 <color_print>
}
   206de:	bd08      	pop	{r3, pc}

000206e0 <postfix_print>:
{
   206e0:	b538      	push	{r3, r4, r5, lr}
   206e2:	4605      	mov	r5, r0
   206e4:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   206e6:	f001 0101 	and.w	r1, r1, #1
   206ea:	f7ff fff3 	bl	206d4 <color_postfix>
	newline_print(output, flags);
   206ee:	4621      	mov	r1, r4
   206f0:	4628      	mov	r0, r5
   206f2:	f7f0 ffdd 	bl	116b0 <newline_print>
}
   206f6:	bd38      	pop	{r3, r4, r5, pc}

000206f8 <std_print>:
{
   206f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   206fc:	b08e      	sub	sp, #56	; 0x38
   206fe:	af0e      	add	r7, sp, #56	; 0x38
   20700:	4606      	mov	r6, r0
   20702:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   20704:	f7ff ff1d 	bl	20542 <log_msg_str_get>
   20708:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2070a:	4630      	mov	r0, r6
   2070c:	f7ff ff04 	bl	20518 <log_msg_nargs_get>
   20710:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   20712:	0083      	lsls	r3, r0, #2
   20714:	3307      	adds	r3, #7
   20716:	f023 0307 	bic.w	r3, r3, #7
   2071a:	ebad 0d03 	sub.w	sp, sp, r3
   2071e:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   20720:	2400      	movs	r4, #0
   20722:	4544      	cmp	r4, r8
   20724:	d207      	bcs.n	20736 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   20726:	4621      	mov	r1, r4
   20728:	4630      	mov	r0, r6
   2072a:	f7ff fef8 	bl	2051e <log_msg_arg_get>
   2072e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   20732:	3401      	adds	r4, #1
   20734:	e7f5      	b.n	20722 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   20736:	4630      	mov	r0, r6
   20738:	f7ff feee 	bl	20518 <log_msg_nargs_get>
   2073c:	280f      	cmp	r0, #15
   2073e:	d815      	bhi.n	2076c <std_print+0x74>
   20740:	e8df f010 	tbh	[pc, r0, lsl #1]
   20744:	00170010 	.word	0x00170010
   20748:	0024001d 	.word	0x0024001d
   2074c:	0038002d 	.word	0x0038002d
   20750:	00540045 	.word	0x00540045
   20754:	00780065 	.word	0x00780065
   20758:	00a4008d 	.word	0x00a4008d
   2075c:	00d800bd 	.word	0x00d800bd
   20760:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
   20764:	4651      	mov	r1, sl
   20766:	4648      	mov	r0, r9
   20768:	f7f0 ff34 	bl	115d4 <print_formatted>
}
   2076c:	46bd      	mov	sp, r7
   2076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   20772:	682a      	ldr	r2, [r5, #0]
   20774:	4651      	mov	r1, sl
   20776:	4648      	mov	r0, r9
   20778:	f7f0 ff2c 	bl	115d4 <print_formatted>
		break;
   2077c:	e7f6      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   2077e:	686b      	ldr	r3, [r5, #4]
   20780:	682a      	ldr	r2, [r5, #0]
   20782:	4651      	mov	r1, sl
   20784:	4648      	mov	r0, r9
   20786:	f7f0 ff25 	bl	115d4 <print_formatted>
		break;
   2078a:	e7ef      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   2078c:	686b      	ldr	r3, [r5, #4]
   2078e:	682a      	ldr	r2, [r5, #0]
   20790:	68a9      	ldr	r1, [r5, #8]
   20792:	9100      	str	r1, [sp, #0]
   20794:	4651      	mov	r1, sl
   20796:	4648      	mov	r0, r9
   20798:	f7f0 ff1c 	bl	115d4 <print_formatted>
		break;
   2079c:	e7e6      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2079e:	686b      	ldr	r3, [r5, #4]
   207a0:	682a      	ldr	r2, [r5, #0]
   207a2:	68e9      	ldr	r1, [r5, #12]
   207a4:	9101      	str	r1, [sp, #4]
   207a6:	68a9      	ldr	r1, [r5, #8]
   207a8:	9100      	str	r1, [sp, #0]
   207aa:	4651      	mov	r1, sl
   207ac:	4648      	mov	r0, r9
   207ae:	f7f0 ff11 	bl	115d4 <print_formatted>
		break;
   207b2:	e7db      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   207b4:	686b      	ldr	r3, [r5, #4]
   207b6:	682a      	ldr	r2, [r5, #0]
   207b8:	6929      	ldr	r1, [r5, #16]
   207ba:	9102      	str	r1, [sp, #8]
   207bc:	68e9      	ldr	r1, [r5, #12]
   207be:	9101      	str	r1, [sp, #4]
   207c0:	68a9      	ldr	r1, [r5, #8]
   207c2:	9100      	str	r1, [sp, #0]
   207c4:	4651      	mov	r1, sl
   207c6:	4648      	mov	r0, r9
   207c8:	f7f0 ff04 	bl	115d4 <print_formatted>
		break;
   207cc:	e7ce      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   207ce:	686b      	ldr	r3, [r5, #4]
   207d0:	682a      	ldr	r2, [r5, #0]
   207d2:	6969      	ldr	r1, [r5, #20]
   207d4:	9103      	str	r1, [sp, #12]
   207d6:	6929      	ldr	r1, [r5, #16]
   207d8:	9102      	str	r1, [sp, #8]
   207da:	68e9      	ldr	r1, [r5, #12]
   207dc:	9101      	str	r1, [sp, #4]
   207de:	68a9      	ldr	r1, [r5, #8]
   207e0:	9100      	str	r1, [sp, #0]
   207e2:	4651      	mov	r1, sl
   207e4:	4648      	mov	r0, r9
   207e6:	f7f0 fef5 	bl	115d4 <print_formatted>
		break;
   207ea:	e7bf      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   207ec:	686b      	ldr	r3, [r5, #4]
   207ee:	682a      	ldr	r2, [r5, #0]
   207f0:	69a9      	ldr	r1, [r5, #24]
   207f2:	9104      	str	r1, [sp, #16]
   207f4:	6969      	ldr	r1, [r5, #20]
   207f6:	9103      	str	r1, [sp, #12]
   207f8:	6929      	ldr	r1, [r5, #16]
   207fa:	9102      	str	r1, [sp, #8]
   207fc:	68e9      	ldr	r1, [r5, #12]
   207fe:	9101      	str	r1, [sp, #4]
   20800:	68a9      	ldr	r1, [r5, #8]
   20802:	9100      	str	r1, [sp, #0]
   20804:	4651      	mov	r1, sl
   20806:	4648      	mov	r0, r9
   20808:	f7f0 fee4 	bl	115d4 <print_formatted>
		break;
   2080c:	e7ae      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2080e:	686b      	ldr	r3, [r5, #4]
   20810:	682a      	ldr	r2, [r5, #0]
   20812:	69e9      	ldr	r1, [r5, #28]
   20814:	9105      	str	r1, [sp, #20]
   20816:	69a9      	ldr	r1, [r5, #24]
   20818:	9104      	str	r1, [sp, #16]
   2081a:	6969      	ldr	r1, [r5, #20]
   2081c:	9103      	str	r1, [sp, #12]
   2081e:	6929      	ldr	r1, [r5, #16]
   20820:	9102      	str	r1, [sp, #8]
   20822:	68e9      	ldr	r1, [r5, #12]
   20824:	9101      	str	r1, [sp, #4]
   20826:	68a9      	ldr	r1, [r5, #8]
   20828:	9100      	str	r1, [sp, #0]
   2082a:	4651      	mov	r1, sl
   2082c:	4648      	mov	r0, r9
   2082e:	f7f0 fed1 	bl	115d4 <print_formatted>
		break;
   20832:	e79b      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20834:	686b      	ldr	r3, [r5, #4]
   20836:	682a      	ldr	r2, [r5, #0]
   20838:	6a29      	ldr	r1, [r5, #32]
   2083a:	9106      	str	r1, [sp, #24]
   2083c:	69e9      	ldr	r1, [r5, #28]
   2083e:	9105      	str	r1, [sp, #20]
   20840:	69a9      	ldr	r1, [r5, #24]
   20842:	9104      	str	r1, [sp, #16]
   20844:	6969      	ldr	r1, [r5, #20]
   20846:	9103      	str	r1, [sp, #12]
   20848:	6929      	ldr	r1, [r5, #16]
   2084a:	9102      	str	r1, [sp, #8]
   2084c:	68e9      	ldr	r1, [r5, #12]
   2084e:	9101      	str	r1, [sp, #4]
   20850:	68a9      	ldr	r1, [r5, #8]
   20852:	9100      	str	r1, [sp, #0]
   20854:	4651      	mov	r1, sl
   20856:	4648      	mov	r0, r9
   20858:	f7f0 febc 	bl	115d4 <print_formatted>
		break;
   2085c:	e786      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2085e:	686b      	ldr	r3, [r5, #4]
   20860:	682a      	ldr	r2, [r5, #0]
   20862:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20864:	9107      	str	r1, [sp, #28]
   20866:	6a29      	ldr	r1, [r5, #32]
   20868:	9106      	str	r1, [sp, #24]
   2086a:	69e9      	ldr	r1, [r5, #28]
   2086c:	9105      	str	r1, [sp, #20]
   2086e:	69a9      	ldr	r1, [r5, #24]
   20870:	9104      	str	r1, [sp, #16]
   20872:	6969      	ldr	r1, [r5, #20]
   20874:	9103      	str	r1, [sp, #12]
   20876:	6929      	ldr	r1, [r5, #16]
   20878:	9102      	str	r1, [sp, #8]
   2087a:	68e9      	ldr	r1, [r5, #12]
   2087c:	9101      	str	r1, [sp, #4]
   2087e:	68a9      	ldr	r1, [r5, #8]
   20880:	9100      	str	r1, [sp, #0]
   20882:	4651      	mov	r1, sl
   20884:	4648      	mov	r0, r9
   20886:	f7f0 fea5 	bl	115d4 <print_formatted>
		break;
   2088a:	e76f      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2088c:	686b      	ldr	r3, [r5, #4]
   2088e:	682a      	ldr	r2, [r5, #0]
   20890:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20892:	9108      	str	r1, [sp, #32]
   20894:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20896:	9107      	str	r1, [sp, #28]
   20898:	6a29      	ldr	r1, [r5, #32]
   2089a:	9106      	str	r1, [sp, #24]
   2089c:	69e9      	ldr	r1, [r5, #28]
   2089e:	9105      	str	r1, [sp, #20]
   208a0:	69a9      	ldr	r1, [r5, #24]
   208a2:	9104      	str	r1, [sp, #16]
   208a4:	6969      	ldr	r1, [r5, #20]
   208a6:	9103      	str	r1, [sp, #12]
   208a8:	6929      	ldr	r1, [r5, #16]
   208aa:	9102      	str	r1, [sp, #8]
   208ac:	68e9      	ldr	r1, [r5, #12]
   208ae:	9101      	str	r1, [sp, #4]
   208b0:	68a9      	ldr	r1, [r5, #8]
   208b2:	9100      	str	r1, [sp, #0]
   208b4:	4651      	mov	r1, sl
   208b6:	4648      	mov	r0, r9
   208b8:	f7f0 fe8c 	bl	115d4 <print_formatted>
		break;
   208bc:	e756      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   208be:	686b      	ldr	r3, [r5, #4]
   208c0:	682a      	ldr	r2, [r5, #0]
   208c2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   208c4:	9109      	str	r1, [sp, #36]	; 0x24
   208c6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   208c8:	9108      	str	r1, [sp, #32]
   208ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
   208cc:	9107      	str	r1, [sp, #28]
   208ce:	6a29      	ldr	r1, [r5, #32]
   208d0:	9106      	str	r1, [sp, #24]
   208d2:	69e9      	ldr	r1, [r5, #28]
   208d4:	9105      	str	r1, [sp, #20]
   208d6:	69a9      	ldr	r1, [r5, #24]
   208d8:	9104      	str	r1, [sp, #16]
   208da:	6969      	ldr	r1, [r5, #20]
   208dc:	9103      	str	r1, [sp, #12]
   208de:	6929      	ldr	r1, [r5, #16]
   208e0:	9102      	str	r1, [sp, #8]
   208e2:	68e9      	ldr	r1, [r5, #12]
   208e4:	9101      	str	r1, [sp, #4]
   208e6:	68a9      	ldr	r1, [r5, #8]
   208e8:	9100      	str	r1, [sp, #0]
   208ea:	4651      	mov	r1, sl
   208ec:	4648      	mov	r0, r9
   208ee:	f7f0 fe71 	bl	115d4 <print_formatted>
		break;
   208f2:	e73b      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   208f4:	686b      	ldr	r3, [r5, #4]
   208f6:	682a      	ldr	r2, [r5, #0]
   208f8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   208fa:	910a      	str	r1, [sp, #40]	; 0x28
   208fc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   208fe:	9109      	str	r1, [sp, #36]	; 0x24
   20900:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20902:	9108      	str	r1, [sp, #32]
   20904:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20906:	9107      	str	r1, [sp, #28]
   20908:	6a29      	ldr	r1, [r5, #32]
   2090a:	9106      	str	r1, [sp, #24]
   2090c:	69e9      	ldr	r1, [r5, #28]
   2090e:	9105      	str	r1, [sp, #20]
   20910:	69a9      	ldr	r1, [r5, #24]
   20912:	9104      	str	r1, [sp, #16]
   20914:	6969      	ldr	r1, [r5, #20]
   20916:	9103      	str	r1, [sp, #12]
   20918:	6929      	ldr	r1, [r5, #16]
   2091a:	9102      	str	r1, [sp, #8]
   2091c:	68e9      	ldr	r1, [r5, #12]
   2091e:	9101      	str	r1, [sp, #4]
   20920:	68a9      	ldr	r1, [r5, #8]
   20922:	9100      	str	r1, [sp, #0]
   20924:	4651      	mov	r1, sl
   20926:	4648      	mov	r0, r9
   20928:	f7f0 fe54 	bl	115d4 <print_formatted>
		break;
   2092c:	e71e      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2092e:	686b      	ldr	r3, [r5, #4]
   20930:	682a      	ldr	r2, [r5, #0]
   20932:	6b69      	ldr	r1, [r5, #52]	; 0x34
   20934:	910b      	str	r1, [sp, #44]	; 0x2c
   20936:	6b29      	ldr	r1, [r5, #48]	; 0x30
   20938:	910a      	str	r1, [sp, #40]	; 0x28
   2093a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2093c:	9109      	str	r1, [sp, #36]	; 0x24
   2093e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20940:	9108      	str	r1, [sp, #32]
   20942:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20944:	9107      	str	r1, [sp, #28]
   20946:	6a29      	ldr	r1, [r5, #32]
   20948:	9106      	str	r1, [sp, #24]
   2094a:	69e9      	ldr	r1, [r5, #28]
   2094c:	9105      	str	r1, [sp, #20]
   2094e:	69a9      	ldr	r1, [r5, #24]
   20950:	9104      	str	r1, [sp, #16]
   20952:	6969      	ldr	r1, [r5, #20]
   20954:	9103      	str	r1, [sp, #12]
   20956:	6929      	ldr	r1, [r5, #16]
   20958:	9102      	str	r1, [sp, #8]
   2095a:	68e9      	ldr	r1, [r5, #12]
   2095c:	9101      	str	r1, [sp, #4]
   2095e:	68a9      	ldr	r1, [r5, #8]
   20960:	9100      	str	r1, [sp, #0]
   20962:	4651      	mov	r1, sl
   20964:	4648      	mov	r0, r9
   20966:	f7f0 fe35 	bl	115d4 <print_formatted>
		break;
   2096a:	e6ff      	b.n	2076c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2096c:	686b      	ldr	r3, [r5, #4]
   2096e:	682a      	ldr	r2, [r5, #0]
   20970:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   20972:	910c      	str	r1, [sp, #48]	; 0x30
   20974:	6b69      	ldr	r1, [r5, #52]	; 0x34
   20976:	910b      	str	r1, [sp, #44]	; 0x2c
   20978:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2097a:	910a      	str	r1, [sp, #40]	; 0x28
   2097c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   2097e:	9109      	str	r1, [sp, #36]	; 0x24
   20980:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20982:	9108      	str	r1, [sp, #32]
   20984:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20986:	9107      	str	r1, [sp, #28]
   20988:	6a29      	ldr	r1, [r5, #32]
   2098a:	9106      	str	r1, [sp, #24]
   2098c:	69e9      	ldr	r1, [r5, #28]
   2098e:	9105      	str	r1, [sp, #20]
   20990:	69a9      	ldr	r1, [r5, #24]
   20992:	9104      	str	r1, [sp, #16]
   20994:	6969      	ldr	r1, [r5, #20]
   20996:	9103      	str	r1, [sp, #12]
   20998:	6929      	ldr	r1, [r5, #16]
   2099a:	9102      	str	r1, [sp, #8]
   2099c:	68e9      	ldr	r1, [r5, #12]
   2099e:	9101      	str	r1, [sp, #4]
   209a0:	68a9      	ldr	r1, [r5, #8]
   209a2:	9100      	str	r1, [sp, #0]
   209a4:	4651      	mov	r1, sl
   209a6:	4648      	mov	r0, r9
   209a8:	f7f0 fe14 	bl	115d4 <print_formatted>
}
   209ac:	e6de      	b.n	2076c <std_print+0x74>

000209ae <log_output_flush>:
{
   209ae:	b510      	push	{r4, lr}
   209b0:	4604      	mov	r4, r0
		     output->control_block->offset,
   209b2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   209b4:	6853      	ldr	r3, [r2, #4]
   209b6:	6812      	ldr	r2, [r2, #0]
   209b8:	6881      	ldr	r1, [r0, #8]
   209ba:	6800      	ldr	r0, [r0, #0]
   209bc:	f7ff fe77 	bl	206ae <buffer_write>
	output->control_block->offset = 0;
   209c0:	6863      	ldr	r3, [r4, #4]
   209c2:	2200      	movs	r2, #0
   209c4:	601a      	str	r2, [r3, #0]
}
   209c6:	bd10      	pop	{r4, pc}

000209c8 <out_func>:
{
   209c8:	b538      	push	{r3, r4, r5, lr}
   209ca:	4605      	mov	r5, r0
   209cc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   209ce:	684b      	ldr	r3, [r1, #4]
   209d0:	681a      	ldr	r2, [r3, #0]
   209d2:	68cb      	ldr	r3, [r1, #12]
   209d4:	429a      	cmp	r2, r3
   209d6:	d00f      	beq.n	209f8 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   209d8:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   209da:	f3bf 8f5b 	dmb	ish
   209de:	e853 2f00 	ldrex	r2, [r3]
   209e2:	1c51      	adds	r1, r2, #1
   209e4:	e843 1000 	strex	r0, r1, [r3]
   209e8:	2800      	cmp	r0, #0
   209ea:	d1f8      	bne.n	209de <out_func+0x16>
   209ec:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   209f0:	68a3      	ldr	r3, [r4, #8]
   209f2:	549d      	strb	r5, [r3, r2]
}
   209f4:	2000      	movs	r0, #0
   209f6:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   209f8:	4608      	mov	r0, r1
   209fa:	f7ff ffd8 	bl	209ae <log_output_flush>
   209fe:	e7eb      	b.n	209d8 <out_func+0x10>

00020a00 <log_output_msg_process>:
{
   20a00:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a02:	b085      	sub	sp, #20
   20a04:	4606      	mov	r6, r0
   20a06:	460c      	mov	r4, r1
   20a08:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20a0a:	7a0b      	ldrb	r3, [r1, #8]
   20a0c:	f083 0301 	eor.w	r3, r3, #1
   20a10:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   20a14:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   20a16:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   20a18:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   20a1c:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   20a1e:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   20a22:	f011 0507 	ands.w	r5, r1, #7
   20a26:	d10f      	bne.n	20a48 <log_output_msg_process+0x48>
   20a28:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20a2a:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   20a2c:	f013 0f01 	tst.w	r3, #1
   20a30:	d014      	beq.n	20a5c <log_output_msg_process+0x5c>
	} else if (raw_string) {
   20a32:	b9c5      	cbnz	r5, 20a66 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   20a34:	4631      	mov	r1, r6
   20a36:	4620      	mov	r0, r4
   20a38:	f7f0 ff4c 	bl	118d4 <raw_string_print>
	if (!raw_string) {
   20a3c:	b9cd      	cbnz	r5, 20a72 <log_output_msg_process+0x72>
	log_output_flush(output);
   20a3e:	4630      	mov	r0, r6
   20a40:	f7ff ffb5 	bl	209ae <log_output_flush>
}
   20a44:	b005      	add	sp, #20
   20a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   20a48:	9002      	str	r0, [sp, #8]
   20a4a:	f8cd c004 	str.w	ip, [sp, #4]
   20a4e:	9500      	str	r5, [sp, #0]
   20a50:	4639      	mov	r1, r7
   20a52:	4630      	mov	r0, r6
   20a54:	f7f0 fed8 	bl	11808 <prefix_print>
   20a58:	4602      	mov	r2, r0
   20a5a:	e7e6      	b.n	20a2a <log_output_msg_process+0x2a>
		std_print(msg, output);
   20a5c:	4631      	mov	r1, r6
   20a5e:	4620      	mov	r0, r4
   20a60:	f7ff fe4a 	bl	206f8 <std_print>
   20a64:	e7ea      	b.n	20a3c <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   20a66:	463b      	mov	r3, r7
   20a68:	4631      	mov	r1, r6
   20a6a:	4620      	mov	r0, r4
   20a6c:	f7f0 ff08 	bl	11880 <hexdump_print>
   20a70:	e7e4      	b.n	20a3c <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   20a72:	462a      	mov	r2, r5
   20a74:	4639      	mov	r1, r7
   20a76:	4630      	mov	r0, r6
   20a78:	f7ff fe32 	bl	206e0 <postfix_print>
   20a7c:	e7df      	b.n	20a3e <log_output_msg_process+0x3e>

00020a7e <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   20a7e:	2200      	movs	r2, #0
   20a80:	6002      	str	r2, [r0, #0]
   20a82:	6042      	str	r2, [r0, #4]
   20a84:	6082      	str	r2, [r0, #8]
}
   20a86:	4770      	bx	lr

00020a88 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   20a88:	428b      	cmp	r3, r1
   20a8a:	d808      	bhi.n	20a9e <_copy+0x16>
{
   20a8c:	b538      	push	{r3, r4, r5, lr}
   20a8e:	4615      	mov	r5, r2
   20a90:	461c      	mov	r4, r3
   20a92:	461a      	mov	r2, r3
   20a94:	4629      	mov	r1, r5
   20a96:	f003 ff2f 	bl	248f8 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
   20a9a:	4620      	mov	r0, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   20a9c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   20a9e:	2000      	movs	r0, #0
}
   20aa0:	4770      	bx	lr

00020aa2 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   20aa2:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   20aa4:	f003 ff50 	bl	24948 <memset>
	(void)memset(to, val, len);
}
   20aa8:	bd08      	pop	{r3, pc}

00020aaa <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   20aaa:	09c3      	lsrs	r3, r0, #7
   20aac:	005a      	lsls	r2, r3, #1
   20aae:	4413      	add	r3, r2
   20ab0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   20ab4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   20ab8:	b2c0      	uxtb	r0, r0
   20aba:	4770      	bx	lr

00020abc <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20abc:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   20abe:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20ac0:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   20ac4:	2a00      	cmp	r2, #0
   20ac6:	db03      	blt.n	20ad0 <gf_double+0x14>
   20ac8:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   20aca:	f100 020f 	add.w	r2, r0, #15
   20ace:	e004      	b.n	20ada <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20ad0:	2487      	movs	r4, #135	; 0x87
   20ad2:	e7fa      	b.n	20aca <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   20ad4:	f813 0901 	ldrb.w	r0, [r3], #-1
   20ad8:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   20ada:	7818      	ldrb	r0, [r3, #0]
   20adc:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   20ae0:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   20ae4:	428b      	cmp	r3, r1
   20ae6:	d1f5      	bne.n	20ad4 <gf_double+0x18>
	}
}
   20ae8:	bc10      	pop	{r4}
   20aea:	4770      	bx	lr

00020aec <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   20aec:	b130      	cbz	r0, 20afc <tc_cmac_erase+0x10>
{
   20aee:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   20af0:	2258      	movs	r2, #88	; 0x58
   20af2:	2100      	movs	r1, #0
   20af4:	f7ff ffd5 	bl	20aa2 <_set>

	return TC_CRYPTO_SUCCESS;
   20af8:	2001      	movs	r0, #1
}
   20afa:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   20afc:	2000      	movs	r0, #0
}
   20afe:	4770      	bx	lr

00020b00 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20b00:	b1a0      	cbz	r0, 20b2c <tc_cmac_init+0x2c>
{
   20b02:	b510      	push	{r4, lr}
   20b04:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20b06:	2210      	movs	r2, #16
   20b08:	2100      	movs	r1, #0
   20b0a:	f7ff ffca 	bl	20aa2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   20b0e:	2210      	movs	r2, #16
   20b10:	2100      	movs	r1, #0
   20b12:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20b16:	f7ff ffc4 	bl	20aa2 <_set>
	s->leftover_offset = 0;
   20b1a:	2300      	movs	r3, #0
   20b1c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   20b1e:	2200      	movs	r2, #0
   20b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20b24:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   20b28:	2001      	movs	r0, #1
}
   20b2a:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   20b2c:	2000      	movs	r0, #0
}
   20b2e:	4770      	bx	lr

00020b30 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   20b30:	b338      	cbz	r0, 20b82 <tc_cmac_setup+0x52>
{
   20b32:	b570      	push	{r4, r5, r6, lr}
   20b34:	460d      	mov	r5, r1
   20b36:	4616      	mov	r6, r2
   20b38:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   20b3a:	b321      	cbz	r1, 20b86 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   20b3c:	2258      	movs	r2, #88	; 0x58
   20b3e:	2100      	movs	r1, #0
   20b40:	f7ff ffaf 	bl	20aa2 <_set>
	s->sched = sched;
   20b44:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   20b46:	4629      	mov	r1, r5
   20b48:	4630      	mov	r0, r6
   20b4a:	f7f1 f895 	bl	11c78 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20b4e:	2210      	movs	r2, #16
   20b50:	2100      	movs	r1, #0
   20b52:	4620      	mov	r0, r4
   20b54:	f7ff ffa5 	bl	20aa2 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   20b58:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20b5a:	4621      	mov	r1, r4
   20b5c:	4620      	mov	r0, r4
   20b5e:	f7f1 f8e9 	bl	11d34 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   20b62:	f104 0510 	add.w	r5, r4, #16
   20b66:	4621      	mov	r1, r4
   20b68:	4628      	mov	r0, r5
   20b6a:	f7ff ffa7 	bl	20abc <gf_double>
	gf_double (s->K2, s->K1);
   20b6e:	4629      	mov	r1, r5
   20b70:	f104 0020 	add.w	r0, r4, #32
   20b74:	f7ff ffa2 	bl	20abc <gf_double>
	tc_cmac_init(s);
   20b78:	4620      	mov	r0, r4
   20b7a:	f7ff ffc1 	bl	20b00 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   20b7e:	2001      	movs	r0, #1
}
   20b80:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20b82:	2000      	movs	r0, #0
}
   20b84:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   20b86:	2000      	movs	r0, #0
   20b88:	e7fa      	b.n	20b80 <tc_cmac_setup+0x50>

00020b8a <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20b8a:	2800      	cmp	r0, #0
   20b8c:	d062      	beq.n	20c54 <tc_cmac_update+0xca>
{
   20b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b92:	460e      	mov	r6, r1
   20b94:	4617      	mov	r7, r2
   20b96:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20b98:	2a00      	cmp	r2, #0
   20b9a:	d05d      	beq.n	20c58 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   20b9c:	2900      	cmp	r1, #0
   20b9e:	d05e      	beq.n	20c5e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   20ba0:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   20ba4:	ea50 0301 	orrs.w	r3, r0, r1
   20ba8:	d05b      	beq.n	20c62 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   20baa:	f110 32ff 	adds.w	r2, r0, #4294967295
   20bae:	f141 33ff 	adc.w	r3, r1, #4294967295
   20bb2:	6522      	str	r2, [r4, #80]	; 0x50
   20bb4:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   20bb6:	6c65      	ldr	r5, [r4, #68]	; 0x44
   20bb8:	b3a5      	cbz	r5, 20c24 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   20bba:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   20bbe:	4547      	cmp	r7, r8
   20bc0:	d30d      	bcc.n	20bde <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   20bc2:	f105 0030 	add.w	r0, r5, #48	; 0x30
   20bc6:	4643      	mov	r3, r8
   20bc8:	4632      	mov	r2, r6
   20bca:	4641      	mov	r1, r8
   20bcc:	4420      	add	r0, r4
   20bce:	f7ff ff5b 	bl	20a88 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   20bd2:	3d10      	subs	r5, #16
   20bd4:	442f      	add	r7, r5
		data += remaining_space;
   20bd6:	4446      	add	r6, r8
		s->leftover_offset = 0;
   20bd8:	2300      	movs	r3, #0
   20bda:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20bdc:	e013      	b.n	20c06 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20bde:	f105 0030 	add.w	r0, r5, #48	; 0x30
   20be2:	463b      	mov	r3, r7
   20be4:	4632      	mov	r2, r6
   20be6:	4639      	mov	r1, r7
   20be8:	4420      	add	r0, r4
   20bea:	f7ff ff4d 	bl	20a88 <_copy>
			s->leftover_offset += data_length;
   20bee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20bf0:	443b      	add	r3, r7
   20bf2:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   20bf4:	2001      	movs	r0, #1
   20bf6:	e030      	b.n	20c5a <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   20bf8:	18e2      	adds	r2, r4, r3
   20bfa:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   20bfe:	5ce1      	ldrb	r1, [r4, r3]
   20c00:	404a      	eors	r2, r1
   20c02:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20c04:	3301      	adds	r3, #1
   20c06:	2b0f      	cmp	r3, #15
   20c08:	d9f6      	bls.n	20bf8 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   20c0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20c0c:	4621      	mov	r1, r4
   20c0e:	4620      	mov	r0, r4
   20c10:	f7f1 f890 	bl	11d34 <tc_aes_encrypt>
   20c14:	e006      	b.n	20c24 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   20c16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20c18:	4621      	mov	r1, r4
   20c1a:	4620      	mov	r0, r4
   20c1c:	f7f1 f88a 	bl	11d34 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   20c20:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   20c22:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   20c24:	2f10      	cmp	r7, #16
   20c26:	d908      	bls.n	20c3a <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20c28:	2300      	movs	r3, #0
   20c2a:	2b0f      	cmp	r3, #15
   20c2c:	d8f3      	bhi.n	20c16 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   20c2e:	5cf0      	ldrb	r0, [r6, r3]
   20c30:	5ce5      	ldrb	r5, [r4, r3]
   20c32:	4068      	eors	r0, r5
   20c34:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20c36:	3301      	adds	r3, #1
   20c38:	e7f7      	b.n	20c2a <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   20c3a:	b90f      	cbnz	r7, 20c40 <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   20c3c:	2001      	movs	r0, #1
   20c3e:	e00c      	b.n	20c5a <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   20c40:	463b      	mov	r3, r7
   20c42:	4632      	mov	r2, r6
   20c44:	4639      	mov	r1, r7
   20c46:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20c4a:	f7ff ff1d 	bl	20a88 <_copy>
		s->leftover_offset = data_length;
   20c4e:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   20c50:	2001      	movs	r0, #1
   20c52:	e002      	b.n	20c5a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   20c54:	2000      	movs	r0, #0
}
   20c56:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   20c58:	2001      	movs	r0, #1
}
   20c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   20c5e:	2000      	movs	r0, #0
   20c60:	e7fb      	b.n	20c5a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   20c62:	2000      	movs	r0, #0
   20c64:	e7f9      	b.n	20c5a <tc_cmac_update+0xd0>

00020c66 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   20c66:	b370      	cbz	r0, 20cc6 <tc_cmac_final+0x60>
{
   20c68:	b538      	push	{r3, r4, r5, lr}
   20c6a:	460c      	mov	r4, r1
   20c6c:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   20c6e:	b361      	cbz	r1, 20cca <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   20c70:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   20c72:	2a10      	cmp	r2, #16
   20c74:	d10d      	bne.n	20c92 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   20c76:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20c78:	2300      	movs	r3, #0
   20c7a:	2b0f      	cmp	r3, #15
   20c7c:	d819      	bhi.n	20cb2 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20c7e:	18e2      	adds	r2, r4, r3
   20c80:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   20c84:	5cc8      	ldrb	r0, [r1, r3]
   20c86:	4050      	eors	r0, r2
   20c88:	5ce2      	ldrb	r2, [r4, r3]
   20c8a:	4042      	eors	r2, r0
   20c8c:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20c8e:	3301      	adds	r3, #1
   20c90:	e7f3      	b.n	20c7a <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20c92:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20c96:	f1c2 0210 	rsb	r2, r2, #16
   20c9a:	2100      	movs	r1, #0
   20c9c:	4420      	add	r0, r4
   20c9e:	f7ff ff00 	bl	20aa2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20ca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20ca4:	4423      	add	r3, r4
   20ca6:	2280      	movs	r2, #128	; 0x80
   20ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   20cac:	f104 0120 	add.w	r1, r4, #32
   20cb0:	e7e2      	b.n	20c78 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   20cb2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20cb4:	4621      	mov	r1, r4
   20cb6:	4628      	mov	r0, r5
   20cb8:	f7f1 f83c 	bl	11d34 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20cbc:	4620      	mov	r0, r4
   20cbe:	f7ff ff15 	bl	20aec <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   20cc2:	2001      	movs	r0, #1
}
   20cc4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   20cc6:	2000      	movs	r0, #0
}
   20cc8:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   20cca:	2000      	movs	r0, #0
   20ccc:	e7fa      	b.n	20cc4 <tc_cmac_final+0x5e>

00020cce <abort_function>:
{
   20cce:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   20cd0:	2000      	movs	r0, #0
   20cd2:	f7ef ff8b 	bl	10bec <sys_reboot>

00020cd6 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20cd6:	b538      	push	{r3, r4, r5, lr}
   20cd8:	4604      	mov	r4, r0

	if (esf != NULL) {
   20cda:	460d      	mov	r5, r1
   20cdc:	b111      	cbz	r1, 20ce4 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   20cde:	4608      	mov	r0, r1
   20ce0:	f7f1 fcc2 	bl	12668 <esf_dump>
	}
	z_fatal_error(reason, esf);
   20ce4:	4629      	mov	r1, r5
   20ce6:	4620      	mov	r0, r4
   20ce8:	f7fa fbaa 	bl	1b440 <z_fatal_error>
}
   20cec:	bd38      	pop	{r3, r4, r5, pc}

00020cee <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   20cee:	b508      	push	{r3, lr}
   20cf0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   20cf2:	6800      	ldr	r0, [r0, #0]
   20cf4:	f7ff ffef 	bl	20cd6 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   20cf8:	bd08      	pop	{r3, pc}

00020cfa <z_irq_spurious>:
{
   20cfa:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   20cfc:	2100      	movs	r1, #0
   20cfe:	2001      	movs	r0, #1
   20d00:	f7ff ffe9 	bl	20cd6 <z_arm_fatal_error>
}
   20d04:	bd08      	pop	{r3, pc}

00020d06 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   20d06:	b508      	push	{r3, lr}
	handler();
   20d08:	f7f1 fd5a 	bl	127c0 <z_SysNmiOnReset>
	z_arm_int_exit();
   20d0c:	f7f1 fe56 	bl	129bc <z_arm_exc_exit>
}
   20d10:	bd08      	pop	{r3, pc}

00020d12 <memory_fault_recoverable>:
}
   20d12:	2000      	movs	r0, #0
   20d14:	4770      	bx	lr

00020d16 <fault_handle>:
{
   20d16:	b508      	push	{r3, lr}
	*recoverable = false;
   20d18:	2300      	movs	r3, #0
   20d1a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   20d1c:	1ecb      	subs	r3, r1, #3
   20d1e:	2b09      	cmp	r3, #9
   20d20:	d81a      	bhi.n	20d58 <fault_handle+0x42>
   20d22:	e8df f003 	tbb	[pc, r3]
   20d26:	0905      	.short	0x0905
   20d28:	1919110d 	.word	0x1919110d
   20d2c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   20d30:	4611      	mov	r1, r2
   20d32:	f7f2 f8d7 	bl	12ee4 <hard_fault>
}
   20d36:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   20d38:	2100      	movs	r1, #0
   20d3a:	f7f1 fff1 	bl	12d20 <mem_manage_fault>
		break;
   20d3e:	e7fa      	b.n	20d36 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   20d40:	2100      	movs	r1, #0
   20d42:	f7f1 ff15 	bl	12b70 <bus_fault>
		break;
   20d46:	e7f6      	b.n	20d36 <fault_handle+0x20>
		reason = usage_fault(esf);
   20d48:	f7f1 fe46 	bl	129d8 <usage_fault>
		break;
   20d4c:	e7f3      	b.n	20d36 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   20d4e:	4611      	mov	r1, r2
   20d50:	f7f1 fef4 	bl	12b3c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   20d54:	2000      	movs	r0, #0
		break;
   20d56:	e7ee      	b.n	20d36 <fault_handle+0x20>
		reserved_exception(esf, fault);
   20d58:	f7f2 f96a 	bl	13030 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   20d5c:	2000      	movs	r0, #0
	return reason;
   20d5e:	e7ea      	b.n	20d36 <fault_handle+0x20>

00020d60 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   20d60:	6843      	ldr	r3, [r0, #4]
   20d62:	1e5a      	subs	r2, r3, #1
		&&
   20d64:	4213      	tst	r3, r2
   20d66:	d106      	bne.n	20d76 <mpu_partition_is_valid+0x16>
		&&
   20d68:	2b1f      	cmp	r3, #31
   20d6a:	d906      	bls.n	20d7a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   20d6c:	6803      	ldr	r3, [r0, #0]
		&&
   20d6e:	421a      	tst	r2, r3
   20d70:	d005      	beq.n	20d7e <mpu_partition_is_valid+0x1e>
   20d72:	2000      	movs	r0, #0
   20d74:	4770      	bx	lr
   20d76:	2000      	movs	r0, #0
   20d78:	4770      	bx	lr
   20d7a:	2000      	movs	r0, #0
   20d7c:	4770      	bx	lr
   20d7e:	2001      	movs	r0, #1
}
   20d80:	4770      	bx	lr

00020d82 <mpu_configure_region>:
{
   20d82:	b500      	push	{lr}
   20d84:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   20d86:	680b      	ldr	r3, [r1, #0]
   20d88:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   20d8a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   20d8c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   20d8e:	2b20      	cmp	r3, #32
   20d90:	d912      	bls.n	20db8 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   20d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   20d96:	d811      	bhi.n	20dbc <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   20d98:	3b01      	subs	r3, #1
   20d9a:	fab3 f383 	clz	r3, r3
   20d9e:	f1c3 031f 	rsb	r3, r3, #31
   20da2:	005b      	lsls	r3, r3, #1
   20da4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   20da8:	4313      	orrs	r3, r2
   20daa:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   20dac:	a901      	add	r1, sp, #4
   20dae:	f7f2 faa1 	bl	132f4 <region_allocate_and_init>
}
   20db2:	b005      	add	sp, #20
   20db4:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   20db8:	2308      	movs	r3, #8
   20dba:	e7f5      	b.n	20da8 <mpu_configure_region+0x26>
		return REGION_4G;
   20dbc:	233e      	movs	r3, #62	; 0x3e
   20dbe:	e7f3      	b.n	20da8 <mpu_configure_region+0x26>

00020dc0 <arm_core_mpu_configure_static_mpu_regions>:
{
   20dc0:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   20dc2:	f7f2 faf9 	bl	133b8 <mpu_configure_static_mpu_regions>
}
   20dc6:	bd08      	pop	{r3, pc}

00020dc8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   20dc8:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   20dca:	f7f2 faff 	bl	133cc <mpu_configure_dynamic_mpu_regions>
}
   20dce:	bd08      	pop	{r3, pc}

00020dd0 <malloc_prepare>:
}
   20dd0:	2000      	movs	r0, #0
   20dd2:	4770      	bx	lr

00020dd4 <_stdout_hook_default>:
}
   20dd4:	f04f 30ff 	mov.w	r0, #4294967295
   20dd8:	4770      	bx	lr

00020dda <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   20dda:	b084      	sub	sp, #16
   20ddc:	ab04      	add	r3, sp, #16
   20dde:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   20de2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20de6:	2b06      	cmp	r3, #6
   20de8:	d001      	beq.n	20dee <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   20dea:	b004      	add	sp, #16
   20dec:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   20dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20df2:	2201      	movs	r2, #1
   20df4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   20df8:	f3bf 8f4f 	dsb	sy
        __WFE();
   20dfc:	bf20      	wfe
    while (true)
   20dfe:	e7fd      	b.n	20dfc <pm_power_state_set+0x22>

00020e00 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   20e00:	b084      	sub	sp, #16
   20e02:	ab04      	add	r3, sp, #16
   20e04:	e903 0007 	stmdb	r3, {r0, r1, r2}
   20e08:	2300      	movs	r3, #0
   20e0a:	f383 8811 	msr	BASEPRI, r3
   20e0e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   20e12:	b004      	add	sp, #16
   20e14:	4770      	bx	lr

00020e16 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   20e16:	b510      	push	{r4, lr}
   20e18:	b08a      	sub	sp, #40	; 0x28
   20e1a:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   20e1c:	a905      	add	r1, sp, #20
   20e1e:	f7f2 fbfd 	bl	1361c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20e22:	4669      	mov	r1, sp
   20e24:	4620      	mov	r0, r4
   20e26:	f7f2 fbf9 	bl	1361c <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   20e2a:	2210      	movs	r2, #16
   20e2c:	f10d 0101 	add.w	r1, sp, #1
   20e30:	f10d 0015 	add.w	r0, sp, #21
   20e34:	f003 fd52 	bl	248dc <memcmp>
}
   20e38:	b00a      	add	sp, #40	; 0x28
   20e3a:	bd10      	pop	{r4, pc}

00020e3c <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   20e3c:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   20e3e:	7803      	ldrb	r3, [r0, #0]
   20e40:	780a      	ldrb	r2, [r1, #0]
   20e42:	4293      	cmp	r3, r2
   20e44:	d107      	bne.n	20e56 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   20e46:	2b01      	cmp	r3, #1
   20e48:	d00c      	beq.n	20e64 <bt_uuid_cmp+0x28>
   20e4a:	2b02      	cmp	r3, #2
   20e4c:	d00e      	beq.n	20e6c <bt_uuid_cmp+0x30>
   20e4e:	b12b      	cbz	r3, 20e5c <bt_uuid_cmp+0x20>
   20e50:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   20e54:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   20e56:	f7ff ffde 	bl	20e16 <uuid128_cmp>
   20e5a:	e7fb      	b.n	20e54 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   20e5c:	8840      	ldrh	r0, [r0, #2]
   20e5e:	884b      	ldrh	r3, [r1, #2]
   20e60:	1ac0      	subs	r0, r0, r3
   20e62:	e7f7      	b.n	20e54 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20e64:	6840      	ldr	r0, [r0, #4]
   20e66:	684b      	ldr	r3, [r1, #4]
   20e68:	1ac0      	subs	r0, r0, r3
   20e6a:	e7f3      	b.n	20e54 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20e6c:	2210      	movs	r2, #16
   20e6e:	3101      	adds	r1, #1
   20e70:	3001      	adds	r0, #1
   20e72:	f003 fd33 	bl	248dc <memcmp>
   20e76:	e7ed      	b.n	20e54 <bt_uuid_cmp+0x18>

00020e78 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   20e78:	b470      	push	{r4, r5, r6}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20e7a:	2a04      	cmp	r2, #4
   20e7c:	d00f      	beq.n	20e9e <bt_uuid_create+0x26>
   20e7e:	2a10      	cmp	r2, #16
   20e80:	d01c      	beq.n	20ebc <bt_uuid_create+0x44>
   20e82:	2a02      	cmp	r2, #2
   20e84:	d002      	beq.n	20e8c <bt_uuid_create+0x14>
   20e86:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   20e88:	bc70      	pop	{r4, r5, r6}
   20e8a:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_16;
   20e8c:	2300      	movs	r3, #0
   20e8e:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   20e90:	784a      	ldrb	r2, [r1, #1]
   20e92:	780b      	ldrb	r3, [r1, #0]
   20e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20e98:	8043      	strh	r3, [r0, #2]
	return true;
   20e9a:	2001      	movs	r0, #1
		break;
   20e9c:	e7f4      	b.n	20e88 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   20e9e:	2301      	movs	r3, #1
   20ea0:	7003      	strb	r3, [r0, #0]
   20ea2:	78cc      	ldrb	r4, [r1, #3]
   20ea4:	788a      	ldrb	r2, [r1, #2]
   20ea6:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   20eaa:	784d      	ldrb	r5, [r1, #1]
   20eac:	780a      	ldrb	r2, [r1, #0]
   20eae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20eb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   20eb6:	6042      	str	r2, [r0, #4]
	return true;
   20eb8:	4618      	mov	r0, r3
		break;
   20eba:	e7e5      	b.n	20e88 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   20ebc:	4603      	mov	r3, r0
   20ebe:	2202      	movs	r2, #2
   20ec0:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20ec4:	680e      	ldr	r6, [r1, #0]
   20ec6:	684d      	ldr	r5, [r1, #4]
   20ec8:	688c      	ldr	r4, [r1, #8]
   20eca:	68ca      	ldr	r2, [r1, #12]
   20ecc:	f8c0 6001 	str.w	r6, [r0, #1]
   20ed0:	605d      	str	r5, [r3, #4]
   20ed2:	609c      	str	r4, [r3, #8]
   20ed4:	60da      	str	r2, [r3, #12]
	return true;
   20ed6:	2001      	movs	r0, #1
   20ed8:	e7d6      	b.n	20e88 <bt_uuid_create+0x10>

00020eda <bt_addr_le_create_static>:
{
   20eda:	b510      	push	{r4, lr}
   20edc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   20ede:	2301      	movs	r3, #1
   20ee0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   20ee4:	2106      	movs	r1, #6
   20ee6:	f7f9 fabd 	bl	1a464 <bt_rand>
	if (err) {
   20eea:	b918      	cbnz	r0, 20ef4 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   20eec:	79a3      	ldrb	r3, [r4, #6]
   20eee:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20ef2:	71a3      	strb	r3, [r4, #6]
}
   20ef4:	bd10      	pop	{r4, pc}

00020ef6 <hci_disconn_complete_prio>:
{
   20ef6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   20ef8:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   20efa:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   20efe:	781b      	ldrb	r3, [r3, #0]
   20f00:	b103      	cbz	r3, 20f04 <hci_disconn_complete_prio+0xe>
}
   20f02:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   20f04:	4620      	mov	r0, r4
   20f06:	f7f5 faa5 	bl	16454 <bt_conn_lookup_handle>
	if (!conn) {
   20f0a:	4605      	mov	r5, r0
   20f0c:	b130      	cbz	r0, 20f1c <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   20f0e:	2101      	movs	r1, #1
   20f10:	f7f5 faaa 	bl	16468 <bt_conn_set_state>
	bt_conn_unref(conn);
   20f14:	4628      	mov	r0, r5
   20f16:	f000 fab0 	bl	2147a <bt_conn_unref>
   20f1a:	e7f2      	b.n	20f02 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   20f1c:	4620      	mov	r0, r4
   20f1e:	f7f2 fca3 	bl	13868 <conn_handle_disconnected>
		return;
   20f22:	e7ee      	b.n	20f02 <hci_disconn_complete_prio+0xc>

00020f24 <set_event_mask>:
{
   20f24:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   20f26:	2108      	movs	r1, #8
   20f28:	f640 4001 	movw	r0, #3073	; 0xc01
   20f2c:	f7f3 f9b2 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   20f30:	b1b8      	cbz	r0, 20f62 <set_event_mask+0x3e>
   20f32:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   20f34:	2108      	movs	r1, #8
   20f36:	4408      	add	r0, r1
   20f38:	f001 fe94 	bl	22c64 <net_buf_simple_add>
	dst[0] = val;
   20f3c:	2310      	movs	r3, #16
   20f3e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   20f40:	2388      	movs	r3, #136	; 0x88
   20f42:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   20f44:	2200      	movs	r2, #0
   20f46:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   20f48:	2302      	movs	r3, #2
   20f4a:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   20f4c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   20f4e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   20f50:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   20f52:	2320      	movs	r3, #32
   20f54:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   20f56:	4621      	mov	r1, r4
   20f58:	f640 4001 	movw	r0, #3073	; 0xc01
   20f5c:	f7f3 f9d6 	bl	1430c <bt_hci_cmd_send_sync>
}
   20f60:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   20f62:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20f66:	e7fb      	b.n	20f60 <set_event_mask+0x3c>

00020f68 <bt_le_create_conn>:
{
   20f68:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   20f6a:	f7f3 fc87 	bl	1487c <bt_le_create_conn_legacy>
}
   20f6e:	bd08      	pop	{r3, pc}

00020f70 <bt_hci_disconnect>:
{
   20f70:	b570      	push	{r4, r5, r6, lr}
   20f72:	4605      	mov	r5, r0
   20f74:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20f76:	2103      	movs	r1, #3
   20f78:	f240 4006 	movw	r0, #1030	; 0x406
   20f7c:	f7f3 f98a 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   20f80:	b168      	cbz	r0, 20f9e <bt_hci_disconnect+0x2e>
   20f82:	4606      	mov	r6, r0
   20f84:	2103      	movs	r1, #3
   20f86:	3008      	adds	r0, #8
   20f88:	f001 fe6c 	bl	22c64 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   20f8c:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   20f8e:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20f90:	2200      	movs	r2, #0
   20f92:	4631      	mov	r1, r6
   20f94:	f240 4006 	movw	r0, #1030	; 0x406
   20f98:	f7f3 f9b8 	bl	1430c <bt_hci_cmd_send_sync>
}
   20f9c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   20f9e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20fa2:	e7fb      	b.n	20f9c <bt_hci_disconnect+0x2c>

00020fa4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20fa4:	8802      	ldrh	r2, [r0, #0]
   20fa6:	8843      	ldrh	r3, [r0, #2]
   20fa8:	429a      	cmp	r2, r3
   20faa:	d819      	bhi.n	20fe0 <bt_le_conn_params_valid+0x3c>
   20fac:	2a05      	cmp	r2, #5
   20fae:	d919      	bls.n	20fe4 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20fb0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   20fb4:	d818      	bhi.n	20fe8 <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   20fb6:	8881      	ldrh	r1, [r0, #4]
   20fb8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   20fbc:	d216      	bcs.n	20fec <bt_le_conn_params_valid+0x48>
{
   20fbe:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   20fc0:	88c0      	ldrh	r0, [r0, #6]
   20fc2:	f1a0 020a 	sub.w	r2, r0, #10
   20fc6:	b292      	uxth	r2, r2
   20fc8:	f640 4476 	movw	r4, #3190	; 0xc76
   20fcc:	42a2      	cmp	r2, r4
   20fce:	d80f      	bhi.n	20ff0 <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   20fd0:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   20fd4:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   20fd8:	d20c      	bcs.n	20ff4 <bt_le_conn_params_valid+0x50>
	return true;
   20fda:	2001      	movs	r0, #1
}
   20fdc:	bc10      	pop	{r4}
   20fde:	4770      	bx	lr
		return false;
   20fe0:	2000      	movs	r0, #0
   20fe2:	4770      	bx	lr
   20fe4:	2000      	movs	r0, #0
   20fe6:	4770      	bx	lr
   20fe8:	2000      	movs	r0, #0
   20fea:	4770      	bx	lr
		return false;
   20fec:	2000      	movs	r0, #0
}
   20fee:	4770      	bx	lr
		return false;
   20ff0:	2000      	movs	r0, #0
   20ff2:	e7f3      	b.n	20fdc <bt_le_conn_params_valid+0x38>
   20ff4:	2000      	movs	r0, #0
   20ff6:	e7f1      	b.n	20fdc <bt_le_conn_params_valid+0x38>

00020ff8 <bt_le_set_data_len>:
{
   20ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20ffa:	4606      	mov	r6, r0
   20ffc:	460f      	mov	r7, r1
   20ffe:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   21000:	2106      	movs	r1, #6
   21002:	f242 0022 	movw	r0, #8226	; 0x2022
   21006:	f7f3 f945 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   2100a:	b170      	cbz	r0, 2102a <bt_le_set_data_len+0x32>
   2100c:	4605      	mov	r5, r0
   2100e:	2106      	movs	r1, #6
   21010:	3008      	adds	r0, #8
   21012:	f001 fe27 	bl	22c64 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   21016:	8833      	ldrh	r3, [r6, #0]
   21018:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2101a:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2101c:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2101e:	4629      	mov	r1, r5
   21020:	f242 0022 	movw	r0, #8226	; 0x2022
   21024:	f7f3 fcd0 	bl	149c8 <bt_hci_cmd_send>
}
   21028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2102a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2102e:	e7fb      	b.n	21028 <bt_le_set_data_len+0x30>

00021030 <bt_le_set_phy>:
{
   21030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21034:	4607      	mov	r7, r0
   21036:	460e      	mov	r6, r1
   21038:	4615      	mov	r5, r2
   2103a:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2103c:	2107      	movs	r1, #7
   2103e:	f242 0032 	movw	r0, #8242	; 0x2032
   21042:	f7f3 f927 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   21046:	b1a0      	cbz	r0, 21072 <bt_le_set_phy+0x42>
   21048:	4680      	mov	r8, r0
   2104a:	2107      	movs	r1, #7
   2104c:	3008      	adds	r0, #8
   2104e:	f001 fe09 	bl	22c64 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   21052:	883b      	ldrh	r3, [r7, #0]
   21054:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   21056:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   21058:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2105a:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   2105c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   21060:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   21064:	4641      	mov	r1, r8
   21066:	f242 0032 	movw	r0, #8242	; 0x2032
   2106a:	f7f3 fcad 	bl	149c8 <bt_hci_cmd_send>
}
   2106e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   21072:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21076:	e7fa      	b.n	2106e <bt_le_set_phy+0x3e>

00021078 <hci_le_read_remote_features>:
{
   21078:	b538      	push	{r3, r4, r5, lr}
   2107a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2107c:	2102      	movs	r1, #2
   2107e:	f242 0016 	movw	r0, #8214	; 0x2016
   21082:	f7f3 f907 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   21086:	b168      	cbz	r0, 210a4 <hci_le_read_remote_features+0x2c>
   21088:	4605      	mov	r5, r0
   2108a:	2102      	movs	r1, #2
   2108c:	3008      	adds	r0, #8
   2108e:	f001 fde9 	bl	22c64 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   21092:	8823      	ldrh	r3, [r4, #0]
   21094:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   21096:	4629      	mov	r1, r5
   21098:	f242 0016 	movw	r0, #8214	; 0x2016
   2109c:	f7f3 fc94 	bl	149c8 <bt_hci_cmd_send>
	return 0;
   210a0:	2000      	movs	r0, #0
}
   210a2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   210a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   210a8:	e7fb      	b.n	210a2 <hci_le_read_remote_features+0x2a>

000210aa <enh_conn_complete>:
{
   210aa:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   210ac:	f7f3 fd52 	bl	14b54 <bt_hci_le_enh_conn_complete>
}
   210b0:	bd08      	pop	{r3, pc}

000210b2 <le_enh_conn_complete>:
{
   210b2:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   210b4:	6880      	ldr	r0, [r0, #8]
   210b6:	f7ff fff8 	bl	210aa <enh_conn_complete>
}
   210ba:	bd08      	pop	{r3, pc}

000210bc <le_legacy_conn_complete>:
{
   210bc:	b500      	push	{lr}
   210be:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   210c0:	6883      	ldr	r3, [r0, #8]
	enh.status         = evt->status;
   210c2:	781a      	ldrb	r2, [r3, #0]
   210c4:	f88d 2000 	strb.w	r2, [sp]
	enh.handle         = evt->handle;
   210c8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   210cc:	f8ad 2001 	strh.w	r2, [sp, #1]
	enh.role           = evt->role;
   210d0:	78da      	ldrb	r2, [r3, #3]
   210d2:	f88d 2003 	strb.w	r2, [sp, #3]
	enh.interval       = evt->interval;
   210d6:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   210da:	f8ad 2017 	strh.w	r2, [sp, #23]
	enh.latency        = evt->latency;
   210de:	f8b3 200d 	ldrh.w	r2, [r3, #13]
   210e2:	f8ad 2019 	strh.w	r2, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   210e6:	f8b3 200f 	ldrh.w	r2, [r3, #15]
   210ea:	f8ad 201b 	strh.w	r2, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   210ee:	7c5a      	ldrb	r2, [r3, #17]
   210f0:	f88d 201d 	strb.w	r2, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   210f4:	f853 0f04 	ldr.w	r0, [r3, #4]!
   210f8:	9001      	str	r0, [sp, #4]
   210fa:	889a      	ldrh	r2, [r3, #4]
   210fc:	799b      	ldrb	r3, [r3, #6]
   210fe:	f8ad 2008 	strh.w	r2, [sp, #8]
   21102:	f88d 300a 	strb.w	r3, [sp, #10]
	memcpy(dst, src, sizeof(*dst));
   21106:	2300      	movs	r3, #0
   21108:	f8cd 300b 	str.w	r3, [sp, #11]
   2110c:	f8ad 300f 	strh.w	r3, [sp, #15]
   21110:	f8cd 3011 	str.w	r3, [sp, #17]
   21114:	f8ad 3015 	strh.w	r3, [sp, #21]
	enh_conn_complete(&enh);
   21118:	4668      	mov	r0, sp
   2111a:	f7ff ffc6 	bl	210aa <enh_conn_complete>
}
   2111e:	b009      	add	sp, #36	; 0x24
   21120:	f85d fb04 	ldr.w	pc, [sp], #4

00021124 <le_conn_param_req_reply>:
{
   21124:	b570      	push	{r4, r5, r6, lr}
   21126:	4605      	mov	r5, r0
   21128:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2112a:	210e      	movs	r1, #14
   2112c:	f242 0020 	movw	r0, #8224	; 0x2020
   21130:	f7f3 f8b0 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   21134:	b1c0      	cbz	r0, 21168 <le_conn_param_req_reply+0x44>
   21136:	4606      	mov	r6, r0
   21138:	210e      	movs	r1, #14
   2113a:	3008      	adds	r0, #8
   2113c:	f001 fd92 	bl	22c64 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   21140:	2300      	movs	r3, #0
   21142:	6003      	str	r3, [r0, #0]
   21144:	6043      	str	r3, [r0, #4]
   21146:	6083      	str	r3, [r0, #8]
   21148:	8183      	strh	r3, [r0, #12]
	cp->handle = sys_cpu_to_le16(handle);
   2114a:	8005      	strh	r5, [r0, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2114c:	8823      	ldrh	r3, [r4, #0]
   2114e:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   21150:	8863      	ldrh	r3, [r4, #2]
   21152:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   21154:	88a3      	ldrh	r3, [r4, #4]
   21156:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   21158:	88e3      	ldrh	r3, [r4, #6]
   2115a:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2115c:	4631      	mov	r1, r6
   2115e:	f242 0020 	movw	r0, #8224	; 0x2020
   21162:	f7f3 fc31 	bl	149c8 <bt_hci_cmd_send>
}
   21166:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   21168:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2116c:	e7fb      	b.n	21166 <le_conn_param_req_reply+0x42>

0002116e <bt_init>:
{
   2116e:	b510      	push	{r4, lr}
	err = hci_init();
   21170:	f7f3 fb42 	bl	147f8 <hci_init>
	if (err) {
   21174:	4604      	mov	r4, r0
   21176:	b108      	cbz	r0, 2117c <bt_init+0xe>
}
   21178:	4620      	mov	r0, r4
   2117a:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   2117c:	f7f5 fc6c 	bl	16a58 <bt_conn_init>
		if (err) {
   21180:	4604      	mov	r4, r0
   21182:	2800      	cmp	r0, #0
   21184:	d1f8      	bne.n	21178 <bt_init+0xa>
	bt_finalize_init();
   21186:	f7f4 f8d7 	bl	15338 <bt_finalize_init>
	return 0;
   2118a:	e7f5      	b.n	21178 <bt_init+0xa>

0002118c <bt_addr_le_is_bonded>:
}
   2118c:	2000      	movs	r0, #0
   2118e:	4770      	bx	lr

00021190 <is_adv_using_rand_addr>:
}
   21190:	2000      	movs	r0, #0
   21192:	4770      	bx	lr

00021194 <bt_lookup_id_addr>:
}
   21194:	4608      	mov	r0, r1
   21196:	4770      	bx	lr

00021198 <bt_id_set_private_addr>:
{
   21198:	b500      	push	{lr}
   2119a:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2119c:	2106      	movs	r1, #6
   2119e:	4668      	mov	r0, sp
   211a0:	f7f9 f960 	bl	1a464 <bt_rand>
	if (err) {
   211a4:	b110      	cbz	r0, 211ac <bt_id_set_private_addr+0x14>
}
   211a6:	b003      	add	sp, #12
   211a8:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   211ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
   211b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   211b4:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   211b8:	4668      	mov	r0, sp
   211ba:	f7f4 f9e5 	bl	15588 <set_random_address>
	if (err)  {
   211be:	e7f2      	b.n	211a6 <bt_id_set_private_addr+0xe>

000211c0 <bt_id_scan_random_addr_check>:
}
   211c0:	2001      	movs	r0, #1
   211c2:	4770      	bx	lr

000211c4 <get_adv_props_legacy>:
	switch (evt_type) {
   211c4:	2804      	cmp	r0, #4
   211c6:	d80a      	bhi.n	211de <get_adv_props_legacy+0x1a>
   211c8:	e8df f000 	tbb	[pc, r0]
   211cc:	050c0b03 	.word	0x050c0b03
   211d0:	07          	.byte	0x07
   211d1:	00          	.byte	0x00
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   211d2:	2003      	movs	r0, #3
   211d4:	4770      	bx	lr
		return 0;
   211d6:	2000      	movs	r0, #0
   211d8:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   211da:	200a      	movs	r0, #10
   211dc:	4770      	bx	lr
		return 0;
   211de:	2000      	movs	r0, #0
   211e0:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   211e2:	2005      	movs	r0, #5
}
   211e4:	4770      	bx	lr

000211e6 <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   211e6:	7803      	ldrb	r3, [r0, #0]
   211e8:	2b01      	cmp	r3, #1
   211ea:	d815      	bhi.n	21218 <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   211ec:	6843      	ldr	r3, [r0, #4]
   211ee:	f033 030f 	bics.w	r3, r3, #15
   211f2:	d113      	bne.n	2121c <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   211f4:	8902      	ldrh	r2, [r0, #8]
   211f6:	1f13      	subs	r3, r2, #4
   211f8:	b29b      	uxth	r3, r3
   211fa:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   211fe:	428b      	cmp	r3, r1
   21200:	d80e      	bhi.n	21220 <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   21202:	8941      	ldrh	r1, [r0, #10]
   21204:	1f0b      	subs	r3, r1, #4
   21206:	b29b      	uxth	r3, r3
   21208:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   2120c:	4283      	cmp	r3, r0
   2120e:	d809      	bhi.n	21224 <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   21210:	428a      	cmp	r2, r1
   21212:	d309      	bcc.n	21228 <valid_le_scan_param+0x42>
	return true;
   21214:	2001      	movs	r0, #1
   21216:	4770      	bx	lr
		return false;
   21218:	2000      	movs	r0, #0
   2121a:	4770      	bx	lr
		return false;
   2121c:	2000      	movs	r0, #0
   2121e:	4770      	bx	lr
		return false;
   21220:	2000      	movs	r0, #0
   21222:	4770      	bx	lr
		return false;
   21224:	2000      	movs	r0, #0
   21226:	4770      	bx	lr
		return false;
   21228:	2000      	movs	r0, #0
}
   2122a:	4770      	bx	lr

0002122c <bt_le_scan_set_enable>:
{
   2122c:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   2122e:	f7f4 fc19 	bl	15a64 <bt_le_scan_set_enable_legacy>
}
   21232:	bd08      	pop	{r3, pc}

00021234 <start_passive_scan>:
{
   21234:	b508      	push	{r3, lr}
	if (fast_scan) {
   21236:	b128      	cbz	r0, 21244 <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   21238:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   2123a:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2123c:	2000      	movs	r0, #0
   2123e:	f7f4 fc4d 	bl	15adc <start_le_scan_legacy>
}
   21242:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   21244:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   21246:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2124a:	e7f7      	b.n	2123c <start_passive_scan+0x8>

0002124c <tx_notify>:
{
   2124c:	b570      	push	{r4, r5, r6, lr}
   2124e:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   21250:	e010      	b.n	21274 <tx_notify+0x28>
   21252:	f383 8811 	msr	BASEPRI, r3
   21256:	f3bf 8f6f 	isb	sy
}
   2125a:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   2125c:	6262      	str	r2, [r4, #36]	; 0x24
   2125e:	f383 8811 	msr	BASEPRI, r3
   21262:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   21266:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   21268:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   2126a:	f7f4 fed1 	bl	16010 <tx_free>
		cb(conn, user_data);
   2126e:	4631      	mov	r1, r6
   21270:	4620      	mov	r0, r4
   21272:	47a8      	blx	r5
	__asm__ volatile(
   21274:	f04f 0240 	mov.w	r2, #64	; 0x40
   21278:	f3ef 8311 	mrs	r3, BASEPRI
   2127c:	f382 8812 	msr	BASEPRI_MAX, r2
   21280:	f3bf 8f6f 	isb	sy
	return list->head;
   21284:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   21286:	2800      	cmp	r0, #0
   21288:	d0e3      	beq.n	21252 <tx_notify+0x6>
	return node->next;
   2128a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2128c:	6222      	str	r2, [r4, #32]
	return list->tail;
   2128e:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21290:	4281      	cmp	r1, r0
   21292:	d1e4      	bne.n	2125e <tx_notify+0x12>
   21294:	e7e2      	b.n	2125c <tx_notify+0x10>

00021296 <send_acl>:
{
   21296:	b570      	push	{r4, r5, r6, lr}
   21298:	4605      	mov	r5, r0
   2129a:	460c      	mov	r4, r1
	switch (flags) {
   2129c:	2a03      	cmp	r2, #3
   2129e:	d819      	bhi.n	212d4 <send_acl+0x3e>
   212a0:	e8df f002 	tbb	[pc, r2]
   212a4:	16021602 	.word	0x16021602
		flags = BT_ACL_CONT;
   212a8:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   212aa:	2104      	movs	r1, #4
   212ac:	f104 0008 	add.w	r0, r4, #8
   212b0:	f001 fce9 	bl	22c86 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   212b4:	f9b5 3000 	ldrsh.w	r3, [r5]
   212b8:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   212bc:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   212be:	89a3      	ldrh	r3, [r4, #12]
   212c0:	3b04      	subs	r3, #4
   212c2:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   212c4:	2302      	movs	r3, #2
   212c6:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   212c8:	4620      	mov	r0, r4
   212ca:	f7f3 fb73 	bl	149b4 <bt_send>
}
   212ce:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   212d0:	2601      	movs	r6, #1
   212d2:	e7ea      	b.n	212aa <send_acl+0x14>
   212d4:	f06f 0015 	mvn.w	r0, #21
   212d8:	e7f9      	b.n	212ce <send_acl+0x38>

000212da <process_unack_tx>:
{
   212da:	b510      	push	{r4, lr}
   212dc:	4604      	mov	r4, r0
   212de:	e028      	b.n	21332 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   212e0:	3b01      	subs	r3, #1
   212e2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   212e4:	f382 8811 	msr	BASEPRI, r2
   212e8:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   212ec:	4620      	mov	r0, r4
   212ee:	f7f4 fedb 	bl	160a8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   212f2:	f7fa fc7d 	bl	1bbf0 <z_impl_k_sem_give>
			continue;
   212f6:	e01c      	b.n	21332 <process_unack_tx+0x58>
	list->tail = node;
   212f8:	61a3      	str	r3, [r4, #24]
   212fa:	f382 8811 	msr	BASEPRI, r2
   212fe:	f3bf 8f6f 	isb	sy
		if (!node) {
   21302:	b350      	cbz	r0, 2135a <process_unack_tx+0x80>
	__asm__ volatile(
   21304:	f04f 0240 	mov.w	r2, #64	; 0x40
   21308:	f3ef 8311 	mrs	r3, BASEPRI
   2130c:	f382 8812 	msr	BASEPRI_MAX, r2
   21310:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   21314:	68c2      	ldr	r2, [r0, #12]
   21316:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   21318:	2200      	movs	r2, #0
   2131a:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   2131c:	f383 8811 	msr	BASEPRI, r3
   21320:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   21324:	f7f4 fe74 	bl	16010 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   21328:	4620      	mov	r0, r4
   2132a:	f7f4 febd 	bl	160a8 <bt_conn_get_pkts>
   2132e:	f7fa fc5f 	bl	1bbf0 <z_impl_k_sem_give>
	__asm__ volatile(
   21332:	f04f 0340 	mov.w	r3, #64	; 0x40
   21336:	f3ef 8211 	mrs	r2, BASEPRI
   2133a:	f383 8812 	msr	BASEPRI_MAX, r3
   2133e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   21342:	69e3      	ldr	r3, [r4, #28]
   21344:	2b00      	cmp	r3, #0
   21346:	d1cb      	bne.n	212e0 <process_unack_tx+0x6>
	return list->head;
   21348:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2134a:	2800      	cmp	r0, #0
   2134c:	d0d5      	beq.n	212fa <process_unack_tx+0x20>
	return node->next;
   2134e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   21350:	6163      	str	r3, [r4, #20]
	return list->tail;
   21352:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21354:	4288      	cmp	r0, r1
   21356:	d1d0      	bne.n	212fa <process_unack_tx+0x20>
   21358:	e7ce      	b.n	212f8 <process_unack_tx+0x1e>
}
   2135a:	bd10      	pop	{r4, pc}

0002135c <bt_conn_reset_rx_state>:
{
   2135c:	b510      	push	{r4, lr}
   2135e:	4604      	mov	r4, r0
	if (!conn->rx) {
   21360:	6900      	ldr	r0, [r0, #16]
   21362:	b118      	cbz	r0, 2136c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   21364:	f001 fc34 	bl	22bd0 <net_buf_unref>
	conn->rx = NULL;
   21368:	2300      	movs	r3, #0
   2136a:	6123      	str	r3, [r4, #16]
}
   2136c:	bd10      	pop	{r4, pc}

0002136e <conn_cleanup>:
{
   2136e:	b538      	push	{r3, r4, r5, lr}
   21370:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   21372:	e004      	b.n	2137e <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   21374:	f7f4 fe4c 	bl	16010 <tx_free>
		net_buf_unref(buf);
   21378:	4620      	mov	r0, r4
   2137a:	f001 fc29 	bl	22bd0 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2137e:	2200      	movs	r2, #0
   21380:	2300      	movs	r3, #0
   21382:	f105 0038 	add.w	r0, r5, #56	; 0x38
   21386:	f001 fbf7 	bl	22b78 <net_buf_get>
   2138a:	4604      	mov	r4, r0
   2138c:	b118      	cbz	r0, 21396 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   2138e:	6960      	ldr	r0, [r4, #20]
   21390:	2800      	cmp	r0, #0
   21392:	d1ef      	bne.n	21374 <conn_cleanup+0x6>
   21394:	e7f0      	b.n	21378 <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   21396:	4628      	mov	r0, r5
   21398:	f7ff ffe0 	bl	2135c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2139c:	2200      	movs	r2, #0
   2139e:	2300      	movs	r3, #0
   213a0:	f105 0058 	add.w	r0, r5, #88	; 0x58
   213a4:	f7fa fe3c 	bl	1c020 <k_work_reschedule>
}
   213a8:	bd38      	pop	{r3, r4, r5, pc}

000213aa <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   213aa:	f3bf 8f5b 	dmb	ish
   213ae:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   213b2:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   213b6:	b33b      	cbz	r3, 21408 <conn_prepare_events+0x5e>
{
   213b8:	b510      	push	{r4, lr}
   213ba:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   213bc:	7a83      	ldrb	r3, [r0, #10]
   213be:	b983      	cbnz	r3, 213e2 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   213c0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   213c2:	f3bf 8f5b 	dmb	ish
   213c6:	e853 2f00 	ldrex	r2, [r3]
   213ca:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   213ce:	e843 1c00 	strex	ip, r1, [r3]
   213d2:	f1bc 0f00 	cmp.w	ip, #0
   213d6:	d1f6      	bne.n	213c6 <conn_prepare_events+0x1c>
   213d8:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   213dc:	f012 0f40 	tst.w	r2, #64	; 0x40
   213e0:	d10d      	bne.n	213fe <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   213e2:	7a83      	ldrb	r3, [r0, #10]
   213e4:	2b07      	cmp	r3, #7
   213e6:	d112      	bne.n	2140e <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   213e8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   213ec:	2200      	movs	r2, #0
   213ee:	2104      	movs	r1, #4
   213f0:	4620      	mov	r0, r4
   213f2:	f003 fa2e 	bl	24852 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   213f6:	2301      	movs	r3, #1
   213f8:	7323      	strb	r3, [r4, #12]
	return 0;
   213fa:	2000      	movs	r0, #0
}
   213fc:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   213fe:	f7ff ffb6 	bl	2136e <conn_cleanup>
		return -ENOTCONN;
   21402:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21406:	e7f9      	b.n	213fc <conn_prepare_events+0x52>
		return -ENOTCONN;
   21408:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2140c:	4770      	bx	lr
		return -ENOTCONN;
   2140e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21412:	e7f3      	b.n	213fc <conn_prepare_events+0x52>

00021414 <bt_conn_recv>:
{
   21414:	b570      	push	{r4, r5, r6, lr}
   21416:	4604      	mov	r4, r0
   21418:	460d      	mov	r5, r1
   2141a:	4616      	mov	r6, r2
	tx_notify(conn);
   2141c:	f7ff ff16 	bl	2124c <tx_notify>
		bt_acl_recv(conn, buf, flags);
   21420:	4632      	mov	r2, r6
   21422:	4629      	mov	r1, r5
   21424:	4620      	mov	r0, r4
   21426:	f7f4 fed5 	bl	161d4 <bt_acl_recv>
}
   2142a:	bd70      	pop	{r4, r5, r6, pc}

0002142c <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2142c:	f3bf 8f5b 	dmb	ish
   21430:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   21434:	f3bf 8f5b 	dmb	ish
		if (!old) {
   21438:	b1eb      	cbz	r3, 21476 <bt_conn_ref+0x4a>
{
   2143a:	b410      	push	{r4}
   2143c:	e006      	b.n	2144c <bt_conn_ref+0x20>
   2143e:	f3bf 8f5b 	dmb	ish
   21442:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   21446:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2144a:	b193      	cbz	r3, 21472 <bt_conn_ref+0x46>
   2144c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   21450:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21452:	f3bf 8f5b 	dmb	ish
   21456:	e852 4f00 	ldrex	r4, [r2]
   2145a:	429c      	cmp	r4, r3
   2145c:	d104      	bne.n	21468 <bt_conn_ref+0x3c>
   2145e:	e842 1c00 	strex	ip, r1, [r2]
   21462:	f1bc 0f00 	cmp.w	ip, #0
   21466:	d1f6      	bne.n	21456 <bt_conn_ref+0x2a>
   21468:	f3bf 8f5b 	dmb	ish
   2146c:	d1e7      	bne.n	2143e <bt_conn_ref+0x12>
}
   2146e:	bc10      	pop	{r4}
   21470:	4770      	bx	lr
			return NULL;
   21472:	2000      	movs	r0, #0
   21474:	e7fb      	b.n	2146e <bt_conn_ref+0x42>
   21476:	2000      	movs	r0, #0
}
   21478:	4770      	bx	lr

0002147a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2147a:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2147c:	f3bf 8f5b 	dmb	ish
   21480:	e850 3f00 	ldrex	r3, [r0]
   21484:	3b01      	subs	r3, #1
   21486:	e840 3200 	strex	r2, r3, [r0]
   2148a:	2a00      	cmp	r2, #0
   2148c:	d1f8      	bne.n	21480 <bt_conn_unref+0x6>
   2148e:	f3bf 8f5b 	dmb	ish
}
   21492:	4770      	bx	lr

00021494 <conn_lookup_handle>:
{
   21494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21498:	4607      	mov	r7, r0
   2149a:	460e      	mov	r6, r1
   2149c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2149e:	2400      	movs	r4, #0
   214a0:	e003      	b.n	214aa <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   214a2:	4628      	mov	r0, r5
   214a4:	f7ff ffe9 	bl	2147a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   214a8:	3401      	adds	r4, #1
   214aa:	42b4      	cmp	r4, r6
   214ac:	d21c      	bcs.n	214e8 <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   214ae:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   214b2:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   214b6:	f7ff ffb9 	bl	2142c <bt_conn_ref>
		if (!conn) {
   214ba:	4605      	mov	r5, r0
   214bc:	2800      	cmp	r0, #0
   214be:	d0f3      	beq.n	214a8 <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   214c0:	7a83      	ldrb	r3, [r0, #10]
   214c2:	2b01      	cmp	r3, #1
   214c4:	d006      	beq.n	214d4 <conn_lookup_handle+0x40>
   214c6:	b25a      	sxtb	r2, r3
   214c8:	2a00      	cmp	r2, #0
   214ca:	d0ea      	beq.n	214a2 <conn_lookup_handle+0xe>
   214cc:	3b07      	subs	r3, #7
   214ce:	b2db      	uxtb	r3, r3
   214d0:	2b01      	cmp	r3, #1
   214d2:	d8e6      	bhi.n	214a2 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   214d4:	882b      	ldrh	r3, [r5, #0]
   214d6:	4543      	cmp	r3, r8
   214d8:	d102      	bne.n	214e0 <conn_lookup_handle+0x4c>
}
   214da:	4628      	mov	r0, r5
   214dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   214e0:	4628      	mov	r0, r5
   214e2:	f7ff ffca 	bl	2147a <bt_conn_unref>
			continue;
   214e6:	e7df      	b.n	214a8 <conn_lookup_handle+0x14>
	return NULL;
   214e8:	2500      	movs	r5, #0
   214ea:	e7f6      	b.n	214da <conn_lookup_handle+0x46>

000214ec <bt_conn_connected>:
{
   214ec:	b510      	push	{r4, lr}
   214ee:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   214f0:	f7f5 fb96 	bl	16c20 <bt_l2cap_connected>
	notify_connected(conn);
   214f4:	4620      	mov	r0, r4
   214f6:	f7f4 fdaf 	bl	16058 <notify_connected>
}
   214fa:	bd10      	pop	{r4, pc}

000214fc <bt_conn_get_security>:
}
   214fc:	2001      	movs	r0, #1
   214fe:	4770      	bx	lr

00021500 <bt_conn_is_peer_addr_le>:
{
   21500:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   21502:	7a03      	ldrb	r3, [r0, #8]
   21504:	428b      	cmp	r3, r1
   21506:	d001      	beq.n	2150c <bt_conn_is_peer_addr_le+0xc>
		return false;
   21508:	2000      	movs	r0, #0
}
   2150a:	bd38      	pop	{r3, r4, r5, pc}
   2150c:	4604      	mov	r4, r0
   2150e:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   21510:	2207      	movs	r2, #7
   21512:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21516:	4628      	mov	r0, r5
   21518:	f003 f9e0 	bl	248dc <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2151c:	b1a8      	cbz	r0, 2154a <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2151e:	78e3      	ldrb	r3, [r4, #3]
   21520:	b14b      	cbz	r3, 21536 <bt_conn_is_peer_addr_le+0x36>
   21522:	2207      	movs	r2, #7
   21524:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   21528:	4628      	mov	r0, r5
   2152a:	f003 f9d7 	bl	248dc <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2152e:	fab0 f080 	clz	r0, r0
   21532:	0940      	lsrs	r0, r0, #5
   21534:	e7e9      	b.n	2150a <bt_conn_is_peer_addr_le+0xa>
   21536:	2207      	movs	r2, #7
   21538:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2153c:	4628      	mov	r0, r5
   2153e:	f003 f9cd 	bl	248dc <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   21542:	fab0 f080 	clz	r0, r0
   21546:	0940      	lsrs	r0, r0, #5
   21548:	e7df      	b.n	2150a <bt_conn_is_peer_addr_le+0xa>
		return true;
   2154a:	2001      	movs	r0, #1
   2154c:	e7dd      	b.n	2150a <bt_conn_is_peer_addr_le+0xa>

0002154e <bt_conn_le_conn_update>:
{
   2154e:	b570      	push	{r4, r5, r6, lr}
   21550:	4605      	mov	r5, r0
   21552:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   21554:	210e      	movs	r1, #14
   21556:	f242 0013 	movw	r0, #8211	; 0x2013
   2155a:	f7f2 fe9b 	bl	14294 <bt_hci_cmd_create>
	if (!buf) {
   2155e:	b1c8      	cbz	r0, 21594 <bt_conn_le_conn_update+0x46>
   21560:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   21562:	210e      	movs	r1, #14
   21564:	3008      	adds	r0, #8
   21566:	f001 fb7d 	bl	22c64 <net_buf_simple_add>
   2156a:	2200      	movs	r2, #0
   2156c:	6002      	str	r2, [r0, #0]
   2156e:	6042      	str	r2, [r0, #4]
   21570:	6082      	str	r2, [r0, #8]
   21572:	8182      	strh	r2, [r0, #12]
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   21574:	882b      	ldrh	r3, [r5, #0]
   21576:	8003      	strh	r3, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   21578:	8823      	ldrh	r3, [r4, #0]
   2157a:	8043      	strh	r3, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2157c:	8863      	ldrh	r3, [r4, #2]
   2157e:	8083      	strh	r3, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   21580:	88a3      	ldrh	r3, [r4, #4]
   21582:	80c3      	strh	r3, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   21584:	88e3      	ldrh	r3, [r4, #6]
   21586:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21588:	4631      	mov	r1, r6
   2158a:	f242 0013 	movw	r0, #8211	; 0x2013
   2158e:	f7f2 febd 	bl	1430c <bt_hci_cmd_send_sync>
}
   21592:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   21594:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21598:	e7fb      	b.n	21592 <bt_conn_le_conn_update+0x44>

0002159a <l2cap_connected>:
}
   2159a:	4770      	bx	lr

0002159c <l2cap_chan_recv>:
{
   2159c:	b510      	push	{r4, lr}
   2159e:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   215a0:	6843      	ldr	r3, [r0, #4]
   215a2:	691b      	ldr	r3, [r3, #16]
   215a4:	4798      	blx	r3
	net_buf_unref(buf);
   215a6:	4620      	mov	r0, r4
   215a8:	f001 fb12 	bl	22bd0 <net_buf_unref>
}
   215ac:	bd10      	pop	{r4, pc}

000215ae <l2cap_disconnected>:
{
   215ae:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   215b0:	3010      	adds	r0, #16
   215b2:	f002 fe1d 	bl	241f0 <k_work_cancel_delayable>
}
   215b6:	bd08      	pop	{r3, pc}

000215b8 <bt_l2cap_chan_remove>:
	return list->head;
   215b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   215ba:	b103      	cbz	r3, 215be <bt_l2cap_chan_remove+0x6>
   215bc:	3b08      	subs	r3, #8
   215be:	2200      	movs	r2, #0
   215c0:	e016      	b.n	215f0 <bt_l2cap_chan_remove+0x38>
{
   215c2:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   215c4:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   215c8:	b142      	cbz	r2, 215dc <bt_l2cap_chan_remove+0x24>
	return node->next;
   215ca:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   215cc:	6014      	str	r4, [r2, #0]
	return list->tail;
   215ce:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   215d0:	42a1      	cmp	r1, r4
   215d2:	d00a      	beq.n	215ea <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   215d4:	2200      	movs	r2, #0
   215d6:	609a      	str	r2, [r3, #8]
}
   215d8:	bc10      	pop	{r4}
   215da:	4770      	bx	lr
	return node->next;
   215dc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   215de:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   215e0:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   215e2:	42a1      	cmp	r1, r4
   215e4:	d1f6      	bne.n	215d4 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   215e6:	6542      	str	r2, [r0, #84]	; 0x54
}
   215e8:	e7f4      	b.n	215d4 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   215ea:	6542      	str	r2, [r0, #84]	; 0x54
}
   215ec:	e7f2      	b.n	215d4 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   215ee:	4613      	mov	r3, r2
   215f0:	b14b      	cbz	r3, 21606 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   215f2:	428b      	cmp	r3, r1
   215f4:	d0e5      	beq.n	215c2 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   215f6:	f113 0208 	adds.w	r2, r3, #8
   215fa:	d0f8      	beq.n	215ee <bt_l2cap_chan_remove+0x36>
	return node->next;
   215fc:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   215fe:	2b00      	cmp	r3, #0
   21600:	d0f6      	beq.n	215f0 <bt_l2cap_chan_remove+0x38>
   21602:	3b08      	subs	r3, #8
   21604:	e7f4      	b.n	215f0 <bt_l2cap_chan_remove+0x38>
   21606:	4770      	bx	lr

00021608 <bt_l2cap_chan_del>:
{
   21608:	b538      	push	{r3, r4, r5, lr}
   2160a:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2160c:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2160e:	6803      	ldr	r3, [r0, #0]
   21610:	b123      	cbz	r3, 2161c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   21612:	686b      	ldr	r3, [r5, #4]
   21614:	b103      	cbz	r3, 21618 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21616:	4798      	blx	r3
	chan->conn = NULL;
   21618:	2300      	movs	r3, #0
   2161a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2161c:	68e3      	ldr	r3, [r4, #12]
   2161e:	b10b      	cbz	r3, 21624 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   21620:	4620      	mov	r0, r4
   21622:	4798      	blx	r3
	if (ops->released) {
   21624:	69eb      	ldr	r3, [r5, #28]
   21626:	b10b      	cbz	r3, 2162c <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   21628:	4620      	mov	r0, r4
   2162a:	4798      	blx	r3
}
   2162c:	bd38      	pop	{r3, r4, r5, pc}

0002162e <bt_l2cap_chan_add>:
{
   2162e:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   21630:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   21634:	2400      	movs	r4, #0
   21636:	608c      	str	r4, [r1, #8]
	return list->tail;
   21638:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   2163a:	b12c      	cbz	r4, 21648 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2163c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2163e:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   21640:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   21642:	60ca      	str	r2, [r1, #12]
}
   21644:	bc10      	pop	{r4}
   21646:	4770      	bx	lr
   21648:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   2164a:	6503      	str	r3, [r0, #80]	; 0x50
}
   2164c:	e7f8      	b.n	21640 <bt_l2cap_chan_add+0x12>

0002164e <bt_l2cap_create_pdu_timeout>:
{
   2164e:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   21650:	3104      	adds	r1, #4
   21652:	f7f5 f83b 	bl	166cc <bt_conn_create_pdu_timeout>
}
   21656:	bd08      	pop	{r3, pc}

00021658 <bt_l2cap_send_cb>:
{
   21658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2165a:	4605      	mov	r5, r0
   2165c:	460f      	mov	r7, r1
   2165e:	4614      	mov	r4, r2
   21660:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   21662:	2104      	movs	r1, #4
   21664:	f102 0008 	add.w	r0, r2, #8
   21668:	f001 fb0d 	bl	22c86 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2166c:	89a3      	ldrh	r3, [r4, #12]
   2166e:	3b04      	subs	r3, #4
   21670:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   21672:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21674:	9b06      	ldr	r3, [sp, #24]
   21676:	4632      	mov	r2, r6
   21678:	4621      	mov	r1, r4
   2167a:	4628      	mov	r0, r5
   2167c:	f7f4 fe60 	bl	16340 <bt_conn_send_cb>
}
   21680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021682 <l2cap_send_reject>:
{
   21682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21686:	b083      	sub	sp, #12
   21688:	4605      	mov	r5, r0
   2168a:	4690      	mov	r8, r2
   2168c:	461c      	mov	r4, r3
   2168e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   21692:	1cbb      	adds	r3, r7, #2
   21694:	460a      	mov	r2, r1
   21696:	2101      	movs	r1, #1
   21698:	2000      	movs	r0, #0
   2169a:	f7f5 fafd 	bl	16c98 <l2cap_create_le_sig_pdu>
	if (!buf) {
   2169e:	b1b0      	cbz	r0, 216ce <l2cap_send_reject+0x4c>
   216a0:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   216a2:	f100 0908 	add.w	r9, r0, #8
   216a6:	2102      	movs	r1, #2
   216a8:	4648      	mov	r0, r9
   216aa:	f001 fadb 	bl	22c64 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   216ae:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   216b2:	b124      	cbz	r4, 216be <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   216b4:	463a      	mov	r2, r7
   216b6:	4621      	mov	r1, r4
   216b8:	4648      	mov	r0, r9
   216ba:	f001 fad9 	bl	22c70 <net_buf_simple_add_mem>
   216be:	2300      	movs	r3, #0
   216c0:	9300      	str	r3, [sp, #0]
   216c2:	4632      	mov	r2, r6
   216c4:	2105      	movs	r1, #5
   216c6:	4628      	mov	r0, r5
   216c8:	f7ff ffc6 	bl	21658 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   216cc:	b910      	cbnz	r0, 216d4 <l2cap_send_reject+0x52>
}
   216ce:	b003      	add	sp, #12
   216d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   216d4:	4630      	mov	r0, r6
   216d6:	f001 fa7b 	bl	22bd0 <net_buf_unref>
}
   216da:	e7f8      	b.n	216ce <l2cap_send_reject+0x4c>

000216dc <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   216dc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   216de:	b110      	cbz	r0, 216e6 <bt_l2cap_le_lookup_tx_cid+0xa>
   216e0:	3808      	subs	r0, #8
   216e2:	e000      	b.n	216e6 <bt_l2cap_le_lookup_tx_cid+0xa>
   216e4:	3808      	subs	r0, #8
   216e6:	b148      	cbz	r0, 216fc <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   216e8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   216ec:	428b      	cmp	r3, r1
   216ee:	d005      	beq.n	216fc <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   216f0:	f110 0308 	adds.w	r3, r0, #8
   216f4:	d003      	beq.n	216fe <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   216f6:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   216f8:	2800      	cmp	r0, #0
   216fa:	d1f3      	bne.n	216e4 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   216fc:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   216fe:	4618      	mov	r0, r3
   21700:	e7f1      	b.n	216e6 <bt_l2cap_le_lookup_tx_cid+0xa>

00021702 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   21702:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21704:	b110      	cbz	r0, 2170c <bt_l2cap_le_lookup_rx_cid+0xa>
   21706:	3808      	subs	r0, #8
   21708:	e000      	b.n	2170c <bt_l2cap_le_lookup_rx_cid+0xa>
   2170a:	3808      	subs	r0, #8
   2170c:	b148      	cbz	r0, 21722 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2170e:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   21712:	428b      	cmp	r3, r1
   21714:	d005      	beq.n	21722 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21716:	f110 0308 	adds.w	r3, r0, #8
   2171a:	d003      	beq.n	21724 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   2171c:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2171e:	2800      	cmp	r0, #0
   21720:	d1f3      	bne.n	2170a <bt_l2cap_le_lookup_rx_cid+0x8>
}
   21722:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21724:	4618      	mov	r0, r3
   21726:	e7f1      	b.n	2170c <bt_l2cap_le_lookup_rx_cid+0xa>

00021728 <bt_l2cap_update_conn_param>:
{
   21728:	b570      	push	{r4, r5, r6, lr}
   2172a:	b082      	sub	sp, #8
   2172c:	4605      	mov	r5, r0
   2172e:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   21730:	f7f5 f9be 	bl	16ab0 <get_ident>
   21734:	4602      	mov	r2, r0
   21736:	2308      	movs	r3, #8
   21738:	2112      	movs	r1, #18
   2173a:	2000      	movs	r0, #0
   2173c:	f7f5 faac 	bl	16c98 <l2cap_create_le_sig_pdu>
	if (!buf) {
   21740:	b1e0      	cbz	r0, 2177c <bt_l2cap_update_conn_param+0x54>
   21742:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   21744:	2108      	movs	r1, #8
   21746:	4408      	add	r0, r1
   21748:	f001 fa8c 	bl	22c64 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2174c:	8823      	ldrh	r3, [r4, #0]
   2174e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   21750:	8863      	ldrh	r3, [r4, #2]
   21752:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   21754:	88a3      	ldrh	r3, [r4, #4]
   21756:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   21758:	88e3      	ldrh	r3, [r4, #6]
   2175a:	80c3      	strh	r3, [r0, #6]
   2175c:	2300      	movs	r3, #0
   2175e:	9300      	str	r3, [sp, #0]
   21760:	4632      	mov	r2, r6
   21762:	2105      	movs	r1, #5
   21764:	4628      	mov	r0, r5
   21766:	f7ff ff77 	bl	21658 <bt_l2cap_send_cb>
	if (err) {
   2176a:	4604      	mov	r4, r0
   2176c:	b910      	cbnz	r0, 21774 <bt_l2cap_update_conn_param+0x4c>
}
   2176e:	4620      	mov	r0, r4
   21770:	b002      	add	sp, #8
   21772:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   21774:	4630      	mov	r0, r6
   21776:	f001 fa2b 	bl	22bd0 <net_buf_unref>
		return err;
   2177a:	e7f8      	b.n	2176e <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2177c:	f06f 040b 	mvn.w	r4, #11
   21780:	e7f5      	b.n	2176e <bt_l2cap_update_conn_param+0x46>

00021782 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   21782:	4770      	bx	lr

00021784 <att_sent>:
{
   21784:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   21786:	684b      	ldr	r3, [r1, #4]
   21788:	695b      	ldr	r3, [r3, #20]
   2178a:	b10b      	cbz	r3, 21790 <att_sent+0xc>
   2178c:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   2178e:	4798      	blx	r3
}
   21790:	bd08      	pop	{r3, pc}

00021792 <range_is_valid>:
	if (!start || !end) {
   21792:	b120      	cbz	r0, 2179e <range_is_valid+0xc>
   21794:	b119      	cbz	r1, 2179e <range_is_valid+0xc>
	if (start > end) {
   21796:	4288      	cmp	r0, r1
   21798:	d806      	bhi.n	217a8 <range_is_valid+0x16>
	return true;
   2179a:	2001      	movs	r0, #1
}
   2179c:	4770      	bx	lr
		if (err) {
   2179e:	b10a      	cbz	r2, 217a4 <range_is_valid+0x12>
			*err = 0U;
   217a0:	2300      	movs	r3, #0
   217a2:	8013      	strh	r3, [r2, #0]
		return false;
   217a4:	2000      	movs	r0, #0
   217a6:	4770      	bx	lr
		if (err) {
   217a8:	b102      	cbz	r2, 217ac <range_is_valid+0x1a>
			*err = start;
   217aa:	8010      	strh	r0, [r2, #0]
		return false;
   217ac:	2000      	movs	r0, #0
   217ae:	4770      	bx	lr

000217b0 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   217b0:	f110 0fff 	cmn.w	r0, #255	; 0xff
   217b4:	d201      	bcs.n	217ba <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   217b6:	200e      	movs	r0, #14
}
   217b8:	4770      	bx	lr
		return -err;
   217ba:	4240      	negs	r0, r0
   217bc:	b2c0      	uxtb	r0, r0
   217be:	4770      	bx	lr

000217c0 <attr_read_type_cb>:
{
   217c0:	b410      	push	{r4}
	if (!data->rsp->len) {
   217c2:	68d4      	ldr	r4, [r2, #12]
   217c4:	7823      	ldrb	r3, [r4, #0]
   217c6:	b923      	cbnz	r3, 217d2 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   217c8:	3102      	adds	r1, #2
   217ca:	7021      	strb	r1, [r4, #0]
	return true;
   217cc:	2001      	movs	r0, #1
}
   217ce:	bc10      	pop	{r4}
   217d0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   217d2:	3102      	adds	r1, #2
   217d4:	428b      	cmp	r3, r1
   217d6:	d005      	beq.n	217e4 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   217d8:	8983      	ldrh	r3, [r0, #12]
   217da:	3b02      	subs	r3, #2
   217dc:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   217de:	2000      	movs	r0, #0
   217e0:	6110      	str	r0, [r2, #16]
		return false;
   217e2:	e7f4      	b.n	217ce <attr_read_type_cb+0xe>
	return true;
   217e4:	2001      	movs	r0, #1
   217e6:	e7f2      	b.n	217ce <attr_read_type_cb+0xe>

000217e8 <attr_read_group_cb>:
	if (!data->rsp->len) {
   217e8:	68d0      	ldr	r0, [r2, #12]
   217ea:	7803      	ldrb	r3, [r0, #0]
   217ec:	b91b      	cbnz	r3, 217f6 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   217ee:	3104      	adds	r1, #4
   217f0:	7001      	strb	r1, [r0, #0]
	return true;
   217f2:	2001      	movs	r0, #1
   217f4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   217f6:	3104      	adds	r1, #4
   217f8:	428b      	cmp	r3, r1
   217fa:	d006      	beq.n	2180a <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   217fc:	6891      	ldr	r1, [r2, #8]
   217fe:	898b      	ldrh	r3, [r1, #12]
   21800:	3b04      	subs	r3, #4
   21802:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   21804:	2000      	movs	r0, #0
   21806:	6110      	str	r0, [r2, #16]
		return false;
   21808:	4770      	bx	lr
	return true;
   2180a:	2001      	movs	r0, #1
}
   2180c:	4770      	bx	lr

0002180e <att_prepare_write_req>:
}
   2180e:	2006      	movs	r0, #6
   21810:	4770      	bx	lr

00021812 <att_exec_write_req>:
}
   21812:	2006      	movs	r0, #6
   21814:	4770      	bx	lr

00021816 <att_op_get_type>:
	switch (op) {
   21816:	1e43      	subs	r3, r0, #1
   21818:	2bd1      	cmp	r3, #209	; 0xd1
   2181a:	d874      	bhi.n	21906 <att_op_get_type+0xf0>
   2181c:	e8df f003 	tbb	[pc, r3]
   21820:	696d696d 	.word	0x696d696d
   21824:	696d696d 	.word	0x696d696d
   21828:	696d696d 	.word	0x696d696d
   2182c:	696d696d 	.word	0x696d696d
   21830:	736d696d 	.word	0x736d696d
   21834:	696d6973 	.word	0x696d6973
   21838:	736f736d 	.word	0x736f736d
   2183c:	73737871 	.word	0x73737871
   21840:	73737373 	.word	0x73737373
   21844:	73737373 	.word	0x73737373
   21848:	73737373 	.word	0x73737373
   2184c:	73737373 	.word	0x73737373
   21850:	73737373 	.word	0x73737373
   21854:	73737373 	.word	0x73737373
   21858:	73737373 	.word	0x73737373
   2185c:	73737373 	.word	0x73737373
   21860:	73737373 	.word	0x73737373
   21864:	73737373 	.word	0x73737373
   21868:	73737373 	.word	0x73737373
   2186c:	73737373 	.word	0x73737373
   21870:	73736b73 	.word	0x73736b73
   21874:	73737373 	.word	0x73737373
   21878:	73737373 	.word	0x73737373
   2187c:	73737373 	.word	0x73737373
   21880:	73737373 	.word	0x73737373
   21884:	73737373 	.word	0x73737373
   21888:	73737373 	.word	0x73737373
   2188c:	73737373 	.word	0x73737373
   21890:	73737373 	.word	0x73737373
   21894:	73737373 	.word	0x73737373
   21898:	73737373 	.word	0x73737373
   2189c:	73737373 	.word	0x73737373
   218a0:	73737373 	.word	0x73737373
   218a4:	73737373 	.word	0x73737373
   218a8:	73737373 	.word	0x73737373
   218ac:	73737373 	.word	0x73737373
   218b0:	73737373 	.word	0x73737373
   218b4:	73737373 	.word	0x73737373
   218b8:	73737373 	.word	0x73737373
   218bc:	73737373 	.word	0x73737373
   218c0:	73737373 	.word	0x73737373
   218c4:	73737373 	.word	0x73737373
   218c8:	73737373 	.word	0x73737373
   218cc:	73737373 	.word	0x73737373
   218d0:	73737373 	.word	0x73737373
   218d4:	73737373 	.word	0x73737373
   218d8:	73737373 	.word	0x73737373
   218dc:	73737373 	.word	0x73737373
   218e0:	73737373 	.word	0x73737373
   218e4:	73737373 	.word	0x73737373
   218e8:	73737373 	.word	0x73737373
   218ec:	73737373 	.word	0x73737373
   218f0:	6b73      	.short	0x6b73
{
   218f2:	2001      	movs	r0, #1
   218f4:	4770      	bx	lr
		return ATT_COMMAND;
   218f6:	2000      	movs	r0, #0
   218f8:	4770      	bx	lr
		return ATT_RESPONSE;
   218fa:	2002      	movs	r0, #2
   218fc:	4770      	bx	lr
		return ATT_NOTIFICATION;
   218fe:	2003      	movs	r0, #3
   21900:	4770      	bx	lr
		return ATT_INDICATION;
   21902:	2005      	movs	r0, #5
   21904:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   21906:	f010 0f40 	tst.w	r0, #64	; 0x40
   2190a:	d103      	bne.n	21914 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   2190c:	2006      	movs	r0, #6
   2190e:	4770      	bx	lr
		return ATT_CONFIRMATION;
   21910:	2004      	movs	r0, #4
   21912:	4770      	bx	lr
		return ATT_COMMAND;
   21914:	2000      	movs	r0, #0
}
   21916:	4770      	bx	lr

00021918 <att_chan_attach>:
{
   21918:	b538      	push	{r3, r4, r5, lr}
   2191a:	4604      	mov	r4, r0
   2191c:	460d      	mov	r5, r1
	return list->head;
   2191e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   21920:	b143      	cbz	r3, 21934 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   21922:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   21926:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   21928:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   2192c:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   2192e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   21930:	b122      	cbz	r2, 2193c <att_chan_attach+0x24>
}
   21932:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   21934:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   21936:	f002 fb07 	bl	23f48 <z_impl_k_queue_init>
}
   2193a:	e7f2      	b.n	21922 <att_chan_attach+0xa>
	list->tail = node;
   2193c:	62a3      	str	r3, [r4, #40]	; 0x28
}
   2193e:	e7f8      	b.n	21932 <att_chan_attach+0x1a>

00021940 <chan_req_send>:
{
   21940:	b570      	push	{r4, r5, r6, lr}
   21942:	4606      	mov	r6, r0
   21944:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21946:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   2194a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2194c:	2200      	movs	r2, #0
	while (buf) {
   2194e:	b11b      	cbz	r3, 21958 <chan_req_send+0x18>
		bytes += buf->len;
   21950:	899c      	ldrh	r4, [r3, #12]
   21952:	4422      	add	r2, r4
		buf = buf->frags;
   21954:	681b      	ldr	r3, [r3, #0]
   21956:	e7fa      	b.n	2194e <chan_req_send+0xe>
   21958:	4291      	cmp	r1, r2
   2195a:	d30e      	bcc.n	2197a <chan_req_send+0x3a>
	chan->req = req;
   2195c:	f8c6 50f4 	str.w	r5, [r6, #244]	; 0xf4
	buf = req->buf;
   21960:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   21962:	2200      	movs	r2, #0
   21964:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   21966:	4621      	mov	r1, r4
   21968:	4630      	mov	r0, r6
   2196a:	f7f5 fc61 	bl	17230 <chan_send>
	if (err) {
   2196e:	b118      	cbz	r0, 21978 <chan_req_send+0x38>
		req->buf = buf;
   21970:	60ac      	str	r4, [r5, #8]
		chan->req = NULL;
   21972:	2300      	movs	r3, #0
   21974:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
}
   21978:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2197a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2197e:	e7fb      	b.n	21978 <chan_req_send+0x38>

00021980 <bt_att_chan_req_send>:
{
   21980:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   21982:	f7ff ffdd 	bl	21940 <chan_req_send>
}
   21986:	bd08      	pop	{r3, pc}

00021988 <bt_att_status>:
{
   21988:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2198a:	f3bf 8f5b 	dmb	ish
   2198e:	680b      	ldr	r3, [r1, #0]
   21990:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21994:	f013 0f01 	tst.w	r3, #1
   21998:	d007      	beq.n	219aa <bt_att_status+0x22>
   2199a:	4604      	mov	r4, r0
   2199c:	3808      	subs	r0, #8
	if (!chan->att) {
   2199e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   219a2:	b113      	cbz	r3, 219aa <bt_att_status+0x22>
	if (chan->req) {
   219a4:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   219a8:	b102      	cbz	r2, 219ac <bt_att_status+0x24>
}
   219aa:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   219ac:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   219ae:	2d00      	cmp	r5, #0
   219b0:	d0fb      	beq.n	219aa <bt_att_status+0x22>
	return node->next;
   219b2:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   219b4:	605a      	str	r2, [r3, #4]
	return list->tail;
   219b6:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   219b8:	42a9      	cmp	r1, r5
   219ba:	d00e      	beq.n	219da <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   219bc:	4629      	mov	r1, r5
   219be:	f7ff ffdf 	bl	21980 <bt_att_chan_req_send>
   219c2:	2800      	cmp	r0, #0
   219c4:	daf1      	bge.n	219aa <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   219c6:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   219ca:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   219cc:	602a      	str	r2, [r5, #0]
	list->head = node;
   219ce:	605d      	str	r5, [r3, #4]
	return list->tail;
   219d0:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   219d2:	2a00      	cmp	r2, #0
   219d4:	d1e9      	bne.n	219aa <bt_att_status+0x22>
	list->tail = node;
   219d6:	609d      	str	r5, [r3, #8]
}
   219d8:	e7e7      	b.n	219aa <bt_att_status+0x22>
	list->tail = node;
   219da:	609a      	str	r2, [r3, #8]
}
   219dc:	e7ee      	b.n	219bc <bt_att_status+0x34>

000219de <att_req_send_process>:
{
   219de:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   219e0:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   219e2:	2e00      	cmp	r6, #0
   219e4:	d038      	beq.n	21a58 <att_req_send_process+0x7a>
   219e6:	4605      	mov	r5, r0
	return node->next;
   219e8:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   219ea:	6043      	str	r3, [r0, #4]
	return list->tail;
   219ec:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   219ee:	4296      	cmp	r6, r2
   219f0:	d00d      	beq.n	21a0e <att_req_send_process+0x30>
	return list->head;
   219f2:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   219f4:	b198      	cbz	r0, 21a1e <att_req_send_process+0x40>
   219f6:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   219fa:	d012      	beq.n	21a22 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   219fc:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   21a00:	d014      	beq.n	21a2c <att_req_send_process+0x4e>
	return node->next;
   21a02:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   21a06:	b18c      	cbz	r4, 21a2c <att_req_send_process+0x4e>
   21a08:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   21a0c:	e00e      	b.n	21a2c <att_req_send_process+0x4e>
	list->tail = node;
   21a0e:	6083      	str	r3, [r0, #8]
}
   21a10:	e7ef      	b.n	219f2 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21a12:	4631      	mov	r1, r6
   21a14:	f7ff ffb4 	bl	21980 <bt_att_chan_req_send>
   21a18:	2800      	cmp	r0, #0
   21a1a:	db0c      	blt.n	21a36 <att_req_send_process+0x58>
   21a1c:	e01c      	b.n	21a58 <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21a1e:	4604      	mov	r4, r0
   21a20:	e004      	b.n	21a2c <att_req_send_process+0x4e>
   21a22:	4604      	mov	r4, r0
   21a24:	e002      	b.n	21a2c <att_req_send_process+0x4e>
   21a26:	4623      	mov	r3, r4
   21a28:	4620      	mov	r0, r4
   21a2a:	461c      	mov	r4, r3
   21a2c:	b178      	cbz	r0, 21a4e <att_req_send_process+0x70>
		if (!chan->req) {
   21a2e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   21a32:	2b00      	cmp	r3, #0
   21a34:	d0ed      	beq.n	21a12 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21a36:	2c00      	cmp	r4, #0
   21a38:	d0f5      	beq.n	21a26 <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21a3a:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   21a3e:	d0f3      	beq.n	21a28 <att_req_send_process+0x4a>
	return node->next;
   21a40:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   21a44:	2b00      	cmp	r3, #0
   21a46:	d0ef      	beq.n	21a28 <att_req_send_process+0x4a>
   21a48:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   21a4c:	e7ec      	b.n	21a28 <att_req_send_process+0x4a>
	return list->head;
   21a4e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   21a50:	6033      	str	r3, [r6, #0]
	list->head = node;
   21a52:	606e      	str	r6, [r5, #4]
	return list->tail;
   21a54:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   21a56:	b103      	cbz	r3, 21a5a <att_req_send_process+0x7c>
}
   21a58:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   21a5a:	60ae      	str	r6, [r5, #8]
}
   21a5c:	e7fc      	b.n	21a58 <att_req_send_process+0x7a>

00021a5e <bt_att_chan_send>:
{
   21a5e:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   21a60:	f7f5 fbe6 	bl	17230 <chan_send>
}
   21a64:	bd08      	pop	{r3, pc}

00021a66 <chan_req_sent>:
{
   21a66:	b508      	push	{r3, lr}
	if (chan->req) {
   21a68:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   21a6c:	b133      	cbz	r3, 21a7c <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   21a6e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21a72:	2300      	movs	r3, #0
   21a74:	f500 7088 	add.w	r0, r0, #272	; 0x110
   21a78:	f7fa fad2 	bl	1c020 <k_work_reschedule>
}
   21a7c:	bd08      	pop	{r3, pc}

00021a7e <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   21a7e:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21a80:	f3bf 8f5b 	dmb	ish
   21a84:	e850 3f00 	ldrex	r3, [r0]
   21a88:	f023 0302 	bic.w	r3, r3, #2
   21a8c:	e840 3200 	strex	r2, r3, [r0]
   21a90:	2a00      	cmp	r2, #0
   21a92:	d1f7      	bne.n	21a84 <chan_cfm_sent+0x6>
   21a94:	f3bf 8f5b 	dmb	ish
}
   21a98:	4770      	bx	lr

00021a9a <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   21a9a:	30f0      	adds	r0, #240	; 0xf0
   21a9c:	f3bf 8f5b 	dmb	ish
   21aa0:	e850 3f00 	ldrex	r3, [r0]
   21aa4:	f023 0301 	bic.w	r3, r3, #1
   21aa8:	e840 3200 	strex	r2, r3, [r0]
   21aac:	2a00      	cmp	r2, #0
   21aae:	d1f7      	bne.n	21aa0 <chan_rsp_sent+0x6>
   21ab0:	f3bf 8f5b 	dmb	ish
}
   21ab4:	4770      	bx	lr

00021ab6 <process_queue>:
{
   21ab6:	b570      	push	{r4, r5, r6, lr}
   21ab8:	4605      	mov	r5, r0
   21aba:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   21abc:	2200      	movs	r2, #0
   21abe:	2300      	movs	r3, #0
   21ac0:	4608      	mov	r0, r1
   21ac2:	f001 f859 	bl	22b78 <net_buf_get>
	if (buf) {
   21ac6:	b170      	cbz	r0, 21ae6 <process_queue+0x30>
   21ac8:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   21aca:	2200      	movs	r2, #0
   21acc:	4601      	mov	r1, r0
   21ace:	4628      	mov	r0, r5
   21ad0:	f7f5 fbae 	bl	17230 <chan_send>
		if (err) {
   21ad4:	4605      	mov	r5, r0
   21ad6:	b908      	cbnz	r0, 21adc <process_queue+0x26>
}
   21ad8:	4628      	mov	r0, r5
   21ada:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   21adc:	4631      	mov	r1, r6
   21ade:	4620      	mov	r0, r4
   21ae0:	f002 fa4a 	bl	23f78 <k_queue_prepend>
			return err;
   21ae4:	e7f8      	b.n	21ad8 <process_queue+0x22>
	return -ENOENT;
   21ae6:	f06f 0501 	mvn.w	r5, #1
   21aea:	e7f5      	b.n	21ad8 <process_queue+0x22>

00021aec <bt_att_sent>:
{
   21aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21aee:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21af0:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   21af4:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   21af8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   21afc:	b10b      	cbz	r3, 21b02 <bt_att_sent+0x16>
		chan->sent(chan);
   21afe:	4630      	mov	r0, r6
   21b00:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   21b02:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   21b06:	f3bf 8f5b 	dmb	ish
   21b0a:	e853 2f00 	ldrex	r2, [r3]
   21b0e:	f022 0210 	bic.w	r2, r2, #16
   21b12:	e843 2100 	strex	r1, r2, [r3]
   21b16:	2900      	cmp	r1, #0
   21b18:	d1f7      	bne.n	21b0a <bt_att_sent+0x1e>
   21b1a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21b1e:	b145      	cbz	r5, 21b32 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21b20:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   21b24:	b133      	cbz	r3, 21b34 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   21b26:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   21b2a:	4630      	mov	r0, r6
   21b2c:	f7ff ffc3 	bl	21ab6 <process_queue>
	if (!err) {
   21b30:	b9c0      	cbnz	r0, 21b64 <bt_att_sent+0x78>
}
   21b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   21b34:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21b36:	2f00      	cmp	r7, #0
   21b38:	d0f5      	beq.n	21b26 <bt_att_sent+0x3a>
	return node->next;
   21b3a:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   21b3c:	606b      	str	r3, [r5, #4]
	return list->tail;
   21b3e:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21b40:	42ba      	cmp	r2, r7
   21b42:	d00d      	beq.n	21b60 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21b44:	4639      	mov	r1, r7
   21b46:	4630      	mov	r0, r6
   21b48:	f7ff fefa 	bl	21940 <chan_req_send>
   21b4c:	2800      	cmp	r0, #0
   21b4e:	daf0      	bge.n	21b32 <bt_att_sent+0x46>
	return list->head;
   21b50:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   21b52:	603b      	str	r3, [r7, #0]
	list->head = node;
   21b54:	606f      	str	r7, [r5, #4]
	return list->tail;
   21b56:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   21b58:	2b00      	cmp	r3, #0
   21b5a:	d1e4      	bne.n	21b26 <bt_att_sent+0x3a>
	list->tail = node;
   21b5c:	60af      	str	r7, [r5, #8]
}
   21b5e:	e7e2      	b.n	21b26 <bt_att_sent+0x3a>
	list->tail = node;
   21b60:	60ab      	str	r3, [r5, #8]
}
   21b62:	e7ef      	b.n	21b44 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   21b64:	f105 010c 	add.w	r1, r5, #12
   21b68:	4630      	mov	r0, r6
   21b6a:	f7ff ffa4 	bl	21ab6 <process_queue>
   21b6e:	e7e0      	b.n	21b32 <bt_att_sent+0x46>

00021b70 <att_send_process>:
{
   21b70:	b570      	push	{r4, r5, r6, lr}
   21b72:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   21b74:	2200      	movs	r2, #0
   21b76:	2300      	movs	r3, #0
   21b78:	300c      	adds	r0, #12
   21b7a:	f000 fffd 	bl	22b78 <net_buf_get>
	if (!buf) {
   21b7e:	b360      	cbz	r0, 21bda <att_send_process+0x6a>
   21b80:	4605      	mov	r5, r0
	return list->head;
   21b82:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21b84:	b158      	cbz	r0, 21b9e <att_send_process+0x2e>
   21b86:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   21b8a:	d00c      	beq.n	21ba6 <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21b8c:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   21b90:	d006      	beq.n	21ba0 <att_send_process+0x30>
	return node->next;
   21b92:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   21b96:	b11c      	cbz	r4, 21ba0 <att_send_process+0x30>
   21b98:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   21b9c:	e000      	b.n	21ba0 <att_send_process+0x30>
   21b9e:	4604      	mov	r4, r0
   21ba0:	f06f 0301 	mvn.w	r3, #1
   21ba4:	e004      	b.n	21bb0 <att_send_process+0x40>
   21ba6:	4604      	mov	r4, r0
   21ba8:	e7fa      	b.n	21ba0 <att_send_process+0x30>
   21baa:	4622      	mov	r2, r4
   21bac:	4620      	mov	r0, r4
   21bae:	4614      	mov	r4, r2
   21bb0:	b188      	cbz	r0, 21bd6 <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   21bb2:	2200      	movs	r2, #0
   21bb4:	4629      	mov	r1, r5
   21bb6:	f7ff ff52 	bl	21a5e <bt_att_chan_send>
		if (err >= 0) {
   21bba:	1e03      	subs	r3, r0, #0
   21bbc:	da0b      	bge.n	21bd6 <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21bbe:	2c00      	cmp	r4, #0
   21bc0:	d0f3      	beq.n	21baa <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21bc2:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   21bc6:	d0f1      	beq.n	21bac <att_send_process+0x3c>
	return node->next;
   21bc8:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   21bcc:	2a00      	cmp	r2, #0
   21bce:	d0ed      	beq.n	21bac <att_send_process+0x3c>
   21bd0:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   21bd4:	e7ea      	b.n	21bac <att_send_process+0x3c>
	if (err < 0) {
   21bd6:	2b00      	cmp	r3, #0
   21bd8:	db00      	blt.n	21bdc <att_send_process+0x6c>
}
   21bda:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   21bdc:	4629      	mov	r1, r5
   21bde:	f106 000c 	add.w	r0, r6, #12
   21be2:	f002 f9c9 	bl	23f78 <k_queue_prepend>
   21be6:	e7f8      	b.n	21bda <att_send_process+0x6a>

00021be8 <write_cb>:
{
   21be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bea:	b083      	sub	sp, #12
   21bec:	4606      	mov	r6, r0
   21bee:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   21bf0:	222a      	movs	r2, #42	; 0x2a
   21bf2:	4601      	mov	r1, r0
   21bf4:	6820      	ldr	r0, [r4, #0]
   21bf6:	f000 fe39 	bl	2286c <bt_gatt_check_perm>
   21bfa:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   21bfc:	bb08      	cbnz	r0, 21c42 <write_cb+0x5a>
   21bfe:	4605      	mov	r5, r0
	if (!data->req) {
   21c00:	7a23      	ldrb	r3, [r4, #8]
   21c02:	b11b      	cbz	r3, 21c0c <write_cb+0x24>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   21c04:	2b18      	cmp	r3, #24
   21c06:	d016      	beq.n	21c36 <write_cb+0x4e>
	uint8_t flags = 0U;
   21c08:	4603      	mov	r3, r0
   21c0a:	e000      	b.n	21c0e <write_cb+0x26>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   21c0c:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   21c0e:	68b7      	ldr	r7, [r6, #8]
   21c10:	9301      	str	r3, [sp, #4]
   21c12:	8a63      	ldrh	r3, [r4, #18]
   21c14:	9300      	str	r3, [sp, #0]
   21c16:	8a23      	ldrh	r3, [r4, #16]
   21c18:	68e2      	ldr	r2, [r4, #12]
   21c1a:	4631      	mov	r1, r6
   21c1c:	6820      	ldr	r0, [r4, #0]
   21c1e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   21c20:	2800      	cmp	r0, #0
   21c22:	db02      	blt.n	21c2a <write_cb+0x42>
   21c24:	8a23      	ldrh	r3, [r4, #16]
   21c26:	4298      	cmp	r0, r3
   21c28:	d007      	beq.n	21c3a <write_cb+0x52>
		data->err = err_to_att(write);
   21c2a:	f7ff fdc1 	bl	217b0 <err_to_att>
   21c2e:	7520      	strb	r0, [r4, #20]
}
   21c30:	4628      	mov	r0, r5
   21c32:	b003      	add	sp, #12
   21c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   21c36:	2304      	movs	r3, #4
   21c38:	e7e9      	b.n	21c0e <write_cb+0x26>
	data->err = 0U;
   21c3a:	2300      	movs	r3, #0
   21c3c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   21c3e:	2501      	movs	r5, #1
   21c40:	e7f6      	b.n	21c30 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
   21c42:	2500      	movs	r5, #0
   21c44:	e7f4      	b.n	21c30 <write_cb+0x48>

00021c46 <bt_att_chan_send_rsp>:
{
   21c46:	b538      	push	{r3, r4, r5, lr}
   21c48:	4604      	mov	r4, r0
   21c4a:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   21c4c:	f7ff ff07 	bl	21a5e <bt_att_chan_send>
	if (err) {
   21c50:	b900      	cbnz	r0, 21c54 <bt_att_chan_send_rsp+0xe>
}
   21c52:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   21c54:	4629      	mov	r1, r5
   21c56:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   21c5a:	f000 ffac 	bl	22bb6 <net_buf_put>
}
   21c5e:	e7f8      	b.n	21c52 <bt_att_chan_send_rsp+0xc>

00021c60 <att_chan_read>:
{
   21c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c64:	b085      	sub	sp, #20
   21c66:	4680      	mov	r8, r0
   21c68:	4689      	mov	r9, r1
   21c6a:	9202      	str	r2, [sp, #8]
   21c6c:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   21c6e:	6881      	ldr	r1, [r0, #8]
   21c70:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21c72:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   21c76:	4613      	mov	r3, r2
	size_t bytes = 0;
   21c78:	2200      	movs	r2, #0
	while (buf) {
   21c7a:	b11b      	cbz	r3, 21c84 <att_chan_read+0x24>
		bytes += buf->len;
   21c7c:	8999      	ldrh	r1, [r3, #12]
   21c7e:	440a      	add	r2, r1
		buf = buf->frags;
   21c80:	681b      	ldr	r3, [r3, #0]
   21c82:	e7fa      	b.n	21c7a <att_chan_read+0x1a>
   21c84:	4290      	cmp	r0, r2
   21c86:	d804      	bhi.n	21c92 <att_chan_read+0x32>
		return 0;
   21c88:	2400      	movs	r4, #0
}
   21c8a:	4620      	mov	r0, r4
   21c8c:	b005      	add	sp, #20
   21c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   21c92:	9802      	ldr	r0, [sp, #8]
   21c94:	f000 ffc6 	bl	22c24 <net_buf_frag_last>
   21c98:	4607      	mov	r7, r0
	size_t len, total = 0;
   21c9a:	f04f 0a00 	mov.w	sl, #0
   21c9e:	e083      	b.n	21da8 <att_chan_read+0x148>
		bytes += buf->len;
   21ca0:	8999      	ldrh	r1, [r3, #12]
   21ca2:	440a      	add	r2, r1
		buf = buf->frags;
   21ca4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21ca6:	2b00      	cmp	r3, #0
   21ca8:	d1fa      	bne.n	21ca0 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21caa:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   21cac:	f107 0608 	add.w	r6, r7, #8
   21cb0:	4630      	mov	r0, r6
   21cb2:	f001 f814 	bl	22cde <net_buf_simple_tailroom>
   21cb6:	4284      	cmp	r4, r0
   21cb8:	d32c      	bcc.n	21d14 <att_chan_read+0xb4>
   21cba:	4630      	mov	r0, r6
   21cbc:	f001 f80f 	bl	22cde <net_buf_simple_tailroom>
   21cc0:	4606      	mov	r6, r0
		if (!len) {
   21cc2:	2e00      	cmp	r6, #0
   21cc4:	d032      	beq.n	21d2c <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   21cc6:	f8d9 4004 	ldr.w	r4, [r9, #4]
   21cca:	68b9      	ldr	r1, [r7, #8]
   21ccc:	89ba      	ldrh	r2, [r7, #12]
   21cce:	9500      	str	r5, [sp, #0]
   21cd0:	b2b3      	uxth	r3, r6
   21cd2:	440a      	add	r2, r1
   21cd4:	4649      	mov	r1, r9
   21cd6:	9803      	ldr	r0, [sp, #12]
   21cd8:	47a0      	blx	r4
		if (read < 0) {
   21cda:	1e04      	subs	r4, r0, #0
   21cdc:	db5a      	blt.n	21d94 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   21cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21ce0:	b12b      	cbz	r3, 21cee <att_chan_read+0x8e>
   21ce2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21ce4:	4621      	mov	r1, r4
   21ce6:	4638      	mov	r0, r7
   21ce8:	4798      	blx	r3
   21cea:	2800      	cmp	r0, #0
   21cec:	d061      	beq.n	21db2 <att_chan_read+0x152>
		net_buf_add(frag, read);
   21cee:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   21cf0:	4621      	mov	r1, r4
   21cf2:	f107 0008 	add.w	r0, r7, #8
   21cf6:	f000 ffb5 	bl	22c64 <net_buf_simple_add>
		total += read;
   21cfa:	44a2      	add	sl, r4
		offset += read;
   21cfc:	4425      	add	r5, r4
   21cfe:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21d00:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   21d04:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   21d06:	2200      	movs	r2, #0
	while (buf) {
   21d08:	2b00      	cmp	r3, #0
   21d0a:	d049      	beq.n	21da0 <att_chan_read+0x140>
		bytes += buf->len;
   21d0c:	8999      	ldrh	r1, [r3, #12]
   21d0e:	440a      	add	r2, r1
		buf = buf->frags;
   21d10:	681b      	ldr	r3, [r3, #0]
   21d12:	e7f9      	b.n	21d08 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21d14:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   21d18:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   21d1a:	2200      	movs	r2, #0
	while (buf) {
   21d1c:	e002      	b.n	21d24 <att_chan_read+0xc4>
		bytes += buf->len;
   21d1e:	8999      	ldrh	r1, [r3, #12]
   21d20:	440a      	add	r2, r1
		buf = buf->frags;
   21d22:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21d24:	2b00      	cmp	r3, #0
   21d26:	d1fa      	bne.n	21d1e <att_chan_read+0xbe>
   21d28:	1ab6      	subs	r6, r6, r2
   21d2a:	e7ca      	b.n	21cc2 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   21d2c:	9b02      	ldr	r3, [sp, #8]
   21d2e:	7998      	ldrb	r0, [r3, #6]
   21d30:	f7f7 f840 	bl	18db4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   21d34:	2200      	movs	r2, #0
   21d36:	2300      	movs	r3, #0
   21d38:	f000 ff17 	bl	22b6a <net_buf_alloc_fixed>
			if (!frag) {
   21d3c:	4607      	mov	r7, r0
   21d3e:	b150      	cbz	r0, 21d56 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   21d40:	4601      	mov	r1, r0
   21d42:	f8dd b008 	ldr.w	fp, [sp, #8]
   21d46:	4658      	mov	r0, fp
   21d48:	f000 ff7d 	bl	22c46 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21d4c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   21d50:	4632      	mov	r2, r6
	while (buf) {
   21d52:	465b      	mov	r3, fp
   21d54:	e004      	b.n	21d60 <att_chan_read+0x100>
				return total;
   21d56:	4654      	mov	r4, sl
   21d58:	e797      	b.n	21c8a <att_chan_read+0x2a>
		bytes += buf->len;
   21d5a:	8999      	ldrh	r1, [r3, #12]
   21d5c:	440a      	add	r2, r1
		buf = buf->frags;
   21d5e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21d60:	2b00      	cmp	r3, #0
   21d62:	d1fa      	bne.n	21d5a <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21d64:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   21d66:	f107 0b08 	add.w	fp, r7, #8
   21d6a:	4658      	mov	r0, fp
   21d6c:	f000 ffb7 	bl	22cde <net_buf_simple_tailroom>
   21d70:	4284      	cmp	r4, r0
   21d72:	d304      	bcc.n	21d7e <att_chan_read+0x11e>
   21d74:	4658      	mov	r0, fp
   21d76:	f000 ffb2 	bl	22cde <net_buf_simple_tailroom>
   21d7a:	4606      	mov	r6, r0
   21d7c:	e7a3      	b.n	21cc6 <att_chan_read+0x66>
   21d7e:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   21d82:	9b02      	ldr	r3, [sp, #8]
   21d84:	e002      	b.n	21d8c <att_chan_read+0x12c>
		bytes += buf->len;
   21d86:	899a      	ldrh	r2, [r3, #12]
   21d88:	4416      	add	r6, r2
		buf = buf->frags;
   21d8a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21d8c:	2b00      	cmp	r3, #0
   21d8e:	d1fa      	bne.n	21d86 <att_chan_read+0x126>
   21d90:	1b8e      	subs	r6, r1, r6
   21d92:	e798      	b.n	21cc6 <att_chan_read+0x66>
			if (total) {
   21d94:	f1ba 0f00 	cmp.w	sl, #0
   21d98:	f43f af77 	beq.w	21c8a <att_chan_read+0x2a>
				return total;
   21d9c:	4654      	mov	r4, sl
   21d9e:	e774      	b.n	21c8a <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21da0:	4290      	cmp	r0, r2
   21da2:	d906      	bls.n	21db2 <att_chan_read+0x152>
   21da4:	45b3      	cmp	fp, r6
   21da6:	d104      	bne.n	21db2 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21da8:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   21dac:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   21dae:	2200      	movs	r2, #0
	while (buf) {
   21db0:	e779      	b.n	21ca6 <att_chan_read+0x46>
	return total;
   21db2:	4654      	mov	r4, sl
   21db4:	e769      	b.n	21c8a <att_chan_read+0x2a>

00021db6 <read_cb>:
{
   21db6:	b5f0      	push	{r4, r5, r6, r7, lr}
   21db8:	b083      	sub	sp, #12
   21dba:	4606      	mov	r6, r0
   21dbc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   21dbe:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   21dc0:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   21dc2:	2300      	movs	r3, #0
   21dc4:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21dc6:	2215      	movs	r2, #21
   21dc8:	4631      	mov	r1, r6
   21dca:	f000 fd4f 	bl	2286c <bt_gatt_check_perm>
   21dce:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   21dd0:	b118      	cbz	r0, 21dda <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   21dd2:	2500      	movs	r5, #0
}
   21dd4:	4628      	mov	r0, r5
   21dd6:	b003      	add	sp, #12
   21dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21dda:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   21ddc:	2300      	movs	r3, #0
   21dde:	9301      	str	r3, [sp, #4]
   21de0:	9300      	str	r3, [sp, #0]
   21de2:	88a3      	ldrh	r3, [r4, #4]
   21de4:	68a2      	ldr	r2, [r4, #8]
   21de6:	4631      	mov	r1, r6
   21de8:	4638      	mov	r0, r7
   21dea:	f7ff ff39 	bl	21c60 <att_chan_read>
	if (ret < 0) {
   21dee:	2800      	cmp	r0, #0
   21df0:	db01      	blt.n	21df6 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   21df2:	2501      	movs	r5, #1
   21df4:	e7ee      	b.n	21dd4 <read_cb+0x1e>
		data->err = err_to_att(ret);
   21df6:	f7ff fcdb 	bl	217b0 <err_to_att>
   21dfa:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   21dfc:	e7ea      	b.n	21dd4 <read_cb+0x1e>

00021dfe <find_info_cb>:
{
   21dfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21e02:	4606      	mov	r6, r0
   21e04:	460f      	mov	r7, r1
   21e06:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   21e08:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   21e0c:	6893      	ldr	r3, [r2, #8]
   21e0e:	b14b      	cbz	r3, 21e24 <find_info_cb+0x26>
	switch (data->rsp->format) {
   21e10:	68a3      	ldr	r3, [r4, #8]
   21e12:	781d      	ldrb	r5, [r3, #0]
   21e14:	2d01      	cmp	r5, #1
   21e16:	d013      	beq.n	21e40 <find_info_cb+0x42>
   21e18:	2d02      	cmp	r5, #2
   21e1a:	d02d      	beq.n	21e78 <find_info_cb+0x7a>
   21e1c:	2500      	movs	r5, #0
}
   21e1e:	4628      	mov	r0, r5
   21e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   21e24:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   21e26:	2101      	movs	r1, #1
   21e28:	3008      	adds	r0, #8
   21e2a:	f000 ff1b 	bl	22c64 <net_buf_simple_add>
   21e2e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   21e30:	6833      	ldr	r3, [r6, #0]
   21e32:	781b      	ldrb	r3, [r3, #0]
   21e34:	b913      	cbnz	r3, 21e3c <find_info_cb+0x3e>
   21e36:	2301      	movs	r3, #1
   21e38:	7003      	strb	r3, [r0, #0]
   21e3a:	e7e9      	b.n	21e10 <find_info_cb+0x12>
   21e3c:	2302      	movs	r3, #2
   21e3e:	e7fb      	b.n	21e38 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   21e40:	6833      	ldr	r3, [r6, #0]
   21e42:	f893 9000 	ldrb.w	r9, [r3]
   21e46:	f1b9 0f00 	cmp.w	r9, #0
   21e4a:	d001      	beq.n	21e50 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   21e4c:	2500      	movs	r5, #0
   21e4e:	e7e6      	b.n	21e1e <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   21e50:	6860      	ldr	r0, [r4, #4]
   21e52:	2104      	movs	r1, #4
   21e54:	3008      	adds	r0, #8
   21e56:	f000 ff05 	bl	22c64 <net_buf_simple_add>
   21e5a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   21e5c:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   21e5e:	6832      	ldr	r2, [r6, #0]
   21e60:	68e3      	ldr	r3, [r4, #12]
   21e62:	8852      	ldrh	r2, [r2, #2]
   21e64:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   21e66:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   21e6a:	6862      	ldr	r2, [r4, #4]
   21e6c:	8992      	ldrh	r2, [r2, #12]
   21e6e:	1a9b      	subs	r3, r3, r2
   21e70:	2b04      	cmp	r3, #4
   21e72:	d8d4      	bhi.n	21e1e <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   21e74:	464d      	mov	r5, r9
   21e76:	e7d2      	b.n	21e1e <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   21e78:	6833      	ldr	r3, [r6, #0]
   21e7a:	781b      	ldrb	r3, [r3, #0]
   21e7c:	2b02      	cmp	r3, #2
   21e7e:	d001      	beq.n	21e84 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   21e80:	2500      	movs	r5, #0
   21e82:	e7cc      	b.n	21e1e <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   21e84:	6860      	ldr	r0, [r4, #4]
   21e86:	2112      	movs	r1, #18
   21e88:	3008      	adds	r0, #8
   21e8a:	f000 feeb 	bl	22c64 <net_buf_simple_add>
   21e8e:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   21e90:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21e92:	68e2      	ldr	r2, [r4, #12]
   21e94:	6833      	ldr	r3, [r6, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21e96:	f853 5f01 	ldr.w	r5, [r3, #1]!
   21e9a:	6858      	ldr	r0, [r3, #4]
   21e9c:	6899      	ldr	r1, [r3, #8]
   21e9e:	68db      	ldr	r3, [r3, #12]
   21ea0:	f8c2 5002 	str.w	r5, [r2, #2]
   21ea4:	f8c2 0006 	str.w	r0, [r2, #6]
   21ea8:	f8c2 100a 	str.w	r1, [r2, #10]
   21eac:	f8c2 300e 	str.w	r3, [r2, #14]
		if (chan->chan.tx.mtu - data->buf->len >
   21eb0:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   21eb4:	6862      	ldr	r2, [r4, #4]
   21eb6:	8992      	ldrh	r2, [r2, #12]
   21eb8:	1a9b      	subs	r3, r3, r2
   21eba:	2b12      	cmp	r3, #18
   21ebc:	d801      	bhi.n	21ec2 <find_info_cb+0xc4>
	return BT_GATT_ITER_STOP;
   21ebe:	2500      	movs	r5, #0
   21ec0:	e7ad      	b.n	21e1e <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   21ec2:	2501      	movs	r5, #1
   21ec4:	e7ab      	b.n	21e1e <find_info_cb+0x20>

00021ec6 <att_chan_mtu_updated>:
{
   21ec6:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   21ec8:	6806      	ldr	r6, [r0, #0]
	return list->head;
   21eca:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21ecc:	b15c      	cbz	r4, 21ee6 <att_chan_mtu_updated+0x20>
   21ece:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   21ed2:	d00c      	beq.n	21eee <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21ed4:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   21ed8:	d006      	beq.n	21ee8 <att_chan_mtu_updated+0x22>
	return node->next;
   21eda:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   21ede:	b11b      	cbz	r3, 21ee8 <att_chan_mtu_updated+0x22>
   21ee0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   21ee4:	e000      	b.n	21ee8 <att_chan_mtu_updated+0x22>
   21ee6:	4623      	mov	r3, r4
   21ee8:	2200      	movs	r2, #0
   21eea:	4611      	mov	r1, r2
   21eec:	e004      	b.n	21ef8 <att_chan_mtu_updated+0x32>
   21eee:	4623      	mov	r3, r4
   21ef0:	e7fa      	b.n	21ee8 <att_chan_mtu_updated+0x22>
   21ef2:	461d      	mov	r5, r3
   21ef4:	461c      	mov	r4, r3
   21ef6:	462b      	mov	r3, r5
   21ef8:	b1bc      	cbz	r4, 21f2a <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   21efa:	4284      	cmp	r4, r0
   21efc:	d009      	beq.n	21f12 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   21efe:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   21f02:	42a9      	cmp	r1, r5
   21f04:	bf38      	it	cc
   21f06:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   21f08:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   21f0c:	42a2      	cmp	r2, r4
   21f0e:	bf38      	it	cc
   21f10:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21f12:	2b00      	cmp	r3, #0
   21f14:	d0ed      	beq.n	21ef2 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21f16:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   21f1a:	d0eb      	beq.n	21ef4 <att_chan_mtu_updated+0x2e>
	return node->next;
   21f1c:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   21f20:	2d00      	cmp	r5, #0
   21f22:	d0e7      	beq.n	21ef4 <att_chan_mtu_updated+0x2e>
   21f24:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   21f28:	e7e4      	b.n	21ef4 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   21f2a:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   21f2e:	428b      	cmp	r3, r1
   21f30:	d803      	bhi.n	21f3a <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   21f32:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   21f36:	4294      	cmp	r4, r2
   21f38:	d90a      	bls.n	21f50 <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   21f3a:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21f3e:	4282      	cmp	r2, r0
   21f40:	bf38      	it	cc
   21f42:	4602      	movcc	r2, r0
   21f44:	4299      	cmp	r1, r3
   21f46:	bf38      	it	cc
   21f48:	4619      	movcc	r1, r3
   21f4a:	6830      	ldr	r0, [r6, #0]
   21f4c:	f7f6 fe90 	bl	18c70 <bt_gatt_att_max_mtu_changed>
}
   21f50:	bd70      	pop	{r4, r5, r6, pc}

00021f52 <att_get_fixed_chan>:
{
   21f52:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   21f54:	2104      	movs	r1, #4
   21f56:	f7ff fbc1 	bl	216dc <bt_l2cap_le_lookup_tx_cid>
}
   21f5a:	3808      	subs	r0, #8
   21f5c:	bd08      	pop	{r3, pc}

00021f5e <att_write_cmd>:
{
   21f5e:	b530      	push	{r4, r5, lr}
   21f60:	b085      	sub	sp, #20
   21f62:	4605      	mov	r5, r0
   21f64:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   21f66:	f101 0008 	add.w	r0, r1, #8
   21f6a:	f000 feac 	bl	22cc6 <net_buf_simple_pull_le16>
   21f6e:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   21f70:	68a2      	ldr	r2, [r4, #8]
   21f72:	89a1      	ldrh	r1, [r4, #12]
   21f74:	9102      	str	r1, [sp, #8]
   21f76:	9201      	str	r2, [sp, #4]
   21f78:	2100      	movs	r1, #0
   21f7a:	9100      	str	r1, [sp, #0]
   21f7c:	460a      	mov	r2, r1
   21f7e:	4628      	mov	r0, r5
   21f80:	f7f5 fc9e 	bl	178c0 <att_write_rsp>
}
   21f84:	b005      	add	sp, #20
   21f86:	bd30      	pop	{r4, r5, pc}

00021f88 <att_write_req>:
{
   21f88:	b530      	push	{r4, r5, lr}
   21f8a:	b085      	sub	sp, #20
   21f8c:	4605      	mov	r5, r0
   21f8e:	460c      	mov	r4, r1
   21f90:	f101 0008 	add.w	r0, r1, #8
   21f94:	f000 fe97 	bl	22cc6 <net_buf_simple_pull_le16>
   21f98:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   21f9a:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   21f9c:	89a1      	ldrh	r1, [r4, #12]
   21f9e:	9102      	str	r1, [sp, #8]
   21fa0:	9201      	str	r2, [sp, #4]
   21fa2:	2200      	movs	r2, #0
   21fa4:	9200      	str	r2, [sp, #0]
   21fa6:	2213      	movs	r2, #19
   21fa8:	2112      	movs	r1, #18
   21faa:	4628      	mov	r0, r5
   21fac:	f7f5 fc88 	bl	178c0 <att_write_rsp>
}
   21fb0:	b005      	add	sp, #20
   21fb2:	bd30      	pop	{r4, r5, pc}

00021fb4 <att_read_group_req>:
{
   21fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21fb6:	b089      	sub	sp, #36	; 0x24
   21fb8:	4605      	mov	r5, r0
   21fba:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   21fbc:	7b0c      	ldrb	r4, [r1, #12]
   21fbe:	3c04      	subs	r4, #4
   21fc0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   21fc2:	2c02      	cmp	r4, #2
   21fc4:	d001      	beq.n	21fca <att_read_group_req+0x16>
   21fc6:	2c10      	cmp	r4, #16
   21fc8:	d142      	bne.n	22050 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   21fca:	2104      	movs	r1, #4
   21fcc:	3008      	adds	r0, #8
   21fce:	f000 fe6a 	bl	22ca6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   21fd2:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   21fd4:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   21fd6:	4622      	mov	r2, r4
   21fd8:	1d01      	adds	r1, r0, #4
   21fda:	a801      	add	r0, sp, #4
   21fdc:	f7fe ff4c 	bl	20e78 <bt_uuid_create>
   21fe0:	b3c8      	cbz	r0, 22056 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   21fe2:	f10d 0216 	add.w	r2, sp, #22
   21fe6:	4639      	mov	r1, r7
   21fe8:	4630      	mov	r0, r6
   21fea:	f7ff fbd2 	bl	21792 <range_is_valid>
   21fee:	b1f0      	cbz	r0, 2202e <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   21ff0:	2300      	movs	r3, #0
   21ff2:	f88d 3018 	strb.w	r3, [sp, #24]
   21ff6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   21ffa:	f8ad 301a 	strh.w	r3, [sp, #26]
   21ffe:	a906      	add	r1, sp, #24
   22000:	a801      	add	r0, sp, #4
   22002:	f7fe ff1b 	bl	20e3c <bt_uuid_cmp>
   22006:	b158      	cbz	r0, 22020 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   22008:	2300      	movs	r3, #0
   2200a:	f88d 301c 	strb.w	r3, [sp, #28]
   2200e:	f642 0301 	movw	r3, #10241	; 0x2801
   22012:	f8ad 301e 	strh.w	r3, [sp, #30]
   22016:	a907      	add	r1, sp, #28
   22018:	a801      	add	r0, sp, #4
   2201a:	f7fe ff0f 	bl	20e3c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2201e:	b978      	cbnz	r0, 22040 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   22020:	463b      	mov	r3, r7
   22022:	4632      	mov	r2, r6
   22024:	a901      	add	r1, sp, #4
   22026:	4628      	mov	r0, r5
   22028:	f7f5 fd02 	bl	17a30 <att_read_group_rsp>
   2202c:	e011      	b.n	22052 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2202e:	2301      	movs	r3, #1
   22030:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22034:	2110      	movs	r1, #16
   22036:	4628      	mov	r0, r5
   22038:	f7f5 fb4c 	bl	176d4 <send_err_rsp>
		return 0;
   2203c:	2000      	movs	r0, #0
   2203e:	e008      	b.n	22052 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   22040:	2310      	movs	r3, #16
   22042:	4632      	mov	r2, r6
   22044:	4619      	mov	r1, r3
   22046:	4628      	mov	r0, r5
   22048:	f7f5 fb44 	bl	176d4 <send_err_rsp>
		return 0;
   2204c:	2000      	movs	r0, #0
   2204e:	e000      	b.n	22052 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   22050:	2004      	movs	r0, #4
}
   22052:	b009      	add	sp, #36	; 0x24
   22054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   22056:	200e      	movs	r0, #14
   22058:	e7fb      	b.n	22052 <att_read_group_req+0x9e>

0002205a <att_read_blob_req>:
{
   2205a:	b500      	push	{lr}
   2205c:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2205e:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   22060:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   22062:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   22064:	9200      	str	r2, [sp, #0]
   22066:	220d      	movs	r2, #13
   22068:	210c      	movs	r1, #12
   2206a:	f7f5 fd73 	bl	17b54 <att_read_rsp>
}
   2206e:	b003      	add	sp, #12
   22070:	f85d fb04 	ldr.w	pc, [sp], #4

00022074 <att_read_req>:
{
   22074:	b500      	push	{lr}
   22076:	b083      	sub	sp, #12
	req = (void *)buf->data;
   22078:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2207a:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2207c:	2200      	movs	r2, #0
   2207e:	9200      	str	r2, [sp, #0]
   22080:	220b      	movs	r2, #11
   22082:	210a      	movs	r1, #10
   22084:	f7f5 fd66 	bl	17b54 <att_read_rsp>
}
   22088:	b003      	add	sp, #12
   2208a:	f85d fb04 	ldr.w	pc, [sp], #4

0002208e <att_read_type_req>:
{
   2208e:	b5f0      	push	{r4, r5, r6, r7, lr}
   22090:	b087      	sub	sp, #28
   22092:	4605      	mov	r5, r0
   22094:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   22096:	7b0c      	ldrb	r4, [r1, #12]
   22098:	3c04      	subs	r4, #4
   2209a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2209c:	2c02      	cmp	r4, #2
   2209e:	d001      	beq.n	220a4 <att_read_type_req+0x16>
   220a0:	2c10      	cmp	r4, #16
   220a2:	d123      	bne.n	220ec <att_read_type_req+0x5e>
   220a4:	2104      	movs	r1, #4
   220a6:	3008      	adds	r0, #8
   220a8:	f000 fdfd 	bl	22ca6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   220ac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   220ae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   220b0:	4622      	mov	r2, r4
   220b2:	1d01      	adds	r1, r0, #4
   220b4:	a801      	add	r0, sp, #4
   220b6:	f7fe fedf 	bl	20e78 <bt_uuid_create>
   220ba:	b1c8      	cbz	r0, 220f0 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   220bc:	f10d 0216 	add.w	r2, sp, #22
   220c0:	4639      	mov	r1, r7
   220c2:	4630      	mov	r0, r6
   220c4:	f7ff fb65 	bl	21792 <range_is_valid>
   220c8:	b138      	cbz	r0, 220da <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   220ca:	463b      	mov	r3, r7
   220cc:	4632      	mov	r2, r6
   220ce:	a901      	add	r1, sp, #4
   220d0:	4628      	mov	r0, r5
   220d2:	f7f5 fd8f 	bl	17bf4 <att_read_type_rsp>
}
   220d6:	b007      	add	sp, #28
   220d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   220da:	2301      	movs	r3, #1
   220dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   220e0:	2108      	movs	r1, #8
   220e2:	4628      	mov	r0, r5
   220e4:	f7f5 faf6 	bl	176d4 <send_err_rsp>
		return 0;
   220e8:	2000      	movs	r0, #0
   220ea:	e7f4      	b.n	220d6 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   220ec:	2004      	movs	r0, #4
   220ee:	e7f2      	b.n	220d6 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   220f0:	200e      	movs	r0, #14
   220f2:	e7f0      	b.n	220d6 <att_read_type_req+0x48>

000220f4 <att_find_type_req>:
{
   220f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   220f8:	b087      	sub	sp, #28
   220fa:	4607      	mov	r7, r0
   220fc:	460c      	mov	r4, r1
   220fe:	2106      	movs	r1, #6
   22100:	f104 0008 	add.w	r0, r4, #8
   22104:	f000 fdcf 	bl	22ca6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   22108:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2210a:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2210c:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   22110:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   22114:	f10d 020e 	add.w	r2, sp, #14
   22118:	4631      	mov	r1, r6
   2211a:	4628      	mov	r0, r5
   2211c:	f7ff fb39 	bl	21792 <range_is_valid>
   22120:	b1d0      	cbz	r0, 22158 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   22122:	2300      	movs	r3, #0
   22124:	f88d 3010 	strb.w	r3, [sp, #16]
   22128:	f8ad 8012 	strh.w	r8, [sp, #18]
   2212c:	f88d 3014 	strb.w	r3, [sp, #20]
   22130:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   22134:	f8ad 3016 	strh.w	r3, [sp, #22]
   22138:	a905      	add	r1, sp, #20
   2213a:	a804      	add	r0, sp, #16
   2213c:	f7fe fe7e 	bl	20e3c <bt_uuid_cmp>
   22140:	b998      	cbnz	r0, 2216a <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   22142:	7b23      	ldrb	r3, [r4, #12]
   22144:	9300      	str	r3, [sp, #0]
   22146:	464b      	mov	r3, r9
   22148:	4632      	mov	r2, r6
   2214a:	4629      	mov	r1, r5
   2214c:	4638      	mov	r0, r7
   2214e:	f7f5 fd9b 	bl	17c88 <att_find_type_rsp>
}
   22152:	b007      	add	sp, #28
   22154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   22158:	2301      	movs	r3, #1
   2215a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2215e:	2106      	movs	r1, #6
   22160:	4638      	mov	r0, r7
   22162:	f7f5 fab7 	bl	176d4 <send_err_rsp>
		return 0;
   22166:	2000      	movs	r0, #0
   22168:	e7f3      	b.n	22152 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   2216a:	230a      	movs	r3, #10
   2216c:	462a      	mov	r2, r5
   2216e:	2106      	movs	r1, #6
   22170:	4638      	mov	r0, r7
   22172:	f7f5 faaf 	bl	176d4 <send_err_rsp>
		return 0;
   22176:	2000      	movs	r0, #0
   22178:	e7eb      	b.n	22152 <att_find_type_req+0x5e>

0002217a <att_find_info_req>:
{
   2217a:	b570      	push	{r4, r5, r6, lr}
   2217c:	b082      	sub	sp, #8
   2217e:	4604      	mov	r4, r0
	req = (void *)buf->data;
   22180:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   22182:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   22184:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   22186:	f10d 0206 	add.w	r2, sp, #6
   2218a:	4631      	mov	r1, r6
   2218c:	4628      	mov	r0, r5
   2218e:	f7ff fb00 	bl	21792 <range_is_valid>
   22192:	b130      	cbz	r0, 221a2 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   22194:	4632      	mov	r2, r6
   22196:	4629      	mov	r1, r5
   22198:	4620      	mov	r0, r4
   2219a:	f7f5 fdb9 	bl	17d10 <att_find_info_rsp>
}
   2219e:	b002      	add	sp, #8
   221a0:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   221a2:	2301      	movs	r3, #1
   221a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   221a8:	2104      	movs	r1, #4
   221aa:	4620      	mov	r0, r4
   221ac:	f7f5 fa92 	bl	176d4 <send_err_rsp>
		return 0;
   221b0:	2000      	movs	r0, #0
   221b2:	e7f4      	b.n	2219e <att_find_info_req+0x24>

000221b4 <bt_att_init>:
{
   221b4:	b508      	push	{r3, lr}
	bt_gatt_init();
   221b6:	f7f6 f943 	bl	18440 <bt_gatt_init>
}
   221ba:	bd08      	pop	{r3, pc}

000221bc <att_confirm>:
{
   221bc:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   221be:	2300      	movs	r3, #0
   221c0:	898a      	ldrh	r2, [r1, #12]
   221c2:	6889      	ldr	r1, [r1, #8]
   221c4:	f7f5 fe42 	bl	17e4c <att_handle_rsp>
}
   221c8:	bd08      	pop	{r3, pc}

000221ca <att_chan_detach>:
{
   221ca:	b510      	push	{r4, lr}
   221cc:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   221ce:	6800      	ldr	r0, [r0, #0]
   221d0:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   221d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   221d6:	2100      	movs	r1, #0
   221d8:	b1e3      	cbz	r3, 22214 <att_chan_detach+0x4a>
   221da:	4293      	cmp	r3, r2
   221dc:	d002      	beq.n	221e4 <att_chan_detach+0x1a>
   221de:	4619      	mov	r1, r3
   221e0:	681b      	ldr	r3, [r3, #0]
   221e2:	e7f9      	b.n	221d8 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   221e4:	b149      	cbz	r1, 221fa <att_chan_detach+0x30>
	return node->next;
   221e6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   221ea:	600b      	str	r3, [r1, #0]
	return list->tail;
   221ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   221ee:	4293      	cmp	r3, r2
   221f0:	d00b      	beq.n	2220a <att_chan_detach+0x40>
	parent->next = child;
   221f2:	2300      	movs	r3, #0
   221f4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   221f8:	e00c      	b.n	22214 <att_chan_detach+0x4a>
	return node->next;
   221fa:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   221fe:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   22200:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   22202:	4291      	cmp	r1, r2
   22204:	d1f5      	bne.n	221f2 <att_chan_detach+0x28>
	list->tail = node;
   22206:	6283      	str	r3, [r0, #40]	; 0x28
}
   22208:	e7f3      	b.n	221f2 <att_chan_detach+0x28>
	list->tail = node;
   2220a:	6281      	str	r1, [r0, #40]	; 0x28
}
   2220c:	e7f1      	b.n	221f2 <att_chan_detach+0x28>
		net_buf_unref(buf);
   2220e:	4618      	mov	r0, r3
   22210:	f000 fcde 	bl	22bd0 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   22214:	2200      	movs	r2, #0
   22216:	2300      	movs	r3, #0
   22218:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   2221c:	f000 fcac 	bl	22b78 <net_buf_get>
   22220:	4603      	mov	r3, r0
   22222:	2800      	cmp	r0, #0
   22224:	d1f3      	bne.n	2220e <att_chan_detach+0x44>
	if (chan->req) {
   22226:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   2222a:	b12b      	cbz	r3, 22238 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2222c:	230e      	movs	r3, #14
   2222e:	2200      	movs	r2, #0
   22230:	4611      	mov	r1, r2
   22232:	4620      	mov	r0, r4
   22234:	f7f5 fe0a 	bl	17e4c <att_handle_rsp>
	chan->att = NULL;
   22238:	2300      	movs	r3, #0
   2223a:	6023      	str	r3, [r4, #0]
}
   2223c:	bd10      	pop	{r4, pc}

0002223e <bt_att_disconnected>:
{
   2223e:	b538      	push	{r3, r4, r5, lr}
   22240:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   22242:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   22246:	b125      	cbz	r5, 22252 <bt_att_disconnected+0x14>
   22248:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   2224a:	f7ff ffbe 	bl	221ca <att_chan_detach>
	return list->head;
   2224e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   22250:	b103      	cbz	r3, 22254 <bt_att_disconnected+0x16>
}
   22252:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   22254:	4628      	mov	r0, r5
   22256:	f7f5 fe45 	bl	17ee4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   2225a:	6820      	ldr	r0, [r4, #0]
   2225c:	f7f6 fd54 	bl	18d08 <bt_gatt_disconnected>
   22260:	e7f7      	b.n	22252 <bt_att_disconnected+0x14>

00022262 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   22262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22266:	b082      	sub	sp, #8
   22268:	4607      	mov	r7, r0
   2226a:	460d      	mov	r5, r1
   2226c:	4614      	mov	r4, r2
   2226e:	461e      	mov	r6, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   22270:	f7f4 fec4 	bl	16ffc <att_get>
	if (!att) {
   22274:	b158      	cbz	r0, 2228e <bt_att_send+0x2c>
   22276:	4680      	mov	r8, r0
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   22278:	b17c      	cbz	r4, 2229a <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2227a:	9600      	str	r6, [sp, #0]
   2227c:	4623      	mov	r3, r4
   2227e:	462a      	mov	r2, r5
   22280:	2104      	movs	r1, #4
   22282:	4638      	mov	r0, r7
   22284:	f7ff f9e8 	bl	21658 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   22288:	b002      	add	sp, #8
   2228a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2228e:	4628      	mov	r0, r5
   22290:	f000 fc9e 	bl	22bd0 <net_buf_unref>
		return -ENOTCONN;
   22294:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22298:	e7f6      	b.n	22288 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   2229a:	4629      	mov	r1, r5
   2229c:	300c      	adds	r0, #12
   2229e:	f000 fc8a 	bl	22bb6 <net_buf_put>
	att_send_process(att);
   222a2:	4640      	mov	r0, r8
   222a4:	f7ff fc64 	bl	21b70 <att_send_process>
	return 0;
   222a8:	2000      	movs	r0, #0
   222aa:	e7ed      	b.n	22288 <bt_att_send+0x26>

000222ac <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   222ac:	b510      	push	{r4, lr}
   222ae:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   222b0:	f7f4 fea4 	bl	16ffc <att_get>
	if (!att) {
   222b4:	b170      	cbz	r0, 222d4 <bt_att_req_send+0x28>
   222b6:	4603      	mov	r3, r0
	parent->next = child;
   222b8:	2200      	movs	r2, #0
   222ba:	6022      	str	r2, [r4, #0]
	return list->tail;
   222bc:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   222be:	b132      	cbz	r2, 222ce <bt_att_req_send+0x22>
	parent->next = child;
   222c0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   222c2:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   222c4:	4618      	mov	r0, r3
   222c6:	f7ff fb8a 	bl	219de <att_req_send_process>

	return 0;
   222ca:	2000      	movs	r0, #0
}
   222cc:	bd10      	pop	{r4, pc}
   222ce:	6084      	str	r4, [r0, #8]
	list->head = node;
   222d0:	6044      	str	r4, [r0, #4]
}
   222d2:	e7f7      	b.n	222c4 <bt_att_req_send+0x18>
		return -ENOTCONN;
   222d4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   222d8:	e7f8      	b.n	222cc <bt_att_req_send+0x20>

000222da <update_range>:
{
   222da:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   222dc:	8804      	ldrh	r4, [r0, #0]
   222de:	42a2      	cmp	r2, r4
   222e0:	d302      	bcc.n	222e8 <update_range+0xe>
   222e2:	880d      	ldrh	r5, [r1, #0]
   222e4:	42ab      	cmp	r3, r5
   222e6:	d908      	bls.n	222fa <update_range+0x20>
	if (*start > new_start) {
   222e8:	42a2      	cmp	r2, r4
   222ea:	d200      	bcs.n	222ee <update_range+0x14>
		*start = new_start;
   222ec:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   222ee:	880a      	ldrh	r2, [r1, #0]
   222f0:	4293      	cmp	r3, r2
   222f2:	d904      	bls.n	222fe <update_range+0x24>
		*end = new_end;
   222f4:	800b      	strh	r3, [r1, #0]
	return true;
   222f6:	2001      	movs	r0, #1
   222f8:	e002      	b.n	22300 <update_range+0x26>
		return false;
   222fa:	2000      	movs	r0, #0
   222fc:	e000      	b.n	22300 <update_range+0x26>
	return true;
   222fe:	2001      	movs	r0, #1
}
   22300:	bc30      	pop	{r4, r5}
   22302:	4770      	bx	lr

00022304 <cf_set_value>:
{
   22304:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   22306:	2300      	movs	r3, #0
   22308:	e001      	b.n	2230e <cf_set_value+0xa>
   2230a:	3301      	adds	r3, #1
   2230c:	b29b      	uxth	r3, r3
   2230e:	2b02      	cmp	r3, #2
   22310:	d824      	bhi.n	2235c <cf_set_value+0x58>
   22312:	08dd      	lsrs	r5, r3, #3
   22314:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   22318:	d90f      	bls.n	2233a <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2231a:	1944      	adds	r4, r0, r5
   2231c:	7a24      	ldrb	r4, [r4, #8]
   2231e:	f003 0607 	and.w	r6, r3, #7
   22322:	40f4      	lsrs	r4, r6
   22324:	f014 0f01 	tst.w	r4, #1
   22328:	d0ef      	beq.n	2230a <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   2232a:	5d4c      	ldrb	r4, [r1, r5]
   2232c:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   22330:	f016 0f01 	tst.w	r6, #1
   22334:	d1e9      	bne.n	2230a <cf_set_value+0x6>
			return false;
   22336:	2000      	movs	r0, #0
   22338:	e013      	b.n	22362 <cf_set_value+0x5e>
   2233a:	2300      	movs	r3, #0
   2233c:	e008      	b.n	22350 <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2233e:	5ccc      	ldrb	r4, [r1, r3]
   22340:	f004 0407 	and.w	r4, r4, #7
   22344:	18c5      	adds	r5, r0, r3
   22346:	7a2e      	ldrb	r6, [r5, #8]
   22348:	4334      	orrs	r4, r6
   2234a:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2234c:	3301      	adds	r3, #1
   2234e:	b29b      	uxth	r3, r3
   22350:	4293      	cmp	r3, r2
   22352:	d205      	bcs.n	22360 <cf_set_value+0x5c>
   22354:	2b00      	cmp	r3, #0
   22356:	d0f2      	beq.n	2233e <cf_set_value+0x3a>
	return true;
   22358:	2001      	movs	r0, #1
   2235a:	e002      	b.n	22362 <cf_set_value+0x5e>
   2235c:	2300      	movs	r3, #0
   2235e:	e7f7      	b.n	22350 <cf_set_value+0x4c>
   22360:	2001      	movs	r0, #1
}
   22362:	bc70      	pop	{r4, r5, r6}
   22364:	4770      	bx	lr

00022366 <gatt_ccc_changed>:
{
   22366:	b510      	push	{r4, lr}
   22368:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   2236a:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2236c:	460b      	mov	r3, r1
   2236e:	2b00      	cmp	r3, #0
   22370:	dd07      	ble.n	22382 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   22372:	8953      	ldrh	r3, [r2, #10]
   22374:	4299      	cmp	r1, r3
   22376:	d003      	beq.n	22380 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   22378:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   2237a:	68d3      	ldr	r3, [r2, #12]
   2237c:	b103      	cbz	r3, 22380 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2237e:	4798      	blx	r3
}
   22380:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   22382:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   22386:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   2238a:	8924      	ldrh	r4, [r4, #8]
   2238c:	428c      	cmp	r4, r1
   2238e:	d900      	bls.n	22392 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   22390:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22392:	3301      	adds	r3, #1
   22394:	e7eb      	b.n	2236e <gatt_ccc_changed+0x8>

00022396 <gatt_indicate_rsp>:
{
   22396:	b510      	push	{r4, lr}
   22398:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2239a:	68a3      	ldr	r3, [r4, #8]
   2239c:	b113      	cbz	r3, 223a4 <gatt_indicate_rsp+0xe>
   2239e:	460a      	mov	r2, r1
		params->func(conn, params, err);
   223a0:	4621      	mov	r1, r4
   223a2:	4798      	blx	r3
	params->_ref--;
   223a4:	7da3      	ldrb	r3, [r4, #22]
   223a6:	3b01      	subs	r3, #1
   223a8:	b2db      	uxtb	r3, r3
   223aa:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   223ac:	68e2      	ldr	r2, [r4, #12]
   223ae:	b112      	cbz	r2, 223b6 <gatt_indicate_rsp+0x20>
   223b0:	b90b      	cbnz	r3, 223b6 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   223b2:	4620      	mov	r0, r4
   223b4:	4790      	blx	r2
}
   223b6:	bd10      	pop	{r4, pc}

000223b8 <match_uuid>:
	data->attr = attr;
   223b8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   223ba:	8091      	strh	r1, [r2, #4]
}
   223bc:	2000      	movs	r0, #0
   223be:	4770      	bx	lr

000223c0 <gen_hash_m>:
{
   223c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   223c2:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   223c4:	6806      	ldr	r6, [r0, #0]
   223c6:	7835      	ldrb	r5, [r6, #0]
   223c8:	2d00      	cmp	r5, #0
   223ca:	d161      	bne.n	22490 <gen_hash_m+0xd0>
   223cc:	4607      	mov	r7, r0
   223ce:	4614      	mov	r4, r2
	switch (u16->val) {
   223d0:	8873      	ldrh	r3, [r6, #2]
   223d2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   223d6:	d019      	beq.n	2240c <gen_hash_m+0x4c>
   223d8:	d913      	bls.n	22402 <gen_hash_m+0x42>
   223da:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   223de:	33ff      	adds	r3, #255	; 0xff
   223e0:	b29b      	uxth	r3, r3
   223e2:	2b04      	cmp	r3, #4
   223e4:	d85a      	bhi.n	2249c <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   223e6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   223ea:	2202      	movs	r2, #2
   223ec:	f10d 010e 	add.w	r1, sp, #14
   223f0:	4620      	mov	r0, r4
   223f2:	f7fe fbca 	bl	20b8a <tc_cmac_update>
   223f6:	2800      	cmp	r0, #0
   223f8:	d13a      	bne.n	22470 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   223fa:	f06f 0315 	mvn.w	r3, #21
   223fe:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22400:	e047      	b.n	22492 <gen_hash_m+0xd2>
	switch (u16->val) {
   22402:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   22406:	b29b      	uxth	r3, r3
   22408:	2b03      	cmp	r3, #3
   2240a:	d845      	bhi.n	22498 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   2240c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22410:	2202      	movs	r2, #2
   22412:	f10d 010e 	add.w	r1, sp, #14
   22416:	4620      	mov	r0, r4
   22418:	f7fe fbb7 	bl	20b8a <tc_cmac_update>
   2241c:	b918      	cbnz	r0, 22426 <gen_hash_m+0x66>
			state->err = -EINVAL;
   2241e:	f06f 0315 	mvn.w	r3, #21
   22422:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22424:	e035      	b.n	22492 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   22426:	8873      	ldrh	r3, [r6, #2]
   22428:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2242c:	2202      	movs	r2, #2
   2242e:	f10d 010e 	add.w	r1, sp, #14
   22432:	4620      	mov	r0, r4
   22434:	f7fe fba9 	bl	20b8a <tc_cmac_update>
   22438:	b180      	cbz	r0, 2245c <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2243a:	687e      	ldr	r6, [r7, #4]
   2243c:	2000      	movs	r0, #0
   2243e:	9000      	str	r0, [sp, #0]
   22440:	2310      	movs	r3, #16
   22442:	eb0d 0203 	add.w	r2, sp, r3
   22446:	4639      	mov	r1, r7
   22448:	47b0      	blx	r6
		if (len < 0) {
   2244a:	1e02      	subs	r2, r0, #0
   2244c:	db0a      	blt.n	22464 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   2244e:	a904      	add	r1, sp, #16
   22450:	4620      	mov	r0, r4
   22452:	f7fe fb9a 	bl	20b8a <tc_cmac_update>
   22456:	b138      	cbz	r0, 22468 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   22458:	2501      	movs	r5, #1
   2245a:	e01a      	b.n	22492 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2245c:	f06f 0315 	mvn.w	r3, #21
   22460:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22462:	e016      	b.n	22492 <gen_hash_m+0xd2>
			state->err = len;
   22464:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22466:	e014      	b.n	22492 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   22468:	f06f 0315 	mvn.w	r3, #21
   2246c:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2246e:	e010      	b.n	22492 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   22470:	8873      	ldrh	r3, [r6, #2]
   22472:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22476:	2202      	movs	r2, #2
   22478:	f10d 010e 	add.w	r1, sp, #14
   2247c:	4620      	mov	r0, r4
   2247e:	f7fe fb84 	bl	20b8a <tc_cmac_update>
   22482:	b108      	cbz	r0, 22488 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   22484:	2501      	movs	r5, #1
   22486:	e004      	b.n	22492 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   22488:	f06f 0315 	mvn.w	r3, #21
   2248c:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2248e:	e000      	b.n	22492 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   22490:	2501      	movs	r5, #1
}
   22492:	4628      	mov	r0, r5
   22494:	b009      	add	sp, #36	; 0x24
   22496:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   22498:	2501      	movs	r5, #1
   2249a:	e7fa      	b.n	22492 <gen_hash_m+0xd2>
   2249c:	2501      	movs	r5, #1
   2249e:	e7f8      	b.n	22492 <gen_hash_m+0xd2>

000224a0 <find_ccc_cfg>:
{
   224a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   224a2:	b083      	sub	sp, #12
   224a4:	4607      	mov	r7, r0
   224a6:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   224a8:	2400      	movs	r4, #0
   224aa:	b11c      	cbz	r4, 224b4 <find_ccc_cfg+0x14>
	return NULL;
   224ac:	2600      	movs	r6, #0
}
   224ae:	4630      	mov	r0, r6
   224b0:	b003      	add	sp, #12
   224b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   224b4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   224b8:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   224bc:	b167      	cbz	r7, 224d8 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   224be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   224c2:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   224c4:	3201      	adds	r2, #1
   224c6:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   224ca:	4638      	mov	r0, r7
   224cc:	f7ff f818 	bl	21500 <bt_conn_is_peer_addr_le>
   224d0:	2800      	cmp	r0, #0
   224d2:	d1ec      	bne.n	224ae <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   224d4:	3401      	adds	r4, #1
   224d6:	e7e8      	b.n	224aa <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   224d8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   224dc:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   224e0:	2300      	movs	r3, #0
   224e2:	9300      	str	r3, [sp, #0]
   224e4:	f8cd 3003 	str.w	r3, [sp, #3]
   224e8:	2207      	movs	r2, #7
   224ea:	4669      	mov	r1, sp
   224ec:	3001      	adds	r0, #1
   224ee:	f002 f9f5 	bl	248dc <memcmp>
   224f2:	2800      	cmp	r0, #0
   224f4:	d1ee      	bne.n	224d4 <find_ccc_cfg+0x34>
   224f6:	e7da      	b.n	224ae <find_ccc_cfg+0xe>

000224f8 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   224f8:	2300      	movs	r3, #0
   224fa:	6003      	str	r3, [r0, #0]
   224fc:	6043      	str	r3, [r0, #4]
   224fe:	6083      	str	r3, [r0, #8]
}
   22500:	4770      	bx	lr

00022502 <bt_gatt_clear_sc>:
{
   22502:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   22504:	f7f5 fd8e 	bl	18024 <find_sc_cfg>
	if (!cfg) {
   22508:	b108      	cbz	r0, 2250e <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2250a:	f7ff fff5 	bl	224f8 <clear_sc_cfg>
}
   2250e:	2000      	movs	r0, #0
   22510:	bd08      	pop	{r3, pc}

00022512 <sc_reset>:
   22512:	2300      	movs	r3, #0
   22514:	6083      	str	r3, [r0, #8]
}
   22516:	4770      	bx	lr

00022518 <sc_restore_rsp>:
{
   22518:	b538      	push	{r3, r4, r5, lr}
   2251a:	4605      	mov	r5, r0
   2251c:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   2251e:	f7f5 fd57 	bl	17fd0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   22522:	b188      	cbz	r0, 22548 <sc_restore_rsp+0x30>
   22524:	4603      	mov	r3, r0
   22526:	7a02      	ldrb	r2, [r0, #8]
   22528:	f012 0f01 	tst.w	r2, #1
   2252c:	d00c      	beq.n	22548 <sc_restore_rsp+0x30>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2252e:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22530:	f3bf 8f5b 	dmb	ish
   22534:	e853 2f00 	ldrex	r2, [r3]
   22538:	f042 0201 	orr.w	r2, r2, #1
   2253c:	e843 2100 	strex	r1, r2, [r3]
   22540:	2900      	cmp	r1, #0
   22542:	d1f7      	bne.n	22534 <sc_restore_rsp+0x1c>
   22544:	f3bf 8f5b 	dmb	ish
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   22548:	b104      	cbz	r4, 2254c <sc_restore_rsp+0x34>
}
   2254a:	bd38      	pop	{r3, r4, r5, pc}
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2254c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   22550:	7a28      	ldrb	r0, [r5, #8]
   22552:	f7f5 fd67 	bl	18024 <find_sc_cfg>
		if (sc_cfg) {
   22556:	2800      	cmp	r0, #0
   22558:	d0f7      	beq.n	2254a <sc_restore_rsp+0x32>
			sc_reset(sc_cfg);
   2255a:	f7ff ffda 	bl	22512 <sc_reset>
}
   2255e:	e7f4      	b.n	2254a <sc_restore_rsp+0x32>

00022560 <gatt_foreach_iter>:
	if (handle > end_handle) {
   22560:	4299      	cmp	r1, r3
   22562:	d822      	bhi.n	225aa <gatt_foreach_iter+0x4a>
{
   22564:	b538      	push	{r3, r4, r5, lr}
   22566:	4605      	mov	r5, r0
   22568:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2256a:	4291      	cmp	r1, r2
   2256c:	d31f      	bcc.n	225ae <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2256e:	9b04      	ldr	r3, [sp, #16]
   22570:	b123      	cbz	r3, 2257c <gatt_foreach_iter+0x1c>
   22572:	6801      	ldr	r1, [r0, #0]
   22574:	4618      	mov	r0, r3
   22576:	f7fe fc61 	bl	20e3c <bt_uuid_cmp>
   2257a:	b9d0      	cbnz	r0, 225b2 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2257c:	9b05      	ldr	r3, [sp, #20]
   2257e:	b12b      	cbz	r3, 2258c <gatt_foreach_iter+0x2c>
   22580:	68eb      	ldr	r3, [r5, #12]
   22582:	9a05      	ldr	r2, [sp, #20]
   22584:	4293      	cmp	r3, r2
   22586:	d001      	beq.n	2258c <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   22588:	2001      	movs	r0, #1
   2258a:	e011      	b.n	225b0 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2258c:	9b06      	ldr	r3, [sp, #24]
   2258e:	881b      	ldrh	r3, [r3, #0]
   22590:	3b01      	subs	r3, #1
   22592:	9a06      	ldr	r2, [sp, #24]
   22594:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   22596:	9a08      	ldr	r2, [sp, #32]
   22598:	4621      	mov	r1, r4
   2259a:	4628      	mov	r0, r5
   2259c:	9b07      	ldr	r3, [sp, #28]
   2259e:	4798      	blx	r3
	if (!*num_matches) {
   225a0:	9b06      	ldr	r3, [sp, #24]
   225a2:	881b      	ldrh	r3, [r3, #0]
   225a4:	b923      	cbnz	r3, 225b0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   225a6:	2000      	movs	r0, #0
   225a8:	e002      	b.n	225b0 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   225aa:	2000      	movs	r0, #0
}
   225ac:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   225ae:	2001      	movs	r0, #1
}
   225b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   225b2:	2001      	movs	r0, #1
   225b4:	e7fc      	b.n	225b0 <gatt_foreach_iter+0x50>

000225b6 <gatt_req_alloc>:
{
   225b6:	b538      	push	{r3, r4, r5, lr}
   225b8:	4605      	mov	r5, r0
   225ba:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   225bc:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   225c0:	2100      	movs	r1, #0
   225c2:	f7f5 fc15 	bl	17df0 <bt_att_req_alloc>
	if (!req) {
   225c6:	4603      	mov	r3, r0
   225c8:	b108      	cbz	r0, 225ce <gatt_req_alloc+0x18>
	req->func = func;
   225ca:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   225cc:	60c4      	str	r4, [r0, #12]
}
   225ce:	4618      	mov	r0, r3
   225d0:	bd38      	pop	{r3, r4, r5, pc}

000225d2 <clear_ccc_cfg>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   225d2:	2300      	movs	r3, #0
   225d4:	f8c0 3001 	str.w	r3, [r0, #1]
   225d8:	6043      	str	r3, [r0, #4]
	cfg->id = 0U;
   225da:	7003      	strb	r3, [r0, #0]
	cfg->value = 0U;
   225dc:	8103      	strh	r3, [r0, #8]
}
   225de:	4770      	bx	lr

000225e0 <clear_cf_cfg>:
{
   225e0:	b082      	sub	sp, #8
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   225e2:	2300      	movs	r3, #0
   225e4:	9300      	str	r3, [sp, #0]
   225e6:	f8cd 3003 	str.w	r3, [sp, #3]
   225ea:	f8c0 3001 	str.w	r3, [r0, #1]
   225ee:	6043      	str	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   225f0:	7203      	strb	r3, [r0, #8]
	atomic_set(cfg->flags, 0);
   225f2:	300c      	adds	r0, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   225f4:	f3bf 8f5b 	dmb	ish
   225f8:	e850 2f00 	ldrex	r2, [r0]
   225fc:	e840 3100 	strex	r1, r3, [r0]
   22600:	2900      	cmp	r1, #0
   22602:	d1f9      	bne.n	225f8 <clear_cf_cfg+0x18>
   22604:	f3bf 8f5b 	dmb	ish
}
   22608:	b002      	add	sp, #8
   2260a:	4770      	bx	lr

0002260c <remove_cf_cfg>:
{
   2260c:	b570      	push	{r4, r5, r6, lr}
   2260e:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   22610:	f7f5 fcde 	bl	17fd0 <find_cf_cfg>
	if (!cfg) {
   22614:	b300      	cbz	r0, 22658 <remove_cf_cfg+0x4c>
   22616:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22618:	f104 0688 	add.w	r6, r4, #136	; 0x88
   2261c:	4631      	mov	r1, r6
   2261e:	7a20      	ldrb	r0, [r4, #8]
   22620:	f7fe fdb4 	bl	2118c <bt_addr_le_is_bonded>
   22624:	b918      	cbnz	r0, 2262e <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   22626:	4628      	mov	r0, r5
   22628:	f7ff ffda 	bl	225e0 <clear_cf_cfg>
   2262c:	e014      	b.n	22658 <remove_cf_cfg+0x4c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2262e:	6833      	ldr	r3, [r6, #0]
   22630:	f8c5 3001 	str.w	r3, [r5, #1]
   22634:	88b2      	ldrh	r2, [r6, #4]
   22636:	79b3      	ldrb	r3, [r6, #6]
   22638:	f8a5 2005 	strh.w	r2, [r5, #5]
   2263c:	71eb      	strb	r3, [r5, #7]
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   2263e:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22640:	f3bf 8f5b 	dmb	ish
   22644:	e855 3f00 	ldrex	r3, [r5]
   22648:	f023 0302 	bic.w	r3, r3, #2
   2264c:	e845 3200 	strex	r2, r3, [r5]
   22650:	2a00      	cmp	r2, #0
   22652:	d1f7      	bne.n	22644 <remove_cf_cfg+0x38>
   22654:	f3bf 8f5b 	dmb	ish
}
   22658:	bd70      	pop	{r4, r5, r6, pc}

0002265a <sc_ccc_cfg_write>:
{
   2265a:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2265c:	2a02      	cmp	r2, #2
   2265e:	d003      	beq.n	22668 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   22660:	f7f5 fd04 	bl	1806c <sc_clear>
}
   22664:	2002      	movs	r0, #2
   22666:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   22668:	2300      	movs	r3, #0
   2266a:	461a      	mov	r2, r3
   2266c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22670:	7a00      	ldrb	r0, [r0, #8]
   22672:	f7f5 fe29 	bl	182c8 <sc_save>
   22676:	e7f5      	b.n	22664 <sc_ccc_cfg_write+0xa>

00022678 <bt_gatt_attr_read>:
{
   22678:	b510      	push	{r4, lr}
   2267a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2267e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   22682:	428c      	cmp	r4, r1
   22684:	d30c      	bcc.n	226a0 <bt_gatt_attr_read+0x28>
   22686:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   22688:	1a64      	subs	r4, r4, r1
   2268a:	42a3      	cmp	r3, r4
   2268c:	bfa8      	it	ge
   2268e:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   22690:	b29c      	uxth	r4, r3
   22692:	4622      	mov	r2, r4
   22694:	9b03      	ldr	r3, [sp, #12]
   22696:	4419      	add	r1, r3
   22698:	f002 f92e 	bl	248f8 <memcpy>
	return len;
   2269c:	4620      	mov	r0, r4
}
   2269e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   226a0:	f06f 0006 	mvn.w	r0, #6
   226a4:	e7fb      	b.n	2269e <bt_gatt_attr_read+0x26>

000226a6 <read_appearance>:
{
   226a6:	b510      	push	{r4, lr}
   226a8:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   226aa:	2400      	movs	r4, #0
   226ac:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   226b0:	2402      	movs	r4, #2
   226b2:	9402      	str	r4, [sp, #8]
   226b4:	f10d 0416 	add.w	r4, sp, #22
   226b8:	9401      	str	r4, [sp, #4]
   226ba:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   226be:	9400      	str	r4, [sp, #0]
   226c0:	f7ff ffda 	bl	22678 <bt_gatt_attr_read>
}
   226c4:	b006      	add	sp, #24
   226c6:	bd10      	pop	{r4, pc}

000226c8 <read_name>:
{
   226c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226cc:	b084      	sub	sp, #16
   226ce:	4604      	mov	r4, r0
   226d0:	460d      	mov	r5, r1
   226d2:	4616      	mov	r6, r2
   226d4:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   226d6:	f7f2 fef3 	bl	154c0 <bt_get_name>
   226da:	4680      	mov	r8, r0
				 strlen(name));
   226dc:	f7e9 fdca 	bl	c274 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   226e0:	b280      	uxth	r0, r0
   226e2:	9002      	str	r0, [sp, #8]
   226e4:	f8cd 8004 	str.w	r8, [sp, #4]
   226e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   226ec:	9300      	str	r3, [sp, #0]
   226ee:	463b      	mov	r3, r7
   226f0:	4632      	mov	r2, r6
   226f2:	4629      	mov	r1, r5
   226f4:	4620      	mov	r0, r4
   226f6:	f7ff ffbf 	bl	22678 <bt_gatt_attr_read>
}
   226fa:	b004      	add	sp, #16
   226fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022700 <cf_read>:
{
   22700:	b5f0      	push	{r4, r5, r6, r7, lr}
   22702:	b087      	sub	sp, #28
   22704:	4604      	mov	r4, r0
   22706:	460d      	mov	r5, r1
   22708:	4616      	mov	r6, r2
   2270a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2270c:	2300      	movs	r3, #0
   2270e:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   22712:	f7f5 fc5d 	bl	17fd0 <find_cf_cfg>
	if (cfg) {
   22716:	b110      	cbz	r0, 2271e <cf_read+0x1e>
		memcpy(data, cfg->data, sizeof(data));
   22718:	7a03      	ldrb	r3, [r0, #8]
   2271a:	f88d 3014 	strb.w	r3, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2271e:	2301      	movs	r3, #1
   22720:	9302      	str	r3, [sp, #8]
   22722:	ab05      	add	r3, sp, #20
   22724:	9301      	str	r3, [sp, #4]
   22726:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2272a:	9300      	str	r3, [sp, #0]
   2272c:	463b      	mov	r3, r7
   2272e:	4632      	mov	r2, r6
   22730:	4629      	mov	r1, r5
   22732:	4620      	mov	r0, r4
   22734:	f7ff ffa0 	bl	22678 <bt_gatt_attr_read>
}
   22738:	b007      	add	sp, #28
   2273a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002273c <bt_gatt_attr_read_service>:
{
   2273c:	b570      	push	{r4, r5, r6, lr}
   2273e:	b086      	sub	sp, #24
   22740:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   22744:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   22746:	7826      	ldrb	r6, [r4, #0]
   22748:	b146      	cbz	r6, 2275c <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   2274a:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2274c:	2610      	movs	r6, #16
   2274e:	9602      	str	r6, [sp, #8]
   22750:	9401      	str	r4, [sp, #4]
   22752:	9500      	str	r5, [sp, #0]
   22754:	f7ff ff90 	bl	22678 <bt_gatt_attr_read>
}
   22758:	b006      	add	sp, #24
   2275a:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2275c:	8864      	ldrh	r4, [r4, #2]
   2275e:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   22762:	2402      	movs	r4, #2
   22764:	9402      	str	r4, [sp, #8]
   22766:	f10d 0416 	add.w	r4, sp, #22
   2276a:	9401      	str	r4, [sp, #4]
   2276c:	9500      	str	r5, [sp, #0]
   2276e:	f7ff ff83 	bl	22678 <bt_gatt_attr_read>
   22772:	e7f1      	b.n	22758 <bt_gatt_attr_read_service+0x1c>

00022774 <bt_gatt_attr_read_ccc>:
{
   22774:	b5f0      	push	{r4, r5, r6, r7, lr}
   22776:	b087      	sub	sp, #28
   22778:	4605      	mov	r5, r0
   2277a:	460c      	mov	r4, r1
   2277c:	4616      	mov	r6, r2
   2277e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   22780:	68c9      	ldr	r1, [r1, #12]
   22782:	f7ff fe8d 	bl	224a0 <find_ccc_cfg>
	if (cfg) {
   22786:	b190      	cbz	r0, 227ae <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   22788:	8903      	ldrh	r3, [r0, #8]
   2278a:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2278e:	2302      	movs	r3, #2
   22790:	9302      	str	r3, [sp, #8]
   22792:	f10d 0316 	add.w	r3, sp, #22
   22796:	9301      	str	r3, [sp, #4]
   22798:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2279c:	9300      	str	r3, [sp, #0]
   2279e:	463b      	mov	r3, r7
   227a0:	4632      	mov	r2, r6
   227a2:	4621      	mov	r1, r4
   227a4:	4628      	mov	r0, r5
   227a6:	f7ff ff67 	bl	22678 <bt_gatt_attr_read>
}
   227aa:	b007      	add	sp, #28
   227ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   227ae:	2300      	movs	r3, #0
   227b0:	f8ad 3016 	strh.w	r3, [sp, #22]
   227b4:	e7eb      	b.n	2278e <bt_gatt_attr_read_ccc+0x1a>

000227b6 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   227b6:	b1b8      	cbz	r0, 227e8 <bt_gatt_attr_value_handle+0x32>
{
   227b8:	b510      	push	{r4, lr}
   227ba:	b082      	sub	sp, #8
   227bc:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   227be:	2300      	movs	r3, #0
   227c0:	f88d 3004 	strb.w	r3, [sp, #4]
   227c4:	f642 0303 	movw	r3, #10243	; 0x2803
   227c8:	f8ad 3006 	strh.w	r3, [sp, #6]
   227cc:	a901      	add	r1, sp, #4
   227ce:	6800      	ldr	r0, [r0, #0]
   227d0:	f7fe fb34 	bl	20e3c <bt_uuid_cmp>
   227d4:	b950      	cbnz	r0, 227ec <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   227d6:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   227d8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   227da:	b940      	cbnz	r0, 227ee <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   227dc:	4620      	mov	r0, r4
   227de:	f7f5 fe63 	bl	184a8 <bt_gatt_attr_get_handle>
   227e2:	3001      	adds	r0, #1
   227e4:	b280      	uxth	r0, r0
   227e6:	e002      	b.n	227ee <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   227e8:	2000      	movs	r0, #0
}
   227ea:	4770      	bx	lr
	uint16_t handle = 0;
   227ec:	2000      	movs	r0, #0
}
   227ee:	b002      	add	sp, #8
   227f0:	bd10      	pop	{r4, pc}

000227f2 <bt_gatt_attr_read_chrc>:
{
   227f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227f6:	b08a      	sub	sp, #40	; 0x28
   227f8:	4605      	mov	r5, r0
   227fa:	460c      	mov	r4, r1
   227fc:	4616      	mov	r6, r2
   227fe:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   22800:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   22804:	f898 3006 	ldrb.w	r3, [r8, #6]
   22808:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2280c:	4608      	mov	r0, r1
   2280e:	f7ff ffd2 	bl	227b6 <bt_gatt_attr_value_handle>
   22812:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22816:	f8d8 1000 	ldr.w	r1, [r8]
   2281a:	780b      	ldrb	r3, [r1, #0]
   2281c:	b993      	cbnz	r3, 22844 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2281e:	884b      	ldrh	r3, [r1, #2]
   22820:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   22824:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22826:	9302      	str	r3, [sp, #8]
   22828:	ab05      	add	r3, sp, #20
   2282a:	9301      	str	r3, [sp, #4]
   2282c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   22830:	9300      	str	r3, [sp, #0]
   22832:	463b      	mov	r3, r7
   22834:	4632      	mov	r2, r6
   22836:	4621      	mov	r1, r4
   22838:	4628      	mov	r0, r5
   2283a:	f7ff ff1d 	bl	22678 <bt_gatt_attr_read>
}
   2283e:	b00a      	add	sp, #40	; 0x28
   22840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   22844:	f851 cf01 	ldr.w	ip, [r1, #1]!
   22848:	6848      	ldr	r0, [r1, #4]
   2284a:	688a      	ldr	r2, [r1, #8]
   2284c:	68cb      	ldr	r3, [r1, #12]
   2284e:	f8cd c017 	str.w	ip, [sp, #23]
   22852:	f8cd 001b 	str.w	r0, [sp, #27]
   22856:	f8cd 201f 	str.w	r2, [sp, #31]
   2285a:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
		value_len += 16U;
   2285e:	2313      	movs	r3, #19
   22860:	e7e1      	b.n	22826 <bt_gatt_attr_read_chrc+0x34>

00022862 <db_hash_process>:
{
   22862:	b508      	push	{r3, lr}
	db_hash_gen(true);
   22864:	2001      	movs	r0, #1
   22866:	f7f5 fe99 	bl	1859c <db_hash_gen>
}
   2286a:	bd08      	pop	{r3, pc}

0002286c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2286c:	f012 0f01 	tst.w	r2, #1
   22870:	d005      	beq.n	2287e <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   22872:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   22874:	f013 0f15 	tst.w	r3, #21
   22878:	d01a      	beq.n	228b0 <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2287a:	684b      	ldr	r3, [r1, #4]
   2287c:	b1d3      	cbz	r3, 228b4 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2287e:	f012 0f02 	tst.w	r2, #2
   22882:	d005      	beq.n	22890 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   22884:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   22886:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   2288a:	d015      	beq.n	228b8 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2288c:	688b      	ldr	r3, [r1, #8]
   2288e:	b1ab      	cbz	r3, 228bc <bt_gatt_check_perm+0x50>
{
   22890:	b510      	push	{r4, lr}
	mask &= attr->perm;
   22892:	7c8c      	ldrb	r4, [r1, #18]
   22894:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   22896:	f014 0f30 	tst.w	r4, #48	; 0x30
   2289a:	d103      	bne.n	228a4 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2289c:	f014 000c 	ands.w	r0, r4, #12
   228a0:	d10e      	bne.n	228c0 <bt_gatt_check_perm+0x54>
}
   228a2:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   228a4:	f7fe fe2a 	bl	214fc <bt_conn_get_security>
   228a8:	2802      	cmp	r0, #2
   228aa:	d8f7      	bhi.n	2289c <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   228ac:	2005      	movs	r0, #5
   228ae:	e7f8      	b.n	228a2 <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   228b0:	2002      	movs	r0, #2
   228b2:	4770      	bx	lr
   228b4:	2002      	movs	r0, #2
   228b6:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   228b8:	2003      	movs	r0, #3
   228ba:	4770      	bx	lr
   228bc:	2003      	movs	r0, #3
}
   228be:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   228c0:	200f      	movs	r0, #15
   228c2:	e7ee      	b.n	228a2 <bt_gatt_check_perm+0x36>

000228c4 <bt_gatt_change_aware>:
{
   228c4:	b510      	push	{r4, lr}
   228c6:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   228c8:	f7f5 fb82 	bl	17fd0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   228cc:	2800      	cmp	r0, #0
   228ce:	d042      	beq.n	22956 <bt_gatt_change_aware+0x92>
   228d0:	7a02      	ldrb	r2, [r0, #8]
   228d2:	f012 0f01 	tst.w	r2, #1
   228d6:	d101      	bne.n	228dc <bt_gatt_change_aware+0x18>
		return true;
   228d8:	2001      	movs	r0, #1
}
   228da:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   228dc:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   228e0:	f3bf 8f5b 	dmb	ish
   228e4:	68c2      	ldr	r2, [r0, #12]
   228e6:	f3bf 8f5b 	dmb	ish
   228ea:	f012 0f01 	tst.w	r2, #1
   228ee:	d134      	bne.n	2295a <bt_gatt_change_aware+0x96>
	if (!req) {
   228f0:	b90c      	cbnz	r4, 228f6 <bt_gatt_change_aware+0x32>
		return false;
   228f2:	4620      	mov	r0, r4
   228f4:	e7f1      	b.n	228da <bt_gatt_change_aware+0x16>
   228f6:	f3bf 8f5b 	dmb	ish
   228fa:	68c3      	ldr	r3, [r0, #12]
   228fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   22900:	f013 0f02 	tst.w	r3, #2
   22904:	d10d      	bne.n	22922 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22906:	f3bf 8f5b 	dmb	ish
   2290a:	e851 3f00 	ldrex	r3, [r1]
   2290e:	f043 0302 	orr.w	r3, r3, #2
   22912:	e841 3200 	strex	r2, r3, [r1]
   22916:	2a00      	cmp	r2, #0
   22918:	d1f7      	bne.n	2290a <bt_gatt_change_aware+0x46>
   2291a:	f3bf 8f5b 	dmb	ish
	return false;
   2291e:	2000      	movs	r0, #0
   22920:	e7db      	b.n	228da <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22922:	f3bf 8f5b 	dmb	ish
   22926:	e851 3f00 	ldrex	r3, [r1]
   2292a:	f023 0302 	bic.w	r3, r3, #2
   2292e:	e841 3200 	strex	r2, r3, [r1]
   22932:	2a00      	cmp	r2, #0
   22934:	d1f7      	bne.n	22926 <bt_gatt_change_aware+0x62>
   22936:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2293a:	f3bf 8f5b 	dmb	ish
   2293e:	e851 3f00 	ldrex	r3, [r1]
   22942:	f043 0301 	orr.w	r3, r3, #1
   22946:	e841 3200 	strex	r2, r3, [r1]
   2294a:	2a00      	cmp	r2, #0
   2294c:	d1f7      	bne.n	2293e <bt_gatt_change_aware+0x7a>
   2294e:	f3bf 8f5b 	dmb	ish
		return true;
   22952:	4620      	mov	r0, r4
   22954:	e7c1      	b.n	228da <bt_gatt_change_aware+0x16>
		return true;
   22956:	2001      	movs	r0, #1
   22958:	e7bf      	b.n	228da <bt_gatt_change_aware+0x16>
		return true;
   2295a:	2001      	movs	r0, #1
   2295c:	e7bd      	b.n	228da <bt_gatt_change_aware+0x16>

0002295e <bt_smp_recv>:
{
   2295e:	b5f0      	push	{r4, r5, r6, r7, lr}
   22960:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   22962:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   22964:	f04f 32ff 	mov.w	r2, #4294967295
   22968:	f04f 33ff 	mov.w	r3, #4294967295
   2296c:	2100      	movs	r1, #0
   2296e:	4608      	mov	r0, r1
   22970:	f7fe fe6d 	bl	2164e <bt_l2cap_create_pdu_timeout>
   22974:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   22976:	f100 0608 	add.w	r6, r0, #8
   2297a:	2101      	movs	r1, #1
   2297c:	4630      	mov	r0, r6
   2297e:	f000 f971 	bl	22c64 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   22982:	2505      	movs	r5, #5
   22984:	7005      	strb	r5, [r0, #0]
   22986:	2101      	movs	r1, #1
   22988:	4630      	mov	r0, r6
   2298a:	f000 f96b 	bl	22c64 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2298e:	7005      	strb	r5, [r0, #0]
   22990:	2300      	movs	r3, #0
   22992:	9300      	str	r3, [sp, #0]
   22994:	4622      	mov	r2, r4
   22996:	2106      	movs	r1, #6
   22998:	4638      	mov	r0, r7
   2299a:	f7fe fe5d 	bl	21658 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2299e:	b910      	cbnz	r0, 229a6 <bt_smp_recv+0x48>
}
   229a0:	2000      	movs	r0, #0
   229a2:	b003      	add	sp, #12
   229a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   229a6:	4620      	mov	r0, r4
   229a8:	f000 f912 	bl	22bd0 <net_buf_unref>
   229ac:	e7f8      	b.n	229a0 <bt_smp_recv+0x42>

000229ae <bt_smp_sign>:
}
   229ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   229b2:	4770      	bx	lr

000229b4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   229b4:	2000      	movs	r0, #0
   229b6:	4770      	bx	lr

000229b8 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   229b8:	4770      	bx	lr

000229ba <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   229ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   229be:	4604      	mov	r4, r0
   229c0:	460d      	mov	r5, r1
   229c2:	4617      	mov	r7, r2
   229c4:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   229c6:	7980      	ldrb	r0, [r0, #6]
   229c8:	f7f6 f9f4 	bl	18db4 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   229cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   229ce:	681b      	ldr	r3, [r3, #0]
   229d0:	f8d3 8000 	ldr.w	r8, [r3]
   229d4:	463a      	mov	r2, r7
   229d6:	4633      	mov	r3, r6
   229d8:	4629      	mov	r1, r5
   229da:	4620      	mov	r0, r4
   229dc:	47c0      	blx	r8
}
   229de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000229e2 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   229e2:	b538      	push	{r3, r4, r5, lr}
   229e4:	4604      	mov	r4, r0
   229e6:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   229e8:	7980      	ldrb	r0, [r0, #6]
   229ea:	f7f6 f9e3 	bl	18db4 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   229ee:	7963      	ldrb	r3, [r4, #5]
   229f0:	f013 0f02 	tst.w	r3, #2
   229f4:	d105      	bne.n	22a02 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   229f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   229f8:	681b      	ldr	r3, [r3, #0]
   229fa:	689b      	ldr	r3, [r3, #8]
   229fc:	4629      	mov	r1, r5
   229fe:	4620      	mov	r0, r4
   22a00:	4798      	blx	r3
}
   22a02:	bd38      	pop	{r3, r4, r5, pc}

00022a04 <net_buf_id>:
{
   22a04:	b510      	push	{r4, lr}
   22a06:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22a08:	7980      	ldrb	r0, [r0, #6]
   22a0a:	f7f6 f9d3 	bl	18db4 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   22a0e:	7f03      	ldrb	r3, [r0, #28]
   22a10:	3317      	adds	r3, #23
   22a12:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   22a16:	6a80      	ldr	r0, [r0, #40]	; 0x28
   22a18:	1a20      	subs	r0, r4, r0
}
   22a1a:	fbb0 f0f3 	udiv	r0, r0, r3
   22a1e:	bd10      	pop	{r4, pc}

00022a20 <fixed_data_alloc>:
{
   22a20:	b570      	push	{r4, r5, r6, lr}
   22a22:	4604      	mov	r4, r0
   22a24:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22a26:	7980      	ldrb	r0, [r0, #6]
   22a28:	f7f6 f9c4 	bl	18db4 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   22a2e:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   22a30:	682a      	ldr	r2, [r5, #0]
   22a32:	6819      	ldr	r1, [r3, #0]
   22a34:	428a      	cmp	r2, r1
   22a36:	bf28      	it	cs
   22a38:	460a      	movcs	r2, r1
   22a3a:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   22a3c:	685d      	ldr	r5, [r3, #4]
   22a3e:	681e      	ldr	r6, [r3, #0]
   22a40:	4620      	mov	r0, r4
   22a42:	f7ff ffdf 	bl	22a04 <net_buf_id>
}
   22a46:	fb00 5006 	mla	r0, r0, r6, r5
   22a4a:	bd70      	pop	{r4, r5, r6, pc}

00022a4c <net_buf_reset>:
	buf->len  = 0U;
   22a4c:	2300      	movs	r3, #0
   22a4e:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   22a50:	6903      	ldr	r3, [r0, #16]
   22a52:	6083      	str	r3, [r0, #8]
}
   22a54:	4770      	bx	lr

00022a56 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   22a56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a5a:	b083      	sub	sp, #12
   22a5c:	4605      	mov	r5, r0
   22a5e:	9101      	str	r1, [sp, #4]
   22a60:	4616      	mov	r6, r2
   22a62:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   22a64:	4610      	mov	r0, r2
   22a66:	4619      	mov	r1, r3
   22a68:	f001 fe2a 	bl	246c0 <sys_clock_timeout_end_calc>
   22a6c:	4682      	mov	sl, r0
   22a6e:	9100      	str	r1, [sp, #0]
   22a70:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a74:	f3ef 8211 	mrs	r2, BASEPRI
   22a78:	f383 8812 	msr	BASEPRI_MAX, r3
   22a7c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   22a80:	8b6b      	ldrh	r3, [r5, #26]
   22a82:	2b00      	cmp	r3, #0
   22a84:	d042      	beq.n	22b0c <net_buf_alloc_len+0xb6>
   22a86:	4693      	mov	fp, r2

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   22a88:	8b2a      	ldrh	r2, [r5, #24]
   22a8a:	4293      	cmp	r3, r2
   22a8c:	d20b      	bcs.n	22aa6 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   22a8e:	2200      	movs	r2, #0
   22a90:	2300      	movs	r3, #0
   22a92:	4628      	mov	r0, r5
   22a94:	f7f9 f870 	bl	1bb78 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   22a98:	4604      	mov	r4, r0
   22a9a:	b120      	cbz	r0, 22aa6 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   22a9c:	f38b 8811 	msr	BASEPRI, fp
   22aa0:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   22aa4:	e015      	b.n	22ad2 <net_buf_alloc_len+0x7c>
			}
		}

		uninit_count = pool->uninit_count--;
   22aa6:	8b6a      	ldrh	r2, [r5, #26]
   22aa8:	1e53      	subs	r3, r2, #1
   22aaa:	836b      	strh	r3, [r5, #26]
   22aac:	f38b 8811 	msr	BASEPRI, fp
   22ab0:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   22ab4:	7f2c      	ldrb	r4, [r5, #28]
   22ab6:	3417      	adds	r4, #23
   22ab8:	f024 0403 	bic.w	r4, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   22abc:	8b2b      	ldrh	r3, [r5, #24]
   22abe:	1a9b      	subs	r3, r3, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   22ac0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22ac2:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   22ac6:	4628      	mov	r0, r5
   22ac8:	f7f6 f968 	bl	18d9c <pool_id>
   22acc:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   22ace:	7f2b      	ldrb	r3, [r5, #28]
   22ad0:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   22ad2:	9b01      	ldr	r3, [sp, #4]
   22ad4:	2b00      	cmp	r3, #0
   22ad6:	d038      	beq.n	22b4a <net_buf_alloc_len+0xf4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   22ad8:	ea56 0307 	orrs.w	r3, r6, r7
   22adc:	d005      	beq.n	22aea <net_buf_alloc_len+0x94>
   22ade:	f1b7 3fff 	cmp.w	r7, #4294967295
   22ae2:	bf08      	it	eq
   22ae4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22ae8:	d11d      	bne.n	22b26 <net_buf_alloc_len+0xd0>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   22aea:	4632      	mov	r2, r6
   22aec:	463b      	mov	r3, r7
   22aee:	a901      	add	r1, sp, #4
   22af0:	4620      	mov	r0, r4
   22af2:	f7ff ff62 	bl	229ba <data_alloc>
   22af6:	4605      	mov	r5, r0
   22af8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   22afa:	bb40      	cbnz	r0, 22b4e <net_buf_alloc_len+0xf8>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22afc:	79a0      	ldrb	r0, [r4, #6]
   22afe:	f7f6 f959 	bl	18db4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   22b02:	4621      	mov	r1, r4
   22b04:	f001 fa38 	bl	23f78 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   22b08:	462c      	mov	r4, r5
}
   22b0a:	e02a      	b.n	22b62 <net_buf_alloc_len+0x10c>
   22b0c:	f382 8811 	msr	BASEPRI, r2
   22b10:	f3bf 8f6f 	isb	sy
   22b14:	4632      	mov	r2, r6
   22b16:	463b      	mov	r3, r7
   22b18:	4628      	mov	r0, r5
   22b1a:	f7f9 f82d 	bl	1bb78 <z_impl_k_queue_get>
	if (!buf) {
   22b1e:	4604      	mov	r4, r0
   22b20:	2800      	cmp	r0, #0
   22b22:	d1d6      	bne.n	22ad2 <net_buf_alloc_len+0x7c>
   22b24:	e01d      	b.n	22b62 <net_buf_alloc_len+0x10c>
			int64_t remaining = end - sys_clock_tick_get();
   22b26:	f7f9 fffd 	bl	1cb24 <sys_clock_tick_get>
   22b2a:	ebba 0800 	subs.w	r8, sl, r0
   22b2e:	9b00      	ldr	r3, [sp, #0]
   22b30:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   22b34:	f1b8 0f01 	cmp.w	r8, #1
   22b38:	f179 0300 	sbcs.w	r3, r9, #0
   22b3c:	db02      	blt.n	22b44 <net_buf_alloc_len+0xee>
				timeout = Z_TIMEOUT_TICKS(remaining);
   22b3e:	4646      	mov	r6, r8
   22b40:	464f      	mov	r7, r9
   22b42:	e7d2      	b.n	22aea <net_buf_alloc_len+0x94>
				timeout = K_NO_WAIT;
   22b44:	2600      	movs	r6, #0
   22b46:	2700      	movs	r7, #0
   22b48:	e7cf      	b.n	22aea <net_buf_alloc_len+0x94>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   22b4a:	2300      	movs	r3, #0
   22b4c:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   22b4e:	2301      	movs	r3, #1
   22b50:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   22b52:	2300      	movs	r3, #0
   22b54:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   22b56:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   22b58:	9b01      	ldr	r3, [sp, #4]
   22b5a:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   22b5c:	4620      	mov	r0, r4
   22b5e:	f7ff ff75 	bl	22a4c <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   22b62:	4620      	mov	r0, r4
   22b64:	b003      	add	sp, #12
   22b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022b6a <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   22b6a:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22b6c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   22b6e:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22b70:	6809      	ldr	r1, [r1, #0]
   22b72:	f7ff ff70 	bl	22a56 <net_buf_alloc_len>
}
   22b76:	bd08      	pop	{r3, pc}

00022b78 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   22b78:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   22b7a:	4605      	mov	r5, r0
   22b7c:	f7f8 fffc 	bl	1bb78 <z_impl_k_queue_get>
	if (!buf) {
   22b80:	4606      	mov	r6, r0
   22b82:	b190      	cbz	r0, 22baa <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22b84:	4604      	mov	r4, r0
   22b86:	e00a      	b.n	22b9e <net_buf_get+0x26>
   22b88:	2200      	movs	r2, #0
   22b8a:	2300      	movs	r3, #0
   22b8c:	4628      	mov	r0, r5
   22b8e:	f7f8 fff3 	bl	1bb78 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   22b92:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   22b94:	7963      	ldrb	r3, [r4, #5]
   22b96:	f023 0301 	bic.w	r3, r3, #1
   22b9a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22b9c:	4604      	mov	r4, r0
   22b9e:	7963      	ldrb	r3, [r4, #5]
   22ba0:	f013 0f01 	tst.w	r3, #1
   22ba4:	d1f0      	bne.n	22b88 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   22ba6:	2300      	movs	r3, #0
   22ba8:	6023      	str	r3, [r4, #0]

	return buf;
}
   22baa:	4630      	mov	r0, r6
   22bac:	bd70      	pop	{r4, r5, r6, pc}

00022bae <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   22bae:	6883      	ldr	r3, [r0, #8]
   22bb0:	440b      	add	r3, r1
   22bb2:	6003      	str	r3, [r0, #0]
}
   22bb4:	4770      	bx	lr

00022bb6 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   22bb6:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   22bb8:	460a      	mov	r2, r1
   22bba:	6814      	ldr	r4, [r2, #0]
   22bbc:	b12c      	cbz	r4, 22bca <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   22bbe:	7953      	ldrb	r3, [r2, #5]
   22bc0:	f043 0301 	orr.w	r3, r3, #1
   22bc4:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   22bc6:	4622      	mov	r2, r4
   22bc8:	e7f7      	b.n	22bba <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   22bca:	f001 f9e0 	bl	23f8e <k_queue_append_list>
}
   22bce:	bd10      	pop	{r4, pc}

00022bd0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   22bd0:	b538      	push	{r3, r4, r5, lr}
   22bd2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   22bd4:	e00f      	b.n	22bf6 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   22bd6:	4620      	mov	r0, r4
   22bd8:	f7ff ff03 	bl	229e2 <data_unref>
			buf->__buf = NULL;
   22bdc:	2300      	movs	r3, #0
   22bde:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   22be0:	2300      	movs	r3, #0
   22be2:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   22be4:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   22be6:	79a0      	ldrb	r0, [r4, #6]
   22be8:	f7f6 f8e4 	bl	18db4 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   22bec:	6a03      	ldr	r3, [r0, #32]
   22bee:	b16b      	cbz	r3, 22c0c <net_buf_unref+0x3c>
			pool->destroy(buf);
   22bf0:	4620      	mov	r0, r4
   22bf2:	4798      	blx	r3
{
   22bf4:	462c      	mov	r4, r5
	while (buf) {
   22bf6:	b184      	cbz	r4, 22c1a <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   22bf8:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   22bfa:	7923      	ldrb	r3, [r4, #4]
   22bfc:	3b01      	subs	r3, #1
   22bfe:	b2db      	uxtb	r3, r3
   22c00:	7123      	strb	r3, [r4, #4]
   22c02:	b953      	cbnz	r3, 22c1a <net_buf_unref+0x4a>
		if (buf->__buf) {
   22c04:	6921      	ldr	r1, [r4, #16]
   22c06:	2900      	cmp	r1, #0
   22c08:	d1e5      	bne.n	22bd6 <net_buf_unref+0x6>
   22c0a:	e7e9      	b.n	22be0 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   22c0c:	79a0      	ldrb	r0, [r4, #6]
   22c0e:	f7f6 f8d1 	bl	18db4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   22c12:	4621      	mov	r1, r4
   22c14:	f001 f9b0 	bl	23f78 <k_queue_prepend>
}
   22c18:	e7ec      	b.n	22bf4 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   22c1a:	bd38      	pop	{r3, r4, r5, pc}

00022c1c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   22c1c:	7902      	ldrb	r2, [r0, #4]
   22c1e:	3201      	adds	r2, #1
   22c20:	7102      	strb	r2, [r0, #4]
	return buf;
}
   22c22:	4770      	bx	lr

00022c24 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   22c24:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   22c26:	4618      	mov	r0, r3
   22c28:	681b      	ldr	r3, [r3, #0]
   22c2a:	2b00      	cmp	r3, #0
   22c2c:	d1fb      	bne.n	22c26 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   22c2e:	4770      	bx	lr

00022c30 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   22c30:	b570      	push	{r4, r5, r6, lr}
   22c32:	4604      	mov	r4, r0
   22c34:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   22c36:	6806      	ldr	r6, [r0, #0]
   22c38:	b11e      	cbz	r6, 22c42 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   22c3a:	4608      	mov	r0, r1
   22c3c:	f7ff fff2 	bl	22c24 <net_buf_frag_last>
   22c40:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   22c42:	6025      	str	r5, [r4, #0]
}
   22c44:	bd70      	pop	{r4, r5, r6, pc}

00022c46 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   22c46:	b538      	push	{r3, r4, r5, lr}
   22c48:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22c4a:	b138      	cbz	r0, 22c5c <net_buf_frag_add+0x16>
   22c4c:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   22c4e:	f7ff ffe9 	bl	22c24 <net_buf_frag_last>
   22c52:	4629      	mov	r1, r5
   22c54:	f7ff ffec 	bl	22c30 <net_buf_frag_insert>

	return head;
   22c58:	4620      	mov	r0, r4
}
   22c5a:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   22c5c:	4608      	mov	r0, r1
   22c5e:	f7ff ffdd 	bl	22c1c <net_buf_ref>
   22c62:	e7fa      	b.n	22c5a <net_buf_frag_add+0x14>

00022c64 <net_buf_simple_add>:
	return buf->data + buf->len;
   22c64:	6802      	ldr	r2, [r0, #0]
   22c66:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22c68:	4419      	add	r1, r3
   22c6a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22c6c:	18d0      	adds	r0, r2, r3
   22c6e:	4770      	bx	lr

00022c70 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   22c70:	b538      	push	{r3, r4, r5, lr}
   22c72:	460d      	mov	r5, r1
   22c74:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   22c76:	4611      	mov	r1, r2
   22c78:	f7ff fff4 	bl	22c64 <net_buf_simple_add>
   22c7c:	4622      	mov	r2, r4
   22c7e:	4629      	mov	r1, r5
   22c80:	f001 fe3a 	bl	248f8 <memcpy>
}
   22c84:	bd38      	pop	{r3, r4, r5, pc}

00022c86 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   22c86:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   22c88:	6800      	ldr	r0, [r0, #0]
   22c8a:	1a40      	subs	r0, r0, r1
   22c8c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   22c8e:	889a      	ldrh	r2, [r3, #4]
   22c90:	4411      	add	r1, r2
   22c92:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   22c94:	4770      	bx	lr

00022c96 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   22c96:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22c98:	8882      	ldrh	r2, [r0, #4]
   22c9a:	1a52      	subs	r2, r2, r1
   22c9c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   22c9e:	6800      	ldr	r0, [r0, #0]
   22ca0:	4408      	add	r0, r1
   22ca2:	6018      	str	r0, [r3, #0]
}
   22ca4:	4770      	bx	lr

00022ca6 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   22ca6:	4603      	mov	r3, r0
	void *data = buf->data;
   22ca8:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22caa:	889a      	ldrh	r2, [r3, #4]
   22cac:	1a52      	subs	r2, r2, r1
   22cae:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   22cb0:	4401      	add	r1, r0
   22cb2:	6019      	str	r1, [r3, #0]

	return data;
}
   22cb4:	4770      	bx	lr

00022cb6 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   22cb6:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   22cb8:	6803      	ldr	r3, [r0, #0]
   22cba:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   22cbc:	2101      	movs	r1, #1
   22cbe:	f7ff ffea 	bl	22c96 <net_buf_simple_pull>

	return val;
}
   22cc2:	4620      	mov	r0, r4
   22cc4:	bd10      	pop	{r4, pc}

00022cc6 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   22cc6:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   22cc8:	6803      	ldr	r3, [r0, #0]
   22cca:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22ccc:	2102      	movs	r1, #2
   22cce:	f7ff ffe2 	bl	22c96 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   22cd2:	4620      	mov	r0, r4
   22cd4:	bd10      	pop	{r4, pc}

00022cd6 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   22cd6:	6802      	ldr	r2, [r0, #0]
   22cd8:	6880      	ldr	r0, [r0, #8]
}
   22cda:	1a10      	subs	r0, r2, r0
   22cdc:	4770      	bx	lr

00022cde <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   22cde:	b538      	push	{r3, r4, r5, lr}
   22ce0:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   22ce2:	88c5      	ldrh	r5, [r0, #6]
   22ce4:	f7ff fff7 	bl	22cd6 <net_buf_simple_headroom>
   22ce8:	1a2d      	subs	r5, r5, r0
   22cea:	88a0      	ldrh	r0, [r4, #4]
}
   22cec:	1a28      	subs	r0, r5, r0
   22cee:	bd38      	pop	{r3, r4, r5, pc}

00022cf0 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   22cf0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   22cf2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   22cf6:	0089      	lsls	r1, r1, #2
   22cf8:	3138      	adds	r1, #56	; 0x38
}
   22cfa:	4408      	add	r0, r1
   22cfc:	4770      	bx	lr

00022cfe <get_sub_config>:
	const struct nrf_clock_control_config *config =
   22cfe:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   22d00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   22d04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   22d08:	4770      	bx	lr

00022d0a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   22d0a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   22d0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   22d10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   22d14:	4770      	bx	lr

00022d16 <get_status>:
{
   22d16:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22d18:	b2c9      	uxtb	r1, r1
   22d1a:	f7ff ffe9 	bl	22cf0 <get_sub_data>
   22d1e:	6880      	ldr	r0, [r0, #8]
}
   22d20:	f000 0007 	and.w	r0, r0, #7
   22d24:	bd08      	pop	{r3, pc}

00022d26 <set_off_state>:
	__asm__ volatile(
   22d26:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d2a:	f3ef 8211 	mrs	r2, BASEPRI
   22d2e:	f383 8812 	msr	BASEPRI_MAX, r3
   22d32:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22d36:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   22d38:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   22d3c:	d001      	beq.n	22d42 <set_off_state+0x1c>
   22d3e:	428b      	cmp	r3, r1
   22d40:	d107      	bne.n	22d52 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   22d42:	2301      	movs	r3, #1
   22d44:	6003      	str	r3, [r0, #0]
	int err = 0;
   22d46:	2000      	movs	r0, #0
	__asm__ volatile(
   22d48:	f382 8811 	msr	BASEPRI, r2
   22d4c:	f3bf 8f6f 	isb	sy
}
   22d50:	4770      	bx	lr
		err = -EPERM;
   22d52:	f04f 30ff 	mov.w	r0, #4294967295
   22d56:	e7f7      	b.n	22d48 <set_off_state+0x22>

00022d58 <set_starting_state>:
{
   22d58:	b410      	push	{r4}
	__asm__ volatile(
   22d5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d5e:	f3ef 8211 	mrs	r2, BASEPRI
   22d62:	f383 8812 	msr	BASEPRI_MAX, r3
   22d66:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22d6a:	6803      	ldr	r3, [r0, #0]
   22d6c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22d70:	f003 0307 	and.w	r3, r3, #7
   22d74:	2b01      	cmp	r3, #1
   22d76:	d009      	beq.n	22d8c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   22d78:	428c      	cmp	r4, r1
   22d7a:	d00a      	beq.n	22d92 <set_starting_state+0x3a>
		err = -EPERM;
   22d7c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   22d80:	f382 8811 	msr	BASEPRI, r2
   22d84:	f3bf 8f6f 	isb	sy
}
   22d88:	bc10      	pop	{r4}
   22d8a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   22d8c:	6001      	str	r1, [r0, #0]
	int err = 0;
   22d8e:	2000      	movs	r0, #0
   22d90:	e7f6      	b.n	22d80 <set_starting_state+0x28>
		err = -EALREADY;
   22d92:	f06f 0077 	mvn.w	r0, #119	; 0x77
   22d96:	e7f3      	b.n	22d80 <set_starting_state+0x28>

00022d98 <set_on_state>:
	__asm__ volatile(
   22d98:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d9c:	f3ef 8211 	mrs	r2, BASEPRI
   22da0:	f383 8812 	msr	BASEPRI_MAX, r3
   22da4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22da8:	6803      	ldr	r3, [r0, #0]
   22daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22dae:	f043 0302 	orr.w	r3, r3, #2
   22db2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22db4:	f382 8811 	msr	BASEPRI, r2
   22db8:	f3bf 8f6f 	isb	sy
}
   22dbc:	4770      	bx	lr

00022dbe <clkstarted_handle>:
{
   22dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22dc0:	4606      	mov	r6, r0
   22dc2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   22dc4:	f7ff ff94 	bl	22cf0 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   22dc8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   22dca:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   22dcc:	2300      	movs	r3, #0
   22dce:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   22dd2:	f7ff ffe1 	bl	22d98 <set_on_state>
	if (callback) {
   22dd6:	b11d      	cbz	r5, 22de0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   22dd8:	463a      	mov	r2, r7
   22dda:	4621      	mov	r1, r4
   22ddc:	4630      	mov	r0, r6
   22dde:	47a8      	blx	r5
}
   22de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022de2 <stop>:
{
   22de2:	b570      	push	{r4, r5, r6, lr}
   22de4:	4606      	mov	r6, r0
   22de6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   22de8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   22dea:	4621      	mov	r1, r4
   22dec:	f7ff ff80 	bl	22cf0 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   22df0:	4629      	mov	r1, r5
   22df2:	3008      	adds	r0, #8
   22df4:	f7ff ff97 	bl	22d26 <set_off_state>
	if (err < 0) {
   22df8:	2800      	cmp	r0, #0
   22dfa:	db06      	blt.n	22e0a <stop+0x28>
	get_sub_config(dev, type)->stop();
   22dfc:	4621      	mov	r1, r4
   22dfe:	4630      	mov	r0, r6
   22e00:	f7ff ff7d 	bl	22cfe <get_sub_config>
   22e04:	6843      	ldr	r3, [r0, #4]
   22e06:	4798      	blx	r3
	return 0;
   22e08:	2000      	movs	r0, #0
}
   22e0a:	bd70      	pop	{r4, r5, r6, pc}

00022e0c <api_stop>:
{
   22e0c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   22e0e:	2280      	movs	r2, #128	; 0x80
   22e10:	f7ff ffe7 	bl	22de2 <stop>
}
   22e14:	bd08      	pop	{r3, pc}

00022e16 <async_start>:
{
   22e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e1a:	4606      	mov	r6, r0
   22e1c:	4690      	mov	r8, r2
   22e1e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   22e20:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   22e22:	4629      	mov	r1, r5
   22e24:	f7ff ff64 	bl	22cf0 <get_sub_data>
   22e28:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   22e2a:	9906      	ldr	r1, [sp, #24]
   22e2c:	3008      	adds	r0, #8
   22e2e:	f7ff ff93 	bl	22d58 <set_starting_state>
	if (err < 0) {
   22e32:	2800      	cmp	r0, #0
   22e34:	db09      	blt.n	22e4a <async_start+0x34>
	subdata->cb = cb;
   22e36:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   22e3a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   22e3c:	4629      	mov	r1, r5
   22e3e:	4630      	mov	r0, r6
   22e40:	f7ff ff5d 	bl	22cfe <get_sub_config>
   22e44:	6803      	ldr	r3, [r0, #0]
   22e46:	4798      	blx	r3
	return 0;
   22e48:	2000      	movs	r0, #0
}
   22e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022e4e <api_start>:
{
   22e4e:	b510      	push	{r4, lr}
   22e50:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   22e52:	2480      	movs	r4, #128	; 0x80
   22e54:	9400      	str	r4, [sp, #0]
   22e56:	f7ff ffde 	bl	22e16 <async_start>
}
   22e5a:	b002      	add	sp, #8
   22e5c:	bd10      	pop	{r4, pc}

00022e5e <onoff_started_callback>:
{
   22e5e:	b510      	push	{r4, lr}
   22e60:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   22e62:	b2c9      	uxtb	r1, r1
   22e64:	f7ff ff51 	bl	22d0a <get_onoff_manager>
	notify(mgr, 0);
   22e68:	2100      	movs	r1, #0
   22e6a:	47a0      	blx	r4
}
   22e6c:	bd10      	pop	{r4, pc}

00022e6e <hfclk_start>:
{
   22e6e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   22e70:	2001      	movs	r0, #1
   22e72:	f7f7 fbb3 	bl	1a5dc <nrfx_clock_start>
}
   22e76:	bd08      	pop	{r3, pc}

00022e78 <lfclk_start>:
{
   22e78:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   22e7a:	2000      	movs	r0, #0
   22e7c:	f7f7 fbae 	bl	1a5dc <nrfx_clock_start>
}
   22e80:	bd08      	pop	{r3, pc}

00022e82 <hfclk_stop>:
{
   22e82:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   22e84:	2001      	movs	r0, #1
   22e86:	f000 fe63 	bl	23b50 <nrfx_clock_stop>
}
   22e8a:	bd08      	pop	{r3, pc}

00022e8c <lfclk_stop>:
{
   22e8c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   22e8e:	2000      	movs	r0, #0
   22e90:	f000 fe5e 	bl	23b50 <nrfx_clock_stop>
}
   22e94:	bd08      	pop	{r3, pc}

00022e96 <blocking_start_callback>:
{
   22e96:	b508      	push	{r3, lr}
   22e98:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   22e9a:	f7f8 fea9 	bl	1bbf0 <z_impl_k_sem_give>
}
   22e9e:	bd08      	pop	{r3, pc}

00022ea0 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   22ea0:	f010 0f10 	tst.w	r0, #16
   22ea4:	d104      	bne.n	22eb0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   22ea6:	f010 0f20 	tst.w	r0, #32
   22eaa:	d103      	bne.n	22eb4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   22eac:	2000      	movs	r0, #0
   22eae:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   22eb0:	2003      	movs	r0, #3
   22eb2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   22eb4:	2001      	movs	r0, #1
}
   22eb6:	4770      	bx	lr

00022eb8 <gpio_nrfx_port_get_raw>:
	return port->config;
   22eb8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22eba:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   22ebc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   22ec0:	600b      	str	r3, [r1, #0]
}
   22ec2:	2000      	movs	r0, #0
   22ec4:	4770      	bx	lr

00022ec6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   22ec6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22ec8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   22eca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   22ece:	4042      	eors	r2, r0
   22ed0:	400a      	ands	r2, r1
   22ed2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   22ed4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   22ed8:	2000      	movs	r0, #0
   22eda:	4770      	bx	lr

00022edc <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   22edc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22ede:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   22ee0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   22ee4:	2000      	movs	r0, #0
   22ee6:	4770      	bx	lr

00022ee8 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   22ee8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22eea:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   22eec:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   22ef0:	2000      	movs	r0, #0
   22ef2:	4770      	bx	lr

00022ef4 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   22ef4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22ef6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   22ef8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   22efc:	404b      	eors	r3, r1
    p_reg->OUT = value;
   22efe:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22f02:	2000      	movs	r0, #0
   22f04:	4770      	bx	lr

00022f06 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   22f06:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   22f0a:	d007      	beq.n	22f1c <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   22f0c:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   22f10:	d00d      	beq.n	22f2e <get_trigger+0x28>
   22f12:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   22f16:	d008      	beq.n	22f2a <get_trigger+0x24>
   22f18:	2001      	movs	r0, #1
}
   22f1a:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   22f1c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   22f20:	d001      	beq.n	22f26 <get_trigger+0x20>
   22f22:	2005      	movs	r0, #5
   22f24:	4770      	bx	lr
   22f26:	2004      	movs	r0, #4
   22f28:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   22f2a:	2002      	movs	r0, #2
   22f2c:	4770      	bx	lr
   22f2e:	2003      	movs	r0, #3
   22f30:	4770      	bx	lr

00022f32 <gpio_nrfx_manage_callback>:
{
   22f32:	b470      	push	{r4, r5, r6}
	return port->data;
   22f34:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22f36:	1d05      	adds	r5, r0, #4
	return list->head;
   22f38:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   22f3a:	b1db      	cbz	r3, 22f74 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   22f3c:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22f3e:	2400      	movs	r4, #0
   22f40:	e00a      	b.n	22f58 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   22f42:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   22f44:	6043      	str	r3, [r0, #4]
	return list->tail;
   22f46:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   22f48:	42a1      	cmp	r1, r4
   22f4a:	d10f      	bne.n	22f6c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   22f4c:	606b      	str	r3, [r5, #4]
}
   22f4e:	e00d      	b.n	22f6c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   22f50:	606c      	str	r4, [r5, #4]
}
   22f52:	e00b      	b.n	22f6c <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22f54:	461c      	mov	r4, r3
   22f56:	681b      	ldr	r3, [r3, #0]
   22f58:	b15b      	cbz	r3, 22f72 <gpio_nrfx_manage_callback+0x40>
   22f5a:	429e      	cmp	r6, r3
   22f5c:	d1fa      	bne.n	22f54 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   22f5e:	2c00      	cmp	r4, #0
   22f60:	d0ef      	beq.n	22f42 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   22f62:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   22f64:	6023      	str	r3, [r4, #0]
	return list->tail;
   22f66:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   22f68:	4299      	cmp	r1, r3
   22f6a:	d0f1      	beq.n	22f50 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   22f6c:	2300      	movs	r3, #0
   22f6e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22f70:	e000      	b.n	22f74 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   22f72:	b152      	cbz	r2, 22f8a <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   22f74:	b162      	cbz	r2, 22f90 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   22f76:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   22f78:	600b      	str	r3, [r1, #0]
	list->head = node;
   22f7a:	6041      	str	r1, [r0, #4]
	return list->tail;
   22f7c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   22f7e:	b10b      	cbz	r3, 22f84 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   22f80:	2000      	movs	r0, #0
   22f82:	e006      	b.n	22f92 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   22f84:	6069      	str	r1, [r5, #4]
   22f86:	2000      	movs	r0, #0
}
   22f88:	e003      	b.n	22f92 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   22f8a:	f06f 0015 	mvn.w	r0, #21
   22f8e:	e000      	b.n	22f92 <gpio_nrfx_manage_callback+0x60>
	return 0;
   22f90:	2000      	movs	r0, #0
}
   22f92:	bc70      	pop	{r4, r5, r6}
   22f94:	4770      	bx	lr

00022f96 <nrfx_gpio_handler>:
{
   22f96:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   22f98:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   22f9c:	0940      	lsrs	r0, r0, #5
   22f9e:	f7f6 f91b 	bl	191d8 <get_dev>
	if (port == NULL) {
   22fa2:	b1d8      	cbz	r0, 22fdc <nrfx_gpio_handler+0x46>
   22fa4:	4606      	mov	r6, r0
	return port->data;
   22fa6:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   22fa8:	2501      	movs	r5, #1
   22faa:	40a5      	lsls	r5, r4
	return list->head;
   22fac:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22fae:	b119      	cbz	r1, 22fb8 <nrfx_gpio_handler+0x22>
   22fb0:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   22fb2:	b149      	cbz	r1, 22fc8 <nrfx_gpio_handler+0x32>
	return node->next;
   22fb4:	680c      	ldr	r4, [r1, #0]
   22fb6:	e007      	b.n	22fc8 <nrfx_gpio_handler+0x32>
   22fb8:	460c      	mov	r4, r1
   22fba:	e005      	b.n	22fc8 <nrfx_gpio_handler+0x32>
   22fbc:	b164      	cbz	r4, 22fd8 <nrfx_gpio_handler+0x42>
   22fbe:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   22fc0:	b104      	cbz	r4, 22fc4 <nrfx_gpio_handler+0x2e>
	return node->next;
   22fc2:	6823      	ldr	r3, [r4, #0]
   22fc4:	4621      	mov	r1, r4
   22fc6:	461c      	mov	r4, r3
   22fc8:	b141      	cbz	r1, 22fdc <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   22fca:	688a      	ldr	r2, [r1, #8]
   22fcc:	402a      	ands	r2, r5
   22fce:	d0f5      	beq.n	22fbc <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   22fd0:	684b      	ldr	r3, [r1, #4]
   22fd2:	4630      	mov	r0, r6
   22fd4:	4798      	blx	r3
   22fd6:	e7f1      	b.n	22fbc <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22fd8:	4623      	mov	r3, r4
   22fda:	e7f3      	b.n	22fc4 <nrfx_gpio_handler+0x2e>
}
   22fdc:	bd70      	pop	{r4, r5, r6, pc}

00022fde <endtx_isr>:
	return dev->config;
   22fde:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   22fe0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   22fe2:	f04f 0140 	mov.w	r1, #64	; 0x40
   22fe6:	f3ef 8211 	mrs	r2, BASEPRI
   22fea:	f381 8812 	msr	BASEPRI_MAX, r1
   22fee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22ff2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   22ff6:	b131      	cbz	r1, 23006 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22ff8:	2100      	movs	r1, #0
   22ffa:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   22ffe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23002:	2101      	movs	r1, #1
   23004:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   23006:	f382 8811 	msr	BASEPRI, r2
   2300a:	f3bf 8f6f 	isb	sy
}
   2300e:	4770      	bx	lr

00023010 <uarte_nrfx_isr_int>:
{
   23010:	b538      	push	{r3, r4, r5, lr}
   23012:	4604      	mov	r4, r0
	return dev->config;
   23014:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23016:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   23018:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2301c:	f413 7f80 	tst.w	r3, #256	; 0x100
   23020:	d002      	beq.n	23028 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23022:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   23026:	b9db      	cbnz	r3, 23060 <uarte_nrfx_isr_int+0x50>
	return dev->config;
   23028:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2302a:	685b      	ldr	r3, [r3, #4]
   2302c:	f013 0f10 	tst.w	r3, #16
   23030:	d015      	beq.n	2305e <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   23032:	f04f 0240 	mov.w	r2, #64	; 0x40
   23036:	f3ef 8311 	mrs	r3, BASEPRI
   2303a:	f382 8812 	msr	BASEPRI_MAX, r2
   2303e:	f3bf 8f6f 	isb	sy
   23042:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   23046:	b112      	cbz	r2, 2304e <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   23048:	2200      	movs	r2, #0
   2304a:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2304e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   23052:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   23056:	f383 8811 	msr	BASEPRI, r3
   2305a:	f3bf 8f6f 	isb	sy
}
   2305e:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   23060:	f7ff ffbd 	bl	22fde <endtx_isr>
   23064:	e7e0      	b.n	23028 <uarte_nrfx_isr_int+0x18>

00023066 <uarte_nrfx_configure>:
{
   23066:	b570      	push	{r4, r5, r6, lr}
   23068:	b082      	sub	sp, #8
   2306a:	4605      	mov	r5, r0
   2306c:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   2306e:	794b      	ldrb	r3, [r1, #5]
   23070:	2b01      	cmp	r3, #1
   23072:	d006      	beq.n	23082 <uarte_nrfx_configure+0x1c>
   23074:	2b03      	cmp	r3, #3
   23076:	d011      	beq.n	2309c <uarte_nrfx_configure+0x36>
   23078:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2307c:	4618      	mov	r0, r3
   2307e:	b002      	add	sp, #8
   23080:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   23082:	2300      	movs	r3, #0
   23084:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   23088:	79a3      	ldrb	r3, [r4, #6]
   2308a:	2b03      	cmp	r3, #3
   2308c:	d138      	bne.n	23100 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   2308e:	79e3      	ldrb	r3, [r4, #7]
   23090:	b143      	cbz	r3, 230a4 <uarte_nrfx_configure+0x3e>
   23092:	2b01      	cmp	r3, #1
   23094:	d010      	beq.n	230b8 <uarte_nrfx_configure+0x52>
   23096:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2309a:	e7ef      	b.n	2307c <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2309c:	2310      	movs	r3, #16
   2309e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   230a2:	e7f1      	b.n	23088 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   230a4:	2300      	movs	r3, #0
   230a6:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   230aa:	7923      	ldrb	r3, [r4, #4]
   230ac:	b143      	cbz	r3, 230c0 <uarte_nrfx_configure+0x5a>
   230ae:	2b02      	cmp	r3, #2
   230b0:	d022      	beq.n	230f8 <uarte_nrfx_configure+0x92>
   230b2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   230b6:	e7e1      	b.n	2307c <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   230b8:	2301      	movs	r3, #1
   230ba:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   230be:	e7f4      	b.n	230aa <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   230c0:	2300      	movs	r3, #0
   230c2:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   230c6:	6821      	ldr	r1, [r4, #0]
   230c8:	4628      	mov	r0, r5
   230ca:	f7f6 fa89 	bl	195e0 <baudrate_set>
   230ce:	4603      	mov	r3, r0
   230d0:	b9c8      	cbnz	r0, 23106 <uarte_nrfx_configure+0xa0>
	return dev->config;
   230d2:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   230d4:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   230d6:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   230da:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   230de:	f89d 2004 	ldrb.w	r2, [sp, #4]
   230e2:	4331      	orrs	r1, r6
   230e4:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   230e6:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   230ea:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   230ec:	3204      	adds	r2, #4
   230ee:	e894 0003 	ldmia.w	r4, {r0, r1}
   230f2:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   230f6:	e7c1      	b.n	2307c <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   230f8:	230e      	movs	r3, #14
   230fa:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   230fe:	e7e2      	b.n	230c6 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   23100:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23104:	e7ba      	b.n	2307c <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   23106:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2310a:	e7b7      	b.n	2307c <uarte_nrfx_configure+0x16>

0002310c <uarte_nrfx_config_get>:
{
   2310c:	460b      	mov	r3, r1
	return dev->data;
   2310e:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   23110:	6891      	ldr	r1, [r2, #8]
   23112:	6850      	ldr	r0, [r2, #4]
   23114:	e883 0003 	stmia.w	r3, {r0, r1}
}
   23118:	2000      	movs	r0, #0
   2311a:	4770      	bx	lr

0002311c <uarte_nrfx_err_check>:
	return dev->config;
   2311c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2311e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23120:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23124:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   23128:	4770      	bx	lr

0002312a <is_tx_ready>:
	return dev->config;
   2312a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2312c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2312e:	685b      	ldr	r3, [r3, #4]
   23130:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23134:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   23138:	b929      	cbnz	r1, 23146 <is_tx_ready+0x1c>
   2313a:	b933      	cbnz	r3, 2314a <is_tx_ready+0x20>
   2313c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   23140:	b92b      	cbnz	r3, 2314e <is_tx_ready+0x24>
   23142:	2000      	movs	r0, #0
   23144:	4770      	bx	lr
   23146:	2001      	movs	r0, #1
   23148:	4770      	bx	lr
   2314a:	2000      	movs	r0, #0
   2314c:	4770      	bx	lr
   2314e:	2001      	movs	r0, #1
}
   23150:	4770      	bx	lr

00023152 <uarte_enable>:
	return dev->config;
   23152:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23154:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   23156:	2208      	movs	r2, #8
   23158:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2315c:	4770      	bx	lr

0002315e <tx_start>:
{
   2315e:	b510      	push	{r4, lr}
	return dev->config;
   23160:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23162:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23164:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   23168:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2316c:	2300      	movs	r3, #0
   2316e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   23172:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   23176:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   2317a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   2317e:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   23180:	685b      	ldr	r3, [r3, #4]
   23182:	f013 0f10 	tst.w	r3, #16
   23186:	d102      	bne.n	2318e <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23188:	2301      	movs	r3, #1
   2318a:	60a3      	str	r3, [r4, #8]
}
   2318c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2318e:	2101      	movs	r1, #1
   23190:	f7ff ffdf 	bl	23152 <uarte_enable>
    p_reg->INTENSET = mask;
   23194:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   23198:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2319c:	e7f4      	b.n	23188 <tx_start+0x2a>

0002319e <uarte_nrfx_poll_in>:
{
   2319e:	b410      	push	{r4}
	return dev->data;
   231a0:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   231a2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   231a4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   231a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   231aa:	b152      	cbz	r2, 231c2 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   231ac:	7c62      	ldrb	r2, [r4, #17]
   231ae:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   231b0:	2000      	movs	r0, #0
   231b2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   231b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   231ba:	2201      	movs	r2, #1
   231bc:	601a      	str	r2, [r3, #0]
}
   231be:	bc10      	pop	{r4}
   231c0:	4770      	bx	lr
		return -1;
   231c2:	f04f 30ff 	mov.w	r0, #4294967295
   231c6:	e7fa      	b.n	231be <uarte_nrfx_poll_in+0x20>

000231c8 <wait_tx_ready>:
{
   231c8:	b570      	push	{r4, r5, r6, lr}
   231ca:	4606      	mov	r6, r0
   231cc:	e014      	b.n	231f8 <wait_tx_ready+0x30>
		if (res) {
   231ce:	b17d      	cbz	r5, 231f0 <wait_tx_ready+0x28>
	__asm__ volatile(
   231d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   231d4:	f3ef 8411 	mrs	r4, BASEPRI
   231d8:	f383 8812 	msr	BASEPRI_MAX, r3
   231dc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   231e0:	4630      	mov	r0, r6
   231e2:	f7ff ffa2 	bl	2312a <is_tx_ready>
   231e6:	b9a0      	cbnz	r0, 23212 <wait_tx_ready+0x4a>
	__asm__ volatile(
   231e8:	f384 8811 	msr	BASEPRI, r4
   231ec:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   231f0:	2021      	movs	r0, #33	; 0x21
   231f2:	2100      	movs	r1, #0
   231f4:	f7f9 faac 	bl	1c750 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   231f8:	2464      	movs	r4, #100	; 0x64
   231fa:	4630      	mov	r0, r6
   231fc:	f7ff ff95 	bl	2312a <is_tx_ready>
   23200:	4605      	mov	r5, r0
   23202:	2800      	cmp	r0, #0
   23204:	d1e3      	bne.n	231ce <wait_tx_ready+0x6>
   23206:	2001      	movs	r0, #1
   23208:	f000 fcbf 	bl	23b8a <nrfx_busy_wait>
   2320c:	3c01      	subs	r4, #1
   2320e:	d1f4      	bne.n	231fa <wait_tx_ready+0x32>
   23210:	e7dd      	b.n	231ce <wait_tx_ready+0x6>
}
   23212:	4620      	mov	r0, r4
   23214:	bd70      	pop	{r4, r5, r6, pc}

00023216 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   23216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23218:	4604      	mov	r4, r0
	return dev->config;
   2321a:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   2321c:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   2321e:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   23220:	2100      	movs	r1, #0
   23222:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   23226:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   23228:	f7f6 f90c 	bl	19444 <uarte_nrfx_pins_configure>
	return dev->data;
   2322c:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2322e:	3104      	adds	r1, #4
   23230:	4620      	mov	r0, r4
   23232:	f7ff ff18 	bl	23066 <uarte_nrfx_configure>
	if (err) {
   23236:	4604      	mov	r4, r0
   23238:	bb68      	cbnz	r0, 23296 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2323a:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2323c:	f013 0f02 	tst.w	r3, #2
   23240:	d12b      	bne.n	2329a <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   23242:	2308      	movs	r3, #8
   23244:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   23248:	7a33      	ldrb	r3, [r6, #8]
   2324a:	b95b      	cbnz	r3, 23264 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2324c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   23250:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   23254:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   23258:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2325c:	2301      	movs	r3, #1
   2325e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23262:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   23264:	6873      	ldr	r3, [r6, #4]
   23266:	f013 0f02 	tst.w	r3, #2
   2326a:	d103      	bne.n	23274 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   2326c:	f44f 7380 	mov.w	r3, #256	; 0x100
   23270:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   23274:	6873      	ldr	r3, [r6, #4]
   23276:	f013 0f10 	tst.w	r3, #16
   2327a:	d003      	beq.n	23284 <uarte_instance_init+0x6e>
   2327c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   23280:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   23284:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23286:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2328a:	2300      	movs	r3, #0
   2328c:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23290:	2301      	movs	r3, #1
   23292:	60ab      	str	r3, [r5, #8]
   23294:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   23296:	4620      	mov	r0, r4
   23298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   2329a:	4639      	mov	r1, r7
   2329c:	4628      	mov	r0, r5
   2329e:	f7f6 fa7f 	bl	197a0 <endtx_stoptx_ppi_init>
		if (err < 0) {
   232a2:	2800      	cmp	r0, #0
   232a4:	dacd      	bge.n	23242 <uarte_instance_init+0x2c>
			return err;
   232a6:	4604      	mov	r4, r0
   232a8:	e7f5      	b.n	23296 <uarte_instance_init+0x80>

000232aa <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   232aa:	b510      	push	{r4, lr}
   232ac:	4604      	mov	r4, r0
   232ae:	2200      	movs	r2, #0
   232b0:	2101      	movs	r1, #1
   232b2:	2002      	movs	r0, #2
   232b4:	f7ef fa58 	bl	12768 <z_arm_irq_priority_set>
   232b8:	2002      	movs	r0, #2
   232ba:	f7ef fa23 	bl	12704 <arch_irq_enable>
   232be:	2100      	movs	r1, #0
   232c0:	4620      	mov	r0, r4
   232c2:	f7ff ffa8 	bl	23216 <uarte_instance_init>
   232c6:	bd10      	pop	{r4, pc}

000232c8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   232c8:	b510      	push	{r4, lr}
   232ca:	4604      	mov	r4, r0
   232cc:	2200      	movs	r2, #0
   232ce:	2101      	movs	r1, #1
   232d0:	2028      	movs	r0, #40	; 0x28
   232d2:	f7ef fa49 	bl	12768 <z_arm_irq_priority_set>
   232d6:	2028      	movs	r0, #40	; 0x28
   232d8:	f7ef fa14 	bl	12704 <arch_irq_enable>
   232dc:	2100      	movs	r1, #0
   232de:	4620      	mov	r0, r4
   232e0:	f7ff ff99 	bl	23216 <uarte_instance_init>
   232e4:	bd10      	pop	{r4, pc}

000232e6 <rng_pool_put>:
{
   232e6:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   232e8:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   232ea:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   232ec:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   232ee:	1a9a      	subs	r2, r3, r2
   232f0:	ea34 0202 	bics.w	r2, r4, r2
   232f4:	d008      	beq.n	23308 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   232f6:	18c2      	adds	r2, r0, r3
   232f8:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   232fa:	3301      	adds	r3, #1
   232fc:	b25b      	sxtb	r3, r3
   232fe:	4023      	ands	r3, r4
   23300:	7083      	strb	r3, [r0, #2]
	return 0;
   23302:	2000      	movs	r0, #0
}
   23304:	bc10      	pop	{r4}
   23306:	4770      	bx	lr
		return -ENOBUFS;
   23308:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2330c:	e7fa      	b.n	23304 <rng_pool_put+0x1e>

0002330e <rng_pool_init>:
	rngp->first_alloc = 0U;
   2330e:	2300      	movs	r3, #0
   23310:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   23312:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   23314:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   23316:	3901      	subs	r1, #1
   23318:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2331a:	7102      	strb	r2, [r0, #4]
}
   2331c:	4770      	bx	lr

0002331e <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   2331e:	b5f0      	push	{r4, r5, r6, r7, lr}
   23320:	b083      	sub	sp, #12
   23322:	460f      	mov	r7, r1
   23324:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   23326:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2332a:	2400      	movs	r4, #0
	int res = -EINVAL;
   2332c:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   23330:	e00a      	b.n	23348 <entropy_cc3xx_rng_get_entropy+0x2a>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   23332:	ab01      	add	r3, sp, #4
   23334:	462a      	mov	r2, r5
   23336:	1939      	adds	r1, r7, r4
   23338:	2000      	movs	r0, #0
   2333a:	f7fa f84d 	bl	1d3d8 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   2333e:	9b01      	ldr	r3, [sp, #4]
   23340:	42ab      	cmp	r3, r5
   23342:	d109      	bne.n	23358 <entropy_cc3xx_rng_get_entropy+0x3a>
			return -EINVAL;
		}

		if (res != 0) {
   23344:	b950      	cbnz	r0, 2335c <entropy_cc3xx_rng_get_entropy+0x3e>
			break;
		}

		offset += chunk_size;
   23346:	442c      	add	r4, r5
	while (offset < length) {
   23348:	42a6      	cmp	r6, r4
   2334a:	d907      	bls.n	2335c <entropy_cc3xx_rng_get_entropy+0x3e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2334c:	1b33      	subs	r3, r6, r4
   2334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23352:	d2ee      	bcs.n	23332 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   23354:	461d      	mov	r5, r3
   23356:	e7ec      	b.n	23332 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   23358:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   2335c:	b003      	add	sp, #12
   2335e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023360 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   23360:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   23362:	2200      	movs	r2, #0
   23364:	4611      	mov	r1, r2
   23366:	4610      	mov	r0, r2
   23368:	f7fa f802 	bl	1d370 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   2336c:	b900      	cbnz	r0, 23370 <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   2336e:	bd08      	pop	{r3, pc}
			return -EINVAL;
   23370:	f06f 0015 	mvn.w	r0, #21
   23374:	e7fb      	b.n	2336e <entropy_cc3xx_rng_init+0xe>

00023376 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   23376:	4770      	bx	lr

00023378 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   23378:	1a40      	subs	r0, r0, r1
}
   2337a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2337e:	4770      	bx	lr

00023380 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   23380:	f100 0350 	add.w	r3, r0, #80	; 0x50
   23384:	009b      	lsls	r3, r3, #2
   23386:	b29b      	uxth	r3, r3
   23388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2338c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   23390:	2200      	movs	r2, #0
   23392:	601a      	str	r2, [r3, #0]
   23394:	681b      	ldr	r3, [r3, #0]
}
   23396:	4770      	bx	lr

00023398 <absolute_time_to_cc>:
}
   23398:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2339c:	4770      	bx	lr

0002339e <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2339e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   233a2:	b672      	cpsid	i
}
   233a4:	4770      	bx	lr

000233a6 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   233a6:	f380 8810 	msr	PRIMASK, r0
}
   233aa:	4770      	bx	lr

000233ac <set_absolute_alarm>:
{
   233ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233ae:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   233b0:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   233b4:	f7f6 fb80 	bl	19ab8 <get_comparator>
   233b8:	4607      	mov	r7, r0
   233ba:	e019      	b.n	233f0 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   233bc:	2013      	movs	r0, #19
   233be:	f001 f979 	bl	246b4 <z_impl_k_busy_wait>
}
   233c2:	e022      	b.n	2340a <set_absolute_alarm+0x5e>
		event_clear(chan);
   233c4:	4630      	mov	r0, r6
   233c6:	f7ff ffdb 	bl	23380 <event_clear>
		event_enable(chan);
   233ca:	4630      	mov	r0, r6
   233cc:	f7f6 fb7c 	bl	19ac8 <event_enable>
		set_comparator(chan, cc_val);
   233d0:	4629      	mov	r1, r5
   233d2:	4630      	mov	r0, r6
   233d4:	f7f6 fb66 	bl	19aa4 <set_comparator>
		now2 = counter();
   233d8:	f7f6 fb8a 	bl	19af0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   233dc:	4284      	cmp	r4, r0
   233de:	d01e      	beq.n	2341e <set_absolute_alarm+0x72>
   233e0:	1c81      	adds	r1, r0, #2
   233e2:	4628      	mov	r0, r5
   233e4:	f7ff ffc8 	bl	23378 <counter_sub>
	} while ((now2 != now) &&
   233e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   233ec:	d917      	bls.n	2341e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   233ee:	462f      	mov	r7, r5
		now = counter();
   233f0:	f7f6 fb7e 	bl	19af0 <counter>
   233f4:	4604      	mov	r4, r0
		set_comparator(chan, now);
   233f6:	4601      	mov	r1, r0
   233f8:	4630      	mov	r0, r6
   233fa:	f7f6 fb53 	bl	19aa4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   233fe:	4621      	mov	r1, r4
   23400:	4638      	mov	r0, r7
   23402:	f7ff ffb9 	bl	23378 <counter_sub>
   23406:	2801      	cmp	r0, #1
   23408:	d0d8      	beq.n	233bc <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2340a:	1ca7      	adds	r7, r4, #2
   2340c:	4639      	mov	r1, r7
   2340e:	4628      	mov	r0, r5
   23410:	f7ff ffb2 	bl	23378 <counter_sub>
   23414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   23418:	d9d4      	bls.n	233c4 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   2341a:	463d      	mov	r5, r7
   2341c:	e7d2      	b.n	233c4 <set_absolute_alarm+0x18>
}
   2341e:	4628      	mov	r0, r5
   23420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023422 <compare_set>:
{
   23422:	b5f0      	push	{r4, r5, r6, r7, lr}
   23424:	b083      	sub	sp, #12
   23426:	4604      	mov	r4, r0
   23428:	4617      	mov	r7, r2
   2342a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2342c:	f7f6 fb66 	bl	19afc <compare_int_lock>
   23430:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   23432:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23434:	9301      	str	r3, [sp, #4]
   23436:	9b08      	ldr	r3, [sp, #32]
   23438:	9300      	str	r3, [sp, #0]
   2343a:	463a      	mov	r2, r7
   2343c:	462b      	mov	r3, r5
   2343e:	4620      	mov	r0, r4
   23440:	f7f6 fc4a 	bl	19cd8 <compare_set_nolocks>
   23444:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   23446:	4631      	mov	r1, r6
   23448:	4620      	mov	r0, r4
   2344a:	f7f6 fbbb 	bl	19bc4 <compare_int_unlock>
}
   2344e:	4628      	mov	r0, r5
   23450:	b003      	add	sp, #12
   23452:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023454 <sys_clock_cycle_get_32>:
{
   23454:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   23456:	f7f6 fc1f 	bl	19c98 <z_nrf_rtc_timer_read>
}
   2345a:	bd08      	pop	{r3, pc}

0002345c <event_packet_is_discardable>:
	switch (hdr->evt) {
   2345c:	7803      	ldrb	r3, [r0, #0]
   2345e:	2b3e      	cmp	r3, #62	; 0x3e
   23460:	d003      	beq.n	2346a <event_packet_is_discardable+0xe>
   23462:	2bff      	cmp	r3, #255	; 0xff
   23464:	d008      	beq.n	23478 <event_packet_is_discardable+0x1c>
   23466:	2000      	movs	r0, #0
   23468:	4770      	bx	lr
		switch (me->subevent) {
   2346a:	7883      	ldrb	r3, [r0, #2]
   2346c:	2b02      	cmp	r3, #2
   2346e:	d001      	beq.n	23474 <event_packet_is_discardable+0x18>
			return false;
   23470:	2000      	movs	r0, #0
   23472:	4770      	bx	lr
			return true;
   23474:	2001      	movs	r0, #1
   23476:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   23478:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2347a:	2b80      	cmp	r3, #128	; 0x80
   2347c:	d001      	beq.n	23482 <event_packet_is_discardable+0x26>
			return false;
   2347e:	2000      	movs	r0, #0
}
   23480:	4770      	bx	lr
			return true;
   23482:	2001      	movs	r0, #1
   23484:	4770      	bx	lr

00023486 <hci_driver_send>:
{
   23486:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   23488:	8983      	ldrh	r3, [r0, #12]
   2348a:	b183      	cbz	r3, 234ae <hci_driver_send+0x28>
   2348c:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2348e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   23490:	b14b      	cbz	r3, 234a6 <hci_driver_send+0x20>
   23492:	2b02      	cmp	r3, #2
   23494:	d10e      	bne.n	234b4 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   23496:	f7f6 fdcb 	bl	1a030 <acl_handle>
   2349a:	4605      	mov	r5, r0
	if (!err) {
   2349c:	b965      	cbnz	r5, 234b8 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2349e:	4620      	mov	r0, r4
   234a0:	f7ff fb96 	bl	22bd0 <net_buf_unref>
   234a4:	e008      	b.n	234b8 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   234a6:	f7f6 fddd 	bl	1a064 <cmd_handle>
   234aa:	4605      	mov	r5, r0
		break;
   234ac:	e7f6      	b.n	2349c <hci_driver_send+0x16>
		return -EINVAL;
   234ae:	f06f 0515 	mvn.w	r5, #21
   234b2:	e001      	b.n	234b8 <hci_driver_send+0x32>
	switch (type) {
   234b4:	f06f 0515 	mvn.w	r5, #21
}
   234b8:	4628      	mov	r0, r5
   234ba:	bd38      	pop	{r3, r4, r5, pc}

000234bc <fetch_and_process_hci_evt>:
{
   234bc:	b538      	push	{r3, r4, r5, lr}
   234be:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   234c0:	f04f 30ff 	mov.w	r0, #4294967295
   234c4:	f04f 31ff 	mov.w	r1, #4294967295
   234c8:	f7f6 fd40 	bl	19f4c <multithreading_lock_acquire>
	if (!errcode) {
   234cc:	4605      	mov	r5, r0
   234ce:	b110      	cbz	r0, 234d6 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   234d0:	b145      	cbz	r5, 234e4 <fetch_and_process_hci_evt+0x28>
		return false;
   234d2:	2000      	movs	r0, #0
}
   234d4:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   234d6:	4620      	mov	r0, r4
   234d8:	f7f6 ffb2 	bl	1a440 <hci_internal_evt_get>
   234dc:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   234de:	f7f6 fd3f 	bl	19f60 <multithreading_lock_release>
   234e2:	e7f5      	b.n	234d0 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   234e4:	4620      	mov	r0, r4
   234e6:	f7f6 fdff 	bl	1a0e8 <event_packet_process>
	return true;
   234ea:	2001      	movs	r0, #1
   234ec:	e7f2      	b.n	234d4 <fetch_and_process_hci_evt+0x18>

000234ee <fetch_and_process_acl_data>:
{
   234ee:	b538      	push	{r3, r4, r5, lr}
   234f0:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   234f2:	f04f 30ff 	mov.w	r0, #4294967295
   234f6:	f04f 31ff 	mov.w	r1, #4294967295
   234fa:	f7f6 fd27 	bl	19f4c <multithreading_lock_acquire>
	if (!errcode) {
   234fe:	4605      	mov	r5, r0
   23500:	b110      	cbz	r0, 23508 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   23502:	b145      	cbz	r5, 23516 <fetch_and_process_acl_data+0x28>
		return false;
   23504:	2000      	movs	r0, #0
}
   23506:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   23508:	4620      	mov	r0, r4
   2350a:	f7e9 fc5f 	bl	cdcc <sdc_hci_data_get>
   2350e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   23510:	f7f6 fd26 	bl	19f60 <multithreading_lock_release>
   23514:	e7f5      	b.n	23502 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   23516:	4620      	mov	r0, r4
   23518:	f7f6 fe1e 	bl	1a158 <data_packet_process>
	return true;
   2351c:	2001      	movs	r0, #1
   2351e:	e7f2      	b.n	23506 <fetch_and_process_acl_data+0x18>

00023520 <configure_supported_features>:
{
   23520:	b508      	push	{r3, lr}
			err = sdc_support_scan();
   23522:	f7e0 fc91 	bl	3e48 <sdc_support_scan>
			if (err) {
   23526:	b948      	cbnz	r0, 2353c <configure_supported_features+0x1c>
		err = sdc_support_master();
   23528:	f7e0 fc7e 	bl	3e28 <sdc_support_master>
		if (err) {
   2352c:	b948      	cbnz	r0, 23542 <configure_supported_features+0x22>
		err = sdc_support_dle();
   2352e:	f7e0 fc5b 	bl	3de8 <sdc_support_dle>
		if (err) {
   23532:	b948      	cbnz	r0, 23548 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   23534:	f7e0 fc68 	bl	3e08 <sdc_support_le_2m_phy>
		if (err) {
   23538:	b948      	cbnz	r0, 2354e <configure_supported_features+0x2e>
}
   2353a:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2353c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23540:	e7fb      	b.n	2353a <configure_supported_features+0x1a>
			return -ENOTSUP;
   23542:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23546:	e7f8      	b.n	2353a <configure_supported_features+0x1a>
			return -ENOTSUP;
   23548:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2354c:	e7f5      	b.n	2353a <configure_supported_features+0x1a>
			return -ENOTSUP;
   2354e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23552:	e7f2      	b.n	2353a <configure_supported_features+0x1a>

00023554 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   23554:	f242 0344 	movw	r3, #8260	; 0x2044
   23558:	4298      	cmp	r0, r3
   2355a:	d834      	bhi.n	235c6 <command_generates_command_complete_event+0x72>
   2355c:	f242 030d 	movw	r3, #8205	; 0x200d
   23560:	4298      	cmp	r0, r3
   23562:	d20b      	bcs.n	2357c <command_generates_command_complete_event+0x28>
   23564:	f240 4306 	movw	r3, #1030	; 0x406
   23568:	4298      	cmp	r0, r3
   2356a:	d02e      	beq.n	235ca <command_generates_command_complete_event+0x76>
   2356c:	f240 431d 	movw	r3, #1053	; 0x41d
   23570:	4298      	cmp	r0, r3
   23572:	d001      	beq.n	23578 <command_generates_command_complete_event+0x24>
		return true;
   23574:	2001      	movs	r0, #1
   23576:	4770      	bx	lr
	switch (hci_opcode) {
   23578:	2000      	movs	r0, #0
   2357a:	4770      	bx	lr
   2357c:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   23580:	380d      	subs	r0, #13
   23582:	2837      	cmp	r0, #55	; 0x37
   23584:	d823      	bhi.n	235ce <command_generates_command_complete_event+0x7a>
   23586:	e8df f000 	tbb	[pc, r0]
   2358a:	221c      	.short	0x221c
   2358c:	22222222 	.word	0x22222222
   23590:	1c22221c 	.word	0x1c22221c
   23594:	221c2222 	.word	0x221c2222
   23598:	22222222 	.word	0x22222222
   2359c:	22222222 	.word	0x22222222
   235a0:	22222222 	.word	0x22222222
   235a4:	22222222 	.word	0x22222222
   235a8:	22222222 	.word	0x22222222
   235ac:	1c222222 	.word	0x1c222222
   235b0:	22222222 	.word	0x22222222
   235b4:	22222222 	.word	0x22222222
   235b8:	22222222 	.word	0x22222222
   235bc:	22222222 	.word	0x22222222
   235c0:	1c1c      	.short	0x1c1c
   235c2:	2000      	movs	r0, #0
   235c4:	4770      	bx	lr
		return true;
   235c6:	2001      	movs	r0, #1
   235c8:	4770      	bx	lr
	switch (hci_opcode) {
   235ca:	2000      	movs	r0, #0
   235cc:	4770      	bx	lr
		return true;
   235ce:	2001      	movs	r0, #1
}
   235d0:	4770      	bx	lr

000235d2 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   235d2:	230f      	movs	r3, #15
   235d4:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   235d6:	2304      	movs	r3, #4
   235d8:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   235da:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   235dc:	2301      	movs	r3, #1
   235de:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   235e0:	8081      	strh	r1, [r0, #4]
}
   235e2:	4770      	bx	lr

000235e4 <encode_command_complete_header>:
{
   235e4:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   235e6:	240e      	movs	r4, #14
   235e8:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   235ea:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   235ec:	2201      	movs	r2, #1
   235ee:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   235f0:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   235f4:	7143      	strb	r3, [r0, #5]
}
   235f6:	bc10      	pop	{r4}
   235f8:	4770      	bx	lr

000235fa <le_read_supported_states>:
	*buf = states1;
   235fa:	2370      	movs	r3, #112	; 0x70
   235fc:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   235fe:	2340      	movs	r3, #64	; 0x40
   23600:	7103      	strb	r3, [r0, #4]
}
   23602:	4770      	bx	lr

00023604 <status_param_cmd_put>:
}
   23604:	2001      	movs	r0, #1
   23606:	4770      	bx	lr

00023608 <link_control_cmd_put>:
{
   23608:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2360a:	7842      	ldrb	r2, [r0, #1]
   2360c:	f810 3b03 	ldrb.w	r3, [r0], #3
   23610:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23614:	b21b      	sxth	r3, r3
	switch (opcode)	{
   23616:	f240 4206 	movw	r2, #1030	; 0x406
   2361a:	4293      	cmp	r3, r2
   2361c:	d005      	beq.n	2362a <link_control_cmd_put+0x22>
   2361e:	f240 421d 	movw	r2, #1053	; 0x41d
   23622:	4293      	cmp	r3, r2
   23624:	d004      	beq.n	23630 <link_control_cmd_put+0x28>
   23626:	2001      	movs	r0, #1
}
   23628:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2362a:	f7e9 fd26 	bl	d07a <sdc_hci_cmd_lc_disconnect>
   2362e:	e7fb      	b.n	23628 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   23630:	f7e9 fd25 	bl	d07e <sdc_hci_cmd_lc_read_remote_version_information>
   23634:	e7f8      	b.n	23628 <link_control_cmd_put+0x20>

00023636 <controller_and_baseband_cmd_put>:
{
   23636:	b538      	push	{r3, r4, r5, lr}
   23638:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2363a:	3003      	adds	r0, #3
   2363c:	7865      	ldrb	r5, [r4, #1]
   2363e:	7823      	ldrb	r3, [r4, #0]
   23640:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   23644:	b21b      	sxth	r3, r3
	switch (opcode)	{
   23646:	f640 4463 	movw	r4, #3171	; 0xc63
   2364a:	42a3      	cmp	r3, r4
   2364c:	d02c      	beq.n	236a8 <controller_and_baseband_cmd_put+0x72>
   2364e:	f101 0106 	add.w	r1, r1, #6
   23652:	dc16      	bgt.n	23682 <controller_and_baseband_cmd_put+0x4c>
   23654:	f640 4403 	movw	r4, #3075	; 0xc03
   23658:	42a3      	cmp	r3, r4
   2365a:	d022      	beq.n	236a2 <controller_and_baseband_cmd_put+0x6c>
   2365c:	f640 442d 	movw	r4, #3117	; 0xc2d
   23660:	42a3      	cmp	r3, r4
   23662:	d105      	bne.n	23670 <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   23664:	7813      	ldrb	r3, [r2, #0]
   23666:	3303      	adds	r3, #3
   23668:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2366a:	f7e9 fbd6 	bl	ce1a <sdc_hci_cmd_cb_read_transmit_power_level>
   2366e:	e007      	b.n	23680 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   23670:	f640 4201 	movw	r2, #3073	; 0xc01
   23674:	4293      	cmp	r3, r2
   23676:	d102      	bne.n	2367e <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   23678:	f7e9 fbd1 	bl	ce1e <sdc_hci_cmd_cb_set_event_mask>
   2367c:	e000      	b.n	23680 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2367e:	2001      	movs	r0, #1
}
   23680:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   23682:	f640 447b 	movw	r4, #3195	; 0xc7b
   23686:	42a3      	cmp	r3, r4
   23688:	d011      	beq.n	236ae <controller_and_baseband_cmd_put+0x78>
   2368a:	f640 447c 	movw	r4, #3196	; 0xc7c
   2368e:	42a3      	cmp	r3, r4
   23690:	d105      	bne.n	2369e <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   23692:	7813      	ldrb	r3, [r2, #0]
   23694:	3302      	adds	r3, #2
   23696:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   23698:	f7e9 fbcb 	bl	ce32 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2369c:	e7f0      	b.n	23680 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2369e:	2001      	movs	r0, #1
   236a0:	e7ee      	b.n	23680 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   236a2:	f7e0 fd11 	bl	40c8 <sdc_hci_cmd_cb_reset>
   236a6:	e7eb      	b.n	23680 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   236a8:	f7e9 fbbe 	bl	ce28 <sdc_hci_cmd_cb_set_event_mask_page_2>
   236ac:	e7e8      	b.n	23680 <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   236ae:	7813      	ldrb	r3, [r2, #0]
   236b0:	3304      	adds	r3, #4
   236b2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   236b4:	f7e9 fbaf 	bl	ce16 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   236b8:	e7e2      	b.n	23680 <controller_and_baseband_cmd_put+0x4a>

000236ba <supported_commands>:
{
   236ba:	b510      	push	{r4, lr}
   236bc:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   236be:	222e      	movs	r2, #46	; 0x2e
   236c0:	2100      	movs	r1, #0
   236c2:	f001 f941 	bl	24948 <memset>
	cmds->hci_disconnect = 1;
   236c6:	2320      	movs	r3, #32
   236c8:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   236ca:	2380      	movs	r3, #128	; 0x80
   236cc:	70a3      	strb	r3, [r4, #2]
	cmds->hci_reset = 1;
   236ce:	23c0      	movs	r3, #192	; 0xc0
   236d0:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   236d2:	2304      	movs	r3, #4
   236d4:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_supported_features = 1;
   236d6:	2328      	movs	r3, #40	; 0x28
   236d8:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   236da:	2302      	movs	r3, #2
   236dc:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   236de:	2304      	movs	r3, #4
   236e0:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_random_address = 1;
   236e2:	2317      	movs	r3, #23
   236e4:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_clear_white_list = 1;
   236e6:	23fc      	movs	r3, #252	; 0xfc
   236e8:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_rand = 1;
   236ea:	23ff      	movs	r3, #255	; 0xff
   236ec:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_test_end = 1;
   236ee:	2379      	movs	r3, #121	; 0x79
   236f0:	7723      	strb	r3, [r4, #28]
	cmds->hci_write_authenticated_payload_timeout = 1;
   236f2:	2330      	movs	r3, #48	; 0x30
   236f4:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_read_suggested_default_data_length = 1;
   236f8:	23c0      	movs	r3, #192	; 0xc0
   236fa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_resolving_list_size = 1;
   236fe:	2379      	movs	r3, #121	; 0x79
   23700:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_receiver_test_v2 = 1;
   23704:	23fe      	movs	r3, #254	; 0xfe
   23706:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2370a:	2301      	movs	r3, #1
   2370c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   23710:	2380      	movs	r3, #128	; 0x80
   23712:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   23716:	2304      	movs	r3, #4
   23718:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   2371c:	bd10      	pop	{r4, pc}

0002371e <supported_features>:
   2371e:	2300      	movs	r3, #0
   23720:	6003      	str	r3, [r0, #0]
   23722:	6043      	str	r3, [r0, #4]
	features->bdedr_not_supported = 1;
   23724:	7903      	ldrb	r3, [r0, #4]
	features->le_supported = 1;
   23726:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2372a:	7103      	strb	r3, [r0, #4]
}
   2372c:	4770      	bx	lr

0002372e <info_param_cmd_put>:
{
   2372e:	b538      	push	{r3, r4, r5, lr}
   23730:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   23732:	1d88      	adds	r0, r1, #6
   23734:	7865      	ldrb	r5, [r4, #1]
   23736:	7823      	ldrb	r3, [r4, #0]
   23738:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2373c:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2373e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   23742:	3b01      	subs	r3, #1
   23744:	2b08      	cmp	r3, #8
   23746:	d820      	bhi.n	2378a <info_param_cmd_put+0x5c>
   23748:	e8df f003 	tbb	[pc, r3]
   2374c:	1f120b05 	.word	0x1f120b05
   23750:	1f1f1f1f 	.word	0x1f1f1f1f
   23754:	19          	.byte	0x19
   23755:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   23756:	7813      	ldrb	r3, [r2, #0]
   23758:	3308      	adds	r3, #8
   2375a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2375c:	f7e9 fc46 	bl	cfec <sdc_hci_cmd_ip_read_local_version_information>
   23760:	e014      	b.n	2378c <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   23762:	7813      	ldrb	r3, [r2, #0]
   23764:	3340      	adds	r3, #64	; 0x40
   23766:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   23768:	f7ff ffa7 	bl	236ba <supported_commands>
		return 0;
   2376c:	2000      	movs	r0, #0
   2376e:	e00d      	b.n	2378c <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   23770:	7813      	ldrb	r3, [r2, #0]
   23772:	3308      	adds	r3, #8
   23774:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   23776:	f7ff ffd2 	bl	2371e <supported_features>
		return 0;
   2377a:	2000      	movs	r0, #0
   2377c:	e006      	b.n	2378c <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2377e:	7813      	ldrb	r3, [r2, #0]
   23780:	3306      	adds	r3, #6
   23782:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   23784:	f7e9 fc30 	bl	cfe8 <sdc_hci_cmd_ip_read_bd_addr>
   23788:	e000      	b.n	2378c <info_param_cmd_put+0x5e>
   2378a:	2001      	movs	r0, #1
}
   2378c:	bd38      	pop	{r3, r4, r5, pc}

0002378e <le_supported_features>:
   2378e:	2300      	movs	r3, #0
   23790:	6003      	str	r3, [r0, #0]
   23792:	7103      	strb	r3, [r0, #4]
	features->le_encryption = 1;
   23794:	7803      	ldrb	r3, [r0, #0]
	features->extended_scanner_filter_policies = 1;
   23796:	f043 03f5 	orr.w	r3, r3, #245	; 0xf5
   2379a:	7003      	strb	r3, [r0, #0]
	features->le_2m_phy = 1;
   2379c:	7843      	ldrb	r3, [r0, #1]
	features->channel_selection_algorithm_2 = 1;
   2379e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   237a2:	7043      	strb	r3, [r0, #1]
}
   237a4:	4770      	bx	lr

000237a6 <vs_zephyr_supported_commands>:
   237a6:	2300      	movs	r3, #0
   237a8:	8003      	strh	r3, [r0, #0]
	cmds->read_version_info = 1;
   237aa:	7803      	ldrb	r3, [r0, #0]
	cmds->write_bd_addr = 1;
   237ac:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   237b0:	7003      	strb	r3, [r0, #0]
	cmds->read_static_addresses = 1;
   237b2:	7843      	ldrb	r3, [r0, #1]
	cmds->read_chip_temperature = 1;
   237b4:	f043 0307 	orr.w	r3, r3, #7
   237b8:	7043      	strb	r3, [r0, #1]
}
   237ba:	4770      	bx	lr

000237bc <vs_supported_commands>:
	cmds->event_length_set = 1;
   237bc:	233f      	movs	r3, #63	; 0x3f
   237be:	7003      	strb	r3, [r0, #0]
}
   237c0:	4770      	bx	lr

000237c2 <le_controller_cmd_put>:
{
   237c2:	b538      	push	{r3, r4, r5, lr}
   237c4:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   237c6:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   237c8:	3106      	adds	r1, #6
   237ca:	7865      	ldrb	r5, [r4, #1]
   237cc:	7823      	ldrb	r3, [r4, #0]
   237ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   237d2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   237d4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   237d8:	3b01      	subs	r3, #1
   237da:	2b4d      	cmp	r3, #77	; 0x4d
   237dc:	f200 80c4 	bhi.w	23968 <le_controller_cmd_put+0x1a6>
   237e0:	e8df f003 	tbb	[pc, r3]
   237e4:	c2312a27 	.word	0xc2312a27
   237e8:	c2c2c239 	.word	0xc2c2c239
   237ec:	3f3cc2c2 	.word	0x3f3cc2c2
   237f0:	4f484542 	.word	0x4f484542
   237f4:	5b585552 	.word	0x5b585552
   237f8:	6d67645e 	.word	0x6d67645e
   237fc:	77c2c274 	.word	0x77c2c274
   23800:	c2c2c2c2 	.word	0xc2c2c2c2
   23804:	8c857fc2 	.word	0x8c857fc2
   23808:	928fc2c2 	.word	0x928fc2c2
   2380c:	c2c29895 	.word	0xc2c29895
   23810:	aca5a29f 	.word	0xaca5a29f
   23814:	c2c2b5b2 	.word	0xc2c2b5b2
   23818:	c2c2c2c2 	.word	0xc2c2c2c2
   2381c:	c2c2c2c2 	.word	0xc2c2c2c2
   23820:	c2c2c2c2 	.word	0xc2c2c2c2
   23824:	c2c2c2c2 	.word	0xc2c2c2c2
   23828:	c2c2c2c2 	.word	0xc2c2c2c2
   2382c:	c2b8c2c2 	.word	0xc2b8c2c2
   23830:	bfc2      	.short	0xbfc2
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   23832:	f7e9 fc0d 	bl	d050 <sdc_hci_cmd_le_set_event_mask>
   23836:	e098      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   23838:	7813      	ldrb	r3, [r2, #0]
   2383a:	3303      	adds	r3, #3
   2383c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2383e:	4608      	mov	r0, r1
   23840:	f7e9 fbea 	bl	d018 <sdc_hci_cmd_le_read_buffer_size>
   23844:	e091      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   23846:	7813      	ldrb	r3, [r2, #0]
   23848:	3308      	adds	r3, #8
   2384a:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2384c:	4608      	mov	r0, r1
   2384e:	f7ff ff9e 	bl	2378e <le_supported_features>
		return 0;
   23852:	2000      	movs	r0, #0
   23854:	e089      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   23856:	f7e9 fc06 	bl	d066 <sdc_hci_cmd_le_set_random_address>
   2385a:	e086      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2385c:	f7e9 fc09 	bl	d072 <sdc_hci_cmd_le_set_scan_params>
   23860:	e083      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   23862:	f7e9 fc04 	bl	d06e <sdc_hci_cmd_le_set_scan_enable>
   23866:	e080      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   23868:	f7e9 fbcc 	bl	d004 <sdc_hci_cmd_le_create_conn>
   2386c:	e07d      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn_cancel();
   2386e:	f7e9 fbcb 	bl	d008 <sdc_hci_cmd_le_create_conn_cancel>
   23872:	e07a      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   23874:	7813      	ldrb	r3, [r2, #0]
   23876:	3301      	adds	r3, #1
   23878:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   2387a:	4608      	mov	r0, r1
   2387c:	f7e9 fbdc 	bl	d038 <sdc_hci_cmd_le_read_white_list_size>
   23880:	e073      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_white_list();
   23882:	f7e9 fbbb 	bl	cffc <sdc_hci_cmd_le_clear_white_list>
   23886:	e070      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   23888:	f7e9 fbb4 	bl	cff4 <sdc_hci_cmd_le_add_device_to_white_list>
   2388c:	e06d      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   2388e:	f7e9 fbd7 	bl	d040 <sdc_hci_cmd_le_remove_device_from_white_list>
   23892:	e06a      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   23894:	f7e9 fbb4 	bl	d000 <sdc_hci_cmd_le_conn_update>
   23898:	e067      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   2389a:	f7e9 fbde 	bl	d05a <sdc_hci_cmd_le_set_host_channel_classification>
   2389e:	e064      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   238a0:	7813      	ldrb	r3, [r2, #0]
   238a2:	3307      	adds	r3, #7
   238a4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   238a6:	f7e9 fbb9 	bl	d01c <sdc_hci_cmd_le_read_channel_map>
   238aa:	e05e      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   238ac:	f7e9 fbbc 	bl	d028 <sdc_hci_cmd_le_read_remote_features>
   238b0:	e05b      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   238b2:	7813      	ldrb	r3, [r2, #0]
   238b4:	3310      	adds	r3, #16
   238b6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   238b8:	f7e9 fbaa 	bl	d010 <sdc_hci_cmd_le_encrypt>
   238bc:	e055      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   238be:	7813      	ldrb	r3, [r2, #0]
   238c0:	3308      	adds	r3, #8
   238c2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   238c4:	4608      	mov	r0, r1
   238c6:	f7e9 fba5 	bl	d014 <sdc_hci_cmd_le_rand>
   238ca:	e04e      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   238cc:	f7e9 fb9e 	bl	d00c <sdc_hci_cmd_le_enable_encryption>
   238d0:	e04b      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   238d2:	7813      	ldrb	r3, [r2, #0]
   238d4:	3308      	adds	r3, #8
   238d6:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   238d8:	4608      	mov	r0, r1
   238da:	f7ff fe8e 	bl	235fa <le_read_supported_states>
		return 0;
   238de:	2000      	movs	r0, #0
   238e0:	e043      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   238e2:	7813      	ldrb	r3, [r2, #0]
   238e4:	3302      	adds	r3, #2
   238e6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   238e8:	f7e9 fbae 	bl	d048 <sdc_hci_cmd_le_set_data_length>
   238ec:	e03d      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out +=
   238ee:	7813      	ldrb	r3, [r2, #0]
   238f0:	3304      	adds	r3, #4
   238f2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   238f4:	4608      	mov	r0, r1
   238f6:	f7e9 fb9b 	bl	d030 <sdc_hci_cmd_le_read_suggested_default_data_length>
   238fa:	e036      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   238fc:	f7e9 fbbb 	bl	d076 <sdc_hci_cmd_le_write_suggested_default_data_length>
   23900:	e033      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   23902:	f7e9 fb75 	bl	cff0 <sdc_hci_cmd_le_add_device_to_resolving_list>
   23906:	e030      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   23908:	f7e9 fb98 	bl	d03c <sdc_hci_cmd_le_remove_device_from_resolving_list>
   2390c:	e02d      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_resolving_list();
   2390e:	f7e9 fb73 	bl	cff8 <sdc_hci_cmd_le_clear_resolving_list>
   23912:	e02a      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   23914:	7813      	ldrb	r3, [r2, #0]
   23916:	3301      	adds	r3, #1
   23918:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2391a:	4608      	mov	r0, r1
   2391c:	f7e9 fb86 	bl	d02c <sdc_hci_cmd_le_read_resolving_list_size>
   23920:	e023      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   23922:	f7e9 fb8f 	bl	d044 <sdc_hci_cmd_le_set_address_resolution_enable>
   23926:	e020      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   23928:	f7e9 fb9f 	bl	d06a <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   2392c:	e01d      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2392e:	7813      	ldrb	r3, [r2, #0]
   23930:	3308      	adds	r3, #8
   23932:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   23934:	4608      	mov	r0, r1
   23936:	f7e9 fb73 	bl	d020 <sdc_hci_cmd_le_read_max_data_length>
   2393a:	e016      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2393c:	7813      	ldrb	r3, [r2, #0]
   2393e:	3304      	adds	r3, #4
   23940:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   23942:	f7e9 fb6f 	bl	d024 <sdc_hci_cmd_le_read_phy>
   23946:	e010      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   23948:	f7e9 fb80 	bl	d04c <sdc_hci_cmd_le_set_default_phy>
   2394c:	e00d      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2394e:	f7e9 fb86 	bl	d05e <sdc_hci_cmd_le_set_phy>
   23952:	e00a      	b.n	2396a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   23954:	7813      	ldrb	r3, [r2, #0]
   23956:	3302      	adds	r3, #2
   23958:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2395a:	4608      	mov	r0, r1
   2395c:	f7e9 fb6a 	bl	d034 <sdc_hci_cmd_le_read_transmit_power>
   23960:	e003      	b.n	2396a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   23962:	f7e9 fb7e 	bl	d062 <sdc_hci_cmd_le_set_privacy_mode>
   23966:	e000      	b.n	2396a <le_controller_cmd_put+0x1a8>
   23968:	2001      	movs	r0, #1
}
   2396a:	bd38      	pop	{r3, r4, r5, pc}

0002396c <vs_cmd_put>:
{
   2396c:	b538      	push	{r3, r4, r5, lr}
   2396e:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   23970:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   23972:	3106      	adds	r1, #6
   23974:	7865      	ldrb	r5, [r4, #1]
   23976:	7823      	ldrb	r3, [r4, #0]
   23978:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   2397c:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   23980:	42a3      	cmp	r3, r4
   23982:	d90f      	bls.n	239a4 <vs_cmd_put+0x38>
   23984:	f64f 5405 	movw	r4, #64773	; 0xfd05
   23988:	42a3      	cmp	r3, r4
   2398a:	d85b      	bhi.n	23a44 <vs_cmd_put+0xd8>
   2398c:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   23990:	d319      	bcc.n	239c6 <vs_cmd_put+0x5a>
   23992:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   23996:	2b05      	cmp	r3, #5
   23998:	d850      	bhi.n	23a3c <vs_cmd_put+0xd0>
   2399a:	e8df f003 	tbb	[pc, r3]
   2399e:	4038      	.short	0x4038
   239a0:	4c494643 	.word	0x4c494643
   239a4:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   239a8:	d801      	bhi.n	239ae <vs_cmd_put+0x42>
   239aa:	2001      	movs	r0, #1
}
   239ac:	bd38      	pop	{r3, r4, r5, pc}
   239ae:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   239b2:	3b01      	subs	r3, #1
   239b4:	2b09      	cmp	r3, #9
   239b6:	d843      	bhi.n	23a40 <vs_cmd_put+0xd4>
   239b8:	e8df f003 	tbb	[pc, r3]
   239bc:	42420e07 	.word	0x42420e07
   239c0:	42422642 	.word	0x42422642
   239c4:	1f16      	.short	0x1f16
	switch (opcode)	{
   239c6:	2001      	movs	r0, #1
   239c8:	e7f0      	b.n	239ac <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   239ca:	7813      	ldrb	r3, [r2, #0]
   239cc:	330c      	adds	r3, #12
   239ce:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   239d0:	4608      	mov	r0, r1
   239d2:	f7e0 fb8d 	bl	40f0 <sdc_hci_cmd_vs_zephyr_read_version_info>
   239d6:	e7e9      	b.n	239ac <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   239d8:	7813      	ldrb	r3, [r2, #0]
   239da:	3340      	adds	r3, #64	; 0x40
   239dc:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   239de:	4608      	mov	r0, r1
   239e0:	f7ff fee1 	bl	237a6 <vs_zephyr_supported_commands>
		return 0;
   239e4:	2000      	movs	r0, #0
   239e6:	e7e1      	b.n	239ac <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   239e8:	7813      	ldrb	r3, [r2, #0]
   239ea:	3301      	adds	r3, #1
   239ec:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   239ee:	3316      	adds	r3, #22
   239f0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   239f2:	4608      	mov	r0, r1
   239f4:	f7e9 faa7 	bl	cf46 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   239f8:	e7d8      	b.n	239ac <vs_cmd_put+0x40>
		*param_length_out +=
   239fa:	7813      	ldrb	r3, [r2, #0]
   239fc:	3320      	adds	r3, #32
   239fe:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   23a00:	4608      	mov	r0, r1
   23a02:	f7e9 fa53 	bl	ceac <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   23a06:	e7d1      	b.n	239ac <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   23a08:	f7e9 faec 	bl	cfe4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   23a0c:	e7ce      	b.n	239ac <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   23a0e:	7813      	ldrb	r3, [r2, #0]
   23a10:	3340      	adds	r3, #64	; 0x40
   23a12:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   23a14:	4608      	mov	r0, r1
   23a16:	f7ff fed1 	bl	237bc <vs_supported_commands>
		return 0;
   23a1a:	2000      	movs	r0, #0
   23a1c:	e7c6      	b.n	239ac <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   23a1e:	f7e9 fa3e 	bl	ce9e <sdc_hci_cmd_vs_llpm_mode_set>
   23a22:	e7c3      	b.n	239ac <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   23a24:	f7e9 fa0f 	bl	ce46 <sdc_hci_cmd_vs_conn_update>
   23a28:	e7c0      	b.n	239ac <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   23a2a:	f7e9 fa04 	bl	ce36 <sdc_hci_cmd_vs_conn_event_extend>
   23a2e:	e7bd      	b.n	239ac <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   23a30:	f7e9 fa37 	bl	cea2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   23a34:	e7ba      	b.n	239ac <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   23a36:	f7e9 fa30 	bl	ce9a <sdc_hci_cmd_vs_event_length_set>
   23a3a:	e7b7      	b.n	239ac <vs_cmd_put+0x40>
	switch (opcode)	{
   23a3c:	2001      	movs	r0, #1
   23a3e:	e7b5      	b.n	239ac <vs_cmd_put+0x40>
   23a40:	2001      	movs	r0, #1
   23a42:	e7b3      	b.n	239ac <vs_cmd_put+0x40>
   23a44:	2001      	movs	r0, #1
   23a46:	e7b1      	b.n	239ac <vs_cmd_put+0x40>

00023a48 <cmd_put>:
{
   23a48:	b570      	push	{r4, r5, r6, lr}
   23a4a:	b082      	sub	sp, #8
   23a4c:	460e      	mov	r6, r1
   23a4e:	7842      	ldrb	r2, [r0, #1]
   23a50:	7805      	ldrb	r5, [r0, #0]
   23a52:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   23a56:	2304      	movs	r3, #4
   23a58:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   23a5c:	0893      	lsrs	r3, r2, #2
   23a5e:	2a23      	cmp	r2, #35	; 0x23
   23a60:	d80b      	bhi.n	23a7a <cmd_put+0x32>
   23a62:	b21a      	sxth	r2, r3
   23a64:	2a00      	cmp	r2, #0
   23a66:	d03a      	beq.n	23ade <cmd_put+0x96>
   23a68:	3b01      	subs	r3, #1
   23a6a:	2b07      	cmp	r3, #7
   23a6c:	d839      	bhi.n	23ae2 <cmd_put+0x9a>
   23a6e:	e8df f003 	tbb	[pc, r3]
   23a72:	381a      	.short	0x381a
   23a74:	382a241e 	.word	0x382a241e
   23a78:	3038      	.short	0x3038
   23a7a:	2b3f      	cmp	r3, #63	; 0x3f
   23a7c:	d105      	bne.n	23a8a <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   23a7e:	f10d 0207 	add.w	r2, sp, #7
   23a82:	f7ff ff73 	bl	2396c <vs_cmd_put>
   23a86:	4604      	mov	r4, r0
		break;
   23a88:	e000      	b.n	23a8c <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   23a8a:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   23a8c:	4628      	mov	r0, r5
   23a8e:	f7ff fd61 	bl	23554 <command_generates_command_complete_event>
   23a92:	b108      	cbz	r0, 23a98 <cmd_put+0x50>
   23a94:	2c01      	cmp	r4, #1
   23a96:	d126      	bne.n	23ae6 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   23a98:	4622      	mov	r2, r4
   23a9a:	4629      	mov	r1, r5
   23a9c:	4630      	mov	r0, r6
   23a9e:	f7ff fd98 	bl	235d2 <encode_command_status>
}
   23aa2:	b002      	add	sp, #8
   23aa4:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   23aa6:	f7ff fdaf 	bl	23608 <link_control_cmd_put>
   23aaa:	4604      	mov	r4, r0
		break;
   23aac:	e7ee      	b.n	23a8c <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   23aae:	f10d 0207 	add.w	r2, sp, #7
   23ab2:	f7ff fdc0 	bl	23636 <controller_and_baseband_cmd_put>
   23ab6:	4604      	mov	r4, r0
		break;
   23ab8:	e7e8      	b.n	23a8c <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   23aba:	f10d 0207 	add.w	r2, sp, #7
   23abe:	f7ff fe36 	bl	2372e <info_param_cmd_put>
   23ac2:	4604      	mov	r4, r0
		break;
   23ac4:	e7e2      	b.n	23a8c <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   23ac6:	f10d 0207 	add.w	r2, sp, #7
   23aca:	f7ff fd9b 	bl	23604 <status_param_cmd_put>
   23ace:	4604      	mov	r4, r0
		break;
   23ad0:	e7dc      	b.n	23a8c <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   23ad2:	f10d 0207 	add.w	r2, sp, #7
   23ad6:	f7ff fe74 	bl	237c2 <le_controller_cmd_put>
   23ada:	4604      	mov	r4, r0
		break;
   23adc:	e7d6      	b.n	23a8c <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   23ade:	2401      	movs	r4, #1
   23ae0:	e7d4      	b.n	23a8c <cmd_put+0x44>
   23ae2:	2401      	movs	r4, #1
   23ae4:	e7d2      	b.n	23a8c <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   23ae6:	4623      	mov	r3, r4
   23ae8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   23aec:	4629      	mov	r1, r5
   23aee:	4630      	mov	r0, r6
   23af0:	f7ff fd78 	bl	235e4 <encode_command_complete_header>
}
   23af4:	e7d5      	b.n	23aa2 <cmd_put+0x5a>

00023af6 <m_config_clock_source_get>:
}
   23af6:	2001      	movs	r0, #1
   23af8:	4770      	bx	lr

00023afa <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   23afa:	4668      	mov	r0, sp
   23afc:	f020 0107 	bic.w	r1, r0, #7
   23b00:	468d      	mov	sp, r1
   23b02:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   23b04:	f7de fec4 	bl	2890 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   23b08:	f7ee fe4a 	bl	127a0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   23b0c:	f7ee ff56 	bl	129bc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   23b10:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23b14:	4685      	mov	sp, r0
   23b16:	4770      	bx	lr

00023b18 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   23b18:	4668      	mov	r0, sp
   23b1a:	f020 0107 	bic.w	r1, r0, #7
   23b1e:	468d      	mov	sp, r1
   23b20:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   23b22:	f7de fe37 	bl	2794 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   23b26:	f7ee fe3b 	bl	127a0 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   23b2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23b2e:	4685      	mov	sp, r0
   23b30:	4770      	bx	lr

00023b32 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   23b32:	4668      	mov	r0, sp
   23b34:	f020 0107 	bic.w	r1, r0, #7
   23b38:	468d      	mov	sp, r1
   23b3a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   23b3c:	f7e8 fbcf 	bl	c2de <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   23b40:	f7ee fe2e 	bl	127a0 <_arch_isr_direct_pm>
   23b44:	f7ee ff3a 	bl	129bc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   23b48:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23b4c:	4685      	mov	sp, r0
   23b4e:	4770      	bx	lr

00023b50 <nrfx_clock_stop>:
	switch (domain) {
   23b50:	2801      	cmp	r0, #1
   23b52:	d000      	beq.n	23b56 <nrfx_clock_stop+0x6>
   23b54:	4770      	bx	lr
{
   23b56:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   23b58:	f7df fcb2 	bl	34c0 <mpsl_clock_hfclk_release>
}
   23b5c:	bd08      	pop	{r3, pc}

00023b5e <nrfx_clock_enable>:
}
   23b5e:	4770      	bx	lr

00023b60 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   23b60:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   23b62:	f7df facb 	bl	30fc <MPSL_IRQ_CLOCK_Handler>
}
   23b66:	bd08      	pop	{r3, pc}

00023b68 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   23b68:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   23b6a:	f7f9 fba5 	bl	1d2b8 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   23b6e:	bd08      	pop	{r3, pc}

00023b70 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   23b70:	b510      	push	{r4, lr}
   23b72:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   23b74:	f7ee fc84 	bl	12480 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   23b78:	f7ee fd44 	bl	12604 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   23b7c:	4620      	mov	r0, r4
   23b7e:	f7ff fff3 	bl	23b68 <hw_cc3xx_init_internal>
	return res;
}
   23b82:	bd10      	pop	{r4, pc}

00023b84 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   23b84:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   23b86:	4780      	blx	r0
}
   23b88:	bd08      	pop	{r3, pc}

00023b8a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   23b8a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   23b8c:	f000 fd92 	bl	246b4 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   23b90:	bd08      	pop	{r3, pc}

00023b92 <pin_is_task_output>:
{
   23b92:	b510      	push	{r4, lr}
   23b94:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23b96:	f7f6 ff11 	bl	1a9bc <pin_is_output>
   23b9a:	b128      	cbz	r0, 23ba8 <pin_is_task_output+0x16>
   23b9c:	4620      	mov	r0, r4
   23b9e:	f7f6 fef7 	bl	1a990 <pin_in_use_by_te>
   23ba2:	b118      	cbz	r0, 23bac <pin_is_task_output+0x1a>
   23ba4:	2001      	movs	r0, #1
   23ba6:	e000      	b.n	23baa <pin_is_task_output+0x18>
   23ba8:	2000      	movs	r0, #0
}
   23baa:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23bac:	2000      	movs	r0, #0
   23bae:	e7fc      	b.n	23baa <pin_is_task_output+0x18>

00023bb0 <pin_is_input>:
{
   23bb0:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   23bb2:	f7f6 ff03 	bl	1a9bc <pin_is_output>
   23bb6:	f080 0001 	eor.w	r0, r0, #1
}
   23bba:	b2c0      	uxtb	r0, r0
   23bbc:	bd08      	pop	{r3, pc}

00023bbe <gpiote_polarity_to_trigger>:
}
   23bbe:	4770      	bx	lr

00023bc0 <gpiote_trigger_to_polarity>:
}
   23bc0:	4770      	bx	lr

00023bc2 <is_level>:
}
   23bc2:	2803      	cmp	r0, #3
   23bc4:	bf94      	ite	ls
   23bc6:	2000      	movls	r0, #0
   23bc8:	2001      	movhi	r0, #1
   23bca:	4770      	bx	lr

00023bcc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   23bcc:	b148      	cbz	r0, 23be2 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   23bce:	68c3      	ldr	r3, [r0, #12]
   23bd0:	8818      	ldrh	r0, [r3, #0]
   23bd2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   23bd6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   23bda:	bf14      	ite	ne
   23bdc:	2000      	movne	r0, #0
   23bde:	2001      	moveq	r0, #1
   23be0:	4770      	bx	lr
		return false;
   23be2:	2000      	movs	r0, #0
}
   23be4:	4770      	bx	lr

00023be6 <k_heap_init>:
{
   23be6:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   23be8:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   23bec:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   23bee:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   23bf0:	f7fc fb74 	bl	202dc <sys_heap_init>
}
   23bf4:	bd10      	pop	{r4, pc}

00023bf6 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   23bf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bfa:	b087      	sub	sp, #28
   23bfc:	4680      	mov	r8, r0
   23bfe:	9103      	str	r1, [sp, #12]
   23c00:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   23c06:	f000 fd5b 	bl	246c0 <sys_clock_timeout_end_calc>
   23c0a:	4681      	mov	r9, r0
   23c0c:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23c0e:	f108 0314 	add.w	r3, r8, #20
   23c12:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   23c14:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c18:	f3ef 8511 	mrs	r5, BASEPRI
   23c1c:	f383 8812 	msr	BASEPRI_MAX, r3
   23c20:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   23c24:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   23c28:	4654      	mov	r4, sl

	while (ret == NULL) {
   23c2a:	e00f      	b.n	23c4c <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23c2c:	e9cd 6700 	strd	r6, r7, [sp]
   23c30:	f108 020c 	add.w	r2, r8, #12
   23c34:	4629      	mov	r1, r5
   23c36:	9805      	ldr	r0, [sp, #20]
   23c38:	f7f8 fbc0 	bl	1c3bc <z_pend_curr>
   23c3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c40:	f3ef 8511 	mrs	r5, BASEPRI
   23c44:	f383 8812 	msr	BASEPRI_MAX, r3
   23c48:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   23c4c:	b9b4      	cbnz	r4, 23c7c <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   23c4e:	9a04      	ldr	r2, [sp, #16]
   23c50:	9903      	ldr	r1, [sp, #12]
   23c52:	4640      	mov	r0, r8
   23c54:	f7fc fad1 	bl	201fa <sys_heap_aligned_alloc>
   23c58:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   23c5a:	f7f8 ff63 	bl	1cb24 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   23c5e:	b96c      	cbnz	r4, 23c7c <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   23c60:	ebb9 0600 	subs.w	r6, r9, r0
   23c64:	eb6b 0701 	sbc.w	r7, fp, r1
   23c68:	2e01      	cmp	r6, #1
   23c6a:	f177 0300 	sbcs.w	r3, r7, #0
   23c6e:	db05      	blt.n	23c7c <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   23c70:	f1ba 0f00 	cmp.w	sl, #0
   23c74:	d1da      	bne.n	23c2c <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   23c76:	f04f 0a01 	mov.w	sl, #1
   23c7a:	e7d7      	b.n	23c2c <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   23c7c:	f385 8811 	msr	BASEPRI, r5
   23c80:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23c84:	4620      	mov	r0, r4
   23c86:	b007      	add	sp, #28
   23c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023c8c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   23c8c:	b570      	push	{r4, r5, r6, lr}
   23c8e:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23c90:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   23c94:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c98:	f3ef 8511 	mrs	r5, BASEPRI
   23c9c:	f383 8812 	msr	BASEPRI_MAX, r3
   23ca0:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   23ca4:	f7fc fa65 	bl	20172 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23ca8:	f104 000c 	add.w	r0, r4, #12
   23cac:	f000 fc3c 	bl	24528 <z_unpend_all>
   23cb0:	b920      	cbnz	r0, 23cbc <k_heap_free+0x30>
	__asm__ volatile(
   23cb2:	f385 8811 	msr	BASEPRI, r5
   23cb6:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23cba:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   23cbc:	4629      	mov	r1, r5
   23cbe:	4630      	mov	r0, r6
   23cc0:	f7f8 fa18 	bl	1c0f4 <z_reschedule>
   23cc4:	e7f9      	b.n	23cba <k_heap_free+0x2e>

00023cc6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   23cc6:	68c2      	ldr	r2, [r0, #12]
   23cc8:	6903      	ldr	r3, [r0, #16]
   23cca:	431a      	orrs	r2, r3
   23ccc:	f012 0203 	ands.w	r2, r2, #3
   23cd0:	d10d      	bne.n	23cee <create_free_list+0x28>
	slab->free_list = NULL;
   23cd2:	2100      	movs	r1, #0
   23cd4:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   23cd6:	e005      	b.n	23ce4 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   23cd8:	6941      	ldr	r1, [r0, #20]
   23cda:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   23cdc:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   23cde:	68c1      	ldr	r1, [r0, #12]
   23ce0:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   23ce2:	3201      	adds	r2, #1
   23ce4:	6881      	ldr	r1, [r0, #8]
   23ce6:	4291      	cmp	r1, r2
   23ce8:	d8f6      	bhi.n	23cd8 <create_free_list+0x12>
	return 0;
   23cea:	2000      	movs	r0, #0
   23cec:	4770      	bx	lr
		return -EINVAL;
   23cee:	f06f 0015 	mvn.w	r0, #21
}
   23cf2:	4770      	bx	lr

00023cf4 <k_mem_slab_init>:
{
   23cf4:	b510      	push	{r4, lr}
   23cf6:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   23cf8:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   23cfa:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   23cfc:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   23cfe:	2300      	movs	r3, #0
   23d00:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   23d02:	f7ff ffe0 	bl	23cc6 <create_free_list>
	if (rc < 0) {
   23d06:	2800      	cmp	r0, #0
   23d08:	db01      	blt.n	23d0e <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   23d0a:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   23d0c:	6064      	str	r4, [r4, #4]
}
   23d0e:	bd10      	pop	{r4, pc}

00023d10 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   23d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d12:	4604      	mov	r4, r0
   23d14:	460d      	mov	r5, r1
	__asm__ volatile(
   23d16:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d1a:	f3ef 8611 	mrs	r6, BASEPRI
   23d1e:	f383 8812 	msr	BASEPRI_MAX, r3
   23d22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   23d26:	6943      	ldr	r3, [r0, #20]
   23d28:	b163      	cbz	r3, 23d44 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   23d2a:	682b      	ldr	r3, [r5, #0]
   23d2c:	6962      	ldr	r2, [r4, #20]
   23d2e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   23d30:	682b      	ldr	r3, [r5, #0]
   23d32:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   23d34:	69a3      	ldr	r3, [r4, #24]
   23d36:	3b01      	subs	r3, #1
   23d38:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   23d3a:	f386 8811 	msr	BASEPRI, r6
   23d3e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   23d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23d44:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   23d48:	f000 fbc3 	bl	244d2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   23d4c:	2800      	cmp	r0, #0
   23d4e:	d0ec      	beq.n	23d2a <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23d50:	682a      	ldr	r2, [r5, #0]
   23d52:	2100      	movs	r1, #0
   23d54:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23d58:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   23d5a:	f000 faf8 	bl	2434e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   23d5e:	4631      	mov	r1, r6
   23d60:	4638      	mov	r0, r7
   23d62:	f7f8 f9c7 	bl	1c0f4 <z_reschedule>
			return;
   23d66:	e7ec      	b.n	23d42 <k_mem_slab_free+0x32>

00023d68 <setup_thread_stack>:
{
   23d68:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23d6a:	3207      	adds	r2, #7
   23d6c:	f022 0207 	bic.w	r2, r2, #7
   23d70:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   23d74:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   23d78:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   23d7c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   23d80:	2200      	movs	r2, #0
   23d82:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   23d86:	18c8      	adds	r0, r1, r3
   23d88:	bc10      	pop	{r4}
   23d8a:	4770      	bx	lr

00023d8c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23d8c:	f3ef 8005 	mrs	r0, IPSR
}
   23d90:	3800      	subs	r0, #0
   23d92:	bf18      	it	ne
   23d94:	2001      	movne	r0, #1
   23d96:	4770      	bx	lr

00023d98 <k_thread_name_get>:
}
   23d98:	3078      	adds	r0, #120	; 0x78
   23d9a:	4770      	bx	lr

00023d9c <z_impl_k_thread_start>:
{
   23d9c:	b508      	push	{r3, lr}
	z_sched_start(thread);
   23d9e:	f7f8 fad3 	bl	1c348 <z_sched_start>
}
   23da2:	bd08      	pop	{r3, pc}

00023da4 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   23da4:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   23da6:	2400      	movs	r4, #0
   23da8:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   23daa:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   23dac:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   23dae:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   23db0:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   23db2:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   23db4:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   23db6:	bc10      	pop	{r4}
   23db8:	4770      	bx	lr

00023dba <z_impl_k_thread_create>:
{
   23dba:	b5f0      	push	{r4, r5, r6, r7, lr}
   23dbc:	b087      	sub	sp, #28
   23dbe:	4604      	mov	r4, r0
   23dc0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23dc4:	2500      	movs	r5, #0
   23dc6:	9505      	str	r5, [sp, #20]
   23dc8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   23dca:	9504      	str	r5, [sp, #16]
   23dcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   23dce:	9503      	str	r5, [sp, #12]
   23dd0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23dd2:	9502      	str	r5, [sp, #8]
   23dd4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23dd6:	9501      	str	r5, [sp, #4]
   23dd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23dda:	9500      	str	r5, [sp, #0]
   23ddc:	f7f7 fd34 	bl	1b848 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23de0:	f1b7 3fff 	cmp.w	r7, #4294967295
   23de4:	bf08      	it	eq
   23de6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23dea:	d102      	bne.n	23df2 <z_impl_k_thread_create+0x38>
}
   23dec:	4620      	mov	r0, r4
   23dee:	b007      	add	sp, #28
   23df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   23df2:	4632      	mov	r2, r6
   23df4:	463b      	mov	r3, r7
   23df6:	4620      	mov	r0, r4
   23df8:	f7f7 fd14 	bl	1b824 <schedule_new_thread>
   23dfc:	e7f6      	b.n	23dec <z_impl_k_thread_create+0x32>

00023dfe <z_pm_save_idle_exit>:
{
   23dfe:	b508      	push	{r3, lr}
	pm_system_resume();
   23e00:	f7ed fe16 	bl	11a30 <pm_system_resume>
	sys_clock_idle_exit();
   23e04:	f7ff fab7 	bl	23376 <sys_clock_idle_exit>
}
   23e08:	bd08      	pop	{r3, pc}

00023e0a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   23e0a:	4288      	cmp	r0, r1
   23e0c:	da00      	bge.n	23e10 <new_prio_for_inheritance+0x6>
   23e0e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   23e10:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   23e14:	db01      	blt.n	23e1a <new_prio_for_inheritance+0x10>
   23e16:	4608      	mov	r0, r1
   23e18:	4770      	bx	lr
   23e1a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   23e1e:	4770      	bx	lr

00023e20 <adjust_owner_prio>:
{
   23e20:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   23e22:	6880      	ldr	r0, [r0, #8]
   23e24:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23e28:	428b      	cmp	r3, r1
   23e2a:	d101      	bne.n	23e30 <adjust_owner_prio+0x10>
	return false;
   23e2c:	2000      	movs	r0, #0
}
   23e2e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   23e30:	f7f8 fad8 	bl	1c3e4 <z_set_prio>
   23e34:	e7fb      	b.n	23e2e <adjust_owner_prio+0xe>

00023e36 <z_impl_k_mutex_init>:
{
   23e36:	4603      	mov	r3, r0
	mutex->owner = NULL;
   23e38:	2000      	movs	r0, #0
   23e3a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   23e3c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   23e3e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   23e40:	605b      	str	r3, [r3, #4]
}
   23e42:	4770      	bx	lr

00023e44 <prepare_thread_to_run>:
{
   23e44:	b508      	push	{r3, lr}
   23e46:	2200      	movs	r2, #0
   23e48:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   23e4c:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   23e4e:	f000 fa7e 	bl	2434e <z_ready_thread>
}
   23e52:	bd08      	pop	{r3, pc}

00023e54 <queue_insert>:
{
   23e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23e58:	4605      	mov	r5, r0
   23e5a:	460e      	mov	r6, r1
   23e5c:	4614      	mov	r4, r2
   23e5e:	461f      	mov	r7, r3
   23e60:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23e64:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   23e68:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e6c:	f3ef 8911 	mrs	r9, BASEPRI
   23e70:	f383 8812 	msr	BASEPRI_MAX, r3
   23e74:	f3bf 8f6f 	isb	sy
	if (is_append) {
   23e78:	b102      	cbz	r2, 23e7c <queue_insert+0x28>
	return list->tail;
   23e7a:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23e7c:	4640      	mov	r0, r8
   23e7e:	f000 fb28 	bl	244d2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   23e82:	b9a0      	cbnz	r0, 23eae <queue_insert+0x5a>
	if (alloc) {
   23e84:	b9e7      	cbnz	r7, 23ec0 <queue_insert+0x6c>
	node->next_and_flags = flags;
   23e86:	2300      	movs	r3, #0
   23e88:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23e8a:	b356      	cbz	r6, 23ee2 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23e8c:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   23e8e:	f033 0303 	bics.w	r3, r3, #3
   23e92:	d134      	bne.n	23efe <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23e94:	6823      	ldr	r3, [r4, #0]
   23e96:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   23e9a:	6023      	str	r3, [r4, #0]
	return list->tail;
   23e9c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   23e9e:	b35a      	cbz	r2, 23ef8 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23ea0:	6813      	ldr	r3, [r2, #0]
   23ea2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   23ea6:	4323      	orrs	r3, r4
   23ea8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   23eaa:	606c      	str	r4, [r5, #4]
}
   23eac:	e031      	b.n	23f12 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   23eae:	4621      	mov	r1, r4
   23eb0:	f7ff ffc8 	bl	23e44 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   23eb4:	4649      	mov	r1, r9
   23eb6:	4640      	mov	r0, r8
   23eb8:	f7f8 f91c 	bl	1c0f4 <z_reschedule>
		return 0;
   23ebc:	2000      	movs	r0, #0
   23ebe:	e032      	b.n	23f26 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   23ec0:	2108      	movs	r1, #8
   23ec2:	2000      	movs	r0, #0
   23ec4:	f7f9 f9d4 	bl	1d270 <z_thread_aligned_alloc>
		if (anode == NULL) {
   23ec8:	b120      	cbz	r0, 23ed4 <queue_insert+0x80>
		anode->data = data;
   23eca:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   23ecc:	2201      	movs	r2, #1
   23ece:	6002      	str	r2, [r0, #0]
		data = anode;
   23ed0:	4604      	mov	r4, r0
   23ed2:	e7da      	b.n	23e8a <queue_insert+0x36>
	__asm__ volatile(
   23ed4:	f389 8811 	msr	BASEPRI, r9
   23ed8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   23edc:	f06f 000b 	mvn.w	r0, #11
   23ee0:	e021      	b.n	23f26 <queue_insert+0xd2>
	return list->head;
   23ee2:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23ee4:	6823      	ldr	r3, [r4, #0]
   23ee6:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   23eea:	4313      	orrs	r3, r2
   23eec:	6023      	str	r3, [r4, #0]
	list->head = node;
   23eee:	602c      	str	r4, [r5, #0]
	return list->tail;
   23ef0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   23ef2:	b973      	cbnz	r3, 23f12 <queue_insert+0xbe>
	list->tail = node;
   23ef4:	606c      	str	r4, [r5, #4]
}
   23ef6:	e00c      	b.n	23f12 <queue_insert+0xbe>
	list->tail = node;
   23ef8:	606c      	str	r4, [r5, #4]
	list->head = node;
   23efa:	602c      	str	r4, [r5, #0]
}
   23efc:	e009      	b.n	23f12 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23efe:	6822      	ldr	r2, [r4, #0]
   23f00:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   23f04:	4313      	orrs	r3, r2
   23f06:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23f08:	6833      	ldr	r3, [r6, #0]
   23f0a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   23f0e:	431c      	orrs	r4, r3
   23f10:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23f12:	2104      	movs	r1, #4
   23f14:	f105 0010 	add.w	r0, r5, #16
   23f18:	f000 fcb2 	bl	24880 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   23f1c:	4649      	mov	r1, r9
   23f1e:	4640      	mov	r0, r8
   23f20:	f7f8 f8e8 	bl	1c0f4 <z_reschedule>
	return 0;
   23f24:	2000      	movs	r0, #0
}
   23f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023f2a <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   23f2a:	b160      	cbz	r0, 23f46 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23f2c:	6803      	ldr	r3, [r0, #0]
   23f2e:	f013 0f03 	tst.w	r3, #3
   23f32:	d008      	beq.n	23f46 <z_queue_node_peek+0x1c>
{
   23f34:	b510      	push	{r4, lr}
		ret = anode->data;
   23f36:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   23f38:	b909      	cbnz	r1, 23f3e <z_queue_node_peek+0x14>
		ret = anode->data;
   23f3a:	4620      	mov	r0, r4
}
   23f3c:	bd10      	pop	{r4, pc}
			k_free(anode);
   23f3e:	f000 fcc3 	bl	248c8 <k_free>
		ret = anode->data;
   23f42:	4620      	mov	r0, r4
   23f44:	e7fa      	b.n	23f3c <z_queue_node_peek+0x12>
}
   23f46:	4770      	bx	lr

00023f48 <z_impl_k_queue_init>:
	list->head = NULL;
   23f48:	2300      	movs	r3, #0
   23f4a:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   23f4c:	6043      	str	r3, [r0, #4]
   23f4e:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   23f52:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   23f54:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   23f56:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   23f5a:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   23f5c:	6143      	str	r3, [r0, #20]
}
   23f5e:	4770      	bx	lr

00023f60 <k_queue_append>:
{
   23f60:	b500      	push	{lr}
   23f62:	b083      	sub	sp, #12
   23f64:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   23f66:	2301      	movs	r3, #1
   23f68:	9300      	str	r3, [sp, #0]
   23f6a:	2300      	movs	r3, #0
   23f6c:	4619      	mov	r1, r3
   23f6e:	f7ff ff71 	bl	23e54 <queue_insert>
}
   23f72:	b003      	add	sp, #12
   23f74:	f85d fb04 	ldr.w	pc, [sp], #4

00023f78 <k_queue_prepend>:
{
   23f78:	b500      	push	{lr}
   23f7a:	b083      	sub	sp, #12
   23f7c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   23f7e:	2100      	movs	r1, #0
   23f80:	9100      	str	r1, [sp, #0]
   23f82:	460b      	mov	r3, r1
   23f84:	f7ff ff66 	bl	23e54 <queue_insert>
}
   23f88:	b003      	add	sp, #12
   23f8a:	f85d fb04 	ldr.w	pc, [sp], #4

00023f8e <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   23f8e:	b3a1      	cbz	r1, 23ffa <k_queue_append_list+0x6c>
{
   23f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f94:	4606      	mov	r6, r0
   23f96:	4617      	mov	r7, r2
   23f98:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   23f9a:	b38a      	cbz	r2, 24000 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23f9c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   23fa0:	f04f 0340 	mov.w	r3, #64	; 0x40
   23fa4:	f3ef 8811 	mrs	r8, BASEPRI
   23fa8:	f383 8812 	msr	BASEPRI_MAX, r3
   23fac:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   23fb0:	4628      	mov	r0, r5
   23fb2:	f000 fa8e 	bl	244d2 <z_unpend_first_thread>
   23fb6:	e006      	b.n	23fc6 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   23fb8:	4621      	mov	r1, r4
   23fba:	f7ff ff43 	bl	23e44 <prepare_thread_to_run>
		head = *(void **)head;
   23fbe:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   23fc0:	4628      	mov	r0, r5
   23fc2:	f000 fa86 	bl	244d2 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   23fc6:	b10c      	cbz	r4, 23fcc <k_queue_append_list+0x3e>
   23fc8:	2800      	cmp	r0, #0
   23fca:	d1f5      	bne.n	23fb8 <k_queue_append_list+0x2a>
	if (head != NULL) {
   23fcc:	b13c      	cbz	r4, 23fde <k_queue_append_list+0x50>
	return list->tail;
   23fce:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   23fd0:	b18a      	cbz	r2, 23ff6 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   23fd2:	6813      	ldr	r3, [r2, #0]
   23fd4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   23fd8:	431c      	orrs	r4, r3
   23fda:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23fdc:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23fde:	2104      	movs	r1, #4
   23fe0:	f106 0010 	add.w	r0, r6, #16
   23fe4:	f000 fc4c 	bl	24880 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   23fe8:	4641      	mov	r1, r8
   23fea:	4628      	mov	r0, r5
   23fec:	f7f8 f882 	bl	1c0f4 <z_reschedule>
	return 0;
   23ff0:	2000      	movs	r0, #0
}
   23ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   23ff6:	6034      	str	r4, [r6, #0]
}
   23ff8:	e7f0      	b.n	23fdc <k_queue_append_list+0x4e>
		return -EINVAL;
   23ffa:	f06f 0015 	mvn.w	r0, #21
}
   23ffe:	4770      	bx	lr
		return -EINVAL;
   24000:	f06f 0015 	mvn.w	r0, #21
   24004:	e7f5      	b.n	23ff2 <k_queue_append_list+0x64>

00024006 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   24006:	b15a      	cbz	r2, 24020 <z_impl_k_sem_init+0x1a>
   24008:	428a      	cmp	r2, r1
   2400a:	d30c      	bcc.n	24026 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2400c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2400e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   24010:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   24012:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   24014:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   24018:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2401a:	6143      	str	r3, [r0, #20]
	return 0;
   2401c:	2000      	movs	r0, #0
   2401e:	4770      	bx	lr
		return -EINVAL;
   24020:	f06f 0015 	mvn.w	r0, #21
   24024:	4770      	bx	lr
   24026:	f06f 0015 	mvn.w	r0, #21
}
   2402a:	4770      	bx	lr

0002402c <cancel_async_locked>:
{
   2402c:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   2402e:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24030:	f012 0f02 	tst.w	r2, #2
   24034:	d009      	beq.n	2404a <cancel_async_locked+0x1e>
	return *flagp;
   24036:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   24038:	f012 000f 	ands.w	r0, r2, #15
   2403c:	d037      	beq.n	240ae <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   2403e:	f042 0202 	orr.w	r2, r2, #2
   24042:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   24044:	f002 000f 	and.w	r0, r2, #15
	return ret;
   24048:	4770      	bx	lr
{
   2404a:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   2404c:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   2404e:	f022 0104 	bic.w	r1, r2, #4
   24052:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   24054:	f012 0f04 	tst.w	r2, #4
   24058:	d011      	beq.n	2407e <cancel_async_locked+0x52>
	return list->head;
   2405a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2405e:	2100      	movs	r1, #0
   24060:	b16a      	cbz	r2, 2407e <cancel_async_locked+0x52>
   24062:	4290      	cmp	r0, r2
   24064:	d002      	beq.n	2406c <cancel_async_locked+0x40>
   24066:	4611      	mov	r1, r2
   24068:	6812      	ldr	r2, [r2, #0]
   2406a:	e7f9      	b.n	24060 <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2406c:	b191      	cbz	r1, 24094 <cancel_async_locked+0x68>
	return node->next;
   2406e:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   24070:	600a      	str	r2, [r1, #0]
	return list->tail;
   24072:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   24076:	4293      	cmp	r3, r2
   24078:	d016      	beq.n	240a8 <cancel_async_locked+0x7c>
	parent->next = child;
   2407a:	2200      	movs	r2, #0
   2407c:	601a      	str	r2, [r3, #0]
	return *flagp;
   2407e:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   24080:	f012 000f 	ands.w	r0, r2, #15
   24084:	d004      	beq.n	24090 <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   24086:	f042 0202 	orr.w	r2, r2, #2
   2408a:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2408c:	f002 000f 	and.w	r0, r2, #15
}
   24090:	bc10      	pop	{r4}
   24092:	4770      	bx	lr
	return node->next;
   24094:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   24096:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   2409a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2409e:	428b      	cmp	r3, r1
   240a0:	d1eb      	bne.n	2407a <cancel_async_locked+0x4e>
	list->tail = node;
   240a2:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   240a6:	e7e8      	b.n	2407a <cancel_async_locked+0x4e>
	list->tail = node;
   240a8:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   240ac:	e7e5      	b.n	2407a <cancel_async_locked+0x4e>
   240ae:	4770      	bx	lr

000240b0 <work_timeout>:
{
   240b0:	b510      	push	{r4, lr}
   240b2:	b082      	sub	sp, #8
   240b4:	4603      	mov	r3, r0
   240b6:	f04f 0240 	mov.w	r2, #64	; 0x40
   240ba:	f3ef 8411 	mrs	r4, BASEPRI
   240be:	f382 8812 	msr	BASEPRI_MAX, r2
   240c2:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   240c6:	2200      	movs	r2, #0
   240c8:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   240ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   240ce:	f022 0108 	bic.w	r1, r2, #8
   240d2:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   240d6:	f012 0f08 	tst.w	r2, #8
   240da:	d105      	bne.n	240e8 <work_timeout+0x38>
	__asm__ volatile(
   240dc:	f384 8811 	msr	BASEPRI, r4
   240e0:	f3bf 8f6f 	isb	sy
}
   240e4:	b002      	add	sp, #8
   240e6:	bd10      	pop	{r4, pc}
   240e8:	3810      	subs	r0, #16
		queue = dw->queue;
   240ea:	699b      	ldr	r3, [r3, #24]
   240ec:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   240ee:	a901      	add	r1, sp, #4
   240f0:	f7f7 fdea 	bl	1bcc8 <submit_to_queue_locked>
   240f4:	e7f2      	b.n	240dc <work_timeout+0x2c>

000240f6 <cancel_delayable_async_locked>:
{
   240f6:	b510      	push	{r4, lr}
   240f8:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   240fa:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   240fc:	f023 0208 	bic.w	r2, r3, #8
   24100:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24102:	f013 0f08 	tst.w	r3, #8
   24106:	d103      	bne.n	24110 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   24108:	4620      	mov	r0, r4
   2410a:	f7ff ff8f 	bl	2402c <cancel_async_locked>
}
   2410e:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   24110:	3010      	adds	r0, #16
   24112:	f000 fa6c 	bl	245ee <z_abort_timeout>
		ret = true;
   24116:	e7f7      	b.n	24108 <cancel_delayable_async_locked+0x12>

00024118 <k_work_submit_to_queue>:
{
   24118:	b530      	push	{r4, r5, lr}
   2411a:	b083      	sub	sp, #12
   2411c:	9001      	str	r0, [sp, #4]
   2411e:	4608      	mov	r0, r1
	__asm__ volatile(
   24120:	f04f 0340 	mov.w	r3, #64	; 0x40
   24124:	f3ef 8511 	mrs	r5, BASEPRI
   24128:	f383 8812 	msr	BASEPRI_MAX, r3
   2412c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   24130:	a901      	add	r1, sp, #4
   24132:	f7f7 fdc9 	bl	1bcc8 <submit_to_queue_locked>
   24136:	4604      	mov	r4, r0
	__asm__ volatile(
   24138:	f385 8811 	msr	BASEPRI, r5
   2413c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   24140:	2800      	cmp	r0, #0
   24142:	dc02      	bgt.n	2414a <k_work_submit_to_queue+0x32>
}
   24144:	4620      	mov	r0, r4
   24146:	b003      	add	sp, #12
   24148:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   2414a:	f7f8 fb33 	bl	1c7b4 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2414e:	2800      	cmp	r0, #0
   24150:	d0f8      	beq.n	24144 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   24152:	f7f8 fa69 	bl	1c628 <z_impl_k_yield>
	return ret;
   24156:	e7f5      	b.n	24144 <k_work_submit_to_queue+0x2c>

00024158 <k_work_init_delayable>:
{
   24158:	b538      	push	{r3, r4, r5, lr}
   2415a:	4604      	mov	r4, r0
   2415c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2415e:	2230      	movs	r2, #48	; 0x30
   24160:	2100      	movs	r1, #0
   24162:	f000 fbf1 	bl	24948 <memset>
   24166:	6065      	str	r5, [r4, #4]
   24168:	f44f 7380 	mov.w	r3, #256	; 0x100
   2416c:	60e3      	str	r3, [r4, #12]
}
   2416e:	bd38      	pop	{r3, r4, r5, pc}

00024170 <k_work_schedule_for_queue>:
{
   24170:	b510      	push	{r4, lr}
   24172:	b082      	sub	sp, #8
   24174:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   24176:	f04f 0040 	mov.w	r0, #64	; 0x40
   2417a:	f3ef 8411 	mrs	r4, BASEPRI
   2417e:	f380 8812 	msr	BASEPRI_MAX, r0
   24182:	f3bf 8f6f 	isb	sy
	return *flagp;
   24186:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   24188:	f010 0f0e 	tst.w	r0, #14
   2418c:	d006      	beq.n	2419c <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2418e:	2000      	movs	r0, #0
	__asm__ volatile(
   24190:	f384 8811 	msr	BASEPRI, r4
   24194:	f3bf 8f6f 	isb	sy
}
   24198:	b002      	add	sp, #8
   2419a:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2419c:	a801      	add	r0, sp, #4
   2419e:	f7f7 fed5 	bl	1bf4c <schedule_for_queue_locked>
   241a2:	e7f5      	b.n	24190 <k_work_schedule_for_queue+0x20>

000241a4 <k_work_reschedule_for_queue>:
{
   241a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   241a6:	b083      	sub	sp, #12
   241a8:	9001      	str	r0, [sp, #4]
   241aa:	460c      	mov	r4, r1
   241ac:	4616      	mov	r6, r2
   241ae:	461d      	mov	r5, r3
	__asm__ volatile(
   241b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   241b4:	f3ef 8711 	mrs	r7, BASEPRI
   241b8:	f383 8812 	msr	BASEPRI_MAX, r3
   241bc:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   241c0:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   241c2:	f023 0208 	bic.w	r2, r3, #8
   241c6:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   241c8:	f013 0f08 	tst.w	r3, #8
   241cc:	d10b      	bne.n	241e6 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   241ce:	4632      	mov	r2, r6
   241d0:	462b      	mov	r3, r5
   241d2:	4621      	mov	r1, r4
   241d4:	a801      	add	r0, sp, #4
   241d6:	f7f7 feb9 	bl	1bf4c <schedule_for_queue_locked>
	__asm__ volatile(
   241da:	f387 8811 	msr	BASEPRI, r7
   241de:	f3bf 8f6f 	isb	sy
}
   241e2:	b003      	add	sp, #12
   241e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   241e6:	f101 0010 	add.w	r0, r1, #16
   241ea:	f000 fa00 	bl	245ee <z_abort_timeout>
		ret = true;
   241ee:	e7ee      	b.n	241ce <k_work_reschedule_for_queue+0x2a>

000241f0 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   241f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   241f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   241f6:	f3ef 8411 	mrs	r4, BASEPRI
   241fa:	f383 8812 	msr	BASEPRI_MAX, r3
   241fe:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   24202:	f7ff ff78 	bl	240f6 <cancel_delayable_async_locked>
	__asm__ volatile(
   24206:	f384 8811 	msr	BASEPRI, r4
   2420a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2420e:	bd10      	pop	{r4, pc}

00024210 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   24210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24212:	460f      	mov	r7, r1
	__asm__ volatile(
   24214:	f04f 0340 	mov.w	r3, #64	; 0x40
   24218:	f3ef 8611 	mrs	r6, BASEPRI
   2421c:	f383 8812 	msr	BASEPRI_MAX, r3
   24220:	f3bf 8f6f 	isb	sy
	return *flagp;
   24224:	68c3      	ldr	r3, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   24226:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2422a:	2b00      	cmp	r3, #0
   2422c:	bf14      	ite	ne
   2422e:	2501      	movne	r5, #1
   24230:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   24232:	d107      	bne.n	24244 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   24234:	2000      	movs	r0, #0
	__asm__ volatile(
   24236:	f386 8811 	msr	BASEPRI, r6
   2423a:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2423e:	b948      	cbnz	r0, 24254 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   24240:	4628      	mov	r0, r5
   24242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24244:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   24246:	f7ff ff56 	bl	240f6 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2424a:	4639      	mov	r1, r7
   2424c:	4620      	mov	r0, r4
   2424e:	f7f7 fde3 	bl	1be18 <cancel_sync_locked>
   24252:	e7f0      	b.n	24236 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   24254:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   24258:	f04f 32ff 	mov.w	r2, #4294967295
   2425c:	f04f 33ff 	mov.w	r3, #4294967295
   24260:	f7f7 fcee 	bl	1bc40 <z_impl_k_sem_take>
   24264:	e7ec      	b.n	24240 <k_work_cancel_delayable_sync+0x30>

00024266 <thread_active_elsewhere>:
}
   24266:	2000      	movs	r0, #0
   24268:	4770      	bx	lr

0002426a <pended_on_thread>:
}
   2426a:	6880      	ldr	r0, [r0, #8]
   2426c:	4770      	bx	lr

0002426e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2426e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24272:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   24276:	4283      	cmp	r3, r0
   24278:	d001      	beq.n	2427e <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2427a:	1ac0      	subs	r0, r0, r3
   2427c:	4770      	bx	lr
	return 0;
   2427e:	2000      	movs	r0, #0
}
   24280:	4770      	bx	lr

00024282 <z_unpend_thread_no_timeout>:
{
   24282:	b538      	push	{r3, r4, r5, lr}
   24284:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   24286:	2300      	movs	r3, #0
	__asm__ volatile(
   24288:	f04f 0240 	mov.w	r2, #64	; 0x40
   2428c:	f3ef 8511 	mrs	r5, BASEPRI
   24290:	f382 8812 	msr	BASEPRI_MAX, r2
   24294:	f3bf 8f6f 	isb	sy
   24298:	b98b      	cbnz	r3, 242be <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2429a:	4620      	mov	r0, r4
   2429c:	f7ff ffe5 	bl	2426a <pended_on_thread>
   242a0:	4621      	mov	r1, r4
   242a2:	f000 f822 	bl	242ea <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   242a6:	7b63      	ldrb	r3, [r4, #13]
   242a8:	f023 0302 	bic.w	r3, r3, #2
   242ac:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   242ae:	2300      	movs	r3, #0
   242b0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   242b2:	f385 8811 	msr	BASEPRI, r5
   242b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   242ba:	2301      	movs	r3, #1
   242bc:	e7ec      	b.n	24298 <z_unpend_thread_no_timeout+0x16>
}
   242be:	bd38      	pop	{r3, r4, r5, pc}

000242c0 <z_reschedule_irqlock>:
{
   242c0:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   242c2:	4603      	mov	r3, r0
   242c4:	b920      	cbnz	r0, 242d0 <z_reschedule_irqlock+0x10>
   242c6:	f3ef 8205 	mrs	r2, IPSR
   242ca:	b942      	cbnz	r2, 242de <z_reschedule_irqlock+0x1e>
   242cc:	2201      	movs	r2, #1
   242ce:	e000      	b.n	242d2 <z_reschedule_irqlock+0x12>
   242d0:	2200      	movs	r2, #0
	if (resched(key)) {
   242d2:	b932      	cbnz	r2, 242e2 <z_reschedule_irqlock+0x22>
   242d4:	f383 8811 	msr	BASEPRI, r3
   242d8:	f3bf 8f6f 	isb	sy
}
   242dc:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   242de:	2200      	movs	r2, #0
   242e0:	e7f7      	b.n	242d2 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   242e2:	4618      	mov	r0, r3
   242e4:	f7ee fa8c 	bl	12800 <arch_swap>
	return ret;
   242e8:	e7f8      	b.n	242dc <z_reschedule_irqlock+0x1c>

000242ea <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   242ea:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   242ec:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   242ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   242f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   242f2:	2300      	movs	r3, #0
   242f4:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   242f6:	604b      	str	r3, [r1, #4]
}
   242f8:	4770      	bx	lr

000242fa <z_unpend_thread>:
{
   242fa:	b538      	push	{r3, r4, r5, lr}
   242fc:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   242fe:	2300      	movs	r3, #0
	__asm__ volatile(
   24300:	f04f 0240 	mov.w	r2, #64	; 0x40
   24304:	f3ef 8511 	mrs	r5, BASEPRI
   24308:	f382 8812 	msr	BASEPRI_MAX, r2
   2430c:	f3bf 8f6f 	isb	sy
   24310:	b98b      	cbnz	r3, 24336 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24312:	4620      	mov	r0, r4
   24314:	f7ff ffa9 	bl	2426a <pended_on_thread>
   24318:	4621      	mov	r1, r4
   2431a:	f7ff ffe6 	bl	242ea <z_priq_dumb_remove>
   2431e:	7b63      	ldrb	r3, [r4, #13]
   24320:	f023 0302 	bic.w	r3, r3, #2
   24324:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24326:	2300      	movs	r3, #0
   24328:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2432a:	f385 8811 	msr	BASEPRI, r5
   2432e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24332:	2301      	movs	r3, #1
   24334:	e7ec      	b.n	24310 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   24336:	f104 0018 	add.w	r0, r4, #24
   2433a:	f000 f958 	bl	245ee <z_abort_timeout>
}
   2433e:	bd38      	pop	{r3, r4, r5, pc}

00024340 <z_priq_dumb_best>:
{
   24340:	4603      	mov	r3, r0
	return list->head == list;
   24342:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24344:	4283      	cmp	r3, r0
   24346:	d000      	beq.n	2434a <z_priq_dumb_best+0xa>
}
   24348:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2434a:	2000      	movs	r0, #0
	return thread;
   2434c:	e7fc      	b.n	24348 <z_priq_dumb_best+0x8>

0002434e <z_ready_thread>:
{
   2434e:	b538      	push	{r3, r4, r5, lr}
   24350:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   24352:	2300      	movs	r3, #0
	__asm__ volatile(
   24354:	f04f 0240 	mov.w	r2, #64	; 0x40
   24358:	f3ef 8511 	mrs	r5, BASEPRI
   2435c:	f382 8812 	msr	BASEPRI_MAX, r2
   24360:	f3bf 8f6f 	isb	sy
   24364:	e007      	b.n	24376 <z_ready_thread+0x28>
			ready_thread(thread);
   24366:	4620      	mov	r0, r4
   24368:	f7f7 ffae 	bl	1c2c8 <ready_thread>
	__asm__ volatile(
   2436c:	f385 8811 	msr	BASEPRI, r5
   24370:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24374:	2301      	movs	r3, #1
   24376:	b92b      	cbnz	r3, 24384 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   24378:	4620      	mov	r0, r4
   2437a:	f7ff ff74 	bl	24266 <thread_active_elsewhere>
   2437e:	2800      	cmp	r0, #0
   24380:	d1f4      	bne.n	2436c <z_ready_thread+0x1e>
   24382:	e7f0      	b.n	24366 <z_ready_thread+0x18>
}
   24384:	bd38      	pop	{r3, r4, r5, pc}

00024386 <z_thread_timeout>:
{
   24386:	b570      	push	{r4, r5, r6, lr}
   24388:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2438a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   2438e:	2300      	movs	r3, #0
	__asm__ volatile(
   24390:	f04f 0240 	mov.w	r2, #64	; 0x40
   24394:	f3ef 8611 	mrs	r6, BASEPRI
   24398:	f382 8812 	msr	BASEPRI_MAX, r2
   2439c:	f3bf 8f6f 	isb	sy
   243a0:	e019      	b.n	243d6 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   243a2:	4628      	mov	r0, r5
   243a4:	f7ff ff61 	bl	2426a <pended_on_thread>
   243a8:	4629      	mov	r1, r5
   243aa:	f7ff ff9e 	bl	242ea <z_priq_dumb_remove>
   243ae:	7b6b      	ldrb	r3, [r5, #13]
   243b0:	f023 0302 	bic.w	r3, r3, #2
   243b4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   243b6:	2300      	movs	r3, #0
   243b8:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   243ba:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   243be:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   243c2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   243c6:	4628      	mov	r0, r5
   243c8:	f7f7 ff7e 	bl	1c2c8 <ready_thread>
	__asm__ volatile(
   243cc:	f386 8811 	msr	BASEPRI, r6
   243d0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   243d4:	2301      	movs	r3, #1
   243d6:	b94b      	cbnz	r3, 243ec <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   243d8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   243dc:	f013 0f28 	tst.w	r3, #40	; 0x28
   243e0:	d1f4      	bne.n	243cc <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   243e2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   243e6:	2b00      	cmp	r3, #0
   243e8:	d1db      	bne.n	243a2 <z_thread_timeout+0x1c>
   243ea:	e7e6      	b.n	243ba <z_thread_timeout+0x34>
}
   243ec:	bd70      	pop	{r4, r5, r6, pc}

000243ee <add_to_waitq_locked>:
{
   243ee:	b570      	push	{r4, r5, r6, lr}
   243f0:	4605      	mov	r5, r0
   243f2:	460e      	mov	r6, r1
	unready_thread(thread);
   243f4:	f7f7 ffc6 	bl	1c384 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   243f8:	7b6b      	ldrb	r3, [r5, #13]
   243fa:	f043 0302 	orr.w	r3, r3, #2
   243fe:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   24400:	b1b6      	cbz	r6, 24430 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   24402:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   24404:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24406:	42a6      	cmp	r6, r4
   24408:	d019      	beq.n	2443e <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2440a:	b164      	cbz	r4, 24426 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2440c:	4621      	mov	r1, r4
   2440e:	4628      	mov	r0, r5
   24410:	f7ff ff2d 	bl	2426e <z_sched_prio_cmp>
   24414:	2800      	cmp	r0, #0
   24416:	dc0c      	bgt.n	24432 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24418:	b12c      	cbz	r4, 24426 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   2441a:	6873      	ldr	r3, [r6, #4]
   2441c:	429c      	cmp	r4, r3
   2441e:	d002      	beq.n	24426 <add_to_waitq_locked+0x38>
   24420:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24422:	2c00      	cmp	r4, #0
   24424:	d1f1      	bne.n	2440a <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   24426:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   24428:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   2442a:	606b      	str	r3, [r5, #4]
	tail->next = node;
   2442c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2442e:	6075      	str	r5, [r6, #4]
}
   24430:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   24432:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   24434:	606b      	str	r3, [r5, #4]
	node->next = successor;
   24436:	602c      	str	r4, [r5, #0]
	prev->next = node;
   24438:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2443a:	6065      	str	r5, [r4, #4]
}
   2443c:	e7f8      	b.n	24430 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2443e:	2400      	movs	r4, #0
   24440:	e7e3      	b.n	2440a <add_to_waitq_locked+0x1c>

00024442 <pend>:
{
   24442:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24446:	4605      	mov	r5, r0
   24448:	460f      	mov	r7, r1
   2444a:	4691      	mov	r9, r2
   2444c:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   2444e:	2400      	movs	r4, #0
	__asm__ volatile(
   24450:	f04f 0340 	mov.w	r3, #64	; 0x40
   24454:	f3ef 8611 	mrs	r6, BASEPRI
   24458:	f383 8812 	msr	BASEPRI_MAX, r3
   2445c:	f3bf 8f6f 	isb	sy
   24460:	b94c      	cbnz	r4, 24476 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   24462:	4639      	mov	r1, r7
   24464:	4628      	mov	r0, r5
   24466:	f7ff ffc2 	bl	243ee <add_to_waitq_locked>
	__asm__ volatile(
   2446a:	f386 8811 	msr	BASEPRI, r6
   2446e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24472:	2401      	movs	r4, #1
   24474:	e7f4      	b.n	24460 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   24476:	464a      	mov	r2, r9
   24478:	4643      	mov	r3, r8
   2447a:	4628      	mov	r0, r5
   2447c:	f7f7 fdd8 	bl	1c030 <add_thread_timeout>
}
   24480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024484 <z_unpend1_no_timeout>:
{
   24484:	b570      	push	{r4, r5, r6, lr}
   24486:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   24488:	2300      	movs	r3, #0
	__asm__ volatile(
   2448a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2448e:	f3ef 8511 	mrs	r5, BASEPRI
   24492:	f382 8812 	msr	BASEPRI_MAX, r2
   24496:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2449a:	461c      	mov	r4, r3
   2449c:	e00f      	b.n	244be <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2449e:	f7ff fee4 	bl	2426a <pended_on_thread>
   244a2:	4621      	mov	r1, r4
   244a4:	f7ff ff21 	bl	242ea <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   244a8:	7b63      	ldrb	r3, [r4, #13]
   244aa:	f023 0302 	bic.w	r3, r3, #2
   244ae:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   244b0:	2300      	movs	r3, #0
   244b2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   244b4:	f385 8811 	msr	BASEPRI, r5
   244b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   244bc:	2301      	movs	r3, #1
   244be:	b933      	cbnz	r3, 244ce <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   244c0:	4630      	mov	r0, r6
   244c2:	f7ff ff3d 	bl	24340 <z_priq_dumb_best>
		if (thread != NULL) {
   244c6:	4604      	mov	r4, r0
   244c8:	2800      	cmp	r0, #0
   244ca:	d1e8      	bne.n	2449e <z_unpend1_no_timeout+0x1a>
   244cc:	e7f2      	b.n	244b4 <z_unpend1_no_timeout+0x30>
}
   244ce:	4620      	mov	r0, r4
   244d0:	bd70      	pop	{r4, r5, r6, pc}

000244d2 <z_unpend_first_thread>:
{
   244d2:	b570      	push	{r4, r5, r6, lr}
   244d4:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   244d6:	2300      	movs	r3, #0
	__asm__ volatile(
   244d8:	f04f 0240 	mov.w	r2, #64	; 0x40
   244dc:	f3ef 8511 	mrs	r5, BASEPRI
   244e0:	f382 8812 	msr	BASEPRI_MAX, r2
   244e4:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   244e8:	461c      	mov	r4, r3
   244ea:	e013      	b.n	24514 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   244ec:	f7ff febd 	bl	2426a <pended_on_thread>
   244f0:	4621      	mov	r1, r4
   244f2:	f7ff fefa 	bl	242ea <z_priq_dumb_remove>
   244f6:	7b63      	ldrb	r3, [r4, #13]
   244f8:	f023 0302 	bic.w	r3, r3, #2
   244fc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   244fe:	2300      	movs	r3, #0
   24500:	60a3      	str	r3, [r4, #8]
   24502:	f104 0018 	add.w	r0, r4, #24
   24506:	f000 f872 	bl	245ee <z_abort_timeout>
	__asm__ volatile(
   2450a:	f385 8811 	msr	BASEPRI, r5
   2450e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24512:	2301      	movs	r3, #1
   24514:	b933      	cbnz	r3, 24524 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   24516:	4630      	mov	r0, r6
   24518:	f7ff ff12 	bl	24340 <z_priq_dumb_best>
		if (thread != NULL) {
   2451c:	4604      	mov	r4, r0
   2451e:	2800      	cmp	r0, #0
   24520:	d1e4      	bne.n	244ec <z_unpend_first_thread+0x1a>
   24522:	e7f2      	b.n	2450a <z_unpend_first_thread+0x38>
}
   24524:	4620      	mov	r0, r4
   24526:	bd70      	pop	{r4, r5, r6, pc}

00024528 <z_unpend_all>:
{
   24528:	b538      	push	{r3, r4, r5, lr}
   2452a:	4605      	mov	r5, r0
	int need_sched = 0;
   2452c:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2452e:	e006      	b.n	2453e <z_unpend_all+0x16>
		z_unpend_thread(thread);
   24530:	4620      	mov	r0, r4
   24532:	f7ff fee2 	bl	242fa <z_unpend_thread>
		z_ready_thread(thread);
   24536:	4620      	mov	r0, r4
   24538:	f7ff ff09 	bl	2434e <z_ready_thread>
		need_sched = 1;
   2453c:	2001      	movs	r0, #1
	return list->head == list;
   2453e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24540:	42a5      	cmp	r5, r4
   24542:	d001      	beq.n	24548 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24544:	2c00      	cmp	r4, #0
   24546:	d1f3      	bne.n	24530 <z_unpend_all+0x8>
}
   24548:	bd38      	pop	{r3, r4, r5, pc}

0002454a <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2454a:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   2454c:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   2454e:	6083      	str	r3, [r0, #8]
}
   24550:	4770      	bx	lr

00024552 <z_sched_wake>:
{
   24552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24556:	4606      	mov	r6, r0
   24558:	4688      	mov	r8, r1
   2455a:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   2455c:	2300      	movs	r3, #0
	__asm__ volatile(
   2455e:	f04f 0240 	mov.w	r2, #64	; 0x40
   24562:	f3ef 8511 	mrs	r5, BASEPRI
   24566:	f382 8812 	msr	BASEPRI_MAX, r2
   2456a:	f3bf 8f6f 	isb	sy
	bool ret = false;
   2456e:	4699      	mov	r9, r3
   24570:	e01b      	b.n	245aa <z_sched_wake+0x58>
   24572:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   24576:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24578:	f7ff fe77 	bl	2426a <pended_on_thread>
   2457c:	4621      	mov	r1, r4
   2457e:	f7ff feb4 	bl	242ea <z_priq_dumb_remove>
   24582:	7b63      	ldrb	r3, [r4, #13]
   24584:	f023 0302 	bic.w	r3, r3, #2
   24588:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2458a:	2300      	movs	r3, #0
   2458c:	60a3      	str	r3, [r4, #8]
   2458e:	f104 0018 	add.w	r0, r4, #24
   24592:	f000 f82c 	bl	245ee <z_abort_timeout>
			ready_thread(thread);
   24596:	4620      	mov	r0, r4
   24598:	f7f7 fe96 	bl	1c2c8 <ready_thread>
			ret = true;
   2459c:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   245a0:	f385 8811 	msr	BASEPRI, r5
   245a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   245a8:	2301      	movs	r3, #1
   245aa:	b933      	cbnz	r3, 245ba <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   245ac:	4630      	mov	r0, r6
   245ae:	f7ff fec7 	bl	24340 <z_priq_dumb_best>
		if (thread != NULL) {
   245b2:	4604      	mov	r4, r0
   245b4:	2800      	cmp	r0, #0
   245b6:	d1dc      	bne.n	24572 <z_sched_wake+0x20>
   245b8:	e7f2      	b.n	245a0 <z_sched_wake+0x4e>
}
   245ba:	4648      	mov	r0, r9
   245bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000245c0 <remove_timeout>:
{
   245c0:	b538      	push	{r3, r4, r5, lr}
   245c2:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   245c4:	f7f8 f964 	bl	1c890 <next>
   245c8:	b148      	cbz	r0, 245de <remove_timeout+0x1e>
   245ca:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   245cc:	6920      	ldr	r0, [r4, #16]
   245ce:	6965      	ldr	r5, [r4, #20]
   245d0:	6913      	ldr	r3, [r2, #16]
   245d2:	6951      	ldr	r1, [r2, #20]
   245d4:	181b      	adds	r3, r3, r0
   245d6:	eb45 0101 	adc.w	r1, r5, r1
   245da:	6113      	str	r3, [r2, #16]
   245dc:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   245de:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   245e0:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   245e2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   245e4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   245e6:	2300      	movs	r3, #0
   245e8:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   245ea:	6063      	str	r3, [r4, #4]
}
   245ec:	bd38      	pop	{r3, r4, r5, pc}

000245ee <z_abort_timeout>:
{
   245ee:	b570      	push	{r4, r5, r6, lr}
   245f0:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   245f2:	2300      	movs	r3, #0
	__asm__ volatile(
   245f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   245f8:	f3ef 8611 	mrs	r6, BASEPRI
   245fc:	f382 8812 	msr	BASEPRI_MAX, r2
   24600:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   24604:	f06f 0015 	mvn.w	r0, #21
   24608:	e008      	b.n	2461c <z_abort_timeout+0x2e>
			remove_timeout(to);
   2460a:	4620      	mov	r0, r4
   2460c:	f7ff ffd8 	bl	245c0 <remove_timeout>
			ret = 0;
   24610:	4628      	mov	r0, r5
	__asm__ volatile(
   24612:	f386 8811 	msr	BASEPRI, r6
   24616:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2461a:	2301      	movs	r3, #1
   2461c:	461d      	mov	r5, r3
   2461e:	b91b      	cbnz	r3, 24628 <z_abort_timeout+0x3a>
	return node->next != NULL;
   24620:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   24622:	2b00      	cmp	r3, #0
   24624:	d1f1      	bne.n	2460a <z_abort_timeout+0x1c>
   24626:	e7f4      	b.n	24612 <z_abort_timeout+0x24>
}
   24628:	bd70      	pop	{r4, r5, r6, pc}

0002462a <z_get_next_timeout_expiry>:
{
   2462a:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   2462c:	2300      	movs	r3, #0
	__asm__ volatile(
   2462e:	f04f 0240 	mov.w	r2, #64	; 0x40
   24632:	f3ef 8411 	mrs	r4, BASEPRI
   24636:	f382 8812 	msr	BASEPRI_MAX, r2
   2463a:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2463e:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   24642:	b93b      	cbnz	r3, 24654 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   24644:	f7f8 f93c 	bl	1c8c0 <next_timeout>
	__asm__ volatile(
   24648:	f384 8811 	msr	BASEPRI, r4
   2464c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24650:	2301      	movs	r3, #1
   24652:	e7f6      	b.n	24642 <z_get_next_timeout_expiry+0x18>
}
   24654:	bd10      	pop	{r4, pc}

00024656 <z_set_timeout_expiry>:
{
   24656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24658:	4606      	mov	r6, r0
   2465a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   2465c:	2300      	movs	r3, #0
	__asm__ volatile(
   2465e:	f04f 0240 	mov.w	r2, #64	; 0x40
   24662:	f3ef 8511 	mrs	r5, BASEPRI
   24666:	f382 8812 	msr	BASEPRI_MAX, r2
   2466a:	f3bf 8f6f 	isb	sy
   2466e:	e00a      	b.n	24686 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   24670:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   24672:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24676:	2801      	cmp	r0, #1
   24678:	dd00      	ble.n	2467c <z_set_timeout_expiry+0x26>
   2467a:	b97c      	cbnz	r4, 2469c <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   2467c:	f385 8811 	msr	BASEPRI, r5
   24680:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24684:	2301      	movs	r3, #1
   24686:	461c      	mov	r4, r3
   24688:	b97b      	cbnz	r3, 246aa <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   2468a:	f7f8 f919 	bl	1c8c0 <next_timeout>
			      || (ticks <= next_to);
   2468e:	f1b0 3fff 	cmp.w	r0, #4294967295
   24692:	d0ed      	beq.n	24670 <z_set_timeout_expiry+0x1a>
   24694:	42b0      	cmp	r0, r6
   24696:	dbec      	blt.n	24672 <z_set_timeout_expiry+0x1c>
   24698:	2401      	movs	r4, #1
   2469a:	e7ea      	b.n	24672 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2469c:	4639      	mov	r1, r7
   2469e:	42b0      	cmp	r0, r6
   246a0:	bfa8      	it	ge
   246a2:	4630      	movge	r0, r6
   246a4:	f7f5 fc14 	bl	19ed0 <sys_clock_set_timeout>
   246a8:	e7e8      	b.n	2467c <z_set_timeout_expiry+0x26>
}
   246aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000246ac <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   246ac:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   246ae:	f7f8 fa39 	bl	1cb24 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   246b2:	bd08      	pop	{r3, pc}

000246b4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   246b4:	b900      	cbnz	r0, 246b8 <z_impl_k_busy_wait+0x4>
   246b6:	4770      	bx	lr
{
   246b8:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   246ba:	f7ee ff27 	bl	1350c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   246be:	bd08      	pop	{r3, pc}

000246c0 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   246c0:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   246c2:	f1b1 3fff 	cmp.w	r1, #4294967295
   246c6:	bf08      	it	eq
   246c8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   246cc:	d024      	beq.n	24718 <sys_clock_timeout_end_calc+0x58>
   246ce:	4604      	mov	r4, r0
   246d0:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   246d2:	ea54 0105 	orrs.w	r1, r4, r5
   246d6:	d00d      	beq.n	246f4 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   246d8:	f06f 0101 	mvn.w	r1, #1
   246dc:	1a0a      	subs	r2, r1, r0
   246de:	f04f 31ff 	mov.w	r1, #4294967295
   246e2:	eb61 0305 	sbc.w	r3, r1, r5
   246e6:	2a00      	cmp	r2, #0
   246e8:	f173 0100 	sbcs.w	r1, r3, #0
   246ec:	db05      	blt.n	246fa <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   246ee:	4610      	mov	r0, r2
   246f0:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   246f2:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   246f4:	f7f8 fa16 	bl	1cb24 <sys_clock_tick_get>
   246f8:	e7fb      	b.n	246f2 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   246fa:	f7f8 fa13 	bl	1cb24 <sys_clock_tick_get>
   246fe:	4623      	mov	r3, r4
   24700:	462a      	mov	r2, r5
   24702:	2c01      	cmp	r4, #1
   24704:	f175 0400 	sbcs.w	r4, r5, #0
   24708:	db03      	blt.n	24712 <sys_clock_timeout_end_calc+0x52>
   2470a:	18c0      	adds	r0, r0, r3
   2470c:	eb42 0101 	adc.w	r1, r2, r1
   24710:	e7ef      	b.n	246f2 <sys_clock_timeout_end_calc+0x32>
   24712:	2301      	movs	r3, #1
   24714:	2200      	movs	r2, #0
   24716:	e7f8      	b.n	2470a <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   24718:	f04f 30ff 	mov.w	r0, #4294967295
   2471c:	4601      	mov	r1, r0
   2471e:	e7e8      	b.n	246f2 <sys_clock_timeout_end_calc+0x32>

00024720 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   24720:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   24722:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   24724:	2300      	movs	r3, #0
   24726:	6303      	str	r3, [r0, #48]	; 0x30
   24728:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2472c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2472e:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   24730:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   24732:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   24734:	6343      	str	r3, [r0, #52]	; 0x34
}
   24736:	4770      	bx	lr

00024738 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   24738:	b510      	push	{r4, lr}
   2473a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2473c:	f7ff ff57 	bl	245ee <z_abort_timeout>

	if (inactive) {
   24740:	b9a0      	cbnz	r0, 2476c <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   24742:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24744:	b10b      	cbz	r3, 2474a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   24746:	4620      	mov	r0, r4
   24748:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2474a:	f104 0018 	add.w	r0, r4, #24
   2474e:	f7ff fe99 	bl	24484 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   24752:	b158      	cbz	r0, 2476c <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   24754:	f7ff fdfb 	bl	2434e <z_ready_thread>
	__asm__ volatile(
   24758:	f04f 0340 	mov.w	r3, #64	; 0x40
   2475c:	f3ef 8011 	mrs	r0, BASEPRI
   24760:	f383 8812 	msr	BASEPRI_MAX, r3
   24764:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24768:	f7ff fdaa 	bl	242c0 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   2476c:	bd10      	pop	{r4, pc}

0002476e <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2476e:	b108      	cbz	r0, 24774 <poller_thread+0x6>
   24770:	3860      	subs	r0, #96	; 0x60
   24772:	4770      	bx	lr
}
   24774:	4770      	bx	lr

00024776 <signal_poller>:
{
   24776:	b538      	push	{r3, r4, r5, lr}
   24778:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   2477a:	6880      	ldr	r0, [r0, #8]
   2477c:	f7ff fff7 	bl	2476e <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   24780:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   24782:	f013 0f02 	tst.w	r3, #2
   24786:	d028      	beq.n	247da <signal_poller+0x64>
   24788:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   2478a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   2478e:	f06f 0001 	mvn.w	r0, #1
   24792:	f04f 31ff 	mov.w	r1, #4294967295
   24796:	428b      	cmp	r3, r1
   24798:	bf08      	it	eq
   2479a:	4282      	cmpeq	r2, r0
   2479c:	d01f      	beq.n	247de <signal_poller+0x68>
	z_unpend_thread(thread);
   2479e:	4620      	mov	r0, r4
   247a0:	f7ff fdab 	bl	242fa <z_unpend_thread>
	arch_thread_return_value_set(thread,
   247a4:	2d08      	cmp	r5, #8
   247a6:	d00a      	beq.n	247be <signal_poller+0x48>
   247a8:	2300      	movs	r3, #0
   247aa:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   247ae:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   247b0:	f013 0f1f 	tst.w	r3, #31
   247b4:	d108      	bne.n	247c8 <signal_poller+0x52>
	return node->next != NULL;
   247b6:	69a3      	ldr	r3, [r4, #24]
   247b8:	b123      	cbz	r3, 247c4 <signal_poller+0x4e>
   247ba:	2300      	movs	r3, #0
   247bc:	e005      	b.n	247ca <signal_poller+0x54>
   247be:	f06f 0303 	mvn.w	r3, #3
   247c2:	e7f2      	b.n	247aa <signal_poller+0x34>
   247c4:	2301      	movs	r3, #1
   247c6:	e000      	b.n	247ca <signal_poller+0x54>
   247c8:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   247ca:	b90b      	cbnz	r3, 247d0 <signal_poller+0x5a>
		return 0;
   247cc:	2000      	movs	r0, #0
   247ce:	e005      	b.n	247dc <signal_poller+0x66>
	z_ready_thread(thread);
   247d0:	4620      	mov	r0, r4
   247d2:	f7ff fdbc 	bl	2434e <z_ready_thread>
	return 0;
   247d6:	2000      	movs	r0, #0
   247d8:	e000      	b.n	247dc <signal_poller+0x66>
		return 0;
   247da:	2000      	movs	r0, #0
}
   247dc:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   247de:	f06f 000a 	mvn.w	r0, #10
   247e2:	e7fb      	b.n	247dc <signal_poller+0x66>

000247e4 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   247e4:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   247e6:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   247e8:	7823      	ldrb	r3, [r4, #0]
   247ea:	b173      	cbz	r3, 2480a <signal_triggered_work+0x26>
   247ec:	f854 5c04 	ldr.w	r5, [r4, #-4]
   247f0:	b15d      	cbz	r5, 2480a <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   247f2:	f1a4 0614 	sub.w	r6, r4, #20
   247f6:	f104 0014 	add.w	r0, r4, #20
   247fa:	f7ff fef8 	bl	245ee <z_abort_timeout>
		twork->poll_result = 0;
   247fe:	2300      	movs	r3, #0
   24800:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   24802:	4631      	mov	r1, r6
   24804:	4628      	mov	r0, r5
   24806:	f7ff fc87 	bl	24118 <k_work_submit_to_queue>
	}

	return 0;
}
   2480a:	2000      	movs	r0, #0
   2480c:	bd70      	pop	{r4, r5, r6, pc}

0002480e <signal_poll_event>:
{
   2480e:	b570      	push	{r4, r5, r6, lr}
   24810:	4604      	mov	r4, r0
   24812:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   24814:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   24816:	b1d6      	cbz	r6, 2484e <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   24818:	7873      	ldrb	r3, [r6, #1]
   2481a:	2b01      	cmp	r3, #1
   2481c:	d00d      	beq.n	2483a <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2481e:	2b02      	cmp	r3, #2
   24820:	d012      	beq.n	24848 <signal_poll_event+0x3a>
		poller->is_polling = false;
   24822:	2000      	movs	r0, #0
   24824:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   24826:	2300      	movs	r3, #0
   24828:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2482a:	68e3      	ldr	r3, [r4, #12]
   2482c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   24830:	430d      	orrs	r5, r1
   24832:	f365 3352 	bfi	r3, r5, #13, #6
   24836:	60e3      	str	r3, [r4, #12]
}
   24838:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2483a:	f7ff ff9c 	bl	24776 <signal_poller>
		poller->is_polling = false;
   2483e:	2300      	movs	r3, #0
   24840:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   24842:	4298      	cmp	r0, r3
   24844:	daef      	bge.n	24826 <signal_poll_event+0x18>
   24846:	e7f7      	b.n	24838 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   24848:	f7ff ffcc 	bl	247e4 <signal_triggered_work>
   2484c:	e7f7      	b.n	2483e <signal_poll_event+0x30>
	int retcode = 0;
   2484e:	2000      	movs	r0, #0
   24850:	e7e9      	b.n	24826 <signal_poll_event+0x18>

00024852 <k_poll_event_init>:
{
   24852:	b430      	push	{r4, r5}
	event->poller = NULL;
   24854:	2400      	movs	r4, #0
   24856:	6084      	str	r4, [r0, #8]
	event->type = type;
   24858:	7b45      	ldrb	r5, [r0, #13]
   2485a:	f361 0504 	bfi	r5, r1, #0, #5
   2485e:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   24860:	68c1      	ldr	r1, [r0, #12]
   24862:	f364 3152 	bfi	r1, r4, #13, #6
   24866:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   24868:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2486c:	f362 01c3 	bfi	r1, r2, #3, #1
   24870:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   24872:	89c2      	ldrh	r2, [r0, #14]
   24874:	f364 120f 	bfi	r2, r4, #4, #12
   24878:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   2487a:	6103      	str	r3, [r0, #16]
}
   2487c:	bc30      	pop	{r4, r5}
   2487e:	4770      	bx	lr

00024880 <z_handle_obj_poll_events>:
{
   24880:	b508      	push	{r3, lr}
   24882:	4603      	mov	r3, r0
	return list->head == list;
   24884:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   24886:	4283      	cmp	r3, r0
   24888:	d009      	beq.n	2489e <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   2488a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2488c:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2488e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24890:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24892:	2300      	movs	r3, #0
   24894:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   24896:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   24898:	b108      	cbz	r0, 2489e <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   2489a:	f7ff ffb8 	bl	2480e <signal_poll_event>
}
   2489e:	bd08      	pop	{r3, pc}

000248a0 <z_heap_aligned_alloc>:
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   248a0:	3204      	adds	r2, #4
   248a2:	d20f      	bcs.n	248c4 <z_heap_aligned_alloc+0x24>
{
   248a4:	b5d0      	push	{r4, r6, r7, lr}
   248a6:	b082      	sub	sp, #8
   248a8:	4604      	mov	r4, r0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   248aa:	2600      	movs	r6, #0
   248ac:	2700      	movs	r7, #0
   248ae:	e9cd 6700 	strd	r6, r7, [sp]
   248b2:	f041 0104 	orr.w	r1, r1, #4
   248b6:	f7ff f99e 	bl	23bf6 <k_heap_aligned_alloc>
	if (mem == NULL) {
   248ba:	b108      	cbz	r0, 248c0 <z_heap_aligned_alloc+0x20>
	*heap_ref = heap;
   248bc:	f840 4b04 	str.w	r4, [r0], #4
}
   248c0:	b002      	add	sp, #8
   248c2:	bdd0      	pop	{r4, r6, r7, pc}
		return NULL;
   248c4:	2000      	movs	r0, #0
}
   248c6:	4770      	bx	lr

000248c8 <k_free>:
	if (ptr != NULL) {
   248c8:	b130      	cbz	r0, 248d8 <k_free+0x10>
{
   248ca:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   248cc:	1f01      	subs	r1, r0, #4
   248ce:	f850 0c04 	ldr.w	r0, [r0, #-4]
   248d2:	f7ff f9db 	bl	23c8c <k_heap_free>
}
   248d6:	bd08      	pop	{r3, pc}
   248d8:	4770      	bx	lr

000248da <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   248da:	4770      	bx	lr

000248dc <memcmp>:
   248dc:	b530      	push	{r4, r5, lr}
   248de:	3901      	subs	r1, #1
   248e0:	2400      	movs	r4, #0
   248e2:	42a2      	cmp	r2, r4
   248e4:	d101      	bne.n	248ea <memcmp+0xe>
   248e6:	2000      	movs	r0, #0
   248e8:	e005      	b.n	248f6 <memcmp+0x1a>
   248ea:	5d03      	ldrb	r3, [r0, r4]
   248ec:	3401      	adds	r4, #1
   248ee:	5d0d      	ldrb	r5, [r1, r4]
   248f0:	42ab      	cmp	r3, r5
   248f2:	d0f6      	beq.n	248e2 <memcmp+0x6>
   248f4:	1b58      	subs	r0, r3, r5
   248f6:	bd30      	pop	{r4, r5, pc}

000248f8 <memcpy>:
   248f8:	440a      	add	r2, r1
   248fa:	4291      	cmp	r1, r2
   248fc:	f100 33ff 	add.w	r3, r0, #4294967295
   24900:	d100      	bne.n	24904 <memcpy+0xc>
   24902:	4770      	bx	lr
   24904:	b510      	push	{r4, lr}
   24906:	f811 4b01 	ldrb.w	r4, [r1], #1
   2490a:	f803 4f01 	strb.w	r4, [r3, #1]!
   2490e:	4291      	cmp	r1, r2
   24910:	d1f9      	bne.n	24906 <memcpy+0xe>
   24912:	bd10      	pop	{r4, pc}

00024914 <memmove>:
   24914:	4288      	cmp	r0, r1
   24916:	b510      	push	{r4, lr}
   24918:	eb01 0402 	add.w	r4, r1, r2
   2491c:	d902      	bls.n	24924 <memmove+0x10>
   2491e:	4284      	cmp	r4, r0
   24920:	4623      	mov	r3, r4
   24922:	d807      	bhi.n	24934 <memmove+0x20>
   24924:	1e43      	subs	r3, r0, #1
   24926:	42a1      	cmp	r1, r4
   24928:	d008      	beq.n	2493c <memmove+0x28>
   2492a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2492e:	f803 2f01 	strb.w	r2, [r3, #1]!
   24932:	e7f8      	b.n	24926 <memmove+0x12>
   24934:	4402      	add	r2, r0
   24936:	4601      	mov	r1, r0
   24938:	428a      	cmp	r2, r1
   2493a:	d100      	bne.n	2493e <memmove+0x2a>
   2493c:	bd10      	pop	{r4, pc}
   2493e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   24942:	f802 4d01 	strb.w	r4, [r2, #-1]!
   24946:	e7f7      	b.n	24938 <memmove+0x24>

00024948 <memset>:
   24948:	4402      	add	r2, r0
   2494a:	4603      	mov	r3, r0
   2494c:	4293      	cmp	r3, r2
   2494e:	d100      	bne.n	24952 <memset+0xa>
   24950:	4770      	bx	lr
   24952:	f803 1b01 	strb.w	r1, [r3], #1
   24956:	e7f9      	b.n	2494c <memset+0x4>

00024958 <strncpy>:
   24958:	b510      	push	{r4, lr}
   2495a:	3901      	subs	r1, #1
   2495c:	4603      	mov	r3, r0
   2495e:	b132      	cbz	r2, 2496e <strncpy+0x16>
   24960:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   24964:	f803 4b01 	strb.w	r4, [r3], #1
   24968:	3a01      	subs	r2, #1
   2496a:	2c00      	cmp	r4, #0
   2496c:	d1f7      	bne.n	2495e <strncpy+0x6>
   2496e:	441a      	add	r2, r3
   24970:	2100      	movs	r1, #0
   24972:	4293      	cmp	r3, r2
   24974:	d100      	bne.n	24978 <strncpy+0x20>
   24976:	bd10      	pop	{r4, pc}
   24978:	f803 1b01 	strb.w	r1, [r3], #1
   2497c:	e7f9      	b.n	24972 <strncpy+0x1a>

0002497e <strnlen>:
   2497e:	b510      	push	{r4, lr}
   24980:	4602      	mov	r2, r0
   24982:	4401      	add	r1, r0
   24984:	428a      	cmp	r2, r1
   24986:	4613      	mov	r3, r2
   24988:	d101      	bne.n	2498e <strnlen+0x10>
   2498a:	1a18      	subs	r0, r3, r0
   2498c:	bd10      	pop	{r4, pc}
   2498e:	781c      	ldrb	r4, [r3, #0]
   24990:	3201      	adds	r2, #1
   24992:	2c00      	cmp	r4, #0
   24994:	d1f6      	bne.n	24984 <strnlen+0x6>
   24996:	e7f8      	b.n	2498a <strnlen+0xc>

00024998 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   24998:	f7f5 bed4 	b.w	1a744 <SystemInit>
