
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200014c0 	.word	0x200014c0
}
   4:	00003d51 	.word	0x00003d51
   8:	00007b5d 	.word	0x00007b5d
   c:	00003d09 	.word	0x00003d09
  10:	00003d09 	.word	0x00003d09
  14:	00003d09 	.word	0x00003d09
  18:	00003d09 	.word	0x00003d09
	...
  2c:	00003989 	.word	0x00003989
  30:	00003d09 	.word	0x00003d09
  34:	00000000 	.word	0x00000000
  38:	00003931 	.word	0x00003931
  3c:	00003d09 	.word	0x00003d09

00000040 <_irq_vector_table>:
  40:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  50:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  60:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  70:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  80:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  90:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  a0:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  b0:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  c0:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  d0:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  e0:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..
  f0:	00003a75 00003a75 00003a75 00003a75     u:..u:..u:..u:..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_IDLE_STACK_SIZE+0x1ba>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_IDLE_STACK_SIZE+0xf0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_IDLE_STACK_SIZE+0x20c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_IDLE_STACK_SIZE+0x13a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_IDLE_STACK_SIZE+0x136>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_IDLE_STACK_SIZE+0x150>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_IDLE_STACK_SIZE+0x19e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_IDLE_STACK_SIZE+0x21a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_IDLE_STACK_SIZE+0x1de>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_IDLE_STACK_SIZE+0x1fc>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2f>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8a4:	bf24      	itt	cs
     8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8ae:	d90d      	bls.n	8cc <__aeabi_d2f+0x30>
     8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8c4:	bf08      	it	eq
     8c6:	f020 0001 	biceq.w	r0, r0, #1
     8ca:	4770      	bx	lr
     8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8d0:	d121      	bne.n	916 <__aeabi_d2f+0x7a>
     8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8d6:	bfbc      	itt	lt
     8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8dc:	4770      	bxlt	lr
     8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8e6:	f1c2 0218 	rsb	r2, r2, #24
     8ea:	f1c2 0c20 	rsb	ip, r2, #32
     8ee:	fa10 f30c 	lsls.w	r3, r0, ip
     8f2:	fa20 f002 	lsr.w	r0, r0, r2
     8f6:	bf18      	it	ne
     8f8:	f040 0001 	orrne.w	r0, r0, #1
     8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     904:	fa03 fc0c 	lsl.w	ip, r3, ip
     908:	ea40 000c 	orr.w	r0, r0, ip
     90c:	fa23 f302 	lsr.w	r3, r3, r2
     910:	ea4f 0343 	mov.w	r3, r3, lsl #1
     914:	e7cc      	b.n	8b0 <__aeabi_d2f+0x14>
     916:	ea7f 5362 	mvns.w	r3, r2, asr #21
     91a:	d107      	bne.n	92c <__aeabi_d2f+0x90>
     91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     920:	bf1e      	ittt	ne
     922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     92a:	4770      	bxne	lr
     92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     938:	4770      	bx	lr
     93a:	bf00      	nop

0000093c <__aeabi_frsub>:
     93c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     940:	e002      	b.n	948 <__addsf3>
     942:	bf00      	nop

00000944 <__aeabi_fsub>:
     944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000948 <__addsf3>:
     948:	0042      	lsls	r2, r0, #1
     94a:	bf1f      	itttt	ne
     94c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     950:	ea92 0f03 	teqne	r2, r3
     954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     95c:	d06a      	beq.n	a34 <__addsf3+0xec>
     95e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     966:	bfc1      	itttt	gt
     968:	18d2      	addgt	r2, r2, r3
     96a:	4041      	eorgt	r1, r0
     96c:	4048      	eorgt	r0, r1
     96e:	4041      	eorgt	r1, r0
     970:	bfb8      	it	lt
     972:	425b      	neglt	r3, r3
     974:	2b19      	cmp	r3, #25
     976:	bf88      	it	hi
     978:	4770      	bxhi	lr
     97a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     97e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     986:	bf18      	it	ne
     988:	4240      	negne	r0, r0
     98a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     98e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     996:	bf18      	it	ne
     998:	4249      	negne	r1, r1
     99a:	ea92 0f03 	teq	r2, r3
     99e:	d03f      	beq.n	a20 <__addsf3+0xd8>
     9a0:	f1a2 0201 	sub.w	r2, r2, #1
     9a4:	fa41 fc03 	asr.w	ip, r1, r3
     9a8:	eb10 000c 	adds.w	r0, r0, ip
     9ac:	f1c3 0320 	rsb	r3, r3, #32
     9b0:	fa01 f103 	lsl.w	r1, r1, r3
     9b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     9b8:	d502      	bpl.n	9c0 <__addsf3+0x78>
     9ba:	4249      	negs	r1, r1
     9bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     9c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     9c4:	d313      	bcc.n	9ee <__addsf3+0xa6>
     9c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     9ca:	d306      	bcc.n	9da <__addsf3+0x92>
     9cc:	0840      	lsrs	r0, r0, #1
     9ce:	ea4f 0131 	mov.w	r1, r1, rrx
     9d2:	f102 0201 	add.w	r2, r2, #1
     9d6:	2afe      	cmp	r2, #254	; 0xfe
     9d8:	d251      	bcs.n	a7e <__addsf3+0x136>
     9da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     9de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     9e2:	bf08      	it	eq
     9e4:	f020 0001 	biceq.w	r0, r0, #1
     9e8:	ea40 0003 	orr.w	r0, r0, r3
     9ec:	4770      	bx	lr
     9ee:	0049      	lsls	r1, r1, #1
     9f0:	eb40 0000 	adc.w	r0, r0, r0
     9f4:	3a01      	subs	r2, #1
     9f6:	bf28      	it	cs
     9f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     9fc:	d2ed      	bcs.n	9da <__addsf3+0x92>
     9fe:	fab0 fc80 	clz	ip, r0
     a02:	f1ac 0c08 	sub.w	ip, ip, #8
     a06:	ebb2 020c 	subs.w	r2, r2, ip
     a0a:	fa00 f00c 	lsl.w	r0, r0, ip
     a0e:	bfaa      	itet	ge
     a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a14:	4252      	neglt	r2, r2
     a16:	4318      	orrge	r0, r3
     a18:	bfbc      	itt	lt
     a1a:	40d0      	lsrlt	r0, r2
     a1c:	4318      	orrlt	r0, r3
     a1e:	4770      	bx	lr
     a20:	f092 0f00 	teq	r2, #0
     a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a28:	bf06      	itte	eq
     a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a2e:	3201      	addeq	r2, #1
     a30:	3b01      	subne	r3, #1
     a32:	e7b5      	b.n	9a0 <__addsf3+0x58>
     a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a3c:	bf18      	it	ne
     a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a42:	d021      	beq.n	a88 <__addsf3+0x140>
     a44:	ea92 0f03 	teq	r2, r3
     a48:	d004      	beq.n	a54 <__addsf3+0x10c>
     a4a:	f092 0f00 	teq	r2, #0
     a4e:	bf08      	it	eq
     a50:	4608      	moveq	r0, r1
     a52:	4770      	bx	lr
     a54:	ea90 0f01 	teq	r0, r1
     a58:	bf1c      	itt	ne
     a5a:	2000      	movne	r0, #0
     a5c:	4770      	bxne	lr
     a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a62:	d104      	bne.n	a6e <__addsf3+0x126>
     a64:	0040      	lsls	r0, r0, #1
     a66:	bf28      	it	cs
     a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a6c:	4770      	bx	lr
     a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     a72:	bf3c      	itt	cc
     a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     a78:	4770      	bxcc	lr
     a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a86:	4770      	bx	lr
     a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     a8c:	bf16      	itet	ne
     a8e:	4608      	movne	r0, r1
     a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     a94:	4601      	movne	r1, r0
     a96:	0242      	lsls	r2, r0, #9
     a98:	bf06      	itte	eq
     a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     a9e:	ea90 0f01 	teqeq	r0, r1
     aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     aa6:	4770      	bx	lr

00000aa8 <__aeabi_ui2f>:
     aa8:	f04f 0300 	mov.w	r3, #0
     aac:	e004      	b.n	ab8 <__aeabi_i2f+0x8>
     aae:	bf00      	nop

00000ab0 <__aeabi_i2f>:
     ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ab4:	bf48      	it	mi
     ab6:	4240      	negmi	r0, r0
     ab8:	ea5f 0c00 	movs.w	ip, r0
     abc:	bf08      	it	eq
     abe:	4770      	bxeq	lr
     ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     ac4:	4601      	mov	r1, r0
     ac6:	f04f 0000 	mov.w	r0, #0
     aca:	e01c      	b.n	b06 <__aeabi_l2f+0x2a>

00000acc <__aeabi_ul2f>:
     acc:	ea50 0201 	orrs.w	r2, r0, r1
     ad0:	bf08      	it	eq
     ad2:	4770      	bxeq	lr
     ad4:	f04f 0300 	mov.w	r3, #0
     ad8:	e00a      	b.n	af0 <__aeabi_l2f+0x14>
     ada:	bf00      	nop

00000adc <__aeabi_l2f>:
     adc:	ea50 0201 	orrs.w	r2, r0, r1
     ae0:	bf08      	it	eq
     ae2:	4770      	bxeq	lr
     ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ae8:	d502      	bpl.n	af0 <__aeabi_l2f+0x14>
     aea:	4240      	negs	r0, r0
     aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     af0:	ea5f 0c01 	movs.w	ip, r1
     af4:	bf02      	ittt	eq
     af6:	4684      	moveq	ip, r0
     af8:	4601      	moveq	r1, r0
     afa:	2000      	moveq	r0, #0
     afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b00:	bf08      	it	eq
     b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b0a:	fabc f28c 	clz	r2, ip
     b0e:	3a08      	subs	r2, #8
     b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b14:	db10      	blt.n	b38 <__aeabi_l2f+0x5c>
     b16:	fa01 fc02 	lsl.w	ip, r1, r2
     b1a:	4463      	add	r3, ip
     b1c:	fa00 fc02 	lsl.w	ip, r0, r2
     b20:	f1c2 0220 	rsb	r2, r2, #32
     b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b28:	fa20 f202 	lsr.w	r2, r0, r2
     b2c:	eb43 0002 	adc.w	r0, r3, r2
     b30:	bf08      	it	eq
     b32:	f020 0001 	biceq.w	r0, r0, #1
     b36:	4770      	bx	lr
     b38:	f102 0220 	add.w	r2, r2, #32
     b3c:	fa01 fc02 	lsl.w	ip, r1, r2
     b40:	f1c2 0220 	rsb	r2, r2, #32
     b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b48:	fa21 f202 	lsr.w	r2, r1, r2
     b4c:	eb43 0002 	adc.w	r0, r3, r2
     b50:	bf08      	it	eq
     b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b56:	4770      	bx	lr

00000b58 <__aeabi_fmul>:
     b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     b60:	bf1e      	ittt	ne
     b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     b66:	ea92 0f0c 	teqne	r2, ip
     b6a:	ea93 0f0c 	teqne	r3, ip
     b6e:	d06f      	beq.n	c50 <__aeabi_fmul+0xf8>
     b70:	441a      	add	r2, r3
     b72:	ea80 0c01 	eor.w	ip, r0, r1
     b76:	0240      	lsls	r0, r0, #9
     b78:	bf18      	it	ne
     b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     b7e:	d01e      	beq.n	bbe <__aeabi_fmul+0x66>
     b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     b8c:	fba0 3101 	umull	r3, r1, r0, r1
     b90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     b94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     b98:	bf3e      	ittt	cc
     b9a:	0049      	lslcc	r1, r1, #1
     b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     ba0:	005b      	lslcc	r3, r3, #1
     ba2:	ea40 0001 	orr.w	r0, r0, r1
     ba6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     baa:	2afd      	cmp	r2, #253	; 0xfd
     bac:	d81d      	bhi.n	bea <__aeabi_fmul+0x92>
     bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     bb6:	bf08      	it	eq
     bb8:	f020 0001 	biceq.w	r0, r0, #1
     bbc:	4770      	bx	lr
     bbe:	f090 0f00 	teq	r0, #0
     bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     bc6:	bf08      	it	eq
     bc8:	0249      	lsleq	r1, r1, #9
     bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     bd2:	3a7f      	subs	r2, #127	; 0x7f
     bd4:	bfc2      	ittt	gt
     bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     bde:	4770      	bxgt	lr
     be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     be4:	f04f 0300 	mov.w	r3, #0
     be8:	3a01      	subs	r2, #1
     bea:	dc5d      	bgt.n	ca8 <__aeabi_fmul+0x150>
     bec:	f112 0f19 	cmn.w	r2, #25
     bf0:	bfdc      	itt	le
     bf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     bf6:	4770      	bxle	lr
     bf8:	f1c2 0200 	rsb	r2, r2, #0
     bfc:	0041      	lsls	r1, r0, #1
     bfe:	fa21 f102 	lsr.w	r1, r1, r2
     c02:	f1c2 0220 	rsb	r2, r2, #32
     c06:	fa00 fc02 	lsl.w	ip, r0, r2
     c0a:	ea5f 0031 	movs.w	r0, r1, rrx
     c0e:	f140 0000 	adc.w	r0, r0, #0
     c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     c16:	bf08      	it	eq
     c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c1c:	4770      	bx	lr
     c1e:	f092 0f00 	teq	r2, #0
     c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c26:	bf02      	ittt	eq
     c28:	0040      	lsleq	r0, r0, #1
     c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c2e:	3a01      	subeq	r2, #1
     c30:	d0f9      	beq.n	c26 <__aeabi_fmul+0xce>
     c32:	ea40 000c 	orr.w	r0, r0, ip
     c36:	f093 0f00 	teq	r3, #0
     c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c3e:	bf02      	ittt	eq
     c40:	0049      	lsleq	r1, r1, #1
     c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c46:	3b01      	subeq	r3, #1
     c48:	d0f9      	beq.n	c3e <__aeabi_fmul+0xe6>
     c4a:	ea41 010c 	orr.w	r1, r1, ip
     c4e:	e78f      	b.n	b70 <__aeabi_fmul+0x18>
     c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     c54:	ea92 0f0c 	teq	r2, ip
     c58:	bf18      	it	ne
     c5a:	ea93 0f0c 	teqne	r3, ip
     c5e:	d00a      	beq.n	c76 <__aeabi_fmul+0x11e>
     c60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     c64:	bf18      	it	ne
     c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     c6a:	d1d8      	bne.n	c1e <__aeabi_fmul+0xc6>
     c6c:	ea80 0001 	eor.w	r0, r0, r1
     c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c74:	4770      	bx	lr
     c76:	f090 0f00 	teq	r0, #0
     c7a:	bf17      	itett	ne
     c7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     c80:	4608      	moveq	r0, r1
     c82:	f091 0f00 	teqne	r1, #0
     c86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     c8a:	d014      	beq.n	cb6 <__aeabi_fmul+0x15e>
     c8c:	ea92 0f0c 	teq	r2, ip
     c90:	d101      	bne.n	c96 <__aeabi_fmul+0x13e>
     c92:	0242      	lsls	r2, r0, #9
     c94:	d10f      	bne.n	cb6 <__aeabi_fmul+0x15e>
     c96:	ea93 0f0c 	teq	r3, ip
     c9a:	d103      	bne.n	ca4 <__aeabi_fmul+0x14c>
     c9c:	024b      	lsls	r3, r1, #9
     c9e:	bf18      	it	ne
     ca0:	4608      	movne	r0, r1
     ca2:	d108      	bne.n	cb6 <__aeabi_fmul+0x15e>
     ca4:	ea80 0001 	eor.w	r0, r0, r1
     ca8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cb4:	4770      	bx	lr
     cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     cbe:	4770      	bx	lr

00000cc0 <__aeabi_fdiv>:
     cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     cc8:	bf1e      	ittt	ne
     cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     cce:	ea92 0f0c 	teqne	r2, ip
     cd2:	ea93 0f0c 	teqne	r3, ip
     cd6:	d069      	beq.n	dac <__aeabi_fdiv+0xec>
     cd8:	eba2 0203 	sub.w	r2, r2, r3
     cdc:	ea80 0c01 	eor.w	ip, r0, r1
     ce0:	0249      	lsls	r1, r1, #9
     ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     ce6:	d037      	beq.n	d58 <__aeabi_fdiv+0x98>
     ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     cf8:	428b      	cmp	r3, r1
     cfa:	bf38      	it	cc
     cfc:	005b      	lslcc	r3, r3, #1
     cfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d06:	428b      	cmp	r3, r1
     d08:	bf24      	itt	cs
     d0a:	1a5b      	subcs	r3, r3, r1
     d0c:	ea40 000c 	orrcs.w	r0, r0, ip
     d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     d14:	bf24      	itt	cs
     d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     d22:	bf24      	itt	cs
     d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     d30:	bf24      	itt	cs
     d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     d3a:	011b      	lsls	r3, r3, #4
     d3c:	bf18      	it	ne
     d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     d42:	d1e0      	bne.n	d06 <__aeabi_fdiv+0x46>
     d44:	2afd      	cmp	r2, #253	; 0xfd
     d46:	f63f af50 	bhi.w	bea <__aeabi_fmul+0x92>
     d4a:	428b      	cmp	r3, r1
     d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d50:	bf08      	it	eq
     d52:	f020 0001 	biceq.w	r0, r0, #1
     d56:	4770      	bx	lr
     d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d60:	327f      	adds	r2, #127	; 0x7f
     d62:	bfc2      	ittt	gt
     d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d6c:	4770      	bxgt	lr
     d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d72:	f04f 0300 	mov.w	r3, #0
     d76:	3a01      	subs	r2, #1
     d78:	e737      	b.n	bea <__aeabi_fmul+0x92>
     d7a:	f092 0f00 	teq	r2, #0
     d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d82:	bf02      	ittt	eq
     d84:	0040      	lsleq	r0, r0, #1
     d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d8a:	3a01      	subeq	r2, #1
     d8c:	d0f9      	beq.n	d82 <__aeabi_fdiv+0xc2>
     d8e:	ea40 000c 	orr.w	r0, r0, ip
     d92:	f093 0f00 	teq	r3, #0
     d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d9a:	bf02      	ittt	eq
     d9c:	0049      	lsleq	r1, r1, #1
     d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     da2:	3b01      	subeq	r3, #1
     da4:	d0f9      	beq.n	d9a <__aeabi_fdiv+0xda>
     da6:	ea41 010c 	orr.w	r1, r1, ip
     daa:	e795      	b.n	cd8 <__aeabi_fdiv+0x18>
     dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     db0:	ea92 0f0c 	teq	r2, ip
     db4:	d108      	bne.n	dc8 <__aeabi_fdiv+0x108>
     db6:	0242      	lsls	r2, r0, #9
     db8:	f47f af7d 	bne.w	cb6 <__aeabi_fmul+0x15e>
     dbc:	ea93 0f0c 	teq	r3, ip
     dc0:	f47f af70 	bne.w	ca4 <__aeabi_fmul+0x14c>
     dc4:	4608      	mov	r0, r1
     dc6:	e776      	b.n	cb6 <__aeabi_fmul+0x15e>
     dc8:	ea93 0f0c 	teq	r3, ip
     dcc:	d104      	bne.n	dd8 <__aeabi_fdiv+0x118>
     dce:	024b      	lsls	r3, r1, #9
     dd0:	f43f af4c 	beq.w	c6c <__aeabi_fmul+0x114>
     dd4:	4608      	mov	r0, r1
     dd6:	e76e      	b.n	cb6 <__aeabi_fmul+0x15e>
     dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     ddc:	bf18      	it	ne
     dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     de2:	d1ca      	bne.n	d7a <__aeabi_fdiv+0xba>
     de4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     de8:	f47f af5c 	bne.w	ca4 <__aeabi_fmul+0x14c>
     dec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     df0:	f47f af3c 	bne.w	c6c <__aeabi_fmul+0x114>
     df4:	e75f      	b.n	cb6 <__aeabi_fmul+0x15e>
     df6:	bf00      	nop

00000df8 <__aeabi_f2uiz>:
     df8:	0042      	lsls	r2, r0, #1
     dfa:	d20e      	bcs.n	e1a <__aeabi_f2uiz+0x22>
     dfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     e00:	d30b      	bcc.n	e1a <__aeabi_f2uiz+0x22>
     e02:	f04f 039e 	mov.w	r3, #158	; 0x9e
     e06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     e0a:	d409      	bmi.n	e20 <__aeabi_f2uiz+0x28>
     e0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
     e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     e14:	fa23 f002 	lsr.w	r0, r3, r2
     e18:	4770      	bx	lr
     e1a:	f04f 0000 	mov.w	r0, #0
     e1e:	4770      	bx	lr
     e20:	f112 0f61 	cmn.w	r2, #97	; 0x61
     e24:	d101      	bne.n	e2a <__aeabi_f2uiz+0x32>
     e26:	0242      	lsls	r2, r0, #9
     e28:	d102      	bne.n	e30 <__aeabi_f2uiz+0x38>
     e2a:	f04f 30ff 	mov.w	r0, #4294967295
     e2e:	4770      	bx	lr
     e30:	f04f 0000 	mov.w	r0, #0
     e34:	4770      	bx	lr
     e36:	bf00      	nop

00000e38 <__aeabi_uldivmod>:
     e38:	b953      	cbnz	r3, e50 <__aeabi_uldivmod+0x18>
     e3a:	b94a      	cbnz	r2, e50 <__aeabi_uldivmod+0x18>
     e3c:	2900      	cmp	r1, #0
     e3e:	bf08      	it	eq
     e40:	2800      	cmpeq	r0, #0
     e42:	bf1c      	itt	ne
     e44:	f04f 31ff 	movne.w	r1, #4294967295
     e48:	f04f 30ff 	movne.w	r0, #4294967295
     e4c:	f000 b96c 	b.w	1128 <__aeabi_idiv0>
     e50:	f1ad 0c08 	sub.w	ip, sp, #8
     e54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     e58:	f000 f806 	bl	e68 <__udivmoddi4>
     e5c:	f8dd e004 	ldr.w	lr, [sp, #4]
     e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     e64:	b004      	add	sp, #16
     e66:	4770      	bx	lr

00000e68 <__udivmoddi4>:
     e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e6c:	9e08      	ldr	r6, [sp, #32]
     e6e:	460d      	mov	r5, r1
     e70:	4604      	mov	r4, r0
     e72:	468e      	mov	lr, r1
     e74:	2b00      	cmp	r3, #0
     e76:	f040 8082 	bne.w	f7e <__udivmoddi4+0x116>
     e7a:	428a      	cmp	r2, r1
     e7c:	4617      	mov	r7, r2
     e7e:	d946      	bls.n	f0e <__udivmoddi4+0xa6>
     e80:	fab2 f282 	clz	r2, r2
     e84:	b14a      	cbz	r2, e9a <__udivmoddi4+0x32>
     e86:	f1c2 0120 	rsb	r1, r2, #32
     e8a:	fa05 f302 	lsl.w	r3, r5, r2
     e8e:	fa20 f101 	lsr.w	r1, r0, r1
     e92:	4097      	lsls	r7, r2
     e94:	ea41 0e03 	orr.w	lr, r1, r3
     e98:	4094      	lsls	r4, r2
     e9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     e9e:	0c23      	lsrs	r3, r4, #16
     ea0:	fbbe fcf8 	udiv	ip, lr, r8
     ea4:	b2b9      	uxth	r1, r7
     ea6:	fb08 ee1c 	mls	lr, r8, ip, lr
     eaa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     eae:	fb0c f001 	mul.w	r0, ip, r1
     eb2:	4298      	cmp	r0, r3
     eb4:	d90a      	bls.n	ecc <__udivmoddi4+0x64>
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	f10c 35ff 	add.w	r5, ip, #4294967295
     ebc:	f080 8116 	bcs.w	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
     ec0:	4298      	cmp	r0, r3
     ec2:	f240 8113 	bls.w	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
     ec6:	f1ac 0c02 	sub.w	ip, ip, #2
     eca:	443b      	add	r3, r7
     ecc:	1a1b      	subs	r3, r3, r0
     ece:	b2a4      	uxth	r4, r4
     ed0:	fbb3 f0f8 	udiv	r0, r3, r8
     ed4:	fb08 3310 	mls	r3, r8, r0, r3
     ed8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     edc:	fb00 f101 	mul.w	r1, r0, r1
     ee0:	42a1      	cmp	r1, r4
     ee2:	d909      	bls.n	ef8 <__udivmoddi4+0x90>
     ee4:	193c      	adds	r4, r7, r4
     ee6:	f100 33ff 	add.w	r3, r0, #4294967295
     eea:	f080 8101 	bcs.w	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
     eee:	42a1      	cmp	r1, r4
     ef0:	f240 80fe 	bls.w	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
     ef4:	3802      	subs	r0, #2
     ef6:	443c      	add	r4, r7
     ef8:	1a64      	subs	r4, r4, r1
     efa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     efe:	2100      	movs	r1, #0
     f00:	b11e      	cbz	r6, f0a <__udivmoddi4+0xa2>
     f02:	40d4      	lsrs	r4, r2
     f04:	2300      	movs	r3, #0
     f06:	e9c6 4300 	strd	r4, r3, [r6]
     f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f0e:	b902      	cbnz	r2, f12 <__udivmoddi4+0xaa>
     f10:	deff      	udf	#255	; 0xff
     f12:	fab2 f282 	clz	r2, r2
     f16:	2a00      	cmp	r2, #0
     f18:	d14f      	bne.n	fba <__udivmoddi4+0x152>
     f1a:	1bcb      	subs	r3, r1, r7
     f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     f20:	fa1f f887 	uxth.w	r8, r7
     f24:	2101      	movs	r1, #1
     f26:	fbb3 fcfe 	udiv	ip, r3, lr
     f2a:	0c25      	lsrs	r5, r4, #16
     f2c:	fb0e 331c 	mls	r3, lr, ip, r3
     f30:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     f34:	fb08 f30c 	mul.w	r3, r8, ip
     f38:	42ab      	cmp	r3, r5
     f3a:	d907      	bls.n	f4c <__udivmoddi4+0xe4>
     f3c:	197d      	adds	r5, r7, r5
     f3e:	f10c 30ff 	add.w	r0, ip, #4294967295
     f42:	d202      	bcs.n	f4a <__udivmoddi4+0xe2>
     f44:	42ab      	cmp	r3, r5
     f46:	f200 80e7 	bhi.w	1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
     f4a:	4684      	mov	ip, r0
     f4c:	1aed      	subs	r5, r5, r3
     f4e:	b2a3      	uxth	r3, r4
     f50:	fbb5 f0fe 	udiv	r0, r5, lr
     f54:	fb0e 5510 	mls	r5, lr, r0, r5
     f58:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     f5c:	fb08 f800 	mul.w	r8, r8, r0
     f60:	45a0      	cmp	r8, r4
     f62:	d907      	bls.n	f74 <__udivmoddi4+0x10c>
     f64:	193c      	adds	r4, r7, r4
     f66:	f100 33ff 	add.w	r3, r0, #4294967295
     f6a:	d202      	bcs.n	f72 <__udivmoddi4+0x10a>
     f6c:	45a0      	cmp	r8, r4
     f6e:	f200 80d7 	bhi.w	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
     f72:	4618      	mov	r0, r3
     f74:	eba4 0408 	sub.w	r4, r4, r8
     f78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     f7c:	e7c0      	b.n	f00 <__udivmoddi4+0x98>
     f7e:	428b      	cmp	r3, r1
     f80:	d908      	bls.n	f94 <__udivmoddi4+0x12c>
     f82:	2e00      	cmp	r6, #0
     f84:	f000 80af 	beq.w	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
     f88:	2100      	movs	r1, #0
     f8a:	e9c6 0500 	strd	r0, r5, [r6]
     f8e:	4608      	mov	r0, r1
     f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f94:	fab3 f183 	clz	r1, r3
     f98:	2900      	cmp	r1, #0
     f9a:	d14b      	bne.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
     f9c:	42ab      	cmp	r3, r5
     f9e:	d302      	bcc.n	fa6 <__udivmoddi4+0x13e>
     fa0:	4282      	cmp	r2, r0
     fa2:	f200 80b7 	bhi.w	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
     fa6:	1a84      	subs	r4, r0, r2
     fa8:	eb65 0303 	sbc.w	r3, r5, r3
     fac:	2001      	movs	r0, #1
     fae:	469e      	mov	lr, r3
     fb0:	2e00      	cmp	r6, #0
     fb2:	d0aa      	beq.n	f0a <__udivmoddi4+0xa2>
     fb4:	e9c6 4e00 	strd	r4, lr, [r6]
     fb8:	e7a7      	b.n	f0a <__udivmoddi4+0xa2>
     fba:	f1c2 0c20 	rsb	ip, r2, #32
     fbe:	fa01 f302 	lsl.w	r3, r1, r2
     fc2:	4097      	lsls	r7, r2
     fc4:	fa20 f00c 	lsr.w	r0, r0, ip
     fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     fcc:	fa21 fc0c 	lsr.w	ip, r1, ip
     fd0:	4318      	orrs	r0, r3
     fd2:	fbbc f1fe 	udiv	r1, ip, lr
     fd6:	0c05      	lsrs	r5, r0, #16
     fd8:	fb0e cc11 	mls	ip, lr, r1, ip
     fdc:	fa1f f887 	uxth.w	r8, r7
     fe0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     fe4:	fb01 f308 	mul.w	r3, r1, r8
     fe8:	42ab      	cmp	r3, r5
     fea:	fa04 f402 	lsl.w	r4, r4, r2
     fee:	d909      	bls.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     ff0:	197d      	adds	r5, r7, r5
     ff2:	f101 3cff 	add.w	ip, r1, #4294967295
     ff6:	f080 808b 	bcs.w	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
     ffa:	42ab      	cmp	r3, r5
     ffc:	f240 8088 	bls.w	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
    1000:	3902      	subs	r1, #2
    1002:	443d      	add	r5, r7
    1004:	1aeb      	subs	r3, r5, r3
    1006:	b285      	uxth	r5, r0
    1008:	fbb3 f0fe 	udiv	r0, r3, lr
    100c:	fb0e 3310 	mls	r3, lr, r0, r3
    1010:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1014:	fb00 f308 	mul.w	r3, r0, r8
    1018:	42ab      	cmp	r3, r5
    101a:	d907      	bls.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    101c:	197d      	adds	r5, r7, r5
    101e:	f100 3cff 	add.w	ip, r0, #4294967295
    1022:	d271      	bcs.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1024:	42ab      	cmp	r3, r5
    1026:	d96f      	bls.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1028:	3802      	subs	r0, #2
    102a:	443d      	add	r5, r7
    102c:	1aeb      	subs	r3, r5, r3
    102e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1032:	e778      	b.n	f26 <__udivmoddi4+0xbe>
    1034:	f1c1 0c20 	rsb	ip, r1, #32
    1038:	408b      	lsls	r3, r1
    103a:	fa22 f70c 	lsr.w	r7, r2, ip
    103e:	431f      	orrs	r7, r3
    1040:	fa20 f40c 	lsr.w	r4, r0, ip
    1044:	fa05 f301 	lsl.w	r3, r5, r1
    1048:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    104c:	fa25 f50c 	lsr.w	r5, r5, ip
    1050:	431c      	orrs	r4, r3
    1052:	0c23      	lsrs	r3, r4, #16
    1054:	fbb5 f9fe 	udiv	r9, r5, lr
    1058:	fa1f f887 	uxth.w	r8, r7
    105c:	fb0e 5519 	mls	r5, lr, r9, r5
    1060:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    1064:	fb09 fa08 	mul.w	sl, r9, r8
    1068:	45aa      	cmp	sl, r5
    106a:	fa02 f201 	lsl.w	r2, r2, r1
    106e:	fa00 f301 	lsl.w	r3, r0, r1
    1072:	d908      	bls.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    1074:	197d      	adds	r5, r7, r5
    1076:	f109 30ff 	add.w	r0, r9, #4294967295
    107a:	d247      	bcs.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    107c:	45aa      	cmp	sl, r5
    107e:	d945      	bls.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    1080:	f1a9 0902 	sub.w	r9, r9, #2
    1084:	443d      	add	r5, r7
    1086:	eba5 050a 	sub.w	r5, r5, sl
    108a:	b2a4      	uxth	r4, r4
    108c:	fbb5 f0fe 	udiv	r0, r5, lr
    1090:	fb0e 5510 	mls	r5, lr, r0, r5
    1094:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1098:	fb00 f808 	mul.w	r8, r0, r8
    109c:	45a0      	cmp	r8, r4
    109e:	d907      	bls.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    10a0:	193c      	adds	r4, r7, r4
    10a2:	f100 35ff 	add.w	r5, r0, #4294967295
    10a6:	d22d      	bcs.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10a8:	45a0      	cmp	r8, r4
    10aa:	d92b      	bls.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10ac:	3802      	subs	r0, #2
    10ae:	443c      	add	r4, r7
    10b0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    10b4:	eba4 0408 	sub.w	r4, r4, r8
    10b8:	fba0 8902 	umull	r8, r9, r0, r2
    10bc:	454c      	cmp	r4, r9
    10be:	46c6      	mov	lr, r8
    10c0:	464d      	mov	r5, r9
    10c2:	d319      	bcc.n	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    10c4:	d016      	beq.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    10c6:	b15e      	cbz	r6, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
    10c8:	ebb3 020e 	subs.w	r2, r3, lr
    10cc:	eb64 0405 	sbc.w	r4, r4, r5
    10d0:	fa04 fc0c 	lsl.w	ip, r4, ip
    10d4:	40ca      	lsrs	r2, r1
    10d6:	ea4c 0202 	orr.w	r2, ip, r2
    10da:	40cc      	lsrs	r4, r1
    10dc:	e9c6 2400 	strd	r2, r4, [r6]
    10e0:	2100      	movs	r1, #0
    10e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10e6:	4631      	mov	r1, r6
    10e8:	4630      	mov	r0, r6
    10ea:	e70e      	b.n	f0a <__udivmoddi4+0xa2>
    10ec:	46ac      	mov	ip, r5
    10ee:	e6ed      	b.n	ecc <__udivmoddi4+0x64>
    10f0:	4618      	mov	r0, r3
    10f2:	e701      	b.n	ef8 <__udivmoddi4+0x90>
    10f4:	4543      	cmp	r3, r8
    10f6:	d2e6      	bcs.n	10c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
    10f8:	ebb8 0e02 	subs.w	lr, r8, r2
    10fc:	eb69 0507 	sbc.w	r5, r9, r7
    1100:	3801      	subs	r0, #1
    1102:	e7e0      	b.n	10c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
    1104:	4628      	mov	r0, r5
    1106:	e7d3      	b.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    1108:	4660      	mov	r0, ip
    110a:	e78f      	b.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    110c:	4681      	mov	r9, r0
    110e:	e7ba      	b.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    1110:	4661      	mov	r1, ip
    1112:	e777      	b.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    1114:	4608      	mov	r0, r1
    1116:	e74b      	b.n	fb0 <__udivmoddi4+0x148>
    1118:	f1ac 0c02 	sub.w	ip, ip, #2
    111c:	443d      	add	r5, r7
    111e:	e715      	b.n	f4c <__udivmoddi4+0xe4>
    1120:	3802      	subs	r0, #2
    1122:	443c      	add	r4, r7
    1124:	e726      	b.n	f74 <__udivmoddi4+0x10c>
    1126:	bf00      	nop

00001128 <__aeabi_idiv0>:
    1128:	4770      	bx	lr
    112a:	bf00      	nop

0000112c <__gedf2>:
    112c:	f04f 3cff 	mov.w	ip, #4294967295
    1130:	e006      	b.n	1140 <__cmpdf2+0x4>
    1132:	bf00      	nop

00001134 <__ledf2>:
    1134:	f04f 0c01 	mov.w	ip, #1
    1138:	e002      	b.n	1140 <__cmpdf2+0x4>
    113a:	bf00      	nop

0000113c <__cmpdf2>:
    113c:	f04f 0c01 	mov.w	ip, #1
    1140:	f84d cd04 	str.w	ip, [sp, #-4]!
    1144:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1148:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    114c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1150:	bf18      	it	ne
    1152:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    1156:	d01b      	beq.n	1190 <__cmpdf2+0x54>
    1158:	b001      	add	sp, #4
    115a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    115e:	bf0c      	ite	eq
    1160:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    1164:	ea91 0f03 	teqne	r1, r3
    1168:	bf02      	ittt	eq
    116a:	ea90 0f02 	teqeq	r0, r2
    116e:	2000      	moveq	r0, #0
    1170:	4770      	bxeq	lr
    1172:	f110 0f00 	cmn.w	r0, #0
    1176:	ea91 0f03 	teq	r1, r3
    117a:	bf58      	it	pl
    117c:	4299      	cmppl	r1, r3
    117e:	bf08      	it	eq
    1180:	4290      	cmpeq	r0, r2
    1182:	bf2c      	ite	cs
    1184:	17d8      	asrcs	r0, r3, #31
    1186:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    118a:	f040 0001 	orr.w	r0, r0, #1
    118e:	4770      	bx	lr
    1190:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1194:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1198:	d102      	bne.n	11a0 <__cmpdf2+0x64>
    119a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    119e:	d107      	bne.n	11b0 <__cmpdf2+0x74>
    11a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    11a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    11a8:	d1d6      	bne.n	1158 <__cmpdf2+0x1c>
    11aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    11ae:	d0d3      	beq.n	1158 <__cmpdf2+0x1c>
    11b0:	f85d 0b04 	ldr.w	r0, [sp], #4
    11b4:	4770      	bx	lr
    11b6:	bf00      	nop

000011b8 <__aeabi_cdrcmple>:
    11b8:	4684      	mov	ip, r0
    11ba:	4610      	mov	r0, r2
    11bc:	4662      	mov	r2, ip
    11be:	468c      	mov	ip, r1
    11c0:	4619      	mov	r1, r3
    11c2:	4663      	mov	r3, ip
    11c4:	e000      	b.n	11c8 <__aeabi_cdcmpeq>
    11c6:	bf00      	nop

000011c8 <__aeabi_cdcmpeq>:
    11c8:	b501      	push	{r0, lr}
    11ca:	f7ff ffb7 	bl	113c <__cmpdf2>
    11ce:	2800      	cmp	r0, #0
    11d0:	bf48      	it	mi
    11d2:	f110 0f00 	cmnmi.w	r0, #0
    11d6:	bd01      	pop	{r0, pc}

000011d8 <__aeabi_dcmpeq>:
    11d8:	f84d ed08 	str.w	lr, [sp, #-8]!
    11dc:	f7ff fff4 	bl	11c8 <__aeabi_cdcmpeq>
    11e0:	bf0c      	ite	eq
    11e2:	2001      	moveq	r0, #1
    11e4:	2000      	movne	r0, #0
    11e6:	f85d fb08 	ldr.w	pc, [sp], #8
    11ea:	bf00      	nop

000011ec <__aeabi_dcmplt>:
    11ec:	f84d ed08 	str.w	lr, [sp, #-8]!
    11f0:	f7ff ffea 	bl	11c8 <__aeabi_cdcmpeq>
    11f4:	bf34      	ite	cc
    11f6:	2001      	movcc	r0, #1
    11f8:	2000      	movcs	r0, #0
    11fa:	f85d fb08 	ldr.w	pc, [sp], #8
    11fe:	bf00      	nop

00001200 <__aeabi_dcmple>:
    1200:	f84d ed08 	str.w	lr, [sp, #-8]!
    1204:	f7ff ffe0 	bl	11c8 <__aeabi_cdcmpeq>
    1208:	bf94      	ite	ls
    120a:	2001      	movls	r0, #1
    120c:	2000      	movhi	r0, #0
    120e:	f85d fb08 	ldr.w	pc, [sp], #8
    1212:	bf00      	nop

00001214 <__aeabi_dcmpge>:
    1214:	f84d ed08 	str.w	lr, [sp, #-8]!
    1218:	f7ff ffce 	bl	11b8 <__aeabi_cdrcmple>
    121c:	bf94      	ite	ls
    121e:	2001      	movls	r0, #1
    1220:	2000      	movhi	r0, #0
    1222:	f85d fb08 	ldr.w	pc, [sp], #8
    1226:	bf00      	nop

00001228 <__aeabi_dcmpgt>:
    1228:	f84d ed08 	str.w	lr, [sp, #-8]!
    122c:	f7ff ffc4 	bl	11b8 <__aeabi_cdrcmple>
    1230:	bf34      	ite	cc
    1232:	2001      	movcc	r0, #1
    1234:	2000      	movcs	r0, #0
    1236:	f85d fb08 	ldr.w	pc, [sp], #8
    123a:	bf00      	nop

0000123c <__aeabi_d2iz>:
    123c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    1240:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1244:	d215      	bcs.n	1272 <__aeabi_d2iz+0x36>
    1246:	d511      	bpl.n	126c <__aeabi_d2iz+0x30>
    1248:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    124c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1250:	d912      	bls.n	1278 <__aeabi_d2iz+0x3c>
    1252:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    125a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    125e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1262:	fa23 f002 	lsr.w	r0, r3, r2
    1266:	bf18      	it	ne
    1268:	4240      	negne	r0, r0
    126a:	4770      	bx	lr
    126c:	f04f 0000 	mov.w	r0, #0
    1270:	4770      	bx	lr
    1272:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1276:	d105      	bne.n	1284 <__aeabi_d2iz+0x48>
    1278:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    127c:	bf08      	it	eq
    127e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1282:	4770      	bx	lr
    1284:	f04f 0000 	mov.w	r0, #0
    1288:	4770      	bx	lr
    128a:	bf00      	nop

0000128c <strlen>:
    128c:	4603      	mov	r3, r0
    128e:	f813 2b01 	ldrb.w	r2, [r3], #1
    1292:	2a00      	cmp	r2, #0
    1294:	d1fb      	bne.n	128e <strlen+0x2>
    1296:	1a18      	subs	r0, r3, r0
    1298:	3801      	subs	r0, #1
    129a:	4770      	bx	lr
    129c:	0000      	movs	r0, r0
	...

000012a0 <__ieee754_rem_pio2>:
    12a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12a4:	4f8c      	ldr	r7, [pc, #560]	; (14d8 <__ieee754_rem_pio2+0x238>)
    12a6:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
    12aa:	42bd      	cmp	r5, r7
    12ac:	b08d      	sub	sp, #52	; 0x34
    12ae:	4614      	mov	r4, r2
    12b0:	4606      	mov	r6, r0
    12b2:	f340 8086 	ble.w	13c2 <__ieee754_rem_pio2+0x122>
    12b6:	4a89      	ldr	r2, [pc, #548]	; (14dc <__ieee754_rem_pio2+0x23c>)
    12b8:	4295      	cmp	r5, r2
    12ba:	468b      	mov	fp, r1
    12bc:	dc27      	bgt.n	130e <__ieee754_rem_pio2+0x6e>
    12be:	2900      	cmp	r1, #0
    12c0:	a37b      	add	r3, pc, #492	; (adr r3, 14b0 <__ieee754_rem_pio2+0x210>)
    12c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    12c6:	f340 81b8 	ble.w	163a <__ieee754_rem_pio2+0x39a>
    12ca:	f7fe ff1d 	bl	108 <__aeabi_dsub>
    12ce:	4b84      	ldr	r3, [pc, #528]	; (14e0 <__ieee754_rem_pio2+0x240>)
    12d0:	429d      	cmp	r5, r3
    12d2:	4606      	mov	r6, r0
    12d4:	460f      	mov	r7, r1
    12d6:	f000 808b 	beq.w	13f0 <__ieee754_rem_pio2+0x150>
    12da:	a377      	add	r3, pc, #476	; (adr r3, 14b8 <__ieee754_rem_pio2+0x218>)
    12dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    12e0:	f7fe ff12 	bl	108 <__aeabi_dsub>
    12e4:	4602      	mov	r2, r0
    12e6:	460b      	mov	r3, r1
    12e8:	e9c4 2300 	strd	r2, r3, [r4]
    12ec:	4630      	mov	r0, r6
    12ee:	4639      	mov	r1, r7
    12f0:	f7fe ff0a 	bl	108 <__aeabi_dsub>
    12f4:	a370      	add	r3, pc, #448	; (adr r3, 14b8 <__ieee754_rem_pio2+0x218>)
    12f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    12fa:	f7fe ff05 	bl	108 <__aeabi_dsub>
    12fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
    1302:	f04f 0a01 	mov.w	sl, #1
    1306:	4650      	mov	r0, sl
    1308:	b00d      	add	sp, #52	; 0x34
    130a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    130e:	4a75      	ldr	r2, [pc, #468]	; (14e4 <__ieee754_rem_pio2+0x244>)
    1310:	4295      	cmp	r5, r2
    1312:	f340 808e 	ble.w	1432 <__ieee754_rem_pio2+0x192>
    1316:	4a74      	ldr	r2, [pc, #464]	; (14e8 <__ieee754_rem_pio2+0x248>)
    1318:	4295      	cmp	r5, r2
    131a:	dc5e      	bgt.n	13da <__ieee754_rem_pio2+0x13a>
    131c:	ea4f 5a25 	mov.w	sl, r5, asr #20
    1320:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
    1324:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
    1328:	460f      	mov	r7, r1
    132a:	f7ff ff87 	bl	123c <__aeabi_d2iz>
    132e:	f7ff f839 	bl	3a4 <__aeabi_i2d>
    1332:	4680      	mov	r8, r0
    1334:	4689      	mov	r9, r1
    1336:	4630      	mov	r0, r6
    1338:	4639      	mov	r1, r7
    133a:	4642      	mov	r2, r8
    133c:	464b      	mov	r3, r9
    133e:	e9cd 8906 	strd	r8, r9, [sp, #24]
    1342:	f7fe fee1 	bl	108 <__aeabi_dsub>
    1346:	4b69      	ldr	r3, [pc, #420]	; (14ec <__ieee754_rem_pio2+0x24c>)
    1348:	2200      	movs	r2, #0
    134a:	f7ff f895 	bl	478 <__aeabi_dmul>
    134e:	460f      	mov	r7, r1
    1350:	4606      	mov	r6, r0
    1352:	f7ff ff73 	bl	123c <__aeabi_d2iz>
    1356:	4605      	mov	r5, r0
    1358:	f7ff f824 	bl	3a4 <__aeabi_i2d>
    135c:	4602      	mov	r2, r0
    135e:	460b      	mov	r3, r1
    1360:	4630      	mov	r0, r6
    1362:	4639      	mov	r1, r7
    1364:	e9cd 2308 	strd	r2, r3, [sp, #32]
    1368:	f7fe fece 	bl	108 <__aeabi_dsub>
    136c:	4b5f      	ldr	r3, [pc, #380]	; (14ec <__ieee754_rem_pio2+0x24c>)
    136e:	2200      	movs	r2, #0
    1370:	f7ff f882 	bl	478 <__aeabi_dmul>
    1374:	4602      	mov	r2, r0
    1376:	460b      	mov	r3, r1
    1378:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    137c:	2200      	movs	r2, #0
    137e:	2300      	movs	r3, #0
    1380:	f7ff ff2a 	bl	11d8 <__aeabi_dcmpeq>
    1384:	2800      	cmp	r0, #0
    1386:	f000 8156 	beq.w	1636 <__ieee754_rem_pio2+0x396>
    138a:	2d00      	cmp	r5, #0
    138c:	bf0c      	ite	eq
    138e:	2301      	moveq	r3, #1
    1390:	2302      	movne	r3, #2
    1392:	4a57      	ldr	r2, [pc, #348]	; (14f0 <__ieee754_rem_pio2+0x250>)
    1394:	9201      	str	r2, [sp, #4]
    1396:	2102      	movs	r1, #2
    1398:	4652      	mov	r2, sl
    139a:	9100      	str	r1, [sp, #0]
    139c:	a806      	add	r0, sp, #24
    139e:	4621      	mov	r1, r4
    13a0:	f000 face 	bl	1940 <__kernel_rem_pio2>
    13a4:	f1bb 0f00 	cmp.w	fp, #0
    13a8:	4682      	mov	sl, r0
    13aa:	daac      	bge.n	1306 <__ieee754_rem_pio2+0x66>
    13ac:	6862      	ldr	r2, [r4, #4]
    13ae:	68e3      	ldr	r3, [r4, #12]
    13b0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    13b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    13b8:	f1c0 0a00 	rsb	sl, r0, #0
    13bc:	6062      	str	r2, [r4, #4]
    13be:	60e3      	str	r3, [r4, #12]
    13c0:	e7a1      	b.n	1306 <__ieee754_rem_pio2+0x66>
    13c2:	f04f 0a00 	mov.w	sl, #0
    13c6:	e9c4 0100 	strd	r0, r1, [r4]
    13ca:	2200      	movs	r2, #0
    13cc:	2300      	movs	r3, #0
    13ce:	4650      	mov	r0, sl
    13d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
    13d4:	b00d      	add	sp, #52	; 0x34
    13d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13da:	4602      	mov	r2, r0
    13dc:	465b      	mov	r3, fp
    13de:	f7fe fe93 	bl	108 <__aeabi_dsub>
    13e2:	f04f 0a00 	mov.w	sl, #0
    13e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
    13ea:	e9c4 0100 	strd	r0, r1, [r4]
    13ee:	e78a      	b.n	1306 <__ieee754_rem_pio2+0x66>
    13f0:	a333      	add	r3, pc, #204	; (adr r3, 14c0 <__ieee754_rem_pio2+0x220>)
    13f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    13f6:	f7fe fe87 	bl	108 <__aeabi_dsub>
    13fa:	a333      	add	r3, pc, #204	; (adr r3, 14c8 <__ieee754_rem_pio2+0x228>)
    13fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1400:	4606      	mov	r6, r0
    1402:	460f      	mov	r7, r1
    1404:	f7fe fe80 	bl	108 <__aeabi_dsub>
    1408:	4602      	mov	r2, r0
    140a:	460b      	mov	r3, r1
    140c:	e9c4 2300 	strd	r2, r3, [r4]
    1410:	4630      	mov	r0, r6
    1412:	4639      	mov	r1, r7
    1414:	f7fe fe78 	bl	108 <__aeabi_dsub>
    1418:	a32b      	add	r3, pc, #172	; (adr r3, 14c8 <__ieee754_rem_pio2+0x228>)
    141a:	e9d3 2300 	ldrd	r2, r3, [r3]
    141e:	f7fe fe73 	bl	108 <__aeabi_dsub>
    1422:	f04f 0a01 	mov.w	sl, #1
    1426:	e9c4 0102 	strd	r0, r1, [r4, #8]
    142a:	4650      	mov	r0, sl
    142c:	b00d      	add	sp, #52	; 0x34
    142e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1432:	f006 f995 	bl	7760 <fabs>
    1436:	a326      	add	r3, pc, #152	; (adr r3, 14d0 <__ieee754_rem_pio2+0x230>)
    1438:	e9d3 2300 	ldrd	r2, r3, [r3]
    143c:	4606      	mov	r6, r0
    143e:	460f      	mov	r7, r1
    1440:	f7ff f81a 	bl	478 <__aeabi_dmul>
    1444:	4b2b      	ldr	r3, [pc, #172]	; (14f4 <__ieee754_rem_pio2+0x254>)
    1446:	2200      	movs	r2, #0
    1448:	f7fe fe60 	bl	10c <__adddf3>
    144c:	f7ff fef6 	bl	123c <__aeabi_d2iz>
    1450:	4682      	mov	sl, r0
    1452:	f7fe ffa7 	bl	3a4 <__aeabi_i2d>
    1456:	a316      	add	r3, pc, #88	; (adr r3, 14b0 <__ieee754_rem_pio2+0x210>)
    1458:	e9d3 2300 	ldrd	r2, r3, [r3]
    145c:	4680      	mov	r8, r0
    145e:	4689      	mov	r9, r1
    1460:	e9cd 8904 	strd	r8, r9, [sp, #16]
    1464:	f7ff f808 	bl	478 <__aeabi_dmul>
    1468:	4602      	mov	r2, r0
    146a:	460b      	mov	r3, r1
    146c:	4630      	mov	r0, r6
    146e:	4639      	mov	r1, r7
    1470:	f7fe fe4a 	bl	108 <__aeabi_dsub>
    1474:	4606      	mov	r6, r0
    1476:	460f      	mov	r7, r1
    1478:	4640      	mov	r0, r8
    147a:	4649      	mov	r1, r9
    147c:	46b0      	mov	r8, r6
    147e:	46b9      	mov	r9, r7
    1480:	a30d      	add	r3, pc, #52	; (adr r3, 14b8 <__ieee754_rem_pio2+0x218>)
    1482:	e9d3 2300 	ldrd	r2, r3, [r3]
    1486:	e9cd 8902 	strd	r8, r9, [sp, #8]
    148a:	f7fe fff5 	bl	478 <__aeabi_dmul>
    148e:	f1ba 0f1f 	cmp.w	sl, #31
    1492:	4606      	mov	r6, r0
    1494:	460f      	mov	r7, r1
    1496:	dc31      	bgt.n	14fc <__ieee754_rem_pio2+0x25c>
    1498:	4b17      	ldr	r3, [pc, #92]	; (14f8 <__ieee754_rem_pio2+0x258>)
    149a:	f10a 32ff 	add.w	r2, sl, #4294967295
    149e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    14a2:	42ab      	cmp	r3, r5
    14a4:	d02a      	beq.n	14fc <__ieee754_rem_pio2+0x25c>
    14a6:	4602      	mov	r2, r0
    14a8:	460b      	mov	r3, r1
    14aa:	4640      	mov	r0, r8
    14ac:	4649      	mov	r1, r9
    14ae:	e09e      	b.n	15ee <__ieee754_rem_pio2+0x34e>
    14b0:	54400000 	.word	0x54400000
    14b4:	3ff921fb 	.word	0x3ff921fb
    14b8:	1a626331 	.word	0x1a626331
    14bc:	3dd0b461 	.word	0x3dd0b461
    14c0:	1a600000 	.word	0x1a600000
    14c4:	3dd0b461 	.word	0x3dd0b461
    14c8:	2e037073 	.word	0x2e037073
    14cc:	3ba3198a 	.word	0x3ba3198a
    14d0:	6dc9c883 	.word	0x6dc9c883
    14d4:	3fe45f30 	.word	0x3fe45f30
    14d8:	3fe921fb 	.word	0x3fe921fb
    14dc:	4002d97b 	.word	0x4002d97b
    14e0:	3ff921fb 	.word	0x3ff921fb
    14e4:	413921fb 	.word	0x413921fb
    14e8:	7fefffff 	.word	0x7fefffff
    14ec:	41700000 	.word	0x41700000
    14f0:	00009130 	.word	0x00009130
    14f4:	3fe00000 	.word	0x3fe00000
    14f8:	000090b0 	.word	0x000090b0
    14fc:	463b      	mov	r3, r7
    14fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1502:	4632      	mov	r2, r6
    1504:	f7fe fe00 	bl	108 <__aeabi_dsub>
    1508:	f3c1 530a 	ubfx	r3, r1, #20, #11
    150c:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
    1510:	2b10      	cmp	r3, #16
    1512:	4689      	mov	r9, r1
    1514:	4680      	mov	r8, r0
    1516:	ea4f 5525 	mov.w	r5, r5, asr #20
    151a:	dd6c      	ble.n	15f6 <__ieee754_rem_pio2+0x356>
    151c:	a366      	add	r3, pc, #408	; (adr r3, 16b8 <__ieee754_rem_pio2+0x418>)
    151e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1526:	f7fe ffa7 	bl	478 <__aeabi_dmul>
    152a:	4606      	mov	r6, r0
    152c:	460f      	mov	r7, r1
    152e:	4602      	mov	r2, r0
    1530:	460b      	mov	r3, r1
    1532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1536:	f7fe fde7 	bl	108 <__aeabi_dsub>
    153a:	4680      	mov	r8, r0
    153c:	4689      	mov	r9, r1
    153e:	4642      	mov	r2, r8
    1540:	464b      	mov	r3, r9
    1542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1546:	f7fe fddf 	bl	108 <__aeabi_dsub>
    154a:	4632      	mov	r2, r6
    154c:	463b      	mov	r3, r7
    154e:	f7fe fddb 	bl	108 <__aeabi_dsub>
    1552:	a35b      	add	r3, pc, #364	; (adr r3, 16c0 <__ieee754_rem_pio2+0x420>)
    1554:	e9d3 2300 	ldrd	r2, r3, [r3]
    1558:	4606      	mov	r6, r0
    155a:	460f      	mov	r7, r1
    155c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1560:	f7fe ff8a 	bl	478 <__aeabi_dmul>
    1564:	4632      	mov	r2, r6
    1566:	463b      	mov	r3, r7
    1568:	f7fe fdce 	bl	108 <__aeabi_dsub>
    156c:	460b      	mov	r3, r1
    156e:	4602      	mov	r2, r0
    1570:	4606      	mov	r6, r0
    1572:	460f      	mov	r7, r1
    1574:	4640      	mov	r0, r8
    1576:	4649      	mov	r1, r9
    1578:	e9cd 8902 	strd	r8, r9, [sp, #8]
    157c:	f7fe fdc4 	bl	108 <__aeabi_dsub>
    1580:	f3c1 530a 	ubfx	r3, r1, #20, #11
    1584:	1aed      	subs	r5, r5, r3
    1586:	2d31      	cmp	r5, #49	; 0x31
    1588:	4689      	mov	r9, r1
    158a:	4680      	mov	r8, r0
    158c:	dd33      	ble.n	15f6 <__ieee754_rem_pio2+0x356>
    158e:	a34e      	add	r3, pc, #312	; (adr r3, 16c8 <__ieee754_rem_pio2+0x428>)
    1590:	e9d3 2300 	ldrd	r2, r3, [r3]
    1594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1598:	f7fe ff6e 	bl	478 <__aeabi_dmul>
    159c:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
    15a0:	4602      	mov	r2, r0
    15a2:	460b      	mov	r3, r1
    15a4:	4680      	mov	r8, r0
    15a6:	4689      	mov	r9, r1
    15a8:	4628      	mov	r0, r5
    15aa:	4631      	mov	r1, r6
    15ac:	f7fe fdac 	bl	108 <__aeabi_dsub>
    15b0:	4602      	mov	r2, r0
    15b2:	460b      	mov	r3, r1
    15b4:	4628      	mov	r0, r5
    15b6:	4631      	mov	r1, r6
    15b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    15bc:	f7fe fda4 	bl	108 <__aeabi_dsub>
    15c0:	4642      	mov	r2, r8
    15c2:	464b      	mov	r3, r9
    15c4:	f7fe fda0 	bl	108 <__aeabi_dsub>
    15c8:	a341      	add	r3, pc, #260	; (adr r3, 16d0 <__ieee754_rem_pio2+0x430>)
    15ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    15ce:	4606      	mov	r6, r0
    15d0:	460f      	mov	r7, r1
    15d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    15d6:	f7fe ff4f 	bl	478 <__aeabi_dmul>
    15da:	4632      	mov	r2, r6
    15dc:	463b      	mov	r3, r7
    15de:	f7fe fd93 	bl	108 <__aeabi_dsub>
    15e2:	4606      	mov	r6, r0
    15e4:	460f      	mov	r7, r1
    15e6:	4602      	mov	r2, r0
    15e8:	460b      	mov	r3, r1
    15ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    15ee:	f7fe fd8b 	bl	108 <__aeabi_dsub>
    15f2:	4680      	mov	r8, r0
    15f4:	4689      	mov	r9, r1
    15f6:	4642      	mov	r2, r8
    15f8:	464b      	mov	r3, r9
    15fa:	e9c4 2300 	strd	r2, r3, [r4]
    15fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1602:	f7fe fd81 	bl	108 <__aeabi_dsub>
    1606:	4632      	mov	r2, r6
    1608:	463b      	mov	r3, r7
    160a:	f7fe fd7d 	bl	108 <__aeabi_dsub>
    160e:	f1bb 0f00 	cmp.w	fp, #0
    1612:	4602      	mov	r2, r0
    1614:	460b      	mov	r3, r1
    1616:	e9c4 2302 	strd	r2, r3, [r4, #8]
    161a:	4605      	mov	r5, r0
    161c:	f6bf ae73 	bge.w	1306 <__ieee754_rem_pio2+0x66>
    1620:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    1624:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    1628:	e9c4 8300 	strd	r8, r3, [r4]
    162c:	e9c4 5102 	strd	r5, r1, [r4, #8]
    1630:	f1ca 0a00 	rsb	sl, sl, #0
    1634:	e667      	b.n	1306 <__ieee754_rem_pio2+0x66>
    1636:	2303      	movs	r3, #3
    1638:	e6ab      	b.n	1392 <__ieee754_rem_pio2+0xf2>
    163a:	f7fe fd67 	bl	10c <__adddf3>
    163e:	4b28      	ldr	r3, [pc, #160]	; (16e0 <__ieee754_rem_pio2+0x440>)
    1640:	429d      	cmp	r5, r3
    1642:	4606      	mov	r6, r0
    1644:	460f      	mov	r7, r1
    1646:	d016      	beq.n	1676 <__ieee754_rem_pio2+0x3d6>
    1648:	a323      	add	r3, pc, #140	; (adr r3, 16d8 <__ieee754_rem_pio2+0x438>)
    164a:	e9d3 2300 	ldrd	r2, r3, [r3]
    164e:	f7fe fd5d 	bl	10c <__adddf3>
    1652:	4602      	mov	r2, r0
    1654:	460b      	mov	r3, r1
    1656:	e9c4 2300 	strd	r2, r3, [r4]
    165a:	4630      	mov	r0, r6
    165c:	4639      	mov	r1, r7
    165e:	f7fe fd53 	bl	108 <__aeabi_dsub>
    1662:	a31d      	add	r3, pc, #116	; (adr r3, 16d8 <__ieee754_rem_pio2+0x438>)
    1664:	e9d3 2300 	ldrd	r2, r3, [r3]
    1668:	f7fe fd50 	bl	10c <__adddf3>
    166c:	f04f 3aff 	mov.w	sl, #4294967295
    1670:	e9c4 0102 	strd	r0, r1, [r4, #8]
    1674:	e647      	b.n	1306 <__ieee754_rem_pio2+0x66>
    1676:	a310      	add	r3, pc, #64	; (adr r3, 16b8 <__ieee754_rem_pio2+0x418>)
    1678:	e9d3 2300 	ldrd	r2, r3, [r3]
    167c:	f7fe fd46 	bl	10c <__adddf3>
    1680:	a30f      	add	r3, pc, #60	; (adr r3, 16c0 <__ieee754_rem_pio2+0x420>)
    1682:	e9d3 2300 	ldrd	r2, r3, [r3]
    1686:	4606      	mov	r6, r0
    1688:	460f      	mov	r7, r1
    168a:	f7fe fd3f 	bl	10c <__adddf3>
    168e:	4602      	mov	r2, r0
    1690:	460b      	mov	r3, r1
    1692:	e9c4 2300 	strd	r2, r3, [r4]
    1696:	4630      	mov	r0, r6
    1698:	4639      	mov	r1, r7
    169a:	f7fe fd35 	bl	108 <__aeabi_dsub>
    169e:	a308      	add	r3, pc, #32	; (adr r3, 16c0 <__ieee754_rem_pio2+0x420>)
    16a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    16a4:	f7fe fd32 	bl	10c <__adddf3>
    16a8:	f04f 3aff 	mov.w	sl, #4294967295
    16ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
    16b0:	e629      	b.n	1306 <__ieee754_rem_pio2+0x66>
    16b2:	bf00      	nop
    16b4:	f3af 8000 	nop.w
    16b8:	1a600000 	.word	0x1a600000
    16bc:	3dd0b461 	.word	0x3dd0b461
    16c0:	2e037073 	.word	0x2e037073
    16c4:	3ba3198a 	.word	0x3ba3198a
    16c8:	2e000000 	.word	0x2e000000
    16cc:	3ba3198a 	.word	0x3ba3198a
    16d0:	252049c1 	.word	0x252049c1
    16d4:	397b839a 	.word	0x397b839a
    16d8:	1a626331 	.word	0x1a626331
    16dc:	3dd0b461 	.word	0x3dd0b461
    16e0:	3ff921fb 	.word	0x3ff921fb
    16e4:	00000000 	.word	0x00000000

000016e8 <__kernel_cos>:
    16e8:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    16ec:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    16f0:	b086      	sub	sp, #24
    16f2:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
    16f6:	e9cd 2300 	strd	r2, r3, [sp]
    16fa:	4688      	mov	r8, r1
    16fc:	4606      	mov	r6, r0
    16fe:	da6d      	bge.n	17dc <__kernel_cos+0xf4>
    1700:	f7ff fd9c 	bl	123c <__aeabi_d2iz>
    1704:	2800      	cmp	r0, #0
    1706:	f000 80ef 	beq.w	18e8 <__kernel_cos+0x200>
    170a:	4632      	mov	r2, r6
    170c:	4643      	mov	r3, r8
    170e:	4630      	mov	r0, r6
    1710:	4641      	mov	r1, r8
    1712:	f7fe feb1 	bl	478 <__aeabi_dmul>
    1716:	a378      	add	r3, pc, #480	; (adr r3, 18f8 <__kernel_cos+0x210>)
    1718:	e9d3 2300 	ldrd	r2, r3, [r3]
    171c:	4604      	mov	r4, r0
    171e:	460d      	mov	r5, r1
    1720:	f7fe feaa 	bl	478 <__aeabi_dmul>
    1724:	a376      	add	r3, pc, #472	; (adr r3, 1900 <__kernel_cos+0x218>)
    1726:	e9d3 2300 	ldrd	r2, r3, [r3]
    172a:	f7fe fcef 	bl	10c <__adddf3>
    172e:	4622      	mov	r2, r4
    1730:	462b      	mov	r3, r5
    1732:	f7fe fea1 	bl	478 <__aeabi_dmul>
    1736:	a374      	add	r3, pc, #464	; (adr r3, 1908 <__kernel_cos+0x220>)
    1738:	e9d3 2300 	ldrd	r2, r3, [r3]
    173c:	f7fe fce4 	bl	108 <__aeabi_dsub>
    1740:	4622      	mov	r2, r4
    1742:	462b      	mov	r3, r5
    1744:	f7fe fe98 	bl	478 <__aeabi_dmul>
    1748:	a371      	add	r3, pc, #452	; (adr r3, 1910 <__kernel_cos+0x228>)
    174a:	e9d3 2300 	ldrd	r2, r3, [r3]
    174e:	f7fe fcdd 	bl	10c <__adddf3>
    1752:	4622      	mov	r2, r4
    1754:	462b      	mov	r3, r5
    1756:	f7fe fe8f 	bl	478 <__aeabi_dmul>
    175a:	a36f      	add	r3, pc, #444	; (adr r3, 1918 <__kernel_cos+0x230>)
    175c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1760:	f7fe fcd2 	bl	108 <__aeabi_dsub>
    1764:	4622      	mov	r2, r4
    1766:	462b      	mov	r3, r5
    1768:	f7fe fe86 	bl	478 <__aeabi_dmul>
    176c:	a36c      	add	r3, pc, #432	; (adr r3, 1920 <__kernel_cos+0x238>)
    176e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1772:	f7fe fccb 	bl	10c <__adddf3>
    1776:	4622      	mov	r2, r4
    1778:	462b      	mov	r3, r5
    177a:	f7fe fe7d 	bl	478 <__aeabi_dmul>
    177e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1782:	4b69      	ldr	r3, [pc, #420]	; (1928 <__kernel_cos+0x240>)
    1784:	2200      	movs	r2, #0
    1786:	4620      	mov	r0, r4
    1788:	4629      	mov	r1, r5
    178a:	f7fe fe75 	bl	478 <__aeabi_dmul>
    178e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1792:	4682      	mov	sl, r0
    1794:	468b      	mov	fp, r1
    1796:	4620      	mov	r0, r4
    1798:	4629      	mov	r1, r5
    179a:	f7fe fe6d 	bl	478 <__aeabi_dmul>
    179e:	4602      	mov	r2, r0
    17a0:	460b      	mov	r3, r1
    17a2:	461f      	mov	r7, r3
    17a4:	4630      	mov	r0, r6
    17a6:	4641      	mov	r1, r8
    17a8:	4616      	mov	r6, r2
    17aa:	e9dd 2300 	ldrd	r2, r3, [sp]
    17ae:	f7fe fe63 	bl	478 <__aeabi_dmul>
    17b2:	4602      	mov	r2, r0
    17b4:	460b      	mov	r3, r1
    17b6:	4630      	mov	r0, r6
    17b8:	4639      	mov	r1, r7
    17ba:	f7fe fca5 	bl	108 <__aeabi_dsub>
    17be:	4602      	mov	r2, r0
    17c0:	460b      	mov	r3, r1
    17c2:	4650      	mov	r0, sl
    17c4:	4659      	mov	r1, fp
    17c6:	f7fe fc9f 	bl	108 <__aeabi_dsub>
    17ca:	4602      	mov	r2, r0
    17cc:	460b      	mov	r3, r1
    17ce:	2000      	movs	r0, #0
    17d0:	4956      	ldr	r1, [pc, #344]	; (192c <__kernel_cos+0x244>)
    17d2:	f7fe fc99 	bl	108 <__aeabi_dsub>
    17d6:	b006      	add	sp, #24
    17d8:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    17dc:	4602      	mov	r2, r0
    17de:	460b      	mov	r3, r1
    17e0:	f7fe fe4a 	bl	478 <__aeabi_dmul>
    17e4:	a344      	add	r3, pc, #272	; (adr r3, 18f8 <__kernel_cos+0x210>)
    17e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    17ea:	4604      	mov	r4, r0
    17ec:	460d      	mov	r5, r1
    17ee:	f7fe fe43 	bl	478 <__aeabi_dmul>
    17f2:	a343      	add	r3, pc, #268	; (adr r3, 1900 <__kernel_cos+0x218>)
    17f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17f8:	f7fe fc88 	bl	10c <__adddf3>
    17fc:	4622      	mov	r2, r4
    17fe:	462b      	mov	r3, r5
    1800:	f7fe fe3a 	bl	478 <__aeabi_dmul>
    1804:	a340      	add	r3, pc, #256	; (adr r3, 1908 <__kernel_cos+0x220>)
    1806:	e9d3 2300 	ldrd	r2, r3, [r3]
    180a:	f7fe fc7d 	bl	108 <__aeabi_dsub>
    180e:	4622      	mov	r2, r4
    1810:	462b      	mov	r3, r5
    1812:	f7fe fe31 	bl	478 <__aeabi_dmul>
    1816:	a33e      	add	r3, pc, #248	; (adr r3, 1910 <__kernel_cos+0x228>)
    1818:	e9d3 2300 	ldrd	r2, r3, [r3]
    181c:	f7fe fc76 	bl	10c <__adddf3>
    1820:	4622      	mov	r2, r4
    1822:	462b      	mov	r3, r5
    1824:	f7fe fe28 	bl	478 <__aeabi_dmul>
    1828:	a33b      	add	r3, pc, #236	; (adr r3, 1918 <__kernel_cos+0x230>)
    182a:	e9d3 2300 	ldrd	r2, r3, [r3]
    182e:	f7fe fc6b 	bl	108 <__aeabi_dsub>
    1832:	4622      	mov	r2, r4
    1834:	462b      	mov	r3, r5
    1836:	f7fe fe1f 	bl	478 <__aeabi_dmul>
    183a:	a339      	add	r3, pc, #228	; (adr r3, 1920 <__kernel_cos+0x238>)
    183c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1840:	f7fe fc64 	bl	10c <__adddf3>
    1844:	462b      	mov	r3, r5
    1846:	4622      	mov	r2, r4
    1848:	f7fe fe16 	bl	478 <__aeabi_dmul>
    184c:	4b38      	ldr	r3, [pc, #224]	; (1930 <__kernel_cos+0x248>)
    184e:	429f      	cmp	r7, r3
    1850:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1854:	dd95      	ble.n	1782 <__kernel_cos+0x9a>
    1856:	4b37      	ldr	r3, [pc, #220]	; (1934 <__kernel_cos+0x24c>)
    1858:	429f      	cmp	r7, r3
    185a:	dc3c      	bgt.n	18d6 <__kernel_cos+0x1ee>
    185c:	f04f 0a00 	mov.w	sl, #0
    1860:	f5a7 1b00 	sub.w	fp, r7, #2097152	; 0x200000
    1864:	4931      	ldr	r1, [pc, #196]	; (192c <__kernel_cos+0x244>)
    1866:	4652      	mov	r2, sl
    1868:	465b      	mov	r3, fp
    186a:	2000      	movs	r0, #0
    186c:	f7fe fc4c 	bl	108 <__aeabi_dsub>
    1870:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1874:	4b2c      	ldr	r3, [pc, #176]	; (1928 <__kernel_cos+0x240>)
    1876:	2200      	movs	r2, #0
    1878:	4620      	mov	r0, r4
    187a:	4629      	mov	r1, r5
    187c:	f7fe fdfc 	bl	478 <__aeabi_dmul>
    1880:	4652      	mov	r2, sl
    1882:	465b      	mov	r3, fp
    1884:	f7fe fc40 	bl	108 <__aeabi_dsub>
    1888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    188c:	4682      	mov	sl, r0
    188e:	468b      	mov	fp, r1
    1890:	4620      	mov	r0, r4
    1892:	4629      	mov	r1, r5
    1894:	f7fe fdf0 	bl	478 <__aeabi_dmul>
    1898:	4602      	mov	r2, r0
    189a:	460b      	mov	r3, r1
    189c:	461f      	mov	r7, r3
    189e:	4630      	mov	r0, r6
    18a0:	4641      	mov	r1, r8
    18a2:	4616      	mov	r6, r2
    18a4:	e9dd 2300 	ldrd	r2, r3, [sp]
    18a8:	f7fe fde6 	bl	478 <__aeabi_dmul>
    18ac:	4602      	mov	r2, r0
    18ae:	460b      	mov	r3, r1
    18b0:	4630      	mov	r0, r6
    18b2:	4639      	mov	r1, r7
    18b4:	f7fe fc28 	bl	108 <__aeabi_dsub>
    18b8:	4602      	mov	r2, r0
    18ba:	460b      	mov	r3, r1
    18bc:	4650      	mov	r0, sl
    18be:	4659      	mov	r1, fp
    18c0:	f7fe fc22 	bl	108 <__aeabi_dsub>
    18c4:	4602      	mov	r2, r0
    18c6:	460b      	mov	r3, r1
    18c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    18cc:	f7fe fc1c 	bl	108 <__aeabi_dsub>
    18d0:	b006      	add	sp, #24
    18d2:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    18d6:	4b18      	ldr	r3, [pc, #96]	; (1938 <__kernel_cos+0x250>)
    18d8:	f8df b060 	ldr.w	fp, [pc, #96]	; 193c <__kernel_cos+0x254>
    18dc:	2200      	movs	r2, #0
    18de:	e9cd 2304 	strd	r2, r3, [sp, #16]
    18e2:	f04f 0a00 	mov.w	sl, #0
    18e6:	e7c5      	b.n	1874 <__kernel_cos+0x18c>
    18e8:	4910      	ldr	r1, [pc, #64]	; (192c <__kernel_cos+0x244>)
    18ea:	2000      	movs	r0, #0
    18ec:	b006      	add	sp, #24
    18ee:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    18f2:	bf00      	nop
    18f4:	f3af 8000 	nop.w
    18f8:	be8838d4 	.word	0xbe8838d4
    18fc:	bda8fae9 	.word	0xbda8fae9
    1900:	bdb4b1c4 	.word	0xbdb4b1c4
    1904:	3e21ee9e 	.word	0x3e21ee9e
    1908:	809c52ad 	.word	0x809c52ad
    190c:	3e927e4f 	.word	0x3e927e4f
    1910:	19cb1590 	.word	0x19cb1590
    1914:	3efa01a0 	.word	0x3efa01a0
    1918:	16c15177 	.word	0x16c15177
    191c:	3f56c16c 	.word	0x3f56c16c
    1920:	5555554c 	.word	0x5555554c
    1924:	3fa55555 	.word	0x3fa55555
    1928:	3fe00000 	.word	0x3fe00000
    192c:	3ff00000 	.word	0x3ff00000
    1930:	3fd33332 	.word	0x3fd33332
    1934:	3fe90000 	.word	0x3fe90000
    1938:	3fe70000 	.word	0x3fe70000
    193c:	3fd20000 	.word	0x3fd20000

00001940 <__kernel_rem_pio2>:
    1940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1944:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
    1948:	4cba      	ldr	r4, [pc, #744]	; (1c34 <__kernel_rem_pio2+0x2f4>)
    194a:	9da2      	ldr	r5, [sp, #648]	; 0x288
    194c:	9308      	str	r3, [sp, #32]
    194e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
    1952:	9405      	str	r4, [sp, #20]
    1954:	3b01      	subs	r3, #1
    1956:	f112 0f14 	cmn.w	r2, #20
    195a:	4607      	mov	r7, r0
    195c:	910b      	str	r1, [sp, #44]	; 0x2c
    195e:	9303      	str	r3, [sp, #12]
    1960:	f2c0 8342 	blt.w	1fe8 <__kernel_rem_pio2+0x6a8>
    1964:	49b4      	ldr	r1, [pc, #720]	; (1c38 <__kernel_rem_pio2+0x2f8>)
    1966:	1ed3      	subs	r3, r2, #3
    1968:	fb81 0103 	smull	r0, r1, r1, r3
    196c:	17db      	asrs	r3, r3, #31
    196e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    1972:	9307      	str	r3, [sp, #28]
    1974:	3301      	adds	r3, #1
    1976:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    197a:	00db      	lsls	r3, r3, #3
    197c:	18d3      	adds	r3, r2, r3
    197e:	9306      	str	r3, [sp, #24]
    1980:	9a07      	ldr	r2, [sp, #28]
    1982:	9b03      	ldr	r3, [sp, #12]
    1984:	1ad6      	subs	r6, r2, r3
    1986:	9a05      	ldr	r2, [sp, #20]
    1988:	eb12 0903 	adds.w	r9, r2, r3
    198c:	d41b      	bmi.n	19c6 <__kernel_rem_pio2+0x86>
    198e:	f109 0901 	add.w	r9, r9, #1
    1992:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
    1996:	44b1      	add	r9, r6
    1998:	f10d 0880 	add.w	r8, sp, #128	; 0x80
    199c:	2400      	movs	r4, #0
    199e:	2500      	movs	r5, #0
    19a0:	e008      	b.n	19b4 <__kernel_rem_pio2+0x74>
    19a2:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
    19a6:	f7fe fcfd 	bl	3a4 <__aeabi_i2d>
    19aa:	3601      	adds	r6, #1
    19ac:	454e      	cmp	r6, r9
    19ae:	e8e8 0102 	strd	r0, r1, [r8], #8
    19b2:	d008      	beq.n	19c6 <__kernel_rem_pio2+0x86>
    19b4:	2e00      	cmp	r6, #0
    19b6:	daf4      	bge.n	19a2 <__kernel_rem_pio2+0x62>
    19b8:	3601      	adds	r6, #1
    19ba:	4620      	mov	r0, r4
    19bc:	4629      	mov	r1, r5
    19be:	454e      	cmp	r6, r9
    19c0:	e8e8 0102 	strd	r0, r1, [r8], #8
    19c4:	d1f6      	bne.n	19b4 <__kernel_rem_pio2+0x74>
    19c6:	9b05      	ldr	r3, [sp, #20]
    19c8:	2b00      	cmp	r3, #0
    19ca:	f1a7 0308 	sub.w	r3, r7, #8
    19ce:	9304      	str	r3, [sp, #16]
    19d0:	f2c0 83ba 	blt.w	2148 <__kernel_rem_pio2+0x808>
    19d4:	4619      	mov	r1, r3
    19d6:	9b08      	ldr	r3, [sp, #32]
    19d8:	f8dd 900c 	ldr.w	r9, [sp, #12]
    19dc:	00da      	lsls	r2, r3, #3
    19de:	9202      	str	r2, [sp, #8]
    19e0:	9a05      	ldr	r2, [sp, #20]
    19e2:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
    19e6:	a920      	add	r1, sp, #128	; 0x80
    19e8:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
    19ec:	18d3      	adds	r3, r2, r3
    19ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
    19f2:	9301      	str	r3, [sp, #4]
    19f4:	9b03      	ldr	r3, [sp, #12]
    19f6:	2b00      	cmp	r3, #0
    19f8:	f2c0 81b1 	blt.w	1d5e <__kernel_rem_pio2+0x41e>
    19fc:	9e04      	ldr	r6, [sp, #16]
    19fe:	4657      	mov	r7, sl
    1a00:	2400      	movs	r4, #0
    1a02:	2500      	movs	r5, #0
    1a04:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
    1a08:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
    1a0c:	f7fe fd34 	bl	478 <__aeabi_dmul>
    1a10:	4602      	mov	r2, r0
    1a12:	460b      	mov	r3, r1
    1a14:	4620      	mov	r0, r4
    1a16:	4629      	mov	r1, r5
    1a18:	f7fe fb78 	bl	10c <__adddf3>
    1a1c:	4546      	cmp	r6, r8
    1a1e:	4604      	mov	r4, r0
    1a20:	460d      	mov	r5, r1
    1a22:	d1ef      	bne.n	1a04 <__kernel_rem_pio2+0xc4>
    1a24:	9b01      	ldr	r3, [sp, #4]
    1a26:	f109 0901 	add.w	r9, r9, #1
    1a2a:	4599      	cmp	r9, r3
    1a2c:	e8eb 4502 	strd	r4, r5, [fp], #8
    1a30:	f10a 0a08 	add.w	sl, sl, #8
    1a34:	d1de      	bne.n	19f4 <__kernel_rem_pio2+0xb4>
    1a36:	9a05      	ldr	r2, [sp, #20]
    1a38:	9804      	ldr	r0, [sp, #16]
    1a3a:	a90c      	add	r1, sp, #48	; 0x30
    1a3c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    1a40:	9902      	ldr	r1, [sp, #8]
    1a42:	4401      	add	r1, r0
    1a44:	3b08      	subs	r3, #8
    1a46:	468b      	mov	fp, r1
    1a48:	a90b      	add	r1, sp, #44	; 0x2c
    1a4a:	9309      	str	r3, [sp, #36]	; 0x24
    1a4c:	4613      	mov	r3, r2
    1a4e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1a52:	920a      	str	r2, [sp, #40]	; 0x28
    1a54:	9301      	str	r3, [sp, #4]
    1a56:	9a01      	ldr	r2, [sp, #4]
    1a58:	a998      	add	r1, sp, #608	; 0x260
    1a5a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    1a5e:	2a00      	cmp	r2, #0
    1a60:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
    1a64:	dd2a      	ble.n	1abc <__kernel_rem_pio2+0x17c>
    1a66:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
    1a6a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
    1a6e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    1a72:	4b72      	ldr	r3, [pc, #456]	; (1c3c <__kernel_rem_pio2+0x2fc>)
    1a74:	2200      	movs	r2, #0
    1a76:	4620      	mov	r0, r4
    1a78:	4629      	mov	r1, r5
    1a7a:	f7fe fcfd 	bl	478 <__aeabi_dmul>
    1a7e:	f7ff fbdd 	bl	123c <__aeabi_d2iz>
    1a82:	f7fe fc8f 	bl	3a4 <__aeabi_i2d>
    1a86:	4b6e      	ldr	r3, [pc, #440]	; (1c40 <__kernel_rem_pio2+0x300>)
    1a88:	2200      	movs	r2, #0
    1a8a:	4606      	mov	r6, r0
    1a8c:	460f      	mov	r7, r1
    1a8e:	f7fe fcf3 	bl	478 <__aeabi_dmul>
    1a92:	4602      	mov	r2, r0
    1a94:	460b      	mov	r3, r1
    1a96:	4620      	mov	r0, r4
    1a98:	4629      	mov	r1, r5
    1a9a:	f7fe fb35 	bl	108 <__aeabi_dsub>
    1a9e:	f7ff fbcd 	bl	123c <__aeabi_d2iz>
    1aa2:	4604      	mov	r4, r0
    1aa4:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
    1aa8:	f849 4b04 	str.w	r4, [r9], #4
    1aac:	4630      	mov	r0, r6
    1aae:	4639      	mov	r1, r7
    1ab0:	f7fe fb2c 	bl	10c <__adddf3>
    1ab4:	45d0      	cmp	r8, sl
    1ab6:	4604      	mov	r4, r0
    1ab8:	460d      	mov	r5, r1
    1aba:	d1da      	bne.n	1a72 <__kernel_rem_pio2+0x132>
    1abc:	f8dd 9018 	ldr.w	r9, [sp, #24]
    1ac0:	4620      	mov	r0, r4
    1ac2:	4629      	mov	r1, r5
    1ac4:	464a      	mov	r2, r9
    1ac6:	f000 fca3 	bl	2410 <scalbn>
    1aca:	2200      	movs	r2, #0
    1acc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    1ad0:	4604      	mov	r4, r0
    1ad2:	460d      	mov	r5, r1
    1ad4:	f7fe fcd0 	bl	478 <__aeabi_dmul>
    1ad8:	f000 fc1e 	bl	2318 <floor>
    1adc:	4b59      	ldr	r3, [pc, #356]	; (1c44 <__kernel_rem_pio2+0x304>)
    1ade:	2200      	movs	r2, #0
    1ae0:	f7fe fcca 	bl	478 <__aeabi_dmul>
    1ae4:	4602      	mov	r2, r0
    1ae6:	460b      	mov	r3, r1
    1ae8:	4620      	mov	r0, r4
    1aea:	4629      	mov	r1, r5
    1aec:	f7fe fb0c 	bl	108 <__aeabi_dsub>
    1af0:	460d      	mov	r5, r1
    1af2:	4604      	mov	r4, r0
    1af4:	f7ff fba2 	bl	123c <__aeabi_d2iz>
    1af8:	4680      	mov	r8, r0
    1afa:	f7fe fc53 	bl	3a4 <__aeabi_i2d>
    1afe:	460b      	mov	r3, r1
    1b00:	4602      	mov	r2, r0
    1b02:	4629      	mov	r1, r5
    1b04:	4620      	mov	r0, r4
    1b06:	f7fe faff 	bl	108 <__aeabi_dsub>
    1b0a:	464b      	mov	r3, r9
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	4606      	mov	r6, r0
    1b10:	460f      	mov	r7, r1
    1b12:	f340 8099 	ble.w	1c48 <__kernel_rem_pio2+0x308>
    1b16:	9a01      	ldr	r2, [sp, #4]
    1b18:	a90c      	add	r1, sp, #48	; 0x30
    1b1a:	3a01      	subs	r2, #1
    1b1c:	f1c9 0318 	rsb	r3, r9, #24
    1b20:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    1b24:	fa45 f103 	asr.w	r1, r5, r3
    1b28:	fa01 f303 	lsl.w	r3, r1, r3
    1b2c:	1aeb      	subs	r3, r5, r3
    1b2e:	f1c9 0517 	rsb	r5, r9, #23
    1b32:	a80c      	add	r0, sp, #48	; 0x30
    1b34:	fa43 f505 	asr.w	r5, r3, r5
    1b38:	2d00      	cmp	r5, #0
    1b3a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    1b3e:	4488      	add	r8, r1
    1b40:	f300 808c 	bgt.w	1c5c <__kernel_rem_pio2+0x31c>
    1b44:	2200      	movs	r2, #0
    1b46:	2300      	movs	r3, #0
    1b48:	4630      	mov	r0, r6
    1b4a:	4639      	mov	r1, r7
    1b4c:	f7ff fb44 	bl	11d8 <__aeabi_dcmpeq>
    1b50:	2800      	cmp	r0, #0
    1b52:	f000 8250 	beq.w	1ff6 <__kernel_rem_pio2+0x6b6>
    1b56:	9b01      	ldr	r3, [sp, #4]
    1b58:	9a05      	ldr	r2, [sp, #20]
    1b5a:	f103 3aff 	add.w	sl, r3, #4294967295
    1b5e:	4552      	cmp	r2, sl
    1b60:	dc10      	bgt.n	1b84 <__kernel_rem_pio2+0x244>
    1b62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1b66:	aa0c      	add	r2, sp, #48	; 0x30
    1b68:	3b01      	subs	r3, #1
    1b6a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b70:	2200      	movs	r2, #0
    1b72:	f853 1904 	ldr.w	r1, [r3], #-4
    1b76:	4283      	cmp	r3, r0
    1b78:	ea42 0201 	orr.w	r2, r2, r1
    1b7c:	d1f9      	bne.n	1b72 <__kernel_rem_pio2+0x232>
    1b7e:	2a00      	cmp	r2, #0
    1b80:	f040 80f0 	bne.w	1d64 <__kernel_rem_pio2+0x424>
    1b84:	9b05      	ldr	r3, [sp, #20]
    1b86:	aa0c      	add	r2, sp, #48	; 0x30
    1b88:	3b01      	subs	r3, #1
    1b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	f040 80e0 	bne.w	1d54 <__kernel_rem_pio2+0x414>
    1b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1b96:	2301      	movs	r3, #1
    1b98:	f852 1904 	ldr.w	r1, [r2], #-4
    1b9c:	3301      	adds	r3, #1
    1b9e:	2900      	cmp	r1, #0
    1ba0:	d0fa      	beq.n	1b98 <__kernel_rem_pio2+0x258>
    1ba2:	9901      	ldr	r1, [sp, #4]
    1ba4:	1c4a      	adds	r2, r1, #1
    1ba6:	18cb      	adds	r3, r1, r3
    1ba8:	9302      	str	r3, [sp, #8]
    1baa:	4691      	mov	r9, r2
    1bac:	9b07      	ldr	r3, [sp, #28]
    1bae:	9908      	ldr	r1, [sp, #32]
    1bb0:	eb02 0a03 	add.w	sl, r2, r3
    1bb4:	9b01      	ldr	r3, [sp, #4]
    1bb6:	440b      	add	r3, r1
    1bb8:	4698      	mov	r8, r3
    1bba:	ab20      	add	r3, sp, #128	; 0x80
    1bbc:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
    1bc0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
    1bc4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    1bc6:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bca:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    1bce:	ab70      	add	r3, sp, #448	; 0x1c0
    1bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1bd4:	9301      	str	r3, [sp, #4]
    1bd6:	f85a 0f04 	ldr.w	r0, [sl, #4]!
    1bda:	f7fe fbe3 	bl	3a4 <__aeabi_i2d>
    1bde:	9b03      	ldr	r3, [sp, #12]
    1be0:	2b00      	cmp	r3, #0
    1be2:	e9c8 0100 	strd	r0, r1, [r8]
    1be6:	4647      	mov	r7, r8
    1be8:	f108 0808 	add.w	r8, r8, #8
    1bec:	db1e      	blt.n	1c2c <__kernel_rem_pio2+0x2ec>
    1bee:	9e04      	ldr	r6, [sp, #16]
    1bf0:	3f08      	subs	r7, #8
    1bf2:	2400      	movs	r4, #0
    1bf4:	2500      	movs	r5, #0
    1bf6:	e001      	b.n	1bfc <__kernel_rem_pio2+0x2bc>
    1bf8:	e877 0102 	ldrd	r0, r1, [r7], #-8
    1bfc:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
    1c00:	f7fe fc3a 	bl	478 <__aeabi_dmul>
    1c04:	4602      	mov	r2, r0
    1c06:	460b      	mov	r3, r1
    1c08:	4620      	mov	r0, r4
    1c0a:	4629      	mov	r1, r5
    1c0c:	f7fe fa7e 	bl	10c <__adddf3>
    1c10:	455e      	cmp	r6, fp
    1c12:	4604      	mov	r4, r0
    1c14:	460d      	mov	r5, r1
    1c16:	d1ef      	bne.n	1bf8 <__kernel_rem_pio2+0x2b8>
    1c18:	9b01      	ldr	r3, [sp, #4]
    1c1a:	e8e3 4502 	strd	r4, r5, [r3], #8
    1c1e:	9301      	str	r3, [sp, #4]
    1c20:	9b02      	ldr	r3, [sp, #8]
    1c22:	f109 0901 	add.w	r9, r9, #1
    1c26:	4599      	cmp	r9, r3
    1c28:	ddd5      	ble.n	1bd6 <__kernel_rem_pio2+0x296>
    1c2a:	e713      	b.n	1a54 <__kernel_rem_pio2+0x114>
    1c2c:	2400      	movs	r4, #0
    1c2e:	2500      	movs	r5, #0
    1c30:	e7f2      	b.n	1c18 <__kernel_rem_pio2+0x2d8>
    1c32:	bf00      	nop
    1c34:	00009238 	.word	0x00009238
    1c38:	2aaaaaab 	.word	0x2aaaaaab
    1c3c:	3e700000 	.word	0x3e700000
    1c40:	41700000 	.word	0x41700000
    1c44:	40200000 	.word	0x40200000
    1c48:	d16b      	bne.n	1d22 <__kernel_rem_pio2+0x3e2>
    1c4a:	9b01      	ldr	r3, [sp, #4]
    1c4c:	aa0c      	add	r2, sp, #48	; 0x30
    1c4e:	3b01      	subs	r3, #1
    1c50:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    1c54:	15ed      	asrs	r5, r5, #23
    1c56:	2d00      	cmp	r5, #0
    1c58:	f77f af74 	ble.w	1b44 <__kernel_rem_pio2+0x204>
    1c5c:	9b01      	ldr	r3, [sp, #4]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	f108 0801 	add.w	r8, r8, #1
    1c64:	f340 81c5 	ble.w	1ff2 <__kernel_rem_pio2+0x6b2>
    1c68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    1c6a:	2c00      	cmp	r4, #0
    1c6c:	d151      	bne.n	1d12 <__kernel_rem_pio2+0x3d2>
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	2b01      	cmp	r3, #1
    1c72:	d020      	beq.n	1cb6 <__kernel_rem_pio2+0x376>
    1c74:	ab0c      	add	r3, sp, #48	; 0x30
    1c76:	2201      	movs	r2, #1
    1c78:	f853 4f04 	ldr.w	r4, [r3, #4]!
    1c7c:	2c00      	cmp	r4, #0
    1c7e:	d04b      	beq.n	1d18 <__kernel_rem_pio2+0x3d8>
    1c80:	1c53      	adds	r3, r2, #1
    1c82:	a90c      	add	r1, sp, #48	; 0x30
    1c84:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
    1c88:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    1c8c:	9901      	ldr	r1, [sp, #4]
    1c8e:	4299      	cmp	r1, r3
    1c90:	dd10      	ble.n	1cb4 <__kernel_rem_pio2+0x374>
    1c92:	aa0c      	add	r2, sp, #48	; 0x30
    1c94:	a80c      	add	r0, sp, #48	; 0x30
    1c96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1c9a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    1c9e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1ca2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    1ca6:	e000      	b.n	1caa <__kernel_rem_pio2+0x36a>
    1ca8:	681a      	ldr	r2, [r3, #0]
    1caa:	1a8a      	subs	r2, r1, r2
    1cac:	f843 2b04 	str.w	r2, [r3], #4
    1cb0:	4283      	cmp	r3, r0
    1cb2:	d1f9      	bne.n	1ca8 <__kernel_rem_pio2+0x368>
    1cb4:	2401      	movs	r4, #1
    1cb6:	9b06      	ldr	r3, [sp, #24]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	dd0e      	ble.n	1cda <__kernel_rem_pio2+0x39a>
    1cbc:	2b01      	cmp	r3, #1
    1cbe:	f000 817a 	beq.w	1fb6 <__kernel_rem_pio2+0x676>
    1cc2:	2b02      	cmp	r3, #2
    1cc4:	d109      	bne.n	1cda <__kernel_rem_pio2+0x39a>
    1cc6:	9b01      	ldr	r3, [sp, #4]
    1cc8:	1e5a      	subs	r2, r3, #1
    1cca:	ab0c      	add	r3, sp, #48	; 0x30
    1ccc:	a90c      	add	r1, sp, #48	; 0x30
    1cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1cd2:	f3c3 0315 	ubfx	r3, r3, #0, #22
    1cd6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    1cda:	2d02      	cmp	r5, #2
    1cdc:	f47f af32 	bne.w	1b44 <__kernel_rem_pio2+0x204>
    1ce0:	4632      	mov	r2, r6
    1ce2:	463b      	mov	r3, r7
    1ce4:	49bc      	ldr	r1, [pc, #752]	; (1fd8 <__kernel_rem_pio2+0x698>)
    1ce6:	2000      	movs	r0, #0
    1ce8:	f7fe fa0e 	bl	108 <__aeabi_dsub>
    1cec:	4606      	mov	r6, r0
    1cee:	460f      	mov	r7, r1
    1cf0:	2c00      	cmp	r4, #0
    1cf2:	f43f af27 	beq.w	1b44 <__kernel_rem_pio2+0x204>
    1cf6:	9a06      	ldr	r2, [sp, #24]
    1cf8:	49b7      	ldr	r1, [pc, #732]	; (1fd8 <__kernel_rem_pio2+0x698>)
    1cfa:	2000      	movs	r0, #0
    1cfc:	f000 fb88 	bl	2410 <scalbn>
    1d00:	4602      	mov	r2, r0
    1d02:	460b      	mov	r3, r1
    1d04:	4630      	mov	r0, r6
    1d06:	4639      	mov	r1, r7
    1d08:	f7fe f9fe 	bl	108 <__aeabi_dsub>
    1d0c:	4606      	mov	r6, r0
    1d0e:	460f      	mov	r7, r1
    1d10:	e718      	b.n	1b44 <__kernel_rem_pio2+0x204>
    1d12:	2301      	movs	r3, #1
    1d14:	2200      	movs	r2, #0
    1d16:	e7b4      	b.n	1c82 <__kernel_rem_pio2+0x342>
    1d18:	9901      	ldr	r1, [sp, #4]
    1d1a:	3201      	adds	r2, #1
    1d1c:	428a      	cmp	r2, r1
    1d1e:	d1ab      	bne.n	1c78 <__kernel_rem_pio2+0x338>
    1d20:	e7c9      	b.n	1cb6 <__kernel_rem_pio2+0x376>
    1d22:	4bae      	ldr	r3, [pc, #696]	; (1fdc <__kernel_rem_pio2+0x69c>)
    1d24:	2200      	movs	r2, #0
    1d26:	f7ff fa75 	bl	1214 <__aeabi_dcmpge>
    1d2a:	4605      	mov	r5, r0
    1d2c:	2800      	cmp	r0, #0
    1d2e:	f43f af09 	beq.w	1b44 <__kernel_rem_pio2+0x204>
    1d32:	9b01      	ldr	r3, [sp, #4]
    1d34:	2b00      	cmp	r3, #0
    1d36:	f108 0801 	add.w	r8, r8, #1
    1d3a:	bfc8      	it	gt
    1d3c:	2502      	movgt	r5, #2
    1d3e:	dc93      	bgt.n	1c68 <__kernel_rem_pio2+0x328>
    1d40:	4632      	mov	r2, r6
    1d42:	463b      	mov	r3, r7
    1d44:	49a4      	ldr	r1, [pc, #656]	; (1fd8 <__kernel_rem_pio2+0x698>)
    1d46:	2000      	movs	r0, #0
    1d48:	f7fe f9de 	bl	108 <__aeabi_dsub>
    1d4c:	2502      	movs	r5, #2
    1d4e:	4606      	mov	r6, r0
    1d50:	460f      	mov	r7, r1
    1d52:	e6f7      	b.n	1b44 <__kernel_rem_pio2+0x204>
    1d54:	9b01      	ldr	r3, [sp, #4]
    1d56:	1c5a      	adds	r2, r3, #1
    1d58:	4691      	mov	r9, r2
    1d5a:	9202      	str	r2, [sp, #8]
    1d5c:	e726      	b.n	1bac <__kernel_rem_pio2+0x26c>
    1d5e:	2400      	movs	r4, #0
    1d60:	2500      	movs	r5, #0
    1d62:	e65f      	b.n	1a24 <__kernel_rem_pio2+0xe4>
    1d64:	ab0c      	add	r3, sp, #48	; 0x30
    1d66:	9a06      	ldr	r2, [sp, #24]
    1d68:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    1d6c:	f8cd 801c 	str.w	r8, [sp, #28]
    1d70:	3a18      	subs	r2, #24
    1d72:	9503      	str	r5, [sp, #12]
    1d74:	9206      	str	r2, [sp, #24]
    1d76:	b973      	cbnz	r3, 1d96 <__kernel_rem_pio2+0x456>
    1d78:	9b01      	ldr	r3, [sp, #4]
    1d7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1d7e:	3b02      	subs	r3, #2
    1d80:	a90c      	add	r1, sp, #48	; 0x30
    1d82:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1d86:	f853 1904 	ldr.w	r1, [r3], #-4
    1d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
    1d8e:	3a18      	subs	r2, #24
    1d90:	2900      	cmp	r1, #0
    1d92:	d0f8      	beq.n	1d86 <__kernel_rem_pio2+0x446>
    1d94:	9206      	str	r2, [sp, #24]
    1d96:	9a06      	ldr	r2, [sp, #24]
    1d98:	498f      	ldr	r1, [pc, #572]	; (1fd8 <__kernel_rem_pio2+0x698>)
    1d9a:	2000      	movs	r0, #0
    1d9c:	f000 fb38 	bl	2410 <scalbn>
    1da0:	f1ba 0f00 	cmp.w	sl, #0
    1da4:	4604      	mov	r4, r0
    1da6:	460d      	mov	r5, r1
    1da8:	f2c0 81d2 	blt.w	2150 <__kernel_rem_pio2+0x810>
    1dac:	ab70      	add	r3, sp, #448	; 0x1c0
    1dae:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
    1db2:	aa0c      	add	r2, sp, #48	; 0x30
    1db4:	f10a 0301 	add.w	r3, sl, #1
    1db8:	9306      	str	r3, [sp, #24]
    1dba:	eb02 0883 	add.w	r8, r2, r3, lsl #2
    1dbe:	ea4f 03ca 	mov.w	r3, sl, lsl #3
    1dc2:	f10b 0908 	add.w	r9, fp, #8
    1dc6:	9304      	str	r3, [sp, #16]
    1dc8:	f858 0d04 	ldr.w	r0, [r8, #-4]!
    1dcc:	f7fe faea 	bl	3a4 <__aeabi_i2d>
    1dd0:	4622      	mov	r2, r4
    1dd2:	462b      	mov	r3, r5
    1dd4:	f7fe fb50 	bl	478 <__aeabi_dmul>
    1dd8:	4606      	mov	r6, r0
    1dda:	460f      	mov	r7, r1
    1ddc:	4b80      	ldr	r3, [pc, #512]	; (1fe0 <__kernel_rem_pio2+0x6a0>)
    1dde:	4620      	mov	r0, r4
    1de0:	4629      	mov	r1, r5
    1de2:	e969 6702 	strd	r6, r7, [r9, #-8]!
    1de6:	2200      	movs	r2, #0
    1de8:	f7fe fb46 	bl	478 <__aeabi_dmul>
    1dec:	ab0c      	add	r3, sp, #48	; 0x30
    1dee:	4598      	cmp	r8, r3
    1df0:	4604      	mov	r4, r0
    1df2:	460d      	mov	r5, r1
    1df4:	d1e8      	bne.n	1dc8 <__kernel_rem_pio2+0x488>
    1df6:	ab48      	add	r3, sp, #288	; 0x120
    1df8:	e9cd 3a01 	strd	r3, sl, [sp, #4]
    1dfc:	f8dd a014 	ldr.w	sl, [sp, #20]
    1e00:	f1ba 0f00 	cmp.w	sl, #0
    1e04:	f04f 0900 	mov.w	r9, #0
    1e08:	db2c      	blt.n	1e64 <__kernel_rem_pio2+0x524>
    1e0a:	a371      	add	r3, pc, #452	; (adr r3, 1fd0 <__kernel_rem_pio2+0x690>)
    1e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e10:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 1fe4 <__kernel_rem_pio2+0x6a4>
    1e14:	465f      	mov	r7, fp
    1e16:	2400      	movs	r4, #0
    1e18:	2500      	movs	r5, #0
    1e1a:	2600      	movs	r6, #0
    1e1c:	e003      	b.n	1e26 <__kernel_rem_pio2+0x4e6>
    1e1e:	45b1      	cmp	r9, r6
    1e20:	db10      	blt.n	1e44 <__kernel_rem_pio2+0x504>
    1e22:	e8f8 2302 	ldrd	r2, r3, [r8], #8
    1e26:	e8f7 0102 	ldrd	r0, r1, [r7], #8
    1e2a:	f7fe fb25 	bl	478 <__aeabi_dmul>
    1e2e:	4602      	mov	r2, r0
    1e30:	460b      	mov	r3, r1
    1e32:	4620      	mov	r0, r4
    1e34:	4629      	mov	r1, r5
    1e36:	f7fe f969 	bl	10c <__adddf3>
    1e3a:	3601      	adds	r6, #1
    1e3c:	45b2      	cmp	sl, r6
    1e3e:	4604      	mov	r4, r0
    1e40:	460d      	mov	r5, r1
    1e42:	daec      	bge.n	1e1e <__kernel_rem_pio2+0x4de>
    1e44:	9b01      	ldr	r3, [sp, #4]
    1e46:	9a02      	ldr	r2, [sp, #8]
    1e48:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    1e4c:	4591      	cmp	r9, r2
    1e4e:	e9c3 4500 	strd	r4, r5, [r3]
    1e52:	f1ab 0b08 	sub.w	fp, fp, #8
    1e56:	f109 0301 	add.w	r3, r9, #1
    1e5a:	d006      	beq.n	1e6a <__kernel_rem_pio2+0x52a>
    1e5c:	f1ba 0f00 	cmp.w	sl, #0
    1e60:	4699      	mov	r9, r3
    1e62:	dad2      	bge.n	1e0a <__kernel_rem_pio2+0x4ca>
    1e64:	2400      	movs	r4, #0
    1e66:	2500      	movs	r5, #0
    1e68:	e7ec      	b.n	1e44 <__kernel_rem_pio2+0x504>
    1e6a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    1e6c:	f8dd a008 	ldr.w	sl, [sp, #8]
    1e70:	2b02      	cmp	r3, #2
    1e72:	dc23      	bgt.n	1ebc <__kernel_rem_pio2+0x57c>
    1e74:	2b00      	cmp	r3, #0
    1e76:	f300 80f1 	bgt.w	205c <__kernel_rem_pio2+0x71c>
    1e7a:	d118      	bne.n	1eae <__kernel_rem_pio2+0x56e>
    1e7c:	9c04      	ldr	r4, [sp, #16]
    1e7e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
    1e80:	9d01      	ldr	r5, [sp, #4]
    1e82:	3408      	adds	r4, #8
    1e84:	442c      	add	r4, r5
    1e86:	4613      	mov	r3, r2
    1e88:	4610      	mov	r0, r2
    1e8a:	4619      	mov	r1, r3
    1e8c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    1e90:	f7fe f93c 	bl	10c <__adddf3>
    1e94:	42a5      	cmp	r5, r4
    1e96:	4602      	mov	r2, r0
    1e98:	460b      	mov	r3, r1
    1e9a:	d1f5      	bne.n	1e88 <__kernel_rem_pio2+0x548>
    1e9c:	9903      	ldr	r1, [sp, #12]
    1e9e:	b109      	cbz	r1, 1ea4 <__kernel_rem_pio2+0x564>
    1ea0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    1ea4:	4619      	mov	r1, r3
    1ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ea8:	4610      	mov	r0, r2
    1eaa:	e9c3 0100 	strd	r0, r1, [r3]
    1eae:	9b07      	ldr	r3, [sp, #28]
    1eb0:	f003 0007 	and.w	r0, r3, #7
    1eb4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    1eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ebc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    1ebe:	2b03      	cmp	r3, #3
    1ec0:	d1f5      	bne.n	1eae <__kernel_rem_pio2+0x56e>
    1ec2:	f1ba 0f00 	cmp.w	sl, #0
    1ec6:	f000 8159 	beq.w	217c <__kernel_rem_pio2+0x83c>
    1eca:	9b01      	ldr	r3, [sp, #4]
    1ecc:	9a04      	ldr	r2, [sp, #16]
    1ece:	eb03 0b02 	add.w	fp, r3, r2
    1ed2:	e9db 4500 	ldrd	r4, r5, [fp]
    1ed6:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
    1eda:	4620      	mov	r0, r4
    1edc:	4629      	mov	r1, r5
    1ede:	4632      	mov	r2, r6
    1ee0:	463b      	mov	r3, r7
    1ee2:	f7fe f913 	bl	10c <__adddf3>
    1ee6:	46a0      	mov	r8, r4
    1ee8:	46a9      	mov	r9, r5
    1eea:	4604      	mov	r4, r0
    1eec:	460d      	mov	r5, r1
    1eee:	4622      	mov	r2, r4
    1ef0:	462b      	mov	r3, r5
    1ef2:	4630      	mov	r0, r6
    1ef4:	4639      	mov	r1, r7
    1ef6:	f7fe f907 	bl	108 <__aeabi_dsub>
    1efa:	464b      	mov	r3, r9
    1efc:	4642      	mov	r2, r8
    1efe:	f7fe f905 	bl	10c <__adddf3>
    1f02:	e9cb 0100 	strd	r0, r1, [fp]
    1f06:	e96b 4502 	strd	r4, r5, [fp, #-8]!
    1f0a:	9b01      	ldr	r3, [sp, #4]
    1f0c:	455b      	cmp	r3, fp
    1f0e:	d1e2      	bne.n	1ed6 <__kernel_rem_pio2+0x596>
    1f10:	f1ba 0f01 	cmp.w	sl, #1
    1f14:	f340 8132 	ble.w	217c <__kernel_rem_pio2+0x83c>
    1f18:	9b04      	ldr	r3, [sp, #16]
    1f1a:	9a01      	ldr	r2, [sp, #4]
    1f1c:	4413      	add	r3, r2
    1f1e:	e9d3 4500 	ldrd	r4, r5, [r3]
    1f22:	9302      	str	r3, [sp, #8]
    1f24:	469a      	mov	sl, r3
    1f26:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
    1f2a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
    1f2e:	4620      	mov	r0, r4
    1f30:	4629      	mov	r1, r5
    1f32:	4632      	mov	r2, r6
    1f34:	463b      	mov	r3, r7
    1f36:	f7fe f8e9 	bl	10c <__adddf3>
    1f3a:	46a0      	mov	r8, r4
    1f3c:	46a9      	mov	r9, r5
    1f3e:	4604      	mov	r4, r0
    1f40:	460d      	mov	r5, r1
    1f42:	4622      	mov	r2, r4
    1f44:	462b      	mov	r3, r5
    1f46:	4630      	mov	r0, r6
    1f48:	4639      	mov	r1, r7
    1f4a:	f7fe f8dd 	bl	108 <__aeabi_dsub>
    1f4e:	4642      	mov	r2, r8
    1f50:	464b      	mov	r3, r9
    1f52:	f7fe f8db 	bl	10c <__adddf3>
    1f56:	e9ca 0100 	strd	r0, r1, [sl]
    1f5a:	e96a 4502 	strd	r4, r5, [sl, #-8]!
    1f5e:	45d3      	cmp	fp, sl
    1f60:	d1e3      	bne.n	1f2a <__kernel_rem_pio2+0x5ea>
    1f62:	9c02      	ldr	r4, [sp, #8]
    1f64:	9901      	ldr	r1, [sp, #4]
    1f66:	2300      	movs	r3, #0
    1f68:	3408      	adds	r4, #8
    1f6a:	461a      	mov	r2, r3
    1f6c:	f101 0510 	add.w	r5, r1, #16
    1f70:	4618      	mov	r0, r3
    1f72:	4611      	mov	r1, r2
    1f74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    1f78:	f7fe f8c8 	bl	10c <__adddf3>
    1f7c:	42a5      	cmp	r5, r4
    1f7e:	4603      	mov	r3, r0
    1f80:	460a      	mov	r2, r1
    1f82:	d1f5      	bne.n	1f70 <__kernel_rem_pio2+0x630>
    1f84:	9903      	ldr	r1, [sp, #12]
    1f86:	2900      	cmp	r1, #0
    1f88:	f040 80b3 	bne.w	20f2 <__kernel_rem_pio2+0x7b2>
    1f8c:	4618      	mov	r0, r3
    1f8e:	9b01      	ldr	r3, [sp, #4]
    1f90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1f92:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    1f96:	4611      	mov	r1, r2
    1f98:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
    1f9c:	e9c6 2300 	strd	r2, r3, [r6]
    1fa0:	9b07      	ldr	r3, [sp, #28]
    1fa2:	e9c6 0104 	strd	r0, r1, [r6, #16]
    1fa6:	f003 0007 	and.w	r0, r3, #7
    1faa:	e9c6 4502 	strd	r4, r5, [r6, #8]
    1fae:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    1fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fb6:	9b01      	ldr	r3, [sp, #4]
    1fb8:	1e5a      	subs	r2, r3, #1
    1fba:	ab0c      	add	r3, sp, #48	; 0x30
    1fbc:	a90c      	add	r1, sp, #48	; 0x30
    1fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1fc2:	f3c3 0316 	ubfx	r3, r3, #0, #23
    1fc6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    1fca:	e686      	b.n	1cda <__kernel_rem_pio2+0x39a>
    1fcc:	f3af 8000 	nop.w
    1fd0:	40000000 	.word	0x40000000
    1fd4:	3ff921fb 	.word	0x3ff921fb
    1fd8:	3ff00000 	.word	0x3ff00000
    1fdc:	3fe00000 	.word	0x3fe00000
    1fe0:	3e700000 	.word	0x3e700000
    1fe4:	00008cd0 	.word	0x00008cd0
    1fe8:	2100      	movs	r1, #0
    1fea:	f06f 0317 	mvn.w	r3, #23
    1fee:	9107      	str	r1, [sp, #28]
    1ff0:	e4c4      	b.n	197c <__kernel_rem_pio2+0x3c>
    1ff2:	2400      	movs	r4, #0
    1ff4:	e65f      	b.n	1cb6 <__kernel_rem_pio2+0x376>
    1ff6:	4639      	mov	r1, r7
    1ff8:	9f06      	ldr	r7, [sp, #24]
    1ffa:	9503      	str	r5, [sp, #12]
    1ffc:	427a      	negs	r2, r7
    1ffe:	4630      	mov	r0, r6
    2000:	f8cd 801c 	str.w	r8, [sp, #28]
    2004:	f000 fa04 	bl	2410 <scalbn>
    2008:	4b5e      	ldr	r3, [pc, #376]	; (2184 <__kernel_rem_pio2+0x844>)
    200a:	2200      	movs	r2, #0
    200c:	4604      	mov	r4, r0
    200e:	460d      	mov	r5, r1
    2010:	f7ff f900 	bl	1214 <__aeabi_dcmpge>
    2014:	2800      	cmp	r0, #0
    2016:	d062      	beq.n	20de <__kernel_rem_pio2+0x79e>
    2018:	4b5b      	ldr	r3, [pc, #364]	; (2188 <__kernel_rem_pio2+0x848>)
    201a:	2200      	movs	r2, #0
    201c:	4620      	mov	r0, r4
    201e:	4629      	mov	r1, r5
    2020:	f7fe fa2a 	bl	478 <__aeabi_dmul>
    2024:	f7ff f90a 	bl	123c <__aeabi_d2iz>
    2028:	4606      	mov	r6, r0
    202a:	f7fe f9bb 	bl	3a4 <__aeabi_i2d>
    202e:	4b55      	ldr	r3, [pc, #340]	; (2184 <__kernel_rem_pio2+0x844>)
    2030:	2200      	movs	r2, #0
    2032:	f7fe fa21 	bl	478 <__aeabi_dmul>
    2036:	460b      	mov	r3, r1
    2038:	4602      	mov	r2, r0
    203a:	4629      	mov	r1, r5
    203c:	4620      	mov	r0, r4
    203e:	f7fe f863 	bl	108 <__aeabi_dsub>
    2042:	9c01      	ldr	r4, [sp, #4]
    2044:	f7ff f8fa 	bl	123c <__aeabi_d2iz>
    2048:	f104 0a01 	add.w	sl, r4, #1
    204c:	ab0c      	add	r3, sp, #48	; 0x30
    204e:	3718      	adds	r7, #24
    2050:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    2054:	9706      	str	r7, [sp, #24]
    2056:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
    205a:	e69c      	b.n	1d96 <__kernel_rem_pio2+0x456>
    205c:	9d01      	ldr	r5, [sp, #4]
    205e:	9a06      	ldr	r2, [sp, #24]
    2060:	2100      	movs	r1, #0
    2062:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
    2066:	460b      	mov	r3, r1
    2068:	4608      	mov	r0, r1
    206a:	4619      	mov	r1, r3
    206c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    2070:	f7fe f84c 	bl	10c <__adddf3>
    2074:	42a5      	cmp	r5, r4
    2076:	460b      	mov	r3, r1
    2078:	4601      	mov	r1, r0
    207a:	d1f5      	bne.n	2068 <__kernel_rem_pio2+0x728>
    207c:	4618      	mov	r0, r3
    207e:	9b03      	ldr	r3, [sp, #12]
    2080:	2b00      	cmp	r3, #0
    2082:	d150      	bne.n	2126 <__kernel_rem_pio2+0x7e6>
    2084:	460a      	mov	r2, r1
    2086:	460c      	mov	r4, r1
    2088:	990b      	ldr	r1, [sp, #44]	; 0x2c
    208a:	4605      	mov	r5, r0
    208c:	4603      	mov	r3, r0
    208e:	e9c1 4500 	strd	r4, r5, [r1]
    2092:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
    2096:	f7fe f837 	bl	108 <__aeabi_dsub>
    209a:	f1ba 0f00 	cmp.w	sl, #0
    209e:	4602      	mov	r2, r0
    20a0:	460b      	mov	r3, r1
    20a2:	dd10      	ble.n	20c6 <__kernel_rem_pio2+0x786>
    20a4:	ad48      	add	r5, sp, #288	; 0x120
    20a6:	2401      	movs	r4, #1
    20a8:	4610      	mov	r0, r2
    20aa:	4619      	mov	r1, r3
    20ac:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
    20b0:	f7fe f82c 	bl	10c <__adddf3>
    20b4:	3401      	adds	r4, #1
    20b6:	45a2      	cmp	sl, r4
    20b8:	4602      	mov	r2, r0
    20ba:	460b      	mov	r3, r1
    20bc:	daf4      	bge.n	20a8 <__kernel_rem_pio2+0x768>
    20be:	9903      	ldr	r1, [sp, #12]
    20c0:	b109      	cbz	r1, 20c6 <__kernel_rem_pio2+0x786>
    20c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    20c6:	4619      	mov	r1, r3
    20c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    20ca:	4610      	mov	r0, r2
    20cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    20d0:	9b07      	ldr	r3, [sp, #28]
    20d2:	f003 0007 	and.w	r0, r3, #7
    20d6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    20da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20de:	4620      	mov	r0, r4
    20e0:	4629      	mov	r1, r5
    20e2:	f7ff f8ab 	bl	123c <__aeabi_d2iz>
    20e6:	9b01      	ldr	r3, [sp, #4]
    20e8:	aa0c      	add	r2, sp, #48	; 0x30
    20ea:	469a      	mov	sl, r3
    20ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    20f0:	e651      	b.n	1d96 <__kernel_rem_pio2+0x456>
    20f2:	9901      	ldr	r1, [sp, #4]
    20f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    20f6:	6848      	ldr	r0, [r1, #4]
    20f8:	6123      	str	r3, [r4, #16]
    20fa:	460e      	mov	r6, r1
    20fc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    2100:	68b3      	ldr	r3, [r6, #8]
    2102:	68c9      	ldr	r1, [r1, #12]
    2104:	60a3      	str	r3, [r4, #8]
    2106:	9b07      	ldr	r3, [sp, #28]
    2108:	6162      	str	r2, [r4, #20]
    210a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    210e:	6832      	ldr	r2, [r6, #0]
    2110:	6060      	str	r0, [r4, #4]
    2112:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    2116:	f003 0007 	and.w	r0, r3, #7
    211a:	60e1      	str	r1, [r4, #12]
    211c:	6022      	str	r2, [r4, #0]
    211e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    2122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2126:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2128:	4603      	mov	r3, r0
    212a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    212e:	460a      	mov	r2, r1
    2130:	e9c4 1000 	strd	r1, r0, [r4]
    2134:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
    2138:	f7fd ffe6 	bl	108 <__aeabi_dsub>
    213c:	f1ba 0f00 	cmp.w	sl, #0
    2140:	4602      	mov	r2, r0
    2142:	460b      	mov	r3, r1
    2144:	dcae      	bgt.n	20a4 <__kernel_rem_pio2+0x764>
    2146:	e7bc      	b.n	20c2 <__kernel_rem_pio2+0x782>
    2148:	9b08      	ldr	r3, [sp, #32]
    214a:	00db      	lsls	r3, r3, #3
    214c:	9302      	str	r3, [sp, #8]
    214e:	e472      	b.n	1a36 <__kernel_rem_pio2+0xf6>
    2150:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    2152:	2b02      	cmp	r3, #2
    2154:	dc06      	bgt.n	2164 <__kernel_rem_pio2+0x824>
    2156:	2b00      	cmp	r3, #0
    2158:	dc0d      	bgt.n	2176 <__kernel_rem_pio2+0x836>
    215a:	f47f aea8 	bne.w	1eae <__kernel_rem_pio2+0x56e>
    215e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
    2160:	4613      	mov	r3, r2
    2162:	e69b      	b.n	1e9c <__kernel_rem_pio2+0x55c>
    2164:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    2166:	2b03      	cmp	r3, #3
    2168:	f47f aea1 	bne.w	1eae <__kernel_rem_pio2+0x56e>
    216c:	2300      	movs	r3, #0
    216e:	a948      	add	r1, sp, #288	; 0x120
    2170:	461a      	mov	r2, r3
    2172:	9101      	str	r1, [sp, #4]
    2174:	e706      	b.n	1f84 <__kernel_rem_pio2+0x644>
    2176:	2100      	movs	r1, #0
    2178:	4608      	mov	r0, r1
    217a:	e780      	b.n	207e <__kernel_rem_pio2+0x73e>
    217c:	2300      	movs	r3, #0
    217e:	461a      	mov	r2, r3
    2180:	e700      	b.n	1f84 <__kernel_rem_pio2+0x644>
    2182:	bf00      	nop
    2184:	41700000 	.word	0x41700000
    2188:	3e700000 	.word	0x3e700000
    218c:	00000000 	.word	0x00000000

00002190 <__kernel_sin>:
    2190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2194:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    2198:	b087      	sub	sp, #28
    219a:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
    219e:	4604      	mov	r4, r0
    21a0:	9101      	str	r1, [sp, #4]
    21a2:	4690      	mov	r8, r2
    21a4:	4699      	mov	r9, r3
    21a6:	da04      	bge.n	21b2 <__kernel_sin+0x22>
    21a8:	f7ff f848 	bl	123c <__aeabi_d2iz>
    21ac:	2800      	cmp	r0, #0
    21ae:	f000 808f 	beq.w	22d0 <__kernel_sin+0x140>
    21b2:	9b01      	ldr	r3, [sp, #4]
    21b4:	4622      	mov	r2, r4
    21b6:	4619      	mov	r1, r3
    21b8:	4620      	mov	r0, r4
    21ba:	f7fe f95d 	bl	478 <__aeabi_dmul>
    21be:	9b01      	ldr	r3, [sp, #4]
    21c0:	4606      	mov	r6, r0
    21c2:	460f      	mov	r7, r1
    21c4:	4632      	mov	r2, r6
    21c6:	4619      	mov	r1, r3
    21c8:	4620      	mov	r0, r4
    21ca:	463b      	mov	r3, r7
    21cc:	f7fe f954 	bl	478 <__aeabi_dmul>
    21d0:	a343      	add	r3, pc, #268	; (adr r3, 22e0 <__kernel_sin+0x150>)
    21d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    21d6:	4682      	mov	sl, r0
    21d8:	468b      	mov	fp, r1
    21da:	4630      	mov	r0, r6
    21dc:	4639      	mov	r1, r7
    21de:	f7fe f94b 	bl	478 <__aeabi_dmul>
    21e2:	a341      	add	r3, pc, #260	; (adr r3, 22e8 <__kernel_sin+0x158>)
    21e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    21e8:	f7fd ff8e 	bl	108 <__aeabi_dsub>
    21ec:	4632      	mov	r2, r6
    21ee:	463b      	mov	r3, r7
    21f0:	f7fe f942 	bl	478 <__aeabi_dmul>
    21f4:	a33e      	add	r3, pc, #248	; (adr r3, 22f0 <__kernel_sin+0x160>)
    21f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    21fa:	f7fd ff87 	bl	10c <__adddf3>
    21fe:	4632      	mov	r2, r6
    2200:	463b      	mov	r3, r7
    2202:	f7fe f939 	bl	478 <__aeabi_dmul>
    2206:	a33c      	add	r3, pc, #240	; (adr r3, 22f8 <__kernel_sin+0x168>)
    2208:	e9d3 2300 	ldrd	r2, r3, [r3]
    220c:	f7fd ff7c 	bl	108 <__aeabi_dsub>
    2210:	4632      	mov	r2, r6
    2212:	463b      	mov	r3, r7
    2214:	f7fe f930 	bl	478 <__aeabi_dmul>
    2218:	a339      	add	r3, pc, #228	; (adr r3, 2300 <__kernel_sin+0x170>)
    221a:	e9d3 2300 	ldrd	r2, r3, [r3]
    221e:	f7fd ff75 	bl	10c <__adddf3>
    2222:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2224:	e9cd 0102 	strd	r0, r1, [sp, #8]
    2228:	2b00      	cmp	r3, #0
    222a:	d037      	beq.n	229c <__kernel_sin+0x10c>
    222c:	4b38      	ldr	r3, [pc, #224]	; (2310 <__kernel_sin+0x180>)
    222e:	2200      	movs	r2, #0
    2230:	4640      	mov	r0, r8
    2232:	4649      	mov	r1, r9
    2234:	f7fe f920 	bl	478 <__aeabi_dmul>
    2238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    223c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2240:	4650      	mov	r0, sl
    2242:	4659      	mov	r1, fp
    2244:	f7fe f918 	bl	478 <__aeabi_dmul>
    2248:	4602      	mov	r2, r0
    224a:	460b      	mov	r3, r1
    224c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2250:	f7fd ff5a 	bl	108 <__aeabi_dsub>
    2254:	4632      	mov	r2, r6
    2256:	463b      	mov	r3, r7
    2258:	f7fe f90e 	bl	478 <__aeabi_dmul>
    225c:	4642      	mov	r2, r8
    225e:	464b      	mov	r3, r9
    2260:	f7fd ff52 	bl	108 <__aeabi_dsub>
    2264:	a328      	add	r3, pc, #160	; (adr r3, 2308 <__kernel_sin+0x178>)
    2266:	e9d3 2300 	ldrd	r2, r3, [r3]
    226a:	4606      	mov	r6, r0
    226c:	460f      	mov	r7, r1
    226e:	4650      	mov	r0, sl
    2270:	4659      	mov	r1, fp
    2272:	f7fe f901 	bl	478 <__aeabi_dmul>
    2276:	4602      	mov	r2, r0
    2278:	460b      	mov	r3, r1
    227a:	4630      	mov	r0, r6
    227c:	4639      	mov	r1, r7
    227e:	f7fd ff45 	bl	10c <__adddf3>
    2282:	4602      	mov	r2, r0
    2284:	460b      	mov	r3, r1
    2286:	4620      	mov	r0, r4
    2288:	9901      	ldr	r1, [sp, #4]
    228a:	f7fd ff3d 	bl	108 <__aeabi_dsub>
    228e:	4604      	mov	r4, r0
    2290:	460d      	mov	r5, r1
    2292:	4620      	mov	r0, r4
    2294:	4629      	mov	r1, r5
    2296:	b007      	add	sp, #28
    2298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    229c:	4602      	mov	r2, r0
    229e:	460b      	mov	r3, r1
    22a0:	4630      	mov	r0, r6
    22a2:	4639      	mov	r1, r7
    22a4:	f7fe f8e8 	bl	478 <__aeabi_dmul>
    22a8:	a317      	add	r3, pc, #92	; (adr r3, 2308 <__kernel_sin+0x178>)
    22aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    22ae:	f7fd ff2b 	bl	108 <__aeabi_dsub>
    22b2:	4652      	mov	r2, sl
    22b4:	465b      	mov	r3, fp
    22b6:	f7fe f8df 	bl	478 <__aeabi_dmul>
    22ba:	4622      	mov	r2, r4
    22bc:	9b01      	ldr	r3, [sp, #4]
    22be:	f7fd ff25 	bl	10c <__adddf3>
    22c2:	4604      	mov	r4, r0
    22c4:	460d      	mov	r5, r1
    22c6:	4620      	mov	r0, r4
    22c8:	4629      	mov	r1, r5
    22ca:	b007      	add	sp, #28
    22cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22d0:	9d01      	ldr	r5, [sp, #4]
    22d2:	4620      	mov	r0, r4
    22d4:	4629      	mov	r1, r5
    22d6:	b007      	add	sp, #28
    22d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22dc:	f3af 8000 	nop.w
    22e0:	5acfd57c 	.word	0x5acfd57c
    22e4:	3de5d93a 	.word	0x3de5d93a
    22e8:	8a2b9ceb 	.word	0x8a2b9ceb
    22ec:	3e5ae5e6 	.word	0x3e5ae5e6
    22f0:	57b1fe7d 	.word	0x57b1fe7d
    22f4:	3ec71de3 	.word	0x3ec71de3
    22f8:	19c161d5 	.word	0x19c161d5
    22fc:	3f2a01a0 	.word	0x3f2a01a0
    2300:	1110f8a6 	.word	0x1110f8a6
    2304:	3f811111 	.word	0x3f811111
    2308:	55555549 	.word	0x55555549
    230c:	3fc55555 	.word	0x3fc55555
    2310:	3fe00000 	.word	0x3fe00000
    2314:	00000000 	.word	0x00000000

00002318 <floor>:
    2318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    231a:	f3c1 570a 	ubfx	r7, r1, #20, #11
    231e:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
    2322:	2d13      	cmp	r5, #19
    2324:	460b      	mov	r3, r1
    2326:	460c      	mov	r4, r1
    2328:	4602      	mov	r2, r0
    232a:	4606      	mov	r6, r0
    232c:	dc20      	bgt.n	2370 <floor+0x58>
    232e:	2d00      	cmp	r5, #0
    2330:	db40      	blt.n	23b4 <floor+0x9c>
    2332:	4f35      	ldr	r7, [pc, #212]	; (2408 <floor+0xf0>)
    2334:	412f      	asrs	r7, r5
    2336:	ea01 0c07 	and.w	ip, r1, r7
    233a:	ea5c 0c00 	orrs.w	ip, ip, r0
    233e:	d014      	beq.n	236a <floor+0x52>
    2340:	a32f      	add	r3, pc, #188	; (adr r3, 2400 <floor+0xe8>)
    2342:	e9d3 2300 	ldrd	r2, r3, [r3]
    2346:	f7fd fee1 	bl	10c <__adddf3>
    234a:	2200      	movs	r2, #0
    234c:	2300      	movs	r3, #0
    234e:	f7fe ff6b 	bl	1228 <__aeabi_dcmpgt>
    2352:	b140      	cbz	r0, 2366 <floor+0x4e>
    2354:	2c00      	cmp	r4, #0
    2356:	da03      	bge.n	2360 <floor+0x48>
    2358:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    235c:	412b      	asrs	r3, r5
    235e:	441c      	add	r4, r3
    2360:	ea24 0407 	bic.w	r4, r4, r7
    2364:	2600      	movs	r6, #0
    2366:	4632      	mov	r2, r6
    2368:	4623      	mov	r3, r4
    236a:	4610      	mov	r0, r2
    236c:	4619      	mov	r1, r3
    236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2370:	2d33      	cmp	r5, #51	; 0x33
    2372:	dd07      	ble.n	2384 <floor+0x6c>
    2374:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    2378:	d1f7      	bne.n	236a <floor+0x52>
    237a:	f7fd fec7 	bl	10c <__adddf3>
    237e:	4602      	mov	r2, r0
    2380:	460b      	mov	r3, r1
    2382:	e7f2      	b.n	236a <floor+0x52>
    2384:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    2388:	f04f 3cff 	mov.w	ip, #4294967295
    238c:	fa2c f707 	lsr.w	r7, ip, r7
    2390:	4207      	tst	r7, r0
    2392:	d0ea      	beq.n	236a <floor+0x52>
    2394:	a31a      	add	r3, pc, #104	; (adr r3, 2400 <floor+0xe8>)
    2396:	e9d3 2300 	ldrd	r2, r3, [r3]
    239a:	f7fd feb7 	bl	10c <__adddf3>
    239e:	2200      	movs	r2, #0
    23a0:	2300      	movs	r3, #0
    23a2:	f7fe ff41 	bl	1228 <__aeabi_dcmpgt>
    23a6:	2800      	cmp	r0, #0
    23a8:	d0dd      	beq.n	2366 <floor+0x4e>
    23aa:	2c00      	cmp	r4, #0
    23ac:	db1b      	blt.n	23e6 <floor+0xce>
    23ae:	ea26 0607 	bic.w	r6, r6, r7
    23b2:	e7d8      	b.n	2366 <floor+0x4e>
    23b4:	a312      	add	r3, pc, #72	; (adr r3, 2400 <floor+0xe8>)
    23b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    23ba:	f7fd fea7 	bl	10c <__adddf3>
    23be:	2200      	movs	r2, #0
    23c0:	2300      	movs	r3, #0
    23c2:	f7fe ff31 	bl	1228 <__aeabi_dcmpgt>
    23c6:	2800      	cmp	r0, #0
    23c8:	d0cd      	beq.n	2366 <floor+0x4e>
    23ca:	2c00      	cmp	r4, #0
    23cc:	db02      	blt.n	23d4 <floor+0xbc>
    23ce:	2600      	movs	r6, #0
    23d0:	4634      	mov	r4, r6
    23d2:	e7c8      	b.n	2366 <floor+0x4e>
    23d4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    23d8:	4a0c      	ldr	r2, [pc, #48]	; (240c <floor+0xf4>)
    23da:	431e      	orrs	r6, r3
    23dc:	2e00      	cmp	r6, #0
    23de:	bf18      	it	ne
    23e0:	4614      	movne	r4, r2
    23e2:	2600      	movs	r6, #0
    23e4:	e7bf      	b.n	2366 <floor+0x4e>
    23e6:	2d14      	cmp	r5, #20
    23e8:	d008      	beq.n	23fc <floor+0xe4>
    23ea:	2201      	movs	r2, #1
    23ec:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
    23f0:	fa02 f303 	lsl.w	r3, r2, r3
    23f4:	199e      	adds	r6, r3, r6
    23f6:	bf28      	it	cs
    23f8:	18a4      	addcs	r4, r4, r2
    23fa:	e7d8      	b.n	23ae <floor+0x96>
    23fc:	3401      	adds	r4, #1
    23fe:	e7d6      	b.n	23ae <floor+0x96>
    2400:	8800759c 	.word	0x8800759c
    2404:	7e37e43c 	.word	0x7e37e43c
    2408:	000fffff 	.word	0x000fffff
    240c:	bff00000 	.word	0xbff00000

00002410 <scalbn>:
    2410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2412:	f3c1 530a 	ubfx	r3, r1, #20, #11
    2416:	4604      	mov	r4, r0
    2418:	460d      	mov	r5, r1
    241a:	460e      	mov	r6, r1
    241c:	4617      	mov	r7, r2
    241e:	bb73      	cbnz	r3, 247e <scalbn+0x6e>
    2420:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    2424:	4603      	mov	r3, r0
    2426:	4333      	orrs	r3, r6
    2428:	d028      	beq.n	247c <scalbn+0x6c>
    242a:	4b31      	ldr	r3, [pc, #196]	; (24f0 <scalbn+0xe0>)
    242c:	2200      	movs	r2, #0
    242e:	f7fe f823 	bl	478 <__aeabi_dmul>
    2432:	4b30      	ldr	r3, [pc, #192]	; (24f4 <scalbn+0xe4>)
    2434:	429f      	cmp	r7, r3
    2436:	4604      	mov	r4, r0
    2438:	460d      	mov	r5, r1
    243a:	db1a      	blt.n	2472 <scalbn+0x62>
    243c:	f3c1 530a 	ubfx	r3, r1, #20, #11
    2440:	460e      	mov	r6, r1
    2442:	3b36      	subs	r3, #54	; 0x36
    2444:	443b      	add	r3, r7
    2446:	f240 72fe 	movw	r2, #2046	; 0x7fe
    244a:	4293      	cmp	r3, r2
    244c:	dc20      	bgt.n	2490 <scalbn+0x80>
    244e:	2b00      	cmp	r3, #0
    2450:	dc3c      	bgt.n	24cc <scalbn+0xbc>
    2452:	f113 0f35 	cmn.w	r3, #53	; 0x35
    2456:	da2c      	bge.n	24b2 <scalbn+0xa2>
    2458:	f24c 3350 	movw	r3, #50000	; 0xc350
    245c:	429f      	cmp	r7, r3
    245e:	dc17      	bgt.n	2490 <scalbn+0x80>
    2460:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
    2464:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
    2468:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
    246c:	4822      	ldr	r0, [pc, #136]	; (24f8 <scalbn+0xe8>)
    246e:	f041 011f 	orr.w	r1, r1, #31
    2472:	a31b      	add	r3, pc, #108	; (adr r3, 24e0 <scalbn+0xd0>)
    2474:	e9d3 2300 	ldrd	r2, r3, [r3]
    2478:	f7fd fffe 	bl	478 <__aeabi_dmul>
    247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    247e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2482:	4293      	cmp	r3, r2
    2484:	d1de      	bne.n	2444 <scalbn+0x34>
    2486:	4602      	mov	r2, r0
    2488:	460b      	mov	r3, r1
    248a:	f7fd fe3f 	bl	10c <__adddf3>
    248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2490:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
    2494:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
    2498:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
    249c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
    24a0:	a311      	add	r3, pc, #68	; (adr r3, 24e8 <scalbn+0xd8>)
    24a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    24a6:	4815      	ldr	r0, [pc, #84]	; (24fc <scalbn+0xec>)
    24a8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
    24ac:	f7fd ffe4 	bl	478 <__aeabi_dmul>
    24b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24b2:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
    24b6:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
    24ba:	3336      	adds	r3, #54	; 0x36
    24bc:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
    24c0:	4620      	mov	r0, r4
    24c2:	4b0f      	ldr	r3, [pc, #60]	; (2500 <scalbn+0xf0>)
    24c4:	2200      	movs	r2, #0
    24c6:	f7fd ffd7 	bl	478 <__aeabi_dmul>
    24ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24cc:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
    24d0:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
    24d4:	4620      	mov	r0, r4
    24d6:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
    24da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24dc:	f3af 8000 	nop.w
    24e0:	c2f8f359 	.word	0xc2f8f359
    24e4:	01a56e1f 	.word	0x01a56e1f
    24e8:	8800759c 	.word	0x8800759c
    24ec:	7e37e43c 	.word	0x7e37e43c
    24f0:	43500000 	.word	0x43500000
    24f4:	ffff3cb0 	.word	0xffff3cb0
    24f8:	c2f8f359 	.word	0xc2f8f359
    24fc:	8800759c 	.word	0x8800759c
    2500:	3c900000 	.word	0x3c900000

00002504 <sin_scaled>:
static uint32_t servo_elevation[]	= SERVO_ELEVATION;
static uint32_t servo_rotate[]		= SERVO_ROTATE;
static uint32_t led_4[]				= LED_4;

uint32_t sin_scaled(uint32_t input, uint32_t input_max, uint32_t output_min, uint32_t output_max)
{
    2504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2506:	460f      	mov	r7, r1
    2508:	4614      	mov	r4, r2
    250a:	461e      	mov	r6, r3
    float sin_val = sin((float)input * 2.0f * 3.141592f / (float)input_max);
    250c:	f7fe facc 	bl	aa8 <__aeabi_ui2f>
    2510:	4601      	mov	r1, r0
    2512:	f7fe fa19 	bl	948 <__addsf3>
    2516:	4912      	ldr	r1, [pc, #72]	; (2560 <sin_scaled+0x5c>)
    2518:	f7fe fb1e 	bl	b58 <__aeabi_fmul>
    251c:	4605      	mov	r5, r0
    251e:	4638      	mov	r0, r7
    2520:	f7fe fac2 	bl	aa8 <__aeabi_ui2f>
    2524:	4601      	mov	r1, r0
    2526:	4628      	mov	r0, r5
    2528:	f7fe fbca 	bl	cc0 <__aeabi_fdiv>
    252c:	f7fd ff4c 	bl	3c8 <__aeabi_f2d>
    2530:	f005 f8be 	bl	76b0 <sin>
    2534:	f7fe f9b2 	bl	89c <__aeabi_d2f>
    return (uint32_t)(((sin_val + 1.0f) / 2.0f) * (float)(output_max - output_min)) + output_min; 
    2538:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    253c:	f7fe fa04 	bl	948 <__addsf3>
    2540:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    2544:	f7fe fb08 	bl	b58 <__aeabi_fmul>
    2548:	4605      	mov	r5, r0
    254a:	1b30      	subs	r0, r6, r4
    254c:	f7fe faac 	bl	aa8 <__aeabi_ui2f>
    2550:	4601      	mov	r1, r0
    2552:	4628      	mov	r0, r5
    2554:	f7fe fb00 	bl	b58 <__aeabi_fmul>
    2558:	f7fe fc4e 	bl	df8 <__aeabi_f2uiz>
}
    255c:	4420      	add	r0, r4
    255e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2560:	40490fd8 	.word	0x40490fd8

00002564 <main>:

void main(void)
{
    2564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printk("HELLO??\n");
    2566:	4819      	ldr	r0, [pc, #100]	; (25cc <main+0x68>)
    2568:	f005 f94b 	bl	7802 <printk>

	//Define counter
	uint32_t counter = 0;

	//Initialize timer
	timer_init();
    256c:	f000 f830 	bl	25d0 <timer_init>

	// Initializing servo motors
	servo_init(servo_asimut[0], servo_asimut[1]);
    2570:	210d      	movs	r1, #13
    2572:	2000      	movs	r0, #0
    2574:	f000 f860 	bl	2638 <servo_init>
	servo_init(servo_elevation[0], servo_elevation[1]);
    2578:	210e      	movs	r1, #14
    257a:	2001      	movs	r0, #1
    257c:	f000 f85c 	bl	2638 <servo_init>
	

	//Start timer
	timer_start();
    2580:	f000 f840 	bl	2604 <timer_start>
	uint32_t counter = 0;
    2584:	2500      	movs	r5, #0

	for(;;)
	{
		for (int i = 0; i < 270; i+=27)
    2586:	2700      	movs	r7, #0
    2588:	e01b      	b.n	25c2 <main+0x5e>
		{
			for (int j = i; j <= i+27; j++)
			{
				counter++;
    258a:	3501      	adds	r5, #1
				angle_move_servo(servo_asimut[0], sin_scaled(counter, 270, 0, 270));
    258c:	f44f 7387 	mov.w	r3, #270	; 0x10e
    2590:	2200      	movs	r2, #0
    2592:	4619      	mov	r1, r3
    2594:	4628      	mov	r0, r5
    2596:	f7ff ffb5 	bl	2504 <sin_scaled>
    259a:	4601      	mov	r1, r0
    259c:	2000      	movs	r0, #0
    259e:	f005 f8e3 	bl	7768 <angle_move_servo>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    25a2:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
    25a6:	2100      	movs	r1, #0
    25a8:	f004 fc80 	bl	6eac <z_impl_k_sleep>
			for (int j = i; j <= i+27; j++)
    25ac:	3401      	adds	r4, #1
    25ae:	f107 061b 	add.w	r6, r7, #27
    25b2:	42a6      	cmp	r6, r4
    25b4:	dae9      	bge.n	258a <main+0x26>
    25b6:	f242 6067 	movw	r0, #9831	; 0x2667
    25ba:	2100      	movs	r1, #0
    25bc:	f004 fc76 	bl	6eac <z_impl_k_sleep>
		for (int i = 0; i < 270; i+=27)
    25c0:	4637      	mov	r7, r6
    25c2:	f5b7 7f87 	cmp.w	r7, #270	; 0x10e
    25c6:	dade      	bge.n	2586 <main+0x22>
			for (int j = i; j <= i+27; j++)
    25c8:	463c      	mov	r4, r7
    25ca:	e7f0      	b.n	25ae <main+0x4a>
    25cc:	00008d08 	.word	0x00008d08

000025d0 <timer_init>:

// Timer CC register use to reset the timer.
#define TIMER_RELOAD_CC_NUM 5

void timer_init()
{
    25d0:	b508      	push	{r3, lr}
    NRF_TIMER3->BITMODE                 = TIMER_BITMODE_BITMODE_24Bit << TIMER_BITMODE_BITMODE_Pos;
    25d2:	4b09      	ldr	r3, [pc, #36]	; (25f8 <timer_init+0x28>)
    25d4:	2202      	movs	r2, #2
    25d6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_TIMER3->PRESCALER               = 0;
    25da:	2200      	movs	r2, #0
    25dc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_TIMER3->SHORTS                  = TIMER_SHORTS_COMPARE0_CLEAR_Msk << TIMER_RELOAD_CC_NUM;
    25e0:	2120      	movs	r1, #32
    25e2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    NRF_TIMER3->MODE                    = TIMER_MODE_MODE_Timer << TIMER_MODE_MODE_Pos;
    25e6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_TIMER3->CC[TIMER_RELOAD_CC_NUM] = TIMER_RELOAD;
    25ea:	4a04      	ldr	r2, [pc, #16]	; (25fc <timer_init+0x2c>)
    25ec:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554

    printk("Timer initialized.\n");
    25f0:	4803      	ldr	r0, [pc, #12]	; (2600 <timer_init+0x30>)
    25f2:	f005 f906 	bl	7802 <printk>
}
    25f6:	bd08      	pop	{r3, pc}
    25f8:	4001a000 	.word	0x4001a000
    25fc:	0004e200 	.word	0x0004e200
    2600:	00008d14 	.word	0x00008d14

00002604 <timer_start>:

void timer_start()
{
    2604:	b508      	push	{r3, lr}
    NRF_TIMER3->TASKS_START = 1;
    2606:	4b03      	ldr	r3, [pc, #12]	; (2614 <timer_start+0x10>)
    2608:	2201      	movs	r2, #1
    260a:	601a      	str	r2, [r3, #0]
    
    printk("Timer started.\n");
    260c:	4802      	ldr	r0, [pc, #8]	; (2618 <timer_start+0x14>)
    260e:	f005 f8f8 	bl	7802 <printk>
}
    2612:	bd08      	pop	{r3, pc}
    2614:	4001a000 	.word	0x4001a000
    2618:	00008d28 	.word	0x00008d28

0000261c <convert_to_raw>:

uint32_t convert_to_raw(uint32_t value)
{
    uint32_t angle = 0;
    angle = (value * 32000)/270 + 8000;
    261c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
    2620:	fb03 f000 	mul.w	r0, r3, r0
    2624:	4b03      	ldr	r3, [pc, #12]	; (2634 <convert_to_raw+0x18>)
    2626:	fba3 3000 	umull	r3, r0, r3, r0
    262a:	0a00      	lsrs	r0, r0, #8

    return angle;
}
    262c:	f500 50fa 	add.w	r0, r0, #8000	; 0x1f40
    2630:	4770      	bx	lr
    2632:	bf00      	nop
    2634:	f2b9d649 	.word	0xf2b9d649

00002638 <servo_init>:

void servo_init(uint32_t N, int servo_pin)
{
    if(N>3) {
    2638:	2803      	cmp	r0, #3
    263a:	d853      	bhi.n	26e4 <servo_init+0xac>
{
    263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    263e:	460a      	mov	r2, r1
        return;
    }
    
    NRF_GPIOTE->CONFIG[pwmN_gpiote_ch[N]] = GPIOTE_CONFIG_MODE_Task << GPIOTE_CONFIG_MODE_Pos |
                                            GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos |
                                            servo_pin << GPIOTE_CONFIG_PSEL_Pos |
    2640:	020b      	lsls	r3, r1, #8
    NRF_GPIOTE->CONFIG[pwmN_gpiote_ch[N]] = GPIOTE_CONFIG_MODE_Task << GPIOTE_CONFIG_MODE_Pos |
    2642:	4929      	ldr	r1, [pc, #164]	; (26e8 <servo_init+0xb0>)
    2644:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
                                            servo_pin << GPIOTE_CONFIG_PSEL_Pos |
    2648:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
    264c:	f043 0303 	orr.w	r3, r3, #3
    NRF_GPIOTE->CONFIG[pwmN_gpiote_ch[N]] = GPIOTE_CONFIG_MODE_Task << GPIOTE_CONFIG_MODE_Pos |
    2650:	f505 74a2 	add.w	r4, r5, #324	; 0x144
    2654:	4925      	ldr	r1, [pc, #148]	; (26ec <servo_init+0xb4>)
    2656:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
                                            GPIOTE_CONFIG_OUTINIT_High << GPIOTE_CONFIG_OUTINIT_Pos;
    
    NRF_PPI->CH[pwmN_ppi_ch_a[N]].EEP = (uint32_t)&NRF_TIMER3->EVENTS_COMPARE[pwmN_timer_cc_num[N]];
    265a:	4b25      	ldr	r3, [pc, #148]	; (26f0 <servo_init+0xb8>)
    265c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2660:	4c24      	ldr	r4, [pc, #144]	; (26f4 <servo_init+0xbc>)
    2662:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    2666:	4b24      	ldr	r3, [pc, #144]	; (26f8 <servo_init+0xc0>)
    2668:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    266c:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
    2670:	f103 06a2 	add.w	r6, r3, #162	; 0xa2
    2674:	f841 4036 	str.w	r4, [r1, r6, lsl #3]
    NRF_PPI->CH[pwmN_ppi_ch_a[N]].TEP = (uint32_t)&NRF_GPIOTE->TASKS_CLR[pwmN_gpiote_ch[N]];
    2678:	00af      	lsls	r7, r5, #2
    267a:	4c20      	ldr	r4, [pc, #128]	; (26fc <servo_init+0xc4>)
    267c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    2680:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
    2684:	604c      	str	r4, [r1, #4]
    if((N%2) == 0) {
    2686:	f010 0f01 	tst.w	r0, #1
    268a:	d11f      	bne.n	26cc <servo_init+0x94>
        NRF_PPI->CH[pwmN_ppi_ch_b[N]].EEP = (uint32_t)&NRF_TIMER3->EVENTS_COMPARE[TIMER_RELOAD_CC_NUM];
    268c:	491c      	ldr	r1, [pc, #112]	; (2700 <servo_init+0xc8>)
    268e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
    2692:	491c      	ldr	r1, [pc, #112]	; (2704 <servo_init+0xcc>)
    2694:	34a2      	adds	r4, #162	; 0xa2
    2696:	4d1c      	ldr	r5, [pc, #112]	; (2708 <servo_init+0xd0>)
    2698:	f841 5034 	str.w	r5, [r1, r4, lsl #3]
        NRF_PPI->CH[pwmN_ppi_ch_b[N]].TEP = (uint32_t)&NRF_GPIOTE->TASKS_SET[pwmN_gpiote_ch[N]];
    269c:	f5a5 35a0 	sub.w	r5, r5, #81920	; 0x14000
    26a0:	f5a5 7592 	sub.w	r5, r5, #292	; 0x124
    26a4:	443d      	add	r5, r7
    26a6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    26aa:	604d      	str	r5, [r1, #4]
    } else {
        NRF_PPI->FORK[pwmN_ppi_ch_b[N-1]].TEP = (uint32_t)&NRF_GPIOTE->TASKS_SET[pwmN_gpiote_ch[N]];
    }
    NRF_PPI->CHENSET                      = (1 << pwmN_ppi_ch_a[N]) | (1 << pwmN_ppi_ch_b[N]);
    26ac:	2101      	movs	r1, #1
    26ae:	fa01 f303 	lsl.w	r3, r1, r3
    26b2:	4c13      	ldr	r4, [pc, #76]	; (2700 <servo_init+0xc8>)
    26b4:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
    26b8:	40a1      	lsls	r1, r4
    26ba:	430b      	orrs	r3, r1
    26bc:	4911      	ldr	r1, [pc, #68]	; (2704 <servo_init+0xcc>)
    26be:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504

    printk("Initializing servo %u on pin %i success!\n", N, servo_pin);
    26c2:	4601      	mov	r1, r0
    26c4:	4811      	ldr	r0, [pc, #68]	; (270c <servo_init+0xd4>)
    26c6:	f005 f89c 	bl	7802 <printk>
}
    26ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        NRF_PPI->FORK[pwmN_ppi_ch_b[N-1]].TEP = (uint32_t)&NRF_GPIOTE->TASKS_SET[pwmN_gpiote_ch[N]];
    26cc:	4c10      	ldr	r4, [pc, #64]	; (2710 <servo_init+0xd8>)
    26ce:	443c      	add	r4, r7
    26d0:	1e41      	subs	r1, r0, #1
    26d2:	4d0b      	ldr	r5, [pc, #44]	; (2700 <servo_init+0xc8>)
    26d4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
    26d8:	f501 7111 	add.w	r1, r1, #580	; 0x244
    26dc:	4d09      	ldr	r5, [pc, #36]	; (2704 <servo_init+0xcc>)
    26de:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    26e2:	e7e3      	b.n	26ac <servo_init+0x74>
    26e4:	4770      	bx	lr
    26e6:	bf00      	nop
    26e8:	00008d78 	.word	0x00008d78
    26ec:	40006000 	.word	0x40006000
    26f0:	00008da8 	.word	0x00008da8
    26f4:	4001a140 	.word	0x4001a140
    26f8:	00008d88 	.word	0x00008d88
    26fc:	40006060 	.word	0x40006060
    2700:	00008d98 	.word	0x00008d98
    2704:	4001f000 	.word	0x4001f000
    2708:	4001a154 	.word	0x4001a154
    270c:	00008d38 	.word	0x00008d38
    2710:	40006030 	.word	0x40006030

00002714 <raw_move_servo>:




void raw_move_servo(int N, uint32_t position)
{
    2714:	b508      	push	{r3, lr}
    if (N > 3)
    2716:	2803      	cmp	r0, #3
    2718:	dc05      	bgt.n	2726 <raw_move_servo+0x12>
    {
        printk("Invalid N, %u > 3", N);
        return;
    }
    if (position <= 0)
    271a:	b149      	cbz	r1, 2730 <raw_move_servo+0x1c>
    {
        position = 1;
    } else if (position >= TIMER_RELOAD)
    271c:	4b09      	ldr	r3, [pc, #36]	; (2744 <raw_move_servo+0x30>)
    271e:	4299      	cmp	r1, r3
    2720:	d907      	bls.n	2732 <raw_move_servo+0x1e>
    {
        position = TIMER_RELOAD - 1;
    2722:	4908      	ldr	r1, [pc, #32]	; (2744 <raw_move_servo+0x30>)
    2724:	e005      	b.n	2732 <raw_move_servo+0x1e>
        printk("Invalid N, %u > 3", N);
    2726:	4601      	mov	r1, r0
    2728:	4807      	ldr	r0, [pc, #28]	; (2748 <raw_move_servo+0x34>)
    272a:	f005 f86a 	bl	7802 <printk>
        return;
    272e:	e008      	b.n	2742 <raw_move_servo+0x2e>
        position = 1;
    2730:	2101      	movs	r1, #1
    }
    NRF_TIMER3->CC[pwmN_timer_cc_num[N]] = position;
    2732:	4b06      	ldr	r3, [pc, #24]	; (274c <raw_move_servo+0x38>)
    2734:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2738:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    273c:	4a04      	ldr	r2, [pc, #16]	; (2750 <raw_move_servo+0x3c>)
    273e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    2742:	bd08      	pop	{r3, pc}
    2744:	0004e1ff 	.word	0x0004e1ff
    2748:	00008d64 	.word	0x00008d64
    274c:	00008da8 	.word	0x00008da8
    2750:	4001a000 	.word	0x4001a000

00002754 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2754:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2756:	680b      	ldr	r3, [r1, #0]
    2758:	3301      	adds	r3, #1
    275a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    275c:	4b01      	ldr	r3, [pc, #4]	; (2764 <char_out+0x10>)
    275e:	681b      	ldr	r3, [r3, #0]
    2760:	4798      	blx	r3
}
    2762:	bd08      	pop	{r3, pc}
    2764:	20000000 	.word	0x20000000

00002768 <__printk_hook_install>:
	_char_out = fn;
    2768:	4b01      	ldr	r3, [pc, #4]	; (2770 <__printk_hook_install+0x8>)
    276a:	6018      	str	r0, [r3, #0]
}
    276c:	4770      	bx	lr
    276e:	bf00      	nop
    2770:	20000000 	.word	0x20000000

00002774 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2774:	b500      	push	{lr}
    2776:	b083      	sub	sp, #12
    2778:	4602      	mov	r2, r0
    277a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    277c:	2100      	movs	r1, #0
    277e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2780:	a901      	add	r1, sp, #4
    2782:	4803      	ldr	r0, [pc, #12]	; (2790 <vprintk+0x1c>)
    2784:	f000 f94e 	bl	2a24 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2788:	b003      	add	sp, #12
    278a:	f85d fb04 	ldr.w	pc, [sp], #4
    278e:	bf00      	nop
    2790:	00002755 	.word	0x00002755

00002794 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2794:	b510      	push	{r4, lr}
    2796:	b084      	sub	sp, #16
    2798:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    279a:	9001      	str	r0, [sp, #4]
    279c:	9102      	str	r1, [sp, #8]
    279e:	2100      	movs	r1, #0
    27a0:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    27a2:	a901      	add	r1, sp, #4
    27a4:	4805      	ldr	r0, [pc, #20]	; (27bc <vsnprintk+0x28>)
    27a6:	f000 f93d 	bl	2a24 <cbvprintf>

	if (ctx.count < ctx.max) {
    27aa:	9b03      	ldr	r3, [sp, #12]
    27ac:	9a02      	ldr	r2, [sp, #8]
    27ae:	4293      	cmp	r3, r2
    27b0:	da01      	bge.n	27b6 <vsnprintk+0x22>
		str[ctx.count] = '\0';
    27b2:	2200      	movs	r2, #0
    27b4:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    27b6:	9803      	ldr	r0, [sp, #12]
    27b8:	b004      	add	sp, #16
    27ba:	bd10      	pop	{r4, pc}
    27bc:	000077d3 	.word	0x000077d3

000027c0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    27c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    27c4:	b083      	sub	sp, #12
    27c6:	4604      	mov	r4, r0
    27c8:	4608      	mov	r0, r1
    27ca:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    27cc:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    27ce:	f013 0f08 	tst.w	r3, #8
    27d2:	d105      	bne.n	27e0 <process_event+0x20>
    27d4:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    27d8:	2300      	movs	r3, #0
    27da:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    27dc:	9301      	str	r3, [sp, #4]
}
    27de:	e069      	b.n	28b4 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    27e0:	2901      	cmp	r1, #1
    27e2:	d009      	beq.n	27f8 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    27e4:	f043 0320 	orr.w	r3, r3, #32
    27e8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    27ea:	f385 8811 	msr	BASEPRI, r5
    27ee:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    27f2:	b003      	add	sp, #12
    27f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    27f8:	f043 0310 	orr.w	r3, r3, #16
    27fc:	8323      	strh	r3, [r4, #24]
    27fe:	e7f4      	b.n	27ea <process_event+0x2a>
			evt = process_recheck(mgr);
    2800:	4620      	mov	r0, r4
    2802:	f005 f841 	bl	7888 <process_recheck>
    2806:	e057      	b.n	28b8 <process_event+0xf8>
			res = mgr->last_res;
    2808:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    280c:	464a      	mov	r2, r9
    280e:	4669      	mov	r1, sp
    2810:	4620      	mov	r0, r4
    2812:	f005 f852 	bl	78ba <process_complete>
		onoff_transition_fn transit = NULL;
    2816:	2700      	movs	r7, #0
    2818:	e05a      	b.n	28d0 <process_event+0x110>
			transit = mgr->transitions->start;
    281a:	6923      	ldr	r3, [r4, #16]
    281c:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    281e:	2106      	movs	r1, #6
    2820:	4620      	mov	r0, r4
    2822:	f005 f80a 	bl	783a <set_state>
		res = 0;
    2826:	f04f 0900 	mov.w	r9, #0
    282a:	e051      	b.n	28d0 <process_event+0x110>
			transit = mgr->transitions->stop;
    282c:	6923      	ldr	r3, [r4, #16]
    282e:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    2830:	2104      	movs	r1, #4
    2832:	4620      	mov	r0, r4
    2834:	f005 f801 	bl	783a <set_state>
		res = 0;
    2838:	f04f 0900 	mov.w	r9, #0
    283c:	e048      	b.n	28d0 <process_event+0x110>
			transit = mgr->transitions->reset;
    283e:	6923      	ldr	r3, [r4, #16]
    2840:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    2842:	2105      	movs	r1, #5
    2844:	4620      	mov	r0, r4
    2846:	f004 fff8 	bl	783a <set_state>
		res = 0;
    284a:	f04f 0900 	mov.w	r9, #0
    284e:	e03f      	b.n	28d0 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    2850:	2200      	movs	r2, #0
    2852:	e046      	b.n	28e2 <process_event+0x122>
    2854:	2200      	movs	r2, #0
    2856:	e044      	b.n	28e2 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2858:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    285c:	8323      	strh	r3, [r4, #24]
    285e:	f385 8811 	msr	BASEPRI, r5
    2862:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2866:	2900      	cmp	r1, #0
    2868:	d144      	bne.n	28f4 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    286a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    286c:	b12b      	cbz	r3, 287a <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    286e:	464b      	mov	r3, r9
    2870:	4642      	mov	r2, r8
    2872:	4669      	mov	r1, sp
    2874:	4620      	mov	r0, r4
    2876:	f005 f896 	bl	79a6 <notify_all>
			if (transit != NULL) {
    287a:	b117      	cbz	r7, 2882 <process_event+0xc2>
				transit(mgr, transition_complete);
    287c:	4925      	ldr	r1, [pc, #148]	; (2914 <process_event+0x154>)
    287e:	4620      	mov	r0, r4
    2880:	47b8      	blx	r7
	__asm__ volatile(
    2882:	f04f 0320 	mov.w	r3, #32
    2886:	f3ef 8511 	mrs	r5, BASEPRI
    288a:	f383 8812 	msr	BASEPRI_MAX, r3
    288e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2892:	8b23      	ldrh	r3, [r4, #24]
    2894:	f023 0308 	bic.w	r3, r3, #8
    2898:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    289a:	8b23      	ldrh	r3, [r4, #24]
    289c:	f013 0f10 	tst.w	r3, #16
    28a0:	d02e      	beq.n	2900 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    28a2:	f023 0310 	bic.w	r3, r3, #16
    28a6:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    28a8:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    28aa:	8b26      	ldrh	r6, [r4, #24]
    28ac:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    28b0:	2800      	cmp	r0, #0
    28b2:	d09a      	beq.n	27ea <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    28b4:	2802      	cmp	r0, #2
    28b6:	d0a3      	beq.n	2800 <process_event+0x40>
		if (evt == EVT_NOP) {
    28b8:	2800      	cmp	r0, #0
    28ba:	d096      	beq.n	27ea <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    28bc:	2801      	cmp	r0, #1
    28be:	d0a3      	beq.n	2808 <process_event+0x48>
		} else if (evt == EVT_START) {
    28c0:	2803      	cmp	r0, #3
    28c2:	d0aa      	beq.n	281a <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    28c4:	2804      	cmp	r0, #4
    28c6:	d0b1      	beq.n	282c <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    28c8:	2805      	cmp	r0, #5
    28ca:	d0b8      	beq.n	283e <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    28cc:	2700      	movs	r7, #0
		res = 0;
    28ce:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    28d0:	8b23      	ldrh	r3, [r4, #24]
    28d2:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    28d6:	45b0      	cmp	r8, r6
    28d8:	d0ba      	beq.n	2850 <process_event+0x90>
    28da:	68a2      	ldr	r2, [r4, #8]
    28dc:	2a00      	cmp	r2, #0
    28de:	d0b9      	beq.n	2854 <process_event+0x94>
    28e0:	2201      	movs	r2, #1
		if (do_monitors
    28e2:	4611      	mov	r1, r2
    28e4:	2a00      	cmp	r2, #0
    28e6:	d1b7      	bne.n	2858 <process_event+0x98>
    28e8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    28ea:	2a00      	cmp	r2, #0
    28ec:	d1b4      	bne.n	2858 <process_event+0x98>
		    || (transit != NULL)) {
    28ee:	2f00      	cmp	r7, #0
    28f0:	d1b2      	bne.n	2858 <process_event+0x98>
    28f2:	e7d2      	b.n	289a <process_event+0xda>
				notify_monitors(mgr, state, res);
    28f4:	464a      	mov	r2, r9
    28f6:	4641      	mov	r1, r8
    28f8:	4620      	mov	r0, r4
    28fa:	f004 ffa6 	bl	784a <notify_monitors>
    28fe:	e7b4      	b.n	286a <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2900:	f013 0f20 	tst.w	r3, #32
    2904:	d004      	beq.n	2910 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2906:	f023 0320 	bic.w	r3, r3, #32
    290a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    290c:	2002      	movs	r0, #2
    290e:	e7cc      	b.n	28aa <process_event+0xea>
		evt = EVT_NOP;
    2910:	2000      	movs	r0, #0
    2912:	e7ca      	b.n	28aa <process_event+0xea>
    2914:	000079d5 	.word	0x000079d5

00002918 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    2918:	b410      	push	{r4}
    291a:	4604      	mov	r4, r0
	const char *sp = *str;
    291c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    291e:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    2920:	7813      	ldrb	r3, [r2, #0]
    2922:	4907      	ldr	r1, [pc, #28]	; (2940 <extract_decimal+0x28>)
    2924:	5c59      	ldrb	r1, [r3, r1]
    2926:	f011 0f04 	tst.w	r1, #4
    292a:	d006      	beq.n	293a <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    292c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2930:	3201      	adds	r2, #1
    2932:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2936:	3830      	subs	r0, #48	; 0x30
    2938:	e7f2      	b.n	2920 <extract_decimal+0x8>
	}
	*str = sp;
    293a:	6022      	str	r2, [r4, #0]
	return val;
}
    293c:	bc10      	pop	{r4}
    293e:	4770      	bx	lr
    2940:	00009249 	.word	0x00009249

00002944 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    2944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2948:	b083      	sub	sp, #12
    294a:	4604      	mov	r4, r0
    294c:	460d      	mov	r5, r1
    294e:	9201      	str	r2, [sp, #4]
    2950:	469a      	mov	sl, r3
    2952:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    2956:	78d3      	ldrb	r3, [r2, #3]
    2958:	4a31      	ldr	r2, [pc, #196]	; (2a20 <encode_uint+0xdc>)
    295a:	f813 b002 	ldrb.w	fp, [r3, r2]
    295e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    2962:	2b6f      	cmp	r3, #111	; 0x6f
    2964:	d00f      	beq.n	2986 <encode_uint+0x42>
    2966:	d906      	bls.n	2976 <encode_uint+0x32>
    2968:	2b70      	cmp	r3, #112	; 0x70
    296a:	d00f      	beq.n	298c <encode_uint+0x48>
    296c:	2b78      	cmp	r3, #120	; 0x78
    296e:	d110      	bne.n	2992 <encode_uint+0x4e>
		return 16;
    2970:	f04f 0910 	mov.w	r9, #16
    2974:	e023      	b.n	29be <encode_uint+0x7a>
	switch (specifier) {
    2976:	2b58      	cmp	r3, #88	; 0x58
    2978:	d002      	beq.n	2980 <encode_uint+0x3c>
    297a:	f04f 090a 	mov.w	r9, #10
    297e:	e01e      	b.n	29be <encode_uint+0x7a>
		return 16;
    2980:	f04f 0910 	mov.w	r9, #16
    2984:	e01b      	b.n	29be <encode_uint+0x7a>
		return 8;
    2986:	f04f 0908 	mov.w	r9, #8
    298a:	e018      	b.n	29be <encode_uint+0x7a>
		return 16;
    298c:	f04f 0910 	mov.w	r9, #16
    2990:	e015      	b.n	29be <encode_uint+0x7a>
	switch (specifier) {
    2992:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    2996:	e012      	b.n	29be <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    2998:	b2d2      	uxtb	r2, r2
    299a:	3230      	adds	r2, #48	; 0x30
    299c:	b2d2      	uxtb	r2, r2
    299e:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    29a2:	4632      	mov	r2, r6
    29a4:	463b      	mov	r3, r7
    29a6:	4620      	mov	r0, r4
    29a8:	4629      	mov	r1, r5
    29aa:	f7fe fa45 	bl	e38 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    29ae:	42bd      	cmp	r5, r7
    29b0:	bf08      	it	eq
    29b2:	42b4      	cmpeq	r4, r6
    29b4:	d318      	bcc.n	29e8 <encode_uint+0xa4>
    29b6:	45d0      	cmp	r8, sl
    29b8:	d916      	bls.n	29e8 <encode_uint+0xa4>
		value /= radix;
    29ba:	4604      	mov	r4, r0
    29bc:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    29be:	464e      	mov	r6, r9
    29c0:	2700      	movs	r7, #0
    29c2:	464a      	mov	r2, r9
    29c4:	463b      	mov	r3, r7
    29c6:	4620      	mov	r0, r4
    29c8:	4629      	mov	r1, r5
    29ca:	f7fe fa35 	bl	e38 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    29ce:	2a09      	cmp	r2, #9
    29d0:	d9e2      	bls.n	2998 <encode_uint+0x54>
    29d2:	f1bb 0f01 	cmp.w	fp, #1
    29d6:	d003      	beq.n	29e0 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    29d8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    29da:	3257      	adds	r2, #87	; 0x57
    29dc:	b2d2      	uxtb	r2, r2
    29de:	e7de      	b.n	299e <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    29e0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    29e2:	3237      	adds	r2, #55	; 0x37
    29e4:	b2d2      	uxtb	r2, r2
    29e6:	e7da      	b.n	299e <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    29e8:	9b01      	ldr	r3, [sp, #4]
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	f013 0f20 	tst.w	r3, #32
    29f0:	d005      	beq.n	29fe <encode_uint+0xba>
		if (radix == 8) {
    29f2:	f1b9 0f08 	cmp.w	r9, #8
    29f6:	d006      	beq.n	2a06 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    29f8:	f1b9 0f10 	cmp.w	r9, #16
    29fc:	d009      	beq.n	2a12 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    29fe:	4640      	mov	r0, r8
    2a00:	b003      	add	sp, #12
    2a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    2a06:	9a01      	ldr	r2, [sp, #4]
    2a08:	7893      	ldrb	r3, [r2, #2]
    2a0a:	f043 0308 	orr.w	r3, r3, #8
    2a0e:	7093      	strb	r3, [r2, #2]
    2a10:	e7f5      	b.n	29fe <encode_uint+0xba>
			conv->altform_0c = true;
    2a12:	9a01      	ldr	r2, [sp, #4]
    2a14:	7893      	ldrb	r3, [r2, #2]
    2a16:	f043 0310 	orr.w	r3, r3, #16
    2a1a:	7093      	strb	r3, [r2, #2]
    2a1c:	e7ef      	b.n	29fe <encode_uint+0xba>
    2a1e:	bf00      	nop
    2a20:	00009249 	.word	0x00009249

00002a24 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a28:	b093      	sub	sp, #76	; 0x4c
    2a2a:	4606      	mov	r6, r0
    2a2c:	460d      	mov	r5, r1
    2a2e:	4692      	mov	sl, r2
    2a30:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2a32:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2a34:	f89a 0000 	ldrb.w	r0, [sl]
    2a38:	2800      	cmp	r0, #0
    2a3a:	f000 84d6 	beq.w	33ea <cbvprintf+0x9c6>
		if (*fp != '%') {
    2a3e:	2825      	cmp	r0, #37	; 0x25
    2a40:	d008      	beq.n	2a54 <cbvprintf+0x30>
			OUTC(*fp++);
    2a42:	f10a 0a01 	add.w	sl, sl, #1
    2a46:	4629      	mov	r1, r5
    2a48:	47b0      	blx	r6
    2a4a:	2800      	cmp	r0, #0
    2a4c:	f2c0 84ce 	blt.w	33ec <cbvprintf+0x9c8>
    2a50:	3401      	adds	r4, #1
			continue;
    2a52:	e7ef      	b.n	2a34 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2a54:	2300      	movs	r3, #0
    2a56:	9306      	str	r3, [sp, #24]
    2a58:	9307      	str	r3, [sp, #28]
    2a5a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    2a5c:	9308      	str	r3, [sp, #32]
    2a5e:	9309      	str	r3, [sp, #36]	; 0x24
    2a60:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    2a62:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    2a66:	f89a 3001 	ldrb.w	r3, [sl, #1]
    2a6a:	2b25      	cmp	r3, #37	; 0x25
    2a6c:	d001      	beq.n	2a72 <cbvprintf+0x4e>
	bool loop = true;
    2a6e:	2701      	movs	r7, #1
    2a70:	e02c      	b.n	2acc <cbvprintf+0xa8>
		conv->specifier = *sp++;
    2a72:	f10a 0802 	add.w	r8, sl, #2
    2a76:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    2a7a:	e1a8      	b.n	2dce <cbvprintf+0x3aa>
			conv->flag_dash = true;
    2a7c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2a80:	f043 0304 	orr.w	r3, r3, #4
    2a84:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    2a88:	b1ff      	cbz	r7, 2aca <cbvprintf+0xa6>
			++sp;
    2a8a:	f108 0801 	add.w	r8, r8, #1
    2a8e:	e01c      	b.n	2aca <cbvprintf+0xa6>
			conv->flag_plus = true;
    2a90:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2a94:	f043 0308 	orr.w	r3, r3, #8
    2a98:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2a9c:	e7f4      	b.n	2a88 <cbvprintf+0x64>
			conv->flag_space = true;
    2a9e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2aa2:	f043 0310 	orr.w	r3, r3, #16
    2aa6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2aaa:	e7ed      	b.n	2a88 <cbvprintf+0x64>
			conv->flag_hash = true;
    2aac:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2ab0:	f043 0320 	orr.w	r3, r3, #32
    2ab4:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2ab8:	e7e6      	b.n	2a88 <cbvprintf+0x64>
			conv->flag_zero = true;
    2aba:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2ac2:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2ac6:	e7df      	b.n	2a88 <cbvprintf+0x64>
		switch (*sp) {
    2ac8:	2700      	movs	r7, #0
	} while (loop);
    2aca:	b34f      	cbz	r7, 2b20 <cbvprintf+0xfc>
		switch (*sp) {
    2acc:	f898 3000 	ldrb.w	r3, [r8]
    2ad0:	3b20      	subs	r3, #32
    2ad2:	2b10      	cmp	r3, #16
    2ad4:	d8f8      	bhi.n	2ac8 <cbvprintf+0xa4>
    2ad6:	a201      	add	r2, pc, #4	; (adr r2, 2adc <cbvprintf+0xb8>)
    2ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2adc:	00002a9f 	.word	0x00002a9f
    2ae0:	00002ac9 	.word	0x00002ac9
    2ae4:	00002ac9 	.word	0x00002ac9
    2ae8:	00002aad 	.word	0x00002aad
    2aec:	00002ac9 	.word	0x00002ac9
    2af0:	00002ac9 	.word	0x00002ac9
    2af4:	00002ac9 	.word	0x00002ac9
    2af8:	00002ac9 	.word	0x00002ac9
    2afc:	00002ac9 	.word	0x00002ac9
    2b00:	00002ac9 	.word	0x00002ac9
    2b04:	00002ac9 	.word	0x00002ac9
    2b08:	00002a91 	.word	0x00002a91
    2b0c:	00002ac9 	.word	0x00002ac9
    2b10:	00002a7d 	.word	0x00002a7d
    2b14:	00002ac9 	.word	0x00002ac9
    2b18:	00002ac9 	.word	0x00002ac9
    2b1c:	00002abb 	.word	0x00002abb
	if (conv->flag_zero && conv->flag_dash) {
    2b20:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2b24:	f003 0344 	and.w	r3, r3, #68	; 0x44
    2b28:	2b44      	cmp	r3, #68	; 0x44
    2b2a:	d06d      	beq.n	2c08 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    2b2c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    2b30:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2b38:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    2b3c:	f898 3000 	ldrb.w	r3, [r8]
    2b40:	2b2a      	cmp	r3, #42	; 0x2a
    2b42:	d068      	beq.n	2c16 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    2b44:	a805      	add	r0, sp, #20
    2b46:	f7ff fee7 	bl	2918 <extract_decimal>
	if (sp != wp) {
    2b4a:	9b05      	ldr	r3, [sp, #20]
    2b4c:	4598      	cmp	r8, r3
    2b4e:	d012      	beq.n	2b76 <cbvprintf+0x152>
		conv->width_present = true;
    2b50:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2b58:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    2b5c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    2b5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    2b62:	2800      	cmp	r0, #0
    2b64:	db60      	blt.n	2c28 <cbvprintf+0x204>
    2b66:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    2b68:	4313      	orrs	r3, r2
    2b6a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2b6e:	f363 0241 	bfi	r2, r3, #1, #1
    2b72:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2b76:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    2b78:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    2b7a:	781b      	ldrb	r3, [r3, #0]
    2b7c:	2b2e      	cmp	r3, #46	; 0x2e
    2b7e:	bf14      	ite	ne
    2b80:	2300      	movne	r3, #0
    2b82:	2301      	moveq	r3, #1
    2b84:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2b88:	f363 0241 	bfi	r2, r3, #1, #1
    2b8c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    2b90:	2b00      	cmp	r3, #0
    2b92:	d04b      	beq.n	2c2c <cbvprintf+0x208>
	++sp;
    2b94:	9b05      	ldr	r3, [sp, #20]
    2b96:	1c5a      	adds	r2, r3, #1
    2b98:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    2b9a:	785b      	ldrb	r3, [r3, #1]
    2b9c:	2b2a      	cmp	r3, #42	; 0x2a
    2b9e:	d048      	beq.n	2c32 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    2ba0:	a805      	add	r0, sp, #20
    2ba2:	f7ff feb9 	bl	2918 <extract_decimal>
	conv->prec_value = prec;
    2ba6:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    2ba8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2bac:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    2bb0:	2800      	cmp	r0, #0
    2bb2:	db47      	blt.n	2c44 <cbvprintf+0x220>
    2bb4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2bb6:	4313      	orrs	r3, r2
    2bb8:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2bbc:	f363 0241 	bfi	r2, r3, #1, #1
    2bc0:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2bc4:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    2bc8:	f898 3000 	ldrb.w	r3, [r8]
    2bcc:	3b4c      	subs	r3, #76	; 0x4c
    2bce:	2b2e      	cmp	r3, #46	; 0x2e
    2bd0:	f200 80dc 	bhi.w	2d8c <cbvprintf+0x368>
    2bd4:	e8df f003 	tbb	[pc, r3]
    2bd8:	dadadaca 	.word	0xdadadaca
    2bdc:	dadadada 	.word	0xdadadada
    2be0:	dadadada 	.word	0xdadadada
    2be4:	dadadada 	.word	0xdadadada
    2be8:	dadadada 	.word	0xdadadada
    2bec:	dadadada 	.word	0xdadadada
    2bf0:	dadadada 	.word	0xdadadada
    2bf4:	da6ada38 	.word	0xda6ada38
    2bf8:	dadada51 	.word	0xdadada51
    2bfc:	dadadada 	.word	0xdadadada
    2c00:	dadadac0 	.word	0xdadadac0
    2c04:	dada      	.short	0xdada
    2c06:	b6          	.byte	0xb6
    2c07:	00          	.byte	0x00
		conv->flag_zero = false;
    2c08:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2c0c:	f36f 1386 	bfc	r3, #6, #1
    2c10:	f88d 3020 	strb.w	r3, [sp, #32]
    2c14:	e78a      	b.n	2b2c <cbvprintf+0x108>
		conv->width_star = true;
    2c16:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c1a:	f043 0301 	orr.w	r3, r3, #1
    2c1e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    2c22:	4643      	mov	r3, r8
    2c24:	3301      	adds	r3, #1
    2c26:	e7a7      	b.n	2b78 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    2c28:	2201      	movs	r2, #1
    2c2a:	e79d      	b.n	2b68 <cbvprintf+0x144>
		return sp;
    2c2c:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2c30:	e7ca      	b.n	2bc8 <cbvprintf+0x1a4>
		conv->prec_star = true;
    2c32:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c36:	f043 0304 	orr.w	r3, r3, #4
    2c3a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    2c3e:	f102 0801 	add.w	r8, r2, #1
    2c42:	e7c1      	b.n	2bc8 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    2c44:	2201      	movs	r2, #1
    2c46:	e7b6      	b.n	2bb6 <cbvprintf+0x192>
		if (*++sp == 'h') {
    2c48:	f108 0201 	add.w	r2, r8, #1
    2c4c:	f898 3001 	ldrb.w	r3, [r8, #1]
    2c50:	2b68      	cmp	r3, #104	; 0x68
    2c52:	d008      	beq.n	2c66 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    2c54:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c58:	2102      	movs	r1, #2
    2c5a:	f361 03c6 	bfi	r3, r1, #3, #4
    2c5e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    2c62:	4690      	mov	r8, r2
    2c64:	e02b      	b.n	2cbe <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    2c66:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c6a:	2201      	movs	r2, #1
    2c6c:	f362 03c6 	bfi	r3, r2, #3, #4
    2c70:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    2c74:	f108 0802 	add.w	r8, r8, #2
    2c78:	e021      	b.n	2cbe <cbvprintf+0x29a>
		if (*++sp == 'l') {
    2c7a:	f108 0201 	add.w	r2, r8, #1
    2c7e:	f898 3001 	ldrb.w	r3, [r8, #1]
    2c82:	2b6c      	cmp	r3, #108	; 0x6c
    2c84:	d008      	beq.n	2c98 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    2c86:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c8a:	2103      	movs	r1, #3
    2c8c:	f361 03c6 	bfi	r3, r1, #3, #4
    2c90:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    2c94:	4690      	mov	r8, r2
    2c96:	e012      	b.n	2cbe <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    2c98:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2c9c:	2204      	movs	r2, #4
    2c9e:	f362 03c6 	bfi	r3, r2, #3, #4
    2ca2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    2ca6:	f108 0802 	add.w	r8, r8, #2
    2caa:	e008      	b.n	2cbe <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    2cac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2cb0:	2205      	movs	r2, #5
    2cb2:	f362 03c6 	bfi	r3, r2, #3, #4
    2cb6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2cba:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    2cbe:	f818 3b01 	ldrb.w	r3, [r8], #1
    2cc2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    2cc6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    2cca:	2a37      	cmp	r2, #55	; 0x37
    2ccc:	f200 8150 	bhi.w	2f70 <cbvprintf+0x54c>
    2cd0:	e8df f012 	tbh	[pc, r2, lsl #1]
    2cd4:	014e0126 	.word	0x014e0126
    2cd8:	014e014e 	.word	0x014e014e
    2cdc:	01260126 	.word	0x01260126
    2ce0:	014e0126 	.word	0x014e0126
    2ce4:	014e014e 	.word	0x014e014e
    2ce8:	014e014e 	.word	0x014e014e
    2cec:	014e014e 	.word	0x014e014e
    2cf0:	014e014e 	.word	0x014e014e
    2cf4:	014e014e 	.word	0x014e014e
    2cf8:	014e014e 	.word	0x014e014e
    2cfc:	014e014e 	.word	0x014e014e
    2d00:	0113014e 	.word	0x0113014e
    2d04:	014e014e 	.word	0x014e014e
    2d08:	014e014e 	.word	0x014e014e
    2d0c:	014e014e 	.word	0x014e014e
    2d10:	014e014e 	.word	0x014e014e
    2d14:	014e0126 	.word	0x014e0126
    2d18:	00630113 	.word	0x00630113
    2d1c:	01260126 	.word	0x01260126
    2d20:	014e0126 	.word	0x014e0126
    2d24:	014e0063 	.word	0x014e0063
    2d28:	014e014e 	.word	0x014e014e
    2d2c:	012f014e 	.word	0x012f014e
    2d30:	013f0113 	.word	0x013f0113
    2d34:	014e014e 	.word	0x014e014e
    2d38:	014e013f 	.word	0x014e013f
    2d3c:	014e0113 	.word	0x014e0113
    2d40:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    2d44:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2d48:	2206      	movs	r2, #6
    2d4a:	f362 03c6 	bfi	r3, r2, #3, #4
    2d4e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2d52:	f108 0801 	add.w	r8, r8, #1
		break;
    2d56:	e7b2      	b.n	2cbe <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    2d58:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2d5c:	2207      	movs	r2, #7
    2d5e:	f362 03c6 	bfi	r3, r2, #3, #4
    2d62:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2d66:	f108 0801 	add.w	r8, r8, #1
		break;
    2d6a:	e7a8      	b.n	2cbe <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    2d6c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2d70:	2208      	movs	r2, #8
    2d72:	f362 03c6 	bfi	r3, r2, #3, #4
    2d76:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2d7a:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    2d7e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2d82:	f043 0302 	orr.w	r3, r3, #2
    2d86:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    2d8a:	e798      	b.n	2cbe <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    2d8c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2d90:	f36f 03c6 	bfc	r3, #3, #4
    2d94:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    2d98:	e791      	b.n	2cbe <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    2d9a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    2d9e:	2101      	movs	r1, #1
    2da0:	f361 0202 	bfi	r2, r1, #0, #3
    2da4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    2da8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    2dac:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2db0:	2a40      	cmp	r2, #64	; 0x40
    2db2:	f000 80aa 	beq.w	2f0a <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    2db6:	2b63      	cmp	r3, #99	; 0x63
    2db8:	f000 80ae 	beq.w	2f18 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    2dbc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2dc0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2dc4:	4317      	orrs	r7, r2
    2dc6:	f367 0341 	bfi	r3, r7, #1, #1
    2dca:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2dce:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2dd2:	f013 0f01 	tst.w	r3, #1
    2dd6:	f000 80da 	beq.w	2f8e <cbvprintf+0x56a>
			width = va_arg(ap, int);
    2dda:	9b03      	ldr	r3, [sp, #12]
    2ddc:	1d1a      	adds	r2, r3, #4
    2dde:	9203      	str	r2, [sp, #12]
    2de0:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    2de2:	2f00      	cmp	r7, #0
    2de4:	f2c0 80cb 	blt.w	2f7e <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2de8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2dec:	f013 0f04 	tst.w	r3, #4
    2df0:	f000 80df 	beq.w	2fb2 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    2df4:	9b03      	ldr	r3, [sp, #12]
    2df6:	1d1a      	adds	r2, r3, #4
    2df8:	9203      	str	r2, [sp, #12]
    2dfa:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    2dfe:	f1bb 0f00 	cmp.w	fp, #0
    2e02:	f2c0 80cd 	blt.w	2fa0 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    2e06:	2300      	movs	r3, #0
    2e08:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    2e0a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    2e0c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2e10:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2e14:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    2e18:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    2e1c:	2b01      	cmp	r3, #1
    2e1e:	f000 80d1 	beq.w	2fc4 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    2e22:	2b02      	cmp	r3, #2
    2e24:	f000 8116 	beq.w	3054 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    2e28:	2b04      	cmp	r3, #4
    2e2a:	f000 8167 	beq.w	30fc <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    2e2e:	2b03      	cmp	r3, #3
    2e30:	f000 817e 	beq.w	3130 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    2e34:	f89d 9020 	ldrb.w	r9, [sp, #32]
    2e38:	f019 0303 	ands.w	r3, r9, #3
    2e3c:	9302      	str	r3, [sp, #8]
    2e3e:	f040 817d 	bne.w	313c <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    2e42:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    2e46:	3b25      	subs	r3, #37	; 0x25
    2e48:	2b53      	cmp	r3, #83	; 0x53
    2e4a:	f200 8233 	bhi.w	32b4 <cbvprintf+0x890>
    2e4e:	e8df f013 	tbh	[pc, r3, lsl #1]
    2e52:	0181      	.short	0x0181
    2e54:	02310231 	.word	0x02310231
    2e58:	02310231 	.word	0x02310231
    2e5c:	02310231 	.word	0x02310231
    2e60:	02310231 	.word	0x02310231
    2e64:	02310231 	.word	0x02310231
    2e68:	02310231 	.word	0x02310231
    2e6c:	02310231 	.word	0x02310231
    2e70:	02310231 	.word	0x02310231
    2e74:	02310231 	.word	0x02310231
    2e78:	02310231 	.word	0x02310231
    2e7c:	02310231 	.word	0x02310231
    2e80:	02310231 	.word	0x02310231
    2e84:	02310231 	.word	0x02310231
    2e88:	02310231 	.word	0x02310231
    2e8c:	02310231 	.word	0x02310231
    2e90:	02310231 	.word	0x02310231
    2e94:	02310231 	.word	0x02310231
    2e98:	02310231 	.word	0x02310231
    2e9c:	02310231 	.word	0x02310231
    2ea0:	02310231 	.word	0x02310231
    2ea4:	02310231 	.word	0x02310231
    2ea8:	02310231 	.word	0x02310231
    2eac:	02310231 	.word	0x02310231
    2eb0:	02310231 	.word	0x02310231
    2eb4:	02310231 	.word	0x02310231
    2eb8:	023101c7 	.word	0x023101c7
    2ebc:	02310231 	.word	0x02310231
    2ec0:	02310231 	.word	0x02310231
    2ec4:	02310231 	.word	0x02310231
    2ec8:	02310231 	.word	0x02310231
    2ecc:	01a10231 	.word	0x01a10231
    2ed0:	023101ab 	.word	0x023101ab
    2ed4:	02310231 	.word	0x02310231
    2ed8:	01ab0231 	.word	0x01ab0231
    2edc:	02310231 	.word	0x02310231
    2ee0:	02310231 	.word	0x02310231
    2ee4:	01c70208 	.word	0x01c70208
    2ee8:	023101ea 	.word	0x023101ea
    2eec:	018f0231 	.word	0x018f0231
    2ef0:	01c70231 	.word	0x01c70231
    2ef4:	02310231 	.word	0x02310231
    2ef8:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    2efa:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    2efe:	2102      	movs	r1, #2
    2f00:	f361 0202 	bfi	r2, r1, #0, #3
    2f04:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2f08:	e74e      	b.n	2da8 <cbvprintf+0x384>
			conv->invalid = true;
    2f0a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    2f0e:	f041 0101 	orr.w	r1, r1, #1
    2f12:	f88d 1020 	strb.w	r1, [sp, #32]
    2f16:	e74e      	b.n	2db6 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2f18:	1e17      	subs	r7, r2, #0
    2f1a:	bf18      	it	ne
    2f1c:	2701      	movne	r7, #1
    2f1e:	e74d      	b.n	2dbc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    2f20:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2f24:	2204      	movs	r2, #4
    2f26:	f362 0302 	bfi	r3, r2, #0, #3
    2f2a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    2f2e:	2701      	movs	r7, #1
			break;
    2f30:	e744      	b.n	2dbc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    2f32:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2f36:	2203      	movs	r2, #3
    2f38:	f362 0302 	bfi	r3, r2, #0, #3
    2f3c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    2f40:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2f44:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2f48:	2b40      	cmp	r3, #64	; 0x40
    2f4a:	f47f af37 	bne.w	2dbc <cbvprintf+0x398>
			unsupported = true;
    2f4e:	2701      	movs	r7, #1
    2f50:	e734      	b.n	2dbc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    2f52:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2f56:	2203      	movs	r2, #3
    2f58:	f362 0302 	bfi	r3, r2, #0, #3
    2f5c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    2f60:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2f64:	f013 0f78 	tst.w	r3, #120	; 0x78
    2f68:	f43f af28 	beq.w	2dbc <cbvprintf+0x398>
			unsupported = true;
    2f6c:	2701      	movs	r7, #1
    2f6e:	e725      	b.n	2dbc <cbvprintf+0x398>
		conv->invalid = true;
    2f70:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2f74:	f043 0301 	orr.w	r3, r3, #1
    2f78:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    2f7c:	e71e      	b.n	2dbc <cbvprintf+0x398>
				conv->flag_dash = true;
    2f7e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2f82:	f043 0304 	orr.w	r3, r3, #4
    2f86:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    2f8a:	427f      	negs	r7, r7
    2f8c:	e72c      	b.n	2de8 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    2f8e:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    2f92:	2b00      	cmp	r3, #0
    2f94:	db02      	blt.n	2f9c <cbvprintf+0x578>
		int width = -1;
    2f96:	f04f 37ff 	mov.w	r7, #4294967295
    2f9a:	e725      	b.n	2de8 <cbvprintf+0x3c4>
			width = conv->width_value;
    2f9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2f9e:	e723      	b.n	2de8 <cbvprintf+0x3c4>
				conv->prec_present = false;
    2fa0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2fa4:	f36f 0341 	bfc	r3, #1, #1
    2fa8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    2fac:	f04f 3bff 	mov.w	fp, #4294967295
    2fb0:	e729      	b.n	2e06 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    2fb2:	f013 0f02 	tst.w	r3, #2
    2fb6:	d002      	beq.n	2fbe <cbvprintf+0x59a>
			precision = conv->prec_value;
    2fb8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    2fbc:	e723      	b.n	2e06 <cbvprintf+0x3e2>
		int precision = -1;
    2fbe:	f04f 3bff 	mov.w	fp, #4294967295
    2fc2:	e720      	b.n	2e06 <cbvprintf+0x3e2>
			switch (length_mod) {
    2fc4:	1ecb      	subs	r3, r1, #3
    2fc6:	2b04      	cmp	r3, #4
    2fc8:	d804      	bhi.n	2fd4 <cbvprintf+0x5b0>
    2fca:	e8df f003 	tbb	[pc, r3]
    2fce:	1d0b      	.short	0x1d0b
    2fd0:	3529      	.short	0x3529
    2fd2:	35          	.byte	0x35
    2fd3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2fd4:	9b03      	ldr	r3, [sp, #12]
    2fd6:	1d1a      	adds	r2, r3, #4
    2fd8:	9203      	str	r2, [sp, #12]
    2fda:	681a      	ldr	r2, [r3, #0]
    2fdc:	17d3      	asrs	r3, r2, #31
    2fde:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2fe2:	e006      	b.n	2ff2 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    2fe4:	9b03      	ldr	r3, [sp, #12]
    2fe6:	1d1a      	adds	r2, r3, #4
    2fe8:	9203      	str	r2, [sp, #12]
    2fea:	681a      	ldr	r2, [r3, #0]
    2fec:	17d3      	asrs	r3, r2, #31
    2fee:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    2ff2:	2901      	cmp	r1, #1
    2ff4:	d028      	beq.n	3048 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    2ff6:	2902      	cmp	r1, #2
    2ff8:	f47f af1c 	bne.w	2e34 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    2ffc:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    3000:	17d3      	asrs	r3, r2, #31
    3002:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3006:	e715      	b.n	2e34 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    3008:	9b03      	ldr	r3, [sp, #12]
    300a:	3307      	adds	r3, #7
    300c:	f023 0307 	bic.w	r3, r3, #7
    3010:	f103 0208 	add.w	r2, r3, #8
    3014:	9203      	str	r2, [sp, #12]
    3016:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    301a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    301e:	e7e8      	b.n	2ff2 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    3020:	9b03      	ldr	r3, [sp, #12]
    3022:	3307      	adds	r3, #7
    3024:	f023 0307 	bic.w	r3, r3, #7
    3028:	f103 0208 	add.w	r2, r3, #8
    302c:	9203      	str	r2, [sp, #12]
    302e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3032:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3036:	e7dc      	b.n	2ff2 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3038:	9b03      	ldr	r3, [sp, #12]
    303a:	1d1a      	adds	r2, r3, #4
    303c:	9203      	str	r2, [sp, #12]
    303e:	681a      	ldr	r2, [r3, #0]
    3040:	17d3      	asrs	r3, r2, #31
				value->sint =
    3042:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3046:	e7d4      	b.n	2ff2 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    3048:	f89d 3018 	ldrb.w	r3, [sp, #24]
    304c:	9306      	str	r3, [sp, #24]
    304e:	2300      	movs	r3, #0
    3050:	9307      	str	r3, [sp, #28]
    3052:	e6ef      	b.n	2e34 <cbvprintf+0x410>
			switch (length_mod) {
    3054:	1ecb      	subs	r3, r1, #3
    3056:	2b04      	cmp	r3, #4
    3058:	d804      	bhi.n	3064 <cbvprintf+0x640>
    305a:	e8df f003 	tbb	[pc, r3]
    305e:	1f0b      	.short	0x1f0b
    3060:	4135      	.short	0x4135
    3062:	41          	.byte	0x41
    3063:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    3064:	9b03      	ldr	r3, [sp, #12]
    3066:	1d1a      	adds	r2, r3, #4
    3068:	9203      	str	r2, [sp, #12]
    306a:	681b      	ldr	r3, [r3, #0]
    306c:	9306      	str	r3, [sp, #24]
    306e:	2300      	movs	r3, #0
    3070:	9307      	str	r3, [sp, #28]
				break;
    3072:	e01e      	b.n	30b2 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    3074:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    3078:	2b63      	cmp	r3, #99	; 0x63
    307a:	d007      	beq.n	308c <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    307c:	9b03      	ldr	r3, [sp, #12]
    307e:	1d1a      	adds	r2, r3, #4
    3080:	9203      	str	r2, [sp, #12]
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	9306      	str	r3, [sp, #24]
    3086:	2300      	movs	r3, #0
    3088:	9307      	str	r3, [sp, #28]
    308a:	e012      	b.n	30b2 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    308c:	9b03      	ldr	r3, [sp, #12]
    308e:	1d1a      	adds	r2, r3, #4
    3090:	9203      	str	r2, [sp, #12]
    3092:	681b      	ldr	r3, [r3, #0]
    3094:	9306      	str	r3, [sp, #24]
    3096:	2300      	movs	r3, #0
    3098:	9307      	str	r3, [sp, #28]
    309a:	e00a      	b.n	30b2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    309c:	9b03      	ldr	r3, [sp, #12]
    309e:	3307      	adds	r3, #7
    30a0:	f023 0307 	bic.w	r3, r3, #7
    30a4:	f103 0208 	add.w	r2, r3, #8
    30a8:	9203      	str	r2, [sp, #12]
    30aa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    30ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    30b2:	2901      	cmp	r1, #1
    30b4:	d01c      	beq.n	30f0 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    30b6:	2902      	cmp	r1, #2
    30b8:	f47f aebc 	bne.w	2e34 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    30bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    30c0:	9306      	str	r3, [sp, #24]
    30c2:	2300      	movs	r3, #0
    30c4:	9307      	str	r3, [sp, #28]
    30c6:	e6b5      	b.n	2e34 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    30c8:	9b03      	ldr	r3, [sp, #12]
    30ca:	3307      	adds	r3, #7
    30cc:	f023 0307 	bic.w	r3, r3, #7
    30d0:	f103 0208 	add.w	r2, r3, #8
    30d4:	9203      	str	r2, [sp, #12]
    30d6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    30da:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    30de:	e7e8      	b.n	30b2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    30e0:	9b03      	ldr	r3, [sp, #12]
    30e2:	1d1a      	adds	r2, r3, #4
    30e4:	9203      	str	r2, [sp, #12]
    30e6:	681b      	ldr	r3, [r3, #0]
				value->uint =
    30e8:	9306      	str	r3, [sp, #24]
    30ea:	2300      	movs	r3, #0
    30ec:	9307      	str	r3, [sp, #28]
				break;
    30ee:	e7e0      	b.n	30b2 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    30f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    30f4:	9306      	str	r3, [sp, #24]
    30f6:	2300      	movs	r3, #0
    30f8:	9307      	str	r3, [sp, #28]
    30fa:	e69b      	b.n	2e34 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    30fc:	2908      	cmp	r1, #8
    30fe:	d00b      	beq.n	3118 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    3100:	9b03      	ldr	r3, [sp, #12]
    3102:	3307      	adds	r3, #7
    3104:	f023 0307 	bic.w	r3, r3, #7
    3108:	f103 0208 	add.w	r2, r3, #8
    310c:	9203      	str	r2, [sp, #12]
    310e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3112:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3116:	e68d      	b.n	2e34 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    3118:	9b03      	ldr	r3, [sp, #12]
    311a:	3307      	adds	r3, #7
    311c:	f023 0307 	bic.w	r3, r3, #7
    3120:	f103 0208 	add.w	r2, r3, #8
    3124:	9203      	str	r2, [sp, #12]
    3126:	e9d3 2300 	ldrd	r2, r3, [r3]
    312a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    312e:	e681      	b.n	2e34 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    3130:	9b03      	ldr	r3, [sp, #12]
    3132:	1d1a      	adds	r2, r3, #4
    3134:	9203      	str	r2, [sp, #12]
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	9306      	str	r3, [sp, #24]
    313a:	e67b      	b.n	2e34 <cbvprintf+0x410>
			OUTS(sp, fp);
    313c:	4643      	mov	r3, r8
    313e:	4652      	mov	r2, sl
    3140:	4629      	mov	r1, r5
    3142:	4630      	mov	r0, r6
    3144:	f004 fcd6 	bl	7af4 <outs>
    3148:	2800      	cmp	r0, #0
    314a:	f2c0 814f 	blt.w	33ec <cbvprintf+0x9c8>
    314e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    3150:	46c2      	mov	sl, r8
			continue;
    3152:	e46f      	b.n	2a34 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    3154:	4629      	mov	r1, r5
    3156:	2025      	movs	r0, #37	; 0x25
    3158:	47b0      	blx	r6
    315a:	2800      	cmp	r0, #0
    315c:	f2c0 8146 	blt.w	33ec <cbvprintf+0x9c8>
    3160:	3401      	adds	r4, #1
		char sign = 0;
    3162:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3166:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    316a:	f04f 0a00 	mov.w	sl, #0
			break;
    316e:	e0a7      	b.n	32c0 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    3170:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    3174:	f1bb 0f00 	cmp.w	fp, #0
    3178:	db08      	blt.n	318c <cbvprintf+0x768>
				len = strnlen(bps, precision);
    317a:	4659      	mov	r1, fp
    317c:	4650      	mov	r0, sl
    317e:	f005 fc21 	bl	89c4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    3182:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    3186:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    318a:	e099      	b.n	32c0 <cbvprintf+0x89c>
				len = strlen(bps);
    318c:	4650      	mov	r0, sl
    318e:	f7fe f87d 	bl	128c <strlen>
    3192:	e7f6      	b.n	3182 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3194:	9b06      	ldr	r3, [sp, #24]
    3196:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    319a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    319e:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    31a2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    31a6:	e08b      	b.n	32c0 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    31a8:	f019 0f08 	tst.w	r9, #8
    31ac:	d105      	bne.n	31ba <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    31ae:	f019 0910 	ands.w	r9, r9, #16
    31b2:	d004      	beq.n	31be <cbvprintf+0x79a>
				sign = ' ';
    31b4:	f04f 0920 	mov.w	r9, #32
    31b8:	e001      	b.n	31be <cbvprintf+0x79a>
				sign = '+';
    31ba:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    31be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    31c2:	2a00      	cmp	r2, #0
    31c4:	f173 0100 	sbcs.w	r1, r3, #0
    31c8:	db02      	blt.n	31d0 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    31ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    31ce:	e009      	b.n	31e4 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    31d0:	4252      	negs	r2, r2
    31d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    31d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    31da:	f04f 092d 	mov.w	r9, #45	; 0x2d
    31de:	e001      	b.n	31e4 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    31e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    31e4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    31e8:	9300      	str	r3, [sp, #0]
    31ea:	ab0c      	add	r3, sp, #48	; 0x30
    31ec:	aa08      	add	r2, sp, #32
    31ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    31f2:	f7ff fba7 	bl	2944 <encode_uint>
    31f6:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    31f8:	f1bb 0f00 	cmp.w	fp, #0
    31fc:	f2c0 8090 	blt.w	3320 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    3200:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3204:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    3208:	f89d 2020 	ldrb.w	r2, [sp, #32]
    320c:	f36f 1286 	bfc	r2, #6, #1
    3210:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3214:	459b      	cmp	fp, r3
    3216:	f240 8086 	bls.w	3326 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    321a:	ebab 0303 	sub.w	r3, fp, r3
    321e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    3220:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3224:	e04c      	b.n	32c0 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3226:	9806      	ldr	r0, [sp, #24]
    3228:	b930      	cbnz	r0, 3238 <cbvprintf+0x814>
		char sign = 0;
    322a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    322e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 33f4 <cbvprintf+0x9d0>
			bps = "(nil)";
    3232:	f1ab 0a05 	sub.w	sl, fp, #5
    3236:	e043      	b.n	32c0 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3238:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    323c:	9300      	str	r3, [sp, #0]
    323e:	ab0c      	add	r3, sp, #48	; 0x30
    3240:	aa08      	add	r2, sp, #32
    3242:	2100      	movs	r1, #0
    3244:	f7ff fb7e 	bl	2944 <encode_uint>
    3248:	4682      	mov	sl, r0
				conv->altform_0c = true;
    324a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    324e:	f043 0310 	orr.w	r3, r3, #16
    3252:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    3256:	2378      	movs	r3, #120	; 0x78
    3258:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    325c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    3260:	e7ca      	b.n	31f8 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3262:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    3264:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3268:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    326c:	2b07      	cmp	r3, #7
    326e:	d806      	bhi.n	327e <cbvprintf+0x85a>
    3270:	e8df f003 	tbb	[pc, r3]
    3274:	100e0c04 	.word	0x100e0c04
    3278:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    327c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    327e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3282:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3286:	f04f 0a00 	mov.w	sl, #0
}
    328a:	e019      	b.n	32c0 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    328c:	7014      	strb	r4, [r2, #0]
		break;
    328e:	e7f6      	b.n	327e <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    3290:	8014      	strh	r4, [r2, #0]
		break;
    3292:	e7f4      	b.n	327e <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    3294:	6014      	str	r4, [r2, #0]
		break;
    3296:	e7f2      	b.n	327e <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    3298:	4620      	mov	r0, r4
    329a:	17e1      	asrs	r1, r4, #31
    329c:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    32a0:	e7ed      	b.n	327e <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    32a2:	4620      	mov	r0, r4
    32a4:	17e1      	asrs	r1, r4, #31
    32a6:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    32aa:	e7e8      	b.n	327e <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    32ac:	6014      	str	r4, [r2, #0]
		break;
    32ae:	e7e6      	b.n	327e <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    32b0:	6014      	str	r4, [r2, #0]
		break;
    32b2:	e7e4      	b.n	327e <cbvprintf+0x85a>
		switch (conv->specifier) {
    32b4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    32b8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    32bc:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    32c0:	f1ba 0f00 	cmp.w	sl, #0
    32c4:	f000 808e 	beq.w	33e4 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    32c8:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    32cc:	f1b9 0f00 	cmp.w	r9, #0
    32d0:	d000      	beq.n	32d4 <cbvprintf+0x8b0>
			nj_len += 1U;
    32d2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    32d4:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    32d8:	f011 0f10 	tst.w	r1, #16
    32dc:	d026      	beq.n	332c <cbvprintf+0x908>
			nj_len += 2U;
    32de:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    32e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32e2:	4413      	add	r3, r2
		if (conv->pad_fp) {
    32e4:	f011 0f40 	tst.w	r1, #64	; 0x40
    32e8:	d001      	beq.n	32ee <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    32ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    32ec:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    32ee:	2f00      	cmp	r7, #0
    32f0:	dd32      	ble.n	3358 <cbvprintf+0x934>
			width -= (int)nj_len;
    32f2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    32f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32f8:	f013 0f04 	tst.w	r3, #4
    32fc:	d12c      	bne.n	3358 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    32fe:	f013 0f40 	tst.w	r3, #64	; 0x40
    3302:	d018      	beq.n	3336 <cbvprintf+0x912>
					if (sign != 0) {
    3304:	f1b9 0f00 	cmp.w	r9, #0
    3308:	d018      	beq.n	333c <cbvprintf+0x918>
						OUTC(sign);
    330a:	4629      	mov	r1, r5
    330c:	4648      	mov	r0, r9
    330e:	47b0      	blx	r6
    3310:	2800      	cmp	r0, #0
    3312:	db6b      	blt.n	33ec <cbvprintf+0x9c8>
    3314:	3401      	adds	r4, #1
						sign = 0;
    3316:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    331a:	2330      	movs	r3, #48	; 0x30
    331c:	9302      	str	r3, [sp, #8]
    331e:	e00f      	b.n	3340 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    3320:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3324:	e7cc      	b.n	32c0 <cbvprintf+0x89c>
    3326:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    332a:	e7c9      	b.n	32c0 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    332c:	f011 0f08 	tst.w	r1, #8
    3330:	d0d6      	beq.n	32e0 <cbvprintf+0x8bc>
			nj_len += 1U;
    3332:	3201      	adds	r2, #1
    3334:	e7d4      	b.n	32e0 <cbvprintf+0x8bc>
				char pad = ' ';
    3336:	2320      	movs	r3, #32
    3338:	9302      	str	r3, [sp, #8]
    333a:	e001      	b.n	3340 <cbvprintf+0x91c>
					pad = '0';
    333c:	2330      	movs	r3, #48	; 0x30
    333e:	9302      	str	r3, [sp, #8]
    3340:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3342:	1e5f      	subs	r7, r3, #1
    3344:	2b00      	cmp	r3, #0
    3346:	dd07      	ble.n	3358 <cbvprintf+0x934>
					OUTC(pad);
    3348:	4629      	mov	r1, r5
    334a:	9802      	ldr	r0, [sp, #8]
    334c:	47b0      	blx	r6
    334e:	2800      	cmp	r0, #0
    3350:	db4c      	blt.n	33ec <cbvprintf+0x9c8>
    3352:	3401      	adds	r4, #1
				while (width-- > 0) {
    3354:	463b      	mov	r3, r7
    3356:	e7f4      	b.n	3342 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3358:	f1b9 0f00 	cmp.w	r9, #0
    335c:	d005      	beq.n	336a <cbvprintf+0x946>
			OUTC(sign);
    335e:	4629      	mov	r1, r5
    3360:	4648      	mov	r0, r9
    3362:	47b0      	blx	r6
    3364:	2800      	cmp	r0, #0
    3366:	db41      	blt.n	33ec <cbvprintf+0x9c8>
    3368:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    336a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    336e:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3372:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3376:	4313      	orrs	r3, r2
    3378:	d005      	beq.n	3386 <cbvprintf+0x962>
				OUTC('0');
    337a:	4629      	mov	r1, r5
    337c:	2030      	movs	r0, #48	; 0x30
    337e:	47b0      	blx	r6
    3380:	2800      	cmp	r0, #0
    3382:	db33      	blt.n	33ec <cbvprintf+0x9c8>
    3384:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3386:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    338a:	f013 0f10 	tst.w	r3, #16
    338e:	d006      	beq.n	339e <cbvprintf+0x97a>
				OUTC(conv->specifier);
    3390:	4629      	mov	r1, r5
    3392:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    3396:	47b0      	blx	r6
    3398:	2800      	cmp	r0, #0
    339a:	db27      	blt.n	33ec <cbvprintf+0x9c8>
    339c:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    339e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    33a0:	f103 39ff 	add.w	r9, r3, #4294967295
    33a4:	2b00      	cmp	r3, #0
    33a6:	dd07      	ble.n	33b8 <cbvprintf+0x994>
				OUTC('0');
    33a8:	4629      	mov	r1, r5
    33aa:	2030      	movs	r0, #48	; 0x30
    33ac:	47b0      	blx	r6
    33ae:	2800      	cmp	r0, #0
    33b0:	db1c      	blt.n	33ec <cbvprintf+0x9c8>
    33b2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    33b4:	464b      	mov	r3, r9
    33b6:	e7f3      	b.n	33a0 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    33b8:	465b      	mov	r3, fp
    33ba:	4652      	mov	r2, sl
    33bc:	4629      	mov	r1, r5
    33be:	4630      	mov	r0, r6
    33c0:	f004 fb98 	bl	7af4 <outs>
    33c4:	2800      	cmp	r0, #0
    33c6:	db11      	blt.n	33ec <cbvprintf+0x9c8>
    33c8:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    33ca:	2f00      	cmp	r7, #0
    33cc:	dd07      	ble.n	33de <cbvprintf+0x9ba>
			OUTC(' ');
    33ce:	4629      	mov	r1, r5
    33d0:	2020      	movs	r0, #32
    33d2:	47b0      	blx	r6
    33d4:	2800      	cmp	r0, #0
    33d6:	db09      	blt.n	33ec <cbvprintf+0x9c8>
    33d8:	3401      	adds	r4, #1
			--width;
    33da:	3f01      	subs	r7, #1
    33dc:	e7f5      	b.n	33ca <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    33de:	46c2      	mov	sl, r8
    33e0:	f7ff bb28 	b.w	2a34 <cbvprintf+0x10>
    33e4:	46c2      	mov	sl, r8
    33e6:	f7ff bb25 	b.w	2a34 <cbvprintf+0x10>
		}
	}

	return count;
    33ea:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    33ec:	b013      	add	sp, #76	; 0x4c
    33ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33f2:	bf00      	nop
    33f4:	00008dbd 	.word	0x00008dbd

000033f8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    33f8:	b508      	push	{r3, lr}
    33fa:	f04f 0220 	mov.w	r2, #32
    33fe:	f3ef 8311 	mrs	r3, BASEPRI
    3402:	f382 8812 	msr	BASEPRI_MAX, r2
    3406:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    340a:	f000 fddf 	bl	3fcc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    340e:	4803      	ldr	r0, [pc, #12]	; (341c <sys_reboot+0x24>)
    3410:	f004 f9f7 	bl	7802 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3414:	f000 fa04 	bl	3820 <arch_cpu_idle>
    3418:	e7fc      	b.n	3414 <sys_reboot+0x1c>
    341a:	bf00      	nop
    341c:	00008dc0 	.word	0x00008dc0

00003420 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    3420:	b570      	push	{r4, r5, r6, lr}
    3422:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    3424:	4b2c      	ldr	r3, [pc, #176]	; (34d8 <pm_system_resume+0xb8>)
    3426:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3428:	f004 031f 	and.w	r3, r4, #31
    342c:	2201      	movs	r2, #1
    342e:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3430:	0961      	lsrs	r1, r4, #5
    3432:	4b2a      	ldr	r3, [pc, #168]	; (34dc <pm_system_resume+0xbc>)
    3434:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3438:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    343a:	f3bf 8f5b 	dmb	ish
    343e:	e853 1f00 	ldrex	r1, [r3]
    3442:	ea01 0500 	and.w	r5, r1, r0
    3446:	e843 5600 	strex	r6, r5, [r3]
    344a:	2e00      	cmp	r6, #0
    344c:	d1f7      	bne.n	343e <pm_system_resume+0x1e>
    344e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3452:	420a      	tst	r2, r1
    3454:	d03d      	beq.n	34d2 <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
    3456:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    345a:	009a      	lsls	r2, r3, #2
    345c:	4b20      	ldr	r3, [pc, #128]	; (34e0 <pm_system_resume+0xc0>)
    345e:	4413      	add	r3, r2
    3460:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3464:	ab04      	add	r3, sp, #16
    3466:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    346a:	4b1e      	ldr	r3, [pc, #120]	; (34e4 <pm_system_resume+0xc4>)
    346c:	b163      	cbz	r3, 3488 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
    346e:	f004 fc26 	bl	7cbe <pm_power_state_exit_post_ops>
    3472:	f04f 0320 	mov.w	r3, #32
    3476:	f3ef 8611 	mrs	r6, BASEPRI
    347a:	f383 8812 	msr	BASEPRI_MAX, r3
    347e:	f3bf 8f6f 	isb	sy
    3482:	4b19      	ldr	r3, [pc, #100]	; (34e8 <pm_system_resume+0xc8>)
    3484:	681d      	ldr	r5, [r3, #0]
    3486:	e00a      	b.n	349e <pm_system_resume+0x7e>
	__asm__ volatile(
    3488:	2300      	movs	r3, #0
    348a:	f383 8811 	msr	BASEPRI, r3
    348e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3492:	e7ee      	b.n	3472 <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3494:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3496:	b10d      	cbz	r5, 349c <pm_system_resume+0x7c>
	return node->next;
    3498:	682b      	ldr	r3, [r5, #0]
    349a:	b16b      	cbz	r3, 34b8 <pm_system_resume+0x98>
{
    349c:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    349e:	b15d      	cbz	r5, 34b8 <pm_system_resume+0x98>
			callback = notifier->state_exit;
    34a0:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    34a2:	2a00      	cmp	r2, #0
    34a4:	d0f6      	beq.n	3494 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
    34a6:	4b0c      	ldr	r3, [pc, #48]	; (34d8 <pm_system_resume+0xb8>)
    34a8:	7d1b      	ldrb	r3, [r3, #20]
    34aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    34ae:	0099      	lsls	r1, r3, #2
    34b0:	4b0b      	ldr	r3, [pc, #44]	; (34e0 <pm_system_resume+0xc0>)
    34b2:	5c58      	ldrb	r0, [r3, r1]
    34b4:	4790      	blx	r2
    34b6:	e7ed      	b.n	3494 <pm_system_resume+0x74>
	__asm__ volatile(
    34b8:	f386 8811 	msr	BASEPRI, r6
    34bc:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    34c0:	4807      	ldr	r0, [pc, #28]	; (34e0 <pm_system_resume+0xc0>)
    34c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    34c6:	00a2      	lsls	r2, r4, #2
    34c8:	1881      	adds	r1, r0, r2
    34ca:	2300      	movs	r3, #0
    34cc:	5083      	str	r3, [r0, r2]
    34ce:	604b      	str	r3, [r1, #4]
    34d0:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    34d2:	b004      	add	sp, #16
    34d4:	bd70      	pop	{r4, r5, r6, pc}
    34d6:	bf00      	nop
    34d8:	20000e8c 	.word	0x20000e8c
    34dc:	20000400 	.word	0x20000400
    34e0:	20000404 	.word	0x20000404
    34e4:	00007cbf 	.word	0x00007cbf
    34e8:	200003f8 	.word	0x200003f8

000034ec <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    34ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ee:	b089      	sub	sp, #36	; 0x24
    34f0:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    34f2:	4b55      	ldr	r3, [pc, #340]	; (3648 <pm_system_suspend+0x15c>)
    34f4:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    34f6:	f004 031f 	and.w	r3, r4, #31
    34fa:	2201      	movs	r2, #1
    34fc:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    34fe:	0961      	lsrs	r1, r4, #5
    3500:	4b52      	ldr	r3, [pc, #328]	; (364c <pm_system_suspend+0x160>)
    3502:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3506:	f3bf 8f5b 	dmb	ish
    350a:	e853 1f00 	ldrex	r1, [r3]
    350e:	ea41 0002 	orr.w	r0, r1, r2
    3512:	e843 0600 	strex	r6, r0, [r3]
    3516:	2e00      	cmp	r6, #0
    3518:	d1f7      	bne.n	350a <pm_system_suspend+0x1e>
    351a:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    351e:	420a      	tst	r2, r1
    3520:	d017      	beq.n	3552 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    3522:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3526:	4a4a      	ldr	r2, [pc, #296]	; (3650 <pm_system_suspend+0x164>)
    3528:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    352c:	2b00      	cmp	r3, #0
    352e:	f000 8088 	beq.w	3642 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    3532:	f1b5 3fff 	cmp.w	r5, #4294967295
    3536:	d11c      	bne.n	3572 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3538:	f003 f9a6 	bl	6888 <k_sched_lock>
	__asm__ volatile(
    353c:	f04f 0320 	mov.w	r3, #32
    3540:	f3ef 8611 	mrs	r6, BASEPRI
    3544:	f383 8812 	msr	BASEPRI_MAX, r3
    3548:	f3bf 8f6f 	isb	sy
	return list->head;
    354c:	4b41      	ldr	r3, [pc, #260]	; (3654 <pm_system_suspend+0x168>)
    354e:	681d      	ldr	r5, [r3, #0]
    3550:	e02a      	b.n	35a8 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    3552:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    3556:	4b3e      	ldr	r3, [pc, #248]	; (3650 <pm_system_suspend+0x164>)
    3558:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    355c:	466f      	mov	r7, sp
    355e:	462a      	mov	r2, r5
    3560:	4621      	mov	r1, r4
    3562:	4638      	mov	r0, r7
    3564:	f004 fae1 	bl	7b2a <pm_policy_next_state>
    3568:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    356c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    3570:	e7d7      	b.n	3522 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    3572:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3576:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    357a:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    357c:	0c59      	lsrs	r1, r3, #17
    357e:	03d8      	lsls	r0, r3, #15
    3580:	4e35      	ldr	r6, [pc, #212]	; (3658 <pm_system_suspend+0x16c>)
    3582:	4a36      	ldr	r2, [pc, #216]	; (365c <pm_system_suspend+0x170>)
    3584:	2300      	movs	r3, #0
    3586:	1980      	adds	r0, r0, r6
    3588:	f04f 0600 	mov.w	r6, #0
    358c:	eb46 0101 	adc.w	r1, r6, r1
    3590:	f7fd fc52 	bl	e38 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3594:	2101      	movs	r1, #1
    3596:	1a28      	subs	r0, r5, r0
    3598:	f005 f9b5 	bl	8906 <z_set_timeout_expiry>
    359c:	e7cc      	b.n	3538 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    359e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    35a0:	b10d      	cbz	r5, 35a6 <pm_system_suspend+0xba>
	return node->next;
    35a2:	682b      	ldr	r3, [r5, #0]
    35a4:	b16b      	cbz	r3, 35c2 <pm_system_suspend+0xd6>
{
    35a6:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    35a8:	b15d      	cbz	r5, 35c2 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    35aa:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    35ac:	2a00      	cmp	r2, #0
    35ae:	d0f6      	beq.n	359e <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    35b0:	4b25      	ldr	r3, [pc, #148]	; (3648 <pm_system_suspend+0x15c>)
    35b2:	7d1b      	ldrb	r3, [r3, #20]
    35b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    35b8:	4925      	ldr	r1, [pc, #148]	; (3650 <pm_system_suspend+0x164>)
    35ba:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    35be:	4790      	blx	r2
    35c0:	e7ed      	b.n	359e <pm_system_suspend+0xb2>
	__asm__ volatile(
    35c2:	f386 8811 	msr	BASEPRI, r6
    35c6:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    35ca:	f004 031f 	and.w	r3, r4, #31
    35ce:	2101      	movs	r1, #1
    35d0:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    35d2:	0963      	lsrs	r3, r4, #5
    35d4:	4a22      	ldr	r2, [pc, #136]	; (3660 <pm_system_suspend+0x174>)
    35d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    35da:	f3bf 8f5b 	dmb	ish
    35de:	e853 2f00 	ldrex	r2, [r3]
    35e2:	430a      	orrs	r2, r1
    35e4:	e843 2000 	strex	r0, r2, [r3]
    35e8:	2800      	cmp	r0, #0
    35ea:	d1f8      	bne.n	35de <pm_system_suspend+0xf2>
    35ec:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    35f0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    35f4:	4a16      	ldr	r2, [pc, #88]	; (3650 <pm_system_suspend+0x164>)
    35f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    35fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    35fe:	ab08      	add	r3, sp, #32
    3600:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3604:	4b17      	ldr	r3, [pc, #92]	; (3664 <pm_system_suspend+0x178>)
    3606:	b10b      	cbz	r3, 360c <pm_system_suspend+0x120>
		pm_power_state_set(info);
    3608:	f004 fb46 	bl	7c98 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    360c:	f7ff ff08 	bl	3420 <pm_system_resume>
	k_sched_unlock();
    3610:	f003 fb38 	bl	6c84 <k_sched_unlock>
	bool ret = true;
    3614:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    3616:	f004 021f 	and.w	r2, r4, #31
    361a:	2301      	movs	r3, #1
    361c:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    361e:	0964      	lsrs	r4, r4, #5
    3620:	4a0a      	ldr	r2, [pc, #40]	; (364c <pm_system_suspend+0x160>)
    3622:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    3626:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3628:	f3bf 8f5b 	dmb	ish
    362c:	e854 2f00 	ldrex	r2, [r4]
    3630:	401a      	ands	r2, r3
    3632:	e844 2100 	strex	r1, r2, [r4]
    3636:	2900      	cmp	r1, #0
    3638:	d1f8      	bne.n	362c <pm_system_suspend+0x140>
    363a:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    363e:	b009      	add	sp, #36	; 0x24
    3640:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    3642:	2000      	movs	r0, #0
    3644:	e7e7      	b.n	3616 <pm_system_suspend+0x12a>
    3646:	bf00      	nop
    3648:	20000e8c 	.word	0x20000e8c
    364c:	20000410 	.word	0x20000410
    3650:	20000404 	.word	0x20000404
    3654:	200003f8 	.word	0x200003f8
    3658:	000f423f 	.word	0x000f423f
    365c:	000f4240 	.word	0x000f4240
    3660:	20000400 	.word	0x20000400
    3664:	00007c99 	.word	0x00007c99

00003668 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3668:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    366a:	4802      	ldr	r0, [pc, #8]	; (3674 <nrf_cc3xx_platform_abort_init+0xc>)
    366c:	f003 fe8e 	bl	738c <nrf_cc3xx_platform_set_abort>
}
    3670:	bd08      	pop	{r3, pc}
    3672:	bf00      	nop
    3674:	00008dec 	.word	0x00008dec

00003678 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3678:	b1d0      	cbz	r0, 36b0 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    367a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    367c:	6842      	ldr	r2, [r0, #4]
    367e:	2a04      	cmp	r2, #4
    3680:	d005      	beq.n	368e <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3682:	b1d2      	cbz	r2, 36ba <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3684:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3686:	f002 fefd 	bl	6484 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    368a:	2000      	movs	r0, #0
    }
}
    368c:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    368e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3690:	2200      	movs	r2, #0
    3692:	f3bf 8f5b 	dmb	ish
    3696:	e853 1f00 	ldrex	r1, [r3]
    369a:	2901      	cmp	r1, #1
    369c:	d103      	bne.n	36a6 <mutex_unlock_platform+0x2e>
    369e:	e843 2000 	strex	r0, r2, [r3]
    36a2:	2800      	cmp	r0, #0
    36a4:	d1f7      	bne.n	3696 <mutex_unlock_platform+0x1e>
    36a6:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    36aa:	d104      	bne.n	36b6 <mutex_unlock_platform+0x3e>
    36ac:	4610      	mov	r0, r2
    36ae:	e7ed      	b.n	368c <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    36b0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    36b4:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    36b6:	4802      	ldr	r0, [pc, #8]	; (36c0 <mutex_unlock_platform+0x48>)
    36b8:	e7e8      	b.n	368c <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    36ba:	4802      	ldr	r0, [pc, #8]	; (36c4 <mutex_unlock_platform+0x4c>)
    36bc:	e7e6      	b.n	368c <mutex_unlock_platform+0x14>
    36be:	bf00      	nop
    36c0:	ffff8fe9 	.word	0xffff8fe9
    36c4:	ffff8fea 	.word	0xffff8fea

000036c8 <mutex_lock_platform>:
    if(mutex == NULL) {
    36c8:	b320      	cbz	r0, 3714 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    36ca:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    36cc:	6842      	ldr	r2, [r0, #4]
    36ce:	2a04      	cmp	r2, #4
    36d0:	d002      	beq.n	36d8 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    36d2:	b992      	cbnz	r2, 36fa <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    36d4:	4811      	ldr	r0, [pc, #68]	; (371c <mutex_lock_platform+0x54>)
    36d6:	e00f      	b.n	36f8 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    36d8:	6803      	ldr	r3, [r0, #0]
    36da:	2201      	movs	r2, #1
    36dc:	f3bf 8f5b 	dmb	ish
    36e0:	e853 1f00 	ldrex	r1, [r3]
    36e4:	2900      	cmp	r1, #0
    36e6:	d103      	bne.n	36f0 <mutex_lock_platform+0x28>
    36e8:	e843 2000 	strex	r0, r2, [r3]
    36ec:	2800      	cmp	r0, #0
    36ee:	d1f7      	bne.n	36e0 <mutex_lock_platform+0x18>
    36f0:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    36f4:	d10c      	bne.n	3710 <mutex_lock_platform+0x48>
    36f6:	2000      	movs	r0, #0
}
    36f8:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    36fa:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    36fc:	f04f 32ff 	mov.w	r2, #4294967295
    3700:	f04f 33ff 	mov.w	r3, #4294967295
    3704:	f002 fe34 	bl	6370 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3708:	2800      	cmp	r0, #0
    370a:	d0f5      	beq.n	36f8 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    370c:	4804      	ldr	r0, [pc, #16]	; (3720 <mutex_lock_platform+0x58>)
    370e:	e7f3      	b.n	36f8 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3710:	4803      	ldr	r0, [pc, #12]	; (3720 <mutex_lock_platform+0x58>)
    3712:	e7f1      	b.n	36f8 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3714:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3718:	4770      	bx	lr
    371a:	bf00      	nop
    371c:	ffff8fea 	.word	0xffff8fea
    3720:	ffff8fe9 	.word	0xffff8fe9

00003724 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3724:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3726:	4604      	mov	r4, r0
    3728:	b190      	cbz	r0, 3750 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    372a:	6863      	ldr	r3, [r4, #4]
    372c:	2b04      	cmp	r3, #4
    372e:	d00e      	beq.n	374e <mutex_free_platform+0x2a>
    3730:	2b08      	cmp	r3, #8
    3732:	d00c      	beq.n	374e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3734:	b15b      	cbz	r3, 374e <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3736:	f013 0f02 	tst.w	r3, #2
    373a:	d10e      	bne.n	375a <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    373c:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    373e:	2200      	movs	r2, #0
    3740:	601a      	str	r2, [r3, #0]
    3742:	605a      	str	r2, [r3, #4]
    3744:	609a      	str	r2, [r3, #8]
    3746:	60da      	str	r2, [r3, #12]
    3748:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    374a:	2300      	movs	r3, #0
    374c:	6063      	str	r3, [r4, #4]
}
    374e:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3750:	4b05      	ldr	r3, [pc, #20]	; (3768 <mutex_free_platform+0x44>)
    3752:	685b      	ldr	r3, [r3, #4]
    3754:	4805      	ldr	r0, [pc, #20]	; (376c <mutex_free_platform+0x48>)
    3756:	4798      	blx	r3
    3758:	e7e7      	b.n	372a <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    375a:	4621      	mov	r1, r4
    375c:	4804      	ldr	r0, [pc, #16]	; (3770 <mutex_free_platform+0x4c>)
    375e:	f004 febc 	bl	84da <k_mem_slab_free>
        mutex->mutex = NULL;
    3762:	2300      	movs	r3, #0
    3764:	6023      	str	r3, [r4, #0]
    3766:	e7f0      	b.n	374a <mutex_free_platform+0x26>
    3768:	200000dc 	.word	0x200000dc
    376c:	00008df4 	.word	0x00008df4
    3770:	20000414 	.word	0x20000414

00003774 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3774:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3776:	4604      	mov	r4, r0
    3778:	b178      	cbz	r0, 379a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    377a:	6863      	ldr	r3, [r4, #4]
    377c:	2b04      	cmp	r3, #4
    377e:	d00b      	beq.n	3798 <mutex_init_platform+0x24>
    3780:	2b08      	cmp	r3, #8
    3782:	d009      	beq.n	3798 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3784:	b90b      	cbnz	r3, 378a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3786:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3788:	b163      	cbz	r3, 37a4 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    378a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    378c:	f004 ff36 	bl	85fc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3790:	6863      	ldr	r3, [r4, #4]
    3792:	f043 0301 	orr.w	r3, r3, #1
    3796:	6063      	str	r3, [r4, #4]
}
    3798:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    379a:	4b10      	ldr	r3, [pc, #64]	; (37dc <mutex_init_platform+0x68>)
    379c:	685b      	ldr	r3, [r3, #4]
    379e:	4810      	ldr	r0, [pc, #64]	; (37e0 <mutex_init_platform+0x6c>)
    37a0:	4798      	blx	r3
    37a2:	e7ea      	b.n	377a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    37a4:	f04f 32ff 	mov.w	r2, #4294967295
    37a8:	f04f 33ff 	mov.w	r3, #4294967295
    37ac:	4621      	mov	r1, r4
    37ae:	480d      	ldr	r0, [pc, #52]	; (37e4 <mutex_init_platform+0x70>)
    37b0:	f002 fc9a 	bl	60e8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    37b4:	b908      	cbnz	r0, 37ba <mutex_init_platform+0x46>
    37b6:	6823      	ldr	r3, [r4, #0]
    37b8:	b91b      	cbnz	r3, 37c2 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    37ba:	4b08      	ldr	r3, [pc, #32]	; (37dc <mutex_init_platform+0x68>)
    37bc:	685b      	ldr	r3, [r3, #4]
    37be:	480a      	ldr	r0, [pc, #40]	; (37e8 <mutex_init_platform+0x74>)
    37c0:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    37c2:	6823      	ldr	r3, [r4, #0]
    37c4:	2200      	movs	r2, #0
    37c6:	601a      	str	r2, [r3, #0]
    37c8:	605a      	str	r2, [r3, #4]
    37ca:	609a      	str	r2, [r3, #8]
    37cc:	60da      	str	r2, [r3, #12]
    37ce:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    37d0:	6863      	ldr	r3, [r4, #4]
    37d2:	f043 0302 	orr.w	r3, r3, #2
    37d6:	6063      	str	r3, [r4, #4]
    37d8:	e7d7      	b.n	378a <mutex_init_platform+0x16>
    37da:	bf00      	nop
    37dc:	200000dc 	.word	0x200000dc
    37e0:	00008df4 	.word	0x00008df4
    37e4:	20000414 	.word	0x20000414
    37e8:	00008e1c 	.word	0x00008e1c

000037ec <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    37ec:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    37ee:	2340      	movs	r3, #64	; 0x40
    37f0:	2214      	movs	r2, #20
    37f2:	4904      	ldr	r1, [pc, #16]	; (3804 <nrf_cc3xx_platform_mutex_init+0x18>)
    37f4:	4804      	ldr	r0, [pc, #16]	; (3808 <nrf_cc3xx_platform_mutex_init+0x1c>)
    37f6:	f004 fe62 	bl	84be <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    37fa:	4904      	ldr	r1, [pc, #16]	; (380c <nrf_cc3xx_platform_mutex_init+0x20>)
    37fc:	4804      	ldr	r0, [pc, #16]	; (3810 <nrf_cc3xx_platform_mutex_init+0x24>)
    37fe:	f003 fe27 	bl	7450 <nrf_cc3xx_platform_set_mutexes>
}
    3802:	bd08      	pop	{r3, pc}
    3804:	20000430 	.word	0x20000430
    3808:	20000414 	.word	0x20000414
    380c:	00008e5c 	.word	0x00008e5c
    3810:	00008e4c 	.word	0x00008e4c

00003814 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3814:	4901      	ldr	r1, [pc, #4]	; (381c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3816:	2210      	movs	r2, #16
	str	r2, [r1]
    3818:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    381a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    381c:	e000ed10 	.word	0xe000ed10

00003820 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3820:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3822:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3824:	f380 8811 	msr	BASEPRI, r0
	isb
    3828:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    382c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3830:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3832:	b662      	cpsie	i
	isb
    3834:	f3bf 8f6f 	isb	sy

	bx	lr
    3838:	4770      	bx	lr
    383a:	bf00      	nop

0000383c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    383c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    383e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3840:	f381 8811 	msr	BASEPRI, r1

	wfe
    3844:	bf20      	wfe

	msr	BASEPRI, r0
    3846:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    384a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    384c:	4770      	bx	lr
    384e:	bf00      	nop

00003850 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3850:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3852:	2b00      	cmp	r3, #0
    3854:	db08      	blt.n	3868 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3856:	f000 001f 	and.w	r0, r0, #31
    385a:	095b      	lsrs	r3, r3, #5
    385c:	2201      	movs	r2, #1
    385e:	fa02 f000 	lsl.w	r0, r2, r0
    3862:	4a02      	ldr	r2, [pc, #8]	; (386c <arch_irq_enable+0x1c>)
    3864:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3868:	4770      	bx	lr
    386a:	bf00      	nop
    386c:	e000e100 	.word	0xe000e100

00003870 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3870:	0942      	lsrs	r2, r0, #5
    3872:	4b05      	ldr	r3, [pc, #20]	; (3888 <arch_irq_is_enabled+0x18>)
    3874:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3878:	f000 001f 	and.w	r0, r0, #31
    387c:	2301      	movs	r3, #1
    387e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3882:	4010      	ands	r0, r2
    3884:	4770      	bx	lr
    3886:	bf00      	nop
    3888:	e000e100 	.word	0xe000e100

0000388c <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    388c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    388e:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3890:	2b00      	cmp	r3, #0
    3892:	db08      	blt.n	38a6 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3894:	0149      	lsls	r1, r1, #5
    3896:	b2c9      	uxtb	r1, r1
    3898:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    389c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    38a0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    38a4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38a6:	f000 000f 	and.w	r0, r0, #15
    38aa:	0149      	lsls	r1, r1, #5
    38ac:	b2c9      	uxtb	r1, r1
    38ae:	4b01      	ldr	r3, [pc, #4]	; (38b4 <z_arm_irq_priority_set+0x28>)
    38b0:	5419      	strb	r1, [r3, r0]
}
    38b2:	4770      	bx	lr
    38b4:	e000ed14 	.word	0xe000ed14

000038b8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    38b8:	bf30      	wfi
    b z_SysNmiOnReset
    38ba:	f7ff bffd 	b.w	38b8 <z_SysNmiOnReset>
    38be:	bf00      	nop

000038c0 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    38c0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    38c2:	4b0b      	ldr	r3, [pc, #44]	; (38f0 <z_arm_prep_c+0x30>)
    38c4:	4a0b      	ldr	r2, [pc, #44]	; (38f4 <z_arm_prep_c+0x34>)
    38c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    38ca:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    38cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    38d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    38d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    38dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    38e0:	f002 fba2 	bl	6028 <z_bss_zero>
	z_data_copy();
    38e4:	f003 fb4e 	bl	6f84 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    38e8:	f000 fa18 	bl	3d1c <z_arm_interrupt_init>
	z_cstart();
    38ec:	f002 fba8 	bl	6040 <z_cstart>
    38f0:	e000ed00 	.word	0xe000ed00
    38f4:	00000000 	.word	0x00000000

000038f8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    38f8:	4a0a      	ldr	r2, [pc, #40]	; (3924 <arch_swap+0x2c>)
    38fa:	6893      	ldr	r3, [r2, #8]
    38fc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3900:	4909      	ldr	r1, [pc, #36]	; (3928 <arch_swap+0x30>)
    3902:	6809      	ldr	r1, [r1, #0]
    3904:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3908:	4908      	ldr	r1, [pc, #32]	; (392c <arch_swap+0x34>)
    390a:	684b      	ldr	r3, [r1, #4]
    390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3910:	604b      	str	r3, [r1, #4]
    3912:	2300      	movs	r3, #0
    3914:	f383 8811 	msr	BASEPRI, r3
    3918:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    391c:	6893      	ldr	r3, [r2, #8]
}
    391e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    3922:	4770      	bx	lr
    3924:	20000e8c 	.word	0x20000e8c
    3928:	00008fcc 	.word	0x00008fcc
    392c:	e000ed00 	.word	0xe000ed00

00003930 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3930:	4913      	ldr	r1, [pc, #76]	; (3980 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3932:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3934:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3938:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    393a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    393e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3942:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3944:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3948:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    394c:	4f0d      	ldr	r7, [pc, #52]	; (3984 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    394e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3952:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3954:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3956:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3958:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    395c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    395e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3962:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3966:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3968:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    396a:	f000 fa79 	bl	3e60 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    396e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3972:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3976:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    397a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    397e:	4770      	bx	lr
    ldr r1, =_kernel
    3980:	20000e8c 	.word	0x20000e8c
    ldr v4, =_SCS_ICSR
    3984:	e000ed04 	.word	0xe000ed04

00003988 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3988:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    398c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    398e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3992:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3996:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3998:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    399c:	2902      	cmp	r1, #2
    beq _oops
    399e:	d0ff      	beq.n	39a0 <_oops>

000039a0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    39a0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    39a2:	f004 f8cf 	bl	7b44 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    39a6:	bd01      	pop	{r0, pc}

000039a8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    39a8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    39aa:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    39ae:	490d      	ldr	r1, [pc, #52]	; (39e4 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    39b0:	f021 0101 	bic.w	r1, r1, #1
    39b4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    39b8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    39bc:	9b01      	ldr	r3, [sp, #4]
    39be:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    39c2:	9b02      	ldr	r3, [sp, #8]
    39c4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    39c8:	9b03      	ldr	r3, [sp, #12]
    39ca:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    39ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    39d2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    39d6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    39d8:	2300      	movs	r3, #0
    39da:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    39de:	bc10      	pop	{r4}
    39e0:	4770      	bx	lr
    39e2:	bf00      	nop
    39e4:	00007ae1 	.word	0x00007ae1

000039e8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    39e8:	4b16      	ldr	r3, [pc, #88]	; (3a44 <z_check_thread_stack_fail+0x5c>)
    39ea:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    39ec:	b1da      	cbz	r2, 3a26 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    39ee:	f110 0f16 	cmn.w	r0, #22
    39f2:	d01a      	beq.n	3a2a <z_check_thread_stack_fail+0x42>
{
    39f4:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    39f6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    39fa:	f1a3 0420 	sub.w	r4, r3, #32
    39fe:	4284      	cmp	r4, r0
    3a00:	d805      	bhi.n	3a0e <z_check_thread_stack_fail+0x26>
    3a02:	4283      	cmp	r3, r0
    3a04:	d908      	bls.n	3a18 <z_check_thread_stack_fail+0x30>
    3a06:	428b      	cmp	r3, r1
    3a08:	d808      	bhi.n	3a1c <z_check_thread_stack_fail+0x34>
    3a0a:	2100      	movs	r1, #0
    3a0c:	e000      	b.n	3a10 <z_check_thread_stack_fail+0x28>
    3a0e:	2100      	movs	r1, #0
    3a10:	b931      	cbnz	r1, 3a20 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3a12:	2000      	movs	r0, #0
}
    3a14:	bc10      	pop	{r4}
    3a16:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3a18:	2100      	movs	r1, #0
    3a1a:	e7f9      	b.n	3a10 <z_check_thread_stack_fail+0x28>
    3a1c:	2101      	movs	r1, #1
    3a1e:	e7f7      	b.n	3a10 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    3a20:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3a24:	e7f6      	b.n	3a14 <z_check_thread_stack_fail+0x2c>
		return 0;
    3a26:	2000      	movs	r0, #0
    3a28:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3a2a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3a2e:	428b      	cmp	r3, r1
    3a30:	bf94      	ite	ls
    3a32:	2100      	movls	r1, #0
    3a34:	2101      	movhi	r1, #1
    3a36:	b909      	cbnz	r1, 3a3c <z_check_thread_stack_fail+0x54>
	return 0;
    3a38:	2000      	movs	r0, #0
}
    3a3a:	4770      	bx	lr
		return thread->stack_info.start;
    3a3c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3a40:	4770      	bx	lr
    3a42:	bf00      	nop
    3a44:	20000e8c 	.word	0x20000e8c

00003a48 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3a48:	b508      	push	{r3, lr}
    3a4a:	460d      	mov	r5, r1
    3a4c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3a4e:	4b08      	ldr	r3, [pc, #32]	; (3a70 <arch_switch_to_main_thread+0x28>)
    3a50:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3a52:	f000 fa05 	bl	3e60 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3a56:	4620      	mov	r0, r4
    3a58:	f385 8809 	msr	PSP, r5
    3a5c:	2100      	movs	r1, #0
    3a5e:	b663      	cpsie	if
    3a60:	f381 8811 	msr	BASEPRI, r1
    3a64:	f3bf 8f6f 	isb	sy
    3a68:	2200      	movs	r2, #0
    3a6a:	2300      	movs	r3, #0
    3a6c:	f004 f838 	bl	7ae0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3a70:	20000e8c 	.word	0x20000e8c

00003a74 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3a74:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3a76:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3a78:	4a0b      	ldr	r2, [pc, #44]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3a7a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3a7c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3a7e:	bf1e      	ittt	ne
	movne	r1, #0
    3a80:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3a82:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3a84:	f004 fd9e 	blne	85c4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3a88:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3a8a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3a8e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3a92:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3a96:	4905      	ldr	r1, [pc, #20]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3a98:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3a9a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3a9c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3a9e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3aa2:	4903      	ldr	r1, [pc, #12]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
	bx r1
    3aa4:	4708      	bx	r1
    3aa6:	0000      	.short	0x0000
	ldr r2, =_kernel
    3aa8:	20000e8c 	.word	0x20000e8c
	ldr r1, =_sw_isr_table
    3aac:	00008ad4 	.word	0x00008ad4
	ldr r1, =z_arm_int_exit
    3ab0:	00003ab5 	.word	0x00003ab5

00003ab4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3ab4:	4b04      	ldr	r3, [pc, #16]	; (3ac8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3ab6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3ab8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3aba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3abc:	d003      	beq.n	3ac6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3abe:	4903      	ldr	r1, [pc, #12]	; (3acc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3ac4:	600a      	str	r2, [r1, #0]

00003ac6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3ac6:	4770      	bx	lr
	ldr r3, =_kernel
    3ac8:	20000e8c 	.word	0x20000e8c
	ldr r1, =_SCS_ICSR
    3acc:	e000ed04 	.word	0xe000ed04

00003ad0 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    3ad0:	b510      	push	{r4, lr}
    3ad2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3ad4:	4b12      	ldr	r3, [pc, #72]	; (3b20 <bus_fault+0x50>)
    3ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3adc:	f413 7f00 	tst.w	r3, #512	; 0x200
    3ae0:	d00b      	beq.n	3afa <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3ae2:	4b0f      	ldr	r3, [pc, #60]	; (3b20 <bus_fault+0x50>)
    3ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ae8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3aec:	d005      	beq.n	3afa <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3aee:	b121      	cbz	r1, 3afa <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3af0:	4a0b      	ldr	r2, [pc, #44]	; (3b20 <bus_fault+0x50>)
    3af2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3af4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3af8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3afa:	4b09      	ldr	r3, [pc, #36]	; (3b20 <bus_fault+0x50>)
    3afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b00:	f413 7f80 	tst.w	r3, #256	; 0x100
    3b04:	d101      	bne.n	3b0a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3b06:	4b06      	ldr	r3, [pc, #24]	; (3b20 <bus_fault+0x50>)
    3b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3b0a:	4a05      	ldr	r2, [pc, #20]	; (3b20 <bus_fault+0x50>)
    3b0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3b0e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3b12:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3b14:	2101      	movs	r1, #1
    3b16:	f004 f827 	bl	7b68 <memory_fault_recoverable>
    3b1a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    3b1c:	2000      	movs	r0, #0
    3b1e:	bd10      	pop	{r4, pc}
    3b20:	e000ed00 	.word	0xe000ed00

00003b24 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3b24:	4b07      	ldr	r3, [pc, #28]	; (3b44 <usage_fault+0x20>)
    3b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b34:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3b38:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3b3c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    3b3e:	2000      	movs	r0, #0
    3b40:	4770      	bx	lr
    3b42:	bf00      	nop
    3b44:	e000ed00 	.word	0xe000ed00

00003b48 <mem_manage_fault>:
{
    3b48:	b570      	push	{r4, r5, r6, lr}
    3b4a:	4605      	mov	r5, r0
    3b4c:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3b4e:	4b20      	ldr	r3, [pc, #128]	; (3bd0 <mem_manage_fault+0x88>)
    3b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b56:	f013 0f02 	tst.w	r3, #2
    3b5a:	d00c      	beq.n	3b76 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    3b5c:	4b1c      	ldr	r3, [pc, #112]	; (3bd0 <mem_manage_fault+0x88>)
    3b5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b62:	f013 0f80 	tst.w	r3, #128	; 0x80
    3b66:	d025      	beq.n	3bb4 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
    3b68:	b139      	cbz	r1, 3b7a <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3b6a:	4a19      	ldr	r2, [pc, #100]	; (3bd0 <mem_manage_fault+0x88>)
    3b6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3b72:	6293      	str	r3, [r2, #40]	; 0x28
    3b74:	e001      	b.n	3b7a <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    3b76:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3b7a:	4b15      	ldr	r3, [pc, #84]	; (3bd0 <mem_manage_fault+0x88>)
    3b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b82:	f013 0f10 	tst.w	r3, #16
    3b86:	d104      	bne.n	3b92 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3b88:	4b11      	ldr	r3, [pc, #68]	; (3bd0 <mem_manage_fault+0x88>)
    3b8a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3b8c:	f014 0402 	ands.w	r4, r4, #2
    3b90:	d004      	beq.n	3b9c <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3b92:	4b0f      	ldr	r3, [pc, #60]	; (3bd0 <mem_manage_fault+0x88>)
    3b94:	685c      	ldr	r4, [r3, #4]
    3b96:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    3b9a:	d10e      	bne.n	3bba <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3b9c:	4a0c      	ldr	r2, [pc, #48]	; (3bd0 <mem_manage_fault+0x88>)
    3b9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ba0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3ba4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3ba6:	2101      	movs	r1, #1
    3ba8:	4628      	mov	r0, r5
    3baa:	f003 ffdd 	bl	7b68 <memory_fault_recoverable>
    3bae:	7030      	strb	r0, [r6, #0]
}
    3bb0:	4620      	mov	r0, r4
    3bb2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    3bb4:	f06f 0015 	mvn.w	r0, #21
    3bb8:	e7df      	b.n	3b7a <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3bba:	4629      	mov	r1, r5
    3bbc:	f7ff ff14 	bl	39e8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3bc0:	4604      	mov	r4, r0
    3bc2:	2800      	cmp	r0, #0
    3bc4:	d0ea      	beq.n	3b9c <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3bc6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3bca:	2402      	movs	r4, #2
    3bcc:	e7e6      	b.n	3b9c <mem_manage_fault+0x54>
    3bce:	bf00      	nop
    3bd0:	e000ed00 	.word	0xe000ed00

00003bd4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    3bd4:	b510      	push	{r4, lr}
    3bd6:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    3bd8:	2300      	movs	r3, #0
    3bda:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3bdc:	4b1b      	ldr	r3, [pc, #108]	; (3c4c <hard_fault+0x78>)
    3bde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3be0:	f010 0002 	ands.w	r0, r0, #2
    3be4:	d12d      	bne.n	3c42 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3be8:	2b00      	cmp	r3, #0
    3bea:	db2b      	blt.n	3c44 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3bec:	4b17      	ldr	r3, [pc, #92]	; (3c4c <hard_fault+0x78>)
    3bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3bf0:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    3bf4:	d027      	beq.n	3c46 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3bf6:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    3bf8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3bfc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3c00:	429a      	cmp	r2, r3
    3c02:	d010      	beq.n	3c26 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    3c04:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3c08:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    3c0c:	781b      	ldrb	r3, [r3, #0]
    3c0e:	b963      	cbnz	r3, 3c2a <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    3c10:	4b0f      	ldr	r3, [pc, #60]	; (3c50 <hard_fault+0x7c>)
    3c12:	781b      	ldrb	r3, [r3, #0]
    3c14:	b97b      	cbnz	r3, 3c36 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    3c16:	4b0f      	ldr	r3, [pc, #60]	; (3c54 <hard_fault+0x80>)
    3c18:	881b      	ldrh	r3, [r3, #0]
    3c1a:	b29b      	uxth	r3, r3
    3c1c:	b193      	cbz	r3, 3c44 <hard_fault+0x70>
			reason = usage_fault(esf);
    3c1e:	4620      	mov	r0, r4
    3c20:	f7ff ff80 	bl	3b24 <usage_fault>
    3c24:	e00e      	b.n	3c44 <hard_fault+0x70>
			reason = esf->basic.r0;
    3c26:	6820      	ldr	r0, [r4, #0]
    3c28:	e00c      	b.n	3c44 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    3c2a:	460a      	mov	r2, r1
    3c2c:	2101      	movs	r1, #1
    3c2e:	4620      	mov	r0, r4
    3c30:	f7ff ff8a 	bl	3b48 <mem_manage_fault>
    3c34:	e006      	b.n	3c44 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    3c36:	460a      	mov	r2, r1
    3c38:	2101      	movs	r1, #1
    3c3a:	4620      	mov	r0, r4
    3c3c:	f7ff ff48 	bl	3ad0 <bus_fault>
    3c40:	e000      	b.n	3c44 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3c42:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    3c44:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3c46:	4618      	mov	r0, r3
	return reason;
    3c48:	e7fc      	b.n	3c44 <hard_fault+0x70>
    3c4a:	bf00      	nop
    3c4c:	e000ed00 	.word	0xe000ed00
    3c50:	e000ed29 	.word	0xe000ed29
    3c54:	e000ed2a 	.word	0xe000ed2a

00003c58 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c5a:	b08b      	sub	sp, #44	; 0x2c
    3c5c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3c5e:	4b25      	ldr	r3, [pc, #148]	; (3cf4 <z_arm_fault+0x9c>)
    3c60:	6859      	ldr	r1, [r3, #4]
    3c62:	f3c1 0108 	ubfx	r1, r1, #0, #9
    3c66:	2300      	movs	r3, #0
    3c68:	f383 8811 	msr	BASEPRI, r3
    3c6c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3c70:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3c74:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3c78:	d115      	bne.n	3ca6 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3c7a:	f002 030c 	and.w	r3, r2, #12
    3c7e:	2b08      	cmp	r3, #8
    3c80:	d014      	beq.n	3cac <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3c82:	f012 0f08 	tst.w	r2, #8
    3c86:	d00b      	beq.n	3ca0 <z_arm_fault+0x48>
	*nested_exc = false;
    3c88:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    3c8a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    3c8e:	4620      	mov	r0, r4
    3c90:	f003 ff6f 	bl	7b72 <fault_handle>
    3c94:	4606      	mov	r6, r0
	if (recoverable) {
    3c96:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c9a:	b153      	cbz	r3, 3cb2 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    3c9c:	b00b      	add	sp, #44	; 0x2c
    3c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    3ca0:	4604      	mov	r4, r0
			*nested_exc = true;
    3ca2:	2701      	movs	r7, #1
    3ca4:	e7f1      	b.n	3c8a <z_arm_fault+0x32>
	*nested_exc = false;
    3ca6:	2700      	movs	r7, #0
		return NULL;
    3ca8:	463c      	mov	r4, r7
    3caa:	e7ee      	b.n	3c8a <z_arm_fault+0x32>
	*nested_exc = false;
    3cac:	2700      	movs	r7, #0
		return NULL;
    3cae:	463c      	mov	r4, r7
    3cb0:	e7eb      	b.n	3c8a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3cb2:	ad01      	add	r5, sp, #4
    3cb4:	6820      	ldr	r0, [r4, #0]
    3cb6:	6861      	ldr	r1, [r4, #4]
    3cb8:	68a2      	ldr	r2, [r4, #8]
    3cba:	68e3      	ldr	r3, [r4, #12]
    3cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3cbe:	6920      	ldr	r0, [r4, #16]
    3cc0:	6961      	ldr	r1, [r4, #20]
    3cc2:	69a2      	ldr	r2, [r4, #24]
    3cc4:	69e3      	ldr	r3, [r4, #28]
    3cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    3cc8:	b14f      	cbz	r7, 3cde <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3cca:	9b08      	ldr	r3, [sp, #32]
    3ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3cd0:	b95a      	cbnz	r2, 3cea <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3cd2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3cd6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    3cda:	9308      	str	r3, [sp, #32]
    3cdc:	e005      	b.n	3cea <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3cde:	9b08      	ldr	r3, [sp, #32]
    3ce0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3ce4:	f023 0301 	bic.w	r3, r3, #1
    3ce8:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    3cea:	a901      	add	r1, sp, #4
    3cec:	4630      	mov	r0, r6
    3cee:	f003 ff25 	bl	7b3c <z_arm_fatal_error>
    3cf2:	e7d3      	b.n	3c9c <z_arm_fault+0x44>
    3cf4:	e000ed00 	.word	0xe000ed00

00003cf8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3cf8:	4a02      	ldr	r2, [pc, #8]	; (3d04 <z_arm_fault_init+0xc>)
    3cfa:	6953      	ldr	r3, [r2, #20]
    3cfc:	f043 0310 	orr.w	r3, r3, #16
    3d00:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3d02:	4770      	bx	lr
    3d04:	e000ed00 	.word	0xe000ed00

00003d08 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3d08:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3d0c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3d10:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3d12:	4672      	mov	r2, lr
	bl z_arm_fault
    3d14:	f7ff ffa0 	bl	3c58 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3d18:	bd01      	pop	{r0, pc}
    3d1a:	bf00      	nop

00003d1c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3d1c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3d1e:	e006      	b.n	3d2e <z_arm_interrupt_init+0x12>
    3d20:	f002 010f 	and.w	r1, r2, #15
    3d24:	4b09      	ldr	r3, [pc, #36]	; (3d4c <z_arm_interrupt_init+0x30>)
    3d26:	440b      	add	r3, r1
    3d28:	2120      	movs	r1, #32
    3d2a:	7619      	strb	r1, [r3, #24]
    3d2c:	3201      	adds	r2, #1
    3d2e:	2a2f      	cmp	r2, #47	; 0x2f
    3d30:	dc0a      	bgt.n	3d48 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    3d32:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3d34:	2b00      	cmp	r3, #0
    3d36:	dbf3      	blt.n	3d20 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d38:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3d3c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3d40:	2120      	movs	r1, #32
    3d42:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3d46:	e7f1      	b.n	3d2c <z_arm_interrupt_init+0x10>
	}
}
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop
    3d4c:	e000ecfc 	.word	0xe000ecfc

00003d50 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3d50:	2000      	movs	r0, #0
    msr CONTROL, r0
    3d52:	f380 8814 	msr	CONTROL, r0
    isb
    3d56:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3d5a:	f004 fe41 	bl	89e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3d5e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3d60:	490d      	ldr	r1, [pc, #52]	; (3d98 <__start+0x48>)
    str r0, [r1]
    3d62:	6008      	str	r0, [r1, #0]
    dsb
    3d64:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3d68:	480c      	ldr	r0, [pc, #48]	; (3d9c <__start+0x4c>)
    msr msp, r0
    3d6a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3d6e:	f000 f829 	bl	3dc4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3d72:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3d74:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3d78:	4809      	ldr	r0, [pc, #36]	; (3da0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3d7a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3d7e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3d80:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3d84:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3d88:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3d8a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3d8c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3d90:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3d94:	f7ff fd94 	bl	38c0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3d98:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3d9c:	200014c0 	.word	0x200014c0
    ldr r0, =z_interrupt_stacks
    3da0:	20001640 	.word	0x20001640

00003da4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3da4:	4b06      	ldr	r3, [pc, #24]	; (3dc0 <z_arm_clear_arm_mpu_config+0x1c>)
    3da6:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    3da8:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    3dac:	2300      	movs	r3, #0
    3dae:	4283      	cmp	r3, r0
    3db0:	da05      	bge.n	3dbe <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3db2:	4a03      	ldr	r2, [pc, #12]	; (3dc0 <z_arm_clear_arm_mpu_config+0x1c>)
    3db4:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    3db6:	2100      	movs	r1, #0
    3db8:	6111      	str	r1, [r2, #16]
    3dba:	3301      	adds	r3, #1
    3dbc:	e7f7      	b.n	3dae <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    3dbe:	4770      	bx	lr
    3dc0:	e000ed90 	.word	0xe000ed90

00003dc4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3dc4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3dc6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3dc8:	2400      	movs	r4, #0
    3dca:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3dce:	f7ff ffe9 	bl	3da4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3dd2:	4623      	mov	r3, r4
    3dd4:	e008      	b.n	3de8 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    3dd6:	f103 0120 	add.w	r1, r3, #32
    3dda:	4a0e      	ldr	r2, [pc, #56]	; (3e14 <z_arm_init_arch_hw_at_boot+0x50>)
    3ddc:	f04f 30ff 	mov.w	r0, #4294967295
    3de0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3de4:	3301      	adds	r3, #1
    3de6:	b2db      	uxtb	r3, r3
    3de8:	2b07      	cmp	r3, #7
    3dea:	d9f4      	bls.n	3dd6 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3dec:	2300      	movs	r3, #0
    3dee:	e008      	b.n	3e02 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3df0:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3df4:	4a07      	ldr	r2, [pc, #28]	; (3e14 <z_arm_init_arch_hw_at_boot+0x50>)
    3df6:	f04f 30ff 	mov.w	r0, #4294967295
    3dfa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3dfe:	3301      	adds	r3, #1
    3e00:	b2db      	uxtb	r3, r3
    3e02:	2b07      	cmp	r3, #7
    3e04:	d9f4      	bls.n	3df0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    3e06:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3e08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e0c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3e10:	bd10      	pop	{r4, pc}
    3e12:	bf00      	nop
    3e14:	e000e100 	.word	0xe000e100

00003e18 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3e18:	b508      	push	{r3, lr}
	if (_current == thread) {
    3e1a:	4b08      	ldr	r3, [pc, #32]	; (3e3c <z_impl_k_thread_abort+0x24>)
    3e1c:	689b      	ldr	r3, [r3, #8]
    3e1e:	4283      	cmp	r3, r0
    3e20:	d002      	beq.n	3e28 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    3e22:	f003 f875 	bl	6f10 <z_thread_abort>
}
    3e26:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e28:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d0f8      	beq.n	3e22 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3e30:	4a03      	ldr	r2, [pc, #12]	; (3e40 <z_impl_k_thread_abort+0x28>)
    3e32:	6853      	ldr	r3, [r2, #4]
    3e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3e38:	6053      	str	r3, [r2, #4]
    3e3a:	e7f2      	b.n	3e22 <z_impl_k_thread_abort+0xa>
    3e3c:	20000e8c 	.word	0x20000e8c
    3e40:	e000ed00 	.word	0xe000ed00

00003e44 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3e44:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3e46:	4b03      	ldr	r3, [pc, #12]	; (3e54 <z_arm_configure_static_mpu_regions+0x10>)
    3e48:	4a03      	ldr	r2, [pc, #12]	; (3e58 <z_arm_configure_static_mpu_regions+0x14>)
    3e4a:	2101      	movs	r1, #1
    3e4c:	4803      	ldr	r0, [pc, #12]	; (3e5c <z_arm_configure_static_mpu_regions+0x18>)
    3e4e:	f003 ff16 	bl	7c7e <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3e52:	bd08      	pop	{r3, pc}
    3e54:	20040000 	.word	0x20040000
    3e58:	20000000 	.word	0x20000000
    3e5c:	00008e70 	.word	0x00008e70

00003e60 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3e60:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3e62:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    3e66:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3e68:	4804      	ldr	r0, [pc, #16]	; (3e7c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3e6a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    3e6c:	2320      	movs	r3, #32
    3e6e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3e70:	4b03      	ldr	r3, [pc, #12]	; (3e80 <z_arm_configure_dynamic_mpu_regions+0x20>)
    3e72:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3e74:	2101      	movs	r1, #1
    3e76:	f003 ff06 	bl	7c86 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    3e7a:	bd08      	pop	{r3, pc}
    3e7c:	20000930 	.word	0x20000930
    3e80:	150b0000 	.word	0x150b0000

00003e84 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3e84:	4a06      	ldr	r2, [pc, #24]	; (3ea0 <region_init+0x1c>)
    3e86:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3e88:	680b      	ldr	r3, [r1, #0]
    3e8a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3e8e:	4303      	orrs	r3, r0
    3e90:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3e94:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3e96:	688b      	ldr	r3, [r1, #8]
    3e98:	f043 0301 	orr.w	r3, r3, #1
    3e9c:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    3e9e:	4770      	bx	lr
    3ea0:	e000ed90 	.word	0xe000ed90

00003ea4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    3ea4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    3ea6:	4c03      	ldr	r4, [pc, #12]	; (3eb4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3ea8:	2301      	movs	r3, #1
    3eaa:	7822      	ldrb	r2, [r4, #0]
    3eac:	f003 febf 	bl	7c2e <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3eb0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    3eb2:	bd10      	pop	{r4, pc}
    3eb4:	20000ee8 	.word	0x20000ee8

00003eb8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3eb8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3eba:	2300      	movs	r3, #0
    3ebc:	4a08      	ldr	r2, [pc, #32]	; (3ee0 <mpu_configure_dynamic_mpu_regions+0x28>)
    3ebe:	7812      	ldrb	r2, [r2, #0]
    3ec0:	f003 feb5 	bl	7c2e <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3ec4:	f110 0f16 	cmn.w	r0, #22
    3ec8:	d008      	beq.n	3edc <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3eca:	4603      	mov	r3, r0
    3ecc:	2b07      	cmp	r3, #7
    3ece:	dc05      	bgt.n	3edc <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    3ed0:	4a04      	ldr	r2, [pc, #16]	; (3ee4 <mpu_configure_dynamic_mpu_regions+0x2c>)
    3ed2:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    3ed4:	2100      	movs	r1, #0
    3ed6:	6111      	str	r1, [r2, #16]
    3ed8:	3301      	adds	r3, #1
    3eda:	e7f7      	b.n	3ecc <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    3edc:	bd08      	pop	{r3, pc}
    3ede:	bf00      	nop
    3ee0:	20000ee8 	.word	0x20000ee8
    3ee4:	e000ed90 	.word	0xe000ed90

00003ee8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3ee8:	4b03      	ldr	r3, [pc, #12]	; (3ef8 <arm_core_mpu_enable+0x10>)
    3eea:	2205      	movs	r2, #5
    3eec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ef2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3ef6:	4770      	bx	lr
    3ef8:	e000ed90 	.word	0xe000ed90

00003efc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3efc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3f00:	4b01      	ldr	r3, [pc, #4]	; (3f08 <arm_core_mpu_disable+0xc>)
    3f02:	2200      	movs	r2, #0
    3f04:	605a      	str	r2, [r3, #4]
}
    3f06:	4770      	bx	lr
    3f08:	e000ed90 	.word	0xe000ed90

00003f0c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3f0c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3f0e:	4b0e      	ldr	r3, [pc, #56]	; (3f48 <z_arm_mpu_init+0x3c>)
    3f10:	681d      	ldr	r5, [r3, #0]
    3f12:	2d08      	cmp	r5, #8
    3f14:	d815      	bhi.n	3f42 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3f16:	f7ff fff1 	bl	3efc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3f1a:	2400      	movs	r4, #0
    3f1c:	42a5      	cmp	r5, r4
    3f1e:	d90a      	bls.n	3f36 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3f20:	4b09      	ldr	r3, [pc, #36]	; (3f48 <z_arm_mpu_init+0x3c>)
    3f22:	6859      	ldr	r1, [r3, #4]
    3f24:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3f28:	0093      	lsls	r3, r2, #2
    3f2a:	4419      	add	r1, r3
    3f2c:	4620      	mov	r0, r4
    3f2e:	f7ff ffa9 	bl	3e84 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3f32:	3401      	adds	r4, #1
    3f34:	e7f2      	b.n	3f1c <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3f36:	4b05      	ldr	r3, [pc, #20]	; (3f4c <z_arm_mpu_init+0x40>)
    3f38:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3f3a:	f7ff ffd5 	bl	3ee8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3f3e:	2000      	movs	r0, #0
}
    3f40:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    3f42:	f04f 30ff 	mov.w	r0, #4294967295
    3f46:	e7fb      	b.n	3f40 <z_arm_mpu_init+0x34>
    3f48:	00008e8c 	.word	0x00008e8c
    3f4c:	20000ee8 	.word	0x20000ee8

00003f50 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3f50:	4b01      	ldr	r3, [pc, #4]	; (3f58 <__stdout_hook_install+0x8>)
    3f52:	6018      	str	r0, [r3, #0]
}
    3f54:	4770      	bx	lr
    3f56:	bf00      	nop
    3f58:	20000024 	.word	0x20000024

00003f5c <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3f5c:	4b06      	ldr	r3, [pc, #24]	; (3f78 <nrf52_errata_197+0x1c>)
    3f5e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3f60:	4a06      	ldr	r2, [pc, #24]	; (3f7c <nrf52_errata_197+0x20>)
    3f62:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3f64:	2b08      	cmp	r3, #8
    3f66:	d001      	beq.n	3f6c <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3f68:	2000      	movs	r0, #0
    3f6a:	4770      	bx	lr
                switch(var2)
    3f6c:	2a02      	cmp	r2, #2
    3f6e:	d001      	beq.n	3f74 <nrf52_errata_197+0x18>
                        return false;
    3f70:	2000      	movs	r0, #0
    3f72:	4770      	bx	lr
                        return true;
    3f74:	2001      	movs	r0, #1
    #endif
}
    3f76:	4770      	bx	lr
    3f78:	10000130 	.word	0x10000130
    3f7c:	10000134 	.word	0x10000134

00003f80 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3f80:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f82:	f04f 0320 	mov.w	r3, #32
    3f86:	f3ef 8411 	mrs	r4, BASEPRI
    3f8a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f8e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3f92:	2301      	movs	r3, #1
    3f94:	4a0b      	ldr	r2, [pc, #44]	; (3fc4 <nordicsemi_nrf52_init+0x44>)
    3f96:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f9e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3fa2:	f7ff ffdb 	bl	3f5c <nrf52_errata_197>
    3fa6:	b110      	cbz	r0, 3fae <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3fa8:	4b07      	ldr	r3, [pc, #28]	; (3fc8 <nordicsemi_nrf52_init+0x48>)
    3faa:	2201      	movs	r2, #1
    3fac:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fb2:	2201      	movs	r2, #1
    3fb4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3fb8:	f384 8811 	msr	BASEPRI, r4
    3fbc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3fc0:	2000      	movs	r0, #0
    3fc2:	bd10      	pop	{r4, pc}
    3fc4:	4001e000 	.word	0x4001e000
    3fc8:	40000638 	.word	0x40000638

00003fcc <sys_arch_reboot>:
    *p_gpregret = val;
    3fcc:	b2c0      	uxtb	r0, r0
    3fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fd2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3fd6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3fda:	4905      	ldr	r1, [pc, #20]	; (3ff0 <sys_arch_reboot+0x24>)
    3fdc:	68ca      	ldr	r2, [r1, #12]
    3fde:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3fe2:	4b04      	ldr	r3, [pc, #16]	; (3ff4 <sys_arch_reboot+0x28>)
    3fe4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3fe6:	60cb      	str	r3, [r1, #12]
    3fe8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3fec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3fee:	e7fd      	b.n	3fec <sys_arch_reboot+0x20>
    3ff0:	e000ed00 	.word	0xe000ed00
    3ff4:	05fa0004 	.word	0x05fa0004

00003ff8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3ff8:	b130      	cbz	r0, 4008 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    3ffa:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3ffc:	0180      	lsls	r0, r0, #6
    3ffe:	4b03      	ldr	r3, [pc, #12]	; (400c <arch_busy_wait+0x14>)
    4000:	f043 0301 	orr.w	r3, r3, #1
    4004:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    4006:	bd08      	pop	{r3, pc}
    4008:	4770      	bx	lr
    400a:	bf00      	nop
    400c:	00008cc0 	.word	0x00008cc0

00004010 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4010:	4800      	ldr	r0, [pc, #0]	; (4014 <get_hf_flags+0x4>)
    4012:	4770      	bx	lr
    4014:	2000098c 	.word	0x2000098c

00004018 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4018:	4b03      	ldr	r3, [pc, #12]	; (4028 <get_subsys+0x10>)
    401a:	1ac0      	subs	r0, r0, r3
    401c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    401e:	4b03      	ldr	r3, [pc, #12]	; (402c <get_subsys+0x14>)
    4020:	fb03 f000 	mul.w	r0, r3, r0
    4024:	4770      	bx	lr
    4026:	bf00      	nop
    4028:	2000094c 	.word	0x2000094c
    402c:	b6db6db7 	.word	0xb6db6db7

00004030 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4030:	b538      	push	{r3, r4, r5, lr}
    4032:	4605      	mov	r5, r0
    4034:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4036:	f7ff ffef 	bl	4018 <get_subsys>
    403a:	4601      	mov	r1, r0
    403c:	2240      	movs	r2, #64	; 0x40
    403e:	4803      	ldr	r0, [pc, #12]	; (404c <onoff_stop+0x1c>)
    4040:	f003 febf 	bl	7dc2 <stop>
    4044:	4601      	mov	r1, r0
	notify(mgr, res);
    4046:	4628      	mov	r0, r5
    4048:	47a0      	blx	r4
}
    404a:	bd38      	pop	{r3, r4, r5, pc}
    404c:	00008a5c 	.word	0x00008a5c

00004050 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4050:	b530      	push	{r4, r5, lr}
    4052:	b083      	sub	sp, #12
    4054:	4605      	mov	r5, r0
    4056:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4058:	f7ff ffde 	bl	4018 <get_subsys>
    405c:	4601      	mov	r1, r0
    405e:	2340      	movs	r3, #64	; 0x40
    4060:	9300      	str	r3, [sp, #0]
    4062:	4623      	mov	r3, r4
    4064:	4a05      	ldr	r2, [pc, #20]	; (407c <onoff_start+0x2c>)
    4066:	4806      	ldr	r0, [pc, #24]	; (4080 <onoff_start+0x30>)
    4068:	f003 fec5 	bl	7df6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    406c:	1e01      	subs	r1, r0, #0
    406e:	db01      	blt.n	4074 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4070:	b003      	add	sp, #12
    4072:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4074:	4628      	mov	r0, r5
    4076:	47a0      	blx	r4
}
    4078:	e7fa      	b.n	4070 <onoff_start+0x20>
    407a:	bf00      	nop
    407c:	00007e3f 	.word	0x00007e3f
    4080:	00008a5c 	.word	0x00008a5c

00004084 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4084:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4086:	b110      	cbz	r0, 408e <clock_event_handler+0xa>
    4088:	2801      	cmp	r0, #1
    408a:	d00d      	beq.n	40a8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    408c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    408e:	2100      	movs	r1, #0
    4090:	4808      	ldr	r0, [pc, #32]	; (40b4 <clock_event_handler+0x30>)
    4092:	f003 fe1f 	bl	7cd4 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4096:	6883      	ldr	r3, [r0, #8]
    4098:	f013 0f07 	tst.w	r3, #7
    409c:	d1f6      	bne.n	408c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    409e:	2100      	movs	r1, #0
    40a0:	4804      	ldr	r0, [pc, #16]	; (40b4 <clock_event_handler+0x30>)
    40a2:	f003 fe7c 	bl	7d9e <clkstarted_handle>
    40a6:	e7f1      	b.n	408c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    40a8:	2101      	movs	r1, #1
    40aa:	4802      	ldr	r0, [pc, #8]	; (40b4 <clock_event_handler+0x30>)
    40ac:	f003 fe77 	bl	7d9e <clkstarted_handle>
}
    40b0:	e7ec      	b.n	408c <clock_event_handler+0x8>
    40b2:	bf00      	nop
    40b4:	00008a5c 	.word	0x00008a5c

000040b8 <generic_hfclk_start>:
{
    40b8:	b510      	push	{r4, lr}
	__asm__ volatile(
    40ba:	f04f 0320 	mov.w	r3, #32
    40be:	f3ef 8411 	mrs	r4, BASEPRI
    40c2:	f383 8812 	msr	BASEPRI_MAX, r3
    40c6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    40ca:	4a13      	ldr	r2, [pc, #76]	; (4118 <generic_hfclk_start+0x60>)
    40cc:	6813      	ldr	r3, [r2, #0]
    40ce:	f043 0302 	orr.w	r3, r3, #2
    40d2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    40d4:	f013 0f01 	tst.w	r3, #1
    40d8:	d108      	bne.n	40ec <generic_hfclk_start+0x34>
	bool already_started = false;
    40da:	2300      	movs	r3, #0
	__asm__ volatile(
    40dc:	f384 8811 	msr	BASEPRI, r4
    40e0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    40e4:	b99b      	cbnz	r3, 410e <generic_hfclk_start+0x56>
	hfclk_start();
    40e6:	f003 feb2 	bl	7e4e <hfclk_start>
}
    40ea:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    40ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40f0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    40f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    40f8:	f012 0f01 	tst.w	r2, #1
    40fc:	d101      	bne.n	4102 <generic_hfclk_start+0x4a>
	bool already_started = false;
    40fe:	2300      	movs	r3, #0
    4100:	e7ec      	b.n	40dc <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4102:	f7ff ff85 	bl	4010 <get_hf_flags>
    4106:	f003 fe37 	bl	7d78 <set_on_state>
			already_started = true;
    410a:	2301      	movs	r3, #1
    410c:	e7e6      	b.n	40dc <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    410e:	2100      	movs	r1, #0
    4110:	4802      	ldr	r0, [pc, #8]	; (411c <generic_hfclk_start+0x64>)
    4112:	f003 fe44 	bl	7d9e <clkstarted_handle>
		return;
    4116:	e7e8      	b.n	40ea <generic_hfclk_start+0x32>
    4118:	2000099c 	.word	0x2000099c
    411c:	00008a5c 	.word	0x00008a5c

00004120 <generic_hfclk_stop>:
{
    4120:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4122:	4b0a      	ldr	r3, [pc, #40]	; (414c <generic_hfclk_stop+0x2c>)
    4124:	f3bf 8f5b 	dmb	ish
    4128:	e853 2f00 	ldrex	r2, [r3]
    412c:	f022 0102 	bic.w	r1, r2, #2
    4130:	e843 1000 	strex	r0, r1, [r3]
    4134:	2800      	cmp	r0, #0
    4136:	d1f7      	bne.n	4128 <generic_hfclk_stop+0x8>
    4138:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    413c:	f012 0f01 	tst.w	r2, #1
    4140:	d000      	beq.n	4144 <generic_hfclk_stop+0x24>
}
    4142:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4144:	f003 fe8d 	bl	7e62 <hfclk_stop>
    4148:	e7fb      	b.n	4142 <generic_hfclk_stop+0x22>
    414a:	bf00      	nop
    414c:	2000099c 	.word	0x2000099c

00004150 <api_blocking_start>:
{
    4150:	b500      	push	{lr}
    4152:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4154:	f8cd d000 	str.w	sp, [sp]
    4158:	f8cd d004 	str.w	sp, [sp, #4]
    415c:	2300      	movs	r3, #0
    415e:	9302      	str	r3, [sp, #8]
    4160:	2301      	movs	r3, #1
    4162:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4164:	466b      	mov	r3, sp
    4166:	4a07      	ldr	r2, [pc, #28]	; (4184 <api_blocking_start+0x34>)
    4168:	f003 fe61 	bl	7e2e <api_start>
	if (err < 0) {
    416c:	2800      	cmp	r0, #0
    416e:	db05      	blt.n	417c <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4170:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4174:	2300      	movs	r3, #0
    4176:	4668      	mov	r0, sp
    4178:	f002 f9ec 	bl	6554 <z_impl_k_sem_take>
}
    417c:	b005      	add	sp, #20
    417e:	f85d fb04 	ldr.w	pc, [sp], #4
    4182:	bf00      	nop
    4184:	00007e77 	.word	0x00007e77

00004188 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4188:	b570      	push	{r4, r5, r6, lr}
    418a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    418c:	2200      	movs	r2, #0
    418e:	2101      	movs	r1, #1
    4190:	4610      	mov	r0, r2
    4192:	f7ff fb7b 	bl	388c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4196:	2000      	movs	r0, #0
    4198:	f7ff fb5a 	bl	3850 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    419c:	4811      	ldr	r0, [pc, #68]	; (41e4 <clk_init+0x5c>)
    419e:	f001 f851 	bl	5244 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    41a2:	4b11      	ldr	r3, [pc, #68]	; (41e8 <clk_init+0x60>)
    41a4:	4298      	cmp	r0, r3
    41a6:	d11a      	bne.n	41de <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    41a8:	f004 f91c 	bl	83e4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    41ac:	2400      	movs	r4, #0
    41ae:	e003      	b.n	41b8 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    41b0:	2301      	movs	r3, #1
    41b2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    41b4:	441c      	add	r4, r3
    41b6:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    41b8:	2c01      	cmp	r4, #1
    41ba:	d80e      	bhi.n	41da <clk_init+0x52>
						get_sub_data(dev, i);
    41bc:	4621      	mov	r1, r4
    41be:	4630      	mov	r0, r6
    41c0:	f003 fd88 	bl	7cd4 <get_sub_data>
    41c4:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    41c6:	4621      	mov	r1, r4
    41c8:	4630      	mov	r0, r6
    41ca:	f003 fd8e 	bl	7cea <get_onoff_manager>
    41ce:	4907      	ldr	r1, [pc, #28]	; (41ec <clk_init+0x64>)
    41d0:	f003 fc0e 	bl	79f0 <onoff_manager_init>
		if (err < 0) {
    41d4:	2800      	cmp	r0, #0
    41d6:	daeb      	bge.n	41b0 <clk_init+0x28>
    41d8:	e000      	b.n	41dc <clk_init+0x54>
	}

	return 0;
    41da:	2000      	movs	r0, #0
}
    41dc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    41de:	f06f 0004 	mvn.w	r0, #4
    41e2:	e7fb      	b.n	41dc <clk_init+0x54>
    41e4:	00004085 	.word	0x00004085
    41e8:	0bad0000 	.word	0x0bad0000
    41ec:	00008edc 	.word	0x00008edc

000041f0 <lfclk_spinwait>:
{
    41f0:	b570      	push	{r4, r5, r6, lr}
    41f2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    41f4:	2801      	cmp	r0, #1
    41f6:	d107      	bne.n	4208 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    41f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41fc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4200:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4204:	2b01      	cmp	r3, #1
    4206:	d058      	beq.n	42ba <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4208:	f004 f9a5 	bl	8556 <k_is_in_isr>
    420c:	b928      	cbnz	r0, 421a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    420e:	4b2e      	ldr	r3, [pc, #184]	; (42c8 <lfclk_spinwait+0xd8>)
    4210:	781b      	ldrb	r3, [r3, #0]
    4212:	2b00      	cmp	r3, #0
    4214:	d041      	beq.n	429a <lfclk_spinwait+0xaa>
    4216:	2300      	movs	r3, #0
    4218:	e000      	b.n	421c <lfclk_spinwait+0x2c>
    421a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    421c:	461c      	mov	r4, r3
    421e:	2b00      	cmp	r3, #0
    4220:	d03d      	beq.n	429e <lfclk_spinwait+0xae>
	__asm__ volatile(
    4222:	f04f 0320 	mov.w	r3, #32
    4226:	f3ef 8611 	mrs	r6, BASEPRI
    422a:	f383 8812 	msr	BASEPRI_MAX, r3
    422e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4232:	b924      	cbnz	r4, 423e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    4234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4238:	2202      	movs	r2, #2
    423a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    423e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4242:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4246:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    424a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    424e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4252:	d12b      	bne.n	42ac <lfclk_spinwait+0xbc>
    return false;
    4254:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4256:	b11a      	cbz	r2, 4260 <lfclk_spinwait+0x70>
    4258:	2b01      	cmp	r3, #1
    425a:	d029      	beq.n	42b0 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    425c:	2d01      	cmp	r5, #1
    425e:	d027      	beq.n	42b0 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4260:	b1fc      	cbz	r4, 42a2 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4262:	4630      	mov	r0, r6
    4264:	f7ff faea 	bl	383c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    426c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4270:	2b00      	cmp	r3, #0
    4272:	d1e4      	bne.n	423e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4274:	4b15      	ldr	r3, [pc, #84]	; (42cc <lfclk_spinwait+0xdc>)
    4276:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4278:	2b00      	cmp	r3, #0
    427a:	d0e0      	beq.n	423e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    427c:	4b13      	ldr	r3, [pc, #76]	; (42cc <lfclk_spinwait+0xdc>)
    427e:	2200      	movs	r2, #0
    4280:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4282:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4284:	2301      	movs	r3, #1
    4286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    428a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    428e:	4a10      	ldr	r2, [pc, #64]	; (42d0 <lfclk_spinwait+0xe0>)
    4290:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4294:	4a0f      	ldr	r2, [pc, #60]	; (42d4 <lfclk_spinwait+0xe4>)
    4296:	6013      	str	r3, [r2, #0]
}
    4298:	e7d1      	b.n	423e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    429a:	2301      	movs	r3, #1
    429c:	e7be      	b.n	421c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    429e:	2600      	movs	r6, #0
    42a0:	e7c7      	b.n	4232 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    42a2:	2021      	movs	r0, #33	; 0x21
    42a4:	2100      	movs	r1, #0
    42a6:	f002 fe01 	bl	6eac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    42aa:	e7dd      	b.n	4268 <lfclk_spinwait+0x78>
                return true;
    42ac:	2201      	movs	r2, #1
    42ae:	e7d2      	b.n	4256 <lfclk_spinwait+0x66>
	if (isr_mode) {
    42b0:	b124      	cbz	r4, 42bc <lfclk_spinwait+0xcc>
	__asm__ volatile(
    42b2:	f386 8811 	msr	BASEPRI, r6
    42b6:	f3bf 8f6f 	isb	sy
}
    42ba:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    42bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42c0:	2202      	movs	r2, #2
    42c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    42c6:	e7f8      	b.n	42ba <lfclk_spinwait+0xca>
    42c8:	20000ee9 	.word	0x20000ee9
    42cc:	40000104 	.word	0x40000104
    42d0:	e000e100 	.word	0xe000e100
    42d4:	40000008 	.word	0x40000008

000042d8 <z_nrf_clock_control_lf_on>:
{
    42d8:	b510      	push	{r4, lr}
    42da:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    42dc:	4b10      	ldr	r3, [pc, #64]	; (4320 <z_nrf_clock_control_lf_on+0x48>)
    42de:	2101      	movs	r1, #1
    42e0:	f3bf 8f5b 	dmb	ish
    42e4:	e853 2f00 	ldrex	r2, [r3]
    42e8:	e843 1000 	strex	r0, r1, [r3]
    42ec:	2800      	cmp	r0, #0
    42ee:	d1f9      	bne.n	42e4 <z_nrf_clock_control_lf_on+0xc>
    42f0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    42f4:	b11a      	cbz	r2, 42fe <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    42f6:	1e63      	subs	r3, r4, #1
    42f8:	2b01      	cmp	r3, #1
    42fa:	d90c      	bls.n	4316 <z_nrf_clock_control_lf_on+0x3e>
}
    42fc:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    42fe:	4809      	ldr	r0, [pc, #36]	; (4324 <z_nrf_clock_control_lf_on+0x4c>)
    4300:	f003 fcf3 	bl	7cea <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4304:	4908      	ldr	r1, [pc, #32]	; (4328 <z_nrf_clock_control_lf_on+0x50>)
    4306:	2300      	movs	r3, #0
    4308:	604b      	str	r3, [r1, #4]
    430a:	60cb      	str	r3, [r1, #12]
    430c:	2301      	movs	r3, #1
    430e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4310:	f003 fb8a 	bl	7a28 <onoff_request>
    4314:	e7ef      	b.n	42f6 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    4316:	4620      	mov	r0, r4
    4318:	f7ff ff6a 	bl	41f0 <lfclk_spinwait>
		break;
    431c:	e7ee      	b.n	42fc <z_nrf_clock_control_lf_on+0x24>
    431e:	bf00      	nop
    4320:	200009a0 	.word	0x200009a0
    4324:	00008a5c 	.word	0x00008a5c
    4328:	2000093c 	.word	0x2000093c

0000432c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    432c:	b510      	push	{r4, lr}
    432e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4330:	280a      	cmp	r0, #10
    4332:	d007      	beq.n	4344 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4334:	4b07      	ldr	r3, [pc, #28]	; (4354 <console_out+0x28>)
    4336:	6818      	ldr	r0, [r3, #0]
    4338:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    433a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    433c:	685b      	ldr	r3, [r3, #4]
    433e:	4798      	blx	r3

	return c;
}
    4340:	4620      	mov	r0, r4
    4342:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    4344:	4b03      	ldr	r3, [pc, #12]	; (4354 <console_out+0x28>)
    4346:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4348:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    434a:	685b      	ldr	r3, [r3, #4]
    434c:	210d      	movs	r1, #13
    434e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4350:	e7f0      	b.n	4334 <console_out+0x8>
    4352:	bf00      	nop
    4354:	200009a4 	.word	0x200009a4

00004358 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4358:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    435a:	4c04      	ldr	r4, [pc, #16]	; (436c <uart_console_hook_install+0x14>)
    435c:	4620      	mov	r0, r4
    435e:	f7ff fdf7 	bl	3f50 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    4362:	4620      	mov	r0, r4
    4364:	f7fe fa00 	bl	2768 <__printk_hook_install>
#endif
}
    4368:	bd10      	pop	{r4, pc}
    436a:	bf00      	nop
    436c:	0000432d 	.word	0x0000432d

00004370 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4370:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4372:	4806      	ldr	r0, [pc, #24]	; (438c <uart_console_init+0x1c>)
    4374:	4b06      	ldr	r3, [pc, #24]	; (4390 <uart_console_init+0x20>)
    4376:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    4378:	f004 f863 	bl	8442 <z_device_ready>
    437c:	b118      	cbz	r0, 4386 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    437e:	f7ff ffeb 	bl	4358 <uart_console_hook_install>

	return 0;
    4382:	2000      	movs	r0, #0
}
    4384:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4386:	f06f 0012 	mvn.w	r0, #18
    438a:	e7fb      	b.n	4384 <uart_console_init+0x14>
    438c:	00008abc 	.word	0x00008abc
    4390:	200009a4 	.word	0x200009a4

00004394 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4394:	4b1f      	ldr	r3, [pc, #124]	; (4414 <get_drive+0x80>)
    4396:	4003      	ands	r3, r0
    4398:	4a1f      	ldr	r2, [pc, #124]	; (4418 <get_drive+0x84>)
    439a:	4293      	cmp	r3, r2
    439c:	d032      	beq.n	4404 <get_drive+0x70>
    439e:	d816      	bhi.n	43ce <get_drive+0x3a>
    43a0:	2b06      	cmp	r3, #6
    43a2:	d02b      	beq.n	43fc <get_drive+0x68>
    43a4:	d906      	bls.n	43b4 <get_drive+0x20>
    43a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    43aa:	d10d      	bne.n	43c8 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    43ac:	2301      	movs	r3, #1
    43ae:	700b      	strb	r3, [r1, #0]
	int err = 0;
    43b0:	2000      	movs	r0, #0
		break;
    43b2:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    43b4:	b1fb      	cbz	r3, 43f6 <get_drive+0x62>
    43b6:	2b02      	cmp	r3, #2
    43b8:	d103      	bne.n	43c2 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    43ba:	2304      	movs	r3, #4
    43bc:	700b      	strb	r3, [r1, #0]
	int err = 0;
    43be:	2000      	movs	r0, #0
		break;
    43c0:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    43c2:	f06f 0015 	mvn.w	r0, #21
    43c6:	4770      	bx	lr
    43c8:	f06f 0015 	mvn.w	r0, #21
    43cc:	4770      	bx	lr
    43ce:	4a13      	ldr	r2, [pc, #76]	; (441c <get_drive+0x88>)
    43d0:	4293      	cmp	r3, r2
    43d2:	d01b      	beq.n	440c <get_drive+0x78>
    43d4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    43d8:	d103      	bne.n	43e2 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    43da:	2303      	movs	r3, #3
    43dc:	700b      	strb	r3, [r1, #0]
	int err = 0;
    43de:	2000      	movs	r0, #0
		break;
    43e0:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    43e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    43e6:	d103      	bne.n	43f0 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    43e8:	2302      	movs	r3, #2
    43ea:	700b      	strb	r3, [r1, #0]
	int err = 0;
    43ec:	2000      	movs	r0, #0
		break;
    43ee:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    43f0:	f06f 0015 	mvn.w	r0, #21
    43f4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    43f6:	2000      	movs	r0, #0
    43f8:	7008      	strb	r0, [r1, #0]
		break;
    43fa:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    43fc:	2306      	movs	r3, #6
    43fe:	700b      	strb	r3, [r1, #0]
	int err = 0;
    4400:	2000      	movs	r0, #0
		break;
    4402:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    4404:	2307      	movs	r3, #7
    4406:	700b      	strb	r3, [r1, #0]
	int err = 0;
    4408:	2000      	movs	r0, #0
		break;
    440a:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    440c:	2305      	movs	r3, #5
    440e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    4410:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    4412:	4770      	bx	lr
    4414:	00f00006 	.word	0x00f00006
    4418:	00100006 	.word	0x00100006
    441c:	00400002 	.word	0x00400002

00004420 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4420:	b128      	cbz	r0, 442e <get_dev+0xe>
    4422:	2801      	cmp	r0, #1
    4424:	d101      	bne.n	442a <get_dev+0xa>
    4426:	4803      	ldr	r0, [pc, #12]	; (4434 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    4428:	4770      	bx	lr
	const struct device *dev = NULL;
    442a:	2000      	movs	r0, #0
    442c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    442e:	4802      	ldr	r0, [pc, #8]	; (4438 <get_dev+0x18>)
    4430:	4770      	bx	lr
    4432:	bf00      	nop
    4434:	00008a74 	.word	0x00008a74
    4438:	00008a8c 	.word	0x00008a8c

0000443c <gpio_nrfx_pin_interrupt_configure>:
{
    443c:	b5f0      	push	{r4, r5, r6, r7, lr}
    443e:	b085      	sub	sp, #20
    4440:	460e      	mov	r6, r1
    4442:	4619      	mov	r1, r3
	return port->config;
    4444:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4446:	7b1b      	ldrb	r3, [r3, #12]
    4448:	f006 051f 	and.w	r5, r6, #31
    444c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4450:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    4454:	d022      	beq.n	449c <gpio_nrfx_pin_interrupt_configure+0x60>
    4456:	4607      	mov	r7, r0
    4458:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    445a:	2300      	movs	r3, #0
    445c:	9302      	str	r3, [sp, #8]
    445e:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    4460:	4610      	mov	r0, r2
    4462:	f003 fd40 	bl	7ee6 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4466:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    446a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    446c:	6899      	ldr	r1, [r3, #8]
    446e:	40f1      	lsrs	r1, r6
    4470:	f011 0f01 	tst.w	r1, #1
    4474:	d102      	bne.n	447c <gpio_nrfx_pin_interrupt_configure+0x40>
    4476:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    447a:	d014      	beq.n	44a6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    447c:	2300      	movs	r3, #0
    447e:	aa02      	add	r2, sp, #8
    4480:	4619      	mov	r1, r3
    4482:	4628      	mov	r0, r5
    4484:	f001 f9f8 	bl	5878 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4488:	4b1b      	ldr	r3, [pc, #108]	; (44f8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    448a:	4298      	cmp	r0, r3
    448c:	d131      	bne.n	44f2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    448e:	2101      	movs	r1, #1
    4490:	4628      	mov	r0, r5
    4492:	f001 fbc9 	bl	5c28 <nrfx_gpiote_trigger_enable>
	return 0;
    4496:	2000      	movs	r0, #0
}
    4498:	b005      	add	sp, #20
    449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    449c:	4628      	mov	r0, r5
    449e:	f001 fc27 	bl	5cf0 <nrfx_gpiote_trigger_disable>
		return 0;
    44a2:	2000      	movs	r0, #0
    44a4:	e7f8      	b.n	4498 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    44a6:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    44aa:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    44ac:	2a01      	cmp	r2, #1
    44ae:	d014      	beq.n	44da <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    44b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    44b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    44b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    44bc:	f013 0f01 	tst.w	r3, #1
    44c0:	d1dc      	bne.n	447c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    44c2:	f10d 0107 	add.w	r1, sp, #7
    44c6:	4628      	mov	r0, r5
    44c8:	f001 fb52 	bl	5b70 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    44cc:	4b0b      	ldr	r3, [pc, #44]	; (44fc <gpio_nrfx_pin_interrupt_configure+0xc0>)
    44ce:	4298      	cmp	r0, r3
    44d0:	d005      	beq.n	44de <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    44d2:	f10d 0307 	add.w	r3, sp, #7
    44d6:	9303      	str	r3, [sp, #12]
    44d8:	e7d0      	b.n	447c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    44da:	4a09      	ldr	r2, [pc, #36]	; (4500 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    44dc:	e7ea      	b.n	44b4 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    44de:	f10d 0007 	add.w	r0, sp, #7
    44e2:	f001 fb99 	bl	5c18 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    44e6:	4b04      	ldr	r3, [pc, #16]	; (44f8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    44e8:	4298      	cmp	r0, r3
    44ea:	d0f2      	beq.n	44d2 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    44ec:	f06f 000b 	mvn.w	r0, #11
    44f0:	e7d2      	b.n	4498 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    44f2:	f06f 0004 	mvn.w	r0, #4
    44f6:	e7cf      	b.n	4498 <gpio_nrfx_pin_interrupt_configure+0x5c>
    44f8:	0bad0000 	.word	0x0bad0000
    44fc:	0bad0004 	.word	0x0bad0004
    4500:	50000300 	.word	0x50000300

00004504 <pin_uninit>:
{
    4504:	b530      	push	{r4, r5, lr}
    4506:	b083      	sub	sp, #12
    4508:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    450a:	f10d 0107 	add.w	r1, sp, #7
    450e:	f001 fb2f 	bl	5b70 <nrfx_gpiote_channel_get>
    4512:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4514:	4620      	mov	r0, r4
    4516:	f001 fc1b 	bl	5d50 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    451a:	4b0b      	ldr	r3, [pc, #44]	; (4548 <pin_uninit+0x44>)
    451c:	4298      	cmp	r0, r3
    451e:	d10f      	bne.n	4540 <pin_uninit+0x3c>
	if (free_ch) {
    4520:	429d      	cmp	r5, r3
    4522:	d005      	beq.n	4530 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4524:	4b08      	ldr	r3, [pc, #32]	; (4548 <pin_uninit+0x44>)
    4526:	4298      	cmp	r0, r3
    4528:	d107      	bne.n	453a <pin_uninit+0x36>
    452a:	2000      	movs	r0, #0
}
    452c:	b003      	add	sp, #12
    452e:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    4530:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4534:	f001 fb68 	bl	5c08 <nrfx_gpiote_channel_free>
    4538:	e7f4      	b.n	4524 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    453a:	f06f 0004 	mvn.w	r0, #4
    453e:	e7f5      	b.n	452c <pin_uninit+0x28>
		return -EIO;
    4540:	f06f 0004 	mvn.w	r0, #4
    4544:	e7f2      	b.n	452c <pin_uninit+0x28>
    4546:	bf00      	nop
    4548:	0bad0000 	.word	0x0bad0000

0000454c <gpio_nrfx_pin_configure>:
{
    454c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4550:	b087      	sub	sp, #28
	return port->config;
    4552:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4556:	f898 300c 	ldrb.w	r3, [r8, #12]
    455a:	f001 051f 	and.w	r5, r1, #31
    455e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4562:	2a00      	cmp	r2, #0
    4564:	d044      	beq.n	45f0 <gpio_nrfx_pin_configure+0xa4>
    4566:	460c      	mov	r4, r1
    4568:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    456a:	2600      	movs	r6, #0
    456c:	9603      	str	r6, [sp, #12]
    456e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4570:	f10d 0117 	add.w	r1, sp, #23
    4574:	4620      	mov	r0, r4
    4576:	f001 fafb 	bl	5b70 <nrfx_gpiote_channel_get>
    457a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    457c:	4633      	mov	r3, r6
    457e:	aa03      	add	r2, sp, #12
    4580:	4631      	mov	r1, r6
    4582:	4628      	mov	r0, r5
    4584:	f001 f978 	bl	5878 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4588:	4b30      	ldr	r3, [pc, #192]	; (464c <gpio_nrfx_pin_configure+0x100>)
    458a:	4298      	cmp	r0, r3
    458c:	d15b      	bne.n	4646 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    458e:	4599      	cmp	r9, r3
    4590:	d036      	beq.n	4600 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    4592:	f417 7f00 	tst.w	r7, #512	; 0x200
    4596:	d043      	beq.n	4620 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    4598:	f10d 0103 	add.w	r1, sp, #3
    459c:	4638      	mov	r0, r7
    459e:	f7ff fef9 	bl	4394 <get_drive>
		if (rv != 0) {
    45a2:	4606      	mov	r6, r0
    45a4:	bb40      	cbnz	r0, 45f8 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    45a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    45aa:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    45ae:	f417 7f80 	tst.w	r7, #256	; 0x100
    45b2:	bf0c      	ite	eq
    45b4:	2301      	moveq	r3, #1
    45b6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    45b8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    45bc:	4638      	mov	r0, r7
    45be:	f003 fc5f 	bl	7e80 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    45c2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    45c6:	f417 6f00 	tst.w	r7, #2048	; 0x800
    45ca:	d01e      	beq.n	460a <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    45cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    45d0:	2101      	movs	r1, #1
    45d2:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    45d6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    45da:	2200      	movs	r2, #0
    45dc:	a901      	add	r1, sp, #4
    45de:	4628      	mov	r0, r5
    45e0:	f001 fa00 	bl	59e4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    45e4:	4b19      	ldr	r3, [pc, #100]	; (464c <gpio_nrfx_pin_configure+0x100>)
    45e6:	4298      	cmp	r0, r3
    45e8:	d006      	beq.n	45f8 <gpio_nrfx_pin_configure+0xac>
    45ea:	f06f 0615 	mvn.w	r6, #21
    45ee:	e003      	b.n	45f8 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    45f0:	4628      	mov	r0, r5
    45f2:	f7ff ff87 	bl	4504 <pin_uninit>
    45f6:	4606      	mov	r6, r0
}
    45f8:	4630      	mov	r0, r6
    45fa:	b007      	add	sp, #28
    45fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    4600:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4604:	f001 fb00 	bl	5c08 <nrfx_gpiote_channel_free>
    4608:	e7c3      	b.n	4592 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    460a:	f417 6f80 	tst.w	r7, #1024	; 0x400
    460e:	d0e4      	beq.n	45da <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4610:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4614:	2301      	movs	r3, #1
    4616:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    461a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    461e:	e7dc      	b.n	45da <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    4620:	4638      	mov	r0, r7
    4622:	f003 fc2d 	bl	7e80 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    4626:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    462a:	2300      	movs	r3, #0
    462c:	461a      	mov	r2, r3
    462e:	a902      	add	r1, sp, #8
    4630:	4628      	mov	r0, r5
    4632:	f001 f921 	bl	5878 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4636:	4b05      	ldr	r3, [pc, #20]	; (464c <gpio_nrfx_pin_configure+0x100>)
    4638:	4298      	cmp	r0, r3
    463a:	d101      	bne.n	4640 <gpio_nrfx_pin_configure+0xf4>
    463c:	2600      	movs	r6, #0
    463e:	e7db      	b.n	45f8 <gpio_nrfx_pin_configure+0xac>
    4640:	f06f 0615 	mvn.w	r6, #21
    4644:	e7d8      	b.n	45f8 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    4646:	f06f 0615 	mvn.w	r6, #21
    464a:	e7d5      	b.n	45f8 <gpio_nrfx_pin_configure+0xac>
    464c:	0bad0000 	.word	0x0bad0000

00004650 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4650:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4652:	f001 facf 	bl	5bf4 <nrfx_gpiote_is_init>
    4656:	b108      	cbz	r0, 465c <gpio_nrfx_init+0xc>
		return 0;
    4658:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    465a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    465c:	f001 faa0 	bl	5ba0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4660:	4b08      	ldr	r3, [pc, #32]	; (4684 <gpio_nrfx_init+0x34>)
    4662:	4298      	cmp	r0, r3
    4664:	d10a      	bne.n	467c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4666:	2100      	movs	r1, #0
    4668:	4807      	ldr	r0, [pc, #28]	; (4688 <gpio_nrfx_init+0x38>)
    466a:	f001 fa7b 	bl	5b64 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    466e:	2200      	movs	r2, #0
    4670:	2105      	movs	r1, #5
    4672:	2006      	movs	r0, #6
    4674:	f7ff f90a 	bl	388c <z_arm_irq_priority_set>
	return 0;
    4678:	2000      	movs	r0, #0
    467a:	e7ee      	b.n	465a <gpio_nrfx_init+0xa>
		return -EIO;
    467c:	f06f 0004 	mvn.w	r0, #4
    4680:	e7eb      	b.n	465a <gpio_nrfx_init+0xa>
    4682:	bf00      	nop
    4684:	0bad0000 	.word	0x0bad0000
    4688:	00007f77 	.word	0x00007f77

0000468c <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
    468c:	b410      	push	{r4}
	return dev->config;
    468e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
    4690:	2900      	cmp	r1, #0
    4692:	d17e      	bne.n	4792 <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4694:	68da      	ldr	r2, [r3, #12]
    4696:	f1b2 3fff 	cmp.w	r2, #4294967295
    469a:	d017      	beq.n	46cc <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
    469c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    46a0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    46a2:	2a01      	cmp	r2, #1
    46a4:	d065      	beq.n	4772 <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
    46a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    46aa:	2201      	movs	r2, #1
    46ac:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    46ae:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
    46b2:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    46b4:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    46b8:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    46ba:	2a01      	cmp	r2, #1
    46bc:	d05b      	beq.n	4776 <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
    46be:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    46c2:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    46c6:	2103      	movs	r1, #3
    46c8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    46cc:	691a      	ldr	r2, [r3, #16]
    46ce:	f1b2 3fff 	cmp.w	r2, #4294967295
    46d2:	d00f      	beq.n	46f4 <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
    46d4:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    46d6:	2900      	cmp	r1, #0
    46d8:	d04f      	beq.n	477a <uarte_nrfx_pins_configure+0xee>
    46da:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    46dc:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    46e0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    46e2:	2a01      	cmp	r2, #1
    46e4:	d04b      	beq.n	477e <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
    46e6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    46ea:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    46ec:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    46f0:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    46f4:	695a      	ldr	r2, [r3, #20]
    46f6:	f1b2 3fff 	cmp.w	r2, #4294967295
    46fa:	d017      	beq.n	472c <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
    46fc:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    4700:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4702:	2a01      	cmp	r2, #1
    4704:	d03d      	beq.n	4782 <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
    4706:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    470a:	2201      	movs	r2, #1
    470c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    470e:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
    4712:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    4714:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    4718:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    471a:	2a01      	cmp	r2, #1
    471c:	d033      	beq.n	4786 <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
    471e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4722:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    4726:	2103      	movs	r1, #3
    4728:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    472c:	699a      	ldr	r2, [r3, #24]
    472e:	f1b2 3fff 	cmp.w	r2, #4294967295
    4732:	d00e      	beq.n	4752 <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
    4734:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    4736:	b341      	cbz	r1, 478a <uarte_nrfx_pins_configure+0xfe>
    4738:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    473a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    473e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4740:	2a01      	cmp	r2, #1
    4742:	d024      	beq.n	478e <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
    4744:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4748:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    474a:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    474e:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    4752:	681a      	ldr	r2, [r3, #0]
    4754:	68d8      	ldr	r0, [r3, #12]
    4756:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
    4758:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    475c:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    4760:	681a      	ldr	r2, [r3, #0]
    4762:	6959      	ldr	r1, [r3, #20]
    4764:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
    4766:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    476a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    476e:	bc10      	pop	{r4}
    4770:	4770      	bx	lr
        case 1: return NRF_P1;
    4772:	482c      	ldr	r0, [pc, #176]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    4774:	e799      	b.n	46aa <uarte_nrfx_pins_configure+0x1e>
    4776:	482b      	ldr	r0, [pc, #172]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    4778:	e7a3      	b.n	46c2 <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
    477a:	2000      	movs	r0, #0
    477c:	e7ae      	b.n	46dc <uarte_nrfx_pins_configure+0x50>
    477e:	4c29      	ldr	r4, [pc, #164]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    4780:	e7b3      	b.n	46ea <uarte_nrfx_pins_configure+0x5e>
    4782:	4828      	ldr	r0, [pc, #160]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    4784:	e7c1      	b.n	470a <uarte_nrfx_pins_configure+0x7e>
    4786:	4827      	ldr	r0, [pc, #156]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    4788:	e7cb      	b.n	4722 <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
    478a:	2000      	movs	r0, #0
    478c:	e7d5      	b.n	473a <uarte_nrfx_pins_configure+0xae>
    478e:	4c25      	ldr	r4, [pc, #148]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    4790:	e7da      	b.n	4748 <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4792:	68da      	ldr	r2, [r3, #12]
    4794:	f1b2 3fff 	cmp.w	r2, #4294967295
    4798:	d00b      	beq.n	47b2 <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
    479a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    479e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47a0:	2a01      	cmp	r2, #1
    47a2:	d037      	beq.n	4814 <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
    47a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    47a8:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    47ac:	2102      	movs	r1, #2
    47ae:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47b2:	691a      	ldr	r2, [r3, #16]
    47b4:	f1b2 3fff 	cmp.w	r2, #4294967295
    47b8:	d00b      	beq.n	47d2 <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
    47ba:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    47be:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47c0:	2a01      	cmp	r2, #1
    47c2:	d029      	beq.n	4818 <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
    47c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    47c8:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    47cc:	2102      	movs	r1, #2
    47ce:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47d2:	695a      	ldr	r2, [r3, #20]
    47d4:	f1b2 3fff 	cmp.w	r2, #4294967295
    47d8:	d00b      	beq.n	47f2 <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
    47da:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    47de:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47e0:	2a01      	cmp	r2, #1
    47e2:	d01b      	beq.n	481c <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
    47e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    47e8:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    47ec:	2102      	movs	r1, #2
    47ee:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    47f2:	699a      	ldr	r2, [r3, #24]
    47f4:	f1b2 3fff 	cmp.w	r2, #4294967295
    47f8:	d0ab      	beq.n	4752 <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
    47fa:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    47fe:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4800:	2a01      	cmp	r2, #1
    4802:	d00d      	beq.n	4820 <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
    4804:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4808:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    480c:	2102      	movs	r1, #2
    480e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
    4812:	e79e      	b.n	4752 <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
    4814:	4803      	ldr	r0, [pc, #12]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    4816:	e7c7      	b.n	47a8 <uarte_nrfx_pins_configure+0x11c>
    4818:	4802      	ldr	r0, [pc, #8]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    481a:	e7d5      	b.n	47c8 <uarte_nrfx_pins_configure+0x13c>
    481c:	4801      	ldr	r0, [pc, #4]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    481e:	e7e3      	b.n	47e8 <uarte_nrfx_pins_configure+0x15c>
    4820:	4800      	ldr	r0, [pc, #0]	; (4824 <uarte_nrfx_pins_configure+0x198>)
    4822:	e7f1      	b.n	4808 <uarte_nrfx_pins_configure+0x17c>
    4824:	50000300 	.word	0x50000300

00004828 <baudrate_set>:
	return dev->config;
    4828:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    482a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    482c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    4830:	d06f      	beq.n	4912 <baudrate_set+0xea>
    4832:	d83a      	bhi.n	48aa <baudrate_set+0x82>
    4834:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4838:	d06e      	beq.n	4918 <baudrate_set+0xf0>
    483a:	d90a      	bls.n	4852 <baudrate_set+0x2a>
    483c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    4840:	d075      	beq.n	492e <baudrate_set+0x106>
    4842:	d924      	bls.n	488e <baudrate_set+0x66>
    4844:	f647 2312 	movw	r3, #31250	; 0x7a12
    4848:	4299      	cmp	r1, r3
    484a:	d12b      	bne.n	48a4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    484c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4850:	e013      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    4852:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    4856:	d061      	beq.n	491c <baudrate_set+0xf4>
    4858:	d907      	bls.n	486a <baudrate_set+0x42>
    485a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    485e:	d063      	beq.n	4928 <baudrate_set+0x100>
    4860:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    4864:	d110      	bne.n	4888 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4866:	4b3c      	ldr	r3, [pc, #240]	; (4958 <baudrate_set+0x130>)
    4868:	e007      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    486a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    486e:	d058      	beq.n	4922 <baudrate_set+0xfa>
    4870:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    4874:	d105      	bne.n	4882 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    4876:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    487a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    487e:	2000      	movs	r0, #0
    4880:	4770      	bx	lr
	switch (baudrate) {
    4882:	f06f 0015 	mvn.w	r0, #21
    4886:	4770      	bx	lr
    4888:	f06f 0015 	mvn.w	r0, #21
    488c:	4770      	bx	lr
    488e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    4892:	d04e      	beq.n	4932 <baudrate_set+0x10a>
    4894:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    4898:	d101      	bne.n	489e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    489a:	4b30      	ldr	r3, [pc, #192]	; (495c <baudrate_set+0x134>)
    489c:	e7ed      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    489e:	f06f 0015 	mvn.w	r0, #21
    48a2:	4770      	bx	lr
    48a4:	f06f 0015 	mvn.w	r0, #21
    48a8:	4770      	bx	lr
    48aa:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    48ae:	d042      	beq.n	4936 <baudrate_set+0x10e>
    48b0:	d909      	bls.n	48c6 <baudrate_set+0x9e>
    48b2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    48b6:	d046      	beq.n	4946 <baudrate_set+0x11e>
    48b8:	d91f      	bls.n	48fa <baudrate_set+0xd2>
    48ba:	4b29      	ldr	r3, [pc, #164]	; (4960 <baudrate_set+0x138>)
    48bc:	4299      	cmp	r1, r3
    48be:	d148      	bne.n	4952 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    48c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    48c4:	e7d9      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    48c6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    48ca:	d037      	beq.n	493c <baudrate_set+0x114>
    48cc:	d905      	bls.n	48da <baudrate_set+0xb2>
    48ce:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    48d2:	d10f      	bne.n	48f4 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    48d4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    48d8:	e7cf      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    48da:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    48de:	4299      	cmp	r1, r3
    48e0:	d02e      	beq.n	4940 <baudrate_set+0x118>
    48e2:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    48e6:	d102      	bne.n	48ee <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    48e8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    48ec:	e7c5      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    48ee:	f06f 0015 	mvn.w	r0, #21
    48f2:	4770      	bx	lr
    48f4:	f06f 0015 	mvn.w	r0, #21
    48f8:	4770      	bx	lr
    48fa:	4b1a      	ldr	r3, [pc, #104]	; (4964 <baudrate_set+0x13c>)
    48fc:	4299      	cmp	r1, r3
    48fe:	d025      	beq.n	494c <baudrate_set+0x124>
    4900:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4904:	d102      	bne.n	490c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4906:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    490a:	e7b6      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    490c:	f06f 0015 	mvn.w	r0, #21
    4910:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4912:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4916:	e7b0      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4918:	4b13      	ldr	r3, [pc, #76]	; (4968 <baudrate_set+0x140>)
    491a:	e7ae      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    491c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4920:	e7ab      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    4922:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4926:	e7a8      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4928:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    492c:	e7a5      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    492e:	4b0f      	ldr	r3, [pc, #60]	; (496c <baudrate_set+0x144>)
    4930:	e7a3      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4932:	4b0f      	ldr	r3, [pc, #60]	; (4970 <baudrate_set+0x148>)
    4934:	e7a1      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4936:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    493a:	e79e      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    493c:	4b0d      	ldr	r3, [pc, #52]	; (4974 <baudrate_set+0x14c>)
    493e:	e79c      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4940:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4944:	e799      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4946:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    494a:	e796      	b.n	487a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    494c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4950:	e793      	b.n	487a <baudrate_set+0x52>
	switch (baudrate) {
    4952:	f06f 0015 	mvn.w	r0, #21
}
    4956:	4770      	bx	lr
    4958:	0013b000 	.word	0x0013b000
    495c:	004ea000 	.word	0x004ea000
    4960:	000f4240 	.word	0x000f4240
    4964:	0003d090 	.word	0x0003d090
    4968:	00275000 	.word	0x00275000
    496c:	0075c000 	.word	0x0075c000
    4970:	003af000 	.word	0x003af000
    4974:	013a9000 	.word	0x013a9000

00004978 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    497c:	4605      	mov	r5, r0
    497e:	460f      	mov	r7, r1
	return dev->data;
    4980:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4984:	f003 fde7 	bl	8556 <k_is_in_isr>
    4988:	b920      	cbnz	r0, 4994 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    498a:	4b16      	ldr	r3, [pc, #88]	; (49e4 <uarte_nrfx_poll_out+0x6c>)
    498c:	781b      	ldrb	r3, [r3, #0]
    498e:	b1ab      	cbz	r3, 49bc <uarte_nrfx_poll_out+0x44>
    4990:	2300      	movs	r3, #0
    4992:	e000      	b.n	4996 <uarte_nrfx_poll_out+0x1e>
    4994:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    4996:	b19b      	cbz	r3, 49c0 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    4998:	f04f 0320 	mov.w	r3, #32
    499c:	f3ef 8411 	mrs	r4, BASEPRI
    49a0:	f383 8812 	msr	BASEPRI_MAX, r3
    49a4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    49a8:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    49aa:	4628      	mov	r0, r5
    49ac:	f003 fbad 	bl	810a <is_tx_ready>
    49b0:	b950      	cbnz	r0, 49c8 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    49b2:	f384 8811 	msr	BASEPRI, r4
    49b6:	f3bf 8f6f 	isb	sy
}
    49ba:	e7ed      	b.n	4998 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    49bc:	2301      	movs	r3, #1
    49be:	e7ea      	b.n	4996 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    49c0:	4628      	mov	r0, r5
    49c2:	f003 fbf1 	bl	81a8 <wait_tx_ready>
    49c6:	4606      	mov	r6, r0
	}

	data->char_out = c;
    49c8:	4641      	mov	r1, r8
    49ca:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    49ce:	2201      	movs	r2, #1
    49d0:	4628      	mov	r0, r5
    49d2:	f003 fbb4 	bl	813e <tx_start>
	__asm__ volatile(
    49d6:	f386 8811 	msr	BASEPRI, r6
    49da:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    49de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49e2:	bf00      	nop
    49e4:	20000ee9 	.word	0x20000ee9

000049e8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    49e8:	b538      	push	{r3, r4, r5, lr}
    49ea:	4604      	mov	r4, r0
    49ec:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    49ee:	f101 0012 	add.w	r0, r1, #18
    49f2:	f001 fa01 	bl	5df8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    49f6:	4b0c      	ldr	r3, [pc, #48]	; (4a28 <endtx_stoptx_ppi_init+0x40>)
    49f8:	4298      	cmp	r0, r3
    49fa:	d111      	bne.n	4a20 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    49fc:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    49fe:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4a02:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4a04:	4a09      	ldr	r2, [pc, #36]	; (4a2c <endtx_stoptx_ppi_init+0x44>)
    4a06:	33a2      	adds	r3, #162	; 0xa2
    4a08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4a0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4a10:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4a12:	7ca9      	ldrb	r1, [r5, #18]
    4a14:	2301      	movs	r3, #1
    4a16:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    4a18:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4a1c:	2000      	movs	r0, #0
}
    4a1e:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    4a20:	f06f 0004 	mvn.w	r0, #4
    4a24:	e7fb      	b.n	4a1e <endtx_stoptx_ppi_init+0x36>
    4a26:	bf00      	nop
    4a28:	0bad0000 	.word	0x0bad0000
    4a2c:	4001f000 	.word	0x4001f000

00004a30 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4a30:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    4a34:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4a38:	4b01      	ldr	r3, [pc, #4]	; (4a40 <set_comparator+0x10>)
    4a3a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    4a3e:	4770      	bx	lr
    4a40:	40011000 	.word	0x40011000

00004a44 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    4a44:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4a48:	4b01      	ldr	r3, [pc, #4]	; (4a50 <get_comparator+0xc>)
    4a4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    4a4e:	4770      	bx	lr
    4a50:	40011000 	.word	0x40011000

00004a54 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4a58:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4a5a:	4a02      	ldr	r2, [pc, #8]	; (4a64 <event_enable+0x10>)
    4a5c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    4a60:	4770      	bx	lr
    4a62:	bf00      	nop
    4a64:	40011000 	.word	0x40011000

00004a68 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4a6c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4a6e:	4a02      	ldr	r2, [pc, #8]	; (4a78 <event_disable+0x10>)
    4a70:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    4a74:	4770      	bx	lr
    4a76:	bf00      	nop
    4a78:	40011000 	.word	0x40011000

00004a7c <counter>:
     return p_reg->COUNTER;
    4a7c:	4b01      	ldr	r3, [pc, #4]	; (4a84 <counter+0x8>)
    4a7e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    4a82:	4770      	bx	lr
    4a84:	40011000 	.word	0x40011000

00004a88 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    4a88:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4a8a:	2301      	movs	r3, #1
    4a8c:	4083      	lsls	r3, r0
    4a8e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a90:	4a10      	ldr	r2, [pc, #64]	; (4ad4 <compare_int_lock+0x4c>)
    4a92:	f3bf 8f5b 	dmb	ish
    4a96:	e852 1f00 	ldrex	r1, [r2]
    4a9a:	ea01 0c04 	and.w	ip, r1, r4
    4a9e:	e842 ce00 	strex	lr, ip, [r2]
    4aa2:	f1be 0f00 	cmp.w	lr, #0
    4aa6:	d1f6      	bne.n	4a96 <compare_int_lock+0xe>
    4aa8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4aac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4ab0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4ab4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4abc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4ac0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ac4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4ac8:	420b      	tst	r3, r1
}
    4aca:	bf14      	ite	ne
    4acc:	2001      	movne	r0, #1
    4ace:	2000      	moveq	r0, #0
    4ad0:	bd10      	pop	{r4, pc}
    4ad2:	bf00      	nop
    4ad4:	200009c4 	.word	0x200009c4

00004ad8 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    4ad8:	b570      	push	{r4, r5, r6, lr}
    4ada:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    4adc:	f003 fc07 	bl	82ee <full_int_lock>
    4ae0:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4ae6:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    4ae8:	4a17      	ldr	r2, [pc, #92]	; (4b48 <channel_processing_check_and_clear+0x70>)
    4aea:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4aee:	4213      	tst	r3, r2
    4af0:	d105      	bne.n	4afe <channel_processing_check_and_clear+0x26>
	bool result = false;
    4af2:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    4af4:	4628      	mov	r0, r5
    4af6:	f003 fc03 	bl	8300 <full_int_unlock>

	return result;
}
    4afa:	4630      	mov	r0, r6
    4afc:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4afe:	2301      	movs	r3, #1
    4b00:	40a3      	lsls	r3, r4
    4b02:	43db      	mvns	r3, r3
    4b04:	4a11      	ldr	r2, [pc, #68]	; (4b4c <channel_processing_check_and_clear+0x74>)
    4b06:	f3bf 8f5b 	dmb	ish
    4b0a:	e852 1f00 	ldrex	r1, [r2]
    4b0e:	ea01 0003 	and.w	r0, r1, r3
    4b12:	e842 0600 	strex	r6, r0, [r2]
    4b16:	2e00      	cmp	r6, #0
    4b18:	d1f7      	bne.n	4b0a <channel_processing_check_and_clear+0x32>
    4b1a:	f3bf 8f5b 	dmb	ish
    4b1e:	b959      	cbnz	r1, 4b38 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4b20:	f104 0350 	add.w	r3, r4, #80	; 0x50
    4b24:	009b      	lsls	r3, r3, #2
    4b26:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4b2c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4b30:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4b32:	b113      	cbz	r3, 4b3a <channel_processing_check_and_clear+0x62>
    4b34:	2301      	movs	r3, #1
    4b36:	e000      	b.n	4b3a <channel_processing_check_and_clear+0x62>
    4b38:	2301      	movs	r3, #1
		if (result) {
    4b3a:	461e      	mov	r6, r3
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d0d9      	beq.n	4af4 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    4b40:	4620      	mov	r0, r4
    4b42:	f003 fbc5 	bl	82d0 <event_clear>
    4b46:	e7d5      	b.n	4af4 <channel_processing_check_and_clear+0x1c>
    4b48:	40011000 	.word	0x40011000
    4b4c:	200009c0 	.word	0x200009c0

00004b50 <compare_int_unlock>:
	if (key) {
    4b50:	b901      	cbnz	r1, 4b54 <compare_int_unlock+0x4>
}
    4b52:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    4b54:	2301      	movs	r3, #1
    4b56:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4b58:	4a11      	ldr	r2, [pc, #68]	; (4ba0 <compare_int_unlock+0x50>)
    4b5a:	f3bf 8f5b 	dmb	ish
    4b5e:	e852 1f00 	ldrex	r1, [r2]
    4b62:	4319      	orrs	r1, r3
    4b64:	e842 1c00 	strex	ip, r1, [r2]
    4b68:	f1bc 0f00 	cmp.w	ip, #0
    4b6c:	d1f7      	bne.n	4b5e <compare_int_unlock+0xe>
    4b6e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b76:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    4b78:	4a0a      	ldr	r2, [pc, #40]	; (4ba4 <compare_int_unlock+0x54>)
    4b7a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4b7e:	f3bf 8f5b 	dmb	ish
    4b82:	4b09      	ldr	r3, [pc, #36]	; (4ba8 <compare_int_unlock+0x58>)
    4b84:	681b      	ldr	r3, [r3, #0]
    4b86:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4b8a:	fa23 f000 	lsr.w	r0, r3, r0
    4b8e:	f010 0f01 	tst.w	r0, #1
    4b92:	d0de      	beq.n	4b52 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b94:	4b05      	ldr	r3, [pc, #20]	; (4bac <compare_int_unlock+0x5c>)
    4b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4b9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4b9e:	e7d8      	b.n	4b52 <compare_int_unlock+0x2>
    4ba0:	200009c4 	.word	0x200009c4
    4ba4:	40011000 	.word	0x40011000
    4ba8:	200009c0 	.word	0x200009c0
    4bac:	e000e100 	.word	0xe000e100

00004bb0 <sys_clock_timeout_handler>:
{
    4bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bb2:	4607      	mov	r7, r0
    4bb4:	4614      	mov	r4, r2
    4bb6:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    4bb8:	4610      	mov	r0, r2
    4bba:	4619      	mov	r1, r3
    4bbc:	f003 fb94 	bl	82e8 <absolute_time_to_cc>
    4bc0:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4bc2:	4b15      	ldr	r3, [pc, #84]	; (4c18 <sys_clock_timeout_handler+0x68>)
    4bc4:	681a      	ldr	r2, [r3, #0]
    4bc6:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    4bc8:	601c      	str	r4, [r3, #0]
    4bca:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4bcc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4bd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4bd4:	d308      	bcc.n	4be8 <sys_clock_timeout_handler+0x38>
	return false;
    4bd6:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4bd8:	f002 fae0 	bl	719c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    4bdc:	4638      	mov	r0, r7
    4bde:	f7ff ff31 	bl	4a44 <get_comparator>
    4be2:	42a8      	cmp	r0, r5
    4be4:	d00c      	beq.n	4c00 <sys_clock_timeout_handler+0x50>
}
    4be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4be8:	4b0c      	ldr	r3, [pc, #48]	; (4c1c <sys_clock_timeout_handler+0x6c>)
    4bea:	6819      	ldr	r1, [r3, #0]
    4bec:	0a0b      	lsrs	r3, r1, #8
    4bee:	060a      	lsls	r2, r1, #24
    4bf0:	1952      	adds	r2, r2, r5
    4bf2:	f143 0300 	adc.w	r3, r3, #0
    4bf6:	490a      	ldr	r1, [pc, #40]	; (4c20 <sys_clock_timeout_handler+0x70>)
    4bf8:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    4bfc:	2401      	movs	r4, #1
    4bfe:	e7eb      	b.n	4bd8 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    4c00:	b11c      	cbz	r4, 4c0a <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    4c02:	4638      	mov	r0, r7
    4c04:	f7ff ff26 	bl	4a54 <event_enable>
}
    4c08:	e7ed      	b.n	4be6 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    4c0a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4c0e:	4638      	mov	r0, r7
    4c10:	f7ff ff0e 	bl	4a30 <set_comparator>
    4c14:	e7f5      	b.n	4c02 <sys_clock_timeout_handler+0x52>
    4c16:	bf00      	nop
    4c18:	200001b8 	.word	0x200001b8
    4c1c:	200009c8 	.word	0x200009c8
    4c20:	200001a0 	.word	0x200001a0

00004c24 <z_nrf_rtc_timer_read>:
{
    4c24:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4c26:	4b0d      	ldr	r3, [pc, #52]	; (4c5c <z_nrf_rtc_timer_read+0x38>)
    4c28:	681b      	ldr	r3, [r3, #0]
    4c2a:	0a1d      	lsrs	r5, r3, #8
    4c2c:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4c2e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    4c32:	f7ff ff23 	bl	4a7c <counter>
    4c36:	4603      	mov	r3, r0
	val += cntr;
    4c38:	1820      	adds	r0, r4, r0
    4c3a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4c42:	d20a      	bcs.n	4c5a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    4c44:	4b06      	ldr	r3, [pc, #24]	; (4c60 <z_nrf_rtc_timer_read+0x3c>)
    4c46:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c4a:	4299      	cmp	r1, r3
    4c4c:	bf08      	it	eq
    4c4e:	4290      	cmpeq	r0, r2
    4c50:	d203      	bcs.n	4c5a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    4c52:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4c56:	f141 0100 	adc.w	r1, r1, #0
}
    4c5a:	bd38      	pop	{r3, r4, r5, pc}
    4c5c:	200009c8 	.word	0x200009c8
    4c60:	200001a0 	.word	0x200001a0

00004c64 <compare_set_nolocks>:
{
    4c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c68:	4606      	mov	r6, r0
    4c6a:	4614      	mov	r4, r2
    4c6c:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    4c6e:	4610      	mov	r0, r2
    4c70:	4619      	mov	r1, r3
    4c72:	f003 fb39 	bl	82e8 <absolute_time_to_cc>
    4c76:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4c78:	f7ff ffd4 	bl	4c24 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4c7c:	42a9      	cmp	r1, r5
    4c7e:	bf08      	it	eq
    4c80:	42a0      	cmpeq	r0, r4
    4c82:	d21e      	bcs.n	4cc2 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    4c84:	ebb4 0800 	subs.w	r8, r4, r0
    4c88:	eb65 0901 	sbc.w	r9, r5, r1
    4c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4c90:	2300      	movs	r3, #0
    4c92:	454b      	cmp	r3, r9
    4c94:	bf08      	it	eq
    4c96:	4542      	cmpeq	r2, r8
    4c98:	d32e      	bcc.n	4cf8 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    4c9a:	4b19      	ldr	r3, [pc, #100]	; (4d00 <compare_set_nolocks+0x9c>)
    4c9c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4ca0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4ca4:	42ab      	cmp	r3, r5
    4ca6:	bf08      	it	eq
    4ca8:	42a2      	cmpeq	r2, r4
    4caa:	d018      	beq.n	4cde <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    4cac:	4639      	mov	r1, r7
    4cae:	4630      	mov	r0, r6
    4cb0:	f003 fb2b 	bl	830a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4cb4:	4639      	mov	r1, r7
    4cb6:	f003 fb07 	bl	82c8 <counter_sub>
    4cba:	1824      	adds	r4, r4, r0
    4cbc:	f145 0500 	adc.w	r5, r5, #0
    4cc0:	e00d      	b.n	4cde <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    4cc2:	2301      	movs	r3, #1
    4cc4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4cc6:	4a0f      	ldr	r2, [pc, #60]	; (4d04 <compare_set_nolocks+0xa0>)
    4cc8:	f3bf 8f5b 	dmb	ish
    4ccc:	e852 1f00 	ldrex	r1, [r2]
    4cd0:	4319      	orrs	r1, r3
    4cd2:	e842 1000 	strex	r0, r1, [r2]
    4cd6:	2800      	cmp	r0, #0
    4cd8:	d1f8      	bne.n	4ccc <compare_set_nolocks+0x68>
    4cda:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    4cde:	4b08      	ldr	r3, [pc, #32]	; (4d00 <compare_set_nolocks+0x9c>)
    4ce0:	0132      	lsls	r2, r6, #4
    4ce2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    4ce6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    4cea:	9908      	ldr	r1, [sp, #32]
    4cec:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    4cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4cf0:	6073      	str	r3, [r6, #4]
	return ret;
    4cf2:	2000      	movs	r0, #0
}
    4cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    4cf8:	f06f 0015 	mvn.w	r0, #21
    4cfc:	e7fa      	b.n	4cf4 <compare_set_nolocks+0x90>
    4cfe:	bf00      	nop
    4d00:	200001a8 	.word	0x200001a8
    4d04:	200009c0 	.word	0x200009c0

00004d08 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4d08:	b530      	push	{r4, r5, lr}
    4d0a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    4d0c:	2300      	movs	r3, #0
    4d0e:	4a1e      	ldr	r2, [pc, #120]	; (4d88 <sys_clock_driver_init+0x80>)
    4d10:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4d14:	2b00      	cmp	r3, #0
    4d16:	dd25      	ble.n	4d64 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    4d18:	4c1b      	ldr	r4, [pc, #108]	; (4d88 <sys_clock_driver_init+0x80>)
    4d1a:	2502      	movs	r5, #2
    4d1c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d20:	4b1a      	ldr	r3, [pc, #104]	; (4d8c <sys_clock_driver_init+0x84>)
    4d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4d26:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4d2a:	2200      	movs	r2, #0
    4d2c:	2101      	movs	r1, #1
    4d2e:	2011      	movs	r0, #17
    4d30:	f7fe fdac 	bl	388c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4d34:	2011      	movs	r0, #17
    4d36:	f7fe fd8b 	bl	3850 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4d3a:	2301      	movs	r3, #1
    4d3c:	4a14      	ldr	r2, [pc, #80]	; (4d90 <sys_clock_driver_init+0x88>)
    4d3e:	6013      	str	r3, [r2, #0]
    4d40:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4d42:	4a14      	ldr	r2, [pc, #80]	; (4d94 <sys_clock_driver_init+0x8c>)
    4d44:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4d46:	2400      	movs	r4, #0
    4d48:	9401      	str	r4, [sp, #4]
    4d4a:	4b13      	ldr	r3, [pc, #76]	; (4d98 <sys_clock_driver_init+0x90>)
    4d4c:	9300      	str	r3, [sp, #0]
    4d4e:	4a13      	ldr	r2, [pc, #76]	; (4d9c <sys_clock_driver_init+0x94>)
    4d50:	2300      	movs	r3, #0
    4d52:	4620      	mov	r0, r4
    4d54:	f003 fb14 	bl	8380 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4d58:	4628      	mov	r0, r5
    4d5a:	f7ff fabd 	bl	42d8 <z_nrf_clock_control_lf_on>

	return 0;
}
    4d5e:	4620      	mov	r0, r4
    4d60:	b003      	add	sp, #12
    4d62:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4d64:	4a0e      	ldr	r2, [pc, #56]	; (4da0 <sys_clock_driver_init+0x98>)
    4d66:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    4d6a:	f04f 30ff 	mov.w	r0, #4294967295
    4d6e:	f04f 31ff 	mov.w	r1, #4294967295
    4d72:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4d76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4d7a:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    4d7c:	4902      	ldr	r1, [pc, #8]	; (4d88 <sys_clock_driver_init+0x80>)
    4d7e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4d82:	3301      	adds	r3, #1
    4d84:	e7c6      	b.n	4d14 <sys_clock_driver_init+0xc>
    4d86:	bf00      	nop
    4d88:	40011000 	.word	0x40011000
    4d8c:	e000e100 	.word	0xe000e100
    4d90:	40011008 	.word	0x40011008
    4d94:	200009c4 	.word	0x200009c4
    4d98:	00004bb1 	.word	0x00004bb1
    4d9c:	007fffff 	.word	0x007fffff
    4da0:	200001a8 	.word	0x200001a8

00004da4 <process_channel>:
{
    4da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4da8:	b082      	sub	sp, #8
    4daa:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4dac:	f7ff fe94 	bl	4ad8 <channel_processing_check_and_clear>
    4db0:	b910      	cbnz	r0, 4db8 <process_channel+0x14>
}
    4db2:	b002      	add	sp, #8
    4db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4db8:	f7ff ff34 	bl	4c24 <z_nrf_rtc_timer_read>
    4dbc:	4606      	mov	r6, r0
    4dbe:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    4dc0:	f003 fa95 	bl	82ee <full_int_lock>
    4dc4:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    4dc6:	4b13      	ldr	r3, [pc, #76]	; (4e14 <process_channel+0x70>)
    4dc8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4dcc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4dd0:	454f      	cmp	r7, r9
    4dd2:	bf08      	it	eq
    4dd4:	4546      	cmpeq	r6, r8
    4dd6:	d20b      	bcs.n	4df0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4dd8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    4dda:	4650      	mov	r0, sl
    4ddc:	f003 fa90 	bl	8300 <full_int_unlock>
		if (handler) {
    4de0:	2e00      	cmp	r6, #0
    4de2:	d0e6      	beq.n	4db2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    4de4:	9500      	str	r5, [sp, #0]
    4de6:	4642      	mov	r2, r8
    4de8:	464b      	mov	r3, r9
    4dea:	4620      	mov	r0, r4
    4dec:	47b0      	blx	r6
}
    4dee:	e7e0      	b.n	4db2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    4df0:	4a08      	ldr	r2, [pc, #32]	; (4e14 <process_channel+0x70>)
    4df2:	0123      	lsls	r3, r4, #4
    4df4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4df8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    4dfa:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    4dfc:	2000      	movs	r0, #0
    4dfe:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4e00:	f04f 32ff 	mov.w	r2, #4294967295
    4e04:	f04f 33ff 	mov.w	r3, #4294967295
    4e08:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4e0c:	4620      	mov	r0, r4
    4e0e:	f7ff fe2b 	bl	4a68 <event_disable>
    4e12:	e7e2      	b.n	4dda <process_channel+0x36>
    4e14:	200001a8 	.word	0x200001a8

00004e18 <rtc_nrf_isr>:
{
    4e18:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4e1a:	4b0d      	ldr	r3, [pc, #52]	; (4e50 <rtc_nrf_isr+0x38>)
    4e1c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4e20:	f013 0f02 	tst.w	r3, #2
    4e24:	d00a      	beq.n	4e3c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e26:	4b0b      	ldr	r3, [pc, #44]	; (4e54 <rtc_nrf_isr+0x3c>)
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	b13b      	cbz	r3, 4e3c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4e2c:	4b09      	ldr	r3, [pc, #36]	; (4e54 <rtc_nrf_isr+0x3c>)
    4e2e:	2200      	movs	r2, #0
    4e30:	601a      	str	r2, [r3, #0]
    4e32:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    4e34:	4a08      	ldr	r2, [pc, #32]	; (4e58 <rtc_nrf_isr+0x40>)
    4e36:	6813      	ldr	r3, [r2, #0]
    4e38:	3301      	adds	r3, #1
    4e3a:	6013      	str	r3, [r2, #0]
{
    4e3c:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4e3e:	2c00      	cmp	r4, #0
    4e40:	dd00      	ble.n	4e44 <rtc_nrf_isr+0x2c>
}
    4e42:	bd10      	pop	{r4, pc}
		process_channel(chan);
    4e44:	4620      	mov	r0, r4
    4e46:	f7ff ffad 	bl	4da4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4e4a:	3401      	adds	r4, #1
    4e4c:	e7f7      	b.n	4e3e <rtc_nrf_isr+0x26>
    4e4e:	bf00      	nop
    4e50:	40011000 	.word	0x40011000
    4e54:	40011104 	.word	0x40011104
    4e58:	200009c8 	.word	0x200009c8

00004e5c <sys_clock_set_timeout>:
{
    4e5c:	b510      	push	{r4, lr}
    4e5e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4e60:	f1b0 3fff 	cmp.w	r0, #4294967295
    4e64:	d007      	beq.n	4e76 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4e66:	1e44      	subs	r4, r0, #1
    4e68:	2c00      	cmp	r4, #0
    4e6a:	dd07      	ble.n	4e7c <sys_clock_set_timeout+0x20>
    4e6c:	4b11      	ldr	r3, [pc, #68]	; (4eb4 <sys_clock_set_timeout+0x58>)
    4e6e:	429c      	cmp	r4, r3
    4e70:	dd05      	ble.n	4e7e <sys_clock_set_timeout+0x22>
    4e72:	4c11      	ldr	r4, [pc, #68]	; (4eb8 <sys_clock_set_timeout+0x5c>)
    4e74:	e003      	b.n	4e7e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4e76:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    4e7a:	e7f4      	b.n	4e66 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4e7c:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4e7e:	f7ff fed1 	bl	4c24 <z_nrf_rtc_timer_read>
    4e82:	4b0e      	ldr	r3, [pc, #56]	; (4ebc <sys_clock_set_timeout+0x60>)
    4e84:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e88:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    4e8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4e8e:	d300      	bcc.n	4e92 <sys_clock_set_timeout+0x36>
		ticks = 0;
    4e90:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4e92:	4404      	add	r4, r0
    4e94:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    4e96:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    4e9a:	d300      	bcc.n	4e9e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4e9c:	4c06      	ldr	r4, [pc, #24]	; (4eb8 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4e9e:	2000      	movs	r0, #0
    4ea0:	9001      	str	r0, [sp, #4]
    4ea2:	4907      	ldr	r1, [pc, #28]	; (4ec0 <sys_clock_set_timeout+0x64>)
    4ea4:	9100      	str	r1, [sp, #0]
    4ea6:	1912      	adds	r2, r2, r4
    4ea8:	f143 0300 	adc.w	r3, r3, #0
    4eac:	f003 fa68 	bl	8380 <compare_set>
}
    4eb0:	b002      	add	sp, #8
    4eb2:	bd10      	pop	{r4, pc}
    4eb4:	007ffffe 	.word	0x007ffffe
    4eb8:	007fffff 	.word	0x007fffff
    4ebc:	200001b8 	.word	0x200001b8
    4ec0:	00004bb1 	.word	0x00004bb1

00004ec4 <sys_clock_elapsed>:
{
    4ec4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4ec6:	f7ff fead 	bl	4c24 <z_nrf_rtc_timer_read>
    4eca:	4b02      	ldr	r3, [pc, #8]	; (4ed4 <sys_clock_elapsed+0x10>)
    4ecc:	681b      	ldr	r3, [r3, #0]
}
    4ece:	1ac0      	subs	r0, r0, r3
    4ed0:	bd08      	pop	{r3, pc}
    4ed2:	bf00      	nop
    4ed4:	200001b8 	.word	0x200001b8

00004ed8 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4ed8:	4b03      	ldr	r3, [pc, #12]	; (4ee8 <nrf52_errata_36+0x10>)
    4eda:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4edc:	2b08      	cmp	r3, #8
    4ede:	d001      	beq.n	4ee4 <nrf52_errata_36+0xc>
        return false;
    4ee0:	2000      	movs	r0, #0
    4ee2:	4770      	bx	lr
                        return true;
    4ee4:	2001      	movs	r0, #1
}
    4ee6:	4770      	bx	lr
    4ee8:	10000130 	.word	0x10000130

00004eec <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4eec:	4b03      	ldr	r3, [pc, #12]	; (4efc <nrf52_errata_66+0x10>)
    4eee:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4ef0:	2b08      	cmp	r3, #8
    4ef2:	d001      	beq.n	4ef8 <nrf52_errata_66+0xc>
        return false;
    4ef4:	2000      	movs	r0, #0
    4ef6:	4770      	bx	lr
                        return true;
    4ef8:	2001      	movs	r0, #1
}
    4efa:	4770      	bx	lr
    4efc:	10000130 	.word	0x10000130

00004f00 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4f00:	4b08      	ldr	r3, [pc, #32]	; (4f24 <nrf52_errata_98+0x24>)
    4f02:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4f04:	3304      	adds	r3, #4
    4f06:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4f08:	2a08      	cmp	r2, #8
    4f0a:	d001      	beq.n	4f10 <nrf52_errata_98+0x10>
        return false;
    4f0c:	2000      	movs	r0, #0
    4f0e:	4770      	bx	lr
                switch(var2)
    4f10:	2b00      	cmp	r3, #0
    4f12:	d804      	bhi.n	4f1e <nrf52_errata_98+0x1e>
    4f14:	e8df f003 	tbb	[pc, r3]
    4f18:	01          	.byte	0x01
    4f19:	00          	.byte	0x00
            if (var1 == 0x08)
    4f1a:	2001      	movs	r0, #1
    4f1c:	4770      	bx	lr
                        return false;
    4f1e:	2000      	movs	r0, #0
}
    4f20:	4770      	bx	lr
    4f22:	bf00      	nop
    4f24:	10000130 	.word	0x10000130

00004f28 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4f28:	4b08      	ldr	r3, [pc, #32]	; (4f4c <nrf52_errata_103+0x24>)
    4f2a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4f2c:	3304      	adds	r3, #4
    4f2e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4f30:	2a08      	cmp	r2, #8
    4f32:	d001      	beq.n	4f38 <nrf52_errata_103+0x10>
        return false;
    4f34:	2000      	movs	r0, #0
    4f36:	4770      	bx	lr
                switch(var2)
    4f38:	2b00      	cmp	r3, #0
    4f3a:	d804      	bhi.n	4f46 <nrf52_errata_103+0x1e>
    4f3c:	e8df f003 	tbb	[pc, r3]
    4f40:	01          	.byte	0x01
    4f41:	00          	.byte	0x00
            if (var1 == 0x08)
    4f42:	2001      	movs	r0, #1
    4f44:	4770      	bx	lr
                        return false;
    4f46:	2000      	movs	r0, #0
}
    4f48:	4770      	bx	lr
    4f4a:	bf00      	nop
    4f4c:	10000130 	.word	0x10000130

00004f50 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4f50:	4b08      	ldr	r3, [pc, #32]	; (4f74 <nrf52_errata_115+0x24>)
    4f52:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4f54:	3304      	adds	r3, #4
    4f56:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4f58:	2a08      	cmp	r2, #8
    4f5a:	d001      	beq.n	4f60 <nrf52_errata_115+0x10>
        return false;
    4f5c:	2000      	movs	r0, #0
    4f5e:	4770      	bx	lr
                switch(var2)
    4f60:	2b00      	cmp	r3, #0
    4f62:	d804      	bhi.n	4f6e <nrf52_errata_115+0x1e>
    4f64:	e8df f003 	tbb	[pc, r3]
    4f68:	01          	.byte	0x01
    4f69:	00          	.byte	0x00
            if (var1 == 0x08)
    4f6a:	2001      	movs	r0, #1
    4f6c:	4770      	bx	lr
                        return false;
    4f6e:	2000      	movs	r0, #0
}
    4f70:	4770      	bx	lr
    4f72:	bf00      	nop
    4f74:	10000130 	.word	0x10000130

00004f78 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4f78:	4b08      	ldr	r3, [pc, #32]	; (4f9c <nrf52_errata_120+0x24>)
    4f7a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4f7c:	3304      	adds	r3, #4
    4f7e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4f80:	2a08      	cmp	r2, #8
    4f82:	d001      	beq.n	4f88 <nrf52_errata_120+0x10>
        return false;
    4f84:	2000      	movs	r0, #0
    4f86:	4770      	bx	lr
                switch(var2)
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d804      	bhi.n	4f96 <nrf52_errata_120+0x1e>
    4f8c:	e8df f003 	tbb	[pc, r3]
    4f90:	01          	.byte	0x01
    4f91:	00          	.byte	0x00
            if (var1 == 0x08)
    4f92:	2001      	movs	r0, #1
    4f94:	4770      	bx	lr
                        return false;
    4f96:	2000      	movs	r0, #0
}
    4f98:	4770      	bx	lr
    4f9a:	bf00      	nop
    4f9c:	10000130 	.word	0x10000130

00004fa0 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4fa0:	4b03      	ldr	r3, [pc, #12]	; (4fb0 <nrf52_errata_136+0x10>)
    4fa2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    4fa4:	2b08      	cmp	r3, #8
    4fa6:	d001      	beq.n	4fac <nrf52_errata_136+0xc>
        return false;
    4fa8:	2000      	movs	r0, #0
    4faa:	4770      	bx	lr
                        return true;
    4fac:	2001      	movs	r0, #1
}
    4fae:	4770      	bx	lr
    4fb0:	10000130 	.word	0x10000130

00004fb4 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4fb4:	4b06      	ldr	r3, [pc, #24]	; (4fd0 <nrf52_configuration_249+0x1c>)
    4fb6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4fb8:	4a06      	ldr	r2, [pc, #24]	; (4fd4 <nrf52_configuration_249+0x20>)
    4fba:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4fbc:	2b08      	cmp	r3, #8
    4fbe:	d001      	beq.n	4fc4 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    4fc0:	2000      	movs	r0, #0
    4fc2:	4770      	bx	lr
                switch(var2)
    4fc4:	2a04      	cmp	r2, #4
    4fc6:	d801      	bhi.n	4fcc <nrf52_configuration_249+0x18>
    4fc8:	2000      	movs	r0, #0
    4fca:	4770      	bx	lr
                        return true;
    4fcc:	2001      	movs	r0, #1
    #endif
}
    4fce:	4770      	bx	lr
    4fd0:	10000130 	.word	0x10000130
    4fd4:	10000134 	.word	0x10000134

00004fd8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4fd8:	4b02      	ldr	r3, [pc, #8]	; (4fe4 <nvmc_wait+0xc>)
    4fda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d0fa      	beq.n	4fd8 <nvmc_wait>
}
    4fe2:	4770      	bx	lr
    4fe4:	4001e000 	.word	0x4001e000

00004fe8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    4fe8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4fea:	4b03      	ldr	r3, [pc, #12]	; (4ff8 <nvmc_config+0x10>)
    4fec:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    4ff0:	f7ff fff2 	bl	4fd8 <nvmc_wait>
}
    4ff4:	bd08      	pop	{r3, pc}
    4ff6:	bf00      	nop
    4ff8:	4001e000 	.word	0x4001e000

00004ffc <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4ffc:	4b01      	ldr	r3, [pc, #4]	; (5004 <SystemCoreClockUpdate+0x8>)
    4ffe:	4a02      	ldr	r2, [pc, #8]	; (5008 <SystemCoreClockUpdate+0xc>)
    5000:	601a      	str	r2, [r3, #0]
}
    5002:	4770      	bx	lr
    5004:	20000050 	.word	0x20000050
    5008:	03d09000 	.word	0x03d09000

0000500c <SystemInit>:

void SystemInit(void)
{
    500c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    500e:	f7ff ff63 	bl	4ed8 <nrf52_errata_36>
    5012:	b140      	cbz	r0, 5026 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5018:	2200      	movs	r2, #0
    501a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    501e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5022:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    5026:	f7ff ff61 	bl	4eec <nrf52_errata_66>
    502a:	2800      	cmp	r0, #0
    502c:	d046      	beq.n	50bc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5032:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5036:	4b56      	ldr	r3, [pc, #344]	; (5190 <SystemInit+0x184>)
    5038:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    503c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5040:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5044:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5048:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    504c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5050:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5054:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5058:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    505c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5060:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5064:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5068:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    506c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5070:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5074:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5078:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    507c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5080:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5084:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5088:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    508c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5090:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5094:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5098:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    509c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    50a0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    50a4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    50a8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    50ac:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    50b0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    50b4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    50b8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    50bc:	f7ff ff20 	bl	4f00 <nrf52_errata_98>
    50c0:	b110      	cbz	r0, 50c8 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    50c2:	4b34      	ldr	r3, [pc, #208]	; (5194 <SystemInit+0x188>)
    50c4:	4a34      	ldr	r2, [pc, #208]	; (5198 <SystemInit+0x18c>)
    50c6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    50c8:	f7ff ff2e 	bl	4f28 <nrf52_errata_103>
    50cc:	b118      	cbz	r0, 50d6 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    50ce:	4b33      	ldr	r3, [pc, #204]	; (519c <SystemInit+0x190>)
    50d0:	22fb      	movs	r2, #251	; 0xfb
    50d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    50d6:	f7ff ff3b 	bl	4f50 <nrf52_errata_115>
    50da:	b148      	cbz	r0, 50f0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    50dc:	4930      	ldr	r1, [pc, #192]	; (51a0 <SystemInit+0x194>)
    50de:	680b      	ldr	r3, [r1, #0]
    50e0:	f023 030f 	bic.w	r3, r3, #15
    50e4:	4a2f      	ldr	r2, [pc, #188]	; (51a4 <SystemInit+0x198>)
    50e6:	6812      	ldr	r2, [r2, #0]
    50e8:	f002 020f 	and.w	r2, r2, #15
    50ec:	4313      	orrs	r3, r2
    50ee:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    50f0:	f7ff ff42 	bl	4f78 <nrf52_errata_120>
    50f4:	b118      	cbz	r0, 50fe <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    50f6:	4b2c      	ldr	r3, [pc, #176]	; (51a8 <SystemInit+0x19c>)
    50f8:	f44f 7200 	mov.w	r2, #512	; 0x200
    50fc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    50fe:	f7ff ff4f 	bl	4fa0 <nrf52_errata_136>
    5102:	b160      	cbz	r0, 511e <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5108:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    510c:	f013 0f01 	tst.w	r3, #1
    5110:	d005      	beq.n	511e <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5116:	f06f 0201 	mvn.w	r2, #1
    511a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    511e:	f7ff ff49 	bl	4fb4 <nrf52_configuration_249>
    5122:	b138      	cbz	r0, 5134 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5124:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5128:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    512c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5130:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5134:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5138:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    513c:	2b00      	cmp	r3, #0
    513e:	db08      	blt.n	5152 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5140:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5144:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5148:	2b00      	cmp	r3, #0
    514a:	db02      	blt.n	5152 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    514c:	f7ff ff56 	bl	4ffc <SystemCoreClockUpdate>
}
    5150:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    5152:	2001      	movs	r0, #1
    5154:	f7ff ff48 	bl	4fe8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5158:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    515c:	2512      	movs	r5, #18
    515e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    5162:	f7ff ff39 	bl	4fd8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5166:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    516a:	f7ff ff35 	bl	4fd8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    516e:	2000      	movs	r0, #0
    5170:	f7ff ff3a 	bl	4fe8 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    5174:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5178:	490c      	ldr	r1, [pc, #48]	; (51ac <SystemInit+0x1a0>)
    517a:	68ca      	ldr	r2, [r1, #12]
    517c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5180:	4b0b      	ldr	r3, [pc, #44]	; (51b0 <SystemInit+0x1a4>)
    5182:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5184:	60cb      	str	r3, [r1, #12]
    5186:	f3bf 8f4f 	dsb	sy
    __NOP();
    518a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    518c:	e7fd      	b.n	518a <SystemInit+0x17e>
    518e:	bf00      	nop
    5190:	4000c000 	.word	0x4000c000
    5194:	4000568c 	.word	0x4000568c
    5198:	00038148 	.word	0x00038148
    519c:	4000f000 	.word	0x4000f000
    51a0:	40000ee4 	.word	0x40000ee4
    51a4:	10000258 	.word	0x10000258
    51a8:	40029640 	.word	0x40029640
    51ac:	e000ed00 	.word	0xe000ed00
    51b0:	05fa0004 	.word	0x05fa0004

000051b4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    51b4:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    51b6:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    51b8:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    51bc:	f1d3 031f 	rsbs	r3, r3, #31
    51c0:	d415      	bmi.n	51ee <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    51c2:	2201      	movs	r2, #1
    51c4:	409a      	lsls	r2, r3
    51c6:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    51ca:	f3bf 8f5b 	dmb	ish
    51ce:	e850 5f00 	ldrex	r5, [r0]
    51d2:	42a5      	cmp	r5, r4
    51d4:	d104      	bne.n	51e0 <nrfx_flag32_alloc+0x2c>
    51d6:	e840 2c00 	strex	ip, r2, [r0]
    51da:	f1bc 0f00 	cmp.w	ip, #0
    51de:	d1f6      	bne.n	51ce <nrfx_flag32_alloc+0x1a>
    51e0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    51e4:	d1e7      	bne.n	51b6 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    51e6:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    51e8:	4802      	ldr	r0, [pc, #8]	; (51f4 <nrfx_flag32_alloc+0x40>)
}
    51ea:	bc30      	pop	{r4, r5}
    51ec:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    51ee:	4802      	ldr	r0, [pc, #8]	; (51f8 <nrfx_flag32_alloc+0x44>)
    51f0:	e7fb      	b.n	51ea <nrfx_flag32_alloc+0x36>
    51f2:	bf00      	nop
    51f4:	0bad0000 	.word	0x0bad0000
    51f8:	0bad0002 	.word	0x0bad0002

000051fc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    51fc:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    51fe:	6803      	ldr	r3, [r0, #0]
    5200:	460c      	mov	r4, r1
    5202:	fa23 f101 	lsr.w	r1, r3, r1
    5206:	f011 0f01 	tst.w	r1, #1
    520a:	d114      	bne.n	5236 <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    520c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    520e:	2301      	movs	r3, #1
    5210:	40a3      	lsls	r3, r4
    5212:	4313      	orrs	r3, r2
    5214:	f3bf 8f5b 	dmb	ish
    5218:	e850 1f00 	ldrex	r1, [r0]
    521c:	4291      	cmp	r1, r2
    521e:	d104      	bne.n	522a <nrfx_flag32_free+0x2e>
    5220:	e840 3c00 	strex	ip, r3, [r0]
    5224:	f1bc 0f00 	cmp.w	ip, #0
    5228:	d1f6      	bne.n	5218 <nrfx_flag32_free+0x1c>
    522a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    522e:	d1ed      	bne.n	520c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    5230:	4802      	ldr	r0, [pc, #8]	; (523c <nrfx_flag32_free+0x40>)
}
    5232:	bc10      	pop	{r4}
    5234:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    5236:	4802      	ldr	r0, [pc, #8]	; (5240 <nrfx_flag32_free+0x44>)
    5238:	e7fb      	b.n	5232 <nrfx_flag32_free+0x36>
    523a:	bf00      	nop
    523c:	0bad0000 	.word	0x0bad0000
    5240:	0bad0004 	.word	0x0bad0004

00005244 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5244:	4b06      	ldr	r3, [pc, #24]	; (5260 <nrfx_clock_init+0x1c>)
    5246:	791b      	ldrb	r3, [r3, #4]
    5248:	b93b      	cbnz	r3, 525a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    524a:	4b05      	ldr	r3, [pc, #20]	; (5260 <nrfx_clock_init+0x1c>)
    524c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    524e:	2201      	movs	r2, #1
    5250:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    5252:	2200      	movs	r2, #0
    5254:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5256:	4803      	ldr	r0, [pc, #12]	; (5264 <nrfx_clock_init+0x20>)
    5258:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    525a:	4803      	ldr	r0, [pc, #12]	; (5268 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    525c:	4770      	bx	lr
    525e:	bf00      	nop
    5260:	200009cc 	.word	0x200009cc
    5264:	0bad0000 	.word	0x0bad0000
    5268:	0bad000c 	.word	0x0bad000c

0000526c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    526c:	b110      	cbz	r0, 5274 <nrfx_clock_start+0x8>
    526e:	2801      	cmp	r0, #1
    5270:	d025      	beq.n	52be <nrfx_clock_start+0x52>
    5272:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5278:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    527c:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5280:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5284:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5288:	d111      	bne.n	52ae <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    528a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    528e:	2200      	movs	r2, #0
    5290:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5294:	4b0f      	ldr	r3, [pc, #60]	; (52d4 <nrfx_clock_start+0x68>)
    5296:	2200      	movs	r2, #0
    5298:	601a      	str	r2, [r3, #0]
    529a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    529c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52a0:	2202      	movs	r2, #2
    52a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52a6:	3308      	adds	r3, #8
    52a8:	2201      	movs	r2, #1
    52aa:	601a      	str	r2, [r3, #0]
}
    52ac:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    52ae:	2b01      	cmp	r3, #1
    52b0:	d1eb      	bne.n	528a <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    52b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52b6:	2201      	movs	r2, #1
    52b8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    52bc:	e7ea      	b.n	5294 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52be:	4b06      	ldr	r3, [pc, #24]	; (52d8 <nrfx_clock_start+0x6c>)
    52c0:	2200      	movs	r2, #0
    52c2:	601a      	str	r2, [r3, #0]
    52c4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    52c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52ca:	2201      	movs	r2, #1
    52cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52d0:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    52d2:	4770      	bx	lr
    52d4:	40000104 	.word	0x40000104
    52d8:	40000100 	.word	0x40000100

000052dc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    52dc:	b530      	push	{r4, r5, lr}
    52de:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    52e0:	4604      	mov	r4, r0
    52e2:	b118      	cbz	r0, 52ec <nrfx_clock_stop+0x10>
    52e4:	2801      	cmp	r0, #1
    52e6:	d013      	beq.n	5310 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    52e8:	b003      	add	sp, #12
    52ea:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    52ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52f0:	2202      	movs	r2, #2
    52f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52f6:	f503 7382 	add.w	r3, r3, #260	; 0x104
    52fa:	2200      	movs	r2, #0
    52fc:	601a      	str	r2, [r3, #0]
    52fe:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5300:	4b39      	ldr	r3, [pc, #228]	; (53e8 <nrfx_clock_stop+0x10c>)
    5302:	2201      	movs	r2, #1
    5304:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5306:	2c01      	cmp	r4, #1
    5308:	d00f      	beq.n	532a <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    530a:	f242 7510 	movw	r5, #10000	; 0x2710
    530e:	e052      	b.n	53b6 <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    5310:	2301      	movs	r3, #1
    5312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5316:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    531a:	f502 7280 	add.w	r2, r2, #256	; 0x100
    531e:	2100      	movs	r1, #0
    5320:	6011      	str	r1, [r2, #0]
    5322:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5324:	4a31      	ldr	r2, [pc, #196]	; (53ec <nrfx_clock_stop+0x110>)
    5326:	6013      	str	r3, [r2, #0]
}
    5328:	e7ed      	b.n	5306 <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    532a:	2301      	movs	r3, #1
    532c:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5330:	f242 7510 	movw	r5, #10000	; 0x2710
    5334:	e018      	b.n	5368 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    533a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    533e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5342:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5346:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    534a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    534e:	d120      	bne.n	5392 <nrfx_clock_stop+0xb6>
    return false;
    5350:	2300      	movs	r3, #0
    5352:	2b00      	cmp	r3, #0
    5354:	d042      	beq.n	53dc <nrfx_clock_stop+0x100>
    5356:	f89d 3007 	ldrb.w	r3, [sp, #7]
    535a:	2b01      	cmp	r3, #1
    535c:	d13e      	bne.n	53dc <nrfx_clock_stop+0x100>
    535e:	2001      	movs	r0, #1
    5360:	f003 f83c 	bl	83dc <nrfx_busy_wait>
    5364:	3d01      	subs	r5, #1
    5366:	d039      	beq.n	53dc <nrfx_clock_stop+0x100>
    switch (domain)
    5368:	2c00      	cmp	r4, #0
    536a:	d0e4      	beq.n	5336 <nrfx_clock_stop+0x5a>
    536c:	2c01      	cmp	r4, #1
    536e:	d001      	beq.n	5374 <nrfx_clock_stop+0x98>
    5370:	2300      	movs	r3, #0
    5372:	e7ee      	b.n	5352 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5378:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    537c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5380:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5384:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    5388:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    538c:	d103      	bne.n	5396 <nrfx_clock_stop+0xba>
    return false;
    538e:	2300      	movs	r3, #0
    5390:	e7df      	b.n	5352 <nrfx_clock_stop+0x76>
                return true;
    5392:	2301      	movs	r3, #1
    5394:	e7dd      	b.n	5352 <nrfx_clock_stop+0x76>
                return true;
    5396:	2301      	movs	r3, #1
    5398:	e7db      	b.n	5352 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    539a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    539e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    53a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    53a6:	d115      	bne.n	53d4 <nrfx_clock_stop+0xf8>
    return false;
    53a8:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    53aa:	b1bb      	cbz	r3, 53dc <nrfx_clock_stop+0x100>
    53ac:	2001      	movs	r0, #1
    53ae:	f003 f815 	bl	83dc <nrfx_busy_wait>
    53b2:	3d01      	subs	r5, #1
    53b4:	d012      	beq.n	53dc <nrfx_clock_stop+0x100>
    switch (domain)
    53b6:	2c00      	cmp	r4, #0
    53b8:	d0ef      	beq.n	539a <nrfx_clock_stop+0xbe>
    53ba:	2c01      	cmp	r4, #1
    53bc:	d001      	beq.n	53c2 <nrfx_clock_stop+0xe6>
    53be:	2300      	movs	r3, #0
    53c0:	e7f3      	b.n	53aa <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    53c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    53ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    53ce:	d103      	bne.n	53d8 <nrfx_clock_stop+0xfc>
    return false;
    53d0:	2300      	movs	r3, #0
    53d2:	e7ea      	b.n	53aa <nrfx_clock_stop+0xce>
                return true;
    53d4:	2301      	movs	r3, #1
    53d6:	e7e8      	b.n	53aa <nrfx_clock_stop+0xce>
                return true;
    53d8:	2301      	movs	r3, #1
    53da:	e7e6      	b.n	53aa <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    53dc:	2c01      	cmp	r4, #1
    53de:	d183      	bne.n	52e8 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    53e0:	4b03      	ldr	r3, [pc, #12]	; (53f0 <nrfx_clock_stop+0x114>)
    53e2:	2200      	movs	r2, #0
    53e4:	715a      	strb	r2, [r3, #5]
    53e6:	e77f      	b.n	52e8 <nrfx_clock_stop+0xc>
    53e8:	4000000c 	.word	0x4000000c
    53ec:	40000004 	.word	0x40000004
    53f0:	200009cc 	.word	0x200009cc

000053f4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    53f4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    53f6:	4b1b      	ldr	r3, [pc, #108]	; (5464 <nrfx_power_clock_irq_handler+0x70>)
    53f8:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    53fa:	b183      	cbz	r3, 541e <nrfx_power_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53fc:	4b19      	ldr	r3, [pc, #100]	; (5464 <nrfx_power_clock_irq_handler+0x70>)
    53fe:	2200      	movs	r2, #0
    5400:	601a      	str	r2, [r3, #0]
    5402:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5408:	2201      	movs	r2, #1
    540a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    540e:	4b16      	ldr	r3, [pc, #88]	; (5468 <nrfx_power_clock_irq_handler+0x74>)
    5410:	795b      	ldrb	r3, [r3, #5]
    5412:	b923      	cbnz	r3, 541e <nrfx_power_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    5414:	4b14      	ldr	r3, [pc, #80]	; (5468 <nrfx_power_clock_irq_handler+0x74>)
    5416:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	2000      	movs	r0, #0
    541c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    541e:	4b13      	ldr	r3, [pc, #76]	; (546c <nrfx_power_clock_irq_handler+0x78>)
    5420:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5422:	b19b      	cbz	r3, 544c <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5424:	4b11      	ldr	r3, [pc, #68]	; (546c <nrfx_power_clock_irq_handler+0x78>)
    5426:	2200      	movs	r2, #0
    5428:	601a      	str	r2, [r3, #0]
    542a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    542c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5430:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5434:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5438:	f012 0f03 	tst.w	r2, #3
    543c:	d107      	bne.n	544e <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    543e:	2301      	movs	r3, #1
    5440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5444:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5448:	3208      	adds	r2, #8
    544a:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    544c:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    544e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5452:	2202      	movs	r2, #2
    5454:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5458:	4b03      	ldr	r3, [pc, #12]	; (5468 <nrfx_power_clock_irq_handler+0x74>)
    545a:	681b      	ldr	r3, [r3, #0]
    545c:	2001      	movs	r0, #1
    545e:	4798      	blx	r3
}
    5460:	e7f4      	b.n	544c <nrfx_power_clock_irq_handler+0x58>
    5462:	bf00      	nop
    5464:	40000100 	.word	0x40000100
    5468:	200009cc 	.word	0x200009cc
    546c:	40000104 	.word	0x40000104

00005470 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5470:	3008      	adds	r0, #8
    5472:	4b03      	ldr	r3, [pc, #12]	; (5480 <pin_in_use+0x10>)
    5474:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5478:	f000 0001 	and.w	r0, r0, #1
    547c:	4770      	bx	lr
    547e:	bf00      	nop
    5480:	20000054 	.word	0x20000054

00005484 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5484:	3008      	adds	r0, #8
    5486:	4b03      	ldr	r3, [pc, #12]	; (5494 <pin_in_use_by_te+0x10>)
    5488:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    548c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5490:	4770      	bx	lr
    5492:	bf00      	nop
    5494:	20000054 	.word	0x20000054

00005498 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5498:	3008      	adds	r0, #8
    549a:	4b04      	ldr	r3, [pc, #16]	; (54ac <pin_has_trigger+0x14>)
    549c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    54a0:	f010 001c 	ands.w	r0, r0, #28
    54a4:	bf18      	it	ne
    54a6:	2001      	movne	r0, #1
    54a8:	4770      	bx	lr
    54aa:	bf00      	nop
    54ac:	20000054 	.word	0x20000054

000054b0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    54b0:	3008      	adds	r0, #8
    54b2:	4b03      	ldr	r3, [pc, #12]	; (54c0 <pin_is_output+0x10>)
    54b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    54b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    54bc:	4770      	bx	lr
    54be:	bf00      	nop
    54c0:	20000054 	.word	0x20000054

000054c4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    54c4:	3008      	adds	r0, #8
    54c6:	4b02      	ldr	r3, [pc, #8]	; (54d0 <pin_te_get+0xc>)
    54c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    54cc:	0b40      	lsrs	r0, r0, #13
    54ce:	4770      	bx	lr
    54d0:	20000054 	.word	0x20000054

000054d4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    54d4:	2200      	movs	r2, #0
    54d6:	e004      	b.n	54e2 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    54d8:	f04f 33ff 	mov.w	r3, #4294967295
    54dc:	4283      	cmp	r3, r0
    54de:	d00f      	beq.n	5500 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    54e0:	3201      	adds	r2, #1
    54e2:	2a2f      	cmp	r2, #47	; 0x2f
    54e4:	d80a      	bhi.n	54fc <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    54e6:	f102 0308 	add.w	r3, r2, #8
    54ea:	4906      	ldr	r1, [pc, #24]	; (5504 <handler_in_use+0x30>)
    54ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    54f0:	f413 7f80 	tst.w	r3, #256	; 0x100
    54f4:	d0f0      	beq.n	54d8 <handler_in_use+0x4>
    54f6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    54fa:	e7ef      	b.n	54dc <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    54fc:	2000      	movs	r0, #0
    54fe:	4770      	bx	lr
            return true;
    5500:	2001      	movs	r0, #1
}
    5502:	4770      	bx	lr
    5504:	20000054 	.word	0x20000054

00005508 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5508:	2300      	movs	r3, #0
    550a:	b113      	cbz	r3, 5512 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    550c:	f04f 30ff 	mov.w	r0, #4294967295
}
    5510:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5512:	4a07      	ldr	r2, [pc, #28]	; (5530 <find_handler+0x28>)
    5514:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    5518:	4282      	cmp	r2, r0
    551a:	d001      	beq.n	5520 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    551c:	3301      	adds	r3, #1
    551e:	e7f4      	b.n	550a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5520:	4a03      	ldr	r2, [pc, #12]	; (5530 <find_handler+0x28>)
    5522:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5526:	6852      	ldr	r2, [r2, #4]
    5528:	428a      	cmp	r2, r1
    552a:	d1f7      	bne.n	551c <find_handler+0x14>
            return i;
    552c:	4618      	mov	r0, r3
    552e:	4770      	bx	lr
    5530:	20000054 	.word	0x20000054

00005534 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5534:	3008      	adds	r0, #8
    5536:	4b06      	ldr	r3, [pc, #24]	; (5550 <channel_handler_get+0x1c>)
    5538:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    553c:	f410 7f80 	tst.w	r0, #256	; 0x100
    5540:	d004      	beq.n	554c <channel_handler_get+0x18>
    5542:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    5546:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    554a:	4770      	bx	lr
        return NULL;
    554c:	2000      	movs	r0, #0
}
    554e:	4770      	bx	lr
    5550:	20000054 	.word	0x20000054

00005554 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5554:	b570      	push	{r4, r5, r6, lr}
    5556:	4604      	mov	r4, r0
    5558:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    555a:	f7ff ffeb 	bl	5534 <channel_handler_get>

    if (handler)
    555e:	b120      	cbz	r0, 556a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    5560:	6806      	ldr	r6, [r0, #0]
    5562:	6842      	ldr	r2, [r0, #4]
    5564:	4629      	mov	r1, r5
    5566:	4620      	mov	r0, r4
    5568:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    556a:	4b04      	ldr	r3, [pc, #16]	; (557c <call_handler+0x28>)
    556c:	689b      	ldr	r3, [r3, #8]
    556e:	b123      	cbz	r3, 557a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5570:	4a02      	ldr	r2, [pc, #8]	; (557c <call_handler+0x28>)
    5572:	68d2      	ldr	r2, [r2, #12]
    5574:	4629      	mov	r1, r5
    5576:	4620      	mov	r0, r4
    5578:	4798      	blx	r3
    }
}
    557a:	bd70      	pop	{r4, r5, r6, pc}
    557c:	20000054 	.word	0x20000054

00005580 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    5580:	b570      	push	{r4, r5, r6, lr}
    5582:	4604      	mov	r4, r0
    5584:	460d      	mov	r5, r1
    5586:	4616      	mov	r6, r2
    if (is_level(trigger))
    5588:	4608      	mov	r0, r1
    558a:	f002 ff4c 	bl	8426 <is_level>
    558e:	b9d0      	cbnz	r0, 55c6 <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5590:	2e02      	cmp	r6, #2
    5592:	d03e      	beq.n	5612 <next_sense_cond_call_handler+0x92>
    5594:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    5596:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    559a:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    559c:	2901      	cmp	r1, #1
    559e:	d03a      	beq.n	5616 <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
    55a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    55a4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    55a8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    55ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    55b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    55b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    55b8:	2d03      	cmp	r5, #3
    55ba:	d030      	beq.n	561e <next_sense_cond_call_handler+0x9e>
    55bc:	2e02      	cmp	r6, #2
    55be:	d02c      	beq.n	561a <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    55c0:	2e03      	cmp	r6, #3
    55c2:	d031      	beq.n	5628 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    55c4:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    55c6:	4629      	mov	r1, r5
    55c8:	4620      	mov	r0, r4
    55ca:	f7ff ffc3 	bl	5554 <call_handler>
    *p_pin = pin_number & 0x1F;
    55ce:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    55d2:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55d4:	2c01      	cmp	r4, #1
    55d6:	d01a      	beq.n	560e <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
    55d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    55dc:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
    55e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    55e4:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    55e8:	4296      	cmp	r6, r2
    55ea:	d1eb      	bne.n	55c4 <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    55ec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    55f0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    55f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    55f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    55fc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5600:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5604:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5608:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    560c:	e7da      	b.n	55c4 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
    560e:	4908      	ldr	r1, [pc, #32]	; (5630 <next_sense_cond_call_handler+0xb0>)
    5610:	e7e4      	b.n	55dc <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5612:	2003      	movs	r0, #3
    5614:	e7bf      	b.n	5596 <next_sense_cond_call_handler+0x16>
    5616:	4906      	ldr	r1, [pc, #24]	; (5630 <next_sense_cond_call_handler+0xb0>)
    5618:	e7c4      	b.n	55a4 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    561a:	2d01      	cmp	r5, #1
    561c:	d1d0      	bne.n	55c0 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
    561e:	4629      	mov	r1, r5
    5620:	4620      	mov	r0, r4
    5622:	f7ff ff97 	bl	5554 <call_handler>
}
    5626:	e7cd      	b.n	55c4 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5628:	2d02      	cmp	r5, #2
    562a:	d1cb      	bne.n	55c4 <next_sense_cond_call_handler+0x44>
    562c:	e7f7      	b.n	561e <next_sense_cond_call_handler+0x9e>
    562e:	bf00      	nop
    5630:	50000300 	.word	0x50000300

00005634 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    5634:	b410      	push	{r4}
    5636:	b083      	sub	sp, #12
    5638:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    563a:	4b12      	ldr	r3, [pc, #72]	; (5684 <latch_pending_read_and_check+0x50>)
    563c:	e893 0003 	ldmia.w	r3, {r0, r1}
    5640:	ab02      	add	r3, sp, #8
    5642:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5646:	4620      	mov	r0, r4
    5648:	2300      	movs	r3, #0
    564a:	e00b      	b.n	5664 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    564c:	aa02      	add	r2, sp, #8
    564e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5652:	f852 2c08 	ldr.w	r2, [r2, #-8]
    5656:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    565a:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    565e:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5662:	3301      	adds	r3, #1
    5664:	2b01      	cmp	r3, #1
    5666:	d9f1      	bls.n	564c <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5668:	2300      	movs	r3, #0
    566a:	2b01      	cmp	r3, #1
    566c:	d804      	bhi.n	5678 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
    566e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    5672:	b92a      	cbnz	r2, 5680 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5674:	3301      	adds	r3, #1
    5676:	e7f8      	b.n	566a <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    5678:	2000      	movs	r0, #0
}
    567a:	b003      	add	sp, #12
    567c:	bc10      	pop	{r4}
    567e:	4770      	bx	lr
            return true;
    5680:	2001      	movs	r0, #1
    5682:	e7fa      	b.n	567a <latch_pending_read_and_check+0x46>
    5684:	00008cb0 	.word	0x00008cb0

00005688 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5688:	f100 0208 	add.w	r2, r0, #8
    568c:	4b0e      	ldr	r3, [pc, #56]	; (56c8 <release_handler+0x40>)
    568e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5692:	f413 7f80 	tst.w	r3, #256	; 0x100
    5696:	d016      	beq.n	56c6 <release_handler+0x3e>
{
    5698:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    569a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    569e:	4610      	mov	r0, r2
    56a0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    56a4:	4a08      	ldr	r2, [pc, #32]	; (56c8 <release_handler+0x40>)
    56a6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    56aa:	4620      	mov	r0, r4
    56ac:	f7ff ff12 	bl	54d4 <handler_in_use>
    56b0:	b100      	cbz	r0, 56b4 <release_handler+0x2c>
}
    56b2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    56b4:	4804      	ldr	r0, [pc, #16]	; (56c8 <release_handler+0x40>)
    56b6:	2300      	movs	r3, #0
    56b8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    56bc:	4621      	mov	r1, r4
    56be:	3074      	adds	r0, #116	; 0x74
    56c0:	f7ff fd9c 	bl	51fc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    56c4:	e7f5      	b.n	56b2 <release_handler+0x2a>
    56c6:	4770      	bx	lr
    56c8:	20000054 	.word	0x20000054

000056cc <pin_handler_trigger_uninit>:
{
    56cc:	b510      	push	{r4, lr}
    56ce:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    56d0:	f7ff fed8 	bl	5484 <pin_in_use_by_te>
    56d4:	b140      	cbz	r0, 56e8 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    56d6:	4620      	mov	r0, r4
    56d8:	f7ff fef4 	bl	54c4 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    56dc:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    56e0:	4b06      	ldr	r3, [pc, #24]	; (56fc <pin_handler_trigger_uninit+0x30>)
    56e2:	2200      	movs	r2, #0
    56e4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    56e8:	4620      	mov	r0, r4
    56ea:	f7ff ffcd 	bl	5688 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    56ee:	3408      	adds	r4, #8
    56f0:	4b03      	ldr	r3, [pc, #12]	; (5700 <pin_handler_trigger_uninit+0x34>)
    56f2:	2200      	movs	r2, #0
    56f4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    56f8:	bd10      	pop	{r4, pc}
    56fa:	bf00      	nop
    56fc:	40006000 	.word	0x40006000
    5700:	20000054 	.word	0x20000054

00005704 <pin_handler_set>:
{
    5704:	b570      	push	{r4, r5, r6, lr}
    5706:	b082      	sub	sp, #8
    5708:	4606      	mov	r6, r0
    570a:	460c      	mov	r4, r1
    570c:	4615      	mov	r5, r2
    release_handler(pin);
    570e:	f7ff ffbb 	bl	5688 <release_handler>
    if (!handler)
    5712:	b324      	cbz	r4, 575e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    5714:	4629      	mov	r1, r5
    5716:	4620      	mov	r0, r4
    5718:	f7ff fef6 	bl	5508 <find_handler>
    if (handler_id < 0)
    571c:	1e03      	subs	r3, r0, #0
    571e:	db13      	blt.n	5748 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    5720:	4a10      	ldr	r2, [pc, #64]	; (5764 <pin_handler_set+0x60>)
    5722:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5726:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    572a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    572c:	025b      	lsls	r3, r3, #9
    572e:	b29b      	uxth	r3, r3
    5730:	f106 0008 	add.w	r0, r6, #8
    5734:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    5738:	430b      	orrs	r3, r1
    573a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    573e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    5742:	4809      	ldr	r0, [pc, #36]	; (5768 <pin_handler_set+0x64>)
}
    5744:	b002      	add	sp, #8
    5746:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5748:	f10d 0107 	add.w	r1, sp, #7
    574c:	4807      	ldr	r0, [pc, #28]	; (576c <pin_handler_set+0x68>)
    574e:	f7ff fd31 	bl	51b4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5752:	4b05      	ldr	r3, [pc, #20]	; (5768 <pin_handler_set+0x64>)
    5754:	4298      	cmp	r0, r3
    5756:	d1f5      	bne.n	5744 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    5758:	f89d 3007 	ldrb.w	r3, [sp, #7]
    575c:	e7e0      	b.n	5720 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    575e:	4802      	ldr	r0, [pc, #8]	; (5768 <pin_handler_set+0x64>)
    5760:	e7f0      	b.n	5744 <pin_handler_set+0x40>
    5762:	bf00      	nop
    5764:	20000054 	.word	0x20000054
    5768:	0bad0000 	.word	0x0bad0000
    576c:	200000c8 	.word	0x200000c8

00005770 <port_event_handle>:

static void port_event_handle(void)
{
    5770:	b570      	push	{r4, r5, r6, lr}
    5772:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5774:	4a2c      	ldr	r2, [pc, #176]	; (5828 <port_event_handle+0xb8>)
    5776:	466b      	mov	r3, sp
    5778:	e892 0003 	ldmia.w	r2, {r0, r1}
    577c:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5780:	2300      	movs	r3, #0
    5782:	a802      	add	r0, sp, #8
    5784:	e00b      	b.n	579e <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    5786:	aa04      	add	r2, sp, #16
    5788:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    578c:	f852 2c10 	ldr.w	r2, [r2, #-16]
    5790:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    5794:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5798:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    579c:	3301      	adds	r3, #1
    579e:	2b01      	cmp	r3, #1
    57a0:	d9f1      	bls.n	5786 <port_event_handle+0x16>
    57a2:	e03d      	b.n	5820 <port_event_handle+0xb0>
        case 1: return NRF_P1;
    57a4:	4e21      	ldr	r6, [pc, #132]	; (582c <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    57a6:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    57aa:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    57ae:	f3c2 4201 	ubfx	r2, r2, #16, #2
    57b2:	f7ff fee5 	bl	5580 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    57b6:	2301      	movs	r3, #1
    57b8:	40ab      	lsls	r3, r5
    57ba:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    57be:	ab04      	add	r3, sp, #16
    57c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    57c4:	f853 0c08 	ldr.w	r0, [r3, #-8]
    57c8:	b1f8      	cbz	r0, 580a <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
    57ca:	fa90 f0a0 	rbit	r0, r0
    57ce:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    57d2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    57d6:	f100 0208 	add.w	r2, r0, #8
    57da:	4b15      	ldr	r3, [pc, #84]	; (5830 <port_event_handle+0xc0>)
    57dc:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    57e0:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    57e4:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    57e6:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    57ea:	ae02      	add	r6, sp, #8
    57ec:	2301      	movs	r3, #1
    57ee:	fa03 f202 	lsl.w	r2, r3, r2
    57f2:	5d73      	ldrb	r3, [r6, r5]
    57f4:	ea23 0302 	bic.w	r3, r3, r2
    57f8:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
    57fa:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    57fe:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5800:	2b01      	cmp	r3, #1
    5802:	d0cf      	beq.n	57a4 <port_event_handle+0x34>
        case 0: return NRF_P0;
    5804:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    5808:	e7cd      	b.n	57a6 <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    580a:	3401      	adds	r4, #1
    580c:	2c01      	cmp	r4, #1
    580e:	d9d6      	bls.n	57be <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5810:	4b08      	ldr	r3, [pc, #32]	; (5834 <port_event_handle+0xc4>)
    5812:	2200      	movs	r2, #0
    5814:	601a      	str	r2, [r3, #0]
    5816:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    5818:	a802      	add	r0, sp, #8
    581a:	f7ff ff0b 	bl	5634 <latch_pending_read_and_check>
    581e:	b108      	cbz	r0, 5824 <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5820:	2400      	movs	r4, #0
    5822:	e7f3      	b.n	580c <port_event_handle+0x9c>
}
    5824:	b004      	add	sp, #16
    5826:	bd70      	pop	{r4, r5, r6, pc}
    5828:	00008cb0 	.word	0x00008cb0
    582c:	50000300 	.word	0x50000300
    5830:	20000054 	.word	0x20000054
    5834:	4000617c 	.word	0x4000617c

00005838 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    5838:	b538      	push	{r3, r4, r5, lr}
    583a:	4604      	mov	r4, r0
    while (mask)
    583c:	b1cc      	cbz	r4, 5872 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    583e:	fa94 f3a4 	rbit	r3, r4
    5842:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5846:	2201      	movs	r2, #1
    5848:	409a      	lsls	r2, r3
    584a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    584e:	4a09      	ldr	r2, [pc, #36]	; (5874 <gpiote_evt_handle+0x3c>)
    5850:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5854:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    5858:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    585c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5860:	f3c0 4001 	ubfx	r0, r0, #16, #2
    5864:	f002 fddd 	bl	8422 <gpiote_polarity_to_trigger>
    5868:	4601      	mov	r1, r0
    586a:	4628      	mov	r0, r5
    586c:	f7ff fe72 	bl	5554 <call_handler>
    5870:	e7e4      	b.n	583c <gpiote_evt_handle+0x4>
    }
}
    5872:	bd38      	pop	{r3, r4, r5, pc}
    5874:	40006000 	.word	0x40006000

00005878 <nrfx_gpiote_input_configure>:
{
    5878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    587c:	4604      	mov	r4, r0
    587e:	4615      	mov	r5, r2
    5880:	461e      	mov	r6, r3
    if (p_input_config)
    5882:	b361      	cbz	r1, 58de <nrfx_gpiote_input_configure+0x66>
    5884:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    5886:	f002 fdb6 	bl	83f6 <pin_is_task_output>
    588a:	2800      	cmp	r0, #0
    588c:	f040 8097 	bne.w	59be <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
    5890:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5894:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5896:	2b01      	cmp	r3, #1
    5898:	d042      	beq.n	5920 <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
    589a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    589e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    58a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    58a6:	2f00      	cmp	r7, #0
    58a8:	d03c      	beq.n	5924 <nrfx_gpiote_input_configure+0xac>
    58aa:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    58ac:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    58b0:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    58b4:	2f00      	cmp	r7, #0
    58b6:	d037      	beq.n	5928 <nrfx_gpiote_input_configure+0xb0>
    58b8:	7839      	ldrb	r1, [r7, #0]
    58ba:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    58bc:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    58be:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    58c2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    58c6:	4a42      	ldr	r2, [pc, #264]	; (59d0 <nrfx_gpiote_input_configure+0x158>)
    58c8:	f104 0108 	add.w	r1, r4, #8
    58cc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    58d0:	f023 0302 	bic.w	r3, r3, #2
    58d4:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    58d6:	f043 0301 	orr.w	r3, r3, #1
    58da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    58de:	b1b5      	cbz	r5, 590e <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    58e0:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    58e4:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    58e8:	4620      	mov	r0, r4
    58ea:	f7ff fde1 	bl	54b0 <pin_is_output>
    58ee:	b1e8      	cbz	r0, 592c <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
    58f0:	f1b9 0f00 	cmp.w	r9, #0
    58f4:	d165      	bne.n	59c2 <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    58f6:	4b36      	ldr	r3, [pc, #216]	; (59d0 <nrfx_gpiote_input_configure+0x158>)
    58f8:	f104 0208 	add.w	r2, r4, #8
    58fc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    5900:	f020 001c 	bic.w	r0, r0, #28
    5904:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5906:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    590a:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    590e:	2e00      	cmp	r6, #0
    5910:	d05b      	beq.n	59ca <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5912:	6872      	ldr	r2, [r6, #4]
    5914:	6831      	ldr	r1, [r6, #0]
    5916:	4620      	mov	r0, r4
    5918:	f7ff fef4 	bl	5704 <pin_handler_set>
}
    591c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
    5920:	482c      	ldr	r0, [pc, #176]	; (59d4 <nrfx_gpiote_input_configure+0x15c>)
    5922:	e7bc      	b.n	589e <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5924:	2100      	movs	r1, #0
    5926:	e7c1      	b.n	58ac <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5928:	2100      	movs	r1, #0
    592a:	e7c7      	b.n	58bc <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    592c:	4b28      	ldr	r3, [pc, #160]	; (59d0 <nrfx_gpiote_input_configure+0x158>)
    592e:	f104 0208 	add.w	r2, r4, #8
    5932:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    5936:	f027 0720 	bic.w	r7, r7, #32
    593a:	04ff      	lsls	r7, r7, #19
    593c:	0cff      	lsrs	r7, r7, #19
    593e:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    5942:	f1b9 0f00 	cmp.w	r9, #0
    5946:	d0d6      	beq.n	58f6 <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
    5948:	f1b8 0f03 	cmp.w	r8, #3
    594c:	d83b      	bhi.n	59c6 <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    594e:	686b      	ldr	r3, [r5, #4]
    5950:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5952:	f1b8 0f00 	cmp.w	r8, #0
    5956:	d106      	bne.n	5966 <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    5958:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    595c:	4b1e      	ldr	r3, [pc, #120]	; (59d8 <nrfx_gpiote_input_configure+0x160>)
    595e:	2200      	movs	r2, #0
    5960:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5964:	e7c7      	b.n	58f6 <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    5966:	4640      	mov	r0, r8
    5968:	f002 fd5c 	bl	8424 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    596c:	4b1a      	ldr	r3, [pc, #104]	; (59d8 <nrfx_gpiote_input_configure+0x160>)
    596e:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    5972:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5976:	f021 0103 	bic.w	r1, r1, #3
    597a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    597e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5982:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    5986:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    598a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    598e:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    5992:	0221      	lsls	r1, r4, #8
    5994:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    5998:	0400      	lsls	r0, r0, #16
    599a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    599e:	4301      	orrs	r1, r0
    59a0:	ea4c 0101 	orr.w	r1, ip, r1
    59a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    59a8:	036d      	lsls	r5, r5, #13
    59aa:	b2ad      	uxth	r5, r5
    59ac:	f104 0308 	add.w	r3, r4, #8
    59b0:	432f      	orrs	r7, r5
    59b2:	f047 0720 	orr.w	r7, r7, #32
    59b6:	4a06      	ldr	r2, [pc, #24]	; (59d0 <nrfx_gpiote_input_configure+0x158>)
    59b8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    59bc:	e79b      	b.n	58f6 <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
    59be:	4807      	ldr	r0, [pc, #28]	; (59dc <nrfx_gpiote_input_configure+0x164>)
    59c0:	e7ac      	b.n	591c <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
    59c2:	4806      	ldr	r0, [pc, #24]	; (59dc <nrfx_gpiote_input_configure+0x164>)
    59c4:	e7aa      	b.n	591c <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
    59c6:	4805      	ldr	r0, [pc, #20]	; (59dc <nrfx_gpiote_input_configure+0x164>)
    59c8:	e7a8      	b.n	591c <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
    59ca:	4805      	ldr	r0, [pc, #20]	; (59e0 <nrfx_gpiote_input_configure+0x168>)
    59cc:	e7a6      	b.n	591c <nrfx_gpiote_input_configure+0xa4>
    59ce:	bf00      	nop
    59d0:	20000054 	.word	0x20000054
    59d4:	50000300 	.word	0x50000300
    59d8:	40006000 	.word	0x40006000
    59dc:	0bad0004 	.word	0x0bad0004
    59e0:	0bad0000 	.word	0x0bad0000

000059e4 <nrfx_gpiote_output_configure>:
{
    59e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59e6:	4604      	mov	r4, r0
    59e8:	4615      	mov	r5, r2
    if (p_config)
    59ea:	2900      	cmp	r1, #0
    59ec:	d052      	beq.n	5a94 <nrfx_gpiote_output_configure+0xb0>
    59ee:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    59f0:	f002 fd10 	bl	8414 <pin_is_input>
    59f4:	b128      	cbz	r0, 5a02 <nrfx_gpiote_output_configure+0x1e>
    59f6:	4620      	mov	r0, r4
    59f8:	f7ff fd44 	bl	5484 <pin_in_use_by_te>
    59fc:	2800      	cmp	r0, #0
    59fe:	f040 809d 	bne.w	5b3c <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5a02:	4620      	mov	r0, r4
    5a04:	f7ff fd48 	bl	5498 <pin_has_trigger>
    5a08:	b118      	cbz	r0, 5a12 <nrfx_gpiote_output_configure+0x2e>
    5a0a:	7873      	ldrb	r3, [r6, #1]
    5a0c:	2b01      	cmp	r3, #1
    5a0e:	f000 8097 	beq.w	5b40 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5a12:	f106 0c01 	add.w	ip, r6, #1
    5a16:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    5a18:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5a1c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a1e:	2b01      	cmp	r3, #1
    5a20:	d07c      	beq.n	5b1c <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
    5a22:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5a26:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    5a2a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5a2e:	f1bc 0f00 	cmp.w	ip, #0
    5a32:	d075      	beq.n	5b20 <nrfx_gpiote_output_configure+0x13c>
    5a34:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5a36:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5a3a:	2f00      	cmp	r7, #0
    5a3c:	d072      	beq.n	5b24 <nrfx_gpiote_output_configure+0x140>
    5a3e:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5a42:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5a46:	2e00      	cmp	r6, #0
    5a48:	d06f      	beq.n	5b2a <nrfx_gpiote_output_configure+0x146>
    5a4a:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5a4e:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    5a52:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5a56:	f1bc 0f00 	cmp.w	ip, #0
    5a5a:	d069      	beq.n	5b30 <nrfx_gpiote_output_configure+0x14c>
    5a5c:	7873      	ldrb	r3, [r6, #1]
    5a5e:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5a60:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5a64:	2f00      	cmp	r7, #0
    5a66:	d065      	beq.n	5b34 <nrfx_gpiote_output_configure+0x150>
    5a68:	78b7      	ldrb	r7, [r6, #2]
    5a6a:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5a6c:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5a6e:	2e00      	cmp	r6, #0
    5a70:	d062      	beq.n	5b38 <nrfx_gpiote_output_configure+0x154>
    5a72:	7836      	ldrb	r6, [r6, #0]
    5a74:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5a76:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5a78:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    5a7a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5a7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5a82:	4a33      	ldr	r2, [pc, #204]	; (5b50 <nrfx_gpiote_output_configure+0x16c>)
    5a84:	f104 0108 	add.w	r1, r4, #8
    5a88:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5a8c:	f043 0303 	orr.w	r3, r3, #3
    5a90:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5a94:	2d00      	cmp	r5, #0
    5a96:	d055      	beq.n	5b44 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
    5a98:	4620      	mov	r0, r4
    5a9a:	f002 fcbb 	bl	8414 <pin_is_input>
    5a9e:	2800      	cmp	r0, #0
    5aa0:	d152      	bne.n	5b48 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
    5aa2:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    5aa4:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    5aa8:	4b2a      	ldr	r3, [pc, #168]	; (5b54 <nrfx_gpiote_output_configure+0x170>)
    5aaa:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5aae:	4928      	ldr	r1, [pc, #160]	; (5b50 <nrfx_gpiote_output_configure+0x16c>)
    5ab0:	f104 0008 	add.w	r0, r4, #8
    5ab4:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    5ab8:	f023 0320 	bic.w	r3, r3, #32
    5abc:	04db      	lsls	r3, r3, #19
    5abe:	0cdb      	lsrs	r3, r3, #19
    5ac0:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5ac4:	7869      	ldrb	r1, [r5, #1]
    5ac6:	2900      	cmp	r1, #0
    5ac8:	d040      	beq.n	5b4c <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    5aca:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5ace:	4d21      	ldr	r5, [pc, #132]	; (5b54 <nrfx_gpiote_output_configure+0x170>)
    5ad0:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    5ad4:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    5ad8:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    5adc:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    5ae0:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5ae4:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    5ae8:	0220      	lsls	r0, r4, #8
    5aea:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5aee:	0409      	lsls	r1, r1, #16
    5af0:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5af4:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5af6:	ea4f 500c 	mov.w	r0, ip, lsl #20
    5afa:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5afe:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b00:	4339      	orrs	r1, r7
    5b02:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5b06:	0352      	lsls	r2, r2, #13
    5b08:	b292      	uxth	r2, r2
    5b0a:	3408      	adds	r4, #8
    5b0c:	431a      	orrs	r2, r3
    5b0e:	f042 0220 	orr.w	r2, r2, #32
    5b12:	4b0f      	ldr	r3, [pc, #60]	; (5b50 <nrfx_gpiote_output_configure+0x16c>)
    5b14:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    5b18:	480f      	ldr	r0, [pc, #60]	; (5b58 <nrfx_gpiote_output_configure+0x174>)
    5b1a:	e014      	b.n	5b46 <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
    5b1c:	490f      	ldr	r1, [pc, #60]	; (5b5c <nrfx_gpiote_output_configure+0x178>)
    5b1e:	e782      	b.n	5a26 <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5b20:	2300      	movs	r3, #0
    5b22:	e788      	b.n	5a36 <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5b24:	f04f 0e00 	mov.w	lr, #0
    5b28:	e78b      	b.n	5a42 <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5b2a:	f04f 0e00 	mov.w	lr, #0
    5b2e:	e78e      	b.n	5a4e <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5b30:	2300      	movs	r3, #0
    5b32:	e795      	b.n	5a60 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5b34:	2700      	movs	r7, #0
    5b36:	e799      	b.n	5a6c <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5b38:	2600      	movs	r6, #0
    5b3a:	e79c      	b.n	5a76 <nrfx_gpiote_output_configure+0x92>
    5b3c:	4808      	ldr	r0, [pc, #32]	; (5b60 <nrfx_gpiote_output_configure+0x17c>)
    5b3e:	e002      	b.n	5b46 <nrfx_gpiote_output_configure+0x162>
    5b40:	4807      	ldr	r0, [pc, #28]	; (5b60 <nrfx_gpiote_output_configure+0x17c>)
    5b42:	e000      	b.n	5b46 <nrfx_gpiote_output_configure+0x162>
    5b44:	4804      	ldr	r0, [pc, #16]	; (5b58 <nrfx_gpiote_output_configure+0x174>)
}
    5b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    5b48:	4805      	ldr	r0, [pc, #20]	; (5b60 <nrfx_gpiote_output_configure+0x17c>)
    5b4a:	e7fc      	b.n	5b46 <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
    5b4c:	4802      	ldr	r0, [pc, #8]	; (5b58 <nrfx_gpiote_output_configure+0x174>)
    5b4e:	e7fa      	b.n	5b46 <nrfx_gpiote_output_configure+0x162>
    5b50:	20000054 	.word	0x20000054
    5b54:	40006000 	.word	0x40006000
    5b58:	0bad0000 	.word	0x0bad0000
    5b5c:	50000300 	.word	0x50000300
    5b60:	0bad0004 	.word	0x0bad0004

00005b64 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5b64:	4b01      	ldr	r3, [pc, #4]	; (5b6c <nrfx_gpiote_global_callback_set+0x8>)
    5b66:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    5b68:	60d9      	str	r1, [r3, #12]
}
    5b6a:	4770      	bx	lr
    5b6c:	20000054 	.word	0x20000054

00005b70 <nrfx_gpiote_channel_get>:
{
    5b70:	b538      	push	{r3, r4, r5, lr}
    5b72:	4604      	mov	r4, r0
    5b74:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    5b76:	f7ff fc85 	bl	5484 <pin_in_use_by_te>
    5b7a:	b140      	cbz	r0, 5b8e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5b7c:	f104 0008 	add.w	r0, r4, #8
    5b80:	4b04      	ldr	r3, [pc, #16]	; (5b94 <nrfx_gpiote_channel_get+0x24>)
    5b82:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    5b86:	0b5b      	lsrs	r3, r3, #13
    5b88:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    5b8a:	4803      	ldr	r0, [pc, #12]	; (5b98 <nrfx_gpiote_channel_get+0x28>)
}
    5b8c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5b8e:	4803      	ldr	r0, [pc, #12]	; (5b9c <nrfx_gpiote_channel_get+0x2c>)
    5b90:	e7fc      	b.n	5b8c <nrfx_gpiote_channel_get+0x1c>
    5b92:	bf00      	nop
    5b94:	20000054 	.word	0x20000054
    5b98:	0bad0000 	.word	0x0bad0000
    5b9c:	0bad0004 	.word	0x0bad0004

00005ba0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5ba0:	4b0f      	ldr	r3, [pc, #60]	; (5be0 <nrfx_gpiote_init+0x40>)
    5ba2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5ba6:	b10b      	cbz	r3, 5bac <nrfx_gpiote_init+0xc>
        return err_code;
    5ba8:	480e      	ldr	r0, [pc, #56]	; (5be4 <nrfx_gpiote_init+0x44>)
}
    5baa:	4770      	bx	lr
{
    5bac:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5bae:	4c0c      	ldr	r4, [pc, #48]	; (5be0 <nrfx_gpiote_init+0x40>)
    5bb0:	2260      	movs	r2, #96	; 0x60
    5bb2:	2100      	movs	r1, #0
    5bb4:	f104 0010 	add.w	r0, r4, #16
    5bb8:	f002 fee9 	bl	898e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5bbc:	2006      	movs	r0, #6
    5bbe:	f7fd fe47 	bl	3850 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5bc2:	4b09      	ldr	r3, [pc, #36]	; (5be8 <nrfx_gpiote_init+0x48>)
    5bc4:	2200      	movs	r2, #0
    5bc6:	601a      	str	r2, [r3, #0]
    5bc8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5bca:	4b08      	ldr	r3, [pc, #32]	; (5bec <nrfx_gpiote_init+0x4c>)
    5bcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5bd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5bd4:	2301      	movs	r3, #1
    5bd6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5bda:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    5bdc:	4804      	ldr	r0, [pc, #16]	; (5bf0 <nrfx_gpiote_init+0x50>)
}
    5bde:	bd10      	pop	{r4, pc}
    5be0:	20000054 	.word	0x20000054
    5be4:	0bad0005 	.word	0x0bad0005
    5be8:	4000617c 	.word	0x4000617c
    5bec:	40006000 	.word	0x40006000
    5bf0:	0bad0000 	.word	0x0bad0000

00005bf4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5bf4:	4b03      	ldr	r3, [pc, #12]	; (5c04 <nrfx_gpiote_is_init+0x10>)
    5bf6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5bfa:	3800      	subs	r0, #0
    5bfc:	bf18      	it	ne
    5bfe:	2001      	movne	r0, #1
    5c00:	4770      	bx	lr
    5c02:	bf00      	nop
    5c04:	20000054 	.word	0x20000054

00005c08 <nrfx_gpiote_channel_free>:
{
    5c08:	b508      	push	{r3, lr}
    5c0a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5c0c:	4801      	ldr	r0, [pc, #4]	; (5c14 <nrfx_gpiote_channel_free+0xc>)
    5c0e:	f7ff faf5 	bl	51fc <nrfx_flag32_free>
}
    5c12:	bd08      	pop	{r3, pc}
    5c14:	200000c4 	.word	0x200000c4

00005c18 <nrfx_gpiote_channel_alloc>:
{
    5c18:	b508      	push	{r3, lr}
    5c1a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5c1c:	4801      	ldr	r0, [pc, #4]	; (5c24 <nrfx_gpiote_channel_alloc+0xc>)
    5c1e:	f7ff fac9 	bl	51b4 <nrfx_flag32_alloc>
}
    5c22:	bd08      	pop	{r3, pc}
    5c24:	200000c4 	.word	0x200000c4

00005c28 <nrfx_gpiote_trigger_enable>:
{
    5c28:	b538      	push	{r3, r4, r5, lr}
    5c2a:	4604      	mov	r4, r0
    5c2c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5c2e:	f7ff fc29 	bl	5484 <pin_in_use_by_te>
    5c32:	b308      	cbz	r0, 5c78 <nrfx_gpiote_trigger_enable+0x50>
    5c34:	4620      	mov	r0, r4
    5c36:	f002 fbed 	bl	8414 <pin_is_input>
    5c3a:	b1e8      	cbz	r0, 5c78 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    5c3c:	4620      	mov	r0, r4
    5c3e:	f7ff fc41 	bl	54c4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5c42:	0083      	lsls	r3, r0, #2
    5c44:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    5c48:	b29b      	uxth	r3, r3
    5c4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5c4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5c52:	2200      	movs	r2, #0
    5c54:	601a      	str	r2, [r3, #0]
    5c56:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5c58:	4a22      	ldr	r2, [pc, #136]	; (5ce4 <nrfx_gpiote_trigger_enable+0xbc>)
    5c5a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    5c5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5c62:	f043 0301 	orr.w	r3, r3, #1
    5c66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    5c6a:	b39d      	cbz	r5, 5cd4 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5c6c:	2301      	movs	r3, #1
    5c6e:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    5c72:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    5c76:	e02d      	b.n	5cd4 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5c78:	f104 0308 	add.w	r3, r4, #8
    5c7c:	4a1a      	ldr	r2, [pc, #104]	; (5ce8 <nrfx_gpiote_trigger_enable+0xc0>)
    5c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5c82:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5c86:	2b04      	cmp	r3, #4
    5c88:	d012      	beq.n	5cb0 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5c8a:	2b05      	cmp	r3, #5
    5c8c:	d023      	beq.n	5cd6 <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
    5c8e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5c92:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5c94:	2b01      	cmp	r3, #1
    5c96:	d009      	beq.n	5cac <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
    5c98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    5c9c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5ca0:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5ca2:	f013 0f01 	tst.w	r3, #1
    5ca6:	d018      	beq.n	5cda <nrfx_gpiote_trigger_enable+0xb2>
    5ca8:	2003      	movs	r0, #3
    5caa:	e002      	b.n	5cb2 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    5cac:	4b0f      	ldr	r3, [pc, #60]	; (5cec <nrfx_gpiote_trigger_enable+0xc4>)
    5cae:	e7f5      	b.n	5c9c <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5cb0:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    5cb2:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    5cb6:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5cb8:	2c01      	cmp	r4, #1
    5cba:	d010      	beq.n	5cde <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
    5cbc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5cc0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5cc4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5cc8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5ccc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5cd0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    5cd4:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5cd6:	2002      	movs	r0, #2
    5cd8:	e7eb      	b.n	5cb2 <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5cda:	2002      	movs	r0, #2
    5cdc:	e7e9      	b.n	5cb2 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    5cde:	4903      	ldr	r1, [pc, #12]	; (5cec <nrfx_gpiote_trigger_enable+0xc4>)
    5ce0:	e7ee      	b.n	5cc0 <nrfx_gpiote_trigger_enable+0x98>
    5ce2:	bf00      	nop
    5ce4:	40006000 	.word	0x40006000
    5ce8:	20000054 	.word	0x20000054
    5cec:	50000300 	.word	0x50000300

00005cf0 <nrfx_gpiote_trigger_disable>:
{
    5cf0:	b510      	push	{r4, lr}
    5cf2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5cf4:	f7ff fbc6 	bl	5484 <pin_in_use_by_te>
    5cf8:	b1a0      	cbz	r0, 5d24 <nrfx_gpiote_trigger_disable+0x34>
    5cfa:	4620      	mov	r0, r4
    5cfc:	f002 fb8a 	bl	8414 <pin_is_input>
    5d00:	b180      	cbz	r0, 5d24 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    5d02:	4620      	mov	r0, r4
    5d04:	f7ff fbde 	bl	54c4 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5d08:	2201      	movs	r2, #1
    5d0a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    5d0c:	4b0e      	ldr	r3, [pc, #56]	; (5d48 <nrfx_gpiote_trigger_disable+0x58>)
    5d0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5d12:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5d16:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    5d1a:	f022 0203 	bic.w	r2, r2, #3
    5d1e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    5d22:	e00e      	b.n	5d42 <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
    5d24:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    5d28:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d2a:	2c01      	cmp	r4, #1
    5d2c:	d00a      	beq.n	5d44 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
    5d2e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5d32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5d36:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5d3a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    5d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d42:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    5d44:	4901      	ldr	r1, [pc, #4]	; (5d4c <nrfx_gpiote_trigger_disable+0x5c>)
    5d46:	e7f4      	b.n	5d32 <nrfx_gpiote_trigger_disable+0x42>
    5d48:	40006000 	.word	0x40006000
    5d4c:	50000300 	.word	0x50000300

00005d50 <nrfx_gpiote_pin_uninit>:
{
    5d50:	b510      	push	{r4, lr}
    5d52:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5d54:	f7ff fb8c 	bl	5470 <pin_in_use>
    5d58:	b908      	cbnz	r0, 5d5e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    5d5a:	480c      	ldr	r0, [pc, #48]	; (5d8c <nrfx_gpiote_pin_uninit+0x3c>)
}
    5d5c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    5d5e:	4620      	mov	r0, r4
    5d60:	f7ff ffc6 	bl	5cf0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5d64:	4620      	mov	r0, r4
    5d66:	f7ff fcb1 	bl	56cc <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    5d6a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    5d6e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d70:	2c01      	cmp	r4, #1
    5d72:	d008      	beq.n	5d86 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    5d74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5d78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5d7c:	2102      	movs	r1, #2
    5d7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    5d82:	4803      	ldr	r0, [pc, #12]	; (5d90 <nrfx_gpiote_pin_uninit+0x40>)
    5d84:	e7ea      	b.n	5d5c <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    5d86:	4a03      	ldr	r2, [pc, #12]	; (5d94 <nrfx_gpiote_pin_uninit+0x44>)
    5d88:	e7f6      	b.n	5d78 <nrfx_gpiote_pin_uninit+0x28>
    5d8a:	bf00      	nop
    5d8c:	0bad0004 	.word	0x0bad0004
    5d90:	0bad0000 	.word	0x0bad0000
    5d94:	50000300 	.word	0x50000300

00005d98 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    5d98:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5d9a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    5d9c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5da0:	2100      	movs	r1, #0
    uint32_t status = 0;
    5da2:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5da4:	e003      	b.n	5dae <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    5da6:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    5da8:	3304      	adds	r3, #4
    5daa:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5dac:	3101      	adds	r1, #1
    5dae:	2907      	cmp	r1, #7
    5db0:	d814      	bhi.n	5ddc <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5db2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5db6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    5dba:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5dbc:	2a00      	cmp	r2, #0
    5dbe:	d0f2      	beq.n	5da6 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    5dc0:	4a0b      	ldr	r2, [pc, #44]	; (5df0 <nrfx_gpiote_irq_handler+0x58>)
    5dc2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5dc6:	4210      	tst	r0, r2
    5dc8:	d0ed      	beq.n	5da6 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    5dca:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5dce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5dd2:	2400      	movs	r4, #0
    5dd4:	6014      	str	r4, [r2, #0]
    5dd6:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    5dd8:	4305      	orrs	r5, r0
    5dda:	e7e4      	b.n	5da6 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ddc:	4b05      	ldr	r3, [pc, #20]	; (5df4 <nrfx_gpiote_irq_handler+0x5c>)
    5dde:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5de0:	b91b      	cbnz	r3, 5dea <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    5de2:	4628      	mov	r0, r5
    5de4:	f7ff fd28 	bl	5838 <gpiote_evt_handle>
}
    5de8:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    5dea:	f7ff fcc1 	bl	5770 <port_event_handle>
    5dee:	e7f8      	b.n	5de2 <nrfx_gpiote_irq_handler+0x4a>
    5df0:	40006000 	.word	0x40006000
    5df4:	4000617c 	.word	0x4000617c

00005df8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5df8:	b508      	push	{r3, lr}
    5dfa:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5dfc:	4801      	ldr	r0, [pc, #4]	; (5e04 <nrfx_ppi_channel_alloc+0xc>)
    5dfe:	f7ff f9d9 	bl	51b4 <nrfx_flag32_alloc>
}
    5e02:	bd08      	pop	{r3, pc}
    5e04:	200000d0 	.word	0x200000d0

00005e08 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5e08:	4b14      	ldr	r3, [pc, #80]	; (5e5c <_DoInit+0x54>)
    5e0a:	2203      	movs	r2, #3
    5e0c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5e0e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5e10:	4913      	ldr	r1, [pc, #76]	; (5e60 <_DoInit+0x58>)
    5e12:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5e14:	4a13      	ldr	r2, [pc, #76]	; (5e64 <_DoInit+0x5c>)
    5e16:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5e1c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    5e1e:	2200      	movs	r2, #0
    5e20:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5e22:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5e24:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5e26:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5e28:	490f      	ldr	r1, [pc, #60]	; (5e68 <_DoInit+0x60>)
    5e2a:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5e2c:	2110      	movs	r1, #16
    5e2e:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    5e30:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5e32:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5e34:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5e36:	4a0d      	ldr	r2, [pc, #52]	; (5e6c <_DoInit+0x64>)
    5e38:	6810      	ldr	r0, [r2, #0]
    5e3a:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5e3e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    5e42:	4a0b      	ldr	r2, [pc, #44]	; (5e70 <_DoInit+0x68>)
    5e44:	e892 0003 	ldmia.w	r2, {r0, r1}
    5e48:	6018      	str	r0, [r3, #0]
    5e4a:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5e4c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    5e50:	2220      	movs	r2, #32
    5e52:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5e54:	f3bf 8f5f 	dmb	sy
}
    5e58:	4770      	bx	lr
    5e5a:	bf00      	nop
    5e5c:	200009d4 	.word	0x200009d4
    5e60:	00008fa0 	.word	0x00008fa0
    5e64:	20000a8c 	.word	0x20000a8c
    5e68:	20000a7c 	.word	0x20000a7c
    5e6c:	00008fac 	.word	0x00008fac
    5e70:	00008fb0 	.word	0x00008fb0

00005e74 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    5e74:	4b03      	ldr	r3, [pc, #12]	; (5e84 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    5e76:	4a04      	ldr	r2, [pc, #16]	; (5e88 <z_device_state_init+0x14>)
    5e78:	4293      	cmp	r3, r2
    5e7a:	d201      	bcs.n	5e80 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    5e7c:	3318      	adds	r3, #24
    5e7e:	e7fa      	b.n	5e76 <z_device_state_init+0x2>
	}
}
    5e80:	4770      	bx	lr
    5e82:	bf00      	nop
    5e84:	00008a5c 	.word	0x00008a5c
    5e88:	00008ad4 	.word	0x00008ad4

00005e8c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    5e8c:	b570      	push	{r4, r5, r6, lr}
    5e8e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5e90:	4b11      	ldr	r3, [pc, #68]	; (5ed8 <z_sys_init_run_level+0x4c>)
    5e92:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5e96:	e009      	b.n	5eac <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    5e98:	4240      	negs	r0, r0
    5e9a:	e017      	b.n	5ecc <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    5e9c:	68eb      	ldr	r3, [r5, #12]
    5e9e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    5ea0:	68ea      	ldr	r2, [r5, #12]
    5ea2:	7853      	ldrb	r3, [r2, #1]
    5ea4:	f043 0301 	orr.w	r3, r3, #1
    5ea8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5eaa:	3408      	adds	r4, #8
    5eac:	1c73      	adds	r3, r6, #1
    5eae:	4a0a      	ldr	r2, [pc, #40]	; (5ed8 <z_sys_init_run_level+0x4c>)
    5eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5eb4:	42a3      	cmp	r3, r4
    5eb6:	d90d      	bls.n	5ed4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    5eb8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    5eba:	6823      	ldr	r3, [r4, #0]
    5ebc:	4628      	mov	r0, r5
    5ebe:	4798      	blx	r3
		if (dev != NULL) {
    5ec0:	2d00      	cmp	r5, #0
    5ec2:	d0f2      	beq.n	5eaa <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    5ec4:	2800      	cmp	r0, #0
    5ec6:	d0eb      	beq.n	5ea0 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    5ec8:	2800      	cmp	r0, #0
    5eca:	dbe5      	blt.n	5e98 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    5ecc:	28ff      	cmp	r0, #255	; 0xff
    5ece:	dde5      	ble.n	5e9c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    5ed0:	20ff      	movs	r0, #255	; 0xff
    5ed2:	e7e3      	b.n	5e9c <z_sys_init_run_level+0x10>
		}
	}
}
    5ed4:	bd70      	pop	{r4, r5, r6, pc}
    5ed6:	bf00      	nop
    5ed8:	00008fb8 	.word	0x00008fb8

00005edc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    5edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ede:	b089      	sub	sp, #36	; 0x24
    5ee0:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    5ee2:	4b15      	ldr	r3, [pc, #84]	; (5f38 <init_idle_thread+0x5c>)
    5ee4:	25b0      	movs	r5, #176	; 0xb0
    5ee6:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    5eea:	4b14      	ldr	r3, [pc, #80]	; (5f3c <init_idle_thread+0x60>)
    5eec:	f44f 76b0 	mov.w	r6, #352	; 0x160
    5ef0:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    5ef4:	af06      	add	r7, sp, #24
    5ef6:	4603      	mov	r3, r0
    5ef8:	4a11      	ldr	r2, [pc, #68]	; (5f40 <init_idle_thread+0x64>)
    5efa:	2108      	movs	r1, #8
    5efc:	4638      	mov	r0, r7
    5efe:	f001 fc8e 	bl	781e <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5f02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5f06:	480f      	ldr	r0, [pc, #60]	; (5f44 <init_idle_thread+0x68>)
    5f08:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    5f0c:	9705      	str	r7, [sp, #20]
    5f0e:	2301      	movs	r3, #1
    5f10:	9304      	str	r3, [sp, #16]
    5f12:	230f      	movs	r3, #15
    5f14:	9303      	str	r3, [sp, #12]
    5f16:	2300      	movs	r3, #0
    5f18:	9302      	str	r3, [sp, #8]
    5f1a:	9301      	str	r3, [sp, #4]
    5f1c:	9400      	str	r4, [sp, #0]
    5f1e:	4b0a      	ldr	r3, [pc, #40]	; (5f48 <init_idle_thread+0x6c>)
    5f20:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5f24:	4631      	mov	r1, r6
    5f26:	4628      	mov	r0, r5
    5f28:	f000 f958 	bl	61dc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5f2c:	7b6b      	ldrb	r3, [r5, #13]
    5f2e:	f023 0304 	bic.w	r3, r3, #4
    5f32:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    5f34:	b009      	add	sp, #36	; 0x24
    5f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f38:	200001c0 	.word	0x200001c0
    5f3c:	200014e0 	.word	0x200014e0
    5f40:	00008fd0 	.word	0x00008fd0
    5f44:	20000e8c 	.word	0x20000e8c
    5f48:	00006341 	.word	0x00006341

00005f4c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    5f4c:	b570      	push	{r4, r5, r6, lr}
    5f4e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    5f50:	f000 ff0c 	bl	6d6c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    5f54:	4d1b      	ldr	r5, [pc, #108]	; (5fc4 <prepare_multithreading+0x78>)
    5f56:	4b1c      	ldr	r3, [pc, #112]	; (5fc8 <prepare_multithreading+0x7c>)
    5f58:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5f5a:	4b1c      	ldr	r3, [pc, #112]	; (5fcc <prepare_multithreading+0x80>)
    5f5c:	9305      	str	r3, [sp, #20]
    5f5e:	2301      	movs	r3, #1
    5f60:	9304      	str	r3, [sp, #16]
    5f62:	2400      	movs	r4, #0
    5f64:	9403      	str	r4, [sp, #12]
    5f66:	9402      	str	r4, [sp, #8]
    5f68:	9401      	str	r4, [sp, #4]
    5f6a:	9400      	str	r4, [sp, #0]
    5f6c:	4b18      	ldr	r3, [pc, #96]	; (5fd0 <prepare_multithreading+0x84>)
    5f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5f72:	4918      	ldr	r1, [pc, #96]	; (5fd4 <prepare_multithreading+0x88>)
    5f74:	4628      	mov	r0, r5
    5f76:	f000 f931 	bl	61dc <z_setup_new_thread>
    5f7a:	4606      	mov	r6, r0
    5f7c:	7b6b      	ldrb	r3, [r5, #13]
    5f7e:	f023 0304 	bic.w	r3, r3, #4
    5f82:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    5f84:	4628      	mov	r0, r5
    5f86:	f002 fb72 	bl	866e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    5f8a:	2c00      	cmp	r4, #0
    5f8c:	dd02      	ble.n	5f94 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    5f8e:	4630      	mov	r0, r6
    5f90:	b006      	add	sp, #24
    5f92:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    5f94:	4620      	mov	r0, r4
    5f96:	f7ff ffa1 	bl	5edc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5f9a:	4b0f      	ldr	r3, [pc, #60]	; (5fd8 <prepare_multithreading+0x8c>)
    5f9c:	22b0      	movs	r2, #176	; 0xb0
    5f9e:	fb02 3204 	mla	r2, r2, r4, r3
    5fa2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    5fa6:	4b08      	ldr	r3, [pc, #32]	; (5fc8 <prepare_multithreading+0x7c>)
    5fa8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5fac:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    5fae:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    5fb0:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    5fb4:	4a09      	ldr	r2, [pc, #36]	; (5fdc <prepare_multithreading+0x90>)
    5fb6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    5fba:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    5fbe:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    5fc0:	3401      	adds	r4, #1
    5fc2:	e7e2      	b.n	5f8a <prepare_multithreading+0x3e>
    5fc4:	20000270 	.word	0x20000270
    5fc8:	20000e8c 	.word	0x20000e8c
    5fcc:	00008fdc 	.word	0x00008fdc
    5fd0:	00005fe1 	.word	0x00005fe1
    5fd4:	200010c0 	.word	0x200010c0
    5fd8:	200001c0 	.word	0x200001c0
    5fdc:	20001640 	.word	0x20001640

00005fe0 <bg_thread_main>:
{
    5fe0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5fe2:	4b0a      	ldr	r3, [pc, #40]	; (600c <bg_thread_main+0x2c>)
    5fe4:	2201      	movs	r2, #1
    5fe6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5fe8:	2002      	movs	r0, #2
    5fea:	f7ff ff4f 	bl	5e8c <z_sys_init_run_level>
	boot_banner();
    5fee:	f001 f957 	bl	72a0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5ff2:	2003      	movs	r0, #3
    5ff4:	f7ff ff4a 	bl	5e8c <z_sys_init_run_level>
	z_init_static_threads();
    5ff8:	f000 f954 	bl	62a4 <z_init_static_threads>
	main();
    5ffc:	f7fc fab2 	bl	2564 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6000:	4a03      	ldr	r2, [pc, #12]	; (6010 <bg_thread_main+0x30>)
    6002:	7b13      	ldrb	r3, [r2, #12]
    6004:	f023 0301 	bic.w	r3, r3, #1
    6008:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    600a:	bd08      	pop	{r3, pc}
    600c:	20000ee9 	.word	0x20000ee9
    6010:	20000270 	.word	0x20000270

00006014 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    6014:	b508      	push	{r3, lr}
    6016:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6018:	4a01      	ldr	r2, [pc, #4]	; (6020 <switch_to_main_thread+0xc>)
    601a:	4802      	ldr	r0, [pc, #8]	; (6024 <switch_to_main_thread+0x10>)
    601c:	f7fd fd14 	bl	3a48 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6020:	00005fe1 	.word	0x00005fe1
    6024:	20000270 	.word	0x20000270

00006028 <z_bss_zero>:
{
    6028:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    602a:	4803      	ldr	r0, [pc, #12]	; (6038 <z_bss_zero+0x10>)
    602c:	4a03      	ldr	r2, [pc, #12]	; (603c <z_bss_zero+0x14>)
    602e:	1a12      	subs	r2, r2, r0
    6030:	2100      	movs	r1, #0
    6032:	f002 fcac 	bl	898e <memset>
}
    6036:	bd08      	pop	{r3, pc}
    6038:	200001a0 	.word	0x200001a0
    603c:	200010a8 	.word	0x200010a8

00006040 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6040:	b500      	push	{lr}
    6042:	b0ad      	sub	sp, #180	; 0xb4
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6044:	4b1c      	ldr	r3, [pc, #112]	; (60b8 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6046:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    604a:	4c1c      	ldr	r4, [pc, #112]	; (60bc <z_cstart+0x7c>)
    604c:	6963      	ldr	r3, [r4, #20]
    604e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6052:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6054:	23e0      	movs	r3, #224	; 0xe0
    6056:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    605a:	2500      	movs	r5, #0
    605c:	77e5      	strb	r5, [r4, #31]
    605e:	7625      	strb	r5, [r4, #24]
    6060:	7665      	strb	r5, [r4, #25]
    6062:	76a5      	strb	r5, [r4, #26]
    6064:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6068:	6a63      	ldr	r3, [r4, #36]	; 0x24
    606a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    606e:	6263      	str	r3, [r4, #36]	; 0x24
    6070:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6074:	f7fd fe40 	bl	3cf8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6078:	f7fd fbcc 	bl	3814 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    607c:	f04f 33ff 	mov.w	r3, #4294967295
    6080:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6082:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6084:	f7fd ff42 	bl	3f0c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6088:	f7fd fedc 	bl	3e44 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    608c:	2401      	movs	r4, #1
    608e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    6092:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    6096:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    6098:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    609a:	4b09      	ldr	r3, [pc, #36]	; (60c0 <z_cstart+0x80>)
    609c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    60a0:	f7ff fee8 	bl	5e74 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    60a4:	4628      	mov	r0, r5
    60a6:	f7ff fef1 	bl	5e8c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    60aa:	4620      	mov	r0, r4
    60ac:	f7ff feee 	bl	5e8c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    60b0:	f7ff ff4c 	bl	5f4c <prepare_multithreading>
    60b4:	f7ff ffae 	bl	6014 <switch_to_main_thread>
    60b8:	20001e60 	.word	0x20001e60
    60bc:	e000ed00 	.word	0xe000ed00
    60c0:	20000e8c 	.word	0x20000e8c

000060c4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    60c4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    60c6:	4c06      	ldr	r4, [pc, #24]	; (60e0 <init_mem_slab_module+0x1c>)
	int rc = 0;
    60c8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    60ca:	4b06      	ldr	r3, [pc, #24]	; (60e4 <init_mem_slab_module+0x20>)
    60cc:	429c      	cmp	r4, r3
    60ce:	d206      	bcs.n	60de <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    60d0:	4620      	mov	r0, r4
    60d2:	f002 f9dd 	bl	8490 <create_free_list>
		if (rc < 0) {
    60d6:	2800      	cmp	r0, #0
    60d8:	db01      	blt.n	60de <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    60da:	341c      	adds	r4, #28
    60dc:	e7f5      	b.n	60ca <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    60de:	bd10      	pop	{r4, pc}
    60e0:	20000150 	.word	0x20000150
    60e4:	20000150 	.word	0x20000150

000060e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    60e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    60ea:	b083      	sub	sp, #12
    60ec:	460c      	mov	r4, r1
    60ee:	461f      	mov	r7, r3
	__asm__ volatile(
    60f0:	f04f 0320 	mov.w	r3, #32
    60f4:	f3ef 8111 	mrs	r1, BASEPRI
    60f8:	f383 8812 	msr	BASEPRI_MAX, r3
    60fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6100:	6943      	ldr	r3, [r0, #20]
    6102:	b16b      	cbz	r3, 6120 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    6104:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    6106:	6943      	ldr	r3, [r0, #20]
    6108:	681b      	ldr	r3, [r3, #0]
    610a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    610c:	6983      	ldr	r3, [r0, #24]
    610e:	3301      	adds	r3, #1
    6110:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6112:	2000      	movs	r0, #0
	__asm__ volatile(
    6114:	f381 8811 	msr	BASEPRI, r1
    6118:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    611c:	b003      	add	sp, #12
    611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6120:	4616      	mov	r6, r2
    6122:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6126:	ea56 0307 	orrs.w	r3, r6, r7
    612a:	d104      	bne.n	6136 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    612c:	2300      	movs	r3, #0
    612e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    6130:	f06f 000b 	mvn.w	r0, #11
    6134:	e7ee      	b.n	6114 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6136:	e9cd 6700 	strd	r6, r7, [sp]
    613a:	4602      	mov	r2, r0
    613c:	4628      	mov	r0, r5
    613e:	f000 fceb 	bl	6b18 <z_pend_curr>
		if (result == 0) {
    6142:	2800      	cmp	r0, #0
    6144:	d1ea      	bne.n	611c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    6146:	4b02      	ldr	r3, [pc, #8]	; (6150 <k_mem_slab_alloc+0x68>)
    6148:	689b      	ldr	r3, [r3, #8]
    614a:	695b      	ldr	r3, [r3, #20]
    614c:	6023      	str	r3, [r4, #0]
		return result;
    614e:	e7e5      	b.n	611c <k_mem_slab_alloc+0x34>
    6150:	20000e8c 	.word	0x20000e8c

00006154 <z_thread_monitor_exit>:
	__asm__ volatile(
    6154:	f04f 0320 	mov.w	r3, #32
    6158:	f3ef 8111 	mrs	r1, BASEPRI
    615c:	f383 8812 	msr	BASEPRI_MAX, r3
    6160:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    6164:	4b0a      	ldr	r3, [pc, #40]	; (6190 <z_thread_monitor_exit+0x3c>)
    6166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6168:	4283      	cmp	r3, r0
    616a:	d104      	bne.n	6176 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    616c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    616e:	4b08      	ldr	r3, [pc, #32]	; (6190 <z_thread_monitor_exit+0x3c>)
    6170:	629a      	str	r2, [r3, #40]	; 0x28
    6172:	e007      	b.n	6184 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    6174:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    6176:	b113      	cbz	r3, 617e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    6178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    617a:	4282      	cmp	r2, r0
    617c:	d1fa      	bne.n	6174 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    617e:	b10b      	cbz	r3, 6184 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    6180:	6f02      	ldr	r2, [r0, #112]	; 0x70
    6182:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    6184:	f381 8811 	msr	BASEPRI, r1
    6188:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    618c:	4770      	bx	lr
    618e:	bf00      	nop
    6190:	20000e8c 	.word	0x20000e8c

00006194 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    6194:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    6196:	4604      	mov	r4, r0
    6198:	b140      	cbz	r0, 61ac <z_impl_k_thread_name_set+0x18>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    619a:	2220      	movs	r2, #32
    619c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    61a0:	f002 fbfd 	bl	899e <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    61a4:	2000      	movs	r0, #0
    61a6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    61aa:	bd10      	pop	{r4, pc}
		thread = _current;
    61ac:	4b01      	ldr	r3, [pc, #4]	; (61b4 <z_impl_k_thread_name_set+0x20>)
    61ae:	689c      	ldr	r4, [r3, #8]
    61b0:	e7f3      	b.n	619a <z_impl_k_thread_name_set+0x6>
    61b2:	bf00      	nop
    61b4:	20000e8c 	.word	0x20000e8c

000061b8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    61b8:	b538      	push	{r3, r4, r5, lr}
    61ba:	4614      	mov	r4, r2
    61bc:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    61be:	ea54 0305 	orrs.w	r3, r4, r5
    61c2:	d102      	bne.n	61ca <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    61c4:	f002 f9cd 	bl	8562 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    61c8:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    61ca:	462b      	mov	r3, r5
    61cc:	4902      	ldr	r1, [pc, #8]	; (61d8 <schedule_new_thread+0x20>)
    61ce:	3018      	adds	r0, #24
    61d0:	f000 ff3a 	bl	7048 <z_add_timeout>
    61d4:	e7f8      	b.n	61c8 <schedule_new_thread+0x10>
    61d6:	bf00      	nop
    61d8:	000086a7 	.word	0x000086a7

000061dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    61dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61e0:	b085      	sub	sp, #20
    61e2:	4604      	mov	r4, r0
    61e4:	460f      	mov	r7, r1
    61e6:	4615      	mov	r5, r2
    61e8:	461e      	mov	r6, r3
    61ea:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    61ee:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    61f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    61f6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    61fa:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    61fe:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    6200:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    6202:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6204:	2204      	movs	r2, #4
    6206:	9911      	ldr	r1, [sp, #68]	; 0x44
    6208:	f002 f9af 	bl	856a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    620c:	462a      	mov	r2, r5
    620e:	4639      	mov	r1, r7
    6210:	4620      	mov	r0, r4
    6212:	f002 f98e 	bl	8532 <setup_thread_stack>
    6216:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6218:	f8cd 8008 	str.w	r8, [sp, #8]
    621c:	f8cd 9004 	str.w	r9, [sp, #4]
    6220:	f8cd a000 	str.w	sl, [sp]
    6224:	4633      	mov	r3, r6
    6226:	4602      	mov	r2, r0
    6228:	4639      	mov	r1, r7
    622a:	4620      	mov	r0, r4
    622c:	f7fd fbbc 	bl	39a8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    6230:	2300      	movs	r3, #0
    6232:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    6234:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    6236:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    623a:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    623e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    6242:	f04f 0320 	mov.w	r3, #32
    6246:	f3ef 8211 	mrs	r2, BASEPRI
    624a:	f383 8812 	msr	BASEPRI_MAX, r3
    624e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    6252:	4b13      	ldr	r3, [pc, #76]	; (62a0 <z_setup_new_thread+0xc4>)
    6254:	6a99      	ldr	r1, [r3, #40]	; 0x28
    6256:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    6258:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    625a:	f382 8811 	msr	BASEPRI, r2
    625e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    6262:	f1bb 0f00 	cmp.w	fp, #0
    6266:	d013      	beq.n	6290 <z_setup_new_thread+0xb4>
    6268:	221f      	movs	r2, #31
    626a:	4659      	mov	r1, fp
    626c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6270:	f002 fb95 	bl	899e <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    6274:	2300      	movs	r3, #0
    6276:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    627a:	4b09      	ldr	r3, [pc, #36]	; (62a0 <z_setup_new_thread+0xc4>)
    627c:	689b      	ldr	r3, [r3, #8]
    627e:	b15b      	cbz	r3, 6298 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    6280:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    6284:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    6288:	4628      	mov	r0, r5
    628a:	b005      	add	sp, #20
    628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    6290:	2300      	movs	r3, #0
    6292:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    6296:	e7f0      	b.n	627a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    6298:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    629c:	e7f4      	b.n	6288 <z_setup_new_thread+0xac>
    629e:	bf00      	nop
    62a0:	20000e8c 	.word	0x20000e8c

000062a4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    62a4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    62a8:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    62aa:	4c23      	ldr	r4, [pc, #140]	; (6338 <z_init_static_threads+0x94>)
    62ac:	4b23      	ldr	r3, [pc, #140]	; (633c <z_init_static_threads+0x98>)
    62ae:	429c      	cmp	r4, r3
    62b0:	d215      	bcs.n	62de <z_init_static_threads+0x3a>
		z_setup_new_thread(
    62b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    62b4:	9305      	str	r3, [sp, #20]
    62b6:	6a23      	ldr	r3, [r4, #32]
    62b8:	9304      	str	r3, [sp, #16]
    62ba:	69e3      	ldr	r3, [r4, #28]
    62bc:	9303      	str	r3, [sp, #12]
    62be:	69a3      	ldr	r3, [r4, #24]
    62c0:	9302      	str	r3, [sp, #8]
    62c2:	6963      	ldr	r3, [r4, #20]
    62c4:	9301      	str	r3, [sp, #4]
    62c6:	6923      	ldr	r3, [r4, #16]
    62c8:	9300      	str	r3, [sp, #0]
    62ca:	68e3      	ldr	r3, [r4, #12]
    62cc:	68a2      	ldr	r2, [r4, #8]
    62ce:	6861      	ldr	r1, [r4, #4]
    62d0:	6820      	ldr	r0, [r4, #0]
    62d2:	f7ff ff83 	bl	61dc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    62d6:	6823      	ldr	r3, [r4, #0]
    62d8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    62da:	3430      	adds	r4, #48	; 0x30
    62dc:	e7e6      	b.n	62ac <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    62de:	f000 fad3 	bl	6888 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    62e2:	4c15      	ldr	r4, [pc, #84]	; (6338 <z_init_static_threads+0x94>)
    62e4:	e01b      	b.n	631e <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    62e6:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    62e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    62ec:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    62f0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    62f4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    62f8:	03d8      	lsls	r0, r3, #15
    62fa:	f240 35e7 	movw	r5, #999	; 0x3e7
    62fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6302:	2300      	movs	r3, #0
    6304:	1940      	adds	r0, r0, r5
    6306:	f04f 0500 	mov.w	r5, #0
    630a:	eb45 0101 	adc.w	r1, r5, r1
    630e:	f7fa fd93 	bl	e38 <__aeabi_uldivmod>
    6312:	4602      	mov	r2, r0
    6314:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    6316:	4630      	mov	r0, r6
    6318:	f7ff ff4e 	bl	61b8 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    631c:	3430      	adds	r4, #48	; 0x30
    631e:	4b07      	ldr	r3, [pc, #28]	; (633c <z_init_static_threads+0x98>)
    6320:	429c      	cmp	r4, r3
    6322:	d204      	bcs.n	632e <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6324:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6326:	f1b3 3fff 	cmp.w	r3, #4294967295
    632a:	d0f7      	beq.n	631c <z_init_static_threads+0x78>
    632c:	e7db      	b.n	62e6 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    632e:	f000 fca9 	bl	6c84 <k_sched_unlock>
}
    6332:	b006      	add	sp, #24
    6334:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    6338:	20000150 	.word	0x20000150
    633c:	20000150 	.word	0x20000150

00006340 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    6340:	b508      	push	{r3, lr}
    6342:	e001      	b.n	6348 <idle+0x8>
	arch_cpu_idle();
    6344:	f7fd fa6c 	bl	3820 <arch_cpu_idle>
	__asm__ volatile(
    6348:	f04f 0220 	mov.w	r2, #32
    634c:	f3ef 8311 	mrs	r3, BASEPRI
    6350:	f382 8812 	msr	BASEPRI_MAX, r2
    6354:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    6358:	f002 fabf 	bl	88da <z_get_next_timeout_expiry>
    635c:	4b03      	ldr	r3, [pc, #12]	; (636c <idle+0x2c>)
    635e:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    6360:	f7fd f8c4 	bl	34ec <pm_system_suspend>
    6364:	2800      	cmp	r0, #0
    6366:	d1ef      	bne.n	6348 <idle+0x8>
    6368:	e7ec      	b.n	6344 <idle+0x4>
    636a:	bf00      	nop
    636c:	20000e8c 	.word	0x20000e8c

00006370 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6374:	b083      	sub	sp, #12
    6376:	4604      	mov	r4, r0
    6378:	461d      	mov	r5, r3
    637a:	f04f 0320 	mov.w	r3, #32
    637e:	f3ef 8711 	mrs	r7, BASEPRI
    6382:	f383 8812 	msr	BASEPRI_MAX, r3
    6386:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    638a:	68c1      	ldr	r1, [r0, #12]
    638c:	b999      	cbnz	r1, 63b6 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    638e:	2900      	cmp	r1, #0
    6390:	d14f      	bne.n	6432 <z_impl_k_mutex_lock+0xc2>
    6392:	4b3a      	ldr	r3, [pc, #232]	; (647c <z_impl_k_mutex_lock+0x10c>)
    6394:	689b      	ldr	r3, [r3, #8]
    6396:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    639a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    639c:	3101      	adds	r1, #1
    639e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    63a0:	4b36      	ldr	r3, [pc, #216]	; (647c <z_impl_k_mutex_lock+0x10c>)
    63a2:	689b      	ldr	r3, [r3, #8]
    63a4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    63a6:	f387 8811 	msr	BASEPRI, r7
    63aa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    63ae:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    63b0:	b003      	add	sp, #12
    63b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    63b6:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    63b8:	6882      	ldr	r2, [r0, #8]
    63ba:	4b30      	ldr	r3, [pc, #192]	; (647c <z_impl_k_mutex_lock+0x10c>)
    63bc:	689b      	ldr	r3, [r3, #8]
    63be:	429a      	cmp	r2, r3
    63c0:	d0e5      	beq.n	638e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    63c2:	ea55 0106 	orrs.w	r1, r5, r6
    63c6:	bf0c      	ite	eq
    63c8:	f04f 0801 	moveq.w	r8, #1
    63cc:	f04f 0800 	movne.w	r8, #0
    63d0:	d031      	beq.n	6436 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    63d2:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    63d6:	4649      	mov	r1, r9
    63d8:	f993 000e 	ldrsb.w	r0, [r3, #14]
    63dc:	f002 f8f8 	bl	85d0 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    63e0:	4581      	cmp	r9, r0
    63e2:	dc2f      	bgt.n	6444 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    63e4:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    63e8:	9600      	str	r6, [sp, #0]
    63ea:	9501      	str	r5, [sp, #4]
    63ec:	4622      	mov	r2, r4
    63ee:	4639      	mov	r1, r7
    63f0:	4823      	ldr	r0, [pc, #140]	; (6480 <z_impl_k_mutex_lock+0x110>)
    63f2:	f000 fb91 	bl	6b18 <z_pend_curr>
	if (got_mutex == 0) {
    63f6:	2800      	cmp	r0, #0
    63f8:	d0da      	beq.n	63b0 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    63fa:	f04f 0320 	mov.w	r3, #32
    63fe:	f3ef 8511 	mrs	r5, BASEPRI
    6402:	f383 8812 	msr	BASEPRI_MAX, r3
    6406:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    640a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    640c:	429c      	cmp	r4, r3
    640e:	d01f      	beq.n	6450 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6410:	b1f3      	cbz	r3, 6450 <z_impl_k_mutex_lock+0xe0>
    6412:	6921      	ldr	r1, [r4, #16]
    6414:	f993 000e 	ldrsb.w	r0, [r3, #14]
    6418:	f002 f8da 	bl	85d0 <new_prio_for_inheritance>
    641c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    641e:	4620      	mov	r0, r4
    6420:	f002 f8e1 	bl	85e6 <adjust_owner_prio>
    6424:	b9b0      	cbnz	r0, 6454 <z_impl_k_mutex_lock+0xe4>
    6426:	f1b9 0f00 	cmp.w	r9, #0
    642a:	d015      	beq.n	6458 <z_impl_k_mutex_lock+0xe8>
    642c:	f04f 0801 	mov.w	r8, #1
    6430:	e012      	b.n	6458 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    6432:	6923      	ldr	r3, [r4, #16]
    6434:	e7b1      	b.n	639a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    6436:	f387 8811 	msr	BASEPRI, r7
    643a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    643e:	f06f 000f 	mvn.w	r0, #15
    6442:	e7b5      	b.n	63b0 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    6444:	4601      	mov	r1, r0
    6446:	4620      	mov	r0, r4
    6448:	f002 f8cd 	bl	85e6 <adjust_owner_prio>
    644c:	4681      	mov	r9, r0
    644e:	e7cb      	b.n	63e8 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6450:	6921      	ldr	r1, [r4, #16]
    6452:	e7e4      	b.n	641e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6454:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    6458:	f1b8 0f00 	cmp.w	r8, #0
    645c:	d106      	bne.n	646c <z_impl_k_mutex_lock+0xfc>
    645e:	f385 8811 	msr	BASEPRI, r5
    6462:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    6466:	f06f 000a 	mvn.w	r0, #10
    646a:	e7a1      	b.n	63b0 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    646c:	4629      	mov	r1, r5
    646e:	4804      	ldr	r0, [pc, #16]	; (6480 <z_impl_k_mutex_lock+0x110>)
    6470:	f000 f9ee 	bl	6850 <z_reschedule>
	return -EAGAIN;
    6474:	f06f 000a 	mvn.w	r0, #10
    6478:	e79a      	b.n	63b0 <z_impl_k_mutex_lock+0x40>
    647a:	bf00      	nop
    647c:	20000e8c 	.word	0x20000e8c
    6480:	20000eb8 	.word	0x20000eb8

00006484 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6484:	6882      	ldr	r2, [r0, #8]
    6486:	2a00      	cmp	r2, #0
    6488:	d035      	beq.n	64f6 <z_impl_k_mutex_unlock+0x72>
{
    648a:	b538      	push	{r3, r4, r5, lr}
    648c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    648e:	4b1d      	ldr	r3, [pc, #116]	; (6504 <z_impl_k_mutex_unlock+0x80>)
    6490:	689b      	ldr	r3, [r3, #8]
    6492:	429a      	cmp	r2, r3
    6494:	d132      	bne.n	64fc <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6496:	7bda      	ldrb	r2, [r3, #15]
    6498:	3a01      	subs	r2, #1
    649a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    649c:	68c3      	ldr	r3, [r0, #12]
    649e:	2b01      	cmp	r3, #1
    64a0:	d905      	bls.n	64ae <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    64a2:	3b01      	subs	r3, #1
    64a4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    64a6:	f000 fbed 	bl	6c84 <k_sched_unlock>

	return 0;
    64aa:	2000      	movs	r0, #0
}
    64ac:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    64ae:	f04f 0320 	mov.w	r3, #32
    64b2:	f3ef 8511 	mrs	r5, BASEPRI
    64b6:	f383 8812 	msr	BASEPRI_MAX, r3
    64ba:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    64be:	6901      	ldr	r1, [r0, #16]
    64c0:	f002 f891 	bl	85e6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    64c4:	4620      	mov	r0, r4
    64c6:	f002 f96d 	bl	87a4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    64ca:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    64cc:	b160      	cbz	r0, 64e8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    64ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
    64d2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    64d4:	2300      	movs	r3, #0
    64d6:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    64da:	f002 f8c8 	bl	866e <z_ready_thread>
		z_reschedule(&lock, key);
    64de:	4629      	mov	r1, r5
    64e0:	4809      	ldr	r0, [pc, #36]	; (6508 <z_impl_k_mutex_unlock+0x84>)
    64e2:	f000 f9b5 	bl	6850 <z_reschedule>
    64e6:	e7de      	b.n	64a6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    64e8:	2300      	movs	r3, #0
    64ea:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    64ec:	f385 8811 	msr	BASEPRI, r5
    64f0:	f3bf 8f6f 	isb	sy
    64f4:	e7d7      	b.n	64a6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    64f6:	f06f 0015 	mvn.w	r0, #21
}
    64fa:	4770      	bx	lr
		return -EPERM;
    64fc:	f04f 30ff 	mov.w	r0, #4294967295
    6500:	e7d4      	b.n	64ac <z_impl_k_mutex_unlock+0x28>
    6502:	bf00      	nop
    6504:	20000e8c 	.word	0x20000e8c
    6508:	20000eb8 	.word	0x20000eb8

0000650c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    650c:	b538      	push	{r3, r4, r5, lr}
    650e:	4604      	mov	r4, r0
	__asm__ volatile(
    6510:	f04f 0320 	mov.w	r3, #32
    6514:	f3ef 8511 	mrs	r5, BASEPRI
    6518:	f383 8812 	msr	BASEPRI_MAX, r3
    651c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6520:	f002 f940 	bl	87a4 <z_unpend_first_thread>

	if (thread != NULL) {
    6524:	b148      	cbz	r0, 653a <z_impl_k_sem_give+0x2e>
    6526:	2200      	movs	r2, #0
    6528:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    652c:	f002 f89f 	bl	866e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6530:	4629      	mov	r1, r5
    6532:	4807      	ldr	r0, [pc, #28]	; (6550 <z_impl_k_sem_give+0x44>)
    6534:	f000 f98c 	bl	6850 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6538:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    653a:	68a3      	ldr	r3, [r4, #8]
    653c:	68e2      	ldr	r2, [r4, #12]
    653e:	4293      	cmp	r3, r2
    6540:	d003      	beq.n	654a <z_impl_k_sem_give+0x3e>
    6542:	2201      	movs	r2, #1
    6544:	4413      	add	r3, r2
    6546:	60a3      	str	r3, [r4, #8]
}
    6548:	e7f2      	b.n	6530 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    654a:	2200      	movs	r2, #0
    654c:	e7fa      	b.n	6544 <z_impl_k_sem_give+0x38>
    654e:	bf00      	nop
    6550:	20000eb8 	.word	0x20000eb8

00006554 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6554:	b530      	push	{r4, r5, lr}
    6556:	b083      	sub	sp, #12
    6558:	461d      	mov	r5, r3
    655a:	f04f 0320 	mov.w	r3, #32
    655e:	f3ef 8111 	mrs	r1, BASEPRI
    6562:	f383 8812 	msr	BASEPRI_MAX, r3
    6566:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    656a:	6883      	ldr	r3, [r0, #8]
    656c:	b143      	cbz	r3, 6580 <z_impl_k_sem_take+0x2c>
		sem->count--;
    656e:	3b01      	subs	r3, #1
    6570:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    6572:	f381 8811 	msr	BASEPRI, r1
    6576:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    657a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    657c:	b003      	add	sp, #12
    657e:	bd30      	pop	{r4, r5, pc}
    6580:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6582:	ea54 0305 	orrs.w	r3, r4, r5
    6586:	d006      	beq.n	6596 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6588:	e9cd 4500 	strd	r4, r5, [sp]
    658c:	4602      	mov	r2, r0
    658e:	4805      	ldr	r0, [pc, #20]	; (65a4 <z_impl_k_sem_take+0x50>)
    6590:	f000 fac2 	bl	6b18 <z_pend_curr>
	return ret;
    6594:	e7f2      	b.n	657c <z_impl_k_sem_take+0x28>
    6596:	f381 8811 	msr	BASEPRI, r1
    659a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    659e:	f06f 000f 	mvn.w	r0, #15
    65a2:	e7eb      	b.n	657c <z_impl_k_sem_take+0x28>
    65a4:	20000eb8 	.word	0x20000eb8

000065a8 <finalize_cancel_locked>:
 * Reschedules.
 *
 * @param work the work structure that has completed cancellation
 */
static void finalize_cancel_locked(struct k_work *work)
{
    65a8:	b570      	push	{r4, r5, r6, lr}
    65aa:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    65ac:	68c3      	ldr	r3, [r0, #12]
    65ae:	f023 0302 	bic.w	r3, r3, #2
    65b2:	60c3      	str	r3, [r0, #12]
	return list->head;
    65b4:	4b19      	ldr	r3, [pc, #100]	; (661c <finalize_cancel_locked+0x74>)
    65b6:	6818      	ldr	r0, [r3, #0]
	/* Search for and remove the matching container, and release
	 * what's waiting for the completion.  The same work item can
	 * appear multiple times in the list if multiple threads
	 * attempt to cancel it.
	 */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    65b8:	b1e8      	cbz	r0, 65f6 <finalize_cancel_locked+0x4e>
    65ba:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    65bc:	b100      	cbz	r0, 65c0 <finalize_cancel_locked+0x18>
	return node->next;
    65be:	6804      	ldr	r4, [r0, #0]
    65c0:	2600      	movs	r6, #0
    65c2:	e01d      	b.n	6600 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    65c4:	b15e      	cbz	r6, 65de <finalize_cancel_locked+0x36>
	return node->next;
    65c6:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    65c8:	6033      	str	r3, [r6, #0]
	return list->tail;
    65ca:	4b14      	ldr	r3, [pc, #80]	; (661c <finalize_cancel_locked+0x74>)
    65cc:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    65ce:	4298      	cmp	r0, r3
    65d0:	d00e      	beq.n	65f0 <finalize_cancel_locked+0x48>
	parent->next = child;
    65d2:	2300      	movs	r3, #0
    65d4:	f840 3b08 	str.w	r3, [r0], #8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    65d8:	f7ff ff98 	bl	650c <z_impl_k_sem_give>
}
    65dc:	e015      	b.n	660a <finalize_cancel_locked+0x62>
	return node->next;
    65de:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    65e0:	4b0e      	ldr	r3, [pc, #56]	; (661c <finalize_cancel_locked+0x74>)
    65e2:	601a      	str	r2, [r3, #0]
	return list->tail;
    65e4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    65e6:	4298      	cmp	r0, r3
    65e8:	d1f3      	bne.n	65d2 <finalize_cancel_locked+0x2a>
	list->tail = node;
    65ea:	4b0c      	ldr	r3, [pc, #48]	; (661c <finalize_cancel_locked+0x74>)
    65ec:	605a      	str	r2, [r3, #4]
}
    65ee:	e7f0      	b.n	65d2 <finalize_cancel_locked+0x2a>
	list->tail = node;
    65f0:	4b0a      	ldr	r3, [pc, #40]	; (661c <finalize_cancel_locked+0x74>)
    65f2:	605e      	str	r6, [r3, #4]
}
    65f4:	e7ed      	b.n	65d2 <finalize_cancel_locked+0x2a>
    65f6:	4604      	mov	r4, r0
    65f8:	e7e2      	b.n	65c0 <finalize_cancel_locked+0x18>
    65fa:	4623      	mov	r3, r4
    65fc:	4620      	mov	r0, r4
    65fe:	461c      	mov	r4, r3
    6600:	b150      	cbz	r0, 6618 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    6602:	6843      	ldr	r3, [r0, #4]
    6604:	42ab      	cmp	r3, r5
    6606:	d0dd      	beq.n	65c4 <finalize_cancel_locked+0x1c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
			k_sem_give(&wc->sem);
		} else {
			prev = &wc->node;
    6608:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    660a:	2c00      	cmp	r4, #0
    660c:	d0f5      	beq.n	65fa <finalize_cancel_locked+0x52>
    660e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    6610:	2c00      	cmp	r4, #0
    6612:	d0f3      	beq.n	65fc <finalize_cancel_locked+0x54>
	return node->next;
    6614:	6823      	ldr	r3, [r4, #0]
    6616:	e7f1      	b.n	65fc <finalize_cancel_locked+0x54>
		}
	}
}
    6618:	bd70      	pop	{r4, r5, r6, pc}
    661a:	bf00      	nop
    661c:	20000eb8 	.word	0x20000eb8

00006620 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    6620:	b5f0      	push	{r4, r5, r6, r7, lr}
    6622:	b085      	sub	sp, #20
    6624:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    6626:	e016      	b.n	6656 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    6628:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    662c:	f023 0204 	bic.w	r2, r3, #4
    6630:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    6634:	f013 0f04 	tst.w	r3, #4
    6638:	d158      	bne.n	66ec <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    663a:	2300      	movs	r3, #0
    663c:	9302      	str	r3, [sp, #8]
    663e:	f04f 32ff 	mov.w	r2, #4294967295
    6642:	f04f 33ff 	mov.w	r3, #4294967295
    6646:	e9cd 2300 	strd	r2, r3, [sp]
    664a:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    664e:	4631      	mov	r1, r6
    6650:	482e      	ldr	r0, [pc, #184]	; (670c <work_queue_main+0xec>)
    6652:	f000 fc85 	bl	6f60 <z_sched_wait>
	__asm__ volatile(
    6656:	f04f 0320 	mov.w	r3, #32
    665a:	f3ef 8611 	mrs	r6, BASEPRI
    665e:	f383 8812 	msr	BASEPRI_MAX, r3
    6662:	f3bf 8f6f 	isb	sy
	return list->head;
    6666:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    666a:	2c00      	cmp	r4, #0
    666c:	d0dc      	beq.n	6628 <work_queue_main+0x8>
	return node->next;
    666e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    6670:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    6674:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6678:	4294      	cmp	r4, r2
    667a:	d034      	beq.n	66e6 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
    667c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    6680:	f043 0302 	orr.w	r3, r3, #2
    6684:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    6688:	68e3      	ldr	r3, [r4, #12]
    668a:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    668e:	f023 0304 	bic.w	r3, r3, #4
    6692:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    6694:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    6696:	2c00      	cmp	r4, #0
    6698:	d0cf      	beq.n	663a <work_queue_main+0x1a>
	__asm__ volatile(
    669a:	f386 8811 	msr	BASEPRI, r6
    669e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    66a2:	4620      	mov	r0, r4
    66a4:	4798      	blx	r3
	__asm__ volatile(
    66a6:	f04f 0320 	mov.w	r3, #32
    66aa:	f3ef 8611 	mrs	r6, BASEPRI
    66ae:	f383 8812 	msr	BASEPRI_MAX, r3
    66b2:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    66b6:	68e3      	ldr	r3, [r4, #12]
    66b8:	f023 0301 	bic.w	r3, r3, #1
    66bc:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    66be:	f013 0f02 	tst.w	r3, #2
    66c2:	d11e      	bne.n	6702 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
    66c4:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    66c8:	f023 0302 	bic.w	r3, r3, #2
    66cc:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    66d0:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    66d4:	f386 8811 	msr	BASEPRI, r6
    66d8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    66dc:	2b00      	cmp	r3, #0
    66de:	d1ba      	bne.n	6656 <work_queue_main+0x36>
	z_impl_k_yield();
    66e0:	f000 fb50 	bl	6d84 <z_impl_k_yield>
}
    66e4:	e7b7      	b.n	6656 <work_queue_main+0x36>
	list->tail = node;
    66e6:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    66ea:	e7c7      	b.n	667c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    66ec:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    66f0:	2200      	movs	r2, #0
    66f2:	2101      	movs	r1, #1
    66f4:	4638      	mov	r0, r7
    66f6:	f002 f884 	bl	8802 <z_sched_wake>
    66fa:	2800      	cmp	r0, #0
    66fc:	d1f8      	bne.n	66f0 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
    66fe:	2300      	movs	r3, #0
    6700:	e7c9      	b.n	6696 <work_queue_main+0x76>
			finalize_cancel_locked(work);
    6702:	4620      	mov	r0, r4
    6704:	f7ff ff50 	bl	65a8 <finalize_cancel_locked>
    6708:	e7dc      	b.n	66c4 <work_queue_main+0xa4>
    670a:	bf00      	nop
    670c:	20000eb8 	.word	0x20000eb8

00006710 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    6710:	b5f0      	push	{r4, r5, r6, r7, lr}
    6712:	b089      	sub	sp, #36	; 0x24
    6714:	4604      	mov	r4, r0
    6716:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    6718:	2000      	movs	r0, #0
    671a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    671e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    6722:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    6726:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    672a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    672e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    6732:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    6736:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    673a:	b1fd      	cbz	r5, 677c <k_work_queue_start+0x6c>
    673c:	7928      	ldrb	r0, [r5, #4]
    673e:	b9f8      	cbnz	r0, 6780 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    6740:	2001      	movs	r0, #1
	*flagp = flags;
    6742:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6746:	f04f 36ff 	mov.w	r6, #4294967295
    674a:	f04f 37ff 	mov.w	r7, #4294967295
    674e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    6752:	2000      	movs	r0, #0
    6754:	9004      	str	r0, [sp, #16]
    6756:	9303      	str	r3, [sp, #12]
    6758:	9002      	str	r0, [sp, #8]
    675a:	9001      	str	r0, [sp, #4]
    675c:	9400      	str	r4, [sp, #0]
    675e:	4b0a      	ldr	r3, [pc, #40]	; (6788 <k_work_queue_start+0x78>)
    6760:	4620      	mov	r0, r4
    6762:	f001 ff0d 	bl	8580 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    6766:	b125      	cbz	r5, 6772 <k_work_queue_start+0x62>
    6768:	6829      	ldr	r1, [r5, #0]
    676a:	b111      	cbz	r1, 6772 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    676c:	4620      	mov	r0, r4
    676e:	f7ff fd11 	bl	6194 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    6772:	4620      	mov	r0, r4
    6774:	f001 fef5 	bl	8562 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    6778:	b009      	add	sp, #36	; 0x24
    677a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    677c:	2001      	movs	r0, #1
    677e:	e7e0      	b.n	6742 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    6780:	f240 1001 	movw	r0, #257	; 0x101
    6784:	e7dd      	b.n	6742 <k_work_queue_start+0x32>
    6786:	bf00      	nop
    6788:	00006621 	.word	0x00006621

0000678c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    678c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    678e:	f1b3 3fff 	cmp.w	r3, #4294967295
    6792:	bf08      	it	eq
    6794:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6798:	d100      	bne.n	679c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    679a:	bd38      	pop	{r3, r4, r5, pc}
    679c:	4902      	ldr	r1, [pc, #8]	; (67a8 <add_thread_timeout+0x1c>)
    679e:	3018      	adds	r0, #24
    67a0:	f000 fc52 	bl	7048 <z_add_timeout>
    67a4:	e7f9      	b.n	679a <add_thread_timeout+0xe>
    67a6:	bf00      	nop
    67a8:	000086a7 	.word	0x000086a7

000067ac <z_reset_time_slice>:
{
    67ac:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    67ae:	4b08      	ldr	r3, [pc, #32]	; (67d0 <z_reset_time_slice+0x24>)
    67b0:	681b      	ldr	r3, [r3, #0]
    67b2:	b903      	cbnz	r3, 67b6 <z_reset_time_slice+0xa>
}
    67b4:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    67b6:	f7fe fb85 	bl	4ec4 <sys_clock_elapsed>
    67ba:	4603      	mov	r3, r0
    67bc:	4a04      	ldr	r2, [pc, #16]	; (67d0 <z_reset_time_slice+0x24>)
    67be:	6810      	ldr	r0, [r2, #0]
    67c0:	4403      	add	r3, r0
    67c2:	4a04      	ldr	r2, [pc, #16]	; (67d4 <z_reset_time_slice+0x28>)
    67c4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    67c6:	2100      	movs	r1, #0
    67c8:	f002 f89d 	bl	8906 <z_set_timeout_expiry>
}
    67cc:	e7f2      	b.n	67b4 <z_reset_time_slice+0x8>
    67ce:	bf00      	nop
    67d0:	20000ec8 	.word	0x20000ec8
    67d4:	20000e8c 	.word	0x20000e8c

000067d8 <k_sched_time_slice_set>:
{
    67d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67dc:	4606      	mov	r6, r0
    67de:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    67e0:	2300      	movs	r3, #0
	__asm__ volatile(
    67e2:	f04f 0220 	mov.w	r2, #32
    67e6:	f3ef 8711 	mrs	r7, BASEPRI
    67ea:	f382 8812 	msr	BASEPRI_MAX, r2
    67ee:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    67f2:	e009      	b.n	6808 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    67f4:	4b13      	ldr	r3, [pc, #76]	; (6844 <k_sched_time_slice_set+0x6c>)
    67f6:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    67fa:	f7ff ffd7 	bl	67ac <z_reset_time_slice>
	__asm__ volatile(
    67fe:	f387 8811 	msr	BASEPRI, r7
    6802:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6806:	2301      	movs	r3, #1
    6808:	b9cb      	cbnz	r3, 683e <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    680a:	2300      	movs	r3, #0
    680c:	4a0e      	ldr	r2, [pc, #56]	; (6848 <k_sched_time_slice_set+0x70>)
    680e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    6810:	0c75      	lsrs	r5, r6, #17
    6812:	03f4      	lsls	r4, r6, #15
    6814:	f240 30e7 	movw	r0, #999	; 0x3e7
    6818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    681c:	2300      	movs	r3, #0
    681e:	1820      	adds	r0, r4, r0
    6820:	f04f 0100 	mov.w	r1, #0
    6824:	eb45 0101 	adc.w	r1, r5, r1
    6828:	f7fa fb06 	bl	e38 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    682c:	4b07      	ldr	r3, [pc, #28]	; (684c <k_sched_time_slice_set+0x74>)
    682e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6830:	2e00      	cmp	r6, #0
    6832:	dddf      	ble.n	67f4 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    6834:	2802      	cmp	r0, #2
    6836:	bfb8      	it	lt
    6838:	2002      	movlt	r0, #2
    683a:	6018      	str	r0, [r3, #0]
    683c:	e7da      	b.n	67f4 <k_sched_time_slice_set+0x1c>
}
    683e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6842:	bf00      	nop
    6844:	20000ec4 	.word	0x20000ec4
    6848:	20000e8c 	.word	0x20000e8c
    684c:	20000ec8 	.word	0x20000ec8

00006850 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6850:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    6852:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6854:	b921      	cbnz	r1, 6860 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6856:	f3ef 8305 	mrs	r3, IPSR
    685a:	b913      	cbnz	r3, 6862 <z_reschedule+0x12>
    685c:	2101      	movs	r1, #1
    685e:	e000      	b.n	6862 <z_reschedule+0x12>
    6860:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    6862:	f011 0f01 	tst.w	r1, #1
    6866:	d007      	beq.n	6878 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    6868:	4b06      	ldr	r3, [pc, #24]	; (6884 <z_reschedule+0x34>)
    686a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    686c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    686e:	429a      	cmp	r2, r3
    6870:	d002      	beq.n	6878 <z_reschedule+0x28>
	ret = arch_swap(key);
    6872:	f7fd f841 	bl	38f8 <arch_swap>
		z_swap(lock, key);
    6876:	e003      	b.n	6880 <z_reschedule+0x30>
    6878:	f380 8811 	msr	BASEPRI, r0
    687c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    6880:	bd08      	pop	{r3, pc}
    6882:	bf00      	nop
    6884:	20000e8c 	.word	0x20000e8c

00006888 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    6888:	2300      	movs	r3, #0
	__asm__ volatile(
    688a:	f04f 0220 	mov.w	r2, #32
    688e:	f3ef 8111 	mrs	r1, BASEPRI
    6892:	f382 8812 	msr	BASEPRI_MAX, r2
    6896:	f3bf 8f6f 	isb	sy
    689a:	b953      	cbnz	r3, 68b2 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
    689c:	4b05      	ldr	r3, [pc, #20]	; (68b4 <k_sched_lock+0x2c>)
    689e:	689a      	ldr	r2, [r3, #8]
    68a0:	7bd3      	ldrb	r3, [r2, #15]
    68a2:	3b01      	subs	r3, #1
    68a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    68a6:	f381 8811 	msr	BASEPRI, r1
    68aa:	f3bf 8f6f 	isb	sy
    68ae:	2301      	movs	r3, #1
    68b0:	e7f3      	b.n	689a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    68b2:	4770      	bx	lr
    68b4:	20000e8c 	.word	0x20000e8c

000068b8 <update_cache>:
{
    68b8:	b538      	push	{r3, r4, r5, lr}
    68ba:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    68bc:	480f      	ldr	r0, [pc, #60]	; (68fc <update_cache+0x44>)
    68be:	f001 fecf 	bl	8660 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    68c2:	4605      	mov	r5, r0
    68c4:	b170      	cbz	r0, 68e4 <update_cache+0x2c>
	if (preempt_ok != 0) {
    68c6:	b984      	cbnz	r4, 68ea <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    68c8:	4b0d      	ldr	r3, [pc, #52]	; (6900 <update_cache+0x48>)
    68ca:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    68cc:	7b5a      	ldrb	r2, [r3, #13]
    68ce:	f012 0f1f 	tst.w	r2, #31
    68d2:	d10a      	bne.n	68ea <update_cache+0x32>
	return node->next != NULL;
    68d4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    68d6:	b942      	cbnz	r2, 68ea <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    68d8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    68da:	2a7f      	cmp	r2, #127	; 0x7f
    68dc:	d905      	bls.n	68ea <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    68de:	4a08      	ldr	r2, [pc, #32]	; (6900 <update_cache+0x48>)
    68e0:	61d3      	str	r3, [r2, #28]
    68e2:	e00a      	b.n	68fa <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    68e4:	4b06      	ldr	r3, [pc, #24]	; (6900 <update_cache+0x48>)
    68e6:	68dd      	ldr	r5, [r3, #12]
    68e8:	e7ed      	b.n	68c6 <update_cache+0xe>
		if (thread != _current) {
    68ea:	4b05      	ldr	r3, [pc, #20]	; (6900 <update_cache+0x48>)
    68ec:	689b      	ldr	r3, [r3, #8]
    68ee:	42ab      	cmp	r3, r5
    68f0:	d001      	beq.n	68f6 <update_cache+0x3e>
			z_reset_time_slice();
    68f2:	f7ff ff5b 	bl	67ac <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    68f6:	4b02      	ldr	r3, [pc, #8]	; (6900 <update_cache+0x48>)
    68f8:	61dd      	str	r5, [r3, #28]
}
    68fa:	bd38      	pop	{r3, r4, r5, pc}
    68fc:	20000eac 	.word	0x20000eac
    6900:	20000e8c 	.word	0x20000e8c

00006904 <move_thread_to_end_of_prio_q>:
{
    6904:	b538      	push	{r3, r4, r5, lr}
    6906:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    6908:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    690a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    690e:	2b00      	cmp	r3, #0
    6910:	db28      	blt.n	6964 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    6912:	7b6b      	ldrb	r3, [r5, #13]
    6914:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6918:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    691a:	4b1a      	ldr	r3, [pc, #104]	; (6984 <move_thread_to_end_of_prio_q+0x80>)
    691c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6920:	429c      	cmp	r4, r3
    6922:	d02d      	beq.n	6980 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6924:	b16c      	cbz	r4, 6942 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6926:	4621      	mov	r1, r4
    6928:	4628      	mov	r0, r5
    692a:	f001 fe72 	bl	8612 <z_sched_prio_cmp>
    692e:	2800      	cmp	r0, #0
    6930:	dc20      	bgt.n	6974 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6932:	b134      	cbz	r4, 6942 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    6934:	4b13      	ldr	r3, [pc, #76]	; (6984 <move_thread_to_end_of_prio_q+0x80>)
    6936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6938:	429c      	cmp	r4, r3
    693a:	d002      	beq.n	6942 <move_thread_to_end_of_prio_q+0x3e>
    693c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    693e:	2c00      	cmp	r4, #0
    6940:	d1f0      	bne.n	6924 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    6942:	4b10      	ldr	r3, [pc, #64]	; (6984 <move_thread_to_end_of_prio_q+0x80>)
    6944:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    6946:	f103 0120 	add.w	r1, r3, #32
    694a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    694c:	606a      	str	r2, [r5, #4]

	tail->next = node;
    694e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6950:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    6952:	4b0c      	ldr	r3, [pc, #48]	; (6984 <move_thread_to_end_of_prio_q+0x80>)
    6954:	6898      	ldr	r0, [r3, #8]
    6956:	42a8      	cmp	r0, r5
    6958:	bf14      	ite	ne
    695a:	2000      	movne	r0, #0
    695c:	2001      	moveq	r0, #1
    695e:	f7ff ffab 	bl	68b8 <update_cache>
}
    6962:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6968:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    696a:	4601      	mov	r1, r0
    696c:	4806      	ldr	r0, [pc, #24]	; (6988 <move_thread_to_end_of_prio_q+0x84>)
    696e:	f001 fe6f 	bl	8650 <z_priq_dumb_remove>
}
    6972:	e7ce      	b.n	6912 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    6974:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    6976:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6978:	602c      	str	r4, [r5, #0]
	prev->next = node;
    697a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    697c:	6065      	str	r5, [r4, #4]
}
    697e:	e7e8      	b.n	6952 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6980:	2400      	movs	r4, #0
    6982:	e7cf      	b.n	6924 <move_thread_to_end_of_prio_q+0x20>
    6984:	20000e8c 	.word	0x20000e8c
    6988:	20000eac 	.word	0x20000eac

0000698c <z_time_slice>:
{
    698c:	b510      	push	{r4, lr}
	__asm__ volatile(
    698e:	f04f 0320 	mov.w	r3, #32
    6992:	f3ef 8411 	mrs	r4, BASEPRI
    6996:	f383 8812 	msr	BASEPRI_MAX, r3
    699a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    699e:	4b1c      	ldr	r3, [pc, #112]	; (6a10 <z_time_slice+0x84>)
    69a0:	689b      	ldr	r3, [r3, #8]
    69a2:	4a1c      	ldr	r2, [pc, #112]	; (6a14 <z_time_slice+0x88>)
    69a4:	6812      	ldr	r2, [r2, #0]
    69a6:	4293      	cmp	r3, r2
    69a8:	d01d      	beq.n	69e6 <z_time_slice+0x5a>
	pending_current = NULL;
    69aa:	4a1a      	ldr	r2, [pc, #104]	; (6a14 <z_time_slice+0x88>)
    69ac:	2100      	movs	r1, #0
    69ae:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    69b0:	4a19      	ldr	r2, [pc, #100]	; (6a18 <z_time_slice+0x8c>)
    69b2:	6812      	ldr	r2, [r2, #0]
    69b4:	b322      	cbz	r2, 6a00 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    69b6:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    69b8:	2a7f      	cmp	r2, #127	; 0x7f
    69ba:	d821      	bhi.n	6a00 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    69bc:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    69be:	f012 0f1f 	tst.w	r2, #31
    69c2:	d11d      	bne.n	6a00 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    69c4:	f993 100e 	ldrsb.w	r1, [r3, #14]
    69c8:	4a14      	ldr	r2, [pc, #80]	; (6a1c <z_time_slice+0x90>)
    69ca:	6812      	ldr	r2, [r2, #0]
    69cc:	4291      	cmp	r1, r2
    69ce:	db17      	blt.n	6a00 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    69d0:	4a13      	ldr	r2, [pc, #76]	; (6a20 <z_time_slice+0x94>)
    69d2:	4293      	cmp	r3, r2
    69d4:	d014      	beq.n	6a00 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    69d6:	4a0e      	ldr	r2, [pc, #56]	; (6a10 <z_time_slice+0x84>)
    69d8:	6912      	ldr	r2, [r2, #16]
    69da:	4282      	cmp	r2, r0
    69dc:	dd0a      	ble.n	69f4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    69de:	1a10      	subs	r0, r2, r0
    69e0:	4b0b      	ldr	r3, [pc, #44]	; (6a10 <z_time_slice+0x84>)
    69e2:	6118      	str	r0, [r3, #16]
    69e4:	e00f      	b.n	6a06 <z_time_slice+0x7a>
		z_reset_time_slice();
    69e6:	f7ff fee1 	bl	67ac <z_reset_time_slice>
	__asm__ volatile(
    69ea:	f384 8811 	msr	BASEPRI, r4
    69ee:	f3bf 8f6f 	isb	sy
		return;
    69f2:	e00c      	b.n	6a0e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    69f4:	4618      	mov	r0, r3
    69f6:	f7ff ff85 	bl	6904 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    69fa:	f7ff fed7 	bl	67ac <z_reset_time_slice>
    69fe:	e002      	b.n	6a06 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    6a00:	4b03      	ldr	r3, [pc, #12]	; (6a10 <z_time_slice+0x84>)
    6a02:	2200      	movs	r2, #0
    6a04:	611a      	str	r2, [r3, #16]
    6a06:	f384 8811 	msr	BASEPRI, r4
    6a0a:	f3bf 8f6f 	isb	sy
}
    6a0e:	bd10      	pop	{r4, pc}
    6a10:	20000e8c 	.word	0x20000e8c
    6a14:	20000ec0 	.word	0x20000ec0
    6a18:	20000ec8 	.word	0x20000ec8
    6a1c:	20000ec4 	.word	0x20000ec4
    6a20:	200001c0 	.word	0x200001c0

00006a24 <ready_thread>:
{
    6a24:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    6a26:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6a28:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6a2c:	2a00      	cmp	r2, #0
    6a2e:	db2d      	blt.n	6a8c <ready_thread+0x68>
    6a30:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6a32:	f013 0f1f 	tst.w	r3, #31
    6a36:	d105      	bne.n	6a44 <ready_thread+0x20>
	return node->next != NULL;
    6a38:	6982      	ldr	r2, [r0, #24]
    6a3a:	b10a      	cbz	r2, 6a40 <ready_thread+0x1c>
    6a3c:	2200      	movs	r2, #0
    6a3e:	e002      	b.n	6a46 <ready_thread+0x22>
    6a40:	2201      	movs	r2, #1
    6a42:	e000      	b.n	6a46 <ready_thread+0x22>
    6a44:	2200      	movs	r2, #0
    6a46:	b30a      	cbz	r2, 6a8c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    6a48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6a4c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    6a4e:	4b14      	ldr	r3, [pc, #80]	; (6aa0 <ready_thread+0x7c>)
    6a50:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a54:	429d      	cmp	r5, r3
    6a56:	d020      	beq.n	6a9a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6a58:	b16d      	cbz	r5, 6a76 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6a5a:	4629      	mov	r1, r5
    6a5c:	4620      	mov	r0, r4
    6a5e:	f001 fdd8 	bl	8612 <z_sched_prio_cmp>
    6a62:	2800      	cmp	r0, #0
    6a64:	dc13      	bgt.n	6a8e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6a66:	b135      	cbz	r5, 6a76 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    6a68:	4b0d      	ldr	r3, [pc, #52]	; (6aa0 <ready_thread+0x7c>)
    6a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a6c:	429d      	cmp	r5, r3
    6a6e:	d002      	beq.n	6a76 <ready_thread+0x52>
    6a70:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6a72:	2d00      	cmp	r5, #0
    6a74:	d1f0      	bne.n	6a58 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    6a76:	4b0a      	ldr	r3, [pc, #40]	; (6aa0 <ready_thread+0x7c>)
    6a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6a7a:	f103 0120 	add.w	r1, r3, #32
    6a7e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6a80:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6a82:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6a84:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    6a86:	2000      	movs	r0, #0
    6a88:	f7ff ff16 	bl	68b8 <update_cache>
}
    6a8c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    6a8e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6a90:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6a92:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6a94:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6a96:	606c      	str	r4, [r5, #4]
}
    6a98:	e7f5      	b.n	6a86 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6a9a:	2500      	movs	r5, #0
    6a9c:	e7dc      	b.n	6a58 <ready_thread+0x34>
    6a9e:	bf00      	nop
    6aa0:	20000e8c 	.word	0x20000e8c

00006aa4 <z_sched_start>:
{
    6aa4:	b510      	push	{r4, lr}
	__asm__ volatile(
    6aa6:	f04f 0320 	mov.w	r3, #32
    6aaa:	f3ef 8411 	mrs	r4, BASEPRI
    6aae:	f383 8812 	msr	BASEPRI_MAX, r3
    6ab2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6ab6:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    6ab8:	f013 0f04 	tst.w	r3, #4
    6abc:	d104      	bne.n	6ac8 <z_sched_start+0x24>
	__asm__ volatile(
    6abe:	f384 8811 	msr	BASEPRI, r4
    6ac2:	f3bf 8f6f 	isb	sy
}
    6ac6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6ac8:	f023 0304 	bic.w	r3, r3, #4
    6acc:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    6ace:	f7ff ffa9 	bl	6a24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6ad2:	4621      	mov	r1, r4
    6ad4:	4801      	ldr	r0, [pc, #4]	; (6adc <z_sched_start+0x38>)
    6ad6:	f7ff febb 	bl	6850 <z_reschedule>
    6ada:	e7f4      	b.n	6ac6 <z_sched_start+0x22>
    6adc:	20000ec4 	.word	0x20000ec4

00006ae0 <unready_thread>:
{
    6ae0:	b510      	push	{r4, lr}
    6ae2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    6ae4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6ae6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6aea:	2b00      	cmp	r3, #0
    6aec:	db08      	blt.n	6b00 <unready_thread+0x20>
	update_cache(thread == _current);
    6aee:	4b08      	ldr	r3, [pc, #32]	; (6b10 <unready_thread+0x30>)
    6af0:	6898      	ldr	r0, [r3, #8]
    6af2:	42a0      	cmp	r0, r4
    6af4:	bf14      	ite	ne
    6af6:	2000      	movne	r0, #0
    6af8:	2001      	moveq	r0, #1
    6afa:	f7ff fedd 	bl	68b8 <update_cache>
}
    6afe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6b00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6b04:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6b06:	4601      	mov	r1, r0
    6b08:	4802      	ldr	r0, [pc, #8]	; (6b14 <unready_thread+0x34>)
    6b0a:	f001 fda1 	bl	8650 <z_priq_dumb_remove>
}
    6b0e:	e7ee      	b.n	6aee <unready_thread+0xe>
    6b10:	20000e8c 	.word	0x20000e8c
    6b14:	20000eac 	.word	0x20000eac

00006b18 <z_pend_curr>:
{
    6b18:	b510      	push	{r4, lr}
    6b1a:	460c      	mov	r4, r1
    6b1c:	4611      	mov	r1, r2
	pending_current = _current;
    6b1e:	4b06      	ldr	r3, [pc, #24]	; (6b38 <z_pend_curr+0x20>)
    6b20:	6898      	ldr	r0, [r3, #8]
    6b22:	4b06      	ldr	r3, [pc, #24]	; (6b3c <z_pend_curr+0x24>)
    6b24:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    6b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6b2a:	f001 fe1a 	bl	8762 <pend>
    6b2e:	4620      	mov	r0, r4
    6b30:	f7fc fee2 	bl	38f8 <arch_swap>
}
    6b34:	bd10      	pop	{r4, pc}
    6b36:	bf00      	nop
    6b38:	20000e8c 	.word	0x20000e8c
    6b3c:	20000ec0 	.word	0x20000ec0

00006b40 <z_set_prio>:
{
    6b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b44:	4604      	mov	r4, r0
    6b46:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    6b48:	2300      	movs	r3, #0
	__asm__ volatile(
    6b4a:	f04f 0220 	mov.w	r2, #32
    6b4e:	f3ef 8611 	mrs	r6, BASEPRI
    6b52:	f382 8812 	msr	BASEPRI_MAX, r2
    6b56:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    6b5a:	4698      	mov	r8, r3
    6b5c:	e008      	b.n	6b70 <z_set_prio+0x30>
		if (need_sched) {
    6b5e:	f012 0801 	ands.w	r8, r2, #1
    6b62:	d111      	bne.n	6b88 <z_set_prio+0x48>
			thread->base.prio = prio;
    6b64:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    6b66:	f386 8811 	msr	BASEPRI, r6
    6b6a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6b6e:	2301      	movs	r3, #1
    6b70:	461a      	mov	r2, r3
    6b72:	2b00      	cmp	r3, #0
    6b74:	d13d      	bne.n	6bf2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    6b76:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6b78:	f013 0f1f 	tst.w	r3, #31
    6b7c:	d1ef      	bne.n	6b5e <z_set_prio+0x1e>
	return node->next != NULL;
    6b7e:	69a1      	ldr	r1, [r4, #24]
    6b80:	2900      	cmp	r1, #0
    6b82:	d1ec      	bne.n	6b5e <z_set_prio+0x1e>
    6b84:	2201      	movs	r2, #1
    6b86:	e7ea      	b.n	6b5e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6b8c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6b8e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 6bfc <z_set_prio+0xbc>
    6b92:	4621      	mov	r1, r4
    6b94:	4648      	mov	r0, r9
    6b96:	f001 fd5b 	bl	8650 <z_priq_dumb_remove>
				thread->base.prio = prio;
    6b9a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6b9c:	7b63      	ldrb	r3, [r4, #13]
    6b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6ba2:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    6ba4:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ba8:	454d      	cmp	r5, r9
    6baa:	d020      	beq.n	6bee <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6bac:	b16d      	cbz	r5, 6bca <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6bae:	4629      	mov	r1, r5
    6bb0:	4620      	mov	r0, r4
    6bb2:	f001 fd2e 	bl	8612 <z_sched_prio_cmp>
    6bb6:	2800      	cmp	r0, #0
    6bb8:	dc13      	bgt.n	6be2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6bba:	b135      	cbz	r5, 6bca <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    6bbc:	4b0e      	ldr	r3, [pc, #56]	; (6bf8 <z_set_prio+0xb8>)
    6bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bc0:	429d      	cmp	r5, r3
    6bc2:	d002      	beq.n	6bca <z_set_prio+0x8a>
    6bc4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6bc6:	2d00      	cmp	r5, #0
    6bc8:	d1f0      	bne.n	6bac <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    6bca:	4b0b      	ldr	r3, [pc, #44]	; (6bf8 <z_set_prio+0xb8>)
    6bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6bce:	f103 0120 	add.w	r1, r3, #32
    6bd2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6bd4:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6bd6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6bd8:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    6bda:	2001      	movs	r0, #1
    6bdc:	f7ff fe6c 	bl	68b8 <update_cache>
    6be0:	e7c1      	b.n	6b66 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    6be2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6be4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6be6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6be8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6bea:	606c      	str	r4, [r5, #4]
}
    6bec:	e7f5      	b.n	6bda <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6bee:	2500      	movs	r5, #0
    6bf0:	e7dc      	b.n	6bac <z_set_prio+0x6c>
}
    6bf2:	4640      	mov	r0, r8
    6bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6bf8:	20000e8c 	.word	0x20000e8c
    6bfc:	20000eac 	.word	0x20000eac

00006c00 <z_impl_k_thread_suspend>:
{
    6c00:	b538      	push	{r3, r4, r5, lr}
    6c02:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6c04:	3018      	adds	r0, #24
    6c06:	f001 fe4a 	bl	889e <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    6c0a:	2300      	movs	r3, #0
	__asm__ volatile(
    6c0c:	f04f 0220 	mov.w	r2, #32
    6c10:	f3ef 8511 	mrs	r5, BASEPRI
    6c14:	f382 8812 	msr	BASEPRI_MAX, r2
    6c18:	f3bf 8f6f 	isb	sy
    6c1c:	e010      	b.n	6c40 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6c1e:	7b63      	ldrb	r3, [r4, #13]
    6c20:	f043 0310 	orr.w	r3, r3, #16
    6c24:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    6c26:	4b15      	ldr	r3, [pc, #84]	; (6c7c <z_impl_k_thread_suspend+0x7c>)
    6c28:	6898      	ldr	r0, [r3, #8]
    6c2a:	42a0      	cmp	r0, r4
    6c2c:	bf14      	ite	ne
    6c2e:	2000      	movne	r0, #0
    6c30:	2001      	moveq	r0, #1
    6c32:	f7ff fe41 	bl	68b8 <update_cache>
	__asm__ volatile(
    6c36:	f385 8811 	msr	BASEPRI, r5
    6c3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6c3e:	2301      	movs	r3, #1
    6c40:	b963      	cbnz	r3, 6c5c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    6c42:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    6c44:	f994 300d 	ldrsb.w	r3, [r4, #13]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	dae8      	bge.n	6c1e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6c50:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6c52:	4621      	mov	r1, r4
    6c54:	480a      	ldr	r0, [pc, #40]	; (6c80 <z_impl_k_thread_suspend+0x80>)
    6c56:	f001 fcfb 	bl	8650 <z_priq_dumb_remove>
}
    6c5a:	e7e0      	b.n	6c1e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    6c5c:	4b07      	ldr	r3, [pc, #28]	; (6c7c <z_impl_k_thread_suspend+0x7c>)
    6c5e:	689b      	ldr	r3, [r3, #8]
    6c60:	42a3      	cmp	r3, r4
    6c62:	d000      	beq.n	6c66 <z_impl_k_thread_suspend+0x66>
}
    6c64:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6c66:	f04f 0320 	mov.w	r3, #32
    6c6a:	f3ef 8011 	mrs	r0, BASEPRI
    6c6e:	f383 8812 	msr	BASEPRI_MAX, r3
    6c72:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6c76:	f001 fcd6 	bl	8626 <z_reschedule_irqlock>
    6c7a:	e7f3      	b.n	6c64 <z_impl_k_thread_suspend+0x64>
    6c7c:	20000e8c 	.word	0x20000e8c
    6c80:	20000eac 	.word	0x20000eac

00006c84 <k_sched_unlock>:

void k_sched_unlock(void)
{
    6c84:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    6c86:	2300      	movs	r3, #0
    6c88:	f04f 0220 	mov.w	r2, #32
    6c8c:	f3ef 8411 	mrs	r4, BASEPRI
    6c90:	f382 8812 	msr	BASEPRI_MAX, r2
    6c94:	f3bf 8f6f 	isb	sy
    6c98:	b96b      	cbnz	r3, 6cb6 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    6c9a:	4b0c      	ldr	r3, [pc, #48]	; (6ccc <k_sched_unlock+0x48>)
    6c9c:	689a      	ldr	r2, [r3, #8]
    6c9e:	7bd3      	ldrb	r3, [r2, #15]
    6ca0:	3301      	adds	r3, #1
    6ca2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6ca4:	2000      	movs	r0, #0
    6ca6:	f7ff fe07 	bl	68b8 <update_cache>
	__asm__ volatile(
    6caa:	f384 8811 	msr	BASEPRI, r4
    6cae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6cb2:	2301      	movs	r3, #1
    6cb4:	e7f0      	b.n	6c98 <k_sched_unlock+0x14>
	__asm__ volatile(
    6cb6:	f04f 0320 	mov.w	r3, #32
    6cba:	f3ef 8011 	mrs	r0, BASEPRI
    6cbe:	f383 8812 	msr	BASEPRI_MAX, r3
    6cc2:	f3bf 8f6f 	isb	sy
    6cc6:	f001 fcae 	bl	8626 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    6cca:	bd10      	pop	{r4, pc}
    6ccc:	20000e8c 	.word	0x20000e8c

00006cd0 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    6cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    6cd2:	7b43      	ldrb	r3, [r0, #13]
    6cd4:	f013 0f08 	tst.w	r3, #8
    6cd8:	d145      	bne.n	6d66 <end_thread+0x96>
    6cda:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    6cdc:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6ce0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6ce4:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    6ce6:	f013 0f80 	tst.w	r3, #128	; 0x80
    6cea:	d114      	bne.n	6d16 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    6cec:	68ab      	ldr	r3, [r5, #8]
    6cee:	b15b      	cbz	r3, 6d08 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6cf0:	4628      	mov	r0, r5
    6cf2:	f001 fc8c 	bl	860e <pended_on_thread>
    6cf6:	4629      	mov	r1, r5
    6cf8:	f001 fcaa 	bl	8650 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6cfc:	7b6b      	ldrb	r3, [r5, #13]
    6cfe:	f023 0302 	bic.w	r3, r3, #2
    6d02:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    6d04:	2300      	movs	r3, #0
    6d06:	60ab      	str	r3, [r5, #8]
    6d08:	f105 0018 	add.w	r0, r5, #24
    6d0c:	f001 fdc7 	bl	889e <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    6d10:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6d14:	e01c      	b.n	6d50 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6d1a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6d1c:	4601      	mov	r1, r0
    6d1e:	4812      	ldr	r0, [pc, #72]	; (6d68 <end_thread+0x98>)
    6d20:	f001 fc96 	bl	8650 <z_priq_dumb_remove>
}
    6d24:	e7e2      	b.n	6cec <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6d26:	4620      	mov	r0, r4
    6d28:	f001 fc71 	bl	860e <pended_on_thread>
    6d2c:	4621      	mov	r1, r4
    6d2e:	f001 fc8f 	bl	8650 <z_priq_dumb_remove>
    6d32:	7b63      	ldrb	r3, [r4, #13]
    6d34:	f023 0302 	bic.w	r3, r3, #2
    6d38:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6d3a:	2600      	movs	r6, #0
    6d3c:	60a6      	str	r6, [r4, #8]
    6d3e:	f104 0018 	add.w	r0, r4, #24
    6d42:	f001 fdac 	bl	889e <z_abort_timeout>
    6d46:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    6d4a:	4620      	mov	r0, r4
    6d4c:	f7ff fe6a 	bl	6a24 <ready_thread>
	return list->head == list;
    6d50:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d52:	42bc      	cmp	r4, r7
    6d54:	d001      	beq.n	6d5a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6d56:	2c00      	cmp	r4, #0
    6d58:	d1e5      	bne.n	6d26 <end_thread+0x56>
		update_cache(1);
    6d5a:	2001      	movs	r0, #1
    6d5c:	f7ff fdac 	bl	68b8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    6d60:	4628      	mov	r0, r5
    6d62:	f7ff f9f7 	bl	6154 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    6d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d68:	20000eac 	.word	0x20000eac

00006d6c <z_sched_init>:
{
    6d6c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    6d6e:	4804      	ldr	r0, [pc, #16]	; (6d80 <z_sched_init+0x14>)
    6d70:	f001 fd43 	bl	87fa <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6d74:	2100      	movs	r1, #0
    6d76:	4608      	mov	r0, r1
    6d78:	f7ff fd2e 	bl	67d8 <k_sched_time_slice_set>
}
    6d7c:	bd08      	pop	{r3, pc}
    6d7e:	bf00      	nop
    6d80:	20000ea8 	.word	0x20000ea8

00006d84 <z_impl_k_yield>:
{
    6d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d86:	f04f 0320 	mov.w	r3, #32
    6d8a:	f3ef 8611 	mrs	r6, BASEPRI
    6d8e:	f383 8812 	msr	BASEPRI_MAX, r3
    6d92:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    6d96:	4c1c      	ldr	r4, [pc, #112]	; (6e08 <z_impl_k_yield+0x84>)
    6d98:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6d9a:	7b4b      	ldrb	r3, [r1, #13]
    6d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6da0:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6da2:	f104 0720 	add.w	r7, r4, #32
    6da6:	4638      	mov	r0, r7
    6da8:	f001 fc52 	bl	8650 <z_priq_dumb_remove>
	queue_thread(_current);
    6dac:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6dae:	7b6b      	ldrb	r3, [r5, #13]
    6db0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6db4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    6db6:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6db8:	42bc      	cmp	r4, r7
    6dba:	d023      	beq.n	6e04 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6dbc:	b16c      	cbz	r4, 6dda <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6dbe:	4621      	mov	r1, r4
    6dc0:	4628      	mov	r0, r5
    6dc2:	f001 fc26 	bl	8612 <z_sched_prio_cmp>
    6dc6:	2800      	cmp	r0, #0
    6dc8:	dc16      	bgt.n	6df8 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6dca:	b134      	cbz	r4, 6dda <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    6dcc:	4b0e      	ldr	r3, [pc, #56]	; (6e08 <z_impl_k_yield+0x84>)
    6dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6dd0:	429c      	cmp	r4, r3
    6dd2:	d002      	beq.n	6dda <z_impl_k_yield+0x56>
    6dd4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6dd6:	2c00      	cmp	r4, #0
    6dd8:	d1f0      	bne.n	6dbc <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    6dda:	4b0b      	ldr	r3, [pc, #44]	; (6e08 <z_impl_k_yield+0x84>)
    6ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6dde:	f103 0120 	add.w	r1, r3, #32
    6de2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6de4:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6de6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6de8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    6dea:	2001      	movs	r0, #1
    6dec:	f7ff fd64 	bl	68b8 <update_cache>
    6df0:	4630      	mov	r0, r6
    6df2:	f7fc fd81 	bl	38f8 <arch_swap>
}
    6df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    6df8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6dfa:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6dfc:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6dfe:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6e00:	6065      	str	r5, [r4, #4]
}
    6e02:	e7f2      	b.n	6dea <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e04:	2400      	movs	r4, #0
    6e06:	e7d9      	b.n	6dbc <z_impl_k_yield+0x38>
    6e08:	20000e8c 	.word	0x20000e8c

00006e0c <z_tick_sleep>:
{
    6e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e10:	4604      	mov	r4, r0
    6e12:	460d      	mov	r5, r1
	if (ticks == 0) {
    6e14:	ea54 0105 	orrs.w	r1, r4, r5
    6e18:	d037      	beq.n	6e8a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    6e1a:	f06f 0101 	mvn.w	r1, #1
    6e1e:	1a0a      	subs	r2, r1, r0
    6e20:	f04f 31ff 	mov.w	r1, #4294967295
    6e24:	eb61 0305 	sbc.w	r3, r1, r5
    6e28:	2a01      	cmp	r2, #1
    6e2a:	f173 0300 	sbcs.w	r3, r3, #0
    6e2e:	db30      	blt.n	6e92 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6e30:	f06f 0601 	mvn.w	r6, #1
    6e34:	1a36      	subs	r6, r6, r0
    6e36:	f04f 0320 	mov.w	r3, #32
    6e3a:	f3ef 8811 	mrs	r8, BASEPRI
    6e3e:	f383 8812 	msr	BASEPRI_MAX, r3
    6e42:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    6e46:	4f16      	ldr	r7, [pc, #88]	; (6ea0 <z_tick_sleep+0x94>)
    6e48:	68b8      	ldr	r0, [r7, #8]
    6e4a:	4b16      	ldr	r3, [pc, #88]	; (6ea4 <z_tick_sleep+0x98>)
    6e4c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6e4e:	f7ff fe47 	bl	6ae0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6e52:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6e54:	4622      	mov	r2, r4
    6e56:	462b      	mov	r3, r5
    6e58:	4913      	ldr	r1, [pc, #76]	; (6ea8 <z_tick_sleep+0x9c>)
    6e5a:	3018      	adds	r0, #24
    6e5c:	f000 f8f4 	bl	7048 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6e60:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6e62:	7b53      	ldrb	r3, [r2, #13]
    6e64:	f043 0310 	orr.w	r3, r3, #16
    6e68:	7353      	strb	r3, [r2, #13]
    6e6a:	4640      	mov	r0, r8
    6e6c:	f7fc fd44 	bl	38f8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6e70:	2500      	movs	r5, #0
    6e72:	f001 fd73 	bl	895c <sys_clock_tick_get_32>
    6e76:	1a34      	subs	r4, r6, r0
    6e78:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    6e7c:	2c01      	cmp	r4, #1
    6e7e:	f175 0300 	sbcs.w	r3, r5, #0
    6e82:	da0a      	bge.n	6e9a <z_tick_sleep+0x8e>
	return 0;
    6e84:	2000      	movs	r0, #0
}
    6e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    6e8a:	f7ff ff7b 	bl	6d84 <z_impl_k_yield>
		return 0;
    6e8e:	2000      	movs	r0, #0
    6e90:	e7f9      	b.n	6e86 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6e92:	f001 fd63 	bl	895c <sys_clock_tick_get_32>
    6e96:	1906      	adds	r6, r0, r4
    6e98:	e7cd      	b.n	6e36 <z_tick_sleep+0x2a>
		return ticks;
    6e9a:	4620      	mov	r0, r4
    6e9c:	e7f3      	b.n	6e86 <z_tick_sleep+0x7a>
    6e9e:	bf00      	nop
    6ea0:	20000e8c 	.word	0x20000e8c
    6ea4:	20000ec0 	.word	0x20000ec0
    6ea8:	000086a7 	.word	0x000086a7

00006eac <z_impl_k_sleep>:
{
    6eac:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6eae:	f1b1 3fff 	cmp.w	r1, #4294967295
    6eb2:	bf08      	it	eq
    6eb4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    6eb8:	d01a      	beq.n	6ef0 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    6eba:	f7ff ffa7 	bl	6e0c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    6ebe:	4604      	mov	r4, r0
    6ec0:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    6ec2:	0169      	lsls	r1, r5, #5
    6ec4:	0143      	lsls	r3, r0, #5
    6ec6:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    6eca:	1a18      	subs	r0, r3, r0
    6ecc:	eb62 0305 	sbc.w	r3, r2, r5
    6ed0:	009a      	lsls	r2, r3, #2
    6ed2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    6ed6:	0081      	lsls	r1, r0, #2
    6ed8:	4613      	mov	r3, r2
    6eda:	1908      	adds	r0, r1, r4
    6edc:	eb45 0303 	adc.w	r3, r5, r3
    6ee0:	00da      	lsls	r2, r3, #3
    6ee2:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    6ee6:	00c1      	lsls	r1, r0, #3
    6ee8:	0bc8      	lsrs	r0, r1, #15
    6eea:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    6eee:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    6ef0:	4b03      	ldr	r3, [pc, #12]	; (6f00 <z_impl_k_sleep+0x54>)
    6ef2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6ef4:	f7ff fe84 	bl	6c00 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    6ef8:	f04f 30ff 	mov.w	r0, #4294967295
    6efc:	e7f7      	b.n	6eee <z_impl_k_sleep+0x42>
    6efe:	bf00      	nop
    6f00:	20000e8c 	.word	0x20000e8c

00006f04 <z_impl_z_current_get>:
}
    6f04:	4b01      	ldr	r3, [pc, #4]	; (6f0c <z_impl_z_current_get+0x8>)
    6f06:	6898      	ldr	r0, [r3, #8]
    6f08:	4770      	bx	lr
    6f0a:	bf00      	nop
    6f0c:	20000e8c 	.word	0x20000e8c

00006f10 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    6f10:	b538      	push	{r3, r4, r5, lr}
    6f12:	f04f 0320 	mov.w	r3, #32
    6f16:	f3ef 8511 	mrs	r5, BASEPRI
    6f1a:	f383 8812 	msr	BASEPRI_MAX, r3
    6f1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6f22:	7b43      	ldrb	r3, [r0, #13]
    6f24:	f013 0f08 	tst.w	r3, #8
    6f28:	d004      	beq.n	6f34 <z_thread_abort+0x24>
	__asm__ volatile(
    6f2a:	f385 8811 	msr	BASEPRI, r5
    6f2e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6f32:	bd38      	pop	{r3, r4, r5, pc}
    6f34:	4604      	mov	r4, r0
	end_thread(thread);
    6f36:	f7ff fecb 	bl	6cd0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    6f3a:	4b08      	ldr	r3, [pc, #32]	; (6f5c <z_thread_abort+0x4c>)
    6f3c:	689b      	ldr	r3, [r3, #8]
    6f3e:	42a3      	cmp	r3, r4
    6f40:	d004      	beq.n	6f4c <z_thread_abort+0x3c>
    6f42:	f385 8811 	msr	BASEPRI, r5
    6f46:	f3bf 8f6f 	isb	sy
    6f4a:	e7f2      	b.n	6f32 <z_thread_abort+0x22>
    6f4c:	f3ef 8305 	mrs	r3, IPSR
    6f50:	2b00      	cmp	r3, #0
    6f52:	d1f6      	bne.n	6f42 <z_thread_abort+0x32>
    6f54:	4628      	mov	r0, r5
    6f56:	f7fc fccf 	bl	38f8 <arch_swap>
	return ret;
    6f5a:	e7f2      	b.n	6f42 <z_thread_abort+0x32>
    6f5c:	20000e8c 	.word	0x20000e8c

00006f60 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6f60:	b5d0      	push	{r4, r6, r7, lr}
    6f62:	b082      	sub	sp, #8
    6f64:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6f66:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    6f6a:	e9cd 6700 	strd	r6, r7, [sp]
    6f6e:	f7ff fdd3 	bl	6b18 <z_pend_curr>

	if (data != NULL) {
    6f72:	b11c      	cbz	r4, 6f7c <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
    6f74:	4b02      	ldr	r3, [pc, #8]	; (6f80 <z_sched_wait+0x20>)
    6f76:	689b      	ldr	r3, [r3, #8]
    6f78:	695b      	ldr	r3, [r3, #20]
    6f7a:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6f7c:	b002      	add	sp, #8
    6f7e:	bdd0      	pop	{r4, r6, r7, pc}
    6f80:	20000e8c 	.word	0x20000e8c

00006f84 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6f84:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    6f86:	4806      	ldr	r0, [pc, #24]	; (6fa0 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6f88:	4a06      	ldr	r2, [pc, #24]	; (6fa4 <z_data_copy+0x20>)
    6f8a:	1a12      	subs	r2, r2, r0
    6f8c:	4906      	ldr	r1, [pc, #24]	; (6fa8 <z_data_copy+0x24>)
    6f8e:	f001 fcf0 	bl	8972 <memcpy>
    6f92:	4a06      	ldr	r2, [pc, #24]	; (6fac <z_data_copy+0x28>)
    6f94:	4906      	ldr	r1, [pc, #24]	; (6fb0 <z_data_copy+0x2c>)
    6f96:	4807      	ldr	r0, [pc, #28]	; (6fb4 <z_data_copy+0x30>)
    6f98:	f001 fceb 	bl	8972 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6f9c:	bd08      	pop	{r3, pc}
    6f9e:	bf00      	nop
    6fa0:	20000000 	.word	0x20000000
    6fa4:	200001a0 	.word	0x200001a0
    6fa8:	0000934c 	.word	0x0000934c
    6fac:	00000000 	.word	0x00000000
    6fb0:	0000934c 	.word	0x0000934c
    6fb4:	20000000 	.word	0x20000000

00006fb8 <first>:
	return list->head == list;
    6fb8:	4b03      	ldr	r3, [pc, #12]	; (6fc8 <first+0x10>)
    6fba:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fbc:	4298      	cmp	r0, r3
    6fbe:	d000      	beq.n	6fc2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    6fc0:	4770      	bx	lr
    6fc2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    6fc4:	e7fc      	b.n	6fc0 <first+0x8>
    6fc6:	bf00      	nop
    6fc8:	200000d4 	.word	0x200000d4

00006fcc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6fcc:	b130      	cbz	r0, 6fdc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    6fce:	4a04      	ldr	r2, [pc, #16]	; (6fe0 <next+0x14>)
    6fd0:	6852      	ldr	r2, [r2, #4]
    6fd2:	4290      	cmp	r0, r2
    6fd4:	d001      	beq.n	6fda <next+0xe>
    6fd6:	6800      	ldr	r0, [r0, #0]
    6fd8:	4770      	bx	lr
    6fda:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    6fdc:	4770      	bx	lr
    6fde:	bf00      	nop
    6fe0:	200000d4 	.word	0x200000d4

00006fe4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    6fe4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6fe6:	4b04      	ldr	r3, [pc, #16]	; (6ff8 <elapsed+0x14>)
    6fe8:	681b      	ldr	r3, [r3, #0]
    6fea:	b10b      	cbz	r3, 6ff0 <elapsed+0xc>
    6fec:	2000      	movs	r0, #0
}
    6fee:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6ff0:	f7fd ff68 	bl	4ec4 <sys_clock_elapsed>
    6ff4:	e7fb      	b.n	6fee <elapsed+0xa>
    6ff6:	bf00      	nop
    6ff8:	20000ecc 	.word	0x20000ecc

00006ffc <next_timeout>:

static int32_t next_timeout(void)
{
    6ffc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    6ffe:	f7ff ffdb 	bl	6fb8 <first>
    7002:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    7004:	f7ff ffee 	bl	6fe4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    7008:	b18c      	cbz	r4, 702e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    700a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    700e:	1a12      	subs	r2, r2, r0
    7010:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    7014:	2a01      	cmp	r2, #1
    7016:	f173 0100 	sbcs.w	r1, r3, #0
    701a:	db11      	blt.n	7040 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    701c:	4610      	mov	r0, r2
    701e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    7022:	f173 0300 	sbcs.w	r3, r3, #0
    7026:	db04      	blt.n	7032 <next_timeout+0x36>
    7028:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    702c:	e001      	b.n	7032 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    702e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7032:	4b04      	ldr	r3, [pc, #16]	; (7044 <next_timeout+0x48>)
    7034:	691b      	ldr	r3, [r3, #16]
    7036:	b113      	cbz	r3, 703e <next_timeout+0x42>
    7038:	4283      	cmp	r3, r0
    703a:	da00      	bge.n	703e <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    703c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    703e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    7040:	2000      	movs	r0, #0
    7042:	e7f6      	b.n	7032 <next_timeout+0x36>
    7044:	20000e8c 	.word	0x20000e8c

00007048 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    704c:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    704e:	f1b3 3fff 	cmp.w	r3, #4294967295
    7052:	bf08      	it	eq
    7054:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    7058:	f000 8096 	beq.w	7188 <z_add_timeout+0x140>
    705c:	4682      	mov	sl, r0
    705e:	4614      	mov	r4, r2
    7060:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    7062:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    7064:	2300      	movs	r3, #0
	__asm__ volatile(
    7066:	f04f 0220 	mov.w	r2, #32
    706a:	f3ef 8b11 	mrs	fp, BASEPRI
    706e:	f382 8812 	msr	BASEPRI_MAX, r2
    7072:	f3bf 8f6f 	isb	sy
    7076:	e02e      	b.n	70d6 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    7078:	2201      	movs	r2, #1
    707a:	2300      	movs	r3, #0
    707c:	e04b      	b.n	7116 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    707e:	f7ff ffb1 	bl	6fe4 <elapsed>
    7082:	1822      	adds	r2, r4, r0
    7084:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    7088:	3201      	adds	r2, #1
    708a:	f143 0300 	adc.w	r3, r3, #0
    708e:	f8ca 2010 	str.w	r2, [sl, #16]
    7092:	f8ca 3014 	str.w	r3, [sl, #20]
    7096:	e042      	b.n	711e <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    7098:	9b00      	ldr	r3, [sp, #0]
    709a:	1ac2      	subs	r2, r0, r3
    709c:	9b01      	ldr	r3, [sp, #4]
    709e:	eb61 0303 	sbc.w	r3, r1, r3
    70a2:	f8cc 2010 	str.w	r2, [ip, #16]
    70a6:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    70aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    70ae:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    70b2:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    70b6:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    70ba:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    70be:	f1bc 0f00 	cmp.w	ip, #0
    70c2:	d049      	beq.n	7158 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    70c4:	f7ff ff78 	bl	6fb8 <first>
    70c8:	4582      	cmp	sl, r0
    70ca:	d050      	beq.n	716e <z_add_timeout+0x126>
	__asm__ volatile(
    70cc:	f38b 8811 	msr	BASEPRI, fp
    70d0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    70d4:	2301      	movs	r3, #1
    70d6:	2b00      	cmp	r3, #0
    70d8:	d156      	bne.n	7188 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    70da:	f06f 0301 	mvn.w	r3, #1
    70de:	ebb3 0804 	subs.w	r8, r3, r4
    70e2:	f04f 30ff 	mov.w	r0, #4294967295
    70e6:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    70ea:	f1b8 0f00 	cmp.w	r8, #0
    70ee:	f179 0300 	sbcs.w	r3, r9, #0
    70f2:	dbc4      	blt.n	707e <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    70f4:	4a26      	ldr	r2, [pc, #152]	; (7190 <z_add_timeout+0x148>)
    70f6:	6813      	ldr	r3, [r2, #0]
    70f8:	6852      	ldr	r2, [r2, #4]
    70fa:	18e3      	adds	r3, r4, r3
    70fc:	eb45 0202 	adc.w	r2, r5, r2
    7100:	f06f 0101 	mvn.w	r1, #1
    7104:	1ace      	subs	r6, r1, r3
    7106:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    710a:	4632      	mov	r2, r6
    710c:	463b      	mov	r3, r7
    710e:	2e01      	cmp	r6, #1
    7110:	f177 0100 	sbcs.w	r1, r7, #0
    7114:	dbb0      	blt.n	7078 <z_add_timeout+0x30>
    7116:	f8ca 2010 	str.w	r2, [sl, #16]
    711a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    711e:	f7ff ff4b 	bl	6fb8 <first>
    7122:	4684      	mov	ip, r0
    7124:	f1bc 0f00 	cmp.w	ip, #0
    7128:	d0c9      	beq.n	70be <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    712a:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    712e:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    7132:	e9cd 2300 	strd	r2, r3, [sp]
    7136:	4282      	cmp	r2, r0
    7138:	418b      	sbcs	r3, r1
    713a:	dbad      	blt.n	7098 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    713c:	9b00      	ldr	r3, [sp, #0]
    713e:	1a1a      	subs	r2, r3, r0
    7140:	9b01      	ldr	r3, [sp, #4]
    7142:	eb63 0301 	sbc.w	r3, r3, r1
    7146:	f8ca 2010 	str.w	r2, [sl, #16]
    714a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    714e:	4660      	mov	r0, ip
    7150:	f7ff ff3c 	bl	6fcc <next>
    7154:	4684      	mov	ip, r0
    7156:	e7e5      	b.n	7124 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    7158:	4b0e      	ldr	r3, [pc, #56]	; (7194 <z_add_timeout+0x14c>)
    715a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    715c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    7160:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    7164:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    7168:	f8c3 a004 	str.w	sl, [r3, #4]
}
    716c:	e7aa      	b.n	70c4 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    716e:	f7ff ff45 	bl	6ffc <next_timeout>

			if (next_time == 0 ||
    7172:	4603      	mov	r3, r0
    7174:	b118      	cbz	r0, 717e <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    7176:	4a08      	ldr	r2, [pc, #32]	; (7198 <z_add_timeout+0x150>)
    7178:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    717a:	4282      	cmp	r2, r0
    717c:	d0a6      	beq.n	70cc <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    717e:	2100      	movs	r1, #0
    7180:	4618      	mov	r0, r3
    7182:	f7fd fe6b 	bl	4e5c <sys_clock_set_timeout>
    7186:	e7a1      	b.n	70cc <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7188:	b003      	add	sp, #12
    718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    718e:	bf00      	nop
    7190:	20000320 	.word	0x20000320
    7194:	200000d4 	.word	0x200000d4
    7198:	20000e8c 	.word	0x20000e8c

0000719c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    719e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    71a0:	f7ff fbf4 	bl	698c <z_time_slice>
	__asm__ volatile(
    71a4:	f04f 0320 	mov.w	r3, #32
    71a8:	f3ef 8511 	mrs	r5, BASEPRI
    71ac:	f383 8812 	msr	BASEPRI_MAX, r3
    71b0:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    71b4:	4b28      	ldr	r3, [pc, #160]	; (7258 <sys_clock_announce+0xbc>)
    71b6:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    71b8:	f7ff fefe 	bl	6fb8 <first>
    71bc:	4604      	mov	r4, r0
    71be:	b350      	cbz	r0, 7216 <sys_clock_announce+0x7a>
    71c0:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    71c4:	4b24      	ldr	r3, [pc, #144]	; (7258 <sys_clock_announce+0xbc>)
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	17d9      	asrs	r1, r3, #31
    71ca:	42b3      	cmp	r3, r6
    71cc:	eb71 0207 	sbcs.w	r2, r1, r7
    71d0:	db21      	blt.n	7216 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    71d2:	4a22      	ldr	r2, [pc, #136]	; (725c <sys_clock_announce+0xc0>)
    71d4:	e9d2 0100 	ldrd	r0, r1, [r2]
    71d8:	1980      	adds	r0, r0, r6
    71da:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    71de:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    71e2:	1b9b      	subs	r3, r3, r6
    71e4:	4a1c      	ldr	r2, [pc, #112]	; (7258 <sys_clock_announce+0xbc>)
    71e6:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    71e8:	2200      	movs	r2, #0
    71ea:	2300      	movs	r3, #0
    71ec:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    71f0:	4620      	mov	r0, r4
    71f2:	f001 fb3d 	bl	8870 <remove_timeout>
	__asm__ volatile(
    71f6:	f385 8811 	msr	BASEPRI, r5
    71fa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    71fe:	68a3      	ldr	r3, [r4, #8]
    7200:	4620      	mov	r0, r4
    7202:	4798      	blx	r3
	__asm__ volatile(
    7204:	f04f 0320 	mov.w	r3, #32
    7208:	f3ef 8511 	mrs	r5, BASEPRI
    720c:	f383 8812 	msr	BASEPRI_MAX, r3
    7210:	f3bf 8f6f 	isb	sy
    7214:	e7d0      	b.n	71b8 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    7216:	b144      	cbz	r4, 722a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    7218:	4b0f      	ldr	r3, [pc, #60]	; (7258 <sys_clock_announce+0xbc>)
    721a:	6819      	ldr	r1, [r3, #0]
    721c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    7220:	1a52      	subs	r2, r2, r1
    7222:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    7226:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    722a:	480c      	ldr	r0, [pc, #48]	; (725c <sys_clock_announce+0xc0>)
    722c:	490a      	ldr	r1, [pc, #40]	; (7258 <sys_clock_announce+0xbc>)
    722e:	680c      	ldr	r4, [r1, #0]
    7230:	e9d0 2300 	ldrd	r2, r3, [r0]
    7234:	1912      	adds	r2, r2, r4
    7236:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    723a:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    723e:	2400      	movs	r4, #0
    7240:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7242:	f7ff fedb 	bl	6ffc <next_timeout>
    7246:	4621      	mov	r1, r4
    7248:	f7fd fe08 	bl	4e5c <sys_clock_set_timeout>
	__asm__ volatile(
    724c:	f385 8811 	msr	BASEPRI, r5
    7250:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7256:	bf00      	nop
    7258:	20000ecc 	.word	0x20000ecc
    725c:	20000320 	.word	0x20000320

00007260 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7260:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    7262:	2100      	movs	r1, #0
	__asm__ volatile(
    7264:	f04f 0320 	mov.w	r3, #32
    7268:	f3ef 8411 	mrs	r4, BASEPRI
    726c:	f383 8812 	msr	BASEPRI_MAX, r3
    7270:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    7274:	2200      	movs	r2, #0
    7276:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    7278:	b969      	cbnz	r1, 7296 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    727a:	f7fd fe23 	bl	4ec4 <sys_clock_elapsed>
    727e:	4b07      	ldr	r3, [pc, #28]	; (729c <sys_clock_tick_get+0x3c>)
    7280:	e9d3 2300 	ldrd	r2, r3, [r3]
    7284:	1812      	adds	r2, r2, r0
    7286:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    728a:	f384 8811 	msr	BASEPRI, r4
    728e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7292:	2101      	movs	r1, #1
    7294:	e7f0      	b.n	7278 <sys_clock_tick_get+0x18>
	}
	return t;
}
    7296:	4610      	mov	r0, r2
    7298:	4619      	mov	r1, r3
    729a:	bd10      	pop	{r4, pc}
    729c:	20000320 	.word	0x20000320

000072a0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    72a0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    72a2:	4a03      	ldr	r2, [pc, #12]	; (72b0 <boot_banner+0x10>)
    72a4:	4903      	ldr	r1, [pc, #12]	; (72b4 <boot_banner+0x14>)
    72a6:	4804      	ldr	r0, [pc, #16]	; (72b8 <boot_banner+0x18>)
    72a8:	f000 faab 	bl	7802 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    72ac:	bd08      	pop	{r3, pc}
    72ae:	bf00      	nop
    72b0:	00008de8 	.word	0x00008de8
    72b4:	00008fe4 	.word	0x00008fe4
    72b8:	00008ff4 	.word	0x00008ff4

000072bc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    72bc:	b510      	push	{r4, lr}
    72be:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    72c0:	4b08      	ldr	r3, [pc, #32]	; (72e4 <k_sys_work_q_init+0x28>)
    72c2:	9302      	str	r3, [sp, #8]
    72c4:	2400      	movs	r4, #0
    72c6:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    72ca:	ab02      	add	r3, sp, #8
    72cc:	9300      	str	r3, [sp, #0]
    72ce:	f04f 33ff 	mov.w	r3, #4294967295
    72d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    72d6:	4904      	ldr	r1, [pc, #16]	; (72e8 <k_sys_work_q_init+0x2c>)
    72d8:	4804      	ldr	r0, [pc, #16]	; (72ec <k_sys_work_q_init+0x30>)
    72da:	f7ff fa19 	bl	6710 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    72de:	4620      	mov	r0, r4
    72e0:	b004      	add	sp, #16
    72e2:	bd10      	pop	{r4, pc}
    72e4:	0000901c 	.word	0x0000901c
    72e8:	20001e60 	.word	0x20001e60
    72ec:	20000328 	.word	0x20000328

000072f0 <nrf_cc3xx_platform_init_no_rng>:
    72f0:	b510      	push	{r4, lr}
    72f2:	4c0a      	ldr	r4, [pc, #40]	; (731c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    72f4:	6823      	ldr	r3, [r4, #0]
    72f6:	b11b      	cbz	r3, 7300 <nrf_cc3xx_platform_init_no_rng+0x10>
    72f8:	2301      	movs	r3, #1
    72fa:	6023      	str	r3, [r4, #0]
    72fc:	2000      	movs	r0, #0
    72fe:	bd10      	pop	{r4, pc}
    7300:	f000 f8d6 	bl	74b0 <CC_LibInitNoRng>
    7304:	2800      	cmp	r0, #0
    7306:	d0f7      	beq.n	72f8 <nrf_cc3xx_platform_init_no_rng+0x8>
    7308:	3801      	subs	r0, #1
    730a:	2806      	cmp	r0, #6
    730c:	d803      	bhi.n	7316 <nrf_cc3xx_platform_init_no_rng+0x26>
    730e:	4b04      	ldr	r3, [pc, #16]	; (7320 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7310:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7314:	bd10      	pop	{r4, pc}
    7316:	4803      	ldr	r0, [pc, #12]	; (7324 <nrf_cc3xx_platform_init_no_rng+0x34>)
    7318:	bd10      	pop	{r4, pc}
    731a:	bf00      	nop
    731c:	20000ed0 	.word	0x20000ed0
    7320:	00009028 	.word	0x00009028
    7324:	ffff8ffe 	.word	0xffff8ffe

00007328 <nrf_cc3xx_platform_abort>:
    7328:	f3bf 8f4f 	dsb	sy
    732c:	4905      	ldr	r1, [pc, #20]	; (7344 <nrf_cc3xx_platform_abort+0x1c>)
    732e:	4b06      	ldr	r3, [pc, #24]	; (7348 <nrf_cc3xx_platform_abort+0x20>)
    7330:	68ca      	ldr	r2, [r1, #12]
    7332:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7336:	4313      	orrs	r3, r2
    7338:	60cb      	str	r3, [r1, #12]
    733a:	f3bf 8f4f 	dsb	sy
    733e:	bf00      	nop
    7340:	e7fd      	b.n	733e <nrf_cc3xx_platform_abort+0x16>
    7342:	bf00      	nop
    7344:	e000ed00 	.word	0xe000ed00
    7348:	05fa0004 	.word	0x05fa0004

0000734c <CC_PalAbort>:
    734c:	b4f0      	push	{r4, r5, r6, r7}
    734e:	4f09      	ldr	r7, [pc, #36]	; (7374 <CC_PalAbort+0x28>)
    7350:	4e09      	ldr	r6, [pc, #36]	; (7378 <CC_PalAbort+0x2c>)
    7352:	4c0a      	ldr	r4, [pc, #40]	; (737c <CC_PalAbort+0x30>)
    7354:	4a0a      	ldr	r2, [pc, #40]	; (7380 <CC_PalAbort+0x34>)
    7356:	4d0b      	ldr	r5, [pc, #44]	; (7384 <CC_PalAbort+0x38>)
    7358:	490b      	ldr	r1, [pc, #44]	; (7388 <CC_PalAbort+0x3c>)
    735a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    735e:	603b      	str	r3, [r7, #0]
    7360:	6852      	ldr	r2, [r2, #4]
    7362:	6033      	str	r3, [r6, #0]
    7364:	6023      	str	r3, [r4, #0]
    7366:	2400      	movs	r4, #0
    7368:	602b      	str	r3, [r5, #0]
    736a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    736e:	bcf0      	pop	{r4, r5, r6, r7}
    7370:	4710      	bx	r2
    7372:	bf00      	nop
    7374:	5002b400 	.word	0x5002b400
    7378:	5002b404 	.word	0x5002b404
    737c:	5002b408 	.word	0x5002b408
    7380:	200000dc 	.word	0x200000dc
    7384:	5002b40c 	.word	0x5002b40c
    7388:	5002a000 	.word	0x5002a000

0000738c <nrf_cc3xx_platform_set_abort>:
    738c:	e9d0 1200 	ldrd	r1, r2, [r0]
    7390:	4b01      	ldr	r3, [pc, #4]	; (7398 <nrf_cc3xx_platform_set_abort+0xc>)
    7392:	e9c3 1200 	strd	r1, r2, [r3]
    7396:	4770      	bx	lr
    7398:	200000dc 	.word	0x200000dc

0000739c <mutex_free>:
    739c:	b510      	push	{r4, lr}
    739e:	4604      	mov	r4, r0
    73a0:	b130      	cbz	r0, 73b0 <mutex_free+0x14>
    73a2:	6863      	ldr	r3, [r4, #4]
    73a4:	06db      	lsls	r3, r3, #27
    73a6:	d502      	bpl.n	73ae <mutex_free+0x12>
    73a8:	2300      	movs	r3, #0
    73aa:	6023      	str	r3, [r4, #0]
    73ac:	6063      	str	r3, [r4, #4]
    73ae:	bd10      	pop	{r4, pc}
    73b0:	4b02      	ldr	r3, [pc, #8]	; (73bc <mutex_free+0x20>)
    73b2:	4803      	ldr	r0, [pc, #12]	; (73c0 <mutex_free+0x24>)
    73b4:	685b      	ldr	r3, [r3, #4]
    73b6:	4798      	blx	r3
    73b8:	e7f3      	b.n	73a2 <mutex_free+0x6>
    73ba:	bf00      	nop
    73bc:	200000dc 	.word	0x200000dc
    73c0:	00009044 	.word	0x00009044

000073c4 <mutex_unlock>:
    73c4:	b168      	cbz	r0, 73e2 <mutex_unlock+0x1e>
    73c6:	6843      	ldr	r3, [r0, #4]
    73c8:	b13b      	cbz	r3, 73da <mutex_unlock+0x16>
    73ca:	06db      	lsls	r3, r3, #27
    73cc:	d507      	bpl.n	73de <mutex_unlock+0x1a>
    73ce:	f3bf 8f5f 	dmb	sy
    73d2:	2300      	movs	r3, #0
    73d4:	6003      	str	r3, [r0, #0]
    73d6:	4618      	mov	r0, r3
    73d8:	4770      	bx	lr
    73da:	4803      	ldr	r0, [pc, #12]	; (73e8 <mutex_unlock+0x24>)
    73dc:	4770      	bx	lr
    73de:	4803      	ldr	r0, [pc, #12]	; (73ec <mutex_unlock+0x28>)
    73e0:	4770      	bx	lr
    73e2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    73e6:	4770      	bx	lr
    73e8:	ffff8fea 	.word	0xffff8fea
    73ec:	ffff8fe9 	.word	0xffff8fe9

000073f0 <mutex_init>:
    73f0:	b510      	push	{r4, lr}
    73f2:	4604      	mov	r4, r0
    73f4:	b120      	cbz	r0, 7400 <mutex_init+0x10>
    73f6:	2200      	movs	r2, #0
    73f8:	2311      	movs	r3, #17
    73fa:	6022      	str	r2, [r4, #0]
    73fc:	6063      	str	r3, [r4, #4]
    73fe:	bd10      	pop	{r4, pc}
    7400:	4801      	ldr	r0, [pc, #4]	; (7408 <mutex_init+0x18>)
    7402:	f7ff ffa3 	bl	734c <CC_PalAbort>
    7406:	e7f6      	b.n	73f6 <mutex_init+0x6>
    7408:	0000906c 	.word	0x0000906c

0000740c <mutex_lock>:
    740c:	b1c0      	cbz	r0, 7440 <mutex_lock+0x34>
    740e:	6843      	ldr	r3, [r0, #4]
    7410:	b1a3      	cbz	r3, 743c <mutex_lock+0x30>
    7412:	06db      	lsls	r3, r3, #27
    7414:	d510      	bpl.n	7438 <mutex_lock+0x2c>
    7416:	2201      	movs	r2, #1
    7418:	f3bf 8f5b 	dmb	ish
    741c:	e850 3f00 	ldrex	r3, [r0]
    7420:	e840 2100 	strex	r1, r2, [r0]
    7424:	2900      	cmp	r1, #0
    7426:	d1f9      	bne.n	741c <mutex_lock+0x10>
    7428:	f3bf 8f5b 	dmb	ish
    742c:	2b01      	cmp	r3, #1
    742e:	d0f3      	beq.n	7418 <mutex_lock+0xc>
    7430:	f3bf 8f5f 	dmb	sy
    7434:	2000      	movs	r0, #0
    7436:	4770      	bx	lr
    7438:	4803      	ldr	r0, [pc, #12]	; (7448 <mutex_lock+0x3c>)
    743a:	4770      	bx	lr
    743c:	4803      	ldr	r0, [pc, #12]	; (744c <mutex_lock+0x40>)
    743e:	4770      	bx	lr
    7440:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7444:	4770      	bx	lr
    7446:	bf00      	nop
    7448:	ffff8fe9 	.word	0xffff8fe9
    744c:	ffff8fea 	.word	0xffff8fea

00007450 <nrf_cc3xx_platform_set_mutexes>:
    7450:	b570      	push	{r4, r5, r6, lr}
    7452:	e9d0 2300 	ldrd	r2, r3, [r0]
    7456:	4c13      	ldr	r4, [pc, #76]	; (74a4 <nrf_cc3xx_platform_set_mutexes+0x54>)
    7458:	4d13      	ldr	r5, [pc, #76]	; (74a8 <nrf_cc3xx_platform_set_mutexes+0x58>)
    745a:	e9c4 2300 	strd	r2, r3, [r4]
    745e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    7462:	e9c4 6302 	strd	r6, r3, [r4, #8]
    7466:	4b11      	ldr	r3, [pc, #68]	; (74ac <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7468:	6808      	ldr	r0, [r1, #0]
    746a:	6018      	str	r0, [r3, #0]
    746c:	6848      	ldr	r0, [r1, #4]
    746e:	6058      	str	r0, [r3, #4]
    7470:	6888      	ldr	r0, [r1, #8]
    7472:	6098      	str	r0, [r3, #8]
    7474:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    7478:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    747c:	60de      	str	r6, [r3, #12]
    747e:	6118      	str	r0, [r3, #16]
    7480:	06cb      	lsls	r3, r1, #27
    7482:	d50d      	bpl.n	74a0 <nrf_cc3xx_platform_set_mutexes+0x50>
    7484:	2300      	movs	r3, #0
    7486:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    748a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    748e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    7492:	4790      	blx	r2
    7494:	6823      	ldr	r3, [r4, #0]
    7496:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    749a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    749e:	4718      	bx	r3
    74a0:	bd70      	pop	{r4, r5, r6, pc}
    74a2:	bf00      	nop
    74a4:	200000ec 	.word	0x200000ec
    74a8:	20000eec 	.word	0x20000eec
    74ac:	200000fc 	.word	0x200000fc

000074b0 <CC_LibInitNoRng>:
    74b0:	b510      	push	{r4, lr}
    74b2:	f000 f833 	bl	751c <CC_HalInit>
    74b6:	b120      	cbz	r0, 74c2 <CC_LibInitNoRng+0x12>
    74b8:	2403      	movs	r4, #3
    74ba:	f000 f867 	bl	758c <CC_PalTerminate>
    74be:	4620      	mov	r0, r4
    74c0:	bd10      	pop	{r4, pc}
    74c2:	f000 f835 	bl	7530 <CC_PalInit>
    74c6:	b990      	cbnz	r0, 74ee <CC_LibInitNoRng+0x3e>
    74c8:	f000 f8b0 	bl	762c <CC_PalPowerSaveModeSelect>
    74cc:	b990      	cbnz	r0, 74f4 <CC_LibInitNoRng+0x44>
    74ce:	4b0f      	ldr	r3, [pc, #60]	; (750c <CC_LibInitNoRng+0x5c>)
    74d0:	681b      	ldr	r3, [r3, #0]
    74d2:	0e1b      	lsrs	r3, r3, #24
    74d4:	2bf0      	cmp	r3, #240	; 0xf0
    74d6:	d108      	bne.n	74ea <CC_LibInitNoRng+0x3a>
    74d8:	4a0d      	ldr	r2, [pc, #52]	; (7510 <CC_LibInitNoRng+0x60>)
    74da:	4b0e      	ldr	r3, [pc, #56]	; (7514 <CC_LibInitNoRng+0x64>)
    74dc:	6812      	ldr	r2, [r2, #0]
    74de:	429a      	cmp	r2, r3
    74e0:	d00a      	beq.n	74f8 <CC_LibInitNoRng+0x48>
    74e2:	2407      	movs	r4, #7
    74e4:	f000 f81c 	bl	7520 <CC_HalTerminate>
    74e8:	e7e7      	b.n	74ba <CC_LibInitNoRng+0xa>
    74ea:	2406      	movs	r4, #6
    74ec:	e7fa      	b.n	74e4 <CC_LibInitNoRng+0x34>
    74ee:	2404      	movs	r4, #4
    74f0:	4620      	mov	r0, r4
    74f2:	bd10      	pop	{r4, pc}
    74f4:	2400      	movs	r4, #0
    74f6:	e7f5      	b.n	74e4 <CC_LibInitNoRng+0x34>
    74f8:	2001      	movs	r0, #1
    74fa:	f000 f897 	bl	762c <CC_PalPowerSaveModeSelect>
    74fe:	4604      	mov	r4, r0
    7500:	2800      	cmp	r0, #0
    7502:	d1f7      	bne.n	74f4 <CC_LibInitNoRng+0x44>
    7504:	4b04      	ldr	r3, [pc, #16]	; (7518 <CC_LibInitNoRng+0x68>)
    7506:	6018      	str	r0, [r3, #0]
    7508:	e7d9      	b.n	74be <CC_LibInitNoRng+0xe>
    750a:	bf00      	nop
    750c:	5002b928 	.word	0x5002b928
    7510:	5002ba24 	.word	0x5002ba24
    7514:	20e00000 	.word	0x20e00000
    7518:	5002ba0c 	.word	0x5002ba0c

0000751c <CC_HalInit>:
    751c:	2000      	movs	r0, #0
    751e:	4770      	bx	lr

00007520 <CC_HalTerminate>:
    7520:	2000      	movs	r0, #0
    7522:	4770      	bx	lr

00007524 <CC_HalMaskInterrupt>:
    7524:	4b01      	ldr	r3, [pc, #4]	; (752c <CC_HalMaskInterrupt+0x8>)
    7526:	6018      	str	r0, [r3, #0]
    7528:	4770      	bx	lr
    752a:	bf00      	nop
    752c:	5002ba04 	.word	0x5002ba04

00007530 <CC_PalInit>:
    7530:	b510      	push	{r4, lr}
    7532:	4811      	ldr	r0, [pc, #68]	; (7578 <CC_PalInit+0x48>)
    7534:	f000 f848 	bl	75c8 <CC_PalMutexCreate>
    7538:	b100      	cbz	r0, 753c <CC_PalInit+0xc>
    753a:	bd10      	pop	{r4, pc}
    753c:	480f      	ldr	r0, [pc, #60]	; (757c <CC_PalInit+0x4c>)
    753e:	f000 f843 	bl	75c8 <CC_PalMutexCreate>
    7542:	2800      	cmp	r0, #0
    7544:	d1f9      	bne.n	753a <CC_PalInit+0xa>
    7546:	4c0e      	ldr	r4, [pc, #56]	; (7580 <CC_PalInit+0x50>)
    7548:	4620      	mov	r0, r4
    754a:	f000 f83d 	bl	75c8 <CC_PalMutexCreate>
    754e:	2800      	cmp	r0, #0
    7550:	d1f3      	bne.n	753a <CC_PalInit+0xa>
    7552:	4b0c      	ldr	r3, [pc, #48]	; (7584 <CC_PalInit+0x54>)
    7554:	480c      	ldr	r0, [pc, #48]	; (7588 <CC_PalInit+0x58>)
    7556:	601c      	str	r4, [r3, #0]
    7558:	f000 f836 	bl	75c8 <CC_PalMutexCreate>
    755c:	4601      	mov	r1, r0
    755e:	2800      	cmp	r0, #0
    7560:	d1eb      	bne.n	753a <CC_PalInit+0xa>
    7562:	f000 f82d 	bl	75c0 <CC_PalDmaInit>
    7566:	4604      	mov	r4, r0
    7568:	b108      	cbz	r0, 756e <CC_PalInit+0x3e>
    756a:	4620      	mov	r0, r4
    756c:	bd10      	pop	{r4, pc}
    756e:	f000 f83f 	bl	75f0 <CC_PalPowerSaveModeInit>
    7572:	4620      	mov	r0, r4
    7574:	e7fa      	b.n	756c <CC_PalInit+0x3c>
    7576:	bf00      	nop
    7578:	20000134 	.word	0x20000134
    757c:	20000128 	.word	0x20000128
    7580:	20000130 	.word	0x20000130
    7584:	20000138 	.word	0x20000138
    7588:	2000012c 	.word	0x2000012c

0000758c <CC_PalTerminate>:
    758c:	b508      	push	{r3, lr}
    758e:	4808      	ldr	r0, [pc, #32]	; (75b0 <CC_PalTerminate+0x24>)
    7590:	f000 f824 	bl	75dc <CC_PalMutexDestroy>
    7594:	4807      	ldr	r0, [pc, #28]	; (75b4 <CC_PalTerminate+0x28>)
    7596:	f000 f821 	bl	75dc <CC_PalMutexDestroy>
    759a:	4807      	ldr	r0, [pc, #28]	; (75b8 <CC_PalTerminate+0x2c>)
    759c:	f000 f81e 	bl	75dc <CC_PalMutexDestroy>
    75a0:	4806      	ldr	r0, [pc, #24]	; (75bc <CC_PalTerminate+0x30>)
    75a2:	f000 f81b 	bl	75dc <CC_PalMutexDestroy>
    75a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    75aa:	f000 b80b 	b.w	75c4 <CC_PalDmaTerminate>
    75ae:	bf00      	nop
    75b0:	20000134 	.word	0x20000134
    75b4:	20000128 	.word	0x20000128
    75b8:	20000130 	.word	0x20000130
    75bc:	2000012c 	.word	0x2000012c

000075c0 <CC_PalDmaInit>:
    75c0:	2000      	movs	r0, #0
    75c2:	4770      	bx	lr

000075c4 <CC_PalDmaTerminate>:
    75c4:	4770      	bx	lr
    75c6:	bf00      	nop

000075c8 <CC_PalMutexCreate>:
    75c8:	b508      	push	{r3, lr}
    75ca:	4b03      	ldr	r3, [pc, #12]	; (75d8 <CC_PalMutexCreate+0x10>)
    75cc:	6802      	ldr	r2, [r0, #0]
    75ce:	681b      	ldr	r3, [r3, #0]
    75d0:	6810      	ldr	r0, [r2, #0]
    75d2:	4798      	blx	r3
    75d4:	2000      	movs	r0, #0
    75d6:	bd08      	pop	{r3, pc}
    75d8:	200000ec 	.word	0x200000ec

000075dc <CC_PalMutexDestroy>:
    75dc:	b508      	push	{r3, lr}
    75de:	4b03      	ldr	r3, [pc, #12]	; (75ec <CC_PalMutexDestroy+0x10>)
    75e0:	6802      	ldr	r2, [r0, #0]
    75e2:	685b      	ldr	r3, [r3, #4]
    75e4:	6810      	ldr	r0, [r2, #0]
    75e6:	4798      	blx	r3
    75e8:	2000      	movs	r0, #0
    75ea:	bd08      	pop	{r3, pc}
    75ec:	200000ec 	.word	0x200000ec

000075f0 <CC_PalPowerSaveModeInit>:
    75f0:	b570      	push	{r4, r5, r6, lr}
    75f2:	4c09      	ldr	r4, [pc, #36]	; (7618 <CC_PalPowerSaveModeInit+0x28>)
    75f4:	4d09      	ldr	r5, [pc, #36]	; (761c <CC_PalPowerSaveModeInit+0x2c>)
    75f6:	6920      	ldr	r0, [r4, #16]
    75f8:	68ab      	ldr	r3, [r5, #8]
    75fa:	4798      	blx	r3
    75fc:	b118      	cbz	r0, 7606 <CC_PalPowerSaveModeInit+0x16>
    75fe:	4b08      	ldr	r3, [pc, #32]	; (7620 <CC_PalPowerSaveModeInit+0x30>)
    7600:	4808      	ldr	r0, [pc, #32]	; (7624 <CC_PalPowerSaveModeInit+0x34>)
    7602:	685b      	ldr	r3, [r3, #4]
    7604:	4798      	blx	r3
    7606:	4a08      	ldr	r2, [pc, #32]	; (7628 <CC_PalPowerSaveModeInit+0x38>)
    7608:	68eb      	ldr	r3, [r5, #12]
    760a:	6920      	ldr	r0, [r4, #16]
    760c:	2100      	movs	r1, #0
    760e:	6011      	str	r1, [r2, #0]
    7610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7614:	4718      	bx	r3
    7616:	bf00      	nop
    7618:	200000fc 	.word	0x200000fc
    761c:	200000ec 	.word	0x200000ec
    7620:	200000dc 	.word	0x200000dc
    7624:	00009090 	.word	0x00009090
    7628:	20000ee4 	.word	0x20000ee4

0000762c <CC_PalPowerSaveModeSelect>:
    762c:	b570      	push	{r4, r5, r6, lr}
    762e:	4d1a      	ldr	r5, [pc, #104]	; (7698 <CC_PalPowerSaveModeSelect+0x6c>)
    7630:	4e1a      	ldr	r6, [pc, #104]	; (769c <CC_PalPowerSaveModeSelect+0x70>)
    7632:	4604      	mov	r4, r0
    7634:	68b2      	ldr	r2, [r6, #8]
    7636:	6928      	ldr	r0, [r5, #16]
    7638:	4790      	blx	r2
    763a:	b9f0      	cbnz	r0, 767a <CC_PalPowerSaveModeSelect+0x4e>
    763c:	b15c      	cbz	r4, 7656 <CC_PalPowerSaveModeSelect+0x2a>
    763e:	4c18      	ldr	r4, [pc, #96]	; (76a0 <CC_PalPowerSaveModeSelect+0x74>)
    7640:	6823      	ldr	r3, [r4, #0]
    7642:	b1ab      	cbz	r3, 7670 <CC_PalPowerSaveModeSelect+0x44>
    7644:	2b01      	cmp	r3, #1
    7646:	d01a      	beq.n	767e <CC_PalPowerSaveModeSelect+0x52>
    7648:	3b01      	subs	r3, #1
    764a:	6023      	str	r3, [r4, #0]
    764c:	6928      	ldr	r0, [r5, #16]
    764e:	68f3      	ldr	r3, [r6, #12]
    7650:	4798      	blx	r3
    7652:	2000      	movs	r0, #0
    7654:	bd70      	pop	{r4, r5, r6, pc}
    7656:	4c12      	ldr	r4, [pc, #72]	; (76a0 <CC_PalPowerSaveModeSelect+0x74>)
    7658:	6821      	ldr	r1, [r4, #0]
    765a:	b939      	cbnz	r1, 766c <CC_PalPowerSaveModeSelect+0x40>
    765c:	4b11      	ldr	r3, [pc, #68]	; (76a4 <CC_PalPowerSaveModeSelect+0x78>)
    765e:	4a12      	ldr	r2, [pc, #72]	; (76a8 <CC_PalPowerSaveModeSelect+0x7c>)
    7660:	2001      	movs	r0, #1
    7662:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7666:	6813      	ldr	r3, [r2, #0]
    7668:	2b00      	cmp	r3, #0
    766a:	d1fc      	bne.n	7666 <CC_PalPowerSaveModeSelect+0x3a>
    766c:	3101      	adds	r1, #1
    766e:	6021      	str	r1, [r4, #0]
    7670:	68f3      	ldr	r3, [r6, #12]
    7672:	6928      	ldr	r0, [r5, #16]
    7674:	4798      	blx	r3
    7676:	2000      	movs	r0, #0
    7678:	bd70      	pop	{r4, r5, r6, pc}
    767a:	480c      	ldr	r0, [pc, #48]	; (76ac <CC_PalPowerSaveModeSelect+0x80>)
    767c:	bd70      	pop	{r4, r5, r6, pc}
    767e:	4a0a      	ldr	r2, [pc, #40]	; (76a8 <CC_PalPowerSaveModeSelect+0x7c>)
    7680:	6813      	ldr	r3, [r2, #0]
    7682:	2b00      	cmp	r3, #0
    7684:	d1fc      	bne.n	7680 <CC_PalPowerSaveModeSelect+0x54>
    7686:	4a07      	ldr	r2, [pc, #28]	; (76a4 <CC_PalPowerSaveModeSelect+0x78>)
    7688:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    768c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7690:	f7ff ff48 	bl	7524 <CC_HalMaskInterrupt>
    7694:	6823      	ldr	r3, [r4, #0]
    7696:	e7d7      	b.n	7648 <CC_PalPowerSaveModeSelect+0x1c>
    7698:	200000fc 	.word	0x200000fc
    769c:	200000ec 	.word	0x200000ec
    76a0:	20000ee4 	.word	0x20000ee4
    76a4:	5002a000 	.word	0x5002a000
    76a8:	5002b910 	.word	0x5002b910
    76ac:	ffff8fe9 	.word	0xffff8fe9

000076b0 <sin>:
    76b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    76b2:	4d29      	ldr	r5, [pc, #164]	; (7758 <sin+0xa8>)
    76b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    76b8:	42ab      	cmp	r3, r5
    76ba:	b087      	sub	sp, #28
    76bc:	dd20      	ble.n	7700 <sin+0x50>
    76be:	4d27      	ldr	r5, [pc, #156]	; (775c <sin+0xac>)
    76c0:	42ab      	cmp	r3, r5
    76c2:	dd09      	ble.n	76d8 <sin+0x28>
    76c4:	4602      	mov	r2, r0
    76c6:	460b      	mov	r3, r1
    76c8:	f7f8 fd1e 	bl	108 <__aeabi_dsub>
    76cc:	4602      	mov	r2, r0
    76ce:	460b      	mov	r3, r1
    76d0:	4610      	mov	r0, r2
    76d2:	4619      	mov	r1, r3
    76d4:	b007      	add	sp, #28
    76d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76d8:	aa02      	add	r2, sp, #8
    76da:	f7f9 fde1 	bl	12a0 <__ieee754_rem_pio2>
    76de:	f000 0003 	and.w	r0, r0, #3
    76e2:	2801      	cmp	r0, #1
    76e4:	d018      	beq.n	7718 <sin+0x68>
    76e6:	2802      	cmp	r0, #2
    76e8:	d02a      	beq.n	7740 <sin+0x90>
    76ea:	b1f0      	cbz	r0, 772a <sin+0x7a>
    76ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    76f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    76f4:	f7f9 fff8 	bl	16e8 <__kernel_cos>
    76f8:	4602      	mov	r2, r0
    76fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    76fe:	e7e7      	b.n	76d0 <sin+0x20>
    7700:	2300      	movs	r3, #0
    7702:	9300      	str	r3, [sp, #0]
    7704:	2200      	movs	r2, #0
    7706:	2300      	movs	r3, #0
    7708:	f7fa fd42 	bl	2190 <__kernel_sin>
    770c:	460b      	mov	r3, r1
    770e:	4602      	mov	r2, r0
    7710:	4610      	mov	r0, r2
    7712:	4619      	mov	r1, r3
    7714:	b007      	add	sp, #28
    7716:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    771c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7720:	f7f9 ffe2 	bl	16e8 <__kernel_cos>
    7724:	460b      	mov	r3, r1
    7726:	4602      	mov	r2, r0
    7728:	e7d2      	b.n	76d0 <sin+0x20>
    772a:	2301      	movs	r3, #1
    772c:	9300      	str	r3, [sp, #0]
    772e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7736:	f7fa fd2b 	bl	2190 <__kernel_sin>
    773a:	460b      	mov	r3, r1
    773c:	4602      	mov	r2, r0
    773e:	e7c7      	b.n	76d0 <sin+0x20>
    7740:	2301      	movs	r3, #1
    7742:	9300      	str	r3, [sp, #0]
    7744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    774c:	f7fa fd20 	bl	2190 <__kernel_sin>
    7750:	4602      	mov	r2, r0
    7752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    7756:	e7bb      	b.n	76d0 <sin+0x20>
    7758:	3fe921fb 	.word	0x3fe921fb
    775c:	7fefffff 	.word	0x7fefffff

00007760 <fabs>:
    7760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    7764:	4770      	bx	lr
    7766:	bf00      	nop

00007768 <angle_move_servo>:

void angle_move_servo(int N, uint32_t angle)
{
    7768:	b510      	push	{r4, lr}
    776a:	4604      	mov	r4, r0
    776c:	4608      	mov	r0, r1
    if (angle >= 270)
    776e:	f5b1 7f87 	cmp.w	r1, #270	; 0x10e
    7772:	d301      	bcc.n	7778 <angle_move_servo+0x10>
    {
        angle = 270;
    7774:	f44f 7087 	mov.w	r0, #270	; 0x10e
    } else if(angle <= 0)
    {
        angle = 0;
    }
    
    angle = convert_to_raw(angle);
    7778:	f7fa ff50 	bl	261c <convert_to_raw>
    777c:	4601      	mov	r1, r0
    raw_move_servo(N, angle);
    777e:	4620      	mov	r0, r4
    7780:	f7fa ffc8 	bl	2714 <raw_move_servo>
    7784:	bd10      	pop	{r4, pc}

00007786 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7786:	4602      	mov	r2, r0
    7788:	b158      	cbz	r0, 77a2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    778a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    778c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7790:	2b01      	cmp	r3, #1
    7792:	d003      	beq.n	779c <sys_notify_validate+0x16>
    7794:	2b03      	cmp	r3, #3
    7796:	d107      	bne.n	77a8 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    7798:	6803      	ldr	r3, [r0, #0]
    779a:	b143      	cbz	r3, 77ae <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    779c:	2000      	movs	r0, #0
    779e:	6090      	str	r0, [r2, #8]
    77a0:	4770      	bx	lr
		return -EINVAL;
    77a2:	f06f 0015 	mvn.w	r0, #21
    77a6:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    77a8:	f06f 0015 	mvn.w	r0, #21
    77ac:	4770      	bx	lr
			rv = -EINVAL;
    77ae:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    77b2:	4770      	bx	lr

000077b4 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    77b4:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    77b6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    77b8:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    77bc:	6081      	str	r1, [r0, #8]
	switch (method) {
    77be:	2a03      	cmp	r2, #3
    77c0:	d103      	bne.n	77ca <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    77c2:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    77c4:	2200      	movs	r2, #0
    77c6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    77c8:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    77ca:	2000      	movs	r0, #0
    77cc:	e7fa      	b.n	77c4 <sys_notify_finalize+0x10>

000077ce <arch_printk_char_out>:
}
    77ce:	2000      	movs	r0, #0
    77d0:	4770      	bx	lr

000077d2 <str_out>:
{
    77d2:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    77d4:	680c      	ldr	r4, [r1, #0]
    77d6:	b154      	cbz	r4, 77ee <str_out+0x1c>
    77d8:	688a      	ldr	r2, [r1, #8]
    77da:	684b      	ldr	r3, [r1, #4]
    77dc:	429a      	cmp	r2, r3
    77de:	da06      	bge.n	77ee <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    77e0:	3b01      	subs	r3, #1
    77e2:	429a      	cmp	r2, r3
    77e4:	d008      	beq.n	77f8 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    77e6:	1c53      	adds	r3, r2, #1
    77e8:	608b      	str	r3, [r1, #8]
    77ea:	54a0      	strb	r0, [r4, r2]
    77ec:	e002      	b.n	77f4 <str_out+0x22>
		ctx->count++;
    77ee:	688b      	ldr	r3, [r1, #8]
    77f0:	3301      	adds	r3, #1
    77f2:	608b      	str	r3, [r1, #8]
}
    77f4:	bc10      	pop	{r4}
    77f6:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    77f8:	1c53      	adds	r3, r2, #1
    77fa:	608b      	str	r3, [r1, #8]
    77fc:	2300      	movs	r3, #0
    77fe:	54a3      	strb	r3, [r4, r2]
    7800:	e7f8      	b.n	77f4 <str_out+0x22>

00007802 <printk>:
{
    7802:	b40f      	push	{r0, r1, r2, r3}
    7804:	b500      	push	{lr}
    7806:	b083      	sub	sp, #12
    7808:	a904      	add	r1, sp, #16
    780a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    780e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    7810:	f7fa ffb0 	bl	2774 <vprintk>
}
    7814:	b003      	add	sp, #12
    7816:	f85d eb04 	ldr.w	lr, [sp], #4
    781a:	b004      	add	sp, #16
    781c:	4770      	bx	lr

0000781e <snprintk>:
{
    781e:	b40c      	push	{r2, r3}
    7820:	b500      	push	{lr}
    7822:	b083      	sub	sp, #12
    7824:	ab04      	add	r3, sp, #16
    7826:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    782a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    782c:	f7fa ffb2 	bl	2794 <vsnprintk>
}
    7830:	b003      	add	sp, #12
    7832:	f85d eb04 	ldr.w	lr, [sp], #4
    7836:	b002      	add	sp, #8
    7838:	4770      	bx	lr

0000783a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    783a:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    783e:	8b01      	ldrh	r1, [r0, #24]
    7840:	f021 0107 	bic.w	r1, r1, #7
    7844:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    7846:	8301      	strh	r1, [r0, #24]
}
    7848:	4770      	bx	lr

0000784a <notify_monitors>:
{
    784a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    784e:	4606      	mov	r6, r0
    7850:	460f      	mov	r7, r1
    7852:	4690      	mov	r8, r2
	return list->head;
    7854:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7856:	b119      	cbz	r1, 7860 <notify_monitors+0x16>
    7858:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    785a:	b131      	cbz	r1, 786a <notify_monitors+0x20>
	return node->next;
    785c:	680c      	ldr	r4, [r1, #0]
    785e:	e004      	b.n	786a <notify_monitors+0x20>
    7860:	460c      	mov	r4, r1
    7862:	e002      	b.n	786a <notify_monitors+0x20>
    7864:	4623      	mov	r3, r4
    7866:	4621      	mov	r1, r4
    7868:	461c      	mov	r4, r3
    786a:	b159      	cbz	r1, 7884 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    786c:	684d      	ldr	r5, [r1, #4]
    786e:	4643      	mov	r3, r8
    7870:	463a      	mov	r2, r7
    7872:	4630      	mov	r0, r6
    7874:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7876:	2c00      	cmp	r4, #0
    7878:	d0f4      	beq.n	7864 <notify_monitors+0x1a>
    787a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    787c:	2c00      	cmp	r4, #0
    787e:	d0f2      	beq.n	7866 <notify_monitors+0x1c>
	return node->next;
    7880:	6823      	ldr	r3, [r4, #0]
    7882:	e7f0      	b.n	7866 <notify_monitors+0x1c>
}
    7884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007888 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7888:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    788a:	f013 0307 	ands.w	r3, r3, #7
    788e:	d103      	bne.n	7898 <process_recheck+0x10>
	return list->head;
    7890:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    7892:	b10a      	cbz	r2, 7898 <process_recheck+0x10>
		evt = EVT_START;
    7894:	2003      	movs	r0, #3
    7896:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7898:	2b02      	cmp	r3, #2
    789a:	d003      	beq.n	78a4 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    789c:	2b01      	cmp	r3, #1
    789e:	d006      	beq.n	78ae <process_recheck+0x26>
	int evt = EVT_NOP;
    78a0:	2000      	movs	r0, #0
    78a2:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    78a4:	8b42      	ldrh	r2, [r0, #26]
    78a6:	2a00      	cmp	r2, #0
    78a8:	d1f8      	bne.n	789c <process_recheck+0x14>
		evt = EVT_STOP;
    78aa:	2004      	movs	r0, #4
    78ac:	4770      	bx	lr
    78ae:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    78b0:	b10b      	cbz	r3, 78b6 <process_recheck+0x2e>
		evt = EVT_RESET;
    78b2:	2005      	movs	r0, #5
}
    78b4:	4770      	bx	lr
	int evt = EVT_NOP;
    78b6:	2000      	movs	r0, #0
    78b8:	4770      	bx	lr

000078ba <process_complete>:
{
    78ba:	b538      	push	{r3, r4, r5, lr}
    78bc:	4604      	mov	r4, r0
    78be:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    78c0:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    78c2:	2a00      	cmp	r2, #0
    78c4:	db07      	blt.n	78d6 <process_complete+0x1c>
    78c6:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    78ca:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    78cc:	2a01      	cmp	r2, #1
    78ce:	d90e      	bls.n	78ee <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    78d0:	2b04      	cmp	r3, #4
    78d2:	d032      	beq.n	793a <process_complete+0x80>
}
    78d4:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    78d6:	e9d0 0100 	ldrd	r0, r1, [r0]
    78da:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    78de:	2300      	movs	r3, #0
    78e0:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    78e2:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    78e4:	2101      	movs	r1, #1
    78e6:	4620      	mov	r0, r4
    78e8:	f7ff ffa7 	bl	783a <set_state>
    78ec:	e7f2      	b.n	78d4 <process_complete+0x1a>
		*clients = mgr->clients;
    78ee:	e9d0 0100 	ldrd	r0, r1, [r0]
    78f2:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    78f6:	2200      	movs	r2, #0
    78f8:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    78fa:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    78fc:	2b06      	cmp	r3, #6
    78fe:	d117      	bne.n	7930 <process_complete+0x76>
	return list->head;
    7900:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    7902:	b13b      	cbz	r3, 7914 <process_complete+0x5a>
				mgr->refs += 1U;
    7904:	8b62      	ldrh	r2, [r4, #26]
    7906:	3201      	adds	r2, #1
    7908:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    790a:	2b00      	cmp	r3, #0
    790c:	d0f9      	beq.n	7902 <process_complete+0x48>
	return node->next;
    790e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    7910:	2b00      	cmp	r3, #0
    7912:	d1f6      	bne.n	7902 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    7914:	2102      	movs	r1, #2
    7916:	4620      	mov	r0, r4
    7918:	f7ff ff8f 	bl	783a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    791c:	4620      	mov	r0, r4
    791e:	f7ff ffb3 	bl	7888 <process_recheck>
    7922:	2800      	cmp	r0, #0
    7924:	d0d6      	beq.n	78d4 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7926:	8b23      	ldrh	r3, [r4, #24]
    7928:	f043 0320 	orr.w	r3, r3, #32
    792c:	8323      	strh	r3, [r4, #24]
    792e:	e7d1      	b.n	78d4 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    7930:	2100      	movs	r1, #0
    7932:	4620      	mov	r0, r4
    7934:	f7ff ff81 	bl	783a <set_state>
    7938:	e7f0      	b.n	791c <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    793a:	2100      	movs	r1, #0
    793c:	f7ff ff7d 	bl	783a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    7940:	4620      	mov	r0, r4
    7942:	f7ff ffa1 	bl	7888 <process_recheck>
    7946:	2800      	cmp	r0, #0
    7948:	d0c4      	beq.n	78d4 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    794a:	8b23      	ldrh	r3, [r4, #24]
    794c:	f043 0320 	orr.w	r3, r3, #32
    7950:	8323      	strh	r3, [r4, #24]
}
    7952:	e7bf      	b.n	78d4 <process_complete+0x1a>

00007954 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    7954:	b158      	cbz	r0, 796e <validate_args+0x1a>
{
    7956:	b510      	push	{r4, lr}
    7958:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    795a:	b159      	cbz	r1, 7974 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    795c:	1d08      	adds	r0, r1, #4
    795e:	f7ff ff12 	bl	7786 <sys_notify_validate>
	if ((rv == 0)
    7962:	b918      	cbnz	r0, 796c <validate_args+0x18>
	    && ((cli->notify.flags
    7964:	68a3      	ldr	r3, [r4, #8]
    7966:	f033 0303 	bics.w	r3, r3, #3
    796a:	d106      	bne.n	797a <validate_args+0x26>
}
    796c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    796e:	f06f 0015 	mvn.w	r0, #21
}
    7972:	4770      	bx	lr
		return -EINVAL;
    7974:	f06f 0015 	mvn.w	r0, #21
    7978:	e7f8      	b.n	796c <validate_args+0x18>
		rv = -EINVAL;
    797a:	f06f 0015 	mvn.w	r0, #21
    797e:	e7f5      	b.n	796c <validate_args+0x18>

00007980 <notify_one>:
{
    7980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7984:	4607      	mov	r7, r0
    7986:	460c      	mov	r4, r1
    7988:	4616      	mov	r6, r2
    798a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    798c:	4619      	mov	r1, r3
    798e:	1d20      	adds	r0, r4, #4
    7990:	f7ff ff10 	bl	77b4 <sys_notify_finalize>
	if (cb) {
    7994:	b128      	cbz	r0, 79a2 <notify_one+0x22>
    7996:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    7998:	462b      	mov	r3, r5
    799a:	4632      	mov	r2, r6
    799c:	4621      	mov	r1, r4
    799e:	4638      	mov	r0, r7
    79a0:	47c0      	blx	r8
}
    79a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000079a6 <notify_all>:
{
    79a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79aa:	4681      	mov	r9, r0
    79ac:	460c      	mov	r4, r1
    79ae:	4690      	mov	r8, r2
    79b0:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    79b2:	e005      	b.n	79c0 <notify_all+0x1a>
	list->tail = node;
    79b4:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    79b6:	463b      	mov	r3, r7
    79b8:	4642      	mov	r2, r8
    79ba:	4648      	mov	r0, r9
    79bc:	f7ff ffe0 	bl	7980 <notify_one>
	return list->head;
    79c0:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    79c2:	b129      	cbz	r1, 79d0 <notify_all+0x2a>
	return node->next;
    79c4:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    79c6:	6025      	str	r5, [r4, #0]
	return list->tail;
    79c8:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    79ca:	428e      	cmp	r6, r1
    79cc:	d1f3      	bne.n	79b6 <notify_all+0x10>
    79ce:	e7f1      	b.n	79b4 <notify_all+0xe>
}
    79d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000079d4 <transition_complete>:
{
    79d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    79d6:	f04f 0420 	mov.w	r4, #32
    79da:	f3ef 8211 	mrs	r2, BASEPRI
    79de:	f384 8812 	msr	BASEPRI_MAX, r4
    79e2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    79e6:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    79e8:	2101      	movs	r1, #1
    79ea:	f7fa fee9 	bl	27c0 <process_event>
}
    79ee:	bd10      	pop	{r4, pc}

000079f0 <onoff_manager_init>:
	if ((mgr == NULL)
    79f0:	4603      	mov	r3, r0
    79f2:	b168      	cbz	r0, 7a10 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    79f4:	b179      	cbz	r1, 7a16 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    79f6:	680a      	ldr	r2, [r1, #0]
    79f8:	b182      	cbz	r2, 7a1c <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    79fa:	684a      	ldr	r2, [r1, #4]
    79fc:	b18a      	cbz	r2, 7a22 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    79fe:	2000      	movs	r0, #0
    7a00:	6018      	str	r0, [r3, #0]
    7a02:	6058      	str	r0, [r3, #4]
    7a04:	6098      	str	r0, [r3, #8]
    7a06:	60d8      	str	r0, [r3, #12]
    7a08:	6158      	str	r0, [r3, #20]
    7a0a:	6198      	str	r0, [r3, #24]
    7a0c:	6119      	str	r1, [r3, #16]
	return 0;
    7a0e:	4770      	bx	lr
		return -EINVAL;
    7a10:	f06f 0015 	mvn.w	r0, #21
    7a14:	4770      	bx	lr
    7a16:	f06f 0015 	mvn.w	r0, #21
    7a1a:	4770      	bx	lr
    7a1c:	f06f 0015 	mvn.w	r0, #21
    7a20:	4770      	bx	lr
    7a22:	f06f 0015 	mvn.w	r0, #21
}
    7a26:	4770      	bx	lr

00007a28 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a2a:	4604      	mov	r4, r0
    7a2c:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7a2e:	f7ff ff91 	bl	7954 <validate_args>

	if (rv < 0) {
    7a32:	1e06      	subs	r6, r0, #0
    7a34:	db37      	blt.n	7aa6 <onoff_request+0x7e>
    7a36:	f04f 0320 	mov.w	r3, #32
    7a3a:	f3ef 8211 	mrs	r2, BASEPRI
    7a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    7a42:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7a46:	8b25      	ldrh	r5, [r4, #24]
    7a48:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7a4c:	8b63      	ldrh	r3, [r4, #26]
    7a4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7a52:	428b      	cmp	r3, r1
    7a54:	d02f      	beq.n	7ab6 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    7a56:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    7a58:	2d02      	cmp	r5, #2
    7a5a:	d00c      	beq.n	7a76 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    7a5c:	b18d      	cbz	r5, 7a82 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    7a5e:	2d04      	cmp	r5, #4
    7a60:	d00f      	beq.n	7a82 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    7a62:	2d06      	cmp	r5, #6
    7a64:	d00d      	beq.n	7a82 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    7a66:	2d05      	cmp	r5, #5
    7a68:	d01f      	beq.n	7aaa <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    7a6a:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    7a6e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    7a70:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7a72:	4608      	mov	r0, r1
    7a74:	e00a      	b.n	7a8c <onoff_request+0x64>
		mgr->refs += 1U;
    7a76:	3301      	adds	r3, #1
    7a78:	8363      	strh	r3, [r4, #26]
		notify = true;
    7a7a:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    7a7c:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    7a7e:	4618      	mov	r0, r3
    7a80:	e004      	b.n	7a8c <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    7a82:	fab5 f385 	clz	r3, r5
    7a86:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    7a88:	2100      	movs	r1, #0
		add_client = true;
    7a8a:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    7a8c:	b128      	cbz	r0, 7a9a <onoff_request+0x72>
	parent->next = child;
    7a8e:	2000      	movs	r0, #0
    7a90:	6038      	str	r0, [r7, #0]
	return list->tail;
    7a92:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    7a94:	b1a8      	cbz	r0, 7ac2 <onoff_request+0x9a>
	parent->next = child;
    7a96:	6007      	str	r7, [r0, #0]
	list->tail = node;
    7a98:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    7a9a:	b9ab      	cbnz	r3, 7ac8 <onoff_request+0xa0>
	__asm__ volatile(
    7a9c:	f382 8811 	msr	BASEPRI, r2
    7aa0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    7aa4:	b9a9      	cbnz	r1, 7ad2 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7aa6:	4630      	mov	r0, r6
    7aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    7aaa:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    7aae:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    7ab0:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7ab2:	4608      	mov	r0, r1
    7ab4:	e7ea      	b.n	7a8c <onoff_request+0x64>
		rv = -EAGAIN;
    7ab6:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    7aba:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    7abc:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    7abe:	4608      	mov	r0, r1
    7ac0:	e7e4      	b.n	7a8c <onoff_request+0x64>
    7ac2:	6067      	str	r7, [r4, #4]
	list->head = node;
    7ac4:	6027      	str	r7, [r4, #0]
}
    7ac6:	e7e8      	b.n	7a9a <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    7ac8:	2102      	movs	r1, #2
    7aca:	4620      	mov	r0, r4
    7acc:	f7fa fe78 	bl	27c0 <process_event>
    7ad0:	e7e9      	b.n	7aa6 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    7ad2:	2300      	movs	r3, #0
    7ad4:	462a      	mov	r2, r5
    7ad6:	4639      	mov	r1, r7
    7ad8:	4620      	mov	r0, r4
    7ada:	f7ff ff51 	bl	7980 <notify_one>
    7ade:	e7e2      	b.n	7aa6 <onoff_request+0x7e>

00007ae0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7ae0:	b508      	push	{r3, lr}
    7ae2:	4604      	mov	r4, r0
    7ae4:	4608      	mov	r0, r1
    7ae6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7ae8:	461a      	mov	r2, r3
    7aea:	47a0      	blx	r4
	return z_impl_z_current_get();
    7aec:	f7ff fa0a 	bl	6f04 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7af0:	f7fc f992 	bl	3e18 <z_impl_k_thread_abort>

00007af4 <outs>:
{
    7af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7af8:	4607      	mov	r7, r0
    7afa:	460e      	mov	r6, r1
    7afc:	4614      	mov	r4, r2
    7afe:	4698      	mov	r8, r3
	size_t count = 0;
    7b00:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7b02:	e006      	b.n	7b12 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    7b04:	4631      	mov	r1, r6
    7b06:	f814 0b01 	ldrb.w	r0, [r4], #1
    7b0a:	47b8      	blx	r7
		if (rc < 0) {
    7b0c:	2800      	cmp	r0, #0
    7b0e:	db09      	blt.n	7b24 <outs+0x30>
		++count;
    7b10:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7b12:	4544      	cmp	r4, r8
    7b14:	d3f6      	bcc.n	7b04 <outs+0x10>
    7b16:	f1b8 0f00 	cmp.w	r8, #0
    7b1a:	d102      	bne.n	7b22 <outs+0x2e>
    7b1c:	7823      	ldrb	r3, [r4, #0]
    7b1e:	2b00      	cmp	r3, #0
    7b20:	d1f0      	bne.n	7b04 <outs+0x10>
	return (int)count;
    7b22:	4628      	mov	r0, r5
}
    7b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007b28 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7b28:	4770      	bx	lr

00007b2a <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    7b2a:	2200      	movs	r2, #0
    7b2c:	6002      	str	r2, [r0, #0]
    7b2e:	6042      	str	r2, [r0, #4]
    7b30:	6082      	str	r2, [r0, #8]
}
    7b32:	4770      	bx	lr

00007b34 <abort_function>:
{
    7b34:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7b36:	2000      	movs	r0, #0
    7b38:	f7fb fc5e 	bl	33f8 <sys_reboot>

00007b3c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7b3c:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7b3e:	f000 fc8d 	bl	845c <z_fatal_error>
}
    7b42:	bd08      	pop	{r3, pc}

00007b44 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7b44:	b508      	push	{r3, lr}
    7b46:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7b48:	6800      	ldr	r0, [r0, #0]
    7b4a:	f7ff fff7 	bl	7b3c <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    7b4e:	bd08      	pop	{r3, pc}

00007b50 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    7b50:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7b52:	2100      	movs	r1, #0
    7b54:	2001      	movs	r0, #1
    7b56:	f7ff fff1 	bl	7b3c <z_arm_fatal_error>
}
    7b5a:	bd08      	pop	{r3, pc}

00007b5c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    7b5c:	b508      	push	{r3, lr}
	handler();
    7b5e:	f7fb feab 	bl	38b8 <z_SysNmiOnReset>
	z_arm_int_exit();
    7b62:	f7fb ffa7 	bl	3ab4 <z_arm_exc_exit>
}
    7b66:	bd08      	pop	{r3, pc}

00007b68 <memory_fault_recoverable>:
}
    7b68:	2000      	movs	r0, #0
    7b6a:	4770      	bx	lr

00007b6c <debug_monitor>:
	*recoverable = false;
    7b6c:	2300      	movs	r3, #0
    7b6e:	700b      	strb	r3, [r1, #0]
}
    7b70:	4770      	bx	lr

00007b72 <fault_handle>:
{
    7b72:	b508      	push	{r3, lr}
	*recoverable = false;
    7b74:	2300      	movs	r3, #0
    7b76:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    7b78:	1ecb      	subs	r3, r1, #3
    7b7a:	2b09      	cmp	r3, #9
    7b7c:	d81a      	bhi.n	7bb4 <fault_handle+0x42>
    7b7e:	e8df f003 	tbb	[pc, r3]
    7b82:	0905      	.short	0x0905
    7b84:	1919110d 	.word	0x1919110d
    7b88:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    7b8c:	4611      	mov	r1, r2
    7b8e:	f7fc f821 	bl	3bd4 <hard_fault>
		break;
    7b92:	e010      	b.n	7bb6 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    7b94:	2100      	movs	r1, #0
    7b96:	f7fb ffd7 	bl	3b48 <mem_manage_fault>
		break;
    7b9a:	e00c      	b.n	7bb6 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    7b9c:	2100      	movs	r1, #0
    7b9e:	f7fb ff97 	bl	3ad0 <bus_fault>
		break;
    7ba2:	e008      	b.n	7bb6 <fault_handle+0x44>
		reason = usage_fault(esf);
    7ba4:	f7fb ffbe 	bl	3b24 <usage_fault>
		break;
    7ba8:	e005      	b.n	7bb6 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    7baa:	4611      	mov	r1, r2
    7bac:	f7ff ffde 	bl	7b6c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7bb0:	2000      	movs	r0, #0
		break;
    7bb2:	e000      	b.n	7bb6 <fault_handle+0x44>
	*recoverable = false;
    7bb4:	2000      	movs	r0, #0
}
    7bb6:	bd08      	pop	{r3, pc}

00007bb8 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    7bb8:	6843      	ldr	r3, [r0, #4]
    7bba:	1e5a      	subs	r2, r3, #1
		&&
    7bbc:	4213      	tst	r3, r2
    7bbe:	d106      	bne.n	7bce <mpu_partition_is_valid+0x16>
		&&
    7bc0:	2b1f      	cmp	r3, #31
    7bc2:	d906      	bls.n	7bd2 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    7bc4:	6803      	ldr	r3, [r0, #0]
		&&
    7bc6:	421a      	tst	r2, r3
    7bc8:	d005      	beq.n	7bd6 <mpu_partition_is_valid+0x1e>
    7bca:	2000      	movs	r0, #0
    7bcc:	4770      	bx	lr
    7bce:	2000      	movs	r0, #0
    7bd0:	4770      	bx	lr
    7bd2:	2000      	movs	r0, #0
    7bd4:	4770      	bx	lr
    7bd6:	2001      	movs	r0, #1
}
    7bd8:	4770      	bx	lr

00007bda <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    7bda:	2807      	cmp	r0, #7
    7bdc:	d805      	bhi.n	7bea <region_allocate_and_init+0x10>
{
    7bde:	b510      	push	{r4, lr}
    7be0:	4604      	mov	r4, r0
	region_init(index, region_conf);
    7be2:	f7fc f94f 	bl	3e84 <region_init>
	return index;
    7be6:	4620      	mov	r0, r4
}
    7be8:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7bea:	f06f 0015 	mvn.w	r0, #21
}
    7bee:	4770      	bx	lr

00007bf0 <mpu_configure_region>:
{
    7bf0:	b500      	push	{lr}
    7bf2:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    7bf4:	680b      	ldr	r3, [r1, #0]
    7bf6:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    7bf8:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7bfa:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    7bfc:	2b20      	cmp	r3, #32
    7bfe:	d912      	bls.n	7c26 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    7c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7c04:	d811      	bhi.n	7c2a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7c06:	3b01      	subs	r3, #1
    7c08:	fab3 f383 	clz	r3, r3
    7c0c:	f1c3 031f 	rsb	r3, r3, #31
    7c10:	005b      	lsls	r3, r3, #1
    7c12:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7c16:	4313      	orrs	r3, r2
    7c18:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    7c1a:	a901      	add	r1, sp, #4
    7c1c:	f7ff ffdd 	bl	7bda <region_allocate_and_init>
}
    7c20:	b005      	add	sp, #20
    7c22:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    7c26:	2308      	movs	r3, #8
    7c28:	e7f5      	b.n	7c16 <mpu_configure_region+0x26>
		return REGION_4G;
    7c2a:	233e      	movs	r3, #62	; 0x3e
    7c2c:	e7f3      	b.n	7c16 <mpu_configure_region+0x26>

00007c2e <mpu_configure_regions>:
{
    7c2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c32:	4680      	mov	r8, r0
    7c34:	460f      	mov	r7, r1
    7c36:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    7c38:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    7c3a:	2500      	movs	r5, #0
    7c3c:	e009      	b.n	7c52 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7c3e:	4621      	mov	r1, r4
    7c40:	b2f0      	uxtb	r0, r6
    7c42:	f7ff ffd5 	bl	7bf0 <mpu_configure_region>
    7c46:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    7c48:	f110 0f16 	cmn.w	r0, #22
    7c4c:	d014      	beq.n	7c78 <mpu_configure_regions+0x4a>
		reg_index++;
    7c4e:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    7c50:	3501      	adds	r5, #1
    7c52:	42bd      	cmp	r5, r7
    7c54:	da10      	bge.n	7c78 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    7c56:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    7c5a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    7c5e:	6862      	ldr	r2, [r4, #4]
    7c60:	2a00      	cmp	r2, #0
    7c62:	d0f5      	beq.n	7c50 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    7c64:	f1b9 0f00 	cmp.w	r9, #0
    7c68:	d0e9      	beq.n	7c3e <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    7c6a:	4620      	mov	r0, r4
    7c6c:	f7ff ffa4 	bl	7bb8 <mpu_partition_is_valid>
		if (do_sanity_check &&
    7c70:	2800      	cmp	r0, #0
    7c72:	d1e4      	bne.n	7c3e <mpu_configure_regions+0x10>
			return -EINVAL;
    7c74:	f06f 0615 	mvn.w	r6, #21
}
    7c78:	4630      	mov	r0, r6
    7c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007c7e <arm_core_mpu_configure_static_mpu_regions>:
{
    7c7e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    7c80:	f7fc f910 	bl	3ea4 <mpu_configure_static_mpu_regions>
}
    7c84:	bd08      	pop	{r3, pc}

00007c86 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    7c86:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    7c88:	f7fc f916 	bl	3eb8 <mpu_configure_dynamic_mpu_regions>
}
    7c8c:	bd08      	pop	{r3, pc}

00007c8e <malloc_prepare>:
}
    7c8e:	2000      	movs	r0, #0
    7c90:	4770      	bx	lr

00007c92 <_stdout_hook_default>:
}
    7c92:	f04f 30ff 	mov.w	r0, #4294967295
    7c96:	4770      	bx	lr

00007c98 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    7c98:	b084      	sub	sp, #16
    7c9a:	ab04      	add	r3, sp, #16
    7c9c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    7ca0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7ca4:	2b06      	cmp	r3, #6
    7ca6:	d001      	beq.n	7cac <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    7ca8:	b004      	add	sp, #16
    7caa:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    7cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7cb0:	2201      	movs	r2, #1
    7cb2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    7cb6:	f3bf 8f4f 	dsb	sy
        __WFE();
    7cba:	bf20      	wfe
    while (true)
    7cbc:	e7fd      	b.n	7cba <pm_power_state_set+0x22>

00007cbe <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    7cbe:	b084      	sub	sp, #16
    7cc0:	ab04      	add	r3, sp, #16
    7cc2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    7cc6:	2300      	movs	r3, #0
    7cc8:	f383 8811 	msr	BASEPRI, r3
    7ccc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7cd0:	b004      	add	sp, #16
    7cd2:	4770      	bx	lr

00007cd4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    7cd4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    7cd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7cda:	0089      	lsls	r1, r1, #2
    7cdc:	3138      	adds	r1, #56	; 0x38
}
    7cde:	4408      	add	r0, r1
    7ce0:	4770      	bx	lr

00007ce2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    7ce2:	6840      	ldr	r0, [r0, #4]
}
    7ce4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    7ce8:	4770      	bx	lr

00007cea <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    7cea:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    7cec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    7cf0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7cf4:	4770      	bx	lr

00007cf6 <get_status>:
{
    7cf6:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7cf8:	b2c9      	uxtb	r1, r1
    7cfa:	f7ff ffeb 	bl	7cd4 <get_sub_data>
    7cfe:	6880      	ldr	r0, [r0, #8]
}
    7d00:	f000 0007 	and.w	r0, r0, #7
    7d04:	bd08      	pop	{r3, pc}

00007d06 <set_off_state>:
	__asm__ volatile(
    7d06:	f04f 0320 	mov.w	r3, #32
    7d0a:	f3ef 8211 	mrs	r2, BASEPRI
    7d0e:	f383 8812 	msr	BASEPRI_MAX, r3
    7d12:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7d16:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7d18:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    7d1c:	d001      	beq.n	7d22 <set_off_state+0x1c>
    7d1e:	428b      	cmp	r3, r1
    7d20:	d107      	bne.n	7d32 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7d22:	2301      	movs	r3, #1
    7d24:	6003      	str	r3, [r0, #0]
	int err = 0;
    7d26:	2000      	movs	r0, #0
	__asm__ volatile(
    7d28:	f382 8811 	msr	BASEPRI, r2
    7d2c:	f3bf 8f6f 	isb	sy
}
    7d30:	4770      	bx	lr
		err = -EPERM;
    7d32:	f04f 30ff 	mov.w	r0, #4294967295
    7d36:	e7f7      	b.n	7d28 <set_off_state+0x22>

00007d38 <set_starting_state>:
{
    7d38:	b410      	push	{r4}
	__asm__ volatile(
    7d3a:	f04f 0320 	mov.w	r3, #32
    7d3e:	f3ef 8211 	mrs	r2, BASEPRI
    7d42:	f383 8812 	msr	BASEPRI_MAX, r3
    7d46:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7d4a:	6803      	ldr	r3, [r0, #0]
    7d4c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7d50:	f003 0307 	and.w	r3, r3, #7
    7d54:	2b01      	cmp	r3, #1
    7d56:	d009      	beq.n	7d6c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    7d58:	428c      	cmp	r4, r1
    7d5a:	d00a      	beq.n	7d72 <set_starting_state+0x3a>
		err = -EPERM;
    7d5c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    7d60:	f382 8811 	msr	BASEPRI, r2
    7d64:	f3bf 8f6f 	isb	sy
}
    7d68:	bc10      	pop	{r4}
    7d6a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7d6c:	6001      	str	r1, [r0, #0]
	int err = 0;
    7d6e:	2000      	movs	r0, #0
    7d70:	e7f6      	b.n	7d60 <set_starting_state+0x28>
		err = -EALREADY;
    7d72:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7d76:	e7f3      	b.n	7d60 <set_starting_state+0x28>

00007d78 <set_on_state>:
	__asm__ volatile(
    7d78:	f04f 0320 	mov.w	r3, #32
    7d7c:	f3ef 8211 	mrs	r2, BASEPRI
    7d80:	f383 8812 	msr	BASEPRI_MAX, r3
    7d84:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7d88:	6803      	ldr	r3, [r0, #0]
    7d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7d8e:	f043 0302 	orr.w	r3, r3, #2
    7d92:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7d94:	f382 8811 	msr	BASEPRI, r2
    7d98:	f3bf 8f6f 	isb	sy
}
    7d9c:	4770      	bx	lr

00007d9e <clkstarted_handle>:
{
    7d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7da0:	4606      	mov	r6, r0
    7da2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    7da4:	f7ff ff96 	bl	7cd4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    7da8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    7daa:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    7dac:	2300      	movs	r3, #0
    7dae:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    7db2:	f7ff ffe1 	bl	7d78 <set_on_state>
	if (callback) {
    7db6:	b11d      	cbz	r5, 7dc0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    7db8:	463a      	mov	r2, r7
    7dba:	4621      	mov	r1, r4
    7dbc:	4630      	mov	r0, r6
    7dbe:	47a8      	blx	r5
}
    7dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007dc2 <stop>:
{
    7dc2:	b570      	push	{r4, r5, r6, lr}
    7dc4:	4606      	mov	r6, r0
    7dc6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7dc8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7dca:	4621      	mov	r1, r4
    7dcc:	f7ff ff82 	bl	7cd4 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    7dd0:	4629      	mov	r1, r5
    7dd2:	3008      	adds	r0, #8
    7dd4:	f7ff ff97 	bl	7d06 <set_off_state>
	if (err < 0) {
    7dd8:	2800      	cmp	r0, #0
    7dda:	db06      	blt.n	7dea <stop+0x28>
	get_sub_config(dev, type)->stop();
    7ddc:	4621      	mov	r1, r4
    7dde:	4630      	mov	r0, r6
    7de0:	f7ff ff7f 	bl	7ce2 <get_sub_config>
    7de4:	6843      	ldr	r3, [r0, #4]
    7de6:	4798      	blx	r3
	return 0;
    7de8:	2000      	movs	r0, #0
}
    7dea:	bd70      	pop	{r4, r5, r6, pc}

00007dec <api_stop>:
{
    7dec:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    7dee:	2280      	movs	r2, #128	; 0x80
    7df0:	f7ff ffe7 	bl	7dc2 <stop>
}
    7df4:	bd08      	pop	{r3, pc}

00007df6 <async_start>:
{
    7df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dfa:	4606      	mov	r6, r0
    7dfc:	4690      	mov	r8, r2
    7dfe:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    7e00:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7e02:	4629      	mov	r1, r5
    7e04:	f7ff ff66 	bl	7cd4 <get_sub_data>
    7e08:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    7e0a:	9906      	ldr	r1, [sp, #24]
    7e0c:	3008      	adds	r0, #8
    7e0e:	f7ff ff93 	bl	7d38 <set_starting_state>
	if (err < 0) {
    7e12:	2800      	cmp	r0, #0
    7e14:	db09      	blt.n	7e2a <async_start+0x34>
	subdata->cb = cb;
    7e16:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    7e1a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    7e1c:	4629      	mov	r1, r5
    7e1e:	4630      	mov	r0, r6
    7e20:	f7ff ff5f 	bl	7ce2 <get_sub_config>
    7e24:	6803      	ldr	r3, [r0, #0]
    7e26:	4798      	blx	r3
	return 0;
    7e28:	2000      	movs	r0, #0
}
    7e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007e2e <api_start>:
{
    7e2e:	b510      	push	{r4, lr}
    7e30:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7e32:	2480      	movs	r4, #128	; 0x80
    7e34:	9400      	str	r4, [sp, #0]
    7e36:	f7ff ffde 	bl	7df6 <async_start>
}
    7e3a:	b002      	add	sp, #8
    7e3c:	bd10      	pop	{r4, pc}

00007e3e <onoff_started_callback>:
{
    7e3e:	b510      	push	{r4, lr}
    7e40:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    7e42:	b2c9      	uxtb	r1, r1
    7e44:	f7ff ff51 	bl	7cea <get_onoff_manager>
	notify(mgr, 0);
    7e48:	2100      	movs	r1, #0
    7e4a:	47a0      	blx	r4
}
    7e4c:	bd10      	pop	{r4, pc}

00007e4e <hfclk_start>:
{
    7e4e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7e50:	2001      	movs	r0, #1
    7e52:	f7fd fa0b 	bl	526c <nrfx_clock_start>
}
    7e56:	bd08      	pop	{r3, pc}

00007e58 <lfclk_start>:
{
    7e58:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7e5a:	2000      	movs	r0, #0
    7e5c:	f7fd fa06 	bl	526c <nrfx_clock_start>
}
    7e60:	bd08      	pop	{r3, pc}

00007e62 <hfclk_stop>:
{
    7e62:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7e64:	2001      	movs	r0, #1
    7e66:	f7fd fa39 	bl	52dc <nrfx_clock_stop>
}
    7e6a:	bd08      	pop	{r3, pc}

00007e6c <lfclk_stop>:
{
    7e6c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7e6e:	2000      	movs	r0, #0
    7e70:	f7fd fa34 	bl	52dc <nrfx_clock_stop>
}
    7e74:	bd08      	pop	{r3, pc}

00007e76 <blocking_start_callback>:
{
    7e76:	b508      	push	{r3, lr}
    7e78:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7e7a:	f7fe fb47 	bl	650c <z_impl_k_sem_give>
}
    7e7e:	bd08      	pop	{r3, pc}

00007e80 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    7e80:	f010 0f10 	tst.w	r0, #16
    7e84:	d104      	bne.n	7e90 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    7e86:	f010 0f20 	tst.w	r0, #32
    7e8a:	d103      	bne.n	7e94 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    7e8c:	2000      	movs	r0, #0
    7e8e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    7e90:	2003      	movs	r0, #3
    7e92:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    7e94:	2001      	movs	r0, #1
}
    7e96:	4770      	bx	lr

00007e98 <gpio_nrfx_port_get_raw>:
	return port->config;
    7e98:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7e9a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7e9c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7ea0:	600b      	str	r3, [r1, #0]
}
    7ea2:	2000      	movs	r0, #0
    7ea4:	4770      	bx	lr

00007ea6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    7ea6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7ea8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7eaa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7eae:	4042      	eors	r2, r0
    7eb0:	400a      	ands	r2, r1
    7eb2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    7eb4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    7eb8:	2000      	movs	r0, #0
    7eba:	4770      	bx	lr

00007ebc <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    7ebc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7ebe:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    7ec0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    7ec4:	2000      	movs	r0, #0
    7ec6:	4770      	bx	lr

00007ec8 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    7ec8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7eca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7ecc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    7ed0:	2000      	movs	r0, #0
    7ed2:	4770      	bx	lr

00007ed4 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    7ed4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7ed6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7ed8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    7edc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7ede:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    7ee2:	2000      	movs	r0, #0
    7ee4:	4770      	bx	lr

00007ee6 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    7ee6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    7eea:	d007      	beq.n	7efc <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    7eec:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    7ef0:	d00d      	beq.n	7f0e <get_trigger+0x28>
    7ef2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    7ef6:	d008      	beq.n	7f0a <get_trigger+0x24>
    7ef8:	2001      	movs	r0, #1
}
    7efa:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    7efc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    7f00:	d001      	beq.n	7f06 <get_trigger+0x20>
    7f02:	2005      	movs	r0, #5
    7f04:	4770      	bx	lr
    7f06:	2004      	movs	r0, #4
    7f08:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    7f0a:	2002      	movs	r0, #2
    7f0c:	4770      	bx	lr
    7f0e:	2003      	movs	r0, #3
    7f10:	4770      	bx	lr

00007f12 <gpio_nrfx_manage_callback>:
{
    7f12:	b470      	push	{r4, r5, r6}
	return port->data;
    7f14:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7f16:	1d05      	adds	r5, r0, #4
	return list->head;
    7f18:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    7f1a:	b1db      	cbz	r3, 7f54 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    7f1c:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7f1e:	2400      	movs	r4, #0
    7f20:	e00a      	b.n	7f38 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    7f22:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    7f24:	6043      	str	r3, [r0, #4]
	return list->tail;
    7f26:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7f28:	42a1      	cmp	r1, r4
    7f2a:	d10f      	bne.n	7f4c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    7f2c:	606b      	str	r3, [r5, #4]
}
    7f2e:	e00d      	b.n	7f4c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    7f30:	606c      	str	r4, [r5, #4]
}
    7f32:	e00b      	b.n	7f4c <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7f34:	461c      	mov	r4, r3
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	b15b      	cbz	r3, 7f52 <gpio_nrfx_manage_callback+0x40>
    7f3a:	429e      	cmp	r6, r3
    7f3c:	d1fa      	bne.n	7f34 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    7f3e:	2c00      	cmp	r4, #0
    7f40:	d0ef      	beq.n	7f22 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    7f42:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    7f44:	6023      	str	r3, [r4, #0]
	return list->tail;
    7f46:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7f48:	4299      	cmp	r1, r3
    7f4a:	d0f1      	beq.n	7f30 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    7f4c:	2300      	movs	r3, #0
    7f4e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7f50:	e000      	b.n	7f54 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    7f52:	b152      	cbz	r2, 7f6a <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    7f54:	b162      	cbz	r2, 7f70 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    7f56:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    7f58:	600b      	str	r3, [r1, #0]
	list->head = node;
    7f5a:	6041      	str	r1, [r0, #4]
	return list->tail;
    7f5c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    7f5e:	b10b      	cbz	r3, 7f64 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7f60:	2000      	movs	r0, #0
    7f62:	e006      	b.n	7f72 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    7f64:	6069      	str	r1, [r5, #4]
    7f66:	2000      	movs	r0, #0
}
    7f68:	e003      	b.n	7f72 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    7f6a:	f06f 0015 	mvn.w	r0, #21
    7f6e:	e000      	b.n	7f72 <gpio_nrfx_manage_callback+0x60>
	return 0;
    7f70:	2000      	movs	r0, #0
}
    7f72:	bc70      	pop	{r4, r5, r6}
    7f74:	4770      	bx	lr

00007f76 <nrfx_gpio_handler>:
{
    7f76:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    7f78:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    7f7c:	0940      	lsrs	r0, r0, #5
    7f7e:	f7fc fa4f 	bl	4420 <get_dev>
	if (port == NULL) {
    7f82:	b1d8      	cbz	r0, 7fbc <nrfx_gpio_handler+0x46>
    7f84:	4606      	mov	r6, r0
	return port->data;
    7f86:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    7f88:	2501      	movs	r5, #1
    7f8a:	40a5      	lsls	r5, r4
	return list->head;
    7f8c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7f8e:	b119      	cbz	r1, 7f98 <nrfx_gpio_handler+0x22>
    7f90:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    7f92:	b149      	cbz	r1, 7fa8 <nrfx_gpio_handler+0x32>
	return node->next;
    7f94:	680c      	ldr	r4, [r1, #0]
    7f96:	e007      	b.n	7fa8 <nrfx_gpio_handler+0x32>
    7f98:	460c      	mov	r4, r1
    7f9a:	e005      	b.n	7fa8 <nrfx_gpio_handler+0x32>
    7f9c:	b164      	cbz	r4, 7fb8 <nrfx_gpio_handler+0x42>
    7f9e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    7fa0:	b104      	cbz	r4, 7fa4 <nrfx_gpio_handler+0x2e>
	return node->next;
    7fa2:	6823      	ldr	r3, [r4, #0]
    7fa4:	4621      	mov	r1, r4
    7fa6:	461c      	mov	r4, r3
    7fa8:	b141      	cbz	r1, 7fbc <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    7faa:	688a      	ldr	r2, [r1, #8]
    7fac:	402a      	ands	r2, r5
    7fae:	d0f5      	beq.n	7f9c <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7fb0:	684b      	ldr	r3, [r1, #4]
    7fb2:	4630      	mov	r0, r6
    7fb4:	4798      	blx	r3
    7fb6:	e7f1      	b.n	7f9c <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7fb8:	4623      	mov	r3, r4
    7fba:	e7f3      	b.n	7fa4 <nrfx_gpio_handler+0x2e>
}
    7fbc:	bd70      	pop	{r4, r5, r6, pc}

00007fbe <endtx_isr>:
	return dev->config;
    7fbe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7fc0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    7fc2:	f04f 0120 	mov.w	r1, #32
    7fc6:	f3ef 8211 	mrs	r2, BASEPRI
    7fca:	f381 8812 	msr	BASEPRI_MAX, r1
    7fce:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fd2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7fd6:	b131      	cbz	r1, 7fe6 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7fd8:	2100      	movs	r1, #0
    7fda:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    7fde:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7fe2:	2101      	movs	r1, #1
    7fe4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    7fe6:	f382 8811 	msr	BASEPRI, r2
    7fea:	f3bf 8f6f 	isb	sy
}
    7fee:	4770      	bx	lr

00007ff0 <uarte_nrfx_isr_int>:
{
    7ff0:	b538      	push	{r3, r4, r5, lr}
    7ff2:	4604      	mov	r4, r0
	return dev->config;
    7ff4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7ff6:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    7ff8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7ffc:	f413 7f80 	tst.w	r3, #256	; 0x100
    8000:	d002      	beq.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8002:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    8006:	b9db      	cbnz	r3, 8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
	return dev->config;
    8008:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    800a:	685b      	ldr	r3, [r3, #4]
    800c:	f013 0f10 	tst.w	r3, #16
    8010:	d015      	beq.n	803e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
	__asm__ volatile(
    8012:	f04f 0220 	mov.w	r2, #32
    8016:	f3ef 8311 	mrs	r3, BASEPRI
    801a:	f382 8812 	msr	BASEPRI_MAX, r2
    801e:	f3bf 8f6f 	isb	sy
    8022:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8026:	b112      	cbz	r2, 802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8028:	2200      	movs	r2, #0
    802a:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    802e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8032:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    8036:	f383 8811 	msr	BASEPRI, r3
    803a:	f3bf 8f6f 	isb	sy
}
    803e:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    8040:	f7ff ffbd 	bl	7fbe <endtx_isr>
    8044:	e7e0      	b.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>

00008046 <uarte_nrfx_configure>:
{
    8046:	b570      	push	{r4, r5, r6, lr}
    8048:	b082      	sub	sp, #8
    804a:	4605      	mov	r5, r0
    804c:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    804e:	794b      	ldrb	r3, [r1, #5]
    8050:	2b01      	cmp	r3, #1
    8052:	d006      	beq.n	8062 <uarte_nrfx_configure+0x1c>
    8054:	2b03      	cmp	r3, #3
    8056:	d011      	beq.n	807c <uarte_nrfx_configure+0x36>
    8058:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    805c:	4618      	mov	r0, r3
    805e:	b002      	add	sp, #8
    8060:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    8062:	2300      	movs	r3, #0
    8064:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    8068:	79a3      	ldrb	r3, [r4, #6]
    806a:	2b03      	cmp	r3, #3
    806c:	d138      	bne.n	80e0 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    806e:	79e3      	ldrb	r3, [r4, #7]
    8070:	b143      	cbz	r3, 8084 <uarte_nrfx_configure+0x3e>
    8072:	2b01      	cmp	r3, #1
    8074:	d010      	beq.n	8098 <uarte_nrfx_configure+0x52>
    8076:	f06f 0385 	mvn.w	r3, #133	; 0x85
    807a:	e7ef      	b.n	805c <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    807c:	2310      	movs	r3, #16
    807e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    8082:	e7f1      	b.n	8068 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    8084:	2300      	movs	r3, #0
    8086:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    808a:	7923      	ldrb	r3, [r4, #4]
    808c:	b143      	cbz	r3, 80a0 <uarte_nrfx_configure+0x5a>
    808e:	2b02      	cmp	r3, #2
    8090:	d022      	beq.n	80d8 <uarte_nrfx_configure+0x92>
    8092:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8096:	e7e1      	b.n	805c <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    8098:	2301      	movs	r3, #1
    809a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    809e:	e7f4      	b.n	808a <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    80a0:	2300      	movs	r3, #0
    80a2:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    80a6:	6821      	ldr	r1, [r4, #0]
    80a8:	4628      	mov	r0, r5
    80aa:	f7fc fbbd 	bl	4828 <baudrate_set>
    80ae:	4603      	mov	r3, r0
    80b0:	b9c8      	cbnz	r0, 80e6 <uarte_nrfx_configure+0xa0>
	return dev->config;
    80b2:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    80b4:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    80b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    80ba:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    80be:	f89d 2004 	ldrb.w	r2, [sp, #4]
    80c2:	4331      	orrs	r1, r6
    80c4:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    80c6:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    80ca:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    80cc:	3204      	adds	r2, #4
    80ce:	e894 0003 	ldmia.w	r4, {r0, r1}
    80d2:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    80d6:	e7c1      	b.n	805c <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    80d8:	230e      	movs	r3, #14
    80da:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    80de:	e7e2      	b.n	80a6 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    80e0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    80e4:	e7ba      	b.n	805c <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    80e6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    80ea:	e7b7      	b.n	805c <uarte_nrfx_configure+0x16>

000080ec <uarte_nrfx_config_get>:
{
    80ec:	460b      	mov	r3, r1
	return dev->data;
    80ee:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    80f0:	6891      	ldr	r1, [r2, #8]
    80f2:	6850      	ldr	r0, [r2, #4]
    80f4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    80f8:	2000      	movs	r0, #0
    80fa:	4770      	bx	lr

000080fc <uarte_nrfx_err_check>:
	return dev->config;
    80fc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    80fe:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8100:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8104:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8108:	4770      	bx	lr

0000810a <is_tx_ready>:
	return dev->config;
    810a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    810c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    810e:	685b      	ldr	r3, [r3, #4]
    8110:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8114:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8118:	b929      	cbnz	r1, 8126 <is_tx_ready+0x1c>
    811a:	b933      	cbnz	r3, 812a <is_tx_ready+0x20>
    811c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    8120:	b92b      	cbnz	r3, 812e <is_tx_ready+0x24>
    8122:	2000      	movs	r0, #0
    8124:	4770      	bx	lr
    8126:	2001      	movs	r0, #1
    8128:	4770      	bx	lr
    812a:	2000      	movs	r0, #0
    812c:	4770      	bx	lr
    812e:	2001      	movs	r0, #1
}
    8130:	4770      	bx	lr

00008132 <uarte_enable>:
	return dev->config;
    8132:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8134:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8136:	2208      	movs	r2, #8
    8138:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    813c:	4770      	bx	lr

0000813e <tx_start>:
{
    813e:	b510      	push	{r4, lr}
	return dev->config;
    8140:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8142:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8144:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8148:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    814c:	2300      	movs	r3, #0
    814e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    8152:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    8156:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    815a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    815e:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8160:	685b      	ldr	r3, [r3, #4]
    8162:	f013 0f10 	tst.w	r3, #16
    8166:	d102      	bne.n	816e <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8168:	2301      	movs	r3, #1
    816a:	60a3      	str	r3, [r4, #8]
}
    816c:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    816e:	2101      	movs	r1, #1
    8170:	f7ff ffdf 	bl	8132 <uarte_enable>
    p_reg->INTENSET = mask;
    8174:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    8178:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    817c:	e7f4      	b.n	8168 <tx_start+0x2a>

0000817e <uarte_nrfx_poll_in>:
{
    817e:	b410      	push	{r4}
	return dev->data;
    8180:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    8182:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8184:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8186:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    818a:	b152      	cbz	r2, 81a2 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    818c:	7c62      	ldrb	r2, [r4, #17]
    818e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8190:	2000      	movs	r0, #0
    8192:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8196:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    819a:	2201      	movs	r2, #1
    819c:	601a      	str	r2, [r3, #0]
}
    819e:	bc10      	pop	{r4}
    81a0:	4770      	bx	lr
		return -1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295
    81a6:	e7fa      	b.n	819e <uarte_nrfx_poll_in+0x20>

000081a8 <wait_tx_ready>:
{
    81a8:	b570      	push	{r4, r5, r6, lr}
    81aa:	4606      	mov	r6, r0
    81ac:	e014      	b.n	81d8 <wait_tx_ready+0x30>
		if (res) {
    81ae:	b17d      	cbz	r5, 81d0 <wait_tx_ready+0x28>
	__asm__ volatile(
    81b0:	f04f 0320 	mov.w	r3, #32
    81b4:	f3ef 8411 	mrs	r4, BASEPRI
    81b8:	f383 8812 	msr	BASEPRI_MAX, r3
    81bc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    81c0:	4630      	mov	r0, r6
    81c2:	f7ff ffa2 	bl	810a <is_tx_ready>
    81c6:	b9a0      	cbnz	r0, 81f2 <wait_tx_ready+0x4a>
	__asm__ volatile(
    81c8:	f384 8811 	msr	BASEPRI, r4
    81cc:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    81d0:	2021      	movs	r0, #33	; 0x21
    81d2:	2100      	movs	r1, #0
    81d4:	f7fe fe6a 	bl	6eac <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    81d8:	2464      	movs	r4, #100	; 0x64
    81da:	4630      	mov	r0, r6
    81dc:	f7ff ff95 	bl	810a <is_tx_ready>
    81e0:	4605      	mov	r5, r0
    81e2:	2800      	cmp	r0, #0
    81e4:	d1e3      	bne.n	81ae <wait_tx_ready+0x6>
    81e6:	2001      	movs	r0, #1
    81e8:	f000 f8f8 	bl	83dc <nrfx_busy_wait>
    81ec:	3c01      	subs	r4, #1
    81ee:	d1f4      	bne.n	81da <wait_tx_ready+0x32>
    81f0:	e7dd      	b.n	81ae <wait_tx_ready+0x6>
}
    81f2:	4620      	mov	r0, r4
    81f4:	bd70      	pop	{r4, r5, r6, pc}

000081f6 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    81f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81f8:	4604      	mov	r4, r0
	return dev->config;
    81fa:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    81fc:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    81fe:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8200:	2100      	movs	r1, #0
    8202:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    8206:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    8208:	f7fc fa40 	bl	468c <uarte_nrfx_pins_configure>
	return dev->data;
    820c:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    820e:	3104      	adds	r1, #4
    8210:	4620      	mov	r0, r4
    8212:	f7ff ff18 	bl	8046 <uarte_nrfx_configure>
	if (err) {
    8216:	4604      	mov	r4, r0
    8218:	bb68      	cbnz	r0, 8276 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    821a:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    821c:	f013 0f02 	tst.w	r3, #2
    8220:	d12b      	bne.n	827a <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8222:	2308      	movs	r3, #8
    8224:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    8228:	7a33      	ldrb	r3, [r6, #8]
    822a:	b95b      	cbnz	r3, 8244 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    822c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    8230:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8234:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8238:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    823c:	2301      	movs	r3, #1
    823e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8242:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8244:	6873      	ldr	r3, [r6, #4]
    8246:	f013 0f02 	tst.w	r3, #2
    824a:	d103      	bne.n	8254 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    824c:	f44f 7380 	mov.w	r3, #256	; 0x100
    8250:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8254:	6873      	ldr	r3, [r6, #4]
    8256:	f013 0f10 	tst.w	r3, #16
    825a:	d003      	beq.n	8264 <uarte_instance_init+0x6e>
    825c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    8260:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    8264:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8266:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    826a:	2300      	movs	r3, #0
    826c:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8270:	2301      	movs	r3, #1
    8272:	60ab      	str	r3, [r5, #8]
    8274:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    8276:	4620      	mov	r0, r4
    8278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    827a:	4639      	mov	r1, r7
    827c:	4628      	mov	r0, r5
    827e:	f7fc fbb3 	bl	49e8 <endtx_stoptx_ppi_init>
		if (err < 0) {
    8282:	2800      	cmp	r0, #0
    8284:	dacd      	bge.n	8222 <uarte_instance_init+0x2c>
			return err;
    8286:	4604      	mov	r4, r0
    8288:	e7f5      	b.n	8276 <uarte_instance_init+0x80>

0000828a <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    828a:	b510      	push	{r4, lr}
    828c:	4604      	mov	r4, r0
    828e:	2200      	movs	r2, #0
    8290:	2101      	movs	r1, #1
    8292:	2002      	movs	r0, #2
    8294:	f7fb fafa 	bl	388c <z_arm_irq_priority_set>
    8298:	2002      	movs	r0, #2
    829a:	f7fb fad9 	bl	3850 <arch_irq_enable>
    829e:	2100      	movs	r1, #0
    82a0:	4620      	mov	r0, r4
    82a2:	f7ff ffa8 	bl	81f6 <uarte_instance_init>
    82a6:	bd10      	pop	{r4, pc}

000082a8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    82a8:	b510      	push	{r4, lr}
    82aa:	4604      	mov	r4, r0
    82ac:	2200      	movs	r2, #0
    82ae:	2101      	movs	r1, #1
    82b0:	2028      	movs	r0, #40	; 0x28
    82b2:	f7fb faeb 	bl	388c <z_arm_irq_priority_set>
    82b6:	2028      	movs	r0, #40	; 0x28
    82b8:	f7fb faca 	bl	3850 <arch_irq_enable>
    82bc:	2100      	movs	r1, #0
    82be:	4620      	mov	r0, r4
    82c0:	f7ff ff99 	bl	81f6 <uarte_instance_init>
    82c4:	bd10      	pop	{r4, pc}

000082c6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    82c6:	4770      	bx	lr

000082c8 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    82c8:	1a40      	subs	r0, r0, r1
}
    82ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    82ce:	4770      	bx	lr

000082d0 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    82d0:	f100 0350 	add.w	r3, r0, #80	; 0x50
    82d4:	009b      	lsls	r3, r3, #2
    82d6:	b29b      	uxth	r3, r3
    82d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    82dc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    82e0:	2200      	movs	r2, #0
    82e2:	601a      	str	r2, [r3, #0]
    82e4:	681b      	ldr	r3, [r3, #0]
}
    82e6:	4770      	bx	lr

000082e8 <absolute_time_to_cc>:
}
    82e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    82ec:	4770      	bx	lr

000082ee <full_int_lock>:
	__asm__ volatile(
    82ee:	f04f 0320 	mov.w	r3, #32
    82f2:	f3ef 8011 	mrs	r0, BASEPRI
    82f6:	f383 8812 	msr	BASEPRI_MAX, r3
    82fa:	f3bf 8f6f 	isb	sy
}
    82fe:	4770      	bx	lr

00008300 <full_int_unlock>:
	__asm__ volatile(
    8300:	f380 8811 	msr	BASEPRI, r0
    8304:	f3bf 8f6f 	isb	sy
}
    8308:	4770      	bx	lr

0000830a <set_absolute_alarm>:
{
    830a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    830c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    830e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    8312:	f7fc fb97 	bl	4a44 <get_comparator>
    8316:	4607      	mov	r7, r0
    8318:	e019      	b.n	834e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    831a:	2013      	movs	r0, #19
    831c:	f000 fb22 	bl	8964 <z_impl_k_busy_wait>
}
    8320:	e022      	b.n	8368 <set_absolute_alarm+0x5e>
		event_clear(chan);
    8322:	4630      	mov	r0, r6
    8324:	f7ff ffd4 	bl	82d0 <event_clear>
		event_enable(chan);
    8328:	4630      	mov	r0, r6
    832a:	f7fc fb93 	bl	4a54 <event_enable>
		set_comparator(chan, cc_val);
    832e:	4629      	mov	r1, r5
    8330:	4630      	mov	r0, r6
    8332:	f7fc fb7d 	bl	4a30 <set_comparator>
		now2 = counter();
    8336:	f7fc fba1 	bl	4a7c <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    833a:	4284      	cmp	r4, r0
    833c:	d01e      	beq.n	837c <set_absolute_alarm+0x72>
    833e:	1c81      	adds	r1, r0, #2
    8340:	4628      	mov	r0, r5
    8342:	f7ff ffc1 	bl	82c8 <counter_sub>
	} while ((now2 != now) &&
    8346:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    834a:	d917      	bls.n	837c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    834c:	462f      	mov	r7, r5
		now = counter();
    834e:	f7fc fb95 	bl	4a7c <counter>
    8352:	4604      	mov	r4, r0
		set_comparator(chan, now);
    8354:	4601      	mov	r1, r0
    8356:	4630      	mov	r0, r6
    8358:	f7fc fb6a 	bl	4a30 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    835c:	4621      	mov	r1, r4
    835e:	4638      	mov	r0, r7
    8360:	f7ff ffb2 	bl	82c8 <counter_sub>
    8364:	2801      	cmp	r0, #1
    8366:	d0d8      	beq.n	831a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    8368:	1ca7      	adds	r7, r4, #2
    836a:	4639      	mov	r1, r7
    836c:	4628      	mov	r0, r5
    836e:	f7ff ffab 	bl	82c8 <counter_sub>
    8372:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8376:	d9d4      	bls.n	8322 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    8378:	463d      	mov	r5, r7
    837a:	e7d2      	b.n	8322 <set_absolute_alarm+0x18>
}
    837c:	4628      	mov	r0, r5
    837e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008380 <compare_set>:
{
    8380:	b5f0      	push	{r4, r5, r6, r7, lr}
    8382:	b083      	sub	sp, #12
    8384:	4604      	mov	r4, r0
    8386:	4617      	mov	r7, r2
    8388:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    838a:	f7fc fb7d 	bl	4a88 <compare_int_lock>
    838e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    8390:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8392:	9301      	str	r3, [sp, #4]
    8394:	9b08      	ldr	r3, [sp, #32]
    8396:	9300      	str	r3, [sp, #0]
    8398:	463a      	mov	r2, r7
    839a:	462b      	mov	r3, r5
    839c:	4620      	mov	r0, r4
    839e:	f7fc fc61 	bl	4c64 <compare_set_nolocks>
    83a2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    83a4:	4631      	mov	r1, r6
    83a6:	4620      	mov	r0, r4
    83a8:	f7fc fbd2 	bl	4b50 <compare_int_unlock>
}
    83ac:	4628      	mov	r0, r5
    83ae:	b003      	add	sp, #12
    83b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000083b2 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    83b2:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    83b4:	2000      	movs	r0, #0
    83b6:	f7fb fe09 	bl	3fcc <sys_arch_reboot>

000083ba <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    83ba:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    83bc:	f7fe ff98 	bl	72f0 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    83c0:	bd08      	pop	{r3, pc}

000083c2 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    83c2:	b510      	push	{r4, lr}
    83c4:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    83c6:	f7fb f94f 	bl	3668 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    83ca:	f7fb fa0f 	bl	37ec <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    83ce:	4620      	mov	r0, r4
    83d0:	f7ff fff3 	bl	83ba <hw_cc3xx_init_internal>
	return res;
}
    83d4:	bd10      	pop	{r4, pc}

000083d6 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    83d6:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    83d8:	4780      	blx	r0
}
    83da:	bd08      	pop	{r3, pc}

000083dc <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    83dc:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    83de:	f000 fac1 	bl	8964 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    83e2:	bd08      	pop	{r3, pc}

000083e4 <nrfx_clock_enable>:
{
    83e4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    83e6:	2000      	movs	r0, #0
    83e8:	f7fb fa42 	bl	3870 <arch_irq_is_enabled>
    83ec:	b100      	cbz	r0, 83f0 <nrfx_clock_enable+0xc>
}
    83ee:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    83f0:	f7fb fa2e 	bl	3850 <arch_irq_enable>
    83f4:	e7fb      	b.n	83ee <nrfx_clock_enable+0xa>

000083f6 <pin_is_task_output>:
{
    83f6:	b510      	push	{r4, lr}
    83f8:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    83fa:	f7fd f859 	bl	54b0 <pin_is_output>
    83fe:	b128      	cbz	r0, 840c <pin_is_task_output+0x16>
    8400:	4620      	mov	r0, r4
    8402:	f7fd f83f 	bl	5484 <pin_in_use_by_te>
    8406:	b118      	cbz	r0, 8410 <pin_is_task_output+0x1a>
    8408:	2001      	movs	r0, #1
    840a:	e000      	b.n	840e <pin_is_task_output+0x18>
    840c:	2000      	movs	r0, #0
}
    840e:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8410:	2000      	movs	r0, #0
    8412:	e7fc      	b.n	840e <pin_is_task_output+0x18>

00008414 <pin_is_input>:
{
    8414:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    8416:	f7fd f84b 	bl	54b0 <pin_is_output>
    841a:	f080 0001 	eor.w	r0, r0, #1
}
    841e:	b2c0      	uxtb	r0, r0
    8420:	bd08      	pop	{r3, pc}

00008422 <gpiote_polarity_to_trigger>:
}
    8422:	4770      	bx	lr

00008424 <gpiote_trigger_to_polarity>:
}
    8424:	4770      	bx	lr

00008426 <is_level>:
}
    8426:	2803      	cmp	r0, #3
    8428:	bf94      	ite	ls
    842a:	2000      	movls	r0, #0
    842c:	2001      	movhi	r0, #1
    842e:	4770      	bx	lr

00008430 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    8430:	b508      	push	{r3, lr}
  _DoInit();
    8432:	f7fd fce9 	bl	5e08 <_DoInit>
}
    8436:	bd08      	pop	{r3, pc}

00008438 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    8438:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    843a:	f7ff fff9 	bl	8430 <SEGGER_RTT_Init>

	return 0;
}
    843e:	2000      	movs	r0, #0
    8440:	bd08      	pop	{r3, pc}

00008442 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8442:	b148      	cbz	r0, 8458 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8444:	68c3      	ldr	r3, [r0, #12]
    8446:	8818      	ldrh	r0, [r3, #0]
    8448:	f3c0 0008 	ubfx	r0, r0, #0, #9
    844c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    8450:	bf14      	ite	ne
    8452:	2000      	movne	r0, #0
    8454:	2001      	moveq	r0, #1
    8456:	4770      	bx	lr
		return false;
    8458:	2000      	movs	r0, #0
}
    845a:	4770      	bx	lr

0000845c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    845e:	4605      	mov	r5, r0
    8460:	460e      	mov	r6, r1
	__asm__ volatile(
    8462:	f04f 0320 	mov.w	r3, #32
    8466:	f3ef 8711 	mrs	r7, BASEPRI
    846a:	f383 8812 	msr	BASEPRI_MAX, r3
    846e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    8472:	f7fe fd47 	bl	6f04 <z_impl_z_current_get>
    8476:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    8478:	4631      	mov	r1, r6
    847a:	4628      	mov	r0, r5
    847c:	f7ff ff99 	bl	83b2 <k_sys_fatal_error_handler>
	__asm__ volatile(
    8480:	f387 8811 	msr	BASEPRI, r7
    8484:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8488:	4620      	mov	r0, r4
    848a:	f7fb fcc5 	bl	3e18 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    848e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008490 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8490:	68c2      	ldr	r2, [r0, #12]
    8492:	6903      	ldr	r3, [r0, #16]
    8494:	431a      	orrs	r2, r3
    8496:	f012 0203 	ands.w	r2, r2, #3
    849a:	d10d      	bne.n	84b8 <create_free_list+0x28>
	slab->free_list = NULL;
    849c:	2100      	movs	r1, #0
    849e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    84a0:	e005      	b.n	84ae <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    84a2:	6941      	ldr	r1, [r0, #20]
    84a4:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    84a6:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    84a8:	68c1      	ldr	r1, [r0, #12]
    84aa:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    84ac:	3201      	adds	r2, #1
    84ae:	6881      	ldr	r1, [r0, #8]
    84b0:	4291      	cmp	r1, r2
    84b2:	d8f6      	bhi.n	84a2 <create_free_list+0x12>
	return 0;
    84b4:	2000      	movs	r0, #0
    84b6:	4770      	bx	lr
		return -EINVAL;
    84b8:	f06f 0015 	mvn.w	r0, #21
}
    84bc:	4770      	bx	lr

000084be <k_mem_slab_init>:
{
    84be:	b510      	push	{r4, lr}
    84c0:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    84c2:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    84c4:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    84c6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    84c8:	2300      	movs	r3, #0
    84ca:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    84cc:	f7ff ffe0 	bl	8490 <create_free_list>
	if (rc < 0) {
    84d0:	2800      	cmp	r0, #0
    84d2:	db01      	blt.n	84d8 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    84d4:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    84d6:	6064      	str	r4, [r4, #4]
}
    84d8:	bd10      	pop	{r4, pc}

000084da <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    84da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84dc:	4604      	mov	r4, r0
    84de:	460d      	mov	r5, r1
	__asm__ volatile(
    84e0:	f04f 0320 	mov.w	r3, #32
    84e4:	f3ef 8611 	mrs	r6, BASEPRI
    84e8:	f383 8812 	msr	BASEPRI_MAX, r3
    84ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    84f0:	6943      	ldr	r3, [r0, #20]
    84f2:	b163      	cbz	r3, 850e <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    84f4:	682b      	ldr	r3, [r5, #0]
    84f6:	6962      	ldr	r2, [r4, #20]
    84f8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    84fa:	682b      	ldr	r3, [r5, #0]
    84fc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    84fe:	69a3      	ldr	r3, [r4, #24]
    8500:	3b01      	subs	r3, #1
    8502:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    8504:	f386 8811 	msr	BASEPRI, r6
    8508:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    850c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    850e:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8512:	f000 f947 	bl	87a4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    8516:	2800      	cmp	r0, #0
    8518:	d0ec      	beq.n	84f4 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    851a:	682a      	ldr	r2, [r5, #0]
    851c:	2100      	movs	r1, #0
    851e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8522:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8524:	f000 f8a3 	bl	866e <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8528:	4631      	mov	r1, r6
    852a:	4638      	mov	r0, r7
    852c:	f7fe f990 	bl	6850 <z_reschedule>
			return;
    8530:	e7ec      	b.n	850c <k_mem_slab_free+0x32>

00008532 <setup_thread_stack>:
{
    8532:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8534:	3207      	adds	r2, #7
    8536:	f022 0207 	bic.w	r2, r2, #7
    853a:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    853e:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    8542:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    8546:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    854a:	2200      	movs	r2, #0
    854c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    8550:	18c8      	adds	r0, r1, r3
    8552:	bc10      	pop	{r4}
    8554:	4770      	bx	lr

00008556 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8556:	f3ef 8005 	mrs	r0, IPSR
}
    855a:	3800      	subs	r0, #0
    855c:	bf18      	it	ne
    855e:	2001      	movne	r0, #1
    8560:	4770      	bx	lr

00008562 <z_impl_k_thread_start>:
{
    8562:	b508      	push	{r3, lr}
	z_sched_start(thread);
    8564:	f7fe fa9e 	bl	6aa4 <z_sched_start>
}
    8568:	bd08      	pop	{r3, pc}

0000856a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    856a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    856c:	2400      	movs	r4, #0
    856e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    8570:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    8572:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    8574:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    8576:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    8578:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    857a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    857c:	bc10      	pop	{r4}
    857e:	4770      	bx	lr

00008580 <z_impl_k_thread_create>:
{
    8580:	b5f0      	push	{r4, r5, r6, r7, lr}
    8582:	b087      	sub	sp, #28
    8584:	4604      	mov	r4, r0
    8586:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    858a:	2500      	movs	r5, #0
    858c:	9505      	str	r5, [sp, #20]
    858e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    8590:	9504      	str	r5, [sp, #16]
    8592:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8594:	9503      	str	r5, [sp, #12]
    8596:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8598:	9502      	str	r5, [sp, #8]
    859a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    859c:	9501      	str	r5, [sp, #4]
    859e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    85a0:	9500      	str	r5, [sp, #0]
    85a2:	f7fd fe1b 	bl	61dc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    85a6:	f1b7 3fff 	cmp.w	r7, #4294967295
    85aa:	bf08      	it	eq
    85ac:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    85b0:	d102      	bne.n	85b8 <z_impl_k_thread_create+0x38>
}
    85b2:	4620      	mov	r0, r4
    85b4:	b007      	add	sp, #28
    85b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    85b8:	4632      	mov	r2, r6
    85ba:	463b      	mov	r3, r7
    85bc:	4620      	mov	r0, r4
    85be:	f7fd fdfb 	bl	61b8 <schedule_new_thread>
    85c2:	e7f6      	b.n	85b2 <z_impl_k_thread_create+0x32>

000085c4 <z_pm_save_idle_exit>:
{
    85c4:	b508      	push	{r3, lr}
	pm_system_resume();
    85c6:	f7fa ff2b 	bl	3420 <pm_system_resume>
	sys_clock_idle_exit();
    85ca:	f7ff fe7c 	bl	82c6 <sys_clock_idle_exit>
}
    85ce:	bd08      	pop	{r3, pc}

000085d0 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    85d0:	4288      	cmp	r0, r1
    85d2:	da00      	bge.n	85d6 <new_prio_for_inheritance+0x6>
    85d4:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    85d6:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    85da:	db01      	blt.n	85e0 <new_prio_for_inheritance+0x10>
    85dc:	4608      	mov	r0, r1
    85de:	4770      	bx	lr
    85e0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    85e4:	4770      	bx	lr

000085e6 <adjust_owner_prio>:
{
    85e6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    85e8:	6880      	ldr	r0, [r0, #8]
    85ea:	f990 300e 	ldrsb.w	r3, [r0, #14]
    85ee:	428b      	cmp	r3, r1
    85f0:	d101      	bne.n	85f6 <adjust_owner_prio+0x10>
	return false;
    85f2:	2000      	movs	r0, #0
}
    85f4:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    85f6:	f7fe faa3 	bl	6b40 <z_set_prio>
    85fa:	e7fb      	b.n	85f4 <adjust_owner_prio+0xe>

000085fc <z_impl_k_mutex_init>:
{
    85fc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    85fe:	2000      	movs	r0, #0
    8600:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    8602:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    8604:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    8606:	605b      	str	r3, [r3, #4]
}
    8608:	4770      	bx	lr

0000860a <thread_active_elsewhere>:
}
    860a:	2000      	movs	r0, #0
    860c:	4770      	bx	lr

0000860e <pended_on_thread>:
}
    860e:	6880      	ldr	r0, [r0, #8]
    8610:	4770      	bx	lr

00008612 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    8612:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8616:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    861a:	4283      	cmp	r3, r0
    861c:	d001      	beq.n	8622 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    861e:	1ac0      	subs	r0, r0, r3
    8620:	4770      	bx	lr
	return 0;
    8622:	2000      	movs	r0, #0
}
    8624:	4770      	bx	lr

00008626 <z_reschedule_irqlock>:
{
    8626:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8628:	4603      	mov	r3, r0
    862a:	b920      	cbnz	r0, 8636 <z_reschedule_irqlock+0x10>
    862c:	f3ef 8205 	mrs	r2, IPSR
    8630:	b942      	cbnz	r2, 8644 <z_reschedule_irqlock+0x1e>
    8632:	2201      	movs	r2, #1
    8634:	e000      	b.n	8638 <z_reschedule_irqlock+0x12>
    8636:	2200      	movs	r2, #0
	if (resched(key)) {
    8638:	b932      	cbnz	r2, 8648 <z_reschedule_irqlock+0x22>
    863a:	f383 8811 	msr	BASEPRI, r3
    863e:	f3bf 8f6f 	isb	sy
}
    8642:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8644:	2200      	movs	r2, #0
    8646:	e7f7      	b.n	8638 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    8648:	4618      	mov	r0, r3
    864a:	f7fb f955 	bl	38f8 <arch_swap>
	return ret;
    864e:	e7f8      	b.n	8642 <z_reschedule_irqlock+0x1c>

00008650 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8650:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    8652:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    8654:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8656:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8658:	2300      	movs	r3, #0
    865a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    865c:	604b      	str	r3, [r1, #4]
}
    865e:	4770      	bx	lr

00008660 <z_priq_dumb_best>:
{
    8660:	4603      	mov	r3, r0
	return list->head == list;
    8662:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8664:	4283      	cmp	r3, r0
    8666:	d000      	beq.n	866a <z_priq_dumb_best+0xa>
}
    8668:	4770      	bx	lr
	struct k_thread *thread = NULL;
    866a:	2000      	movs	r0, #0
	return thread;
    866c:	e7fc      	b.n	8668 <z_priq_dumb_best+0x8>

0000866e <z_ready_thread>:
{
    866e:	b538      	push	{r3, r4, r5, lr}
    8670:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    8672:	2300      	movs	r3, #0
	__asm__ volatile(
    8674:	f04f 0220 	mov.w	r2, #32
    8678:	f3ef 8511 	mrs	r5, BASEPRI
    867c:	f382 8812 	msr	BASEPRI_MAX, r2
    8680:	f3bf 8f6f 	isb	sy
    8684:	e007      	b.n	8696 <z_ready_thread+0x28>
			ready_thread(thread);
    8686:	4620      	mov	r0, r4
    8688:	f7fe f9cc 	bl	6a24 <ready_thread>
	__asm__ volatile(
    868c:	f385 8811 	msr	BASEPRI, r5
    8690:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8694:	2301      	movs	r3, #1
    8696:	b92b      	cbnz	r3, 86a4 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    8698:	4620      	mov	r0, r4
    869a:	f7ff ffb6 	bl	860a <thread_active_elsewhere>
    869e:	2800      	cmp	r0, #0
    86a0:	d1f4      	bne.n	868c <z_ready_thread+0x1e>
    86a2:	e7f0      	b.n	8686 <z_ready_thread+0x18>
}
    86a4:	bd38      	pop	{r3, r4, r5, pc}

000086a6 <z_thread_timeout>:
{
    86a6:	b570      	push	{r4, r5, r6, lr}
    86a8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    86aa:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    86ae:	2300      	movs	r3, #0
	__asm__ volatile(
    86b0:	f04f 0220 	mov.w	r2, #32
    86b4:	f3ef 8611 	mrs	r6, BASEPRI
    86b8:	f382 8812 	msr	BASEPRI_MAX, r2
    86bc:	f3bf 8f6f 	isb	sy
    86c0:	e019      	b.n	86f6 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    86c2:	4628      	mov	r0, r5
    86c4:	f7ff ffa3 	bl	860e <pended_on_thread>
    86c8:	4629      	mov	r1, r5
    86ca:	f7ff ffc1 	bl	8650 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    86ce:	7b6b      	ldrb	r3, [r5, #13]
    86d0:	f023 0302 	bic.w	r3, r3, #2
    86d4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    86d6:	2300      	movs	r3, #0
    86d8:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    86da:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    86de:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    86e2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    86e6:	4628      	mov	r0, r5
    86e8:	f7fe f99c 	bl	6a24 <ready_thread>
	__asm__ volatile(
    86ec:	f386 8811 	msr	BASEPRI, r6
    86f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    86f4:	2301      	movs	r3, #1
    86f6:	b94b      	cbnz	r3, 870c <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    86f8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    86fc:	f013 0f28 	tst.w	r3, #40	; 0x28
    8700:	d1f4      	bne.n	86ec <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    8702:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8706:	2b00      	cmp	r3, #0
    8708:	d1db      	bne.n	86c2 <z_thread_timeout+0x1c>
    870a:	e7e6      	b.n	86da <z_thread_timeout+0x34>
}
    870c:	bd70      	pop	{r4, r5, r6, pc}

0000870e <add_to_waitq_locked>:
{
    870e:	b570      	push	{r4, r5, r6, lr}
    8710:	4605      	mov	r5, r0
    8712:	460e      	mov	r6, r1
	unready_thread(thread);
    8714:	f7fe f9e4 	bl	6ae0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8718:	7b6b      	ldrb	r3, [r5, #13]
    871a:	f043 0302 	orr.w	r3, r3, #2
    871e:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8720:	b1b6      	cbz	r6, 8750 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    8722:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    8724:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8726:	42a6      	cmp	r6, r4
    8728:	d019      	beq.n	875e <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    872a:	b164      	cbz	r4, 8746 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    872c:	4621      	mov	r1, r4
    872e:	4628      	mov	r0, r5
    8730:	f7ff ff6f 	bl	8612 <z_sched_prio_cmp>
    8734:	2800      	cmp	r0, #0
    8736:	dc0c      	bgt.n	8752 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8738:	b12c      	cbz	r4, 8746 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    873a:	6873      	ldr	r3, [r6, #4]
    873c:	429c      	cmp	r4, r3
    873e:	d002      	beq.n	8746 <add_to_waitq_locked+0x38>
    8740:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8742:	2c00      	cmp	r4, #0
    8744:	d1f1      	bne.n	872a <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    8746:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    8748:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    874a:	606b      	str	r3, [r5, #4]
	tail->next = node;
    874c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    874e:	6075      	str	r5, [r6, #4]
}
    8750:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    8752:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8754:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8756:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8758:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    875a:	6065      	str	r5, [r4, #4]
}
    875c:	e7f8      	b.n	8750 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    875e:	2400      	movs	r4, #0
    8760:	e7e3      	b.n	872a <add_to_waitq_locked+0x1c>

00008762 <pend>:
{
    8762:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8766:	4605      	mov	r5, r0
    8768:	460f      	mov	r7, r1
    876a:	4691      	mov	r9, r2
    876c:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    876e:	2400      	movs	r4, #0
	__asm__ volatile(
    8770:	f04f 0320 	mov.w	r3, #32
    8774:	f3ef 8611 	mrs	r6, BASEPRI
    8778:	f383 8812 	msr	BASEPRI_MAX, r3
    877c:	f3bf 8f6f 	isb	sy
    8780:	b94c      	cbnz	r4, 8796 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    8782:	4639      	mov	r1, r7
    8784:	4628      	mov	r0, r5
    8786:	f7ff ffc2 	bl	870e <add_to_waitq_locked>
	__asm__ volatile(
    878a:	f386 8811 	msr	BASEPRI, r6
    878e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8792:	2401      	movs	r4, #1
    8794:	e7f4      	b.n	8780 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    8796:	464a      	mov	r2, r9
    8798:	4643      	mov	r3, r8
    879a:	4628      	mov	r0, r5
    879c:	f7fd fff6 	bl	678c <add_thread_timeout>
}
    87a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000087a4 <z_unpend_first_thread>:
{
    87a4:	b570      	push	{r4, r5, r6, lr}
    87a6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    87a8:	2300      	movs	r3, #0
	__asm__ volatile(
    87aa:	f04f 0220 	mov.w	r2, #32
    87ae:	f3ef 8511 	mrs	r5, BASEPRI
    87b2:	f382 8812 	msr	BASEPRI_MAX, r2
    87b6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    87ba:	461c      	mov	r4, r3
    87bc:	e013      	b.n	87e6 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    87be:	f7ff ff26 	bl	860e <pended_on_thread>
    87c2:	4621      	mov	r1, r4
    87c4:	f7ff ff44 	bl	8650 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    87c8:	7b63      	ldrb	r3, [r4, #13]
    87ca:	f023 0302 	bic.w	r3, r3, #2
    87ce:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    87d0:	2300      	movs	r3, #0
    87d2:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    87d4:	f104 0018 	add.w	r0, r4, #24
    87d8:	f000 f861 	bl	889e <z_abort_timeout>
	__asm__ volatile(
    87dc:	f385 8811 	msr	BASEPRI, r5
    87e0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    87e4:	2301      	movs	r3, #1
    87e6:	b933      	cbnz	r3, 87f6 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    87e8:	4630      	mov	r0, r6
    87ea:	f7ff ff39 	bl	8660 <z_priq_dumb_best>
		if (thread != NULL) {
    87ee:	4604      	mov	r4, r0
    87f0:	2800      	cmp	r0, #0
    87f2:	d1e4      	bne.n	87be <z_unpend_first_thread+0x1a>
    87f4:	e7f2      	b.n	87dc <z_unpend_first_thread+0x38>
}
    87f6:	4620      	mov	r0, r4
    87f8:	bd70      	pop	{r4, r5, r6, pc}

000087fa <init_ready_q>:
	sys_dlist_init(&rq->runq);
    87fa:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    87fc:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    87fe:	6083      	str	r3, [r0, #8]
}
    8800:	4770      	bx	lr

00008802 <z_sched_wake>:
{
    8802:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8806:	4606      	mov	r6, r0
    8808:	4688      	mov	r8, r1
    880a:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    880c:	2300      	movs	r3, #0
	__asm__ volatile(
    880e:	f04f 0220 	mov.w	r2, #32
    8812:	f3ef 8511 	mrs	r5, BASEPRI
    8816:	f382 8812 	msr	BASEPRI_MAX, r2
    881a:	f3bf 8f6f 	isb	sy
	bool ret = false;
    881e:	4699      	mov	r9, r3
    8820:	e01b      	b.n	885a <z_sched_wake+0x58>
    8822:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
    8826:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8828:	f7ff fef1 	bl	860e <pended_on_thread>
    882c:	4621      	mov	r1, r4
    882e:	f7ff ff0f 	bl	8650 <z_priq_dumb_remove>
    8832:	7b63      	ldrb	r3, [r4, #13]
    8834:	f023 0302 	bic.w	r3, r3, #2
    8838:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    883a:	2300      	movs	r3, #0
    883c:	60a3      	str	r3, [r4, #8]
    883e:	f104 0018 	add.w	r0, r4, #24
    8842:	f000 f82c 	bl	889e <z_abort_timeout>
			ready_thread(thread);
    8846:	4620      	mov	r0, r4
    8848:	f7fe f8ec 	bl	6a24 <ready_thread>
			ret = true;
    884c:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
    8850:	f385 8811 	msr	BASEPRI, r5
    8854:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8858:	2301      	movs	r3, #1
    885a:	b933      	cbnz	r3, 886a <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
    885c:	4630      	mov	r0, r6
    885e:	f7ff feff 	bl	8660 <z_priq_dumb_best>
		if (thread != NULL) {
    8862:	4604      	mov	r4, r0
    8864:	2800      	cmp	r0, #0
    8866:	d1dc      	bne.n	8822 <z_sched_wake+0x20>
    8868:	e7f2      	b.n	8850 <z_sched_wake+0x4e>
}
    886a:	4648      	mov	r0, r9
    886c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008870 <remove_timeout>:
{
    8870:	b538      	push	{r3, r4, r5, lr}
    8872:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    8874:	f7fe fbaa 	bl	6fcc <next>
    8878:	b148      	cbz	r0, 888e <remove_timeout+0x1e>
    887a:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    887c:	6920      	ldr	r0, [r4, #16]
    887e:	6965      	ldr	r5, [r4, #20]
    8880:	6913      	ldr	r3, [r2, #16]
    8882:	6951      	ldr	r1, [r2, #20]
    8884:	181b      	adds	r3, r3, r0
    8886:	eb45 0101 	adc.w	r1, r5, r1
    888a:	6113      	str	r3, [r2, #16]
    888c:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    888e:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    8890:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    8892:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8894:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8896:	2300      	movs	r3, #0
    8898:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    889a:	6063      	str	r3, [r4, #4]
}
    889c:	bd38      	pop	{r3, r4, r5, pc}

0000889e <z_abort_timeout>:
{
    889e:	b570      	push	{r4, r5, r6, lr}
    88a0:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    88a2:	2300      	movs	r3, #0
	__asm__ volatile(
    88a4:	f04f 0220 	mov.w	r2, #32
    88a8:	f3ef 8611 	mrs	r6, BASEPRI
    88ac:	f382 8812 	msr	BASEPRI_MAX, r2
    88b0:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    88b4:	f06f 0015 	mvn.w	r0, #21
    88b8:	e008      	b.n	88cc <z_abort_timeout+0x2e>
			remove_timeout(to);
    88ba:	4620      	mov	r0, r4
    88bc:	f7ff ffd8 	bl	8870 <remove_timeout>
			ret = 0;
    88c0:	4628      	mov	r0, r5
	__asm__ volatile(
    88c2:	f386 8811 	msr	BASEPRI, r6
    88c6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    88ca:	2301      	movs	r3, #1
    88cc:	461d      	mov	r5, r3
    88ce:	b91b      	cbnz	r3, 88d8 <z_abort_timeout+0x3a>
	return node->next != NULL;
    88d0:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    88d2:	2b00      	cmp	r3, #0
    88d4:	d1f1      	bne.n	88ba <z_abort_timeout+0x1c>
    88d6:	e7f4      	b.n	88c2 <z_abort_timeout+0x24>
}
    88d8:	bd70      	pop	{r4, r5, r6, pc}

000088da <z_get_next_timeout_expiry>:
{
    88da:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    88dc:	2300      	movs	r3, #0
	__asm__ volatile(
    88de:	f04f 0220 	mov.w	r2, #32
    88e2:	f3ef 8411 	mrs	r4, BASEPRI
    88e6:	f382 8812 	msr	BASEPRI_MAX, r2
    88ea:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    88ee:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    88f2:	b93b      	cbnz	r3, 8904 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    88f4:	f7fe fb82 	bl	6ffc <next_timeout>
	__asm__ volatile(
    88f8:	f384 8811 	msr	BASEPRI, r4
    88fc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8900:	2301      	movs	r3, #1
    8902:	e7f6      	b.n	88f2 <z_get_next_timeout_expiry+0x18>
}
    8904:	bd10      	pop	{r4, pc}

00008906 <z_set_timeout_expiry>:
{
    8906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8908:	4606      	mov	r6, r0
    890a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    890c:	2300      	movs	r3, #0
	__asm__ volatile(
    890e:	f04f 0220 	mov.w	r2, #32
    8912:	f3ef 8511 	mrs	r5, BASEPRI
    8916:	f382 8812 	msr	BASEPRI_MAX, r2
    891a:	f3bf 8f6f 	isb	sy
    891e:	e00a      	b.n	8936 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    8920:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    8922:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8926:	2801      	cmp	r0, #1
    8928:	dd00      	ble.n	892c <z_set_timeout_expiry+0x26>
    892a:	b97c      	cbnz	r4, 894c <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    892c:	f385 8811 	msr	BASEPRI, r5
    8930:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8934:	2301      	movs	r3, #1
    8936:	461c      	mov	r4, r3
    8938:	b97b      	cbnz	r3, 895a <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    893a:	f7fe fb5f 	bl	6ffc <next_timeout>
			      || (ticks <= next_to);
    893e:	f1b0 3fff 	cmp.w	r0, #4294967295
    8942:	d0ed      	beq.n	8920 <z_set_timeout_expiry+0x1a>
    8944:	42b0      	cmp	r0, r6
    8946:	dbec      	blt.n	8922 <z_set_timeout_expiry+0x1c>
    8948:	2401      	movs	r4, #1
    894a:	e7ea      	b.n	8922 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    894c:	4639      	mov	r1, r7
    894e:	42b0      	cmp	r0, r6
    8950:	bfa8      	it	ge
    8952:	4630      	movge	r0, r6
    8954:	f7fc fa82 	bl	4e5c <sys_clock_set_timeout>
    8958:	e7e8      	b.n	892c <z_set_timeout_expiry+0x26>
}
    895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000895c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    895c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    895e:	f7fe fc7f 	bl	7260 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8962:	bd08      	pop	{r3, pc}

00008964 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8964:	b900      	cbnz	r0, 8968 <z_impl_k_busy_wait+0x4>
    8966:	4770      	bx	lr
{
    8968:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    896a:	f7fb fb45 	bl	3ff8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    896e:	bd08      	pop	{r3, pc}

00008970 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8970:	4770      	bx	lr

00008972 <memcpy>:
    8972:	440a      	add	r2, r1
    8974:	4291      	cmp	r1, r2
    8976:	f100 33ff 	add.w	r3, r0, #4294967295
    897a:	d100      	bne.n	897e <memcpy+0xc>
    897c:	4770      	bx	lr
    897e:	b510      	push	{r4, lr}
    8980:	f811 4b01 	ldrb.w	r4, [r1], #1
    8984:	f803 4f01 	strb.w	r4, [r3, #1]!
    8988:	4291      	cmp	r1, r2
    898a:	d1f9      	bne.n	8980 <memcpy+0xe>
    898c:	bd10      	pop	{r4, pc}

0000898e <memset>:
    898e:	4402      	add	r2, r0
    8990:	4603      	mov	r3, r0
    8992:	4293      	cmp	r3, r2
    8994:	d100      	bne.n	8998 <memset+0xa>
    8996:	4770      	bx	lr
    8998:	f803 1b01 	strb.w	r1, [r3], #1
    899c:	e7f9      	b.n	8992 <memset+0x4>

0000899e <strncpy>:
    899e:	b510      	push	{r4, lr}
    89a0:	3901      	subs	r1, #1
    89a2:	4603      	mov	r3, r0
    89a4:	b132      	cbz	r2, 89b4 <strncpy+0x16>
    89a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    89aa:	f803 4b01 	strb.w	r4, [r3], #1
    89ae:	3a01      	subs	r2, #1
    89b0:	2c00      	cmp	r4, #0
    89b2:	d1f7      	bne.n	89a4 <strncpy+0x6>
    89b4:	441a      	add	r2, r3
    89b6:	2100      	movs	r1, #0
    89b8:	4293      	cmp	r3, r2
    89ba:	d100      	bne.n	89be <strncpy+0x20>
    89bc:	bd10      	pop	{r4, pc}
    89be:	f803 1b01 	strb.w	r1, [r3], #1
    89c2:	e7f9      	b.n	89b8 <strncpy+0x1a>

000089c4 <strnlen>:
    89c4:	b510      	push	{r4, lr}
    89c6:	4602      	mov	r2, r0
    89c8:	4401      	add	r1, r0
    89ca:	428a      	cmp	r2, r1
    89cc:	4613      	mov	r3, r2
    89ce:	d101      	bne.n	89d4 <strnlen+0x10>
    89d0:	1a18      	subs	r0, r3, r0
    89d2:	bd10      	pop	{r4, pc}
    89d4:	781c      	ldrb	r4, [r3, #0]
    89d6:	3201      	adds	r2, #1
    89d8:	2c00      	cmp	r4, #0
    89da:	d1f6      	bne.n	89ca <strnlen+0x6>
    89dc:	e7f8      	b.n	89d0 <strnlen+0xc>
	...

000089e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    89e0:	f7fc bb14 	b.w	500c <SystemInit>
