
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
}

static uint8_t discovery_process_service(struct bt_gatt_dm *dm,
				      const struct bt_gatt_attr *attr,
				      struct bt_gatt_discover_params *params)
{
   0:	20005980 	.word	0x20005980
	int err;

	if (!attr) {
   4:	00013ca5 	.word	0x00013ca5
		return BT_GATT_ITER_STOP;
	}

	struct bt_gatt_service_val *service_val = attr->user_data;
	struct bt_gatt_dm_attr *cur_attr =
		attr_store(dm, attr, sizeof(*service_val));
   8:	00021de5 	.word	0x00021de5
   c:	00013c5d 	.word	0x00013c5d

	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
			bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY) == 0);

	if (!cur_attr) {
  10:	00013c5d 	.word	0x00013c5d
	LOG_DBG("Service detected, handles range: <%u, %u>",
		cur_attr->handle + 1,
		service_val->end_handle);

	struct bt_gatt_service_val *cur_service_val =
		bt_gatt_dm_attr_service_val(cur_attr);
  14:	00013c5d 	.word	0x00013c5d
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
  18:	00013c5d 	.word	0x00013c5d
	...
		LOG_ERR("Not enough memory for service attribute data.");
		discovery_complete_error(dm, -ENOMEM);
		return BT_GATT_ITER_STOP;
	}

	if (cur_attr->handle == cur_service_val->end_handle) {
  2c:	00013395 	.word	0x00013395
  30:	00013c5d 	.word	0x00013c5d
		/* No characteristics to discover, go to next service. */
		return BT_GATT_ITER_CONTINUE;
	}

	dm->discover_params.uuid         = NULL;
  34:	00000000 	.word	0x00000000
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
  38:	0001333d 	.word	0x0001333d
	dm->discover_params.start_handle = cur_attr->handle + 1;
  3c:	00013c5d 	.word	0x00013c5d

00000040 <_irq_vector_table>:
  40:	00013481 00024c11 00013481 00013481     .4...L...4...4..
	dm->discover_params.end_handle   = cur_service_val->end_handle;
	LOG_DBG("Starting descriptors discovery");
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
  50:	00013481 00013481 00013481 00013481     .4...4...4...4..
		return BT_GATT_ITER_STOP;
  60:	00024bd9 00013481 00013481 00024bf7     .K...4...4...K..
		LOG_ERR("Not enough memory for service attribute.");
  70:	00013481 00013481 00013481 00013481     .4...4...4...4..
  80:	00013481 00013481 00013481 00013481     .4...4...4...4..
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
  90:	00013481 00013481 00013481 00013481     .4...4...4...4..
		LOG_ERR("Not enough memory for service attribute data.");
  a0:	00013481 00013481 00013481 00013481     .4...4...4...4..
		discovery_complete_error(dm, -ENOMEM);
  b0:	00013481 00013481 00013481 00013481     .4...4...4...4..
  c0:	00013481 00013481 00013481 00013481     .4...4...4...4..

	if (err) {
		LOG_ERR("Descriptor discover failed, error: %d.", err);
  d0:	00013481 00013481 00013481 00013481     .4...4...4...4..
		discovery_complete_error(dm, -ENOMEM);
  e0:	00013481 00013481 00013481 00013481     .4...4...4...4..
		return BT_GATT_ITER_CONTINUE;
  f0:	00013481 00013481 00013481 00013481     .4...4...4...4..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
		return -EINVAL;
	}
	/* NUS TX */
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_TX);
	if (!gatt_desc) {
		LOG_ERR("Missing NUS TX value descriptor in characteristic.");
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
		return -EINVAL;
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
	LOG_DBG("Found handle for NUS TX characteristic.");
	nus_c->handles.tx = gatt_desc->handle;
	/* NUS TX CCC */
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
	if (!gatt_desc) {
		LOG_ERR("Missing NUS TX CCC in characteristic.");
     132:	f000 80e2 	beq.w	2fa <CONFIG_IDLE_STACK_SIZE+0x1ba>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
		return -EINVAL;
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
	nus_c->handles.tx_ccc = gatt_desc->handle;

	/* NUS RX Characteristic */
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
	if (!gatt_chrc) {
		LOG_ERR("Missing NUS RX characteristic.");
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
		return -EINVAL;
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
	}
	/* NUS RX */
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_RX);
	if (!gatt_desc) {
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
		return -EINVAL;
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_IDLE_STACK_SIZE+0xf0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_IDLE_STACK_SIZE+0x13a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_IDLE_STACK_SIZE+0x136>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_IDLE_STACK_SIZE+0x150>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_IDLE_STACK_SIZE+0x19e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <__data_size+0x47>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <__data_size+0x15>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <__data_size+0x59>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <__data_size+0x31>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <__data_size+0x59>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <__data_size+0x43>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <__data_size+0x59>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <__data_size+0x59>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <__data_size+0x59>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <__data_size+0x43>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <__data_size+0x59>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <__data_size+0x7>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <__data_size+0x59>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <__data_size+0x43>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <__data_size+0x7>
     89a:	e712      	b.n	6c2 <__data_size+0x59>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_uldivmod>:
     8ec:	b953      	cbnz	r3, 904 <__aeabi_uldivmod+0x18>
     8ee:	b94a      	cbnz	r2, 904 <__aeabi_uldivmod+0x18>
     8f0:	2900      	cmp	r1, #0
     8f2:	bf08      	it	eq
     8f4:	2800      	cmpeq	r0, #0
     8f6:	bf1c      	itt	ne
     8f8:	f04f 31ff 	movne.w	r1, #4294967295
     8fc:	f04f 30ff 	movne.w	r0, #4294967295
     900:	f000 b96c 	b.w	bdc <__aeabi_idiv0>
     904:	f1ad 0c08 	sub.w	ip, sp, #8
     908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     90c:	f000 f806 	bl	91c <__udivmoddi4>
     910:	f8dd e004 	ldr.w	lr, [sp, #4]
     914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     918:	b004      	add	sp, #16
     91a:	4770      	bx	lr

0000091c <__udivmoddi4>:
     91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     920:	9e08      	ldr	r6, [sp, #32]
     922:	460d      	mov	r5, r1
     924:	4604      	mov	r4, r0
     926:	468e      	mov	lr, r1
     928:	2b00      	cmp	r3, #0
     92a:	f040 8082 	bne.w	a32 <__udivmoddi4+0x116>
     92e:	428a      	cmp	r2, r1
     930:	4617      	mov	r7, r2
     932:	d946      	bls.n	9c2 <__udivmoddi4+0xa6>
     934:	fab2 f282 	clz	r2, r2
     938:	b14a      	cbz	r2, 94e <__udivmoddi4+0x32>
     93a:	f1c2 0120 	rsb	r1, r2, #32
     93e:	fa05 f302 	lsl.w	r3, r5, r2
     942:	fa20 f101 	lsr.w	r1, r0, r1
     946:	4097      	lsls	r7, r2
     948:	ea41 0e03 	orr.w	lr, r1, r3
     94c:	4094      	lsls	r4, r2
     94e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     952:	0c23      	lsrs	r3, r4, #16
     954:	fbbe fcf8 	udiv	ip, lr, r8
     958:	b2b9      	uxth	r1, r7
     95a:	fb08 ee1c 	mls	lr, r8, ip, lr
     95e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     962:	fb0c f001 	mul.w	r0, ip, r1
     966:	4298      	cmp	r0, r3
     968:	d90a      	bls.n	980 <__udivmoddi4+0x64>
     96a:	18fb      	adds	r3, r7, r3
     96c:	f10c 35ff 	add.w	r5, ip, #4294967295
     970:	f080 8116 	bcs.w	ba0 <__udivmoddi4+0x284>
     974:	4298      	cmp	r0, r3
     976:	f240 8113 	bls.w	ba0 <__udivmoddi4+0x284>
     97a:	f1ac 0c02 	sub.w	ip, ip, #2
     97e:	443b      	add	r3, r7
     980:	1a1b      	subs	r3, r3, r0
     982:	b2a4      	uxth	r4, r4
     984:	fbb3 f0f8 	udiv	r0, r3, r8
     988:	fb08 3310 	mls	r3, r8, r0, r3
     98c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     990:	fb00 f101 	mul.w	r1, r0, r1
     994:	42a1      	cmp	r1, r4
     996:	d909      	bls.n	9ac <__udivmoddi4+0x90>
     998:	193c      	adds	r4, r7, r4
     99a:	f100 33ff 	add.w	r3, r0, #4294967295
     99e:	f080 8101 	bcs.w	ba4 <__udivmoddi4+0x288>
     9a2:	42a1      	cmp	r1, r4
     9a4:	f240 80fe 	bls.w	ba4 <__udivmoddi4+0x288>
     9a8:	3802      	subs	r0, #2
     9aa:	443c      	add	r4, r7
     9ac:	1a64      	subs	r4, r4, r1
     9ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     9b2:	2100      	movs	r1, #0
     9b4:	b11e      	cbz	r6, 9be <__udivmoddi4+0xa2>
     9b6:	40d4      	lsrs	r4, r2
     9b8:	2300      	movs	r3, #0
     9ba:	e9c6 4300 	strd	r4, r3, [r6]
     9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9c2:	b902      	cbnz	r2, 9c6 <__udivmoddi4+0xaa>
     9c4:	deff      	udf	#255	; 0xff
     9c6:	fab2 f282 	clz	r2, r2
     9ca:	2a00      	cmp	r2, #0
     9cc:	d14f      	bne.n	a6e <__udivmoddi4+0x152>
     9ce:	1bcb      	subs	r3, r1, r7
     9d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     9d4:	fa1f f887 	uxth.w	r8, r7
     9d8:	2101      	movs	r1, #1
     9da:	fbb3 fcfe 	udiv	ip, r3, lr
     9de:	0c25      	lsrs	r5, r4, #16
     9e0:	fb0e 331c 	mls	r3, lr, ip, r3
     9e4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     9e8:	fb08 f30c 	mul.w	r3, r8, ip
     9ec:	42ab      	cmp	r3, r5
     9ee:	d907      	bls.n	a00 <__udivmoddi4+0xe4>
     9f0:	197d      	adds	r5, r7, r5
     9f2:	f10c 30ff 	add.w	r0, ip, #4294967295
     9f6:	d202      	bcs.n	9fe <__udivmoddi4+0xe2>
     9f8:	42ab      	cmp	r3, r5
     9fa:	f200 80e7 	bhi.w	bcc <__udivmoddi4+0x2b0>
     9fe:	4684      	mov	ip, r0
     a00:	1aed      	subs	r5, r5, r3
     a02:	b2a3      	uxth	r3, r4
     a04:	fbb5 f0fe 	udiv	r0, r5, lr
     a08:	fb0e 5510 	mls	r5, lr, r0, r5
     a0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a10:	fb08 f800 	mul.w	r8, r8, r0
     a14:	45a0      	cmp	r8, r4
     a16:	d907      	bls.n	a28 <__udivmoddi4+0x10c>
     a18:	193c      	adds	r4, r7, r4
     a1a:	f100 33ff 	add.w	r3, r0, #4294967295
     a1e:	d202      	bcs.n	a26 <__udivmoddi4+0x10a>
     a20:	45a0      	cmp	r8, r4
     a22:	f200 80d7 	bhi.w	bd4 <__udivmoddi4+0x2b8>
     a26:	4618      	mov	r0, r3
     a28:	eba4 0408 	sub.w	r4, r4, r8
     a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a30:	e7c0      	b.n	9b4 <__udivmoddi4+0x98>
     a32:	428b      	cmp	r3, r1
     a34:	d908      	bls.n	a48 <__udivmoddi4+0x12c>
     a36:	2e00      	cmp	r6, #0
     a38:	f000 80af 	beq.w	b9a <__udivmoddi4+0x27e>
     a3c:	2100      	movs	r1, #0
     a3e:	e9c6 0500 	strd	r0, r5, [r6]
     a42:	4608      	mov	r0, r1
     a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a48:	fab3 f183 	clz	r1, r3
     a4c:	2900      	cmp	r1, #0
     a4e:	d14b      	bne.n	ae8 <__udivmoddi4+0x1cc>
     a50:	42ab      	cmp	r3, r5
     a52:	d302      	bcc.n	a5a <__udivmoddi4+0x13e>
     a54:	4282      	cmp	r2, r0
     a56:	f200 80b7 	bhi.w	bc8 <__udivmoddi4+0x2ac>
     a5a:	1a84      	subs	r4, r0, r2
     a5c:	eb65 0303 	sbc.w	r3, r5, r3
     a60:	2001      	movs	r0, #1
     a62:	469e      	mov	lr, r3
     a64:	2e00      	cmp	r6, #0
     a66:	d0aa      	beq.n	9be <__udivmoddi4+0xa2>
     a68:	e9c6 4e00 	strd	r4, lr, [r6]
     a6c:	e7a7      	b.n	9be <__udivmoddi4+0xa2>
     a6e:	f1c2 0c20 	rsb	ip, r2, #32
     a72:	fa01 f302 	lsl.w	r3, r1, r2
     a76:	4097      	lsls	r7, r2
     a78:	fa20 f00c 	lsr.w	r0, r0, ip
     a7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a80:	fa21 fc0c 	lsr.w	ip, r1, ip
     a84:	4318      	orrs	r0, r3
     a86:	fbbc f1fe 	udiv	r1, ip, lr
     a8a:	0c05      	lsrs	r5, r0, #16
     a8c:	fb0e cc11 	mls	ip, lr, r1, ip
     a90:	fa1f f887 	uxth.w	r8, r7
     a94:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     a98:	fb01 f308 	mul.w	r3, r1, r8
     a9c:	42ab      	cmp	r3, r5
     a9e:	fa04 f402 	lsl.w	r4, r4, r2
     aa2:	d909      	bls.n	ab8 <__udivmoddi4+0x19c>
     aa4:	197d      	adds	r5, r7, r5
     aa6:	f101 3cff 	add.w	ip, r1, #4294967295
     aaa:	f080 808b 	bcs.w	bc4 <__udivmoddi4+0x2a8>
     aae:	42ab      	cmp	r3, r5
     ab0:	f240 8088 	bls.w	bc4 <__udivmoddi4+0x2a8>
     ab4:	3902      	subs	r1, #2
     ab6:	443d      	add	r5, r7
     ab8:	1aeb      	subs	r3, r5, r3
     aba:	b285      	uxth	r5, r0
     abc:	fbb3 f0fe 	udiv	r0, r3, lr
     ac0:	fb0e 3310 	mls	r3, lr, r0, r3
     ac4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     ac8:	fb00 f308 	mul.w	r3, r0, r8
     acc:	42ab      	cmp	r3, r5
     ace:	d907      	bls.n	ae0 <__udivmoddi4+0x1c4>
     ad0:	197d      	adds	r5, r7, r5
     ad2:	f100 3cff 	add.w	ip, r0, #4294967295
     ad6:	d271      	bcs.n	bbc <__udivmoddi4+0x2a0>
     ad8:	42ab      	cmp	r3, r5
     ada:	d96f      	bls.n	bbc <__udivmoddi4+0x2a0>
     adc:	3802      	subs	r0, #2
     ade:	443d      	add	r5, r7
     ae0:	1aeb      	subs	r3, r5, r3
     ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     ae6:	e778      	b.n	9da <__udivmoddi4+0xbe>
     ae8:	f1c1 0c20 	rsb	ip, r1, #32
     aec:	408b      	lsls	r3, r1
     aee:	fa22 f70c 	lsr.w	r7, r2, ip
     af2:	431f      	orrs	r7, r3
     af4:	fa20 f40c 	lsr.w	r4, r0, ip
     af8:	fa05 f301 	lsl.w	r3, r5, r1
     afc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b00:	fa25 f50c 	lsr.w	r5, r5, ip
     b04:	431c      	orrs	r4, r3
     b06:	0c23      	lsrs	r3, r4, #16
     b08:	fbb5 f9fe 	udiv	r9, r5, lr
     b0c:	fa1f f887 	uxth.w	r8, r7
     b10:	fb0e 5519 	mls	r5, lr, r9, r5
     b14:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b18:	fb09 fa08 	mul.w	sl, r9, r8
     b1c:	45aa      	cmp	sl, r5
     b1e:	fa02 f201 	lsl.w	r2, r2, r1
     b22:	fa00 f301 	lsl.w	r3, r0, r1
     b26:	d908      	bls.n	b3a <__udivmoddi4+0x21e>
     b28:	197d      	adds	r5, r7, r5
     b2a:	f109 30ff 	add.w	r0, r9, #4294967295
     b2e:	d247      	bcs.n	bc0 <__udivmoddi4+0x2a4>
     b30:	45aa      	cmp	sl, r5
     b32:	d945      	bls.n	bc0 <__udivmoddi4+0x2a4>
     b34:	f1a9 0902 	sub.w	r9, r9, #2
     b38:	443d      	add	r5, r7
     b3a:	eba5 050a 	sub.w	r5, r5, sl
     b3e:	b2a4      	uxth	r4, r4
     b40:	fbb5 f0fe 	udiv	r0, r5, lr
     b44:	fb0e 5510 	mls	r5, lr, r0, r5
     b48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b4c:	fb00 f808 	mul.w	r8, r0, r8
     b50:	45a0      	cmp	r8, r4
     b52:	d907      	bls.n	b64 <__udivmoddi4+0x248>
     b54:	193c      	adds	r4, r7, r4
     b56:	f100 35ff 	add.w	r5, r0, #4294967295
     b5a:	d22d      	bcs.n	bb8 <__udivmoddi4+0x29c>
     b5c:	45a0      	cmp	r8, r4
     b5e:	d92b      	bls.n	bb8 <__udivmoddi4+0x29c>
     b60:	3802      	subs	r0, #2
     b62:	443c      	add	r4, r7
     b64:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     b68:	eba4 0408 	sub.w	r4, r4, r8
     b6c:	fba0 8902 	umull	r8, r9, r0, r2
     b70:	454c      	cmp	r4, r9
     b72:	46c6      	mov	lr, r8
     b74:	464d      	mov	r5, r9
     b76:	d319      	bcc.n	bac <__udivmoddi4+0x290>
     b78:	d016      	beq.n	ba8 <__udivmoddi4+0x28c>
     b7a:	b15e      	cbz	r6, b94 <__udivmoddi4+0x278>
     b7c:	ebb3 020e 	subs.w	r2, r3, lr
     b80:	eb64 0405 	sbc.w	r4, r4, r5
     b84:	fa04 fc0c 	lsl.w	ip, r4, ip
     b88:	40ca      	lsrs	r2, r1
     b8a:	ea4c 0202 	orr.w	r2, ip, r2
     b8e:	40cc      	lsrs	r4, r1
     b90:	e9c6 2400 	strd	r2, r4, [r6]
     b94:	2100      	movs	r1, #0
     b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b9a:	4631      	mov	r1, r6
     b9c:	4630      	mov	r0, r6
     b9e:	e70e      	b.n	9be <__udivmoddi4+0xa2>
     ba0:	46ac      	mov	ip, r5
     ba2:	e6ed      	b.n	980 <__udivmoddi4+0x64>
     ba4:	4618      	mov	r0, r3
     ba6:	e701      	b.n	9ac <__udivmoddi4+0x90>
     ba8:	4543      	cmp	r3, r8
     baa:	d2e6      	bcs.n	b7a <__udivmoddi4+0x25e>
     bac:	ebb8 0e02 	subs.w	lr, r8, r2
     bb0:	eb69 0507 	sbc.w	r5, r9, r7
     bb4:	3801      	subs	r0, #1
     bb6:	e7e0      	b.n	b7a <__udivmoddi4+0x25e>
     bb8:	4628      	mov	r0, r5
     bba:	e7d3      	b.n	b64 <__udivmoddi4+0x248>
     bbc:	4660      	mov	r0, ip
     bbe:	e78f      	b.n	ae0 <__udivmoddi4+0x1c4>
     bc0:	4681      	mov	r9, r0
     bc2:	e7ba      	b.n	b3a <__udivmoddi4+0x21e>
     bc4:	4661      	mov	r1, ip
     bc6:	e777      	b.n	ab8 <__udivmoddi4+0x19c>
     bc8:	4608      	mov	r0, r1
     bca:	e74b      	b.n	a64 <__udivmoddi4+0x148>
     bcc:	f1ac 0c02 	sub.w	ip, ip, #2
     bd0:	443d      	add	r5, r7
     bd2:	e715      	b.n	a00 <__udivmoddi4+0xe4>
     bd4:	3802      	subs	r0, #2
     bd6:	443c      	add	r4, r7
     bd8:	e726      	b.n	a28 <__udivmoddi4+0x10c>
     bda:	bf00      	nop

00000bdc <__aeabi_idiv0>:
     bdc:	4770      	bx	lr
     bde:	bf00      	nop

00000be0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     be2:	4615      	mov	r5, r2
     be4:	4a0a      	ldr	r2, [pc, #40]	; (c10 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
     be6:	461c      	mov	r4, r3
     be8:	6856      	ldr	r6, [r2, #4]
     bea:	b12e      	cbz	r6, bf8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     bec:	b001      	add	sp, #4
     bee:	462a      	mov	r2, r5
     bf0:	46b4      	mov	ip, r6
     bf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     bf6:	4760      	bx	ip
     bf8:	2000      	movs	r0, #0
     bfa:	f88d 0000 	strb.w	r0, [sp]
     bfe:	4668      	mov	r0, sp
     c00:	f00b ff36 	bl	ca70 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     c04:	f89d 0000 	ldrb.w	r0, [sp]
     c08:	1a28      	subs	r0, r5, r0
     c0a:	7020      	strb	r0, [r4, #0]
     c0c:	2000      	movs	r0, #0
     c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c10:	20000000 	.word	0x20000000

00000c14 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     c14:	4801      	ldr	r0, [pc, #4]	; (c1c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     c16:	7800      	ldrb	r0, [r0, #0]
     c18:	4770      	bx	lr
     c1a:	0000      	.short	0x0000
     c1c:	20000008 	.word	0x20000008

00000c20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     c20:	4905      	ldr	r1, [pc, #20]	; (c38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     c22:	780a      	ldrb	r2, [r1, #0]
     c24:	4290      	cmp	r0, r2
     c26:	d301      	bcc.n	c2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     c28:	2000      	movs	r0, #0
     c2a:	4770      	bx	lr
     c2c:	6849      	ldr	r1, [r1, #4]
     c2e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     c32:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     c36:	4770      	bx	lr
     c38:	20000008 	.word	0x20000008
     c3c:	b570      	push	{r4, r5, r6, lr}
     c3e:	4605      	mov	r5, r0
     c40:	2a20      	cmp	r2, #32
     c42:	d027      	beq.n	c94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     c44:	4819      	ldr	r0, [pc, #100]	; (cac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     c46:	4c1a      	ldr	r4, [pc, #104]	; (cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     c48:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     c4c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     c50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     c54:	2920      	cmp	r1, #32
     c56:	d022      	beq.n	c9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     c58:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     c5c:	7840      	ldrb	r0, [r0, #1]
     c5e:	784c      	ldrb	r4, [r1, #1]
     c60:	7048      	strb	r0, [r1, #1]
     c62:	4620      	mov	r0, r4
     c64:	4601      	mov	r1, r0
     c66:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     c6a:	4291      	cmp	r1, r2
     c6c:	7005      	strb	r5, [r0, #0]
     c6e:	7840      	ldrb	r0, [r0, #1]
     c70:	d1f8      	bne.n	c64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     c72:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     c76:	2a20      	cmp	r2, #32
     c78:	bf1a      	itte	ne
     c7a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     c7e:	7054      	strbne	r4, [r2, #1]
     c80:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     c84:	2220      	movs	r2, #32
     c86:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     c8a:	f88c 2001 	strb.w	r2, [ip, #1]
     c8e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     c92:	bd70      	pop	{r4, r5, r6, pc}
     c94:	f240 217e 	movw	r1, #638	; 0x27e
     c98:	2070      	movs	r0, #112	; 0x70
     c9a:	f003 f987 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c9e:	f893 4020 	ldrb.w	r4, [r3, #32]
     ca2:	7840      	ldrb	r0, [r0, #1]
     ca4:	f883 0020 	strb.w	r0, [r3, #32]
     ca8:	e7db      	b.n	c62 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     caa:	0000      	.short	0x0000
     cac:	20000d24 	.word	0x20000d24
     cb0:	20000da4 	.word	0x20000da4
     cb4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cb8:	b085      	sub	sp, #20
     cba:	4615      	mov	r5, r2
     cbc:	460c      	mov	r4, r1
     cbe:	f002 f915 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     cc2:	4428      	add	r0, r5
     cc4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     cc8:	9002      	str	r0, [sp, #8]
     cca:	6821      	ldr	r1, [r4, #0]
     ccc:	1a08      	subs	r0, r1, r0
     cce:	0200      	lsls	r0, r0, #8
     cd0:	17c1      	asrs	r1, r0, #31
     cd2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     cd6:	1200      	asrs	r0, r0, #8
     cd8:	2800      	cmp	r0, #0
     cda:	f300 80d5 	bgt.w	e88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
     cde:	48ac      	ldr	r0, [pc, #688]	; (f90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
     ce0:	9f08      	ldr	r7, [sp, #32]
     ce2:	4eac      	ldr	r6, [pc, #688]	; (f94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
     ce4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     ce8:	9003      	str	r0, [sp, #12]
     cea:	f890 5020 	ldrb.w	r5, [r0, #32]
     cee:	2020      	movs	r0, #32
     cf0:	46e9      	mov	r9, sp
     cf2:	f10d 0804 	add.w	r8, sp, #4
     cf6:	f88d 0000 	strb.w	r0, [sp]
     cfa:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     cfe:	2d20      	cmp	r5, #32
     d00:	bf18      	it	ne
     d02:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     d06:	d025      	beq.n	d54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     d08:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     d0c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     d10:	6822      	ldr	r2, [r4, #0]
     d12:	68c1      	ldr	r1, [r0, #12]
     d14:	1a51      	subs	r1, r2, r1
     d16:	0209      	lsls	r1, r1, #8
     d18:	17ca      	asrs	r2, r1, #31
     d1a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     d1e:	3008      	adds	r0, #8
     d20:	1209      	asrs	r1, r1, #8
     d22:	d417      	bmi.n	d54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     d24:	8961      	ldrh	r1, [r4, #10]
     d26:	b171      	cbz	r1, d46 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
     d28:	8941      	ldrh	r1, [r0, #10]
     d2a:	b961      	cbnz	r1, d46 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
     d2c:	f000 fdb4 	bl	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
     d30:	f002 f8dc 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     d34:	6821      	ldr	r1, [r4, #0]
     d36:	1a08      	subs	r0, r1, r0
     d38:	0200      	lsls	r0, r0, #8
     d3a:	17c1      	asrs	r1, r0, #31
     d3c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     d40:	1200      	asrs	r0, r0, #8
     d42:	2833      	cmp	r0, #51	; 0x33
     d44:	db06      	blt.n	d54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     d46:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d4a:	f889 5000 	strb.w	r5, [r9]
     d4e:	7845      	ldrb	r5, [r0, #1]
     d50:	2d20      	cmp	r5, #32
     d52:	d1d9      	bne.n	d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
     d54:	f899 0000 	ldrb.w	r0, [r9]
     d58:	f888 0000 	strb.w	r0, [r8]
     d5c:	46a1      	mov	r9, r4
     d5e:	2d20      	cmp	r5, #32
     d60:	bf1c      	itt	ne
     d62:	488d      	ldrne	r0, [pc, #564]	; (f98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     d64:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     d68:	f000 810e 	beq.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     d6c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     d70:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     d74:	f8d9 2004 	ldr.w	r2, [r9, #4]
     d78:	f8da 1008 	ldr.w	r1, [sl, #8]
     d7c:	4648      	mov	r0, r9
     d7e:	1a89      	subs	r1, r1, r2
     d80:	0209      	lsls	r1, r1, #8
     d82:	17ca      	asrs	r2, r1, #31
     d84:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     d88:	f10a 0708 	add.w	r7, sl, #8
     d8c:	1209      	asrs	r1, r1, #8
     d8e:	d415      	bmi.n	dbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
     d90:	8979      	ldrh	r1, [r7, #10]
     d92:	2900      	cmp	r1, #0
     d94:	f000 80f8 	beq.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     d98:	8941      	ldrh	r1, [r0, #10]
     d9a:	2900      	cmp	r1, #0
     d9c:	f040 80f4 	bne.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     da0:	f000 fd7a 	bl	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
     da4:	f002 f8a2 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     da8:	6839      	ldr	r1, [r7, #0]
     daa:	1a08      	subs	r0, r1, r0
     dac:	0200      	lsls	r0, r0, #8
     dae:	17c1      	asrs	r1, r0, #31
     db0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     db4:	1200      	asrs	r0, r0, #8
     db6:	2833      	cmp	r0, #51	; 0x33
     db8:	f280 80e6 	bge.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     dbc:	f888 5000 	strb.w	r5, [r8]
     dc0:	f89a 1014 	ldrb.w	r1, [sl, #20]
     dc4:	f899 000c 	ldrb.w	r0, [r9, #12]
     dc8:	4281      	cmp	r1, r0
     dca:	d906      	bls.n	dda <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
     dcc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     dd0:	7845      	ldrb	r5, [r0, #1]
     dd2:	2d20      	cmp	r5, #32
     dd4:	d1ca      	bne.n	d6c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
     dd6:	f000 b8d7 	b.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     dda:	f89d 0004 	ldrb.w	r0, [sp, #4]
     dde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     de2:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     de6:	8a68      	ldrh	r0, [r5, #18]
     de8:	68ef      	ldr	r7, [r5, #12]
     dea:	2800      	cmp	r0, #0
     dec:	d143      	bne.n	e76 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
     dee:	8960      	ldrh	r0, [r4, #10]
     df0:	b3e8      	cbz	r0, e6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
     df2:	68a8      	ldr	r0, [r5, #8]
     df4:	f00b fe5c 	bl	cab0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     df8:	8a69      	ldrh	r1, [r5, #18]
     dfa:	7c2a      	ldrb	r2, [r5, #16]
     dfc:	4b67      	ldr	r3, [pc, #412]	; (f9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
     dfe:	4411      	add	r1, r2
     e00:	1c49      	adds	r1, r1, #1
     e02:	1842      	adds	r2, r0, r1
     e04:	4298      	cmp	r0, r3
     e06:	d904      	bls.n	e12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
     e08:	f240 6109 	movw	r1, #1545	; 0x609
     e0c:	2070      	movs	r0, #112	; 0x70
     e0e:	f003 f8cd 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e12:	4863      	ldr	r0, [pc, #396]	; (fa0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
     e14:	4281      	cmp	r1, r0
     e16:	dd04      	ble.n	e22 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
     e18:	f240 610a 	movw	r1, #1546	; 0x60a
     e1c:	2070      	movs	r0, #112	; 0x70
     e1e:	f003 f8c5 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e22:	4860      	ldr	r0, [pc, #384]	; (fa4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
     e24:	4281      	cmp	r1, r0
     e26:	da04      	bge.n	e32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
     e28:	f240 610b 	movw	r1, #1547	; 0x60b
     e2c:	2070      	movs	r0, #112	; 0x70
     e2e:	f003 f8bd 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e32:	485d      	ldr	r0, [pc, #372]	; (fa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
     e34:	4290      	cmp	r0, r2
     e36:	bfdc      	itt	le
     e38:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     e3c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     e40:	dd05      	ble.n	e4e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
     e42:	2a00      	cmp	r2, #0
     e44:	bfbc      	itt	lt
     e46:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     e4a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     e4e:	4610      	mov	r0, r2
     e50:	f002 f84c 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e54:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e58:	1a78      	subs	r0, r7, r1
     e5a:	0200      	lsls	r0, r0, #8
     e5c:	17c2      	asrs	r2, r0, #31
     e5e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e62:	1200      	asrs	r0, r0, #8
     e64:	2833      	cmp	r0, #51	; 0x33
     e66:	bfb8      	it	lt
     e68:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     e6c:	e000      	b.n	e70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
     e6e:	e002      	b.n	e76 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
     e70:	bfb8      	it	lt
     e72:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     e76:	9802      	ldr	r0, [sp, #8]
     e78:	1a38      	subs	r0, r7, r0
     e7a:	0200      	lsls	r0, r0, #8
     e7c:	17c1      	asrs	r1, r0, #31
     e7e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     e82:	1200      	asrs	r0, r0, #8
     e84:	2800      	cmp	r0, #0
     e86:	dd03      	ble.n	e90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
     e88:	b009      	add	sp, #36	; 0x24
     e8a:	2000      	movs	r0, #0
     e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e90:	e9d4 1000 	ldrd	r1, r0, [r4]
     e94:	1a40      	subs	r0, r0, r1
     e96:	4438      	add	r0, r7
     e98:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     e9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ea0:	e9c4 1000 	strd	r1, r0, [r4]
     ea4:	9803      	ldr	r0, [sp, #12]
     ea6:	f8dd 8020 	ldr.w	r8, [sp, #32]
     eaa:	466f      	mov	r7, sp
     eac:	f890 5020 	ldrb.w	r5, [r0, #32]
     eb0:	2020      	movs	r0, #32
     eb2:	f10d 0a04 	add.w	sl, sp, #4
     eb6:	f88d 0000 	strb.w	r0, [sp]
     eba:	2d20      	cmp	r5, #32
     ebc:	bf1c      	itt	ne
     ebe:	4836      	ldrne	r0, [pc, #216]	; (f98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     ec0:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     ec4:	d025      	beq.n	f12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     ec6:	bf00      	nop
     ec8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     ecc:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     ed0:	6822      	ldr	r2, [r4, #0]
     ed2:	68c1      	ldr	r1, [r0, #12]
     ed4:	1a51      	subs	r1, r2, r1
     ed6:	0209      	lsls	r1, r1, #8
     ed8:	17ca      	asrs	r2, r1, #31
     eda:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     ede:	3008      	adds	r0, #8
     ee0:	1209      	asrs	r1, r1, #8
     ee2:	d416      	bmi.n	f12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     ee4:	8961      	ldrh	r1, [r4, #10]
     ee6:	b171      	cbz	r1, f06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
     ee8:	8941      	ldrh	r1, [r0, #10]
     eea:	b961      	cbnz	r1, f06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
     eec:	f000 fcd4 	bl	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
     ef0:	f001 fffc 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ef4:	6821      	ldr	r1, [r4, #0]
     ef6:	1a08      	subs	r0, r1, r0
     ef8:	0200      	lsls	r0, r0, #8
     efa:	17c1      	asrs	r1, r0, #31
     efc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     f00:	1200      	asrs	r0, r0, #8
     f02:	2833      	cmp	r0, #51	; 0x33
     f04:	db05      	blt.n	f12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     f06:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     f0a:	703d      	strb	r5, [r7, #0]
     f0c:	7845      	ldrb	r5, [r0, #1]
     f0e:	2d20      	cmp	r5, #32
     f10:	d1da      	bne.n	ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
     f12:	7838      	ldrb	r0, [r7, #0]
     f14:	f88a 0000 	strb.w	r0, [sl]
     f18:	4627      	mov	r7, r4
     f1a:	2d20      	cmp	r5, #32
     f1c:	bf1c      	itt	ne
     f1e:	481e      	ldrne	r0, [pc, #120]	; (f98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     f20:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     f24:	d030      	beq.n	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f26:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     f2a:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     f2e:	6879      	ldr	r1, [r7, #4]
     f30:	f8d9 2008 	ldr.w	r2, [r9, #8]
     f34:	4638      	mov	r0, r7
     f36:	1a51      	subs	r1, r2, r1
     f38:	0209      	lsls	r1, r1, #8
     f3a:	17ca      	asrs	r2, r1, #31
     f3c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     f40:	f109 0808 	add.w	r8, r9, #8
     f44:	1209      	asrs	r1, r1, #8
     f46:	d412      	bmi.n	f6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
     f48:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     f4c:	b1e1      	cbz	r1, f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f4e:	8941      	ldrh	r1, [r0, #10]
     f50:	b9d1      	cbnz	r1, f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f52:	f000 fca1 	bl	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
     f56:	f001 ffc9 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f5a:	f8d8 1000 	ldr.w	r1, [r8]
     f5e:	1a08      	subs	r0, r1, r0
     f60:	0200      	lsls	r0, r0, #8
     f62:	17c1      	asrs	r1, r0, #31
     f64:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     f68:	1200      	asrs	r0, r0, #8
     f6a:	2833      	cmp	r0, #51	; 0x33
     f6c:	da0c      	bge.n	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f6e:	f88a 5000 	strb.w	r5, [sl]
     f72:	f899 0014 	ldrb.w	r0, [r9, #20]
     f76:	7b39      	ldrb	r1, [r7, #12]
     f78:	4288      	cmp	r0, r1
     f7a:	f67f af2e 	bls.w	dda <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
     f7e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     f82:	7845      	ldrb	r5, [r0, #1]
     f84:	2d20      	cmp	r5, #32
     f86:	d1ce      	bne.n	f26 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
     f88:	b009      	add	sp, #36	; 0x24
     f8a:	2001      	movs	r0, #1
     f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f90:	20000da4 	.word	0x20000da4
     f94:	20000a24 	.word	0x20000a24
     f98:	20000d24 	.word	0x20000d24
     f9c:	1e847fff 	.word	0x1e847fff
     fa0:	07a12000 	.word	0x07a12000
     fa4:	f85ee000 	.word	0xf85ee000
     fa8:	1e848000 	.word	0x1e848000
     fac:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fb0:	4604      	mov	r4, r0
     fb2:	483c      	ldr	r0, [pc, #240]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
     fb4:	460e      	mov	r6, r1
     fb6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     fba:	4f3b      	ldr	r7, [pc, #236]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     fbc:	f890 5020 	ldrb.w	r5, [r0, #32]
     fc0:	2020      	movs	r0, #32
     fc2:	4698      	mov	r8, r3
     fc4:	4692      	mov	sl, r2
     fc6:	7010      	strb	r0, [r2, #0]
     fc8:	f507 7940 	add.w	r9, r7, #768	; 0x300
     fcc:	2d20      	cmp	r5, #32
     fce:	bf18      	it	ne
     fd0:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     fd4:	d028      	beq.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     fd6:	bf00      	nop
     fd8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     fdc:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     fe0:	f100 0108 	add.w	r1, r0, #8
     fe4:	68c0      	ldr	r0, [r0, #12]
     fe6:	6822      	ldr	r2, [r4, #0]
     fe8:	1a10      	subs	r0, r2, r0
     fea:	0200      	lsls	r0, r0, #8
     fec:	17c2      	asrs	r2, r0, #31
     fee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ff2:	1200      	asrs	r0, r0, #8
     ff4:	d418      	bmi.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     ff6:	8960      	ldrh	r0, [r4, #10]
     ff8:	b178      	cbz	r0, 101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
     ffa:	8948      	ldrh	r0, [r1, #10]
     ffc:	b968      	cbnz	r0, 101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
     ffe:	4608      	mov	r0, r1
    1000:	f000 fc4a 	bl	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
    1004:	f001 ff72 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1008:	6821      	ldr	r1, [r4, #0]
    100a:	1a08      	subs	r0, r1, r0
    100c:	0200      	lsls	r0, r0, #8
    100e:	17c1      	asrs	r1, r0, #31
    1010:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1014:	1200      	asrs	r0, r0, #8
    1016:	2833      	cmp	r0, #51	; 0x33
    1018:	db06      	blt.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    101a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    101e:	f88a 5000 	strb.w	r5, [sl]
    1022:	7845      	ldrb	r5, [r0, #1]
    1024:	2d20      	cmp	r5, #32
    1026:	d1d7      	bne.n	fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    1028:	f89a 0000 	ldrb.w	r0, [sl]
    102c:	f888 0000 	strb.w	r0, [r8]
    1030:	2d20      	cmp	r5, #32
    1032:	bf18      	it	ne
    1034:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1038:	d030      	beq.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    103a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    103e:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1042:	6861      	ldr	r1, [r4, #4]
    1044:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1048:	4620      	mov	r0, r4
    104a:	1a51      	subs	r1, r2, r1
    104c:	0209      	lsls	r1, r1, #8
    104e:	17ca      	asrs	r2, r1, #31
    1050:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1054:	f109 0608 	add.w	r6, r9, #8
    1058:	1209      	asrs	r1, r1, #8
    105a:	d410      	bmi.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
    105c:	8971      	ldrh	r1, [r6, #10]
    105e:	b1e9      	cbz	r1, 109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    1060:	8941      	ldrh	r1, [r0, #10]
    1062:	b9d9      	cbnz	r1, 109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    1064:	f000 fc18 	bl	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
    1068:	f001 ff40 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    106c:	6831      	ldr	r1, [r6, #0]
    106e:	1a08      	subs	r0, r1, r0
    1070:	0200      	lsls	r0, r0, #8
    1072:	17c1      	asrs	r1, r0, #31
    1074:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1078:	1200      	asrs	r0, r0, #8
    107a:	2833      	cmp	r0, #51	; 0x33
    107c:	da0e      	bge.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    107e:	f888 5000 	strb.w	r5, [r8]
    1082:	f899 0014 	ldrb.w	r0, [r9, #20]
    1086:	7b21      	ldrb	r1, [r4, #12]
    1088:	4288      	cmp	r0, r1
    108a:	d802      	bhi.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
    108c:	2000      	movs	r0, #0
    108e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1092:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    1096:	7845      	ldrb	r5, [r0, #1]
    1098:	2d20      	cmp	r5, #32
    109a:	d1ce      	bne.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    109c:	2001      	movs	r0, #1
    109e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    10a2:	0000      	.short	0x0000
    10a4:	20000da4 	.word	0x20000da4
    10a8:	20000a24 	.word	0x20000a24
    10ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b0:	b098      	sub	sp, #96	; 0x60
    10b2:	4616      	mov	r6, r2
    10b4:	460d      	mov	r5, r1
    10b6:	f04f 0800 	mov.w	r8, #0
    10ba:	f04f 0b01 	mov.w	fp, #1
    10be:	f002 f997 	bl	33f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    10c2:	4604      	mov	r4, r0
    10c4:	2d01      	cmp	r5, #1
    10c6:	bf18      	it	ne
    10c8:	2d02      	cmpne	r5, #2
    10ca:	d005      	beq.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    10cc:	f640 1194 	movw	r1, #2452	; 0x994
    10d0:	f04f 0070 	mov.w	r0, #112	; 0x70
    10d4:	f002 ff6a 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d8:	49f9      	ldr	r1, [pc, #996]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    10da:	2001      	movs	r0, #1
    10dc:	6008      	str	r0, [r1, #0]
    10de:	49f9      	ldr	r1, [pc, #996]	; (14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>)
    10e0:	6889      	ldr	r1, [r1, #8]
    10e2:	6008      	str	r0, [r1, #0]
    10e4:	2000      	movs	r0, #0
    10e6:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    10ea:	900c      	str	r0, [sp, #48]	; 0x30
    10ec:	1e40      	subs	r0, r0, #1
    10ee:	900e      	str	r0, [sp, #56]	; 0x38
    10f0:	49f5      	ldr	r1, [pc, #980]	; (14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>)
    10f2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    10f6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    10fa:	3308      	adds	r3, #8
    10fc:	af0f      	add	r7, sp, #60	; 0x3c
    10fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1100:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1104:	a80f      	add	r0, sp, #60	; 0x3c
    1106:	f000 fbc7 	bl	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
    110a:	900d      	str	r0, [sp, #52]	; 0x34
    110c:	48ee      	ldr	r0, [pc, #952]	; (14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>)
    110e:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    1112:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1116:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    111a:	f1b9 0f00 	cmp.w	r9, #0
    111e:	bf14      	ite	ne
    1120:	f04f 0a01 	movne.w	sl, #1
    1124:	f04f 0a00 	moveq.w	sl, #0
    1128:	980f      	ldr	r0, [sp, #60]	; 0x3c
    112a:	9014      	str	r0, [sp, #80]	; 0x50
    112c:	f1ba 0f00 	cmp.w	sl, #0
    1130:	d009      	beq.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    1132:	48e6      	ldr	r0, [pc, #920]	; (14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>)
    1134:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1138:	b928      	cbnz	r0, 1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    113a:	f002 febf 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    113e:	2800      	cmp	r0, #0
    1140:	bf08      	it	eq
    1142:	2701      	moveq	r7, #1
    1144:	d000      	beq.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    1146:	2700      	movs	r7, #0
    1148:	48e1      	ldr	r0, [pc, #900]	; (14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>)
    114a:	2200      	movs	r2, #0
    114c:	9215      	str	r2, [sp, #84]	; 0x54
    114e:	7800      	ldrb	r0, [r0, #0]
    1150:	4616      	mov	r6, r2
    1152:	2801      	cmp	r0, #1
    1154:	bf18      	it	ne
    1156:	2803      	cmpne	r0, #3
    1158:	d140      	bne.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    115a:	48dd      	ldr	r0, [pc, #884]	; (14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>)
    115c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    1160:	eba8 0009 	sub.w	r0, r8, r9
    1164:	9015      	str	r0, [sp, #84]	; 0x54
    1166:	45c8      	cmp	r8, r9
    1168:	d938      	bls.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    116a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    116c:	ea6f 0108 	mvn.w	r1, r8
    1170:	f8df e360 	ldr.w	lr, [pc, #864]	; 14d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c>
    1174:	1858      	adds	r0, r3, r1
    1176:	f10d 0c0c 	add.w	ip, sp, #12
    117a:	aa17      	add	r2, sp, #92	; 0x5c
    117c:	4573      	cmp	r3, lr
    117e:	d904      	bls.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    1180:	f240 6109 	movw	r1, #1545	; 0x609
    1184:	2070      	movs	r0, #112	; 0x70
    1186:	f002 ff11 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    118a:	4bd3      	ldr	r3, [pc, #844]	; (14d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x150>)
    118c:	4299      	cmp	r1, r3
    118e:	dd04      	ble.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
    1190:	f240 610a 	movw	r1, #1546	; 0x60a
    1194:	2070      	movs	r0, #112	; 0x70
    1196:	f002 ff09 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    119a:	4bd0      	ldr	r3, [pc, #832]	; (14dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x154>)
    119c:	4299      	cmp	r1, r3
    119e:	da04      	bge.n	11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
    11a0:	f240 610b 	movw	r1, #1547	; 0x60b
    11a4:	2070      	movs	r0, #112	; 0x70
    11a6:	f002 ff01 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11aa:	49cd      	ldr	r1, [pc, #820]	; (14e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x158>)
    11ac:	4281      	cmp	r1, r0
    11ae:	bfdc      	itt	le
    11b0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    11b4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    11b8:	dd05      	ble.n	11c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c6>
    11ba:	2800      	cmp	r0, #0
    11bc:	bfbc      	itt	lt
    11be:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    11c2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    11c6:	4661      	mov	r1, ip
    11c8:	f001 feac 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    11cc:	9803      	ldr	r0, [sp, #12]
    11ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
    11d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    11d4:	9003      	str	r0, [sp, #12]
    11d6:	1a08      	subs	r0, r1, r0
    11d8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    11dc:	2f00      	cmp	r7, #0
    11de:	bf18      	it	ne
    11e0:	2632      	movne	r6, #50	; 0x32
    11e2:	d104      	bne.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    11e4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    11e8:	2800      	cmp	r0, #0
    11ea:	bf18      	it	ne
    11ec:	2602      	movne	r6, #2
    11ee:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11f2:	d008      	beq.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
    11f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    11f6:	1b00      	subs	r0, r0, r4
    11f8:	0200      	lsls	r0, r0, #8
    11fa:	17c1      	asrs	r1, r0, #31
    11fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1200:	1200      	asrs	r0, r0, #8
    1202:	2801      	cmp	r0, #1
    1204:	da02      	bge.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    1206:	2004      	movs	r0, #4
    1208:	9918      	ldr	r1, [sp, #96]	; 0x60
    120a:	e00b      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    120c:	b147      	cbz	r7, 1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    120e:	48af      	ldr	r0, [pc, #700]	; (14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>)
    1210:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1214:	b120      	cbz	r0, 1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1216:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    121a:	1c06      	adds	r6, r0, #0
    121c:	bf18      	it	ne
    121e:	2602      	movne	r6, #2
    1220:	4621      	mov	r1, r4
    1222:	2001      	movs	r0, #1
    1224:	f1b9 0f00 	cmp.w	r9, #0
    1228:	d002      	beq.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    122a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    122c:	2b1e      	cmp	r3, #30
    122e:	da02      	bge.n	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
    1230:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1234:	b113      	cbz	r3, 123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1236:	f04f 0b00 	mov.w	fp, #0
    123a:	1e40      	subs	r0, r0, #1
    123c:	1983      	adds	r3, r0, r6
    123e:	48a4      	ldr	r0, [pc, #656]	; (14d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x148>)
    1240:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1244:	7800      	ldrb	r0, [r0, #0]
    1246:	9015      	str	r0, [sp, #84]	; 0x54
    1248:	980f      	ldr	r0, [sp, #60]	; 0x3c
    124a:	1a80      	subs	r0, r0, r2
    124c:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    1250:	ebac 0001 	sub.w	r0, ip, r1
    1254:	0200      	lsls	r0, r0, #8
    1256:	17c6      	asrs	r6, r0, #31
    1258:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    125c:	1200      	asrs	r0, r0, #8
    125e:	4298      	cmp	r0, r3
    1260:	db18      	blt.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1262:	2a00      	cmp	r2, #0
    1264:	bf18      	it	ne
    1266:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    126a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    126c:	9705      	str	r7, [sp, #20]
    126e:	2700      	movs	r7, #0
    1270:	f001 ffb6 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1274:	1a30      	subs	r0, r6, r0
    1276:	0200      	lsls	r0, r0, #8
    1278:	17c1      	asrs	r1, r0, #31
    127a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    127e:	1200      	asrs	r0, r0, #8
    1280:	283e      	cmp	r0, #62	; 0x3e
    1282:	da3f      	bge.n	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
    1284:	2d01      	cmp	r5, #1
    1286:	d020      	beq.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1288:	1e70      	subs	r0, r6, #1
    128a:	9905      	ldr	r1, [sp, #20]
    128c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1290:	b319      	cbz	r1, 12da <CONFIG_FPROTECT_BLOCK_SIZE+0x2da>
    1292:	e02d      	b.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
    1294:	b182      	cbz	r2, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    1296:	f1be 0f00 	cmp.w	lr, #0
    129a:	bf04      	itt	eq
    129c:	9815      	ldreq	r0, [sp, #84]	; 0x54
    129e:	2803      	cmpeq	r0, #3
    12a0:	d00a      	beq.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    12a2:	b927      	cbnz	r7, 12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
    12a4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    12a8:	2800      	cmp	r0, #0
    12aa:	bf18      	it	ne
    12ac:	1e9b      	subne	r3, r3, #2
    12ae:	2200      	movs	r2, #0
    12b0:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    12b4:	4690      	mov	r8, r2
    12b6:	e7c7      	b.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    12b8:	bb07      	cbnz	r7, 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    12ba:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    12be:	b1e8      	cbz	r0, 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    12c0:	2000      	movs	r0, #0
    12c2:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    12c6:	1e9b      	subs	r3, r3, #2
    12c8:	e7be      	b.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    12ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    12ce:	d120      	bne.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    12d0:	f640 110d 	movw	r1, #2317	; 0x90d
    12d4:	2070      	movs	r0, #112	; 0x70
    12d6:	f002 fe69 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12da:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    12de:	d007      	beq.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
    12e0:	1a21      	subs	r1, r4, r0
    12e2:	0209      	lsls	r1, r1, #8
    12e4:	17ca      	asrs	r2, r1, #31
    12e6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    12ea:	1209      	asrs	r1, r1, #8
    12ec:	2904      	cmp	r1, #4
    12ee:	dd03      	ble.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
    12f0:	4604      	mov	r4, r0
    12f2:	f001 ff7b 	bl	31ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    12f6:	e00c      	b.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    12f8:	2900      	cmp	r1, #0
    12fa:	dd0a      	ble.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    12fc:	b01b      	add	sp, #108	; 0x6c
    12fe:	2000      	movs	r0, #0
    1300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1304:	1e70      	subs	r0, r6, #1
    1306:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    130a:	4620      	mov	r0, r4
    130c:	f001 ff6e 	bl	31ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1310:	4657      	mov	r7, sl
    1312:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1316:	d024      	beq.n	1362 <CONFIG_FPROTECT_BLOCK_SIZE+0x362>
    1318:	980f      	ldr	r0, [sp, #60]	; 0x3c
    131a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    131c:	1b00      	subs	r0, r0, r4
    131e:	1b1b      	subs	r3, r3, r4
    1320:	4a70      	ldr	r2, [pc, #448]	; (14e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c>)
    1322:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1326:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    132a:	4583      	cmp	fp, r0
    132c:	bf98      	it	ls
    132e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1332:	d2e3      	bcs.n	12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    1334:	429a      	cmp	r2, r3
    1336:	d3e1      	bcc.n	12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    1338:	4620      	mov	r0, r4
    133a:	f00b fbb9 	bl	cab0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    133e:	4965      	ldr	r1, [pc, #404]	; (14d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c>)
    1340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1342:	1c4b      	adds	r3, r1, #1
    1344:	1a16      	subs	r6, r2, r0
    1346:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    134a:	bf24      	itt	cs
    134c:	eba0 0c02 	subcs.w	ip, r0, r2
    1350:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1354:	d310      	bcc.n	1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    1356:	42b1      	cmp	r1, r6
    1358:	d208      	bcs.n	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
    135a:	1a08      	subs	r0, r1, r0
    135c:	4410      	add	r0, r2
    135e:	1c46      	adds	r6, r0, #1
    1360:	e00a      	b.n	1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    1362:	f640 212d 	movw	r1, #2605	; 0xa2d
    1366:	2070      	movs	r0, #112	; 0x70
    1368:	f002 fe20 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    136c:	4561      	cmp	r1, ip
    136e:	d22c      	bcs.n	13ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42>
    1370:	1a89      	subs	r1, r1, r2
    1372:	4408      	add	r0, r1
    1374:	1c40      	adds	r0, r0, #1
    1376:	4246      	negs	r6, r0
    1378:	4854      	ldr	r0, [pc, #336]	; (14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>)
    137a:	7f80      	ldrb	r0, [r0, #30]
    137c:	b350      	cbz	r0, 13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    137e:	4628      	mov	r0, r5
    1380:	4645      	mov	r5, r8
    1382:	f04f 0b00 	mov.w	fp, #0
    1386:	46d8      	mov	r8, fp
    1388:	2801      	cmp	r0, #1
    138a:	d005      	beq.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
    138c:	2002      	movs	r0, #2
    138e:	f002 f985 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1392:	2001      	movs	r0, #1
    1394:	f002 f982 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1398:	45a9      	cmp	r9, r5
    139a:	d227      	bcs.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    139c:	eba6 0105 	sub.w	r1, r6, r5
    13a0:	f04f 0301 	mov.w	r3, #1
    13a4:	f04f 0203 	mov.w	r2, #3
    13a8:	f04f 0002 	mov.w	r0, #2
    13ac:	f002 f8a2 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    13b0:	2800      	cmp	r0, #0
    13b2:	bf08      	it	eq
    13b4:	f04f 0801 	moveq.w	r8, #1
    13b8:	f1b9 0f00 	cmp.w	r9, #0
    13bc:	d030      	beq.n	1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    13be:	2301      	movs	r3, #1
    13c0:	eba6 0109 	sub.w	r1, r6, r9
    13c4:	2203      	movs	r2, #3
    13c6:	4618      	mov	r0, r3
    13c8:	e01e      	b.n	1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>
    13ca:	f640 310c 	movw	r1, #2828	; 0xb0c
    13ce:	2070      	movs	r0, #112	; 0x70
    13d0:	f002 fdec 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13d4:	45c1      	cmp	r9, r8
    13d6:	bf34      	ite	cc
    13d8:	4640      	movcc	r0, r8
    13da:	4648      	movcs	r0, r9
    13dc:	4458      	add	r0, fp
    13de:	42b0      	cmp	r0, r6
    13e0:	dbcd      	blt.n	137e <CONFIG_FPROTECT_BLOCK_SIZE+0x37e>
    13e2:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    13e6:	2070      	movs	r0, #112	; 0x70
    13e8:	f002 fde0 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ec:	d910      	bls.n	1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>
    13ee:	2301      	movs	r3, #1
    13f0:	eba6 0109 	sub.w	r1, r6, r9
    13f4:	2203      	movs	r2, #3
    13f6:	4618      	mov	r0, r3
    13f8:	f002 f87c 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    13fc:	b328      	cbz	r0, 144a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc2>
    13fe:	b17d      	cbz	r5, 1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    1400:	1b71      	subs	r1, r6, r5
    1402:	2301      	movs	r3, #1
    1404:	2203      	movs	r2, #3
    1406:	2002      	movs	r0, #2
    1408:	f002 f874 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    140c:	b1e8      	cbz	r0, 144a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc2>
    140e:	e007      	b.n	1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    1410:	ea55 0009 	orrs.w	r0, r5, r9
    1414:	d004      	beq.n	1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
    1416:	f640 1177 	movw	r1, #2423	; 0x977
    141a:	2070      	movs	r0, #112	; 0x70
    141c:	f002 fdc6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1420:	2301      	movs	r3, #1
    1422:	2203      	movs	r2, #3
    1424:	4631      	mov	r1, r6
    1426:	2000      	movs	r0, #0
    1428:	f002 f864 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    142c:	b168      	cbz	r0, 144a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc2>
    142e:	2501      	movs	r5, #1
    1430:	f1b8 0f00 	cmp.w	r8, #0
    1434:	d003      	beq.n	143e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb6>
    1436:	9814      	ldr	r0, [sp, #80]	; 0x50
    1438:	900f      	str	r0, [sp, #60]	; 0x3c
    143a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    143e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 14e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x160>
    1442:	f1ba 0f00 	cmp.w	sl, #0
    1446:	d10e      	bne.n	1466 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xde>
    1448:	e009      	b.n	145e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd6>
    144a:	2002      	movs	r0, #2
    144c:	f002 f926 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1450:	2001      	movs	r0, #1
    1452:	f002 f923 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1456:	b01b      	add	sp, #108	; 0x6c
    1458:	2000      	movs	r0, #0
    145a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    145e:	481b      	ldr	r0, [pc, #108]	; (14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>)
    1460:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1464:	b100      	cbz	r0, 1468 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe0>
    1466:	b34f      	cbz	r7, 14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>
    1468:	f8df a060 	ldr.w	sl, [pc, #96]	; 14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>
    146c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1470:	b118      	cbz	r0, 147a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf2>
    1472:	f002 fbeb 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1476:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    147a:	b307      	cbz	r7, 14be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x136>
    147c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1480:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1484:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1488:	f8c8 0000 	str.w	r0, [r8]
    148c:	2300      	movs	r3, #0
    148e:	2203      	movs	r2, #3
    1490:	2005      	movs	r0, #5
    1492:	f002 f82f 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1496:	b368      	cbz	r0, 14f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16c>
    1498:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    149c:	2005      	movs	r0, #5
    149e:	f002 f9c9 	bl	3834 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    14a2:	4912      	ldr	r1, [pc, #72]	; (14ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x164>)
    14a4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    14a8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    14ac:	4910      	ldr	r1, [pc, #64]	; (14f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x168>)
    14ae:	12e0      	asrs	r0, r4, #11
    14b0:	6008      	str	r0, [r1, #0]
    14b2:	4c06      	ldr	r4, [pc, #24]	; (14cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144>)
    14b4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    14b8:	b3e8      	cbz	r0, 1536 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ae>
    14ba:	e030      	b.n	151e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x196>
    14bc:	e01b      	b.n	14f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e>
    14be:	e01f      	b.n	1500 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178>
    14c0:	40000508 	.word	0x40000508
    14c4:	20000010 	.word	0x20000010
    14c8:	20000a24 	.word	0x20000a24
    14cc:	20000da4 	.word	0x20000da4
    14d0:	20000012 	.word	0x20000012
    14d4:	1e847fff 	.word	0x1e847fff
    14d8:	07a12000 	.word	0x07a12000
    14dc:	f85ee000 	.word	0xf85ee000
    14e0:	1e848000 	.word	0x1e848000
    14e4:	003fffff 	.word	0x003fffff
    14e8:	4001f508 	.word	0x4001f508
    14ec:	4001f098 	.word	0x4001f098
    14f0:	4001f504 	.word	0x4001f504
    14f4:	e025      	b.n	1542 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ba>
    14f6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 15b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x228>
    14fa:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    14fe:	b1c8      	cbz	r0, 1534 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ac>
    1500:	4c2b      	ldr	r4, [pc, #172]	; (15b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x228>)
    1502:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1506:	b150      	cbz	r0, 151e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x196>
    1508:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    150c:	f8c8 0000 	str.w	r0, [r8]
    1510:	2005      	movs	r0, #5
    1512:	f002 f8c3 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1516:	f002 fc01 	bl	3d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    151a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    151e:	eba6 0009 	sub.w	r0, r6, r9
    1522:	f1a0 0119 	sub.w	r1, r0, #25
    1526:	2900      	cmp	r1, #0
    1528:	dc15      	bgt.n	1556 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ce>
    152a:	f640 2171 	movw	r1, #2673	; 0xa71
    152e:	2070      	movs	r0, #112	; 0x70
    1530:	f002 fd3c 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1534:	e000      	b.n	1538 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b0>
    1536:	e009      	b.n	154c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c4>
    1538:	f002 fba4 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    153c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1540:	e79b      	b.n	147a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf2>
    1542:	f240 313e 	movw	r1, #830	; 0x33e
    1546:	2070      	movs	r0, #112	; 0x70
    1548:	f002 fd30 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    154c:	f002 fbd8 	bl	3d00 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1550:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1554:	e7e3      	b.n	151e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x196>
    1556:	2203      	movs	r2, #3
    1558:	2301      	movs	r3, #1
    155a:	4610      	mov	r0, r2
    155c:	f001 ffca 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1560:	b308      	cbz	r0, 15a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21e>
    1562:	4814      	ldr	r0, [pc, #80]	; (15b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22c>)
    1564:	6880      	ldr	r0, [r0, #8]
    1566:	f8c0 b000 	str.w	fp, [r0]
    156a:	4813      	ldr	r0, [pc, #76]	; (15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>)
    156c:	f8c0 b000 	str.w	fp, [r0]
    1570:	ac0c      	add	r4, sp, #48	; 0x30
    1572:	4812      	ldr	r0, [pc, #72]	; (15bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x234>)
    1574:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1578:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    157c:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1580:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1584:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1588:	ac10      	add	r4, sp, #64	; 0x40
    158a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    158e:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1592:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1596:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    159a:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    159e:	b01b      	add	sp, #108	; 0x6c
    15a0:	2001      	movs	r0, #1
    15a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15a6:	f640 2179 	movw	r1, #2681	; 0xa79
    15aa:	2070      	movs	r0, #112	; 0x70
    15ac:	f002 fcfe 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15b0:	20000da4 	.word	0x20000da4
    15b4:	20000010 	.word	0x20000010
    15b8:	40000508 	.word	0x40000508
    15bc:	20000a24 	.word	0x20000a24
    15c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15c4:	4606      	mov	r6, r0
    15c6:	b083      	sub	sp, #12
    15c8:	7808      	ldrb	r0, [r1, #0]
    15ca:	7390      	strb	r0, [r2, #14]
    15cc:	7acf      	ldrb	r7, [r1, #11]
    15ce:	7357      	strb	r7, [r2, #13]
    15d0:	7a88      	ldrb	r0, [r1, #10]
    15d2:	7310      	strb	r0, [r2, #12]
    15d4:	8908      	ldrh	r0, [r1, #8]
    15d6:	4614      	mov	r4, r2
    15d8:	8150      	strh	r0, [r2, #10]
    15da:	460d      	mov	r5, r1
    15dc:	780a      	ldrb	r2, [r1, #0]
    15de:	495f      	ldr	r1, [pc, #380]	; (175c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d4>)
    15e0:	4699      	mov	r9, r3
    15e2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    15e6:	424b      	negs	r3, r1
    15e8:	f1ac 0801 	sub.w	r8, ip, #1
    15ec:	b15a      	cbz	r2, 1606 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x27e>
    15ee:	43c0      	mvns	r0, r0
    15f0:	f8d5 8004 	ldr.w	r8, [r5, #4]
    15f4:	f104 0208 	add.w	r2, r4, #8
    15f8:	4288      	cmp	r0, r1
    15fa:	dd3d      	ble.n	1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
    15fc:	f240 610a 	movw	r1, #1546	; 0x60a
    1600:	2070      	movs	r0, #112	; 0x70
    1602:	f002 fcd3 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1606:	68ee      	ldr	r6, [r5, #12]
    1608:	686d      	ldr	r5, [r5, #4]
    160a:	ea6f 0900 	mvn.w	r9, r0
    160e:	f104 0208 	add.w	r2, r4, #8
    1612:	eb06 0009 	add.w	r0, r6, r9
    1616:	4546      	cmp	r6, r8
    1618:	d904      	bls.n	1624 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29c>
    161a:	f240 6109 	movw	r1, #1545	; 0x609
    161e:	2070      	movs	r0, #112	; 0x70
    1620:	f002 fcc4 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1624:	4589      	cmp	r9, r1
    1626:	dce9      	bgt.n	15fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x274>
    1628:	4599      	cmp	r9, r3
    162a:	db28      	blt.n	167e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f6>
    162c:	4584      	cmp	ip, r0
    162e:	bfdc      	itt	le
    1630:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1634:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1638:	dd05      	ble.n	1646 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2be>
    163a:	2800      	cmp	r0, #0
    163c:	bfbc      	itt	lt
    163e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1642:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1646:	4621      	mov	r1, r4
    1648:	f001 fc6c 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    164c:	6820      	ldr	r0, [r4, #0]
    164e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1652:	1970      	adds	r0, r6, r5
    1654:	1c40      	adds	r0, r0, #1
    1656:	6021      	str	r1, [r4, #0]
    1658:	2f00      	cmp	r7, #0
    165a:	bf08      	it	eq
    165c:	307a      	addeq	r0, #122	; 0x7a
    165e:	d003      	beq.n	1668 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e0>
    1660:	2f01      	cmp	r7, #1
    1662:	bf08      	it	eq
    1664:	3048      	addeq	r0, #72	; 0x48
    1666:	d12d      	bne.n	16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>
    1668:	f001 fc40 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    166c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1670:	6060      	str	r0, [r4, #4]
    1672:	b003      	add	sp, #12
    1674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1678:	4601      	mov	r1, r0
    167a:	4298      	cmp	r0, r3
    167c:	da04      	bge.n	1688 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x300>
    167e:	f240 610b 	movw	r1, #1547	; 0x60b
    1682:	2070      	movs	r0, #112	; 0x70
    1684:	f002 fc92 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1688:	4584      	cmp	ip, r0
    168a:	bfdc      	itt	le
    168c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1690:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1694:	dd05      	ble.n	16a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31a>
    1696:	2800      	cmp	r0, #0
    1698:	bfbc      	itt	lt
    169a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    169e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    16a2:	4621      	mov	r1, r4
    16a4:	f001 fc3e 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    16a8:	6820      	ldr	r0, [r4, #0]
    16aa:	2f00      	cmp	r7, #0
    16ac:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    16b0:	f108 0001 	add.w	r0, r8, #1
    16b4:	6021      	str	r1, [r4, #0]
    16b6:	bf08      	it	eq
    16b8:	307a      	addeq	r0, #122	; 0x7a
    16ba:	d008      	beq.n	16ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x346>
    16bc:	2f01      	cmp	r7, #1
    16be:	bf08      	it	eq
    16c0:	3048      	addeq	r0, #72	; 0x48
    16c2:	d004      	beq.n	16ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x346>
    16c4:	f240 61b1 	movw	r1, #1713	; 0x6b1
    16c8:	2070      	movs	r0, #112	; 0x70
    16ca:	f002 fc6f 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16ce:	f001 fc0d 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    16d2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    16d6:	6061      	str	r1, [r4, #4]
    16d8:	8960      	ldrh	r0, [r4, #10]
    16da:	aa01      	add	r2, sp, #4
    16dc:	4669      	mov	r1, sp
    16de:	f001 fc21 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    16e2:	481f      	ldr	r0, [pc, #124]	; (1760 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d8>)
    16e4:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    16e8:	2920      	cmp	r1, #32
    16ea:	d023      	beq.n	1734 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ac>
    16ec:	6900      	ldr	r0, [r0, #16]
    16ee:	1d40      	adds	r0, r0, #5
    16f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16f4:	e9d4 2100 	ldrd	r2, r1, [r4]
    16f8:	1a89      	subs	r1, r1, r2
    16fa:	6020      	str	r0, [r4, #0]
    16fc:	4408      	add	r0, r1
    16fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1702:	6060      	str	r0, [r4, #4]
    1704:	464b      	mov	r3, r9
    1706:	4632      	mov	r2, r6
    1708:	4621      	mov	r1, r4
    170a:	68e8      	ldr	r0, [r5, #12]
    170c:	f7ff fad2 	bl	cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1710:	2800      	cmp	r0, #0
    1712:	bf1c      	itt	ne
    1714:	b003      	addne	sp, #12
    1716:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    171a:	e9d4 1000 	ldrd	r1, r0, [r4]
    171e:	1a40      	subs	r0, r0, r1
    1720:	4430      	add	r0, r6
    1722:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1726:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    172a:	e9c4 1000 	strd	r1, r0, [r4]
    172e:	b003      	add	sp, #12
    1730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1734:	8960      	ldrh	r0, [r4, #10]
    1736:	f106 0709 	add.w	r7, r6, #9
    173a:	b120      	cbz	r0, 1746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3be>
    173c:	f002 fbbe 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1740:	2800      	cmp	r0, #0
    1742:	bf08      	it	eq
    1744:	3732      	addeq	r7, #50	; 0x32
    1746:	4807      	ldr	r0, [pc, #28]	; (1764 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3dc>)
    1748:	7841      	ldrb	r1, [r0, #1]
    174a:	9800      	ldr	r0, [sp, #0]
    174c:	4281      	cmp	r1, r0
    174e:	bf84      	itt	hi
    1750:	1a08      	subhi	r0, r1, r0
    1752:	4407      	addhi	r7, r0
    1754:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1758:	e7cc      	b.n	16f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36c>
    175a:	0000      	.short	0x0000
    175c:	07a12000 	.word	0x07a12000
    1760:	20000da4 	.word	0x20000da4
    1764:	20000012 	.word	0x20000012
    1768:	b510      	push	{r4, lr}
    176a:	4c15      	ldr	r4, [pc, #84]	; (17c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x438>)
    176c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1770:	2820      	cmp	r0, #32
    1772:	bf18      	it	ne
    1774:	bd10      	popne	{r4, pc}
    1776:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    177a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    177e:	f890 1020 	ldrb.w	r1, [r0, #32]
    1782:	2920      	cmp	r1, #32
    1784:	d017      	beq.n	17b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42e>
    1786:	f8df c03c 	ldr.w	ip, [pc, #60]	; 17c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43c>
    178a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    178e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1792:	785b      	ldrb	r3, [r3, #1]
    1794:	f880 3020 	strb.w	r3, [r0, #32]
    1798:	2301      	movs	r3, #1
    179a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    179e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    17a2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    17a6:	2002      	movs	r0, #2
    17a8:	f000 f8b0 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    17ac:	2000      	movs	r0, #0
    17ae:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    17b2:	77a0      	strb	r0, [r4, #30]
    17b4:	bd10      	pop	{r4, pc}
    17b6:	f240 318b 	movw	r1, #907	; 0x38b
    17ba:	2070      	movs	r0, #112	; 0x70
    17bc:	f002 fbf6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17c0:	20000da4 	.word	0x20000da4
    17c4:	20000d24 	.word	0x20000d24
    17c8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1888 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x500>
    17d0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    17d4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    17d8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    17dc:	2c20      	cmp	r4, #32
    17de:	bf08      	it	eq
    17e0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    17e4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 188c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x504>
    17e8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1890 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x508>
    17ec:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    17f0:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    17f4:	2607      	movs	r6, #7
    17f6:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    17fa:	2801      	cmp	r0, #1
    17fc:	d00e      	beq.n	181c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x494>
    17fe:	2804      	cmp	r0, #4
    1800:	bf08      	it	eq
    1802:	2602      	moveq	r6, #2
    1804:	d00a      	beq.n	181c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x494>
    1806:	2805      	cmp	r0, #5
    1808:	bf0c      	ite	eq
    180a:	2603      	moveq	r6, #3
    180c:	2806      	cmpne	r0, #6
    180e:	d005      	beq.n	181c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x494>
    1810:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1814:	f04f 0070 	mov.w	r0, #112	; 0x70
    1818:	f002 fbc8 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    181c:	f1bb 0f00 	cmp.w	fp, #0
    1820:	bf18      	it	ne
    1822:	f3af 8000 	nopne.w
    1826:	f3ef 8010 	mrs	r0, PRIMASK
    182a:	b672      	cpsid	i
    182c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1830:	784a      	ldrb	r2, [r1, #1]
    1832:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1836:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    183a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    183e:	42a2      	cmp	r2, r4
    1840:	bf04      	itt	eq
    1842:	2220      	moveq	r2, #32
    1844:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1848:	b1b8      	cbz	r0, 187a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f2>
    184a:	462a      	mov	r2, r5
    184c:	4621      	mov	r1, r4
    184e:	2001      	movs	r0, #1
    1850:	f000 f85c 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    1854:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1858:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    185c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1860:	6840      	ldr	r0, [r0, #4]
    1862:	4631      	mov	r1, r6
    1864:	4790      	blx	r2
    1866:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    186a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    186e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1872:	2c20      	cmp	r4, #32
    1874:	d1bc      	bne.n	17f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x468>
    1876:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    187a:	4806      	ldr	r0, [pc, #24]	; (1894 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50c>)
    187c:	2800      	cmp	r0, #0
    187e:	bf18      	it	ne
    1880:	f3af 8000 	nopne.w
    1884:	b662      	cpsie	i
    1886:	e7e0      	b.n	184a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c2>
    1888:	20000da4 	.word	0x20000da4
    188c:	00000000 	.word	0x00000000
    1890:	20000d24 	.word	0x20000d24
    1894:	00000000 	.word	0x00000000
    1898:	b510      	push	{r4, lr}
    189a:	4604      	mov	r4, r0
    189c:	6800      	ldr	r0, [r0, #0]
    189e:	f00b f907 	bl	cab0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    18a2:	4602      	mov	r2, r0
    18a4:	8960      	ldrh	r0, [r4, #10]
    18a6:	7a21      	ldrb	r1, [r4, #8]
    18a8:	4b14      	ldr	r3, [pc, #80]	; (18fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x574>)
    18aa:	4408      	add	r0, r1
    18ac:	1c41      	adds	r1, r0, #1
    18ae:	1850      	adds	r0, r2, r1
    18b0:	429a      	cmp	r2, r3
    18b2:	d904      	bls.n	18be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x536>
    18b4:	f240 6109 	movw	r1, #1545	; 0x609
    18b8:	2070      	movs	r0, #112	; 0x70
    18ba:	f002 fb77 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18be:	4a10      	ldr	r2, [pc, #64]	; (1900 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x578>)
    18c0:	4291      	cmp	r1, r2
    18c2:	dd04      	ble.n	18ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x546>
    18c4:	f240 610a 	movw	r1, #1546	; 0x60a
    18c8:	2070      	movs	r0, #112	; 0x70
    18ca:	f002 fb6f 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ce:	4a0d      	ldr	r2, [pc, #52]	; (1904 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x57c>)
    18d0:	4291      	cmp	r1, r2
    18d2:	da04      	bge.n	18de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x556>
    18d4:	f240 610b 	movw	r1, #1547	; 0x60b
    18d8:	2070      	movs	r0, #112	; 0x70
    18da:	f002 fb67 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18de:	490a      	ldr	r1, [pc, #40]	; (1908 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x580>)
    18e0:	4281      	cmp	r1, r0
    18e2:	bfde      	ittt	le
    18e4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    18e8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    18ec:	bd10      	pople	{r4, pc}
    18ee:	2800      	cmp	r0, #0
    18f0:	bfbc      	itt	lt
    18f2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    18f6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    18fa:	bd10      	pop	{r4, pc}
    18fc:	1e847fff 	.word	0x1e847fff
    1900:	07a12000 	.word	0x07a12000
    1904:	f85ee000 	.word	0xf85ee000
    1908:	1e848000 	.word	0x1e848000
    190c:	f8df c054 	ldr.w	ip, [pc, #84]	; 1964 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5dc>
    1910:	b510      	push	{r4, lr}
    1912:	2300      	movs	r3, #0
    1914:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1918:	2807      	cmp	r0, #7
    191a:	d21e      	bcs.n	195a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d2>
    191c:	e8df f000 	tbb	[pc, r0]
    1920:	05050505 	.word	0x05050505
    1924:	00040404 	.word	0x00040404
    1928:	2301      	movs	r3, #1
    192a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    192e:	2b00      	cmp	r3, #0
    1930:	bf08      	it	eq
    1932:	bd10      	popeq	{r4, pc}
    1934:	480c      	ldr	r0, [pc, #48]	; (1968 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e0>)
    1936:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    193a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    193e:	2820      	cmp	r0, #32
    1940:	bf0e      	itee	eq
    1942:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1946:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    194a:	7041      	strbne	r1, [r0, #1]
    194c:	2020      	movs	r0, #32
    194e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1952:	7058      	strb	r0, [r3, #1]
    1954:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1958:	bd10      	pop	{r4, pc}
    195a:	f44f 7115 	mov.w	r1, #596	; 0x254
    195e:	2070      	movs	r0, #112	; 0x70
    1960:	f002 fb24 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1964:	20000d24 	.word	0x20000d24
    1968:	20000da4 	.word	0x20000da4
    196c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1970:	b083      	sub	sp, #12
    1972:	485c      	ldr	r0, [pc, #368]	; (1ae4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x75c>)
    1974:	9904      	ldr	r1, [sp, #16]
    1976:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    197a:	9001      	str	r0, [sp, #4]
    197c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1980:	9803      	ldr	r0, [sp, #12]
    1982:	4625      	mov	r5, r4
    1984:	2801      	cmp	r0, #1
    1986:	bf18      	it	ne
    1988:	2802      	cmpne	r0, #2
    198a:	d005      	beq.n	1998 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x610>
    198c:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    1990:	f04f 0070 	mov.w	r0, #112	; 0x70
    1994:	f002 fb0a 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1998:	2700      	movs	r7, #0
    199a:	2d20      	cmp	r5, #32
    199c:	d04a      	beq.n	1a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ac>
    199e:	4851      	ldr	r0, [pc, #324]	; (1ae4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x75c>)
    19a0:	9100      	str	r1, [sp, #0]
    19a2:	2600      	movs	r6, #0
    19a4:	7f80      	ldrb	r0, [r0, #30]
    19a6:	2800      	cmp	r0, #0
    19a8:	bf08      	it	eq
    19aa:	2602      	moveq	r6, #2
    19ac:	f001 fc18 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    19b0:	f8df a138 	ldr.w	sl, [pc, #312]	; 1aec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x764>
    19b4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    19b8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    19bc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1ae8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x760>
    19c0:	688a      	ldr	r2, [r1, #8]
    19c2:	68c9      	ldr	r1, [r1, #12]
    19c4:	1a12      	subs	r2, r2, r0
    19c6:	1a09      	subs	r1, r1, r0
    19c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    19cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19d0:	4296      	cmp	r6, r2
    19d2:	bf98      	it	ls
    19d4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    19d8:	d201      	bcs.n	19de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x656>
    19da:	4589      	cmp	r9, r1
    19dc:	d228      	bcs.n	1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>
    19de:	4a44      	ldr	r2, [pc, #272]	; (1af0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x768>)
    19e0:	9900      	ldr	r1, [sp, #0]
    19e2:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    19e6:	4622      	mov	r2, r4
    19e8:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    19ec:	784c      	ldrb	r4, [r1, #1]
    19ee:	2c20      	cmp	r4, #32
    19f0:	d016      	beq.n	1a20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x698>
    19f2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    19f6:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    19fa:	f8dc 8008 	ldr.w	r8, [ip, #8]
    19fe:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1a02:	eba8 0800 	sub.w	r8, r8, r0
    1a06:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1a0a:	ebac 0100 	sub.w	r1, ip, r0
    1a0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1a12:	4546      	cmp	r6, r8
    1a14:	bf98      	it	ls
    1a16:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1a1a:	d2e4      	bcs.n	19e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65e>
    1a1c:	4589      	cmp	r9, r1
    1a1e:	d3e2      	bcc.n	19e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65e>
    1a20:	2a20      	cmp	r2, #32
    1a22:	d005      	beq.n	1a30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a8>
    1a24:	2120      	movs	r1, #32
    1a26:	2004      	movs	r0, #4
    1a28:	9b00      	ldr	r3, [sp, #0]
    1a2a:	f7ff f907 	bl	c3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a2e:	4604      	mov	r4, r0
    1a30:	42ac      	cmp	r4, r5
    1a32:	d115      	bne.n	1a60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d8>
    1a34:	482f      	ldr	r0, [pc, #188]	; (1af4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76c>)
    1a36:	2800      	cmp	r0, #0
    1a38:	bf18      	it	ne
    1a3a:	f3af 8000 	nopne.w
    1a3e:	f001 fbcf 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a42:	4c28      	ldr	r4, [pc, #160]	; (1ae4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x75c>)
    1a44:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1a48:	2920      	cmp	r1, #32
    1a4a:	d00d      	beq.n	1a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e0>
    1a4c:	68e1      	ldr	r1, [r4, #12]
    1a4e:	1c82      	adds	r2, r0, #2
    1a50:	1a51      	subs	r1, r2, r1
    1a52:	0209      	lsls	r1, r1, #8
    1a54:	17ca      	asrs	r2, r1, #31
    1a56:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1a5a:	1209      	asrs	r1, r1, #8
    1a5c:	2900      	cmp	r1, #0
    1a5e:	dd03      	ble.n	1a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e0>
    1a60:	b005      	add	sp, #20
    1a62:	2000      	movs	r0, #0
    1a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a68:	2d20      	cmp	r5, #32
    1a6a:	d00d      	beq.n	1a88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x700>
    1a6c:	462a      	mov	r2, r5
    1a6e:	9903      	ldr	r1, [sp, #12]
    1a70:	f7ff fb1c 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1a74:	b358      	cbz	r0, 1ace <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x746>
    1a76:	9801      	ldr	r0, [sp, #4]
    1a78:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1a7c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1a80:	b005      	add	sp, #20
    1a82:	2001      	movs	r0, #1
    1a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a88:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1a8c:	b118      	cbz	r0, 1a96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70e>
    1a8e:	f002 f8dd 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1a92:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1a96:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1a9a:	b150      	cbz	r0, 1ab2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72a>
    1a9c:	4916      	ldr	r1, [pc, #88]	; (1af8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x770>)
    1a9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1aa2:	6008      	str	r0, [r1, #0]
    1aa4:	2005      	movs	r0, #5
    1aa6:	f001 fdf9 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1aaa:	f002 f937 	bl	3d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1aae:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1ab2:	2004      	movs	r0, #4
    1ab4:	f001 fdf2 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ab8:	f001 fe5e 	bl	3778 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1abc:	2020      	movs	r0, #32
    1abe:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    1ac2:	480e      	ldr	r0, [pc, #56]	; (1afc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x774>)
    1ac4:	6880      	ldr	r0, [r0, #8]
    1ac6:	6007      	str	r7, [r0, #0]
    1ac8:	480d      	ldr	r0, [pc, #52]	; (1b00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x778>)
    1aca:	6007      	str	r7, [r0, #0]
    1acc:	e7d8      	b.n	1a80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f8>
    1ace:	462a      	mov	r2, r5
    1ad0:	2120      	movs	r1, #32
    1ad2:	2004      	movs	r0, #4
    1ad4:	9b04      	ldr	r3, [sp, #16]
    1ad6:	f7ff f8b1 	bl	c3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1ada:	b005      	add	sp, #20
    1adc:	2000      	movs	r0, #0
    1ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ae2:	0000      	.short	0x0000
    1ae4:	20000da4 	.word	0x20000da4
    1ae8:	003fffff 	.word	0x003fffff
    1aec:	20000a24 	.word	0x20000a24
    1af0:	20000d24 	.word	0x20000d24
    1af4:	00000000 	.word	0x00000000
    1af8:	4001f508 	.word	0x4001f508
    1afc:	20000010 	.word	0x20000010
    1b00:	40000508 	.word	0x40000508

00001b04 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1b04:	4906      	ldr	r1, [pc, #24]	; (1b20 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1b06:	b510      	push	{r4, lr}
    1b08:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1b0c:	2a20      	cmp	r2, #32
    1b0e:	bf1c      	itt	ne
    1b10:	7788      	strbne	r0, [r1, #30]
    1b12:	bd10      	popne	{r4, pc}
    1b14:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1b18:	2070      	movs	r0, #112	; 0x70
    1b1a:	f002 fa47 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b1e:	0000      	.short	0x0000
    1b20:	20000da4 	.word	0x20000da4

00001b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b28:	4e5b      	ldr	r6, [pc, #364]	; (1c98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1b2a:	4681      	mov	r9, r0
    1b2c:	b085      	sub	sp, #20
    1b2e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1b32:	468a      	mov	sl, r1
    1b34:	2820      	cmp	r0, #32
    1b36:	d04d      	beq.n	1bd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    1b38:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1b3c:	f106 040c 	add.w	r4, r6, #12
    1b40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1b44:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1b48:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1b4c:	2020      	movs	r0, #32
    1b4e:	f88d 0000 	strb.w	r0, [sp]
    1b52:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1b56:	aa03      	add	r2, sp, #12
    1b58:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1b5c:	a901      	add	r1, sp, #4
    1b5e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1b62:	6930      	ldr	r0, [r6, #16]
    1b64:	9002      	str	r0, [sp, #8]
    1b66:	6830      	ldr	r0, [r6, #0]
    1b68:	4448      	add	r0, r9
    1b6a:	f001 f9db 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1b6e:	68f8      	ldr	r0, [r7, #12]
    1b70:	9901      	ldr	r1, [sp, #4]
    1b72:	4a4a      	ldr	r2, [pc, #296]	; (1c9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1b74:	4408      	add	r0, r1
    1b76:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    1b7a:	4291      	cmp	r1, r2
    1b7c:	d82f      	bhi.n	1bde <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1b7e:	68b9      	ldr	r1, [r7, #8]
    1b80:	1a41      	subs	r1, r0, r1
    1b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1b86:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1b8a:	d228      	bcs.n	1bde <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1b8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b90:	6060      	str	r0, [r4, #4]
    1b92:	4630      	mov	r0, r6
    1b94:	f884 a00c 	strb.w	sl, [r4, #12]
    1b98:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    1b9c:	46ea      	mov	sl, sp
    1b9e:	2d20      	cmp	r5, #32
    1ba0:	bf1c      	itt	ne
    1ba2:	493f      	ldrne	r1, [pc, #252]	; (1ca0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1ba4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1ba8:	d03c      	beq.n	1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1baa:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1bae:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1bb2:	6860      	ldr	r0, [r4, #4]
    1bb4:	68ba      	ldr	r2, [r7, #8]
    1bb6:	4621      	mov	r1, r4
    1bb8:	1a10      	subs	r0, r2, r0
    1bba:	0200      	lsls	r0, r0, #8
    1bbc:	17c2      	asrs	r2, r0, #31
    1bbe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1bc2:	f107 0608 	add.w	r6, r7, #8
    1bc6:	1200      	asrs	r0, r0, #8
    1bc8:	d41b      	bmi.n	1c02 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    1bca:	8970      	ldrh	r0, [r6, #10]
    1bcc:	b350      	cbz	r0, 1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1bce:	8948      	ldrh	r0, [r1, #10]
    1bd0:	b148      	cbz	r0, 1be6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    1bd2:	e027      	b.n	1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1bd4:	f640 317b 	movw	r1, #2939	; 0xb7b
    1bd8:	2070      	movs	r0, #112	; 0x70
    1bda:	f002 f9e7 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bde:	b005      	add	sp, #20
    1be0:	2001      	movs	r0, #1
    1be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1be6:	4620      	mov	r0, r4
    1be8:	f7ff fe56 	bl	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
    1bec:	f001 f97e 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bf0:	6831      	ldr	r1, [r6, #0]
    1bf2:	1a08      	subs	r0, r1, r0
    1bf4:	0200      	lsls	r0, r0, #8
    1bf6:	17c1      	asrs	r1, r0, #31
    1bf8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1bfc:	1200      	asrs	r0, r0, #8
    1bfe:	2833      	cmp	r0, #51	; 0x33
    1c00:	da10      	bge.n	1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1c02:	f88a 5000 	strb.w	r5, [sl]
    1c06:	7d39      	ldrb	r1, [r7, #20]
    1c08:	7b20      	ldrb	r0, [r4, #12]
    1c0a:	4281      	cmp	r1, r0
    1c0c:	d805      	bhi.n	1c1a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1c0e:	9802      	ldr	r0, [sp, #8]
    1c10:	6060      	str	r0, [r4, #4]
    1c12:	b005      	add	sp, #20
    1c14:	2002      	movs	r0, #2
    1c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c1a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1c1e:	7845      	ldrb	r5, [r0, #1]
    1c20:	2d20      	cmp	r5, #32
    1c22:	d1c2      	bne.n	1baa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1c24:	2005      	movs	r0, #5
    1c26:	f001 fd39 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c2a:	4c1b      	ldr	r4, [pc, #108]	; (1c98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1c2c:	f04f 30ff 	mov.w	r0, #4294967295
    1c30:	60a0      	str	r0, [r4, #8]
    1c32:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1c36:	f89d 2000 	ldrb.w	r2, [sp]
    1c3a:	2120      	movs	r1, #32
    1c3c:	2a20      	cmp	r2, #32
    1c3e:	bf13      	iteet	ne
    1c40:	2005      	movne	r0, #5
    1c42:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1c46:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1c4a:	f7fe fff7 	blne	c3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1c4e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1c52:	4913      	ldr	r1, [pc, #76]	; (1ca0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1c54:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1c58:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1c5c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1c60:	7048      	strb	r0, [r1, #1]
    1c62:	6820      	ldr	r0, [r4, #0]
    1c64:	4448      	add	r0, r9
    1c66:	6020      	str	r0, [r4, #0]
    1c68:	2001      	movs	r0, #1
    1c6a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1c6e:	7e60      	ldrb	r0, [r4, #25]
    1c70:	2801      	cmp	r0, #1
    1c72:	d105      	bne.n	1c80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1c74:	6920      	ldr	r0, [r4, #16]
    1c76:	1e40      	subs	r0, r0, #1
    1c78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c7c:	f001 fb54 	bl	3328 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1c80:	f89d 0000 	ldrb.w	r0, [sp]
    1c84:	2820      	cmp	r0, #32
    1c86:	d003      	beq.n	1c90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    1c88:	4806      	ldr	r0, [pc, #24]	; (1ca4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    1c8a:	7840      	ldrb	r0, [r0, #1]
    1c8c:	f002 fa5e 	bl	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c90:	b005      	add	sp, #20
    1c92:	2000      	movs	r0, #0
    1c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c98:	20000da4 	.word	0x20000da4
    1c9c:	07a11f9b 	.word	0x07a11f9b
    1ca0:	20000d24 	.word	0x20000d24
    1ca4:	20000010 	.word	0x20000010

00001ca8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    1ca8:	b570      	push	{r4, r5, r6, lr}
    1caa:	4a23      	ldr	r2, [pc, #140]	; (1d38 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    1cac:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1cb0:	2920      	cmp	r1, #32
    1cb2:	d039      	beq.n	1d28 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    1cb4:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1cb8:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    1cbc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1cc0:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    1cc4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    1cc8:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    1ccc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    1cd0:	f891 1020 	ldrb.w	r1, [r1, #32]
    1cd4:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    1cd8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    1cdc:	2920      	cmp	r1, #32
    1cde:	d028      	beq.n	1d32 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    1ce0:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    1ce4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    1ce8:	7d2d      	ldrb	r5, [r5, #20]
    1cea:	4285      	cmp	r5, r0
    1cec:	bf84      	itt	hi
    1cee:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1cf2:	7849      	ldrbhi	r1, [r1, #1]
    1cf4:	d8f2      	bhi.n	1cdc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    1cf6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1cfa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1cfe:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1d02:	6889      	ldr	r1, [r1, #8]
    1d04:	6814      	ldr	r4, [r2, #0]
    1d06:	1a08      	subs	r0, r1, r0
    1d08:	0200      	lsls	r0, r0, #8
    1d0a:	17c1      	asrs	r1, r0, #31
    1d0c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1d10:	1200      	asrs	r0, r0, #8
    1d12:	d407      	bmi.n	1d24 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1d14:	f00a fecc 	bl	cab0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d18:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1d1c:	4288      	cmp	r0, r1
    1d1e:	bf24      	itt	cs
    1d20:	1b00      	subcs	r0, r0, r4
    1d22:	bd70      	popcs	{r4, r5, r6, pc}
    1d24:	2000      	movs	r0, #0
    1d26:	bd70      	pop	{r4, r5, r6, pc}
    1d28:	f640 314d 	movw	r1, #2893	; 0xb4d
    1d2c:	2070      	movs	r0, #112	; 0x70
    1d2e:	f002 f93d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d32:	f04f 30ff 	mov.w	r0, #4294967295
    1d36:	bd70      	pop	{r4, r5, r6, pc}
    1d38:	20000da4 	.word	0x20000da4

00001d3c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1d3c:	4806      	ldr	r0, [pc, #24]	; (1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1d3e:	b510      	push	{r4, lr}
    1d40:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1d44:	2920      	cmp	r1, #32
    1d46:	bf1c      	itt	ne
    1d48:	7e00      	ldrbne	r0, [r0, #24]
    1d4a:	bd10      	popne	{r4, pc}
    1d4c:	f640 3174 	movw	r1, #2932	; 0xb74
    1d50:	2070      	movs	r0, #112	; 0x70
    1d52:	f002 f92b 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d56:	0000      	.short	0x0000
    1d58:	20000da4 	.word	0x20000da4

00001d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1d5c:	4602      	mov	r2, r0
    1d5e:	4b14      	ldr	r3, [pc, #80]	; (1db0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1d60:	b510      	push	{r4, lr}
    1d62:	4408      	add	r0, r1
    1d64:	429a      	cmp	r2, r3
    1d66:	d904      	bls.n	1d72 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1d68:	f240 6109 	movw	r1, #1545	; 0x609
    1d6c:	2070      	movs	r0, #112	; 0x70
    1d6e:	f002 f91d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d72:	4a10      	ldr	r2, [pc, #64]	; (1db4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1d74:	4291      	cmp	r1, r2
    1d76:	dd04      	ble.n	1d82 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1d78:	f240 610a 	movw	r1, #1546	; 0x60a
    1d7c:	2070      	movs	r0, #112	; 0x70
    1d7e:	f002 f915 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d82:	4a0d      	ldr	r2, [pc, #52]	; (1db8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1d84:	4291      	cmp	r1, r2
    1d86:	da04      	bge.n	1d92 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1d88:	f240 610b 	movw	r1, #1547	; 0x60b
    1d8c:	2070      	movs	r0, #112	; 0x70
    1d8e:	f002 f90d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d92:	490a      	ldr	r1, [pc, #40]	; (1dbc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1d94:	4281      	cmp	r1, r0
    1d96:	bfde      	ittt	le
    1d98:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1d9c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1da0:	bd10      	pople	{r4, pc}
    1da2:	2800      	cmp	r0, #0
    1da4:	bfbc      	itt	lt
    1da6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1daa:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1dae:	bd10      	pop	{r4, pc}
    1db0:	1e847fff 	.word	0x1e847fff
    1db4:	07a12000 	.word	0x07a12000
    1db8:	f85ee000 	.word	0xf85ee000
    1dbc:	1e848000 	.word	0x1e848000

00001dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1dc0:	4a10      	ldr	r2, [pc, #64]	; (1e04 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1dc2:	1a0b      	subs	r3, r1, r0
    1dc4:	f102 0c01 	add.w	ip, r2, #1
    1dc8:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1dcc:	bf3c      	itt	cc
    1dce:	4618      	movcc	r0, r3
    1dd0:	4770      	bxcc	lr
    1dd2:	b510      	push	{r4, lr}
    1dd4:	1a44      	subs	r4, r0, r1
    1dd6:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1dda:	bf3c      	itt	cc
    1ddc:	4618      	movcc	r0, r3
    1dde:	bd10      	popcc	{r4, pc}
    1de0:	429a      	cmp	r2, r3
    1de2:	d203      	bcs.n	1dec <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1de4:	1a10      	subs	r0, r2, r0
    1de6:	4408      	add	r0, r1
    1de8:	1c40      	adds	r0, r0, #1
    1dea:	bd10      	pop	{r4, pc}
    1dec:	42a2      	cmp	r2, r4
    1dee:	d204      	bcs.n	1dfa <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1df0:	1a51      	subs	r1, r2, r1
    1df2:	4408      	add	r0, r1
    1df4:	1c40      	adds	r0, r0, #1
    1df6:	4240      	negs	r0, r0
    1df8:	bd10      	pop	{r4, pc}
    1dfa:	f640 310c 	movw	r1, #2828	; 0xb0c
    1dfe:	2070      	movs	r0, #112	; 0x70
    1e00:	f002 f8d4 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e04:	1e847fff 	.word	0x1e847fff

00001e08 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1e08:	4907      	ldr	r1, [pc, #28]	; (1e28 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    1e0a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1e0e:	4282      	cmp	r2, r0
    1e10:	bf04      	itt	eq
    1e12:	6848      	ldreq	r0, [r1, #4]
    1e14:	4770      	bxeq	lr
    1e16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1e1a:	4904      	ldr	r1, [pc, #16]	; (1e2c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1e1c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1e20:	3008      	adds	r0, #8
    1e22:	f7ff bd39 	b.w	1898 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x510>
    1e26:	0000      	.short	0x0000
    1e28:	20000da4 	.word	0x20000da4
    1e2c:	20000a24 	.word	0x20000a24

00001e30 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1e30:	490e      	ldr	r1, [pc, #56]	; (1e6c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1e32:	b510      	push	{r4, lr}
    1e34:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1e38:	2820      	cmp	r0, #32
    1e3a:	d012      	beq.n	1e62 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1e3c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1e40:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1e44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1e48:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1e4c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1e50:	6840      	ldr	r0, [r0, #4]
    1e52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1e56:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    1e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e5e:	2104      	movs	r1, #4
    1e60:	4710      	bx	r2
    1e62:	f640 01bc 	movw	r1, #2236	; 0x8bc
    1e66:	2070      	movs	r0, #112	; 0x70
    1e68:	f002 f8a0 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e6c:	20000da4 	.word	0x20000da4

00001e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e72:	4d6d      	ldr	r5, [pc, #436]	; (2028 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1e74:	496d      	ldr	r1, [pc, #436]	; (202c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1e76:	2601      	movs	r6, #1
    1e78:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1e7c:	2808      	cmp	r0, #8
    1e7e:	d273      	bcs.n	1f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1e80:	e8df f000 	tbb	[pc, r0]
    1e84:	af9d6704 	.word	0xaf9d6704
    1e88:	b9b444cd 	.word	0xb9b444cd
    1e8c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1e90:	b918      	cbnz	r0, 1e9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1e92:	f001 fef7 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1e96:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1e9a:	8ae0      	ldrh	r0, [r4, #22]
    1e9c:	b110      	cbz	r0, 1ea4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1e9e:	f002 f80d 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1ea2:	b188      	cbz	r0, 1ec8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1ea4:	f7ff fc60 	bl	1768 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e0>
    1ea8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    1eac:	68a1      	ldr	r1, [r4, #8]
    1eae:	f1b1 3fff 	cmp.w	r1, #4294967295
    1eb2:	d005      	beq.n	1ec0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1eb4:	2301      	movs	r3, #1
    1eb6:	2203      	movs	r2, #3
    1eb8:	2005      	movs	r0, #5
    1eba:	f001 fb1b 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1ebe:	b140      	cbz	r0, 1ed2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1ec0:	7e60      	ldrb	r0, [r4, #25]
    1ec2:	2801      	cmp	r0, #1
    1ec4:	d110      	bne.n	1ee8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1ec6:	e009      	b.n	1edc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1ec8:	f44f 6107 	mov.w	r1, #2160	; 0x870
    1ecc:	2070      	movs	r0, #112	; 0x70
    1ece:	f002 f86d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ed2:	f640 0175 	movw	r1, #2165	; 0x875
    1ed6:	2070      	movs	r0, #112	; 0x70
    1ed8:	f002 f868 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1edc:	6920      	ldr	r0, [r4, #16]
    1ede:	1e40      	subs	r0, r0, #1
    1ee0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ee4:	f001 fa20 	bl	3328 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1ee8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1eec:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1ef0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ef4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1ef8:	6840      	ldr	r0, [r0, #4]
    1efa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1efe:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1f02:	b001      	add	sp, #4
    1f04:	2101      	movs	r1, #1
    1f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1f0a:	4710      	bx	r2
    1f0c:	f7ff fc2c 	bl	1768 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e0>
    1f10:	f04f 30ff 	mov.w	r0, #4294967295
    1f14:	60a0      	str	r0, [r4, #8]
    1f16:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1f1a:	f88d 0000 	strb.w	r0, [sp]
    1f1e:	f89d 0000 	ldrb.w	r0, [sp]
    1f22:	b188      	cbz	r0, 1f48 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1f24:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f28:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1f2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f30:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1f34:	6840      	ldr	r0, [r0, #4]
    1f36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f3a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1f3e:	b001      	add	sp, #4
    1f40:	2106      	movs	r1, #6
    1f42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1f46:	4710      	bx	r2
    1f48:	f640 0186 	movw	r1, #2182	; 0x886
    1f4c:	2070      	movs	r0, #112	; 0x70
    1f4e:	f002 f82d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f52:	f7ff fc09 	bl	1768 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e0>
    1f56:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1f5a:	f001 ffaf 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f5e:	b120      	cbz	r0, 1f6a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1f60:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1f64:	b130      	cbz	r0, 1f74 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    1f66:	e009      	b.n	1f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1f68:	e059      	b.n	201e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    1f6a:	f640 0196 	movw	r1, #2198	; 0x896
    1f6e:	2070      	movs	r0, #112	; 0x70
    1f70:	f002 f81c 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f74:	f001 fe86 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1f78:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1f7c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1f80:	b158      	cbz	r0, 1f9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1f82:	492b      	ldr	r1, [pc, #172]	; (2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1f84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1f88:	6008      	str	r0, [r1, #0]
    1f8a:	2005      	movs	r0, #5
    1f8c:	f001 fb86 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1f90:	f001 fec4 	bl	3d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1f94:	2000      	movs	r0, #0
    1f96:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1f9a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f9e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1fa2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1fa6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1faa:	6840      	ldr	r0, [r0, #4]
    1fac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1fb0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1fb4:	b001      	add	sp, #4
    1fb6:	2100      	movs	r1, #0
    1fb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1fbc:	4710      	bx	r2
    1fbe:	f001 fc25 	bl	380c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1fc2:	8ae0      	ldrh	r0, [r4, #22]
    1fc4:	b110      	cbz	r0, 1fcc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1fc6:	f001 ff79 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1fca:	b128      	cbz	r0, 1fd8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    1fcc:	4819      	ldr	r0, [pc, #100]	; (2034 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    1fce:	7800      	ldrb	r0, [r0, #0]
    1fd0:	2803      	cmp	r0, #3
    1fd2:	bf08      	it	eq
    1fd4:	7766      	strbeq	r6, [r4, #29]
    1fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fd8:	f640 01a1 	movw	r1, #2209	; 0x8a1
    1fdc:	2070      	movs	r0, #112	; 0x70
    1fde:	f001 ffe5 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe2:	4815      	ldr	r0, [pc, #84]	; (2038 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1fe4:	6006      	str	r6, [r0, #0]
    1fe6:	6888      	ldr	r0, [r1, #8]
    1fe8:	6006      	str	r6, [r0, #0]
    1fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fec:	7808      	ldrb	r0, [r1, #0]
    1fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1ff2:	f002 b8ab 	b.w	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ff6:	f7ff fbb7 	bl	1768 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e0>
    1ffa:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1ffe:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2002:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2006:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    200a:	6840      	ldr	r0, [r0, #4]
    200c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2010:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2014:	b001      	add	sp, #4
    2016:	2105      	movs	r1, #5
    2018:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    201c:	4710      	bx	r2
    201e:	f640 01b4 	movw	r1, #2228	; 0x8b4
    2022:	2070      	movs	r0, #112	; 0x70
    2024:	f001 ffc2 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2028:	20000a24 	.word	0x20000a24
    202c:	20000010 	.word	0x20000010
    2030:	4001f508 	.word	0x4001f508
    2034:	20000012 	.word	0x20000012
    2038:	40000508 	.word	0x40000508

0000203c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    203c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2040:	4682      	mov	sl, r0
    2042:	48dc      	ldr	r0, [pc, #880]	; (23b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2044:	b08b      	sub	sp, #44	; 0x2c
    2046:	6800      	ldr	r0, [r0, #0]
    2048:	4ddb      	ldr	r5, [pc, #876]	; (23b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    204a:	05c0      	lsls	r0, r0, #23
    204c:	0dc0      	lsrs	r0, r0, #23
    204e:	d00e      	beq.n	206e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2050:	3810      	subs	r0, #16
    2052:	b240      	sxtb	r0, r0
    2054:	2800      	cmp	r0, #0
    2056:	bfb8      	it	lt
    2058:	f000 000f 	andlt.w	r0, r0, #15
    205c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2060:	bfac      	ite	ge
    2062:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2066:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    206a:	0940      	lsrs	r0, r0, #5
    206c:	d00d      	beq.n	208a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    206e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2070:	f04f 0b00 	mov.w	fp, #0
    2074:	7800      	ldrb	r0, [r0, #0]
    2076:	2800      	cmp	r0, #0
    2078:	bf18      	it	ne
    207a:	2801      	cmpne	r0, #1
    207c:	d018      	beq.n	20b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    207e:	f240 714f 	movw	r1, #1871	; 0x74f
    2082:	f04f 0070 	mov.w	r0, #112	; 0x70
    2086:	f001 ff91 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    208a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    208e:	f04f 0b01 	mov.w	fp, #1
    2092:	2820      	cmp	r0, #32
    2094:	d007      	beq.n	20a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2096:	980c      	ldr	r0, [sp, #48]	; 0x30
    2098:	7800      	ldrb	r0, [r0, #0]
    209a:	b148      	cbz	r0, 20b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    209c:	f240 714b 	movw	r1, #1867	; 0x74b
    20a0:	2070      	movs	r0, #112	; 0x70
    20a2:	f001 ff83 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20a6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    20aa:	2070      	movs	r0, #112	; 0x70
    20ac:	f001 ff7e 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20b0:	4cc2      	ldr	r4, [pc, #776]	; (23bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    20b2:	b124      	cbz	r4, 20be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    20b4:	2100      	movs	r1, #0
    20b6:	f240 7052 	movw	r0, #1874	; 0x752
    20ba:	f3af 8000 	nop.w
    20be:	49c0      	ldr	r1, [pc, #768]	; (23c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    20c0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    20c4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    20c8:	f04f 0801 	mov.w	r8, #1
    20cc:	9000      	str	r0, [sp, #0]
    20ce:	b124      	cbz	r4, 20da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    20d0:	2100      	movs	r1, #0
    20d2:	f240 705a 	movw	r0, #1882	; 0x75a
    20d6:	f3af 8000 	nop.w
    20da:	f1b8 0f00 	cmp.w	r8, #0
    20de:	d009      	beq.n	20f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    20e0:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    20e4:	f04f 0900 	mov.w	r9, #0
    20e8:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    20ec:	f1bb 0f00 	cmp.w	fp, #0
    20f0:	d007      	beq.n	2102 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    20f2:	e032      	b.n	215a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    20f4:	48b3      	ldr	r0, [pc, #716]	; (23c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    20f6:	2800      	cmp	r0, #0
    20f8:	bf18      	it	ne
    20fa:	f3af 8000 	nopne.w
    20fe:	b662      	cpsie	i
    2100:	e7ee      	b.n	20e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2102:	4637      	mov	r7, r6
    2104:	2001      	movs	r0, #1
    2106:	ea20 0607 	bic.w	r6, r0, r7
    210a:	48af      	ldr	r0, [pc, #700]	; (23c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    210c:	2240      	movs	r2, #64	; 0x40
    210e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2112:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2116:	f00a fe39 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    211a:	b124      	cbz	r4, 2126 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    211c:	2100      	movs	r1, #0
    211e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2122:	f3af 8000 	nop.w
    2126:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    212a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    212e:	6a09      	ldr	r1, [r1, #32]
    2130:	6201      	str	r1, [r0, #32]
    2132:	b124      	cbz	r4, 213e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2134:	2100      	movs	r1, #0
    2136:	f240 50d1 	movw	r0, #1489	; 0x5d1
    213a:	f3af 8000 	nop.w
    213e:	b124      	cbz	r4, 214a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2140:	2100      	movs	r1, #0
    2142:	f240 7064 	movw	r0, #1892	; 0x764
    2146:	f3af 8000 	nop.w
    214a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    214e:	f88d 0004 	strb.w	r0, [sp, #4]
    2152:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2156:	2800      	cmp	r0, #0
    2158:	d1b9      	bne.n	20ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    215a:	b124      	cbz	r4, 2166 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    215c:	2100      	movs	r1, #0
    215e:	f240 706e 	movw	r0, #1902	; 0x76e
    2162:	f3af 8000 	nop.w
    2166:	f001 f83b 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    216a:	4680      	mov	r8, r0
    216c:	4633      	mov	r3, r6
    216e:	aa06      	add	r2, sp, #24
    2170:	990c      	ldr	r1, [sp, #48]	; 0x30
    2172:	f7ff fa25 	bl	15c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x238>
    2176:	b124      	cbz	r4, 2182 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2178:	2100      	movs	r1, #0
    217a:	f240 7075 	movw	r0, #1909	; 0x775
    217e:	f3af 8000 	nop.w
    2182:	4991      	ldr	r1, [pc, #580]	; (23c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2184:	a806      	add	r0, sp, #24
    2186:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    218a:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    218e:	2901      	cmp	r1, #1
    2190:	bf18      	it	ne
    2192:	2902      	cmpne	r1, #2
    2194:	d13c      	bne.n	2210 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2196:	9906      	ldr	r1, [sp, #24]
    2198:	9b07      	ldr	r3, [sp, #28]
    219a:	eba1 0108 	sub.w	r1, r1, r8
    219e:	4a8b      	ldr	r2, [pc, #556]	; (23cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    21a0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21a4:	eba3 0308 	sub.w	r3, r3, r8
    21a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    21ac:	2902      	cmp	r1, #2
    21ae:	d371      	bcc.n	2294 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    21b0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    21b4:	d26e      	bcs.n	2294 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    21b6:	429a      	cmp	r2, r3
    21b8:	d36c      	bcc.n	2294 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    21ba:	f04f 0901 	mov.w	r9, #1
    21be:	ab01      	add	r3, sp, #4
    21c0:	aa05      	add	r2, sp, #20
    21c2:	4631      	mov	r1, r6
    21c4:	f7fe fef2 	bl	fac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    21c8:	2800      	cmp	r0, #0
    21ca:	d06b      	beq.n	22a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    21cc:	f89d 1014 	ldrb.w	r1, [sp, #20]
    21d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    21d4:	4633      	mov	r3, r6
    21d6:	428a      	cmp	r2, r1
    21d8:	d068      	beq.n	22ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    21da:	2005      	movs	r0, #5
    21dc:	f7fe fd2e 	bl	c3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    21e0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    21e4:	7048      	strb	r0, [r1, #1]
    21e6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    21ea:	2820      	cmp	r0, #32
    21ec:	bf03      	ittte	eq
    21ee:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    21f2:	f880 a020 	strbeq.w	sl, [r0, #32]
    21f6:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    21fa:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    21fe:	bf18      	it	ne
    2200:	f880 a001 	strbne.w	sl, [r0, #1]
    2204:	4632      	mov	r2, r6
    2206:	4651      	mov	r1, sl
    2208:	f05f 0003 	movs.w	r0, #3
    220c:	f7ff fb7e 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    2210:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2214:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2218:	f88d 0004 	strb.w	r0, [sp, #4]
    221c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    2220:	b124      	cbz	r4, 222c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    2222:	2100      	movs	r1, #0
    2224:	f240 707c 	movw	r0, #1916	; 0x77c
    2228:	f3af 8000 	nop.w
    222c:	4868      	ldr	r0, [pc, #416]	; (23d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    222e:	2800      	cmp	r0, #0
    2230:	bf18      	it	ne
    2232:	f3af 8000 	nopne.w
    2236:	f3ef 8810 	mrs	r8, PRIMASK
    223a:	b672      	cpsid	i
    223c:	b124      	cbz	r4, 2248 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    223e:	2100      	movs	r1, #0
    2240:	f240 7082 	movw	r0, #1922	; 0x782
    2244:	f3af 8000 	nop.w
    2248:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    224c:	f88d 0004 	strb.w	r0, [sp, #4]
    2250:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2254:	2800      	cmp	r0, #0
    2256:	f47f af3a 	bne.w	20ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    225a:	b124      	cbz	r4, 2266 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    225c:	2100      	movs	r1, #0
    225e:	f240 708a 	movw	r0, #1930	; 0x78a
    2262:	f3af 8000 	nop.w
    2266:	f10d 0e18 	add.w	lr, sp, #24
    226a:	9800      	ldr	r0, [sp, #0]
    226c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2270:	f100 0008 	add.w	r0, r0, #8
    2274:	f1b9 0f00 	cmp.w	r9, #0
    2278:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    227c:	d044      	beq.n	2308 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    227e:	b124      	cbz	r4, 228a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    2280:	2100      	movs	r1, #0
    2282:	f240 7097 	movw	r0, #1943	; 0x797
    2286:	f3af 8000 	nop.w
    228a:	f1bb 0f00 	cmp.w	fp, #0
    228e:	d12c      	bne.n	22ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2290:	e016      	b.n	22c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    2292:	e7ff      	b.n	2294 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2294:	4632      	mov	r2, r6
    2296:	4651      	mov	r1, sl
    2298:	2004      	movs	r0, #4
    229a:	f7ff fb37 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    229e:	f04f 0901 	mov.w	r9, #1
    22a2:	e7b5      	b.n	2210 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    22a4:	4632      	mov	r2, r6
    22a6:	4651      	mov	r1, sl
    22a8:	2004      	movs	r0, #4
    22aa:	e7af      	b.n	220c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    22ac:	2920      	cmp	r1, #32
    22ae:	bf19      	ittee	ne
    22b0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    22b4:	7840      	ldrbne	r0, [r0, #1]
    22b6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    22ba:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    22be:	e78f      	b.n	21e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    22c0:	b19f      	cbz	r7, 22ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    22c2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    22c6:	2820      	cmp	r0, #32
    22c8:	d10f      	bne.n	22ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    22ca:	b124      	cbz	r4, 22d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    22cc:	2100      	movs	r1, #0
    22ce:	f240 709c 	movw	r0, #1948	; 0x79c
    22d2:	f3af 8000 	nop.w
    22d6:	4631      	mov	r1, r6
    22d8:	2002      	movs	r0, #2
    22da:	f7ff fb47 	bl	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    22de:	b920      	cbnz	r0, 22ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    22e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    22e2:	7800      	ldrb	r0, [r0, #0]
    22e4:	b3f0      	cbz	r0, 2364 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    22e6:	2801      	cmp	r0, #1
    22e8:	d04c      	beq.n	2384 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    22ea:	b124      	cbz	r4, 22f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    22ec:	2100      	movs	r1, #0
    22ee:	f240 70b9 	movw	r0, #1977	; 0x7b9
    22f2:	f3af 8000 	nop.w
    22f6:	f1bb 0f00 	cmp.w	fp, #0
    22fa:	bf18      	it	ne
    22fc:	2001      	movne	r0, #1
    22fe:	d04a      	beq.n	2396 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    2300:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2304:	f04f 0901 	mov.w	r9, #1
    2308:	b124      	cbz	r4, 2314 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    230a:	2100      	movs	r1, #0
    230c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    2310:	f3af 8000 	nop.w
    2314:	f1b8 0f00 	cmp.w	r8, #0
    2318:	d045      	beq.n	23a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    231a:	b124      	cbz	r4, 2326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    231c:	2100      	movs	r1, #0
    231e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2322:	f3af 8000 	nop.w
    2326:	f1b9 0f00 	cmp.w	r9, #0
    232a:	d011      	beq.n	2350 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    232c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2330:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2334:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2338:	2820      	cmp	r0, #32
    233a:	d009      	beq.n	2350 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    233c:	b124      	cbz	r4, 2348 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    233e:	2100      	movs	r1, #0
    2340:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2344:	f3af 8000 	nop.w
    2348:	4822      	ldr	r0, [pc, #136]	; (23d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    234a:	7840      	ldrb	r0, [r0, #1]
    234c:	f001 fefe 	bl	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2350:	b124      	cbz	r4, 235c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2352:	2100      	movs	r1, #0
    2354:	f240 70da 	movw	r0, #2010	; 0x7da
    2358:	f3af 8000 	nop.w
    235c:	b00d      	add	sp, #52	; 0x34
    235e:	4648      	mov	r0, r9
    2360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2364:	e7ff      	b.n	2366 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2366:	b124      	cbz	r4, 2372 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2368:	2100      	movs	r1, #0
    236a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    236e:	f3af 8000 	nop.w
    2372:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2376:	4651      	mov	r1, sl
    2378:	2004      	movs	r0, #4
    237a:	f7ff fac7 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    237e:	f04f 0901 	mov.w	r9, #1
    2382:	e7c1      	b.n	2308 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2384:	2c00      	cmp	r4, #0
    2386:	f43f aea2 	beq.w	20ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    238a:	2100      	movs	r1, #0
    238c:	f240 70af 	movw	r0, #1967	; 0x7af
    2390:	f3af 8000 	nop.w
    2394:	e69b      	b.n	20ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2396:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    239a:	2001      	movs	r0, #1
    239c:	ea20 0101 	bic.w	r1, r0, r1
    23a0:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    23a4:	e7ac      	b.n	2300 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    23a6:	4807      	ldr	r0, [pc, #28]	; (23c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    23a8:	2800      	cmp	r0, #0
    23aa:	bf18      	it	ne
    23ac:	f3af 8000 	nopne.w
    23b0:	b662      	cpsie	i
    23b2:	e7b2      	b.n	231a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    23b4:	e000ed04 	.word	0xe000ed04
    23b8:	20000da4 	.word	0x20000da4
    23bc:	00000000 	.word	0x00000000
    23c0:	20000a24 	.word	0x20000a24
    23c4:	00000000 	.word	0x00000000
    23c8:	20000d24 	.word	0x20000d24
    23cc:	003fffff 	.word	0x003fffff
    23d0:	00000000 	.word	0x00000000
    23d4:	20000010 	.word	0x20000010

000023d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    23d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23dc:	48a5      	ldr	r0, [pc, #660]	; (2674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    23de:	b08c      	sub	sp, #48	; 0x30
    23e0:	6800      	ldr	r0, [r0, #0]
    23e2:	05c0      	lsls	r0, r0, #23
    23e4:	0dc0      	lsrs	r0, r0, #23
    23e6:	d011      	beq.n	240c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    23e8:	3810      	subs	r0, #16
    23ea:	b240      	sxtb	r0, r0
    23ec:	2800      	cmp	r0, #0
    23ee:	bfb8      	it	lt
    23f0:	f000 000f 	andlt.w	r0, r0, #15
    23f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    23f8:	bfac      	ite	ge
    23fa:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    23fe:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2402:	0940      	lsrs	r0, r0, #5
    2404:	bf08      	it	eq
    2406:	f04f 0901 	moveq.w	r9, #1
    240a:	d001      	beq.n	2410 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    240c:	f04f 0900 	mov.w	r9, #0
    2410:	980c      	ldr	r0, [sp, #48]	; 0x30
    2412:	7800      	ldrb	r0, [r0, #0]
    2414:	2800      	cmp	r0, #0
    2416:	f04f 0000 	mov.w	r0, #0
    241a:	bf1c      	itt	ne
    241c:	b00d      	addne	sp, #52	; 0x34
    241e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2422:	f8df a254 	ldr.w	sl, [pc, #596]	; 2678 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2426:	4d95      	ldr	r5, [pc, #596]	; (267c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2428:	4c95      	ldr	r4, [pc, #596]	; (2680 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    242a:	f04f 0b00 	mov.w	fp, #0
    242e:	900b      	str	r0, [sp, #44]	; 0x2c
    2430:	b125      	cbz	r5, 243c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2432:	2100      	movs	r1, #0
    2434:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2438:	f3af 8000 	nop.w
    243c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2440:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2444:	f04f 0800 	mov.w	r8, #0
    2448:	b125      	cbz	r5, 2454 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    244a:	2100      	movs	r1, #0
    244c:	f240 605d 	movw	r0, #1629	; 0x65d
    2450:	f3af 8000 	nop.w
    2454:	f1b9 0f00 	cmp.w	r9, #0
    2458:	d11d      	bne.n	2496 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    245a:	4637      	mov	r7, r6
    245c:	2001      	movs	r0, #1
    245e:	ea20 0607 	bic.w	r6, r0, r7
    2462:	4888      	ldr	r0, [pc, #544]	; (2684 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2464:	2240      	movs	r2, #64	; 0x40
    2466:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    246a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    246e:	f00a fc8d 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2472:	b125      	cbz	r5, 247e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2474:	2100      	movs	r1, #0
    2476:	f240 50cd 	movw	r0, #1485	; 0x5cd
    247a:	f3af 8000 	nop.w
    247e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2482:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2486:	6a09      	ldr	r1, [r1, #32]
    2488:	6201      	str	r1, [r0, #32]
    248a:	b125      	cbz	r5, 2496 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    248c:	2100      	movs	r1, #0
    248e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2492:	f3af 8000 	nop.w
    2496:	b125      	cbz	r5, 24a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2498:	2100      	movs	r1, #0
    249a:	f240 6065 	movw	r0, #1637	; 0x665
    249e:	f3af 8000 	nop.w
    24a2:	f000 fe9d 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    24a6:	4607      	mov	r7, r0
    24a8:	4633      	mov	r3, r6
    24aa:	466a      	mov	r2, sp
    24ac:	990c      	ldr	r1, [sp, #48]	; 0x30
    24ae:	f7ff f887 	bl	15c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x238>
    24b2:	b125      	cbz	r5, 24be <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    24b4:	2100      	movs	r1, #0
    24b6:	f240 606b 	movw	r0, #1643	; 0x66b
    24ba:	f3af 8000 	nop.w
    24be:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24c2:	2820      	cmp	r0, #32
    24c4:	d014      	beq.n	24f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    24c6:	6920      	ldr	r0, [r4, #16]
    24c8:	9900      	ldr	r1, [sp, #0]
    24ca:	1a09      	subs	r1, r1, r0
    24cc:	0209      	lsls	r1, r1, #8
    24ce:	17ca      	asrs	r2, r1, #31
    24d0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    24d4:	1209      	asrs	r1, r1, #8
    24d6:	d50b      	bpl.n	24f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    24d8:	e9dd 2100 	ldrd	r2, r1, [sp]
    24dc:	1a89      	subs	r1, r1, r2
    24de:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    24e2:	4408      	add	r0, r1
    24e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24e8:	e9cd 2000 	strd	r2, r0, [sp]
    24ec:	f04f 0801 	mov.w	r8, #1
    24f0:	b14d      	cbz	r5, 2506 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    24f2:	2100      	movs	r1, #0
    24f4:	f240 6075 	movw	r0, #1653	; 0x675
    24f8:	f3af 8000 	nop.w
    24fc:	2100      	movs	r1, #0
    24fe:	f240 607b 	movw	r0, #1659	; 0x67b
    2502:	f3af 8000 	nop.w
    2506:	9800      	ldr	r0, [sp, #0]
    2508:	9901      	ldr	r1, [sp, #4]
    250a:	1bc0      	subs	r0, r0, r7
    250c:	1bc9      	subs	r1, r1, r7
    250e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2512:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2516:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    251a:	d205      	bcs.n	2528 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    251c:	458a      	cmp	sl, r1
    251e:	d303      	bcc.n	2528 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2520:	f1b9 0f00 	cmp.w	r9, #0
    2524:	d10c      	bne.n	2540 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2526:	e003      	b.n	2530 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2528:	f1b9 0f00 	cmp.w	r9, #0
    252c:	d038      	beq.n	25a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    252e:	e094      	b.n	265a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2530:	4633      	mov	r3, r6
    2532:	463a      	mov	r2, r7
    2534:	4669      	mov	r1, sp
    2536:	4854      	ldr	r0, [pc, #336]	; (2688 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2538:	f7fe fbbc 	bl	cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    253c:	ea48 0800 	orr.w	r8, r8, r0
    2540:	f1b8 0f00 	cmp.w	r8, #0
    2544:	d022      	beq.n	258c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2546:	9800      	ldr	r0, [sp, #0]
    2548:	f00a fab2 	bl	cab0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    254c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2550:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2554:	4b4d      	ldr	r3, [pc, #308]	; (268c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2556:	4411      	add	r1, r2
    2558:	1c49      	adds	r1, r1, #1
    255a:	1842      	adds	r2, r0, r1
    255c:	4298      	cmp	r0, r3
    255e:	d841      	bhi.n	25e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2560:	4849      	ldr	r0, [pc, #292]	; (2688 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2562:	4281      	cmp	r1, r0
    2564:	dc5a      	bgt.n	261c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2566:	4240      	negs	r0, r0
    2568:	4281      	cmp	r1, r0
    256a:	db5f      	blt.n	262c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    256c:	1c58      	adds	r0, r3, #1
    256e:	4290      	cmp	r0, r2
    2570:	bfdc      	itt	le
    2572:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2576:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    257a:	dd05      	ble.n	2588 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    257c:	2a00      	cmp	r2, #0
    257e:	bfbc      	itt	lt
    2580:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2584:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2588:	980c      	ldr	r0, [sp, #48]	; 0x30
    258a:	60c2      	str	r2, [r0, #12]
    258c:	2001      	movs	r0, #1
    258e:	900b      	str	r0, [sp, #44]	; 0x2c
    2590:	2d00      	cmp	r5, #0
    2592:	d062      	beq.n	265a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2594:	2100      	movs	r1, #0
    2596:	f240 608e 	movw	r0, #1678	; 0x68e
    259a:	f3af 8000 	nop.w
    259e:	e05c      	b.n	265a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    25a0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    25a4:	aa08      	add	r2, sp, #32
    25a6:	a907      	add	r1, sp, #28
    25a8:	f000 fcbc 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25ac:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    25b0:	2820      	cmp	r0, #32
    25b2:	d01c      	beq.n	25ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    25b4:	6920      	ldr	r0, [r4, #16]
    25b6:	1d40      	adds	r0, r0, #5
    25b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25bc:	e9dd 2100 	ldrd	r2, r1, [sp]
    25c0:	1a89      	subs	r1, r1, r2
    25c2:	4401      	add	r1, r0
    25c4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    25c8:	e9cd 0100 	strd	r0, r1, [sp]
    25cc:	f00a fa70 	bl	cab0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    25d0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    25d4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    25d8:	4b2c      	ldr	r3, [pc, #176]	; (268c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    25da:	4411      	add	r1, r2
    25dc:	1c4a      	adds	r2, r1, #1
    25de:	1881      	adds	r1, r0, r2
    25e0:	4298      	cmp	r0, r3
    25e2:	d918      	bls.n	2616 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    25e4:	f240 6109 	movw	r1, #1545	; 0x609
    25e8:	2070      	movs	r0, #112	; 0x70
    25ea:	f001 fcdf 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25ee:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    25f2:	f107 0609 	add.w	r6, r7, #9
    25f6:	b120      	cbz	r0, 2602 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    25f8:	f001 fc60 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    25fc:	2800      	cmp	r0, #0
    25fe:	bf08      	it	eq
    2600:	3632      	addeq	r6, #50	; 0x32
    2602:	4823      	ldr	r0, [pc, #140]	; (2690 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2604:	7841      	ldrb	r1, [r0, #1]
    2606:	9807      	ldr	r0, [sp, #28]
    2608:	4281      	cmp	r1, r0
    260a:	bf84      	itt	hi
    260c:	1a08      	subhi	r0, r1, r0
    260e:	4406      	addhi	r6, r0
    2610:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2614:	e7d2      	b.n	25bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2616:	481c      	ldr	r0, [pc, #112]	; (2688 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2618:	4282      	cmp	r2, r0
    261a:	dd04      	ble.n	2626 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    261c:	f240 610a 	movw	r1, #1546	; 0x60a
    2620:	2070      	movs	r0, #112	; 0x70
    2622:	f001 fcc3 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2626:	481b      	ldr	r0, [pc, #108]	; (2694 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2628:	4282      	cmp	r2, r0
    262a:	da04      	bge.n	2636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    262c:	f240 610b 	movw	r1, #1547	; 0x60b
    2630:	2070      	movs	r0, #112	; 0x70
    2632:	f001 fcbb 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2636:	4818      	ldr	r0, [pc, #96]	; (2698 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2638:	4288      	cmp	r0, r1
    263a:	bfdc      	itt	le
    263c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2640:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2644:	dd05      	ble.n	2652 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2646:	2900      	cmp	r1, #0
    2648:	bfbc      	itt	lt
    264a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    264e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2652:	980c      	ldr	r0, [sp, #48]	; 0x30
    2654:	60c1      	str	r1, [r0, #12]
    2656:	2001      	movs	r0, #1
    2658:	900b      	str	r0, [sp, #44]	; 0x2c
    265a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    265e:	f88d 0010 	strb.w	r0, [sp, #16]
    2662:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2666:	2800      	cmp	r0, #0
    2668:	f47f aee2 	bne.w	2430 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    266c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    266e:	b00d      	add	sp, #52	; 0x34
    2670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2674:	e000ed04 	.word	0xe000ed04
    2678:	003fffff 	.word	0x003fffff
    267c:	00000000 	.word	0x00000000
    2680:	20000da4 	.word	0x20000da4
    2684:	20000d24 	.word	0x20000d24
    2688:	07a12000 	.word	0x07a12000
    268c:	1e847fff 	.word	0x1e847fff
    2690:	20000012 	.word	0x20000012
    2694:	f85ee000 	.word	0xf85ee000
    2698:	1e848000 	.word	0x1e848000

0000269c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    269c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26a0:	4d88      	ldr	r5, [pc, #544]	; (28c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    26a2:	b08c      	sub	sp, #48	; 0x30
    26a4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    26a8:	2000      	movs	r0, #0
    26aa:	9009      	str	r0, [sp, #36]	; 0x24
    26ac:	2001      	movs	r0, #1
    26ae:	4c86      	ldr	r4, [pc, #536]	; (28c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    26b0:	f04f 0900 	mov.w	r9, #0
    26b4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    26b8:	4680      	mov	r8, r0
    26ba:	9008      	str	r0, [sp, #32]
    26bc:	b124      	cbz	r4, 26c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    26be:	2100      	movs	r1, #0
    26c0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    26c4:	f3af 8000 	nop.w
    26c8:	9808      	ldr	r0, [sp, #32]
    26ca:	2800      	cmp	r0, #0
    26cc:	d037      	beq.n	273e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    26ce:	bf00      	nop
    26d0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    26d4:	b124      	cbz	r4, 26e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    26d6:	2100      	movs	r1, #0
    26d8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    26dc:	f3af 8000 	nop.w
    26e0:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    26e4:	2240      	movs	r2, #64	; 0x40
    26e6:	ea28 060a 	bic.w	r6, r8, sl
    26ea:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    26ee:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    26f2:	4683      	mov	fp, r0
    26f4:	f00a fb4a 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26f8:	b124      	cbz	r4, 2704 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    26fa:	2100      	movs	r1, #0
    26fc:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2700:	f3af 8000 	nop.w
    2704:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2708:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    270c:	9000      	str	r0, [sp, #0]
    270e:	6a09      	ldr	r1, [r1, #32]
    2710:	6201      	str	r1, [r0, #32]
    2712:	b124      	cbz	r4, 271e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2714:	2100      	movs	r1, #0
    2716:	f240 50d1 	movw	r0, #1489	; 0x5d1
    271a:	f3af 8000 	nop.w
    271e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2722:	f88d 0008 	strb.w	r0, [sp, #8]
    2726:	f89d 0008 	ldrb.w	r0, [sp, #8]
    272a:	b178      	cbz	r0, 274c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    272c:	2c00      	cmp	r4, #0
    272e:	bf1c      	itt	ne
    2730:	2100      	movne	r1, #0
    2732:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2736:	d0c1      	beq.n	26bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2738:	f3af 8000 	nop.w
    273c:	e7be      	b.n	26bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    273e:	4863      	ldr	r0, [pc, #396]	; (28cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2740:	2800      	cmp	r0, #0
    2742:	bf18      	it	ne
    2744:	f3af 8000 	nopne.w
    2748:	b662      	cpsie	i
    274a:	e7c1      	b.n	26d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    274c:	b124      	cbz	r4, 2758 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    274e:	2100      	movs	r1, #0
    2750:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2754:	f3af 8000 	nop.w
    2758:	980c      	ldr	r0, [sp, #48]	; 0x30
    275a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    275e:	2803      	cmp	r0, #3
    2760:	d172      	bne.n	2848 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2762:	f8dd a000 	ldr.w	sl, [sp]
    2766:	f8cd a018 	str.w	sl, [sp, #24]
    276a:	990c      	ldr	r1, [sp, #48]	; 0x30
    276c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2770:	4288      	cmp	r0, r1
    2772:	bf14      	ite	ne
    2774:	f04f 0b00 	movne.w	fp, #0
    2778:	f04f 0b01 	moveq.w	fp, #1
    277c:	f10a 0c20 	add.w	ip, sl, #32
    2780:	4686      	mov	lr, r0
    2782:	2220      	movs	r2, #32
    2784:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2788:	e003      	b.n	2792 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    278a:	4602      	mov	r2, r0
    278c:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2790:	7840      	ldrb	r0, [r0, #1]
    2792:	4288      	cmp	r0, r1
    2794:	d002      	beq.n	279c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2796:	2820      	cmp	r0, #32
    2798:	d00a      	beq.n	27b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    279a:	e7f6      	b.n	278a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    279c:	2820      	cmp	r0, #32
    279e:	d007      	beq.n	27b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    27a0:	4586      	cmp	lr, r0
    27a2:	d107      	bne.n	27b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    27a4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    27a8:	7840      	ldrb	r0, [r0, #1]
    27aa:	f88c 0000 	strb.w	r0, [ip]
    27ae:	e007      	b.n	27c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    27b0:	4648      	mov	r0, r9
    27b2:	e00c      	b.n	27ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    27b4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    27b8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    27bc:	7840      	ldrb	r0, [r0, #1]
    27be:	7048      	strb	r0, [r1, #1]
    27c0:	b124      	cbz	r4, 27cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    27c2:	2100      	movs	r1, #0
    27c4:	f240 5037 	movw	r0, #1335	; 0x537
    27c8:	f3af 8000 	nop.w
    27cc:	4640      	mov	r0, r8
    27ce:	ea10 0f0b 	tst.w	r0, fp
    27d2:	bf18      	it	ne
    27d4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    27d8:	2800      	cmp	r0, #0
    27da:	d052      	beq.n	2882 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    27dc:	b124      	cbz	r4, 27e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    27de:	2100      	movs	r1, #0
    27e0:	f240 70fd 	movw	r0, #2045	; 0x7fd
    27e4:	f3af 8000 	nop.w
    27e8:	4632      	mov	r2, r6
    27ea:	2001      	movs	r0, #1
    27ec:	990c      	ldr	r1, [sp, #48]	; 0x30
    27ee:	f7ff f88d 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    27f2:	9806      	ldr	r0, [sp, #24]
    27f4:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    27f8:	f88d 0008 	strb.w	r0, [sp, #8]
    27fc:	f89d a008 	ldrb.w	sl, [sp, #8]
    2800:	b124      	cbz	r4, 280c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2802:	2100      	movs	r1, #0
    2804:	f640 0008 	movw	r0, #2056	; 0x808
    2808:	f3af 8000 	nop.w
    280c:	4830      	ldr	r0, [pc, #192]	; (28d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    280e:	2800      	cmp	r0, #0
    2810:	bf18      	it	ne
    2812:	f3af 8000 	nopne.w
    2816:	f3ef 8010 	mrs	r0, PRIMASK
    281a:	b672      	cpsid	i
    281c:	9008      	str	r0, [sp, #32]
    281e:	b124      	cbz	r4, 282a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2820:	2100      	movs	r1, #0
    2822:	f640 000d 	movw	r0, #2061	; 0x80d
    2826:	f3af 8000 	nop.w
    282a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    282e:	f88d 0008 	strb.w	r0, [sp, #8]
    2832:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2836:	b140      	cbz	r0, 284a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2838:	2c00      	cmp	r4, #0
    283a:	bf1c      	itt	ne
    283c:	2100      	movne	r1, #0
    283e:	f640 0011 	movwne	r0, #2065	; 0x811
    2842:	f43f af3b 	beq.w	26bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2846:	e777      	b.n	2738 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2848:	e01b      	b.n	2882 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    284a:	f1ba 0f00 	cmp.w	sl, #0
    284e:	d008      	beq.n	2862 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2850:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2854:	2820      	cmp	r0, #32
    2856:	d104      	bne.n	2862 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2858:	4631      	mov	r1, r6
    285a:	2002      	movs	r0, #2
    285c:	f7ff f886 	bl	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    2860:	b308      	cbz	r0, 28a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2862:	b124      	cbz	r4, 286e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2864:	2100      	movs	r1, #0
    2866:	f640 0025 	movw	r0, #2085	; 0x825
    286a:	f3af 8000 	nop.w
    286e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2872:	ea28 0000 	bic.w	r0, r8, r0
    2876:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    287a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    287e:	2001      	movs	r0, #1
    2880:	9009      	str	r0, [sp, #36]	; 0x24
    2882:	b124      	cbz	r4, 288e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2884:	2100      	movs	r1, #0
    2886:	f640 002e 	movw	r0, #2094	; 0x82e
    288a:	f3af 8000 	nop.w
    288e:	9808      	ldr	r0, [sp, #32]
    2890:	b188      	cbz	r0, 28b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    2892:	b124      	cbz	r4, 289e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2894:	2100      	movs	r1, #0
    2896:	f640 0032 	movw	r0, #2098	; 0x832
    289a:	f3af 8000 	nop.w
    289e:	9809      	ldr	r0, [sp, #36]	; 0x24
    28a0:	b00d      	add	sp, #52	; 0x34
    28a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28a6:	2c00      	cmp	r4, #0
    28a8:	d0f1      	beq.n	288e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    28aa:	2100      	movs	r1, #0
    28ac:	f44f 6002 	mov.w	r0, #2080	; 0x820
    28b0:	f3af 8000 	nop.w
    28b4:	e7e6      	b.n	2884 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    28b6:	4805      	ldr	r0, [pc, #20]	; (28cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    28b8:	2800      	cmp	r0, #0
    28ba:	bf18      	it	ne
    28bc:	f3af 8000 	nopne.w
    28c0:	b662      	cpsie	i
    28c2:	e7e6      	b.n	2892 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    28c4:	20000da4 	.word	0x20000da4
	...

000028d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    28d4:	b510      	push	{r4, lr}
    28d6:	2820      	cmp	r0, #32
    28d8:	d211      	bcs.n	28fe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    28da:	490e      	ldr	r1, [pc, #56]	; (2914 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    28dc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    28e0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    28e4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    28e8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    28ec:	b13b      	cbz	r3, 28fe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    28ee:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    28f2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    28f6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    28fa:	2a01      	cmp	r2, #1
    28fc:	d001      	beq.n	2902 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    28fe:	2000      	movs	r0, #0
    2900:	bd10      	pop	{r4, pc}
    2902:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2906:	4601      	mov	r1, r0
    2908:	2000      	movs	r0, #0
    290a:	f7fe ffff 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    290e:	2001      	movs	r0, #1
    2910:	bd10      	pop	{r4, pc}
    2912:	0000      	.short	0x0000
    2914:	20000da4 	.word	0x20000da4

00002918 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    291c:	4e80      	ldr	r6, [pc, #512]	; (2b20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    291e:	4680      	mov	r8, r0
    2920:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2924:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2928:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    292c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2930:	2800      	cmp	r0, #0
    2932:	d068      	beq.n	2a06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2934:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2938:	4d7a      	ldr	r5, [pc, #488]	; (2b24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    293a:	b125      	cbz	r5, 2946 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    293c:	2100      	movs	r1, #0
    293e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2942:	f3af 8000 	nop.w
    2946:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    294a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    294e:	2801      	cmp	r0, #1
    2950:	d018      	beq.n	2984 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2952:	b2c0      	uxtb	r0, r0
    2954:	2804      	cmp	r0, #4
    2956:	bf1c      	itt	ne
    2958:	2805      	cmpne	r0, #5
    295a:	2806      	cmpne	r0, #6
    295c:	d058      	beq.n	2a10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    295e:	b12d      	cbz	r5, 296c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2960:	f04f 0100 	mov.w	r1, #0
    2964:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2968:	f3af 8000 	nop.w
    296c:	f001 fc44 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2970:	b125      	cbz	r5, 297c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2972:	2100      	movs	r1, #0
    2974:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2978:	f3af 8000 	nop.w
    297c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2980:	2801      	cmp	r0, #1
    2982:	d1e6      	bne.n	2952 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2984:	2401      	movs	r4, #1
    2986:	b125      	cbz	r5, 2992 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2988:	2100      	movs	r1, #0
    298a:	f640 30d8 	movw	r0, #3032	; 0xbd8
    298e:	f3af 8000 	nop.w
    2992:	2c00      	cmp	r4, #0
    2994:	d042      	beq.n	2a1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2996:	2000      	movs	r0, #0
    2998:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    299c:	b125      	cbz	r5, 29a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    299e:	2100      	movs	r1, #0
    29a0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    29a4:	f3af 8000 	nop.w
    29a8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    29ac:	2001      	movs	r0, #1
    29ae:	ea20 090b 	bic.w	r9, r0, fp
    29b2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    29b6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    29ba:	2240      	movs	r2, #64	; 0x40
    29bc:	f00a f9e6 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    29c0:	b125      	cbz	r5, 29cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    29c2:	2100      	movs	r1, #0
    29c4:	f240 50cd 	movw	r0, #1485	; 0x5cd
    29c8:	f3af 8000 	nop.w
    29cc:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    29d0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    29d4:	6a00      	ldr	r0, [r0, #32]
    29d6:	f8ca 0020 	str.w	r0, [sl, #32]
    29da:	b125      	cbz	r5, 29e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    29dc:	2100      	movs	r1, #0
    29de:	f240 50d1 	movw	r0, #1489	; 0x5d1
    29e2:	f3af 8000 	nop.w
    29e6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    29ea:	f88d 0000 	strb.w	r0, [sp]
    29ee:	f89d 0000 	ldrb.w	r0, [sp]
    29f2:	b1d0      	cbz	r0, 2a2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    29f4:	2d00      	cmp	r5, #0
    29f6:	bf1c      	itt	ne
    29f8:	2100      	movne	r1, #0
    29fa:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    29fe:	d0c2      	beq.n	2986 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2a00:	f3af 8000 	nop.w
    2a04:	e7bf      	b.n	2986 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2a06:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2a0a:	2070      	movs	r0, #112	; 0x70
    2a0c:	f001 face 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a10:	464a      	mov	r2, r9
    2a12:	4641      	mov	r1, r8
    2a14:	2001      	movs	r0, #1
    2a16:	f7fe ff79 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    2a1a:	e7a9      	b.n	2970 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2a1c:	4842      	ldr	r0, [pc, #264]	; (2b28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2a1e:	2800      	cmp	r0, #0
    2a20:	bf18      	it	ne
    2a22:	f3af 8000 	nopne.w
    2a26:	b662      	cpsie	i
    2a28:	e7b5      	b.n	2996 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2a2a:	b125      	cbz	r5, 2a36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2a2c:	2100      	movs	r1, #0
    2a2e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2a32:	f3af 8000 	nop.w
    2a36:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    2a3a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2a3e:	4614      	mov	r4, r2
    2a40:	f04f 0b20 	mov.w	fp, #32
    2a44:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2a48:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2a4c:	e003      	b.n	2a56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2a4e:	46a3      	mov	fp, r4
    2a50:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2a54:	785c      	ldrb	r4, [r3, #1]
    2a56:	4544      	cmp	r4, r8
    2a58:	d002      	beq.n	2a60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    2a5a:	2c20      	cmp	r4, #32
    2a5c:	d02b      	beq.n	2ab6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2a5e:	e7f6      	b.n	2a4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2a60:	2c20      	cmp	r4, #32
    2a62:	d028      	beq.n	2ab6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2a64:	42a2      	cmp	r2, r4
    2a66:	d104      	bne.n	2a72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2a68:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2a6c:	7840      	ldrb	r0, [r0, #1]
    2a6e:	7008      	strb	r0, [r1, #0]
    2a70:	e005      	b.n	2a7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2a72:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2a76:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    2a7a:	7849      	ldrb	r1, [r1, #1]
    2a7c:	7041      	strb	r1, [r0, #1]
    2a7e:	f1ba 0f00 	cmp.w	sl, #0
    2a82:	d011      	beq.n	2aa8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2a84:	b125      	cbz	r5, 2a90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2a86:	2100      	movs	r1, #0
    2a88:	f240 502f 	movw	r0, #1327	; 0x52f
    2a8c:	f3af 8000 	nop.w
    2a90:	f89a 0000 	ldrb.w	r0, [sl]
    2a94:	42a0      	cmp	r0, r4
    2a96:	d107      	bne.n	2aa8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2a98:	b125      	cbz	r5, 2aa4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    2a9a:	2100      	movs	r1, #0
    2a9c:	f240 5032 	movw	r0, #1330	; 0x532
    2aa0:	f3af 8000 	nop.w
    2aa4:	f88a b000 	strb.w	fp, [sl]
    2aa8:	b15d      	cbz	r5, 2ac2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2aaa:	2100      	movs	r1, #0
    2aac:	f240 5037 	movw	r0, #1335	; 0x537
    2ab0:	f3af 8000 	nop.w
    2ab4:	e000      	b.n	2ab8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    2ab6:	b125      	cbz	r5, 2ac2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2ab8:	2100      	movs	r1, #0
    2aba:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2abe:	f3af 8000 	nop.w
    2ac2:	481a      	ldr	r0, [pc, #104]	; (2b2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2ac4:	2800      	cmp	r0, #0
    2ac6:	bf18      	it	ne
    2ac8:	f3af 8000 	nopne.w
    2acc:	f3ef 8410 	mrs	r4, PRIMASK
    2ad0:	b672      	cpsid	i
    2ad2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2ad6:	f88d 0000 	strb.w	r0, [sp]
    2ada:	f89d 0000 	ldrb.w	r0, [sp]
    2ade:	b138      	cbz	r0, 2af0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2ae0:	2d00      	cmp	r5, #0
    2ae2:	bf1c      	itt	ne
    2ae4:	2100      	movne	r1, #0
    2ae6:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    2aea:	f43f af4c 	beq.w	2986 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2aee:	e787      	b.n	2a00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2af0:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2af4:	2001      	movs	r0, #1
    2af6:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2afa:	b154      	cbz	r4, 2b12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2afc:	2d00      	cmp	r5, #0
    2afe:	bf08      	it	eq
    2b00:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b04:	2100      	movs	r1, #0
    2b06:	f640 30fe 	movw	r0, #3070	; 0xbfe
    2b0a:	f3af 8000 	nop.w
    2b0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b12:	4805      	ldr	r0, [pc, #20]	; (2b28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2b14:	2800      	cmp	r0, #0
    2b16:	bf18      	it	ne
    2b18:	f3af 8000 	nopne.w
    2b1c:	b662      	cpsie	i
    2b1e:	e7ed      	b.n	2afc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2b20:	20000da4 	.word	0x20000da4
	...

00002b30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2b30:	b570      	push	{r4, r5, r6, lr}
    2b32:	460d      	mov	r5, r1
    2b34:	4606      	mov	r6, r0
    2b36:	f001 f9af 	bl	3e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2b3a:	480f      	ldr	r0, [pc, #60]	; (2b78 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2b3c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2b40:	2400      	movs	r4, #0
    2b42:	3880      	subs	r0, #128	; 0x80
    2b44:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2b48:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2b4c:	b129      	cbz	r1, 2b5a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2b4e:	1c61      	adds	r1, r4, #1
    2b50:	b2cc      	uxtb	r4, r1
    2b52:	2c20      	cmp	r4, #32
    2b54:	d3f8      	bcc.n	2b48 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2b56:	2020      	movs	r0, #32
    2b58:	bd70      	pop	{r4, r5, r6, pc}
    2b5a:	4808      	ldr	r0, [pc, #32]	; (2b7c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2b5c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2b60:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2b64:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2b68:	4621      	mov	r1, r4
    2b6a:	6045      	str	r5, [r0, #4]
    2b6c:	2001      	movs	r0, #1
    2b6e:	f7fe fecd 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    2b72:	4620      	mov	r0, r4
    2b74:	bd70      	pop	{r4, r5, r6, pc}
    2b76:	0000      	.short	0x0000
    2b78:	20000da4 	.word	0x20000da4
    2b7c:	20000a24 	.word	0x20000a24

00002b80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b84:	b083      	sub	sp, #12
    2b86:	f000 fb2b 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2b8a:	4605      	mov	r5, r0
    2b8c:	f000 fdf4 	bl	3778 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2b90:	4c67      	ldr	r4, [pc, #412]	; (2d30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2b92:	68a0      	ldr	r0, [r4, #8]
    2b94:	f1b0 3fff 	cmp.w	r0, #4294967295
    2b98:	bf1c      	itt	ne
    2b9a:	f04f 30ff 	movne.w	r0, #4294967295
    2b9e:	60a0      	strne	r0, [r4, #8]
    2ba0:	7fa0      	ldrb	r0, [r4, #30]
    2ba2:	f8df b190 	ldr.w	fp, [pc, #400]	; 2d34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    2ba6:	b9a8      	cbnz	r0, 2bd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2ba8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2bac:	1a08      	subs	r0, r1, r0
    2bae:	0200      	lsls	r0, r0, #8
    2bb0:	17c1      	asrs	r1, r0, #31
    2bb2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2bb6:	1200      	asrs	r0, r0, #8
    2bb8:	f44f 710c 	mov.w	r1, #560	; 0x230
    2bbc:	f009 ffa5 	bl	cb0a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2bc0:	6921      	ldr	r1, [r4, #16]
    2bc2:	4408      	add	r0, r1
    2bc4:	1a28      	subs	r0, r5, r0
    2bc6:	0200      	lsls	r0, r0, #8
    2bc8:	17c1      	asrs	r1, r0, #31
    2bca:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2bce:	1200      	asrs	r0, r0, #8
    2bd0:	0fc0      	lsrs	r0, r0, #31
    2bd2:	d013      	beq.n	2bfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2bd4:	7e60      	ldrb	r0, [r4, #25]
    2bd6:	b328      	cbz	r0, 2c24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2bd8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2bdc:	f88d 0000 	strb.w	r0, [sp]
    2be0:	f89d 0000 	ldrb.w	r0, [sp]
    2be4:	b1f0      	cbz	r0, 2c24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2be6:	f000 fc09 	bl	33fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2bea:	bf00      	nop
    2bec:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2bf0:	b1f0      	cbz	r0, 2c30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2bf2:	f240 4147 	movw	r1, #1095	; 0x447
    2bf6:	2070      	movs	r0, #112	; 0x70
    2bf8:	f001 f9d8 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bfc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2c00:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2c04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2c08:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2c0c:	6840      	ldr	r0, [r0, #4]
    2c0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2c12:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2c16:	2108      	movs	r1, #8
    2c18:	4790      	blx	r2
    2c1a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    2c1e:	2070      	movs	r0, #112	; 0x70
    2c20:	f001 f9c4 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c24:	1ce8      	adds	r0, r5, #3
    2c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c2a:	f000 fadf 	bl	31ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c2e:	e7dd      	b.n	2bec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2c30:	f04f 0a01 	mov.w	sl, #1
    2c34:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2c38:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2c3c:	2820      	cmp	r0, #32
    2c3e:	d024      	beq.n	2c8a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2c40:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2c44:	2020      	movs	r0, #32
    2c46:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2c4a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2c4e:	2600      	movs	r6, #0
    2c50:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2c54:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2c58:	4837      	ldr	r0, [pc, #220]	; (2d38 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    2c5a:	6026      	str	r6, [r4, #0]
    2c5c:	7800      	ldrb	r0, [r0, #0]
    2c5e:	2802      	cmp	r0, #2
    2c60:	bf16      	itet	ne
    2c62:	2803      	cmpne	r0, #3
    2c64:	2001      	moveq	r0, #1
    2c66:	2000      	movne	r0, #0
    2c68:	7720      	strb	r0, [r4, #28]
    2c6a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2c6e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2c72:	f899 0020 	ldrb.w	r0, [r9, #32]
    2c76:	2820      	cmp	r0, #32
    2c78:	d031      	beq.n	2cde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2c7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2c7e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2c82:	7d81      	ldrb	r1, [r0, #22]
    2c84:	2901      	cmp	r1, #1
    2c86:	d005      	beq.n	2c94 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2c88:	e029      	b.n	2cde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2c8a:	f240 414a 	movw	r1, #1098	; 0x44a
    2c8e:	2070      	movs	r0, #112	; 0x70
    2c90:	f001 f98c 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c94:	46ab      	mov	fp, r5
    2c96:	f100 0508 	add.w	r5, r0, #8
    2c9a:	8a40      	ldrh	r0, [r0, #18]
    2c9c:	aa01      	add	r2, sp, #4
    2c9e:	4669      	mov	r1, sp
    2ca0:	f000 f940 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2ca4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ca8:	2820      	cmp	r0, #32
    2caa:	d004      	beq.n	2cb6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2cac:	6920      	ldr	r0, [r4, #16]
    2cae:	1d40      	adds	r0, r0, #5
    2cb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cb4:	e00b      	b.n	2cce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2cb6:	8968      	ldrh	r0, [r5, #10]
    2cb8:	f10b 0b09 	add.w	fp, fp, #9
    2cbc:	b128      	cbz	r0, 2cca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    2cbe:	f001 f8fd 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2cc2:	2800      	cmp	r0, #0
    2cc4:	bf08      	it	eq
    2cc6:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    2cca:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2cce:	e9d5 2100 	ldrd	r2, r1, [r5]
    2cd2:	1a89      	subs	r1, r1, r2
    2cd4:	6028      	str	r0, [r5, #0]
    2cd6:	4408      	add	r0, r1
    2cd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cdc:	6068      	str	r0, [r5, #4]
    2cde:	4639      	mov	r1, r7
    2ce0:	2001      	movs	r0, #1
    2ce2:	f7fe fe43 	bl	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    2ce6:	2800      	cmp	r0, #0
    2ce8:	d0f9      	beq.n	2cde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2cea:	4814      	ldr	r0, [pc, #80]	; (2d3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2cec:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2cf0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2cf4:	2802      	cmp	r0, #2
    2cf6:	d104      	bne.n	2d02 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2cf8:	463a      	mov	r2, r7
    2cfa:	4641      	mov	r1, r8
    2cfc:	2006      	movs	r0, #6
    2cfe:	f7fe fe05 	bl	190c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x584>
    2d02:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2d06:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2d0a:	2820      	cmp	r0, #32
    2d0c:	d003      	beq.n	2d16 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    2d0e:	480c      	ldr	r0, [pc, #48]	; (2d40 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2d10:	7840      	ldrb	r0, [r0, #1]
    2d12:	f001 fa1b 	bl	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2d16:	7f20      	ldrb	r0, [r4, #28]
    2d18:	2800      	cmp	r0, #0
    2d1a:	bf04      	itt	eq
    2d1c:	b003      	addeq	sp, #12
    2d1e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d22:	f000 fd73 	bl	380c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2d26:	7726      	strb	r6, [r4, #28]
    2d28:	7766      	strb	r6, [r4, #29]
    2d2a:	b003      	add	sp, #12
    2d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d30:	20000da4 	.word	0x20000da4
    2d34:	20000a24 	.word	0x20000a24
    2d38:	20000012 	.word	0x20000012
    2d3c:	20000d24 	.word	0x20000d24
    2d40:	20000010 	.word	0x20000010

00002d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2d44:	b510      	push	{r4, lr}
    2d46:	4c32      	ldr	r4, [pc, #200]	; (2e10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2d48:	b082      	sub	sp, #8
    2d4a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2d4e:	2920      	cmp	r1, #32
    2d50:	d008      	beq.n	2d64 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2d52:	68a1      	ldr	r1, [r4, #8]
    2d54:	f1b1 3fff 	cmp.w	r1, #4294967295
    2d58:	d009      	beq.n	2d6e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2d5a:	f640 21e9 	movw	r1, #2793	; 0xae9
    2d5e:	2070      	movs	r0, #112	; 0x70
    2d60:	f001 f924 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d64:	f640 21e8 	movw	r1, #2792	; 0xae8
    2d68:	2070      	movs	r0, #112	; 0x70
    2d6a:	f001 f91f 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d6e:	6862      	ldr	r2, [r4, #4]
    2d70:	4601      	mov	r1, r0
    2d72:	4b28      	ldr	r3, [pc, #160]	; (2e14 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2d74:	1850      	adds	r0, r2, r1
    2d76:	429a      	cmp	r2, r3
    2d78:	d904      	bls.n	2d84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    2d7a:	f240 6109 	movw	r1, #1545	; 0x609
    2d7e:	2070      	movs	r0, #112	; 0x70
    2d80:	f001 f914 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d84:	4a24      	ldr	r2, [pc, #144]	; (2e18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2d86:	4291      	cmp	r1, r2
    2d88:	dd04      	ble.n	2d94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    2d8a:	f240 610a 	movw	r1, #1546	; 0x60a
    2d8e:	2070      	movs	r0, #112	; 0x70
    2d90:	f001 f90c 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d94:	4a21      	ldr	r2, [pc, #132]	; (2e1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2d96:	4291      	cmp	r1, r2
    2d98:	da04      	bge.n	2da4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    2d9a:	f240 610b 	movw	r1, #1547	; 0x60b
    2d9e:	2070      	movs	r0, #112	; 0x70
    2da0:	f001 f904 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2da4:	491e      	ldr	r1, [pc, #120]	; (2e20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2da6:	4281      	cmp	r1, r0
    2da8:	bfdc      	itt	le
    2daa:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2dae:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2db2:	dd05      	ble.n	2dc0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2db4:	2800      	cmp	r0, #0
    2db6:	bfbc      	itt	lt
    2db8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2dbc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2dc0:	aa01      	add	r2, sp, #4
    2dc2:	4669      	mov	r1, sp
    2dc4:	f000 f8ae 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2dc8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2dcc:	280f      	cmp	r0, #15
    2dce:	bf8c      	ite	hi
    2dd0:	2001      	movhi	r0, #1
    2dd2:	2000      	movls	r0, #0
    2dd4:	9900      	ldr	r1, [sp, #0]
    2dd6:	4408      	add	r0, r1
    2dd8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2ddc:	60a1      	str	r1, [r4, #8]
    2dde:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2de2:	f88d 0000 	strb.w	r0, [sp]
    2de6:	f89d 0000 	ldrb.w	r0, [sp]
    2dea:	2800      	cmp	r0, #0
    2dec:	bf04      	itt	eq
    2dee:	b002      	addeq	sp, #8
    2df0:	bd10      	popeq	{r4, pc}
    2df2:	2301      	movs	r3, #1
    2df4:	2203      	movs	r2, #3
    2df6:	2005      	movs	r0, #5
    2df8:	f000 fb7c 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2dfc:	2800      	cmp	r0, #0
    2dfe:	bf1c      	itt	ne
    2e00:	b002      	addne	sp, #8
    2e02:	bd10      	popne	{r4, pc}
    2e04:	f640 21f1 	movw	r1, #2801	; 0xaf1
    2e08:	2070      	movs	r0, #112	; 0x70
    2e0a:	f001 f8cf 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e0e:	0000      	.short	0x0000
    2e10:	20000da4 	.word	0x20000da4
    2e14:	1e847fff 	.word	0x1e847fff
    2e18:	07a12000 	.word	0x07a12000
    2e1c:	f85ee000 	.word	0xf85ee000
    2e20:	1e848000 	.word	0x1e848000

00002e24 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2e24:	b570      	push	{r4, r5, r6, lr}
    2e26:	4c1e      	ldr	r4, [pc, #120]	; (2ea0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2e28:	2120      	movs	r1, #32
    2e2a:	f884 1020 	strb.w	r1, [r4, #32]
    2e2e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2e32:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2e36:	2000      	movs	r0, #0
    2e38:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2e3c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2e40:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2e44:	1e42      	subs	r2, r0, #1
    2e46:	60a2      	str	r2, [r4, #8]
    2e48:	6020      	str	r0, [r4, #0]
    2e4a:	77a0      	strb	r0, [r4, #30]
    2e4c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2e50:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2e54:	7720      	strb	r0, [r4, #28]
    2e56:	7760      	strb	r0, [r4, #29]
    2e58:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2e5c:	4911      	ldr	r1, [pc, #68]	; (2ea4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2e5e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2e62:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2e66:	7008      	strb	r0, [r1, #0]
    2e68:	7048      	strb	r0, [r1, #1]
    2e6a:	8048      	strh	r0, [r1, #2]
    2e6c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2e70:	2210      	movs	r2, #16
    2e72:	7088      	strb	r0, [r1, #2]
    2e74:	f801 0f04 	strb.w	r0, [r1, #4]!
    2e78:	1e52      	subs	r2, r2, #1
    2e7a:	d1fa      	bne.n	2e72 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2e7c:	4d0a      	ldr	r5, [pc, #40]	; (2ea8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2e7e:	2601      	movs	r6, #1
    2e80:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2e84:	20ff      	movs	r0, #255	; 0xff
    2e86:	7028      	strb	r0, [r5, #0]
    2e88:	4808      	ldr	r0, [pc, #32]	; (2eac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2e8a:	f001 f941 	bl	4110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2e8e:	7068      	strb	r0, [r5, #1]
    2e90:	f001 f99c 	bl	41cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2e94:	60a8      	str	r0, [r5, #8]
    2e96:	f000 fce7 	bl	3868 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2e9a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2e9e:	bd70      	pop	{r4, r5, r6, pc}
    2ea0:	20000da4 	.word	0x20000da4
    2ea4:	20000012 	.word	0x20000012
    2ea8:	20000010 	.word	0x20000010
    2eac:	000017c9 	.word	0x000017c9

00002eb0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2eb0:	b570      	push	{r4, r5, r6, lr}
    2eb2:	4605      	mov	r5, r0
    2eb4:	2001      	movs	r0, #1
    2eb6:	fa00 f405 	lsl.w	r4, r0, r5
    2eba:	460e      	mov	r6, r1
    2ebc:	2a00      	cmp	r2, #0
    2ebe:	bf08      	it	eq
    2ec0:	4808      	ldreq	r0, [pc, #32]	; (2ee4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2ec2:	d00c      	beq.n	2ede <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2ec4:	2000      	movs	r0, #0
    2ec6:	f000 fcb5 	bl	3834 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2eca:	00e9      	lsls	r1, r5, #3
    2ecc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2ed0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2ed4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2ed8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2edc:	4802      	ldr	r0, [pc, #8]	; (2ee8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2ede:	6004      	str	r4, [r0, #0]
    2ee0:	bd70      	pop	{r4, r5, r6, pc}
    2ee2:	0000      	.short	0x0000
    2ee4:	4001f508 	.word	0x4001f508
    2ee8:	4001f504 	.word	0x4001f504

00002eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2eec:	0b41      	lsrs	r1, r0, #13
    2eee:	f248 6237 	movw	r2, #34359	; 0x8637
    2ef2:	4351      	muls	r1, r2
    2ef4:	0c0a      	lsrs	r2, r1, #16
    2ef6:	4b09      	ldr	r3, [pc, #36]	; (2f1c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2ef8:	0251      	lsls	r1, r2, #9
    2efa:	fb02 0203 	mla	r2, r2, r3, r0
    2efe:	4808      	ldr	r0, [pc, #32]	; (2f20 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2f00:	4350      	muls	r0, r2
    2f02:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2f06:	306e      	adds	r0, #110	; 0x6e
    2f08:	0d40      	lsrs	r0, r0, #21
    2f0a:	425b      	negs	r3, r3
    2f0c:	fb10 f303 	smulbb	r3, r0, r3
    2f10:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2f14:	bf88      	it	hi
    2f16:	1c49      	addhi	r1, r1, #1
    2f18:	4408      	add	r0, r1
    2f1a:	4770      	bx	lr
    2f1c:	ffffc2f7 	.word	0xffffc2f7
    2f20:	00010c6f 	.word	0x00010c6f

00002f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2f24:	0b43      	lsrs	r3, r0, #13
    2f26:	f248 6c37 	movw	ip, #34359	; 0x8637
    2f2a:	fb03 f30c 	mul.w	r3, r3, ip
    2f2e:	b430      	push	{r4, r5}
    2f30:	0c1b      	lsrs	r3, r3, #16
    2f32:	f8df c044 	ldr.w	ip, [pc, #68]	; 2f78 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2f36:	025c      	lsls	r4, r3, #9
    2f38:	fb03 030c 	mla	r3, r3, ip, r0
    2f3c:	480f      	ldr	r0, [pc, #60]	; (2f7c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2f3e:	4358      	muls	r0, r3
    2f40:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2f44:	eb04 000c 	add.w	r0, r4, ip
    2f48:	f643 5409 	movw	r4, #15625	; 0x3d09
    2f4c:	fb1c f404 	smulbb	r4, ip, r4
    2f50:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2f54:	f643 5508 	movw	r5, #15624	; 0x3d08
    2f58:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2f5c:	442c      	add	r4, r5
    2f5e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2f62:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2f66:	bf84      	itt	hi
    2f68:	f04f 0c00 	movhi.w	ip, #0
    2f6c:	1c40      	addhi	r0, r0, #1
    2f6e:	6008      	str	r0, [r1, #0]
    2f70:	f882 c000 	strb.w	ip, [r2]
    2f74:	bc30      	pop	{r4, r5}
    2f76:	4770      	bx	lr
    2f78:	ffffc2f7 	.word	0xffffc2f7
    2f7c:	00010c6f 	.word	0x00010c6f

00002f80 <MPSL_IRQ_RTC0_Handler>:
    2f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f84:	4c36      	ldr	r4, [pc, #216]	; (3060 <MPSL_IRQ_RTC0_Handler+0xe0>)
    2f86:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f8a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2f8e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2f92:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2f96:	f04f 0500 	mov.w	r5, #0
    2f9a:	d019      	beq.n	2fd0 <MPSL_IRQ_RTC0_Handler+0x50>
    2f9c:	4831      	ldr	r0, [pc, #196]	; (3064 <MPSL_IRQ_RTC0_Handler+0xe4>)
    2f9e:	6800      	ldr	r0, [r0, #0]
    2fa0:	b1b0      	cbz	r0, 2fd0 <MPSL_IRQ_RTC0_Handler+0x50>
    2fa2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2fa6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2faa:	482f      	ldr	r0, [pc, #188]	; (3068 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2fac:	6800      	ldr	r0, [r0, #0]
    2fae:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2fb2:	1a40      	subs	r0, r0, r1
    2fb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fb8:	2802      	cmp	r0, #2
    2fba:	d302      	bcc.n	2fc2 <MPSL_IRQ_RTC0_Handler+0x42>
    2fbc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2fc0:	d306      	bcc.n	2fd0 <MPSL_IRQ_RTC0_Handler+0x50>
    2fc2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2fc6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2fca:	2004      	movs	r0, #4
    2fcc:	f7fe ff50 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fd0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2fd4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2fd8:	d019      	beq.n	300e <MPSL_IRQ_RTC0_Handler+0x8e>
    2fda:	4824      	ldr	r0, [pc, #144]	; (306c <MPSL_IRQ_RTC0_Handler+0xec>)
    2fdc:	6800      	ldr	r0, [r0, #0]
    2fde:	b1b0      	cbz	r0, 300e <MPSL_IRQ_RTC0_Handler+0x8e>
    2fe0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2fe4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fe8:	4821      	ldr	r0, [pc, #132]	; (3070 <MPSL_IRQ_RTC0_Handler+0xf0>)
    2fea:	6800      	ldr	r0, [r0, #0]
    2fec:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2ff0:	1a40      	subs	r0, r0, r1
    2ff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ff6:	2802      	cmp	r0, #2
    2ff8:	d302      	bcc.n	3000 <MPSL_IRQ_RTC0_Handler+0x80>
    2ffa:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2ffe:	d306      	bcc.n	300e <MPSL_IRQ_RTC0_Handler+0x8e>
    3000:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3004:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3008:	2005      	movs	r0, #5
    300a:	f7fe ff31 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    300e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3012:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3016:	bf08      	it	eq
    3018:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    301c:	4815      	ldr	r0, [pc, #84]	; (3074 <MPSL_IRQ_RTC0_Handler+0xf4>)
    301e:	6800      	ldr	r0, [r0, #0]
    3020:	2800      	cmp	r0, #0
    3022:	bf08      	it	eq
    3024:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3028:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    302c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3030:	4811      	ldr	r0, [pc, #68]	; (3078 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3032:	6800      	ldr	r0, [r0, #0]
    3034:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3038:	1a40      	subs	r0, r0, r1
    303a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    303e:	2802      	cmp	r0, #2
    3040:	d304      	bcc.n	304c <MPSL_IRQ_RTC0_Handler+0xcc>
    3042:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3046:	bf38      	it	cc
    3048:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    304c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3050:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3058:	2006      	movs	r0, #6
    305a:	f7fe bf09 	b.w	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    305e:	0000      	.short	0x0000
    3060:	4000b000 	.word	0x4000b000
    3064:	4000b140 	.word	0x4000b140
    3068:	4000b540 	.word	0x4000b540
    306c:	4000b144 	.word	0x4000b144
    3070:	4000b544 	.word	0x4000b544
    3074:	4000b148 	.word	0x4000b148
    3078:	4000b548 	.word	0x4000b548

0000307c <MPSL_IRQ_TIMER0_Handler>:
    307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3080:	4d38      	ldr	r5, [pc, #224]	; (3164 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3082:	7828      	ldrb	r0, [r5, #0]
    3084:	2804      	cmp	r0, #4
    3086:	d068      	beq.n	315a <MPSL_IRQ_TIMER0_Handler+0xde>
    3088:	1ce8      	adds	r0, r5, #3
    308a:	2201      	movs	r2, #1
    308c:	7801      	ldrb	r1, [r0, #0]
    308e:	b159      	cbz	r1, 30a8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    3090:	2901      	cmp	r1, #1
    3092:	bf08      	it	eq
    3094:	706a      	strbeq	r2, [r5, #1]
    3096:	d002      	beq.n	309e <MPSL_IRQ_TIMER0_Handler+0x22>
    3098:	7869      	ldrb	r1, [r5, #1]
    309a:	2900      	cmp	r1, #0
    309c:	d058      	beq.n	3150 <MPSL_IRQ_TIMER0_Handler+0xd4>
    309e:	2102      	movs	r1, #2
    30a0:	7001      	strb	r1, [r0, #0]
    30a2:	7840      	ldrb	r0, [r0, #1]
    30a4:	f000 fafa 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30a8:	4c2f      	ldr	r4, [pc, #188]	; (3168 <MPSL_IRQ_TIMER0_Handler+0xec>)
    30aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30ae:	f04f 0800 	mov.w	r8, #0
    30b2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    30b6:	f44f 7780 	mov.w	r7, #256	; 0x100
    30ba:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    30be:	d00a      	beq.n	30d6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    30c0:	482a      	ldr	r0, [pc, #168]	; (316c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    30c2:	6800      	ldr	r0, [r0, #0]
    30c4:	b138      	cbz	r0, 30d6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    30c6:	2003      	movs	r0, #3
    30c8:	f000 fae8 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30cc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30d0:	2003      	movs	r0, #3
    30d2:	f7fe fecd 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30da:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    30de:	d00a      	beq.n	30f6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    30e0:	4823      	ldr	r0, [pc, #140]	; (3170 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    30e2:	6800      	ldr	r0, [r0, #0]
    30e4:	b138      	cbz	r0, 30f6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    30e6:	2002      	movs	r0, #2
    30e8:	f000 fad8 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30ec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30f0:	2002      	movs	r0, #2
    30f2:	f7fe febd 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30fa:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    30fe:	d00a      	beq.n	3116 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3100:	481c      	ldr	r0, [pc, #112]	; (3174 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3102:	6800      	ldr	r0, [r0, #0]
    3104:	b138      	cbz	r0, 3116 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3106:	2001      	movs	r0, #1
    3108:	f000 fac8 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    310c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3110:	2001      	movs	r0, #1
    3112:	f7fe fead 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3116:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    311a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    311e:	bf08      	it	eq
    3120:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3124:	4814      	ldr	r0, [pc, #80]	; (3178 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3126:	6800      	ldr	r0, [r0, #0]
    3128:	2800      	cmp	r0, #0
    312a:	bf08      	it	eq
    312c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3130:	2000      	movs	r0, #0
    3132:	f000 fab3 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3136:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    313a:	2004      	movs	r0, #4
    313c:	7028      	strb	r0, [r5, #0]
    313e:	f8c5 8008 	str.w	r8, [r5, #8]
    3142:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    314a:	2000      	movs	r0, #0
    314c:	f7fe be90 	b.w	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3150:	f240 316a 	movw	r1, #874	; 0x36a
    3154:	206c      	movs	r0, #108	; 0x6c
    3156:	f000 ff29 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    315a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    315e:	2007      	movs	r0, #7
    3160:	f7fe be86 	b.w	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3164:	2000001c 	.word	0x2000001c
    3168:	40008000 	.word	0x40008000
    316c:	4000814c 	.word	0x4000814c
    3170:	40008148 	.word	0x40008148
    3174:	40008144 	.word	0x40008144
    3178:	40008140 	.word	0x40008140
    317c:	2201      	movs	r2, #1
    317e:	0211      	lsls	r1, r2, #8
    3180:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3184:	2000      	movs	r0, #0
    3186:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    318a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    318e:	f3bf 8f4f 	dsb	sy
    3192:	f3bf 8f6f 	isb	sy
    3196:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    319a:	490e      	ldr	r1, [pc, #56]	; (31d4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    319c:	f841 2f04 	str.w	r2, [r1, #4]!
    31a0:	1e43      	subs	r3, r0, #1
    31a2:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    31a6:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    31aa:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    31ae:	4b0a      	ldr	r3, [pc, #40]	; (31d8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    31b0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    31b4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    31b8:	1d1b      	adds	r3, r3, #4
    31ba:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    31be:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    31c2:	1d1b      	adds	r3, r3, #4
    31c4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    31c8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    31cc:	60ca      	str	r2, [r1, #12]
    31ce:	4903      	ldr	r1, [pc, #12]	; (31dc <MPSL_IRQ_TIMER0_Handler+0x160>)
    31d0:	7048      	strb	r0, [r1, #1]
    31d2:	4770      	bx	lr
    31d4:	40008000 	.word	0x40008000
    31d8:	40008004 	.word	0x40008004
    31dc:	2000001c 	.word	0x2000001c

000031e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    31e0:	4801      	ldr	r0, [pc, #4]	; (31e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    31e2:	6800      	ldr	r0, [r0, #0]
    31e4:	4770      	bx	lr
    31e6:	0000      	.short	0x0000
    31e8:	4000b504 	.word	0x4000b504

000031ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    31ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31f0:	4e47      	ldr	r6, [pc, #284]	; (3310 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    31f2:	4605      	mov	r5, r0
    31f4:	1ef7      	subs	r7, r6, #3
    31f6:	7832      	ldrb	r2, [r6, #0]
    31f8:	68f9      	ldr	r1, [r7, #12]
    31fa:	2a01      	cmp	r2, #1
    31fc:	bf04      	itt	eq
    31fe:	42a9      	cmpeq	r1, r5
    3200:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3204:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3208:	4b42      	ldr	r3, [pc, #264]	; (3314 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    320a:	6018      	str	r0, [r3, #0]
    320c:	4842      	ldr	r0, [pc, #264]	; (3318 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    320e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3212:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    3216:	f100 0304 	add.w	r3, r0, #4
    321a:	f04f 0400 	mov.w	r4, #0
    321e:	2a00      	cmp	r2, #0
    3220:	d061      	beq.n	32e6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    3222:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3226:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    322a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    322e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3232:	4b3a      	ldr	r3, [pc, #232]	; (331c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3234:	681b      	ldr	r3, [r3, #0]
    3236:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    323a:	f04f 0801 	mov.w	r8, #1
    323e:	2b00      	cmp	r3, #0
    3240:	bf04      	itt	eq
    3242:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    3246:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    324a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    324e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    3252:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    3256:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    325a:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    325e:	1aeb      	subs	r3, r5, r3
    3260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3264:	2b02      	cmp	r3, #2
    3266:	d34b      	bcc.n	3300 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    3268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    326c:	d248      	bcs.n	3300 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    326e:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    3272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3276:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    327a:	b132      	cbz	r2, 328a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    327c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3280:	1a8a      	subs	r2, r1, r2
    3282:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3286:	2a02      	cmp	r2, #2
    3288:	d3f8      	bcc.n	327c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    328a:	f8c7 8008 	str.w	r8, [r7, #8]
    328e:	703c      	strb	r4, [r7, #0]
    3290:	f7ff ff74 	bl	317c <MPSL_IRQ_TIMER0_Handler+0x100>
    3294:	4822      	ldr	r0, [pc, #136]	; (3320 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3296:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    329a:	f364 0101 	bfi	r1, r4, #0, #2
    329e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    32a2:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    32a6:	2102      	movs	r1, #2
    32a8:	f361 0201 	bfi	r2, r1, #0, #2
    32ac:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    32b0:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    32b4:	2104      	movs	r1, #4
    32b6:	f361 0203 	bfi	r2, r1, #0, #4
    32ba:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    32be:	f8c0 800c 	str.w	r8, [r0, #12]
    32c2:	68b9      	ldr	r1, [r7, #8]
    32c4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    32c8:	1580      	asrs	r0, r0, #22
    32ca:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    32ce:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    32d2:	4914      	ldr	r1, [pc, #80]	; (3324 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    32d4:	05c0      	lsls	r0, r0, #23
    32d6:	6008      	str	r0, [r1, #0]
    32d8:	2004      	movs	r0, #4
    32da:	60fd      	str	r5, [r7, #12]
    32dc:	7070      	strb	r0, [r6, #1]
    32de:	f886 8000 	strb.w	r8, [r6]
    32e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32e6:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    32ea:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    32ee:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    32f2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    32f6:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    32fa:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    32fe:	e798      	b.n	3232 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3300:	2100      	movs	r1, #0
    3302:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3306:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    330a:	206c      	movs	r0, #108	; 0x6c
    330c:	f000 fe4e 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3310:	2000001f 	.word	0x2000001f
    3314:	4001f508 	.word	0x4001f508
    3318:	4000b000 	.word	0x4000b000
    331c:	4000b148 	.word	0x4000b148
    3320:	40008000 	.word	0x40008000
    3324:	4001f504 	.word	0x4001f504

00003328 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	4c2c      	ldr	r4, [pc, #176]	; (33dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    332c:	68e2      	ldr	r2, [r4, #12]
    332e:	4282      	cmp	r2, r0
    3330:	bf14      	ite	ne
    3332:	2101      	movne	r1, #1
    3334:	2100      	moveq	r1, #0
    3336:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 33e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    333a:	f89c 5000 	ldrb.w	r5, [ip]
    333e:	2d02      	cmp	r5, #2
    3340:	d002      	beq.n	3348 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3342:	2900      	cmp	r1, #0
    3344:	d037      	beq.n	33b6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    3346:	e002      	b.n	334e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3348:	2900      	cmp	r1, #0
    334a:	bf08      	it	eq
    334c:	bd70      	popeq	{r4, r5, r6, pc}
    334e:	7861      	ldrb	r1, [r4, #1]
    3350:	b381      	cbz	r1, 33b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    3352:	4b24      	ldr	r3, [pc, #144]	; (33e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3354:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3358:	6019      	str	r1, [r3, #0]
    335a:	138b      	asrs	r3, r1, #14
    335c:	4922      	ldr	r1, [pc, #136]	; (33e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    335e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3362:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3366:	2300      	movs	r3, #0
    3368:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    336c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3370:	1ac3      	subs	r3, r0, r3
    3372:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3376:	2b02      	cmp	r3, #2
    3378:	d327      	bcc.n	33ca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    337a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    337e:	d224      	bcs.n	33ca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    3380:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3388:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    338c:	b13d      	cbz	r5, 339e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    338e:	bf00      	nop
    3390:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3394:	1ad3      	subs	r3, r2, r3
    3396:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    339a:	2b02      	cmp	r3, #2
    339c:	d3f8      	bcc.n	3390 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    339e:	4b13      	ldr	r3, [pc, #76]	; (33ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    33a0:	2102      	movs	r1, #2
    33a2:	074a      	lsls	r2, r1, #29
    33a4:	601a      	str	r2, [r3, #0]
    33a6:	60e0      	str	r0, [r4, #12]
    33a8:	2004      	movs	r0, #4
    33aa:	f88c 0001 	strb.w	r0, [ip, #1]
    33ae:	f88c 1000 	strb.w	r1, [ip]
    33b2:	bd70      	pop	{r4, r5, r6, pc}
    33b4:	e004      	b.n	33c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    33b6:	f240 2102 	movw	r1, #514	; 0x202
    33ba:	206c      	movs	r0, #108	; 0x6c
    33bc:	f000 fdf6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33c0:	f240 2106 	movw	r1, #518	; 0x206
    33c4:	206c      	movs	r0, #108	; 0x6c
    33c6:	f000 fdf1 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33ca:	2000      	movs	r0, #0
    33cc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    33d0:	f240 2112 	movw	r1, #530	; 0x212
    33d4:	206c      	movs	r0, #108	; 0x6c
    33d6:	f000 fde9 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33da:	0000      	.short	0x0000
    33dc:	2000001c 	.word	0x2000001c
    33e0:	2000001f 	.word	0x2000001f
    33e4:	4001f508 	.word	0x4001f508
    33e8:	4000b000 	.word	0x4000b000
    33ec:	4001f504 	.word	0x4001f504

000033f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    33f0:	4801      	ldr	r0, [pc, #4]	; (33f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    33f2:	68c0      	ldr	r0, [r0, #12]
    33f4:	4770      	bx	lr
    33f6:	0000      	.short	0x0000
    33f8:	2000001c 	.word	0x2000001c

000033fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    33fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3400:	4936      	ldr	r1, [pc, #216]	; (34dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3402:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3406:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    340a:	4d35      	ldr	r5, [pc, #212]	; (34e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    340c:	1d0b      	adds	r3, r1, #4
    340e:	2200      	movs	r2, #0
    3410:	7828      	ldrb	r0, [r5, #0]
    3412:	b168      	cbz	r0, 3430 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    3414:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3418:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    341c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3420:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3424:	4b2f      	ldr	r3, [pc, #188]	; (34e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3426:	681b      	ldr	r3, [r3, #0]
    3428:	f04f 0c01 	mov.w	ip, #1
    342c:	b99b      	cbnz	r3, 3456 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    342e:	e00c      	b.n	344a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    3430:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3434:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3438:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    343c:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    3440:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3444:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3448:	e7ec      	b.n	3424 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    344a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    344e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3452:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    3456:	2802      	cmp	r0, #2
    3458:	d004      	beq.n	3464 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    345a:	f240 211e 	movw	r1, #542	; 0x21e
    345e:	206c      	movs	r0, #108	; 0x6c
    3460:	f000 fda4 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3464:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3468:	4c1f      	ldr	r4, [pc, #124]	; (34e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    346a:	1cc0      	adds	r0, r0, #3
    346c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3470:	68e3      	ldr	r3, [r4, #12]
    3472:	4e1e      	ldr	r6, [pc, #120]	; (34ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3474:	4298      	cmp	r0, r3
    3476:	d00c      	beq.n	3492 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3478:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    347c:	1bdf      	subs	r7, r3, r7
    347e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3482:	2f04      	cmp	r7, #4
    3484:	d305      	bcc.n	3492 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3486:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    348a:	d202      	bcs.n	3492 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    348c:	f7ff feae 	bl	31ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3490:	e01f      	b.n	34d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    3492:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3496:	1a18      	subs	r0, r3, r0
    3498:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    349c:	2802      	cmp	r0, #2
    349e:	d315      	bcc.n	34cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    34a0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    34a4:	d212      	bcs.n	34cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    34a6:	4912      	ldr	r1, [pc, #72]	; (34f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    34a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    34ac:	6008      	str	r0, [r1, #0]
    34ae:	f8c4 c008 	str.w	ip, [r4, #8]
    34b2:	7022      	strb	r2, [r4, #0]
    34b4:	f8c6 c004 	str.w	ip, [r6, #4]
    34b8:	f8c6 c00c 	str.w	ip, [r6, #12]
    34bc:	0040      	lsls	r0, r0, #1
    34be:	1f09      	subs	r1, r1, #4
    34c0:	6008      	str	r0, [r1, #0]
    34c2:	2004      	movs	r0, #4
    34c4:	7068      	strb	r0, [r5, #1]
    34c6:	f885 c000 	strb.w	ip, [r5]
    34ca:	e002      	b.n	34d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    34cc:	f8c4 c008 	str.w	ip, [r4, #8]
    34d0:	7022      	strb	r2, [r4, #0]
    34d2:	68a0      	ldr	r0, [r4, #8]
    34d4:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    34d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34dc:	4000b000 	.word	0x4000b000
    34e0:	2000001f 	.word	0x2000001f
    34e4:	4000b148 	.word	0x4000b148
    34e8:	2000001c 	.word	0x2000001c
    34ec:	40008000 	.word	0x40008000
    34f0:	4001f508 	.word	0x4001f508

000034f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    34f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34f8:	f8df c190 	ldr.w	ip, [pc, #400]	; 368c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    34fc:	2600      	movs	r6, #0
    34fe:	2701      	movs	r7, #1
    3500:	f89c 4000 	ldrb.w	r4, [ip]
    3504:	f89c c001 	ldrb.w	ip, [ip, #1]
    3508:	f44f 75a0 	mov.w	r5, #320	; 0x140
    350c:	2807      	cmp	r0, #7
    350e:	d27b      	bcs.n	3608 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3510:	e8df f000 	tbb	[pc, r0]
    3514:	04040404 	.word	0x04040404
    3518:	006c6c6c 	.word	0x006c6c6c
    351c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3690 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    3520:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3524:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3528:	bf04      	itt	eq
    352a:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    352e:	f1b8 0f00 	cmpeq.w	r8, #0
    3532:	d002      	beq.n	353a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3534:	2c02      	cmp	r4, #2
    3536:	d005      	beq.n	3544 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    3538:	e02c      	b.n	3594 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    353a:	f240 2151 	movw	r1, #593	; 0x251
    353e:	206c      	movs	r0, #108	; 0x6c
    3540:	f000 fd34 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3544:	f1ac 0804 	sub.w	r8, ip, #4
    3548:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    354c:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    3550:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    3554:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3558:	2500      	movs	r5, #0
    355a:	2c01      	cmp	r4, #1
    355c:	d002      	beq.n	3564 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    355e:	2c02      	cmp	r4, #2
    3560:	d00b      	beq.n	357a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    3562:	e014      	b.n	358e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3564:	f1bc 0f04 	cmp.w	ip, #4
    3568:	bf24      	itt	cs
    356a:	f8d8 9000 	ldrcs.w	r9, [r8]
    356e:	f1b9 0f00 	cmpcs.w	r9, #0
    3572:	bf08      	it	eq
    3574:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    3578:	e009      	b.n	358e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    357a:	f1bc 0f04 	cmp.w	ip, #4
    357e:	bf24      	itt	cs
    3580:	f8d8 9000 	ldrcs.w	r9, [r8]
    3584:	f1b9 0f00 	cmpcs.w	r9, #0
    3588:	bf08      	it	eq
    358a:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    358e:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    3592:	d1e1      	bne.n	3558 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    3594:	4c3f      	ldr	r4, [pc, #252]	; (3694 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    3596:	f100 0c10 	add.w	ip, r0, #16
    359a:	fa07 fc0c 	lsl.w	ip, r7, ip
    359e:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    35a2:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    35a6:	b1c2      	cbz	r2, 35da <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    35a8:	f04f 0840 	mov.w	r8, #64	; 0x40
    35ac:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    35b0:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    35b4:	44a0      	add	r8, r4
    35b6:	f8c8 7000 	str.w	r7, [r8]
    35ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    35be:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    35c2:	eba1 0000 	sub.w	r0, r1, r0
    35c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35ca:	4282      	cmp	r2, r0
    35cc:	bf98      	it	ls
    35ce:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    35d2:	bf28      	it	cs
    35d4:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    35d8:	d250      	bcs.n	367c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    35da:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    35de:	2b01      	cmp	r3, #1
    35e0:	bf08      	it	eq
    35e2:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    35e6:	2001      	movs	r0, #1
    35e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35ec:	b134      	cbz	r4, 35fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    35ee:	4584      	cmp	ip, r0
    35f0:	d104      	bne.n	35fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    35f2:	f44f 711d 	mov.w	r1, #628	; 0x274
    35f6:	206c      	movs	r0, #108	; 0x6c
    35f8:	f000 fcd8 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35fc:	f1a0 0c04 	sub.w	ip, r0, #4
    3600:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    3604:	2b01      	cmp	r3, #1
    3606:	e000      	b.n	360a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3608:	e03b      	b.n	3682 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    360a:	bf0c      	ite	eq
    360c:	f04f 0801 	moveq.w	r8, #1
    3610:	f04f 0800 	movne.w	r8, #0
    3614:	2c03      	cmp	r4, #3
    3616:	d304      	bcc.n	3622 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    3618:	f240 114d 	movw	r1, #333	; 0x14d
    361c:	206c      	movs	r0, #108	; 0x6c
    361e:	f000 fcc5 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3622:	f8df c074 	ldr.w	ip, [pc, #116]	; 3698 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    3626:	f104 0310 	add.w	r3, r4, #16
    362a:	fa07 f303 	lsl.w	r3, r7, r3
    362e:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3632:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3636:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    363a:	f84c 6004 	str.w	r6, [ip, r4]
    363e:	1f00      	subs	r0, r0, #4
    3640:	b2c0      	uxtb	r0, r0
    3642:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3646:	b16a      	cbz	r2, 3664 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    3648:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    364c:	1b0c      	subs	r4, r1, r4
    364e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    3652:	42a2      	cmp	r2, r4
    3654:	bf98      	it	ls
    3656:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    365a:	bf24      	itt	cs
    365c:	2100      	movcs	r1, #0
    365e:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3662:	d20b      	bcs.n	367c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3664:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3668:	f1b8 0f00 	cmp.w	r8, #0
    366c:	bf18      	it	ne
    366e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3672:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3676:	2001      	movs	r0, #1
    3678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    367c:	2000      	movs	r0, #0
    367e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3682:	f240 2179 	movw	r1, #633	; 0x279
    3686:	206c      	movs	r0, #108	; 0x6c
    3688:	f000 fc90 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    368c:	2000001f 	.word	0x2000001f
    3690:	2000001c 	.word	0x2000001c
    3694:	40008000 	.word	0x40008000
    3698:	4000b000 	.word	0x4000b000

0000369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    369c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36a0:	2600      	movs	r6, #0
    36a2:	f44f 77a0 	mov.w	r7, #320	; 0x140
    36a6:	f04f 0801 	mov.w	r8, #1
    36aa:	2807      	cmp	r0, #7
    36ac:	d251      	bcs.n	3752 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    36ae:	e8df f000 	tbb	[pc, r0]
    36b2:	0404      	.short	0x0404
    36b4:	19190404 	.word	0x19190404
    36b8:	0019      	.short	0x0019
    36ba:	f100 0110 	add.w	r1, r0, #16
    36be:	fa08 f201 	lsl.w	r2, r8, r1
    36c2:	4926      	ldr	r1, [pc, #152]	; (375c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    36c4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    36c8:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    36cc:	2200      	movs	r2, #0
    36ce:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    36d2:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    36d6:	508e      	str	r6, [r1, r2]
    36d8:	4921      	ldr	r1, [pc, #132]	; (3760 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    36da:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    36de:	9000      	str	r0, [sp, #0]
    36e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36e4:	4d1f      	ldr	r5, [pc, #124]	; (3764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    36e6:	1f01      	subs	r1, r0, #4
    36e8:	b2cc      	uxtb	r4, r1
    36ea:	7829      	ldrb	r1, [r5, #0]
    36ec:	b179      	cbz	r1, 370e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    36ee:	786a      	ldrb	r2, [r5, #1]
    36f0:	4282      	cmp	r2, r0
    36f2:	d10c      	bne.n	370e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    36f4:	4a1c      	ldr	r2, [pc, #112]	; (3768 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    36f6:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    36fa:	6010      	str	r0, [r2, #0]
    36fc:	2901      	cmp	r1, #1
    36fe:	bf08      	it	eq
    3700:	f7ff fd3c 	bleq	317c <MPSL_IRQ_TIMER0_Handler+0x100>
    3704:	702e      	strb	r6, [r5, #0]
    3706:	4919      	ldr	r1, [pc, #100]	; (376c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3708:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    370c:	60c8      	str	r0, [r1, #12]
    370e:	f104 0010 	add.w	r0, r4, #16
    3712:	fa08 f100 	lsl.w	r1, r8, r0
    3716:	4816      	ldr	r0, [pc, #88]	; (3770 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3718:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    371c:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3720:	00a1      	lsls	r1, r4, #2
    3722:	4401      	add	r1, r0
    3724:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    3728:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    372c:	1a89      	subs	r1, r1, r2
    372e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3732:	2902      	cmp	r1, #2
    3734:	d307      	bcc.n	3746 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    3736:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    373a:	2100      	movs	r1, #0
    373c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3740:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    3744:	5046      	str	r6, [r0, r1]
    3746:	480b      	ldr	r0, [pc, #44]	; (3774 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3748:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    374c:	9000      	str	r0, [sp, #0]
    374e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3752:	f240 21f1 	movw	r1, #753	; 0x2f1
    3756:	206c      	movs	r0, #108	; 0x6c
    3758:	f000 fc28 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    375c:	40008000 	.word	0x40008000
    3760:	40008140 	.word	0x40008140
    3764:	2000001f 	.word	0x2000001f
    3768:	4001f508 	.word	0x4001f508
    376c:	2000001c 	.word	0x2000001c
    3770:	4000b000 	.word	0x4000b000
    3774:	4000b140 	.word	0x4000b140

00003778 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3778:	4920      	ldr	r1, [pc, #128]	; (37fc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    377a:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    377e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3782:	481f      	ldr	r0, [pc, #124]	; (3800 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3784:	1d0a      	adds	r2, r1, #4
    3786:	7803      	ldrb	r3, [r0, #0]
    3788:	2000      	movs	r0, #0
    378a:	b15b      	cbz	r3, 37a4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    378c:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3790:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3794:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3798:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    379c:	4919      	ldr	r1, [pc, #100]	; (3804 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    379e:	6809      	ldr	r1, [r1, #0]
    37a0:	b999      	cbnz	r1, 37ca <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    37a2:	e00c      	b.n	37be <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    37a4:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    37a8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    37ac:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    37b0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    37b4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37b8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    37bc:	e7ee      	b.n	379c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    37be:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    37c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    37c6:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    37ca:	490f      	ldr	r1, [pc, #60]	; (3808 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    37cc:	f04f 32ff 	mov.w	r2, #4294967295
    37d0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    37d4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    37d8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    37dc:	1d0a      	adds	r2, r1, #4
    37de:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37e2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    37e6:	1d12      	adds	r2, r2, #4
    37e8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37ec:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    37f0:	1d12      	adds	r2, r2, #4
    37f2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37f6:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    37fa:	4770      	bx	lr
    37fc:	4000b000 	.word	0x4000b000
    3800:	2000001f 	.word	0x2000001f
    3804:	4000b148 	.word	0x4000b148
    3808:	40008000 	.word	0x40008000

0000380c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    380c:	4808      	ldr	r0, [pc, #32]	; (3830 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    380e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3812:	2800      	cmp	r0, #0
    3814:	bfb8      	it	lt
    3816:	4770      	bxlt	lr
    3818:	f000 011f 	and.w	r1, r0, #31
    381c:	2201      	movs	r2, #1
    381e:	fa02 f101 	lsl.w	r1, r2, r1
    3822:	0940      	lsrs	r0, r0, #5
    3824:	0080      	lsls	r0, r0, #2
    3826:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    382a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    382e:	4770      	bx	lr
    3830:	2000001c 	.word	0x2000001c

00003834 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3834:	b510      	push	{r4, lr}
    3836:	2807      	cmp	r0, #7
    3838:	d20d      	bcs.n	3856 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    383a:	e8df f000 	tbb	[pc, r0]
    383e:	0404      	.short	0x0404
    3840:	06060404 	.word	0x06060404
    3844:	0006      	.short	0x0006
    3846:	4906      	ldr	r1, [pc, #24]	; (3860 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3848:	e002      	b.n	3850 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    384a:	1f00      	subs	r0, r0, #4
    384c:	4905      	ldr	r1, [pc, #20]	; (3864 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    384e:	b2c0      	uxtb	r0, r0
    3850:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3854:	bd10      	pop	{r4, pc}
    3856:	f240 219d 	movw	r1, #669	; 0x29d
    385a:	206c      	movs	r0, #108	; 0x6c
    385c:	f000 fba6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3860:	40008140 	.word	0x40008140
    3864:	4000b140 	.word	0x4000b140

00003868 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3868:	b510      	push	{r4, lr}
    386a:	481c      	ldr	r0, [pc, #112]	; (38dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    386c:	2400      	movs	r4, #0
    386e:	2104      	movs	r1, #4
    3870:	7004      	strb	r4, [r0, #0]
    3872:	1ec0      	subs	r0, r0, #3
    3874:	7001      	strb	r1, [r0, #0]
    3876:	0589      	lsls	r1, r1, #22
    3878:	60c1      	str	r1, [r0, #12]
    387a:	f7ff fc7f 	bl	317c <MPSL_IRQ_TIMER0_Handler+0x100>
    387e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3882:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3886:	f04f 0c01 	mov.w	ip, #1
    388a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    388e:	f3bf 8f4f 	dsb	sy
    3892:	f3bf 8f6f 	isb	sy
    3896:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    389a:	4811      	ldr	r0, [pc, #68]	; (38e0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    389c:	f8c0 c004 	str.w	ip, [r0, #4]
    38a0:	f8c0 c008 	str.w	ip, [r0, #8]
    38a4:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    38a8:	2900      	cmp	r1, #0
    38aa:	d1fb      	bne.n	38a4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    38ac:	1e49      	subs	r1, r1, #1
    38ae:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    38b2:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    38b6:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    38ba:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    38be:	4909      	ldr	r1, [pc, #36]	; (38e4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    38c0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    38c4:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    38c8:	1d09      	adds	r1, r1, #4
    38ca:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    38ce:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    38d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    38d6:	f8c0 c000 	str.w	ip, [r0]
    38da:	bd10      	pop	{r4, pc}
    38dc:	2000001f 	.word	0x2000001f
    38e0:	4000b000 	.word	0x4000b000
    38e4:	4000b004 	.word	0x4000b004

000038e8 <MPSL_IRQ_CLOCK_Handler>:
    38e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38ec:	4c16      	ldr	r4, [pc, #88]	; (3948 <MPSL_IRQ_CLOCK_Handler+0x60>)
    38ee:	7a60      	ldrb	r0, [r4, #9]
    38f0:	2800      	cmp	r0, #0
    38f2:	d027      	beq.n	3944 <MPSL_IRQ_CLOCK_Handler+0x5c>
    38f4:	f44f 7180 	mov.w	r1, #256	; 0x100
    38f8:	058d      	lsls	r5, r1, #22
    38fa:	4628      	mov	r0, r5
    38fc:	f009 f929 	bl	cb52 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3900:	4680      	mov	r8, r0
    3902:	f44f 7182 	mov.w	r1, #260	; 0x104
    3906:	4628      	mov	r0, r5
    3908:	f009 f923 	bl	cb52 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    390c:	2600      	movs	r6, #0
    390e:	4607      	mov	r7, r0
    3910:	f1b8 0f00 	cmp.w	r8, #0
    3914:	d009      	beq.n	392a <MPSL_IRQ_CLOCK_Handler+0x42>
    3916:	2001      	movs	r0, #1
    3918:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    391c:	7920      	ldrb	r0, [r4, #4]
    391e:	b120      	cbz	r0, 392a <MPSL_IRQ_CLOCK_Handler+0x42>
    3920:	7126      	strb	r6, [r4, #4]
    3922:	69e0      	ldr	r0, [r4, #28]
    3924:	b108      	cbz	r0, 392a <MPSL_IRQ_CLOCK_Handler+0x42>
    3926:	4780      	blx	r0
    3928:	61e6      	str	r6, [r4, #28]
    392a:	b137      	cbz	r7, 393a <MPSL_IRQ_CLOCK_Handler+0x52>
    392c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3930:	2002      	movs	r0, #2
    3932:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3936:	f000 fa6d 	bl	3e14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    393a:	4640      	mov	r0, r8
    393c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3940:	f000 b85a 	b.w	39f8 <MPSL_IRQ_CLOCK_Handler+0x110>
    3944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3948:	2000002c 	.word	0x2000002c
    394c:	b510      	push	{r4, lr}
    394e:	f009 f9aa 	bl	cca6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3952:	b930      	cbnz	r0, 3962 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3954:	f009 f9c8 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3958:	b918      	cbnz	r0, 3962 <MPSL_IRQ_CLOCK_Handler+0x7a>
    395a:	f009 f9fb 	bl	cd54 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    395e:	2800      	cmp	r0, #0
    3960:	d002      	beq.n	3968 <MPSL_IRQ_CLOCK_Handler+0x80>
    3962:	4902      	ldr	r1, [pc, #8]	; (396c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3964:	2002      	movs	r0, #2
    3966:	6008      	str	r0, [r1, #0]
    3968:	bd10      	pop	{r4, pc}
    396a:	0000      	.short	0x0000
    396c:	40000c34 	.word	0x40000c34
    3970:	b570      	push	{r4, r5, r6, lr}
    3972:	f000 f987 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3976:	f000 faa1 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    397a:	4c09      	ldr	r4, [pc, #36]	; (39a0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    397c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3980:	b130      	cbz	r0, 3990 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3982:	f7ff ffe3 	bl	394c <MPSL_IRQ_CLOCK_Handler+0x64>
    3986:	2001      	movs	r0, #1
    3988:	6128      	str	r0, [r5, #16]
    398a:	2004      	movs	r0, #4
    398c:	72a0      	strb	r0, [r4, #10]
    398e:	e004      	b.n	399a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3990:	2003      	movs	r0, #3
    3992:	72a0      	strb	r0, [r4, #10]
    3994:	2001      	movs	r0, #1
    3996:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    399a:	2000      	movs	r0, #0
    399c:	71e0      	strb	r0, [r4, #7]
    399e:	bd70      	pop	{r4, r5, r6, pc}
    39a0:	2000002c 	.word	0x2000002c
    39a4:	b570      	push	{r4, r5, r6, lr}
    39a6:	4c13      	ldr	r4, [pc, #76]	; (39f4 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    39a8:	79a0      	ldrb	r0, [r4, #6]
    39aa:	b1f0      	cbz	r0, 39ea <MPSL_IRQ_CLOCK_Handler+0x102>
    39ac:	2801      	cmp	r0, #1
    39ae:	d003      	beq.n	39b8 <MPSL_IRQ_CLOCK_Handler+0xd0>
    39b0:	79e1      	ldrb	r1, [r4, #7]
    39b2:	1e40      	subs	r0, r0, #1
    39b4:	4281      	cmp	r1, r0
    39b6:	da18      	bge.n	39ea <MPSL_IRQ_CLOCK_Handler+0x102>
    39b8:	f000 fa80 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    39bc:	4605      	mov	r5, r0
    39be:	f000 fb65 	bl	408c <mpsl_temperature_get>
    39c2:	79a1      	ldrb	r1, [r4, #6]
    39c4:	2901      	cmp	r1, #1
    39c6:	d902      	bls.n	39ce <MPSL_IRQ_CLOCK_Handler+0xe6>
    39c8:	79e1      	ldrb	r1, [r4, #7]
    39ca:	1c49      	adds	r1, r1, #1
    39cc:	71e1      	strb	r1, [r4, #7]
    39ce:	b10d      	cbz	r5, 39d4 <MPSL_IRQ_CLOCK_Handler+0xec>
    39d0:	6961      	ldr	r1, [r4, #20]
    39d2:	e000      	b.n	39d6 <MPSL_IRQ_CLOCK_Handler+0xee>
    39d4:	6921      	ldr	r1, [r4, #16]
    39d6:	1a41      	subs	r1, r0, r1
    39d8:	2902      	cmp	r1, #2
    39da:	da02      	bge.n	39e2 <MPSL_IRQ_CLOCK_Handler+0xfa>
    39dc:	f111 0f02 	cmn.w	r1, #2
    39e0:	dc07      	bgt.n	39f2 <MPSL_IRQ_CLOCK_Handler+0x10a>
    39e2:	b10d      	cbz	r5, 39e8 <MPSL_IRQ_CLOCK_Handler+0x100>
    39e4:	6160      	str	r0, [r4, #20]
    39e6:	e000      	b.n	39ea <MPSL_IRQ_CLOCK_Handler+0x102>
    39e8:	6120      	str	r0, [r4, #16]
    39ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39ee:	f7ff bfbf 	b.w	3970 <MPSL_IRQ_CLOCK_Handler+0x88>
    39f2:	bd70      	pop	{r4, r5, r6, pc}
    39f4:	2000002c 	.word	0x2000002c
    39f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39fc:	4606      	mov	r6, r0
    39fe:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3a02:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3a06:	4628      	mov	r0, r5
    3a08:	f009 f8a3 	bl	cb52 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a0c:	4680      	mov	r8, r0
    3a0e:	f44f 7188 	mov.w	r1, #272	; 0x110
    3a12:	4628      	mov	r0, r5
    3a14:	f009 f89d 	bl	cb52 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a18:	4c27      	ldr	r4, [pc, #156]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a1a:	4682      	mov	sl, r0
    3a1c:	7827      	ldrb	r7, [r4, #0]
    3a1e:	f104 0008 	add.w	r0, r4, #8
    3a22:	f009 f90a 	bl	cc3a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3a26:	b110      	cbz	r0, 3a2e <MPSL_IRQ_CLOCK_Handler+0x146>
    3a28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3a2c:	e016      	b.n	3a5c <MPSL_IRQ_CLOCK_Handler+0x174>
    3a2e:	f04f 0901 	mov.w	r9, #1
    3a32:	b146      	cbz	r6, 3a46 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3a34:	7aa0      	ldrb	r0, [r4, #10]
    3a36:	2803      	cmp	r0, #3
    3a38:	d105      	bne.n	3a46 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3a3a:	2004      	movs	r0, #4
    3a3c:	72a0      	strb	r0, [r4, #10]
    3a3e:	f7ff ff85 	bl	394c <MPSL_IRQ_CLOCK_Handler+0x64>
    3a42:	f8c5 9010 	str.w	r9, [r5, #16]
    3a46:	2600      	movs	r6, #0
    3a48:	f1b8 0f00 	cmp.w	r8, #0
    3a4c:	d018      	beq.n	3a80 <MPSL_IRQ_CLOCK_Handler+0x198>
    3a4e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3a52:	7aa0      	ldrb	r0, [r4, #10]
    3a54:	2804      	cmp	r0, #4
    3a56:	d004      	beq.n	3a62 <MPSL_IRQ_CLOCK_Handler+0x17a>
    3a58:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3a5c:	206d      	movs	r0, #109	; 0x6d
    3a5e:	f000 faa5 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a62:	f009 f920 	bl	cca6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3a66:	b928      	cbnz	r0, 3a74 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a68:	f009 f93e 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a6c:	b910      	cbnz	r0, 3a74 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a6e:	f009 f971 	bl	cd54 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3a72:	b108      	cbz	r0, 3a78 <MPSL_IRQ_CLOCK_Handler+0x190>
    3a74:	4811      	ldr	r0, [pc, #68]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a76:	6006      	str	r6, [r0, #0]
    3a78:	2002      	movs	r0, #2
    3a7a:	72a0      	strb	r0, [r4, #10]
    3a7c:	f000 f8e6 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a80:	f1ba 0f00 	cmp.w	sl, #0
    3a84:	d008      	beq.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a86:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3a8a:	7aa0      	ldrb	r0, [r4, #10]
    3a8c:	2802      	cmp	r0, #2
    3a8e:	d101      	bne.n	3a94 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3a90:	f7ff ff88 	bl	39a4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3a94:	f8c5 9014 	str.w	r9, [r5, #20]
    3a98:	b13f      	cbz	r7, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3a9a:	7026      	strb	r6, [r4, #0]
    3a9c:	7aa0      	ldrb	r0, [r4, #10]
    3a9e:	2802      	cmp	r0, #2
    3aa0:	d101      	bne.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
    3aa2:	f7ff ff65 	bl	3970 <MPSL_IRQ_CLOCK_Handler+0x88>
    3aa6:	f000 f8d1 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3aaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3aae:	4802      	ldr	r0, [pc, #8]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3ab0:	3008      	adds	r0, #8
    3ab2:	f009 b8d9 	b.w	cc68 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3ab6:	0000      	.short	0x0000
    3ab8:	2000002c 	.word	0x2000002c
    3abc:	40000c34 	.word	0x40000c34
    3ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ac4:	4c5c      	ldr	r4, [pc, #368]	; (3c38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a0>)
    3ac6:	f04f 0800 	mov.w	r8, #0
    3aca:	4606      	mov	r6, r0
    3acc:	f8c4 8018 	str.w	r8, [r4, #24]
    3ad0:	7843      	ldrb	r3, [r0, #1]
    3ad2:	7882      	ldrb	r2, [r0, #2]
    3ad4:	7800      	ldrb	r0, [r0, #0]
    3ad6:	72e0      	strb	r0, [r4, #11]
    3ad8:	7163      	strb	r3, [r4, #5]
    3ada:	2701      	movs	r7, #1
    3adc:	71a2      	strb	r2, [r4, #6]
    3ade:	07bd      	lsls	r5, r7, #30
    3ae0:	f884 8007 	strb.w	r8, [r4, #7]
    3ae4:	2805      	cmp	r0, #5
    3ae6:	d224      	bcs.n	3b32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9a>
    3ae8:	e8df f000 	tbb	[pc, r0]
    3aec:	1f05030f 	.word	0x1f05030f
    3af0:	0021      	.short	0x0021
    3af2:	61a7      	str	r7, [r4, #24]
    3af4:	e009      	b.n	3b0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x72>
    3af6:	f000 f8c5 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3afa:	2101      	movs	r1, #1
    3afc:	4628      	mov	r0, r5
    3afe:	f009 f82d 	bl	cb5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3b02:	2800      	cmp	r0, #0
    3b04:	d0f9      	beq.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
    3b06:	2002      	movs	r0, #2
    3b08:	61a0      	str	r0, [r4, #24]
    3b0a:	f009 f853 	bl	cbb4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3b0e:	b1b0      	cbz	r0, 3b3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa6>
    3b10:	f000 f9ee 	bl	3ef0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3b14:	7e21      	ldrb	r1, [r4, #24]
    3b16:	f001 0103 	and.w	r1, r1, #3
    3b1a:	4288      	cmp	r0, r1
    3b1c:	d10f      	bne.n	3b3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa6>
    3b1e:	79b0      	ldrb	r0, [r6, #6]
    3b20:	b150      	cbz	r0, 3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    3b22:	2002      	movs	r0, #2
    3b24:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b28:	e06a      	b.n	3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>
    3b2a:	4844      	ldr	r0, [pc, #272]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3b2c:	e7ec      	b.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
    3b2e:	4844      	ldr	r0, [pc, #272]	; (3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>)
    3b30:	e7ea      	b.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
    3b32:	f240 312d 	movw	r1, #813	; 0x32d
    3b36:	e049      	b.n	3bcc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x134>
    3b38:	f000 f9ae 	bl	3e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3b3c:	e060      	b.n	3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>
    3b3e:	60ef      	str	r7, [r5, #12]
    3b40:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3b44:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3b48:	69a0      	ldr	r0, [r4, #24]
    3b4a:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3b4e:	f009 f896 	bl	cc7e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b52:	b940      	cbnz	r0, 3b66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xce>
    3b54:	f009 f89d 	bl	cc92 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b58:	b928      	cbnz	r0, 3b66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xce>
    3b5a:	f009 f8b1 	bl	ccc0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b5e:	b910      	cbnz	r0, 3b66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xce>
    3b60:	f009 f8c2 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b64:	b138      	cbz	r0, 3b76 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xde>
    3b66:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3b6a:	4836      	ldr	r0, [pc, #216]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b6c:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3b70:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3b74:	6001      	str	r1, [r0, #0]
    3b76:	f009 f882 	bl	cc7e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b7a:	b940      	cbnz	r0, 3b8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf6>
    3b7c:	f009 f889 	bl	cc92 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b80:	b928      	cbnz	r0, 3b8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf6>
    3b82:	f009 f89d 	bl	ccc0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b86:	b910      	cbnz	r0, 3b8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf6>
    3b88:	f009 f8ae 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b8c:	b110      	cbz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b8e:	482d      	ldr	r0, [pc, #180]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b90:	3010      	adds	r0, #16
    3b92:	6007      	str	r7, [r0, #0]
    3b94:	60af      	str	r7, [r5, #8]
    3b96:	2002      	movs	r0, #2
    3b98:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b9c:	79b0      	ldrb	r0, [r6, #6]
    3b9e:	bb78      	cbnz	r0, 3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>
    3ba0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3ba4:	f010 0f02 	tst.w	r0, #2
    3ba8:	d00e      	beq.n	3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>
    3baa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>
    3bae:	f8d9 1000 	ldr.w	r1, [r9]
    3bb2:	43c9      	mvns	r1, r1
    3bb4:	f341 1700 	sbfx	r7, r1, #4, #1
    3bb8:	f8d9 1000 	ldr.w	r1, [r9]
    3bbc:	f041 0110 	orr.w	r1, r1, #16
    3bc0:	f8c9 1000 	str.w	r1, [r9]
    3bc4:	1c7f      	adds	r7, r7, #1
    3bc6:	e007      	b.n	3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>
    3bc8:	f240 21ee 	movw	r1, #750	; 0x2ee
    3bcc:	206d      	movs	r0, #109	; 0x6d
    3bce:	f000 f9ed 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bd2:	bf00      	nop
    3bd4:	f000 fb10 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3bd8:	4651      	mov	r1, sl
    3bda:	4628      	mov	r0, r5
    3bdc:	f008 ffb9 	bl	cb52 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3be0:	2800      	cmp	r0, #0
    3be2:	d0f7      	beq.n	3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>
    3be4:	f000 f958 	bl	3e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3be8:	b92f      	cbnz	r7, 3bf6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15e>
    3bea:	f8d9 1000 	ldr.w	r1, [r9]
    3bee:	f021 0110 	bic.w	r1, r1, #16
    3bf2:	f8c9 1000 	str.w	r1, [r9]
    3bf6:	2002      	movs	r0, #2
    3bf8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3bfc:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3c00:	79a0      	ldrb	r0, [r4, #6]
    3c02:	b170      	cbz	r0, 3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c04:	7830      	ldrb	r0, [r6, #0]
    3c06:	b960      	cbnz	r0, 3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c08:	f000 f958 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3c0c:	4606      	mov	r6, r0
    3c0e:	f000 fa3d 	bl	408c <mpsl_temperature_get>
    3c12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3c16:	b116      	cbz	r6, 3c1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x186>
    3c18:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3c1c:	e001      	b.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c1e:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3c22:	2101      	movs	r1, #1
    3c24:	4628      	mov	r0, r5
    3c26:	f008 ff99 	bl	cb5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c2a:	b108      	cbz	r0, 3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3c2c:	f000 f940 	bl	3eb0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c30:	f884 800a 	strb.w	r8, [r4, #10]
    3c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c38:	2000002c 	.word	0x2000002c
    3c3c:	00020001 	.word	0x00020001
    3c40:	00030001 	.word	0x00030001
    3c44:	4000053c 	.word	0x4000053c
    3c48:	e000ed10 	.word	0xe000ed10

00003c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3c4c:	b510      	push	{r4, lr}
    3c4e:	f3ef 8410 	mrs	r4, PRIMASK
    3c52:	b672      	cpsid	i
    3c54:	480a      	ldr	r0, [pc, #40]	; (3c80 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3c56:	7841      	ldrb	r1, [r0, #1]
    3c58:	b129      	cbz	r1, 3c66 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3c5a:	7841      	ldrb	r1, [r0, #1]
    3c5c:	1e49      	subs	r1, r1, #1
    3c5e:	7041      	strb	r1, [r0, #1]
    3c60:	7841      	ldrb	r1, [r0, #1]
    3c62:	b129      	cbz	r1, 3c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3c64:	e008      	b.n	3c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c66:	f240 110d 	movw	r1, #269	; 0x10d
    3c6a:	206d      	movs	r0, #109	; 0x6d
    3c6c:	f000 f99e 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c70:	7880      	ldrb	r0, [r0, #2]
    3c72:	b908      	cbnz	r0, 3c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c74:	f000 f930 	bl	3ed8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3c78:	2c00      	cmp	r4, #0
    3c7a:	d100      	bne.n	3c7e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3c7c:	b662      	cpsie	i
    3c7e:	bd10      	pop	{r4, pc}
    3c80:	2000002c 	.word	0x2000002c

00003c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3c84:	b510      	push	{r4, lr}
    3c86:	f3ef 8410 	mrs	r4, PRIMASK
    3c8a:	b672      	cpsid	i
    3c8c:	4806      	ldr	r0, [pc, #24]	; (3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3c8e:	7841      	ldrb	r1, [r0, #1]
    3c90:	1c49      	adds	r1, r1, #1
    3c92:	7041      	strb	r1, [r0, #1]
    3c94:	7840      	ldrb	r0, [r0, #1]
    3c96:	2801      	cmp	r0, #1
    3c98:	d101      	bne.n	3c9e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3c9a:	f008 ff76 	bl	cb8a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3c9e:	2c00      	cmp	r4, #0
    3ca0:	d100      	bne.n	3ca4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3ca2:	b662      	cpsie	i
    3ca4:	bd10      	pop	{r4, pc}
    3ca6:	0000      	.short	0x0000
    3ca8:	2000002c 	.word	0x2000002c

00003cac <mpsl_clock_hfclk_release>:
    3cac:	4805      	ldr	r0, [pc, #20]	; (3cc4 <mpsl_clock_hfclk_release+0x18>)
    3cae:	b510      	push	{r4, lr}
    3cb0:	78c1      	ldrb	r1, [r0, #3]
    3cb2:	b121      	cbz	r1, 3cbe <mpsl_clock_hfclk_release+0x12>
    3cb4:	2100      	movs	r1, #0
    3cb6:	7101      	strb	r1, [r0, #4]
    3cb8:	70c1      	strb	r1, [r0, #3]
    3cba:	f7ff ffc7 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3cbe:	2000      	movs	r0, #0
    3cc0:	bd10      	pop	{r4, pc}
    3cc2:	0000      	.short	0x0000
    3cc4:	2000002c 	.word	0x2000002c

00003cc8 <mpsl_clock_hfclk_request>:
    3cc8:	b570      	push	{r4, r5, r6, lr}
    3cca:	4c0c      	ldr	r4, [pc, #48]	; (3cfc <mpsl_clock_hfclk_request+0x34>)
    3ccc:	78e1      	ldrb	r1, [r4, #3]
    3cce:	b961      	cbnz	r1, 3cea <mpsl_clock_hfclk_request+0x22>
    3cd0:	2501      	movs	r5, #1
    3cd2:	70e5      	strb	r5, [r4, #3]
    3cd4:	61e0      	str	r0, [r4, #28]
    3cd6:	f7ff ffd5 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3cda:	f000 f8ef 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3cde:	b130      	cbz	r0, 3cee <mpsl_clock_hfclk_request+0x26>
    3ce0:	69e0      	ldr	r0, [r4, #28]
    3ce2:	b110      	cbz	r0, 3cea <mpsl_clock_hfclk_request+0x22>
    3ce4:	4780      	blx	r0
    3ce6:	2000      	movs	r0, #0
    3ce8:	61e0      	str	r0, [r4, #28]
    3cea:	2000      	movs	r0, #0
    3cec:	bd70      	pop	{r4, r5, r6, pc}
    3cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3cf2:	7125      	strb	r5, [r4, #4]
    3cf4:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3cf8:	e7f7      	b.n	3cea <mpsl_clock_hfclk_request+0x22>
    3cfa:	0000      	.short	0x0000
    3cfc:	2000002c 	.word	0x2000002c

00003d00 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3d00:	f3ef 8010 	mrs	r0, PRIMASK
    3d04:	b672      	cpsid	i
    3d06:	4904      	ldr	r1, [pc, #16]	; (3d18 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3d08:	788a      	ldrb	r2, [r1, #2]
    3d0a:	1c52      	adds	r2, r2, #1
    3d0c:	708a      	strb	r2, [r1, #2]
    3d0e:	2800      	cmp	r0, #0
    3d10:	d100      	bne.n	3d14 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3d12:	b662      	cpsie	i
    3d14:	4770      	bx	lr
    3d16:	0000      	.short	0x0000
    3d18:	2000002c 	.word	0x2000002c

00003d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3d1c:	b510      	push	{r4, lr}
    3d1e:	f3ef 8410 	mrs	r4, PRIMASK
    3d22:	b672      	cpsid	i
    3d24:	480a      	ldr	r0, [pc, #40]	; (3d50 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3d26:	7881      	ldrb	r1, [r0, #2]
    3d28:	b129      	cbz	r1, 3d36 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3d2a:	7881      	ldrb	r1, [r0, #2]
    3d2c:	1e49      	subs	r1, r1, #1
    3d2e:	7081      	strb	r1, [r0, #2]
    3d30:	7841      	ldrb	r1, [r0, #1]
    3d32:	b129      	cbz	r1, 3d40 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3d34:	e008      	b.n	3d48 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3d36:	f240 1125 	movw	r1, #293	; 0x125
    3d3a:	206d      	movs	r0, #109	; 0x6d
    3d3c:	f000 f936 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d40:	7880      	ldrb	r0, [r0, #2]
    3d42:	b908      	cbnz	r0, 3d48 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3d44:	f000 f8c8 	bl	3ed8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3d48:	2c00      	cmp	r4, #0
    3d4a:	d100      	bne.n	3d4e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3d4c:	b662      	cpsie	i
    3d4e:	bd10      	pop	{r4, pc}
    3d50:	2000002c 	.word	0x2000002c

00003d54 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d58:	0004      	movs	r4, r0
    3d5a:	f06f 0015 	mvn.w	r0, #21
    3d5e:	d03c      	beq.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d60:	7821      	ldrb	r1, [r4, #0]
    3d62:	2904      	cmp	r1, #4
    3d64:	d839      	bhi.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d66:	2900      	cmp	r1, #0
    3d68:	7861      	ldrb	r1, [r4, #1]
    3d6a:	d038      	beq.n	3dde <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3d6c:	2900      	cmp	r1, #0
    3d6e:	d134      	bne.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d70:	78a1      	ldrb	r1, [r4, #2]
    3d72:	2900      	cmp	r1, #0
    3d74:	d131      	bne.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d76:	2000      	movs	r0, #0
    3d78:	f008 feb6 	bl	cae8 <MPSL_IRQ_RADIO_Handler+0x1e>
    3d7c:	2000      	movs	r0, #0
    3d7e:	f008 fea6 	bl	cace <MPSL_IRQ_RADIO_Handler+0x4>
    3d82:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3d86:	f04f 31ff 	mov.w	r1, #4294967295
    3d8a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3d8e:	2600      	movs	r6, #0
    3d90:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3d94:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3d98:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3d9c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3da0:	4f14      	ldr	r7, [pc, #80]	; (3df4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3da2:	707e      	strb	r6, [r7, #1]
    3da4:	88a0      	ldrh	r0, [r4, #4]
    3da6:	81b8      	strh	r0, [r7, #12]
    3da8:	f008 fee6 	bl	cb78 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3dac:	2501      	movs	r5, #1
    3dae:	b108      	cbz	r0, 3db4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3db0:	70fd      	strb	r5, [r7, #3]
    3db2:	707d      	strb	r5, [r7, #1]
    3db4:	2101      	movs	r1, #1
    3db6:	4640      	mov	r0, r8
    3db8:	f008 fed0 	bl	cb5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3dbc:	b108      	cbz	r0, 3dc2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3dbe:	f000 f877 	bl	3eb0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3dc2:	4620      	mov	r0, r4
    3dc4:	f7ff fe7c 	bl	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3dc8:	727d      	strb	r5, [r7, #9]
    3dca:	2000      	movs	r0, #0
    3dcc:	f008 fe7f 	bl	cace <MPSL_IRQ_RADIO_Handler+0x4>
    3dd0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3dd4:	4630      	mov	r0, r6
    3dd6:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dde:	2900      	cmp	r1, #0
    3de0:	d0fb      	beq.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3de2:	2920      	cmp	r1, #32
    3de4:	d8f9      	bhi.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3de6:	78a1      	ldrb	r1, [r4, #2]
    3de8:	2921      	cmp	r1, #33	; 0x21
    3dea:	d8f6      	bhi.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3dec:	2901      	cmp	r1, #1
    3dee:	d1c2      	bne.n	3d76 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3df0:	e7f3      	b.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3df2:	0000      	.short	0x0000
    3df4:	2000002c 	.word	0x2000002c

00003df8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3df8:	4801      	ldr	r0, [pc, #4]	; (3e00 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3dfa:	8980      	ldrh	r0, [r0, #12]
    3dfc:	4770      	bx	lr
    3dfe:	0000      	.short	0x0000
    3e00:	2000002c 	.word	0x2000002c

00003e04 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3e04:	4802      	ldr	r0, [pc, #8]	; (3e10 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3e06:	7a80      	ldrb	r0, [r0, #10]
    3e08:	2800      	cmp	r0, #0
    3e0a:	d000      	beq.n	3e0e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3e0c:	2001      	movs	r0, #1
    3e0e:	4770      	bx	lr
    3e10:	2000002c 	.word	0x2000002c

00003e14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e16:	4d1f      	ldr	r5, [pc, #124]	; (3e94 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e18:	7ae8      	ldrb	r0, [r5, #11]
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d10f      	bne.n	3e3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e1e:	7e28      	ldrb	r0, [r5, #24]
    3e20:	f000 0003 	and.w	r0, r0, #3
    3e24:	f008 feb6 	bl	cb94 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e28:	2800      	cmp	r0, #0
    3e2a:	d008      	beq.n	3e3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e2c:	f3ef 8110 	mrs	r1, PRIMASK
    3e30:	b672      	cpsid	i
    3e32:	f7ff ffe7 	bl	3e04 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3e36:	b118      	cbz	r0, 3e40 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3e38:	2900      	cmp	r1, #0
    3e3a:	d100      	bne.n	3e3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e3c:	b662      	cpsie	i
    3e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e40:	2601      	movs	r6, #1
    3e42:	72ae      	strb	r6, [r5, #10]
    3e44:	b901      	cbnz	r1, 3e48 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3e46:	b662      	cpsie	i
    3e48:	2018      	movs	r0, #24
    3e4a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3e4e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3e52:	61a6      	str	r6, [r4, #24]
    3e54:	f44f 7020 	mov.w	r0, #640	; 0x280
    3e58:	f8ad 0000 	strh.w	r0, [sp]
    3e5c:	f8bd 0000 	ldrh.w	r0, [sp]
    3e60:	1e41      	subs	r1, r0, #1
    3e62:	f8ad 1000 	strh.w	r1, [sp]
    3e66:	d2f9      	bcs.n	3e5c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3e68:	2700      	movs	r7, #0
    3e6a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3e6e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3e72:	4808      	ldr	r0, [pc, #32]	; (3e94 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e74:	3008      	adds	r0, #8
    3e76:	f008 fef3 	bl	cc60 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3e7a:	702f      	strb	r7, [r5, #0]
    3e7c:	f7ff fd78 	bl	3970 <MPSL_IRQ_CLOCK_Handler+0x88>
    3e80:	6166      	str	r6, [r4, #20]
    3e82:	7968      	ldrb	r0, [r5, #5]
    3e84:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3e88:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3e8c:	2018      	movs	r0, #24
    3e8e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e94:	2000002c 	.word	0x2000002c

00003e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3e98:	b510      	push	{r4, lr}
    3e9a:	4c04      	ldr	r4, [pc, #16]	; (3eac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3e9c:	7e20      	ldrb	r0, [r4, #24]
    3e9e:	f000 0003 	and.w	r0, r0, #3
    3ea2:	f008 fe77 	bl	cb94 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d0f8      	beq.n	3e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3eaa:	bd10      	pop	{r4, pc}
    3eac:	2000002c 	.word	0x2000002c

00003eb0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3eb0:	4901      	ldr	r1, [pc, #4]	; (3eb8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3eb2:	2001      	movs	r0, #1
    3eb4:	7008      	strb	r0, [r1, #0]
    3eb6:	4770      	bx	lr
    3eb8:	20000284 	.word	0x20000284

00003ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3ebc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3ec0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3ec4:	b918      	cbnz	r0, 3ece <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3ec6:	4803      	ldr	r0, [pc, #12]	; (3ed4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3ec8:	7800      	ldrb	r0, [r0, #0]
    3eca:	2800      	cmp	r0, #0
    3ecc:	d000      	beq.n	3ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3ece:	2001      	movs	r0, #1
    3ed0:	4770      	bx	lr
    3ed2:	0000      	.short	0x0000
    3ed4:	20000284 	.word	0x20000284

00003ed8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3ed8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3edc:	2101      	movs	r1, #1
    3ede:	6041      	str	r1, [r0, #4]
    3ee0:	2100      	movs	r1, #0
    3ee2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3ee6:	4801      	ldr	r0, [pc, #4]	; (3eec <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3ee8:	7001      	strb	r1, [r0, #0]
    3eea:	4770      	bx	lr
    3eec:	20000284 	.word	0x20000284

00003ef0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3ef0:	4802      	ldr	r0, [pc, #8]	; (3efc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3ef2:	6800      	ldr	r0, [r0, #0]
    3ef4:	f000 0003 	and.w	r0, r0, #3
    3ef8:	4770      	bx	lr
    3efa:	0000      	.short	0x0000
    3efc:	4000041c 	.word	0x4000041c
    3f00:	b510      	push	{r4, lr}
    3f02:	b131      	cbz	r1, 3f12 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3f04:	2901      	cmp	r1, #1
    3f06:	d007      	beq.n	3f18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3f08:	f240 3102 	movw	r1, #770	; 0x302
    3f0c:	a005      	add	r0, pc, #20	; (adr r0, 3f24 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3f0e:	f000 f821 	bl	3f54 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3f12:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3f16:	e001      	b.n	3f1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3f18:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3f1c:	f000 0001 	and.w	r0, r0, #1
    3f20:	bd10      	pop	{r4, pc}
    3f22:	0000      	.short	0x0000
    3f24:	5f66726e 	.word	0x5f66726e
    3f28:	636f6c63 	.word	0x636f6c63
    3f2c:	00682e6b 	.word	0x00682e6b
    3f30:	f3bf 8f4f 	dsb	sy
    3f34:	4805      	ldr	r0, [pc, #20]	; (3f4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3f36:	6801      	ldr	r1, [r0, #0]
    3f38:	4a05      	ldr	r2, [pc, #20]	; (3f50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3f3a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f3e:	4311      	orrs	r1, r2
    3f40:	6001      	str	r1, [r0, #0]
    3f42:	f3bf 8f4f 	dsb	sy
    3f46:	bf00      	nop
    3f48:	e7fd      	b.n	3f46 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3f4a:	0000      	.short	0x0000
    3f4c:	e000ed0c 	.word	0xe000ed0c
    3f50:	05fa0004 	.word	0x05fa0004

00003f54 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3f54:	b672      	cpsid	i
    3f56:	4a03      	ldr	r2, [pc, #12]	; (3f64 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3f58:	6852      	ldr	r2, [r2, #4]
    3f5a:	b102      	cbz	r2, 3f5e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3f5c:	4790      	blx	r2
    3f5e:	f7ff ffe7 	bl	3f30 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3f62:	0000      	.short	0x0000
    3f64:	2000004c 	.word	0x2000004c
    3f68:	4806      	ldr	r0, [pc, #24]	; (3f84 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3f6a:	b510      	push	{r4, lr}
    3f6c:	2100      	movs	r1, #0
    3f6e:	6001      	str	r1, [r0, #0]
    3f70:	2101      	movs	r1, #1
    3f72:	6001      	str	r1, [r0, #0]
    3f74:	4608      	mov	r0, r1
    3f76:	f008 fe34 	bl	cbe2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f7e:	2001      	movs	r0, #1
    3f80:	f008 be22 	b.w	cbc8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f84:	40001ffc 	.word	0x40001ffc
    3f88:	4807      	ldr	r0, [pc, #28]	; (3fa8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3f8a:	b510      	push	{r4, lr}
    3f8c:	2101      	movs	r1, #1
    3f8e:	6041      	str	r1, [r0, #4]
    3f90:	1e89      	subs	r1, r1, #2
    3f92:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3f96:	200c      	movs	r0, #12
    3f98:	f008 fe23 	bl	cbe2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3fa0:	200c      	movs	r0, #12
    3fa2:	f008 be11 	b.w	cbc8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3fa6:	0000      	.short	0x0000
    3fa8:	4000c000 	.word	0x4000c000

00003fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3fac:	b50e      	push	{r1, r2, r3, lr}
    3fae:	b672      	cpsid	i
    3fb0:	4a0f      	ldr	r2, [pc, #60]	; (3ff0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3fb2:	6855      	ldr	r5, [r2, #4]
    3fb4:	b1d5      	cbz	r5, 3fec <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3fb6:	2200      	movs	r2, #0
    3fb8:	4603      	mov	r3, r0
    3fba:	466e      	mov	r6, sp
    3fbc:	240a      	movs	r4, #10
    3fbe:	e003      	b.n	3fc8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3fc0:	fbb0 f0f4 	udiv	r0, r0, r4
    3fc4:	1c52      	adds	r2, r2, #1
    3fc6:	b2d2      	uxtb	r2, r2
    3fc8:	2800      	cmp	r0, #0
    3fca:	d1f9      	bne.n	3fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3fcc:	54b0      	strb	r0, [r6, r2]
    3fce:	e009      	b.n	3fe4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3fd0:	fbb3 f0f4 	udiv	r0, r3, r4
    3fd4:	fb04 3010 	mls	r0, r4, r0, r3
    3fd8:	fbb3 f3f4 	udiv	r3, r3, r4
    3fdc:	1e52      	subs	r2, r2, #1
    3fde:	b2d2      	uxtb	r2, r2
    3fe0:	3030      	adds	r0, #48	; 0x30
    3fe2:	54b0      	strb	r0, [r6, r2]
    3fe4:	2a00      	cmp	r2, #0
    3fe6:	d1f3      	bne.n	3fd0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3fe8:	4630      	mov	r0, r6
    3fea:	47a8      	blx	r5
    3fec:	f7ff ffa0 	bl	3f30 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3ff0:	2000004c 	.word	0x2000004c

00003ff4 <mpsl_init>:
    3ff4:	b570      	push	{r4, r5, r6, lr}
    3ff6:	4c17      	ldr	r4, [pc, #92]	; (4054 <mpsl_init+0x60>)
    3ff8:	4606      	mov	r6, r0
    3ffa:	460d      	mov	r5, r1
    3ffc:	7860      	ldrb	r0, [r4, #1]
    3ffe:	b110      	cbz	r0, 4006 <mpsl_init+0x12>
    4000:	f04f 30ff 	mov.w	r0, #4294967295
    4004:	bd70      	pop	{r4, r5, r6, pc}
    4006:	b906      	cbnz	r6, 400a <mpsl_init+0x16>
    4008:	4e13      	ldr	r6, [pc, #76]	; (4058 <mpsl_init+0x64>)
    400a:	6062      	str	r2, [r4, #4]
    400c:	7025      	strb	r5, [r4, #0]
    400e:	f7ff ffab 	bl	3f68 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4012:	f7ff ffb9 	bl	3f88 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4016:	4630      	mov	r0, r6
    4018:	f7ff fe9c 	bl	3d54 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    401c:	0006      	movs	r6, r0
    401e:	d1f1      	bne.n	4004 <mpsl_init+0x10>
    4020:	f7fe ff00 	bl	2e24 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4024:	f7ff fef6 	bl	3e14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4028:	f008 fd28 	bl	ca7c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    402c:	4628      	mov	r0, r5
    402e:	f008 fdcb 	bl	cbc8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4032:	2001      	movs	r0, #1
    4034:	2d00      	cmp	r5, #0
    4036:	db09      	blt.n	404c <mpsl_init+0x58>
    4038:	f005 011f 	and.w	r1, r5, #31
    403c:	fa00 f101 	lsl.w	r1, r0, r1
    4040:	096a      	lsrs	r2, r5, #5
    4042:	0092      	lsls	r2, r2, #2
    4044:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4048:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    404c:	7060      	strb	r0, [r4, #1]
    404e:	4630      	mov	r0, r6
    4050:	bd70      	pop	{r4, r5, r6, pc}
    4052:	0000      	.short	0x0000
    4054:	2000004c 	.word	0x2000004c
    4058:	0000cc04 	.word	0x0000cc04

0000405c <mpsl_is_initialized>:
    405c:	4801      	ldr	r0, [pc, #4]	; (4064 <mpsl_is_initialized+0x8>)
    405e:	7840      	ldrb	r0, [r0, #1]
    4060:	4770      	bx	lr
    4062:	0000      	.short	0x0000
    4064:	2000004c 	.word	0x2000004c

00004068 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4068:	4807      	ldr	r0, [pc, #28]	; (4088 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    406a:	f990 0000 	ldrsb.w	r0, [r0]
    406e:	2800      	cmp	r0, #0
    4070:	db09      	blt.n	4086 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4072:	f000 021f 	and.w	r2, r0, #31
    4076:	2101      	movs	r1, #1
    4078:	4091      	lsls	r1, r2
    407a:	0940      	lsrs	r0, r0, #5
    407c:	0080      	lsls	r0, r0, #2
    407e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4082:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4086:	4770      	bx	lr
    4088:	2000004c 	.word	0x2000004c

0000408c <mpsl_temperature_get>:
    408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4090:	2601      	movs	r6, #1
    4092:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4096:	0331      	lsls	r1, r6, #12
    4098:	f04f 0800 	mov.w	r8, #0
    409c:	4640      	mov	r0, r8
    409e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    40a2:	f3bf 8f4f 	dsb	sy
    40a6:	f3bf 8f6f 	isb	sy
    40aa:	4c16      	ldr	r4, [pc, #88]	; (4104 <mpsl_temperature_get+0x78>)
    40ac:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    40b0:	200c      	movs	r0, #12
    40b2:	f008 fdb5 	bl	cc20 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40b6:	4d14      	ldr	r5, [pc, #80]	; (4108 <mpsl_temperature_get+0x7c>)
    40b8:	6828      	ldr	r0, [r5, #0]
    40ba:	43c0      	mvns	r0, r0
    40bc:	f340 1700 	sbfx	r7, r0, #4, #1
    40c0:	6828      	ldr	r0, [r5, #0]
    40c2:	f040 0010 	orr.w	r0, r0, #16
    40c6:	6028      	str	r0, [r5, #0]
    40c8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    40cc:	6026      	str	r6, [r4, #0]
    40ce:	1c7f      	adds	r7, r7, #1
    40d0:	e002      	b.n	40d8 <mpsl_temperature_get+0x4c>
    40d2:	bf00      	nop
    40d4:	f000 f890 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40d8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    40dc:	2800      	cmp	r0, #0
    40de:	d0f9      	beq.n	40d4 <mpsl_temperature_get+0x48>
    40e0:	b91f      	cbnz	r7, 40ea <mpsl_temperature_get+0x5e>
    40e2:	6828      	ldr	r0, [r5, #0]
    40e4:	f020 0010 	bic.w	r0, r0, #16
    40e8:	6028      	str	r0, [r5, #0]
    40ea:	4808      	ldr	r0, [pc, #32]	; (410c <mpsl_temperature_get+0x80>)
    40ec:	6805      	ldr	r5, [r0, #0]
    40ee:	6066      	str	r6, [r4, #4]
    40f0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    40f4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    40f8:	200c      	movs	r0, #12
    40fa:	f008 fd91 	bl	cc20 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40fe:	4628      	mov	r0, r5
    4100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4104:	4000c000 	.word	0x4000c000
    4108:	e000ed10 	.word	0xe000ed10
    410c:	4000c508 	.word	0x4000c508

00004110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4110:	b510      	push	{r4, lr}
    4112:	4602      	mov	r2, r0
    4114:	2005      	movs	r0, #5
    4116:	490c      	ldr	r1, [pc, #48]	; (4148 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4118:	e004      	b.n	4124 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    411a:	bf00      	nop
    411c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4120:	791b      	ldrb	r3, [r3, #4]
    4122:	b133      	cbz	r3, 4132 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4124:	1e40      	subs	r0, r0, #1
    4126:	b2c0      	uxtb	r0, r0
    4128:	d2f8      	bcs.n	411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    412a:	2148      	movs	r1, #72	; 0x48
    412c:	2069      	movs	r0, #105	; 0x69
    412e:	f7ff ff3d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4132:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4136:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    413a:	2200      	movs	r2, #0
    413c:	714a      	strb	r2, [r1, #5]
    413e:	718a      	strb	r2, [r1, #6]
    4140:	2201      	movs	r2, #1
    4142:	710a      	strb	r2, [r1, #4]
    4144:	bd10      	pop	{r4, pc}
    4146:	0000      	.short	0x0000
    4148:	20000dd8 	.word	0x20000dd8

0000414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    414c:	b510      	push	{r4, lr}
    414e:	2805      	cmp	r0, #5
    4150:	d301      	bcc.n	4156 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4152:	2158      	movs	r1, #88	; 0x58
    4154:	e006      	b.n	4164 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4156:	490a      	ldr	r1, [pc, #40]	; (4180 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4158:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    415c:	7901      	ldrb	r1, [r0, #4]
    415e:	2901      	cmp	r1, #1
    4160:	d003      	beq.n	416a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4162:	2159      	movs	r1, #89	; 0x59
    4164:	2069      	movs	r0, #105	; 0x69
    4166:	f7ff ff21 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    416a:	7941      	ldrb	r1, [r0, #5]
    416c:	7982      	ldrb	r2, [r0, #6]
    416e:	1c49      	adds	r1, r1, #1
    4170:	b2c9      	uxtb	r1, r1
    4172:	428a      	cmp	r2, r1
    4174:	d000      	beq.n	4178 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4176:	7141      	strb	r1, [r0, #5]
    4178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    417c:	f7ff bf74 	b.w	4068 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4180:	20000dd8 	.word	0x20000dd8

00004184 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4184:	b570      	push	{r4, r5, r6, lr}
    4186:	2505      	movs	r5, #5
    4188:	4e0e      	ldr	r6, [pc, #56]	; (41c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    418a:	4c0f      	ldr	r4, [pc, #60]	; (41c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    418c:	e016      	b.n	41bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    418e:	7821      	ldrb	r1, [r4, #0]
    4190:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4194:	7902      	ldrb	r2, [r0, #4]
    4196:	2a01      	cmp	r2, #1
    4198:	d108      	bne.n	41ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    419a:	7942      	ldrb	r2, [r0, #5]
    419c:	7983      	ldrb	r3, [r0, #6]
    419e:	429a      	cmp	r2, r3
    41a0:	d004      	beq.n	41ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    41a2:	7942      	ldrb	r2, [r0, #5]
    41a4:	7182      	strb	r2, [r0, #6]
    41a6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    41aa:	4780      	blx	r0
    41ac:	7820      	ldrb	r0, [r4, #0]
    41ae:	1c40      	adds	r0, r0, #1
    41b0:	b2c0      	uxtb	r0, r0
    41b2:	7020      	strb	r0, [r4, #0]
    41b4:	2805      	cmp	r0, #5
    41b6:	d301      	bcc.n	41bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    41b8:	2000      	movs	r0, #0
    41ba:	7020      	strb	r0, [r4, #0]
    41bc:	1e6d      	subs	r5, r5, #1
    41be:	b2ed      	uxtb	r5, r5
    41c0:	d2e5      	bcs.n	418e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    41c2:	bd70      	pop	{r4, r5, r6, pc}
    41c4:	20000dd8 	.word	0x20000dd8
    41c8:	20000285 	.word	0x20000285

000041cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    41cc:	b500      	push	{lr}
    41ce:	f008 fd56 	bl	cc7e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    41d2:	b940      	cbnz	r0, 41e6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41d4:	f008 fd5d 	bl	cc92 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    41d8:	b928      	cbnz	r0, 41e6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41da:	f008 fd71 	bl	ccc0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    41de:	b910      	cbnz	r0, 41e6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41e0:	f008 fd82 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41e4:	b108      	cbz	r0, 41ea <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    41e6:	4802      	ldr	r0, [pc, #8]	; (41f0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    41e8:	bd00      	pop	{pc}
    41ea:	4802      	ldr	r0, [pc, #8]	; (41f4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    41ec:	bd00      	pop	{pc}
    41ee:	0000      	.short	0x0000
    41f0:	4000050c 	.word	0x4000050c
    41f4:	4001e700 	.word	0x4001e700

000041f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    41f8:	b510      	push	{r4, lr}
    41fa:	f008 fd75 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41fe:	b330      	cbz	r0, 424e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4200:	f3ef 8010 	mrs	r0, PRIMASK
    4204:	b1c8      	cbz	r0, 423a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4206:	2100      	movs	r1, #0
    4208:	b672      	cpsid	i
    420a:	4812      	ldr	r0, [pc, #72]	; (4254 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    420c:	6802      	ldr	r2, [r0, #0]
    420e:	6803      	ldr	r3, [r0, #0]
    4210:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4214:	f043 0310 	orr.w	r3, r3, #16
    4218:	6003      	str	r3, [r0, #0]
    421a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    421e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4222:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4226:	431c      	orrs	r4, r3
    4228:	d000      	beq.n	422c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    422a:	bf40      	sev
    422c:	bf20      	wfe
    422e:	bf00      	nop
    4230:	bf00      	nop
    4232:	bf00      	nop
    4234:	bf00      	nop
    4236:	b112      	cbz	r2, 423e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4238:	e005      	b.n	4246 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    423a:	2101      	movs	r1, #1
    423c:	e7e4      	b.n	4208 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    423e:	6802      	ldr	r2, [r0, #0]
    4240:	f022 0210 	bic.w	r2, r2, #16
    4244:	6002      	str	r2, [r0, #0]
    4246:	2900      	cmp	r1, #0
    4248:	d000      	beq.n	424c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    424a:	b662      	cpsie	i
    424c:	bd10      	pop	{r4, pc}
    424e:	bf20      	wfe
    4250:	bd10      	pop	{r4, pc}
    4252:	0000      	.short	0x0000
    4254:	e000ed10 	.word	0xe000ed10

00004258 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4258:	0000cf59 0000cf75 0000cf63 0000cf6f     Y...u...c...o...
    4268:	0000cf5d 0000cf57 0000cf55 0000cf7b     ]...W...U...{...
    4278:	0000cf69 0000cf4f 0000cf47 0000cf4b     i...O...G...K...
    4288:	0000cf41                                A...

0000428c <mpsl_fem_disable>:
    428c:	4801      	ldr	r0, [pc, #4]	; (4294 <mpsl_fem_disable+0x8>)
    428e:	6800      	ldr	r0, [r0, #0]
    4290:	6800      	ldr	r0, [r0, #0]
    4292:	4700      	bx	r0
    4294:	20000054 	.word	0x20000054

00004298 <mpsl_fem_lna_configuration_clear>:
    4298:	4801      	ldr	r0, [pc, #4]	; (42a0 <mpsl_fem_lna_configuration_clear+0x8>)
    429a:	6800      	ldr	r0, [r0, #0]
    429c:	6900      	ldr	r0, [r0, #16]
    429e:	4700      	bx	r0
    42a0:	20000054 	.word	0x20000054

000042a4 <mpsl_fem_lna_configuration_set>:
    42a4:	4a01      	ldr	r2, [pc, #4]	; (42ac <mpsl_fem_lna_configuration_set+0x8>)
    42a6:	6812      	ldr	r2, [r2, #0]
    42a8:	6892      	ldr	r2, [r2, #8]
    42aa:	4710      	bx	r2
    42ac:	20000054 	.word	0x20000054

000042b0 <mpsl_fem_pa_configuration_clear>:
    42b0:	4801      	ldr	r0, [pc, #4]	; (42b8 <mpsl_fem_pa_configuration_clear+0x8>)
    42b2:	6800      	ldr	r0, [r0, #0]
    42b4:	68c0      	ldr	r0, [r0, #12]
    42b6:	4700      	bx	r0
    42b8:	20000054 	.word	0x20000054

000042bc <mpsl_fem_pa_configuration_set>:
    42bc:	4a01      	ldr	r2, [pc, #4]	; (42c4 <mpsl_fem_pa_configuration_set+0x8>)
    42be:	6812      	ldr	r2, [r2, #0]
    42c0:	6852      	ldr	r2, [r2, #4]
    42c2:	4710      	bx	r2
    42c4:	20000054 	.word	0x20000054

000042c8 <mpsl_fem_pa_is_configured>:
    42c8:	4901      	ldr	r1, [pc, #4]	; (42d0 <mpsl_fem_pa_is_configured+0x8>)
    42ca:	6809      	ldr	r1, [r1, #0]
    42cc:	6a09      	ldr	r1, [r1, #32]
    42ce:	4708      	bx	r1
    42d0:	20000054 	.word	0x20000054

000042d4 <mpsl_fem_device_config_254_apply_get>:
    42d4:	4801      	ldr	r0, [pc, #4]	; (42dc <mpsl_fem_device_config_254_apply_get+0x8>)
    42d6:	7800      	ldrb	r0, [r0, #0]
    42d8:	4770      	bx	lr
    42da:	0000      	.short	0x0000
    42dc:	20000286 	.word	0x20000286
    42e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    42e2:	4c17      	ldr	r4, [pc, #92]	; (4340 <mpsl_fem_device_config_254_apply_get+0x6c>)
    42e4:	7a20      	ldrb	r0, [r4, #8]
    42e6:	2802      	cmp	r0, #2
    42e8:	d200      	bcs.n	42ec <mpsl_fem_device_config_254_apply_get+0x18>
    42ea:	2002      	movs	r0, #2
    42ec:	f88d 0001 	strb.w	r0, [sp, #1]
    42f0:	79e0      	ldrb	r0, [r4, #7]
    42f2:	2803      	cmp	r0, #3
    42f4:	d200      	bcs.n	42f8 <mpsl_fem_device_config_254_apply_get+0x24>
    42f6:	2003      	movs	r0, #3
    42f8:	f88d 0000 	strb.w	r0, [sp]
    42fc:	79a0      	ldrb	r0, [r4, #6]
    42fe:	f8ad 0004 	strh.w	r0, [sp, #4]
    4302:	7960      	ldrb	r0, [r4, #5]
    4304:	f8ad 0002 	strh.w	r0, [sp, #2]
    4308:	4668      	mov	r0, sp
    430a:	f006 ffeb 	bl	b2e4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    430e:	b108      	cbz	r0, 4314 <mpsl_fem_device_config_254_apply_get+0x40>
    4310:	2184      	movs	r1, #132	; 0x84
    4312:	e010      	b.n	4336 <mpsl_fem_device_config_254_apply_get+0x62>
    4314:	68e0      	ldr	r0, [r4, #12]
    4316:	9002      	str	r0, [sp, #8]
    4318:	a802      	add	r0, sp, #8
    431a:	f006 fff9 	bl	b310 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    431e:	b108      	cbz	r0, 4324 <mpsl_fem_device_config_254_apply_get+0x50>
    4320:	2188      	movs	r1, #136	; 0x88
    4322:	e008      	b.n	4336 <mpsl_fem_device_config_254_apply_get+0x62>
    4324:	4807      	ldr	r0, [pc, #28]	; (4344 <mpsl_fem_device_config_254_apply_get+0x70>)
    4326:	6800      	ldr	r0, [r0, #0]
    4328:	9003      	str	r0, [sp, #12]
    432a:	a803      	add	r0, sp, #12
    432c:	f00b facb 	bl	f8c6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4330:	2800      	cmp	r0, #0
    4332:	d003      	beq.n	433c <mpsl_fem_device_config_254_apply_get+0x68>
    4334:	218c      	movs	r1, #140	; 0x8c
    4336:	2003      	movs	r0, #3
    4338:	f000 f918 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    433c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    433e:	0000      	.short	0x0000
    4340:	20000e00 	.word	0x20000e00
    4344:	00004658 	.word	0x00004658
    4348:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    434a:	4604      	mov	r4, r0
    434c:	460e      	mov	r6, r1
    434e:	f100 0003 	add.w	r0, r0, #3
    4352:	f020 0003 	bic.w	r0, r0, #3
    4356:	f04f 0100 	mov.w	r1, #0
    435a:	e9cd 0100 	strd	r0, r1, [sp]
    435e:	7831      	ldrb	r1, [r6, #0]
    4360:	0015      	movs	r5, r2
    4362:	f88d 1005 	strb.w	r1, [sp, #5]
    4366:	d000      	beq.n	436a <mpsl_fem_device_config_254_apply_get+0x96>
    4368:	2000      	movs	r0, #0
    436a:	a901      	add	r1, sp, #4
    436c:	f000 faee 	bl	494c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    4370:	9900      	ldr	r1, [sp, #0]
    4372:	4408      	add	r0, r1
    4374:	490c      	ldr	r1, [pc, #48]	; (43a8 <mpsl_fem_device_config_254_apply_get+0xd4>)
    4376:	9000      	str	r0, [sp, #0]
    4378:	78c9      	ldrb	r1, [r1, #3]
    437a:	b149      	cbz	r1, 4390 <mpsl_fem_device_config_254_apply_get+0xbc>
    437c:	7c31      	ldrb	r1, [r6, #16]
    437e:	b139      	cbz	r1, 4390 <mpsl_fem_device_config_254_apply_get+0xbc>
    4380:	2225      	movs	r2, #37	; 0x25
    4382:	b105      	cbz	r5, 4386 <mpsl_fem_device_config_254_apply_get+0xb2>
    4384:	2000      	movs	r0, #0
    4386:	f000 fd29 	bl	4ddc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    438a:	9900      	ldr	r1, [sp, #0]
    438c:	4408      	add	r0, r1
    438e:	9000      	str	r0, [sp, #0]
    4390:	462a      	mov	r2, r5
    4392:	4631      	mov	r1, r6
    4394:	4668      	mov	r0, sp
    4396:	f008 fdf2 	bl	cf7e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    439a:	9800      	ldr	r0, [sp, #0]
    439c:	1dc0      	adds	r0, r0, #7
    439e:	f020 0007 	bic.w	r0, r0, #7
    43a2:	9000      	str	r0, [sp, #0]
    43a4:	1b00      	subs	r0, r0, r4
    43a6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    43a8:	20000058 	.word	0x20000058

000043ac <sdc_build_revision_get>:
    43ac:	b510      	push	{r4, lr}
    43ae:	b128      	cbz	r0, 43bc <sdc_build_revision_get+0x10>
    43b0:	2214      	movs	r2, #20
    43b2:	4904      	ldr	r1, [pc, #16]	; (43c4 <sdc_build_revision_get+0x18>)
    43b4:	f008 fcea 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43b8:	2000      	movs	r0, #0
    43ba:	bd10      	pop	{r4, pc}
    43bc:	f06f 0015 	mvn.w	r0, #21
    43c0:	bd10      	pop	{r4, pc}
    43c2:	0000      	.short	0x0000
    43c4:	00004674 	.word	0x00004674

000043c8 <sdc_cfg_set>:
    43c8:	b570      	push	{r4, r5, r6, lr}
    43ca:	0003      	movs	r3, r0
    43cc:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    43d0:	d103      	bne.n	43da <sdc_cfg_set+0x12>
    43d2:	4c2a      	ldr	r4, [pc, #168]	; (447c <sdc_cfg_set+0xb4>)
    43d4:	7863      	ldrb	r3, [r4, #1]
    43d6:	b10b      	cbz	r3, 43dc <sdc_cfg_set+0x14>
    43d8:	1180      	asrs	r0, r0, #6
    43da:	bd70      	pop	{r4, r5, r6, pc}
    43dc:	b319      	cbz	r1, 4426 <sdc_cfg_set+0x5e>
    43de:	f06f 0515 	mvn.w	r5, #21
    43e2:	b38a      	cbz	r2, 4448 <sdc_cfg_set+0x80>
    43e4:	4b26      	ldr	r3, [pc, #152]	; (4480 <sdc_cfg_set+0xb8>)
    43e6:	290c      	cmp	r1, #12
    43e8:	d243      	bcs.n	4472 <sdc_cfg_set+0xaa>
    43ea:	e8df f001 	tbb	[pc, r1]
    43ee:	0642      	.short	0x0642
    43f0:	13100c09 	.word	0x13100c09
    43f4:	2818251d 	.word	0x2818251d
    43f8:	332e      	.short	0x332e
    43fa:	7810      	ldrb	r0, [r2, #0]
    43fc:	7018      	strb	r0, [r3, #0]
    43fe:	e02d      	b.n	445c <sdc_cfg_set+0x94>
    4400:	7810      	ldrb	r0, [r2, #0]
    4402:	7058      	strb	r0, [r3, #1]
    4404:	e02a      	b.n	445c <sdc_cfg_set+0x94>
    4406:	6810      	ldr	r0, [r2, #0]
    4408:	f8c3 0005 	str.w	r0, [r3, #5]
    440c:	e026      	b.n	445c <sdc_cfg_set+0x94>
    440e:	6810      	ldr	r0, [r2, #0]
    4410:	60d8      	str	r0, [r3, #12]
    4412:	e023      	b.n	445c <sdc_cfg_set+0x94>
    4414:	7811      	ldrb	r1, [r2, #0]
    4416:	2900      	cmp	r1, #0
    4418:	d1df      	bne.n	43da <sdc_cfg_set+0x12>
    441a:	7099      	strb	r1, [r3, #2]
    441c:	e01e      	b.n	445c <sdc_cfg_set+0x94>
    441e:	7811      	ldrb	r1, [r2, #0]
    4420:	2900      	cmp	r1, #0
    4422:	d1da      	bne.n	43da <sdc_cfg_set+0x12>
    4424:	70d9      	strb	r1, [r3, #3]
    4426:	e019      	b.n	445c <sdc_cfg_set+0x94>
    4428:	78e0      	ldrb	r0, [r4, #3]
    442a:	b110      	cbz	r0, 4432 <sdc_cfg_set+0x6a>
    442c:	7810      	ldrb	r0, [r2, #0]
    442e:	2802      	cmp	r0, #2
    4430:	d31f      	bcc.n	4472 <sdc_cfg_set+0xaa>
    4432:	7810      	ldrb	r0, [r2, #0]
    4434:	7418      	strb	r0, [r3, #16]
    4436:	e011      	b.n	445c <sdc_cfg_set+0x94>
    4438:	8810      	ldrh	r0, [r2, #0]
    443a:	8258      	strh	r0, [r3, #18]
    443c:	e00e      	b.n	445c <sdc_cfg_set+0x94>
    443e:	7811      	ldrb	r1, [r2, #0]
    4440:	2900      	cmp	r1, #0
    4442:	d1ca      	bne.n	43da <sdc_cfg_set+0x12>
    4444:	7119      	strb	r1, [r3, #4]
    4446:	e009      	b.n	445c <sdc_cfg_set+0x94>
    4448:	e013      	b.n	4472 <sdc_cfg_set+0xaa>
    444a:	7810      	ldrb	r0, [r2, #0]
    444c:	2802      	cmp	r0, #2
    444e:	d310      	bcc.n	4472 <sdc_cfg_set+0xaa>
    4450:	7518      	strb	r0, [r3, #20]
    4452:	e003      	b.n	445c <sdc_cfg_set+0x94>
    4454:	7811      	ldrb	r1, [r2, #0]
    4456:	2900      	cmp	r1, #0
    4458:	d1bf      	bne.n	43da <sdc_cfg_set+0x12>
    445a:	7559      	strb	r1, [r3, #21]
    445c:	2201      	movs	r2, #1
    445e:	4908      	ldr	r1, [pc, #32]	; (4480 <sdc_cfg_set+0xb8>)
    4460:	2000      	movs	r0, #0
    4462:	f7ff ff71 	bl	4348 <mpsl_fem_device_config_254_apply_get+0x74>
    4466:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    446a:	db04      	blt.n	4476 <sdc_cfg_set+0xae>
    446c:	f06f 000b 	mvn.w	r0, #11
    4470:	bd70      	pop	{r4, r5, r6, pc}
    4472:	4628      	mov	r0, r5
    4474:	bd70      	pop	{r4, r5, r6, pc}
    4476:	2101      	movs	r1, #1
    4478:	70a1      	strb	r1, [r4, #2]
    447a:	bd70      	pop	{r4, r5, r6, pc}
    447c:	20000058 	.word	0x20000058
    4480:	20000e00 	.word	0x20000e00

00004484 <sdc_enable>:
    4484:	b570      	push	{r4, r5, r6, lr}
    4486:	460c      	mov	r4, r1
    4488:	0005      	movs	r5, r0
    448a:	d019      	beq.n	44c0 <sdc_enable+0x3c>
    448c:	b1c4      	cbz	r4, 44c0 <sdc_enable+0x3c>
    448e:	f000 f925 	bl	46dc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4492:	b1c0      	cbz	r0, 44c6 <sdc_enable+0x42>
    4494:	4628      	mov	r0, r5
    4496:	f7ff fe3b 	bl	4110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    449a:	4d0c      	ldr	r5, [pc, #48]	; (44cc <sdc_enable+0x48>)
    449c:	2200      	movs	r2, #0
    449e:	490c      	ldr	r1, [pc, #48]	; (44d0 <sdc_enable+0x4c>)
    44a0:	7028      	strb	r0, [r5, #0]
    44a2:	4620      	mov	r0, r4
    44a4:	f7ff ff50 	bl	4348 <mpsl_fem_device_config_254_apply_get+0x74>
    44a8:	f00b fe0e 	bl	100c8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    44ac:	2100      	movs	r1, #0
    44ae:	7828      	ldrb	r0, [r5, #0]
    44b0:	f007 f912 	bl	b6d8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    44b4:	f7ff ff14 	bl	42e0 <mpsl_fem_device_config_254_apply_get+0xc>
    44b8:	2001      	movs	r0, #1
    44ba:	7068      	strb	r0, [r5, #1]
    44bc:	2000      	movs	r0, #0
    44be:	bd70      	pop	{r4, r5, r6, pc}
    44c0:	f06f 0015 	mvn.w	r0, #21
    44c4:	bd70      	pop	{r4, r5, r6, pc}
    44c6:	f04f 30ff 	mov.w	r0, #4294967295
    44ca:	bd70      	pop	{r4, r5, r6, pc}
    44cc:	20000058 	.word	0x20000058
    44d0:	20000e00 	.word	0x20000e00

000044d4 <sdc_init>:
    44d4:	b530      	push	{r4, r5, lr}
    44d6:	b087      	sub	sp, #28
    44d8:	0005      	movs	r5, r0
    44da:	d00c      	beq.n	44f6 <sdc_init+0x22>
    44dc:	f7ff fdbe 	bl	405c <mpsl_is_initialized>
    44e0:	f04f 34ff 	mov.w	r4, #4294967295
    44e4:	b120      	cbz	r0, 44f0 <sdc_init+0x1c>
    44e6:	f7ff fc87 	bl	3df8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    44ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    44ee:	d905      	bls.n	44fc <sdc_init+0x28>
    44f0:	4620      	mov	r0, r4
    44f2:	b007      	add	sp, #28
    44f4:	bd30      	pop	{r4, r5, pc}
    44f6:	f06f 0015 	mvn.w	r0, #21
    44fa:	e7fa      	b.n	44f2 <sdc_init+0x1e>
    44fc:	4c15      	ldr	r4, [pc, #84]	; (4554 <sdc_init+0x80>)
    44fe:	4816      	ldr	r0, [pc, #88]	; (4558 <sdc_init+0x84>)
    4500:	6065      	str	r5, [r4, #4]
    4502:	f000 f9e5 	bl	48d0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4506:	2000      	movs	r0, #0
    4508:	7060      	strb	r0, [r4, #1]
    450a:	70a0      	strb	r0, [r4, #2]
    450c:	70e0      	strb	r0, [r4, #3]
    450e:	4601      	mov	r1, r0
    4510:	2218      	movs	r2, #24
    4512:	4668      	mov	r0, sp
    4514:	f008 fcb4 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4518:	2218      	movs	r2, #24
    451a:	4910      	ldr	r1, [pc, #64]	; (455c <sdc_init+0x88>)
    451c:	4668      	mov	r0, sp
    451e:	f008 fc35 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4522:	2218      	movs	r2, #24
    4524:	4669      	mov	r1, sp
    4526:	480e      	ldr	r0, [pc, #56]	; (4560 <sdc_init+0x8c>)
    4528:	f008 fc30 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    452c:	f3ef 8410 	mrs	r4, PRIMASK
    4530:	b672      	cpsid	i
    4532:	480c      	ldr	r0, [pc, #48]	; (4564 <sdc_init+0x90>)
    4534:	f06f 010c 	mvn.w	r1, #12
    4538:	f000 fcf2 	bl	4f20 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    453c:	480a      	ldr	r0, [pc, #40]	; (4568 <sdc_init+0x94>)
    453e:	f000 fdbf 	bl	50c0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4542:	b118      	cbz	r0, 454c <sdc_init+0x78>
    4544:	219a      	movs	r1, #154	; 0x9a
    4546:	2003      	movs	r0, #3
    4548:	f000 f810 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    454c:	b904      	cbnz	r4, 4550 <sdc_init+0x7c>
    454e:	b662      	cpsie	i
    4550:	2000      	movs	r0, #0
    4552:	e7ce      	b.n	44f2 <sdc_init+0x1e>
    4554:	20000058 	.word	0x20000058
    4558:	000042e1 	.word	0x000042e1
    455c:	0000465c 	.word	0x0000465c
    4560:	20000e00 	.word	0x20000e00
    4564:	4000c000 	.word	0x4000c000
    4568:	00004709 	.word	0x00004709

0000456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    456c:	b50e      	push	{r1, r2, r3, lr}
    456e:	b672      	cpsid	i
    4570:	4a15      	ldr	r2, [pc, #84]	; (45c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4572:	6855      	ldr	r5, [r2, #4]
    4574:	b1d5      	cbz	r5, 45ac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4576:	2200      	movs	r2, #0
    4578:	4603      	mov	r3, r0
    457a:	466e      	mov	r6, sp
    457c:	240a      	movs	r4, #10
    457e:	e003      	b.n	4588 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4580:	fbb0 f0f4 	udiv	r0, r0, r4
    4584:	1c52      	adds	r2, r2, #1
    4586:	b2d2      	uxtb	r2, r2
    4588:	2800      	cmp	r0, #0
    458a:	d1f9      	bne.n	4580 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    458c:	54b0      	strb	r0, [r6, r2]
    458e:	e009      	b.n	45a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4590:	fbb3 f0f4 	udiv	r0, r3, r4
    4594:	fb04 3010 	mls	r0, r4, r0, r3
    4598:	fbb3 f3f4 	udiv	r3, r3, r4
    459c:	1e52      	subs	r2, r2, #1
    459e:	b2d2      	uxtb	r2, r2
    45a0:	3030      	adds	r0, #48	; 0x30
    45a2:	54b0      	strb	r0, [r6, r2]
    45a4:	2a00      	cmp	r2, #0
    45a6:	d1f3      	bne.n	4590 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    45a8:	4630      	mov	r0, r6
    45aa:	47a8      	blx	r5
    45ac:	f3bf 8f4f 	dsb	sy
    45b0:	4806      	ldr	r0, [pc, #24]	; (45cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    45b2:	6801      	ldr	r1, [r0, #0]
    45b4:	4a06      	ldr	r2, [pc, #24]	; (45d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    45b6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    45ba:	4311      	orrs	r1, r2
    45bc:	6001      	str	r1, [r0, #0]
    45be:	f3bf 8f4f 	dsb	sy
    45c2:	bf00      	nop
    45c4:	e7fd      	b.n	45c2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    45c6:	0000      	.short	0x0000
    45c8:	20000058 	.word	0x20000058
    45cc:	e000ed0c 	.word	0xe000ed0c
    45d0:	05fa0004 	.word	0x05fa0004

000045d4 <sdc_support_dle>:
    45d4:	4806      	ldr	r0, [pc, #24]	; (45f0 <sdc_support_dle+0x1c>)
    45d6:	b510      	push	{r4, lr}
    45d8:	7881      	ldrb	r1, [r0, #2]
    45da:	7840      	ldrb	r0, [r0, #1]
    45dc:	4301      	orrs	r1, r0
    45de:	d002      	beq.n	45e6 <sdc_support_dle+0x12>
    45e0:	f04f 30ff 	mov.w	r0, #4294967295
    45e4:	bd10      	pop	{r4, pc}
    45e6:	f006 fee9 	bl	b3bc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    45ea:	2000      	movs	r0, #0
    45ec:	bd10      	pop	{r4, pc}
    45ee:	0000      	.short	0x0000
    45f0:	20000058 	.word	0x20000058

000045f4 <sdc_support_le_2m_phy>:
    45f4:	4806      	ldr	r0, [pc, #24]	; (4610 <sdc_support_le_2m_phy+0x1c>)
    45f6:	b510      	push	{r4, lr}
    45f8:	7881      	ldrb	r1, [r0, #2]
    45fa:	7840      	ldrb	r0, [r0, #1]
    45fc:	4301      	orrs	r1, r0
    45fe:	d002      	beq.n	4606 <sdc_support_le_2m_phy+0x12>
    4600:	f04f 30ff 	mov.w	r0, #4294967295
    4604:	bd10      	pop	{r4, pc}
    4606:	f00b fa0b 	bl	fa20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    460a:	2000      	movs	r0, #0
    460c:	bd10      	pop	{r4, pc}
    460e:	0000      	.short	0x0000
    4610:	20000058 	.word	0x20000058

00004614 <sdc_support_master>:
    4614:	4806      	ldr	r0, [pc, #24]	; (4630 <sdc_support_master+0x1c>)
    4616:	b510      	push	{r4, lr}
    4618:	7881      	ldrb	r1, [r0, #2]
    461a:	7840      	ldrb	r0, [r0, #1]
    461c:	4301      	orrs	r1, r0
    461e:	d002      	beq.n	4626 <sdc_support_master+0x12>
    4620:	f04f 30ff 	mov.w	r0, #4294967295
    4624:	bd10      	pop	{r4, pc}
    4626:	f007 f88d 	bl	b744 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    462a:	2000      	movs	r0, #0
    462c:	bd10      	pop	{r4, pc}
    462e:	0000      	.short	0x0000
    4630:	20000058 	.word	0x20000058

00004634 <sdc_support_scan>:
    4634:	4807      	ldr	r0, [pc, #28]	; (4654 <sdc_support_scan+0x20>)
    4636:	b510      	push	{r4, lr}
    4638:	7881      	ldrb	r1, [r0, #2]
    463a:	7842      	ldrb	r2, [r0, #1]
    463c:	4311      	orrs	r1, r2
    463e:	d002      	beq.n	4646 <sdc_support_scan+0x12>
    4640:	f04f 30ff 	mov.w	r0, #4294967295
    4644:	bd10      	pop	{r4, pc}
    4646:	2101      	movs	r1, #1
    4648:	70c1      	strb	r1, [r0, #3]
    464a:	f007 f869 	bl	b720 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    464e:	2000      	movs	r0, #0
    4650:	bd10      	pop	{r4, pc}
    4652:	0000      	.short	0x0000
    4654:	20000058 	.word	0x20000058
    4658:	00000001 	.word	0x00000001
    465c:	00010101 	.word	0x00010101
    4660:	031b1b00 	.word	0x031b1b00
    4664:	00000002 	.word	0x00000002
    4668:	00001d4c 	.word	0x00001d4c
    466c:	001f0003 	.word	0x001f0003
    4670:	00000000 	.word	0x00000000
    4674:	66c5e70e 	.word	0x66c5e70e
    4678:	ac3c1867 	.word	0xac3c1867
    467c:	81ccd2b3 	.word	0x81ccd2b3
    4680:	c0f1dca3 	.word	0xc0f1dca3
    4684:	220236c0 	.word	0x220236c0

00004688 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4688:	4a05      	ldr	r2, [pc, #20]	; (46a0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    468a:	b510      	push	{r4, lr}
    468c:	6852      	ldr	r2, [r2, #4]
    468e:	b112      	cbz	r2, 4696 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4694:	4710      	bx	r2
    4696:	2183      	movs	r1, #131	; 0x83
    4698:	2004      	movs	r0, #4
    469a:	f7ff ff67 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    469e:	0000      	.short	0x0000
    46a0:	20000e18 	.word	0x20000e18

000046a4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    46a4:	4a05      	ldr	r2, [pc, #20]	; (46bc <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    46a6:	b510      	push	{r4, lr}
    46a8:	6812      	ldr	r2, [r2, #0]
    46aa:	b112      	cbz	r2, 46b2 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    46ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46b0:	4710      	bx	r2
    46b2:	217d      	movs	r1, #125	; 0x7d
    46b4:	2004      	movs	r0, #4
    46b6:	f7ff ff59 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46ba:	0000      	.short	0x0000
    46bc:	20000e18 	.word	0x20000e18

000046c0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    46c0:	4a05      	ldr	r2, [pc, #20]	; (46d8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    46c2:	b510      	push	{r4, lr}
    46c4:	6892      	ldr	r2, [r2, #8]
    46c6:	b112      	cbz	r2, 46ce <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    46c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46cc:	4710      	bx	r2
    46ce:	2189      	movs	r1, #137	; 0x89
    46d0:	2004      	movs	r0, #4
    46d2:	f7ff ff4b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46d6:	0000      	.short	0x0000
    46d8:	20000e18 	.word	0x20000e18

000046dc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    46dc:	4805      	ldr	r0, [pc, #20]	; (46f4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    46de:	6801      	ldr	r1, [r0, #0]
    46e0:	b129      	cbz	r1, 46ee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46e2:	6841      	ldr	r1, [r0, #4]
    46e4:	b119      	cbz	r1, 46ee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46e6:	6880      	ldr	r0, [r0, #8]
    46e8:	b108      	cbz	r0, 46ee <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    46ea:	2001      	movs	r0, #1
    46ec:	4770      	bx	lr
    46ee:	2000      	movs	r0, #0
    46f0:	4770      	bx	lr
    46f2:	0000      	.short	0x0000
    46f4:	20000e18 	.word	0x20000e18

000046f8 <sdc_rand_source_register>:
    46f8:	4902      	ldr	r1, [pc, #8]	; (4704 <sdc_rand_source_register+0xc>)
    46fa:	c80d      	ldmia	r0, {r0, r2, r3}
    46fc:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4700:	2000      	movs	r0, #0
    4702:	4770      	bx	lr
    4704:	20000e18 	.word	0x20000e18

00004708 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    470a:	4c12      	ldr	r4, [pc, #72]	; (4754 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    470c:	2600      	movs	r6, #0
    470e:	6825      	ldr	r5, [r4, #0]
    4710:	e011      	b.n	4736 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4712:	9800      	ldr	r0, [sp, #0]
    4714:	2802      	cmp	r0, #2
    4716:	d002      	beq.n	471e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4718:	2803      	cmp	r0, #3
    471a:	d10c      	bne.n	4736 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    471c:	e006      	b.n	472c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    471e:	6820      	ldr	r0, [r4, #0]
    4720:	b110      	cbz	r0, 4728 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4722:	2000      	movs	r0, #0
    4724:	6026      	str	r6, [r4, #0]
    4726:	e005      	b.n	4734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4728:	2128      	movs	r1, #40	; 0x28
    472a:	e00c      	b.n	4746 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    472c:	6820      	ldr	r0, [r4, #0]
    472e:	b168      	cbz	r0, 474c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4730:	2001      	movs	r0, #1
    4732:	6026      	str	r6, [r4, #0]
    4734:	47a8      	blx	r5
    4736:	4668      	mov	r0, sp
    4738:	f000 fc94 	bl	5064 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    473c:	2800      	cmp	r0, #0
    473e:	d0e8      	beq.n	4712 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4740:	2805      	cmp	r0, #5
    4742:	d005      	beq.n	4750 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4744:	2135      	movs	r1, #53	; 0x35
    4746:	2004      	movs	r0, #4
    4748:	f7ff ff10 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    474c:	212d      	movs	r1, #45	; 0x2d
    474e:	e7fa      	b.n	4746 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4752:	0000      	.short	0x0000
    4754:	20000060 	.word	0x20000060
    4758:	b570      	push	{r4, r5, r6, lr}
    475a:	4c14      	ldr	r4, [pc, #80]	; (47ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    475c:	4605      	mov	r5, r0
    475e:	7820      	ldrb	r0, [r4, #0]
    4760:	b140      	cbz	r0, 4774 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4762:	78a2      	ldrb	r2, [r4, #2]
    4764:	1c61      	adds	r1, r4, #1
    4766:	4628      	mov	r0, r5
    4768:	1c92      	adds	r2, r2, #2
    476a:	f008 fb0f 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    476e:	2000      	movs	r0, #0
    4770:	7020      	strb	r0, [r4, #0]
    4772:	e013      	b.n	479c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4774:	480e      	ldr	r0, [pc, #56]	; (47b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4776:	f001 ffc9 	bl	670c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    477a:	2800      	cmp	r0, #0
    477c:	d00f      	beq.n	479e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    477e:	480c      	ldr	r0, [pc, #48]	; (47b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4780:	7800      	ldrb	r0, [r0, #0]
    4782:	2814      	cmp	r0, #20
    4784:	d104      	bne.n	4790 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4786:	210a      	movs	r1, #10
    4788:	203e      	movs	r0, #62	; 0x3e
    478a:	f008 fc50 	bl	d02e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    478e:	b138      	cbz	r0, 47a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    4790:	4907      	ldr	r1, [pc, #28]	; (47b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4792:	4628      	mov	r0, r5
    4794:	f008 fca9 	bl	d0ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4798:	2800      	cmp	r0, #0
    479a:	d000      	beq.n	479e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    479c:	2001      	movs	r0, #1
    479e:	bd70      	pop	{r4, r5, r6, pc}
    47a0:	4903      	ldr	r1, [pc, #12]	; (47b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    47a2:	4628      	mov	r0, r5
    47a4:	f008 fede 	bl	d564 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    47a8:	e7f8      	b.n	479c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    47aa:	0000      	.short	0x0000
    47ac:	20000f2c 	.word	0x20000f2c
    47b0:	20000e24 	.word	0x20000e24
    47b4:	b570      	push	{r4, r5, r6, lr}
    47b6:	780a      	ldrb	r2, [r1, #0]
    47b8:	7082      	strb	r2, [r0, #2]
    47ba:	b33a      	cbz	r2, 480c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    47bc:	2a01      	cmp	r2, #1
    47be:	d825      	bhi.n	480c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    47c0:	2313      	movs	r3, #19
    47c2:	7003      	strb	r3, [r0, #0]
    47c4:	2300      	movs	r3, #0
    47c6:	e00a      	b.n	47de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    47c8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    47cc:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    47d0:	78a6      	ldrb	r6, [r4, #2]
    47d2:	70ee      	strb	r6, [r5, #3]
    47d4:	8864      	ldrh	r4, [r4, #2]
    47d6:	0a24      	lsrs	r4, r4, #8
    47d8:	1c5b      	adds	r3, r3, #1
    47da:	712c      	strb	r4, [r5, #4]
    47dc:	b2db      	uxtb	r3, r3
    47de:	4293      	cmp	r3, r2
    47e0:	d3f2      	bcc.n	47c8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    47e2:	2300      	movs	r3, #0
    47e4:	e00b      	b.n	47fe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    47e6:	bf00      	nop
    47e8:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    47ec:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    47f0:	792e      	ldrb	r6, [r5, #4]
    47f2:	7166      	strb	r6, [r4, #5]
    47f4:	88ad      	ldrh	r5, [r5, #4]
    47f6:	0a2d      	lsrs	r5, r5, #8
    47f8:	1c5b      	adds	r3, r3, #1
    47fa:	71a5      	strb	r5, [r4, #6]
    47fc:	b2db      	uxtb	r3, r3
    47fe:	4293      	cmp	r3, r2
    4800:	d3f2      	bcc.n	47e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4802:	2101      	movs	r1, #1
    4804:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4808:	b2c0      	uxtb	r0, r0
    480a:	bd70      	pop	{r4, r5, r6, pc}
    480c:	2000      	movs	r0, #0
    480e:	bd70      	pop	{r4, r5, r6, pc}

00004810 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4810:	2101      	movs	r1, #1
    4812:	4a0c      	ldr	r2, [pc, #48]	; (4844 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4814:	2840      	cmp	r0, #64	; 0x40
    4816:	d20c      	bcs.n	4832 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4818:	2820      	cmp	r0, #32
    481a:	d803      	bhi.n	4824 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    481c:	1e40      	subs	r0, r0, #1
    481e:	4081      	lsls	r1, r0
    4820:	6810      	ldr	r0, [r2, #0]
    4822:	e002      	b.n	482a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4824:	3821      	subs	r0, #33	; 0x21
    4826:	4081      	lsls	r1, r0
    4828:	6850      	ldr	r0, [r2, #4]
    482a:	4201      	tst	r1, r0
    482c:	d107      	bne.n	483e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    482e:	2000      	movs	r0, #0
    4830:	4770      	bx	lr
    4832:	28ff      	cmp	r0, #255	; 0xff
    4834:	d003      	beq.n	483e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4836:	3840      	subs	r0, #64	; 0x40
    4838:	4081      	lsls	r1, r0
    483a:	6890      	ldr	r0, [r2, #8]
    483c:	e7f5      	b.n	482a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    483e:	2001      	movs	r0, #1
    4840:	4770      	bx	lr
    4842:	0000      	.short	0x0000
    4844:	20000064 	.word	0x20000064

00004848 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4848:	2101      	movs	r1, #1
    484a:	1e40      	subs	r0, r0, #1
    484c:	4081      	lsls	r1, r0
    484e:	4804      	ldr	r0, [pc, #16]	; (4860 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4850:	68c0      	ldr	r0, [r0, #12]
    4852:	4201      	tst	r1, r0
    4854:	d001      	beq.n	485a <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4856:	2001      	movs	r0, #1
    4858:	4770      	bx	lr
    485a:	2000      	movs	r0, #0
    485c:	4770      	bx	lr
    485e:	0000      	.short	0x0000
    4860:	20000064 	.word	0x20000064

00004864 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4864:	4901      	ldr	r1, [pc, #4]	; (486c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4866:	6800      	ldr	r0, [r0, #0]
    4868:	60c8      	str	r0, [r1, #12]
    486a:	4770      	bx	lr
    486c:	20000064 	.word	0x20000064

00004870 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4870:	4904      	ldr	r1, [pc, #16]	; (4884 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4872:	6802      	ldr	r2, [r0, #0]
    4874:	6840      	ldr	r0, [r0, #4]
    4876:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    487a:	600a      	str	r2, [r1, #0]
    487c:	4a02      	ldr	r2, [pc, #8]	; (4888 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    487e:	4310      	orrs	r0, r2
    4880:	6048      	str	r0, [r1, #4]
    4882:	4770      	bx	lr
    4884:	20000064 	.word	0x20000064
    4888:	024007f8 	.word	0x024007f8

0000488c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    488c:	4901      	ldr	r1, [pc, #4]	; (4894 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    488e:	6800      	ldr	r0, [r0, #0]
    4890:	6088      	str	r0, [r1, #8]
    4892:	4770      	bx	lr
    4894:	20000064 	.word	0x20000064

00004898 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4898:	4805      	ldr	r0, [pc, #20]	; (48b0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    489a:	f04f 31ff 	mov.w	r1, #4294967295
    489e:	6001      	str	r1, [r0, #0]
    48a0:	0cc9      	lsrs	r1, r1, #19
    48a2:	6041      	str	r1, [r0, #4]
    48a4:	2100      	movs	r1, #0
    48a6:	6081      	str	r1, [r0, #8]
    48a8:	211f      	movs	r1, #31
    48aa:	60c1      	str	r1, [r0, #12]
    48ac:	4770      	bx	lr
    48ae:	0000      	.short	0x0000
    48b0:	20000064 	.word	0x20000064

000048b4 <sdc_hci_cmd_cb_reset>:
    48b4:	b510      	push	{r4, lr}
    48b6:	f7ff ffef 	bl	4898 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    48ba:	f00b f88a 	bl	f9d2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    48be:	4604      	mov	r4, r0
    48c0:	4802      	ldr	r0, [pc, #8]	; (48cc <sdc_hci_cmd_cb_reset+0x18>)
    48c2:	6800      	ldr	r0, [r0, #0]
    48c4:	b100      	cbz	r0, 48c8 <sdc_hci_cmd_cb_reset+0x14>
    48c6:	4780      	blx	r0
    48c8:	4620      	mov	r0, r4
    48ca:	bd10      	pop	{r4, pc}
    48cc:	20000074 	.word	0x20000074

000048d0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    48d0:	4901      	ldr	r1, [pc, #4]	; (48d8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    48d2:	6008      	str	r0, [r1, #0]
    48d4:	4770      	bx	lr
    48d6:	0000      	.short	0x0000
    48d8:	20000074 	.word	0x20000074

000048dc <sdc_hci_cmd_vs_zephyr_read_version_info>:
    48dc:	2102      	movs	r1, #2
    48de:	8001      	strh	r1, [r0, #0]
    48e0:	8041      	strh	r1, [r0, #2]
    48e2:	2100      	movs	r1, #0
    48e4:	7101      	strb	r1, [r0, #4]
    48e6:	210e      	movs	r1, #14
    48e8:	7141      	strb	r1, [r0, #5]
    48ea:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    48ee:	80c1      	strh	r1, [r0, #6]
    48f0:	4901      	ldr	r1, [pc, #4]	; (48f8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    48f2:	6081      	str	r1, [r0, #8]
    48f4:	2000      	movs	r0, #0
    48f6:	4770      	bx	lr
    48f8:	3c186766 	.word	0x3c186766

000048fc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    48fc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    48fe:	4604      	mov	r4, r0
    4900:	4669      	mov	r1, sp
    4902:	f009 faed 	bl	dee0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4906:	b170      	cbz	r0, 4926 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4908:	f240 215a 	movw	r1, #602	; 0x25a
    490c:	e008      	b.n	4920 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    490e:	bf00      	nop
    4910:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4914:	4621      	mov	r1, r4
    4916:	f000 f8a7 	bl	4a68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    491a:	b120      	cbz	r0, 4926 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    491c:	f240 215f 	movw	r1, #607	; 0x25f
    4920:	2017      	movs	r0, #23
    4922:	f7ff fe23 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4926:	4668      	mov	r0, sp
    4928:	f000 f850 	bl	49cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    492c:	2800      	cmp	r0, #0
    492e:	d0ef      	beq.n	4910 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4930:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004934 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4934:	b510      	push	{r4, lr}
    4936:	b120      	cbz	r0, 4942 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    4938:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    493c:	2017      	movs	r0, #23
    493e:	f7ff fe15 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4942:	4801      	ldr	r0, [pc, #4]	; (4948 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    4944:	7800      	ldrb	r0, [r0, #0]
    4946:	bd10      	pop	{r4, pc}
    4948:	20001030 	.word	0x20001030

0000494c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    494e:	4605      	mov	r5, r0
    4950:	7808      	ldrb	r0, [r1, #0]
    4952:	784a      	ldrb	r2, [r1, #1]
    4954:	4290      	cmp	r0, r2
    4956:	d902      	bls.n	495e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    4958:	f240 1163 	movw	r1, #355	; 0x163
    495c:	e00a      	b.n	4974 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    495e:	9500      	str	r5, [sp, #0]
    4960:	b15d      	cbz	r5, 497a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    4962:	2600      	movs	r6, #0
    4964:	1ce8      	adds	r0, r5, #3
    4966:	784c      	ldrb	r4, [r1, #1]
    4968:	f020 0003 	bic.w	r0, r0, #3
    496c:	42a8      	cmp	r0, r5
    496e:	d006      	beq.n	497e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    4970:	f240 1179 	movw	r1, #377	; 0x179
    4974:	2017      	movs	r0, #23
    4976:	f7ff fdf9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    497a:	2601      	movs	r6, #1
    497c:	e7f2      	b.n	4964 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    497e:	4f12      	ldr	r7, [pc, #72]	; (49c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4980:	4631      	mov	r1, r6
    4982:	4668      	mov	r0, sp
    4984:	703c      	strb	r4, [r7, #0]
    4986:	f000 f8e1 	bl	4b4c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    498a:	2000      	movs	r0, #0
    498c:	4603      	mov	r3, r0
    498e:	9900      	ldr	r1, [sp, #0]
    4990:	1cc9      	adds	r1, r1, #3
    4992:	f021 0103 	bic.w	r1, r1, #3
    4996:	9100      	str	r1, [sp, #0]
    4998:	b966      	cbnz	r6, 49b4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    499a:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    499e:	6091      	str	r1, [r2, #8]
    49a0:	2100      	movs	r1, #0
    49a2:	e005      	b.n	49b0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    49a4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    49a8:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    49ac:	1c49      	adds	r1, r1, #1
    49ae:	b2c9      	uxtb	r1, r1
    49b0:	42a1      	cmp	r1, r4
    49b2:	d3f7      	bcc.n	49a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    49b4:	9900      	ldr	r1, [sp, #0]
    49b6:	1c40      	adds	r0, r0, #1
    49b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    49bc:	9100      	str	r1, [sp, #0]
    49be:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    49c2:	d0e4      	beq.n	498e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    49c4:	1b48      	subs	r0, r1, r5
    49c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49c8:	20001030 	.word	0x20001030

000049cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    49cc:	b570      	push	{r4, r5, r6, lr}
    49ce:	4604      	mov	r4, r0
    49d0:	f009 fae0 	bl	df94 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    49d4:	b108      	cbz	r0, 49da <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    49d6:	2010      	movs	r0, #16
    49d8:	bd70      	pop	{r4, r5, r6, pc}
    49da:	7825      	ldrb	r5, [r4, #0]
    49dc:	f000 f8f2 	bl	4bc4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    49e0:	4602      	mov	r2, r0
    49e2:	480c      	ldr	r0, [pc, #48]	; (4a14 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    49e4:	8861      	ldrh	r1, [r4, #2]
    49e6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    49ea:	e00e      	b.n	4a0a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    49ec:	6883      	ldr	r3, [r0, #8]
    49ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    49f2:	b143      	cbz	r3, 4a06 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    49f4:	1c4a      	adds	r2, r1, #1
    49f6:	8062      	strh	r2, [r4, #2]
    49f8:	80a1      	strh	r1, [r4, #4]
    49fa:	6880      	ldr	r0, [r0, #8]
    49fc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4a00:	60a0      	str	r0, [r4, #8]
    4a02:	2000      	movs	r0, #0
    4a04:	bd70      	pop	{r4, r5, r6, pc}
    4a06:	1c49      	adds	r1, r1, #1
    4a08:	b289      	uxth	r1, r1
    4a0a:	4291      	cmp	r1, r2
    4a0c:	d3ee      	bcc.n	49ec <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4a0e:	8061      	strh	r1, [r4, #2]
    4a10:	2005      	movs	r0, #5
    4a12:	bd70      	pop	{r4, r5, r6, pc}
    4a14:	20001030 	.word	0x20001030

00004a18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a1c:	b949      	cbnz	r1, 4a32 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4a1e:	4c11      	ldr	r4, [pc, #68]	; (4a64 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4a20:	2700      	movs	r7, #0
    4a22:	463b      	mov	r3, r7
    4a24:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4a28:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4a2c:	f814 c001 	ldrb.w	ip, [r4, r1]
    4a30:	e00d      	b.n	4a4e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4a32:	2000      	movs	r0, #0
    4a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a38:	19dc      	adds	r4, r3, r7
    4a3a:	f8d5 e008 	ldr.w	lr, [r5, #8]
    4a3e:	b2a4      	uxth	r4, r4
    4a40:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4a44:	f1be 0f00 	cmp.w	lr, #0
    4a48:	d004      	beq.n	4a54 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4a4a:	1c5b      	adds	r3, r3, #1
    4a4c:	b29b      	uxth	r3, r3
    4a4e:	459c      	cmp	ip, r3
    4a50:	d8f2      	bhi.n	4a38 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4a52:	4634      	mov	r4, r6
    4a54:	8004      	strh	r4, [r0, #0]
    4a56:	4620      	mov	r0, r4
    4a58:	42b4      	cmp	r4, r6
    4a5a:	d0ea      	beq.n	4a32 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4a60:	f000 b82c 	b.w	4abc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    4a64:	20001030 	.word	0x20001030

00004a68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4a68:	b570      	push	{r4, r5, r6, lr}
    4a6a:	4606      	mov	r6, r0
    4a6c:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4a70:	f243 0502 	movw	r5, #12290	; 0x3002
    4a74:	38ff      	subs	r0, #255	; 0xff
    4a76:	d01a      	beq.n	4aae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4a78:	b109      	cbz	r1, 4a7e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    4a7a:	2007      	movs	r0, #7
    4a7c:	bd70      	pop	{r4, r5, r6, pc}
    4a7e:	4630      	mov	r0, r6
    4a80:	f000 f854 	bl	4b2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    4a84:	0004      	movs	r4, r0
    4a86:	d012      	beq.n	4aae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4a88:	480a      	ldr	r0, [pc, #40]	; (4ab4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    4a8a:	4621      	mov	r1, r4
    4a8c:	6802      	ldr	r2, [r0, #0]
    4a8e:	4630      	mov	r0, r6
    4a90:	4790      	blx	r2
    4a92:	4d09      	ldr	r5, [pc, #36]	; (4ab8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    4a94:	2000      	movs	r0, #0
    4a96:	68a9      	ldr	r1, [r5, #8]
    4a98:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    4a9c:	f000 f888 	bl	4bb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4aa0:	4602      	mov	r2, r0
    4aa2:	4621      	mov	r1, r4
    4aa4:	6868      	ldr	r0, [r5, #4]
    4aa6:	f009 fa05 	bl	deb4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4aaa:	2000      	movs	r0, #0
    4aac:	bd70      	pop	{r4, r5, r6, pc}
    4aae:	4628      	mov	r0, r5
    4ab0:	bd70      	pop	{r4, r5, r6, pc}
    4ab2:	0000      	.short	0x0000
    4ab4:	00004bd8 	.word	0x00004bd8
    4ab8:	20001030 	.word	0x20001030
    4abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ac0:	4690      	mov	r8, r2
    4ac2:	460e      	mov	r6, r1
    4ac4:	4607      	mov	r7, r0
    4ac6:	f009 fa1b 	bl	df00 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4aca:	b148      	cbz	r0, 4ae0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    4acc:	4815      	ldr	r0, [pc, #84]	; (4b24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    4ace:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    4ad2:	68a8      	ldr	r0, [r5, #8]
    4ad4:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4ad8:	b128      	cbz	r0, 4ae6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    4ada:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4ade:	e014      	b.n	4b0a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4ae0:	f240 1139 	movw	r1, #313	; 0x139
    4ae4:	e011      	b.n	4b0a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4ae6:	6868      	ldr	r0, [r5, #4]
    4ae8:	2800      	cmp	r0, #0
    4aea:	d018      	beq.n	4b1e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    4aec:	4630      	mov	r0, r6
    4aee:	f000 f85f 	bl	4bb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4af2:	4601      	mov	r1, r0
    4af4:	6868      	ldr	r0, [r5, #4]
    4af6:	f009 f98f 	bl	de18 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4afa:	0004      	movs	r4, r0
    4afc:	d00e      	beq.n	4b1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4afe:	68a8      	ldr	r0, [r5, #8]
    4b00:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4b04:	b126      	cbz	r6, 4b10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    4b06:	f240 1145 	movw	r1, #325	; 0x145
    4b0a:	2017      	movs	r0, #23
    4b0c:	f7ff fd2e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b10:	4805      	ldr	r0, [pc, #20]	; (4b28 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    4b12:	4642      	mov	r2, r8
    4b14:	4621      	mov	r1, r4
    4b16:	6803      	ldr	r3, [r0, #0]
    4b18:	4638      	mov	r0, r7
    4b1a:	4798      	blx	r3
    4b1c:	4620      	mov	r0, r4
    4b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b22:	0000      	.short	0x0000
    4b24:	20001030 	.word	0x20001030
    4b28:	00004bd4 	.word	0x00004bd4
    4b2c:	b570      	push	{r4, r5, r6, lr}
    4b2e:	460c      	mov	r4, r1
    4b30:	4605      	mov	r5, r0
    4b32:	f009 f9e5 	bl	df00 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4b36:	2800      	cmp	r0, #0
    4b38:	d005      	beq.n	4b46 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    4b3a:	4803      	ldr	r0, [pc, #12]	; (4b48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    4b3c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4b40:	6880      	ldr	r0, [r0, #8]
    4b42:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4b46:	bd70      	pop	{r4, r5, r6, pc}
    4b48:	20001030 	.word	0x20001030
    4b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b50:	4e16      	ldr	r6, [pc, #88]	; (4bac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    4b52:	4688      	mov	r8, r1
    4b54:	4605      	mov	r5, r0
    4b56:	2400      	movs	r4, #0
    4b58:	6828      	ldr	r0, [r5, #0]
    4b5a:	1cc0      	adds	r0, r0, #3
    4b5c:	f020 0003 	bic.w	r0, r0, #3
    4b60:	6028      	str	r0, [r5, #0]
    4b62:	4620      	mov	r0, r4
    4b64:	f000 f824 	bl	4bb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4b68:	5d31      	ldrb	r1, [r6, r4]
    4b6a:	4348      	muls	r0, r1
    4b6c:	f1b8 0f00 	cmp.w	r8, #0
    4b70:	d001      	beq.n	4b76 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    4b72:	2200      	movs	r2, #0
    4b74:	e000      	b.n	4b78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    4b76:	682a      	ldr	r2, [r5, #0]
    4b78:	4601      	mov	r1, r0
    4b7a:	9200      	str	r2, [sp, #0]
    4b7c:	b132      	cbz	r2, 4b8c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    4b7e:	2700      	movs	r7, #0
    4b80:	ea4f 000d 	mov.w	r0, sp
    4b84:	f009 f975 	bl	de72 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b88:	b11f      	cbz	r7, 4b92 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4b8a:	e006      	b.n	4b9a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    4b8c:	2701      	movs	r7, #1
    4b8e:	2000      	movs	r0, #0
    4b90:	e7f8      	b.n	4b84 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    4b92:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4b96:	9a00      	ldr	r2, [sp, #0]
    4b98:	604a      	str	r2, [r1, #4]
    4b9a:	6829      	ldr	r1, [r5, #0]
    4b9c:	1c64      	adds	r4, r4, #1
    4b9e:	4408      	add	r0, r1
    4ba0:	6028      	str	r0, [r5, #0]
    4ba2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    4ba6:	d0d7      	beq.n	4b58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    4ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bac:	20001030 	.word	0x20001030
    4bb0:	4903      	ldr	r1, [pc, #12]	; (4bc0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4bb2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4bb6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4bba:	1cc0      	adds	r0, r0, #3
    4bbc:	4008      	ands	r0, r1
    4bbe:	4770      	bx	lr
    4bc0:	00004bd0 	.word	0x00004bd0
    4bc4:	4801      	ldr	r0, [pc, #4]	; (4bcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    4bc6:	7800      	ldrb	r0, [r0, #0]
    4bc8:	4770      	bx	lr
    4bca:	0000      	.short	0x0000
    4bcc:	20001030 	.word	0x20001030
    4bd0:	000001e0 	.word	0x000001e0
    4bd4:	0000df15 	.word	0x0000df15
    4bd8:	0000f0ad 	.word	0x0000f0ad

00004bdc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4bdc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4be0:	4c26      	ldr	r4, [pc, #152]	; (4c7c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4be2:	4680      	mov	r8, r0
    4be4:	b081      	sub	sp, #4
    4be6:	6820      	ldr	r0, [r4, #0]
    4be8:	469a      	mov	sl, r3
    4bea:	4693      	mov	fp, r2
    4bec:	b158      	cbz	r0, 4c06 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4bee:	7a02      	ldrb	r2, [r0, #8]
    4bf0:	4542      	cmp	r2, r8
    4bf2:	d903      	bls.n	4bfc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4bf4:	6841      	ldr	r1, [r0, #4]
    4bf6:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4bfa:	b140      	cbz	r0, 4c0e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4bfc:	f243 0002 	movw	r0, #12290	; 0x3002
    4c00:	b005      	add	sp, #20
    4c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c06:	21a5      	movs	r1, #165	; 0xa5
    4c08:	2018      	movs	r0, #24
    4c0a:	f7ff fcaf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c0e:	4619      	mov	r1, r3
    4c10:	9802      	ldr	r0, [sp, #8]
    4c12:	f009 f997 	bl	df44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    4c16:	b286      	uxth	r6, r0
    4c18:	4658      	mov	r0, fp
    4c1a:	990e      	ldr	r1, [sp, #56]	; 0x38
    4c1c:	f009 f989 	bl	df32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4c20:	b285      	uxth	r5, r0
    4c22:	1970      	adds	r0, r6, r5
    4c24:	1d00      	adds	r0, r0, #4
    4c26:	b287      	uxth	r7, r0
    4c28:	6820      	ldr	r0, [r4, #0]
    4c2a:	46a1      	mov	r9, r4
    4c2c:	4639      	mov	r1, r7
    4c2e:	6800      	ldr	r0, [r0, #0]
    4c30:	f009 f8f2 	bl	de18 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4c34:	0004      	movs	r4, r0
    4c36:	d01f      	beq.n	4c78 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4c38:	8067      	strh	r7, [r4, #2]
    4c3a:	8025      	strh	r5, [r4, #0]
    4c3c:	4629      	mov	r1, r5
    4c3e:	1d20      	adds	r0, r4, #4
    4c40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4c42:	4607      	mov	r7, r0
    4c44:	465a      	mov	r2, fp
    4c46:	2301      	movs	r3, #1
    4c48:	9500      	str	r5, [sp, #0]
    4c4a:	f009 f845 	bl	dcd8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c4e:	8820      	ldrh	r0, [r4, #0]
    4c50:	4631      	mov	r1, r6
    4c52:	4438      	add	r0, r7
    4c54:	2301      	movs	r3, #1
    4c56:	9a02      	ldr	r2, [sp, #8]
    4c58:	f8cd a000 	str.w	sl, [sp]
    4c5c:	f009 f83c 	bl	dcd8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4c60:	8820      	ldrh	r0, [r4, #0]
    4c62:	19c1      	adds	r1, r0, r7
    4c64:	4638      	mov	r0, r7
    4c66:	f009 f868 	bl	dd3a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4c6a:	f8d9 0000 	ldr.w	r0, [r9]
    4c6e:	6841      	ldr	r1, [r0, #4]
    4c70:	2000      	movs	r0, #0
    4c72:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4c76:	e7c3      	b.n	4c00 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c78:	2004      	movs	r0, #4
    4c7a:	e7c1      	b.n	4c00 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4c7c:	20000078 	.word	0x20000078

00004c80 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4c80:	b570      	push	{r4, r5, r6, lr}
    4c82:	4c14      	ldr	r4, [pc, #80]	; (4cd4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4c84:	6823      	ldr	r3, [r4, #0]
    4c86:	b18b      	cbz	r3, 4cac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4c88:	7a19      	ldrb	r1, [r3, #8]
    4c8a:	4281      	cmp	r1, r0
    4c8c:	d912      	bls.n	4cb4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c8e:	685a      	ldr	r2, [r3, #4]
    4c90:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4c94:	b171      	cbz	r1, 4cb4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4c96:	2500      	movs	r5, #0
    4c98:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4c9c:	884a      	ldrh	r2, [r1, #2]
    4c9e:	6818      	ldr	r0, [r3, #0]
    4ca0:	f009 f908 	bl	deb4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4ca4:	6821      	ldr	r1, [r4, #0]
    4ca6:	2000      	movs	r0, #0
    4ca8:	7a0a      	ldrb	r2, [r1, #8]
    4caa:	e00c      	b.n	4cc6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4cac:	21c8      	movs	r1, #200	; 0xc8
    4cae:	2018      	movs	r0, #24
    4cb0:	f7ff fc5c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cb4:	f243 0002 	movw	r0, #12290	; 0x3002
    4cb8:	bd70      	pop	{r4, r5, r6, pc}
    4cba:	684b      	ldr	r3, [r1, #4]
    4cbc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4cc0:	b933      	cbnz	r3, 4cd0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4cc2:	1c40      	adds	r0, r0, #1
    4cc4:	b2c0      	uxtb	r0, r0
    4cc6:	4282      	cmp	r2, r0
    4cc8:	d8f7      	bhi.n	4cba <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4cca:	6808      	ldr	r0, [r1, #0]
    4ccc:	f009 f8e7 	bl	de9e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4cd0:	2000      	movs	r0, #0
    4cd2:	bd70      	pop	{r4, r5, r6, pc}
    4cd4:	20000078 	.word	0x20000078

00004cd8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cdc:	460d      	mov	r5, r1
    4cde:	0004      	movs	r4, r0
    4ce0:	4690      	mov	r8, r2
    4ce2:	f04f 0600 	mov.w	r6, #0
    4ce6:	d009      	beq.n	4cfc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4ce8:	2700      	movs	r7, #0
    4cea:	1ce0      	adds	r0, r4, #3
    4cec:	f020 0003 	bic.w	r0, r0, #3
    4cf0:	42a0      	cmp	r0, r4
    4cf2:	d005      	beq.n	4d00 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4cf4:	2186      	movs	r1, #134	; 0x86
    4cf6:	2018      	movs	r0, #24
    4cf8:	f7ff fc38 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cfc:	2701      	movs	r7, #1
    4cfe:	e7f4      	b.n	4cea <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4d00:	b1cd      	cbz	r5, 4d36 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4d02:	4611      	mov	r1, r2
    4d04:	2000      	movs	r0, #0
    4d06:	f009 f8b4 	bl	de72 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d0a:	300c      	adds	r0, #12
    4d0c:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4d10:	b98f      	cbnz	r7, 4d36 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4d12:	4f0a      	ldr	r7, [pc, #40]	; (4d3c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4d14:	f104 000c 	add.w	r0, r4, #12
    4d18:	00aa      	lsls	r2, r5, #2
    4d1a:	603c      	str	r4, [r7, #0]
    4d1c:	7225      	strb	r5, [r4, #8]
    4d1e:	6060      	str	r0, [r4, #4]
    4d20:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4d24:	6020      	str	r0, [r4, #0]
    4d26:	2100      	movs	r1, #0
    4d28:	6860      	ldr	r0, [r4, #4]
    4d2a:	f008 f8a9 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4d2e:	4641      	mov	r1, r8
    4d30:	6838      	ldr	r0, [r7, #0]
    4d32:	f009 f89e 	bl	de72 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4d36:	4630      	mov	r0, r6
    4d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d3c:	20000078 	.word	0x20000078

00004d40 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4d40:	b570      	push	{r4, r5, r6, lr}
    4d42:	4d08      	ldr	r5, [pc, #32]	; (4d64 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4d44:	6828      	ldr	r0, [r5, #0]
    4d46:	2800      	cmp	r0, #0
    4d48:	d00a      	beq.n	4d60 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4d4a:	2400      	movs	r4, #0
    4d4c:	e004      	b.n	4d58 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4d4e:	4620      	mov	r0, r4
    4d50:	f7ff ff96 	bl	4c80 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4d54:	1c64      	adds	r4, r4, #1
    4d56:	b2e4      	uxtb	r4, r4
    4d58:	6828      	ldr	r0, [r5, #0]
    4d5a:	7a00      	ldrb	r0, [r0, #8]
    4d5c:	42a0      	cmp	r0, r4
    4d5e:	d8f6      	bhi.n	4d4e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4d60:	bd70      	pop	{r4, r5, r6, pc}
    4d62:	0000      	.short	0x0000
    4d64:	20000078 	.word	0x20000078

00004d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4d68:	4909      	ldr	r1, [pc, #36]	; (4d90 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4d6a:	b510      	push	{r4, lr}
    4d6c:	4602      	mov	r2, r0
    4d6e:	6809      	ldr	r1, [r1, #0]
    4d70:	2000      	movs	r0, #0
    4d72:	b149      	cbz	r1, 4d88 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4d74:	7a0b      	ldrb	r3, [r1, #8]
    4d76:	4293      	cmp	r3, r2
    4d78:	d905      	bls.n	4d86 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d7a:	6849      	ldr	r1, [r1, #4]
    4d7c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4d80:	2900      	cmp	r1, #0
    4d82:	d000      	beq.n	4d86 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4d84:	1d08      	adds	r0, r1, #4
    4d86:	bd10      	pop	{r4, pc}
    4d88:	21ee      	movs	r1, #238	; 0xee
    4d8a:	2018      	movs	r0, #24
    4d8c:	f7ff fbee 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d90:	20000078 	.word	0x20000078

00004d94 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4d94:	490a      	ldr	r1, [pc, #40]	; (4dc0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4d96:	b510      	push	{r4, lr}
    4d98:	4602      	mov	r2, r0
    4d9a:	6809      	ldr	r1, [r1, #0]
    4d9c:	2000      	movs	r0, #0
    4d9e:	b159      	cbz	r1, 4db8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4da0:	7a0b      	ldrb	r3, [r1, #8]
    4da2:	4293      	cmp	r3, r2
    4da4:	d907      	bls.n	4db6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4da6:	6849      	ldr	r1, [r1, #4]
    4da8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4dac:	2900      	cmp	r1, #0
    4dae:	d002      	beq.n	4db6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4db0:	f831 0b04 	ldrh.w	r0, [r1], #4
    4db4:	4408      	add	r0, r1
    4db6:	bd10      	pop	{r4, pc}
    4db8:	21fc      	movs	r1, #252	; 0xfc
    4dba:	2018      	movs	r0, #24
    4dbc:	f7ff fbd6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dc0:	20000078 	.word	0x20000078

00004dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    4dc4:	4801      	ldr	r0, [pc, #4]	; (4dcc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    4dc6:	7840      	ldrb	r0, [r0, #1]
    4dc8:	4770      	bx	lr
    4dca:	0000      	.short	0x0000
    4dcc:	2000007c 	.word	0x2000007c

00004dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    4dd0:	4801      	ldr	r0, [pc, #4]	; (4dd8 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    4dd2:	6840      	ldr	r0, [r0, #4]
    4dd4:	4770      	bx	lr
    4dd6:	0000      	.short	0x0000
    4dd8:	2000007c 	.word	0x2000007c

00004ddc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4de0:	460c      	mov	r4, r1
    4de2:	4607      	mov	r7, r0
    4de4:	4616      	mov	r6, r2
    4de6:	211c      	movs	r1, #28
    4de8:	4610      	mov	r0, r2
    4dea:	460d      	mov	r5, r1
    4dec:	4622      	mov	r2, r4
    4dee:	f008 ffce 	bl	dd8e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    4df2:	4680      	mov	r8, r0
    4df4:	b157      	cbz	r7, 4e0c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    4df6:	4638      	mov	r0, r7
    4df8:	4641      	mov	r1, r8
    4dfa:	4632      	mov	r2, r6
    4dfc:	462b      	mov	r3, r5
    4dfe:	9400      	str	r4, [sp, #0]
    4e00:	f008 ff6a 	bl	dcd8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4e04:	4803      	ldr	r0, [pc, #12]	; (4e14 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    4e06:	6047      	str	r7, [r0, #4]
    4e08:	7004      	strb	r4, [r0, #0]
    4e0a:	7046      	strb	r6, [r0, #1]
    4e0c:	4640      	mov	r0, r8
    4e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e12:	0000      	.short	0x0000
    4e14:	2000007c 	.word	0x2000007c

00004e18 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4e18:	4802      	ldr	r0, [pc, #8]	; (4e24 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4e1a:	7842      	ldrb	r2, [r0, #1]
    4e1c:	7801      	ldrb	r1, [r0, #0]
    4e1e:	6840      	ldr	r0, [r0, #4]
    4e20:	f7ff bfdc 	b.w	4ddc <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4e24:	2000007c 	.word	0x2000007c
    4e28:	4909      	ldr	r1, [pc, #36]	; (4e50 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    4e2a:	b510      	push	{r4, lr}
    4e2c:	4807      	ldr	r0, [pc, #28]	; (4e4c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    4e2e:	6008      	str	r0, [r1, #0]
    4e30:	4b08      	ldr	r3, [pc, #32]	; (4e54 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    4e32:	2011      	movs	r0, #17
    4e34:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4e38:	2200      	movs	r2, #0
    4e3a:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4e3e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4e42:	1c40      	adds	r0, r0, #1
    4e44:	b2c0      	uxtb	r0, r0
    4e46:	2814      	cmp	r0, #20
    4e48:	d3f4      	bcc.n	4e34 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    4e4a:	bd10      	pop	{r4, pc}
    4e4c:	fffe0000 	.word	0xfffe0000
    4e50:	4001f508 	.word	0x4001f508
    4e54:	4001f000 	.word	0x4001f000
    4e58:	b570      	push	{r4, r5, r6, lr}
    4e5a:	2420      	movs	r4, #32
    4e5c:	2100      	movs	r1, #0
    4e5e:	2301      	movs	r3, #1
    4e60:	fa20 f201 	lsr.w	r2, r0, r1
    4e64:	07d2      	lsls	r2, r2, #31
    4e66:	d020      	beq.n	4eaa <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4e68:	b24a      	sxtb	r2, r1
    4e6a:	2a00      	cmp	r2, #0
    4e6c:	db10      	blt.n	4e90 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    4e6e:	bf00      	nop
    4e70:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4e74:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4e78:	f002 051f 	and.w	r5, r2, #31
    4e7c:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4e80:	fa03 f505 	lsl.w	r5, r3, r5
    4e84:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4e88:	f3bf 8f4f 	dsb	sy
    4e8c:	f3bf 8f6f 	isb	sy
    4e90:	db0b      	blt.n	4eaa <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4e92:	f002 051f 	and.w	r5, r2, #31
    4e96:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4e9a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4e9e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4ea2:	fa03 f505 	lsl.w	r5, r3, r5
    4ea6:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4eaa:	f101 0101 	add.w	r1, r1, #1
    4eae:	42a1      	cmp	r1, r4
    4eb0:	d3d6      	bcc.n	4e60 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    4eb2:	bd70      	pop	{r4, r5, r6, pc}
    4eb4:	b570      	push	{r4, r5, r6, lr}
    4eb6:	0042      	lsls	r2, r0, #1
    4eb8:	f04f 0100 	mov.w	r1, #0
    4ebc:	d501      	bpl.n	4ec2 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    4ebe:	4a14      	ldr	r2, [pc, #80]	; (4f10 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    4ec0:	6011      	str	r1, [r2, #0]
    4ec2:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4ec6:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4eca:	429a      	cmp	r2, r3
    4ecc:	d003      	beq.n	4ed6 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    4ece:	2169      	movs	r1, #105	; 0x69
    4ed0:	201b      	movs	r0, #27
    4ed2:	f7ff fb4b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ed6:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4eda:	d014      	beq.n	4f06 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    4edc:	4a0d      	ldr	r2, [pc, #52]	; (4f14 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    4ede:	2001      	movs	r0, #1
    4ee0:	6050      	str	r0, [r2, #4]
    4ee2:	1e83      	subs	r3, r0, #2
    4ee4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4ee8:	4a0b      	ldr	r2, [pc, #44]	; (4f18 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    4eea:	6090      	str	r0, [r2, #8]
    4eec:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4ef0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4ef4:	4c09      	ldr	r4, [pc, #36]	; (4f1c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    4ef6:	6021      	str	r1, [r4, #0]
    4ef8:	1d25      	adds	r5, r4, #4
    4efa:	6028      	str	r0, [r5, #0]
    4efc:	6090      	str	r0, [r2, #8]
    4efe:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4f02:	6021      	str	r1, [r4, #0]
    4f04:	6028      	str	r0, [r5, #0]
    4f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f0a:	f7ff bf8d 	b.w	4e28 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4f0e:	0000      	.short	0x0000
    4f10:	4001e504 	.word	0x4001e504
    4f14:	4000e000 	.word	0x4000e000
    4f18:	4000f000 	.word	0x4000f000
    4f1c:	4000f500 	.word	0x4000f500

00004f20 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4f20:	b570      	push	{r4, r5, r6, lr}
    4f22:	4c0a      	ldr	r4, [pc, #40]	; (4f4c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4f24:	460d      	mov	r5, r1
    4f26:	6020      	str	r0, [r4, #0]
    4f28:	f7ff ffc4 	bl	4eb4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    4f2c:	6820      	ldr	r0, [r4, #0]
    4f2e:	f7ff ff93 	bl	4e58 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    4f32:	f000 f883 	bl	503c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4f36:	f7ff ff77 	bl	4e28 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4f3a:	f009 f820 	bl	df7e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4f3e:	4628      	mov	r0, r5
    4f40:	f000 f8b6 	bl	50b0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f48:	f000 b8ce 	b.w	50e8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4f4c:	20000084 	.word	0x20000084

00004f50 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4f50:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f54:	4c36      	ldr	r4, [pc, #216]	; (5030 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    4f56:	b082      	sub	sp, #8
    4f58:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4f5c:	2601      	movs	r6, #1
    4f5e:	4835      	ldr	r0, [pc, #212]	; (5034 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4f60:	f007 fe6b 	bl	cc3a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4f64:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5034 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    4f68:	b920      	cbnz	r0, 4f74 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4f6a:	2600      	movs	r6, #0
    4f6c:	f109 0001 	add.w	r0, r9, #1
    4f70:	f007 fe7a 	bl	cc68 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4f74:	f44f 7580 	mov.w	r5, #256	; 0x100
    4f78:	f04f 0800 	mov.w	r8, #0
    4f7c:	1d2f      	adds	r7, r5, #4
    4f7e:	2101      	movs	r1, #1
    4f80:	6061      	str	r1, [r4, #4]
    4f82:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4f86:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4f8a:	9802      	ldr	r0, [sp, #8]
    4f8c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    4f90:	6021      	str	r1, [r4, #0]
    4f92:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 5038 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    4f96:	e01c      	b.n	4fd2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4f98:	f8da 0000 	ldr.w	r0, [sl]
    4f9c:	06c0      	lsls	r0, r0, #27
    4f9e:	d518      	bpl.n	4fd2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4fa0:	200e      	movs	r0, #14
    4fa2:	f008 ffd8 	bl	df56 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4fa6:	f3ef 8010 	mrs	r0, PRIMASK
    4faa:	9000      	str	r0, [sp, #0]
    4fac:	b672      	cpsid	i
    4fae:	2103      	movs	r1, #3
    4fb0:	4620      	mov	r0, r4
    4fb2:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4fb6:	4629      	mov	r1, r5
    4fb8:	f008 ffda 	bl	df70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4fbc:	b930      	cbnz	r0, 4fcc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4fbe:	4639      	mov	r1, r7
    4fc0:	4620      	mov	r0, r4
    4fc2:	f008 ffd5 	bl	df70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4fc6:	b908      	cbnz	r0, 4fcc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4fc8:	f7ff f916 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4fcc:	9800      	ldr	r0, [sp, #0]
    4fce:	b900      	cbnz	r0, 4fd2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4fd0:	b662      	cpsie	i
    4fd2:	4629      	mov	r1, r5
    4fd4:	4620      	mov	r0, r4
    4fd6:	f008 ffcb 	bl	df70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4fda:	b928      	cbnz	r0, 4fe8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    4fdc:	4639      	mov	r1, r7
    4fde:	4620      	mov	r0, r4
    4fe0:	f008 ffc6 	bl	df70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4fe4:	2800      	cmp	r0, #0
    4fe6:	d0d7      	beq.n	4f98 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    4fe8:	4639      	mov	r1, r7
    4fea:	4620      	mov	r0, r4
    4fec:	f008 ffc0 	bl	df70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4ff0:	2800      	cmp	r0, #0
    4ff2:	d1c4      	bne.n	4f7e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    4ff4:	b136      	cbz	r6, 5004 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    4ff6:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    4ffa:	f109 0001 	add.w	r0, r9, #1
    4ffe:	f007 fe1c 	bl	cc3a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5002:	e012      	b.n	502a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    5004:	f109 0001 	add.w	r0, r9, #1
    5008:	f007 fe17 	bl	cc3a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    500c:	2800      	cmp	r0, #0
    500e:	d1ad      	bne.n	4f6c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    5010:	2003      	movs	r0, #3
    5012:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5016:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    501a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    501e:	200e      	movs	r0, #14
    5020:	f008 ff99 	bl	df56 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    5024:	4803      	ldr	r0, [pc, #12]	; (5034 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    5026:	f007 fe1f 	bl	cc68 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    502a:	2000      	movs	r0, #0
    502c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5030:	4000e000 	.word	0x4000e000
    5034:	20000287 	.word	0x20000287
    5038:	e000ed10 	.word	0xe000ed10

0000503c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    503c:	b510      	push	{r4, lr}
    503e:	4808      	ldr	r0, [pc, #32]	; (5060 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5040:	f007 fe0e 	bl	cc60 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5044:	b108      	cbz	r0, 504a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    5046:	2125      	movs	r1, #37	; 0x25
    5048:	e006      	b.n	5058 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    504a:	4805      	ldr	r0, [pc, #20]	; (5060 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    504c:	1c40      	adds	r0, r0, #1
    504e:	f007 fe07 	bl	cc60 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5052:	2800      	cmp	r0, #0
    5054:	d003      	beq.n	505e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    5056:	2129      	movs	r1, #41	; 0x29
    5058:	201d      	movs	r0, #29
    505a:	f7ff fa87 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    505e:	bd10      	pop	{r4, pc}
    5060:	20000287 	.word	0x20000287

00005064 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    5064:	b570      	push	{r4, r5, r6, lr}
    5066:	4911      	ldr	r1, [pc, #68]	; (50ac <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5068:	680a      	ldr	r2, [r1, #0]
    506a:	b1ea      	cbz	r2, 50a8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    506c:	2300      	movs	r3, #0
    506e:	461d      	mov	r5, r3
    5070:	2401      	movs	r4, #1
    5072:	684a      	ldr	r2, [r1, #4]
    5074:	1c52      	adds	r2, r2, #1
    5076:	604a      	str	r2, [r1, #4]
    5078:	2a0c      	cmp	r2, #12
    507a:	d300      	bcc.n	507e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    507c:	604d      	str	r5, [r1, #4]
    507e:	790e      	ldrb	r6, [r1, #4]
    5080:	fa04 f206 	lsl.w	r2, r4, r6
    5084:	680e      	ldr	r6, [r1, #0]
    5086:	4216      	tst	r6, r2
    5088:	d00b      	beq.n	50a2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    508a:	f3ef 8310 	mrs	r3, PRIMASK
    508e:	b672      	cpsid	i
    5090:	680c      	ldr	r4, [r1, #0]
    5092:	4394      	bics	r4, r2
    5094:	600c      	str	r4, [r1, #0]
    5096:	b903      	cbnz	r3, 509a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5098:	b662      	cpsie	i
    509a:	6849      	ldr	r1, [r1, #4]
    509c:	6001      	str	r1, [r0, #0]
    509e:	2000      	movs	r0, #0
    50a0:	bd70      	pop	{r4, r5, r6, pc}
    50a2:	1c5b      	adds	r3, r3, #1
    50a4:	2b0c      	cmp	r3, #12
    50a6:	d3e4      	bcc.n	5072 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    50a8:	2005      	movs	r0, #5
    50aa:	bd70      	pop	{r4, r5, r6, pc}
    50ac:	20000088 	.word	0x20000088

000050b0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    50b0:	4802      	ldr	r0, [pc, #8]	; (50bc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    50b2:	2100      	movs	r1, #0
    50b4:	6001      	str	r1, [r0, #0]
    50b6:	6041      	str	r1, [r0, #4]
    50b8:	4770      	bx	lr
    50ba:	0000      	.short	0x0000
    50bc:	20000088 	.word	0x20000088

000050c0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    50c0:	b510      	push	{r4, lr}
    50c2:	4c08      	ldr	r4, [pc, #32]	; (50e4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    50c4:	7861      	ldrb	r1, [r4, #1]
    50c6:	b109      	cbz	r1, 50cc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    50c8:	200f      	movs	r0, #15
    50ca:	bd10      	pop	{r4, pc}
    50cc:	f7ff f820 	bl	4110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    50d0:	7020      	strb	r0, [r4, #0]
    50d2:	28ff      	cmp	r0, #255	; 0xff
    50d4:	d001      	beq.n	50da <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    50d6:	2000      	movs	r0, #0
    50d8:	bd10      	pop	{r4, pc}
    50da:	2176      	movs	r1, #118	; 0x76
    50dc:	201f      	movs	r0, #31
    50de:	f7ff fa45 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50e2:	0000      	.short	0x0000
    50e4:	20000090 	.word	0x20000090

000050e8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    50e8:	4901      	ldr	r1, [pc, #4]	; (50f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    50ea:	2000      	movs	r0, #0
    50ec:	7048      	strb	r0, [r1, #1]
    50ee:	4770      	bx	lr
    50f0:	20000090 	.word	0x20000090

000050f4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    50f4:	4806      	ldr	r0, [pc, #24]	; (5110 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    50f6:	4a07      	ldr	r2, [pc, #28]	; (5114 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    50f8:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    50fa:	8852      	ldrh	r2, [r2, #2]
    50fc:	4291      	cmp	r1, r2
    50fe:	d104      	bne.n	510a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5100:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5104:	b108      	cbz	r0, 510a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5106:	2000      	movs	r0, #0
    5108:	4770      	bx	lr
    510a:	2001      	movs	r0, #1
    510c:	4770      	bx	lr
    510e:	0000      	.short	0x0000
    5110:	200011b4 	.word	0x200011b4
    5114:	2000026c 	.word	0x2000026c

00005118 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5118:	4901      	ldr	r1, [pc, #4]	; (5120 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    511a:	8048      	strh	r0, [r1, #2]
    511c:	4770      	bx	lr
    511e:	0000      	.short	0x0000
    5120:	2000026c 	.word	0x2000026c

00005124 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5124:	4808      	ldr	r0, [pc, #32]	; (5148 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    5126:	4a09      	ldr	r2, [pc, #36]	; (514c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5128:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    512a:	8852      	ldrh	r2, [r2, #2]
    512c:	4291      	cmp	r1, r2
    512e:	d109      	bne.n	5144 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5130:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5134:	8481      	strh	r1, [r0, #36]	; 0x24
    5136:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    513a:	b119      	cbz	r1, 5144 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    513c:	2100      	movs	r1, #0
    513e:	7001      	strb	r1, [r0, #0]
    5140:	2001      	movs	r0, #1
    5142:	4770      	bx	lr
    5144:	2000      	movs	r0, #0
    5146:	4770      	bx	lr
    5148:	200011b4 	.word	0x200011b4
    514c:	2000026c 	.word	0x2000026c

00005150 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5150:	4807      	ldr	r0, [pc, #28]	; (5170 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5152:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5156:	2901      	cmp	r1, #1
    5158:	d007      	beq.n	516a <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    515a:	2101      	movs	r1, #1
    515c:	7001      	strb	r1, [r0, #0]
    515e:	4805      	ldr	r0, [pc, #20]	; (5174 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5160:	4903      	ldr	r1, [pc, #12]	; (5170 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5162:	8800      	ldrh	r0, [r0, #0]
    5164:	8488      	strh	r0, [r1, #36]	; 0x24
    5166:	2001      	movs	r0, #1
    5168:	4770      	bx	lr
    516a:	2000      	movs	r0, #0
    516c:	4770      	bx	lr
    516e:	0000      	.short	0x0000
    5170:	200011b4 	.word	0x200011b4
    5174:	2000026c 	.word	0x2000026c

00005178 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5178:	4906      	ldr	r1, [pc, #24]	; (5194 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    517a:	4b07      	ldr	r3, [pc, #28]	; (5198 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    517c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    517e:	885b      	ldrh	r3, [r3, #2]
    5180:	429a      	cmp	r2, r3
    5182:	d105      	bne.n	5190 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5184:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5188:	b112      	cbz	r2, 5190 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    518a:	6001      	str	r1, [r0, #0]
    518c:	2001      	movs	r0, #1
    518e:	4770      	bx	lr
    5190:	2000      	movs	r0, #0
    5192:	4770      	bx	lr
    5194:	200011b4 	.word	0x200011b4
    5198:	2000026c 	.word	0x2000026c

0000519c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    519c:	4909      	ldr	r1, [pc, #36]	; (51c4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    519e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    51a0:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    51a4:	3bff      	subs	r3, #255	; 0xff
    51a6:	d002      	beq.n	51ae <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    51a8:	2100      	movs	r1, #0
    51aa:	6001      	str	r1, [r0, #0]
    51ac:	e007      	b.n	51be <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    51ae:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    51b2:	4904      	ldr	r1, [pc, #16]	; (51c4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    51b4:	2a01      	cmp	r2, #1
    51b6:	d002      	beq.n	51be <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    51b8:	6001      	str	r1, [r0, #0]
    51ba:	2001      	movs	r0, #1
    51bc:	4770      	bx	lr
    51be:	2000      	movs	r0, #0
    51c0:	4770      	bx	lr
    51c2:	0000      	.short	0x0000
    51c4:	200011b4 	.word	0x200011b4

000051c8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    51c8:	4901      	ldr	r1, [pc, #4]	; (51d0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    51ca:	8008      	strh	r0, [r1, #0]
    51cc:	4770      	bx	lr
    51ce:	0000      	.short	0x0000
    51d0:	2000026c 	.word	0x2000026c

000051d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    51d4:	4905      	ldr	r1, [pc, #20]	; (51ec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    51d6:	2000      	movs	r0, #0
    51d8:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    51dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    51e0:	8488      	strh	r0, [r1, #36]	; 0x24
    51e2:	4903      	ldr	r1, [pc, #12]	; (51f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    51e4:	8008      	strh	r0, [r1, #0]
    51e6:	8048      	strh	r0, [r1, #2]
    51e8:	4770      	bx	lr
    51ea:	0000      	.short	0x0000
    51ec:	200011b4 	.word	0x200011b4
    51f0:	2000026c 	.word	0x2000026c
    51f4:	4905      	ldr	r1, [pc, #20]	; (520c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    51f6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    51f8:	4282      	cmp	r2, r0
    51fa:	d105      	bne.n	5208 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    51fc:	2000      	movs	r0, #0
    51fe:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5202:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5206:	8488      	strh	r0, [r1, #36]	; 0x24
    5208:	4770      	bx	lr
    520a:	0000      	.short	0x0000
    520c:	200011b4 	.word	0x200011b4

00005210 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5210:	4a0a      	ldr	r2, [pc, #40]	; (523c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5212:	b110      	cbz	r0, 521a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5214:	2801      	cmp	r0, #1
    5216:	d007      	beq.n	5228 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5218:	e00e      	b.n	5238 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    521a:	7850      	ldrb	r0, [r2, #1]
    521c:	b160      	cbz	r0, 5238 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    521e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5222:	6008      	str	r0, [r1, #0]
    5224:	88d0      	ldrh	r0, [r2, #6]
    5226:	e004      	b.n	5232 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5228:	7810      	ldrb	r0, [r2, #0]
    522a:	b128      	cbz	r0, 5238 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    522c:	6890      	ldr	r0, [r2, #8]
    522e:	6008      	str	r0, [r1, #0]
    5230:	8990      	ldrh	r0, [r2, #12]
    5232:	8088      	strh	r0, [r1, #4]
    5234:	2001      	movs	r0, #1
    5236:	4770      	bx	lr
    5238:	2000      	movs	r0, #0
    523a:	4770      	bx	lr
    523c:	20000289 	.word	0x20000289

00005240 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5240:	4a08      	ldr	r2, [pc, #32]	; (5264 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5242:	2301      	movs	r3, #1
    5244:	b138      	cbz	r0, 5256 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    5246:	2801      	cmp	r0, #1
    5248:	d104      	bne.n	5254 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    524a:	7013      	strb	r3, [r2, #0]
    524c:	6808      	ldr	r0, [r1, #0]
    524e:	6090      	str	r0, [r2, #8]
    5250:	8888      	ldrh	r0, [r1, #4]
    5252:	8190      	strh	r0, [r2, #12]
    5254:	4770      	bx	lr
    5256:	7053      	strb	r3, [r2, #1]
    5258:	6808      	ldr	r0, [r1, #0]
    525a:	f8c2 0002 	str.w	r0, [r2, #2]
    525e:	8888      	ldrh	r0, [r1, #4]
    5260:	80d0      	strh	r0, [r2, #6]
    5262:	4770      	bx	lr
    5264:	20000289 	.word	0x20000289

00005268 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5268:	4906      	ldr	r1, [pc, #24]	; (5284 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    526a:	b110      	cbz	r0, 5272 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    526c:	2801      	cmp	r0, #1
    526e:	d002      	beq.n	5276 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5270:	e005      	b.n	527e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5272:	7848      	ldrb	r0, [r1, #1]
    5274:	e000      	b.n	5278 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5276:	7808      	ldrb	r0, [r1, #0]
    5278:	b108      	cbz	r0, 527e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    527a:	2001      	movs	r0, #1
    527c:	4770      	bx	lr
    527e:	2000      	movs	r0, #0
    5280:	4770      	bx	lr
    5282:	0000      	.short	0x0000
    5284:	20000289 	.word	0x20000289

00005288 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5288:	4901      	ldr	r1, [pc, #4]	; (5290 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    528a:	7448      	strb	r0, [r1, #17]
    528c:	4770      	bx	lr
    528e:	0000      	.short	0x0000
    5290:	20000a12 	.word	0x20000a12

00005294 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5294:	b578      	push	{r3, r4, r5, r6, lr}
    5296:	4913      	ldr	r1, [pc, #76]	; (52e4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5298:	7c4a      	ldrb	r2, [r1, #17]
    529a:	b30a      	cbz	r2, 52e0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    529c:	7c0a      	ldrb	r2, [r1, #16]
    529e:	f88d 2000 	strb.w	r2, [sp]
    52a2:	9a00      	ldr	r2, [sp, #0]
    52a4:	9200      	str	r2, [sp, #0]
    52a6:	f89d 2000 	ldrb.w	r2, [sp]
    52aa:	b1ca      	cbz	r2, 52e0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    52ac:	2300      	movs	r3, #0
    52ae:	f101 0210 	add.w	r2, r1, #16
    52b2:	241f      	movs	r4, #31
    52b4:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    52b8:	7c0e      	ldrb	r6, [r1, #16]
    52ba:	f88d 6000 	strb.w	r6, [sp]
    52be:	9e00      	ldr	r6, [sp, #0]
    52c0:	9600      	str	r6, [sp, #0]
    52c2:	f89d 6000 	ldrb.w	r6, [sp]
    52c6:	b14e      	cbz	r6, 52dc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    52c8:	7013      	strb	r3, [r2, #0]
    52ca:	7043      	strb	r3, [r0, #1]
    52cc:	7004      	strb	r4, [r0, #0]
    52ce:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    52d2:	6046      	str	r6, [r0, #4]
    52d4:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    52d8:	6086      	str	r6, [r0, #8]
    52da:	e7ed      	b.n	52b8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    52dc:	2001      	movs	r0, #1
    52de:	bd78      	pop	{r3, r4, r5, r6, pc}
    52e0:	2000      	movs	r0, #0
    52e2:	bd78      	pop	{r3, r4, r5, r6, pc}
    52e4:	20000a12 	.word	0x20000a12

000052e8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    52e8:	b510      	push	{r4, lr}
    52ea:	4604      	mov	r4, r0
    52ec:	f000 f95c 	bl	55a8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    52f0:	b118      	cbz	r0, 52fa <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    52f2:	21bd      	movs	r1, #189	; 0xbd
    52f4:	2027      	movs	r0, #39	; 0x27
    52f6:	f7ff f939 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52fa:	4803      	ldr	r0, [pc, #12]	; (5308 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    52fc:	2101      	movs	r1, #1
    52fe:	f009 fa30 	bl	e762 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5302:	4802      	ldr	r0, [pc, #8]	; (530c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5304:	62c4      	str	r4, [r0, #44]	; 0x2c
    5306:	bd10      	pop	{r4, pc}
    5308:	200009f0 	.word	0x200009f0
    530c:	200000ac 	.word	0x200000ac

00005310 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5310:	4901      	ldr	r1, [pc, #4]	; (5318 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5312:	2001      	movs	r0, #1
    5314:	7188      	strb	r0, [r1, #6]
    5316:	4770      	bx	lr
    5318:	200000ac 	.word	0x200000ac

0000531c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    531c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5320:	4d66      	ldr	r5, [pc, #408]	; (54bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    5322:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5324:	782e      	ldrb	r6, [r5, #0]
    5326:	bbee      	cbnz	r6, 53a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5328:	b3e2      	cbz	r2, 53a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    532a:	b3db      	cbz	r3, 53a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    532c:	b3d4      	cbz	r4, 53a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    532e:	f105 0614 	add.w	r6, r5, #20
    5332:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5336:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    533a:	2700      	movs	r7, #0
    533c:	71af      	strb	r7, [r5, #6]
    533e:	716f      	strb	r7, [r5, #5]
    5340:	70ef      	strb	r7, [r5, #3]
    5342:	70af      	strb	r7, [r5, #2]
    5344:	712f      	strb	r7, [r5, #4]
    5346:	81af      	strh	r7, [r5, #12]
    5348:	81ef      	strh	r7, [r5, #14]
    534a:	f000 f971 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    534e:	4606      	mov	r6, r0
    5350:	f000 f968 	bl	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5354:	4604      	mov	r4, r0
    5356:	f006 fe91 	bl	c07c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    535a:	f006 fb75 	bl	ba48 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    535e:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    5362:	f006 ff11 	bl	c188 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5366:	f104 0018 	add.w	r0, r4, #24
    536a:	f006 ffeb 	bl	c344 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    536e:	6920      	ldr	r0, [r4, #16]
    5370:	f006 ffde 	bl	c330 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5374:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5378:	f007 f802 	bl	c380 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    537c:	f04f 0b01 	mov.w	fp, #1
    5380:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    5384:	2000      	movs	r0, #0
    5386:	f006 fd3d 	bl	be04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    538a:	2800      	cmp	r0, #0
    538c:	d07e      	beq.n	548c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    538e:	484c      	ldr	r0, [pc, #304]	; (54c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    5390:	f006 fdac 	bl	beec <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5394:	8820      	ldrh	r0, [r4, #0]
    5396:	f7ff fcfd 	bl	4d94 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    539a:	6328      	str	r0, [r5, #48]	; 0x30
    539c:	8820      	ldrh	r0, [r4, #0]
    539e:	f7ff fce3 	bl	4d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    53a2:	e000      	b.n	53a6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    53a4:	e00a      	b.n	53bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    53a6:	6368      	str	r0, [r5, #52]	; 0x34
    53a8:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    53ac:	f88d 0000 	strb.w	r0, [sp]
    53b0:	9800      	ldr	r0, [sp, #0]
    53b2:	9000      	str	r0, [sp, #0]
    53b4:	f89d 0000 	ldrb.w	r0, [sp]
    53b8:	b118      	cbz	r0, 53c2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    53ba:	e012      	b.n	53e2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    53bc:	f44f 718a 	mov.w	r1, #276	; 0x114
    53c0:	e079      	b.n	54b6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
    53c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    53c4:	b168      	cbz	r0, 53e2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    53c6:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    53c8:	88b1      	ldrh	r1, [r6, #4]
    53ca:	4288      	cmp	r0, r1
    53cc:	d109      	bne.n	53e2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    53ce:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    53d2:	2201      	movs	r2, #1
    53d4:	4408      	add	r0, r1
    53d6:	8670      	strh	r0, [r6, #50]	; 0x32
    53d8:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    53dc:	6f21      	ldr	r1, [r4, #112]	; 0x70
    53de:	f7fd fd67 	bl	2eb0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    53e2:	f106 0168 	add.w	r1, r6, #104	; 0x68
    53e6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 54c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    53ea:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    53ee:	f109 0808 	add.w	r8, r9, #8
    53f2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    53f6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    53f8:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    53fc:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    53fe:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5402:	f000 f983 	bl	570c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    5406:	4601      	mov	r1, r0
    5408:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    540a:	46ba      	mov	sl, r7
    540c:	f008 ff94 	bl	e338 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5410:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5412:	4281      	cmp	r1, r0
    5414:	d200      	bcs.n	5418 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    5416:	4608      	mov	r0, r1
    5418:	7228      	strb	r0, [r5, #8]
    541a:	46a8      	mov	r8, r5
    541c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5420:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5422:	7cf7      	ldrb	r7, [r6, #19]
    5424:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5426:	2908      	cmp	r1, #8
    5428:	d100      	bne.n	542c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    542a:	2104      	movs	r1, #4
    542c:	f008 ff84 	bl	e338 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5430:	b90f      	cbnz	r7, 5436 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    5432:	1d00      	adds	r0, r0, #4
    5434:	b280      	uxth	r0, r0
    5436:	4285      	cmp	r5, r0
    5438:	d200      	bcs.n	543c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    543a:	4628      	mov	r0, r5
    543c:	b2c0      	uxtb	r0, r0
    543e:	f888 0009 	strb.w	r0, [r8, #9]
    5442:	7cf2      	ldrb	r2, [r6, #19]
    5444:	b102      	cbz	r2, 5448 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    5446:	2204      	movs	r2, #4
    5448:	4410      	add	r0, r2
    544a:	f888 0007 	strb.w	r0, [r8, #7]
    544e:	7cb1      	ldrb	r1, [r6, #18]
    5450:	b1a1      	cbz	r1, 547c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
    5452:	491c      	ldr	r1, [pc, #112]	; (54c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    5454:	3108      	adds	r1, #8
    5456:	f881 b018 	strb.w	fp, [r1, #24]
    545a:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
    545e:	e9c1 0204 	strd	r0, r2, [r1, #16]
    5462:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5466:	f008 fe14 	bl	e092 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    546a:	4916      	ldr	r1, [pc, #88]	; (54c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    546c:	4603      	mov	r3, r0
    546e:	22fb      	movs	r2, #251	; 0xfb
    5470:	3108      	adds	r1, #8
    5472:	2000      	movs	r0, #0
    5474:	f006 fb32 	bl	badc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5478:	f006 fb66 	bl	bb48 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    547c:	2001      	movs	r0, #1
    547e:	f000 fb95 	bl	5bac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5482:	4811      	ldr	r0, [pc, #68]	; (54c8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    5484:	6800      	ldr	r0, [r0, #0]
    5486:	2803      	cmp	r0, #3
    5488:	d013      	beq.n	54b2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    548a:	e000      	b.n	548e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    548c:	e00f      	b.n	54ae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
    548e:	280b      	cmp	r0, #11
    5490:	d00f      	beq.n	54b2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    5492:	4648      	mov	r0, r9
    5494:	f840 af52 	str.w	sl, [r0, #82]!
    5498:	f8c0 a004 	str.w	sl, [r0, #4]
    549c:	4809      	ldr	r0, [pc, #36]	; (54c4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    549e:	88b1      	ldrh	r1, [r6, #4]
    54a0:	3052      	adds	r0, #82	; 0x52
    54a2:	8041      	strh	r1, [r0, #2]
    54a4:	8821      	ldrh	r1, [r4, #0]
    54a6:	8001      	strh	r1, [r0, #0]
    54a8:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    54ac:	7101      	strb	r1, [r0, #4]
    54ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54b2:	f240 11c1 	movw	r1, #449	; 0x1c1
    54b6:	2027      	movs	r0, #39	; 0x27
    54b8:	f7ff f858 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54bc:	200000ac 	.word	0x200000ac
    54c0:	00005d30 	.word	0x00005d30
    54c4:	200009c0 	.word	0x200009c0
    54c8:	40001550 	.word	0x40001550

000054cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    54cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54d0:	4605      	mov	r5, r0
    54d2:	f000 f8ad 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    54d6:	4e33      	ldr	r6, [pc, #204]	; (55a4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    54d8:	4604      	mov	r4, r0
    54da:	6a70      	ldr	r0, [r6, #36]	; 0x24
    54dc:	7847      	ldrb	r7, [r0, #1]
    54de:	b10d      	cbz	r5, 54e4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    54e0:	2d01      	cmp	r5, #1
    54e2:	d103      	bne.n	54ec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    54e4:	6b71      	ldr	r1, [r6, #52]	; 0x34
    54e6:	f007 fd7a 	bl	cfde <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    54ea:	7070      	strb	r0, [r6, #1]
    54ec:	7870      	ldrb	r0, [r6, #1]
    54ee:	f04f 0800 	mov.w	r8, #0
    54f2:	f04f 0901 	mov.w	r9, #1
    54f6:	b150      	cbz	r0, 550e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    54f8:	2801      	cmp	r0, #1
    54fa:	d01a      	beq.n	5532 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    54fc:	2802      	cmp	r0, #2
    54fe:	d034      	beq.n	556a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5500:	2803      	cmp	r0, #3
    5502:	d048      	beq.n	5596 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5504:	f240 4115 	movw	r1, #1045	; 0x415
    5508:	2027      	movs	r0, #39	; 0x27
    550a:	f7ff f82f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    550e:	2d01      	cmp	r5, #1
    5510:	d032      	beq.n	5578 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5512:	f000 f8e7 	bl	56e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5516:	4639      	mov	r1, r7
    5518:	2201      	movs	r2, #1
    551a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    551c:	f008 fa3d 	bl	d99a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5520:	e028      	b.n	5574 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5522:	bf00      	nop
    5524:	f884 8008 	strb.w	r8, [r4, #8]
    5528:	e031      	b.n	558e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    552a:	bf00      	nop
    552c:	f884 9008 	strb.w	r9, [r4, #8]
    5530:	e02d      	b.n	558e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5532:	2d01      	cmp	r5, #1
    5534:	d008      	beq.n	5548 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5536:	f000 f8d5 	bl	56e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    553a:	4639      	mov	r1, r7
    553c:	2200      	movs	r2, #0
    553e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5540:	f008 fa2b 	bl	d99a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5544:	2d02      	cmp	r5, #2
    5546:	d00b      	beq.n	5560 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5548:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    554c:	1c40      	adds	r0, r0, #1
    554e:	f141 0100 	adc.w	r1, r1, #0
    5552:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5556:	7a20      	ldrb	r0, [r4, #8]
    5558:	2801      	cmp	r0, #1
    555a:	d003      	beq.n	5564 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    555c:	f884 9008 	strb.w	r9, [r4, #8]
    5560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5564:	f884 8008 	strb.w	r8, [r4, #8]
    5568:	e7fa      	b.n	5560 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    556a:	2d01      	cmp	r5, #1
    556c:	d004      	beq.n	5578 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    556e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5570:	f008 fc4d 	bl	de0e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5574:	2d02      	cmp	r5, #2
    5576:	d0f3      	beq.n	5560 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5578:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    557c:	1c40      	adds	r0, r0, #1
    557e:	f141 0100 	adc.w	r1, r1, #0
    5582:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5586:	7a20      	ldrb	r0, [r4, #8]
    5588:	2801      	cmp	r0, #1
    558a:	d1cf      	bne.n	552c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    558c:	e7ca      	b.n	5524 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    558e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5592:	f001 b92b 	b.w	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5596:	2d01      	cmp	r5, #1
    5598:	d0e2      	beq.n	5560 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    559a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    559c:	f008 fc37 	bl	de0e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    55a0:	e7f5      	b.n	558e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    55a2:	0000      	.short	0x0000
    55a4:	200000ac 	.word	0x200000ac

000055a8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    55a8:	4804      	ldr	r0, [pc, #16]	; (55bc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    55aa:	7800      	ldrb	r0, [r0, #0]
    55ac:	b108      	cbz	r0, 55b2 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    55ae:	200c      	movs	r0, #12
    55b0:	4770      	bx	lr
    55b2:	4903      	ldr	r1, [pc, #12]	; (55c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    55b4:	2000      	movs	r0, #0
    55b6:	7448      	strb	r0, [r1, #17]
    55b8:	4770      	bx	lr
    55ba:	0000      	.short	0x0000
    55bc:	200000ac 	.word	0x200000ac
    55c0:	20000a12 	.word	0x20000a12

000055c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    55c4:	4812      	ldr	r0, [pc, #72]	; (5610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    55c6:	b508      	push	{r3, lr}
    55c8:	7801      	ldrb	r1, [r0, #0]
    55ca:	b139      	cbz	r1, 55dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    55cc:	7800      	ldrb	r0, [r0, #0]
    55ce:	2801      	cmp	r0, #1
    55d0:	d006      	beq.n	55e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    55d2:	f240 11d9 	movw	r1, #473	; 0x1d9
    55d6:	2027      	movs	r0, #39	; 0x27
    55d8:	f7fe ffc8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55dc:	f000 f9ce 	bl	597c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    55e0:	f000 f820 	bl	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    55e4:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    55e8:	f88d 1000 	strb.w	r1, [sp]
    55ec:	9900      	ldr	r1, [sp, #0]
    55ee:	9100      	str	r1, [sp, #0]
    55f0:	f89d 1000 	ldrb.w	r1, [sp]
    55f4:	2900      	cmp	r1, #0
    55f6:	d10a      	bne.n	560e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    55f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
    55fa:	2900      	cmp	r1, #0
    55fc:	d007      	beq.n	560e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    55fe:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    5602:	2200      	movs	r2, #0
    5604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5608:	4611      	mov	r1, r2
    560a:	f7fd bc51 	b.w	2eb0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    560e:	bd08      	pop	{r3, pc}
    5610:	200000ac 	.word	0x200000ac
    5614:	4a02      	ldr	r2, [pc, #8]	; (5620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5616:	8993      	ldrh	r3, [r2, #12]
    5618:	4303      	orrs	r3, r0
    561a:	8193      	strh	r3, [r2, #12]
    561c:	6952      	ldr	r2, [r2, #20]
    561e:	4710      	bx	r2
    5620:	200000ac 	.word	0x200000ac
    5624:	4801      	ldr	r0, [pc, #4]	; (562c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5626:	6840      	ldr	r0, [r0, #4]
    5628:	4770      	bx	lr
    562a:	0000      	.short	0x0000
    562c:	200000e4 	.word	0x200000e4
    5630:	4801      	ldr	r0, [pc, #4]	; (5638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    5632:	6840      	ldr	r0, [r0, #4]
    5634:	3078      	adds	r0, #120	; 0x78
    5636:	4770      	bx	lr
    5638:	200000e4 	.word	0x200000e4
    563c:	4a01      	ldr	r2, [pc, #4]	; (5644 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    563e:	2100      	movs	r1, #0
    5640:	6952      	ldr	r2, [r2, #20]
    5642:	4710      	bx	r2
    5644:	200000ac 	.word	0x200000ac
    5648:	b570      	push	{r4, r5, r6, lr}
    564a:	f7ff fff1 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    564e:	4604      	mov	r4, r0
    5650:	f7ff ffe8 	bl	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5654:	4605      	mov	r5, r0
    5656:	4621      	mov	r1, r4
    5658:	f008 ff36 	bl	e4c8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    565c:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5660:	2901      	cmp	r1, #1
    5662:	d114      	bne.n	568e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5664:	2800      	cmp	r0, #0
    5666:	d012      	beq.n	568e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5668:	4909      	ldr	r1, [pc, #36]	; (5690 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    566a:	2001      	movs	r0, #1
    566c:	684a      	ldr	r2, [r1, #4]
    566e:	8829      	ldrh	r1, [r5, #0]
    5670:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    5674:	7a61      	ldrb	r1, [r4, #9]
    5676:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    567a:	7aa1      	ldrb	r1, [r4, #10]
    567c:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    5680:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    5684:	7010      	strb	r0, [r2, #0]
    5686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    568a:	f001 b8af 	b.w	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    568e:	bd70      	pop	{r4, r5, r6, pc}
    5690:	200000e4 	.word	0x200000e4
    5694:	b570      	push	{r4, r5, r6, lr}
    5696:	4605      	mov	r5, r0
    5698:	2901      	cmp	r1, #1
    569a:	d81c      	bhi.n	56d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    569c:	4c10      	ldr	r4, [pc, #64]	; (56e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    569e:	69a1      	ldr	r1, [r4, #24]
    56a0:	4788      	blx	r1
    56a2:	b1c0      	cbz	r0, 56d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    56a4:	7960      	ldrb	r0, [r4, #5]
    56a6:	b9b0      	cbnz	r0, 56d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    56a8:	2d01      	cmp	r5, #1
    56aa:	d116      	bne.n	56da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    56ac:	f104 0010 	add.w	r0, r4, #16
    56b0:	7800      	ldrb	r0, [r0, #0]
    56b2:	06c1      	lsls	r1, r0, #27
    56b4:	d405      	bmi.n	56c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    56b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    56b8:	7809      	ldrb	r1, [r1, #0]
    56ba:	06c9      	lsls	r1, r1, #27
    56bc:	d401      	bmi.n	56c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    56be:	2101      	movs	r1, #1
    56c0:	e000      	b.n	56c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    56c2:	2100      	movs	r1, #0
    56c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    56c6:	b91a      	cbnz	r2, 56d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    56c8:	8962      	ldrh	r2, [r4, #10]
    56ca:	b10a      	cbz	r2, 56d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    56cc:	06c0      	lsls	r0, r0, #27
    56ce:	d502      	bpl.n	56d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    56d0:	89a0      	ldrh	r0, [r4, #12]
    56d2:	4301      	orrs	r1, r0
    56d4:	d001      	beq.n	56da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    56d6:	2001      	movs	r0, #1
    56d8:	bd70      	pop	{r4, r5, r6, pc}
    56da:	2000      	movs	r0, #0
    56dc:	bd70      	pop	{r4, r5, r6, pc}
    56de:	0000      	.short	0x0000
    56e0:	200000ac 	.word	0x200000ac
    56e4:	b510      	push	{r4, lr}
    56e6:	4c08      	ldr	r4, [pc, #32]	; (5708 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    56e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    56ea:	b138      	cbz	r0, 56fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    56ec:	8962      	ldrh	r2, [r4, #10]
    56ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    56f0:	1cd2      	adds	r2, r2, #3
    56f2:	f007 fb4b 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    56f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    56f8:	6260      	str	r0, [r4, #36]	; 0x24
    56fa:	bd10      	pop	{r4, pc}
    56fc:	f240 415b 	movw	r1, #1115	; 0x45b
    5700:	2027      	movs	r0, #39	; 0x27
    5702:	f7fe ff33 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5706:	0000      	.short	0x0000
    5708:	200000ac 	.word	0x200000ac
    570c:	b510      	push	{r4, lr}
    570e:	f7ff ff89 	bl	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5712:	4604      	mov	r4, r0
    5714:	f7ff ff8c 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5718:	7b41      	ldrb	r1, [r0, #13]
    571a:	4a0a      	ldr	r2, [pc, #40]	; (5744 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    571c:	2924      	cmp	r1, #36	; 0x24
    571e:	d008      	beq.n	5732 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5720:	7b80      	ldrb	r0, [r0, #14]
    5722:	2824      	cmp	r0, #36	; 0x24
    5724:	d005      	beq.n	5732 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5726:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    572a:	2804      	cmp	r0, #4
    572c:	d100      	bne.n	5730 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    572e:	2008      	movs	r0, #8
    5730:	bd10      	pop	{r4, pc}
    5732:	6850      	ldr	r0, [r2, #4]
    5734:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    5738:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5740:	f008 bcb5 	b.w	e0ae <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    5744:	200000e4 	.word	0x200000e4
    5748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    574c:	4689      	mov	r9, r1
    574e:	4606      	mov	r6, r0
    5750:	f7ff ff6e 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5754:	4c58      	ldr	r4, [pc, #352]	; (58b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    5756:	2700      	movs	r7, #0
    5758:	4605      	mov	r5, r0
    575a:	f88d 7000 	strb.w	r7, [sp]
    575e:	7820      	ldrb	r0, [r4, #0]
    5760:	2802      	cmp	r0, #2
    5762:	d004      	beq.n	576e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    5764:	f240 41ba 	movw	r1, #1210	; 0x4ba
    5768:	2027      	movs	r0, #39	; 0x27
    576a:	f7fe feff 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    576e:	7ba0      	ldrb	r0, [r4, #14]
    5770:	0640      	lsls	r0, r0, #25
    5772:	d406      	bmi.n	5782 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    5774:	2040      	movs	r0, #64	; 0x40
    5776:	f7ff ff61 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    577a:	89e0      	ldrh	r0, [r4, #14]
    577c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5780:	81e0      	strh	r0, [r4, #14]
    5782:	7ce8      	ldrb	r0, [r5, #19]
    5784:	f04f 0801 	mov.w	r8, #1
    5788:	b3c6      	cbz	r6, 57fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    578a:	f006 fa0d 	bl	bba8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    578e:	f006 f9f1 	bl	bb74 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5792:	b968      	cbnz	r0, 57b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5794:	7ce8      	ldrb	r0, [r5, #19]
    5796:	b158      	cbz	r0, 57b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5798:	6a60      	ldr	r0, [r4, #36]	; 0x24
    579a:	7841      	ldrb	r1, [r0, #1]
    579c:	b141      	cbz	r1, 57b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    579e:	7800      	ldrb	r0, [r0, #0]
    57a0:	7a29      	ldrb	r1, [r5, #8]
    57a2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    57a6:	4288      	cmp	r0, r1
    57a8:	d102      	bne.n	57b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    57aa:	f884 8002 	strb.w	r8, [r4, #2]
    57ae:	e064      	b.n	587a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    57b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57b2:	7841      	ldrb	r1, [r0, #1]
    57b4:	8161      	strh	r1, [r4, #10]
    57b6:	b121      	cbz	r1, 57c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    57b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    57ba:	f008 faf5 	bl	dda8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    57be:	62a0      	str	r0, [r4, #40]	; 0x28
    57c0:	e000      	b.n	57c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    57c2:	62a7      	str	r7, [r4, #40]	; 0x28
    57c4:	89e0      	ldrh	r0, [r4, #14]
    57c6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    57ca:	81e0      	strh	r0, [r4, #14]
    57cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57ce:	79e9      	ldrb	r1, [r5, #7]
    57d0:	7800      	ldrb	r0, [r0, #0]
    57d2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    57d6:	4288      	cmp	r0, r1
    57d8:	d005      	beq.n	57e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    57da:	f000 f963 	bl	5aa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    57de:	89e0      	ldrh	r0, [r4, #14]
    57e0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    57e4:	81e0      	strh	r0, [r4, #14]
    57e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    57e8:	7a29      	ldrb	r1, [r5, #8]
    57ea:	7800      	ldrb	r0, [r0, #0]
    57ec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    57f0:	4288      	cmp	r0, r1
    57f2:	d10e      	bne.n	5812 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    57f4:	4668      	mov	r0, sp
    57f6:	f000 f917 	bl	5a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    57fa:	e00a      	b.n	5812 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    57fc:	e7ff      	b.n	57fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    57fe:	b108      	cbz	r0, 5804 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    5800:	f006 f9cc 	bl	bb9c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5804:	78e0      	ldrb	r0, [r4, #3]
    5806:	1c40      	adds	r0, r0, #1
    5808:	70e0      	strb	r0, [r4, #3]
    580a:	89e0      	ldrh	r0, [r4, #14]
    580c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5810:	81e0      	strh	r0, [r4, #14]
    5812:	7ca8      	ldrb	r0, [r5, #18]
    5814:	b1a0      	cbz	r0, 5840 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    5816:	f7ff ff05 	bl	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    581a:	4928      	ldr	r1, [pc, #160]	; (58bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    581c:	f881 8018 	strb.w	r8, [r1, #24]
    5820:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    5824:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5828:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    582c:	f008 fc31 	bl	e092 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5830:	4603      	mov	r3, r0
    5832:	22fb      	movs	r2, #251	; 0xfb
    5834:	4921      	ldr	r1, [pc, #132]	; (58bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5836:	2000      	movs	r0, #0
    5838:	f006 f950 	bl	badc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    583c:	f006 f984 	bl	bb48 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5840:	4d1e      	ldr	r5, [pc, #120]	; (58bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5842:	354a      	adds	r5, #74	; 0x4a
    5844:	f1b9 0f00 	cmp.w	r9, #0
    5848:	d104      	bne.n	5854 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    584a:	78e1      	ldrb	r1, [r4, #3]
    584c:	2001      	movs	r0, #1
    584e:	f7ff ff21 	bl	5694 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5852:	b1b0      	cbz	r0, 5882 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    5854:	f006 fd48 	bl	c2e8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5858:	f89d 0000 	ldrb.w	r0, [sp]
    585c:	b110      	cbz	r0, 5864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    585e:	2000      	movs	r0, #0
    5860:	f7ff fe34 	bl	54cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5864:	b136      	cbz	r6, 5874 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    5866:	70e7      	strb	r7, [r4, #3]
    5868:	7968      	ldrb	r0, [r5, #5]
    586a:	1c40      	adds	r0, r0, #1
    586c:	7168      	strb	r0, [r5, #5]
    586e:	f7ff feeb 	bl	5648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5872:	e002      	b.n	587a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5874:	79a8      	ldrb	r0, [r5, #6]
    5876:	1c40      	adds	r0, r0, #1
    5878:	71a8      	strb	r0, [r5, #6]
    587a:	f000 f87f 	bl	597c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    587e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5882:	f89d 0000 	ldrb.w	r0, [sp]
    5886:	b110      	cbz	r0, 588e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5888:	2001      	movs	r0, #1
    588a:	f7ff fe1f 	bl	54cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    588e:	2000      	movs	r0, #0
    5890:	f000 f98c 	bl	5bac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5894:	f89d 0000 	ldrb.w	r0, [sp]
    5898:	b110      	cbz	r0, 58a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    589a:	2002      	movs	r0, #2
    589c:	f7ff fe16 	bl	54cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    58a0:	b136      	cbz	r6, 58b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    58a2:	70e7      	strb	r7, [r4, #3]
    58a4:	7968      	ldrb	r0, [r5, #5]
    58a6:	1c40      	adds	r0, r0, #1
    58a8:	7168      	strb	r0, [r5, #5]
    58aa:	f7ff fecd 	bl	5648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    58ae:	e7e6      	b.n	587e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    58b0:	79a8      	ldrb	r0, [r5, #6]
    58b2:	1c40      	adds	r0, r0, #1
    58b4:	71a8      	strb	r0, [r5, #6]
    58b6:	e7e2      	b.n	587e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    58b8:	200000ac 	.word	0x200000ac
    58bc:	200009c8 	.word	0x200009c8
    58c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58c4:	4688      	mov	r8, r1
    58c6:	4681      	mov	r9, r0
    58c8:	f7ff feb2 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    58cc:	4d29      	ldr	r5, [pc, #164]	; (5974 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    58ce:	4604      	mov	r4, r0
    58d0:	7828      	ldrb	r0, [r5, #0]
    58d2:	2801      	cmp	r0, #1
    58d4:	d004      	beq.n	58e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    58d6:	f240 416a 	movw	r1, #1130	; 0x46a
    58da:	2027      	movs	r0, #39	; 0x27
    58dc:	f7fe fe46 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58e0:	7860      	ldrb	r0, [r4, #1]
    58e2:	2600      	movs	r6, #0
    58e4:	2701      	movs	r7, #1
    58e6:	b120      	cbz	r0, 58f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    58e8:	7066      	strb	r6, [r4, #1]
    58ea:	2100      	movs	r1, #0
    58ec:	2004      	movs	r0, #4
    58ee:	f7ff fe91 	bl	5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    58f2:	6a29      	ldr	r1, [r5, #32]
    58f4:	7808      	ldrb	r0, [r1, #0]
    58f6:	43c0      	mvns	r0, r0
    58f8:	0780      	lsls	r0, r0, #30
    58fa:	d109      	bne.n	5910 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    58fc:	79a0      	ldrb	r0, [r4, #6]
    58fe:	bb88      	cbnz	r0, 5964 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5900:	2002      	movs	r0, #2
    5902:	f7ff fe87 	bl	5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5906:	6a28      	ldr	r0, [r5, #32]
    5908:	7800      	ldrb	r0, [r0, #0]
    590a:	43c0      	mvns	r0, r0
    590c:	0780      	lsls	r0, r0, #30
    590e:	d029      	beq.n	5964 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5910:	6a28      	ldr	r0, [r5, #32]
    5912:	7840      	ldrb	r0, [r0, #1]
    5914:	b110      	cbz	r0, 591c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    5916:	2002      	movs	r0, #2
    5918:	71a0      	strb	r0, [r4, #6]
    591a:	e000      	b.n	591e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    591c:	71a7      	strb	r7, [r4, #6]
    591e:	7ce0      	ldrb	r0, [r4, #19]
    5920:	b1a0      	cbz	r0, 594c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    5922:	f7ff fe7f 	bl	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5926:	4914      	ldr	r1, [pc, #80]	; (5978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5928:	7a6d      	ldrb	r5, [r5, #9]
    592a:	760e      	strb	r6, [r1, #24]
    592c:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    5930:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5934:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5938:	f008 fbab 	bl	e092 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    593c:	4603      	mov	r3, r0
    593e:	462a      	mov	r2, r5
    5940:	490d      	ldr	r1, [pc, #52]	; (5978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5942:	2001      	movs	r0, #1
    5944:	f006 f8ca 	bl	badc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5948:	f006 f8fe 	bl	bb48 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    594c:	ea38 0009 	bics.w	r0, r8, r9
    5950:	d004      	beq.n	595c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    5952:	2100      	movs	r1, #0
    5954:	4608      	mov	r0, r1
    5956:	f7ff fe9d 	bl	5694 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    595a:	b128      	cbz	r0, 5968 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    595c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5960:	f000 b80c 	b.w	597c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5964:	2003      	movs	r0, #3
    5966:	e7d7      	b.n	5918 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5968:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    596c:	2000      	movs	r0, #0
    596e:	f000 b8df 	b.w	5b30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    5972:	0000      	.short	0x0000
    5974:	200000ac 	.word	0x200000ac
    5978:	200009c8 	.word	0x200009c8
    597c:	b510      	push	{r4, lr}
    597e:	f006 f9a5 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5982:	f006 f861 	bl	ba48 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5986:	4c0d      	ldr	r4, [pc, #52]	; (59bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    5988:	89e0      	ldrh	r0, [r4, #14]
    598a:	f7ff fe57 	bl	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    598e:	69e2      	ldr	r2, [r4, #28]
    5990:	7961      	ldrb	r1, [r4, #5]
    5992:	78a0      	ldrb	r0, [r4, #2]
    5994:	4790      	blx	r2
    5996:	480a      	ldr	r0, [pc, #40]	; (59c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5998:	7c40      	ldrb	r0, [r0, #17]
    599a:	b158      	cbz	r0, 59b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    599c:	4808      	ldr	r0, [pc, #32]	; (59c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    599e:	3852      	subs	r0, #82	; 0x52
    59a0:	f850 1f52 	ldr.w	r1, [r0, #82]!
    59a4:	6081      	str	r1, [r0, #8]
    59a6:	6841      	ldr	r1, [r0, #4]
    59a8:	60c1      	str	r1, [r0, #12]
    59aa:	4805      	ldr	r0, [pc, #20]	; (59c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    59ac:	2101      	movs	r1, #1
    59ae:	7401      	strb	r1, [r0, #16]
    59b0:	f000 ff1c 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    59b4:	2000      	movs	r0, #0
    59b6:	7020      	strb	r0, [r4, #0]
    59b8:	bd10      	pop	{r4, pc}
    59ba:	0000      	.short	0x0000
    59bc:	200000ac 	.word	0x200000ac
    59c0:	20000a12 	.word	0x20000a12
    59c4:	4808      	ldr	r0, [pc, #32]	; (59e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    59c6:	b510      	push	{r4, lr}
    59c8:	7800      	ldrb	r0, [r0, #0]
    59ca:	2802      	cmp	r0, #2
    59cc:	d004      	beq.n	59d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    59ce:	f240 2111 	movw	r1, #529	; 0x211
    59d2:	2027      	movs	r0, #39	; 0x27
    59d4:	f7fe fdca 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59d8:	4904      	ldr	r1, [pc, #16]	; (59ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    59da:	2001      	movs	r0, #1
    59dc:	71c8      	strb	r0, [r1, #7]
    59de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    59e2:	f7ff bfcb 	b.w	597c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    59e6:	0000      	.short	0x0000
    59e8:	200000ac 	.word	0x200000ac
    59ec:	20000a12 	.word	0x20000a12
    59f0:	b430      	push	{r4, r5}
    59f2:	4b0c      	ldr	r3, [pc, #48]	; (5a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    59f4:	b942      	cbnz	r2, 5a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    59f6:	79da      	ldrb	r2, [r3, #7]
    59f8:	2aff      	cmp	r2, #255	; 0xff
    59fa:	d105      	bne.n	5a08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    59fc:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5a00:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5a04:	42a2      	cmp	r2, r4
    5a06:	d00b      	beq.n	5a20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    5a08:	b131      	cbz	r1, 5a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    5a0a:	79da      	ldrb	r2, [r3, #7]
    5a0c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5a10:	bc30      	pop	{r4, r5}
    5a12:	4610      	mov	r0, r2
    5a14:	f006 bca0 	b.w	c358 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5a18:	22ff      	movs	r2, #255	; 0xff
    5a1a:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5a1e:	e7f7      	b.n	5a10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5a20:	bc30      	pop	{r4, r5}
    5a22:	4770      	bx	lr
    5a24:	200000ac 	.word	0x200000ac
    5a28:	b570      	push	{r4, r5, r6, lr}
    5a2a:	4606      	mov	r6, r0
    5a2c:	f7ff fe00 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5a30:	4a1b      	ldr	r2, [pc, #108]	; (5aa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    5a32:	4604      	mov	r4, r0
    5a34:	2501      	movs	r5, #1
    5a36:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5a38:	7808      	ldrb	r0, [r1, #0]
    5a3a:	f000 0003 	and.w	r0, r0, #3
    5a3e:	2801      	cmp	r0, #1
    5a40:	d00c      	beq.n	5a5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5a42:	2802      	cmp	r0, #2
    5a44:	d00a      	beq.n	5a5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5a46:	2803      	cmp	r0, #3
    5a48:	d121      	bne.n	5a8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5a4a:	7065      	strb	r5, [r4, #1]
    5a4c:	89d0      	ldrh	r0, [r2, #14]
    5a4e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    5a52:	81d0      	strh	r0, [r2, #14]
    5a54:	2001      	movs	r0, #1
    5a56:	f7ff fddd 	bl	5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5a5a:	e018      	b.n	5a8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5a5c:	7848      	ldrb	r0, [r1, #1]
    5a5e:	b1b0      	cbz	r0, 5a8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5a60:	89d1      	ldrh	r1, [r2, #14]
    5a62:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5a66:	81d1      	strh	r1, [r2, #14]
    5a68:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5a6a:	2900      	cmp	r1, #0
    5a6c:	d009      	beq.n	5a82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    5a6e:	28fb      	cmp	r0, #251	; 0xfb
    5a70:	d808      	bhi.n	5a84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    5a72:	7990      	ldrb	r0, [r2, #6]
    5a74:	b120      	cbz	r0, 5a80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    5a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5a7a:	2020      	movs	r0, #32
    5a7c:	f7ff bdde 	b.w	563c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5a80:	7035      	strb	r5, [r6, #0]
    5a82:	bd70      	pop	{r4, r5, r6, pc}
    5a84:	7950      	ldrb	r0, [r2, #5]
    5a86:	f040 0010 	orr.w	r0, r0, #16
    5a8a:	7150      	strb	r0, [r2, #5]
    5a8c:	bd70      	pop	{r4, r5, r6, pc}
    5a8e:	7a20      	ldrb	r0, [r4, #8]
    5a90:	2801      	cmp	r0, #1
    5a92:	d001      	beq.n	5a98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    5a94:	7225      	strb	r5, [r4, #8]
    5a96:	bd70      	pop	{r4, r5, r6, pc}
    5a98:	2000      	movs	r0, #0
    5a9a:	7220      	strb	r0, [r4, #8]
    5a9c:	bd70      	pop	{r4, r5, r6, pc}
    5a9e:	0000      	.short	0x0000
    5aa0:	200000ac 	.word	0x200000ac
    5aa4:	b570      	push	{r4, r5, r6, lr}
    5aa6:	f7ff fdc3 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5aaa:	4604      	mov	r4, r0
    5aac:	7980      	ldrb	r0, [r0, #6]
    5aae:	2800      	cmp	r0, #0
    5ab0:	d027      	beq.n	5b02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    5ab2:	2802      	cmp	r0, #2
    5ab4:	d10d      	bne.n	5ad2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    5ab6:	4818      	ldr	r0, [pc, #96]	; (5b18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    5ab8:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5aba:	f007 ff47 	bl	d94c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5abe:	b308      	cbz	r0, 5b04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5ac0:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5ac4:	1c40      	adds	r0, r0, #1
    5ac6:	f141 0100 	adc.w	r1, r1, #0
    5aca:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5ace:	f000 fe8d 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5ad2:	2500      	movs	r5, #0
    5ad4:	71a5      	strb	r5, [r4, #6]
    5ad6:	78a0      	ldrb	r0, [r4, #2]
    5ad8:	2601      	movs	r6, #1
    5ada:	b170      	cbz	r0, 5afa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    5adc:	70a5      	strb	r5, [r4, #2]
    5ade:	f7ff fb21 	bl	5124 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5ae2:	b190      	cbz	r0, 5b0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    5ae4:	2100      	movs	r1, #0
    5ae6:	2008      	movs	r0, #8
    5ae8:	f7ff fd94 	bl	5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5aec:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5af0:	1c40      	adds	r0, r0, #1
    5af2:	f141 0100 	adc.w	r1, r1, #0
    5af6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5afa:	79e0      	ldrb	r0, [r4, #7]
    5afc:	2801      	cmp	r0, #1
    5afe:	d009      	beq.n	5b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    5b00:	71e6      	strb	r6, [r4, #7]
    5b02:	bd70      	pop	{r4, r5, r6, pc}
    5b04:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5b08:	e001      	b.n	5b0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    5b0a:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    5b0e:	2027      	movs	r0, #39	; 0x27
    5b10:	f7fe fd2c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b14:	71e5      	strb	r5, [r4, #7]
    5b16:	bd70      	pop	{r4, r5, r6, pc}
    5b18:	200000ac 	.word	0x200000ac
    5b1c:	4803      	ldr	r0, [pc, #12]	; (5b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    5b1e:	7800      	ldrb	r0, [r0, #0]
    5b20:	2800      	cmp	r0, #0
    5b22:	d001      	beq.n	5b28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    5b24:	f7ff bf2a 	b.w	597c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5b28:	4770      	bx	lr
    5b2a:	0000      	.short	0x0000
    5b2c:	200000ac 	.word	0x200000ac
    5b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b34:	4607      	mov	r7, r0
    5b36:	f7ff fd75 	bl	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5b3a:	4680      	mov	r8, r0
    5b3c:	f7ff fd78 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5b40:	4c17      	ldr	r4, [pc, #92]	; (5ba0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    5b42:	4605      	mov	r5, r0
    5b44:	463a      	mov	r2, r7
    5b46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5b48:	6260      	str	r0, [r4, #36]	; 0x24
    5b4a:	2101      	movs	r1, #1
    5b4c:	4640      	mov	r0, r8
    5b4e:	f7ff ff4f 	bl	59f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    5b52:	7ce8      	ldrb	r0, [r5, #19]
    5b54:	2600      	movs	r6, #0
    5b56:	b178      	cbz	r0, 5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5b58:	4812      	ldr	r0, [pc, #72]	; (5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5b5a:	f006 fb1b 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5b5e:	4812      	ldr	r0, [pc, #72]	; (5ba8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5b60:	7606      	strb	r6, [r0, #24]
    5b62:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    5b66:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5b6a:	490e      	ldr	r1, [pc, #56]	; (5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5b6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b6e:	f005 ff3d 	bl	b9ec <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5b72:	f005 ff4f 	bl	ba14 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    5b76:	e004      	b.n	5b82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5b78:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5b7a:	f006 fb0b 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5b7e:	f005 ff63 	bl	ba48 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5b82:	b917      	cbnz	r7, 5b8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    5b84:	4630      	mov	r0, r6
    5b86:	f006 f9b9 	bl	befc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5b8a:	2100      	movs	r1, #0
    5b8c:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5b90:	4608      	mov	r0, r1
    5b92:	f006 fb8b 	bl	c2ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5b96:	2002      	movs	r0, #2
    5b98:	7020      	strb	r0, [r4, #0]
    5b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b9e:	0000      	.short	0x0000
    5ba0:	200000ac 	.word	0x200000ac
    5ba4:	200008c0 	.word	0x200008c0
    5ba8:	200009c8 	.word	0x200009c8
    5bac:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5bb0:	4604      	mov	r4, r0
    5bb2:	f7ff fd3d 	bl	5630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5bb6:	4605      	mov	r5, r0
    5bb8:	f7ff fd34 	bl	5624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5bbc:	4606      	mov	r6, r0
    5bbe:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5d24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5bc2:	4622      	mov	r2, r4
    5bc4:	2100      	movs	r1, #0
    5bc6:	f7ff ff13 	bl	59f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    5bca:	79a8      	ldrb	r0, [r5, #6]
    5bcc:	f04f 0800 	mov.w	r8, #0
    5bd0:	2701      	movs	r7, #1
    5bd2:	f1a9 0420 	sub.w	r4, r9, #32
    5bd6:	b140      	cbz	r0, 5bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    5bd8:	2801      	cmp	r0, #1
    5bda:	d01f      	beq.n	5c1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5bdc:	2802      	cmp	r0, #2
    5bde:	d030      	beq.n	5c42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    5be0:	2803      	cmp	r0, #3
    5be2:	d03c      	beq.n	5c5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    5be4:	f240 21ae 	movw	r1, #686	; 0x2ae
    5be8:	e058      	b.n	5c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5bea:	7a20      	ldrb	r0, [r4, #8]
    5bec:	2150      	movs	r1, #80	; 0x50
    5bee:	f8ad 0004 	strh.w	r0, [sp, #4]
    5bf2:	5388      	strh	r0, [r1, r6]
    5bf4:	4648      	mov	r0, r9
    5bf6:	f7ff fabf 	bl	5178 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5bfa:	b128      	cbz	r0, 5c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    5bfc:	2080      	movs	r0, #128	; 0x80
    5bfe:	6a21      	ldr	r1, [r4, #32]
    5c00:	f7ff fd08 	bl	5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5c04:	70af      	strb	r7, [r5, #2]
    5c06:	e02e      	b.n	5c66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5c08:	466a      	mov	r2, sp
    5c0a:	a901      	add	r1, sp, #4
    5c0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5c0e:	f008 fa58 	bl	e0c2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5c12:	6220      	str	r0, [r4, #32]
    5c14:	b110      	cbz	r0, 5c1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5c16:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    5c1a:	b111      	cbz	r1, 5c22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5c1c:	4842      	ldr	r0, [pc, #264]	; (5d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5c1e:	6220      	str	r0, [r4, #32]
    5c20:	e021      	b.n	5c66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5c22:	f89d 1000 	ldrb.w	r1, [sp]
    5c26:	b931      	cbnz	r1, 5c36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    5c28:	f8a0 8000 	strh.w	r8, [r0]
    5c2c:	f880 8002 	strb.w	r8, [r0, #2]
    5c30:	2101      	movs	r1, #1
    5c32:	f008 fd96 	bl	e762 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5c36:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5c3a:	6a20      	ldr	r0, [r4, #32]
    5c3c:	f008 fd4b 	bl	e6d6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5c40:	e011      	b.n	5c66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5c42:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5c46:	f8ad 0004 	strh.w	r0, [sp, #4]
    5c4a:	466a      	mov	r2, sp
    5c4c:	a901      	add	r1, sp, #4
    5c4e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5c50:	f008 fa37 	bl	e0c2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5c54:	6220      	str	r0, [r4, #32]
    5c56:	b930      	cbnz	r0, 5c66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5c58:	f240 219f 	movw	r1, #671	; 0x29f
    5c5c:	e01e      	b.n	5c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5c5e:	4648      	mov	r0, r9
    5c60:	f7ff fa8a 	bl	5178 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5c64:	b1c0      	cbz	r0, 5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    5c66:	6a20      	ldr	r0, [r4, #32]
    5c68:	2308      	movs	r3, #8
    5c6a:	7801      	ldrb	r1, [r0, #0]
    5c6c:	f021 0108 	bic.w	r1, r1, #8
    5c70:	7001      	strb	r1, [r0, #0]
    5c72:	79ea      	ldrb	r2, [r5, #7]
    5c74:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5c78:	4311      	orrs	r1, r2
    5c7a:	f021 0104 	bic.w	r1, r1, #4
    5c7e:	7001      	strb	r1, [r0, #0]
    5c80:	7a2a      	ldrb	r2, [r5, #8]
    5c82:	2304      	movs	r3, #4
    5c84:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5c88:	4311      	orrs	r1, r2
    5c8a:	f021 0110 	bic.w	r1, r1, #16
    5c8e:	7001      	strb	r1, [r0, #0]
    5c90:	43c9      	mvns	r1, r1
    5c92:	0789      	lsls	r1, r1, #30
    5c94:	d005      	beq.n	5ca2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    5c96:	e007      	b.n	5ca8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    5c98:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    5c9c:	2027      	movs	r0, #39	; 0x27
    5c9e:	f7fe fc65 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ca2:	78c0      	ldrb	r0, [r0, #3]
    5ca4:	2802      	cmp	r0, #2
    5ca6:	d00f      	beq.n	5cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5caa:	f007 ffa0 	bl	dbee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5cae:	b108      	cbz	r0, 5cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5cb0:	2101      	movs	r1, #1
    5cb2:	e00a      	b.n	5cca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5cb4:	6a20      	ldr	r0, [r4, #32]
    5cb6:	7800      	ldrb	r0, [r0, #0]
    5cb8:	43c0      	mvns	r0, r0
    5cba:	0780      	lsls	r0, r0, #30
    5cbc:	d004      	beq.n	5cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5cbe:	f7ff fa19 	bl	50f4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5cc2:	f080 0101 	eor.w	r1, r0, #1
    5cc6:	e000      	b.n	5cca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5cc8:	2100      	movs	r1, #0
    5cca:	6a20      	ldr	r0, [r4, #32]
    5ccc:	7802      	ldrb	r2, [r0, #0]
    5cce:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5cd2:	7001      	strb	r1, [r0, #0]
    5cd4:	7ca9      	ldrb	r1, [r5, #18]
    5cd6:	b191      	cbz	r1, 5cfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5cd8:	7841      	ldrb	r1, [r0, #1]
    5cda:	b181      	cbz	r1, 5cfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5cdc:	4813      	ldr	r0, [pc, #76]	; (5d2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5cde:	f006 fa59 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5ce2:	4811      	ldr	r0, [pc, #68]	; (5d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5ce4:	3828      	subs	r0, #40	; 0x28
    5ce6:	7607      	strb	r7, [r0, #24]
    5ce8:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5cec:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5cf0:	480e      	ldr	r0, [pc, #56]	; (5d2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5cf2:	6a21      	ldr	r1, [r4, #32]
    5cf4:	f005 fe7a 	bl	b9ec <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5cf8:	f005 fec4 	bl	ba84 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5cfc:	e003      	b.n	5d06 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5cfe:	f006 fa49 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5d02:	f005 fea1 	bl	ba48 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5d06:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5d0a:	2101      	movs	r1, #1
    5d0c:	2000      	movs	r0, #0
    5d0e:	f006 facd 	bl	c2ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5d12:	7127      	strb	r7, [r4, #4]
    5d14:	6a20      	ldr	r0, [r4, #32]
    5d16:	8801      	ldrh	r1, [r0, #0]
    5d18:	8221      	strh	r1, [r4, #16]
    5d1a:	7880      	ldrb	r0, [r0, #2]
    5d1c:	74a0      	strb	r0, [r4, #18]
    5d1e:	7027      	strb	r7, [r4, #0]
    5d20:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5d24:	200000cc 	.word	0x200000cc
    5d28:	200009f0 	.word	0x200009f0
    5d2c:	200008c0 	.word	0x200008c0
    5d30:	000059c5 	.word	0x000059c5
    5d34:	00005749 	.word	0x00005749
    5d38:	000058c1 	.word	0x000058c1
    5d3c:	00005b1d 	.word	0x00005b1d

00005d40 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5d40:	4800      	ldr	r0, [pc, #0]	; (5d44 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5d42:	4770      	bx	lr
    5d44:	200013ad 	.word	0x200013ad

00005d48 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    5d48:	b570      	push	{r4, r5, r6, lr}
    5d4a:	2600      	movs	r6, #0
    5d4c:	4635      	mov	r5, r6
    5d4e:	4c0f      	ldr	r4, [pc, #60]	; (5d8c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    5d50:	e018      	b.n	5d84 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    5d52:	1960      	adds	r0, r4, r5
    5d54:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5d58:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5d5c:	2a01      	cmp	r2, #1
    5d5e:	d002      	beq.n	5d66 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5d60:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    5d64:	b160      	cbz	r0, 5d80 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    5d66:	480a      	ldr	r0, [pc, #40]	; (5d90 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    5d68:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5d6c:	1c73      	adds	r3, r6, #1
    5d6e:	5585      	strb	r5, [r0, r6]
    5d70:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    5d74:	4630      	mov	r0, r6
    5d76:	b2de      	uxtb	r6, r3
    5d78:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    5d7c:	f006 fbbe 	bl	c4fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5d80:	1c6d      	adds	r5, r5, #1
    5d82:	b2ed      	uxtb	r5, r5
    5d84:	78a0      	ldrb	r0, [r4, #2]
    5d86:	42a8      	cmp	r0, r5
    5d88:	d8e3      	bhi.n	5d52 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    5d8a:	bd70      	pop	{r4, r5, r6, pc}
    5d8c:	200011da 	.word	0x200011da
    5d90:	20000274 	.word	0x20000274

00005d94 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5d94:	4904      	ldr	r1, [pc, #16]	; (5da8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5d96:	788a      	ldrb	r2, [r1, #2]
    5d98:	4282      	cmp	r2, r0
    5d9a:	d903      	bls.n	5da4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5d9c:	4408      	add	r0, r1
    5d9e:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5da2:	4770      	bx	lr
    5da4:	2000      	movs	r0, #0
    5da6:	4770      	bx	lr
    5da8:	200011da 	.word	0x200011da

00005dac <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5dac:	4904      	ldr	r1, [pc, #16]	; (5dc0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5dae:	788a      	ldrb	r2, [r1, #2]
    5db0:	4282      	cmp	r2, r0
    5db2:	d903      	bls.n	5dbc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5db4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5db8:	3083      	adds	r0, #131	; 0x83
    5dba:	4770      	bx	lr
    5dbc:	2000      	movs	r0, #0
    5dbe:	4770      	bx	lr
    5dc0:	200011da 	.word	0x200011da

00005dc4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5dc4:	4a05      	ldr	r2, [pc, #20]	; (5ddc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5dc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5dca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5dce:	6802      	ldr	r2, [r0, #0]
    5dd0:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5dd4:	8880      	ldrh	r0, [r0, #4]
    5dd6:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5dda:	4770      	bx	lr
    5ddc:	200011da 	.word	0x200011da

00005de0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5de4:	4607      	mov	r7, r0
    5de6:	2400      	movs	r4, #0
    5de8:	4d10      	ldr	r5, [pc, #64]	; (5e2c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    5dea:	e019      	b.n	5e20 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5dec:	4620      	mov	r0, r4
    5dee:	f7ff ffdd 	bl	5dac <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    5df2:	0003      	movs	r3, r0
    5df4:	d012      	beq.n	5e1c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5df6:	1928      	adds	r0, r5, r4
    5df8:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5dfc:	b970      	cbnz	r0, 5e1c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5dfe:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    5e02:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    5e06:	f206 160b 	addw	r6, r6, #267	; 0x10b
    5e0a:	463a      	mov	r2, r7
    5e0c:	4631      	mov	r1, r6
    5e0e:	4618      	mov	r0, r3
    5e10:	f008 f8da 	bl	dfc8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5e14:	4630      	mov	r0, r6
    5e16:	4621      	mov	r1, r4
    5e18:	f7ff ffd4 	bl	5dc4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    5e1c:	1c64      	adds	r4, r4, #1
    5e1e:	b2e4      	uxtb	r4, r4
    5e20:	78a8      	ldrb	r0, [r5, #2]
    5e22:	42a0      	cmp	r0, r4
    5e24:	d8e2      	bhi.n	5dec <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    5e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e2a:	0000      	.short	0x0000
    5e2c:	200011da 	.word	0x200011da

00005e30 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e34:	460e      	mov	r6, r1
    5e36:	4607      	mov	r7, r0
    5e38:	4615      	mov	r5, r2
    5e3a:	2106      	movs	r1, #6
    5e3c:	4630      	mov	r0, r6
    5e3e:	f008 fb93 	bl	e568 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5e42:	4c0d      	ldr	r4, [pc, #52]	; (5e78 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5e44:	b160      	cbz	r0, 5e60 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    5e46:	2000      	movs	r0, #0
    5e48:	e004      	b.n	5e54 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5e4a:	1821      	adds	r1, r4, r0
    5e4c:	1c40      	adds	r0, r0, #1
    5e4e:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5e52:	b2c0      	uxtb	r0, r0
    5e54:	78a1      	ldrb	r1, [r4, #2]
    5e56:	4281      	cmp	r1, r0
    5e58:	d8f7      	bhi.n	5e4a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5e5a:	2001      	movs	r0, #1
    5e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e60:	4631      	mov	r1, r6
    5e62:	4638      	mov	r0, r7
    5e64:	f008 f93c 	bl	e0e0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5e68:	2808      	cmp	r0, #8
    5e6a:	d003      	beq.n	5e74 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5e6c:	4420      	add	r0, r4
    5e6e:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5e72:	e7f2      	b.n	5e5a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5e74:	2000      	movs	r0, #0
    5e76:	e7f1      	b.n	5e5c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5e78:	200011da 	.word	0x200011da

00005e7c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5e7c:	4904      	ldr	r1, [pc, #16]	; (5e90 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5e7e:	788a      	ldrb	r2, [r1, #2]
    5e80:	4282      	cmp	r2, r0
    5e82:	d903      	bls.n	5e8c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5e84:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5e88:	1cc0      	adds	r0, r0, #3
    5e8a:	4770      	bx	lr
    5e8c:	2000      	movs	r0, #0
    5e8e:	4770      	bx	lr
    5e90:	200011da 	.word	0x200011da

00005e94 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    5e94:	4908      	ldr	r1, [pc, #32]	; (5eb8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    5e96:	788a      	ldrb	r2, [r1, #2]
    5e98:	4282      	cmp	r2, r0
    5e9a:	d903      	bls.n	5ea4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    5e9c:	180a      	adds	r2, r1, r0
    5e9e:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    5ea2:	b10a      	cbz	r2, 5ea8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    5ea4:	2000      	movs	r0, #0
    5ea6:	4770      	bx	lr
    5ea8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5eac:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5eb0:	f200 100b 	addw	r0, r0, #267	; 0x10b
    5eb4:	4770      	bx	lr
    5eb6:	0000      	.short	0x0000
    5eb8:	200011da 	.word	0x200011da

00005ebc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5ebc:	b510      	push	{r4, lr}
    5ebe:	f240 12d3 	movw	r2, #467	; 0x1d3
    5ec2:	2100      	movs	r1, #0
    5ec4:	4808      	ldr	r0, [pc, #32]	; (5ee8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5ec6:	f006 ffdb 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5eca:	2208      	movs	r2, #8
    5ecc:	21ff      	movs	r1, #255	; 0xff
    5ece:	4807      	ldr	r0, [pc, #28]	; (5eec <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5ed0:	f006 ffd6 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5ed4:	4805      	ldr	r0, [pc, #20]	; (5eec <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5ed6:	2100      	movs	r1, #0
    5ed8:	1f00      	subs	r0, r0, #4
    5eda:	7001      	strb	r1, [r0, #0]
    5edc:	7041      	strb	r1, [r0, #1]
    5ede:	f44f 7161 	mov.w	r1, #900	; 0x384
    5ee2:	8041      	strh	r1, [r0, #2]
    5ee4:	bd10      	pop	{r4, pc}
    5ee6:	0000      	.short	0x0000
    5ee8:	200011da 	.word	0x200011da
    5eec:	20000274 	.word	0x20000274

00005ef0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5ef0:	4901      	ldr	r1, [pc, #4]	; (5ef8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5ef2:	7008      	strb	r0, [r1, #0]
    5ef4:	4770      	bx	lr
    5ef6:	0000      	.short	0x0000
    5ef8:	20000270 	.word	0x20000270

00005efc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5efc:	4801      	ldr	r0, [pc, #4]	; (5f04 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5efe:	7800      	ldrb	r0, [r0, #0]
    5f00:	4770      	bx	lr
    5f02:	0000      	.short	0x0000
    5f04:	20000270 	.word	0x20000270

00005f08 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5f08:	4b0b      	ldr	r3, [pc, #44]	; (5f38 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5f0a:	b510      	push	{r4, lr}
    5f0c:	789c      	ldrb	r4, [r3, #2]
    5f0e:	4284      	cmp	r4, r0
    5f10:	d90f      	bls.n	5f32 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5f12:	4418      	add	r0, r3
    5f14:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5f18:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5f1c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5f20:	700b      	strb	r3, [r1, #0]
    5f22:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5f26:	6011      	str	r1, [r2, #0]
    5f28:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5f2c:	8090      	strh	r0, [r2, #4]
    5f2e:	2001      	movs	r0, #1
    5f30:	bd10      	pop	{r4, pc}
    5f32:	2000      	movs	r0, #0
    5f34:	bd10      	pop	{r4, pc}
    5f36:	0000      	.short	0x0000
    5f38:	200011da 	.word	0x200011da

00005f3c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5f3c:	4907      	ldr	r1, [pc, #28]	; (5f5c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5f3e:	788a      	ldrb	r2, [r1, #2]
    5f40:	4282      	cmp	r2, r0
    5f42:	d909      	bls.n	5f58 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5f44:	4408      	add	r0, r1
    5f46:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5f4a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5f4e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5f52:	f000 0001 	and.w	r0, r0, #1
    5f56:	4770      	bx	lr
    5f58:	2000      	movs	r0, #0
    5f5a:	4770      	bx	lr
    5f5c:	200011da 	.word	0x200011da

00005f60 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f64:	4698      	mov	r8, r3
    5f66:	4691      	mov	r9, r2
    5f68:	460c      	mov	r4, r1
    5f6a:	4605      	mov	r5, r0
    5f6c:	f000 f962 	bl	6234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5f70:	4606      	mov	r6, r0
    5f72:	2810      	cmp	r0, #16
    5f74:	d006      	beq.n	5f84 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5f76:	f000 f92d 	bl	61d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f7a:	2810      	cmp	r0, #16
    5f7c:	d002      	beq.n	5f84 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5f7e:	2012      	movs	r0, #18
    5f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f84:	4f18      	ldr	r7, [pc, #96]	; (5fe8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5f86:	78b8      	ldrb	r0, [r7, #2]
    5f88:	2808      	cmp	r0, #8
    5f8a:	d22a      	bcs.n	5fe2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5f8c:	2e10      	cmp	r6, #16
    5f8e:	d105      	bne.n	5f9c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5f90:	2200      	movs	r2, #0
    5f92:	4621      	mov	r1, r4
    5f94:	4628      	mov	r0, r5
    5f96:	f000 f931 	bl	61fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5f9a:	4606      	mov	r6, r0
    5f9c:	78bc      	ldrb	r4, [r7, #2]
    5f9e:	2210      	movs	r2, #16
    5fa0:	1c60      	adds	r0, r4, #1
    5fa2:	70b8      	strb	r0, [r7, #2]
    5fa4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5fa8:	1ce8      	adds	r0, r5, #3
    5faa:	4649      	mov	r1, r9
    5fac:	f008 fa7f 	bl	e4ae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5fb0:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5fb4:	2210      	movs	r2, #16
    5fb6:	4641      	mov	r1, r8
    5fb8:	f008 fa79 	bl	e4ae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5fbc:	2110      	movs	r1, #16
    5fbe:	4640      	mov	r0, r8
    5fc0:	f008 fad2 	bl	e568 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5fc4:	443c      	add	r4, r7
    5fc6:	2110      	movs	r1, #16
    5fc8:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5fcc:	4648      	mov	r0, r9
    5fce:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5fd2:	f008 fac9 	bl	e568 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5fd6:	77e0      	strb	r0, [r4, #31]
    5fd8:	f804 6c29 	strb.w	r6, [r4, #-41]
    5fdc:	2000      	movs	r0, #0
    5fde:	73e0      	strb	r0, [r4, #15]
    5fe0:	e7ce      	b.n	5f80 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5fe2:	2007      	movs	r0, #7
    5fe4:	e7cc      	b.n	5f80 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5fe6:	0000      	.short	0x0000
    5fe8:	200011da 	.word	0x200011da

00005fec <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5fec:	4806      	ldr	r0, [pc, #24]	; (6008 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5fee:	b510      	push	{r4, lr}
    5ff0:	7880      	ldrb	r0, [r0, #2]
    5ff2:	1e40      	subs	r0, r0, #1
    5ff4:	b244      	sxtb	r4, r0
    5ff6:	e004      	b.n	6002 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5ff8:	b2e0      	uxtb	r0, r4
    5ffa:	f000 f963 	bl	62c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5ffe:	1e64      	subs	r4, r4, #1
    6000:	b264      	sxtb	r4, r4
    6002:	2c00      	cmp	r4, #0
    6004:	daf8      	bge.n	5ff8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    6006:	bd10      	pop	{r4, pc}
    6008:	200011da 	.word	0x200011da

0000600c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    600c:	4801      	ldr	r0, [pc, #4]	; (6014 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    600e:	8840      	ldrh	r0, [r0, #2]
    6010:	4770      	bx	lr
    6012:	0000      	.short	0x0000
    6014:	20000270 	.word	0x20000270

00006018 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    6018:	b138      	cbz	r0, 602a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    601a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    601e:	4288      	cmp	r0, r1
    6020:	d803      	bhi.n	602a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6022:	4903      	ldr	r1, [pc, #12]	; (6030 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6024:	8048      	strh	r0, [r1, #2]
    6026:	2001      	movs	r0, #1
    6028:	4770      	bx	lr
    602a:	2000      	movs	r0, #0
    602c:	4770      	bx	lr
    602e:	0000      	.short	0x0000
    6030:	20000270 	.word	0x20000270

00006034 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    6034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6038:	4614      	mov	r4, r2
    603a:	2501      	movs	r5, #1
    603c:	2200      	movs	r2, #0
    603e:	461f      	mov	r7, r3
    6040:	462e      	mov	r6, r5
    6042:	7022      	strb	r2, [r4, #0]
    6044:	f000 f8f6 	bl	6234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6048:	2810      	cmp	r0, #16
    604a:	d024      	beq.n	6096 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    604c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 60a4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    6050:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    6054:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6058:	f001 0101 	and.w	r1, r1, #1
    605c:	7021      	strb	r1, [r4, #0]
    605e:	f000 f8b9 	bl	61d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6062:	4604      	mov	r4, r0
    6064:	2810      	cmp	r0, #16
    6066:	d016      	beq.n	6096 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    6068:	b107      	cbz	r7, 606c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    606a:	703c      	strb	r4, [r7, #0]
    606c:	4620      	mov	r0, r4
    606e:	f7ff ff05 	bl	5e7c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6072:	b180      	cbz	r0, 6096 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    6074:	f898 1002 	ldrb.w	r1, [r8, #2]
    6078:	4640      	mov	r0, r8
    607a:	42a1      	cmp	r1, r4
    607c:	d903      	bls.n	6086 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    607e:	1901      	adds	r1, r0, r4
    6080:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    6084:	e000      	b.n	6088 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    6086:	2600      	movs	r6, #0
    6088:	eb08 0004 	add.w	r0, r8, r4
    608c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6090:	2801      	cmp	r0, #1
    6092:	d004      	beq.n	609e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    6094:	2500      	movs	r5, #0
    6096:	ea45 0006 	orr.w	r0, r5, r6
    609a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    609e:	2501      	movs	r5, #1
    60a0:	e7f9      	b.n	6096 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    60a2:	0000      	.short	0x0000
    60a4:	200011da 	.word	0x200011da

000060a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    60a8:	b570      	push	{r4, r5, r6, lr}
    60aa:	460d      	mov	r5, r1
    60ac:	4606      	mov	r6, r0
    60ae:	f000 f8c1 	bl	6234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    60b2:	4c10      	ldr	r4, [pc, #64]	; (60f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    60b4:	2810      	cmp	r0, #16
    60b6:	d007      	beq.n	60c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    60b8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    60bc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    60c0:	07c9      	lsls	r1, r1, #31
    60c2:	d001      	beq.n	60c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    60c4:	2001      	movs	r0, #1
    60c6:	bd70      	pop	{r4, r5, r6, pc}
    60c8:	7861      	ldrb	r1, [r4, #1]
    60ca:	2908      	cmp	r1, #8
    60cc:	d210      	bcs.n	60f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    60ce:	2810      	cmp	r0, #16
    60d0:	d008      	beq.n	60e4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    60d2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    60d6:	2101      	movs	r1, #1
    60d8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    60dc:	7860      	ldrb	r0, [r4, #1]
    60de:	1c40      	adds	r0, r0, #1
    60e0:	7060      	strb	r0, [r4, #1]
    60e2:	e7ef      	b.n	60c4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    60e4:	2201      	movs	r2, #1
    60e6:	4629      	mov	r1, r5
    60e8:	4630      	mov	r0, r6
    60ea:	f000 f887 	bl	61fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    60ee:	e7f5      	b.n	60dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    60f0:	2000      	movs	r0, #0
    60f2:	bd70      	pop	{r4, r5, r6, pc}
    60f4:	200011da 	.word	0x200011da

000060f8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    60f8:	b570      	push	{r4, r5, r6, lr}
    60fa:	4d0b      	ldr	r5, [pc, #44]	; (6128 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    60fc:	7828      	ldrb	r0, [r5, #0]
    60fe:	1e40      	subs	r0, r0, #1
    6100:	b244      	sxtb	r4, r0
    6102:	e00a      	b.n	611a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6104:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6108:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    610c:	07c0      	lsls	r0, r0, #31
    610e:	d002      	beq.n	6116 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6110:	b2e0      	uxtb	r0, r4
    6112:	f000 f91f 	bl	6354 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    6116:	1e64      	subs	r4, r4, #1
    6118:	b264      	sxtb	r4, r4
    611a:	2c00      	cmp	r4, #0
    611c:	daf2      	bge.n	6104 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    611e:	4903      	ldr	r1, [pc, #12]	; (612c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6120:	2000      	movs	r0, #0
    6122:	7048      	strb	r0, [r1, #1]
    6124:	bd70      	pop	{r4, r5, r6, pc}
    6126:	0000      	.short	0x0000
    6128:	200011da 	.word	0x200011da
    612c:	20000270 	.word	0x20000270

00006130 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6134:	2400      	movs	r4, #0
    6136:	4625      	mov	r5, r4
    6138:	4e18      	ldr	r6, [pc, #96]	; (619c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    613a:	e029      	b.n	6190 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    613c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6140:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6144:	07c0      	lsls	r0, r0, #31
    6146:	d021      	beq.n	618c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6148:	4628      	mov	r0, r5
    614a:	f000 f843 	bl	61d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    614e:	4603      	mov	r3, r0
    6150:	f7ff fe94 	bl	5e7c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6154:	4601      	mov	r1, r0
    6156:	2000      	movs	r0, #0
    6158:	2b10      	cmp	r3, #16
    615a:	d009      	beq.n	6170 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    615c:	18f2      	adds	r2, r6, r3
    615e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6162:	f1bc 0f01 	cmp.w	ip, #1
    6166:	d002      	beq.n	616e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6168:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    616c:	b102      	cbz	r2, 6170 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    616e:	2001      	movs	r0, #1
    6170:	1e40      	subs	r0, r0, #1
    6172:	4201      	tst	r1, r0
    6174:	d10a      	bne.n	618c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6176:	480a      	ldr	r0, [pc, #40]	; (61a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6178:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    617c:	5503      	strb	r3, [r0, r4]
    617e:	4620      	mov	r0, r4
    6180:	1c64      	adds	r4, r4, #1
    6182:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6186:	b2e4      	uxtb	r4, r4
    6188:	f006 f9b8 	bl	c4fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    618c:	1c6d      	adds	r5, r5, #1
    618e:	b2ed      	uxtb	r5, r5
    6190:	7830      	ldrb	r0, [r6, #0]
    6192:	42a8      	cmp	r0, r5
    6194:	d8d2      	bhi.n	613c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    619a:	0000      	.short	0x0000
    619c:	200011da 	.word	0x200011da
    61a0:	20000274 	.word	0x20000274
    61a4:	4602      	mov	r2, r0
    61a6:	4809      	ldr	r0, [pc, #36]	; (61cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    61a8:	b510      	push	{r4, lr}
    61aa:	7800      	ldrb	r0, [r0, #0]
    61ac:	460b      	mov	r3, r1
    61ae:	b158      	cbz	r0, 61c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    61b0:	4807      	ldr	r0, [pc, #28]	; (61d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    61b2:	7881      	ldrb	r1, [r0, #2]
    61b4:	b141      	cbz	r1, 61c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    61b6:	b10b      	cbz	r3, 61bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    61b8:	1cc0      	adds	r0, r0, #3
    61ba:	e001      	b.n	61c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    61bc:	4804      	ldr	r0, [pc, #16]	; (61d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    61be:	3083      	adds	r0, #131	; 0x83
    61c0:	f005 fb36 	bl	b830 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    61c4:	2001      	movs	r0, #1
    61c6:	bd10      	pop	{r4, pc}
    61c8:	2000      	movs	r0, #0
    61ca:	bd10      	pop	{r4, pc}
    61cc:	20000270 	.word	0x20000270
    61d0:	200011da 	.word	0x200011da
    61d4:	4908      	ldr	r1, [pc, #32]	; (61f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    61d6:	b510      	push	{r4, lr}
    61d8:	4603      	mov	r3, r0
    61da:	2000      	movs	r0, #0
    61dc:	788a      	ldrb	r2, [r1, #2]
    61de:	e006      	b.n	61ee <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    61e0:	180c      	adds	r4, r1, r0
    61e2:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    61e6:	429c      	cmp	r4, r3
    61e8:	d004      	beq.n	61f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    61ea:	1c40      	adds	r0, r0, #1
    61ec:	b2c0      	uxtb	r0, r0
    61ee:	4282      	cmp	r2, r0
    61f0:	d8f6      	bhi.n	61e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    61f2:	2010      	movs	r0, #16
    61f4:	bd10      	pop	{r4, pc}
    61f6:	0000      	.short	0x0000
    61f8:	200011da 	.word	0x200011da
    61fc:	b570      	push	{r4, r5, r6, lr}
    61fe:	4b0c      	ldr	r3, [pc, #48]	; (6230 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6200:	4604      	mov	r4, r0
    6202:	7818      	ldrb	r0, [r3, #0]
    6204:	1c45      	adds	r5, r0, #1
    6206:	701d      	strb	r5, [r3, #0]
    6208:	2810      	cmp	r0, #16
    620a:	d303      	bcc.n	6214 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    620c:	2146      	movs	r1, #70	; 0x46
    620e:	2028      	movs	r0, #40	; 0x28
    6210:	f7fe f9ac 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6214:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6218:	680d      	ldr	r5, [r1, #0]
    621a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    621e:	8889      	ldrh	r1, [r1, #4]
    6220:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6224:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6228:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    622c:	bd70      	pop	{r4, r5, r6, pc}
    622e:	0000      	.short	0x0000
    6230:	200011da 	.word	0x200011da
    6234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6238:	460f      	mov	r7, r1
    623a:	4606      	mov	r6, r0
    623c:	2400      	movs	r4, #0
    623e:	4d0d      	ldr	r5, [pc, #52]	; (6274 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    6240:	e00f      	b.n	6262 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    6242:	bf00      	nop
    6244:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6248:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    624c:	42b1      	cmp	r1, r6
    624e:	d106      	bne.n	625e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    6250:	2206      	movs	r2, #6
    6252:	4639      	mov	r1, r7
    6254:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6258:	f006 fd86 	bl	cd68 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    625c:	b138      	cbz	r0, 626e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    625e:	1c64      	adds	r4, r4, #1
    6260:	b2e4      	uxtb	r4, r4
    6262:	7828      	ldrb	r0, [r5, #0]
    6264:	42a0      	cmp	r0, r4
    6266:	d8ed      	bhi.n	6244 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    6268:	2010      	movs	r0, #16
    626a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    626e:	4620      	mov	r0, r4
    6270:	e7fb      	b.n	626a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    6272:	0000      	.short	0x0000
    6274:	200011da 	.word	0x200011da
    6278:	b570      	push	{r4, r5, r6, lr}
    627a:	4605      	mov	r5, r0
    627c:	f7ff ffaa 	bl	61d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6280:	2810      	cmp	r0, #16
    6282:	d11c      	bne.n	62be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6284:	4c0e      	ldr	r4, [pc, #56]	; (62c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    6286:	7820      	ldrb	r0, [r4, #0]
    6288:	1e40      	subs	r0, r0, #1
    628a:	b2c0      	uxtb	r0, r0
    628c:	7020      	strb	r0, [r4, #0]
    628e:	42a8      	cmp	r0, r5
    6290:	d015      	beq.n	62be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6292:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6296:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    629a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    629e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    62a2:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    62a6:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    62aa:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    62ae:	7820      	ldrb	r0, [r4, #0]
    62b0:	f7ff ff90 	bl	61d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    62b4:	2810      	cmp	r0, #16
    62b6:	d002      	beq.n	62be <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    62b8:	4420      	add	r0, r4
    62ba:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    62be:	bd70      	pop	{r4, r5, r6, pc}
    62c0:	200011da 	.word	0x200011da
    62c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62c8:	4c21      	ldr	r4, [pc, #132]	; (6350 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    62ca:	4606      	mov	r6, r0
    62cc:	19a7      	adds	r7, r4, r6
    62ce:	78a0      	ldrb	r0, [r4, #2]
    62d0:	1e40      	subs	r0, r0, #1
    62d2:	b2c5      	uxtb	r5, r0
    62d4:	70a5      	strb	r5, [r4, #2]
    62d6:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    62da:	42ae      	cmp	r6, r5
    62dc:	d02a      	beq.n	6334 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    62de:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    62e2:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    62e6:	f10a 0103 	add.w	r1, sl, #3
    62ea:	f109 0003 	add.w	r0, r9, #3
    62ee:	2210      	movs	r2, #16
    62f0:	f006 fd4c 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    62f4:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    62f8:	f109 0083 	add.w	r0, r9, #131	; 0x83
    62fc:	2210      	movs	r2, #16
    62fe:	f006 fd45 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6302:	1960      	adds	r0, r4, r5
    6304:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6308:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    630c:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6310:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6314:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6318:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    631c:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6320:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6324:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6328:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    632c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6330:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6334:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6338:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    633c:	07c0      	lsls	r0, r0, #31
    633e:	d104      	bne.n	634a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6340:	4640      	mov	r0, r8
    6342:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6346:	f7ff bf97 	b.w	6278 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    634e:	0000      	.short	0x0000
    6350:	200011da 	.word	0x200011da
    6354:	4905      	ldr	r1, [pc, #20]	; (636c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    6356:	784a      	ldrb	r2, [r1, #1]
    6358:	1e52      	subs	r2, r2, #1
    635a:	704a      	strb	r2, [r1, #1]
    635c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6360:	2200      	movs	r2, #0
    6362:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6366:	f7ff bf87 	b.w	6278 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    636a:	0000      	.short	0x0000
    636c:	200011da 	.word	0x200011da

00006370 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    6370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6374:	4604      	mov	r4, r0
    6376:	f100 0778 	add.w	r7, r0, #120	; 0x78
    637a:	b171      	cbz	r1, 639a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    637c:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    6380:	1e75      	subs	r5, r6, #1
    6382:	2901      	cmp	r1, #1
    6384:	d016      	beq.n	63b4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    6386:	2902      	cmp	r1, #2
    6388:	d025      	beq.n	63d6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    638a:	2903      	cmp	r1, #3
    638c:	d110      	bne.n	63b0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    638e:	4631      	mov	r1, r6
    6390:	4628      	mov	r0, r5
    6392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6396:	f008 b939 	b.w	e60c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    639a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    639e:	2100      	movs	r1, #0
    63a0:	f006 fd6e 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    63a4:	4638      	mov	r0, r7
    63a6:	f008 f8ee 	bl	e586 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    63aa:	2020      	movs	r0, #32
    63ac:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    63b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63b4:	68e1      	ldr	r1, [r4, #12]
    63b6:	480d      	ldr	r0, [pc, #52]	; (63ec <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    63b8:	460a      	mov	r2, r1
    63ba:	4408      	add	r0, r1
    63bc:	fbb0 f0f1 	udiv	r0, r0, r1
    63c0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    63c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    63c8:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    63cc:	8ae3      	ldrh	r3, [r4, #22]
    63ce:	4638      	mov	r0, r7
    63d0:	f000 f80e 	bl	63f0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    63d4:	e7db      	b.n	638e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    63d6:	68c1      	ldr	r1, [r0, #12]
    63d8:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    63dc:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    63e0:	4638      	mov	r0, r7
    63e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    63e6:	f000 b803 	b.w	63f0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    63ea:	0000      	.short	0x0000
    63ec:	01c9c37f 	.word	0x01c9c37f
    63f0:	b530      	push	{r4, r5, lr}
    63f2:	2400      	movs	r4, #0
    63f4:	86c4      	strh	r4, [r0, #54]	; 0x36
    63f6:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    63f8:	4d13      	ldr	r5, [pc, #76]	; (6448 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    63fa:	434c      	muls	r4, r1
    63fc:	fbb4 f4f2 	udiv	r4, r4, r2
    6400:	8744      	strh	r4, [r0, #58]	; 0x3a
    6402:	f242 7410 	movw	r4, #10000	; 0x2710
    6406:	4363      	muls	r3, r4
    6408:	fbb3 f3f2 	udiv	r3, r3, r2
    640c:	1c5b      	adds	r3, r3, #1
    640e:	b29b      	uxth	r3, r3
    6410:	fb03 f402 	mul.w	r4, r3, r2
    6414:	8703      	strh	r3, [r0, #56]	; 0x38
    6416:	42ac      	cmp	r4, r5
    6418:	d901      	bls.n	641e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    641a:	1e5b      	subs	r3, r3, #1
    641c:	8703      	strh	r3, [r0, #56]	; 0x38
    641e:	4b0b      	ldr	r3, [pc, #44]	; (644c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    6420:	f240 2471 	movw	r4, #625	; 0x271
    6424:	fbb3 f3f2 	udiv	r3, r3, r2
    6428:	1c5b      	adds	r3, r3, #1
    642a:	87c3      	strh	r3, [r0, #62]	; 0x3e
    642c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    642e:	4363      	muls	r3, r4
    6430:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6434:	1e5b      	subs	r3, r3, #1
    6436:	fbb3 f3f2 	udiv	r3, r3, r2
    643a:	62c3      	str	r3, [r0, #44]	; 0x2c
    643c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    643e:	434b      	muls	r3, r1
    6440:	fbb3 f1f2 	udiv	r1, r3, r2
    6444:	6281      	str	r1, [r0, #40]	; 0x28
    6446:	bd30      	pop	{r4, r5, pc}
    6448:	01e84800 	.word	0x01e84800
    644c:	02625a00 	.word	0x02625a00

00006450 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    6450:	4909      	ldr	r1, [pc, #36]	; (6478 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6452:	b508      	push	{r3, lr}
    6454:	7809      	ldrb	r1, [r1, #0]
    6456:	f88d 1000 	strb.w	r1, [sp]
    645a:	9900      	ldr	r1, [sp, #0]
    645c:	9100      	str	r1, [sp, #0]
    645e:	f89d 1000 	ldrb.w	r1, [sp]
    6462:	b109      	cbz	r1, 6468 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    6464:	2000      	movs	r0, #0
    6466:	bd08      	pop	{r3, pc}
    6468:	4903      	ldr	r1, [pc, #12]	; (6478 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    646a:	f8d1 2001 	ldr.w	r2, [r1, #1]
    646e:	6002      	str	r2, [r0, #0]
    6470:	7949      	ldrb	r1, [r1, #5]
    6472:	7101      	strb	r1, [r0, #4]
    6474:	2001      	movs	r0, #1
    6476:	bd08      	pop	{r3, pc}
    6478:	20000297 	.word	0x20000297

0000647c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    647c:	4905      	ldr	r1, [pc, #20]	; (6494 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    647e:	2201      	movs	r2, #1
    6480:	700a      	strb	r2, [r1, #0]
    6482:	460a      	mov	r2, r1
    6484:	6803      	ldr	r3, [r0, #0]
    6486:	f8c2 3001 	str.w	r3, [r2, #1]
    648a:	7900      	ldrb	r0, [r0, #4]
    648c:	7150      	strb	r0, [r2, #5]
    648e:	2000      	movs	r0, #0
    6490:	7008      	strb	r0, [r1, #0]
    6492:	4770      	bx	lr
    6494:	20000297 	.word	0x20000297

00006498 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6498:	b570      	push	{r4, r5, r6, lr}
    649a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    649e:	b28b      	uxth	r3, r1
    64a0:	7ac5      	ldrb	r5, [r0, #11]
    64a2:	ea83 0102 	eor.w	r1, r3, r2
    64a6:	2200      	movs	r2, #0
    64a8:	b2cc      	uxtb	r4, r1
    64aa:	0a09      	lsrs	r1, r1, #8
    64ac:	fa94 f4a4 	rbit	r4, r4
    64b0:	fa91 f1a1 	rbit	r1, r1
    64b4:	0e24      	lsrs	r4, r4, #24
    64b6:	0e09      	lsrs	r1, r1, #24
    64b8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    64bc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    64c0:	1c52      	adds	r2, r2, #1
    64c2:	4419      	add	r1, r3
    64c4:	b2d2      	uxtb	r2, r2
    64c6:	b289      	uxth	r1, r1
    64c8:	2a03      	cmp	r2, #3
    64ca:	d3ed      	bcc.n	64a8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    64cc:	4059      	eors	r1, r3
    64ce:	2225      	movs	r2, #37	; 0x25
    64d0:	fbb1 f3f2 	udiv	r3, r1, r2
    64d4:	fb02 1213 	mls	r2, r2, r3, r1
    64d8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    64dc:	f002 0607 	and.w	r6, r2, #7
    64e0:	785b      	ldrb	r3, [r3, #1]
    64e2:	2401      	movs	r4, #1
    64e4:	fa04 f606 	lsl.w	r6, r4, r6
    64e8:	4233      	tst	r3, r6
    64ea:	d001      	beq.n	64f0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    64ec:	4610      	mov	r0, r2
    64ee:	bd70      	pop	{r4, r5, r6, pc}
    64f0:	434d      	muls	r5, r1
    64f2:	0c29      	lsrs	r1, r5, #16
    64f4:	1c49      	adds	r1, r1, #1
    64f6:	b2c9      	uxtb	r1, r1
    64f8:	2200      	movs	r2, #0
    64fa:	1885      	adds	r5, r0, r2
    64fc:	79ab      	ldrb	r3, [r5, #6]
    64fe:	428b      	cmp	r3, r1
    6500:	d312      	bcc.n	6528 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6502:	f895 5001 	ldrb.w	r5, [r5, #1]
    6506:	2300      	movs	r3, #0
    6508:	fa04 f603 	lsl.w	r6, r4, r3
    650c:	4235      	tst	r5, r6
    650e:	d001      	beq.n	6514 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6510:	1e49      	subs	r1, r1, #1
    6512:	b2c9      	uxtb	r1, r1
    6514:	b121      	cbz	r1, 6520 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6516:	1c5b      	adds	r3, r3, #1
    6518:	b2db      	uxtb	r3, r3
    651a:	2b08      	cmp	r3, #8
    651c:	d3f4      	bcc.n	6508 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    651e:	e005      	b.n	652c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6520:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6524:	b2c0      	uxtb	r0, r0
    6526:	bd70      	pop	{r4, r5, r6, pc}
    6528:	1ac9      	subs	r1, r1, r3
    652a:	b2c9      	uxtb	r1, r1
    652c:	1c52      	adds	r2, r2, #1
    652e:	b2d2      	uxtb	r2, r2
    6530:	2a05      	cmp	r2, #5
    6532:	d3e2      	bcc.n	64fa <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6534:	f240 110d 	movw	r1, #269	; 0x10d
    6538:	2046      	movs	r0, #70	; 0x46
    653a:	f7fe f817 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    653e:	0000      	movs	r0, r0
    6540:	b570      	push	{r4, r5, r6, lr}
    6542:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6546:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    654a:	2401      	movs	r4, #1
    654c:	fb03 2101 	mla	r1, r3, r1, r2
    6550:	2225      	movs	r2, #37	; 0x25
    6552:	fbb1 f3f2 	udiv	r3, r1, r2
    6556:	fb02 1113 	mls	r1, r2, r3, r1
    655a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    655e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6562:	f001 0307 	and.w	r3, r1, #7
    6566:	7d92      	ldrb	r2, [r2, #22]
    6568:	fa04 f303 	lsl.w	r3, r4, r3
    656c:	421a      	tst	r2, r3
    656e:	d003      	beq.n	6578 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6570:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6574:	2000      	movs	r0, #0
    6576:	bd70      	pop	{r4, r5, r6, pc}
    6578:	f890 2020 	ldrb.w	r2, [r0, #32]
    657c:	fbb1 f3f2 	udiv	r3, r1, r2
    6580:	fb02 1113 	mls	r1, r2, r3, r1
    6584:	1c49      	adds	r1, r1, #1
    6586:	b2c9      	uxtb	r1, r1
    6588:	2300      	movs	r3, #0
    658a:	18c5      	adds	r5, r0, r3
    658c:	7eea      	ldrb	r2, [r5, #27]
    658e:	428a      	cmp	r2, r1
    6590:	d311      	bcc.n	65b6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6592:	f895 5016 	ldrb.w	r5, [r5, #22]
    6596:	2200      	movs	r2, #0
    6598:	fa04 f602 	lsl.w	r6, r4, r2
    659c:	4235      	tst	r5, r6
    659e:	d001      	beq.n	65a4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    65a0:	1e49      	subs	r1, r1, #1
    65a2:	b2c9      	uxtb	r1, r1
    65a4:	b121      	cbz	r1, 65b0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    65a6:	1c52      	adds	r2, r2, #1
    65a8:	b2d2      	uxtb	r2, r2
    65aa:	2a08      	cmp	r2, #8
    65ac:	d3f4      	bcc.n	6598 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    65ae:	e004      	b.n	65ba <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    65b0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    65b4:	e7dc      	b.n	6570 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    65b6:	1a89      	subs	r1, r1, r2
    65b8:	b2c9      	uxtb	r1, r1
    65ba:	1c5b      	adds	r3, r3, #1
    65bc:	b2db      	uxtb	r3, r3
    65be:	2b05      	cmp	r3, #5
    65c0:	d3e3      	bcc.n	658a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    65c2:	201f      	movs	r0, #31
    65c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000065c8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    65c8:	7841      	ldrb	r1, [r0, #1]
    65ca:	b141      	cbz	r1, 65de <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    65cc:	78c0      	ldrb	r0, [r0, #3]
    65ce:	2819      	cmp	r0, #25
    65d0:	d203      	bcs.n	65da <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    65d2:	4a04      	ldr	r2, [pc, #16]	; (65e4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    65d4:	5c10      	ldrb	r0, [r2, r0]
    65d6:	4288      	cmp	r0, r1
    65d8:	d101      	bne.n	65de <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    65da:	2001      	movs	r0, #1
    65dc:	4770      	bx	lr
    65de:	2000      	movs	r0, #0
    65e0:	4770      	bx	lr
    65e2:	0000      	.short	0x0000
    65e4:	00010336 	.word	0x00010336

000065e8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    65e8:	b510      	push	{r4, lr}
    65ea:	2201      	movs	r2, #1
    65ec:	70c1      	strb	r1, [r0, #3]
    65ee:	2919      	cmp	r1, #25
    65f0:	d202      	bcs.n	65f8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    65f2:	4a06      	ldr	r2, [pc, #24]	; (660c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    65f4:	5c52      	ldrb	r2, [r2, r1]
    65f6:	e006      	b.n	6606 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    65f8:	29ff      	cmp	r1, #255	; 0xff
    65fa:	d004      	beq.n	6606 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    65fc:	f240 31d5 	movw	r1, #981	; 0x3d5
    6600:	202a      	movs	r0, #42	; 0x2a
    6602:	f7fd ffb3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6606:	7042      	strb	r2, [r0, #1]
    6608:	bd10      	pop	{r4, pc}
    660a:	0000      	.short	0x0000
    660c:	00010336 	.word	0x00010336

00006610 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6614:	4c12      	ldr	r4, [pc, #72]	; (6660 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6616:	4607      	mov	r7, r0
    6618:	460e      	mov	r6, r1
    661a:	7da0      	ldrb	r0, [r4, #22]
    661c:	b110      	cbz	r0, 6624 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    661e:	8b20      	ldrh	r0, [r4, #24]
    6620:	2800      	cmp	r0, #0
    6622:	d012      	beq.n	664a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6624:	480e      	ldr	r0, [pc, #56]	; (6660 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6626:	3014      	adds	r0, #20
    6628:	4680      	mov	r8, r0
    662a:	f008 f920 	bl	e86e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    662e:	b9a8      	cbnz	r0, 665c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6630:	8aa5      	ldrh	r5, [r4, #20]
    6632:	8aa0      	ldrh	r0, [r4, #20]
    6634:	4632      	mov	r2, r6
    6636:	4639      	mov	r1, r7
    6638:	f008 f951 	bl	e8de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    663c:	b138      	cbz	r0, 664e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    663e:	7da0      	ldrb	r0, [r4, #22]
    6640:	b110      	cbz	r0, 6648 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6642:	8b20      	ldrh	r0, [r4, #24]
    6644:	1e40      	subs	r0, r0, #1
    6646:	8320      	strh	r0, [r4, #24]
    6648:	2001      	movs	r0, #1
    664a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    664e:	4640      	mov	r0, r8
    6650:	f008 f90d 	bl	e86e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6654:	b910      	cbnz	r0, 665c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6656:	8aa0      	ldrh	r0, [r4, #20]
    6658:	42a8      	cmp	r0, r5
    665a:	d1ea      	bne.n	6632 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    665c:	2000      	movs	r0, #0
    665e:	e7f4      	b.n	664a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6660:	2000103c 	.word	0x2000103c
    6664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6668:	468a      	mov	sl, r1
    666a:	4699      	mov	r9, r3
    666c:	4615      	mov	r5, r2
    666e:	4604      	mov	r4, r0
    6670:	a901      	add	r1, sp, #4
    6672:	f007 fd96 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6676:	bbd8      	cbnz	r0, 66f0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    6678:	9f02      	ldr	r7, [sp, #8]
    667a:	2001      	movs	r0, #1
    667c:	3778      	adds	r7, #120	; 0x78
    667e:	b18d      	cbz	r5, 66a4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x94>
    6680:	4620      	mov	r0, r4
    6682:	f7fe fb87 	bl	4d94 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6686:	0004      	movs	r4, r0
    6688:	d00e      	beq.n	66a8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x98>
    668a:	4629      	mov	r1, r5
    668c:	f007 fa81 	bl	db92 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6690:	0006      	movs	r6, r0
    6692:	d003      	beq.n	669c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8c>
    6694:	4819      	ldr	r0, [pc, #100]	; (66fc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xec>)
    6696:	8840      	ldrh	r0, [r0, #2]
    6698:	42a8      	cmp	r0, r5
    669a:	d207      	bcs.n	66ac <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    669c:	2000      	movs	r0, #0
    669e:	b004      	add	sp, #16
    66a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66a4:	7538      	strb	r0, [r7, #20]
    66a6:	e023      	b.n	66f0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    66a8:	216e      	movs	r1, #110	; 0x6e
    66aa:	e024      	b.n	66f6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe6>
    66ac:	4620      	mov	r0, r4
    66ae:	4631      	mov	r1, r6
    66b0:	aa03      	add	r2, sp, #12
    66b2:	f007 fa67 	bl	db84 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    66b6:	9803      	ldr	r0, [sp, #12]
    66b8:	f04f 0800 	mov.w	r8, #0
    66bc:	f8a0 8000 	strh.w	r8, [r0]
    66c0:	f880 8002 	strb.w	r8, [r0, #2]
    66c4:	7d39      	ldrb	r1, [r7, #20]
    66c6:	b109      	cbz	r1, 66cc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    66c8:	f04f 0a02 	mov.w	sl, #2
    66cc:	4651      	mov	r1, sl
    66ce:	f008 f848 	bl	e762 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    66d2:	4631      	mov	r1, r6
    66d4:	2603      	movs	r6, #3
    66d6:	4620      	mov	r0, r4
    66d8:	464a      	mov	r2, r9
    66da:	462b      	mov	r3, r5
    66dc:	9600      	str	r6, [sp, #0]
    66de:	f007 f90e 	bl	d8fe <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    66e2:	4620      	mov	r0, r4
    66e4:	4629      	mov	r1, r5
    66e6:	f007 f9e3 	bl	dab0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    66ea:	b118      	cbz	r0, 66f4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    66ec:	f887 8014 	strb.w	r8, [r7, #20]
    66f0:	2001      	movs	r0, #1
    66f2:	e7d4      	b.n	669e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    66f4:	2184      	movs	r1, #132	; 0x84
    66f6:	202b      	movs	r0, #43	; 0x2b
    66f8:	f7fd ff38 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66fc:	2000103c 	.word	0x2000103c

00006700 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6700:	4901      	ldr	r1, [pc, #4]	; (6708 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6702:	2001      	movs	r0, #1
    6704:	7008      	strb	r0, [r1, #0]
    6706:	4770      	bx	lr
    6708:	2000027d 	.word	0x2000027d

0000670c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    670c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6710:	0006      	movs	r6, r0
    6712:	d00a      	beq.n	672a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6714:	4926      	ldr	r1, [pc, #152]	; (67b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    6716:	2201      	movs	r2, #1
    6718:	7808      	ldrb	r0, [r1, #0]
    671a:	b148      	cbz	r0, 6730 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    671c:	2000      	movs	r0, #0
    671e:	7070      	strb	r0, [r6, #1]
    6720:	2303      	movs	r3, #3
    6722:	7033      	strb	r3, [r6, #0]
    6724:	7132      	strb	r2, [r6, #4]
    6726:	7008      	strb	r0, [r1, #0]
    6728:	e03c      	b.n	67a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    672a:	f240 21da 	movw	r1, #730	; 0x2da
    672e:	e009      	b.n	6744 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    6730:	4c1f      	ldr	r4, [pc, #124]	; (67b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    6732:	1ce4      	adds	r4, r4, #3
    6734:	7820      	ldrb	r0, [r4, #0]
    6736:	b940      	cbnz	r0, 674a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6738:	1ca0      	adds	r0, r4, #2
    673a:	f008 f919 	bl	e970 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    673e:	b120      	cbz	r0, 674a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6740:	f240 21e9 	movw	r1, #745	; 0x2e9
    6744:	2010      	movs	r0, #16
    6746:	f7fd ff11 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    674a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    674e:	2000      	movs	r0, #0
    6750:	f7fe f8f0 	bl	4934 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6754:	4f17      	ldr	r7, [pc, #92]	; (67b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    6756:	f8df 9060 	ldr.w	r9, [pc, #96]	; 67b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    675a:	4605      	mov	r5, r0
    675c:	6838      	ldr	r0, [r7, #0]
    675e:	b130      	cbz	r0, 676e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    6760:	8860      	ldrh	r0, [r4, #2]
    6762:	42a8      	cmp	r0, r5
    6764:	d103      	bne.n	676e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    6766:	4630      	mov	r0, r6
    6768:	f000 f9d2 	bl	6b10 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    676c:	e006      	b.n	677c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
    676e:	f8d9 0000 	ldr.w	r0, [r9]
    6772:	b120      	cbz	r0, 677e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
    6774:	8860      	ldrh	r0, [r4, #2]
    6776:	4631      	mov	r1, r6
    6778:	f000 f920 	bl	69bc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
    677c:	b990      	cbnz	r0, 67a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    677e:	1ca0      	adds	r0, r4, #2
    6780:	f008 f8f6 	bl	e970 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6784:	b910      	cbnz	r0, 678c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    6786:	8861      	ldrh	r1, [r4, #2]
    6788:	4541      	cmp	r1, r8
    678a:	d1e7      	bne.n	675c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
    678c:	480b      	ldr	r0, [pc, #44]	; (67bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
    678e:	6801      	ldr	r1, [r0, #0]
    6790:	b111      	cbz	r1, 6798 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    6792:	4630      	mov	r0, r6
    6794:	4788      	blx	r1
    6796:	b928      	cbnz	r0, 67a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    6798:	4809      	ldr	r0, [pc, #36]	; (67c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
    679a:	6801      	ldr	r1, [r0, #0]
    679c:	b129      	cbz	r1, 67aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    679e:	4630      	mov	r0, r6
    67a0:	4788      	blx	r1
    67a2:	b110      	cbz	r0, 67aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    67a4:	2001      	movs	r0, #1
    67a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67aa:	2000      	movs	r0, #0
    67ac:	e7fb      	b.n	67a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    67ae:	0000      	.short	0x0000
    67b0:	2000027d 	.word	0x2000027d
    67b4:	200000f4 	.word	0x200000f4
    67b8:	200000f0 	.word	0x200000f0
    67bc:	200000f8 	.word	0x200000f8
    67c0:	200000ec 	.word	0x200000ec

000067c4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    67c4:	4901      	ldr	r1, [pc, #4]	; (67cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    67c6:	7008      	strb	r0, [r1, #0]
    67c8:	f000 b996 	b.w	6af8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    67cc:	2000027c 	.word	0x2000027c

000067d0 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>:
    67d0:	4902      	ldr	r1, [pc, #8]	; (67dc <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA+0xc>)
    67d2:	2001      	movs	r0, #1
    67d4:	7048      	strb	r0, [r1, #1]
    67d6:	f000 b809 	b.w	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    67da:	0000      	.short	0x0000
    67dc:	2000027d 	.word	0x2000027d

000067e0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>:
    67e0:	4801      	ldr	r0, [pc, #4]	; (67e8 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x8>)
    67e2:	7840      	ldrb	r0, [r0, #1]
    67e4:	4770      	bx	lr
    67e6:	0000      	.short	0x0000
    67e8:	2000027d 	.word	0x2000027d

000067ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    67ec:	4801      	ldr	r0, [pc, #4]	; (67f4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    67ee:	7800      	ldrb	r0, [r0, #0]
    67f0:	f7fd bcac 	b.w	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    67f4:	2000027c 	.word	0x2000027c

000067f8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    67f8:	4904      	ldr	r1, [pc, #16]	; (680c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14>)
    67fa:	4803      	ldr	r0, [pc, #12]	; (6808 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x10>)
    67fc:	6008      	str	r0, [r1, #0]
    67fe:	4905      	ldr	r1, [pc, #20]	; (6814 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c>)
    6800:	4803      	ldr	r0, [pc, #12]	; (6810 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x18>)
    6802:	6008      	str	r0, [r1, #0]
    6804:	4770      	bx	lr
    6806:	0000      	.short	0x0000
    6808:	00009089 	.word	0x00009089
    680c:	200000f0 	.word	0x200000f0
    6810:	00005295 	.word	0x00005295
    6814:	200000f8 	.word	0x200000f8

00006818 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    6818:	4902      	ldr	r1, [pc, #8]	; (6824 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    681a:	4801      	ldr	r0, [pc, #4]	; (6820 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    681c:	6008      	str	r0, [r1, #0]
    681e:	4770      	bx	lr
    6820:	00006d7d 	.word	0x00006d7d
    6824:	200000f4 	.word	0x200000f4
    6828:	b570      	push	{r4, r5, r6, lr}
    682a:	4604      	mov	r4, r0
    682c:	7800      	ldrb	r0, [r0, #0]
    682e:	2805      	cmp	r0, #5
    6830:	d001      	beq.n	6836 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    6832:	216d      	movs	r1, #109	; 0x6d
    6834:	e056      	b.n	68e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6836:	7ba0      	ldrb	r0, [r4, #14]
    6838:	06c0      	lsls	r0, r0, #27
    683a:	d401      	bmi.n	6840 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    683c:	216e      	movs	r1, #110	; 0x6e
    683e:	e051      	b.n	68e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6840:	221c      	movs	r2, #28
    6842:	1d21      	adds	r1, r4, #4
    6844:	482d      	ldr	r0, [pc, #180]	; (68fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6846:	f006 faa1 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    684a:	482c      	ldr	r0, [pc, #176]	; (68fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    684c:	7b22      	ldrb	r2, [r4, #12]
    684e:	f104 0120 	add.w	r1, r4, #32
    6852:	301c      	adds	r0, #28
    6854:	f006 fa9a 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6858:	4828      	ldr	r0, [pc, #160]	; (68fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    685a:	f04f 0201 	mov.w	r2, #1
    685e:	7a81      	ldrb	r1, [r0, #10]
    6860:	0749      	lsls	r1, r1, #29
    6862:	d502      	bpl.n	686a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    6864:	7cc1      	ldrb	r1, [r0, #19]
    6866:	29fe      	cmp	r1, #254	; 0xfe
    6868:	d00c      	beq.n	6884 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    686a:	2304      	movs	r3, #4
    686c:	7023      	strb	r3, [r4, #0]
    686e:	6801      	ldr	r1, [r0, #0]
    6870:	6061      	str	r1, [r4, #4]
    6872:	6841      	ldr	r1, [r0, #4]
    6874:	60a1      	str	r1, [r4, #8]
    6876:	8901      	ldrh	r1, [r0, #8]
    6878:	81a1      	strh	r1, [r4, #12]
    687a:	7a81      	ldrb	r1, [r0, #10]
    687c:	070d      	lsls	r5, r1, #28
    687e:	d519      	bpl.n	68b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    6880:	73a3      	strb	r3, [r4, #14]
    6882:	e02b      	b.n	68dc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    6884:	2113      	movs	r1, #19
    6886:	7021      	strb	r1, [r4, #0]
    6888:	7801      	ldrb	r1, [r0, #0]
    688a:	7121      	strb	r1, [r4, #4]
    688c:	7162      	strb	r2, [r4, #5]
    688e:	7841      	ldrb	r1, [r0, #1]
    6890:	71a1      	strb	r1, [r4, #6]
    6892:	f8d0 1002 	ldr.w	r1, [r0, #2]
    6896:	f8c4 1007 	str.w	r1, [r4, #7]
    689a:	88c1      	ldrh	r1, [r0, #6]
    689c:	f8a4 100b 	strh.w	r1, [r4, #11]
    68a0:	21fe      	movs	r1, #254	; 0xfe
    68a2:	7361      	strb	r1, [r4, #13]
    68a4:	6941      	ldr	r1, [r0, #20]
    68a6:	f8c4 100e 	str.w	r1, [r4, #14]
    68aa:	8b01      	ldrh	r1, [r0, #24]
    68ac:	8261      	strh	r1, [r4, #18]
    68ae:	7a40      	ldrb	r0, [r0, #9]
    68b0:	7520      	strb	r0, [r4, #20]
    68b2:	bd70      	pop	{r4, r5, r6, pc}
    68b4:	07cb      	lsls	r3, r1, #31
    68b6:	d003      	beq.n	68c0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    68b8:	078b      	lsls	r3, r1, #30
    68ba:	d501      	bpl.n	68c0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    68bc:	2100      	movs	r1, #0
    68be:	e00c      	b.n	68da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    68c0:	074b      	lsls	r3, r1, #29
    68c2:	d501      	bpl.n	68c8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    68c4:	73a2      	strb	r2, [r4, #14]
    68c6:	e009      	b.n	68dc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    68c8:	07ca      	lsls	r2, r1, #31
    68ca:	d001      	beq.n	68d0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
    68cc:	21b5      	movs	r1, #181	; 0xb5
    68ce:	e009      	b.n	68e4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    68d0:	0789      	lsls	r1, r1, #30
    68d2:	d501      	bpl.n	68d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
    68d4:	2102      	movs	r1, #2
    68d6:	e000      	b.n	68da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    68d8:	2103      	movs	r1, #3
    68da:	73a1      	strb	r1, [r4, #14]
    68dc:	7a02      	ldrb	r2, [r0, #8]
    68de:	2a1f      	cmp	r2, #31
    68e0:	d903      	bls.n	68ea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    68e2:	21b8      	movs	r1, #184	; 0xb8
    68e4:	2010      	movs	r0, #16
    68e6:	f7fd fe41 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68ea:	f104 000f 	add.w	r0, r4, #15
    68ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    68f2:	4902      	ldr	r1, [pc, #8]	; (68fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    68f4:	311c      	adds	r1, #28
    68f6:	f006 ba49 	b.w	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    68fa:	0000      	.short	0x0000
    68fc:	20001058 	.word	0x20001058
    6900:	b510      	push	{r4, lr}
    6902:	492d      	ldr	r1, [pc, #180]	; (69b8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
    6904:	b086      	sub	sp, #24
    6906:	7c8a      	ldrb	r2, [r1, #18]
    6908:	7801      	ldrb	r1, [r0, #0]
    690a:	07d3      	lsls	r3, r2, #31
    690c:	d101      	bne.n	6912 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
    690e:	291d      	cmp	r1, #29
    6910:	d004      	beq.n	691c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
    6912:	291c      	cmp	r1, #28
    6914:	d01f      	beq.n	6956 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
    6916:	2915      	cmp	r1, #21
    6918:	d046      	beq.n	69a8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    691a:	e04a      	b.n	69b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    691c:	8880      	ldrh	r0, [r0, #4]
    691e:	f8ad 0000 	strh.w	r0, [sp]
    6922:	a902      	add	r1, sp, #8
    6924:	f007 fc3d 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6928:	b110      	cbz	r0, 6930 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
    692a:	f44f 71c4 	mov.w	r1, #392	; 0x188
    692e:	e035      	b.n	699c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6930:	9803      	ldr	r0, [sp, #12]
    6932:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6936:	f88d 1002 	strb.w	r1, [sp, #2]
    693a:	7841      	ldrb	r1, [r0, #1]
    693c:	f88d 1003 	strb.w	r1, [sp, #3]
    6940:	8840      	ldrh	r0, [r0, #2]
    6942:	f8ad 0004 	strh.w	r0, [sp, #4]
    6946:	2102      	movs	r1, #2
    6948:	4668      	mov	r0, sp
    694a:	f004 fd45 	bl	b3d8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    694e:	b340      	cbz	r0, 69a2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6950:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    6954:	e022      	b.n	699c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6956:	0791      	lsls	r1, r2, #30
    6958:	d42b      	bmi.n	69b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    695a:	8884      	ldrh	r4, [r0, #4]
    695c:	a903      	add	r1, sp, #12
    695e:	4620      	mov	r0, r4
    6960:	f008 ff8e 	bl	f880 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6964:	b110      	cbz	r0, 696c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    6966:	f240 11a5 	movw	r1, #421	; 0x1a5
    696a:	e017      	b.n	699c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    696c:	f8ad 4000 	strh.w	r4, [sp]
    6970:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6974:	f8ad 0002 	strh.w	r0, [sp, #2]
    6978:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    697c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6980:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6984:	f8ad 0006 	strh.w	r0, [sp, #6]
    6988:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    698c:	f8ad 0008 	strh.w	r0, [sp, #8]
    6990:	4668      	mov	r0, sp
    6992:	f008 ffa0 	bl	f8d6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6996:	b120      	cbz	r0, 69a2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6998:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    699c:	2010      	movs	r0, #16
    699e:	f7fd fde5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69a2:	2001      	movs	r0, #1
    69a4:	b006      	add	sp, #24
    69a6:	bd10      	pop	{r4, pc}
    69a8:	0751      	lsls	r1, r2, #29
    69aa:	d402      	bmi.n	69b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    69ac:	7b80      	ldrb	r0, [r0, #14]
    69ae:	07c0      	lsls	r0, r0, #31
    69b0:	d0f7      	beq.n	69a2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    69b2:	2000      	movs	r0, #0
    69b4:	e7f6      	b.n	69a4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
    69b6:	0000      	.short	0x0000
    69b8:	2000103c 	.word	0x2000103c
    69bc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69c0:	b087      	sub	sp, #28
    69c2:	460c      	mov	r4, r1
    69c4:	a902      	add	r1, sp, #8
    69c6:	9807      	ldr	r0, [sp, #28]
    69c8:	f007 fbeb 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    69cc:	2800      	cmp	r0, #0
    69ce:	d17d      	bne.n	6acc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    69d0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6af4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
    69d4:	f04f 0801 	mov.w	r8, #1
    69d8:	4682      	mov	sl, r0
    69da:	9803      	ldr	r0, [sp, #12]
    69dc:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    69e0:	2800      	cmp	r0, #0
    69e2:	d00c      	beq.n	69fe <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    69e4:	f8d9 2000 	ldr.w	r2, [r9]
    69e8:	b162      	cbz	r2, 6a04 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    69ea:	4621      	mov	r1, r4
    69ec:	9807      	ldr	r0, [sp, #28]
    69ee:	4790      	blx	r2
    69f0:	b140      	cbz	r0, 6a04 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    69f2:	4620      	mov	r0, r4
    69f4:	f7ff ff84 	bl	6900 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
    69f8:	2800      	cmp	r0, #0
    69fa:	d1ee      	bne.n	69da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
    69fc:	2001      	movs	r0, #1
    69fe:	b009      	add	sp, #36	; 0x24
    6a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a04:	9d03      	ldr	r5, [sp, #12]
    6a06:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    6a0a:	3578      	adds	r5, #120	; 0x78
    6a0c:	b950      	cbnz	r0, 6a24 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6a0e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6a12:	f88d 0004 	strb.w	r0, [sp, #4]
    6a16:	9801      	ldr	r0, [sp, #4]
    6a18:	9001      	str	r0, [sp, #4]
    6a1a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6a1e:	b108      	cbz	r0, 6a24 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6a20:	2001      	movs	r0, #1
    6a22:	e000      	b.n	6a26 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
    6a24:	2000      	movs	r0, #0
    6a26:	4683      	mov	fp, r0
    6a28:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    6a2c:	b1c0      	cbz	r0, 6a60 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    6a2e:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    6a32:	0780      	lsls	r0, r0, #30
    6a34:	d514      	bpl.n	6a60 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    6a36:	f884 a001 	strb.w	sl, [r4, #1]
    6a3a:	f884 8000 	strb.w	r8, [r4]
    6a3e:	f884 a004 	strb.w	sl, [r4, #4]
    6a42:	9907      	ldr	r1, [sp, #28]
    6a44:	f8a4 1005 	strh.w	r1, [r4, #5]
    6a48:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    6a4c:	71e1      	strb	r1, [r4, #7]
    6a4e:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6a52:	8121      	strh	r1, [r4, #8]
    6a54:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    6a58:	8161      	strh	r1, [r4, #10]
    6a5a:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    6a5e:	e7c8      	b.n	69f2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6a60:	9807      	ldr	r0, [sp, #28]
    6a62:	f7fe f997 	bl	4d94 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6a66:	0007      	movs	r7, r0
    6a68:	d00d      	beq.n	6a86 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    6a6a:	f007 f845 	bl	daf8 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6a6e:	0006      	movs	r6, r0
    6a70:	d015      	beq.n	6a9e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
    6a72:	f884 a001 	strb.w	sl, [r4, #1]
    6a76:	200f      	movs	r0, #15
    6a78:	7020      	strb	r0, [r4, #0]
    6a7a:	9807      	ldr	r0, [sp, #28]
    6a7c:	80e0      	strh	r0, [r4, #6]
    6a7e:	8126      	strh	r6, [r4, #8]
    6a80:	f884 8004 	strb.w	r8, [r4, #4]
    6a84:	e007      	b.n	6a96 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
    6a86:	f240 2133 	movw	r1, #563	; 0x233
    6a8a:	e02d      	b.n	6ae8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
    6a8c:	2100      	movs	r1, #0
    6a8e:	4638      	mov	r0, r7
    6a90:	460a      	mov	r2, r1
    6a92:	f007 f955 	bl	dd40 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6a96:	1e76      	subs	r6, r6, #1
    6a98:	b2b6      	uxth	r6, r6
    6a9a:	d2f7      	bcs.n	6a8c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
    6a9c:	e7a9      	b.n	69f2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6a9e:	9807      	ldr	r0, [sp, #28]
    6aa0:	f7fe f962 	bl	4d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6aa4:	b1f0      	cbz	r0, 6ae4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
    6aa6:	f1bb 0f00 	cmp.w	fp, #0
    6aaa:	d020      	beq.n	6aee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6aac:	f006 ff3e 	bl	d92c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6ab0:	b160      	cbz	r0, 6acc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    6ab2:	9807      	ldr	r0, [sp, #28]
    6ab4:	f007 fa73 	bl	df9e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6ab8:	2100      	movs	r1, #0
    6aba:	9807      	ldr	r0, [sp, #28]
    6abc:	f7fd ffd4 	bl	4a68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6ac0:	f884 a001 	strb.w	sl, [r4, #1]
    6ac4:	210c      	movs	r1, #12
    6ac6:	4650      	mov	r0, sl
    6ac8:	7021      	strb	r1, [r4, #0]
    6aca:	e000      	b.n	6ace <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
    6acc:	e00f      	b.n	6aee <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6ace:	f884 a004 	strb.w	sl, [r4, #4]
    6ad2:	9907      	ldr	r1, [sp, #28]
    6ad4:	f8a4 1005 	strh.w	r1, [r4, #5]
    6ad8:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6adc:	71e1      	strb	r1, [r4, #7]
    6ade:	3524      	adds	r5, #36	; 0x24
    6ae0:	7028      	strb	r0, [r5, #0]
    6ae2:	e786      	b.n	69f2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6ae4:	f240 2151 	movw	r1, #593	; 0x251
    6ae8:	2010      	movs	r0, #16
    6aea:	f7fd fd3f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6aee:	2000      	movs	r0, #0
    6af0:	e785      	b.n	69fe <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    6af2:	0000      	.short	0x0000
    6af4:	200000f0 	.word	0x200000f0
    6af8:	4804      	ldr	r0, [pc, #16]	; (6b0c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    6afa:	2100      	movs	r1, #0
    6afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6b00:	7001      	strb	r1, [r0, #0]
    6b02:	8042      	strh	r2, [r0, #2]
    6b04:	1f00      	subs	r0, r0, #4
    6b06:	f8a0 1001 	strh.w	r1, [r0, #1]
    6b0a:	4770      	bx	lr
    6b0c:	20000280 	.word	0x20000280
    6b10:	b570      	push	{r4, r5, r6, lr}
    6b12:	4604      	mov	r4, r0
    6b14:	481b      	ldr	r0, [pc, #108]	; (6b84 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
    6b16:	6801      	ldr	r1, [r0, #0]
    6b18:	b319      	cbz	r1, 6b62 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    6b1a:	4620      	mov	r0, r4
    6b1c:	4788      	blx	r1
    6b1e:	b300      	cbz	r0, 6b62 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    6b20:	7820      	ldrb	r0, [r4, #0]
    6b22:	2818      	cmp	r0, #24
    6b24:	d002      	beq.n	6b2c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
    6b26:	2805      	cmp	r0, #5
    6b28:	d016      	beq.n	6b58 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
    6b2a:	e018      	b.n	6b5e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6b2c:	7920      	ldrb	r0, [r4, #4]
    6b2e:	2801      	cmp	r0, #1
    6b30:	d115      	bne.n	6b5e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6b32:	88e0      	ldrh	r0, [r4, #6]
    6b34:	2100      	movs	r1, #0
    6b36:	f007 f9ca 	bl	dece <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6b3a:	0004      	movs	r4, r0
    6b3c:	d00f      	beq.n	6b5e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6b3e:	8820      	ldrh	r0, [r4, #0]
    6b40:	f007 fa2d 	bl	df9e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6b44:	8820      	ldrh	r0, [r4, #0]
    6b46:	2100      	movs	r1, #0
    6b48:	f7fd ff8e 	bl	4a68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6b4c:	b138      	cbz	r0, 6b5e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6b4e:	f44f 7185 	mov.w	r1, #266	; 0x10a
    6b52:	2010      	movs	r0, #16
    6b54:	f7fd fd0a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b58:	4620      	mov	r0, r4
    6b5a:	f7ff fe65 	bl	6828 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    6b5e:	2001      	movs	r0, #1
    6b60:	bd70      	pop	{r4, r5, r6, pc}
    6b62:	4d09      	ldr	r5, [pc, #36]	; (6b88 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
    6b64:	7868      	ldrb	r0, [r5, #1]
    6b66:	2800      	cmp	r0, #0
    6b68:	d0fa      	beq.n	6b60 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
    6b6a:	2600      	movs	r6, #0
    6b6c:	7066      	strb	r6, [r4, #1]
    6b6e:	2014      	movs	r0, #20
    6b70:	7020      	strb	r0, [r4, #0]
    6b72:	2220      	movs	r2, #32
    6b74:	4631      	mov	r1, r6
    6b76:	1d20      	adds	r0, r4, #4
    6b78:	f006 f982 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b7c:	2002      	movs	r0, #2
    6b7e:	7120      	strb	r0, [r4, #4]
    6b80:	706e      	strb	r6, [r5, #1]
    6b82:	e7ec      	b.n	6b5e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6b84:	200000f4 	.word	0x200000f4
    6b88:	2000027d 	.word	0x2000027d

00006b8c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    6b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b8e:	f06f 021f 	mvn.w	r2, #31
    6b92:	0c01      	lsrs	r1, r0, #16
    6b94:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6b98:	251f      	movs	r5, #31
    6b9a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6b9e:	3854      	subs	r0, #84	; 0x54
    6ba0:	d00d      	beq.n	6bbe <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6ba2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6ba6:	3855      	subs	r0, #85	; 0x55
    6ba8:	d009      	beq.n	6bbe <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6baa:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6bae:	38aa      	subs	r0, #170	; 0xaa
    6bb0:	d005      	beq.n	6bbe <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6bb2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6bb6:	38aa      	subs	r0, #170	; 0xaa
    6bb8:	d001      	beq.n	6bbe <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6bba:	2001      	movs	r0, #1
    6bbc:	e000      	b.n	6bc0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    6bbe:	2000      	movs	r0, #0
    6bc0:	2200      	movs	r2, #0
    6bc2:	4613      	mov	r3, r2
    6bc4:	ea4f 0402 	mov.w	r4, r2
    6bc8:	ea82 0701 	eor.w	r7, r2, r1
    6bcc:	43ff      	mvns	r7, r7
    6bce:	431f      	orrs	r7, r3
    6bd0:	1c7f      	adds	r7, r7, #1
    6bd2:	d00f      	beq.n	6bf4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6bd4:	f006 0701 	and.w	r7, r6, #1
    6bd8:	0852      	lsrs	r2, r2, #1
    6bda:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6bde:	f005 0701 	and.w	r7, r5, #1
    6be2:	085b      	lsrs	r3, r3, #1
    6be4:	0876      	lsrs	r6, r6, #1
    6be6:	086d      	lsrs	r5, r5, #1
    6be8:	1c64      	adds	r4, r4, #1
    6bea:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6bee:	2c16      	cmp	r4, #22
    6bf0:	d3ea      	bcc.n	6bc8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bf4:	2000      	movs	r0, #0
    6bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006bf8 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    6bf8:	4801      	ldr	r0, [pc, #4]	; (6c00 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    6bfa:	f008 b846 	b.w	ec8a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    6bfe:	0000      	.short	0x0000
    6c00:	200000fc 	.word	0x200000fc

00006c04 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    6c04:	b510      	push	{r4, lr}
    6c06:	4604      	mov	r4, r0
    6c08:	f008 f82e 	bl	ec68 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6c0c:	b310      	cbz	r0, 6c54 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6c0e:	43e0      	mvns	r0, r4
    6c10:	f008 f82a 	bl	ec68 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6c14:	b1f0      	cbz	r0, 6c54 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6c16:	16a0      	asrs	r0, r4, #26
    6c18:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    6c1c:	1e41      	subs	r1, r0, #1
    6c1e:	4208      	tst	r0, r1
    6c20:	d018      	beq.n	6c54 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6c22:	ea84 0064 	eor.w	r0, r4, r4, asr #1
    6c26:	f007 fae5 	bl	e1f4 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>
    6c2a:	2818      	cmp	r0, #24
    6c2c:	d812      	bhi.n	6c54 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6c2e:	b2a0      	uxth	r0, r4
    6c30:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    6c34:	d107      	bne.n	6c46 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x42>
    6c36:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    6c3a:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    6c3e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    6c42:	4281      	cmp	r1, r0
    6c44:	d006      	beq.n	6c54 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6c46:	4804      	ldr	r0, [pc, #16]	; (6c58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    6c48:	4044      	eors	r4, r0
    6c4a:	1e60      	subs	r0, r4, #1
    6c4c:	4204      	tst	r4, r0
    6c4e:	d001      	beq.n	6c54 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6c50:	2001      	movs	r0, #1
    6c52:	bd10      	pop	{r4, pc}
    6c54:	2000      	movs	r0, #0
    6c56:	bd10      	pop	{r4, pc}
    6c58:	8e89bed6 	.word	0x8e89bed6
    6c5c:	4801      	ldr	r0, [pc, #4]	; (6c64 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x60>)
    6c5e:	f000 b803 	b.w	6c68 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    6c62:	0000      	.short	0x0000
    6c64:	200000fc 	.word	0x200000fc

00006c68 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    6c68:	b510      	push	{r4, lr}
    6c6a:	e9d0 2100 	ldrd	r2, r1, [r0]
    6c6e:	4b09      	ldr	r3, [pc, #36]	; (6c94 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    6c70:	4c09      	ldr	r4, [pc, #36]	; (6c98 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    6c72:	4353      	muls	r3, r2
    6c74:	4354      	muls	r4, r2
    6c76:	4051      	eors	r1, r2
    6c78:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    6c7c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6c80:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6c84:	e9c0 2100 	strd	r2, r1, [r0]
    6c88:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    6c8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6c90:	4618      	mov	r0, r3
    6c92:	bd10      	pop	{r4, pc}
    6c94:	c6ef3760 	.word	0xc6ef3760
    6c98:	9e3779bb 	.word	0x9e3779bb

00006c9c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    6c9c:	4801      	ldr	r0, [pc, #4]	; (6ca4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    6c9e:	6840      	ldr	r0, [r0, #4]
    6ca0:	3080      	adds	r0, #128	; 0x80
    6ca2:	4770      	bx	lr
    6ca4:	20000104 	.word	0x20000104

00006ca8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    6ca8:	b510      	push	{r4, lr}
    6caa:	4c1f      	ldr	r4, [pc, #124]	; (6d28 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    6cac:	6860      	ldr	r0, [r4, #4]
    6cae:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6cb2:	f008 f80b 	bl	eccc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6cb6:	6861      	ldr	r1, [r4, #4]
    6cb8:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    6cbc:	3132      	adds	r1, #50	; 0x32
    6cbe:	f7fe faa7 	bl	5210 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6cc2:	6860      	ldr	r0, [r4, #4]
    6cc4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6cc8:	f008 f807 	bl	ecda <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    6ccc:	6861      	ldr	r1, [r4, #4]
    6cce:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    6cd2:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    6cd6:	3132      	adds	r1, #50	; 0x32
    6cd8:	f007 ffe4 	bl	eca4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6cdc:	b930      	cbnz	r0, 6cec <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    6cde:	6861      	ldr	r1, [r4, #4]
    6ce0:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    6ce4:	3132      	adds	r1, #50	; 0x32
    6ce6:	f007 ffe6 	bl	ecb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6cea:	b108      	cbz	r0, 6cf0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    6cec:	2101      	movs	r1, #1
    6cee:	e000      	b.n	6cf2 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6cf0:	2100      	movs	r1, #0
    6cf2:	6860      	ldr	r0, [r4, #4]
    6cf4:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    6cf8:	b919      	cbnz	r1, 6d02 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    6cfa:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    6cfe:	2900      	cmp	r1, #0
    6d00:	d010      	beq.n	6d24 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    6d02:	2100      	movs	r1, #0
    6d04:	6781      	str	r1, [r0, #120]	; 0x78
    6d06:	f005 fecc 	bl	caa2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6d0a:	6861      	ldr	r1, [r4, #4]
    6d0c:	6448      	str	r0, [r1, #68]	; 0x44
    6d0e:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    6d12:	b110      	cbz	r0, 6d1a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    6d14:	2000      	movs	r0, #0
    6d16:	f7ff f863 	bl	5de0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    6d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d1e:	2000      	movs	r0, #0
    6d20:	f000 bdfa 	b.w	7918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x874>
    6d24:	bd10      	pop	{r4, pc}
    6d26:	0000      	.short	0x0000
    6d28:	20000104 	.word	0x20000104

00006d2c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    6d2c:	b510      	push	{r4, lr}
    6d2e:	4c09      	ldr	r4, [pc, #36]	; (6d54 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    6d30:	2803      	cmp	r0, #3
    6d32:	6864      	ldr	r4, [r4, #4]
    6d34:	d109      	bne.n	6d4a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    6d36:	63e1      	str	r1, [r4, #60]	; 0x3c
    6d38:	b13b      	cbz	r3, 6d4a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    6d3a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    6d3e:	6819      	ldr	r1, [r3, #0]
    6d40:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    6d44:	8899      	ldrh	r1, [r3, #4]
    6d46:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    6d4a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6d4e:	2000      	movs	r0, #0
    6d50:	bd10      	pop	{r4, pc}
    6d52:	0000      	.short	0x0000
    6d54:	20000104 	.word	0x20000104

00006d58 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    6d58:	4807      	ldr	r0, [pc, #28]	; (6d78 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    6d5a:	b508      	push	{r3, lr}
    6d5c:	6840      	ldr	r0, [r0, #4]
    6d5e:	7801      	ldrb	r1, [r0, #0]
    6d60:	f88d 1000 	strb.w	r1, [sp]
    6d64:	9900      	ldr	r1, [sp, #0]
    6d66:	9100      	str	r1, [sp, #0]
    6d68:	f89d 1000 	ldrb.w	r1, [sp]
    6d6c:	b109      	cbz	r1, 6d72 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    6d6e:	8880      	ldrh	r0, [r0, #4]
    6d70:	bd08      	pop	{r3, pc}
    6d72:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6d76:	bd08      	pop	{r3, pc}
    6d78:	20000104 	.word	0x20000104

00006d7c <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    6d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d7e:	4604      	mov	r4, r0
    6d80:	f007 fff3 	bl	ed6a <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    6d84:	bb48      	cbnz	r0, 6dda <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6d86:	4e17      	ldr	r6, [pc, #92]	; (6de4 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    6d88:	6870      	ldr	r0, [r6, #4]
    6d8a:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    6d8e:	f88d 1000 	strb.w	r1, [sp]
    6d92:	9900      	ldr	r1, [sp, #0]
    6d94:	9100      	str	r1, [sp, #0]
    6d96:	f89d 1000 	ldrb.w	r1, [sp]
    6d9a:	2500      	movs	r5, #0
    6d9c:	b139      	cbz	r1, 6dae <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    6d9e:	7065      	strb	r5, [r4, #1]
    6da0:	2107      	movs	r1, #7
    6da2:	7021      	strb	r1, [r4, #0]
    6da4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6da6:	6061      	str	r1, [r4, #4]
    6da8:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    6dac:	e015      	b.n	6dda <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6dae:	4620      	mov	r0, r4
    6db0:	f000 f9d0 	bl	7154 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    6db4:	b988      	cbnz	r0, 6dda <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6db6:	6870      	ldr	r0, [r6, #4]
    6db8:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    6dbc:	f88d 1000 	strb.w	r1, [sp]
    6dc0:	9900      	ldr	r1, [sp, #0]
    6dc2:	9100      	str	r1, [sp, #0]
    6dc4:	f89d 1000 	ldrb.w	r1, [sp]
    6dc8:	b149      	cbz	r1, 6dde <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    6dca:	7065      	strb	r5, [r4, #1]
    6dcc:	2118      	movs	r1, #24
    6dce:	7021      	strb	r1, [r4, #0]
    6dd0:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    6dd4:	6061      	str	r1, [r4, #4]
    6dd6:	300a      	adds	r0, #10
    6dd8:	7785      	strb	r5, [r0, #30]
    6dda:	2001      	movs	r0, #1
    6ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6dde:	2000      	movs	r0, #0
    6de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6de2:	0000      	.short	0x0000
    6de4:	20000104 	.word	0x20000104

00006de8 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    6de8:	4902      	ldr	r1, [pc, #8]	; (6df4 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    6dea:	6849      	ldr	r1, [r1, #4]
    6dec:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    6df0:	2000      	movs	r0, #0
    6df2:	4770      	bx	lr
    6df4:	20000104 	.word	0x20000104

00006df8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    6df8:	4809      	ldr	r0, [pc, #36]	; (6e20 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    6dfa:	6841      	ldr	r1, [r0, #4]
    6dfc:	6d48      	ldr	r0, [r1, #84]	; 0x54
    6dfe:	b168      	cbz	r0, 6e1c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    6e00:	f101 0059 	add.w	r0, r1, #89	; 0x59
    6e04:	2201      	movs	r2, #1
    6e06:	7002      	strb	r2, [r0, #0]
    6e08:	2300      	movs	r3, #0
    6e0a:	654b      	str	r3, [r1, #84]	; 0x54
    6e0c:	7003      	strb	r3, [r0, #0]
    6e0e:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    6e12:	4082      	lsls	r2, r0
    6e14:	4803      	ldr	r0, [pc, #12]	; (6e24 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    6e16:	6002      	str	r2, [r0, #0]
    6e18:	2000      	movs	r0, #0
    6e1a:	4770      	bx	lr
    6e1c:	200c      	movs	r0, #12
    6e1e:	4770      	bx	lr
    6e20:	20000104 	.word	0x20000104
    6e24:	4001f508 	.word	0x4001f508

00006e28 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    6e28:	4909      	ldr	r1, [pc, #36]	; (6e50 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    6e2a:	b510      	push	{r4, lr}
    6e2c:	6088      	str	r0, [r1, #8]
    6e2e:	68c8      	ldr	r0, [r1, #12]
    6e30:	b150      	cbz	r0, 6e48 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    6e32:	f000 ff73 	bl	7d1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    6e36:	f000 f885 	bl	6f44 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    6e3a:	2800      	cmp	r0, #0
    6e3c:	d007      	beq.n	6e4e <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    6e3e:	f640 01f9 	movw	r1, #2297	; 0x8f9
    6e42:	2032      	movs	r0, #50	; 0x32
    6e44:	f7fd fb92 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e48:	f640 01f5 	movw	r1, #2293	; 0x8f5
    6e4c:	e7f9      	b.n	6e42 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    6e4e:	bd10      	pop	{r4, pc}
    6e50:	20000104 	.word	0x20000104

00006e54 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    6e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e58:	4c0f      	ldr	r4, [pc, #60]	; (6e98 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    6e5a:	4605      	mov	r5, r0
    6e5c:	4616      	mov	r6, r2
    6e5e:	6860      	ldr	r0, [r4, #4]
    6e60:	460f      	mov	r7, r1
    6e62:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6e66:	f007 ff38 	bl	ecda <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    6e6a:	b158      	cbz	r0, 6e84 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6e6c:	b955      	cbnz	r5, 6e84 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6e6e:	4638      	mov	r0, r7
    6e70:	f007 ff2c 	bl	eccc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6e74:	4631      	mov	r1, r6
    6e76:	f007 f933 	bl	e0e0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6e7a:	2808      	cmp	r0, #8
    6e7c:	d002      	beq.n	6e84 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    6e7e:	2001      	movs	r0, #1
    6e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e84:	6860      	ldr	r0, [r4, #4]
    6e86:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6e8a:	f007 ff1f 	bl	eccc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e92:	f7fe b9e9 	b.w	5268 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    6e96:	0000      	.short	0x0000
    6e98:	20000104 	.word	0x20000104

00006e9c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    6e9c:	b570      	push	{r4, r5, r6, lr}
    6e9e:	4c13      	ldr	r4, [pc, #76]	; (6eec <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    6ea0:	4615      	mov	r5, r2
    6ea2:	460e      	mov	r6, r1
    6ea4:	2800      	cmp	r0, #0
    6ea6:	d016      	beq.n	6ed6 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    6ea8:	f04f 0200 	mov.w	r2, #0
    6eac:	6861      	ldr	r1, [r4, #4]
    6eae:	f801 2f39 	strb.w	r2, [r1, #57]!
    6eb2:	7248      	strb	r0, [r1, #9]
    6eb4:	f04f 0008 	mov.w	r0, #8
    6eb8:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    6ebc:	d114      	bne.n	6ee8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6ebe:	4630      	mov	r0, r6
    6ec0:	f007 ff04 	bl	eccc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6ec4:	4629      	mov	r1, r5
    6ec6:	f007 f90b 	bl	e0e0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6eca:	6861      	ldr	r1, [r4, #4]
    6ecc:	2808      	cmp	r0, #8
    6ece:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    6ed2:	d003      	beq.n	6edc <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    6ed4:	e008      	b.n	6ee8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6ed6:	f04f 0201 	mov.w	r2, #1
    6eda:	e7e7      	b.n	6eac <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    6edc:	4630      	mov	r0, r6
    6ede:	f007 fefc 	bl	ecda <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    6ee2:	b108      	cbz	r0, 6ee8 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6ee4:	2012      	movs	r0, #18
    6ee6:	bd70      	pop	{r4, r5, r6, pc}
    6ee8:	2000      	movs	r0, #0
    6eea:	bd70      	pop	{r4, r5, r6, pc}
    6eec:	20000104 	.word	0x20000104

00006ef0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    6ef0:	4902      	ldr	r1, [pc, #8]	; (6efc <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    6ef2:	4801      	ldr	r0, [pc, #4]	; (6ef8 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    6ef4:	60c8      	str	r0, [r1, #12]
    6ef6:	4770      	bx	lr
    6ef8:	00007f64 	.word	0x00007f64
    6efc:	20000104 	.word	0x20000104

00006f00 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    6f00:	4902      	ldr	r1, [pc, #8]	; (6f0c <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    6f02:	6849      	ldr	r1, [r1, #4]
    6f04:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6f08:	4770      	bx	lr
    6f0a:	0000      	.short	0x0000
    6f0c:	20000104 	.word	0x20000104

00006f10 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    6f10:	b570      	push	{r4, r5, r6, lr}
    6f12:	4605      	mov	r5, r0
    6f14:	f7fd ff56 	bl	4dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    6f18:	4604      	mov	r4, r0
    6f1a:	f7fd ff59 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    6f1e:	4621      	mov	r1, r4
    6f20:	f007 ff21 	bl	ed66 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    6f24:	0001      	movs	r1, r0
    6f26:	d006      	beq.n	6f36 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    6f28:	4805      	ldr	r0, [pc, #20]	; (6f40 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    6f2a:	68c0      	ldr	r0, [r0, #12]
    6f2c:	6802      	ldr	r2, [r0, #0]
    6f2e:	4628      	mov	r0, r5
    6f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f34:	4710      	bx	r2
    6f36:	f640 11f2 	movw	r1, #2546	; 0x9f2
    6f3a:	2032      	movs	r0, #50	; 0x32
    6f3c:	f7fd fb16 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f40:	20000104 	.word	0x20000104

00006f44 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    6f44:	b570      	push	{r4, r5, r6, lr}
    6f46:	4d19      	ldr	r5, [pc, #100]	; (6fac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    6f48:	6868      	ldr	r0, [r5, #4]
    6f4a:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    6f4e:	2901      	cmp	r1, #1
    6f50:	d004      	beq.n	6f5c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6f52:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    6f56:	b108      	cbz	r0, 6f5c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6f58:	200c      	movs	r0, #12
    6f5a:	bd70      	pop	{r4, r5, r6, pc}
    6f5c:	f7fd ff5c 	bl	4e18 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    6f60:	f007 ff67 	bl	ee32 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    6f64:	6868      	ldr	r0, [r5, #4]
    6f66:	2400      	movs	r4, #0
    6f68:	7004      	strb	r4, [r0, #0]
    6f6a:	f100 0122 	add.w	r1, r0, #34	; 0x22
    6f6e:	700c      	strb	r4, [r1, #0]
    6f70:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    6f74:	f000 f8b4 	bl	70e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6f78:	6868      	ldr	r0, [r5, #4]
    6f7a:	2201      	movs	r2, #1
    6f7c:	2107      	movs	r1, #7
    6f7e:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    6f82:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    6f86:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    6f8a:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    6f8e:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    6f92:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    6f96:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    6f9a:	f100 0159 	add.w	r1, r0, #89	; 0x59
    6f9e:	700a      	strb	r2, [r1, #0]
    6fa0:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    6fa4:	6544      	str	r4, [r0, #84]	; 0x54
    6fa6:	700c      	strb	r4, [r1, #0]
    6fa8:	2000      	movs	r0, #0
    6faa:	bd70      	pop	{r4, r5, r6, pc}
    6fac:	20000104 	.word	0x20000104

00006fb0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    6fb0:	4805      	ldr	r0, [pc, #20]	; (6fc8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    6fb2:	b510      	push	{r4, lr}
    6fb4:	6840      	ldr	r0, [r0, #4]
    6fb6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6fba:	f007 fe87 	bl	eccc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6fc2:	f7fe b951 	b.w	5268 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    6fc6:	0000      	.short	0x0000
    6fc8:	20000104 	.word	0x20000104

00006fcc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    6fcc:	b140      	cbz	r0, 6fe0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6fce:	2802      	cmp	r0, #2
    6fd0:	d006      	beq.n	6fe0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6fd2:	2200      	movs	r2, #0
    6fd4:	4903      	ldr	r1, [pc, #12]	; (6fe4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    6fd6:	6849      	ldr	r1, [r1, #4]
    6fd8:	f801 2f39 	strb.w	r2, [r1, #57]!
    6fdc:	7208      	strb	r0, [r1, #8]
    6fde:	4770      	bx	lr
    6fe0:	2201      	movs	r2, #1
    6fe2:	e7f7      	b.n	6fd4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    6fe4:	20000104 	.word	0x20000104

00006fe8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    6fe8:	4902      	ldr	r1, [pc, #8]	; (6ff4 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    6fea:	6849      	ldr	r1, [r1, #4]
    6fec:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6ff0:	4770      	bx	lr
    6ff2:	0000      	.short	0x0000
    6ff4:	20000104 	.word	0x20000104

00006ff8 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    6ff8:	b510      	push	{r4, lr}
    6ffa:	4604      	mov	r4, r0
    6ffc:	7800      	ldrb	r0, [r0, #0]
    6ffe:	07c0      	lsls	r0, r0, #31
    7000:	d007      	beq.n	7012 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    7002:	2300      	movs	r3, #0
    7004:	7860      	ldrb	r0, [r4, #1]
    7006:	461a      	mov	r2, r3
    7008:	4619      	mov	r1, r3
    700a:	f7ff fe8f 	bl	6d2c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    700e:	2800      	cmp	r0, #0
    7010:	d10c      	bne.n	702c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    7012:	4b07      	ldr	r3, [pc, #28]	; (7030 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    7014:	78a0      	ldrb	r0, [r4, #2]
    7016:	6859      	ldr	r1, [r3, #4]
    7018:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    701c:	78e0      	ldrb	r0, [r4, #3]
    701e:	f7ff ffd5 	bl	6fcc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    7022:	6859      	ldr	r1, [r3, #4]
    7024:	7920      	ldrb	r0, [r4, #4]
    7026:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    702a:	2000      	movs	r0, #0
    702c:	bd10      	pop	{r4, pc}
    702e:	0000      	.short	0x0000
    7030:	20000104 	.word	0x20000104

00007034 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    7034:	4801      	ldr	r0, [pc, #4]	; (703c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    7036:	68c0      	ldr	r0, [r0, #12]
    7038:	6840      	ldr	r0, [r0, #4]
    703a:	4700      	bx	r0
    703c:	20000104 	.word	0x20000104

00007040 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    7040:	b510      	push	{r4, lr}
    7042:	2000      	movs	r0, #0
    7044:	f000 fc8e 	bl	7964 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    7048:	f000 f84a 	bl	70e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    704c:	f000 fe66 	bl	7d1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    7050:	4803      	ldr	r0, [pc, #12]	; (7060 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    7052:	6840      	ldr	r0, [r0, #4]
    7054:	2100      	movs	r1, #0
    7056:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    705a:	4608      	mov	r0, r1
    705c:	bd10      	pop	{r4, pc}
    705e:	0000      	.short	0x0000
    7060:	20000104 	.word	0x20000104

00007064 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    7064:	b510      	push	{r4, lr}
    7066:	f000 f941 	bl	72ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    706a:	4909      	ldr	r1, [pc, #36]	; (7090 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    706c:	2201      	movs	r2, #1
    706e:	b130      	cbz	r0, 707e <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    7070:	6848      	ldr	r0, [r1, #4]
    7072:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    7076:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    7078:	881b      	ldrh	r3, [r3, #0]
    707a:	8583      	strh	r3, [r0, #44]	; 0x2c
    707c:	e004      	b.n	7088 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    707e:	684b      	ldr	r3, [r1, #4]
    7080:	2000      	movs	r0, #0
    7082:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    7086:	8598      	strh	r0, [r3, #44]	; 0x2c
    7088:	6848      	ldr	r0, [r1, #4]
    708a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    708e:	bd10      	pop	{r4, pc}
    7090:	20000104 	.word	0x20000104

00007094 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    7094:	4802      	ldr	r0, [pc, #8]	; (70a0 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    7096:	6840      	ldr	r0, [r0, #4]
    7098:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    709c:	4770      	bx	lr
    709e:	0000      	.short	0x0000
    70a0:	20000104 	.word	0x20000104

000070a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    70a4:	b510      	push	{r4, lr}
    70a6:	f000 f921 	bl	72ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    70aa:	490c      	ldr	r1, [pc, #48]	; (70dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    70ac:	b128      	cbz	r0, 70ba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    70ae:	6848      	ldr	r0, [r1, #4]
    70b0:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    70b4:	2801      	cmp	r0, #1
    70b6:	d00e      	beq.n	70d6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    70b8:	e00c      	b.n	70d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    70ba:	6849      	ldr	r1, [r1, #4]
    70bc:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    70c0:	2801      	cmp	r0, #1
    70c2:	d001      	beq.n	70c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    70c4:	2802      	cmp	r0, #2
    70c6:	d105      	bne.n	70d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    70c8:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    70cc:	2801      	cmp	r0, #1
    70ce:	d003      	beq.n	70d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    70d0:	2803      	cmp	r0, #3
    70d2:	d001      	beq.n	70d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    70d4:	2000      	movs	r0, #0
    70d6:	bd10      	pop	{r4, pc}
    70d8:	2001      	movs	r0, #1
    70da:	bd10      	pop	{r4, pc}
    70dc:	20000104 	.word	0x20000104
    70e0:	b510      	push	{r4, lr}
    70e2:	4c07      	ldr	r4, [pc, #28]	; (7100 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    70e4:	6860      	ldr	r0, [r4, #4]
    70e6:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    70ea:	2800      	cmp	r0, #0
    70ec:	d007      	beq.n	70fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    70ee:	f004 fdd3 	bl	bc98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    70f2:	f004 fbb5 	bl	b860 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    70f6:	6861      	ldr	r1, [r4, #4]
    70f8:	2000      	movs	r0, #0
    70fa:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    70fe:	bd10      	pop	{r4, pc}
    7100:	20000104 	.word	0x20000104
    7104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7108:	4d10      	ldr	r5, [pc, #64]	; (714c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    710a:	4606      	mov	r6, r0
    710c:	460f      	mov	r7, r1
    710e:	6868      	ldr	r0, [r5, #4]
    7110:	490f      	ldr	r1, [pc, #60]	; (7150 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    7112:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    7116:	5c0c      	ldrb	r4, [r1, r0]
    7118:	4620      	mov	r0, r4
    711a:	f005 f931 	bl	c380 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    711e:	6868      	ldr	r0, [r5, #4]
    7120:	2101      	movs	r1, #1
    7122:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    7126:	2025      	movs	r0, #37	; 0x25
    7128:	f009 f86b 	bl	10202 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    712c:	4638      	mov	r0, r7
    712e:	f005 f831 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7132:	f04f 0101 	mov.w	r1, #1
    7136:	4608      	mov	r0, r1
    7138:	b126      	cbz	r6, 7144 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    713a:	f004 fe63 	bl	be04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    713e:	b918      	cbnz	r0, 7148 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    7140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7144:	f004 fe12 	bl	bd6c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7148:	2001      	movs	r0, #1
    714a:	e7f9      	b.n	7140 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    714c:	20000104 	.word	0x20000104
    7150:	00010352 	.word	0x00010352
    7154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7156:	4e20      	ldr	r6, [pc, #128]	; (71d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    7158:	4604      	mov	r4, r0
    715a:	6870      	ldr	r0, [r6, #4]
    715c:	7801      	ldrb	r1, [r0, #0]
    715e:	f88d 1000 	strb.w	r1, [sp]
    7162:	9900      	ldr	r1, [sp, #0]
    7164:	9100      	str	r1, [sp, #0]
    7166:	f89d 1000 	ldrb.w	r1, [sp]
    716a:	b389      	cbz	r1, 71d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    716c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    716e:	6882      	ldr	r2, [r0, #8]
    7170:	f841 2f03 	str.w	r2, [r1, #3]!
    7174:	8982      	ldrh	r2, [r0, #12]
    7176:	808a      	strh	r2, [r1, #4]
    7178:	79c0      	ldrb	r0, [r0, #7]
    717a:	f007 fda7 	bl	eccc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    717e:	6871      	ldr	r1, [r6, #4]
    7180:	2500      	movs	r5, #0
    7182:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    7184:	1c89      	adds	r1, r1, #2
    7186:	7090      	strb	r0, [r2, #2]
    7188:	7065      	strb	r5, [r4, #1]
    718a:	2014      	movs	r0, #20
    718c:	7020      	strb	r0, [r4, #0]
    718e:	2220      	movs	r2, #32
    7190:	1d20      	adds	r0, r4, #4
    7192:	f005 fdfb 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7196:	4a11      	ldr	r2, [pc, #68]	; (71dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    7198:	7225      	strb	r5, [r4, #8]
    719a:	2301      	movs	r3, #1
    719c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    719e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    71a2:	6871      	ldr	r1, [r6, #4]
    71a4:	700d      	strb	r5, [r1, #0]
    71a6:	f101 0028 	add.w	r0, r1, #40	; 0x28
    71aa:	7005      	strb	r5, [r0, #0]
    71ac:	88e0      	ldrh	r0, [r4, #6]
    71ae:	8490      	strh	r0, [r2, #36]	; 0x24
    71b0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    71b2:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    71b6:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    71ba:	4610      	mov	r0, r2
    71bc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    71c0:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    71c2:	8800      	ldrh	r0, [r0, #0]
    71c4:	f7fd fdd0 	bl	4d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    71c8:	f006 fd6c 	bl	dca4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    71cc:	2001      	movs	r0, #1
    71ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71d0:	e7ff      	b.n	71d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    71d2:	2000      	movs	r0, #0
    71d4:	e7fb      	b.n	71ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    71d6:	0000      	.short	0x0000
    71d8:	20000104 	.word	0x20000104
    71dc:	20001094 	.word	0x20001094
    71e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71e2:	2600      	movs	r6, #0
    71e4:	460f      	mov	r7, r1
    71e6:	4605      	mov	r5, r0
    71e8:	f88d 6000 	strb.w	r6, [sp]
    71ec:	466b      	mov	r3, sp
    71ee:	f000 f89d 	bl	732c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    71f2:	0001      	movs	r1, r0
    71f4:	4810      	ldr	r0, [pc, #64]	; (7238 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
    71f6:	d003      	beq.n	7200 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
    71f8:	6840      	ldr	r0, [r0, #4]
    71fa:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
    71fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7200:	6840      	ldr	r0, [r0, #4]
    7202:	f89d 1000 	ldrb.w	r1, [sp]
    7206:	2f07      	cmp	r7, #7
    7208:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    720c:	d301      	bcc.n	7212 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    720e:	4634      	mov	r4, r6
    7210:	e002      	b.n	7218 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    7212:	0022      	movs	r2, r4
    7214:	d100      	bne.n	7218 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    7216:	460c      	mov	r4, r1
    7218:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
    721c:	6869      	ldr	r1, [r5, #4]
    721e:	2900      	cmp	r1, #0
    7220:	d0ed      	beq.n	71fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
    7222:	7c69      	ldrb	r1, [r5, #17]
    7224:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    7228:	6869      	ldr	r1, [r5, #4]
    722a:	680a      	ldr	r2, [r1, #0]
    722c:	f840 2f6e 	str.w	r2, [r0, #110]!
    7230:	8889      	ldrh	r1, [r1, #4]
    7232:	8081      	strh	r1, [r0, #4]
    7234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7236:	0000      	.short	0x0000
    7238:	20000104 	.word	0x20000104
    723c:	b510      	push	{r4, lr}
    723e:	4915      	ldr	r1, [pc, #84]	; (7294 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
    7240:	6842      	ldr	r2, [r0, #4]
    7242:	6849      	ldr	r1, [r1, #4]
    7244:	7813      	ldrb	r3, [r2, #0]
    7246:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    724a:	42a3      	cmp	r3, r4
    724c:	d11f      	bne.n	728e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    724e:	7853      	ldrb	r3, [r2, #1]
    7250:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    7254:	42a3      	cmp	r3, r4
    7256:	d11a      	bne.n	728e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7258:	7893      	ldrb	r3, [r2, #2]
    725a:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    725e:	42a3      	cmp	r3, r4
    7260:	d115      	bne.n	728e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7262:	78d3      	ldrb	r3, [r2, #3]
    7264:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    7268:	42a3      	cmp	r3, r4
    726a:	d110      	bne.n	728e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    726c:	7913      	ldrb	r3, [r2, #4]
    726e:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    7272:	42a3      	cmp	r3, r4
    7274:	d10b      	bne.n	728e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7276:	7952      	ldrb	r2, [r2, #5]
    7278:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    727c:	429a      	cmp	r2, r3
    727e:	d106      	bne.n	728e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7280:	7c40      	ldrb	r0, [r0, #17]
    7282:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    7286:	4288      	cmp	r0, r1
    7288:	d101      	bne.n	728e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    728a:	2001      	movs	r0, #1
    728c:	bd10      	pop	{r4, pc}
    728e:	2000      	movs	r0, #0
    7290:	bd10      	pop	{r4, pc}
    7292:	0000      	.short	0x0000
    7294:	20000104 	.word	0x20000104
    7298:	b530      	push	{r4, r5, lr}
    729a:	7801      	ldrb	r1, [r0, #0]
    729c:	b08b      	sub	sp, #44	; 0x2c
    729e:	f001 040f 	and.w	r4, r1, #15
    72a2:	4622      	mov	r2, r4
    72a4:	a901      	add	r1, sp, #4
    72a6:	f000 fee9 	bl	807c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    72aa:	a801      	add	r0, sp, #4
    72ac:	f7ff ffc6 	bl	723c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
    72b0:	4605      	mov	r5, r0
    72b2:	f004 fd0b 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    72b6:	f000 fb6f 	bl	7998 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    72ba:	2c04      	cmp	r4, #4
    72bc:	d111      	bne.n	72e2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    72be:	b185      	cbz	r5, 72e2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    72c0:	a80a      	add	r0, sp, #40	; 0x28
    72c2:	f000 fb75 	bl	79b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    72c6:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    72ca:	9000      	str	r0, [sp, #0]
    72cc:	4806      	ldr	r0, [pc, #24]	; (72e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
    72ce:	6840      	ldr	r0, [r0, #4]
    72d0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    72d4:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    72d8:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    72dc:	a801      	add	r0, sp, #4
    72de:	f007 fdaa 	bl	ee36 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    72e2:	b00b      	add	sp, #44	; 0x2c
    72e4:	2005      	movs	r0, #5
    72e6:	bd30      	pop	{r4, r5, pc}
    72e8:	20000104 	.word	0x20000104
    72ec:	4804      	ldr	r0, [pc, #16]	; (7300 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
    72ee:	6840      	ldr	r0, [r0, #4]
    72f0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    72f4:	2803      	cmp	r0, #3
    72f6:	d001      	beq.n	72fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    72f8:	2000      	movs	r0, #0
    72fa:	4770      	bx	lr
    72fc:	2001      	movs	r0, #1
    72fe:	4770      	bx	lr
    7300:	20000104 	.word	0x20000104
    7304:	4908      	ldr	r1, [pc, #32]	; (7328 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    7306:	b510      	push	{r4, lr}
    7308:	6849      	ldr	r1, [r1, #4]
    730a:	7c83      	ldrb	r3, [r0, #18]
    730c:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    7310:	429a      	cmp	r2, r3
    7312:	d105      	bne.n	7320 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
    7314:	6880      	ldr	r0, [r0, #8]
    7316:	2206      	movs	r2, #6
    7318:	3132      	adds	r1, #50	; 0x32
    731a:	f005 fd25 	bl	cd68 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    731e:	b108      	cbz	r0, 7324 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    7320:	2000      	movs	r0, #0
    7322:	bd10      	pop	{r4, pc}
    7324:	2001      	movs	r0, #1
    7326:	bd10      	pop	{r4, pc}
    7328:	20000104 	.word	0x20000104
    732c:	b570      	push	{r4, r5, r6, lr}
    732e:	6841      	ldr	r1, [r0, #4]
    7330:	461e      	mov	r6, r3
    7332:	4604      	mov	r4, r0
    7334:	b1c1      	cbz	r1, 7368 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    7336:	7c60      	ldrb	r0, [r4, #17]
    7338:	f007 fcbd 	bl	ecb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    733c:	4d10      	ldr	r5, [pc, #64]	; (7380 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    733e:	6869      	ldr	r1, [r5, #4]
    7340:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    7344:	b141      	cbz	r1, 7358 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    7346:	b138      	cbz	r0, 7358 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    7348:	f006 fec0 	bl	e0cc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    734c:	6869      	ldr	r1, [r5, #4]
    734e:	f801 0f64 	strb.w	r0, [r1, #100]!
    7352:	7048      	strb	r0, [r1, #1]
    7354:	2001      	movs	r0, #1
    7356:	71c8      	strb	r0, [r1, #7]
    7358:	686b      	ldr	r3, [r5, #4]
    735a:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    735e:	28ff      	cmp	r0, #255	; 0xff
    7360:	d004      	beq.n	736c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    7362:	f7fe fdeb 	bl	5f3c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7366:	7030      	strb	r0, [r6, #0]
    7368:	2000      	movs	r0, #0
    736a:	bd70      	pop	{r4, r5, r6, pc}
    736c:	7c60      	ldrb	r0, [r4, #17]
    736e:	4632      	mov	r2, r6
    7370:	3364      	adds	r3, #100	; 0x64
    7372:	6861      	ldr	r1, [r4, #4]
    7374:	f7fe fe5e 	bl	6034 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    7378:	f080 0001 	eor.w	r0, r0, #1
    737c:	bd70      	pop	{r4, r5, r6, pc}
    737e:	0000      	.short	0x0000
    7380:	20000104 	.word	0x20000104
    7384:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7386:	4c3d      	ldr	r4, [pc, #244]	; (747c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
    7388:	466f      	mov	r7, sp
    738a:	6860      	ldr	r0, [r4, #4]
    738c:	7801      	ldrb	r1, [r0, #0]
    738e:	f88d 1008 	strb.w	r1, [sp, #8]
    7392:	9902      	ldr	r1, [sp, #8]
    7394:	9102      	str	r1, [sp, #8]
    7396:	f89d 1008 	ldrb.w	r1, [sp, #8]
    739a:	b111      	cbz	r1, 73a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
    739c:	f241 41b1 	movw	r1, #5297	; 0x14b1
    73a0:	e04f      	b.n	7442 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
    73a2:	2500      	movs	r5, #0
    73a4:	7085      	strb	r5, [r0, #2]
    73a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    73a8:	880a      	ldrh	r2, [r1, #0]
    73aa:	8082      	strh	r2, [r0, #4]
    73ac:	68c8      	ldr	r0, [r1, #12]
    73ae:	f006 ff08 	bl	e1c2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    73b2:	6861      	ldr	r1, [r4, #4]
    73b4:	8348      	strh	r0, [r1, #26]
    73b6:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    73b8:	8a82      	ldrh	r2, [r0, #20]
    73ba:	838a      	strh	r2, [r1, #28]
    73bc:	8ac0      	ldrh	r0, [r0, #22]
    73be:	83c8      	strh	r0, [r1, #30]
    73c0:	f881 5020 	strb.w	r5, [r1, #32]
    73c4:	4669      	mov	r1, sp
    73c6:	68a0      	ldr	r0, [r4, #8]
    73c8:	f007 fa03 	bl	e7d2 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    73cc:	68a0      	ldr	r0, [r4, #8]
    73ce:	7800      	ldrb	r0, [r0, #0]
    73d0:	f3c0 1680 	ubfx	r6, r0, #6, #1
    73d4:	6860      	ldr	r0, [r4, #4]
    73d6:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    73da:	b120      	cbz	r0, 73e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    73dc:	4639      	mov	r1, r7
    73de:	4630      	mov	r0, r6
    73e0:	f007 fc69 	bl	ecb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    73e4:	b940      	cbnz	r0, 73f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    73e6:	6860      	ldr	r0, [r4, #4]
    73e8:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    73ec:	b160      	cbz	r0, 7408 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    73ee:	4639      	mov	r1, r7
    73f0:	4630      	mov	r0, r6
    73f2:	f007 fc57 	bl	eca4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    73f6:	b138      	cbz	r0, 7408 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    73f8:	6860      	ldr	r0, [r4, #4]
    73fa:	9900      	ldr	r1, [sp, #0]
    73fc:	f8c0 100e 	str.w	r1, [r0, #14]
    7400:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7404:	8241      	strh	r1, [r0, #18]
    7406:	e003      	b.n	7410 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    7408:	6860      	ldr	r0, [r4, #4]
    740a:	f8c0 500e 	str.w	r5, [r0, #14]
    740e:	8245      	strh	r5, [r0, #18]
    7410:	6861      	ldr	r1, [r4, #4]
    7412:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    7416:	28ff      	cmp	r0, #255	; 0xff
    7418:	d016      	beq.n	7448 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    741a:	f101 0208 	add.w	r2, r1, #8
    741e:	1dc9      	adds	r1, r1, #7
    7420:	f7fe fd72 	bl	5f08 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7424:	b158      	cbz	r0, 743e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    7426:	6860      	ldr	r0, [r4, #4]
    7428:	79c1      	ldrb	r1, [r0, #7]
    742a:	f041 0102 	orr.w	r1, r1, #2
    742e:	71c1      	strb	r1, [r0, #7]
    7430:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    7434:	6141      	str	r1, [r0, #20]
    7436:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    743a:	8301      	strh	r1, [r0, #24]
    743c:	e00f      	b.n	745e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    743e:	f241 41dc 	movw	r1, #5340	; 0x14dc
    7442:	2032      	movs	r0, #50	; 0x32
    7444:	f7fd f892 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7448:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    744c:	71c8      	strb	r0, [r1, #7]
    744e:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    7452:	6088      	str	r0, [r1, #8]
    7454:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    7458:	8188      	strh	r0, [r1, #12]
    745a:	614d      	str	r5, [r1, #20]
    745c:	830d      	strh	r5, [r1, #24]
    745e:	6860      	ldr	r0, [r4, #4]
    7460:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    7462:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    7466:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    746a:	2101      	movs	r1, #1
    746c:	7001      	strb	r1, [r0, #0]
    746e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7470:	8800      	ldrh	r0, [r0, #0]
    7472:	f7fd fc79 	bl	4d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7476:	f006 fc1b 	bl	dcb0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    747a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    747c:	20000104 	.word	0x20000104
    7480:	b570      	push	{r4, r5, r6, lr}
    7482:	4d39      	ldr	r5, [pc, #228]	; (7568 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
    7484:	4601      	mov	r1, r0
    7486:	2200      	movs	r2, #0
    7488:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    748c:	365c      	adds	r6, #92	; 0x5c
    748e:	8002      	strh	r2, [r0, #0]
    7490:	2903      	cmp	r1, #3
    7492:	d002      	beq.n	749a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    7494:	2905      	cmp	r1, #5
    7496:	d004      	beq.n	74a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
    7498:	e056      	b.n	7548 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    749a:	2103      	movs	r1, #3
    749c:	f007 f9b0 	bl	e800 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    74a0:	e052      	b.n	7548 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    74a2:	2105      	movs	r1, #5
    74a4:	f007 f9ac 	bl	e800 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    74a8:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    74ac:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    74ae:	6909      	ldr	r1, [r1, #16]
    74b0:	f844 1f0f 	str.w	r1, [r4, #15]!
    74b4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    74b6:	8b0a      	ldrh	r2, [r1, #24]
    74b8:	80a2      	strh	r2, [r4, #4]
    74ba:	7e89      	ldrb	r1, [r1, #26]
    74bc:	71a1      	strb	r1, [r4, #6]
    74be:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    74c0:	68c1      	ldr	r1, [r0, #12]
    74c2:	8b80      	ldrh	r0, [r0, #28]
    74c4:	f007 f84a 	bl	e55c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    74c8:	71e0      	strb	r0, [r4, #7]
    74ca:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    74ce:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    74d0:	68c1      	ldr	r1, [r0, #12]
    74d2:	6a00      	ldr	r0, [r0, #32]
    74d4:	f007 f837 	bl	e546 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    74d8:	75e0      	strb	r0, [r4, #23]
    74da:	0a00      	lsrs	r0, r0, #8
    74dc:	7620      	strb	r0, [r4, #24]
    74de:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    74e2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    74e4:	68c0      	ldr	r0, [r0, #12]
    74e6:	f006 fe6c 	bl	e1c2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    74ea:	7660      	strb	r0, [r4, #25]
    74ec:	0a00      	lsrs	r0, r0, #8
    74ee:	76a0      	strb	r0, [r4, #26]
    74f0:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    74f4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    74f6:	8a89      	ldrh	r1, [r1, #20]
    74f8:	76e1      	strb	r1, [r4, #27]
    74fa:	0a09      	lsrs	r1, r1, #8
    74fc:	7721      	strb	r1, [r4, #28]
    74fe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7500:	8ac9      	ldrh	r1, [r1, #22]
    7502:	7761      	strb	r1, [r4, #29]
    7504:	0a09      	lsrs	r1, r1, #8
    7506:	77a1      	strb	r1, [r4, #30]
    7508:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    750a:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    750e:	f8c4 201f 	str.w	r2, [r4, #31]
    7512:	7909      	ldrb	r1, [r1, #4]
    7514:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    7518:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    751a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    751e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    7522:	f001 011f 	and.w	r1, r1, #31
    7526:	f020 001f 	bic.w	r0, r0, #31
    752a:	4308      	orrs	r0, r1
    752c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    7530:	f004 f978 	bl	b824 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    7534:	2807      	cmp	r0, #7
    7536:	d900      	bls.n	753a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    7538:	2007      	movs	r0, #7
    753a:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    753e:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    7542:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    7546:	7021      	strb	r1, [r4, #0]
    7548:	f106 0112 	add.w	r1, r6, #18
    754c:	68a8      	ldr	r0, [r5, #8]
    754e:	f007 f972 	bl	e836 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7552:	7e71      	ldrb	r1, [r6, #25]
    7554:	68a8      	ldr	r0, [r5, #8]
    7556:	f007 f974 	bl	e842 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    755a:	f000 fba7 	bl	7cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc08>
    755e:	68a8      	ldr	r0, [r5, #8]
    7560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7564:	f004 be16 	b.w	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7568:	20000104 	.word	0x20000104
    756c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7570:	4f65      	ldr	r7, [pc, #404]	; (7708 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x664>)
    7572:	4604      	mov	r4, r0
    7574:	6878      	ldr	r0, [r7, #4]
    7576:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
    757a:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    757e:	b180      	cbz	r0, 75a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    7580:	2600      	movs	r6, #0
    7582:	2500      	movs	r5, #0
    7584:	7ca0      	ldrb	r0, [r4, #18]
    7586:	68a1      	ldr	r1, [r4, #8]
    7588:	f007 fb95 	bl	ecb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    758c:	4682      	mov	sl, r0
    758e:	f7ff fead 	bl	72ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7592:	b140      	cbz	r0, 75a6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    7594:	6878      	ldr	r0, [r7, #4]
    7596:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    759a:	b121      	cbz	r1, 75a6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    759c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    75a0:	e004      	b.n	75ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
    75a2:	2601      	movs	r6, #1
    75a4:	e7ed      	b.n	7582 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    75a6:	6878      	ldr	r0, [r7, #4]
    75a8:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    75ac:	4683      	mov	fp, r0
    75ae:	f7fe fbfd 	bl	5dac <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    75b2:	ea5f 0900 	movs.w	r9, r0
    75b6:	d00c      	beq.n	75d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    75b8:	4658      	mov	r0, fp
    75ba:	f7fe fbeb 	bl	5d94 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    75be:	b100      	cbz	r0, 75c2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
    75c0:	2601      	movs	r6, #1
    75c2:	f1ba 0f00 	cmp.w	sl, #0
    75c6:	d004      	beq.n	75d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    75c8:	4648      	mov	r0, r9
    75ca:	68a1      	ldr	r1, [r4, #8]
    75cc:	f006 fd31 	bl	e032 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    75d0:	4605      	mov	r5, r0
    75d2:	6878      	ldr	r0, [r7, #4]
    75d4:	46b9      	mov	r9, r7
    75d6:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    75da:	b10d      	cbz	r5, 75e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    75dc:	f047 0702 	orr.w	r7, r7, #2
    75e0:	f7ff fe84 	bl	72ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    75e4:	b3a0      	cbz	r0, 7650 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    75e6:	6860      	ldr	r0, [r4, #4]
    75e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    75ec:	7802      	ldrb	r2, [r0, #0]
    75ee:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    75f2:	429a      	cmp	r2, r3
    75f4:	d11f      	bne.n	7636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    75f6:	7842      	ldrb	r2, [r0, #1]
    75f8:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    75fc:	429a      	cmp	r2, r3
    75fe:	d11a      	bne.n	7636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7600:	7882      	ldrb	r2, [r0, #2]
    7602:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7606:	429a      	cmp	r2, r3
    7608:	d115      	bne.n	7636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    760a:	78c2      	ldrb	r2, [r0, #3]
    760c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7610:	429a      	cmp	r2, r3
    7612:	d110      	bne.n	7636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7614:	7902      	ldrb	r2, [r0, #4]
    7616:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    761a:	429a      	cmp	r2, r3
    761c:	d10b      	bne.n	7636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    761e:	7940      	ldrb	r0, [r0, #5]
    7620:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7624:	4290      	cmp	r0, r2
    7626:	d106      	bne.n	7636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7628:	7c60      	ldrb	r0, [r4, #17]
    762a:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    762e:	4288      	cmp	r0, r1
    7630:	d101      	bne.n	7636 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7632:	2001      	movs	r0, #1
    7634:	e000      	b.n	7638 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
    7636:	2000      	movs	r0, #0
    7638:	4f34      	ldr	r7, [pc, #208]	; (770c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x668>)
    763a:	4682      	mov	sl, r0
    763c:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    7640:	2808      	cmp	r0, #8
    7642:	d006      	beq.n	7652 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    7644:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    7648:	4288      	cmp	r0, r1
    764a:	d102      	bne.n	7652 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    764c:	2001      	movs	r0, #1
    764e:	e001      	b.n	7654 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
    7650:	e021      	b.n	7696 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    7652:	2000      	movs	r0, #0
    7654:	4681      	mov	r9, r0
    7656:	b925      	cbnz	r5, 7662 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
    7658:	b12e      	cbz	r6, 7666 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    765a:	4620      	mov	r0, r4
    765c:	f7ff fe52 	bl	7304 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    7660:	b108      	cbz	r0, 7666 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    7662:	2001      	movs	r0, #1
    7664:	e000      	b.n	7668 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    7666:	2000      	movs	r0, #0
    7668:	f1b8 0f00 	cmp.w	r8, #0
    766c:	d009      	beq.n	7682 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    766e:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    7672:	2901      	cmp	r1, #1
    7674:	d003      	beq.n	767e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5da>
    7676:	b921      	cbnz	r1, 7682 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    7678:	ea5a 0109 	orrs.w	r1, sl, r9
    767c:	d001      	beq.n	7682 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    767e:	2101      	movs	r1, #1
    7680:	e000      	b.n	7684 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
    7682:	2100      	movs	r1, #0
    7684:	4208      	tst	r0, r1
    7686:	d003      	beq.n	7690 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
    7688:	200c      	movs	r0, #12
    768a:	b004      	add	sp, #16
    768c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7690:	f004 fb1c 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7694:	e036      	b.n	7704 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    7696:	f004 fb19 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    769a:	f1b8 0f00 	cmp.w	r8, #0
    769e:	d031      	beq.n	7704 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    76a0:	4620      	mov	r0, r4
    76a2:	f7ff fe2f 	bl	7304 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    76a6:	b900      	cbnz	r0, 76aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x606>
    76a8:	b175      	cbz	r5, 76c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x624>
    76aa:	a803      	add	r0, sp, #12
    76ac:	f000 f980 	bl	79b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    76b0:	f8d9 2004 	ldr.w	r2, [r9, #4]
    76b4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    76b8:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    76bc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    76c0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    76c4:	463b      	mov	r3, r7
    76c6:	e018      	b.n	76fa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x656>
    76c8:	f8d9 0004 	ldr.w	r0, [r9, #4]
    76cc:	464d      	mov	r5, r9
    76ce:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    76d2:	2803      	cmp	r0, #3
    76d4:	d001      	beq.n	76da <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x636>
    76d6:	2802      	cmp	r0, #2
    76d8:	d114      	bne.n	7704 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    76da:	f1ba 0f00 	cmp.w	sl, #0
    76de:	d011      	beq.n	7704 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    76e0:	a803      	add	r0, sp, #12
    76e2:	f000 f965 	bl	79b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    76e6:	686a      	ldr	r2, [r5, #4]
    76e8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    76ec:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    76f0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    76f4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    76f8:	23fe      	movs	r3, #254	; 0xfe
    76fa:	2101      	movs	r1, #1
    76fc:	4620      	mov	r0, r4
    76fe:	3232      	adds	r2, #50	; 0x32
    7700:	f000 fc46 	bl	7f90 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7704:	2005      	movs	r0, #5
    7706:	e7c0      	b.n	768a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e6>
    7708:	20000104 	.word	0x20000104
    770c:	20001094 	.word	0x20001094
    7710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7712:	4c3f      	ldr	r4, [pc, #252]	; (7810 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x76c>)
    7714:	4605      	mov	r5, r0
    7716:	6860      	ldr	r0, [r4, #4]
    7718:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    771c:	2900      	cmp	r1, #0
    771e:	d06c      	beq.n	77fa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    7720:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7724:	2802      	cmp	r0, #2
    7726:	d02c      	beq.n	7782 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6de>
    7728:	2801      	cmp	r0, #1
    772a:	d043      	beq.n	77b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x710>
    772c:	f7ff fdde 	bl	72ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7730:	2800      	cmp	r0, #0
    7732:	d067      	beq.n	7804 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x760>
    7734:	686a      	ldr	r2, [r5, #4]
    7736:	6861      	ldr	r1, [r4, #4]
    7738:	7810      	ldrb	r0, [r2, #0]
    773a:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    773e:	4298      	cmp	r0, r3
    7740:	d14c      	bne.n	77dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7742:	7850      	ldrb	r0, [r2, #1]
    7744:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7748:	4298      	cmp	r0, r3
    774a:	d147      	bne.n	77dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    774c:	7890      	ldrb	r0, [r2, #2]
    774e:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7752:	4298      	cmp	r0, r3
    7754:	d142      	bne.n	77dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7756:	78d0      	ldrb	r0, [r2, #3]
    7758:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    775c:	4298      	cmp	r0, r3
    775e:	d13d      	bne.n	77dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7760:	7910      	ldrb	r0, [r2, #4]
    7762:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    7766:	4298      	cmp	r0, r3
    7768:	d138      	bne.n	77dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    776a:	7950      	ldrb	r0, [r2, #5]
    776c:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7770:	4290      	cmp	r0, r2
    7772:	d133      	bne.n	77dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7774:	7c68      	ldrb	r0, [r5, #17]
    7776:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    777a:	4290      	cmp	r0, r2
    777c:	d12e      	bne.n	77dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    777e:	2001      	movs	r0, #1
    7780:	e02d      	b.n	77de <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73a>
    7782:	a803      	add	r0, sp, #12
    7784:	f000 f914 	bl	79b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    7788:	6862      	ldr	r2, [r4, #4]
    778a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    778e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7792:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7796:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    779a:	23ff      	movs	r3, #255	; 0xff
    779c:	2100      	movs	r1, #0
    779e:	4628      	mov	r0, r5
    77a0:	3232      	adds	r2, #50	; 0x32
    77a2:	f000 fbf5 	bl	7f90 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    77a6:	6861      	ldr	r1, [r4, #4]
    77a8:	2001      	movs	r0, #1
    77aa:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    77ae:	200b      	movs	r0, #11
    77b0:	b004      	add	sp, #16
    77b2:	bd70      	pop	{r4, r5, r6, pc}
    77b4:	a803      	add	r0, sp, #12
    77b6:	f000 f8fb 	bl	79b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    77ba:	6862      	ldr	r2, [r4, #4]
    77bc:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    77c0:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    77c4:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    77c8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    77cc:	23ff      	movs	r3, #255	; 0xff
    77ce:	2100      	movs	r1, #0
    77d0:	4628      	mov	r0, r5
    77d2:	3232      	adds	r2, #50	; 0x32
    77d4:	f000 fbdc 	bl	7f90 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    77d8:	2005      	movs	r0, #5
    77da:	e7e9      	b.n	77b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
    77dc:	2000      	movs	r0, #0
    77de:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    77e2:	2901      	cmp	r1, #1
    77e4:	d00c      	beq.n	7800 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    77e6:	b958      	cbnz	r0, 7800 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    77e8:	490a      	ldr	r1, [pc, #40]	; (7814 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x770>)
    77ea:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    77ee:	2808      	cmp	r0, #8
    77f0:	d003      	beq.n	77fa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    77f2:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    77f6:	4281      	cmp	r1, r0
    77f8:	d002      	beq.n	7800 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    77fa:	f004 fa67 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    77fe:	e7eb      	b.n	77d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>
    7800:	200c      	movs	r0, #12
    7802:	e7d5      	b.n	77b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
    7804:	f640 6158 	movw	r1, #3672	; 0xe58
    7808:	2032      	movs	r0, #50	; 0x32
    780a:	f7fc feaf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    780e:	0000      	.short	0x0000
    7810:	20000104 	.word	0x20000104
    7814:	20001094 	.word	0x20001094
    7818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    781a:	4c1e      	ldr	r4, [pc, #120]	; (7894 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f0>)
    781c:	4605      	mov	r5, r0
    781e:	6860      	ldr	r0, [r4, #4]
    7820:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7824:	b129      	cbz	r1, 7832 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78e>
    7826:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    782a:	2802      	cmp	r0, #2
    782c:	d004      	beq.n	7838 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x794>
    782e:	2801      	cmp	r0, #1
    7830:	d01b      	beq.n	786a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c6>
    7832:	f004 fa4b 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7836:	e02a      	b.n	788e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7ea>
    7838:	a803      	add	r0, sp, #12
    783a:	f000 f8b9 	bl	79b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    783e:	6862      	ldr	r2, [r4, #4]
    7840:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7844:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7848:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    784c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7850:	23ff      	movs	r3, #255	; 0xff
    7852:	2106      	movs	r1, #6
    7854:	4628      	mov	r0, r5
    7856:	3232      	adds	r2, #50	; 0x32
    7858:	f000 fb9a 	bl	7f90 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    785c:	6862      	ldr	r2, [r4, #4]
    785e:	200b      	movs	r0, #11
    7860:	2100      	movs	r1, #0
    7862:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    7866:	b004      	add	sp, #16
    7868:	bd70      	pop	{r4, r5, r6, pc}
    786a:	a803      	add	r0, sp, #12
    786c:	f000 f8a0 	bl	79b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    7870:	6862      	ldr	r2, [r4, #4]
    7872:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7876:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    787a:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    787e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7882:	23ff      	movs	r3, #255	; 0xff
    7884:	2106      	movs	r1, #6
    7886:	4628      	mov	r0, r5
    7888:	3232      	adds	r2, #50	; 0x32
    788a:	f000 fb81 	bl	7f90 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    788e:	2005      	movs	r0, #5
    7890:	e7e9      	b.n	7866 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    7892:	0000      	.short	0x0000
    7894:	20000104 	.word	0x20000104
    7898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    789a:	b389      	cbz	r1, 7900 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85c>
    789c:	2901      	cmp	r1, #1
    789e:	d034      	beq.n	790a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x866>
    78a0:	2505      	movs	r5, #5
    78a2:	2902      	cmp	r1, #2
    78a4:	d004      	beq.n	78b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x80c>
    78a6:	2906      	cmp	r1, #6
    78a8:	d025      	beq.n	78f6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x852>
    78aa:	f004 fa0f 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    78ae:	e01f      	b.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    78b0:	4606      	mov	r6, r0
    78b2:	f004 fa0b 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    78b6:	4c17      	ldr	r4, [pc, #92]	; (7914 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x870>)
    78b8:	6860      	ldr	r0, [r4, #4]
    78ba:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    78be:	b1b9      	cbz	r1, 78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    78c0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    78c4:	2801      	cmp	r0, #1
    78c6:	d001      	beq.n	78cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x828>
    78c8:	2802      	cmp	r0, #2
    78ca:	d111      	bne.n	78f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    78cc:	a803      	add	r0, sp, #12
    78ce:	f000 f86f 	bl	79b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    78d2:	6862      	ldr	r2, [r4, #4]
    78d4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    78d8:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    78dc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    78e0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    78e4:	23ff      	movs	r3, #255	; 0xff
    78e6:	2102      	movs	r1, #2
    78e8:	4630      	mov	r0, r6
    78ea:	3232      	adds	r2, #50	; 0x32
    78ec:	f000 fb50 	bl	7f90 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    78f0:	b004      	add	sp, #16
    78f2:	4628      	mov	r0, r5
    78f4:	bd70      	pop	{r4, r5, r6, pc}
    78f6:	b004      	add	sp, #16
    78f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    78fc:	f7ff bf8c 	b.w	7818 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x774>
    7900:	b004      	add	sp, #16
    7902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7906:	f7ff bf03 	b.w	7710 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x66c>
    790a:	b004      	add	sp, #16
    790c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7910:	f7ff be2c 	b.w	756c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7914:	20000104 	.word	0x20000104
    7918:	b570      	push	{r4, r5, r6, lr}
    791a:	4c11      	ldr	r4, [pc, #68]	; (7960 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8bc>)
    791c:	4605      	mov	r5, r0
    791e:	6861      	ldr	r1, [r4, #4]
    7920:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    7924:	2800      	cmp	r0, #0
    7926:	d019      	beq.n	795c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    7928:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    792c:	2800      	cmp	r0, #0
    792e:	d015      	beq.n	795c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    7930:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    7934:	3132      	adds	r1, #50	; 0x32
    7936:	f007 f9be 	bl	ecb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    793a:	b140      	cbz	r0, 794e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8aa>
    793c:	f7fe fa00 	bl	5d40 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7940:	6861      	ldr	r1, [r4, #4]
    7942:	462a      	mov	r2, r5
    7944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7948:	3132      	adds	r1, #50	; 0x32
    794a:	f006 bb3d 	b.w	dfc8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    794e:	6860      	ldr	r0, [r4, #4]
    7950:	4629      	mov	r1, r5
    7952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7956:	3032      	adds	r0, #50	; 0x32
    7958:	f006 bb25 	b.w	dfa6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    795c:	bd70      	pop	{r4, r5, r6, pc}
    795e:	0000      	.short	0x0000
    7960:	20000104 	.word	0x20000104
    7964:	4602      	mov	r2, r0
    7966:	480b      	ldr	r0, [pc, #44]	; (7994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f0>)
    7968:	b082      	sub	sp, #8
    796a:	6840      	ldr	r0, [r0, #4]
    796c:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    7970:	f88d 1000 	strb.w	r1, [sp]
    7974:	9900      	ldr	r1, [sp, #0]
    7976:	9100      	str	r1, [sp, #0]
    7978:	f89d 1000 	ldrb.w	r1, [sp]
    797c:	2900      	cmp	r1, #0
    797e:	d107      	bne.n	7990 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>
    7980:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7982:	2900      	cmp	r1, #0
    7984:	d004      	beq.n	7990 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>
    7986:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    798a:	b002      	add	sp, #8
    798c:	f7fb ba90 	b.w	2eb0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7990:	b002      	add	sp, #8
    7992:	4770      	bx	lr
    7994:	20000104 	.word	0x20000104
    7998:	b510      	push	{r4, lr}
    799a:	4804      	ldr	r0, [pc, #16]	; (79ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
    799c:	f004 fcac 	bl	c2f8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    79a0:	2800      	cmp	r0, #0
    79a2:	d102      	bne.n	79aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x906>
    79a4:	4901      	ldr	r1, [pc, #4]	; (79ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
    79a6:	207f      	movs	r0, #127	; 0x7f
    79a8:	7008      	strb	r0, [r1, #0]
    79aa:	bd10      	pop	{r4, pc}
    79ac:	20000104 	.word	0x20000104
    79b0:	4a07      	ldr	r2, [pc, #28]	; (79d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>)
    79b2:	b510      	push	{r4, lr}
    79b4:	f992 1000 	ldrsb.w	r1, [r2]
    79b8:	297f      	cmp	r1, #127	; 0x7f
    79ba:	d003      	beq.n	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x920>
    79bc:	7001      	strb	r1, [r0, #0]
    79be:	207f      	movs	r0, #127	; 0x7f
    79c0:	7010      	strb	r0, [r2, #0]
    79c2:	bd10      	pop	{r4, pc}
    79c4:	f240 319f 	movw	r1, #927	; 0x39f
    79c8:	2032      	movs	r0, #50	; 0x32
    79ca:	f7fc fdcf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79ce:	0000      	.short	0x0000
    79d0:	20000104 	.word	0x20000104
    79d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79d8:	4607      	mov	r7, r0
    79da:	f7fd f9f3 	bl	4dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    79de:	4604      	mov	r4, r0
    79e0:	f7fd f9f6 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    79e4:	4621      	mov	r1, r4
    79e6:	f007 f9be 	bl	ed66 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    79ea:	0005      	movs	r5, r0
    79ec:	d012      	beq.n	7a14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    79ee:	4c2d      	ldr	r4, [pc, #180]	; (7aa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa00>)
    79f0:	6860      	ldr	r0, [r4, #4]
    79f2:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    79f6:	2801      	cmp	r0, #1
    79f8:	d004      	beq.n	7a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    79fa:	2802      	cmp	r0, #2
    79fc:	d002      	beq.n	7a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    79fe:	f7ff fc75 	bl	72ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7a02:	b150      	cbz	r0, 7a1a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x976>
    7a04:	f06f 0613 	mvn.w	r6, #19
    7a08:	b33f      	cbz	r7, 7a5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b6>
    7a0a:	4628      	mov	r0, r5
    7a0c:	f006 fec9 	bl	e7a2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    7a10:	b950      	cbnz	r0, 7a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
    7a12:	e005      	b.n	7a20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x97c>
    7a14:	f241 4181 	movw	r1, #5249	; 0x1481
    7a18:	e03a      	b.n	7a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    7a1a:	f241 4187 	movw	r1, #5255	; 0x1487
    7a1e:	e037      	b.n	7a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    7a20:	4628      	mov	r0, r5
    7a22:	f006 fee0 	bl	e7e6 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    7a26:	b1c0      	cbz	r0, 7a5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b6>
    7a28:	6861      	ldr	r1, [r4, #4]
    7a2a:	4628      	mov	r0, r5
    7a2c:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7a30:	2a05      	cmp	r2, #5
    7a32:	d202      	bcs.n	7a3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x996>
    7a34:	f241 410b 	movw	r1, #5131	; 0x140b
    7a38:	e02a      	b.n	7a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    7a3a:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7a3e:	2a0b      	cmp	r2, #11
    7a40:	d302      	bcc.n	7a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a4>
    7a42:	f241 410c 	movw	r1, #5132	; 0x140c
    7a46:	e023      	b.n	7a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    7a48:	68e2      	ldr	r2, [r4, #12]
    7a4a:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7a4e:	6952      	ldr	r2, [r2, #20]
    7a50:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    7a54:	5851      	ldr	r1, [r2, r1]
    7a56:	4788      	blx	r1
    7a58:	e016      	b.n	7a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e4>
    7a5a:	6860      	ldr	r0, [r4, #4]
    7a5c:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7a60:	2905      	cmp	r1, #5
    7a62:	d202      	bcs.n	7a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c6>
    7a64:	f241 4177 	movw	r1, #5239	; 0x1477
    7a68:	e012      	b.n	7a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    7a6a:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7a6e:	290b      	cmp	r1, #11
    7a70:	d302      	bcc.n	7a78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
    7a72:	f241 4178 	movw	r1, #5240	; 0x1478
    7a76:	e00b      	b.n	7a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    7a78:	68e1      	ldr	r1, [r4, #12]
    7a7a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7a7e:	6989      	ldr	r1, [r1, #24]
    7a80:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    7a84:	5808      	ldr	r0, [r1, r0]
    7a86:	4780      	blx	r0
    7a88:	280f      	cmp	r0, #15
    7a8a:	d304      	bcc.n	7a96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f2>
    7a8c:	f241 419c 	movw	r1, #5276	; 0x149c
    7a90:	2032      	movs	r0, #50	; 0x32
    7a92:	f7fc fd6b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a96:	68e1      	ldr	r1, [r4, #12]
    7a98:	6909      	ldr	r1, [r1, #16]
    7a9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7aa2:	4700      	bx	r0
    7aa4:	20000104 	.word	0x20000104
    7aa8:	b510      	push	{r4, lr}
    7aaa:	b118      	cbz	r0, 7ab4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa10>
    7aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ab0:	f000 b924 	b.w	7cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7ab4:	2900      	cmp	r1, #0
    7ab6:	d01d      	beq.n	7af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa50>
    7ab8:	480f      	ldr	r0, [pc, #60]	; (7af8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa54>)
    7aba:	6841      	ldr	r1, [r0, #4]
    7abc:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7ac0:	2a0b      	cmp	r2, #11
    7ac2:	d202      	bcs.n	7aca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa26>
    7ac4:	f241 5143 	movw	r1, #5443	; 0x1543
    7ac8:	e005      	b.n	7ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa32>
    7aca:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7ace:	2a0f      	cmp	r2, #15
    7ad0:	d304      	bcc.n	7adc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa38>
    7ad2:	f241 5144 	movw	r1, #5444	; 0x1544
    7ad6:	2032      	movs	r0, #50	; 0x32
    7ad8:	f7fc fd48 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7adc:	68c0      	ldr	r0, [r0, #12]
    7ade:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7ae2:	6880      	ldr	r0, [r0, #8]
    7ae4:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    7ae8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7aec:	5840      	ldr	r0, [r0, r1]
    7aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7af2:	4700      	bx	r0
    7af4:	bd10      	pop	{r4, pc}
    7af6:	0000      	.short	0x0000
    7af8:	20000104 	.word	0x20000104
    7afc:	b510      	push	{r4, lr}
    7afe:	f7ff faef 	bl	70e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7b02:	f000 f90b 	bl	7d1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    7b06:	4805      	ldr	r0, [pc, #20]	; (7b1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa78>)
    7b08:	6881      	ldr	r1, [r0, #8]
    7b0a:	2000      	movs	r0, #0
    7b0c:	f7ff fc3a 	bl	7384 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    7b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b14:	2003      	movs	r0, #3
    7b16:	f000 bb79 	b.w	820c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7b1a:	0000      	.short	0x0000
    7b1c:	20000104 	.word	0x20000104
    7b20:	b510      	push	{r4, lr}
    7b22:	f7fd f94f 	bl	4dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7b26:	4604      	mov	r4, r0
    7b28:	f7fd f952 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7b2c:	4621      	mov	r1, r4
    7b2e:	f007 f91a 	bl	ed66 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7b32:	b150      	cbz	r0, 7b4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa6>
    7b34:	f004 fb2e 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7b38:	2000      	movs	r0, #0
    7b3a:	f004 f9df 	bl	befc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7b3e:	4905      	ldr	r1, [pc, #20]	; (7b54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xab0>)
    7b40:	2006      	movs	r0, #6
    7b42:	6849      	ldr	r1, [r1, #4]
    7b44:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7b48:	bd10      	pop	{r4, pc}
    7b4a:	f240 5184 	movw	r1, #1412	; 0x584
    7b4e:	2032      	movs	r0, #50	; 0x32
    7b50:	f7fc fd0c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b54:	20000104 	.word	0x20000104
    7b58:	490f      	ldr	r1, [pc, #60]	; (7b98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf4>)
    7b5a:	b510      	push	{r4, lr}
    7b5c:	6848      	ldr	r0, [r1, #4]
    7b5e:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7b62:	2a06      	cmp	r2, #6
    7b64:	d202      	bcs.n	7b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac8>
    7b66:	f241 5171 	movw	r1, #5489	; 0x1571
    7b6a:	e005      	b.n	7b78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xad4>
    7b6c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7b70:	2a0b      	cmp	r2, #11
    7b72:	d304      	bcc.n	7b7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xada>
    7b74:	f241 5172 	movw	r1, #5490	; 0x1572
    7b78:	2032      	movs	r0, #50	; 0x32
    7b7a:	f7fc fcf7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b7e:	68c9      	ldr	r1, [r1, #12]
    7b80:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7b84:	68c9      	ldr	r1, [r1, #12]
    7b86:	f06f 0213 	mvn.w	r2, #19
    7b8a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    7b8e:	5808      	ldr	r0, [r1, r0]
    7b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b94:	4700      	bx	r0
    7b96:	0000      	.short	0x0000
    7b98:	20000104 	.word	0x20000104
    7b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ba0:	4c31      	ldr	r4, [pc, #196]	; (7c68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc4>)
    7ba2:	4605      	mov	r5, r0
    7ba4:	460e      	mov	r6, r1
    7ba6:	6860      	ldr	r0, [r4, #4]
    7ba8:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7bac:	b120      	cbz	r0, 7bb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
    7bae:	2801      	cmp	r0, #1
    7bb0:	d002      	beq.n	7bb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
    7bb2:	200c      	movs	r0, #12
    7bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bb8:	f004 fa60 	bl	c07c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7bbc:	f004 f86c 	bl	bc98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7bc0:	f003 fe4e 	bl	b860 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7bc4:	f004 fcc8 	bl	c558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7bc8:	4828      	ldr	r0, [pc, #160]	; (7c6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc8>)
    7bca:	f004 f98f 	bl	beec <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7bce:	4828      	ldr	r0, [pc, #160]	; (7c70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbcc>)
    7bd0:	f004 fbb8 	bl	c344 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7bd4:	4827      	ldr	r0, [pc, #156]	; (7c74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd0>)
    7bd6:	f004 fbab 	bl	c330 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7bda:	4630      	mov	r0, r6
    7bdc:	f004 fada 	bl	c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7be0:	7968      	ldrb	r0, [r5, #5]
    7be2:	b110      	cbz	r0, 7bea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb46>
    7be4:	2001      	movs	r0, #1
    7be6:	f7ff febd 	bl	7964 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    7bea:	7928      	ldrb	r0, [r5, #4]
    7bec:	2803      	cmp	r0, #3
    7bee:	d001      	beq.n	7bf4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb50>
    7bf0:	b118      	cbz	r0, 7bfa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb56>
    7bf2:	e018      	b.n	7c26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb82>
    7bf4:	f640 1188 	movw	r1, #2440	; 0x988
    7bf8:	e033      	b.n	7c62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbbe>
    7bfa:	6861      	ldr	r1, [r4, #4]
    7bfc:	2000      	movs	r0, #0
    7bfe:	2503      	movs	r5, #3
    7c00:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    7c04:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    7c08:	1c52      	adds	r2, r2, #1
    7c0a:	fbb2 f7f5 	udiv	r7, r2, r5
    7c0e:	fb05 2217 	mls	r2, r5, r7, r2
    7c12:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    7c16:	fa23 f202 	lsr.w	r2, r3, r2
    7c1a:	07d2      	lsls	r2, r2, #31
    7c1c:	d103      	bne.n	7c26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb82>
    7c1e:	1c40      	adds	r0, r0, #1
    7c20:	b2c0      	uxtb	r0, r0
    7c22:	2803      	cmp	r0, #3
    7c24:	d3ee      	bcc.n	7c04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb60>
    7c26:	6860      	ldr	r0, [r4, #4]
    7c28:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    7c2c:	f004 faac 	bl	c188 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7c30:	4631      	mov	r1, r6
    7c32:	2001      	movs	r0, #1
    7c34:	f7ff fa66 	bl	7104 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7c38:	2800      	cmp	r0, #0
    7c3a:	d0bb      	beq.n	7bb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb10>
    7c3c:	f000 f922 	bl	7e84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xde0>
    7c40:	6860      	ldr	r0, [r4, #4]
    7c42:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    7c46:	b138      	cbz	r0, 7c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbb4>
    7c48:	f7fe f87e 	bl	5d48 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    7c4c:	480a      	ldr	r0, [pc, #40]	; (7c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd4>)
    7c4e:	6800      	ldr	r0, [r0, #0]
    7c50:	2803      	cmp	r0, #3
    7c52:	d004      	beq.n	7c5e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbba>
    7c54:	2000      	movs	r0, #0
    7c56:	e7ad      	b.n	7bb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb10>
    7c58:	f7fe fa6a 	bl	6130 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7c5c:	e7f6      	b.n	7c4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xba8>
    7c5e:	f640 119a 	movw	r1, #2458	; 0x99a
    7c62:	2032      	movs	r0, #50	; 0x32
    7c64:	f7fc fc82 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c68:	20000104 	.word	0x20000104
    7c6c:	00007f80 	.word	0x00007f80
    7c70:	0001034f 	.word	0x0001034f
    7c74:	8e89bed6 	.word	0x8e89bed6
    7c78:	40001550 	.word	0x40001550
    7c7c:	b510      	push	{r4, lr}
    7c7e:	2000      	movs	r0, #0
    7c80:	f7ff fe70 	bl	7964 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    7c84:	4808      	ldr	r0, [pc, #32]	; (7ca8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>)
    7c86:	6840      	ldr	r0, [r0, #4]
    7c88:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7c8c:	b128      	cbz	r0, 7c9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf6>
    7c8e:	2801      	cmp	r0, #1
    7c90:	d003      	beq.n	7c9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf6>
    7c92:	2802      	cmp	r0, #2
    7c94:	d004      	beq.n	7ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbfc>
    7c96:	200c      	movs	r0, #12
    7c98:	bd10      	pop	{r4, pc}
    7c9a:	f000 f82f 	bl	7cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7c9e:	e001      	b.n	7ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc00>
    7ca0:	f000 f844 	bl	7d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc88>
    7ca4:	2000      	movs	r0, #0
    7ca6:	bd10      	pop	{r4, pc}
    7ca8:	20000104 	.word	0x20000104
    7cac:	b570      	push	{r4, r5, r6, lr}
    7cae:	4c12      	ldr	r4, [pc, #72]	; (7cf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>)
    7cb0:	6860      	ldr	r0, [r4, #4]
    7cb2:	f100 0532 	add.w	r5, r0, #50	; 0x32
    7cb6:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    7cba:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7cbe:	b188      	cbz	r0, 7ce4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc40>
    7cc0:	f7ff fb14 	bl	72ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7cc4:	b130      	cbz	r0, 7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
    7cc6:	6860      	ldr	r0, [r4, #4]
    7cc8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7ccc:	b111      	cbz	r1, 7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
    7cce:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7cd2:	e002      	b.n	7cda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc36>
    7cd4:	6860      	ldr	r0, [r4, #4]
    7cd6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7cda:	f7fe f8db 	bl	5e94 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    7cde:	b108      	cbz	r0, 7ce4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc40>
    7ce0:	2601      	movs	r6, #1
    7ce2:	4605      	mov	r5, r0
    7ce4:	4629      	mov	r1, r5
    7ce6:	68a0      	ldr	r0, [r4, #8]
    7ce8:	f006 fdb2 	bl	e850 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7cec:	4631      	mov	r1, r6
    7cee:	68a0      	ldr	r0, [r4, #8]
    7cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7cf4:	f006 bdb2 	b.w	e85c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7cf8:	20000104 	.word	0x20000104
    7cfc:	b510      	push	{r4, lr}
    7cfe:	f7ff f9ef 	bl	70e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7d02:	4905      	ldr	r1, [pc, #20]	; (7d18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc74>)
    7d04:	2001      	movs	r0, #1
    7d06:	6849      	ldr	r1, [r1, #4]
    7d08:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d10:	2000      	movs	r0, #0
    7d12:	f000 ba7b 	b.w	820c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7d16:	0000      	.short	0x0000
    7d18:	20000104 	.word	0x20000104
    7d1c:	4902      	ldr	r1, [pc, #8]	; (7d28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc84>)
    7d1e:	2000      	movs	r0, #0
    7d20:	6849      	ldr	r1, [r1, #4]
    7d22:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7d26:	4770      	bx	lr
    7d28:	20000104 	.word	0x20000104
    7d2c:	b570      	push	{r4, r5, r6, lr}
    7d2e:	f7fd f849 	bl	4dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7d32:	4604      	mov	r4, r0
    7d34:	f7fd f84c 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7d38:	4621      	mov	r1, r4
    7d3a:	f007 f814 	bl	ed66 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7d3e:	0004      	movs	r4, r0
    7d40:	d020      	beq.n	7d84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce0>
    7d42:	f007 f860 	bl	ee06 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    7d46:	2000      	movs	r0, #0
    7d48:	f000 fa2a 	bl	81a0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7d4c:	b1f8      	cbz	r0, 7d8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcea>
    7d4e:	4d1e      	ldr	r5, [pc, #120]	; (7dc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd24>)
    7d50:	6868      	ldr	r0, [r5, #4]
    7d52:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7d56:	2802      	cmp	r0, #2
    7d58:	d003      	beq.n	7d62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcbe>
    7d5a:	4621      	mov	r1, r4
    7d5c:	2000      	movs	r0, #0
    7d5e:	f7ff f9d1 	bl	7104 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7d62:	1ce0      	adds	r0, r4, #3
    7d64:	f006 f9af 	bl	e0c6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7d68:	6869      	ldr	r1, [r5, #4]
    7d6a:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    7d6e:	b128      	cbz	r0, 7d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    7d70:	2440      	movs	r4, #64	; 0x40
    7d72:	f003 fd95 	bl	b8a0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7d76:	4620      	mov	r0, r4
    7d78:	f003 ff9c 	bl	bcb4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7d7c:	f7ff fab6 	bl	72ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7d80:	b970      	cbnz	r0, 7da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcfc>
    7d82:	e008      	b.n	7d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcf2>
    7d84:	f240 4177 	movw	r1, #1143	; 0x477
    7d88:	2032      	movs	r0, #50	; 0x32
    7d8a:	f7fc fbef 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d92:	f7ff bfb3 	b.w	7cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7d96:	6868      	ldr	r0, [r5, #4]
    7d98:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7d9c:	2802      	cmp	r0, #2
    7d9e:	d104      	bne.n	7daa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd06>
    7da0:	2100      	movs	r1, #0
    7da2:	2201      	movs	r2, #1
    7da4:	4608      	mov	r0, r1
    7da6:	f004 fa81 	bl	c2ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7daa:	6868      	ldr	r0, [r5, #4]
    7dac:	21ff      	movs	r1, #255	; 0xff
    7dae:	f800 1f64 	strb.w	r1, [r0, #100]!
    7db2:	7041      	strb	r1, [r0, #1]
    7db4:	2100      	movs	r1, #0
    7db6:	7201      	strb	r1, [r0, #8]
    7db8:	71c1      	strb	r1, [r0, #7]
    7dba:	7241      	strb	r1, [r0, #9]
    7dbc:	7601      	strb	r1, [r0, #24]
    7dbe:	2105      	movs	r1, #5
    7dc0:	f800 1c08 	strb.w	r1, [r0, #-8]
    7dc4:	bd70      	pop	{r4, r5, r6, pc}
    7dc6:	0000      	.short	0x0000
    7dc8:	20000104 	.word	0x20000104
    7dcc:	b570      	push	{r4, r5, r6, lr}
    7dce:	f7fc fff9 	bl	4dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7dd2:	4604      	mov	r4, r0
    7dd4:	f7fc fffc 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7dd8:	4621      	mov	r1, r4
    7dda:	f006 ffc4 	bl	ed66 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7dde:	0005      	movs	r5, r0
    7de0:	d028      	beq.n	7e34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd90>
    7de2:	4e19      	ldr	r6, [pc, #100]	; (7e48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda4>)
    7de4:	2004      	movs	r0, #4
    7de6:	6874      	ldr	r4, [r6, #4]
    7de8:	345c      	adds	r4, #92	; 0x5c
    7dea:	f000 f9d9 	bl	81a0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7dee:	b330      	cbz	r0, 7e3e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd9a>
    7df0:	200c      	movs	r0, #12
    7df2:	7020      	strb	r0, [r4, #0]
    7df4:	2001      	movs	r0, #1
    7df6:	f000 fa09 	bl	820c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7dfa:	7828      	ldrb	r0, [r5, #0]
    7dfc:	6871      	ldr	r1, [r6, #4]
    7dfe:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7e02:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    7e06:	2005      	movs	r0, #5
    7e08:	f7ff fb3a 	bl	7480 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7e0c:	4a0f      	ldr	r2, [pc, #60]	; (7e4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda8>)
    7e0e:	68b1      	ldr	r1, [r6, #8]
    7e10:	2520      	movs	r5, #32
    7e12:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7e14:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    7e18:	7808      	ldrb	r0, [r1, #0]
    7e1a:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    7e1e:	f020 0020 	bic.w	r0, r0, #32
    7e22:	4318      	orrs	r0, r3
    7e24:	7008      	strb	r0, [r1, #0]
    7e26:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7e28:	7ea2      	ldrb	r2, [r4, #26]
    7e2a:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    7e2e:	4011      	ands	r1, r2
    7e30:	7001      	strb	r1, [r0, #0]
    7e32:	bd70      	pop	{r4, r5, r6, pc}
    7e34:	f240 51ef 	movw	r1, #1519	; 0x5ef
    7e38:	2032      	movs	r0, #50	; 0x32
    7e3a:	f7fc fb97 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e42:	f7ff bf5b 	b.w	7cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7e46:	0000      	.short	0x0000
    7e48:	20000104 	.word	0x20000104
    7e4c:	20001094 	.word	0x20001094
    7e50:	b510      	push	{r4, lr}
    7e52:	2003      	movs	r0, #3
    7e54:	f000 f9a4 	bl	81a0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7e58:	b168      	cbz	r0, 7e76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdd2>
    7e5a:	2003      	movs	r0, #3
    7e5c:	f7ff fb10 	bl	7480 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7e60:	2201      	movs	r2, #1
    7e62:	4611      	mov	r1, r2
    7e64:	2000      	movs	r0, #0
    7e66:	f004 fa21 	bl	c2ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7e6a:	4905      	ldr	r1, [pc, #20]	; (7e80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xddc>)
    7e6c:	200b      	movs	r0, #11
    7e6e:	6849      	ldr	r1, [r1, #4]
    7e70:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7e74:	bd10      	pop	{r4, pc}
    7e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e7a:	f7ff bf3f 	b.w	7cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7e7e:	0000      	.short	0x0000
    7e80:	20000104 	.word	0x20000104
    7e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e88:	4c1d      	ldr	r4, [pc, #116]	; (7f00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe5c>)
    7e8a:	2600      	movs	r6, #0
    7e8c:	6860      	ldr	r0, [r4, #4]
    7e8e:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    7e92:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    7e96:	b911      	cbnz	r1, 7e9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdfa>
    7e98:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7e9c:	b350      	cbz	r0, 7ef4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe50>
    7e9e:	f004 fe00 	bl	caa2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7ea2:	4680      	mov	r8, r0
    7ea4:	6860      	ldr	r0, [r4, #4]
    7ea6:	4641      	mov	r1, r8
    7ea8:	6c40      	ldr	r0, [r0, #68]	; 0x44
    7eaa:	f7f9 ff89 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7eae:	4f15      	ldr	r7, [pc, #84]	; (7f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe60>)
    7eb0:	4605      	mov	r5, r0
    7eb2:	fb90 f0f7 	sdiv	r0, r0, r7
    7eb6:	fb07 5010 	mls	r0, r7, r0, r5
    7eba:	4241      	negs	r1, r0
    7ebc:	4640      	mov	r0, r8
    7ebe:	f7f9 ff4d 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7ec2:	6861      	ldr	r1, [r4, #4]
    7ec4:	6448      	str	r0, [r1, #68]	; 0x44
    7ec6:	fb95 f0f7 	sdiv	r0, r5, r7
    7eca:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7ecc:	4410      	add	r0, r2
    7ece:	6788      	str	r0, [r1, #120]	; 0x78
    7ed0:	f7fe f89c 	bl	600c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7ed4:	6861      	ldr	r1, [r4, #4]
    7ed6:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7ed8:	4290      	cmp	r0, r2
    7eda:	d80b      	bhi.n	7ef4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe50>
    7edc:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    7ee0:	678e      	str	r6, [r1, #120]	; 0x78
    7ee2:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    7ee6:	b110      	cbz	r0, 7eee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe4a>
    7ee8:	2001      	movs	r0, #1
    7eea:	f7fd ff79 	bl	5de0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7eee:	2001      	movs	r0, #1
    7ef0:	f7ff fd12 	bl	7918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x874>
    7ef4:	6861      	ldr	r1, [r4, #4]
    7ef6:	2002      	movs	r0, #2
    7ef8:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f00:	20000104 	.word	0x20000104
    7f04:	000f4240 	.word	0x000f4240
    7f08:	00007d1d 	.word	0x00007d1d
    7f0c:	00007cfd 	.word	0x00007cfd
    7f10:	0000ed47 	.word	0x0000ed47
    7f14:	0000ed47 	.word	0x0000ed47
    7f18:	0000ed47 	.word	0x0000ed47
    7f1c:	00007d2d 	.word	0x00007d2d
    7f20:	0000ed47 	.word	0x0000ed47
    7f24:	0000ed47 	.word	0x0000ed47
    7f28:	0000ed47 	.word	0x0000ed47
    7f2c:	0000ed47 	.word	0x0000ed47
    7f30:	0000ed47 	.word	0x0000ed47
    7f34:	00007e51 	.word	0x00007e51
    7f38:	00007dcd 	.word	0x00007dcd
    7f3c:	0000ed47 	.word	0x0000ed47
    7f40:	0000ed47 	.word	0x0000ed47
    7f44:	00007b21 	.word	0x00007b21
    7f48:	00007afd 	.word	0x00007afd
    7f4c:	00000000 	.word	0x00000000
    7f50:	0000ed51 	.word	0x0000ed51
    7f54:	0000ecef 	.word	0x0000ecef
    7f58:	0000ed01 	.word	0x0000ed01
    7f5c:	0000ed0f 	.word	0x0000ed0f
    7f60:	00007299 	.word	0x00007299
    7f64:	00007b9d 	.word	0x00007b9d
    7f68:	00007c7d 	.word	0x00007c7d
    7f6c:	00007f44 	.word	0x00007f44
    7f70:	00007f4c 	.word	0x00007f4c
    7f74:	00007f08 	.word	0x00007f08
    7f78:	00007f5c 	.word	0x00007f5c
    7f7c:	00007f54 	.word	0x00007f54
    7f80:	00007b59 	.word	0x00007b59
    7f84:	000079d5 	.word	0x000079d5
    7f88:	00007aa9 	.word	0x00007aa9
    7f8c:	0000ed63 	.word	0x0000ed63

00007f90 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    7f90:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7f94:	461d      	mov	r5, r3
    7f96:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    7f9a:	4616      	mov	r6, r2
    7f9c:	4688      	mov	r8, r1
    7f9e:	4681      	mov	r9, r0
    7fa0:	f7fc ff16 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7fa4:	4604      	mov	r4, r0
    7fa6:	f005 fd52 	bl	da4e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    7faa:	2801      	cmp	r0, #1
    7fac:	d063      	beq.n	8076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
    7fae:	4620      	mov	r0, r4
    7fb0:	f006 ffa2 	bl	eef8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    7fb4:	4604      	mov	r4, r0
    7fb6:	221c      	movs	r2, #28
    7fb8:	2100      	movs	r1, #0
    7fba:	f004 ff61 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7fbe:	2701      	movs	r7, #1
    7fc0:	7027      	strb	r7, [r4, #0]
    7fc2:	ea5f 0008 	movs.w	r0, r8
    7fc6:	d009      	beq.n	7fdc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    7fc8:	2801      	cmp	r0, #1
    7fca:	d00b      	beq.n	7fe4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    7fcc:	2802      	cmp	r0, #2
    7fce:	d02d      	beq.n	802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    7fd0:	f1b8 0f06 	cmp.w	r8, #6
    7fd4:	d02c      	beq.n	8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    7fd6:	f240 217d 	movw	r1, #637	; 0x27d
    7fda:	e049      	b.n	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
    7fdc:	7aa0      	ldrb	r0, [r4, #10]
    7fde:	f040 0001 	orr.w	r0, r0, #1
    7fe2:	e026      	b.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    7fe4:	7aa0      	ldrb	r0, [r4, #10]
    7fe6:	f040 0005 	orr.w	r0, r0, #5
    7fea:	bf00      	nop
    7fec:	f040 0010 	orr.w	r0, r0, #16
    7ff0:	72a0      	strb	r0, [r4, #10]
    7ff2:	1c63      	adds	r3, r4, #1
    7ff4:	1ca2      	adds	r2, r4, #2
    7ff6:	4648      	mov	r0, r9
    7ff8:	990a      	ldr	r1, [sp, #40]	; 0x28
    7ffa:	f006 ff62 	bl	eec2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    7ffe:	f884 a009 	strb.w	sl, [r4, #9]
    8002:	7327      	strb	r7, [r4, #12]
    8004:	2000      	movs	r0, #0
    8006:	7360      	strb	r0, [r4, #13]
    8008:	20ff      	movs	r0, #255	; 0xff
    800a:	73a0      	strb	r0, [r4, #14]
    800c:	7aa1      	ldrb	r1, [r4, #10]
    800e:	0749      	lsls	r1, r1, #29
    8010:	d518      	bpl.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    8012:	f104 0014 	add.w	r0, r4, #20
    8016:	1e41      	subs	r1, r0, #1
    8018:	2d02      	cmp	r5, #2
    801a:	d00d      	beq.n	8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    801c:	2d03      	cmp	r5, #3
    801e:	d00b      	beq.n	8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    8020:	f8d9 2008 	ldr.w	r2, [r9, #8]
    8024:	6813      	ldr	r3, [r2, #0]
    8026:	6003      	str	r3, [r0, #0]
    8028:	8892      	ldrh	r2, [r2, #4]
    802a:	e008      	b.n	803e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
    802c:	7aa0      	ldrb	r0, [r4, #10]
    802e:	e7dd      	b.n	7fec <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8030:	7aa0      	ldrb	r0, [r4, #10]
    8032:	f040 0002 	orr.w	r0, r0, #2
    8036:	e7d9      	b.n	7fec <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8038:	6832      	ldr	r2, [r6, #0]
    803a:	6002      	str	r2, [r0, #0]
    803c:	88b2      	ldrh	r2, [r6, #4]
    803e:	8082      	strh	r2, [r0, #4]
    8040:	700d      	strb	r5, [r1, #0]
    8042:	e000      	b.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    8044:	74e0      	strb	r0, [r4, #19]
    8046:	207f      	movs	r0, #127	; 0x7f
    8048:	76a0      	strb	r0, [r4, #26]
    804a:	f884 b01b 	strb.w	fp, [r4, #27]
    804e:	f7fc feb9 	bl	4dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8052:	4604      	mov	r4, r0
    8054:	f7fc febc 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8058:	2201      	movs	r2, #1
    805a:	4621      	mov	r1, r4
    805c:	f006 ff55 	bl	ef0a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    8060:	b120      	cbz	r0, 806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    8062:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8066:	2005      	movs	r0, #5
    8068:	f000 b8d0 	b.w	820c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    806c:	f240 219d 	movw	r1, #669	; 0x29d
    8070:	2033      	movs	r0, #51	; 0x33
    8072:	f7fc fa7b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8076:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

0000807c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8080:	4616      	mov	r6, r2
    8082:	460c      	mov	r4, r1
    8084:	4605      	mov	r5, r0
    8086:	f006 fbaa 	bl	e7de <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    808a:	7460      	strb	r0, [r4, #17]
    808c:	4628      	mov	r0, r5
    808e:	f006 fb9d 	bl	e7cc <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    8092:	74a0      	strb	r0, [r4, #18]
    8094:	1cea      	adds	r2, r5, #3
    8096:	4b14      	ldr	r3, [pc, #80]	; (80e8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    8098:	1d90      	adds	r0, r2, #6
    809a:	2100      	movs	r1, #0
    809c:	2e07      	cmp	r6, #7
    809e:	d21f      	bcs.n	80e0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    80a0:	e8df f006 	tbb	[pc, r6]
    80a4:	1e110b04 	.word	0x1e110b04
    80a8:	00041e13 	.word	0x00041e13
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	e00d      	b.n	80cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    80b0:	60e0      	str	r0, [r4, #12]
    80b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80b6:	60e1      	str	r1, [r4, #12]
    80b8:	e7fb      	b.n	80b2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    80ba:	785b      	ldrb	r3, [r3, #1]
    80bc:	7063      	strb	r3, [r4, #1]
    80be:	e9c4 2001 	strd	r2, r0, [r4, #4]
    80c2:	7421      	strb	r1, [r4, #16]
    80c4:	e7f7      	b.n	80b6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    80c6:	789b      	ldrb	r3, [r3, #2]
    80c8:	e000      	b.n	80cc <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    80ca:	78db      	ldrb	r3, [r3, #3]
    80cc:	7063      	strb	r3, [r4, #1]
    80ce:	e9c4 2101 	strd	r2, r1, [r4, #4]
    80d2:	786a      	ldrb	r2, [r5, #1]
    80d4:	1f92      	subs	r2, r2, #6
    80d6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    80da:	7422      	strb	r2, [r4, #16]
    80dc:	d0eb      	beq.n	80b6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    80de:	e7e7      	b.n	80b0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    80e0:	7061      	strb	r1, [r4, #1]
    80e2:	6061      	str	r1, [r4, #4]
    80e4:	60a1      	str	r1, [r4, #8]
    80e6:	e7ec      	b.n	80c2 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    80e8:	00010355 	.word	0x00010355

000080ec <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    80ec:	b570      	push	{r4, r5, r6, lr}
    80ee:	f003 ff5d 	bl	bfac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    80f2:	4c0e      	ldr	r4, [pc, #56]	; (812c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    80f4:	4606      	mov	r6, r0
    80f6:	7860      	ldrb	r0, [r4, #1]
    80f8:	b170      	cbz	r0, 8118 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    80fa:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    80fe:	4632      	mov	r2, r6
    8100:	4628      	mov	r0, r5
    8102:	f006 f864 	bl	e1ce <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8106:	6060      	str	r0, [r4, #4]
    8108:	42a8      	cmp	r0, r5
    810a:	d005      	beq.n	8118 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    810c:	68e1      	ldr	r1, [r4, #12]
    810e:	1b40      	subs	r0, r0, r5
    8110:	4408      	add	r0, r1
    8112:	60e0      	str	r0, [r4, #12]
    8114:	f7fa fe16 	bl	2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8118:	6860      	ldr	r0, [r4, #4]
    811a:	42b0      	cmp	r0, r6
    811c:	d301      	bcc.n	8122 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    811e:	7820      	ldrb	r0, [r4, #0]
    8120:	b108      	cbz	r0, 8126 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    8122:	2000      	movs	r0, #0
    8124:	bd70      	pop	{r4, r5, r6, pc}
    8126:	2001      	movs	r0, #1
    8128:	bd70      	pop	{r4, r5, r6, pc}
    812a:	0000      	.short	0x0000
    812c:	20001118 	.word	0x20001118

00008130 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    8130:	b510      	push	{r4, lr}
    8132:	2905      	cmp	r1, #5
    8134:	d22d      	bcs.n	8192 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    8136:	e8df f001 	tbb	[pc, r1]
    813a:	0a05      	.short	0x0a05
    813c:	00280e03 	.word	0x00280e03
    8140:	2100      	movs	r1, #0
    8142:	e000      	b.n	8146 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    8144:	2101      	movs	r1, #1
    8146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    814a:	f000 babb 	b.w	86c4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
    814e:	2103      	movs	r1, #3
    8150:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    8154:	bd10      	pop	{r4, pc}
    8156:	4911      	ldr	r1, [pc, #68]	; (819c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    8158:	4604      	mov	r4, r0
    815a:	68c0      	ldr	r0, [r0, #12]
    815c:	6008      	str	r0, [r1, #0]
    815e:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    8162:	6220      	str	r0, [r4, #32]
    8164:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    8168:	83a0      	strh	r0, [r4, #28]
    816a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    816e:	60e0      	str	r0, [r4, #12]
    8170:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    8174:	82a0      	strh	r0, [r4, #20]
    8176:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    817a:	82e0      	strh	r0, [r4, #22]
    817c:	4620      	mov	r0, r4
    817e:	f006 fefe 	bl	ef7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    8182:	2002      	movs	r0, #2
    8184:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8188:	bd10      	pop	{r4, pc}
    818a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    818e:	f006 bef6 	b.w	ef7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    8192:	f640 3158 	movw	r1, #2904	; 0xb58
    8196:	2035      	movs	r0, #53	; 0x35
    8198:	f7fc f9e8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    819c:	20000114 	.word	0x20000114

000081a0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    81a0:	b570      	push	{r4, r5, r6, lr}
    81a2:	4606      	mov	r6, r0
    81a4:	f004 fc7d 	bl	caa2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    81a8:	4c17      	ldr	r4, [pc, #92]	; (8208 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
    81aa:	4601      	mov	r1, r0
    81ac:	6920      	ldr	r0, [r4, #16]
    81ae:	f7f9 fe07 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    81b2:	4605      	mov	r5, r0
    81b4:	b156      	cbz	r6, 81cc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    81b6:	2e03      	cmp	r6, #3
    81b8:	d00d      	beq.n	81d6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    81ba:	2e04      	cmp	r6, #4
    81bc:	d00e      	beq.n	81dc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
    81be:	2e06      	cmp	r6, #6
    81c0:	d01d      	beq.n	81fe <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    81c2:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    81c6:	2035      	movs	r0, #53	; 0x35
    81c8:	f7fc f9d0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81cc:	2001      	movs	r0, #1
    81ce:	f006 feba 	bl	ef46 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    81d2:	3098      	adds	r0, #152	; 0x98
    81d4:	e004      	b.n	81e0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    81d6:	f44f 7057 	mov.w	r0, #860	; 0x35c
    81da:	e001      	b.n	81e0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    81dc:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    81e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    81e2:	4405      	add	r5, r0
    81e4:	39f1      	subs	r1, #241	; 0xf1
    81e6:	428d      	cmp	r5, r1
    81e8:	d307      	bcc.n	81fa <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    81ea:	2600      	movs	r6, #0
    81ec:	f000 fd36 	bl	8c5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a4>
    81f0:	b140      	cbz	r0, 8204 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    81f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    81f4:	38f1      	subs	r0, #241	; 0xf1
    81f6:	4285      	cmp	r5, r0
    81f8:	d203      	bcs.n	8202 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    81fa:	2601      	movs	r6, #1
    81fc:	e002      	b.n	8204 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    81fe:	2001      	movs	r0, #1
    8200:	bd70      	pop	{r4, r5, r6, pc}
    8202:	2600      	movs	r6, #0
    8204:	4630      	mov	r0, r6
    8206:	bd70      	pop	{r4, r5, r6, pc}
    8208:	20001128 	.word	0x20001128

0000820c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    820c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    820e:	2501      	movs	r5, #1
    8210:	4c24      	ldr	r4, [pc, #144]	; (82a4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    8212:	2806      	cmp	r0, #6
    8214:	d243      	bcs.n	829e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    8216:	e8df f000 	tbb	[pc, r0]
    821a:	1903      	.short	0x1903
    821c:	3e232319 	.word	0x3e232319
    8220:	f7fe fae4 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8224:	7860      	ldrb	r0, [r4, #1]
    8226:	bb88      	cbnz	r0, 828c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8228:	2200      	movs	r2, #0
    822a:	4611      	mov	r1, r2
    822c:	4668      	mov	r0, sp
    822e:	f000 fd5f 	bl	8cf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
    8232:	b148      	cbz	r0, 8248 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    8234:	f7fe fd32 	bl	6c9c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8238:	7800      	ldrb	r0, [r0, #0]
    823a:	4669      	mov	r1, sp
    823c:	f006 feb1 	bl	efa2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    8240:	bb20      	cbnz	r0, 828c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8242:	f640 2163 	movw	r1, #2659	; 0xa63
    8246:	e01c      	b.n	8282 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8248:	70e5      	strb	r5, [r4, #3]
    824a:	e020      	b.n	828e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    824c:	2802      	cmp	r0, #2
    824e:	d005      	beq.n	825c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    8250:	2000      	movs	r0, #0
    8252:	b004      	add	sp, #16
    8254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8258:	f000 ba50 	b.w	86fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x244>
    825c:	2001      	movs	r0, #1
    825e:	e7f8      	b.n	8252 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    8260:	2804      	cmp	r0, #4
    8262:	d011      	beq.n	8288 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    8264:	f05f 0600 	movs.w	r6, #0
    8268:	f7fe fac0 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    826c:	7725      	strb	r5, [r4, #28]
    826e:	7766      	strb	r6, [r4, #29]
    8270:	69a1      	ldr	r1, [r4, #24]
    8272:	2000      	movs	r0, #0
    8274:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    8278:	f000 faca 	bl	8810 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    827c:	b130      	cbz	r0, 828c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    827e:	f640 3118 	movw	r1, #2840	; 0xb18
    8282:	2035      	movs	r0, #53	; 0x35
    8284:	f7fc f972 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8288:	2601      	movs	r6, #1
    828a:	e7ed      	b.n	8268 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    828c:	e7ff      	b.n	828e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    828e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8292:	f000 baad 	b.w	87f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    8296:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    829a:	f7fe baa7 	b.w	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    829e:	f640 31d4 	movw	r1, #3028	; 0xbd4
    82a2:	e7ee      	b.n	8282 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    82a4:	20001128 	.word	0x20001128

000082a8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    82a8:	b508      	push	{r3, lr}
    82aa:	2244      	movs	r2, #68	; 0x44
    82ac:	2100      	movs	r1, #0
    82ae:	480c      	ldr	r0, [pc, #48]	; (82e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    82b0:	f004 fde6 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    82b4:	f7fe fcf2 	bl	6c9c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    82b8:	2120      	movs	r1, #32
    82ba:	7001      	strb	r1, [r0, #0]
    82bc:	4808      	ldr	r0, [pc, #32]	; (82e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    82be:	3810      	subs	r0, #16
    82c0:	2100      	movs	r1, #0
    82c2:	6001      	str	r1, [r0, #0]
    82c4:	6041      	str	r1, [r0, #4]
    82c6:	6081      	str	r1, [r0, #8]
    82c8:	60c1      	str	r1, [r0, #12]
    82ca:	f000 f80b 	bl	82e4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    82ce:	f242 7010 	movw	r0, #10000	; 0x2710
    82d2:	9000      	str	r0, [sp, #0]
    82d4:	2201      	movs	r2, #1
    82d6:	4669      	mov	r1, sp
    82d8:	1080      	asrs	r0, r0, #2
    82da:	f000 fad7 	bl	888c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d4>
    82de:	bd08      	pop	{r3, pc}
    82e0:	20001128 	.word	0x20001128

000082e4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    82e4:	4804      	ldr	r0, [pc, #16]	; (82f8 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    82e6:	b510      	push	{r4, lr}
    82e8:	7800      	ldrb	r0, [r0, #0]
    82ea:	b108      	cbz	r0, 82f0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    82ec:	f000 f8a8 	bl	8440 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    82f0:	f000 f8fe 	bl	84f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    82f4:	2000      	movs	r0, #0
    82f6:	bd10      	pop	{r4, pc}
    82f8:	20001128 	.word	0x20001128

000082fc <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    82fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8300:	4c1e      	ldr	r4, [pc, #120]	; (837c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    8302:	4607      	mov	r7, r0
    8304:	460e      	mov	r6, r1
    8306:	7820      	ldrb	r0, [r4, #0]
    8308:	b118      	cbz	r0, 8312 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x16>
    830a:	200c      	movs	r0, #12
    830c:	b004      	add	sp, #16
    830e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8312:	f7fe fcc3 	bl	6c9c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8316:	4605      	mov	r5, r0
    8318:	61a7      	str	r7, [r4, #24]
    831a:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    831e:	b110      	cbz	r0, 8326 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x2a>
    8320:	f44f 6184 	mov.w	r1, #1056	; 0x420
    8324:	e026      	b.n	8374 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    8326:	2005      	movs	r0, #5
    8328:	7020      	strb	r0, [r4, #0]
    832a:	2000      	movs	r0, #0
    832c:	7060      	strb	r0, [r4, #1]
    832e:	7720      	strb	r0, [r4, #28]
    8330:	4630      	mov	r0, r6
    8332:	f000 f911 	bl	8558 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    8336:	f000 fc41 	bl	8bbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x704>
    833a:	6320      	str	r0, [r4, #48]	; 0x30
    833c:	2100      	movs	r1, #0
    833e:	4810      	ldr	r0, [pc, #64]	; (8380 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x84>)
    8340:	f7fa fbf6 	bl	2b30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8344:	7028      	strb	r0, [r5, #0]
    8346:	2820      	cmp	r0, #32
    8348:	d00c      	beq.n	8364 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x68>
    834a:	2200      	movs	r2, #0
    834c:	2101      	movs	r1, #1
    834e:	4668      	mov	r0, sp
    8350:	f000 fcce 	bl	8cf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
    8354:	b148      	cbz	r0, 836a <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6e>
    8356:	7828      	ldrb	r0, [r5, #0]
    8358:	4669      	mov	r1, sp
    835a:	f006 fe22 	bl	efa2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    835e:	b138      	cbz	r0, 8370 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    8360:	2000      	movs	r0, #0
    8362:	e7d3      	b.n	830c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    8364:	f240 412f 	movw	r1, #1071	; 0x42f
    8368:	e004      	b.n	8374 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    836a:	f240 4132 	movw	r1, #1074	; 0x432
    836e:	e001      	b.n	8374 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    8370:	f240 4133 	movw	r1, #1075	; 0x433
    8374:	2035      	movs	r0, #53	; 0x35
    8376:	f7fc f8f9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    837a:	0000      	.short	0x0000
    837c:	20001128 	.word	0x20001128
    8380:	00008579 	.word	0x00008579

00008384 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    8384:	4902      	ldr	r1, [pc, #8]	; (8390 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    8386:	6989      	ldr	r1, [r1, #24]
    8388:	6001      	str	r1, [r0, #0]
    838a:	f000 b859 	b.w	8440 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    838e:	0000      	.short	0x0000
    8390:	20001128 	.word	0x20001128

00008394 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    8394:	4901      	ldr	r1, [pc, #4]	; (839c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    8396:	7048      	strb	r0, [r1, #1]
    8398:	4770      	bx	lr
    839a:	0000      	.short	0x0000
    839c:	20001118 	.word	0x20001118

000083a0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    83a0:	b570      	push	{r4, r5, r6, lr}
    83a2:	4605      	mov	r5, r0
    83a4:	4907      	ldr	r1, [pc, #28]	; (83c4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
    83a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    83aa:	fbb1 f4f0 	udiv	r4, r1, r0
    83ae:	f006 fe48 	bl	f042 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    83b2:	1901      	adds	r1, r0, r4
    83b4:	4628      	mov	r0, r5
    83b6:	f201 1137 	addw	r1, r1, #311	; 0x137
    83ba:	f006 fbc6 	bl	eb4a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    83be:	b280      	uxth	r0, r0
    83c0:	bd70      	pop	{r4, r5, r6, pc}
    83c2:	0000      	.short	0x0000
    83c4:	00012105 	.word	0x00012105

000083c8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    83c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    83ca:	4606      	mov	r6, r0
    83cc:	b111      	cbz	r1, 83d4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
    83ce:	2011      	movs	r0, #17
    83d0:	b004      	add	sp, #16
    83d2:	bd70      	pop	{r4, r5, r6, pc}
    83d4:	4c18      	ldr	r4, [pc, #96]	; (8438 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    83d6:	7820      	ldrb	r0, [r4, #0]
    83d8:	b108      	cbz	r0, 83de <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
    83da:	200c      	movs	r0, #12
    83dc:	e7f8      	b.n	83d0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    83de:	f7fe fc5d 	bl	6c9c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    83e2:	4605      	mov	r5, r0
    83e4:	2000      	movs	r0, #0
    83e6:	7060      	strb	r0, [r4, #1]
    83e8:	2004      	movs	r0, #4
    83ea:	7020      	strb	r0, [r4, #0]
    83ec:	4630      	mov	r0, r6
    83ee:	f000 f8b3 	bl	8558 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    83f2:	f000 fbe3 	bl	8bbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x704>
    83f6:	6320      	str	r0, [r4, #48]	; 0x30
    83f8:	2100      	movs	r1, #0
    83fa:	4810      	ldr	r0, [pc, #64]	; (843c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
    83fc:	f7fa fb98 	bl	2b30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8400:	7028      	strb	r0, [r5, #0]
    8402:	2820      	cmp	r0, #32
    8404:	d00c      	beq.n	8420 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
    8406:	2200      	movs	r2, #0
    8408:	2101      	movs	r1, #1
    840a:	4668      	mov	r0, sp
    840c:	f000 fc70 	bl	8cf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
    8410:	b148      	cbz	r0, 8426 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
    8412:	7828      	ldrb	r0, [r5, #0]
    8414:	4669      	mov	r1, sp
    8416:	f006 fdc4 	bl	efa2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    841a:	b138      	cbz	r0, 842c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
    841c:	2000      	movs	r0, #0
    841e:	e7d7      	b.n	83d0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    8420:	f240 4196 	movw	r1, #1174	; 0x496
    8424:	e004      	b.n	8430 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    8426:	f44f 6193 	mov.w	r1, #1176	; 0x498
    842a:	e001      	b.n	8430 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    842c:	f240 4199 	movw	r1, #1177	; 0x499
    8430:	2035      	movs	r0, #53	; 0x35
    8432:	f7fc f89b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8436:	0000      	.short	0x0000
    8438:	20001128 	.word	0x20001128
    843c:	00008579 	.word	0x00008579

00008440 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    8440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8444:	2700      	movs	r7, #0
    8446:	f7fe fc29 	bl	6c9c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    844a:	4c17      	ldr	r4, [pc, #92]	; (84a8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
    844c:	4605      	mov	r5, r0
    844e:	7820      	ldrb	r0, [r4, #0]
    8450:	2804      	cmp	r0, #4
    8452:	d005      	beq.n	8460 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    8454:	7820      	ldrb	r0, [r4, #0]
    8456:	2805      	cmp	r0, #5
    8458:	d002      	beq.n	8460 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    845a:	200c      	movs	r0, #12
    845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8460:	2001      	movs	r0, #1
    8462:	7060      	strb	r0, [r4, #1]
    8464:	7b20      	ldrb	r0, [r4, #12]
    8466:	b160      	cbz	r0, 8482 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    8468:	f3ef 8610 	mrs	r6, PRIMASK
    846c:	b672      	cpsid	i
    846e:	7b20      	ldrb	r0, [r4, #12]
    8470:	b128      	cbz	r0, 847e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    8472:	7b60      	ldrb	r0, [r4, #13]
    8474:	b118      	cbz	r0, 847e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    8476:	f7fe fde3 	bl	7040 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    847a:	f000 f9b9 	bl	87f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    847e:	b126      	cbz	r6, 848a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    8480:	e004      	b.n	848c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    8482:	7828      	ldrb	r0, [r5, #0]
    8484:	f7fa f90a 	bl	269c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8488:	e000      	b.n	848c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    848a:	b662      	cpsie	i
    848c:	7828      	ldrb	r0, [r5, #0]
    848e:	f7fa fa43 	bl	2918 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8492:	f000 fd5d 	bl	8f50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa98>
    8496:	2000      	movs	r0, #0
    8498:	7060      	strb	r0, [r4, #1]
    849a:	7f20      	ldrb	r0, [r4, #28]
    849c:	b100      	cbz	r0, 84a0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
    849e:	270c      	movs	r7, #12
    84a0:	f000 fd80 	bl	8fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
    84a4:	4638      	mov	r0, r7
    84a6:	e7d9      	b.n	845c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    84a8:	20001128 	.word	0x20001128

000084ac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    84ac:	4801      	ldr	r0, [pc, #4]	; (84b4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    84ae:	7800      	ldrb	r0, [r0, #0]
    84b0:	4770      	bx	lr
    84b2:	0000      	.short	0x0000
    84b4:	20001128 	.word	0x20001128

000084b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    84b8:	490c      	ldr	r1, [pc, #48]	; (84ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    84ba:	b508      	push	{r3, lr}
    84bc:	7809      	ldrb	r1, [r1, #0]
    84be:	b121      	cbz	r1, 84ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    84c0:	f240 414f 	movw	r1, #1103	; 0x44f
    84c4:	2035      	movs	r0, #53	; 0x35
    84c6:	f7fc f851 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84ca:	2300      	movs	r3, #0
    84cc:	9300      	str	r3, [sp, #0]
    84ce:	7801      	ldrb	r1, [r0, #0]
    84d0:	461a      	mov	r2, r3
    84d2:	07c9      	lsls	r1, r1, #31
    84d4:	d003      	beq.n	84de <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    84d6:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    84da:	2201      	movs	r2, #1
    84dc:	9000      	str	r0, [sp, #0]
    84de:	4669      	mov	r1, sp
    84e0:	4618      	mov	r0, r3
    84e2:	f000 f9d3 	bl	888c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d4>
    84e6:	2000      	movs	r0, #0
    84e8:	bd08      	pop	{r3, pc}
    84ea:	0000      	.short	0x0000
    84ec:	20001128 	.word	0x20001128
    84f0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    84f2:	4c18      	ldr	r4, [pc, #96]	; (8554 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    84f4:	2001      	movs	r0, #1
    84f6:	7020      	strb	r0, [r4, #0]
    84f8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    84fc:	e00b      	b.n	8516 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    84fe:	2100      	movs	r1, #0
    8500:	f005 fce5 	bl	dece <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8504:	0006      	movs	r6, r0
    8506:	d010      	beq.n	852a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    8508:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    850c:	f7fa fa04 	bl	2918 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8510:	4630      	mov	r0, r6
    8512:	f006 fd5e 	bl	efd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    8516:	4669      	mov	r1, sp
    8518:	2000      	movs	r0, #0
    851a:	f005 fce1 	bl	dee0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    851e:	b180      	cbz	r0, 8542 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    8520:	f44f 710f 	mov.w	r1, #572	; 0x23c
    8524:	2035      	movs	r0, #53	; 0x35
    8526:	f7fc f821 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    852a:	f240 5141 	movw	r1, #1345	; 0x541
    852e:	e7f9      	b.n	8524 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    8530:	9802      	ldr	r0, [sp, #8]
    8532:	b130      	cbz	r0, 8542 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    8534:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    8538:	b119      	cbz	r1, 8542 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    853a:	8800      	ldrh	r0, [r0, #0]
    853c:	42a8      	cmp	r0, r5
    853e:	d1de      	bne.n	84fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    8540:	e004      	b.n	854c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    8542:	4668      	mov	r0, sp
    8544:	f7fc fa42 	bl	49cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8548:	2800      	cmp	r0, #0
    854a:	d0f1      	beq.n	8530 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    854c:	2000      	movs	r0, #0
    854e:	7020      	strb	r0, [r4, #0]
    8550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8552:	0000      	.short	0x0000
    8554:	20001118 	.word	0x20001118
    8558:	4906      	ldr	r1, [pc, #24]	; (8574 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
    855a:	b140      	cbz	r0, 856e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
    855c:	2201      	movs	r2, #1
    855e:	708a      	strb	r2, [r1, #2]
    8560:	f242 7210 	movw	r2, #10000	; 0x2710
    8564:	4350      	muls	r0, r2
    8566:	684a      	ldr	r2, [r1, #4]
    8568:	4410      	add	r0, r2
    856a:	6208      	str	r0, [r1, #32]
    856c:	4770      	bx	lr
    856e:	2000      	movs	r0, #0
    8570:	7088      	strb	r0, [r1, #2]
    8572:	4770      	bx	lr
    8574:	20001128 	.word	0x20001128
    8578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    857a:	460d      	mov	r5, r1
    857c:	2001      	movs	r0, #1
    857e:	f006 fccb 	bl	ef18 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8582:	b2c4      	uxtb	r4, r0
    8584:	200b      	movs	r0, #11
    8586:	f006 fcc7 	bl	ef18 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    858a:	b2c0      	uxtb	r0, r0
    858c:	4284      	cmp	r4, r0
    858e:	d002      	beq.n	8596 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
    8590:	f240 21c5 	movw	r1, #709	; 0x2c5
    8594:	e073      	b.n	867e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    8596:	f7fe fb81 	bl	6c9c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    859a:	2601      	movs	r6, #1
    859c:	4c3b      	ldr	r4, [pc, #236]	; (868c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    859e:	2d09      	cmp	r5, #9
    85a0:	d270      	bcs.n	8684 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    85a2:	e8df f005 	tbb	[pc, r5]
    85a6:	3605      	.short	0x3605
    85a8:	6f464a4a 	.word	0x6f464a4a
    85ac:	006a665e 	.word	0x006a665e
    85b0:	7326      	strb	r6, [r4, #12]
    85b2:	7861      	ldrb	r1, [r4, #1]
    85b4:	2900      	cmp	r1, #0
    85b6:	d12b      	bne.n	8610 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    85b8:	7800      	ldrb	r0, [r0, #0]
    85ba:	f7f9 fc25 	bl	1e08 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    85be:	4605      	mov	r5, r0
    85c0:	6120      	str	r0, [r4, #16]
    85c2:	f000 fd09 	bl	8fd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
    85c6:	b118      	cbz	r0, 85d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    85c8:	2000      	movs	r0, #0
    85ca:	f88d 0004 	strb.w	r0, [sp, #4]
    85ce:	e001      	b.n	85d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
    85d0:	f88d 6004 	strb.w	r6, [sp, #4]
    85d4:	4629      	mov	r1, r5
    85d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    85d8:	f7f9 fbf2 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    85dc:	6861      	ldr	r1, [r4, #4]
    85de:	fbb0 f2f1 	udiv	r2, r0, r1
    85e2:	fb01 0012 	mls	r0, r1, r2, r0
    85e6:	b150      	cbz	r0, 85fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
    85e8:	f05f 0000 	movs.w	r0, #0
    85ec:	f88d 0005 	strb.w	r0, [sp, #5]
    85f0:	4668      	mov	r0, sp
    85f2:	f7fe fc8d 	bl	6f10 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    85f6:	b120      	cbz	r0, 8602 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
    85f8:	f240 21ff 	movw	r1, #767	; 0x2ff
    85fc:	e03f      	b.n	867e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    85fe:	2001      	movs	r0, #1
    8600:	e7f4      	b.n	85ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
    8602:	4922      	ldr	r1, [pc, #136]	; (868c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    8604:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8606:	3910      	subs	r1, #16
    8608:	38e0      	subs	r0, #224	; 0xe0
    860a:	60c8      	str	r0, [r1, #12]
    860c:	f7fa fb9a 	bl	2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8610:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8612:	7860      	ldrb	r0, [r4, #1]
    8614:	b128      	cbz	r0, 8622 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    8616:	f7fe fd13 	bl	7040 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    861a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    861e:	f000 b8e7 	b.w	87f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    8622:	7366      	strb	r6, [r4, #13]
    8624:	f7fe fd06 	bl	7034 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    8628:	2800      	cmp	r0, #0
    862a:	d0f1      	beq.n	8610 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    862c:	f240 3112 	movw	r1, #786	; 0x312
    8630:	e025      	b.n	867e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    8632:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8636:	f003 bea9 	b.w	c38c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    863a:	7805      	ldrb	r5, [r0, #0]
    863c:	2201      	movs	r2, #1
    863e:	2100      	movs	r1, #0
    8640:	4668      	mov	r0, sp
    8642:	f000 fb55 	bl	8cf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
    8646:	b140      	cbz	r0, 865a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
    8648:	4669      	mov	r1, sp
    864a:	4628      	mov	r0, r5
    864c:	f006 fca9 	bl	efa2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    8650:	2800      	cmp	r0, #0
    8652:	d1dd      	bne.n	8610 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    8654:	f640 217f 	movw	r1, #2687	; 0xa7f
    8658:	e011      	b.n	867e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    865a:	70e6      	strb	r6, [r4, #3]
    865c:	f000 f818 	bl	8690 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    8660:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8662:	f000 fafb 	bl	8c5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a4>
    8666:	2800      	cmp	r0, #0
    8668:	d1fa      	bne.n	8660 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    866a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    866e:	f006 bb3c 	b.w	ecea <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    8672:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8676:	f000 b80b 	b.w	8690 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    867a:	f240 3136 	movw	r1, #822	; 0x336
    867e:	2035      	movs	r0, #53	; 0x35
    8680:	f7fb ff74 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8684:	f240 313a 	movw	r1, #826	; 0x33a
    8688:	e7f9      	b.n	867e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    868a:	0000      	.short	0x0000
    868c:	20001128 	.word	0x20001128
    8690:	b510      	push	{r4, lr}
    8692:	4c0b      	ldr	r4, [pc, #44]	; (86c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x208>)
    8694:	7820      	ldrb	r0, [r4, #0]
    8696:	b130      	cbz	r0, 86a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
    8698:	f000 fc5a 	bl	8f50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa98>
    869c:	78e0      	ldrb	r0, [r4, #3]
    869e:	b158      	cbz	r0, 86b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    86a0:	7f20      	ldrb	r0, [r4, #28]
    86a2:	b128      	cbz	r0, 86b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f8>
    86a4:	e008      	b.n	86b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    86a6:	f240 21b1 	movw	r1, #689	; 0x2b1
    86aa:	2035      	movs	r0, #53	; 0x35
    86ac:	f7fb ff5e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86b0:	f7fe fcd8 	bl	7064 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    86b4:	f7fe f89a 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    86b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86bc:	f000 bc72 	b.w	8fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
    86c0:	20001128 	.word	0x20001128
    86c4:	b510      	push	{r4, lr}
    86c6:	4604      	mov	r4, r0
    86c8:	2901      	cmp	r1, #1
    86ca:	d102      	bne.n	86d2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21a>
    86cc:	480a      	ldr	r0, [pc, #40]	; (86f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x240>)
    86ce:	7800      	ldrb	r0, [r0, #0]
    86d0:	b140      	cbz	r0, 86e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>
    86d2:	2004      	movs	r0, #4
    86d4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    86d8:	f003 fca4 	bl	c024 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    86dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86e0:	f7fa ba4e 	b.w	2b80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    86e4:	2200      	movs	r2, #0
    86e6:	2101      	movs	r1, #1
    86e8:	4620      	mov	r0, r4
    86ea:	f006 fc8a 	bl	f002 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    86ee:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    86f2:	1c40      	adds	r0, r0, #1
    86f4:	8020      	strh	r0, [r4, #0]
    86f6:	e7ef      	b.n	86d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x220>
    86f8:	20001118 	.word	0x20001118
    86fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8700:	4c39      	ldr	r4, [pc, #228]	; (87e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x330>)
    8702:	4682      	mov	sl, r0
    8704:	6926      	ldr	r6, [r4, #16]
    8706:	f003 fc51 	bl	bfac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    870a:	4605      	mov	r5, r0
    870c:	69a0      	ldr	r0, [r4, #24]
    870e:	2201      	movs	r2, #1
    8710:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    8714:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    8718:	3062      	adds	r0, #98	; 0x62
    871a:	2101      	movs	r1, #1
    871c:	7281      	strb	r1, [r0, #10]
    871e:	69a0      	ldr	r0, [r4, #24]
    8720:	2100      	movs	r1, #0
    8722:	302c      	adds	r0, #44	; 0x2c
    8724:	f006 f9f8 	bl	eb18 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8728:	2101      	movs	r1, #1
    872a:	2000      	movs	r0, #0
    872c:	f006 fc95 	bl	f05a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    8730:	69a7      	ldr	r7, [r4, #24]
    8732:	1971      	adds	r1, r6, r5
    8734:	4408      	add	r0, r1
    8736:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    873a:	f8d7 800c 	ldr.w	r8, [r7, #12]
    873e:	f002 fb67 	bl	ae10 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    8742:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    8746:	4288      	cmp	r0, r1
    8748:	d00a      	beq.n	8760 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2a8>
    874a:	464a      	mov	r2, r9
    874c:	4641      	mov	r1, r8
    874e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    8752:	f006 fdb0 	bl	f2b6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8756:	4540      	cmp	r0, r8
    8758:	d903      	bls.n	8762 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2aa>
    875a:	f240 51f6 	movw	r1, #1526	; 0x5f6
    875e:	e022      	b.n	87a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ee>
    8760:	2000      	movs	r0, #0
    8762:	4922      	ldr	r1, [pc, #136]	; (87ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x334>)
    8764:	4607      	mov	r7, r0
    8766:	6849      	ldr	r1, [r1, #4]
    8768:	4288      	cmp	r0, r1
    876a:	69a0      	ldr	r0, [r4, #24]
    876c:	68c1      	ldr	r1, [r0, #12]
    876e:	d202      	bcs.n	8776 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2be>
    8770:	440f      	add	r7, r1
    8772:	6201      	str	r1, [r0, #32]
    8774:	e008      	b.n	8788 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d0>
    8776:	4638      	mov	r0, r7
    8778:	f005 fee5 	bl	e546 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    877c:	69a1      	ldr	r1, [r4, #24]
    877e:	68c9      	ldr	r1, [r1, #12]
    8780:	f005 fedd 	bl	e53e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8784:	69a1      	ldr	r1, [r4, #24]
    8786:	6208      	str	r0, [r1, #32]
    8788:	69a0      	ldr	r0, [r4, #24]
    878a:	68c1      	ldr	r1, [r0, #12]
    878c:	2005      	movs	r0, #5
    878e:	f005 fee0 	bl	e552 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8792:	69a1      	ldr	r1, [r4, #24]
    8794:	b280      	uxth	r0, r0
    8796:	8388      	strh	r0, [r1, #28]
    8798:	69a1      	ldr	r1, [r4, #24]
    879a:	6a09      	ldr	r1, [r1, #32]
    879c:	1a79      	subs	r1, r7, r1
    879e:	4288      	cmp	r0, r1
    87a0:	d804      	bhi.n	87ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f4>
    87a2:	f640 21ee 	movw	r1, #2798	; 0xaee
    87a6:	2035      	movs	r0, #53	; 0x35
    87a8:	f7fb fee0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87ac:	2101      	movs	r1, #1
    87ae:	4650      	mov	r0, sl
    87b0:	f006 fc53 	bl	f05a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    87b4:	4428      	add	r0, r5
    87b6:	19c5      	adds	r5, r0, r7
    87b8:	2101      	movs	r1, #1
    87ba:	4650      	mov	r0, sl
    87bc:	f005 fdf5 	bl	e3aa <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    87c0:	4405      	add	r5, r0
    87c2:	2001      	movs	r0, #1
    87c4:	f007 fd0d 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    87c8:	f64a 2113 	movw	r1, #43539	; 0xaa13
    87cc:	4408      	add	r0, r1
    87ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    87d2:	fbb0 f0f1 	udiv	r0, r0, r1
    87d6:	1a29      	subs	r1, r5, r0
    87d8:	4630      	mov	r0, r6
    87da:	f7f9 fabf 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    87de:	69a1      	ldr	r1, [r4, #24]
    87e0:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    87e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87e8:	20001128 	.word	0x20001128
    87ec:	20000114 	.word	0x20000114
    87f0:	b510      	push	{r4, lr}
    87f2:	4c06      	ldr	r4, [pc, #24]	; (880c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    87f4:	7b20      	ldrb	r0, [r4, #12]
    87f6:	2800      	cmp	r0, #0
    87f8:	d006      	beq.n	8808 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    87fa:	f003 fc13 	bl	c024 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    87fe:	f7fa f9bf 	bl	2b80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8802:	2000      	movs	r0, #0
    8804:	7320      	strb	r0, [r4, #12]
    8806:	7360      	strb	r0, [r4, #13]
    8808:	bd10      	pop	{r4, pc}
    880a:	0000      	.short	0x0000
    880c:	20001128 	.word	0x20001128
    8810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8812:	4c1c      	ldr	r4, [pc, #112]	; (8884 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    8814:	7820      	ldrb	r0, [r4, #0]
    8816:	2805      	cmp	r0, #5
    8818:	d002      	beq.n	8820 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x368>
    881a:	200c      	movs	r0, #12
    881c:	b004      	add	sp, #16
    881e:	bd10      	pop	{r4, pc}
    8820:	69a1      	ldr	r1, [r4, #24]
    8822:	b129      	cbz	r1, 8830 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x378>
    8824:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    8828:	b128      	cbz	r0, 8836 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x37e>
    882a:	f240 41fa 	movw	r1, #1274	; 0x4fa
    882e:	e025      	b.n	887c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    8830:	f240 41f9 	movw	r1, #1273	; 0x4f9
    8834:	e022      	b.n	887c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    8836:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    883a:	2820      	cmp	r0, #32
    883c:	d002      	beq.n	8844 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38c>
    883e:	f240 41fc 	movw	r1, #1276	; 0x4fc
    8842:	e01b      	b.n	887c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    8844:	4810      	ldr	r0, [pc, #64]	; (8888 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>)
    8846:	f7fa f973 	bl	2b30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    884a:	69a1      	ldr	r1, [r4, #24]
    884c:	2820      	cmp	r0, #32
    884e:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    8852:	d00e      	beq.n	8872 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ba>
    8854:	2300      	movs	r3, #0
    8856:	2201      	movs	r2, #1
    8858:	4668      	mov	r0, sp
    885a:	f000 f8bd 	bl	89d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x520>
    885e:	69a0      	ldr	r0, [r4, #24]
    8860:	4669      	mov	r1, sp
    8862:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    8866:	f006 fb9c 	bl	efa2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    886a:	b128      	cbz	r0, 8878 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c0>
    886c:	2000      	movs	r0, #0
    886e:	61a0      	str	r0, [r4, #24]
    8870:	e7d4      	b.n	881c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x364>
    8872:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    8876:	e001      	b.n	887c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    8878:	f240 5103 	movw	r1, #1283	; 0x503
    887c:	2035      	movs	r0, #53	; 0x35
    887e:	f7fb fe75 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8882:	0000      	.short	0x0000
    8884:	20001128 	.word	0x20001128
    8888:	000088e1 	.word	0x000088e1
    888c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8890:	4d11      	ldr	r5, [pc, #68]	; (88d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x420>)
    8892:	4616      	mov	r6, r2
    8894:	460f      	mov	r7, r1
    8896:	2400      	movs	r4, #0
    8898:	6068      	str	r0, [r5, #4]
    889a:	f006 fbd2 	bl	f042 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    889e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 88dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x424>
    88a2:	2100      	movs	r1, #0
    88a4:	f81c 2001 	ldrb.w	r2, [ip, r1]
    88a8:	4232      	tst	r2, r6
    88aa:	d007      	beq.n	88bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x404>
    88ac:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    88b0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    88b4:	1a1b      	subs	r3, r3, r0
    88b6:	1c64      	adds	r4, r4, #1
    88b8:	b2e4      	uxtb	r4, r4
    88ba:	6093      	str	r3, [r2, #8]
    88bc:	1c49      	adds	r1, r1, #1
    88be:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    88c2:	d0ef      	beq.n	88a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ec>
    88c4:	f016 0f0e 	tst.w	r6, #14
    88c8:	d004      	beq.n	88d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x41c>
    88ca:	f640 11b6 	movw	r1, #2486	; 0x9b6
    88ce:	2035      	movs	r0, #53	; 0x35
    88d0:	f7fb fe4c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88d8:	20001128 	.word	0x20001128
    88dc:	00010359 	.word	0x00010359
    88e0:	b570      	push	{r4, r5, r6, lr}
    88e2:	460d      	mov	r5, r1
    88e4:	0004      	movs	r4, r0
    88e6:	d00c      	beq.n	8902 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x44a>
    88e8:	2001      	movs	r0, #1
    88ea:	f006 fb15 	bl	ef18 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    88ee:	b2c6      	uxtb	r6, r0
    88f0:	200b      	movs	r0, #11
    88f2:	f006 fb11 	bl	ef18 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    88f6:	b2c0      	uxtb	r0, r0
    88f8:	4286      	cmp	r6, r0
    88fa:	d005      	beq.n	8908 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x450>
    88fc:	f240 215f 	movw	r1, #607	; 0x25f
    8900:	e061      	b.n	89c6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    8902:	f44f 7117 	mov.w	r1, #604	; 0x25c
    8906:	e05e      	b.n	89c6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    8908:	2d09      	cmp	r5, #9
    890a:	d25f      	bcs.n	89cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x514>
    890c:	e8df f005 	tbb	[pc, r5]
    8910:	3d3d3505 	.word	0x3d3d3505
    8914:	4b445e39 	.word	0x4b445e39
    8918:	0059      	.short	0x0059
    891a:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    891e:	b348      	cbz	r0, 8974 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
    8920:	4620      	mov	r0, r4
    8922:	f000 fd69 	bl	93f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    8926:	f006 fb8c 	bl	f042 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    892a:	f500 709c 	add.w	r0, r0, #312	; 0x138
    892e:	b285      	uxth	r5, r0
    8930:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8934:	2128      	movs	r1, #40	; 0x28
    8936:	f006 fb20 	bl	ef7a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3a>
    893a:	182e      	adds	r6, r5, r0
    893c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    893e:	68e0      	ldr	r0, [r4, #12]
    8940:	4288      	cmp	r0, r1
    8942:	d200      	bcs.n	8946 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    8944:	4601      	mov	r1, r0
    8946:	4632      	mov	r2, r6
    8948:	4620      	mov	r0, r4
    894a:	f006 f86e 	bl	ea2a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    894e:	4d21      	ldr	r5, [pc, #132]	; (89d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x51c>)
    8950:	4632      	mov	r2, r6
    8952:	6068      	str	r0, [r5, #4]
    8954:	4620      	mov	r0, r4
    8956:	68e1      	ldr	r1, [r4, #12]
    8958:	f006 f867 	bl	ea2a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    895c:	60a8      	str	r0, [r5, #8]
    895e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8962:	f006 f8c3 	bl	eaec <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8966:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    896a:	60e8      	str	r0, [r5, #12]
    896c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8970:	f7fa b9e8 	b.w	2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8974:	f240 2165 	movw	r1, #613	; 0x265
    8978:	e025      	b.n	89c6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    897a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    897e:	f006 bbf2 	b.w	f166 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    8982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8986:	f003 bd01 	b.w	c38c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    898a:	4620      	mov	r0, r4
    898c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8990:	2201      	movs	r2, #1
    8992:	2100      	movs	r1, #0
    8994:	f006 bb35 	b.w	f002 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    8998:	2001      	movs	r0, #1
    899a:	f7f9 f8b3 	bl	1b04 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    899e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89a2:	f005 bb74 	b.w	e08e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    89a6:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    89aa:	2804      	cmp	r0, #4
    89ac:	d002      	beq.n	89b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
    89ae:	f240 2199 	movw	r1, #665	; 0x299
    89b2:	e008      	b.n	89c6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    89b4:	4620      	mov	r0, r4
    89b6:	f006 fb0c 	bl	efd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    89ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89be:	f7fd bf15 	b.w	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    89c2:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    89c6:	2035      	movs	r0, #53	; 0x35
    89c8:	f7fb fdd0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89cc:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    89d0:	e7f9      	b.n	89c6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    89d2:	0000      	.short	0x0000
    89d4:	20001118 	.word	0x20001118
    89d8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    89dc:	4605      	mov	r5, r0
    89de:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    89e2:	2600      	movs	r6, #0
    89e4:	f8d1 b020 	ldr.w	fp, [r1, #32]
    89e8:	469a      	mov	sl, r3
    89ea:	460c      	mov	r4, r1
    89ec:	280d      	cmp	r0, #13
    89ee:	d020      	beq.n	8a32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    89f0:	280c      	cmp	r0, #12
    89f2:	d01e      	beq.n	8a32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    89f4:	2824      	cmp	r0, #36	; 0x24
    89f6:	d01c      	beq.n	8a32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    89f8:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    89fc:	2824      	cmp	r0, #36	; 0x24
    89fe:	d018      	beq.n	8a32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    8a00:	2000      	movs	r0, #0
    8a02:	4680      	mov	r8, r0
    8a04:	f006 fb12 	bl	f02c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    8a08:	4681      	mov	r9, r0
    8a0a:	f1ba 0f00 	cmp.w	sl, #0
    8a0e:	d003      	beq.n	8a18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x560>
    8a10:	2101      	movs	r1, #1
    8a12:	4620      	mov	r0, r4
    8a14:	f006 fb4e 	bl	f0b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8a18:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8a1c:	2701      	movs	r7, #1
    8a1e:	b150      	cbz	r0, 8a36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57e>
    8a20:	2801      	cmp	r0, #1
    8a22:	d01b      	beq.n	8a5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    8a24:	2802      	cmp	r0, #2
    8a26:	d011      	beq.n	8a4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x594>
    8a28:	2803      	cmp	r0, #3
    8a2a:	d017      	beq.n	8a5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    8a2c:	f640 1139 	movw	r1, #2361	; 0x939
    8a30:	e07b      	b.n	8b2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x672>
    8a32:	2001      	movs	r0, #1
    8a34:	e7e5      	b.n	8a02 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54a>
    8a36:	9802      	ldr	r0, [sp, #8]
    8a38:	b128      	cbz	r0, 8a46 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58e>
    8a3a:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    8a3e:	4620      	mov	r0, r4
    8a40:	f006 fa9d 	bl	ef7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    8a44:	e00b      	b.n	8a5e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a6>
    8a46:	f640 01ff 	movw	r1, #2303	; 0x8ff
    8a4a:	e06e      	b.n	8b2a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x672>
    8a4c:	4838      	ldr	r0, [pc, #224]	; (8b30 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x678>)
    8a4e:	6801      	ldr	r1, [r0, #0]
    8a50:	2003      	movs	r0, #3
    8a52:	eb01 060b 	add.w	r6, r1, fp
    8a56:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8a5a:	e000      	b.n	8a5e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a6>
    8a5c:	68e6      	ldr	r6, [r4, #12]
    8a5e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8a62:	4631      	mov	r1, r6
    8a64:	f7f9 f97a 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8a68:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8a6c:	60e8      	str	r0, [r5, #12]
    8a6e:	2000      	movs	r0, #0
    8a70:	7028      	strb	r0, [r5, #0]
    8a72:	f8a5 9008 	strh.w	r9, [r5, #8]
    8a76:	4620      	mov	r0, r4
    8a78:	f000 fc0c 	bl	9294 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8a7c:	f1a8 0101 	sub.w	r1, r8, #1
    8a80:	4208      	tst	r0, r1
    8a82:	d101      	bne.n	8a88 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    8a84:	72af      	strb	r7, [r5, #10]
    8a86:	e005      	b.n	8a94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5dc>
    8a88:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8a8c:	2801      	cmp	r0, #1
    8a8e:	d017      	beq.n	8ac0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x608>
    8a90:	2003      	movs	r0, #3
    8a92:	72a8      	strb	r0, [r5, #10]
    8a94:	46b9      	mov	r9, r7
    8a96:	72ef      	strb	r7, [r5, #11]
    8a98:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8a9c:	f006 f826 	bl	eaec <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8aa0:	6068      	str	r0, [r5, #4]
    8aa2:	f1ba 0f00 	cmp.w	sl, #0
    8aa6:	d03c      	beq.n	8b22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
    8aa8:	4631      	mov	r1, r6
    8aaa:	4628      	mov	r0, r5
    8aac:	f005 fcdc 	bl	e468 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8ab0:	b287      	uxth	r7, r0
    8ab2:	4620      	mov	r0, r4
    8ab4:	f000 fbee 	bl	9294 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8ab8:	f1b8 0f00 	cmp.w	r8, #0
    8abc:	d002      	beq.n	8ac4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    8abe:	e014      	b.n	8aea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x632>
    8ac0:	2002      	movs	r0, #2
    8ac2:	e7e6      	b.n	8a92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5da>
    8ac4:	42b8      	cmp	r0, r7
    8ac6:	d810      	bhi.n	8aea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x632>
    8ac8:	4607      	mov	r7, r0
    8aca:	f885 900a 	strb.w	r9, [r5, #10]
    8ace:	fb06 f107 	mul.w	r1, r6, r7
    8ad2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8ad6:	f7f9 f941 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8ada:	60e8      	str	r0, [r5, #12]
    8adc:	b31e      	cbz	r6, 8b26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66e>
    8ade:	4631      	mov	r1, r6
    8ae0:	4628      	mov	r0, r5
    8ae2:	f005 fcc1 	bl	e468 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8ae6:	4438      	add	r0, r7
    8ae8:	b287      	uxth	r7, r0
    8aea:	4639      	mov	r1, r7
    8aec:	4620      	mov	r0, r4
    8aee:	f006 fae1 	bl	f0b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8af2:	68e8      	ldr	r0, [r5, #12]
    8af4:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8af8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    8afa:	2800      	cmp	r0, #0
    8afc:	d011      	beq.n	8b22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
    8afe:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8b02:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    8b06:	1a40      	subs	r0, r0, r1
    8b08:	b202      	sxth	r2, r0
    8b0a:	2a00      	cmp	r2, #0
    8b0c:	dd09      	ble.n	8b22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
    8b0e:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    8b12:	4402      	add	r2, r0
    8b14:	1e52      	subs	r2, r2, #1
    8b16:	fb92 f2f0 	sdiv	r2, r2, r0
    8b1a:	b292      	uxth	r2, r2
    8b1c:	fb02 1000 	mla	r0, r2, r0, r1
    8b20:	86e0      	strh	r0, [r4, #54]	; 0x36
    8b22:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    8b26:	f640 1174 	movw	r1, #2420	; 0x974
    8b2a:	2035      	movs	r0, #53	; 0x35
    8b2c:	f7fb fd1e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b30:	20000114 	.word	0x20000114
    8b34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8b38:	460d      	mov	r5, r1
    8b3a:	4607      	mov	r7, r0
    8b3c:	f000 fa58 	bl	8ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
    8b40:	4c1d      	ldr	r4, [pc, #116]	; (8bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x700>)
    8b42:	6861      	ldr	r1, [r4, #4]
    8b44:	f7f9 f90a 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8b48:	4606      	mov	r6, r0
    8b4a:	4601      	mov	r1, r0
    8b4c:	4638      	mov	r0, r7
    8b4e:	f7f9 f937 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8b52:	4607      	mov	r7, r0
    8b54:	f006 fa7b 	bl	f04e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    8b58:	4287      	cmp	r7, r0
    8b5a:	da10      	bge.n	8b7e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c6>
    8b5c:	6960      	ldr	r0, [r4, #20]
    8b5e:	f000 fa47 	bl	8ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
    8b62:	4631      	mov	r1, r6
    8b64:	f7f9 f92c 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8b68:	6861      	ldr	r1, [r4, #4]
    8b6a:	fbb0 f0f1 	udiv	r0, r0, r1
    8b6e:	6028      	str	r0, [r5, #0]
    8b70:	6861      	ldr	r1, [r4, #4]
    8b72:	b004      	add	sp, #16
    8b74:	4630      	mov	r0, r6
    8b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8b7a:	f7f9 b8ef 	b.w	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8b7e:	2000      	movs	r0, #0
    8b80:	f88d 0000 	strb.w	r0, [sp]
    8b84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8b86:	9001      	str	r0, [sp, #4]
    8b88:	f006 fa50 	bl	f02c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    8b8c:	f8ad 0008 	strh.w	r0, [sp, #8]
    8b90:	2001      	movs	r0, #1
    8b92:	f88d 000b 	strb.w	r0, [sp, #11]
    8b96:	6960      	ldr	r0, [r4, #20]
    8b98:	f000 fa2a 	bl	8ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
    8b9c:	9003      	str	r0, [sp, #12]
    8b9e:	f000 f9c1 	bl	8f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
    8ba2:	f88d 000a 	strb.w	r0, [sp, #10]
    8ba6:	4668      	mov	r0, sp
    8ba8:	6861      	ldr	r1, [r4, #4]
    8baa:	f005 fc5d 	bl	e468 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8bae:	6028      	str	r0, [r5, #0]
    8bb0:	9803      	ldr	r0, [sp, #12]
    8bb2:	b004      	add	sp, #16
    8bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bb8:	20001128 	.word	0x20001128
    8bbc:	b510      	push	{r4, lr}
    8bbe:	2400      	movs	r4, #0
    8bc0:	f006 fa3f 	bl	f042 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    8bc4:	4a06      	ldr	r2, [pc, #24]	; (8be0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>)
    8bc6:	2100      	movs	r1, #0
    8bc8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    8bcc:	4404      	add	r4, r0
    8bce:	689b      	ldr	r3, [r3, #8]
    8bd0:	1c49      	adds	r1, r1, #1
    8bd2:	441c      	add	r4, r3
    8bd4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8bd8:	d0f6      	beq.n	8bc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    8bda:	4620      	mov	r0, r4
    8bdc:	bd10      	pop	{r4, pc}
    8bde:	0000      	.short	0x0000
    8be0:	20001128 	.word	0x20001128
    8be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8be6:	4c1b      	ldr	r4, [pc, #108]	; (8c54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    8be8:	4606      	mov	r6, r0
    8bea:	460d      	mov	r5, r1
    8bec:	78a0      	ldrb	r0, [r4, #2]
    8bee:	b360      	cbz	r0, 8c4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x792>
    8bf0:	4919      	ldr	r1, [pc, #100]	; (8c58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>)
    8bf2:	6a20      	ldr	r0, [r4, #32]
    8bf4:	4288      	cmp	r0, r1
    8bf6:	d828      	bhi.n	8c4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x792>
    8bf8:	2000      	movs	r0, #0
    8bfa:	f88d 0000 	strb.w	r0, [sp]
    8bfe:	9501      	str	r5, [sp, #4]
    8c00:	f006 fa14 	bl	f02c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    8c04:	f8ad 0008 	strh.w	r0, [sp, #8]
    8c08:	2001      	movs	r0, #1
    8c0a:	f88d 000b 	strb.w	r0, [sp, #11]
    8c0e:	f006 fa1e 	bl	f04e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    8c12:	4601      	mov	r1, r0
    8c14:	4630      	mov	r0, r6
    8c16:	f7f9 f8a1 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8c1a:	9003      	str	r0, [sp, #12]
    8c1c:	2003      	movs	r0, #3
    8c1e:	f88d 000a 	strb.w	r0, [sp, #10]
    8c22:	4668      	mov	r0, sp
    8c24:	f7f9 fbd8 	bl	23d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8c28:	4606      	mov	r6, r0
    8c2a:	4629      	mov	r1, r5
    8c2c:	9803      	ldr	r0, [sp, #12]
    8c2e:	f7f9 f895 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8c32:	4605      	mov	r5, r0
    8c34:	6a21      	ldr	r1, [r4, #32]
    8c36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8c38:	f7f9 f890 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8c3c:	4601      	mov	r1, r0
    8c3e:	b13e      	cbz	r6, 8c50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x798>
    8c40:	4628      	mov	r0, r5
    8c42:	f7f9 f8bd 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8c46:	2800      	cmp	r0, #0
    8c48:	db02      	blt.n	8c50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x798>
    8c4a:	2001      	movs	r0, #1
    8c4c:	b004      	add	sp, #16
    8c4e:	bd70      	pop	{r4, r5, r6, pc}
    8c50:	2000      	movs	r0, #0
    8c52:	e7fb      	b.n	8c4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x794>
    8c54:	20001128 	.word	0x20001128
    8c58:	07a12000 	.word	0x07a12000
    8c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c60:	f003 ff1f 	bl	caa2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8c64:	4c21      	ldr	r4, [pc, #132]	; (8cec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x834>)
    8c66:	4607      	mov	r7, r0
    8c68:	6920      	ldr	r0, [r4, #16]
    8c6a:	f000 f95b 	bl	8f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
    8c6e:	4606      	mov	r6, r0
    8c70:	f7f9 f81a 	bl	1ca8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    8c74:	4605      	mov	r5, r0
    8c76:	2865      	cmp	r0, #101	; 0x65
    8c78:	d326      	bcc.n	8cc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x810>
    8c7a:	1c68      	adds	r0, r5, #1
    8c7c:	d027      	beq.n	8cce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x816>
    8c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8c80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8c82:	1948      	adds	r0, r1, r5
    8c84:	4282      	cmp	r2, r0
    8c86:	d800      	bhi.n	8c8a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d2>
    8c88:	1a55      	subs	r5, r2, r1
    8c8a:	f06f 0139 	mvn.w	r1, #57	; 0x39
    8c8e:	4638      	mov	r0, r7
    8c90:	f7f9 f864 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8c94:	4629      	mov	r1, r5
    8c96:	f000 f9bd 	bl	9014 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
    8c9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8c9c:	4408      	add	r0, r1
    8c9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8ca0:	1a45      	subs	r5, r0, r1
    8ca2:	f241 3088 	movw	r0, #5000	; 0x1388
    8ca6:	4285      	cmp	r5, r0
    8ca8:	d900      	bls.n	8cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f4>
    8caa:	4605      	mov	r5, r0
    8cac:	f003 fef9 	bl	caa2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8cb0:	4601      	mov	r1, r0
    8cb2:	4638      	mov	r0, r7
    8cb4:	f7f9 f884 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8cb8:	309d      	adds	r0, #157	; 0x9d
    8cba:	4285      	cmp	r5, r0
    8cbc:	d304      	bcc.n	8cc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x810>
    8cbe:	4631      	mov	r1, r6
    8cc0:	4628      	mov	r0, r5
    8cc2:	f7f8 ff2f 	bl	1b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8cc6:	b120      	cbz	r0, 8cd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81a>
    8cc8:	2000      	movs	r0, #0
    8cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8cd0:	e7e5      	b.n	8c9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7e6>
    8cd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8cd4:	4905      	ldr	r1, [pc, #20]	; (8cec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x834>)
    8cd6:	4428      	add	r0, r5
    8cd8:	3910      	subs	r1, #16
    8cda:	6260      	str	r0, [r4, #36]	; 0x24
    8cdc:	68c8      	ldr	r0, [r1, #12]
    8cde:	4428      	add	r0, r5
    8ce0:	60c8      	str	r0, [r1, #12]
    8ce2:	f7fa f82f 	bl	2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8ce6:	2001      	movs	r0, #1
    8ce8:	e7ef      	b.n	8cca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x812>
    8cea:	0000      	.short	0x0000
    8cec:	20001128 	.word	0x20001128
    8cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8cf4:	b08c      	sub	sp, #48	; 0x30
    8cf6:	4616      	mov	r6, r2
    8cf8:	4607      	mov	r7, r0
    8cfa:	f003 fed2 	bl	caa2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8cfe:	4c87      	ldr	r4, [pc, #540]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8d00:	9002      	str	r0, [sp, #8]
    8d02:	2500      	movs	r5, #0
    8d04:	f8d4 a008 	ldr.w	sl, [r4, #8]
    8d08:	f006 f99b 	bl	f042 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    8d0c:	68a1      	ldr	r1, [r4, #8]
    8d0e:	4408      	add	r0, r1
    8d10:	6861      	ldr	r1, [r4, #4]
    8d12:	4288      	cmp	r0, r1
    8d14:	d101      	bne.n	8d1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x862>
    8d16:	2001      	movs	r0, #1
    8d18:	e000      	b.n	8d1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x864>
    8d1a:	2000      	movs	r0, #0
    8d1c:	4683      	mov	fp, r0
    8d1e:	980d      	ldr	r0, [sp, #52]	; 0x34
    8d20:	ea06 090b 	and.w	r9, r6, fp
    8d24:	2800      	cmp	r0, #0
    8d26:	d065      	beq.n	8df4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x93c>
    8d28:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    8d2c:	9802      	ldr	r0, [sp, #8]
    8d2e:	f7f9 f815 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8d32:	9000      	str	r0, [sp, #0]
    8d34:	f002 f872 	bl	ae1c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    8d38:	4680      	mov	r8, r0
    8d3a:	4878      	ldr	r0, [pc, #480]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8d3c:	7800      	ldrb	r0, [r0, #0]
    8d3e:	4e77      	ldr	r6, [pc, #476]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8d40:	362c      	adds	r6, #44	; 0x2c
    8d42:	2805      	cmp	r0, #5
    8d44:	d12e      	bne.n	8da4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ec>
    8d46:	4875      	ldr	r0, [pc, #468]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8d48:	6980      	ldr	r0, [r0, #24]
    8d4a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    8d4e:	f002 f845 	bl	addc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    8d52:	4604      	mov	r4, r0
    8d54:	4540      	cmp	r0, r8
    8d56:	d009      	beq.n	8d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8b4>
    8d58:	4870      	ldr	r0, [pc, #448]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8d5a:	4621      	mov	r1, r4
    8d5c:	6980      	ldr	r0, [r0, #24]
    8d5e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8d62:	f001 ffff 	bl	ad64 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8d66:	2000      	movs	r0, #0
    8d68:	6170      	str	r0, [r6, #20]
    8d6a:	e00c      	b.n	8d86 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ce>
    8d6c:	496b      	ldr	r1, [pc, #428]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8d6e:	6988      	ldr	r0, [r1, #24]
    8d70:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8d74:	6170      	str	r0, [r6, #20]
    8d76:	698a      	ldr	r2, [r1, #24]
    8d78:	6b08      	ldr	r0, [r1, #48]	; 0x30
    8d7a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    8d7e:	4290      	cmp	r0, r2
    8d80:	d200      	bcs.n	8d84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8cc>
    8d82:	4610      	mov	r0, r2
    8d84:	6308      	str	r0, [r1, #48]	; 0x30
    8d86:	4865      	ldr	r0, [pc, #404]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8d88:	6980      	ldr	r0, [r0, #24]
    8d8a:	b130      	cbz	r0, 8d9a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8e2>
    8d8c:	b144      	cbz	r4, 8da0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8e8>
    8d8e:	e9d4 1200 	ldrd	r1, r2, [r4]
    8d92:	4411      	add	r1, r2
    8d94:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8d98:	e004      	b.n	8da4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ec>
    8d9a:	f240 51c5 	movw	r1, #1477	; 0x5c5
    8d9e:	e017      	b.n	8dd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x918>
    8da0:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    8da4:	4641      	mov	r1, r8
    8da6:	4630      	mov	r0, r6
    8da8:	f001 ffdc 	bl	ad64 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8dac:	ea5f 0008 	movs.w	r0, r8
    8db0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>
    8db4:	9a00      	ldr	r2, [sp, #0]
    8db6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    8dba:	d00c      	beq.n	8dd6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x91e>
    8dbc:	e9d0 1000 	ldrd	r1, r0, [r0]
    8dc0:	4408      	add	r0, r1
    8dc2:	4621      	mov	r1, r4
    8dc4:	f006 fa77 	bl	f2b6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8dc8:	42a0      	cmp	r0, r4
    8dca:	d904      	bls.n	8dd6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x91e>
    8dcc:	f240 51e3 	movw	r1, #1507	; 0x5e3
    8dd0:	2035      	movs	r0, #53	; 0x35
    8dd2:	f7fb fbcb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dd6:	4601      	mov	r1, r0
    8dd8:	9800      	ldr	r0, [sp, #0]
    8dda:	f7f8 ffbf 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8dde:	4606      	mov	r6, r0
    8de0:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8de4:	4644      	mov	r4, r8
    8de6:	4241      	negs	r1, r0
    8de8:	4630      	mov	r0, r6
    8dea:	f7f8 ffb7 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8dee:	62e0      	str	r0, [r4, #44]	; 0x2c
    8df0:	2001      	movs	r0, #1
    8df2:	e042      	b.n	8e7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c2>
    8df4:	f1b9 0f00 	cmp.w	r9, #0
    8df8:	d018      	beq.n	8e2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x974>
    8dfa:	2001      	movs	r0, #1
    8dfc:	f006 f8a3 	bl	ef46 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8e00:	4604      	mov	r4, r0
    8e02:	2001      	movs	r0, #1
    8e04:	f007 f9ed 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8e08:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8e0c:	4401      	add	r1, r0
    8e0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8e12:	fbb1 f0f0 	udiv	r0, r1, r0
    8e16:	1821      	adds	r1, r4, r0
    8e18:	31f1      	adds	r1, #241	; 0xf1
    8e1a:	9802      	ldr	r0, [sp, #8]
    8e1c:	f7ff fee2 	bl	8be4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>
    8e20:	b908      	cbnz	r0, 8e26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x96e>
    8e22:	f04f 0a00 	mov.w	sl, #0
    8e26:	9e02      	ldr	r6, [sp, #8]
    8e28:	9508      	str	r5, [sp, #32]
    8e2a:	e027      	b.n	8e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c4>
    8e2c:	b12e      	cbz	r6, 8e3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x982>
    8e2e:	a908      	add	r1, sp, #32
    8e30:	9802      	ldr	r0, [sp, #8]
    8e32:	f7ff fe7f 	bl	8b34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67c>
    8e36:	4606      	mov	r6, r0
    8e38:	e020      	b.n	8e7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c4>
    8e3a:	9802      	ldr	r0, [sp, #8]
    8e3c:	f000 f8d8 	bl	8ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
    8e40:	4c36      	ldr	r4, [pc, #216]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8e42:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    8e46:	f7f8 ff89 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8e4a:	4606      	mov	r6, r0
    8e4c:	6920      	ldr	r0, [r4, #16]
    8e4e:	f000 f8c3 	bl	8fd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
    8e52:	6861      	ldr	r1, [r4, #4]
    8e54:	4348      	muls	r0, r1
    8e56:	78a1      	ldrb	r1, [r4, #2]
    8e58:	b131      	cbz	r1, 8e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
    8e5a:	6a21      	ldr	r1, [r4, #32]
    8e5c:	4281      	cmp	r1, r0
    8e5e:	d302      	bcc.n	8e66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9ae>
    8e60:	1a09      	subs	r1, r1, r0
    8e62:	6221      	str	r1, [r4, #32]
    8e64:	e000      	b.n	8e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
    8e66:	6225      	str	r5, [r4, #32]
    8e68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    8e6a:	4601      	mov	r1, r0
    8e6c:	4610      	mov	r0, r2
    8e6e:	f7f8 ff75 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8e72:	62e0      	str	r0, [r4, #44]	; 0x2c
    8e74:	4630      	mov	r0, r6
    8e76:	f000 f8af 	bl	8fd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
    8e7a:	9008      	str	r0, [sp, #32]
    8e7c:	2001      	movs	r0, #1
    8e7e:	f006 f862 	bl	ef46 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8e82:	4604      	mov	r4, r0
    8e84:	2001      	movs	r0, #1
    8e86:	f007 f9ac 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8e8a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8e8e:	4401      	add	r1, r0
    8e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8e94:	fbb1 f0f0 	udiv	r0, r1, r0
    8e98:	4404      	add	r4, r0
    8e9a:	4651      	mov	r1, sl
    8e9c:	4630      	mov	r0, r6
    8e9e:	34f1      	adds	r4, #241	; 0xf1
    8ea0:	f000 f8b8 	bl	9014 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
    8ea4:	491d      	ldr	r1, [pc, #116]	; (8f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    8ea6:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    8eaa:	6892      	ldr	r2, [r2, #8]
    8eac:	4282      	cmp	r2, r0
    8eae:	d800      	bhi.n	8eb2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9fa>
    8eb0:	4610      	mov	r0, r2
    8eb2:	6288      	str	r0, [r1, #40]	; 0x28
    8eb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8eb6:	b102      	cbz	r2, 8eba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa02>
    8eb8:	610e      	str	r6, [r1, #16]
    8eba:	4688      	mov	r8, r1
    8ebc:	614e      	str	r6, [r1, #20]
    8ebe:	f1bb 0f00 	cmp.w	fp, #0
    8ec2:	d002      	beq.n	8eca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa12>
    8ec4:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    8ec8:	e001      	b.n	8ece <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa16>
    8eca:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    8ece:	f04f 0a01 	mov.w	sl, #1
    8ed2:	f887 a00b 	strb.w	sl, [r7, #11]
    8ed6:	f006 f8a9 	bl	f02c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    8eda:	8138      	strh	r0, [r7, #8]
    8edc:	4630      	mov	r0, r6
    8ede:	f000 f821 	bl	8f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
    8ee2:	72b8      	strb	r0, [r7, #10]
    8ee4:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    8ee8:	6078      	str	r0, [r7, #4]
    8eea:	f1b9 0f00 	cmp.w	r9, #0
    8eee:	d008      	beq.n	8f02 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa4a>
    8ef0:	f887 a000 	strb.w	sl, [r7]
    8ef4:	490a      	ldr	r1, [pc, #40]	; (8f20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa68>)
    8ef6:	9802      	ldr	r0, [sp, #8]
    8ef8:	f000 f88c 	bl	9014 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
    8efc:	1b00      	subs	r0, r0, r4
    8efe:	60f8      	str	r0, [r7, #12]
    8f00:	e001      	b.n	8f06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa4e>
    8f02:	703d      	strb	r5, [r7, #0]
    8f04:	60fe      	str	r6, [r7, #12]
    8f06:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    8f0a:	42a0      	cmp	r0, r4
    8f0c:	d303      	bcc.n	8f16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa5e>
    8f0e:	2001      	movs	r0, #1
    8f10:	b00f      	add	sp, #60	; 0x3c
    8f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f16:	2000      	movs	r0, #0
    8f18:	e7fa      	b.n	8f10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa58>
    8f1a:	0000      	.short	0x0000
    8f1c:	20001128 	.word	0x20001128
    8f20:	07a12000 	.word	0x07a12000
    8f24:	4a09      	ldr	r2, [pc, #36]	; (8f4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa94>)
    8f26:	b510      	push	{r4, lr}
    8f28:	7811      	ldrb	r1, [r2, #0]
    8f2a:	2904      	cmp	r1, #4
    8f2c:	d10c      	bne.n	8f48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa90>
    8f2e:	6851      	ldr	r1, [r2, #4]
    8f30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    8f32:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8f36:	004c      	lsls	r4, r1, #1
    8f38:	4601      	mov	r1, r0
    8f3a:	4610      	mov	r0, r2
    8f3c:	f7f8 ff40 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8f40:	42a0      	cmp	r0, r4
    8f42:	d201      	bcs.n	8f48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa90>
    8f44:	2003      	movs	r0, #3
    8f46:	bd10      	pop	{r4, pc}
    8f48:	2002      	movs	r0, #2
    8f4a:	bd10      	pop	{r4, pc}
    8f4c:	20001128 	.word	0x20001128
    8f50:	b570      	push	{r4, r5, r6, lr}
    8f52:	4d13      	ldr	r5, [pc, #76]	; (8fa0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae8>)
    8f54:	7f28      	ldrb	r0, [r5, #28]
    8f56:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    8f5a:	2800      	cmp	r0, #0
    8f5c:	7828      	ldrb	r0, [r5, #0]
    8f5e:	d00f      	beq.n	8f80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xac8>
    8f60:	2805      	cmp	r0, #5
    8f62:	d004      	beq.n	8f6e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xab6>
    8f64:	f240 318f 	movw	r1, #911	; 0x38f
    8f68:	2035      	movs	r0, #53	; 0x35
    8f6a:	f7fb faff 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f6e:	4620      	mov	r0, r4
    8f70:	f005 ffe1 	bl	ef36 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    8f74:	b178      	cbz	r0, 8f96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
    8f76:	4620      	mov	r0, r4
    8f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f7c:	f001 bed0 	b.w	ad20 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    8f80:	2805      	cmp	r0, #5
    8f82:	d108      	bne.n	8f96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
    8f84:	4620      	mov	r0, r4
    8f86:	f005 ffd6 	bl	ef36 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    8f8a:	b920      	cbnz	r0, 8f96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
    8f8c:	69a8      	ldr	r0, [r5, #24]
    8f8e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8f92:	f001 ff07 	bl	ada4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    8f96:	4620      	mov	r0, r4
    8f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f9c:	f001 bf02 	b.w	ada4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    8fa0:	20001128 	.word	0x20001128
    8fa4:	b510      	push	{r4, lr}
    8fa6:	f7fd ff27 	bl	6df8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    8faa:	490a      	ldr	r1, [pc, #40]	; (8fd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb1c>)
    8fac:	2000      	movs	r0, #0
    8fae:	70c8      	strb	r0, [r1, #3]
    8fb0:	7708      	strb	r0, [r1, #28]
    8fb2:	6188      	str	r0, [r1, #24]
    8fb4:	7008      	strb	r0, [r1, #0]
    8fb6:	f7fd fe71 	bl	6c9c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8fba:	4604      	mov	r4, r0
    8fbc:	7800      	ldrb	r0, [r0, #0]
    8fbe:	f7f9 fc89 	bl	28d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8fc2:	b110      	cbz	r0, 8fca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb12>
    8fc4:	2020      	movs	r0, #32
    8fc6:	7020      	strb	r0, [r4, #0]
    8fc8:	bd10      	pop	{r4, pc}
    8fca:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    8fce:	2035      	movs	r0, #53	; 0x35
    8fd0:	f7fb facc 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fd4:	20001128 	.word	0x20001128
    8fd8:	b510      	push	{r4, lr}
    8fda:	4c04      	ldr	r4, [pc, #16]	; (8fec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb34>)
    8fdc:	4601      	mov	r1, r0
    8fde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8fe0:	f7f8 feee 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8fe4:	6861      	ldr	r1, [r4, #4]
    8fe6:	fbb0 f0f1 	udiv	r0, r0, r1
    8fea:	bd10      	pop	{r4, pc}
    8fec:	20001128 	.word	0x20001128
    8ff0:	b510      	push	{r4, lr}
    8ff2:	4c07      	ldr	r4, [pc, #28]	; (9010 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb58>)
    8ff4:	4601      	mov	r1, r0
    8ff6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8ff8:	f7f8 fee2 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8ffc:	6861      	ldr	r1, [r4, #4]
    8ffe:	fbb0 f2f1 	udiv	r2, r0, r1
    9002:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9008:	4351      	muls	r1, r2
    900a:	f7f8 bea7 	b.w	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    900e:	0000      	.short	0x0000
    9010:	20001128 	.word	0x20001128
    9014:	b570      	push	{r4, r5, r6, lr}
    9016:	4605      	mov	r5, r0
    9018:	480d      	ldr	r0, [pc, #52]	; (9050 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb98>)
    901a:	460c      	mov	r4, r1
    901c:	7881      	ldrb	r1, [r0, #2]
    901e:	b1a9      	cbz	r1, 904c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
    9020:	4a0c      	ldr	r2, [pc, #48]	; (9054 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb9c>)
    9022:	6a01      	ldr	r1, [r0, #32]
    9024:	4291      	cmp	r1, r2
    9026:	d211      	bcs.n	904c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
    9028:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    902a:	f7f8 fe97 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    902e:	4606      	mov	r6, r0
    9030:	4621      	mov	r1, r4
    9032:	4628      	mov	r0, r5
    9034:	f7f8 fe92 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9038:	4601      	mov	r1, r0
    903a:	4630      	mov	r0, r6
    903c:	f7f8 fec0 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9040:	2800      	cmp	r0, #0
    9042:	dd03      	ble.n	904c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
    9044:	1a20      	subs	r0, r4, r0
    9046:	d500      	bpl.n	904a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb92>
    9048:	2000      	movs	r0, #0
    904a:	bd70      	pop	{r4, r5, r6, pc}
    904c:	4620      	mov	r0, r4
    904e:	bd70      	pop	{r4, r5, r6, pc}
    9050:	20001128 	.word	0x20001128
    9054:	07a12000 	.word	0x07a12000

00009058 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    9058:	4806      	ldr	r0, [pc, #24]	; (9074 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    905a:	4905      	ldr	r1, [pc, #20]	; (9070 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    905c:	6501      	str	r1, [r0, #80]	; 0x50
    905e:	4906      	ldr	r1, [pc, #24]	; (9078 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    9060:	6541      	str	r1, [r0, #84]	; 0x54
    9062:	4807      	ldr	r0, [pc, #28]	; (9080 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    9064:	4905      	ldr	r1, [pc, #20]	; (907c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    9066:	6501      	str	r1, [r0, #80]	; 0x50
    9068:	4906      	ldr	r1, [pc, #24]	; (9084 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    906a:	6541      	str	r1, [r0, #84]	; 0x54
    906c:	4770      	bx	lr
    906e:	0000      	.short	0x0000
    9070:	0000a1b5 	.word	0x0000a1b5
    9074:	2000012c 	.word	0x2000012c
    9078:	0000a281 	.word	0x0000a281
    907c:	0000a8b1 	.word	0x0000a8b1
    9080:	20000190 	.word	0x20000190
    9084:	0000a8e1 	.word	0x0000a8e1

00009088 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    9088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    908a:	460d      	mov	r5, r1
    908c:	4607      	mov	r7, r0
    908e:	2100      	movs	r1, #0
    9090:	f004 ff1d 	bl	dece <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9094:	1e04      	subs	r4, r0, #0
    9096:	d051      	beq.n	913c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    9098:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    909c:	2800      	cmp	r0, #0
    909e:	d04d      	beq.n	913c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    90a0:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    90a4:	f88d 0000 	strb.w	r0, [sp]
    90a8:	9800      	ldr	r0, [sp, #0]
    90aa:	9000      	str	r0, [sp, #0]
    90ac:	f89d 0000 	ldrb.w	r0, [sp]
    90b0:	2600      	movs	r6, #0
    90b2:	b158      	cbz	r0, 90cc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    90b4:	706e      	strb	r6, [r5, #1]
    90b6:	2009      	movs	r0, #9
    90b8:	7028      	strb	r0, [r5, #0]
    90ba:	220a      	movs	r2, #10
    90bc:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    90c0:	1d28      	adds	r0, r5, #4
    90c2:	f003 fe63 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    90c6:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    90ca:	e0e1      	b.n	9290 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    90cc:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    90d0:	280e      	cmp	r0, #14
    90d2:	d01d      	beq.n	9110 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    90d4:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    90d8:	280d      	cmp	r0, #13
    90da:	d027      	beq.n	912c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    90dc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    90e0:	f88d 0000 	strb.w	r0, [sp]
    90e4:	9800      	ldr	r0, [sp, #0]
    90e6:	9000      	str	r0, [sp, #0]
    90e8:	f89d 0000 	ldrb.w	r0, [sp]
    90ec:	b3b0      	cbz	r0, 915c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    90ee:	706e      	strb	r6, [r5, #1]
    90f0:	2008      	movs	r0, #8
    90f2:	7028      	strb	r0, [r5, #0]
    90f4:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    90f8:	6068      	str	r0, [r5, #4]
    90fa:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    90fe:	60a8      	str	r0, [r5, #8]
    9100:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    9104:	60e8      	str	r0, [r5, #12]
    9106:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    910a:	f804 6c02 	strb.w	r6, [r4, #-2]
    910e:	e0bf      	b.n	9290 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9110:	8820      	ldrh	r0, [r4, #0]
    9112:	f7fb fe29 	bl	4d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9116:	4607      	mov	r7, r0
    9118:	f004 fda9 	bl	dc6e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    911c:	b968      	cbnz	r0, 913a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    911e:	706e      	strb	r6, [r5, #1]
    9120:	200e      	movs	r0, #14
    9122:	7028      	strb	r0, [r5, #0]
    9124:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9128:	6068      	str	r0, [r5, #4]
    912a:	e011      	b.n	9150 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    912c:	8820      	ldrh	r0, [r4, #0]
    912e:	f7fb fe1b 	bl	4d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9132:	4607      	mov	r7, r0
    9134:	f004 fd9b 	bl	dc6e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9138:	b108      	cbz	r0, 913e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    913a:	2000      	movs	r0, #0
    913c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    913e:	706e      	strb	r6, [r5, #1]
    9140:	200d      	movs	r0, #13
    9142:	7028      	strb	r0, [r5, #0]
    9144:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9148:	6068      	str	r0, [r5, #4]
    914a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    914e:	8128      	strh	r0, [r5, #8]
    9150:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    9154:	4638      	mov	r0, r7
    9156:	f004 fda5 	bl	dca4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    915a:	e099      	b.n	9290 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    915c:	e7ff      	b.n	915e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    915e:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    9162:	f88d 0000 	strb.w	r0, [sp]
    9166:	9800      	ldr	r0, [sp, #0]
    9168:	9000      	str	r0, [sp, #0]
    916a:	f89d 0000 	ldrb.w	r0, [sp]
    916e:	b130      	cbz	r0, 917e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    9170:	706e      	strb	r6, [r5, #1]
    9172:	2010      	movs	r0, #16
    9174:	7028      	strb	r0, [r5, #0]
    9176:	80af      	strh	r7, [r5, #4]
    9178:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    917c:	e088      	b.n	9290 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    917e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    9182:	f88d 0000 	strb.w	r0, [sp]
    9186:	9800      	ldr	r0, [sp, #0]
    9188:	9000      	str	r0, [sp, #0]
    918a:	f89d 0000 	ldrb.w	r0, [sp]
    918e:	b1c8      	cbz	r0, 91c4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    9190:	706e      	strb	r6, [r5, #1]
    9192:	2015      	movs	r0, #21
    9194:	7028      	strb	r0, [r5, #0]
    9196:	e00a      	b.n	91ae <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    9198:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    919c:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    91a0:	6068      	str	r0, [r5, #4]
    91a2:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    91a6:	60a8      	str	r0, [r5, #8]
    91a8:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    91ac:	60e8      	str	r0, [r5, #12]
    91ae:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    91b2:	f88d 0000 	strb.w	r0, [sp]
    91b6:	9800      	ldr	r0, [sp, #0]
    91b8:	9000      	str	r0, [sp, #0]
    91ba:	f89d 0000 	ldrb.w	r0, [sp]
    91be:	2800      	cmp	r0, #0
    91c0:	d1ea      	bne.n	9198 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    91c2:	e065      	b.n	9290 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    91c4:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    91c8:	f88d 0000 	strb.w	r0, [sp]
    91cc:	9800      	ldr	r0, [sp, #0]
    91ce:	9000      	str	r0, [sp, #0]
    91d0:	f89d 0000 	ldrb.w	r0, [sp]
    91d4:	b158      	cbz	r0, 91ee <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    91d6:	706e      	strb	r6, [r5, #1]
    91d8:	201c      	movs	r0, #28
    91da:	7028      	strb	r0, [r5, #0]
    91dc:	220a      	movs	r2, #10
    91de:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    91e2:	1d28      	adds	r0, r5, #4
    91e4:	f003 fdd2 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    91e8:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    91ec:	e050      	b.n	9290 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    91ee:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    91f2:	f88d 0000 	strb.w	r0, [sp]
    91f6:	9800      	ldr	r0, [sp, #0]
    91f8:	9000      	str	r0, [sp, #0]
    91fa:	f89d 0000 	ldrb.w	r0, [sp]
    91fe:	b140      	cbz	r0, 9212 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    9200:	706e      	strb	r6, [r5, #1]
    9202:	201d      	movs	r0, #29
    9204:	7028      	strb	r0, [r5, #0]
    9206:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    920a:	6068      	str	r0, [r5, #4]
    920c:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    9210:	e03e      	b.n	9290 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9212:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    9216:	f88d 0000 	strb.w	r0, [sp]
    921a:	9800      	ldr	r0, [sp, #0]
    921c:	9000      	str	r0, [sp, #0]
    921e:	f89d 0000 	ldrb.w	r0, [sp]
    9222:	b198      	cbz	r0, 924c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    9224:	706e      	strb	r6, [r5, #1]
    9226:	201a      	movs	r0, #26
    9228:	7028      	strb	r0, [r5, #0]
    922a:	e004      	b.n	9236 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    922c:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    9230:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    9234:	6068      	str	r0, [r5, #4]
    9236:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    923a:	f88d 0000 	strb.w	r0, [sp]
    923e:	9800      	ldr	r0, [sp, #0]
    9240:	9000      	str	r0, [sp, #0]
    9242:	f89d 0000 	ldrb.w	r0, [sp]
    9246:	2800      	cmp	r0, #0
    9248:	d1f0      	bne.n	922c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    924a:	e021      	b.n	9290 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    924c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    9250:	f88d 0000 	strb.w	r0, [sp]
    9254:	9800      	ldr	r0, [sp, #0]
    9256:	9000      	str	r0, [sp, #0]
    9258:	f89d 0000 	ldrb.w	r0, [sp]
    925c:	2800      	cmp	r0, #0
    925e:	f43f af6d 	beq.w	913c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    9262:	706e      	strb	r6, [r5, #1]
    9264:	2016      	movs	r0, #22
    9266:	7028      	strb	r0, [r5, #0]
    9268:	e008      	b.n	927c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    926a:	bf00      	nop
    926c:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    9270:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    9274:	6068      	str	r0, [r5, #4]
    9276:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    927a:	8128      	strh	r0, [r5, #8]
    927c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    9280:	f88d 0000 	strb.w	r0, [sp]
    9284:	9800      	ldr	r0, [sp, #0]
    9286:	9000      	str	r0, [sp, #0]
    9288:	f89d 0000 	ldrb.w	r0, [sp]
    928c:	2800      	cmp	r0, #0
    928e:	d1ed      	bne.n	926c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    9290:	2001      	movs	r0, #1
    9292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009294 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    9294:	b570      	push	{r4, r5, r6, lr}
    9296:	4605      	mov	r5, r0
    9298:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    929c:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    92a0:	b1c9      	cbz	r1, 92d6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    92a2:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    92a6:	1a0c      	subs	r4, r1, r0
    92a8:	f1b4 0404 	subs.w	r4, r4, #4
    92ac:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    92b0:	b140      	cbz	r0, 92c4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    92b2:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    92b6:	2300      	movs	r3, #0
    92b8:	2109      	movs	r1, #9
    92ba:	f105 0078 	add.w	r0, r5, #120	; 0x78
    92be:	f004 ffca 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92c2:	b160      	cbz	r0, 92de <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    92c4:	4628      	mov	r0, r5
    92c6:	f005 ffe7 	bl	f298 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    92ca:	b138      	cbz	r0, 92dc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    92cc:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    92d0:	1a40      	subs	r0, r0, r1
    92d2:	1f00      	subs	r0, r0, #4
    92d4:	e003      	b.n	92de <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    92d6:	f1c0 0402 	rsb	r4, r0, #2
    92da:	e7e7      	b.n	92ac <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    92dc:	4620      	mov	r0, r4
    92de:	42a0      	cmp	r0, r4
    92e0:	da00      	bge.n	92e4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    92e2:	4604      	mov	r4, r0
    92e4:	2c00      	cmp	r4, #0
    92e6:	dc01      	bgt.n	92ec <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    92e8:	2000      	movs	r0, #0
    92ea:	bd70      	pop	{r4, r5, r6, pc}
    92ec:	b2a0      	uxth	r0, r4
    92ee:	bd70      	pop	{r4, r5, r6, pc}

000092f0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    92f0:	481b      	ldr	r0, [pc, #108]	; (9360 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    92f2:	491a      	ldr	r1, [pc, #104]	; (935c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    92f4:	6081      	str	r1, [r0, #8]
    92f6:	491b      	ldr	r1, [pc, #108]	; (9364 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    92f8:	61c1      	str	r1, [r0, #28]
    92fa:	491b      	ldr	r1, [pc, #108]	; (9368 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    92fc:	62c1      	str	r1, [r0, #44]	; 0x2c
    92fe:	491b      	ldr	r1, [pc, #108]	; (936c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    9300:	6101      	str	r1, [r0, #16]
    9302:	491b      	ldr	r1, [pc, #108]	; (9370 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    9304:	6141      	str	r1, [r0, #20]
    9306:	491b      	ldr	r1, [pc, #108]	; (9374 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    9308:	6441      	str	r1, [r0, #68]	; 0x44
    930a:	491b      	ldr	r1, [pc, #108]	; (9378 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    930c:	6181      	str	r1, [r0, #24]
    930e:	491b      	ldr	r1, [pc, #108]	; (937c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    9310:	6301      	str	r1, [r0, #48]	; 0x30
    9312:	491b      	ldr	r1, [pc, #108]	; (9380 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    9314:	6241      	str	r1, [r0, #36]	; 0x24
    9316:	491b      	ldr	r1, [pc, #108]	; (9384 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    9318:	64c1      	str	r1, [r0, #76]	; 0x4c
    931a:	491b      	ldr	r1, [pc, #108]	; (9388 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    931c:	6481      	str	r1, [r0, #72]	; 0x48
    931e:	491b      	ldr	r1, [pc, #108]	; (938c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    9320:	6341      	str	r1, [r0, #52]	; 0x34
    9322:	481c      	ldr	r0, [pc, #112]	; (9394 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    9324:	491a      	ldr	r1, [pc, #104]	; (9390 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    9326:	6081      	str	r1, [r0, #8]
    9328:	491b      	ldr	r1, [pc, #108]	; (9398 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    932a:	61c1      	str	r1, [r0, #28]
    932c:	491b      	ldr	r1, [pc, #108]	; (939c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    932e:	6201      	str	r1, [r0, #32]
    9330:	491b      	ldr	r1, [pc, #108]	; (93a0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    9332:	6041      	str	r1, [r0, #4]
    9334:	491b      	ldr	r1, [pc, #108]	; (93a4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    9336:	6001      	str	r1, [r0, #0]
    9338:	491b      	ldr	r1, [pc, #108]	; (93a8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    933a:	6281      	str	r1, [r0, #40]	; 0x28
    933c:	491b      	ldr	r1, [pc, #108]	; (93ac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    933e:	62c1      	str	r1, [r0, #44]	; 0x2c
    9340:	491b      	ldr	r1, [pc, #108]	; (93b0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    9342:	60c1      	str	r1, [r0, #12]
    9344:	491b      	ldr	r1, [pc, #108]	; (93b4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    9346:	6181      	str	r1, [r0, #24]
    9348:	491b      	ldr	r1, [pc, #108]	; (93b8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    934a:	6301      	str	r1, [r0, #48]	; 0x30
    934c:	491b      	ldr	r1, [pc, #108]	; (93bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    934e:	6481      	str	r1, [r0, #72]	; 0x48
    9350:	491b      	ldr	r1, [pc, #108]	; (93c0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    9352:	64c1      	str	r1, [r0, #76]	; 0x4c
    9354:	491b      	ldr	r1, [pc, #108]	; (93c4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    9356:	6441      	str	r1, [r0, #68]	; 0x44
    9358:	4770      	bx	lr
    935a:	0000      	.short	0x0000
    935c:	0000a63d 	.word	0x0000a63d
    9360:	2000012c 	.word	0x2000012c
    9364:	0000a679 	.word	0x0000a679
    9368:	0000a351 	.word	0x0000a351
    936c:	0000a091 	.word	0x0000a091
    9370:	0000a589 	.word	0x0000a589
    9374:	0000a4ed 	.word	0x0000a4ed
    9378:	0000a5c9 	.word	0x0000a5c9
    937c:	0000a715 	.word	0x0000a715
    9380:	0000a0c9 	.word	0x0000a0c9
    9384:	0000a325 	.word	0x0000a325
    9388:	0000a2f1 	.word	0x0000a2f1
    938c:	0000a579 	.word	0x0000a579
    9390:	0000aa95 	.word	0x0000aa95
    9394:	20000190 	.word	0x20000190
    9398:	0000aac5 	.word	0x0000aac5
    939c:	0000a881 	.word	0x0000a881
    93a0:	0000a7e5 	.word	0x0000a7e5
    93a4:	0000a815 	.word	0x0000a815
    93a8:	0000a951 	.word	0x0000a951
    93ac:	0000a985 	.word	0x0000a985
    93b0:	0000a845 	.word	0x0000a845
    93b4:	0000aa71 	.word	0x0000aa71
    93b8:	0000ab05 	.word	0x0000ab05
    93bc:	0000a911 	.word	0x0000a911
    93c0:	0000a941 	.word	0x0000a941
    93c4:	0000aa5d 	.word	0x0000aa5d

000093c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    93c8:	4806      	ldr	r0, [pc, #24]	; (93e4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    93ca:	4905      	ldr	r1, [pc, #20]	; (93e0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    93cc:	6581      	str	r1, [r0, #88]	; 0x58
    93ce:	4906      	ldr	r1, [pc, #24]	; (93e8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    93d0:	65c1      	str	r1, [r0, #92]	; 0x5c
    93d2:	4807      	ldr	r0, [pc, #28]	; (93f0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    93d4:	4905      	ldr	r1, [pc, #20]	; (93ec <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    93d6:	6581      	str	r1, [r0, #88]	; 0x58
    93d8:	4906      	ldr	r1, [pc, #24]	; (93f4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    93da:	6601      	str	r1, [r0, #96]	; 0x60
    93dc:	4770      	bx	lr
    93de:	0000      	.short	0x0000
    93e0:	0000a375 	.word	0x0000a375
    93e4:	2000012c 	.word	0x2000012c
    93e8:	0000a485 	.word	0x0000a485
    93ec:	0000a9b1 	.word	0x0000a9b1
    93f0:	20000190 	.word	0x20000190
    93f4:	0000a9e1 	.word	0x0000a9e1

000093f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    93f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93fa:	4d36      	ldr	r5, [pc, #216]	; (94d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    93fc:	2600      	movs	r6, #0
    93fe:	4604      	mov	r4, r0
    9400:	6068      	str	r0, [r5, #4]
    9402:	806e      	strh	r6, [r5, #2]
    9404:	706e      	strb	r6, [r5, #1]
    9406:	702e      	strb	r6, [r5, #0]
    9408:	8800      	ldrh	r0, [r0, #0]
    940a:	f7fb fedd 	bl	51c8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    940e:	6868      	ldr	r0, [r5, #4]
    9410:	8800      	ldrh	r0, [r0, #0]
    9412:	f7fb fe81 	bl	5118 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9416:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    941a:	6869      	ldr	r1, [r5, #4]
    941c:	1c40      	adds	r0, r0, #1
    941e:	b282      	uxth	r2, r0
    9420:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9424:	f005 f8d1 	bl	e5ca <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    9428:	b120      	cbz	r0, 9434 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    942a:	f44f 71ac 	mov.w	r1, #344	; 0x158
    942e:	2036      	movs	r0, #54	; 0x36
    9430:	f7fb f89c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9434:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    9438:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    943c:	4630      	mov	r0, r6
    943e:	2924      	cmp	r1, #36	; 0x24
    9440:	d10a      	bne.n	9458 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9442:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9446:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    944a:	1a51      	subs	r1, r2, r1
    944c:	b209      	sxth	r1, r1
    944e:	2900      	cmp	r1, #0
    9450:	db02      	blt.n	9458 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9452:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    9456:	e00f      	b.n	9478 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    9458:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    945c:	2924      	cmp	r1, #36	; 0x24
    945e:	d001      	beq.n	9464 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    9460:	2925      	cmp	r1, #37	; 0x25
    9462:	d10c      	bne.n	947e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9464:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9468:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    946c:	1a51      	subs	r1, r2, r1
    946e:	b209      	sxth	r1, r1
    9470:	2900      	cmp	r1, #0
    9472:	db04      	blt.n	947e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9474:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    9478:	f000 fd5a 	bl	9f30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    947c:	b318      	cbz	r0, 94c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    947e:	f000 fbfd 	bl	9c7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    9482:	2800      	cmp	r0, #0
    9484:	d125      	bne.n	94d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9486:	6868      	ldr	r0, [r5, #4]
    9488:	3078      	adds	r0, #120	; 0x78
    948a:	f005 fe7a 	bl	f182 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    948e:	b120      	cbz	r0, 949a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    9490:	6868      	ldr	r0, [r5, #4]
    9492:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    9496:	f000 faad 	bl	99f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    949a:	480f      	ldr	r0, [pc, #60]	; (94d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    949c:	9000      	str	r0, [sp, #0]
    949e:	4b0f      	ldr	r3, [pc, #60]	; (94dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    94a0:	4a0f      	ldr	r2, [pc, #60]	; (94e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    94a2:	4621      	mov	r1, r4
    94a4:	4630      	mov	r0, r6
    94a6:	f7fb ff39 	bl	531c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    94aa:	6868      	ldr	r0, [r5, #4]
    94ac:	2300      	movs	r3, #0
    94ae:	2105      	movs	r1, #5
    94b0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    94b4:	3078      	adds	r0, #120	; 0x78
    94b6:	f004 fece 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94ba:	2800      	cmp	r0, #0
    94bc:	d009      	beq.n	94d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    94be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    94c2:	f7fb bf25 	b.w	5310 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    94c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    94ca:	2100      	movs	r1, #0
    94cc:	4608      	mov	r0, r1
    94ce:	f000 bb81 	b.w	9bd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    94d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94d4:	2000011c 	.word	0x2000011c
    94d8:	00009bd5 	.word	0x00009bd5
    94dc:	00009605 	.word	0x00009605
    94e0:	00009ea9 	.word	0x00009ea9
    94e4:	4411      	add	r1, r2
    94e6:	78c2      	ldrb	r2, [r0, #3]
    94e8:	480c      	ldr	r0, [pc, #48]	; (951c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    94ea:	1d89      	adds	r1, r1, #6
    94ec:	b289      	uxth	r1, r1
    94ee:	6840      	ldr	r0, [r0, #4]
    94f0:	2a01      	cmp	r2, #1
    94f2:	d006      	beq.n	9502 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    94f4:	b142      	cbz	r2, 9508 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    94f6:	2a18      	cmp	r2, #24
    94f8:	d105      	bne.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    94fa:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    94fe:	b132      	cbz	r2, 950e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    9500:	e009      	b.n	9516 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9502:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9506:	4770      	bx	lr
    9508:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    950c:	4770      	bx	lr
    950e:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    9512:	b902      	cbnz	r2, 9516 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9514:	2100      	movs	r1, #0
    9516:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    951a:	4770      	bx	lr
    951c:	2000011c 	.word	0x2000011c
    9520:	490b      	ldr	r1, [pc, #44]	; (9550 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    9522:	78c2      	ldrb	r2, [r0, #3]
    9524:	6849      	ldr	r1, [r1, #4]
    9526:	2a01      	cmp	r2, #1
    9528:	d006      	beq.n	9538 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    952a:	b15a      	cbz	r2, 9544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    952c:	2a18      	cmp	r2, #24
    952e:	d108      	bne.n	9542 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    9530:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    9534:	f005 b92f 	b.w	e796 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    9538:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    953c:	7241      	strb	r1, [r0, #9]
    953e:	0a09      	lsrs	r1, r1, #8
    9540:	7281      	strb	r1, [r0, #10]
    9542:	4770      	bx	lr
    9544:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    9548:	7341      	strb	r1, [r0, #13]
    954a:	0a09      	lsrs	r1, r1, #8
    954c:	7381      	strb	r1, [r0, #14]
    954e:	4770      	bx	lr
    9550:	2000011c 	.word	0x2000011c
    9554:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9556:	4c2a      	ldr	r4, [pc, #168]	; (9600 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    9558:	2300      	movs	r3, #0
    955a:	4619      	mov	r1, r3
    955c:	6860      	ldr	r0, [r4, #4]
    955e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9562:	3078      	adds	r0, #120	; 0x78
    9564:	f004 fe77 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9568:	2800      	cmp	r0, #0
    956a:	d048      	beq.n	95fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    956c:	6860      	ldr	r0, [r4, #4]
    956e:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    9572:	f88d 1000 	strb.w	r1, [sp]
    9576:	9900      	ldr	r1, [sp, #0]
    9578:	9100      	str	r1, [sp, #0]
    957a:	f89d 1000 	ldrb.w	r1, [sp]
    957e:	2900      	cmp	r1, #0
    9580:	d03d      	beq.n	95fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9582:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9586:	f004 febf 	bl	e308 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    958a:	2800      	cmp	r0, #0
    958c:	d137      	bne.n	95fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    958e:	6860      	ldr	r0, [r4, #4]
    9590:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    9594:	280a      	cmp	r0, #10
    9596:	d932      	bls.n	95fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9598:	4668      	mov	r0, sp
    959a:	f7fc ff59 	bl	6450 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    959e:	2800      	cmp	r0, #0
    95a0:	d02d      	beq.n	95fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    95a2:	6861      	ldr	r1, [r4, #4]
    95a4:	2205      	movs	r2, #5
    95a6:	4668      	mov	r0, sp
    95a8:	318e      	adds	r1, #142	; 0x8e
    95aa:	f003 fbdd 	bl	cd68 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    95ae:	2500      	movs	r5, #0
    95b0:	b310      	cbz	r0, 95f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    95b2:	6860      	ldr	r0, [r4, #4]
    95b4:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    95b8:	7808      	ldrb	r0, [r1, #0]
    95ba:	b158      	cbz	r0, 95d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    95bc:	2205      	movs	r2, #5
    95be:	4668      	mov	r0, sp
    95c0:	1c49      	adds	r1, r1, #1
    95c2:	f003 fbd1 	bl	cd68 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    95c6:	2800      	cmp	r0, #0
    95c8:	d119      	bne.n	95fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    95ca:	6860      	ldr	r0, [r4, #4]
    95cc:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    95d0:	7800      	ldrb	r0, [r0, #0]
    95d2:	b940      	cbnz	r0, 95e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    95d4:	6860      	ldr	r0, [r4, #4]
    95d6:	9900      	ldr	r1, [sp, #0]
    95d8:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    95dc:	f8c0 1001 	str.w	r1, [r0, #1]
    95e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    95e4:	7141      	strb	r1, [r0, #5]
    95e6:	6860      	ldr	r0, [r4, #4]
    95e8:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    95ec:	7808      	ldrb	r0, [r1, #0]
    95ee:	1c40      	adds	r0, r0, #1
    95f0:	7008      	strb	r0, [r1, #0]
    95f2:	2001      	movs	r0, #1
    95f4:	f000 fd04 	bl	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    95f8:	6860      	ldr	r0, [r4, #4]
    95fa:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    95fe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9600:	2000011c 	.word	0x2000011c
    9604:	4a0c      	ldr	r2, [pc, #48]	; (9638 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    9606:	7851      	ldrb	r1, [r2, #1]
    9608:	b999      	cbnz	r1, 9632 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    960a:	4611      	mov	r1, r2
    960c:	2801      	cmp	r0, #1
    960e:	6849      	ldr	r1, [r1, #4]
    9610:	d008      	beq.n	9624 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    9612:	7890      	ldrb	r0, [r2, #2]
    9614:	0740      	lsls	r0, r0, #29
    9616:	d503      	bpl.n	9620 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    9618:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    961c:	2807      	cmp	r0, #7
    961e:	d008      	beq.n	9632 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9620:	2001      	movs	r0, #1
    9622:	4770      	bx	lr
    9624:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    9628:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    962a:	4288      	cmp	r0, r1
    962c:	d801      	bhi.n	9632 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    962e:	f7fe bd5d 	b.w	80ec <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    9632:	2000      	movs	r0, #0
    9634:	4770      	bx	lr
    9636:	0000      	.short	0x0000
    9638:	2000011c 	.word	0x2000011c
    963c:	b538      	push	{r3, r4, r5, lr}
    963e:	4c87      	ldr	r4, [pc, #540]	; (985c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    9640:	6860      	ldr	r0, [r4, #4]
    9642:	3078      	adds	r0, #120	; 0x78
    9644:	f005 fd9d 	bl	f182 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9648:	2800      	cmp	r0, #0
    964a:	d15b      	bne.n	9704 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    964c:	6860      	ldr	r0, [r4, #4]
    964e:	2300      	movs	r3, #0
    9650:	2101      	movs	r1, #1
    9652:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9656:	3078      	adds	r0, #120	; 0x78
    9658:	f004 fdfd 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    965c:	2800      	cmp	r0, #0
    965e:	d151      	bne.n	9704 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9660:	6860      	ldr	r0, [r4, #4]
    9662:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    9666:	f88d 1000 	strb.w	r1, [sp]
    966a:	9900      	ldr	r1, [sp, #0]
    966c:	9100      	str	r1, [sp, #0]
    966e:	f89d 1000 	ldrb.w	r1, [sp]
    9672:	b109      	cbz	r1, 9678 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    9674:	2002      	movs	r0, #2
    9676:	e038      	b.n	96ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9678:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    967c:	2300      	movs	r3, #0
    967e:	4619      	mov	r1, r3
    9680:	3078      	adds	r0, #120	; 0x78
    9682:	f004 fde8 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9686:	b128      	cbz	r0, 9694 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9688:	6860      	ldr	r0, [r4, #4]
    968a:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    968e:	b108      	cbz	r0, 9694 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9690:	2012      	movs	r0, #18
    9692:	e02a      	b.n	96ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9694:	6860      	ldr	r0, [r4, #4]
    9696:	2500      	movs	r5, #0
    9698:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    969c:	2a12      	cmp	r2, #18
    969e:	d01d      	beq.n	96dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    96a0:	dc04      	bgt.n	96ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    96a2:	2a03      	cmp	r2, #3
    96a4:	d025      	beq.n	96f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    96a6:	2a11      	cmp	r2, #17
    96a8:	d104      	bne.n	96b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    96aa:	e019      	b.n	96e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    96ac:	2a18      	cmp	r2, #24
    96ae:	d01b      	beq.n	96e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    96b0:	2a23      	cmp	r2, #35	; 0x23
    96b2:	d028      	beq.n	9706 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    96b4:	2300      	movs	r3, #0
    96b6:	2104      	movs	r1, #4
    96b8:	3078      	adds	r0, #120	; 0x78
    96ba:	f004 fdcc 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96be:	2800      	cmp	r0, #0
    96c0:	d120      	bne.n	9704 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    96c2:	6860      	ldr	r0, [r4, #4]
    96c4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    96c8:	2919      	cmp	r1, #25
    96ca:	d07c      	beq.n	97c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    96cc:	dc22      	bgt.n	9714 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    96ce:	2901      	cmp	r1, #1
    96d0:	d02c      	beq.n	972c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    96d2:	2902      	cmp	r1, #2
    96d4:	d037      	beq.n	9746 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    96d6:	2903      	cmp	r1, #3
    96d8:	d134      	bne.n	9744 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    96da:	e022      	b.n	9722 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    96dc:	200b      	movs	r0, #11
    96de:	e004      	b.n	96ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    96e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    96e4:	f000 bba0 	b.w	9e28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    96e8:	2006      	movs	r0, #6
    96ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    96ee:	f000 bc87 	b.w	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    96f2:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    96f6:	7101      	strb	r1, [r0, #4]
    96f8:	2007      	movs	r0, #7
    96fa:	f000 fc81 	bl	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    96fe:	6860      	ldr	r0, [r4, #4]
    9700:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9704:	bd38      	pop	{r3, r4, r5, pc}
    9706:	2018      	movs	r0, #24
    9708:	f000 fc7a 	bl	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    970c:	6860      	ldr	r0, [r4, #4]
    970e:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9712:	bd38      	pop	{r3, r4, r5, pc}
    9714:	291d      	cmp	r1, #29
    9716:	d018      	beq.n	974a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9718:	291e      	cmp	r1, #30
    971a:	d016      	beq.n	974a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    971c:	2921      	cmp	r1, #33	; 0x21
    971e:	d176      	bne.n	980e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9720:	e056      	b.n	97d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    9722:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    9726:	7141      	strb	r1, [r0, #5]
    9728:	2007      	movs	r0, #7
    972a:	e07e      	b.n	982a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    972c:	200c      	movs	r0, #12
    972e:	f000 fc67 	bl	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9732:	6860      	ldr	r0, [r4, #4]
    9734:	f820 5fba 	strh.w	r5, [r0, #186]!
    9738:	7981      	ldrb	r1, [r0, #6]
    973a:	f041 0101 	orr.w	r1, r1, #1
    973e:	7181      	strb	r1, [r0, #6]
    9740:	f800 5c34 	strb.w	r5, [r0, #-52]
    9744:	e063      	b.n	980e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9746:	2013      	movs	r0, #19
    9748:	e037      	b.n	97ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    974a:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    974e:	f88d 2000 	strb.w	r2, [sp]
    9752:	9a00      	ldr	r2, [sp, #0]
    9754:	9200      	str	r2, [sp, #0]
    9756:	f89d 2000 	ldrb.w	r2, [sp]
    975a:	bbaa      	cbnz	r2, 97c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    975c:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    9760:	f88d 2000 	strb.w	r2, [sp]
    9764:	9a00      	ldr	r2, [sp, #0]
    9766:	9200      	str	r2, [sp, #0]
    9768:	f89d 2000 	ldrb.w	r2, [sp]
    976c:	b1aa      	cbz	r2, 979a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    976e:	2924      	cmp	r1, #36	; 0x24
    9770:	d011      	beq.n	9796 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    9772:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9776:	2924      	cmp	r1, #36	; 0x24
    9778:	d00d      	beq.n	9796 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    977a:	2300      	movs	r3, #0
    977c:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9780:	f500 7199 	add.w	r1, r0, #306	; 0x132
    9784:	f005 f943 	bl	ea0e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9788:	6860      	ldr	r0, [r4, #4]
    978a:	211e      	movs	r1, #30
    978c:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9790:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9794:	e003      	b.n	979e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    9796:	2301      	movs	r3, #1
    9798:	e7f0      	b.n	977c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    979a:	291e      	cmp	r1, #30
    979c:	d137      	bne.n	980e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    979e:	6860      	ldr	r0, [r4, #4]
    97a0:	f005 f950 	bl	ea44 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    97a4:	f000 f85c 	bl	9860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    97a8:	6861      	ldr	r1, [r4, #4]
    97aa:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    97ae:	8bc2      	ldrh	r2, [r0, #30]
    97b0:	f821 2ffe 	strh.w	r2, [r1, #254]!
    97b4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    97b6:	8048      	strh	r0, [r1, #2]
    97b8:	2015      	movs	r0, #21
    97ba:	f000 fc21 	bl	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    97be:	6860      	ldr	r0, [r4, #4]
    97c0:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    97c4:	e001      	b.n	97ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    97c6:	e02f      	b.n	9828 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    97c8:	e021      	b.n	980e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    97ca:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    97ce:	e01e      	b.n	980e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    97d0:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    97d4:	2901      	cmp	r1, #1
    97d6:	d108      	bne.n	97ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    97d8:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    97dc:	f88d 1000 	strb.w	r1, [sp]
    97e0:	9900      	ldr	r1, [sp, #0]
    97e2:	9100      	str	r1, [sp, #0]
    97e4:	f89d 1000 	ldrb.w	r1, [sp]
    97e8:	b121      	cbz	r1, 97f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    97ea:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    97ee:	2902      	cmp	r1, #2
    97f0:	d005      	beq.n	97fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    97f2:	e00c      	b.n	980e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    97f4:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    97f8:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    97fc:	e002      	b.n	9804 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    97fe:	f850 1f62 	ldr.w	r1, [r0, #98]!
    9802:	6840      	ldr	r0, [r0, #4]
    9804:	f000 fc1e 	bl	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9808:	2018      	movs	r0, #24
    980a:	f000 fbf9 	bl	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    980e:	6860      	ldr	r0, [r4, #4]
    9810:	3078      	adds	r0, #120	; 0x78
    9812:	f005 fcb6 	bl	f182 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9816:	2800      	cmp	r0, #0
    9818:	f47f af7b 	bne.w	9712 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    981c:	6860      	ldr	r0, [r4, #4]
    981e:	3078      	adds	r0, #120	; 0x78
    9820:	f005 fcaf 	bl	f182 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9824:	b128      	cbz	r0, 9832 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    9826:	e00f      	b.n	9848 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9828:	2011      	movs	r0, #17
    982a:	f000 fbe9 	bl	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    982e:	6860      	ldr	r0, [r4, #4]
    9830:	e7c8      	b.n	97c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    9832:	6860      	ldr	r0, [r4, #4]
    9834:	2300      	movs	r3, #0
    9836:	4619      	mov	r1, r3
    9838:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    983c:	3078      	adds	r0, #120	; 0x78
    983e:	f004 fd0a 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9842:	b108      	cbz	r0, 9848 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9844:	f000 fa44 	bl	9cd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    9848:	6860      	ldr	r0, [r4, #4]
    984a:	3078      	adds	r0, #120	; 0x78
    984c:	f005 fc99 	bl	f182 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9850:	2800      	cmp	r0, #0
    9852:	d1e1      	bne.n	9818 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    9854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9858:	f7ff be7c 	b.w	9554 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    985c:	2000011c 	.word	0x2000011c
    9860:	480a      	ldr	r0, [pc, #40]	; (988c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    9862:	b510      	push	{r4, lr}
    9864:	6841      	ldr	r1, [r0, #4]
    9866:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    986a:	2801      	cmp	r0, #1
    986c:	d009      	beq.n	9882 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    986e:	8808      	ldrh	r0, [r1, #0]
    9870:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9874:	312c      	adds	r1, #44	; 0x2c
    9876:	f005 f8a6 	bl	e9c6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    987a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    987e:	f7fc bfb5 	b.w	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9882:	2002      	movs	r0, #2
    9884:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9888:	bd10      	pop	{r4, pc}
    988a:	0000      	.short	0x0000
    988c:	2000011c 	.word	0x2000011c
    9890:	b570      	push	{r4, r5, r6, lr}
    9892:	4c22      	ldr	r4, [pc, #136]	; (991c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    9894:	f04f 0500 	mov.w	r5, #0
    9898:	8861      	ldrh	r1, [r4, #2]
    989a:	0748      	lsls	r0, r1, #29
    989c:	d510      	bpl.n	98c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    989e:	6860      	ldr	r0, [r4, #4]
    98a0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    98a4:	2a03      	cmp	r2, #3
    98a6:	d004      	beq.n	98b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    98a8:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    98ac:	2a07      	cmp	r2, #7
    98ae:	d107      	bne.n	98c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    98b0:	e002      	b.n	98b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    98b2:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    98b6:	e026      	b.n	9906 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    98b8:	2201      	movs	r2, #1
    98ba:	7022      	strb	r2, [r4, #0]
    98bc:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    98c0:	0788      	lsls	r0, r1, #30
    98c2:	d508      	bpl.n	98d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    98c4:	68a0      	ldr	r0, [r4, #8]
    98c6:	78c0      	ldrb	r0, [r0, #3]
    98c8:	2819      	cmp	r0, #25
    98ca:	d21a      	bcs.n	9902 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    98cc:	4914      	ldr	r1, [pc, #80]	; (9920 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    98ce:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    98d2:	b1b0      	cbz	r0, 9902 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    98d4:	4780      	blx	r0
    98d6:	f000 f867 	bl	99a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    98da:	f000 f823 	bl	9924 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    98de:	4606      	mov	r6, r0
    98e0:	7860      	ldrb	r0, [r4, #1]
    98e2:	0700      	lsls	r0, r0, #28
    98e4:	d515      	bpl.n	9912 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    98e6:	6860      	ldr	r0, [r4, #4]
    98e8:	2300      	movs	r3, #0
    98ea:	2105      	movs	r1, #5
    98ec:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    98f0:	3078      	adds	r0, #120	; 0x78
    98f2:	f004 fcb0 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98f6:	b148      	cbz	r0, 990c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    98f8:	6860      	ldr	r0, [r4, #4]
    98fa:	2608      	movs	r6, #8
    98fc:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    9900:	e007      	b.n	9912 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    9902:	f240 61b1 	movw	r1, #1713	; 0x6b1
    9906:	2036      	movs	r0, #54	; 0x36
    9908:	f7fa fe30 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    990c:	2000      	movs	r0, #0
    990e:	f7fb fddd 	bl	54cc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9912:	6860      	ldr	r0, [r4, #4]
    9914:	f005 fc65 	bl	f1e2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    9918:	4630      	mov	r0, r6
    991a:	bd70      	pop	{r4, r5, r6, pc}
    991c:	2000011c 	.word	0x2000011c
    9920:	20000190 	.word	0x20000190
    9924:	b570      	push	{r4, r5, r6, lr}
    9926:	4c1e      	ldr	r4, [pc, #120]	; (99a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    9928:	2000      	movs	r0, #0
    992a:	78a1      	ldrb	r1, [r4, #2]
    992c:	07c9      	lsls	r1, r1, #31
    992e:	d01b      	beq.n	9968 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    9930:	68e0      	ldr	r0, [r4, #12]
    9932:	2300      	movs	r3, #0
    9934:	2105      	movs	r1, #5
    9936:	78c5      	ldrb	r5, [r0, #3]
    9938:	6860      	ldr	r0, [r4, #4]
    993a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    993e:	3078      	adds	r0, #120	; 0x78
    9940:	f004 fc89 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9944:	b188      	cbz	r0, 996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9946:	2d06      	cmp	r5, #6
    9948:	d00f      	beq.n	996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    994a:	dc06      	bgt.n	995a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    994c:	2d02      	cmp	r5, #2
    994e:	d00c      	beq.n	996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9950:	2d04      	cmp	r5, #4
    9952:	d00a      	beq.n	996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9954:	2d05      	cmp	r5, #5
    9956:	d106      	bne.n	9966 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    9958:	e007      	b.n	996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    995a:	2d0b      	cmp	r5, #11
    995c:	d005      	beq.n	996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    995e:	2d0d      	cmp	r5, #13
    9960:	d003      	beq.n	996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9962:	2d11      	cmp	r5, #17
    9964:	d001      	beq.n	996a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9966:	2008      	movs	r0, #8
    9968:	bd70      	pop	{r4, r5, r6, pc}
    996a:	68e0      	ldr	r0, [r4, #12]
    996c:	f7fc fe2c 	bl	65c8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9970:	b148      	cbz	r0, 9986 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9972:	68e0      	ldr	r0, [r4, #12]
    9974:	78c0      	ldrb	r0, [r0, #3]
    9976:	2819      	cmp	r0, #25
    9978:	d205      	bcs.n	9986 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    997a:	490a      	ldr	r1, [pc, #40]	; (99a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    997c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9980:	b108      	cbz	r0, 9986 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9982:	4780      	blx	r0
    9984:	e002      	b.n	998c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    9986:	2000      	movs	r0, #0
    9988:	f000 fbdc 	bl	a144 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    998c:	6861      	ldr	r1, [r4, #4]
    998e:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    9992:	1c52      	adds	r2, r2, #1
    9994:	f143 0300 	adc.w	r3, r3, #0
    9998:	e9c1 2300 	strd	r2, r3, [r1]
    999c:	bd70      	pop	{r4, r5, r6, pc}
    999e:	0000      	.short	0x0000
    99a0:	2000011c 	.word	0x2000011c
    99a4:	2000012c 	.word	0x2000012c
    99a8:	b510      	push	{r4, lr}
    99aa:	4c11      	ldr	r4, [pc, #68]	; (99f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    99ac:	78a0      	ldrb	r0, [r4, #2]
    99ae:	0700      	lsls	r0, r0, #28
    99b0:	d517      	bpl.n	99e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    99b2:	6860      	ldr	r0, [r4, #4]
    99b4:	2100      	movs	r1, #0
    99b6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    99ba:	f001 f97b 	bl	acb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    99be:	6860      	ldr	r0, [r4, #4]
    99c0:	3078      	adds	r0, #120	; 0x78
    99c2:	f005 fbde 	bl	f182 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    99c6:	b168      	cbz	r0, 99e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    99c8:	6860      	ldr	r0, [r4, #4]
    99ca:	21fe      	movs	r1, #254	; 0xfe
    99cc:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    99d0:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    99d4:	2908      	cmp	r1, #8
    99d6:	d104      	bne.n	99e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    99d8:	2102      	movs	r1, #2
    99da:	7021      	strb	r1, [r4, #0]
    99dc:	2100      	movs	r1, #0
    99de:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    99e2:	bd10      	pop	{r4, pc}
    99e4:	f240 61bd 	movw	r1, #1725	; 0x6bd
    99e8:	2036      	movs	r0, #54	; 0x36
    99ea:	f7fa fdbf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ee:	0000      	.short	0x0000
    99f0:	2000011c 	.word	0x2000011c
    99f4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    99f6:	4605      	mov	r5, r0
    99f8:	4668      	mov	r0, sp
    99fa:	f7fb fbcf 	bl	519c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    99fe:	b318      	cbz	r0, 9a48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    9a00:	2222      	movs	r2, #34	; 0x22
    9a02:	2100      	movs	r1, #0
    9a04:	9800      	ldr	r0, [sp, #0]
    9a06:	f003 fa3b 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9a0a:	2103      	movs	r1, #3
    9a0c:	9800      	ldr	r0, [sp, #0]
    9a0e:	f004 fea8 	bl	e762 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9a12:	9800      	ldr	r0, [sp, #0]
    9a14:	7801      	ldrb	r1, [r0, #0]
    9a16:	f021 0110 	bic.w	r1, r1, #16
    9a1a:	7001      	strb	r1, [r0, #0]
    9a1c:	4629      	mov	r1, r5
    9a1e:	f7fc fde3 	bl	65e8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9a22:	2100      	movs	r1, #0
    9a24:	4c6a      	ldr	r4, [pc, #424]	; (9bd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    9a26:	2d19      	cmp	r5, #25
    9a28:	d270      	bcs.n	9b0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    9a2a:	e8df f005 	tbb	[pc, r5]
    9a2e:	1c24      	.short	0x1c24
    9a30:	c9c94c10 	.word	0xc9c94c10
    9a34:	c97016c2 	.word	0xc97016c2
    9a38:	c964c2c2 	.word	0xc964c2c2
    9a3c:	b6c9c9c9 	.word	0xb6c9c9c9
    9a40:	8181c2c2 	.word	0x8181c2c2
    9a44:	00a3c99a 	.word	0x00a3c99a
    9a48:	f640 014f 	movw	r1, #2127	; 0x84f
    9a4c:	e0bd      	b.n	9bca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    9a4e:	6860      	ldr	r0, [r4, #4]
    9a50:	9900      	ldr	r1, [sp, #0]
    9a52:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    9a56:	7108      	strb	r0, [r1, #4]
    9a58:	e0ab      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9a5a:	6861      	ldr	r1, [r4, #4]
    9a5c:	9800      	ldr	r0, [sp, #0]
    9a5e:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9a62:	7101      	strb	r1, [r0, #4]
    9a64:	e0a5      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9a66:	6860      	ldr	r0, [r4, #4]
    9a68:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9a6c:	9800      	ldr	r0, [sp, #0]
    9a6e:	1c49      	adds	r1, r1, #1
    9a70:	f004 fe57 	bl	e722 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    9a74:	e09d      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9a76:	6860      	ldr	r0, [r4, #4]
    9a78:	9d00      	ldr	r5, [sp, #0]
    9a7a:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    9a7e:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    9a82:	f004 fd6b 	bl	e55c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    9a86:	7128      	strb	r0, [r5, #4]
    9a88:	6860      	ldr	r0, [r4, #4]
    9a8a:	9d00      	ldr	r5, [sp, #0]
    9a8c:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    9a90:	c803      	ldmia	r0, {r0, r1}
    9a92:	f004 fd58 	bl	e546 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    9a96:	7168      	strb	r0, [r5, #5]
    9a98:	0a00      	lsrs	r0, r0, #8
    9a9a:	71a8      	strb	r0, [r5, #6]
    9a9c:	6860      	ldr	r0, [r4, #4]
    9a9e:	9d00      	ldr	r5, [sp, #0]
    9aa0:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    9aa4:	f004 fb8d 	bl	e1c2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9aa8:	71e8      	strb	r0, [r5, #7]
    9aaa:	0a00      	lsrs	r0, r0, #8
    9aac:	7228      	strb	r0, [r5, #8]
    9aae:	6862      	ldr	r2, [r4, #4]
    9ab0:	9800      	ldr	r0, [sp, #0]
    9ab2:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    9ab6:	7241      	strb	r1, [r0, #9]
    9ab8:	0a09      	lsrs	r1, r1, #8
    9aba:	7281      	strb	r1, [r0, #10]
    9abc:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    9ac0:	f004 fe34 	bl	e72c <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    9ac4:	e075      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9ac6:	6861      	ldr	r1, [r4, #4]
    9ac8:	9800      	ldr	r0, [sp, #0]
    9aca:	f201 115b 	addw	r1, r1, #347	; 0x15b
    9ace:	f004 fe38 	bl	e742 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    9ad2:	6861      	ldr	r1, [r4, #4]
    9ad4:	9800      	ldr	r0, [sp, #0]
    9ad6:	f201 1163 	addw	r1, r1, #355	; 0x163
    9ada:	f004 fe2b 	bl	e734 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    9ade:	6861      	ldr	r1, [r4, #4]
    9ae0:	9800      	ldr	r0, [sp, #0]
    9ae2:	f201 1175 	addw	r1, r1, #373	; 0x175
    9ae6:	f004 fe31 	bl	e74c <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    9aea:	6861      	ldr	r1, [r4, #4]
    9aec:	9800      	ldr	r0, [sp, #0]
    9aee:	31f0      	adds	r1, #240	; 0xf0
    9af0:	f004 fe23 	bl	e73a <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    9af4:	e05d      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9af6:	9800      	ldr	r0, [sp, #0]
    9af8:	220b      	movs	r2, #11
    9afa:	7102      	strb	r2, [r0, #4]
    9afc:	2259      	movs	r2, #89	; 0x59
    9afe:	7142      	strb	r2, [r0, #5]
    9b00:	7181      	strb	r1, [r0, #6]
    9b02:	21fe      	movs	r1, #254	; 0xfe
    9b04:	71c1      	strb	r1, [r0, #7]
    9b06:	2112      	movs	r1, #18
    9b08:	7201      	strb	r1, [r0, #8]
    9b0a:	e052      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9b0c:	e058      	b.n	9bc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    9b0e:	9101      	str	r1, [sp, #4]
    9b10:	9102      	str	r1, [sp, #8]
    9b12:	f001 fe5d 	bl	b7d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b16:	f644 112f 	movw	r1, #18735	; 0x492f
    9b1a:	4008      	ands	r0, r1
    9b1c:	f88d 0004 	strb.w	r0, [sp, #4]
    9b20:	0a00      	lsrs	r0, r0, #8
    9b22:	f88d 0005 	strb.w	r0, [sp, #5]
    9b26:	a901      	add	r1, sp, #4
    9b28:	9800      	ldr	r0, [sp, #0]
    9b2a:	f004 fe15 	bl	e758 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9b2e:	e040      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9b30:	6860      	ldr	r0, [r4, #4]
    9b32:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    9b36:	9800      	ldr	r0, [sp, #0]
    9b38:	f004 fe25 	bl	e786 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9b3c:	6860      	ldr	r0, [r4, #4]
    9b3e:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    9b42:	9800      	ldr	r0, [sp, #0]
    9b44:	f004 fe23 	bl	e78e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9b48:	6860      	ldr	r0, [r4, #4]
    9b4a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9b4e:	9800      	ldr	r0, [sp, #0]
    9b50:	f004 fe11 	bl	e776 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9b54:	6860      	ldr	r0, [r4, #4]
    9b56:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    9b5a:	9800      	ldr	r0, [sp, #0]
    9b5c:	f004 fe0f 	bl	e77e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9b60:	e027      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9b62:	6861      	ldr	r1, [r4, #4]
    9b64:	9800      	ldr	r0, [sp, #0]
    9b66:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    9b6a:	7102      	strb	r2, [r0, #4]
    9b6c:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    9b70:	7141      	strb	r1, [r0, #5]
    9b72:	e01e      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9b74:	6860      	ldr	r0, [r4, #4]
    9b76:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    9b7a:	f004 fc10 	bl	e39e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9b7e:	4601      	mov	r1, r0
    9b80:	9800      	ldr	r0, [sp, #0]
    9b82:	f004 fe0c 	bl	e79e <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    9b86:	6860      	ldr	r0, [r4, #4]
    9b88:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    9b8c:	f004 fc07 	bl	e39e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9b90:	4601      	mov	r1, r0
    9b92:	9800      	ldr	r0, [sp, #0]
    9b94:	f004 fded 	bl	e772 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    9b98:	e00b      	b.n	9bb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9b9a:	6860      	ldr	r0, [r4, #4]
    9b9c:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    9ba0:	9800      	ldr	r0, [sp, #0]
    9ba2:	f004 fdba 	bl	e71a <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9ba6:	6860      	ldr	r0, [r4, #4]
    9ba8:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    9bac:	9800      	ldr	r0, [sp, #0]
    9bae:	f004 fdb6 	bl	e71e <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9bb2:	f7fb facd 	bl	5150 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9bb6:	b130      	cbz	r0, 9bc6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    9bb8:	9800      	ldr	r0, [sp, #0]
    9bba:	f7ff fcb1 	bl	9520 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9bbe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9bc0:	f640 01db 	movw	r1, #2267	; 0x8db
    9bc4:	e001      	b.n	9bca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    9bc6:	f640 01e1 	movw	r1, #2273	; 0x8e1
    9bca:	2036      	movs	r0, #54	; 0x36
    9bcc:	f7fa fcce 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bd0:	2000011c 	.word	0x2000011c
    9bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bd8:	4c27      	ldr	r4, [pc, #156]	; (9c78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    9bda:	4680      	mov	r8, r0
    9bdc:	460d      	mov	r5, r1
    9bde:	8860      	ldrh	r0, [r4, #2]
    9be0:	f04f 0600 	mov.w	r6, #0
    9be4:	05c1      	lsls	r1, r0, #23
    9be6:	4620      	mov	r0, r4
    9be8:	6840      	ldr	r0, [r0, #4]
    9bea:	d502      	bpl.n	9bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    9bec:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    9bf0:	e004      	b.n	9bfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    9bf2:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    9bf6:	1c49      	adds	r1, r1, #1
    9bf8:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    9bfc:	f005 fb4c 	bl	f298 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    9c00:	2701      	movs	r7, #1
    9c02:	b1e0      	cbz	r0, 9c3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9c04:	8860      	ldrh	r0, [r4, #2]
    9c06:	0500      	lsls	r0, r0, #20
    9c08:	d506      	bpl.n	9c18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    9c0a:	6860      	ldr	r0, [r4, #4]
    9c0c:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9c10:	b111      	cbz	r1, 9c18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    9c12:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    9c16:	e012      	b.n	9c3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9c18:	6860      	ldr	r0, [r4, #4]
    9c1a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    9c1e:	1c49      	adds	r1, r1, #1
    9c20:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9c24:	f005 face 	bl	f1c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    9c28:	6860      	ldr	r0, [r4, #4]
    9c2a:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    9c2e:	4291      	cmp	r1, r2
    9c30:	d305      	bcc.n	9c3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9c32:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    9c36:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    9c3a:	f7fc fdd7 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c3e:	8860      	ldrh	r0, [r4, #2]
    9c40:	f410 7f40 	tst.w	r0, #768	; 0x300
    9c44:	d008      	beq.n	9c58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9c46:	6860      	ldr	r0, [r4, #4]
    9c48:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9c4c:	b921      	cbnz	r1, 9c58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9c4e:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9c52:	2101      	movs	r1, #1
    9c54:	f7fe fa6c 	bl	8130 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9c58:	ea58 0005 	orrs.w	r0, r8, r5
    9c5c:	d104      	bne.n	9c68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    9c5e:	f7ff fe17 	bl	9890 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    9c62:	4605      	mov	r5, r0
    9c64:	f7ff fcea 	bl	963c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    9c68:	4629      	mov	r1, r5
    9c6a:	4640      	mov	r0, r8
    9c6c:	f000 ff7a 	bl	ab64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    9c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9c74:	f7fb ba56 	b.w	5124 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9c78:	2000011c 	.word	0x2000011c
    9c7c:	4813      	ldr	r0, [pc, #76]	; (9ccc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    9c7e:	6840      	ldr	r0, [r0, #4]
    9c80:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    9c84:	b129      	cbz	r1, 9c92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    9c86:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    9c8a:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    9c8e:	4291      	cmp	r1, r2
    9c90:	d215      	bcs.n	9cbe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9c92:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9c96:	b129      	cbz	r1, 9ca4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    9c98:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    9c9c:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    9ca0:	4291      	cmp	r1, r2
    9ca2:	d20c      	bcs.n	9cbe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9ca4:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    9ca8:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9cac:	428a      	cmp	r2, r1
    9cae:	d206      	bcs.n	9cbe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9cb0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    9cb4:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    9cb8:	b11a      	cbz	r2, 9cc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    9cba:	4288      	cmp	r0, r1
    9cbc:	d303      	bcc.n	9cc6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    9cbe:	2001      	movs	r0, #1
    9cc0:	4770      	bx	lr
    9cc2:	2806      	cmp	r0, #6
    9cc4:	d2fb      	bcs.n	9cbe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9cc6:	2000      	movs	r0, #0
    9cc8:	4770      	bx	lr
    9cca:	0000      	.short	0x0000
    9ccc:	2000011c 	.word	0x2000011c
    9cd0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9cd2:	4c54      	ldr	r4, [pc, #336]	; (9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    9cd4:	6860      	ldr	r0, [r4, #4]
    9cd6:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    9cda:	f88d 1000 	strb.w	r1, [sp]
    9cde:	9900      	ldr	r1, [sp, #0]
    9ce0:	9100      	str	r1, [sp, #0]
    9ce2:	f89d 1000 	ldrb.w	r1, [sp]
    9ce6:	b129      	cbz	r1, 9cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    9ce8:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9cec:	f004 fb0c 	bl	e308 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9cf0:	2800      	cmp	r0, #0
    9cf2:	d00a      	beq.n	9d0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    9cf4:	6860      	ldr	r0, [r4, #4]
    9cf6:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    9cfa:	b181      	cbz	r1, 9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    9cfc:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9d00:	b149      	cbz	r1, 9d16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    9d02:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    9d06:	b108      	cbz	r0, 9d0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    9d08:	200a      	movs	r0, #10
    9d0a:	e087      	b.n	9e1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9d0c:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    9d10:	2036      	movs	r0, #54	; 0x36
    9d12:	f7fa fc2b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d16:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9d1a:	f000 b885 	b.w	9e28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    9d1e:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    9d22:	b109      	cbz	r1, 9d28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    9d24:	2008      	movs	r0, #8
    9d26:	e079      	b.n	9e1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9d28:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9d2c:	2500      	movs	r5, #0
    9d2e:	b181      	cbz	r1, 9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    9d30:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9d34:	0780      	lsls	r0, r0, #30
    9d36:	d10b      	bne.n	9d50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9d38:	200c      	movs	r0, #12
    9d3a:	f000 f961 	bl	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9d3e:	6860      	ldr	r0, [r4, #4]
    9d40:	2101      	movs	r1, #1
    9d42:	f820 5fb4 	strh.w	r5, [r0, #180]!
    9d46:	7101      	strb	r1, [r0, #4]
    9d48:	7b01      	ldrb	r1, [r0, #12]
    9d4a:	f041 0101 	orr.w	r1, r1, #1
    9d4e:	7301      	strb	r1, [r0, #12]
    9d50:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9d52:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    9d56:	f88d 1004 	strb.w	r1, [sp, #4]
    9d5a:	9901      	ldr	r1, [sp, #4]
    9d5c:	9101      	str	r1, [sp, #4]
    9d5e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d62:	b141      	cbz	r1, 9d76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    9d64:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    9d68:	f88d 1000 	strb.w	r1, [sp]
    9d6c:	9900      	ldr	r1, [sp, #0]
    9d6e:	9100      	str	r1, [sp, #0]
    9d70:	f89d 1000 	ldrb.w	r1, [sp]
    9d74:	b391      	cbz	r1, 9ddc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    9d76:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9d7a:	2901      	cmp	r1, #1
    9d7c:	d1e8      	bne.n	9d50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9d7e:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9d82:	f88d 1000 	strb.w	r1, [sp]
    9d86:	9900      	ldr	r1, [sp, #0]
    9d88:	9100      	str	r1, [sp, #0]
    9d8a:	f89d 1000 	ldrb.w	r1, [sp]
    9d8e:	2900      	cmp	r1, #0
    9d90:	d1de      	bne.n	9d50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9d92:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9d96:	f004 fab7 	bl	e308 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9d9a:	2800      	cmp	r0, #0
    9d9c:	d1d8      	bne.n	9d50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9d9e:	6860      	ldr	r0, [r4, #4]
    9da0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9da4:	f005 f9f5 	bl	f192 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9da8:	4605      	mov	r5, r0
    9daa:	6860      	ldr	r0, [r4, #4]
    9dac:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9db0:	f005 f9ef 	bl	f192 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9db4:	4606      	mov	r6, r0
    9db6:	6860      	ldr	r0, [r4, #4]
    9db8:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    9dbc:	4628      	mov	r0, r5
    9dbe:	f005 f9f3 	bl	f1a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9dc2:	b350      	cbz	r0, 9e1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    9dc4:	6860      	ldr	r0, [r4, #4]
    9dc6:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    9dca:	4630      	mov	r0, r6
    9dcc:	f005 f9ec 	bl	f1a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9dd0:	b318      	cbz	r0, 9e1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    9dd2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9dd6:	2000      	movs	r0, #0
    9dd8:	f000 b8ee 	b.w	9fb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9ddc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9de0:	2924      	cmp	r1, #36	; 0x24
    9de2:	d018      	beq.n	9e16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9de4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9de8:	2924      	cmp	r1, #36	; 0x24
    9dea:	d014      	beq.n	9e16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9dec:	f05f 0300 	movs.w	r3, #0
    9df0:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9df4:	f500 7199 	add.w	r1, r0, #306	; 0x132
    9df8:	f004 fe09 	bl	ea0e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9dfc:	6860      	ldr	r0, [r4, #4]
    9dfe:	4602      	mov	r2, r0
    9e00:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9e04:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    9e08:	8bc8      	ldrh	r0, [r1, #30]
    9e0a:	f822 0ffe 	strh.w	r0, [r2, #254]!
    9e0e:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    9e10:	8050      	strh	r0, [r2, #2]
    9e12:	2014      	movs	r0, #20
    9e14:	e002      	b.n	9e1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9e16:	2301      	movs	r3, #1
    9e18:	e7ea      	b.n	9df0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    9e1a:	2016      	movs	r0, #22
    9e1c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9e20:	f000 b8ee 	b.w	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e24:	2000011c 	.word	0x2000011c
    9e28:	b510      	push	{r4, lr}
    9e2a:	4c1e      	ldr	r4, [pc, #120]	; (9ea4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    9e2c:	6862      	ldr	r2, [r4, #4]
    9e2e:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9e32:	2808      	cmp	r0, #8
    9e34:	d20d      	bcs.n	9e52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    9e36:	f1c0 0108 	rsb	r1, r0, #8
    9e3a:	4410      	add	r0, r2
    9e3c:	b2c9      	uxtb	r1, r1
    9e3e:	f200 1075 	addw	r0, r0, #373	; 0x175
    9e42:	f7fa fc21 	bl	4688 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9e46:	6861      	ldr	r1, [r4, #4]
    9e48:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9e4c:	4410      	add	r0, r2
    9e4e:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9e52:	6862      	ldr	r2, [r4, #4]
    9e54:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9e58:	3808      	subs	r0, #8
    9e5a:	2804      	cmp	r0, #4
    9e5c:	d20c      	bcs.n	9e78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    9e5e:	f1c0 0104 	rsb	r1, r0, #4
    9e62:	4410      	add	r0, r2
    9e64:	b2c9      	uxtb	r1, r1
    9e66:	30f0      	adds	r0, #240	; 0xf0
    9e68:	f7fa fc0e 	bl	4688 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9e6c:	6861      	ldr	r1, [r4, #4]
    9e6e:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9e72:	4410      	add	r0, r2
    9e74:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9e78:	6860      	ldr	r0, [r4, #4]
    9e7a:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    9e7e:	290c      	cmp	r1, #12
    9e80:	d30e      	bcc.n	9ea0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    9e82:	d005      	beq.n	9e90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    9e84:	f640 1131 	movw	r1, #2353	; 0x931
    9e88:	f04f 0036 	mov.w	r0, #54	; 0x36
    9e8c:	f7fa fb6e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e90:	2100      	movs	r1, #0
    9e92:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    9e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e9a:	2003      	movs	r0, #3
    9e9c:	f000 b8b0 	b.w	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9ea0:	bd10      	pop	{r4, pc}
    9ea2:	0000      	.short	0x0000
    9ea4:	2000011c 	.word	0x2000011c
    9ea8:	b570      	push	{r4, r5, r6, lr}
    9eaa:	4b20      	ldr	r3, [pc, #128]	; (9f2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    9eac:	4602      	mov	r2, r0
    9eae:	460c      	mov	r4, r1
    9eb0:	8858      	ldrh	r0, [r3, #2]
    9eb2:	4310      	orrs	r0, r2
    9eb4:	8058      	strh	r0, [r3, #2]
    9eb6:	4618      	mov	r0, r3
    9eb8:	0791      	lsls	r1, r2, #30
    9eba:	6840      	ldr	r0, [r0, #4]
    9ebc:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    9ec0:	d507      	bpl.n	9ed2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    9ec2:	b121      	cbz	r1, 9ece <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    9ec4:	f640 21c5 	movw	r1, #2757	; 0xac5
    9ec8:	2036      	movs	r0, #54	; 0x36
    9eca:	f7fa fb4f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ece:	609c      	str	r4, [r3, #8]
    9ed0:	e003      	b.n	9eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    9ed2:	b101      	cbz	r1, 9ed6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    9ed4:	60dc      	str	r4, [r3, #12]
    9ed6:	0791      	lsls	r1, r2, #30
    9ed8:	d515      	bpl.n	9f06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9eda:	78e1      	ldrb	r1, [r4, #3]
    9edc:	2906      	cmp	r1, #6
    9ede:	d002      	beq.n	9ee6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    9ee0:	290b      	cmp	r1, #11
    9ee2:	d110      	bne.n	9f06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9ee4:	e008      	b.n	9ef8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    9ee6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9eea:	2918      	cmp	r1, #24
    9eec:	d10b      	bne.n	9f06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9eee:	2100      	movs	r1, #0
    9ef0:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    9ef4:	2101      	movs	r1, #1
    9ef6:	e004      	b.n	9f02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    9ef8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9efc:	2912      	cmp	r1, #18
    9efe:	d102      	bne.n	9f06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9f00:	2100      	movs	r1, #0
    9f02:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    9f06:	0691      	lsls	r1, r2, #26
    9f08:	d501      	bpl.n	9f0e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    9f0a:	2108      	movs	r1, #8
    9f0c:	7059      	strb	r1, [r3, #1]
    9f0e:	0611      	lsls	r1, r2, #24
    9f10:	d50a      	bpl.n	9f28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    9f12:	8a82      	ldrh	r2, [r0, #20]
    9f14:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9f18:	4620      	mov	r0, r4
    9f1a:	f7ff fae3 	bl	94e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    9f1e:	4620      	mov	r0, r4
    9f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f24:	f7ff bafc 	b.w	9520 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9f28:	bd70      	pop	{r4, r5, r6, pc}
    9f2a:	0000      	.short	0x0000
    9f2c:	2000011c 	.word	0x2000011c
    9f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f34:	4c1f      	ldr	r4, [pc, #124]	; (9fb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    9f36:	2501      	movs	r5, #1
    9f38:	6862      	ldr	r2, [r4, #4]
    9f3a:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    9f3e:	b908      	cbnz	r0, 9f44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    9f40:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9f44:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    9f48:	b909      	cbnz	r1, 9f4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    9f4a:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9f4e:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    9f52:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    9f56:	3262      	adds	r2, #98	; 0x62
    9f58:	2001      	movs	r0, #1
    9f5a:	7290      	strb	r0, [r2, #10]
    9f5c:	2000      	movs	r0, #0
    9f5e:	f000 f82b 	bl	9fb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9f62:	6860      	ldr	r0, [r4, #4]
    9f64:	302c      	adds	r0, #44	; 0x2c
    9f66:	f004 fdc1 	bl	eaec <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9f6a:	4606      	mov	r6, r0
    9f6c:	6860      	ldr	r0, [r4, #4]
    9f6e:	f004 fd69 	bl	ea44 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9f72:	b1c0      	cbz	r0, 9fa6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9f74:	6860      	ldr	r0, [r4, #4]
    9f76:	302c      	adds	r0, #44	; 0x2c
    9f78:	f004 fdb8 	bl	eaec <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9f7c:	6861      	ldr	r1, [r4, #4]
    9f7e:	4607      	mov	r7, r0
    9f80:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9f84:	8808      	ldrh	r0, [r1, #0]
    9f86:	312c      	adds	r1, #44	; 0x2c
    9f88:	f004 fd1d 	bl	e9c6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9f8c:	42be      	cmp	r6, r7
    9f8e:	d20a      	bcs.n	9fa6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9f90:	f7f7 fed4 	bl	1d3c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9f94:	4601      	mov	r1, r0
    9f96:	1bb8      	subs	r0, r7, r6
    9f98:	2865      	cmp	r0, #101	; 0x65
    9f9a:	d200      	bcs.n	9f9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    9f9c:	2065      	movs	r0, #101	; 0x65
    9f9e:	f7f7 fdc1 	bl	1b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9fa2:	b100      	cbz	r0, 9fa6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9fa4:	2500      	movs	r5, #0
    9fa6:	2104      	movs	r1, #4
    9fa8:	6860      	ldr	r0, [r4, #4]
    9faa:	f7fe f8c1 	bl	8130 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9fae:	4628      	mov	r0, r5
    9fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fb4:	2000011c 	.word	0x2000011c
    9fb8:	b510      	push	{r4, lr}
    9fba:	4c10      	ldr	r4, [pc, #64]	; (9ffc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    9fbc:	6861      	ldr	r1, [r4, #4]
    9fbe:	880a      	ldrh	r2, [r1, #0]
    9fc0:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    9fc4:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    9fc8:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9fcc:	f005 f8e1 	bl	f192 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9fd0:	6861      	ldr	r1, [r4, #4]
    9fd2:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    9fd6:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9fda:	f005 f8da 	bl	f192 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9fde:	6862      	ldr	r2, [r4, #4]
    9fe0:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    9fe4:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    9fe8:	2001      	movs	r0, #1
    9fea:	7008      	strb	r0, [r1, #0]
    9fec:	2000      	movs	r0, #0
    9fee:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    9ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9ff6:	f7fc bbf9 	b.w	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ffa:	0000      	.short	0x0000
    9ffc:	2000011c 	.word	0x2000011c
    a000:	490f      	ldr	r1, [pc, #60]	; (a040 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    a002:	280c      	cmp	r0, #12
    a004:	6849      	ldr	r1, [r1, #4]
    a006:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    a00a:	d014      	beq.n	a036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a00c:	2813      	cmp	r0, #19
    a00e:	d012      	beq.n	a036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a010:	2818      	cmp	r0, #24
    a012:	d010      	beq.n	a036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a014:	2200      	movs	r2, #0
    a016:	2811      	cmp	r0, #17
    a018:	d00e      	beq.n	a038 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a01a:	2807      	cmp	r0, #7
    a01c:	d00b      	beq.n	a036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a01e:	2815      	cmp	r0, #21
    a020:	d00a      	beq.n	a038 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a022:	2801      	cmp	r0, #1
    a024:	d007      	beq.n	a036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a026:	2800      	cmp	r0, #0
    a028:	d005      	beq.n	a036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a02a:	2802      	cmp	r0, #2
    a02c:	d003      	beq.n	a036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a02e:	f821 2fb4 	strh.w	r2, [r1, #180]!
    a032:	2001      	movs	r0, #1
    a034:	7108      	strb	r0, [r1, #4]
    a036:	4770      	bx	lr
    a038:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    a03c:	4770      	bx	lr
    a03e:	0000      	.short	0x0000
    a040:	2000011c 	.word	0x2000011c
    a044:	b538      	push	{r3, r4, r5, lr}
    a046:	4c11      	ldr	r4, [pc, #68]	; (a08c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    a048:	6862      	ldr	r2, [r4, #4]
    a04a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    a04e:	f8ad 2000 	strh.w	r2, [sp]
    a052:	f004 f9d9 	bl	e408 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    a056:	f89d 3000 	ldrb.w	r3, [sp]
    a05a:	b2c2      	uxtb	r2, r0
    a05c:	2100      	movs	r1, #0
    a05e:	4293      	cmp	r3, r2
    a060:	d003      	beq.n	a06a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    a062:	6863      	ldr	r3, [r4, #4]
    a064:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    a068:	e002      	b.n	a070 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    a06a:	6862      	ldr	r2, [r4, #4]
    a06c:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    a070:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a074:	f3c0 2007 	ubfx	r0, r0, #8, #8
    a078:	4282      	cmp	r2, r0
    a07a:	d003      	beq.n	a084 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    a07c:	6861      	ldr	r1, [r4, #4]
    a07e:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    a082:	bd38      	pop	{r3, r4, r5, pc}
    a084:	6860      	ldr	r0, [r4, #4]
    a086:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    a08a:	bd38      	pop	{r3, r4, r5, pc}
    a08c:	2000011c 	.word	0x2000011c
    a090:	b510      	push	{r4, lr}
    a092:	4c0c      	ldr	r4, [pc, #48]	; (a0c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    a094:	6861      	ldr	r1, [r4, #4]
    a096:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a09a:	2813      	cmp	r0, #19
    a09c:	d001      	beq.n	a0a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    a09e:	2002      	movs	r0, #2
    a0a0:	bd10      	pop	{r4, pc}
    a0a2:	f201 117d 	addw	r1, r1, #381	; 0x17d
    a0a6:	68e0      	ldr	r0, [r4, #12]
    a0a8:	f004 fae9 	bl	e67e <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    a0ac:	6861      	ldr	r1, [r4, #4]
    a0ae:	68e0      	ldr	r0, [r4, #12]
    a0b0:	31f4      	adds	r1, #244	; 0xf4
    a0b2:	f004 fae1 	bl	e678 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    a0b6:	6861      	ldr	r1, [r4, #4]
    a0b8:	2016      	movs	r0, #22
    a0ba:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a0be:	2000      	movs	r0, #0
    a0c0:	bd10      	pop	{r4, pc}
    a0c2:	0000      	.short	0x0000
    a0c4:	2000011c 	.word	0x2000011c
    a0c8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a0ca:	4c1d      	ldr	r4, [pc, #116]	; (a140 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    a0cc:	2300      	movs	r3, #0
    a0ce:	2107      	movs	r1, #7
    a0d0:	6860      	ldr	r0, [r4, #4]
    a0d2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0d6:	3078      	adds	r0, #120	; 0x78
    a0d8:	f004 f8bd 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0dc:	b370      	cbz	r0, a13c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    a0de:	4669      	mov	r1, sp
    a0e0:	68e0      	ldr	r0, [r4, #12]
    a0e2:	f004 fad1 	bl	e688 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a0e6:	f001 fb73 	bl	b7d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a0ea:	f644 112f 	movw	r1, #18735	; 0x492f
    a0ee:	4008      	ands	r0, r1
    a0f0:	f89d 2000 	ldrb.w	r2, [sp]
    a0f4:	6861      	ldr	r1, [r4, #4]
    a0f6:	4002      	ands	r2, r0
    a0f8:	2500      	movs	r5, #0
    a0fa:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    a0fe:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a102:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    a106:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    a10a:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    a10e:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    a112:	8808      	ldrh	r0, [r1, #0]
    a114:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    a118:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    a11c:	9a00      	ldr	r2, [sp, #0]
    a11e:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    a122:	9a01      	ldr	r2, [sp, #4]
    a124:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    a128:	2001      	movs	r0, #1
    a12a:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    a12e:	f7fc fb5d 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a132:	6860      	ldr	r0, [r4, #4]
    a134:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a138:	2000      	movs	r0, #0
    a13a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a13c:	2001      	movs	r0, #1
    a13e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a140:	2000011c 	.word	0x2000011c
    a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a148:	4c19      	ldr	r4, [pc, #100]	; (a1b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    a14a:	2600      	movs	r6, #0
    a14c:	2703      	movs	r7, #3
    a14e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    a152:	2501      	movs	r5, #1
    a154:	b1a0      	cbz	r0, a180 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    a156:	68e0      	ldr	r0, [r4, #12]
    a158:	78c0      	ldrb	r0, [r0, #3]
    a15a:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    a15e:	fa05 f000 	lsl.w	r0, r5, r0
    a162:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    a166:	b130      	cbz	r0, a176 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    a168:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    a16c:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    a170:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    a174:	e017      	b.n	a1a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    a176:	f240 5143 	movw	r1, #1347	; 0x543
    a17a:	2036      	movs	r0, #54	; 0x36
    a17c:	f7fa f9f6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a180:	2300      	movs	r3, #0
    a182:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    a186:	4619      	mov	r1, r3
    a188:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    a18c:	f004 f863 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a190:	b160      	cbz	r0, a1ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    a192:	68e0      	ldr	r0, [r4, #12]
    a194:	78c1      	ldrb	r1, [r0, #3]
    a196:	6860      	ldr	r0, [r4, #4]
    a198:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    a19c:	f800 7f86 	strb.w	r7, [r0, #134]!
    a1a0:	8686      	strh	r6, [r0, #52]	; 0x34
    a1a2:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    a1a6:	2000      	movs	r0, #0
    a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1ac:	2001      	movs	r0, #1
    a1ae:	e7fb      	b.n	a1a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    a1b0:	2000011c 	.word	0x2000011c
    a1b4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a1b8:	4c30      	ldr	r4, [pc, #192]	; (a27c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    a1ba:	2300      	movs	r3, #0
    a1bc:	4619      	mov	r1, r3
    a1be:	6860      	ldr	r0, [r4, #4]
    a1c0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a1c4:	3078      	adds	r0, #120	; 0x78
    a1c6:	f004 f846 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1ca:	b308      	cbz	r0, a210 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    a1cc:	68e0      	ldr	r0, [r4, #12]
    a1ce:	f004 fa70 	bl	e6b2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a1d2:	b300      	cbz	r0, a216 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    a1d4:	68e0      	ldr	r0, [r4, #12]
    a1d6:	f004 fa62 	bl	e69e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a1da:	4607      	mov	r7, r0
    a1dc:	68e0      	ldr	r0, [r4, #12]
    a1de:	f004 fa62 	bl	e6a6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a1e2:	4606      	mov	r6, r0
    a1e4:	68e0      	ldr	r0, [r4, #12]
    a1e6:	f004 fa58 	bl	e69a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a1ea:	4605      	mov	r5, r0
    a1ec:	68e0      	ldr	r0, [r4, #12]
    a1ee:	f004 fa58 	bl	e6a2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a1f2:	4601      	mov	r1, r0
    a1f4:	9700      	str	r7, [sp, #0]
    a1f6:	6860      	ldr	r0, [r4, #4]
    a1f8:	4633      	mov	r3, r6
    a1fa:	462a      	mov	r2, r5
    a1fc:	302c      	adds	r0, #44	; 0x2c
    a1fe:	f004 fcaf 	bl	eb60 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a202:	6861      	ldr	r1, [r4, #4]
    a204:	2501      	movs	r5, #1
    a206:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a20a:	281c      	cmp	r0, #28
    a20c:	d008      	beq.n	a220 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    a20e:	e009      	b.n	a224 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    a210:	2001      	movs	r0, #1
    a212:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a216:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a21a:	2000      	movs	r0, #0
    a21c:	f7ff bf92 	b.w	a144 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a220:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    a224:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    a228:	2801      	cmp	r0, #1
    a22a:	d011      	beq.n	a250 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    a22c:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    a230:	f88d 0004 	strb.w	r0, [sp, #4]
    a234:	9801      	ldr	r0, [sp, #4]
    a236:	9001      	str	r0, [sp, #4]
    a238:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a23c:	b940      	cbnz	r0, a250 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    a23e:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    a242:	f88d 0000 	strb.w	r0, [sp]
    a246:	9800      	ldr	r0, [sp, #0]
    a248:	9000      	str	r0, [sp, #0]
    a24a:	f89d 0000 	ldrb.w	r0, [sp]
    a24e:	b118      	cbz	r0, a258 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    a250:	201e      	movs	r0, #30
    a252:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a256:	e00a      	b.n	a26e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    a258:	201d      	movs	r0, #29
    a25a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a25e:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    a262:	f831 0b2c 	ldrh.w	r0, [r1], #44
    a266:	f004 fc82 	bl	eb6e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a26a:	f7fc fabf 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a26e:	6860      	ldr	r0, [r4, #4]
    a270:	2100      	movs	r1, #0
    a272:	f820 1fba 	strh.w	r1, [r0, #186]!
    a276:	7085      	strb	r5, [r0, #2]
    a278:	4608      	mov	r0, r1
    a27a:	e7ca      	b.n	a212 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    a27c:	2000011c 	.word	0x2000011c
    a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a282:	4c1a      	ldr	r4, [pc, #104]	; (a2ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    a284:	2300      	movs	r3, #0
    a286:	210a      	movs	r1, #10
    a288:	6860      	ldr	r0, [r4, #4]
    a28a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a28e:	3078      	adds	r0, #120	; 0x78
    a290:	f003 ffe1 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a294:	b338      	cbz	r0, a2e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    a296:	68e0      	ldr	r0, [r4, #12]
    a298:	f004 fa0b 	bl	e6b2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a29c:	b1c8      	cbz	r0, a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    a29e:	68e0      	ldr	r0, [r4, #12]
    a2a0:	f004 f9fd 	bl	e69e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a2a4:	4607      	mov	r7, r0
    a2a6:	68e0      	ldr	r0, [r4, #12]
    a2a8:	f004 f9fd 	bl	e6a6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a2ac:	4606      	mov	r6, r0
    a2ae:	68e0      	ldr	r0, [r4, #12]
    a2b0:	f004 f9f3 	bl	e69a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a2b4:	4605      	mov	r5, r0
    a2b6:	68e0      	ldr	r0, [r4, #12]
    a2b8:	f004 f9f3 	bl	e6a2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a2bc:	4601      	mov	r1, r0
    a2be:	9700      	str	r7, [sp, #0]
    a2c0:	6860      	ldr	r0, [r4, #4]
    a2c2:	4633      	mov	r3, r6
    a2c4:	462a      	mov	r2, r5
    a2c6:	302c      	adds	r0, #44	; 0x2c
    a2c8:	f004 fc4a 	bl	eb60 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a2cc:	6860      	ldr	r0, [r4, #4]
    a2ce:	f004 fbb9 	bl	ea44 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a2d2:	6861      	ldr	r1, [r4, #4]
    a2d4:	2000      	movs	r0, #0
    a2d6:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    a2da:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a2de:	f7ff fabf 	bl	9860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    a2e2:	2000      	movs	r0, #0
    a2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2e6:	2001      	movs	r0, #1
    a2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2ea:	0000      	.short	0x0000
    a2ec:	2000011c 	.word	0x2000011c
    a2f0:	b510      	push	{r4, lr}
    a2f2:	4c0b      	ldr	r4, [pc, #44]	; (a320 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    a2f4:	2300      	movs	r3, #0
    a2f6:	4619      	mov	r1, r3
    a2f8:	6860      	ldr	r0, [r4, #4]
    a2fa:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a2fe:	3078      	adds	r0, #120	; 0x78
    a300:	f003 ffa9 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a304:	b150      	cbz	r0, a31c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    a306:	6860      	ldr	r0, [r4, #4]
    a308:	2100      	movs	r1, #0
    a30a:	f820 1fba 	strh.w	r1, [r0, #186]!
    a30e:	2101      	movs	r1, #1
    a310:	7081      	strb	r1, [r0, #2]
    a312:	2102      	movs	r1, #2
    a314:	f800 1c34 	strb.w	r1, [r0, #-52]
    a318:	2000      	movs	r0, #0
    a31a:	bd10      	pop	{r4, pc}
    a31c:	2001      	movs	r0, #1
    a31e:	bd10      	pop	{r4, pc}
    a320:	2000011c 	.word	0x2000011c
    a324:	b510      	push	{r4, lr}
    a326:	4c09      	ldr	r4, [pc, #36]	; (a34c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    a328:	2300      	movs	r3, #0
    a32a:	2109      	movs	r1, #9
    a32c:	6860      	ldr	r0, [r4, #4]
    a32e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a332:	3078      	adds	r0, #120	; 0x78
    a334:	f003 ff8f 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a338:	2800      	cmp	r0, #0
    a33a:	d006      	beq.n	a34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    a33c:	6861      	ldr	r1, [r4, #4]
    a33e:	2000      	movs	r0, #0
    a340:	f801 0fac 	strb.w	r0, [r1, #172]!
    a344:	7308      	strb	r0, [r1, #12]
    a346:	f801 0c27 	strb.w	r0, [r1, #-39]
    a34a:	bd10      	pop	{r4, pc}
    a34c:	2000011c 	.word	0x2000011c
    a350:	4807      	ldr	r0, [pc, #28]	; (a370 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    a352:	6840      	ldr	r0, [r0, #4]
    a354:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a358:	290f      	cmp	r1, #15
    a35a:	d001      	beq.n	a360 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    a35c:	2002      	movs	r0, #2
    a35e:	4770      	bx	lr
    a360:	2100      	movs	r1, #0
    a362:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    a366:	2112      	movs	r1, #18
    a368:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a36c:	2000      	movs	r0, #0
    a36e:	4770      	bx	lr
    a370:	2000011c 	.word	0x2000011c
    a374:	b5f0      	push	{r4, r5, r6, r7, lr}
    a376:	4c42      	ldr	r4, [pc, #264]	; (a480 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    a378:	2600      	movs	r6, #0
    a37a:	b087      	sub	sp, #28
    a37c:	6860      	ldr	r0, [r4, #4]
    a37e:	4633      	mov	r3, r6
    a380:	4631      	mov	r1, r6
    a382:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a386:	3078      	adds	r0, #120	; 0x78
    a388:	f003 ff65 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a38c:	b180      	cbz	r0, a3b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    a38e:	6860      	ldr	r0, [r4, #4]
    a390:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a394:	2823      	cmp	r0, #35	; 0x23
    a396:	d00e      	beq.n	a3b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    a398:	2824      	cmp	r0, #36	; 0x24
    a39a:	d00c      	beq.n	a3b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    a39c:	4668      	mov	r0, sp
    a39e:	f7fa feeb 	bl	5178 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    a3a2:	b150      	cbz	r0, a3ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    a3a4:	9800      	ldr	r0, [sp, #0]
    a3a6:	a901      	add	r1, sp, #4
    a3a8:	78c0      	ldrb	r0, [r0, #3]
    a3aa:	f88d 0004 	strb.w	r0, [sp, #4]
    a3ae:	e005      	b.n	a3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    a3b0:	2001      	movs	r0, #1
    a3b2:	b007      	add	sp, #28
    a3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3b6:	2020      	movs	r0, #32
    a3b8:	e7fb      	b.n	a3b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    a3ba:	2100      	movs	r1, #0
    a3bc:	6860      	ldr	r0, [r4, #4]
    a3be:	ab04      	add	r3, sp, #16
    a3c0:	2216      	movs	r2, #22
    a3c2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a3c6:	f004 f802 	bl	e3ce <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    a3ca:	2700      	movs	r7, #0
    a3cc:	2501      	movs	r5, #1
    a3ce:	b178      	cbz	r0, a3f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    a3d0:	6860      	ldr	r0, [r4, #4]
    a3d2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    a3d6:	2216      	movs	r2, #22
    a3d8:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    a3dc:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    a3e0:	2119      	movs	r1, #25
    a3e2:	f800 1f86 	strb.w	r1, [r0, #134]!
    a3e6:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    a3ea:	8687      	strh	r7, [r0, #52]	; 0x34
    a3ec:	2000      	movs	r0, #0
    a3ee:	e7e0      	b.n	a3b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    a3f0:	68e0      	ldr	r0, [r4, #12]
    a3f2:	f004 f97a 	bl	e6ea <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a3f6:	b1a8      	cbz	r0, a424 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    a3f8:	68e1      	ldr	r1, [r4, #12]
    a3fa:	7908      	ldrb	r0, [r1, #4]
    a3fc:	f000 0207 	and.w	r2, r0, #7
    a400:	6860      	ldr	r0, [r4, #4]
    a402:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    a406:	7949      	ldrb	r1, [r1, #5]
    a408:	f001 0107 	and.w	r1, r1, #7
    a40c:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    a410:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    a414:	f88d 3018 	strb.w	r3, [sp, #24]
    a418:	9b06      	ldr	r3, [sp, #24]
    a41a:	9301      	str	r3, [sp, #4]
    a41c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a420:	bb23      	cbnz	r3, a46c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    a422:	e004      	b.n	a42e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    a424:	2000      	movs	r0, #0
    a426:	f7ff fe8d 	bl	a144 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a42a:	4606      	mov	r6, r0
    a42c:	e025      	b.n	a47a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    a42e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    a432:	2b01      	cmp	r3, #1
    a434:	d01a      	beq.n	a46c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    a436:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    a43a:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    a43e:	4594      	cmp	ip, r2
    a440:	d106      	bne.n	a450 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    a442:	781a      	ldrb	r2, [r3, #0]
    a444:	428a      	cmp	r2, r1
    a446:	d103      	bne.n	a450 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    a448:	2102      	movs	r1, #2
    a44a:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    a44e:	e00d      	b.n	a46c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    a450:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    a454:	8802      	ldrh	r2, [r0, #0]
    a456:	f821 2902 	strh.w	r2, [r1], #-2
    a45a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    a45e:	710a      	strb	r2, [r1, #4]
    a460:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    a464:	7148      	strb	r0, [r1, #5]
    a466:	700d      	strb	r5, [r1, #0]
    a468:	f7fc f9c0 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a46c:	6860      	ldr	r0, [r4, #4]
    a46e:	2121      	movs	r1, #33	; 0x21
    a470:	f800 1f86 	strb.w	r1, [r0, #134]!
    a474:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    a478:	8687      	strh	r7, [r0, #52]	; 0x34
    a47a:	4630      	mov	r0, r6
    a47c:	e799      	b.n	a3b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    a47e:	0000      	.short	0x0000
    a480:	2000011c 	.word	0x2000011c
    a484:	b570      	push	{r4, r5, r6, lr}
    a486:	4c18      	ldr	r4, [pc, #96]	; (a4e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    a488:	6860      	ldr	r0, [r4, #4]
    a48a:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a48e:	281f      	cmp	r0, #31
    a490:	d001      	beq.n	a496 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    a492:	2001      	movs	r0, #1
    a494:	bd70      	pop	{r4, r5, r6, pc}
    a496:	68e0      	ldr	r0, [r4, #12]
    a498:	f004 f931 	bl	e6fe <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    a49c:	b1d8      	cbz	r0, a4d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    a49e:	68e0      	ldr	r0, [r4, #12]
    a4a0:	2201      	movs	r2, #1
    a4a2:	7901      	ldrb	r1, [r0, #4]
    a4a4:	7940      	ldrb	r0, [r0, #5]
    a4a6:	f001 0107 	and.w	r1, r1, #7
    a4aa:	f361 0507 	bfi	r5, r1, #0, #8
    a4ae:	4629      	mov	r1, r5
    a4b0:	f000 0007 	and.w	r0, r0, #7
    a4b4:	f360 210f 	bfi	r1, r0, #8, #8
    a4b8:	6860      	ldr	r0, [r4, #4]
    a4ba:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    a4be:	2200      	movs	r2, #0
    a4c0:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    a4c4:	2223      	movs	r2, #35	; 0x23
    a4c6:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    a4ca:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    a4ce:	f7ff fdb9 	bl	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    a4d2:	2000      	movs	r0, #0
    a4d4:	bd70      	pop	{r4, r5, r6, pc}
    a4d6:	2001      	movs	r0, #1
    a4d8:	f7ff fe34 	bl	a144 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a4dc:	4604      	mov	r4, r0
    a4de:	201e      	movs	r0, #30
    a4e0:	f7ff fd6a 	bl	9fb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a4e4:	4620      	mov	r0, r4
    a4e6:	bd70      	pop	{r4, r5, r6, pc}
    a4e8:	2000011c 	.word	0x2000011c
    a4ec:	b570      	push	{r4, r5, r6, lr}
    a4ee:	4d07      	ldr	r5, [pc, #28]	; (a50c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    a4f0:	2400      	movs	r4, #0
    a4f2:	68e8      	ldr	r0, [r5, #12]
    a4f4:	f004 f90d 	bl	e712 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a4f8:	2803      	cmp	r0, #3
    a4fa:	d105      	bne.n	a508 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    a4fc:	68e8      	ldr	r0, [r5, #12]
    a4fe:	f004 f90a 	bl	e716 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a502:	f000 f805 	bl	a510 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    a506:	4604      	mov	r4, r0
    a508:	4620      	mov	r0, r4
    a50a:	bd70      	pop	{r4, r5, r6, pc}
    a50c:	2000011c 	.word	0x2000011c
    a510:	b570      	push	{r4, r5, r6, lr}
    a512:	4d18      	ldr	r5, [pc, #96]	; (a574 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    a514:	6869      	ldr	r1, [r5, #4]
    a516:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    a51a:	2a16      	cmp	r2, #22
    a51c:	d001      	beq.n	a522 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    a51e:	2a13      	cmp	r2, #19
    a520:	d102      	bne.n	a528 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    a522:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    a526:	b10a      	cbz	r2, a52c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    a528:	2002      	movs	r0, #2
    a52a:	bd70      	pop	{r4, r5, r6, pc}
    a52c:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    a530:	2400      	movs	r4, #0
    a532:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    a536:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    a53a:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    a53e:	b122      	cbz	r2, a54a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    a540:	f240 21eb 	movw	r1, #747	; 0x2eb
    a544:	2036      	movs	r0, #54	; 0x36
    a546:	f7fa f811 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a54a:	880a      	ldrh	r2, [r1, #0]
    a54c:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    a550:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    a554:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    a558:	200d      	movs	r0, #13
    a55a:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    a55e:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    a562:	f000 fb9b 	bl	ac9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    a566:	f7fc f941 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a56a:	6868      	ldr	r0, [r5, #4]
    a56c:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    a570:	2000      	movs	r0, #0
    a572:	bd70      	pop	{r4, r5, r6, pc}
    a574:	2000011c 	.word	0x2000011c
    a578:	4802      	ldr	r0, [pc, #8]	; (a584 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    a57a:	68c0      	ldr	r0, [r0, #12]
    a57c:	7900      	ldrb	r0, [r0, #4]
    a57e:	f7ff bfc7 	b.w	a510 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    a582:	0000      	.short	0x0000
    a584:	2000011c 	.word	0x2000011c
    a588:	b510      	push	{r4, lr}
    a58a:	4c0e      	ldr	r4, [pc, #56]	; (a5c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    a58c:	6860      	ldr	r0, [r4, #4]
    a58e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a592:	2916      	cmp	r1, #22
    a594:	d001      	beq.n	a59a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    a596:	2002      	movs	r0, #2
    a598:	bd10      	pop	{r4, pc}
    a59a:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    a59e:	f200 1175 	addw	r1, r0, #373	; 0x175
    a5a2:	2200      	movs	r2, #0
    a5a4:	f200 1065 	addw	r0, r0, #357	; 0x165
    a5a8:	f003 fdbf 	bl	e12a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a5ac:	6860      	ldr	r0, [r4, #4]
    a5ae:	2100      	movs	r1, #0
    a5b0:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    a5b4:	2101      	movs	r1, #1
    a5b6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    a5ba:	2118      	movs	r1, #24
    a5bc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a5c0:	2000      	movs	r0, #0
    a5c2:	bd10      	pop	{r4, pc}
    a5c4:	2000011c 	.word	0x2000011c
    a5c8:	b570      	push	{r4, r5, r6, lr}
    a5ca:	4d1b      	ldr	r5, [pc, #108]	; (a638 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    a5cc:	6868      	ldr	r0, [r5, #4]
    a5ce:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a5d2:	291a      	cmp	r1, #26
    a5d4:	d001      	beq.n	a5da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    a5d6:	2002      	movs	r0, #2
    a5d8:	bd70      	pop	{r4, r5, r6, pc}
    a5da:	2400      	movs	r4, #0
    a5dc:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    a5e0:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    a5e4:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    a5e8:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    a5ec:	b121      	cbz	r1, a5f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    a5ee:	f240 3113 	movw	r1, #787	; 0x313
    a5f2:	2036      	movs	r0, #54	; 0x36
    a5f4:	f7f9 ffba 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5f8:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    a5fc:	b141      	cbz	r1, a610 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    a5fe:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    a602:	8801      	ldrh	r1, [r0, #0]
    a604:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    a608:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    a60c:	210e      	movs	r1, #14
    a60e:	e008      	b.n	a622 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    a610:	8801      	ldrh	r1, [r0, #0]
    a612:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    a616:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    a61a:	2101      	movs	r1, #1
    a61c:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    a620:	210d      	movs	r1, #13
    a622:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    a626:	f000 fb39 	bl	ac9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    a62a:	f7fc f8df 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a62e:	6868      	ldr	r0, [r5, #4]
    a630:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    a634:	2000      	movs	r0, #0
    a636:	bd70      	pop	{r4, r5, r6, pc}
    a638:	2000011c 	.word	0x2000011c
    a63c:	b510      	push	{r4, lr}
    a63e:	4c0d      	ldr	r4, [pc, #52]	; (a674 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    a640:	2300      	movs	r3, #0
    a642:	2101      	movs	r1, #1
    a644:	6860      	ldr	r0, [r4, #4]
    a646:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a64a:	3078      	adds	r0, #120	; 0x78
    a64c:	f003 fe03 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a650:	b108      	cbz	r0, a656 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    a652:	2000      	movs	r0, #0
    a654:	bd10      	pop	{r4, pc}
    a656:	68e0      	ldr	r0, [r4, #12]
    a658:	f004 f827 	bl	e6aa <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a65c:	6861      	ldr	r1, [r4, #4]
    a65e:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    a662:	2007      	movs	r0, #7
    a664:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a668:	2000      	movs	r0, #0
    a66a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a66e:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    a672:	e7ee      	b.n	a652 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    a674:	2000011c 	.word	0x2000011c
    a678:	b570      	push	{r4, r5, r6, lr}
    a67a:	4c25      	ldr	r4, [pc, #148]	; (a710 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    a67c:	2600      	movs	r6, #0
    a67e:	2109      	movs	r1, #9
    a680:	6860      	ldr	r0, [r4, #4]
    a682:	4633      	mov	r3, r6
    a684:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a688:	3078      	adds	r0, #120	; 0x78
    a68a:	f003 fde4 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a68e:	2500      	movs	r5, #0
    a690:	b118      	cbz	r0, a69a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    a692:	68e0      	ldr	r0, [r4, #12]
    a694:	7900      	ldrb	r0, [r0, #4]
    a696:	2812      	cmp	r0, #18
    a698:	d011      	beq.n	a6be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    a69a:	6860      	ldr	r0, [r4, #4]
    a69c:	210a      	movs	r1, #10
    a69e:	2300      	movs	r3, #0
    a6a0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a6a4:	3078      	adds	r0, #120	; 0x78
    a6a6:	f003 fdd6 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6aa:	b118      	cbz	r0, a6b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    a6ac:	68e0      	ldr	r0, [r4, #12]
    a6ae:	7900      	ldrb	r0, [r0, #4]
    a6b0:	2814      	cmp	r0, #20
    a6b2:	d008      	beq.n	a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    a6b4:	68e0      	ldr	r0, [r4, #12]
    a6b6:	7900      	ldrb	r0, [r0, #4]
    a6b8:	2816      	cmp	r0, #22
    a6ba:	d012      	beq.n	a6e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    a6bc:	e026      	b.n	a70c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a6be:	f7ff fe31 	bl	a324 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    a6c2:	4606      	mov	r6, r0
    a6c4:	e022      	b.n	a70c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a6c6:	6860      	ldr	r0, [r4, #4]
    a6c8:	2105      	movs	r1, #5
    a6ca:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a6ce:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    a6d2:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a6d6:	30c6      	adds	r0, #198	; 0xc6
    a6d8:	f004 fcde 	bl	f098 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a6dc:	f7ff f8c0 	bl	9860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    a6e0:	e014      	b.n	a70c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a6e2:	6860      	ldr	r0, [r4, #4]
    a6e4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a6e8:	291f      	cmp	r1, #31
    a6ea:	d10f      	bne.n	a70c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a6ec:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a6f0:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a6f4:	2108      	movs	r1, #8
    a6f6:	30c6      	adds	r0, #198	; 0xc6
    a6f8:	f004 fcce 	bl	f098 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a6fc:	6860      	ldr	r0, [r4, #4]
    a6fe:	210b      	movs	r1, #11
    a700:	30c6      	adds	r0, #198	; 0xc6
    a702:	f004 fcc9 	bl	f098 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a706:	201a      	movs	r0, #26
    a708:	f7ff fc56 	bl	9fb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a70c:	4630      	mov	r0, r6
    a70e:	bd70      	pop	{r4, r5, r6, pc}
    a710:	2000011c 	.word	0x2000011c
    a714:	b570      	push	{r4, r5, r6, lr}
    a716:	4c32      	ldr	r4, [pc, #200]	; (a7e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    a718:	2300      	movs	r3, #0
    a71a:	4619      	mov	r1, r3
    a71c:	6860      	ldr	r0, [r4, #4]
    a71e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a722:	3078      	adds	r0, #120	; 0x78
    a724:	f003 fd97 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a728:	b940      	cbnz	r0, a73c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    a72a:	6860      	ldr	r0, [r4, #4]
    a72c:	2300      	movs	r3, #0
    a72e:	2108      	movs	r1, #8
    a730:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a734:	3078      	adds	r0, #120	; 0x78
    a736:	f003 fd8e 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a73a:	b1f8      	cbz	r0, a77c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    a73c:	6860      	ldr	r0, [r4, #4]
    a73e:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    a742:	0780      	lsls	r0, r0, #30
    a744:	d412      	bmi.n	a76c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    a746:	68e0      	ldr	r0, [r4, #12]
    a748:	f003 ffb1 	bl	e6ae <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a74c:	6861      	ldr	r1, [r4, #4]
    a74e:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    a752:	68e0      	ldr	r0, [r4, #12]
    a754:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a758:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    a75c:	8840      	ldrh	r0, [r0, #2]
    a75e:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    a762:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    a766:	f040 0002 	orr.w	r0, r0, #2
    a76a:	7008      	strb	r0, [r1, #0]
    a76c:	6860      	ldr	r0, [r4, #4]
    a76e:	f04f 0500 	mov.w	r5, #0
    a772:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a776:	07c9      	lsls	r1, r1, #31
    a778:	d002      	beq.n	a780 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    a77a:	e010      	b.n	a79e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    a77c:	2001      	movs	r0, #1
    a77e:	bd70      	pop	{r4, r5, r6, pc}
    a780:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a784:	2300      	movs	r3, #0
    a786:	4619      	mov	r1, r3
    a788:	3078      	adds	r0, #120	; 0x78
    a78a:	f003 fd64 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a78e:	b160      	cbz	r0, a7aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    a790:	6860      	ldr	r0, [r4, #4]
    a792:	2101      	movs	r1, #1
    a794:	f800 1f86 	strb.w	r1, [r0, #134]!
    a798:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    a79c:	8685      	strh	r5, [r0, #52]	; 0x34
    a79e:	6860      	ldr	r0, [r4, #4]
    a7a0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a7a4:	2901      	cmp	r1, #1
    a7a6:	d005      	beq.n	a7b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    a7a8:	e00a      	b.n	a7c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    a7aa:	f240 314e 	movw	r1, #846	; 0x34e
    a7ae:	2036      	movs	r0, #54	; 0x36
    a7b0:	f7f9 fedc 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7b4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a7b8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a7bc:	f7fc f816 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a7c0:	6860      	ldr	r0, [r4, #4]
    a7c2:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    a7c6:	b149      	cbz	r1, a7dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    a7c8:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    a7cc:	f7fc f80e 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a7d0:	6860      	ldr	r0, [r4, #4]
    a7d2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a7d6:	b909      	cbnz	r1, a7dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    a7d8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a7dc:	2000      	movs	r0, #0
    a7de:	bd70      	pop	{r4, r5, r6, pc}
    a7e0:	2000011c 	.word	0x2000011c
    a7e4:	b510      	push	{r4, lr}
    a7e6:	4c0a      	ldr	r4, [pc, #40]	; (a810 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    a7e8:	2300      	movs	r3, #0
    a7ea:	4619      	mov	r1, r3
    a7ec:	6860      	ldr	r0, [r4, #4]
    a7ee:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7f2:	3078      	adds	r0, #120	; 0x78
    a7f4:	f003 fd2f 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7f8:	b120      	cbz	r0, a804 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    a7fa:	6861      	ldr	r1, [r4, #4]
    a7fc:	200c      	movs	r0, #12
    a7fe:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a802:	bd10      	pop	{r4, pc}
    a804:	f240 51fa 	movw	r1, #1530	; 0x5fa
    a808:	2036      	movs	r0, #54	; 0x36
    a80a:	f7f9 feaf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a80e:	0000      	.short	0x0000
    a810:	2000011c 	.word	0x2000011c
    a814:	b510      	push	{r4, lr}
    a816:	4c0a      	ldr	r4, [pc, #40]	; (a840 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    a818:	2300      	movs	r3, #0
    a81a:	4619      	mov	r1, r3
    a81c:	6860      	ldr	r0, [r4, #4]
    a81e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a822:	3078      	adds	r0, #120	; 0x78
    a824:	f003 fd17 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a828:	b120      	cbz	r0, a834 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    a82a:	6861      	ldr	r1, [r4, #4]
    a82c:	200d      	movs	r0, #13
    a82e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a832:	bd10      	pop	{r4, pc}
    a834:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    a838:	2036      	movs	r0, #54	; 0x36
    a83a:	f7f9 fe97 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a83e:	0000      	.short	0x0000
    a840:	2000011c 	.word	0x2000011c
    a844:	b510      	push	{r4, lr}
    a846:	4c0d      	ldr	r4, [pc, #52]	; (a87c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    a848:	2300      	movs	r3, #0
    a84a:	4619      	mov	r1, r3
    a84c:	6860      	ldr	r0, [r4, #4]
    a84e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a852:	3078      	adds	r0, #120	; 0x78
    a854:	f003 fcff 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a858:	b918      	cbnz	r0, a862 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    a85a:	6860      	ldr	r0, [r4, #4]
    a85c:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a860:	b138      	cbz	r0, a872 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    a862:	6860      	ldr	r0, [r4, #4]
    a864:	2101      	movs	r1, #1
    a866:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a86a:	2113      	movs	r1, #19
    a86c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a870:	bd10      	pop	{r4, pc}
    a872:	f240 6115 	movw	r1, #1557	; 0x615
    a876:	2036      	movs	r0, #54	; 0x36
    a878:	f7f9 fe78 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a87c:	2000011c 	.word	0x2000011c
    a880:	b510      	push	{r4, lr}
    a882:	4c0a      	ldr	r4, [pc, #40]	; (a8ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    a884:	2300      	movs	r3, #0
    a886:	4619      	mov	r1, r3
    a888:	6860      	ldr	r0, [r4, #4]
    a88a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a88e:	3078      	adds	r0, #120	; 0x78
    a890:	f003 fce1 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a894:	b120      	cbz	r0, a8a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    a896:	6861      	ldr	r1, [r4, #4]
    a898:	2004      	movs	r0, #4
    a89a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a89e:	bd10      	pop	{r4, pc}
    a8a0:	f240 51f4 	movw	r1, #1524	; 0x5f4
    a8a4:	2036      	movs	r0, #54	; 0x36
    a8a6:	f7f9 fe61 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8aa:	0000      	.short	0x0000
    a8ac:	2000011c 	.word	0x2000011c
    a8b0:	b510      	push	{r4, lr}
    a8b2:	4c0a      	ldr	r4, [pc, #40]	; (a8dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    a8b4:	2300      	movs	r3, #0
    a8b6:	4619      	mov	r1, r3
    a8b8:	6860      	ldr	r0, [r4, #4]
    a8ba:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a8be:	3078      	adds	r0, #120	; 0x78
    a8c0:	f003 fcc9 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8c4:	b120      	cbz	r0, a8d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    a8c6:	6861      	ldr	r1, [r4, #4]
    a8c8:	201c      	movs	r0, #28
    a8ca:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a8ce:	bd10      	pop	{r4, pc}
    a8d0:	f240 614c 	movw	r1, #1612	; 0x64c
    a8d4:	2036      	movs	r0, #54	; 0x36
    a8d6:	f7f9 fe49 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8da:	0000      	.short	0x0000
    a8dc:	2000011c 	.word	0x2000011c
    a8e0:	b510      	push	{r4, lr}
    a8e2:	4c0a      	ldr	r4, [pc, #40]	; (a90c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    a8e4:	2300      	movs	r3, #0
    a8e6:	4619      	mov	r1, r3
    a8e8:	6860      	ldr	r0, [r4, #4]
    a8ea:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a8ee:	3078      	adds	r0, #120	; 0x78
    a8f0:	f003 fcb1 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8f4:	b120      	cbz	r0, a900 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    a8f6:	6861      	ldr	r1, [r4, #4]
    a8f8:	2000      	movs	r0, #0
    a8fa:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a8fe:	bd10      	pop	{r4, pc}
    a900:	f240 6153 	movw	r1, #1619	; 0x653
    a904:	2036      	movs	r0, #54	; 0x36
    a906:	f7f9 fe31 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a90a:	0000      	.short	0x0000
    a90c:	2000011c 	.word	0x2000011c
    a910:	b510      	push	{r4, lr}
    a912:	4c0a      	ldr	r4, [pc, #40]	; (a93c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    a914:	2300      	movs	r3, #0
    a916:	4619      	mov	r1, r3
    a918:	6860      	ldr	r0, [r4, #4]
    a91a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a91e:	3078      	adds	r0, #120	; 0x78
    a920:	f003 fc99 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a924:	b120      	cbz	r0, a930 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    a926:	6861      	ldr	r1, [r4, #4]
    a928:	2005      	movs	r0, #5
    a92a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a92e:	bd10      	pop	{r4, pc}
    a930:	f240 613f 	movw	r1, #1599	; 0x63f
    a934:	2036      	movs	r0, #54	; 0x36
    a936:	f7f9 fe19 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a93a:	0000      	.short	0x0000
    a93c:	2000011c 	.word	0x2000011c
    a940:	4902      	ldr	r1, [pc, #8]	; (a94c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    a942:	2000      	movs	r0, #0
    a944:	6849      	ldr	r1, [r1, #4]
    a946:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a94a:	4770      	bx	lr
    a94c:	2000011c 	.word	0x2000011c
    a950:	b510      	push	{r4, lr}
    a952:	4c0b      	ldr	r4, [pc, #44]	; (a980 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    a954:	2300      	movs	r3, #0
    a956:	4619      	mov	r1, r3
    a958:	6860      	ldr	r0, [r4, #4]
    a95a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a95e:	3078      	adds	r0, #120	; 0x78
    a960:	f003 fc79 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a964:	b138      	cbz	r0, a976 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    a966:	6860      	ldr	r0, [r4, #4]
    a968:	2101      	movs	r1, #1
    a96a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a96e:	210f      	movs	r1, #15
    a970:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a974:	bd10      	pop	{r4, pc}
    a976:	f240 6106 	movw	r1, #1542	; 0x606
    a97a:	2036      	movs	r0, #54	; 0x36
    a97c:	f7f9 fdf6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a980:	2000011c 	.word	0x2000011c
    a984:	4809      	ldr	r0, [pc, #36]	; (a9ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    a986:	b510      	push	{r4, lr}
    a988:	6840      	ldr	r0, [r0, #4]
    a98a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a98e:	2912      	cmp	r1, #18
    a990:	d004      	beq.n	a99c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    a992:	f240 610e 	movw	r1, #1550	; 0x60e
    a996:	2036      	movs	r0, #54	; 0x36
    a998:	f7f9 fde8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a99c:	2101      	movs	r1, #1
    a99e:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a9a2:	2111      	movs	r1, #17
    a9a4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a9a8:	bd10      	pop	{r4, pc}
    a9aa:	0000      	.short	0x0000
    a9ac:	2000011c 	.word	0x2000011c
    a9b0:	b510      	push	{r4, lr}
    a9b2:	4c0a      	ldr	r4, [pc, #40]	; (a9dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    a9b4:	2300      	movs	r3, #0
    a9b6:	4619      	mov	r1, r3
    a9b8:	6860      	ldr	r0, [r4, #4]
    a9ba:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a9be:	3078      	adds	r0, #120	; 0x78
    a9c0:	f003 fc49 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9c4:	b120      	cbz	r0, a9d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    a9c6:	6861      	ldr	r1, [r4, #4]
    a9c8:	201f      	movs	r0, #31
    a9ca:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a9ce:	bd10      	pop	{r4, pc}
    a9d0:	f240 615c 	movw	r1, #1628	; 0x65c
    a9d4:	2036      	movs	r0, #54	; 0x36
    a9d6:	f7f9 fdc9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9da:	0000      	.short	0x0000
    a9dc:	2000011c 	.word	0x2000011c
    a9e0:	b570      	push	{r4, r5, r6, lr}
    a9e2:	4c1d      	ldr	r4, [pc, #116]	; (aa58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    a9e4:	6860      	ldr	r0, [r4, #4]
    a9e6:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a9ea:	b911      	cbnz	r1, a9f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    a9ec:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a9f0:	b179      	cbz	r1, aa12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    a9f2:	2100      	movs	r1, #0
    a9f4:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a9f8:	2224      	movs	r2, #36	; 0x24
    a9fa:	2500      	movs	r5, #0
    a9fc:	2b21      	cmp	r3, #33	; 0x21
    a9fe:	d00a      	beq.n	aa16 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    aa00:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    aa04:	2b23      	cmp	r3, #35	; 0x23
    aa06:	d01a      	beq.n	aa3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    aa08:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    aa0c:	2036      	movs	r0, #54	; 0x36
    aa0e:	f7f9 fdad 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa12:	2101      	movs	r1, #1
    aa14:	e7ee      	b.n	a9f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    aa16:	b161      	cbz	r1, aa32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    aa18:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    aa1c:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    aa20:	2801      	cmp	r0, #1
    aa22:	d102      	bne.n	aa2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    aa24:	2000      	movs	r0, #0
    aa26:	f7ff fac7 	bl	9fb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    aa2a:	6860      	ldr	r0, [r4, #4]
    aa2c:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    aa30:	e001      	b.n	aa36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    aa32:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    aa36:	6860      	ldr	r0, [r4, #4]
    aa38:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    aa3c:	bd70      	pop	{r4, r5, r6, pc}
    aa3e:	b129      	cbz	r1, aa4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    aa40:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    aa44:	2000      	movs	r0, #0
    aa46:	f7ff fab7 	bl	9fb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    aa4a:	e001      	b.n	aa50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    aa4c:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    aa50:	6860      	ldr	r0, [r4, #4]
    aa52:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    aa56:	bd70      	pop	{r4, r5, r6, pc}
    aa58:	2000011c 	.word	0x2000011c
    aa5c:	4903      	ldr	r1, [pc, #12]	; (aa6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    aa5e:	2000      	movs	r0, #0
    aa60:	6849      	ldr	r1, [r1, #4]
    aa62:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    aa66:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    aa6a:	4770      	bx	lr
    aa6c:	2000011c 	.word	0x2000011c
    aa70:	4807      	ldr	r0, [pc, #28]	; (aa90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    aa72:	b510      	push	{r4, lr}
    aa74:	6840      	ldr	r0, [r0, #4]
    aa76:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aa7a:	2918      	cmp	r1, #24
    aa7c:	d004      	beq.n	aa88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    aa7e:	f240 611e 	movw	r1, #1566	; 0x61e
    aa82:	2036      	movs	r0, #54	; 0x36
    aa84:	f7f9 fd72 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa88:	211a      	movs	r1, #26
    aa8a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    aa8e:	bd10      	pop	{r4, pc}
    aa90:	2000011c 	.word	0x2000011c
    aa94:	b510      	push	{r4, lr}
    aa96:	4c0a      	ldr	r4, [pc, #40]	; (aac0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    aa98:	2300      	movs	r3, #0
    aa9a:	2101      	movs	r1, #1
    aa9c:	6860      	ldr	r0, [r4, #4]
    aa9e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    aaa2:	3078      	adds	r0, #120	; 0x78
    aaa4:	f003 fbd7 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aaa8:	2800      	cmp	r0, #0
    aaaa:	d108      	bne.n	aabe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    aaac:	6860      	ldr	r0, [r4, #4]
    aaae:	2108      	movs	r1, #8
    aab0:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    aab4:	2100      	movs	r1, #0
    aab6:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    aaba:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    aabe:	bd10      	pop	{r4, pc}
    aac0:	2000011c 	.word	0x2000011c
    aac4:	b570      	push	{r4, r5, r6, lr}
    aac6:	4c0e      	ldr	r4, [pc, #56]	; (ab00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    aac8:	2300      	movs	r3, #0
    aaca:	4619      	mov	r1, r3
    aacc:	6860      	ldr	r0, [r4, #4]
    aace:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aad2:	3078      	adds	r0, #120	; 0x78
    aad4:	f003 fbbf 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aad8:	2500      	movs	r5, #0
    aada:	b110      	cbz	r0, aae2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    aadc:	6860      	ldr	r0, [r4, #4]
    aade:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    aae2:	6860      	ldr	r0, [r4, #4]
    aae4:	2300      	movs	r3, #0
    aae6:	4619      	mov	r1, r3
    aae8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aaec:	3078      	adds	r0, #120	; 0x78
    aaee:	f003 fbb2 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aaf2:	2800      	cmp	r0, #0
    aaf4:	d002      	beq.n	aafc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    aaf6:	6860      	ldr	r0, [r4, #4]
    aaf8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    aafc:	bd70      	pop	{r4, r5, r6, pc}
    aafe:	0000      	.short	0x0000
    ab00:	2000011c 	.word	0x2000011c
    ab04:	b570      	push	{r4, r5, r6, lr}
    ab06:	4d16      	ldr	r5, [pc, #88]	; (ab60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    ab08:	f04f 0400 	mov.w	r4, #0
    ab0c:	6868      	ldr	r0, [r5, #4]
    ab0e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    ab12:	0789      	lsls	r1, r1, #30
    ab14:	d411      	bmi.n	ab3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    ab16:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab1a:	2300      	movs	r3, #0
    ab1c:	4619      	mov	r1, r3
    ab1e:	3078      	adds	r0, #120	; 0x78
    ab20:	f003 fb99 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab24:	b120      	cbz	r0, ab30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    ab26:	6869      	ldr	r1, [r5, #4]
    ab28:	2001      	movs	r0, #1
    ab2a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ab2e:	e008      	b.n	ab42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    ab30:	f240 612b 	movw	r1, #1579	; 0x62b
    ab34:	2036      	movs	r0, #54	; 0x36
    ab36:	f7f9 fd19 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab3a:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    ab3e:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    ab42:	6868      	ldr	r0, [r5, #4]
    ab44:	2300      	movs	r3, #0
    ab46:	4619      	mov	r1, r3
    ab48:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    ab4c:	3078      	adds	r0, #120	; 0x78
    ab4e:	f003 fb82 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab52:	2800      	cmp	r0, #0
    ab54:	d002      	beq.n	ab5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    ab56:	6868      	ldr	r0, [r5, #4]
    ab58:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    ab5c:	bd70      	pop	{r4, r5, r6, pc}
    ab5e:	0000      	.short	0x0000
    ab60:	2000011c 	.word	0x2000011c
    ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab66:	4d4c      	ldr	r5, [pc, #304]	; (ac98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    ab68:	4607      	mov	r7, r0
    ab6a:	460e      	mov	r6, r1
    ab6c:	6868      	ldr	r0, [r5, #4]
    ab6e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    ab72:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    ab76:	f88d 0000 	strb.w	r0, [sp]
    ab7a:	9800      	ldr	r0, [sp, #0]
    ab7c:	9000      	str	r0, [sp, #0]
    ab7e:	f89d 0000 	ldrb.w	r0, [sp]
    ab82:	b930      	cbnz	r0, ab92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    ab84:	7c22      	ldrb	r2, [r4, #16]
    ab86:	2300      	movs	r3, #0
    ab88:	2101      	movs	r1, #1
    ab8a:	4620      	mov	r0, r4
    ab8c:	f003 fb63 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab90:	b110      	cbz	r0, ab98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    ab92:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    ab94:	1c40      	adds	r0, r0, #1
    ab96:	8760      	strh	r0, [r4, #58]	; 0x3a
    ab98:	2001      	movs	r0, #1
    ab9a:	213d      	movs	r1, #61	; 0x3d
    ab9c:	bbf7      	cbnz	r7, ac1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    ab9e:	782a      	ldrb	r2, [r5, #0]
    aba0:	2a02      	cmp	r2, #2
    aba2:	d006      	beq.n	abb2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    aba4:	2a01      	cmp	r2, #1
    aba6:	d006      	beq.n	abb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    aba8:	b1c6      	cbz	r6, abdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    abaa:	06f2      	lsls	r2, r6, #27
    abac:	d507      	bpl.n	abbe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    abae:	211e      	movs	r1, #30
    abb0:	e043      	b.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    abb2:	2116      	movs	r1, #22
    abb4:	e041      	b.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    abb6:	6869      	ldr	r1, [r5, #4]
    abb8:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    abbc:	e03d      	b.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    abbe:	0732      	lsls	r2, r6, #28
    abc0:	d43b      	bmi.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    abc2:	07b1      	lsls	r1, r6, #30
    abc4:	d001      	beq.n	abca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    abc6:	212a      	movs	r1, #42	; 0x2a
    abc8:	e037      	b.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    abca:	06b1      	lsls	r1, r6, #26
    abcc:	d404      	bmi.n	abd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    abce:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    abd2:	2036      	movs	r0, #54	; 0x36
    abd4:	f7f9 fcca 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abd8:	2123      	movs	r1, #35	; 0x23
    abda:	e02e      	b.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    abdc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    abe0:	b129      	cbz	r1, abee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    abe2:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    abe4:	1c4a      	adds	r2, r1, #1
    abe6:	87a2      	strh	r2, [r4, #60]	; 0x3c
    abe8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    abea:	4291      	cmp	r1, r2
    abec:	d21d      	bcs.n	ac2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    abee:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    abf2:	b139      	cbz	r1, ac04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    abf4:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    abf8:	1c4a      	adds	r2, r1, #1
    abfa:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    abfe:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    ac00:	4291      	cmp	r1, r2
    ac02:	d212      	bcs.n	ac2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    ac04:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    ac06:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    ac08:	428a      	cmp	r2, r1
    ac0a:	d30b      	bcc.n	ac24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    ac0c:	686b      	ldr	r3, [r5, #4]
    ac0e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    ac12:	f88d 3000 	strb.w	r3, [sp]
    ac16:	9b00      	ldr	r3, [sp, #0]
    ac18:	9300      	str	r3, [sp, #0]
    ac1a:	e000      	b.n	ac1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    ac1c:	e00d      	b.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    ac1e:	f89d 3000 	ldrb.w	r3, [sp]
    ac22:	b913      	cbnz	r3, ac2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    ac24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    ac26:	429a      	cmp	r2, r3
    ac28:	d301      	bcc.n	ac2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    ac2a:	2122      	movs	r1, #34	; 0x22
    ac2c:	e005      	b.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    ac2e:	7c62      	ldrb	r2, [r4, #17]
    ac30:	b1f2      	cbz	r2, ac70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    ac32:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    ac34:	428a      	cmp	r2, r1
    ac36:	d304      	bcc.n	ac42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    ac38:	2108      	movs	r1, #8
    ac3a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    ac3e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    ac42:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    ac46:	f88d 0000 	strb.w	r0, [sp]
    ac4a:	9800      	ldr	r0, [sp, #0]
    ac4c:	9000      	str	r0, [sp, #0]
    ac4e:	f89d 0000 	ldrb.w	r0, [sp]
    ac52:	b1d8      	cbz	r0, ac8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    ac54:	2000      	movs	r0, #0
    ac56:	7360      	strb	r0, [r4, #13]
    ac58:	73a0      	strb	r0, [r4, #14]
    ac5a:	7460      	strb	r0, [r4, #17]
    ac5c:	2102      	movs	r1, #2
    ac5e:	6868      	ldr	r0, [r5, #4]
    ac60:	f7fd fa66 	bl	8130 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    ac64:	6868      	ldr	r0, [r5, #4]
    ac66:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    ac6a:	2901      	cmp	r1, #1
    ac6c:	d005      	beq.n	ac7a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    ac6e:	e009      	b.n	ac84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    ac70:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    ac72:	2906      	cmp	r1, #6
    ac74:	d3e5      	bcc.n	ac42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    ac76:	213e      	movs	r1, #62	; 0x3e
    ac78:	e7df      	b.n	ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    ac7a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    ac7e:	7801      	ldrb	r1, [r0, #0]
    ac80:	1e49      	subs	r1, r1, #1
    ac82:	7001      	strb	r1, [r0, #0]
    ac84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ac88:	f7fb bdb0 	b.w	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ac8c:	6868      	ldr	r0, [r5, #4]
    ac8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ac92:	2100      	movs	r1, #0
    ac94:	f7fd ba4c 	b.w	8130 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    ac98:	2000011c 	.word	0x2000011c
    ac9c:	4804      	ldr	r0, [pc, #16]	; (acb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    ac9e:	b510      	push	{r4, lr}
    aca0:	6840      	ldr	r0, [r0, #4]
    aca2:	8800      	ldrh	r0, [r0, #0]
    aca4:	f7fa f860 	bl	4d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    aca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    acac:	f003 b800 	b.w	dcb0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    acb0:	2000011c 	.word	0x2000011c
    acb4:	4a19      	ldr	r2, [pc, #100]	; (ad1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    acb6:	2901      	cmp	r1, #1
    acb8:	6852      	ldr	r2, [r2, #4]
    acba:	d010      	beq.n	acde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    acbc:	2100      	movs	r1, #0
    acbe:	b1c8      	cbz	r0, acf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    acc0:	2801      	cmp	r0, #1
    acc2:	d022      	beq.n	ad0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    acc4:	2803      	cmp	r0, #3
    acc6:	d109      	bne.n	acdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    acc8:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    accc:	2813      	cmp	r0, #19
    acce:	d005      	beq.n	acdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    acd0:	2816      	cmp	r0, #22
    acd2:	d003      	beq.n	acdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    acd4:	2818      	cmp	r0, #24
    acd6:	d001      	beq.n	acdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    acd8:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    acdc:	4770      	bx	lr
    acde:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    ace2:	2801      	cmp	r0, #1
    ace4:	d0fa      	beq.n	acdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    ace6:	bf00      	nop
    ace8:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    acec:	7801      	ldrb	r1, [r0, #0]
    acee:	1e49      	subs	r1, r1, #1
    acf0:	7001      	strb	r1, [r0, #0]
    acf2:	4770      	bx	lr
    acf4:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    acf8:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    acfc:	1ac0      	subs	r0, r0, r3
    acfe:	b200      	sxth	r0, r0
    ad00:	2800      	cmp	r0, #0
    ad02:	dbf6      	blt.n	acf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    ad04:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    ad08:	4770      	bx	lr
    ad0a:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    ad0e:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    ad12:	1a40      	subs	r0, r0, r1
    ad14:	b200      	sxth	r0, r0
    ad16:	2800      	cmp	r0, #0
    ad18:	dae6      	bge.n	ace8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    ad1a:	4770      	bx	lr
    ad1c:	2000011c 	.word	0x2000011c

0000ad20 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    ad20:	b510      	push	{r4, lr}
    ad22:	6941      	ldr	r1, [r0, #20]
    ad24:	b119      	cbz	r1, ad2e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    ad26:	6842      	ldr	r2, [r0, #4]
    ad28:	684b      	ldr	r3, [r1, #4]
    ad2a:	429a      	cmp	r2, r3
    ad2c:	d203      	bcs.n	ad36 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    ad2e:	21c1      	movs	r1, #193	; 0xc1
    ad30:	2037      	movs	r0, #55	; 0x37
    ad32:	f7f9 fc1b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad36:	6902      	ldr	r2, [r0, #16]
    ad38:	610a      	str	r2, [r1, #16]
    ad3a:	68c3      	ldr	r3, [r0, #12]
    ad3c:	60cb      	str	r3, [r1, #12]
    ad3e:	b10a      	cbz	r2, ad44 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    ad40:	60d1      	str	r1, [r2, #12]
    ad42:	e001      	b.n	ad48 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    ad44:	4a06      	ldr	r2, [pc, #24]	; (ad60 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    ad46:	6011      	str	r1, [r2, #0]
    ad48:	68ca      	ldr	r2, [r1, #12]
    ad4a:	b132      	cbz	r2, ad5a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    ad4c:	6111      	str	r1, [r2, #16]
    ad4e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    ad52:	4410      	add	r0, r2
    ad54:	684a      	ldr	r2, [r1, #4]
    ad56:	1a80      	subs	r0, r0, r2
    ad58:	e000      	b.n	ad5c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    ad5a:	2000      	movs	r0, #0
    ad5c:	6088      	str	r0, [r1, #8]
    ad5e:	bd10      	pop	{r4, pc}
    ad60:	200001f4 	.word	0x200001f4

0000ad64 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    ad64:	b510      	push	{r4, lr}
    ad66:	2200      	movs	r2, #0
    ad68:	6101      	str	r1, [r0, #16]
    ad6a:	b189      	cbz	r1, ad90 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    ad6c:	68cb      	ldr	r3, [r1, #12]
    ad6e:	60c8      	str	r0, [r1, #12]
    ad70:	60c3      	str	r3, [r0, #12]
    ad72:	b103      	cbz	r3, ad76 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    ad74:	6118      	str	r0, [r3, #16]
    ad76:	6901      	ldr	r1, [r0, #16]
    ad78:	6082      	str	r2, [r0, #8]
    ad7a:	2900      	cmp	r1, #0
    ad7c:	d00f      	beq.n	ad9e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    ad7e:	688b      	ldr	r3, [r1, #8]
    ad80:	b163      	cbz	r3, ad9c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    ad82:	6844      	ldr	r4, [r0, #4]
    ad84:	42a3      	cmp	r3, r4
    ad86:	d207      	bcs.n	ad98 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    ad88:	212a      	movs	r1, #42	; 0x2a
    ad8a:	2037      	movs	r0, #55	; 0x37
    ad8c:	f7f9 fbee 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad90:	4903      	ldr	r1, [pc, #12]	; (ada0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    ad92:	60c2      	str	r2, [r0, #12]
    ad94:	6008      	str	r0, [r1, #0]
    ad96:	e7ee      	b.n	ad76 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    ad98:	1b1b      	subs	r3, r3, r4
    ad9a:	6083      	str	r3, [r0, #8]
    ad9c:	608a      	str	r2, [r1, #8]
    ad9e:	bd10      	pop	{r4, pc}
    ada0:	200001f4 	.word	0x200001f4

0000ada4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    ada4:	6901      	ldr	r1, [r0, #16]
    ada6:	b149      	cbz	r1, adbc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    ada8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    adac:	441a      	add	r2, r3
    adae:	688b      	ldr	r3, [r1, #8]
    adb0:	441a      	add	r2, r3
    adb2:	608a      	str	r2, [r1, #8]
    adb4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    adb8:	60d1      	str	r1, [r2, #12]
    adba:	e002      	b.n	adc2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    adbc:	4a06      	ldr	r2, [pc, #24]	; (add8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    adbe:	68c1      	ldr	r1, [r0, #12]
    adc0:	6011      	str	r1, [r2, #0]
    adc2:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    adc6:	b109      	cbz	r1, adcc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    adc8:	6108      	str	r0, [r1, #16]
    adca:	4770      	bx	lr
    adcc:	2800      	cmp	r0, #0
    adce:	d0fc      	beq.n	adca <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    add0:	2100      	movs	r1, #0
    add2:	6081      	str	r1, [r0, #8]
    add4:	4770      	bx	lr
    add6:	0000      	.short	0x0000
    add8:	200001f4 	.word	0x200001f4

0000addc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    addc:	b510      	push	{r4, lr}
    adde:	4604      	mov	r4, r0
    ade0:	490a      	ldr	r1, [pc, #40]	; (ae0c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    ade2:	2000      	movs	r0, #0
    ade4:	4602      	mov	r2, r0
    ade6:	6809      	ldr	r1, [r1, #0]
    ade8:	1e43      	subs	r3, r0, #1
    adea:	e008      	b.n	adfe <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    adec:	688a      	ldr	r2, [r1, #8]
    adee:	42a2      	cmp	r2, r4
    adf0:	d303      	bcc.n	adfa <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    adf2:	429a      	cmp	r2, r3
    adf4:	d201      	bcs.n	adfa <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    adf6:	4613      	mov	r3, r2
    adf8:	4608      	mov	r0, r1
    adfa:	460a      	mov	r2, r1
    adfc:	68c9      	ldr	r1, [r1, #12]
    adfe:	2900      	cmp	r1, #0
    ae00:	d1f4      	bne.n	adec <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    ae02:	2800      	cmp	r0, #0
    ae04:	d100      	bne.n	ae08 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    ae06:	4610      	mov	r0, r2
    ae08:	bd10      	pop	{r4, pc}
    ae0a:	0000      	.short	0x0000
    ae0c:	200001f4 	.word	0x200001f4

0000ae10 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    ae10:	4801      	ldr	r0, [pc, #4]	; (ae18 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    ae12:	6800      	ldr	r0, [r0, #0]
    ae14:	4770      	bx	lr
    ae16:	0000      	.short	0x0000
    ae18:	200001f4 	.word	0x200001f4

0000ae1c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    ae1c:	4804      	ldr	r0, [pc, #16]	; (ae30 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    ae1e:	6801      	ldr	r1, [r0, #0]
    ae20:	2000      	movs	r0, #0
    ae22:	e001      	b.n	ae28 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    ae24:	4608      	mov	r0, r1
    ae26:	68c9      	ldr	r1, [r1, #12]
    ae28:	2900      	cmp	r1, #0
    ae2a:	d1fb      	bne.n	ae24 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    ae2c:	4770      	bx	lr
    ae2e:	0000      	.short	0x0000
    ae30:	200001f4 	.word	0x200001f4

0000ae34 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    ae34:	4801      	ldr	r0, [pc, #4]	; (ae3c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    ae36:	2100      	movs	r1, #0
    ae38:	6001      	str	r1, [r0, #0]
    ae3a:	4770      	bx	lr
    ae3c:	200001f4 	.word	0x200001f4

0000ae40 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    ae40:	4903      	ldr	r1, [pc, #12]	; (ae50 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    ae42:	2000      	movs	r0, #0
    ae44:	6809      	ldr	r1, [r1, #0]
    ae46:	2900      	cmp	r1, #0
    ae48:	d000      	beq.n	ae4c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    ae4a:	200c      	movs	r0, #12
    ae4c:	4770      	bx	lr
    ae4e:	0000      	.short	0x0000
    ae50:	200001f4 	.word	0x200001f4

0000ae54 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    ae54:	b500      	push	{lr}
    ae56:	7941      	ldrb	r1, [r0, #5]
    ae58:	b095      	sub	sp, #84	; 0x54
    ae5a:	b141      	cbz	r1, ae6e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    ae5c:	2901      	cmp	r1, #1
    ae5e:	d006      	beq.n	ae6e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    ae60:	2902      	cmp	r1, #2
    ae62:	d004      	beq.n	ae6e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    ae64:	2903      	cmp	r1, #3
    ae66:	d002      	beq.n	ae6e <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    ae68:	2012      	movs	r0, #18
    ae6a:	b015      	add	sp, #84	; 0x54
    ae6c:	bd00      	pop	{pc}
    ae6e:	7901      	ldrb	r1, [r0, #4]
    ae70:	f88d 1000 	strb.w	r1, [sp]
    ae74:	7b01      	ldrb	r1, [r0, #12]
    ae76:	f88d 1001 	strb.w	r1, [sp, #1]
    ae7a:	7942      	ldrb	r2, [r0, #5]
    ae7c:	2100      	movs	r1, #0
    ae7e:	2301      	movs	r3, #1
    ae80:	b3e2      	cbz	r2, aefc <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    ae82:	2a02      	cmp	r2, #2
    ae84:	d03b      	beq.n	aefe <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    ae86:	f88d 3002 	strb.w	r3, [sp, #2]
    ae8a:	bf00      	nop
    ae8c:	f8d0 2006 	ldr.w	r2, [r0, #6]
    ae90:	f8cd 2003 	str.w	r2, [sp, #3]
    ae94:	8942      	ldrh	r2, [r0, #10]
    ae96:	f8ad 2007 	strh.w	r2, [sp, #7]
    ae9a:	f88d 3009 	strb.w	r3, [sp, #9]
    ae9e:	f830 2b01 	ldrh.w	r2, [r0], #1
    aea2:	f240 2371 	movw	r3, #625	; 0x271
    aea6:	435a      	muls	r2, r3
    aea8:	9203      	str	r2, [sp, #12]
    aeaa:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    aeae:	435a      	muls	r2, r3
    aeb0:	9206      	str	r2, [sp, #24]
    aeb2:	8982      	ldrh	r2, [r0, #12]
    aeb4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    aeb8:	89c2      	ldrh	r2, [r0, #14]
    aeba:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    aebe:	8a02      	ldrh	r2, [r0, #16]
    aec0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    aec4:	8a42      	ldrh	r2, [r0, #18]
    aec6:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    aeca:	8a82      	ldrh	r2, [r0, #20]
    aecc:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    aed0:	8ac0      	ldrh	r0, [r0, #22]
    aed2:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    aed6:	2007      	movs	r0, #7
    aed8:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    aedc:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    aee0:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    aee4:	9806      	ldr	r0, [sp, #24]
    aee6:	f000 fb95 	bl	b614 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    aeea:	b158      	cbz	r0, af04 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    aeec:	9803      	ldr	r0, [sp, #12]
    aeee:	f000 fb85 	bl	b5fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    aef2:	b138      	cbz	r0, af04 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    aef4:	4668      	mov	r0, sp
    aef6:	f000 f89f 	bl	b038 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    aefa:	e7b6      	b.n	ae6a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    aefc:	e7ff      	b.n	aefe <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    aefe:	f88d 1002 	strb.w	r1, [sp, #2]
    af02:	e7c3      	b.n	ae8c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    af04:	2030      	movs	r0, #48	; 0x30
    af06:	e7b0      	b.n	ae6a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000af08 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    af08:	4903      	ldr	r1, [pc, #12]	; (af18 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    af0a:	884a      	ldrh	r2, [r1, #2]
    af0c:	8002      	strh	r2, [r0, #0]
    af0e:	7809      	ldrb	r1, [r1, #0]
    af10:	7081      	strb	r1, [r0, #2]
    af12:	2000      	movs	r0, #0
    af14:	4770      	bx	lr
    af16:	0000      	.short	0x0000
    af18:	2000103c 	.word	0x2000103c

0000af1c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    af1c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    af1e:	460c      	mov	r4, r1
    af20:	4605      	mov	r5, r0
    af22:	8800      	ldrh	r0, [r0, #0]
    af24:	4669      	mov	r1, sp
    af26:	f003 f93c 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    af2a:	0001      	movs	r1, r0
    af2c:	f04f 0000 	mov.w	r0, #0
    af30:	d005      	beq.n	af3e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    af32:	f8c4 0002 	str.w	r0, [r4, #2]
    af36:	71a0      	strb	r0, [r4, #6]
    af38:	8020      	strh	r0, [r4, #0]
    af3a:	2002      	movs	r0, #2
    af3c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    af3e:	9901      	ldr	r1, [sp, #4]
    af40:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    af44:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    af48:	f8d1 2016 	ldr.w	r2, [r1, #22]
    af4c:	f8c4 2002 	str.w	r2, [r4, #2]
    af50:	7e8a      	ldrb	r2, [r1, #26]
    af52:	71a2      	strb	r2, [r4, #6]
    af54:	882a      	ldrh	r2, [r5, #0]
    af56:	8022      	strh	r2, [r4, #0]
    af58:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    af5c:	f88d 2008 	strb.w	r2, [sp, #8]
    af60:	9a02      	ldr	r2, [sp, #8]
    af62:	9202      	str	r2, [sp, #8]
    af64:	f89d 2008 	ldrb.w	r2, [sp, #8]
    af68:	2a00      	cmp	r2, #0
    af6a:	d1eb      	bne.n	af44 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    af6c:	2000      	movs	r0, #0
    af6e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000af70 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    af70:	b51c      	push	{r2, r3, r4, lr}
    af72:	8800      	ldrh	r0, [r0, #0]
    af74:	4669      	mov	r1, sp
    af76:	f003 f914 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    af7a:	2800      	cmp	r0, #0
    af7c:	d106      	bne.n	af8c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    af7e:	f89d 0000 	ldrb.w	r0, [sp]
    af82:	b120      	cbz	r0, af8e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    af84:	480b      	ldr	r0, [pc, #44]	; (afb4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    af86:	7800      	ldrb	r0, [r0, #0]
    af88:	b190      	cbz	r0, afb0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    af8a:	2002      	movs	r0, #2
    af8c:	bd1c      	pop	{r2, r3, r4, pc}
    af8e:	9801      	ldr	r0, [sp, #4]
    af90:	f004 ff79 	bl	fe86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    af94:	2800      	cmp	r0, #0
    af96:	d0f8      	beq.n	af8a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    af98:	9801      	ldr	r0, [sp, #4]
    af9a:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    af9e:	b108      	cbz	r0, afa4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    afa0:	203a      	movs	r0, #58	; 0x3a
    afa2:	bd1c      	pop	{r2, r3, r4, pc}
    afa4:	9901      	ldr	r1, [sp, #4]
    afa6:	2001      	movs	r0, #1
    afa8:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    afac:	2000      	movs	r0, #0
    afae:	bd1c      	pop	{r2, r3, r4, pc}
    afb0:	2011      	movs	r0, #17
    afb2:	bd1c      	pop	{r2, r3, r4, pc}
    afb4:	200001f8 	.word	0x200001f8

0000afb8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    afb8:	b510      	push	{r4, lr}
    afba:	4604      	mov	r4, r0
    afbc:	f004 ff5a 	bl	fe74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    afc0:	b130      	cbz	r0, afd0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    afc2:	4804      	ldr	r0, [pc, #16]	; (afd4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    afc4:	8881      	ldrh	r1, [r0, #4]
    afc6:	8021      	strh	r1, [r4, #0]
    afc8:	88c0      	ldrh	r0, [r0, #6]
    afca:	8060      	strh	r0, [r4, #2]
    afcc:	2000      	movs	r0, #0
    afce:	bd10      	pop	{r4, pc}
    afd0:	2001      	movs	r0, #1
    afd2:	bd10      	pop	{r4, pc}
    afd4:	20000206 	.word	0x20000206

0000afd8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    afd8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    afda:	4605      	mov	r5, r0
    afdc:	f000 fbf8 	bl	b7d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    afe0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    afe4:	b310      	cbz	r0, b02c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    afe6:	2400      	movs	r4, #0
    afe8:	a802      	add	r0, sp, #8
    afea:	f88d 4004 	strb.w	r4, [sp, #4]
    afee:	f88d 4008 	strb.w	r4, [sp, #8]
    aff2:	9000      	str	r0, [sp, #0]
    aff4:	78aa      	ldrb	r2, [r5, #2]
    aff6:	7869      	ldrb	r1, [r5, #1]
    aff8:	7828      	ldrb	r0, [r5, #0]
    affa:	ab01      	add	r3, sp, #4
    affc:	f004 ffe7 	bl	ffce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    b000:	2800      	cmp	r0, #0
    b002:	d112      	bne.n	b02a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    b004:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b008:	f004 fd5e 	bl	fac8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b00c:	b180      	cbz	r0, b030 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b00e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b012:	f004 fd59 	bl	fac8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b016:	b158      	cbz	r0, b030 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b018:	4806      	ldr	r0, [pc, #24]	; (b034 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    b01a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b01e:	7381      	strb	r1, [r0, #14]
    b020:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b024:	73c1      	strb	r1, [r0, #15]
    b026:	8204      	strh	r4, [r0, #16]
    b028:	2000      	movs	r0, #0
    b02a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b02c:	2001      	movs	r0, #1
    b02e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b030:	2011      	movs	r0, #17
    b032:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b034:	2000103c 	.word	0x2000103c

0000b038 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b03c:	a1a4      	add	r1, pc, #656	; (adr r1, b2d0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    b03e:	4605      	mov	r5, r0
    b040:	e9d1 8700 	ldrd	r8, r7, [r1]
    b044:	7a40      	ldrb	r0, [r0, #9]
    b046:	b08d      	sub	sp, #52	; 0x34
    b048:	0781      	lsls	r1, r0, #30
    b04a:	d502      	bpl.n	b052 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    b04c:	f040 0001 	orr.w	r0, r0, #1
    b050:	7268      	strb	r0, [r5, #9]
    b052:	4628      	mov	r0, r5
    b054:	f004 fd97 	bl	fb86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    b058:	2800      	cmp	r0, #0
    b05a:	d10c      	bne.n	b076 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b05c:	f004 ff2e 	bl	febc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    b060:	b940      	cbnz	r0, b074 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b062:	f7fb fbbd 	bl	67e0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    b066:	b928      	cbnz	r0, b074 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b068:	f7fb fe76 	bl	6d58 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b06c:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b070:	39ff      	subs	r1, #255	; 0xff
    b072:	d003      	beq.n	b07c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    b074:	200c      	movs	r0, #12
    b076:	b00d      	add	sp, #52	; 0x34
    b078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b07c:	7828      	ldrb	r0, [r5, #0]
    b07e:	f04f 0b00 	mov.w	fp, #0
    b082:	f04f 0a01 	mov.w	sl, #1
    b086:	b9e0      	cbnz	r0, b0c2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8a>
    b088:	f895 9002 	ldrb.w	r9, [r5, #2]
    b08c:	1cee      	adds	r6, r5, #3
    b08e:	a909      	add	r1, sp, #36	; 0x24
    b090:	2000      	movs	r0, #0
    b092:	f002 ff25 	bl	dee0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    b096:	b178      	cbz	r0, b0b8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    b098:	f240 2109 	movw	r1, #521	; 0x209
    b09c:	e112      	b.n	b2c4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    b09e:	4648      	mov	r0, r9
    b0a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b0a2:	f004 f926 	bl	f2f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b0a6:	78a1      	ldrb	r1, [r4, #2]
    b0a8:	4288      	cmp	r0, r1
    b0aa:	d105      	bne.n	b0b8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    b0ac:	2206      	movs	r2, #6
    b0ae:	4631      	mov	r1, r6
    b0b0:	1ce0      	adds	r0, r4, #3
    b0b2:	f001 fe59 	bl	cd68 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    b0b6:	b328      	cbz	r0, b104 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    b0b8:	a809      	add	r0, sp, #36	; 0x24
    b0ba:	f7f9 fc87 	bl	49cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    b0be:	2800      	cmp	r0, #0
    b0c0:	d0ed      	beq.n	b09e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    b0c2:	2103      	movs	r1, #3
    b0c4:	f105 0018 	add.w	r0, r5, #24
    b0c8:	f000 fab0 	bl	b62c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    b0cc:	2200      	movs	r2, #0
    b0ce:	4611      	mov	r1, r2
    b0d0:	a802      	add	r0, sp, #8
    b0d2:	f7f9 fca1 	bl	4a18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b0d6:	0004      	movs	r4, r0
    b0d8:	d016      	beq.n	b108 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    b0da:	2100      	movs	r1, #0
    b0dc:	f7fb f948 	bl	6370 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b0e0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    b0e4:	8020      	strh	r0, [r4, #0]
    b0e6:	487c      	ldr	r0, [pc, #496]	; (b2d8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    b0e8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    b0ec:	f004 fec2 	bl	fe74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    b0f0:	497a      	ldr	r1, [pc, #488]	; (b2dc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a4>)
    b0f2:	2800      	cmp	r0, #0
    b0f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b0f8:	d008      	beq.n	b10c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    b0fa:	884b      	ldrh	r3, [r1, #2]
    b0fc:	888a      	ldrh	r2, [r1, #4]
    b0fe:	84c3      	strh	r3, [r0, #38]	; 0x26
    b100:	8502      	strh	r2, [r0, #40]	; 0x28
    b102:	e006      	b.n	b112 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    b104:	200b      	movs	r0, #11
    b106:	e7b6      	b.n	b076 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b108:	2009      	movs	r0, #9
    b10a:	e7b4      	b.n	b076 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b10c:	221b      	movs	r2, #27
    b10e:	84c2      	strh	r2, [r0, #38]	; 0x26
    b110:	8502      	strh	r2, [r0, #40]	; 0x28
    b112:	4689      	mov	r9, r1
    b114:	4608      	mov	r0, r1
    b116:	7849      	ldrb	r1, [r1, #1]
    b118:	9100      	str	r1, [sp, #0]
    b11a:	7803      	ldrb	r3, [r0, #0]
    b11c:	8882      	ldrh	r2, [r0, #4]
    b11e:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    b122:	8820      	ldrh	r0, [r4, #0]
    b124:	f7f9 fd5a 	bl	4bdc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b128:	b110      	cbz	r0, b130 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf8>
    b12a:	f640 6199 	movw	r1, #3737	; 0xe99
    b12e:	e0c9      	b.n	b2c4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    b130:	f003 fd71 	bl	ec16 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    b134:	6120      	str	r0, [r4, #16]
    b136:	a06a      	add	r0, pc, #424	; (adr r0, b2e0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a8>)
    b138:	f104 0618 	add.w	r6, r4, #24
    b13c:	6800      	ldr	r0, [r0, #0]
    b13e:	9000      	str	r0, [sp, #0]
    b140:	2103      	movs	r1, #3
    b142:	4668      	mov	r0, sp
    b144:	f7f9 faae 	bl	46a4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b148:	2000      	movs	r0, #0
    b14a:	4669      	mov	r1, sp
    b14c:	5c0a      	ldrb	r2, [r1, r0]
    b14e:	5432      	strb	r2, [r6, r0]
    b150:	1c40      	adds	r0, r0, #1
    b152:	b2c0      	uxtb	r0, r0
    b154:	2803      	cmp	r0, #3
    b156:	d3f9      	bcc.n	b14c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x114>
    b158:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    b15a:	f003 f82e 	bl	e1ba <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    b15e:	60e0      	str	r0, [r4, #12]
    b160:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    b162:	82a0      	strh	r0, [r4, #20]
    b164:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    b166:	82e0      	strh	r0, [r4, #22]
    b168:	7a68      	ldrb	r0, [r5, #9]
    b16a:	f004 fc8c 	bl	fa86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    b16e:	f8d9 1008 	ldr.w	r1, [r9, #8]
    b172:	464e      	mov	r6, r9
    b174:	4620      	mov	r0, r4
    b176:	62e1      	str	r1, [r4, #44]	; 0x2c
    b178:	f003 fee2 	bl	ef40 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    b17c:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    b180:	46d1      	mov	r9, sl
    b182:	4650      	mov	r0, sl
    b184:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    b188:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    b18c:	4852      	ldr	r0, [pc, #328]	; (b2d8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    b18e:	3808      	subs	r0, #8
    b190:	6843      	ldr	r3, [r0, #4]
    b192:	b123      	cbz	r3, b19e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x166>
    b194:	2201      	movs	r2, #1
    b196:	f504 7199 	add.w	r1, r4, #306	; 0x132
    b19a:	4620      	mov	r0, r4
    b19c:	4798      	blx	r3
    b19e:	8821      	ldrh	r1, [r4, #0]
    b1a0:	f8ad 1014 	strh.w	r1, [sp, #20]
    b1a4:	7bb1      	ldrb	r1, [r6, #14]
    b1a6:	f88d 1016 	strb.w	r1, [sp, #22]
    b1aa:	7bf1      	ldrb	r1, [r6, #15]
    b1ac:	f88d 1017 	strb.w	r1, [sp, #23]
    b1b0:	8a31      	ldrh	r1, [r6, #16]
    b1b2:	f8ad 1018 	strh.w	r1, [sp, #24]
    b1b6:	a908      	add	r1, sp, #32
    b1b8:	9100      	str	r1, [sp, #0]
    b1ba:	2000      	movs	r0, #0
    b1bc:	ab07      	add	r3, sp, #28
    b1be:	aa05      	add	r2, sp, #20
    b1c0:	4621      	mov	r1, r4
    b1c2:	f004 fe18 	bl	fdf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    b1c6:	0006      	movs	r6, r0
    b1c8:	d10f      	bne.n	b1ea <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b2>
    b1ca:	f89d 001c 	ldrb.w	r0, [sp, #28]
    b1ce:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    b1d2:	f89d 0020 	ldrb.w	r0, [sp, #32]
    b1d6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    b1da:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    b1de:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    b1e2:	a909      	add	r1, sp, #36	; 0x24
    b1e4:	4620      	mov	r0, r4
    b1e6:	f003 f8d6 	bl	e396 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b1ea:	46d8      	mov	r8, fp
    b1ec:	f88d b00c 	strb.w	fp, [sp, #12]
    b1f0:	2101      	movs	r1, #1
    b1f2:	a803      	add	r0, sp, #12
    b1f4:	f7f9 fa56 	bl	46a4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b1f8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    b1fc:	f000 0107 	and.w	r1, r0, #7
    b200:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    b204:	4411      	add	r1, r2
    b206:	f3c0 1040 	ubfx	r0, r0, #5, #1
    b20a:	4408      	add	r0, r1
    b20c:	f88d 000c 	strb.w	r0, [sp, #12]
    b210:	1d40      	adds	r0, r0, #5
    b212:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    b216:	2809      	cmp	r0, #9
    b218:	d202      	bcs.n	b220 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e8>
    b21a:	3008      	adds	r0, #8
    b21c:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    b220:	2101      	movs	r1, #1
    b222:	4620      	mov	r0, r4
    b224:	f7fb f8a4 	bl	6370 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b228:	7868      	ldrb	r0, [r5, #1]
    b22a:	f7fb fe69 	bl	6f00 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    b22e:	bbee      	cbnz	r6, b2ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    b230:	78a9      	ldrb	r1, [r5, #2]
    b232:	7828      	ldrb	r0, [r5, #0]
    b234:	1cea      	adds	r2, r5, #3
    b236:	f7fb fe0d 	bl	6e54 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    b23a:	b148      	cbz	r0, b250 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x218>
    b23c:	f7fb fd34 	bl	6ca8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    b240:	78a9      	ldrb	r1, [r5, #2]
    b242:	7828      	ldrb	r0, [r5, #0]
    b244:	1cea      	adds	r2, r5, #3
    b246:	f7fb fe29 	bl	6e9c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    b24a:	0006      	movs	r6, r0
    b24c:	d002      	beq.n	b254 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21c>
    b24e:	e02f      	b.n	b2b0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    b250:	2612      	movs	r6, #18
    b252:	e02d      	b.n	b2b0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    b254:	78a8      	ldrb	r0, [r5, #2]
    b256:	f004 f84c 	bl	f2f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b25a:	4602      	mov	r2, r0
    b25c:	1ceb      	adds	r3, r5, #3
    b25e:	4621      	mov	r1, r4
    b260:	2003      	movs	r0, #3
    b262:	f7fb fd63 	bl	6d2c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    b266:	0006      	movs	r6, r0
    b268:	d122      	bne.n	b2b0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    b26a:	464f      	mov	r7, r9
    b26c:	4648      	mov	r0, r9
    b26e:	f7fb fdbb 	bl	6de8 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    b272:	0006      	movs	r6, r0
    b274:	d11c      	bne.n	b2b0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    b276:	f88d 800c 	strb.w	r8, [sp, #12]
    b27a:	7a68      	ldrb	r0, [r5, #9]
    b27c:	07c0      	lsls	r0, r0, #31
    b27e:	d005      	beq.n	b28c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x254>
    b280:	68e8      	ldr	r0, [r5, #12]
    b282:	9004      	str	r0, [sp, #16]
    b284:	69a8      	ldr	r0, [r5, #24]
    b286:	9005      	str	r0, [sp, #20]
    b288:	f88d 700c 	strb.w	r7, [sp, #12]
    b28c:	a803      	add	r0, sp, #12
    b28e:	f7fd f913 	bl	84b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    b292:	4606      	mov	r6, r0
    b294:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    b298:	f7fb fea6 	bl	6fe8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    b29c:	b936      	cbnz	r6, b2ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    b29e:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    b2a2:	4620      	mov	r0, r4
    b2a4:	f7fd f82a 	bl	82fc <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    b2a8:	0006      	movs	r6, r0
    b2aa:	e000      	b.n	b2ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x276>
    b2ac:	e000      	b.n	b2b0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    b2ae:	d00c      	beq.n	b2ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    b2b0:	8820      	ldrh	r0, [r4, #0]
    b2b2:	f002 fe74 	bl	df9e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    b2b6:	8820      	ldrh	r0, [r4, #0]
    b2b8:	2100      	movs	r1, #0
    b2ba:	f7f9 fbd5 	bl	4a68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b2be:	b120      	cbz	r0, b2ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    b2c0:	f640 715f 	movw	r1, #3935	; 0xf5f
    b2c4:	2039      	movs	r0, #57	; 0x39
    b2c6:	f7f9 f951 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ca:	4630      	mov	r0, r6
    b2cc:	e6d3      	b.n	b076 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b2ce:	0000      	.short	0x0000
    b2d0:	ffffffff 	.word	0xffffffff
    b2d4:	0000001f 	.word	0x0000001f
    b2d8:	20000200 	.word	0x20000200
    b2dc:	2000103c 	.word	0x2000103c
    b2e0:	00332211 	.word	0x00332211

0000b2e4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b2e4:	7801      	ldrb	r1, [r0, #0]
    b2e6:	b171      	cbz	r1, b306 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b2e8:	7841      	ldrb	r1, [r0, #1]
    b2ea:	b161      	cbz	r1, b306 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b2ec:	8841      	ldrh	r1, [r0, #2]
    b2ee:	291b      	cmp	r1, #27
    b2f0:	d309      	bcc.n	b306 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b2f2:	8881      	ldrh	r1, [r0, #4]
    b2f4:	291b      	cmp	r1, #27
    b2f6:	d306      	bcc.n	b306 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b2f8:	4904      	ldr	r1, [pc, #16]	; (b30c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b2fa:	6802      	ldr	r2, [r0, #0]
    b2fc:	600a      	str	r2, [r1, #0]
    b2fe:	8880      	ldrh	r0, [r0, #4]
    b300:	8088      	strh	r0, [r1, #4]
    b302:	2000      	movs	r0, #0
    b304:	4770      	bx	lr
    b306:	2012      	movs	r0, #18
    b308:	4770      	bx	lr
    b30a:	0000      	.short	0x0000
    b30c:	2000103c 	.word	0x2000103c

0000b310 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b310:	6800      	ldr	r0, [r0, #0]
    b312:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b316:	4288      	cmp	r0, r1
    b318:	d303      	bcc.n	b322 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b31a:	4903      	ldr	r1, [pc, #12]	; (b328 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b31c:	6088      	str	r0, [r1, #8]
    b31e:	2000      	movs	r0, #0
    b320:	4770      	bx	lr
    b322:	2012      	movs	r0, #18
    b324:	4770      	bx	lr
    b326:	0000      	.short	0x0000
    b328:	2000103c 	.word	0x2000103c

0000b32c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    b32c:	b510      	push	{r4, lr}
    b32e:	b086      	sub	sp, #24
    b330:	4604      	mov	r4, r0
    b332:	f004 fc9f 	bl	fc74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    b336:	2800      	cmp	r0, #0
    b338:	d103      	bne.n	b342 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    b33a:	f004 fdbf 	bl	febc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    b33e:	b110      	cbz	r0, b346 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    b340:	200c      	movs	r0, #12
    b342:	b006      	add	sp, #24
    b344:	bd10      	pop	{r4, pc}
    b346:	2102      	movs	r1, #2
    b348:	f104 0010 	add.w	r0, r4, #16
    b34c:	f000 f96e 	bl	b62c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    b350:	78a0      	ldrb	r0, [r4, #2]
    b352:	f88d 0008 	strb.w	r0, [sp, #8]
    b356:	78a0      	ldrb	r0, [r4, #2]
    b358:	f88d 0000 	strb.w	r0, [sp]
    b35c:	7860      	ldrb	r0, [r4, #1]
    b35e:	f88d 0003 	strb.w	r0, [sp, #3]
    b362:	7820      	ldrb	r0, [r4, #0]
    b364:	f88d 0002 	strb.w	r0, [sp, #2]
    b368:	7e20      	ldrb	r0, [r4, #24]
    b36a:	f88d 0004 	strb.w	r0, [sp, #4]
    b36e:	78a0      	ldrb	r0, [r4, #2]
    b370:	07c0      	lsls	r0, r0, #31
    b372:	d00b      	beq.n	b38c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    b374:	78e0      	ldrb	r0, [r4, #3]
    b376:	2801      	cmp	r0, #1
    b378:	d011      	beq.n	b39e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    b37a:	b190      	cbz	r0, b3a2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    b37c:	f05f 0000 	movs.w	r0, #0
    b380:	f88d 0001 	strb.w	r0, [sp, #1]
    b384:	68a0      	ldr	r0, [r4, #8]
    b386:	9003      	str	r0, [sp, #12]
    b388:	6920      	ldr	r0, [r4, #16]
    b38a:	9004      	str	r0, [sp, #16]
    b38c:	a802      	add	r0, sp, #8
    b38e:	f7fd f893 	bl	84b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    b392:	2800      	cmp	r0, #0
    b394:	d1d5      	bne.n	b342 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    b396:	4668      	mov	r0, sp
    b398:	f7fb fe2e 	bl	6ff8 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    b39c:	e7d1      	b.n	b342 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    b39e:	2002      	movs	r0, #2
    b3a0:	e7ee      	b.n	b380 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    b3a2:	2001      	movs	r0, #1
    b3a4:	e7ec      	b.n	b380 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000b3a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b3a8:	4a03      	ldr	r2, [pc, #12]	; (b3b8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b3aa:	e9d2 1200 	ldrd	r1, r2, [r2]
    b3ae:	6001      	str	r1, [r0, #0]
    b3b0:	6042      	str	r2, [r0, #4]
    b3b2:	2000      	movs	r0, #0
    b3b4:	4770      	bx	lr
    b3b6:	0000      	.short	0x0000
    b3b8:	0000b6b8 	.word	0x0000b6b8

0000b3bc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    b3bc:	b510      	push	{r4, lr}
    b3be:	2005      	movs	r0, #5
    b3c0:	f000 f9fc 	bl	b7bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b3c4:	f7fd fe48 	bl	9058 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    b3c8:	4902      	ldr	r1, [pc, #8]	; (b3d4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    b3ca:	4801      	ldr	r0, [pc, #4]	; (b3d0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    b3cc:	6048      	str	r0, [r1, #4]
    b3ce:	bd10      	pop	{r4, pc}
    b3d0:	0000b501 	.word	0x0000b501
    b3d4:	200001f8 	.word	0x200001f8

0000b3d8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    b3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b3dc:	b086      	sub	sp, #24
    b3de:	468a      	mov	sl, r1
    b3e0:	4606      	mov	r6, r0
    b3e2:	8800      	ldrh	r0, [r0, #0]
    b3e4:	a901      	add	r1, sp, #4
    b3e6:	f002 fedc 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b3ea:	2800      	cmp	r0, #0
    b3ec:	d139      	bne.n	b462 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    b3ee:	9802      	ldr	r0, [sp, #8]
    b3f0:	f04f 0801 	mov.w	r8, #1
    b3f4:	4601      	mov	r1, r0
    b3f6:	4689      	mov	r9, r1
    b3f8:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    b3fc:	f88d 1000 	strb.w	r1, [sp]
    b400:	9900      	ldr	r1, [sp, #0]
    b402:	9100      	str	r1, [sp, #0]
    b404:	f89d 5000 	ldrb.w	r5, [sp]
    b408:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    b40c:	3078      	adds	r0, #120	; 0x78
    b40e:	2921      	cmp	r1, #33	; 0x21
    b410:	d100      	bne.n	b414 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    b412:	b13d      	cbz	r5, b424 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    b414:	2400      	movs	r4, #0
    b416:	304e      	adds	r0, #78	; 0x4e
    b418:	2108      	movs	r1, #8
    b41a:	4607      	mov	r7, r0
    b41c:	f003 ff5f 	bl	f2de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    b420:	b110      	cbz	r0, b428 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    b422:	e007      	b.n	b434 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    b424:	2401      	movs	r4, #1
    b426:	e7f6      	b.n	b416 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    b428:	210b      	movs	r1, #11
    b42a:	4638      	mov	r0, r7
    b42c:	f003 ff57 	bl	f2de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    b430:	b900      	cbnz	r0, b434 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    b432:	b1ac      	cbz	r4, b460 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    b434:	a804      	add	r0, sp, #16
    b436:	9000      	str	r0, [sp, #0]
    b438:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b43c:	ab03      	add	r3, sp, #12
    b43e:	4632      	mov	r2, r6
    b440:	4649      	mov	r1, r9
    b442:	f004 fcd8 	bl	fdf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    b446:	0007      	movs	r7, r0
    b448:	d10b      	bne.n	b462 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    b44a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b44e:	9c02      	ldr	r4, [sp, #8]
    b450:	b150      	cbz	r0, b468 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    b452:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    b456:	bf00      	nop
    b458:	f884 8001 	strb.w	r8, [r4, #1]
    b45c:	b94d      	cbnz	r5, b472 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    b45e:	e006      	b.n	b46e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    b460:	201a      	movs	r0, #26
    b462:	b006      	add	sp, #24
    b464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b468:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    b46c:	e7f4      	b.n	b458 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    b46e:	7820      	ldrb	r0, [r4, #0]
    b470:	b108      	cbz	r0, b476 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    b472:	273a      	movs	r7, #58	; 0x3a
    b474:	e012      	b.n	b49c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    b476:	f884 a000 	strb.w	sl, [r4]
    b47a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    b47e:	70a0      	strb	r0, [r4, #2]
    b480:	f89d 1010 	ldrb.w	r1, [sp, #16]
    b484:	70e1      	strb	r1, [r4, #3]
    b486:	f88d 0000 	strb.w	r0, [sp]
    b48a:	f88d 1001 	strb.w	r1, [sp, #1]
    b48e:	88b0      	ldrh	r0, [r6, #4]
    b490:	f8ad 0002 	strh.w	r0, [sp, #2]
    b494:	4669      	mov	r1, sp
    b496:	4648      	mov	r0, r9
    b498:	f002 ff7d 	bl	e396 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b49c:	2000      	movs	r0, #0
    b49e:	7060      	strb	r0, [r4, #1]
    b4a0:	4638      	mov	r0, r7
    b4a2:	e7de      	b.n	b462 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000b4a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    b4a4:	b510      	push	{r4, lr}
    b4a6:	f002 fd8e 	bl	dfc6 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b4aa:	f7fa fd07 	bl	5ebc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b4ae:	f000 f99f 	bl	b7f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    b4b2:	f003 fa5b 	bl	e96c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    b4b6:	4810      	ldr	r0, [pc, #64]	; (b4f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    b4b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b4bc:	4b0f      	ldr	r3, [pc, #60]	; (b4fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    b4be:	8281      	strh	r1, [r0, #20]
    b4c0:	2100      	movs	r1, #0
    b4c2:	7581      	strb	r1, [r0, #22]
    b4c4:	8301      	strh	r1, [r0, #24]
    b4c6:	221b      	movs	r2, #27
    b4c8:	801a      	strh	r2, [r3, #0]
    b4ca:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b4ce:	805c      	strh	r4, [r3, #2]
    b4d0:	809a      	strh	r2, [r3, #4]
    b4d2:	80dc      	strh	r4, [r3, #6]
    b4d4:	7381      	strb	r1, [r0, #14]
    b4d6:	73c1      	strb	r1, [r0, #15]
    b4d8:	2303      	movs	r3, #3
    b4da:	7003      	strb	r3, [r0, #0]
    b4dc:	2302      	movs	r3, #2
    b4de:	7043      	strb	r3, [r0, #1]
    b4e0:	8042      	strh	r2, [r0, #2]
    b4e2:	8082      	strh	r2, [r0, #4]
    b4e4:	f640 62a6 	movw	r2, #3750	; 0xea6
    b4e8:	6082      	str	r2, [r0, #8]
    b4ea:	4a04      	ldr	r2, [pc, #16]	; (b4fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    b4ec:	1f92      	subs	r2, r2, #6
    b4ee:	7011      	strb	r1, [r2, #0]
    b4f0:	7481      	strb	r1, [r0, #18]
    b4f2:	7301      	strb	r1, [r0, #12]
    b4f4:	bd10      	pop	{r4, pc}
    b4f6:	0000      	.short	0x0000
    b4f8:	2000103c 	.word	0x2000103c
    b4fc:	20000206 	.word	0x20000206
    b500:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b504:	4692      	mov	sl, r2
    b506:	460f      	mov	r7, r1
    b508:	4681      	mov	r9, r0
    b50a:	f004 fcb3 	bl	fe74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    b50e:	2800      	cmp	r0, #0
    b510:	d063      	beq.n	b5da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    b512:	4933      	ldr	r1, [pc, #204]	; (b5e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13c>)
    b514:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    b518:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    b51c:	8808      	ldrh	r0, [r1, #0]
    b51e:	4290      	cmp	r0, r2
    b520:	d300      	bcc.n	b524 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    b522:	4610      	mov	r0, r2
    b524:	4680      	mov	r8, r0
    b526:	8888      	ldrh	r0, [r1, #4]
    b528:	42b0      	cmp	r0, r6
    b52a:	d200      	bcs.n	b52e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8a>
    b52c:	4606      	mov	r6, r0
    b52e:	884c      	ldrh	r4, [r1, #2]
    b530:	f640 0048 	movw	r0, #2120	; 0x848
    b534:	4284      	cmp	r4, r0
    b536:	d300      	bcc.n	b53a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    b538:	4604      	mov	r4, r0
    b53a:	88cd      	ldrh	r5, [r1, #6]
    b53c:	4285      	cmp	r5, r0
    b53e:	d300      	bcc.n	b542 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    b540:	4605      	mov	r5, r0
    b542:	4284      	cmp	r4, r0
    b544:	d300      	bcc.n	b548 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    b546:	4604      	mov	r4, r0
    b548:	f44f 71a4 	mov.w	r1, #328	; 0x148
    b54c:	2e1b      	cmp	r6, #27
    b54e:	d001      	beq.n	b554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    b550:	428d      	cmp	r5, r1
    b552:	d104      	bne.n	b55e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xba>
    b554:	f1b8 0f1b 	cmp.w	r8, #27
    b558:	d03f      	beq.n	b5da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    b55a:	428c      	cmp	r4, r1
    b55c:	d03d      	beq.n	b5da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    b55e:	466a      	mov	r2, sp
    b560:	4651      	mov	r1, sl
    b562:	4648      	mov	r0, r9
    b564:	f004 fc11 	bl	fd8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    b568:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b56c:	4641      	mov	r1, r8
    b56e:	4540      	cmp	r0, r8
    b570:	d900      	bls.n	b574 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd0>
    b572:	4608      	mov	r0, r1
    b574:	80f8      	strh	r0, [r7, #6]
    b576:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b57a:	42a1      	cmp	r1, r4
    b57c:	d800      	bhi.n	b580 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
    b57e:	460c      	mov	r4, r1
    b580:	813c      	strh	r4, [r7, #8]
    b582:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b586:	42b1      	cmp	r1, r6
    b588:	d800      	bhi.n	b58c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
    b58a:	460e      	mov	r6, r1
    b58c:	807e      	strh	r6, [r7, #2]
    b58e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b592:	42a9      	cmp	r1, r5
    b594:	d900      	bls.n	b598 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    b596:	4629      	mov	r1, r5
    b598:	80b9      	strh	r1, [r7, #4]
    b59a:	2201      	movs	r2, #1
    b59c:	703a      	strb	r2, [r7, #0]
    b59e:	381b      	subs	r0, #27
    b5a0:	28e0      	cmp	r0, #224	; 0xe0
    b5a2:	d902      	bls.n	b5aa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
    b5a4:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    b5a8:	e014      	b.n	b5d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    b5aa:	3e1b      	subs	r6, #27
    b5ac:	2ee0      	cmp	r6, #224	; 0xe0
    b5ae:	d902      	bls.n	b5b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x112>
    b5b0:	f640 4182 	movw	r1, #3202	; 0xc82
    b5b4:	e00e      	b.n	b5d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    b5b6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b5ba:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b5be:	4284      	cmp	r4, r0
    b5c0:	d902      	bls.n	b5c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    b5c2:	f640 4184 	movw	r1, #3204	; 0xc84
    b5c6:	e005      	b.n	b5d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    b5c8:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    b5cc:	4281      	cmp	r1, r0
    b5ce:	d904      	bls.n	b5da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    b5d0:	f640 4186 	movw	r1, #3206	; 0xc86
    b5d4:	2039      	movs	r0, #57	; 0x39
    b5d6:	f7f8 ffc9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5da:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5de:	0000      	.short	0x0000
    b5e0:	20000206 	.word	0x20000206
    b5e4:	4904      	ldr	r1, [pc, #16]	; (b5f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>)
    b5e6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    b5ea:	4288      	cmp	r0, r1
    b5ec:	d301      	bcc.n	b5f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    b5ee:	2000      	movs	r0, #0
    b5f0:	4770      	bx	lr
    b5f2:	2001      	movs	r0, #1
    b5f4:	4770      	bx	lr
    b5f6:	0000      	.short	0x0000
    b5f8:	0270f3cc 	.word	0x0270f3cc
    b5fc:	4904      	ldr	r1, [pc, #16]	; (b610 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16c>)
    b5fe:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    b602:	4288      	cmp	r0, r1
    b604:	d301      	bcc.n	b60a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    b606:	2000      	movs	r0, #0
    b608:	4770      	bx	lr
    b60a:	2001      	movs	r0, #1
    b60c:	4770      	bx	lr
    b60e:	0000      	.short	0x0000
    b610:	009c363d 	.word	0x009c363d
    b614:	4904      	ldr	r1, [pc, #16]	; (b628 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>)
    b616:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    b61a:	4288      	cmp	r0, r1
    b61c:	d301      	bcc.n	b622 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17e>
    b61e:	2000      	movs	r0, #0
    b620:	4770      	bx	lr
    b622:	2001      	movs	r0, #1
    b624:	4770      	bx	lr
    b626:	0000      	.short	0x0000
    b628:	009c363d 	.word	0x009c363d
    b62c:	b530      	push	{r4, r5, lr}
    b62e:	2200      	movs	r2, #0
    b630:	4d07      	ldr	r5, [pc, #28]	; (b650 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>)
    b632:	e009      	b.n	b648 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a4>
    b634:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    b638:	462b      	mov	r3, r5
    b63a:	429c      	cmp	r4, r3
    b63c:	d800      	bhi.n	b640 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19c>
    b63e:	4623      	mov	r3, r4
    b640:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    b644:	1c52      	adds	r2, r2, #1
    b646:	b2d2      	uxtb	r2, r2
    b648:	428a      	cmp	r2, r1
    b64a:	d3f3      	bcc.n	b634 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x190>
    b64c:	bd30      	pop	{r4, r5, pc}
    b64e:	0000      	.short	0x0000
    b650:	00f42400 	.word	0x00f42400
    b654:	4a09      	ldr	r2, [pc, #36]	; (b67c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>)
    b656:	4290      	cmp	r0, r2
    b658:	d80b      	bhi.n	b672 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    b65a:	2901      	cmp	r1, #1
    b65c:	d002      	beq.n	b664 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    b65e:	2904      	cmp	r1, #4
    b660:	d003      	beq.n	b66a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    b662:	e008      	b.n	b676 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    b664:	f240 7153 	movw	r1, #1875	; 0x753
    b668:	e001      	b.n	b66e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    b66a:	f640 11c4 	movw	r1, #2500	; 0x9c4
    b66e:	4288      	cmp	r0, r1
    b670:	d201      	bcs.n	b676 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    b672:	2000      	movs	r0, #0
    b674:	4770      	bx	lr
    b676:	2001      	movs	r0, #1
    b678:	4770      	bx	lr
    b67a:	0000      	.short	0x0000
    b67c:	0270fd8f 	.word	0x0270fd8f
    b680:	b510      	push	{r4, lr}
    b682:	4604      	mov	r4, r0
    b684:	88c1      	ldrh	r1, [r0, #6]
    b686:	8880      	ldrh	r0, [r0, #4]
    b688:	f004 fa33 	bl	faf2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    b68c:	2800      	cmp	r0, #0
    b68e:	d10f      	bne.n	b6b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    b690:	8861      	ldrh	r1, [r4, #2]
    b692:	8820      	ldrh	r0, [r4, #0]
    b694:	f004 fa2d 	bl	faf2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    b698:	2800      	cmp	r0, #0
    b69a:	d109      	bne.n	b6b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    b69c:	4805      	ldr	r0, [pc, #20]	; (b6b4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x210>)
    b69e:	88a1      	ldrh	r1, [r4, #4]
    b6a0:	8081      	strh	r1, [r0, #4]
    b6a2:	8821      	ldrh	r1, [r4, #0]
    b6a4:	8001      	strh	r1, [r0, #0]
    b6a6:	88e1      	ldrh	r1, [r4, #6]
    b6a8:	80c1      	strh	r1, [r0, #6]
    b6aa:	8861      	ldrh	r1, [r4, #2]
    b6ac:	8041      	strh	r1, [r0, #2]
    b6ae:	2000      	movs	r0, #0
    b6b0:	bd10      	pop	{r4, pc}
    b6b2:	0000      	.short	0x0000
    b6b4:	20000206 	.word	0x20000206
    b6b8:	0b12fe0b 	.word	0x0b12fe0b
    b6bc:	12fe0059 	.word	0x12fe0059
    b6c0:	05060708 	.word	0x05060708
    b6c4:	00020304 	.word	0x00020304
    b6c8:	f0f4f8fc 	.word	0xf0f4f8fc
    b6cc:	0304d8ec 	.word	0x0304d8ec
    b6d0:	f4f8fc00 	.word	0xf4f8fc00
    b6d4:	00d8ecf0 	.word	0x00d8ecf0

0000b6d8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b6d8:	b510      	push	{r4, lr}
    b6da:	460c      	mov	r4, r1
    b6dc:	f7fb f872 	bl	67c4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b6e0:	4805      	ldr	r0, [pc, #20]	; (b6f8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    b6e2:	6004      	str	r4, [r0, #0]
    b6e4:	6840      	ldr	r0, [r0, #4]
    b6e6:	f004 fca1 	bl	1002c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b6ea:	f004 f997 	bl	fa1c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6f2:	f7fb ba81 	b.w	6bf8 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    b6f6:	0000      	.short	0x0000
    b6f8:	20000210 	.word	0x20000210

0000b6fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b6fc:	b510      	push	{r4, lr}
    b6fe:	4c07      	ldr	r4, [pc, #28]	; (b71c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    b700:	68a0      	ldr	r0, [r4, #8]
    b702:	f004 fc93 	bl	1002c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b706:	68e0      	ldr	r0, [r4, #12]
    b708:	f004 fc90 	bl	1002c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b70c:	f002 fc5b 	bl	dfc6 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b710:	f7fa fbd4 	bl	5ebc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b718:	f7ff bec4 	b.w	b4a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b71c:	20000210 	.word	0x20000210

0000b720 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    b720:	b500      	push	{lr}
    b722:	4905      	ldr	r1, [pc, #20]	; (b738 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    b724:	4805      	ldr	r0, [pc, #20]	; (b73c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    b726:	f004 fc74 	bl	10012 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b72a:	4804      	ldr	r0, [pc, #16]	; (b73c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    b72c:	4904      	ldr	r1, [pc, #16]	; (b740 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    b72e:	1d00      	adds	r0, r0, #4
    b730:	f85d eb04 	ldr.w	lr, [sp], #4
    b734:	f004 bc6d 	b.w	10012 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b738:	20000238 	.word	0x20000238
    b73c:	20000214 	.word	0x20000214
    b740:	20000240 	.word	0x20000240

0000b744 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    b744:	b500      	push	{lr}
    b746:	4908      	ldr	r1, [pc, #32]	; (b768 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    b748:	4808      	ldr	r0, [pc, #32]	; (b76c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b74a:	f004 fc62 	bl	10012 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b74e:	4807      	ldr	r0, [pc, #28]	; (b76c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b750:	4907      	ldr	r1, [pc, #28]	; (b770 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    b752:	1d00      	adds	r0, r0, #4
    b754:	f004 fc5d 	bl	10012 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b758:	4804      	ldr	r0, [pc, #16]	; (b76c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b75a:	4906      	ldr	r1, [pc, #24]	; (b774 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    b75c:	3008      	adds	r0, #8
    b75e:	f85d eb04 	ldr.w	lr, [sp], #4
    b762:	f004 bc56 	b.w	10012 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b766:	0000      	.short	0x0000
    b768:	20000228 	.word	0x20000228
    b76c:	20000214 	.word	0x20000214
    b770:	20000230 	.word	0x20000230
    b774:	20000220 	.word	0x20000220
    b778:	b510      	push	{r4, lr}
    b77a:	f002 fc12 	bl	dfa2 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b77e:	4806      	ldr	r0, [pc, #24]	; (b798 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x54>)
    b780:	f7f9 fdb2 	bl	52e8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b784:	2000      	movs	r0, #0
    b786:	f7f9 f8b9 	bl	48fc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b78a:	f7fd fdb1 	bl	92f0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    b78e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b792:	f7fb b831 	b.w	67f8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    b796:	0000      	.short	0x0000
    b798:	200013bd 	.word	0x200013bd
    b79c:	b510      	push	{r4, lr}
    b79e:	f7fb fba7 	bl	6ef0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    b7a2:	f7ff fb47 	bl	ae34 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    b7a6:	f7fc fd7f 	bl	82a8 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    b7aa:	4803      	ldr	r0, [pc, #12]	; (b7b8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    b7ac:	f7fb fb3c 	bl	6e28 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    b7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7b4:	f7fb b830 	b.w	6818 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    b7b8:	200013bd 	.word	0x200013bd

0000b7bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b7bc:	2101      	movs	r1, #1
    b7be:	4081      	lsls	r1, r0
    b7c0:	4802      	ldr	r0, [pc, #8]	; (b7cc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    b7c2:	6802      	ldr	r2, [r0, #0]
    b7c4:	4311      	orrs	r1, r2
    b7c6:	6001      	str	r1, [r0, #0]
    b7c8:	4770      	bx	lr
    b7ca:	0000      	.short	0x0000
    b7cc:	20000248 	.word	0x20000248

0000b7d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b7d0:	4801      	ldr	r0, [pc, #4]	; (b7d8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b7d2:	6800      	ldr	r0, [r0, #0]
    b7d4:	4770      	bx	lr
    b7d6:	0000      	.short	0x0000
    b7d8:	20000248 	.word	0x20000248

0000b7dc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b7dc:	4803      	ldr	r0, [pc, #12]	; (b7ec <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    b7de:	8800      	ldrh	r0, [r0, #0]
    b7e0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b7e4:	0040      	lsls	r0, r0, #1
    b7e6:	1c40      	adds	r0, r0, #1
    b7e8:	4770      	bx	lr
    b7ea:	0000      	.short	0x0000
    b7ec:	20000248 	.word	0x20000248

0000b7f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b7f0:	b510      	push	{r4, lr}
    b7f2:	f7f8 fb01 	bl	3df8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b7f6:	2200      	movs	r2, #0
    b7f8:	4b08      	ldr	r3, [pc, #32]	; (b81c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b7fa:	4611      	mov	r1, r2
    b7fc:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b800:	4284      	cmp	r4, r0
    b802:	d303      	bcc.n	b80c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b804:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b808:	7882      	ldrb	r2, [r0, #2]
    b80a:	e003      	b.n	b814 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b80c:	1c49      	adds	r1, r1, #1
    b80e:	b2c9      	uxtb	r1, r1
    b810:	290c      	cmp	r1, #12
    b812:	d3f3      	bcc.n	b7fc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b814:	4802      	ldr	r0, [pc, #8]	; (b820 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b816:	7002      	strb	r2, [r0, #0]
    b818:	bd10      	pop	{r4, pc}
    b81a:	0000      	.short	0x0000
    b81c:	00010098 	.word	0x00010098
    b820:	2000029d 	.word	0x2000029d

0000b824 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    b824:	4801      	ldr	r0, [pc, #4]	; (b82c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    b826:	7800      	ldrb	r0, [r0, #0]
    b828:	4770      	bx	lr
    b82a:	0000      	.short	0x0000
    b82c:	2000029d 	.word	0x2000029d

0000b830 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b830:	b570      	push	{r4, r5, r6, lr}
    b832:	4605      	mov	r5, r0
    b834:	4616      	mov	r6, r2
    b836:	460c      	mov	r4, r1
    b838:	2002      	movs	r0, #2
    b83a:	f000 f9f9 	bl	bc30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b83e:	4906      	ldr	r1, [pc, #24]	; (b858 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b840:	2001      	movs	r0, #1
    b842:	1ef6      	subs	r6, r6, #3
    b844:	7008      	strb	r0, [r1, #0]
    b846:	4805      	ldr	r0, [pc, #20]	; (b85c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b848:	6006      	str	r6, [r0, #0]
    b84a:	4804      	ldr	r0, [pc, #16]	; (b85c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b84c:	3808      	subs	r0, #8
    b84e:	6005      	str	r5, [r0, #0]
    b850:	1f00      	subs	r0, r0, #4
    b852:	6004      	str	r4, [r0, #0]
    b854:	bd70      	pop	{r4, r5, r6, pc}
    b856:	0000      	.short	0x0000
    b858:	2000029e 	.word	0x2000029e
    b85c:	4000f510 	.word	0x4000f510

0000b860 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b860:	b510      	push	{r4, lr}
    b862:	4c0c      	ldr	r4, [pc, #48]	; (b894 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b864:	7820      	ldrb	r0, [r4, #0]
    b866:	b180      	cbz	r0, b88a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b868:	490b      	ldr	r1, [pc, #44]	; (b898 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b86a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b86e:	6008      	str	r0, [r1, #0]
    b870:	f000 f86a 	bl	b948 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b874:	2100      	movs	r1, #0
    b876:	b120      	cbz	r0, b882 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b878:	2001      	movs	r0, #1
    b87a:	7060      	strb	r0, [r4, #1]
    b87c:	4807      	ldr	r0, [pc, #28]	; (b89c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b87e:	6800      	ldr	r0, [r0, #0]
    b880:	e001      	b.n	b886 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b882:	7061      	strb	r1, [r4, #1]
    b884:	2010      	movs	r0, #16
    b886:	70a0      	strb	r0, [r4, #2]
    b888:	7021      	strb	r1, [r4, #0]
    b88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b88e:	2000      	movs	r0, #0
    b890:	f000 b9ce 	b.w	bc30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b894:	2000029e 	.word	0x2000029e
    b898:	4001f508 	.word	0x4001f508
    b89c:	4000f400 	.word	0x4000f400

0000b8a0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b8a0:	b510      	push	{r4, lr}
    b8a2:	2002      	movs	r0, #2
    b8a4:	f000 f9c4 	bl	bc30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b8a8:	4904      	ldr	r1, [pc, #16]	; (b8bc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b8aa:	2001      	movs	r0, #1
    b8ac:	7008      	strb	r0, [r1, #0]
    b8ae:	f000 f859 	bl	b964 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b8b2:	4903      	ldr	r1, [pc, #12]	; (b8c0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b8b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b8b8:	6008      	str	r0, [r1, #0]
    b8ba:	bd10      	pop	{r4, pc}
    b8bc:	2000029e 	.word	0x2000029e
    b8c0:	4001f504 	.word	0x4001f504

0000b8c4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b8c4:	4803      	ldr	r0, [pc, #12]	; (b8d4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b8c6:	2100      	movs	r1, #0
    b8c8:	7001      	strb	r1, [r0, #0]
    b8ca:	7041      	strb	r1, [r0, #1]
    b8cc:	2110      	movs	r1, #16
    b8ce:	7081      	strb	r1, [r0, #2]
    b8d0:	4770      	bx	lr
    b8d2:	0000      	.short	0x0000
    b8d4:	2000029e 	.word	0x2000029e

0000b8d8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b8d8:	4807      	ldr	r0, [pc, #28]	; (b8f8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b8da:	b510      	push	{r4, lr}
    b8dc:	7801      	ldrb	r1, [r0, #0]
    b8de:	b141      	cbz	r1, b8f2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b8e0:	f000 f832 	bl	b948 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b8e4:	b118      	cbz	r0, b8ee <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b8e6:	4805      	ldr	r0, [pc, #20]	; (b8fc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b8e8:	6800      	ldr	r0, [r0, #0]
    b8ea:	b2c0      	uxtb	r0, r0
    b8ec:	bd10      	pop	{r4, pc}
    b8ee:	2010      	movs	r0, #16
    b8f0:	bd10      	pop	{r4, pc}
    b8f2:	7880      	ldrb	r0, [r0, #2]
    b8f4:	bd10      	pop	{r4, pc}
    b8f6:	0000      	.short	0x0000
    b8f8:	2000029e 	.word	0x2000029e
    b8fc:	4000f400 	.word	0x4000f400

0000b900 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b900:	4808      	ldr	r0, [pc, #32]	; (b924 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b902:	b510      	push	{r4, lr}
    b904:	7801      	ldrb	r1, [r0, #0]
    b906:	b159      	cbz	r1, b920 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b908:	4807      	ldr	r0, [pc, #28]	; (b928 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b90a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b90e:	b128      	cbz	r0, b91c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b910:	f000 f80c 	bl	b92c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b914:	2800      	cmp	r0, #0
    b916:	d000      	beq.n	b91a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b918:	2001      	movs	r0, #1
    b91a:	bd10      	pop	{r4, pc}
    b91c:	2002      	movs	r0, #2
    b91e:	bd10      	pop	{r4, pc}
    b920:	7840      	ldrb	r0, [r0, #1]
    b922:	bd10      	pop	{r4, pc}
    b924:	2000029e 	.word	0x2000029e
    b928:	4000f000 	.word	0x4000f000
    b92c:	4805      	ldr	r0, [pc, #20]	; (b944 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b92e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b932:	b111      	cbz	r1, b93a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b934:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b938:	b108      	cbz	r0, b93e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b93a:	2000      	movs	r0, #0
    b93c:	4770      	bx	lr
    b93e:	2001      	movs	r0, #1
    b940:	4770      	bx	lr
    b942:	0000      	.short	0x0000
    b944:	4000f000 	.word	0x4000f000
    b948:	4805      	ldr	r0, [pc, #20]	; (b960 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b94a:	b510      	push	{r4, lr}
    b94c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b950:	b120      	cbz	r0, b95c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b952:	f7ff ffeb 	bl	b92c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b956:	b108      	cbz	r0, b95c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b958:	2001      	movs	r0, #1
    b95a:	bd10      	pop	{r4, pc}
    b95c:	2000      	movs	r0, #0
    b95e:	bd10      	pop	{r4, pc}
    b960:	4000f000 	.word	0x4000f000
    b964:	4804      	ldr	r0, [pc, #16]	; (b978 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b966:	2100      	movs	r1, #0
    b968:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b96c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b970:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b974:	4770      	bx	lr
    b976:	0000      	.short	0x0000
    b978:	4000f000 	.word	0x4000f000

0000b97c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b97c:	4a08      	ldr	r2, [pc, #32]	; (b9a0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b97e:	b510      	push	{r4, lr}
    b980:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b984:	4907      	ldr	r1, [pc, #28]	; (b9a4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b986:	4610      	mov	r0, r2
    b988:	f7f8 fc8c 	bl	42a4 <mpsl_fem_lna_configuration_set>
    b98c:	2800      	cmp	r0, #0
    b98e:	d005      	beq.n	b99c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b990:	1c40      	adds	r0, r0, #1
    b992:	d003      	beq.n	b99c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b994:	217d      	movs	r1, #125	; 0x7d
    b996:	2040      	movs	r0, #64	; 0x40
    b998:	f7f8 fde8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b99c:	bd10      	pop	{r4, pc}
    b99e:	0000      	.short	0x0000
    b9a0:	2000024c 	.word	0x2000024c
    b9a4:	0000b9d4 	.word	0x0000b9d4

0000b9a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b9a8:	4a08      	ldr	r2, [pc, #32]	; (b9cc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b9aa:	b510      	push	{r4, lr}
    b9ac:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b9b0:	4907      	ldr	r1, [pc, #28]	; (b9d0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b9b2:	4610      	mov	r0, r2
    b9b4:	f7f8 fc82 	bl	42bc <mpsl_fem_pa_configuration_set>
    b9b8:	2800      	cmp	r0, #0
    b9ba:	d005      	beq.n	b9c8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b9bc:	1c40      	adds	r0, r0, #1
    b9be:	d003      	beq.n	b9c8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b9c0:	2172      	movs	r1, #114	; 0x72
    b9c2:	2040      	movs	r0, #64	; 0x40
    b9c4:	f7f8 fdd2 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9c8:	bd10      	pop	{r4, pc}
    b9ca:	0000      	.short	0x0000
    b9cc:	2000024c 	.word	0x2000024c
    b9d0:	0000b9d4 	.word	0x0000b9d4
    b9d4:	00000001 	.word	0x00000001
    b9d8:	40001110 	.word	0x40001110
	...

0000b9ec <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b9ec:	4a07      	ldr	r2, [pc, #28]	; (ba0c <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b9ee:	b510      	push	{r4, lr}
    b9f0:	7853      	ldrb	r3, [r2, #1]
    b9f2:	b133      	cbz	r3, ba02 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b9f4:	4b06      	ldr	r3, [pc, #24]	; (ba10 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b9f6:	6019      	str	r1, [r3, #0]
    b9f8:	1d19      	adds	r1, r3, #4
    b9fa:	6008      	str	r0, [r1, #0]
    b9fc:	2001      	movs	r0, #1
    b9fe:	7090      	strb	r0, [r2, #2]
    ba00:	bd10      	pop	{r4, pc}
    ba02:	21ba      	movs	r1, #186	; 0xba
    ba04:	203c      	movs	r0, #60	; 0x3c
    ba06:	f7f8 fdb1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba0a:	0000      	.short	0x0000
    ba0c:	200002a1 	.word	0x200002a1
    ba10:	4000f50c 	.word	0x4000f50c

0000ba14 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    ba14:	4809      	ldr	r0, [pc, #36]	; (ba3c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    ba16:	b510      	push	{r4, lr}
    ba18:	7801      	ldrb	r1, [r0, #0]
    ba1a:	b151      	cbz	r1, ba32 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    ba1c:	7880      	ldrb	r0, [r0, #2]
    ba1e:	b140      	cbz	r0, ba32 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    ba20:	4907      	ldr	r1, [pc, #28]	; (ba40 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    ba22:	2000      	movs	r0, #0
    ba24:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    ba28:	4906      	ldr	r1, [pc, #24]	; (ba44 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    ba2a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    ba2e:	6008      	str	r0, [r1, #0]
    ba30:	bd10      	pop	{r4, pc}
    ba32:	21e1      	movs	r1, #225	; 0xe1
    ba34:	203c      	movs	r0, #60	; 0x3c
    ba36:	f7f8 fd99 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba3a:	0000      	.short	0x0000
    ba3c:	200002a1 	.word	0x200002a1
    ba40:	4000f000 	.word	0x4000f000
    ba44:	4001f504 	.word	0x4001f504

0000ba48 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    ba48:	b570      	push	{r4, r5, r6, lr}
    ba4a:	4c0b      	ldr	r4, [pc, #44]	; (ba78 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    ba4c:	2500      	movs	r5, #0
    ba4e:	7820      	ldrb	r0, [r4, #0]
    ba50:	b158      	cbz	r0, ba6a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    ba52:	f000 f8e5 	bl	bc20 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    ba56:	4809      	ldr	r0, [pc, #36]	; (ba7c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    ba58:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    ba5c:	b118      	cbz	r0, ba66 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    ba5e:	4808      	ldr	r0, [pc, #32]	; (ba80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    ba60:	6800      	ldr	r0, [r0, #0]
    ba62:	70e0      	strb	r0, [r4, #3]
    ba64:	e000      	b.n	ba68 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    ba66:	70e5      	strb	r5, [r4, #3]
    ba68:	7025      	strb	r5, [r4, #0]
    ba6a:	2000      	movs	r0, #0
    ba6c:	f000 f8e0 	bl	bc30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ba70:	7065      	strb	r5, [r4, #1]
    ba72:	70a5      	strb	r5, [r4, #2]
    ba74:	bd70      	pop	{r4, r5, r6, pc}
    ba76:	0000      	.short	0x0000
    ba78:	200002a1 	.word	0x200002a1
    ba7c:	4000f000 	.word	0x4000f000
    ba80:	4000f400 	.word	0x4000f400

0000ba84 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    ba84:	480d      	ldr	r0, [pc, #52]	; (babc <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    ba86:	b510      	push	{r4, lr}
    ba88:	7801      	ldrb	r1, [r0, #0]
    ba8a:	b191      	cbz	r1, bab2 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    ba8c:	7880      	ldrb	r0, [r0, #2]
    ba8e:	b180      	cbz	r0, bab2 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    ba90:	490b      	ldr	r1, [pc, #44]	; (bac0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    ba92:	2000      	movs	r0, #0
    ba94:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    ba98:	4a0a      	ldr	r2, [pc, #40]	; (bac4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    ba9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    ba9e:	6010      	str	r0, [r2, #0]
    baa0:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    baa4:	2a01      	cmp	r2, #1
    baa6:	d103      	bne.n	bab0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    baa8:	604a      	str	r2, [r1, #4]
    baaa:	4906      	ldr	r1, [pc, #24]	; (bac4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    baac:	1d09      	adds	r1, r1, #4
    baae:	6008      	str	r0, [r1, #0]
    bab0:	bd10      	pop	{r4, pc}
    bab2:	21d1      	movs	r1, #209	; 0xd1
    bab4:	203c      	movs	r0, #60	; 0x3c
    bab6:	f7f8 fd59 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    baba:	0000      	.short	0x0000
    babc:	200002a1 	.word	0x200002a1
    bac0:	4000f000 	.word	0x4000f000
    bac4:	4001f504 	.word	0x4001f504

0000bac8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    bac8:	4803      	ldr	r0, [pc, #12]	; (bad8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    baca:	2100      	movs	r1, #0
    bacc:	7001      	strb	r1, [r0, #0]
    bace:	7041      	strb	r1, [r0, #1]
    bad0:	7081      	strb	r1, [r0, #2]
    bad2:	70c1      	strb	r1, [r0, #3]
    bad4:	4770      	bx	lr
    bad6:	0000      	.short	0x0000
    bad8:	200002a1 	.word	0x200002a1

0000badc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    badc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bae0:	4605      	mov	r5, r0
    bae2:	461c      	mov	r4, r3
    bae4:	4690      	mov	r8, r2
    bae6:	460f      	mov	r7, r1
    bae8:	2001      	movs	r0, #1
    baea:	f000 f8a1 	bl	bc30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    baee:	4e12      	ldr	r6, [pc, #72]	; (bb38 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    baf0:	4812      	ldr	r0, [pc, #72]	; (bb3c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    baf2:	7134      	strb	r4, [r6, #4]
    baf4:	6007      	str	r7, [r0, #0]
    baf6:	4911      	ldr	r1, [pc, #68]	; (bb3c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    baf8:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    bafc:	1f09      	subs	r1, r1, #4
    bafe:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    bb02:	6008      	str	r0, [r1, #0]
    bb04:	f001 f8f0 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bb08:	b938      	cbnz	r0, bb1a <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    bb0a:	480c      	ldr	r0, [pc, #48]	; (bb3c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    bb0c:	3010      	adds	r0, #16
    bb0e:	6801      	ldr	r1, [r0, #0]
    bb10:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    bb14:	ea41 0108 	orr.w	r1, r1, r8
    bb18:	6001      	str	r1, [r0, #0]
    bb1a:	f000 f881 	bl	bc20 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    bb1e:	b93d      	cbnz	r5, bb30 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    bb20:	4808      	ldr	r0, [pc, #32]	; (bb44 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    bb22:	4a07      	ldr	r2, [pc, #28]	; (bb40 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    bb24:	4906      	ldr	r1, [pc, #24]	; (bb40 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    bb26:	3afc      	subs	r2, #252	; 0xfc
    bb28:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    bb2c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    bb30:	2001      	movs	r0, #1
    bb32:	7070      	strb	r0, [r6, #1]
    bb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb38:	200002a1 	.word	0x200002a1
    bb3c:	4000f508 	.word	0x4000f508
    bb40:	4000f100 	.word	0x4000f100
    bb44:	4001f088 	.word	0x4001f088

0000bb48 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    bb48:	4808      	ldr	r0, [pc, #32]	; (bb6c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    bb4a:	b510      	push	{r4, lr}
    bb4c:	7841      	ldrb	r1, [r0, #1]
    bb4e:	b149      	cbz	r1, bb64 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    bb50:	2101      	movs	r1, #1
    bb52:	7001      	strb	r1, [r0, #0]
    bb54:	4806      	ldr	r0, [pc, #24]	; (bb70 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    bb56:	2200      	movs	r2, #0
    bb58:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    bb5c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    bb60:	6001      	str	r1, [r0, #0]
    bb62:	bd10      	pop	{r4, pc}
    bb64:	21c5      	movs	r1, #197	; 0xc5
    bb66:	203c      	movs	r0, #60	; 0x3c
    bb68:	f7f8 fd00 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb6c:	200002a1 	.word	0x200002a1
    bb70:	4000f000 	.word	0x4000f000

0000bb74 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    bb74:	4806      	ldr	r0, [pc, #24]	; (bb90 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    bb76:	7801      	ldrb	r1, [r0, #0]
    bb78:	b141      	cbz	r1, bb8c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    bb7a:	4806      	ldr	r0, [pc, #24]	; (bb94 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    bb7c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    bb80:	2800      	cmp	r0, #0
    bb82:	d002      	beq.n	bb8a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    bb84:	4804      	ldr	r0, [pc, #16]	; (bb98 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    bb86:	6800      	ldr	r0, [r0, #0]
    bb88:	b2c0      	uxtb	r0, r0
    bb8a:	4770      	bx	lr
    bb8c:	78c0      	ldrb	r0, [r0, #3]
    bb8e:	4770      	bx	lr
    bb90:	200002a1 	.word	0x200002a1
    bb94:	4000f000 	.word	0x4000f000
    bb98:	4000f400 	.word	0x4000f400

0000bb9c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    bb9c:	4901      	ldr	r1, [pc, #4]	; (bba4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    bb9e:	2001      	movs	r0, #1
    bba0:	6088      	str	r0, [r1, #8]
    bba2:	4770      	bx	lr
    bba4:	4000f000 	.word	0x4000f000

0000bba8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    bba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bbac:	2800      	cmp	r0, #0
    bbae:	d02e      	beq.n	bc0e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    bbb0:	4818      	ldr	r0, [pc, #96]	; (bc14 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    bbb2:	7800      	ldrb	r0, [r0, #0]
    bbb4:	b1b0      	cbz	r0, bbe4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    bbb6:	4d18      	ldr	r5, [pc, #96]	; (bc18 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    bbb8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    bbbc:	2800      	cmp	r0, #0
    bbbe:	d126      	bne.n	bc0e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    bbc0:	2702      	movs	r7, #2
    bbc2:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    bbc6:	4c15      	ldr	r4, [pc, #84]	; (bc1c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    bbc8:	6820      	ldr	r0, [r4, #0]
    bbca:	43c0      	mvns	r0, r0
    bbcc:	f340 1600 	sbfx	r6, r0, #4, #1
    bbd0:	6820      	ldr	r0, [r4, #0]
    bbd2:	f040 0010 	orr.w	r0, r0, #16
    bbd6:	6020      	str	r0, [r4, #0]
    bbd8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    bbdc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    bbe0:	1c76      	adds	r6, r6, #1
    bbe2:	e009      	b.n	bbf8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    bbe4:	f240 1153 	movw	r1, #339	; 0x153
    bbe8:	203c      	movs	r0, #60	; 0x3c
    bbea:	f7f8 fcbf 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbee:	bf00      	nop
    bbf0:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    bbf4:	f7f8 fb00 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bbf8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    bbfc:	2800      	cmp	r0, #0
    bbfe:	d0f7      	beq.n	bbf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    bc00:	b91e      	cbnz	r6, bc0a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    bc02:	6820      	ldr	r0, [r4, #0]
    bc04:	f020 0010 	bic.w	r0, r0, #16
    bc08:	6020      	str	r0, [r4, #0]
    bc0a:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    bc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc12:	0000      	.short	0x0000
    bc14:	200002a1 	.word	0x200002a1
    bc18:	4000f000 	.word	0x4000f000
    bc1c:	e000ed10 	.word	0xe000ed10
    bc20:	4902      	ldr	r1, [pc, #8]	; (bc2c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    bc22:	4801      	ldr	r0, [pc, #4]	; (bc28 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    bc24:	6008      	str	r0, [r1, #0]
    bc26:	4770      	bx	lr
    bc28:	02020000 	.word	0x02020000
    bc2c:	4001f508 	.word	0x4001f508

0000bc30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    bc30:	b510      	push	{r4, lr}
    bc32:	4604      	mov	r4, r0
    bc34:	f000 f822 	bl	bc7c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    bc38:	2c00      	cmp	r4, #0
    bc3a:	d017      	beq.n	bc6c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    bc3c:	4a0c      	ldr	r2, [pc, #48]	; (bc70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    bc3e:	480c      	ldr	r0, [pc, #48]	; (bc70 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    bc40:	490c      	ldr	r1, [pc, #48]	; (bc74 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    bc42:	3214      	adds	r2, #20
    bc44:	4b0c      	ldr	r3, [pc, #48]	; (bc78 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    bc46:	2c01      	cmp	r4, #1
    bc48:	d005      	beq.n	bc56 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    bc4a:	2c02      	cmp	r4, #2
    bc4c:	d008      	beq.n	bc60 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    bc4e:	2183      	movs	r1, #131	; 0x83
    bc50:	203d      	movs	r0, #61	; 0x3d
    bc52:	f7f8 fc8b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc56:	2402      	movs	r4, #2
    bc58:	6004      	str	r4, [r0, #0]
    bc5a:	6011      	str	r1, [r2, #0]
    bc5c:	0620      	lsls	r0, r4, #24
    bc5e:	e004      	b.n	bc6a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    bc60:	2403      	movs	r4, #3
    bc62:	6004      	str	r4, [r0, #0]
    bc64:	6011      	str	r1, [r2, #0]
    bc66:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bc6a:	6018      	str	r0, [r3, #0]
    bc6c:	bd10      	pop	{r4, pc}
    bc6e:	0000      	.short	0x0000
    bc70:	4000f500 	.word	0x4000f500
    bc74:	200014bf 	.word	0x200014bf
    bc78:	4001f504 	.word	0x4001f504
    bc7c:	4804      	ldr	r0, [pc, #16]	; (bc90 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    bc7e:	2100      	movs	r1, #0
    bc80:	6001      	str	r1, [r0, #0]
    bc82:	6001      	str	r1, [r0, #0]
    bc84:	4903      	ldr	r1, [pc, #12]	; (bc94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    bc86:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    bc8a:	6008      	str	r0, [r1, #0]
    bc8c:	4770      	bx	lr
    bc8e:	0000      	.short	0x0000
    bc90:	4000f500 	.word	0x4000f500
    bc94:	4001f508 	.word	0x4001f508

0000bc98 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    bc98:	4805      	ldr	r0, [pc, #20]	; (bcb0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    bc9a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bc9e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    bca2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bca6:	2100      	movs	r1, #0
    bca8:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    bcac:	4770      	bx	lr
    bcae:	0000      	.short	0x0000
    bcb0:	40001000 	.word	0x40001000

0000bcb4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    bcb4:	4904      	ldr	r1, [pc, #16]	; (bcc8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    bcb6:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    bcba:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    bcbe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    bcc2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    bcc6:	4770      	bx	lr
    bcc8:	40001000 	.word	0x40001000

0000bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcce:	4c23      	ldr	r4, [pc, #140]	; (bd5c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    bcd0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    bcd4:	f010 0f10 	tst.w	r0, #16
    bcd8:	d001      	beq.n	bcde <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    bcda:	2701      	movs	r7, #1
    bcdc:	e000      	b.n	bce0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    bcde:	2700      	movs	r7, #0
    bce0:	2010      	movs	r0, #16
    bce2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    bce6:	2002      	movs	r0, #2
    bce8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bcec:	481c      	ldr	r0, [pc, #112]	; (bd60 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    bcee:	2500      	movs	r5, #0
    bcf0:	491d      	ldr	r1, [pc, #116]	; (bd68 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    bcf2:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    bcf6:	481b      	ldr	r0, [pc, #108]	; (bd64 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    bcf8:	6008      	str	r0, [r1, #0]
    bcfa:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    bcfe:	f44f 7688 	mov.w	r6, #272	; 0x110
    bd02:	f010 0fff 	tst.w	r0, #255	; 0xff
    bd06:	d018      	beq.n	bd3a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    bd08:	20ff      	movs	r0, #255	; 0xff
    bd0a:	f88d 0000 	strb.w	r0, [sp]
    bd0e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bd12:	2001      	movs	r0, #1
    bd14:	6120      	str	r0, [r4, #16]
    bd16:	e004      	b.n	bd22 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    bd18:	f89d 0000 	ldrb.w	r0, [sp]
    bd1c:	1e40      	subs	r0, r0, #1
    bd1e:	f88d 0000 	strb.w	r0, [sp]
    bd22:	f89d 0000 	ldrb.w	r0, [sp]
    bd26:	b128      	cbz	r0, bd34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    bd28:	4631      	mov	r1, r6
    bd2a:	4620      	mov	r0, r4
    bd2c:	f004 fa83 	bl	10236 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bd30:	2800      	cmp	r0, #0
    bd32:	d0f1      	beq.n	bd18 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    bd34:	f89d 0000 	ldrb.w	r0, [sp]
    bd38:	b158      	cbz	r0, bd52 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    bd3a:	f000 fc91 	bl	c660 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bd3e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bd42:	f000 fe0d 	bl	c960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    bd46:	2f00      	cmp	r7, #0
    bd48:	d002      	beq.n	bd50 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    bd4a:	2010      	movs	r0, #16
    bd4c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd52:	f240 718f 	movw	r1, #1935	; 0x78f
    bd56:	203e      	movs	r0, #62	; 0x3e
    bd58:	f7f8 fc08 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd5c:	40001000 	.word	0x40001000
    bd60:	2000117c 	.word	0x2000117c
    bd64:	0c0e0000 	.word	0x0c0e0000
    bd68:	4001f508 	.word	0x4001f508

0000bd6c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    bd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd70:	4d20      	ldr	r5, [pc, #128]	; (bdf4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    bd72:	4607      	mov	r7, r0
    bd74:	4688      	mov	r8, r1
    bd76:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    bd7a:	07c1      	lsls	r1, r0, #31
    bd7c:	d018      	beq.n	bdb0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    bd7e:	4a1e      	ldr	r2, [pc, #120]	; (bdf8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    bd80:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    bd84:	6011      	str	r1, [r2, #0]
    bd86:	4c1d      	ldr	r4, [pc, #116]	; (bdfc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    bd88:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    bd8c:	f041 0101 	orr.w	r1, r1, #1
    bd90:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    bd94:	f040 0002 	orr.w	r0, r0, #2
    bd98:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bd9c:	4640      	mov	r0, r8
    bd9e:	f000 fe43 	bl	ca28 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    bda2:	f000 fbfb 	bl	c59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bda6:	2601      	movs	r6, #1
    bda8:	b13f      	cbz	r7, bdba <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    bdaa:	2f01      	cmp	r7, #1
    bdac:	d00e      	beq.n	bdcc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    bdae:	e016      	b.n	bdde <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    bdb0:	f240 611a 	movw	r1, #1562	; 0x61a
    bdb4:	203e      	movs	r0, #62	; 0x3e
    bdb6:	f7f8 fbd9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdba:	4640      	mov	r0, r8
    bdbc:	f000 fc1e 	bl	c5fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bdc0:	4640      	mov	r0, r8
    bdc2:	f000 fbcf 	bl	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bdc6:	726e      	strb	r6, [r5, #9]
    bdc8:	6026      	str	r6, [r4, #0]
    bdca:	e008      	b.n	bdde <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    bdcc:	f000 fc3e 	bl	c64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bdd0:	f000 fd8c 	bl	c8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bdd4:	2002      	movs	r0, #2
    bdd6:	7268      	strb	r0, [r5, #9]
    bdd8:	f000 fcb0 	bl	c73c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    bddc:	6066      	str	r6, [r4, #4]
    bdde:	4808      	ldr	r0, [pc, #32]	; (be00 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    bde0:	64c6      	str	r6, [r0, #76]	; 0x4c
    bde2:	4807      	ldr	r0, [pc, #28]	; (be00 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    bde4:	300c      	adds	r0, #12
    bde6:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    bdea:	4638      	mov	r0, r7
    bdec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bdf0:	f004 ba09 	b.w	10206 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    bdf4:	2000117c 	.word	0x2000117c
    bdf8:	4001f504 	.word	0x4001f504
    bdfc:	40001000 	.word	0x40001000
    be00:	40008000 	.word	0x40008000

0000be04 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    be04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be08:	4d35      	ldr	r5, [pc, #212]	; (bee0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    be0a:	4606      	mov	r6, r0
    be0c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    be10:	4689      	mov	r9, r1
    be12:	6028      	str	r0, [r5, #0]
    be14:	4c33      	ldr	r4, [pc, #204]	; (bee4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    be16:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    be1a:	f040 0002 	orr.w	r0, r0, #2
    be1e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    be22:	4608      	mov	r0, r1
    be24:	f000 fe00 	bl	ca28 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    be28:	f000 fbb8 	bl	c59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    be2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bee8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    be30:	2700      	movs	r7, #0
    be32:	b116      	cbz	r6, be3a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    be34:	2e01      	cmp	r6, #1
    be36:	d027      	beq.n	be88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    be38:	e03f      	b.n	beba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    be3a:	4648      	mov	r0, r9
    be3c:	f000 fbde 	bl	c5fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    be40:	79e0      	ldrb	r0, [r4, #7]
    be42:	2801      	cmp	r0, #1
    be44:	d105      	bne.n	be52 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    be46:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    be4a:	f041 0108 	orr.w	r1, r1, #8
    be4e:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    be52:	4648      	mov	r0, r9
    be54:	f000 fb86 	bl	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    be58:	2001      	movs	r0, #1
    be5a:	7260      	strb	r0, [r4, #9]
    be5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    be5e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    be62:	62a0      	str	r0, [r4, #40]	; 0x28
    be64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    be68:	6028      	str	r0, [r5, #0]
    be6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    be6e:	f1b9 0f02 	cmp.w	r9, #2
    be72:	d007      	beq.n	be84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    be74:	f640 0034 	movw	r0, #2100	; 0x834
    be78:	f649 72ec 	movw	r2, #40940	; 0x9fec
    be7c:	4410      	add	r0, r2
    be7e:	fbb0 f7f1 	udiv	r7, r0, r1
    be82:	e01a      	b.n	beba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    be84:	4608      	mov	r0, r1
    be86:	e7f7      	b.n	be78 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    be88:	f000 fbe0 	bl	c64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    be8c:	f000 fd2e 	bl	c8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    be90:	79e0      	ldrb	r0, [r4, #7]
    be92:	2801      	cmp	r0, #1
    be94:	d105      	bne.n	bea2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    be96:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    be9a:	f041 0104 	orr.w	r1, r1, #4
    be9e:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    bea2:	2002      	movs	r0, #2
    bea4:	7260      	strb	r0, [r4, #9]
    bea6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bea8:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    beac:	62a0      	str	r0, [r4, #40]	; 0x28
    beae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    beb2:	6028      	str	r0, [r5, #0]
    beb4:	2729      	movs	r7, #41	; 0x29
    beb6:	f000 fc41 	bl	c73c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    beba:	f000 fc2b 	bl	c714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    bebe:	f000 fded 	bl	ca9c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    bec2:	6800      	ldr	r0, [r0, #0]
    bec4:	2801      	cmp	r0, #1
    bec6:	d006      	beq.n	bed6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    bec8:	2100      	movs	r1, #0
    beca:	4630      	mov	r0, r6
    becc:	f004 f99b 	bl	10206 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    bed0:	4638      	mov	r0, r7
    bed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bed6:	f7ff fef9 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    beda:	2000      	movs	r0, #0
    bedc:	e7f9      	b.n	bed2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    bede:	0000      	.short	0x0000
    bee0:	4001f504 	.word	0x4001f504
    bee4:	2000117c 	.word	0x2000117c
    bee8:	40001000 	.word	0x40001000

0000beec <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    beec:	b510      	push	{r4, lr}
    beee:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    bef0:	4901      	ldr	r1, [pc, #4]	; (bef8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    bef2:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    bef6:	bd10      	pop	{r4, pc}
    bef8:	2000116c 	.word	0x2000116c

0000befc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    befc:	b570      	push	{r4, r5, r6, lr}
    befe:	4c11      	ldr	r4, [pc, #68]	; (bf44 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    bf00:	4606      	mov	r6, r0
    bf02:	2002      	movs	r0, #2
    bf04:	7320      	strb	r0, [r4, #12]
    bf06:	2596      	movs	r5, #150	; 0x96
    bf08:	f000 f85e 	bl	bfc8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bf0c:	4602      	mov	r2, r0
    bf0e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    bf12:	f894 1020 	ldrb.w	r1, [r4, #32]
    bf16:	2801      	cmp	r0, #1
    bf18:	d00f      	beq.n	bf3a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    bf1a:	4628      	mov	r0, r5
    bf1c:	f004 f995 	bl	1024a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    bf20:	6120      	str	r0, [r4, #16]
    bf22:	4809      	ldr	r0, [pc, #36]	; (bf48 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    bf24:	2100      	movs	r1, #0
    bf26:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bf2a:	6921      	ldr	r1, [r4, #16]
    bf2c:	69e0      	ldr	r0, [r4, #28]
    bf2e:	4408      	add	r0, r1
    bf30:	4905      	ldr	r1, [pc, #20]	; (bf48 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    bf32:	1d09      	adds	r1, r1, #4
    bf34:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bf38:	bd70      	pop	{r4, r5, r6, pc}
    bf3a:	4633      	mov	r3, r6
    bf3c:	4628      	mov	r0, r5
    bf3e:	f004 f9a0 	bl	10282 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    bf42:	e7ed      	b.n	bf20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    bf44:	2000117c 	.word	0x2000117c
    bf48:	40008000 	.word	0x40008000

0000bf4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    bf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf50:	2238      	movs	r2, #56	; 0x38
    bf52:	2100      	movs	r1, #0
    bf54:	4813      	ldr	r0, [pc, #76]	; (bfa4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    bf56:	f000 ff93 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bf5a:	f000 fd01 	bl	c960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    bf5e:	f000 fe98 	bl	cc92 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf62:	4d11      	ldr	r5, [pc, #68]	; (bfa8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf64:	4e10      	ldr	r6, [pc, #64]	; (bfa8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf66:	2400      	movs	r4, #0
    bf68:	4f0f      	ldr	r7, [pc, #60]	; (bfa8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bf6a:	3508      	adds	r5, #8
    bf6c:	3610      	adds	r6, #16
    bf6e:	b928      	cbnz	r0, bf7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bf70:	f000 fea6 	bl	ccc0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf74:	b910      	cbnz	r0, bf7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bf76:	f000 fead 	bl	ccd4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    bf7a:	b108      	cbz	r0, bf80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    bf7c:	2224      	movs	r2, #36	; 0x24
    bf7e:	e006      	b.n	bf8e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bf80:	f000 fee8 	bl	cd54 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bf84:	b910      	cbnz	r0, bf8c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    bf86:	f000 fedb 	bl	cd40 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    bf8a:	b140      	cbz	r0, bf9e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    bf8c:	2240      	movs	r2, #64	; 0x40
    bf8e:	21ff      	movs	r1, #255	; 0xff
    bf90:	4638      	mov	r0, r7
    bf92:	f000 ff75 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bf96:	602c      	str	r4, [r5, #0]
    bf98:	6034      	str	r4, [r6, #0]
    bf9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf9e:	2238      	movs	r2, #56	; 0x38
    bfa0:	e7f5      	b.n	bf8e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bfa2:	0000      	.short	0x0000
    bfa4:	2000117c 	.word	0x2000117c
    bfa8:	40000e00 	.word	0x40000e00

0000bfac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    bfac:	4805      	ldr	r0, [pc, #20]	; (bfc4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    bfae:	b510      	push	{r4, lr}
    bfb0:	69c0      	ldr	r0, [r0, #28]
    bfb2:	2800      	cmp	r0, #0
    bfb4:	d104      	bne.n	bfc0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    bfb6:	f240 11fb 	movw	r1, #507	; 0x1fb
    bfba:	203e      	movs	r0, #62	; 0x3e
    bfbc:	f7f8 fad6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfc0:	bd10      	pop	{r4, pc}
    bfc2:	0000      	.short	0x0000
    bfc4:	2000117c 	.word	0x2000117c

0000bfc8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    bfc8:	4814      	ldr	r0, [pc, #80]	; (c01c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    bfca:	b510      	push	{r4, lr}
    bfcc:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    bfd0:	7a40      	ldrb	r0, [r0, #9]
    bfd2:	b141      	cbz	r1, bfe6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    bfd4:	2902      	cmp	r1, #2
    bfd6:	d00b      	beq.n	bff0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    bfd8:	2802      	cmp	r0, #2
    bfda:	d009      	beq.n	bff0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    bfdc:	2901      	cmp	r1, #1
    bfde:	d00b      	beq.n	bff8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    bfe0:	2801      	cmp	r0, #1
    bfe2:	d009      	beq.n	bff8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    bfe4:	e016      	b.n	c014 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    bfe6:	2800      	cmp	r0, #0
    bfe8:	d1f6      	bne.n	bfd8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    bfea:	f240 117d 	movw	r1, #381	; 0x17d
    bfee:	e00e      	b.n	c00e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bff4:	f000 bc2a 	b.w	c84c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    bff8:	4809      	ldr	r0, [pc, #36]	; (c020 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    bffa:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    bffe:	f000 000f 	and.w	r0, r0, #15
    c002:	2803      	cmp	r0, #3
    c004:	d006      	beq.n	c014 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    c006:	2804      	cmp	r0, #4
    c008:	d006      	beq.n	c018 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    c00a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    c00e:	203e      	movs	r0, #62	; 0x3e
    c010:	f7f8 faac 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c014:	2001      	movs	r0, #1
    c016:	bd10      	pop	{r4, pc}
    c018:	2002      	movs	r0, #2
    c01a:	bd10      	pop	{r4, pc}
    c01c:	2000117c 	.word	0x2000117c
    c020:	40001000 	.word	0x40001000

0000c024 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c024:	b510      	push	{r4, lr}
    c026:	f000 fc7d 	bl	c924 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    c02a:	f7ff fe4f 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c02e:	f004 f880 	bl	10132 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    c032:	480f      	ldr	r0, [pc, #60]	; (c070 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    c034:	4a0f      	ldr	r2, [pc, #60]	; (c074 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    c036:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c038:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c03c:	6011      	str	r1, [r2, #0]
    c03e:	2400      	movs	r4, #0
    c040:	6284      	str	r4, [r0, #40]	; 0x28
    c042:	7304      	strb	r4, [r0, #12]
    c044:	61c4      	str	r4, [r0, #28]
    c046:	6184      	str	r4, [r0, #24]
    c048:	f000 fc6c 	bl	c924 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    c04c:	480a      	ldr	r0, [pc, #40]	; (c078 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    c04e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c052:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c056:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c05a:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c05e:	2001      	movs	r0, #1
    c060:	f004 f8a0 	bl	101a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c068:	2001      	movs	r0, #1
    c06a:	f004 b88e 	b.w	1018a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c06e:	0000      	.short	0x0000
    c070:	2000117c 	.word	0x2000117c
    c074:	4001f508 	.word	0x4001f508
    c078:	40008000 	.word	0x40008000

0000c07c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c07c:	b570      	push	{r4, r5, r6, lr}
    c07e:	2001      	movs	r0, #1
    c080:	f004 f890 	bl	101a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c084:	4c37      	ldr	r4, [pc, #220]	; (c164 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c086:	2000      	movs	r0, #0
    c088:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c08c:	2001      	movs	r0, #1
    c08e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c092:	f000 fe35 	bl	cd00 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c096:	4d34      	ldr	r5, [pc, #208]	; (c168 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c098:	b118      	cbz	r0, c0a2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c09a:	6828      	ldr	r0, [r5, #0]
    c09c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c0a0:	6028      	str	r0, [r5, #0]
    c0a2:	f000 fe21 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c0a6:	b128      	cbz	r0, c0b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c0a8:	6828      	ldr	r0, [r5, #0]
    c0aa:	4930      	ldr	r1, [pc, #192]	; (c16c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c0ac:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c0b0:	4308      	orrs	r0, r1
    c0b2:	6028      	str	r0, [r5, #0]
    c0b4:	f000 fe34 	bl	cd20 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c0b8:	b138      	cbz	r0, c0ca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    c0ba:	482b      	ldr	r0, [pc, #172]	; (c168 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c0bc:	1d00      	adds	r0, r0, #4
    c0be:	6801      	ldr	r1, [r0, #0]
    c0c0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c0c4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c0c8:	6001      	str	r1, [r0, #0]
    c0ca:	4927      	ldr	r1, [pc, #156]	; (c168 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c0cc:	4828      	ldr	r0, [pc, #160]	; (c170 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c0ce:	313c      	adds	r1, #60	; 0x3c
    c0d0:	6008      	str	r0, [r1, #0]
    c0d2:	f7f8 f8ff 	bl	42d4 <mpsl_fem_device_config_254_apply_get>
    c0d6:	b140      	cbz	r0, c0ea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c0d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0dc:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c0e0:	1c41      	adds	r1, r0, #1
    c0e2:	d002      	beq.n	c0ea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c0e4:	4920      	ldr	r1, [pc, #128]	; (c168 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c0e6:	3110      	adds	r1, #16
    c0e8:	6008      	str	r0, [r1, #0]
    c0ea:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c0ee:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c0f0:	1c41      	adds	r1, r0, #1
    c0f2:	d004      	beq.n	c0fe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    c0f4:	491f      	ldr	r1, [pc, #124]	; (c174 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c0f6:	680a      	ldr	r2, [r1, #0]
    c0f8:	f360 4217 	bfi	r2, r0, #16, #8
    c0fc:	600a      	str	r2, [r1, #0]
    c0fe:	f240 1103 	movw	r1, #259	; 0x103
    c102:	f240 605b 	movw	r0, #1627	; 0x65b
    c106:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    c10a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c10e:	2001      	movs	r0, #1
    c110:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    c114:	f000 fc88 	bl	ca28 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c118:	f240 1001 	movw	r0, #257	; 0x101
    c11c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    c120:	2002      	movs	r0, #2
    c122:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c126:	4915      	ldr	r1, [pc, #84]	; (c17c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c128:	4813      	ldr	r0, [pc, #76]	; (c178 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c12a:	6008      	str	r0, [r1, #0]
    c12c:	4914      	ldr	r1, [pc, #80]	; (c180 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c12e:	2000      	movs	r0, #0
    c130:	4d14      	ldr	r5, [pc, #80]	; (c184 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    c132:	8608      	strh	r0, [r1, #48]	; 0x30
    c134:	3110      	adds	r1, #16
    c136:	61c8      	str	r0, [r1, #28]
    c138:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    c13c:	7028      	strb	r0, [r5, #0]
    c13e:	2001      	movs	r0, #1
    c140:	f004 f823 	bl	1018a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c144:	2010      	movs	r0, #16
    c146:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c14a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c14e:	2002      	movs	r0, #2
    c150:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c154:	6868      	ldr	r0, [r5, #4]
    c156:	2800      	cmp	r0, #0
    c158:	d002      	beq.n	c160 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    c15a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c15e:	4700      	bx	r0
    c160:	bd70      	pop	{r4, r5, r6, pc}
    c162:	0000      	.short	0x0000
    c164:	40001000 	.word	0x40001000
    c168:	4000173c 	.word	0x4000173c
    c16c:	80000096 	.word	0x80000096
    c170:	8900002c 	.word	0x8900002c
    c174:	4000158c 	.word	0x4000158c
    c178:	0c0e0000 	.word	0x0c0e0000
    c17c:	4001f508 	.word	0x4001f508
    c180:	2000116c 	.word	0x2000116c
    c184:	20000264 	.word	0x20000264

0000c188 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c188:	4901      	ldr	r1, [pc, #4]	; (c190 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c18a:	7508      	strb	r0, [r1, #20]
    c18c:	4770      	bx	lr
    c18e:	0000      	.short	0x0000
    c190:	2000117c 	.word	0x2000117c

0000c194 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c194:	4905      	ldr	r1, [pc, #20]	; (c1ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c196:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c19a:	4805      	ldr	r0, [pc, #20]	; (c1b0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c19c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c1a0:	f041 0101 	orr.w	r1, r1, #1
    c1a4:	7001      	strb	r1, [r0, #0]
    c1a6:	f000 ba7b 	b.w	c6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    c1aa:	0000      	.short	0x0000
    c1ac:	40001000 	.word	0x40001000
    c1b0:	2000117c 	.word	0x2000117c

0000c1b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1b8:	4e36      	ldr	r6, [pc, #216]	; (c294 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    c1ba:	4607      	mov	r7, r0
    c1bc:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c1c0:	4689      	mov	r9, r1
    c1c2:	4614      	mov	r4, r2
    c1c4:	6030      	str	r0, [r6, #0]
    c1c6:	4610      	mov	r0, r2
    c1c8:	f000 fc2e 	bl	ca28 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c1cc:	f000 f9e6 	bl	c59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c1d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; c298 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    c1d4:	4d31      	ldr	r5, [pc, #196]	; (c29c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    c1d6:	f04f 0801 	mov.w	r8, #1
    c1da:	b127      	cbz	r7, c1e6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    c1dc:	2f01      	cmp	r7, #1
    c1de:	d01d      	beq.n	c21c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    c1e0:	f240 710f 	movw	r1, #1807	; 0x70f
    c1e4:	e04c      	b.n	c280 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    c1e6:	4620      	mov	r0, r4
    c1e8:	f000 fa08 	bl	c5fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c1ec:	4620      	mov	r0, r4
    c1ee:	f000 f9b9 	bl	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c1f2:	2c02      	cmp	r4, #2
    c1f4:	d00f      	beq.n	c216 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    c1f6:	f640 0034 	movw	r0, #2100	; 0x834
    c1fa:	bf00      	nop
    c1fc:	f649 51f8 	movw	r1, #40440	; 0x9df8
    c200:	4401      	add	r1, r0
    c202:	4648      	mov	r0, r9
    c204:	f000 fbb4 	bl	c970 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    c208:	4604      	mov	r4, r0
    c20a:	4650      	mov	r0, sl
    c20c:	f000 fb9c 	bl	c948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    c210:	f885 8009 	strb.w	r8, [r5, #9]
    c214:	e014      	b.n	c240 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    c216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c21a:	e7ef      	b.n	c1fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    c21c:	f000 fa16 	bl	c64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c220:	f000 fb64 	bl	c8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    c224:	f000 fa8a 	bl	c73c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    c228:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c22c:	4648      	mov	r0, r9
    c22e:	f000 fb9f 	bl	c970 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    c232:	4604      	mov	r4, r0
    c234:	4818      	ldr	r0, [pc, #96]	; (c298 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    c236:	1d00      	adds	r0, r0, #4
    c238:	f000 fb86 	bl	c948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    c23c:	2002      	movs	r0, #2
    c23e:	7268      	strb	r0, [r5, #9]
    c240:	f8df 905c 	ldr.w	r9, [pc, #92]	; c2a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    c244:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    c248:	4917      	ldr	r1, [pc, #92]	; (c2a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    c24a:	4816      	ldr	r0, [pc, #88]	; (c2a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    c24c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c250:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c252:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c256:	62a8      	str	r0, [r5, #40]	; 0x28
    c258:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    c25c:	6030      	str	r0, [r6, #0]
    c25e:	2010      	movs	r0, #16
    c260:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    c264:	03c0      	lsls	r0, r0, #15
    c266:	6030      	str	r0, [r6, #0]
    c268:	f000 fa54 	bl	c714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    c26c:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    c270:	480b      	ldr	r0, [pc, #44]	; (c2a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    c272:	300c      	adds	r0, #12
    c274:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c278:	42a0      	cmp	r0, r4
    c27a:	d304      	bcc.n	c286 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    c27c:	f240 7136 	movw	r1, #1846	; 0x736
    c280:	203e      	movs	r0, #62	; 0x3e
    c282:	f7f8 f973 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c286:	4621      	mov	r1, r4
    c288:	4638      	mov	r0, r7
    c28a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c28e:	f003 bfba 	b.w	10206 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c292:	0000      	.short	0x0000
    c294:	4001f504 	.word	0x4001f504
    c298:	40001000 	.word	0x40001000
    c29c:	2000117c 	.word	0x2000117c
    c2a0:	40008000 	.word	0x40008000
    c2a4:	40008140 	.word	0x40008140
    c2a8:	4001f098 	.word	0x4001f098

0000c2ac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c2ac:	4b0d      	ldr	r3, [pc, #52]	; (c2e4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c2ae:	b510      	push	{r4, lr}
    c2b0:	71d8      	strb	r0, [r3, #7]
    c2b2:	729a      	strb	r2, [r3, #10]
    c2b4:	b151      	cbz	r1, c2cc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c2b6:	2002      	movs	r0, #2
    c2b8:	7218      	strb	r0, [r3, #8]
    c2ba:	2801      	cmp	r0, #1
    c2bc:	d008      	beq.n	c2d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c2be:	2802      	cmp	r0, #2
    c2c0:	d00f      	beq.n	c2e2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c2c2:	f640 1112 	movw	r1, #2322	; 0x912
    c2c6:	203e      	movs	r0, #62	; 0x3e
    c2c8:	f7f8 f950 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2cc:	2001      	movs	r0, #1
    c2ce:	e7f3      	b.n	c2b8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c2d0:	7a58      	ldrb	r0, [r3, #9]
    c2d2:	2802      	cmp	r0, #2
    c2d4:	d105      	bne.n	c2e2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c2d6:	f000 f9b9 	bl	c64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2de:	f000 bb05 	b.w	c8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    c2e2:	bd10      	pop	{r4, pc}
    c2e4:	2000117c 	.word	0x2000117c

0000c2e8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c2e8:	4902      	ldr	r1, [pc, #8]	; (c2f4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c2ea:	2000      	movs	r0, #0
    c2ec:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c2f0:	4770      	bx	lr
    c2f2:	0000      	.short	0x0000
    c2f4:	40008000 	.word	0x40008000

0000c2f8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c2f8:	b538      	push	{r3, r4, r5, lr}
    c2fa:	4c0b      	ldr	r4, [pc, #44]	; (c328 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    c2fc:	4605      	mov	r5, r0
    c2fe:	f44f 718e 	mov.w	r1, #284	; 0x11c
    c302:	4620      	mov	r0, r4
    c304:	f003 ff97 	bl	10236 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c308:	2800      	cmp	r0, #0
    c30a:	d00c      	beq.n	c326 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    c30c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    c310:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c314:	4240      	negs	r0, r0
    c316:	7028      	strb	r0, [r5, #0]
    c318:	2000      	movs	r0, #0
    c31a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    c31e:	4803      	ldr	r0, [pc, #12]	; (c32c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    c320:	6800      	ldr	r0, [r0, #0]
    c322:	9000      	str	r0, [sp, #0]
    c324:	2001      	movs	r0, #1
    c326:	bd38      	pop	{r3, r4, r5, pc}
    c328:	40001000 	.word	0x40001000
    c32c:	4000111c 	.word	0x4000111c

0000c330 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c330:	4903      	ldr	r1, [pc, #12]	; (c340 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c332:	0e02      	lsrs	r2, r0, #24
    c334:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c338:	0200      	lsls	r0, r0, #8
    c33a:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c33e:	4770      	bx	lr
    c340:	40001000 	.word	0x40001000

0000c344 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c344:	6800      	ldr	r0, [r0, #0]
    c346:	4903      	ldr	r1, [pc, #12]	; (c354 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c348:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c34c:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c350:	4770      	bx	lr
    c352:	0000      	.short	0x0000
    c354:	40001000 	.word	0x40001000

0000c358 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    c358:	b510      	push	{r4, lr}
    c35a:	f000 fb41 	bl	c9e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    c35e:	4807      	ldr	r0, [pc, #28]	; (c37c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    c360:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c364:	b2c0      	uxtb	r0, r0
    c366:	2803      	cmp	r0, #3
    c368:	d001      	beq.n	c36e <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    c36a:	280b      	cmp	r0, #11
    c36c:	d104      	bne.n	c378 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    c36e:	f44f 7121 	mov.w	r1, #644	; 0x284
    c372:	203e      	movs	r0, #62	; 0x3e
    c374:	f7f8 f8fa 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c378:	bd10      	pop	{r4, pc}
    c37a:	0000      	.short	0x0000
    c37c:	40001000 	.word	0x40001000

0000c380 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c380:	4901      	ldr	r1, [pc, #4]	; (c388 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c382:	7548      	strb	r0, [r1, #21]
    c384:	4770      	bx	lr
    c386:	0000      	.short	0x0000
    c388:	2000117c 	.word	0x2000117c

0000c38c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c390:	4853      	ldr	r0, [pc, #332]	; (c4e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c392:	f04f 0a01 	mov.w	sl, #1
    c396:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c39a:	4851      	ldr	r0, [pc, #324]	; (c4e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c39c:	300c      	adds	r0, #12
    c39e:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c3a2:	4850      	ldr	r0, [pc, #320]	; (c4e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c3a4:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    c3a8:	4c4f      	ldr	r4, [pc, #316]	; (c4e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    c3aa:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    c3ae:	f000 f957 	bl	c660 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    c3b2:	494e      	ldr	r1, [pc, #312]	; (c4ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c3b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c3b6:	6008      	str	r0, [r1, #0]
    c3b8:	f8df 9134 	ldr.w	r9, [pc, #308]	; c4f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    c3bc:	2600      	movs	r6, #0
    c3be:	62a6      	str	r6, [r4, #40]	; 0x28
    c3c0:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    c3c4:	f240 121d 	movw	r2, #285	; 0x11d
    c3c8:	4391      	bics	r1, r2
    c3ca:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    c3ce:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    c3d2:	f000 f9c5 	bl	c760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    c3d6:	4605      	mov	r5, r0
    c3d8:	4841      	ldr	r0, [pc, #260]	; (c4e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c3da:	3008      	adds	r0, #8
    c3dc:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c3e0:	61e0      	str	r0, [r4, #28]
    c3e2:	f7ff fdf1 	bl	bfc8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    c3e6:	f884 0020 	strb.w	r0, [r4, #32]
    c3ea:	7a60      	ldrb	r0, [r4, #9]
    c3ec:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    c3f0:	61a6      	str	r6, [r4, #24]
    c3f2:	4e40      	ldr	r6, [pc, #256]	; (c4f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c3f4:	07a8      	lsls	r0, r5, #30
    c3f6:	d502      	bpl.n	c3fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    c3f8:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c3fc:	61a0      	str	r0, [r4, #24]
    c3fe:	0728      	lsls	r0, r5, #28
    c400:	d502      	bpl.n	c408 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    c402:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c406:	61a0      	str	r0, [r4, #24]
    c408:	f04f 0800 	mov.w	r8, #0
    c40c:	4639      	mov	r1, r7
    c40e:	4628      	mov	r0, r5
    c410:	f000 fa32 	bl	c878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    c414:	b918      	cbnz	r0, c41e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c416:	f8c9 a010 	str.w	sl, [r9, #16]
    c41a:	f04f 0801 	mov.w	r8, #1
    c41e:	4f32      	ldr	r7, [pc, #200]	; (c4e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    c420:	07e8      	lsls	r0, r5, #31
    c422:	f1a7 0710 	sub.w	r7, r7, #16
    c426:	d002      	beq.n	c42e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    c428:	6838      	ldr	r0, [r7, #0]
    c42a:	4780      	blx	r0
    c42c:	e031      	b.n	c492 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    c42e:	07a8      	lsls	r0, r5, #30
    c430:	d526      	bpl.n	c480 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    c432:	0768      	lsls	r0, r5, #29
    c434:	d41e      	bmi.n	c474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c436:	f000 fc73 	bl	cd20 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c43a:	b9d8      	cbnz	r0, c474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c43c:	f000 fc60 	bl	cd00 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c440:	b9c0      	cbnz	r0, c474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c442:	482d      	ldr	r0, [pc, #180]	; (c4f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    c444:	6800      	ldr	r0, [r0, #0]
    c446:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    c44a:	f3c0 6100 	ubfx	r1, r0, #24, #1
    c44e:	f000 030f 	and.w	r3, r0, #15
    c452:	f3c0 1203 	ubfx	r2, r0, #4, #4
    c456:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c45a:	b159      	cbz	r1, c474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c45c:	b10b      	cbz	r3, c462 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    c45e:	b102      	cbz	r2, c462 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    c460:	b940      	cbnz	r0, c474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c462:	4825      	ldr	r0, [pc, #148]	; (c4f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    c464:	1d00      	adds	r0, r0, #4
    c466:	6800      	ldr	r0, [r0, #0]
    c468:	b120      	cbz	r0, c474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c46a:	f1bc 0f03 	cmp.w	ip, #3
    c46e:	d201      	bcs.n	c474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c470:	f045 0504 	orr.w	r5, r5, #4
    c474:	f345 0080 	sbfx	r0, r5, #2, #1
    c478:	4641      	mov	r1, r8
    c47a:	1c40      	adds	r0, r0, #1
    c47c:	687a      	ldr	r2, [r7, #4]
    c47e:	e007      	b.n	c490 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    c480:	f015 0f28 	tst.w	r5, #40	; 0x28
    c484:	d005      	beq.n	c492 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    c486:	f345 1140 	sbfx	r1, r5, #5, #1
    c48a:	68ba      	ldr	r2, [r7, #8]
    c48c:	4640      	mov	r0, r8
    c48e:	1c49      	adds	r1, r1, #1
    c490:	4790      	blx	r2
    c492:	06e8      	lsls	r0, r5, #27
    c494:	d501      	bpl.n	c49a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    c496:	68f8      	ldr	r0, [r7, #12]
    c498:	4780      	blx	r0
    c49a:	7a60      	ldrb	r0, [r4, #9]
    c49c:	2802      	cmp	r0, #2
    c49e:	d11c      	bne.n	c4da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    c4a0:	7b20      	ldrb	r0, [r4, #12]
    c4a2:	2800      	cmp	r0, #0
    c4a4:	d019      	beq.n	c4da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    c4a6:	2802      	cmp	r0, #2
    c4a8:	d004      	beq.n	c4b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    c4aa:	2801      	cmp	r0, #1
    c4ac:	d006      	beq.n	c4bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    c4ae:	f640 21e1 	movw	r1, #2785	; 0xae1
    c4b2:	e009      	b.n	c4c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    c4b4:	6921      	ldr	r1, [r4, #16]
    c4b6:	69e0      	ldr	r0, [r4, #28]
    c4b8:	4408      	add	r0, r1
    c4ba:	e008      	b.n	c4ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    c4bc:	69e1      	ldr	r1, [r4, #28]
    c4be:	6920      	ldr	r0, [r4, #16]
    c4c0:	4288      	cmp	r0, r1
    c4c2:	d804      	bhi.n	c4ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    c4c4:	f640 21e2 	movw	r1, #2786	; 0xae2
    c4c8:	203e      	movs	r0, #62	; 0x3e
    c4ca:	f7f8 f84f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4ce:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c4d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4d6:	f000 ba17 	b.w	c908 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    c4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4de:	0000      	.short	0x0000
    c4e0:	40008000 	.word	0x40008000
    c4e4:	4000b000 	.word	0x4000b000
    c4e8:	2000117c 	.word	0x2000117c
    c4ec:	4001f508 	.word	0x4001f508
    c4f0:	40001000 	.word	0x40001000
    c4f4:	40008004 	.word	0x40008004
    c4f8:	40001450 	.word	0x40001450

0000c4fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c4fc:	b570      	push	{r4, r5, r6, lr}
    c4fe:	4b15      	ldr	r3, [pc, #84]	; (c554 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    c500:	888c      	ldrh	r4, [r1, #4]
    c502:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c506:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c50a:	780c      	ldrb	r4, [r1, #0]
    c50c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c510:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c514:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c518:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    c51c:	2101      	movs	r1, #1
    c51e:	4081      	lsls	r1, r0
    c520:	430c      	orrs	r4, r1
    c522:	b2e4      	uxtb	r4, r4
    c524:	b132      	cbz	r2, c534 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    c526:	2a01      	cmp	r2, #1
    c528:	d00a      	beq.n	c540 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    c52a:	f240 41ac 	movw	r1, #1196	; 0x4ac
    c52e:	203e      	movs	r0, #62	; 0x3e
    c530:	f7f8 f81c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c534:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c538:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c53c:	4388      	bics	r0, r1
    c53e:	e004      	b.n	c54a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    c540:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c544:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    c548:	b2c0      	uxtb	r0, r0
    c54a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    c54e:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c552:	bd70      	pop	{r4, r5, r6, pc}
    c554:	40001000 	.word	0x40001000

0000c558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c558:	4901      	ldr	r1, [pc, #4]	; (c560 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c55a:	2001      	movs	r0, #1
    c55c:	7008      	strb	r0, [r1, #0]
    c55e:	4770      	bx	lr
    c560:	20000264 	.word	0x20000264
    c564:	b510      	push	{r4, lr}
    c566:	4604      	mov	r4, r0
    c568:	f000 fbda 	bl	cd20 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c56c:	2800      	cmp	r0, #0
    c56e:	d00e      	beq.n	c58e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    c570:	4a09      	ldr	r2, [pc, #36]	; (c598 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c572:	6811      	ldr	r1, [r2, #0]
    c574:	0650      	lsls	r0, r2, #25
    c576:	2c02      	cmp	r4, #2
    c578:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c57c:	d008      	beq.n	c590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    c57e:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c582:	bf00      	nop
    c584:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c588:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c58c:	6010      	str	r0, [r2, #0]
    c58e:	bd10      	pop	{r4, pc}
    c590:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c594:	e7f6      	b.n	c584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c596:	0000      	.short	0x0000
    c598:	40001588 	.word	0x40001588
    c59c:	4815      	ldr	r0, [pc, #84]	; (c5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    c59e:	7d41      	ldrb	r1, [r0, #21]
    c5a0:	2925      	cmp	r1, #37	; 0x25
    c5a2:	d00a      	beq.n	c5ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    c5a4:	2926      	cmp	r1, #38	; 0x26
    c5a6:	d00b      	beq.n	c5c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c5a8:	2927      	cmp	r1, #39	; 0x27
    c5aa:	d00c      	beq.n	c5c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    c5ac:	7d40      	ldrb	r0, [r0, #21]
    c5ae:	0040      	lsls	r0, r0, #1
    c5b0:	290a      	cmp	r1, #10
    c5b2:	d80b      	bhi.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    c5b4:	f600 1064 	addw	r0, r0, #2404	; 0x964
    c5b8:	e00a      	b.n	c5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    c5ba:	f640 1062 	movw	r0, #2402	; 0x962
    c5be:	e00f      	b.n	c5e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c5c0:	f640 107a 	movw	r0, #2426	; 0x97a
    c5c4:	e00c      	b.n	c5e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c5c6:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    c5ca:	e009      	b.n	c5e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c5cc:	f600 1066 	addw	r0, r0, #2406	; 0x966
    c5d0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c5d4:	d204      	bcs.n	c5e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c5d6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c5da:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c5de:	e001      	b.n	c5e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    c5e0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c5e4:	4a04      	ldr	r2, [pc, #16]	; (c5f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    c5e6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c5ea:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c5ee:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c5f2:	4770      	bx	lr
    c5f4:	2000117c 	.word	0x2000117c
    c5f8:	40001000 	.word	0x40001000
    c5fc:	4912      	ldr	r1, [pc, #72]	; (c648 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c5fe:	b508      	push	{r3, lr}
    c600:	f991 2014 	ldrsb.w	r2, [r1, #20]
    c604:	7d49      	ldrb	r1, [r1, #21]
    c606:	2801      	cmp	r0, #1
    c608:	d00a      	beq.n	c620 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    c60a:	2802      	cmp	r0, #2
    c60c:	d00a      	beq.n	c624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c60e:	2804      	cmp	r0, #4
    c610:	d00a      	beq.n	c628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    c612:	2808      	cmp	r0, #8
    c614:	d00a      	beq.n	c62c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c616:	f240 31ed 	movw	r1, #1005	; 0x3ed
    c61a:	2006      	movs	r0, #6
    c61c:	f7f7 ffa6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c620:	2000      	movs	r0, #0
    c622:	e004      	b.n	c62e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c624:	2001      	movs	r0, #1
    c626:	e002      	b.n	c62e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c628:	2003      	movs	r0, #3
    c62a:	e000      	b.n	c62e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c62c:	2002      	movs	r0, #2
    c62e:	466b      	mov	r3, sp
    c630:	f7f4 fad6 	bl	be0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    c634:	b118      	cbz	r0, c63e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    c636:	f240 41de 	movw	r1, #1246	; 0x4de
    c63a:	203e      	movs	r0, #62	; 0x3e
    c63c:	e7ee      	b.n	c61c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    c63e:	f99d 0000 	ldrsb.w	r0, [sp]
    c642:	f000 f9eb 	bl	ca1c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c646:	bd08      	pop	{r3, pc}
    c648:	2000117c 	.word	0x2000117c
    c64c:	4803      	ldr	r0, [pc, #12]	; (c65c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    c64e:	7a01      	ldrb	r1, [r0, #8]
    c650:	2901      	cmp	r1, #1
    c652:	d102      	bne.n	c65a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    c654:	7a80      	ldrb	r0, [r0, #10]
    c656:	f7ff bfd1 	b.w	c5fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c65a:	4770      	bx	lr
    c65c:	2000117c 	.word	0x2000117c
    c660:	4805      	ldr	r0, [pc, #20]	; (c678 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    c662:	7a40      	ldrb	r0, [r0, #9]
    c664:	2801      	cmp	r0, #1
    c666:	d003      	beq.n	c670 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    c668:	2802      	cmp	r0, #2
    c66a:	d103      	bne.n	c674 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    c66c:	f003 bd49 	b.w	10102 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    c670:	f003 bd53 	b.w	1011a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    c674:	4770      	bx	lr
    c676:	0000      	.short	0x0000
    c678:	2000117c 	.word	0x2000117c
    c67c:	4807      	ldr	r0, [pc, #28]	; (c69c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    c67e:	2100      	movs	r1, #0
    c680:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c684:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c688:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c68c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c690:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c694:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c698:	4770      	bx	lr
    c69a:	0000      	.short	0x0000
    c69c:	40001000 	.word	0x40001000
    c6a0:	4818      	ldr	r0, [pc, #96]	; (c704 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    c6a2:	b510      	push	{r4, lr}
    c6a4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c6a8:	07c1      	lsls	r1, r0, #31
    c6aa:	d029      	beq.n	c700 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c6ac:	0781      	lsls	r1, r0, #30
    c6ae:	d514      	bpl.n	c6da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    c6b0:	4815      	ldr	r0, [pc, #84]	; (c708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c6b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c6b6:	f041 0101 	orr.w	r1, r1, #1
    c6ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c6be:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c6c2:	b2c0      	uxtb	r0, r0
    c6c4:	280b      	cmp	r0, #11
    c6c6:	d005      	beq.n	c6d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c6c8:	280a      	cmp	r0, #10
    c6ca:	d003      	beq.n	c6d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c6cc:	2803      	cmp	r0, #3
    c6ce:	d001      	beq.n	c6d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c6d0:	2802      	cmp	r0, #2
    c6d2:	d115      	bne.n	c700 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c6d4:	f240 510f 	movw	r1, #1295	; 0x50f
    c6d8:	e00f      	b.n	c6fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    c6da:	0740      	lsls	r0, r0, #29
    c6dc:	d510      	bpl.n	c700 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c6de:	480a      	ldr	r0, [pc, #40]	; (c708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c6e0:	490a      	ldr	r1, [pc, #40]	; (c70c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    c6e2:	3008      	adds	r0, #8
    c6e4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c6e8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c6ec:	4808      	ldr	r0, [pc, #32]	; (c710 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    c6ee:	f003 fda7 	bl	10240 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c6f2:	2800      	cmp	r0, #0
    c6f4:	d004      	beq.n	c700 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c6f6:	f240 5117 	movw	r1, #1303	; 0x517
    c6fa:	203e      	movs	r0, #62	; 0x3e
    c6fc:	f7f7 ff36 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c700:	bd10      	pop	{r4, pc}
    c702:	0000      	.short	0x0000
    c704:	2000117c 	.word	0x2000117c
    c708:	40001000 	.word	0x40001000
    c70c:	4001f098 	.word	0x4001f098
    c710:	40008000 	.word	0x40008000
    c714:	4808      	ldr	r0, [pc, #32]	; (c738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    c716:	4601      	mov	r1, r0
    c718:	79c2      	ldrb	r2, [r0, #7]
    c71a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c71e:	b112      	cbz	r2, c726 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    c720:	2a01      	cmp	r2, #1
    c722:	d003      	beq.n	c72c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    c724:	e006      	b.n	c734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    c726:	f041 0102 	orr.w	r1, r1, #2
    c72a:	e001      	b.n	c730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    c72c:	f041 0104 	orr.w	r1, r1, #4
    c730:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c734:	f7ff bfb4 	b.w	c6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    c738:	2000117c 	.word	0x2000117c
    c73c:	b510      	push	{r4, lr}
    c73e:	f000 faef 	bl	cd20 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c742:	2800      	cmp	r0, #0
    c744:	d108      	bne.n	c758 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c746:	f000 fadb 	bl	cd00 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c74a:	2800      	cmp	r0, #0
    c74c:	d104      	bne.n	c758 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c74e:	4803      	ldr	r0, [pc, #12]	; (c75c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    c750:	6801      	ldr	r1, [r0, #0]
    c752:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c756:	6001      	str	r1, [r0, #0]
    c758:	bd10      	pop	{r4, pc}
    c75a:	0000      	.short	0x0000
    c75c:	40001568 	.word	0x40001568
    c760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c764:	4d35      	ldr	r5, [pc, #212]	; (c83c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    c766:	2400      	movs	r4, #0
    c768:	7b28      	ldrb	r0, [r5, #12]
    c76a:	b138      	cbz	r0, c77c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c76c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c770:	4833      	ldr	r0, [pc, #204]	; (c840 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    c772:	f003 fd65 	bl	10240 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c776:	b108      	cbz	r0, c77c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c778:	2601      	movs	r6, #1
    c77a:	e000      	b.n	c77e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c77c:	2600      	movs	r6, #0
    c77e:	7a68      	ldrb	r0, [r5, #9]
    c780:	4f30      	ldr	r7, [pc, #192]	; (c844 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    c782:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c786:	2801      	cmp	r0, #1
    c788:	d002      	beq.n	c790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    c78a:	2802      	cmp	r0, #2
    c78c:	d008      	beq.n	c7a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c78e:	e018      	b.n	c7c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c790:	4638      	mov	r0, r7
    c792:	f003 fd50 	bl	10236 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c796:	b108      	cbz	r0, c79c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    c798:	2408      	movs	r4, #8
    c79a:	e012      	b.n	c7c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c79c:	2400      	movs	r4, #0
    c79e:	e010      	b.n	c7c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c7a0:	4638      	mov	r0, r7
    c7a2:	f003 fd48 	bl	10236 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c7a6:	b100      	cbz	r0, c7aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    c7a8:	2002      	movs	r0, #2
    c7aa:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c7ae:	43c9      	mvns	r1, r1
    c7b0:	f341 0100 	sbfx	r1, r1, #0, #1
    c7b4:	1c49      	adds	r1, r1, #1
    c7b6:	d001      	beq.n	c7bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    c7b8:	2400      	movs	r4, #0
    c7ba:	e000      	b.n	c7be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    c7bc:	2404      	movs	r4, #4
    c7be:	4304      	orrs	r4, r0
    c7c0:	4334      	orrs	r4, r6
    c7c2:	f014 0f0b 	tst.w	r4, #11
    c7c6:	d107      	bne.n	c7d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    c7c8:	f44f 7188 	mov.w	r1, #272	; 0x110
    c7cc:	4638      	mov	r0, r7
    c7ce:	f003 fd32 	bl	10236 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c7d2:	b100      	cbz	r0, c7d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    c7d4:	2010      	movs	r0, #16
    c7d6:	4304      	orrs	r4, r0
    c7d8:	481b      	ldr	r0, [pc, #108]	; (c848 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c7da:	7800      	ldrb	r0, [r0, #0]
    c7dc:	b1f8      	cbz	r0, c81e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c7de:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c7e2:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c7e6:	d007      	beq.n	c7f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c7e8:	f44f 718a 	mov.w	r1, #276	; 0x114
    c7ec:	4638      	mov	r0, r7
    c7ee:	f003 fd22 	bl	10236 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c7f2:	b108      	cbz	r0, c7f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c7f4:	2001      	movs	r0, #1
    c7f6:	e000      	b.n	c7fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c7f8:	2000      	movs	r0, #0
    c7fa:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c7fe:	b13e      	cbz	r6, c810 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c800:	f44f 718c 	mov.w	r1, #280	; 0x118
    c804:	4638      	mov	r0, r7
    c806:	f003 fd16 	bl	10236 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c80a:	b108      	cbz	r0, c810 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c80c:	2001      	movs	r0, #1
    c80e:	e000      	b.n	c812 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    c810:	2000      	movs	r0, #0
    c812:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c816:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c81a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c81e:	f7ff ff2d 	bl	c67c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    c822:	06e0      	lsls	r0, r4, #27
    c824:	d506      	bpl.n	c834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c826:	0720      	lsls	r0, r4, #28
    c828:	d404      	bmi.n	c834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c82a:	7a68      	ldrb	r0, [r5, #9]
    c82c:	2801      	cmp	r0, #1
    c82e:	d101      	bne.n	c834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c830:	f044 0420 	orr.w	r4, r4, #32
    c834:	4620      	mov	r0, r4
    c836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c83a:	0000      	.short	0x0000
    c83c:	2000117c 	.word	0x2000117c
    c840:	40008000 	.word	0x40008000
    c844:	40001000 	.word	0x40001000
    c848:	20000264 	.word	0x20000264
    c84c:	4809      	ldr	r0, [pc, #36]	; (c874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    c84e:	b510      	push	{r4, lr}
    c850:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c854:	f000 000f 	and.w	r0, r0, #15
    c858:	2803      	cmp	r0, #3
    c85a:	d006      	beq.n	c86a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    c85c:	2804      	cmp	r0, #4
    c85e:	d006      	beq.n	c86e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    c860:	f240 11dd 	movw	r1, #477	; 0x1dd
    c864:	203e      	movs	r0, #62	; 0x3e
    c866:	f7f7 fe81 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c86a:	2001      	movs	r0, #1
    c86c:	bd10      	pop	{r4, pc}
    c86e:	2002      	movs	r0, #2
    c870:	bd10      	pop	{r4, pc}
    c872:	0000      	.short	0x0000
    c874:	40001000 	.word	0x40001000
    c878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c87c:	4c19      	ldr	r4, [pc, #100]	; (c8e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c87e:	460d      	mov	r5, r1
    c880:	7a21      	ldrb	r1, [r4, #8]
    c882:	b129      	cbz	r1, c890 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    c884:	f010 0f11 	tst.w	r0, #17
    c888:	d00b      	beq.n	c8a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c88a:	f7ff fa1f 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c88e:	e027      	b.n	c8e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c890:	4915      	ldr	r1, [pc, #84]	; (c8e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    c892:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c896:	6008      	str	r0, [r1, #0]
    c898:	f000 f862 	bl	c960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c89c:	2000      	movs	r0, #0
    c89e:	7320      	strb	r0, [r4, #12]
    c8a0:	e01e      	b.n	c8e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c8a2:	2901      	cmp	r1, #1
    c8a4:	d001      	beq.n	c8aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    c8a6:	2601      	movs	r6, #1
    c8a8:	e000      	b.n	c8ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c8aa:	2600      	movs	r6, #0
    c8ac:	79e0      	ldrb	r0, [r4, #7]
    c8ae:	2801      	cmp	r0, #1
    c8b0:	d00e      	beq.n	c8d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c8b2:	2700      	movs	r7, #0
    c8b4:	f000 f854 	bl	c960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c8b8:	2196      	movs	r1, #150	; 0x96
    c8ba:	4630      	mov	r0, r6
    c8bc:	f000 f866 	bl	c98c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c8c0:	4601      	mov	r1, r0
    c8c2:	b14f      	cbz	r7, c8d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c8c4:	353b      	adds	r5, #59	; 0x3b
    c8c6:	428d      	cmp	r5, r1
    c8c8:	d904      	bls.n	c8d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    c8ca:	2000      	movs	r0, #0
    c8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8d0:	2701      	movs	r7, #1
    c8d2:	e7ef      	b.n	c8b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c8d4:	2001      	movs	r0, #1
    c8d6:	71e0      	strb	r0, [r4, #7]
    c8d8:	7aa2      	ldrb	r2, [r4, #10]
    c8da:	4630      	mov	r0, r6
    c8dc:	f7ff fc6a 	bl	c1b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c8e0:	2001      	movs	r0, #1
    c8e2:	e7f3      	b.n	c8cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c8e4:	2000117c 	.word	0x2000117c
    c8e8:	4001f508 	.word	0x4001f508
    c8ec:	4805      	ldr	r0, [pc, #20]	; (c904 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    c8ee:	2100      	movs	r1, #0
    c8f0:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c8f4:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c8f8:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c8fc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c900:	4770      	bx	lr
    c902:	0000      	.short	0x0000
    c904:	40001000 	.word	0x40001000
    c908:	4804      	ldr	r0, [pc, #16]	; (c91c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c90a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c90c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c910:	6281      	str	r1, [r0, #40]	; 0x28
    c912:	4903      	ldr	r1, [pc, #12]	; (c920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    c914:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c918:	6008      	str	r0, [r1, #0]
    c91a:	4770      	bx	lr
    c91c:	2000117c 	.word	0x2000117c
    c920:	4001f504 	.word	0x4001f504
    c924:	4a07      	ldr	r2, [pc, #28]	; (c944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c926:	2000      	movs	r0, #0
    c928:	3208      	adds	r2, #8
    c92a:	4906      	ldr	r1, [pc, #24]	; (c944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c92c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c930:	1d0a      	adds	r2, r1, #4
    c932:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c936:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c93a:	4902      	ldr	r1, [pc, #8]	; (c944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c93c:	310c      	adds	r1, #12
    c93e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c942:	4770      	bx	lr
    c944:	40008000 	.word	0x40008000
    c948:	4903      	ldr	r1, [pc, #12]	; (c958 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    c94a:	79c9      	ldrb	r1, [r1, #7]
    c94c:	2900      	cmp	r1, #0
    c94e:	d102      	bne.n	c956 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    c950:	4902      	ldr	r1, [pc, #8]	; (c95c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    c952:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c956:	4770      	bx	lr
    c958:	2000117c 	.word	0x2000117c
    c95c:	4001f098 	.word	0x4001f098
    c960:	4802      	ldr	r0, [pc, #8]	; (c96c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    c962:	2100      	movs	r1, #0
    c964:	71c1      	strb	r1, [r0, #7]
    c966:	7201      	strb	r1, [r0, #8]
    c968:	7241      	strb	r1, [r0, #9]
    c96a:	4770      	bx	lr
    c96c:	2000117c 	.word	0x2000117c
    c970:	4a05      	ldr	r2, [pc, #20]	; (c988 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    c972:	79d2      	ldrb	r2, [r2, #7]
    c974:	2a01      	cmp	r2, #1
    c976:	d006      	beq.n	c986 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    c978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c97c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c980:	fbb1 f1f2 	udiv	r1, r1, r2
    c984:	1a40      	subs	r0, r0, r1
    c986:	4770      	bx	lr
    c988:	2000117c 	.word	0x2000117c
    c98c:	b570      	push	{r4, r5, r6, lr}
    c98e:	4c13      	ldr	r4, [pc, #76]	; (c9dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    c990:	4603      	mov	r3, r0
    c992:	460d      	mov	r5, r1
    c994:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c998:	2000      	movs	r0, #0
    c99a:	b15a      	cbz	r2, c9b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c99c:	4621      	mov	r1, r4
    c99e:	f891 1020 	ldrb.w	r1, [r1, #32]
    c9a2:	b163      	cbz	r3, c9be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    c9a4:	2b01      	cmp	r3, #1
    c9a6:	d111      	bne.n	c9cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    c9a8:	2a01      	cmp	r2, #1
    c9aa:	4628      	mov	r0, r5
    c9ac:	d012      	beq.n	c9d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    c9ae:	f003 fc8c 	bl	102ca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c9b2:	e009      	b.n	c9c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c9b4:	f240 7152 	movw	r1, #1874	; 0x752
    c9b8:	203e      	movs	r0, #62	; 0x3e
    c9ba:	f7f7 fdd7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9be:	2a01      	cmp	r2, #1
    c9c0:	4628      	mov	r0, r5
    c9c2:	d004      	beq.n	c9ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c9c4:	f003 fc8f 	bl	102e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c9c8:	69e1      	ldr	r1, [r4, #28]
    c9ca:	4408      	add	r0, r1
    c9cc:	bd70      	pop	{r4, r5, r6, pc}
    c9ce:	f003 fca4 	bl	1031a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c9d2:	e7f9      	b.n	c9c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c9d4:	f003 fc92 	bl	102fc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c9d8:	e7f6      	b.n	c9c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c9da:	0000      	.short	0x0000
    c9dc:	2000117c 	.word	0x2000117c
    c9e0:	b510      	push	{r4, lr}
    c9e2:	2200      	movs	r2, #0
    c9e4:	2901      	cmp	r1, #1
    c9e6:	d008      	beq.n	c9fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    c9e8:	2902      	cmp	r1, #2
    c9ea:	d004      	beq.n	c9f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    c9ec:	f240 2163 	movw	r1, #611	; 0x263
    c9f0:	203e      	movs	r0, #62	; 0x3e
    c9f2:	f7f7 fdbb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c9f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c9fa:	4905      	ldr	r1, [pc, #20]	; (ca10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    c9fc:	430a      	orrs	r2, r1
    c9fe:	4905      	ldr	r1, [pc, #20]	; (ca14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    ca00:	600a      	str	r2, [r1, #0]
    ca02:	4905      	ldr	r1, [pc, #20]	; (ca18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    ca04:	4308      	orrs	r0, r1
    ca06:	4903      	ldr	r1, [pc, #12]	; (ca14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    ca08:	1d09      	adds	r1, r1, #4
    ca0a:	6008      	str	r0, [r1, #0]
    ca0c:	bd10      	pop	{r4, pc}
    ca0e:	0000      	.short	0x0000
    ca10:	00100108 	.word	0x00100108
    ca14:	40001514 	.word	0x40001514
    ca18:	02030000 	.word	0x02030000

0000ca1c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    ca1c:	4901      	ldr	r1, [pc, #4]	; (ca24 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    ca1e:	b2c0      	uxtb	r0, r0
    ca20:	6008      	str	r0, [r1, #0]
    ca22:	4770      	bx	lr
    ca24:	4000150c 	.word	0x4000150c

0000ca28 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    ca28:	b510      	push	{r4, lr}
    ca2a:	4907      	ldr	r1, [pc, #28]	; (ca48 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    ca2c:	2801      	cmp	r0, #1
    ca2e:	d005      	beq.n	ca3c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    ca30:	2802      	cmp	r0, #2
    ca32:	d005      	beq.n	ca40 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    ca34:	218b      	movs	r1, #139	; 0x8b
    ca36:	203f      	movs	r0, #63	; 0x3f
    ca38:	f7f7 fd98 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca3c:	2003      	movs	r0, #3
    ca3e:	e000      	b.n	ca42 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    ca40:	2004      	movs	r0, #4
    ca42:	6008      	str	r0, [r1, #0]
    ca44:	bd10      	pop	{r4, pc}
    ca46:	0000      	.short	0x0000
    ca48:	40001510 	.word	0x40001510

0000ca4c <strcmp>:
    ca4c:	f810 2b01 	ldrb.w	r2, [r0], #1
    ca50:	f811 3b01 	ldrb.w	r3, [r1], #1
    ca54:	2a01      	cmp	r2, #1
    ca56:	bf28      	it	cs
    ca58:	429a      	cmpcs	r2, r3
    ca5a:	d0f7      	beq.n	ca4c <strcmp>
    ca5c:	1ad0      	subs	r0, r2, r3
    ca5e:	4770      	bx	lr

0000ca60 <strlen>:
    ca60:	4603      	mov	r3, r0
    ca62:	f813 2b01 	ldrb.w	r2, [r3], #1
    ca66:	2a00      	cmp	r2, #0
    ca68:	d1fb      	bne.n	ca62 <strlen+0x2>
    ca6a:	1a18      	subs	r0, r3, r0
    ca6c:	3801      	subs	r0, #1
    ca6e:	4770      	bx	lr

0000ca70 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    ca70:	4770      	bx	lr
    ca72:	2100      	movs	r1, #0
    ca74:	7081      	strb	r1, [r0, #2]
    ca76:	7001      	strb	r1, [r0, #0]
    ca78:	7041      	strb	r1, [r0, #1]
    ca7a:	4770      	bx	lr

0000ca7c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    ca7c:	b570      	push	{r4, r5, r6, lr}
    ca7e:	f7f4 f8c9 	bl	c14 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ca82:	4605      	mov	r5, r0
    ca84:	2400      	movs	r4, #0
    ca86:	e006      	b.n	ca96 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    ca88:	4620      	mov	r0, r4
    ca8a:	f7f4 f8c9 	bl	c20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ca8e:	f7ff fff0 	bl	ca72 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    ca92:	1c64      	adds	r4, r4, #1
    ca94:	b2e4      	uxtb	r4, r4
    ca96:	42ac      	cmp	r4, r5
    ca98:	d3f6      	bcc.n	ca88 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    ca9a:	bd70      	pop	{r4, r5, r6, pc}

0000ca9c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    ca9c:	2000      	movs	r0, #0
    ca9e:	f7f6 bec9 	b.w	3834 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000caa2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    caa2:	b510      	push	{r4, lr}
    caa4:	f7f6 fb9c 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    caa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    caac:	f000 b800 	b.w	cab0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000cab0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    cab0:	0a41      	lsrs	r1, r0, #9
    cab2:	f643 5209 	movw	r2, #15625	; 0x3d09
    cab6:	4351      	muls	r1, r2
    cab8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    cabc:	fb10 f002 	smulbb	r0, r0, r2
    cac0:	f500 7080 	add.w	r0, r0, #256	; 0x100
    cac4:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    cac8:	4770      	bx	lr

0000caca <MPSL_IRQ_RADIO_Handler>:
    caca:	f7f5 b9b1 	b.w	1e30 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    cace:	2800      	cmp	r0, #0
    cad0:	db09      	blt.n	cae6 <MPSL_IRQ_RADIO_Handler+0x1c>
    cad2:	f000 021f 	and.w	r2, r0, #31
    cad6:	2101      	movs	r1, #1
    cad8:	4091      	lsls	r1, r2
    cada:	0940      	lsrs	r0, r0, #5
    cadc:	0080      	lsls	r0, r0, #2
    cade:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cae2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cae6:	4770      	bx	lr
    cae8:	2800      	cmp	r0, #0
    caea:	db0d      	blt.n	cb08 <MPSL_IRQ_RADIO_Handler+0x3e>
    caec:	f000 021f 	and.w	r2, r0, #31
    caf0:	2101      	movs	r1, #1
    caf2:	4091      	lsls	r1, r2
    caf4:	0940      	lsrs	r0, r0, #5
    caf6:	0080      	lsls	r0, r0, #2
    caf8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cafc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cb00:	f3bf 8f4f 	dsb	sy
    cb04:	f3bf 8f6f 	isb	sy
    cb08:	4770      	bx	lr

0000cb0a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    cb0a:	b570      	push	{r4, r5, r6, lr}
    cb0c:	4602      	mov	r2, r0
    cb0e:	2000      	movs	r0, #0
    cb10:	2900      	cmp	r1, #0
    cb12:	d01d      	beq.n	cb50 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    cb14:	fba2 0101 	umull	r0, r1, r2, r1
    cb18:	0a40      	lsrs	r0, r0, #9
    cb1a:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    cb1e:	0a49      	lsrs	r1, r1, #9
    cb20:	1c40      	adds	r0, r0, #1
    cb22:	f141 0100 	adc.w	r1, r1, #0
    cb26:	f240 72a1 	movw	r2, #1953	; 0x7a1
    cb2a:	1883      	adds	r3, r0, r2
    cb2c:	f141 0100 	adc.w	r1, r1, #0
    cb30:	1c5b      	adds	r3, r3, #1
    cb32:	f141 0400 	adc.w	r4, r1, #0
    cb36:	2100      	movs	r1, #0
    cb38:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    cb3c:	41a1      	sbcs	r1, r4
    cb3e:	d203      	bcs.n	cb48 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    cb40:	2171      	movs	r1, #113	; 0x71
    cb42:	206d      	movs	r0, #109	; 0x6d
    cb44:	f7f7 fa32 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cb48:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    cb4c:	fbb0 f0f2 	udiv	r0, r0, r2
    cb50:	bd70      	pop	{r4, r5, r6, pc}
    cb52:	5840      	ldr	r0, [r0, r1]
    cb54:	2800      	cmp	r0, #0
    cb56:	d000      	beq.n	cb5a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    cb58:	2001      	movs	r0, #1
    cb5a:	4770      	bx	lr
    cb5c:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    cb60:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    cb64:	f002 0201 	and.w	r2, r2, #1
    cb68:	03c0      	lsls	r0, r0, #15
    cb6a:	d503      	bpl.n	cb74 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cb6c:	428a      	cmp	r2, r1
    cb6e:	d101      	bne.n	cb74 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cb70:	2001      	movs	r0, #1
    cb72:	4770      	bx	lr
    cb74:	2000      	movs	r0, #0
    cb76:	4770      	bx	lr

0000cb78 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    cb78:	b510      	push	{r4, lr}
    cb7a:	2101      	movs	r1, #1
    cb7c:	0788      	lsls	r0, r1, #30
    cb7e:	f7f7 f9bf 	bl	3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cb82:	2800      	cmp	r0, #0
    cb84:	d000      	beq.n	cb88 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    cb86:	2001      	movs	r0, #1
    cb88:	bd10      	pop	{r4, pc}

0000cb8a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    cb8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cb8e:	2101      	movs	r1, #1
    cb90:	6001      	str	r1, [r0, #0]
    cb92:	4770      	bx	lr

0000cb94 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    cb94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cb98:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    cb9c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    cba0:	f002 0203 	and.w	r2, r2, #3
    cba4:	03c9      	lsls	r1, r1, #15
    cba6:	d503      	bpl.n	cbb0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cba8:	4282      	cmp	r2, r0
    cbaa:	d101      	bne.n	cbb0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cbac:	2001      	movs	r0, #1
    cbae:	4770      	bx	lr
    cbb0:	2000      	movs	r0, #0
    cbb2:	4770      	bx	lr

0000cbb4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    cbb4:	b510      	push	{r4, lr}
    cbb6:	2100      	movs	r1, #0
    cbb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cbbc:	f7f7 f9a0 	bl	3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cbc0:	2800      	cmp	r0, #0
    cbc2:	d000      	beq.n	cbc6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    cbc4:	2001      	movs	r0, #1
    cbc6:	bd10      	pop	{r4, pc}
    cbc8:	2800      	cmp	r0, #0
    cbca:	db09      	blt.n	cbe0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    cbcc:	f000 021f 	and.w	r2, r0, #31
    cbd0:	2101      	movs	r1, #1
    cbd2:	4091      	lsls	r1, r2
    cbd4:	0940      	lsrs	r0, r0, #5
    cbd6:	0080      	lsls	r0, r0, #2
    cbd8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cbdc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cbe0:	4770      	bx	lr
    cbe2:	2800      	cmp	r0, #0
    cbe4:	db0d      	blt.n	cc02 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    cbe6:	f000 021f 	and.w	r2, r0, #31
    cbea:	2101      	movs	r1, #1
    cbec:	4091      	lsls	r1, r2
    cbee:	0940      	lsrs	r0, r0, #5
    cbf0:	0080      	lsls	r0, r0, #2
    cbf2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cbf6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cbfa:	f3bf 8f4f 	dsb	sy
    cbfe:	f3bf 8f6f 	isb	sy
    cc02:	4770      	bx	lr
    cc04:	00021000 	.word	0x00021000
    cc08:	000000fa 	.word	0x000000fa
    cc0c:	24625723 	.word	0x24625723
    cc10:	578f3123 	.word	0x578f3123
    cc14:	2fd1ee74 	.word	0x2fd1ee74
    cc18:	4594c088 	.word	0x4594c088
    cc1c:	36f9a2f7 	.word	0x36f9a2f7
    cc20:	2800      	cmp	r0, #0
    cc22:	db09      	blt.n	cc38 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    cc24:	f000 021f 	and.w	r2, r0, #31
    cc28:	2101      	movs	r1, #1
    cc2a:	4091      	lsls	r1, r2
    cc2c:	0940      	lsrs	r0, r0, #5
    cc2e:	0080      	lsls	r0, r0, #2
    cc30:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cc34:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cc38:	4770      	bx	lr

0000cc3a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    cc3a:	f3ef 8110 	mrs	r1, PRIMASK
    cc3e:	b672      	cpsid	i
    cc40:	7802      	ldrb	r2, [r0, #0]
    cc42:	2a01      	cmp	r2, #1
    cc44:	d001      	beq.n	cc4a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    cc46:	2201      	movs	r2, #1
    cc48:	e000      	b.n	cc4c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    cc4a:	2200      	movs	r2, #0
    cc4c:	2301      	movs	r3, #1
    cc4e:	7003      	strb	r3, [r0, #0]
    cc50:	b901      	cbnz	r1, cc54 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    cc52:	b662      	cpsie	i
    cc54:	b10a      	cbz	r2, cc5a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    cc56:	2000      	movs	r0, #0
    cc58:	4770      	bx	lr
    cc5a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cc5e:	4770      	bx	lr

0000cc60 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    cc60:	2100      	movs	r1, #0
    cc62:	7001      	strb	r1, [r0, #0]
    cc64:	4608      	mov	r0, r1
    cc66:	4770      	bx	lr

0000cc68 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    cc68:	f3ef 8110 	mrs	r1, PRIMASK
    cc6c:	b672      	cpsid	i
    cc6e:	2200      	movs	r2, #0
    cc70:	7002      	strb	r2, [r0, #0]
    cc72:	b901      	cbnz	r1, cc76 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    cc74:	b662      	cpsie	i
    cc76:	2000      	movs	r0, #0
    cc78:	4770      	bx	lr

0000cc7a <mpsl_low_priority_process>:
    cc7a:	f7f7 ba83 	b.w	4184 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000cc7e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    cc7e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc82:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc86:	280f      	cmp	r0, #15
    cc88:	d001      	beq.n	cc8e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    cc8a:	2000      	movs	r0, #0
    cc8c:	4770      	bx	lr
    cc8e:	2001      	movs	r0, #1
    cc90:	4770      	bx	lr

0000cc92 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    cc92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc96:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc9a:	280a      	cmp	r0, #10
    cc9c:	d001      	beq.n	cca2 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    cc9e:	2000      	movs	r0, #0
    cca0:	4770      	bx	lr
    cca2:	2001      	movs	r0, #1
    cca4:	4770      	bx	lr

0000cca6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    cca6:	b500      	push	{lr}
    cca8:	f7ff fff3 	bl	cc92 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ccac:	b120      	cbz	r0, ccb8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    ccae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ccb2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ccb6:	b108      	cbz	r0, ccbc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    ccb8:	2000      	movs	r0, #0
    ccba:	bd00      	pop	{pc}
    ccbc:	2001      	movs	r0, #1
    ccbe:	bd00      	pop	{pc}

0000ccc0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    ccc0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ccc4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ccc8:	280e      	cmp	r0, #14
    ccca:	d001      	beq.n	ccd0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    cccc:	2000      	movs	r0, #0
    ccce:	4770      	bx	lr
    ccd0:	2001      	movs	r0, #1
    ccd2:	4770      	bx	lr

0000ccd4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    ccd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ccd8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ccdc:	2810      	cmp	r0, #16
    ccde:	d001      	beq.n	cce4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    cce0:	2000      	movs	r0, #0
    cce2:	4770      	bx	lr
    cce4:	2001      	movs	r0, #1
    cce6:	4770      	bx	lr

0000cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    cce8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ccec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ccf0:	2806      	cmp	r0, #6
    ccf2:	d003      	beq.n	ccfc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ccf4:	1c40      	adds	r0, r0, #1
    ccf6:	d001      	beq.n	ccfc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ccf8:	2000      	movs	r0, #0
    ccfa:	4770      	bx	lr
    ccfc:	2001      	movs	r0, #1
    ccfe:	4770      	bx	lr

0000cd00 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    cd00:	b500      	push	{lr}
    cd02:	f7ff fff1 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cd06:	b148      	cbz	r0, cd1c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cd08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cd0c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cd10:	2806      	cmp	r0, #6
    cd12:	d303      	bcc.n	cd1c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cd14:	1c40      	adds	r0, r0, #1
    cd16:	d001      	beq.n	cd1c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cd18:	2001      	movs	r0, #1
    cd1a:	bd00      	pop	{pc}
    cd1c:	2000      	movs	r0, #0
    cd1e:	bd00      	pop	{pc}

0000cd20 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    cd20:	b500      	push	{lr}
    cd22:	f7ff ffe1 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cd26:	b138      	cbz	r0, cd38 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    cd28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cd2c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cd30:	2806      	cmp	r0, #6
    cd32:	d303      	bcc.n	cd3c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cd34:	1c40      	adds	r0, r0, #1
    cd36:	d001      	beq.n	cd3c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cd38:	2000      	movs	r0, #0
    cd3a:	bd00      	pop	{pc}
    cd3c:	2001      	movs	r0, #1
    cd3e:	bd00      	pop	{pc}

0000cd40 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    cd40:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cd44:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cd48:	280d      	cmp	r0, #13
    cd4a:	d001      	beq.n	cd50 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    cd4c:	2000      	movs	r0, #0
    cd4e:	4770      	bx	lr
    cd50:	2001      	movs	r0, #1
    cd52:	4770      	bx	lr

0000cd54 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    cd54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cd58:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cd5c:	2808      	cmp	r0, #8
    cd5e:	d001      	beq.n	cd64 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    cd60:	2000      	movs	r0, #0
    cd62:	4770      	bx	lr
    cd64:	2001      	movs	r0, #1
    cd66:	4770      	bx	lr

0000cd68 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    cd68:	2a00      	cmp	r2, #0
    cd6a:	bf04      	itt	eq
    cd6c:	2000      	moveq	r0, #0
    cd6e:	4770      	bxeq	lr
    cd70:	1e52      	subs	r2, r2, #1
    cd72:	d007      	beq.n	cd84 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    cd74:	7803      	ldrb	r3, [r0, #0]
    cd76:	f891 c000 	ldrb.w	ip, [r1]
    cd7a:	4563      	cmp	r3, ip
    cd7c:	bf04      	itt	eq
    cd7e:	1c40      	addeq	r0, r0, #1
    cd80:	1c49      	addeq	r1, r1, #1
    cd82:	d0f5      	beq.n	cd70 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    cd84:	7800      	ldrb	r0, [r0, #0]
    cd86:	7809      	ldrb	r1, [r1, #0]
    cd88:	1a40      	subs	r0, r0, r1
    cd8a:	4770      	bx	lr

0000cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    cd8c:	b4f0      	push	{r4, r5, r6, r7}
    cd8e:	ea80 0c01 	eor.w	ip, r0, r1
    cd92:	4603      	mov	r3, r0
    cd94:	f01c 0f03 	tst.w	ip, #3
    cd98:	d13c      	bne.n	ce14 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cd9a:	f013 0f03 	tst.w	r3, #3
    cd9e:	d00b      	beq.n	cdb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    cda0:	2a00      	cmp	r2, #0
    cda2:	bf04      	itt	eq
    cda4:	bcf0      	popeq	{r4, r5, r6, r7}
    cda6:	4770      	bxeq	lr
    cda8:	f811 cb01 	ldrb.w	ip, [r1], #1
    cdac:	f803 cb01 	strb.w	ip, [r3], #1
    cdb0:	1e52      	subs	r2, r2, #1
    cdb2:	f013 0f03 	tst.w	r3, #3
    cdb6:	d1f3      	bne.n	cda0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    cdb8:	2a03      	cmp	r2, #3
    cdba:	d94f      	bls.n	ce5c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cdbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cdc0:	d24c      	bcs.n	ce5c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cdc2:	f1c2 0c00 	rsb	ip, r2, #0
    cdc6:	ea4f 74ec 	mov.w	r4, ip, asr #31
    cdca:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    cdce:	ea4f 0cac 	mov.w	ip, ip, asr #2
    cdd2:	f1cc 0c00 	rsb	ip, ip, #0
    cdd6:	f1bc 0f00 	cmp.w	ip, #0
    cdda:	dd1b      	ble.n	ce14 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cddc:	1f0d      	subs	r5, r1, #4
    cdde:	1f1c      	subs	r4, r3, #4
    cde0:	f01c 0f01 	tst.w	ip, #1
    cde4:	d003      	beq.n	cdee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    cde6:	f855 6f04 	ldr.w	r6, [r5, #4]!
    cdea:	f844 6f04 	str.w	r6, [r4, #4]!
    cdee:	ea5f 066c 	movs.w	r6, ip, asr #1
    cdf2:	d007      	beq.n	ce04 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    cdf4:	686f      	ldr	r7, [r5, #4]
    cdf6:	6067      	str	r7, [r4, #4]
    cdf8:	f855 7f08 	ldr.w	r7, [r5, #8]!
    cdfc:	f844 7f08 	str.w	r7, [r4, #8]!
    ce00:	1e76      	subs	r6, r6, #1
    ce02:	d1f7      	bne.n	cdf4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    ce04:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    ce08:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    ce0c:	f1cc 0c00 	rsb	ip, ip, #0
    ce10:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    ce14:	2a00      	cmp	r2, #0
    ce16:	bf04      	itt	eq
    ce18:	bcf0      	popeq	{r4, r5, r6, r7}
    ce1a:	4770      	bxeq	lr
    ce1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ce20:	d226      	bcs.n	ce70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ce22:	2a00      	cmp	r2, #0
    ce24:	bfdc      	itt	le
    ce26:	bcf0      	pople	{r4, r5, r6, r7}
    ce28:	4770      	bxle	lr
    ce2a:	1e49      	subs	r1, r1, #1
    ce2c:	1e5b      	subs	r3, r3, #1
    ce2e:	f012 0f01 	tst.w	r2, #1
    ce32:	d003      	beq.n	ce3c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    ce34:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    ce38:	f803 cf01 	strb.w	ip, [r3, #1]!
    ce3c:	1052      	asrs	r2, r2, #1
    ce3e:	bf04      	itt	eq
    ce40:	bcf0      	popeq	{r4, r5, r6, r7}
    ce42:	4770      	bxeq	lr
    ce44:	f891 c001 	ldrb.w	ip, [r1, #1]
    ce48:	f883 c001 	strb.w	ip, [r3, #1]
    ce4c:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    ce50:	f803 cf02 	strb.w	ip, [r3, #2]!
    ce54:	1e52      	subs	r2, r2, #1
    ce56:	d1f5      	bne.n	ce44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    ce58:	bcf0      	pop	{r4, r5, r6, r7}
    ce5a:	4770      	bx	lr
    ce5c:	2a04      	cmp	r2, #4
    ce5e:	d3d9      	bcc.n	ce14 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ce60:	f851 cb04 	ldr.w	ip, [r1], #4
    ce64:	1f12      	subs	r2, r2, #4
    ce66:	f843 cb04 	str.w	ip, [r3], #4
    ce6a:	2a04      	cmp	r2, #4
    ce6c:	d2f8      	bcs.n	ce60 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    ce6e:	e7d1      	b.n	ce14 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ce70:	f811 cb01 	ldrb.w	ip, [r1], #1
    ce74:	f803 cb01 	strb.w	ip, [r3], #1
    ce78:	1e52      	subs	r2, r2, #1
    ce7a:	d1f9      	bne.n	ce70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ce7c:	bcf0      	pop	{r4, r5, r6, r7}
    ce7e:	4770      	bx	lr

0000ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ce80:	b470      	push	{r4, r5, r6}
    ce82:	4603      	mov	r3, r0
    ce84:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    ce88:	f010 0f03 	tst.w	r0, #3
    ce8c:	d009      	beq.n	cea2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ce8e:	2a00      	cmp	r2, #0
    ce90:	bf04      	itt	eq
    ce92:	bc70      	popeq	{r4, r5, r6}
    ce94:	4770      	bxeq	lr
    ce96:	f803 cb01 	strb.w	ip, [r3], #1
    ce9a:	1e52      	subs	r2, r2, #1
    ce9c:	f013 0f03 	tst.w	r3, #3
    cea0:	d1f5      	bne.n	ce8e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    cea2:	b2c9      	uxtb	r1, r1
    cea4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    cea8:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ceac:	2a03      	cmp	r2, #3
    ceae:	d939      	bls.n	cf24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ceb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ceb4:	d236      	bcs.n	cf24 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ceb6:	4251      	negs	r1, r2
    ceb8:	17cc      	asrs	r4, r1, #31
    ceba:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    cebe:	1089      	asrs	r1, r1, #2
    cec0:	424e      	negs	r6, r1
    cec2:	2e00      	cmp	r6, #0
    cec4:	dd11      	ble.n	ceea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cec6:	1f19      	subs	r1, r3, #4
    cec8:	f016 0f01 	tst.w	r6, #1
    cecc:	bf18      	it	ne
    cece:	f841 5f04 	strne.w	r5, [r1, #4]!
    ced2:	1074      	asrs	r4, r6, #1
    ced4:	d004      	beq.n	cee0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    ced6:	604d      	str	r5, [r1, #4]
    ced8:	f841 5f08 	str.w	r5, [r1, #8]!
    cedc:	1e64      	subs	r4, r4, #1
    cede:	d1fa      	bne.n	ced6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    cee0:	4271      	negs	r1, r6
    cee2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    cee6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    ceea:	2a00      	cmp	r2, #0
    ceec:	bf04      	itt	eq
    ceee:	bc70      	popeq	{r4, r5, r6}
    cef0:	4770      	bxeq	lr
    cef2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cef6:	d21d      	bcs.n	cf34 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cef8:	2a00      	cmp	r2, #0
    cefa:	bfdc      	itt	le
    cefc:	bc70      	pople	{r4, r5, r6}
    cefe:	4770      	bxle	lr
    cf00:	1e59      	subs	r1, r3, #1
    cf02:	f012 0f01 	tst.w	r2, #1
    cf06:	bf18      	it	ne
    cf08:	f801 cf01 	strbne.w	ip, [r1, #1]!
    cf0c:	1052      	asrs	r2, r2, #1
    cf0e:	bf04      	itt	eq
    cf10:	bc70      	popeq	{r4, r5, r6}
    cf12:	4770      	bxeq	lr
    cf14:	f881 c001 	strb.w	ip, [r1, #1]
    cf18:	f801 cf02 	strb.w	ip, [r1, #2]!
    cf1c:	1e52      	subs	r2, r2, #1
    cf1e:	d1f9      	bne.n	cf14 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    cf20:	bc70      	pop	{r4, r5, r6}
    cf22:	4770      	bx	lr
    cf24:	2a04      	cmp	r2, #4
    cf26:	d3e0      	bcc.n	ceea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cf28:	1f12      	subs	r2, r2, #4
    cf2a:	f843 5b04 	str.w	r5, [r3], #4
    cf2e:	2a04      	cmp	r2, #4
    cf30:	d2fa      	bcs.n	cf28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    cf32:	e7da      	b.n	ceea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cf34:	f803 cb01 	strb.w	ip, [r3], #1
    cf38:	1e52      	subs	r2, r2, #1
    cf3a:	d1fb      	bne.n	cf34 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cf3c:	bc70      	pop	{r4, r5, r6}
    cf3e:	4770      	bx	lr
    cf40:	f04f 30ff 	mov.w	r0, #4294967295
    cf44:	4770      	bx	lr
    cf46:	2000      	movs	r0, #0
    cf48:	4770      	bx	lr
    cf4a:	2000      	movs	r0, #0
    cf4c:	4770      	bx	lr
    cf4e:	f04f 30ff 	mov.w	r0, #4294967295
    cf52:	4770      	bx	lr
    cf54:	4770      	bx	lr
    cf56:	4770      	bx	lr
    cf58:	2000      	movs	r0, #0
    cf5a:	4770      	bx	lr
    cf5c:	f04f 30ff 	mov.w	r0, #4294967295
    cf60:	4770      	bx	lr
    cf62:	f04f 30ff 	mov.w	r0, #4294967295
    cf66:	4770      	bx	lr
    cf68:	2100      	movs	r1, #0
    cf6a:	7001      	strb	r1, [r0, #0]
    cf6c:	4770      	bx	lr
    cf6e:	f04f 30ff 	mov.w	r0, #4294967295
    cf72:	4770      	bx	lr
    cf74:	f04f 30ff 	mov.w	r0, #4294967295
    cf78:	4770      	bx	lr
    cf7a:	2000      	movs	r0, #0
    cf7c:	4770      	bx	lr
    cf7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf82:	4606      	mov	r6, r0
    cf84:	460c      	mov	r4, r1
    cf86:	7808      	ldrb	r0, [r1, #0]
    cf88:	7849      	ldrb	r1, [r1, #1]
    cf8a:	2700      	movs	r7, #0
    cf8c:	4408      	add	r0, r1
    cf8e:	4691      	mov	r9, r2
    cf90:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    cf94:	463d      	mov	r5, r7
    cf96:	e00e      	b.n	cfb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    cf98:	7a23      	ldrb	r3, [r4, #8]
    cf9a:	2b02      	cmp	r3, #2
    cf9c:	d200      	bcs.n	cfa0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    cf9e:	2302      	movs	r3, #2
    cfa0:	79e2      	ldrb	r2, [r4, #7]
    cfa2:	2a03      	cmp	r2, #3
    cfa4:	d200      	bcs.n	cfa8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    cfa6:	2203      	movs	r2, #3
    cfa8:	79a1      	ldrb	r1, [r4, #6]
    cfaa:	7960      	ldrb	r0, [r4, #5]
    cfac:	f000 ffb3 	bl	df16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cfb0:	1c6d      	adds	r5, r5, #1
    cfb2:	4407      	add	r7, r0
    cfb4:	b2ed      	uxtb	r5, r5
    cfb6:	4545      	cmp	r5, r8
    cfb8:	d3ee      	bcc.n	cf98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    cfba:	6830      	ldr	r0, [r6, #0]
    cfbc:	1cc0      	adds	r0, r0, #3
    cfbe:	f020 0003 	bic.w	r0, r0, #3
    cfc2:	6030      	str	r0, [r6, #0]
    cfc4:	f1b9 0f00 	cmp.w	r9, #0
    cfc8:	d000      	beq.n	cfcc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    cfca:	2000      	movs	r0, #0
    cfcc:	463a      	mov	r2, r7
    cfce:	4641      	mov	r1, r8
    cfd0:	f7f7 fe82 	bl	4cd8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cfd4:	6831      	ldr	r1, [r6, #0]
    cfd6:	4408      	add	r0, r1
    cfd8:	6030      	str	r0, [r6, #0]
    cfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000cfde <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    cfde:	2000      	movs	r0, #0
    cfe0:	4770      	bx	lr

0000cfe2 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    cfe2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    cfe4:	4604      	mov	r4, r0
    cfe6:	1d01      	adds	r1, r0, #4
    cfe8:	4668      	mov	r0, sp
    cfea:	f7f9 fb11 	bl	6610 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    cfee:	2800      	cmp	r0, #0
    cff0:	d004      	beq.n	cffc <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    cff2:	4669      	mov	r1, sp
    cff4:	4620      	mov	r0, r4
    cff6:	f000 f848 	bl	d08a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    cffa:	2001      	movs	r0, #1
    cffc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000cffe <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cffe:	b50e      	push	{r1, r2, r3, lr}
    d000:	4601      	mov	r1, r0
    d002:	4668      	mov	r0, sp
    d004:	f000 f827 	bl	d056 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d008:	4668      	mov	r0, sp
    d00a:	f001 fc51 	bl	e8b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d00e:	bd0e      	pop	{r1, r2, r3, pc}

0000d010 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d010:	b510      	push	{r4, lr}
    d012:	4604      	mov	r4, r0
    d014:	4620      	mov	r0, r4
    d016:	f7f7 fb9f 	bl	4758 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d01a:	2800      	cmp	r0, #0
    d01c:	d006      	beq.n	d02c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d01e:	78a1      	ldrb	r1, [r4, #2]
    d020:	7820      	ldrb	r0, [r4, #0]
    d022:	f000 f804 	bl	d02e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d026:	2800      	cmp	r0, #0
    d028:	d0f4      	beq.n	d014 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d02a:	2001      	movs	r0, #1
    d02c:	bd10      	pop	{r4, pc}
    d02e:	b570      	push	{r4, r5, r6, lr}
    d030:	460c      	mov	r4, r1
    d032:	4605      	mov	r5, r0
    d034:	f7f7 fbec 	bl	4810 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d038:	2800      	cmp	r0, #0
    d03a:	d002      	beq.n	d042 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d03c:	2d3e      	cmp	r5, #62	; 0x3e
    d03e:	d001      	beq.n	d044 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d040:	2001      	movs	r0, #1
    d042:	bd70      	pop	{r4, r5, r6, pc}
    d044:	2c12      	cmp	r4, #18
    d046:	d004      	beq.n	d052 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d048:	4620      	mov	r0, r4
    d04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d04e:	f7f7 bbfb 	b.w	4848 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d052:	2000      	movs	r0, #0
    d054:	bd70      	pop	{r4, r5, r6, pc}

0000d056 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d056:	880a      	ldrh	r2, [r1, #0]
    d058:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d05c:	8002      	strh	r2, [r0, #0]
    d05e:	884a      	ldrh	r2, [r1, #2]
    d060:	8042      	strh	r2, [r0, #2]
    d062:	784a      	ldrb	r2, [r1, #1]
    d064:	0993      	lsrs	r3, r2, #6
    d066:	2200      	movs	r2, #0
    d068:	7142      	strb	r2, [r0, #5]
    d06a:	784b      	ldrb	r3, [r1, #1]
    d06c:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d070:	b11b      	cbz	r3, d07a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d072:	2b01      	cmp	r3, #1
    d074:	d005      	beq.n	d082 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d076:	2b02      	cmp	r3, #2
    d078:	d005      	beq.n	d086 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d07a:	7102      	strb	r2, [r0, #4]
    d07c:	1d09      	adds	r1, r1, #4
    d07e:	6081      	str	r1, [r0, #8]
    d080:	4770      	bx	lr
    d082:	2201      	movs	r2, #1
    d084:	e7f9      	b.n	d07a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d086:	2202      	movs	r2, #2
    d088:	e7f7      	b.n	d07a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d08a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d08a:	b510      	push	{r4, lr}
    d08c:	460c      	mov	r4, r1
    d08e:	7809      	ldrb	r1, [r1, #0]
    d090:	7001      	strb	r1, [r0, #0]
    d092:	7841      	ldrb	r1, [r0, #1]
    d094:	f021 010f 	bic.w	r1, r1, #15
    d098:	7041      	strb	r1, [r0, #1]
    d09a:	8822      	ldrh	r2, [r4, #0]
    d09c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d0a0:	4311      	orrs	r1, r2
    d0a2:	7041      	strb	r1, [r0, #1]
    d0a4:	78a2      	ldrb	r2, [r4, #2]
    d0a6:	7082      	strb	r2, [r0, #2]
    d0a8:	8862      	ldrh	r2, [r4, #2]
    d0aa:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    d0ae:	0a12      	lsrs	r2, r2, #8
    d0b0:	70c2      	strb	r2, [r0, #3]
    d0b2:	7041      	strb	r1, [r0, #1]
    d0b4:	7922      	ldrb	r2, [r4, #4]
    d0b6:	f002 0203 	and.w	r2, r2, #3
    d0ba:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d0be:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    d0c2:	7041      	strb	r1, [r0, #1]
    d0c4:	7962      	ldrb	r2, [r4, #5]
    d0c6:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d0ca:	7041      	strb	r1, [r0, #1]
    d0cc:	68a1      	ldr	r1, [r4, #8]
    d0ce:	1d02      	adds	r2, r0, #4
    d0d0:	4291      	cmp	r1, r2
    d0d2:	d006      	beq.n	d0e2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    d0d4:	8862      	ldrh	r2, [r4, #2]
    d0d6:	2afb      	cmp	r2, #251	; 0xfb
    d0d8:	d300      	bcc.n	d0dc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    d0da:	22fb      	movs	r2, #251	; 0xfb
    d0dc:	1d00      	adds	r0, r0, #4
    d0de:	f7ff fe55 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0e2:	78a0      	ldrb	r0, [r4, #2]
    d0e4:	1d00      	adds	r0, r0, #4
    d0e6:	b2c0      	uxtb	r0, r0
    d0e8:	bd10      	pop	{r4, pc}

0000d0ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d0ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0ee:	4604      	mov	r4, r0
    d0f0:	f891 c000 	ldrb.w	ip, [r1]
    d0f4:	2000      	movs	r0, #0
    d0f6:	270c      	movs	r7, #12
    d0f8:	223e      	movs	r2, #62	; 0x3e
    d0fa:	2612      	movs	r6, #18
    d0fc:	25ff      	movs	r5, #255	; 0xff
    d0fe:	f04f 0b14 	mov.w	fp, #20
    d102:	f04f 0e13 	mov.w	lr, #19
    d106:	f04f 0a05 	mov.w	sl, #5
    d10a:	f104 030d 	add.w	r3, r4, #13
    d10e:	f04f 0911 	mov.w	r9, #17
    d112:	f1bc 0f20 	cmp.w	ip, #32
    d116:	d272      	bcs.n	d1fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d118:	e8df f00c 	tbb	[pc, ip]
    d11c:	29271071 	.word	0x29271071
    d120:	a46dfc2e 	.word	0xa46dfc2e
    d124:	fbdac0ae 	.word	0xfbdac0ae
    d128:	f7f8f9fa 	.word	0xf7f8f9fa
    d12c:	507171f6 	.word	0x507171f6
    d130:	f3f4f572 	.word	0xf3f4f572
    d134:	eff0f1f2 	.word	0xeff0f1f2
    d138:	ec71edee 	.word	0xec71edee
    d13c:	7027      	strb	r7, [r4, #0]
    d13e:	7908      	ldrb	r0, [r1, #4]
    d140:	70a0      	strb	r0, [r4, #2]
    d142:	7948      	ldrb	r0, [r1, #5]
    d144:	70e0      	strb	r0, [r4, #3]
    d146:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d14a:	0a00      	lsrs	r0, r0, #8
    d14c:	7120      	strb	r0, [r4, #4]
    d14e:	79c8      	ldrb	r0, [r1, #7]
    d150:	7160      	strb	r0, [r4, #5]
    d152:	7a08      	ldrb	r0, [r1, #8]
    d154:	71a0      	strb	r0, [r4, #6]
    d156:	8908      	ldrh	r0, [r1, #8]
    d158:	0a00      	lsrs	r0, r0, #8
    d15a:	71e0      	strb	r0, [r4, #7]
    d15c:	7a88      	ldrb	r0, [r1, #10]
    d15e:	7220      	strb	r0, [r4, #8]
    d160:	8948      	ldrh	r0, [r1, #10]
    d162:	0a00      	lsrs	r0, r0, #8
    d164:	7260      	strb	r0, [r4, #9]
    d166:	2008      	movs	r0, #8
    d168:	e154      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d16a:	2010      	movs	r0, #16
    d16c:	e000      	b.n	d170 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    d16e:	201a      	movs	r0, #26
    d170:	7020      	strb	r0, [r4, #0]
    d172:	7908      	ldrb	r0, [r1, #4]
    d174:	70a0      	strb	r0, [r4, #2]
    d176:	e154      	b.n	d422 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    d178:	7022      	strb	r2, [r4, #0]
    d17a:	2002      	movs	r0, #2
    d17c:	70a0      	strb	r0, [r4, #2]
    d17e:	7908      	ldrb	r0, [r1, #4]
    d180:	70e0      	strb	r0, [r4, #3]
    d182:	7b88      	ldrb	r0, [r1, #14]
    d184:	7120      	strb	r0, [r4, #4]
    d186:	7948      	ldrb	r0, [r1, #5]
    d188:	7160      	strb	r0, [r4, #5]
    d18a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d18e:	f8c4 0006 	str.w	r0, [r4, #6]
    d192:	8948      	ldrh	r0, [r1, #10]
    d194:	8160      	strh	r0, [r4, #10]
    d196:	7b08      	ldrb	r0, [r1, #12]
    d198:	7320      	strb	r0, [r4, #12]
    d19a:	7b0e      	ldrb	r6, [r1, #12]
    d19c:	1d0d      	adds	r5, r1, #4
    d19e:	2e1f      	cmp	r6, #31
    d1a0:	d300      	bcc.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    d1a2:	261f      	movs	r6, #31
    d1a4:	4618      	mov	r0, r3
    d1a6:	4632      	mov	r2, r6
    d1a8:	f105 010b 	add.w	r1, r5, #11
    d1ac:	f7ff fdee 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d1b0:	360d      	adds	r6, #13
    d1b2:	7a69      	ldrb	r1, [r5, #9]
    d1b4:	55a1      	strb	r1, [r4, r6]
    d1b6:	1e76      	subs	r6, r6, #1
    d1b8:	b2f0      	uxtb	r0, r6
    d1ba:	e129      	b.n	d410 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d1bc:	7022      	strb	r2, [r4, #0]
    d1be:	200b      	movs	r0, #11
    d1c0:	70a0      	strb	r0, [r4, #2]
    d1c2:	7908      	ldrb	r0, [r1, #4]
    d1c4:	70e0      	strb	r0, [r4, #3]
    d1c6:	7948      	ldrb	r0, [r1, #5]
    d1c8:	7120      	strb	r0, [r4, #4]
    d1ca:	7988      	ldrb	r0, [r1, #6]
    d1cc:	7160      	strb	r0, [r4, #5]
    d1ce:	f8d1 0007 	ldr.w	r0, [r1, #7]
    d1d2:	f8c4 0006 	str.w	r0, [r4, #6]
    d1d6:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    d1da:	8160      	strh	r0, [r4, #10]
    d1dc:	7b48      	ldrb	r0, [r1, #13]
    d1de:	7320      	strb	r0, [r4, #12]
    d1e0:	f8d1 000e 	ldr.w	r0, [r1, #14]
    d1e4:	f8c4 000d 	str.w	r0, [r4, #13]
    d1e8:	8a48      	ldrh	r0, [r1, #18]
    d1ea:	f8a4 0011 	strh.w	r0, [r4, #17]
    d1ee:	7d08      	ldrb	r0, [r1, #20]
    d1f0:	74e0      	strb	r0, [r4, #19]
    d1f2:	4630      	mov	r0, r6
    d1f4:	e10e      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d1f6:	4620      	mov	r0, r4
    d1f8:	f000 f98d 	bl	d516 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    d1fc:	e108      	b.n	d410 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d1fe:	e10b      	b.n	d418 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d200:	7022      	strb	r2, [r4, #0]
    d202:	200a      	movs	r0, #10
    d204:	70a0      	strb	r0, [r4, #2]
    d206:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d20a:	70e0      	strb	r0, [r4, #3]
    d20c:	7888      	ldrb	r0, [r1, #2]
    d20e:	7120      	strb	r0, [r4, #4]
    d210:	8848      	ldrh	r0, [r1, #2]
    d212:	0a00      	lsrs	r0, r0, #8
    d214:	7160      	strb	r0, [r4, #5]
    d216:	7908      	ldrb	r0, [r1, #4]
    d218:	71a0      	strb	r0, [r4, #6]
    d21a:	7948      	ldrb	r0, [r1, #5]
    d21c:	71e0      	strb	r0, [r4, #7]
    d21e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d222:	60a0      	str	r0, [r4, #8]
    d224:	8948      	ldrh	r0, [r1, #10]
    d226:	81a0      	strh	r0, [r4, #12]
    d228:	68c8      	ldr	r0, [r1, #12]
    d22a:	f8c4 000e 	str.w	r0, [r4, #14]
    d22e:	8a08      	ldrh	r0, [r1, #16]
    d230:	8260      	strh	r0, [r4, #18]
    d232:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d236:	6160      	str	r0, [r4, #20]
    d238:	8ac8      	ldrh	r0, [r1, #22]
    d23a:	8320      	strh	r0, [r4, #24]
    d23c:	7e08      	ldrb	r0, [r1, #24]
    d23e:	76a0      	strb	r0, [r4, #26]
    d240:	8b08      	ldrh	r0, [r1, #24]
    d242:	0a00      	lsrs	r0, r0, #8
    d244:	76e0      	strb	r0, [r4, #27]
    d246:	7e88      	ldrb	r0, [r1, #26]
    d248:	7720      	strb	r0, [r4, #28]
    d24a:	8b48      	ldrh	r0, [r1, #26]
    d24c:	0a00      	lsrs	r0, r0, #8
    d24e:	7760      	strb	r0, [r4, #29]
    d250:	7f08      	ldrb	r0, [r1, #28]
    d252:	77a0      	strb	r0, [r4, #30]
    d254:	8b88      	ldrh	r0, [r1, #28]
    d256:	0a00      	lsrs	r0, r0, #8
    d258:	77e0      	strb	r0, [r4, #31]
    d25a:	7f88      	ldrb	r0, [r1, #30]
    d25c:	f884 0020 	strb.w	r0, [r4, #32]
    d260:	201f      	movs	r0, #31
    d262:	e0d7      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d264:	7022      	strb	r2, [r4, #0]
    d266:	f884 b002 	strb.w	fp, [r4, #2]
    d26a:	7908      	ldrb	r0, [r1, #4]
    d26c:	70e0      	strb	r0, [r4, #3]
    d26e:	8888      	ldrh	r0, [r1, #4]
    d270:	0a00      	lsrs	r0, r0, #8
    d272:	7120      	strb	r0, [r4, #4]
    d274:	7988      	ldrb	r0, [r1, #6]
    d276:	e0ed      	b.n	d454 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d278:	7022      	strb	r2, [r4, #0]
    d27a:	2004      	movs	r0, #4
    d27c:	70a0      	strb	r0, [r4, #2]
    d27e:	7908      	ldrb	r0, [r1, #4]
    d280:	70e0      	strb	r0, [r4, #3]
    d282:	7988      	ldrb	r0, [r1, #6]
    d284:	7120      	strb	r0, [r4, #4]
    d286:	88c8      	ldrh	r0, [r1, #6]
    d288:	0a00      	lsrs	r0, r0, #8
    d28a:	7160      	strb	r0, [r4, #5]
    d28c:	6888      	ldr	r0, [r1, #8]
    d28e:	f8c4 0006 	str.w	r0, [r4, #6]
    d292:	68c8      	ldr	r0, [r1, #12]
    d294:	f8c4 000a 	str.w	r0, [r4, #10]
    d298:	200c      	movs	r0, #12
    d29a:	e0bb      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d29c:	7022      	strb	r2, [r4, #0]
    d29e:	2003      	movs	r0, #3
    d2a0:	70a0      	strb	r0, [r4, #2]
    d2a2:	7908      	ldrb	r0, [r1, #4]
    d2a4:	70e0      	strb	r0, [r4, #3]
    d2a6:	7988      	ldrb	r0, [r1, #6]
    d2a8:	7120      	strb	r0, [r4, #4]
    d2aa:	88c8      	ldrh	r0, [r1, #6]
    d2ac:	0a00      	lsrs	r0, r0, #8
    d2ae:	7160      	strb	r0, [r4, #5]
    d2b0:	7a08      	ldrb	r0, [r1, #8]
    d2b2:	71a0      	strb	r0, [r4, #6]
    d2b4:	8908      	ldrh	r0, [r1, #8]
    d2b6:	0a00      	lsrs	r0, r0, #8
    d2b8:	71e0      	strb	r0, [r4, #7]
    d2ba:	7a88      	ldrb	r0, [r1, #10]
    d2bc:	7220      	strb	r0, [r4, #8]
    d2be:	8948      	ldrh	r0, [r1, #10]
    d2c0:	0a00      	lsrs	r0, r0, #8
    d2c2:	7260      	strb	r0, [r4, #9]
    d2c4:	7b08      	ldrb	r0, [r1, #12]
    d2c6:	72a0      	strb	r0, [r4, #10]
    d2c8:	8988      	ldrh	r0, [r1, #12]
    d2ca:	0a00      	lsrs	r0, r0, #8
    d2cc:	72e0      	strb	r0, [r4, #11]
    d2ce:	e120      	b.n	d512 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    d2d0:	7022      	strb	r2, [r4, #0]
    d2d2:	f884 a002 	strb.w	sl, [r4, #2]
    d2d6:	7908      	ldrb	r0, [r1, #4]
    d2d8:	70e0      	strb	r0, [r4, #3]
    d2da:	8888      	ldrh	r0, [r1, #4]
    d2dc:	0a00      	lsrs	r0, r0, #8
    d2de:	7120      	strb	r0, [r4, #4]
    d2e0:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d2e4:	f8c4 0005 	str.w	r0, [r4, #5]
    d2e8:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d2ec:	f8c4 0009 	str.w	r0, [r4, #9]
    d2f0:	89c8      	ldrh	r0, [r1, #14]
    d2f2:	e010      	b.n	d316 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    d2f4:	e0fa      	b.n	d4ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    d2f6:	e0ce      	b.n	d496 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    d2f8:	e0af      	b.n	d45a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    d2fa:	e0da      	b.n	d4b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    d2fc:	e0e8      	b.n	d4d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    d2fe:	e0a1      	b.n	d444 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    d300:	e08c      	b.n	d41c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d302:	e090      	b.n	d426 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    d304:	e033      	b.n	d36e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    d306:	e02f      	b.n	d368 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    d308:	e043      	b.n	d392 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    d30a:	e03d      	b.n	d388 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    d30c:	e021      	b.n	d352 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    d30e:	e015      	b.n	d33c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    d310:	e008      	b.n	d324 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    d312:	e004      	b.n	d31e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    d314:	e046      	b.n	d3a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    d316:	f8a4 000d 	strh.w	r0, [r4, #13]
    d31a:	200d      	movs	r0, #13
    d31c:	e07a      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d31e:	f884 9000 	strb.w	r9, [r4]
    d322:	e038      	b.n	d396 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    d324:	f884 a000 	strb.w	sl, [r4]
    d328:	7908      	ldrb	r0, [r1, #4]
    d32a:	70a0      	strb	r0, [r4, #2]
    d32c:	7948      	ldrb	r0, [r1, #5]
    d32e:	70e0      	strb	r0, [r4, #3]
    d330:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d334:	0a00      	lsrs	r0, r0, #8
    d336:	7120      	strb	r0, [r4, #4]
    d338:	79c8      	ldrb	r0, [r1, #7]
    d33a:	e08b      	b.n	d454 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d33c:	2008      	movs	r0, #8
    d33e:	7020      	strb	r0, [r4, #0]
    d340:	7908      	ldrb	r0, [r1, #4]
    d342:	70a0      	strb	r0, [r4, #2]
    d344:	7988      	ldrb	r0, [r1, #6]
    d346:	70e0      	strb	r0, [r4, #3]
    d348:	88c8      	ldrh	r0, [r1, #6]
    d34a:	0a00      	lsrs	r0, r0, #8
    d34c:	7120      	strb	r0, [r4, #4]
    d34e:	7a08      	ldrb	r0, [r1, #8]
    d350:	e080      	b.n	d454 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d352:	2030      	movs	r0, #48	; 0x30
    d354:	7020      	strb	r0, [r4, #0]
    d356:	7908      	ldrb	r0, [r1, #4]
    d358:	70a0      	strb	r0, [r4, #2]
    d35a:	7988      	ldrb	r0, [r1, #6]
    d35c:	70e0      	strb	r0, [r4, #3]
    d35e:	88c8      	ldrh	r0, [r1, #6]
    d360:	0a00      	lsrs	r0, r0, #8
    d362:	7120      	strb	r0, [r4, #4]
    d364:	2003      	movs	r0, #3
    d366:	e055      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d368:	7022      	strb	r2, [r4, #0]
    d36a:	2007      	movs	r0, #7
    d36c:	e077      	b.n	d45e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    d36e:	7022      	strb	r2, [r4, #0]
    d370:	70a7      	strb	r7, [r4, #2]
    d372:	7908      	ldrb	r0, [r1, #4]
    d374:	70e0      	strb	r0, [r4, #3]
    d376:	7988      	ldrb	r0, [r1, #6]
    d378:	7120      	strb	r0, [r4, #4]
    d37a:	88c8      	ldrh	r0, [r1, #6]
    d37c:	0a00      	lsrs	r0, r0, #8
    d37e:	7160      	strb	r0, [r4, #5]
    d380:	7a08      	ldrb	r0, [r1, #8]
    d382:	71a0      	strb	r0, [r4, #6]
    d384:	7a48      	ldrb	r0, [r1, #9]
    d386:	e05a      	b.n	d43e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d388:	4620      	mov	r0, r4
    d38a:	1d09      	adds	r1, r1, #4
    d38c:	f7f7 fa12 	bl	47b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    d390:	e03e      	b.n	d410 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d392:	2057      	movs	r0, #87	; 0x57
    d394:	7020      	strb	r0, [r4, #0]
    d396:	7908      	ldrb	r0, [r1, #4]
    d398:	70a0      	strb	r0, [r4, #2]
    d39a:	8888      	ldrh	r0, [r1, #4]
    d39c:	0a00      	lsrs	r0, r0, #8
    d39e:	70e0      	strb	r0, [r4, #3]
    d3a0:	2002      	movs	r0, #2
    d3a2:	e037      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d3a4:	7022      	strb	r2, [r4, #0]
    d3a6:	220d      	movs	r2, #13
    d3a8:	70a2      	strb	r2, [r4, #2]
    d3aa:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d3ae:	70e2      	strb	r2, [r4, #3]
    d3b0:	894a      	ldrh	r2, [r1, #10]
    d3b2:	80a2      	strh	r2, [r4, #4]
    d3b4:	784a      	ldrb	r2, [r1, #1]
    d3b6:	71a2      	strb	r2, [r4, #6]
    d3b8:	f8d1 2002 	ldr.w	r2, [r1, #2]
    d3bc:	f8c4 2007 	str.w	r2, [r4, #7]
    d3c0:	88ca      	ldrh	r2, [r1, #6]
    d3c2:	f8a4 200b 	strh.w	r2, [r4, #11]
    d3c6:	7b0a      	ldrb	r2, [r1, #12]
    d3c8:	4620      	mov	r0, r4
    d3ca:	7362      	strb	r2, [r4, #13]
    d3cc:	7b4a      	ldrb	r2, [r1, #13]
    d3ce:	7382      	strb	r2, [r0, #14]
    d3d0:	7b8a      	ldrb	r2, [r1, #14]
    d3d2:	73c2      	strb	r2, [r0, #15]
    d3d4:	7e8a      	ldrb	r2, [r1, #26]
    d3d6:	7402      	strb	r2, [r0, #16]
    d3d8:	7a4a      	ldrb	r2, [r1, #9]
    d3da:	7442      	strb	r2, [r0, #17]
    d3dc:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d3e0:	f8ad 2000 	strh.w	r2, [sp]
    d3e4:	8242      	strh	r2, [r0, #18]
    d3e6:	7cca      	ldrb	r2, [r1, #19]
    d3e8:	7502      	strb	r2, [r0, #20]
    d3ea:	694a      	ldr	r2, [r1, #20]
    d3ec:	f8c0 2015 	str.w	r2, [r0, #21]
    d3f0:	8b0a      	ldrh	r2, [r1, #24]
    d3f2:	f8a0 2019 	strh.w	r2, [r0, #25]
    d3f6:	7a0a      	ldrb	r2, [r1, #8]
    d3f8:	76c2      	strb	r2, [r0, #27]
    d3fa:	7a0d      	ldrb	r5, [r1, #8]
    d3fc:	2de5      	cmp	r5, #229	; 0xe5
    d3fe:	d300      	bcc.n	d402 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    d400:	25e5      	movs	r5, #229	; 0xe5
    d402:	462a      	mov	r2, r5
    d404:	301c      	adds	r0, #28
    d406:	311c      	adds	r1, #28
    d408:	f7ff fcc0 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d40c:	351a      	adds	r5, #26
    d40e:	b2e8      	uxtb	r0, r5
    d410:	2800      	cmp	r0, #0
    d412:	d001      	beq.n	d418 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d414:	7060      	strb	r0, [r4, #1]
    d416:	1c80      	adds	r0, r0, #2
    d418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d41c:	7022      	strb	r2, [r4, #0]
    d41e:	f884 9002 	strb.w	r9, [r4, #2]
    d422:	2001      	movs	r0, #1
    d424:	e7f6      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d426:	7022      	strb	r2, [r4, #0]
    d428:	70a6      	strb	r6, [r4, #2]
    d42a:	7908      	ldrb	r0, [r1, #4]
    d42c:	70e0      	strb	r0, [r4, #3]
    d42e:	7948      	ldrb	r0, [r1, #5]
    d430:	7120      	strb	r0, [r4, #4]
    d432:	7988      	ldrb	r0, [r1, #6]
    d434:	7160      	strb	r0, [r4, #5]
    d436:	88c8      	ldrh	r0, [r1, #6]
    d438:	0a00      	lsrs	r0, r0, #8
    d43a:	71a0      	strb	r0, [r4, #6]
    d43c:	7a08      	ldrb	r0, [r1, #8]
    d43e:	71e0      	strb	r0, [r4, #7]
    d440:	2006      	movs	r0, #6
    d442:	e7e7      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d444:	7025      	strb	r5, [r4, #0]
    d446:	20a1      	movs	r0, #161	; 0xa1
    d448:	70a0      	strb	r0, [r4, #2]
    d44a:	7908      	ldrb	r0, [r1, #4]
    d44c:	70e0      	strb	r0, [r4, #3]
    d44e:	7948      	ldrb	r0, [r1, #5]
    d450:	7120      	strb	r0, [r4, #4]
    d452:	2000      	movs	r0, #0
    d454:	7160      	strb	r0, [r4, #5]
    d456:	2004      	movs	r0, #4
    d458:	e7dc      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d45a:	7025      	strb	r5, [r4, #0]
    d45c:	20a2      	movs	r0, #162	; 0xa2
    d45e:	70a0      	strb	r0, [r4, #2]
    d460:	7908      	ldrb	r0, [r1, #4]
    d462:	70e0      	strb	r0, [r4, #3]
    d464:	8888      	ldrh	r0, [r1, #4]
    d466:	0a00      	lsrs	r0, r0, #8
    d468:	7120      	strb	r0, [r4, #4]
    d46a:	7988      	ldrb	r0, [r1, #6]
    d46c:	7160      	strb	r0, [r4, #5]
    d46e:	88c8      	ldrh	r0, [r1, #6]
    d470:	0a00      	lsrs	r0, r0, #8
    d472:	71a0      	strb	r0, [r4, #6]
    d474:	7a08      	ldrb	r0, [r1, #8]
    d476:	71e0      	strb	r0, [r4, #7]
    d478:	8908      	ldrh	r0, [r1, #8]
    d47a:	0a00      	lsrs	r0, r0, #8
    d47c:	7220      	strb	r0, [r4, #8]
    d47e:	7a88      	ldrb	r0, [r1, #10]
    d480:	7260      	strb	r0, [r4, #9]
    d482:	8948      	ldrh	r0, [r1, #10]
    d484:	0a00      	lsrs	r0, r0, #8
    d486:	72a0      	strb	r0, [r4, #10]
    d488:	7b08      	ldrb	r0, [r1, #12]
    d48a:	72e0      	strb	r0, [r4, #11]
    d48c:	8988      	ldrh	r0, [r1, #12]
    d48e:	0a00      	lsrs	r0, r0, #8
    d490:	7320      	strb	r0, [r4, #12]
    d492:	200b      	movs	r0, #11
    d494:	e7be      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d496:	7025      	strb	r5, [r4, #0]
    d498:	20a3      	movs	r0, #163	; 0xa3
    d49a:	70a0      	strb	r0, [r4, #2]
    d49c:	7908      	ldrb	r0, [r1, #4]
    d49e:	70e0      	strb	r0, [r4, #3]
    d4a0:	8888      	ldrh	r0, [r1, #4]
    d4a2:	0a00      	lsrs	r0, r0, #8
    d4a4:	7120      	strb	r0, [r4, #4]
    d4a6:	7988      	ldrb	r0, [r1, #6]
    d4a8:	7160      	strb	r0, [r4, #5]
    d4aa:	79c8      	ldrb	r0, [r1, #7]
    d4ac:	71a0      	strb	r0, [r4, #6]
    d4ae:	2005      	movs	r0, #5
    d4b0:	e7b0      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d4b2:	7022      	strb	r2, [r4, #0]
    d4b4:	f884 e002 	strb.w	lr, [r4, #2]
    d4b8:	7908      	ldrb	r0, [r1, #4]
    d4ba:	70e0      	strb	r0, [r4, #3]
    d4bc:	7948      	ldrb	r0, [r1, #5]
    d4be:	7120      	strb	r0, [r4, #4]
    d4c0:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d4c4:	f8c4 0005 	str.w	r0, [r4, #5]
    d4c8:	8948      	ldrh	r0, [r1, #10]
    d4ca:	f8a4 0009 	strh.w	r0, [r4, #9]
    d4ce:	e020      	b.n	d512 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    d4d0:	7025      	strb	r5, [r4, #0]
    d4d2:	20a4      	movs	r0, #164	; 0xa4
    d4d4:	70a0      	strb	r0, [r4, #2]
    d4d6:	7908      	ldrb	r0, [r1, #4]
    d4d8:	70e0      	strb	r0, [r4, #3]
    d4da:	8888      	ldrh	r0, [r1, #4]
    d4dc:	0a00      	lsrs	r0, r0, #8
    d4de:	7120      	strb	r0, [r4, #4]
    d4e0:	7988      	ldrb	r0, [r1, #6]
    d4e2:	7160      	strb	r0, [r4, #5]
    d4e4:	79c8      	ldrb	r0, [r1, #7]
    d4e6:	71a0      	strb	r0, [r4, #6]
    d4e8:	2007      	movs	r0, #7
    d4ea:	e793      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d4ec:	7025      	strb	r5, [r4, #0]
    d4ee:	2080      	movs	r0, #128	; 0x80
    d4f0:	70a0      	strb	r0, [r4, #2]
    d4f2:	888a      	ldrh	r2, [r1, #4]
    d4f4:	f8a4 2003 	strh.w	r2, [r4, #3]
    d4f8:	88ca      	ldrh	r2, [r1, #6]
    d4fa:	f8a4 2005 	strh.w	r2, [r4, #5]
    d4fe:	7a0a      	ldrb	r2, [r1, #8]
    d500:	71e2      	strb	r2, [r4, #7]
    d502:	7a4a      	ldrb	r2, [r1, #9]
    d504:	8122      	strh	r2, [r4, #8]
    d506:	7a8a      	ldrb	r2, [r1, #10]
    d508:	72a2      	strb	r2, [r4, #10]
    d50a:	7ac9      	ldrb	r1, [r1, #11]
    d50c:	f001 0101 	and.w	r1, r1, #1
    d510:	72e1      	strb	r1, [r4, #11]
    d512:	200a      	movs	r0, #10
    d514:	e77e      	b.n	d414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000d516 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    d516:	223e      	movs	r2, #62	; 0x3e
    d518:	7002      	strb	r2, [r0, #0]
    d51a:	2201      	movs	r2, #1
    d51c:	7082      	strb	r2, [r0, #2]
    d51e:	790a      	ldrb	r2, [r1, #4]
    d520:	70c2      	strb	r2, [r0, #3]
    d522:	798a      	ldrb	r2, [r1, #6]
    d524:	7102      	strb	r2, [r0, #4]
    d526:	88ca      	ldrh	r2, [r1, #6]
    d528:	0a12      	lsrs	r2, r2, #8
    d52a:	7142      	strb	r2, [r0, #5]
    d52c:	7a0a      	ldrb	r2, [r1, #8]
    d52e:	7182      	strb	r2, [r0, #6]
    d530:	7a4a      	ldrb	r2, [r1, #9]
    d532:	71c2      	strb	r2, [r0, #7]
    d534:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d538:	6082      	str	r2, [r0, #8]
    d53a:	89ca      	ldrh	r2, [r1, #14]
    d53c:	8182      	strh	r2, [r0, #12]
    d53e:	7c0a      	ldrb	r2, [r1, #16]
    d540:	7382      	strb	r2, [r0, #14]
    d542:	8a0a      	ldrh	r2, [r1, #16]
    d544:	0a12      	lsrs	r2, r2, #8
    d546:	73c2      	strb	r2, [r0, #15]
    d548:	7c8a      	ldrb	r2, [r1, #18]
    d54a:	7402      	strb	r2, [r0, #16]
    d54c:	8a4a      	ldrh	r2, [r1, #18]
    d54e:	0a12      	lsrs	r2, r2, #8
    d550:	7442      	strb	r2, [r0, #17]
    d552:	7d0a      	ldrb	r2, [r1, #20]
    d554:	7482      	strb	r2, [r0, #18]
    d556:	8a8a      	ldrh	r2, [r1, #20]
    d558:	0a12      	lsrs	r2, r2, #8
    d55a:	74c2      	strb	r2, [r0, #19]
    d55c:	7d89      	ldrb	r1, [r1, #22]
    d55e:	7501      	strb	r1, [r0, #20]
    d560:	2013      	movs	r0, #19
    d562:	4770      	bx	lr

0000d564 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d564:	223e      	movs	r2, #62	; 0x3e
    d566:	7002      	strb	r2, [r0, #0]
    d568:	2201      	movs	r2, #1
    d56a:	7082      	strb	r2, [r0, #2]
    d56c:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d570:	70c2      	strb	r2, [r0, #3]
    d572:	788a      	ldrb	r2, [r1, #2]
    d574:	7102      	strb	r2, [r0, #4]
    d576:	884a      	ldrh	r2, [r1, #2]
    d578:	0a12      	lsrs	r2, r2, #8
    d57a:	7142      	strb	r2, [r0, #5]
    d57c:	790a      	ldrb	r2, [r1, #4]
    d57e:	7182      	strb	r2, [r0, #6]
    d580:	794a      	ldrb	r2, [r1, #5]
    d582:	71c2      	strb	r2, [r0, #7]
    d584:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d588:	6082      	str	r2, [r0, #8]
    d58a:	894a      	ldrh	r2, [r1, #10]
    d58c:	8182      	strh	r2, [r0, #12]
    d58e:	7e0a      	ldrb	r2, [r1, #24]
    d590:	7382      	strb	r2, [r0, #14]
    d592:	8b0a      	ldrh	r2, [r1, #24]
    d594:	0a12      	lsrs	r2, r2, #8
    d596:	73c2      	strb	r2, [r0, #15]
    d598:	7e8a      	ldrb	r2, [r1, #26]
    d59a:	7402      	strb	r2, [r0, #16]
    d59c:	8b4a      	ldrh	r2, [r1, #26]
    d59e:	0a12      	lsrs	r2, r2, #8
    d5a0:	7442      	strb	r2, [r0, #17]
    d5a2:	7f0a      	ldrb	r2, [r1, #28]
    d5a4:	7482      	strb	r2, [r0, #18]
    d5a6:	8b8a      	ldrh	r2, [r1, #28]
    d5a8:	0a12      	lsrs	r2, r2, #8
    d5aa:	74c2      	strb	r2, [r0, #19]
    d5ac:	7f89      	ldrb	r1, [r1, #30]
    d5ae:	7501      	strb	r1, [r0, #20]
    d5b0:	2113      	movs	r1, #19
    d5b2:	7041      	strb	r1, [r0, #1]
    d5b4:	4608      	mov	r0, r1
    d5b6:	4770      	bx	lr

0000d5b8 <sdc_hci_data_get>:
    d5b8:	b510      	push	{r4, lr}
    d5ba:	b120      	cbz	r0, d5c6 <sdc_hci_data_get+0xe>
    d5bc:	f7ff fd11 	bl	cfe2 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d5c0:	b120      	cbz	r0, d5cc <sdc_hci_data_get+0x14>
    d5c2:	2000      	movs	r0, #0
    d5c4:	bd10      	pop	{r4, pc}
    d5c6:	f06f 0015 	mvn.w	r0, #21
    d5ca:	bd10      	pop	{r4, pc}
    d5cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d5d0:	bd10      	pop	{r4, pc}

0000d5d2 <sdc_hci_data_put>:
    d5d2:	b510      	push	{r4, lr}
    d5d4:	f06f 0415 	mvn.w	r4, #21
    d5d8:	b120      	cbz	r0, d5e4 <sdc_hci_data_put+0x12>
    d5da:	f7ff fd10 	bl	cffe <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d5de:	b108      	cbz	r0, d5e4 <sdc_hci_data_put+0x12>
    d5e0:	2000      	movs	r0, #0
    d5e2:	bd10      	pop	{r4, pc}
    d5e4:	4620      	mov	r0, r4
    d5e6:	bd10      	pop	{r4, pc}

0000d5e8 <sdc_hci_evt_get>:
    d5e8:	b510      	push	{r4, lr}
    d5ea:	b120      	cbz	r0, d5f6 <sdc_hci_evt_get+0xe>
    d5ec:	f7ff fd10 	bl	d010 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d5f0:	b120      	cbz	r0, d5fc <sdc_hci_evt_get+0x14>
    d5f2:	2000      	movs	r0, #0
    d5f4:	bd10      	pop	{r4, pc}
    d5f6:	f06f 0015 	mvn.w	r0, #21
    d5fa:	bd10      	pop	{r4, pc}
    d5fc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d600:	bd10      	pop	{r4, pc}

0000d602 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d602:	f002 b98e 	b.w	f922 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d606 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d606:	f002 b9cd 	b.w	f9a4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d60a <sdc_hci_cmd_cb_set_event_mask>:
    d60a:	b510      	push	{r4, lr}
    d60c:	f7f7 f930 	bl	4870 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d610:	2000      	movs	r0, #0
    d612:	bd10      	pop	{r4, pc}

0000d614 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d614:	b510      	push	{r4, lr}
    d616:	f7f7 f939 	bl	488c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d61a:	2000      	movs	r0, #0
    d61c:	bd10      	pop	{r4, pc}

0000d61e <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d61e:	f002 b9dd 	b.w	f9dc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d622 <sdc_hci_cmd_vs_conn_event_extend>:
    d622:	b508      	push	{r3, lr}
    d624:	7800      	ldrb	r0, [r0, #0]
    d626:	f88d 0000 	strb.w	r0, [sp]
    d62a:	4668      	mov	r0, sp
    d62c:	f002 f94b 	bl	f8c6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d630:	bd08      	pop	{r3, pc}

0000d632 <sdc_hci_cmd_vs_conn_update>:
    d632:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d634:	2100      	movs	r1, #0
    d636:	9100      	str	r1, [sp, #0]
    d638:	9101      	str	r1, [sp, #4]
    d63a:	9102      	str	r1, [sp, #8]
    d63c:	9103      	str	r1, [sp, #12]
    d63e:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d642:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d646:	4291      	cmp	r1, r2
    d648:	d304      	bcc.n	d654 <sdc_hci_cmd_vs_conn_update+0x22>
    d64a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d64e:	fbb1 f1f2 	udiv	r1, r1, r2
    d652:	e005      	b.n	d660 <sdc_hci_cmd_vs_conn_update+0x2e>
    d654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d658:	fbb1 f1f2 	udiv	r1, r1, r2
    d65c:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d660:	8802      	ldrh	r2, [r0, #0]
    d662:	b289      	uxth	r1, r1
    d664:	f8ad 2000 	strh.w	r2, [sp]
    d668:	f8ad 1002 	strh.w	r1, [sp, #2]
    d66c:	f8ad 1004 	strh.w	r1, [sp, #4]
    d670:	88c1      	ldrh	r1, [r0, #6]
    d672:	f8ad 1006 	strh.w	r1, [sp, #6]
    d676:	8900      	ldrh	r0, [r0, #8]
    d678:	f8ad 0008 	strh.w	r0, [sp, #8]
    d67c:	4668      	mov	r0, sp
    d67e:	f001 fed9 	bl	f434 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d682:	b004      	add	sp, #16
    d684:	bd10      	pop	{r4, pc}

0000d686 <sdc_hci_cmd_vs_event_length_set>:
    d686:	f7fd be43 	b.w	b310 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d68a <sdc_hci_cmd_vs_llpm_mode_set>:
    d68a:	2001      	movs	r0, #1
    d68c:	4770      	bx	lr

0000d68e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d68e:	7800      	ldrb	r0, [r0, #0]
    d690:	b100      	cbz	r0, d694 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d692:	2001      	movs	r0, #1
    d694:	f002 b8ef 	b.w	f876 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d698 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d698:	b570      	push	{r4, r5, r6, lr}
    d69a:	4605      	mov	r5, r0
    d69c:	2210      	movs	r2, #16
    d69e:	2100      	movs	r1, #0
    d6a0:	f7ff fbee 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d6a4:	2210      	movs	r2, #16
    d6a6:	2100      	movs	r1, #0
    d6a8:	f105 0010 	add.w	r0, r5, #16
    d6ac:	f7ff fbe8 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d6b0:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d6b4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d6b8:	1c40      	adds	r0, r0, #1
    d6ba:	d10b      	bne.n	d6d4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d6bc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d6c0:	1c40      	adds	r0, r0, #1
    d6c2:	d107      	bne.n	d6d4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d6c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d6c8:	1c40      	adds	r0, r0, #1
    d6ca:	d103      	bne.n	d6d4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d6cc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d6d0:	1c40      	adds	r0, r0, #1
    d6d2:	d00b      	beq.n	d6ec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d6d4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d6d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d6dc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d6e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d6e4:	612a      	str	r2, [r5, #16]
    d6e6:	6168      	str	r0, [r5, #20]
    d6e8:	61a9      	str	r1, [r5, #24]
    d6ea:	61eb      	str	r3, [r5, #28]
    d6ec:	2000      	movs	r0, #0
    d6ee:	f7f7 fdbb 	bl	5268 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d6f2:	b918      	cbnz	r0, d6fc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d6f4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d6f8:	07c0      	lsls	r0, r0, #31
    d6fa:	d118      	bne.n	d72e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d6fc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d700:	1c40      	adds	r0, r0, #1
    d702:	d10b      	bne.n	d71c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d704:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d708:	1c40      	adds	r0, r0, #1
    d70a:	d107      	bne.n	d71c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d70c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d710:	1c40      	adds	r0, r0, #1
    d712:	d103      	bne.n	d71c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d714:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d718:	1c40      	adds	r0, r0, #1
    d71a:	d008      	beq.n	d72e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d71c:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d720:	6861      	ldr	r1, [r4, #4]
    d722:	68a2      	ldr	r2, [r4, #8]
    d724:	68e3      	ldr	r3, [r4, #12]
    d726:	6028      	str	r0, [r5, #0]
    d728:	6069      	str	r1, [r5, #4]
    d72a:	60aa      	str	r2, [r5, #8]
    d72c:	60eb      	str	r3, [r5, #12]
    d72e:	2000      	movs	r0, #0
    d730:	bd70      	pop	{r4, r5, r6, pc}

0000d732 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d732:	b538      	push	{r3, r4, r5, lr}
    d734:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d738:	4604      	mov	r4, r0
    d73a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d73e:	1c40      	adds	r0, r0, #1
    d740:	d105      	bne.n	d74e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d742:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d746:	43c0      	mvns	r0, r0
    d748:	0400      	lsls	r0, r0, #16
    d74a:	0c00      	lsrs	r0, r0, #16
    d74c:	d03e      	beq.n	d7cc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d74e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d752:	07c0      	lsls	r0, r0, #31
    d754:	d03a      	beq.n	d7cc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d756:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d75a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d75e:	f8ad 1000 	strh.w	r1, [sp]
    d762:	f8c4 0001 	str.w	r0, [r4, #1]
    d766:	f8bd 0000 	ldrh.w	r0, [sp]
    d76a:	f8a4 0005 	strh.w	r0, [r4, #5]
    d76e:	79a0      	ldrb	r0, [r4, #6]
    d770:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d774:	71a0      	strb	r0, [r4, #6]
    d776:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d77a:	1c40      	adds	r0, r0, #1
    d77c:	d00f      	beq.n	d79e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d77e:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d782:	1c40      	adds	r0, r0, #1
    d784:	d00b      	beq.n	d79e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d786:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d78a:	1c40      	adds	r0, r0, #1
    d78c:	d007      	beq.n	d79e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d78e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d792:	1c40      	adds	r0, r0, #1
    d794:	d003      	beq.n	d79e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d796:	2000      	movs	r0, #0
    d798:	f7f7 fd66 	bl	5268 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d79c:	b140      	cbz	r0, d7b0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d79e:	2210      	movs	r2, #16
    d7a0:	2100      	movs	r1, #0
    d7a2:	1de0      	adds	r0, r4, #7
    d7a4:	f7ff fb6c 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7a8:	2001      	movs	r0, #1
    d7aa:	7020      	strb	r0, [r4, #0]
    d7ac:	2000      	movs	r0, #0
    d7ae:	bd38      	pop	{r3, r4, r5, pc}
    d7b0:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d7b4:	6869      	ldr	r1, [r5, #4]
    d7b6:	68a8      	ldr	r0, [r5, #8]
    d7b8:	68eb      	ldr	r3, [r5, #12]
    d7ba:	f8c4 2007 	str.w	r2, [r4, #7]
    d7be:	f8c4 100b 	str.w	r1, [r4, #11]
    d7c2:	f8c4 000f 	str.w	r0, [r4, #15]
    d7c6:	f8c4 3013 	str.w	r3, [r4, #19]
    d7ca:	e7ed      	b.n	d7a8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d7cc:	2000      	movs	r0, #0
    d7ce:	e7ec      	b.n	d7aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d7d0 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d7d0:	f002 b86b 	b.w	f8aa <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d7d4 <sdc_hci_cmd_ip_read_bd_addr>:
    d7d4:	f002 b8b6 	b.w	f944 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d7d8 <sdc_hci_cmd_ip_read_local_version_information>:
    d7d8:	f7fd bde6 	b.w	b3a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d7dc <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d7dc:	f001 bde1 	b.w	f3a2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d7e0 <sdc_hci_cmd_le_add_device_to_white_list>:
    d7e0:	f001 bdfa 	b.w	f3d8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d7e4 <sdc_hci_cmd_le_clear_resolving_list>:
    d7e4:	f001 be0f 	b.w	f406 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d7e8 <sdc_hci_cmd_le_clear_white_list>:
    d7e8:	f001 be1a 	b.w	f420 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d7ec <sdc_hci_cmd_le_conn_update>:
    d7ec:	f001 be22 	b.w	f434 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d7f0 <sdc_hci_cmd_le_create_conn>:
    d7f0:	f7fd bb30 	b.w	ae54 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d7f4 <sdc_hci_cmd_le_create_conn_cancel>:
    d7f4:	f001 be60 	b.w	f4b8 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d7f8 <sdc_hci_cmd_le_enable_encryption>:
    d7f8:	f001 bff4 	b.w	f7e4 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d7fc <sdc_hci_cmd_le_encrypt>:
    d7fc:	f001 be84 	b.w	f508 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d800 <sdc_hci_cmd_le_rand>:
    d800:	f001 be8b 	b.w	f51a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d804 <sdc_hci_cmd_le_read_buffer_size>:
    d804:	f7fd bb80 	b.w	af08 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d808 <sdc_hci_cmd_le_read_channel_map>:
    d808:	f7fd bb88 	b.w	af1c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d80c <sdc_hci_cmd_le_read_max_data_length>:
    d80c:	f001 be8b 	b.w	f526 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d810 <sdc_hci_cmd_le_read_phy>:
    d810:	f001 be99 	b.w	f546 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d814 <sdc_hci_cmd_le_read_remote_features>:
    d814:	f7fd bbac 	b.w	af70 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d818 <sdc_hci_cmd_le_read_resolving_list_size>:
    d818:	f001 bec0 	b.w	f59c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d81c <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d81c:	f7fd bbcc 	b.w	afb8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d820 <sdc_hci_cmd_le_read_transmit_power>:
    d820:	f001 bec0 	b.w	f5a4 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d824 <sdc_hci_cmd_le_read_white_list_size>:
    d824:	f001 bec7 	b.w	f5b6 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d828 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d828:	f001 bec9 	b.w	f5be <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d82c <sdc_hci_cmd_le_remove_device_from_white_list>:
    d82c:	f001 bee0 	b.w	f5f0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d830 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d830:	f001 bef3 	b.w	f61a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d834 <sdc_hci_cmd_le_set_data_length>:
    d834:	f001 beff 	b.w	f636 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d838 <sdc_hci_cmd_le_set_default_phy>:
    d838:	f7fd bbce 	b.w	afd8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d83c <sdc_hci_cmd_le_set_event_mask>:
    d83c:	b510      	push	{r4, lr}
    d83e:	f7f7 f811 	bl	4864 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d842:	2000      	movs	r0, #0
    d844:	bd10      	pop	{r4, pc}

0000d846 <sdc_hci_cmd_le_set_host_channel_classification>:
    d846:	f001 bf1d 	b.w	f684 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d84a <sdc_hci_cmd_le_set_phy>:
    d84a:	f001 bf3b 	b.w	f6c4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d84e <sdc_hci_cmd_le_set_privacy_mode>:
    d84e:	f001 bf59 	b.w	f704 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d852 <sdc_hci_cmd_le_set_random_address>:
    d852:	f001 bf6d 	b.w	f730 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d856 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d856:	f001 bf79 	b.w	f74c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d85a <sdc_hci_cmd_le_set_scan_enable>:
    d85a:	f001 bf80 	b.w	f75e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d85e <sdc_hci_cmd_le_set_scan_params>:
    d85e:	f001 bf94 	b.w	f78a <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d862 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d862:	f001 bff1 	b.w	f848 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d866 <sdc_hci_cmd_lc_disconnect>:
    d866:	f001 bd4b 	b.w	f300 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d86a <sdc_hci_cmd_lc_read_remote_version_information>:
    d86a:	f002 b877 	b.w	f95c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d86e:	b570      	push	{r4, r5, r6, lr}
    d870:	880b      	ldrh	r3, [r1, #0]
    d872:	7f04      	ldrb	r4, [r0, #28]
    d874:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d878:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d87c:	8802      	ldrh	r2, [r0, #0]
    d87e:	4435      	add	r5, r6
    d880:	1da4      	adds	r4, r4, #6
    d882:	882d      	ldrh	r5, [r5, #0]
    d884:	4422      	add	r2, r4
    d886:	b292      	uxth	r2, r2
    d888:	4425      	add	r5, r4
    d88a:	1e54      	subs	r4, r2, #1
    d88c:	442c      	add	r4, r5
    d88e:	fb94 f4f2 	sdiv	r4, r4, r2
    d892:	fb02 6204 	mla	r2, r2, r4, r6
    d896:	8840      	ldrh	r0, [r0, #2]
    d898:	b292      	uxth	r2, r2
    d89a:	4290      	cmp	r0, r2
    d89c:	d903      	bls.n	d8a6 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d89e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d8a2:	4310      	orrs	r0, r2
    d8a4:	e002      	b.n	d8ac <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d8a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d8aa:	4398      	bics	r0, r3
    d8ac:	8008      	strh	r0, [r1, #0]
    d8ae:	bd70      	pop	{r4, r5, r6, pc}
    d8b0:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d8b4:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d8b8:	429a      	cmp	r2, r3
    d8ba:	d107      	bne.n	d8cc <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d8bc:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d8c0:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d8c4:	4288      	cmp	r0, r1
    d8c6:	d001      	beq.n	d8cc <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d8c8:	2001      	movs	r0, #1
    d8ca:	4770      	bx	lr
    d8cc:	2000      	movs	r0, #0
    d8ce:	4770      	bx	lr

0000d8d0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d8d0:	b570      	push	{r4, r5, r6, lr}
    d8d2:	7f00      	ldrb	r0, [r0, #28]
    d8d4:	461c      	mov	r4, r3
    d8d6:	1d80      	adds	r0, r0, #6
    d8d8:	4408      	add	r0, r1
    d8da:	4613      	mov	r3, r2
    d8dc:	8809      	ldrh	r1, [r1, #0]
    d8de:	9a04      	ldr	r2, [sp, #16]
    d8e0:	1cc9      	adds	r1, r1, #3
    d8e2:	b289      	uxth	r1, r1
    d8e4:	1915      	adds	r5, r2, r4
    d8e6:	1ec0      	subs	r0, r0, #3
    d8e8:	428d      	cmp	r5, r1
    d8ea:	d805      	bhi.n	d8f8 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d8ec:	1881      	adds	r1, r0, r2
    d8ee:	4622      	mov	r2, r4
    d8f0:	4618      	mov	r0, r3
    d8f2:	f7ff fa4b 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d8f6:	e000      	b.n	d8fa <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d8f8:	2400      	movs	r4, #0
    d8fa:	4620      	mov	r0, r4
    d8fc:	bd70      	pop	{r4, r5, r6, pc}

0000d8fe <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d8fe:	b570      	push	{r4, r5, r6, lr}
    d900:	7f00      	ldrb	r0, [r0, #28]
    d902:	461c      	mov	r4, r3
    d904:	1d80      	adds	r0, r0, #6
    d906:	4408      	add	r0, r1
    d908:	4613      	mov	r3, r2
    d90a:	8809      	ldrh	r1, [r1, #0]
    d90c:	9a04      	ldr	r2, [sp, #16]
    d90e:	1cc9      	adds	r1, r1, #3
    d910:	b289      	uxth	r1, r1
    d912:	1915      	adds	r5, r2, r4
    d914:	1ec0      	subs	r0, r0, #3
    d916:	428d      	cmp	r5, r1
    d918:	d805      	bhi.n	d926 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d91a:	4410      	add	r0, r2
    d91c:	4622      	mov	r2, r4
    d91e:	4619      	mov	r1, r3
    d920:	f7ff fa34 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d924:	e000      	b.n	d928 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d926:	2400      	movs	r4, #0
    d928:	4620      	mov	r0, r4
    d92a:	bd70      	pop	{r4, r5, r6, pc}

0000d92c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d92c:	8881      	ldrh	r1, [r0, #4]
    d92e:	88c0      	ldrh	r0, [r0, #6]
    d930:	4288      	cmp	r0, r1
    d932:	d101      	bne.n	d938 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d934:	2001      	movs	r0, #1
    d936:	4770      	bx	lr
    d938:	2000      	movs	r0, #0
    d93a:	4770      	bx	lr

0000d93c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d93c:	8881      	ldrh	r1, [r0, #4]
    d93e:	8900      	ldrh	r0, [r0, #8]
    d940:	4288      	cmp	r0, r1
    d942:	d101      	bne.n	d948 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d944:	2001      	movs	r0, #1
    d946:	4770      	bx	lr
    d948:	2000      	movs	r0, #0
    d94a:	4770      	bx	lr

0000d94c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d94c:	b570      	push	{r4, r5, r6, lr}
    d94e:	4604      	mov	r4, r0
    d950:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d954:	8880      	ldrh	r0, [r0, #4]
    d956:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d95a:	4401      	add	r1, r0
    d95c:	8a20      	ldrh	r0, [r4, #16]
    d95e:	2800      	cmp	r0, #0
    d960:	d01a      	beq.n	d998 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d962:	89a2      	ldrh	r2, [r4, #12]
    d964:	2500      	movs	r5, #0
    d966:	4410      	add	r0, r2
    d968:	b280      	uxth	r0, r0
    d96a:	81a0      	strh	r0, [r4, #12]
    d96c:	880a      	ldrh	r2, [r1, #0]
    d96e:	4290      	cmp	r0, r2
    d970:	d905      	bls.n	d97e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d972:	f240 1163 	movw	r1, #355	; 0x163
    d976:	f04f 0014 	mov.w	r0, #20
    d97a:	f7f6 fdf7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d97e:	d109      	bne.n	d994 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d980:	69a0      	ldr	r0, [r4, #24]
    d982:	b108      	cbz	r0, d988 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d984:	7f40      	ldrb	r0, [r0, #29]
    d986:	7088      	strb	r0, [r1, #2]
    d988:	f104 0104 	add.w	r1, r4, #4
    d98c:	4620      	mov	r0, r4
    d98e:	f7ff ff6e 	bl	d86e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d992:	81a5      	strh	r5, [r4, #12]
    d994:	8225      	strh	r5, [r4, #16]
    d996:	2001      	movs	r0, #1
    d998:	bd70      	pop	{r4, r5, r6, pc}

0000d99a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d99c:	4604      	mov	r4, r0
    d99e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d9a2:	88c0      	ldrh	r0, [r0, #6]
    d9a4:	460e      	mov	r6, r1
    d9a6:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d9aa:	8a60      	ldrh	r0, [r4, #18]
    d9ac:	19d9      	adds	r1, r3, r7
    d9ae:	b108      	cbz	r0, d9b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d9b0:	42b0      	cmp	r0, r6
    d9b2:	d201      	bcs.n	d9b8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d9b4:	2000      	movs	r0, #0
    d9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9b8:	89e0      	ldrh	r0, [r4, #14]
    d9ba:	2500      	movs	r5, #0
    d9bc:	b140      	cbz	r0, d9d0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d9be:	f8b1 c000 	ldrh.w	ip, [r1]
    d9c2:	4560      	cmp	r0, ip
    d9c4:	d008      	beq.n	d9d8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d9c6:	f240 214b 	movw	r1, #587	; 0x24b
    d9ca:	2014      	movs	r0, #20
    d9cc:	f7f6 fdce 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9d0:	7f60      	ldrb	r0, [r4, #29]
    d9d2:	7088      	strb	r0, [r1, #2]
    d9d4:	800d      	strh	r5, [r1, #0]
    d9d6:	e00e      	b.n	d9f6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d9d8:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d9dc:	4418      	add	r0, r3
    d9de:	f10c 0c06 	add.w	ip, ip, #6
    d9e2:	44bc      	add	ip, r7
    d9e4:	4460      	add	r0, ip
    d9e6:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d9ea:	f820 cc03 	strh.w	ip, [r0, #-3]
    d9ee:	f894 c020 	ldrb.w	ip, [r4, #32]
    d9f2:	f800 cc01 	strb.w	ip, [r0, #-1]
    d9f6:	89e0      	ldrh	r0, [r4, #14]
    d9f8:	4430      	add	r0, r6
    d9fa:	81e0      	strh	r0, [r4, #14]
    d9fc:	8808      	ldrh	r0, [r1, #0]
    d9fe:	4430      	add	r0, r6
    da00:	8008      	strh	r0, [r1, #0]
    da02:	b19a      	cbz	r2, da2c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    da04:	1da1      	adds	r1, r4, #6
    da06:	4620      	mov	r0, r4
    da08:	f7ff ff31 	bl	d86e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    da0c:	81e5      	strh	r5, [r4, #14]
    da0e:	7f60      	ldrb	r0, [r4, #29]
    da10:	1c40      	adds	r0, r0, #1
    da12:	7760      	strb	r0, [r4, #29]
    da14:	7da0      	ldrb	r0, [r4, #22]
    da16:	f88d 0000 	strb.w	r0, [sp]
    da1a:	9800      	ldr	r0, [sp, #0]
    da1c:	9000      	str	r0, [sp, #0]
    da1e:	f89d 0000 	ldrb.w	r0, [sp]
    da22:	b178      	cbz	r0, da44 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    da24:	88e0      	ldrh	r0, [r4, #6]
    da26:	82a0      	strh	r0, [r4, #20]
    da28:	75a5      	strb	r5, [r4, #22]
    da2a:	e00b      	b.n	da44 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    da2c:	7f20      	ldrb	r0, [r4, #28]
    da2e:	89e1      	ldrh	r1, [r4, #14]
    da30:	1d80      	adds	r0, r0, #6
    da32:	4438      	add	r0, r7
    da34:	4419      	add	r1, r3
    da36:	4408      	add	r0, r1
    da38:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    da3c:	83e1      	strh	r1, [r4, #30]
    da3e:	7880      	ldrb	r0, [r0, #2]
    da40:	f884 0020 	strb.w	r0, [r4, #32]
    da44:	8265      	strh	r5, [r4, #18]
    da46:	2001      	movs	r0, #1
    da48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000da4a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    da4a:	1cc0      	adds	r0, r0, #3
    da4c:	4770      	bx	lr

0000da4e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    da4e:	b510      	push	{r4, lr}
    da50:	88c2      	ldrh	r2, [r0, #6]
    da52:	8943      	ldrh	r3, [r0, #10]
    da54:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    da58:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    da5c:	1a61      	subs	r1, r4, r1
    da5e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    da62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    da66:	429a      	cmp	r2, r3
    da68:	d101      	bne.n	da6e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    da6a:	8842      	ldrh	r2, [r0, #2]
    da6c:	4411      	add	r1, r2
    da6e:	7f02      	ldrb	r2, [r0, #28]
    da70:	8800      	ldrh	r0, [r0, #0]
    da72:	4410      	add	r0, r2
    da74:	1d80      	adds	r0, r0, #6
    da76:	b280      	uxth	r0, r0
    da78:	fb91 f0f0 	sdiv	r0, r1, r0
    da7c:	b280      	uxth	r0, r0
    da7e:	bd10      	pop	{r4, pc}

0000da80 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    da80:	b510      	push	{r4, lr}
    da82:	4604      	mov	r4, r0
    da84:	88c0      	ldrh	r0, [r0, #6]
    da86:	88a1      	ldrh	r1, [r4, #4]
    da88:	4281      	cmp	r1, r0
    da8a:	d007      	beq.n	da9c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    da8c:	89a0      	ldrh	r0, [r4, #12]
    da8e:	b928      	cbnz	r0, da9c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    da90:	8a20      	ldrh	r0, [r4, #16]
    da92:	b918      	cbnz	r0, da9c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    da94:	88a0      	ldrh	r0, [r4, #4]
    da96:	8aa1      	ldrh	r1, [r4, #20]
    da98:	4288      	cmp	r0, r1
    da9a:	d101      	bne.n	daa0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    da9c:	2000      	movs	r0, #0
    da9e:	bd10      	pop	{r4, pc}
    daa0:	1d21      	adds	r1, r4, #4
    daa2:	4620      	mov	r0, r4
    daa4:	f7ff fee3 	bl	d86e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    daa8:	2000      	movs	r0, #0
    daaa:	8220      	strh	r0, [r4, #16]
    daac:	2001      	movs	r0, #1
    daae:	bd10      	pop	{r4, pc}

0000dab0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    dab0:	b510      	push	{r4, lr}
    dab2:	4604      	mov	r4, r0
    dab4:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dab8:	88c0      	ldrh	r0, [r0, #6]
    daba:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    dabe:	4402      	add	r2, r0
    dac0:	8820      	ldrh	r0, [r4, #0]
    dac2:	2845      	cmp	r0, #69	; 0x45
    dac4:	d200      	bcs.n	dac8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    dac6:	2045      	movs	r0, #69	; 0x45
    dac8:	4288      	cmp	r0, r1
    daca:	d204      	bcs.n	dad6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    dacc:	f240 1119 	movw	r1, #281	; 0x119
    dad0:	2014      	movs	r0, #20
    dad2:	f7f6 fd4b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dad6:	7de0      	ldrb	r0, [r4, #23]
    dad8:	2800      	cmp	r0, #0
    dada:	d003      	beq.n	dae4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    dadc:	8810      	ldrh	r0, [r2, #0]
    dade:	4288      	cmp	r0, r1
    dae0:	d201      	bcs.n	dae6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    dae2:	2000      	movs	r0, #0
    dae4:	bd10      	pop	{r4, pc}
    dae6:	8011      	strh	r1, [r2, #0]
    dae8:	1da1      	adds	r1, r4, #6
    daea:	4620      	mov	r0, r4
    daec:	f7ff febf 	bl	d86e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    daf0:	2000      	movs	r0, #0
    daf2:	75e0      	strb	r0, [r4, #23]
    daf4:	2001      	movs	r0, #1
    daf6:	bd10      	pop	{r4, pc}

0000daf8 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    daf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dafc:	8941      	ldrh	r1, [r0, #10]
    dafe:	8886      	ldrh	r6, [r0, #4]
    db00:	4604      	mov	r4, r0
    db02:	2500      	movs	r5, #0
    db04:	f100 070a 	add.w	r7, r0, #10
    db08:	e006      	b.n	db18 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    db0a:	4639      	mov	r1, r7
    db0c:	4620      	mov	r0, r4
    db0e:	f7ff feae 	bl	d86e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db12:	1c6d      	adds	r5, r5, #1
    db14:	8961      	ldrh	r1, [r4, #10]
    db16:	b2ad      	uxth	r5, r5
    db18:	42b1      	cmp	r1, r6
    db1a:	d1f6      	bne.n	db0a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    db1c:	4628      	mov	r0, r5
    db1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db22 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    db22:	b530      	push	{r4, r5, lr}
    db24:	88c4      	ldrh	r4, [r0, #6]
    db26:	8881      	ldrh	r1, [r0, #4]
    db28:	f100 0224 	add.w	r2, r0, #36	; 0x24
    db2c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    db30:	4413      	add	r3, r2
    db32:	8882      	ldrh	r2, [r0, #4]
    db34:	8a85      	ldrh	r5, [r0, #20]
    db36:	42aa      	cmp	r2, r5
    db38:	d012      	beq.n	db60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    db3a:	42a1      	cmp	r1, r4
    db3c:	d010      	beq.n	db60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    db3e:	8981      	ldrh	r1, [r0, #12]
    db40:	b971      	cbnz	r1, db60 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    db42:	6982      	ldr	r2, [r0, #24]
    db44:	b172      	cbz	r2, db64 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    db46:	4610      	mov	r0, r2
    db48:	f7ff fef8 	bl	d93c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    db4c:	b950      	cbnz	r0, db64 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    db4e:	8910      	ldrh	r0, [r2, #8]
    db50:	3224      	adds	r2, #36	; 0x24
    db52:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    db56:	4410      	add	r0, r2
    db58:	7899      	ldrb	r1, [r3, #2]
    db5a:	7880      	ldrb	r0, [r0, #2]
    db5c:	4288      	cmp	r0, r1
    db5e:	d101      	bne.n	db64 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    db60:	2000      	movs	r0, #0
    db62:	bd30      	pop	{r4, r5, pc}
    db64:	4618      	mov	r0, r3
    db66:	bd30      	pop	{r4, r5, pc}

0000db68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    db68:	8803      	ldrh	r3, [r0, #0]
    db6a:	2b45      	cmp	r3, #69	; 0x45
    db6c:	d200      	bcs.n	db70 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    db6e:	2345      	movs	r3, #69	; 0x45
    db70:	8013      	strh	r3, [r2, #0]
    db72:	88c2      	ldrh	r2, [r0, #6]
    db74:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    db78:	f100 0224 	add.w	r2, r0, #36	; 0x24
    db7c:	441a      	add	r2, r3
    db7e:	600a      	str	r2, [r1, #0]
    db80:	89c0      	ldrh	r0, [r0, #14]
    db82:	4770      	bx	lr

0000db84 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    db84:	7f00      	ldrb	r0, [r0, #28]
    db86:	1d80      	adds	r0, r0, #6
    db88:	4408      	add	r0, r1
    db8a:	1ec0      	subs	r0, r0, #3
    db8c:	6010      	str	r0, [r2, #0]
    db8e:	8808      	ldrh	r0, [r1, #0]
    db90:	4770      	bx	lr

0000db92 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db96:	460e      	mov	r6, r1
    db98:	88c1      	ldrh	r1, [r0, #6]
    db9a:	8902      	ldrh	r2, [r0, #8]
    db9c:	4604      	mov	r4, r0
    db9e:	f100 0824 	add.w	r8, r0, #36	; 0x24
    dba2:	8800      	ldrh	r0, [r0, #0]
    dba4:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    dba8:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    dbac:	2845      	cmp	r0, #69	; 0x45
    dbae:	d200      	bcs.n	dbb2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    dbb0:	2045      	movs	r0, #69	; 0x45
    dbb2:	42b0      	cmp	r0, r6
    dbb4:	d203      	bcs.n	dbbe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    dbb6:	21db      	movs	r1, #219	; 0xdb
    dbb8:	2014      	movs	r0, #20
    dbba:	f7f6 fcd7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbbe:	4610      	mov	r0, r2
    dbc0:	f7ff fe76 	bl	d8b0 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    dbc4:	b110      	cbz	r0, dbcc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    dbc6:	2000      	movs	r0, #0
    dbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbcc:	42af      	cmp	r7, r5
    dbce:	d908      	bls.n	dbe2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    dbd0:	7f21      	ldrb	r1, [r4, #28]
    dbd2:	1b78      	subs	r0, r7, r5
    dbd4:	1a40      	subs	r0, r0, r1
    dbd6:	1f80      	subs	r0, r0, #6
    dbd8:	4286      	cmp	r6, r0
    dbda:	dd02      	ble.n	dbe2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    dbdc:	2000      	movs	r0, #0
    dbde:	75e0      	strb	r0, [r4, #23]
    dbe0:	e7f1      	b.n	dbc6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    dbe2:	eb08 0005 	add.w	r0, r8, r5
    dbe6:	2101      	movs	r1, #1
    dbe8:	8006      	strh	r6, [r0, #0]
    dbea:	75e1      	strb	r1, [r4, #23]
    dbec:	e7ec      	b.n	dbc8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000dbee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    dbee:	b538      	push	{r3, r4, r5, lr}
    dbf0:	88c4      	ldrh	r4, [r0, #6]
    dbf2:	8881      	ldrh	r1, [r0, #4]
    dbf4:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dbf8:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    dbfc:	441a      	add	r2, r3
    dbfe:	42a1      	cmp	r1, r4
    dc00:	d010      	beq.n	dc24 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dc02:	8983      	ldrh	r3, [r0, #12]
    dc04:	8a05      	ldrh	r5, [r0, #16]
    dc06:	8812      	ldrh	r2, [r2, #0]
    dc08:	442b      	add	r3, r5
    dc0a:	4293      	cmp	r3, r2
    dc0c:	d308      	bcc.n	dc20 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    dc0e:	f8ad 1000 	strh.w	r1, [sp]
    dc12:	4669      	mov	r1, sp
    dc14:	f7ff fe2b 	bl	d86e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dc18:	f8bd 0000 	ldrh.w	r0, [sp]
    dc1c:	42a0      	cmp	r0, r4
    dc1e:	d001      	beq.n	dc24 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dc20:	2001      	movs	r0, #1
    dc22:	bd38      	pop	{r3, r4, r5, pc}
    dc24:	2000      	movs	r0, #0
    dc26:	bd38      	pop	{r3, r4, r5, pc}

0000dc28 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    dc28:	b570      	push	{r4, r5, r6, lr}
    dc2a:	88c6      	ldrh	r6, [r0, #6]
    dc2c:	8885      	ldrh	r5, [r0, #4]
    dc2e:	4603      	mov	r3, r0
    dc30:	f100 0424 	add.w	r4, r0, #36	; 0x24
    dc34:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    dc38:	4420      	add	r0, r4
    dc3a:	42b5      	cmp	r5, r6
    dc3c:	d102      	bne.n	dc44 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    dc3e:	2000      	movs	r0, #0
    dc40:	8218      	strh	r0, [r3, #16]
    dc42:	bd70      	pop	{r4, r5, r6, pc}
    dc44:	8804      	ldrh	r4, [r0, #0]
    dc46:	899d      	ldrh	r5, [r3, #12]
    dc48:	7f1e      	ldrb	r6, [r3, #28]
    dc4a:	1b64      	subs	r4, r4, r5
    dc4c:	4435      	add	r5, r6
    dc4e:	4428      	add	r0, r5
    dc50:	880d      	ldrh	r5, [r1, #0]
    dc52:	b2a4      	uxth	r4, r4
    dc54:	1cc0      	adds	r0, r0, #3
    dc56:	42a5      	cmp	r5, r4
    dc58:	d900      	bls.n	dc5c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    dc5a:	800c      	strh	r4, [r1, #0]
    dc5c:	899c      	ldrh	r4, [r3, #12]
    dc5e:	b124      	cbz	r4, dc6a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    dc60:	2400      	movs	r4, #0
    dc62:	7014      	strb	r4, [r2, #0]
    dc64:	8809      	ldrh	r1, [r1, #0]
    dc66:	8219      	strh	r1, [r3, #16]
    dc68:	bd70      	pop	{r4, r5, r6, pc}
    dc6a:	2401      	movs	r4, #1
    dc6c:	e7f9      	b.n	dc62 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000dc6e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    dc6e:	b508      	push	{r3, lr}
    dc70:	8a81      	ldrh	r1, [r0, #20]
    dc72:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    dc76:	3aff      	subs	r2, #255	; 0xff
    dc78:	d008      	beq.n	dc8c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    dc7a:	7d82      	ldrb	r2, [r0, #22]
    dc7c:	f88d 2000 	strb.w	r2, [sp]
    dc80:	9a00      	ldr	r2, [sp, #0]
    dc82:	9200      	str	r2, [sp, #0]
    dc84:	f89d 2000 	ldrb.w	r2, [sp]
    dc88:	b952      	cbnz	r2, dca0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    dc8a:	e004      	b.n	dc96 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    dc8c:	f44f 7162 	mov.w	r1, #904	; 0x388
    dc90:	2014      	movs	r0, #20
    dc92:	f7f6 fc6b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc96:	8880      	ldrh	r0, [r0, #4]
    dc98:	4281      	cmp	r1, r0
    dc9a:	d101      	bne.n	dca0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    dc9c:	2000      	movs	r0, #0
    dc9e:	bd08      	pop	{r3, pc}
    dca0:	2001      	movs	r0, #1
    dca2:	bd08      	pop	{r3, pc}

0000dca4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    dca4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dca8:	8281      	strh	r1, [r0, #20]
    dcaa:	2100      	movs	r1, #0
    dcac:	7581      	strb	r1, [r0, #22]
    dcae:	4770      	bx	lr

0000dcb0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    dcb0:	b510      	push	{r4, lr}
    dcb2:	8a81      	ldrh	r1, [r0, #20]
    dcb4:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    dcb8:	3aff      	subs	r2, #255	; 0xff
    dcba:	d004      	beq.n	dcc6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    dcbc:	f44f 7159 	mov.w	r1, #868	; 0x364
    dcc0:	2014      	movs	r0, #20
    dcc2:	f7f6 fc53 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcc6:	88c1      	ldrh	r1, [r0, #6]
    dcc8:	8281      	strh	r1, [r0, #20]
    dcca:	89c1      	ldrh	r1, [r0, #14]
    dccc:	b109      	cbz	r1, dcd2 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    dcce:	2101      	movs	r1, #1
    dcd0:	e000      	b.n	dcd4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    dcd2:	2100      	movs	r1, #0
    dcd4:	7581      	strb	r1, [r0, #22]
    dcd6:	bd10      	pop	{r4, pc}

0000dcd8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    dcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcdc:	461d      	mov	r5, r3
    dcde:	4616      	mov	r6, r2
    dce0:	9f06      	ldr	r7, [sp, #24]
    dce2:	460b      	mov	r3, r1
    dce4:	4604      	mov	r4, r0
    dce6:	463a      	mov	r2, r7
    dce8:	4629      	mov	r1, r5
    dcea:	4630      	mov	r0, r6
    dcec:	f000 f84f 	bl	dd8e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dcf0:	4283      	cmp	r3, r0
    dcf2:	d201      	bcs.n	dcf8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    dcf4:	21a8      	movs	r1, #168	; 0xa8
    dcf6:	e018      	b.n	dd2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    dcf8:	1ce0      	adds	r0, r4, #3
    dcfa:	f020 0103 	bic.w	r1, r0, #3
    dcfe:	4620      	mov	r0, r4
    dd00:	42a1      	cmp	r1, r4
    dd02:	d001      	beq.n	dd08 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    dd04:	21a9      	movs	r1, #169	; 0xa9
    dd06:	e010      	b.n	dd2a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    dd08:	2224      	movs	r2, #36	; 0x24
    dd0a:	2100      	movs	r1, #0
    dd0c:	f7ff f8b8 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd10:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dd14:	82a0      	strh	r0, [r4, #20]
    dd16:	19a8      	adds	r0, r5, r6
    dd18:	1d80      	adds	r0, r0, #6
    dd1a:	4378      	muls	r0, r7
    dd1c:	b280      	uxth	r0, r0
    dd1e:	7725      	strb	r5, [r4, #28]
    dd20:	8060      	strh	r0, [r4, #2]
    dd22:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    dd26:	d903      	bls.n	dd30 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    dd28:	21af      	movs	r1, #175	; 0xaf
    dd2a:	2014      	movs	r0, #20
    dd2c:	f7f6 fc1e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd30:	8026      	strh	r6, [r4, #0]
    dd32:	2000      	movs	r0, #0
    dd34:	7760      	strb	r0, [r4, #29]
    dd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dd3a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    dd3a:	6181      	str	r1, [r0, #24]
    dd3c:	6188      	str	r0, [r1, #24]
    dd3e:	4770      	bx	lr

0000dd40 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    dd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd44:	460b      	mov	r3, r1
    dd46:	4604      	mov	r4, r0
    dd48:	f100 0124 	add.w	r1, r0, #36	; 0x24
    dd4c:	8905      	ldrh	r5, [r0, #8]
    dd4e:	8946      	ldrh	r6, [r0, #10]
    dd50:	8880      	ldrh	r0, [r0, #4]
    dd52:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    dd56:	4439      	add	r1, r7
    dd58:	460f      	mov	r7, r1
    dd5a:	4285      	cmp	r5, r0
    dd5c:	d102      	bne.n	dd64 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    dd5e:	2000      	movs	r0, #0
    dd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd64:	b10a      	cbz	r2, dd6a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    dd66:	1cc8      	adds	r0, r1, #3
    dd68:	6010      	str	r0, [r2, #0]
    dd6a:	b123      	cbz	r3, dd76 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    dd6c:	7f22      	ldrb	r2, [r4, #28]
    dd6e:	1cf9      	adds	r1, r7, #3
    dd70:	4618      	mov	r0, r3
    dd72:	f7ff f80b 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd76:	883f      	ldrh	r7, [r7, #0]
    dd78:	f104 0108 	add.w	r1, r4, #8
    dd7c:	4620      	mov	r0, r4
    dd7e:	f7ff fd76 	bl	d86e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dd82:	42b5      	cmp	r5, r6
    dd84:	d101      	bne.n	dd8a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    dd86:	8920      	ldrh	r0, [r4, #8]
    dd88:	8160      	strh	r0, [r4, #10]
    dd8a:	4638      	mov	r0, r7
    dd8c:	e7e8      	b.n	dd60 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000dd8e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    dd8e:	4401      	add	r1, r0
    dd90:	1d89      	adds	r1, r1, #6
    dd92:	4351      	muls	r1, r2
    dd94:	b28a      	uxth	r2, r1
    dd96:	2100      	movs	r1, #0
    dd98:	2845      	cmp	r0, #69	; 0x45
    dd9a:	d201      	bcs.n	dda0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    dd9c:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    dda0:	3224      	adds	r2, #36	; 0x24
    dda2:	1850      	adds	r0, r2, r1
    dda4:	b280      	uxth	r0, r0
    dda6:	4770      	bx	lr

0000dda8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    dda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ddac:	4688      	mov	r8, r1
    ddae:	88c1      	ldrh	r1, [r0, #6]
    ddb0:	4604      	mov	r4, r0
    ddb2:	8900      	ldrh	r0, [r0, #8]
    ddb4:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    ddb8:	f104 0524 	add.w	r5, r4, #36	; 0x24
    ddbc:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ddc0:	eb05 0906 	add.w	r9, r5, r6
    ddc4:	f7ff fd74 	bl	d8b0 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ddc8:	2200      	movs	r2, #0
    ddca:	b998      	cbnz	r0, ddf4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    ddcc:	8820      	ldrh	r0, [r4, #0]
    ddce:	2845      	cmp	r0, #69	; 0x45
    ddd0:	d200      	bcs.n	ddd4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    ddd2:	2045      	movs	r0, #69	; 0x45
    ddd4:	42b7      	cmp	r7, r6
    ddd6:	d906      	bls.n	dde6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ddd8:	7f23      	ldrb	r3, [r4, #28]
    ddda:	1bb9      	subs	r1, r7, r6
    dddc:	1ac9      	subs	r1, r1, r3
    ddde:	1f89      	subs	r1, r1, #6
    dde0:	4281      	cmp	r1, r0
    dde2:	da00      	bge.n	dde6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dde4:	4608      	mov	r0, r1
    dde6:	89e1      	ldrh	r1, [r4, #14]
    dde8:	b111      	cbz	r1, ddf0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    ddea:	f8b9 3000 	ldrh.w	r3, [r9]
    ddee:	1ac0      	subs	r0, r0, r3
    ddf0:	4540      	cmp	r0, r8
    ddf2:	da03      	bge.n	ddfc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    ddf4:	8262      	strh	r2, [r4, #18]
    ddf6:	2000      	movs	r0, #0
    ddf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ddfc:	7f20      	ldrb	r0, [r4, #28]
    ddfe:	4429      	add	r1, r5
    de00:	1d80      	adds	r0, r0, #6
    de02:	4430      	add	r0, r6
    de04:	4408      	add	r0, r1
    de06:	f8a4 8012 	strh.w	r8, [r4, #18]
    de0a:	1ec0      	subs	r0, r0, #3
    de0c:	e7f4      	b.n	ddf8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000de0e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    de0e:	2100      	movs	r1, #0
    de10:	81c1      	strh	r1, [r0, #14]
    de12:	8241      	strh	r1, [r0, #18]
    de14:	7581      	strb	r1, [r0, #22]
    de16:	4770      	bx	lr

0000de18 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    de18:	b570      	push	{r4, r5, r6, lr}
    de1a:	2300      	movs	r3, #0
    de1c:	2908      	cmp	r1, #8
    de1e:	d204      	bcs.n	de2a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    de20:	f240 11cb 	movw	r1, #459	; 0x1cb
    de24:	2015      	movs	r0, #21
    de26:	f7f6 fba1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de2a:	6802      	ldr	r2, [r0, #0]
    de2c:	b90a      	cbnz	r2, de32 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    de2e:	e01e      	b.n	de6e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    de30:	4610      	mov	r0, r2
    de32:	6802      	ldr	r2, [r0, #0]
    de34:	8893      	ldrh	r3, [r2, #4]
    de36:	428b      	cmp	r3, r1
    de38:	d002      	beq.n	de40 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    de3a:	6813      	ldr	r3, [r2, #0]
    de3c:	2b00      	cmp	r3, #0
    de3e:	d1f7      	bne.n	de30 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    de40:	8894      	ldrh	r4, [r2, #4]
    de42:	4613      	mov	r3, r2
    de44:	428c      	cmp	r4, r1
    de46:	d101      	bne.n	de4c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    de48:	6811      	ldr	r1, [r2, #0]
    de4a:	e00d      	b.n	de68 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    de4c:	f101 0508 	add.w	r5, r1, #8
    de50:	b2ae      	uxth	r6, r5
    de52:	2500      	movs	r5, #0
    de54:	42b4      	cmp	r4, r6
    de56:	d309      	bcc.n	de6c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    de58:	1a64      	subs	r4, r4, r1
    de5a:	4411      	add	r1, r2
    de5c:	600d      	str	r5, [r1, #0]
    de5e:	808c      	strh	r4, [r1, #4]
    de60:	6802      	ldr	r2, [r0, #0]
    de62:	6812      	ldr	r2, [r2, #0]
    de64:	6002      	str	r2, [r0, #0]
    de66:	600a      	str	r2, [r1, #0]
    de68:	6001      	str	r1, [r0, #0]
    de6a:	e000      	b.n	de6e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    de6c:	2300      	movs	r3, #0
    de6e:	4618      	mov	r0, r3
    de70:	bd70      	pop	{r4, r5, r6, pc}

0000de72 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    de72:	b510      	push	{r4, lr}
    de74:	000c      	movs	r4, r1
    de76:	d006      	beq.n	de86 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    de78:	2c08      	cmp	r4, #8
    de7a:	d209      	bcs.n	de90 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    de7c:	f240 1195 	movw	r1, #405	; 0x195
    de80:	2015      	movs	r0, #21
    de82:	f7f6 fb73 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de86:	b108      	cbz	r0, de8c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    de88:	2100      	movs	r1, #0
    de8a:	6001      	str	r1, [r0, #0]
    de8c:	2000      	movs	r0, #0
    de8e:	bd10      	pop	{r4, pc}
    de90:	b118      	cbz	r0, de9a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    de92:	b2a1      	uxth	r1, r4
    de94:	6800      	ldr	r0, [r0, #0]
    de96:	f000 f814 	bl	dec2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    de9a:	1d20      	adds	r0, r4, #4
    de9c:	bd10      	pop	{r4, pc}

0000de9e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    de9e:	2100      	movs	r1, #0
    dea0:	6802      	ldr	r2, [r0, #0]
    dea2:	e003      	b.n	deac <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dea4:	8893      	ldrh	r3, [r2, #4]
    dea6:	6812      	ldr	r2, [r2, #0]
    dea8:	4419      	add	r1, r3
    deaa:	b289      	uxth	r1, r1
    deac:	2a00      	cmp	r2, #0
    deae:	d1f9      	bne.n	dea4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    deb0:	f000 b807 	b.w	dec2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000deb4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    deb4:	2300      	movs	r3, #0
    deb6:	600b      	str	r3, [r1, #0]
    deb8:	808a      	strh	r2, [r1, #4]
    deba:	6802      	ldr	r2, [r0, #0]
    debc:	600a      	str	r2, [r1, #0]
    debe:	6001      	str	r1, [r0, #0]
    dec0:	4770      	bx	lr
    dec2:	2300      	movs	r3, #0
    dec4:	6043      	str	r3, [r0, #4]
    dec6:	1d02      	adds	r2, r0, #4
    dec8:	8101      	strh	r1, [r0, #8]
    deca:	6002      	str	r2, [r0, #0]
    decc:	4770      	bx	lr

0000dece <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    dece:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    ded2:	3aff      	subs	r2, #255	; 0xff
    ded4:	d000      	beq.n	ded8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    ded6:	b109      	cbz	r1, dedc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    ded8:	2000      	movs	r0, #0
    deda:	4770      	bx	lr
    dedc:	f7f6 be26 	b.w	4b2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000dee0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    dee0:	b570      	push	{r4, r5, r6, lr}
    dee2:	4605      	mov	r5, r0
    dee4:	460c      	mov	r4, r1
    dee6:	4608      	mov	r0, r1
    dee8:	f000 f854 	bl	df94 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    deec:	b108      	cbz	r0, def2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    deee:	2010      	movs	r0, #16
    def0:	bd70      	pop	{r4, r5, r6, pc}
    def2:	b10d      	cbz	r5, def8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    def4:	2007      	movs	r0, #7
    def6:	bd70      	pop	{r4, r5, r6, pc}
    def8:	7025      	strb	r5, [r4, #0]
    defa:	2000      	movs	r0, #0
    defc:	8060      	strh	r0, [r4, #2]
    defe:	bd70      	pop	{r4, r5, r6, pc}
    df00:	b510      	push	{r4, lr}
    df02:	4604      	mov	r4, r0
    df04:	f7f6 fe5e 	bl	4bc4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    df08:	42a0      	cmp	r0, r4
    df0a:	d901      	bls.n	df10 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    df0c:	2001      	movs	r0, #1
    df0e:	bd10      	pop	{r4, pc}
    df10:	2000      	movs	r0, #0
    df12:	bd10      	pop	{r4, pc}
    df14:	4770      	bx	lr

0000df16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    df16:	b570      	push	{r4, r5, r6, lr}
    df18:	460e      	mov	r6, r1
    df1a:	461d      	mov	r5, r3
    df1c:	4611      	mov	r1, r2
    df1e:	f000 f811 	bl	df44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    df22:	4604      	mov	r4, r0
    df24:	4629      	mov	r1, r5
    df26:	4630      	mov	r0, r6
    df28:	f000 f803 	bl	df32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    df2c:	4420      	add	r0, r4
    df2e:	1d00      	adds	r0, r0, #4
    df30:	bd70      	pop	{r4, r5, r6, pc}
    df32:	b510      	push	{r4, lr}
    df34:	460a      	mov	r2, r1
    df36:	2101      	movs	r1, #1
    df38:	f7ff ff29 	bl	dd8e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    df3c:	1cc0      	adds	r0, r0, #3
    df3e:	f020 0003 	bic.w	r0, r0, #3
    df42:	bd10      	pop	{r4, pc}
    df44:	b510      	push	{r4, lr}
    df46:	460a      	mov	r2, r1
    df48:	2101      	movs	r1, #1
    df4a:	f7ff ff20 	bl	dd8e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    df4e:	1cc0      	adds	r0, r0, #3
    df50:	f020 0003 	bic.w	r0, r0, #3
    df54:	bd10      	pop	{r4, pc}
    df56:	2800      	cmp	r0, #0
    df58:	db09      	blt.n	df6e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    df5a:	f000 021f 	and.w	r2, r0, #31
    df5e:	2101      	movs	r1, #1
    df60:	4091      	lsls	r1, r2
    df62:	0940      	lsrs	r0, r0, #5
    df64:	0080      	lsls	r0, r0, #2
    df66:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    df6a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    df6e:	4770      	bx	lr
    df70:	5840      	ldr	r0, [r0, r1]
    df72:	2800      	cmp	r0, #0
    df74:	d000      	beq.n	df78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    df76:	2001      	movs	r0, #1
    df78:	4770      	bx	lr

0000df7a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    df7a:	f7f6 bfe9 	b.w	4f50 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000df7e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    df7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    df82:	2000      	movs	r0, #0
    df84:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    df88:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    df8c:	2001      	movs	r0, #1
    df8e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    df92:	4770      	bx	lr

0000df94 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    df94:	b108      	cbz	r0, df9a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    df96:	2000      	movs	r0, #0
    df98:	4770      	bx	lr
    df9a:	2001      	movs	r0, #1
    df9c:	4770      	bx	lr

0000df9e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    df9e:	f7f7 b929 	b.w	51f4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dfa2 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dfa2:	f7f7 b917 	b.w	51d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dfa6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dfa6:	b510      	push	{r4, lr}
    dfa8:	2900      	cmp	r1, #0
    dfaa:	4604      	mov	r4, r0
    dfac:	f04f 0106 	mov.w	r1, #6
    dfb0:	d002      	beq.n	dfb8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dfb2:	f7f6 fb69 	bl	4688 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dfb6:	e001      	b.n	dfbc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dfb8:	f7f6 fb82 	bl	46c0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dfbc:	7960      	ldrb	r0, [r4, #5]
    dfbe:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    dfc2:	7160      	strb	r0, [r4, #5]
    dfc4:	bd10      	pop	{r4, pc}

0000dfc6 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dfc6:	4770      	bx	lr

0000dfc8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dfc8:	b530      	push	{r4, r5, lr}
    dfca:	460c      	mov	r4, r1
    dfcc:	4605      	mov	r5, r0
    dfce:	b08d      	sub	sp, #52	; 0x34
    dfd0:	f04f 0103 	mov.w	r1, #3
    dfd4:	f104 0003 	add.w	r0, r4, #3
    dfd8:	b112      	cbz	r2, dfe0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dfda:	f7f6 fb55 	bl	4688 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dfde:	e001      	b.n	dfe4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dfe0:	f7f6 fb6e 	bl	46c0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dfe4:	7960      	ldrb	r0, [r4, #5]
    dfe6:	220d      	movs	r2, #13
    dfe8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    dfec:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dff0:	7160      	strb	r0, [r4, #5]
    dff2:	2100      	movs	r1, #0
    dff4:	a804      	add	r0, sp, #16
    dff6:	f7fe ff43 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dffa:	78e0      	ldrb	r0, [r4, #3]
    dffc:	f88d 001f 	strb.w	r0, [sp, #31]
    e000:	7920      	ldrb	r0, [r4, #4]
    e002:	f88d 001e 	strb.w	r0, [sp, #30]
    e006:	7960      	ldrb	r0, [r4, #5]
    e008:	f88d 001d 	strb.w	r0, [sp, #29]
    e00c:	2210      	movs	r2, #16
    e00e:	4629      	mov	r1, r5
    e010:	4668      	mov	r0, sp
    e012:	f7fe febb 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e016:	4668      	mov	r0, sp
    e018:	f7ff ffaf 	bl	df7a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e01c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e020:	7020      	strb	r0, [r4, #0]
    e022:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e026:	7060      	strb	r0, [r4, #1]
    e028:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e02c:	70a0      	strb	r0, [r4, #2]
    e02e:	b00d      	add	sp, #52	; 0x34
    e030:	bd30      	pop	{r4, r5, pc}

0000e032 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    e032:	b530      	push	{r4, r5, lr}
    e034:	b08d      	sub	sp, #52	; 0x34
    e036:	460c      	mov	r4, r1
    e038:	4605      	mov	r5, r0
    e03a:	220d      	movs	r2, #13
    e03c:	2100      	movs	r1, #0
    e03e:	a804      	add	r0, sp, #16
    e040:	f7fe ff1e 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e044:	78e0      	ldrb	r0, [r4, #3]
    e046:	f88d 001f 	strb.w	r0, [sp, #31]
    e04a:	7920      	ldrb	r0, [r4, #4]
    e04c:	f88d 001e 	strb.w	r0, [sp, #30]
    e050:	7960      	ldrb	r0, [r4, #5]
    e052:	f88d 001d 	strb.w	r0, [sp, #29]
    e056:	2210      	movs	r2, #16
    e058:	4629      	mov	r1, r5
    e05a:	4668      	mov	r0, sp
    e05c:	f7fe fe96 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e060:	4668      	mov	r0, sp
    e062:	f7ff ff8a 	bl	df7a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e066:	7820      	ldrb	r0, [r4, #0]
    e068:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    e06c:	4288      	cmp	r0, r1
    e06e:	d10c      	bne.n	e08a <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e070:	7860      	ldrb	r0, [r4, #1]
    e072:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    e076:	4288      	cmp	r0, r1
    e078:	d107      	bne.n	e08a <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e07a:	78a0      	ldrb	r0, [r4, #2]
    e07c:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    e080:	4288      	cmp	r0, r1
    e082:	d102      	bne.n	e08a <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e084:	2001      	movs	r0, #1
    e086:	b00d      	add	sp, #52	; 0x34
    e088:	bd30      	pop	{r4, r5, pc}
    e08a:	2000      	movs	r0, #0
    e08c:	e7fb      	b.n	e086 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000e08e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e08e:	f7f7 bc75 	b.w	597c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    e092:	b510      	push	{r4, lr}
    e094:	2801      	cmp	r0, #1
    e096:	d008      	beq.n	e0aa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    e098:	2802      	cmp	r0, #2
    e09a:	d004      	beq.n	e0a6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    e09c:	f240 31ad 	movw	r1, #941	; 0x3ad
    e0a0:	2006      	movs	r0, #6
    e0a2:	f7f6 fa63 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0a6:	2001      	movs	r0, #1
    e0a8:	bd10      	pop	{r4, pc}
    e0aa:	2000      	movs	r0, #0
    e0ac:	bd10      	pop	{r4, pc}
    e0ae:	2900      	cmp	r1, #0
    e0b0:	d004      	beq.n	e0bc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    e0b2:	2801      	cmp	r0, #1
    e0b4:	d003      	beq.n	e0be <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e0b6:	2901      	cmp	r1, #1
    e0b8:	d001      	beq.n	e0be <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e0ba:	2002      	movs	r0, #2
    e0bc:	4770      	bx	lr
    e0be:	2001      	movs	r0, #1
    e0c0:	4770      	bx	lr
    e0c2:	f7ff bdb1 	b.w	dc28 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e0c6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e0c6:	2101      	movs	r1, #1
    e0c8:	f7f8 b86c 	b.w	61a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e0cc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e0cc:	b510      	push	{r4, lr}
    e0ce:	f002 f806 	bl	100de <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e0d2:	b118      	cbz	r0, e0dc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0d8:	f7fd bbfe 	b.w	b8d8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e0dc:	20ff      	movs	r0, #255	; 0xff
    e0de:	bd10      	pop	{r4, pc}

0000e0e0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e0e0:	b510      	push	{r4, lr}
    e0e2:	f7f8 f8a7 	bl	6234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e0e6:	2810      	cmp	r0, #16
    e0e8:	d003      	beq.n	e0f2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e0ea:	f7f8 f873 	bl	61d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e0ee:	2810      	cmp	r0, #16
    e0f0:	d100      	bne.n	e0f4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e0f2:	2008      	movs	r0, #8
    e0f4:	bd10      	pop	{r4, pc}

0000e0f6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e0f6:	b510      	push	{r4, lr}
    e0f8:	f7f8 f89c 	bl	6234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e0fc:	2810      	cmp	r0, #16
    e0fe:	d007      	beq.n	e110 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e100:	f7f8 f868 	bl	61d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e104:	2810      	cmp	r0, #16
    e106:	d003      	beq.n	e110 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e108:	f7f8 f8dc 	bl	62c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    e10c:	2001      	movs	r0, #1
    e10e:	bd10      	pop	{r4, pc}
    e110:	2000      	movs	r0, #0
    e112:	bd10      	pop	{r4, pc}

0000e114 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e114:	b510      	push	{r4, lr}
    e116:	f7f8 f88d 	bl	6234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e11a:	2810      	cmp	r0, #16
    e11c:	d003      	beq.n	e126 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e11e:	f7f8 f919 	bl	6354 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    e122:	2001      	movs	r0, #1
    e124:	bd10      	pop	{r4, pc}
    e126:	2000      	movs	r0, #0
    e128:	bd10      	pop	{r4, pc}

0000e12a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e12a:	b570      	push	{r4, r5, r6, lr}
    e12c:	460e      	mov	r6, r1
    e12e:	b08c      	sub	sp, #48	; 0x30
    e130:	4614      	mov	r4, r2
    e132:	4601      	mov	r1, r0
    e134:	461d      	mov	r5, r3
    e136:	2210      	movs	r2, #16
    e138:	4668      	mov	r0, sp
    e13a:	f000 f9b8 	bl	e4ae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e13e:	2210      	movs	r2, #16
    e140:	4631      	mov	r1, r6
    e142:	a804      	add	r0, sp, #16
    e144:	f000 f9b3 	bl	e4ae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e148:	4668      	mov	r0, sp
    e14a:	f7ff ff16 	bl	df7a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e14e:	a908      	add	r1, sp, #32
    e150:	f04f 0210 	mov.w	r2, #16
    e154:	4628      	mov	r0, r5
    e156:	b11c      	cbz	r4, e160 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e158:	f000 f9a9 	bl	e4ae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e15c:	b00c      	add	sp, #48	; 0x30
    e15e:	bd70      	pop	{r4, r5, r6, pc}
    e160:	f7fe fe14 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e164:	e7fa      	b.n	e15c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    e166:	0781      	lsls	r1, r0, #30
    e168:	d501      	bpl.n	e16e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    e16a:	2002      	movs	r0, #2
    e16c:	4770      	bx	lr
    e16e:	07c0      	lsls	r0, r0, #31
    e170:	d0fc      	beq.n	e16c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    e172:	2001      	movs	r0, #1
    e174:	4770      	bx	lr

0000e176 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    e176:	b530      	push	{r4, r5, lr}
    e178:	4605      	mov	r5, r0
    e17a:	7900      	ldrb	r0, [r0, #4]
    e17c:	0940      	lsrs	r0, r0, #5
    e17e:	d10e      	bne.n	e19e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    e180:	2400      	movs	r4, #0
    e182:	4623      	mov	r3, r4
    e184:	5ce8      	ldrb	r0, [r5, r3]
    e186:	f000 f855 	bl	e234 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>
    e18a:	1c5b      	adds	r3, r3, #1
    e18c:	4420      	add	r0, r4
    e18e:	b2db      	uxtb	r3, r3
    e190:	b2c4      	uxtb	r4, r0
    e192:	2b05      	cmp	r3, #5
    e194:	d3f6      	bcc.n	e184 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    e196:	2c01      	cmp	r4, #1
    e198:	d901      	bls.n	e19e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    e19a:	2001      	movs	r0, #1
    e19c:	bd30      	pop	{r4, r5, pc}
    e19e:	2000      	movs	r0, #0
    e1a0:	bd30      	pop	{r4, r5, pc}

0000e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e1a2:	b510      	push	{r4, lr}
    e1a4:	460c      	mov	r4, r1
    e1a6:	2100      	movs	r1, #0
    e1a8:	f7ff fe91 	bl	dece <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e1ac:	6060      	str	r0, [r4, #4]
    e1ae:	b110      	cbz	r0, e1b6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    e1b0:	2000      	movs	r0, #0
    e1b2:	7020      	strb	r0, [r4, #0]
    e1b4:	bd10      	pop	{r4, pc}
    e1b6:	2002      	movs	r0, #2
    e1b8:	bd10      	pop	{r4, pc}

0000e1ba <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e1ba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e1be:	4348      	muls	r0, r1
    e1c0:	4770      	bx	lr

0000e1c2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e1c2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e1c6:	fbb0 f0f1 	udiv	r0, r0, r1
    e1ca:	b280      	uxth	r0, r0
    e1cc:	4770      	bx	lr

0000e1ce <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e1ce:	b570      	push	{r4, r5, r6, lr}
    e1d0:	4604      	mov	r4, r0
    e1d2:	4290      	cmp	r0, r2
    e1d4:	d20b      	bcs.n	e1ee <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e1d6:	1b10      	subs	r0, r2, r4
    e1d8:	2865      	cmp	r0, #101	; 0x65
    e1da:	d200      	bcs.n	e1de <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e1dc:	2065      	movs	r0, #101	; 0x65
    e1de:	1825      	adds	r5, r4, r0
    e1e0:	428d      	cmp	r5, r1
    e1e2:	d803      	bhi.n	e1ec <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e1e4:	2104      	movs	r1, #4
    e1e6:	f7f3 fc9d 	bl	1b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e1ea:	b108      	cbz	r0, e1f0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e1ec:	4620      	mov	r0, r4
    e1ee:	bd70      	pop	{r4, r5, r6, pc}
    e1f0:	4628      	mov	r0, r5
    e1f2:	bd70      	pop	{r4, r5, r6, pc}

0000e1f4 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>:
    e1f4:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    e1f8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    e1fc:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e200:	4408      	add	r0, r1
    e202:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    e206:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    e20a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e20e:	4408      	add	r0, r1
    e210:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    e214:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    e218:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    e21c:	4408      	add	r0, r1
    e21e:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    e222:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    e226:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    e22a:	4408      	add	r0, r1
    e22c:	b281      	uxth	r1, r0
    e22e:	eb01 4010 	add.w	r0, r1, r0, lsr #16
    e232:	4770      	bx	lr

0000e234 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>:
    e234:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e238:	2255      	movs	r2, #85	; 0x55
    e23a:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e23e:	4408      	add	r0, r1
    e240:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e244:	2233      	movs	r2, #51	; 0x33
    e246:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e24a:	4408      	add	r0, r1
    e24c:	f000 010f 	and.w	r1, r0, #15
    e250:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e254:	4770      	bx	lr

0000e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e256:	b510      	push	{r4, lr}
    e258:	f1a2 030f 	sub.w	r3, r2, #15
    e25c:	290c      	cmp	r1, #12
    e25e:	d24f      	bcs.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e260:	e8df f001 	tbb	[pc, r1]
    e264:	120d0806 	.word	0x120d0806
    e268:	2f271815 	.word	0x2f271815
    e26c:	3d354c32 	.word	0x3d354c32
    e270:	b3a2      	cbz	r2, e2dc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    e272:	e045      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e274:	2a07      	cmp	r2, #7
    e276:	d045      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e278:	2a08      	cmp	r2, #8
    e27a:	d043      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e27c:	e040      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e27e:	2a0c      	cmp	r2, #12
    e280:	d040      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e282:	2a0b      	cmp	r2, #11
    e284:	d03e      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e286:	e03b      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e288:	2a0d      	cmp	r2, #13
    e28a:	d03b      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e28c:	e038      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e28e:	2b0c      	cmp	r3, #12
    e290:	d938      	bls.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e292:	e035      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e294:	2a12      	cmp	r2, #18
    e296:	d035      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e298:	2a11      	cmp	r2, #17
    e29a:	d033      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e29c:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e2a0:	b120      	cbz	r0, e2ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    e2a2:	2a12      	cmp	r2, #18
    e2a4:	d32c      	bcc.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2a6:	2a1a      	cmp	r2, #26
    e2a8:	d92c      	bls.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2aa:	e029      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2ac:	2a16      	cmp	r2, #22
    e2ae:	d2fa      	bcs.n	e2a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    e2b0:	e026      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2b2:	2b03      	cmp	r3, #3
    e2b4:	d926      	bls.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2b6:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e2ba:	b308      	cbz	r0, e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2bc:	2a1b      	cmp	r2, #27
    e2be:	d921      	bls.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2c0:	e01e      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2c2:	2a04      	cmp	r2, #4
    e2c4:	d01e      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2c6:	e01b      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2c8:	2a01      	cmp	r2, #1
    e2ca:	d01b      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2cc:	e018      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2ce:	2a1c      	cmp	r2, #28
    e2d0:	d018      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2d2:	2a1d      	cmp	r2, #29
    e2d4:	d016      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2d6:	2a1e      	cmp	r2, #30
    e2d8:	d014      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2da:	e011      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2dc:	e012      	b.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2de:	2a1f      	cmp	r2, #31
    e2e0:	d010      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2e2:	2a20      	cmp	r2, #32
    e2e4:	d00e      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2e6:	2a21      	cmp	r2, #33	; 0x21
    e2e8:	d00c      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2ea:	2a22      	cmp	r2, #34	; 0x22
    e2ec:	d00a      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2ee:	2a23      	cmp	r2, #35	; 0x23
    e2f0:	d008      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2f2:	2a24      	cmp	r2, #36	; 0x24
    e2f4:	d006      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2f6:	2a26      	cmp	r2, #38	; 0x26
    e2f8:	d004      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e2fa:	e001      	b.n	e300 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e2fc:	2a05      	cmp	r2, #5
    e2fe:	d001      	beq.n	e304 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e300:	2000      	movs	r0, #0
    e302:	bd10      	pop	{r4, pc}
    e304:	2001      	movs	r0, #1
    e306:	bd10      	pop	{r4, pc}

0000e308 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e308:	280c      	cmp	r0, #12
    e30a:	d013      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e30c:	280b      	cmp	r0, #11
    e30e:	d011      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e310:	280d      	cmp	r0, #13
    e312:	d00f      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e314:	281f      	cmp	r0, #31
    e316:	d00d      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e318:	2820      	cmp	r0, #32
    e31a:	d00b      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e31c:	2821      	cmp	r0, #33	; 0x21
    e31e:	d009      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e320:	2822      	cmp	r0, #34	; 0x22
    e322:	d007      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e324:	2823      	cmp	r0, #35	; 0x23
    e326:	d005      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e328:	2824      	cmp	r0, #36	; 0x24
    e32a:	d003      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e32c:	2826      	cmp	r0, #38	; 0x26
    e32e:	d001      	beq.n	e334 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e330:	2000      	movs	r0, #0
    e332:	4770      	bx	lr
    e334:	2001      	movs	r0, #1
    e336:	4770      	bx	lr

0000e338 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e338:	f011 0f0c 	tst.w	r1, #12
    e33c:	d016      	beq.n	e36c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e33e:	074a      	lsls	r2, r1, #29
    e340:	f44f 7116 	mov.w	r1, #600	; 0x258
    e344:	2a00      	cmp	r2, #0
    e346:	da02      	bge.n	e34e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e348:	f04f 0210 	mov.w	r2, #16
    e34c:	e001      	b.n	e352 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e34e:	f04f 0240 	mov.w	r2, #64	; 0x40
    e352:	da01      	bge.n	e358 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e354:	f04f 0196 	mov.w	r1, #150	; 0x96
    e358:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e35c:	eba0 0301 	sub.w	r3, r0, r1
    e360:	4288      	cmp	r0, r1
    e362:	d910      	bls.n	e386 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e364:	fb93 f0f2 	sdiv	r0, r3, r2
    e368:	b280      	uxth	r0, r0
    e36a:	4770      	bx	lr
    e36c:	2902      	cmp	r1, #2
    e36e:	d002      	beq.n	e376 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    e370:	2870      	cmp	r0, #112	; 0x70
    e372:	d80a      	bhi.n	e38a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    e374:	e007      	b.n	e386 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e376:	283c      	cmp	r0, #60	; 0x3c
    e378:	d905      	bls.n	e386 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e37a:	383c      	subs	r0, #60	; 0x3c
    e37c:	17c1      	asrs	r1, r0, #31
    e37e:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e382:	1080      	asrs	r0, r0, #2
    e384:	e7f0      	b.n	e368 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e386:	2000      	movs	r0, #0
    e388:	e7ee      	b.n	e368 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e38a:	3870      	subs	r0, #112	; 0x70
    e38c:	17c1      	asrs	r1, r0, #31
    e38e:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e392:	10c0      	asrs	r0, r0, #3
    e394:	e7e8      	b.n	e368 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000e396 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e396:	6809      	ldr	r1, [r1, #0]
    e398:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    e39c:	4770      	bx	lr

0000e39e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    e39e:	2801      	cmp	r0, #1
    e3a0:	d002      	beq.n	e3a8 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e3a2:	2802      	cmp	r0, #2
    e3a4:	d000      	beq.n	e3a8 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e3a6:	2000      	movs	r0, #0
    e3a8:	4770      	bx	lr

0000e3aa <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    e3aa:	b510      	push	{r4, lr}
    e3ac:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e3b0:	2901      	cmp	r1, #1
    e3b2:	d006      	beq.n	e3c2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    e3b4:	2902      	cmp	r1, #2
    e3b6:	d005      	beq.n	e3c4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    e3b8:	f240 31b1 	movw	r1, #945	; 0x3b1
    e3bc:	2029      	movs	r0, #41	; 0x29
    e3be:	f7f6 f8d5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3c2:	b108      	cbz	r0, e3c8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    e3c4:	4610      	mov	r0, r2
    e3c6:	bd10      	pop	{r4, pc}
    e3c8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    e3cc:	bd10      	pop	{r4, pc}

0000e3ce <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    e3ce:	b530      	push	{r4, r5, lr}
    e3d0:	242a      	movs	r4, #42	; 0x2a
    e3d2:	2523      	movs	r5, #35	; 0x23
    e3d4:	2a16      	cmp	r2, #22
    e3d6:	d105      	bne.n	e3e4 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    e3d8:	280c      	cmp	r0, #12
    e3da:	d007      	beq.n	e3ec <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e3dc:	280d      	cmp	r0, #13
    e3de:	d005      	beq.n	e3ec <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e3e0:	281f      	cmp	r0, #31
    e3e2:	d005      	beq.n	e3f0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    e3e4:	b171      	cbz	r1, e404 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    e3e6:	2a16      	cmp	r2, #22
    e3e8:	d10c      	bne.n	e404 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    e3ea:	e004      	b.n	e3f6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    e3ec:	701c      	strb	r4, [r3, #0]
    e3ee:	e000      	b.n	e3f2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    e3f0:	701d      	strb	r5, [r3, #0]
    e3f2:	2001      	movs	r0, #1
    e3f4:	bd30      	pop	{r4, r5, pc}
    e3f6:	7808      	ldrb	r0, [r1, #0]
    e3f8:	2801      	cmp	r0, #1
    e3fa:	d0f7      	beq.n	e3ec <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e3fc:	2800      	cmp	r0, #0
    e3fe:	d0f5      	beq.n	e3ec <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e400:	2816      	cmp	r0, #22
    e402:	d0f5      	beq.n	e3f0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    e404:	2000      	movs	r0, #0
    e406:	bd30      	pop	{r4, r5, pc}

0000e408 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e40a:	b2cf      	uxtb	r7, r1
    e40c:	4606      	mov	r6, r0
    e40e:	f3c1 2407 	ubfx	r4, r1, #8, #8
    e412:	4621      	mov	r1, r4
    e414:	4638      	mov	r0, r7
    e416:	f000 f8ca 	bl	e5ae <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    e41a:	b2f5      	uxtb	r5, r6
    e41c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    e420:	b920      	cbnz	r0, e42c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    e422:	4631      	mov	r1, r6
    e424:	4628      	mov	r0, r5
    e426:	f000 f8c2 	bl	e5ae <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    e42a:	b140      	cbz	r0, e43e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    e42c:	4027      	ands	r7, r4
    e42e:	4035      	ands	r5, r6
    e430:	403d      	ands	r5, r7
    e432:	4644      	mov	r4, r8
    e434:	f365 0407 	bfi	r4, r5, #0, #8
    e438:	f365 240f 	bfi	r4, r5, #8, #8
    e43c:	e006      	b.n	e44c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    e43e:	4025      	ands	r5, r4
    e440:	4644      	mov	r4, r8
    e442:	f365 0407 	bfi	r4, r5, #0, #8
    e446:	403e      	ands	r6, r7
    e448:	f366 240f 	bfi	r4, r6, #8, #8
    e44c:	b2e0      	uxtb	r0, r4
    e44e:	f7ff fe8a 	bl	e166 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e452:	f88d 0000 	strb.w	r0, [sp]
    e456:	f3c4 2007 	ubfx	r0, r4, #8, #8
    e45a:	f7ff fe84 	bl	e166 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e45e:	f88d 0001 	strb.w	r0, [sp, #1]
    e462:	f8bd 0000 	ldrh.w	r0, [sp]
    e466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e468 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e46c:	460c      	mov	r4, r1
    e46e:	4605      	mov	r5, r0
    e470:	68c6      	ldr	r6, [r0, #12]
    e472:	f7f3 ffb1 	bl	23d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e476:	b198      	cbz	r0, e4a0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    e478:	b1bc      	cbz	r4, e4aa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e47a:	4630      	mov	r0, r6
    e47c:	68e9      	ldr	r1, [r5, #12]
    e47e:	f7f3 fc9f 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e482:	2800      	cmp	r0, #0
    e484:	dd11      	ble.n	e4aa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e486:	4420      	add	r0, r4
    e488:	1e40      	subs	r0, r0, #1
    e48a:	fbb0 f7f4 	udiv	r7, r0, r4
    e48e:	fb07 f104 	mul.w	r1, r7, r4
    e492:	4630      	mov	r0, r6
    e494:	f7f3 fc62 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e498:	60e8      	str	r0, [r5, #12]
    e49a:	4638      	mov	r0, r7
    e49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4a0:	f240 2136 	movw	r1, #566	; 0x236
    e4a4:	2029      	movs	r0, #41	; 0x29
    e4a6:	f7f6 f861 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4aa:	2000      	movs	r0, #0
    e4ac:	e7f6      	b.n	e49c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000e4ae <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e4ae:	b530      	push	{r4, r5, lr}
    e4b0:	4613      	mov	r3, r2
    e4b2:	e006      	b.n	e4c2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e4b4:	18cc      	adds	r4, r1, r3
    e4b6:	1ad5      	subs	r5, r2, r3
    e4b8:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e4bc:	1e5b      	subs	r3, r3, #1
    e4be:	5544      	strb	r4, [r0, r5]
    e4c0:	b2db      	uxtb	r3, r3
    e4c2:	2b00      	cmp	r3, #0
    e4c4:	d1f6      	bne.n	e4b4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e4c6:	bd30      	pop	{r4, r5, pc}

0000e4c8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    e4c8:	b538      	push	{r3, r4, r5, lr}
    e4ca:	4605      	mov	r5, r0
    e4cc:	460c      	mov	r4, r1
    e4ce:	4668      	mov	r0, sp
    e4d0:	f7fd ff12 	bl	c2f8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e4d4:	b310      	cbz	r0, e51c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e4d6:	f99d 0000 	ldrsb.w	r0, [sp]
    e4da:	7260      	strb	r0, [r4, #9]
    e4dc:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    e4e0:	72a1      	strb	r1, [r4, #10]
    e4e2:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e4e6:	2200      	movs	r2, #0
    e4e8:	1a41      	subs	r1, r0, r1
    e4ea:	d500      	bpl.n	e4ee <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e4ec:	4249      	negs	r1, r1
    e4ee:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    e4f2:	428b      	cmp	r3, r1
    e4f4:	dc10      	bgt.n	e518 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e4f6:	2bff      	cmp	r3, #255	; 0xff
    e4f8:	d00e      	beq.n	e518 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e4fa:	7b21      	ldrb	r1, [r4, #12]
    e4fc:	1c49      	adds	r1, r1, #1
    e4fe:	b2c9      	uxtb	r1, r1
    e500:	7321      	strb	r1, [r4, #12]
    e502:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e506:	4299      	cmp	r1, r3
    e508:	d802      	bhi.n	e510 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e50a:	7ae1      	ldrb	r1, [r4, #11]
    e50c:	297f      	cmp	r1, #127	; 0x7f
    e50e:	d103      	bne.n	e518 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e510:	72e0      	strb	r0, [r4, #11]
    e512:	2000      	movs	r0, #0
    e514:	7320      	strb	r0, [r4, #12]
    e516:	2201      	movs	r2, #1
    e518:	4610      	mov	r0, r2
    e51a:	bd38      	pop	{r3, r4, r5, pc}
    e51c:	207f      	movs	r0, #127	; 0x7f
    e51e:	7260      	strb	r0, [r4, #9]
    e520:	2000      	movs	r0, #0
    e522:	bd38      	pop	{r3, r4, r5, pc}

0000e524 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e524:	2300      	movs	r3, #0
    e526:	6283      	str	r3, [r0, #40]	; 0x28
    e528:	8602      	strh	r2, [r0, #48]	; 0x30
    e52a:	f240 2371 	movw	r3, #625	; 0x271
    e52e:	435a      	muls	r2, r3
    e530:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e534:	1e52      	subs	r2, r2, #1
    e536:	fbb2 f1f1 	udiv	r1, r2, r1
    e53a:	62c1      	str	r1, [r0, #44]	; 0x2c
    e53c:	4770      	bx	lr

0000e53e <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e53e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e542:	4348      	muls	r0, r1
    e544:	4770      	bx	lr

0000e546 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    e546:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e54a:	fbb0 f0f1 	udiv	r0, r0, r1
    e54e:	b280      	uxth	r0, r0
    e550:	4770      	bx	lr

0000e552 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e552:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e556:	fb10 f001 	smulbb	r0, r0, r1
    e55a:	4770      	bx	lr

0000e55c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    e55c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e560:	fbb0 f0f1 	udiv	r0, r0, r1
    e564:	b2c0      	uxtb	r0, r0
    e566:	4770      	bx	lr

0000e568 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e568:	b510      	push	{r4, lr}
    e56a:	2300      	movs	r3, #0
    e56c:	461a      	mov	r2, r3
    e56e:	e003      	b.n	e578 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e570:	5c84      	ldrb	r4, [r0, r2]
    e572:	4323      	orrs	r3, r4
    e574:	1c52      	adds	r2, r2, #1
    e576:	b2d2      	uxtb	r2, r2
    e578:	428a      	cmp	r2, r1
    e57a:	d3f9      	bcc.n	e570 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e57c:	b10b      	cbz	r3, e582 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e57e:	2000      	movs	r0, #0
    e580:	bd10      	pop	{r4, pc}
    e582:	2001      	movs	r0, #1
    e584:	bd10      	pop	{r4, pc}
    e586:	b510      	push	{r4, lr}
    e588:	4604      	mov	r4, r0
    e58a:	f7fd f921 	bl	b7d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e58e:	f644 112b 	movw	r1, #18731	; 0x492b
    e592:	4008      	ands	r0, r1
    e594:	2101      	movs	r1, #1
    e596:	7561      	strb	r1, [r4, #21]
    e598:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    e59c:	0a00      	lsrs	r0, r0, #8
    e59e:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    e5a2:	20fe      	movs	r0, #254	; 0xfe
    e5a4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    e5a8:	207f      	movs	r0, #127	; 0x7f
    e5aa:	7260      	strb	r0, [r4, #9]
    e5ac:	bd10      	pop	{r4, pc}
    e5ae:	2801      	cmp	r0, #1
    e5b0:	d002      	beq.n	e5b8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    e5b2:	2802      	cmp	r0, #2
    e5b4:	d003      	beq.n	e5be <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    e5b6:	e004      	b.n	e5c2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    e5b8:	2901      	cmp	r1, #1
    e5ba:	d004      	beq.n	e5c6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    e5bc:	e001      	b.n	e5c2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    e5be:	2902      	cmp	r1, #2
    e5c0:	d001      	beq.n	e5c6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    e5c2:	2000      	movs	r0, #0
    e5c4:	4770      	bx	lr
    e5c6:	2001      	movs	r0, #1
    e5c8:	4770      	bx	lr

0000e5ca <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e5ca:	b510      	push	{r4, lr}
    e5cc:	4604      	mov	r4, r0
    e5ce:	f890 0020 	ldrb.w	r0, [r0, #32]
    e5d2:	b108      	cbz	r0, e5d8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e5d4:	2825      	cmp	r0, #37	; 0x25
    e5d6:	d901      	bls.n	e5dc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e5d8:	2012      	movs	r0, #18
    e5da:	bd10      	pop	{r4, pc}
    e5dc:	b12a      	cbz	r2, e5ea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e5de:	7d60      	ldrb	r0, [r4, #21]
    e5e0:	b128      	cbz	r0, e5ee <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e5e2:	2801      	cmp	r0, #1
    e5e4:	d009      	beq.n	e5fa <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e5e6:	201f      	movs	r0, #31
    e5e8:	bd10      	pop	{r4, pc}
    e5ea:	2000      	movs	r0, #0
    e5ec:	bd10      	pop	{r4, pc}
    e5ee:	4620      	mov	r0, r4
    e5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5f4:	4611      	mov	r1, r2
    e5f6:	f7f7 bfa3 	b.w	6540 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e5fa:	88a2      	ldrh	r2, [r4, #4]
    e5fc:	6909      	ldr	r1, [r1, #16]
    e5fe:	f104 0015 	add.w	r0, r4, #21
    e602:	f7f7 ff49 	bl	6498 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e606:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e60a:	e7ee      	b.n	e5ea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e60c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e60c:	b530      	push	{r4, r5, lr}
    e60e:	1c42      	adds	r2, r0, #1
    e610:	428a      	cmp	r2, r1
    e612:	d004      	beq.n	e61e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e614:	680a      	ldr	r2, [r1, #0]
    e616:	f8c0 2001 	str.w	r2, [r0, #1]
    e61a:	7909      	ldrb	r1, [r1, #4]
    e61c:	7141      	strb	r1, [r0, #5]
    e61e:	7941      	ldrb	r1, [r0, #5]
    e620:	f001 011f 	and.w	r1, r1, #31
    e624:	7141      	strb	r1, [r0, #5]
    e626:	2100      	movs	r1, #0
    e628:	72c1      	strb	r1, [r0, #11]
    e62a:	1843      	adds	r3, r0, r1
    e62c:	1c49      	adds	r1, r1, #1
    e62e:	785c      	ldrb	r4, [r3, #1]
    e630:	b2c9      	uxtb	r1, r1
    e632:	f004 0201 	and.w	r2, r4, #1
    e636:	0864      	lsrs	r4, r4, #1
    e638:	f004 0501 	and.w	r5, r4, #1
    e63c:	4415      	add	r5, r2
    e63e:	0862      	lsrs	r2, r4, #1
    e640:	f002 0401 	and.w	r4, r2, #1
    e644:	442c      	add	r4, r5
    e646:	0852      	lsrs	r2, r2, #1
    e648:	f002 0501 	and.w	r5, r2, #1
    e64c:	442c      	add	r4, r5
    e64e:	0852      	lsrs	r2, r2, #1
    e650:	f002 0501 	and.w	r5, r2, #1
    e654:	442c      	add	r4, r5
    e656:	0852      	lsrs	r2, r2, #1
    e658:	f002 0501 	and.w	r5, r2, #1
    e65c:	442c      	add	r4, r5
    e65e:	0852      	lsrs	r2, r2, #1
    e660:	f002 0501 	and.w	r5, r2, #1
    e664:	442c      	add	r4, r5
    e666:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e66a:	719a      	strb	r2, [r3, #6]
    e66c:	7ac3      	ldrb	r3, [r0, #11]
    e66e:	2905      	cmp	r1, #5
    e670:	441a      	add	r2, r3
    e672:	72c2      	strb	r2, [r0, #11]
    e674:	d3d9      	bcc.n	e62a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e676:	bd30      	pop	{r4, r5, pc}

0000e678 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    e678:	68c0      	ldr	r0, [r0, #12]
    e67a:	6008      	str	r0, [r1, #0]
    e67c:	4770      	bx	lr

0000e67e <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    e67e:	6842      	ldr	r2, [r0, #4]
    e680:	600a      	str	r2, [r1, #0]
    e682:	6880      	ldr	r0, [r0, #8]
    e684:	6048      	str	r0, [r1, #4]
    e686:	4770      	bx	lr

0000e688 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    e688:	6842      	ldr	r2, [r0, #4]
    e68a:	600a      	str	r2, [r1, #0]
    e68c:	6880      	ldr	r0, [r0, #8]
    e68e:	6048      	str	r0, [r1, #4]
    e690:	4770      	bx	lr

0000e692 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e692:	7800      	ldrb	r0, [r0, #0]
    e694:	f000 0003 	and.w	r0, r0, #3
    e698:	4770      	bx	lr

0000e69a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e69a:	8880      	ldrh	r0, [r0, #4]
    e69c:	4770      	bx	lr

0000e69e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e69e:	88c0      	ldrh	r0, [r0, #6]
    e6a0:	4770      	bx	lr

0000e6a2 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e6a2:	8900      	ldrh	r0, [r0, #8]
    e6a4:	4770      	bx	lr

0000e6a6 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e6a6:	8940      	ldrh	r0, [r0, #10]
    e6a8:	4770      	bx	lr

0000e6aa <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e6aa:	7900      	ldrb	r0, [r0, #4]
    e6ac:	4770      	bx	lr

0000e6ae <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e6ae:	7900      	ldrb	r0, [r0, #4]
    e6b0:	4770      	bx	lr

0000e6b2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e6b2:	8901      	ldrh	r1, [r0, #8]
    e6b4:	291b      	cmp	r1, #27
    e6b6:	d30c      	bcc.n	e6d2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e6b8:	8941      	ldrh	r1, [r0, #10]
    e6ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e6be:	4291      	cmp	r1, r2
    e6c0:	d307      	bcc.n	e6d2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e6c2:	8881      	ldrh	r1, [r0, #4]
    e6c4:	291b      	cmp	r1, #27
    e6c6:	d304      	bcc.n	e6d2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e6c8:	88c0      	ldrh	r0, [r0, #6]
    e6ca:	4290      	cmp	r0, r2
    e6cc:	d301      	bcc.n	e6d2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e6ce:	2001      	movs	r0, #1
    e6d0:	4770      	bx	lr
    e6d2:	2000      	movs	r0, #0
    e6d4:	4770      	bx	lr

0000e6d6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e6d6:	b510      	push	{r4, lr}
    e6d8:	29fb      	cmp	r1, #251	; 0xfb
    e6da:	d904      	bls.n	e6e6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e6dc:	f44f 61af 	mov.w	r1, #1400	; 0x578
    e6e0:	202a      	movs	r0, #42	; 0x2a
    e6e2:	f7f5 ff43 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6e6:	7041      	strb	r1, [r0, #1]
    e6e8:	bd10      	pop	{r4, pc}

0000e6ea <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e6ea:	7901      	ldrb	r1, [r0, #4]
    e6ec:	0749      	lsls	r1, r1, #29
    e6ee:	d004      	beq.n	e6fa <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e6f0:	7940      	ldrb	r0, [r0, #5]
    e6f2:	0740      	lsls	r0, r0, #29
    e6f4:	d001      	beq.n	e6fa <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e6f6:	2001      	movs	r0, #1
    e6f8:	4770      	bx	lr
    e6fa:	2000      	movs	r0, #0
    e6fc:	4770      	bx	lr

0000e6fe <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    e6fe:	7901      	ldrb	r1, [r0, #4]
    e700:	0749      	lsls	r1, r1, #29
    e702:	d004      	beq.n	e70e <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    e704:	7940      	ldrb	r0, [r0, #5]
    e706:	0740      	lsls	r0, r0, #29
    e708:	d001      	beq.n	e70e <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    e70a:	2001      	movs	r0, #1
    e70c:	4770      	bx	lr
    e70e:	2000      	movs	r0, #0
    e710:	4770      	bx	lr

0000e712 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e712:	7900      	ldrb	r0, [r0, #4]
    e714:	4770      	bx	lr

0000e716 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e716:	7940      	ldrb	r0, [r0, #5]
    e718:	4770      	bx	lr

0000e71a <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e71a:	7101      	strb	r1, [r0, #4]
    e71c:	4770      	bx	lr

0000e71e <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e71e:	7141      	strb	r1, [r0, #5]
    e720:	4770      	bx	lr

0000e722 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    e722:	680a      	ldr	r2, [r1, #0]
    e724:	6042      	str	r2, [r0, #4]
    e726:	7909      	ldrb	r1, [r1, #4]
    e728:	7201      	strb	r1, [r0, #8]
    e72a:	4770      	bx	lr

0000e72c <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    e72c:	72c1      	strb	r1, [r0, #11]
    e72e:	0a09      	lsrs	r1, r1, #8
    e730:	7301      	strb	r1, [r0, #12]
    e732:	4770      	bx	lr

0000e734 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    e734:	8809      	ldrh	r1, [r1, #0]
    e736:	8181      	strh	r1, [r0, #12]
    e738:	4770      	bx	lr

0000e73a <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    e73a:	6809      	ldr	r1, [r1, #0]
    e73c:	f8c0 1016 	str.w	r1, [r0, #22]
    e740:	4770      	bx	lr

0000e742 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    e742:	680a      	ldr	r2, [r1, #0]
    e744:	6042      	str	r2, [r0, #4]
    e746:	6849      	ldr	r1, [r1, #4]
    e748:	6081      	str	r1, [r0, #8]
    e74a:	4770      	bx	lr

0000e74c <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    e74c:	680a      	ldr	r2, [r1, #0]
    e74e:	f840 2f0e 	str.w	r2, [r0, #14]!
    e752:	6849      	ldr	r1, [r1, #4]
    e754:	6041      	str	r1, [r0, #4]
    e756:	4770      	bx	lr

0000e758 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e758:	680a      	ldr	r2, [r1, #0]
    e75a:	6042      	str	r2, [r0, #4]
    e75c:	6849      	ldr	r1, [r1, #4]
    e75e:	6081      	str	r1, [r0, #8]
    e760:	4770      	bx	lr

0000e762 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e762:	7802      	ldrb	r2, [r0, #0]
    e764:	f001 0103 	and.w	r1, r1, #3
    e768:	f022 0203 	bic.w	r2, r2, #3
    e76c:	430a      	orrs	r2, r1
    e76e:	7002      	strb	r2, [r0, #0]
    e770:	4770      	bx	lr

0000e772 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    e772:	7101      	strb	r1, [r0, #4]
    e774:	4770      	bx	lr

0000e776 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e776:	7101      	strb	r1, [r0, #4]
    e778:	0a09      	lsrs	r1, r1, #8
    e77a:	7141      	strb	r1, [r0, #5]
    e77c:	4770      	bx	lr

0000e77e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e77e:	7181      	strb	r1, [r0, #6]
    e780:	0a09      	lsrs	r1, r1, #8
    e782:	71c1      	strb	r1, [r0, #7]
    e784:	4770      	bx	lr

0000e786 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e786:	7201      	strb	r1, [r0, #8]
    e788:	0a09      	lsrs	r1, r1, #8
    e78a:	7241      	strb	r1, [r0, #9]
    e78c:	4770      	bx	lr

0000e78e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e78e:	7281      	strb	r1, [r0, #10]
    e790:	0a09      	lsrs	r1, r1, #8
    e792:	72c1      	strb	r1, [r0, #11]
    e794:	4770      	bx	lr

0000e796 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    e796:	7181      	strb	r1, [r0, #6]
    e798:	0a09      	lsrs	r1, r1, #8
    e79a:	71c1      	strb	r1, [r0, #7]
    e79c:	4770      	bx	lr

0000e79e <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    e79e:	7141      	strb	r1, [r0, #5]
    e7a0:	4770      	bx	lr

0000e7a2 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    e7a2:	7841      	ldrb	r1, [r0, #1]
    e7a4:	7800      	ldrb	r0, [r0, #0]
    e7a6:	f010 000f 	ands.w	r0, r0, #15
    e7aa:	d005      	beq.n	e7b8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    e7ac:	2801      	cmp	r0, #1
    e7ae:	d007      	beq.n	e7c0 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    e7b0:	2802      	cmp	r0, #2
    e7b2:	d001      	beq.n	e7b8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    e7b4:	2806      	cmp	r0, #6
    e7b6:	d105      	bne.n	e7c4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    e7b8:	1f89      	subs	r1, r1, #6
    e7ba:	291f      	cmp	r1, #31
    e7bc:	d904      	bls.n	e7c8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    e7be:	e001      	b.n	e7c4 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    e7c0:	290c      	cmp	r1, #12
    e7c2:	d001      	beq.n	e7c8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    e7c4:	2000      	movs	r0, #0
    e7c6:	4770      	bx	lr
    e7c8:	2001      	movs	r0, #1
    e7ca:	4770      	bx	lr

0000e7cc <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    e7cc:	7800      	ldrb	r0, [r0, #0]
    e7ce:	09c0      	lsrs	r0, r0, #7
    e7d0:	4770      	bx	lr

0000e7d2 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    e7d2:	f850 2f03 	ldr.w	r2, [r0, #3]!
    e7d6:	600a      	str	r2, [r1, #0]
    e7d8:	8880      	ldrh	r0, [r0, #4]
    e7da:	8088      	strh	r0, [r1, #4]
    e7dc:	4770      	bx	lr

0000e7de <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    e7de:	7800      	ldrb	r0, [r0, #0]
    e7e0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e7e4:	4770      	bx	lr

0000e7e6 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    e7e6:	7801      	ldrb	r1, [r0, #0]
    e7e8:	f001 010f 	and.w	r1, r1, #15
    e7ec:	2904      	cmp	r1, #4
    e7ee:	d105      	bne.n	e7fc <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    e7f0:	7840      	ldrb	r0, [r0, #1]
    e7f2:	1f80      	subs	r0, r0, #6
    e7f4:	281f      	cmp	r0, #31
    e7f6:	d801      	bhi.n	e7fc <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    e7f8:	2001      	movs	r0, #1
    e7fa:	4770      	bx	lr
    e7fc:	2000      	movs	r0, #0
    e7fe:	4770      	bx	lr

0000e800 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e800:	b510      	push	{r4, lr}
    e802:	7802      	ldrb	r2, [r0, #0]
    e804:	f001 030f 	and.w	r3, r1, #15
    e808:	f022 020f 	bic.w	r2, r2, #15
    e80c:	431a      	orrs	r2, r3
    e80e:	7002      	strb	r2, [r0, #0]
    e810:	2907      	cmp	r1, #7
    e812:	d20c      	bcs.n	e82e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e814:	e8df f001 	tbb	[pc, r1]
    e818:	06040604 	.word	0x06040604
    e81c:	00040804 	.word	0x00040804
    e820:	2106      	movs	r1, #6
    e822:	e002      	b.n	e82a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e824:	210c      	movs	r1, #12
    e826:	e000      	b.n	e82a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e828:	2122      	movs	r1, #34	; 0x22
    e82a:	7041      	strb	r1, [r0, #1]
    e82c:	bd10      	pop	{r4, pc}
    e82e:	216e      	movs	r1, #110	; 0x6e
    e830:	202a      	movs	r0, #42	; 0x2a
    e832:	f7f5 fe9b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e836 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e836:	680a      	ldr	r2, [r1, #0]
    e838:	f840 2f09 	str.w	r2, [r0, #9]!
    e83c:	8889      	ldrh	r1, [r1, #4]
    e83e:	8081      	strh	r1, [r0, #4]
    e840:	4770      	bx	lr

0000e842 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e842:	7802      	ldrb	r2, [r0, #0]
    e844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e848:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e84c:	7002      	strb	r2, [r0, #0]
    e84e:	4770      	bx	lr

0000e850 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e850:	680a      	ldr	r2, [r1, #0]
    e852:	f840 2f03 	str.w	r2, [r0, #3]!
    e856:	8889      	ldrh	r1, [r1, #4]
    e858:	8081      	strh	r1, [r0, #4]
    e85a:	4770      	bx	lr

0000e85c <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e85c:	7802      	ldrb	r2, [r0, #0]
    e85e:	2340      	movs	r3, #64	; 0x40
    e860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e864:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e868:	430a      	orrs	r2, r1
    e86a:	7002      	strb	r2, [r0, #0]
    e86c:	4770      	bx	lr

0000e86e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e86e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e872:	4604      	mov	r4, r0
    e874:	2000      	movs	r0, #0
    e876:	f7f6 f85d 	bl	4934 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e87a:	2600      	movs	r6, #0
    e87c:	4605      	mov	r5, r0
    e87e:	4637      	mov	r7, r6
    e880:	e00e      	b.n	e8a0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e882:	8820      	ldrh	r0, [r4, #0]
    e884:	1c40      	adds	r0, r0, #1
    e886:	b280      	uxth	r0, r0
    e888:	8020      	strh	r0, [r4, #0]
    e88a:	42a8      	cmp	r0, r5
    e88c:	d300      	bcc.n	e890 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e88e:	8027      	strh	r7, [r4, #0]
    e890:	8820      	ldrh	r0, [r4, #0]
    e892:	4669      	mov	r1, sp
    e894:	f7ff fc85 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e898:	2800      	cmp	r0, #0
    e89a:	d007      	beq.n	e8ac <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e89c:	1c76      	adds	r6, r6, #1
    e89e:	b2f6      	uxtb	r6, r6
    e8a0:	42ae      	cmp	r6, r5
    e8a2:	d3ee      	bcc.n	e882 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e8a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e8a8:	8020      	strh	r0, [r4, #0]
    e8aa:	2012      	movs	r0, #18
    e8ac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e8b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e8b0:	b510      	push	{r4, lr}
    e8b2:	7901      	ldrb	r1, [r0, #4]
    e8b4:	b119      	cbz	r1, e8be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e8b6:	2901      	cmp	r1, #1
    e8b8:	d006      	beq.n	e8c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e8ba:	2000      	movs	r0, #0
    e8bc:	bd10      	pop	{r4, pc}
    e8be:	8842      	ldrh	r2, [r0, #2]
    e8c0:	6883      	ldr	r3, [r0, #8]
    e8c2:	8800      	ldrh	r0, [r0, #0]
    e8c4:	2102      	movs	r1, #2
    e8c6:	e003      	b.n	e8d0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e8c8:	8842      	ldrh	r2, [r0, #2]
    e8ca:	6883      	ldr	r3, [r0, #8]
    e8cc:	8800      	ldrh	r0, [r0, #0]
    e8ce:	2101      	movs	r1, #1
    e8d0:	f7f7 fec8 	bl	6664 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    e8d4:	b908      	cbnz	r0, e8da <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e8d6:	f7f7 ff13 	bl	6700 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e8da:	2001      	movs	r0, #1
    e8dc:	bd10      	pop	{r4, pc}
    e8de:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e8e2:	460e      	mov	r6, r1
    e8e4:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e8e8:	4617      	mov	r7, r2
    e8ea:	39ff      	subs	r1, #255	; 0xff
    e8ec:	d014      	beq.n	e918 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e8ee:	8030      	strh	r0, [r6, #0]
    e8f0:	2100      	movs	r1, #0
    e8f2:	7171      	strb	r1, [r6, #5]
    e8f4:	f7f6 fa38 	bl	4d68 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e8f8:	4604      	mov	r4, r0
    e8fa:	f7ff f912 	bl	db22 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e8fe:	0005      	movs	r5, r0
    e900:	d00a      	beq.n	e918 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e902:	4620      	mov	r0, r4
    e904:	4629      	mov	r1, r5
    e906:	aa01      	add	r2, sp, #4
    e908:	f7ff f93c 	bl	db84 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e90c:	8070      	strh	r0, [r6, #2]
    e90e:	b130      	cbz	r0, e91e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    e910:	28fb      	cmp	r0, #251	; 0xfb
    e912:	d906      	bls.n	e922 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    e914:	21ae      	movs	r1, #174	; 0xae
    e916:	e026      	b.n	e966 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e918:	2000      	movs	r0, #0
    e91a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e91e:	21ad      	movs	r1, #173	; 0xad
    e920:	e021      	b.n	e966 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e922:	9801      	ldr	r0, [sp, #4]
    e924:	f7ff feb5 	bl	e692 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e928:	2801      	cmp	r0, #1
    e92a:	d003      	beq.n	e934 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e92c:	2802      	cmp	r0, #2
    e92e:	d001      	beq.n	e934 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e930:	21bd      	movs	r1, #189	; 0xbd
    e932:	e018      	b.n	e966 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e934:	7130      	strb	r0, [r6, #4]
    e936:	4629      	mov	r1, r5
    e938:	8873      	ldrh	r3, [r6, #2]
    e93a:	2503      	movs	r5, #3
    e93c:	4620      	mov	r0, r4
    e93e:	463a      	mov	r2, r7
    e940:	9500      	str	r5, [sp, #0]
    e942:	f7fe ffc5 	bl	d8d0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e946:	4620      	mov	r0, r4
    e948:	60b7      	str	r7, [r6, #8]
    e94a:	f7ff f899 	bl	da80 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e94e:	b138      	cbz	r0, e960 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    e950:	2100      	movs	r1, #0
    e952:	4620      	mov	r0, r4
    e954:	460a      	mov	r2, r1
    e956:	f7ff f9f3 	bl	dd40 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e95a:	b118      	cbz	r0, e964 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    e95c:	2001      	movs	r0, #1
    e95e:	e7dc      	b.n	e91a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    e960:	21cd      	movs	r1, #205	; 0xcd
    e962:	e000      	b.n	e966 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e964:	21d2      	movs	r1, #210	; 0xd2
    e966:	202b      	movs	r0, #43	; 0x2b
    e968:	f7f5 fe00 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e96c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e96c:	f7f8 b8c4 	b.w	6af8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    e970:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e974:	4604      	mov	r4, r0
    e976:	2000      	movs	r0, #0
    e978:	f7f5 ffdc 	bl	4934 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e97c:	4605      	mov	r5, r0
    e97e:	1c40      	adds	r0, r0, #1
    e980:	2600      	movs	r6, #0
    e982:	b2c7      	uxtb	r7, r0
    e984:	46b0      	mov	r8, r6
    e986:	e017      	b.n	e9b8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
    e988:	8820      	ldrh	r0, [r4, #0]
    e98a:	1c40      	adds	r0, r0, #1
    e98c:	b280      	uxth	r0, r0
    e98e:	8020      	strh	r0, [r4, #0]
    e990:	42b8      	cmp	r0, r7
    e992:	d302      	bcc.n	e99a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    e994:	4640      	mov	r0, r8
    e996:	f8a4 8000 	strh.w	r8, [r4]
    e99a:	b280      	uxth	r0, r0
    e99c:	42a8      	cmp	r0, r5
    e99e:	d304      	bcc.n	e9aa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e9a0:	42b8      	cmp	r0, r7
    e9a2:	d202      	bcs.n	e9aa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e9a4:	2000      	movs	r0, #0
    e9a6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e9aa:	4669      	mov	r1, sp
    e9ac:	f7ff fbf9 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9b0:	2800      	cmp	r0, #0
    e9b2:	d0f8      	beq.n	e9a6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
    e9b4:	1c76      	adds	r6, r6, #1
    e9b6:	b2f6      	uxtb	r6, r6
    e9b8:	42be      	cmp	r6, r7
    e9ba:	d3e5      	bcc.n	e988 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    e9bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e9c0:	8020      	strh	r0, [r4, #0]
    e9c2:	2012      	movs	r0, #18
    e9c4:	e7ef      	b.n	e9a6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0000e9c6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e9c6:	b570      	push	{r4, r5, r6, lr}
    e9c8:	8050      	strh	r0, [r2, #2]
    e9ca:	890c      	ldrh	r4, [r1, #8]
    e9cc:	8094      	strh	r4, [r2, #4]
    e9ce:	898b      	ldrh	r3, [r1, #12]
    e9d0:	80d3      	strh	r3, [r2, #6]
    e9d2:	8948      	ldrh	r0, [r1, #10]
    e9d4:	8110      	strh	r0, [r2, #8]
    e9d6:	89cd      	ldrh	r5, [r1, #14]
    e9d8:	8155      	strh	r5, [r2, #10]
    e9da:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e9dc:	42ae      	cmp	r6, r5
    e9de:	d108      	bne.n	e9f2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e9e0:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e9e2:	4285      	cmp	r5, r0
    e9e4:	d105      	bne.n	e9f2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e9e6:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e9e8:	429d      	cmp	r5, r3
    e9ea:	d102      	bne.n	e9f2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e9ec:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e9ee:	42a3      	cmp	r3, r4
    e9f0:	d001      	beq.n	e9f6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e9f2:	2301      	movs	r3, #1
    e9f4:	e000      	b.n	e9f8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e9f6:	2300      	movs	r3, #0
    e9f8:	7313      	strb	r3, [r2, #12]
    e9fa:	8548      	strh	r0, [r1, #42]	; 0x2a
    e9fc:	8950      	ldrh	r0, [r2, #10]
    e9fe:	85c8      	strh	r0, [r1, #46]	; 0x2e
    ea00:	8890      	ldrh	r0, [r2, #4]
    ea02:	8588      	strh	r0, [r1, #44]	; 0x2c
    ea04:	88d0      	ldrh	r0, [r2, #6]
    ea06:	8608      	strh	r0, [r1, #48]	; 0x30
    ea08:	2001      	movs	r0, #1
    ea0a:	7010      	strb	r0, [r2, #0]
    ea0c:	bd70      	pop	{r4, r5, r6, pc}

0000ea0e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    ea0e:	b510      	push	{r4, lr}
    ea10:	888c      	ldrh	r4, [r1, #4]
    ea12:	890a      	ldrh	r2, [r1, #8]
    ea14:	884b      	ldrh	r3, [r1, #2]
    ea16:	88c9      	ldrh	r1, [r1, #6]
    ea18:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    ea1c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    ea20:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    ea24:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    ea28:	bd10      	pop	{r4, pc}

0000ea2a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    ea2a:	b570      	push	{r4, r5, r6, lr}
    ea2c:	4615      	mov	r5, r2
    ea2e:	460c      	mov	r4, r1
    ea30:	f000 f8c7 	bl	ebc2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    ea34:	3096      	adds	r0, #150	; 0x96
    ea36:	4428      	add	r0, r5
    ea38:	42a0      	cmp	r0, r4
    ea3a:	d801      	bhi.n	ea40 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    ea3c:	1a20      	subs	r0, r4, r0
    ea3e:	bd70      	pop	{r4, r5, r6, pc}
    ea40:	2000      	movs	r0, #0
    ea42:	bd70      	pop	{r4, r5, r6, pc}

0000ea44 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    ea44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea48:	4604      	mov	r4, r0
    ea4a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    ea4c:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    ea4e:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    ea52:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    ea56:	4285      	cmp	r5, r0
    ea58:	d300      	bcc.n	ea5c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    ea5a:	4605      	mov	r5, r0
    ea5c:	4620      	mov	r0, r4
    ea5e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    ea62:	f000 f89e 	bl	eba2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ea66:	4601      	mov	r1, r0
    ea68:	86e5      	strh	r5, [r4, #54]	; 0x36
    ea6a:	8761      	strh	r1, [r4, #58]	; 0x3a
    ea6c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    ea6e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ea72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    ea74:	4680      	mov	r8, r0
    ea76:	42aa      	cmp	r2, r5
    ea78:	d200      	bcs.n	ea7c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    ea7a:	462a      	mov	r2, r5
    ea7c:	428b      	cmp	r3, r1
    ea7e:	d200      	bcs.n	ea82 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    ea80:	460b      	mov	r3, r1
    ea82:	8202      	strh	r2, [r0, #16]
    ea84:	f8a8 3012 	strh.w	r3, [r8, #18]
    ea88:	42bd      	cmp	r5, r7
    ea8a:	d101      	bne.n	ea90 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    ea8c:	42b1      	cmp	r1, r6
    ea8e:	d001      	beq.n	ea94 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    ea90:	2001      	movs	r0, #1
    ea92:	e000      	b.n	ea96 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    ea94:	2000      	movs	r0, #0
    ea96:	4681      	mov	r9, r0
    ea98:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    ea9c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    eaa0:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    eaa2:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    eaa4:	4285      	cmp	r5, r0
    eaa6:	d300      	bcc.n	eaaa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    eaa8:	4605      	mov	r5, r0
    eaaa:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    eaae:	4620      	mov	r0, r4
    eab0:	f000 f87f 	bl	ebb2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    eab4:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    eab8:	2902      	cmp	r1, #2
    eaba:	d108      	bne.n	eace <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    eabc:	42af      	cmp	r7, r5
    eabe:	d200      	bcs.n	eac2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    eac0:	463d      	mov	r5, r7
    eac2:	4286      	cmp	r6, r0
    eac4:	d200      	bcs.n	eac8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    eac6:	4630      	mov	r0, r6
    eac8:	2100      	movs	r1, #0
    eaca:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    eace:	f8a8 5008 	strh.w	r5, [r8, #8]
    ead2:	f8a8 000c 	strh.w	r0, [r8, #12]
    ead6:	42bd      	cmp	r5, r7
    ead8:	d101      	bne.n	eade <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    eada:	42b0      	cmp	r0, r6
    eadc:	d001      	beq.n	eae2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    eade:	2001      	movs	r0, #1
    eae0:	e000      	b.n	eae4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    eae2:	2000      	movs	r0, #0
    eae4:	ea40 0009 	orr.w	r0, r0, r9
    eae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000eaec <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    eaec:	6840      	ldr	r0, [r0, #4]
    eaee:	4770      	bx	lr

0000eaf0 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    eaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eaf4:	4616      	mov	r6, r2
    eaf6:	460f      	mov	r7, r1
    eaf8:	4604      	mov	r4, r0
    eafa:	f000 f862 	bl	ebc2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    eafe:	4605      	mov	r5, r0
    eb00:	463a      	mov	r2, r7
    eb02:	68e1      	ldr	r1, [r4, #12]
    eb04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    eb06:	f000 f847 	bl	eb98 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    eb0a:	19a9      	adds	r1, r5, r6
    eb0c:	4281      	cmp	r1, r0
    eb0e:	d300      	bcc.n	eb12 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    eb10:	4608      	mov	r0, r1
    eb12:	6320      	str	r0, [r4, #48]	; 0x30
    eb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eb18 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    eb18:	221b      	movs	r2, #27
    eb1a:	8402      	strh	r2, [r0, #32]
    eb1c:	8382      	strh	r2, [r0, #28]
    eb1e:	82c2      	strh	r2, [r0, #22]
    eb20:	8282      	strh	r2, [r0, #20]
    eb22:	8142      	strh	r2, [r0, #10]
    eb24:	8202      	strh	r2, [r0, #16]
    eb26:	8102      	strh	r2, [r0, #8]
    eb28:	8542      	strh	r2, [r0, #42]	; 0x2a
    eb2a:	8582      	strh	r2, [r0, #44]	; 0x2c
    eb2c:	8482      	strh	r2, [r0, #36]	; 0x24
    eb2e:	2900      	cmp	r1, #0
    eb30:	d10a      	bne.n	eb48 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    eb32:	f44f 71a4 	mov.w	r1, #328	; 0x148
    eb36:	8441      	strh	r1, [r0, #34]	; 0x22
    eb38:	83c1      	strh	r1, [r0, #30]
    eb3a:	8341      	strh	r1, [r0, #26]
    eb3c:	8301      	strh	r1, [r0, #24]
    eb3e:	81c1      	strh	r1, [r0, #14]
    eb40:	8241      	strh	r1, [r0, #18]
    eb42:	8181      	strh	r1, [r0, #12]
    eb44:	85c1      	strh	r1, [r0, #46]	; 0x2e
    eb46:	8601      	strh	r1, [r0, #48]	; 0x30
    eb48:	4770      	bx	lr

0000eb4a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    eb4a:	6800      	ldr	r0, [r0, #0]
    eb4c:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    eb50:	4290      	cmp	r0, r2
    eb52:	d903      	bls.n	eb5c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    eb54:	1a40      	subs	r0, r0, r1
    eb56:	389c      	subs	r0, #156	; 0x9c
    eb58:	0840      	lsrs	r0, r0, #1
    eb5a:	4770      	bx	lr
    eb5c:	2000      	movs	r0, #0
    eb5e:	4770      	bx	lr

0000eb60 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    eb60:	b510      	push	{r4, lr}
    eb62:	9c02      	ldr	r4, [sp, #8]
    eb64:	8281      	strh	r1, [r0, #20]
    eb66:	82c2      	strh	r2, [r0, #22]
    eb68:	8303      	strh	r3, [r0, #24]
    eb6a:	8344      	strh	r4, [r0, #26]
    eb6c:	bd10      	pop	{r4, pc}

0000eb6e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    eb6e:	8050      	strh	r0, [r2, #2]
    eb70:	8a88      	ldrh	r0, [r1, #20]
    eb72:	8090      	strh	r0, [r2, #4]
    eb74:	8ac8      	ldrh	r0, [r1, #22]
    eb76:	80d0      	strh	r0, [r2, #6]
    eb78:	8b08      	ldrh	r0, [r1, #24]
    eb7a:	8110      	strh	r0, [r2, #8]
    eb7c:	8b48      	ldrh	r0, [r1, #26]
    eb7e:	8150      	strh	r0, [r2, #10]
    eb80:	2001      	movs	r0, #1
    eb82:	7010      	strb	r0, [r2, #0]
    eb84:	4770      	bx	lr
    eb86:	2902      	cmp	r1, #2
    eb88:	d003      	beq.n	eb92 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    eb8a:	00c0      	lsls	r0, r0, #3
    eb8c:	3070      	adds	r0, #112	; 0x70
    eb8e:	b280      	uxth	r0, r0
    eb90:	4770      	bx	lr
    eb92:	0080      	lsls	r0, r0, #2
    eb94:	303c      	adds	r0, #60	; 0x3c
    eb96:	e7fa      	b.n	eb8e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    eb98:	4288      	cmp	r0, r1
    eb9a:	d300      	bcc.n	eb9e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    eb9c:	4608      	mov	r0, r1
    eb9e:	1a80      	subs	r0, r0, r2
    eba0:	4770      	bx	lr
    eba2:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    eba6:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    ebaa:	4281      	cmp	r1, r0
    ebac:	d200      	bcs.n	ebb0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    ebae:	4608      	mov	r0, r1
    ebb0:	4770      	bx	lr
    ebb2:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    ebb6:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    ebba:	4281      	cmp	r1, r0
    ebbc:	d200      	bcs.n	ebc0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    ebbe:	4608      	mov	r0, r1
    ebc0:	4770      	bx	lr
    ebc2:	2196      	movs	r1, #150	; 0x96
    ebc4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    ebc8:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    ebcc:	f000 b800 	b.w	ebd0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    ebd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebd4:	460d      	mov	r5, r1
    ebd6:	4606      	mov	r6, r0
    ebd8:	4698      	mov	r8, r3
    ebda:	4617      	mov	r7, r2
    ebdc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    ebde:	4611      	mov	r1, r2
    ebe0:	f7ff ffd1 	bl	eb86 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ebe4:	4604      	mov	r4, r0
    ebe6:	4639      	mov	r1, r7
    ebe8:	4630      	mov	r0, r6
    ebea:	f7ff ffe2 	bl	ebb2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    ebee:	42a0      	cmp	r0, r4
    ebf0:	d200      	bcs.n	ebf4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    ebf2:	4604      	mov	r4, r0
    ebf4:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    ebf6:	4641      	mov	r1, r8
    ebf8:	f7ff ffc5 	bl	eb86 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ebfc:	4607      	mov	r7, r0
    ebfe:	4641      	mov	r1, r8
    ec00:	4630      	mov	r0, r6
    ec02:	f7ff ffce 	bl	eba2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ec06:	42b8      	cmp	r0, r7
    ec08:	d300      	bcc.n	ec0c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    ec0a:	4638      	mov	r0, r7
    ec0c:	4420      	add	r0, r4
    ec0e:	4428      	add	r0, r5
    ec10:	1d80      	adds	r0, r0, #6
    ec12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ec16 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    ec16:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ec18:	2700      	movs	r7, #0
    ec1a:	463d      	mov	r5, r7
    ec1c:	2623      	movs	r6, #35	; 0x23
    ec1e:	f7f8 f81d 	bl	6c5c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x58>
    ec22:	4604      	mov	r4, r0
    ec24:	f7f7 ffee 	bl	6c04 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    ec28:	b190      	cbz	r0, ec50 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    ec2a:	4669      	mov	r1, sp
    ec2c:	2000      	movs	r0, #0
    ec2e:	f7ff f957 	bl	dee0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ec32:	e003      	b.n	ec3c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x26>
    ec34:	9802      	ldr	r0, [sp, #8]
    ec36:	6901      	ldr	r1, [r0, #16]
    ec38:	42a1      	cmp	r1, r4
    ec3a:	d009      	beq.n	ec50 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    ec3c:	4668      	mov	r0, sp
    ec3e:	f7f5 fec5 	bl	49cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ec42:	2800      	cmp	r0, #0
    ec44:	d0f6      	beq.n	ec34 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x1e>
    ec46:	4625      	mov	r5, r4
    ec48:	4620      	mov	r0, r4
    ec4a:	f7f7 ff9f 	bl	6b8c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    ec4e:	4607      	mov	r7, r0
    ec50:	1e76      	subs	r6, r6, #1
    ec52:	d001      	beq.n	ec58 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x42>
    ec54:	2f00      	cmp	r7, #0
    ec56:	d0e2      	beq.n	ec1e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8>
    ec58:	b10d      	cbz	r5, ec5e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x48>
    ec5a:	4628      	mov	r0, r5
    ec5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ec5e:	f240 1177 	movw	r1, #375	; 0x177
    ec62:	200f      	movs	r0, #15
    ec64:	f7f5 fc82 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec68:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ec6c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ec70:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ec74:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ec78:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ec7c:	ea10 0f40 	tst.w	r0, r0, lsl #1
    ec80:	d001      	beq.n	ec86 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x70>
    ec82:	2000      	movs	r0, #0
    ec84:	4770      	bx	lr
    ec86:	2001      	movs	r0, #1
    ec88:	4770      	bx	lr

0000ec8a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    ec8a:	b510      	push	{r4, lr}
    ec8c:	4604      	mov	r4, r0
    ec8e:	2108      	movs	r1, #8
    ec90:	4620      	mov	r0, r4
    ec92:	f7f5 fd15 	bl	46c0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ec96:	6820      	ldr	r0, [r4, #0]
    ec98:	2800      	cmp	r0, #0
    ec9a:	d102      	bne.n	eca2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    ec9c:	6860      	ldr	r0, [r4, #4]
    ec9e:	2800      	cmp	r0, #0
    eca0:	d0f5      	beq.n	ec8e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    eca2:	bd10      	pop	{r4, pc}
    eca4:	2801      	cmp	r0, #1
    eca6:	d102      	bne.n	ecae <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    eca8:	7948      	ldrb	r0, [r1, #5]
    ecaa:	0980      	lsrs	r0, r0, #6
    ecac:	d001      	beq.n	ecb2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    ecae:	2000      	movs	r0, #0
    ecb0:	4770      	bx	lr
    ecb2:	2001      	movs	r0, #1
    ecb4:	4770      	bx	lr
    ecb6:	2801      	cmp	r0, #1
    ecb8:	d106      	bne.n	ecc8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    ecba:	7948      	ldrb	r0, [r1, #5]
    ecbc:	2101      	movs	r1, #1
    ecbe:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ecc2:	d101      	bne.n	ecc8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    ecc4:	2001      	movs	r0, #1
    ecc6:	4770      	bx	lr
    ecc8:	2000      	movs	r0, #0
    ecca:	4770      	bx	lr
    eccc:	b118      	cbz	r0, ecd6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    ecce:	2802      	cmp	r0, #2
    ecd0:	d001      	beq.n	ecd6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    ecd2:	2001      	movs	r0, #1
    ecd4:	4770      	bx	lr
    ecd6:	2000      	movs	r0, #0
    ecd8:	4770      	bx	lr
    ecda:	2802      	cmp	r0, #2
    ecdc:	d003      	beq.n	ece6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    ecde:	2803      	cmp	r0, #3
    ece0:	d001      	beq.n	ece6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    ece2:	2000      	movs	r0, #0
    ece4:	4770      	bx	lr
    ece6:	2001      	movs	r0, #1
    ece8:	4770      	bx	lr

0000ecea <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    ecea:	f7f9 b807 	b.w	7cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    ecee:	b510      	push	{r4, lr}
    ecf0:	f7f8 fe52 	bl	7998 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    ecf4:	f7f8 f9f4 	bl	70e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ecf8:	f7fc ffe8 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ecfc:	2005      	movs	r0, #5
    ecfe:	bd10      	pop	{r4, pc}
    ed00:	b510      	push	{r4, lr}
    ed02:	f7f8 fe49 	bl	7998 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    ed06:	f7fc ffe1 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ed0a:	2005      	movs	r0, #5
    ed0c:	bd10      	pop	{r4, pc}
    ed0e:	b530      	push	{r4, r5, lr}
    ed10:	b089      	sub	sp, #36	; 0x24
    ed12:	4605      	mov	r5, r0
    ed14:	f7f8 fe40 	bl	7998 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    ed18:	7828      	ldrb	r0, [r5, #0]
    ed1a:	4669      	mov	r1, sp
    ed1c:	f000 040f 	and.w	r4, r0, #15
    ed20:	4622      	mov	r2, r4
    ed22:	4628      	mov	r0, r5
    ed24:	f7f9 f9aa 	bl	807c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    ed28:	2200      	movs	r2, #0
    ed2a:	4621      	mov	r1, r4
    ed2c:	4668      	mov	r0, sp
    ed2e:	f7f8 fa57 	bl	71e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    ed32:	4621      	mov	r1, r4
    ed34:	4668      	mov	r0, sp
    ed36:	f7f8 fdaf 	bl	7898 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f4>
    ed3a:	4604      	mov	r4, r0
    ed3c:	f7f8 f9d0 	bl	70e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ed40:	b009      	add	sp, #36	; 0x24
    ed42:	4620      	mov	r0, r4
    ed44:	bd30      	pop	{r4, r5, pc}
    ed46:	f240 21f2 	movw	r1, #754	; 0x2f2
    ed4a:	2032      	movs	r0, #50	; 0x32
    ed4c:	f7f5 fc0e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed50:	b510      	push	{r4, lr}
    ed52:	f7f8 fe21 	bl	7998 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    ed56:	f7fc ffb9 	bl	bccc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ed5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed5e:	f7f8 bfe5 	b.w	7d2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc88>
    ed62:	f7f8 bfcb 	b.w	7cfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    ed66:	f7ff b81f 	b.w	dda8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000ed6a <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    ed6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed6c:	b08b      	sub	sp, #44	; 0x2c
    ed6e:	4607      	mov	r7, r0
    ed70:	f7f6 f82e 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ed74:	4604      	mov	r4, r0
    ed76:	f7fe fed4 	bl	db22 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ed7a:	0005      	movs	r5, r0
    ed7c:	d00c      	beq.n	ed98 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    ed7e:	4620      	mov	r0, r4
    ed80:	4629      	mov	r1, r5
    ed82:	466a      	mov	r2, sp
    ed84:	f7fe fefe 	bl	db84 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ed88:	4606      	mov	r6, r0
    ed8a:	f7f6 f81b 	bl	4dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ed8e:	42b0      	cmp	r0, r6
    ed90:	d005      	beq.n	ed9e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    ed92:	f44f 7198 	mov.w	r1, #304	; 0x130
    ed96:	e033      	b.n	ee00 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    ed98:	2000      	movs	r0, #0
    ed9a:	b00b      	add	sp, #44	; 0x2c
    ed9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed9e:	a901      	add	r1, sp, #4
    eda0:	9800      	ldr	r0, [sp, #0]
    eda2:	f000 f8b4 	bl	ef0e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    eda6:	1d3e      	adds	r6, r7, #4
    eda8:	4628      	mov	r0, r5
    edaa:	f7fe fe4e 	bl	da4a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    edae:	4605      	mov	r5, r0
    edb0:	4601      	mov	r1, r0
    edb2:	221c      	movs	r2, #28
    edb4:	4630      	mov	r0, r6
    edb6:	f7fd ffe9 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    edba:	7aa8      	ldrb	r0, [r5, #10]
    edbc:	f04f 0500 	mov.w	r5, #0
    edc0:	06c1      	lsls	r1, r0, #27
    edc2:	d50d      	bpl.n	ede0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    edc4:	0740      	lsls	r0, r0, #29
    edc6:	d40a      	bmi.n	edde <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    edc8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    edcc:	f106 001c 	add.w	r0, r6, #28
    edd0:	9904      	ldr	r1, [sp, #16]
    edd2:	f7fd ffdb 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    edd6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    edda:	7230      	strb	r0, [r6, #8]
    eddc:	e000      	b.n	ede0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    edde:	7235      	strb	r5, [r6, #8]
    ede0:	707d      	strb	r5, [r7, #1]
    ede2:	2005      	movs	r0, #5
    ede4:	7038      	strb	r0, [r7, #0]
    ede6:	4620      	mov	r0, r4
    ede8:	f7fe fe4a 	bl	da80 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    edec:	b130      	cbz	r0, edfc <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    edee:	2100      	movs	r1, #0
    edf0:	4620      	mov	r0, r4
    edf2:	460a      	mov	r2, r1
    edf4:	f7fe ffa4 	bl	dd40 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    edf8:	2001      	movs	r0, #1
    edfa:	e7ce      	b.n	ed9a <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    edfc:	f240 1173 	movw	r1, #371	; 0x173
    ee00:	2033      	movs	r0, #51	; 0x33
    ee02:	f7f5 fbb3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ee06 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    ee06:	b510      	push	{r4, lr}
    ee08:	f7f5 ffe2 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ee0c:	f000 f874 	bl	eef8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    ee10:	4604      	mov	r4, r0
    ee12:	221c      	movs	r2, #28
    ee14:	2100      	movs	r1, #0
    ee16:	f7fe f833 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ee1a:	207f      	movs	r0, #127	; 0x7f
    ee1c:	76a0      	strb	r0, [r4, #26]
    ee1e:	21ff      	movs	r1, #255	; 0xff
    ee20:	73a1      	strb	r1, [r4, #14]
    ee22:	7061      	strb	r1, [r4, #1]
    ee24:	74e1      	strb	r1, [r4, #19]
    ee26:	7aa0      	ldrb	r0, [r4, #10]
    ee28:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    ee2c:	3020      	adds	r0, #32
    ee2e:	72a0      	strb	r0, [r4, #10]
    ee30:	bd10      	pop	{r4, pc}

0000ee32 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    ee32:	f7ff bfe8 	b.w	ee06 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000ee36 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    ee36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee3a:	461e      	mov	r6, r3
    ee3c:	4617      	mov	r7, r2
    ee3e:	4689      	mov	r9, r1
    ee40:	4682      	mov	sl, r0
    ee42:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ee46:	f7f5 ffc3 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ee4a:	4604      	mov	r4, r0
    ee4c:	f7fe fdff 	bl	da4e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    ee50:	2801      	cmp	r0, #1
    ee52:	d034      	beq.n	eebe <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    ee54:	4620      	mov	r0, r4
    ee56:	f000 f84f 	bl	eef8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    ee5a:	4604      	mov	r4, r0
    ee5c:	221c      	movs	r2, #28
    ee5e:	2100      	movs	r1, #0
    ee60:	f7fe f80e 	bl	ce80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ee64:	2501      	movs	r5, #1
    ee66:	7025      	strb	r5, [r4, #0]
    ee68:	1c63      	adds	r3, r4, #1
    ee6a:	1ca2      	adds	r2, r4, #2
    ee6c:	4649      	mov	r1, r9
    ee6e:	4650      	mov	r0, sl
    ee70:	f000 f827 	bl	eec2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    ee74:	f884 8009 	strb.w	r8, [r4, #9]
    ee78:	7aa0      	ldrb	r0, [r4, #10]
    ee7a:	21ff      	movs	r1, #255	; 0xff
    ee7c:	f367 0000 	bfi	r0, r7, #0, #1
    ee80:	f040 001a 	orr.w	r0, r0, #26
    ee84:	72a0      	strb	r0, [r4, #10]
    ee86:	7325      	strb	r5, [r4, #12]
    ee88:	2000      	movs	r0, #0
    ee8a:	7360      	strb	r0, [r4, #13]
    ee8c:	73a1      	strb	r1, [r4, #14]
    ee8e:	74e1      	strb	r1, [r4, #19]
    ee90:	207f      	movs	r0, #127	; 0x7f
    ee92:	76a0      	strb	r0, [r4, #26]
    ee94:	76e6      	strb	r6, [r4, #27]
    ee96:	f7f5 ff95 	bl	4dc4 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ee9a:	4604      	mov	r4, r0
    ee9c:	f7f5 ff98 	bl	4dd0 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    eea0:	2201      	movs	r2, #1
    eea2:	4621      	mov	r1, r4
    eea4:	f000 f831 	bl	ef0a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    eea8:	b120      	cbz	r0, eeb4 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    eeaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eeae:	2005      	movs	r0, #5
    eeb0:	f7f9 b9ac 	b.w	820c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    eeb4:	f240 21c9 	movw	r1, #713	; 0x2c9
    eeb8:	2033      	movs	r0, #51	; 0x33
    eeba:	f7f5 fb57 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eec2:	b510      	push	{r4, lr}
    eec4:	461c      	mov	r4, r3
    eec6:	460b      	mov	r3, r1
    eec8:	29ff      	cmp	r1, #255	; 0xff
    eeca:	d00d      	beq.n	eee8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    eecc:	4621      	mov	r1, r4
    eece:	4618      	mov	r0, r3
    eed0:	f7f7 f81a 	bl	5f08 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    eed4:	b120      	cbz	r0, eee0 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    eed6:	7820      	ldrb	r0, [r4, #0]
    eed8:	f040 0002 	orr.w	r0, r0, #2
    eedc:	7020      	strb	r0, [r4, #0]
    eede:	bd10      	pop	{r4, pc}
    eee0:	2150      	movs	r1, #80	; 0x50
    eee2:	2033      	movs	r0, #51	; 0x33
    eee4:	f7f5 fb42 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eee8:	7c41      	ldrb	r1, [r0, #17]
    eeea:	7021      	strb	r1, [r4, #0]
    eeec:	6840      	ldr	r0, [r0, #4]
    eeee:	6801      	ldr	r1, [r0, #0]
    eef0:	6011      	str	r1, [r2, #0]
    eef2:	8880      	ldrh	r0, [r0, #4]
    eef4:	8090      	strh	r0, [r2, #4]
    eef6:	bd10      	pop	{r4, pc}
    eef8:	b51c      	push	{r2, r3, r4, lr}
    eefa:	4669      	mov	r1, sp
    eefc:	aa01      	add	r2, sp, #4
    eefe:	f7fe fe33 	bl	db68 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    ef02:	9800      	ldr	r0, [sp, #0]
    ef04:	f7fe fda1 	bl	da4a <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ef08:	bd1c      	pop	{r2, r3, r4, pc}
    ef0a:	f7fe bd46 	b.w	d99a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000ef0e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    ef0e:	7802      	ldrb	r2, [r0, #0]
    ef10:	f002 020f 	and.w	r2, r2, #15
    ef14:	f7f9 b8b2 	b.w	807c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    ef18:	2800      	cmp	r0, #0
    ef1a:	db04      	blt.n	ef26 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    ef1c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ef20:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    ef24:	e005      	b.n	ef32 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    ef26:	f000 000f 	and.w	r0, r0, #15
    ef2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ef2e:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    ef32:	0940      	lsrs	r0, r0, #5
    ef34:	4770      	bx	lr
    ef36:	6940      	ldr	r0, [r0, #20]
    ef38:	2800      	cmp	r0, #0
    ef3a:	d000      	beq.n	ef3e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
    ef3c:	2001      	movs	r0, #1
    ef3e:	4770      	bx	lr

0000ef40 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    ef40:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    ef44:	4770      	bx	lr
    ef46:	b510      	push	{r4, lr}
    ef48:	2808      	cmp	r0, #8
    ef4a:	d00a      	beq.n	ef62 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x22>
    ef4c:	2804      	cmp	r0, #4
    ef4e:	d00a      	beq.n	ef66 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x26>
    ef50:	2802      	cmp	r0, #2
    ef52:	d00a      	beq.n	ef6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2a>
    ef54:	2108      	movs	r1, #8
    ef56:	2801      	cmp	r0, #1
    ef58:	d009      	beq.n	ef6e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    ef5a:	21d9      	movs	r1, #217	; 0xd9
    ef5c:	2005      	movs	r0, #5
    ef5e:	f7f5 fb05 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef62:	2140      	movs	r1, #64	; 0x40
    ef64:	e7f7      	b.n	ef56 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    ef66:	2110      	movs	r1, #16
    ef68:	e7f5      	b.n	ef56 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    ef6a:	2104      	movs	r1, #4
    ef6c:	e7f3      	b.n	ef56 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    ef6e:	222a      	movs	r2, #42	; 0x2a
    ef70:	2028      	movs	r0, #40	; 0x28
    ef72:	fb11 0002 	smlabb	r0, r1, r2, r0
    ef76:	b280      	uxth	r0, r0
    ef78:	bd10      	pop	{r4, pc}
    ef7a:	2000      	movs	r0, #0
    ef7c:	4770      	bx	lr
    ef7e:	b570      	push	{r4, r5, r6, lr}
    ef80:	4604      	mov	r4, r0
    ef82:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ef86:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ef8a:	f000 f80c 	bl	efa6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x66>
    ef8e:	4605      	mov	r5, r0
    ef90:	f000 f857 	bl	f042 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    ef94:	4601      	mov	r1, r0
    ef96:	462a      	mov	r2, r5
    ef98:	4620      	mov	r0, r4
    ef9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef9e:	f7ff bda7 	b.w	eaf0 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    efa2:	f7f3 b84b 	b.w	203c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    efa6:	b510      	push	{r4, lr}
    efa8:	4604      	mov	r4, r0
    efaa:	4608      	mov	r0, r1
    efac:	f001 f919 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    efb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    efb4:	2c02      	cmp	r4, #2
    efb6:	d00a      	beq.n	efce <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x8e>
    efb8:	f640 0234 	movw	r2, #2100	; 0x834
    efbc:	4410      	add	r0, r2
    efbe:	f24a 5295 	movw	r2, #42389	; 0xa595
    efc2:	4410      	add	r0, r2
    efc4:	fbb0 f0f1 	udiv	r0, r0, r1
    efc8:	f200 1037 	addw	r0, r0, #311	; 0x137
    efcc:	bd10      	pop	{r4, pc}
    efce:	460a      	mov	r2, r1
    efd0:	e7f4      	b.n	efbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7c>
    efd2:	b510      	push	{r4, lr}
    efd4:	4604      	mov	r4, r0
    efd6:	2000      	movs	r0, #0
    efd8:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    efdc:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    efe0:	f7f3 fc78 	bl	28d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    efe4:	b140      	cbz	r0, eff8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb8>
    efe6:	2020      	movs	r0, #32
    efe8:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    efec:	f504 7084 	add.w	r0, r4, #264	; 0x108
    eff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eff4:	f7fb bed6 	b.w	ada4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    eff8:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    effc:	2035      	movs	r0, #53	; 0x35
    effe:	f7f5 fab5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f002:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f004:	4613      	mov	r3, r2
    f006:	460a      	mov	r2, r1
    f008:	4604      	mov	r4, r0
    f00a:	4601      	mov	r1, r0
    f00c:	4668      	mov	r0, sp
    f00e:	f7f9 fce3 	bl	89d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x520>
    f012:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f016:	4669      	mov	r1, sp
    f018:	f7ff ffc3 	bl	efa2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    f01c:	2800      	cmp	r0, #0
    f01e:	d104      	bne.n	f02a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xea>
    f020:	f640 2139 	movw	r1, #2617	; 0xa39
    f024:	2035      	movs	r0, #53	; 0x35
    f026:	f7f5 faa1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f02a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    f02c:	b510      	push	{r4, lr}
    f02e:	245b      	movs	r4, #91	; 0x5b
    f030:	f001 f895 	bl	1015e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    f034:	b910      	cbnz	r0, f03c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    f036:	f001 f888 	bl	1014a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    f03a:	b100      	cbz	r0, f03e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfe>
    f03c:	2462      	movs	r4, #98	; 0x62
    f03e:	4620      	mov	r0, r4
    f040:	bd10      	pop	{r4, pc}
    f042:	b510      	push	{r4, lr}
    f044:	f7ff fff2 	bl	f02c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    f048:	3069      	adds	r0, #105	; 0x69
    f04a:	b280      	uxth	r0, r0
    f04c:	bd10      	pop	{r4, pc}
    f04e:	b510      	push	{r4, lr}
    f050:	f7ff ffec 	bl	f02c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    f054:	30ff      	adds	r0, #255	; 0xff
    f056:	b280      	uxth	r0, r0
    f058:	bd10      	pop	{r4, pc}
    f05a:	b1d0      	cbz	r0, f092 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x152>
    f05c:	2908      	cmp	r1, #8
    f05e:	d011      	beq.n	f084 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x144>
    f060:	2904      	cmp	r1, #4
    f062:	d00b      	beq.n	f07c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x13c>
    f064:	2000      	movs	r0, #0
    f066:	2902      	cmp	r1, #2
    f068:	d010      	beq.n	f08c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x14c>
    f06a:	2108      	movs	r1, #8
    f06c:	3028      	adds	r0, #40	; 0x28
    f06e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    f072:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    f076:	4408      	add	r0, r1
    f078:	3098      	adds	r0, #152	; 0x98
    f07a:	4770      	bx	lr
    f07c:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    f080:	2110      	movs	r1, #16
    f082:	e7f4      	b.n	f06e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    f084:	f44f 70c8 	mov.w	r0, #400	; 0x190
    f088:	2140      	movs	r1, #64	; 0x40
    f08a:	e7f0      	b.n	f06e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    f08c:	2104      	movs	r1, #4
    f08e:	3018      	adds	r0, #24
    f090:	e7ed      	b.n	f06e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    f092:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    f096:	4770      	bx	lr
    f098:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f09c:	f001 0307 	and.w	r3, r1, #7
    f0a0:	7802      	ldrb	r2, [r0, #0]
    f0a2:	2101      	movs	r1, #1
    f0a4:	4099      	lsls	r1, r3
    f0a6:	438a      	bics	r2, r1
    f0a8:	7002      	strb	r2, [r0, #0]
    f0aa:	4770      	bx	lr

0000f0ac <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f0ac:	f7f5 bde8 	b.w	4c80 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f0b0 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    f0b0:	2000      	movs	r0, #0
    f0b2:	4770      	bx	lr

0000f0b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    f0b4:	b538      	push	{r3, r4, r5, lr}
    f0b6:	460d      	mov	r5, r1
    f0b8:	4604      	mov	r4, r0
    f0ba:	e050      	b.n	f15e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    f0bc:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    f0c0:	1c40      	adds	r0, r0, #1
    f0c2:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    f0c6:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    f0ca:	1c40      	adds	r0, r0, #1
    f0cc:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    f0d0:	4620      	mov	r0, r4
    f0d2:	f000 f8e1 	bl	f298 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    f0d6:	b198      	cbz	r0, f100 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    f0d8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    f0dc:	1c40      	adds	r0, r0, #1
    f0de:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    f0e2:	4620      	mov	r0, r4
    f0e4:	f000 f86e 	bl	f1c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    f0e8:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    f0ec:	4288      	cmp	r0, r1
    f0ee:	d307      	bcc.n	f100 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    f0f0:	2000      	movs	r0, #0
    f0f2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    f0f6:	2001      	movs	r0, #1
    f0f8:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    f0fc:	f7f7 fb76 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f100:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    f104:	b120      	cbz	r0, f110 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    f106:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    f10a:	1c40      	adds	r0, r0, #1
    f10c:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    f110:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    f114:	b120      	cbz	r0, f120 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    f116:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    f11a:	1c40      	adds	r0, r0, #1
    f11c:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    f120:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    f124:	f88d 0000 	strb.w	r0, [sp]
    f128:	9800      	ldr	r0, [sp, #0]
    f12a:	9000      	str	r0, [sp, #0]
    f12c:	f89d 0000 	ldrb.w	r0, [sp]
    f130:	b940      	cbnz	r0, f144 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    f132:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    f136:	2300      	movs	r3, #0
    f138:	2101      	movs	r1, #1
    f13a:	f104 0078 	add.w	r0, r4, #120	; 0x78
    f13e:	f7ff f88a 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f142:	b120      	cbz	r0, f14e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    f144:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    f148:	1c40      	adds	r0, r0, #1
    f14a:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    f14e:	4620      	mov	r0, r4
    f150:	f000 f847 	bl	f1e2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    f154:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f158:	1c40      	adds	r0, r0, #1
    f15a:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    f15e:	1e6d      	subs	r5, r5, #1
    f160:	b2ad      	uxth	r5, r5
    f162:	d2ab      	bcs.n	f0bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    f164:	bd38      	pop	{r3, r4, r5, pc}

0000f166 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    f166:	b510      	push	{r4, lr}
    f168:	f7fa fd88 	bl	9c7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    f16c:	b128      	cbz	r0, f17a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    f16e:	2000      	movs	r0, #0
    f170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f174:	4601      	mov	r1, r0
    f176:	f7fa bd2d 	b.w	9bd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    f17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f17e:	f7f6 ba21 	b.w	55c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    f182:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f186:	28fe      	cmp	r0, #254	; 0xfe
    f188:	d001      	beq.n	f18e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    f18a:	2001      	movs	r0, #1
    f18c:	4770      	bx	lr
    f18e:	2000      	movs	r0, #0
    f190:	4770      	bx	lr
    f192:	b510      	push	{r4, lr}
    f194:	2801      	cmp	r0, #1
    f196:	d006      	beq.n	f1a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f198:	2802      	cmp	r0, #2
    f19a:	d004      	beq.n	f1a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f19c:	f240 2163 	movw	r1, #611	; 0x263
    f1a0:	2006      	movs	r0, #6
    f1a2:	f7f5 f9e3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1a6:	bd10      	pop	{r4, pc}
    f1a8:	2801      	cmp	r0, #1
    f1aa:	d002      	beq.n	f1b2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    f1ac:	2802      	cmp	r0, #2
    f1ae:	d105      	bne.n	f1bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f1b0:	e002      	b.n	f1b8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    f1b2:	2901      	cmp	r1, #1
    f1b4:	d004      	beq.n	f1c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f1b6:	e001      	b.n	f1bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f1b8:	2902      	cmp	r1, #2
    f1ba:	d001      	beq.n	f1c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f1bc:	2000      	movs	r0, #0
    f1be:	4770      	bx	lr
    f1c0:	2001      	movs	r0, #1
    f1c2:	4770      	bx	lr
    f1c4:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    f1c8:	428a      	cmp	r2, r1
    f1ca:	d301      	bcc.n	f1d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    f1cc:	1a51      	subs	r1, r2, r1
    f1ce:	e000      	b.n	f1d2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    f1d0:	2100      	movs	r1, #0
    f1d2:	8a82      	ldrh	r2, [r0, #20]
    f1d4:	1d52      	adds	r2, r2, #5
    f1d6:	428a      	cmp	r2, r1
    f1d8:	d302      	bcc.n	f1e0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    f1da:	2101      	movs	r1, #1
    f1dc:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    f1e0:	4770      	bx	lr
    f1e2:	b570      	push	{r4, r5, r6, lr}
    f1e4:	4604      	mov	r4, r0
    f1e6:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    f1ea:	2500      	movs	r5, #0
    f1ec:	2601      	movs	r6, #1
    f1ee:	280c      	cmp	r0, #12
    f1f0:	d02c      	beq.n	f24c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    f1f2:	280d      	cmp	r0, #13
    f1f4:	d129      	bne.n	f24a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f1f6:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f1fa:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f1fe:	1c40      	adds	r0, r0, #1
    f200:	4288      	cmp	r0, r1
    f202:	d122      	bne.n	f24a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f204:	8820      	ldrh	r0, [r4, #0]
    f206:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    f20a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    f20e:	f7fe ffd8 	bl	e1c2 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f212:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    f216:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f21a:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    f21e:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    f222:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    f226:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    f22a:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    f22e:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    f232:	2102      	movs	r1, #2
    f234:	4620      	mov	r0, r4
    f236:	f7f7 f89b 	bl	6370 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f23a:	f7f7 fad7 	bl	67ec <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f23e:	2103      	movs	r1, #3
    f240:	4620      	mov	r0, r4
    f242:	f7f8 ff75 	bl	8130 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    f246:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f24a:	bd70      	pop	{r4, r5, r6, pc}
    f24c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f250:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    f254:	1c40      	adds	r0, r0, #1
    f256:	4288      	cmp	r0, r1
    f258:	d1f7      	bne.n	f24a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f25a:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f25e:	f8d0 1001 	ldr.w	r1, [r0, #1]
    f262:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    f266:	7940      	ldrb	r0, [r0, #5]
    f268:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    f26c:	2103      	movs	r1, #3
    f26e:	4620      	mov	r0, r4
    f270:	f7f7 f87e 	bl	6370 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f274:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f278:	7800      	ldrb	r0, [r0, #0]
    f27a:	b140      	cbz	r0, f28e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    f27c:	2101      	movs	r1, #1
    f27e:	20fe      	movs	r0, #254	; 0xfe
    f280:	f7fb fd18 	bl	acb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    f284:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f288:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    f28c:	bd70      	pop	{r4, r5, r6, pc}
    f28e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    f292:	2036      	movs	r0, #54	; 0x36
    f294:	f7f5 f96a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f298:	b510      	push	{r4, lr}
    f29a:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    f29e:	b941      	cbnz	r1, f2b2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    f2a0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    f2a4:	2300      	movs	r3, #0
    f2a6:	2106      	movs	r1, #6
    f2a8:	3078      	adds	r0, #120	; 0x78
    f2aa:	f7fe ffd4 	bl	e256 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f2ae:	2800      	cmp	r0, #0
    f2b0:	d000      	beq.n	f2b4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    f2b2:	2001      	movs	r0, #1
    f2b4:	bd10      	pop	{r4, pc}

0000f2b6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f2b6:	b510      	push	{r4, lr}
    f2b8:	460c      	mov	r4, r1
    f2ba:	4601      	mov	r1, r0
    f2bc:	4610      	mov	r0, r2
    f2be:	f7f2 fd7f 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f2c2:	2800      	cmp	r0, #0
    f2c4:	da06      	bge.n	f2d4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    f2c6:	1a21      	subs	r1, r4, r0
    f2c8:	1e49      	subs	r1, r1, #1
    f2ca:	fbb1 f1f4 	udiv	r1, r1, r4
    f2ce:	fb01 0004 	mla	r0, r1, r4, r0
    f2d2:	bd10      	pop	{r4, pc}
    f2d4:	fb90 f1f4 	sdiv	r1, r0, r4
    f2d8:	fb01 0014 	mls	r0, r1, r4, r0
    f2dc:	bd10      	pop	{r4, pc}
    f2de:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f2e2:	f001 0107 	and.w	r1, r1, #7
    f2e6:	7800      	ldrb	r0, [r0, #0]
    f2e8:	2201      	movs	r2, #1
    f2ea:	408a      	lsls	r2, r1
    f2ec:	4010      	ands	r0, r2
    f2ee:	40c8      	lsrs	r0, r1
    f2f0:	4770      	bx	lr
    f2f2:	b118      	cbz	r0, f2fc <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f2f4:	2802      	cmp	r0, #2
    f2f6:	d001      	beq.n	f2fc <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f2f8:	2001      	movs	r0, #1
    f2fa:	4770      	bx	lr
    f2fc:	2000      	movs	r0, #0
    f2fe:	4770      	bx	lr

0000f300 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f300:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f302:	7881      	ldrb	r1, [r0, #2]
    f304:	4604      	mov	r4, r0
    f306:	291a      	cmp	r1, #26
    f308:	d025      	beq.n	f356 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f30a:	dc0e      	bgt.n	f32a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f30c:	2916      	cmp	r1, #22
    f30e:	d22d      	bcs.n	f36c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f310:	e8df f001 	tbb	[pc, r1]
    f314:	2c2c2c2c 	.word	0x2c2c2c2c
    f318:	2c2c212c 	.word	0x2c2c212c
    f31c:	2c2c2c2c 	.word	0x2c2c2c2c
    f320:	2c2c2c2c 	.word	0x2c2c2c2c
    f324:	212c2c2c 	.word	0x212c2c2c
    f328:	2121      	.short	0x2121
    f32a:	292a      	cmp	r1, #42	; 0x2a
    f32c:	d01e      	beq.n	f36c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f32e:	dc0b      	bgt.n	f348 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f330:	f1a1 011e 	sub.w	r1, r1, #30
    f334:	290c      	cmp	r1, #12
    f336:	d219      	bcs.n	f36c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f338:	e8df f001 	tbb	[pc, r1]
    f33c:	18181818 	.word	0x18181818
    f340:	18181818 	.word	0x18181818
    f344:	0d181818 	.word	0x0d181818
    f348:	393a      	subs	r1, #58	; 0x3a
    f34a:	2904      	cmp	r1, #4
    f34c:	d20e      	bcs.n	f36c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f34e:	e8df f001 	tbb	[pc, r1]
    f352:	020d      	.short	0x020d
    f354:	020d      	.short	0x020d
    f356:	8820      	ldrh	r0, [r4, #0]
    f358:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f35c:	d206      	bcs.n	f36c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f35e:	2701      	movs	r7, #1
    f360:	4669      	mov	r1, sp
    f362:	f7fe ff1e 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f366:	b118      	cbz	r0, f370 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f368:	2002      	movs	r0, #2
    f36a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f36c:	2012      	movs	r0, #18
    f36e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f370:	9d01      	ldr	r5, [sp, #4]
    f372:	4668      	mov	r0, sp
    f374:	462e      	mov	r6, r5
    f376:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    f37a:	f206 163d 	addw	r6, r6, #317	; 0x13d
    f37e:	f000 fd7f 	bl	fe80 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    f382:	b138      	cbz	r0, f394 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f384:	7828      	ldrb	r0, [r5, #0]
    f386:	f88d 0008 	strb.w	r0, [sp, #8]
    f38a:	9802      	ldr	r0, [sp, #8]
    f38c:	9002      	str	r0, [sp, #8]
    f38e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f392:	b108      	cbz	r0, f398 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f394:	200c      	movs	r0, #12
    f396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f398:	702f      	strb	r7, [r5, #0]
    f39a:	78a0      	ldrb	r0, [r4, #2]
    f39c:	7030      	strb	r0, [r6, #0]
    f39e:	2000      	movs	r0, #0
    f3a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f3a2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f3a2:	b510      	push	{r4, lr}
    f3a4:	4604      	mov	r4, r0
    f3a6:	7800      	ldrb	r0, [r0, #0]
    f3a8:	b118      	cbz	r0, f3b2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f3aa:	2801      	cmp	r0, #1
    f3ac:	d001      	beq.n	f3b2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f3ae:	2012      	movs	r0, #18
    f3b0:	bd10      	pop	{r4, pc}
    f3b2:	f000 fd7c 	bl	feae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f3b6:	b120      	cbz	r0, f3c2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f3b8:	f7f6 fda0 	bl	5efc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f3bc:	b108      	cbz	r0, f3c2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f3be:	200c      	movs	r0, #12
    f3c0:	bd10      	pop	{r4, pc}
    f3c2:	7820      	ldrb	r0, [r4, #0]
    f3c4:	f7ff ff95 	bl	f2f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f3c8:	1de2      	adds	r2, r4, #7
    f3ca:	f104 0317 	add.w	r3, r4, #23
    f3ce:	1c61      	adds	r1, r4, #1
    f3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3d4:	f7f6 bdc4 	b.w	5f60 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f3d8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f3d8:	b510      	push	{r4, lr}
    f3da:	4604      	mov	r4, r0
    f3dc:	f000 fe0e 	bl	fffc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    f3e0:	b108      	cbz	r0, f3e6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f3e2:	200c      	movs	r0, #12
    f3e4:	bd10      	pop	{r4, pc}
    f3e6:	7820      	ldrb	r0, [r4, #0]
    f3e8:	b118      	cbz	r0, f3f2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f3ea:	2801      	cmp	r0, #1
    f3ec:	d001      	beq.n	f3f2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f3ee:	2012      	movs	r0, #18
    f3f0:	bd10      	pop	{r4, pc}
    f3f2:	f7ff ff7e 	bl	f2f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f3f6:	1c61      	adds	r1, r4, #1
    f3f8:	f7f6 fe56 	bl	60a8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f3fc:	b108      	cbz	r0, f402 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f3fe:	2000      	movs	r0, #0
    f400:	bd10      	pop	{r4, pc}
    f402:	2007      	movs	r0, #7
    f404:	bd10      	pop	{r4, pc}

0000f406 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f406:	b510      	push	{r4, lr}
    f408:	f000 fd51 	bl	feae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f40c:	b120      	cbz	r0, f418 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f40e:	f7f6 fd75 	bl	5efc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f412:	b108      	cbz	r0, f418 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f414:	200c      	movs	r0, #12
    f416:	bd10      	pop	{r4, pc}
    f418:	f7f6 fde8 	bl	5fec <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f41c:	2000      	movs	r0, #0
    f41e:	bd10      	pop	{r4, pc}

0000f420 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f420:	b510      	push	{r4, lr}
    f422:	f000 fdeb 	bl	fffc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    f426:	b108      	cbz	r0, f42c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f428:	200c      	movs	r0, #12
    f42a:	bd10      	pop	{r4, pc}
    f42c:	f7f6 fe64 	bl	60f8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f430:	2000      	movs	r0, #0
    f432:	bd10      	pop	{r4, pc}

0000f434 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f436:	4605      	mov	r5, r0
    f438:	f000 fafa 	bl	fa30 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f43c:	2800      	cmp	r0, #0
    f43e:	d112      	bne.n	f466 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    f440:	8828      	ldrh	r0, [r5, #0]
    f442:	2100      	movs	r1, #0
    f444:	f7fe fd43 	bl	dece <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f448:	0004      	movs	r4, r0
    f44a:	d00d      	beq.n	f468 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f44c:	f000 fd1b 	bl	fe86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f450:	b150      	cbz	r0, f468 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f452:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f456:	f88d 0000 	strb.w	r0, [sp]
    f45a:	9800      	ldr	r0, [sp, #0]
    f45c:	9000      	str	r0, [sp, #0]
    f45e:	f89d 0000 	ldrb.w	r0, [sp]
    f462:	b118      	cbz	r0, f46c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f464:	203a      	movs	r0, #58	; 0x3a
    f466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f468:	2002      	movs	r0, #2
    f46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f46c:	88a8      	ldrh	r0, [r5, #4]
    f46e:	f7fe fea4 	bl	e1ba <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f472:	4606      	mov	r6, r0
    f474:	4601      	mov	r1, r0
    f476:	2008      	movs	r0, #8
    f478:	f7ff f86b 	bl	e552 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f47c:	4601      	mov	r1, r0
    f47e:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    f482:	4281      	cmp	r1, r0
    f484:	d301      	bcc.n	f48a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    f486:	42b0      	cmp	r0, r6
    f488:	d301      	bcc.n	f48e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    f48a:	2012      	movs	r0, #18
    f48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f48e:	4631      	mov	r1, r6
    f490:	2005      	movs	r0, #5
    f492:	f7ff f85e 	bl	e552 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f496:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    f49a:	2000      	movs	r0, #0
    f49c:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    f4a0:	88e8      	ldrh	r0, [r5, #6]
    f4a2:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    f4a6:	8928      	ldrh	r0, [r5, #8]
    f4a8:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    f4ac:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    f4b0:	2001      	movs	r0, #1
    f4b2:	7020      	strb	r0, [r4, #0]
    f4b4:	2000      	movs	r0, #0
    f4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f4b8 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    f4b8:	b508      	push	{r3, lr}
    f4ba:	f7f7 f991 	bl	67e0 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    f4be:	b970      	cbnz	r0, f4de <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    f4c0:	f7f8 fff4 	bl	84ac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f4c4:	2805      	cmp	r0, #5
    f4c6:	d005      	beq.n	f4d4 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    f4c8:	f7f7 fc46 	bl	6d58 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    f4cc:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f4d0:	39ff      	subs	r1, #255	; 0xff
    f4d2:	d004      	beq.n	f4de <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    f4d4:	4668      	mov	r0, sp
    f4d6:	f7f8 ff55 	bl	8384 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    f4da:	b110      	cbz	r0, f4e2 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    f4dc:	e012      	b.n	f504 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x4c>
    f4de:	200c      	movs	r0, #12
    f4e0:	bd08      	pop	{r3, pc}
    f4e2:	9800      	ldr	r0, [sp, #0]
    f4e4:	8800      	ldrh	r0, [r0, #0]
    f4e6:	f7fe fd5a 	bl	df9e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f4ea:	9800      	ldr	r0, [sp, #0]
    f4ec:	2100      	movs	r1, #0
    f4ee:	8800      	ldrh	r0, [r0, #0]
    f4f0:	f7f5 faba 	bl	4a68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f4f4:	b120      	cbz	r0, f500 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    f4f6:	f640 717f 	movw	r1, #3967	; 0xf7f
    f4fa:	2039      	movs	r0, #57	; 0x39
    f4fc:	f7f5 f836 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f500:	f7f7 f966 	bl	67d0 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>
    f504:	2000      	movs	r0, #0
    f506:	bd08      	pop	{r3, pc}

0000f508 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f508:	b510      	push	{r4, lr}
    f50a:	460b      	mov	r3, r1
    f50c:	2201      	movs	r2, #1
    f50e:	f100 0110 	add.w	r1, r0, #16
    f512:	f7fe fe0a 	bl	e12a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f516:	2000      	movs	r0, #0
    f518:	bd10      	pop	{r4, pc}

0000f51a <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f51a:	b510      	push	{r4, lr}
    f51c:	2108      	movs	r1, #8
    f51e:	f7f5 f8cf 	bl	46c0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f522:	2000      	movs	r0, #0
    f524:	bd10      	pop	{r4, pc}

0000f526 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f526:	b510      	push	{r4, lr}
    f528:	4604      	mov	r4, r0
    f52a:	f000 fca3 	bl	fe74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f52e:	b140      	cbz	r0, f542 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    f530:	20fb      	movs	r0, #251	; 0xfb
    f532:	8020      	strh	r0, [r4, #0]
    f534:	f640 0148 	movw	r1, #2120	; 0x848
    f538:	8061      	strh	r1, [r4, #2]
    f53a:	80a0      	strh	r0, [r4, #4]
    f53c:	80e1      	strh	r1, [r4, #6]
    f53e:	2000      	movs	r0, #0
    f540:	bd10      	pop	{r4, pc}
    f542:	2001      	movs	r0, #1
    f544:	bd10      	pop	{r4, pc}

0000f546 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    f546:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f548:	460d      	mov	r5, r1
    f54a:	4606      	mov	r6, r0
    f54c:	f7fc f940 	bl	b7d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f550:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f554:	b300      	cbz	r0, f598 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    f556:	8830      	ldrh	r0, [r6, #0]
    f558:	4669      	mov	r1, sp
    f55a:	f7fe fe22 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f55e:	2800      	cmp	r0, #0
    f560:	d119      	bne.n	f596 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    f562:	9c01      	ldr	r4, [sp, #4]
    f564:	2700      	movs	r7, #0
    f566:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    f56a:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    f56e:	f000 fa94 	bl	fa9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    f572:	70a8      	strb	r0, [r5, #2]
    f574:	7860      	ldrb	r0, [r4, #1]
    f576:	f000 fa90 	bl	fa9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    f57a:	70e8      	strb	r0, [r5, #3]
    f57c:	78a0      	ldrb	r0, [r4, #2]
    f57e:	f88d 0008 	strb.w	r0, [sp, #8]
    f582:	9802      	ldr	r0, [sp, #8]
    f584:	9002      	str	r0, [sp, #8]
    f586:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f58a:	3c6a      	subs	r4, #106	; 0x6a
    f58c:	2800      	cmp	r0, #0
    f58e:	d1ea      	bne.n	f566 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    f590:	8830      	ldrh	r0, [r6, #0]
    f592:	8028      	strh	r0, [r5, #0]
    f594:	2000      	movs	r0, #0
    f596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f598:	2001      	movs	r0, #1
    f59a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f59c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f59c:	2108      	movs	r1, #8
    f59e:	7001      	strb	r1, [r0, #0]
    f5a0:	2000      	movs	r0, #0
    f5a2:	4770      	bx	lr

0000f5a4 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f5a4:	b510      	push	{r4, lr}
    f5a6:	4604      	mov	r4, r0
    f5a8:	20d8      	movs	r0, #216	; 0xd8
    f5aa:	7020      	strb	r0, [r4, #0]
    f5ac:	f000 fc43 	bl	fe36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    f5b0:	7060      	strb	r0, [r4, #1]
    f5b2:	2000      	movs	r0, #0
    f5b4:	bd10      	pop	{r4, pc}

0000f5b6 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f5b6:	2108      	movs	r1, #8
    f5b8:	7001      	strb	r1, [r0, #0]
    f5ba:	2000      	movs	r0, #0
    f5bc:	4770      	bx	lr

0000f5be <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f5be:	b510      	push	{r4, lr}
    f5c0:	4604      	mov	r4, r0
    f5c2:	7800      	ldrb	r0, [r0, #0]
    f5c4:	b108      	cbz	r0, f5ca <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f5c6:	2801      	cmp	r0, #1
    f5c8:	d110      	bne.n	f5ec <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f5ca:	f000 fc70 	bl	feae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f5ce:	b120      	cbz	r0, f5da <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f5d0:	f7f6 fc94 	bl	5efc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f5d4:	b108      	cbz	r0, f5da <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f5d6:	200c      	movs	r0, #12
    f5d8:	bd10      	pop	{r4, pc}
    f5da:	7820      	ldrb	r0, [r4, #0]
    f5dc:	f7ff fe89 	bl	f2f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f5e0:	1c61      	adds	r1, r4, #1
    f5e2:	f7fe fd88 	bl	e0f6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f5e6:	b108      	cbz	r0, f5ec <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f5e8:	2000      	movs	r0, #0
    f5ea:	bd10      	pop	{r4, pc}
    f5ec:	2012      	movs	r0, #18
    f5ee:	bd10      	pop	{r4, pc}

0000f5f0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f5f0:	b510      	push	{r4, lr}
    f5f2:	4604      	mov	r4, r0
    f5f4:	f000 fd02 	bl	fffc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    f5f8:	b108      	cbz	r0, f5fe <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f5fa:	200c      	movs	r0, #12
    f5fc:	bd10      	pop	{r4, pc}
    f5fe:	7820      	ldrb	r0, [r4, #0]
    f600:	b108      	cbz	r0, f606 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f602:	2801      	cmp	r0, #1
    f604:	d107      	bne.n	f616 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f606:	f7ff fe74 	bl	f2f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f60a:	1c61      	adds	r1, r4, #1
    f60c:	f7fe fd82 	bl	e114 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f610:	b108      	cbz	r0, f616 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f612:	2000      	movs	r0, #0
    f614:	bd10      	pop	{r4, pc}
    f616:	2012      	movs	r0, #18
    f618:	bd10      	pop	{r4, pc}

0000f61a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f61a:	b510      	push	{r4, lr}
    f61c:	4604      	mov	r4, r0
    f61e:	f000 fc46 	bl	feae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f622:	b108      	cbz	r0, f628 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f624:	200c      	movs	r0, #12
    f626:	bd10      	pop	{r4, pc}
    f628:	7820      	ldrb	r0, [r4, #0]
    f62a:	f000 0001 	and.w	r0, r0, #1
    f62e:	f7f6 fc5f 	bl	5ef0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f632:	2000      	movs	r0, #0
    f634:	bd10      	pop	{r4, pc}

0000f636 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f636:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f638:	460d      	mov	r5, r1
    f63a:	4604      	mov	r4, r0
    f63c:	f000 fc1a 	bl	fe74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f640:	b130      	cbz	r0, f650 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f642:	88a2      	ldrh	r2, [r4, #4]
    f644:	f244 2090 	movw	r0, #17040	; 0x4290
    f648:	4282      	cmp	r2, r0
    f64a:	d903      	bls.n	f654 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f64c:	2012      	movs	r0, #18
    f64e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f650:	2001      	movs	r0, #1
    f652:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f654:	f640 0048 	movw	r0, #2120	; 0x848
    f658:	4282      	cmp	r2, r0
    f65a:	d300      	bcc.n	f65e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f65c:	4602      	mov	r2, r0
    f65e:	8820      	ldrh	r0, [r4, #0]
    f660:	f8ad 0000 	strh.w	r0, [sp]
    f664:	8860      	ldrh	r0, [r4, #2]
    f666:	f8ad 0002 	strh.w	r0, [sp, #2]
    f66a:	f8ad 2004 	strh.w	r2, [sp, #4]
    f66e:	8860      	ldrh	r0, [r4, #2]
    f670:	f8ad 0006 	strh.w	r0, [sp, #6]
    f674:	f8ad 2008 	strh.w	r2, [sp, #8]
    f678:	8820      	ldrh	r0, [r4, #0]
    f67a:	8028      	strh	r0, [r5, #0]
    f67c:	4668      	mov	r0, sp
    f67e:	f000 fc28 	bl	fed2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    f682:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f684 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    f684:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f686:	4604      	mov	r4, r0
    f688:	f7fe fd75 	bl	e176 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    f68c:	b160      	cbz	r0, f6a8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    f68e:	4620      	mov	r0, r4
    f690:	f7f6 fef4 	bl	647c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    f694:	4669      	mov	r1, sp
    f696:	2000      	movs	r0, #0
    f698:	f7fe fc22 	bl	dee0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f69c:	b150      	cbz	r0, f6b4 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    f69e:	f241 0104 	movw	r1, #4100	; 0x1004
    f6a2:	2039      	movs	r0, #57	; 0x39
    f6a4:	f7f4 ff62 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6a8:	2012      	movs	r0, #18
    f6aa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f6ac:	9802      	ldr	r0, [sp, #8]
    f6ae:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    f6b2:	e000      	b.n	f6b6 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    f6b4:	2401      	movs	r4, #1
    f6b6:	4668      	mov	r0, sp
    f6b8:	f7f5 f988 	bl	49cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f6bc:	2800      	cmp	r0, #0
    f6be:	d0f5      	beq.n	f6ac <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    f6c0:	2000      	movs	r0, #0
    f6c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f6c4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f6c4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f6c6:	4604      	mov	r4, r0
    f6c8:	f7fc f882 	bl	b7d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f6cc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f6d0:	b1b0      	cbz	r0, f700 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f6d2:	f10d 0007 	add.w	r0, sp, #7
    f6d6:	9000      	str	r0, [sp, #0]
    f6d8:	7922      	ldrb	r2, [r4, #4]
    f6da:	78e1      	ldrb	r1, [r4, #3]
    f6dc:	78a0      	ldrb	r0, [r4, #2]
    f6de:	f10d 0306 	add.w	r3, sp, #6
    f6e2:	f000 fc74 	bl	ffce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    f6e6:	2800      	cmp	r0, #0
    f6e8:	d109      	bne.n	f6fe <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f6ea:	8820      	ldrh	r0, [r4, #0]
    f6ec:	f8ad 0004 	strh.w	r0, [sp, #4]
    f6f0:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f6f4:	f8ad 0008 	strh.w	r0, [sp, #8]
    f6f8:	a801      	add	r0, sp, #4
    f6fa:	f000 f8f8 	bl	f8ee <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f6fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f700:	2001      	movs	r0, #1
    f702:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f704 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f704:	b510      	push	{r4, lr}
    f706:	4604      	mov	r4, r0
    f708:	f000 fbd1 	bl	feae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f70c:	b120      	cbz	r0, f718 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f70e:	f7f6 fbf5 	bl	5efc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f712:	b108      	cbz	r0, f718 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f714:	200c      	movs	r0, #12
    f716:	bd10      	pop	{r4, pc}
    f718:	7820      	ldrb	r0, [r4, #0]
    f71a:	f7ff fdea 	bl	f2f2 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f71e:	79e2      	ldrb	r2, [r4, #7]
    f720:	1c61      	adds	r1, r4, #1
    f722:	f7f6 fb85 	bl	5e30 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f726:	b108      	cbz	r0, f72c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f728:	2000      	movs	r0, #0
    f72a:	bd10      	pop	{r4, pc}
    f72c:	2002      	movs	r0, #2
    f72e:	bd10      	pop	{r4, pc}

0000f730 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f730:	b510      	push	{r4, lr}
    f732:	4604      	mov	r4, r0
    f734:	2001      	movs	r0, #1
    f736:	f000 f9bb 	bl	fab0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    f73a:	b128      	cbz	r0, f748 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f73c:	4621      	mov	r1, r4
    f73e:	2001      	movs	r0, #1
    f740:	f7f5 fd7e 	bl	5240 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f744:	2000      	movs	r0, #0
    f746:	bd10      	pop	{r4, pc}
    f748:	200c      	movs	r0, #12
    f74a:	bd10      	pop	{r4, pc}

0000f74c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f74c:	b510      	push	{r4, lr}
    f74e:	8800      	ldrh	r0, [r0, #0]
    f750:	f7f6 fc62 	bl	6018 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f754:	b108      	cbz	r0, f75a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f756:	2000      	movs	r0, #0
    f758:	bd10      	pop	{r4, pc}
    f75a:	2030      	movs	r0, #48	; 0x30
    f75c:	bd10      	pop	{r4, pc}

0000f75e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f75e:	b51c      	push	{r2, r3, r4, lr}
    f760:	7801      	ldrb	r1, [r0, #0]
    f762:	f88d 1000 	strb.w	r1, [sp]
    f766:	7840      	ldrb	r0, [r0, #1]
    f768:	f88d 0001 	strb.w	r0, [sp, #1]
    f76c:	2000      	movs	r0, #0
    f76e:	f8ad 0002 	strh.w	r0, [sp, #2]
    f772:	f8ad 0004 	strh.w	r0, [sp, #4]
    f776:	4601      	mov	r1, r0
    f778:	4668      	mov	r0, sp
    f77a:	f000 f9e4 	bl	fb46 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    f77e:	2800      	cmp	r0, #0
    f780:	d102      	bne.n	f788 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f782:	4668      	mov	r0, sp
    f784:	f000 f9c3 	bl	fb0e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    f788:	bd1c      	pop	{r2, r3, r4, pc}

0000f78a <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f78a:	b500      	push	{lr}
    f78c:	b087      	sub	sp, #28
    f78e:	7941      	ldrb	r1, [r0, #5]
    f790:	f88d 1000 	strb.w	r1, [sp]
    f794:	7981      	ldrb	r1, [r0, #6]
    f796:	f88d 1001 	strb.w	r1, [sp, #1]
    f79a:	2101      	movs	r1, #1
    f79c:	f88d 1002 	strb.w	r1, [sp, #2]
    f7a0:	7801      	ldrb	r1, [r0, #0]
    f7a2:	f88d 1003 	strb.w	r1, [sp, #3]
    f7a6:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f7aa:	f240 2271 	movw	r2, #625	; 0x271
    f7ae:	4351      	muls	r1, r2
    f7b0:	9102      	str	r1, [sp, #8]
    f7b2:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f7b6:	4350      	muls	r0, r2
    f7b8:	9004      	str	r0, [sp, #16]
    f7ba:	2007      	movs	r0, #7
    f7bc:	f88d 0018 	strb.w	r0, [sp, #24]
    f7c0:	2000      	movs	r0, #0
    f7c2:	f88d 0019 	strb.w	r0, [sp, #25]
    f7c6:	9804      	ldr	r0, [sp, #16]
    f7c8:	f7fb ff24 	bl	b614 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    f7cc:	b140      	cbz	r0, f7e0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7ce:	9802      	ldr	r0, [sp, #8]
    f7d0:	f7fb ff14 	bl	b5fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    f7d4:	b120      	cbz	r0, f7e0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7d6:	4668      	mov	r0, sp
    f7d8:	f7fb fda8 	bl	b32c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f7dc:	b007      	add	sp, #28
    f7de:	bd00      	pop	{pc}
    f7e0:	2030      	movs	r0, #48	; 0x30
    f7e2:	e7fb      	b.n	f7dc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f7e4 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    f7e4:	b570      	push	{r4, r5, r6, lr}
    f7e6:	4605      	mov	r5, r0
    f7e8:	8800      	ldrh	r0, [r0, #0]
    f7ea:	2100      	movs	r1, #0
    f7ec:	f7fe fb6f 	bl	dece <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f7f0:	0004      	movs	r4, r0
    f7f2:	d007      	beq.n	f804 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f7f4:	f000 fb47 	bl	fe86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f7f8:	b120      	cbz	r0, f804 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f7fa:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    f7fe:	b118      	cbz	r0, f808 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f800:	203a      	movs	r0, #58	; 0x3a
    f802:	bd70      	pop	{r4, r5, r6, pc}
    f804:	2002      	movs	r0, #2
    f806:	bd70      	pop	{r4, r5, r6, pc}
    f808:	2100      	movs	r1, #0
    f80a:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    f80e:	f7ff fd66 	bl	f2de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f812:	2801      	cmp	r0, #1
    f814:	d001      	beq.n	f81a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f816:	201a      	movs	r0, #26
    f818:	bd70      	pop	{r4, r5, r6, pc}
    f81a:	f8d5 1002 	ldr.w	r1, [r5, #2]
    f81e:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    f822:	f8d5 1006 	ldr.w	r1, [r5, #6]
    f826:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    f82a:	8969      	ldrh	r1, [r5, #10]
    f82c:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    f830:	2210      	movs	r2, #16
    f832:	f105 010c 	add.w	r1, r5, #12
    f836:	f204 1065 	addw	r0, r4, #357	; 0x165
    f83a:	f7fd faa7 	bl	cd8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f83e:	2001      	movs	r0, #1
    f840:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    f844:	2000      	movs	r0, #0
    f846:	bd70      	pop	{r4, r5, r6, pc}

0000f848 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f848:	b51c      	push	{r2, r3, r4, lr}
    f84a:	4604      	mov	r4, r0
    f84c:	f000 fb12 	bl	fe74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f850:	b178      	cbz	r0, f872 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f852:	8820      	ldrh	r0, [r4, #0]
    f854:	f8ad 0000 	strh.w	r0, [sp]
    f858:	8860      	ldrh	r0, [r4, #2]
    f85a:	f8ad 0002 	strh.w	r0, [sp, #2]
    f85e:	8820      	ldrh	r0, [r4, #0]
    f860:	f8ad 0004 	strh.w	r0, [sp, #4]
    f864:	8860      	ldrh	r0, [r4, #2]
    f866:	f8ad 0006 	strh.w	r0, [sp, #6]
    f86a:	4668      	mov	r0, sp
    f86c:	f7fb ff08 	bl	b680 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1dc>
    f870:	bd1c      	pop	{r2, r3, r4, pc}
    f872:	2001      	movs	r0, #1
    f874:	bd1c      	pop	{r2, r3, r4, pc}

0000f876 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f876:	b510      	push	{r4, lr}
    f878:	f7f5 fd06 	bl	5288 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f87c:	2000      	movs	r0, #0
    f87e:	bd10      	pop	{r4, pc}

0000f880 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f880:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f882:	460c      	mov	r4, r1
    f884:	4605      	mov	r5, r0
    f886:	f000 faf5 	bl	fe74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f88a:	b160      	cbz	r0, f8a6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f88c:	4669      	mov	r1, sp
    f88e:	4628      	mov	r0, r5
    f890:	f7fe fc87 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f894:	2800      	cmp	r0, #0
    f896:	d105      	bne.n	f8a4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f898:	2101      	movs	r1, #1
    f89a:	4622      	mov	r2, r4
    f89c:	9801      	ldr	r0, [sp, #4]
    f89e:	f000 fa74 	bl	fd8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f8a2:	2000      	movs	r0, #0
    f8a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f8a6:	2001      	movs	r0, #1
    f8a8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f8aa <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f8aa:	b510      	push	{r4, lr}
    f8ac:	4604      	mov	r4, r0
    f8ae:	2000      	movs	r0, #0
    f8b0:	f000 f8fe 	bl	fab0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    f8b4:	b128      	cbz	r0, f8c2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f8b6:	4621      	mov	r1, r4
    f8b8:	2000      	movs	r0, #0
    f8ba:	f7f5 fcc1 	bl	5240 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f8be:	2000      	movs	r0, #0
    f8c0:	bd10      	pop	{r4, pc}
    f8c2:	200c      	movs	r0, #12
    f8c4:	bd10      	pop	{r4, pc}

0000f8c6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f8c6:	b510      	push	{r4, lr}
    f8c8:	7800      	ldrb	r0, [r0, #0]
    f8ca:	f000 0001 	and.w	r0, r0, #1
    f8ce:	f7f8 fd61 	bl	8394 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    f8d2:	2000      	movs	r0, #0
    f8d4:	bd10      	pop	{r4, pc}

0000f8d6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f8d6:	b510      	push	{r4, lr}
    f8d8:	4604      	mov	r4, r0
    f8da:	f000 facb 	bl	fe74 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f8de:	b120      	cbz	r0, f8ea <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f8e0:	4620      	mov	r0, r4
    f8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8e6:	f000 baf4 	b.w	fed2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    f8ea:	2001      	movs	r0, #1
    f8ec:	bd10      	pop	{r4, pc}

0000f8ee <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f8ee:	b510      	push	{r4, lr}
    f8f0:	4604      	mov	r4, r0
    f8f2:	8880      	ldrh	r0, [r0, #4]
    f8f4:	b128      	cbz	r0, f902 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f8f6:	2801      	cmp	r0, #1
    f8f8:	d003      	beq.n	f902 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f8fa:	2802      	cmp	r0, #2
    f8fc:	d001      	beq.n	f902 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f8fe:	2012      	movs	r0, #18
    f900:	bd10      	pop	{r4, pc}
    f902:	78e0      	ldrb	r0, [r4, #3]
    f904:	f000 f8e0 	bl	fac8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f908:	b148      	cbz	r0, f91e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f90a:	78a0      	ldrb	r0, [r4, #2]
    f90c:	f000 f8dc 	bl	fac8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f910:	b128      	cbz	r0, f91e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f912:	4620      	mov	r0, r4
    f914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f918:	2101      	movs	r1, #1
    f91a:	f7fb bd5d 	b.w	b3d8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f91e:	2011      	movs	r0, #17
    f920:	bd10      	pop	{r4, pc}

0000f922 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f922:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f924:	460c      	mov	r4, r1
    f926:	4605      	mov	r5, r0
    f928:	8800      	ldrh	r0, [r0, #0]
    f92a:	4669      	mov	r1, sp
    f92c:	f7fe fc39 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f930:	2800      	cmp	r0, #0
    f932:	d106      	bne.n	f942 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f934:	9801      	ldr	r0, [sp, #4]
    f936:	8829      	ldrh	r1, [r5, #0]
    f938:	8021      	strh	r1, [r4, #0]
    f93a:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    f93e:	8060      	strh	r0, [r4, #2]
    f940:	2000      	movs	r0, #0
    f942:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f944 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f944:	b510      	push	{r4, lr}
    f946:	4604      	mov	r4, r0
    f948:	4601      	mov	r1, r0
    f94a:	2000      	movs	r0, #0
    f94c:	f7f5 fc60 	bl	5210 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f950:	b910      	cbnz	r0, f958 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f952:	2000      	movs	r0, #0
    f954:	6020      	str	r0, [r4, #0]
    f956:	80a0      	strh	r0, [r4, #4]
    f958:	2000      	movs	r0, #0
    f95a:	bd10      	pop	{r4, pc}

0000f95c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f95c:	b51c      	push	{r2, r3, r4, lr}
    f95e:	8800      	ldrh	r0, [r0, #0]
    f960:	4669      	mov	r1, sp
    f962:	f7fe fc1e 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f966:	b968      	cbnz	r0, f984 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f968:	4668      	mov	r0, sp
    f96a:	f000 fa89 	bl	fe80 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    f96e:	b148      	cbz	r0, f984 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f970:	9801      	ldr	r0, [sp, #4]
    f972:	2201      	movs	r2, #1
    f974:	4601      	mov	r1, r0
    f976:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    f97a:	3078      	adds	r0, #120	; 0x78
    f97c:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    f980:	b92b      	cbnz	r3, f98e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f982:	e001      	b.n	f988 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    f984:	2002      	movs	r0, #2
    f986:	bd1c      	pop	{r2, r3, r4, pc}
    f988:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    f98c:	b10b      	cbz	r3, f992 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    f98e:	203a      	movs	r0, #58	; 0x3a
    f990:	bd1c      	pop	{r2, r3, r4, pc}
    f992:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    f996:	079b      	lsls	r3, r3, #30
    f998:	d100      	bne.n	f99c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    f99a:	700a      	strb	r2, [r1, #0]
    f99c:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    f9a0:	2000      	movs	r0, #0
    f9a2:	bd1c      	pop	{r2, r3, r4, pc}

0000f9a4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f9a4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f9a6:	460c      	mov	r4, r1
    f9a8:	4605      	mov	r5, r0
    f9aa:	8800      	ldrh	r0, [r0, #0]
    f9ac:	4669      	mov	r1, sp
    f9ae:	f7fe fbf8 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9b2:	b108      	cbz	r0, f9b8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f9b4:	2002      	movs	r0, #2
    f9b6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f9b8:	78a8      	ldrb	r0, [r5, #2]
    f9ba:	b130      	cbz	r0, f9ca <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f9bc:	f000 fa3b 	bl	fe36 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    f9c0:	70a0      	strb	r0, [r4, #2]
    f9c2:	8828      	ldrh	r0, [r5, #0]
    f9c4:	8020      	strh	r0, [r4, #0]
    f9c6:	2000      	movs	r0, #0
    f9c8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f9ca:	9801      	ldr	r0, [sp, #4]
    f9cc:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f9d0:	e7f6      	b.n	f9c0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f9d2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f9d2:	b510      	push	{r4, lr}
    f9d4:	f7fb fe92 	bl	b6fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f9d8:	2000      	movs	r0, #0
    f9da:	bd10      	pop	{r4, pc}

0000f9dc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f9dc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f9e0:	4604      	mov	r4, r0
    f9e2:	8840      	ldrh	r0, [r0, #2]
    f9e4:	460d      	mov	r5, r1
    f9e6:	b1b8      	cbz	r0, fa18 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f9e8:	8820      	ldrh	r0, [r4, #0]
    f9ea:	4669      	mov	r1, sp
    f9ec:	f7fe fbd9 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9f0:	2800      	cmp	r0, #0
    f9f2:	d10f      	bne.n	fa14 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f9f4:	8820      	ldrh	r0, [r4, #0]
    f9f6:	8028      	strh	r0, [r5, #0]
    f9f8:	9e01      	ldr	r6, [sp, #4]
    f9fa:	f106 050c 	add.w	r5, r6, #12
    f9fe:	3678      	adds	r6, #120	; 0x78
    fa00:	682f      	ldr	r7, [r5, #0]
    fa02:	8862      	ldrh	r2, [r4, #2]
    fa04:	4639      	mov	r1, r7
    fa06:	4630      	mov	r0, r6
    fa08:	f7fe fd8c 	bl	e524 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fa0c:	6828      	ldr	r0, [r5, #0]
    fa0e:	42b8      	cmp	r0, r7
    fa10:	d1f6      	bne.n	fa00 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fa12:	2000      	movs	r0, #0
    fa14:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fa18:	2012      	movs	r0, #18
    fa1a:	e7fb      	b.n	fa14 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fa1c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fa1c:	f7fb bd42 	b.w	b4a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fa20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fa20:	b510      	push	{r4, lr}
    fa22:	2008      	movs	r0, #8
    fa24:	f7fb feca 	bl	b7bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    fa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa2c:	f7f9 bccc 	b.w	93c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000fa30 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    fa30:	b510      	push	{r4, lr}
    fa32:	4604      	mov	r4, r0
    fa34:	2000      	movs	r0, #0
    fa36:	8822      	ldrh	r2, [r4, #0]
    fa38:	b086      	sub	sp, #24
    fa3a:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    fa3e:	39ff      	subs	r1, #255	; 0xff
    fa40:	d008      	beq.n	fa54 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    fa42:	a903      	add	r1, sp, #12
    fa44:	4610      	mov	r0, r2
    fa46:	f7fe fbac 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa4a:	b110      	cbz	r0, fa52 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    fa4c:	2002      	movs	r0, #2
    fa4e:	b006      	add	sp, #24
    fa50:	bd10      	pop	{r4, pc}
    fa52:	9804      	ldr	r0, [sp, #16]
    fa54:	8921      	ldrh	r1, [r4, #8]
    fa56:	89a3      	ldrh	r3, [r4, #12]
    fa58:	8962      	ldrh	r2, [r4, #10]
    fa5a:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fa5e:	88e3      	ldrh	r3, [r4, #6]
    fa60:	88a2      	ldrh	r2, [r4, #4]
    fa62:	8861      	ldrh	r1, [r4, #2]
    fa64:	f000 f966 	bl	fd34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    fa68:	b108      	cbz	r0, fa6e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    fa6a:	2000      	movs	r0, #0
    fa6c:	e7ef      	b.n	fa4e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    fa6e:	2030      	movs	r0, #48	; 0x30
    fa70:	e7ed      	b.n	fa4e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    fa72:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fa76:	4288      	cmp	r0, r1
    fa78:	d303      	bcc.n	fa82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    fa7a:	f640 0148 	movw	r1, #2120	; 0x848
    fa7e:	4288      	cmp	r0, r1
    fa80:	d300      	bcc.n	fa84 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    fa82:	4608      	mov	r0, r1
    fa84:	4770      	bx	lr
    fa86:	07c1      	lsls	r1, r0, #31
    fa88:	d001      	beq.n	fa8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    fa8a:	2001      	movs	r0, #1
    fa8c:	4770      	bx	lr
    fa8e:	0780      	lsls	r0, r0, #30
    fa90:	d501      	bpl.n	fa96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    fa92:	2002      	movs	r0, #2
    fa94:	4770      	bx	lr
    fa96:	2000      	movs	r0, #0
    fa98:	4770      	bx	lr
    fa9a:	b510      	push	{r4, lr}
    fa9c:	2801      	cmp	r0, #1
    fa9e:	d006      	beq.n	faae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    faa0:	2802      	cmp	r0, #2
    faa2:	d004      	beq.n	faae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    faa4:	f240 2163 	movw	r1, #611	; 0x263
    faa8:	2006      	movs	r0, #6
    faaa:	f7f4 fd5f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faae:	bd10      	pop	{r4, pc}
    fab0:	b510      	push	{r4, lr}
    fab2:	f000 fa03 	bl	febc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    fab6:	b128      	cbz	r0, fac4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    fab8:	f7f7 faec 	bl	7094 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    fabc:	2801      	cmp	r0, #1
    fabe:	d001      	beq.n	fac4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    fac0:	2000      	movs	r0, #0
    fac2:	bd10      	pop	{r4, pc}
    fac4:	2001      	movs	r0, #1
    fac6:	bd10      	pop	{r4, pc}
    fac8:	b510      	push	{r4, lr}
    faca:	0004      	movs	r4, r0
    facc:	d005      	beq.n	fada <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    face:	f7fb fe85 	bl	b7dc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fad2:	4384      	bics	r4, r0
    fad4:	d001      	beq.n	fada <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    fad6:	2000      	movs	r0, #0
    fad8:	bd10      	pop	{r4, pc}
    fada:	2001      	movs	r0, #1
    fadc:	bd10      	pop	{r4, pc}
    fade:	28fb      	cmp	r0, #251	; 0xfb
    fae0:	d803      	bhi.n	faea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
    fae2:	f640 0048 	movw	r0, #2120	; 0x848
    fae6:	4281      	cmp	r1, r0
    fae8:	d901      	bls.n	faee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
    faea:	2011      	movs	r0, #17
    faec:	4770      	bx	lr
    faee:	2000      	movs	r0, #0
    faf0:	4770      	bx	lr
    faf2:	381b      	subs	r0, #27
    faf4:	28e1      	cmp	r0, #225	; 0xe1
    faf6:	d206      	bcs.n	fb06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    faf8:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fafc:	d303      	bcc.n	fb06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    fafe:	f244 2090 	movw	r0, #17040	; 0x4290
    fb02:	4281      	cmp	r1, r0
    fb04:	d901      	bls.n	fb0a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
    fb06:	2012      	movs	r0, #18
    fb08:	4770      	bx	lr
    fb0a:	2000      	movs	r0, #0
    fb0c:	4770      	bx	lr
    fb0e:	b510      	push	{r4, lr}
    fb10:	4604      	mov	r4, r0
    fb12:	7800      	ldrb	r0, [r0, #0]
    fb14:	2801      	cmp	r0, #1
    fb16:	d009      	beq.n	fb2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
    fb18:	f7f8 fcc8 	bl	84ac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fb1c:	2805      	cmp	r0, #5
    fb1e:	d003      	beq.n	fb28 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
    fb20:	f7f8 fc8e 	bl	8440 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    fb24:	2800      	cmp	r0, #0
    fb26:	d000      	beq.n	fb2a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
    fb28:	200c      	movs	r0, #12
    fb2a:	bd10      	pop	{r4, pc}
    fb2c:	f7f7 fa40 	bl	6fb0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    fb30:	b138      	cbz	r0, fb42 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
    fb32:	f7f7 f8b9 	bl	6ca8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    fb36:	88a1      	ldrh	r1, [r4, #4]
    fb38:	8860      	ldrh	r0, [r4, #2]
    fb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb3e:	f7f8 bc43 	b.w	83c8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    fb42:	2012      	movs	r0, #18
    fb44:	bd10      	pop	{r4, pc}
    fb46:	7802      	ldrb	r2, [r0, #0]
    fb48:	2a01      	cmp	r2, #1
    fb4a:	d001      	beq.n	fb50 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
    fb4c:	b1ba      	cbz	r2, fb7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    fb4e:	e018      	b.n	fb82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    fb50:	7842      	ldrb	r2, [r0, #1]
    fb52:	b13a      	cbz	r2, fb64 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    fb54:	2a01      	cmp	r2, #1
    fb56:	d005      	beq.n	fb64 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    fb58:	2a02      	cmp	r2, #2
    fb5a:	d112      	bne.n	fb82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    fb5c:	b189      	cbz	r1, fb82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    fb5e:	8881      	ldrh	r1, [r0, #4]
    fb60:	b179      	cbz	r1, fb82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    fb62:	e000      	b.n	fb66 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
    fb64:	b159      	cbz	r1, fb7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    fb66:	8841      	ldrh	r1, [r0, #2]
    fb68:	b149      	cbz	r1, fb7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    fb6a:	8880      	ldrh	r0, [r0, #4]
    fb6c:	b138      	cbz	r0, fb7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    fb6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    fb72:	0049      	lsls	r1, r1, #1
    fb74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fb78:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    fb7c:	d201      	bcs.n	fb82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    fb7e:	2000      	movs	r0, #0
    fb80:	4770      	bx	lr
    fb82:	2012      	movs	r0, #18
    fb84:	4770      	bx	lr
    fb86:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    fb8a:	7a45      	ldrb	r5, [r0, #9]
    fb8c:	4604      	mov	r4, r0
    fb8e:	0768      	lsls	r0, r5, #29
    fb90:	d06c      	beq.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fb92:	08e8      	lsrs	r0, r5, #3
    fb94:	d16a      	bne.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fb96:	2d02      	cmp	r5, #2
    fb98:	d068      	beq.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fb9a:	f7fb fe1f 	bl	b7dc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fb9e:	ea25 0000 	bic.w	r0, r5, r0
    fba2:	0740      	lsls	r0, r0, #29
    fba4:	d102      	bne.n	fbac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
    fba6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fbaa:	b110      	cbz	r0, fbb2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
    fbac:	2011      	movs	r0, #17
    fbae:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    fbb2:	2d01      	cmp	r5, #1
    fbb4:	d15a      	bne.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fbb6:	27ff      	movs	r7, #255	; 0xff
    fbb8:	2101      	movs	r1, #1
    fbba:	69a0      	ldr	r0, [r4, #24]
    fbbc:	f7fb fd4a 	bl	b654 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    fbc0:	b3e8      	cbz	r0, fc3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    fbc2:	46a8      	mov	r8, r5
    fbc4:	2600      	movs	r6, #0
    fbc6:	4635      	mov	r5, r6
    fbc8:	42bd      	cmp	r5, r7
    fbca:	d02f      	beq.n	fc2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    fbcc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    fbd0:	6988      	ldr	r0, [r1, #24]
    fbd2:	68c9      	ldr	r1, [r1, #12]
    fbd4:	4288      	cmp	r0, r1
    fbd6:	d849      	bhi.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fbd8:	4406      	add	r6, r0
    fbda:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    fbde:	4681      	mov	r9, r0
    fbe0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    fbe2:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    fbe6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    fbe8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fbec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    fbee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    fbf0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    fbf2:	2000      	movs	r0, #0
    fbf4:	f000 f89e 	bl	fd34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    fbf8:	b308      	cbz	r0, fc3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    fbfa:	b1bd      	cbz	r5, fc2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    fbfc:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    fc00:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    fc04:	4281      	cmp	r1, r0
    fc06:	d131      	bne.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fc08:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    fc0c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    fc10:	4281      	cmp	r1, r0
    fc12:	d12b      	bne.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fc14:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    fc18:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    fc1c:	4281      	cmp	r1, r0
    fc1e:	d125      	bne.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fc20:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    fc24:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    fc28:	4281      	cmp	r1, r0
    fc2a:	d11f      	bne.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fc2c:	1c6d      	adds	r5, r5, #1
    fc2e:	b2ed      	uxtb	r5, r5
    fc30:	4545      	cmp	r5, r8
    fc32:	d3c9      	bcc.n	fbc8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
    fc34:	68e0      	ldr	r0, [r4, #12]
    fc36:	42b0      	cmp	r0, r6
    fc38:	d318      	bcc.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fc3a:	7820      	ldrb	r0, [r4, #0]
    fc3c:	e000      	b.n	fc40 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
    fc3e:	e003      	b.n	fc48 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
    fc40:	b120      	cbz	r0, fc4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
    fc42:	2801      	cmp	r0, #1
    fc44:	d112      	bne.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fc46:	e004      	b.n	fc52 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
    fc48:	2030      	movs	r0, #48	; 0x30
    fc4a:	e7b0      	b.n	fbae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    fc4c:	78a0      	ldrb	r0, [r4, #2]
    fc4e:	2800      	cmp	r0, #0
    fc50:	d1f7      	bne.n	fc42 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
    fc52:	7860      	ldrb	r0, [r4, #1]
    fc54:	b128      	cbz	r0, fc62 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    fc56:	2801      	cmp	r0, #1
    fc58:	d003      	beq.n	fc62 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    fc5a:	2802      	cmp	r0, #2
    fc5c:	d001      	beq.n	fc62 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    fc5e:	2803      	cmp	r0, #3
    fc60:	d104      	bne.n	fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fc62:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    fc66:	b108      	cbz	r0, fc6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    fc68:	2807      	cmp	r0, #7
    fc6a:	d901      	bls.n	fc70 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    fc6c:	2012      	movs	r0, #18
    fc6e:	e79e      	b.n	fbae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    fc70:	2000      	movs	r0, #0
    fc72:	e79c      	b.n	fbae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    fc74:	b570      	push	{r4, r5, r6, lr}
    fc76:	4604      	mov	r4, r0
    fc78:	7800      	ldrb	r0, [r0, #0]
    fc7a:	2500      	movs	r5, #0
    fc7c:	2801      	cmp	r0, #1
    fc7e:	d004      	beq.n	fc8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    fc80:	b118      	cbz	r0, fc8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    fc82:	2802      	cmp	r0, #2
    fc84:	d001      	beq.n	fc8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    fc86:	2803      	cmp	r0, #3
    fc88:	d139      	bne.n	fcfe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    fc8a:	7860      	ldrb	r0, [r4, #1]
    fc8c:	b128      	cbz	r0, fc9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    fc8e:	2801      	cmp	r0, #1
    fc90:	d003      	beq.n	fc9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    fc92:	2802      	cmp	r0, #2
    fc94:	d001      	beq.n	fc9a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    fc96:	2803      	cmp	r0, #3
    fc98:	d131      	bne.n	fcfe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    fc9a:	7e60      	ldrb	r0, [r4, #25]
    fc9c:	b948      	cbnz	r0, fcb2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    fc9e:	78a0      	ldrb	r0, [r4, #2]
    fca0:	2801      	cmp	r0, #1
    fca2:	d12c      	bne.n	fcfe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    fca4:	f7fb fd9a 	bl	b7dc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fca8:	4601      	mov	r1, r0
    fcaa:	78a0      	ldrb	r0, [r4, #2]
    fcac:	ea30 0101 	bics.w	r1, r0, r1
    fcb0:	d001      	beq.n	fcb6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
    fcb2:	2011      	movs	r0, #17
    fcb4:	bd70      	pop	{r4, r5, r6, pc}
    fcb6:	07c0      	lsls	r0, r0, #31
    fcb8:	d006      	beq.n	fcc8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
    fcba:	78e0      	ldrb	r0, [r4, #3]
    fcbc:	2301      	movs	r3, #1
    fcbe:	6922      	ldr	r2, [r4, #16]
    fcc0:	68a1      	ldr	r1, [r4, #8]
    fcc2:	f000 f820 	bl	fd06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    fcc6:	4605      	mov	r5, r0
    fcc8:	78a0      	ldrb	r0, [r4, #2]
    fcca:	0780      	lsls	r0, r0, #30
    fccc:	d506      	bpl.n	fcdc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    fcce:	78e0      	ldrb	r0, [r4, #3]
    fcd0:	2302      	movs	r3, #2
    fcd2:	6922      	ldr	r2, [r4, #16]
    fcd4:	68a1      	ldr	r1, [r4, #8]
    fcd6:	f000 f816 	bl	fd06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    fcda:	4305      	orrs	r5, r0
    fcdc:	78a0      	ldrb	r0, [r4, #2]
    fcde:	0740      	lsls	r0, r0, #29
    fce0:	d506      	bpl.n	fcf0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
    fce2:	78e0      	ldrb	r0, [r4, #3]
    fce4:	2304      	movs	r3, #4
    fce6:	6922      	ldr	r2, [r4, #16]
    fce8:	68a1      	ldr	r1, [r4, #8]
    fcea:	f000 f80c 	bl	fd06 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    fcee:	4305      	orrs	r5, r0
    fcf0:	b10d      	cbz	r5, fcf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
    fcf2:	4628      	mov	r0, r5
    fcf4:	bd70      	pop	{r4, r5, r6, pc}
    fcf6:	7e20      	ldrb	r0, [r4, #24]
    fcf8:	b108      	cbz	r0, fcfe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    fcfa:	2807      	cmp	r0, #7
    fcfc:	d901      	bls.n	fd02 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
    fcfe:	2012      	movs	r0, #18
    fd00:	bd70      	pop	{r4, r5, r6, pc}
    fd02:	2000      	movs	r0, #0
    fd04:	bd70      	pop	{r4, r5, r6, pc}
    fd06:	b570      	push	{r4, r5, r6, lr}
    fd08:	4614      	mov	r4, r2
    fd0a:	460d      	mov	r5, r1
    fd0c:	b108      	cbz	r0, fd12 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
    fd0e:	2801      	cmp	r0, #1
    fd10:	d10a      	bne.n	fd28 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
    fd12:	4619      	mov	r1, r3
    fd14:	4610      	mov	r0, r2
    fd16:	f7fb fc9d 	bl	b654 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    fd1a:	b138      	cbz	r0, fd2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    fd1c:	4628      	mov	r0, r5
    fd1e:	f7fb fc61 	bl	b5e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x140>
    fd22:	b118      	cbz	r0, fd2c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    fd24:	42ac      	cmp	r4, r5
    fd26:	d903      	bls.n	fd30 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    fd28:	2012      	movs	r0, #18
    fd2a:	bd70      	pop	{r4, r5, r6, pc}
    fd2c:	2030      	movs	r0, #48	; 0x30
    fd2e:	bd70      	pop	{r4, r5, r6, pc}
    fd30:	2000      	movs	r0, #0
    fd32:	bd70      	pop	{r4, r5, r6, pc}
    fd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd38:	461d      	mov	r5, r3
    fd3a:	4610      	mov	r0, r2
    fd3c:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    fd40:	1f8b      	subs	r3, r1, #6
    fd42:	f640 427a 	movw	r2, #3194	; 0xc7a
    fd46:	9e08      	ldr	r6, [sp, #32]
    fd48:	4293      	cmp	r3, r2
    fd4a:	d81c      	bhi.n	fd86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fd4c:	1f83      	subs	r3, r0, #6
    fd4e:	4293      	cmp	r3, r2
    fd50:	d819      	bhi.n	fd86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fd52:	4281      	cmp	r1, r0
    fd54:	d817      	bhi.n	fd86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fd56:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    fd5a:	d214      	bcs.n	fd86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fd5c:	f1a4 010a 	sub.w	r1, r4, #10
    fd60:	1f12      	subs	r2, r2, #4
    fd62:	4291      	cmp	r1, r2
    fd64:	d80f      	bhi.n	fd86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fd66:	f7fe fa28 	bl	e1ba <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fd6a:	1c6d      	adds	r5, r5, #1
    fd6c:	4368      	muls	r0, r5
    fd6e:	f240 2171 	movw	r1, #625	; 0x271
    fd72:	0040      	lsls	r0, r0, #1
    fd74:	434c      	muls	r4, r1
    fd76:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    fd7a:	d204      	bcs.n	fd86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fd7c:	42b7      	cmp	r7, r6
    fd7e:	d802      	bhi.n	fd86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fd80:	2001      	movs	r0, #1
    fd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd86:	2000      	movs	r0, #0
    fd88:	e7fb      	b.n	fd82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
    fd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd8e:	4606      	mov	r6, r0
    fd90:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    fd94:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    fd98:	4615      	mov	r5, r2
    fd9a:	302c      	adds	r0, #44	; 0x2c
    fd9c:	f7f8 fb00 	bl	83a0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    fda0:	4680      	mov	r8, r0
    fda2:	2102      	movs	r1, #2
    fda4:	f7fe fac8 	bl	e338 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fda8:	4287      	cmp	r7, r0
    fdaa:	d200      	bcs.n	fdae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    fdac:	4638      	mov	r0, r7
    fdae:	4607      	mov	r7, r0
    fdb0:	2102      	movs	r1, #2
    fdb2:	4640      	mov	r0, r8
    fdb4:	f7fe fac0 	bl	e338 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fdb8:	4284      	cmp	r4, r0
    fdba:	d200      	bcs.n	fdbe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    fdbc:	4620      	mov	r0, r4
    fdbe:	8831      	ldrh	r1, [r6, #0]
    fdc0:	8029      	strh	r1, [r5, #0]
    fdc2:	2f1b      	cmp	r7, #27
    fdc4:	d913      	bls.n	fdee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    fdc6:	2ffb      	cmp	r7, #251	; 0xfb
    fdc8:	d300      	bcc.n	fdcc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    fdca:	27fb      	movs	r7, #251	; 0xfb
    fdcc:	806f      	strh	r7, [r5, #2]
    fdce:	281b      	cmp	r0, #27
    fdd0:	d90f      	bls.n	fdf2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
    fdd2:	28fb      	cmp	r0, #251	; 0xfb
    fdd4:	d300      	bcc.n	fdd8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    fdd6:	20fb      	movs	r0, #251	; 0xfb
    fdd8:	80e8      	strh	r0, [r5, #6]
    fdda:	4640      	mov	r0, r8
    fddc:	f7ff fe49 	bl	fa72 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    fde0:	80a8      	strh	r0, [r5, #4]
    fde2:	4640      	mov	r0, r8
    fde4:	f7ff fe45 	bl	fa72 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    fde8:	8128      	strh	r0, [r5, #8]
    fdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdee:	271b      	movs	r7, #27
    fdf0:	e7ec      	b.n	fdcc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    fdf2:	201b      	movs	r0, #27
    fdf4:	e7f0      	b.n	fdd8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    fdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdfa:	7890      	ldrb	r0, [r2, #2]
    fdfc:	9e06      	ldr	r6, [sp, #24]
    fdfe:	461d      	mov	r5, r3
    fe00:	4614      	mov	r4, r2
    fe02:	b908      	cbnz	r0, fe08 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
    fe04:	f7fb fcea 	bl	b7dc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe08:	78e4      	ldrb	r4, [r4, #3]
    fe0a:	4607      	mov	r7, r0
    fe0c:	b914      	cbnz	r4, fe14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e4>
    fe0e:	f7fb fce5 	bl	b7dc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe12:	4604      	mov	r4, r0
    fe14:	b16f      	cbz	r7, fe32 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    fe16:	b164      	cbz	r4, fe32 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    fe18:	4638      	mov	r0, r7
    fe1a:	f7ff fe34 	bl	fa86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    fe1e:	4620      	mov	r0, r4
    fe20:	f7ff fe31 	bl	fa86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    fe24:	b12f      	cbz	r7, fe32 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    fe26:	b124      	cbz	r4, fe32 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    fe28:	702f      	strb	r7, [r5, #0]
    fe2a:	7034      	strb	r4, [r6, #0]
    fe2c:	2000      	movs	r0, #0
    fe2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe32:	2009      	movs	r0, #9
    fe34:	e7fb      	b.n	fe2e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fe>
    fe36:	b510      	push	{r4, lr}
    fe38:	f7fc ff4c 	bl	ccd4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    fe3c:	b928      	cbnz	r0, fe4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    fe3e:	f7fc ff7f 	bl	cd40 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    fe42:	b910      	cbnz	r0, fe4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    fe44:	f7fc ff86 	bl	cd54 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fe48:	b108      	cbz	r0, fe4e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41e>
    fe4a:	2008      	movs	r0, #8
    fe4c:	bd10      	pop	{r4, pc}
    fe4e:	f7fc ff16 	bl	cc7e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    fe52:	b940      	cbnz	r0, fe66 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    fe54:	f7fc ff1d 	bl	cc92 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    fe58:	b928      	cbnz	r0, fe66 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    fe5a:	f7fc ff31 	bl	ccc0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    fe5e:	b910      	cbnz	r0, fe66 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    fe60:	f7fc ff42 	bl	cce8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fe64:	b108      	cbz	r0, fe6a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x43a>
    fe66:	2004      	movs	r0, #4
    fe68:	bd10      	pop	{r4, pc}
    fe6a:	f240 519c 	movw	r1, #1436	; 0x59c
    fe6e:	2039      	movs	r0, #57	; 0x39
    fe70:	f7f4 fb7c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe74:	b510      	push	{r4, lr}
    fe76:	f7fb fcab 	bl	b7d0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fe7a:	f3c0 1040 	ubfx	r0, r0, #5, #1
    fe7e:	bd10      	pop	{r4, pc}
    fe80:	6840      	ldr	r0, [r0, #4]
    fe82:	f000 b800 	b.w	fe86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    fe86:	b508      	push	{r3, lr}
    fe88:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    fe8c:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    fe90:	f88d 0000 	strb.w	r0, [sp]
    fe94:	9800      	ldr	r0, [sp, #0]
    fe96:	9000      	str	r0, [sp, #0]
    fe98:	f89d 0000 	ldrb.w	r0, [sp]
    fe9c:	1e40      	subs	r0, r0, #1
    fe9e:	4208      	tst	r0, r1
    fea0:	d003      	beq.n	feaa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    fea2:	2904      	cmp	r1, #4
    fea4:	d001      	beq.n	feaa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    fea6:	2001      	movs	r0, #1
    fea8:	bd08      	pop	{r3, pc}
    feaa:	2000      	movs	r0, #0
    feac:	bd08      	pop	{r3, pc}
    feae:	b510      	push	{r4, lr}
    feb0:	f000 f804 	bl	febc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    feb4:	2800      	cmp	r0, #0
    feb6:	d000      	beq.n	feba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48a>
    feb8:	2001      	movs	r0, #1
    feba:	bd10      	pop	{r4, pc}
    febc:	b510      	push	{r4, lr}
    febe:	f7f8 faf5 	bl	84ac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fec2:	2804      	cmp	r0, #4
    fec4:	d003      	beq.n	fece <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    fec6:	2805      	cmp	r0, #5
    fec8:	d001      	beq.n	fece <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    feca:	2000      	movs	r0, #0
    fecc:	bd10      	pop	{r4, pc}
    fece:	2001      	movs	r0, #1
    fed0:	bd10      	pop	{r4, pc}
    fed2:	b5f0      	push	{r4, r5, r6, r7, lr}
    fed4:	b089      	sub	sp, #36	; 0x24
    fed6:	4604      	mov	r4, r0
    fed8:	8800      	ldrh	r0, [r0, #0]
    feda:	a906      	add	r1, sp, #24
    fedc:	f7fe f961 	bl	e1a2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fee0:	2800      	cmp	r0, #0
    fee2:	d143      	bne.n	ff6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    fee4:	9807      	ldr	r0, [sp, #28]
    fee6:	2601      	movs	r6, #1
    fee8:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    feec:	f88d 1008 	strb.w	r1, [sp, #8]
    fef0:	9902      	ldr	r1, [sp, #8]
    fef2:	9102      	str	r1, [sp, #8]
    fef4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    fef8:	f88d 100c 	strb.w	r1, [sp, #12]
    fefc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ff00:	3078      	adds	r0, #120	; 0x78
    ff02:	291d      	cmp	r1, #29
    ff04:	d102      	bne.n	ff0c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
    ff06:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ff0a:	b141      	cbz	r1, ff1e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
    ff0c:	2100      	movs	r1, #0
    ff0e:	f88d 1004 	strb.w	r1, [sp, #4]
    ff12:	2105      	movs	r1, #5
    ff14:	304e      	adds	r0, #78	; 0x4e
    ff16:	f7ff f9e2 	bl	f2de <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ff1a:	b110      	cbz	r0, ff22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
    ff1c:	e004      	b.n	ff28 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
    ff1e:	2101      	movs	r1, #1
    ff20:	e7f5      	b.n	ff0e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
    ff22:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ff26:	b300      	cbz	r0, ff6a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
    ff28:	8921      	ldrh	r1, [r4, #8]
    ff2a:	88e0      	ldrh	r0, [r4, #6]
    ff2c:	f7ff fde1 	bl	faf2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    ff30:	2800      	cmp	r0, #0
    ff32:	d11b      	bne.n	ff6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    ff34:	88a1      	ldrh	r1, [r4, #4]
    ff36:	8860      	ldrh	r0, [r4, #2]
    ff38:	f7ff fddb 	bl	faf2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    ff3c:	2800      	cmp	r0, #0
    ff3e:	d115      	bne.n	ff6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    ff40:	8921      	ldrh	r1, [r4, #8]
    ff42:	88e0      	ldrh	r0, [r4, #6]
    ff44:	f7ff fdcb 	bl	fade <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    ff48:	2800      	cmp	r0, #0
    ff4a:	d10f      	bne.n	ff6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    ff4c:	88a1      	ldrh	r1, [r4, #4]
    ff4e:	8860      	ldrh	r0, [r4, #2]
    ff50:	f7ff fdc5 	bl	fade <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    ff54:	0007      	movs	r7, r0
    ff56:	d109      	bne.n	ff6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    ff58:	9807      	ldr	r0, [sp, #28]
    ff5a:	f500 7599 	add.w	r5, r0, #306	; 0x132
    ff5e:	706e      	strb	r6, [r5, #1]
    ff60:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ff64:	b121      	cbz	r1, ff70 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
    ff66:	273a      	movs	r7, #58	; 0x3a
    ff68:	e02d      	b.n	ffc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
    ff6a:	201a      	movs	r0, #26
    ff6c:	b009      	add	sp, #36	; 0x24
    ff6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff70:	4631      	mov	r1, r6
    ff72:	aa03      	add	r2, sp, #12
    ff74:	f7ff ff09 	bl	fd8a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    ff78:	8861      	ldrh	r1, [r4, #2]
    ff7a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    ff7e:	4281      	cmp	r1, r0
    ff80:	d200      	bcs.n	ff84 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
    ff82:	4608      	mov	r0, r1
    ff84:	80e8      	strh	r0, [r5, #6]
    ff86:	88a1      	ldrh	r1, [r4, #4]
    ff88:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    ff8c:	4281      	cmp	r1, r0
    ff8e:	d200      	bcs.n	ff92 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
    ff90:	4608      	mov	r0, r1
    ff92:	8128      	strh	r0, [r5, #8]
    ff94:	88e2      	ldrh	r2, [r4, #6]
    ff96:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ff9a:	428a      	cmp	r2, r1
    ff9c:	d200      	bcs.n	ffa0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
    ff9e:	4611      	mov	r1, r2
    ffa0:	8069      	strh	r1, [r5, #2]
    ffa2:	8922      	ldrh	r2, [r4, #8]
    ffa4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    ffa8:	428a      	cmp	r2, r1
    ffaa:	d200      	bcs.n	ffae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
    ffac:	4611      	mov	r1, r2
    ffae:	f640 0248 	movw	r2, #2120	; 0x848
    ffb2:	80a9      	strh	r1, [r5, #4]
    ffb4:	4291      	cmp	r1, r2
    ffb6:	d300      	bcc.n	ffba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
    ffb8:	4611      	mov	r1, r2
    ffba:	80a9      	strh	r1, [r5, #4]
    ffbc:	4290      	cmp	r0, r2
    ffbe:	d200      	bcs.n	ffc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
    ffc0:	4602      	mov	r2, r0
    ffc2:	812a      	strh	r2, [r5, #8]
    ffc4:	702e      	strb	r6, [r5, #0]
    ffc6:	2000      	movs	r0, #0
    ffc8:	7068      	strb	r0, [r5, #1]
    ffca:	4638      	mov	r0, r7
    ffcc:	e7ce      	b.n	ff6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    ffce:	b530      	push	{r4, r5, lr}
    ffd0:	f340 0400 	sbfx	r4, r0, #0, #1
    ffd4:	f340 0040 	sbfx	r0, r0, #1, #1
    ffd8:	1c40      	adds	r0, r0, #1
    ffda:	9d03      	ldr	r5, [sp, #12]
    ffdc:	1c64      	adds	r4, r4, #1
    ffde:	d000      	beq.n	ffe2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
    ffe0:	b119      	cbz	r1, ffea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    ffe2:	b100      	cbz	r0, ffe6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
    ffe4:	b10a      	cbz	r2, ffea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    ffe6:	b91c      	cbnz	r4, fff0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
    ffe8:	e001      	b.n	ffee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
    ffea:	2011      	movs	r0, #17
    ffec:	bd30      	pop	{r4, r5, pc}
    ffee:	2100      	movs	r1, #0
    fff0:	7019      	strb	r1, [r3, #0]
    fff2:	b900      	cbnz	r0, fff6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
    fff4:	2200      	movs	r2, #0
    fff6:	702a      	strb	r2, [r5, #0]
    fff8:	2000      	movs	r0, #0
    fffa:	bd30      	pop	{r4, r5, pc}
    fffc:	b510      	push	{r4, lr}
    fffe:	f7ff ff5d 	bl	febc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   10002:	b120      	cbz	r0, 1000e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   10004:	f7f7 f84e 	bl	70a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   10008:	b108      	cbz	r0, 1000e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   1000a:	2001      	movs	r0, #1
   1000c:	bd10      	pop	{r4, pc}
   1000e:	2000      	movs	r0, #0
   10010:	bd10      	pop	{r4, pc}

00010012 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   10012:	6802      	ldr	r2, [r0, #0]
   10014:	b912      	cbnz	r2, 1001c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   10016:	6001      	str	r1, [r0, #0]
   10018:	4770      	bx	lr
   1001a:	4602      	mov	r2, r0
   1001c:	6850      	ldr	r0, [r2, #4]
   1001e:	b108      	cbz	r0, 10024 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   10020:	428a      	cmp	r2, r1
   10022:	d1fa      	bne.n	1001a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   10024:	428a      	cmp	r2, r1
   10026:	d0f7      	beq.n	10018 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   10028:	6051      	str	r1, [r2, #4]
   1002a:	4770      	bx	lr
   1002c:	b510      	push	{r4, lr}
   1002e:	4604      	mov	r4, r0
   10030:	e002      	b.n	10038 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   10032:	6820      	ldr	r0, [r4, #0]
   10034:	4780      	blx	r0
   10036:	6864      	ldr	r4, [r4, #4]
   10038:	2c00      	cmp	r4, #0
   1003a:	d1fa      	bne.n	10032 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
   1003c:	bd10      	pop	{r4, pc}
   1003e:	b510      	push	{r4, lr}
   10040:	2000      	movs	r0, #0
   10042:	f7f4 fc5b 	bl	48fc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10046:	f7f4 fe7b 	bl	4d40 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1004a:	f7f5 f8c3 	bl	51d4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1004e:	f7f5 faab 	bl	55a8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10052:	2800      	cmp	r0, #0
   10054:	d003      	beq.n	1005e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
   10056:	21b8      	movs	r1, #184	; 0xb8
   10058:	2001      	movs	r0, #1
   1005a:	f7f4 fa87 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1005e:	bd10      	pop	{r4, pc}
   10060:	b510      	push	{r4, lr}
   10062:	f000 f80a 	bl	1007a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
   10066:	f7ff f823 	bl	f0b0 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1006a:	2800      	cmp	r0, #0
   1006c:	d004      	beq.n	10078 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   1006e:	f240 1135 	movw	r1, #309	; 0x135
   10072:	2001      	movs	r0, #1
   10074:	f7f4 fa7a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10078:	bd10      	pop	{r4, pc}
   1007a:	b510      	push	{r4, lr}
   1007c:	f7f8 f932 	bl	82e4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   10080:	b120      	cbz	r0, 1008c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
   10082:	f240 111d 	movw	r1, #285	; 0x11d
   10086:	2001      	movs	r0, #1
   10088:	f7f4 fa70 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1008c:	f7f6 ff5a 	bl	6f44 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10094:	f7fa bed4 	b.w	ae40 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   10098:	000b0001 	.word	0x000b0001
   1009c:	000a0002 	.word	0x000a0002
   100a0:	00090005 	.word	0x00090005
   100a4:	0008000a 	.word	0x0008000a
   100a8:	00070014 	.word	0x00070014
   100ac:	0006001e 	.word	0x0006001e
   100b0:	00050032 	.word	0x00050032
   100b4:	0004004b 	.word	0x0004004b
   100b8:	00030064 	.word	0x00030064
   100bc:	00020096 	.word	0x00020096
   100c0:	000100fa 	.word	0x000100fa
   100c4:	000001f4 	.word	0x000001f4

000100c8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   100c8:	b510      	push	{r4, lr}
   100ca:	f7fb ff3f 	bl	bf4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   100ce:	f000 f850 	bl	10172 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   100d2:	f7fb fbf7 	bl	b8c4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   100d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100da:	f7fb bcf5 	b.w	bac8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000100de <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   100de:	b510      	push	{r4, lr}
   100e0:	24c8      	movs	r4, #200	; 0xc8
   100e2:	1e64      	subs	r4, r4, #1
   100e4:	b2e4      	uxtb	r4, r4
   100e6:	f7fb fc0b 	bl	b900 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   100ea:	2802      	cmp	r0, #2
   100ec:	d003      	beq.n	100f6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   100ee:	2801      	cmp	r0, #1
   100f0:	d000      	beq.n	100f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   100f2:	2000      	movs	r0, #0
   100f4:	bd10      	pop	{r4, pc}
   100f6:	2c00      	cmp	r4, #0
   100f8:	d1f3      	bne.n	100e2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   100fa:	2193      	movs	r1, #147	; 0x93
   100fc:	203b      	movs	r0, #59	; 0x3b
   100fe:	f7f4 fa35 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010102 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   10102:	b510      	push	{r4, lr}
   10104:	f7f4 f8c8 	bl	4298 <mpsl_fem_lna_configuration_clear>
   10108:	2800      	cmp	r0, #0
   1010a:	d005      	beq.n	10118 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   1010c:	1c40      	adds	r0, r0, #1
   1010e:	d003      	beq.n	10118 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   10110:	2150      	movs	r1, #80	; 0x50
   10112:	2040      	movs	r0, #64	; 0x40
   10114:	f7f4 fa2a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10118:	bd10      	pop	{r4, pc}

0001011a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   1011a:	b510      	push	{r4, lr}
   1011c:	f7f4 f8c8 	bl	42b0 <mpsl_fem_pa_configuration_clear>
   10120:	2800      	cmp	r0, #0
   10122:	d005      	beq.n	10130 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10124:	1c40      	adds	r0, r0, #1
   10126:	d003      	beq.n	10130 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10128:	2149      	movs	r1, #73	; 0x49
   1012a:	2040      	movs	r0, #64	; 0x40
   1012c:	f7f4 fa1e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10130:	bd10      	pop	{r4, pc}

00010132 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   10132:	b510      	push	{r4, lr}
   10134:	f7f4 f8aa 	bl	428c <mpsl_fem_disable>
   10138:	2800      	cmp	r0, #0
   1013a:	d005      	beq.n	10148 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1013c:	1c40      	adds	r0, r0, #1
   1013e:	d003      	beq.n	10148 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10140:	2157      	movs	r1, #87	; 0x57
   10142:	2040      	movs	r0, #64	; 0x40
   10144:	f7f4 fa12 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10148:	bd10      	pop	{r4, pc}

0001014a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   1014a:	b510      	push	{r4, lr}
   1014c:	2100      	movs	r1, #0
   1014e:	4608      	mov	r0, r1
   10150:	f7f4 f8a8 	bl	42a4 <mpsl_fem_lna_configuration_set>
   10154:	b108      	cbz	r0, 1015a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   10156:	2000      	movs	r0, #0
   10158:	bd10      	pop	{r4, pc}
   1015a:	2001      	movs	r0, #1
   1015c:	bd10      	pop	{r4, pc}

0001015e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   1015e:	b508      	push	{r3, lr}
   10160:	4668      	mov	r0, sp
   10162:	f7f4 f8b1 	bl	42c8 <mpsl_fem_pa_is_configured>
   10166:	f89d 0000 	ldrb.w	r0, [sp]
   1016a:	2800      	cmp	r0, #0
   1016c:	d000      	beq.n	10170 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   1016e:	2001      	movs	r0, #1
   10170:	bd08      	pop	{r3, pc}

00010172 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10172:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10176:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1017a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1017e:	f3bf 8f4f 	dsb	sy
   10182:	f3bf 8f6f 	isb	sy
   10186:	f7fb bd79 	b.w	bc7c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1018a:	2800      	cmp	r0, #0
   1018c:	db09      	blt.n	101a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1018e:	f000 021f 	and.w	r2, r0, #31
   10192:	2101      	movs	r1, #1
   10194:	4091      	lsls	r1, r2
   10196:	0940      	lsrs	r0, r0, #5
   10198:	0080      	lsls	r0, r0, #2
   1019a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1019e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   101a2:	4770      	bx	lr
   101a4:	2800      	cmp	r0, #0
   101a6:	db0d      	blt.n	101c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   101a8:	f000 021f 	and.w	r2, r0, #31
   101ac:	2101      	movs	r1, #1
   101ae:	4091      	lsls	r1, r2
   101b0:	0940      	lsrs	r0, r0, #5
   101b2:	0080      	lsls	r0, r0, #2
   101b4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   101b8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   101bc:	f3bf 8f4f 	dsb	sy
   101c0:	f3bf 8f6f 	isb	sy
   101c4:	4770      	bx	lr

000101c6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   101c6:	b510      	push	{r4, lr}
   101c8:	2801      	cmp	r0, #1
   101ca:	d006      	beq.n	101da <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   101cc:	2802      	cmp	r0, #2
   101ce:	d006      	beq.n	101de <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   101d0:	f640 3141 	movw	r1, #2881	; 0xb41
   101d4:	203e      	movs	r0, #62	; 0x3e
   101d6:	f7f4 f9c9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101da:	2028      	movs	r0, #40	; 0x28
   101dc:	bd10      	pop	{r4, pc}
   101de:	2018      	movs	r0, #24
   101e0:	bd10      	pop	{r4, pc}

000101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   101e2:	b510      	push	{r4, lr}
   101e4:	2801      	cmp	r0, #1
   101e6:	d006      	beq.n	101f6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   101e8:	2802      	cmp	r0, #2
   101ea:	d007      	beq.n	101fc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   101ec:	f640 3155 	movw	r1, #2901	; 0xb55
   101f0:	203e      	movs	r0, #62	; 0x3e
   101f2:	f7f4 f9bb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101f6:	f641 6014 	movw	r0, #7700	; 0x1e14
   101fa:	bd10      	pop	{r4, pc}
   101fc:	f241 1030 	movw	r0, #4400	; 0x1130
   10200:	bd10      	pop	{r4, pc}

00010202 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   10202:	f7fc bbed 	b.w	c9e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   10206:	b510      	push	{r4, lr}
   10208:	460a      	mov	r2, r1
   1020a:	b130      	cbz	r0, 1021a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   1020c:	2801      	cmp	r0, #1
   1020e:	d00b      	beq.n	10228 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   10210:	f240 6114 	movw	r1, #1556	; 0x614
   10214:	203e      	movs	r0, #62	; 0x3e
   10216:	f7f4 f9a9 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1021a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1021e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10222:	4610      	mov	r0, r2
   10224:	f7fb bbc0 	b.w	b9a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   10228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1022c:	f102 0129 	add.w	r1, r2, #41	; 0x29
   10230:	4610      	mov	r0, r2
   10232:	f7fb bba3 	b.w	b97c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   10236:	5840      	ldr	r0, [r0, r1]
   10238:	2800      	cmp	r0, #0
   1023a:	d000      	beq.n	1023e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   1023c:	2001      	movs	r0, #1
   1023e:	4770      	bx	lr
   10240:	5840      	ldr	r0, [r0, r1]
   10242:	2800      	cmp	r0, #0
   10244:	d000      	beq.n	10248 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   10246:	2001      	movs	r0, #1
   10248:	4770      	bx	lr

0001024a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   1024a:	b570      	push	{r4, r5, r6, lr}
   1024c:	4605      	mov	r5, r0
   1024e:	4614      	mov	r4, r2
   10250:	4608      	mov	r0, r1
   10252:	f7ff ffc6 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10256:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   1025a:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1025e:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   10262:	4620      	mov	r0, r4
   10264:	f7ff ffbd 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10268:	4428      	add	r0, r5
   1026a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1026e:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   10272:	fbb0 f5f1 	udiv	r5, r0, r1
   10276:	4620      	mov	r0, r4
   10278:	f7ff ffa5 	bl	101c6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1027c:	4428      	add	r0, r5
   1027e:	1d40      	adds	r0, r0, #5
   10280:	bd70      	pop	{r4, r5, r6, pc}

00010282 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   10282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10286:	4607      	mov	r7, r0
   10288:	461d      	mov	r5, r3
   1028a:	460e      	mov	r6, r1
   1028c:	4614      	mov	r4, r2
   1028e:	4610      	mov	r0, r2
   10290:	f7ff ffa7 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10294:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10298:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1029c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   102a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   102a4:	2e02      	cmp	r6, #2
   102a6:	d00e      	beq.n	102c6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   102a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
   102ac:	4411      	add	r1, r2
   102ae:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   102b2:	fbb1 f6f0 	udiv	r6, r1, r0
   102b6:	4620      	mov	r0, r4
   102b8:	f7ff ff85 	bl	101c6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   102bc:	4430      	add	r0, r6
   102be:	4428      	add	r0, r5
   102c0:	1d40      	adds	r0, r0, #5
   102c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102c6:	4602      	mov	r2, r0
   102c8:	e7f0      	b.n	102ac <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

000102ca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   102ca:	b510      	push	{r4, lr}
   102cc:	4604      	mov	r4, r0
   102ce:	4608      	mov	r0, r1
   102d0:	f7ff ff87 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102d8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   102dc:	fbb0 f0f1 	udiv	r0, r0, r1
   102e0:	1a20      	subs	r0, r4, r0
   102e2:	1e80      	subs	r0, r0, #2
   102e4:	bd10      	pop	{r4, pc}

000102e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   102e6:	b510      	push	{r4, lr}
   102e8:	4604      	mov	r4, r0
   102ea:	4608      	mov	r0, r1
   102ec:	f7ff ff79 	bl	101e2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102f4:	fbb0 f0f1 	udiv	r0, r0, r1
   102f8:	1a20      	subs	r0, r4, r0
   102fa:	bd10      	pop	{r4, pc}

000102fc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   102fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10300:	2902      	cmp	r1, #2
   10302:	d008      	beq.n	10316 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   10304:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10308:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1030c:	fbb1 f1f2 	udiv	r1, r1, r2
   10310:	4408      	add	r0, r1
   10312:	1e80      	subs	r0, r0, #2
   10314:	4770      	bx	lr
   10316:	4611      	mov	r1, r2
   10318:	e7f6      	b.n	10308 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0001031a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   1031a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1031e:	2902      	cmp	r1, #2
   10320:	d007      	beq.n	10332 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   10322:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10326:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1032a:	fbb1 f1f2 	udiv	r1, r1, r2
   1032e:	4408      	add	r0, r1
   10330:	4770      	bx	lr
   10332:	4611      	mov	r1, r2
   10334:	e7f7      	b.n	10326 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   10336:	080c      	.short	0x080c
   10338:	010d1702 	.word	0x010d1702
   1033c:	09090201 	.word	0x09090201
   10340:	02060101 	.word	0x02060101
   10344:	03181809 	.word	0x03181809
   10348:	09090101 	.word	0x09090101
   1034c:	0303      	.short	0x0303
   1034e:	05          	.byte	0x05
   1034f:	55          	.byte	0x55
   10350:	26255555 	.word	0x26255555
   10354:	27          	.byte	0x27
   10355:	01          	.byte	0x01
   10356:	0103      	.short	0x0103
   10358:	01          	.byte	0x01
   10359:	01          	.byte	0x01
	...

0001035c <KALMAN>:
#include "kalman_filter.h"

int8_t KALMAN(int8_t U){
   1035c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10360:	b083      	sub	sp, #12
    U = (double)U;
   10362:	f7f0 f81f 	bl	3a4 <__aeabi_i2d>
   10366:	e9cd 0100 	strd	r0, r1, [sp]
    static double P = 0;
    static double U_hat = 0;
    static double K = 0;

    //begin
    K = P*H/(H*P*H+R); // update kalman gain
   1036a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 1040c <KALMAN+0xb0>
   1036e:	e9db 6700 	ldrd	r6, r7, [fp]
   10372:	2200      	movs	r2, #0
   10374:	4b22      	ldr	r3, [pc, #136]	; (10400 <KALMAN+0xa4>)
   10376:	4630      	mov	r0, r6
   10378:	4639      	mov	r1, r7
   1037a:	f7ef fec7 	bl	10c <__adddf3>
   1037e:	4602      	mov	r2, r0
   10380:	460b      	mov	r3, r1
   10382:	4630      	mov	r0, r6
   10384:	4639      	mov	r1, r7
   10386:	f7f0 f9a1 	bl	6cc <__aeabi_ddiv>
   1038a:	4604      	mov	r4, r0
   1038c:	460d      	mov	r5, r1
    U_hat = U_hat + K*(U-H*U_hat); // update estimated
   1038e:	f8df a080 	ldr.w	sl, [pc, #128]	; 10410 <KALMAN+0xb4>
   10392:	e9da 8900 	ldrd	r8, r9, [sl]
   10396:	4642      	mov	r2, r8
   10398:	464b      	mov	r3, r9
   1039a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1039e:	f7ef feb3 	bl	108 <__aeabi_dsub>
   103a2:	4602      	mov	r2, r0
   103a4:	460b      	mov	r3, r1
   103a6:	4620      	mov	r0, r4
   103a8:	4629      	mov	r1, r5
   103aa:	f7f0 f865 	bl	478 <__aeabi_dmul>
   103ae:	4602      	mov	r2, r0
   103b0:	460b      	mov	r3, r1
   103b2:	4640      	mov	r0, r8
   103b4:	4649      	mov	r1, r9
   103b6:	f7ef fea9 	bl	10c <__adddf3>
   103ba:	4680      	mov	r8, r0
   103bc:	4689      	mov	r9, r1

    //Update error covariance
    P = (1-K*H)*P+Q;
   103be:	4622      	mov	r2, r4
   103c0:	462b      	mov	r3, r5
   103c2:	2000      	movs	r0, #0
   103c4:	490f      	ldr	r1, [pc, #60]	; (10404 <KALMAN+0xa8>)
   103c6:	f7ef fe9f 	bl	108 <__aeabi_dsub>
   103ca:	4602      	mov	r2, r0
   103cc:	460b      	mov	r3, r1
   103ce:	4630      	mov	r0, r6
   103d0:	4639      	mov	r1, r7
   103d2:	f7f0 f851 	bl	478 <__aeabi_dmul>
   103d6:	2200      	movs	r2, #0
   103d8:	4b0b      	ldr	r3, [pc, #44]	; (10408 <KALMAN+0xac>)
   103da:	f7ef fe97 	bl	10c <__adddf3>
   103de:	e9cb 0100 	strd	r0, r1, [fp]

    U_hat = (int8_t)U_hat;
   103e2:	4640      	mov	r0, r8
   103e4:	4649      	mov	r1, r9
   103e6:	f7f0 fa59 	bl	89c <__aeabi_d2iz>
   103ea:	b244      	sxtb	r4, r0
   103ec:	4620      	mov	r0, r4
   103ee:	f7ef ffd9 	bl	3a4 <__aeabi_i2d>
   103f2:	e9ca 0100 	strd	r0, r1, [sl]
    return U_hat;


   103f6:	4620      	mov	r0, r4
   103f8:	b003      	add	sp, #12
   103fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103fe:	bf00      	nop
   10400:	40440000 	.word	0x40440000
   10404:	3ff00000 	.word	0x3ff00000
   10408:	40240000 	.word	0x40240000
   1040c:	200015d0 	.word	0x200015d0
   10410:	200015d8 	.word	0x200015d8

00010414 <device_found>:
int asimuth_array[180];


static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
			 struct net_buf_simple *ad)
{
   10414:	b5f0      	push	{r4, r5, r6, r7, lr}
   10416:	b093      	sub	sp, #76	; 0x4c
   10418:	4604      	mov	r4, r0
   1041a:	460d      	mov	r5, r1
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1041c:	7803      	ldrb	r3, [r0, #0]
   1041e:	2b03      	cmp	r3, #3
   10420:	d846      	bhi.n	104b0 <device_found+0x9c>
   10422:	e8df f003 	tbb	[pc, r3]
   10426:	2f02      	.short	0x2f02
   10428:	3f39      	.short	0x3f39
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1042a:	4b2f      	ldr	r3, [pc, #188]	; (104e8 <device_found+0xd4>)
   1042c:	e893 0003 	ldmia.w	r3, {r0, r1}
   10430:	9007      	str	r0, [sp, #28]
   10432:	f8ad 1020 	strh.w	r1, [sp, #32]
   10436:	0c09      	lsrs	r1, r1, #16
   10438:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1043c:	7963      	ldrb	r3, [r4, #5]
   1043e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10440:	78e1      	ldrb	r1, [r4, #3]
   10442:	78a0      	ldrb	r0, [r4, #2]
   10444:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10446:	af07      	add	r7, sp, #28
   10448:	9705      	str	r7, [sp, #20]
   1044a:	9604      	str	r6, [sp, #16]
   1044c:	9003      	str	r0, [sp, #12]
   1044e:	9102      	str	r1, [sp, #8]
   10450:	9201      	str	r2, [sp, #4]
   10452:	9300      	str	r3, [sp, #0]
   10454:	79a3      	ldrb	r3, [r4, #6]
   10456:	4a25      	ldr	r2, [pc, #148]	; (104ec <device_found+0xd8>)
   10458:	211e      	movs	r1, #30
   1045a:	a80a      	add	r0, sp, #40	; 0x28
   1045c:	f010 fc96 	bl	20d8c <snprintk>
	static uint32_t servoAngle = 0;
	char addr_str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
	rssi = KALMAN(rssi); 
   10460:	4628      	mov	r0, r5
   10462:	f7ff ff7b 	bl	1035c <KALMAN>
	// printk("Device found: %s (Modified RSSI %d)\n", addr_str, rssi);
	asimuth_array[servoAngle] = rssi;
   10466:	4c22      	ldr	r4, [pc, #136]	; (104f0 <device_found+0xdc>)
   10468:	6821      	ldr	r1, [r4, #0]
   1046a:	4b22      	ldr	r3, [pc, #136]	; (104f4 <device_found+0xe0>)
   1046c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
	angle_move_servo(servo_asimut[0],servoAngle);
   10470:	2000      	movs	r0, #0
   10472:	f010 fbff 	bl	20c74 <angle_move_servo>
	servoAngle ++;
   10476:	6823      	ldr	r3, [r4, #0]
   10478:	3301      	adds	r3, #1
   1047a:	6023      	str	r3, [r4, #0]
	if(servoAngle == 180){
   1047c:	2bb4      	cmp	r3, #180	; 0xb4
   1047e:	d01d      	beq.n	104bc <device_found+0xa8>
		}
	}

	
	
}
   10480:	b013      	add	sp, #76	; 0x4c
   10482:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10484:	4b1c      	ldr	r3, [pc, #112]	; (104f8 <device_found+0xe4>)
   10486:	e893 0003 	ldmia.w	r3, {r0, r1}
   1048a:	9007      	str	r0, [sp, #28]
   1048c:	f8ad 1020 	strh.w	r1, [sp, #32]
   10490:	0c09      	lsrs	r1, r1, #16
   10492:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   10496:	e7d1      	b.n	1043c <device_found+0x28>
		strcpy(type, "public-id");
   10498:	4a18      	ldr	r2, [pc, #96]	; (104fc <device_found+0xe8>)
   1049a:	ab07      	add	r3, sp, #28
   1049c:	ca07      	ldmia	r2, {r0, r1, r2}
   1049e:	c303      	stmia	r3!, {r0, r1}
   104a0:	801a      	strh	r2, [r3, #0]
		break;
   104a2:	e7cb      	b.n	1043c <device_found+0x28>
		strcpy(type, "random-id");
   104a4:	4a16      	ldr	r2, [pc, #88]	; (10500 <device_found+0xec>)
   104a6:	ab07      	add	r3, sp, #28
   104a8:	ca07      	ldmia	r2, {r0, r1, r2}
   104aa:	c303      	stmia	r3!, {r0, r1}
   104ac:	801a      	strh	r2, [r3, #0]
		break;
   104ae:	e7c5      	b.n	1043c <device_found+0x28>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   104b0:	4a14      	ldr	r2, [pc, #80]	; (10504 <device_found+0xf0>)
   104b2:	210a      	movs	r1, #10
   104b4:	a807      	add	r0, sp, #28
   104b6:	f010 fc69 	bl	20d8c <snprintk>
		break;
   104ba:	e7bf      	b.n	1043c <device_found+0x28>
		servoAngle = 0;
   104bc:	2400      	movs	r4, #0
   104be:	4b0c      	ldr	r3, [pc, #48]	; (104f0 <device_found+0xdc>)
   104c0:	601c      	str	r4, [r3, #0]
		angle_move_servo(servo_asimut[0],servoAngle);
   104c2:	4621      	mov	r1, r4
   104c4:	4620      	mov	r0, r4
   104c6:	f010 fbd5 	bl	20c74 <angle_move_servo>
		for (int i = 0; i <180; i++){
   104ca:	e009      	b.n	104e0 <device_found+0xcc>
			printk("%d", asimuth_array[i]);
   104cc:	4b09      	ldr	r3, [pc, #36]	; (104f4 <device_found+0xe0>)
   104ce:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   104d2:	480d      	ldr	r0, [pc, #52]	; (10508 <device_found+0xf4>)
   104d4:	f010 fc4c 	bl	20d70 <printk>
			printk("\n");
   104d8:	480c      	ldr	r0, [pc, #48]	; (1050c <device_found+0xf8>)
   104da:	f010 fc49 	bl	20d70 <printk>
		for (int i = 0; i <180; i++){
   104de:	3401      	adds	r4, #1
   104e0:	2cb3      	cmp	r4, #179	; 0xb3
   104e2:	ddf3      	ble.n	104cc <device_found+0xb8>
   104e4:	e7cc      	b.n	10480 <device_found+0x6c>
   104e6:	bf00      	nop
   104e8:	00025f38 	.word	0x00025f38
   104ec:	00025f48 	.word	0x00025f48
   104f0:	20002270 	.word	0x20002270
   104f4:	20001fa0 	.word	0x20001fa0
   104f8:	00025f40 	.word	0x00025f40
   104fc:	00025f6c 	.word	0x00025f6c
   10500:	00025f78 	.word	0x00025f78
   10504:	00027744 	.word	0x00027744
   10508:	000275e8 	.word	0x000275e8
   1050c:	00026128 	.word	0x00026128

00010510 <init_bluethooth_scan>:


void init_bluethooth_scan(){
   10510:	b530      	push	{r4, r5, lr}
   10512:	b0af      	sub	sp, #188	; 0xbc

	struct bt_le_scan_param scan_param = {
   10514:	2400      	movs	r4, #0
   10516:	9427      	str	r4, [sp, #156]	; 0x9c
   10518:	942a      	str	r4, [sp, #168]	; 0xa8
   1051a:	942b      	str	r4, [sp, #172]	; 0xac
   1051c:	2301      	movs	r3, #1
   1051e:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
   10522:	2302      	movs	r3, #2
   10524:	9328      	str	r3, [sp, #160]	; 0xa0
   10526:	2360      	movs	r3, #96	; 0x60
   10528:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
   1052c:	2330      	movs	r3, #48	; 0x30
   1052e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
		.options    = BT_LE_SCAN_OPT_FILTER_ACCEPT_LIST,
		.interval   = BT_GAP_SCAN_FAST_INTERVAL,
		.window     = BT_GAP_SCAN_FAST_WINDOW,
	};
	int err;
	printk("Starting Observer\n");
   10532:	4847      	ldr	r0, [pc, #284]	; (10650 <init_bluethooth_scan+0x140>)
   10534:	f010 fc1c 	bl	20d70 <printk>
	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
   10538:	4620      	mov	r0, r4
   1053a:	f005 fc9d 	bl	15e78 <bt_enable>
	if (err) {
   1053e:	b9f8      	cbnz	r0, 10580 <init_bluethooth_scan+0x70>
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	printk("Bluetooth initialized\n");
   10540:	4844      	ldr	r0, [pc, #272]	; (10654 <init_bluethooth_scan+0x144>)
   10542:	f010 fc15 	bl	20d70 <printk>


	const bt_addr_le_t addr_le = {.a = BT_ADDR_LE_ANY, .type = BT_ADDR_LE_RANDOM};
   10546:	2300      	movs	r3, #0
   10548:	f8cd 3096 	str.w	r3, [sp, #150]	; 0x96
   1054c:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
   10550:	2201      	movs	r2, #1
   10552:	f88d 2094 	strb.w	r2, [sp, #148]	; 0x94
   10556:	932c      	str	r3, [sp, #176]	; 0xb0
   10558:	f8cd 30b3 	str.w	r3, [sp, #179]	; 0xb3
   1055c:	ab2c      	add	r3, sp, #176	; 0xb0
   1055e:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
	const char *addr_str = "E4:A6:69:9D:F7:7F";
	char *addr_str2[27];
	err = bt_addr_le_from_str(addr_str,"(random)", &addr_le);
   10562:	aa25      	add	r2, sp, #148	; 0x94
   10564:	493c      	ldr	r1, [pc, #240]	; (10658 <init_bluethooth_scan+0x148>)
   10566:	483d      	ldr	r0, [pc, #244]	; (1065c <init_bluethooth_scan+0x14c>)
   10568:	f003 fe4e 	bl	14208 <bt_addr_le_from_str>
	if (err){
   1056c:	4601      	mov	r1, r0
   1056e:	b960      	cbnz	r0, 1058a <init_bluethooth_scan+0x7a>
	switch (addr->type) {
   10570:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   10574:	2b03      	cmp	r3, #3
   10576:	d85c      	bhi.n	10632 <init_bluethooth_scan+0x122>
   10578:	e8df f003 	tbb	[pc, r3]
   1057c:	554f450b 	.word	0x554f450b
   10580:	4601      	mov	r1, r0
		printk("Bluetooth init failed (err %d)\n", err);
   10582:	4837      	ldr	r0, [pc, #220]	; (10660 <init_bluethooth_scan+0x150>)
   10584:	f010 fbf4 	bl	20d70 <printk>
		return;
   10588:	e03b      	b.n	10602 <init_bluethooth_scan+0xf2>
		printk("error: %d", err);
   1058a:	4836      	ldr	r0, [pc, #216]	; (10664 <init_bluethooth_scan+0x154>)
   1058c:	f010 fbf0 	bl	20d70 <printk>
   10590:	e7ee      	b.n	10570 <init_bluethooth_scan+0x60>
		strcpy(type, "public");
   10592:	4b35      	ldr	r3, [pc, #212]	; (10668 <init_bluethooth_scan+0x158>)
   10594:	e893 0003 	ldmia.w	r3, {r0, r1}
   10598:	9007      	str	r0, [sp, #28]
   1059a:	f8ad 1020 	strh.w	r1, [sp, #32]
   1059e:	0c09      	lsrs	r1, r1, #16
   105a0:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   105a4:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   105a8:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   105ac:	f89d 1097 	ldrb.w	r1, [sp, #151]	; 0x97
   105b0:	f89d 0096 	ldrb.w	r0, [sp, #150]	; 0x96
   105b4:	f89d 4095 	ldrb.w	r4, [sp, #149]	; 0x95
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   105b8:	ad07      	add	r5, sp, #28
   105ba:	9505      	str	r5, [sp, #20]
   105bc:	9404      	str	r4, [sp, #16]
   105be:	9003      	str	r0, [sp, #12]
   105c0:	9102      	str	r1, [sp, #8]
   105c2:	9201      	str	r2, [sp, #4]
   105c4:	9300      	str	r3, [sp, #0]
   105c6:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   105ca:	4a28      	ldr	r2, [pc, #160]	; (1066c <init_bluethooth_scan+0x15c>)
   105cc:	216c      	movs	r1, #108	; 0x6c
   105ce:	a80a      	add	r0, sp, #40	; 0x28
   105d0:	f010 fbdc 	bl	20d8c <snprintk>
	}
	err = bt_addr_le_to_str(&addr_le,&addr_str2,sizeof(addr_str2));
	err = bt_le_filter_accept_list_add(&addr_le);
   105d4:	a825      	add	r0, sp, #148	; 0x94
   105d6:	f005 fcf9 	bl	15fcc <bt_le_filter_accept_list_add>
	if (err){
   105da:	4601      	mov	r1, r0
   105dc:	2800      	cmp	r0, #0
   105de:	d12e      	bne.n	1063e <init_bluethooth_scan+0x12e>
		printk("Could not add to acceptlist (error: %d)", err);
	}

	printk("address after: %s", &addr_str2);
   105e0:	a90a      	add	r1, sp, #40	; 0x28
   105e2:	4823      	ldr	r0, [pc, #140]	; (10670 <init_bluethooth_scan+0x160>)
   105e4:	f010 fbc4 	bl	20d70 <printk>
	
	err = bt_le_scan_start(&scan_param, device_found);
   105e8:	4922      	ldr	r1, [pc, #136]	; (10674 <init_bluethooth_scan+0x164>)
   105ea:	a827      	add	r0, sp, #156	; 0x9c
   105ec:	f006 f9d6 	bl	1699c <bt_le_scan_start>
   105f0:	4604      	mov	r4, r0
	printk("\n");
   105f2:	4821      	ldr	r0, [pc, #132]	; (10678 <init_bluethooth_scan+0x168>)
   105f4:	f010 fbbc 	bl	20d70 <printk>
	if (err) {
   105f8:	bb2c      	cbnz	r4, 10646 <init_bluethooth_scan+0x136>
		printk("Starting scanning failed (err %d)\n", err);
		return;
	}
	servo_init(servo_asimut[0], servo_asimut[1]);
   105fa:	210d      	movs	r1, #13
   105fc:	2000      	movs	r0, #0
   105fe:	f000 f997 	bl	10930 <servo_init>

    
}
   10602:	b02f      	add	sp, #188	; 0xbc
   10604:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   10606:	4b1d      	ldr	r3, [pc, #116]	; (1067c <init_bluethooth_scan+0x16c>)
   10608:	e893 0003 	ldmia.w	r3, {r0, r1}
   1060c:	9007      	str	r0, [sp, #28]
   1060e:	f8ad 1020 	strh.w	r1, [sp, #32]
   10612:	0c09      	lsrs	r1, r1, #16
   10614:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   10618:	e7c4      	b.n	105a4 <init_bluethooth_scan+0x94>
		strcpy(type, "public-id");
   1061a:	4a19      	ldr	r2, [pc, #100]	; (10680 <init_bluethooth_scan+0x170>)
   1061c:	ab07      	add	r3, sp, #28
   1061e:	ca07      	ldmia	r2, {r0, r1, r2}
   10620:	c303      	stmia	r3!, {r0, r1}
   10622:	801a      	strh	r2, [r3, #0]
		break;
   10624:	e7be      	b.n	105a4 <init_bluethooth_scan+0x94>
		strcpy(type, "random-id");
   10626:	4a17      	ldr	r2, [pc, #92]	; (10684 <init_bluethooth_scan+0x174>)
   10628:	ab07      	add	r3, sp, #28
   1062a:	ca07      	ldmia	r2, {r0, r1, r2}
   1062c:	c303      	stmia	r3!, {r0, r1}
   1062e:	801a      	strh	r2, [r3, #0]
		break;
   10630:	e7b8      	b.n	105a4 <init_bluethooth_scan+0x94>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10632:	4a15      	ldr	r2, [pc, #84]	; (10688 <init_bluethooth_scan+0x178>)
   10634:	210a      	movs	r1, #10
   10636:	a807      	add	r0, sp, #28
   10638:	f010 fba8 	bl	20d8c <snprintk>
		break;
   1063c:	e7b2      	b.n	105a4 <init_bluethooth_scan+0x94>
		printk("Could not add to acceptlist (error: %d)", err);
   1063e:	4813      	ldr	r0, [pc, #76]	; (1068c <init_bluethooth_scan+0x17c>)
   10640:	f010 fb96 	bl	20d70 <printk>
   10644:	e7cc      	b.n	105e0 <init_bluethooth_scan+0xd0>
		printk("Starting scanning failed (err %d)\n", err);
   10646:	4621      	mov	r1, r4
   10648:	4811      	ldr	r0, [pc, #68]	; (10690 <init_bluethooth_scan+0x180>)
   1064a:	f010 fb91 	bl	20d70 <printk>
		return;
   1064e:	e7d8      	b.n	10602 <init_bluethooth_scan+0xf2>
   10650:	00025f84 	.word	0x00025f84
   10654:	00025fb8 	.word	0x00025fb8
   10658:	00025fd0 	.word	0x00025fd0
   1065c:	00025fdc 	.word	0x00025fdc
   10660:	00025f98 	.word	0x00025f98
   10664:	00025ff0 	.word	0x00025ff0
   10668:	00025f38 	.word	0x00025f38
   1066c:	00025f48 	.word	0x00025f48
   10670:	00026024 	.word	0x00026024
   10674:	00010415 	.word	0x00010415
   10678:	00026128 	.word	0x00026128
   1067c:	00025f40 	.word	0x00025f40
   10680:	00025f6c 	.word	0x00025f6c
   10684:	00025f78 	.word	0x00025f78
   10688:	00027744 	.word	0x00027744
   1068c:	00025ffc 	.word	0x00025ffc
   10690:	00026038 	.word	0x00026038

00010694 <button_handler>:
const struct device *dev;

void button_handler(uint32_t button_state, uint32_t has_changed){
	
    int button_pressed = 0;
	if (has_changed & button_state){
   10694:	4208      	tst	r0, r1
   10696:	d04f      	beq.n	10738 <button_handler+0xa4>
void button_handler(uint32_t button_state, uint32_t has_changed){
   10698:	b508      	push	{r3, lr}
		switch (has_changed){
   1069a:	3901      	subs	r1, #1
   1069c:	2907      	cmp	r1, #7
   1069e:	d805      	bhi.n	106ac <button_handler+0x18>
   106a0:	e8df f001 	tbb	[pc, r1]
   106a4:	48042e06 	.word	0x48042e06
   106a8:	46040404 	.word	0x46040404
	if (has_changed & button_state){
   106ac:	2100      	movs	r1, #0
   106ae:	e00e      	b.n	106ce <button_handler+0x3a>
			
			case DK_BTN1_MSK:
				button_pressed = 1;
                gpio_pin_set(dev,26,1);
   106b0:	4b22      	ldr	r3, [pc, #136]	; (1073c <button_handler+0xa8>)
   106b2:	6818      	ldr	r0, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
   106b4:	6903      	ldr	r3, [r0, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   106b6:	681b      	ldr	r3, [r3, #0]
   106b8:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   106bc:	d118      	bne.n	106f0 <button_handler+0x5c>
   106be:	2301      	movs	r3, #1
	if (value != 0)	{
   106c0:	b1c3      	cbz	r3, 106f4 <button_handler+0x60>
	const struct gpio_driver_api *api =
   106c2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   106c4:	68db      	ldr	r3, [r3, #12]
   106c6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   106ca:	4798      	blx	r3
				button_pressed = 1;
   106cc:	2101      	movs	r1, #1
   106ce:	4b1c      	ldr	r3, [pc, #112]	; (10740 <button_handler+0xac>)
   106d0:	4a1c      	ldr	r2, [pc, #112]	; (10744 <button_handler+0xb0>)
   106d2:	1a9b      	subs	r3, r3, r2
   106d4:	08db      	lsrs	r3, r3, #3
				button_pressed = 4;
				break;
			default:
				break;
		}
		LOG_INF("Button %d pressed", button_pressed);
   106d6:	f04f 0200 	mov.w	r2, #0
   106da:	2003      	movs	r0, #3
   106dc:	f360 0202 	bfi	r2, r0, #0, #3
   106e0:	f36f 02c5 	bfc	r2, #3, #3
   106e4:	f363 128f 	bfi	r2, r3, #6, #10
   106e8:	4817      	ldr	r0, [pc, #92]	; (10748 <button_handler+0xb4>)
   106ea:	f001 fafd 	bl	11ce8 <log_1>

	}
}
   106ee:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
   106f0:	2300      	movs	r3, #0
   106f2:	e7e5      	b.n	106c0 <button_handler+0x2c>
	const struct gpio_driver_api *api =
   106f4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   106f6:	691b      	ldr	r3, [r3, #16]
   106f8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   106fc:	4798      	blx	r3
   106fe:	e7e5      	b.n	106cc <button_handler+0x38>
                gpio_pin_set(dev,26,0);
   10700:	4b0e      	ldr	r3, [pc, #56]	; (1073c <button_handler+0xa8>)
   10702:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
   10704:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   10706:	681b      	ldr	r3, [r3, #0]
   10708:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   1070c:	d108      	bne.n	10720 <button_handler+0x8c>
   1070e:	2300      	movs	r3, #0
	if (value != 0)	{
   10710:	b143      	cbz	r3, 10724 <button_handler+0x90>
	const struct gpio_driver_api *api =
   10712:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   10714:	68db      	ldr	r3, [r3, #12]
   10716:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1071a:	4798      	blx	r3
			    button_pressed = 2;
   1071c:	2102      	movs	r1, #2
	return ret;
   1071e:	e7d6      	b.n	106ce <button_handler+0x3a>
		value = (value != 0) ? 0 : 1;
   10720:	2301      	movs	r3, #1
   10722:	e7f5      	b.n	10710 <button_handler+0x7c>
	const struct gpio_driver_api *api =
   10724:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   10726:	691b      	ldr	r3, [r3, #16]
   10728:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1072c:	4798      	blx	r3
   1072e:	e7f5      	b.n	1071c <button_handler+0x88>
				button_pressed = 4;
   10730:	2104      	movs	r1, #4
				break;
   10732:	e7cc      	b.n	106ce <button_handler+0x3a>
				button_pressed = 3;
   10734:	2103      	movs	r1, #3
   10736:	e7ca      	b.n	106ce <button_handler+0x3a>
   10738:	4770      	bx	lr
   1073a:	bf00      	nop
   1073c:	20002274 	.word	0x20002274
   10740:	00025d80 	.word	0x00025d80
   10744:	00025d80 	.word	0x00025d80
   10748:	0002605c 	.word	0x0002605c

0001074c <configure_dk_buttons_leds>:

void configure_dk_buttons_leds(){
   1074c:	b508      	push	{r3, lr}
	int err = dk_leds_init();
   1074e:	f00a fbff 	bl	1af50 <dk_leds_init>
	if(err){
   10752:	2800      	cmp	r0, #0
   10754:	d147      	bne.n	107e6 <configure_dk_buttons_leds+0x9a>
		LOG_ERR("Could not init LEDS(err %d",err);
	}

	err = dk_buttons_init(button_handler);
   10756:	4854      	ldr	r0, [pc, #336]	; (108a8 <configure_dk_buttons_leds+0x15c>)
   10758:	f00a fac6 	bl	1ace8 <dk_buttons_init>
	if(err){
   1075c:	4601      	mov	r1, r0
   1075e:	2800      	cmp	r0, #0
   10760:	d153      	bne.n	1080a <configure_dk_buttons_leds+0xbe>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10762:	4852      	ldr	r0, [pc, #328]	; (108ac <configure_dk_buttons_leds+0x160>)
   10764:	f00b fe68 	bl	1c438 <z_impl_device_get_binding>
		LOG_ERR("Could not init BUTTONS(err %d", err);
	}

    dev = device_get_binding(LED0);
   10768:	4b51      	ldr	r3, [pc, #324]	; (108b0 <configure_dk_buttons_leds+0x164>)
   1076a:	6018      	str	r0, [r3, #0]
	if (dev == NULL) {
   1076c:	2800      	cmp	r0, #0
   1076e:	d039      	beq.n	107e4 <configure_dk_buttons_leds+0x98>
	const struct gpio_driver_api *api =
   10770:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   10772:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   10774:	6813      	ldr	r3, [r2, #0]
   10776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1077a:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1077c:	680b      	ldr	r3, [r1, #0]
   1077e:	f240 6201 	movw	r2, #1537	; 0x601
   10782:	210d      	movs	r1, #13
   10784:	4798      	blx	r3
		return;
	}

    err = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (err) {
   10786:	2800      	cmp	r0, #0
   10788:	d150      	bne.n	1082c <configure_dk_buttons_leds+0xe0>
		LOG_ERR("Could not init gpio %d", PIN);
	}
    err = gpio_pin_configure(dev, 27, GPIO_OUTPUT_ACTIVE | FLAGS);
   1078a:	4b49      	ldr	r3, [pc, #292]	; (108b0 <configure_dk_buttons_leds+0x164>)
   1078c:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   1078e:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   10790:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   10792:	6813      	ldr	r3, [r2, #0]
   10794:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   10798:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1079a:	680b      	ldr	r3, [r1, #0]
   1079c:	f240 6201 	movw	r2, #1537	; 0x601
   107a0:	211b      	movs	r1, #27
   107a2:	4798      	blx	r3
    if (err) {
   107a4:	2800      	cmp	r0, #0
   107a6:	d153      	bne.n	10850 <configure_dk_buttons_leds+0x104>
		LOG_ERR("Could not init gpio %d", 27);
	}
    err = gpio_pin_configure(dev, 26, GPIO_OUTPUT_ACTIVE | FLAGS);
   107a8:	4b41      	ldr	r3, [pc, #260]	; (108b0 <configure_dk_buttons_leds+0x164>)
   107aa:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   107ac:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   107ae:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   107b0:	6813      	ldr	r3, [r2, #0]
   107b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   107b6:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   107b8:	680b      	ldr	r3, [r1, #0]
   107ba:	f240 6201 	movw	r2, #1537	; 0x601
   107be:	211a      	movs	r1, #26
   107c0:	4798      	blx	r3
    if (err) {
   107c2:	2800      	cmp	r0, #0
   107c4:	d156      	bne.n	10874 <configure_dk_buttons_leds+0x128>
		LOG_ERR("Could not init gpio %d", 26);
	}
    gpio_pin_set(dev,27,1);
   107c6:	4b3a      	ldr	r3, [pc, #232]	; (108b0 <configure_dk_buttons_leds+0x164>)
   107c8:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
   107ca:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   107cc:	681b      	ldr	r3, [r3, #0]
   107ce:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   107d2:	d161      	bne.n	10898 <configure_dk_buttons_leds+0x14c>
   107d4:	2301      	movs	r3, #1
	if (value != 0)	{
   107d6:	2b00      	cmp	r3, #0
   107d8:	d060      	beq.n	1089c <configure_dk_buttons_leds+0x150>
	const struct gpio_driver_api *api =
   107da:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   107dc:	68db      	ldr	r3, [r3, #12]
   107de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   107e2:	4798      	blx	r3
    
    }
   107e4:	bd08      	pop	{r3, pc}
   107e6:	4601      	mov	r1, r0
   107e8:	4b32      	ldr	r3, [pc, #200]	; (108b4 <configure_dk_buttons_leds+0x168>)
   107ea:	4a33      	ldr	r2, [pc, #204]	; (108b8 <configure_dk_buttons_leds+0x16c>)
   107ec:	1a9b      	subs	r3, r3, r2
   107ee:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init LEDS(err %d",err);
   107f0:	f04f 0200 	mov.w	r2, #0
   107f4:	2001      	movs	r0, #1
   107f6:	f360 0202 	bfi	r2, r0, #0, #3
   107fa:	f36f 02c5 	bfc	r2, #3, #3
   107fe:	f363 128f 	bfi	r2, r3, #6, #10
   10802:	482e      	ldr	r0, [pc, #184]	; (108bc <configure_dk_buttons_leds+0x170>)
   10804:	f001 fa70 	bl	11ce8 <log_1>
   10808:	e7a5      	b.n	10756 <configure_dk_buttons_leds+0xa>
   1080a:	4b2a      	ldr	r3, [pc, #168]	; (108b4 <configure_dk_buttons_leds+0x168>)
   1080c:	4a2a      	ldr	r2, [pc, #168]	; (108b8 <configure_dk_buttons_leds+0x16c>)
   1080e:	1a9b      	subs	r3, r3, r2
   10810:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init BUTTONS(err %d", err);
   10812:	f04f 0200 	mov.w	r2, #0
   10816:	2001      	movs	r0, #1
   10818:	f360 0202 	bfi	r2, r0, #0, #3
   1081c:	f36f 02c5 	bfc	r2, #3, #3
   10820:	f363 128f 	bfi	r2, r3, #6, #10
   10824:	4826      	ldr	r0, [pc, #152]	; (108c0 <configure_dk_buttons_leds+0x174>)
   10826:	f001 fa5f 	bl	11ce8 <log_1>
   1082a:	e79a      	b.n	10762 <configure_dk_buttons_leds+0x16>
   1082c:	4b21      	ldr	r3, [pc, #132]	; (108b4 <configure_dk_buttons_leds+0x168>)
   1082e:	4a22      	ldr	r2, [pc, #136]	; (108b8 <configure_dk_buttons_leds+0x16c>)
   10830:	1a9b      	subs	r3, r3, r2
   10832:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init gpio %d", PIN);
   10834:	f04f 0200 	mov.w	r2, #0
   10838:	2101      	movs	r1, #1
   1083a:	f361 0202 	bfi	r2, r1, #0, #3
   1083e:	f36f 02c5 	bfc	r2, #3, #3
   10842:	f363 128f 	bfi	r2, r3, #6, #10
   10846:	210d      	movs	r1, #13
   10848:	481e      	ldr	r0, [pc, #120]	; (108c4 <configure_dk_buttons_leds+0x178>)
   1084a:	f001 fa4d 	bl	11ce8 <log_1>
   1084e:	e79c      	b.n	1078a <configure_dk_buttons_leds+0x3e>
   10850:	4b18      	ldr	r3, [pc, #96]	; (108b4 <configure_dk_buttons_leds+0x168>)
   10852:	4a19      	ldr	r2, [pc, #100]	; (108b8 <configure_dk_buttons_leds+0x16c>)
   10854:	1a9b      	subs	r3, r3, r2
   10856:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init gpio %d", 27);
   10858:	f04f 0200 	mov.w	r2, #0
   1085c:	2101      	movs	r1, #1
   1085e:	f361 0202 	bfi	r2, r1, #0, #3
   10862:	f36f 02c5 	bfc	r2, #3, #3
   10866:	f363 128f 	bfi	r2, r3, #6, #10
   1086a:	211b      	movs	r1, #27
   1086c:	4815      	ldr	r0, [pc, #84]	; (108c4 <configure_dk_buttons_leds+0x178>)
   1086e:	f001 fa3b 	bl	11ce8 <log_1>
   10872:	e799      	b.n	107a8 <configure_dk_buttons_leds+0x5c>
   10874:	4b0f      	ldr	r3, [pc, #60]	; (108b4 <configure_dk_buttons_leds+0x168>)
   10876:	4a10      	ldr	r2, [pc, #64]	; (108b8 <configure_dk_buttons_leds+0x16c>)
   10878:	1a9b      	subs	r3, r3, r2
   1087a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init gpio %d", 26);
   1087c:	f04f 0200 	mov.w	r2, #0
   10880:	2101      	movs	r1, #1
   10882:	f361 0202 	bfi	r2, r1, #0, #3
   10886:	f36f 02c5 	bfc	r2, #3, #3
   1088a:	f363 128f 	bfi	r2, r3, #6, #10
   1088e:	211a      	movs	r1, #26
   10890:	480c      	ldr	r0, [pc, #48]	; (108c4 <configure_dk_buttons_leds+0x178>)
   10892:	f001 fa29 	bl	11ce8 <log_1>
   10896:	e796      	b.n	107c6 <configure_dk_buttons_leds+0x7a>
		value = (value != 0) ? 0 : 1;
   10898:	2300      	movs	r3, #0
   1089a:	e79c      	b.n	107d6 <configure_dk_buttons_leds+0x8a>
	const struct gpio_driver_api *api =
   1089c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1089e:	691b      	ldr	r3, [r3, #16]
   108a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   108a4:	4798      	blx	r3
	return ret;
   108a6:	e79d      	b.n	107e4 <configure_dk_buttons_leds+0x98>
   108a8:	00010695 	.word	0x00010695
   108ac:	000260ac 	.word	0x000260ac
   108b0:	20002274 	.word	0x20002274
   108b4:	00025d80 	.word	0x00025d80
   108b8:	00025d80 	.word	0x00025d80
   108bc:	00026070 	.word	0x00026070
   108c0:	0002608c 	.word	0x0002608c
   108c4:	000260b4 	.word	0x000260b4

000108c8 <timer_init>:

// Timer CC register use to reset the timer.
#define TIMER_RELOAD_CC_NUM 5

void timer_init()
{
   108c8:	b508      	push	{r3, lr}
    NRF_TIMER3->BITMODE                 = TIMER_BITMODE_BITMODE_24Bit << TIMER_BITMODE_BITMODE_Pos;
   108ca:	4b09      	ldr	r3, [pc, #36]	; (108f0 <timer_init+0x28>)
   108cc:	2202      	movs	r2, #2
   108ce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_TIMER3->PRESCALER               = 0;
   108d2:	2200      	movs	r2, #0
   108d4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_TIMER3->SHORTS                  = TIMER_SHORTS_COMPARE0_CLEAR_Msk << TIMER_RELOAD_CC_NUM;
   108d8:	2120      	movs	r1, #32
   108da:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    NRF_TIMER3->MODE                    = TIMER_MODE_MODE_Timer << TIMER_MODE_MODE_Pos;
   108de:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_TIMER3->CC[TIMER_RELOAD_CC_NUM] = TIMER_RELOAD;
   108e2:	4a04      	ldr	r2, [pc, #16]	; (108f4 <timer_init+0x2c>)
   108e4:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554

    printk("Timer initialized.\n");
   108e8:	4803      	ldr	r0, [pc, #12]	; (108f8 <timer_init+0x30>)
   108ea:	f010 fa41 	bl	20d70 <printk>
}
   108ee:	bd08      	pop	{r3, pc}
   108f0:	4001a000 	.word	0x4001a000
   108f4:	0004e200 	.word	0x0004e200
   108f8:	000260dc 	.word	0x000260dc

000108fc <timer_start>:

void timer_start()
{
   108fc:	b508      	push	{r3, lr}
    NRF_TIMER3->TASKS_START = 1;
   108fe:	4b03      	ldr	r3, [pc, #12]	; (1090c <timer_start+0x10>)
   10900:	2201      	movs	r2, #1
   10902:	601a      	str	r2, [r3, #0]
    
    printk("Timer started.\n");
   10904:	4802      	ldr	r0, [pc, #8]	; (10910 <timer_start+0x14>)
   10906:	f010 fa33 	bl	20d70 <printk>
}
   1090a:	bd08      	pop	{r3, pc}
   1090c:	4001a000 	.word	0x4001a000
   10910:	000260f0 	.word	0x000260f0

00010914 <convert_to_raw>:

uint32_t convert_to_raw(uint32_t value)
{
    uint32_t angle = 0;
    angle = (value * 32000)/270 + 8000;
   10914:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   10918:	fb03 f000 	mul.w	r0, r3, r0
   1091c:	4b03      	ldr	r3, [pc, #12]	; (1092c <convert_to_raw+0x18>)
   1091e:	fba3 3000 	umull	r3, r0, r3, r0
   10922:	0a00      	lsrs	r0, r0, #8

    return angle;
}
   10924:	f500 50fa 	add.w	r0, r0, #8000	; 0x1f40
   10928:	4770      	bx	lr
   1092a:	bf00      	nop
   1092c:	f2b9d649 	.word	0xf2b9d649

00010930 <servo_init>:

void servo_init(uint32_t N, int servo_pin)
{
    if(N>3) {
   10930:	2803      	cmp	r0, #3
   10932:	d853      	bhi.n	109dc <servo_init+0xac>
{
   10934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10936:	460a      	mov	r2, r1
        return;
    }
    
    NRF_GPIOTE->CONFIG[pwmN_gpiote_ch[N]] = GPIOTE_CONFIG_MODE_Task << GPIOTE_CONFIG_MODE_Pos |
                                            GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos |
                                            servo_pin << GPIOTE_CONFIG_PSEL_Pos |
   10938:	020b      	lsls	r3, r1, #8
    NRF_GPIOTE->CONFIG[pwmN_gpiote_ch[N]] = GPIOTE_CONFIG_MODE_Task << GPIOTE_CONFIG_MODE_Pos |
   1093a:	4929      	ldr	r1, [pc, #164]	; (109e0 <servo_init+0xb0>)
   1093c:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
                                            servo_pin << GPIOTE_CONFIG_PSEL_Pos |
   10940:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
   10944:	f043 0303 	orr.w	r3, r3, #3
    NRF_GPIOTE->CONFIG[pwmN_gpiote_ch[N]] = GPIOTE_CONFIG_MODE_Task << GPIOTE_CONFIG_MODE_Pos |
   10948:	f505 74a2 	add.w	r4, r5, #324	; 0x144
   1094c:	4925      	ldr	r1, [pc, #148]	; (109e4 <servo_init+0xb4>)
   1094e:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
                                            GPIOTE_CONFIG_OUTINIT_High << GPIOTE_CONFIG_OUTINIT_Pos;
    
    NRF_PPI->CH[pwmN_ppi_ch_a[N]].EEP = (uint32_t)&NRF_TIMER3->EVENTS_COMPARE[pwmN_timer_cc_num[N]];
   10952:	4b25      	ldr	r3, [pc, #148]	; (109e8 <servo_init+0xb8>)
   10954:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10958:	4c24      	ldr	r4, [pc, #144]	; (109ec <servo_init+0xbc>)
   1095a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1095e:	4b24      	ldr	r3, [pc, #144]	; (109f0 <servo_init+0xc0>)
   10960:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10964:	f501 31c8 	add.w	r1, r1, #102400	; 0x19000
   10968:	f103 06a2 	add.w	r6, r3, #162	; 0xa2
   1096c:	f841 4036 	str.w	r4, [r1, r6, lsl #3]
    NRF_PPI->CH[pwmN_ppi_ch_a[N]].TEP = (uint32_t)&NRF_GPIOTE->TASKS_CLR[pwmN_gpiote_ch[N]];
   10970:	00af      	lsls	r7, r5, #2
   10972:	4c20      	ldr	r4, [pc, #128]	; (109f4 <servo_init+0xc4>)
   10974:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   10978:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   1097c:	604c      	str	r4, [r1, #4]
    if((N%2) == 0) {
   1097e:	f010 0f01 	tst.w	r0, #1
   10982:	d11f      	bne.n	109c4 <servo_init+0x94>
        NRF_PPI->CH[pwmN_ppi_ch_b[N]].EEP = (uint32_t)&NRF_TIMER3->EVENTS_COMPARE[TIMER_RELOAD_CC_NUM];
   10984:	491c      	ldr	r1, [pc, #112]	; (109f8 <servo_init+0xc8>)
   10986:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
   1098a:	491c      	ldr	r1, [pc, #112]	; (109fc <servo_init+0xcc>)
   1098c:	34a2      	adds	r4, #162	; 0xa2
   1098e:	4d1c      	ldr	r5, [pc, #112]	; (10a00 <servo_init+0xd0>)
   10990:	f841 5034 	str.w	r5, [r1, r4, lsl #3]
        NRF_PPI->CH[pwmN_ppi_ch_b[N]].TEP = (uint32_t)&NRF_GPIOTE->TASKS_SET[pwmN_gpiote_ch[N]];
   10994:	f5a5 35a0 	sub.w	r5, r5, #81920	; 0x14000
   10998:	f5a5 7592 	sub.w	r5, r5, #292	; 0x124
   1099c:	443d      	add	r5, r7
   1099e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   109a2:	604d      	str	r5, [r1, #4]
    } else {
        NRF_PPI->FORK[pwmN_ppi_ch_b[N-1]].TEP = (uint32_t)&NRF_GPIOTE->TASKS_SET[pwmN_gpiote_ch[N]];
    }
    NRF_PPI->CHENSET                      = (1 << pwmN_ppi_ch_a[N]) | (1 << pwmN_ppi_ch_b[N]);
   109a4:	2101      	movs	r1, #1
   109a6:	fa01 f303 	lsl.w	r3, r1, r3
   109aa:	4c13      	ldr	r4, [pc, #76]	; (109f8 <servo_init+0xc8>)
   109ac:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   109b0:	40a1      	lsls	r1, r4
   109b2:	430b      	orrs	r3, r1
   109b4:	4911      	ldr	r1, [pc, #68]	; (109fc <servo_init+0xcc>)
   109b6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504

    printk("Initializing servo %u on pin %i success!\n", N, servo_pin);
   109ba:	4601      	mov	r1, r0
   109bc:	4811      	ldr	r0, [pc, #68]	; (10a04 <servo_init+0xd4>)
   109be:	f010 f9d7 	bl	20d70 <printk>
}
   109c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        NRF_PPI->FORK[pwmN_ppi_ch_b[N-1]].TEP = (uint32_t)&NRF_GPIOTE->TASKS_SET[pwmN_gpiote_ch[N]];
   109c4:	4c10      	ldr	r4, [pc, #64]	; (10a08 <servo_init+0xd8>)
   109c6:	443c      	add	r4, r7
   109c8:	1e41      	subs	r1, r0, #1
   109ca:	4d0b      	ldr	r5, [pc, #44]	; (109f8 <servo_init+0xc8>)
   109cc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
   109d0:	f501 7111 	add.w	r1, r1, #580	; 0x244
   109d4:	4d09      	ldr	r5, [pc, #36]	; (109fc <servo_init+0xcc>)
   109d6:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
   109da:	e7e3      	b.n	109a4 <servo_init+0x74>
   109dc:	4770      	bx	lr
   109de:	bf00      	nop
   109e0:	00026140 	.word	0x00026140
   109e4:	40006000 	.word	0x40006000
   109e8:	00026170 	.word	0x00026170
   109ec:	4001a140 	.word	0x4001a140
   109f0:	00026150 	.word	0x00026150
   109f4:	40006060 	.word	0x40006060
   109f8:	00026160 	.word	0x00026160
   109fc:	4001f000 	.word	0x4001f000
   10a00:	4001a154 	.word	0x4001a154
   10a04:	00026100 	.word	0x00026100
   10a08:	40006030 	.word	0x40006030

00010a0c <raw_move_servo>:




void raw_move_servo(int N, uint32_t position)
{
   10a0c:	b508      	push	{r3, lr}
    if (N > 3)
   10a0e:	2803      	cmp	r0, #3
   10a10:	dc05      	bgt.n	10a1e <raw_move_servo+0x12>
    {
        printk("Invalid N, %u > 3", N);
        return;
    }
    if (position <= 0)
   10a12:	b149      	cbz	r1, 10a28 <raw_move_servo+0x1c>
    {
        position = 1;
    } else if (position >= TIMER_RELOAD)
   10a14:	4b09      	ldr	r3, [pc, #36]	; (10a3c <raw_move_servo+0x30>)
   10a16:	4299      	cmp	r1, r3
   10a18:	d907      	bls.n	10a2a <raw_move_servo+0x1e>
    {
        position = TIMER_RELOAD - 1;
   10a1a:	4908      	ldr	r1, [pc, #32]	; (10a3c <raw_move_servo+0x30>)
   10a1c:	e005      	b.n	10a2a <raw_move_servo+0x1e>
        printk("Invalid N, %u > 3", N);
   10a1e:	4601      	mov	r1, r0
   10a20:	4807      	ldr	r0, [pc, #28]	; (10a40 <raw_move_servo+0x34>)
   10a22:	f010 f9a5 	bl	20d70 <printk>
        return;
   10a26:	e008      	b.n	10a3a <raw_move_servo+0x2e>
        position = 1;
   10a28:	2101      	movs	r1, #1
    }
    NRF_TIMER3->CC[pwmN_timer_cc_num[N]] = position;
   10a2a:	4b06      	ldr	r3, [pc, #24]	; (10a44 <raw_move_servo+0x38>)
   10a2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   10a30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   10a34:	4a04      	ldr	r2, [pc, #16]	; (10a48 <raw_move_servo+0x3c>)
   10a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   10a3a:	bd08      	pop	{r3, pc}
   10a3c:	0004e1ff 	.word	0x0004e1ff
   10a40:	0002612c 	.word	0x0002612c
   10a44:	00026170 	.word	0x00026170
   10a48:	4001a000 	.word	0x4001a000

00010a4c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   10a4c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10a4e:	680b      	ldr	r3, [r1, #0]
   10a50:	3301      	adds	r3, #1
   10a52:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10a54:	4b01      	ldr	r3, [pc, #4]	; (10a5c <char_out+0x10>)
   10a56:	681b      	ldr	r3, [r3, #0]
   10a58:	4798      	blx	r3
}
   10a5a:	bd08      	pop	{r3, pc}
   10a5c:	20000410 	.word	0x20000410

00010a60 <__printk_hook_install>:
	_char_out = fn;
   10a60:	4b01      	ldr	r3, [pc, #4]	; (10a68 <__printk_hook_install+0x8>)
   10a62:	6018      	str	r0, [r3, #0]
}
   10a64:	4770      	bx	lr
   10a66:	bf00      	nop
   10a68:	20000410 	.word	0x20000410

00010a6c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   10a6c:	b500      	push	{lr}
   10a6e:	b083      	sub	sp, #12
   10a70:	4602      	mov	r2, r0
   10a72:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10a74:	2100      	movs	r1, #0
   10a76:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10a78:	a901      	add	r1, sp, #4
   10a7a:	4803      	ldr	r0, [pc, #12]	; (10a88 <vprintk+0x1c>)
   10a7c:	f000 f94e 	bl	10d1c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   10a80:	b003      	add	sp, #12
   10a82:	f85d fb04 	ldr.w	pc, [sp], #4
   10a86:	bf00      	nop
   10a88:	00010a4d 	.word	0x00010a4d

00010a8c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10a8c:	b510      	push	{r4, lr}
   10a8e:	b084      	sub	sp, #16
   10a90:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10a92:	9001      	str	r0, [sp, #4]
   10a94:	9102      	str	r1, [sp, #8]
   10a96:	2100      	movs	r1, #0
   10a98:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   10a9a:	a901      	add	r1, sp, #4
   10a9c:	4805      	ldr	r0, [pc, #20]	; (10ab4 <vsnprintk+0x28>)
   10a9e:	f000 f93d 	bl	10d1c <cbvprintf>

	if (ctx.count < ctx.max) {
   10aa2:	9b03      	ldr	r3, [sp, #12]
   10aa4:	9a02      	ldr	r2, [sp, #8]
   10aa6:	4293      	cmp	r3, r2
   10aa8:	da01      	bge.n	10aae <vsnprintk+0x22>
		str[ctx.count] = '\0';
   10aaa:	2200      	movs	r2, #0
   10aac:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   10aae:	9803      	ldr	r0, [sp, #12]
   10ab0:	b004      	add	sp, #16
   10ab2:	bd10      	pop	{r4, pc}
   10ab4:	00020d41 	.word	0x00020d41

00010ab8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10abc:	b083      	sub	sp, #12
   10abe:	4604      	mov	r4, r0
   10ac0:	4608      	mov	r0, r1
   10ac2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10ac4:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10ac6:	f013 0f08 	tst.w	r3, #8
   10aca:	d105      	bne.n	10ad8 <process_event+0x20>
   10acc:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   10ad0:	2300      	movs	r3, #0
   10ad2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   10ad4:	9301      	str	r3, [sp, #4]
}
   10ad6:	e069      	b.n	10bac <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   10ad8:	2901      	cmp	r1, #1
   10ada:	d009      	beq.n	10af0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10adc:	f043 0320 	orr.w	r3, r3, #32
   10ae0:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10ae2:	f385 8811 	msr	BASEPRI, r5
   10ae6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10aea:	b003      	add	sp, #12
   10aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10af0:	f043 0310 	orr.w	r3, r3, #16
   10af4:	8323      	strh	r3, [r4, #24]
   10af6:	e7f4      	b.n	10ae2 <process_event+0x2a>
			evt = process_recheck(mgr);
   10af8:	4620      	mov	r0, r4
   10afa:	f010 f97c 	bl	20df6 <process_recheck>
   10afe:	e057      	b.n	10bb0 <process_event+0xf8>
			res = mgr->last_res;
   10b00:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   10b04:	464a      	mov	r2, r9
   10b06:	4669      	mov	r1, sp
   10b08:	4620      	mov	r0, r4
   10b0a:	f010 f98d 	bl	20e28 <process_complete>
		onoff_transition_fn transit = NULL;
   10b0e:	2700      	movs	r7, #0
   10b10:	e05a      	b.n	10bc8 <process_event+0x110>
			transit = mgr->transitions->start;
   10b12:	6923      	ldr	r3, [r4, #16]
   10b14:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   10b16:	2106      	movs	r1, #6
   10b18:	4620      	mov	r0, r4
   10b1a:	f010 f945 	bl	20da8 <set_state>
		res = 0;
   10b1e:	f04f 0900 	mov.w	r9, #0
   10b22:	e051      	b.n	10bc8 <process_event+0x110>
			transit = mgr->transitions->stop;
   10b24:	6923      	ldr	r3, [r4, #16]
   10b26:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   10b28:	2104      	movs	r1, #4
   10b2a:	4620      	mov	r0, r4
   10b2c:	f010 f93c 	bl	20da8 <set_state>
		res = 0;
   10b30:	f04f 0900 	mov.w	r9, #0
   10b34:	e048      	b.n	10bc8 <process_event+0x110>
			transit = mgr->transitions->reset;
   10b36:	6923      	ldr	r3, [r4, #16]
   10b38:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   10b3a:	2105      	movs	r1, #5
   10b3c:	4620      	mov	r0, r4
   10b3e:	f010 f933 	bl	20da8 <set_state>
		res = 0;
   10b42:	f04f 0900 	mov.w	r9, #0
   10b46:	e03f      	b.n	10bc8 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   10b48:	2200      	movs	r2, #0
   10b4a:	e046      	b.n	10bda <process_event+0x122>
   10b4c:	2200      	movs	r2, #0
   10b4e:	e044      	b.n	10bda <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10b50:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   10b54:	8323      	strh	r3, [r4, #24]
   10b56:	f385 8811 	msr	BASEPRI, r5
   10b5a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10b5e:	2900      	cmp	r1, #0
   10b60:	d144      	bne.n	10bec <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10b62:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   10b64:	b12b      	cbz	r3, 10b72 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   10b66:	464b      	mov	r3, r9
   10b68:	4642      	mov	r2, r8
   10b6a:	4669      	mov	r1, sp
   10b6c:	4620      	mov	r0, r4
   10b6e:	f010 f9d1 	bl	20f14 <notify_all>
			if (transit != NULL) {
   10b72:	b117      	cbz	r7, 10b7a <process_event+0xc2>
				transit(mgr, transition_complete);
   10b74:	4925      	ldr	r1, [pc, #148]	; (10c0c <process_event+0x154>)
   10b76:	4620      	mov	r0, r4
   10b78:	47b8      	blx	r7
	__asm__ volatile(
   10b7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b7e:	f3ef 8511 	mrs	r5, BASEPRI
   10b82:	f383 8812 	msr	BASEPRI_MAX, r3
   10b86:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10b8a:	8b23      	ldrh	r3, [r4, #24]
   10b8c:	f023 0308 	bic.w	r3, r3, #8
   10b90:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10b92:	8b23      	ldrh	r3, [r4, #24]
   10b94:	f013 0f10 	tst.w	r3, #16
   10b98:	d02e      	beq.n	10bf8 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10b9a:	f023 0310 	bic.w	r3, r3, #16
   10b9e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10ba0:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10ba2:	8b26      	ldrh	r6, [r4, #24]
   10ba4:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   10ba8:	2800      	cmp	r0, #0
   10baa:	d09a      	beq.n	10ae2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   10bac:	2802      	cmp	r0, #2
   10bae:	d0a3      	beq.n	10af8 <process_event+0x40>
		if (evt == EVT_NOP) {
   10bb0:	2800      	cmp	r0, #0
   10bb2:	d096      	beq.n	10ae2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   10bb4:	2801      	cmp	r0, #1
   10bb6:	d0a3      	beq.n	10b00 <process_event+0x48>
		} else if (evt == EVT_START) {
   10bb8:	2803      	cmp	r0, #3
   10bba:	d0aa      	beq.n	10b12 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   10bbc:	2804      	cmp	r0, #4
   10bbe:	d0b1      	beq.n	10b24 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   10bc0:	2805      	cmp	r0, #5
   10bc2:	d0b8      	beq.n	10b36 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   10bc4:	2700      	movs	r7, #0
		res = 0;
   10bc6:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10bc8:	8b23      	ldrh	r3, [r4, #24]
   10bca:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10bce:	45b0      	cmp	r8, r6
   10bd0:	d0ba      	beq.n	10b48 <process_event+0x90>
   10bd2:	68a2      	ldr	r2, [r4, #8]
   10bd4:	2a00      	cmp	r2, #0
   10bd6:	d0b9      	beq.n	10b4c <process_event+0x94>
   10bd8:	2201      	movs	r2, #1
		if (do_monitors
   10bda:	4611      	mov	r1, r2
   10bdc:	2a00      	cmp	r2, #0
   10bde:	d1b7      	bne.n	10b50 <process_event+0x98>
   10be0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   10be2:	2a00      	cmp	r2, #0
   10be4:	d1b4      	bne.n	10b50 <process_event+0x98>
		    || (transit != NULL)) {
   10be6:	2f00      	cmp	r7, #0
   10be8:	d1b2      	bne.n	10b50 <process_event+0x98>
   10bea:	e7d2      	b.n	10b92 <process_event+0xda>
				notify_monitors(mgr, state, res);
   10bec:	464a      	mov	r2, r9
   10bee:	4641      	mov	r1, r8
   10bf0:	4620      	mov	r0, r4
   10bf2:	f010 f8e1 	bl	20db8 <notify_monitors>
   10bf6:	e7b4      	b.n	10b62 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10bf8:	f013 0f20 	tst.w	r3, #32
   10bfc:	d004      	beq.n	10c08 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10bfe:	f023 0320 	bic.w	r3, r3, #32
   10c02:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   10c04:	2002      	movs	r0, #2
   10c06:	e7cc      	b.n	10ba2 <process_event+0xea>
		evt = EVT_NOP;
   10c08:	2000      	movs	r0, #0
   10c0a:	e7ca      	b.n	10ba2 <process_event+0xea>
   10c0c:	00020f43 	.word	0x00020f43

00010c10 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   10c10:	b410      	push	{r4}
   10c12:	4604      	mov	r4, r0
	const char *sp = *str;
   10c14:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   10c16:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   10c18:	7813      	ldrb	r3, [r2, #0]
   10c1a:	4907      	ldr	r1, [pc, #28]	; (10c38 <extract_decimal+0x28>)
   10c1c:	5c59      	ldrb	r1, [r3, r1]
   10c1e:	f011 0f04 	tst.w	r1, #4
   10c22:	d006      	beq.n	10c32 <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
   10c24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10c28:	3201      	adds	r2, #1
   10c2a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   10c2e:	3830      	subs	r0, #48	; 0x30
   10c30:	e7f2      	b.n	10c18 <extract_decimal+0x8>
	}
	*str = sp;
   10c32:	6022      	str	r2, [r4, #0]
	return val;
}
   10c34:	bc10      	pop	{r4}
   10c36:	4770      	bx	lr
   10c38:	000281d9 	.word	0x000281d9

00010c3c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   10c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c40:	b083      	sub	sp, #12
   10c42:	4604      	mov	r4, r0
   10c44:	460d      	mov	r5, r1
   10c46:	9201      	str	r2, [sp, #4]
   10c48:	469a      	mov	sl, r3
   10c4a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   10c4e:	78d3      	ldrb	r3, [r2, #3]
   10c50:	4a31      	ldr	r2, [pc, #196]	; (10d18 <encode_uint+0xdc>)
   10c52:	f813 b002 	ldrb.w	fp, [r3, r2]
   10c56:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   10c5a:	2b6f      	cmp	r3, #111	; 0x6f
   10c5c:	d00f      	beq.n	10c7e <encode_uint+0x42>
   10c5e:	d906      	bls.n	10c6e <encode_uint+0x32>
   10c60:	2b70      	cmp	r3, #112	; 0x70
   10c62:	d00f      	beq.n	10c84 <encode_uint+0x48>
   10c64:	2b78      	cmp	r3, #120	; 0x78
   10c66:	d110      	bne.n	10c8a <encode_uint+0x4e>
		return 16;
   10c68:	f04f 0910 	mov.w	r9, #16
   10c6c:	e023      	b.n	10cb6 <encode_uint+0x7a>
	switch (specifier) {
   10c6e:	2b58      	cmp	r3, #88	; 0x58
   10c70:	d002      	beq.n	10c78 <encode_uint+0x3c>
   10c72:	f04f 090a 	mov.w	r9, #10
   10c76:	e01e      	b.n	10cb6 <encode_uint+0x7a>
		return 16;
   10c78:	f04f 0910 	mov.w	r9, #16
   10c7c:	e01b      	b.n	10cb6 <encode_uint+0x7a>
		return 8;
   10c7e:	f04f 0908 	mov.w	r9, #8
   10c82:	e018      	b.n	10cb6 <encode_uint+0x7a>
		return 16;
   10c84:	f04f 0910 	mov.w	r9, #16
   10c88:	e015      	b.n	10cb6 <encode_uint+0x7a>
	switch (specifier) {
   10c8a:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   10c8e:	e012      	b.n	10cb6 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   10c90:	b2d2      	uxtb	r2, r2
   10c92:	3230      	adds	r2, #48	; 0x30
   10c94:	b2d2      	uxtb	r2, r2
   10c96:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   10c9a:	4632      	mov	r2, r6
   10c9c:	463b      	mov	r3, r7
   10c9e:	4620      	mov	r0, r4
   10ca0:	4629      	mov	r1, r5
   10ca2:	f7ef fe23 	bl	8ec <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   10ca6:	42bd      	cmp	r5, r7
   10ca8:	bf08      	it	eq
   10caa:	42b4      	cmpeq	r4, r6
   10cac:	d318      	bcc.n	10ce0 <encode_uint+0xa4>
   10cae:	45d0      	cmp	r8, sl
   10cb0:	d916      	bls.n	10ce0 <encode_uint+0xa4>
		value /= radix;
   10cb2:	4604      	mov	r4, r0
   10cb4:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   10cb6:	464e      	mov	r6, r9
   10cb8:	2700      	movs	r7, #0
   10cba:	464a      	mov	r2, r9
   10cbc:	463b      	mov	r3, r7
   10cbe:	4620      	mov	r0, r4
   10cc0:	4629      	mov	r1, r5
   10cc2:	f7ef fe13 	bl	8ec <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10cc6:	2a09      	cmp	r2, #9
   10cc8:	d9e2      	bls.n	10c90 <encode_uint+0x54>
   10cca:	f1bb 0f01 	cmp.w	fp, #1
   10cce:	d003      	beq.n	10cd8 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10cd0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10cd2:	3257      	adds	r2, #87	; 0x57
   10cd4:	b2d2      	uxtb	r2, r2
   10cd6:	e7de      	b.n	10c96 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10cd8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10cda:	3237      	adds	r2, #55	; 0x37
   10cdc:	b2d2      	uxtb	r2, r2
   10cde:	e7da      	b.n	10c96 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   10ce0:	9b01      	ldr	r3, [sp, #4]
   10ce2:	781b      	ldrb	r3, [r3, #0]
   10ce4:	f013 0f20 	tst.w	r3, #32
   10ce8:	d005      	beq.n	10cf6 <encode_uint+0xba>
		if (radix == 8) {
   10cea:	f1b9 0f08 	cmp.w	r9, #8
   10cee:	d006      	beq.n	10cfe <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   10cf0:	f1b9 0f10 	cmp.w	r9, #16
   10cf4:	d009      	beq.n	10d0a <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   10cf6:	4640      	mov	r0, r8
   10cf8:	b003      	add	sp, #12
   10cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   10cfe:	9a01      	ldr	r2, [sp, #4]
   10d00:	7893      	ldrb	r3, [r2, #2]
   10d02:	f043 0308 	orr.w	r3, r3, #8
   10d06:	7093      	strb	r3, [r2, #2]
   10d08:	e7f5      	b.n	10cf6 <encode_uint+0xba>
			conv->altform_0c = true;
   10d0a:	9a01      	ldr	r2, [sp, #4]
   10d0c:	7893      	ldrb	r3, [r2, #2]
   10d0e:	f043 0310 	orr.w	r3, r3, #16
   10d12:	7093      	strb	r3, [r2, #2]
   10d14:	e7ef      	b.n	10cf6 <encode_uint+0xba>
   10d16:	bf00      	nop
   10d18:	000281d9 	.word	0x000281d9

00010d1c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d20:	b093      	sub	sp, #76	; 0x4c
   10d22:	4606      	mov	r6, r0
   10d24:	460d      	mov	r5, r1
   10d26:	4692      	mov	sl, r2
   10d28:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10d2a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10d2c:	f89a 0000 	ldrb.w	r0, [sl]
   10d30:	2800      	cmp	r0, #0
   10d32:	f000 84d6 	beq.w	116e2 <cbvprintf+0x9c6>
		if (*fp != '%') {
   10d36:	2825      	cmp	r0, #37	; 0x25
   10d38:	d008      	beq.n	10d4c <cbvprintf+0x30>
			OUTC(*fp++);
   10d3a:	f10a 0a01 	add.w	sl, sl, #1
   10d3e:	4629      	mov	r1, r5
   10d40:	47b0      	blx	r6
   10d42:	2800      	cmp	r0, #0
   10d44:	f2c0 84ce 	blt.w	116e4 <cbvprintf+0x9c8>
   10d48:	3401      	adds	r4, #1
			continue;
   10d4a:	e7ef      	b.n	10d2c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   10d4c:	2300      	movs	r3, #0
   10d4e:	9306      	str	r3, [sp, #24]
   10d50:	9307      	str	r3, [sp, #28]
   10d52:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   10d54:	9308      	str	r3, [sp, #32]
   10d56:	9309      	str	r3, [sp, #36]	; 0x24
   10d58:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   10d5a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   10d5e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10d62:	2b25      	cmp	r3, #37	; 0x25
   10d64:	d001      	beq.n	10d6a <cbvprintf+0x4e>
	bool loop = true;
   10d66:	2701      	movs	r7, #1
   10d68:	e02c      	b.n	10dc4 <cbvprintf+0xa8>
		conv->specifier = *sp++;
   10d6a:	f10a 0802 	add.w	r8, sl, #2
   10d6e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   10d72:	e1a8      	b.n	110c6 <cbvprintf+0x3aa>
			conv->flag_dash = true;
   10d74:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10d78:	f043 0304 	orr.w	r3, r3, #4
   10d7c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   10d80:	b1ff      	cbz	r7, 10dc2 <cbvprintf+0xa6>
			++sp;
   10d82:	f108 0801 	add.w	r8, r8, #1
   10d86:	e01c      	b.n	10dc2 <cbvprintf+0xa6>
			conv->flag_plus = true;
   10d88:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10d8c:	f043 0308 	orr.w	r3, r3, #8
   10d90:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10d94:	e7f4      	b.n	10d80 <cbvprintf+0x64>
			conv->flag_space = true;
   10d96:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10d9a:	f043 0310 	orr.w	r3, r3, #16
   10d9e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10da2:	e7ed      	b.n	10d80 <cbvprintf+0x64>
			conv->flag_hash = true;
   10da4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10da8:	f043 0320 	orr.w	r3, r3, #32
   10dac:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10db0:	e7e6      	b.n	10d80 <cbvprintf+0x64>
			conv->flag_zero = true;
   10db2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dba:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10dbe:	e7df      	b.n	10d80 <cbvprintf+0x64>
		switch (*sp) {
   10dc0:	2700      	movs	r7, #0
	} while (loop);
   10dc2:	b34f      	cbz	r7, 10e18 <cbvprintf+0xfc>
		switch (*sp) {
   10dc4:	f898 3000 	ldrb.w	r3, [r8]
   10dc8:	3b20      	subs	r3, #32
   10dca:	2b10      	cmp	r3, #16
   10dcc:	d8f8      	bhi.n	10dc0 <cbvprintf+0xa4>
   10dce:	a201      	add	r2, pc, #4	; (adr r2, 10dd4 <cbvprintf+0xb8>)
   10dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10dd4:	00010d97 	.word	0x00010d97
   10dd8:	00010dc1 	.word	0x00010dc1
   10ddc:	00010dc1 	.word	0x00010dc1
   10de0:	00010da5 	.word	0x00010da5
   10de4:	00010dc1 	.word	0x00010dc1
   10de8:	00010dc1 	.word	0x00010dc1
   10dec:	00010dc1 	.word	0x00010dc1
   10df0:	00010dc1 	.word	0x00010dc1
   10df4:	00010dc1 	.word	0x00010dc1
   10df8:	00010dc1 	.word	0x00010dc1
   10dfc:	00010dc1 	.word	0x00010dc1
   10e00:	00010d89 	.word	0x00010d89
   10e04:	00010dc1 	.word	0x00010dc1
   10e08:	00010d75 	.word	0x00010d75
   10e0c:	00010dc1 	.word	0x00010dc1
   10e10:	00010dc1 	.word	0x00010dc1
   10e14:	00010db3 	.word	0x00010db3
	if (conv->flag_zero && conv->flag_dash) {
   10e18:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e1c:	f003 0344 	and.w	r3, r3, #68	; 0x44
   10e20:	2b44      	cmp	r3, #68	; 0x44
   10e22:	d06d      	beq.n	10f00 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   10e24:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   10e28:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e30:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   10e34:	f898 3000 	ldrb.w	r3, [r8]
   10e38:	2b2a      	cmp	r3, #42	; 0x2a
   10e3a:	d068      	beq.n	10f0e <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   10e3c:	a805      	add	r0, sp, #20
   10e3e:	f7ff fee7 	bl	10c10 <extract_decimal>
	if (sp != wp) {
   10e42:	9b05      	ldr	r3, [sp, #20]
   10e44:	4598      	cmp	r8, r3
   10e46:	d012      	beq.n	10e6e <cbvprintf+0x152>
		conv->width_present = true;
   10e48:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e50:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   10e54:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   10e56:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   10e5a:	2800      	cmp	r0, #0
   10e5c:	db60      	blt.n	10f20 <cbvprintf+0x204>
   10e5e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   10e60:	4313      	orrs	r3, r2
   10e62:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10e66:	f363 0241 	bfi	r2, r3, #1, #1
   10e6a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   10e6e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   10e70:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   10e72:	781b      	ldrb	r3, [r3, #0]
   10e74:	2b2e      	cmp	r3, #46	; 0x2e
   10e76:	bf14      	ite	ne
   10e78:	2300      	movne	r3, #0
   10e7a:	2301      	moveq	r3, #1
   10e7c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   10e80:	f363 0241 	bfi	r2, r3, #1, #1
   10e84:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   10e88:	2b00      	cmp	r3, #0
   10e8a:	d04b      	beq.n	10f24 <cbvprintf+0x208>
	++sp;
   10e8c:	9b05      	ldr	r3, [sp, #20]
   10e8e:	1c5a      	adds	r2, r3, #1
   10e90:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   10e92:	785b      	ldrb	r3, [r3, #1]
   10e94:	2b2a      	cmp	r3, #42	; 0x2a
   10e96:	d048      	beq.n	10f2a <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   10e98:	a805      	add	r0, sp, #20
   10e9a:	f7ff feb9 	bl	10c10 <extract_decimal>
	conv->prec_value = prec;
   10e9e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   10ea0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10ea4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   10ea8:	2800      	cmp	r0, #0
   10eaa:	db47      	blt.n	10f3c <cbvprintf+0x220>
   10eac:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   10eae:	4313      	orrs	r3, r2
   10eb0:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10eb4:	f363 0241 	bfi	r2, r3, #1, #1
   10eb8:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   10ebc:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   10ec0:	f898 3000 	ldrb.w	r3, [r8]
   10ec4:	3b4c      	subs	r3, #76	; 0x4c
   10ec6:	2b2e      	cmp	r3, #46	; 0x2e
   10ec8:	f200 80dc 	bhi.w	11084 <cbvprintf+0x368>
   10ecc:	e8df f003 	tbb	[pc, r3]
   10ed0:	dadadaca 	.word	0xdadadaca
   10ed4:	dadadada 	.word	0xdadadada
   10ed8:	dadadada 	.word	0xdadadada
   10edc:	dadadada 	.word	0xdadadada
   10ee0:	dadadada 	.word	0xdadadada
   10ee4:	dadadada 	.word	0xdadadada
   10ee8:	dadadada 	.word	0xdadadada
   10eec:	da6ada38 	.word	0xda6ada38
   10ef0:	dadada51 	.word	0xdadada51
   10ef4:	dadadada 	.word	0xdadadada
   10ef8:	dadadac0 	.word	0xdadadac0
   10efc:	dada      	.short	0xdada
   10efe:	b6          	.byte	0xb6
   10eff:	00          	.byte	0x00
		conv->flag_zero = false;
   10f00:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10f04:	f36f 1386 	bfc	r3, #6, #1
   10f08:	f88d 3020 	strb.w	r3, [sp, #32]
   10f0c:	e78a      	b.n	10e24 <cbvprintf+0x108>
		conv->width_star = true;
   10f0e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f12:	f043 0301 	orr.w	r3, r3, #1
   10f16:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   10f1a:	4643      	mov	r3, r8
   10f1c:	3301      	adds	r3, #1
   10f1e:	e7a7      	b.n	10e70 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   10f20:	2201      	movs	r2, #1
   10f22:	e79d      	b.n	10e60 <cbvprintf+0x144>
		return sp;
   10f24:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10f28:	e7ca      	b.n	10ec0 <cbvprintf+0x1a4>
		conv->prec_star = true;
   10f2a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f2e:	f043 0304 	orr.w	r3, r3, #4
   10f32:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   10f36:	f102 0801 	add.w	r8, r2, #1
   10f3a:	e7c1      	b.n	10ec0 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   10f3c:	2201      	movs	r2, #1
   10f3e:	e7b6      	b.n	10eae <cbvprintf+0x192>
		if (*++sp == 'h') {
   10f40:	f108 0201 	add.w	r2, r8, #1
   10f44:	f898 3001 	ldrb.w	r3, [r8, #1]
   10f48:	2b68      	cmp	r3, #104	; 0x68
   10f4a:	d008      	beq.n	10f5e <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   10f4c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f50:	2102      	movs	r1, #2
   10f52:	f361 03c6 	bfi	r3, r1, #3, #4
   10f56:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   10f5a:	4690      	mov	r8, r2
   10f5c:	e02b      	b.n	10fb6 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   10f5e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f62:	2201      	movs	r2, #1
   10f64:	f362 03c6 	bfi	r3, r2, #3, #4
   10f68:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   10f6c:	f108 0802 	add.w	r8, r8, #2
   10f70:	e021      	b.n	10fb6 <cbvprintf+0x29a>
		if (*++sp == 'l') {
   10f72:	f108 0201 	add.w	r2, r8, #1
   10f76:	f898 3001 	ldrb.w	r3, [r8, #1]
   10f7a:	2b6c      	cmp	r3, #108	; 0x6c
   10f7c:	d008      	beq.n	10f90 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   10f7e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f82:	2103      	movs	r1, #3
   10f84:	f361 03c6 	bfi	r3, r1, #3, #4
   10f88:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   10f8c:	4690      	mov	r8, r2
   10f8e:	e012      	b.n	10fb6 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   10f90:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10f94:	2204      	movs	r2, #4
   10f96:	f362 03c6 	bfi	r3, r2, #3, #4
   10f9a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   10f9e:	f108 0802 	add.w	r8, r8, #2
   10fa2:	e008      	b.n	10fb6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   10fa4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10fa8:	2205      	movs	r2, #5
   10faa:	f362 03c6 	bfi	r3, r2, #3, #4
   10fae:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10fb2:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   10fb6:	f818 3b01 	ldrb.w	r3, [r8], #1
   10fba:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   10fbe:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   10fc2:	2a37      	cmp	r2, #55	; 0x37
   10fc4:	f200 8150 	bhi.w	11268 <cbvprintf+0x54c>
   10fc8:	e8df f012 	tbh	[pc, r2, lsl #1]
   10fcc:	014e0126 	.word	0x014e0126
   10fd0:	014e014e 	.word	0x014e014e
   10fd4:	01260126 	.word	0x01260126
   10fd8:	014e0126 	.word	0x014e0126
   10fdc:	014e014e 	.word	0x014e014e
   10fe0:	014e014e 	.word	0x014e014e
   10fe4:	014e014e 	.word	0x014e014e
   10fe8:	014e014e 	.word	0x014e014e
   10fec:	014e014e 	.word	0x014e014e
   10ff0:	014e014e 	.word	0x014e014e
   10ff4:	014e014e 	.word	0x014e014e
   10ff8:	0113014e 	.word	0x0113014e
   10ffc:	014e014e 	.word	0x014e014e
   11000:	014e014e 	.word	0x014e014e
   11004:	014e014e 	.word	0x014e014e
   11008:	014e014e 	.word	0x014e014e
   1100c:	014e0126 	.word	0x014e0126
   11010:	00630113 	.word	0x00630113
   11014:	01260126 	.word	0x01260126
   11018:	014e0126 	.word	0x014e0126
   1101c:	014e0063 	.word	0x014e0063
   11020:	014e014e 	.word	0x014e014e
   11024:	012f014e 	.word	0x012f014e
   11028:	013f0113 	.word	0x013f0113
   1102c:	014e014e 	.word	0x014e014e
   11030:	014e013f 	.word	0x014e013f
   11034:	014e0113 	.word	0x014e0113
   11038:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   1103c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11040:	2206      	movs	r2, #6
   11042:	f362 03c6 	bfi	r3, r2, #3, #4
   11046:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1104a:	f108 0801 	add.w	r8, r8, #1
		break;
   1104e:	e7b2      	b.n	10fb6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   11050:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11054:	2207      	movs	r2, #7
   11056:	f362 03c6 	bfi	r3, r2, #3, #4
   1105a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1105e:	f108 0801 	add.w	r8, r8, #1
		break;
   11062:	e7a8      	b.n	10fb6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   11064:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11068:	2208      	movs	r2, #8
   1106a:	f362 03c6 	bfi	r3, r2, #3, #4
   1106e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   11072:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   11076:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1107a:	f043 0302 	orr.w	r3, r3, #2
   1107e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   11082:	e798      	b.n	10fb6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   11084:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11088:	f36f 03c6 	bfc	r3, #3, #4
   1108c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   11090:	e791      	b.n	10fb6 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   11092:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   11096:	2101      	movs	r1, #1
   11098:	f361 0202 	bfi	r2, r1, #0, #3
   1109c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   110a0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   110a4:	f002 0278 	and.w	r2, r2, #120	; 0x78
   110a8:	2a40      	cmp	r2, #64	; 0x40
   110aa:	f000 80aa 	beq.w	11202 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   110ae:	2b63      	cmp	r3, #99	; 0x63
   110b0:	f000 80ae 	beq.w	11210 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   110b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   110b8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   110bc:	4317      	orrs	r7, r2
   110be:	f367 0341 	bfi	r3, r7, #1, #1
   110c2:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   110c6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   110ca:	f013 0f01 	tst.w	r3, #1
   110ce:	f000 80da 	beq.w	11286 <cbvprintf+0x56a>
			width = va_arg(ap, int);
   110d2:	9b03      	ldr	r3, [sp, #12]
   110d4:	1d1a      	adds	r2, r3, #4
   110d6:	9203      	str	r2, [sp, #12]
   110d8:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   110da:	2f00      	cmp	r7, #0
   110dc:	f2c0 80cb 	blt.w	11276 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   110e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   110e4:	f013 0f04 	tst.w	r3, #4
   110e8:	f000 80df 	beq.w	112aa <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   110ec:	9b03      	ldr	r3, [sp, #12]
   110ee:	1d1a      	adds	r2, r3, #4
   110f0:	9203      	str	r2, [sp, #12]
   110f2:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   110f6:	f1bb 0f00 	cmp.w	fp, #0
   110fa:	f2c0 80cd 	blt.w	11298 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   110fe:	2300      	movs	r3, #0
   11100:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   11102:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   11104:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11108:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   1110c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   11110:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   11114:	2b01      	cmp	r3, #1
   11116:	f000 80d1 	beq.w	112bc <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   1111a:	2b02      	cmp	r3, #2
   1111c:	f000 8116 	beq.w	1134c <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   11120:	2b04      	cmp	r3, #4
   11122:	f000 8167 	beq.w	113f4 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   11126:	2b03      	cmp	r3, #3
   11128:	f000 817e 	beq.w	11428 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   1112c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   11130:	f019 0303 	ands.w	r3, r9, #3
   11134:	9302      	str	r3, [sp, #8]
   11136:	f040 817d 	bne.w	11434 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   1113a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1113e:	3b25      	subs	r3, #37	; 0x25
   11140:	2b53      	cmp	r3, #83	; 0x53
   11142:	f200 8233 	bhi.w	115ac <cbvprintf+0x890>
   11146:	e8df f013 	tbh	[pc, r3, lsl #1]
   1114a:	0181      	.short	0x0181
   1114c:	02310231 	.word	0x02310231
   11150:	02310231 	.word	0x02310231
   11154:	02310231 	.word	0x02310231
   11158:	02310231 	.word	0x02310231
   1115c:	02310231 	.word	0x02310231
   11160:	02310231 	.word	0x02310231
   11164:	02310231 	.word	0x02310231
   11168:	02310231 	.word	0x02310231
   1116c:	02310231 	.word	0x02310231
   11170:	02310231 	.word	0x02310231
   11174:	02310231 	.word	0x02310231
   11178:	02310231 	.word	0x02310231
   1117c:	02310231 	.word	0x02310231
   11180:	02310231 	.word	0x02310231
   11184:	02310231 	.word	0x02310231
   11188:	02310231 	.word	0x02310231
   1118c:	02310231 	.word	0x02310231
   11190:	02310231 	.word	0x02310231
   11194:	02310231 	.word	0x02310231
   11198:	02310231 	.word	0x02310231
   1119c:	02310231 	.word	0x02310231
   111a0:	02310231 	.word	0x02310231
   111a4:	02310231 	.word	0x02310231
   111a8:	02310231 	.word	0x02310231
   111ac:	02310231 	.word	0x02310231
   111b0:	023101c7 	.word	0x023101c7
   111b4:	02310231 	.word	0x02310231
   111b8:	02310231 	.word	0x02310231
   111bc:	02310231 	.word	0x02310231
   111c0:	02310231 	.word	0x02310231
   111c4:	01a10231 	.word	0x01a10231
   111c8:	023101ab 	.word	0x023101ab
   111cc:	02310231 	.word	0x02310231
   111d0:	01ab0231 	.word	0x01ab0231
   111d4:	02310231 	.word	0x02310231
   111d8:	02310231 	.word	0x02310231
   111dc:	01c70208 	.word	0x01c70208
   111e0:	023101ea 	.word	0x023101ea
   111e4:	018f0231 	.word	0x018f0231
   111e8:	01c70231 	.word	0x01c70231
   111ec:	02310231 	.word	0x02310231
   111f0:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   111f2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   111f6:	2102      	movs	r1, #2
   111f8:	f361 0202 	bfi	r2, r1, #0, #3
   111fc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   11200:	e74e      	b.n	110a0 <cbvprintf+0x384>
			conv->invalid = true;
   11202:	f89d 1020 	ldrb.w	r1, [sp, #32]
   11206:	f041 0101 	orr.w	r1, r1, #1
   1120a:	f88d 1020 	strb.w	r1, [sp, #32]
   1120e:	e74e      	b.n	110ae <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11210:	1e17      	subs	r7, r2, #0
   11212:	bf18      	it	ne
   11214:	2701      	movne	r7, #1
   11216:	e74d      	b.n	110b4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   11218:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1121c:	2204      	movs	r2, #4
   1121e:	f362 0302 	bfi	r3, r2, #0, #3
   11222:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   11226:	2701      	movs	r7, #1
			break;
   11228:	e744      	b.n	110b4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   1122a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1122e:	2203      	movs	r2, #3
   11230:	f362 0302 	bfi	r3, r2, #0, #3
   11234:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   11238:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1123c:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11240:	2b40      	cmp	r3, #64	; 0x40
   11242:	f47f af37 	bne.w	110b4 <cbvprintf+0x398>
			unsupported = true;
   11246:	2701      	movs	r7, #1
   11248:	e734      	b.n	110b4 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   1124a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1124e:	2203      	movs	r2, #3
   11250:	f362 0302 	bfi	r3, r2, #0, #3
   11254:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   11258:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1125c:	f013 0f78 	tst.w	r3, #120	; 0x78
   11260:	f43f af28 	beq.w	110b4 <cbvprintf+0x398>
			unsupported = true;
   11264:	2701      	movs	r7, #1
   11266:	e725      	b.n	110b4 <cbvprintf+0x398>
		conv->invalid = true;
   11268:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1126c:	f043 0301 	orr.w	r3, r3, #1
   11270:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   11274:	e71e      	b.n	110b4 <cbvprintf+0x398>
				conv->flag_dash = true;
   11276:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1127a:	f043 0304 	orr.w	r3, r3, #4
   1127e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   11282:	427f      	negs	r7, r7
   11284:	e72c      	b.n	110e0 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   11286:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   1128a:	2b00      	cmp	r3, #0
   1128c:	db02      	blt.n	11294 <cbvprintf+0x578>
		int width = -1;
   1128e:	f04f 37ff 	mov.w	r7, #4294967295
   11292:	e725      	b.n	110e0 <cbvprintf+0x3c4>
			width = conv->width_value;
   11294:	9f09      	ldr	r7, [sp, #36]	; 0x24
   11296:	e723      	b.n	110e0 <cbvprintf+0x3c4>
				conv->prec_present = false;
   11298:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1129c:	f36f 0341 	bfc	r3, #1, #1
   112a0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   112a4:	f04f 3bff 	mov.w	fp, #4294967295
   112a8:	e729      	b.n	110fe <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   112aa:	f013 0f02 	tst.w	r3, #2
   112ae:	d002      	beq.n	112b6 <cbvprintf+0x59a>
			precision = conv->prec_value;
   112b0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   112b4:	e723      	b.n	110fe <cbvprintf+0x3e2>
		int precision = -1;
   112b6:	f04f 3bff 	mov.w	fp, #4294967295
   112ba:	e720      	b.n	110fe <cbvprintf+0x3e2>
			switch (length_mod) {
   112bc:	1ecb      	subs	r3, r1, #3
   112be:	2b04      	cmp	r3, #4
   112c0:	d804      	bhi.n	112cc <cbvprintf+0x5b0>
   112c2:	e8df f003 	tbb	[pc, r3]
   112c6:	1d0b      	.short	0x1d0b
   112c8:	3529      	.short	0x3529
   112ca:	35          	.byte	0x35
   112cb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   112cc:	9b03      	ldr	r3, [sp, #12]
   112ce:	1d1a      	adds	r2, r3, #4
   112d0:	9203      	str	r2, [sp, #12]
   112d2:	681a      	ldr	r2, [r3, #0]
   112d4:	17d3      	asrs	r3, r2, #31
   112d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   112da:	e006      	b.n	112ea <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   112dc:	9b03      	ldr	r3, [sp, #12]
   112de:	1d1a      	adds	r2, r3, #4
   112e0:	9203      	str	r2, [sp, #12]
   112e2:	681a      	ldr	r2, [r3, #0]
   112e4:	17d3      	asrs	r3, r2, #31
   112e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   112ea:	2901      	cmp	r1, #1
   112ec:	d028      	beq.n	11340 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   112ee:	2902      	cmp	r1, #2
   112f0:	f47f af1c 	bne.w	1112c <cbvprintf+0x410>
				value->sint = (short)value->sint;
   112f4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   112f8:	17d3      	asrs	r3, r2, #31
   112fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   112fe:	e715      	b.n	1112c <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   11300:	9b03      	ldr	r3, [sp, #12]
   11302:	3307      	adds	r3, #7
   11304:	f023 0307 	bic.w	r3, r3, #7
   11308:	f103 0208 	add.w	r2, r3, #8
   1130c:	9203      	str	r2, [sp, #12]
   1130e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   11312:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11316:	e7e8      	b.n	112ea <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   11318:	9b03      	ldr	r3, [sp, #12]
   1131a:	3307      	adds	r3, #7
   1131c:	f023 0307 	bic.w	r3, r3, #7
   11320:	f103 0208 	add.w	r2, r3, #8
   11324:	9203      	str	r2, [sp, #12]
   11326:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1132a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1132e:	e7dc      	b.n	112ea <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11330:	9b03      	ldr	r3, [sp, #12]
   11332:	1d1a      	adds	r2, r3, #4
   11334:	9203      	str	r2, [sp, #12]
   11336:	681a      	ldr	r2, [r3, #0]
   11338:	17d3      	asrs	r3, r2, #31
				value->sint =
   1133a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1133e:	e7d4      	b.n	112ea <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   11340:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11344:	9306      	str	r3, [sp, #24]
   11346:	2300      	movs	r3, #0
   11348:	9307      	str	r3, [sp, #28]
   1134a:	e6ef      	b.n	1112c <cbvprintf+0x410>
			switch (length_mod) {
   1134c:	1ecb      	subs	r3, r1, #3
   1134e:	2b04      	cmp	r3, #4
   11350:	d804      	bhi.n	1135c <cbvprintf+0x640>
   11352:	e8df f003 	tbb	[pc, r3]
   11356:	1f0b      	.short	0x1f0b
   11358:	4135      	.short	0x4135
   1135a:	41          	.byte	0x41
   1135b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   1135c:	9b03      	ldr	r3, [sp, #12]
   1135e:	1d1a      	adds	r2, r3, #4
   11360:	9203      	str	r2, [sp, #12]
   11362:	681b      	ldr	r3, [r3, #0]
   11364:	9306      	str	r3, [sp, #24]
   11366:	2300      	movs	r3, #0
   11368:	9307      	str	r3, [sp, #28]
				break;
   1136a:	e01e      	b.n	113aa <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   1136c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   11370:	2b63      	cmp	r3, #99	; 0x63
   11372:	d007      	beq.n	11384 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   11374:	9b03      	ldr	r3, [sp, #12]
   11376:	1d1a      	adds	r2, r3, #4
   11378:	9203      	str	r2, [sp, #12]
   1137a:	681b      	ldr	r3, [r3, #0]
   1137c:	9306      	str	r3, [sp, #24]
   1137e:	2300      	movs	r3, #0
   11380:	9307      	str	r3, [sp, #28]
   11382:	e012      	b.n	113aa <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   11384:	9b03      	ldr	r3, [sp, #12]
   11386:	1d1a      	adds	r2, r3, #4
   11388:	9203      	str	r2, [sp, #12]
   1138a:	681b      	ldr	r3, [r3, #0]
   1138c:	9306      	str	r3, [sp, #24]
   1138e:	2300      	movs	r3, #0
   11390:	9307      	str	r3, [sp, #28]
   11392:	e00a      	b.n	113aa <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   11394:	9b03      	ldr	r3, [sp, #12]
   11396:	3307      	adds	r3, #7
   11398:	f023 0307 	bic.w	r3, r3, #7
   1139c:	f103 0208 	add.w	r2, r3, #8
   113a0:	9203      	str	r2, [sp, #12]
   113a2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   113a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   113aa:	2901      	cmp	r1, #1
   113ac:	d01c      	beq.n	113e8 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   113ae:	2902      	cmp	r1, #2
   113b0:	f47f aebc 	bne.w	1112c <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   113b4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   113b8:	9306      	str	r3, [sp, #24]
   113ba:	2300      	movs	r3, #0
   113bc:	9307      	str	r3, [sp, #28]
   113be:	e6b5      	b.n	1112c <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   113c0:	9b03      	ldr	r3, [sp, #12]
   113c2:	3307      	adds	r3, #7
   113c4:	f023 0307 	bic.w	r3, r3, #7
   113c8:	f103 0208 	add.w	r2, r3, #8
   113cc:	9203      	str	r2, [sp, #12]
   113ce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   113d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   113d6:	e7e8      	b.n	113aa <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   113d8:	9b03      	ldr	r3, [sp, #12]
   113da:	1d1a      	adds	r2, r3, #4
   113dc:	9203      	str	r2, [sp, #12]
   113de:	681b      	ldr	r3, [r3, #0]
				value->uint =
   113e0:	9306      	str	r3, [sp, #24]
   113e2:	2300      	movs	r3, #0
   113e4:	9307      	str	r3, [sp, #28]
				break;
   113e6:	e7e0      	b.n	113aa <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   113e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   113ec:	9306      	str	r3, [sp, #24]
   113ee:	2300      	movs	r3, #0
   113f0:	9307      	str	r3, [sp, #28]
   113f2:	e69b      	b.n	1112c <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   113f4:	2908      	cmp	r1, #8
   113f6:	d00b      	beq.n	11410 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   113f8:	9b03      	ldr	r3, [sp, #12]
   113fa:	3307      	adds	r3, #7
   113fc:	f023 0307 	bic.w	r3, r3, #7
   11400:	f103 0208 	add.w	r2, r3, #8
   11404:	9203      	str	r2, [sp, #12]
   11406:	e9d3 2300 	ldrd	r2, r3, [r3]
   1140a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1140e:	e68d      	b.n	1112c <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   11410:	9b03      	ldr	r3, [sp, #12]
   11412:	3307      	adds	r3, #7
   11414:	f023 0307 	bic.w	r3, r3, #7
   11418:	f103 0208 	add.w	r2, r3, #8
   1141c:	9203      	str	r2, [sp, #12]
   1141e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11422:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11426:	e681      	b.n	1112c <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   11428:	9b03      	ldr	r3, [sp, #12]
   1142a:	1d1a      	adds	r2, r3, #4
   1142c:	9203      	str	r2, [sp, #12]
   1142e:	681b      	ldr	r3, [r3, #0]
   11430:	9306      	str	r3, [sp, #24]
   11432:	e67b      	b.n	1112c <cbvprintf+0x410>
			OUTS(sp, fp);
   11434:	4643      	mov	r3, r8
   11436:	4652      	mov	r2, sl
   11438:	4629      	mov	r1, r5
   1143a:	4630      	mov	r0, r6
   1143c:	f00f fffa 	bl	21434 <outs>
   11440:	2800      	cmp	r0, #0
   11442:	f2c0 814f 	blt.w	116e4 <cbvprintf+0x9c8>
   11446:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   11448:	46c2      	mov	sl, r8
			continue;
   1144a:	e46f      	b.n	10d2c <cbvprintf+0x10>
		case '%':
			OUTC('%');
   1144c:	4629      	mov	r1, r5
   1144e:	2025      	movs	r0, #37	; 0x25
   11450:	47b0      	blx	r6
   11452:	2800      	cmp	r0, #0
   11454:	f2c0 8146 	blt.w	116e4 <cbvprintf+0x9c8>
   11458:	3401      	adds	r4, #1
		char sign = 0;
   1145a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1145e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   11462:	f04f 0a00 	mov.w	sl, #0
			break;
   11466:	e0a7      	b.n	115b8 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   11468:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   1146c:	f1bb 0f00 	cmp.w	fp, #0
   11470:	db08      	blt.n	11484 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   11472:	4659      	mov	r1, fp
   11474:	4650      	mov	r0, sl
   11476:	f014 faf1 	bl	25a5c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   1147a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   1147e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   11482:	e099      	b.n	115b8 <cbvprintf+0x89c>
				len = strlen(bps);
   11484:	4650      	mov	r0, sl
   11486:	f7fb faeb 	bl	ca60 <strlen>
   1148a:	e7f6      	b.n	1147a <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1148c:	9b06      	ldr	r3, [sp, #24]
   1148e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   11492:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   11496:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   1149a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   1149e:	e08b      	b.n	115b8 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   114a0:	f019 0f08 	tst.w	r9, #8
   114a4:	d105      	bne.n	114b2 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   114a6:	f019 0910 	ands.w	r9, r9, #16
   114aa:	d004      	beq.n	114b6 <cbvprintf+0x79a>
				sign = ' ';
   114ac:	f04f 0920 	mov.w	r9, #32
   114b0:	e001      	b.n	114b6 <cbvprintf+0x79a>
				sign = '+';
   114b2:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   114b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   114ba:	2a00      	cmp	r2, #0
   114bc:	f173 0100 	sbcs.w	r1, r3, #0
   114c0:	db02      	blt.n	114c8 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   114c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   114c6:	e009      	b.n	114dc <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   114c8:	4252      	negs	r2, r2
   114ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   114ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   114d2:	f04f 092d 	mov.w	r9, #45	; 0x2d
   114d6:	e001      	b.n	114dc <cbvprintf+0x7c0>
		switch (conv->specifier) {
   114d8:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   114dc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   114e0:	9300      	str	r3, [sp, #0]
   114e2:	ab0c      	add	r3, sp, #48	; 0x30
   114e4:	aa08      	add	r2, sp, #32
   114e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   114ea:	f7ff fba7 	bl	10c3c <encode_uint>
   114ee:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   114f0:	f1bb 0f00 	cmp.w	fp, #0
   114f4:	f2c0 8090 	blt.w	11618 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   114f8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   114fc:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   11500:	f89d 2020 	ldrb.w	r2, [sp, #32]
   11504:	f36f 1286 	bfc	r2, #6, #1
   11508:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   1150c:	459b      	cmp	fp, r3
   1150e:	f240 8086 	bls.w	1161e <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   11512:	ebab 0303 	sub.w	r3, fp, r3
   11516:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   11518:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1151c:	e04c      	b.n	115b8 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   1151e:	9806      	ldr	r0, [sp, #24]
   11520:	b930      	cbnz	r0, 11530 <cbvprintf+0x814>
		char sign = 0;
   11522:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   11526:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 116ec <cbvprintf+0x9d0>
			bps = "(nil)";
   1152a:	f1ab 0a05 	sub.w	sl, fp, #5
   1152e:	e043      	b.n	115b8 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11530:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   11534:	9300      	str	r3, [sp, #0]
   11536:	ab0c      	add	r3, sp, #48	; 0x30
   11538:	aa08      	add	r2, sp, #32
   1153a:	2100      	movs	r1, #0
   1153c:	f7ff fb7e 	bl	10c3c <encode_uint>
   11540:	4682      	mov	sl, r0
				conv->altform_0c = true;
   11542:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11546:	f043 0310 	orr.w	r3, r3, #16
   1154a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   1154e:	2378      	movs	r3, #120	; 0x78
   11550:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   11554:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   11558:	e7ca      	b.n	114f0 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1155a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   1155c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11560:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   11564:	2b07      	cmp	r3, #7
   11566:	d806      	bhi.n	11576 <cbvprintf+0x85a>
   11568:	e8df f003 	tbb	[pc, r3]
   1156c:	100e0c04 	.word	0x100e0c04
   11570:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   11574:	6014      	str	r4, [r2, #0]
		char sign = 0;
   11576:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1157a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1157e:	f04f 0a00 	mov.w	sl, #0
}
   11582:	e019      	b.n	115b8 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   11584:	7014      	strb	r4, [r2, #0]
		break;
   11586:	e7f6      	b.n	11576 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   11588:	8014      	strh	r4, [r2, #0]
		break;
   1158a:	e7f4      	b.n	11576 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   1158c:	6014      	str	r4, [r2, #0]
		break;
   1158e:	e7f2      	b.n	11576 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   11590:	4620      	mov	r0, r4
   11592:	17e1      	asrs	r1, r4, #31
   11594:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   11598:	e7ed      	b.n	11576 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   1159a:	4620      	mov	r0, r4
   1159c:	17e1      	asrs	r1, r4, #31
   1159e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   115a2:	e7e8      	b.n	11576 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   115a4:	6014      	str	r4, [r2, #0]
		break;
   115a6:	e7e6      	b.n	11576 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   115a8:	6014      	str	r4, [r2, #0]
		break;
   115aa:	e7e4      	b.n	11576 <cbvprintf+0x85a>
		switch (conv->specifier) {
   115ac:	f8dd 9008 	ldr.w	r9, [sp, #8]
   115b0:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   115b4:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   115b8:	f1ba 0f00 	cmp.w	sl, #0
   115bc:	f000 808e 	beq.w	116dc <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   115c0:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   115c4:	f1b9 0f00 	cmp.w	r9, #0
   115c8:	d000      	beq.n	115cc <cbvprintf+0x8b0>
			nj_len += 1U;
   115ca:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   115cc:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   115d0:	f011 0f10 	tst.w	r1, #16
   115d4:	d026      	beq.n	11624 <cbvprintf+0x908>
			nj_len += 2U;
   115d6:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   115d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   115da:	4413      	add	r3, r2
		if (conv->pad_fp) {
   115dc:	f011 0f40 	tst.w	r1, #64	; 0x40
   115e0:	d001      	beq.n	115e6 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   115e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   115e4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   115e6:	2f00      	cmp	r7, #0
   115e8:	dd32      	ble.n	11650 <cbvprintf+0x934>
			width -= (int)nj_len;
   115ea:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   115ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
   115f0:	f013 0f04 	tst.w	r3, #4
   115f4:	d12c      	bne.n	11650 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   115f6:	f013 0f40 	tst.w	r3, #64	; 0x40
   115fa:	d018      	beq.n	1162e <cbvprintf+0x912>
					if (sign != 0) {
   115fc:	f1b9 0f00 	cmp.w	r9, #0
   11600:	d018      	beq.n	11634 <cbvprintf+0x918>
						OUTC(sign);
   11602:	4629      	mov	r1, r5
   11604:	4648      	mov	r0, r9
   11606:	47b0      	blx	r6
   11608:	2800      	cmp	r0, #0
   1160a:	db6b      	blt.n	116e4 <cbvprintf+0x9c8>
   1160c:	3401      	adds	r4, #1
						sign = 0;
   1160e:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   11612:	2330      	movs	r3, #48	; 0x30
   11614:	9302      	str	r3, [sp, #8]
   11616:	e00f      	b.n	11638 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   11618:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1161c:	e7cc      	b.n	115b8 <cbvprintf+0x89c>
   1161e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   11622:	e7c9      	b.n	115b8 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   11624:	f011 0f08 	tst.w	r1, #8
   11628:	d0d6      	beq.n	115d8 <cbvprintf+0x8bc>
			nj_len += 1U;
   1162a:	3201      	adds	r2, #1
   1162c:	e7d4      	b.n	115d8 <cbvprintf+0x8bc>
				char pad = ' ';
   1162e:	2320      	movs	r3, #32
   11630:	9302      	str	r3, [sp, #8]
   11632:	e001      	b.n	11638 <cbvprintf+0x91c>
					pad = '0';
   11634:	2330      	movs	r3, #48	; 0x30
   11636:	9302      	str	r3, [sp, #8]
   11638:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   1163a:	1e5f      	subs	r7, r3, #1
   1163c:	2b00      	cmp	r3, #0
   1163e:	dd07      	ble.n	11650 <cbvprintf+0x934>
					OUTC(pad);
   11640:	4629      	mov	r1, r5
   11642:	9802      	ldr	r0, [sp, #8]
   11644:	47b0      	blx	r6
   11646:	2800      	cmp	r0, #0
   11648:	db4c      	blt.n	116e4 <cbvprintf+0x9c8>
   1164a:	3401      	adds	r4, #1
				while (width-- > 0) {
   1164c:	463b      	mov	r3, r7
   1164e:	e7f4      	b.n	1163a <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   11650:	f1b9 0f00 	cmp.w	r9, #0
   11654:	d005      	beq.n	11662 <cbvprintf+0x946>
			OUTC(sign);
   11656:	4629      	mov	r1, r5
   11658:	4648      	mov	r0, r9
   1165a:	47b0      	blx	r6
   1165c:	2800      	cmp	r0, #0
   1165e:	db41      	blt.n	116e4 <cbvprintf+0x9c8>
   11660:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   11662:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11666:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1166a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1166e:	4313      	orrs	r3, r2
   11670:	d005      	beq.n	1167e <cbvprintf+0x962>
				OUTC('0');
   11672:	4629      	mov	r1, r5
   11674:	2030      	movs	r0, #48	; 0x30
   11676:	47b0      	blx	r6
   11678:	2800      	cmp	r0, #0
   1167a:	db33      	blt.n	116e4 <cbvprintf+0x9c8>
   1167c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   1167e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11682:	f013 0f10 	tst.w	r3, #16
   11686:	d006      	beq.n	11696 <cbvprintf+0x97a>
				OUTC(conv->specifier);
   11688:	4629      	mov	r1, r5
   1168a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1168e:	47b0      	blx	r6
   11690:	2800      	cmp	r0, #0
   11692:	db27      	blt.n	116e4 <cbvprintf+0x9c8>
   11694:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   11696:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   11698:	f103 39ff 	add.w	r9, r3, #4294967295
   1169c:	2b00      	cmp	r3, #0
   1169e:	dd07      	ble.n	116b0 <cbvprintf+0x994>
				OUTC('0');
   116a0:	4629      	mov	r1, r5
   116a2:	2030      	movs	r0, #48	; 0x30
   116a4:	47b0      	blx	r6
   116a6:	2800      	cmp	r0, #0
   116a8:	db1c      	blt.n	116e4 <cbvprintf+0x9c8>
   116aa:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   116ac:	464b      	mov	r3, r9
   116ae:	e7f3      	b.n	11698 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   116b0:	465b      	mov	r3, fp
   116b2:	4652      	mov	r2, sl
   116b4:	4629      	mov	r1, r5
   116b6:	4630      	mov	r0, r6
   116b8:	f00f febc 	bl	21434 <outs>
   116bc:	2800      	cmp	r0, #0
   116be:	db11      	blt.n	116e4 <cbvprintf+0x9c8>
   116c0:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   116c2:	2f00      	cmp	r7, #0
   116c4:	dd07      	ble.n	116d6 <cbvprintf+0x9ba>
			OUTC(' ');
   116c6:	4629      	mov	r1, r5
   116c8:	2020      	movs	r0, #32
   116ca:	47b0      	blx	r6
   116cc:	2800      	cmp	r0, #0
   116ce:	db09      	blt.n	116e4 <cbvprintf+0x9c8>
   116d0:	3401      	adds	r4, #1
			--width;
   116d2:	3f01      	subs	r7, #1
   116d4:	e7f5      	b.n	116c2 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   116d6:	46c2      	mov	sl, r8
   116d8:	f7ff bb28 	b.w	10d2c <cbvprintf+0x10>
   116dc:	46c2      	mov	sl, r8
   116de:	f7ff bb25 	b.w	10d2c <cbvprintf+0x10>
		}
	}

	return count;
   116e2:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   116e4:	b013      	add	sp, #76	; 0x4c
   116e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116ea:	bf00      	nop
   116ec:	00026185 	.word	0x00026185

000116f0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   116f0:	b508      	push	{r3, lr}
   116f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   116f6:	f3ef 8311 	mrs	r3, BASEPRI
   116fa:	f382 8812 	msr	BASEPRI_MAX, r2
   116fe:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   11702:	f002 fc6f 	bl	13fe4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11706:	4803      	ldr	r0, [pc, #12]	; (11714 <sys_reboot+0x24>)
   11708:	f00f fb32 	bl	20d70 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1170c:	f001 fd16 	bl	1313c <arch_cpu_idle>
   11710:	e7fc      	b.n	1170c <sys_reboot+0x1c>
   11712:	bf00      	nop
   11714:	00026188 	.word	0x00026188

00011718 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   11718:	4b05      	ldr	r3, [pc, #20]	; (11730 <is_rodata+0x18>)
   1171a:	4298      	cmp	r0, r3
   1171c:	d304      	bcc.n	11728 <is_rodata+0x10>
   1171e:	4b05      	ldr	r3, [pc, #20]	; (11734 <is_rodata+0x1c>)
   11720:	4298      	cmp	r0, r3
   11722:	d303      	bcc.n	1172c <is_rodata+0x14>
   11724:	2000      	movs	r0, #0
   11726:	4770      	bx	lr
   11728:	2000      	movs	r0, #0
   1172a:	4770      	bx	lr
   1172c:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   1172e:	4770      	bx	lr
   11730:	00025a84 	.word	0x00025a84
   11734:	000282dc 	.word	0x000282dc

00011738 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   11738:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   1173a:	4b06      	ldr	r3, [pc, #24]	; (11754 <thread_set+0x1c>)
   1173c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1173e:	b118      	cbz	r0, 11748 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   11740:	4b05      	ldr	r3, [pc, #20]	; (11758 <thread_set+0x20>)
   11742:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   11744:	2b09      	cmp	r3, #9
   11746:	dc00      	bgt.n	1174a <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   11748:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1174a:	4804      	ldr	r0, [pc, #16]	; (1175c <thread_set+0x24>)
   1174c:	f00b faae 	bl	1ccac <z_impl_k_sem_give>
}
   11750:	e7fa      	b.n	11748 <thread_set+0x10>
   11752:	bf00      	nop
   11754:	200022a8 	.word	0x200022a8
   11758:	20002278 	.word	0x20002278
   1175c:	20000754 	.word	0x20000754

00011760 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   11760:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   11762:	4802      	ldr	r0, [pc, #8]	; (1176c <log_process_thread_timer_expiry_fn+0xc>)
   11764:	f00b faa2 	bl	1ccac <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   11768:	bd08      	pop	{r3, pc}
   1176a:	bf00      	nop
   1176c:	20000754 	.word	0x20000754

00011770 <next_pending>:
{
   11770:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   11772:	4803      	ldr	r0, [pc, #12]	; (11780 <next_pending+0x10>)
   11774:	f00f fe87 	bl	21486 <log_list_head_peek>
}
   11778:	3800      	subs	r0, #0
   1177a:	bf18      	it	ne
   1177c:	2001      	movne	r0, #1
   1177e:	bd08      	pop	{r3, pc}
   11780:	20002284 	.word	0x20002284

00011784 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   11784:	b530      	push	{r4, r5, lr}
   11786:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   11788:	2200      	movs	r2, #0
   1178a:	490f      	ldr	r1, [pc, #60]	; (117c8 <enable_logger+0x44>)
   1178c:	480f      	ldr	r0, [pc, #60]	; (117cc <enable_logger+0x48>)
   1178e:	f014 f836 	bl	257fe <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11792:	4d0f      	ldr	r5, [pc, #60]	; (117d0 <enable_logger+0x4c>)
   11794:	2200      	movs	r2, #0
   11796:	2300      	movs	r3, #0
   11798:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1179c:	2400      	movs	r4, #0
   1179e:	9404      	str	r4, [sp, #16]
   117a0:	230e      	movs	r3, #14
   117a2:	9303      	str	r3, [sp, #12]
   117a4:	9402      	str	r4, [sp, #8]
   117a6:	9401      	str	r4, [sp, #4]
   117a8:	9400      	str	r4, [sp, #0]
   117aa:	4b0a      	ldr	r3, [pc, #40]	; (117d4 <enable_logger+0x50>)
   117ac:	f44f 7240 	mov.w	r2, #768	; 0x300
   117b0:	4909      	ldr	r1, [pc, #36]	; (117d8 <enable_logger+0x54>)
   117b2:	4628      	mov	r0, r5
   117b4:	f013 fb70 	bl	24e98 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   117b8:	4908      	ldr	r1, [pc, #32]	; (117dc <enable_logger+0x58>)
   117ba:	4628      	mov	r0, r5
   117bc:	f00b f87e 	bl	1c8bc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   117c0:	4620      	mov	r0, r4
   117c2:	b009      	add	sp, #36	; 0x24
   117c4:	bd30      	pop	{r4, r5, pc}
   117c6:	bf00      	nop
   117c8:	00011761 	.word	0x00011761
   117cc:	200015e0 	.word	0x200015e0
   117d0:	20001618 	.word	0x20001618
   117d4:	00011f0d 	.word	0x00011f0d
   117d8:	20003be0 	.word	0x20003be0
   117dc:	000261b4 	.word	0x000261b4

000117e0 <z_log_get_s_mask>:
{
   117e0:	b470      	push	{r4, r5, r6}
   117e2:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   117e4:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   117e6:	4605      	mov	r5, r0
	bool arm = false;
   117e8:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   117ea:	e001      	b.n	117f0 <z_log_get_s_mask+0x10>
			arm = !arm;
   117ec:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   117f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   117f4:	b19a      	cbz	r2, 1181e <z_log_get_s_mask+0x3e>
   117f6:	428d      	cmp	r5, r1
   117f8:	d211      	bcs.n	1181e <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   117fa:	2a25      	cmp	r2, #37	; 0x25
   117fc:	d0f6      	beq.n	117ec <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   117fe:	2c00      	cmp	r4, #0
   11800:	d0f6      	beq.n	117f0 <z_log_get_s_mask+0x10>
   11802:	4e08      	ldr	r6, [pc, #32]	; (11824 <z_log_get_s_mask+0x44>)
   11804:	5d96      	ldrb	r6, [r2, r6]
   11806:	f016 0f03 	tst.w	r6, #3
   1180a:	d0f1      	beq.n	117f0 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   1180c:	2a73      	cmp	r2, #115	; 0x73
   1180e:	d002      	beq.n	11816 <z_log_get_s_mask+0x36>
			arg++;
   11810:	3501      	adds	r5, #1
			arm = false;
   11812:	2400      	movs	r4, #0
   11814:	e7ec      	b.n	117f0 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   11816:	2201      	movs	r2, #1
   11818:	40aa      	lsls	r2, r5
   1181a:	4310      	orrs	r0, r2
   1181c:	e7f8      	b.n	11810 <z_log_get_s_mask+0x30>
}
   1181e:	bc70      	pop	{r4, r5, r6}
   11820:	4770      	bx	lr
   11822:	bf00      	nop
   11824:	000281d9 	.word	0x000281d9

00011828 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11828:	4b18      	ldr	r3, [pc, #96]	; (1188c <log_init+0x64>)
   1182a:	f3bf 8f5b 	dmb	ish
   1182e:	e853 2f00 	ldrex	r2, [r3]
   11832:	1c51      	adds	r1, r2, #1
   11834:	e843 1000 	strex	r0, r1, [r3]
   11838:	2800      	cmp	r0, #0
   1183a:	d1f8      	bne.n	1182e <log_init+0x6>
   1183c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   11840:	bb1a      	cbnz	r2, 1188a <log_init+0x62>
{
   11842:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   11844:	2400      	movs	r4, #0
   11846:	e009      	b.n	1185c <log_init+0x34>
					   backend->cb->ctx,
   11848:	4b11      	ldr	r3, [pc, #68]	; (11890 <log_init+0x68>)
   1184a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1184e:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   11850:	2204      	movs	r2, #4
   11852:	6819      	ldr	r1, [r3, #0]
   11854:	4628      	mov	r0, r5
   11856:	f000 fb9d 	bl	11f94 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1185a:	3401      	adds	r4, #1
   1185c:	4b0d      	ldr	r3, [pc, #52]	; (11894 <log_init+0x6c>)
   1185e:	4a0c      	ldr	r2, [pc, #48]	; (11890 <log_init+0x68>)
   11860:	1a9b      	subs	r3, r3, r2
   11862:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11866:	da0f      	bge.n	11888 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
   11868:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   1186a:	4d09      	ldr	r5, [pc, #36]	; (11890 <log_init+0x68>)
   1186c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   11870:	7b2b      	ldrb	r3, [r5, #12]
   11872:	2b00      	cmp	r3, #0
   11874:	d0f1      	beq.n	1185a <log_init+0x32>
			if (backend->api->init != NULL) {
   11876:	0123      	lsls	r3, r4, #4
   11878:	4a05      	ldr	r2, [pc, #20]	; (11890 <log_init+0x68>)
   1187a:	58d3      	ldr	r3, [r2, r3]
   1187c:	699b      	ldr	r3, [r3, #24]
   1187e:	2b00      	cmp	r3, #0
   11880:	d0e2      	beq.n	11848 <log_init+0x20>
				backend->api->init(backend);
   11882:	4628      	mov	r0, r5
   11884:	4798      	blx	r3
   11886:	e7df      	b.n	11848 <log_init+0x20>
}
   11888:	bd70      	pop	{r4, r5, r6, pc}
   1188a:	4770      	bx	lr
   1188c:	20002280 	.word	0x20002280
   11890:	00025e68 	.word	0x00025e68
   11894:	00025e78 	.word	0x00025e78

00011898 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   11898:	b138      	cbz	r0, 118aa <log_set_timestamp_func+0x12>
{
   1189a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   1189c:	4a04      	ldr	r2, [pc, #16]	; (118b0 <log_set_timestamp_func+0x18>)
   1189e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   118a0:	4608      	mov	r0, r1
   118a2:	f000 fdf3 	bl	1248c <log_output_timestamp_freq_set>
	return 0;
   118a6:	2000      	movs	r0, #0
}
   118a8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   118aa:	f06f 0015 	mvn.w	r0, #21
}
   118ae:	4770      	bx	lr
   118b0:	20000414 	.word	0x20000414

000118b4 <log_core_init>:
{
   118b4:	b508      	push	{r3, lr}
	panic_mode = false;
   118b6:	2300      	movs	r3, #0
   118b8:	4a0a      	ldr	r2, [pc, #40]	; (118e4 <log_core_init+0x30>)
   118ba:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   118bc:	4a0a      	ldr	r2, [pc, #40]	; (118e8 <log_core_init+0x34>)
   118be:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   118c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   118c4:	4809      	ldr	r0, [pc, #36]	; (118ec <log_core_init+0x38>)
   118c6:	f7ff ffe7 	bl	11898 <log_set_timestamp_func>
		log_msg_pool_init();
   118ca:	f000 fb85 	bl	11fd8 <log_msg_pool_init>
		log_list_init(&list);
   118ce:	4808      	ldr	r0, [pc, #32]	; (118f0 <log_core_init+0x3c>)
   118d0:	f00f fdcb 	bl	2146a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   118d4:	2308      	movs	r3, #8
   118d6:	2248      	movs	r2, #72	; 0x48
   118d8:	4906      	ldr	r1, [pc, #24]	; (118f4 <log_core_init+0x40>)
   118da:	4807      	ldr	r0, [pc, #28]	; (118f8 <log_core_init+0x44>)
   118dc:	f013 fa79 	bl	24dd2 <k_mem_slab_init>
}
   118e0:	bd08      	pop	{r3, pc}
   118e2:	bf00      	nop
   118e4:	20003a07 	.word	0x20003a07
   118e8:	2000227c 	.word	0x2000227c
   118ec:	0002149f 	.word	0x0002149f
   118f0:	20002284 	.word	0x20002284
   118f4:	20007488 	.word	0x20007488
   118f8:	2000228c 	.word	0x2000228c

000118fc <get_msg>:
{
   118fc:	b510      	push	{r4, lr}
   118fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   11902:	f3ef 8411 	mrs	r4, BASEPRI
   11906:	f383 8812 	msr	BASEPRI_MAX, r3
   1190a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   1190e:	4804      	ldr	r0, [pc, #16]	; (11920 <get_msg+0x24>)
   11910:	f00f fdbb 	bl	2148a <log_list_head_get>
	__asm__ volatile(
   11914:	f384 8811 	msr	BASEPRI, r4
   11918:	f3bf 8f6f 	isb	sy
}
   1191c:	bd10      	pop	{r4, pc}
   1191e:	bf00      	nop
   11920:	20002284 	.word	0x20002284

00011924 <z_log_notify_backend_enabled>:
{
   11924:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11926:	4b05      	ldr	r3, [pc, #20]	; (1193c <z_log_notify_backend_enabled+0x18>)
   11928:	781b      	ldrb	r3, [r3, #0]
   1192a:	b11b      	cbz	r3, 11934 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   1192c:	4b03      	ldr	r3, [pc, #12]	; (1193c <z_log_notify_backend_enabled+0x18>)
   1192e:	2201      	movs	r2, #1
   11930:	701a      	strb	r2, [r3, #0]
}
   11932:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   11934:	4802      	ldr	r0, [pc, #8]	; (11940 <z_log_notify_backend_enabled+0x1c>)
   11936:	f00b f9b9 	bl	1ccac <z_impl_k_sem_give>
}
   1193a:	e7f7      	b.n	1192c <z_log_notify_backend_enabled+0x8>
   1193c:	20003a06 	.word	0x20003a06
   11940:	20000754 	.word	0x20000754

00011944 <z_log_dropped>:
   11944:	4b0c      	ldr	r3, [pc, #48]	; (11978 <z_log_dropped+0x34>)
   11946:	f3bf 8f5b 	dmb	ish
   1194a:	e853 2f00 	ldrex	r2, [r3]
   1194e:	3201      	adds	r2, #1
   11950:	e843 2100 	strex	r1, r2, [r3]
   11954:	2900      	cmp	r1, #0
   11956:	d1f8      	bne.n	1194a <z_log_dropped+0x6>
   11958:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1195c:	4b07      	ldr	r3, [pc, #28]	; (1197c <z_log_dropped+0x38>)
   1195e:	f3bf 8f5b 	dmb	ish
   11962:	e853 2f00 	ldrex	r2, [r3]
   11966:	3a01      	subs	r2, #1
   11968:	e843 2100 	strex	r1, r2, [r3]
   1196c:	2900      	cmp	r1, #0
   1196e:	d1f8      	bne.n	11962 <z_log_dropped+0x1e>
   11970:	f3bf 8f5b 	dmb	ish
}
   11974:	4770      	bx	lr
   11976:	bf00      	nop
   11978:	2000227c 	.word	0x2000227c
   1197c:	20002278 	.word	0x20002278

00011980 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11980:	4b06      	ldr	r3, [pc, #24]	; (1199c <z_log_dropped_read_and_clear+0x1c>)
}
   11982:	2000      	movs	r0, #0
   11984:	4602      	mov	r2, r0
   11986:	f3bf 8f5b 	dmb	ish
   1198a:	e853 0f00 	ldrex	r0, [r3]
   1198e:	e843 2100 	strex	r1, r2, [r3]
   11992:	2900      	cmp	r1, #0
   11994:	d1f9      	bne.n	1198a <z_log_dropped_read_and_clear+0xa>
   11996:	f3bf 8f5b 	dmb	ish
   1199a:	4770      	bx	lr
   1199c:	2000227c 	.word	0x2000227c

000119a0 <dropped_notify>:
{
   119a0:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   119a2:	f7ff ffed 	bl	11980 <z_log_dropped_read_and_clear>
   119a6:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   119a8:	2400      	movs	r4, #0
   119aa:	e000      	b.n	119ae <dropped_notify+0xe>
   119ac:	3401      	adds	r4, #1
   119ae:	4b0b      	ldr	r3, [pc, #44]	; (119dc <dropped_notify+0x3c>)
   119b0:	4a0b      	ldr	r2, [pc, #44]	; (119e0 <dropped_notify+0x40>)
   119b2:	1a9b      	subs	r3, r3, r2
   119b4:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   119b8:	da0f      	bge.n	119da <dropped_notify+0x3a>
   119ba:	4809      	ldr	r0, [pc, #36]	; (119e0 <dropped_notify+0x40>)
   119bc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   119c0:	6843      	ldr	r3, [r0, #4]
   119c2:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   119c4:	2b00      	cmp	r3, #0
   119c6:	d0f1      	beq.n	119ac <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   119c8:	0123      	lsls	r3, r4, #4
   119ca:	4a05      	ldr	r2, [pc, #20]	; (119e0 <dropped_notify+0x40>)
   119cc:	58d3      	ldr	r3, [r2, r3]
   119ce:	691b      	ldr	r3, [r3, #16]
   119d0:	2b00      	cmp	r3, #0
   119d2:	d0eb      	beq.n	119ac <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   119d4:	4629      	mov	r1, r5
   119d6:	4798      	blx	r3
   119d8:	e7e8      	b.n	119ac <dropped_notify+0xc>
}
   119da:	bd38      	pop	{r3, r4, r5, pc}
   119dc:	00025e78 	.word	0x00025e78
   119e0:	00025e68 	.word	0x00025e68

000119e4 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   119e4:	4b03      	ldr	r3, [pc, #12]	; (119f4 <z_log_dropped_pending+0x10>)
   119e6:	6818      	ldr	r0, [r3, #0]
}
   119e8:	2800      	cmp	r0, #0
   119ea:	bfd4      	ite	le
   119ec:	2000      	movle	r0, #0
   119ee:	2001      	movgt	r0, #1
   119f0:	4770      	bx	lr
   119f2:	bf00      	nop
   119f4:	2000227c 	.word	0x2000227c

000119f8 <z_log_strdup>:
{
   119f8:	b570      	push	{r4, r5, r6, lr}
   119fa:	b082      	sub	sp, #8
   119fc:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   119fe:	f7ff fe8b 	bl	11718 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   11a02:	bb10      	cbnz	r0, 11a4a <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   11a04:	2200      	movs	r2, #0
   11a06:	2300      	movs	r3, #0
   11a08:	a901      	add	r1, sp, #4
   11a0a:	4811      	ldr	r0, [pc, #68]	; (11a50 <z_log_strdup+0x58>)
   11a0c:	f00a ff00 	bl	1c810 <k_mem_slab_alloc>
	if (err != 0) {
   11a10:	b108      	cbz	r0, 11a16 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   11a12:	4c10      	ldr	r4, [pc, #64]	; (11a54 <z_log_strdup+0x5c>)
   11a14:	e019      	b.n	11a4a <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   11a16:	9b01      	ldr	r3, [sp, #4]
   11a18:	2201      	movs	r2, #1
   11a1a:	f3bf 8f5b 	dmb	ish
   11a1e:	e853 1f00 	ldrex	r1, [r3]
   11a22:	e843 2000 	strex	r0, r2, [r3]
   11a26:	2800      	cmp	r0, #0
   11a28:	d1f9      	bne.n	11a1e <z_log_strdup+0x26>
   11a2a:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   11a2e:	9d01      	ldr	r5, [sp, #4]
   11a30:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   11a32:	2241      	movs	r2, #65	; 0x41
   11a34:	4621      	mov	r1, r4
   11a36:	4630      	mov	r0, r6
   11a38:	f013 fffd 	bl	25a36 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   11a3c:	237e      	movs	r3, #126	; 0x7e
   11a3e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   11a42:	2300      	movs	r3, #0
   11a44:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
	return dup->buf;
   11a48:	4634      	mov	r4, r6
}
   11a4a:	4620      	mov	r0, r4
   11a4c:	b002      	add	sp, #8
   11a4e:	bd70      	pop	{r4, r5, r6, pc}
   11a50:	2000228c 	.word	0x2000228c
   11a54:	000261bc 	.word	0x000261bc

00011a58 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   11a58:	b140      	cbz	r0, 11a6c <log_is_strdup+0x14>
   11a5a:	4a07      	ldr	r2, [pc, #28]	; (11a78 <log_is_strdup+0x20>)
   11a5c:	4290      	cmp	r0, r2
   11a5e:	d307      	bcc.n	11a70 <log_is_strdup+0x18>
   11a60:	f502 7210 	add.w	r2, r2, #576	; 0x240
   11a64:	4290      	cmp	r0, r2
   11a66:	d305      	bcc.n	11a74 <log_is_strdup+0x1c>
   11a68:	2000      	movs	r0, #0
   11a6a:	4770      	bx	lr
   11a6c:	2000      	movs	r0, #0
   11a6e:	4770      	bx	lr
   11a70:	2000      	movs	r0, #0
   11a72:	4770      	bx	lr
   11a74:	2001      	movs	r0, #1
}
   11a76:	4770      	bx	lr
   11a78:	20007488 	.word	0x20007488

00011a7c <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11a7c:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   11a7e:	f013 0f01 	tst.w	r3, #1
   11a82:	d000      	beq.n	11a86 <detect_missed_strdup+0xa>
   11a84:	4770      	bx	lr
{
   11a86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11a8a:	b083      	sub	sp, #12
   11a8c:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   11a8e:	f00f fdc7 	bl	21620 <log_msg_str_get>
   11a92:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11a94:	4630      	mov	r0, r6
   11a96:	f00f fdae 	bl	215f6 <log_msg_nargs_get>
   11a9a:	4601      	mov	r1, r0
   11a9c:	4638      	mov	r0, r7
   11a9e:	f7ff fe9f 	bl	117e0 <z_log_get_s_mask>
   11aa2:	4605      	mov	r5, r0
	while (mask) {
   11aa4:	e004      	b.n	11ab0 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   11aa6:	2301      	movs	r3, #1
   11aa8:	fa03 f404 	lsl.w	r4, r3, r4
   11aac:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   11ab0:	b36d      	cbz	r5, 11b0e <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   11ab2:	fab5 f485 	clz	r4, r5
   11ab6:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   11aba:	4621      	mov	r1, r4
   11abc:	4630      	mov	r0, r6
   11abe:	f00f fd9d 	bl	215fc <log_msg_arg_get>
   11ac2:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11ac4:	f7ff fe28 	bl	11718 <is_rodata>
   11ac8:	2800      	cmp	r0, #0
   11aca:	d1ec      	bne.n	11aa6 <detect_missed_strdup+0x2a>
   11acc:	4648      	mov	r0, r9
   11ace:	f7ff ffc3 	bl	11a58 <log_is_strdup>
   11ad2:	2800      	cmp	r0, #0
   11ad4:	d1e7      	bne.n	11aa6 <detect_missed_strdup+0x2a>
   11ad6:	4b0f      	ldr	r3, [pc, #60]	; (11b14 <detect_missed_strdup+0x98>)
   11ad8:	4599      	cmp	r9, r3
   11ada:	d0e4      	beq.n	11aa6 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   11adc:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   11ade:	f3c1 1189 	ubfx	r1, r1, #6, #10
   11ae2:	f000 fa47 	bl	11f74 <log_source_name_get>
   11ae6:	4602      	mov	r2, r0
   11ae8:	4b0b      	ldr	r3, [pc, #44]	; (11b18 <detect_missed_strdup+0x9c>)
   11aea:	490c      	ldr	r1, [pc, #48]	; (11b1c <detect_missed_strdup+0xa0>)
   11aec:	1a5b      	subs	r3, r3, r1
   11aee:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   11af0:	2101      	movs	r1, #1
   11af2:	f361 0802 	bfi	r8, r1, #0, #3
   11af6:	f36f 08c5 	bfc	r8, #3, #3
   11afa:	f363 188f 	bfi	r8, r3, #6, #10
   11afe:	f8ad 8000 	strh.w	r8, [sp]
   11b02:	463b      	mov	r3, r7
   11b04:	4621      	mov	r1, r4
   11b06:	4806      	ldr	r0, [pc, #24]	; (11b20 <detect_missed_strdup+0xa4>)
   11b08:	f000 f8b0 	bl	11c6c <log_3>
   11b0c:	e7cb      	b.n	11aa6 <detect_missed_strdup+0x2a>
}
   11b0e:	b003      	add	sp, #12
   11b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11b14:	000261bc 	.word	0x000261bc
   11b18:	00025df8 	.word	0x00025df8
   11b1c:	00025d80 	.word	0x00025d80
   11b20:	000261d8 	.word	0x000261d8

00011b24 <msg_process>:
{
   11b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b26:	4606      	mov	r6, r0
	if (!bypass) {
   11b28:	bb19      	cbnz	r1, 11b72 <msg_process+0x4e>
		    !panic_mode) {
   11b2a:	4b14      	ldr	r3, [pc, #80]	; (11b7c <msg_process+0x58>)
   11b2c:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   11b2e:	b10b      	cbz	r3, 11b34 <msg_process+0x10>
{
   11b30:	2400      	movs	r4, #0
   11b32:	e003      	b.n	11b3c <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   11b34:	f7ff ffa2 	bl	11a7c <detect_missed_strdup>
   11b38:	e7fa      	b.n	11b30 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   11b3a:	3401      	adds	r4, #1
   11b3c:	4b10      	ldr	r3, [pc, #64]	; (11b80 <msg_process+0x5c>)
   11b3e:	4a11      	ldr	r2, [pc, #68]	; (11b84 <msg_process+0x60>)
   11b40:	1a9b      	subs	r3, r3, r2
   11b42:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11b46:	da14      	bge.n	11b72 <msg_process+0x4e>
	return &__log_backends_start[idx];
   11b48:	4d0e      	ldr	r5, [pc, #56]	; (11b84 <msg_process+0x60>)
   11b4a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   11b4e:	686b      	ldr	r3, [r5, #4]
   11b50:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   11b52:	2b00      	cmp	r3, #0
   11b54:	d0f1      	beq.n	11b3a <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   11b56:	4631      	mov	r1, r6
   11b58:	4628      	mov	r0, r5
   11b5a:	f00f fc9e 	bl	2149a <msg_filter_check>
			if (log_backend_is_active(backend) &&
   11b5e:	2800      	cmp	r0, #0
   11b60:	d0eb      	beq.n	11b3a <msg_process+0x16>
	backend->api->put(backend, msg);
   11b62:	0127      	lsls	r7, r4, #4
   11b64:	4b07      	ldr	r3, [pc, #28]	; (11b84 <msg_process+0x60>)
   11b66:	59db      	ldr	r3, [r3, r7]
   11b68:	685b      	ldr	r3, [r3, #4]
   11b6a:	4631      	mov	r1, r6
   11b6c:	4628      	mov	r0, r5
   11b6e:	4798      	blx	r3
}
   11b70:	e7e3      	b.n	11b3a <msg_process+0x16>
			log_msg_put(msg.msg);
   11b72:	4630      	mov	r0, r6
   11b74:	f00f fd56 	bl	21624 <log_msg_put>
}
   11b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b7a:	bf00      	nop
   11b7c:	20003a07 	.word	0x20003a07
   11b80:	00025e78 	.word	0x00025e78
   11b84:	00025e68 	.word	0x00025e68

00011b88 <z_impl_log_process>:
{
   11b88:	b510      	push	{r4, lr}
   11b8a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   11b8c:	4b11      	ldr	r3, [pc, #68]	; (11bd4 <z_impl_log_process+0x4c>)
   11b8e:	781b      	ldrb	r3, [r3, #0]
   11b90:	b903      	cbnz	r3, 11b94 <z_impl_log_process+0xc>
   11b92:	b1d0      	cbz	r0, 11bca <z_impl_log_process+0x42>
	msg = get_msg();
   11b94:	f7ff feb2 	bl	118fc <get_msg>
	if (msg.msg) {
   11b98:	4603      	mov	r3, r0
   11b9a:	b180      	cbz	r0, 11bbe <z_impl_log_process+0x36>
		if (!bypass) {
   11b9c:	b95c      	cbnz	r4, 11bb6 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11b9e:	4a0e      	ldr	r2, [pc, #56]	; (11bd8 <z_impl_log_process+0x50>)
   11ba0:	f3bf 8f5b 	dmb	ish
   11ba4:	e852 1f00 	ldrex	r1, [r2]
   11ba8:	3901      	subs	r1, #1
   11baa:	e842 1000 	strex	r0, r1, [r2]
   11bae:	2800      	cmp	r0, #0
   11bb0:	d1f8      	bne.n	11ba4 <z_impl_log_process+0x1c>
   11bb2:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   11bb6:	4621      	mov	r1, r4
   11bb8:	4618      	mov	r0, r3
   11bba:	f7ff ffb3 	bl	11b24 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   11bbe:	b914      	cbnz	r4, 11bc6 <z_impl_log_process+0x3e>
   11bc0:	f7ff ff10 	bl	119e4 <z_log_dropped_pending>
   11bc4:	b910      	cbnz	r0, 11bcc <z_impl_log_process+0x44>
	return next_pending();
   11bc6:	f7ff fdd3 	bl	11770 <next_pending>
}
   11bca:	bd10      	pop	{r4, pc}
		dropped_notify();
   11bcc:	f7ff fee8 	bl	119a0 <dropped_notify>
   11bd0:	e7f9      	b.n	11bc6 <z_impl_log_process+0x3e>
   11bd2:	bf00      	nop
   11bd4:	20003a06 	.word	0x20003a06
   11bd8:	20002278 	.word	0x20002278

00011bdc <z_log_msg_post_finalize>:
{
   11bdc:	b510      	push	{r4, lr}
   11bde:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11be0:	4b1d      	ldr	r3, [pc, #116]	; (11c58 <z_log_msg_post_finalize+0x7c>)
   11be2:	f3bf 8f5b 	dmb	ish
   11be6:	e853 2f00 	ldrex	r2, [r3]
   11bea:	1c51      	adds	r1, r2, #1
   11bec:	e843 1000 	strex	r0, r1, [r3]
   11bf0:	2800      	cmp	r0, #0
   11bf2:	d1f8      	bne.n	11be6 <z_log_msg_post_finalize+0xa>
   11bf4:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   11bf8:	4b18      	ldr	r3, [pc, #96]	; (11c5c <z_log_msg_post_finalize+0x80>)
   11bfa:	781b      	ldrb	r3, [r3, #0]
   11bfc:	b93b      	cbnz	r3, 11c0e <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
   11bfe:	4b18      	ldr	r3, [pc, #96]	; (11c60 <z_log_msg_post_finalize+0x84>)
   11c00:	681b      	ldr	r3, [r3, #0]
   11c02:	b103      	cbz	r3, 11c06 <z_log_msg_post_finalize+0x2a>
   11c04:	b19a      	cbz	r2, 11c2e <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11c06:	2a0a      	cmp	r2, #10
   11c08:	d01c      	beq.n	11c44 <z_log_msg_post_finalize+0x68>
}
   11c0a:	b002      	add	sp, #8
   11c0c:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   11c0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c12:	f3ef 8411 	mrs	r4, BASEPRI
   11c16:	f383 8812 	msr	BASEPRI_MAX, r3
   11c1a:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   11c1e:	2000      	movs	r0, #0
   11c20:	f7ff ffb2 	bl	11b88 <z_impl_log_process>
	__asm__ volatile(
   11c24:	f384 8811 	msr	BASEPRI, r4
   11c28:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11c2c:	e7ed      	b.n	11c0a <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
   11c2e:	2200      	movs	r2, #0
   11c30:	2300      	movs	r3, #0
   11c32:	e9cd 2300 	strd	r2, r3, [sp]
   11c36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11c3a:	2300      	movs	r3, #0
   11c3c:	4809      	ldr	r0, [pc, #36]	; (11c64 <z_log_msg_post_finalize+0x88>)
   11c3e:	f00c f839 	bl	1dcb4 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
   11c42:	e7e2      	b.n	11c0a <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11c44:	2b00      	cmp	r3, #0
   11c46:	d0e0      	beq.n	11c0a <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
   11c48:	4806      	ldr	r0, [pc, #24]	; (11c64 <z_log_msg_post_finalize+0x88>)
   11c4a:	f013 fde4 	bl	25816 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11c4e:	4806      	ldr	r0, [pc, #24]	; (11c68 <z_log_msg_post_finalize+0x8c>)
   11c50:	f00b f82c 	bl	1ccac <z_impl_k_sem_give>
}
   11c54:	e7d9      	b.n	11c0a <z_log_msg_post_finalize+0x2e>
   11c56:	bf00      	nop
   11c58:	20002278 	.word	0x20002278
   11c5c:	20003a07 	.word	0x20003a07
   11c60:	200022a8 	.word	0x200022a8
   11c64:	200015e0 	.word	0x200015e0
   11c68:	20000754 	.word	0x20000754

00011c6c <log_3>:
{
   11c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c70:	4680      	mov	r8, r0
   11c72:	460f      	mov	r7, r1
   11c74:	4616      	mov	r6, r2
   11c76:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11c78:	f000 f9d2 	bl	12020 <log_msg_chunk_alloc>

	if (msg != NULL) {
   11c7c:	4604      	mov	r4, r0
   11c7e:	b140      	cbz	r0, 11c92 <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   11c80:	2301      	movs	r3, #1
   11c82:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11c84:	2200      	movs	r2, #0
   11c86:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11c88:	f04f 0300 	mov.w	r3, #0
   11c8c:	f362 0300 	bfi	r3, r2, #0, #1
   11c90:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   11c92:	b14c      	cbz	r4, 11ca8 <log_3+0x3c>
		msg->str = str;
   11c94:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   11c98:	7a63      	ldrb	r3, [r4, #9]
   11c9a:	2203      	movs	r2, #3
   11c9c:	f362 1307 	bfi	r3, r2, #4, #4
   11ca0:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11ca2:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   11ca4:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   11ca6:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   11ca8:	b1c4      	cbz	r4, 11cdc <log_3+0x70>
	msg->hdr.ids = src_level;
   11caa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11cae:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11cb0:	4b0b      	ldr	r3, [pc, #44]	; (11ce0 <log_3+0x74>)
   11cb2:	681b      	ldr	r3, [r3, #0]
   11cb4:	4798      	blx	r3
   11cb6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11cb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   11cbc:	f3ef 8511 	mrs	r5, BASEPRI
   11cc0:	f383 8812 	msr	BASEPRI_MAX, r3
   11cc4:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11cc8:	4621      	mov	r1, r4
   11cca:	4806      	ldr	r0, [pc, #24]	; (11ce4 <log_3+0x78>)
   11ccc:	f00f fbd1 	bl	21472 <log_list_add_tail>
	__asm__ volatile(
   11cd0:	f385 8811 	msr	BASEPRI, r5
   11cd4:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11cd8:	f7ff ff80 	bl	11bdc <z_log_msg_post_finalize>
}
   11cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ce0:	20000414 	.word	0x20000414
   11ce4:	20002284 	.word	0x20002284

00011ce8 <log_1>:
{
   11ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cea:	4606      	mov	r6, r0
   11cec:	460d      	mov	r5, r1
   11cee:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11cf0:	f000 f996 	bl	12020 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11cf4:	4604      	mov	r4, r0
   11cf6:	b140      	cbz	r0, 11d0a <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   11cf8:	2301      	movs	r3, #1
   11cfa:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11cfc:	2100      	movs	r1, #0
   11cfe:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11d00:	f04f 0300 	mov.w	r3, #0
   11d04:	f361 0300 	bfi	r3, r1, #0, #1
   11d08:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11d0a:	b134      	cbz	r4, 11d1a <log_1+0x32>
		msg->str = str;
   11d0c:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   11d0e:	7a63      	ldrb	r3, [r4, #9]
   11d10:	2201      	movs	r2, #1
   11d12:	f362 1307 	bfi	r3, r2, #4, #4
   11d16:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11d18:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   11d1a:	b1b4      	cbz	r4, 11d4a <log_1+0x62>
	msg->hdr.ids = src_level;
   11d1c:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11d1e:	4b0b      	ldr	r3, [pc, #44]	; (11d4c <log_1+0x64>)
   11d20:	681b      	ldr	r3, [r3, #0]
   11d22:	4798      	blx	r3
   11d24:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11d26:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d2a:	f3ef 8511 	mrs	r5, BASEPRI
   11d2e:	f383 8812 	msr	BASEPRI_MAX, r3
   11d32:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11d36:	4621      	mov	r1, r4
   11d38:	4805      	ldr	r0, [pc, #20]	; (11d50 <log_1+0x68>)
   11d3a:	f00f fb9a 	bl	21472 <log_list_add_tail>
	__asm__ volatile(
   11d3e:	f385 8811 	msr	BASEPRI, r5
   11d42:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11d46:	f7ff ff49 	bl	11bdc <z_log_msg_post_finalize>
}
   11d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d4c:	20000414 	.word	0x20000414
   11d50:	20002284 	.word	0x20002284

00011d54 <log_2>:
{
   11d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d58:	4607      	mov	r7, r0
   11d5a:	460e      	mov	r6, r1
   11d5c:	4615      	mov	r5, r2
   11d5e:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11d60:	f000 f95e 	bl	12020 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11d64:	4604      	mov	r4, r0
   11d66:	b140      	cbz	r0, 11d7a <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   11d68:	2301      	movs	r3, #1
   11d6a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11d6c:	2200      	movs	r2, #0
   11d6e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11d70:	f04f 0300 	mov.w	r3, #0
   11d74:	f362 0300 	bfi	r3, r2, #0, #1
   11d78:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11d7a:	b13c      	cbz	r4, 11d8c <log_2+0x38>
		msg->str = str;
   11d7c:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   11d7e:	7a63      	ldrb	r3, [r4, #9]
   11d80:	2202      	movs	r2, #2
   11d82:	f362 1307 	bfi	r3, r2, #4, #4
   11d86:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11d88:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   11d8a:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   11d8c:	b1bc      	cbz	r4, 11dbe <log_2+0x6a>
	msg->hdr.ids = src_level;
   11d8e:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11d92:	4b0c      	ldr	r3, [pc, #48]	; (11dc4 <log_2+0x70>)
   11d94:	681b      	ldr	r3, [r3, #0]
   11d96:	4798      	blx	r3
   11d98:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11d9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d9e:	f3ef 8511 	mrs	r5, BASEPRI
   11da2:	f383 8812 	msr	BASEPRI_MAX, r3
   11da6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11daa:	4621      	mov	r1, r4
   11dac:	4806      	ldr	r0, [pc, #24]	; (11dc8 <log_2+0x74>)
   11dae:	f00f fb60 	bl	21472 <log_list_add_tail>
	__asm__ volatile(
   11db2:	f385 8811 	msr	BASEPRI, r5
   11db6:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11dba:	f7ff ff0f 	bl	11bdc <z_log_msg_post_finalize>
}
   11dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11dc2:	bf00      	nop
   11dc4:	20000414 	.word	0x20000414
   11dc8:	20002284 	.word	0x20002284

00011dcc <log_n>:
{
   11dcc:	b538      	push	{r3, r4, r5, lr}
   11dce:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   11dd0:	f00f fc6c 	bl	216ac <log_msg_create_n>
		if (msg == NULL) {
   11dd4:	b1b8      	cbz	r0, 11e06 <log_n+0x3a>
   11dd6:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11dd8:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11dda:	4b0b      	ldr	r3, [pc, #44]	; (11e08 <log_n+0x3c>)
   11ddc:	681b      	ldr	r3, [r3, #0]
   11dde:	4798      	blx	r3
   11de0:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   11de2:	f04f 0340 	mov.w	r3, #64	; 0x40
   11de6:	f3ef 8411 	mrs	r4, BASEPRI
   11dea:	f383 8812 	msr	BASEPRI_MAX, r3
   11dee:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11df2:	4629      	mov	r1, r5
   11df4:	4805      	ldr	r0, [pc, #20]	; (11e0c <log_n+0x40>)
   11df6:	f00f fb3c 	bl	21472 <log_list_add_tail>
	__asm__ volatile(
   11dfa:	f384 8811 	msr	BASEPRI, r4
   11dfe:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11e02:	f7ff feeb 	bl	11bdc <z_log_msg_post_finalize>
}
   11e06:	bd38      	pop	{r3, r4, r5, pc}
   11e08:	20000414 	.word	0x20000414
   11e0c:	20002284 	.word	0x20002284

00011e10 <log_hexdump>:
{
   11e10:	b538      	push	{r3, r4, r5, lr}
   11e12:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   11e14:	f00f fc5e 	bl	216d4 <log_msg_hexdump_create>
		if (msg == NULL) {
   11e18:	b1b8      	cbz	r0, 11e4a <log_hexdump+0x3a>
   11e1a:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11e1c:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11e1e:	4b0b      	ldr	r3, [pc, #44]	; (11e4c <log_hexdump+0x3c>)
   11e20:	681b      	ldr	r3, [r3, #0]
   11e22:	4798      	blx	r3
   11e24:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   11e26:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e2a:	f3ef 8411 	mrs	r4, BASEPRI
   11e2e:	f383 8812 	msr	BASEPRI_MAX, r3
   11e32:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11e36:	4629      	mov	r1, r5
   11e38:	4805      	ldr	r0, [pc, #20]	; (11e50 <log_hexdump+0x40>)
   11e3a:	f00f fb1a 	bl	21472 <log_list_add_tail>
	__asm__ volatile(
   11e3e:	f384 8811 	msr	BASEPRI, r4
   11e42:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11e46:	f7ff fec9 	bl	11bdc <z_log_msg_post_finalize>
}
   11e4a:	bd38      	pop	{r3, r4, r5, pc}
   11e4c:	20000414 	.word	0x20000414
   11e50:	20002284 	.word	0x20002284

00011e54 <log_0>:
{
   11e54:	b570      	push	{r4, r5, r6, lr}
   11e56:	4605      	mov	r5, r0
   11e58:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11e5a:	f000 f8e1 	bl	12020 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11e5e:	4604      	mov	r4, r0
   11e60:	b140      	cbz	r0, 11e74 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
   11e62:	2301      	movs	r3, #1
   11e64:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11e66:	2200      	movs	r2, #0
   11e68:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11e6a:	f04f 0300 	mov.w	r3, #0
   11e6e:	f362 0300 	bfi	r3, r2, #0, #1
   11e72:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11e74:	b104      	cbz	r4, 11e78 <log_0+0x24>
		msg->str = str;
   11e76:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   11e78:	b1b4      	cbz	r4, 11ea8 <log_0+0x54>
	msg->hdr.ids = src_level;
   11e7a:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11e7c:	4b0b      	ldr	r3, [pc, #44]	; (11eac <log_0+0x58>)
   11e7e:	681b      	ldr	r3, [r3, #0]
   11e80:	4798      	blx	r3
   11e82:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11e84:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e88:	f3ef 8511 	mrs	r5, BASEPRI
   11e8c:	f383 8812 	msr	BASEPRI_MAX, r3
   11e90:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11e94:	4621      	mov	r1, r4
   11e96:	4806      	ldr	r0, [pc, #24]	; (11eb0 <log_0+0x5c>)
   11e98:	f00f faeb 	bl	21472 <log_list_add_tail>
	__asm__ volatile(
   11e9c:	f385 8811 	msr	BASEPRI, r5
   11ea0:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11ea4:	f7ff fe9a 	bl	11bdc <z_log_msg_post_finalize>
}
   11ea8:	bd70      	pop	{r4, r5, r6, pc}
   11eaa:	bf00      	nop
   11eac:	20000414 	.word	0x20000414
   11eb0:	20002284 	.word	0x20002284

00011eb4 <z_impl_log_panic>:
	if (panic_mode) {
   11eb4:	4b12      	ldr	r3, [pc, #72]	; (11f00 <z_impl_log_panic+0x4c>)
   11eb6:	781b      	ldrb	r3, [r3, #0]
   11eb8:	b103      	cbz	r3, 11ebc <z_impl_log_panic+0x8>
   11eba:	4770      	bx	lr
{
   11ebc:	b510      	push	{r4, lr}
	log_init();
   11ebe:	f7ff fcb3 	bl	11828 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   11ec2:	2400      	movs	r4, #0
   11ec4:	e000      	b.n	11ec8 <z_impl_log_panic+0x14>
   11ec6:	3401      	adds	r4, #1
   11ec8:	4b0e      	ldr	r3, [pc, #56]	; (11f04 <z_impl_log_panic+0x50>)
   11eca:	4a0f      	ldr	r2, [pc, #60]	; (11f08 <z_impl_log_panic+0x54>)
   11ecc:	1a9b      	subs	r3, r3, r2
   11ece:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11ed2:	da0c      	bge.n	11eee <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   11ed4:	480c      	ldr	r0, [pc, #48]	; (11f08 <z_impl_log_panic+0x54>)
   11ed6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   11eda:	6843      	ldr	r3, [r0, #4]
   11edc:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   11ede:	2b00      	cmp	r3, #0
   11ee0:	d0f1      	beq.n	11ec6 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   11ee2:	0123      	lsls	r3, r4, #4
   11ee4:	4a08      	ldr	r2, [pc, #32]	; (11f08 <z_impl_log_panic+0x54>)
   11ee6:	58d3      	ldr	r3, [r2, r3]
   11ee8:	695b      	ldr	r3, [r3, #20]
   11eea:	4798      	blx	r3
}
   11eec:	e7eb      	b.n	11ec6 <z_impl_log_panic+0x12>
   11eee:	2000      	movs	r0, #0
   11ef0:	f7ff fe4a 	bl	11b88 <z_impl_log_process>
		while (log_process(false) == true) {
   11ef4:	2800      	cmp	r0, #0
   11ef6:	d1fa      	bne.n	11eee <z_impl_log_panic+0x3a>
	panic_mode = true;
   11ef8:	4b01      	ldr	r3, [pc, #4]	; (11f00 <z_impl_log_panic+0x4c>)
   11efa:	2201      	movs	r2, #1
   11efc:	701a      	strb	r2, [r3, #0]
}
   11efe:	bd10      	pop	{r4, pc}
   11f00:	20003a07 	.word	0x20003a07
   11f04:	00025e78 	.word	0x00025e78
   11f08:	00025e68 	.word	0x00025e68

00011f0c <log_process_thread_func>:
{
   11f0c:	b508      	push	{r3, lr}
	log_init();
   11f0e:	f7ff fc8b 	bl	11828 <log_init>
	return z_impl_z_current_get();
   11f12:	f00b fca7 	bl	1d864 <z_impl_z_current_get>
	thread_set(k_current_get());
   11f16:	f7ff fc0f 	bl	11738 <thread_set>
   11f1a:	e006      	b.n	11f2a <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
   11f1c:	f04f 32ff 	mov.w	r2, #4294967295
   11f20:	f04f 33ff 	mov.w	r3, #4294967295
   11f24:	4804      	ldr	r0, [pc, #16]	; (11f38 <log_process_thread_func+0x2c>)
   11f26:	f00a fee9 	bl	1ccfc <z_impl_k_sem_take>
   11f2a:	2000      	movs	r0, #0
   11f2c:	f7ff fe2c 	bl	11b88 <z_impl_log_process>
		if (log_process(false) == false) {
   11f30:	2800      	cmp	r0, #0
   11f32:	d1fa      	bne.n	11f2a <log_process_thread_func+0x1e>
   11f34:	e7f2      	b.n	11f1c <log_process_thread_func+0x10>
   11f36:	bf00      	nop
   11f38:	20000754 	.word	0x20000754

00011f3c <z_log_free>:
{
   11f3c:	b500      	push	{lr}
   11f3e:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   11f40:	3804      	subs	r0, #4
   11f42:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11f44:	f3bf 8f5b 	dmb	ish
   11f48:	e850 3f00 	ldrex	r3, [r0]
   11f4c:	1e5a      	subs	r2, r3, #1
   11f4e:	e840 2100 	strex	r1, r2, [r0]
   11f52:	2900      	cmp	r1, #0
   11f54:	d1f8      	bne.n	11f48 <z_log_free+0xc>
   11f56:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   11f5a:	2b01      	cmp	r3, #1
   11f5c:	d002      	beq.n	11f64 <z_log_free+0x28>
}
   11f5e:	b003      	add	sp, #12
   11f60:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   11f64:	a901      	add	r1, sp, #4
   11f66:	4802      	ldr	r0, [pc, #8]	; (11f70 <z_log_free+0x34>)
   11f68:	f012 ff41 	bl	24dee <k_mem_slab_free>
}
   11f6c:	e7f7      	b.n	11f5e <z_log_free+0x22>
   11f6e:	bf00      	nop
   11f70:	2000228c 	.word	0x2000228c

00011f74 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   11f74:	4b05      	ldr	r3, [pc, #20]	; (11f8c <log_source_name_get+0x18>)
   11f76:	4a06      	ldr	r2, [pc, #24]	; (11f90 <log_source_name_get+0x1c>)
   11f78:	1a9b      	subs	r3, r3, r2
   11f7a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   11f7e:	d202      	bcs.n	11f86 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   11f80:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   11f84:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   11f86:	2000      	movs	r0, #0
}
   11f88:	4770      	bx	lr
   11f8a:	bf00      	nop
   11f8c:	00025e68 	.word	0x00025e68
   11f90:	00025d80 	.word	0x00025d80

00011f94 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   11f94:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   11f96:	4b07      	ldr	r3, [pc, #28]	; (11fb4 <log_backend_enable+0x20>)
   11f98:	1ac3      	subs	r3, r0, r3
   11f9a:	111b      	asrs	r3, r3, #4
   11f9c:	3301      	adds	r3, #1
	backend->cb->id = id;
   11f9e:	6842      	ldr	r2, [r0, #4]
   11fa0:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   11fa2:	6843      	ldr	r3, [r0, #4]
   11fa4:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   11fa6:	6843      	ldr	r3, [r0, #4]
   11fa8:	2201      	movs	r2, #1
   11faa:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   11fac:	f7ff fcba 	bl	11924 <z_log_notify_backend_enabled>
}
   11fb0:	bd08      	pop	{r3, pc}
   11fb2:	bf00      	nop
   11fb4:	00025e68 	.word	0x00025e68

00011fb8 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   11fb8:	b510      	push	{r4, lr}
   11fba:	b082      	sub	sp, #8
   11fbc:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   11fbe:	9b01      	ldr	r3, [sp, #4]
   11fc0:	b133      	cbz	r3, 11fd0 <cont_free+0x18>
		next = cont->next;
   11fc2:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11fc4:	a901      	add	r1, sp, #4
   11fc6:	4803      	ldr	r0, [pc, #12]	; (11fd4 <cont_free+0x1c>)
   11fc8:	f012 ff11 	bl	24dee <k_mem_slab_free>
		cont = next;
   11fcc:	9401      	str	r4, [sp, #4]
   11fce:	e7f6      	b.n	11fbe <cont_free+0x6>
	}
}
   11fd0:	b002      	add	sp, #8
   11fd2:	bd10      	pop	{r4, pc}
   11fd4:	200022ac 	.word	0x200022ac

00011fd8 <log_msg_pool_init>:
{
   11fd8:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   11fda:	2320      	movs	r3, #32
   11fdc:	461a      	mov	r2, r3
   11fde:	4902      	ldr	r1, [pc, #8]	; (11fe8 <log_msg_pool_init+0x10>)
   11fe0:	4802      	ldr	r0, [pc, #8]	; (11fec <log_msg_pool_init+0x14>)
   11fe2:	f012 fef6 	bl	24dd2 <k_mem_slab_init>
}
   11fe6:	bd08      	pop	{r3, pc}
   11fe8:	200076c8 	.word	0x200076c8
   11fec:	200022ac 	.word	0x200022ac

00011ff0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   11ff0:	b510      	push	{r4, lr}
   11ff2:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   11ff4:	2300      	movs	r3, #0
   11ff6:	9301      	str	r3, [sp, #4]
   11ff8:	2001      	movs	r0, #1
   11ffa:	f7ff fdc5 	bl	11b88 <z_impl_log_process>
   11ffe:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   12000:	f7ff fca0 	bl	11944 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   12004:	2200      	movs	r2, #0
   12006:	2300      	movs	r3, #0
   12008:	a901      	add	r1, sp, #4
   1200a:	4804      	ldr	r0, [pc, #16]	; (1201c <log_msg_no_space_handle+0x2c>)
   1200c:	f00a fc00 	bl	1c810 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   12010:	b108      	cbz	r0, 12016 <log_msg_no_space_handle+0x26>
   12012:	2c00      	cmp	r4, #0
   12014:	d1f0      	bne.n	11ff8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   12016:	9801      	ldr	r0, [sp, #4]
   12018:	b002      	add	sp, #8
   1201a:	bd10      	pop	{r4, pc}
   1201c:	200022ac 	.word	0x200022ac

00012020 <log_msg_chunk_alloc>:
{
   12020:	b500      	push	{lr}
   12022:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   12024:	2300      	movs	r3, #0
   12026:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   12028:	f00f fa3f 	bl	214aa <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1202c:	b150      	cbz	r0, 12044 <log_msg_chunk_alloc+0x24>
   1202e:	2200      	movs	r2, #0
   12030:	2300      	movs	r3, #0
   12032:	a901      	add	r1, sp, #4
   12034:	4807      	ldr	r0, [pc, #28]	; (12054 <log_msg_chunk_alloc+0x34>)
   12036:	f00a fbeb 	bl	1c810 <k_mem_slab_alloc>
	if (err != 0) {
   1203a:	b930      	cbnz	r0, 1204a <log_msg_chunk_alloc+0x2a>
}
   1203c:	9801      	ldr	r0, [sp, #4]
   1203e:	b003      	add	sp, #12
   12040:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12044:	2200      	movs	r2, #0
   12046:	2300      	movs	r3, #0
   12048:	e7f3      	b.n	12032 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   1204a:	f7ff ffd1 	bl	11ff0 <log_msg_no_space_handle>
   1204e:	9001      	str	r0, [sp, #4]
   12050:	e7f4      	b.n	1203c <log_msg_chunk_alloc+0x1c>
   12052:	bf00      	nop
   12054:	200022ac 	.word	0x200022ac

00012058 <msg_free>:
{
   12058:	b5f0      	push	{r4, r5, r6, r7, lr}
   1205a:	b083      	sub	sp, #12
   1205c:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   1205e:	4604      	mov	r4, r0
   12060:	f00f fac9 	bl	215f6 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12064:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   12066:	f013 0f01 	tst.w	r3, #1
   1206a:	d101      	bne.n	12070 <msg_free+0x18>
   1206c:	4606      	mov	r6, r0
   1206e:	bb50      	cbnz	r0, 120c6 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   12070:	9b01      	ldr	r3, [sp, #4]
   12072:	7a1a      	ldrb	r2, [r3, #8]
   12074:	f012 0f02 	tst.w	r2, #2
   12078:	d128      	bne.n	120cc <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1207a:	a901      	add	r1, sp, #4
   1207c:	4815      	ldr	r0, [pc, #84]	; (120d4 <msg_free+0x7c>)
   1207e:	f012 feb6 	bl	24dee <k_mem_slab_free>
}
   12082:	b003      	add	sp, #12
   12084:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   12086:	9801      	ldr	r0, [sp, #4]
   12088:	f00f faca 	bl	21620 <log_msg_str_get>
   1208c:	4631      	mov	r1, r6
   1208e:	f7ff fba7 	bl	117e0 <z_log_get_s_mask>
					if (smask == 0U) {
   12092:	4607      	mov	r7, r0
   12094:	b988      	cbnz	r0, 120ba <msg_free+0x62>
   12096:	e7eb      	b.n	12070 <msg_free+0x18>
					z_log_free(buf);
   12098:	4628      	mov	r0, r5
   1209a:	f7ff ff4f 	bl	11f3c <z_log_free>
		for (i = 0U; i < nargs; i++) {
   1209e:	3401      	adds	r4, #1
   120a0:	42b4      	cmp	r4, r6
   120a2:	d2e5      	bcs.n	12070 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   120a4:	4621      	mov	r1, r4
   120a6:	9801      	ldr	r0, [sp, #4]
   120a8:	f00f faa8 	bl	215fc <log_msg_arg_get>
   120ac:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   120ae:	f7ff fcd3 	bl	11a58 <log_is_strdup>
   120b2:	2800      	cmp	r0, #0
   120b4:	d0f3      	beq.n	1209e <msg_free+0x46>
				if (smask == 0U) {
   120b6:	2f00      	cmp	r7, #0
   120b8:	d0e5      	beq.n	12086 <msg_free+0x2e>
				if (smask & BIT(i)) {
   120ba:	fa27 f304 	lsr.w	r3, r7, r4
   120be:	f013 0f01 	tst.w	r3, #1
   120c2:	d0ec      	beq.n	1209e <msg_free+0x46>
   120c4:	e7e8      	b.n	12098 <msg_free+0x40>
		uint32_t smask = 0U;
   120c6:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   120c8:	463c      	mov	r4, r7
   120ca:	e7e9      	b.n	120a0 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   120cc:	6958      	ldr	r0, [r3, #20]
   120ce:	f7ff ff73 	bl	11fb8 <cont_free>
   120d2:	e7d2      	b.n	1207a <msg_free+0x22>
   120d4:	200022ac 	.word	0x200022ac

000120d8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   120d8:	b40e      	push	{r1, r2, r3}
   120da:	b500      	push	{lr}
   120dc:	b082      	sub	sp, #8
   120de:	4601      	mov	r1, r0
   120e0:	ab03      	add	r3, sp, #12
   120e2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   120e6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   120e8:	4803      	ldr	r0, [pc, #12]	; (120f8 <print_formatted+0x20>)
   120ea:	f7fe fe17 	bl	10d1c <cbvprintf>
	va_end(args);

	return length;
}
   120ee:	b002      	add	sp, #8
   120f0:	f85d eb04 	ldr.w	lr, [sp], #4
   120f4:	b003      	add	sp, #12
   120f6:	4770      	bx	lr
   120f8:	00021aa7 	.word	0x00021aa7

000120fc <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   120fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   120fe:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   12100:	f011 0f44 	tst.w	r1, #68	; 0x44
   12104:	d005      	beq.n	12112 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   12106:	4b1a      	ldr	r3, [pc, #104]	; (12170 <timestamp_print+0x74>)
   12108:	681c      	ldr	r4, [r3, #0]
   1210a:	b934      	cbnz	r4, 1211a <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   1210c:	2000      	movs	r0, #0
	}

	return length;
}
   1210e:	b005      	add	sp, #20
   12110:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   12112:	4918      	ldr	r1, [pc, #96]	; (12174 <timestamp_print+0x78>)
   12114:	f7ff ffe0 	bl	120d8 <print_formatted>
   12118:	e7f9      	b.n	1210e <timestamp_print+0x12>
		timestamp /= timestamp_div;
   1211a:	4b17      	ldr	r3, [pc, #92]	; (12178 <timestamp_print+0x7c>)
   1211c:	6819      	ldr	r1, [r3, #0]
   1211e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   12122:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   12126:	4a15      	ldr	r2, [pc, #84]	; (1217c <timestamp_print+0x80>)
   12128:	fba2 3205 	umull	r3, r2, r2, r5
   1212c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   1212e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   12132:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   12136:	4b12      	ldr	r3, [pc, #72]	; (12180 <timestamp_print+0x84>)
   12138:	fba3 7306 	umull	r7, r3, r3, r6
   1213c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   1213e:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   12142:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   12146:	fb05 f101 	mul.w	r1, r5, r1
   1214a:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1214e:	fb07 1114 	mls	r1, r7, r4, r1
   12152:	fb05 f101 	mul.w	r1, r5, r1
   12156:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   1215a:	9402      	str	r4, [sp, #8]
   1215c:	9701      	str	r7, [sp, #4]
   1215e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   12162:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   12166:	9100      	str	r1, [sp, #0]
   12168:	4906      	ldr	r1, [pc, #24]	; (12184 <timestamp_print+0x88>)
   1216a:	f7ff ffb5 	bl	120d8 <print_formatted>
   1216e:	e7ce      	b.n	1210e <timestamp_print+0x12>
   12170:	200022c8 	.word	0x200022c8
   12174:	0002621c 	.word	0x0002621c
   12178:	200022cc 	.word	0x200022cc
   1217c:	91a2b3c5 	.word	0x91a2b3c5
   12180:	88888889 	.word	0x88888889
   12184:	00026228 	.word	0x00026228

00012188 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   12188:	b161      	cbz	r1, 121a4 <color_print+0x1c>
{
   1218a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1218c:	b12a      	cbz	r2, 1219a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   1218e:	4a06      	ldr	r2, [pc, #24]	; (121a8 <color_print+0x20>)
   12190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   12194:	b912      	cbnz	r2, 1219c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   12196:	4a05      	ldr	r2, [pc, #20]	; (121ac <color_print+0x24>)
   12198:	e000      	b.n	1219c <color_print+0x14>
   1219a:	4a04      	ldr	r2, [pc, #16]	; (121ac <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   1219c:	4904      	ldr	r1, [pc, #16]	; (121b0 <color_print+0x28>)
   1219e:	f7ff ff9b 	bl	120d8 <print_formatted>
	}
}
   121a2:	bd08      	pop	{r3, pc}
   121a4:	4770      	bx	lr
   121a6:	bf00      	nop
   121a8:	000262a0 	.word	0x000262a0
   121ac:	00026244 	.word	0x00026244
   121b0:	0002624c 	.word	0x0002624c

000121b4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   121b4:	f011 0f10 	tst.w	r1, #16
   121b8:	d10b      	bne.n	121d2 <newline_print+0x1e>
{
   121ba:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   121bc:	f011 0f20 	tst.w	r1, #32
   121c0:	d003      	beq.n	121ca <newline_print+0x16>
		print_formatted(ctx, "\n");
   121c2:	4904      	ldr	r1, [pc, #16]	; (121d4 <newline_print+0x20>)
   121c4:	f7ff ff88 	bl	120d8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   121c8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   121ca:	4903      	ldr	r1, [pc, #12]	; (121d8 <newline_print+0x24>)
   121cc:	f7ff ff84 	bl	120d8 <print_formatted>
   121d0:	e7fa      	b.n	121c8 <newline_print+0x14>
   121d2:	4770      	bx	lr
   121d4:	00026128 	.word	0x00026128
   121d8:	000280b4 	.word	0x000280b4

000121dc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   121dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121e0:	4605      	mov	r5, r0
   121e2:	460f      	mov	r7, r1
   121e4:	4616      	mov	r6, r2
   121e6:	4698      	mov	r8, r3
	newline_print(output, flags);
   121e8:	9906      	ldr	r1, [sp, #24]
   121ea:	f7ff ffe3 	bl	121b4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   121ee:	2400      	movs	r4, #0
   121f0:	4544      	cmp	r4, r8
   121f2:	da05      	bge.n	12200 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   121f4:	4924      	ldr	r1, [pc, #144]	; (12288 <hexdump_line_print+0xac>)
   121f6:	4628      	mov	r0, r5
   121f8:	f7ff ff6e 	bl	120d8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   121fc:	3401      	adds	r4, #1
   121fe:	e7f7      	b.n	121f0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12200:	2400      	movs	r4, #0
   12202:	e009      	b.n	12218 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   12204:	4920      	ldr	r1, [pc, #128]	; (12288 <hexdump_line_print+0xac>)
   12206:	4628      	mov	r0, r5
   12208:	f7ff ff66 	bl	120d8 <print_formatted>
   1220c:	e00b      	b.n	12226 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   1220e:	491f      	ldr	r1, [pc, #124]	; (1228c <hexdump_line_print+0xb0>)
   12210:	4628      	mov	r0, r5
   12212:	f7ff ff61 	bl	120d8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12216:	3401      	adds	r4, #1
   12218:	2c0f      	cmp	r4, #15
   1221a:	dc0c      	bgt.n	12236 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   1221c:	2c00      	cmp	r4, #0
   1221e:	dd02      	ble.n	12226 <hexdump_line_print+0x4a>
   12220:	f014 0f07 	tst.w	r4, #7
   12224:	d0ee      	beq.n	12204 <hexdump_line_print+0x28>
		if (i < length) {
   12226:	42b4      	cmp	r4, r6
   12228:	d2f1      	bcs.n	1220e <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   1222a:	5d3a      	ldrb	r2, [r7, r4]
   1222c:	4918      	ldr	r1, [pc, #96]	; (12290 <hexdump_line_print+0xb4>)
   1222e:	4628      	mov	r0, r5
   12230:	f7ff ff52 	bl	120d8 <print_formatted>
   12234:	e7ef      	b.n	12216 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   12236:	4917      	ldr	r1, [pc, #92]	; (12294 <hexdump_line_print+0xb8>)
   12238:	4628      	mov	r0, r5
   1223a:	f7ff ff4d 	bl	120d8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1223e:	2400      	movs	r4, #0
   12240:	e009      	b.n	12256 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   12242:	4911      	ldr	r1, [pc, #68]	; (12288 <hexdump_line_print+0xac>)
   12244:	4628      	mov	r0, r5
   12246:	f7ff ff47 	bl	120d8 <print_formatted>
   1224a:	e00b      	b.n	12264 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   1224c:	4912      	ldr	r1, [pc, #72]	; (12298 <hexdump_line_print+0xbc>)
   1224e:	4628      	mov	r0, r5
   12250:	f7ff ff42 	bl	120d8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12254:	3401      	adds	r4, #1
   12256:	2c0f      	cmp	r4, #15
   12258:	dc13      	bgt.n	12282 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
   1225a:	2c00      	cmp	r4, #0
   1225c:	dd02      	ble.n	12264 <hexdump_line_print+0x88>
   1225e:	f014 0f07 	tst.w	r4, #7
   12262:	d0ee      	beq.n	12242 <hexdump_line_print+0x66>
		if (i < length) {
   12264:	42b4      	cmp	r4, r6
   12266:	d207      	bcs.n	12278 <hexdump_line_print+0x9c>
			char c = (char)data[i];
   12268:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
   1226a:	4b0c      	ldr	r3, [pc, #48]	; (1229c <hexdump_line_print+0xc0>)
   1226c:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
   1226e:	f013 0f97 	tst.w	r3, #151	; 0x97
   12272:	d1eb      	bne.n	1224c <hexdump_line_print+0x70>
   12274:	222e      	movs	r2, #46	; 0x2e
   12276:	e7e9      	b.n	1224c <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
   12278:	4903      	ldr	r1, [pc, #12]	; (12288 <hexdump_line_print+0xac>)
   1227a:	4628      	mov	r0, r5
   1227c:	f7ff ff2c 	bl	120d8 <print_formatted>
   12280:	e7e8      	b.n	12254 <hexdump_line_print+0x78>
		}
	}
}
   12282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12286:	bf00      	nop
   12288:	00026274 	.word	0x00026274
   1228c:	00026258 	.word	0x00026258
   12290:	00026250 	.word	0x00026250
   12294:	0002625c 	.word	0x0002625c
   12298:	00026260 	.word	0x00026260
   1229c:	000281d9 	.word	0x000281d9

000122a0 <ids_print>:
{
   122a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122a4:	4680      	mov	r8, r0
   122a6:	4616      	mov	r6, r2
   122a8:	461d      	mov	r5, r3
   122aa:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   122ae:	b959      	cbnz	r1, 122c8 <ids_print+0x28>
	int total = 0;
   122b0:	2400      	movs	r4, #0
	if (source_id >= 0) {
   122b2:	2f00      	cmp	r7, #0
   122b4:	db1c      	blt.n	122f0 <ids_print+0x50>
		total += print_formatted(output,
   122b6:	b186      	cbz	r6, 122da <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   122b8:	2301      	movs	r3, #1
   122ba:	9a07      	ldr	r2, [sp, #28]
   122bc:	4093      	lsls	r3, r2
				(func_on &&
   122be:	f013 0f10 	tst.w	r3, #16
   122c2:	d118      	bne.n	122f6 <ids_print+0x56>
		total += print_formatted(output,
   122c4:	4e0d      	ldr	r6, [pc, #52]	; (122fc <ids_print+0x5c>)
   122c6:	e009      	b.n	122dc <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   122c8:	4b0d      	ldr	r3, [pc, #52]	; (12300 <ids_print+0x60>)
   122ca:	9a07      	ldr	r2, [sp, #28]
   122cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   122d0:	490c      	ldr	r1, [pc, #48]	; (12304 <ids_print+0x64>)
   122d2:	f7ff ff01 	bl	120d8 <print_formatted>
   122d6:	4604      	mov	r4, r0
   122d8:	e7eb      	b.n	122b2 <ids_print+0x12>
		total += print_formatted(output,
   122da:	4e08      	ldr	r6, [pc, #32]	; (122fc <ids_print+0x5c>)
   122dc:	4639      	mov	r1, r7
   122de:	4628      	mov	r0, r5
   122e0:	f7ff fe48 	bl	11f74 <log_source_name_get>
   122e4:	4602      	mov	r2, r0
   122e6:	4631      	mov	r1, r6
   122e8:	4640      	mov	r0, r8
   122ea:	f7ff fef5 	bl	120d8 <print_formatted>
   122ee:	4404      	add	r4, r0
}
   122f0:	4620      	mov	r0, r4
   122f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   122f6:	4e04      	ldr	r6, [pc, #16]	; (12308 <ids_print+0x68>)
   122f8:	e7f0      	b.n	122dc <ids_print+0x3c>
   122fa:	bf00      	nop
   122fc:	00026264 	.word	0x00026264
   12300:	000262dc 	.word	0x000262dc
   12304:	00026270 	.word	0x00026270
   12308:	0002626c 	.word	0x0002626c

0001230c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   1230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12310:	b085      	sub	sp, #20
   12312:	4605      	mov	r5, r0
   12314:	460c      	mov	r4, r1
   12316:	4616      	mov	r6, r2
   12318:	9303      	str	r3, [sp, #12]
   1231a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1231e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12322:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12326:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   1232a:	f00f f8bc 	bl	214a6 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   1232e:	b1e8      	cbz	r0, 1236c <prefix_print+0x60>
   12330:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   12332:	4913      	ldr	r1, [pc, #76]	; (12380 <prefix_print+0x74>)
   12334:	4628      	mov	r0, r5
   12336:	f7ff fecf 	bl	120d8 <print_formatted>
   1233a:	4607      	mov	r7, r0
	}

	if (stamp) {
   1233c:	f1bb 0f00 	cmp.w	fp, #0
   12340:	d116      	bne.n	12370 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   12342:	4642      	mov	r2, r8
   12344:	4651      	mov	r1, sl
   12346:	4628      	mov	r0, r5
   12348:	f00f fa2d 	bl	217a6 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   1234c:	f8cd 8004 	str.w	r8, [sp, #4]
   12350:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   12354:	9300      	str	r3, [sp, #0]
   12356:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   1235a:	4632      	mov	r2, r6
   1235c:	4649      	mov	r1, r9
   1235e:	4628      	mov	r0, r5
   12360:	f7ff ff9e 	bl	122a0 <ids_print>
			domain_id, source_id, level);


	return length;
}
   12364:	4438      	add	r0, r7
   12366:	b005      	add	sp, #20
   12368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   1236c:	2700      	movs	r7, #0
   1236e:	e7e5      	b.n	1233c <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   12370:	9a03      	ldr	r2, [sp, #12]
   12372:	4621      	mov	r1, r4
   12374:	4628      	mov	r0, r5
   12376:	f7ff fec1 	bl	120fc <timestamp_print>
   1237a:	4407      	add	r7, r0
   1237c:	e7e1      	b.n	12342 <prefix_print+0x36>
   1237e:	bf00      	nop
   12380:	00026278 	.word	0x00026278

00012384 <hexdump_print>:
{
   12384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12388:	b089      	sub	sp, #36	; 0x24
   1238a:	4607      	mov	r7, r0
   1238c:	460e      	mov	r6, r1
   1238e:	4691      	mov	r9, r2
   12390:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
   12392:	f00f f945 	bl	21620 <log_msg_str_get>
   12396:	4602      	mov	r2, r0
   12398:	490e      	ldr	r1, [pc, #56]	; (123d4 <hexdump_print+0x50>)
   1239a:	4630      	mov	r0, r6
   1239c:	f7ff fe9c 	bl	120d8 <print_formatted>
	uint32_t offset = 0U;
   123a0:	2400      	movs	r4, #0
		length = sizeof(buf);
   123a2:	2510      	movs	r5, #16
   123a4:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   123a6:	4623      	mov	r3, r4
   123a8:	aa03      	add	r2, sp, #12
   123aa:	eb0d 0105 	add.w	r1, sp, r5
   123ae:	4638      	mov	r0, r7
   123b0:	f00f f9e4 	bl	2177c <log_msg_hexdump_data_get>
		if (length) {
   123b4:	9a03      	ldr	r2, [sp, #12]
   123b6:	b152      	cbz	r2, 123ce <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   123b8:	f8cd 8000 	str.w	r8, [sp]
   123bc:	464b      	mov	r3, r9
   123be:	eb0d 0105 	add.w	r1, sp, r5
   123c2:	4630      	mov	r0, r6
   123c4:	f7ff ff0a 	bl	121dc <hexdump_line_print>
			offset += length;
   123c8:	9d03      	ldr	r5, [sp, #12]
   123ca:	442c      	add	r4, r5
		length = sizeof(buf);
   123cc:	e7e9      	b.n	123a2 <hexdump_print+0x1e>
}
   123ce:	b009      	add	sp, #36	; 0x24
   123d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   123d4:	0002624c 	.word	0x0002624c

000123d8 <raw_string_print>:
{
   123d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   123da:	b083      	sub	sp, #12
   123dc:	4606      	mov	r6, r0
   123de:	460c      	mov	r4, r1
	bool eol = false;
   123e0:	2700      	movs	r7, #0
	size_t offset = 0;
   123e2:	463d      	mov	r5, r7
   123e4:	e00d      	b.n	12402 <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
   123e6:	68a2      	ldr	r2, [r4, #8]
   123e8:	4413      	add	r3, r2
   123ea:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   123ee:	2f0a      	cmp	r7, #10
   123f0:	bf14      	ite	ne
   123f2:	2700      	movne	r7, #0
   123f4:	2701      	moveq	r7, #1
		log_output_flush(output);
   123f6:	4620      	mov	r0, r4
   123f8:	f00f fb48 	bl	21a8c <log_output_flush>
		offset += length;
   123fc:	9b01      	ldr	r3, [sp, #4]
   123fe:	441d      	add	r5, r3
	} while (length > 0);
   12400:	b173      	cbz	r3, 12420 <raw_string_print+0x48>
		length = output->size;
   12402:	68e3      	ldr	r3, [r4, #12]
   12404:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   12406:	462b      	mov	r3, r5
   12408:	aa01      	add	r2, sp, #4
   1240a:	68a1      	ldr	r1, [r4, #8]
   1240c:	4630      	mov	r0, r6
   1240e:	f00f f9b5 	bl	2177c <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   12412:	6863      	ldr	r3, [r4, #4]
   12414:	9a01      	ldr	r2, [sp, #4]
   12416:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   12418:	9b01      	ldr	r3, [sp, #4]
   1241a:	2b00      	cmp	r3, #0
   1241c:	d0eb      	beq.n	123f6 <raw_string_print+0x1e>
   1241e:	e7e2      	b.n	123e6 <raw_string_print+0xe>
	if (eol) {
   12420:	b90f      	cbnz	r7, 12426 <raw_string_print+0x4e>
}
   12422:	b003      	add	sp, #12
   12424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   12426:	4902      	ldr	r1, [pc, #8]	; (12430 <raw_string_print+0x58>)
   12428:	4620      	mov	r0, r4
   1242a:	f7ff fe55 	bl	120d8 <print_formatted>
}
   1242e:	e7f8      	b.n	12422 <raw_string_print+0x4a>
   12430:	0002627c 	.word	0x0002627c

00012434 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   12434:	b570      	push	{r4, r5, r6, lr}
   12436:	b082      	sub	sp, #8
   12438:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   1243a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1243c:	f242 730f 	movw	r3, #9999	; 0x270f
   12440:	428b      	cmp	r3, r1
   12442:	bf28      	it	cs
   12444:	460b      	movcs	r3, r1
   12446:	4a0e      	ldr	r2, [pc, #56]	; (12480 <log_output_dropped_process+0x4c>)
   12448:	2105      	movs	r1, #5
   1244a:	4668      	mov	r0, sp
   1244c:	f00e fc9e 	bl	20d8c <snprintk>
   12450:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   12452:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12454:	685b      	ldr	r3, [r3, #4]
   12456:	220b      	movs	r2, #11
   12458:	490a      	ldr	r1, [pc, #40]	; (12484 <log_output_dropped_process+0x50>)
   1245a:	4628      	mov	r0, r5
   1245c:	f00f f996 	bl	2178c <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   12460:	6863      	ldr	r3, [r4, #4]
   12462:	685b      	ldr	r3, [r3, #4]
   12464:	4632      	mov	r2, r6
   12466:	4669      	mov	r1, sp
   12468:	4628      	mov	r0, r5
   1246a:	f00f f98f 	bl	2178c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   1246e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   12470:	685b      	ldr	r3, [r3, #4]
   12472:	221b      	movs	r2, #27
   12474:	4904      	ldr	r1, [pc, #16]	; (12488 <log_output_dropped_process+0x54>)
   12476:	4628      	mov	r0, r5
   12478:	f00f f988 	bl	2178c <buffer_write>
}
   1247c:	b002      	add	sp, #8
   1247e:	bd70      	pop	{r4, r5, r6, pc}
   12480:	000275e8 	.word	0x000275e8
   12484:	000262d0 	.word	0x000262d0
   12488:	000262b4 	.word	0x000262b4

0001248c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1248c:	4b07      	ldr	r3, [pc, #28]	; (124ac <log_output_timestamp_freq_set+0x20>)
   1248e:	2201      	movs	r2, #1
   12490:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12492:	4b07      	ldr	r3, [pc, #28]	; (124b0 <log_output_timestamp_freq_set+0x24>)
   12494:	4298      	cmp	r0, r3
   12496:	d905      	bls.n	124a4 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   12498:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1249a:	4a04      	ldr	r2, [pc, #16]	; (124ac <log_output_timestamp_freq_set+0x20>)
   1249c:	6813      	ldr	r3, [r2, #0]
   1249e:	005b      	lsls	r3, r3, #1
   124a0:	6013      	str	r3, [r2, #0]
   124a2:	e7f6      	b.n	12492 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   124a4:	4b03      	ldr	r3, [pc, #12]	; (124b4 <log_output_timestamp_freq_set+0x28>)
   124a6:	6018      	str	r0, [r3, #0]
}
   124a8:	4770      	bx	lr
   124aa:	bf00      	nop
   124ac:	200022cc 	.word	0x200022cc
   124b0:	000f4240 	.word	0x000f4240
   124b4:	200022c8 	.word	0x200022c8

000124b8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   124b8:	b570      	push	{r4, r5, r6, lr}
   124ba:	4606      	mov	r6, r0
   124bc:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   124be:	2400      	movs	r4, #0
   124c0:	42ac      	cmp	r4, r5
   124c2:	d207      	bcs.n	124d4 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
   124c4:	4b04      	ldr	r3, [pc, #16]	; (124d8 <char_out+0x20>)
   124c6:	6818      	ldr	r0, [r3, #0]
   124c8:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   124ca:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   124cc:	685b      	ldr	r3, [r3, #4]
   124ce:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   124d0:	3401      	adds	r4, #1
   124d2:	e7f5      	b.n	124c0 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   124d4:	4628      	mov	r0, r5
   124d6:	bd70      	pop	{r4, r5, r6, pc}
   124d8:	200022e4 	.word	0x200022e4

000124dc <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   124dc:	4b01      	ldr	r3, [pc, #4]	; (124e4 <log_backend_uart_init+0x8>)
   124de:	4a02      	ldr	r2, [pc, #8]	; (124e8 <log_backend_uart_init+0xc>)
   124e0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   124e2:	4770      	bx	lr
   124e4:	200022e4 	.word	0x200022e4
   124e8:	00025bb4 	.word	0x00025bb4

000124ec <panic>:

static void panic(struct log_backend const *const backend)
{
   124ec:	b508      	push	{r3, lr}
	in_panic = true;
   124ee:	4b03      	ldr	r3, [pc, #12]	; (124fc <panic+0x10>)
   124f0:	2201      	movs	r2, #1
   124f2:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   124f4:	4802      	ldr	r0, [pc, #8]	; (12500 <panic+0x14>)
   124f6:	f00f fac9 	bl	21a8c <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   124fa:	bd08      	pop	{r3, pc}
   124fc:	20003a08 	.word	0x20003a08
   12500:	0002632c 	.word	0x0002632c

00012504 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   12504:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   12506:	4802      	ldr	r0, [pc, #8]	; (12510 <dropped+0xc>)
   12508:	f7ff ff94 	bl	12434 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   1250c:	bd08      	pop	{r3, pc}
   1250e:	bf00      	nop
   12510:	0002632c 	.word	0x0002632c

00012514 <put>:
{
   12514:	b510      	push	{r4, lr}
   12516:	460c      	mov	r4, r1
	log_msg_get(msg);
   12518:	4608      	mov	r0, r1
   1251a:	f00f f85f 	bl	215dc <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1251e:	220f      	movs	r2, #15
   12520:	4621      	mov	r1, r4
   12522:	4803      	ldr	r0, [pc, #12]	; (12530 <put+0x1c>)
   12524:	f00f fadb 	bl	21ade <log_output_msg_process>
	log_msg_put(msg);
   12528:	4620      	mov	r0, r4
   1252a:	f00f f87b 	bl	21624 <log_msg_put>
}
   1252e:	bd10      	pop	{r4, pc}
   12530:	0002632c 	.word	0x0002632c

00012534 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   12534:	b570      	push	{r4, r5, r6, lr}
   12536:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   12538:	4b2c      	ldr	r3, [pc, #176]	; (125ec <pm_system_resume+0xb8>)
   1253a:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1253c:	f004 031f 	and.w	r3, r4, #31
   12540:	2201      	movs	r2, #1
   12542:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12544:	0961      	lsrs	r1, r4, #5
   12546:	4b2a      	ldr	r3, [pc, #168]	; (125f0 <pm_system_resume+0xbc>)
   12548:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1254c:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1254e:	f3bf 8f5b 	dmb	ish
   12552:	e853 1f00 	ldrex	r1, [r3]
   12556:	ea01 0500 	and.w	r5, r1, r0
   1255a:	e843 5600 	strex	r6, r5, [r3]
   1255e:	2e00      	cmp	r6, #0
   12560:	d1f7      	bne.n	12552 <pm_system_resume+0x1e>
   12562:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12566:	420a      	tst	r2, r1
   12568:	d03d      	beq.n	125e6 <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
   1256a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1256e:	009a      	lsls	r2, r3, #2
   12570:	4b20      	ldr	r3, [pc, #128]	; (125f4 <pm_system_resume+0xc0>)
   12572:	4413      	add	r3, r2
   12574:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12578:	ab04      	add	r3, sp, #16
   1257a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1257e:	4b1e      	ldr	r3, [pc, #120]	; (125f8 <pm_system_resume+0xc4>)
   12580:	b163      	cbz	r3, 1259c <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   12582:	f00f fcac 	bl	21ede <pm_power_state_exit_post_ops>
	__asm__ volatile(
   12586:	f04f 0340 	mov.w	r3, #64	; 0x40
   1258a:	f3ef 8611 	mrs	r6, BASEPRI
   1258e:	f383 8812 	msr	BASEPRI_MAX, r3
   12592:	f3bf 8f6f 	isb	sy
   12596:	4b19      	ldr	r3, [pc, #100]	; (125fc <pm_system_resume+0xc8>)
   12598:	681d      	ldr	r5, [r3, #0]
   1259a:	e00a      	b.n	125b2 <pm_system_resume+0x7e>
	__asm__ volatile(
   1259c:	2300      	movs	r3, #0
   1259e:	f383 8811 	msr	BASEPRI, r3
   125a2:	f3bf 8f6f 	isb	sy
}
   125a6:	e7ee      	b.n	12586 <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   125a8:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   125aa:	b10d      	cbz	r5, 125b0 <pm_system_resume+0x7c>
	return node->next;
   125ac:	682b      	ldr	r3, [r5, #0]
   125ae:	b16b      	cbz	r3, 125cc <pm_system_resume+0x98>
{
   125b0:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   125b2:	b15d      	cbz	r5, 125cc <pm_system_resume+0x98>
			callback = notifier->state_exit;
   125b4:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   125b6:	2a00      	cmp	r2, #0
   125b8:	d0f6      	beq.n	125a8 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
   125ba:	4b0c      	ldr	r3, [pc, #48]	; (125ec <pm_system_resume+0xb8>)
   125bc:	7d1b      	ldrb	r3, [r3, #20]
   125be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   125c2:	0099      	lsls	r1, r3, #2
   125c4:	4b0b      	ldr	r3, [pc, #44]	; (125f4 <pm_system_resume+0xc0>)
   125c6:	5c58      	ldrb	r0, [r3, r1]
   125c8:	4790      	blx	r2
   125ca:	e7ed      	b.n	125a8 <pm_system_resume+0x74>
	__asm__ volatile(
   125cc:	f386 8811 	msr	BASEPRI, r6
   125d0:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   125d4:	4807      	ldr	r0, [pc, #28]	; (125f4 <pm_system_resume+0xc0>)
   125d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   125da:	00a2      	lsls	r2, r4, #2
   125dc:	1881      	adds	r1, r0, r2
   125de:	2300      	movs	r3, #0
   125e0:	5083      	str	r3, [r0, r2]
   125e2:	604b      	str	r3, [r1, #4]
   125e4:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
   125e6:	b004      	add	sp, #16
   125e8:	bd70      	pop	{r4, r5, r6, pc}
   125ea:	bf00      	nop
   125ec:	20002fe8 	.word	0x20002fe8
   125f0:	200022f4 	.word	0x200022f4
   125f4:	200022f8 	.word	0x200022f8
   125f8:	00021edf 	.word	0x00021edf
   125fc:	200022ec 	.word	0x200022ec

00012600 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   12600:	b5f0      	push	{r4, r5, r6, r7, lr}
   12602:	b089      	sub	sp, #36	; 0x24
   12604:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   12606:	4b55      	ldr	r3, [pc, #340]	; (1275c <pm_system_suspend+0x15c>)
   12608:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1260a:	f004 031f 	and.w	r3, r4, #31
   1260e:	2201      	movs	r2, #1
   12610:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12612:	0961      	lsrs	r1, r4, #5
   12614:	4b52      	ldr	r3, [pc, #328]	; (12760 <pm_system_suspend+0x160>)
   12616:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1261a:	f3bf 8f5b 	dmb	ish
   1261e:	e853 1f00 	ldrex	r1, [r3]
   12622:	ea41 0002 	orr.w	r0, r1, r2
   12626:	e843 0600 	strex	r6, r0, [r3]
   1262a:	2e00      	cmp	r6, #0
   1262c:	d1f7      	bne.n	1261e <pm_system_suspend+0x1e>
   1262e:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   12632:	420a      	tst	r2, r1
   12634:	d017      	beq.n	12666 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   12636:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1263a:	4a4a      	ldr	r2, [pc, #296]	; (12764 <pm_system_suspend+0x164>)
   1263c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   12640:	2b00      	cmp	r3, #0
   12642:	f000 8088 	beq.w	12756 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   12646:	f1b5 3fff 	cmp.w	r5, #4294967295
   1264a:	d11c      	bne.n	12686 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1264c:	f00a fdcc 	bl	1d1e8 <k_sched_lock>
	__asm__ volatile(
   12650:	f04f 0340 	mov.w	r3, #64	; 0x40
   12654:	f3ef 8611 	mrs	r6, BASEPRI
   12658:	f383 8812 	msr	BASEPRI_MAX, r3
   1265c:	f3bf 8f6f 	isb	sy
	return list->head;
   12660:	4b41      	ldr	r3, [pc, #260]	; (12768 <pm_system_suspend+0x168>)
   12662:	681d      	ldr	r5, [r3, #0]
   12664:	e02a      	b.n	126bc <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   12666:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   1266a:	4b3e      	ldr	r3, [pc, #248]	; (12764 <pm_system_suspend+0x164>)
   1266c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   12670:	466f      	mov	r7, sp
   12672:	462a      	mov	r2, r5
   12674:	4621      	mov	r1, r4
   12676:	4638      	mov	r0, r7
   12678:	f00f fa70 	bl	21b5c <pm_policy_next_state>
   1267c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   12680:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   12684:	e7d7      	b.n	12636 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
   12686:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1268a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1268e:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12690:	0c59      	lsrs	r1, r3, #17
   12692:	03d8      	lsls	r0, r3, #15
   12694:	4e35      	ldr	r6, [pc, #212]	; (1276c <pm_system_suspend+0x16c>)
   12696:	4a36      	ldr	r2, [pc, #216]	; (12770 <pm_system_suspend+0x170>)
   12698:	2300      	movs	r3, #0
   1269a:	1980      	adds	r0, r0, r6
   1269c:	f04f 0600 	mov.w	r6, #0
   126a0:	eb46 0101 	adc.w	r1, r6, r1
   126a4:	f7ee f922 	bl	8ec <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   126a8:	2101      	movs	r1, #1
   126aa:	1a28      	subs	r0, r5, r0
   126ac:	f013 f842 	bl	25734 <z_set_timeout_expiry>
   126b0:	e7cc      	b.n	1264c <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   126b2:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   126b4:	b10d      	cbz	r5, 126ba <pm_system_suspend+0xba>
	return node->next;
   126b6:	682b      	ldr	r3, [r5, #0]
   126b8:	b16b      	cbz	r3, 126d6 <pm_system_suspend+0xd6>
{
   126ba:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   126bc:	b15d      	cbz	r5, 126d6 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
   126be:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   126c0:	2a00      	cmp	r2, #0
   126c2:	d0f6      	beq.n	126b2 <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
   126c4:	4b25      	ldr	r3, [pc, #148]	; (1275c <pm_system_suspend+0x15c>)
   126c6:	7d1b      	ldrb	r3, [r3, #20]
   126c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   126cc:	4925      	ldr	r1, [pc, #148]	; (12764 <pm_system_suspend+0x164>)
   126ce:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   126d2:	4790      	blx	r2
   126d4:	e7ed      	b.n	126b2 <pm_system_suspend+0xb2>
	__asm__ volatile(
   126d6:	f386 8811 	msr	BASEPRI, r6
   126da:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   126de:	f004 031f 	and.w	r3, r4, #31
   126e2:	2101      	movs	r1, #1
   126e4:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   126e6:	0963      	lsrs	r3, r4, #5
   126e8:	4a22      	ldr	r2, [pc, #136]	; (12774 <pm_system_suspend+0x174>)
   126ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   126ee:	f3bf 8f5b 	dmb	ish
   126f2:	e853 2f00 	ldrex	r2, [r3]
   126f6:	430a      	orrs	r2, r1
   126f8:	e843 2000 	strex	r0, r2, [r3]
   126fc:	2800      	cmp	r0, #0
   126fe:	d1f8      	bne.n	126f2 <pm_system_suspend+0xf2>
   12700:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   12704:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12708:	4a16      	ldr	r2, [pc, #88]	; (12764 <pm_system_suspend+0x164>)
   1270a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1270e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12712:	ab08      	add	r3, sp, #32
   12714:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   12718:	4b17      	ldr	r3, [pc, #92]	; (12778 <pm_system_suspend+0x178>)
   1271a:	b10b      	cbz	r3, 12720 <pm_system_suspend+0x120>
		pm_power_state_set(info);
   1271c:	f00f fbcc 	bl	21eb8 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   12720:	f7ff ff08 	bl	12534 <pm_system_resume>
	k_sched_unlock();
   12724:	f00a ff5e 	bl	1d5e4 <k_sched_unlock>
	bool ret = true;
   12728:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   1272a:	f004 021f 	and.w	r2, r4, #31
   1272e:	2301      	movs	r3, #1
   12730:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12732:	0964      	lsrs	r4, r4, #5
   12734:	4a0a      	ldr	r2, [pc, #40]	; (12760 <pm_system_suspend+0x160>)
   12736:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   1273a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1273c:	f3bf 8f5b 	dmb	ish
   12740:	e854 2f00 	ldrex	r2, [r4]
   12744:	401a      	ands	r2, r3
   12746:	e844 2100 	strex	r1, r2, [r4]
   1274a:	2900      	cmp	r1, #0
   1274c:	d1f8      	bne.n	12740 <pm_system_suspend+0x140>
   1274e:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   12752:	b009      	add	sp, #36	; 0x24
   12754:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
   12756:	2000      	movs	r0, #0
   12758:	e7e7      	b.n	1272a <pm_system_suspend+0x12a>
   1275a:	bf00      	nop
   1275c:	20002fe8 	.word	0x20002fe8
   12760:	20002304 	.word	0x20002304
   12764:	200022f8 	.word	0x200022f8
   12768:	200022ec 	.word	0x200022ec
   1276c:	000f423f 	.word	0x000f423f
   12770:	000f4240 	.word	0x000f4240
   12774:	200022f4 	.word	0x200022f4
   12778:	00021eb9 	.word	0x00021eb9

0001277c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1277c:	b4f0      	push	{r4, r5, r6, r7}
   1277e:	b08c      	sub	sp, #48	; 0x30
   12780:	4607      	mov	r7, r0
   12782:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   12784:	ac01      	add	r4, sp, #4
   12786:	4d2a      	ldr	r5, [pc, #168]	; (12830 <tc_aes128_set_encrypt_key+0xb4>)
   12788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1278a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1278c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1278e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12790:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   12794:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   12798:	2f00      	cmp	r7, #0
   1279a:	d045      	beq.n	12828 <tc_aes128_set_encrypt_key+0xac>
   1279c:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1279e:	2e00      	cmp	r6, #0
   127a0:	d044      	beq.n	1282c <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   127a2:	2300      	movs	r3, #0
   127a4:	e00f      	b.n	127c6 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   127a6:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   127aa:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   127ae:	784a      	ldrb	r2, [r1, #1]
   127b0:	0412      	lsls	r2, r2, #16
   127b2:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   127b6:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   127b8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   127bc:	78c9      	ldrb	r1, [r1, #3]
   127be:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   127c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   127c4:	3301      	adds	r3, #1
   127c6:	2b03      	cmp	r3, #3
   127c8:	d9ed      	bls.n	127a6 <tc_aes128_set_encrypt_key+0x2a>
   127ca:	e006      	b.n	127da <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   127cc:	1f19      	subs	r1, r3, #4
   127ce:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   127d2:	404a      	eors	r2, r1
   127d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   127d8:	3301      	adds	r3, #1
   127da:	2b2b      	cmp	r3, #43	; 0x2b
   127dc:	d820      	bhi.n	12820 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   127de:	1e5a      	subs	r2, r3, #1
   127e0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   127e4:	f013 0f03 	tst.w	r3, #3
   127e8:	d1f0      	bne.n	127cc <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   127ea:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   127ee:	0e11      	lsrs	r1, r2, #24
   127f0:	4c10      	ldr	r4, [pc, #64]	; (12834 <tc_aes128_set_encrypt_key+0xb8>)
   127f2:	5c65      	ldrb	r5, [r4, r1]
   127f4:	f3c2 4107 	ubfx	r1, r2, #16, #8
   127f8:	5c61      	ldrb	r1, [r4, r1]
   127fa:	0409      	lsls	r1, r1, #16
   127fc:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   12800:	f3c2 2507 	ubfx	r5, r2, #8, #8
   12804:	5d65      	ldrb	r5, [r4, r5]
   12806:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1280a:	b2d2      	uxtb	r2, r2
   1280c:	5ca2      	ldrb	r2, [r4, r2]
   1280e:	4311      	orrs	r1, r2
   12810:	f023 0203 	bic.w	r2, r3, #3
   12814:	ac0c      	add	r4, sp, #48	; 0x30
   12816:	4422      	add	r2, r4
   12818:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   1281c:	404a      	eors	r2, r1
   1281e:	e7d5      	b.n	127cc <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   12820:	2001      	movs	r0, #1
}
   12822:	b00c      	add	sp, #48	; 0x30
   12824:	bcf0      	pop	{r4, r5, r6, r7}
   12826:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12828:	2000      	movs	r0, #0
   1282a:	e7fa      	b.n	12822 <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   1282c:	2000      	movs	r0, #0
   1282e:	e7f8      	b.n	12822 <tc_aes128_set_encrypt_key+0xa6>
   12830:	00025ee0 	.word	0x00025ee0
   12834:	00026360 	.word	0x00026360

00012838 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   12838:	2800      	cmp	r0, #0
   1283a:	f000 839a 	beq.w	12f72 <tc_aes_encrypt+0x73a>
{
   1283e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12842:	b088      	sub	sp, #32
   12844:	4616      	mov	r6, r2
   12846:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   12848:	2900      	cmp	r1, #0
   1284a:	f000 8394 	beq.w	12f76 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1284e:	2a00      	cmp	r2, #0
   12850:	f000 8393 	beq.w	12f7a <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   12854:	2310      	movs	r3, #16
   12856:	460a      	mov	r2, r1
   12858:	4619      	mov	r1, r3
   1285a:	eb0d 0003 	add.w	r0, sp, r3
   1285e:	f00f f982 	bl	21b66 <_copy>
	add_round_key(state, s->words);
   12862:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12864:	6833      	ldr	r3, [r6, #0]
   12866:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1286a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1286e:	f88d 2010 	strb.w	r2, [sp, #16]
   12872:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12876:	f89d 1011 	ldrb.w	r1, [sp, #17]
   1287a:	404a      	eors	r2, r1
   1287c:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12880:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12884:	f89d 1012 	ldrb.w	r1, [sp, #18]
   12888:	404a      	eors	r2, r1
   1288a:	f88d 2012 	strb.w	r2, [sp, #18]
   1288e:	b2db      	uxtb	r3, r3
   12890:	f89d 2013 	ldrb.w	r2, [sp, #19]
   12894:	4053      	eors	r3, r2
   12896:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1289a:	6873      	ldr	r3, [r6, #4]
   1289c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   128a0:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   128a4:	f88d 2014 	strb.w	r2, [sp, #20]
   128a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
   128ac:	f89d 1015 	ldrb.w	r1, [sp, #21]
   128b0:	404a      	eors	r2, r1
   128b2:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   128b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   128ba:	f89d 1016 	ldrb.w	r1, [sp, #22]
   128be:	404a      	eors	r2, r1
   128c0:	f88d 2016 	strb.w	r2, [sp, #22]
   128c4:	b2db      	uxtb	r3, r3
   128c6:	f89d 2017 	ldrb.w	r2, [sp, #23]
   128ca:	4053      	eors	r3, r2
   128cc:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   128d0:	68b3      	ldr	r3, [r6, #8]
   128d2:	f89d 2018 	ldrb.w	r2, [sp, #24]
   128d6:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   128da:	f88d 2018 	strb.w	r2, [sp, #24]
   128de:	f3c3 4207 	ubfx	r2, r3, #16, #8
   128e2:	f89d 1019 	ldrb.w	r1, [sp, #25]
   128e6:	404a      	eors	r2, r1
   128e8:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   128ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
   128f0:	f89d 101a 	ldrb.w	r1, [sp, #26]
   128f4:	404a      	eors	r2, r1
   128f6:	f88d 201a 	strb.w	r2, [sp, #26]
   128fa:	b2db      	uxtb	r3, r3
   128fc:	f89d 201b 	ldrb.w	r2, [sp, #27]
   12900:	4053      	eors	r3, r2
   12902:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12906:	68f3      	ldr	r3, [r6, #12]
   12908:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1290c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12910:	f88d 201c 	strb.w	r2, [sp, #28]
   12914:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12918:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1291c:	404a      	eors	r2, r1
   1291e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12922:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12926:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1292a:	404a      	eors	r2, r1
   1292c:	f88d 201e 	strb.w	r2, [sp, #30]
   12930:	b2db      	uxtb	r3, r3
   12932:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12936:	4053      	eors	r3, r2
   12938:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   1293c:	2400      	movs	r4, #0
}
   1293e:	e239      	b.n	12db4 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12940:	f89d 3010 	ldrb.w	r3, [sp, #16]
   12944:	f88d 3000 	strb.w	r3, [sp]
   12948:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1294c:	f88d 3001 	strb.w	r3, [sp, #1]
   12950:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12954:	f88d 3002 	strb.w	r3, [sp, #2]
   12958:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1295c:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   12960:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12964:	f88d 3004 	strb.w	r3, [sp, #4]
   12968:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1296c:	f88d 3005 	strb.w	r3, [sp, #5]
   12970:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12974:	f88d 3006 	strb.w	r3, [sp, #6]
   12978:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1297c:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12980:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12984:	f88d 3008 	strb.w	r3, [sp, #8]
   12988:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1298c:	f88d 3009 	strb.w	r3, [sp, #9]
   12990:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12994:	f88d 300a 	strb.w	r3, [sp, #10]
   12998:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1299c:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   129a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   129a4:	f88d 300c 	strb.w	r3, [sp, #12]
   129a8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   129ac:	f88d 300d 	strb.w	r3, [sp, #13]
   129b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   129b4:	f88d 300e 	strb.w	r3, [sp, #14]
   129b8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   129bc:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   129c0:	2310      	movs	r3, #16
   129c2:	466a      	mov	r2, sp
   129c4:	4619      	mov	r1, r3
   129c6:	eb0d 0003 	add.w	r0, sp, r3
   129ca:	f00f f8cc 	bl	21b66 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   129ce:	f89d 0010 	ldrb.w	r0, [sp, #16]
   129d2:	f00f f8d9 	bl	21b88 <_double_byte>
   129d6:	4680      	mov	r8, r0
   129d8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   129dc:	f00f f8d4 	bl	21b88 <_double_byte>
   129e0:	4601      	mov	r1, r0
   129e2:	f89d 0011 	ldrb.w	r0, [sp, #17]
   129e6:	f89d 2012 	ldrb.w	r2, [sp, #18]
   129ea:	f89d 3013 	ldrb.w	r3, [sp, #19]
   129ee:	4041      	eors	r1, r0
   129f0:	ea88 0801 	eor.w	r8, r8, r1
   129f4:	ea82 0208 	eor.w	r2, r2, r8
   129f8:	4053      	eors	r3, r2
   129fa:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   129fe:	f89d 8010 	ldrb.w	r8, [sp, #16]
   12a02:	f00f f8c1 	bl	21b88 <_double_byte>
   12a06:	ea88 0800 	eor.w	r8, r8, r0
   12a0a:	fa5f f888 	uxtb.w	r8, r8
   12a0e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12a12:	f00f f8b9 	bl	21b88 <_double_byte>
   12a16:	4602      	mov	r2, r0
   12a18:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12a1c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12a20:	4042      	eors	r2, r0
   12a22:	ea88 0802 	eor.w	r8, r8, r2
   12a26:	ea83 0308 	eor.w	r3, r3, r8
   12a2a:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12a2e:	f89d 8010 	ldrb.w	r8, [sp, #16]
   12a32:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12a36:	ea88 0803 	eor.w	r8, r8, r3
   12a3a:	f00f f8a5 	bl	21b88 <_double_byte>
   12a3e:	ea88 0800 	eor.w	r8, r8, r0
   12a42:	fa5f f888 	uxtb.w	r8, r8
   12a46:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12a4a:	f00f f89d 	bl	21b88 <_double_byte>
   12a4e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12a52:	4058      	eors	r0, r3
   12a54:	ea88 0800 	eor.w	r8, r8, r0
   12a58:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12a5c:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12a60:	f00f f892 	bl	21b88 <_double_byte>
   12a64:	f89d 2010 	ldrb.w	r2, [sp, #16]
   12a68:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12a6c:	f89d 8012 	ldrb.w	r8, [sp, #18]
   12a70:	4050      	eors	r0, r2
   12a72:	4043      	eors	r3, r0
   12a74:	ea88 0803 	eor.w	r8, r8, r3
   12a78:	fa5f f888 	uxtb.w	r8, r8
   12a7c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12a80:	f00f f882 	bl	21b88 <_double_byte>
   12a84:	ea88 0800 	eor.w	r8, r8, r0
   12a88:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12a8c:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12a90:	f00f f87a 	bl	21b88 <_double_byte>
   12a94:	4680      	mov	r8, r0
   12a96:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12a9a:	f00f f875 	bl	21b88 <_double_byte>
   12a9e:	4601      	mov	r1, r0
   12aa0:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12aa4:	f89d 2016 	ldrb.w	r2, [sp, #22]
   12aa8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12aac:	4041      	eors	r1, r0
   12aae:	ea88 0801 	eor.w	r8, r8, r1
   12ab2:	ea82 0208 	eor.w	r2, r2, r8
   12ab6:	4053      	eors	r3, r2
   12ab8:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12abc:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12ac0:	f00f f862 	bl	21b88 <_double_byte>
   12ac4:	ea88 0800 	eor.w	r8, r8, r0
   12ac8:	fa5f f888 	uxtb.w	r8, r8
   12acc:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12ad0:	f00f f85a 	bl	21b88 <_double_byte>
   12ad4:	4602      	mov	r2, r0
   12ad6:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12ada:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12ade:	4042      	eors	r2, r0
   12ae0:	ea88 0802 	eor.w	r8, r8, r2
   12ae4:	ea83 0308 	eor.w	r3, r3, r8
   12ae8:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12aec:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12af0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12af4:	ea88 0803 	eor.w	r8, r8, r3
   12af8:	f00f f846 	bl	21b88 <_double_byte>
   12afc:	ea88 0800 	eor.w	r8, r8, r0
   12b00:	fa5f f888 	uxtb.w	r8, r8
   12b04:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12b08:	f00f f83e 	bl	21b88 <_double_byte>
   12b0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12b10:	4058      	eors	r0, r3
   12b12:	ea88 0800 	eor.w	r8, r8, r0
   12b16:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12b1a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12b1e:	f00f f833 	bl	21b88 <_double_byte>
   12b22:	f89d 2014 	ldrb.w	r2, [sp, #20]
   12b26:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12b2a:	f89d 8016 	ldrb.w	r8, [sp, #22]
   12b2e:	4050      	eors	r0, r2
   12b30:	4043      	eors	r3, r0
   12b32:	ea88 0803 	eor.w	r8, r8, r3
   12b36:	fa5f f888 	uxtb.w	r8, r8
   12b3a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12b3e:	f00f f823 	bl	21b88 <_double_byte>
   12b42:	ea88 0800 	eor.w	r8, r8, r0
   12b46:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12b4a:	f89d 0018 	ldrb.w	r0, [sp, #24]
   12b4e:	f00f f81b 	bl	21b88 <_double_byte>
   12b52:	4680      	mov	r8, r0
   12b54:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12b58:	f00f f816 	bl	21b88 <_double_byte>
   12b5c:	4601      	mov	r1, r0
   12b5e:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12b62:	f89d 201a 	ldrb.w	r2, [sp, #26]
   12b66:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12b6a:	4041      	eors	r1, r0
   12b6c:	ea88 0801 	eor.w	r8, r8, r1
   12b70:	ea82 0208 	eor.w	r2, r2, r8
   12b74:	4053      	eors	r3, r2
   12b76:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12b7a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   12b7e:	f00f f803 	bl	21b88 <_double_byte>
   12b82:	ea88 0800 	eor.w	r8, r8, r0
   12b86:	fa5f f888 	uxtb.w	r8, r8
   12b8a:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12b8e:	f00e fffb 	bl	21b88 <_double_byte>
   12b92:	4602      	mov	r2, r0
   12b94:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12b98:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12b9c:	4042      	eors	r2, r0
   12b9e:	ea88 0802 	eor.w	r8, r8, r2
   12ba2:	ea83 0308 	eor.w	r3, r3, r8
   12ba6:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12baa:	f89d 8018 	ldrb.w	r8, [sp, #24]
   12bae:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12bb2:	ea88 0803 	eor.w	r8, r8, r3
   12bb6:	f00e ffe7 	bl	21b88 <_double_byte>
   12bba:	ea88 0800 	eor.w	r8, r8, r0
   12bbe:	fa5f f888 	uxtb.w	r8, r8
   12bc2:	f89d 001b 	ldrb.w	r0, [sp, #27]
   12bc6:	f00e ffdf 	bl	21b88 <_double_byte>
   12bca:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12bce:	4058      	eors	r0, r3
   12bd0:	ea88 0800 	eor.w	r8, r8, r0
   12bd4:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12bd8:	f89d 0018 	ldrb.w	r0, [sp, #24]
   12bdc:	f00e ffd4 	bl	21b88 <_double_byte>
   12be0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12be4:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12be8:	f89d 801a 	ldrb.w	r8, [sp, #26]
   12bec:	4050      	eors	r0, r2
   12bee:	4043      	eors	r3, r0
   12bf0:	ea88 0803 	eor.w	r8, r8, r3
   12bf4:	fa5f f888 	uxtb.w	r8, r8
   12bf8:	f89d 001b 	ldrb.w	r0, [sp, #27]
   12bfc:	f00e ffc4 	bl	21b88 <_double_byte>
   12c00:	ea88 0800 	eor.w	r8, r8, r0
   12c04:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12c08:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12c0c:	f00e ffbc 	bl	21b88 <_double_byte>
   12c10:	4680      	mov	r8, r0
   12c12:	f89d 001d 	ldrb.w	r0, [sp, #29]
   12c16:	f00e ffb7 	bl	21b88 <_double_byte>
   12c1a:	4601      	mov	r1, r0
   12c1c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   12c20:	f89d 201e 	ldrb.w	r2, [sp, #30]
   12c24:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12c28:	4041      	eors	r1, r0
   12c2a:	ea88 0801 	eor.w	r8, r8, r1
   12c2e:	ea82 0208 	eor.w	r2, r2, r8
   12c32:	4053      	eors	r3, r2
   12c34:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12c38:	f89d 801c 	ldrb.w	r8, [sp, #28]
   12c3c:	f00e ffa4 	bl	21b88 <_double_byte>
   12c40:	ea88 0800 	eor.w	r8, r8, r0
   12c44:	fa5f f888 	uxtb.w	r8, r8
   12c48:	f89d 001e 	ldrb.w	r0, [sp, #30]
   12c4c:	f00e ff9c 	bl	21b88 <_double_byte>
   12c50:	4602      	mov	r2, r0
   12c52:	f89d 001e 	ldrb.w	r0, [sp, #30]
   12c56:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12c5a:	4042      	eors	r2, r0
   12c5c:	ea88 0802 	eor.w	r8, r8, r2
   12c60:	ea83 0308 	eor.w	r3, r3, r8
   12c64:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12c68:	f89d 801c 	ldrb.w	r8, [sp, #28]
   12c6c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12c70:	ea88 0803 	eor.w	r8, r8, r3
   12c74:	f00e ff88 	bl	21b88 <_double_byte>
   12c78:	ea88 0800 	eor.w	r8, r8, r0
   12c7c:	fa5f f888 	uxtb.w	r8, r8
   12c80:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12c84:	f00e ff80 	bl	21b88 <_double_byte>
   12c88:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12c8c:	4058      	eors	r0, r3
   12c8e:	ea88 0800 	eor.w	r8, r8, r0
   12c92:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12c96:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12c9a:	f00e ff75 	bl	21b88 <_double_byte>
   12c9e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12ca2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12ca6:	f89d 801e 	ldrb.w	r8, [sp, #30]
   12caa:	4050      	eors	r0, r2
   12cac:	4043      	eors	r3, r0
   12cae:	ea88 0803 	eor.w	r8, r8, r3
   12cb2:	fa5f f888 	uxtb.w	r8, r8
   12cb6:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12cba:	f00e ff65 	bl	21b88 <_double_byte>
   12cbe:	ea88 0800 	eor.w	r8, r8, r0
   12cc2:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12cc6:	2310      	movs	r3, #16
   12cc8:	466a      	mov	r2, sp
   12cca:	4619      	mov	r1, r3
   12ccc:	eb0d 0003 	add.w	r0, sp, r3
   12cd0:	f00e ff49 	bl	21b66 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   12cd4:	3401      	adds	r4, #1
   12cd6:	0123      	lsls	r3, r4, #4
   12cd8:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12cdc:	58eb      	ldr	r3, [r5, r3]
   12cde:	f89d 1010 	ldrb.w	r1, [sp, #16]
   12ce2:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12ce6:	f88d 1010 	strb.w	r1, [sp, #16]
   12cea:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12cee:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12cf2:	4041      	eors	r1, r0
   12cf4:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12cf8:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12cfc:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12d00:	4041      	eors	r1, r0
   12d02:	f88d 1012 	strb.w	r1, [sp, #18]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12d0c:	404b      	eors	r3, r1
   12d0e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12d12:	6853      	ldr	r3, [r2, #4]
   12d14:	f89d 1014 	ldrb.w	r1, [sp, #20]
   12d18:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12d1c:	f88d 1014 	strb.w	r1, [sp, #20]
   12d20:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12d24:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12d28:	4041      	eors	r1, r0
   12d2a:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12d2e:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12d32:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12d36:	4041      	eors	r1, r0
   12d38:	f88d 1016 	strb.w	r1, [sp, #22]
   12d3c:	b2db      	uxtb	r3, r3
   12d3e:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12d42:	404b      	eors	r3, r1
   12d44:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12d48:	6893      	ldr	r3, [r2, #8]
   12d4a:	f89d 1018 	ldrb.w	r1, [sp, #24]
   12d4e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   12d52:	f88d 1018 	strb.w	r1, [sp, #24]
   12d56:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12d5a:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12d5e:	4041      	eors	r1, r0
   12d60:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12d64:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12d68:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12d6c:	4041      	eors	r1, r0
   12d6e:	f88d 101a 	strb.w	r1, [sp, #26]
   12d72:	b2db      	uxtb	r3, r3
   12d74:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12d78:	404b      	eors	r3, r1
   12d7a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12d7e:	68d3      	ldr	r3, [r2, #12]
   12d80:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12d84:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12d88:	f88d 201c 	strb.w	r2, [sp, #28]
   12d8c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12d90:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12d94:	404a      	eors	r2, r1
   12d96:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12d9a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12d9e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   12da2:	404a      	eors	r2, r1
   12da4:	f88d 201e 	strb.w	r2, [sp, #30]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12dae:	4053      	eors	r3, r2
   12db0:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   12db4:	2c08      	cmp	r4, #8
   12db6:	d80a      	bhi.n	12dce <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   12db8:	2300      	movs	r3, #0
   12dba:	2b0f      	cmp	r3, #15
   12dbc:	f63f adc0 	bhi.w	12940 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   12dc0:	a904      	add	r1, sp, #16
   12dc2:	5cc8      	ldrb	r0, [r1, r3]
   12dc4:	4a6e      	ldr	r2, [pc, #440]	; (12f80 <tc_aes_encrypt+0x748>)
   12dc6:	5c10      	ldrb	r0, [r2, r0]
   12dc8:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12dca:	3301      	adds	r3, #1
   12dcc:	e7f5      	b.n	12dba <tc_aes_encrypt+0x582>
   12dce:	2300      	movs	r3, #0
   12dd0:	e005      	b.n	12dde <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   12dd2:	aa04      	add	r2, sp, #16
   12dd4:	5cd1      	ldrb	r1, [r2, r3]
   12dd6:	486a      	ldr	r0, [pc, #424]	; (12f80 <tc_aes_encrypt+0x748>)
   12dd8:	5c41      	ldrb	r1, [r0, r1]
   12dda:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12ddc:	3301      	adds	r3, #1
   12dde:	2b0f      	cmp	r3, #15
   12de0:	d9f7      	bls.n	12dd2 <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   12de2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   12de6:	f88d 3000 	strb.w	r3, [sp]
   12dea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12dee:	f88d 3001 	strb.w	r3, [sp, #1]
   12df2:	f89d 301a 	ldrb.w	r3, [sp, #26]
   12df6:	f88d 3002 	strb.w	r3, [sp, #2]
   12dfa:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12dfe:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   12e02:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12e06:	f88d 3004 	strb.w	r3, [sp, #4]
   12e0a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12e0e:	f88d 3005 	strb.w	r3, [sp, #5]
   12e12:	f89d 301e 	ldrb.w	r3, [sp, #30]
   12e16:	f88d 3006 	strb.w	r3, [sp, #6]
   12e1a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12e1e:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12e22:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12e26:	f88d 3008 	strb.w	r3, [sp, #8]
   12e2a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12e2e:	f88d 3009 	strb.w	r3, [sp, #9]
   12e32:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12e36:	f88d 300a 	strb.w	r3, [sp, #10]
   12e3a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12e3e:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12e42:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12e46:	f88d 300c 	strb.w	r3, [sp, #12]
   12e4a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12e4e:	f88d 300d 	strb.w	r3, [sp, #13]
   12e52:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12e56:	f88d 300e 	strb.w	r3, [sp, #14]
   12e5a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12e5e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12e62:	2310      	movs	r3, #16
   12e64:	466a      	mov	r2, sp
   12e66:	4619      	mov	r1, r3
   12e68:	eb0d 0003 	add.w	r0, sp, r3
   12e6c:	f00e fe7b 	bl	21b66 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   12e70:	1c63      	adds	r3, r4, #1
   12e72:	011a      	lsls	r2, r3, #4
   12e74:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12e78:	58b2      	ldr	r2, [r6, r2]
   12e7a:	f89d 1010 	ldrb.w	r1, [sp, #16]
   12e7e:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12e82:	f88d 1010 	strb.w	r1, [sp, #16]
   12e86:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12e8a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12e8e:	4041      	eors	r1, r0
   12e90:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12e94:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12e98:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12e9c:	4041      	eors	r1, r0
   12e9e:	f88d 1012 	strb.w	r1, [sp, #18]
   12ea2:	b2d2      	uxtb	r2, r2
   12ea4:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12ea8:	404a      	eors	r2, r1
   12eaa:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12eae:	685a      	ldr	r2, [r3, #4]
   12eb0:	f89d 1014 	ldrb.w	r1, [sp, #20]
   12eb4:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12eb8:	f88d 1014 	strb.w	r1, [sp, #20]
   12ebc:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12ec0:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12ec4:	4041      	eors	r1, r0
   12ec6:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12eca:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12ece:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12ed2:	4041      	eors	r1, r0
   12ed4:	f88d 1016 	strb.w	r1, [sp, #22]
   12ed8:	b2d2      	uxtb	r2, r2
   12eda:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12ede:	404a      	eors	r2, r1
   12ee0:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   12ee4:	689a      	ldr	r2, [r3, #8]
   12ee6:	f89d 1018 	ldrb.w	r1, [sp, #24]
   12eea:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12eee:	f88d 1018 	strb.w	r1, [sp, #24]
   12ef2:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12ef6:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12efa:	4041      	eors	r1, r0
   12efc:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12f00:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12f04:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12f08:	4041      	eors	r1, r0
   12f0a:	f88d 101a 	strb.w	r1, [sp, #26]
   12f0e:	b2d2      	uxtb	r2, r2
   12f10:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12f14:	404a      	eors	r2, r1
   12f16:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12f1a:	68db      	ldr	r3, [r3, #12]
   12f1c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   12f20:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12f24:	f88d 201c 	strb.w	r2, [sp, #28]
   12f28:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12f2c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   12f30:	404a      	eors	r2, r1
   12f32:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12f36:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12f3a:	f89d 101e 	ldrb.w	r1, [sp, #30]
   12f3e:	404a      	eors	r2, r1
   12f40:	f88d 201e 	strb.w	r2, [sp, #30]
   12f44:	b2db      	uxtb	r3, r3
   12f46:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12f4a:	4053      	eors	r3, r2
   12f4c:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   12f50:	2310      	movs	r3, #16
   12f52:	eb0d 0203 	add.w	r2, sp, r3
   12f56:	4619      	mov	r1, r3
   12f58:	4638      	mov	r0, r7
   12f5a:	f00e fe04 	bl	21b66 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   12f5e:	2210      	movs	r2, #16
   12f60:	2100      	movs	r1, #0
   12f62:	eb0d 0002 	add.w	r0, sp, r2
   12f66:	f00e fe0b 	bl	21b80 <_set>

	return TC_CRYPTO_SUCCESS;
   12f6a:	2001      	movs	r0, #1
}
   12f6c:	b008      	add	sp, #32
   12f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   12f72:	2000      	movs	r0, #0
}
   12f74:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   12f76:	2000      	movs	r0, #0
   12f78:	e7f8      	b.n	12f6c <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   12f7a:	2000      	movs	r0, #0
   12f7c:	e7f6      	b.n	12f6c <tc_aes_encrypt+0x734>
   12f7e:	bf00      	nop
   12f80:	00026360 	.word	0x00026360

00012f84 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   12f84:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   12f86:	4802      	ldr	r0, [pc, #8]	; (12f90 <nrf_cc3xx_platform_abort_init+0xc>)
   12f88:	f00b fa48 	bl	1e41c <nrf_cc3xx_platform_set_abort>
}
   12f8c:	bd08      	pop	{r3, pc}
   12f8e:	bf00      	nop
   12f90:	00026460 	.word	0x00026460

00012f94 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   12f94:	b1d0      	cbz	r0, 12fcc <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12f96:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12f98:	6842      	ldr	r2, [r0, #4]
   12f9a:	2a04      	cmp	r2, #4
   12f9c:	d005      	beq.n	12faa <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12f9e:	b1d2      	cbz	r2, 12fd6 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   12fa0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12fa2:	f009 fe03 	bl	1cbac <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12fa6:	2000      	movs	r0, #0
    }
}
   12fa8:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   12faa:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12fac:	2200      	movs	r2, #0
   12fae:	f3bf 8f5b 	dmb	ish
   12fb2:	e853 1f00 	ldrex	r1, [r3]
   12fb6:	2901      	cmp	r1, #1
   12fb8:	d103      	bne.n	12fc2 <mutex_unlock_platform+0x2e>
   12fba:	e843 2000 	strex	r0, r2, [r3]
   12fbe:	2800      	cmp	r0, #0
   12fc0:	d1f7      	bne.n	12fb2 <mutex_unlock_platform+0x1e>
   12fc2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12fc6:	d104      	bne.n	12fd2 <mutex_unlock_platform+0x3e>
   12fc8:	4610      	mov	r0, r2
   12fca:	e7ed      	b.n	12fa8 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12fcc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   12fd0:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12fd2:	4802      	ldr	r0, [pc, #8]	; (12fdc <mutex_unlock_platform+0x48>)
   12fd4:	e7e8      	b.n	12fa8 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12fd6:	4802      	ldr	r0, [pc, #8]	; (12fe0 <mutex_unlock_platform+0x4c>)
   12fd8:	e7e6      	b.n	12fa8 <mutex_unlock_platform+0x14>
   12fda:	bf00      	nop
   12fdc:	ffff8fe9 	.word	0xffff8fe9
   12fe0:	ffff8fea 	.word	0xffff8fea

00012fe4 <mutex_lock_platform>:
    if(mutex == NULL) {
   12fe4:	b320      	cbz	r0, 13030 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12fe6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   12fe8:	6842      	ldr	r2, [r0, #4]
   12fea:	2a04      	cmp	r2, #4
   12fec:	d002      	beq.n	12ff4 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12fee:	b992      	cbnz	r2, 13016 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12ff0:	4811      	ldr	r0, [pc, #68]	; (13038 <mutex_lock_platform+0x54>)
   12ff2:	e00f      	b.n	13014 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   12ff4:	6803      	ldr	r3, [r0, #0]
   12ff6:	2201      	movs	r2, #1
   12ff8:	f3bf 8f5b 	dmb	ish
   12ffc:	e853 1f00 	ldrex	r1, [r3]
   13000:	2900      	cmp	r1, #0
   13002:	d103      	bne.n	1300c <mutex_lock_platform+0x28>
   13004:	e843 2000 	strex	r0, r2, [r3]
   13008:	2800      	cmp	r0, #0
   1300a:	d1f7      	bne.n	12ffc <mutex_lock_platform+0x18>
   1300c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13010:	d10c      	bne.n	1302c <mutex_lock_platform+0x48>
   13012:	2000      	movs	r0, #0
}
   13014:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   13016:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13018:	f04f 32ff 	mov.w	r2, #4294967295
   1301c:	f04f 33ff 	mov.w	r3, #4294967295
   13020:	f009 fd3a 	bl	1ca98 <z_impl_k_mutex_lock>
        if (ret == 0) {
   13024:	2800      	cmp	r0, #0
   13026:	d0f5      	beq.n	13014 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   13028:	4804      	ldr	r0, [pc, #16]	; (1303c <mutex_lock_platform+0x58>)
   1302a:	e7f3      	b.n	13014 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1302c:	4803      	ldr	r0, [pc, #12]	; (1303c <mutex_lock_platform+0x58>)
   1302e:	e7f1      	b.n	13014 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13030:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   13034:	4770      	bx	lr
   13036:	bf00      	nop
   13038:	ffff8fea 	.word	0xffff8fea
   1303c:	ffff8fe9 	.word	0xffff8fe9

00013040 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13040:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13042:	4604      	mov	r4, r0
   13044:	b190      	cbz	r0, 1306c <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13046:	6863      	ldr	r3, [r4, #4]
   13048:	2b04      	cmp	r3, #4
   1304a:	d00e      	beq.n	1306a <mutex_free_platform+0x2a>
   1304c:	2b08      	cmp	r3, #8
   1304e:	d00c      	beq.n	1306a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13050:	b15b      	cbz	r3, 1306a <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   13052:	f013 0f02 	tst.w	r3, #2
   13056:	d10e      	bne.n	13076 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13058:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memset, void *, int)
   1305a:	2200      	movs	r2, #0
   1305c:	601a      	str	r2, [r3, #0]
   1305e:	605a      	str	r2, [r3, #4]
   13060:	609a      	str	r2, [r3, #8]
   13062:	60da      	str	r2, [r3, #12]
   13064:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   13066:	2300      	movs	r3, #0
   13068:	6063      	str	r3, [r4, #4]
}
   1306a:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   1306c:	4b05      	ldr	r3, [pc, #20]	; (13084 <mutex_free_platform+0x44>)
   1306e:	685b      	ldr	r3, [r3, #4]
   13070:	4805      	ldr	r0, [pc, #20]	; (13088 <mutex_free_platform+0x48>)
   13072:	4798      	blx	r3
   13074:	e7e7      	b.n	13046 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13076:	4621      	mov	r1, r4
   13078:	4804      	ldr	r0, [pc, #16]	; (1308c <mutex_free_platform+0x4c>)
   1307a:	f011 feb8 	bl	24dee <k_mem_slab_free>
        mutex->mutex = NULL;
   1307e:	2300      	movs	r3, #0
   13080:	6023      	str	r3, [r4, #0]
   13082:	e7f0      	b.n	13066 <mutex_free_platform+0x26>
   13084:	200005f8 	.word	0x200005f8
   13088:	00026468 	.word	0x00026468
   1308c:	20002308 	.word	0x20002308

00013090 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13090:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13092:	4604      	mov	r4, r0
   13094:	b178      	cbz	r0, 130b6 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13096:	6863      	ldr	r3, [r4, #4]
   13098:	2b04      	cmp	r3, #4
   1309a:	d00b      	beq.n	130b4 <mutex_init_platform+0x24>
   1309c:	2b08      	cmp	r3, #8
   1309e:	d009      	beq.n	130b4 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   130a0:	b90b      	cbnz	r3, 130a6 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   130a2:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   130a4:	b163      	cbz	r3, 130c0 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   130a6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   130a8:	f011 ff34 	bl	24f14 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   130ac:	6863      	ldr	r3, [r4, #4]
   130ae:	f043 0301 	orr.w	r3, r3, #1
   130b2:	6063      	str	r3, [r4, #4]
}
   130b4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   130b6:	4b10      	ldr	r3, [pc, #64]	; (130f8 <mutex_init_platform+0x68>)
   130b8:	685b      	ldr	r3, [r3, #4]
   130ba:	4810      	ldr	r0, [pc, #64]	; (130fc <mutex_init_platform+0x6c>)
   130bc:	4798      	blx	r3
   130be:	e7ea      	b.n	13096 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   130c0:	f04f 32ff 	mov.w	r2, #4294967295
   130c4:	f04f 33ff 	mov.w	r3, #4294967295
   130c8:	4621      	mov	r1, r4
   130ca:	480d      	ldr	r0, [pc, #52]	; (13100 <mutex_init_platform+0x70>)
   130cc:	f009 fba0 	bl	1c810 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   130d0:	b908      	cbnz	r0, 130d6 <mutex_init_platform+0x46>
   130d2:	6823      	ldr	r3, [r4, #0]
   130d4:	b91b      	cbnz	r3, 130de <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   130d6:	4b08      	ldr	r3, [pc, #32]	; (130f8 <mutex_init_platform+0x68>)
   130d8:	685b      	ldr	r3, [r3, #4]
   130da:	480a      	ldr	r0, [pc, #40]	; (13104 <mutex_init_platform+0x74>)
   130dc:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   130de:	6823      	ldr	r3, [r4, #0]
   130e0:	2200      	movs	r2, #0
   130e2:	601a      	str	r2, [r3, #0]
   130e4:	605a      	str	r2, [r3, #4]
   130e6:	609a      	str	r2, [r3, #8]
   130e8:	60da      	str	r2, [r3, #12]
   130ea:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   130ec:	6863      	ldr	r3, [r4, #4]
   130ee:	f043 0302 	orr.w	r3, r3, #2
   130f2:	6063      	str	r3, [r4, #4]
   130f4:	e7d7      	b.n	130a6 <mutex_init_platform+0x16>
   130f6:	bf00      	nop
   130f8:	200005f8 	.word	0x200005f8
   130fc:	00026468 	.word	0x00026468
   13100:	20002308 	.word	0x20002308
   13104:	00026490 	.word	0x00026490

00013108 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13108:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1310a:	2340      	movs	r3, #64	; 0x40
   1310c:	2214      	movs	r2, #20
   1310e:	4904      	ldr	r1, [pc, #16]	; (13120 <nrf_cc3xx_platform_mutex_init+0x18>)
   13110:	4804      	ldr	r0, [pc, #16]	; (13124 <nrf_cc3xx_platform_mutex_init+0x1c>)
   13112:	f011 fe5e 	bl	24dd2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   13116:	4904      	ldr	r1, [pc, #16]	; (13128 <nrf_cc3xx_platform_mutex_init+0x20>)
   13118:	4804      	ldr	r0, [pc, #16]	; (1312c <nrf_cc3xx_platform_mutex_init+0x24>)
   1311a:	f00b fa37 	bl	1e58c <nrf_cc3xx_platform_set_mutexes>
}
   1311e:	bd08      	pop	{r3, pc}
   13120:	20002324 	.word	0x20002324
   13124:	20002308 	.word	0x20002308
   13128:	000264d0 	.word	0x000264d0
   1312c:	000264c0 	.word	0x000264c0

00013130 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13130:	4901      	ldr	r1, [pc, #4]	; (13138 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13132:	2210      	movs	r2, #16
	str	r2, [r1]
   13134:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13136:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13138:	e000ed10 	.word	0xe000ed10

0001313c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1313c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1313e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13140:	f380 8811 	msr	BASEPRI, r0
	isb
   13144:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13148:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1314c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1314e:	b662      	cpsie	i
	isb
   13150:	f3bf 8f6f 	isb	sy

	bx	lr
   13154:	4770      	bx	lr
   13156:	bf00      	nop

00013158 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13158:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1315a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1315c:	f381 8811 	msr	BASEPRI, r1

	wfe
   13160:	bf20      	wfe

	msr	BASEPRI, r0
   13162:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13166:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13168:	4770      	bx	lr
   1316a:	bf00      	nop

0001316c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   1316c:	b570      	push	{r4, r5, r6, lr}
   1316e:	b082      	sub	sp, #8
   13170:	4604      	mov	r4, r0
   13172:	4d1f      	ldr	r5, [pc, #124]	; (131f0 <esf_dump+0x84>)
   13174:	4b1f      	ldr	r3, [pc, #124]	; (131f4 <esf_dump+0x88>)
   13176:	1aed      	subs	r5, r5, r3
   13178:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1317a:	2601      	movs	r6, #1
   1317c:	f04f 0300 	mov.w	r3, #0
   13180:	f366 0302 	bfi	r3, r6, #0, #3
   13184:	f36f 03c5 	bfc	r3, #3, #3
   13188:	f365 138f 	bfi	r3, r5, #6, #10
   1318c:	f8ad 3000 	strh.w	r3, [sp]
   13190:	6883      	ldr	r3, [r0, #8]
   13192:	6842      	ldr	r2, [r0, #4]
   13194:	6801      	ldr	r1, [r0, #0]
   13196:	4818      	ldr	r0, [pc, #96]	; (131f8 <esf_dump+0x8c>)
   13198:	f7fe fd68 	bl	11c6c <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1319c:	f04f 0300 	mov.w	r3, #0
   131a0:	f366 0302 	bfi	r3, r6, #0, #3
   131a4:	f36f 03c5 	bfc	r3, #3, #3
   131a8:	f365 138f 	bfi	r3, r5, #6, #10
   131ac:	f8ad 3000 	strh.w	r3, [sp]
   131b0:	6963      	ldr	r3, [r4, #20]
   131b2:	6922      	ldr	r2, [r4, #16]
   131b4:	68e1      	ldr	r1, [r4, #12]
   131b6:	4811      	ldr	r0, [pc, #68]	; (131fc <esf_dump+0x90>)
   131b8:	f7fe fd58 	bl	11c6c <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   131bc:	f04f 0200 	mov.w	r2, #0
   131c0:	f366 0202 	bfi	r2, r6, #0, #3
   131c4:	f36f 02c5 	bfc	r2, #3, #3
   131c8:	f365 128f 	bfi	r2, r5, #6, #10
   131cc:	69e1      	ldr	r1, [r4, #28]
   131ce:	480c      	ldr	r0, [pc, #48]	; (13200 <esf_dump+0x94>)
   131d0:	f7fe fd8a 	bl	11ce8 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   131d4:	f04f 0200 	mov.w	r2, #0
   131d8:	f366 0202 	bfi	r2, r6, #0, #3
   131dc:	f36f 02c5 	bfc	r2, #3, #3
   131e0:	f365 128f 	bfi	r2, r5, #6, #10
   131e4:	69a1      	ldr	r1, [r4, #24]
   131e6:	4807      	ldr	r0, [pc, #28]	; (13204 <esf_dump+0x98>)
   131e8:	f7fe fd7e 	bl	11ce8 <log_1>
		esf->basic.pc);
}
   131ec:	b002      	add	sp, #8
   131ee:	bd70      	pop	{r4, r5, r6, pc}
   131f0:	00025e30 	.word	0x00025e30
   131f4:	00025d80 	.word	0x00025d80
   131f8:	000264e4 	.word	0x000264e4
   131fc:	00026514 	.word	0x00026514
   13200:	00026544 	.word	0x00026544
   13204:	00026554 	.word	0x00026554

00013208 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13208:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1320a:	2b00      	cmp	r3, #0
   1320c:	db08      	blt.n	13220 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1320e:	f000 001f 	and.w	r0, r0, #31
   13212:	095b      	lsrs	r3, r3, #5
   13214:	2201      	movs	r2, #1
   13216:	fa02 f000 	lsl.w	r0, r2, r0
   1321a:	4a02      	ldr	r2, [pc, #8]	; (13224 <arch_irq_enable+0x1c>)
   1321c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13220:	4770      	bx	lr
   13222:	bf00      	nop
   13224:	e000e100 	.word	0xe000e100

00013228 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13228:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1322a:	2b00      	cmp	r3, #0
   1322c:	db0d      	blt.n	1324a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1322e:	f000 001f 	and.w	r0, r0, #31
   13232:	095b      	lsrs	r3, r3, #5
   13234:	2201      	movs	r2, #1
   13236:	fa02 f000 	lsl.w	r0, r2, r0
   1323a:	3320      	adds	r3, #32
   1323c:	4a03      	ldr	r2, [pc, #12]	; (1324c <arch_irq_disable+0x24>)
   1323e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13242:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13246:	f3bf 8f6f 	isb	sy
}
   1324a:	4770      	bx	lr
   1324c:	e000e100 	.word	0xe000e100

00013250 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13250:	0942      	lsrs	r2, r0, #5
   13252:	4b05      	ldr	r3, [pc, #20]	; (13268 <arch_irq_is_enabled+0x18>)
   13254:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13258:	f000 001f 	and.w	r0, r0, #31
   1325c:	2301      	movs	r3, #1
   1325e:	fa03 f000 	lsl.w	r0, r3, r0
}
   13262:	4010      	ands	r0, r2
   13264:	4770      	bx	lr
   13266:	bf00      	nop
   13268:	e000e100 	.word	0xe000e100

0001326c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1326c:	f012 0f01 	tst.w	r2, #1
   13270:	d10c      	bne.n	1328c <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13272:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13274:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13276:	2b00      	cmp	r3, #0
   13278:	db0a      	blt.n	13290 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1327a:	0149      	lsls	r1, r1, #5
   1327c:	b2c9      	uxtb	r1, r1
   1327e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13282:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13286:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   1328a:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1328c:	2100      	movs	r1, #0
   1328e:	e7f1      	b.n	13274 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13290:	f000 000f 	and.w	r0, r0, #15
   13294:	0149      	lsls	r1, r1, #5
   13296:	b2c9      	uxtb	r1, r1
   13298:	4b01      	ldr	r3, [pc, #4]	; (132a0 <z_arm_irq_priority_set+0x34>)
   1329a:	5419      	strb	r1, [r3, r0]
}
   1329c:	4770      	bx	lr
   1329e:	bf00      	nop
   132a0:	e000ed14 	.word	0xe000ed14

000132a4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   132a4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   132a6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   132a8:	4b05      	ldr	r3, [pc, #20]	; (132c0 <_arch_isr_direct_pm+0x1c>)
   132aa:	699b      	ldr	r3, [r3, #24]
   132ac:	b90b      	cbnz	r3, 132b2 <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   132ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   132b0:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   132b2:	4b03      	ldr	r3, [pc, #12]	; (132c0 <_arch_isr_direct_pm+0x1c>)
   132b4:	2200      	movs	r2, #0
   132b6:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   132b8:	f011 fe10 	bl	24edc <z_pm_save_idle_exit>
   132bc:	e7f7      	b.n	132ae <_arch_isr_direct_pm+0xa>
   132be:	bf00      	nop
   132c0:	20002fe8 	.word	0x20002fe8

000132c4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   132c4:	bf30      	wfi
    b z_SysNmiOnReset
   132c6:	f7ff bffd 	b.w	132c4 <z_SysNmiOnReset>
   132ca:	bf00      	nop

000132cc <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   132cc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   132ce:	4b0b      	ldr	r3, [pc, #44]	; (132fc <z_arm_prep_c+0x30>)
   132d0:	4a0b      	ldr	r2, [pc, #44]	; (13300 <z_arm_prep_c+0x34>)
   132d2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   132d6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   132d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   132dc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   132e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   132e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   132e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   132ec:	f009 fa1a 	bl	1c724 <z_bss_zero>
	z_data_copy();
   132f0:	f00a fb08 	bl	1d904 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   132f4:	f000 fcbc 	bl	13c70 <z_arm_interrupt_init>
	z_cstart();
   132f8:	f009 fa20 	bl	1c73c <z_cstart>
   132fc:	e000ed00 	.word	0xe000ed00
   13300:	00000000 	.word	0x00000000

00013304 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13304:	4a0a      	ldr	r2, [pc, #40]	; (13330 <arch_swap+0x2c>)
   13306:	6893      	ldr	r3, [r2, #8]
   13308:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   1330c:	4909      	ldr	r1, [pc, #36]	; (13334 <arch_swap+0x30>)
   1330e:	6809      	ldr	r1, [r1, #0]
   13310:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13314:	4908      	ldr	r1, [pc, #32]	; (13338 <arch_swap+0x34>)
   13316:	684b      	ldr	r3, [r1, #4]
   13318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1331c:	604b      	str	r3, [r1, #4]
   1331e:	2300      	movs	r3, #0
   13320:	f383 8811 	msr	BASEPRI, r3
   13324:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13328:	6893      	ldr	r3, [r2, #8]
}
   1332a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   1332e:	4770      	bx	lr
   13330:	20002fe8 	.word	0x20002fe8
   13334:	00027f24 	.word	0x00027f24
   13338:	e000ed00 	.word	0xe000ed00

0001333c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1333c:	4913      	ldr	r1, [pc, #76]	; (1338c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1333e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13340:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13344:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13346:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1334a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1334e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13350:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13354:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13358:	4f0d      	ldr	r7, [pc, #52]	; (13390 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1335a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1335e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13360:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13362:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13364:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   13368:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1336a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1336e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13372:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13374:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13376:	f000 fd1d 	bl	13db4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1337a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1337e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13382:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13386:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1338a:	4770      	bx	lr
    ldr r1, =_kernel
   1338c:	20002fe8 	.word	0x20002fe8
    ldr v4, =_SCS_ICSR
   13390:	e000ed04 	.word	0xe000ed04

00013394 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13394:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13398:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1339a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1339e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   133a2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   133a4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   133a8:	2902      	cmp	r1, #2
    beq _oops
   133aa:	d0ff      	beq.n	133ac <_oops>

000133ac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   133ac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   133ae:	f00e fd0d 	bl	21dcc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   133b2:	bd01      	pop	{r0, pc}

000133b4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   133b4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   133b6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   133ba:	490d      	ldr	r1, [pc, #52]	; (133f0 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   133bc:	f021 0101 	bic.w	r1, r1, #1
   133c0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   133c4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   133c8:	9b01      	ldr	r3, [sp, #4]
   133ca:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   133ce:	9b02      	ldr	r3, [sp, #8]
   133d0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   133d4:	9b03      	ldr	r3, [sp, #12]
   133d6:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   133da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   133de:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   133e2:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   133e4:	2300      	movs	r3, #0
   133e6:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   133ea:	bc10      	pop	{r4}
   133ec:	4770      	bx	lr
   133ee:	bf00      	nop
   133f0:	0002104f 	.word	0x0002104f

000133f4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   133f4:	4b16      	ldr	r3, [pc, #88]	; (13450 <z_check_thread_stack_fail+0x5c>)
   133f6:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   133f8:	b1da      	cbz	r2, 13432 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   133fa:	f110 0f16 	cmn.w	r0, #22
   133fe:	d01a      	beq.n	13436 <z_check_thread_stack_fail+0x42>
{
   13400:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13402:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13406:	f1a3 0420 	sub.w	r4, r3, #32
   1340a:	4284      	cmp	r4, r0
   1340c:	d805      	bhi.n	1341a <z_check_thread_stack_fail+0x26>
   1340e:	4283      	cmp	r3, r0
   13410:	d908      	bls.n	13424 <z_check_thread_stack_fail+0x30>
   13412:	428b      	cmp	r3, r1
   13414:	d808      	bhi.n	13428 <z_check_thread_stack_fail+0x34>
   13416:	2100      	movs	r1, #0
   13418:	e000      	b.n	1341c <z_check_thread_stack_fail+0x28>
   1341a:	2100      	movs	r1, #0
   1341c:	b931      	cbnz	r1, 1342c <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1341e:	2000      	movs	r0, #0
}
   13420:	bc10      	pop	{r4}
   13422:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13424:	2100      	movs	r1, #0
   13426:	e7f9      	b.n	1341c <z_check_thread_stack_fail+0x28>
   13428:	2101      	movs	r1, #1
   1342a:	e7f7      	b.n	1341c <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   1342c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   13430:	e7f6      	b.n	13420 <z_check_thread_stack_fail+0x2c>
		return 0;
   13432:	2000      	movs	r0, #0
   13434:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13436:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1343a:	428b      	cmp	r3, r1
   1343c:	bf94      	ite	ls
   1343e:	2100      	movls	r1, #0
   13440:	2101      	movhi	r1, #1
   13442:	b909      	cbnz	r1, 13448 <z_check_thread_stack_fail+0x54>
	return 0;
   13444:	2000      	movs	r0, #0
}
   13446:	4770      	bx	lr
		return thread->stack_info.start;
   13448:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1344c:	4770      	bx	lr
   1344e:	bf00      	nop
   13450:	20002fe8 	.word	0x20002fe8

00013454 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13454:	b508      	push	{r3, lr}
   13456:	460d      	mov	r5, r1
   13458:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1345a:	4b08      	ldr	r3, [pc, #32]	; (1347c <arch_switch_to_main_thread+0x28>)
   1345c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1345e:	f000 fca9 	bl	13db4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13462:	4620      	mov	r0, r4
   13464:	f385 8809 	msr	PSP, r5
   13468:	2100      	movs	r1, #0
   1346a:	b663      	cpsie	if
   1346c:	f381 8811 	msr	BASEPRI, r1
   13470:	f3bf 8f6f 	isb	sy
   13474:	2200      	movs	r2, #0
   13476:	2300      	movs	r3, #0
   13478:	f00d fde9 	bl	2104e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1347c:	20002fe8 	.word	0x20002fe8

00013480 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13480:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13482:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13484:	4a0b      	ldr	r2, [pc, #44]	; (134b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13486:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13488:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1348a:	bf1e      	ittt	ne
	movne	r1, #0
   1348c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1348e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13490:	f011 fd24 	blne	24edc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13494:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13496:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1349a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1349e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   134a2:	4905      	ldr	r1, [pc, #20]	; (134b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   134a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   134a6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   134a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   134aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   134ae:	4903      	ldr	r1, [pc, #12]	; (134bc <_isr_wrapper+0x3c>)
	bx r1
   134b0:	4708      	bx	r1
   134b2:	0000      	.short	0x0000
	ldr r2, =_kernel
   134b4:	20002fe8 	.word	0x20002fe8
	ldr r1, =_sw_isr_table
   134b8:	00025bcc 	.word	0x00025bcc
	ldr r1, =z_arm_int_exit
   134bc:	000134c1 	.word	0x000134c1

000134c0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   134c0:	4b04      	ldr	r3, [pc, #16]	; (134d4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   134c2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   134c4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   134c6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   134c8:	d003      	beq.n	134d2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   134ca:	4903      	ldr	r1, [pc, #12]	; (134d8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   134cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   134d0:	600a      	str	r2, [r1, #0]

000134d2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   134d2:	4770      	bx	lr
	ldr r3, =_kernel
   134d4:	20002fe8 	.word	0x20002fe8
	ldr r1, =_SCS_ICSR
   134d8:	e000ed04 	.word	0xe000ed04

000134dc <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   134dc:	b508      	push	{r3, lr}
   134de:	4b4e      	ldr	r3, [pc, #312]	; (13618 <usage_fault+0x13c>)
   134e0:	4a4e      	ldr	r2, [pc, #312]	; (1361c <usage_fault+0x140>)
   134e2:	1a9b      	subs	r3, r3, r2
   134e4:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   134e6:	f04f 0100 	mov.w	r1, #0
   134ea:	2201      	movs	r2, #1
   134ec:	f362 0102 	bfi	r1, r2, #0, #3
   134f0:	f36f 01c5 	bfc	r1, #3, #3
   134f4:	f363 118f 	bfi	r1, r3, #6, #10
   134f8:	4849      	ldr	r0, [pc, #292]	; (13620 <usage_fault+0x144>)
   134fa:	f7fe fcab 	bl	11e54 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   134fe:	4b49      	ldr	r3, [pc, #292]	; (13624 <usage_fault+0x148>)
   13500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13502:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   13506:	d121      	bne.n	1354c <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13508:	4b46      	ldr	r3, [pc, #280]	; (13624 <usage_fault+0x148>)
   1350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1350c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   13510:	d12d      	bne.n	1356e <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13512:	4b44      	ldr	r3, [pc, #272]	; (13624 <usage_fault+0x148>)
   13514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13516:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1351a:	d139      	bne.n	13590 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1351c:	4b41      	ldr	r3, [pc, #260]	; (13624 <usage_fault+0x148>)
   1351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13520:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   13524:	d145      	bne.n	135b2 <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13526:	4b3f      	ldr	r3, [pc, #252]	; (13624 <usage_fault+0x148>)
   13528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1352a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1352e:	d151      	bne.n	135d4 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13530:	4b3c      	ldr	r3, [pc, #240]	; (13624 <usage_fault+0x148>)
   13532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13534:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13538:	d15d      	bne.n	135f6 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1353a:	4a3a      	ldr	r2, [pc, #232]	; (13624 <usage_fault+0x148>)
   1353c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1353e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13542:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13546:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13548:	2000      	movs	r0, #0
   1354a:	bd08      	pop	{r3, pc}
   1354c:	4b32      	ldr	r3, [pc, #200]	; (13618 <usage_fault+0x13c>)
   1354e:	4a33      	ldr	r2, [pc, #204]	; (1361c <usage_fault+0x140>)
   13550:	1a9b      	subs	r3, r3, r2
   13552:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   13554:	f04f 0100 	mov.w	r1, #0
   13558:	2201      	movs	r2, #1
   1355a:	f362 0102 	bfi	r1, r2, #0, #3
   1355e:	f36f 01c5 	bfc	r1, #3, #3
   13562:	f363 118f 	bfi	r1, r3, #6, #10
   13566:	4830      	ldr	r0, [pc, #192]	; (13628 <usage_fault+0x14c>)
   13568:	f7fe fc74 	bl	11e54 <log_0>
   1356c:	e7cc      	b.n	13508 <usage_fault+0x2c>
   1356e:	4b2a      	ldr	r3, [pc, #168]	; (13618 <usage_fault+0x13c>)
   13570:	4a2a      	ldr	r2, [pc, #168]	; (1361c <usage_fault+0x140>)
   13572:	1a9b      	subs	r3, r3, r2
   13574:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   13576:	f04f 0100 	mov.w	r1, #0
   1357a:	2201      	movs	r2, #1
   1357c:	f362 0102 	bfi	r1, r2, #0, #3
   13580:	f36f 01c5 	bfc	r1, #3, #3
   13584:	f363 118f 	bfi	r1, r3, #6, #10
   13588:	4828      	ldr	r0, [pc, #160]	; (1362c <usage_fault+0x150>)
   1358a:	f7fe fc63 	bl	11e54 <log_0>
   1358e:	e7c0      	b.n	13512 <usage_fault+0x36>
   13590:	4b21      	ldr	r3, [pc, #132]	; (13618 <usage_fault+0x13c>)
   13592:	4a22      	ldr	r2, [pc, #136]	; (1361c <usage_fault+0x140>)
   13594:	1a9b      	subs	r3, r3, r2
   13596:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   13598:	f04f 0100 	mov.w	r1, #0
   1359c:	2201      	movs	r2, #1
   1359e:	f362 0102 	bfi	r1, r2, #0, #3
   135a2:	f36f 01c5 	bfc	r1, #3, #3
   135a6:	f363 118f 	bfi	r1, r3, #6, #10
   135aa:	4821      	ldr	r0, [pc, #132]	; (13630 <usage_fault+0x154>)
   135ac:	f7fe fc52 	bl	11e54 <log_0>
   135b0:	e7b4      	b.n	1351c <usage_fault+0x40>
   135b2:	4b19      	ldr	r3, [pc, #100]	; (13618 <usage_fault+0x13c>)
   135b4:	4a19      	ldr	r2, [pc, #100]	; (1361c <usage_fault+0x140>)
   135b6:	1a9b      	subs	r3, r3, r2
   135b8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   135ba:	f04f 0100 	mov.w	r1, #0
   135be:	2201      	movs	r2, #1
   135c0:	f362 0102 	bfi	r1, r2, #0, #3
   135c4:	f36f 01c5 	bfc	r1, #3, #3
   135c8:	f363 118f 	bfi	r1, r3, #6, #10
   135cc:	4819      	ldr	r0, [pc, #100]	; (13634 <usage_fault+0x158>)
   135ce:	f7fe fc41 	bl	11e54 <log_0>
   135d2:	e7a8      	b.n	13526 <usage_fault+0x4a>
   135d4:	4b10      	ldr	r3, [pc, #64]	; (13618 <usage_fault+0x13c>)
   135d6:	4a11      	ldr	r2, [pc, #68]	; (1361c <usage_fault+0x140>)
   135d8:	1a9b      	subs	r3, r3, r2
   135da:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   135dc:	f04f 0100 	mov.w	r1, #0
   135e0:	2201      	movs	r2, #1
   135e2:	f362 0102 	bfi	r1, r2, #0, #3
   135e6:	f36f 01c5 	bfc	r1, #3, #3
   135ea:	f363 118f 	bfi	r1, r3, #6, #10
   135ee:	4812      	ldr	r0, [pc, #72]	; (13638 <usage_fault+0x15c>)
   135f0:	f7fe fc30 	bl	11e54 <log_0>
   135f4:	e79c      	b.n	13530 <usage_fault+0x54>
   135f6:	4b08      	ldr	r3, [pc, #32]	; (13618 <usage_fault+0x13c>)
   135f8:	4a08      	ldr	r2, [pc, #32]	; (1361c <usage_fault+0x140>)
   135fa:	1a9b      	subs	r3, r3, r2
   135fc:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   135fe:	f04f 0100 	mov.w	r1, #0
   13602:	2201      	movs	r2, #1
   13604:	f362 0102 	bfi	r1, r2, #0, #3
   13608:	f36f 01c5 	bfc	r1, #3, #3
   1360c:	f363 118f 	bfi	r1, r3, #6, #10
   13610:	480a      	ldr	r0, [pc, #40]	; (1363c <usage_fault+0x160>)
   13612:	f7fe fc1f 	bl	11e54 <log_0>
   13616:	e790      	b.n	1353a <usage_fault+0x5e>
   13618:	00025e30 	.word	0x00025e30
   1361c:	00025d80 	.word	0x00025d80
   13620:	00026584 	.word	0x00026584
   13624:	e000ed00 	.word	0xe000ed00
   13628:	0002659c 	.word	0x0002659c
   1362c:	000265b0 	.word	0x000265b0
   13630:	000265cc 	.word	0x000265cc
   13634:	000265ec 	.word	0x000265ec
   13638:	00026614 	.word	0x00026614
   1363c:	00026630 	.word	0x00026630

00013640 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   13640:	b508      	push	{r3, lr}
	*recoverable = false;
   13642:	2200      	movs	r2, #0
   13644:	700a      	strb	r2, [r1, #0]
   13646:	4b08      	ldr	r3, [pc, #32]	; (13668 <debug_monitor+0x28>)
   13648:	4908      	ldr	r1, [pc, #32]	; (1366c <debug_monitor+0x2c>)
   1364a:	1a5b      	subs	r3, r3, r1
   1364c:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   1364e:	f04f 0100 	mov.w	r1, #0
   13652:	2001      	movs	r0, #1
   13654:	f360 0102 	bfi	r1, r0, #0, #3
   13658:	f362 01c5 	bfi	r1, r2, #3, #3
   1365c:	f363 118f 	bfi	r1, r3, #6, #10
   13660:	4803      	ldr	r0, [pc, #12]	; (13670 <debug_monitor+0x30>)
   13662:	f7fe fbf7 	bl	11e54 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   13666:	bd08      	pop	{r3, pc}
   13668:	00025e30 	.word	0x00025e30
   1366c:	00025d80 	.word	0x00025d80
   13670:	0002665c 	.word	0x0002665c

00013674 <bus_fault>:
{
   13674:	b570      	push	{r4, r5, r6, lr}
   13676:	4605      	mov	r5, r0
   13678:	460e      	mov	r6, r1
   1367a:	4614      	mov	r4, r2
   1367c:	4b5e      	ldr	r3, [pc, #376]	; (137f8 <bus_fault+0x184>)
   1367e:	4a5f      	ldr	r2, [pc, #380]	; (137fc <bus_fault+0x188>)
   13680:	1a9b      	subs	r3, r3, r2
   13682:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13684:	f04f 0100 	mov.w	r1, #0
   13688:	2201      	movs	r2, #1
   1368a:	f362 0102 	bfi	r1, r2, #0, #3
   1368e:	f36f 01c5 	bfc	r1, #3, #3
   13692:	f363 118f 	bfi	r1, r3, #6, #10
   13696:	485a      	ldr	r0, [pc, #360]	; (13800 <bus_fault+0x18c>)
   13698:	f7fe fbdc 	bl	11e54 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1369c:	4b59      	ldr	r3, [pc, #356]	; (13804 <bus_fault+0x190>)
   1369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136a0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   136a4:	d124      	bne.n	136f0 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   136a6:	4b57      	ldr	r3, [pc, #348]	; (13804 <bus_fault+0x190>)
   136a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136aa:	f413 6f00 	tst.w	r3, #2048	; 0x800
   136ae:	d130      	bne.n	13712 <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   136b0:	4b54      	ldr	r3, [pc, #336]	; (13804 <bus_fault+0x190>)
   136b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136b4:	f413 7f00 	tst.w	r3, #512	; 0x200
   136b8:	d13c      	bne.n	13734 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   136ba:	4b52      	ldr	r3, [pc, #328]	; (13804 <bus_fault+0x190>)
   136bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136be:	f413 6f80 	tst.w	r3, #1024	; 0x400
   136c2:	d165      	bne.n	13790 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   136c4:	4b4f      	ldr	r3, [pc, #316]	; (13804 <bus_fault+0x190>)
   136c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136c8:	f413 7f80 	tst.w	r3, #256	; 0x100
   136cc:	d171      	bne.n	137b2 <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   136ce:	4b4d      	ldr	r3, [pc, #308]	; (13804 <bus_fault+0x190>)
   136d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136d2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   136d6:	d17d      	bne.n	137d4 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   136d8:	4a4a      	ldr	r2, [pc, #296]	; (13804 <bus_fault+0x190>)
   136da:	6a93      	ldr	r3, [r2, #40]	; 0x28
   136dc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   136e0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   136e2:	2101      	movs	r1, #1
   136e4:	4628      	mov	r0, r5
   136e6:	f00e fb83 	bl	21df0 <memory_fault_recoverable>
   136ea:	7020      	strb	r0, [r4, #0]
}
   136ec:	2000      	movs	r0, #0
   136ee:	bd70      	pop	{r4, r5, r6, pc}
   136f0:	4b41      	ldr	r3, [pc, #260]	; (137f8 <bus_fault+0x184>)
   136f2:	4a42      	ldr	r2, [pc, #264]	; (137fc <bus_fault+0x188>)
   136f4:	1a9b      	subs	r3, r3, r2
   136f6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   136f8:	f04f 0100 	mov.w	r1, #0
   136fc:	2201      	movs	r2, #1
   136fe:	f362 0102 	bfi	r1, r2, #0, #3
   13702:	f36f 01c5 	bfc	r1, #3, #3
   13706:	f363 118f 	bfi	r1, r3, #6, #10
   1370a:	483f      	ldr	r0, [pc, #252]	; (13808 <bus_fault+0x194>)
   1370c:	f7fe fba2 	bl	11e54 <log_0>
   13710:	e7c9      	b.n	136a6 <bus_fault+0x32>
   13712:	4b39      	ldr	r3, [pc, #228]	; (137f8 <bus_fault+0x184>)
   13714:	4a39      	ldr	r2, [pc, #228]	; (137fc <bus_fault+0x188>)
   13716:	1a9b      	subs	r3, r3, r2
   13718:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   1371a:	f04f 0100 	mov.w	r1, #0
   1371e:	2201      	movs	r2, #1
   13720:	f362 0102 	bfi	r1, r2, #0, #3
   13724:	f36f 01c5 	bfc	r1, #3, #3
   13728:	f363 118f 	bfi	r1, r3, #6, #10
   1372c:	4837      	ldr	r0, [pc, #220]	; (1380c <bus_fault+0x198>)
   1372e:	f7fe fb91 	bl	11e54 <log_0>
   13732:	e7bd      	b.n	136b0 <bus_fault+0x3c>
   13734:	4b30      	ldr	r3, [pc, #192]	; (137f8 <bus_fault+0x184>)
   13736:	4a31      	ldr	r2, [pc, #196]	; (137fc <bus_fault+0x188>)
   13738:	1a9b      	subs	r3, r3, r2
   1373a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   1373c:	f04f 0100 	mov.w	r1, #0
   13740:	2201      	movs	r2, #1
   13742:	f362 0102 	bfi	r1, r2, #0, #3
   13746:	f36f 01c5 	bfc	r1, #3, #3
   1374a:	f363 118f 	bfi	r1, r3, #6, #10
   1374e:	4830      	ldr	r0, [pc, #192]	; (13810 <bus_fault+0x19c>)
   13750:	f7fe fb80 	bl	11e54 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13754:	4b2b      	ldr	r3, [pc, #172]	; (13804 <bus_fault+0x190>)
   13756:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1375a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1375e:	d0ac      	beq.n	136ba <bus_fault+0x46>
   13760:	4b25      	ldr	r3, [pc, #148]	; (137f8 <bus_fault+0x184>)
   13762:	4a26      	ldr	r2, [pc, #152]	; (137fc <bus_fault+0x188>)
   13764:	1a9b      	subs	r3, r3, r2
   13766:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13768:	f04f 0200 	mov.w	r2, #0
   1376c:	2001      	movs	r0, #1
   1376e:	f360 0202 	bfi	r2, r0, #0, #3
   13772:	f36f 02c5 	bfc	r2, #3, #3
   13776:	f363 128f 	bfi	r2, r3, #6, #10
   1377a:	4826      	ldr	r0, [pc, #152]	; (13814 <bus_fault+0x1a0>)
   1377c:	f7fe fab4 	bl	11ce8 <log_1>
			if (from_hard_fault != 0) {
   13780:	2e00      	cmp	r6, #0
   13782:	d09a      	beq.n	136ba <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13784:	4a1f      	ldr	r2, [pc, #124]	; (13804 <bus_fault+0x190>)
   13786:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1378c:	6293      	str	r3, [r2, #40]	; 0x28
   1378e:	e794      	b.n	136ba <bus_fault+0x46>
   13790:	4b19      	ldr	r3, [pc, #100]	; (137f8 <bus_fault+0x184>)
   13792:	4a1a      	ldr	r2, [pc, #104]	; (137fc <bus_fault+0x188>)
   13794:	1a9b      	subs	r3, r3, r2
   13796:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   13798:	f04f 0100 	mov.w	r1, #0
   1379c:	2201      	movs	r2, #1
   1379e:	f362 0102 	bfi	r1, r2, #0, #3
   137a2:	f36f 01c5 	bfc	r1, #3, #3
   137a6:	f363 118f 	bfi	r1, r3, #6, #10
   137aa:	481b      	ldr	r0, [pc, #108]	; (13818 <bus_fault+0x1a4>)
   137ac:	f7fe fb52 	bl	11e54 <log_0>
   137b0:	e788      	b.n	136c4 <bus_fault+0x50>
   137b2:	4b11      	ldr	r3, [pc, #68]	; (137f8 <bus_fault+0x184>)
   137b4:	4a11      	ldr	r2, [pc, #68]	; (137fc <bus_fault+0x188>)
   137b6:	1a9b      	subs	r3, r3, r2
   137b8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   137ba:	f04f 0100 	mov.w	r1, #0
   137be:	2201      	movs	r2, #1
   137c0:	f362 0102 	bfi	r1, r2, #0, #3
   137c4:	f36f 01c5 	bfc	r1, #3, #3
   137c8:	f363 118f 	bfi	r1, r3, #6, #10
   137cc:	4813      	ldr	r0, [pc, #76]	; (1381c <bus_fault+0x1a8>)
   137ce:	f7fe fb41 	bl	11e54 <log_0>
   137d2:	e781      	b.n	136d8 <bus_fault+0x64>
   137d4:	4b08      	ldr	r3, [pc, #32]	; (137f8 <bus_fault+0x184>)
   137d6:	4a09      	ldr	r2, [pc, #36]	; (137fc <bus_fault+0x188>)
   137d8:	1a9b      	subs	r3, r3, r2
   137da:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   137dc:	f04f 0100 	mov.w	r1, #0
   137e0:	2201      	movs	r2, #1
   137e2:	f362 0102 	bfi	r1, r2, #0, #3
   137e6:	f36f 01c5 	bfc	r1, #3, #3
   137ea:	f363 118f 	bfi	r1, r3, #6, #10
   137ee:	480c      	ldr	r0, [pc, #48]	; (13820 <bus_fault+0x1ac>)
   137f0:	f7fe fb30 	bl	11e54 <log_0>
   137f4:	e770      	b.n	136d8 <bus_fault+0x64>
   137f6:	bf00      	nop
   137f8:	00025e30 	.word	0x00025e30
   137fc:	00025d80 	.word	0x00025d80
   13800:	00026680 	.word	0x00026680
   13804:	e000ed00 	.word	0xe000ed00
   13808:	00026698 	.word	0x00026698
   1380c:	000266ac 	.word	0x000266ac
   13810:	000266c0 	.word	0x000266c0
   13814:	000266dc 	.word	0x000266dc
   13818:	000266f4 	.word	0x000266f4
   1381c:	00026710 	.word	0x00026710
   13820:	00026728 	.word	0x00026728

00013824 <mem_manage_fault>:
{
   13824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13826:	4605      	mov	r5, r0
   13828:	460c      	mov	r4, r1
   1382a:	4616      	mov	r6, r2
   1382c:	4b64      	ldr	r3, [pc, #400]	; (139c0 <mem_manage_fault+0x19c>)
   1382e:	4a65      	ldr	r2, [pc, #404]	; (139c4 <mem_manage_fault+0x1a0>)
   13830:	1a9b      	subs	r3, r3, r2
   13832:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   13834:	f04f 0100 	mov.w	r1, #0
   13838:	2201      	movs	r2, #1
   1383a:	f362 0102 	bfi	r1, r2, #0, #3
   1383e:	f36f 01c5 	bfc	r1, #3, #3
   13842:	f363 118f 	bfi	r1, r3, #6, #10
   13846:	4860      	ldr	r0, [pc, #384]	; (139c8 <mem_manage_fault+0x1a4>)
   13848:	f7fe fb04 	bl	11e54 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1384c:	4b5f      	ldr	r3, [pc, #380]	; (139cc <mem_manage_fault+0x1a8>)
   1384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13850:	f013 0f10 	tst.w	r3, #16
   13854:	d132      	bne.n	138bc <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13856:	4b5d      	ldr	r3, [pc, #372]	; (139cc <mem_manage_fault+0x1a8>)
   13858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1385a:	f013 0f08 	tst.w	r3, #8
   1385e:	d13e      	bne.n	138de <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13860:	4b5a      	ldr	r3, [pc, #360]	; (139cc <mem_manage_fault+0x1a8>)
   13862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13864:	f013 0f02 	tst.w	r3, #2
   13868:	d14a      	bne.n	13900 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   1386a:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1386e:	4b57      	ldr	r3, [pc, #348]	; (139cc <mem_manage_fault+0x1a8>)
   13870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13872:	f013 0f01 	tst.w	r3, #1
   13876:	d175      	bne.n	13964 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13878:	4b54      	ldr	r3, [pc, #336]	; (139cc <mem_manage_fault+0x1a8>)
   1387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1387c:	f013 0f20 	tst.w	r3, #32
   13880:	f040 8081 	bne.w	13986 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13884:	4b51      	ldr	r3, [pc, #324]	; (139cc <mem_manage_fault+0x1a8>)
   13886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13888:	f013 0f10 	tst.w	r3, #16
   1388c:	d104      	bne.n	13898 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1388e:	4b4f      	ldr	r3, [pc, #316]	; (139cc <mem_manage_fault+0x1a8>)
   13890:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13892:	f014 0402 	ands.w	r4, r4, #2
   13896:	d005      	beq.n	138a4 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13898:	4b4c      	ldr	r3, [pc, #304]	; (139cc <mem_manage_fault+0x1a8>)
   1389a:	685c      	ldr	r4, [r3, #4]
   1389c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   138a0:	f040 8082 	bne.w	139a8 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   138a4:	4a49      	ldr	r2, [pc, #292]	; (139cc <mem_manage_fault+0x1a8>)
   138a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   138a8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   138ac:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   138ae:	2101      	movs	r1, #1
   138b0:	4628      	mov	r0, r5
   138b2:	f00e fa9d 	bl	21df0 <memory_fault_recoverable>
   138b6:	7030      	strb	r0, [r6, #0]
}
   138b8:	4620      	mov	r0, r4
   138ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138bc:	4b40      	ldr	r3, [pc, #256]	; (139c0 <mem_manage_fault+0x19c>)
   138be:	4a41      	ldr	r2, [pc, #260]	; (139c4 <mem_manage_fault+0x1a0>)
   138c0:	1a9b      	subs	r3, r3, r2
   138c2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   138c4:	f04f 0100 	mov.w	r1, #0
   138c8:	2201      	movs	r2, #1
   138ca:	f362 0102 	bfi	r1, r2, #0, #3
   138ce:	f36f 01c5 	bfc	r1, #3, #3
   138d2:	f363 118f 	bfi	r1, r3, #6, #10
   138d6:	483e      	ldr	r0, [pc, #248]	; (139d0 <mem_manage_fault+0x1ac>)
   138d8:	f7fe fabc 	bl	11e54 <log_0>
   138dc:	e7bb      	b.n	13856 <mem_manage_fault+0x32>
   138de:	4b38      	ldr	r3, [pc, #224]	; (139c0 <mem_manage_fault+0x19c>)
   138e0:	4a38      	ldr	r2, [pc, #224]	; (139c4 <mem_manage_fault+0x1a0>)
   138e2:	1a9b      	subs	r3, r3, r2
   138e4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   138e6:	f04f 0100 	mov.w	r1, #0
   138ea:	2201      	movs	r2, #1
   138ec:	f362 0102 	bfi	r1, r2, #0, #3
   138f0:	f36f 01c5 	bfc	r1, #3, #3
   138f4:	f363 118f 	bfi	r1, r3, #6, #10
   138f8:	4836      	ldr	r0, [pc, #216]	; (139d4 <mem_manage_fault+0x1b0>)
   138fa:	f7fe faab 	bl	11e54 <log_0>
   138fe:	e7af      	b.n	13860 <mem_manage_fault+0x3c>
   13900:	4b2f      	ldr	r3, [pc, #188]	; (139c0 <mem_manage_fault+0x19c>)
   13902:	4a30      	ldr	r2, [pc, #192]	; (139c4 <mem_manage_fault+0x1a0>)
   13904:	1a9b      	subs	r3, r3, r2
   13906:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   13908:	f04f 0100 	mov.w	r1, #0
   1390c:	2201      	movs	r2, #1
   1390e:	f362 0102 	bfi	r1, r2, #0, #3
   13912:	f36f 01c5 	bfc	r1, #3, #3
   13916:	f363 118f 	bfi	r1, r3, #6, #10
   1391a:	482f      	ldr	r0, [pc, #188]	; (139d8 <mem_manage_fault+0x1b4>)
   1391c:	f7fe fa9a 	bl	11e54 <log_0>
		uint32_t temp = SCB->MMFAR;
   13920:	4b2a      	ldr	r3, [pc, #168]	; (139cc <mem_manage_fault+0x1a8>)
   13922:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13926:	f013 0f80 	tst.w	r3, #128	; 0x80
   1392a:	d102      	bne.n	13932 <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   1392c:	f06f 0715 	mvn.w	r7, #21
   13930:	e79d      	b.n	1386e <mem_manage_fault+0x4a>
   13932:	4b23      	ldr	r3, [pc, #140]	; (139c0 <mem_manage_fault+0x19c>)
   13934:	4a23      	ldr	r2, [pc, #140]	; (139c4 <mem_manage_fault+0x1a0>)
   13936:	1a9b      	subs	r3, r3, r2
   13938:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1393a:	f04f 0200 	mov.w	r2, #0
   1393e:	2101      	movs	r1, #1
   13940:	f361 0202 	bfi	r2, r1, #0, #3
   13944:	f36f 02c5 	bfc	r2, #3, #3
   13948:	f363 128f 	bfi	r2, r3, #6, #10
   1394c:	4639      	mov	r1, r7
   1394e:	4823      	ldr	r0, [pc, #140]	; (139dc <mem_manage_fault+0x1b8>)
   13950:	f7fe f9ca 	bl	11ce8 <log_1>
			if (from_hard_fault != 0) {
   13954:	2c00      	cmp	r4, #0
   13956:	d08a      	beq.n	1386e <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13958:	4a1c      	ldr	r2, [pc, #112]	; (139cc <mem_manage_fault+0x1a8>)
   1395a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1395c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13960:	6293      	str	r3, [r2, #40]	; 0x28
   13962:	e784      	b.n	1386e <mem_manage_fault+0x4a>
   13964:	4b16      	ldr	r3, [pc, #88]	; (139c0 <mem_manage_fault+0x19c>)
   13966:	4a17      	ldr	r2, [pc, #92]	; (139c4 <mem_manage_fault+0x1a0>)
   13968:	1a9b      	subs	r3, r3, r2
   1396a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   1396c:	f04f 0100 	mov.w	r1, #0
   13970:	2201      	movs	r2, #1
   13972:	f362 0102 	bfi	r1, r2, #0, #3
   13976:	f36f 01c5 	bfc	r1, #3, #3
   1397a:	f363 118f 	bfi	r1, r3, #6, #10
   1397e:	4818      	ldr	r0, [pc, #96]	; (139e0 <mem_manage_fault+0x1bc>)
   13980:	f7fe fa68 	bl	11e54 <log_0>
   13984:	e778      	b.n	13878 <mem_manage_fault+0x54>
   13986:	4b0e      	ldr	r3, [pc, #56]	; (139c0 <mem_manage_fault+0x19c>)
   13988:	4a0e      	ldr	r2, [pc, #56]	; (139c4 <mem_manage_fault+0x1a0>)
   1398a:	1a9b      	subs	r3, r3, r2
   1398c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   1398e:	f04f 0100 	mov.w	r1, #0
   13992:	2201      	movs	r2, #1
   13994:	f362 0102 	bfi	r1, r2, #0, #3
   13998:	f36f 01c5 	bfc	r1, #3, #3
   1399c:	f363 118f 	bfi	r1, r3, #6, #10
   139a0:	4810      	ldr	r0, [pc, #64]	; (139e4 <mem_manage_fault+0x1c0>)
   139a2:	f7fe fa57 	bl	11e54 <log_0>
   139a6:	e76d      	b.n	13884 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   139a8:	4629      	mov	r1, r5
   139aa:	4638      	mov	r0, r7
   139ac:	f7ff fd22 	bl	133f4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   139b0:	4604      	mov	r4, r0
   139b2:	2800      	cmp	r0, #0
   139b4:	f43f af76 	beq.w	138a4 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   139b8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   139bc:	2402      	movs	r4, #2
   139be:	e771      	b.n	138a4 <mem_manage_fault+0x80>
   139c0:	00025e30 	.word	0x00025e30
   139c4:	00025d80 	.word	0x00025d80
   139c8:	00026758 	.word	0x00026758
   139cc:	e000ed00 	.word	0xe000ed00
   139d0:	00026770 	.word	0x00026770
   139d4:	000266ac 	.word	0x000266ac
   139d8:	000267a4 	.word	0x000267a4
   139dc:	000267bc 	.word	0x000267bc
   139e0:	000267d4 	.word	0x000267d4
   139e4:	00026728 	.word	0x00026728

000139e8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   139e8:	b570      	push	{r4, r5, r6, lr}
   139ea:	4605      	mov	r5, r0
   139ec:	460c      	mov	r4, r1
   139ee:	4b47      	ldr	r3, [pc, #284]	; (13b0c <hard_fault+0x124>)
   139f0:	4a47      	ldr	r2, [pc, #284]	; (13b10 <hard_fault+0x128>)
   139f2:	1a9b      	subs	r3, r3, r2
   139f4:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   139f6:	f04f 0100 	mov.w	r1, #0
   139fa:	2201      	movs	r2, #1
   139fc:	f362 0102 	bfi	r1, r2, #0, #3
   13a00:	f36f 01c5 	bfc	r1, #3, #3
   13a04:	f363 118f 	bfi	r1, r3, #6, #10
   13a08:	4842      	ldr	r0, [pc, #264]	; (13b14 <hard_fault+0x12c>)
   13a0a:	f7fe fa23 	bl	11e54 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   13a0e:	2300      	movs	r3, #0
   13a10:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13a12:	4b41      	ldr	r3, [pc, #260]	; (13b18 <hard_fault+0x130>)
   13a14:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   13a16:	f016 0602 	ands.w	r6, r6, #2
   13a1a:	d109      	bne.n	13a30 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13a1c:	4b3e      	ldr	r3, [pc, #248]	; (13b18 <hard_fault+0x130>)
   13a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13a20:	2b00      	cmp	r3, #0
   13a22:	db17      	blt.n	13a54 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13a24:	4b3c      	ldr	r3, [pc, #240]	; (13b18 <hard_fault+0x130>)
   13a26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   13a28:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   13a2c:	d124      	bne.n	13a78 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   13a2e:	bd70      	pop	{r4, r5, r6, pc}
   13a30:	4b36      	ldr	r3, [pc, #216]	; (13b0c <hard_fault+0x124>)
   13a32:	4a37      	ldr	r2, [pc, #220]	; (13b10 <hard_fault+0x128>)
   13a34:	1a9b      	subs	r3, r3, r2
   13a36:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   13a38:	f04f 0100 	mov.w	r1, #0
   13a3c:	2201      	movs	r2, #1
   13a3e:	f362 0102 	bfi	r1, r2, #0, #3
   13a42:	f36f 01c5 	bfc	r1, #3, #3
   13a46:	f363 118f 	bfi	r1, r3, #6, #10
   13a4a:	4834      	ldr	r0, [pc, #208]	; (13b1c <hard_fault+0x134>)
   13a4c:	f7fe fa02 	bl	11e54 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13a50:	2000      	movs	r0, #0
   13a52:	e7ec      	b.n	13a2e <hard_fault+0x46>
   13a54:	4b2d      	ldr	r3, [pc, #180]	; (13b0c <hard_fault+0x124>)
   13a56:	4a2e      	ldr	r2, [pc, #184]	; (13b10 <hard_fault+0x128>)
   13a58:	1a9b      	subs	r3, r3, r2
   13a5a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   13a5c:	f04f 0100 	mov.w	r1, #0
   13a60:	2201      	movs	r2, #1
   13a62:	f362 0102 	bfi	r1, r2, #0, #3
   13a66:	f36f 01c5 	bfc	r1, #3, #3
   13a6a:	f363 118f 	bfi	r1, r3, #6, #10
   13a6e:	482c      	ldr	r0, [pc, #176]	; (13b20 <hard_fault+0x138>)
   13a70:	f7fe f9f0 	bl	11e54 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13a74:	4630      	mov	r0, r6
   13a76:	e7da      	b.n	13a2e <hard_fault+0x46>
   13a78:	4b24      	ldr	r3, [pc, #144]	; (13b0c <hard_fault+0x124>)
   13a7a:	4a25      	ldr	r2, [pc, #148]	; (13b10 <hard_fault+0x128>)
   13a7c:	1a9b      	subs	r3, r3, r2
   13a7e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   13a80:	f04f 0100 	mov.w	r1, #0
   13a84:	2201      	movs	r2, #1
   13a86:	f362 0102 	bfi	r1, r2, #0, #3
   13a8a:	f36f 01c5 	bfc	r1, #3, #3
   13a8e:	f363 118f 	bfi	r1, r3, #6, #10
   13a92:	4824      	ldr	r0, [pc, #144]	; (13b24 <hard_fault+0x13c>)
   13a94:	f7fe f9de 	bl	11e54 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   13a98:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   13a9a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13a9e:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13aa2:	429a      	cmp	r2, r3
   13aa4:	d00e      	beq.n	13ac4 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
   13aa6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13aaa:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   13aae:	781b      	ldrb	r3, [r3, #0]
   13ab0:	b9db      	cbnz	r3, 13aea <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
   13ab2:	4b1d      	ldr	r3, [pc, #116]	; (13b28 <hard_fault+0x140>)
   13ab4:	781b      	ldrb	r3, [r3, #0]
   13ab6:	b9f3      	cbnz	r3, 13af6 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
   13ab8:	4b1c      	ldr	r3, [pc, #112]	; (13b2c <hard_fault+0x144>)
   13aba:	881b      	ldrh	r3, [r3, #0]
   13abc:	b29b      	uxth	r3, r3
   13abe:	bb03      	cbnz	r3, 13b02 <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13ac0:	4630      	mov	r0, r6
	return reason;
   13ac2:	e7b4      	b.n	13a2e <hard_fault+0x46>
   13ac4:	4b11      	ldr	r3, [pc, #68]	; (13b0c <hard_fault+0x124>)
   13ac6:	4a12      	ldr	r2, [pc, #72]	; (13b10 <hard_fault+0x128>)
   13ac8:	1a9b      	subs	r3, r3, r2
   13aca:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   13acc:	f04f 0200 	mov.w	r2, #0
   13ad0:	2101      	movs	r1, #1
   13ad2:	f361 0202 	bfi	r2, r1, #0, #3
   13ad6:	f36f 02c5 	bfc	r2, #3, #3
   13ada:	f363 128f 	bfi	r2, r3, #6, #10
   13ade:	6829      	ldr	r1, [r5, #0]
   13ae0:	4813      	ldr	r0, [pc, #76]	; (13b30 <hard_fault+0x148>)
   13ae2:	f7fe f901 	bl	11ce8 <log_1>
			reason = esf->basic.r0;
   13ae6:	6828      	ldr	r0, [r5, #0]
   13ae8:	e7a1      	b.n	13a2e <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
   13aea:	4622      	mov	r2, r4
   13aec:	2101      	movs	r1, #1
   13aee:	4628      	mov	r0, r5
   13af0:	f7ff fe98 	bl	13824 <mem_manage_fault>
   13af4:	e79b      	b.n	13a2e <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
   13af6:	4622      	mov	r2, r4
   13af8:	2101      	movs	r1, #1
   13afa:	4628      	mov	r0, r5
   13afc:	f7ff fdba 	bl	13674 <bus_fault>
   13b00:	e795      	b.n	13a2e <hard_fault+0x46>
			reason = usage_fault(esf);
   13b02:	4628      	mov	r0, r5
   13b04:	f7ff fcea 	bl	134dc <usage_fault>
   13b08:	e791      	b.n	13a2e <hard_fault+0x46>
   13b0a:	bf00      	nop
   13b0c:	00025e30 	.word	0x00025e30
   13b10:	00025d80 	.word	0x00025d80
   13b14:	000267f4 	.word	0x000267f4
   13b18:	e000ed00 	.word	0xe000ed00
   13b1c:	0002680c 	.word	0x0002680c
   13b20:	00026830 	.word	0x00026830
   13b24:	00026840 	.word	0x00026840
   13b28:	e000ed29 	.word	0xe000ed29
   13b2c:	e000ed2a 	.word	0xe000ed2a
   13b30:	00026860 	.word	0x00026860

00013b34 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   13b34:	b508      	push	{r3, lr}
   13b36:	460a      	mov	r2, r1
   13b38:	480b      	ldr	r0, [pc, #44]	; (13b68 <reserved_exception+0x34>)
   13b3a:	4b0c      	ldr	r3, [pc, #48]	; (13b6c <reserved_exception+0x38>)
   13b3c:	1ac0      	subs	r0, r0, r3
   13b3e:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   13b40:	f04f 0300 	mov.w	r3, #0
   13b44:	2101      	movs	r1, #1
   13b46:	f361 0302 	bfi	r3, r1, #0, #3
   13b4a:	f36f 03c5 	bfc	r3, #3, #3
   13b4e:	f360 138f 	bfi	r3, r0, #6, #10
   13b52:	2a0f      	cmp	r2, #15
   13b54:	dc05      	bgt.n	13b62 <reserved_exception+0x2e>
   13b56:	4906      	ldr	r1, [pc, #24]	; (13b70 <reserved_exception+0x3c>)
   13b58:	3a10      	subs	r2, #16
   13b5a:	4806      	ldr	r0, [pc, #24]	; (13b74 <reserved_exception+0x40>)
   13b5c:	f7fe f8fa 	bl	11d54 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   13b60:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   13b62:	4905      	ldr	r1, [pc, #20]	; (13b78 <reserved_exception+0x44>)
   13b64:	e7f8      	b.n	13b58 <reserved_exception+0x24>
   13b66:	bf00      	nop
   13b68:	00025e30 	.word	0x00025e30
   13b6c:	00025d80 	.word	0x00025d80
   13b70:	0002687c 	.word	0x0002687c
   13b74:	000268b0 	.word	0x000268b0
   13b78:	00026894 	.word	0x00026894

00013b7c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b7e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13b80:	4b2e      	ldr	r3, [pc, #184]	; (13c3c <z_arm_fault+0xc0>)
   13b82:	685d      	ldr	r5, [r3, #4]
   13b84:	f3c5 0508 	ubfx	r5, r5, #0, #9
   13b88:	2300      	movs	r3, #0
   13b8a:	f383 8811 	msr	BASEPRI, r3
   13b8e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13b92:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13b96:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13b9a:	d12a      	bne.n	13bf2 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13b9c:	f002 030c 	and.w	r3, r2, #12
   13ba0:	2b08      	cmp	r3, #8
   13ba2:	d010      	beq.n	13bc6 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13ba4:	f012 0f08 	tst.w	r2, #8
   13ba8:	d020      	beq.n	13bec <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
   13baa:	460c      	mov	r4, r1
	*nested_exc = false;
   13bac:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   13bae:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   13bb2:	4629      	mov	r1, r5
   13bb4:	4620      	mov	r0, r4
   13bb6:	f00e f91d 	bl	21df4 <fault_handle>
   13bba:	4606      	mov	r6, r0
	if (recoverable) {
   13bbc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   13bc0:	b1d3      	cbz	r3, 13bf8 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   13bc2:	b00b      	add	sp, #44	; 0x2c
   13bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13bc6:	4b1e      	ldr	r3, [pc, #120]	; (13c40 <z_arm_fault+0xc4>)
   13bc8:	4a1e      	ldr	r2, [pc, #120]	; (13c44 <z_arm_fault+0xc8>)
   13bca:	1a9b      	subs	r3, r3, r2
   13bcc:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13bce:	f04f 0100 	mov.w	r1, #0
   13bd2:	2201      	movs	r2, #1
   13bd4:	f362 0102 	bfi	r1, r2, #0, #3
   13bd8:	f36f 01c5 	bfc	r1, #3, #3
   13bdc:	f363 118f 	bfi	r1, r3, #6, #10
   13be0:	4819      	ldr	r0, [pc, #100]	; (13c48 <z_arm_fault+0xcc>)
   13be2:	f7fe f937 	bl	11e54 <log_0>
	*nested_exc = false;
   13be6:	2700      	movs	r7, #0
		return NULL;
   13be8:	463c      	mov	r4, r7
   13bea:	e7e0      	b.n	13bae <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   13bec:	4604      	mov	r4, r0
			*nested_exc = true;
   13bee:	2701      	movs	r7, #1
   13bf0:	e7dd      	b.n	13bae <z_arm_fault+0x32>
	*nested_exc = false;
   13bf2:	2700      	movs	r7, #0
		return NULL;
   13bf4:	463c      	mov	r4, r7
   13bf6:	e7da      	b.n	13bae <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13bf8:	ad01      	add	r5, sp, #4
   13bfa:	6820      	ldr	r0, [r4, #0]
   13bfc:	6861      	ldr	r1, [r4, #4]
   13bfe:	68a2      	ldr	r2, [r4, #8]
   13c00:	68e3      	ldr	r3, [r4, #12]
   13c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13c04:	6920      	ldr	r0, [r4, #16]
   13c06:	6961      	ldr	r1, [r4, #20]
   13c08:	69a2      	ldr	r2, [r4, #24]
   13c0a:	69e3      	ldr	r3, [r4, #28]
   13c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
   13c0e:	b14f      	cbz	r7, 13c24 <z_arm_fault+0xa8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13c10:	9b08      	ldr	r3, [sp, #32]
   13c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13c16:	b95a      	cbnz	r2, 13c30 <z_arm_fault+0xb4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13c18:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13c1c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   13c20:	9308      	str	r3, [sp, #32]
   13c22:	e005      	b.n	13c30 <z_arm_fault+0xb4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13c24:	9b08      	ldr	r3, [sp, #32]
   13c26:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13c2a:	f023 0301 	bic.w	r3, r3, #1
   13c2e:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   13c30:	a901      	add	r1, sp, #4
   13c32:	4630      	mov	r0, r6
   13c34:	f00e f8be 	bl	21db4 <z_arm_fatal_error>
   13c38:	e7c3      	b.n	13bc2 <z_arm_fault+0x46>
   13c3a:	bf00      	nop
   13c3c:	e000ed00 	.word	0xe000ed00
   13c40:	00025e30 	.word	0x00025e30
   13c44:	00025d80 	.word	0x00025d80
   13c48:	000268c4 	.word	0x000268c4

00013c4c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13c4c:	4a02      	ldr	r2, [pc, #8]	; (13c58 <z_arm_fault_init+0xc>)
   13c4e:	6953      	ldr	r3, [r2, #20]
   13c50:	f043 0310 	orr.w	r3, r3, #16
   13c54:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13c56:	4770      	bx	lr
   13c58:	e000ed00 	.word	0xe000ed00

00013c5c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13c5c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13c60:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13c64:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13c66:	4672      	mov	r2, lr
	bl z_arm_fault
   13c68:	f7ff ff88 	bl	13b7c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13c6c:	bd01      	pop	{r0, pc}
   13c6e:	bf00      	nop

00013c70 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13c70:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13c72:	e006      	b.n	13c82 <z_arm_interrupt_init+0x12>
   13c74:	f002 010f 	and.w	r1, r2, #15
   13c78:	4b09      	ldr	r3, [pc, #36]	; (13ca0 <z_arm_interrupt_init+0x30>)
   13c7a:	440b      	add	r3, r1
   13c7c:	2140      	movs	r1, #64	; 0x40
   13c7e:	7619      	strb	r1, [r3, #24]
   13c80:	3201      	adds	r2, #1
   13c82:	2a2f      	cmp	r2, #47	; 0x2f
   13c84:	dc0a      	bgt.n	13c9c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   13c86:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   13c88:	2b00      	cmp	r3, #0
   13c8a:	dbf3      	blt.n	13c74 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13c8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13c90:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13c94:	2140      	movs	r1, #64	; 0x40
   13c96:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13c9a:	e7f1      	b.n	13c80 <z_arm_interrupt_init+0x10>
	}
}
   13c9c:	4770      	bx	lr
   13c9e:	bf00      	nop
   13ca0:	e000ecfc 	.word	0xe000ecfc

00013ca4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13ca4:	2000      	movs	r0, #0
    msr CONTROL, r0
   13ca6:	f380 8814 	msr	CONTROL, r0
    isb
   13caa:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13cae:	f011 fee3 	bl	25a78 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13cb2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13cb4:	490d      	ldr	r1, [pc, #52]	; (13cec <__start+0x48>)
    str r0, [r1]
   13cb6:	6008      	str	r0, [r1, #0]
    dsb
   13cb8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13cbc:	480c      	ldr	r0, [pc, #48]	; (13cf0 <__start+0x4c>)
    msr msp, r0
   13cbe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13cc2:	f000 f829 	bl	13d18 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13cc6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13cc8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13ccc:	4809      	ldr	r0, [pc, #36]	; (13cf4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13cce:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13cd2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13cd4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13cd8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13cdc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13cde:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13ce0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13ce4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13ce8:	f7ff faf0 	bl	132cc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13cec:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13cf0:	20005980 	.word	0x20005980
    ldr r0, =z_interrupt_stacks
   13cf4:	20005b00 	.word	0x20005b00

00013cf8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13cf8:	4b06      	ldr	r3, [pc, #24]	; (13d14 <z_arm_clear_arm_mpu_config+0x1c>)
   13cfa:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   13cfc:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13d00:	2300      	movs	r3, #0
   13d02:	4283      	cmp	r3, r0
   13d04:	da05      	bge.n	13d12 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13d06:	4a03      	ldr	r2, [pc, #12]	; (13d14 <z_arm_clear_arm_mpu_config+0x1c>)
   13d08:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13d0a:	2100      	movs	r1, #0
   13d0c:	6111      	str	r1, [r2, #16]
   13d0e:	3301      	adds	r3, #1
   13d10:	e7f7      	b.n	13d02 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   13d12:	4770      	bx	lr
   13d14:	e000ed90 	.word	0xe000ed90

00013d18 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13d18:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13d1a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13d1c:	2400      	movs	r4, #0
   13d1e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13d22:	f7ff ffe9 	bl	13cf8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13d26:	4623      	mov	r3, r4
   13d28:	e008      	b.n	13d3c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   13d2a:	f103 0120 	add.w	r1, r3, #32
   13d2e:	4a0e      	ldr	r2, [pc, #56]	; (13d68 <z_arm_init_arch_hw_at_boot+0x50>)
   13d30:	f04f 30ff 	mov.w	r0, #4294967295
   13d34:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13d38:	3301      	adds	r3, #1
   13d3a:	b2db      	uxtb	r3, r3
   13d3c:	2b07      	cmp	r3, #7
   13d3e:	d9f4      	bls.n	13d2a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13d40:	2300      	movs	r3, #0
   13d42:	e008      	b.n	13d56 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13d44:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13d48:	4a07      	ldr	r2, [pc, #28]	; (13d68 <z_arm_init_arch_hw_at_boot+0x50>)
   13d4a:	f04f 30ff 	mov.w	r0, #4294967295
   13d4e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13d52:	3301      	adds	r3, #1
   13d54:	b2db      	uxtb	r3, r3
   13d56:	2b07      	cmp	r3, #7
   13d58:	d9f4      	bls.n	13d44 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13d5a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13d60:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13d64:	bd10      	pop	{r4, pc}
   13d66:	bf00      	nop
   13d68:	e000e100 	.word	0xe000e100

00013d6c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13d6c:	b508      	push	{r3, lr}
	if (_current == thread) {
   13d6e:	4b08      	ldr	r3, [pc, #32]	; (13d90 <z_impl_k_thread_abort+0x24>)
   13d70:	689b      	ldr	r3, [r3, #8]
   13d72:	4283      	cmp	r3, r0
   13d74:	d002      	beq.n	13d7c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   13d76:	f009 fd8b 	bl	1d890 <z_thread_abort>
}
   13d7a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13d7c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13d80:	2b00      	cmp	r3, #0
   13d82:	d0f8      	beq.n	13d76 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13d84:	4a03      	ldr	r2, [pc, #12]	; (13d94 <z_impl_k_thread_abort+0x28>)
   13d86:	6853      	ldr	r3, [r2, #4]
   13d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13d8c:	6053      	str	r3, [r2, #4]
   13d8e:	e7f2      	b.n	13d76 <z_impl_k_thread_abort+0xa>
   13d90:	20002fe8 	.word	0x20002fe8
   13d94:	e000ed00 	.word	0xe000ed00

00013d98 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13d98:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13d9a:	4b03      	ldr	r3, [pc, #12]	; (13da8 <z_arm_configure_static_mpu_regions+0x10>)
   13d9c:	4a03      	ldr	r2, [pc, #12]	; (13dac <z_arm_configure_static_mpu_regions+0x14>)
   13d9e:	2101      	movs	r1, #1
   13da0:	4803      	ldr	r0, [pc, #12]	; (13db0 <z_arm_configure_static_mpu_regions+0x18>)
   13da2:	f00e f87c 	bl	21e9e <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13da6:	bd08      	pop	{r3, pc}
   13da8:	20040000 	.word	0x20040000
   13dac:	20000000 	.word	0x20000000
   13db0:	000268f4 	.word	0x000268f4

00013db4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13db4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13db6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   13dba:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13dbc:	4804      	ldr	r0, [pc, #16]	; (13dd0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13dbe:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   13dc0:	2320      	movs	r3, #32
   13dc2:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13dc4:	4b03      	ldr	r3, [pc, #12]	; (13dd4 <z_arm_configure_dynamic_mpu_regions+0x20>)
   13dc6:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13dc8:	2101      	movs	r1, #1
   13dca:	f00e f86c 	bl	21ea6 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   13dce:	bd08      	pop	{r3, pc}
   13dd0:	20002824 	.word	0x20002824
   13dd4:	150b0000 	.word	0x150b0000

00013dd8 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13dd8:	4a06      	ldr	r2, [pc, #24]	; (13df4 <region_init+0x1c>)
   13dda:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13ddc:	680b      	ldr	r3, [r1, #0]
   13dde:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13de2:	4303      	orrs	r3, r0
   13de4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13de8:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13dea:	688b      	ldr	r3, [r1, #8]
   13dec:	f043 0301 	orr.w	r3, r3, #1
   13df0:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   13df2:	4770      	bx	lr
   13df4:	e000ed90 	.word	0xe000ed90

00013df8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   13df8:	b510      	push	{r4, lr}
   13dfa:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   13dfc:	2807      	cmp	r0, #7
   13dfe:	d803      	bhi.n	13e08 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   13e00:	f7ff ffea 	bl	13dd8 <region_init>

	return index;
   13e04:	4620      	mov	r0, r4
}
   13e06:	bd10      	pop	{r4, pc}
   13e08:	4b09      	ldr	r3, [pc, #36]	; (13e30 <region_allocate_and_init+0x38>)
   13e0a:	4a0a      	ldr	r2, [pc, #40]	; (13e34 <region_allocate_and_init+0x3c>)
   13e0c:	1a9b      	subs	r3, r3, r2
   13e0e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13e10:	f04f 0200 	mov.w	r2, #0
   13e14:	2101      	movs	r1, #1
   13e16:	f361 0202 	bfi	r2, r1, #0, #3
   13e1a:	f36f 02c5 	bfc	r2, #3, #3
   13e1e:	f363 128f 	bfi	r2, r3, #6, #10
   13e22:	4601      	mov	r1, r0
   13e24:	4804      	ldr	r0, [pc, #16]	; (13e38 <region_allocate_and_init+0x40>)
   13e26:	f7fd ff5f 	bl	11ce8 <log_1>
		return -EINVAL;
   13e2a:	f06f 0015 	mvn.w	r0, #21
   13e2e:	e7ea      	b.n	13e06 <region_allocate_and_init+0xe>
   13e30:	00025e10 	.word	0x00025e10
   13e34:	00025d80 	.word	0x00025d80
   13e38:	00026900 	.word	0x00026900

00013e3c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e40:	4680      	mov	r8, r0
   13e42:	460f      	mov	r7, r1
   13e44:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   13e46:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   13e48:	2400      	movs	r4, #0
   13e4a:	e009      	b.n	13e60 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13e4c:	4629      	mov	r1, r5
   13e4e:	b2f0      	uxtb	r0, r6
   13e50:	f00e f806 	bl	21e60 <mpu_configure_region>
   13e54:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   13e56:	f110 0f16 	cmn.w	r0, #22
   13e5a:	d025      	beq.n	13ea8 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   13e5c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   13e5e:	3401      	adds	r4, #1
   13e60:	42bc      	cmp	r4, r7
   13e62:	da21      	bge.n	13ea8 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   13e64:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   13e68:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   13e6c:	686a      	ldr	r2, [r5, #4]
   13e6e:	2a00      	cmp	r2, #0
   13e70:	d0f5      	beq.n	13e5e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   13e72:	f1ba 0f00 	cmp.w	sl, #0
   13e76:	d0e9      	beq.n	13e4c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   13e78:	4628      	mov	r0, r5
   13e7a:	f00d ffe0 	bl	21e3e <mpu_partition_is_valid>
		if (do_sanity_check &&
   13e7e:	2800      	cmp	r0, #0
   13e80:	d1e4      	bne.n	13e4c <mpu_configure_regions+0x10>
   13e82:	4b0b      	ldr	r3, [pc, #44]	; (13eb0 <mpu_configure_regions+0x74>)
   13e84:	4a0b      	ldr	r2, [pc, #44]	; (13eb4 <mpu_configure_regions+0x78>)
   13e86:	1a9b      	subs	r3, r3, r2
   13e88:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   13e8a:	f04f 0200 	mov.w	r2, #0
   13e8e:	2101      	movs	r1, #1
   13e90:	f361 0202 	bfi	r2, r1, #0, #3
   13e94:	f36f 02c5 	bfc	r2, #3, #3
   13e98:	f363 128f 	bfi	r2, r3, #6, #10
   13e9c:	4621      	mov	r1, r4
   13e9e:	4806      	ldr	r0, [pc, #24]	; (13eb8 <mpu_configure_regions+0x7c>)
   13ea0:	f7fd ff22 	bl	11ce8 <log_1>
			return -EINVAL;
   13ea4:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   13ea8:	4630      	mov	r0, r6
   13eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13eae:	bf00      	nop
   13eb0:	00025e10 	.word	0x00025e10
   13eb4:	00025d80 	.word	0x00025d80
   13eb8:	00026928 	.word	0x00026928

00013ebc <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   13ebc:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   13ebe:	4c03      	ldr	r4, [pc, #12]	; (13ecc <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13ec0:	2301      	movs	r3, #1
   13ec2:	7822      	ldrb	r2, [r4, #0]
   13ec4:	f7ff ffba 	bl	13e3c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13ec8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   13eca:	bd10      	pop	{r4, pc}
   13ecc:	20003a09 	.word	0x20003a09

00013ed0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13ed0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13ed2:	2300      	movs	r3, #0
   13ed4:	4a08      	ldr	r2, [pc, #32]	; (13ef8 <mpu_configure_dynamic_mpu_regions+0x28>)
   13ed6:	7812      	ldrb	r2, [r2, #0]
   13ed8:	f7ff ffb0 	bl	13e3c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13edc:	f110 0f16 	cmn.w	r0, #22
   13ee0:	d008      	beq.n	13ef4 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13ee2:	4603      	mov	r3, r0
   13ee4:	2b07      	cmp	r3, #7
   13ee6:	dc05      	bgt.n	13ef4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   13ee8:	4a04      	ldr	r2, [pc, #16]	; (13efc <mpu_configure_dynamic_mpu_regions+0x2c>)
   13eea:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13eec:	2100      	movs	r1, #0
   13eee:	6111      	str	r1, [r2, #16]
   13ef0:	3301      	adds	r3, #1
   13ef2:	e7f7      	b.n	13ee4 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   13ef4:	bd08      	pop	{r3, pc}
   13ef6:	bf00      	nop
   13ef8:	20003a09 	.word	0x20003a09
   13efc:	e000ed90 	.word	0xe000ed90

00013f00 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13f00:	4b03      	ldr	r3, [pc, #12]	; (13f10 <arm_core_mpu_enable+0x10>)
   13f02:	2205      	movs	r2, #5
   13f04:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13f0a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13f0e:	4770      	bx	lr
   13f10:	e000ed90 	.word	0xe000ed90

00013f14 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13f14:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13f18:	4b01      	ldr	r3, [pc, #4]	; (13f20 <arm_core_mpu_disable+0xc>)
   13f1a:	2200      	movs	r2, #0
   13f1c:	605a      	str	r2, [r3, #4]
}
   13f1e:	4770      	bx	lr
   13f20:	e000ed90 	.word	0xe000ed90

00013f24 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   13f24:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13f26:	4b0e      	ldr	r3, [pc, #56]	; (13f60 <z_arm_mpu_init+0x3c>)
   13f28:	681d      	ldr	r5, [r3, #0]
   13f2a:	2d08      	cmp	r5, #8
   13f2c:	d815      	bhi.n	13f5a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13f2e:	f7ff fff1 	bl	13f14 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13f32:	2400      	movs	r4, #0
   13f34:	42a5      	cmp	r5, r4
   13f36:	d90a      	bls.n	13f4e <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   13f38:	4b09      	ldr	r3, [pc, #36]	; (13f60 <z_arm_mpu_init+0x3c>)
   13f3a:	6859      	ldr	r1, [r3, #4]
   13f3c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   13f40:	0093      	lsls	r3, r2, #2
   13f42:	4419      	add	r1, r3
   13f44:	4620      	mov	r0, r4
   13f46:	f7ff ff47 	bl	13dd8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13f4a:	3401      	adds	r4, #1
   13f4c:	e7f2      	b.n	13f34 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13f4e:	4b05      	ldr	r3, [pc, #20]	; (13f64 <z_arm_mpu_init+0x40>)
   13f50:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   13f52:	f7ff ffd5 	bl	13f00 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13f56:	2000      	movs	r0, #0
}
   13f58:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   13f5a:	f04f 30ff 	mov.w	r0, #4294967295
   13f5e:	e7fb      	b.n	13f58 <z_arm_mpu_init+0x34>
   13f60:	0002695c 	.word	0x0002695c
   13f64:	20003a09 	.word	0x20003a09

00013f68 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13f68:	4b01      	ldr	r3, [pc, #4]	; (13f70 <__stdout_hook_install+0x8>)
   13f6a:	6018      	str	r0, [r3, #0]
}
   13f6c:	4770      	bx	lr
   13f6e:	bf00      	nop
   13f70:	20000438 	.word	0x20000438

00013f74 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   13f74:	4b06      	ldr	r3, [pc, #24]	; (13f90 <nrf52_errata_197+0x1c>)
   13f76:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   13f78:	4a06      	ldr	r2, [pc, #24]	; (13f94 <nrf52_errata_197+0x20>)
   13f7a:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   13f7c:	2b08      	cmp	r3, #8
   13f7e:	d001      	beq.n	13f84 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   13f80:	2000      	movs	r0, #0
   13f82:	4770      	bx	lr
                switch(var2)
   13f84:	2a02      	cmp	r2, #2
   13f86:	d001      	beq.n	13f8c <nrf52_errata_197+0x18>
                        return false;
   13f88:	2000      	movs	r0, #0
   13f8a:	4770      	bx	lr
                        return true;
   13f8c:	2001      	movs	r0, #1
    #endif
}
   13f8e:	4770      	bx	lr
   13f90:	10000130 	.word	0x10000130
   13f94:	10000134 	.word	0x10000134

00013f98 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   13f98:	b510      	push	{r4, lr}
	__asm__ volatile(
   13f9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   13f9e:	f3ef 8411 	mrs	r4, BASEPRI
   13fa2:	f383 8812 	msr	BASEPRI_MAX, r3
   13fa6:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13faa:	2301      	movs	r3, #1
   13fac:	4a0b      	ldr	r2, [pc, #44]	; (13fdc <nordicsemi_nrf52_init+0x44>)
   13fae:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13fb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   13fb6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   13fba:	f7ff ffdb 	bl	13f74 <nrf52_errata_197>
   13fbe:	b110      	cbz	r0, 13fc6 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   13fc0:	4b07      	ldr	r3, [pc, #28]	; (13fe0 <nordicsemi_nrf52_init+0x48>)
   13fc2:	2201      	movs	r2, #1
   13fc4:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   13fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13fca:	2201      	movs	r2, #1
   13fcc:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   13fd0:	f384 8811 	msr	BASEPRI, r4
   13fd4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13fd8:	2000      	movs	r0, #0
   13fda:	bd10      	pop	{r4, pc}
   13fdc:	4001e000 	.word	0x4001e000
   13fe0:	40000638 	.word	0x40000638

00013fe4 <sys_arch_reboot>:
    *p_gpregret = val;
   13fe4:	b2c0      	uxtb	r0, r0
   13fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13fea:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13fee:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13ff2:	4905      	ldr	r1, [pc, #20]	; (14008 <sys_arch_reboot+0x24>)
   13ff4:	68ca      	ldr	r2, [r1, #12]
   13ff6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13ffa:	4b04      	ldr	r3, [pc, #16]	; (1400c <sys_arch_reboot+0x28>)
   13ffc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13ffe:	60cb      	str	r3, [r1, #12]
   14000:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14004:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14006:	e7fd      	b.n	14004 <sys_arch_reboot+0x20>
   14008:	e000ed00 	.word	0xe000ed00
   1400c:	05fa0004 	.word	0x05fa0004

00014010 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14010:	b130      	cbz	r0, 14020 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   14012:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14014:	0180      	lsls	r0, r0, #6
   14016:	4b03      	ldr	r3, [pc, #12]	; (14024 <arch_busy_wait+0x14>)
   14018:	f043 0301 	orr.w	r3, r3, #1
   1401c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   1401e:	bd08      	pop	{r3, pc}
   14020:	4770      	bx	lr
   14022:	bf00      	nop
   14024:	00025f30 	.word	0x00025f30

00014028 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14028:	2940      	cmp	r1, #64	; 0x40
   1402a:	bf28      	it	cs
   1402c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   1402e:	2300      	movs	r3, #0
   14030:	428b      	cmp	r3, r1
   14032:	d217      	bcs.n	14064 <bt_hex_real+0x3c>
{
   14034:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   14036:	5cc4      	ldrb	r4, [r0, r3]
   14038:	0924      	lsrs	r4, r4, #4
   1403a:	005a      	lsls	r2, r3, #1
   1403c:	4e0c      	ldr	r6, [pc, #48]	; (14070 <bt_hex_real+0x48>)
   1403e:	5d34      	ldrb	r4, [r6, r4]
   14040:	4d0c      	ldr	r5, [pc, #48]	; (14074 <bt_hex_real+0x4c>)
   14042:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14046:	5cc4      	ldrb	r4, [r0, r3]
   14048:	f004 040f 	and.w	r4, r4, #15
   1404c:	3201      	adds	r2, #1
   1404e:	5d34      	ldrb	r4, [r6, r4]
   14050:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   14052:	3301      	adds	r3, #1
   14054:	428b      	cmp	r3, r1
   14056:	d3ee      	bcc.n	14036 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   14058:	4806      	ldr	r0, [pc, #24]	; (14074 <bt_hex_real+0x4c>)
   1405a:	2200      	movs	r2, #0
   1405c:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   14060:	bc70      	pop	{r4, r5, r6}
   14062:	4770      	bx	lr
	str[i * 2] = '\0';
   14064:	4803      	ldr	r0, [pc, #12]	; (14074 <bt_hex_real+0x4c>)
   14066:	2200      	movs	r2, #0
   14068:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   1406c:	4770      	bx	lr
   1406e:	bf00      	nop
   14070:	00026980 	.word	0x00026980
   14074:	20002830 	.word	0x20002830

00014078 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   14078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1407a:	b08b      	sub	sp, #44	; 0x2c
   1407c:	4604      	mov	r4, r0
	switch (addr->type) {
   1407e:	7803      	ldrb	r3, [r0, #0]
   14080:	2b03      	cmp	r3, #3
   14082:	d838      	bhi.n	140f6 <bt_addr_le_str_real+0x7e>
   14084:	e8df f003 	tbb	[pc, r3]
   14088:	312b2102 	.word	0x312b2102
		strcpy(type, "public");
   1408c:	4b1d      	ldr	r3, [pc, #116]	; (14104 <bt_addr_le_str_real+0x8c>)
   1408e:	e893 0003 	ldmia.w	r3, {r0, r1}
   14092:	9007      	str	r0, [sp, #28]
   14094:	f8ad 1020 	strh.w	r1, [sp, #32]
   14098:	0c09      	lsrs	r1, r1, #16
   1409a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1409e:	7963      	ldrb	r3, [r4, #5]
   140a0:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   140a2:	78e1      	ldrb	r1, [r4, #3]
   140a4:	78a0      	ldrb	r0, [r4, #2]
   140a6:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   140a8:	4d17      	ldr	r5, [pc, #92]	; (14108 <bt_addr_le_str_real+0x90>)
   140aa:	af07      	add	r7, sp, #28
   140ac:	9705      	str	r7, [sp, #20]
   140ae:	9604      	str	r6, [sp, #16]
   140b0:	9003      	str	r0, [sp, #12]
   140b2:	9102      	str	r1, [sp, #8]
   140b4:	9201      	str	r2, [sp, #4]
   140b6:	9300      	str	r3, [sp, #0]
   140b8:	79a3      	ldrb	r3, [r4, #6]
   140ba:	4a14      	ldr	r2, [pc, #80]	; (1410c <bt_addr_le_str_real+0x94>)
   140bc:	211e      	movs	r1, #30
   140be:	4628      	mov	r0, r5
   140c0:	f00c fe64 	bl	20d8c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   140c4:	4628      	mov	r0, r5
   140c6:	b00b      	add	sp, #44	; 0x2c
   140c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   140ca:	4b11      	ldr	r3, [pc, #68]	; (14110 <bt_addr_le_str_real+0x98>)
   140cc:	e893 0003 	ldmia.w	r3, {r0, r1}
   140d0:	9007      	str	r0, [sp, #28]
   140d2:	f8ad 1020 	strh.w	r1, [sp, #32]
   140d6:	0c09      	lsrs	r1, r1, #16
   140d8:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   140dc:	e7df      	b.n	1409e <bt_addr_le_str_real+0x26>
		strcpy(type, "public-id");
   140de:	4a0d      	ldr	r2, [pc, #52]	; (14114 <bt_addr_le_str_real+0x9c>)
   140e0:	ab07      	add	r3, sp, #28
   140e2:	ca07      	ldmia	r2, {r0, r1, r2}
   140e4:	c303      	stmia	r3!, {r0, r1}
   140e6:	801a      	strh	r2, [r3, #0]
		break;
   140e8:	e7d9      	b.n	1409e <bt_addr_le_str_real+0x26>
		strcpy(type, "random-id");
   140ea:	4a0b      	ldr	r2, [pc, #44]	; (14118 <bt_addr_le_str_real+0xa0>)
   140ec:	ab07      	add	r3, sp, #28
   140ee:	ca07      	ldmia	r2, {r0, r1, r2}
   140f0:	c303      	stmia	r3!, {r0, r1}
   140f2:	801a      	strh	r2, [r3, #0]
		break;
   140f4:	e7d3      	b.n	1409e <bt_addr_le_str_real+0x26>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   140f6:	4a09      	ldr	r2, [pc, #36]	; (1411c <bt_addr_le_str_real+0xa4>)
   140f8:	210a      	movs	r1, #10
   140fa:	a807      	add	r0, sp, #28
   140fc:	f00c fe46 	bl	20d8c <snprintk>
		break;
   14100:	e7cd      	b.n	1409e <bt_addr_le_str_real+0x26>
   14102:	bf00      	nop
   14104:	00025f38 	.word	0x00025f38
   14108:	200028b4 	.word	0x200028b4
   1410c:	00025f48 	.word	0x00025f48
   14110:	00025f40 	.word	0x00025f40
   14114:	00025f6c 	.word	0x00025f6c
   14118:	00025f78 	.word	0x00025f78
   1411c:	00027744 	.word	0x00027744

00014120 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14120:	b470      	push	{r4, r5, r6}
   14122:	4605      	mov	r5, r0
   14124:	460c      	mov	r4, r1
	switch (src->type) {
   14126:	7803      	ldrb	r3, [r0, #0]
   14128:	2b01      	cmp	r3, #1
   1412a:	d011      	beq.n	14150 <uuid_to_uuid128+0x30>
   1412c:	2b02      	cmp	r3, #2
   1412e:	d021      	beq.n	14174 <uuid_to_uuid128+0x54>
   14130:	b10b      	cbz	r3, 14136 <uuid_to_uuid128+0x16>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14132:	bc70      	pop	{r4, r5, r6}
   14134:	4770      	bx	lr
		*dst = uuid128_base;
   14136:	4e15      	ldr	r6, [pc, #84]	; (1418c <uuid_to_uuid128+0x6c>)
   14138:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1413a:	6020      	str	r0, [r4, #0]
   1413c:	6061      	str	r1, [r4, #4]
   1413e:	60a2      	str	r2, [r4, #8]
   14140:	60e3      	str	r3, [r4, #12]
   14142:	7833      	ldrb	r3, [r6, #0]
   14144:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   14146:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   14148:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   1414a:	0a1b      	lsrs	r3, r3, #8
   1414c:	73a3      	strb	r3, [r4, #14]
}
   1414e:	e7f0      	b.n	14132 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   14150:	4e0e      	ldr	r6, [pc, #56]	; (1418c <uuid_to_uuid128+0x6c>)
   14152:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14154:	6020      	str	r0, [r4, #0]
   14156:	6061      	str	r1, [r4, #4]
   14158:	60a2      	str	r2, [r4, #8]
   1415a:	60e3      	str	r3, [r4, #12]
   1415c:	7833      	ldrb	r3, [r6, #0]
   1415e:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   14160:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   14162:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   14164:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14168:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   1416a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1416c:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   1416e:	0e1b      	lsrs	r3, r3, #24
   14170:	7423      	strb	r3, [r4, #16]
}
   14172:	e7de      	b.n	14132 <uuid_to_uuid128+0x12>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14174:	6800      	ldr	r0, [r0, #0]
   14176:	6869      	ldr	r1, [r5, #4]
   14178:	68aa      	ldr	r2, [r5, #8]
   1417a:	68eb      	ldr	r3, [r5, #12]
   1417c:	6020      	str	r0, [r4, #0]
   1417e:	6061      	str	r1, [r4, #4]
   14180:	60a2      	str	r2, [r4, #8]
   14182:	60e3      	str	r3, [r4, #12]
   14184:	7c2b      	ldrb	r3, [r5, #16]
   14186:	7423      	strb	r3, [r4, #16]
   14188:	e7d3      	b.n	14132 <uuid_to_uuid128+0x12>
   1418a:	bf00      	nop
   1418c:	0002699c 	.word	0x0002699c

00014190 <bt_addr_from_str>:

	return 0;
}

int bt_addr_from_str(const char *str, bt_addr_t *addr)
{
   14190:	b5f0      	push	{r4, r5, r6, r7, lr}
   14192:	b083      	sub	sp, #12
   14194:	4605      	mov	r5, r0
   14196:	460f      	mov	r7, r1
	int i, j;
	uint8_t tmp;

	if (strlen(str) != 17U) {
   14198:	f7f8 fc62 	bl	ca60 <strlen>
   1419c:	2811      	cmp	r0, #17
   1419e:	d12a      	bne.n	141f6 <bt_addr_from_str+0x66>
		return -EINVAL;
	}

	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   141a0:	2401      	movs	r4, #1
   141a2:	2605      	movs	r6, #5
   141a4:	e012      	b.n	141cc <bt_addr_from_str+0x3c>
		if (!(j % 3) && (*str != ':')) {
			return -EINVAL;
		} else if (*str == ':') {
   141a6:	2a3a      	cmp	r2, #58	; 0x3a
   141a8:	d020      	beq.n	141ec <bt_addr_from_str+0x5c>
			i--;
			continue;
		}

		addr->val[i] = addr->val[i] << 4;
   141aa:	5dbb      	ldrb	r3, [r7, r6]
   141ac:	011b      	lsls	r3, r3, #4
   141ae:	55bb      	strb	r3, [r7, r6]

		if (char2hex(*str, &tmp) < 0) {
   141b0:	f10d 0107 	add.w	r1, sp, #7
   141b4:	7828      	ldrb	r0, [r5, #0]
   141b6:	f00c fd6c 	bl	20c92 <char2hex>
   141ba:	2800      	cmp	r0, #0
   141bc:	db1e      	blt.n	141fc <bt_addr_from_str+0x6c>
			return -EINVAL;
		}

		addr->val[i] |= tmp;
   141be:	5dbb      	ldrb	r3, [r7, r6]
   141c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   141c4:	4313      	orrs	r3, r2
   141c6:	55bb      	strb	r3, [r7, r6]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   141c8:	3501      	adds	r5, #1
   141ca:	3401      	adds	r4, #1
   141cc:	782a      	ldrb	r2, [r5, #0]
   141ce:	b17a      	cbz	r2, 141f0 <bt_addr_from_str+0x60>
		if (!(j % 3) && (*str != ':')) {
   141d0:	4b0c      	ldr	r3, [pc, #48]	; (14204 <bt_addr_from_str+0x74>)
   141d2:	fb83 1304 	smull	r1, r3, r3, r4
   141d6:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
   141da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   141de:	429c      	cmp	r4, r3
   141e0:	d1e1      	bne.n	141a6 <bt_addr_from_str+0x16>
   141e2:	2a3a      	cmp	r2, #58	; 0x3a
   141e4:	d0df      	beq.n	141a6 <bt_addr_from_str+0x16>
			return -EINVAL;
   141e6:	f06f 0015 	mvn.w	r0, #21
   141ea:	e002      	b.n	141f2 <bt_addr_from_str+0x62>
			i--;
   141ec:	3e01      	subs	r6, #1
			continue;
   141ee:	e7eb      	b.n	141c8 <bt_addr_from_str+0x38>
	}

	return 0;
   141f0:	2000      	movs	r0, #0
}
   141f2:	b003      	add	sp, #12
   141f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   141f6:	f06f 0015 	mvn.w	r0, #21
   141fa:	e7fa      	b.n	141f2 <bt_addr_from_str+0x62>
			return -EINVAL;
   141fc:	f06f 0015 	mvn.w	r0, #21
   14200:	e7f7      	b.n	141f2 <bt_addr_from_str+0x62>
   14202:	bf00      	nop
   14204:	55555556 	.word	0x55555556

00014208 <bt_addr_le_from_str>:

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   14208:	b538      	push	{r3, r4, r5, lr}
   1420a:	460d      	mov	r5, r1
   1420c:	4614      	mov	r4, r2
	int err;

	err = bt_addr_from_str(str, &addr->a);
   1420e:	1c51      	adds	r1, r2, #1
   14210:	f7ff ffbe 	bl	14190 <bt_addr_from_str>
	if (err < 0) {
   14214:	2800      	cmp	r0, #0
   14216:	db06      	blt.n	14226 <bt_addr_le_from_str+0x1e>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   14218:	491e      	ldr	r1, [pc, #120]	; (14294 <bt_addr_le_from_str+0x8c>)
   1421a:	4628      	mov	r0, r5
   1421c:	f7f8 fc16 	bl	ca4c <strcmp>
   14220:	b910      	cbnz	r0, 14228 <bt_addr_le_from_str+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   14222:	2000      	movs	r0, #0
   14224:	7020      	strb	r0, [r4, #0]
	} else {
		return -EINVAL;
	}

	return 0;
}
   14226:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   14228:	491b      	ldr	r1, [pc, #108]	; (14298 <bt_addr_le_from_str+0x90>)
   1422a:	4628      	mov	r0, r5
   1422c:	f7f8 fc0e 	bl	ca4c <strcmp>
   14230:	2800      	cmp	r0, #0
   14232:	d0f6      	beq.n	14222 <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   14234:	4919      	ldr	r1, [pc, #100]	; (1429c <bt_addr_le_from_str+0x94>)
   14236:	4628      	mov	r0, r5
   14238:	f7f8 fc08 	bl	ca4c <strcmp>
   1423c:	b918      	cbnz	r0, 14246 <bt_addr_le_from_str+0x3e>
		addr->type = BT_ADDR_LE_RANDOM;
   1423e:	2301      	movs	r3, #1
   14240:	7023      	strb	r3, [r4, #0]
	return 0;
   14242:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM;
   14244:	e7ef      	b.n	14226 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   14246:	4916      	ldr	r1, [pc, #88]	; (142a0 <bt_addr_le_from_str+0x98>)
   14248:	4628      	mov	r0, r5
   1424a:	f7f8 fbff 	bl	ca4c <strcmp>
   1424e:	2800      	cmp	r0, #0
   14250:	d0f5      	beq.n	1423e <bt_addr_le_from_str+0x36>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   14252:	4914      	ldr	r1, [pc, #80]	; (142a4 <bt_addr_le_from_str+0x9c>)
   14254:	4628      	mov	r0, r5
   14256:	f7f8 fbf9 	bl	ca4c <strcmp>
   1425a:	b918      	cbnz	r0, 14264 <bt_addr_le_from_str+0x5c>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   1425c:	2302      	movs	r3, #2
   1425e:	7023      	strb	r3, [r4, #0]
	return 0;
   14260:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   14262:	e7e0      	b.n	14226 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   14264:	4910      	ldr	r1, [pc, #64]	; (142a8 <bt_addr_le_from_str+0xa0>)
   14266:	4628      	mov	r0, r5
   14268:	f7f8 fbf0 	bl	ca4c <strcmp>
   1426c:	2800      	cmp	r0, #0
   1426e:	d0f5      	beq.n	1425c <bt_addr_le_from_str+0x54>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   14270:	490e      	ldr	r1, [pc, #56]	; (142ac <bt_addr_le_from_str+0xa4>)
   14272:	4628      	mov	r0, r5
   14274:	f7f8 fbea 	bl	ca4c <strcmp>
   14278:	b918      	cbnz	r0, 14282 <bt_addr_le_from_str+0x7a>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   1427a:	2303      	movs	r3, #3
   1427c:	7023      	strb	r3, [r4, #0]
	return 0;
   1427e:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM_ID;
   14280:	e7d1      	b.n	14226 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   14282:	490b      	ldr	r1, [pc, #44]	; (142b0 <bt_addr_le_from_str+0xa8>)
   14284:	4628      	mov	r0, r5
   14286:	f7f8 fbe1 	bl	ca4c <strcmp>
   1428a:	2800      	cmp	r0, #0
   1428c:	d0f5      	beq.n	1427a <bt_addr_le_from_str+0x72>
		return -EINVAL;
   1428e:	f06f 0015 	mvn.w	r0, #21
   14292:	e7c8      	b.n	14226 <bt_addr_le_from_str+0x1e>
   14294:	00025f38 	.word	0x00025f38
   14298:	000269b0 	.word	0x000269b0
   1429c:	00025f40 	.word	0x00025f40
   142a0:	00025fd0 	.word	0x00025fd0
   142a4:	00025f6c 	.word	0x00025f6c
   142a8:	000269bc 	.word	0x000269bc
   142ac:	00025f78 	.word	0x00025f78
   142b0:	000269c8 	.word	0x000269c8

000142b4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   142b4:	b538      	push	{r3, r4, r5, lr}
   142b6:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   142b8:	4805      	ldr	r0, [pc, #20]	; (142d0 <bt_buf_get_rx+0x1c>)
   142ba:	f00f fcc5 	bl	23c48 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   142be:	4605      	mov	r5, r0
   142c0:	b120      	cbz	r0, 142cc <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   142c2:	2100      	movs	r1, #0
   142c4:	3008      	adds	r0, #8
   142c6:	f00f fce1 	bl	23c8c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   142ca:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   142cc:	4628      	mov	r0, r5
   142ce:	bd38      	pop	{r3, r4, r5, pc}
   142d0:	20000864 	.word	0x20000864

000142d4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   142d4:	b510      	push	{r4, lr}
   142d6:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   142d8:	4b0a      	ldr	r3, [pc, #40]	; (14304 <bt_buf_get_cmd_complete+0x30>)
   142da:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   142de:	b158      	cbz	r0, 142f8 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   142e0:	f00f fd0b 	bl	23cfa <net_buf_ref>
   142e4:	4604      	mov	r4, r0
   142e6:	2301      	movs	r3, #1
   142e8:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   142ea:	2100      	movs	r1, #0
   142ec:	8181      	strh	r1, [r0, #12]
   142ee:	3008      	adds	r0, #8
   142f0:	f00f fccc 	bl	23c8c <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   142f4:	4620      	mov	r0, r4
   142f6:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   142f8:	460b      	mov	r3, r1
   142fa:	2001      	movs	r0, #1
   142fc:	f7ff ffda 	bl	142b4 <bt_buf_get_rx>
   14300:	4604      	mov	r4, r0
   14302:	e7f7      	b.n	142f4 <bt_buf_get_cmd_complete+0x20>
   14304:	200002a8 	.word	0x200002a8

00014308 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14308:	b510      	push	{r4, lr}
	switch (evt) {
   1430a:	280f      	cmp	r0, #15
   1430c:	d90d      	bls.n	1432a <bt_buf_get_evt+0x22>
   1430e:	2813      	cmp	r0, #19
   14310:	d10d      	bne.n	1432e <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   14312:	4814      	ldr	r0, [pc, #80]	; (14364 <bt_buf_get_evt+0x5c>)
   14314:	f00f fc98 	bl	23c48 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   14318:	4604      	mov	r4, r0
   1431a:	b198      	cbz	r0, 14344 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1431c:	2100      	movs	r1, #0
   1431e:	3008      	adds	r0, #8
   14320:	f00f fcb4 	bl	23c8c <net_buf_simple_reserve>
   14324:	2301      	movs	r3, #1
   14326:	7523      	strb	r3, [r4, #20]
}
   14328:	e00c      	b.n	14344 <bt_buf_get_evt+0x3c>
	switch (evt) {
   1432a:	280e      	cmp	r0, #14
   1432c:	d205      	bcs.n	1433a <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   1432e:	b959      	cbnz	r1, 14348 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14330:	2001      	movs	r0, #1
   14332:	f7ff ffbf 	bl	142b4 <bt_buf_get_rx>
   14336:	4604      	mov	r4, r0
   14338:	e004      	b.n	14344 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   1433a:	4610      	mov	r0, r2
   1433c:	4619      	mov	r1, r3
   1433e:	f7ff ffc9 	bl	142d4 <bt_buf_get_cmd_complete>
   14342:	4604      	mov	r4, r0
	}
}
   14344:	4620      	mov	r0, r4
   14346:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14348:	4807      	ldr	r0, [pc, #28]	; (14368 <bt_buf_get_evt+0x60>)
   1434a:	f00f fc7d 	bl	23c48 <net_buf_alloc_fixed>
			if (buf) {
   1434e:	4604      	mov	r4, r0
   14350:	2800      	cmp	r0, #0
   14352:	d0f7      	beq.n	14344 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   14354:	2100      	movs	r1, #0
   14356:	3008      	adds	r0, #8
   14358:	f00f fc98 	bl	23c8c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1435c:	2301      	movs	r3, #1
   1435e:	7523      	strb	r3, [r4, #20]
			return buf;
   14360:	e7f0      	b.n	14344 <bt_buf_get_evt+0x3c>
   14362:	bf00      	nop
   14364:	20000890 	.word	0x20000890
   14368:	200007e0 	.word	0x200007e0

0001436c <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1436c:	2300      	movs	r3, #0
   1436e:	2b00      	cmp	r3, #0
   14370:	dd00      	ble.n	14374 <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   14372:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   14374:	4a05      	ldr	r2, [pc, #20]	; (1438c <conn_handle_disconnected+0x20>)
   14376:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1437a:	b922      	cbnz	r2, 14386 <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1437c:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   14380:	4902      	ldr	r1, [pc, #8]	; (1438c <conn_handle_disconnected+0x20>)
   14382:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14386:	3301      	adds	r3, #1
   14388:	e7f1      	b.n	1436e <conn_handle_disconnected+0x2>
   1438a:	bf00      	nop
   1438c:	200028ec 	.word	0x200028ec

00014390 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   14390:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   14394:	2300      	movs	r3, #0
   14396:	2b00      	cmp	r3, #0
   14398:	dd01      	ble.n	1439e <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   1439a:	2000      	movs	r0, #0
}
   1439c:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   1439e:	4a06      	ldr	r2, [pc, #24]	; (143b8 <conn_handle_is_disconnected+0x28>)
   143a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   143a4:	4282      	cmp	r2, r0
   143a6:	d001      	beq.n	143ac <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   143a8:	3301      	adds	r3, #1
   143aa:	e7f4      	b.n	14396 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   143ac:	4a02      	ldr	r2, [pc, #8]	; (143b8 <conn_handle_is_disconnected+0x28>)
   143ae:	2100      	movs	r1, #0
   143b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   143b4:	2001      	movs	r0, #1
   143b6:	4770      	bx	lr
   143b8:	200028ec 	.word	0x200028ec

000143bc <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   143bc:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   143be:	7851      	ldrb	r1, [r2, #1]
   143c0:	4b08      	ldr	r3, [pc, #32]	; (143e4 <read_local_ver_complete+0x28>)
   143c2:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   143c6:	8851      	ldrh	r1, [r2, #2]
   143c8:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   143cc:	7911      	ldrb	r1, [r2, #4]
   143ce:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   143d2:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   143d6:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   143da:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   143de:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   143e2:	4770      	bx	lr
   143e4:	200002a8 	.word	0x200002a8

000143e8 <read_le_features_complete>:
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   143e8:	4b03      	ldr	r3, [pc, #12]	; (143f8 <read_le_features_complete+0x10>)
   143ea:	6882      	ldr	r2, [r0, #8]
   143ec:	f852 0f01 	ldr.w	r0, [r2, #1]!
   143f0:	6851      	ldr	r1, [r2, #4]
   143f2:	c303      	stmia	r3!, {r0, r1}
}
   143f4:	4770      	bx	lr
   143f6:	bf00      	nop
   143f8:	20000378 	.word	0x20000378

000143fc <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
   143fc:	b4f0      	push	{r4, r5, r6, r7}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   143fe:	6886      	ldr	r6, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
   14400:	1c74      	adds	r4, r6, #1
   14402:	4f07      	ldr	r7, [pc, #28]	; (14420 <read_supported_commands_complete+0x24>)
   14404:	3641      	adds	r6, #65	; 0x41
   14406:	463d      	mov	r5, r7
   14408:	6820      	ldr	r0, [r4, #0]
   1440a:	6861      	ldr	r1, [r4, #4]
   1440c:	68a2      	ldr	r2, [r4, #8]
   1440e:	68e3      	ldr	r3, [r4, #12]
   14410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14412:	3410      	adds	r4, #16
   14414:	462f      	mov	r7, r5
   14416:	42b4      	cmp	r4, r6
   14418:	d1f5      	bne.n	14406 <read_supported_commands_complete+0xa>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
   1441a:	bcf0      	pop	{r4, r5, r6, r7}
   1441c:	4770      	bx	lr
   1441e:	bf00      	nop
   14420:	20000320 	.word	0x20000320

00014424 <read_local_features_complete>:
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14424:	4b03      	ldr	r3, [pc, #12]	; (14434 <read_local_features_complete+0x10>)
   14426:	6882      	ldr	r2, [r0, #8]
   14428:	f852 0f01 	ldr.w	r0, [r2, #1]!
   1442c:	6851      	ldr	r1, [r2, #4]
   1442e:	c303      	stmia	r3!, {r0, r1}
}
   14430:	4770      	bx	lr
   14432:	bf00      	nop
   14434:	20000318 	.word	0x20000318

00014438 <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   14438:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1443a:	7a19      	ldrb	r1, [r3, #8]
   1443c:	79da      	ldrb	r2, [r3, #7]
   1443e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   14442:	7998      	ldrb	r0, [r3, #6]
   14444:	795a      	ldrb	r2, [r3, #5]
   14446:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1444a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   1444e:	7918      	ldrb	r0, [r3, #4]
   14450:	78d9      	ldrb	r1, [r3, #3]
   14452:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   14456:	7898      	ldrb	r0, [r3, #2]
   14458:	785b      	ldrb	r3, [r3, #1]
   1445a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1445e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   14462:	4903      	ldr	r1, [pc, #12]	; (14470 <le_read_supp_states_complete+0x38>)
   14464:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   14468:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   1446c:	4770      	bx	lr
   1446e:	bf00      	nop
   14470:	200002a8 	.word	0x200002a8

00014474 <hci_reset_complete>:
{
   14474:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   14476:	6883      	ldr	r3, [r0, #8]
   14478:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   1447a:	b9a3      	cbnz	r3, 144a6 <hci_reset_complete+0x32>
		bt_scan_reset();
   1447c:	f002 f8aa 	bl	165d4 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14480:	f3bf 8f5b 	dmb	ish
   14484:	4b08      	ldr	r3, [pc, #32]	; (144a8 <hci_reset_complete+0x34>)
   14486:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1448a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1448e:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14492:	f3bf 8f5b 	dmb	ish
   14496:	e853 1f00 	ldrex	r1, [r3]
   1449a:	e843 2000 	strex	r0, r2, [r3]
   1449e:	2800      	cmp	r0, #0
   144a0:	d1f9      	bne.n	14496 <hci_reset_complete+0x22>
   144a2:	f3bf 8f5b 	dmb	ish
}
   144a6:	bd08      	pop	{r3, pc}
   144a8:	200002a8 	.word	0x200002a8

000144ac <le_read_buffer_size_complete>:
{
   144ac:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   144ae:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   144b0:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   144b4:	b299      	uxth	r1, r3
   144b6:	4806      	ldr	r0, [pc, #24]	; (144d0 <le_read_buffer_size_complete+0x24>)
   144b8:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   144bc:	b901      	cbnz	r1, 144c0 <le_read_buffer_size_complete+0x14>
}
   144be:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   144c0:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   144c2:	460a      	mov	r2, r1
   144c4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   144c8:	f010 fe0c 	bl	250e4 <z_impl_k_sem_init>
   144cc:	e7f7      	b.n	144be <le_read_buffer_size_complete+0x12>
   144ce:	bf00      	nop
   144d0:	200002a8 	.word	0x200002a8

000144d4 <read_buffer_size_complete>:
{
   144d4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   144d6:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   144d8:	4b08      	ldr	r3, [pc, #32]	; (144fc <read_buffer_size_complete+0x28>)
   144da:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   144de:	b103      	cbz	r3, 144e2 <read_buffer_size_complete+0xe>
}
   144e0:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   144e2:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   144e6:	4805      	ldr	r0, [pc, #20]	; (144fc <read_buffer_size_complete+0x28>)
   144e8:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   144ec:	8891      	ldrh	r1, [r2, #4]
   144ee:	460a      	mov	r2, r1
   144f0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   144f4:	f010 fdf6 	bl	250e4 <z_impl_k_sem_init>
   144f8:	e7f2      	b.n	144e0 <read_buffer_size_complete+0xc>
   144fa:	bf00      	nop
   144fc:	200002a8 	.word	0x200002a8

00014500 <hci_data_buf_overflow>:
{
   14500:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   14502:	6881      	ldr	r1, [r0, #8]
   14504:	4b08      	ldr	r3, [pc, #32]	; (14528 <hci_data_buf_overflow+0x28>)
   14506:	4a09      	ldr	r2, [pc, #36]	; (1452c <hci_data_buf_overflow+0x2c>)
   14508:	1a9b      	subs	r3, r3, r2
   1450a:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1450c:	f04f 0200 	mov.w	r2, #0
   14510:	2002      	movs	r0, #2
   14512:	f360 0202 	bfi	r2, r0, #0, #3
   14516:	f36f 02c5 	bfc	r2, #3, #3
   1451a:	f363 128f 	bfi	r2, r3, #6, #10
   1451e:	7809      	ldrb	r1, [r1, #0]
   14520:	4803      	ldr	r0, [pc, #12]	; (14530 <hci_data_buf_overflow+0x30>)
   14522:	f7fd fbe1 	bl	11ce8 <log_1>
}
   14526:	bd08      	pop	{r3, pc}
   14528:	00025db0 	.word	0x00025db0
   1452c:	00025d80 	.word	0x00025d80
   14530:	00026a0c 	.word	0x00026a0c

00014534 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   14534:	b108      	cbz	r0, 1453a <find_pending_connect+0x6>
	return NULL;
   14536:	2000      	movs	r0, #0
}
   14538:	4770      	bx	lr
{
   1453a:	b500      	push	{lr}
   1453c:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1453e:	2206      	movs	r2, #6
   14540:	f002 ff22 	bl	17388 <bt_conn_lookup_state_le>
		if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) && !conn) {
   14544:	b110      	cbz	r0, 1454c <find_pending_connect+0x18>
}
   14546:	b003      	add	sp, #12
   14548:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   1454c:	4b07      	ldr	r3, [pc, #28]	; (1456c <find_pending_connect+0x38>)
   1454e:	e893 0003 	ldmia.w	r3, {r0, r1}
   14552:	9000      	str	r0, [sp, #0]
   14554:	f8ad 1004 	strh.w	r1, [sp, #4]
   14558:	0c09      	lsrs	r1, r1, #16
   1455a:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(BT_ID_DEFAULT,
   1455e:	2203      	movs	r2, #3
   14560:	4669      	mov	r1, sp
   14562:	2000      	movs	r0, #0
   14564:	f002 ff10 	bl	17388 <bt_conn_lookup_state_le>
		return conn;
   14568:	e7ed      	b.n	14546 <find_pending_connect+0x12>
   1456a:	bf00      	nop
   1456c:	00025f0c 	.word	0x00025f0c

00014570 <hci_disconn_complete>:
{
   14570:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14572:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14574:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   14578:	7823      	ldrb	r3, [r4, #0]
   1457a:	b103      	cbz	r3, 1457e <hci_disconn_complete+0xe>
}
   1457c:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   1457e:	4630      	mov	r0, r6
   14580:	f002 fcea 	bl	16f58 <bt_conn_lookup_handle>
	if (!conn) {
   14584:	4605      	mov	r5, r0
   14586:	b158      	cbz	r0, 145a0 <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   14588:	78e3      	ldrb	r3, [r4, #3]
   1458a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1458c:	2100      	movs	r1, #0
   1458e:	f002 fced 	bl	16f6c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   14592:	78ab      	ldrb	r3, [r5, #2]
   14594:	2b01      	cmp	r3, #1
   14596:	d015      	beq.n	145c4 <hci_disconn_complete+0x54>
		bt_conn_unref(conn);
   14598:	4628      	mov	r0, r5
   1459a:	f00d ffdd 	bl	22558 <bt_conn_unref>
		return;
   1459e:	e7ed      	b.n	1457c <hci_disconn_complete+0xc>
   145a0:	4b0a      	ldr	r3, [pc, #40]	; (145cc <hci_disconn_complete+0x5c>)
   145a2:	4a0b      	ldr	r2, [pc, #44]	; (145d0 <hci_disconn_complete+0x60>)
   145a4:	1a9b      	subs	r3, r3, r2
   145a6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   145a8:	f04f 0200 	mov.w	r2, #0
   145ac:	2101      	movs	r1, #1
   145ae:	f361 0202 	bfi	r2, r1, #0, #3
   145b2:	f36f 02c5 	bfc	r2, #3, #3
   145b6:	f363 128f 	bfi	r2, r3, #6, #10
   145ba:	4631      	mov	r1, r6
   145bc:	4805      	ldr	r0, [pc, #20]	; (145d4 <hci_disconn_complete+0x64>)
   145be:	f7fd fb93 	bl	11ce8 <log_1>
		return;
   145c2:	e7db      	b.n	1457c <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   145c4:	4628      	mov	r0, r5
   145c6:	f00d ffc7 	bl	22558 <bt_conn_unref>
   145ca:	e7d7      	b.n	1457c <hci_disconn_complete+0xc>
   145cc:	00025db0 	.word	0x00025db0
   145d0:	00025d80 	.word	0x00025d80
   145d4:	00026a34 	.word	0x00026a34

000145d8 <le_data_len_change>:
{
   145d8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   145da:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   145dc:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   145de:	4620      	mov	r0, r4
   145e0:	f002 fcba 	bl	16f58 <bt_conn_lookup_handle>
	if (!conn) {
   145e4:	b110      	cbz	r0, 145ec <le_data_len_change+0x14>
	bt_conn_unref(conn);
   145e6:	f00d ffb7 	bl	22558 <bt_conn_unref>
}
   145ea:	bd10      	pop	{r4, pc}
   145ec:	4b08      	ldr	r3, [pc, #32]	; (14610 <le_data_len_change+0x38>)
   145ee:	4a09      	ldr	r2, [pc, #36]	; (14614 <le_data_len_change+0x3c>)
   145f0:	1a9b      	subs	r3, r3, r2
   145f2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   145f4:	f04f 0200 	mov.w	r2, #0
   145f8:	2101      	movs	r1, #1
   145fa:	f361 0202 	bfi	r2, r1, #0, #3
   145fe:	f36f 02c5 	bfc	r2, #3, #3
   14602:	f363 128f 	bfi	r2, r3, #6, #10
   14606:	4621      	mov	r1, r4
   14608:	4803      	ldr	r0, [pc, #12]	; (14618 <le_data_len_change+0x40>)
   1460a:	f7fd fb6d 	bl	11ce8 <log_1>
		return;
   1460e:	e7ec      	b.n	145ea <le_data_len_change+0x12>
   14610:	00025db0 	.word	0x00025db0
   14614:	00025d80 	.word	0x00025d80
   14618:	00026a5c 	.word	0x00026a5c

0001461c <hci_num_completed_packets>:
{
   1461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14620:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   14624:	2700      	movs	r7, #0
   14626:	e05c      	b.n	146e2 <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   14628:	3b01      	subs	r3, #1
   1462a:	61e3      	str	r3, [r4, #28]
   1462c:	f382 8811 	msr	BASEPRI, r2
   14630:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   14634:	4620      	mov	r0, r4
   14636:	f002 fab9 	bl	16bac <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1463a:	f008 fb37 	bl	1ccac <z_impl_k_sem_give>
				continue;
   1463e:	e025      	b.n	1468c <hci_num_completed_packets+0x70>
	list->tail = node;
   14640:	61a1      	str	r1, [r4, #24]
   14642:	f382 8811 	msr	BASEPRI, r2
   14646:	f3bf 8f6f 	isb	sy
			if (!node) {
   1464a:	2b00      	cmp	r3, #0
   1464c:	d036      	beq.n	146bc <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   1464e:	f04f 0240 	mov.w	r2, #64	; 0x40
   14652:	f3ef 8111 	mrs	r1, BASEPRI
   14656:	f382 8812 	msr	BASEPRI_MAX, r2
   1465a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1465e:	68da      	ldr	r2, [r3, #12]
   14660:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   14662:	2200      	movs	r2, #0
   14664:	60da      	str	r2, [r3, #12]
	parent->next = child;
   14666:	601a      	str	r2, [r3, #0]
	return list->tail;
   14668:	6a62      	ldr	r2, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1466a:	2a00      	cmp	r2, #0
   1466c:	d05a      	beq.n	14724 <hci_num_completed_packets+0x108>
	parent->next = child;
   1466e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14670:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   14672:	f381 8811 	msr	BASEPRI, r1
   14676:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1467a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1467e:	f008 fcdf 	bl	1d040 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   14682:	4620      	mov	r0, r4
   14684:	f002 fa92 	bl	16bac <bt_conn_get_pkts>
   14688:	f008 fb10 	bl	1ccac <z_impl_k_sem_give>
{
   1468c:	462e      	mov	r6, r5
		while (count--) {
   1468e:	1e75      	subs	r5, r6, #1
   14690:	b2ad      	uxth	r5, r5
   14692:	b316      	cbz	r6, 146da <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   14694:	f04f 0340 	mov.w	r3, #64	; 0x40
   14698:	f3ef 8211 	mrs	r2, BASEPRI
   1469c:	f383 8812 	msr	BASEPRI_MAX, r3
   146a0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   146a4:	69e3      	ldr	r3, [r4, #28]
   146a6:	2b00      	cmp	r3, #0
   146a8:	d1be      	bne.n	14628 <hci_num_completed_packets+0xc>
	return list->head;
   146aa:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   146ac:	2b00      	cmp	r3, #0
   146ae:	d0c8      	beq.n	14642 <hci_num_completed_packets+0x26>
	return node->next;
   146b0:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   146b2:	6161      	str	r1, [r4, #20]
	return list->tail;
   146b4:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   146b6:	4298      	cmp	r0, r3
   146b8:	d1c3      	bne.n	14642 <hci_num_completed_packets+0x26>
   146ba:	e7c1      	b.n	14640 <hci_num_completed_packets+0x24>
   146bc:	4b1c      	ldr	r3, [pc, #112]	; (14730 <hci_num_completed_packets+0x114>)
   146be:	4a1d      	ldr	r2, [pc, #116]	; (14734 <hci_num_completed_packets+0x118>)
   146c0:	1a9b      	subs	r3, r3, r2
   146c2:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   146c4:	2201      	movs	r2, #1
   146c6:	f362 0902 	bfi	r9, r2, #0, #3
   146ca:	f36f 09c5 	bfc	r9, #3, #3
   146ce:	f363 198f 	bfi	r9, r3, #6, #10
   146d2:	4649      	mov	r1, r9
   146d4:	4818      	ldr	r0, [pc, #96]	; (14738 <hci_num_completed_packets+0x11c>)
   146d6:	f7fd fbbd 	bl	11e54 <log_0>
		bt_conn_unref(conn);
   146da:	4620      	mov	r0, r4
   146dc:	f00d ff3c 	bl	22558 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   146e0:	3701      	adds	r7, #1
   146e2:	f898 3000 	ldrb.w	r3, [r8]
   146e6:	429f      	cmp	r7, r3
   146e8:	da1f      	bge.n	1472a <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   146ea:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   146ee:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   146f2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   146f6:	4628      	mov	r0, r5
   146f8:	f002 fc2e 	bl	16f58 <bt_conn_lookup_handle>
		if (!conn) {
   146fc:	4604      	mov	r4, r0
   146fe:	2800      	cmp	r0, #0
   14700:	d1c5      	bne.n	1468e <hci_num_completed_packets+0x72>
   14702:	4b0b      	ldr	r3, [pc, #44]	; (14730 <hci_num_completed_packets+0x114>)
   14704:	4a0b      	ldr	r2, [pc, #44]	; (14734 <hci_num_completed_packets+0x118>)
   14706:	1a9b      	subs	r3, r3, r2
   14708:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   1470a:	2201      	movs	r2, #1
   1470c:	f362 0a02 	bfi	sl, r2, #0, #3
   14710:	f36f 0ac5 	bfc	sl, #3, #3
   14714:	f363 1a8f 	bfi	sl, r3, #6, #10
   14718:	4652      	mov	r2, sl
   1471a:	4629      	mov	r1, r5
   1471c:	4807      	ldr	r0, [pc, #28]	; (1473c <hci_num_completed_packets+0x120>)
   1471e:	f7fd fae3 	bl	11ce8 <log_1>
			continue;
   14722:	e7dd      	b.n	146e0 <hci_num_completed_packets+0xc4>
	list->tail = node;
   14724:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   14726:	6223      	str	r3, [r4, #32]
}
   14728:	e7a3      	b.n	14672 <hci_num_completed_packets+0x56>
}
   1472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1472e:	bf00      	nop
   14730:	00025db0 	.word	0x00025db0
   14734:	00025d80 	.word	0x00025d80
   14738:	00026a9c 	.word	0x00026a9c
   1473c:	00026a80 	.word	0x00026a80

00014740 <hci_cmd_done>:
{
   14740:	b570      	push	{r4, r5, r6, lr}
   14742:	b084      	sub	sp, #16
   14744:	4605      	mov	r5, r0
   14746:	460e      	mov	r6, r1
   14748:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1474a:	7990      	ldrb	r0, [r2, #6]
   1474c:	f005 f8b4 	bl	198b8 <net_buf_pool_get>
   14750:	4b55      	ldr	r3, [pc, #340]	; (148a8 <hci_cmd_done+0x168>)
   14752:	4283      	cmp	r3, r0
   14754:	d01c      	beq.n	14790 <hci_cmd_done+0x50>
   14756:	4b55      	ldr	r3, [pc, #340]	; (148ac <hci_cmd_done+0x16c>)
   14758:	4a55      	ldr	r2, [pc, #340]	; (148b0 <hci_cmd_done+0x170>)
   1475a:	1a9b      	subs	r3, r3, r2
   1475c:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1475e:	f04f 0600 	mov.w	r6, #0
   14762:	2202      	movs	r2, #2
   14764:	f362 0602 	bfi	r6, r2, #0, #3
   14768:	f36f 06c5 	bfc	r6, #3, #3
   1476c:	f363 168f 	bfi	r6, r3, #6, #10
   14770:	9500      	str	r5, [sp, #0]
   14772:	79a0      	ldrb	r0, [r4, #6]
   14774:	9001      	str	r0, [sp, #4]
   14776:	f005 f89f 	bl	198b8 <net_buf_pool_get>
   1477a:	9002      	str	r0, [sp, #8]
   1477c:	4b4a      	ldr	r3, [pc, #296]	; (148a8 <hci_cmd_done+0x168>)
   1477e:	9303      	str	r3, [sp, #12]
   14780:	4633      	mov	r3, r6
   14782:	2204      	movs	r2, #4
   14784:	4669      	mov	r1, sp
   14786:	484b      	ldr	r0, [pc, #300]	; (148b4 <hci_cmd_done+0x174>)
   14788:	f7fd fb20 	bl	11dcc <log_n>
}
   1478c:	b004      	add	sp, #16
   1478e:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   14790:	4620      	mov	r0, r4
   14792:	f00f f9a6 	bl	23ae2 <net_buf_id>
   14796:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1479a:	4b47      	ldr	r3, [pc, #284]	; (148b8 <hci_cmd_done+0x178>)
   1479c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   147a0:	8843      	ldrh	r3, [r0, #2]
   147a2:	42ab      	cmp	r3, r5
   147a4:	d133      	bne.n	1480e <hci_cmd_done+0xce>
	if (bt_dev.sent_cmd) {
   147a6:	4b45      	ldr	r3, [pc, #276]	; (148bc <hci_cmd_done+0x17c>)
   147a8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   147ac:	b128      	cbz	r0, 147ba <hci_cmd_done+0x7a>
		net_buf_unref(bt_dev.sent_cmd);
   147ae:	f00f fa7e 	bl	23cae <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   147b2:	4b42      	ldr	r3, [pc, #264]	; (148bc <hci_cmd_done+0x17c>)
   147b4:	2200      	movs	r2, #0
   147b6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   147ba:	4620      	mov	r0, r4
   147bc:	f00f f991 	bl	23ae2 <net_buf_id>
   147c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   147c4:	4b3c      	ldr	r3, [pc, #240]	; (148b8 <hci_cmd_done+0x178>)
   147c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   147ca:	6843      	ldr	r3, [r0, #4]
   147cc:	b10b      	cbz	r3, 147d2 <hci_cmd_done+0x92>
   147ce:	2e00      	cmp	r6, #0
   147d0:	d039      	beq.n	14846 <hci_cmd_done+0x106>
	if (cmd(buf)->sync) {
   147d2:	4620      	mov	r0, r4
   147d4:	f00f f985 	bl	23ae2 <net_buf_id>
   147d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   147dc:	4b36      	ldr	r3, [pc, #216]	; (148b8 <hci_cmd_done+0x178>)
   147de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   147e2:	6883      	ldr	r3, [r0, #8]
   147e4:	2b00      	cmp	r3, #0
   147e6:	d0d1      	beq.n	1478c <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   147e8:	4620      	mov	r0, r4
   147ea:	f00f f97a 	bl	23ae2 <net_buf_id>
   147ee:	4d32      	ldr	r5, [pc, #200]	; (148b8 <hci_cmd_done+0x178>)
   147f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   147f4:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   147f8:	4620      	mov	r0, r4
   147fa:	f00f f972 	bl	23ae2 <net_buf_id>
   147fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14802:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   14806:	68a8      	ldr	r0, [r5, #8]
   14808:	f008 fa50 	bl	1ccac <z_impl_k_sem_give>
}
   1480c:	e7be      	b.n	1478c <hci_cmd_done+0x4c>
   1480e:	4b27      	ldr	r3, [pc, #156]	; (148ac <hci_cmd_done+0x16c>)
   14810:	4a27      	ldr	r2, [pc, #156]	; (148b0 <hci_cmd_done+0x170>)
   14812:	1a9b      	subs	r3, r3, r2
   14814:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   14816:	f04f 0600 	mov.w	r6, #0
   1481a:	2202      	movs	r2, #2
   1481c:	f362 0602 	bfi	r6, r2, #0, #3
   14820:	f36f 06c5 	bfc	r6, #3, #3
   14824:	f363 168f 	bfi	r6, r3, #6, #10
   14828:	4620      	mov	r0, r4
   1482a:	f00f f95a 	bl	23ae2 <net_buf_id>
   1482e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14832:	4b21      	ldr	r3, [pc, #132]	; (148b8 <hci_cmd_done+0x178>)
   14834:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14838:	4633      	mov	r3, r6
   1483a:	8842      	ldrh	r2, [r0, #2]
   1483c:	4629      	mov	r1, r5
   1483e:	4820      	ldr	r0, [pc, #128]	; (148c0 <hci_cmd_done+0x180>)
   14840:	f7fd fa88 	bl	11d54 <log_2>
		return;
   14844:	e7a2      	b.n	1478c <hci_cmd_done+0x4c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14846:	4620      	mov	r0, r4
   14848:	f00f f94b 	bl	23ae2 <net_buf_id>
   1484c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14850:	4b19      	ldr	r3, [pc, #100]	; (148b8 <hci_cmd_done+0x178>)
   14852:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14856:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14858:	6813      	ldr	r3, [r2, #0]
   1485a:	6851      	ldr	r1, [r2, #4]
   1485c:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1485e:	f001 051f 	and.w	r5, r1, #31
   14862:	2201      	movs	r2, #1
   14864:	40aa      	lsls	r2, r5

	if (val) {
   14866:	b170      	cbz	r0, 14886 <hci_cmd_done+0x146>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14868:	0949      	lsrs	r1, r1, #5
   1486a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1486e:	f3bf 8f5b 	dmb	ish
   14872:	e853 1f00 	ldrex	r1, [r3]
   14876:	4311      	orrs	r1, r2
   14878:	e843 1000 	strex	r0, r1, [r3]
   1487c:	2800      	cmp	r0, #0
   1487e:	d1f8      	bne.n	14872 <hci_cmd_done+0x132>
   14880:	f3bf 8f5b 	dmb	ish
   14884:	e7a5      	b.n	147d2 <hci_cmd_done+0x92>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14886:	0949      	lsrs	r1, r1, #5
   14888:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1488c:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1488e:	f3bf 8f5b 	dmb	ish
   14892:	e853 1f00 	ldrex	r1, [r3]
   14896:	4011      	ands	r1, r2
   14898:	e843 1000 	strex	r0, r1, [r3]
   1489c:	2800      	cmp	r0, #0
   1489e:	d1f8      	bne.n	14892 <hci_cmd_done+0x152>
   148a0:	f3bf 8f5b 	dmb	ish
	}
}
   148a4:	e795      	b.n	147d2 <hci_cmd_done+0x92>
   148a6:	bf00      	nop
   148a8:	20000838 	.word	0x20000838
   148ac:	00025db0 	.word	0x00025db0
   148b0:	00025d80 	.word	0x00025d80
   148b4:	00026ab4 	.word	0x00026ab4
   148b8:	200028d4 	.word	0x200028d4
   148bc:	200002a8 	.word	0x200002a8
   148c0:	00026aec 	.word	0x00026aec

000148c4 <hci_cmd_status>:
{
   148c4:	b538      	push	{r3, r4, r5, lr}
   148c6:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   148c8:	2104      	movs	r1, #4
   148ca:	3008      	adds	r0, #8
   148cc:	f00f fa5a 	bl	23d84 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   148d0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   148d2:	4622      	mov	r2, r4
   148d4:	7801      	ldrb	r1, [r0, #0]
   148d6:	8840      	ldrh	r0, [r0, #2]
   148d8:	f7ff ff32 	bl	14740 <hci_cmd_done>
	if (ncmd) {
   148dc:	b905      	cbnz	r5, 148e0 <hci_cmd_status+0x1c>
}
   148de:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   148e0:	4801      	ldr	r0, [pc, #4]	; (148e8 <hci_cmd_status+0x24>)
   148e2:	f008 f9e3 	bl	1ccac <z_impl_k_sem_give>
   148e6:	e7fa      	b.n	148de <hci_cmd_status+0x1a>
   148e8:	200003c0 	.word	0x200003c0

000148ec <hci_cmd_complete>:
{
   148ec:	b538      	push	{r3, r4, r5, lr}
   148ee:	4604      	mov	r4, r0
   148f0:	2103      	movs	r1, #3
   148f2:	3008      	adds	r0, #8
   148f4:	f00f fa46 	bl	23d84 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   148f8:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   148fa:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   148fc:	4622      	mov	r2, r4
   148fe:	7819      	ldrb	r1, [r3, #0]
   14900:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14904:	f7ff ff1c 	bl	14740 <hci_cmd_done>
	if (ncmd) {
   14908:	b905      	cbnz	r5, 1490c <hci_cmd_complete+0x20>
}
   1490a:	bd38      	pop	{r3, r4, r5, pc}
   1490c:	4801      	ldr	r0, [pc, #4]	; (14914 <hci_cmd_complete+0x28>)
   1490e:	f008 f9cd 	bl	1ccac <z_impl_k_sem_give>
   14912:	e7fa      	b.n	1490a <hci_cmd_complete+0x1e>
   14914:	200003c0 	.word	0x200003c0

00014918 <hci_hardware_error>:
{
   14918:	b508      	push	{r3, lr}
   1491a:	2101      	movs	r1, #1
   1491c:	3008      	adds	r0, #8
   1491e:	f00f fa31 	bl	23d84 <net_buf_simple_pull_mem>
   14922:	4b09      	ldr	r3, [pc, #36]	; (14948 <hci_hardware_error+0x30>)
   14924:	4a09      	ldr	r2, [pc, #36]	; (1494c <hci_hardware_error+0x34>)
   14926:	1a9b      	subs	r3, r3, r2
   14928:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1492a:	f04f 0200 	mov.w	r2, #0
   1492e:	2101      	movs	r1, #1
   14930:	f361 0202 	bfi	r2, r1, #0, #3
   14934:	f36f 02c5 	bfc	r2, #3, #3
   14938:	f363 128f 	bfi	r2, r3, #6, #10
   1493c:	7801      	ldrb	r1, [r0, #0]
   1493e:	4804      	ldr	r0, [pc, #16]	; (14950 <hci_hardware_error+0x38>)
   14940:	f7fd f9d2 	bl	11ce8 <log_1>
}
   14944:	bd08      	pop	{r3, pc}
   14946:	bf00      	nop
   14948:	00025db0 	.word	0x00025db0
   1494c:	00025d80 	.word	0x00025d80
   14950:	00026b20 	.word	0x00026b20

00014954 <hci_vendor_event>:
{
   14954:	b510      	push	{r4, lr}
   14956:	4b0c      	ldr	r3, [pc, #48]	; (14988 <hci_vendor_event+0x34>)
   14958:	4a0c      	ldr	r2, [pc, #48]	; (1498c <hci_vendor_event+0x38>)
   1495a:	1a9b      	subs	r3, r3, r2
   1495c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   1495e:	f04f 0400 	mov.w	r4, #0
   14962:	2202      	movs	r2, #2
   14964:	f362 0402 	bfi	r4, r2, #0, #3
   14968:	f36f 04c5 	bfc	r4, #3, #3
   1496c:	f363 148f 	bfi	r4, r3, #6, #10
   14970:	8981      	ldrh	r1, [r0, #12]
   14972:	6880      	ldr	r0, [r0, #8]
   14974:	f7ff fb58 	bl	14028 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   14978:	f7fd f83e 	bl	119f8 <z_log_strdup>
   1497c:	4601      	mov	r1, r0
   1497e:	4622      	mov	r2, r4
   14980:	4803      	ldr	r0, [pc, #12]	; (14990 <hci_vendor_event+0x3c>)
   14982:	f7fd f9b1 	bl	11ce8 <log_1>
}
   14986:	bd10      	pop	{r4, pc}
   14988:	00025db0 	.word	0x00025db0
   1498c:	00025d80 	.word	0x00025d80
   14990:	00026b44 	.word	0x00026b44

00014994 <hci_acl>:
{
   14994:	b570      	push	{r4, r5, r6, lr}
   14996:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14998:	8983      	ldrh	r3, [r0, #12]
   1499a:	2b03      	cmp	r3, #3
   1499c:	d923      	bls.n	149e6 <hci_acl+0x52>
   1499e:	2104      	movs	r1, #4
   149a0:	f104 0008 	add.w	r0, r4, #8
   149a4:	f00f f9ee 	bl	23d84 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   149a8:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   149aa:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   149ac:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   149ae:	f3c0 000b 	ubfx	r0, r0, #0, #12
   149b2:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   149b4:	23ff      	movs	r3, #255	; 0xff
   149b6:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   149b8:	89a1      	ldrh	r1, [r4, #12]
   149ba:	4291      	cmp	r1, r2
   149bc:	d021      	beq.n	14a02 <hci_acl+0x6e>
   149be:	4823      	ldr	r0, [pc, #140]	; (14a4c <hci_acl+0xb8>)
   149c0:	4b23      	ldr	r3, [pc, #140]	; (14a50 <hci_acl+0xbc>)
   149c2:	1ac0      	subs	r0, r0, r3
   149c4:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   149c6:	f04f 0300 	mov.w	r3, #0
   149ca:	2501      	movs	r5, #1
   149cc:	f365 0302 	bfi	r3, r5, #0, #3
   149d0:	f36f 03c5 	bfc	r3, #3, #3
   149d4:	f360 138f 	bfi	r3, r0, #6, #10
   149d8:	481e      	ldr	r0, [pc, #120]	; (14a54 <hci_acl+0xc0>)
   149da:	f7fd f9bb 	bl	11d54 <log_2>
		net_buf_unref(buf);
   149de:	4620      	mov	r0, r4
   149e0:	f00f f965 	bl	23cae <net_buf_unref>
}
   149e4:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   149e6:	f240 13b5 	movw	r3, #437	; 0x1b5
   149ea:	4a1b      	ldr	r2, [pc, #108]	; (14a58 <hci_acl+0xc4>)
   149ec:	491b      	ldr	r1, [pc, #108]	; (14a5c <hci_acl+0xc8>)
   149ee:	481c      	ldr	r0, [pc, #112]	; (14a60 <hci_acl+0xcc>)
   149f0:	f00c f9be 	bl	20d70 <printk>
   149f4:	4040      	eors	r0, r0
   149f6:	f380 8811 	msr	BASEPRI, r0
   149fa:	f04f 0003 	mov.w	r0, #3
   149fe:	df02      	svc	2
   14a00:	e7cd      	b.n	1499e <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14a02:	f002 faa9 	bl	16f58 <bt_conn_lookup_handle>
	if (!conn) {
   14a06:	4605      	mov	r5, r0
   14a08:	b158      	cbz	r0, 14a22 <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   14a0a:	f002 fbd5 	bl	171b8 <bt_conn_index>
   14a0e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   14a10:	4632      	mov	r2, r6
   14a12:	4621      	mov	r1, r4
   14a14:	4628      	mov	r0, r5
   14a16:	f00d fd6c 	bl	224f2 <bt_conn_recv>
	bt_conn_unref(conn);
   14a1a:	4628      	mov	r0, r5
   14a1c:	f00d fd9c 	bl	22558 <bt_conn_unref>
   14a20:	e7e0      	b.n	149e4 <hci_acl+0x50>
   14a22:	4b0a      	ldr	r3, [pc, #40]	; (14a4c <hci_acl+0xb8>)
   14a24:	4a0a      	ldr	r2, [pc, #40]	; (14a50 <hci_acl+0xbc>)
   14a26:	1a9b      	subs	r3, r3, r2
   14a28:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14a2a:	f04f 0200 	mov.w	r2, #0
   14a2e:	2101      	movs	r1, #1
   14a30:	f361 0202 	bfi	r2, r1, #0, #3
   14a34:	f36f 02c5 	bfc	r2, #3, #3
   14a38:	f363 128f 	bfi	r2, r3, #6, #10
   14a3c:	8ae1      	ldrh	r1, [r4, #22]
   14a3e:	4809      	ldr	r0, [pc, #36]	; (14a64 <hci_acl+0xd0>)
   14a40:	f7fd f952 	bl	11ce8 <log_1>
		net_buf_unref(buf);
   14a44:	4620      	mov	r0, r4
   14a46:	f00f f932 	bl	23cae <net_buf_unref>
		return;
   14a4a:	e7cb      	b.n	149e4 <hci_acl+0x50>
   14a4c:	00025db0 	.word	0x00025db0
   14a50:	00025d80 	.word	0x00025d80
   14a54:	00026bd8 	.word	0x00026bd8
   14a58:	00026b68 	.word	0x00026b68
   14a5c:	00026b9c 	.word	0x00026b9c
   14a60:	00026bb8 	.word	0x00026bb8
   14a64:	00026bfc 	.word	0x00026bfc

00014a68 <le_conn_update_complete>:
{
   14a68:	b570      	push	{r4, r5, r6, lr}
   14a6a:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   14a6c:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14a6e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   14a72:	4630      	mov	r0, r6
   14a74:	f002 fa70 	bl	16f58 <bt_conn_lookup_handle>
	if (!conn) {
   14a78:	b148      	cbz	r0, 14a8e <le_conn_update_complete+0x26>
   14a7a:	4605      	mov	r5, r0
	if (!evt->status) {
   14a7c:	7823      	ldrb	r3, [r4, #0]
   14a7e:	b1c3      	cbz	r3, 14ab2 <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14a80:	2b1a      	cmp	r3, #26
   14a82:	d025      	beq.n	14ad0 <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   14a84:	4628      	mov	r0, r5
   14a86:	f00d fd67 	bl	22558 <bt_conn_unref>
}
   14a8a:	b002      	add	sp, #8
   14a8c:	bd70      	pop	{r4, r5, r6, pc}
   14a8e:	4b24      	ldr	r3, [pc, #144]	; (14b20 <le_conn_update_complete+0xb8>)
   14a90:	4a24      	ldr	r2, [pc, #144]	; (14b24 <le_conn_update_complete+0xbc>)
   14a92:	1a9b      	subs	r3, r3, r2
   14a94:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14a96:	f04f 0200 	mov.w	r2, #0
   14a9a:	2101      	movs	r1, #1
   14a9c:	f361 0202 	bfi	r2, r1, #0, #3
   14aa0:	f36f 02c5 	bfc	r2, #3, #3
   14aa4:	f363 128f 	bfi	r2, r3, #6, #10
   14aa8:	4631      	mov	r1, r6
   14aaa:	481f      	ldr	r0, [pc, #124]	; (14b28 <le_conn_update_complete+0xc0>)
   14aac:	f7fd f91c 	bl	11ce8 <log_1>
		return;
   14ab0:	e7eb      	b.n	14a8a <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   14ab2:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   14ab6:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   14aba:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   14abe:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14ac2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   14ac6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   14aca:	f002 fbab 	bl	17224 <notify_le_param_updated>
   14ace:	e7d9      	b.n	14a84 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   14ad0:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14ad2:	2b01      	cmp	r3, #1
   14ad4:	d1d6      	bne.n	14a84 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   14ad6:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14ad8:	f3bf 8f5b 	dmb	ish
   14adc:	e853 2f00 	ldrex	r2, [r3]
   14ae0:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   14ae4:	e843 1000 	strex	r0, r1, [r3]
   14ae8:	2800      	cmp	r0, #0
   14aea:	d1f7      	bne.n	14adc <le_conn_update_complete+0x74>
   14aec:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   14af0:	f412 6f80 	tst.w	r2, #1024	; 0x400
   14af4:	d1c6      	bne.n	14a84 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   14af6:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   14afa:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   14afe:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   14b02:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   14b06:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   14b0a:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   14b0e:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   14b12:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   14b16:	4669      	mov	r1, sp
   14b18:	4628      	mov	r0, r5
   14b1a:	f00d fe74 	bl	22806 <bt_l2cap_update_conn_param>
   14b1e:	e7b1      	b.n	14a84 <le_conn_update_complete+0x1c>
   14b20:	00025db0 	.word	0x00025db0
   14b24:	00025d80 	.word	0x00025d80
   14b28:	00026a5c 	.word	0x00026a5c

00014b2c <hci_le_meta_event>:
{
   14b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b2e:	b083      	sub	sp, #12
   14b30:	4604      	mov	r4, r0
   14b32:	2101      	movs	r1, #1
   14b34:	3008      	adds	r0, #8
   14b36:	f00f f925 	bl	23d84 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14b3a:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   14b3c:	2300      	movs	r3, #0
   14b3e:	2b07      	cmp	r3, #7
   14b40:	d823      	bhi.n	14b8a <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   14b42:	4a20      	ldr	r2, [pc, #128]	; (14bc4 <hci_le_meta_event+0x98>)
   14b44:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   14b48:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14b4c:	4295      	cmp	r5, r2
   14b4e:	d108      	bne.n	14b62 <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   14b50:	89a1      	ldrh	r1, [r4, #12]
   14b52:	7843      	ldrb	r3, [r0, #1]
   14b54:	4299      	cmp	r1, r3
   14b56:	d306      	bcc.n	14b66 <hci_le_meta_event+0x3a>
		handler->handler(buf);
   14b58:	6843      	ldr	r3, [r0, #4]
   14b5a:	4620      	mov	r0, r4
   14b5c:	4798      	blx	r3
}
   14b5e:	b003      	add	sp, #12
   14b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   14b62:	3301      	adds	r3, #1
   14b64:	e7eb      	b.n	14b3e <hci_le_meta_event+0x12>
   14b66:	4a18      	ldr	r2, [pc, #96]	; (14bc8 <hci_le_meta_event+0x9c>)
   14b68:	4b18      	ldr	r3, [pc, #96]	; (14bcc <hci_le_meta_event+0xa0>)
   14b6a:	1ad2      	subs	r2, r2, r3
   14b6c:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14b6e:	f04f 0300 	mov.w	r3, #0
   14b72:	2001      	movs	r0, #1
   14b74:	f360 0302 	bfi	r3, r0, #0, #3
   14b78:	f36f 03c5 	bfc	r3, #3, #3
   14b7c:	f362 138f 	bfi	r3, r2, #6, #10
   14b80:	462a      	mov	r2, r5
   14b82:	4813      	ldr	r0, [pc, #76]	; (14bd0 <hci_le_meta_event+0xa4>)
   14b84:	f7fd f8e6 	bl	11d54 <log_2>
			return;
   14b88:	e7e9      	b.n	14b5e <hci_le_meta_event+0x32>
   14b8a:	4b0f      	ldr	r3, [pc, #60]	; (14bc8 <hci_le_meta_event+0x9c>)
   14b8c:	4a0f      	ldr	r2, [pc, #60]	; (14bcc <hci_le_meta_event+0xa0>)
   14b8e:	1a9b      	subs	r3, r3, r2
   14b90:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14b92:	f04f 0600 	mov.w	r6, #0
   14b96:	2202      	movs	r2, #2
   14b98:	f362 0602 	bfi	r6, r2, #0, #3
   14b9c:	f36f 06c5 	bfc	r6, #3, #3
   14ba0:	f363 168f 	bfi	r6, r3, #6, #10
   14ba4:	89a7      	ldrh	r7, [r4, #12]
   14ba6:	4639      	mov	r1, r7
   14ba8:	68a0      	ldr	r0, [r4, #8]
   14baa:	f7ff fa3d 	bl	14028 <bt_hex_real>
   14bae:	f7fc ff23 	bl	119f8 <z_log_strdup>
   14bb2:	4603      	mov	r3, r0
   14bb4:	f8ad 6000 	strh.w	r6, [sp]
   14bb8:	463a      	mov	r2, r7
   14bba:	4629      	mov	r1, r5
   14bbc:	4805      	ldr	r0, [pc, #20]	; (14bd4 <hci_le_meta_event+0xa8>)
   14bbe:	f7fd f855 	bl	11c6c <log_3>
}
   14bc2:	e7cc      	b.n	14b5e <hci_le_meta_event+0x32>
   14bc4:	00026fa0 	.word	0x00026fa0
   14bc8:	00025db0 	.word	0x00025db0
   14bcc:	00025d80 	.word	0x00025d80
   14bd0:	00026c20 	.word	0x00026c20
   14bd4:	00026c44 	.word	0x00026c44

00014bd8 <hci_event>:
{
   14bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bda:	b083      	sub	sp, #12
   14bdc:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14bde:	8983      	ldrh	r3, [r0, #12]
   14be0:	2b01      	cmp	r3, #1
   14be2:	d916      	bls.n	14c12 <hci_event+0x3a>
   14be4:	2102      	movs	r1, #2
   14be6:	f104 0008 	add.w	r0, r4, #8
   14bea:	f00f f8cb 	bl	23d84 <net_buf_simple_pull_mem>
   14bee:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14bf0:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   14bf2:	3b05      	subs	r3, #5
   14bf4:	2b15      	cmp	r3, #21
   14bf6:	d81c      	bhi.n	14c32 <hci_event+0x5a>
   14bf8:	e8df f003 	tbb	[pc, r3]
   14bfc:	1b1b1b19 	.word	0x1b1b1b19
   14c00:	1b1b1b1b 	.word	0x1b1b1b1b
   14c04:	1b36361b 	.word	0x1b36361b
   14c08:	1b361b1b 	.word	0x1b361b1b
   14c0c:	1b1b1b1b 	.word	0x1b1b1b1b
   14c10:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14c12:	f640 1317 	movw	r3, #2327	; 0x917
   14c16:	4a35      	ldr	r2, [pc, #212]	; (14cec <hci_event+0x114>)
   14c18:	4935      	ldr	r1, [pc, #212]	; (14cf0 <hci_event+0x118>)
   14c1a:	4836      	ldr	r0, [pc, #216]	; (14cf4 <hci_event+0x11c>)
   14c1c:	f00c f8a8 	bl	20d70 <printk>
   14c20:	4040      	eors	r0, r0
   14c22:	f380 8811 	msr	BASEPRI, r0
   14c26:	f04f 0003 	mov.w	r0, #3
   14c2a:	df02      	svc	2
   14c2c:	e7da      	b.n	14be4 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14c2e:	2303      	movs	r3, #3
   14c30:	e000      	b.n	14c34 <hci_event+0x5c>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   14c32:	2302      	movs	r3, #2
   14c34:	f013 0f02 	tst.w	r3, #2
   14c38:	d018      	beq.n	14c6c <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14c3a:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   14c3c:	2300      	movs	r3, #0
   14c3e:	2b03      	cmp	r3, #3
   14c40:	d836      	bhi.n	14cb0 <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   14c42:	4a2d      	ldr	r2, [pc, #180]	; (14cf8 <hci_event+0x120>)
   14c44:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   14c48:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   14c4c:	4295      	cmp	r5, r2
   14c4e:	d11b      	bne.n	14c88 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   14c50:	89a1      	ldrh	r1, [r4, #12]
   14c52:	7843      	ldrb	r3, [r0, #1]
   14c54:	4299      	cmp	r1, r3
   14c56:	d319      	bcc.n	14c8c <hci_event+0xb4>
		handler->handler(buf);
   14c58:	6843      	ldr	r3, [r0, #4]
   14c5a:	4620      	mov	r0, r4
   14c5c:	4798      	blx	r3
	net_buf_unref(buf);
   14c5e:	4620      	mov	r0, r4
   14c60:	f00f f825 	bl	23cae <net_buf_unref>
}
   14c64:	b003      	add	sp, #12
   14c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   14c68:	2301      	movs	r3, #1
   14c6a:	e7e3      	b.n	14c34 <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14c6c:	f640 131b 	movw	r3, #2331	; 0x91b
   14c70:	4a1e      	ldr	r2, [pc, #120]	; (14cec <hci_event+0x114>)
   14c72:	4922      	ldr	r1, [pc, #136]	; (14cfc <hci_event+0x124>)
   14c74:	481f      	ldr	r0, [pc, #124]	; (14cf4 <hci_event+0x11c>)
   14c76:	f00c f87b 	bl	20d70 <printk>
   14c7a:	4040      	eors	r0, r0
   14c7c:	f380 8811 	msr	BASEPRI, r0
   14c80:	f04f 0003 	mov.w	r0, #3
   14c84:	df02      	svc	2
   14c86:	e7d8      	b.n	14c3a <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   14c88:	3301      	adds	r3, #1
   14c8a:	e7d8      	b.n	14c3e <hci_event+0x66>
   14c8c:	4a1c      	ldr	r2, [pc, #112]	; (14d00 <hci_event+0x128>)
   14c8e:	4b1d      	ldr	r3, [pc, #116]	; (14d04 <hci_event+0x12c>)
   14c90:	1ad2      	subs	r2, r2, r3
   14c92:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14c94:	f04f 0300 	mov.w	r3, #0
   14c98:	2001      	movs	r0, #1
   14c9a:	f360 0302 	bfi	r3, r0, #0, #3
   14c9e:	f36f 03c5 	bfc	r3, #3, #3
   14ca2:	f362 138f 	bfi	r3, r2, #6, #10
   14ca6:	462a      	mov	r2, r5
   14ca8:	4817      	ldr	r0, [pc, #92]	; (14d08 <hci_event+0x130>)
   14caa:	f7fd f853 	bl	11d54 <log_2>
			return;
   14cae:	e7d6      	b.n	14c5e <hci_event+0x86>
   14cb0:	4b13      	ldr	r3, [pc, #76]	; (14d00 <hci_event+0x128>)
   14cb2:	4a14      	ldr	r2, [pc, #80]	; (14d04 <hci_event+0x12c>)
   14cb4:	1a9b      	subs	r3, r3, r2
   14cb6:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14cb8:	f04f 0600 	mov.w	r6, #0
   14cbc:	2202      	movs	r2, #2
   14cbe:	f362 0602 	bfi	r6, r2, #0, #3
   14cc2:	f36f 06c5 	bfc	r6, #3, #3
   14cc6:	f363 168f 	bfi	r6, r3, #6, #10
   14cca:	89a7      	ldrh	r7, [r4, #12]
   14ccc:	4639      	mov	r1, r7
   14cce:	68a0      	ldr	r0, [r4, #8]
   14cd0:	f7ff f9aa 	bl	14028 <bt_hex_real>
   14cd4:	f7fc fe90 	bl	119f8 <z_log_strdup>
   14cd8:	4603      	mov	r3, r0
   14cda:	f8ad 6000 	strh.w	r6, [sp]
   14cde:	463a      	mov	r2, r7
   14ce0:	4629      	mov	r1, r5
   14ce2:	480a      	ldr	r0, [pc, #40]	; (14d0c <hci_event+0x134>)
   14ce4:	f7fc ffc2 	bl	11c6c <log_3>
   14ce8:	e7b9      	b.n	14c5e <hci_event+0x86>
   14cea:	bf00      	nop
   14cec:	00026b68 	.word	0x00026b68
   14cf0:	00026b9c 	.word	0x00026b9c
   14cf4:	00026bb8 	.word	0x00026bb8
   14cf8:	00026ff0 	.word	0x00026ff0
   14cfc:	00026c68 	.word	0x00026c68
   14d00:	00025db0 	.word	0x00025db0
   14d04:	00025d80 	.word	0x00025d80
   14d08:	00026c20 	.word	0x00026c20
   14d0c:	00026c44 	.word	0x00026c44

00014d10 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   14d10:	b538      	push	{r3, r4, r5, lr}
   14d12:	e003      	b.n	14d1c <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   14d14:	f7ff ff60 	bl	14bd8 <hci_event>
	z_impl_k_yield();
   14d18:	f008 fce4 	bl	1d6e4 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   14d1c:	f04f 32ff 	mov.w	r2, #4294967295
   14d20:	f04f 33ff 	mov.w	r3, #4294967295
   14d24:	480f      	ldr	r0, [pc, #60]	; (14d64 <hci_rx_thread+0x54>)
   14d26:	f00e ff96 	bl	23c56 <net_buf_get>
   14d2a:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14d2c:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   14d2e:	2901      	cmp	r1, #1
   14d30:	d0f0      	beq.n	14d14 <hci_rx_thread+0x4>
   14d32:	2903      	cmp	r1, #3
   14d34:	d102      	bne.n	14d3c <hci_rx_thread+0x2c>
			hci_acl(buf);
   14d36:	f7ff fe2d 	bl	14994 <hci_acl>
			break;
   14d3a:	e7ed      	b.n	14d18 <hci_rx_thread+0x8>
   14d3c:	4b0a      	ldr	r3, [pc, #40]	; (14d68 <hci_rx_thread+0x58>)
   14d3e:	4a0b      	ldr	r2, [pc, #44]	; (14d6c <hci_rx_thread+0x5c>)
   14d40:	1a9b      	subs	r3, r3, r2
   14d42:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14d44:	2201      	movs	r2, #1
   14d46:	f362 0502 	bfi	r5, r2, #0, #3
   14d4a:	f36f 05c5 	bfc	r5, #3, #3
   14d4e:	f363 158f 	bfi	r5, r3, #6, #10
   14d52:	462a      	mov	r2, r5
   14d54:	4806      	ldr	r0, [pc, #24]	; (14d70 <hci_rx_thread+0x60>)
   14d56:	f7fc ffc7 	bl	11ce8 <log_1>
			net_buf_unref(buf);
   14d5a:	4620      	mov	r0, r4
   14d5c:	f00e ffa7 	bl	23cae <net_buf_unref>
			break;
   14d60:	e7da      	b.n	14d18 <hci_rx_thread+0x8>
   14d62:	bf00      	nop
   14d64:	200003dc 	.word	0x200003dc
   14d68:	00025db0 	.word	0x00025db0
   14d6c:	00025d80 	.word	0x00025d80
   14d70:	00026c98 	.word	0x00026c98

00014d74 <bt_hci_cmd_state_set_init>:
{
   14d74:	b510      	push	{r4, lr}
   14d76:	460c      	mov	r4, r1
	state->target = target;
   14d78:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   14d7a:	604b      	str	r3, [r1, #4]
	state->val = val;
   14d7c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14d80:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   14d82:	f00e feae 	bl	23ae2 <net_buf_id>
   14d86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14d8a:	4b02      	ldr	r3, [pc, #8]	; (14d94 <bt_hci_cmd_state_set_init+0x20>)
   14d8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14d90:	6044      	str	r4, [r0, #4]
}
   14d92:	bd10      	pop	{r4, pc}
   14d94:	200028d4 	.word	0x200028d4

00014d98 <bt_hci_cmd_create>:
{
   14d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d9c:	4682      	mov	sl, r0
   14d9e:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   14da0:	f04f 32ff 	mov.w	r2, #4294967295
   14da4:	f04f 33ff 	mov.w	r3, #4294967295
   14da8:	4817      	ldr	r0, [pc, #92]	; (14e08 <bt_hci_cmd_create+0x70>)
   14daa:	f00e ff4d 	bl	23c48 <net_buf_alloc_fixed>
   14dae:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   14db0:	f100 0808 	add.w	r8, r0, #8
   14db4:	2100      	movs	r1, #0
   14db6:	4640      	mov	r0, r8
   14db8:	f00e ff68 	bl	23c8c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14dbc:	2700      	movs	r7, #0
   14dbe:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   14dc0:	4620      	mov	r0, r4
   14dc2:	f00e fe8e 	bl	23ae2 <net_buf_id>
   14dc6:	4d11      	ldr	r5, [pc, #68]	; (14e0c <bt_hci_cmd_create+0x74>)
   14dc8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14dcc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14dd0:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   14dd4:	4620      	mov	r0, r4
   14dd6:	f00e fe84 	bl	23ae2 <net_buf_id>
   14dda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14dde:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14de2:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   14de4:	4620      	mov	r0, r4
   14de6:	f00e fe7c 	bl	23ae2 <net_buf_id>
   14dea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14dee:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   14df2:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   14df4:	2103      	movs	r1, #3
   14df6:	4640      	mov	r0, r8
   14df8:	f00e ffa3 	bl	23d42 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   14dfc:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   14e00:	7086      	strb	r6, [r0, #2]
}
   14e02:	4620      	mov	r0, r4
   14e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e08:	20000838 	.word	0x20000838
   14e0c:	200028d4 	.word	0x200028d4

00014e10 <bt_hci_cmd_send_sync>:
{
   14e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e12:	b087      	sub	sp, #28
   14e14:	4606      	mov	r6, r0
   14e16:	4615      	mov	r5, r2
	if (!buf) {
   14e18:	460c      	mov	r4, r1
   14e1a:	b361      	cbz	r1, 14e76 <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14e1c:	2201      	movs	r2, #1
   14e1e:	2100      	movs	r1, #0
   14e20:	4668      	mov	r0, sp
   14e22:	f010 f95f 	bl	250e4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14e26:	4620      	mov	r0, r4
   14e28:	f00e fe5b 	bl	23ae2 <net_buf_id>
   14e2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14e30:	4b2f      	ldr	r3, [pc, #188]	; (14ef0 <bt_hci_cmd_send_sync+0xe0>)
   14e32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14e36:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14e3a:	4620      	mov	r0, r4
   14e3c:	f00e ff5d 	bl	23cfa <net_buf_ref>
   14e40:	4601      	mov	r1, r0
   14e42:	482c      	ldr	r0, [pc, #176]	; (14ef4 <bt_hci_cmd_send_sync+0xe4>)
   14e44:	f00e ff26 	bl	23c94 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14e48:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14e4c:	2300      	movs	r3, #0
   14e4e:	4668      	mov	r0, sp
   14e50:	f007 ff54 	bl	1ccfc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14e54:	4607      	mov	r7, r0
   14e56:	b9b0      	cbnz	r0, 14e86 <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   14e58:	4620      	mov	r0, r4
   14e5a:	f00e fe42 	bl	23ae2 <net_buf_id>
   14e5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14e62:	4b23      	ldr	r3, [pc, #140]	; (14ef0 <bt_hci_cmd_send_sync+0xe0>)
   14e64:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   14e68:	b9ff      	cbnz	r7, 14eaa <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   14e6a:	2d00      	cmp	r5, #0
   14e6c:	d03a      	beq.n	14ee4 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   14e6e:	602c      	str	r4, [r5, #0]
	return 0;
   14e70:	2000      	movs	r0, #0
}
   14e72:	b007      	add	sp, #28
   14e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   14e76:	f7ff ff8f 	bl	14d98 <bt_hci_cmd_create>
		if (!buf) {
   14e7a:	4604      	mov	r4, r0
   14e7c:	2800      	cmp	r0, #0
   14e7e:	d1cd      	bne.n	14e1c <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   14e80:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14e84:	e7f5      	b.n	14e72 <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14e86:	f240 1331 	movw	r3, #305	; 0x131
   14e8a:	4a1b      	ldr	r2, [pc, #108]	; (14ef8 <bt_hci_cmd_send_sync+0xe8>)
   14e8c:	491b      	ldr	r1, [pc, #108]	; (14efc <bt_hci_cmd_send_sync+0xec>)
   14e8e:	481c      	ldr	r0, [pc, #112]	; (14f00 <bt_hci_cmd_send_sync+0xf0>)
   14e90:	f00b ff6e 	bl	20d70 <printk>
   14e94:	4639      	mov	r1, r7
   14e96:	481b      	ldr	r0, [pc, #108]	; (14f04 <bt_hci_cmd_send_sync+0xf4>)
   14e98:	f00b ff6a 	bl	20d70 <printk>
   14e9c:	4040      	eors	r0, r0
   14e9e:	f380 8811 	msr	BASEPRI, r0
   14ea2:	f04f 0003 	mov.w	r0, #3
   14ea6:	df02      	svc	2
   14ea8:	e7d6      	b.n	14e58 <bt_hci_cmd_send_sync+0x48>
   14eaa:	4a17      	ldr	r2, [pc, #92]	; (14f08 <bt_hci_cmd_send_sync+0xf8>)
   14eac:	4b17      	ldr	r3, [pc, #92]	; (14f0c <bt_hci_cmd_send_sync+0xfc>)
   14eae:	1ad2      	subs	r2, r2, r3
   14eb0:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   14eb2:	f04f 0300 	mov.w	r3, #0
   14eb6:	2102      	movs	r1, #2
   14eb8:	f361 0302 	bfi	r3, r1, #0, #3
   14ebc:	f36f 03c5 	bfc	r3, #3, #3
   14ec0:	f362 138f 	bfi	r3, r2, #6, #10
   14ec4:	463a      	mov	r2, r7
   14ec6:	4631      	mov	r1, r6
   14ec8:	4811      	ldr	r0, [pc, #68]	; (14f10 <bt_hci_cmd_send_sync+0x100>)
   14eca:	f7fc ff43 	bl	11d54 <log_2>
		net_buf_unref(buf);
   14ece:	4620      	mov	r0, r4
   14ed0:	f00e feed 	bl	23cae <net_buf_unref>
		switch (status) {
   14ed4:	2f09      	cmp	r7, #9
   14ed6:	d002      	beq.n	14ede <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   14ed8:	f06f 0004 	mvn.w	r0, #4
   14edc:	e7c9      	b.n	14e72 <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   14ede:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   14ee2:	e7c6      	b.n	14e72 <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   14ee4:	4620      	mov	r0, r4
   14ee6:	f00e fee2 	bl	23cae <net_buf_unref>
	return 0;
   14eea:	2000      	movs	r0, #0
   14eec:	e7c1      	b.n	14e72 <bt_hci_cmd_send_sync+0x62>
   14eee:	bf00      	nop
   14ef0:	200028d4 	.word	0x200028d4
   14ef4:	200003f4 	.word	0x200003f4
   14ef8:	00026b68 	.word	0x00026b68
   14efc:	00026cac 	.word	0x00026cac
   14f00:	00026bb8 	.word	0x00026bb8
   14f04:	00026cb8 	.word	0x00026cb8
   14f08:	00025db0 	.word	0x00025db0
   14f0c:	00025d80 	.word	0x00025d80
   14f10:	00026cd8 	.word	0x00026cd8

00014f14 <common_init>:
{
   14f14:	b510      	push	{r4, lr}
   14f16:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14f18:	4b22      	ldr	r3, [pc, #136]	; (14fa4 <common_init+0x90>)
   14f1a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   14f1e:	689b      	ldr	r3, [r3, #8]
   14f20:	f013 0f01 	tst.w	r3, #1
   14f24:	d10d      	bne.n	14f42 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14f26:	aa01      	add	r2, sp, #4
   14f28:	2100      	movs	r1, #0
   14f2a:	f640 4003 	movw	r0, #3075	; 0xc03
   14f2e:	f7ff ff6f 	bl	14e10 <bt_hci_cmd_send_sync>
		if (err) {
   14f32:	4604      	mov	r4, r0
   14f34:	b968      	cbnz	r0, 14f52 <common_init+0x3e>
		hci_reset_complete(rsp);
   14f36:	9801      	ldr	r0, [sp, #4]
   14f38:	f7ff fa9c 	bl	14474 <hci_reset_complete>
		net_buf_unref(rsp);
   14f3c:	9801      	ldr	r0, [sp, #4]
   14f3e:	f00e feb6 	bl	23cae <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   14f42:	aa01      	add	r2, sp, #4
   14f44:	2100      	movs	r1, #0
   14f46:	f241 0003 	movw	r0, #4099	; 0x1003
   14f4a:	f7ff ff61 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   14f4e:	4604      	mov	r4, r0
   14f50:	b110      	cbz	r0, 14f58 <common_init+0x44>
}
   14f52:	4620      	mov	r0, r4
   14f54:	b002      	add	sp, #8
   14f56:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   14f58:	9801      	ldr	r0, [sp, #4]
   14f5a:	f7ff fa63 	bl	14424 <read_local_features_complete>
	net_buf_unref(rsp);
   14f5e:	9801      	ldr	r0, [sp, #4]
   14f60:	f00e fea5 	bl	23cae <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14f64:	aa01      	add	r2, sp, #4
   14f66:	2100      	movs	r1, #0
   14f68:	f241 0001 	movw	r0, #4097	; 0x1001
   14f6c:	f7ff ff50 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   14f70:	4604      	mov	r4, r0
   14f72:	2800      	cmp	r0, #0
   14f74:	d1ed      	bne.n	14f52 <common_init+0x3e>
	read_local_ver_complete(rsp);
   14f76:	9801      	ldr	r0, [sp, #4]
   14f78:	f7ff fa20 	bl	143bc <read_local_ver_complete>
	net_buf_unref(rsp);
   14f7c:	9801      	ldr	r0, [sp, #4]
   14f7e:	f00e fe96 	bl	23cae <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   14f82:	aa01      	add	r2, sp, #4
   14f84:	2100      	movs	r1, #0
   14f86:	f241 0002 	movw	r0, #4098	; 0x1002
   14f8a:	f7ff ff41 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   14f8e:	4604      	mov	r4, r0
   14f90:	2800      	cmp	r0, #0
   14f92:	d1de      	bne.n	14f52 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   14f94:	9801      	ldr	r0, [sp, #4]
   14f96:	f7ff fa31 	bl	143fc <read_supported_commands_complete>
	net_buf_unref(rsp);
   14f9a:	9801      	ldr	r0, [sp, #4]
   14f9c:	f00e fe87 	bl	23cae <net_buf_unref>
	return 0;
   14fa0:	e7d7      	b.n	14f52 <common_init+0x3e>
   14fa2:	bf00      	nop
   14fa4:	200002a8 	.word	0x200002a8

00014fa8 <hci_le_read_max_data_len>:
{
   14fa8:	b570      	push	{r4, r5, r6, lr}
   14faa:	b082      	sub	sp, #8
   14fac:	4605      	mov	r5, r0
   14fae:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   14fb0:	aa01      	add	r2, sp, #4
   14fb2:	2100      	movs	r1, #0
   14fb4:	f242 002f 	movw	r0, #8239	; 0x202f
   14fb8:	f7ff ff2a 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   14fbc:	4606      	mov	r6, r0
   14fbe:	b960      	cbnz	r0, 14fda <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   14fc0:	9801      	ldr	r0, [sp, #4]
   14fc2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   14fc4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14fc8:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   14fca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   14fce:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   14fd0:	f00e fe6d 	bl	23cae <net_buf_unref>
}
   14fd4:	4630      	mov	r0, r6
   14fd6:	b002      	add	sp, #8
   14fd8:	bd70      	pop	{r4, r5, r6, pc}
   14fda:	4b08      	ldr	r3, [pc, #32]	; (14ffc <hci_le_read_max_data_len+0x54>)
   14fdc:	4a08      	ldr	r2, [pc, #32]	; (15000 <hci_le_read_max_data_len+0x58>)
   14fde:	1a9b      	subs	r3, r3, r2
   14fe0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
   14fe2:	f04f 0100 	mov.w	r1, #0
   14fe6:	2201      	movs	r2, #1
   14fe8:	f362 0102 	bfi	r1, r2, #0, #3
   14fec:	f36f 01c5 	bfc	r1, #3, #3
   14ff0:	f363 118f 	bfi	r1, r3, #6, #10
   14ff4:	4803      	ldr	r0, [pc, #12]	; (15004 <hci_le_read_max_data_len+0x5c>)
   14ff6:	f7fc ff2d 	bl	11e54 <log_0>
		return err;
   14ffa:	e7eb      	b.n	14fd4 <hci_le_read_max_data_len+0x2c>
   14ffc:	00025db0 	.word	0x00025db0
   15000:	00025d80 	.word	0x00025d80
   15004:	00026cf4 	.word	0x00026cf4

00015008 <le_set_event_mask>:
{
   15008:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1500a:	2108      	movs	r1, #8
   1500c:	f242 0001 	movw	r0, #8193	; 0x2001
   15010:	f7ff fec2 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   15014:	b398      	cbz	r0, 1507e <le_set_event_mask+0x76>
   15016:	4604      	mov	r4, r0
   15018:	2108      	movs	r1, #8
   1501a:	4408      	add	r0, r1
   1501c:	f00e fe91 	bl	23d42 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   15020:	4b18      	ldr	r3, [pc, #96]	; (15084 <le_set_event_mask+0x7c>)
   15022:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   15026:	f011 0f02 	tst.w	r1, #2
   1502a:	d125      	bne.n	15078 <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1502c:	220f      	movs	r2, #15
   1502e:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   15030:	f011 0f20 	tst.w	r1, #32
   15034:	d001      	beq.n	1503a <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   15036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   1503a:	4912      	ldr	r1, [pc, #72]	; (15084 <le_set_event_mask+0x7c>)
   1503c:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   15040:	f011 0f09 	tst.w	r1, #9
   15044:	d001      	beq.n	1504a <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   15046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   1504a:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   1504c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   15050:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   15052:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   15054:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   15056:	0e12      	lsrs	r2, r2, #24
   15058:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   1505a:	b29a      	uxth	r2, r3
	dst[0] = val;
   1505c:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1505e:	0a12      	lsrs	r2, r2, #8
   15060:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   15062:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   15064:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   15066:	0a13      	lsrs	r3, r2, #8
   15068:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1506a:	2200      	movs	r2, #0
   1506c:	4621      	mov	r1, r4
   1506e:	f242 0001 	movw	r0, #8193	; 0x2001
   15072:	f7ff fecd 	bl	14e10 <bt_hci_cmd_send_sync>
}
   15076:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   15078:	222f      	movs	r2, #47	; 0x2f
   1507a:	2300      	movs	r3, #0
   1507c:	e7d8      	b.n	15030 <le_set_event_mask+0x28>
		return -ENOBUFS;
   1507e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15082:	e7f8      	b.n	15076 <le_set_event_mask+0x6e>
   15084:	200002a8 	.word	0x200002a8

00015088 <le_init>:
{
   15088:	b510      	push	{r4, lr}
   1508a:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   1508c:	4b50      	ldr	r3, [pc, #320]	; (151d0 <le_init+0x148>)
   1508e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15092:	f013 0f40 	tst.w	r3, #64	; 0x40
   15096:	d00a      	beq.n	150ae <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   15098:	aa01      	add	r2, sp, #4
   1509a:	2100      	movs	r1, #0
   1509c:	f242 0003 	movw	r0, #8195	; 0x2003
   150a0:	f7ff feb6 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   150a4:	4603      	mov	r3, r0
   150a6:	b1a8      	cbz	r0, 150d4 <le_init+0x4c>
}
   150a8:	4618      	mov	r0, r3
   150aa:	b002      	add	sp, #8
   150ac:	bd10      	pop	{r4, pc}
   150ae:	4b49      	ldr	r3, [pc, #292]	; (151d4 <le_init+0x14c>)
   150b0:	4a49      	ldr	r2, [pc, #292]	; (151d8 <le_init+0x150>)
   150b2:	1a9b      	subs	r3, r3, r2
   150b4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   150b6:	f04f 0100 	mov.w	r1, #0
   150ba:	2201      	movs	r2, #1
   150bc:	f362 0102 	bfi	r1, r2, #0, #3
   150c0:	f36f 01c5 	bfc	r1, #3, #3
   150c4:	f363 118f 	bfi	r1, r3, #6, #10
   150c8:	4844      	ldr	r0, [pc, #272]	; (151dc <le_init+0x154>)
   150ca:	f7fc fec3 	bl	11e54 <log_0>
		return -ENODEV;
   150ce:	f06f 0312 	mvn.w	r3, #18
   150d2:	e7e9      	b.n	150a8 <le_init+0x20>
	read_le_features_complete(rsp);
   150d4:	9801      	ldr	r0, [sp, #4]
   150d6:	f7ff f987 	bl	143e8 <read_le_features_complete>
	net_buf_unref(rsp);
   150da:	9801      	ldr	r0, [sp, #4]
   150dc:	f00e fde7 	bl	23cae <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   150e0:	aa01      	add	r2, sp, #4
   150e2:	2100      	movs	r1, #0
   150e4:	f242 0002 	movw	r0, #8194	; 0x2002
   150e8:	f7ff fe92 	bl	14e10 <bt_hci_cmd_send_sync>
		if (err) {
   150ec:	4603      	mov	r3, r0
   150ee:	2800      	cmp	r0, #0
   150f0:	d1da      	bne.n	150a8 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   150f2:	9801      	ldr	r0, [sp, #4]
   150f4:	f7ff f9da 	bl	144ac <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   150f8:	9801      	ldr	r0, [sp, #4]
   150fa:	f00e fdd8 	bl	23cae <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   150fe:	4b34      	ldr	r3, [pc, #208]	; (151d0 <le_init+0x148>)
   15100:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   15104:	f013 0f20 	tst.w	r3, #32
   15108:	d032      	beq.n	15170 <le_init+0xe8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1510a:	4b31      	ldr	r3, [pc, #196]	; (151d0 <le_init+0x148>)
   1510c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   15110:	f013 0f08 	tst.w	r3, #8
   15114:	d144      	bne.n	151a0 <le_init+0x118>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   15116:	4b2e      	ldr	r3, [pc, #184]	; (151d0 <le_init+0x148>)
   15118:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1511c:	f013 0f20 	tst.w	r3, #32
   15120:	d022      	beq.n	15168 <le_init+0xe0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15122:	f10d 0102 	add.w	r1, sp, #2
   15126:	4668      	mov	r0, sp
   15128:	f7ff ff3e 	bl	14fa8 <hci_le_read_max_data_len>
		if (err) {
   1512c:	4603      	mov	r3, r0
   1512e:	2800      	cmp	r0, #0
   15130:	d1ba      	bne.n	150a8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15132:	2104      	movs	r1, #4
   15134:	f242 0024 	movw	r0, #8228	; 0x2024
   15138:	f7ff fe2e 	bl	14d98 <bt_hci_cmd_create>
		if (!buf) {
   1513c:	4604      	mov	r4, r0
   1513e:	2800      	cmp	r0, #0
   15140:	d03f      	beq.n	151c2 <le_init+0x13a>
   15142:	2104      	movs	r1, #4
   15144:	3008      	adds	r0, #8
   15146:	f00e fdfc 	bl	23d42 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1514a:	f8bd 3000 	ldrh.w	r3, [sp]
   1514e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   15150:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   15154:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15156:	2200      	movs	r2, #0
   15158:	4621      	mov	r1, r4
   1515a:	f242 0024 	movw	r0, #8228	; 0x2024
   1515e:	f7ff fe57 	bl	14e10 <bt_hci_cmd_send_sync>
		if (err) {
   15162:	4603      	mov	r3, r0
   15164:	2800      	cmp	r0, #0
   15166:	d19f      	bne.n	150a8 <le_init+0x20>
	return  le_set_event_mask();
   15168:	f7ff ff4e 	bl	15008 <le_set_event_mask>
   1516c:	4603      	mov	r3, r0
   1516e:	e79b      	b.n	150a8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   15170:	2102      	movs	r1, #2
   15172:	f640 406d 	movw	r0, #3181	; 0xc6d
   15176:	f7ff fe0f 	bl	14d98 <bt_hci_cmd_create>
		if (!buf) {
   1517a:	4604      	mov	r4, r0
   1517c:	b320      	cbz	r0, 151c8 <le_init+0x140>
   1517e:	2102      	movs	r1, #2
   15180:	3008      	adds	r0, #8
   15182:	f00e fdde 	bl	23d42 <net_buf_simple_add>
		cp_le->le = 0x01;
   15186:	2301      	movs	r3, #1
   15188:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1518a:	2200      	movs	r2, #0
   1518c:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1518e:	4621      	mov	r1, r4
   15190:	f640 406d 	movw	r0, #3181	; 0xc6d
   15194:	f7ff fe3c 	bl	14e10 <bt_hci_cmd_send_sync>
		if (err) {
   15198:	4603      	mov	r3, r0
   1519a:	2800      	cmp	r0, #0
   1519c:	d0b5      	beq.n	1510a <le_init+0x82>
   1519e:	e783      	b.n	150a8 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   151a0:	aa01      	add	r2, sp, #4
   151a2:	2100      	movs	r1, #0
   151a4:	f242 001c 	movw	r0, #8220	; 0x201c
   151a8:	f7ff fe32 	bl	14e10 <bt_hci_cmd_send_sync>
		if (err) {
   151ac:	4603      	mov	r3, r0
   151ae:	2800      	cmp	r0, #0
   151b0:	f47f af7a 	bne.w	150a8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   151b4:	9801      	ldr	r0, [sp, #4]
   151b6:	f7ff f93f 	bl	14438 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   151ba:	9801      	ldr	r0, [sp, #4]
   151bc:	f00e fd77 	bl	23cae <net_buf_unref>
   151c0:	e7a9      	b.n	15116 <le_init+0x8e>
			return -ENOBUFS;
   151c2:	f06f 0368 	mvn.w	r3, #104	; 0x68
   151c6:	e76f      	b.n	150a8 <le_init+0x20>
			return -ENOBUFS;
   151c8:	f06f 0368 	mvn.w	r3, #104	; 0x68
   151cc:	e76c      	b.n	150a8 <le_init+0x20>
   151ce:	bf00      	nop
   151d0:	200002a8 	.word	0x200002a8
   151d4:	00025db0 	.word	0x00025db0
   151d8:	00025d80 	.word	0x00025d80
   151dc:	00026d14 	.word	0x00026d14

000151e0 <bt_br_init>:
{
   151e0:	b510      	push	{r4, lr}
   151e2:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   151e4:	4b0b      	ldr	r3, [pc, #44]	; (15214 <bt_br_init+0x34>)
   151e6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   151ea:	b11b      	cbz	r3, 151f4 <bt_br_init+0x14>
		return 0;
   151ec:	2400      	movs	r4, #0
}
   151ee:	4620      	mov	r0, r4
   151f0:	b002      	add	sp, #8
   151f2:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   151f4:	aa01      	add	r2, sp, #4
   151f6:	2100      	movs	r1, #0
   151f8:	f241 0005 	movw	r0, #4101	; 0x1005
   151fc:	f7ff fe08 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   15200:	4604      	mov	r4, r0
   15202:	2800      	cmp	r0, #0
   15204:	d1f3      	bne.n	151ee <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   15206:	9801      	ldr	r0, [sp, #4]
   15208:	f7ff f964 	bl	144d4 <read_buffer_size_complete>
	net_buf_unref(rsp);
   1520c:	9801      	ldr	r0, [sp, #4]
   1520e:	f00e fd4e 	bl	23cae <net_buf_unref>
	return 0;
   15212:	e7ec      	b.n	151ee <bt_br_init+0xe>
   15214:	200002a8 	.word	0x200002a8

00015218 <hci_vs_init>:
{
   15218:	b510      	push	{r4, lr}
   1521a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1521c:	aa01      	add	r2, sp, #4
   1521e:	2100      	movs	r1, #0
   15220:	f64f 4001 	movw	r0, #64513	; 0xfc01
   15224:	f7ff fdf4 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   15228:	bb38      	cbnz	r0, 1527a <hci_vs_init+0x62>
	net_buf_unref(rsp);
   1522a:	9801      	ldr	r0, [sp, #4]
   1522c:	f00e fd3f 	bl	23cae <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   15230:	aa01      	add	r2, sp, #4
   15232:	2100      	movs	r1, #0
   15234:	f64f 4002 	movw	r0, #64514	; 0xfc02
   15238:	f7ff fdea 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   1523c:	bb78      	cbnz	r0, 1529e <hci_vs_init+0x86>
	rp.cmds = (void *)rsp->data;
   1523e:	9801      	ldr	r0, [sp, #4]
   15240:	6883      	ldr	r3, [r0, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   15242:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   15246:	4c27      	ldr	r4, [pc, #156]	; (152e4 <hci_vs_init+0xcc>)
   15248:	f8a4 30b9 	strh.w	r3, [r4, #185]	; 0xb9
	net_buf_unref(rsp);
   1524c:	f00e fd2f 	bl	23cae <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   15250:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   15254:	f013 0f04 	tst.w	r3, #4
   15258:	d01f      	beq.n	1529a <hci_vs_init+0x82>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1525a:	aa01      	add	r2, sp, #4
   1525c:	2100      	movs	r1, #0
   1525e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   15262:	f7ff fdd5 	bl	14e10 <bt_hci_cmd_send_sync>
		if (err) {
   15266:	bb58      	cbnz	r0, 152c0 <hci_vs_init+0xa8>
		rp.feat = (void *)rsp->data;
   15268:	9801      	ldr	r0, [sp, #4]
   1526a:	6883      	ldr	r3, [r0, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1526c:	785a      	ldrb	r2, [r3, #1]
   1526e:	4b1d      	ldr	r3, [pc, #116]	; (152e4 <hci_vs_init+0xcc>)
   15270:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		net_buf_unref(rsp);
   15274:	f00e fd1b 	bl	23cae <net_buf_unref>
   15278:	e00f      	b.n	1529a <hci_vs_init+0x82>
   1527a:	4b1b      	ldr	r3, [pc, #108]	; (152e8 <hci_vs_init+0xd0>)
   1527c:	4a1b      	ldr	r2, [pc, #108]	; (152ec <hci_vs_init+0xd4>)
   1527e:	1a9b      	subs	r3, r3, r2
   15280:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   15282:	f04f 0100 	mov.w	r1, #0
   15286:	2202      	movs	r2, #2
   15288:	f362 0102 	bfi	r1, r2, #0, #3
   1528c:	f36f 01c5 	bfc	r1, #3, #3
   15290:	f363 118f 	bfi	r1, r3, #6, #10
   15294:	4816      	ldr	r0, [pc, #88]	; (152f0 <hci_vs_init+0xd8>)
   15296:	f7fc fddd 	bl	11e54 <log_0>
}
   1529a:	b002      	add	sp, #8
   1529c:	bd10      	pop	{r4, pc}
   1529e:	4b12      	ldr	r3, [pc, #72]	; (152e8 <hci_vs_init+0xd0>)
   152a0:	4a12      	ldr	r2, [pc, #72]	; (152ec <hci_vs_init+0xd4>)
   152a2:	1a9b      	subs	r3, r3, r2
   152a4:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read supported vendor commands");
   152a6:	f04f 0100 	mov.w	r1, #0
   152aa:	2202      	movs	r2, #2
   152ac:	f362 0102 	bfi	r1, r2, #0, #3
   152b0:	f36f 01c5 	bfc	r1, #3, #3
   152b4:	f363 118f 	bfi	r1, r3, #6, #10
   152b8:	480e      	ldr	r0, [pc, #56]	; (152f4 <hci_vs_init+0xdc>)
   152ba:	f7fc fdcb 	bl	11e54 <log_0>
		return;
   152be:	e7ec      	b.n	1529a <hci_vs_init+0x82>
   152c0:	4b09      	ldr	r3, [pc, #36]	; (152e8 <hci_vs_init+0xd0>)
   152c2:	4a0a      	ldr	r2, [pc, #40]	; (152ec <hci_vs_init+0xd4>)
   152c4:	1a9b      	subs	r3, r3, r2
   152c6:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   152c8:	f04f 0100 	mov.w	r1, #0
   152cc:	2202      	movs	r2, #2
   152ce:	f362 0102 	bfi	r1, r2, #0, #3
   152d2:	f36f 01c5 	bfc	r1, #3, #3
   152d6:	f363 118f 	bfi	r1, r3, #6, #10
   152da:	4807      	ldr	r0, [pc, #28]	; (152f8 <hci_vs_init+0xe0>)
   152dc:	f7fc fdba 	bl	11e54 <log_0>
			return;
   152e0:	e7db      	b.n	1529a <hci_vs_init+0x82>
   152e2:	bf00      	nop
   152e4:	200002a8 	.word	0x200002a8
   152e8:	00025db0 	.word	0x00025db0
   152ec:	00025d80 	.word	0x00025d80
   152f0:	00026d38 	.word	0x00026d38
   152f4:	00026d5c 	.word	0x00026d5c
   152f8:	00026d88 	.word	0x00026d88

000152fc <hci_init>:
{
   152fc:	b508      	push	{r3, lr}
	err = common_init();
   152fe:	f7ff fe09 	bl	14f14 <common_init>
	if (err) {
   15302:	4603      	mov	r3, r0
   15304:	b108      	cbz	r0, 1530a <hci_init+0xe>
}
   15306:	4618      	mov	r0, r3
   15308:	bd08      	pop	{r3, pc}
	err = le_init();
   1530a:	f7ff febd 	bl	15088 <le_init>
	if (err) {
   1530e:	4603      	mov	r3, r0
   15310:	2800      	cmp	r0, #0
   15312:	d1f8      	bne.n	15306 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15314:	4b16      	ldr	r3, [pc, #88]	; (15370 <hci_init+0x74>)
   15316:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1531a:	f013 0f20 	tst.w	r3, #32
   1531e:	d00e      	beq.n	1533e <hci_init+0x42>
	else if (!bt_dev.le.acl_mtu) {
   15320:	4b13      	ldr	r3, [pc, #76]	; (15370 <hci_init+0x74>)
   15322:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   15326:	b183      	cbz	r3, 1534a <hci_init+0x4e>
	err = set_event_mask();
   15328:	f00c fe6b 	bl	22002 <set_event_mask>
	if (err) {
   1532c:	4603      	mov	r3, r0
   1532e:	2800      	cmp	r0, #0
   15330:	d1e9      	bne.n	15306 <hci_init+0xa>
	hci_vs_init();
   15332:	f7ff ff71 	bl	15218 <hci_vs_init>
	err = bt_id_init();
   15336:	f001 f8bf 	bl	164b8 <bt_id_init>
   1533a:	4603      	mov	r3, r0
	if (err) {
   1533c:	e7e3      	b.n	15306 <hci_init+0xa>
		err = bt_br_init();
   1533e:	f7ff ff4f 	bl	151e0 <bt_br_init>
		if (err) {
   15342:	4603      	mov	r3, r0
   15344:	2800      	cmp	r0, #0
   15346:	d0ef      	beq.n	15328 <hci_init+0x2c>
   15348:	e7dd      	b.n	15306 <hci_init+0xa>
   1534a:	4b0a      	ldr	r3, [pc, #40]	; (15374 <hci_init+0x78>)
   1534c:	4a0a      	ldr	r2, [pc, #40]	; (15378 <hci_init+0x7c>)
   1534e:	1a9b      	subs	r3, r3, r2
   15350:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL BR/EDR buffers not initialized");
   15352:	f04f 0100 	mov.w	r1, #0
   15356:	2201      	movs	r2, #1
   15358:	f362 0102 	bfi	r1, r2, #0, #3
   1535c:	f36f 01c5 	bfc	r1, #3, #3
   15360:	f363 118f 	bfi	r1, r3, #6, #10
   15364:	4805      	ldr	r0, [pc, #20]	; (1537c <hci_init+0x80>)
   15366:	f7fc fd75 	bl	11e54 <log_0>
		return -EIO;
   1536a:	f06f 0304 	mvn.w	r3, #4
   1536e:	e7ca      	b.n	15306 <hci_init+0xa>
   15370:	200002a8 	.word	0x200002a8
   15374:	00025db0 	.word	0x00025db0
   15378:	00025d80 	.word	0x00025d80
   1537c:	00026db4 	.word	0x00026db4

00015380 <bt_le_create_conn_legacy>:
{
   15380:	b570      	push	{r4, r5, r6, lr}
   15382:	b088      	sub	sp, #32
   15384:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15386:	f3bf 8f5b 	dmb	ish
   1538a:	6840      	ldr	r0, [r0, #4]
   1538c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15390:	f000 0601 	and.w	r6, r0, #1
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   15394:	f10d 010b 	add.w	r1, sp, #11
   15398:	4630      	mov	r0, r6
   1539a:	f001 f863 	bl	16464 <bt_id_set_create_conn_own_addr>
	if (err) {
   1539e:	b108      	cbz	r0, 153a4 <bt_le_create_conn_legacy+0x24>
}
   153a0:	b008      	add	sp, #32
   153a2:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   153a4:	2119      	movs	r1, #25
   153a6:	f242 000d 	movw	r0, #8205	; 0x200d
   153aa:	f7ff fcf5 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   153ae:	4605      	mov	r5, r0
   153b0:	2800      	cmp	r0, #0
   153b2:	d04a      	beq.n	1544a <bt_le_create_conn_legacy+0xca>
   153b4:	2119      	movs	r1, #25
   153b6:	3008      	adds	r0, #8
   153b8:	f00e fcc3 	bl	23d42 <net_buf_simple_add>
   153bc:	4603      	mov	r3, r0
__ssp_bos_icheck3(memset, void *, int)
   153be:	2200      	movs	r2, #0
   153c0:	6002      	str	r2, [r0, #0]
   153c2:	6042      	str	r2, [r0, #4]
   153c4:	6082      	str	r2, [r0, #8]
   153c6:	60c2      	str	r2, [r0, #12]
   153c8:	6102      	str	r2, [r0, #16]
   153ca:	6142      	str	r2, [r0, #20]
   153cc:	7602      	strb	r2, [r0, #24]
	cp->own_addr_type = own_addr_type;
   153ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
   153d2:	7302      	strb	r2, [r0, #12]
	if (use_filter) {
   153d4:	b366      	cbz	r6, 15430 <bt_le_create_conn_legacy+0xb0>
		bt_addr_le_copy(&cp->peer_addr, BT_ADDR_LE_ANY);
   153d6:	2200      	movs	r2, #0
   153d8:	9206      	str	r2, [sp, #24]
   153da:	f8cd 201b 	str.w	r2, [sp, #27]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   153de:	f8c0 2005 	str.w	r2, [r0, #5]
   153e2:	6082      	str	r2, [r0, #8]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_FILTER;
   153e4:	2201      	movs	r2, #1
   153e6:	7102      	strb	r2, [r0, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   153e8:	4a19      	ldr	r2, [pc, #100]	; (15450 <bt_le_create_conn_legacy+0xd0>)
   153ea:	8991      	ldrh	r1, [r2, #12]
   153ec:	8019      	strh	r1, [r3, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   153ee:	89d1      	ldrh	r1, [r2, #14]
   153f0:	8059      	strh	r1, [r3, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   153f2:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   153f6:	f8a3 100d 	strh.w	r1, [r3, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   153fa:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   153fe:	f8a3 100f 	strh.w	r1, [r3, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   15402:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
   15406:	f8a3 1011 	strh.w	r1, [r3, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   1540a:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1540e:	f8a3 1013 	strh.w	r1, [r3, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   15412:	2301      	movs	r3, #1
   15414:	9300      	str	r3, [sp, #0]
   15416:	230b      	movs	r3, #11
   15418:	32cc      	adds	r2, #204	; 0xcc
   1541a:	a903      	add	r1, sp, #12
   1541c:	4628      	mov	r0, r5
   1541e:	f7ff fca9 	bl	14d74 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   15422:	2200      	movs	r2, #0
   15424:	4629      	mov	r1, r5
   15426:	f242 000d 	movw	r0, #8205	; 0x200d
   1542a:	f7ff fcf1 	bl	14e10 <bt_hci_cmd_send_sync>
   1542e:	e7b7      	b.n	153a0 <bt_le_create_conn_legacy+0x20>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   15430:	4622      	mov	r2, r4
   15432:	f852 1f88 	ldr.w	r1, [r2, #136]!
   15436:	f8c0 1005 	str.w	r1, [r0, #5]
   1543a:	8891      	ldrh	r1, [r2, #4]
   1543c:	7992      	ldrb	r2, [r2, #6]
   1543e:	f8a0 1009 	strh.w	r1, [r0, #9]
   15442:	72c2      	strb	r2, [r0, #11]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   15444:	2200      	movs	r2, #0
   15446:	7102      	strb	r2, [r0, #4]
   15448:	e7ce      	b.n	153e8 <bt_le_create_conn_legacy+0x68>
		return -ENOBUFS;
   1544a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1544e:	e7a7      	b.n	153a0 <bt_le_create_conn_legacy+0x20>
   15450:	200002a8 	.word	0x200002a8

00015454 <le_conn_complete_cancel>:
{
   15454:	b510      	push	{r4, lr}
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   15456:	2100      	movs	r1, #0
   15458:	4608      	mov	r0, r1
   1545a:	f7ff f86b 	bl	14534 <find_pending_connect>
	if (!conn) {
   1545e:	b180      	cbz	r0, 15482 <le_conn_complete_cancel+0x2e>
   15460:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   15462:	2302      	movs	r3, #2
   15464:	7243      	strb	r3, [r0, #9]
   15466:	f3bf 8f5b 	dmb	ish
   1546a:	6843      	ldr	r3, [r0, #4]
   1546c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   15470:	f013 0f01 	tst.w	r3, #1
   15474:	d016      	beq.n	154a4 <le_conn_complete_cancel+0x50>
			bt_le_create_conn(conn);
   15476:	f00c fde6 	bl	22046 <bt_le_create_conn>
	bt_conn_unref(conn);
   1547a:	4620      	mov	r0, r4
   1547c:	f00d f86c 	bl	22558 <bt_conn_unref>
}
   15480:	bd10      	pop	{r4, pc}
   15482:	4b0a      	ldr	r3, [pc, #40]	; (154ac <le_conn_complete_cancel+0x58>)
   15484:	4a0a      	ldr	r2, [pc, #40]	; (154b0 <le_conn_complete_cancel+0x5c>)
   15486:	1a9b      	subs	r3, r3, r2
   15488:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending central connection");
   1548a:	f04f 0100 	mov.w	r1, #0
   1548e:	2201      	movs	r2, #1
   15490:	f362 0102 	bfi	r1, r2, #0, #3
   15494:	f36f 01c5 	bfc	r1, #3, #3
   15498:	f363 118f 	bfi	r1, r3, #6, #10
   1549c:	4805      	ldr	r0, [pc, #20]	; (154b4 <le_conn_complete_cancel+0x60>)
   1549e:	f7fc fcd9 	bl	11e54 <log_0>
		return;
   154a2:	e7ed      	b.n	15480 <le_conn_complete_cancel+0x2c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   154a4:	2100      	movs	r1, #0
   154a6:	f001 fd61 	bl	16f6c <bt_conn_set_state>
   154aa:	e7e6      	b.n	1547a <le_conn_complete_cancel+0x26>
   154ac:	00025db0 	.word	0x00025db0
   154b0:	00025d80 	.word	0x00025d80
   154b4:	00026dd8 	.word	0x00026dd8

000154b8 <bt_send>:
{
   154b8:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   154ba:	4b03      	ldr	r3, [pc, #12]	; (154c8 <bt_send+0x10>)
   154bc:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   154c0:	691b      	ldr	r3, [r3, #16]
   154c2:	4798      	blx	r3
}
   154c4:	bd08      	pop	{r3, pc}
   154c6:	bf00      	nop
   154c8:	200002a8 	.word	0x200002a8

000154cc <bt_hci_cmd_send>:
{
   154cc:	b538      	push	{r3, r4, r5, lr}
   154ce:	4604      	mov	r4, r0
	if (!buf) {
   154d0:	460d      	mov	r5, r1
   154d2:	b151      	cbz	r1, 154ea <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   154d4:	f640 4335 	movw	r3, #3125	; 0xc35
   154d8:	429c      	cmp	r4, r3
   154da:	d00e      	beq.n	154fa <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   154dc:	4629      	mov	r1, r5
   154de:	4814      	ldr	r0, [pc, #80]	; (15530 <bt_hci_cmd_send+0x64>)
   154e0:	f00e fbd8 	bl	23c94 <net_buf_put>
	return 0;
   154e4:	2400      	movs	r4, #0
}
   154e6:	4620      	mov	r0, r4
   154e8:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   154ea:	f7ff fc55 	bl	14d98 <bt_hci_cmd_create>
		if (!buf) {
   154ee:	4605      	mov	r5, r0
   154f0:	2800      	cmp	r0, #0
   154f2:	d1ef      	bne.n	154d4 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   154f4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   154f8:	e7f5      	b.n	154e6 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   154fa:	4628      	mov	r0, r5
   154fc:	f7ff ffdc 	bl	154b8 <bt_send>
		if (err) {
   15500:	4604      	mov	r4, r0
   15502:	2800      	cmp	r0, #0
   15504:	d0ef      	beq.n	154e6 <bt_hci_cmd_send+0x1a>
   15506:	4b0b      	ldr	r3, [pc, #44]	; (15534 <bt_hci_cmd_send+0x68>)
   15508:	4a0b      	ldr	r2, [pc, #44]	; (15538 <bt_hci_cmd_send+0x6c>)
   1550a:	1a9b      	subs	r3, r3, r2
   1550c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   1550e:	f04f 0200 	mov.w	r2, #0
   15512:	2101      	movs	r1, #1
   15514:	f361 0202 	bfi	r2, r1, #0, #3
   15518:	f36f 02c5 	bfc	r2, #3, #3
   1551c:	f363 128f 	bfi	r2, r3, #6, #10
   15520:	4601      	mov	r1, r0
   15522:	4806      	ldr	r0, [pc, #24]	; (1553c <bt_hci_cmd_send+0x70>)
   15524:	f7fc fbe0 	bl	11ce8 <log_1>
			net_buf_unref(buf);
   15528:	4628      	mov	r0, r5
   1552a:	f00e fbc0 	bl	23cae <net_buf_unref>
		return err;
   1552e:	e7da      	b.n	154e6 <bt_hci_cmd_send+0x1a>
   15530:	200003f4 	.word	0x200003f4
   15534:	00025db0 	.word	0x00025db0
   15538:	00025d80 	.word	0x00025d80
   1553c:	00026df8 	.word	0x00026df8

00015540 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   15540:	7a83      	ldrb	r3, [r0, #10]
   15542:	2b07      	cmp	r3, #7
   15544:	d000      	beq.n	15548 <conn_auto_initiate+0x8>
   15546:	4770      	bx	lr
{
   15548:	b530      	push	{r4, r5, lr}
   1554a:	b085      	sub	sp, #20
   1554c:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1554e:	1d05      	adds	r5, r0, #4
   15550:	f3bf 8f5b 	dmb	ish
   15554:	6843      	ldr	r3, [r0, #4]
   15556:	f3bf 8f5b 	dmb	ish
   1555a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1555e:	d10b      	bne.n	15578 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15560:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15562:	b12b      	cbz	r3, 15570 <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   15564:	4b37      	ldr	r3, [pc, #220]	; (15644 <conn_auto_initiate+0x104>)
   15566:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1556a:	f013 0f08 	tst.w	r3, #8
   1556e:	d003      	beq.n	15578 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   15570:	4620      	mov	r0, r4
   15572:	f00c fdf0 	bl	22156 <hci_le_read_remote_features>
		if (!err) {
   15576:	b1d0      	cbz	r0, 155ae <conn_auto_initiate+0x6e>
   15578:	f3bf 8f5b 	dmb	ish
   1557c:	6863      	ldr	r3, [r4, #4]
   1557e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15582:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15586:	d105      	bne.n	15594 <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   15588:	4b2e      	ldr	r3, [pc, #184]	; (15644 <conn_auto_initiate+0x104>)
   1558a:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1558e:	f013 0f01 	tst.w	r3, #1
   15592:	d10e      	bne.n	155b2 <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   15594:	4b2b      	ldr	r3, [pc, #172]	; (15644 <conn_auto_initiate+0x104>)
   15596:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1559a:	f013 0f20 	tst.w	r3, #32
   1559e:	d006      	beq.n	155ae <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   155a0:	4b28      	ldr	r3, [pc, #160]	; (15644 <conn_auto_initiate+0x104>)
   155a2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   155a6:	689b      	ldr	r3, [r3, #8]
   155a8:	f013 0f02 	tst.w	r3, #2
   155ac:	d128      	bne.n	15600 <conn_auto_initiate+0xc0>
}
   155ae:	b005      	add	sp, #20
   155b0:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   155b2:	2100      	movs	r1, #0
   155b4:	9100      	str	r1, [sp, #0]
   155b6:	2302      	movs	r3, #2
   155b8:	461a      	mov	r2, r3
   155ba:	4620      	mov	r0, r4
   155bc:	f00c fda7 	bl	2210e <bt_le_set_phy>
		if (!err) {
   155c0:	4601      	mov	r1, r0
   155c2:	b180      	cbz	r0, 155e6 <conn_auto_initiate+0xa6>
   155c4:	4b20      	ldr	r3, [pc, #128]	; (15648 <conn_auto_initiate+0x108>)
   155c6:	4a21      	ldr	r2, [pc, #132]	; (1564c <conn_auto_initiate+0x10c>)
   155c8:	1a9b      	subs	r3, r3, r2
   155ca:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set LE PHY (%d)", err);
   155cc:	f04f 0200 	mov.w	r2, #0
   155d0:	2001      	movs	r0, #1
   155d2:	f360 0202 	bfi	r2, r0, #0, #3
   155d6:	f36f 02c5 	bfc	r2, #3, #3
   155da:	f363 128f 	bfi	r2, r3, #6, #10
   155de:	481c      	ldr	r0, [pc, #112]	; (15650 <conn_auto_initiate+0x110>)
   155e0:	f7fc fb82 	bl	11ce8 <log_1>
   155e4:	e7d6      	b.n	15594 <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   155e6:	f3bf 8f5b 	dmb	ish
   155ea:	e855 3f00 	ldrex	r3, [r5]
   155ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   155f2:	e845 3200 	strex	r2, r3, [r5]
   155f6:	2a00      	cmp	r2, #0
   155f8:	d1f7      	bne.n	155ea <conn_auto_initiate+0xaa>
   155fa:	f3bf 8f5b 	dmb	ish
			return;
   155fe:	e7d6      	b.n	155ae <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15600:	f10d 010e 	add.w	r1, sp, #14
   15604:	a803      	add	r0, sp, #12
   15606:	f7ff fccf 	bl	14fa8 <hci_le_read_max_data_len>
			if (!err) {
   1560a:	2800      	cmp	r0, #0
   1560c:	d1cf      	bne.n	155ae <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   1560e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   15612:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15616:	4620      	mov	r0, r4
   15618:	f00c fd5d 	bl	220d6 <bt_le_set_data_len>
				if (err) {
   1561c:	4601      	mov	r1, r0
   1561e:	2800      	cmp	r0, #0
   15620:	d0c5      	beq.n	155ae <conn_auto_initiate+0x6e>
   15622:	4b09      	ldr	r3, [pc, #36]	; (15648 <conn_auto_initiate+0x108>)
   15624:	4a09      	ldr	r2, [pc, #36]	; (1564c <conn_auto_initiate+0x10c>)
   15626:	1a9b      	subs	r3, r3, r2
   15628:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
   1562a:	f04f 0200 	mov.w	r2, #0
   1562e:	2001      	movs	r0, #1
   15630:	f360 0202 	bfi	r2, r0, #0, #3
   15634:	f36f 02c5 	bfc	r2, #3, #3
   15638:	f363 128f 	bfi	r2, r3, #6, #10
   1563c:	4805      	ldr	r0, [pc, #20]	; (15654 <conn_auto_initiate+0x114>)
   1563e:	f7fc fb53 	bl	11ce8 <log_1>
		}
   15642:	e7b4      	b.n	155ae <conn_auto_initiate+0x6e>
   15644:	200002a8 	.word	0x200002a8
   15648:	00025db0 	.word	0x00025db0
   1564c:	00025d80 	.word	0x00025d80
   15650:	00026e1c 	.word	0x00026e1c
   15654:	00026e38 	.word	0x00026e38

00015658 <bt_hci_le_enh_conn_complete>:
{
   15658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1565c:	b084      	sub	sp, #16
   1565e:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15660:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   15664:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   15668:	4640      	mov	r0, r8
   1566a:	f7fe fe91 	bl	14390 <conn_handle_is_disconnected>
   1566e:	4606      	mov	r6, r0
	if (evt->status) {
   15670:	7820      	ldrb	r0, [r4, #0]
   15672:	b1d8      	cbz	r0, 156ac <bt_hci_le_enh_conn_complete+0x54>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15674:	2802      	cmp	r0, #2
   15676:	d013      	beq.n	156a0 <bt_hci_le_enh_conn_complete+0x48>
   15678:	4b6b      	ldr	r3, [pc, #428]	; (15828 <bt_hci_le_enh_conn_complete+0x1d0>)
   1567a:	4a6c      	ldr	r2, [pc, #432]	; (1582c <bt_hci_le_enh_conn_complete+0x1d4>)
   1567c:	1a9b      	subs	r3, r3, r2
   1567e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   15680:	f04f 0200 	mov.w	r2, #0
   15684:	2102      	movs	r1, #2
   15686:	f361 0202 	bfi	r2, r1, #0, #3
   1568a:	f36f 02c5 	bfc	r2, #3, #3
   1568e:	f363 128f 	bfi	r2, r3, #6, #10
   15692:	4601      	mov	r1, r0
   15694:	4866      	ldr	r0, [pc, #408]	; (15830 <bt_hci_le_enh_conn_complete+0x1d8>)
   15696:	f7fc fb27 	bl	11ce8 <log_1>
}
   1569a:	b004      	add	sp, #16
   1569c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			le_conn_complete_cancel();
   156a0:	f7ff fed8 	bl	15454 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   156a4:	2000      	movs	r0, #0
   156a6:	f000 fffd 	bl	166a4 <bt_le_scan_update>
			return;
   156aa:	e7f6      	b.n	1569a <bt_hci_le_enh_conn_complete+0x42>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   156ac:	7923      	ldrb	r3, [r4, #4]
   156ae:	3b02      	subs	r3, #2
   156b0:	b2db      	uxtb	r3, r3
   156b2:	2b01      	cmp	r3, #1
   156b4:	d961      	bls.n	1577a <bt_hci_le_enh_conn_complete+0x122>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   156b6:	78e3      	ldrb	r3, [r4, #3]
   156b8:	2b01      	cmp	r3, #1
   156ba:	d078      	beq.n	157ae <bt_hci_le_enh_conn_complete+0x156>
				bt_lookup_id_addr(id, &evt->peer_addr));
   156bc:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   156be:	4629      	mov	r1, r5
   156c0:	f00c fdd7 	bl	22272 <bt_lookup_id_addr>
   156c4:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   156c6:	6800      	ldr	r0, [r0, #0]
   156c8:	9000      	str	r0, [sp, #0]
   156ca:	889a      	ldrh	r2, [r3, #4]
   156cc:	799b      	ldrb	r3, [r3, #6]
   156ce:	f8ad 2004 	strh.w	r2, [sp, #4]
   156d2:	f88d 3006 	strb.w	r3, [sp, #6]
   156d6:	6860      	ldr	r0, [r4, #4]
   156d8:	9002      	str	r0, [sp, #8]
   156da:	8922      	ldrh	r2, [r4, #8]
   156dc:	7aa3      	ldrb	r3, [r4, #10]
   156de:	f8ad 200c 	strh.w	r2, [sp, #12]
   156e2:	f88d 300e 	strb.w	r3, [sp, #14]
	conn = find_pending_connect(evt->role, &id_addr);
   156e6:	4669      	mov	r1, sp
   156e8:	78e0      	ldrb	r0, [r4, #3]
   156ea:	f7fe ff23 	bl	14534 <find_pending_connect>
   156ee:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   156f0:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   156f2:	b963      	cbnz	r3, 1570e <bt_hci_le_enh_conn_complete+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   156f4:	4b4f      	ldr	r3, [pc, #316]	; (15834 <bt_hci_le_enh_conn_complete+0x1dc>)
   156f6:	f3bf 8f5b 	dmb	ish
   156fa:	e853 2f00 	ldrex	r2, [r3]
   156fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   15702:	e843 2100 	strex	r1, r2, [r3]
   15706:	2900      	cmp	r1, #0
   15708:	d1f7      	bne.n	156fa <bt_hci_le_enh_conn_complete+0xa2>
   1570a:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   1570e:	2d00      	cmp	r5, #0
   15710:	d051      	beq.n	157b6 <bt_hci_le_enh_conn_complete+0x15e>
	conn->handle = handle;
   15712:	462b      	mov	r3, r5
   15714:	f823 7b88 	strh.w	r7, [r3], #136
   15718:	9800      	ldr	r0, [sp, #0]
   1571a:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   1571e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   15722:	f89d 2006 	ldrb.w	r2, [sp, #6]
   15726:	8099      	strh	r1, [r3, #4]
   15728:	719a      	strb	r2, [r3, #6]
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1572a:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   1572e:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15732:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   15736:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1573a:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   1573e:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   15742:	78e3      	ldrb	r3, [r4, #3]
   15744:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   15746:	2200      	movs	r2, #0
   15748:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1574a:	2b00      	cmp	r3, #0
   1574c:	d04d      	beq.n	157ea <bt_hci_le_enh_conn_complete+0x192>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1574e:	2107      	movs	r1, #7
   15750:	4628      	mov	r0, r5
   15752:	f001 fc0b 	bl	16f6c <bt_conn_set_state>
	if (is_disconnected) {
   15756:	2e00      	cmp	r6, #0
   15758:	d161      	bne.n	1581e <bt_hci_le_enh_conn_complete+0x1c6>
	bt_conn_connected(conn);
   1575a:	4628      	mov	r0, r5
   1575c:	f00c ff35 	bl	225ca <bt_conn_connected>
	conn_auto_initiate(conn);
   15760:	4628      	mov	r0, r5
   15762:	f7ff feed 	bl	15540 <conn_auto_initiate>
	bt_conn_unref(conn);
   15766:	4628      	mov	r0, r5
   15768:	f00c fef6 	bl	22558 <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1576c:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1576e:	2b00      	cmp	r3, #0
   15770:	d193      	bne.n	1569a <bt_hci_le_enh_conn_complete+0x42>
		bt_le_scan_update(false);
   15772:	2000      	movs	r0, #0
   15774:	f000 ff96 	bl	166a4 <bt_le_scan_update>
   15778:	e78f      	b.n	1569a <bt_hci_le_enh_conn_complete+0x42>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1577a:	4623      	mov	r3, r4
   1577c:	f853 0f04 	ldr.w	r0, [r3, #4]!
   15780:	9000      	str	r0, [sp, #0]
   15782:	889a      	ldrh	r2, [r3, #4]
   15784:	799b      	ldrb	r3, [r3, #6]
   15786:	f8ad 2004 	strh.w	r2, [sp, #4]
   1578a:	f88d 3006 	strb.w	r3, [sp, #6]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1578e:	b2c0      	uxtb	r0, r0
   15790:	3802      	subs	r0, #2
   15792:	f88d 0000 	strb.w	r0, [sp]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   15796:	4623      	mov	r3, r4
	memcpy(dst, src, sizeof(*dst));
   15798:	f853 2f11 	ldr.w	r2, [r3, #17]!
   1579c:	f8cd 2009 	str.w	r2, [sp, #9]
   157a0:	889b      	ldrh	r3, [r3, #4]
   157a2:	f8ad 300d 	strh.w	r3, [sp, #13]
		peer_addr.type = BT_ADDR_LE_RANDOM;
   157a6:	2301      	movs	r3, #1
   157a8:	f88d 3008 	strb.w	r3, [sp, #8]
   157ac:	e79b      	b.n	156e6 <bt_hci_le_enh_conn_complete+0x8e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   157ae:	4b22      	ldr	r3, [pc, #136]	; (15838 <bt_hci_le_enh_conn_complete+0x1e0>)
   157b0:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   157b4:	e782      	b.n	156bc <bt_hci_le_enh_conn_complete+0x64>
   157b6:	4b1c      	ldr	r3, [pc, #112]	; (15828 <bt_hci_le_enh_conn_complete+0x1d0>)
   157b8:	4a1c      	ldr	r2, [pc, #112]	; (1582c <bt_hci_le_enh_conn_complete+0x1d4>)
   157ba:	1a9b      	subs	r3, r3, r2
   157bc:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   157be:	2201      	movs	r2, #1
   157c0:	f362 0502 	bfi	r5, r2, #0, #3
   157c4:	f36f 05c5 	bfc	r5, #3, #3
   157c8:	f363 158f 	bfi	r5, r3, #6, #10
   157cc:	1d20      	adds	r0, r4, #4
   157ce:	f7fe fc53 	bl	14078 <bt_addr_le_str_real>
   157d2:	f7fc f911 	bl	119f8 <z_log_strdup>
   157d6:	4601      	mov	r1, r0
   157d8:	462a      	mov	r2, r5
   157da:	4818      	ldr	r0, [pc, #96]	; (1583c <bt_hci_le_enh_conn_complete+0x1e4>)
   157dc:	f7fc fa84 	bl	11ce8 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   157e0:	211f      	movs	r1, #31
   157e2:	4640      	mov	r0, r8
   157e4:	f00c fc33 	bl	2204e <bt_hci_disconnect>
		return;
   157e8:	e757      	b.n	1569a <bt_hci_le_enh_conn_complete+0x42>
   157ea:	9802      	ldr	r0, [sp, #8]
   157ec:	f8c5 0096 	str.w	r0, [r5, #150]	; 0x96
   157f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   157f4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   157f8:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
   157fc:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
					&bt_dev.id_addr[conn->id]);
   15800:	7a2b      	ldrb	r3, [r5, #8]
   15802:	490d      	ldr	r1, [pc, #52]	; (15838 <bt_hci_le_enh_conn_complete+0x1e0>)
   15804:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   15808:	18ca      	adds	r2, r1, r3
   1580a:	58cb      	ldr	r3, [r1, r3]
   1580c:	f8c5 308f 	str.w	r3, [r5, #143]	; 0x8f
   15810:	8891      	ldrh	r1, [r2, #4]
   15812:	7993      	ldrb	r3, [r2, #6]
   15814:	f8a5 1093 	strh.w	r1, [r5, #147]	; 0x93
   15818:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
}
   1581c:	e797      	b.n	1574e <bt_hci_le_enh_conn_complete+0xf6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1581e:	2101      	movs	r1, #1
   15820:	4628      	mov	r0, r5
   15822:	f001 fba3 	bl	16f6c <bt_conn_set_state>
   15826:	e798      	b.n	1575a <bt_hci_le_enh_conn_complete+0x102>
   15828:	00025db0 	.word	0x00025db0
   1582c:	00025d80 	.word	0x00025d80
   15830:	00026e54 	.word	0x00026e54
   15834:	20000374 	.word	0x20000374
   15838:	200002a8 	.word	0x200002a8
   1583c:	00026e70 	.word	0x00026e70

00015840 <le_phy_update_complete>:
{
   15840:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   15842:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15844:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15848:	4628      	mov	r0, r5
   1584a:	f001 fb85 	bl	16f58 <bt_conn_lookup_handle>
	if (!conn) {
   1584e:	b1a0      	cbz	r0, 1587a <le_phy_update_complete+0x3a>
   15850:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   15852:	1d03      	adds	r3, r0, #4
   15854:	f3bf 8f5b 	dmb	ish
   15858:	e853 2f00 	ldrex	r2, [r3]
   1585c:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   15860:	e843 1000 	strex	r0, r1, [r3]
   15864:	2800      	cmp	r0, #0
   15866:	d1f7      	bne.n	15858 <le_phy_update_complete+0x18>
   15868:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1586c:	f012 0f80 	tst.w	r2, #128	; 0x80
   15870:	d115      	bne.n	1589e <le_phy_update_complete+0x5e>
	bt_conn_unref(conn);
   15872:	4620      	mov	r0, r4
   15874:	f00c fe70 	bl	22558 <bt_conn_unref>
}
   15878:	bd38      	pop	{r3, r4, r5, pc}
   1587a:	4b11      	ldr	r3, [pc, #68]	; (158c0 <le_phy_update_complete+0x80>)
   1587c:	4a11      	ldr	r2, [pc, #68]	; (158c4 <le_phy_update_complete+0x84>)
   1587e:	1a9b      	subs	r3, r3, r2
   15880:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15882:	f04f 0200 	mov.w	r2, #0
   15886:	2101      	movs	r1, #1
   15888:	f361 0202 	bfi	r2, r1, #0, #3
   1588c:	f36f 02c5 	bfc	r2, #3, #3
   15890:	f363 128f 	bfi	r2, r3, #6, #10
   15894:	4629      	mov	r1, r5
   15896:	480c      	ldr	r0, [pc, #48]	; (158c8 <le_phy_update_complete+0x88>)
   15898:	f7fc fa26 	bl	11ce8 <log_1>
		return;
   1589c:	e7ec      	b.n	15878 <le_phy_update_complete+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1589e:	f3bf 8f5b 	dmb	ish
   158a2:	e853 2f00 	ldrex	r2, [r3]
   158a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   158aa:	e843 2100 	strex	r1, r2, [r3]
   158ae:	2900      	cmp	r1, #0
   158b0:	d1f7      	bne.n	158a2 <le_phy_update_complete+0x62>
   158b2:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   158b6:	4620      	mov	r0, r4
   158b8:	f7ff fe42 	bl	15540 <conn_auto_initiate>
   158bc:	e7d9      	b.n	15872 <le_phy_update_complete+0x32>
   158be:	bf00      	nop
   158c0:	00025db0 	.word	0x00025db0
   158c4:	00025d80 	.word	0x00025d80
   158c8:	00026a5c 	.word	0x00026a5c

000158cc <le_remote_feat_complete>:
{
   158cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   158ce:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   158d0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   158d4:	4630      	mov	r0, r6
   158d6:	f001 fb3f 	bl	16f58 <bt_conn_lookup_handle>
	if (!conn) {
   158da:	b1e8      	cbz	r0, 15918 <le_remote_feat_complete+0x4c>
   158dc:	4605      	mov	r5, r0
	if (!evt->status) {
   158de:	7823      	ldrb	r3, [r4, #0]
   158e0:	b933      	cbnz	r3, 158f0 <le_remote_feat_complete+0x24>
   158e2:	f854 2f03 	ldr.w	r2, [r4, #3]!
   158e6:	6863      	ldr	r3, [r4, #4]
   158e8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   158ec:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   158f0:	1d2b      	adds	r3, r5, #4
   158f2:	f3bf 8f5b 	dmb	ish
   158f6:	e853 2f00 	ldrex	r2, [r3]
   158fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   158fe:	e843 2100 	strex	r1, r2, [r3]
   15902:	2900      	cmp	r1, #0
   15904:	d1f7      	bne.n	158f6 <le_remote_feat_complete+0x2a>
   15906:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1590a:	4628      	mov	r0, r5
   1590c:	f7ff fe18 	bl	15540 <conn_auto_initiate>
	bt_conn_unref(conn);
   15910:	4628      	mov	r0, r5
   15912:	f00c fe21 	bl	22558 <bt_conn_unref>
}
   15916:	bd70      	pop	{r4, r5, r6, pc}
   15918:	4b08      	ldr	r3, [pc, #32]	; (1593c <le_remote_feat_complete+0x70>)
   1591a:	4a09      	ldr	r2, [pc, #36]	; (15940 <le_remote_feat_complete+0x74>)
   1591c:	1a9b      	subs	r3, r3, r2
   1591e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15920:	f04f 0200 	mov.w	r2, #0
   15924:	2101      	movs	r1, #1
   15926:	f361 0202 	bfi	r2, r1, #0, #3
   1592a:	f36f 02c5 	bfc	r2, #3, #3
   1592e:	f363 128f 	bfi	r2, r3, #6, #10
   15932:	4631      	mov	r1, r6
   15934:	4803      	ldr	r0, [pc, #12]	; (15944 <le_remote_feat_complete+0x78>)
   15936:	f7fc f9d7 	bl	11ce8 <log_1>
		return;
   1593a:	e7ec      	b.n	15916 <le_remote_feat_complete+0x4a>
   1593c:	00025db0 	.word	0x00025db0
   15940:	00025d80 	.word	0x00025d80
   15944:	00026a5c 	.word	0x00026a5c

00015948 <le_conn_param_neg_reply>:
{
   15948:	b570      	push	{r4, r5, r6, lr}
   1594a:	4605      	mov	r5, r0
   1594c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1594e:	2103      	movs	r1, #3
   15950:	f242 0021 	movw	r0, #8225	; 0x2021
   15954:	f7ff fa20 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   15958:	b160      	cbz	r0, 15974 <le_conn_param_neg_reply+0x2c>
   1595a:	4606      	mov	r6, r0
   1595c:	2103      	movs	r1, #3
   1595e:	3008      	adds	r0, #8
   15960:	f00e f9ef 	bl	23d42 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   15964:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   15966:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   15968:	4631      	mov	r1, r6
   1596a:	f242 0021 	movw	r0, #8225	; 0x2021
   1596e:	f7ff fdad 	bl	154cc <bt_hci_cmd_send>
}
   15972:	bd70      	pop	{r4, r5, r6, pc}
   15974:	4b08      	ldr	r3, [pc, #32]	; (15998 <le_conn_param_neg_reply+0x50>)
   15976:	4a09      	ldr	r2, [pc, #36]	; (1599c <le_conn_param_neg_reply+0x54>)
   15978:	1a9b      	subs	r3, r3, r2
   1597a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   1597c:	f04f 0100 	mov.w	r1, #0
   15980:	2201      	movs	r2, #1
   15982:	f362 0102 	bfi	r1, r2, #0, #3
   15986:	f36f 01c5 	bfc	r1, #3, #3
   1598a:	f363 118f 	bfi	r1, r3, #6, #10
   1598e:	4804      	ldr	r0, [pc, #16]	; (159a0 <le_conn_param_neg_reply+0x58>)
   15990:	f7fc fa60 	bl	11e54 <log_0>
		return;
   15994:	e7ed      	b.n	15972 <le_conn_param_neg_reply+0x2a>
   15996:	bf00      	nop
   15998:	00025db0 	.word	0x00025db0
   1599c:	00025d80 	.word	0x00025d80
   159a0:	00026e8c 	.word	0x00026e8c

000159a4 <le_conn_param_req>:
{
   159a4:	b530      	push	{r4, r5, lr}
   159a6:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   159a8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   159aa:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   159ac:	885a      	ldrh	r2, [r3, #2]
   159ae:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   159b2:	889a      	ldrh	r2, [r3, #4]
   159b4:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   159b8:	88da      	ldrh	r2, [r3, #6]
   159ba:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   159be:	891b      	ldrh	r3, [r3, #8]
   159c0:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   159c4:	4620      	mov	r0, r4
   159c6:	f001 fac7 	bl	16f58 <bt_conn_lookup_handle>
	if (!conn) {
   159ca:	b168      	cbz	r0, 159e8 <le_conn_param_req+0x44>
   159cc:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   159ce:	4669      	mov	r1, sp
   159d0:	f001 fc7a 	bl	172c8 <le_param_req>
   159d4:	b9f0      	cbnz	r0, 15a14 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   159d6:	211e      	movs	r1, #30
   159d8:	4620      	mov	r0, r4
   159da:	f7ff ffb5 	bl	15948 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   159de:	4628      	mov	r0, r5
   159e0:	f00c fdba 	bl	22558 <bt_conn_unref>
}
   159e4:	b003      	add	sp, #12
   159e6:	bd30      	pop	{r4, r5, pc}
   159e8:	4b0d      	ldr	r3, [pc, #52]	; (15a20 <le_conn_param_req+0x7c>)
   159ea:	4a0e      	ldr	r2, [pc, #56]	; (15a24 <le_conn_param_req+0x80>)
   159ec:	1a9b      	subs	r3, r3, r2
   159ee:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   159f0:	f04f 0200 	mov.w	r2, #0
   159f4:	2101      	movs	r1, #1
   159f6:	f361 0202 	bfi	r2, r1, #0, #3
   159fa:	f36f 02c5 	bfc	r2, #3, #3
   159fe:	f363 128f 	bfi	r2, r3, #6, #10
   15a02:	4621      	mov	r1, r4
   15a04:	4808      	ldr	r0, [pc, #32]	; (15a28 <le_conn_param_req+0x84>)
   15a06:	f7fc f96f 	bl	11ce8 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   15a0a:	2102      	movs	r1, #2
   15a0c:	4620      	mov	r0, r4
   15a0e:	f7ff ff9b 	bl	15948 <le_conn_param_neg_reply>
		return;
   15a12:	e7e7      	b.n	159e4 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   15a14:	4669      	mov	r1, sp
   15a16:	4620      	mov	r0, r4
   15a18:	f00c fbf3 	bl	22202 <le_conn_param_req_reply>
   15a1c:	e7df      	b.n	159de <le_conn_param_req+0x3a>
   15a1e:	bf00      	nop
   15a20:	00025db0 	.word	0x00025db0
   15a24:	00025d80 	.word	0x00025d80
   15a28:	00026a5c 	.word	0x00026a5c

00015a2c <send_cmd>:
{
   15a2c:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   15a2e:	2200      	movs	r2, #0
   15a30:	2300      	movs	r3, #0
   15a32:	4837      	ldr	r0, [pc, #220]	; (15b10 <send_cmd+0xe4>)
   15a34:	f00e f90f 	bl	23c56 <net_buf_get>
	BT_ASSERT(buf);
   15a38:	4604      	mov	r4, r0
   15a3a:	b370      	cbz	r0, 15a9a <send_cmd+0x6e>
   15a3c:	4d35      	ldr	r5, [pc, #212]	; (15b14 <send_cmd+0xe8>)
   15a3e:	f04f 32ff 	mov.w	r2, #4294967295
   15a42:	f04f 33ff 	mov.w	r3, #4294967295
   15a46:	f505 708c 	add.w	r0, r5, #280	; 0x118
   15a4a:	f007 f957 	bl	1ccfc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   15a4e:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   15a52:	b1b3      	cbz	r3, 15a82 <send_cmd+0x56>
   15a54:	4b30      	ldr	r3, [pc, #192]	; (15b18 <send_cmd+0xec>)
   15a56:	4a31      	ldr	r2, [pc, #196]	; (15b1c <send_cmd+0xf0>)
   15a58:	1a9b      	subs	r3, r3, r2
   15a5a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   15a5c:	f04f 0100 	mov.w	r1, #0
   15a60:	2201      	movs	r2, #1
   15a62:	f362 0102 	bfi	r1, r2, #0, #3
   15a66:	f36f 01c5 	bfc	r1, #3, #3
   15a6a:	f363 118f 	bfi	r1, r3, #6, #10
   15a6e:	482c      	ldr	r0, [pc, #176]	; (15b20 <send_cmd+0xf4>)
   15a70:	f7fc f9f0 	bl	11e54 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   15a74:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   15a78:	f00e f919 	bl	23cae <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15a7c:	2300      	movs	r3, #0
   15a7e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   15a82:	4620      	mov	r0, r4
   15a84:	f00e f939 	bl	23cfa <net_buf_ref>
   15a88:	4b22      	ldr	r3, [pc, #136]	; (15b14 <send_cmd+0xe8>)
   15a8a:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   15a8e:	4620      	mov	r0, r4
   15a90:	f7ff fd12 	bl	154b8 <bt_send>
	if (err) {
   15a94:	4601      	mov	r1, r0
   15a96:	b970      	cbnz	r0, 15ab6 <send_cmd+0x8a>
}
   15a98:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   15a9a:	f640 132a 	movw	r3, #2346	; 0x92a
   15a9e:	4a21      	ldr	r2, [pc, #132]	; (15b24 <send_cmd+0xf8>)
   15aa0:	4921      	ldr	r1, [pc, #132]	; (15b28 <send_cmd+0xfc>)
   15aa2:	4822      	ldr	r0, [pc, #136]	; (15b2c <send_cmd+0x100>)
   15aa4:	f00b f964 	bl	20d70 <printk>
   15aa8:	4040      	eors	r0, r0
   15aaa:	f380 8811 	msr	BASEPRI, r0
   15aae:	f04f 0003 	mov.w	r0, #3
   15ab2:	df02      	svc	2
   15ab4:	e7c2      	b.n	15a3c <send_cmd+0x10>
   15ab6:	4b18      	ldr	r3, [pc, #96]	; (15b18 <send_cmd+0xec>)
   15ab8:	4a18      	ldr	r2, [pc, #96]	; (15b1c <send_cmd+0xf0>)
   15aba:	1a9b      	subs	r3, r3, r2
   15abc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   15abe:	f04f 0200 	mov.w	r2, #0
   15ac2:	2001      	movs	r0, #1
   15ac4:	f360 0202 	bfi	r2, r0, #0, #3
   15ac8:	f36f 02c5 	bfc	r2, #3, #3
   15acc:	f363 128f 	bfi	r2, r3, #6, #10
   15ad0:	4817      	ldr	r0, [pc, #92]	; (15b30 <send_cmd+0x104>)
   15ad2:	f7fc f909 	bl	11ce8 <log_1>
	z_impl_k_sem_give(sem);
   15ad6:	4d0f      	ldr	r5, [pc, #60]	; (15b14 <send_cmd+0xe8>)
   15ad8:	f505 708c 	add.w	r0, r5, #280	; 0x118
   15adc:	f007 f8e6 	bl	1ccac <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   15ae0:	4620      	mov	r0, r4
   15ae2:	f00d fffe 	bl	23ae2 <net_buf_id>
   15ae6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15aea:	4b12      	ldr	r3, [pc, #72]	; (15b34 <send_cmd+0x108>)
   15aec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15af0:	4622      	mov	r2, r4
   15af2:	211f      	movs	r1, #31
   15af4:	8840      	ldrh	r0, [r0, #2]
   15af6:	f7fe fe23 	bl	14740 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   15afa:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   15afe:	f00e f8d6 	bl	23cae <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15b02:	2300      	movs	r3, #0
   15b04:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
   15b08:	4620      	mov	r0, r4
   15b0a:	f00e f8d0 	bl	23cae <net_buf_unref>
   15b0e:	e7c3      	b.n	15a98 <send_cmd+0x6c>
   15b10:	200003f4 	.word	0x200003f4
   15b14:	200002a8 	.word	0x200002a8
   15b18:	00025db0 	.word	0x00025db0
   15b1c:	00025d80 	.word	0x00025d80
   15b20:	00026ea8 	.word	0x00026ea8
   15b24:	00026b68 	.word	0x00026b68
   15b28:	00027ac0 	.word	0x00027ac0
   15b2c:	00026bb8 	.word	0x00026bb8
   15b30:	00026df8 	.word	0x00026df8
   15b34:	200028d4 	.word	0x200028d4

00015b38 <process_events>:
{
   15b38:	b570      	push	{r4, r5, r6, lr}
   15b3a:	4604      	mov	r4, r0
   15b3c:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   15b3e:	e013      	b.n	15b68 <process_events+0x30>
				send_cmd();
   15b40:	f7ff ff74 	bl	15a2c <send_cmd>
   15b44:	e00e      	b.n	15b64 <process_events+0x2c>
   15b46:	4b12      	ldr	r3, [pc, #72]	; (15b90 <process_events+0x58>)
   15b48:	4a12      	ldr	r2, [pc, #72]	; (15b94 <process_events+0x5c>)
   15b4a:	1a9b      	subs	r3, r3, r2
   15b4c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   15b4e:	2202      	movs	r2, #2
   15b50:	f362 0602 	bfi	r6, r2, #0, #3
   15b54:	f36f 06c5 	bfc	r6, #3, #3
   15b58:	f363 168f 	bfi	r6, r3, #6, #10
   15b5c:	4632      	mov	r2, r6
   15b5e:	480e      	ldr	r0, [pc, #56]	; (15b98 <process_events+0x60>)
   15b60:	f7fc f8c2 	bl	11ce8 <log_1>
	for (; count; ev++, count--) {
   15b64:	3414      	adds	r4, #20
   15b66:	3d01      	subs	r5, #1
   15b68:	b185      	cbz	r5, 15b8c <process_events+0x54>
		switch (ev->state) {
   15b6a:	68e1      	ldr	r1, [r4, #12]
   15b6c:	f3c1 3145 	ubfx	r1, r1, #13, #6
   15b70:	2901      	cmp	r1, #1
   15b72:	d9f7      	bls.n	15b64 <process_events+0x2c>
   15b74:	2904      	cmp	r1, #4
   15b76:	d1e6      	bne.n	15b46 <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15b78:	7b23      	ldrb	r3, [r4, #12]
   15b7a:	2b00      	cmp	r3, #0
   15b7c:	d0e0      	beq.n	15b40 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   15b7e:	2b01      	cmp	r3, #1
   15b80:	d1f0      	bne.n	15b64 <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   15b82:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   15b84:	3838      	subs	r0, #56	; 0x38
   15b86:	f001 fcab 	bl	174e0 <bt_conn_process_tx>
   15b8a:	e7eb      	b.n	15b64 <process_events+0x2c>
}
   15b8c:	bd70      	pop	{r4, r5, r6, pc}
   15b8e:	bf00      	nop
   15b90:	00025db0 	.word	0x00025db0
   15b94:	00025d80 	.word	0x00025d80
   15b98:	00026ec4 	.word	0x00026ec4

00015b9c <hci_tx_thread>:
{
   15b9c:	b538      	push	{r3, r4, r5, lr}
   15b9e:	e005      	b.n	15bac <hci_tx_thread+0x10>
		process_events(events, ev_count);
   15ba0:	4621      	mov	r1, r4
   15ba2:	4813      	ldr	r0, [pc, #76]	; (15bf0 <hci_tx_thread+0x54>)
   15ba4:	f7ff ffc8 	bl	15b38 <process_events>
	z_impl_k_yield();
   15ba8:	f007 fd9c 	bl	1d6e4 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   15bac:	4d10      	ldr	r5, [pc, #64]	; (15bf0 <hci_tx_thread+0x54>)
   15bae:	68eb      	ldr	r3, [r5, #12]
   15bb0:	f36f 3352 	bfc	r3, #13, #6
   15bb4:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15bb6:	f105 0014 	add.w	r0, r5, #20
   15bba:	f001 f9ab 	bl	16f14 <bt_conn_prepare_events>
   15bbe:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   15bc0:	f04f 32ff 	mov.w	r2, #4294967295
   15bc4:	f04f 33ff 	mov.w	r3, #4294967295
   15bc8:	4621      	mov	r1, r4
   15bca:	4628      	mov	r0, r5
   15bcc:	f008 f8e2 	bl	1dd94 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   15bd0:	2800      	cmp	r0, #0
   15bd2:	d0e5      	beq.n	15ba0 <hci_tx_thread+0x4>
   15bd4:	f640 1393 	movw	r3, #2451	; 0x993
   15bd8:	4a06      	ldr	r2, [pc, #24]	; (15bf4 <hci_tx_thread+0x58>)
   15bda:	4907      	ldr	r1, [pc, #28]	; (15bf8 <hci_tx_thread+0x5c>)
   15bdc:	4807      	ldr	r0, [pc, #28]	; (15bfc <hci_tx_thread+0x60>)
   15bde:	f00b f8c7 	bl	20d70 <printk>
   15be2:	4040      	eors	r0, r0
   15be4:	f380 8811 	msr	BASEPRI, r0
   15be8:	f04f 0003 	mov.w	r0, #3
   15bec:	df02      	svc	2
   15bee:	e7d7      	b.n	15ba0 <hci_tx_thread+0x4>
   15bf0:	2000043c 	.word	0x2000043c
   15bf4:	00026b68 	.word	0x00026b68
   15bf8:	00026cac 	.word	0x00026cac
   15bfc:	00026bb8 	.word	0x00026bb8

00015c00 <hci_event_prio>:
{
   15c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c04:	b084      	sub	sp, #16
   15c06:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15c08:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15c0c:	4628      	mov	r0, r5
   15c0e:	f00e f8d1 	bl	23db4 <net_buf_simple_headroom>
   15c12:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   15c16:	89a3      	ldrh	r3, [r4, #12]
   15c18:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15c1c:	2b01      	cmp	r3, #1
   15c1e:	d915      	bls.n	15c4c <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   15c20:	2102      	movs	r1, #2
   15c22:	4628      	mov	r0, r5
   15c24:	f00e f8ae 	bl	23d84 <net_buf_simple_pull_mem>
   15c28:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15c2a:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   15c2c:	3b05      	subs	r3, #5
   15c2e:	2b15      	cmp	r3, #21
   15c30:	d81c      	bhi.n	15c6c <hci_event_prio+0x6c>
   15c32:	e8df f003 	tbb	[pc, r3]
   15c36:	1b19      	.short	0x1b19
   15c38:	1b1b1b1b 	.word	0x1b1b1b1b
   15c3c:	3f1b1b1b 	.word	0x3f1b1b1b
   15c40:	1b1b1b3f 	.word	0x1b1b1b3f
   15c44:	1b1b1b3f 	.word	0x1b1b1b3f
   15c48:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15c4c:	f640 5327 	movw	r3, #3367	; 0xd27
   15c50:	4a3b      	ldr	r2, [pc, #236]	; (15d40 <hci_event_prio+0x140>)
   15c52:	493c      	ldr	r1, [pc, #240]	; (15d44 <hci_event_prio+0x144>)
   15c54:	483c      	ldr	r0, [pc, #240]	; (15d48 <hci_event_prio+0x148>)
   15c56:	f00b f88b 	bl	20d70 <printk>
   15c5a:	4040      	eors	r0, r0
   15c5c:	f380 8811 	msr	BASEPRI, r0
   15c60:	f04f 0003 	mov.w	r0, #3
   15c64:	df02      	svc	2
   15c66:	e7db      	b.n	15c20 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15c68:	2603      	movs	r6, #3
   15c6a:	e000      	b.n	15c6e <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   15c6c:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15c6e:	f016 0f01 	tst.w	r6, #1
   15c72:	d021      	beq.n	15cb8 <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15c74:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   15c76:	2300      	movs	r3, #0
   15c78:	2b04      	cmp	r3, #4
   15c7a:	d83f      	bhi.n	15cfc <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   15c7c:	4a33      	ldr	r2, [pc, #204]	; (15d4c <hci_event_prio+0x14c>)
   15c7e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   15c82:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   15c86:	4295      	cmp	r5, r2
   15c88:	d124      	bne.n	15cd4 <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   15c8a:	89a1      	ldrh	r1, [r4, #12]
   15c8c:	7843      	ldrb	r3, [r0, #1]
   15c8e:	4299      	cmp	r1, r3
   15c90:	d322      	bcc.n	15cd8 <hci_event_prio+0xd8>
		handler->handler(buf);
   15c92:	6843      	ldr	r3, [r0, #4]
   15c94:	4620      	mov	r0, r4
   15c96:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15c98:	f016 0f02 	tst.w	r6, #2
   15c9c:	d04c      	beq.n	15d38 <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   15c9e:	6923      	ldr	r3, [r4, #16]
   15ca0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   15ca4:	4413      	add	r3, r2
   15ca6:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   15ca8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   15cac:	81a3      	strh	r3, [r4, #12]
}
   15cae:	b004      	add	sp, #16
   15cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   15cb4:	2601      	movs	r6, #1
   15cb6:	e7da      	b.n	15c6e <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15cb8:	f640 532b 	movw	r3, #3371	; 0xd2b
   15cbc:	4a20      	ldr	r2, [pc, #128]	; (15d40 <hci_event_prio+0x140>)
   15cbe:	4924      	ldr	r1, [pc, #144]	; (15d50 <hci_event_prio+0x150>)
   15cc0:	4821      	ldr	r0, [pc, #132]	; (15d48 <hci_event_prio+0x148>)
   15cc2:	f00b f855 	bl	20d70 <printk>
   15cc6:	4040      	eors	r0, r0
   15cc8:	f380 8811 	msr	BASEPRI, r0
   15ccc:	f04f 0003 	mov.w	r0, #3
   15cd0:	df02      	svc	2
   15cd2:	e7cf      	b.n	15c74 <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   15cd4:	3301      	adds	r3, #1
   15cd6:	e7cf      	b.n	15c78 <hci_event_prio+0x78>
   15cd8:	4a1e      	ldr	r2, [pc, #120]	; (15d54 <hci_event_prio+0x154>)
   15cda:	4b1f      	ldr	r3, [pc, #124]	; (15d58 <hci_event_prio+0x158>)
   15cdc:	1ad2      	subs	r2, r2, r3
   15cde:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15ce0:	f04f 0300 	mov.w	r3, #0
   15ce4:	2001      	movs	r0, #1
   15ce6:	f360 0302 	bfi	r3, r0, #0, #3
   15cea:	f36f 03c5 	bfc	r3, #3, #3
   15cee:	f362 138f 	bfi	r3, r2, #6, #10
   15cf2:	462a      	mov	r2, r5
   15cf4:	4819      	ldr	r0, [pc, #100]	; (15d5c <hci_event_prio+0x15c>)
   15cf6:	f7fc f82d 	bl	11d54 <log_2>
			return;
   15cfa:	e7cd      	b.n	15c98 <hci_event_prio+0x98>
   15cfc:	4b15      	ldr	r3, [pc, #84]	; (15d54 <hci_event_prio+0x154>)
   15cfe:	4a16      	ldr	r2, [pc, #88]	; (15d58 <hci_event_prio+0x158>)
   15d00:	1a9b      	subs	r3, r3, r2
   15d02:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15d04:	f04f 0700 	mov.w	r7, #0
   15d08:	2202      	movs	r2, #2
   15d0a:	f362 0702 	bfi	r7, r2, #0, #3
   15d0e:	f36f 07c5 	bfc	r7, #3, #3
   15d12:	f363 178f 	bfi	r7, r3, #6, #10
   15d16:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   15d1a:	4641      	mov	r1, r8
   15d1c:	68a0      	ldr	r0, [r4, #8]
   15d1e:	f7fe f983 	bl	14028 <bt_hex_real>
   15d22:	f7fb fe69 	bl	119f8 <z_log_strdup>
   15d26:	4603      	mov	r3, r0
   15d28:	f8ad 7000 	strh.w	r7, [sp]
   15d2c:	4642      	mov	r2, r8
   15d2e:	4629      	mov	r1, r5
   15d30:	480b      	ldr	r0, [pc, #44]	; (15d60 <hci_event_prio+0x160>)
   15d32:	f7fb ff9b 	bl	11c6c <log_3>
   15d36:	e7af      	b.n	15c98 <hci_event_prio+0x98>
		net_buf_unref(buf);
   15d38:	4620      	mov	r0, r4
   15d3a:	f00d ffb8 	bl	23cae <net_buf_unref>
}
   15d3e:	e7b6      	b.n	15cae <hci_event_prio+0xae>
   15d40:	00026b68 	.word	0x00026b68
   15d44:	00026b9c 	.word	0x00026b9c
   15d48:	00026bb8 	.word	0x00026bb8
   15d4c:	00027010 	.word	0x00027010
   15d50:	00026ee8 	.word	0x00026ee8
   15d54:	00025db0 	.word	0x00025db0
   15d58:	00025d80 	.word	0x00025d80
   15d5c:	00026c20 	.word	0x00026c20
   15d60:	00026c44 	.word	0x00026c44

00015d64 <bt_recv>:
{
   15d64:	b538      	push	{r3, r4, r5, lr}
   15d66:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15d68:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15d6a:	2d01      	cmp	r5, #1
   15d6c:	d007      	beq.n	15d7e <bt_recv+0x1a>
   15d6e:	2d03      	cmp	r5, #3
   15d70:	d12c      	bne.n	15dcc <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   15d72:	4601      	mov	r1, r0
   15d74:	4821      	ldr	r0, [pc, #132]	; (15dfc <bt_recv+0x98>)
   15d76:	f00d ff8d 	bl	23c94 <net_buf_put>
		return 0;
   15d7a:	2000      	movs	r0, #0
}
   15d7c:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   15d7e:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15d80:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   15d82:	3b05      	subs	r3, #5
   15d84:	2b15      	cmp	r3, #21
   15d86:	d80e      	bhi.n	15da6 <bt_recv+0x42>
   15d88:	e8df f003 	tbb	[pc, r3]
   15d8c:	0d0d0d0b 	.word	0x0d0d0d0b
   15d90:	0d0d0d0d 	.word	0x0d0d0d0d
   15d94:	0d0e0e0d 	.word	0x0d0e0e0d
   15d98:	0d0e0d0d 	.word	0x0d0e0d0d
   15d9c:	0d0d0d0d 	.word	0x0d0d0d0d
   15da0:	0e0d      	.short	0x0e0d
   15da2:	2503      	movs	r5, #3
   15da4:	e000      	b.n	15da8 <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   15da6:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15da8:	f015 0f01 	tst.w	r5, #1
   15dac:	d104      	bne.n	15db8 <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15dae:	f015 0f02 	tst.w	r5, #2
   15db2:	d105      	bne.n	15dc0 <bt_recv+0x5c>
		return 0;
   15db4:	2000      	movs	r0, #0
   15db6:	e7e1      	b.n	15d7c <bt_recv+0x18>
			hci_event_prio(buf);
   15db8:	4620      	mov	r0, r4
   15dba:	f7ff ff21 	bl	15c00 <hci_event_prio>
   15dbe:	e7f6      	b.n	15dae <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   15dc0:	4621      	mov	r1, r4
   15dc2:	480e      	ldr	r0, [pc, #56]	; (15dfc <bt_recv+0x98>)
   15dc4:	f00d ff66 	bl	23c94 <net_buf_put>
		return 0;
   15dc8:	2000      	movs	r0, #0
   15dca:	e7d7      	b.n	15d7c <bt_recv+0x18>
   15dcc:	4b0c      	ldr	r3, [pc, #48]	; (15e00 <bt_recv+0x9c>)
   15dce:	4a0d      	ldr	r2, [pc, #52]	; (15e04 <bt_recv+0xa0>)
   15dd0:	1a9b      	subs	r3, r3, r2
   15dd2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15dd4:	f04f 0200 	mov.w	r2, #0
   15dd8:	2101      	movs	r1, #1
   15dda:	f361 0202 	bfi	r2, r1, #0, #3
   15dde:	f36f 02c5 	bfc	r2, #3, #3
   15de2:	f363 128f 	bfi	r2, r3, #6, #10
   15de6:	4629      	mov	r1, r5
   15de8:	4807      	ldr	r0, [pc, #28]	; (15e08 <bt_recv+0xa4>)
   15dea:	f7fb ff7d 	bl	11ce8 <log_1>
		net_buf_unref(buf);
   15dee:	4620      	mov	r0, r4
   15df0:	f00d ff5d 	bl	23cae <net_buf_unref>
		return -EINVAL;
   15df4:	f06f 0015 	mvn.w	r0, #21
   15df8:	e7c0      	b.n	15d7c <bt_recv+0x18>
   15dfa:	bf00      	nop
   15dfc:	200003dc 	.word	0x200003dc
   15e00:	00025db0 	.word	0x00025db0
   15e04:	00025d80 	.word	0x00025d80
   15e08:	00026f04 	.word	0x00026f04

00015e0c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15e0c:	4b0a      	ldr	r3, [pc, #40]	; (15e38 <bt_hci_driver_register+0x2c>)
   15e0e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   15e12:	b943      	cbnz	r3, 15e26 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   15e14:	68c3      	ldr	r3, [r0, #12]
   15e16:	b14b      	cbz	r3, 15e2c <bt_hci_driver_register+0x20>
   15e18:	6903      	ldr	r3, [r0, #16]
   15e1a:	b153      	cbz	r3, 15e32 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   15e1c:	4b06      	ldr	r3, [pc, #24]	; (15e38 <bt_hci_driver_register+0x2c>)
   15e1e:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	return 0;
   15e22:	2000      	movs	r0, #0
   15e24:	4770      	bx	lr
		return -EALREADY;
   15e26:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15e2a:	4770      	bx	lr
		return -EINVAL;
   15e2c:	f06f 0015 	mvn.w	r0, #21
   15e30:	4770      	bx	lr
   15e32:	f06f 0015 	mvn.w	r0, #21
}
   15e36:	4770      	bx	lr
   15e38:	200002a8 	.word	0x200002a8

00015e3c <bt_finalize_init>:
{
   15e3c:	b508      	push	{r3, lr}
   15e3e:	4b08      	ldr	r3, [pc, #32]	; (15e60 <bt_finalize_init+0x24>)
   15e40:	f3bf 8f5b 	dmb	ish
   15e44:	e853 2f00 	ldrex	r2, [r3]
   15e48:	f042 0202 	orr.w	r2, r2, #2
   15e4c:	e843 2100 	strex	r1, r2, [r3]
   15e50:	2900      	cmp	r1, #0
   15e52:	d1f7      	bne.n	15e44 <bt_finalize_init+0x8>
   15e54:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   15e58:	2000      	movs	r0, #0
   15e5a:	f000 fc23 	bl	166a4 <bt_le_scan_update>
}
   15e5e:	bd08      	pop	{r3, pc}
   15e60:	20000374 	.word	0x20000374

00015e64 <init_work>:
{
   15e64:	b508      	push	{r3, lr}
	err = bt_init();
   15e66:	f00c f9f1 	bl	2224c <bt_init>
	if (ready_cb) {
   15e6a:	4b02      	ldr	r3, [pc, #8]	; (15e74 <init_work+0x10>)
   15e6c:	681b      	ldr	r3, [r3, #0]
   15e6e:	b103      	cbz	r3, 15e72 <init_work+0xe>
		ready_cb(err);
   15e70:	4798      	blx	r3
}
   15e72:	bd08      	pop	{r3, pc}
   15e74:	200028f0 	.word	0x200028f0

00015e78 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   15e78:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15e7c:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   15e7e:	4b41      	ldr	r3, [pc, #260]	; (15f84 <bt_enable+0x10c>)
   15e80:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   15e84:	2b00      	cmp	r3, #0
   15e86:	d050      	beq.n	15f2a <bt_enable+0xb2>
   15e88:	4605      	mov	r5, r0
   15e8a:	4b3f      	ldr	r3, [pc, #252]	; (15f88 <bt_enable+0x110>)
   15e8c:	f3bf 8f5b 	dmb	ish
   15e90:	e853 2f00 	ldrex	r2, [r3]
   15e94:	f042 0101 	orr.w	r1, r2, #1
   15e98:	e843 1000 	strex	r0, r1, [r3]
   15e9c:	2800      	cmp	r0, #0
   15e9e:	d1f7      	bne.n	15e90 <bt_enable+0x18>
   15ea0:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15ea4:	f012 0f01 	tst.w	r2, #1
   15ea8:	d168      	bne.n	15f7c <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   15eaa:	4b38      	ldr	r3, [pc, #224]	; (15f8c <bt_enable+0x114>)
   15eac:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   15eae:	f04f 0800 	mov.w	r8, #0
   15eb2:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15eb6:	4e36      	ldr	r6, [pc, #216]	; (15f90 <bt_enable+0x118>)
   15eb8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   15ebc:	2400      	movs	r4, #0
   15ebe:	9404      	str	r4, [sp, #16]
   15ec0:	f06f 0308 	mvn.w	r3, #8
   15ec4:	9303      	str	r3, [sp, #12]
   15ec6:	9402      	str	r4, [sp, #8]
   15ec8:	9401      	str	r4, [sp, #4]
   15eca:	9400      	str	r4, [sp, #0]
   15ecc:	4b31      	ldr	r3, [pc, #196]	; (15f94 <bt_enable+0x11c>)
   15ece:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   15ed2:	4931      	ldr	r1, [pc, #196]	; (15f98 <bt_enable+0x120>)
   15ed4:	4630      	mov	r0, r6
   15ed6:	f00e ffdf 	bl	24e98 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15eda:	4930      	ldr	r1, [pc, #192]	; (15f9c <bt_enable+0x124>)
   15edc:	4630      	mov	r0, r6
   15ede:	f006 fced 	bl	1c8bc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15ee2:	4e2f      	ldr	r6, [pc, #188]	; (15fa0 <bt_enable+0x128>)
   15ee4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   15ee8:	9404      	str	r4, [sp, #16]
   15eea:	f06f 0307 	mvn.w	r3, #7
   15eee:	9303      	str	r3, [sp, #12]
   15ef0:	9402      	str	r4, [sp, #8]
   15ef2:	9401      	str	r4, [sp, #4]
   15ef4:	9400      	str	r4, [sp, #0]
   15ef6:	4b2b      	ldr	r3, [pc, #172]	; (15fa4 <bt_enable+0x12c>)
   15ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15efc:	492a      	ldr	r1, [pc, #168]	; (15fa8 <bt_enable+0x130>)
   15efe:	4630      	mov	r0, r6
   15f00:	f00e ffca 	bl	24e98 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15f04:	4929      	ldr	r1, [pc, #164]	; (15fac <bt_enable+0x134>)
   15f06:	4630      	mov	r0, r6
   15f08:	f006 fcd8 	bl	1c8bc <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   15f0c:	4b1d      	ldr	r3, [pc, #116]	; (15f84 <bt_enable+0x10c>)
   15f0e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   15f12:	68db      	ldr	r3, [r3, #12]
   15f14:	4798      	blx	r3
	if (err) {
   15f16:	4604      	mov	r4, r0
   15f18:	b9d0      	cbnz	r0, 15f50 <bt_enable+0xd8>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   15f1a:	b35d      	cbz	r5, 15f74 <bt_enable+0xfc>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   15f1c:	4824      	ldr	r0, [pc, #144]	; (15fb0 <bt_enable+0x138>)
   15f1e:	f007 f88f 	bl	1d040 <k_work_submit>
	return 0;
}
   15f22:	4620      	mov	r0, r4
   15f24:	b008      	add	sp, #32
   15f26:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   15f2a:	4b22      	ldr	r3, [pc, #136]	; (15fb4 <bt_enable+0x13c>)
   15f2c:	4a22      	ldr	r2, [pc, #136]	; (15fb8 <bt_enable+0x140>)
   15f2e:	1a9b      	subs	r3, r3, r2
   15f30:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   15f32:	f04f 0100 	mov.w	r1, #0
   15f36:	2201      	movs	r2, #1
   15f38:	f362 0102 	bfi	r1, r2, #0, #3
   15f3c:	f36f 01c5 	bfc	r1, #3, #3
   15f40:	f363 118f 	bfi	r1, r3, #6, #10
   15f44:	481d      	ldr	r0, [pc, #116]	; (15fbc <bt_enable+0x144>)
   15f46:	f7fb ff85 	bl	11e54 <log_0>
		return -ENODEV;
   15f4a:	f06f 0412 	mvn.w	r4, #18
   15f4e:	e7e8      	b.n	15f22 <bt_enable+0xaa>
   15f50:	4b18      	ldr	r3, [pc, #96]	; (15fb4 <bt_enable+0x13c>)
   15f52:	4a19      	ldr	r2, [pc, #100]	; (15fb8 <bt_enable+0x140>)
   15f54:	1a9b      	subs	r3, r3, r2
   15f56:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   15f58:	f04f 0200 	mov.w	r2, #0
   15f5c:	2101      	movs	r1, #1
   15f5e:	f361 0202 	bfi	r2, r1, #0, #3
   15f62:	f36f 02c5 	bfc	r2, #3, #3
   15f66:	f363 128f 	bfi	r2, r3, #6, #10
   15f6a:	4601      	mov	r1, r0
   15f6c:	4814      	ldr	r0, [pc, #80]	; (15fc0 <bt_enable+0x148>)
   15f6e:	f7fb febb 	bl	11ce8 <log_1>
		return err;
   15f72:	e7d6      	b.n	15f22 <bt_enable+0xaa>
		return bt_init();
   15f74:	f00c f96a 	bl	2224c <bt_init>
   15f78:	4604      	mov	r4, r0
   15f7a:	e7d2      	b.n	15f22 <bt_enable+0xaa>
		return -EALREADY;
   15f7c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15f80:	e7cf      	b.n	15f22 <bt_enable+0xaa>
   15f82:	bf00      	nop
   15f84:	200002a8 	.word	0x200002a8
   15f88:	20000374 	.word	0x20000374
   15f8c:	200028f0 	.word	0x200028f0
   15f90:	20001788 	.word	0x20001788
   15f94:	00015b9d 	.word	0x00015b9d
   15f98:	20004320 	.word	0x20004320
   15f9c:	00026f34 	.word	0x00026f34
   15fa0:	200016d0 	.word	0x200016d0
   15fa4:	00014d11 	.word	0x00014d11
   15fa8:	20003f00 	.word	0x20003f00
   15fac:	00026f3c 	.word	0x00026f3c
   15fb0:	20000364 	.word	0x20000364
   15fb4:	00025db0 	.word	0x00025db0
   15fb8:	00025d80 	.word	0x00025d80
   15fbc:	00026f18 	.word	0x00026f18
   15fc0:	00026f44 	.word	0x00026f44

00015fc4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   15fc4:	4800      	ldr	r0, [pc, #0]	; (15fc8 <bt_get_name+0x4>)
   15fc6:	4770      	bx	lr
   15fc8:	00026f60 	.word	0x00026f60

00015fcc <bt_le_filter_accept_list_add>:
	}
}

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_filter_accept_list_add(const bt_addr_le_t *addr)
{
   15fcc:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15fce:	f3bf 8f5b 	dmb	ish
   15fd2:	4b1d      	ldr	r3, [pc, #116]	; (16048 <bt_le_filter_accept_list_add+0x7c>)
   15fd4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   15fd8:	f3bf 8f5b 	dmb	ish
	struct bt_hci_cp_le_add_dev_to_fal *cp;
	struct net_buf *buf;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15fdc:	f013 0f02 	tst.w	r3, #2
   15fe0:	d02c      	beq.n	1603c <bt_le_filter_accept_list_add+0x70>
   15fe2:	4604      	mov	r4, r0
		return -EAGAIN;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_FAL, sizeof(*cp));
   15fe4:	2107      	movs	r1, #7
   15fe6:	f242 0011 	movw	r0, #8209	; 0x2011
   15fea:	f7fe fed5 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   15fee:	4605      	mov	r5, r0
   15ff0:	b338      	cbz	r0, 16042 <bt_le_filter_accept_list_add+0x76>
	return net_buf_simple_add(&buf->b, len);
   15ff2:	2107      	movs	r1, #7
   15ff4:	3008      	adds	r0, #8
   15ff6:	f00d fea4 	bl	23d42 <net_buf_simple_add>
   15ffa:	6823      	ldr	r3, [r4, #0]
   15ffc:	6003      	str	r3, [r0, #0]
   15ffe:	88a2      	ldrh	r2, [r4, #4]
   16000:	79a3      	ldrb	r3, [r4, #6]
   16002:	8082      	strh	r2, [r0, #4]
   16004:	7183      	strb	r3, [r0, #6]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->addr, addr);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_FAL, buf, NULL);
   16006:	2200      	movs	r2, #0
   16008:	4629      	mov	r1, r5
   1600a:	f242 0011 	movw	r0, #8209	; 0x2011
   1600e:	f7fe feff 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   16012:	4604      	mov	r4, r0
   16014:	b908      	cbnz	r0, 1601a <bt_le_filter_accept_list_add+0x4e>

		return err;
	}

	return 0;
}
   16016:	4620      	mov	r0, r4
   16018:	bd38      	pop	{r3, r4, r5, pc}
   1601a:	4b0c      	ldr	r3, [pc, #48]	; (1604c <bt_le_filter_accept_list_add+0x80>)
   1601c:	4a0c      	ldr	r2, [pc, #48]	; (16050 <bt_le_filter_accept_list_add+0x84>)
   1601e:	1a9b      	subs	r3, r3, r2
   16020:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to add device to filter accept list");
   16022:	f04f 0100 	mov.w	r1, #0
   16026:	2201      	movs	r2, #1
   16028:	f362 0102 	bfi	r1, r2, #0, #3
   1602c:	f36f 01c5 	bfc	r1, #3, #3
   16030:	f363 118f 	bfi	r1, r3, #6, #10
   16034:	4807      	ldr	r0, [pc, #28]	; (16054 <bt_le_filter_accept_list_add+0x88>)
   16036:	f7fb ff0d 	bl	11e54 <log_0>
		return err;
   1603a:	e7ec      	b.n	16016 <bt_le_filter_accept_list_add+0x4a>
		return -EAGAIN;
   1603c:	f06f 040a 	mvn.w	r4, #10
   16040:	e7e9      	b.n	16016 <bt_le_filter_accept_list_add+0x4a>
		return -ENOBUFS;
   16042:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16046:	e7e6      	b.n	16016 <bt_le_filter_accept_list_add+0x4a>
   16048:	200002a8 	.word	0x200002a8
   1604c:	00025db0 	.word	0x00025db0
   16050:	00025d80 	.word	0x00025d80
   16054:	00026f68 	.word	0x00026f68

00016058 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16058:	b570      	push	{r4, r5, r6, lr}
   1605a:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1605c:	2400      	movs	r4, #0
   1605e:	4b0a      	ldr	r3, [pc, #40]	; (16088 <id_find+0x30>)
   16060:	79db      	ldrb	r3, [r3, #7]
   16062:	42a3      	cmp	r3, r4
   16064:	d90c      	bls.n	16080 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   16066:	4626      	mov	r6, r4
   16068:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1606c:	2207      	movs	r2, #7
   1606e:	4b06      	ldr	r3, [pc, #24]	; (16088 <id_find+0x30>)
   16070:	4419      	add	r1, r3
   16072:	4628      	mov	r0, r5
   16074:	f00f fca1 	bl	259ba <memcmp>
   16078:	b120      	cbz	r0, 16084 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   1607a:	3401      	adds	r4, #1
   1607c:	b2e4      	uxtb	r4, r4
   1607e:	e7ee      	b.n	1605e <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   16080:	f06f 0601 	mvn.w	r6, #1
}
   16084:	4630      	mov	r0, r6
   16086:	bd70      	pop	{r4, r5, r6, pc}
   16088:	200002a8 	.word	0x200002a8

0001608c <set_random_address>:
{
   1608c:	b538      	push	{r3, r4, r5, lr}
   1608e:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   16090:	2206      	movs	r2, #6
   16092:	4913      	ldr	r1, [pc, #76]	; (160e0 <set_random_address+0x54>)
   16094:	f00f fc91 	bl	259ba <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16098:	b900      	cbnz	r0, 1609c <set_random_address+0x10>
}
   1609a:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1609c:	2106      	movs	r1, #6
   1609e:	f242 0005 	movw	r0, #8197	; 0x2005
   160a2:	f7fe fe79 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   160a6:	4605      	mov	r5, r0
   160a8:	b1b8      	cbz	r0, 160da <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   160aa:	2206      	movs	r2, #6
   160ac:	4621      	mov	r1, r4
   160ae:	3008      	adds	r0, #8
   160b0:	f00d fe4d 	bl	23d4e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   160b4:	2200      	movs	r2, #0
   160b6:	4629      	mov	r1, r5
   160b8:	f242 0005 	movw	r0, #8197	; 0x2005
   160bc:	f7fe fea8 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   160c0:	2800      	cmp	r0, #0
   160c2:	d1ea      	bne.n	1609a <set_random_address+0xe>
	memcpy(dst, src, sizeof(*dst));
   160c4:	4b07      	ldr	r3, [pc, #28]	; (160e4 <set_random_address+0x58>)
   160c6:	6822      	ldr	r2, [r4, #0]
   160c8:	f8c3 2061 	str.w	r2, [r3, #97]	; 0x61
   160cc:	88a2      	ldrh	r2, [r4, #4]
   160ce:	f8a3 2065 	strh.w	r2, [r3, #101]	; 0x65
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   160d2:	2201      	movs	r2, #1
   160d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	return 0;
   160d8:	e7df      	b.n	1609a <set_random_address+0xe>
		return -ENOBUFS;
   160da:	f06f 0068 	mvn.w	r0, #104	; 0x68
   160de:	e7dc      	b.n	1609a <set_random_address+0xe>
   160e0:	20000309 	.word	0x20000309
   160e4:	200002a8 	.word	0x200002a8

000160e8 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   160e8:	b530      	push	{r4, r5, lr}
   160ea:	b085      	sub	sp, #20
   160ec:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   160ee:	460d      	mov	r5, r1
   160f0:	b149      	cbz	r1, 16106 <id_create+0x1e>
   160f2:	2300      	movs	r3, #0
   160f4:	9302      	str	r3, [sp, #8]
   160f6:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   160fa:	2207      	movs	r2, #7
   160fc:	a902      	add	r1, sp, #8
   160fe:	4628      	mov	r0, r5
   16100:	f00f fc5b 	bl	259ba <memcmp>
   16104:	bb00      	cbnz	r0, 16148 <id_create+0x60>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   16106:	4668      	mov	r0, sp
   16108:	f00b ff56 	bl	21fb8 <bt_addr_le_create_static>
			if (err) {
   1610c:	4603      	mov	r3, r0
   1610e:	b9c0      	cbnz	r0, 16142 <id_create+0x5a>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   16110:	4668      	mov	r0, sp
   16112:	f7ff ffa1 	bl	16058 <id_find>
   16116:	2800      	cmp	r0, #0
   16118:	daf5      	bge.n	16106 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1611a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1611e:	4a10      	ldr	r2, [pc, #64]	; (16160 <id_create+0x78>)
   16120:	18a3      	adds	r3, r4, r2
   16122:	9800      	ldr	r0, [sp, #0]
   16124:	50a0      	str	r0, [r4, r2]
   16126:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1612a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1612e:	8099      	strh	r1, [r3, #4]
   16130:	719a      	strb	r2, [r3, #6]

		if (addr) {
   16132:	b12d      	cbz	r5, 16140 <id_create+0x58>
   16134:	681a      	ldr	r2, [r3, #0]
   16136:	602a      	str	r2, [r5, #0]
   16138:	889a      	ldrh	r2, [r3, #4]
   1613a:	799b      	ldrb	r3, [r3, #6]
   1613c:	80aa      	strh	r2, [r5, #4]
   1613e:	71ab      	strb	r3, [r5, #6]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   16140:	2300      	movs	r3, #0
}
   16142:	4618      	mov	r0, r3
   16144:	b005      	add	sp, #20
   16146:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16148:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1614c:	4a04      	ldr	r2, [pc, #16]	; (16160 <id_create+0x78>)
   1614e:	18a3      	adds	r3, r4, r2
   16150:	6829      	ldr	r1, [r5, #0]
   16152:	50a1      	str	r1, [r4, r2]
   16154:	88a9      	ldrh	r1, [r5, #4]
   16156:	79aa      	ldrb	r2, [r5, #6]
   16158:	8099      	strh	r1, [r3, #4]
   1615a:	719a      	strb	r2, [r3, #6]
}
   1615c:	e7f0      	b.n	16140 <id_create+0x58>
   1615e:	bf00      	nop
   16160:	200002a8 	.word	0x200002a8

00016164 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   16164:	b570      	push	{r4, r5, r6, lr}
   16166:	b084      	sub	sp, #16
   16168:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1616a:	4605      	mov	r5, r0
   1616c:	b340      	cbz	r0, 161c0 <bt_id_create+0x5c>
   1616e:	2300      	movs	r3, #0
   16170:	9300      	str	r3, [sp, #0]
   16172:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   16176:	2207      	movs	r2, #7
   16178:	4669      	mov	r1, sp
   1617a:	f00f fc1e 	bl	259ba <memcmp>
   1617e:	b1f8      	cbz	r0, 161c0 <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16180:	782b      	ldrb	r3, [r5, #0]
   16182:	2b01      	cmp	r3, #1
   16184:	d104      	bne.n	16190 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   16186:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16188:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1618c:	2bc0      	cmp	r3, #192	; 0xc0
   1618e:	d012      	beq.n	161b6 <bt_id_create+0x52>
   16190:	4b24      	ldr	r3, [pc, #144]	; (16224 <bt_id_create+0xc0>)
   16192:	4a25      	ldr	r2, [pc, #148]	; (16228 <bt_id_create+0xc4>)
   16194:	1a9b      	subs	r3, r3, r2
   16196:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   16198:	f04f 0100 	mov.w	r1, #0
   1619c:	2201      	movs	r2, #1
   1619e:	f362 0102 	bfi	r1, r2, #0, #3
   161a2:	f36f 01c5 	bfc	r1, #3, #3
   161a6:	f363 118f 	bfi	r1, r3, #6, #10
   161aa:	4820      	ldr	r0, [pc, #128]	; (1622c <bt_id_create+0xc8>)
   161ac:	f7fb fe52 	bl	11e54 <log_0>
			return -EINVAL;
   161b0:	f06f 0015 	mvn.w	r0, #21
   161b4:	e028      	b.n	16208 <bt_id_create+0xa4>
		}

		if (id_find(addr) >= 0) {
   161b6:	4628      	mov	r0, r5
   161b8:	f7ff ff4e 	bl	16058 <id_find>
   161bc:	2800      	cmp	r0, #0
   161be:	da25      	bge.n	1620c <bt_id_create+0xa8>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   161c0:	bb54      	cbnz	r4, 16218 <bt_id_create+0xb4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   161c2:	4b1b      	ldr	r3, [pc, #108]	; (16230 <bt_id_create+0xcc>)
   161c4:	79db      	ldrb	r3, [r3, #7]
   161c6:	2b01      	cmp	r3, #1
   161c8:	d029      	beq.n	1621e <bt_id_create+0xba>
   161ca:	f3bf 8f5b 	dmb	ish
   161ce:	4b19      	ldr	r3, [pc, #100]	; (16234 <bt_id_create+0xd0>)
   161d0:	681b      	ldr	r3, [r3, #0]
   161d2:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   161d6:	f013 0f01 	tst.w	r3, #1
   161da:	d10a      	bne.n	161f2 <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   161dc:	b1cd      	cbz	r5, 16212 <bt_id_create+0xae>
   161de:	2300      	movs	r3, #0
   161e0:	9302      	str	r3, [sp, #8]
   161e2:	f8cd 300b 	str.w	r3, [sp, #11]
   161e6:	2207      	movs	r2, #7
   161e8:	a902      	add	r1, sp, #8
   161ea:	4628      	mov	r0, r5
   161ec:	f00f fbe5 	bl	259ba <memcmp>
   161f0:	b178      	cbz	r0, 16212 <bt_id_create+0xae>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   161f2:	4b0f      	ldr	r3, [pc, #60]	; (16230 <bt_id_create+0xcc>)
   161f4:	79de      	ldrb	r6, [r3, #7]
   161f6:	1c72      	adds	r2, r6, #1
   161f8:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   161fa:	4622      	mov	r2, r4
   161fc:	4629      	mov	r1, r5
   161fe:	4630      	mov	r0, r6
   16200:	f7ff ff72 	bl	160e8 <id_create>
	if (err) {
   16204:	b900      	cbnz	r0, 16208 <bt_id_create+0xa4>
		return err;
	}

	return new_id;
   16206:	4630      	mov	r0, r6
}
   16208:	b004      	add	sp, #16
   1620a:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   1620c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16210:	e7fa      	b.n	16208 <bt_id_create+0xa4>
			return -EINVAL;
   16212:	f06f 0015 	mvn.w	r0, #21
   16216:	e7f7      	b.n	16208 <bt_id_create+0xa4>
		return -EINVAL;
   16218:	f06f 0015 	mvn.w	r0, #21
   1621c:	e7f4      	b.n	16208 <bt_id_create+0xa4>
		return -ENOMEM;
   1621e:	f06f 000b 	mvn.w	r0, #11
   16222:	e7f1      	b.n	16208 <bt_id_create+0xa4>
   16224:	00025db8 	.word	0x00025db8
   16228:	00025d80 	.word	0x00025d80
   1622c:	00027038 	.word	0x00027038
   16230:	200002a8 	.word	0x200002a8
   16234:	20000374 	.word	0x20000374

00016238 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   16238:	b530      	push	{r4, r5, lr}
   1623a:	b087      	sub	sp, #28
   1623c:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1623e:	aa01      	add	r2, sp, #4
   16240:	2100      	movs	r1, #0
   16242:	f241 0009 	movw	r0, #4105	; 0x1009
   16246:	f7fe fde3 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   1624a:	b9f0      	cbnz	r0, 1628a <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   1624c:	9b01      	ldr	r3, [sp, #4]
   1624e:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16250:	3401      	adds	r4, #1
   16252:	2300      	movs	r3, #0
   16254:	9302      	str	r3, [sp, #8]
   16256:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   1625a:	2206      	movs	r2, #6
   1625c:	a902      	add	r1, sp, #8
   1625e:	4620      	mov	r0, r4
   16260:	f00f fbab 	bl	259ba <memcmp>
   16264:	b158      	cbz	r0, 1627e <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   16266:	4b18      	ldr	r3, [pc, #96]	; (162c8 <bt_id_read_public_addr+0x90>)
   16268:	e893 0003 	ldmia.w	r3, {r0, r1}
   1626c:	9004      	str	r0, [sp, #16]
   1626e:	f8ad 1014 	strh.w	r1, [sp, #20]
   16272:	2206      	movs	r2, #6
   16274:	a904      	add	r1, sp, #16
   16276:	4620      	mov	r0, r4
   16278:	f00f fb9f 	bl	259ba <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1627c:	b9b8      	cbnz	r0, 162ae <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1627e:	9801      	ldr	r0, [sp, #4]
   16280:	f00d fd15 	bl	23cae <net_buf_unref>
		return 0U;
   16284:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16286:	b007      	add	sp, #28
   16288:	bd30      	pop	{r4, r5, pc}
   1628a:	4b10      	ldr	r3, [pc, #64]	; (162cc <bt_id_read_public_addr+0x94>)
   1628c:	4a10      	ldr	r2, [pc, #64]	; (162d0 <bt_id_read_public_addr+0x98>)
   1628e:	1a9b      	subs	r3, r3, r2
   16290:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   16292:	f04f 0100 	mov.w	r1, #0
   16296:	2202      	movs	r2, #2
   16298:	f362 0102 	bfi	r1, r2, #0, #3
   1629c:	f36f 01c5 	bfc	r1, #3, #3
   162a0:	f363 118f 	bfi	r1, r3, #6, #10
   162a4:	480b      	ldr	r0, [pc, #44]	; (162d4 <bt_id_read_public_addr+0x9c>)
   162a6:	f7fb fdd5 	bl	11e54 <log_0>
		return 0U;
   162aa:	2000      	movs	r0, #0
   162ac:	e7eb      	b.n	16286 <bt_id_read_public_addr+0x4e>
   162ae:	6823      	ldr	r3, [r4, #0]
   162b0:	f8c5 3001 	str.w	r3, [r5, #1]
   162b4:	88a3      	ldrh	r3, [r4, #4]
   162b6:	f8a5 3005 	strh.w	r3, [r5, #5]
	addr->type = BT_ADDR_LE_PUBLIC;
   162ba:	2300      	movs	r3, #0
   162bc:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   162be:	9801      	ldr	r0, [sp, #4]
   162c0:	f00d fcf5 	bl	23cae <net_buf_unref>
	return 1U;
   162c4:	2001      	movs	r0, #1
   162c6:	e7de      	b.n	16286 <bt_id_read_public_addr+0x4e>
   162c8:	00025f14 	.word	0x00025f14
   162cc:	00025db8 	.word	0x00025db8
   162d0:	00025d80 	.word	0x00025d80
   162d4:	00027068 	.word	0x00027068

000162d8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   162d8:	b500      	push	{lr}
   162da:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   162dc:	4668      	mov	r0, sp
   162de:	f7ff ffab 	bl	16238 <bt_id_read_public_addr>
   162e2:	4b06      	ldr	r3, [pc, #24]	; (162fc <bt_setup_public_id_addr+0x24>)
   162e4:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   162e6:	b918      	cbnz	r0, 162f0 <bt_setup_public_id_addr+0x18>
		return 0;
   162e8:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   162ea:	b003      	add	sp, #12
   162ec:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   162f0:	2200      	movs	r2, #0
   162f2:	4669      	mov	r1, sp
   162f4:	4610      	mov	r0, r2
   162f6:	f7ff fef7 	bl	160e8 <id_create>
   162fa:	e7f6      	b.n	162ea <bt_setup_public_id_addr+0x12>
   162fc:	200002a8 	.word	0x200002a8

00016300 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16304:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16306:	4b37      	ldr	r3, [pc, #220]	; (163e4 <bt_read_static_addr+0xe4>)
   16308:	f893 60ba 	ldrb.w	r6, [r3, #186]	; 0xba
   1630c:	f016 0601 	ands.w	r6, r6, #1
   16310:	d012      	beq.n	16338 <bt_read_static_addr+0x38>
   16312:	4607      	mov	r7, r0
   16314:	460d      	mov	r5, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   16316:	aa01      	add	r2, sp, #4
   16318:	2100      	movs	r1, #0
   1631a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1631e:	f7fe fd77 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   16322:	4604      	mov	r4, r0
   16324:	b9c8      	cbnz	r0, 1635a <bt_read_static_addr+0x5a>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   16326:	9b01      	ldr	r3, [sp, #4]
   16328:	f8d3 8008 	ldr.w	r8, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1632c:	f898 6001 	ldrb.w	r6, [r8, #1]
   16330:	42ae      	cmp	r6, r5
   16332:	bf28      	it	cs
   16334:	462e      	movcs	r6, r5
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   16336:	e039      	b.n	163ac <bt_read_static_addr+0xac>
   16338:	4b2b      	ldr	r3, [pc, #172]	; (163e8 <bt_read_static_addr+0xe8>)
   1633a:	4a2c      	ldr	r2, [pc, #176]	; (163ec <bt_read_static_addr+0xec>)
   1633c:	1a9b      	subs	r3, r3, r2
   1633e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   16340:	f04f 0100 	mov.w	r1, #0
   16344:	2202      	movs	r2, #2
   16346:	f362 0102 	bfi	r1, r2, #0, #3
   1634a:	f36f 01c5 	bfc	r1, #3, #3
   1634e:	f363 118f 	bfi	r1, r3, #6, #10
   16352:	4827      	ldr	r0, [pc, #156]	; (163f0 <bt_read_static_addr+0xf0>)
   16354:	f7fb fd7e 	bl	11e54 <log_0>
		return 0;
   16358:	e02e      	b.n	163b8 <bt_read_static_addr+0xb8>
   1635a:	4b23      	ldr	r3, [pc, #140]	; (163e8 <bt_read_static_addr+0xe8>)
   1635c:	4a23      	ldr	r2, [pc, #140]	; (163ec <bt_read_static_addr+0xec>)
   1635e:	1a9b      	subs	r3, r3, r2
   16360:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   16362:	f04f 0100 	mov.w	r1, #0
   16366:	2202      	movs	r2, #2
   16368:	f362 0102 	bfi	r1, r2, #0, #3
   1636c:	f36f 01c5 	bfc	r1, #3, #3
   16370:	f363 118f 	bfi	r1, r3, #6, #10
   16374:	481f      	ldr	r0, [pc, #124]	; (163f4 <bt_read_static_addr+0xf4>)
   16376:	f7fb fd6d 	bl	11e54 <log_0>
		return 0;
   1637a:	2600      	movs	r6, #0
   1637c:	e01c      	b.n	163b8 <bt_read_static_addr+0xb8>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1637e:	2116      	movs	r1, #22
   16380:	fb01 f104 	mul.w	r1, r1, r4
   16384:	187a      	adds	r2, r7, r1
   16386:	4643      	mov	r3, r8
   16388:	f853 5f02 	ldr.w	r5, [r3, #2]!
   1638c:	f8d3 e004 	ldr.w	lr, [r3, #4]
   16390:	f8d3 c008 	ldr.w	ip, [r3, #8]
   16394:	68d8      	ldr	r0, [r3, #12]
   16396:	507d      	str	r5, [r7, r1]
   16398:	f8c2 e004 	str.w	lr, [r2, #4]
   1639c:	f8c2 c008 	str.w	ip, [r2, #8]
   163a0:	60d0      	str	r0, [r2, #12]
   163a2:	691d      	ldr	r5, [r3, #16]
   163a4:	6115      	str	r5, [r2, #16]
   163a6:	8a9b      	ldrh	r3, [r3, #20]
   163a8:	8293      	strh	r3, [r2, #20]
	for (i = 0; i < cnt; i++) {
   163aa:	3401      	adds	r4, #1
   163ac:	42a6      	cmp	r6, r4
   163ae:	dce6      	bgt.n	1637e <bt_read_static_addr+0x7e>
	}

	net_buf_unref(rsp);
   163b0:	9801      	ldr	r0, [sp, #4]
   163b2:	f00d fc7c 	bl	23cae <net_buf_unref>
	if (!cnt) {
   163b6:	b11e      	cbz	r6, 163c0 <bt_read_static_addr+0xc0>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   163b8:	4630      	mov	r0, r6
   163ba:	b002      	add	sp, #8
   163bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163c0:	4b09      	ldr	r3, [pc, #36]	; (163e8 <bt_read_static_addr+0xe8>)
   163c2:	4a0a      	ldr	r2, [pc, #40]	; (163ec <bt_read_static_addr+0xec>)
   163c4:	1a9b      	subs	r3, r3, r2
   163c6:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   163c8:	f04f 0100 	mov.w	r1, #0
   163cc:	2202      	movs	r2, #2
   163ce:	f362 0102 	bfi	r1, r2, #0, #3
   163d2:	f36f 01c5 	bfc	r1, #3, #3
   163d6:	f363 118f 	bfi	r1, r3, #6, #10
   163da:	4807      	ldr	r0, [pc, #28]	; (163f8 <bt_read_static_addr+0xf8>)
   163dc:	f7fb fd3a 	bl	11e54 <log_0>
   163e0:	e7ea      	b.n	163b8 <bt_read_static_addr+0xb8>
   163e2:	bf00      	nop
   163e4:	200002a8 	.word	0x200002a8
   163e8:	00025db8 	.word	0x00025db8
   163ec:	00025d80 	.word	0x00025d80
   163f0:	00027088 	.word	0x00027088
   163f4:	000270b4 	.word	0x000270b4
   163f8:	000270d4 	.word	0x000270d4

000163fc <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   163fc:	b510      	push	{r4, lr}
   163fe:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16400:	4b17      	ldr	r3, [pc, #92]	; (16460 <bt_setup_random_id_addr+0x64>)
   16402:	79dc      	ldrb	r4, [r3, #7]
   16404:	b934      	cbnz	r4, 16414 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   16406:	2101      	movs	r1, #1
   16408:	a802      	add	r0, sp, #8
   1640a:	f7ff ff79 	bl	16300 <bt_read_static_addr>
   1640e:	4b14      	ldr	r3, [pc, #80]	; (16460 <bt_setup_random_id_addr+0x64>)
   16410:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   16412:	b938      	cbnz	r0, 16424 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   16414:	2100      	movs	r1, #0
   16416:	4608      	mov	r0, r1
   16418:	f7ff fea4 	bl	16164 <bt_id_create>
   1641c:	4603      	mov	r3, r0
}
   1641e:	4618      	mov	r0, r3
   16420:	b008      	add	sp, #32
   16422:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16424:	4b0e      	ldr	r3, [pc, #56]	; (16460 <bt_setup_random_id_addr+0x64>)
   16426:	79db      	ldrb	r3, [r3, #7]
   16428:	42a3      	cmp	r3, r4
   1642a:	d917      	bls.n	1645c <bt_setup_random_id_addr+0x60>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1642c:	2316      	movs	r3, #22
   1642e:	aa02      	add	r2, sp, #8
   16430:	fb03 2304 	mla	r3, r3, r4, r2
	memcpy(dst, src, sizeof(*dst));
   16434:	681a      	ldr	r2, [r3, #0]
   16436:	f8cd 2001 	str.w	r2, [sp, #1]
   1643a:	889b      	ldrh	r3, [r3, #4]
   1643c:	f8ad 3005 	strh.w	r3, [sp, #5]
				addr.type = BT_ADDR_LE_RANDOM;
   16440:	2301      	movs	r3, #1
   16442:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   16446:	2200      	movs	r2, #0
   16448:	4669      	mov	r1, sp
   1644a:	4620      	mov	r0, r4
   1644c:	f7ff fe4c 	bl	160e8 <id_create>
				if (err) {
   16450:	4603      	mov	r3, r0
   16452:	2800      	cmp	r0, #0
   16454:	d1e3      	bne.n	1641e <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16456:	3401      	adds	r4, #1
   16458:	b2e4      	uxtb	r4, r4
   1645a:	e7e3      	b.n	16424 <bt_setup_random_id_addr+0x28>
			return 0;
   1645c:	2300      	movs	r3, #0
   1645e:	e7de      	b.n	1641e <bt_setup_random_id_addr+0x22>
   16460:	200002a8 	.word	0x200002a8

00016464 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   16464:	b510      	push	{r4, lr}
   16466:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   16468:	4b07      	ldr	r3, [pc, #28]	; (16488 <bt_id_set_create_conn_own_addr+0x24>)
   1646a:	781b      	ldrb	r3, [r3, #0]
   1646c:	2b01      	cmp	r3, #1
   1646e:	d004      	beq.n	1647a <bt_id_set_create_conn_own_addr+0x16>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   16470:	4b05      	ldr	r3, [pc, #20]	; (16488 <bt_id_set_create_conn_own_addr+0x24>)
   16472:	781b      	ldrb	r3, [r3, #0]
   16474:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   16476:	2000      	movs	r0, #0
}
   16478:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   1647a:	4804      	ldr	r0, [pc, #16]	; (1648c <bt_id_set_create_conn_own_addr+0x28>)
   1647c:	f7ff fe06 	bl	1608c <set_random_address>
			if (err) {
   16480:	2800      	cmp	r0, #0
   16482:	d0f5      	beq.n	16470 <bt_id_set_create_conn_own_addr+0xc>
   16484:	e7f8      	b.n	16478 <bt_id_set_create_conn_own_addr+0x14>
   16486:	bf00      	nop
   16488:	200002a8 	.word	0x200002a8
   1648c:	200002a9 	.word	0x200002a9

00016490 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   16490:	b510      	push	{r4, lr}
   16492:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   16494:	4b07      	ldr	r3, [pc, #28]	; (164b4 <bt_id_set_scan_own_addr+0x24>)
   16496:	781b      	ldrb	r3, [r3, #0]
   16498:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   1649a:	f00b fee8 	bl	2226e <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   1649e:	b108      	cbz	r0, 164a4 <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
   164a0:	2000      	movs	r0, #0
}
   164a2:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   164a4:	f00b fee7 	bl	22276 <bt_id_set_private_addr>
			if (err) {
   164a8:	2800      	cmp	r0, #0
   164aa:	d1fa      	bne.n	164a2 <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   164ac:	2301      	movs	r3, #1
   164ae:	7023      	strb	r3, [r4, #0]
   164b0:	e7f7      	b.n	164a2 <bt_id_set_scan_own_addr+0x12>
   164b2:	bf00      	nop
   164b4:	200002a8 	.word	0x200002a8

000164b8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   164b8:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   164ba:	4b25      	ldr	r3, [pc, #148]	; (16550 <bt_id_init+0x98>)
   164bc:	79db      	ldrb	r3, [r3, #7]
   164be:	b12b      	cbz	r3, 164cc <bt_id_init+0x14>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   164c0:	4b23      	ldr	r3, [pc, #140]	; (16550 <bt_id_init+0x98>)
   164c2:	79db      	ldrb	r3, [r3, #7]
   164c4:	b1c3      	cbz	r3, 164f8 <bt_id_init+0x40>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   164c6:	2400      	movs	r4, #0
}
   164c8:	4620      	mov	r0, r4
   164ca:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   164cc:	f7ff ff04 	bl	162d8 <bt_setup_public_id_addr>
		if (err) {
   164d0:	4604      	mov	r4, r0
   164d2:	2800      	cmp	r0, #0
   164d4:	d0f4      	beq.n	164c0 <bt_id_init+0x8>
   164d6:	4b1f      	ldr	r3, [pc, #124]	; (16554 <bt_id_init+0x9c>)
   164d8:	4a1f      	ldr	r2, [pc, #124]	; (16558 <bt_id_init+0xa0>)
   164da:	1a9b      	subs	r3, r3, r2
   164dc:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   164de:	f04f 0100 	mov.w	r1, #0
   164e2:	2201      	movs	r2, #1
   164e4:	f362 0102 	bfi	r1, r2, #0, #3
   164e8:	f36f 01c5 	bfc	r1, #3, #3
   164ec:	f363 118f 	bfi	r1, r3, #6, #10
   164f0:	481a      	ldr	r0, [pc, #104]	; (1655c <bt_id_init+0xa4>)
   164f2:	f7fb fcaf 	bl	11e54 <log_0>
			return err;
   164f6:	e7e7      	b.n	164c8 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   164f8:	f7ff ff80 	bl	163fc <bt_setup_random_id_addr>
		if (err) {
   164fc:	4604      	mov	r4, r0
   164fe:	b9b0      	cbnz	r0, 1652e <bt_id_init+0x76>
		err = set_random_address(&bt_dev.id_addr[0].a);
   16500:	4817      	ldr	r0, [pc, #92]	; (16560 <bt_id_init+0xa8>)
   16502:	f7ff fdc3 	bl	1608c <set_random_address>
		if (err) {
   16506:	4604      	mov	r4, r0
   16508:	2800      	cmp	r0, #0
   1650a:	d0dd      	beq.n	164c8 <bt_id_init+0x10>
   1650c:	4b11      	ldr	r3, [pc, #68]	; (16554 <bt_id_init+0x9c>)
   1650e:	4a12      	ldr	r2, [pc, #72]	; (16558 <bt_id_init+0xa0>)
   16510:	1a9b      	subs	r3, r3, r2
   16512:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   16514:	f04f 0100 	mov.w	r1, #0
   16518:	2201      	movs	r2, #1
   1651a:	f362 0102 	bfi	r1, r2, #0, #3
   1651e:	f36f 01c5 	bfc	r1, #3, #3
   16522:	f363 118f 	bfi	r1, r3, #6, #10
   16526:	480f      	ldr	r0, [pc, #60]	; (16564 <bt_id_init+0xac>)
   16528:	f7fb fc94 	bl	11e54 <log_0>
			return err;
   1652c:	e7cc      	b.n	164c8 <bt_id_init+0x10>
   1652e:	4b09      	ldr	r3, [pc, #36]	; (16554 <bt_id_init+0x9c>)
   16530:	4a09      	ldr	r2, [pc, #36]	; (16558 <bt_id_init+0xa0>)
   16532:	1a9b      	subs	r3, r3, r2
   16534:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   16536:	f04f 0100 	mov.w	r1, #0
   1653a:	2201      	movs	r2, #1
   1653c:	f362 0102 	bfi	r1, r2, #0, #3
   16540:	f36f 01c5 	bfc	r1, #3, #3
   16544:	f363 118f 	bfi	r1, r3, #6, #10
   16548:	4804      	ldr	r0, [pc, #16]	; (1655c <bt_id_init+0xa4>)
   1654a:	f7fb fc83 	bl	11e54 <log_0>
			return err;
   1654e:	e7bb      	b.n	164c8 <bt_id_init+0x10>
   16550:	200002a8 	.word	0x200002a8
   16554:	00025db8 	.word	0x00025db8
   16558:	00025d80 	.word	0x00025d80
   1655c:	00027100 	.word	0x00027100
   16560:	200002a9 	.word	0x200002a9
   16564:	00027120 	.word	0x00027120

00016568 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   16568:	b530      	push	{r4, r5, lr}
   1656a:	b087      	sub	sp, #28
   1656c:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1656e:	2102      	movs	r1, #2
   16570:	f242 000c 	movw	r0, #8204	; 0x200c
   16574:	f7fe fc10 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   16578:	b330      	cbz	r0, 165c8 <bt_le_scan_set_enable_legacy+0x60>
   1657a:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   1657c:	2102      	movs	r1, #2
   1657e:	3008      	adds	r0, #8
   16580:	f00d fbdf 	bl	23d42 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   16584:	2c01      	cmp	r4, #1
   16586:	d015      	beq.n	165b4 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   16588:	2300      	movs	r3, #0
   1658a:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   1658c:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1658e:	2c01      	cmp	r4, #1
   16590:	bf14      	ite	ne
   16592:	2400      	movne	r4, #0
   16594:	2401      	moveq	r4, #1
   16596:	9400      	str	r4, [sp, #0]
   16598:	2305      	movs	r3, #5
   1659a:	4a0d      	ldr	r2, [pc, #52]	; (165d0 <bt_le_scan_set_enable_legacy+0x68>)
   1659c:	a903      	add	r1, sp, #12
   1659e:	4628      	mov	r0, r5
   165a0:	f7fe fbe8 	bl	14d74 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   165a4:	2200      	movs	r2, #0
   165a6:	4629      	mov	r1, r5
   165a8:	f242 000c 	movw	r0, #8204	; 0x200c
   165ac:	f7fe fc30 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   165b0:	b007      	add	sp, #28
   165b2:	bd30      	pop	{r4, r5, pc}
   165b4:	f3bf 8f5b 	dmb	ish
   165b8:	4b05      	ldr	r3, [pc, #20]	; (165d0 <bt_le_scan_set_enable_legacy+0x68>)
   165ba:	681b      	ldr	r3, [r3, #0]
   165bc:	f3bf 8f5b 	dmb	ish
   165c0:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   165c4:	7043      	strb	r3, [r0, #1]
   165c6:	e7e1      	b.n	1658c <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   165c8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   165cc:	e7f0      	b.n	165b0 <bt_le_scan_set_enable_legacy+0x48>
   165ce:	bf00      	nop
   165d0:	20000374 	.word	0x20000374

000165d4 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   165d4:	4b01      	ldr	r3, [pc, #4]	; (165dc <bt_scan_reset+0x8>)
   165d6:	2200      	movs	r2, #0
   165d8:	601a      	str	r2, [r3, #0]
}
   165da:	4770      	bx	lr
   165dc:	200028fc 	.word	0x200028fc

000165e0 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   165e0:	b530      	push	{r4, r5, lr}
   165e2:	b083      	sub	sp, #12
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   165e4:	2300      	movs	r3, #0
   165e6:	f8ad 3005 	strh.w	r3, [sp, #5]

	set_param.scan_type = scan_type;
   165ea:	f88d 0000 	strb.w	r0, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   165ee:	f8ad 1001 	strh.w	r1, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   165f2:	f8ad 2003 	strh.w	r2, [sp, #3]
   165f6:	f3bf 8f5b 	dmb	ish
   165fa:	4b29      	ldr	r3, [pc, #164]	; (166a0 <start_le_scan_legacy+0xc0>)
   165fc:	681b      	ldr	r3, [r3, #0]
   165fe:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
   16602:	f413 7f00 	tst.w	r3, #512	; 0x200
   16606:	d00e      	beq.n	16626 <start_le_scan_legacy+0x46>
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
   16608:	2301      	movs	r3, #1
   1660a:	f88d 3006 	strb.w	r3, [sp, #6]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   1660e:	2801      	cmp	r0, #1
   16610:	bf14      	ite	ne
   16612:	2400      	movne	r4, #0
   16614:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   16616:	f10d 0105 	add.w	r1, sp, #5
   1661a:	4620      	mov	r0, r4
   1661c:	f7ff ff38 	bl	16490 <bt_id_set_scan_own_addr>
	if (err) {
   16620:	b128      	cbz	r0, 1662e <start_le_scan_legacy+0x4e>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   16622:	b003      	add	sp, #12
   16624:	bd30      	pop	{r4, r5, pc}
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   16626:	2300      	movs	r3, #0
   16628:	f88d 3006 	strb.w	r3, [sp, #6]
   1662c:	e7ef      	b.n	1660e <start_le_scan_legacy+0x2e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   1662e:	2107      	movs	r1, #7
   16630:	f242 000b 	movw	r0, #8203	; 0x200b
   16634:	f7fe fbb0 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   16638:	4605      	mov	r5, r0
   1663a:	b370      	cbz	r0, 1669a <start_le_scan_legacy+0xba>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1663c:	2207      	movs	r2, #7
   1663e:	4669      	mov	r1, sp
   16640:	3008      	adds	r0, #8
   16642:	f00d fb84 	bl	23d4e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   16646:	2200      	movs	r2, #0
   16648:	4629      	mov	r1, r5
   1664a:	f242 000b 	movw	r0, #8203	; 0x200b
   1664e:	f7fe fbdf 	bl	14e10 <bt_hci_cmd_send_sync>
	if (err) {
   16652:	2800      	cmp	r0, #0
   16654:	d1e5      	bne.n	16622 <start_le_scan_legacy+0x42>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   16656:	2001      	movs	r0, #1
   16658:	f00b fe57 	bl	2230a <bt_le_scan_set_enable>
	if (err) {
   1665c:	2800      	cmp	r0, #0
   1665e:	d1e0      	bne.n	16622 <start_le_scan_legacy+0x42>
	if (val) {
   16660:	b16c      	cbz	r4, 1667e <start_le_scan_legacy+0x9e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16662:	4b0f      	ldr	r3, [pc, #60]	; (166a0 <start_le_scan_legacy+0xc0>)
   16664:	f3bf 8f5b 	dmb	ish
   16668:	e853 2f00 	ldrex	r2, [r3]
   1666c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   16670:	e843 2100 	strex	r1, r2, [r3]
   16674:	2900      	cmp	r1, #0
   16676:	d1f7      	bne.n	16668 <start_le_scan_legacy+0x88>
   16678:	f3bf 8f5b 	dmb	ish
   1667c:	e7d1      	b.n	16622 <start_le_scan_legacy+0x42>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1667e:	4b08      	ldr	r3, [pc, #32]	; (166a0 <start_le_scan_legacy+0xc0>)
   16680:	f3bf 8f5b 	dmb	ish
   16684:	e853 2f00 	ldrex	r2, [r3]
   16688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1668c:	e843 2100 	strex	r1, r2, [r3]
   16690:	2900      	cmp	r1, #0
   16692:	d1f7      	bne.n	16684 <start_le_scan_legacy+0xa4>
   16694:	f3bf 8f5b 	dmb	ish
}
   16698:	e7c3      	b.n	16622 <start_le_scan_legacy+0x42>
		return -ENOBUFS;
   1669a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1669e:	e7c0      	b.n	16622 <start_le_scan_legacy+0x42>
   166a0:	20000374 	.word	0x20000374

000166a4 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   166a4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   166a6:	f3bf 8f5b 	dmb	ish
   166aa:	4b21      	ldr	r3, [pc, #132]	; (16730 <bt_le_scan_update+0x8c>)
   166ac:	681b      	ldr	r3, [r3, #0]
   166ae:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   166b2:	f3c3 1480 	ubfx	r4, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   166b6:	f013 0f40 	tst.w	r3, #64	; 0x40
   166ba:	d002      	beq.n	166c2 <bt_le_scan_update+0x1e>
		return 0;
   166bc:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   166be:	4620      	mov	r0, r4
   166c0:	bd38      	pop	{r3, r4, r5, pc}
   166c2:	4605      	mov	r5, r0
   166c4:	f3bf 8f5b 	dmb	ish
   166c8:	4b19      	ldr	r3, [pc, #100]	; (16730 <bt_le_scan_update+0x8c>)
   166ca:	681b      	ldr	r3, [r3, #0]
   166cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   166d0:	f013 0f20 	tst.w	r3, #32
   166d4:	d003      	beq.n	166de <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   166d6:	2000      	movs	r0, #0
   166d8:	f00b fe17 	bl	2230a <bt_le_scan_set_enable>
		if (err) {
   166dc:	bb28      	cbnz	r0, 1672a <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   166de:	2206      	movs	r2, #6
   166e0:	2100      	movs	r1, #0
   166e2:	4608      	mov	r0, r1
   166e4:	f000 fe50 	bl	17388 <bt_conn_lookup_state_le>
		if (conn) {
   166e8:	b110      	cbz	r0, 166f0 <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   166ea:	f00b ff35 	bl	22558 <bt_conn_unref>
			return 0;
   166ee:	e7e6      	b.n	166be <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   166f0:	2202      	movs	r2, #2
   166f2:	2100      	movs	r1, #0
   166f4:	4608      	mov	r0, r1
   166f6:	f000 fe47 	bl	17388 <bt_conn_lookup_state_le>
		if (conn) {
   166fa:	4603      	mov	r3, r0
   166fc:	2800      	cmp	r0, #0
   166fe:	d0de      	beq.n	166be <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16700:	4a0b      	ldr	r2, [pc, #44]	; (16730 <bt_le_scan_update+0x8c>)
   16702:	f3bf 8f5b 	dmb	ish
   16706:	e852 1f00 	ldrex	r1, [r2]
   1670a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   1670e:	e842 1000 	strex	r0, r1, [r2]
   16712:	2800      	cmp	r0, #0
   16714:	d1f7      	bne.n	16706 <bt_le_scan_update+0x62>
   16716:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   1671a:	4618      	mov	r0, r3
   1671c:	f00b ff1c 	bl	22558 <bt_conn_unref>
			return start_passive_scan(fast_scan);
   16720:	4628      	mov	r0, r5
   16722:	f00b fdf6 	bl	22312 <start_passive_scan>
   16726:	4604      	mov	r4, r0
   16728:	e7c9      	b.n	166be <bt_le_scan_update+0x1a>
			return err;
   1672a:	4604      	mov	r4, r0
   1672c:	e7c7      	b.n	166be <bt_le_scan_update+0x1a>
   1672e:	bf00      	nop
   16730:	20000374 	.word	0x20000374

00016734 <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   16734:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16736:	f3bf 8f5b 	dmb	ish
   1673a:	4b21      	ldr	r3, [pc, #132]	; (167c0 <check_pending_conn+0x8c>)
   1673c:	681b      	ldr	r3, [r3, #0]
   1673e:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   16742:	f013 0f40 	tst.w	r3, #64	; 0x40
   16746:	d103      	bne.n	16750 <check_pending_conn+0x1c>
   16748:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1674a:	f012 0f01 	tst.w	r2, #1
   1674e:	d100      	bne.n	16752 <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   16750:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   16752:	2202      	movs	r2, #2
   16754:	4601      	mov	r1, r0
   16756:	2000      	movs	r0, #0
   16758:	f000 fe16 	bl	17388 <bt_conn_lookup_state_le>
	if (!conn) {
   1675c:	4605      	mov	r5, r0
   1675e:	2800      	cmp	r0, #0
   16760:	d0f6      	beq.n	16750 <check_pending_conn+0x1c>
   16762:	f3bf 8f5b 	dmb	ish
   16766:	4b16      	ldr	r3, [pc, #88]	; (167c0 <check_pending_conn+0x8c>)
   16768:	681b      	ldr	r3, [r3, #0]
   1676a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1676e:	f013 0f20 	tst.w	r3, #32
   16772:	d003      	beq.n	1677c <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   16774:	2000      	movs	r0, #0
   16776:	f00b fdc8 	bl	2230a <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1677a:	b960      	cbnz	r0, 16796 <check_pending_conn+0x62>
   1677c:	6823      	ldr	r3, [r4, #0]
   1677e:	f8c5 3096 	str.w	r3, [r5, #150]	; 0x96
   16782:	88a2      	ldrh	r2, [r4, #4]
   16784:	79a3      	ldrb	r3, [r4, #6]
   16786:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
   1678a:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
	if (bt_le_create_conn(conn)) {
   1678e:	4628      	mov	r0, r5
   16790:	f00b fc59 	bl	22046 <bt_le_create_conn>
   16794:	b160      	cbz	r0, 167b0 <check_pending_conn+0x7c>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   16796:	231f      	movs	r3, #31
   16798:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1679a:	2100      	movs	r1, #0
   1679c:	4628      	mov	r0, r5
   1679e:	f000 fbe5 	bl	16f6c <bt_conn_set_state>
	bt_conn_unref(conn);
   167a2:	4628      	mov	r0, r5
   167a4:	f00b fed8 	bl	22558 <bt_conn_unref>
	bt_le_scan_update(false);
   167a8:	2000      	movs	r0, #0
   167aa:	f7ff ff7b 	bl	166a4 <bt_le_scan_update>
   167ae:	e7cf      	b.n	16750 <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   167b0:	2106      	movs	r1, #6
   167b2:	4628      	mov	r0, r5
   167b4:	f000 fbda 	bl	16f6c <bt_conn_set_state>
	bt_conn_unref(conn);
   167b8:	4628      	mov	r0, r5
   167ba:	f00b fecd 	bl	22558 <bt_conn_unref>
	return;
   167be:	e7c7      	b.n	16750 <check_pending_conn+0x1c>
   167c0:	20000374 	.word	0x20000374

000167c4 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   167c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167c8:	b083      	sub	sp, #12
   167ca:	4682      	mov	sl, r0
   167cc:	4688      	mov	r8, r1
   167ce:	4615      	mov	r5, r2
   167d0:	4699      	mov	r9, r3
   167d2:	f3bf 8f5b 	dmb	ish
   167d6:	4b44      	ldr	r3, [pc, #272]	; (168e8 <le_adv_recv+0x124>)
   167d8:	681b      	ldr	r3, [r3, #0]
   167da:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	BT_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr),
	       info->adv_type, len, info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   167de:	f013 0f40 	tst.w	r3, #64	; 0x40
   167e2:	d003      	beq.n	167ec <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   167e4:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   167e6:	f013 0f04 	tst.w	r3, #4
   167ea:	d179      	bne.n	168e0 <le_adv_recv+0x11c>
		BT_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   167ec:	f89a 2000 	ldrb.w	r2, [sl]
   167f0:	1e93      	subs	r3, r2, #2
   167f2:	b2db      	uxtb	r3, r3
   167f4:	2b01      	cmp	r3, #1
   167f6:	d933      	bls.n	16860 <le_adv_recv+0x9c>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   167f8:	2aff      	cmp	r2, #255	; 0xff
   167fa:	d041      	beq.n	16880 <le_adv_recv+0xbc>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   167fc:	4651      	mov	r1, sl
   167fe:	2000      	movs	r0, #0
   16800:	f00b fd37 	bl	22272 <bt_lookup_id_addr>
   16804:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   16806:	6800      	ldr	r0, [r0, #0]
   16808:	9000      	str	r0, [sp, #0]
   1680a:	889a      	ldrh	r2, [r3, #4]
   1680c:	799b      	ldrb	r3, [r3, #6]
   1680e:	f8ad 2004 	strh.w	r2, [sp, #4]
   16812:	f88d 3006 	strb.w	r3, [sp, #6]
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	info->addr = &id_addr;
   16816:	f8c8 d000 	str.w	sp, [r8]

	if (scan_dev_found_cb) {
   1681a:	4b34      	ldr	r3, [pc, #208]	; (168ec <le_adv_recv+0x128>)
   1681c:	681b      	ldr	r3, [r3, #0]
   1681e:	b19b      	cbz	r3, 16848 <le_adv_recv+0x84>
	state->offset = net_buf_simple_headroom(buf);
   16820:	4628      	mov	r0, r5
   16822:	f00d fac7 	bl	23db4 <net_buf_simple_headroom>
   16826:	b284      	uxth	r4, r0
	state->len = buf->len;
   16828:	88ae      	ldrh	r6, [r5, #4]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   1682a:	f8a5 9004 	strh.w	r9, [r5, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   1682e:	4b2f      	ldr	r3, [pc, #188]	; (168ec <le_adv_recv+0x128>)
   16830:	681f      	ldr	r7, [r3, #0]
   16832:	462b      	mov	r3, r5
   16834:	f898 2007 	ldrb.w	r2, [r8, #7]
   16838:	f998 1005 	ldrsb.w	r1, [r8, #5]
   1683c:	4668      	mov	r0, sp
   1683e:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   16840:	68ab      	ldr	r3, [r5, #8]
   16842:	4423      	add	r3, r4
   16844:	602b      	str	r3, [r5, #0]
	buf->len = state->len;
   16846:	80ae      	strh	r6, [r5, #4]
	return list->head;
   16848:	4b29      	ldr	r3, [pc, #164]	; (168f0 <le_adv_recv+0x12c>)
   1684a:	681e      	ldr	r6, [r3, #0]

		net_buf_simple_restore(buf, &state);
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1684c:	b1ee      	cbz	r6, 1688a <le_adv_recv+0xc6>
   1684e:	3e08      	subs	r6, #8
   16850:	d01d      	beq.n	1688e <le_adv_recv+0xca>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16852:	f116 0408 	adds.w	r4, r6, #8
   16856:	d01f      	beq.n	16898 <le_adv_recv+0xd4>
	return node->next;
   16858:	68b4      	ldr	r4, [r6, #8]
   1685a:	b1ec      	cbz	r4, 16898 <le_adv_recv+0xd4>
   1685c:	3c08      	subs	r4, #8
   1685e:	e01b      	b.n	16898 <le_adv_recv+0xd4>
   16860:	f8da 0000 	ldr.w	r0, [sl]
   16864:	9000      	str	r0, [sp, #0]
   16866:	f8ba 2004 	ldrh.w	r2, [sl, #4]
   1686a:	f89a 3006 	ldrb.w	r3, [sl, #6]
   1686e:	f8ad 2004 	strh.w	r2, [sp, #4]
   16872:	f88d 3006 	strb.w	r3, [sp, #6]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   16876:	b2c3      	uxtb	r3, r0
   16878:	3b02      	subs	r3, #2
   1687a:	f88d 3000 	strb.w	r3, [sp]
   1687e:	e7ca      	b.n	16816 <le_adv_recv+0x52>
   16880:	2300      	movs	r3, #0
   16882:	9300      	str	r3, [sp, #0]
   16884:	f8cd 3003 	str.w	r3, [sp, #3]
   16888:	e7c5      	b.n	16816 <le_adv_recv+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1688a:	4634      	mov	r4, r6
   1688c:	e004      	b.n	16898 <le_adv_recv+0xd4>
   1688e:	4634      	mov	r4, r6
   16890:	e002      	b.n	16898 <le_adv_recv+0xd4>
   16892:	4622      	mov	r2, r4
   16894:	4626      	mov	r6, r4
   16896:	4614      	mov	r4, r2
   16898:	b1e6      	cbz	r6, 168d4 <le_adv_recv+0x110>
		if (listener->recv) {
   1689a:	6833      	ldr	r3, [r6, #0]
   1689c:	b183      	cbz	r3, 168c0 <le_adv_recv+0xfc>
	state->offset = net_buf_simple_headroom(buf);
   1689e:	4628      	mov	r0, r5
   168a0:	f00d fa88 	bl	23db4 <net_buf_simple_headroom>
   168a4:	b287      	uxth	r7, r0
	state->len = buf->len;
   168a6:	f8b5 b004 	ldrh.w	fp, [r5, #4]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   168aa:	f8a5 9004 	strh.w	r9, [r5, #4]
			listener->recv(info, buf);
   168ae:	6833      	ldr	r3, [r6, #0]
   168b0:	4629      	mov	r1, r5
   168b2:	4640      	mov	r0, r8
   168b4:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   168b6:	68a8      	ldr	r0, [r5, #8]
   168b8:	4438      	add	r0, r7
   168ba:	6028      	str	r0, [r5, #0]
	buf->len = state->len;
   168bc:	f8a5 b004 	strh.w	fp, [r5, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   168c0:	2c00      	cmp	r4, #0
   168c2:	d0e6      	beq.n	16892 <le_adv_recv+0xce>
Z_GENLIST_PEEK_NEXT(slist, snode)
   168c4:	f114 0208 	adds.w	r2, r4, #8
   168c8:	d0e4      	beq.n	16894 <le_adv_recv+0xd0>
	return node->next;
   168ca:	68a2      	ldr	r2, [r4, #8]
   168cc:	2a00      	cmp	r2, #0
   168ce:	d0e1      	beq.n	16894 <le_adv_recv+0xd0>
   168d0:	3a08      	subs	r2, #8
   168d2:	e7df      	b.n	16894 <le_adv_recv+0xd0>
			net_buf_simple_restore(buf, &state);
		}
	}

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   168d4:	f898 2008 	ldrb.w	r2, [r8, #8]
   168d8:	4651      	mov	r1, sl
   168da:	4668      	mov	r0, sp
   168dc:	f7ff ff2a 	bl	16734 <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   168e0:	b003      	add	sp, #12
   168e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e6:	bf00      	nop
   168e8:	20000374 	.word	0x20000374
   168ec:	200028fc 	.word	0x200028fc
   168f0:	200028f4 	.word	0x200028f4

000168f4 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   168f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   168f6:	b085      	sub	sp, #20
   168f8:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   168fa:	f100 0608 	add.w	r6, r0, #8
   168fe:	4630      	mov	r0, r6
   16900:	f00d fa48 	bl	23d94 <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   16904:	1e45      	subs	r5, r0, #1
   16906:	b2ed      	uxtb	r5, r5
   16908:	2800      	cmp	r0, #0
   1690a:	d03f      	beq.n	1698c <bt_hci_le_adv_report+0x98>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   1690c:	89bb      	ldrh	r3, [r7, #12]
   1690e:	2b08      	cmp	r3, #8
   16910:	d92c      	bls.n	1696c <bt_hci_le_adv_report+0x78>
	return net_buf_simple_pull_mem(&buf->b, len);
   16912:	2109      	movs	r1, #9
   16914:	4630      	mov	r0, r6
   16916:	f00d fa35 	bl	23d84 <net_buf_simple_pull_mem>
   1691a:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1691c:	2301      	movs	r3, #1
   1691e:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   16922:	2200      	movs	r2, #0
   16924:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   16928:	237f      	movs	r3, #127	; 0x7f
   1692a:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   1692e:	7a03      	ldrb	r3, [r0, #8]
   16930:	4403      	add	r3, r0
   16932:	f993 3009 	ldrsb.w	r3, [r3, #9]
   16936:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   1693a:	23ff      	movs	r3, #255	; 0xff
   1693c:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   16940:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   16944:	7800      	ldrb	r0, [r0, #0]
   16946:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   1694a:	f00b fcaa 	bl	222a2 <get_adv_props_legacy>
   1694e:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   16952:	7a23      	ldrb	r3, [r4, #8]
   16954:	4632      	mov	r2, r6
   16956:	4669      	mov	r1, sp
   16958:	1c60      	adds	r0, r4, #1
   1695a:	f7ff ff33 	bl	167c4 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1695e:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   16960:	3101      	adds	r1, #1
   16962:	4630      	mov	r0, r6
   16964:	f00d fa06 	bl	23d74 <net_buf_simple_pull>
	while (num_reports--) {
   16968:	4628      	mov	r0, r5
   1696a:	e7cb      	b.n	16904 <bt_hci_le_adv_report+0x10>
   1696c:	4b08      	ldr	r3, [pc, #32]	; (16990 <bt_hci_le_adv_report+0x9c>)
   1696e:	4a09      	ldr	r2, [pc, #36]	; (16994 <bt_hci_le_adv_report+0xa0>)
   16970:	1a9b      	subs	r3, r3, r2
   16972:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected end of buffer");
   16974:	f04f 0100 	mov.w	r1, #0
   16978:	2201      	movs	r2, #1
   1697a:	f362 0102 	bfi	r1, r2, #0, #3
   1697e:	f36f 01c5 	bfc	r1, #3, #3
   16982:	f363 118f 	bfi	r1, r3, #6, #10
   16986:	4804      	ldr	r0, [pc, #16]	; (16998 <bt_hci_le_adv_report+0xa4>)
   16988:	f7fb fa64 	bl	11e54 <log_0>
	}
}
   1698c:	b005      	add	sp, #20
   1698e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16990:	00025dd0 	.word	0x00025dd0
   16994:	00025d80 	.word	0x00025d80
   16998:	00027148 	.word	0x00027148

0001699c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   1699c:	b538      	push	{r3, r4, r5, lr}
   1699e:	f3bf 8f5b 	dmb	ish
   169a2:	4b5a      	ldr	r3, [pc, #360]	; (16b0c <bt_le_scan_start+0x170>)
   169a4:	681b      	ldr	r3, [r3, #0]
   169a6:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   169aa:	f013 0f02 	tst.w	r3, #2
   169ae:	f000 80a1 	beq.w	16af4 <bt_le_scan_start+0x158>
   169b2:	4604      	mov	r4, r0
   169b4:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   169b6:	f00b fc85 	bl	222c4 <valid_le_scan_param>
   169ba:	2800      	cmp	r0, #0
   169bc:	f000 809d 	beq.w	16afa <bt_le_scan_start+0x15e>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   169c0:	7823      	ldrb	r3, [r4, #0]
   169c2:	b123      	cbz	r3, 169ce <bt_le_scan_start+0x32>
   169c4:	f00b fc6b 	bl	2229e <bt_id_scan_random_addr_check>
   169c8:	2800      	cmp	r0, #0
   169ca:	f000 8099 	beq.w	16b00 <bt_le_scan_start+0x164>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   169ce:	4b4f      	ldr	r3, [pc, #316]	; (16b0c <bt_le_scan_start+0x170>)
   169d0:	f3bf 8f5b 	dmb	ish
   169d4:	e853 2f00 	ldrex	r2, [r3]
   169d8:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   169dc:	e843 1000 	strex	r0, r1, [r3]
   169e0:	2800      	cmp	r0, #0
   169e2:	d1f7      	bne.n	169d4 <bt_le_scan_start+0x38>
   169e4:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   169e8:	f012 0f40 	tst.w	r2, #64	; 0x40
   169ec:	f040 808b 	bne.w	16b06 <bt_le_scan_start+0x16a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   169f0:	f3bf 8f5b 	dmb	ish
   169f4:	681b      	ldr	r3, [r3, #0]
   169f6:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   169fa:	f013 0f20 	tst.w	r3, #32
   169fe:	d003      	beq.n	16a08 <bt_le_scan_start+0x6c>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   16a00:	2000      	movs	r0, #0
   16a02:	f00b fc82 	bl	2230a <bt_le_scan_set_enable>
		if (err) {
   16a06:	bb68      	cbnz	r0, 16a64 <bt_le_scan_start+0xc8>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   16a08:	6863      	ldr	r3, [r4, #4]
	if (val) {
   16a0a:	f013 0f01 	tst.w	r3, #1
   16a0e:	d037      	beq.n	16a80 <bt_le_scan_start+0xe4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16a10:	4b3e      	ldr	r3, [pc, #248]	; (16b0c <bt_le_scan_start+0x170>)
   16a12:	f3bf 8f5b 	dmb	ish
   16a16:	e853 2f00 	ldrex	r2, [r3]
   16a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   16a1e:	e843 2100 	strex	r1, r2, [r3]
   16a22:	2900      	cmp	r1, #0
   16a24:	d1f7      	bne.n	16a16 <bt_le_scan_start+0x7a>
   16a26:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTERED,
			  param->options & BT_LE_SCAN_OPT_FILTER_ACCEPT_LIST);
   16a2a:	6863      	ldr	r3, [r4, #4]
   16a2c:	f013 0f02 	tst.w	r3, #2
   16a30:	d034      	beq.n	16a9c <bt_le_scan_start+0x100>
   16a32:	4b36      	ldr	r3, [pc, #216]	; (16b0c <bt_le_scan_start+0x170>)
   16a34:	f3bf 8f5b 	dmb	ish
   16a38:	e853 2f00 	ldrex	r2, [r3]
   16a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   16a40:	e843 2100 	strex	r1, r2, [r3]
   16a44:	2900      	cmp	r1, #0
   16a46:	d1f7      	bne.n	16a38 <bt_le_scan_start+0x9c>
   16a48:	f3bf 8f5b 	dmb	ish
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
   16a4c:	89a3      	ldrh	r3, [r4, #12]
   16a4e:	bb9b      	cbnz	r3, 16ab8 <bt_le_scan_start+0x11c>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
   16a50:	8962      	ldrh	r2, [r4, #10]
   16a52:	8921      	ldrh	r1, [r4, #8]
   16a54:	7820      	ldrb	r0, [r4, #0]
   16a56:	f7ff fdc3 	bl	165e0 <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
   16a5a:	2800      	cmp	r0, #0
   16a5c:	d13c      	bne.n	16ad8 <bt_le_scan_start+0x13c>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   16a5e:	4b2c      	ldr	r3, [pc, #176]	; (16b10 <bt_le_scan_start+0x174>)
   16a60:	601d      	str	r5, [r3, #0]

	return 0;
}
   16a62:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16a64:	4b29      	ldr	r3, [pc, #164]	; (16b0c <bt_le_scan_start+0x170>)
   16a66:	f3bf 8f5b 	dmb	ish
   16a6a:	e853 2f00 	ldrex	r2, [r3]
   16a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16a72:	e843 2100 	strex	r1, r2, [r3]
   16a76:	2900      	cmp	r1, #0
   16a78:	d1f7      	bne.n	16a6a <bt_le_scan_start+0xce>
   16a7a:	f3bf 8f5b 	dmb	ish
			return err;
   16a7e:	e7f0      	b.n	16a62 <bt_le_scan_start+0xc6>
   16a80:	4b22      	ldr	r3, [pc, #136]	; (16b0c <bt_le_scan_start+0x170>)
   16a82:	f3bf 8f5b 	dmb	ish
   16a86:	e853 2f00 	ldrex	r2, [r3]
   16a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   16a8e:	e843 2100 	strex	r1, r2, [r3]
   16a92:	2900      	cmp	r1, #0
   16a94:	d1f7      	bne.n	16a86 <bt_le_scan_start+0xea>
   16a96:	f3bf 8f5b 	dmb	ish
   16a9a:	e7c6      	b.n	16a2a <bt_le_scan_start+0x8e>
   16a9c:	4b1b      	ldr	r3, [pc, #108]	; (16b0c <bt_le_scan_start+0x170>)
   16a9e:	f3bf 8f5b 	dmb	ish
   16aa2:	e853 2f00 	ldrex	r2, [r3]
   16aa6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   16aaa:	e843 2100 	strex	r1, r2, [r3]
   16aae:	2900      	cmp	r1, #0
   16ab0:	d1f7      	bne.n	16aa2 <bt_le_scan_start+0x106>
   16ab2:	f3bf 8f5b 	dmb	ish
   16ab6:	e7c9      	b.n	16a4c <bt_le_scan_start+0xb0>
   16ab8:	4b14      	ldr	r3, [pc, #80]	; (16b0c <bt_le_scan_start+0x170>)
   16aba:	f3bf 8f5b 	dmb	ish
   16abe:	e853 2f00 	ldrex	r2, [r3]
   16ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16ac6:	e843 2100 	strex	r1, r2, [r3]
   16aca:	2900      	cmp	r1, #0
   16acc:	d1f7      	bne.n	16abe <bt_le_scan_start+0x122>
   16ace:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
   16ad2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16ad6:	e7c4      	b.n	16a62 <bt_le_scan_start+0xc6>
   16ad8:	4b0c      	ldr	r3, [pc, #48]	; (16b0c <bt_le_scan_start+0x170>)
   16ada:	f3bf 8f5b 	dmb	ish
   16ade:	e853 2f00 	ldrex	r2, [r3]
   16ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16ae6:	e843 2100 	strex	r1, r2, [r3]
   16aea:	2900      	cmp	r1, #0
   16aec:	d1f7      	bne.n	16ade <bt_le_scan_start+0x142>
   16aee:	f3bf 8f5b 	dmb	ish
		return err;
   16af2:	e7b6      	b.n	16a62 <bt_le_scan_start+0xc6>
		return -EAGAIN;
   16af4:	f06f 000a 	mvn.w	r0, #10
   16af8:	e7b3      	b.n	16a62 <bt_le_scan_start+0xc6>
		return -EINVAL;
   16afa:	f06f 0015 	mvn.w	r0, #21
   16afe:	e7b0      	b.n	16a62 <bt_le_scan_start+0xc6>
		return -EINVAL;
   16b00:	f06f 0015 	mvn.w	r0, #21
   16b04:	e7ad      	b.n	16a62 <bt_le_scan_start+0xc6>
		return -EALREADY;
   16b06:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16b0a:	e7aa      	b.n	16a62 <bt_le_scan_start+0xc6>
   16b0c:	20000374 	.word	0x20000374
   16b10:	200028fc 	.word	0x200028fc

00016b14 <tx_free>:
		return "(unknown)";
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
   16b14:	b508      	push	{r3, lr}
   16b16:	4601      	mov	r1, r0
	tx->cb = NULL;
   16b18:	2300      	movs	r3, #0
   16b1a:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   16b1c:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   16b1e:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   16b20:	4801      	ldr	r0, [pc, #4]	; (16b28 <tx_free+0x14>)
   16b22:	f00e fa8c 	bl	2503e <k_queue_append>
}
   16b26:	bd08      	pop	{r3, pc}
   16b28:	2000079c 	.word	0x2000079c

00016b2c <conn_tx_alloc>:
		__ASSERT(false, "Invalid connection type %u", conn->type);
	}
}

static struct bt_conn_tx *conn_tx_alloc(void)
{
   16b2c:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   16b2e:	f006 fe99 	bl	1d864 <z_impl_z_current_get>
	/* The TX context always get freed in the system workqueue,
	 * so if we're in the same workqueue but there are no immediate
	 * contexts available, there's no chance we'll get one by waiting.
	 */
	if (k_current_get() == &k_sys_work_q.thread) {
   16b32:	4b08      	ldr	r3, [pc, #32]	; (16b54 <conn_tx_alloc+0x28>)
   16b34:	4283      	cmp	r3, r0
   16b36:	d007      	beq.n	16b48 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   16b38:	f04f 32ff 	mov.w	r2, #4294967295
   16b3c:	f04f 33ff 	mov.w	r3, #4294967295
   16b40:	4805      	ldr	r0, [pc, #20]	; (16b58 <conn_tx_alloc+0x2c>)
   16b42:	f006 f877 	bl	1cc34 <z_impl_k_queue_get>

		BT_WARN("Unable to get an immediate free conn_tx");
	}

	return k_fifo_get(&free_tx, K_FOREVER);
}
   16b46:	bd08      	pop	{r3, pc}
   16b48:	2200      	movs	r2, #0
   16b4a:	2300      	movs	r3, #0
   16b4c:	4802      	ldr	r0, [pc, #8]	; (16b58 <conn_tx_alloc+0x2c>)
   16b4e:	f006 f871 	bl	1cc34 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   16b52:	e7f8      	b.n	16b46 <conn_tx_alloc+0x1a>
   16b54:	20001ec0 	.word	0x20001ec0
   16b58:	2000079c 	.word	0x2000079c

00016b5c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   16b5c:	b538      	push	{r3, r4, r5, lr}
   16b5e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   16b60:	4b0f      	ldr	r3, [pc, #60]	; (16ba0 <notify_connected+0x44>)
   16b62:	681c      	ldr	r4, [r3, #0]
   16b64:	e000      	b.n	16b68 <notify_connected+0xc>
   16b66:	6924      	ldr	r4, [r4, #16]
   16b68:	b134      	cbz	r4, 16b78 <notify_connected+0x1c>
		if (cb->connected) {
   16b6a:	6823      	ldr	r3, [r4, #0]
   16b6c:	2b00      	cmp	r3, #0
   16b6e:	d0fa      	beq.n	16b66 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   16b70:	7a69      	ldrb	r1, [r5, #9]
   16b72:	4628      	mov	r0, r5
   16b74:	4798      	blx	r3
   16b76:	e7f6      	b.n	16b66 <notify_connected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16b78:	4c0a      	ldr	r4, [pc, #40]	; (16ba4 <notify_connected+0x48>)
   16b7a:	e000      	b.n	16b7e <notify_connected+0x22>
   16b7c:	3414      	adds	r4, #20
   16b7e:	4b0a      	ldr	r3, [pc, #40]	; (16ba8 <notify_connected+0x4c>)
   16b80:	429c      	cmp	r4, r3
   16b82:	d206      	bcs.n	16b92 <notify_connected+0x36>
		if (cb->connected) {
   16b84:	6823      	ldr	r3, [r4, #0]
   16b86:	2b00      	cmp	r3, #0
   16b88:	d0f8      	beq.n	16b7c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   16b8a:	7a69      	ldrb	r1, [r5, #9]
   16b8c:	4628      	mov	r0, r5
   16b8e:	4798      	blx	r3
   16b90:	e7f4      	b.n	16b7c <notify_connected+0x20>
		}
	}

	if (!conn->err) {
   16b92:	7a6b      	ldrb	r3, [r5, #9]
   16b94:	b103      	cbz	r3, 16b98 <notify_connected+0x3c>
		bt_gatt_connected(conn);
	}
}
   16b96:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   16b98:	4628      	mov	r0, r5
   16b9a:	f002 fdd5 	bl	19748 <bt_gatt_connected>
}
   16b9e:	e7fa      	b.n	16b96 <notify_connected+0x3a>
   16ba0:	20002900 	.word	0x20002900
   16ba4:	00025d70 	.word	0x00025d70
   16ba8:	00025d70 	.word	0x00025d70

00016bac <bt_conn_get_pkts>:
}
   16bac:	4800      	ldr	r0, [pc, #0]	; (16bb0 <bt_conn_get_pkts+0x4>)
   16bae:	4770      	bx	lr
   16bb0:	200003a8 	.word	0x200003a8

00016bb4 <send_frag>:
{
   16bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bb8:	4605      	mov	r5, r0
   16bba:	460e      	mov	r6, r1
   16bbc:	4691      	mov	r9, r2
   16bbe:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   16bc0:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   16bc2:	f7ff fff3 	bl	16bac <bt_conn_get_pkts>
   16bc6:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   16bc8:	f04f 32ff 	mov.w	r2, #4294967295
   16bcc:	f04f 33ff 	mov.w	r3, #4294967295
   16bd0:	f006 f894 	bl	1ccfc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   16bd4:	7aab      	ldrb	r3, [r5, #10]
   16bd6:	2b07      	cmp	r3, #7
   16bd8:	d159      	bne.n	16c8e <send_frag+0xda>
   16bda:	f04f 0240 	mov.w	r2, #64	; 0x40
   16bde:	f3ef 8311 	mrs	r3, BASEPRI
   16be2:	f382 8812 	msr	BASEPRI_MAX, r2
   16be6:	f3bf 8f6f 	isb	sy
	if (tx) {
   16bea:	b1af      	cbz	r7, 16c18 <send_frag+0x64>
	parent->next = child;
   16bec:	2200      	movs	r2, #0
   16bee:	603a      	str	r2, [r7, #0]
	return list->tail;
   16bf0:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   16bf2:	b172      	cbz	r2, 16c12 <send_frag+0x5e>
	parent->next = child;
   16bf4:	6017      	str	r7, [r2, #0]
	list->tail = node;
   16bf6:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   16bf8:	f383 8811 	msr	BASEPRI, r3
   16bfc:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   16c00:	464a      	mov	r2, r9
   16c02:	4631      	mov	r1, r6
   16c04:	4628      	mov	r0, r5
   16c06:	f00b fbb5 	bl	22374 <send_acl>
	if (err) {
   16c0a:	4601      	mov	r1, r0
   16c0c:	b988      	cbnz	r0, 16c32 <send_frag+0x7e>
	return true;
   16c0e:	2001      	movs	r0, #1
   16c10:	e046      	b.n	16ca0 <send_frag+0xec>
   16c12:	61af      	str	r7, [r5, #24]
	list->head = node;
   16c14:	616f      	str	r7, [r5, #20]
}
   16c16:	e7ef      	b.n	16bf8 <send_frag+0x44>
	return list->tail;
   16c18:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   16c1a:	b13a      	cbz	r2, 16c2c <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   16c1c:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   16c20:	f8da 2000 	ldr.w	r2, [sl]
   16c24:	3201      	adds	r2, #1
   16c26:	f8ca 2000 	str.w	r2, [sl]
   16c2a:	e7e5      	b.n	16bf8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   16c2c:	f105 0a1c 	add.w	sl, r5, #28
   16c30:	e7f6      	b.n	16c20 <send_frag+0x6c>
   16c32:	4b26      	ldr	r3, [pc, #152]	; (16ccc <send_frag+0x118>)
   16c34:	4a26      	ldr	r2, [pc, #152]	; (16cd0 <send_frag+0x11c>)
   16c36:	1a9b      	subs	r3, r3, r2
   16c38:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   16c3a:	f04f 0200 	mov.w	r2, #0
   16c3e:	2001      	movs	r0, #1
   16c40:	f360 0202 	bfi	r2, r0, #0, #3
   16c44:	f36f 02c5 	bfc	r2, #3, #3
   16c48:	f363 128f 	bfi	r2, r3, #6, #10
   16c4c:	4821      	ldr	r0, [pc, #132]	; (16cd4 <send_frag+0x120>)
   16c4e:	f7fb f84b 	bl	11ce8 <log_1>
	__asm__ volatile(
   16c52:	f04f 0340 	mov.w	r3, #64	; 0x40
   16c56:	f3ef 8011 	mrs	r0, BASEPRI
   16c5a:	f383 8812 	msr	BASEPRI_MAX, r3
   16c5e:	f3bf 8f6f 	isb	sy
		if (tx) {
   16c62:	b347      	cbz	r7, 16cb6 <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   16c64:	4639      	mov	r1, r7
	return list->head;
   16c66:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16c68:	2200      	movs	r2, #0
   16c6a:	b163      	cbz	r3, 16c86 <send_frag+0xd2>
   16c6c:	428b      	cmp	r3, r1
   16c6e:	d002      	beq.n	16c76 <send_frag+0xc2>
   16c70:	461a      	mov	r2, r3
   16c72:	681b      	ldr	r3, [r3, #0]
   16c74:	e7f9      	b.n	16c6a <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   16c76:	b1aa      	cbz	r2, 16ca4 <send_frag+0xf0>
	return node->next;
   16c78:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   16c7a:	6013      	str	r3, [r2, #0]
	return list->tail;
   16c7c:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   16c7e:	42bb      	cmp	r3, r7
   16c80:	d017      	beq.n	16cb2 <send_frag+0xfe>
	parent->next = child;
   16c82:	2300      	movs	r3, #0
   16c84:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   16c86:	f380 8811 	msr	BASEPRI, r0
   16c8a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   16c8e:	4640      	mov	r0, r8
   16c90:	f006 f80c 	bl	1ccac <z_impl_k_sem_give>
	if (tx) {
   16c94:	b117      	cbz	r7, 16c9c <send_frag+0xe8>
		tx_free(tx);
   16c96:	4638      	mov	r0, r7
   16c98:	f7ff ff3c 	bl	16b14 <tx_free>
	if (always_consume) {
   16c9c:	b98c      	cbnz	r4, 16cc2 <send_frag+0x10e>
	return false;
   16c9e:	4620      	mov	r0, r4
}
   16ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   16ca4:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   16ca6:	616b      	str	r3, [r5, #20]
	return list->tail;
   16ca8:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   16caa:	42ba      	cmp	r2, r7
   16cac:	d1e9      	bne.n	16c82 <send_frag+0xce>
	list->tail = node;
   16cae:	61ab      	str	r3, [r5, #24]
}
   16cb0:	e7e7      	b.n	16c82 <send_frag+0xce>
	list->tail = node;
   16cb2:	61aa      	str	r2, [r5, #24]
}
   16cb4:	e7e5      	b.n	16c82 <send_frag+0xce>
			(*pending_no_cb)--;
   16cb6:	f8da 3000 	ldr.w	r3, [sl]
   16cba:	3b01      	subs	r3, #1
   16cbc:	f8ca 3000 	str.w	r3, [sl]
   16cc0:	e7e1      	b.n	16c86 <send_frag+0xd2>
		net_buf_unref(buf);
   16cc2:	4630      	mov	r0, r6
   16cc4:	f00c fff3 	bl	23cae <net_buf_unref>
	return false;
   16cc8:	2000      	movs	r0, #0
   16cca:	e7e9      	b.n	16ca0 <send_frag+0xec>
   16ccc:	00025d98 	.word	0x00025d98
   16cd0:	00025d80 	.word	0x00025d80
   16cd4:	00026df8 	.word	0x00026df8

00016cd8 <bt_acl_recv>:
{
   16cd8:	b570      	push	{r4, r5, r6, lr}
   16cda:	4604      	mov	r4, r0
   16cdc:	460d      	mov	r5, r1
	switch (flags) {
   16cde:	2a01      	cmp	r2, #1
   16ce0:	d02d      	beq.n	16d3e <bt_acl_recv+0x66>
   16ce2:	4611      	mov	r1, r2
   16ce4:	2a02      	cmp	r2, #2
   16ce6:	d173      	bne.n	16dd0 <bt_acl_recv+0xf8>
		if (conn->rx) {
   16ce8:	6903      	ldr	r3, [r0, #16]
   16cea:	b193      	cbz	r3, 16d12 <bt_acl_recv+0x3a>
   16cec:	4b4e      	ldr	r3, [pc, #312]	; (16e28 <bt_acl_recv+0x150>)
   16cee:	4a4f      	ldr	r2, [pc, #316]	; (16e2c <bt_acl_recv+0x154>)
   16cf0:	1a9b      	subs	r3, r3, r2
   16cf2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   16cf4:	f04f 0100 	mov.w	r1, #0
   16cf8:	2201      	movs	r2, #1
   16cfa:	f362 0102 	bfi	r1, r2, #0, #3
   16cfe:	f36f 01c5 	bfc	r1, #3, #3
   16d02:	f363 118f 	bfi	r1, r3, #6, #10
   16d06:	484a      	ldr	r0, [pc, #296]	; (16e30 <bt_acl_recv+0x158>)
   16d08:	f7fb f8a4 	bl	11e54 <log_0>
			bt_conn_reset_rx_state(conn);
   16d0c:	4620      	mov	r0, r4
   16d0e:	f00b fb94 	bl	2243a <bt_conn_reset_rx_state>
		conn->rx = buf;
   16d12:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16d14:	6921      	ldr	r1, [r4, #16]
   16d16:	8988      	ldrh	r0, [r1, #12]
   16d18:	2801      	cmp	r0, #1
   16d1a:	d96f      	bls.n	16dfc <bt_acl_recv+0x124>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   16d1c:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   16d1e:	785d      	ldrb	r5, [r3, #1]
   16d20:	781a      	ldrb	r2, [r3, #0]
   16d22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   16d26:	3204      	adds	r2, #4
   16d28:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   16d2a:	4290      	cmp	r0, r2
   16d2c:	d366      	bcc.n	16dfc <bt_acl_recv+0x124>
	if (conn->rx->len > acl_total_len) {
   16d2e:	d866      	bhi.n	16dfe <bt_acl_recv+0x126>
	conn->rx = NULL;
   16d30:	2300      	movs	r3, #0
   16d32:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16d34:	2201      	movs	r2, #1
   16d36:	4620      	mov	r0, r4
   16d38:	f000 fe40 	bl	179bc <bt_l2cap_recv>
   16d3c:	e05e      	b.n	16dfc <bt_acl_recv+0x124>
		if (!conn->rx) {
   16d3e:	6900      	ldr	r0, [r0, #16]
   16d40:	b180      	cbz	r0, 16d64 <bt_acl_recv+0x8c>
		if (!buf->len) {
   16d42:	898e      	ldrh	r6, [r1, #12]
   16d44:	b32e      	cbz	r6, 16d92 <bt_acl_recv+0xba>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   16d46:	3008      	adds	r0, #8
   16d48:	f00d f838 	bl	23dbc <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   16d4c:	4286      	cmp	r6, r0
   16d4e:	d824      	bhi.n	16d9a <bt_acl_recv+0xc2>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   16d50:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16d52:	89aa      	ldrh	r2, [r5, #12]
   16d54:	68a9      	ldr	r1, [r5, #8]
   16d56:	3008      	adds	r0, #8
   16d58:	f00c fff9 	bl	23d4e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   16d5c:	4628      	mov	r0, r5
   16d5e:	f00c ffa6 	bl	23cae <net_buf_unref>
		break;
   16d62:	e7d7      	b.n	16d14 <bt_acl_recv+0x3c>
   16d64:	4b30      	ldr	r3, [pc, #192]	; (16e28 <bt_acl_recv+0x150>)
   16d66:	4a31      	ldr	r2, [pc, #196]	; (16e2c <bt_acl_recv+0x154>)
   16d68:	1a9b      	subs	r3, r3, r2
   16d6a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   16d6c:	f04f 0100 	mov.w	r1, #0
   16d70:	2201      	movs	r2, #1
   16d72:	f362 0102 	bfi	r1, r2, #0, #3
   16d76:	f36f 01c5 	bfc	r1, #3, #3
   16d7a:	f363 118f 	bfi	r1, r3, #6, #10
   16d7e:	482d      	ldr	r0, [pc, #180]	; (16e34 <bt_acl_recv+0x15c>)
   16d80:	f7fb f868 	bl	11e54 <log_0>
			bt_conn_reset_rx_state(conn);
   16d84:	4620      	mov	r0, r4
   16d86:	f00b fb58 	bl	2243a <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   16d8a:	4628      	mov	r0, r5
   16d8c:	f00c ff8f 	bl	23cae <net_buf_unref>
			return;
   16d90:	e034      	b.n	16dfc <bt_acl_recv+0x124>
			net_buf_unref(buf);
   16d92:	4608      	mov	r0, r1
   16d94:	f00c ff8b 	bl	23cae <net_buf_unref>
			return;
   16d98:	e030      	b.n	16dfc <bt_acl_recv+0x124>
   16d9a:	4b23      	ldr	r3, [pc, #140]	; (16e28 <bt_acl_recv+0x150>)
   16d9c:	4a23      	ldr	r2, [pc, #140]	; (16e2c <bt_acl_recv+0x154>)
   16d9e:	1a9b      	subs	r3, r3, r2
   16da0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   16da2:	f04f 0100 	mov.w	r1, #0
   16da6:	2201      	movs	r2, #1
   16da8:	f362 0102 	bfi	r1, r2, #0, #3
   16dac:	f36f 01c5 	bfc	r1, #3, #3
   16db0:	f363 118f 	bfi	r1, r3, #6, #10
   16db4:	4820      	ldr	r0, [pc, #128]	; (16e38 <bt_acl_recv+0x160>)
   16db6:	f7fb f84d 	bl	11e54 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   16dba:	2200      	movs	r2, #0
   16dbc:	6921      	ldr	r1, [r4, #16]
   16dbe:	4620      	mov	r0, r4
   16dc0:	f000 fdfc 	bl	179bc <bt_l2cap_recv>
			conn->rx = NULL;
   16dc4:	2300      	movs	r3, #0
   16dc6:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   16dc8:	4628      	mov	r0, r5
   16dca:	f00c ff70 	bl	23cae <net_buf_unref>
			return;
   16dce:	e015      	b.n	16dfc <bt_acl_recv+0x124>
   16dd0:	4b15      	ldr	r3, [pc, #84]	; (16e28 <bt_acl_recv+0x150>)
   16dd2:	4a16      	ldr	r2, [pc, #88]	; (16e2c <bt_acl_recv+0x154>)
   16dd4:	1a9b      	subs	r3, r3, r2
   16dd6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   16dd8:	f04f 0200 	mov.w	r2, #0
   16ddc:	2001      	movs	r0, #1
   16dde:	f360 0202 	bfi	r2, r0, #0, #3
   16de2:	f36f 02c5 	bfc	r2, #3, #3
   16de6:	f363 128f 	bfi	r2, r3, #6, #10
   16dea:	4814      	ldr	r0, [pc, #80]	; (16e3c <bt_acl_recv+0x164>)
   16dec:	f7fa ff7c 	bl	11ce8 <log_1>
		bt_conn_reset_rx_state(conn);
   16df0:	4620      	mov	r0, r4
   16df2:	f00b fb22 	bl	2243a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   16df6:	4628      	mov	r0, r5
   16df8:	f00c ff59 	bl	23cae <net_buf_unref>
}
   16dfc:	bd70      	pop	{r4, r5, r6, pc}
   16dfe:	490a      	ldr	r1, [pc, #40]	; (16e28 <bt_acl_recv+0x150>)
   16e00:	4b0a      	ldr	r3, [pc, #40]	; (16e2c <bt_acl_recv+0x154>)
   16e02:	1ac9      	subs	r1, r1, r3
   16e04:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   16e06:	f04f 0300 	mov.w	r3, #0
   16e0a:	2501      	movs	r5, #1
   16e0c:	f365 0302 	bfi	r3, r5, #0, #3
   16e10:	f36f 03c5 	bfc	r3, #3, #3
   16e14:	f361 138f 	bfi	r3, r1, #6, #10
   16e18:	4601      	mov	r1, r0
   16e1a:	4809      	ldr	r0, [pc, #36]	; (16e40 <bt_acl_recv+0x168>)
   16e1c:	f7fa ff9a 	bl	11d54 <log_2>
		bt_conn_reset_rx_state(conn);
   16e20:	4620      	mov	r0, r4
   16e22:	f00b fb0a 	bl	2243a <bt_conn_reset_rx_state>
		return;
   16e26:	e7e9      	b.n	16dfc <bt_acl_recv+0x124>
   16e28:	00025d98 	.word	0x00025d98
   16e2c:	00025d80 	.word	0x00025d80
   16e30:	00027164 	.word	0x00027164
   16e34:	00027184 	.word	0x00027184
   16e38:	000271a4 	.word	0x000271a4
   16e3c:	000271cc 	.word	0x000271cc
   16e40:	000271ec 	.word	0x000271ec

00016e44 <bt_conn_send_cb>:
{
   16e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e48:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   16e4a:	7a83      	ldrb	r3, [r0, #10]
   16e4c:	2b07      	cmp	r3, #7
   16e4e:	d118      	bne.n	16e82 <bt_conn_send_cb+0x3e>
   16e50:	4604      	mov	r4, r0
   16e52:	460d      	mov	r5, r1
   16e54:	4616      	mov	r6, r2
	if (cb) {
   16e56:	2a00      	cmp	r2, #0
   16e58:	d04f      	beq.n	16efa <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   16e5a:	f7ff fe67 	bl	16b2c <conn_tx_alloc>
		if (!tx) {
   16e5e:	4680      	mov	r8, r0
   16e60:	b310      	cbz	r0, 16ea8 <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   16e62:	7aa3      	ldrb	r3, [r4, #10]
   16e64:	2b07      	cmp	r3, #7
   16e66:	d132      	bne.n	16ece <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   16e68:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   16e6a:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   16e6c:	2300      	movs	r3, #0
   16e6e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   16e70:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   16e72:	4629      	mov	r1, r5
   16e74:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16e78:	f00c ff0c 	bl	23c94 <net_buf_put>
	return 0;
   16e7c:	2000      	movs	r0, #0
}
   16e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e82:	4b1f      	ldr	r3, [pc, #124]	; (16f00 <bt_conn_send_cb+0xbc>)
   16e84:	4a1f      	ldr	r2, [pc, #124]	; (16f04 <bt_conn_send_cb+0xc0>)
   16e86:	1a9b      	subs	r3, r3, r2
   16e88:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   16e8a:	f04f 0100 	mov.w	r1, #0
   16e8e:	2201      	movs	r2, #1
   16e90:	f362 0102 	bfi	r1, r2, #0, #3
   16e94:	f36f 01c5 	bfc	r1, #3, #3
   16e98:	f363 118f 	bfi	r1, r3, #6, #10
   16e9c:	481a      	ldr	r0, [pc, #104]	; (16f08 <bt_conn_send_cb+0xc4>)
   16e9e:	f7fa ffd9 	bl	11e54 <log_0>
		return -ENOTCONN;
   16ea2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16ea6:	e7ea      	b.n	16e7e <bt_conn_send_cb+0x3a>
   16ea8:	4b15      	ldr	r3, [pc, #84]	; (16f00 <bt_conn_send_cb+0xbc>)
   16eaa:	4a16      	ldr	r2, [pc, #88]	; (16f04 <bt_conn_send_cb+0xc0>)
   16eac:	1a9b      	subs	r3, r3, r2
   16eae:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   16eb0:	f04f 0100 	mov.w	r1, #0
   16eb4:	2201      	movs	r2, #1
   16eb6:	f362 0102 	bfi	r1, r2, #0, #3
   16eba:	f36f 01c5 	bfc	r1, #3, #3
   16ebe:	f363 118f 	bfi	r1, r3, #6, #10
   16ec2:	4812      	ldr	r0, [pc, #72]	; (16f0c <bt_conn_send_cb+0xc8>)
   16ec4:	f7fa ffc6 	bl	11e54 <log_0>
			return -ENOBUFS;
   16ec8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16ecc:	e7d7      	b.n	16e7e <bt_conn_send_cb+0x3a>
   16ece:	4b0c      	ldr	r3, [pc, #48]	; (16f00 <bt_conn_send_cb+0xbc>)
   16ed0:	4a0c      	ldr	r2, [pc, #48]	; (16f04 <bt_conn_send_cb+0xc0>)
   16ed2:	1a9b      	subs	r3, r3, r2
   16ed4:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   16ed6:	f04f 0100 	mov.w	r1, #0
   16eda:	2202      	movs	r2, #2
   16edc:	f362 0102 	bfi	r1, r2, #0, #3
   16ee0:	f36f 01c5 	bfc	r1, #3, #3
   16ee4:	f363 118f 	bfi	r1, r3, #6, #10
   16ee8:	4809      	ldr	r0, [pc, #36]	; (16f10 <bt_conn_send_cb+0xcc>)
   16eea:	f7fa ffb3 	bl	11e54 <log_0>
			tx_free(tx);
   16eee:	4640      	mov	r0, r8
   16ef0:	f7ff fe10 	bl	16b14 <tx_free>
			return -ENOTCONN;
   16ef4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16ef8:	e7c1      	b.n	16e7e <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   16efa:	2300      	movs	r3, #0
   16efc:	614b      	str	r3, [r1, #20]
   16efe:	e7b8      	b.n	16e72 <bt_conn_send_cb+0x2e>
   16f00:	00025d98 	.word	0x00025d98
   16f04:	00025d80 	.word	0x00025d80
   16f08:	00027208 	.word	0x00027208
   16f0c:	00027218 	.word	0x00027218
   16f10:	00027238 	.word	0x00027238

00016f14 <bt_conn_prepare_events>:
{
   16f14:	b570      	push	{r4, r5, r6, lr}
   16f16:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   16f18:	4b0d      	ldr	r3, [pc, #52]	; (16f50 <bt_conn_prepare_events+0x3c>)
   16f1a:	2400      	movs	r4, #0
   16f1c:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16f1e:	4622      	mov	r2, r4
   16f20:	2101      	movs	r1, #1
   16f22:	f00e fd05 	bl	25930 <k_poll_event_init>
   16f26:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16f28:	2c00      	cmp	r4, #0
   16f2a:	dd01      	ble.n	16f30 <bt_conn_prepare_events+0x1c>
}
   16f2c:	4628      	mov	r0, r5
   16f2e:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
   16f30:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   16f34:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   16f38:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   16f3c:	4b05      	ldr	r3, [pc, #20]	; (16f54 <bt_conn_prepare_events+0x40>)
   16f3e:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   16f42:	f00b faa1 	bl	22488 <conn_prepare_events>
   16f46:	b900      	cbnz	r0, 16f4a <bt_conn_prepare_events+0x36>
			ev_count++;
   16f48:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16f4a:	3401      	adds	r4, #1
   16f4c:	e7ec      	b.n	16f28 <bt_conn_prepare_events+0x14>
   16f4e:	bf00      	nop
   16f50:	20000478 	.word	0x20000478
   16f54:	20001840 	.word	0x20001840

00016f58 <bt_conn_lookup_handle>:
{
   16f58:	b508      	push	{r3, lr}
   16f5a:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   16f5c:	2101      	movs	r1, #1
   16f5e:	4802      	ldr	r0, [pc, #8]	; (16f68 <bt_conn_lookup_handle+0x10>)
   16f60:	f00b fb07 	bl	22572 <conn_lookup_handle>
}
   16f64:	bd08      	pop	{r3, pc}
   16f66:	bf00      	nop
   16f68:	20001840 	.word	0x20001840

00016f6c <bt_conn_set_state>:
{
   16f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f6e:	460e      	mov	r6, r1
	if (conn->state == state) {
   16f70:	7a85      	ldrb	r5, [r0, #10]
   16f72:	428d      	cmp	r5, r1
   16f74:	d014      	beq.n	16fa0 <bt_conn_set_state+0x34>
   16f76:	4604      	mov	r4, r0
	conn->state = state;
   16f78:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   16f7a:	2d00      	cmp	r5, #0
   16f7c:	d03d      	beq.n	16ffa <bt_conn_set_state+0x8e>
   16f7e:	2d06      	cmp	r5, #6
   16f80:	d041      	beq.n	17006 <bt_conn_set_state+0x9a>
	switch (conn->state) {
   16f82:	7aa3      	ldrb	r3, [r4, #10]
   16f84:	2b08      	cmp	r3, #8
   16f86:	f200 80e3 	bhi.w	17150 <bt_conn_set_state+0x1e4>
   16f8a:	e8df f013 	tbh	[pc, r3, lsl #1]
   16f8e:	0053      	.short	0x0053
   16f90:	00e000dd 	.word	0x00e000dd
   16f94:	00e000e0 	.word	0x00e000e0
   16f98:	00b900e0 	.word	0x00b900e0
   16f9c:	00e00043 	.word	0x00e00043
   16fa0:	4b74      	ldr	r3, [pc, #464]	; (17174 <bt_conn_set_state+0x208>)
   16fa2:	4a75      	ldr	r2, [pc, #468]	; (17178 <bt_conn_set_state+0x20c>)
   16fa4:	1a9b      	subs	r3, r3, r2
   16fa6:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   16fa8:	f04f 0200 	mov.w	r2, #0
   16fac:	2102      	movs	r1, #2
   16fae:	f361 0202 	bfi	r2, r1, #0, #3
   16fb2:	f36f 02c5 	bfc	r2, #3, #3
   16fb6:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   16fba:	2e08      	cmp	r6, #8
   16fbc:	d819      	bhi.n	16ff2 <bt_conn_set_state+0x86>
   16fbe:	e8df f006 	tbb	[pc, r6]
   16fc2:	1a05      	.short	0x1a05
   16fc4:	0c0e100a 	.word	0x0c0e100a
   16fc8:	1412      	.short	0x1412
   16fca:	16          	.byte	0x16
   16fcb:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   16fcc:	496b      	ldr	r1, [pc, #428]	; (1717c <bt_conn_set_state+0x210>)
   16fce:	486c      	ldr	r0, [pc, #432]	; (17180 <bt_conn_set_state+0x214>)
   16fd0:	f7fa fe8a 	bl	11ce8 <log_1>
		return;
   16fd4:	e0bb      	b.n	1714e <bt_conn_set_state+0x1e2>
		return "connect-scan";
   16fd6:	496b      	ldr	r1, [pc, #428]	; (17184 <bt_conn_set_state+0x218>)
   16fd8:	e7f9      	b.n	16fce <bt_conn_set_state+0x62>
		return "connect-dir-adv";
   16fda:	496b      	ldr	r1, [pc, #428]	; (17188 <bt_conn_set_state+0x21c>)
   16fdc:	e7f7      	b.n	16fce <bt_conn_set_state+0x62>
		return "connect-adv";
   16fde:	496b      	ldr	r1, [pc, #428]	; (1718c <bt_conn_set_state+0x220>)
   16fe0:	e7f5      	b.n	16fce <bt_conn_set_state+0x62>
		return "connect-auto";
   16fe2:	496b      	ldr	r1, [pc, #428]	; (17190 <bt_conn_set_state+0x224>)
   16fe4:	e7f3      	b.n	16fce <bt_conn_set_state+0x62>
		return "connect";
   16fe6:	496b      	ldr	r1, [pc, #428]	; (17194 <bt_conn_set_state+0x228>)
   16fe8:	e7f1      	b.n	16fce <bt_conn_set_state+0x62>
		return "connected";
   16fea:	496b      	ldr	r1, [pc, #428]	; (17198 <bt_conn_set_state+0x22c>)
   16fec:	e7ef      	b.n	16fce <bt_conn_set_state+0x62>
		return "disconnect";
   16fee:	496b      	ldr	r1, [pc, #428]	; (1719c <bt_conn_set_state+0x230>)
   16ff0:	e7ed      	b.n	16fce <bt_conn_set_state+0x62>
		return "(unknown)";
   16ff2:	496b      	ldr	r1, [pc, #428]	; (171a0 <bt_conn_set_state+0x234>)
   16ff4:	e7eb      	b.n	16fce <bt_conn_set_state+0x62>
		return "disconnect-complete";
   16ff6:	496b      	ldr	r1, [pc, #428]	; (171a4 <bt_conn_set_state+0x238>)
   16ff8:	e7e9      	b.n	16fce <bt_conn_set_state+0x62>
		if (conn->type != BT_CONN_TYPE_ISO) {
   16ffa:	7883      	ldrb	r3, [r0, #2]
   16ffc:	2b08      	cmp	r3, #8
   16ffe:	d0c0      	beq.n	16f82 <bt_conn_set_state+0x16>
			bt_conn_ref(conn);
   17000:	f00b fa83 	bl	2250a <bt_conn_ref>
   17004:	e7bd      	b.n	16f82 <bt_conn_set_state+0x16>
		    conn->type == BT_CONN_TYPE_LE) {
   17006:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17008:	2b01      	cmp	r3, #1
   1700a:	d1ba      	bne.n	16f82 <bt_conn_set_state+0x16>
			k_work_cancel_delayable(&conn->deferred_work);
   1700c:	3058      	adds	r0, #88	; 0x58
   1700e:	f00e f95e 	bl	252ce <k_work_cancel_delayable>
   17012:	e7b6      	b.n	16f82 <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17014:	78a3      	ldrb	r3, [r4, #2]
   17016:	2b04      	cmp	r3, #4
   17018:	f000 8099 	beq.w	1714e <bt_conn_set_state+0x1e2>
		k_fifo_init(&conn->tx_queue);
   1701c:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   17020:	f00e f801 	bl	25026 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   17024:	2100      	movs	r1, #0
   17026:	4860      	ldr	r0, [pc, #384]	; (171a8 <bt_conn_set_state+0x23c>)
   17028:	f007 f956 	bl	1e2d8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1702c:	2300      	movs	r3, #0
   1702e:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   17030:	6563      	str	r3, [r4, #84]	; 0x54
}
   17032:	e08c      	b.n	1714e <bt_conn_set_state+0x1e2>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17034:	78a3      	ldrb	r3, [r4, #2]
   17036:	2b04      	cmp	r3, #4
   17038:	d009      	beq.n	1704e <bt_conn_set_state+0xe2>
		switch (old_state) {
   1703a:	2d08      	cmp	r5, #8
   1703c:	f200 8087 	bhi.w	1714e <bt_conn_set_state+0x1e2>
   17040:	e8df f005 	tbb	[pc, r5]
   17044:	4430094c 	.word	0x4430094c
   17048:	4c263a48 	.word	0x4c263a48
   1704c:	4c          	.byte	0x4c
   1704d:	00          	.byte	0x00
			bt_conn_unref(conn);
   1704e:	4620      	mov	r0, r4
   17050:	f00b fa82 	bl	22558 <bt_conn_unref>
			break;
   17054:	e07b      	b.n	1714e <bt_conn_set_state+0x1e2>
			tx_notify(conn);
   17056:	4620      	mov	r0, r4
   17058:	f00b f967 	bl	2232a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1705c:	78a3      	ldrb	r3, [r4, #2]
   1705e:	2b01      	cmp	r3, #1
   17060:	d011      	beq.n	17086 <bt_conn_set_state+0x11a>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   17062:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17064:	f3bf 8f5b 	dmb	ish
   17068:	e854 3f00 	ldrex	r3, [r4]
   1706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17070:	e844 3200 	strex	r2, r3, [r4]
   17074:	2a00      	cmp	r2, #0
   17076:	d1f7      	bne.n	17068 <bt_conn_set_state+0xfc>
   17078:	f3bf 8f5b 	dmb	ish
   1707c:	2100      	movs	r1, #0
   1707e:	484a      	ldr	r0, [pc, #296]	; (171a8 <bt_conn_set_state+0x23c>)
   17080:	f007 f92a 	bl	1e2d8 <z_impl_k_poll_signal_raise>
   17084:	e063      	b.n	1714e <bt_conn_set_state+0x1e2>
				k_work_cancel_delayable(&conn->deferred_work);
   17086:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1708a:	f00e f920 	bl	252ce <k_work_cancel_delayable>
   1708e:	e7e8      	b.n	17062 <bt_conn_set_state+0xf6>
			if (conn->err) {
   17090:	7a63      	ldrb	r3, [r4, #9]
   17092:	b91b      	cbnz	r3, 1709c <bt_conn_set_state+0x130>
			bt_conn_unref(conn);
   17094:	4620      	mov	r0, r4
   17096:	f00b fa5f 	bl	22558 <bt_conn_unref>
			break;
   1709a:	e058      	b.n	1714e <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   1709c:	4620      	mov	r0, r4
   1709e:	f7ff fd5d 	bl	16b5c <notify_connected>
   170a2:	e7f7      	b.n	17094 <bt_conn_set_state+0x128>
			if (conn->err) {
   170a4:	7a63      	ldrb	r3, [r4, #9]
   170a6:	b91b      	cbnz	r3, 170b0 <bt_conn_set_state+0x144>
			bt_conn_unref(conn);
   170a8:	4620      	mov	r0, r4
   170aa:	f00b fa55 	bl	22558 <bt_conn_unref>
			break;
   170ae:	e04e      	b.n	1714e <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   170b0:	4620      	mov	r0, r4
   170b2:	f7ff fd53 	bl	16b5c <notify_connected>
   170b6:	e7f7      	b.n	170a8 <bt_conn_set_state+0x13c>
			if (conn->err) {
   170b8:	7a63      	ldrb	r3, [r4, #9]
   170ba:	b91b      	cbnz	r3, 170c4 <bt_conn_set_state+0x158>
			bt_conn_unref(conn);
   170bc:	4620      	mov	r0, r4
   170be:	f00b fa4b 	bl	22558 <bt_conn_unref>
			break;
   170c2:	e044      	b.n	1714e <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   170c4:	4620      	mov	r0, r4
   170c6:	f7ff fd49 	bl	16b5c <notify_connected>
   170ca:	e7f7      	b.n	170bc <bt_conn_set_state+0x150>
			bt_conn_unref(conn);
   170cc:	4620      	mov	r0, r4
   170ce:	f00b fa43 	bl	22558 <bt_conn_unref>
			break;
   170d2:	e03c      	b.n	1714e <bt_conn_set_state+0x1e2>
			bt_conn_unref(conn);
   170d4:	4620      	mov	r0, r4
   170d6:	f00b fa3f 	bl	22558 <bt_conn_unref>
			break;
   170da:	e038      	b.n	1714e <bt_conn_set_state+0x1e2>
   170dc:	4b25      	ldr	r3, [pc, #148]	; (17174 <bt_conn_set_state+0x208>)
   170de:	4a26      	ldr	r2, [pc, #152]	; (17178 <bt_conn_set_state+0x20c>)
   170e0:	1a9b      	subs	r3, r3, r2
   170e2:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   170e4:	f04f 0200 	mov.w	r2, #0
   170e8:	2102      	movs	r1, #2
   170ea:	f361 0202 	bfi	r2, r1, #0, #3
   170ee:	f36f 02c5 	bfc	r2, #3, #3
   170f2:	f363 128f 	bfi	r2, r3, #6, #10
   170f6:	4631      	mov	r1, r6
   170f8:	482c      	ldr	r0, [pc, #176]	; (171ac <bt_conn_set_state+0x240>)
   170fa:	f7fa fdf5 	bl	11ce8 <log_1>
   170fe:	e026      	b.n	1714e <bt_conn_set_state+0x1e2>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17100:	78a3      	ldrb	r3, [r4, #2]
   17102:	2b04      	cmp	r3, #4
   17104:	d023      	beq.n	1714e <bt_conn_set_state+0x1e2>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17106:	2b01      	cmp	r3, #1
   17108:	d121      	bne.n	1714e <bt_conn_set_state+0x1e2>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1710a:	4b29      	ldr	r3, [pc, #164]	; (171b0 <bt_conn_set_state+0x244>)
   1710c:	8a9b      	ldrh	r3, [r3, #20]
   1710e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17112:	005b      	lsls	r3, r3, #1
   17114:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17118:	17df      	asrs	r7, r3, #31
		} else {
			return (t * to_hz + off) / from_hz;
   1711a:	03f9      	lsls	r1, r7, #15
   1711c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   17120:	03d8      	lsls	r0, r3, #15
   17122:	f240 35e7 	movw	r5, #999	; 0x3e7
   17126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1712a:	2300      	movs	r3, #0
   1712c:	1940      	adds	r0, r0, r5
   1712e:	f04f 0500 	mov.w	r5, #0
   17132:	eb45 0101 	adc.w	r1, r5, r1
   17136:	f7e9 fbd9 	bl	8ec <__aeabi_uldivmod>
   1713a:	4602      	mov	r2, r0
   1713c:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1713e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17142:	f005 ffc3 	bl	1d0cc <k_work_schedule>
   17146:	e002      	b.n	1714e <bt_conn_set_state+0x1e2>
		process_unack_tx(conn);
   17148:	4620      	mov	r0, r4
   1714a:	f00b f935 	bl	223b8 <process_unack_tx>
}
   1714e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17150:	4b08      	ldr	r3, [pc, #32]	; (17174 <bt_conn_set_state+0x208>)
   17152:	4a09      	ldr	r2, [pc, #36]	; (17178 <bt_conn_set_state+0x20c>)
   17154:	1a9b      	subs	r3, r3, r2
   17156:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   17158:	f04f 0200 	mov.w	r2, #0
   1715c:	2102      	movs	r1, #2
   1715e:	f361 0202 	bfi	r2, r1, #0, #3
   17162:	f36f 02c5 	bfc	r2, #3, #3
   17166:	f363 128f 	bfi	r2, r3, #6, #10
   1716a:	4631      	mov	r1, r6
   1716c:	4811      	ldr	r0, [pc, #68]	; (171b4 <bt_conn_set_state+0x248>)
   1716e:	f7fa fdbb 	bl	11ce8 <log_1>
   17172:	e7ec      	b.n	1714e <bt_conn_set_state+0x1e2>
   17174:	00025d98 	.word	0x00025d98
   17178:	00025d80 	.word	0x00025d80
   1717c:	000272d0 	.word	0x000272d0
   17180:	000272e0 	.word	0x000272e0
   17184:	00027280 	.word	0x00027280
   17188:	00027290 	.word	0x00027290
   1718c:	000272a0 	.word	0x000272a0
   17190:	000272ac 	.word	0x000272ac
   17194:	000272bc 	.word	0x000272bc
   17198:	00027578 	.word	0x00027578
   1719c:	000272c4 	.word	0x000272c4
   171a0:	00027260 	.word	0x00027260
   171a4:	0002726c 	.word	0x0002726c
   171a8:	20000478 	.word	0x20000478
   171ac:	000272f4 	.word	0x000272f4
   171b0:	200002a8 	.word	0x200002a8
   171b4:	0002730c 	.word	0x0002730c

000171b8 <bt_conn_index>:
		index = conn - acl_conns;
   171b8:	4b03      	ldr	r3, [pc, #12]	; (171c8 <bt_conn_index+0x10>)
   171ba:	1ac0      	subs	r0, r0, r3
   171bc:	1180      	asrs	r0, r0, #6
   171be:	4b03      	ldr	r3, [pc, #12]	; (171cc <bt_conn_index+0x14>)
   171c0:	fb03 f000 	mul.w	r0, r3, r0
}
   171c4:	b2c0      	uxtb	r0, r0
   171c6:	4770      	bx	lr
   171c8:	20001840 	.word	0x20001840
   171cc:	aaaaaaab 	.word	0xaaaaaaab

000171d0 <bt_conn_create_pdu_timeout>:
{
   171d0:	b538      	push	{r3, r4, r5, lr}
   171d2:	460c      	mov	r4, r1
	if (!pool) {
   171d4:	4601      	mov	r1, r0
   171d6:	b150      	cbz	r0, 171ee <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   171d8:	4608      	mov	r0, r1
   171da:	f00c fd35 	bl	23c48 <net_buf_alloc_fixed>
	if (!buf) {
   171de:	4605      	mov	r5, r0
   171e0:	b138      	cbz	r0, 171f2 <bt_conn_create_pdu_timeout+0x22>
	net_buf_simple_reserve(&buf->b, reserve);
   171e2:	1d21      	adds	r1, r4, #4
   171e4:	3008      	adds	r0, #8
   171e6:	f00c fd51 	bl	23c8c <net_buf_simple_reserve>
}
   171ea:	4628      	mov	r0, r5
   171ec:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   171ee:	4909      	ldr	r1, [pc, #36]	; (17214 <bt_conn_create_pdu_timeout+0x44>)
   171f0:	e7f2      	b.n	171d8 <bt_conn_create_pdu_timeout+0x8>
   171f2:	4b09      	ldr	r3, [pc, #36]	; (17218 <bt_conn_create_pdu_timeout+0x48>)
   171f4:	4a09      	ldr	r2, [pc, #36]	; (1721c <bt_conn_create_pdu_timeout+0x4c>)
   171f6:	1a9b      	subs	r3, r3, r2
   171f8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   171fa:	f04f 0100 	mov.w	r1, #0
   171fe:	2202      	movs	r2, #2
   17200:	f362 0102 	bfi	r1, r2, #0, #3
   17204:	f36f 01c5 	bfc	r1, #3, #3
   17208:	f363 118f 	bfi	r1, r3, #6, #10
   1720c:	4804      	ldr	r0, [pc, #16]	; (17220 <bt_conn_create_pdu_timeout+0x50>)
   1720e:	f7fa fe21 	bl	11e54 <log_0>
		return NULL;
   17212:	e7ea      	b.n	171ea <bt_conn_create_pdu_timeout+0x1a>
   17214:	200007b4 	.word	0x200007b4
   17218:	00025d98 	.word	0x00025d98
   1721c:	00025d80 	.word	0x00025d80
   17220:	00027328 	.word	0x00027328

00017224 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   17224:	b570      	push	{r4, r5, r6, lr}
   17226:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17228:	f3bf 8f5b 	dmb	ish
   1722c:	6843      	ldr	r3, [r0, #4]
   1722e:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17232:	f413 7f00 	tst.w	r3, #512	; 0x200
   17236:	d010      	beq.n	1725a <notify_le_param_updated+0x36>
   17238:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   1723a:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   1723e:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17242:	428b      	cmp	r3, r1
   17244:	d309      	bcc.n	1725a <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   17246:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   1724a:	428b      	cmp	r3, r1
   1724c:	d805      	bhi.n	1725a <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   1724e:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   17252:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   17256:	4299      	cmp	r1, r3
   17258:	d002      	beq.n	17260 <notify_le_param_updated+0x3c>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1725a:	4b18      	ldr	r3, [pc, #96]	; (172bc <notify_le_param_updated+0x98>)
   1725c:	681d      	ldr	r5, [r3, #0]
   1725e:	e00d      	b.n	1727c <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17260:	f3bf 8f5b 	dmb	ish
   17264:	e852 3f00 	ldrex	r3, [r2]
   17268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1726c:	e842 3100 	strex	r1, r3, [r2]
   17270:	2900      	cmp	r1, #0
   17272:	d1f7      	bne.n	17264 <notify_le_param_updated+0x40>
   17274:	f3bf 8f5b 	dmb	ish
}
   17278:	e7ef      	b.n	1725a <notify_le_param_updated+0x36>
   1727a:	692d      	ldr	r5, [r5, #16]
   1727c:	b15d      	cbz	r5, 17296 <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   1727e:	68ee      	ldr	r6, [r5, #12]
   17280:	2e00      	cmp	r6, #0
   17282:	d0fa      	beq.n	1727a <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   17284:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17288:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1728c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   17290:	4620      	mov	r0, r4
   17292:	47b0      	blx	r6
   17294:	e7f1      	b.n	1727a <notify_le_param_updated+0x56>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17296:	4d0a      	ldr	r5, [pc, #40]	; (172c0 <notify_le_param_updated+0x9c>)
   17298:	e000      	b.n	1729c <notify_le_param_updated+0x78>
   1729a:	3514      	adds	r5, #20
   1729c:	4b09      	ldr	r3, [pc, #36]	; (172c4 <notify_le_param_updated+0xa0>)
   1729e:	429d      	cmp	r5, r3
   172a0:	d20b      	bcs.n	172ba <notify_le_param_updated+0x96>
		if (cb->le_param_updated) {
   172a2:	68ee      	ldr	r6, [r5, #12]
   172a4:	2e00      	cmp	r6, #0
   172a6:	d0f8      	beq.n	1729a <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   172a8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   172ac:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   172b0:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   172b4:	4620      	mov	r0, r4
   172b6:	47b0      	blx	r6
   172b8:	e7ef      	b.n	1729a <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   172ba:	bd70      	pop	{r4, r5, r6, pc}
   172bc:	20002900 	.word	0x20002900
   172c0:	00025d70 	.word	0x00025d70
   172c4:	00025d70 	.word	0x00025d70

000172c8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   172c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172ca:	4606      	mov	r6, r0
   172cc:	460d      	mov	r5, r1
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   172ce:	4608      	mov	r0, r1
   172d0:	f00a fed7 	bl	22082 <bt_le_conn_params_valid>
   172d4:	4607      	mov	r7, r0
   172d6:	b338      	cbz	r0, 17328 <le_param_req+0x60>
		return false;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   172d8:	4b15      	ldr	r3, [pc, #84]	; (17330 <le_param_req+0x68>)
   172da:	681c      	ldr	r4, [r3, #0]
   172dc:	e000      	b.n	172e0 <le_param_req+0x18>
   172de:	6924      	ldr	r4, [r4, #16]
   172e0:	b16c      	cbz	r4, 172fe <le_param_req+0x36>
		if (!cb->le_param_req) {
   172e2:	68a3      	ldr	r3, [r4, #8]
   172e4:	2b00      	cmp	r3, #0
   172e6:	d0fa      	beq.n	172de <le_param_req+0x16>
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
   172e8:	4629      	mov	r1, r5
   172ea:	4630      	mov	r0, r6
   172ec:	4798      	blx	r3
   172ee:	b1d0      	cbz	r0, 17326 <le_param_req+0x5e>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
   172f0:	4628      	mov	r0, r5
   172f2:	f00a fec6 	bl	22082 <bt_le_conn_params_valid>
   172f6:	2800      	cmp	r0, #0
   172f8:	d1f1      	bne.n	172de <le_param_req+0x16>
			return false;
   172fa:	4607      	mov	r7, r0
   172fc:	e014      	b.n	17328 <le_param_req+0x60>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   172fe:	4c0d      	ldr	r4, [pc, #52]	; (17334 <le_param_req+0x6c>)
   17300:	e000      	b.n	17304 <le_param_req+0x3c>
   17302:	3414      	adds	r4, #20
   17304:	4b0c      	ldr	r3, [pc, #48]	; (17338 <le_param_req+0x70>)
   17306:	429c      	cmp	r4, r3
   17308:	d20e      	bcs.n	17328 <le_param_req+0x60>
		if (!cb->le_param_req) {
   1730a:	68a3      	ldr	r3, [r4, #8]
   1730c:	2b00      	cmp	r3, #0
   1730e:	d0f8      	beq.n	17302 <le_param_req+0x3a>
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
   17310:	4629      	mov	r1, r5
   17312:	4630      	mov	r0, r6
   17314:	4798      	blx	r3
   17316:	b148      	cbz	r0, 1732c <le_param_req+0x64>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
   17318:	4628      	mov	r0, r5
   1731a:	f00a feb2 	bl	22082 <bt_le_conn_params_valid>
   1731e:	2800      	cmp	r0, #0
   17320:	d1ef      	bne.n	17302 <le_param_req+0x3a>
			return false;
   17322:	4607      	mov	r7, r0
   17324:	e000      	b.n	17328 <le_param_req+0x60>
			return false;
   17326:	4607      	mov	r7, r0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   17328:	4638      	mov	r0, r7
   1732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1732c:	4607      	mov	r7, r0
   1732e:	e7fb      	b.n	17328 <le_param_req+0x60>
   17330:	20002900 	.word	0x20002900
   17334:	00025d70 	.word	0x00025d70
   17338:	00025d70 	.word	0x00025d70

0001733c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1733e:	4607      	mov	r7, r0
   17340:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17342:	2400      	movs	r4, #0
   17344:	2c00      	cmp	r4, #0
   17346:	dd02      	ble.n	1734e <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   17348:	2500      	movs	r5, #0
}
   1734a:	4628      	mov	r0, r5
   1734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1734e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   17352:	480c      	ldr	r0, [pc, #48]	; (17384 <bt_conn_lookup_addr_le+0x48>)
   17354:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   17358:	f00b f8d7 	bl	2250a <bt_conn_ref>
		if (!conn) {
   1735c:	4605      	mov	r5, r0
   1735e:	b170      	cbz	r0, 1737e <bt_conn_lookup_addr_le+0x42>
		if (conn->type != BT_CONN_TYPE_LE) {
   17360:	7883      	ldrb	r3, [r0, #2]
   17362:	2b01      	cmp	r3, #1
   17364:	d109      	bne.n	1737a <bt_conn_lookup_addr_le+0x3e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   17366:	4632      	mov	r2, r6
   17368:	4639      	mov	r1, r7
   1736a:	f00b f938 	bl	225de <bt_conn_is_peer_addr_le>
   1736e:	2800      	cmp	r0, #0
   17370:	d1eb      	bne.n	1734a <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   17372:	4628      	mov	r0, r5
   17374:	f00b f8f0 	bl	22558 <bt_conn_unref>
			continue;
   17378:	e001      	b.n	1737e <bt_conn_lookup_addr_le+0x42>
			bt_conn_unref(conn);
   1737a:	f00b f8ed 	bl	22558 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1737e:	3401      	adds	r4, #1
   17380:	e7e0      	b.n	17344 <bt_conn_lookup_addr_le+0x8>
   17382:	bf00      	nop
   17384:	20001840 	.word	0x20001840

00017388 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1738c:	4607      	mov	r7, r0
   1738e:	460e      	mov	r6, r1
   17390:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17392:	2400      	movs	r4, #0
   17394:	2c00      	cmp	r4, #0
   17396:	dd03      	ble.n	173a0 <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   17398:	2500      	movs	r5, #0
}
   1739a:	4628      	mov	r0, r5
   1739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   173a0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   173a4:	4b10      	ldr	r3, [pc, #64]	; (173e8 <bt_conn_lookup_state_le+0x60>)
   173a6:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   173aa:	f00b f8ae 	bl	2250a <bt_conn_ref>
		if (!conn) {
   173ae:	4605      	mov	r5, r0
   173b0:	b188      	cbz	r0, 173d6 <bt_conn_lookup_state_le+0x4e>
		if (conn->type != BT_CONN_TYPE_LE) {
   173b2:	7883      	ldrb	r3, [r0, #2]
   173b4:	2b01      	cmp	r3, #1
   173b6:	d110      	bne.n	173da <bt_conn_lookup_state_le+0x52>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   173b8:	b126      	cbz	r6, 173c4 <bt_conn_lookup_state_le+0x3c>
   173ba:	4632      	mov	r2, r6
   173bc:	4639      	mov	r1, r7
   173be:	f00b f90e 	bl	225de <bt_conn_is_peer_addr_le>
   173c2:	b168      	cbz	r0, 173e0 <bt_conn_lookup_state_le+0x58>
		if (!(conn->state == state && conn->id == id)) {
   173c4:	7aab      	ldrb	r3, [r5, #10]
   173c6:	4543      	cmp	r3, r8
   173c8:	d102      	bne.n	173d0 <bt_conn_lookup_state_le+0x48>
   173ca:	7a2b      	ldrb	r3, [r5, #8]
   173cc:	42bb      	cmp	r3, r7
   173ce:	d0e4      	beq.n	1739a <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   173d0:	4628      	mov	r0, r5
   173d2:	f00b f8c1 	bl	22558 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   173d6:	3401      	adds	r4, #1
   173d8:	e7dc      	b.n	17394 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   173da:	f00b f8bd 	bl	22558 <bt_conn_unref>
			continue;
   173de:	e7fa      	b.n	173d6 <bt_conn_lookup_state_le+0x4e>
			bt_conn_unref(conn);
   173e0:	4628      	mov	r0, r5
   173e2:	f00b f8b9 	bl	22558 <bt_conn_unref>
			continue;
   173e6:	e7f6      	b.n	173d6 <bt_conn_lookup_state_le+0x4e>
   173e8:	20001840 	.word	0x20001840

000173ec <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   173ec:	b508      	push	{r3, lr}
   173ee:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   173f0:	4801      	ldr	r0, [pc, #4]	; (173f8 <bt_conn_create_frag_timeout+0xc>)
   173f2:	f7ff feed 	bl	171d0 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   173f6:	bd08      	pop	{r3, pc}
   173f8:	2000080c 	.word	0x2000080c

000173fc <create_frag>:
{
   173fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173fe:	4606      	mov	r6, r0
   17400:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   17402:	f04f 32ff 	mov.w	r2, #4294967295
   17406:	f04f 33ff 	mov.w	r3, #4294967295
   1740a:	2000      	movs	r0, #0
   1740c:	f7ff ffee 	bl	173ec <bt_conn_create_frag_timeout>
   17410:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17412:	7ab3      	ldrb	r3, [r6, #10]
   17414:	2b07      	cmp	r3, #7
   17416:	d11a      	bne.n	1744e <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   17418:	2300      	movs	r3, #0
   1741a:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   1741c:	4b10      	ldr	r3, [pc, #64]	; (17460 <create_frag+0x64>)
   1741e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   17422:	f100 0708 	add.w	r7, r0, #8
   17426:	4638      	mov	r0, r7
   17428:	f00c fcc8 	bl	23dbc <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1742c:	4286      	cmp	r6, r0
   1742e:	d212      	bcs.n	17456 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   17430:	4b0b      	ldr	r3, [pc, #44]	; (17460 <create_frag+0x64>)
   17432:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17436:	4632      	mov	r2, r6
   17438:	f855 1f08 	ldr.w	r1, [r5, #8]!
   1743c:	4638      	mov	r0, r7
   1743e:	f00c fc86 	bl	23d4e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17442:	4631      	mov	r1, r6
   17444:	4628      	mov	r0, r5
   17446:	f00c fc95 	bl	23d74 <net_buf_simple_pull>
}
   1744a:	4620      	mov	r0, r4
   1744c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1744e:	f00c fc2e 	bl	23cae <net_buf_unref>
		return NULL;
   17452:	2400      	movs	r4, #0
   17454:	e7f9      	b.n	1744a <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   17456:	4638      	mov	r0, r7
   17458:	f00c fcb0 	bl	23dbc <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1745c:	b286      	uxth	r6, r0
   1745e:	e7ea      	b.n	17436 <create_frag+0x3a>
   17460:	200002a8 	.word	0x200002a8

00017464 <send_buf>:
{
   17464:	b538      	push	{r3, r4, r5, lr}
   17466:	4605      	mov	r5, r0
   17468:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1746a:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   1746c:	4a1b      	ldr	r2, [pc, #108]	; (174dc <send_buf+0x78>)
   1746e:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   17472:	429a      	cmp	r2, r3
   17474:	d21f      	bcs.n	174b6 <send_buf+0x52>
	frag = create_frag(conn, buf);
   17476:	f7ff ffc1 	bl	173fc <create_frag>
	if (!frag) {
   1747a:	4601      	mov	r1, r0
   1747c:	b350      	cbz	r0, 174d4 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1747e:	2301      	movs	r3, #1
   17480:	2200      	movs	r2, #0
   17482:	4628      	mov	r0, r5
   17484:	f7ff fb96 	bl	16bb4 <send_frag>
   17488:	4603      	mov	r3, r0
   1748a:	b1c8      	cbz	r0, 174c0 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1748c:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   1748e:	4a13      	ldr	r2, [pc, #76]	; (174dc <send_buf+0x78>)
   17490:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   17494:	429a      	cmp	r2, r3
   17496:	d215      	bcs.n	174c4 <send_buf+0x60>
		frag = create_frag(conn, buf);
   17498:	4621      	mov	r1, r4
   1749a:	4628      	mov	r0, r5
   1749c:	f7ff ffae 	bl	173fc <create_frag>
		if (!frag) {
   174a0:	4601      	mov	r1, r0
   174a2:	b1c8      	cbz	r0, 174d8 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   174a4:	2301      	movs	r3, #1
   174a6:	461a      	mov	r2, r3
   174a8:	4628      	mov	r0, r5
   174aa:	f7ff fb83 	bl	16bb4 <send_frag>
   174ae:	4603      	mov	r3, r0
   174b0:	2800      	cmp	r0, #0
   174b2:	d1eb      	bne.n	1748c <send_buf+0x28>
   174b4:	e004      	b.n	174c0 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   174b6:	2300      	movs	r3, #0
   174b8:	2202      	movs	r2, #2
   174ba:	f7ff fb7b 	bl	16bb4 <send_frag>
   174be:	4603      	mov	r3, r0
}
   174c0:	4618      	mov	r0, r3
   174c2:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   174c4:	2300      	movs	r3, #0
   174c6:	2203      	movs	r2, #3
   174c8:	4621      	mov	r1, r4
   174ca:	4628      	mov	r0, r5
   174cc:	f7ff fb72 	bl	16bb4 <send_frag>
   174d0:	4603      	mov	r3, r0
   174d2:	e7f5      	b.n	174c0 <send_buf+0x5c>
		return false;
   174d4:	2300      	movs	r3, #0
   174d6:	e7f3      	b.n	174c0 <send_buf+0x5c>
			return false;
   174d8:	2300      	movs	r3, #0
   174da:	e7f1      	b.n	174c0 <send_buf+0x5c>
   174dc:	200002a8 	.word	0x200002a8

000174e0 <bt_conn_process_tx>:
{
   174e0:	b538      	push	{r3, r4, r5, lr}
   174e2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   174e4:	7a83      	ldrb	r3, [r0, #10]
   174e6:	b97b      	cbnz	r3, 17508 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   174e8:	1d03      	adds	r3, r0, #4
   174ea:	f3bf 8f5b 	dmb	ish
   174ee:	e853 2f00 	ldrex	r2, [r3]
   174f2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   174f6:	e843 1000 	strex	r0, r1, [r3]
   174fa:	2800      	cmp	r0, #0
   174fc:	d1f7      	bne.n	174ee <bt_conn_process_tx+0xe>
   174fe:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   17502:	f012 0f40 	tst.w	r2, #64	; 0x40
   17506:	d10d      	bne.n	17524 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   17508:	2200      	movs	r2, #0
   1750a:	2300      	movs	r3, #0
   1750c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17510:	f00c fba1 	bl	23c56 <net_buf_get>
	BT_ASSERT(buf);
   17514:	4605      	mov	r5, r0
   17516:	b148      	cbz	r0, 1752c <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   17518:	4629      	mov	r1, r5
   1751a:	4620      	mov	r0, r4
   1751c:	f7ff ffa2 	bl	17464 <send_buf>
   17520:	b190      	cbz	r0, 17548 <bt_conn_process_tx+0x68>
}
   17522:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   17524:	4620      	mov	r0, r4
   17526:	f00a ff91 	bl	2244c <conn_cleanup>
		return;
   1752a:	e7fa      	b.n	17522 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   1752c:	f240 23e7 	movw	r3, #743	; 0x2e7
   17530:	4a07      	ldr	r2, [pc, #28]	; (17550 <bt_conn_process_tx+0x70>)
   17532:	4908      	ldr	r1, [pc, #32]	; (17554 <bt_conn_process_tx+0x74>)
   17534:	4808      	ldr	r0, [pc, #32]	; (17558 <bt_conn_process_tx+0x78>)
   17536:	f009 fc1b 	bl	20d70 <printk>
   1753a:	4040      	eors	r0, r0
   1753c:	f380 8811 	msr	BASEPRI, r0
   17540:	f04f 0003 	mov.w	r0, #3
   17544:	df02      	svc	2
   17546:	e7e7      	b.n	17518 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   17548:	4628      	mov	r0, r5
   1754a:	f00c fbb0 	bl	23cae <net_buf_unref>
   1754e:	e7e8      	b.n	17522 <bt_conn_process_tx+0x42>
   17550:	00027354 	.word	0x00027354
   17554:	00027ac0 	.word	0x00027ac0
   17558:	00026bb8 	.word	0x00026bb8

0001755c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1755c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1755e:	2400      	movs	r4, #0
   17560:	e006      	b.n	17570 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   17562:	4911      	ldr	r1, [pc, #68]	; (175a8 <bt_conn_init+0x4c>)
   17564:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   17568:	4810      	ldr	r0, [pc, #64]	; (175ac <bt_conn_init+0x50>)
   1756a:	f00d fd68 	bl	2503e <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1756e:	3401      	adds	r4, #1
   17570:	2c02      	cmp	r4, #2
   17572:	ddf6      	ble.n	17562 <bt_conn_init+0x6>
	}

	bt_att_init();
   17574:	f00b fe8d 	bl	23292 <bt_att_init>

	err = bt_smp_init();
   17578:	f00c fa8b 	bl	23a92 <bt_smp_init>
	if (err) {
   1757c:	4604      	mov	r4, r0
   1757e:	b108      	cbz	r0, 17584 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17580:	4620      	mov	r0, r4
   17582:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
   17584:	f00b f96c 	bl	22860 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   17588:	4625      	mov	r5, r4
   1758a:	2d00      	cmp	r5, #0
   1758c:	dcf8      	bgt.n	17580 <bt_conn_init+0x24>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1758e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   17592:	4b07      	ldr	r3, [pc, #28]	; (175b0 <bt_conn_init+0x54>)
   17594:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   17598:	f00a ffb7 	bl	2250a <bt_conn_ref>
			if (!conn) {
   1759c:	b108      	cbz	r0, 175a2 <bt_conn_init+0x46>
			bt_conn_unref(conn);
   1759e:	f00a ffdb 	bl	22558 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   175a2:	3501      	adds	r5, #1
   175a4:	e7f1      	b.n	1758a <bt_conn_init+0x2e>
   175a6:	bf00      	nop
   175a8:	20002904 	.word	0x20002904
   175ac:	2000079c 	.word	0x2000079c
   175b0:	20001840 	.word	0x20001840

000175b4 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   175b4:	4a05      	ldr	r2, [pc, #20]	; (175cc <get_ident+0x18>)
   175b6:	7813      	ldrb	r3, [r2, #0]
   175b8:	3301      	adds	r3, #1
   175ba:	b2db      	uxtb	r3, r3
   175bc:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   175be:	b90b      	cbnz	r3, 175c4 <get_ident+0x10>
		ident++;
   175c0:	3301      	adds	r3, #1
   175c2:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   175c4:	4b01      	ldr	r3, [pc, #4]	; (175cc <get_ident+0x18>)
   175c6:	7818      	ldrb	r0, [r3, #0]
   175c8:	4770      	bx	lr
   175ca:	bf00      	nop
   175cc:	20003a0a 	.word	0x20003a0a

000175d0 <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   175d0:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   175d2:	898b      	ldrh	r3, [r1, #12]
   175d4:	2b01      	cmp	r3, #1
   175d6:	d900      	bls.n	175da <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   175d8:	bd08      	pop	{r3, pc}
   175da:	4b08      	ldr	r3, [pc, #32]	; (175fc <le_conn_param_rsp+0x2c>)
   175dc:	4a08      	ldr	r2, [pc, #32]	; (17600 <le_conn_param_rsp+0x30>)
   175de:	1a9b      	subs	r3, r3, r2
   175e0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   175e2:	f04f 0100 	mov.w	r1, #0
   175e6:	2201      	movs	r2, #1
   175e8:	f362 0102 	bfi	r1, r2, #0, #3
   175ec:	f36f 01c5 	bfc	r1, #3, #3
   175f0:	f363 118f 	bfi	r1, r3, #6, #10
   175f4:	4803      	ldr	r0, [pc, #12]	; (17604 <le_conn_param_rsp+0x34>)
   175f6:	f7fa fc2d 	bl	11e54 <log_0>
		return;
   175fa:	e7ed      	b.n	175d8 <le_conn_param_rsp+0x8>
   175fc:	00025dc0 	.word	0x00025dc0
   17600:	00025d80 	.word	0x00025d80
   17604:	000273ac 	.word	0x000273ac

00017608 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   17608:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1760a:	2300      	movs	r3, #0
   1760c:	2b00      	cmp	r3, #0
   1760e:	dd13      	ble.n	17638 <l2cap_accept+0x30>
   17610:	4b12      	ldr	r3, [pc, #72]	; (1765c <l2cap_accept+0x54>)
   17612:	4a13      	ldr	r2, [pc, #76]	; (17660 <l2cap_accept+0x58>)
   17614:	1a9b      	subs	r3, r3, r2
   17616:	08db      	lsrs	r3, r3, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   17618:	f04f 0200 	mov.w	r2, #0
   1761c:	2101      	movs	r1, #1
   1761e:	f361 0202 	bfi	r2, r1, #0, #3
   17622:	f36f 02c5 	bfc	r2, #3, #3
   17626:	f363 128f 	bfi	r2, r3, #6, #10
   1762a:	4601      	mov	r1, r0
   1762c:	480d      	ldr	r0, [pc, #52]	; (17664 <l2cap_accept+0x5c>)
   1762e:	f7fa fb5b 	bl	11ce8 <log_1>

	return -ENOMEM;
   17632:	f06f 000b 	mvn.w	r0, #11
}
   17636:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   17638:	22e8      	movs	r2, #232	; 0xe8
   1763a:	fb02 f203 	mul.w	r2, r2, r3
   1763e:	4c0a      	ldr	r4, [pc, #40]	; (17668 <l2cap_accept+0x60>)
   17640:	58a2      	ldr	r2, [r4, r2]
   17642:	b10a      	cbz	r2, 17648 <l2cap_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17644:	3301      	adds	r3, #1
   17646:	e7e1      	b.n	1760c <l2cap_accept+0x4>
		l2cap->chan.chan.ops = &ops;
   17648:	4a07      	ldr	r2, [pc, #28]	; (17668 <l2cap_accept+0x60>)
   1764a:	20e8      	movs	r0, #232	; 0xe8
   1764c:	fb00 2303 	mla	r3, r0, r3, r2
   17650:	4a06      	ldr	r2, [pc, #24]	; (1766c <l2cap_accept+0x64>)
   17652:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   17654:	600b      	str	r3, [r1, #0]
		return 0;
   17656:	2000      	movs	r0, #0
   17658:	e7ed      	b.n	17636 <l2cap_accept+0x2e>
   1765a:	bf00      	nop
   1765c:	00025dc0 	.word	0x00025dc0
   17660:	00025d80 	.word	0x00025d80
   17664:	000273c8 	.word	0x000273c8
   17668:	20001900 	.word	0x20001900
   1766c:	00027550 	.word	0x00027550

00017670 <l2cap_rtx_timeout>:
{
   17670:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   17672:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   17676:	f850 5c10 	ldr.w	r5, [r0, #-16]
   1767a:	4b0c      	ldr	r3, [pc, #48]	; (176ac <l2cap_rtx_timeout+0x3c>)
   1767c:	4a0c      	ldr	r2, [pc, #48]	; (176b0 <l2cap_rtx_timeout+0x40>)
   1767e:	1a9b      	subs	r3, r3, r2
   17680:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   17682:	f04f 0200 	mov.w	r2, #0
   17686:	2101      	movs	r1, #1
   17688:	f361 0202 	bfi	r2, r1, #0, #3
   1768c:	f36f 02c5 	bfc	r2, #3, #3
   17690:	f363 128f 	bfi	r2, r3, #6, #10
   17694:	4621      	mov	r1, r4
   17696:	4807      	ldr	r0, [pc, #28]	; (176b4 <l2cap_rtx_timeout+0x44>)
   17698:	f7fa fb26 	bl	11ce8 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1769c:	4621      	mov	r1, r4
   1769e:	4628      	mov	r0, r5
   176a0:	f00a fff9 	bl	22696 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   176a4:	4620      	mov	r0, r4
   176a6:	f00b f81e 	bl	226e6 <bt_l2cap_chan_del>
}
   176aa:	bd38      	pop	{r3, r4, r5, pc}
   176ac:	00025dc0 	.word	0x00025dc0
   176b0:	00025d80 	.word	0x00025d80
   176b4:	000273f0 	.word	0x000273f0

000176b8 <l2cap_chan_add>:
{
   176b8:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   176ba:	b1d9      	cbz	r1, 176f4 <l2cap_chan_add+0x3c>
   176bc:	4604      	mov	r4, r0
   176be:	4615      	mov	r5, r2
   176c0:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   176c2:	4914      	ldr	r1, [pc, #80]	; (17714 <l2cap_chan_add+0x5c>)
   176c4:	f106 0010 	add.w	r0, r6, #16
   176c8:	f00d fdb5 	bl	25236 <k_work_init_delayable>
	atomic_clear(chan->status);
   176cc:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   176d0:	2200      	movs	r2, #0
   176d2:	f3bf 8f5b 	dmb	ish
   176d6:	e853 1f00 	ldrex	r1, [r3]
   176da:	e843 2000 	strex	r0, r2, [r3]
   176de:	2800      	cmp	r0, #0
   176e0:	d1f9      	bne.n	176d6 <l2cap_chan_add+0x1e>
   176e2:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   176e6:	462a      	mov	r2, r5
   176e8:	4631      	mov	r1, r6
   176ea:	4620      	mov	r0, r4
   176ec:	f00b f80e 	bl	2270c <bt_l2cap_chan_add>
	return true;
   176f0:	2001      	movs	r0, #1
}
   176f2:	bd70      	pop	{r4, r5, r6, pc}
   176f4:	4b08      	ldr	r3, [pc, #32]	; (17718 <l2cap_chan_add+0x60>)
   176f6:	4a09      	ldr	r2, [pc, #36]	; (1771c <l2cap_chan_add+0x64>)
   176f8:	1a9b      	subs	r3, r3, r2
   176fa:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   176fc:	2201      	movs	r2, #1
   176fe:	f362 0102 	bfi	r1, r2, #0, #3
   17702:	f36f 01c5 	bfc	r1, #3, #3
   17706:	f363 118f 	bfi	r1, r3, #6, #10
   1770a:	4805      	ldr	r0, [pc, #20]	; (17720 <l2cap_chan_add+0x68>)
   1770c:	f7fa fba2 	bl	11e54 <log_0>
		return false;
   17710:	2000      	movs	r0, #0
   17712:	e7ee      	b.n	176f2 <l2cap_chan_add+0x3a>
   17714:	00017671 	.word	0x00017671
   17718:	00025dc0 	.word	0x00025dc0
   1771c:	00025d80 	.word	0x00025d80
   17720:	00027400 	.word	0x00027400

00017724 <bt_l2cap_connected>:
{
   17724:	b530      	push	{r4, r5, lr}
   17726:	b083      	sub	sp, #12
   17728:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1772a:	4c1a      	ldr	r4, [pc, #104]	; (17794 <bt_l2cap_connected+0x70>)
   1772c:	e000      	b.n	17730 <bt_l2cap_connected+0xc>
   1772e:	340c      	adds	r4, #12
   17730:	4b19      	ldr	r3, [pc, #100]	; (17798 <bt_l2cap_connected+0x74>)
   17732:	429c      	cmp	r4, r3
   17734:	d22c      	bcs.n	17790 <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   17736:	6863      	ldr	r3, [r4, #4]
   17738:	a901      	add	r1, sp, #4
   1773a:	4628      	mov	r0, r5
   1773c:	4798      	blx	r3
   1773e:	2800      	cmp	r0, #0
   17740:	dbf5      	blt.n	1772e <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   17742:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   17744:	8823      	ldrh	r3, [r4, #0]
   17746:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1774a:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1774e:	68a2      	ldr	r2, [r4, #8]
   17750:	4628      	mov	r0, r5
   17752:	f7ff ffb1 	bl	176b8 <l2cap_chan_add>
   17756:	b1d8      	cbz	r0, 17790 <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   17758:	9801      	ldr	r0, [sp, #4]
   1775a:	6843      	ldr	r3, [r0, #4]
   1775c:	681b      	ldr	r3, [r3, #0]
   1775e:	b103      	cbz	r3, 17762 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   17760:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   17762:	9b01      	ldr	r3, [sp, #4]
   17764:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17766:	f3bf 8f5b 	dmb	ish
   1776a:	e853 2f00 	ldrex	r2, [r3]
   1776e:	f042 0201 	orr.w	r2, r2, #1
   17772:	e843 2100 	strex	r1, r2, [r3]
   17776:	2900      	cmp	r1, #0
   17778:	d1f7      	bne.n	1776a <bt_l2cap_connected+0x46>
   1777a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1777e:	9801      	ldr	r0, [sp, #4]
   17780:	6843      	ldr	r3, [r0, #4]
   17782:	699b      	ldr	r3, [r3, #24]
   17784:	2b00      	cmp	r3, #0
   17786:	d0d2      	beq.n	1772e <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   17788:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1778c:	4798      	blx	r3
   1778e:	e7ce      	b.n	1772e <bt_l2cap_connected+0xa>
}
   17790:	b003      	add	sp, #12
   17792:	bd30      	pop	{r4, r5, pc}
   17794:	00025d4c 	.word	0x00025d4c
   17798:	00025d70 	.word	0x00025d70

0001779c <l2cap_create_le_sig_pdu>:
{
   1779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1779e:	460c      	mov	r4, r1
   177a0:	4616      	mov	r6, r2
   177a2:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   177a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   177a8:	2300      	movs	r3, #0
   177aa:	2100      	movs	r1, #0
   177ac:	4608      	mov	r0, r1
   177ae:	f00a ffbd 	bl	2272c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   177b2:	4607      	mov	r7, r0
   177b4:	b140      	cbz	r0, 177c8 <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   177b6:	2104      	movs	r1, #4
   177b8:	3008      	adds	r0, #8
   177ba:	f00c fac2 	bl	23d42 <net_buf_simple_add>
	hdr->code = code;
   177be:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   177c0:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   177c2:	8045      	strh	r5, [r0, #2]
}
   177c4:	4638      	mov	r0, r7
   177c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177c8:	4b08      	ldr	r3, [pc, #32]	; (177ec <l2cap_create_le_sig_pdu+0x50>)
   177ca:	4a09      	ldr	r2, [pc, #36]	; (177f0 <l2cap_create_le_sig_pdu+0x54>)
   177cc:	1a9b      	subs	r3, r3, r2
   177ce:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   177d0:	f04f 0200 	mov.w	r2, #0
   177d4:	2101      	movs	r1, #1
   177d6:	f361 0202 	bfi	r2, r1, #0, #3
   177da:	f36f 02c5 	bfc	r2, #3, #3
   177de:	f363 128f 	bfi	r2, r3, #6, #10
   177e2:	4621      	mov	r1, r4
   177e4:	4803      	ldr	r0, [pc, #12]	; (177f4 <l2cap_create_le_sig_pdu+0x58>)
   177e6:	f7fa fa7f 	bl	11ce8 <log_1>
		return NULL;
   177ea:	e7eb      	b.n	177c4 <l2cap_create_le_sig_pdu+0x28>
   177ec:	00025dc0 	.word	0x00025dc0
   177f0:	00025d80 	.word	0x00025d80
   177f4:	00027424 	.word	0x00027424

000177f8 <le_conn_param_update_req>:
{
   177f8:	b570      	push	{r4, r5, r6, lr}
   177fa:	b084      	sub	sp, #16
   177fc:	4614      	mov	r4, r2
	struct bt_conn *conn = l2cap->chan.chan.conn;
   177fe:	6805      	ldr	r5, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   17800:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
   17802:	8992      	ldrh	r2, [r2, #12]
   17804:	2a07      	cmp	r2, #7
   17806:	d932      	bls.n	1786e <le_conn_param_update_req+0x76>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   17808:	78ea      	ldrb	r2, [r5, #3]
   1780a:	2a00      	cmp	r2, #0
   1780c:	d140      	bne.n	17890 <le_conn_param_update_req+0x98>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1780e:	881a      	ldrh	r2, [r3, #0]
   17810:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   17814:	885a      	ldrh	r2, [r3, #2]
   17816:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1781a:	889a      	ldrh	r2, [r3, #4]
   1781c:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   17820:	88db      	ldrh	r3, [r3, #6]
   17822:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   17826:	2302      	movs	r3, #2
   17828:	460a      	mov	r2, r1
   1782a:	2113      	movs	r1, #19
   1782c:	4620      	mov	r0, r4
   1782e:	f7ff ffb5 	bl	1779c <l2cap_create_le_sig_pdu>
	if (!buf) {
   17832:	4606      	mov	r6, r0
   17834:	b390      	cbz	r0, 1789c <le_conn_param_update_req+0xa4>
	accepted = le_param_req(conn, &param);
   17836:	a902      	add	r1, sp, #8
   17838:	4628      	mov	r0, r5
   1783a:	f7ff fd45 	bl	172c8 <le_param_req>
   1783e:	4604      	mov	r4, r0
   17840:	2102      	movs	r1, #2
   17842:	f106 0008 	add.w	r0, r6, #8
   17846:	f00c fa7c 	bl	23d42 <net_buf_simple_add>
	if (accepted) {
   1784a:	b34c      	cbz	r4, 178a0 <le_conn_param_update_req+0xa8>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1784c:	2300      	movs	r3, #0
   1784e:	7003      	strb	r3, [r0, #0]
   17850:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   17852:	2300      	movs	r3, #0
   17854:	9300      	str	r3, [sp, #0]
   17856:	4632      	mov	r2, r6
   17858:	2105      	movs	r1, #5
   1785a:	4628      	mov	r0, r5
   1785c:	f00a ff6b 	bl	22736 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   17860:	bb18      	cbnz	r0, 178aa <le_conn_param_update_req+0xb2>
	if (accepted) {
   17862:	b1dc      	cbz	r4, 1789c <le_conn_param_update_req+0xa4>
		bt_conn_le_conn_update(conn, &param);
   17864:	a902      	add	r1, sp, #8
   17866:	4628      	mov	r0, r5
   17868:	f00a fee0 	bl	2262c <bt_conn_le_conn_update>
   1786c:	e016      	b.n	1789c <le_conn_param_update_req+0xa4>
   1786e:	4b11      	ldr	r3, [pc, #68]	; (178b4 <le_conn_param_update_req+0xbc>)
   17870:	4a11      	ldr	r2, [pc, #68]	; (178b8 <le_conn_param_update_req+0xc0>)
   17872:	1a9b      	subs	r3, r3, r2
   17874:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn update param req");
   17876:	f04f 0100 	mov.w	r1, #0
   1787a:	2201      	movs	r2, #1
   1787c:	f362 0102 	bfi	r1, r2, #0, #3
   17880:	f36f 01c5 	bfc	r1, #3, #3
   17884:	f363 118f 	bfi	r1, r3, #6, #10
   17888:	480c      	ldr	r0, [pc, #48]	; (178bc <le_conn_param_update_req+0xc4>)
   1788a:	f7fa fae3 	bl	11e54 <log_0>
		return;
   1788e:	e005      	b.n	1789c <le_conn_param_update_req+0xa4>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   17890:	2200      	movs	r2, #0
   17892:	9200      	str	r2, [sp, #0]
   17894:	4613      	mov	r3, r2
   17896:	4628      	mov	r0, r5
   17898:	f00a ff62 	bl	22760 <l2cap_send_reject>
}
   1789c:	b004      	add	sp, #16
   1789e:	bd70      	pop	{r4, r5, r6, pc}
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   178a0:	2301      	movs	r3, #1
   178a2:	7003      	strb	r3, [r0, #0]
   178a4:	2300      	movs	r3, #0
   178a6:	7043      	strb	r3, [r0, #1]
   178a8:	e7d3      	b.n	17852 <le_conn_param_update_req+0x5a>
		net_buf_unref(buf);
   178aa:	4630      	mov	r0, r6
   178ac:	f00c f9ff 	bl	23cae <net_buf_unref>
   178b0:	e7d7      	b.n	17862 <le_conn_param_update_req+0x6a>
   178b2:	bf00      	nop
   178b4:	00025dc0 	.word	0x00025dc0
   178b8:	00025d80 	.word	0x00025d80
   178bc:	0002744c 	.word	0x0002744c

000178c0 <l2cap_recv>:
{
   178c0:	b570      	push	{r4, r5, r6, lr}
   178c2:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   178c4:	898b      	ldrh	r3, [r1, #12]
   178c6:	2b03      	cmp	r3, #3
   178c8:	d92e      	bls.n	17928 <l2cap_recv+0x68>
   178ca:	4606      	mov	r6, r0
   178cc:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   178ce:	2104      	movs	r1, #4
   178d0:	f104 0008 	add.w	r0, r4, #8
   178d4:	f00c fa56 	bl	23d84 <net_buf_simple_pull_mem>
   178d8:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   178da:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   178dc:	89a1      	ldrh	r1, [r4, #12]
   178de:	4291      	cmp	r1, r2
   178e0:	d135      	bne.n	1794e <l2cap_recv+0x8e>
	if (!hdr->ident) {
   178e2:	7841      	ldrb	r1, [r0, #1]
   178e4:	2900      	cmp	r1, #0
   178e6:	d043      	beq.n	17970 <l2cap_recv+0xb0>
	switch (hdr->code) {
   178e8:	7803      	ldrb	r3, [r0, #0]
   178ea:	2b12      	cmp	r3, #18
   178ec:	d054      	beq.n	17998 <l2cap_recv+0xd8>
   178ee:	2b13      	cmp	r3, #19
   178f0:	d04d      	beq.n	1798e <l2cap_recv+0xce>
   178f2:	2b01      	cmp	r3, #1
   178f4:	d028      	beq.n	17948 <l2cap_recv+0x88>
   178f6:	492b      	ldr	r1, [pc, #172]	; (179a4 <l2cap_recv+0xe4>)
   178f8:	4a2b      	ldr	r2, [pc, #172]	; (179a8 <l2cap_recv+0xe8>)
   178fa:	1a89      	subs	r1, r1, r2
   178fc:	08c9      	lsrs	r1, r1, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   178fe:	f04f 0200 	mov.w	r2, #0
   17902:	2002      	movs	r0, #2
   17904:	f360 0202 	bfi	r2, r0, #0, #3
   17908:	f36f 02c5 	bfc	r2, #3, #3
   1790c:	f361 128f 	bfi	r2, r1, #6, #10
   17910:	4619      	mov	r1, r3
   17912:	4826      	ldr	r0, [pc, #152]	; (179ac <l2cap_recv+0xec>)
   17914:	f7fa f9e8 	bl	11ce8 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   17918:	7869      	ldrb	r1, [r5, #1]
   1791a:	2200      	movs	r2, #0
   1791c:	9200      	str	r2, [sp, #0]
   1791e:	4613      	mov	r3, r2
   17920:	6830      	ldr	r0, [r6, #0]
   17922:	f00a ff1d 	bl	22760 <l2cap_send_reject>
		break;
   17926:	e00f      	b.n	17948 <l2cap_recv+0x88>
   17928:	4b1e      	ldr	r3, [pc, #120]	; (179a4 <l2cap_recv+0xe4>)
   1792a:	4a1f      	ldr	r2, [pc, #124]	; (179a8 <l2cap_recv+0xe8>)
   1792c:	1a9b      	subs	r3, r3, r2
   1792e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   17930:	f04f 0100 	mov.w	r1, #0
   17934:	2201      	movs	r2, #1
   17936:	f362 0102 	bfi	r1, r2, #0, #3
   1793a:	f36f 01c5 	bfc	r1, #3, #3
   1793e:	f363 118f 	bfi	r1, r3, #6, #10
   17942:	481b      	ldr	r0, [pc, #108]	; (179b0 <l2cap_recv+0xf0>)
   17944:	f7fa fa86 	bl	11e54 <log_0>
}
   17948:	2000      	movs	r0, #0
   1794a:	b002      	add	sp, #8
   1794c:	bd70      	pop	{r4, r5, r6, pc}
   1794e:	4815      	ldr	r0, [pc, #84]	; (179a4 <l2cap_recv+0xe4>)
   17950:	4b15      	ldr	r3, [pc, #84]	; (179a8 <l2cap_recv+0xe8>)
   17952:	1ac0      	subs	r0, r0, r3
   17954:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   17956:	f04f 0300 	mov.w	r3, #0
   1795a:	2401      	movs	r4, #1
   1795c:	f364 0302 	bfi	r3, r4, #0, #3
   17960:	f36f 03c5 	bfc	r3, #3, #3
   17964:	f360 138f 	bfi	r3, r0, #6, #10
   17968:	4812      	ldr	r0, [pc, #72]	; (179b4 <l2cap_recv+0xf4>)
   1796a:	f7fa f9f3 	bl	11d54 <log_2>
		return 0;
   1796e:	e7eb      	b.n	17948 <l2cap_recv+0x88>
   17970:	4b0c      	ldr	r3, [pc, #48]	; (179a4 <l2cap_recv+0xe4>)
   17972:	4a0d      	ldr	r2, [pc, #52]	; (179a8 <l2cap_recv+0xe8>)
   17974:	1a9b      	subs	r3, r3, r2
   17976:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   17978:	2201      	movs	r2, #1
   1797a:	f362 0102 	bfi	r1, r2, #0, #3
   1797e:	f36f 01c5 	bfc	r1, #3, #3
   17982:	f363 118f 	bfi	r1, r3, #6, #10
   17986:	480c      	ldr	r0, [pc, #48]	; (179b8 <l2cap_recv+0xf8>)
   17988:	f7fa fa64 	bl	11e54 <log_0>
		return 0;
   1798c:	e7dc      	b.n	17948 <l2cap_recv+0x88>
		le_conn_param_rsp(l2cap, buf);
   1798e:	4621      	mov	r1, r4
   17990:	4630      	mov	r0, r6
   17992:	f7ff fe1d 	bl	175d0 <le_conn_param_rsp>
		break;
   17996:	e7d7      	b.n	17948 <l2cap_recv+0x88>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   17998:	4622      	mov	r2, r4
   1799a:	4630      	mov	r0, r6
   1799c:	f7ff ff2c 	bl	177f8 <le_conn_param_update_req>
			break;
   179a0:	e7d2      	b.n	17948 <l2cap_recv+0x88>
   179a2:	bf00      	nop
   179a4:	00025dc0 	.word	0x00025dc0
   179a8:	00025d80 	.word	0x00025d80
   179ac:	000274d8 	.word	0x000274d8
   179b0:	00027470 	.word	0x00027470
   179b4:	00027490 	.word	0x00027490
   179b8:	000274b4 	.word	0x000274b4

000179bc <bt_l2cap_recv>:
{
   179bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   179be:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   179c0:	898b      	ldrh	r3, [r1, #12]
   179c2:	2b03      	cmp	r3, #3
   179c4:	d911      	bls.n	179ea <bt_l2cap_recv+0x2e>
   179c6:	4605      	mov	r5, r0
   179c8:	4616      	mov	r6, r2
   179ca:	2104      	movs	r1, #4
   179cc:	f104 0008 	add.w	r0, r4, #8
   179d0:	f00c f9d8 	bl	23d84 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   179d4:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   179d6:	4639      	mov	r1, r7
   179d8:	4628      	mov	r0, r5
   179da:	f00a ff01 	bl	227e0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   179de:	b1c0      	cbz	r0, 17a12 <bt_l2cap_recv+0x56>
	l2cap_chan_recv(chan, buf, complete);
   179e0:	4632      	mov	r2, r6
   179e2:	4621      	mov	r1, r4
   179e4:	f00a fe49 	bl	2267a <l2cap_chan_recv>
}
   179e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   179ea:	4b14      	ldr	r3, [pc, #80]	; (17a3c <bt_l2cap_recv+0x80>)
   179ec:	4a14      	ldr	r2, [pc, #80]	; (17a40 <bt_l2cap_recv+0x84>)
   179ee:	1a9b      	subs	r3, r3, r2
   179f0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   179f2:	f04f 0100 	mov.w	r1, #0
   179f6:	2201      	movs	r2, #1
   179f8:	f362 0102 	bfi	r1, r2, #0, #3
   179fc:	f36f 01c5 	bfc	r1, #3, #3
   17a00:	f363 118f 	bfi	r1, r3, #6, #10
   17a04:	480f      	ldr	r0, [pc, #60]	; (17a44 <bt_l2cap_recv+0x88>)
   17a06:	f7fa fa25 	bl	11e54 <log_0>
		net_buf_unref(buf);
   17a0a:	4620      	mov	r0, r4
   17a0c:	f00c f94f 	bl	23cae <net_buf_unref>
		return;
   17a10:	e7ea      	b.n	179e8 <bt_l2cap_recv+0x2c>
   17a12:	4b0a      	ldr	r3, [pc, #40]	; (17a3c <bt_l2cap_recv+0x80>)
   17a14:	4a0a      	ldr	r2, [pc, #40]	; (17a40 <bt_l2cap_recv+0x84>)
   17a16:	1a9b      	subs	r3, r3, r2
   17a18:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   17a1a:	f04f 0200 	mov.w	r2, #0
   17a1e:	2102      	movs	r1, #2
   17a20:	f361 0202 	bfi	r2, r1, #0, #3
   17a24:	f36f 02c5 	bfc	r2, #3, #3
   17a28:	f363 128f 	bfi	r2, r3, #6, #10
   17a2c:	4639      	mov	r1, r7
   17a2e:	4806      	ldr	r0, [pc, #24]	; (17a48 <bt_l2cap_recv+0x8c>)
   17a30:	f7fa f95a 	bl	11ce8 <log_1>
		net_buf_unref(buf);
   17a34:	4620      	mov	r0, r4
   17a36:	f00c f93a 	bl	23cae <net_buf_unref>
		return;
   17a3a:	e7d5      	b.n	179e8 <bt_l2cap_recv+0x2c>
   17a3c:	00025dc0 	.word	0x00025dc0
   17a40:	00025d80 	.word	0x00025d80
   17a44:	000274f8 	.word	0x000274f8
   17a48:	00027518 	.word	0x00027518

00017a4c <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   17a4c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   17a4e:	4b03      	ldr	r3, [pc, #12]	; (17a5c <att_cfm_sent+0x10>)
   17a50:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   17a54:	f00a ff05 	bl	22862 <att_sent>
}
   17a58:	bd08      	pop	{r3, pc}
   17a5a:	bf00      	nop
   17a5c:	00022b5d 	.word	0x00022b5d

00017a60 <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   17a60:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   17a62:	4b03      	ldr	r3, [pc, #12]	; (17a70 <att_rsp_sent+0x10>)
   17a64:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   17a68:	f00a fefb 	bl	22862 <att_sent>
}
   17a6c:	bd08      	pop	{r3, pc}
   17a6e:	bf00      	nop
   17a70:	00022b79 	.word	0x00022b79

00017a74 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   17a74:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   17a76:	4b03      	ldr	r3, [pc, #12]	; (17a84 <att_req_sent+0x10>)
   17a78:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   17a7c:	f00a fef1 	bl	22862 <att_sent>
}
   17a80:	bd08      	pop	{r3, pc}
   17a82:	bf00      	nop
   17a84:	00022b45 	.word	0x00022b45

00017a88 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   17a88:	4b08      	ldr	r3, [pc, #32]	; (17aac <att_cb+0x24>)
   17a8a:	4298      	cmp	r0, r3
   17a8c:	d009      	beq.n	17aa2 <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   17a8e:	4b08      	ldr	r3, [pc, #32]	; (17ab0 <att_cb+0x28>)
   17a90:	4298      	cmp	r0, r3
   17a92:	d008      	beq.n	17aa6 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   17a94:	4b07      	ldr	r3, [pc, #28]	; (17ab4 <att_cb+0x2c>)
   17a96:	4298      	cmp	r0, r3
   17a98:	d001      	beq.n	17a9e <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   17a9a:	4807      	ldr	r0, [pc, #28]	; (17ab8 <att_cb+0x30>)
	}
}
   17a9c:	4770      	bx	lr
		return att_req_sent;
   17a9e:	4807      	ldr	r0, [pc, #28]	; (17abc <att_cb+0x34>)
   17aa0:	4770      	bx	lr
		return att_rsp_sent;
   17aa2:	4807      	ldr	r0, [pc, #28]	; (17ac0 <att_cb+0x38>)
   17aa4:	4770      	bx	lr
		return att_cfm_sent;
   17aa6:	4807      	ldr	r0, [pc, #28]	; (17ac4 <att_cb+0x3c>)
   17aa8:	4770      	bx	lr
   17aaa:	bf00      	nop
   17aac:	00022b79 	.word	0x00022b79
   17ab0:	00022b5d 	.word	0x00022b5d
   17ab4:	00022b45 	.word	0x00022b45
   17ab8:	00022863 	.word	0x00022863
   17abc:	00017a75 	.word	0x00017a75
   17ac0:	00017a61 	.word	0x00017a61
   17ac4:	00017a4d 	.word	0x00017a4d

00017ac8 <chan_cb>:
{
   17ac8:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   17aca:	6883      	ldr	r3, [r0, #8]
   17acc:	7818      	ldrb	r0, [r3, #0]
   17ace:	f00a ff11 	bl	228f4 <att_op_get_type>
   17ad2:	3801      	subs	r0, #1
   17ad4:	2804      	cmp	r0, #4
   17ad6:	d808      	bhi.n	17aea <chan_cb+0x22>
   17ad8:	e8df f000 	tbb	[pc, r0]
   17adc:	09070305 	.word	0x09070305
   17ae0:	05          	.byte	0x05
   17ae1:	00          	.byte	0x00
   17ae2:	4804      	ldr	r0, [pc, #16]	; (17af4 <chan_cb+0x2c>)
   17ae4:	e000      	b.n	17ae8 <chan_cb+0x20>
		return chan_req_sent;
   17ae6:	4804      	ldr	r0, [pc, #16]	; (17af8 <chan_cb+0x30>)
}
   17ae8:	bd08      	pop	{r3, pc}
		return NULL;
   17aea:	2000      	movs	r0, #0
   17aec:	e7fc      	b.n	17ae8 <chan_cb+0x20>
		return chan_cfm_sent;
   17aee:	4803      	ldr	r0, [pc, #12]	; (17afc <chan_cb+0x34>)
   17af0:	e7fa      	b.n	17ae8 <chan_cb+0x20>
   17af2:	bf00      	nop
   17af4:	00022b79 	.word	0x00022b79
   17af8:	00022b45 	.word	0x00022b45
   17afc:	00022b5d 	.word	0x00022b5d

00017b00 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   17b00:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   17b02:	7a83      	ldrb	r3, [r0, #10]
   17b04:	2b07      	cmp	r3, #7
   17b06:	d111      	bne.n	17b2c <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   17b08:	2104      	movs	r1, #4
   17b0a:	f00a fe69 	bl	227e0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17b0e:	4604      	mov	r4, r0
   17b10:	b1f0      	cbz	r0, 17b50 <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b12:	f3bf 8f5b 	dmb	ish
   17b16:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   17b1a:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   17b1e:	f013 0f04 	tst.w	r3, #4
   17b22:	d126      	bne.n	17b72 <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   17b24:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   17b28:	4620      	mov	r0, r4
   17b2a:	bd10      	pop	{r4, pc}
   17b2c:	4b1a      	ldr	r3, [pc, #104]	; (17b98 <att_get+0x98>)
   17b2e:	4a1b      	ldr	r2, [pc, #108]	; (17b9c <att_get+0x9c>)
   17b30:	1a9b      	subs	r3, r3, r2
   17b32:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   17b34:	f04f 0100 	mov.w	r1, #0
   17b38:	2202      	movs	r2, #2
   17b3a:	f362 0102 	bfi	r1, r2, #0, #3
   17b3e:	f36f 01c5 	bfc	r1, #3, #3
   17b42:	f363 118f 	bfi	r1, r3, #6, #10
   17b46:	4816      	ldr	r0, [pc, #88]	; (17ba0 <att_get+0xa0>)
   17b48:	f7fa f984 	bl	11e54 <log_0>
		return NULL;
   17b4c:	2400      	movs	r4, #0
   17b4e:	e7eb      	b.n	17b28 <att_get+0x28>
   17b50:	4b11      	ldr	r3, [pc, #68]	; (17b98 <att_get+0x98>)
   17b52:	4a12      	ldr	r2, [pc, #72]	; (17b9c <att_get+0x9c>)
   17b54:	1a9b      	subs	r3, r3, r2
   17b56:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   17b58:	f04f 0100 	mov.w	r1, #0
   17b5c:	2201      	movs	r2, #1
   17b5e:	f362 0102 	bfi	r1, r2, #0, #3
   17b62:	f36f 01c5 	bfc	r1, #3, #3
   17b66:	f363 118f 	bfi	r1, r3, #6, #10
   17b6a:	480e      	ldr	r0, [pc, #56]	; (17ba4 <att_get+0xa4>)
   17b6c:	f7fa f972 	bl	11e54 <log_0>
		return NULL;
   17b70:	e7da      	b.n	17b28 <att_get+0x28>
   17b72:	4b09      	ldr	r3, [pc, #36]	; (17b98 <att_get+0x98>)
   17b74:	4a09      	ldr	r2, [pc, #36]	; (17b9c <att_get+0x9c>)
   17b76:	1a9b      	subs	r3, r3, r2
   17b78:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   17b7a:	f04f 0100 	mov.w	r1, #0
   17b7e:	2202      	movs	r2, #2
   17b80:	f362 0102 	bfi	r1, r2, #0, #3
   17b84:	f36f 01c5 	bfc	r1, #3, #3
   17b88:	f363 118f 	bfi	r1, r3, #6, #10
   17b8c:	4806      	ldr	r0, [pc, #24]	; (17ba8 <att_get+0xa8>)
   17b8e:	f7fa f961 	bl	11e54 <log_0>
		return NULL;
   17b92:	2400      	movs	r4, #0
   17b94:	e7c8      	b.n	17b28 <att_get+0x28>
   17b96:	bf00      	nop
   17b98:	00025d88 	.word	0x00025d88
   17b9c:	00025d80 	.word	0x00025d80
   17ba0:	00027574 	.word	0x00027574
   17ba4:	00027584 	.word	0x00027584
   17ba8:	000275a0 	.word	0x000275a0

00017bac <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   17bac:	b570      	push	{r4, r5, r6, lr}
   17bae:	b082      	sub	sp, #8
   17bb0:	4605      	mov	r5, r0
   17bb2:	460e      	mov	r6, r1
	return list->head;
   17bb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17bb6:	b10b      	cbz	r3, 17bbc <att_chan_new+0x10>
   17bb8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   17bbc:	9301      	str	r3, [sp, #4]
	int quota = 0;
   17bbe:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17bc0:	e014      	b.n	17bec <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   17bc2:	3101      	adds	r1, #1
   17bc4:	e017      	b.n	17bf6 <att_chan_new+0x4a>
   17bc6:	4b2d      	ldr	r3, [pc, #180]	; (17c7c <att_chan_new+0xd0>)
   17bc8:	4a2d      	ldr	r2, [pc, #180]	; (17c80 <att_chan_new+0xd4>)
   17bca:	1a9b      	subs	r3, r3, r2
   17bcc:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   17bce:	f04f 0200 	mov.w	r2, #0
   17bd2:	2001      	movs	r0, #1
   17bd4:	f360 0202 	bfi	r2, r0, #0, #3
   17bd8:	f36f 02c5 	bfc	r2, #3, #3
   17bdc:	f363 128f 	bfi	r2, r3, #6, #10
   17be0:	4828      	ldr	r0, [pc, #160]	; (17c84 <att_chan_new+0xd8>)
   17be2:	f7fa f881 	bl	11ce8 <log_1>
			return NULL;
   17be6:	2400      	movs	r4, #0
   17be8:	e033      	b.n	17c52 <att_chan_new+0xa6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17bea:	9301      	str	r3, [sp, #4]
   17bec:	9c01      	ldr	r4, [sp, #4]
   17bee:	b174      	cbz	r4, 17c0e <att_chan_new+0x62>
		if (chan->att == att) {
   17bf0:	6823      	ldr	r3, [r4, #0]
   17bf2:	42ab      	cmp	r3, r5
   17bf4:	d0e5      	beq.n	17bc2 <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   17bf6:	2901      	cmp	r1, #1
   17bf8:	d0e5      	beq.n	17bc6 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17bfa:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   17bfe:	d0f4      	beq.n	17bea <att_chan_new+0x3e>
	return node->next;
   17c00:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   17c04:	2b00      	cmp	r3, #0
   17c06:	d0f0      	beq.n	17bea <att_chan_new+0x3e>
   17c08:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   17c0c:	e7ed      	b.n	17bea <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   17c0e:	2200      	movs	r2, #0
   17c10:	2300      	movs	r3, #0
   17c12:	a901      	add	r1, sp, #4
   17c14:	481c      	ldr	r0, [pc, #112]	; (17c88 <att_chan_new+0xdc>)
   17c16:	f004 fdfb 	bl	1c810 <k_mem_slab_alloc>
   17c1a:	b9e8      	cbnz	r0, 17c58 <att_chan_new+0xac>
__ssp_bos_icheck3(memset, void *, int)
   17c1c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17c20:	2100      	movs	r1, #0
   17c22:	9801      	ldr	r0, [sp, #4]
   17c24:	f00d feff 	bl	25a26 <memset>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
	chan->chan.chan.ops = &ops;
   17c28:	9801      	ldr	r0, [sp, #4]
   17c2a:	4b18      	ldr	r3, [pc, #96]	; (17c8c <att_chan_new+0xe0>)
   17c2c:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   17c2e:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   17c30:	f00d f9f9 	bl	25026 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   17c34:	9b01      	ldr	r3, [sp, #4]
   17c36:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17c38:	f3bf 8f5b 	dmb	ish
   17c3c:	e853 2f00 	ldrex	r2, [r3]
   17c40:	e843 6100 	strex	r1, r6, [r3]
   17c44:	2900      	cmp	r1, #0
   17c46:	d1f9      	bne.n	17c3c <att_chan_new+0x90>
   17c48:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   17c4c:	9b01      	ldr	r3, [sp, #4]
   17c4e:	601d      	str	r5, [r3, #0]

	return chan;
   17c50:	9c01      	ldr	r4, [sp, #4]
}
   17c52:	4620      	mov	r0, r4
   17c54:	b002      	add	sp, #8
   17c56:	bd70      	pop	{r4, r5, r6, pc}
   17c58:	4b08      	ldr	r3, [pc, #32]	; (17c7c <att_chan_new+0xd0>)
   17c5a:	4a09      	ldr	r2, [pc, #36]	; (17c80 <att_chan_new+0xd4>)
   17c5c:	1a9b      	subs	r3, r3, r2
   17c5e:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   17c60:	f04f 0200 	mov.w	r2, #0
   17c64:	2101      	movs	r1, #1
   17c66:	f361 0202 	bfi	r2, r1, #0, #3
   17c6a:	f36f 02c5 	bfc	r2, #3, #3
   17c6e:	f363 128f 	bfi	r2, r3, #6, #10
   17c72:	6829      	ldr	r1, [r5, #0]
   17c74:	4806      	ldr	r0, [pc, #24]	; (17c90 <att_chan_new+0xe4>)
   17c76:	f7fa f837 	bl	11ce8 <log_1>
		return NULL;
   17c7a:	e7ea      	b.n	17c52 <att_chan_new+0xa6>
   17c7c:	00025d88 	.word	0x00025d88
   17c80:	00025d80 	.word	0x00025d80
   17c84:	000275c4 	.word	0x000275c4
   17c88:	200006a4 	.word	0x200006a4
   17c8c:	20000488 	.word	0x20000488
   17c90:	000275ec 	.word	0x000275ec

00017c94 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   17c94:	b570      	push	{r4, r5, r6, lr}
   17c96:	b082      	sub	sp, #8
   17c98:	4606      	mov	r6, r0
   17c9a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   17c9c:	2200      	movs	r2, #0
   17c9e:	2300      	movs	r3, #0
   17ca0:	a901      	add	r1, sp, #4
   17ca2:	4819      	ldr	r0, [pc, #100]	; (17d08 <bt_att_accept+0x74>)
   17ca4:	f004 fdb4 	bl	1c810 <k_mem_slab_alloc>
   17ca8:	b9b0      	cbnz	r0, 17cd8 <bt_att_accept+0x44>
   17caa:	4605      	mov	r5, r0
   17cac:	222c      	movs	r2, #44	; 0x2c
   17cae:	2100      	movs	r1, #0
   17cb0:	9801      	ldr	r0, [sp, #4]
   17cb2:	f00d feb8 	bl	25a26 <memset>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
	att->conn = conn;
   17cb6:	9b01      	ldr	r3, [sp, #4]
   17cb8:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   17cba:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   17cbc:	2100      	movs	r1, #0
   17cbe:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   17cc0:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   17cc2:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   17cc4:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   17cc6:	f7ff ff71 	bl	17bac <att_chan_new>
	if (!chan) {
   17cca:	4603      	mov	r3, r0
   17ccc:	b1c0      	cbz	r0, 17d00 <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   17cce:	3308      	adds	r3, #8
   17cd0:	6023      	str	r3, [r4, #0]

	return 0;
}
   17cd2:	4628      	mov	r0, r5
   17cd4:	b002      	add	sp, #8
   17cd6:	bd70      	pop	{r4, r5, r6, pc}
   17cd8:	4b0c      	ldr	r3, [pc, #48]	; (17d0c <bt_att_accept+0x78>)
   17cda:	4a0d      	ldr	r2, [pc, #52]	; (17d10 <bt_att_accept+0x7c>)
   17cdc:	1a9b      	subs	r3, r3, r2
   17cde:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   17ce0:	f04f 0200 	mov.w	r2, #0
   17ce4:	2101      	movs	r1, #1
   17ce6:	f361 0202 	bfi	r2, r1, #0, #3
   17cea:	f36f 02c5 	bfc	r2, #3, #3
   17cee:	f363 128f 	bfi	r2, r3, #6, #10
   17cf2:	4631      	mov	r1, r6
   17cf4:	4807      	ldr	r0, [pc, #28]	; (17d14 <bt_att_accept+0x80>)
   17cf6:	f7f9 fff7 	bl	11ce8 <log_1>
		return -ENOMEM;
   17cfa:	f06f 050b 	mvn.w	r5, #11
   17cfe:	e7e8      	b.n	17cd2 <bt_att_accept+0x3e>
		return -ENOMEM;
   17d00:	f06f 050b 	mvn.w	r5, #11
   17d04:	e7e5      	b.n	17cd2 <bt_att_accept+0x3e>
   17d06:	bf00      	nop
   17d08:	20000688 	.word	0x20000688
   17d0c:	00025d88 	.word	0x00025d88
   17d10:	00025d80 	.word	0x00025d80
   17d14:	00027614 	.word	0x00027614

00017d18 <bt_att_released>:
{
   17d18:	b500      	push	{lr}
   17d1a:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17d1c:	3808      	subs	r0, #8
   17d1e:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   17d20:	a901      	add	r1, sp, #4
   17d22:	4803      	ldr	r0, [pc, #12]	; (17d30 <bt_att_released+0x18>)
   17d24:	f00d f863 	bl	24dee <k_mem_slab_free>
}
   17d28:	b003      	add	sp, #12
   17d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   17d2e:	bf00      	nop
   17d30:	200006a4 	.word	0x200006a4

00017d34 <chan_send>:
{
   17d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17d38:	b083      	sub	sp, #12
   17d3a:	4604      	mov	r4, r0
   17d3c:	460d      	mov	r5, r1
   17d3e:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   17d40:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   17d42:	781b      	ldrb	r3, [r3, #0]
   17d44:	2bd2      	cmp	r3, #210	; 0xd2
   17d46:	d021      	beq.n	17d8c <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   17d48:	f105 0008 	add.w	r0, r5, #8
   17d4c:	f00c f832 	bl	23db4 <net_buf_simple_headroom>
   17d50:	b287      	uxth	r7, r0
	state->len = buf->len;
   17d52:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   17d56:	b3a6      	cbz	r6, 17dc2 <chan_send+0x8e>
   17d58:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17d5c:	f854 8b08 	ldr.w	r8, [r4], #8
   17d60:	4630      	mov	r0, r6
   17d62:	f7ff fe91 	bl	17a88 <att_cb>
   17d66:	4603      	mov	r3, r0
   17d68:	f8d8 0000 	ldr.w	r0, [r8]
   17d6c:	9400      	str	r4, [sp, #0]
   17d6e:	462a      	mov	r2, r5
   17d70:	2104      	movs	r1, #4
   17d72:	f00a fce0 	bl	22736 <bt_l2cap_send_cb>
	if (err) {
   17d76:	4680      	mov	r8, r0
   17d78:	b120      	cbz	r0, 17d84 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   17d7a:	6928      	ldr	r0, [r5, #16]
   17d7c:	4438      	add	r0, r7
   17d7e:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   17d80:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   17d84:	4640      	mov	r0, r8
   17d86:	b003      	add	sp, #12
   17d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   17d8c:	6803      	ldr	r3, [r0, #0]
   17d8e:	6818      	ldr	r0, [r3, #0]
   17d90:	f00b fe7c 	bl	23a8c <bt_smp_sign>
		if (err) {
   17d94:	4680      	mov	r8, r0
   17d96:	2800      	cmp	r0, #0
   17d98:	d0d6      	beq.n	17d48 <chan_send+0x14>
   17d9a:	4b0c      	ldr	r3, [pc, #48]	; (17dcc <chan_send+0x98>)
   17d9c:	4a0c      	ldr	r2, [pc, #48]	; (17dd0 <chan_send+0x9c>)
   17d9e:	1a9b      	subs	r3, r3, r2
   17da0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   17da2:	f04f 0100 	mov.w	r1, #0
   17da6:	2201      	movs	r2, #1
   17da8:	f362 0102 	bfi	r1, r2, #0, #3
   17dac:	f36f 01c5 	bfc	r1, #3, #3
   17db0:	f363 118f 	bfi	r1, r3, #6, #10
   17db4:	4807      	ldr	r0, [pc, #28]	; (17dd4 <chan_send+0xa0>)
   17db6:	f7fa f84d 	bl	11e54 <log_0>
			net_buf_unref(buf);
   17dba:	4628      	mov	r0, r5
   17dbc:	f00b ff77 	bl	23cae <net_buf_unref>
			return err;
   17dc0:	e7e0      	b.n	17d84 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   17dc2:	4628      	mov	r0, r5
   17dc4:	f7ff fe80 	bl	17ac8 <chan_cb>
   17dc8:	4606      	mov	r6, r0
   17dca:	e7c5      	b.n	17d58 <chan_send+0x24>
   17dcc:	00025d88 	.word	0x00025d88
   17dd0:	00025d80 	.word	0x00025d80
   17dd4:	0002763c 	.word	0x0002763c

00017dd8 <read_group_cb>:
{
   17dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17dda:	b085      	sub	sp, #20
   17ddc:	4605      	mov	r5, r0
   17dde:	460e      	mov	r6, r1
   17de0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   17de2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17de4:	2300      	movs	r3, #0
   17de6:	f88d 3008 	strb.w	r3, [sp, #8]
   17dea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17dee:	f8ad 300a 	strh.w	r3, [sp, #10]
   17df2:	a902      	add	r1, sp, #8
   17df4:	6800      	ldr	r0, [r0, #0]
   17df6:	f00a f890 	bl	21f1a <bt_uuid_cmp>
   17dfa:	b158      	cbz	r0, 17e14 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17dfc:	2300      	movs	r3, #0
   17dfe:	f88d 300c 	strb.w	r3, [sp, #12]
   17e02:	f642 0301 	movw	r3, #10241	; 0x2801
   17e06:	f8ad 300e 	strh.w	r3, [sp, #14]
   17e0a:	a903      	add	r1, sp, #12
   17e0c:	6828      	ldr	r0, [r5, #0]
   17e0e:	f00a f884 	bl	21f1a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17e12:	bb30      	cbnz	r0, 17e62 <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   17e14:	6861      	ldr	r1, [r4, #4]
   17e16:	6828      	ldr	r0, [r5, #0]
   17e18:	f00a f87f 	bl	21f1a <bt_uuid_cmp>
   17e1c:	bb48      	cbnz	r0, 17e72 <read_group_cb+0x9a>
	if (data->rsp->len &&
   17e1e:	68e3      	ldr	r3, [r4, #12]
   17e20:	781a      	ldrb	r2, [r3, #0]
   17e22:	b132      	cbz	r2, 17e32 <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   17e24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   17e28:	68a1      	ldr	r1, [r4, #8]
   17e2a:	8989      	ldrh	r1, [r1, #12]
   17e2c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   17e2e:	4293      	cmp	r3, r2
   17e30:	db24      	blt.n	17e7c <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   17e32:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   17e34:	2104      	movs	r1, #4
   17e36:	3008      	adds	r0, #8
   17e38:	f00b ff83 	bl	23d42 <net_buf_simple_add>
   17e3c:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17e3e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17e40:	6923      	ldr	r3, [r4, #16]
   17e42:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   17e44:	9401      	str	r4, [sp, #4]
   17e46:	4b10      	ldr	r3, [pc, #64]	; (17e88 <read_group_cb+0xb0>)
   17e48:	9300      	str	r3, [sp, #0]
   17e4a:	2300      	movs	r3, #0
   17e4c:	68a2      	ldr	r2, [r4, #8]
   17e4e:	4629      	mov	r1, r5
   17e50:	4638      	mov	r0, r7
   17e52:	f00a ff74 	bl	22d3e <att_chan_read>
	if (read < 0) {
   17e56:	2800      	cmp	r0, #0
   17e58:	db12      	blt.n	17e80 <read_group_cb+0xa8>
	if (!data->group) {
   17e5a:	6923      	ldr	r3, [r4, #16]
   17e5c:	b193      	cbz	r3, 17e84 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   17e5e:	2001      	movs	r0, #1
   17e60:	e00a      	b.n	17e78 <read_group_cb+0xa0>
		if (data->group &&
   17e62:	6923      	ldr	r3, [r4, #16]
   17e64:	b11b      	cbz	r3, 17e6e <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   17e66:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   17e68:	42b2      	cmp	r2, r6
   17e6a:	d200      	bcs.n	17e6e <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   17e6c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17e6e:	2001      	movs	r0, #1
   17e70:	e002      	b.n	17e78 <read_group_cb+0xa0>
		data->group = NULL;
   17e72:	2300      	movs	r3, #0
   17e74:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   17e76:	2001      	movs	r0, #1
}
   17e78:	b005      	add	sp, #20
   17e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   17e7c:	2000      	movs	r0, #0
   17e7e:	e7fb      	b.n	17e78 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   17e80:	2000      	movs	r0, #0
   17e82:	e7f9      	b.n	17e78 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   17e84:	2000      	movs	r0, #0
   17e86:	e7f7      	b.n	17e78 <read_group_cb+0xa0>
   17e88:	000228c7 	.word	0x000228c7

00017e8c <read_type_cb>:
{
   17e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17e90:	b083      	sub	sp, #12
   17e92:	4606      	mov	r6, r0
   17e94:	4688      	mov	r8, r1
   17e96:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   17e98:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   17e9a:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   17e9c:	6851      	ldr	r1, [r2, #4]
   17e9e:	6800      	ldr	r0, [r0, #0]
   17ea0:	f00a f83b 	bl	21f1a <bt_uuid_cmp>
   17ea4:	b120      	cbz	r0, 17eb0 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   17ea6:	2501      	movs	r5, #1
}
   17ea8:	4628      	mov	r0, r5
   17eaa:	b003      	add	sp, #12
   17eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   17eb0:	2215      	movs	r2, #21
   17eb2:	4631      	mov	r1, r6
   17eb4:	4628      	mov	r0, r5
   17eb6:	f00b fd48 	bl	2394a <bt_gatt_check_perm>
   17eba:	4605      	mov	r5, r0
   17ebc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   17ebe:	b130      	cbz	r0, 17ece <read_type_cb+0x42>
		if (data->rsp->len) {
   17ec0:	68e3      	ldr	r3, [r4, #12]
   17ec2:	781b      	ldrb	r3, [r3, #0]
   17ec4:	b10b      	cbz	r3, 17eca <read_type_cb+0x3e>
			data->err = 0x00;
   17ec6:	2300      	movs	r3, #0
   17ec8:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   17eca:	2500      	movs	r5, #0
   17ecc:	e7ec      	b.n	17ea8 <read_type_cb+0x1c>
	data->err = 0x00;
   17ece:	f04f 0900 	mov.w	r9, #0
   17ed2:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   17ed6:	68a0      	ldr	r0, [r4, #8]
   17ed8:	f00b ff13 	bl	23d02 <net_buf_frag_last>
   17edc:	2102      	movs	r1, #2
   17ede:	3008      	adds	r0, #8
   17ee0:	f00b ff2f 	bl	23d42 <net_buf_simple_add>
   17ee4:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   17ee6:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   17eea:	9401      	str	r4, [sp, #4]
   17eec:	4b11      	ldr	r3, [pc, #68]	; (17f34 <read_type_cb+0xa8>)
   17eee:	9300      	str	r3, [sp, #0]
   17ef0:	464b      	mov	r3, r9
   17ef2:	68a2      	ldr	r2, [r4, #8]
   17ef4:	4631      	mov	r1, r6
   17ef6:	4638      	mov	r0, r7
   17ef8:	f00a ff21 	bl	22d3e <att_chan_read>
	if (read < 0) {
   17efc:	2800      	cmp	r0, #0
   17efe:	db07      	blt.n	17f10 <read_type_cb+0x84>
	if (!data->item) {
   17f00:	6923      	ldr	r3, [r4, #16]
   17f02:	2b00      	cmp	r3, #0
   17f04:	d0d0      	beq.n	17ea8 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   17f06:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   17f0a:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   17f0c:	2200      	movs	r2, #0

	while (buf) {
   17f0e:	e006      	b.n	17f1e <read_type_cb+0x92>
		data->err = err_to_att(read);
   17f10:	f00a fcbd 	bl	2288e <err_to_att>
   17f14:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   17f16:	e7c7      	b.n	17ea8 <read_type_cb+0x1c>
		bytes += buf->len;
   17f18:	8999      	ldrh	r1, [r3, #12]
   17f1a:	440a      	add	r2, r1
		buf = buf->frags;
   17f1c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   17f1e:	2b00      	cmp	r3, #0
   17f20:	d1fa      	bne.n	17f18 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   17f22:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17f24:	68e3      	ldr	r3, [r4, #12]
   17f26:	781d      	ldrb	r5, [r3, #0]
   17f28:	42aa      	cmp	r2, r5
   17f2a:	bf94      	ite	ls
   17f2c:	2500      	movls	r5, #0
   17f2e:	2501      	movhi	r5, #1
   17f30:	e7ba      	b.n	17ea8 <read_type_cb+0x1c>
   17f32:	bf00      	nop
   17f34:	0002289f 	.word	0x0002289f

00017f38 <find_type_cb>:
{
   17f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f3c:	b093      	sub	sp, #76	; 0x4c
   17f3e:	4606      	mov	r6, r0
   17f40:	460f      	mov	r7, r1
   17f42:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   17f44:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   17f48:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17f4c:	2300      	movs	r3, #0
   17f4e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   17f52:	f642 0301 	movw	r3, #10241	; 0x2801
   17f56:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   17f5a:	a910      	add	r1, sp, #64	; 0x40
   17f5c:	6800      	ldr	r0, [r0, #0]
   17f5e:	f009 ffdc 	bl	21f1a <bt_uuid_cmp>
   17f62:	b928      	cbnz	r0, 17f70 <find_type_cb+0x38>
	data->group = NULL;
   17f64:	2300      	movs	r3, #0
   17f66:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   17f68:	2001      	movs	r0, #1
}
   17f6a:	b013      	add	sp, #76	; 0x4c
   17f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   17f70:	2300      	movs	r3, #0
   17f72:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   17f76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17f7a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   17f7e:	a911      	add	r1, sp, #68	; 0x44
   17f80:	6830      	ldr	r0, [r6, #0]
   17f82:	f009 ffca 	bl	21f1a <bt_uuid_cmp>
   17f86:	b928      	cbnz	r0, 17f94 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17f88:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   17f8c:	6868      	ldr	r0, [r5, #4]
   17f8e:	4603      	mov	r3, r0
	size_t bytes = 0;
   17f90:	2400      	movs	r4, #0
	while (buf) {
   17f92:	e00a      	b.n	17faa <find_type_cb+0x72>
		if (data->group &&
   17f94:	68ab      	ldr	r3, [r5, #8]
   17f96:	b11b      	cbz	r3, 17fa0 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   17f98:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   17f9a:	42ba      	cmp	r2, r7
   17f9c:	d200      	bcs.n	17fa0 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   17f9e:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17fa0:	2001      	movs	r0, #1
   17fa2:	e7e2      	b.n	17f6a <find_type_cb+0x32>
		bytes += buf->len;
   17fa4:	899a      	ldrh	r2, [r3, #12]
   17fa6:	4414      	add	r4, r2
		buf = buf->frags;
   17fa8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   17faa:	2b00      	cmp	r3, #0
   17fac:	d1fa      	bne.n	17fa4 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17fae:	1b0c      	subs	r4, r1, r4
   17fb0:	2c03      	cmp	r4, #3
   17fb2:	d801      	bhi.n	17fb8 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   17fb4:	2000      	movs	r0, #0
   17fb6:	e7d8      	b.n	17f6a <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   17fb8:	f00b fea3 	bl	23d02 <net_buf_frag_last>
   17fbc:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   17fbe:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   17fc2:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   17fc4:	2200      	movs	r2, #0
	while (buf) {
   17fc6:	b11b      	cbz	r3, 17fd0 <find_type_cb+0x98>
		bytes += buf->len;
   17fc8:	8999      	ldrh	r1, [r3, #12]
   17fca:	440a      	add	r2, r1
		buf = buf->frags;
   17fcc:	681b      	ldr	r3, [r3, #0]
   17fce:	e7fa      	b.n	17fc6 <find_type_cb+0x8e>
   17fd0:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   17fd4:	f104 0b08 	add.w	fp, r4, #8
   17fd8:	4658      	mov	r0, fp
   17fda:	f00b feef 	bl	23dbc <net_buf_simple_tailroom>
   17fde:	4582      	cmp	sl, r0
   17fe0:	d22b      	bcs.n	1803a <find_type_cb+0x102>
   17fe2:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   17fe6:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   17fe8:	2200      	movs	r2, #0
	while (buf) {
   17fea:	e002      	b.n	17ff2 <find_type_cb+0xba>
		bytes += buf->len;
   17fec:	8999      	ldrh	r1, [r3, #12]
   17fee:	440a      	add	r2, r1
		buf = buf->frags;
   17ff0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   17ff2:	2b00      	cmp	r3, #0
   17ff4:	d1fa      	bne.n	17fec <find_type_cb+0xb4>
   17ff6:	1a80      	subs	r0, r0, r2
	if (!len) {
   17ff8:	b318      	cbz	r0, 18042 <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   17ffa:	f8d6 8004 	ldr.w	r8, [r6, #4]
   17ffe:	2300      	movs	r3, #0
   18000:	9300      	str	r3, [sp, #0]
   18002:	2310      	movs	r3, #16
   18004:	aa0c      	add	r2, sp, #48	; 0x30
   18006:	4631      	mov	r1, r6
   18008:	4648      	mov	r0, r9
   1800a:	47c0      	blx	r8
	if (read < 0) {
   1800c:	1e06      	subs	r6, r0, #0
   1800e:	dba9      	blt.n	17f64 <find_type_cb+0x2c>
	if (read != data->value_len) {
   18010:	7c2a      	ldrb	r2, [r5, #16]
   18012:	42b2      	cmp	r2, r6
   18014:	d049      	beq.n	180aa <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18016:	68e9      	ldr	r1, [r5, #12]
   18018:	a807      	add	r0, sp, #28
   1801a:	f009 ff9c 	bl	21f56 <bt_uuid_create>
   1801e:	b300      	cbz	r0, 18062 <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18020:	b2f2      	uxtb	r2, r6
   18022:	a90c      	add	r1, sp, #48	; 0x30
   18024:	a802      	add	r0, sp, #8
   18026:	f009 ff96 	bl	21f56 <bt_uuid_create>
   1802a:	b360      	cbz	r0, 18086 <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1802c:	a902      	add	r1, sp, #8
   1802e:	a807      	add	r0, sp, #28
   18030:	f009 ff73 	bl	21f1a <bt_uuid_cmp>
   18034:	2800      	cmp	r0, #0
   18036:	d040      	beq.n	180ba <find_type_cb+0x182>
   18038:	e794      	b.n	17f64 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   1803a:	4658      	mov	r0, fp
   1803c:	f00b febe 	bl	23dbc <net_buf_simple_tailroom>
   18040:	e7da      	b.n	17ff8 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18042:	686b      	ldr	r3, [r5, #4]
   18044:	7998      	ldrb	r0, [r3, #6]
   18046:	f001 fc37 	bl	198b8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1804a:	2200      	movs	r2, #0
   1804c:	2300      	movs	r3, #0
   1804e:	f00b fdfb 	bl	23c48 <net_buf_alloc_fixed>
		if (!frag) {
   18052:	4604      	mov	r4, r0
   18054:	2800      	cmp	r0, #0
   18056:	d088      	beq.n	17f6a <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   18058:	4601      	mov	r1, r0
   1805a:	6868      	ldr	r0, [r5, #4]
   1805c:	f00b fe62 	bl	23d24 <net_buf_frag_add>
   18060:	e7cb      	b.n	17ffa <find_type_cb+0xc2>
   18062:	4b1c      	ldr	r3, [pc, #112]	; (180d4 <find_type_cb+0x19c>)
   18064:	4a1c      	ldr	r2, [pc, #112]	; (180d8 <find_type_cb+0x1a0>)
   18066:	1a9b      	subs	r3, r3, r2
   18068:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1806a:	f04f 0200 	mov.w	r2, #0
   1806e:	2102      	movs	r1, #2
   18070:	f361 0202 	bfi	r2, r1, #0, #3
   18074:	f36f 02c5 	bfc	r2, #3, #3
   18078:	f363 128f 	bfi	r2, r3, #6, #10
   1807c:	7c29      	ldrb	r1, [r5, #16]
   1807e:	4817      	ldr	r0, [pc, #92]	; (180dc <find_type_cb+0x1a4>)
   18080:	f7f9 fe32 	bl	11ce8 <log_1>
			goto skip;
   18084:	e76e      	b.n	17f64 <find_type_cb+0x2c>
   18086:	4b13      	ldr	r3, [pc, #76]	; (180d4 <find_type_cb+0x19c>)
   18088:	4a13      	ldr	r2, [pc, #76]	; (180d8 <find_type_cb+0x1a0>)
   1808a:	1a9b      	subs	r3, r3, r2
   1808c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   1808e:	f04f 0200 	mov.w	r2, #0
   18092:	2102      	movs	r1, #2
   18094:	f361 0202 	bfi	r2, r1, #0, #3
   18098:	f36f 02c5 	bfc	r2, #3, #3
   1809c:	f363 128f 	bfi	r2, r3, #6, #10
   180a0:	4631      	mov	r1, r6
   180a2:	480f      	ldr	r0, [pc, #60]	; (180e0 <find_type_cb+0x1a8>)
   180a4:	f7f9 fe20 	bl	11ce8 <log_1>
			goto skip;
   180a8:	e75c      	b.n	17f64 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   180aa:	4632      	mov	r2, r6
   180ac:	a90c      	add	r1, sp, #48	; 0x30
   180ae:	68e8      	ldr	r0, [r5, #12]
   180b0:	f00d fc83 	bl	259ba <memcmp>
   180b4:	2800      	cmp	r0, #0
   180b6:	f47f af55 	bne.w	17f64 <find_type_cb+0x2c>
	data->err = 0x00;
   180ba:	2300      	movs	r3, #0
   180bc:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   180be:	2104      	movs	r1, #4
   180c0:	f104 0008 	add.w	r0, r4, #8
   180c4:	f00b fe3d 	bl	23d42 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   180c8:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   180ca:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   180cc:	68ab      	ldr	r3, [r5, #8]
   180ce:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   180d0:	2001      	movs	r0, #1
   180d2:	e74a      	b.n	17f6a <find_type_cb+0x32>
   180d4:	00025d88 	.word	0x00025d88
   180d8:	00025d80 	.word	0x00025d80
   180dc:	00027650 	.word	0x00027650
   180e0:	00027670 	.word	0x00027670

000180e4 <bt_att_connected>:
{
   180e4:	b538      	push	{r3, r4, r5, lr}
   180e6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   180e8:	4605      	mov	r5, r0
   180ea:	f855 0908 	ldr.w	r0, [r5], #-8
   180ee:	f00a ff9f 	bl	23030 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   180f2:	4629      	mov	r1, r5
   180f4:	6800      	ldr	r0, [r0, #0]
   180f6:	f00a fc7e 	bl	229f6 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   180fa:	f3bf 8f5b 	dmb	ish
   180fe:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   18102:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   18106:	f013 0f08 	tst.w	r3, #8
   1810a:	d104      	bne.n	18116 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1810c:	2317      	movs	r3, #23
   1810e:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18112:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   18116:	4628      	mov	r0, r5
   18118:	f00a ff44 	bl	22fa4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1811c:	4902      	ldr	r1, [pc, #8]	; (18128 <bt_att_connected+0x44>)
   1811e:	f504 7084 	add.w	r0, r4, #264	; 0x108
   18122:	f00d f888 	bl	25236 <k_work_init_delayable>
}
   18126:	bd38      	pop	{r3, r4, r5, pc}
   18128:	00018a51 	.word	0x00018a51

0001812c <bt_att_chan_create_pdu>:
{
   1812c:	b538      	push	{r3, r4, r5, lr}
   1812e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18130:	3201      	adds	r2, #1
   18132:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   18136:	428a      	cmp	r2, r1
   18138:	d810      	bhi.n	1815c <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   1813a:	4628      	mov	r0, r5
   1813c:	f00a fbda 	bl	228f4 <att_op_get_type>
   18140:	2802      	cmp	r0, #2
   18142:	d01d      	beq.n	18180 <bt_att_chan_create_pdu+0x54>
   18144:	2804      	cmp	r0, #4
   18146:	d01b      	beq.n	18180 <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   18148:	f04f 32ff 	mov.w	r2, #4294967295
   1814c:	f04f 33ff 	mov.w	r3, #4294967295
   18150:	2100      	movs	r1, #0
   18152:	4608      	mov	r0, r1
   18154:	f00a faea 	bl	2272c <bt_l2cap_create_pdu_timeout>
   18158:	4604      	mov	r4, r0
   1815a:	e019      	b.n	18190 <bt_att_chan_create_pdu+0x64>
   1815c:	481a      	ldr	r0, [pc, #104]	; (181c8 <bt_att_chan_create_pdu+0x9c>)
   1815e:	4b1b      	ldr	r3, [pc, #108]	; (181cc <bt_att_chan_create_pdu+0xa0>)
   18160:	1ac0      	subs	r0, r0, r3
   18162:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18164:	f04f 0300 	mov.w	r3, #0
   18168:	2402      	movs	r4, #2
   1816a:	f364 0302 	bfi	r3, r4, #0, #3
   1816e:	f36f 03c5 	bfc	r3, #3, #3
   18172:	f360 138f 	bfi	r3, r0, #6, #10
   18176:	4816      	ldr	r0, [pc, #88]	; (181d0 <bt_att_chan_create_pdu+0xa4>)
   18178:	f7f9 fdec 	bl	11d54 <log_2>
		return NULL;
   1817c:	2400      	movs	r4, #0
   1817e:	e00e      	b.n	1819e <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   18180:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18184:	2300      	movs	r3, #0
   18186:	2100      	movs	r1, #0
   18188:	4608      	mov	r0, r1
   1818a:	f00a facf 	bl	2272c <bt_l2cap_create_pdu_timeout>
   1818e:	4604      	mov	r4, r0
	if (!buf) {
   18190:	b13c      	cbz	r4, 181a2 <bt_att_chan_create_pdu+0x76>
   18192:	2101      	movs	r1, #1
   18194:	f104 0008 	add.w	r0, r4, #8
   18198:	f00b fdd3 	bl	23d42 <net_buf_simple_add>
	hdr->code = op;
   1819c:	7005      	strb	r5, [r0, #0]
}
   1819e:	4620      	mov	r0, r4
   181a0:	bd38      	pop	{r3, r4, r5, pc}
   181a2:	4b09      	ldr	r3, [pc, #36]	; (181c8 <bt_att_chan_create_pdu+0x9c>)
   181a4:	4a09      	ldr	r2, [pc, #36]	; (181cc <bt_att_chan_create_pdu+0xa0>)
   181a6:	1a9b      	subs	r3, r3, r2
   181a8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   181aa:	f04f 0200 	mov.w	r2, #0
   181ae:	2101      	movs	r1, #1
   181b0:	f361 0202 	bfi	r2, r1, #0, #3
   181b4:	f36f 02c5 	bfc	r2, #3, #3
   181b8:	f363 128f 	bfi	r2, r3, #6, #10
   181bc:	4629      	mov	r1, r5
   181be:	4805      	ldr	r0, [pc, #20]	; (181d4 <bt_att_chan_create_pdu+0xa8>)
   181c0:	f7f9 fd92 	bl	11ce8 <log_1>
		return NULL;
   181c4:	e7eb      	b.n	1819e <bt_att_chan_create_pdu+0x72>
   181c6:	bf00      	nop
   181c8:	00025d88 	.word	0x00025d88
   181cc:	00025d80 	.word	0x00025d80
   181d0:	00027690 	.word	0x00027690
   181d4:	00027424 	.word	0x00027424

000181d8 <send_err_rsp>:
	if (!req) {
   181d8:	b901      	cbnz	r1, 181dc <send_err_rsp+0x4>
   181da:	4770      	bx	lr
{
   181dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181e0:	4606      	mov	r6, r0
   181e2:	4615      	mov	r5, r2
   181e4:	461c      	mov	r4, r3
   181e6:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   181e8:	2204      	movs	r2, #4
   181ea:	2101      	movs	r1, #1
   181ec:	f7ff ff9e 	bl	1812c <bt_att_chan_create_pdu>
	if (!buf) {
   181f0:	4680      	mov	r8, r0
   181f2:	b160      	cbz	r0, 1820e <send_err_rsp+0x36>
   181f4:	2104      	movs	r1, #4
   181f6:	3008      	adds	r0, #8
   181f8:	f00b fda3 	bl	23d42 <net_buf_simple_add>
	rsp->request = req;
   181fc:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   181fe:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   18202:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   18204:	4a03      	ldr	r2, [pc, #12]	; (18214 <send_err_rsp+0x3c>)
   18206:	4641      	mov	r1, r8
   18208:	4630      	mov	r0, r6
   1820a:	f00a fd8b 	bl	22d24 <bt_att_chan_send_rsp>
}
   1820e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18212:	bf00      	nop
   18214:	00022b79 	.word	0x00022b79

00018218 <bt_att_recv>:
{
   18218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1821c:	898b      	ldrh	r3, [r1, #12]
   1821e:	b1bb      	cbz	r3, 18250 <bt_att_recv+0x38>
   18220:	4607      	mov	r7, r0
   18222:	460e      	mov	r6, r1
   18224:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   18228:	2101      	movs	r1, #1
   1822a:	f106 0008 	add.w	r0, r6, #8
   1822e:	f00b fda9 	bl	23d84 <net_buf_simple_pull_mem>
   18232:	4605      	mov	r5, r0
	if (!att_chan->att) {
   18234:	f857 3c08 	ldr.w	r3, [r7, #-8]
   18238:	b1d3      	cbz	r3, 18270 <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1823a:	2300      	movs	r3, #0
   1823c:	2b0c      	cmp	r3, #12
   1823e:	d81e      	bhi.n	1827e <bt_att_recv+0x66>
		if (hdr->code == handlers[i].op) {
   18240:	782c      	ldrb	r4, [r5, #0]
   18242:	4a58      	ldr	r2, [pc, #352]	; (183a4 <bt_att_recv+0x18c>)
   18244:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   18248:	4294      	cmp	r4, r2
   1824a:	d014      	beq.n	18276 <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1824c:	3301      	adds	r3, #1
   1824e:	e7f5      	b.n	1823c <bt_att_recv+0x24>
   18250:	4b55      	ldr	r3, [pc, #340]	; (183a8 <bt_att_recv+0x190>)
   18252:	4a56      	ldr	r2, [pc, #344]	; (183ac <bt_att_recv+0x194>)
   18254:	1a9b      	subs	r3, r3, r2
   18256:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   18258:	f04f 0100 	mov.w	r1, #0
   1825c:	2201      	movs	r2, #1
   1825e:	f362 0102 	bfi	r1, r2, #0, #3
   18262:	f36f 01c5 	bfc	r1, #3, #3
   18266:	f363 118f 	bfi	r1, r3, #6, #10
   1826a:	4851      	ldr	r0, [pc, #324]	; (183b0 <bt_att_recv+0x198>)
   1826c:	f7f9 fdf2 	bl	11e54 <log_0>
}
   18270:	2000      	movs	r0, #0
   18272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   18276:	4c4b      	ldr	r4, [pc, #300]	; (183a4 <bt_att_recv+0x18c>)
   18278:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   1827c:	e000      	b.n	18280 <bt_att_recv+0x68>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1827e:	2400      	movs	r4, #0
	if (!handler) {
   18280:	b1cc      	cbz	r4, 182b6 <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   18282:	78a3      	ldrb	r3, [r4, #2]
   18284:	2b01      	cmp	r3, #1
   18286:	d036      	beq.n	182f6 <bt_att_recv+0xde>
		} else if (handler->type == ATT_INDICATION &&
   18288:	78a3      	ldrb	r3, [r4, #2]
   1828a:	2b05      	cmp	r3, #5
   1828c:	d055      	beq.n	1833a <bt_att_recv+0x122>
	if (buf->len < handler->expect_len) {
   1828e:	89b1      	ldrh	r1, [r6, #12]
   18290:	7863      	ldrb	r3, [r4, #1]
   18292:	4299      	cmp	r1, r3
   18294:	d372      	bcc.n	1837c <bt_att_recv+0x164>
		err = handler->func(att_chan, buf);
   18296:	6863      	ldr	r3, [r4, #4]
   18298:	4631      	mov	r1, r6
   1829a:	4640      	mov	r0, r8
   1829c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1829e:	78a3      	ldrb	r3, [r4, #2]
   182a0:	2b01      	cmp	r3, #1
   182a2:	d1e5      	bne.n	18270 <bt_att_recv+0x58>
   182a4:	2800      	cmp	r0, #0
   182a6:	d0e3      	beq.n	18270 <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   182a8:	4603      	mov	r3, r0
   182aa:	2200      	movs	r2, #0
   182ac:	7829      	ldrb	r1, [r5, #0]
   182ae:	4640      	mov	r0, r8
   182b0:	f7ff ff92 	bl	181d8 <send_err_rsp>
   182b4:	e7dc      	b.n	18270 <bt_att_recv+0x58>
   182b6:	4b3c      	ldr	r3, [pc, #240]	; (183a8 <bt_att_recv+0x190>)
   182b8:	4a3c      	ldr	r2, [pc, #240]	; (183ac <bt_att_recv+0x194>)
   182ba:	1a9b      	subs	r3, r3, r2
   182bc:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   182be:	f04f 0200 	mov.w	r2, #0
   182c2:	2102      	movs	r1, #2
   182c4:	f361 0202 	bfi	r2, r1, #0, #3
   182c8:	f36f 02c5 	bfc	r2, #3, #3
   182cc:	f363 128f 	bfi	r2, r3, #6, #10
   182d0:	7829      	ldrb	r1, [r5, #0]
   182d2:	4838      	ldr	r0, [pc, #224]	; (183b4 <bt_att_recv+0x19c>)
   182d4:	f7f9 fd08 	bl	11ce8 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   182d8:	782c      	ldrb	r4, [r5, #0]
   182da:	4620      	mov	r0, r4
   182dc:	f00a fb0a 	bl	228f4 <att_op_get_type>
   182e0:	2800      	cmp	r0, #0
   182e2:	d0c5      	beq.n	18270 <bt_att_recv+0x58>
   182e4:	2805      	cmp	r0, #5
   182e6:	d0c3      	beq.n	18270 <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   182e8:	2306      	movs	r3, #6
   182ea:	2200      	movs	r2, #0
   182ec:	4621      	mov	r1, r4
   182ee:	4640      	mov	r0, r8
   182f0:	f7ff ff72 	bl	181d8 <send_err_rsp>
		return 0;
   182f4:	e7bc      	b.n	18270 <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   182f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   182fa:	f3bf 8f5b 	dmb	ish
   182fe:	e853 2f00 	ldrex	r2, [r3]
   18302:	f042 0101 	orr.w	r1, r2, #1
   18306:	e843 1000 	strex	r0, r1, [r3]
   1830a:	2800      	cmp	r0, #0
   1830c:	d1f7      	bne.n	182fe <bt_att_recv+0xe6>
   1830e:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   18312:	f012 0f01 	tst.w	r2, #1
   18316:	d0b7      	beq.n	18288 <bt_att_recv+0x70>
   18318:	4b23      	ldr	r3, [pc, #140]	; (183a8 <bt_att_recv+0x190>)
   1831a:	4a24      	ldr	r2, [pc, #144]	; (183ac <bt_att_recv+0x194>)
   1831c:	1a9b      	subs	r3, r3, r2
   1831e:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   18320:	f04f 0100 	mov.w	r1, #0
   18324:	2202      	movs	r2, #2
   18326:	f362 0102 	bfi	r1, r2, #0, #3
   1832a:	f36f 01c5 	bfc	r1, #3, #3
   1832e:	f363 118f 	bfi	r1, r3, #6, #10
   18332:	4821      	ldr	r0, [pc, #132]	; (183b8 <bt_att_recv+0x1a0>)
   18334:	f7f9 fd8e 	bl	11e54 <log_0>
			return 0;
   18338:	e79a      	b.n	18270 <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   1833a:	37e8      	adds	r7, #232	; 0xe8
   1833c:	f3bf 8f5b 	dmb	ish
   18340:	e857 3f00 	ldrex	r3, [r7]
   18344:	f043 0202 	orr.w	r2, r3, #2
   18348:	e847 2100 	strex	r1, r2, [r7]
   1834c:	2900      	cmp	r1, #0
   1834e:	d1f7      	bne.n	18340 <bt_att_recv+0x128>
   18350:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   18354:	f013 0f02 	tst.w	r3, #2
   18358:	d099      	beq.n	1828e <bt_att_recv+0x76>
   1835a:	4b13      	ldr	r3, [pc, #76]	; (183a8 <bt_att_recv+0x190>)
   1835c:	4a13      	ldr	r2, [pc, #76]	; (183ac <bt_att_recv+0x194>)
   1835e:	1a9b      	subs	r3, r3, r2
   18360:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   18362:	f04f 0100 	mov.w	r1, #0
   18366:	2202      	movs	r2, #2
   18368:	f362 0102 	bfi	r1, r2, #0, #3
   1836c:	f36f 01c5 	bfc	r1, #3, #3
   18370:	f363 118f 	bfi	r1, r3, #6, #10
   18374:	4811      	ldr	r0, [pc, #68]	; (183bc <bt_att_recv+0x1a4>)
   18376:	f7f9 fd6d 	bl	11e54 <log_0>
			return 0;
   1837a:	e779      	b.n	18270 <bt_att_recv+0x58>
   1837c:	4a0a      	ldr	r2, [pc, #40]	; (183a8 <bt_att_recv+0x190>)
   1837e:	4b0b      	ldr	r3, [pc, #44]	; (183ac <bt_att_recv+0x194>)
   18380:	1ad2      	subs	r2, r2, r3
   18382:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18384:	f04f 0300 	mov.w	r3, #0
   18388:	2001      	movs	r0, #1
   1838a:	f360 0302 	bfi	r3, r0, #0, #3
   1838e:	f36f 03c5 	bfc	r3, #3, #3
   18392:	f362 138f 	bfi	r3, r2, #6, #10
   18396:	782a      	ldrb	r2, [r5, #0]
   18398:	4809      	ldr	r0, [pc, #36]	; (183c0 <bt_att_recv+0x1a8>)
   1839a:	f7f9 fcdb 	bl	11d54 <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   1839e:	2004      	movs	r0, #4
   183a0:	e77d      	b.n	1829e <bt_att_recv+0x86>
   183a2:	bf00      	nop
   183a4:	00027794 	.word	0x00027794
   183a8:	00025d88 	.word	0x00025d88
   183ac:	00025d80 	.word	0x00025d80
   183b0:	000276b8 	.word	0x000276b8
   183b4:	000276d4 	.word	0x000276d4
   183b8:	000276f0 	.word	0x000276f0
   183bc:	0002770c 	.word	0x0002770c
   183c0:	0002772c 	.word	0x0002772c

000183c4 <att_write_rsp>:
{
   183c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183c8:	b08a      	sub	sp, #40	; 0x28
   183ca:	4604      	mov	r4, r0
   183cc:	4616      	mov	r6, r2
   183ce:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   183d0:	6803      	ldr	r3, [r0, #0]
   183d2:	4688      	mov	r8, r1
   183d4:	3900      	subs	r1, #0
   183d6:	bf18      	it	ne
   183d8:	2101      	movne	r1, #1
   183da:	6818      	ldr	r0, [r3, #0]
   183dc:	f00b fae1 	bl	239a2 <bt_gatt_change_aware>
   183e0:	2800      	cmp	r0, #0
   183e2:	d051      	beq.n	18488 <att_write_rsp+0xc4>
	if (!handle) {
   183e4:	b925      	cbnz	r5, 183f0 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   183e6:	2701      	movs	r7, #1
}
   183e8:	4638      	mov	r0, r7
   183ea:	b00a      	add	sp, #40	; 0x28
   183ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   183f0:	2300      	movs	r3, #0
   183f2:	9304      	str	r3, [sp, #16]
   183f4:	9305      	str	r3, [sp, #20]
   183f6:	9306      	str	r3, [sp, #24]
   183f8:	9307      	str	r3, [sp, #28]
   183fa:	9308      	str	r3, [sp, #32]
   183fc:	9309      	str	r3, [sp, #36]	; 0x24
	if (rsp) {
   183fe:	b13e      	cbz	r6, 18410 <att_write_rsp+0x4c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18400:	461a      	mov	r2, r3
   18402:	4631      	mov	r1, r6
   18404:	4620      	mov	r0, r4
   18406:	f7ff fe91 	bl	1812c <bt_att_chan_create_pdu>
   1840a:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1840c:	2800      	cmp	r0, #0
   1840e:	d03d      	beq.n	1848c <att_write_rsp+0xc8>
	data.conn = chan->att->conn;
   18410:	6823      	ldr	r3, [r4, #0]
   18412:	681b      	ldr	r3, [r3, #0]
   18414:	9304      	str	r3, [sp, #16]
	data.req = req;
   18416:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1841a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1841e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   18422:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18424:	9307      	str	r3, [sp, #28]
	data.len = len;
   18426:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1842a:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1842e:	2301      	movs	r3, #1
   18430:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18434:	ab04      	add	r3, sp, #16
   18436:	9302      	str	r3, [sp, #8]
   18438:	4b15      	ldr	r3, [pc, #84]	; (18490 <att_write_rsp+0xcc>)
   1843a:	9301      	str	r3, [sp, #4]
   1843c:	2200      	movs	r2, #0
   1843e:	9200      	str	r2, [sp, #0]
   18440:	4613      	mov	r3, r2
   18442:	4629      	mov	r1, r5
   18444:	4628      	mov	r0, r5
   18446:	f000 fde1 	bl	1900c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1844a:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1844e:	b93f      	cbnz	r7, 18460 <att_write_rsp+0x9c>
	if (data.buf) {
   18450:	9905      	ldr	r1, [sp, #20]
   18452:	2900      	cmp	r1, #0
   18454:	d0c8      	beq.n	183e8 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18456:	4a0f      	ldr	r2, [pc, #60]	; (18494 <att_write_rsp+0xd0>)
   18458:	4620      	mov	r0, r4
   1845a:	f00a fc63 	bl	22d24 <bt_att_chan_send_rsp>
   1845e:	e7c3      	b.n	183e8 <att_write_rsp+0x24>
		if (rsp) {
   18460:	b926      	cbnz	r6, 1846c <att_write_rsp+0xa8>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18462:	f1b8 0f18 	cmp.w	r8, #24
   18466:	d00c      	beq.n	18482 <att_write_rsp+0xbe>
   18468:	2700      	movs	r7, #0
   1846a:	e7bd      	b.n	183e8 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   1846c:	9805      	ldr	r0, [sp, #20]
   1846e:	f00b fc1e 	bl	23cae <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   18472:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   18476:	462a      	mov	r2, r5
   18478:	4641      	mov	r1, r8
   1847a:	4620      	mov	r0, r4
   1847c:	f7ff feac 	bl	181d8 <send_err_rsp>
   18480:	e7ef      	b.n	18462 <att_write_rsp+0x9e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   18482:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   18486:	e7af      	b.n	183e8 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18488:	2712      	movs	r7, #18
   1848a:	e7ad      	b.n	183e8 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   1848c:	270e      	movs	r7, #14
   1848e:	e7ab      	b.n	183e8 <att_write_rsp+0x24>
   18490:	00022cc7 	.word	0x00022cc7
   18494:	00022b79 	.word	0x00022b79

00018498 <bt_att_create_pdu>:
{
   18498:	b570      	push	{r4, r5, r6, lr}
   1849a:	460e      	mov	r6, r1
   1849c:	4615      	mov	r5, r2
	att = att_get(conn);
   1849e:	f7ff fb2f 	bl	17b00 <att_get>
	if (!att) {
   184a2:	4604      	mov	r4, r0
   184a4:	b340      	cbz	r0, 184f8 <bt_att_create_pdu+0x60>
	return list->head;
   184a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   184a8:	b344      	cbz	r4, 184fc <bt_att_create_pdu+0x64>
   184aa:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   184ae:	d027      	beq.n	18500 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   184b0:	f514 70a2 	adds.w	r0, r4, #324	; 0x144
   184b4:	d008      	beq.n	184c8 <bt_att_create_pdu+0x30>
	return node->next;
   184b6:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   184ba:	b128      	cbz	r0, 184c8 <bt_att_create_pdu+0x30>
   184bc:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   184c0:	e002      	b.n	184c8 <bt_att_create_pdu+0x30>
   184c2:	4603      	mov	r3, r0
   184c4:	4604      	mov	r4, r0
   184c6:	4618      	mov	r0, r3
   184c8:	b1e4      	cbz	r4, 18504 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   184ca:	1c6b      	adds	r3, r5, #1
   184cc:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   184d0:	4293      	cmp	r3, r2
   184d2:	d90b      	bls.n	184ec <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   184d4:	2800      	cmp	r0, #0
   184d6:	d0f4      	beq.n	184c2 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   184d8:	f510 73a2 	adds.w	r3, r0, #324	; 0x144
   184dc:	d0f2      	beq.n	184c4 <bt_att_create_pdu+0x2c>
	return node->next;
   184de:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   184e2:	2b00      	cmp	r3, #0
   184e4:	d0ee      	beq.n	184c4 <bt_att_create_pdu+0x2c>
   184e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   184ea:	e7eb      	b.n	184c4 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   184ec:	462a      	mov	r2, r5
   184ee:	4631      	mov	r1, r6
   184f0:	4620      	mov	r0, r4
   184f2:	f7ff fe1b 	bl	1812c <bt_att_chan_create_pdu>
   184f6:	4604      	mov	r4, r0
}
   184f8:	4620      	mov	r0, r4
   184fa:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   184fc:	4620      	mov	r0, r4
   184fe:	e7e3      	b.n	184c8 <bt_att_create_pdu+0x30>
   18500:	4620      	mov	r0, r4
   18502:	e7e1      	b.n	184c8 <bt_att_create_pdu+0x30>
   18504:	4b08      	ldr	r3, [pc, #32]	; (18528 <bt_att_create_pdu+0x90>)
   18506:	4a09      	ldr	r2, [pc, #36]	; (1852c <bt_att_create_pdu+0x94>)
   18508:	1a9b      	subs	r3, r3, r2
   1850a:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1850c:	f04f 0200 	mov.w	r2, #0
   18510:	2102      	movs	r1, #2
   18512:	f361 0202 	bfi	r2, r1, #0, #3
   18516:	f36f 02c5 	bfc	r2, #3, #3
   1851a:	f363 128f 	bfi	r2, r3, #6, #10
   1851e:	1c69      	adds	r1, r5, #1
   18520:	4803      	ldr	r0, [pc, #12]	; (18530 <bt_att_create_pdu+0x98>)
   18522:	f7f9 fbe1 	bl	11ce8 <log_1>
	return NULL;
   18526:	e7e7      	b.n	184f8 <bt_att_create_pdu+0x60>
   18528:	00025d88 	.word	0x00025d88
   1852c:	00025d80 	.word	0x00025d80
   18530:	0002774c 	.word	0x0002774c

00018534 <att_read_group_rsp>:
{
   18534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18538:	b08a      	sub	sp, #40	; 0x28
   1853a:	4605      	mov	r5, r0
   1853c:	4688      	mov	r8, r1
   1853e:	4616      	mov	r6, r2
   18540:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   18542:	2400      	movs	r4, #0
   18544:	9405      	str	r4, [sp, #20]
   18546:	9406      	str	r4, [sp, #24]
   18548:	9407      	str	r4, [sp, #28]
   1854a:	9408      	str	r4, [sp, #32]
   1854c:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1854e:	2201      	movs	r2, #1
   18550:	2111      	movs	r1, #17
   18552:	6880      	ldr	r0, [r0, #8]
   18554:	f7ff ffa0 	bl	18498 <bt_att_create_pdu>
   18558:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1855a:	b358      	cbz	r0, 185b4 <att_read_group_rsp+0x80>
	data.chan = chan;
   1855c:	9505      	str	r5, [sp, #20]
	data.uuid = uuid;
   1855e:	f8cd 8018 	str.w	r8, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   18562:	2101      	movs	r1, #1
   18564:	3008      	adds	r0, #8
   18566:	f00b fbec 	bl	23d42 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1856a:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1856c:	4622      	mov	r2, r4
   1856e:	7004      	strb	r4, [r0, #0]
	data.group = NULL;
   18570:	9409      	str	r4, [sp, #36]	; 0x24
   18572:	ab05      	add	r3, sp, #20
   18574:	9302      	str	r3, [sp, #8]
   18576:	4b10      	ldr	r3, [pc, #64]	; (185b8 <att_read_group_rsp+0x84>)
   18578:	9301      	str	r3, [sp, #4]
   1857a:	9400      	str	r4, [sp, #0]
   1857c:	4623      	mov	r3, r4
   1857e:	4639      	mov	r1, r7
   18580:	4630      	mov	r0, r6
   18582:	f000 fd43 	bl	1900c <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   18586:	9b08      	ldr	r3, [sp, #32]
   18588:	781c      	ldrb	r4, [r3, #0]
   1858a:	b14c      	cbz	r4, 185a0 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1858c:	4a0b      	ldr	r2, [pc, #44]	; (185bc <att_read_group_rsp+0x88>)
   1858e:	9907      	ldr	r1, [sp, #28]
   18590:	4628      	mov	r0, r5
   18592:	f00a fbc7 	bl	22d24 <bt_att_chan_send_rsp>
	return 0;
   18596:	2400      	movs	r4, #0
}
   18598:	4620      	mov	r0, r4
   1859a:	b00a      	add	sp, #40	; 0x28
   1859c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   185a0:	9807      	ldr	r0, [sp, #28]
   185a2:	f00b fb84 	bl	23cae <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   185a6:	230a      	movs	r3, #10
   185a8:	4632      	mov	r2, r6
   185aa:	2110      	movs	r1, #16
   185ac:	4628      	mov	r0, r5
   185ae:	f7ff fe13 	bl	181d8 <send_err_rsp>
		return 0;
   185b2:	e7f1      	b.n	18598 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   185b4:	240e      	movs	r4, #14
   185b6:	e7ef      	b.n	18598 <att_read_group_rsp+0x64>
   185b8:	00017dd9 	.word	0x00017dd9
   185bc:	00022b79 	.word	0x00022b79

000185c0 <att_read_mult_req>:
{
   185c0:	b570      	push	{r4, r5, r6, lr}
   185c2:	b088      	sub	sp, #32
   185c4:	4606      	mov	r6, r0
   185c6:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   185c8:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   185ca:	2101      	movs	r1, #1
   185cc:	4620      	mov	r0, r4
   185ce:	f00b f9e8 	bl	239a2 <bt_gatt_change_aware>
   185d2:	2800      	cmp	r0, #0
   185d4:	d037      	beq.n	18646 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   185d6:	2200      	movs	r2, #0
   185d8:	9204      	str	r2, [sp, #16]
   185da:	9205      	str	r2, [sp, #20]
   185dc:	9206      	str	r2, [sp, #24]
   185de:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   185e0:	210f      	movs	r1, #15
   185e2:	4620      	mov	r0, r4
   185e4:	f7ff ff58 	bl	18498 <bt_att_create_pdu>
   185e8:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   185ea:	b378      	cbz	r0, 1864c <att_read_mult_req+0x8c>
	data.chan = chan;
   185ec:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   185ee:	89ab      	ldrh	r3, [r5, #12]
   185f0:	2b01      	cmp	r3, #1
   185f2:	d921      	bls.n	18638 <att_read_mult_req+0x78>
	return net_buf_simple_pull_le16(&buf->b);
   185f4:	f105 0008 	add.w	r0, r5, #8
   185f8:	f00b fbd4 	bl	23da4 <net_buf_simple_pull_le16>
   185fc:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   185fe:	2301      	movs	r3, #1
   18600:	f88d 301c 	strb.w	r3, [sp, #28]
   18604:	ab04      	add	r3, sp, #16
   18606:	9302      	str	r3, [sp, #8]
   18608:	4b11      	ldr	r3, [pc, #68]	; (18650 <att_read_mult_req+0x90>)
   1860a:	9301      	str	r3, [sp, #4]
   1860c:	2200      	movs	r2, #0
   1860e:	9200      	str	r2, [sp, #0]
   18610:	4613      	mov	r3, r2
   18612:	4601      	mov	r1, r0
   18614:	f000 fcfa 	bl	1900c <bt_gatt_foreach_attr_type>
		if (data.err) {
   18618:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1861c:	2b00      	cmp	r3, #0
   1861e:	d0e6      	beq.n	185ee <att_read_mult_req+0x2e>
			net_buf_unref(data.buf);
   18620:	9806      	ldr	r0, [sp, #24]
   18622:	f00b fb44 	bl	23cae <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   18626:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1862a:	4622      	mov	r2, r4
   1862c:	210e      	movs	r1, #14
   1862e:	4630      	mov	r0, r6
   18630:	f7ff fdd2 	bl	181d8 <send_err_rsp>
			return 0;
   18634:	2000      	movs	r0, #0
   18636:	e007      	b.n	18648 <att_read_mult_req+0x88>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18638:	4a06      	ldr	r2, [pc, #24]	; (18654 <att_read_mult_req+0x94>)
   1863a:	9906      	ldr	r1, [sp, #24]
   1863c:	4630      	mov	r0, r6
   1863e:	f00a fb71 	bl	22d24 <bt_att_chan_send_rsp>
	return 0;
   18642:	2000      	movs	r0, #0
   18644:	e000      	b.n	18648 <att_read_mult_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18646:	2012      	movs	r0, #18
}
   18648:	b008      	add	sp, #32
   1864a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   1864c:	200e      	movs	r0, #14
   1864e:	e7fb      	b.n	18648 <att_read_mult_req+0x88>
   18650:	00022e95 	.word	0x00022e95
   18654:	00022b79 	.word	0x00022b79

00018658 <att_read_rsp>:
{
   18658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1865c:	b088      	sub	sp, #32
   1865e:	4604      	mov	r4, r0
   18660:	4688      	mov	r8, r1
   18662:	4616      	mov	r6, r2
   18664:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   18666:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   18668:	2101      	movs	r1, #1
   1866a:	4638      	mov	r0, r7
   1866c:	f00b f999 	bl	239a2 <bt_gatt_change_aware>
   18670:	2800      	cmp	r0, #0
   18672:	d038      	beq.n	186e6 <att_read_rsp+0x8e>
	if (!handle) {
   18674:	b925      	cbnz	r5, 18680 <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   18676:	2601      	movs	r6, #1
}
   18678:	4630      	mov	r0, r6
   1867a:	b008      	add	sp, #32
   1867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   18680:	2200      	movs	r2, #0
   18682:	9204      	str	r2, [sp, #16]
   18684:	9205      	str	r2, [sp, #20]
   18686:	9206      	str	r2, [sp, #24]
   18688:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1868a:	4631      	mov	r1, r6
   1868c:	4638      	mov	r0, r7
   1868e:	f7ff ff03 	bl	18498 <bt_att_create_pdu>
   18692:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18694:	b348      	cbz	r0, 186ea <att_read_rsp+0x92>
	data.chan = chan;
   18696:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   18698:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1869c:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   186a0:	2301      	movs	r3, #1
   186a2:	f88d 301c 	strb.w	r3, [sp, #28]
   186a6:	ab04      	add	r3, sp, #16
   186a8:	9302      	str	r3, [sp, #8]
   186aa:	4b11      	ldr	r3, [pc, #68]	; (186f0 <att_read_rsp+0x98>)
   186ac:	9301      	str	r3, [sp, #4]
   186ae:	2200      	movs	r2, #0
   186b0:	9200      	str	r2, [sp, #0]
   186b2:	4613      	mov	r3, r2
   186b4:	4629      	mov	r1, r5
   186b6:	4628      	mov	r0, r5
   186b8:	f000 fca8 	bl	1900c <bt_gatt_foreach_attr_type>
	if (data.err) {
   186bc:	f89d 601c 	ldrb.w	r6, [sp, #28]
   186c0:	b92e      	cbnz	r6, 186ce <att_read_rsp+0x76>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   186c2:	4a0c      	ldr	r2, [pc, #48]	; (186f4 <att_read_rsp+0x9c>)
   186c4:	9906      	ldr	r1, [sp, #24]
   186c6:	4620      	mov	r0, r4
   186c8:	f00a fb2c 	bl	22d24 <bt_att_chan_send_rsp>
	return 0;
   186cc:	e7d4      	b.n	18678 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   186ce:	9806      	ldr	r0, [sp, #24]
   186d0:	f00b faed 	bl	23cae <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   186d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   186d8:	462a      	mov	r2, r5
   186da:	4641      	mov	r1, r8
   186dc:	4620      	mov	r0, r4
   186de:	f7ff fd7b 	bl	181d8 <send_err_rsp>
		return 0;
   186e2:	2600      	movs	r6, #0
   186e4:	e7c8      	b.n	18678 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   186e6:	2612      	movs	r6, #18
   186e8:	e7c6      	b.n	18678 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   186ea:	260e      	movs	r6, #14
   186ec:	e7c4      	b.n	18678 <att_read_rsp+0x20>
   186ee:	bf00      	nop
   186f0:	00022e95 	.word	0x00022e95
   186f4:	00022b79 	.word	0x00022b79

000186f8 <att_read_type_rsp>:
{
   186f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186fc:	b08a      	sub	sp, #40	; 0x28
   186fe:	4605      	mov	r5, r0
   18700:	4688      	mov	r8, r1
   18702:	4616      	mov	r6, r2
   18704:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   18706:	2400      	movs	r4, #0
   18708:	9404      	str	r4, [sp, #16]
   1870a:	9405      	str	r4, [sp, #20]
   1870c:	9406      	str	r4, [sp, #24]
   1870e:	9407      	str	r4, [sp, #28]
   18710:	9408      	str	r4, [sp, #32]
   18712:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18714:	2201      	movs	r2, #1
   18716:	2109      	movs	r1, #9
   18718:	6880      	ldr	r0, [r0, #8]
   1871a:	f7ff febd 	bl	18498 <bt_att_create_pdu>
   1871e:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   18720:	b370      	cbz	r0, 18780 <att_read_type_rsp+0x88>
	data.chan = chan;
   18722:	9504      	str	r5, [sp, #16]
	data.uuid = uuid;
   18724:	f8cd 8014 	str.w	r8, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   18728:	2101      	movs	r1, #1
   1872a:	3008      	adds	r0, #8
   1872c:	f00b fb09 	bl	23d42 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18730:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   18732:	4622      	mov	r2, r4
   18734:	7004      	strb	r4, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18736:	230a      	movs	r3, #10
   18738:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1873c:	ab04      	add	r3, sp, #16
   1873e:	9302      	str	r3, [sp, #8]
   18740:	4b10      	ldr	r3, [pc, #64]	; (18784 <att_read_type_rsp+0x8c>)
   18742:	9301      	str	r3, [sp, #4]
   18744:	9400      	str	r4, [sp, #0]
   18746:	4623      	mov	r3, r4
   18748:	4639      	mov	r1, r7
   1874a:	4630      	mov	r0, r6
   1874c:	f000 fc5e 	bl	1900c <bt_gatt_foreach_attr_type>
	if (data.err) {
   18750:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   18754:	b944      	cbnz	r4, 18768 <att_read_type_rsp+0x70>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18756:	4a0c      	ldr	r2, [pc, #48]	; (18788 <att_read_type_rsp+0x90>)
   18758:	9906      	ldr	r1, [sp, #24]
   1875a:	4628      	mov	r0, r5
   1875c:	f00a fae2 	bl	22d24 <bt_att_chan_send_rsp>
}
   18760:	4620      	mov	r0, r4
   18762:	b00a      	add	sp, #40	; 0x28
   18764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   18768:	9806      	ldr	r0, [sp, #24]
   1876a:	f00b faa0 	bl	23cae <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1876e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   18772:	4632      	mov	r2, r6
   18774:	2108      	movs	r1, #8
   18776:	4628      	mov	r0, r5
   18778:	f7ff fd2e 	bl	181d8 <send_err_rsp>
		return 0;
   1877c:	2400      	movs	r4, #0
   1877e:	e7ef      	b.n	18760 <att_read_type_rsp+0x68>
		return BT_ATT_ERR_UNLIKELY;
   18780:	240e      	movs	r4, #14
   18782:	e7ed      	b.n	18760 <att_read_type_rsp+0x68>
   18784:	00017e8d 	.word	0x00017e8d
   18788:	00022b79 	.word	0x00022b79

0001878c <att_find_type_rsp>:
{
   1878c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1878e:	b08b      	sub	sp, #44	; 0x2c
   18790:	4604      	mov	r4, r0
   18792:	460d      	mov	r5, r1
   18794:	4616      	mov	r6, r2
   18796:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   18798:	2200      	movs	r2, #0
   1879a:	9205      	str	r2, [sp, #20]
   1879c:	9206      	str	r2, [sp, #24]
   1879e:	9207      	str	r2, [sp, #28]
   187a0:	9208      	str	r2, [sp, #32]
   187a2:	9209      	str	r2, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   187a4:	2107      	movs	r1, #7
   187a6:	6880      	ldr	r0, [r0, #8]
   187a8:	f7ff fe76 	bl	18498 <bt_att_create_pdu>
   187ac:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   187ae:	b358      	cbz	r0, 18808 <att_find_type_rsp+0x7c>
	data.chan = chan;
   187b0:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   187b2:	2200      	movs	r2, #0
   187b4:	9207      	str	r2, [sp, #28]
	data.value = value;
   187b6:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   187b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   187bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   187c0:	230a      	movs	r3, #10
   187c2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   187c6:	ab05      	add	r3, sp, #20
   187c8:	9302      	str	r3, [sp, #8]
   187ca:	4b10      	ldr	r3, [pc, #64]	; (1880c <att_find_type_rsp+0x80>)
   187cc:	9301      	str	r3, [sp, #4]
   187ce:	9200      	str	r2, [sp, #0]
   187d0:	4613      	mov	r3, r2
   187d2:	4631      	mov	r1, r6
   187d4:	4628      	mov	r0, r5
   187d6:	f000 fc19 	bl	1900c <bt_gatt_foreach_attr_type>
	if (data.err) {
   187da:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   187de:	b93e      	cbnz	r6, 187f0 <att_find_type_rsp+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   187e0:	4a0b      	ldr	r2, [pc, #44]	; (18810 <att_find_type_rsp+0x84>)
   187e2:	9906      	ldr	r1, [sp, #24]
   187e4:	4620      	mov	r0, r4
   187e6:	f00a fa9d 	bl	22d24 <bt_att_chan_send_rsp>
}
   187ea:	4630      	mov	r0, r6
   187ec:	b00b      	add	sp, #44	; 0x2c
   187ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   187f0:	9806      	ldr	r0, [sp, #24]
   187f2:	f00b fa5c 	bl	23cae <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   187f6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   187fa:	462a      	mov	r2, r5
   187fc:	2106      	movs	r1, #6
   187fe:	4620      	mov	r0, r4
   18800:	f7ff fcea 	bl	181d8 <send_err_rsp>
		return 0;
   18804:	2600      	movs	r6, #0
   18806:	e7f0      	b.n	187ea <att_find_type_rsp+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   18808:	260e      	movs	r6, #14
   1880a:	e7ee      	b.n	187ea <att_find_type_rsp+0x5e>
   1880c:	00017f39 	.word	0x00017f39
   18810:	00022b79 	.word	0x00022b79

00018814 <att_find_info_rsp>:
{
   18814:	b570      	push	{r4, r5, r6, lr}
   18816:	b088      	sub	sp, #32
   18818:	4604      	mov	r4, r0
   1881a:	460e      	mov	r6, r1
   1881c:	4615      	mov	r5, r2
	(void)memset(&data, 0, sizeof(data));
   1881e:	2200      	movs	r2, #0
   18820:	9204      	str	r2, [sp, #16]
   18822:	9205      	str	r2, [sp, #20]
   18824:	9206      	str	r2, [sp, #24]
   18826:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18828:	2105      	movs	r1, #5
   1882a:	6880      	ldr	r0, [r0, #8]
   1882c:	f7ff fe34 	bl	18498 <bt_att_create_pdu>
   18830:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   18832:	b300      	cbz	r0, 18876 <att_find_info_rsp+0x62>
	data.chan = chan;
   18834:	9404      	str	r4, [sp, #16]
   18836:	ab04      	add	r3, sp, #16
   18838:	9302      	str	r3, [sp, #8]
   1883a:	4b10      	ldr	r3, [pc, #64]	; (1887c <att_find_info_rsp+0x68>)
   1883c:	9301      	str	r3, [sp, #4]
   1883e:	2200      	movs	r2, #0
   18840:	9200      	str	r2, [sp, #0]
   18842:	4613      	mov	r3, r2
   18844:	4629      	mov	r1, r5
   18846:	4630      	mov	r0, r6
   18848:	f000 fbe0 	bl	1900c <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1884c:	9b06      	ldr	r3, [sp, #24]
   1884e:	b13b      	cbz	r3, 18860 <att_find_info_rsp+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   18850:	4a0b      	ldr	r2, [pc, #44]	; (18880 <att_find_info_rsp+0x6c>)
   18852:	9905      	ldr	r1, [sp, #20]
   18854:	4620      	mov	r0, r4
   18856:	f00a fa65 	bl	22d24 <bt_att_chan_send_rsp>
	return 0;
   1885a:	2000      	movs	r0, #0
}
   1885c:	b008      	add	sp, #32
   1885e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(data.buf);
   18860:	9805      	ldr	r0, [sp, #20]
   18862:	f00b fa24 	bl	23cae <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   18866:	230a      	movs	r3, #10
   18868:	4632      	mov	r2, r6
   1886a:	2104      	movs	r1, #4
   1886c:	4620      	mov	r0, r4
   1886e:	f7ff fcb3 	bl	181d8 <send_err_rsp>
		return 0;
   18872:	2000      	movs	r0, #0
   18874:	e7f2      	b.n	1885c <att_find_info_rsp+0x48>
		return BT_ATT_ERR_UNLIKELY;
   18876:	200e      	movs	r0, #14
   18878:	e7f0      	b.n	1885c <att_find_info_rsp+0x48>
   1887a:	bf00      	nop
   1887c:	00022edd 	.word	0x00022edd
   18880:	00022b79 	.word	0x00022b79

00018884 <att_mtu_req>:
{
   18884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18886:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   18888:	6803      	ldr	r3, [r0, #0]
   1888a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1888c:	f3bf 8f5b 	dmb	ish
   18890:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   18894:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   18898:	f013 0f08 	tst.w	r3, #8
   1889c:	d122      	bne.n	188e4 <att_mtu_req+0x60>
	req = (void *)buf->data;
   1889e:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   188a0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   188a2:	2e16      	cmp	r6, #22
   188a4:	d920      	bls.n	188e8 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   188a6:	2202      	movs	r2, #2
   188a8:	2103      	movs	r1, #3
   188aa:	f7ff fdf5 	bl	18498 <bt_att_create_pdu>
	if (!pdu) {
   188ae:	4607      	mov	r7, r0
   188b0:	b1e0      	cbz	r0, 188ec <att_mtu_req+0x68>
   188b2:	2102      	movs	r1, #2
   188b4:	3008      	adds	r0, #8
   188b6:	f00b fa44 	bl	23d42 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   188ba:	2500      	movs	r5, #0
   188bc:	2317      	movs	r3, #23
   188be:	7003      	strb	r3, [r0, #0]
   188c0:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   188c2:	4a0b      	ldr	r2, [pc, #44]	; (188f0 <att_mtu_req+0x6c>)
   188c4:	4639      	mov	r1, r7
   188c6:	4620      	mov	r0, r4
   188c8:	f00a fa2c 	bl	22d24 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   188cc:	2e17      	cmp	r6, #23
   188ce:	bf28      	it	cs
   188d0:	2617      	movcs	r6, #23
   188d2:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   188d6:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   188da:	4620      	mov	r0, r4
   188dc:	f00a fb62 	bl	22fa4 <att_chan_mtu_updated>
	return 0;
   188e0:	4628      	mov	r0, r5
}
   188e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   188e4:	2006      	movs	r0, #6
   188e6:	e7fc      	b.n	188e2 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   188e8:	2004      	movs	r0, #4
   188ea:	e7fa      	b.n	188e2 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   188ec:	200e      	movs	r0, #14
   188ee:	e7f8      	b.n	188e2 <att_mtu_req+0x5e>
   188f0:	00022b79 	.word	0x00022b79

000188f4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   188f4:	b500      	push	{lr}
   188f6:	b083      	sub	sp, #12
   188f8:	4602      	mov	r2, r0
   188fa:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   188fc:	2100      	movs	r1, #0
   188fe:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18900:	a901      	add	r1, sp, #4
   18902:	4808      	ldr	r0, [pc, #32]	; (18924 <bt_att_req_alloc+0x30>)
   18904:	f003 ff84 	bl	1c810 <k_mem_slab_alloc>
   18908:	b948      	cbnz	r0, 1891e <bt_att_req_alloc+0x2a>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1890a:	9b01      	ldr	r3, [sp, #4]
   1890c:	2200      	movs	r2, #0
   1890e:	601a      	str	r2, [r3, #0]
   18910:	605a      	str	r2, [r3, #4]
   18912:	609a      	str	r2, [r3, #8]
   18914:	60da      	str	r2, [r3, #12]

	return req;
   18916:	9801      	ldr	r0, [sp, #4]
}
   18918:	b003      	add	sp, #12
   1891a:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1891e:	2000      	movs	r0, #0
   18920:	e7fa      	b.n	18918 <bt_att_req_alloc+0x24>
   18922:	bf00      	nop
   18924:	200006c0 	.word	0x200006c0

00018928 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18928:	b500      	push	{lr}
   1892a:	b083      	sub	sp, #12
   1892c:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1892e:	6880      	ldr	r0, [r0, #8]
   18930:	b120      	cbz	r0, 1893c <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   18932:	f00b f9bc 	bl	23cae <net_buf_unref>
		req->buf = NULL;
   18936:	9b01      	ldr	r3, [sp, #4]
   18938:	2200      	movs	r2, #0
   1893a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1893c:	a901      	add	r1, sp, #4
   1893e:	4803      	ldr	r0, [pc, #12]	; (1894c <bt_att_req_free+0x24>)
   18940:	f00c fa55 	bl	24dee <k_mem_slab_free>
}
   18944:	b003      	add	sp, #12
   18946:	f85d fb04 	ldr.w	pc, [sp], #4
   1894a:	bf00      	nop
   1894c:	200006c0 	.word	0x200006c0

00018950 <att_handle_rsp>:
{
   18950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18954:	b082      	sub	sp, #8
   18956:	4604      	mov	r4, r0
   18958:	460f      	mov	r7, r1
   1895a:	4691      	mov	r9, r2
   1895c:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1895e:	f500 7088 	add.w	r0, r0, #272	; 0x110
   18962:	f00c fcb4 	bl	252ce <k_work_cancel_delayable>
	if (!chan->req) {
   18966:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   1896a:	b1f8      	cbz	r0, 189ac <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   1896c:	4b1a      	ldr	r3, [pc, #104]	; (189d8 <att_handle_rsp+0x88>)
   1896e:	4298      	cmp	r0, r3
   18970:	d02e      	beq.n	189d0 <att_handle_rsp+0x80>
	func = chan->req->func;
   18972:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   18974:	f04f 0a00 	mov.w	sl, #0
   18978:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1897c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   18980:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   18984:	f7ff ffd0 	bl	18928 <bt_att_req_free>
	chan->req = NULL;
   18988:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   1898c:	6820      	ldr	r0, [r4, #0]
   1898e:	f00a f895 	bl	22abc <att_req_send_process>
	if (func) {
   18992:	b13d      	cbz	r5, 189a4 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   18994:	6823      	ldr	r3, [r4, #0]
   18996:	6818      	ldr	r0, [r3, #0]
   18998:	f8cd 8000 	str.w	r8, [sp]
   1899c:	464b      	mov	r3, r9
   1899e:	463a      	mov	r2, r7
   189a0:	4631      	mov	r1, r6
   189a2:	47a8      	blx	r5
}
   189a4:	2000      	movs	r0, #0
   189a6:	b002      	add	sp, #8
   189a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   189ac:	4b0b      	ldr	r3, [pc, #44]	; (189dc <att_handle_rsp+0x8c>)
   189ae:	4a0c      	ldr	r2, [pc, #48]	; (189e0 <att_handle_rsp+0x90>)
   189b0:	1a9b      	subs	r3, r3, r2
   189b2:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   189b4:	f04f 0100 	mov.w	r1, #0
   189b8:	2202      	movs	r2, #2
   189ba:	f362 0102 	bfi	r1, r2, #0, #3
   189be:	f36f 01c5 	bfc	r1, #3, #3
   189c2:	f363 118f 	bfi	r1, r3, #6, #10
   189c6:	4807      	ldr	r0, [pc, #28]	; (189e4 <att_handle_rsp+0x94>)
   189c8:	f7f9 fa44 	bl	11e54 <log_0>
	bt_att_func_t func = NULL;
   189cc:	2500      	movs	r5, #0
		goto process;
   189ce:	e7dd      	b.n	1898c <att_handle_rsp+0x3c>
		chan->req = NULL;
   189d0:	2500      	movs	r5, #0
   189d2:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   189d6:	e7d9      	b.n	1898c <att_handle_rsp+0x3c>
   189d8:	20002934 	.word	0x20002934
   189dc:	00025d88 	.word	0x00025d88
   189e0:	00025d80 	.word	0x00025d80
   189e4:	00027768 	.word	0x00027768

000189e8 <att_reset>:
{
   189e8:	b530      	push	{r4, r5, lr}
   189ea:	b085      	sub	sp, #20
   189ec:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   189ee:	2200      	movs	r2, #0
   189f0:	2300      	movs	r3, #0
   189f2:	9803      	ldr	r0, [sp, #12]
   189f4:	300c      	adds	r0, #12
   189f6:	f00b f92e 	bl	23c56 <net_buf_get>
   189fa:	4603      	mov	r3, r0
   189fc:	b118      	cbz	r0, 18a06 <att_reset+0x1e>
		net_buf_unref(buf);
   189fe:	4618      	mov	r0, r3
   18a00:	f00b f955 	bl	23cae <net_buf_unref>
   18a04:	e7f3      	b.n	189ee <att_reset+0x6>
	att->conn = NULL;
   18a06:	9b03      	ldr	r3, [sp, #12]
   18a08:	2200      	movs	r2, #0
   18a0a:	601a      	str	r2, [r3, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   18a0c:	e004      	b.n	18a18 <att_reset+0x30>
	list->tail = node;
   18a0e:	609a      	str	r2, [r3, #8]
}
   18a10:	e00a      	b.n	18a28 <att_reset+0x40>
		bt_att_req_free(req);
   18a12:	4620      	mov	r0, r4
   18a14:	f7ff ff88 	bl	18928 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   18a18:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   18a1a:	685c      	ldr	r4, [r3, #4]
   18a1c:	b17c      	cbz	r4, 18a3e <att_reset+0x56>
	return node->next;
   18a1e:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   18a20:	605a      	str	r2, [r3, #4]
	return list->tail;
   18a22:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18a24:	42a1      	cmp	r1, r4
   18a26:	d0f2      	beq.n	18a0e <att_reset+0x26>
		if (req->func) {
   18a28:	6865      	ldr	r5, [r4, #4]
   18a2a:	2d00      	cmp	r5, #0
   18a2c:	d0f1      	beq.n	18a12 <att_reset+0x2a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   18a2e:	68e3      	ldr	r3, [r4, #12]
   18a30:	9300      	str	r3, [sp, #0]
   18a32:	2300      	movs	r3, #0
   18a34:	461a      	mov	r2, r3
   18a36:	210e      	movs	r1, #14
   18a38:	4618      	mov	r0, r3
   18a3a:	47a8      	blx	r5
   18a3c:	e7e9      	b.n	18a12 <att_reset+0x2a>
	k_mem_slab_free(&att_slab, (void **)&att);
   18a3e:	a903      	add	r1, sp, #12
   18a40:	4802      	ldr	r0, [pc, #8]	; (18a4c <att_reset+0x64>)
   18a42:	f00c f9d4 	bl	24dee <k_mem_slab_free>
}
   18a46:	b005      	add	sp, #20
   18a48:	bd30      	pop	{r4, r5, pc}
   18a4a:	bf00      	nop
   18a4c:	20000688 	.word	0x20000688

00018a50 <att_timeout>:
{
   18a50:	b510      	push	{r4, lr}
   18a52:	4604      	mov	r4, r0
   18a54:	4b0a      	ldr	r3, [pc, #40]	; (18a80 <att_timeout+0x30>)
   18a56:	4a0b      	ldr	r2, [pc, #44]	; (18a84 <att_timeout+0x34>)
   18a58:	1a9b      	subs	r3, r3, r2
   18a5a:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   18a5c:	f04f 0100 	mov.w	r1, #0
   18a60:	2201      	movs	r2, #1
   18a62:	f362 0102 	bfi	r1, r2, #0, #3
   18a66:	f36f 01c5 	bfc	r1, #3, #3
   18a6a:	f363 118f 	bfi	r1, r3, #6, #10
   18a6e:	4806      	ldr	r0, [pc, #24]	; (18a88 <att_timeout+0x38>)
   18a70:	f7f9 f9f0 	bl	11e54 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   18a74:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
   18a78:	f00a fc50 	bl	2331c <bt_att_disconnected>
}
   18a7c:	bd10      	pop	{r4, pc}
   18a7e:	bf00      	nop
   18a80:	00025d88 	.word	0x00025d88
   18a84:	00025d80 	.word	0x00025d80
   18a88:	00027780 	.word	0x00027780

00018a8c <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18a8c:	4b0d      	ldr	r3, [pc, #52]	; (18ac4 <bt_gatt_service_init+0x38>)
   18a8e:	2201      	movs	r2, #1
   18a90:	f3bf 8f5b 	dmb	ish
   18a94:	e853 1f00 	ldrex	r1, [r3]
   18a98:	2900      	cmp	r1, #0
   18a9a:	d103      	bne.n	18aa4 <bt_gatt_service_init+0x18>
   18a9c:	e843 2000 	strex	r0, r2, [r3]
   18aa0:	2800      	cmp	r0, #0
   18aa2:	d1f7      	bne.n	18a94 <bt_gatt_service_init+0x8>
   18aa4:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   18aa8:	d101      	bne.n	18aae <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   18aaa:	4b07      	ldr	r3, [pc, #28]	; (18ac8 <bt_gatt_service_init+0x3c>)
   18aac:	e006      	b.n	18abc <bt_gatt_service_init+0x30>
   18aae:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   18ab0:	685a      	ldr	r2, [r3, #4]
   18ab2:	4906      	ldr	r1, [pc, #24]	; (18acc <bt_gatt_service_init+0x40>)
   18ab4:	8808      	ldrh	r0, [r1, #0]
   18ab6:	4402      	add	r2, r0
   18ab8:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   18aba:	3308      	adds	r3, #8
   18abc:	4a04      	ldr	r2, [pc, #16]	; (18ad0 <bt_gatt_service_init+0x44>)
   18abe:	4293      	cmp	r3, r2
   18ac0:	d3f6      	bcc.n	18ab0 <bt_gatt_service_init+0x24>
	}
}
   18ac2:	4770      	bx	lr
   18ac4:	20002984 	.word	0x20002984
   18ac8:	00025d70 	.word	0x00025d70
   18acc:	20003a04 	.word	0x20003a04
   18ad0:	00025d80 	.word	0x00025d80

00018ad4 <find_cf_cfg>:
{
   18ad4:	b570      	push	{r4, r5, r6, lr}
   18ad6:	b082      	sub	sp, #8
   18ad8:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18ada:	2400      	movs	r4, #0
   18adc:	2c00      	cmp	r4, #0
   18ade:	dd03      	ble.n	18ae8 <find_cf_cfg+0x14>
	return NULL;
   18ae0:	2500      	movs	r5, #0
}
   18ae2:	4628      	mov	r0, r5
   18ae4:	b002      	add	sp, #8
   18ae6:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   18ae8:	4d0e      	ldr	r5, [pc, #56]	; (18b24 <find_cf_cfg+0x50>)
   18aea:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   18aee:	b166      	cbz	r6, 18b0a <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18af0:	490c      	ldr	r1, [pc, #48]	; (18b24 <find_cf_cfg+0x50>)
   18af2:	0123      	lsls	r3, r4, #4
   18af4:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   18af8:	3201      	adds	r2, #1
   18afa:	5cc9      	ldrb	r1, [r1, r3]
   18afc:	4630      	mov	r0, r6
   18afe:	f009 fd6e 	bl	225de <bt_conn_is_peer_addr_le>
   18b02:	2800      	cmp	r0, #0
   18b04:	d1ed      	bne.n	18ae2 <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18b06:	3401      	adds	r4, #1
   18b08:	e7e8      	b.n	18adc <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   18b0a:	4628      	mov	r0, r5
   18b0c:	2300      	movs	r3, #0
   18b0e:	9300      	str	r3, [sp, #0]
   18b10:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   18b14:	2207      	movs	r2, #7
   18b16:	4669      	mov	r1, sp
   18b18:	3001      	adds	r0, #1
   18b1a:	f00c ff4e 	bl	259ba <memcmp>
   18b1e:	2800      	cmp	r0, #0
   18b20:	d1f1      	bne.n	18b06 <find_cf_cfg+0x32>
   18b22:	e7de      	b.n	18ae2 <find_cf_cfg+0xe>
   18b24:	2000294c 	.word	0x2000294c

00018b28 <find_sc_cfg>:
{
   18b28:	b570      	push	{r4, r5, r6, lr}
   18b2a:	4606      	mov	r6, r0
   18b2c:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18b2e:	2400      	movs	r4, #0
   18b30:	b10c      	cbz	r4, 18b36 <find_sc_cfg+0xe>
	return NULL;
   18b32:	2000      	movs	r0, #0
}
   18b34:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   18b36:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18b3a:	4a0c      	ldr	r2, [pc, #48]	; (18b6c <find_sc_cfg+0x44>)
   18b3c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   18b40:	429e      	cmp	r6, r3
   18b42:	d001      	beq.n	18b48 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18b44:	3401      	adds	r4, #1
   18b46:	e7f3      	b.n	18b30 <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   18b48:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18b4c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   18b50:	2207      	movs	r2, #7
   18b52:	4629      	mov	r1, r5
   18b54:	3001      	adds	r0, #1
   18b56:	f00c ff30 	bl	259ba <memcmp>
		if (id == sc_cfg[i].id &&
   18b5a:	2800      	cmp	r0, #0
   18b5c:	d1f2      	bne.n	18b44 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   18b5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18b62:	4802      	ldr	r0, [pc, #8]	; (18b6c <find_sc_cfg+0x44>)
   18b64:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   18b68:	e7e4      	b.n	18b34 <find_sc_cfg+0xc>
   18b6a:	bf00      	nop
   18b6c:	20002960 	.word	0x20002960

00018b70 <sc_clear>:
{
   18b70:	b538      	push	{r3, r4, r5, lr}
   18b72:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18b74:	f100 0588 	add.w	r5, r0, #136	; 0x88
   18b78:	4629      	mov	r1, r5
   18b7a:	7a00      	ldrb	r0, [r0, #8]
   18b7c:	f009 fb75 	bl	2226a <bt_addr_le_is_bonded>
   18b80:	b1b8      	cbz	r0, 18bb2 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   18b82:	4629      	mov	r1, r5
   18b84:	7a20      	ldrb	r0, [r4, #8]
   18b86:	f00a fd2b 	bl	235e0 <bt_gatt_clear_sc>
		if (err) {
   18b8a:	4601      	mov	r1, r0
   18b8c:	b900      	cbnz	r0, 18b90 <sc_clear+0x20>
}
   18b8e:	bd38      	pop	{r3, r4, r5, pc}
   18b90:	4b0c      	ldr	r3, [pc, #48]	; (18bc4 <sc_clear+0x54>)
   18b92:	4a0d      	ldr	r2, [pc, #52]	; (18bc8 <sc_clear+0x58>)
   18b94:	1a9b      	subs	r3, r3, r2
   18b96:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   18b98:	f04f 0200 	mov.w	r2, #0
   18b9c:	2001      	movs	r0, #1
   18b9e:	f360 0202 	bfi	r2, r0, #0, #3
   18ba2:	f36f 02c5 	bfc	r2, #3, #3
   18ba6:	f363 128f 	bfi	r2, r3, #6, #10
   18baa:	4808      	ldr	r0, [pc, #32]	; (18bcc <sc_clear+0x5c>)
   18bac:	f7f9 f89c 	bl	11ce8 <log_1>
   18bb0:	e7ed      	b.n	18b8e <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18bb2:	4629      	mov	r1, r5
   18bb4:	7a20      	ldrb	r0, [r4, #8]
   18bb6:	f7ff ffb7 	bl	18b28 <find_sc_cfg>
		if (cfg) {
   18bba:	2800      	cmp	r0, #0
   18bbc:	d0e7      	beq.n	18b8e <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   18bbe:	f00a fd0a 	bl	235d6 <clear_sc_cfg>
}
   18bc2:	e7e4      	b.n	18b8e <sc_clear+0x1e>
   18bc4:	00025da0 	.word	0x00025da0
   18bc8:	00025d80 	.word	0x00025d80
   18bcc:	000277fc 	.word	0x000277fc

00018bd0 <sc_indicate_rsp>:
{
   18bd0:	b510      	push	{r4, lr}
   18bd2:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18bd4:	4b19      	ldr	r3, [pc, #100]	; (18c3c <sc_indicate_rsp+0x6c>)
   18bd6:	f103 0250 	add.w	r2, r3, #80	; 0x50
   18bda:	f3bf 8f5b 	dmb	ish
   18bde:	e852 1f00 	ldrex	r1, [r2]
   18be2:	f021 0102 	bic.w	r1, r1, #2
   18be6:	e842 1000 	strex	r0, r1, [r2]
   18bea:	2800      	cmp	r0, #0
   18bec:	d1f7      	bne.n	18bde <sc_indicate_rsp+0xe>
   18bee:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18bf2:	f3bf 8f5b 	dmb	ish
   18bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   18bf8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18bfc:	f013 0f01 	tst.w	r3, #1
   18c00:	d116      	bne.n	18c30 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   18c02:	4620      	mov	r0, r4
   18c04:	f7ff ff66 	bl	18ad4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   18c08:	4603      	mov	r3, r0
   18c0a:	b180      	cbz	r0, 18c2e <sc_indicate_rsp+0x5e>
   18c0c:	7a02      	ldrb	r2, [r0, #8]
   18c0e:	f012 0f01 	tst.w	r2, #1
   18c12:	d00c      	beq.n	18c2e <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   18c14:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18c16:	f3bf 8f5b 	dmb	ish
   18c1a:	e853 2f00 	ldrex	r2, [r3]
   18c1e:	f042 0201 	orr.w	r2, r2, #1
   18c22:	e843 2100 	strex	r1, r2, [r3]
   18c26:	2900      	cmp	r1, #0
   18c28:	d1f7      	bne.n	18c1a <sc_indicate_rsp+0x4a>
   18c2a:	f3bf 8f5b 	dmb	ish
}
   18c2e:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   18c30:	2200      	movs	r2, #0
   18c32:	2300      	movs	r3, #0
   18c34:	4802      	ldr	r0, [pc, #8]	; (18c40 <sc_indicate_rsp+0x70>)
   18c36:	f004 fa51 	bl	1d0dc <k_work_reschedule>
   18c3a:	e7e2      	b.n	18c02 <sc_indicate_rsp+0x32>
   18c3c:	20001a50 	.word	0x20001a50
   18c40:	20001a70 	.word	0x20001a70

00018c44 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   18c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c48:	b083      	sub	sp, #12
   18c4a:	4615      	mov	r5, r2
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   18c4c:	6882      	ldr	r2, [r0, #8]
   18c4e:	4b30      	ldr	r3, [pc, #192]	; (18d10 <disconnected_cb+0xcc>)
   18c50:	429a      	cmp	r2, r3
   18c52:	d003      	beq.n	18c5c <disconnected_cb+0x18>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   18c54:	2001      	movs	r0, #1
   18c56:	b003      	add	sp, #12
   18c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c5c:	4604      	mov	r4, r0
	ccc = attr->user_data;
   18c5e:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   18c60:	897b      	ldrh	r3, [r7, #10]
   18c62:	2b00      	cmp	r3, #0
   18c64:	d0f6      	beq.n	18c54 <disconnected_cb+0x10>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18c66:	2600      	movs	r6, #0
	value_used = false;
   18c68:	46b1      	mov	r9, r6
   18c6a:	e021      	b.n	18cb0 <disconnected_cb+0x6c>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   18c6c:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   18c70:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   18c74:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   18c78:	b1cb      	cbz	r3, 18cae <disconnected_cb+0x6a>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18c7a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   18c7e:	f108 0a01 	add.w	sl, r8, #1
   18c82:	4652      	mov	r2, sl
   18c84:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   18c88:	4628      	mov	r0, r5
   18c8a:	f009 fca8 	bl	225de <bt_conn_is_peer_addr_le>
   18c8e:	bb00      	cbnz	r0, 18cd2 <disconnected_cb+0x8e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18c90:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   18c94:	4651      	mov	r1, sl
   18c96:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   18c9a:	f7fe fb4f 	bl	1733c <bt_conn_lookup_addr_le>
			if (tmp) {
   18c9e:	4603      	mov	r3, r0
   18ca0:	b128      	cbz	r0, 18cae <disconnected_cb+0x6a>
				if (tmp->state == BT_CONN_CONNECTED) {
   18ca2:	7a82      	ldrb	r2, [r0, #10]
   18ca4:	2a07      	cmp	r2, #7
   18ca6:	d011      	beq.n	18ccc <disconnected_cb+0x88>
				bt_conn_unref(tmp);
   18ca8:	4618      	mov	r0, r3
   18caa:	f009 fc55 	bl	22558 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18cae:	3601      	adds	r6, #1
   18cb0:	2e00      	cmp	r6, #0
   18cb2:	d0db      	beq.n	18c6c <disconnected_cb+0x28>
	if (!value_used) {
   18cb4:	f1b9 0f00 	cmp.w	r9, #0
   18cb8:	d1cc      	bne.n	18c54 <disconnected_cb+0x10>
		ccc->value = 0U;
   18cba:	2300      	movs	r3, #0
   18cbc:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   18cbe:	68fb      	ldr	r3, [r7, #12]
   18cc0:	2b00      	cmp	r3, #0
   18cc2:	d0c7      	beq.n	18c54 <disconnected_cb+0x10>
			ccc->cfg_changed(attr, ccc->value);
   18cc4:	2100      	movs	r1, #0
   18cc6:	4620      	mov	r0, r4
   18cc8:	4798      	blx	r3
   18cca:	e7c3      	b.n	18c54 <disconnected_cb+0x10>
					value_used = true;
   18ccc:	f04f 0901 	mov.w	r9, #1
   18cd0:	e7ea      	b.n	18ca8 <disconnected_cb+0x64>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18cd2:	f105 0388 	add.w	r3, r5, #136	; 0x88
   18cd6:	9301      	str	r3, [sp, #4]
   18cd8:	4619      	mov	r1, r3
   18cda:	7a28      	ldrb	r0, [r5, #8]
   18cdc:	f009 fac5 	bl	2226a <bt_addr_le_is_bonded>
   18ce0:	b950      	cbnz	r0, 18cf8 <disconnected_cb+0xb4>
				if (ccc == &sc_ccc) {
   18ce2:	4b0c      	ldr	r3, [pc, #48]	; (18d14 <disconnected_cb+0xd0>)
   18ce4:	429f      	cmp	r7, r3
   18ce6:	d003      	beq.n	18cf0 <disconnected_cb+0xac>
				clear_ccc_cfg(cfg);
   18ce8:	4640      	mov	r0, r8
   18cea:	f00a fce1 	bl	236b0 <clear_ccc_cfg>
   18cee:	e7de      	b.n	18cae <disconnected_cb+0x6a>
					sc_clear(conn);
   18cf0:	4628      	mov	r0, r5
   18cf2:	f7ff ff3d 	bl	18b70 <sc_clear>
   18cf6:	e7f7      	b.n	18ce8 <disconnected_cb+0xa4>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18cf8:	9a01      	ldr	r2, [sp, #4]
   18cfa:	6813      	ldr	r3, [r2, #0]
   18cfc:	f8c8 3001 	str.w	r3, [r8, #1]
   18d00:	4613      	mov	r3, r2
   18d02:	8892      	ldrh	r2, [r2, #4]
   18d04:	799b      	ldrb	r3, [r3, #6]
   18d06:	f8aa 2004 	strh.w	r2, [sl, #4]
   18d0a:	f88a 3006 	strb.w	r3, [sl, #6]
}
   18d0e:	e7ce      	b.n	18cae <disconnected_cb+0x6a>
   18d10:	00018e61 	.word	0x00018e61
   18d14:	20000524 	.word	0x20000524

00018d18 <cf_write>:
{
   18d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d1c:	461d      	mov	r5, r3
   18d1e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   18d22:	2b01      	cmp	r3, #1
   18d24:	d843      	bhi.n	18dae <cf_write+0x96>
   18d26:	4606      	mov	r6, r0
   18d28:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   18d2a:	462f      	mov	r7, r5
   18d2c:	442b      	add	r3, r5
   18d2e:	2b01      	cmp	r3, #1
   18d30:	d840      	bhi.n	18db4 <cf_write+0x9c>
	cfg = find_cf_cfg(conn);
   18d32:	f7ff fecf 	bl	18ad4 <find_cf_cfg>
	if (!cfg) {
   18d36:	4604      	mov	r4, r0
   18d38:	b310      	cbz	r0, 18d80 <cf_write+0x68>
	if (!cfg) {
   18d3a:	b32c      	cbz	r4, 18d88 <cf_write+0x70>
	if (!cf_set_value(cfg, value, len)) {
   18d3c:	462a      	mov	r2, r5
   18d3e:	4641      	mov	r1, r8
   18d40:	4620      	mov	r0, r4
   18d42:	f00a fb4e 	bl	233e2 <cf_set_value>
   18d46:	b3c0      	cbz	r0, 18dba <cf_write+0xa2>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18d48:	4633      	mov	r3, r6
   18d4a:	f853 2f88 	ldr.w	r2, [r3, #136]!
   18d4e:	f8c4 2001 	str.w	r2, [r4, #1]
   18d52:	889a      	ldrh	r2, [r3, #4]
   18d54:	799b      	ldrb	r3, [r3, #6]
   18d56:	f8a4 2005 	strh.w	r2, [r4, #5]
   18d5a:	71e3      	strb	r3, [r4, #7]
	cfg->id = conn->id;
   18d5c:	7a33      	ldrb	r3, [r6, #8]
   18d5e:	f804 3b0c 	strb.w	r3, [r4], #12
   18d62:	f3bf 8f5b 	dmb	ish
   18d66:	e854 3f00 	ldrex	r3, [r4]
   18d6a:	f043 0301 	orr.w	r3, r3, #1
   18d6e:	e844 3200 	strex	r2, r3, [r4]
   18d72:	2a00      	cmp	r2, #0
   18d74:	d1f7      	bne.n	18d66 <cf_write+0x4e>
   18d76:	f3bf 8f5b 	dmb	ish
}
   18d7a:	4638      	mov	r0, r7
   18d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   18d80:	f7ff fea8 	bl	18ad4 <find_cf_cfg>
   18d84:	4604      	mov	r4, r0
   18d86:	e7d8      	b.n	18d3a <cf_write+0x22>
   18d88:	4b0d      	ldr	r3, [pc, #52]	; (18dc0 <cf_write+0xa8>)
   18d8a:	4a0e      	ldr	r2, [pc, #56]	; (18dc4 <cf_write+0xac>)
   18d8c:	1a9b      	subs	r3, r3, r2
   18d8e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   18d90:	f04f 0100 	mov.w	r1, #0
   18d94:	2202      	movs	r2, #2
   18d96:	f362 0102 	bfi	r1, r2, #0, #3
   18d9a:	f36f 01c5 	bfc	r1, #3, #3
   18d9e:	f363 118f 	bfi	r1, r3, #6, #10
   18da2:	4809      	ldr	r0, [pc, #36]	; (18dc8 <cf_write+0xb0>)
   18da4:	f7f9 f856 	bl	11e54 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18da8:	f06f 0710 	mvn.w	r7, #16
   18dac:	e7e5      	b.n	18d7a <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18dae:	f06f 0706 	mvn.w	r7, #6
   18db2:	e7e2      	b.n	18d7a <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18db4:	f06f 070c 	mvn.w	r7, #12
   18db8:	e7df      	b.n	18d7a <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   18dba:	f06f 0712 	mvn.w	r7, #18
   18dbe:	e7dc      	b.n	18d7a <cf_write+0x62>
   18dc0:	00025da0 	.word	0x00025da0
   18dc4:	00025d80 	.word	0x00025d80
   18dc8:	00027814 	.word	0x00027814

00018dcc <sc_save>:
{
   18dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18dd0:	b082      	sub	sp, #8
   18dd2:	4607      	mov	r7, r0
   18dd4:	4688      	mov	r8, r1
   18dd6:	4616      	mov	r6, r2
   18dd8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   18dda:	f7ff fea5 	bl	18b28 <find_sc_cfg>
	if (!cfg) {
   18dde:	4604      	mov	r4, r0
   18de0:	b170      	cbz	r0, 18e00 <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   18de2:	8923      	ldrh	r3, [r4, #8]
   18de4:	b90b      	cbnz	r3, 18dea <sc_save+0x1e>
   18de6:	8963      	ldrh	r3, [r4, #10]
   18de8:	b38b      	cbz	r3, 18e4e <sc_save+0x82>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   18dea:	462b      	mov	r3, r5
   18dec:	4632      	mov	r2, r6
   18dee:	f104 010a 	add.w	r1, r4, #10
   18df2:	f104 0008 	add.w	r0, r4, #8
   18df6:	f00a fadf 	bl	233b8 <update_range>
}
   18dfa:	b002      	add	sp, #8
   18dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   18e00:	9000      	str	r0, [sp, #0]
   18e02:	f8cd 0003 	str.w	r0, [sp, #3]
   18e06:	4669      	mov	r1, sp
   18e08:	f7ff fe8e 	bl	18b28 <find_sc_cfg>
		if (!cfg) {
   18e0c:	4604      	mov	r4, r0
   18e0e:	b168      	cbz	r0, 18e2c <sc_save+0x60>
		cfg->id = id;
   18e10:	4603      	mov	r3, r0
   18e12:	f803 7b01 	strb.w	r7, [r3], #1
   18e16:	f8d8 2000 	ldr.w	r2, [r8]
   18e1a:	f8c0 2001 	str.w	r2, [r0, #1]
   18e1e:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   18e22:	f898 2006 	ldrb.w	r2, [r8, #6]
   18e26:	8099      	strh	r1, [r3, #4]
   18e28:	719a      	strb	r2, [r3, #6]
   18e2a:	e7da      	b.n	18de2 <sc_save+0x16>
   18e2c:	4b09      	ldr	r3, [pc, #36]	; (18e54 <sc_save+0x88>)
   18e2e:	4a0a      	ldr	r2, [pc, #40]	; (18e58 <sc_save+0x8c>)
   18e30:	1a9b      	subs	r3, r3, r2
   18e32:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   18e34:	f04f 0100 	mov.w	r1, #0
   18e38:	2201      	movs	r2, #1
   18e3a:	f362 0102 	bfi	r1, r2, #0, #3
   18e3e:	f36f 01c5 	bfc	r1, #3, #3
   18e42:	f363 118f 	bfi	r1, r3, #6, #10
   18e46:	4805      	ldr	r0, [pc, #20]	; (18e5c <sc_save+0x90>)
   18e48:	f7f9 f804 	bl	11e54 <log_0>
			return;
   18e4c:	e7d5      	b.n	18dfa <sc_save+0x2e>
		cfg->data.start = start;
   18e4e:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   18e50:	8165      	strh	r5, [r4, #10]
		goto done;
   18e52:	e7d2      	b.n	18dfa <sc_save+0x2e>
   18e54:	00025da0 	.word	0x00025da0
   18e58:	00025d80 	.word	0x00025d80
   18e5c:	00027840 	.word	0x00027840

00018e60 <bt_gatt_attr_write_ccc>:
{
   18e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18e64:	461c      	mov	r4, r3
   18e66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   18e6a:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   18e6c:	2b00      	cmp	r3, #0
   18e6e:	d15a      	bne.n	18f26 <bt_gatt_attr_write_ccc+0xc6>
   18e70:	4681      	mov	r9, r0
   18e72:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   18e74:	1e63      	subs	r3, r4, #1
   18e76:	b29b      	uxth	r3, r3
   18e78:	2b01      	cmp	r3, #1
   18e7a:	d857      	bhi.n	18f2c <bt_gatt_attr_write_ccc+0xcc>
	if (len < sizeof(uint16_t)) {
   18e7c:	2c01      	cmp	r4, #1
   18e7e:	d91d      	bls.n	18ebc <bt_gatt_attr_write_ccc+0x5c>
   18e80:	7853      	ldrb	r3, [r2, #1]
   18e82:	7815      	ldrb	r5, [r2, #0]
   18e84:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   18e88:	4639      	mov	r1, r7
   18e8a:	4648      	mov	r0, r9
   18e8c:	f00a fb77 	bl	2357e <find_ccc_cfg>
	if (!cfg) {
   18e90:	4680      	mov	r8, r0
   18e92:	b1a8      	cbz	r0, 18ec0 <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
   18e94:	693b      	ldr	r3, [r7, #16]
   18e96:	b143      	cbz	r3, 18eaa <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   18e98:	462a      	mov	r2, r5
   18e9a:	4631      	mov	r1, r6
   18e9c:	4648      	mov	r0, r9
   18e9e:	4798      	blx	r3
		if (write < 0) {
   18ea0:	2800      	cmp	r0, #0
   18ea2:	db09      	blt.n	18eb8 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
   18ea4:	3801      	subs	r0, #1
   18ea6:	2801      	cmp	r0, #1
   18ea8:	d843      	bhi.n	18f32 <bt_gatt_attr_write_ccc+0xd2>
	cfg->value = value;
   18eaa:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   18eae:	897b      	ldrh	r3, [r7, #10]
   18eb0:	429d      	cmp	r5, r3
   18eb2:	d12f      	bne.n	18f14 <bt_gatt_attr_write_ccc+0xb4>
	if (!value) {
   18eb4:	b39d      	cbz	r5, 18f1e <bt_gatt_attr_write_ccc+0xbe>
	return len;
   18eb6:	4620      	mov	r0, r4
}
   18eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   18ebc:	7815      	ldrb	r5, [r2, #0]
   18ebe:	e7e3      	b.n	18e88 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   18ec0:	b90d      	cbnz	r5, 18ec6 <bt_gatt_attr_write_ccc+0x66>
			return len;
   18ec2:	4620      	mov	r0, r4
   18ec4:	e7f8      	b.n	18eb8 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   18ec6:	4639      	mov	r1, r7
   18ec8:	2000      	movs	r0, #0
   18eca:	f00a fb58 	bl	2357e <find_ccc_cfg>
		if (!cfg) {
   18ece:	4680      	mov	r8, r0
   18ed0:	b168      	cbz	r0, 18eee <bt_gatt_attr_write_ccc+0x8e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18ed2:	464b      	mov	r3, r9
   18ed4:	f853 2f88 	ldr.w	r2, [r3, #136]!
   18ed8:	f8c0 2001 	str.w	r2, [r0, #1]
   18edc:	889a      	ldrh	r2, [r3, #4]
   18ede:	799b      	ldrb	r3, [r3, #6]
   18ee0:	f8a0 2005 	strh.w	r2, [r0, #5]
   18ee4:	71c3      	strb	r3, [r0, #7]
		cfg->id = conn->id;
   18ee6:	f899 3008 	ldrb.w	r3, [r9, #8]
   18eea:	7003      	strb	r3, [r0, #0]
   18eec:	e7d2      	b.n	18e94 <bt_gatt_attr_write_ccc+0x34>
   18eee:	4b12      	ldr	r3, [pc, #72]	; (18f38 <bt_gatt_attr_write_ccc+0xd8>)
   18ef0:	4a12      	ldr	r2, [pc, #72]	; (18f3c <bt_gatt_attr_write_ccc+0xdc>)
   18ef2:	1a9b      	subs	r3, r3, r2
   18ef4:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   18ef6:	f04f 0100 	mov.w	r1, #0
   18efa:	2202      	movs	r2, #2
   18efc:	f362 0102 	bfi	r1, r2, #0, #3
   18f00:	f36f 01c5 	bfc	r1, #3, #3
   18f04:	f363 118f 	bfi	r1, r3, #6, #10
   18f08:	480d      	ldr	r0, [pc, #52]	; (18f40 <bt_gatt_attr_write_ccc+0xe0>)
   18f0a:	f7f8 ffa3 	bl	11e54 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18f0e:	f06f 0010 	mvn.w	r0, #16
   18f12:	e7d1      	b.n	18eb8 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   18f14:	4639      	mov	r1, r7
   18f16:	4630      	mov	r0, r6
   18f18:	f00a fa94 	bl	23444 <gatt_ccc_changed>
   18f1c:	e7ca      	b.n	18eb4 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   18f1e:	4640      	mov	r0, r8
   18f20:	f00a fbc6 	bl	236b0 <clear_ccc_cfg>
   18f24:	e7c7      	b.n	18eb6 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18f26:	f06f 0006 	mvn.w	r0, #6
   18f2a:	e7c5      	b.n	18eb8 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18f2c:	f06f 000c 	mvn.w	r0, #12
   18f30:	e7c2      	b.n	18eb8 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   18f32:	f06f 000d 	mvn.w	r0, #13
   18f36:	e7bf      	b.n	18eb8 <bt_gatt_attr_write_ccc+0x58>
   18f38:	00025da0 	.word	0x00025da0
   18f3c:	00025d80 	.word	0x00025d80
   18f40:	00027860 	.word	0x00027860

00018f44 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18f44:	4b13      	ldr	r3, [pc, #76]	; (18f94 <bt_gatt_init+0x50>)
   18f46:	2201      	movs	r2, #1
   18f48:	f3bf 8f5b 	dmb	ish
   18f4c:	e853 1f00 	ldrex	r1, [r3]
   18f50:	2900      	cmp	r1, #0
   18f52:	d103      	bne.n	18f5c <bt_gatt_init+0x18>
   18f54:	e843 2000 	strex	r0, r2, [r3]
   18f58:	2800      	cmp	r0, #0
   18f5a:	d1f7      	bne.n	18f4c <bt_gatt_init+0x8>
   18f5c:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   18f60:	d116      	bne.n	18f90 <bt_gatt_init+0x4c>
{
   18f62:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   18f64:	f7ff fd92 	bl	18a8c <bt_gatt_service_init>
	list->head = NULL;
   18f68:	4b0b      	ldr	r3, [pc, #44]	; (18f98 <bt_gatt_init+0x54>)
   18f6a:	2200      	movs	r2, #0
   18f6c:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   18f6e:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   18f70:	4c0a      	ldr	r4, [pc, #40]	; (18f9c <bt_gatt_init+0x58>)
   18f72:	490b      	ldr	r1, [pc, #44]	; (18fa0 <bt_gatt_init+0x5c>)
   18f74:	4620      	mov	r0, r4
   18f76:	f00c f95e 	bl	25236 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   18f7a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18f7e:	2300      	movs	r3, #0
   18f80:	4620      	mov	r0, r4
   18f82:	f004 f8a3 	bl	1d0cc <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   18f86:	4907      	ldr	r1, [pc, #28]	; (18fa4 <bt_gatt_init+0x60>)
   18f88:	4807      	ldr	r0, [pc, #28]	; (18fa8 <bt_gatt_init+0x64>)
   18f8a:	f00c f954 	bl	25236 <k_work_init_delayable>
}
   18f8e:	bd10      	pop	{r4, pc}
   18f90:	4770      	bx	lr
   18f92:	bf00      	nop
   18f94:	2000295c 	.word	0x2000295c
   18f98:	20002944 	.word	0x20002944
   18f9c:	200019f8 	.word	0x200019f8
   18fa0:	00023941 	.word	0x00023941
   18fa4:	0001937d 	.word	0x0001937d
   18fa8:	20001a70 	.word	0x20001a70

00018fac <bt_gatt_attr_get_handle>:
	if (!attr) {
   18fac:	b328      	cbz	r0, 18ffa <bt_gatt_attr_get_handle+0x4e>
{
   18fae:	b4f0      	push	{r4, r5, r6, r7}
   18fb0:	4606      	mov	r6, r0
	if (attr->handle) {
   18fb2:	8a00      	ldrh	r0, [r0, #16]
   18fb4:	bb20      	cbnz	r0, 19000 <bt_gatt_attr_get_handle+0x54>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18fb6:	4d13      	ldr	r5, [pc, #76]	; (19004 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   18fb8:	2201      	movs	r2, #1
   18fba:	e003      	b.n	18fc4 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   18fbc:	686b      	ldr	r3, [r5, #4]
   18fbe:	441a      	add	r2, r3
   18fc0:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18fc2:	3508      	adds	r5, #8
   18fc4:	4b10      	ldr	r3, [pc, #64]	; (19008 <bt_gatt_attr_get_handle+0x5c>)
   18fc6:	429d      	cmp	r5, r3
   18fc8:	d21a      	bcs.n	19000 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   18fca:	682c      	ldr	r4, [r5, #0]
   18fcc:	42b4      	cmp	r4, r6
   18fce:	d8f5      	bhi.n	18fbc <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   18fd0:	686f      	ldr	r7, [r5, #4]
   18fd2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   18fd6:	009b      	lsls	r3, r3, #2
   18fd8:	3b14      	subs	r3, #20
   18fda:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   18fdc:	42b3      	cmp	r3, r6
   18fde:	d3ed      	bcc.n	18fbc <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   18fe0:	2300      	movs	r3, #0
   18fe2:	429f      	cmp	r7, r3
   18fe4:	d9ed      	bls.n	18fc2 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   18fe6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   18fea:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   18fee:	42b1      	cmp	r1, r6
   18ff0:	d005      	beq.n	18ffe <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   18ff2:	3301      	adds	r3, #1
   18ff4:	3201      	adds	r2, #1
   18ff6:	b292      	uxth	r2, r2
   18ff8:	e7f3      	b.n	18fe2 <bt_gatt_attr_get_handle+0x36>
		return 0;
   18ffa:	2000      	movs	r0, #0
}
   18ffc:	4770      	bx	lr
				return handle;
   18ffe:	4610      	mov	r0, r2
}
   19000:	bcf0      	pop	{r4, r5, r6, r7}
   19002:	4770      	bx	lr
   19004:	00025d70 	.word	0x00025d70
   19008:	00025d80 	.word	0x00025d80

0001900c <bt_gatt_foreach_attr_type>:
{
   1900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19010:	b089      	sub	sp, #36	; 0x24
   19012:	4607      	mov	r7, r0
   19014:	468a      	mov	sl, r1
   19016:	4690      	mov	r8, r2
   19018:	4699      	mov	r9, r3
   1901a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1901e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   19022:	b91b      	cbnz	r3, 1902c <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   19024:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19028:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1902c:	4b19      	ldr	r3, [pc, #100]	; (19094 <bt_gatt_foreach_attr_type+0x88>)
   1902e:	881b      	ldrh	r3, [r3, #0]
   19030:	42bb      	cmp	r3, r7
   19032:	d22c      	bcs.n	1908e <bt_gatt_foreach_attr_type+0x82>
}
   19034:	b009      	add	sp, #36	; 0x24
   19036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1903a:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1903c:	3608      	adds	r6, #8
   1903e:	4b16      	ldr	r3, [pc, #88]	; (19098 <bt_gatt_foreach_attr_type+0x8c>)
   19040:	429e      	cmp	r6, r3
   19042:	d2f7      	bcs.n	19034 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   19044:	6873      	ldr	r3, [r6, #4]
   19046:	18e2      	adds	r2, r4, r3
   19048:	42ba      	cmp	r2, r7
   1904a:	d3f6      	bcc.n	1903a <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1904c:	2500      	movs	r5, #0
   1904e:	9707      	str	r7, [sp, #28]
   19050:	6873      	ldr	r3, [r6, #4]
   19052:	42ab      	cmp	r3, r5
   19054:	d919      	bls.n	1908a <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19056:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1905a:	f8cd b010 	str.w	fp, [sp, #16]
   1905e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19060:	9303      	str	r3, [sp, #12]
   19062:	ab12      	add	r3, sp, #72	; 0x48
   19064:	9302      	str	r3, [sp, #8]
   19066:	f8cd 9004 	str.w	r9, [sp, #4]
   1906a:	f8cd 8000 	str.w	r8, [sp]
   1906e:	4653      	mov	r3, sl
   19070:	9a07      	ldr	r2, [sp, #28]
   19072:	4621      	mov	r1, r4
   19074:	6837      	ldr	r7, [r6, #0]
   19076:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1907a:	f00a fae0 	bl	2363e <gatt_foreach_iter>
   1907e:	2800      	cmp	r0, #0
   19080:	d0d8      	beq.n	19034 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19082:	3501      	adds	r5, #1
   19084:	3401      	adds	r4, #1
   19086:	b2a4      	uxth	r4, r4
   19088:	e7e2      	b.n	19050 <bt_gatt_foreach_attr_type+0x44>
   1908a:	9f07      	ldr	r7, [sp, #28]
   1908c:	e7d6      	b.n	1903c <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1908e:	4e03      	ldr	r6, [pc, #12]	; (1909c <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   19090:	2401      	movs	r4, #1
   19092:	e7d4      	b.n	1903e <bt_gatt_foreach_attr_type+0x32>
   19094:	20003a04 	.word	0x20003a04
   19098:	00025d80 	.word	0x00025d80
   1909c:	00025d70 	.word	0x00025d70

000190a0 <db_hash_gen>:
{
   190a0:	b510      	push	{r4, lr}
   190a2:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   190a4:	2300      	movs	r3, #0
   190a6:	9348      	str	r3, [sp, #288]	; 0x120
   190a8:	9349      	str	r3, [sp, #292]	; 0x124
   190aa:	934a      	str	r3, [sp, #296]	; 0x128
   190ac:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   190ae:	aa1c      	add	r2, sp, #112	; 0x70
   190b0:	a948      	add	r1, sp, #288	; 0x120
   190b2:	a804      	add	r0, sp, #16
   190b4:	f008 fdab 	bl	21c0e <tc_cmac_setup>
   190b8:	b190      	cbz	r0, 190e0 <db_hash_gen+0x40>
   190ba:	ac04      	add	r4, sp, #16
   190bc:	9402      	str	r4, [sp, #8]
   190be:	4b26      	ldr	r3, [pc, #152]	; (19158 <db_hash_gen+0xb8>)
   190c0:	9301      	str	r3, [sp, #4]
   190c2:	2200      	movs	r2, #0
   190c4:	9200      	str	r2, [sp, #0]
   190c6:	4613      	mov	r3, r2
   190c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   190cc:	2001      	movs	r0, #1
   190ce:	f7ff ff9d 	bl	1900c <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   190d2:	4621      	mov	r1, r4
   190d4:	4821      	ldr	r0, [pc, #132]	; (1915c <db_hash_gen+0xbc>)
   190d6:	f008 fe35 	bl	21d44 <tc_cmac_final>
   190da:	b190      	cbz	r0, 19102 <db_hash_gen+0x62>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   190dc:	2300      	movs	r3, #0
   190de:	e029      	b.n	19134 <db_hash_gen+0x94>
   190e0:	4b1f      	ldr	r3, [pc, #124]	; (19160 <db_hash_gen+0xc0>)
   190e2:	4a20      	ldr	r2, [pc, #128]	; (19164 <db_hash_gen+0xc4>)
   190e4:	1a9b      	subs	r3, r3, r2
   190e6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   190e8:	f04f 0100 	mov.w	r1, #0
   190ec:	2201      	movs	r2, #1
   190ee:	f362 0102 	bfi	r1, r2, #0, #3
   190f2:	f36f 01c5 	bfc	r1, #3, #3
   190f6:	f363 118f 	bfi	r1, r3, #6, #10
   190fa:	481b      	ldr	r0, [pc, #108]	; (19168 <db_hash_gen+0xc8>)
   190fc:	f7f8 feaa 	bl	11e54 <log_0>
		return;
   19100:	e027      	b.n	19152 <db_hash_gen+0xb2>
   19102:	4b17      	ldr	r3, [pc, #92]	; (19160 <db_hash_gen+0xc0>)
   19104:	4a17      	ldr	r2, [pc, #92]	; (19164 <db_hash_gen+0xc4>)
   19106:	1a9b      	subs	r3, r3, r2
   19108:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   1910a:	f04f 0100 	mov.w	r1, #0
   1910e:	2201      	movs	r2, #1
   19110:	f362 0102 	bfi	r1, r2, #0, #3
   19114:	f36f 01c5 	bfc	r1, #3, #3
   19118:	f363 118f 	bfi	r1, r3, #6, #10
   1911c:	4813      	ldr	r0, [pc, #76]	; (1916c <db_hash_gen+0xcc>)
   1911e:	f7f8 fe99 	bl	11e54 <log_0>
		return;
   19122:	e016      	b.n	19152 <db_hash_gen+0xb2>
		uint8_t tmp = ((uint8_t *)buf)[i];
   19124:	4a0d      	ldr	r2, [pc, #52]	; (1915c <db_hash_gen+0xbc>)
   19126:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   19128:	f1c3 010f 	rsb	r1, r3, #15
   1912c:	5c54      	ldrb	r4, [r2, r1]
   1912e:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19130:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   19132:	3301      	adds	r3, #1
   19134:	2b07      	cmp	r3, #7
   19136:	d9f5      	bls.n	19124 <db_hash_gen+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19138:	4b0d      	ldr	r3, [pc, #52]	; (19170 <db_hash_gen+0xd0>)
   1913a:	f3bf 8f5b 	dmb	ish
   1913e:	e853 2f00 	ldrex	r2, [r3]
   19142:	f042 0204 	orr.w	r2, r2, #4
   19146:	e843 2100 	strex	r1, r2, [r3]
   1914a:	2900      	cmp	r1, #0
   1914c:	d1f7      	bne.n	1913e <db_hash_gen+0x9e>
   1914e:	f3bf 8f5b 	dmb	ish
}
   19152:	b04c      	add	sp, #304	; 0x130
   19154:	bd10      	pop	{r4, pc}
   19156:	bf00      	nop
   19158:	0002349f 	.word	0x0002349f
   1915c:	200019e8 	.word	0x200019e8
   19160:	00025da0 	.word	0x00025da0
   19164:	00025d80 	.word	0x00025d80
   19168:	0002787c 	.word	0x0002787c
   1916c:	00027898 	.word	0x00027898
   19170:	20001aa0 	.word	0x20001aa0

00019174 <gatt_find_by_uuid>:
{
   19174:	b510      	push	{r4, lr}
   19176:	b084      	sub	sp, #16
   19178:	4604      	mov	r4, r0
   1917a:	460a      	mov	r2, r1
	found->attr = NULL;
   1917c:	2300      	movs	r3, #0
   1917e:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19180:	9002      	str	r0, [sp, #8]
   19182:	4907      	ldr	r1, [pc, #28]	; (191a0 <gatt_find_by_uuid+0x2c>)
   19184:	9101      	str	r1, [sp, #4]
   19186:	2101      	movs	r1, #1
   19188:	9100      	str	r1, [sp, #0]
   1918a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1918e:	8880      	ldrh	r0, [r0, #4]
   19190:	f7ff ff3c 	bl	1900c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19194:	6820      	ldr	r0, [r4, #0]
}
   19196:	3800      	subs	r0, #0
   19198:	bf18      	it	ne
   1919a:	2001      	movne	r0, #1
   1919c:	b004      	add	sp, #16
   1919e:	bd10      	pop	{r4, pc}
   191a0:	00023497 	.word	0x00023497

000191a4 <gatt_indicate>:
{
   191a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   191a8:	b082      	sub	sp, #8
   191aa:	4606      	mov	r6, r0
   191ac:	460f      	mov	r7, r1
   191ae:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   191b0:	2214      	movs	r2, #20
   191b2:	6861      	ldr	r1, [r4, #4]
   191b4:	f00a fbc9 	bl	2394a <bt_gatt_check_perm>
   191b8:	bb80      	cbnz	r0, 1921c <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   191ba:	8aa5      	ldrh	r5, [r4, #20]
   191bc:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   191be:	9500      	str	r5, [sp, #0]
   191c0:	231d      	movs	r3, #29
   191c2:	2200      	movs	r2, #0
   191c4:	4621      	mov	r1, r4
   191c6:	482d      	ldr	r0, [pc, #180]	; (1927c <gatt_indicate+0xd8>)
   191c8:	f00a fa64 	bl	23694 <gatt_req_alloc>
	if (!req) {
   191cc:	4680      	mov	r8, r0
   191ce:	2800      	cmp	r0, #0
   191d0:	d051      	beq.n	19276 <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   191d2:	462a      	mov	r2, r5
   191d4:	211d      	movs	r1, #29
   191d6:	4630      	mov	r0, r6
   191d8:	f7ff f95e 	bl	18498 <bt_att_create_pdu>
	if (!buf) {
   191dc:	4681      	mov	r9, r0
   191de:	b380      	cbz	r0, 19242 <gatt_indicate+0x9e>
   191e0:	f100 0a08 	add.w	sl, r0, #8
   191e4:	2102      	movs	r1, #2
   191e6:	4650      	mov	r0, sl
   191e8:	f00a fdab 	bl	23d42 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   191ec:	4605      	mov	r5, r0
   191ee:	f825 7b02 	strh.w	r7, [r5], #2
   191f2:	8aa1      	ldrh	r1, [r4, #20]
   191f4:	4650      	mov	r0, sl
   191f6:	f00a fda4 	bl	23d42 <net_buf_simple_add>
   191fa:	8aa2      	ldrh	r2, [r4, #20]
   191fc:	6921      	ldr	r1, [r4, #16]
   191fe:	4628      	mov	r0, r5
   19200:	f00c fbe9 	bl	259d6 <memcpy>
	req->buf = buf;
   19204:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   19208:	4641      	mov	r1, r8
   1920a:	4630      	mov	r0, r6
   1920c:	f00a f8bd 	bl	2338a <bt_att_req_send>
	if (err) {
   19210:	4604      	mov	r4, r0
   19212:	bb60      	cbnz	r0, 1926e <gatt_indicate+0xca>
}
   19214:	4620      	mov	r0, r4
   19216:	b002      	add	sp, #8
   19218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1921c:	4b18      	ldr	r3, [pc, #96]	; (19280 <gatt_indicate+0xdc>)
   1921e:	4a19      	ldr	r2, [pc, #100]	; (19284 <gatt_indicate+0xe0>)
   19220:	1a9b      	subs	r3, r3, r2
   19222:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   19224:	f04f 0100 	mov.w	r1, #0
   19228:	2202      	movs	r2, #2
   1922a:	f362 0102 	bfi	r1, r2, #0, #3
   1922e:	f36f 01c5 	bfc	r1, #3, #3
   19232:	f363 118f 	bfi	r1, r3, #6, #10
   19236:	4814      	ldr	r0, [pc, #80]	; (19288 <gatt_indicate+0xe4>)
   19238:	f7f8 fe0c 	bl	11e54 <log_0>
		return -EPERM;
   1923c:	f04f 34ff 	mov.w	r4, #4294967295
   19240:	e7e8      	b.n	19214 <gatt_indicate+0x70>
   19242:	4b0f      	ldr	r3, [pc, #60]	; (19280 <gatt_indicate+0xdc>)
   19244:	4a0f      	ldr	r2, [pc, #60]	; (19284 <gatt_indicate+0xe0>)
   19246:	1a9b      	subs	r3, r3, r2
   19248:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   1924a:	f04f 0100 	mov.w	r1, #0
   1924e:	2202      	movs	r2, #2
   19250:	f362 0102 	bfi	r1, r2, #0, #3
   19254:	f36f 01c5 	bfc	r1, #3, #3
   19258:	f363 118f 	bfi	r1, r3, #6, #10
   1925c:	480b      	ldr	r0, [pc, #44]	; (1928c <gatt_indicate+0xe8>)
   1925e:	f7f8 fdf9 	bl	11e54 <log_0>
		bt_att_req_free(req);
   19262:	4640      	mov	r0, r8
   19264:	f7ff fb60 	bl	18928 <bt_att_req_free>
		return -ENOMEM;
   19268:	f06f 040b 	mvn.w	r4, #11
   1926c:	e7d2      	b.n	19214 <gatt_indicate+0x70>
		bt_att_req_free(req);
   1926e:	4640      	mov	r0, r8
   19270:	f7ff fb5a 	bl	18928 <bt_att_req_free>
   19274:	e7ce      	b.n	19214 <gatt_indicate+0x70>
		return -ENOMEM;
   19276:	f06f 040b 	mvn.w	r4, #11
   1927a:	e7cb      	b.n	19214 <gatt_indicate+0x70>
   1927c:	00023475 	.word	0x00023475
   19280:	00025da0 	.word	0x00025da0
   19284:	00025d80 	.word	0x00025d80
   19288:	000278b4 	.word	0x000278b4
   1928c:	000278cc 	.word	0x000278cc

00019290 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19290:	f3bf 8f5b 	dmb	ish
   19294:	4b37      	ldr	r3, [pc, #220]	; (19374 <bt_gatt_indicate+0xe4>)
   19296:	681b      	ldr	r3, [r3, #0]
   19298:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1929c:	f013 0f02 	tst.w	r3, #2
   192a0:	d05e      	beq.n	19360 <bt_gatt_indicate+0xd0>
{
   192a2:	b530      	push	{r4, r5, lr}
   192a4:	b08d      	sub	sp, #52	; 0x34
   192a6:	4605      	mov	r5, r0
   192a8:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   192aa:	b110      	cbz	r0, 192b2 <bt_gatt_indicate+0x22>
   192ac:	7a83      	ldrb	r3, [r0, #10]
   192ae:	2b07      	cmp	r3, #7
   192b0:	d159      	bne.n	19366 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   192b2:	6860      	ldr	r0, [r4, #4]
   192b4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   192b6:	f7ff fe79 	bl	18fac <bt_gatt_attr_get_handle>
   192ba:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   192be:	6821      	ldr	r1, [r4, #0]
   192c0:	b341      	cbz	r1, 19314 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   192c2:	a805      	add	r0, sp, #20
   192c4:	f7ff ff56 	bl	19174 <gatt_find_by_uuid>
   192c8:	2800      	cmp	r0, #0
   192ca:	d04f      	beq.n	1936c <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   192cc:	9b05      	ldr	r3, [sp, #20]
   192ce:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   192d0:	9b05      	ldr	r3, [sp, #20]
   192d2:	6818      	ldr	r0, [r3, #0]
   192d4:	2300      	movs	r3, #0
   192d6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   192da:	f642 0303 	movw	r3, #10243	; 0x2803
   192de:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   192e2:	a90b      	add	r1, sp, #44	; 0x2c
   192e4:	f008 fe19 	bl	21f1a <bt_uuid_cmp>
   192e8:	b948      	cbnz	r0, 192fe <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   192ea:	9805      	ldr	r0, [sp, #20]
   192ec:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   192ee:	799b      	ldrb	r3, [r3, #6]
   192f0:	f013 0f20 	tst.w	r3, #32
   192f4:	d013      	beq.n	1931e <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   192f6:	f00a facd 	bl	23894 <bt_gatt_attr_value_handle>
   192fa:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   192fe:	b18d      	cbz	r5, 19324 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   19300:	2301      	movs	r3, #1
   19302:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   19304:	4622      	mov	r2, r4
   19306:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1930a:	4628      	mov	r0, r5
   1930c:	f7ff ff4a 	bl	191a4 <gatt_indicate>
}
   19310:	b00d      	add	sp, #52	; 0x34
   19312:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   19314:	2800      	cmp	r0, #0
   19316:	d1db      	bne.n	192d0 <bt_gatt_indicate+0x40>
			return -ENOENT;
   19318:	f06f 0001 	mvn.w	r0, #1
   1931c:	e7f8      	b.n	19310 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1931e:	f06f 0015 	mvn.w	r0, #21
   19322:	e7f5      	b.n	19310 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   19324:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   19328:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1932a:	2302      	movs	r3, #2
   1932c:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   19330:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   19332:	2300      	movs	r3, #0
   19334:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19336:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1933a:	f642 1202 	movw	r2, #10498	; 0x2902
   1933e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   19342:	aa05      	add	r2, sp, #20
   19344:	9202      	str	r2, [sp, #8]
   19346:	4a0c      	ldr	r2, [pc, #48]	; (19378 <bt_gatt_indicate+0xe8>)
   19348:	9201      	str	r2, [sp, #4]
   1934a:	2201      	movs	r2, #1
   1934c:	9200      	str	r2, [sp, #0]
   1934e:	aa0a      	add	r2, sp, #40	; 0x28
   19350:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19354:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   19358:	f7ff fe58 	bl	1900c <bt_gatt_foreach_attr_type>
	return data.err;
   1935c:	9807      	ldr	r0, [sp, #28]
   1935e:	e7d7      	b.n	19310 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   19360:	f06f 000a 	mvn.w	r0, #10
}
   19364:	4770      	bx	lr
		return -ENOTCONN;
   19366:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1936a:	e7d1      	b.n	19310 <bt_gatt_indicate+0x80>
			return -ENOENT;
   1936c:	f06f 0001 	mvn.w	r0, #1
   19370:	e7ce      	b.n	19310 <bt_gatt_indicate+0x80>
   19372:	bf00      	nop
   19374:	20000374 	.word	0x20000374
   19378:	00019545 	.word	0x00019545

0001937c <sc_process>:
{
   1937c:	b510      	push	{r4, lr}
   1937e:	b082      	sub	sp, #8
   19380:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19382:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   19386:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1938a:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1938e:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   19392:	f1a0 0120 	sub.w	r1, r0, #32
   19396:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1939a:	f3bf 8f5b 	dmb	ish
   1939e:	e854 2f00 	ldrex	r2, [r4]
   193a2:	f022 0201 	bic.w	r2, r2, #1
   193a6:	e844 2000 	strex	r0, r2, [r4]
   193aa:	2800      	cmp	r0, #0
   193ac:	d1f7      	bne.n	1939e <sc_process+0x22>
   193ae:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   193b2:	2000      	movs	r0, #0
   193b4:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   193b8:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   193bc:	4a0e      	ldr	r2, [pc, #56]	; (193f8 <sc_process+0x7c>)
   193be:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   193c2:	4a0e      	ldr	r2, [pc, #56]	; (193fc <sc_process+0x80>)
   193c4:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   193c8:	aa01      	add	r2, sp, #4
   193ca:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   193ce:	2204      	movs	r2, #4
   193d0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   193d4:	f7ff ff5c 	bl	19290 <bt_gatt_indicate>
   193d8:	b108      	cbz	r0, 193de <sc_process+0x62>
}
   193da:	b002      	add	sp, #8
   193dc:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   193de:	f3bf 8f5b 	dmb	ish
   193e2:	e854 3f00 	ldrex	r3, [r4]
   193e6:	f043 0302 	orr.w	r3, r3, #2
   193ea:	e844 3200 	strex	r2, r3, [r4]
   193ee:	2a00      	cmp	r2, #0
   193f0:	d1f7      	bne.n	193e2 <sc_process+0x66>
   193f2:	f3bf 8f5b 	dmb	ish
   193f6:	e7f0      	b.n	193da <sc_process+0x5e>
   193f8:	0002798c 	.word	0x0002798c
   193fc:	00018bd1 	.word	0x00018bd1

00019400 <sc_restore>:
{
   19400:	b510      	push	{r4, lr}
   19402:	b082      	sub	sp, #8
   19404:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19406:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1940a:	7a00      	ldrb	r0, [r0, #8]
   1940c:	f7ff fb8c 	bl	18b28 <find_sc_cfg>
	if (!cfg) {
   19410:	b1f0      	cbz	r0, 19450 <sc_restore+0x50>
   19412:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   19414:	8902      	ldrh	r2, [r0, #8]
   19416:	b90a      	cbnz	r2, 1941c <sc_restore+0x1c>
   19418:	8941      	ldrh	r1, [r0, #10]
   1941a:	b1c9      	cbz	r1, 19450 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1941c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   19420:	895b      	ldrh	r3, [r3, #10]
   19422:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   19426:	4620      	mov	r0, r4
   19428:	f7fd fec6 	bl	171b8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1942c:	4912      	ldr	r1, [pc, #72]	; (19478 <sc_restore+0x78>)
   1942e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   19432:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   19436:	4a11      	ldr	r2, [pc, #68]	; (1947c <sc_restore+0x7c>)
   19438:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1943a:	4a11      	ldr	r2, [pc, #68]	; (19480 <sc_restore+0x80>)
   1943c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1943e:	aa01      	add	r2, sp, #4
   19440:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   19442:	2204      	movs	r2, #4
   19444:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19446:	4619      	mov	r1, r3
   19448:	4620      	mov	r0, r4
   1944a:	f7ff ff21 	bl	19290 <bt_gatt_indicate>
   1944e:	b908      	cbnz	r0, 19454 <sc_restore+0x54>
}
   19450:	b002      	add	sp, #8
   19452:	bd10      	pop	{r4, pc}
   19454:	4b0b      	ldr	r3, [pc, #44]	; (19484 <sc_restore+0x84>)
   19456:	4a0c      	ldr	r2, [pc, #48]	; (19488 <sc_restore+0x88>)
   19458:	1a9b      	subs	r3, r3, r2
   1945a:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   1945c:	f04f 0100 	mov.w	r1, #0
   19460:	2201      	movs	r2, #1
   19462:	f362 0102 	bfi	r1, r2, #0, #3
   19466:	f36f 01c5 	bfc	r1, #3, #3
   1946a:	f363 118f 	bfi	r1, r3, #6, #10
   1946e:	4807      	ldr	r0, [pc, #28]	; (1948c <sc_restore+0x8c>)
   19470:	f7f8 fcf0 	bl	11e54 <log_0>
   19474:	e7ec      	b.n	19450 <sc_restore+0x50>
   19476:	bf00      	nop
   19478:	2000296c 	.word	0x2000296c
   1947c:	0002798c 	.word	0x0002798c
   19480:	000235f7 	.word	0x000235f7
   19484:	00025da0 	.word	0x00025da0
   19488:	00025d80 	.word	0x00025d80
   1948c:	000278f4 	.word	0x000278f4

00019490 <gatt_notify>:
{
   19490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19494:	4606      	mov	r6, r0
   19496:	460f      	mov	r7, r1
   19498:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1949a:	2214      	movs	r2, #20
   1949c:	6861      	ldr	r1, [r4, #4]
   1949e:	f00a fa54 	bl	2394a <bt_gatt_check_perm>
   194a2:	bb08      	cbnz	r0, 194e8 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   194a4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   194a6:	3202      	adds	r2, #2
   194a8:	211b      	movs	r1, #27
   194aa:	4630      	mov	r0, r6
   194ac:	f7fe fff4 	bl	18498 <bt_att_create_pdu>
	if (!buf) {
   194b0:	4680      	mov	r8, r0
   194b2:	b360      	cbz	r0, 1950e <gatt_notify+0x7e>
   194b4:	f100 0908 	add.w	r9, r0, #8
   194b8:	2102      	movs	r1, #2
   194ba:	4648      	mov	r0, r9
   194bc:	f00a fc41 	bl	23d42 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   194c0:	4605      	mov	r5, r0
   194c2:	f825 7b02 	strh.w	r7, [r5], #2
   194c6:	89a1      	ldrh	r1, [r4, #12]
   194c8:	4648      	mov	r0, r9
   194ca:	f00a fc3a 	bl	23d42 <net_buf_simple_add>
   194ce:	89a2      	ldrh	r2, [r4, #12]
   194d0:	68a1      	ldr	r1, [r4, #8]
   194d2:	4628      	mov	r0, r5
   194d4:	f00c fa7f 	bl	259d6 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   194d8:	6963      	ldr	r3, [r4, #20]
   194da:	6922      	ldr	r2, [r4, #16]
   194dc:	4641      	mov	r1, r8
   194de:	4630      	mov	r0, r6
   194e0:	f009 ff2e 	bl	23340 <bt_att_send>
}
   194e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   194e8:	4b12      	ldr	r3, [pc, #72]	; (19534 <gatt_notify+0xa4>)
   194ea:	4a13      	ldr	r2, [pc, #76]	; (19538 <gatt_notify+0xa8>)
   194ec:	1a9b      	subs	r3, r3, r2
   194ee:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   194f0:	f04f 0100 	mov.w	r1, #0
   194f4:	2202      	movs	r2, #2
   194f6:	f362 0102 	bfi	r1, r2, #0, #3
   194fa:	f36f 01c5 	bfc	r1, #3, #3
   194fe:	f363 118f 	bfi	r1, r3, #6, #10
   19502:	480e      	ldr	r0, [pc, #56]	; (1953c <gatt_notify+0xac>)
   19504:	f7f8 fca6 	bl	11e54 <log_0>
		return -EPERM;
   19508:	f04f 30ff 	mov.w	r0, #4294967295
   1950c:	e7ea      	b.n	194e4 <gatt_notify+0x54>
   1950e:	4b09      	ldr	r3, [pc, #36]	; (19534 <gatt_notify+0xa4>)
   19510:	4a09      	ldr	r2, [pc, #36]	; (19538 <gatt_notify+0xa8>)
   19512:	1a9b      	subs	r3, r3, r2
   19514:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   19516:	f04f 0100 	mov.w	r1, #0
   1951a:	2202      	movs	r2, #2
   1951c:	f362 0102 	bfi	r1, r2, #0, #3
   19520:	f36f 01c5 	bfc	r1, #3, #3
   19524:	f363 118f 	bfi	r1, r3, #6, #10
   19528:	4805      	ldr	r0, [pc, #20]	; (19540 <gatt_notify+0xb0>)
   1952a:	f7f8 fc93 	bl	11e54 <log_0>
		return -ENOMEM;
   1952e:	f06f 000b 	mvn.w	r0, #11
   19532:	e7d7      	b.n	194e4 <gatt_notify+0x54>
   19534:	00025da0 	.word	0x00025da0
   19538:	00025d80 	.word	0x00025d80
   1953c:	000278b4 	.word	0x000278b4
   19540:	00027914 	.word	0x00027914

00019544 <notify_cb>:
{
   19544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19548:	b083      	sub	sp, #12
   1954a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1954c:	6882      	ldr	r2, [r0, #8]
   1954e:	4b50      	ldr	r3, [pc, #320]	; (19690 <notify_cb+0x14c>)
   19550:	429a      	cmp	r2, r3
   19552:	d005      	beq.n	19560 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   19554:	f04f 0a01 	mov.w	sl, #1
}
   19558:	4650      	mov	r0, sl
   1955a:	b003      	add	sp, #12
   1955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19560:	4607      	mov	r7, r0
	ccc = attr->user_data;
   19562:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   19564:	4b4b      	ldr	r3, [pc, #300]	; (19694 <notify_cb+0x150>)
   19566:	429d      	cmp	r5, r3
   19568:	d031      	beq.n	195ce <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1956a:	2400      	movs	r4, #0
   1956c:	e05c      	b.n	19628 <notify_cb+0xe4>
				sc = (struct sc_data *)data->ind_params->data;
   1956e:	6933      	ldr	r3, [r6, #16]
   19570:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   19572:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   19576:	8853      	ldrh	r3, [r2, #2]
   19578:	8812      	ldrh	r2, [r2, #0]
   1957a:	4649      	mov	r1, r9
   1957c:	f8df c118 	ldr.w	ip, [pc, #280]	; 19698 <notify_cb+0x154>
   19580:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   19584:	f7ff fc22 	bl	18dcc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19588:	3401      	adds	r4, #1
   1958a:	2c00      	cmp	r4, #0
   1958c:	d1ed      	bne.n	1956a <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1958e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   19592:	4b41      	ldr	r3, [pc, #260]	; (19698 <notify_cb+0x154>)
   19594:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   19598:	f109 0901 	add.w	r9, r9, #1
   1959c:	2300      	movs	r3, #0
   1959e:	9300      	str	r3, [sp, #0]
   195a0:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   195a4:	2207      	movs	r2, #7
   195a6:	4669      	mov	r1, sp
   195a8:	4648      	mov	r0, r9
   195aa:	f00c fa06 	bl	259ba <memcmp>
   195ae:	2800      	cmp	r0, #0
   195b0:	d0ea      	beq.n	19588 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   195b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   195b6:	2207      	movs	r2, #7
   195b8:	4649      	mov	r1, r9
   195ba:	4837      	ldr	r0, [pc, #220]	; (19698 <notify_cb+0x154>)
   195bc:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   195c0:	f7fd fee2 	bl	17388 <bt_conn_lookup_state_le>
			if (!conn) {
   195c4:	2800      	cmp	r0, #0
   195c6:	d0d2      	beq.n	1956e <notify_cb+0x2a>
			bt_conn_unref(conn);
   195c8:	f008 ffc6 	bl	22558 <bt_conn_unref>
   195cc:	e7dc      	b.n	19588 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   195ce:	2400      	movs	r4, #0
   195d0:	e7db      	b.n	1958a <notify_cb+0x46>
			bt_conn_unref(conn);
   195d2:	f008 ffc1 	bl	22558 <bt_conn_unref>
			continue;
   195d6:	e026      	b.n	19626 <notify_cb+0xe2>
			bt_conn_unref(conn);
   195d8:	4648      	mov	r0, r9
   195da:	f008 ffbd 	bl	22558 <bt_conn_unref>
			continue;
   195de:	e022      	b.n	19626 <notify_cb+0xe2>
   195e0:	4b2e      	ldr	r3, [pc, #184]	; (1969c <notify_cb+0x158>)
   195e2:	4a2f      	ldr	r2, [pc, #188]	; (196a0 <notify_cb+0x15c>)
   195e4:	1a9b      	subs	r3, r3, r2
   195e6:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   195e8:	2202      	movs	r2, #2
   195ea:	f362 0802 	bfi	r8, r2, #0, #3
   195ee:	f36f 08c5 	bfc	r8, #3, #3
   195f2:	f363 188f 	bfi	r8, r3, #6, #10
   195f6:	4641      	mov	r1, r8
   195f8:	482a      	ldr	r0, [pc, #168]	; (196a4 <notify_cb+0x160>)
   195fa:	f7f8 fc2b 	bl	11e54 <log_0>
			continue;
   195fe:	e012      	b.n	19626 <notify_cb+0xe2>
			err = gatt_indicate(conn, data->handle,
   19600:	6932      	ldr	r2, [r6, #16]
   19602:	88b1      	ldrh	r1, [r6, #4]
   19604:	4648      	mov	r0, r9
   19606:	f7ff fdcd 	bl	191a4 <gatt_indicate>
			if (err == 0) {
   1960a:	4683      	mov	fp, r0
   1960c:	b918      	cbnz	r0, 19616 <notify_cb+0xd2>
				data->ind_params->_ref++;
   1960e:	6932      	ldr	r2, [r6, #16]
   19610:	7d93      	ldrb	r3, [r2, #22]
   19612:	3301      	adds	r3, #1
   19614:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   19616:	4648      	mov	r0, r9
   19618:	f008 ff9e 	bl	22558 <bt_conn_unref>
		if (err < 0) {
   1961c:	f1bb 0f00 	cmp.w	fp, #0
   19620:	db9a      	blt.n	19558 <notify_cb+0x14>
		data->err = 0;
   19622:	2300      	movs	r3, #0
   19624:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19626:	3401      	adds	r4, #1
   19628:	bb74      	cbnz	r4, 19688 <notify_cb+0x144>
		if (cfg->value != data->type) {
   1962a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1962e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   19632:	891a      	ldrh	r2, [r3, #8]
   19634:	89b3      	ldrh	r3, [r6, #12]
   19636:	429a      	cmp	r2, r3
   19638:	d1f5      	bne.n	19626 <notify_cb+0xe2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1963a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1963e:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   19642:	3101      	adds	r1, #1
   19644:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   19648:	f7fd fe78 	bl	1733c <bt_conn_lookup_addr_le>
		if (!conn) {
   1964c:	4681      	mov	r9, r0
   1964e:	2800      	cmp	r0, #0
   19650:	d0e9      	beq.n	19626 <notify_cb+0xe2>
		if (conn->state != BT_CONN_CONNECTED) {
   19652:	7a83      	ldrb	r3, [r0, #10]
   19654:	2b07      	cmp	r3, #7
   19656:	d1bc      	bne.n	195d2 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   19658:	696b      	ldr	r3, [r5, #20]
   1965a:	b11b      	cbz	r3, 19664 <notify_cb+0x120>
   1965c:	4639      	mov	r1, r7
   1965e:	4798      	blx	r3
   19660:	2800      	cmp	r0, #0
   19662:	d0b9      	beq.n	195d8 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   19664:	2214      	movs	r2, #20
   19666:	4639      	mov	r1, r7
   19668:	4648      	mov	r0, r9
   1966a:	f00a f96e 	bl	2394a <bt_gatt_check_perm>
   1966e:	4682      	mov	sl, r0
   19670:	2800      	cmp	r0, #0
   19672:	d1b5      	bne.n	195e0 <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   19674:	89b3      	ldrh	r3, [r6, #12]
   19676:	2b02      	cmp	r3, #2
   19678:	d0c2      	beq.n	19600 <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1967a:	6932      	ldr	r2, [r6, #16]
   1967c:	88b1      	ldrh	r1, [r6, #4]
   1967e:	4648      	mov	r0, r9
   19680:	f7ff ff06 	bl	19490 <gatt_notify>
   19684:	4683      	mov	fp, r0
   19686:	e7c6      	b.n	19616 <notify_cb+0xd2>
	return BT_GATT_ITER_CONTINUE;
   19688:	f04f 0a01 	mov.w	sl, #1
   1968c:	e764      	b.n	19558 <notify_cb+0x14>
   1968e:	bf00      	nop
   19690:	00018e61 	.word	0x00018e61
   19694:	20000524 	.word	0x20000524
   19698:	20002960 	.word	0x20002960
   1969c:	00025da0 	.word	0x00025da0
   196a0:	00025d80 	.word	0x00025d80
   196a4:	000278b4 	.word	0x000278b4

000196a8 <update_ccc>:
{
   196a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
   196ac:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   196ae:	6882      	ldr	r2, [r0, #8]
   196b0:	4b20      	ldr	r3, [pc, #128]	; (19734 <update_ccc+0x8c>)
   196b2:	429a      	cmp	r2, r3
   196b4:	d002      	beq.n	196bc <update_ccc+0x14>
}
   196b6:	2001      	movs	r0, #1
   196b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   196bc:	4604      	mov	r4, r0
	ccc = attr->user_data;
   196be:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   196c2:	2500      	movs	r5, #0
   196c4:	2d00      	cmp	r5, #0
   196c6:	d1f6      	bne.n	196b6 <update_ccc+0xe>
		if (!cfg->value ||
   196c8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   196cc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   196d0:	891b      	ldrh	r3, [r3, #8]
   196d2:	b36b      	cbz	r3, 19730 <update_ccc+0x88>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   196d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   196d8:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   196dc:	3201      	adds	r2, #1
   196de:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   196e2:	4638      	mov	r0, r7
   196e4:	f008 ff7b 	bl	225de <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   196e8:	b310      	cbz	r0, 19730 <update_ccc+0x88>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   196ea:	222a      	movs	r2, #42	; 0x2a
   196ec:	4621      	mov	r1, r4
   196ee:	4638      	mov	r0, r7
   196f0:	f00a f92b 	bl	2394a <bt_gatt_check_perm>
		if (err) {
   196f4:	b108      	cbz	r0, 196fa <update_ccc+0x52>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   196f6:	2803      	cmp	r0, #3
   196f8:	d00a      	beq.n	19710 <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   196fa:	4641      	mov	r1, r8
   196fc:	4620      	mov	r0, r4
   196fe:	f009 fea1 	bl	23444 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   19702:	4b0d      	ldr	r3, [pc, #52]	; (19738 <update_ccc+0x90>)
   19704:	4598      	cmp	r8, r3
   19706:	d1d6      	bne.n	196b6 <update_ccc+0xe>
			sc_restore(conn);
   19708:	4638      	mov	r0, r7
   1970a:	f7ff fe79 	bl	19400 <sc_restore>
   1970e:	e7d2      	b.n	196b6 <update_ccc+0xe>
   19710:	4b0a      	ldr	r3, [pc, #40]	; (1973c <update_ccc+0x94>)
   19712:	4a0b      	ldr	r2, [pc, #44]	; (19740 <update_ccc+0x98>)
   19714:	1a9b      	subs	r3, r3, r2
   19716:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   19718:	2202      	movs	r2, #2
   1971a:	f362 0602 	bfi	r6, r2, #0, #3
   1971e:	f36f 06c5 	bfc	r6, #3, #3
   19722:	f363 168f 	bfi	r6, r3, #6, #10
   19726:	4632      	mov	r2, r6
   19728:	4621      	mov	r1, r4
   1972a:	4806      	ldr	r0, [pc, #24]	; (19744 <update_ccc+0x9c>)
   1972c:	f7f8 fadc 	bl	11ce8 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19730:	3501      	adds	r5, #1
   19732:	e7c7      	b.n	196c4 <update_ccc+0x1c>
   19734:	00018e61 	.word	0x00018e61
   19738:	20000524 	.word	0x20000524
   1973c:	00025da0 	.word	0x00025da0
   19740:	00025d80 	.word	0x00025d80
   19744:	00027940 	.word	0x00027940

00019748 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   19748:	b500      	push	{lr}
   1974a:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1974c:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1974e:	2001      	movs	r0, #1
   19750:	f88d 0014 	strb.w	r0, [sp, #20]
   19754:	ab04      	add	r3, sp, #16
   19756:	9302      	str	r3, [sp, #8]
   19758:	4b05      	ldr	r3, [pc, #20]	; (19770 <bt_gatt_connected+0x28>)
   1975a:	9301      	str	r3, [sp, #4]
   1975c:	2200      	movs	r2, #0
   1975e:	9200      	str	r2, [sp, #0]
   19760:	4613      	mov	r3, r2
   19762:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19766:	f7ff fc51 	bl	1900c <bt_gatt_foreach_attr_type>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1976a:	b007      	add	sp, #28
   1976c:	f85d fb04 	ldr.w	pc, [sp], #4
   19770:	000196a9 	.word	0x000196a9

00019774 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   19774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19776:	4605      	mov	r5, r0
   19778:	460e      	mov	r6, r1
   1977a:	4617      	mov	r7, r2
	return list->head;
   1977c:	4b0a      	ldr	r3, [pc, #40]	; (197a8 <bt_gatt_att_max_mtu_changed+0x34>)
   1977e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19780:	b134      	cbz	r4, 19790 <bt_gatt_att_max_mtu_changed+0x1c>
   19782:	3c04      	subs	r4, #4
   19784:	e004      	b.n	19790 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19786:	1d23      	adds	r3, r4, #4
   19788:	d00b      	beq.n	197a2 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   1978a:	6864      	ldr	r4, [r4, #4]
   1978c:	b15c      	cbz	r4, 197a6 <bt_gatt_att_max_mtu_changed+0x32>
   1978e:	3c04      	subs	r4, #4
   19790:	b14c      	cbz	r4, 197a6 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   19792:	6823      	ldr	r3, [r4, #0]
   19794:	2b00      	cmp	r3, #0
   19796:	d0f6      	beq.n	19786 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   19798:	463a      	mov	r2, r7
   1979a:	4631      	mov	r1, r6
   1979c:	4628      	mov	r0, r5
   1979e:	4798      	blx	r3
   197a0:	e7f1      	b.n	19786 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   197a2:	461c      	mov	r4, r3
   197a4:	e7f4      	b.n	19790 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   197a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197a8:	20002944 	.word	0x20002944

000197ac <db_hash_read>:
{
   197ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   197ae:	b085      	sub	sp, #20
   197b0:	4604      	mov	r4, r0
   197b2:	460d      	mov	r5, r1
   197b4:	4616      	mov	r6, r2
   197b6:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   197b8:	4812      	ldr	r0, [pc, #72]	; (19804 <db_hash_read+0x58>)
   197ba:	f100 0140 	add.w	r1, r0, #64	; 0x40
   197be:	3010      	adds	r0, #16
   197c0:	f00b fd95 	bl	252ee <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   197c4:	f3bf 8f5b 	dmb	ish
   197c8:	4b0f      	ldr	r3, [pc, #60]	; (19808 <db_hash_read+0x5c>)
   197ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   197cc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   197d0:	f013 0f04 	tst.w	r3, #4
   197d4:	d012      	beq.n	197fc <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   197d6:	2101      	movs	r1, #1
   197d8:	4620      	mov	r0, r4
   197da:	f00a f8e2 	bl	239a2 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   197de:	2310      	movs	r3, #16
   197e0:	9302      	str	r3, [sp, #8]
   197e2:	4b08      	ldr	r3, [pc, #32]	; (19804 <db_hash_read+0x58>)
   197e4:	9301      	str	r3, [sp, #4]
   197e6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   197ea:	9300      	str	r3, [sp, #0]
   197ec:	463b      	mov	r3, r7
   197ee:	4632      	mov	r2, r6
   197f0:	4629      	mov	r1, r5
   197f2:	4620      	mov	r0, r4
   197f4:	f009 ffaf 	bl	23756 <bt_gatt_attr_read>
}
   197f8:	b005      	add	sp, #20
   197fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   197fc:	2001      	movs	r0, #1
   197fe:	f7ff fc4f 	bl	190a0 <db_hash_gen>
   19802:	e7e8      	b.n	197d6 <db_hash_read+0x2a>
   19804:	200019e8 	.word	0x200019e8
   19808:	20001a50 	.word	0x20001a50

0001980c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1980c:	b510      	push	{r4, lr}
   1980e:	b084      	sub	sp, #16
   19810:	4604      	mov	r4, r0
   19812:	9002      	str	r0, [sp, #8]
   19814:	4b07      	ldr	r3, [pc, #28]	; (19834 <bt_gatt_disconnected+0x28>)
   19816:	9301      	str	r3, [sp, #4]
   19818:	2200      	movs	r2, #0
   1981a:	9200      	str	r2, [sp, #0]
   1981c:	4613      	mov	r3, r2
   1981e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19822:	2001      	movs	r0, #1
   19824:	f7ff fbf2 	bl	1900c <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   19828:	4620      	mov	r0, r4
   1982a:	f009 ff5e 	bl	236ea <remove_cf_cfg>
#endif
}
   1982e:	b004      	add	sp, #16
   19830:	bd10      	pop	{r4, pc}
   19832:	bf00      	nop
   19834:	00018c45 	.word	0x00018c45

00019838 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   19838:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1983a:	2300      	movs	r3, #0
   1983c:	2b00      	cmp	r3, #0
   1983e:	dd13      	ble.n	19868 <bt_smp_accept+0x30>
   19840:	4b12      	ldr	r3, [pc, #72]	; (1988c <bt_smp_accept+0x54>)
   19842:	4a13      	ldr	r2, [pc, #76]	; (19890 <bt_smp_accept+0x58>)
   19844:	1a9b      	subs	r3, r3, r2
   19846:	08db      	lsrs	r3, r3, #3
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   19848:	f04f 0200 	mov.w	r2, #0
   1984c:	2101      	movs	r1, #1
   1984e:	f361 0202 	bfi	r2, r1, #0, #3
   19852:	f36f 02c5 	bfc	r2, #3, #3
   19856:	f363 128f 	bfi	r2, r3, #6, #10
   1985a:	4601      	mov	r1, r0
   1985c:	480d      	ldr	r0, [pc, #52]	; (19894 <bt_smp_accept+0x5c>)
   1985e:	f7f8 fa43 	bl	11ce8 <log_1>

	return -ENOMEM;
   19862:	f06f 000b 	mvn.w	r0, #11
}
   19866:	bd10      	pop	{r4, pc}
		if (smp->chan.conn) {
   19868:	22e8      	movs	r2, #232	; 0xe8
   1986a:	fb02 f203 	mul.w	r2, r2, r3
   1986e:	4c0a      	ldr	r4, [pc, #40]	; (19898 <bt_smp_accept+0x60>)
   19870:	58a2      	ldr	r2, [r4, r2]
   19872:	b10a      	cbz	r2, 19878 <bt_smp_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   19874:	3301      	adds	r3, #1
   19876:	e7e1      	b.n	1983c <bt_smp_accept+0x4>
		smp->chan.ops = &ops;
   19878:	4a07      	ldr	r2, [pc, #28]	; (19898 <bt_smp_accept+0x60>)
   1987a:	20e8      	movs	r0, #232	; 0xe8
   1987c:	fb00 2303 	mla	r3, r0, r3, r2
   19880:	4a06      	ldr	r2, [pc, #24]	; (1989c <bt_smp_accept+0x64>)
   19882:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   19884:	600b      	str	r3, [r1, #0]
		return 0;
   19886:	2000      	movs	r0, #0
   19888:	e7ed      	b.n	19866 <bt_smp_accept+0x2e>
   1988a:	bf00      	nop
   1988c:	00025dd8 	.word	0x00025dd8
   19890:	00025d80 	.word	0x00025d80
   19894:	00027a68 	.word	0x00027a68
   19898:	20001aa8 	.word	0x20001aa8
   1989c:	00027a98 	.word	0x00027a98

000198a0 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   198a0:	4b03      	ldr	r3, [pc, #12]	; (198b0 <pool_id+0x10>)
   198a2:	1ac0      	subs	r0, r0, r3
   198a4:	1080      	asrs	r0, r0, #2
}
   198a6:	4b03      	ldr	r3, [pc, #12]	; (198b4 <pool_id+0x14>)
   198a8:	fb03 f000 	mul.w	r0, r3, r0
   198ac:	4770      	bx	lr
   198ae:	bf00      	nop
   198b0:	200007b4 	.word	0x200007b4
   198b4:	ba2e8ba3 	.word	0xba2e8ba3

000198b8 <net_buf_pool_get>:
}
   198b8:	222c      	movs	r2, #44	; 0x2c
   198ba:	4b02      	ldr	r3, [pc, #8]	; (198c4 <net_buf_pool_get+0xc>)
   198bc:	fb02 3000 	mla	r0, r2, r0, r3
   198c0:	4770      	bx	lr
   198c2:	bf00      	nop
   198c4:	200007b4 	.word	0x200007b4

000198c8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   198c8:	4800      	ldr	r0, [pc, #0]	; (198cc <get_hf_flags+0x4>)
   198ca:	4770      	bx	lr
   198cc:	200029d8 	.word	0x200029d8

000198d0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   198d0:	4b03      	ldr	r3, [pc, #12]	; (198e0 <get_subsys+0x10>)
   198d2:	1ac0      	subs	r0, r0, r3
   198d4:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   198d6:	4b03      	ldr	r3, [pc, #12]	; (198e4 <get_subsys+0x14>)
   198d8:	fb03 f000 	mul.w	r0, r3, r0
   198dc:	4770      	bx	lr
   198de:	bf00      	nop
   198e0:	20002998 	.word	0x20002998
   198e4:	b6db6db7 	.word	0xb6db6db7

000198e8 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   198e8:	b538      	push	{r3, r4, r5, lr}
   198ea:	4605      	mov	r5, r0
   198ec:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   198ee:	f7ff ffef 	bl	198d0 <get_subsys>
   198f2:	4601      	mov	r1, r0
   198f4:	2240      	movs	r2, #64	; 0x40
   198f6:	4803      	ldr	r0, [pc, #12]	; (19904 <onoff_stop+0x1c>)
   198f8:	f00a fae2 	bl	23ec0 <stop>
   198fc:	4601      	mov	r1, r0
	notify(mgr, res);
   198fe:	4628      	mov	r0, r5
   19900:	47a0      	blx	r4
}
   19902:	bd38      	pop	{r3, r4, r5, pc}
   19904:	00025b24 	.word	0x00025b24

00019908 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19908:	b530      	push	{r4, r5, lr}
   1990a:	b083      	sub	sp, #12
   1990c:	4605      	mov	r5, r0
   1990e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19910:	f7ff ffde 	bl	198d0 <get_subsys>
   19914:	4601      	mov	r1, r0
   19916:	2340      	movs	r3, #64	; 0x40
   19918:	9300      	str	r3, [sp, #0]
   1991a:	4623      	mov	r3, r4
   1991c:	4a05      	ldr	r2, [pc, #20]	; (19934 <onoff_start+0x2c>)
   1991e:	4806      	ldr	r0, [pc, #24]	; (19938 <onoff_start+0x30>)
   19920:	f00a fae8 	bl	23ef4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   19924:	1e01      	subs	r1, r0, #0
   19926:	db01      	blt.n	1992c <onoff_start+0x24>
		notify(mgr, err);
	}
}
   19928:	b003      	add	sp, #12
   1992a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1992c:	4628      	mov	r0, r5
   1992e:	47a0      	blx	r4
}
   19930:	e7fa      	b.n	19928 <onoff_start+0x20>
   19932:	bf00      	nop
   19934:	00023f3d 	.word	0x00023f3d
   19938:	00025b24 	.word	0x00025b24

0001993c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1993c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1993e:	b110      	cbz	r0, 19946 <clock_event_handler+0xa>
   19940:	2801      	cmp	r0, #1
   19942:	d00d      	beq.n	19960 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   19944:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   19946:	2100      	movs	r1, #0
   19948:	4808      	ldr	r0, [pc, #32]	; (1996c <clock_event_handler+0x30>)
   1994a:	f00a fa40 	bl	23dce <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1994e:	6883      	ldr	r3, [r0, #8]
   19950:	f013 0f07 	tst.w	r3, #7
   19954:	d1f6      	bne.n	19944 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   19956:	2100      	movs	r1, #0
   19958:	4804      	ldr	r0, [pc, #16]	; (1996c <clock_event_handler+0x30>)
   1995a:	f00a fa9f 	bl	23e9c <clkstarted_handle>
   1995e:	e7f1      	b.n	19944 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   19960:	2101      	movs	r1, #1
   19962:	4802      	ldr	r0, [pc, #8]	; (1996c <clock_event_handler+0x30>)
   19964:	f00a fa9a 	bl	23e9c <clkstarted_handle>
}
   19968:	e7ec      	b.n	19944 <clock_event_handler+0x8>
   1996a:	bf00      	nop
   1996c:	00025b24 	.word	0x00025b24

00019970 <generic_hfclk_start>:
{
   19970:	b510      	push	{r4, lr}
	__asm__ volatile(
   19972:	f04f 0340 	mov.w	r3, #64	; 0x40
   19976:	f3ef 8411 	mrs	r4, BASEPRI
   1997a:	f383 8812 	msr	BASEPRI_MAX, r3
   1997e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   19982:	4a13      	ldr	r2, [pc, #76]	; (199d0 <generic_hfclk_start+0x60>)
   19984:	6813      	ldr	r3, [r2, #0]
   19986:	f043 0302 	orr.w	r3, r3, #2
   1998a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1998c:	f013 0f01 	tst.w	r3, #1
   19990:	d108      	bne.n	199a4 <generic_hfclk_start+0x34>
	bool already_started = false;
   19992:	2300      	movs	r3, #0
	__asm__ volatile(
   19994:	f384 8811 	msr	BASEPRI, r4
   19998:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1999c:	b99b      	cbnz	r3, 199c6 <generic_hfclk_start+0x56>
	hfclk_start();
   1999e:	f00a fad5 	bl	23f4c <hfclk_start>
}
   199a2:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   199a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   199a8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   199ac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   199b0:	f012 0f01 	tst.w	r2, #1
   199b4:	d101      	bne.n	199ba <generic_hfclk_start+0x4a>
	bool already_started = false;
   199b6:	2300      	movs	r3, #0
   199b8:	e7ec      	b.n	19994 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   199ba:	f7ff ff85 	bl	198c8 <get_hf_flags>
   199be:	f00a fa5a 	bl	23e76 <set_on_state>
			already_started = true;
   199c2:	2301      	movs	r3, #1
   199c4:	e7e6      	b.n	19994 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   199c6:	2100      	movs	r1, #0
   199c8:	4802      	ldr	r0, [pc, #8]	; (199d4 <generic_hfclk_start+0x64>)
   199ca:	f00a fa67 	bl	23e9c <clkstarted_handle>
		return;
   199ce:	e7e8      	b.n	199a2 <generic_hfclk_start+0x32>
   199d0:	200029e8 	.word	0x200029e8
   199d4:	00025b24 	.word	0x00025b24

000199d8 <generic_hfclk_stop>:
{
   199d8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   199da:	4b0a      	ldr	r3, [pc, #40]	; (19a04 <generic_hfclk_stop+0x2c>)
   199dc:	f3bf 8f5b 	dmb	ish
   199e0:	e853 2f00 	ldrex	r2, [r3]
   199e4:	f022 0102 	bic.w	r1, r2, #2
   199e8:	e843 1000 	strex	r0, r1, [r3]
   199ec:	2800      	cmp	r0, #0
   199ee:	d1f7      	bne.n	199e0 <generic_hfclk_stop+0x8>
   199f0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   199f4:	f012 0f01 	tst.w	r2, #1
   199f8:	d000      	beq.n	199fc <generic_hfclk_stop+0x24>
}
   199fa:	bd08      	pop	{r3, pc}
	hfclk_stop();
   199fc:	f00a fab0 	bl	23f60 <hfclk_stop>
   19a00:	e7fb      	b.n	199fa <generic_hfclk_stop+0x22>
   19a02:	bf00      	nop
   19a04:	200029e8 	.word	0x200029e8

00019a08 <api_blocking_start>:
{
   19a08:	b500      	push	{lr}
   19a0a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19a0c:	f8cd d000 	str.w	sp, [sp]
   19a10:	f8cd d004 	str.w	sp, [sp, #4]
   19a14:	2300      	movs	r3, #0
   19a16:	9302      	str	r3, [sp, #8]
   19a18:	2301      	movs	r3, #1
   19a1a:	9303      	str	r3, [sp, #12]
   19a1c:	ab04      	add	r3, sp, #16
   19a1e:	9304      	str	r3, [sp, #16]
   19a20:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19a22:	466b      	mov	r3, sp
   19a24:	4a06      	ldr	r2, [pc, #24]	; (19a40 <api_blocking_start+0x38>)
   19a26:	f00a fa81 	bl	23f2c <api_start>
	if (err < 0) {
   19a2a:	2800      	cmp	r0, #0
   19a2c:	db05      	blt.n	19a3a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   19a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19a32:	2300      	movs	r3, #0
   19a34:	4668      	mov	r0, sp
   19a36:	f003 f961 	bl	1ccfc <z_impl_k_sem_take>
}
   19a3a:	b007      	add	sp, #28
   19a3c:	f85d fb04 	ldr.w	pc, [sp], #4
   19a40:	00023f75 	.word	0x00023f75

00019a44 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   19a44:	b570      	push	{r4, r5, r6, lr}
   19a46:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19a48:	2200      	movs	r2, #0
   19a4a:	2101      	movs	r1, #1
   19a4c:	4610      	mov	r0, r2
   19a4e:	f7f9 fc0d 	bl	1326c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   19a52:	2000      	movs	r0, #0
   19a54:	f7f9 fbd8 	bl	13208 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   19a58:	4811      	ldr	r0, [pc, #68]	; (19aa0 <clk_init+0x5c>)
   19a5a:	f001 fe2f 	bl	1b6bc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   19a5e:	4b11      	ldr	r3, [pc, #68]	; (19aa4 <clk_init+0x60>)
   19a60:	4298      	cmp	r0, r3
   19a62:	d11a      	bne.n	19a9a <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   19a64:	f00b f8ea 	bl	24c3c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   19a68:	2400      	movs	r4, #0
   19a6a:	e003      	b.n	19a74 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19a6c:	2301      	movs	r3, #1
   19a6e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   19a70:	441c      	add	r4, r3
   19a72:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   19a74:	2c01      	cmp	r4, #1
   19a76:	d80e      	bhi.n	19a96 <clk_init+0x52>
						get_sub_data(dev, i);
   19a78:	4621      	mov	r1, r4
   19a7a:	4630      	mov	r0, r6
   19a7c:	f00a f9a7 	bl	23dce <get_sub_data>
   19a80:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   19a82:	4621      	mov	r1, r4
   19a84:	4630      	mov	r0, r6
   19a86:	f00a f9af 	bl	23de8 <get_onoff_manager>
   19a8a:	4907      	ldr	r1, [pc, #28]	; (19aa8 <clk_init+0x64>)
   19a8c:	f007 fa67 	bl	20f5e <onoff_manager_init>
		if (err < 0) {
   19a90:	2800      	cmp	r0, #0
   19a92:	daeb      	bge.n	19a6c <clk_init+0x28>
   19a94:	e000      	b.n	19a98 <clk_init+0x54>
	}

	return 0;
   19a96:	2000      	movs	r0, #0
}
   19a98:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   19a9a:	f06f 0004 	mvn.w	r0, #4
   19a9e:	e7fb      	b.n	19a98 <clk_init+0x54>
   19aa0:	0001993d 	.word	0x0001993d
   19aa4:	0bad0000 	.word	0x0bad0000
   19aa8:	00027b28 	.word	0x00027b28

00019aac <lfclk_spinwait>:
{
   19aac:	b570      	push	{r4, r5, r6, lr}
   19aae:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   19ab0:	2801      	cmp	r0, #1
   19ab2:	d107      	bne.n	19ac4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   19ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19ab8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   19abc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   19ac0:	2b01      	cmp	r3, #1
   19ac2:	d058      	beq.n	19b76 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19ac4:	f00b f9d1 	bl	24e6a <k_is_in_isr>
   19ac8:	b928      	cbnz	r0, 19ad6 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   19aca:	4b2e      	ldr	r3, [pc, #184]	; (19b84 <lfclk_spinwait+0xd8>)
   19acc:	781b      	ldrb	r3, [r3, #0]
   19ace:	2b00      	cmp	r3, #0
   19ad0:	d041      	beq.n	19b56 <lfclk_spinwait+0xaa>
   19ad2:	2300      	movs	r3, #0
   19ad4:	e000      	b.n	19ad8 <lfclk_spinwait+0x2c>
   19ad6:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   19ad8:	461c      	mov	r4, r3
   19ada:	2b00      	cmp	r3, #0
   19adc:	d03d      	beq.n	19b5a <lfclk_spinwait+0xae>
	__asm__ volatile(
   19ade:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ae2:	f3ef 8611 	mrs	r6, BASEPRI
   19ae6:	f383 8812 	msr	BASEPRI_MAX, r3
   19aea:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   19aee:	b924      	cbnz	r4, 19afa <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   19af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19af4:	2202      	movs	r2, #2
   19af6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19afe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   19b02:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19b06:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   19b0a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   19b0e:	d12b      	bne.n	19b68 <lfclk_spinwait+0xbc>
    return false;
   19b10:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   19b12:	b11a      	cbz	r2, 19b1c <lfclk_spinwait+0x70>
   19b14:	2b01      	cmp	r3, #1
   19b16:	d029      	beq.n	19b6c <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   19b18:	2d01      	cmp	r5, #1
   19b1a:	d027      	beq.n	19b6c <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19b1c:	b1fc      	cbz	r4, 19b5e <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   19b1e:	4630      	mov	r0, r6
   19b20:	f7f9 fb1a 	bl	13158 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   19b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19b28:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19b2c:	2b00      	cmp	r3, #0
   19b2e:	d1e4      	bne.n	19afa <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19b30:	4b15      	ldr	r3, [pc, #84]	; (19b88 <lfclk_spinwait+0xdc>)
   19b32:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   19b34:	2b00      	cmp	r3, #0
   19b36:	d0e0      	beq.n	19afa <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19b38:	4b13      	ldr	r3, [pc, #76]	; (19b88 <lfclk_spinwait+0xdc>)
   19b3a:	2200      	movs	r2, #0
   19b3c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   19b3e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   19b40:	2301      	movs	r3, #1
   19b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19b46:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19b4a:	4a10      	ldr	r2, [pc, #64]	; (19b8c <lfclk_spinwait+0xe0>)
   19b4c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19b50:	4a0f      	ldr	r2, [pc, #60]	; (19b90 <lfclk_spinwait+0xe4>)
   19b52:	6013      	str	r3, [r2, #0]
}
   19b54:	e7d1      	b.n	19afa <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19b56:	2301      	movs	r3, #1
   19b58:	e7be      	b.n	19ad8 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   19b5a:	2600      	movs	r6, #0
   19b5c:	e7c7      	b.n	19aee <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   19b5e:	2021      	movs	r0, #33	; 0x21
   19b60:	2100      	movs	r1, #0
   19b62:	f003 fe53 	bl	1d80c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19b66:	e7dd      	b.n	19b24 <lfclk_spinwait+0x78>
                return true;
   19b68:	2201      	movs	r2, #1
   19b6a:	e7d2      	b.n	19b12 <lfclk_spinwait+0x66>
	if (isr_mode) {
   19b6c:	b124      	cbz	r4, 19b78 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   19b6e:	f386 8811 	msr	BASEPRI, r6
   19b72:	f3bf 8f6f 	isb	sy
}
   19b76:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   19b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19b7c:	2202      	movs	r2, #2
   19b7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19b82:	e7f8      	b.n	19b76 <lfclk_spinwait+0xca>
   19b84:	20003a0c 	.word	0x20003a0c
   19b88:	40000104 	.word	0x40000104
   19b8c:	e000e100 	.word	0xe000e100
   19b90:	40000008 	.word	0x40000008

00019b94 <z_nrf_clock_control_lf_on>:
{
   19b94:	b510      	push	{r4, lr}
   19b96:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19b98:	4b10      	ldr	r3, [pc, #64]	; (19bdc <z_nrf_clock_control_lf_on+0x48>)
   19b9a:	2101      	movs	r1, #1
   19b9c:	f3bf 8f5b 	dmb	ish
   19ba0:	e853 2f00 	ldrex	r2, [r3]
   19ba4:	e843 1000 	strex	r0, r1, [r3]
   19ba8:	2800      	cmp	r0, #0
   19baa:	d1f9      	bne.n	19ba0 <z_nrf_clock_control_lf_on+0xc>
   19bac:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   19bb0:	b11a      	cbz	r2, 19bba <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   19bb2:	1e63      	subs	r3, r4, #1
   19bb4:	2b01      	cmp	r3, #1
   19bb6:	d90c      	bls.n	19bd2 <z_nrf_clock_control_lf_on+0x3e>
}
   19bb8:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   19bba:	4809      	ldr	r0, [pc, #36]	; (19be0 <z_nrf_clock_control_lf_on+0x4c>)
   19bbc:	f00a f914 	bl	23de8 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19bc0:	4908      	ldr	r1, [pc, #32]	; (19be4 <z_nrf_clock_control_lf_on+0x50>)
   19bc2:	2300      	movs	r3, #0
   19bc4:	604b      	str	r3, [r1, #4]
   19bc6:	60cb      	str	r3, [r1, #12]
   19bc8:	2301      	movs	r3, #1
   19bca:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   19bcc:	f007 f9e3 	bl	20f96 <onoff_request>
   19bd0:	e7ef      	b.n	19bb2 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   19bd2:	4620      	mov	r0, r4
   19bd4:	f7ff ff6a 	bl	19aac <lfclk_spinwait>
		break;
   19bd8:	e7ee      	b.n	19bb8 <z_nrf_clock_control_lf_on+0x24>
   19bda:	bf00      	nop
   19bdc:	200029ec 	.word	0x200029ec
   19be0:	00025b24 	.word	0x00025b24
   19be4:	20002988 	.word	0x20002988

00019be8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   19be8:	b510      	push	{r4, lr}
   19bea:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   19bec:	280a      	cmp	r0, #10
   19bee:	d007      	beq.n	19c00 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   19bf0:	4b07      	ldr	r3, [pc, #28]	; (19c10 <console_out+0x28>)
   19bf2:	6818      	ldr	r0, [r3, #0]
   19bf4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   19bf6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   19bf8:	685b      	ldr	r3, [r3, #4]
   19bfa:	4798      	blx	r3

	return c;
}
   19bfc:	4620      	mov	r0, r4
   19bfe:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   19c00:	4b03      	ldr	r3, [pc, #12]	; (19c10 <console_out+0x28>)
   19c02:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   19c04:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   19c06:	685b      	ldr	r3, [r3, #4]
   19c08:	210d      	movs	r1, #13
   19c0a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   19c0c:	e7f0      	b.n	19bf0 <console_out+0x8>
   19c0e:	bf00      	nop
   19c10:	200029f0 	.word	0x200029f0

00019c14 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   19c14:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   19c16:	4c04      	ldr	r4, [pc, #16]	; (19c28 <uart_console_hook_install+0x14>)
   19c18:	4620      	mov	r0, r4
   19c1a:	f7fa f9a5 	bl	13f68 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   19c1e:	4620      	mov	r0, r4
   19c20:	f7f6 ff1e 	bl	10a60 <__printk_hook_install>
#endif
}
   19c24:	bd10      	pop	{r4, pc}
   19c26:	bf00      	nop
   19c28:	00019be9 	.word	0x00019be9

00019c2c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   19c2c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   19c2e:	4806      	ldr	r0, [pc, #24]	; (19c48 <uart_console_init+0x1c>)
   19c30:	4b06      	ldr	r3, [pc, #24]	; (19c4c <uart_console_init+0x20>)
   19c32:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   19c34:	f00b f839 	bl	24caa <z_device_ready>
   19c38:	b118      	cbz	r0, 19c42 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   19c3a:	f7ff ffeb 	bl	19c14 <uart_console_hook_install>

	return 0;
   19c3e:	2000      	movs	r0, #0
}
   19c40:	bd08      	pop	{r3, pc}
		return -ENODEV;
   19c42:	f06f 0012 	mvn.w	r0, #18
   19c46:	e7fb      	b.n	19c40 <uart_console_init+0x14>
   19c48:	00025bb4 	.word	0x00025bb4
   19c4c:	200029f0 	.word	0x200029f0

00019c50 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19c50:	4b1f      	ldr	r3, [pc, #124]	; (19cd0 <get_drive+0x80>)
   19c52:	4003      	ands	r3, r0
   19c54:	4a1f      	ldr	r2, [pc, #124]	; (19cd4 <get_drive+0x84>)
   19c56:	4293      	cmp	r3, r2
   19c58:	d032      	beq.n	19cc0 <get_drive+0x70>
   19c5a:	d816      	bhi.n	19c8a <get_drive+0x3a>
   19c5c:	2b06      	cmp	r3, #6
   19c5e:	d02b      	beq.n	19cb8 <get_drive+0x68>
   19c60:	d906      	bls.n	19c70 <get_drive+0x20>
   19c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19c66:	d10d      	bne.n	19c84 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   19c68:	2301      	movs	r3, #1
   19c6a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19c6c:	2000      	movs	r0, #0
		break;
   19c6e:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19c70:	b1fb      	cbz	r3, 19cb2 <get_drive+0x62>
   19c72:	2b02      	cmp	r3, #2
   19c74:	d103      	bne.n	19c7e <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   19c76:	2304      	movs	r3, #4
   19c78:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19c7a:	2000      	movs	r0, #0
		break;
   19c7c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19c7e:	f06f 0015 	mvn.w	r0, #21
   19c82:	4770      	bx	lr
   19c84:	f06f 0015 	mvn.w	r0, #21
   19c88:	4770      	bx	lr
   19c8a:	4a13      	ldr	r2, [pc, #76]	; (19cd8 <get_drive+0x88>)
   19c8c:	4293      	cmp	r3, r2
   19c8e:	d01b      	beq.n	19cc8 <get_drive+0x78>
   19c90:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   19c94:	d103      	bne.n	19c9e <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   19c96:	2303      	movs	r3, #3
   19c98:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19c9a:	2000      	movs	r0, #0
		break;
   19c9c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   19ca2:	d103      	bne.n	19cac <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   19ca4:	2302      	movs	r3, #2
   19ca6:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19ca8:	2000      	movs	r0, #0
		break;
   19caa:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19cac:	f06f 0015 	mvn.w	r0, #21
   19cb0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   19cb2:	2000      	movs	r0, #0
   19cb4:	7008      	strb	r0, [r1, #0]
		break;
   19cb6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   19cb8:	2306      	movs	r3, #6
   19cba:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19cbc:	2000      	movs	r0, #0
		break;
   19cbe:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   19cc0:	2307      	movs	r3, #7
   19cc2:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19cc4:	2000      	movs	r0, #0
		break;
   19cc6:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   19cc8:	2305      	movs	r3, #5
   19cca:	700b      	strb	r3, [r1, #0]
	int err = 0;
   19ccc:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   19cce:	4770      	bx	lr
   19cd0:	00f00006 	.word	0x00f00006
   19cd4:	00100006 	.word	0x00100006
   19cd8:	00400002 	.word	0x00400002

00019cdc <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19cdc:	b128      	cbz	r0, 19cea <get_dev+0xe>
   19cde:	2801      	cmp	r0, #1
   19ce0:	d101      	bne.n	19ce6 <get_dev+0xa>
   19ce2:	4803      	ldr	r0, [pc, #12]	; (19cf0 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   19ce4:	4770      	bx	lr
	const struct device *dev = NULL;
   19ce6:	2000      	movs	r0, #0
   19ce8:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   19cea:	4802      	ldr	r0, [pc, #8]	; (19cf4 <get_dev+0x18>)
   19cec:	4770      	bx	lr
   19cee:	bf00      	nop
   19cf0:	00025b3c 	.word	0x00025b3c
   19cf4:	00025b54 	.word	0x00025b54

00019cf8 <gpio_nrfx_pin_interrupt_configure>:
{
   19cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19cfa:	b085      	sub	sp, #20
   19cfc:	460e      	mov	r6, r1
   19cfe:	4619      	mov	r1, r3
	return port->config;
   19d00:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19d02:	7b1b      	ldrb	r3, [r3, #12]
   19d04:	f006 051f 	and.w	r5, r6, #31
   19d08:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   19d0c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   19d10:	d022      	beq.n	19d58 <gpio_nrfx_pin_interrupt_configure+0x60>
   19d12:	4607      	mov	r7, r0
   19d14:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   19d16:	2300      	movs	r3, #0
   19d18:	9302      	str	r3, [sp, #8]
   19d1a:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   19d1c:	4610      	mov	r0, r2
   19d1e:	f00a f961 	bl	23fe4 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   19d22:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   19d26:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   19d28:	6899      	ldr	r1, [r3, #8]
   19d2a:	40f1      	lsrs	r1, r6
   19d2c:	f011 0f01 	tst.w	r1, #1
   19d30:	d102      	bne.n	19d38 <gpio_nrfx_pin_interrupt_configure+0x40>
   19d32:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   19d36:	d014      	beq.n	19d62 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19d38:	2300      	movs	r3, #0
   19d3a:	aa02      	add	r2, sp, #8
   19d3c:	4619      	mov	r1, r3
   19d3e:	4628      	mov	r0, r5
   19d40:	f002 f87e 	bl	1be40 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19d44:	4b1b      	ldr	r3, [pc, #108]	; (19db4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   19d46:	4298      	cmp	r0, r3
   19d48:	d131      	bne.n	19dae <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   19d4a:	2101      	movs	r1, #1
   19d4c:	4628      	mov	r0, r5
   19d4e:	f002 fa4f 	bl	1c1f0 <nrfx_gpiote_trigger_enable>
	return 0;
   19d52:	2000      	movs	r0, #0
}
   19d54:	b005      	add	sp, #20
   19d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   19d58:	4628      	mov	r0, r5
   19d5a:	f002 faad 	bl	1c2b8 <nrfx_gpiote_trigger_disable>
		return 0;
   19d5e:	2000      	movs	r0, #0
   19d60:	e7f8      	b.n	19d54 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   19d62:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   19d66:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19d68:	2a01      	cmp	r2, #1
   19d6a:	d014      	beq.n	19d96 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   19d6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19d70:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   19d78:	f013 0f01 	tst.w	r3, #1
   19d7c:	d1dc      	bne.n	19d38 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   19d7e:	f10d 0107 	add.w	r1, sp, #7
   19d82:	4628      	mov	r0, r5
   19d84:	f002 f9d8 	bl	1c138 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   19d88:	4b0b      	ldr	r3, [pc, #44]	; (19db8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   19d8a:	4298      	cmp	r0, r3
   19d8c:	d005      	beq.n	19d9a <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   19d8e:	f10d 0307 	add.w	r3, sp, #7
   19d92:	9303      	str	r3, [sp, #12]
   19d94:	e7d0      	b.n	19d38 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   19d96:	4a09      	ldr	r2, [pc, #36]	; (19dbc <gpio_nrfx_pin_interrupt_configure+0xc4>)
   19d98:	e7ea      	b.n	19d70 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   19d9a:	f10d 0007 	add.w	r0, sp, #7
   19d9e:	f002 fa1f 	bl	1c1e0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   19da2:	4b04      	ldr	r3, [pc, #16]	; (19db4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   19da4:	4298      	cmp	r0, r3
   19da6:	d0f2      	beq.n	19d8e <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   19da8:	f06f 000b 	mvn.w	r0, #11
   19dac:	e7d2      	b.n	19d54 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   19dae:	f06f 0004 	mvn.w	r0, #4
   19db2:	e7cf      	b.n	19d54 <gpio_nrfx_pin_interrupt_configure+0x5c>
   19db4:	0bad0000 	.word	0x0bad0000
   19db8:	0bad0004 	.word	0x0bad0004
   19dbc:	50000300 	.word	0x50000300

00019dc0 <pin_uninit>:
{
   19dc0:	b530      	push	{r4, r5, lr}
   19dc2:	b083      	sub	sp, #12
   19dc4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   19dc6:	f10d 0107 	add.w	r1, sp, #7
   19dca:	f002 f9b5 	bl	1c138 <nrfx_gpiote_channel_get>
   19dce:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   19dd0:	4620      	mov	r0, r4
   19dd2:	f002 faa1 	bl	1c318 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   19dd6:	4b0b      	ldr	r3, [pc, #44]	; (19e04 <pin_uninit+0x44>)
   19dd8:	4298      	cmp	r0, r3
   19dda:	d10f      	bne.n	19dfc <pin_uninit+0x3c>
	if (free_ch) {
   19ddc:	429d      	cmp	r5, r3
   19dde:	d005      	beq.n	19dec <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   19de0:	4b08      	ldr	r3, [pc, #32]	; (19e04 <pin_uninit+0x44>)
   19de2:	4298      	cmp	r0, r3
   19de4:	d107      	bne.n	19df6 <pin_uninit+0x36>
   19de6:	2000      	movs	r0, #0
}
   19de8:	b003      	add	sp, #12
   19dea:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   19dec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19df0:	f002 f9ee 	bl	1c1d0 <nrfx_gpiote_channel_free>
   19df4:	e7f4      	b.n	19de0 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   19df6:	f06f 0004 	mvn.w	r0, #4
   19dfa:	e7f5      	b.n	19de8 <pin_uninit+0x28>
		return -EIO;
   19dfc:	f06f 0004 	mvn.w	r0, #4
   19e00:	e7f2      	b.n	19de8 <pin_uninit+0x28>
   19e02:	bf00      	nop
   19e04:	0bad0000 	.word	0x0bad0000

00019e08 <gpio_nrfx_pin_configure>:
{
   19e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19e0c:	b087      	sub	sp, #28
	return port->config;
   19e0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19e12:	f898 300c 	ldrb.w	r3, [r8, #12]
   19e16:	f001 051f 	and.w	r5, r1, #31
   19e1a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   19e1e:	2a00      	cmp	r2, #0
   19e20:	d044      	beq.n	19eac <gpio_nrfx_pin_configure+0xa4>
   19e22:	460c      	mov	r4, r1
   19e24:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   19e26:	2600      	movs	r6, #0
   19e28:	9603      	str	r6, [sp, #12]
   19e2a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   19e2c:	f10d 0117 	add.w	r1, sp, #23
   19e30:	4620      	mov	r0, r4
   19e32:	f002 f981 	bl	1c138 <nrfx_gpiote_channel_get>
   19e36:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19e38:	4633      	mov	r3, r6
   19e3a:	aa03      	add	r2, sp, #12
   19e3c:	4631      	mov	r1, r6
   19e3e:	4628      	mov	r0, r5
   19e40:	f001 fffe 	bl	1be40 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19e44:	4b30      	ldr	r3, [pc, #192]	; (19f08 <gpio_nrfx_pin_configure+0x100>)
   19e46:	4298      	cmp	r0, r3
   19e48:	d15b      	bne.n	19f02 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   19e4a:	4599      	cmp	r9, r3
   19e4c:	d036      	beq.n	19ebc <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   19e4e:	f417 7f00 	tst.w	r7, #512	; 0x200
   19e52:	d043      	beq.n	19edc <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   19e54:	f10d 0103 	add.w	r1, sp, #3
   19e58:	4638      	mov	r0, r7
   19e5a:	f7ff fef9 	bl	19c50 <get_drive>
		if (rv != 0) {
   19e5e:	4606      	mov	r6, r0
   19e60:	bb40      	cbnz	r0, 19eb4 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   19e62:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19e66:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   19e6a:	f417 7f80 	tst.w	r7, #256	; 0x100
   19e6e:	bf0c      	ite	eq
   19e70:	2301      	moveq	r3, #1
   19e72:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   19e74:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   19e78:	4638      	mov	r0, r7
   19e7a:	f00a f880 	bl	23f7e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   19e7e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   19e82:	f417 6f00 	tst.w	r7, #2048	; 0x800
   19e86:	d01e      	beq.n	19ec6 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   19e88:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19e8c:	2101      	movs	r1, #1
   19e8e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   19e92:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   19e96:	2200      	movs	r2, #0
   19e98:	a901      	add	r1, sp, #4
   19e9a:	4628      	mov	r0, r5
   19e9c:	f002 f886 	bl	1bfac <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   19ea0:	4b19      	ldr	r3, [pc, #100]	; (19f08 <gpio_nrfx_pin_configure+0x100>)
   19ea2:	4298      	cmp	r0, r3
   19ea4:	d006      	beq.n	19eb4 <gpio_nrfx_pin_configure+0xac>
   19ea6:	f06f 0615 	mvn.w	r6, #21
   19eaa:	e003      	b.n	19eb4 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   19eac:	4628      	mov	r0, r5
   19eae:	f7ff ff87 	bl	19dc0 <pin_uninit>
   19eb2:	4606      	mov	r6, r0
}
   19eb4:	4630      	mov	r0, r6
   19eb6:	b007      	add	sp, #28
   19eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   19ebc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   19ec0:	f002 f986 	bl	1c1d0 <nrfx_gpiote_channel_free>
   19ec4:	e7c3      	b.n	19e4e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   19ec6:	f417 6f80 	tst.w	r7, #1024	; 0x400
   19eca:	d0e4      	beq.n	19e96 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   19ecc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   19ed0:	2301      	movs	r3, #1
   19ed2:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   19ed6:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   19eda:	e7dc      	b.n	19e96 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   19edc:	4638      	mov	r0, r7
   19ede:	f00a f84e 	bl	23f7e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   19ee2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19ee6:	2300      	movs	r3, #0
   19ee8:	461a      	mov	r2, r3
   19eea:	a902      	add	r1, sp, #8
   19eec:	4628      	mov	r0, r5
   19eee:	f001 ffa7 	bl	1be40 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   19ef2:	4b05      	ldr	r3, [pc, #20]	; (19f08 <gpio_nrfx_pin_configure+0x100>)
   19ef4:	4298      	cmp	r0, r3
   19ef6:	d101      	bne.n	19efc <gpio_nrfx_pin_configure+0xf4>
   19ef8:	2600      	movs	r6, #0
   19efa:	e7db      	b.n	19eb4 <gpio_nrfx_pin_configure+0xac>
   19efc:	f06f 0615 	mvn.w	r6, #21
   19f00:	e7d8      	b.n	19eb4 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   19f02:	f06f 0615 	mvn.w	r6, #21
   19f06:	e7d5      	b.n	19eb4 <gpio_nrfx_pin_configure+0xac>
   19f08:	0bad0000 	.word	0x0bad0000

00019f0c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   19f0c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   19f0e:	f002 f955 	bl	1c1bc <nrfx_gpiote_is_init>
   19f12:	b108      	cbz	r0, 19f18 <gpio_nrfx_init+0xc>
		return 0;
   19f14:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   19f16:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   19f18:	f002 f926 	bl	1c168 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   19f1c:	4b08      	ldr	r3, [pc, #32]	; (19f40 <gpio_nrfx_init+0x34>)
   19f1e:	4298      	cmp	r0, r3
   19f20:	d10a      	bne.n	19f38 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   19f22:	2100      	movs	r1, #0
   19f24:	4807      	ldr	r0, [pc, #28]	; (19f44 <gpio_nrfx_init+0x38>)
   19f26:	f002 f901 	bl	1c12c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19f2a:	2200      	movs	r2, #0
   19f2c:	2105      	movs	r1, #5
   19f2e:	2006      	movs	r0, #6
   19f30:	f7f9 f99c 	bl	1326c <z_arm_irq_priority_set>
	return 0;
   19f34:	2000      	movs	r0, #0
   19f36:	e7ee      	b.n	19f16 <gpio_nrfx_init+0xa>
		return -EIO;
   19f38:	f06f 0004 	mvn.w	r0, #4
   19f3c:	e7eb      	b.n	19f16 <gpio_nrfx_init+0xa>
   19f3e:	bf00      	nop
   19f40:	0bad0000 	.word	0x0bad0000
   19f44:	00024075 	.word	0x00024075

00019f48 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
   19f48:	b410      	push	{r4}
	return dev->config;
   19f4a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   19f4c:	2900      	cmp	r1, #0
   19f4e:	d17e      	bne.n	1a04e <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   19f50:	68da      	ldr	r2, [r3, #12]
   19f52:	f1b2 3fff 	cmp.w	r2, #4294967295
   19f56:	d017      	beq.n	19f88 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
   19f58:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19f5c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19f5e:	2a01      	cmp	r2, #1
   19f60:	d065      	beq.n	1a02e <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
   19f62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19f66:	2201      	movs	r2, #1
   19f68:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   19f6a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   19f6e:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   19f70:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19f74:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19f76:	2a01      	cmp	r2, #1
   19f78:	d05b      	beq.n	1a032 <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
   19f7a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19f7e:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   19f82:	2103      	movs	r1, #3
   19f84:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   19f88:	691a      	ldr	r2, [r3, #16]
   19f8a:	f1b2 3fff 	cmp.w	r2, #4294967295
   19f8e:	d00f      	beq.n	19fb0 <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   19f90:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   19f92:	2900      	cmp	r1, #0
   19f94:	d04f      	beq.n	1a036 <uarte_nrfx_pins_configure+0xee>
   19f96:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   19f98:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19f9c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19f9e:	2a01      	cmp	r2, #1
   19fa0:	d04b      	beq.n	1a03a <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
   19fa2:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19fa6:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   19fa8:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   19fac:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   19fb0:	695a      	ldr	r2, [r3, #20]
   19fb2:	f1b2 3fff 	cmp.w	r2, #4294967295
   19fb6:	d017      	beq.n	19fe8 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
   19fb8:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19fbc:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19fbe:	2a01      	cmp	r2, #1
   19fc0:	d03d      	beq.n	1a03e <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
   19fc2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19fc6:	2201      	movs	r2, #1
   19fc8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   19fca:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   19fce:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   19fd0:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19fd4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19fd6:	2a01      	cmp	r2, #1
   19fd8:	d033      	beq.n	1a042 <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
   19fda:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19fde:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   19fe2:	2103      	movs	r1, #3
   19fe4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   19fe8:	699a      	ldr	r2, [r3, #24]
   19fea:	f1b2 3fff 	cmp.w	r2, #4294967295
   19fee:	d00e      	beq.n	1a00e <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   19ff0:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   19ff2:	b341      	cbz	r1, 1a046 <uarte_nrfx_pins_configure+0xfe>
   19ff4:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   19ff6:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19ffa:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19ffc:	2a01      	cmp	r2, #1
   19ffe:	d024      	beq.n	1a04a <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
   1a000:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a004:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   1a006:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1a00a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1a00e:	681a      	ldr	r2, [r3, #0]
   1a010:	68d8      	ldr	r0, [r3, #12]
   1a012:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   1a014:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1a018:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1a01c:	681a      	ldr	r2, [r3, #0]
   1a01e:	6959      	ldr	r1, [r3, #20]
   1a020:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   1a022:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1a026:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   1a02a:	bc10      	pop	{r4}
   1a02c:	4770      	bx	lr
        case 1: return NRF_P1;
   1a02e:	482c      	ldr	r0, [pc, #176]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a030:	e799      	b.n	19f66 <uarte_nrfx_pins_configure+0x1e>
   1a032:	482b      	ldr	r0, [pc, #172]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a034:	e7a3      	b.n	19f7e <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1a036:	2000      	movs	r0, #0
   1a038:	e7ae      	b.n	19f98 <uarte_nrfx_pins_configure+0x50>
   1a03a:	4c29      	ldr	r4, [pc, #164]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a03c:	e7b3      	b.n	19fa6 <uarte_nrfx_pins_configure+0x5e>
   1a03e:	4828      	ldr	r0, [pc, #160]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a040:	e7c1      	b.n	19fc6 <uarte_nrfx_pins_configure+0x7e>
   1a042:	4827      	ldr	r0, [pc, #156]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a044:	e7cb      	b.n	19fde <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1a046:	2000      	movs	r0, #0
   1a048:	e7d5      	b.n	19ff6 <uarte_nrfx_pins_configure+0xae>
   1a04a:	4c25      	ldr	r4, [pc, #148]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a04c:	e7da      	b.n	1a004 <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1a04e:	68da      	ldr	r2, [r3, #12]
   1a050:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a054:	d00b      	beq.n	1a06e <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
   1a056:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1a05a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a05c:	2a01      	cmp	r2, #1
   1a05e:	d037      	beq.n	1a0d0 <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
   1a060:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a064:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1a068:	2102      	movs	r1, #2
   1a06a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1a06e:	691a      	ldr	r2, [r3, #16]
   1a070:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a074:	d00b      	beq.n	1a08e <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
   1a076:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1a07a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a07c:	2a01      	cmp	r2, #1
   1a07e:	d029      	beq.n	1a0d4 <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
   1a080:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a084:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1a088:	2102      	movs	r1, #2
   1a08a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1a08e:	695a      	ldr	r2, [r3, #20]
   1a090:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a094:	d00b      	beq.n	1a0ae <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
   1a096:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1a09a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a09c:	2a01      	cmp	r2, #1
   1a09e:	d01b      	beq.n	1a0d8 <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
   1a0a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a0a4:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1a0a8:	2102      	movs	r1, #2
   1a0aa:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1a0ae:	699a      	ldr	r2, [r3, #24]
   1a0b0:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a0b4:	d0ab      	beq.n	1a00e <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
   1a0b6:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1a0ba:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a0bc:	2a01      	cmp	r2, #1
   1a0be:	d00d      	beq.n	1a0dc <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
   1a0c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a0c4:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1a0c8:	2102      	movs	r1, #2
   1a0ca:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   1a0ce:	e79e      	b.n	1a00e <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
   1a0d0:	4803      	ldr	r0, [pc, #12]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a0d2:	e7c7      	b.n	1a064 <uarte_nrfx_pins_configure+0x11c>
   1a0d4:	4802      	ldr	r0, [pc, #8]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a0d6:	e7d5      	b.n	1a084 <uarte_nrfx_pins_configure+0x13c>
   1a0d8:	4801      	ldr	r0, [pc, #4]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a0da:	e7e3      	b.n	1a0a4 <uarte_nrfx_pins_configure+0x15c>
   1a0dc:	4800      	ldr	r0, [pc, #0]	; (1a0e0 <uarte_nrfx_pins_configure+0x198>)
   1a0de:	e7f1      	b.n	1a0c4 <uarte_nrfx_pins_configure+0x17c>
   1a0e0:	50000300 	.word	0x50000300

0001a0e4 <baudrate_set>:
	return dev->config;
   1a0e4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1a0e6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1a0e8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   1a0ec:	d06f      	beq.n	1a1ce <baudrate_set+0xea>
   1a0ee:	d83a      	bhi.n	1a166 <baudrate_set+0x82>
   1a0f0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1a0f4:	d06e      	beq.n	1a1d4 <baudrate_set+0xf0>
   1a0f6:	d90a      	bls.n	1a10e <baudrate_set+0x2a>
   1a0f8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   1a0fc:	d075      	beq.n	1a1ea <baudrate_set+0x106>
   1a0fe:	d924      	bls.n	1a14a <baudrate_set+0x66>
   1a100:	f647 2312 	movw	r3, #31250	; 0x7a12
   1a104:	4299      	cmp	r1, r3
   1a106:	d12b      	bne.n	1a160 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1a108:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a10c:	e013      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a10e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1a112:	d061      	beq.n	1a1d8 <baudrate_set+0xf4>
   1a114:	d907      	bls.n	1a126 <baudrate_set+0x42>
   1a116:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   1a11a:	d063      	beq.n	1a1e4 <baudrate_set+0x100>
   1a11c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1a120:	d110      	bne.n	1a144 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1a122:	4b3c      	ldr	r3, [pc, #240]	; (1a214 <baudrate_set+0x130>)
   1a124:	e007      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a126:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1a12a:	d058      	beq.n	1a1de <baudrate_set+0xfa>
   1a12c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1a130:	d105      	bne.n	1a13e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1a132:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a136:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   1a13a:	2000      	movs	r0, #0
   1a13c:	4770      	bx	lr
	switch (baudrate) {
   1a13e:	f06f 0015 	mvn.w	r0, #21
   1a142:	4770      	bx	lr
   1a144:	f06f 0015 	mvn.w	r0, #21
   1a148:	4770      	bx	lr
   1a14a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1a14e:	d04e      	beq.n	1a1ee <baudrate_set+0x10a>
   1a150:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1a154:	d101      	bne.n	1a15a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1a156:	4b30      	ldr	r3, [pc, #192]	; (1a218 <baudrate_set+0x134>)
   1a158:	e7ed      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a15a:	f06f 0015 	mvn.w	r0, #21
   1a15e:	4770      	bx	lr
   1a160:	f06f 0015 	mvn.w	r0, #21
   1a164:	4770      	bx	lr
   1a166:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1a16a:	d042      	beq.n	1a1f2 <baudrate_set+0x10e>
   1a16c:	d909      	bls.n	1a182 <baudrate_set+0x9e>
   1a16e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1a172:	d046      	beq.n	1a202 <baudrate_set+0x11e>
   1a174:	d91f      	bls.n	1a1b6 <baudrate_set+0xd2>
   1a176:	4b29      	ldr	r3, [pc, #164]	; (1a21c <baudrate_set+0x138>)
   1a178:	4299      	cmp	r1, r3
   1a17a:	d148      	bne.n	1a20e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1a17c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a180:	e7d9      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a182:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1a186:	d037      	beq.n	1a1f8 <baudrate_set+0x114>
   1a188:	d905      	bls.n	1a196 <baudrate_set+0xb2>
   1a18a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1a18e:	d10f      	bne.n	1a1b0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1a190:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1a194:	e7cf      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a196:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1a19a:	4299      	cmp	r1, r3
   1a19c:	d02e      	beq.n	1a1fc <baudrate_set+0x118>
   1a19e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1a1a2:	d102      	bne.n	1a1aa <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1a1a4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1a1a8:	e7c5      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a1aa:	f06f 0015 	mvn.w	r0, #21
   1a1ae:	4770      	bx	lr
   1a1b0:	f06f 0015 	mvn.w	r0, #21
   1a1b4:	4770      	bx	lr
   1a1b6:	4b1a      	ldr	r3, [pc, #104]	; (1a220 <baudrate_set+0x13c>)
   1a1b8:	4299      	cmp	r1, r3
   1a1ba:	d025      	beq.n	1a208 <baudrate_set+0x124>
   1a1bc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1a1c0:	d102      	bne.n	1a1c8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1a1c2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1a1c6:	e7b6      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a1c8:	f06f 0015 	mvn.w	r0, #21
   1a1cc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1a1ce:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1a1d2:	e7b0      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1a1d4:	4b13      	ldr	r3, [pc, #76]	; (1a224 <baudrate_set+0x140>)
   1a1d6:	e7ae      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1a1d8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a1dc:	e7ab      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a1de:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a1e2:	e7a8      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1a1e4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a1e8:	e7a5      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1a1ea:	4b0f      	ldr	r3, [pc, #60]	; (1a228 <baudrate_set+0x144>)
   1a1ec:	e7a3      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1a1ee:	4b0f      	ldr	r3, [pc, #60]	; (1a22c <baudrate_set+0x148>)
   1a1f0:	e7a1      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1a1f2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1a1f6:	e79e      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1a1f8:	4b0d      	ldr	r3, [pc, #52]	; (1a230 <baudrate_set+0x14c>)
   1a1fa:	e79c      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1a1fc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a200:	e799      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1a202:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1a206:	e796      	b.n	1a136 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1a208:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a20c:	e793      	b.n	1a136 <baudrate_set+0x52>
	switch (baudrate) {
   1a20e:	f06f 0015 	mvn.w	r0, #21
}
   1a212:	4770      	bx	lr
   1a214:	0013b000 	.word	0x0013b000
   1a218:	004ea000 	.word	0x004ea000
   1a21c:	000f4240 	.word	0x000f4240
   1a220:	0003d090 	.word	0x0003d090
   1a224:	00275000 	.word	0x00275000
   1a228:	0075c000 	.word	0x0075c000
   1a22c:	003af000 	.word	0x003af000
   1a230:	013a9000 	.word	0x013a9000

0001a234 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a238:	4605      	mov	r5, r0
   1a23a:	460f      	mov	r7, r1
	return dev->data;
   1a23c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a240:	f00a fe13 	bl	24e6a <k_is_in_isr>
   1a244:	b920      	cbnz	r0, 1a250 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   1a246:	4b16      	ldr	r3, [pc, #88]	; (1a2a0 <uarte_nrfx_poll_out+0x6c>)
   1a248:	781b      	ldrb	r3, [r3, #0]
   1a24a:	b1ab      	cbz	r3, 1a278 <uarte_nrfx_poll_out+0x44>
   1a24c:	2300      	movs	r3, #0
   1a24e:	e000      	b.n	1a252 <uarte_nrfx_poll_out+0x1e>
   1a250:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1a252:	b19b      	cbz	r3, 1a27c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   1a254:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a258:	f3ef 8411 	mrs	r4, BASEPRI
   1a25c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a260:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   1a264:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   1a266:	4628      	mov	r0, r5
   1a268:	f009 ffce 	bl	24208 <is_tx_ready>
   1a26c:	b950      	cbnz	r0, 1a284 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   1a26e:	f384 8811 	msr	BASEPRI, r4
   1a272:	f3bf 8f6f 	isb	sy
}
   1a276:	e7ed      	b.n	1a254 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a278:	2301      	movs	r3, #1
   1a27a:	e7ea      	b.n	1a252 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1a27c:	4628      	mov	r0, r5
   1a27e:	f00a f812 	bl	242a6 <wait_tx_ready>
   1a282:	4606      	mov	r6, r0
	}

	data->char_out = c;
   1a284:	4641      	mov	r1, r8
   1a286:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   1a28a:	2201      	movs	r2, #1
   1a28c:	4628      	mov	r0, r5
   1a28e:	f009 ffd5 	bl	2423c <tx_start>
	__asm__ volatile(
   1a292:	f386 8811 	msr	BASEPRI, r6
   1a296:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1a29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a29e:	bf00      	nop
   1a2a0:	20003a0c 	.word	0x20003a0c

0001a2a4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1a2a4:	b538      	push	{r3, r4, r5, lr}
   1a2a6:	4604      	mov	r4, r0
   1a2a8:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1a2aa:	f101 0012 	add.w	r0, r1, #18
   1a2ae:	f002 f887 	bl	1c3c0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1a2b2:	4b14      	ldr	r3, [pc, #80]	; (1a304 <endtx_stoptx_ppi_init+0x60>)
   1a2b4:	4298      	cmp	r0, r3
   1a2b6:	d111      	bne.n	1a2dc <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1a2b8:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1a2ba:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1a2be:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a2c0:	4a11      	ldr	r2, [pc, #68]	; (1a308 <endtx_stoptx_ppi_init+0x64>)
   1a2c2:	33a2      	adds	r3, #162	; 0xa2
   1a2c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a2c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a2cc:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1a2ce:	7ca9      	ldrb	r1, [r5, #18]
   1a2d0:	2301      	movs	r3, #1
   1a2d2:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1a2d4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1a2d8:	2000      	movs	r0, #0
}
   1a2da:	bd38      	pop	{r3, r4, r5, pc}
   1a2dc:	4b0b      	ldr	r3, [pc, #44]	; (1a30c <endtx_stoptx_ppi_init+0x68>)
   1a2de:	4a0c      	ldr	r2, [pc, #48]	; (1a310 <endtx_stoptx_ppi_init+0x6c>)
   1a2e0:	1a9b      	subs	r3, r3, r2
   1a2e2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   1a2e4:	f04f 0100 	mov.w	r1, #0
   1a2e8:	2201      	movs	r2, #1
   1a2ea:	f362 0102 	bfi	r1, r2, #0, #3
   1a2ee:	f36f 01c5 	bfc	r1, #3, #3
   1a2f2:	f363 118f 	bfi	r1, r3, #6, #10
   1a2f6:	4807      	ldr	r0, [pc, #28]	; (1a314 <endtx_stoptx_ppi_init+0x70>)
   1a2f8:	f7f7 fdac 	bl	11e54 <log_0>
		return -EIO;
   1a2fc:	f06f 0004 	mvn.w	r0, #4
   1a300:	e7eb      	b.n	1a2da <endtx_stoptx_ppi_init+0x36>
   1a302:	bf00      	nop
   1a304:	0bad0000 	.word	0x0bad0000
   1a308:	4001f000 	.word	0x4001f000
   1a30c:	00025e60 	.word	0x00025e60
   1a310:	00025d80 	.word	0x00025d80
   1a314:	00027b80 	.word	0x00027b80

0001a318 <random_byte_get>:
	__asm__ volatile(
   1a318:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a31c:	f3ef 8211 	mrs	r2, BASEPRI
   1a320:	f383 8812 	msr	BASEPRI_MAX, r3
   1a324:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a328:	4b09      	ldr	r3, [pc, #36]	; (1a350 <random_byte_get+0x38>)
   1a32a:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1a32c:	b16b      	cbz	r3, 1a34a <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1a32e:	4b09      	ldr	r3, [pc, #36]	; (1a354 <random_byte_get+0x3c>)
   1a330:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1a334:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a336:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1a33a:	2100      	movs	r1, #0
   1a33c:	6019      	str	r1, [r3, #0]
   1a33e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1a340:	f382 8811 	msr	BASEPRI, r2
   1a344:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1a348:	4770      	bx	lr
	int retval = -EAGAIN;
   1a34a:	f06f 000a 	mvn.w	r0, #10
   1a34e:	e7f7      	b.n	1a340 <random_byte_get+0x28>
   1a350:	4000d100 	.word	0x4000d100
   1a354:	4000d000 	.word	0x4000d000

0001a358 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a35c:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1a35e:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1a362:	78c5      	ldrb	r5, [r0, #3]
   1a364:	462f      	mov	r7, r5
	__asm__ volatile(
   1a366:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a36a:	f3ef 8811 	mrs	r8, BASEPRI
   1a36e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a372:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1a376:	7800      	ldrb	r0, [r0, #0]
   1a378:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1a37a:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1a37e:	ebac 0c00 	sub.w	ip, ip, r0
   1a382:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   1a386:	4562      	cmp	r2, ip
   1a388:	d901      	bls.n	1a38e <rng_pool_get+0x36>
		len = available;
   1a38a:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1a38e:	1883      	adds	r3, r0, r2
   1a390:	402b      	ands	r3, r5
   1a392:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   1a394:	f388 8811 	msr	BASEPRI, r8
   1a398:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1a39c:	460b      	mov	r3, r1
}
   1a39e:	e006      	b.n	1a3ae <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1a3a0:	1932      	adds	r2, r6, r4
   1a3a2:	7952      	ldrb	r2, [r2, #5]
   1a3a4:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   1a3a8:	3401      	adds	r4, #1
   1a3aa:	403c      	ands	r4, r7
	while (likely(len--)) {
   1a3ac:	462a      	mov	r2, r5
   1a3ae:	1e55      	subs	r5, r2, #1
   1a3b0:	b2ad      	uxth	r5, r5
   1a3b2:	2a00      	cmp	r2, #0
   1a3b4:	d1f4      	bne.n	1a3a0 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1a3b6:	4570      	cmp	r0, lr
   1a3b8:	d10d      	bne.n	1a3d6 <rng_pool_get+0x7e>
	__asm__ volatile(
   1a3ba:	f04f 0040 	mov.w	r0, #64	; 0x40
   1a3be:	f3ef 8211 	mrs	r2, BASEPRI
   1a3c2:	f380 8812 	msr	BASEPRI_MAX, r0
   1a3c6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1a3ca:	7830      	ldrb	r0, [r6, #0]
   1a3cc:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1a3ce:	f382 8811 	msr	BASEPRI, r2
   1a3d2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1a3d6:	1a5b      	subs	r3, r3, r1
   1a3d8:	b298      	uxth	r0, r3
	available = available - len;
   1a3da:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   1a3de:	7933      	ldrb	r3, [r6, #4]
   1a3e0:	4563      	cmp	r3, ip
   1a3e2:	d302      	bcc.n	1a3ea <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a3e4:	4b02      	ldr	r3, [pc, #8]	; (1a3f0 <rng_pool_get+0x98>)
   1a3e6:	2201      	movs	r2, #1
   1a3e8:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1a3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3ee:	bf00      	nop
   1a3f0:	4000d000 	.word	0x4000d000

0001a3f4 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a3f6:	460d      	mov	r5, r1
   1a3f8:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1a3fa:	f013 0f01 	tst.w	r3, #1
   1a3fe:	d103      	bne.n	1a408 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1a400:	4822      	ldr	r0, [pc, #136]	; (1a48c <entropy_nrf5_get_entropy_isr+0x98>)
   1a402:	f7ff ffa9 	bl	1a358 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1a408:	b90a      	cbnz	r2, 1a40e <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   1a40a:	4620      	mov	r0, r4
   1a40c:	e7fb      	b.n	1a406 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   1a40e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a412:	f3ef 8611 	mrs	r6, BASEPRI
   1a416:	f383 8812 	msr	BASEPRI_MAX, r3
   1a41a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1a41e:	200d      	movs	r0, #13
   1a420:	f7f8 ff16 	bl	13250 <arch_irq_is_enabled>
   1a424:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1a426:	200d      	movs	r0, #13
   1a428:	f7f8 fefe 	bl	13228 <arch_irq_disable>
	__asm__ volatile(
   1a42c:	f386 8811 	msr	BASEPRI, r6
   1a430:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a434:	4b16      	ldr	r3, [pc, #88]	; (1a490 <entropy_nrf5_get_entropy_isr+0x9c>)
   1a436:	2200      	movs	r2, #0
   1a438:	601a      	str	r2, [r3, #0]
   1a43a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a43c:	4b15      	ldr	r3, [pc, #84]	; (1a494 <entropy_nrf5_get_entropy_isr+0xa0>)
   1a43e:	2201      	movs	r2, #1
   1a440:	601a      	str	r2, [r3, #0]
   1a442:	4b15      	ldr	r3, [pc, #84]	; (1a498 <entropy_nrf5_get_entropy_isr+0xa4>)
   1a444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1a448:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1a44c:	4626      	mov	r6, r4
   1a44e:	e004      	b.n	1a45a <entropy_nrf5_get_entropy_isr+0x66>
   1a450:	f3bf 8f4f 	dsb	sy
				__WFE();
   1a454:	bf20      	wfe
				__SEV();
   1a456:	bf40      	sev
				__WFE();
   1a458:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1a45a:	4b0d      	ldr	r3, [pc, #52]	; (1a490 <entropy_nrf5_get_entropy_isr+0x9c>)
   1a45c:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1a45e:	2b00      	cmp	r3, #0
   1a460:	d0f6      	beq.n	1a450 <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   1a462:	f7ff ff59 	bl	1a318 <random_byte_get>
   1a466:	4b0c      	ldr	r3, [pc, #48]	; (1a498 <entropy_nrf5_get_entropy_isr+0xa4>)
   1a468:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1a46c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1a470:	2800      	cmp	r0, #0
   1a472:	db02      	blt.n	1a47a <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1a474:	3e01      	subs	r6, #1
   1a476:	b2b6      	uxth	r6, r6
   1a478:	55a8      	strb	r0, [r5, r6]
		} while (len);
   1a47a:	2e00      	cmp	r6, #0
   1a47c:	d1ed      	bne.n	1a45a <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1a47e:	2f00      	cmp	r7, #0
   1a480:	d0c3      	beq.n	1a40a <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1a482:	200d      	movs	r0, #13
   1a484:	f7f8 fec0 	bl	13208 <arch_irq_enable>
   1a488:	e7bf      	b.n	1a40a <entropy_nrf5_get_entropy_isr+0x16>
   1a48a:	bf00      	nop
   1a48c:	20002a3c 	.word	0x20002a3c
   1a490:	4000d100 	.word	0x4000d100
   1a494:	4000d000 	.word	0x4000d000
   1a498:	e000e100 	.word	0xe000e100

0001a49c <isr>:
{
   1a49c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1a49e:	f7ff ff3b 	bl	1a318 <random_byte_get>
	if (byte < 0) {
   1a4a2:	2800      	cmp	r0, #0
   1a4a4:	db06      	blt.n	1a4b4 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1a4a6:	b2c4      	uxtb	r4, r0
   1a4a8:	4621      	mov	r1, r4
   1a4aa:	480a      	ldr	r0, [pc, #40]	; (1a4d4 <isr+0x38>)
   1a4ac:	f009 ff8a 	bl	243c4 <rng_pool_put>
	if (ret < 0) {
   1a4b0:	2800      	cmp	r0, #0
   1a4b2:	db00      	blt.n	1a4b6 <isr+0x1a>
}
   1a4b4:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1a4b6:	4621      	mov	r1, r4
   1a4b8:	4807      	ldr	r0, [pc, #28]	; (1a4d8 <isr+0x3c>)
   1a4ba:	f009 ff83 	bl	243c4 <rng_pool_put>
		if (ret < 0) {
   1a4be:	2800      	cmp	r0, #0
   1a4c0:	db03      	blt.n	1a4ca <isr+0x2e>
	z_impl_k_sem_give(sem);
   1a4c2:	4806      	ldr	r0, [pc, #24]	; (1a4dc <isr+0x40>)
   1a4c4:	f002 fbf2 	bl	1ccac <z_impl_k_sem_give>
}
   1a4c8:	e7f4      	b.n	1a4b4 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a4ca:	4b05      	ldr	r3, [pc, #20]	; (1a4e0 <isr+0x44>)
   1a4cc:	2201      	movs	r2, #1
   1a4ce:	601a      	str	r2, [r3, #0]
}
   1a4d0:	e7f7      	b.n	1a4c2 <isr+0x26>
   1a4d2:	bf00      	nop
   1a4d4:	20002a3c 	.word	0x20002a3c
   1a4d8:	20002a51 	.word	0x20002a51
   1a4dc:	20002a24 	.word	0x20002a24
   1a4e0:	4000d004 	.word	0x4000d004

0001a4e4 <entropy_nrf5_get_entropy>:
{
   1a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4e6:	460f      	mov	r7, r1
   1a4e8:	4614      	mov	r4, r2
	while (len) {
   1a4ea:	e002      	b.n	1a4f2 <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   1a4ec:	1b64      	subs	r4, r4, r5
   1a4ee:	b2a4      	uxth	r4, r4
		buf += bytes;
   1a4f0:	442f      	add	r7, r5
	while (len) {
   1a4f2:	b1e4      	cbz	r4, 1a52e <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   1a4f4:	4e0f      	ldr	r6, [pc, #60]	; (1a534 <entropy_nrf5_get_entropy+0x50>)
   1a4f6:	f04f 32ff 	mov.w	r2, #4294967295
   1a4fa:	f04f 33ff 	mov.w	r3, #4294967295
   1a4fe:	4630      	mov	r0, r6
   1a500:	f002 fbfc 	bl	1ccfc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1a504:	4622      	mov	r2, r4
   1a506:	4639      	mov	r1, r7
   1a508:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1a50c:	f7ff ff24 	bl	1a358 <rng_pool_get>
   1a510:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1a512:	4630      	mov	r0, r6
   1a514:	f002 fbca 	bl	1ccac <z_impl_k_sem_give>
		if (bytes == 0U) {
   1a518:	2d00      	cmp	r5, #0
   1a51a:	d1e7      	bne.n	1a4ec <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1a51c:	f04f 32ff 	mov.w	r2, #4294967295
   1a520:	f04f 33ff 	mov.w	r3, #4294967295
   1a524:	f106 0018 	add.w	r0, r6, #24
   1a528:	f002 fbe8 	bl	1ccfc <z_impl_k_sem_take>
			continue;
   1a52c:	e7e1      	b.n	1a4f2 <entropy_nrf5_get_entropy+0xe>
}
   1a52e:	2000      	movs	r0, #0
   1a530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a532:	bf00      	nop
   1a534:	20002a0c 	.word	0x20002a0c

0001a538 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1a538:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a53a:	4c18      	ldr	r4, [pc, #96]	; (1a59c <entropy_nrf5_init+0x64>)
   1a53c:	2201      	movs	r2, #1
   1a53e:	4611      	mov	r1, r2
   1a540:	4620      	mov	r0, r4
   1a542:	f00a fdcf 	bl	250e4 <z_impl_k_sem_init>
   1a546:	2201      	movs	r2, #1
   1a548:	2100      	movs	r1, #0
   1a54a:	f104 0018 	add.w	r0, r4, #24
   1a54e:	f00a fdc9 	bl	250e4 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1a552:	2204      	movs	r2, #4
   1a554:	2108      	movs	r1, #8
   1a556:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1a55a:	f009 ff47 	bl	243ec <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1a55e:	220c      	movs	r2, #12
   1a560:	2110      	movs	r1, #16
   1a562:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a566:	f009 ff41 	bl	243ec <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1a56a:	4b0d      	ldr	r3, [pc, #52]	; (1a5a0 <entropy_nrf5_init+0x68>)
   1a56c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1a570:	f022 0201 	bic.w	r2, r2, #1
   1a574:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1a578:	4a0a      	ldr	r2, [pc, #40]	; (1a5a4 <entropy_nrf5_init+0x6c>)
   1a57a:	2400      	movs	r4, #0
   1a57c:	6014      	str	r4, [r2, #0]
   1a57e:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1a580:	2101      	movs	r1, #1
   1a582:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1a586:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1a588:	4622      	mov	r2, r4
   1a58a:	200d      	movs	r0, #13
   1a58c:	f7f8 fe6e 	bl	1326c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1a590:	200d      	movs	r0, #13
   1a592:	f7f8 fe39 	bl	13208 <arch_irq_enable>

	return 0;
}
   1a596:	4620      	mov	r0, r4
   1a598:	bd10      	pop	{r4, pc}
   1a59a:	bf00      	nop
   1a59c:	20002a0c 	.word	0x20002a0c
   1a5a0:	4000d000 	.word	0x4000d000
   1a5a4:	4000d100 	.word	0x4000d100

0001a5a8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1a5a8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1a5ac:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1a5b0:	4b01      	ldr	r3, [pc, #4]	; (1a5b8 <set_comparator+0x10>)
   1a5b2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1a5b6:	4770      	bx	lr
   1a5b8:	40011000 	.word	0x40011000

0001a5bc <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1a5bc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1a5c0:	4b01      	ldr	r3, [pc, #4]	; (1a5c8 <get_comparator+0xc>)
   1a5c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1a5c6:	4770      	bx	lr
   1a5c8:	40011000 	.word	0x40011000

0001a5cc <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1a5cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a5d0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1a5d2:	4a02      	ldr	r2, [pc, #8]	; (1a5dc <event_enable+0x10>)
   1a5d4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1a5d8:	4770      	bx	lr
   1a5da:	bf00      	nop
   1a5dc:	40011000 	.word	0x40011000

0001a5e0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1a5e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a5e4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1a5e6:	4a02      	ldr	r2, [pc, #8]	; (1a5f0 <event_disable+0x10>)
   1a5e8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1a5ec:	4770      	bx	lr
   1a5ee:	bf00      	nop
   1a5f0:	40011000 	.word	0x40011000

0001a5f4 <counter>:
     return p_reg->COUNTER;
   1a5f4:	4b01      	ldr	r3, [pc, #4]	; (1a5fc <counter+0x8>)
   1a5f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1a5fa:	4770      	bx	lr
   1a5fc:	40011000 	.word	0x40011000

0001a600 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   1a600:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1a602:	2301      	movs	r3, #1
   1a604:	4083      	lsls	r3, r0
   1a606:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a608:	4a10      	ldr	r2, [pc, #64]	; (1a64c <compare_int_lock+0x4c>)
   1a60a:	f3bf 8f5b 	dmb	ish
   1a60e:	e852 1f00 	ldrex	r1, [r2]
   1a612:	ea01 0c04 	and.w	ip, r1, r4
   1a616:	e842 ce00 	strex	lr, ip, [r2]
   1a61a:	f1be 0f00 	cmp.w	lr, #0
   1a61e:	d1f6      	bne.n	1a60e <compare_int_lock+0xe>
   1a620:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1a624:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a628:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1a62c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1a634:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1a638:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a63c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1a640:	420b      	tst	r3, r1
}
   1a642:	bf14      	ite	ne
   1a644:	2001      	movne	r0, #1
   1a646:	2000      	moveq	r0, #0
   1a648:	bd10      	pop	{r4, pc}
   1a64a:	bf00      	nop
   1a64c:	20002a64 	.word	0x20002a64

0001a650 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   1a650:	b570      	push	{r4, r5, r6, lr}
   1a652:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   1a654:	f009 ff12 	bl	2447c <full_int_lock>
   1a658:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1a65a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a65e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   1a660:	4a17      	ldr	r2, [pc, #92]	; (1a6c0 <channel_processing_check_and_clear+0x70>)
   1a662:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1a666:	4213      	tst	r3, r2
   1a668:	d105      	bne.n	1a676 <channel_processing_check_and_clear+0x26>
	bool result = false;
   1a66a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1a66c:	4628      	mov	r0, r5
   1a66e:	f009 ff09 	bl	24484 <full_int_unlock>

	return result;
}
   1a672:	4630      	mov	r0, r6
   1a674:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1a676:	2301      	movs	r3, #1
   1a678:	40a3      	lsls	r3, r4
   1a67a:	43db      	mvns	r3, r3
   1a67c:	4a11      	ldr	r2, [pc, #68]	; (1a6c4 <channel_processing_check_and_clear+0x74>)
   1a67e:	f3bf 8f5b 	dmb	ish
   1a682:	e852 1f00 	ldrex	r1, [r2]
   1a686:	ea01 0003 	and.w	r0, r1, r3
   1a68a:	e842 0600 	strex	r6, r0, [r2]
   1a68e:	2e00      	cmp	r6, #0
   1a690:	d1f7      	bne.n	1a682 <channel_processing_check_and_clear+0x32>
   1a692:	f3bf 8f5b 	dmb	ish
   1a696:	b959      	cbnz	r1, 1a6b0 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1a698:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1a69c:	009b      	lsls	r3, r3, #2
   1a69e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a6a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a6a4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1a6a8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1a6aa:	b113      	cbz	r3, 1a6b2 <channel_processing_check_and_clear+0x62>
   1a6ac:	2301      	movs	r3, #1
   1a6ae:	e000      	b.n	1a6b2 <channel_processing_check_and_clear+0x62>
   1a6b0:	2301      	movs	r3, #1
		if (result) {
   1a6b2:	461e      	mov	r6, r3
   1a6b4:	2b00      	cmp	r3, #0
   1a6b6:	d0d9      	beq.n	1a66c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   1a6b8:	4620      	mov	r0, r4
   1a6ba:	f009 fed0 	bl	2445e <event_clear>
   1a6be:	e7d5      	b.n	1a66c <channel_processing_check_and_clear+0x1c>
   1a6c0:	40011000 	.word	0x40011000
   1a6c4:	20002a60 	.word	0x20002a60

0001a6c8 <compare_int_unlock>:
	if (key) {
   1a6c8:	b901      	cbnz	r1, 1a6cc <compare_int_unlock+0x4>
}
   1a6ca:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1a6cc:	2301      	movs	r3, #1
   1a6ce:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a6d0:	4a11      	ldr	r2, [pc, #68]	; (1a718 <compare_int_unlock+0x50>)
   1a6d2:	f3bf 8f5b 	dmb	ish
   1a6d6:	e852 1f00 	ldrex	r1, [r2]
   1a6da:	4319      	orrs	r1, r3
   1a6dc:	e842 1c00 	strex	ip, r1, [r2]
   1a6e0:	f1bc 0f00 	cmp.w	ip, #0
   1a6e4:	d1f7      	bne.n	1a6d6 <compare_int_unlock+0xe>
   1a6e6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1a6ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a6ee:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1a6f0:	4a0a      	ldr	r2, [pc, #40]	; (1a71c <compare_int_unlock+0x54>)
   1a6f2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a6f6:	f3bf 8f5b 	dmb	ish
   1a6fa:	4b09      	ldr	r3, [pc, #36]	; (1a720 <compare_int_unlock+0x58>)
   1a6fc:	681b      	ldr	r3, [r3, #0]
   1a6fe:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1a702:	fa23 f000 	lsr.w	r0, r3, r0
   1a706:	f010 0f01 	tst.w	r0, #1
   1a70a:	d0de      	beq.n	1a6ca <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a70c:	4b05      	ldr	r3, [pc, #20]	; (1a724 <compare_int_unlock+0x5c>)
   1a70e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a712:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1a716:	e7d8      	b.n	1a6ca <compare_int_unlock+0x2>
   1a718:	20002a64 	.word	0x20002a64
   1a71c:	40011000 	.word	0x40011000
   1a720:	20002a60 	.word	0x20002a60
   1a724:	e000e100 	.word	0xe000e100

0001a728 <sys_clock_timeout_handler>:
{
   1a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a72a:	4607      	mov	r7, r0
   1a72c:	4614      	mov	r4, r2
   1a72e:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1a730:	4610      	mov	r0, r2
   1a732:	4619      	mov	r1, r3
   1a734:	f009 fe9f 	bl	24476 <absolute_time_to_cc>
   1a738:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1a73a:	4b15      	ldr	r3, [pc, #84]	; (1a790 <sys_clock_timeout_handler+0x68>)
   1a73c:	681a      	ldr	r2, [r3, #0]
   1a73e:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   1a740:	601c      	str	r4, [r3, #0]
   1a742:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1a744:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1a748:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1a74c:	d308      	bcc.n	1a760 <sys_clock_timeout_handler+0x38>
	return false;
   1a74e:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1a750:	f003 f9e4 	bl	1db1c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1a754:	4638      	mov	r0, r7
   1a756:	f7ff ff31 	bl	1a5bc <get_comparator>
   1a75a:	42a8      	cmp	r0, r5
   1a75c:	d00c      	beq.n	1a778 <sys_clock_timeout_handler+0x50>
}
   1a75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1a760:	4b0c      	ldr	r3, [pc, #48]	; (1a794 <sys_clock_timeout_handler+0x6c>)
   1a762:	6819      	ldr	r1, [r3, #0]
   1a764:	0a0b      	lsrs	r3, r1, #8
   1a766:	060a      	lsls	r2, r1, #24
   1a768:	1952      	adds	r2, r2, r5
   1a76a:	f143 0300 	adc.w	r3, r3, #0
   1a76e:	490a      	ldr	r1, [pc, #40]	; (1a798 <sys_clock_timeout_handler+0x70>)
   1a770:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1a774:	2401      	movs	r4, #1
   1a776:	e7eb      	b.n	1a750 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1a778:	b11c      	cbz	r4, 1a782 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1a77a:	4638      	mov	r0, r7
   1a77c:	f7ff ff26 	bl	1a5cc <event_enable>
}
   1a780:	e7ed      	b.n	1a75e <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1a782:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1a786:	4638      	mov	r0, r7
   1a788:	f7ff ff0e 	bl	1a5a8 <set_comparator>
   1a78c:	e7f5      	b.n	1a77a <sys_clock_timeout_handler+0x52>
   1a78e:	bf00      	nop
   1a790:	20001ba8 	.word	0x20001ba8
   1a794:	20002a68 	.word	0x20002a68
   1a798:	20001b90 	.word	0x20001b90

0001a79c <z_nrf_rtc_timer_read>:
{
   1a79c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1a79e:	4b0d      	ldr	r3, [pc, #52]	; (1a7d4 <z_nrf_rtc_timer_read+0x38>)
   1a7a0:	681b      	ldr	r3, [r3, #0]
   1a7a2:	0a1d      	lsrs	r5, r3, #8
   1a7a4:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1a7a6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1a7aa:	f7ff ff23 	bl	1a5f4 <counter>
   1a7ae:	4603      	mov	r3, r0
	val += cntr;
   1a7b0:	1820      	adds	r0, r4, r0
   1a7b2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1a7b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a7ba:	d20a      	bcs.n	1a7d2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1a7bc:	4b06      	ldr	r3, [pc, #24]	; (1a7d8 <z_nrf_rtc_timer_read+0x3c>)
   1a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7c2:	4299      	cmp	r1, r3
   1a7c4:	bf08      	it	eq
   1a7c6:	4290      	cmpeq	r0, r2
   1a7c8:	d203      	bcs.n	1a7d2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1a7ca:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1a7ce:	f141 0100 	adc.w	r1, r1, #0
}
   1a7d2:	bd38      	pop	{r3, r4, r5, pc}
   1a7d4:	20002a68 	.word	0x20002a68
   1a7d8:	20001b90 	.word	0x20001b90

0001a7dc <compare_set_nolocks>:
{
   1a7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a7e0:	4606      	mov	r6, r0
   1a7e2:	4614      	mov	r4, r2
   1a7e4:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1a7e6:	4610      	mov	r0, r2
   1a7e8:	4619      	mov	r1, r3
   1a7ea:	f009 fe44 	bl	24476 <absolute_time_to_cc>
   1a7ee:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1a7f0:	f7ff ffd4 	bl	1a79c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1a7f4:	42a9      	cmp	r1, r5
   1a7f6:	bf08      	it	eq
   1a7f8:	42a0      	cmpeq	r0, r4
   1a7fa:	d21e      	bcs.n	1a83a <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1a7fc:	ebb4 0800 	subs.w	r8, r4, r0
   1a800:	eb65 0901 	sbc.w	r9, r5, r1
   1a804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1a808:	2300      	movs	r3, #0
   1a80a:	454b      	cmp	r3, r9
   1a80c:	bf08      	it	eq
   1a80e:	4542      	cmpeq	r2, r8
   1a810:	d32e      	bcc.n	1a870 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   1a812:	4b19      	ldr	r3, [pc, #100]	; (1a878 <compare_set_nolocks+0x9c>)
   1a814:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1a818:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1a81c:	42ab      	cmp	r3, r5
   1a81e:	bf08      	it	eq
   1a820:	42a2      	cmpeq	r2, r4
   1a822:	d018      	beq.n	1a856 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1a824:	4639      	mov	r1, r7
   1a826:	4630      	mov	r0, r6
   1a828:	f009 fe2f 	bl	2448a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1a82c:	4639      	mov	r1, r7
   1a82e:	f009 fe12 	bl	24456 <counter_sub>
   1a832:	1824      	adds	r4, r4, r0
   1a834:	f145 0500 	adc.w	r5, r5, #0
   1a838:	e00d      	b.n	1a856 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   1a83a:	2301      	movs	r3, #1
   1a83c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a83e:	4a0f      	ldr	r2, [pc, #60]	; (1a87c <compare_set_nolocks+0xa0>)
   1a840:	f3bf 8f5b 	dmb	ish
   1a844:	e852 1f00 	ldrex	r1, [r2]
   1a848:	4319      	orrs	r1, r3
   1a84a:	e842 1000 	strex	r0, r1, [r2]
   1a84e:	2800      	cmp	r0, #0
   1a850:	d1f8      	bne.n	1a844 <compare_set_nolocks+0x68>
   1a852:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1a856:	4b08      	ldr	r3, [pc, #32]	; (1a878 <compare_set_nolocks+0x9c>)
   1a858:	0132      	lsls	r2, r6, #4
   1a85a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1a85e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1a862:	9908      	ldr	r1, [sp, #32]
   1a864:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1a866:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a868:	6073      	str	r3, [r6, #4]
	return ret;
   1a86a:	2000      	movs	r0, #0
}
   1a86c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1a870:	f06f 0015 	mvn.w	r0, #21
   1a874:	e7fa      	b.n	1a86c <compare_set_nolocks+0x90>
   1a876:	bf00      	nop
   1a878:	20001b98 	.word	0x20001b98
   1a87c:	20002a60 	.word	0x20002a60

0001a880 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1a880:	b530      	push	{r4, r5, lr}
   1a882:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1a884:	2300      	movs	r3, #0
   1a886:	4a1e      	ldr	r2, [pc, #120]	; (1a900 <sys_clock_driver_init+0x80>)
   1a888:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1a88c:	2b00      	cmp	r3, #0
   1a88e:	dd25      	ble.n	1a8dc <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   1a890:	4c1b      	ldr	r4, [pc, #108]	; (1a900 <sys_clock_driver_init+0x80>)
   1a892:	2502      	movs	r5, #2
   1a894:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a898:	4b1a      	ldr	r3, [pc, #104]	; (1a904 <sys_clock_driver_init+0x84>)
   1a89a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a89e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1a8a2:	2200      	movs	r2, #0
   1a8a4:	2101      	movs	r1, #1
   1a8a6:	2011      	movs	r0, #17
   1a8a8:	f7f8 fce0 	bl	1326c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1a8ac:	2011      	movs	r0, #17
   1a8ae:	f7f8 fcab 	bl	13208 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1a8b2:	2301      	movs	r3, #1
   1a8b4:	4a14      	ldr	r2, [pc, #80]	; (1a908 <sys_clock_driver_init+0x88>)
   1a8b6:	6013      	str	r3, [r2, #0]
   1a8b8:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1a8ba:	4a14      	ldr	r2, [pc, #80]	; (1a90c <sys_clock_driver_init+0x8c>)
   1a8bc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1a8be:	2400      	movs	r4, #0
   1a8c0:	9401      	str	r4, [sp, #4]
   1a8c2:	4b13      	ldr	r3, [pc, #76]	; (1a910 <sys_clock_driver_init+0x90>)
   1a8c4:	9300      	str	r3, [sp, #0]
   1a8c6:	4a13      	ldr	r2, [pc, #76]	; (1a914 <sys_clock_driver_init+0x94>)
   1a8c8:	2300      	movs	r3, #0
   1a8ca:	4620      	mov	r0, r4
   1a8cc:	f009 fe18 	bl	24500 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1a8d0:	4628      	mov	r0, r5
   1a8d2:	f7ff f95f 	bl	19b94 <z_nrf_clock_control_lf_on>

	return 0;
}
   1a8d6:	4620      	mov	r0, r4
   1a8d8:	b003      	add	sp, #12
   1a8da:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1a8dc:	4a0e      	ldr	r2, [pc, #56]	; (1a918 <sys_clock_driver_init+0x98>)
   1a8de:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1a8e2:	f04f 30ff 	mov.w	r0, #4294967295
   1a8e6:	f04f 31ff 	mov.w	r1, #4294967295
   1a8ea:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1a8ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a8f2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1a8f4:	4902      	ldr	r1, [pc, #8]	; (1a900 <sys_clock_driver_init+0x80>)
   1a8f6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1a8fa:	3301      	adds	r3, #1
   1a8fc:	e7c6      	b.n	1a88c <sys_clock_driver_init+0xc>
   1a8fe:	bf00      	nop
   1a900:	40011000 	.word	0x40011000
   1a904:	e000e100 	.word	0xe000e100
   1a908:	40011008 	.word	0x40011008
   1a90c:	20002a64 	.word	0x20002a64
   1a910:	0001a729 	.word	0x0001a729
   1a914:	007fffff 	.word	0x007fffff
   1a918:	20001b98 	.word	0x20001b98

0001a91c <process_channel>:
{
   1a91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a920:	b082      	sub	sp, #8
   1a922:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1a924:	f7ff fe94 	bl	1a650 <channel_processing_check_and_clear>
   1a928:	b910      	cbnz	r0, 1a930 <process_channel+0x14>
}
   1a92a:	b002      	add	sp, #8
   1a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1a930:	f7ff ff34 	bl	1a79c <z_nrf_rtc_timer_read>
   1a934:	4606      	mov	r6, r0
   1a936:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   1a938:	f009 fda0 	bl	2447c <full_int_lock>
   1a93c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1a93e:	4b13      	ldr	r3, [pc, #76]	; (1a98c <process_channel+0x70>)
   1a940:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1a944:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1a948:	454f      	cmp	r7, r9
   1a94a:	bf08      	it	eq
   1a94c:	4546      	cmpeq	r6, r8
   1a94e:	d20b      	bcs.n	1a968 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1a950:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1a952:	4650      	mov	r0, sl
   1a954:	f009 fd96 	bl	24484 <full_int_unlock>
		if (handler) {
   1a958:	2e00      	cmp	r6, #0
   1a95a:	d0e6      	beq.n	1a92a <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1a95c:	9500      	str	r5, [sp, #0]
   1a95e:	4642      	mov	r2, r8
   1a960:	464b      	mov	r3, r9
   1a962:	4620      	mov	r0, r4
   1a964:	47b0      	blx	r6
}
   1a966:	e7e0      	b.n	1a92a <process_channel+0xe>
			handler = cc_data[chan].callback;
   1a968:	4a08      	ldr	r2, [pc, #32]	; (1a98c <process_channel+0x70>)
   1a96a:	0123      	lsls	r3, r4, #4
   1a96c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1a970:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1a972:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   1a974:	2000      	movs	r0, #0
   1a976:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1a978:	f04f 32ff 	mov.w	r2, #4294967295
   1a97c:	f04f 33ff 	mov.w	r3, #4294967295
   1a980:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1a984:	4620      	mov	r0, r4
   1a986:	f7ff fe2b 	bl	1a5e0 <event_disable>
   1a98a:	e7e2      	b.n	1a952 <process_channel+0x36>
   1a98c:	20001b98 	.word	0x20001b98

0001a990 <rtc_nrf_isr>:
{
   1a990:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1a992:	4b0d      	ldr	r3, [pc, #52]	; (1a9c8 <rtc_nrf_isr+0x38>)
   1a994:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1a998:	f013 0f02 	tst.w	r3, #2
   1a99c:	d00a      	beq.n	1a9b4 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a99e:	4b0b      	ldr	r3, [pc, #44]	; (1a9cc <rtc_nrf_isr+0x3c>)
   1a9a0:	681b      	ldr	r3, [r3, #0]
   1a9a2:	b13b      	cbz	r3, 1a9b4 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a9a4:	4b09      	ldr	r3, [pc, #36]	; (1a9cc <rtc_nrf_isr+0x3c>)
   1a9a6:	2200      	movs	r2, #0
   1a9a8:	601a      	str	r2, [r3, #0]
   1a9aa:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   1a9ac:	4a08      	ldr	r2, [pc, #32]	; (1a9d0 <rtc_nrf_isr+0x40>)
   1a9ae:	6813      	ldr	r3, [r2, #0]
   1a9b0:	3301      	adds	r3, #1
   1a9b2:	6013      	str	r3, [r2, #0]
{
   1a9b4:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1a9b6:	2c00      	cmp	r4, #0
   1a9b8:	dd00      	ble.n	1a9bc <rtc_nrf_isr+0x2c>
}
   1a9ba:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1a9bc:	4620      	mov	r0, r4
   1a9be:	f7ff ffad 	bl	1a91c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1a9c2:	3401      	adds	r4, #1
   1a9c4:	e7f7      	b.n	1a9b6 <rtc_nrf_isr+0x26>
   1a9c6:	bf00      	nop
   1a9c8:	40011000 	.word	0x40011000
   1a9cc:	40011104 	.word	0x40011104
   1a9d0:	20002a68 	.word	0x20002a68

0001a9d4 <sys_clock_set_timeout>:
{
   1a9d4:	b510      	push	{r4, lr}
   1a9d6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1a9d8:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a9dc:	d007      	beq.n	1a9ee <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1a9de:	1e44      	subs	r4, r0, #1
   1a9e0:	2c00      	cmp	r4, #0
   1a9e2:	dd07      	ble.n	1a9f4 <sys_clock_set_timeout+0x20>
   1a9e4:	4b11      	ldr	r3, [pc, #68]	; (1aa2c <sys_clock_set_timeout+0x58>)
   1a9e6:	429c      	cmp	r4, r3
   1a9e8:	dd05      	ble.n	1a9f6 <sys_clock_set_timeout+0x22>
   1a9ea:	4c11      	ldr	r4, [pc, #68]	; (1aa30 <sys_clock_set_timeout+0x5c>)
   1a9ec:	e003      	b.n	1a9f6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1a9ee:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   1a9f2:	e7f4      	b.n	1a9de <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1a9f4:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1a9f6:	f7ff fed1 	bl	1a79c <z_nrf_rtc_timer_read>
   1a9fa:	4b0e      	ldr	r3, [pc, #56]	; (1aa34 <sys_clock_set_timeout+0x60>)
   1a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa00:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   1aa02:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1aa06:	d300      	bcc.n	1aa0a <sys_clock_set_timeout+0x36>
		ticks = 0;
   1aa08:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1aa0a:	4404      	add	r4, r0
   1aa0c:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   1aa0e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1aa12:	d300      	bcc.n	1aa16 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   1aa14:	4c06      	ldr	r4, [pc, #24]	; (1aa30 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1aa16:	2000      	movs	r0, #0
   1aa18:	9001      	str	r0, [sp, #4]
   1aa1a:	4907      	ldr	r1, [pc, #28]	; (1aa38 <sys_clock_set_timeout+0x64>)
   1aa1c:	9100      	str	r1, [sp, #0]
   1aa1e:	1912      	adds	r2, r2, r4
   1aa20:	f143 0300 	adc.w	r3, r3, #0
   1aa24:	f009 fd6c 	bl	24500 <compare_set>
}
   1aa28:	b002      	add	sp, #8
   1aa2a:	bd10      	pop	{r4, pc}
   1aa2c:	007ffffe 	.word	0x007ffffe
   1aa30:	007fffff 	.word	0x007fffff
   1aa34:	20001ba8 	.word	0x20001ba8
   1aa38:	0001a729 	.word	0x0001a729

0001aa3c <sys_clock_elapsed>:
{
   1aa3c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1aa3e:	f7ff fead 	bl	1a79c <z_nrf_rtc_timer_read>
   1aa42:	4b02      	ldr	r3, [pc, #8]	; (1aa4c <sys_clock_elapsed+0x10>)
   1aa44:	681b      	ldr	r3, [r3, #0]
}
   1aa46:	1ac0      	subs	r0, r0, r3
   1aa48:	bd08      	pop	{r3, pc}
   1aa4a:	bf00      	nop
   1aa4c:	20001ba8 	.word	0x20001ba8

0001aa50 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   1aa50:	b570      	push	{r4, r5, r6, lr}
   1aa52:	b082      	sub	sp, #8
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1aa54:	2400      	movs	r4, #0
	uint32_t ret = 0;
   1aa56:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1aa58:	e014      	b.n	1aa84 <get_buttons+0x34>
   1aa5a:	4b19      	ldr	r3, [pc, #100]	; (1aac0 <get_buttons+0x70>)
   1aa5c:	4a19      	ldr	r2, [pc, #100]	; (1aac4 <get_buttons+0x74>)
   1aa5e:	1a9b      	subs	r3, r3, r2
   1aa60:	08db      	lsrs	r3, r3, #3
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1aa62:	f04f 0100 	mov.w	r1, #0
   1aa66:	2201      	movs	r2, #1
   1aa68:	f362 0102 	bfi	r1, r2, #0, #3
   1aa6c:	f36f 01c5 	bfc	r1, #3, #3
   1aa70:	f363 118f 	bfi	r1, r3, #6, #10
   1aa74:	4814      	ldr	r0, [pc, #80]	; (1aac8 <get_buttons+0x78>)
   1aa76:	f7f7 f9ed 	bl	11e54 <log_0>
			return 0;
   1aa7a:	2500      	movs	r5, #0
			ret |= 1U << i;
		}
	}

	return ret;
}
   1aa7c:	4628      	mov	r0, r5
   1aa7e:	b002      	add	sp, #8
   1aa80:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1aa82:	3401      	adds	r4, #1
   1aa84:	2c03      	cmp	r4, #3
   1aa86:	d8f9      	bhi.n	1aa7c <get_buttons+0x2c>
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   1aa88:	4b10      	ldr	r3, [pc, #64]	; (1aacc <get_buttons+0x7c>)
   1aa8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1aa8e:	4b10      	ldr	r3, [pc, #64]	; (1aad0 <get_buttons+0x80>)
   1aa90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1aa94:	791e      	ldrb	r6, [r3, #4]
	const struct gpio_driver_api *api =
   1aa96:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   1aa98:	685b      	ldr	r3, [r3, #4]
   1aa9a:	a901      	add	r1, sp, #4
   1aa9c:	4798      	blx	r3
	if (ret == 0) {
   1aa9e:	4603      	mov	r3, r0
   1aaa0:	b930      	cbnz	r0, 1aab0 <get_buttons+0x60>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1aaa2:	2301      	movs	r3, #1
   1aaa4:	40b3      	lsls	r3, r6
   1aaa6:	9a01      	ldr	r2, [sp, #4]
   1aaa8:	4213      	tst	r3, r2
   1aaaa:	bf14      	ite	ne
   1aaac:	2301      	movne	r3, #1
   1aaae:	2300      	moveq	r3, #0
		if (val < 0) {
   1aab0:	2b00      	cmp	r3, #0
   1aab2:	dbd2      	blt.n	1aa5a <get_buttons+0xa>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1aab4:	2b00      	cmp	r3, #0
   1aab6:	d1e4      	bne.n	1aa82 <get_buttons+0x32>
			ret |= 1U << i;
   1aab8:	2301      	movs	r3, #1
   1aaba:	40a3      	lsls	r3, r4
   1aabc:	431d      	orrs	r5, r3
   1aabe:	e7e0      	b.n	1aa82 <get_buttons+0x32>
   1aac0:	00025de8 	.word	0x00025de8
   1aac4:	00025d80 	.word	0x00025d80
   1aac8:	00027c34 	.word	0x00027c34
   1aacc:	20002a6c 	.word	0x20002a6c
   1aad0:	00027d30 	.word	0x00027d30

0001aad4 <button_handlers_call>:

static void button_handlers_call(uint32_t button_state, uint32_t has_changed)
{
   1aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aad6:	4606      	mov	r6, r0
   1aad8:	460f      	mov	r7, r1
	struct button_handler *handler;

	if (button_handler_cb != NULL) {
   1aada:	4b11      	ldr	r3, [pc, #68]	; (1ab20 <button_handlers_call+0x4c>)
   1aadc:	681b      	ldr	r3, [r3, #0]
   1aade:	b103      	cbz	r3, 1aae2 <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
   1aae0:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1aae2:	f04f 32ff 	mov.w	r2, #4294967295
   1aae6:	f04f 33ff 	mov.w	r3, #4294967295
   1aaea:	480e      	ldr	r0, [pc, #56]	; (1ab24 <button_handlers_call+0x50>)
   1aaec:	f001 ffd4 	bl	1ca98 <z_impl_k_mutex_lock>
	return list->head;
   1aaf0:	4b0d      	ldr	r3, [pc, #52]	; (1ab28 <button_handlers_call+0x54>)
   1aaf2:	681c      	ldr	r4, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_lock(&button_handler_mut, K_FOREVER);
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1aaf4:	b114      	cbz	r4, 1aafc <button_handlers_call+0x28>
   1aaf6:	3c04      	subs	r4, #4
   1aaf8:	e000      	b.n	1aafc <button_handlers_call+0x28>
   1aafa:	462c      	mov	r4, r5
   1aafc:	b15c      	cbz	r4, 1ab16 <button_handlers_call+0x42>
			handler->cb(button_state, has_changed);
   1aafe:	4625      	mov	r5, r4
   1ab00:	f855 3b04 	ldr.w	r3, [r5], #4
   1ab04:	4639      	mov	r1, r7
   1ab06:	4630      	mov	r0, r6
   1ab08:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ab0a:	2d00      	cmp	r5, #0
   1ab0c:	d0f5      	beq.n	1aafa <button_handlers_call+0x26>
	return node->next;
   1ab0e:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1ab10:	b10c      	cbz	r4, 1ab16 <button_handlers_call+0x42>
   1ab12:	3c04      	subs	r4, #4
   1ab14:	e7f2      	b.n	1aafc <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
   1ab16:	4803      	ldr	r0, [pc, #12]	; (1ab24 <button_handlers_call+0x50>)
   1ab18:	f002 f848 	bl	1cbac <z_impl_k_mutex_unlock>
		}
		k_mutex_unlock(&button_handler_mut);
	}
}
   1ab1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ab1e:	bf00      	nop
   1ab20:	20002a7c 	.word	0x20002a7c
   1ab24:	20002a80 	.word	0x20002a80
   1ab28:	20002a94 	.word	0x20002a94

0001ab2c <callback_ctrl>:
{
   1ab2c:	b570      	push	{r4, r5, r6, lr}
   1ab2e:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1ab30:	2400      	movs	r4, #0
	int err = 0;
   1ab32:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1ab34:	e00d      	b.n	1ab52 <callback_ctrl+0x26>
			err = gpio_pin_interrupt_configure(button_devs[i],
   1ab36:	4b11      	ldr	r3, [pc, #68]	; (1ab7c <callback_ctrl+0x50>)
   1ab38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1ab3c:	4b10      	ldr	r3, [pc, #64]	; (1ab80 <callback_ctrl+0x54>)
   1ab3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ab42:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   1ab44:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ab46:	699e      	ldr	r6, [r3, #24]
   1ab48:	2300      	movs	r3, #0
   1ab4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1ab4e:	47b0      	blx	r6
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1ab50:	3401      	adds	r4, #1
   1ab52:	2c03      	cmp	r4, #3
   1ab54:	d811      	bhi.n	1ab7a <callback_ctrl+0x4e>
   1ab56:	b980      	cbnz	r0, 1ab7a <callback_ctrl+0x4e>
		if (enable) {
   1ab58:	2d00      	cmp	r5, #0
   1ab5a:	d0ec      	beq.n	1ab36 <callback_ctrl+0xa>
			err = gpio_pin_interrupt_configure(button_devs[i],
   1ab5c:	4b07      	ldr	r3, [pc, #28]	; (1ab7c <callback_ctrl+0x50>)
   1ab5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1ab62:	4b07      	ldr	r3, [pc, #28]	; (1ab80 <callback_ctrl+0x54>)
   1ab64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ab68:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   1ab6a:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ab6c:	699e      	ldr	r6, [r3, #24]
   1ab6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1ab72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ab76:	47b0      	blx	r6
   1ab78:	e7ea      	b.n	1ab50 <callback_ctrl+0x24>
}
   1ab7a:	bd70      	pop	{r4, r5, r6, pc}
   1ab7c:	20002a6c 	.word	0x20002a6c
   1ab80:	00027d30 	.word	0x00027d30

0001ab84 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   1ab84:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ab86:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab8a:	f3ef 8411 	mrs	r4, BASEPRI
   1ab8e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab92:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   1ab96:	2000      	movs	r0, #0
   1ab98:	f7ff ffc8 	bl	1ab2c <callback_ctrl>

	if (err) {
   1ab9c:	b938      	cbnz	r0, 1abae <button_pressed+0x2a>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
   1ab9e:	4b11      	ldr	r3, [pc, #68]	; (1abe4 <button_pressed+0x60>)
   1aba0:	781b      	ldrb	r3, [r3, #0]
   1aba2:	b1ab      	cbz	r3, 1abd0 <button_pressed+0x4c>
	__asm__ volatile(
   1aba4:	f384 8811 	msr	BASEPRI, r4
   1aba8:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   1abac:	bd10      	pop	{r4, pc}
   1abae:	4b0e      	ldr	r3, [pc, #56]	; (1abe8 <button_pressed+0x64>)
   1abb0:	4a0e      	ldr	r2, [pc, #56]	; (1abec <button_pressed+0x68>)
   1abb2:	1a9b      	subs	r3, r3, r2
   1abb4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot disable callbacks");
   1abb6:	f04f 0100 	mov.w	r1, #0
   1abba:	2201      	movs	r2, #1
   1abbc:	f362 0102 	bfi	r1, r2, #0, #3
   1abc0:	f36f 01c5 	bfc	r1, #3, #3
   1abc4:	f363 118f 	bfi	r1, r3, #6, #10
   1abc8:	4809      	ldr	r0, [pc, #36]	; (1abf0 <button_pressed+0x6c>)
   1abca:	f7f7 f943 	bl	11e54 <log_0>
   1abce:	e7e6      	b.n	1ab9e <button_pressed+0x1a>
		state = STATE_SCANNING;
   1abd0:	4b04      	ldr	r3, [pc, #16]	; (1abe4 <button_pressed+0x60>)
   1abd2:	2201      	movs	r2, #1
   1abd4:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1abd6:	2221      	movs	r2, #33	; 0x21
   1abd8:	2300      	movs	r3, #0
   1abda:	4806      	ldr	r0, [pc, #24]	; (1abf4 <button_pressed+0x70>)
   1abdc:	f002 fa7e 	bl	1d0dc <k_work_reschedule>
		break;
   1abe0:	e7e0      	b.n	1aba4 <button_pressed+0x20>
   1abe2:	bf00      	nop
   1abe4:	20003a0b 	.word	0x20003a0b
   1abe8:	00025de8 	.word	0x00025de8
   1abec:	00025d80 	.word	0x00025d80
   1abf0:	00027c4c 	.word	0x00027c4c
   1abf4:	20001bb0 	.word	0x20001bb0

0001abf8 <buttons_scan_fn>:
{
   1abf8:	b510      	push	{r4, lr}
	button_scan = get_buttons();
   1abfa:	f7ff ff29 	bl	1aa50 <get_buttons>
   1abfe:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ac00:	4b27      	ldr	r3, [pc, #156]	; (1aca0 <buttons_scan_fn+0xa8>)
   1ac02:	f3bf 8f5b 	dmb	ish
   1ac06:	e853 2f00 	ldrex	r2, [r3]
   1ac0a:	e843 4100 	strex	r1, r4, [r3]
   1ac0e:	2900      	cmp	r1, #0
   1ac10:	d1f9      	bne.n	1ac06 <buttons_scan_fn+0xe>
   1ac12:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1ac16:	4b23      	ldr	r3, [pc, #140]	; (1aca4 <buttons_scan_fn+0xac>)
   1ac18:	781b      	ldrb	r3, [r3, #0]
   1ac1a:	b943      	cbnz	r3, 1ac2e <buttons_scan_fn+0x36>
		if (button_scan != last_button_scan) {
   1ac1c:	4b22      	ldr	r3, [pc, #136]	; (1aca8 <buttons_scan_fn+0xb0>)
   1ac1e:	6819      	ldr	r1, [r3, #0]
   1ac20:	42a1      	cmp	r1, r4
   1ac22:	d007      	beq.n	1ac34 <buttons_scan_fn+0x3c>
			button_handlers_call(button_scan, has_changed);
   1ac24:	4061      	eors	r1, r4
   1ac26:	4620      	mov	r0, r4
   1ac28:	f7ff ff54 	bl	1aad4 <button_handlers_call>
   1ac2c:	e002      	b.n	1ac34 <buttons_scan_fn+0x3c>
		initial_run = false;
   1ac2e:	4b1d      	ldr	r3, [pc, #116]	; (1aca4 <buttons_scan_fn+0xac>)
   1ac30:	2200      	movs	r2, #0
   1ac32:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
   1ac34:	4b1c      	ldr	r3, [pc, #112]	; (1aca8 <buttons_scan_fn+0xb0>)
   1ac36:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
   1ac38:	b994      	cbnz	r4, 1ac60 <buttons_scan_fn+0x68>
	__asm__ volatile(
   1ac3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ac3e:	f3ef 8411 	mrs	r4, BASEPRI
   1ac42:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac46:	f3bf 8f6f 	isb	sy
		switch (state) {
   1ac4a:	4b18      	ldr	r3, [pc, #96]	; (1acac <buttons_scan_fn+0xb4>)
   1ac4c:	781b      	ldrb	r3, [r3, #0]
   1ac4e:	2b01      	cmp	r3, #1
   1ac50:	d00d      	beq.n	1ac6e <buttons_scan_fn+0x76>
		int err = 0;
   1ac52:	2000      	movs	r0, #0
	__asm__ volatile(
   1ac54:	f384 8811 	msr	BASEPRI, r4
   1ac58:	f3bf 8f6f 	isb	sy
		if (err) {
   1ac5c:	b970      	cbnz	r0, 1ac7c <buttons_scan_fn+0x84>
}
   1ac5e:	bd10      	pop	{r4, pc}
		k_work_reschedule(&buttons_scan,
   1ac60:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ac64:	2300      	movs	r3, #0
   1ac66:	4812      	ldr	r0, [pc, #72]	; (1acb0 <buttons_scan_fn+0xb8>)
   1ac68:	f002 fa38 	bl	1d0dc <k_work_reschedule>
   1ac6c:	e7f7      	b.n	1ac5e <buttons_scan_fn+0x66>
			state = STATE_WAITING;
   1ac6e:	4b0f      	ldr	r3, [pc, #60]	; (1acac <buttons_scan_fn+0xb4>)
   1ac70:	2200      	movs	r2, #0
   1ac72:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
   1ac74:	2001      	movs	r0, #1
   1ac76:	f7ff ff59 	bl	1ab2c <callback_ctrl>
			break;
   1ac7a:	e7eb      	b.n	1ac54 <buttons_scan_fn+0x5c>
   1ac7c:	4b0d      	ldr	r3, [pc, #52]	; (1acb4 <buttons_scan_fn+0xbc>)
   1ac7e:	4a0e      	ldr	r2, [pc, #56]	; (1acb8 <buttons_scan_fn+0xc0>)
   1ac80:	1a9b      	subs	r3, r3, r2
   1ac82:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot enable callbacks");
   1ac84:	f04f 0100 	mov.w	r1, #0
   1ac88:	2201      	movs	r2, #1
   1ac8a:	f362 0102 	bfi	r1, r2, #0, #3
   1ac8e:	f36f 01c5 	bfc	r1, #3, #3
   1ac92:	f363 118f 	bfi	r1, r3, #6, #10
   1ac96:	4809      	ldr	r0, [pc, #36]	; (1acbc <buttons_scan_fn+0xc4>)
   1ac98:	f7f7 f8dc 	bl	11e54 <log_0>
}
   1ac9c:	e7df      	b.n	1ac5e <buttons_scan_fn+0x66>
   1ac9e:	bf00      	nop
   1aca0:	20002ac0 	.word	0x20002ac0
   1aca4:	20000668 	.word	0x20000668
   1aca8:	20002aa8 	.word	0x20002aa8
   1acac:	20003a0b 	.word	0x20003a0b
   1acb0:	20001bb0 	.word	0x20001bb0
   1acb4:	00025de8 	.word	0x00025de8
   1acb8:	00025d80 	.word	0x00025d80
   1acbc:	00027c68 	.word	0x00027c68

0001acc0 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1acc0:	f3bf 8f5b 	dmb	ish
   1acc4:	4b06      	ldr	r3, [pc, #24]	; (1ace0 <dk_read_buttons+0x20>)
   1acc6:	681b      	ldr	r3, [r3, #0]
   1acc8:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   1accc:	b100      	cbz	r0, 1acd0 <dk_read_buttons+0x10>
		*button_state = current_state;
   1acce:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   1acd0:	b119      	cbz	r1, 1acda <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1acd2:	4a04      	ldr	r2, [pc, #16]	; (1ace4 <dk_read_buttons+0x24>)
   1acd4:	6812      	ldr	r2, [r2, #0]
   1acd6:	405a      	eors	r2, r3
   1acd8:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   1acda:	4a02      	ldr	r2, [pc, #8]	; (1ace4 <dk_read_buttons+0x24>)
   1acdc:	6013      	str	r3, [r2, #0]
}
   1acde:	4770      	bx	lr
   1ace0:	20002ac0 	.word	0x20002ac0
   1ace4:	20002aac 	.word	0x20002aac

0001ace8 <dk_buttons_init>:
{
   1ace8:	b570      	push	{r4, r5, r6, lr}
	button_handler_cb = button_handler;
   1acea:	4b60      	ldr	r3, [pc, #384]	; (1ae6c <dk_buttons_init+0x184>)
   1acec:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1acee:	4860      	ldr	r0, [pc, #384]	; (1ae70 <dk_buttons_init+0x188>)
   1acf0:	f00a f910 	bl	24f14 <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1acf4:	2400      	movs	r4, #0
   1acf6:	e013      	b.n	1ad20 <dk_buttons_init+0x38>
   1acf8:	4b5e      	ldr	r3, [pc, #376]	; (1ae74 <dk_buttons_init+0x18c>)
   1acfa:	4a5f      	ldr	r2, [pc, #380]	; (1ae78 <dk_buttons_init+0x190>)
   1acfc:	1a9b      	subs	r3, r3, r2
   1acfe:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot bind gpio device");
   1ad00:	f04f 0100 	mov.w	r1, #0
   1ad04:	2201      	movs	r2, #1
   1ad06:	f362 0102 	bfi	r1, r2, #0, #3
   1ad0a:	f36f 01c5 	bfc	r1, #3, #3
   1ad0e:	f363 118f 	bfi	r1, r3, #6, #10
   1ad12:	485a      	ldr	r0, [pc, #360]	; (1ae7c <dk_buttons_init+0x194>)
   1ad14:	f7f7 f89e 	bl	11e54 <log_0>
			return -ENODEV;
   1ad18:	f06f 0612 	mvn.w	r6, #18
   1ad1c:	e0a4      	b.n	1ae68 <dk_buttons_init+0x180>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1ad1e:	3401      	adds	r4, #1
   1ad20:	2c03      	cmp	r4, #3
   1ad22:	d82e      	bhi.n	1ad82 <dk_buttons_init+0x9a>
		button_devs[i] = device_get_binding(button_pins[i].port);
   1ad24:	4b56      	ldr	r3, [pc, #344]	; (1ae80 <dk_buttons_init+0x198>)
   1ad26:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1ad2a:	f001 fb85 	bl	1c438 <z_impl_device_get_binding>
   1ad2e:	4b55      	ldr	r3, [pc, #340]	; (1ae84 <dk_buttons_init+0x19c>)
   1ad30:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if (!button_devs[i]) {
   1ad34:	2800      	cmp	r0, #0
   1ad36:	d0df      	beq.n	1acf8 <dk_buttons_init+0x10>
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1ad38:	4b51      	ldr	r3, [pc, #324]	; (1ae80 <dk_buttons_init+0x198>)
   1ad3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ad3e:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   1ad40:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
   1ad42:	6905      	ldr	r5, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ad44:	2301      	movs	r3, #1
   1ad46:	fa03 f201 	lsl.w	r2, r3, r1
   1ad4a:	682b      	ldr	r3, [r5, #0]
   1ad4c:	ea23 0302 	bic.w	r3, r3, r2
   1ad50:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   1ad52:	6833      	ldr	r3, [r6, #0]
   1ad54:	f44f 7288 	mov.w	r2, #272	; 0x110
   1ad58:	4798      	blx	r3
		if (err) {
   1ad5a:	4606      	mov	r6, r0
   1ad5c:	2800      	cmp	r0, #0
   1ad5e:	d0de      	beq.n	1ad1e <dk_buttons_init+0x36>
   1ad60:	4b44      	ldr	r3, [pc, #272]	; (1ae74 <dk_buttons_init+0x18c>)
   1ad62:	4a45      	ldr	r2, [pc, #276]	; (1ae78 <dk_buttons_init+0x190>)
   1ad64:	1a9b      	subs	r3, r3, r2
   1ad66:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot configure button gpio");
   1ad68:	f04f 0100 	mov.w	r1, #0
   1ad6c:	2201      	movs	r2, #1
   1ad6e:	f362 0102 	bfi	r1, r2, #0, #3
   1ad72:	f36f 01c5 	bfc	r1, #3, #3
   1ad76:	f363 118f 	bfi	r1, r3, #6, #10
   1ad7a:	4843      	ldr	r0, [pc, #268]	; (1ae88 <dk_buttons_init+0x1a0>)
   1ad7c:	f7f7 f86a 	bl	11e54 <log_0>
			return err;
   1ad80:	e072      	b.n	1ae68 <dk_buttons_init+0x180>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1ad82:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
   1ad84:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1ad86:	2c03      	cmp	r4, #3
   1ad88:	d828      	bhi.n	1addc <dk_buttons_init+0xf4>
		err = gpio_pin_interrupt_configure(button_devs[i],
   1ad8a:	4b3e      	ldr	r3, [pc, #248]	; (1ae84 <dk_buttons_init+0x19c>)
   1ad8c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1ad90:	4b3b      	ldr	r3, [pc, #236]	; (1ae80 <dk_buttons_init+0x198>)
   1ad92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ad96:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   1ad98:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ad9a:	699e      	ldr	r6, [r3, #24]
   1ad9c:	2300      	movs	r3, #0
   1ad9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1ada2:	47b0      	blx	r6
		if (err) {
   1ada4:	4606      	mov	r6, r0
   1ada6:	b940      	cbnz	r0, 1adba <dk_buttons_init+0xd2>
		pin_mask |= BIT(button_pins[i].number);
   1ada8:	4b35      	ldr	r3, [pc, #212]	; (1ae80 <dk_buttons_init+0x198>)
   1adaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1adae:	791a      	ldrb	r2, [r3, #4]
   1adb0:	2301      	movs	r3, #1
   1adb2:	4093      	lsls	r3, r2
   1adb4:	431d      	orrs	r5, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1adb6:	3401      	adds	r4, #1
   1adb8:	e7e5      	b.n	1ad86 <dk_buttons_init+0x9e>
   1adba:	4b2e      	ldr	r3, [pc, #184]	; (1ae74 <dk_buttons_init+0x18c>)
   1adbc:	4a2e      	ldr	r2, [pc, #184]	; (1ae78 <dk_buttons_init+0x190>)
   1adbe:	1a9b      	subs	r3, r3, r2
   1adc0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot disable callbacks()");
   1adc2:	f04f 0100 	mov.w	r1, #0
   1adc6:	2201      	movs	r2, #1
   1adc8:	f362 0102 	bfi	r1, r2, #0, #3
   1adcc:	f36f 01c5 	bfc	r1, #3, #3
   1add0:	f363 118f 	bfi	r1, r3, #6, #10
   1add4:	482d      	ldr	r0, [pc, #180]	; (1ae8c <dk_buttons_init+0x1a4>)
   1add6:	f7f7 f83d 	bl	11e54 <log_0>
			return err;
   1adda:	e045      	b.n	1ae68 <dk_buttons_init+0x180>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1addc:	4b2c      	ldr	r3, [pc, #176]	; (1ae90 <dk_buttons_init+0x1a8>)
   1adde:	4a2d      	ldr	r2, [pc, #180]	; (1ae94 <dk_buttons_init+0x1ac>)
   1ade0:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   1ade2:	609d      	str	r5, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1ade4:	2400      	movs	r4, #0
   1ade6:	2c03      	cmp	r4, #3
   1ade8:	d81f      	bhi.n	1ae2a <dk_buttons_init+0x142>
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   1adea:	4b26      	ldr	r3, [pc, #152]	; (1ae84 <dk_buttons_init+0x19c>)
   1adec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   1adf0:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1adf2:	69db      	ldr	r3, [r3, #28]
   1adf4:	b133      	cbz	r3, 1ae04 <dk_buttons_init+0x11c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1adf6:	2201      	movs	r2, #1
   1adf8:	4925      	ldr	r1, [pc, #148]	; (1ae90 <dk_buttons_init+0x1a8>)
   1adfa:	4798      	blx	r3
		if (err) {
   1adfc:	4606      	mov	r6, r0
   1adfe:	b918      	cbnz	r0, 1ae08 <dk_buttons_init+0x120>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1ae00:	3401      	adds	r4, #1
   1ae02:	e7f0      	b.n	1ade6 <dk_buttons_init+0xfe>
		return -ENOTSUP;
   1ae04:	f06f 0685 	mvn.w	r6, #133	; 0x85
   1ae08:	4b1a      	ldr	r3, [pc, #104]	; (1ae74 <dk_buttons_init+0x18c>)
   1ae0a:	4a1b      	ldr	r2, [pc, #108]	; (1ae78 <dk_buttons_init+0x190>)
   1ae0c:	1a9b      	subs	r3, r3, r2
   1ae0e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot add callback");
   1ae10:	f04f 0100 	mov.w	r1, #0
   1ae14:	2201      	movs	r2, #1
   1ae16:	f362 0102 	bfi	r1, r2, #0, #3
   1ae1a:	f36f 01c5 	bfc	r1, #3, #3
   1ae1e:	f363 118f 	bfi	r1, r3, #6, #10
   1ae22:	481d      	ldr	r0, [pc, #116]	; (1ae98 <dk_buttons_init+0x1b0>)
   1ae24:	f7f7 f816 	bl	11e54 <log_0>
			return err;
   1ae28:	e01e      	b.n	1ae68 <dk_buttons_init+0x180>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1ae2a:	4c1c      	ldr	r4, [pc, #112]	; (1ae9c <dk_buttons_init+0x1b4>)
   1ae2c:	491c      	ldr	r1, [pc, #112]	; (1aea0 <dk_buttons_init+0x1b8>)
   1ae2e:	4620      	mov	r0, r4
   1ae30:	f00a fa01 	bl	25236 <k_work_init_delayable>
	state = STATE_SCANNING;
   1ae34:	4b1b      	ldr	r3, [pc, #108]	; (1aea4 <dk_buttons_init+0x1bc>)
   1ae36:	2201      	movs	r2, #1
   1ae38:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1ae3a:	2200      	movs	r2, #0
   1ae3c:	2300      	movs	r3, #0
   1ae3e:	4620      	mov	r0, r4
   1ae40:	f002 f944 	bl	1d0cc <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1ae44:	2100      	movs	r1, #0
   1ae46:	4608      	mov	r0, r1
   1ae48:	f7ff ff3a 	bl	1acc0 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1ae4c:	f7ff fe00 	bl	1aa50 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ae50:	4b15      	ldr	r3, [pc, #84]	; (1aea8 <dk_buttons_init+0x1c0>)
   1ae52:	f3bf 8f5b 	dmb	ish
   1ae56:	e853 2f00 	ldrex	r2, [r3]
   1ae5a:	e843 0100 	strex	r1, r0, [r3]
   1ae5e:	2900      	cmp	r1, #0
   1ae60:	d1f9      	bne.n	1ae56 <dk_buttons_init+0x16e>
   1ae62:	f3bf 8f5b 	dmb	ish
	return 0;
   1ae66:	2600      	movs	r6, #0
}
   1ae68:	4630      	mov	r0, r6
   1ae6a:	bd70      	pop	{r4, r5, r6, pc}
   1ae6c:	20002a7c 	.word	0x20002a7c
   1ae70:	20002a80 	.word	0x20002a80
   1ae74:	00025de8 	.word	0x00025de8
   1ae78:	00025d80 	.word	0x00025d80
   1ae7c:	00027c80 	.word	0x00027c80
   1ae80:	00027d30 	.word	0x00027d30
   1ae84:	20002a6c 	.word	0x20002a6c
   1ae88:	00027c98 	.word	0x00027c98
   1ae8c:	00027cb8 	.word	0x00027cb8
   1ae90:	20002a9c 	.word	0x20002a9c
   1ae94:	0001ab85 	.word	0x0001ab85
   1ae98:	00027cd4 	.word	0x00027cd4
   1ae9c:	20001bb0 	.word	0x20001bb0
   1aea0:	0001abf9 	.word	0x0001abf9
   1aea4:	20003a0b 	.word	0x20003a0b
   1aea8:	20002ac0 	.word	0x20002ac0

0001aeac <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
   1aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1aeae:	f030 030f 	bics.w	r3, r0, #15
   1aeb2:	d140      	bne.n	1af36 <dk_set_leds_state+0x8a>
   1aeb4:	4606      	mov	r6, r0
   1aeb6:	460f      	mov	r7, r1
   1aeb8:	f031 040f 	bics.w	r4, r1, #15
   1aebc:	d00a      	beq.n	1aed4 <dk_set_leds_state+0x28>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
   1aebe:	f06f 0515 	mvn.w	r5, #21
   1aec2:	e036      	b.n	1af32 <dk_set_leds_state+0x86>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1aec4:	2101      	movs	r1, #1
   1aec6:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
   1aec8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1aeca:	691b      	ldr	r3, [r3, #16]
   1aecc:	4798      	blx	r3
   1aece:	4605      	mov	r5, r0
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
						   led_pins[i].number, val);
			if (err) {
   1aed0:	b9ed      	cbnz	r5, 1af0e <dk_set_leds_state+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1aed2:	3401      	adds	r4, #1
   1aed4:	2c03      	cmp	r4, #3
   1aed6:	d82b      	bhi.n	1af30 <dk_set_leds_state+0x84>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1aed8:	fa26 f304 	lsr.w	r3, r6, r4
   1aedc:	f013 0f01 	tst.w	r3, #1
   1aee0:	d104      	bne.n	1aeec <dk_set_leds_state+0x40>
   1aee2:	fa27 f204 	lsr.w	r2, r7, r4
   1aee6:	f012 0f01 	tst.w	r2, #1
   1aeea:	d0f2      	beq.n	1aed2 <dk_set_leds_state+0x26>
			int err = gpio_pin_set_raw(led_devs[i],
   1aeec:	4a13      	ldr	r2, [pc, #76]	; (1af3c <dk_set_leds_state+0x90>)
   1aeee:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   1aef2:	4a13      	ldr	r2, [pc, #76]	; (1af40 <dk_set_leds_state+0x94>)
   1aef4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   1aef8:	7912      	ldrb	r2, [r2, #4]
	if (value != 0)	{
   1aefa:	f013 0f01 	tst.w	r3, #1
   1aefe:	d1e1      	bne.n	1aec4 <dk_set_leds_state+0x18>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1af00:	2101      	movs	r1, #1
   1af02:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
   1af04:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1af06:	68db      	ldr	r3, [r3, #12]
   1af08:	4798      	blx	r3
   1af0a:	4605      	mov	r5, r0
   1af0c:	e7e0      	b.n	1aed0 <dk_set_leds_state+0x24>
   1af0e:	4b0d      	ldr	r3, [pc, #52]	; (1af44 <dk_set_leds_state+0x98>)
   1af10:	4a0d      	ldr	r2, [pc, #52]	; (1af48 <dk_set_leds_state+0x9c>)
   1af12:	1a9b      	subs	r3, r3, r2
   1af14:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Cannot write LED gpio");
   1af16:	f04f 0100 	mov.w	r1, #0
   1af1a:	2201      	movs	r2, #1
   1af1c:	f362 0102 	bfi	r1, r2, #0, #3
   1af20:	f36f 01c5 	bfc	r1, #3, #3
   1af24:	f363 118f 	bfi	r1, r3, #6, #10
   1af28:	4808      	ldr	r0, [pc, #32]	; (1af4c <dk_set_leds_state+0xa0>)
   1af2a:	f7f6 ff93 	bl	11e54 <log_0>
				return err;
   1af2e:	e000      	b.n	1af32 <dk_set_leds_state+0x86>
			}
		}
	}

	return 0;
   1af30:	2500      	movs	r5, #0
}
   1af32:	4628      	mov	r0, r5
   1af34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   1af36:	f06f 0515 	mvn.w	r5, #21
   1af3a:	e7fa      	b.n	1af32 <dk_set_leds_state+0x86>
   1af3c:	20002ab0 	.word	0x20002ab0
   1af40:	00027d50 	.word	0x00027d50
   1af44:	00025de8 	.word	0x00025de8
   1af48:	00025d80 	.word	0x00025d80
   1af4c:	00027ce8 	.word	0x00027ce8

0001af50 <dk_leds_init>:
{
   1af50:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1af52:	2400      	movs	r4, #0
   1af54:	e013      	b.n	1af7e <dk_leds_init+0x2e>
   1af56:	4b26      	ldr	r3, [pc, #152]	; (1aff0 <dk_leds_init+0xa0>)
   1af58:	4a26      	ldr	r2, [pc, #152]	; (1aff4 <dk_leds_init+0xa4>)
   1af5a:	1a9b      	subs	r3, r3, r2
   1af5c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot bind gpio device");
   1af5e:	f04f 0100 	mov.w	r1, #0
   1af62:	2201      	movs	r2, #1
   1af64:	f362 0102 	bfi	r1, r2, #0, #3
   1af68:	f36f 01c5 	bfc	r1, #3, #3
   1af6c:	f363 118f 	bfi	r1, r3, #6, #10
   1af70:	4821      	ldr	r0, [pc, #132]	; (1aff8 <dk_leds_init+0xa8>)
   1af72:	f7f6 ff6f 	bl	11e54 <log_0>
			return -ENODEV;
   1af76:	f06f 0512 	mvn.w	r5, #18
   1af7a:	e036      	b.n	1afea <dk_leds_init+0x9a>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1af7c:	3401      	adds	r4, #1
   1af7e:	2c03      	cmp	r4, #3
   1af80:	d82e      	bhi.n	1afe0 <dk_leds_init+0x90>
		led_devs[i] = device_get_binding(led_pins[i].port);
   1af82:	4b1e      	ldr	r3, [pc, #120]	; (1affc <dk_leds_init+0xac>)
   1af84:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1af88:	f001 fa56 	bl	1c438 <z_impl_device_get_binding>
   1af8c:	4b1c      	ldr	r3, [pc, #112]	; (1b000 <dk_leds_init+0xb0>)
   1af8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if (!led_devs[i]) {
   1af92:	2800      	cmp	r0, #0
   1af94:	d0df      	beq.n	1af56 <dk_leds_init+0x6>
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   1af96:	4b19      	ldr	r3, [pc, #100]	; (1affc <dk_leds_init+0xac>)
   1af98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1af9c:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   1af9e:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
   1afa0:	6905      	ldr	r5, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1afa2:	2301      	movs	r3, #1
   1afa4:	fa03 f201 	lsl.w	r2, r3, r1
   1afa8:	682b      	ldr	r3, [r5, #0]
   1afaa:	ea23 0302 	bic.w	r3, r3, r2
   1afae:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   1afb0:	6833      	ldr	r3, [r6, #0]
   1afb2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1afb6:	4798      	blx	r3
		if (err) {
   1afb8:	4605      	mov	r5, r0
   1afba:	2800      	cmp	r0, #0
   1afbc:	d0de      	beq.n	1af7c <dk_leds_init+0x2c>
   1afbe:	4b0c      	ldr	r3, [pc, #48]	; (1aff0 <dk_leds_init+0xa0>)
   1afc0:	4a0c      	ldr	r2, [pc, #48]	; (1aff4 <dk_leds_init+0xa4>)
   1afc2:	1a9b      	subs	r3, r3, r2
   1afc4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot configure LED gpio");
   1afc6:	f04f 0100 	mov.w	r1, #0
   1afca:	2201      	movs	r2, #1
   1afcc:	f362 0102 	bfi	r1, r2, #0, #3
   1afd0:	f36f 01c5 	bfc	r1, #3, #3
   1afd4:	f363 118f 	bfi	r1, r3, #6, #10
   1afd8:	480a      	ldr	r0, [pc, #40]	; (1b004 <dk_leds_init+0xb4>)
   1afda:	f7f6 ff3b 	bl	11e54 <log_0>
			return err;
   1afde:	e004      	b.n	1afea <dk_leds_init+0x9a>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   1afe0:	210f      	movs	r1, #15
   1afe2:	2000      	movs	r0, #0
   1afe4:	f7ff ff62 	bl	1aeac <dk_set_leds_state>
   1afe8:	4605      	mov	r5, r0
}
   1afea:	4628      	mov	r0, r5
   1afec:	bd70      	pop	{r4, r5, r6, pc}
   1afee:	bf00      	nop
   1aff0:	00025de8 	.word	0x00025de8
   1aff4:	00025d80 	.word	0x00025d80
   1aff8:	00027c80 	.word	0x00027c80
   1affc:	00027d50 	.word	0x00027d50
   1b000:	20002ab0 	.word	0x20002ab0
   1b004:	00027d00 	.word	0x00027d00

0001b008 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1b008:	b508      	push	{r3, lr}
   1b00a:	4602      	mov	r2, r0
   1b00c:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1b00e:	4802      	ldr	r0, [pc, #8]	; (1b018 <multithreading_lock_acquire+0x10>)
   1b010:	f001 fd42 	bl	1ca98 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1b014:	bd08      	pop	{r3, pc}
   1b016:	bf00      	nop
   1b018:	20000704 	.word	0x20000704

0001b01c <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1b01c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1b01e:	4802      	ldr	r0, [pc, #8]	; (1b028 <multithreading_lock_release+0xc>)
   1b020:	f001 fdc4 	bl	1cbac <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1b024:	bd08      	pop	{r3, pc}
   1b026:	bf00      	nop
   1b028:	20000704 	.word	0x20000704

0001b02c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1b02c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1b02e:	f7f6 ff41 	bl	11eb4 <z_impl_log_panic>
   1b032:	4b09      	ldr	r3, [pc, #36]	; (1b058 <k_sys_fatal_error_handler+0x2c>)
   1b034:	4a09      	ldr	r2, [pc, #36]	; (1b05c <k_sys_fatal_error_handler+0x30>)
   1b036:	1a9b      	subs	r3, r3, r2
   1b038:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1b03a:	f04f 0100 	mov.w	r1, #0
   1b03e:	2201      	movs	r2, #1
   1b040:	f362 0102 	bfi	r1, r2, #0, #3
   1b044:	f36f 01c5 	bfc	r1, #3, #3
   1b048:	f363 118f 	bfi	r1, r3, #6, #10
   1b04c:	4804      	ldr	r0, [pc, #16]	; (1b060 <k_sys_fatal_error_handler+0x34>)
   1b04e:	f7f6 ff01 	bl	11e54 <log_0>
		sys_arch_reboot(0);
   1b052:	2000      	movs	r0, #0
   1b054:	f7f8 ffc6 	bl	13fe4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1b058:	00025df0 	.word	0x00025df0
   1b05c:	00025d80 	.word	0x00025d80
   1b060:	00027d70 	.word	0x00027d70

0001b064 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1b064:	b510      	push	{r4, lr}
   1b066:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1b068:	4a03      	ldr	r2, [pc, #12]	; (1b078 <rand_prio_low_vector_get_blocking+0x14>)
   1b06a:	6810      	ldr	r0, [r2, #0]
   1b06c:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1b06e:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1b070:	680c      	ldr	r4, [r1, #0]
   1b072:	4619      	mov	r1, r3
   1b074:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1b076:	bd10      	pop	{r4, pc}
   1b078:	20002ac4 	.word	0x20002ac4

0001b07c <sdc_assertion_handler>:
{
   1b07c:	b538      	push	{r3, r4, r5, lr}
   1b07e:	460d      	mov	r5, r1
   1b080:	4b0d      	ldr	r3, [pc, #52]	; (1b0b8 <sdc_assertion_handler+0x3c>)
   1b082:	4a0e      	ldr	r2, [pc, #56]	; (1b0bc <sdc_assertion_handler+0x40>)
   1b084:	1a9b      	subs	r3, r3, r2
   1b086:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1b088:	f04f 0400 	mov.w	r4, #0
   1b08c:	2201      	movs	r2, #1
   1b08e:	f362 0402 	bfi	r4, r2, #0, #3
   1b092:	f36f 04c5 	bfc	r4, #3, #3
   1b096:	f363 148f 	bfi	r4, r3, #6, #10
   1b09a:	f7f6 fcad 	bl	119f8 <z_log_strdup>
   1b09e:	4601      	mov	r1, r0
   1b0a0:	4623      	mov	r3, r4
   1b0a2:	462a      	mov	r2, r5
   1b0a4:	4806      	ldr	r0, [pc, #24]	; (1b0c0 <sdc_assertion_handler+0x44>)
   1b0a6:	f7f6 fe55 	bl	11d54 <log_2>
	k_oops();
   1b0aa:	4040      	eors	r0, r0
   1b0ac:	f380 8811 	msr	BASEPRI, r0
   1b0b0:	f04f 0003 	mov.w	r0, #3
   1b0b4:	df02      	svc	2
}
   1b0b6:	bd38      	pop	{r3, r4, r5, pc}
   1b0b8:	00025e48 	.word	0x00025e48
   1b0bc:	00025d80 	.word	0x00025d80
   1b0c0:	00027d90 	.word	0x00027d90

0001b0c4 <host_signal>:
{
   1b0c4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1b0c6:	4802      	ldr	r0, [pc, #8]	; (1b0d0 <host_signal+0xc>)
   1b0c8:	f001 fdf0 	bl	1ccac <z_impl_k_sem_give>
}
   1b0cc:	bd08      	pop	{r3, pc}
   1b0ce:	bf00      	nop
   1b0d0:	2000076c 	.word	0x2000076c

0001b0d4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1b0d4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1b0d6:	4803      	ldr	r0, [pc, #12]	; (1b0e4 <hci_driver_init+0x10>)
   1b0d8:	f7fa fe98 	bl	15e0c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1b0dc:	4802      	ldr	r0, [pc, #8]	; (1b0e8 <hci_driver_init+0x14>)
   1b0de:	f7e9 f9f9 	bl	44d4 <sdc_init>
	return err;
}
   1b0e2:	bd08      	pop	{r3, pc}
   1b0e4:	00027eb0 	.word	0x00027eb0
   1b0e8:	0001b07d 	.word	0x0001b07d

0001b0ec <acl_handle>:
{
   1b0ec:	b538      	push	{r3, r4, r5, lr}
   1b0ee:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b0f0:	f04f 30ff 	mov.w	r0, #4294967295
   1b0f4:	f04f 31ff 	mov.w	r1, #4294967295
   1b0f8:	f7ff ff86 	bl	1b008 <multithreading_lock_acquire>
	if (!errcode) {
   1b0fc:	4605      	mov	r5, r0
   1b0fe:	b108      	cbz	r0, 1b104 <acl_handle+0x18>
}
   1b100:	4628      	mov	r0, r5
   1b102:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1b104:	68a0      	ldr	r0, [r4, #8]
   1b106:	f7f2 fa64 	bl	d5d2 <sdc_hci_data_put>
   1b10a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1b10c:	f7ff ff86 	bl	1b01c <multithreading_lock_release>
		if (errcode) {
   1b110:	2d00      	cmp	r5, #0
   1b112:	d0f5      	beq.n	1b100 <acl_handle+0x14>
   1b114:	4801      	ldr	r0, [pc, #4]	; (1b11c <acl_handle+0x30>)
   1b116:	f001 fdc9 	bl	1ccac <z_impl_k_sem_give>
}
   1b11a:	e7f1      	b.n	1b100 <acl_handle+0x14>
   1b11c:	2000076c 	.word	0x2000076c

0001b120 <cmd_handle>:
{
   1b120:	b538      	push	{r3, r4, r5, lr}
   1b122:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b124:	f04f 30ff 	mov.w	r0, #4294967295
   1b128:	f04f 31ff 	mov.w	r1, #4294967295
   1b12c:	f7ff ff6c 	bl	1b008 <multithreading_lock_acquire>
	if (!errcode) {
   1b130:	4604      	mov	r4, r0
   1b132:	b110      	cbz	r0, 1b13a <cmd_handle+0x1a>
	if (errcode) {
   1b134:	b144      	cbz	r4, 1b148 <cmd_handle+0x28>
}
   1b136:	4620      	mov	r0, r4
   1b138:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1b13a:	68a8      	ldr	r0, [r5, #8]
   1b13c:	f000 f9c4 	bl	1b4c8 <hci_internal_cmd_put>
   1b140:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b142:	f7ff ff6b 	bl	1b01c <multithreading_lock_release>
   1b146:	e7f5      	b.n	1b134 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   1b148:	4801      	ldr	r0, [pc, #4]	; (1b150 <cmd_handle+0x30>)
   1b14a:	f001 fdaf 	bl	1ccac <z_impl_k_sem_give>
	return 0;
   1b14e:	e7f2      	b.n	1b136 <cmd_handle+0x16>
   1b150:	2000076c 	.word	0x2000076c

0001b154 <rand_prio_high_vector_get>:
{
   1b154:	b538      	push	{r3, r4, r5, lr}
   1b156:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1b158:	4b07      	ldr	r3, [pc, #28]	; (1b178 <rand_prio_high_vector_get+0x24>)
   1b15a:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1b15c:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1b15e:	685d      	ldr	r5, [r3, #4]
   1b160:	b13d      	cbz	r5, 1b172 <rand_prio_high_vector_get+0x1e>
   1b162:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1b164:	2300      	movs	r3, #0
   1b166:	4621      	mov	r1, r4
   1b168:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1b16a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1b16e:	b2c0      	uxtb	r0, r0
   1b170:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1b172:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b176:	e7f8      	b.n	1b16a <rand_prio_high_vector_get+0x16>
   1b178:	20002ac4 	.word	0x20002ac4

0001b17c <rand_prio_low_vector_get>:
{
   1b17c:	b538      	push	{r3, r4, r5, lr}
   1b17e:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1b180:	4b07      	ldr	r3, [pc, #28]	; (1b1a0 <rand_prio_low_vector_get+0x24>)
   1b182:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   1b184:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1b186:	685d      	ldr	r5, [r3, #4]
   1b188:	b13d      	cbz	r5, 1b19a <rand_prio_low_vector_get+0x1e>
   1b18a:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1b18c:	2300      	movs	r3, #0
   1b18e:	4621      	mov	r1, r4
   1b190:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1b192:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1b196:	b2c0      	uxtb	r0, r0
   1b198:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1b19a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b19e:	e7f8      	b.n	1b192 <rand_prio_low_vector_get+0x16>
   1b1a0:	20002ac4 	.word	0x20002ac4

0001b1a4 <event_packet_process>:
{
   1b1a4:	b570      	push	{r4, r5, r6, lr}
   1b1a6:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1b1a8:	f009 f9c7 	bl	2453a <event_packet_is_discardable>
   1b1ac:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1b1ae:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1b1b0:	461d      	mov	r5, r3
   1b1b2:	b183      	cbz	r3, 1b1d6 <event_packet_process+0x32>
   1b1b4:	2200      	movs	r2, #0
   1b1b6:	2300      	movs	r3, #0
   1b1b8:	4629      	mov	r1, r5
   1b1ba:	f7f9 f8a5 	bl	14308 <bt_buf_get_evt>
	if (!evt_buf) {
   1b1be:	4606      	mov	r6, r0
   1b1c0:	b170      	cbz	r0, 1b1e0 <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1b1c2:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b1c4:	3202      	adds	r2, #2
   1b1c6:	4621      	mov	r1, r4
   1b1c8:	3008      	adds	r0, #8
   1b1ca:	f008 fdc0 	bl	23d4e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1b1ce:	4630      	mov	r0, r6
   1b1d0:	f7fa fdc8 	bl	15d64 <bt_recv>
}
   1b1d4:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1b1d6:	f04f 32ff 	mov.w	r2, #4294967295
   1b1da:	f04f 33ff 	mov.w	r3, #4294967295
   1b1de:	e7eb      	b.n	1b1b8 <event_packet_process+0x14>
		if (discardable) {
   1b1e0:	2d00      	cmp	r5, #0
   1b1e2:	d1f7      	bne.n	1b1d4 <event_packet_process+0x30>
   1b1e4:	4b08      	ldr	r3, [pc, #32]	; (1b208 <event_packet_process+0x64>)
   1b1e6:	4a09      	ldr	r2, [pc, #36]	; (1b20c <event_packet_process+0x68>)
   1b1e8:	1a9b      	subs	r3, r3, r2
   1b1ea:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   1b1ec:	f04f 0100 	mov.w	r1, #0
   1b1f0:	2201      	movs	r2, #1
   1b1f2:	f362 0102 	bfi	r1, r2, #0, #3
   1b1f6:	f36f 01c5 	bfc	r1, #3, #3
   1b1fa:	f363 118f 	bfi	r1, r3, #6, #10
   1b1fe:	4804      	ldr	r0, [pc, #16]	; (1b210 <event_packet_process+0x6c>)
   1b200:	f7f6 fe28 	bl	11e54 <log_0>
		return;
   1b204:	e7e6      	b.n	1b1d4 <event_packet_process+0x30>
   1b206:	bf00      	nop
   1b208:	00025e48 	.word	0x00025e48
   1b20c:	00025d80 	.word	0x00025d80
   1b210:	00027db8 	.word	0x00027db8

0001b214 <data_packet_process>:
{
   1b214:	b538      	push	{r3, r4, r5, lr}
   1b216:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1b218:	f04f 32ff 	mov.w	r2, #4294967295
   1b21c:	f04f 33ff 	mov.w	r3, #4294967295
   1b220:	2003      	movs	r0, #3
   1b222:	f7f9 f847 	bl	142b4 <bt_buf_get_rx>
	if (!data_buf) {
   1b226:	b150      	cbz	r0, 1b23e <data_packet_process+0x2a>
   1b228:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1b22a:	8862      	ldrh	r2, [r4, #2]
   1b22c:	3204      	adds	r2, #4
   1b22e:	4621      	mov	r1, r4
   1b230:	3008      	adds	r0, #8
   1b232:	f008 fd8c 	bl	23d4e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1b236:	4628      	mov	r0, r5
   1b238:	f7fa fd94 	bl	15d64 <bt_recv>
}
   1b23c:	bd38      	pop	{r3, r4, r5, pc}
   1b23e:	4b08      	ldr	r3, [pc, #32]	; (1b260 <data_packet_process+0x4c>)
   1b240:	4a08      	ldr	r2, [pc, #32]	; (1b264 <data_packet_process+0x50>)
   1b242:	1a9b      	subs	r3, r3, r2
   1b244:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   1b246:	f04f 0100 	mov.w	r1, #0
   1b24a:	2201      	movs	r2, #1
   1b24c:	f362 0102 	bfi	r1, r2, #0, #3
   1b250:	f36f 01c5 	bfc	r1, #3, #3
   1b254:	f363 118f 	bfi	r1, r3, #6, #10
   1b258:	4803      	ldr	r0, [pc, #12]	; (1b268 <data_packet_process+0x54>)
   1b25a:	f7f6 fdfb 	bl	11e54 <log_0>
		return;
   1b25e:	e7ed      	b.n	1b23c <data_packet_process+0x28>
   1b260:	00025e48 	.word	0x00025e48
   1b264:	00025d80 	.word	0x00025d80
   1b268:	00027dd4 	.word	0x00027dd4

0001b26c <recv_thread>:
{
   1b26c:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   1b26e:	2500      	movs	r5, #0
	bool received_evt = false;
   1b270:	462c      	mov	r4, r5
   1b272:	e00a      	b.n	1b28a <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   1b274:	4d0b      	ldr	r5, [pc, #44]	; (1b2a4 <recv_thread+0x38>)
   1b276:	4628      	mov	r0, r5
   1b278:	f009 f98f 	bl	2459a <fetch_and_process_hci_evt>
   1b27c:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   1b27e:	4628      	mov	r0, r5
   1b280:	f009 f9a4 	bl	245cc <fetch_and_process_acl_data>
   1b284:	4605      	mov	r5, r0
	z_impl_k_yield();
   1b286:	f002 fa2d 	bl	1d6e4 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   1b28a:	2c00      	cmp	r4, #0
   1b28c:	d1f2      	bne.n	1b274 <recv_thread+0x8>
   1b28e:	2d00      	cmp	r5, #0
   1b290:	d1f0      	bne.n	1b274 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1b292:	f04f 32ff 	mov.w	r2, #4294967295
   1b296:	f04f 33ff 	mov.w	r3, #4294967295
   1b29a:	4803      	ldr	r0, [pc, #12]	; (1b2a8 <recv_thread+0x3c>)
   1b29c:	f001 fd2e 	bl	1ccfc <z_impl_k_sem_take>
   1b2a0:	e7e8      	b.n	1b274 <recv_thread+0x8>
   1b2a2:	bf00      	nop
   1b2a4:	20002ac8 	.word	0x20002ac8
   1b2a8:	2000076c 	.word	0x2000076c

0001b2ac <configure_memory_usage>:
{
   1b2ac:	b500      	push	{lr}
   1b2ae:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   1b2b0:	2101      	movs	r1, #1
   1b2b2:	f88d 1004 	strb.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b2b6:	aa01      	add	r2, sp, #4
   1b2b8:	2000      	movs	r0, #0
   1b2ba:	f7e9 f885 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b2be:	2800      	cmp	r0, #0
   1b2c0:	db3b      	blt.n	1b33a <configure_memory_usage+0x8e>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1b2c2:	2000      	movs	r0, #0
   1b2c4:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b2c8:	aa01      	add	r2, sp, #4
   1b2ca:	2102      	movs	r1, #2
   1b2cc:	f7e9 f87c 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b2d0:	2800      	cmp	r0, #0
   1b2d2:	db32      	blt.n	1b33a <configure_memory_usage+0x8e>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1b2d4:	231b      	movs	r3, #27
   1b2d6:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1b2da:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   1b2de:	2302      	movs	r3, #2
   1b2e0:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   1b2e4:	2103      	movs	r1, #3
   1b2e6:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b2ea:	aa01      	add	r2, sp, #4
   1b2ec:	2000      	movs	r0, #0
   1b2ee:	f7e9 f86b 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b2f2:	2800      	cmp	r0, #0
   1b2f4:	db21      	blt.n	1b33a <configure_memory_usage+0x8e>
	cfg.event_length.event_length_us =
   1b2f6:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1b2fa:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b2fc:	aa01      	add	r2, sp, #4
   1b2fe:	2104      	movs	r1, #4
   1b300:	2000      	movs	r0, #0
   1b302:	f7e9 f861 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b306:	2800      	cmp	r0, #0
   1b308:	db17      	blt.n	1b33a <configure_memory_usage+0x8e>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1b30a:	2000      	movs	r0, #0
   1b30c:	f88d 0004 	strb.w	r0, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b310:	aa01      	add	r2, sp, #4
   1b312:	2105      	movs	r1, #5
   1b314:	f7e9 f858 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   1b318:	2800      	cmp	r0, #0
   1b31a:	db0e      	blt.n	1b33a <configure_memory_usage+0x8e>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1b31c:	2303      	movs	r3, #3
   1b31e:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b322:	aa01      	add	r2, sp, #4
   1b324:	2106      	movs	r1, #6
   1b326:	2000      	movs	r0, #0
   1b328:	f7e9 f84e 	bl	43c8 <sdc_cfg_set>
		if (required_memory < 0) {
   1b32c:	2800      	cmp	r0, #0
   1b32e:	db04      	blt.n	1b33a <configure_memory_usage+0x8e>
	if (required_memory > sizeof(sdc_mempool)) {
   1b330:	f240 4386 	movw	r3, #1158	; 0x486
   1b334:	4298      	cmp	r0, r3
   1b336:	d803      	bhi.n	1b340 <configure_memory_usage+0x94>
	return 0;
   1b338:	2000      	movs	r0, #0
}
   1b33a:	b003      	add	sp, #12
   1b33c:	f85d fb04 	ldr.w	pc, [sp], #4
   1b340:	4a0d      	ldr	r2, [pc, #52]	; (1b378 <configure_memory_usage+0xcc>)
   1b342:	4b0e      	ldr	r3, [pc, #56]	; (1b37c <configure_memory_usage+0xd0>)
   1b344:	1ad2      	subs	r2, r2, r3
   1b346:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   1b348:	f04f 0300 	mov.w	r3, #0
   1b34c:	2101      	movs	r1, #1
   1b34e:	f361 0302 	bfi	r3, r1, #0, #3
   1b352:	f36f 03c5 	bfc	r3, #3, #3
   1b356:	f362 138f 	bfi	r3, r2, #6, #10
   1b35a:	4602      	mov	r2, r0
   1b35c:	f240 4186 	movw	r1, #1158	; 0x486
   1b360:	4807      	ldr	r0, [pc, #28]	; (1b380 <configure_memory_usage+0xd4>)
   1b362:	f7f6 fcf7 	bl	11d54 <log_2>
		k_panic();
   1b366:	4040      	eors	r0, r0
   1b368:	f380 8811 	msr	BASEPRI, r0
   1b36c:	f04f 0004 	mov.w	r0, #4
   1b370:	df02      	svc	2
		return -ENOMEM;
   1b372:	f06f 000b 	mvn.w	r0, #11
   1b376:	e7e0      	b.n	1b33a <configure_memory_usage+0x8e>
   1b378:	00025e48 	.word	0x00025e48
   1b37c:	00025d80 	.word	0x00025d80
   1b380:	00027df0 	.word	0x00027df0

0001b384 <hci_driver_open>:
{
   1b384:	b530      	push	{r4, r5, lr}
   1b386:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b388:	4d41      	ldr	r5, [pc, #260]	; (1b490 <hci_driver_open+0x10c>)
   1b38a:	2200      	movs	r2, #0
   1b38c:	2300      	movs	r3, #0
   1b38e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b392:	2400      	movs	r4, #0
   1b394:	9404      	str	r4, [sp, #16]
   1b396:	f06f 0309 	mvn.w	r3, #9
   1b39a:	9303      	str	r3, [sp, #12]
   1b39c:	9402      	str	r4, [sp, #8]
   1b39e:	9401      	str	r4, [sp, #4]
   1b3a0:	9400      	str	r4, [sp, #0]
   1b3a2:	4b3c      	ldr	r3, [pc, #240]	; (1b494 <hci_driver_open+0x110>)
   1b3a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b3a8:	493b      	ldr	r1, [pc, #236]	; (1b498 <hci_driver_open+0x114>)
   1b3aa:	4628      	mov	r0, r5
   1b3ac:	f009 fd74 	bl	24e98 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1b3b0:	493a      	ldr	r1, [pc, #232]	; (1b49c <hci_driver_open+0x118>)
   1b3b2:	4628      	mov	r0, r5
   1b3b4:	f001 fa82 	bl	1c8bc <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1b3b8:	a80b      	add	r0, sp, #44	; 0x2c
   1b3ba:	f7e8 fff7 	bl	43ac <sdc_build_revision_get>
   1b3be:	4a38      	ldr	r2, [pc, #224]	; (1b4a0 <hci_driver_open+0x11c>)
   1b3c0:	4b38      	ldr	r3, [pc, #224]	; (1b4a4 <hci_driver_open+0x120>)
   1b3c2:	1ad2      	subs	r2, r2, r3
   1b3c4:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1b3c6:	f04f 0300 	mov.w	r3, #0
   1b3ca:	2103      	movs	r1, #3
   1b3cc:	f361 0302 	bfi	r3, r1, #0, #3
   1b3d0:	f364 03c5 	bfi	r3, r4, #3, #3
   1b3d4:	f362 138f 	bfi	r3, r2, #6, #10
   1b3d8:	2214      	movs	r2, #20
   1b3da:	a90b      	add	r1, sp, #44	; 0x2c
   1b3dc:	4832      	ldr	r0, [pc, #200]	; (1b4a8 <hci_driver_open+0x124>)
   1b3de:	f7f6 fd17 	bl	11e10 <log_hexdump>
	err = configure_supported_features();
   1b3e2:	f009 f90c 	bl	245fe <configure_supported_features>
	if (err) {
   1b3e6:	4604      	mov	r4, r0
   1b3e8:	b110      	cbz	r0, 1b3f0 <hci_driver_open+0x6c>
}
   1b3ea:	4620      	mov	r0, r4
   1b3ec:	b011      	add	sp, #68	; 0x44
   1b3ee:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   1b3f0:	f7ff ff5c 	bl	1b2ac <configure_memory_usage>
	if (err) {
   1b3f4:	4604      	mov	r4, r0
   1b3f6:	2800      	cmp	r0, #0
   1b3f8:	d1f7      	bne.n	1b3ea <hci_driver_open+0x66>
   1b3fa:	482c      	ldr	r0, [pc, #176]	; (1b4ac <hci_driver_open+0x128>)
   1b3fc:	f001 f81c 	bl	1c438 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b400:	4b2b      	ldr	r3, [pc, #172]	; (1b4b0 <hci_driver_open+0x12c>)
   1b402:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1b404:	b1a8      	cbz	r0, 1b432 <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   1b406:	4a2b      	ldr	r2, [pc, #172]	; (1b4b4 <hci_driver_open+0x130>)
   1b408:	ab08      	add	r3, sp, #32
   1b40a:	ca07      	ldmia	r2, {r0, r1, r2}
   1b40c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1b410:	4618      	mov	r0, r3
   1b412:	f7e9 f971 	bl	46f8 <sdc_rand_source_register>
	if (err) {
   1b416:	4604      	mov	r4, r0
   1b418:	b9f0      	cbnz	r0, 1b458 <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1b41a:	f04f 30ff 	mov.w	r0, #4294967295
   1b41e:	f04f 31ff 	mov.w	r1, #4294967295
   1b422:	f7ff fdf1 	bl	1b008 <multithreading_lock_acquire>
	if (!err) {
   1b426:	4605      	mov	r5, r0
   1b428:	b350      	cbz	r0, 1b480 <hci_driver_open+0xfc>
	if (err < 0) {
   1b42a:	2d00      	cmp	r5, #0
   1b42c:	dadd      	bge.n	1b3ea <hci_driver_open+0x66>
		return err;
   1b42e:	462c      	mov	r4, r5
   1b430:	e7db      	b.n	1b3ea <hci_driver_open+0x66>
   1b432:	4b1b      	ldr	r3, [pc, #108]	; (1b4a0 <hci_driver_open+0x11c>)
   1b434:	4a1b      	ldr	r2, [pc, #108]	; (1b4a4 <hci_driver_open+0x120>)
   1b436:	1a9b      	subs	r3, r3, r2
   1b438:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   1b43a:	f04f 0100 	mov.w	r1, #0
   1b43e:	2201      	movs	r2, #1
   1b440:	f362 0102 	bfi	r1, r2, #0, #3
   1b444:	f36f 01c5 	bfc	r1, #3, #3
   1b448:	f363 118f 	bfi	r1, r3, #6, #10
   1b44c:	481a      	ldr	r0, [pc, #104]	; (1b4b8 <hci_driver_open+0x134>)
   1b44e:	f7f6 fd01 	bl	11e54 <log_0>
		return -ENODEV;
   1b452:	f06f 0412 	mvn.w	r4, #18
   1b456:	e7c8      	b.n	1b3ea <hci_driver_open+0x66>
   1b458:	4b11      	ldr	r3, [pc, #68]	; (1b4a0 <hci_driver_open+0x11c>)
   1b45a:	4a12      	ldr	r2, [pc, #72]	; (1b4a4 <hci_driver_open+0x120>)
   1b45c:	1a9b      	subs	r3, r3, r2
   1b45e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   1b460:	f04f 0200 	mov.w	r2, #0
   1b464:	2101      	movs	r1, #1
   1b466:	f361 0202 	bfi	r2, r1, #0, #3
   1b46a:	f36f 02c5 	bfc	r2, #3, #3
   1b46e:	f363 128f 	bfi	r2, r3, #6, #10
   1b472:	4601      	mov	r1, r0
   1b474:	4811      	ldr	r0, [pc, #68]	; (1b4bc <hci_driver_open+0x138>)
   1b476:	f7f6 fc37 	bl	11ce8 <log_1>
		return -EINVAL;
   1b47a:	f06f 0415 	mvn.w	r4, #21
   1b47e:	e7b4      	b.n	1b3ea <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   1b480:	490f      	ldr	r1, [pc, #60]	; (1b4c0 <hci_driver_open+0x13c>)
   1b482:	4810      	ldr	r0, [pc, #64]	; (1b4c4 <hci_driver_open+0x140>)
   1b484:	f7e8 fffe 	bl	4484 <sdc_enable>
   1b488:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1b48a:	f7ff fdc7 	bl	1b01c <multithreading_lock_release>
   1b48e:	e7cc      	b.n	1b42a <hci_driver_open+0xa6>
   1b490:	20001be0 	.word	0x20001be0
   1b494:	0001b26d 	.word	0x0001b26d
   1b498:	20004940 	.word	0x20004940
   1b49c:	00027e14 	.word	0x00027e14
   1b4a0:	00025e48 	.word	0x00025e48
   1b4a4:	00025d80 	.word	0x00025d80
   1b4a8:	00027e1c 	.word	0x00027e1c
   1b4ac:	00027c14 	.word	0x00027c14
   1b4b0:	20002ac4 	.word	0x20002ac4
   1b4b4:	00025f1c 	.word	0x00025f1c
   1b4b8:	00027e44 	.word	0x00027e44
   1b4bc:	00027e64 	.word	0x00027e64
   1b4c0:	20002b10 	.word	0x20002b10
   1b4c4:	0001b0c5 	.word	0x0001b0c5

0001b4c8 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1b4c8:	4b0b      	ldr	r3, [pc, #44]	; (1b4f8 <hci_internal_cmd_put+0x30>)
   1b4ca:	781b      	ldrb	r3, [r3, #0]
   1b4cc:	b96b      	cbnz	r3, 1b4ea <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1b4ce:	7883      	ldrb	r3, [r0, #2]
   1b4d0:	3303      	adds	r3, #3
   1b4d2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1b4d6:	dc0b      	bgt.n	1b4f0 <hci_internal_cmd_put+0x28>
{
   1b4d8:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1b4da:	4c07      	ldr	r4, [pc, #28]	; (1b4f8 <hci_internal_cmd_put+0x30>)
   1b4dc:	1c61      	adds	r1, r4, #1
   1b4de:	f009 fb22 	bl	24b26 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1b4e2:	2301      	movs	r3, #1
   1b4e4:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1b4e6:	2000      	movs	r0, #0
}
   1b4e8:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1b4ea:	f04f 30ff 	mov.w	r0, #4294967295
   1b4ee:	4770      	bx	lr
		return -EINVAL;
   1b4f0:	f06f 0015 	mvn.w	r0, #21
}
   1b4f4:	4770      	bx	lr
   1b4f6:	bf00      	nop
   1b4f8:	20002f98 	.word	0x20002f98

0001b4fc <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1b4fc:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1b4fe:	4b07      	ldr	r3, [pc, #28]	; (1b51c <hci_internal_evt_get+0x20>)
   1b500:	781b      	ldrb	r3, [r3, #0]
   1b502:	b143      	cbz	r3, 1b516 <hci_internal_evt_get+0x1a>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   1b504:	4c05      	ldr	r4, [pc, #20]	; (1b51c <hci_internal_evt_get+0x20>)
   1b506:	78a2      	ldrb	r2, [r4, #2]
   1b508:	3202      	adds	r2, #2
   1b50a:	1c61      	adds	r1, r4, #1
   1b50c:	f00a fa63 	bl	259d6 <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   1b510:	2000      	movs	r0, #0
   1b512:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1b514:	bd10      	pop	{r4, pc}
	return sdc_hci_evt_get(evt_out);
   1b516:	f7f2 f867 	bl	d5e8 <sdc_hci_evt_get>
   1b51a:	e7fb      	b.n	1b514 <hci_internal_evt_get+0x18>
   1b51c:	20002f98 	.word	0x20002f98

0001b520 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1b520:	b538      	push	{r3, r4, r5, lr}
   1b522:	4605      	mov	r5, r0
   1b524:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1b526:	4b0a      	ldr	r3, [pc, #40]	; (1b550 <bt_rand+0x30>)
   1b528:	681b      	ldr	r3, [r3, #0]
   1b52a:	b13b      	cbz	r3, 1b53c <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1b52c:	4b08      	ldr	r3, [pc, #32]	; (1b550 <bt_rand+0x30>)
   1b52e:	6818      	ldr	r0, [r3, #0]
   1b530:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   1b532:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   1b534:	681b      	ldr	r3, [r3, #0]
   1b536:	4629      	mov	r1, r5
   1b538:	4798      	blx	r3
}
   1b53a:	bd38      	pop	{r3, r4, r5, pc}
   1b53c:	4805      	ldr	r0, [pc, #20]	; (1b554 <bt_rand+0x34>)
   1b53e:	f000 ff7b 	bl	1c438 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b542:	4b03      	ldr	r3, [pc, #12]	; (1b550 <bt_rand+0x30>)
   1b544:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1b546:	2800      	cmp	r0, #0
   1b548:	d1f0      	bne.n	1b52c <bt_rand+0xc>
			return -ENODEV;
   1b54a:	f06f 0012 	mvn.w	r0, #18
   1b54e:	e7f4      	b.n	1b53a <bt_rand+0x1a>
   1b550:	20002fe0 	.word	0x20002fe0
   1b554:	00027c14 	.word	0x00027c14

0001b558 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1b558:	b510      	push	{r4, lr}
   1b55a:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1b55c:	f009 fb3a 	bl	24bd4 <m_config_clock_source_get>
   1b560:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1b564:	2332      	movs	r3, #50	; 0x32
   1b566:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1b56a:	2300      	movs	r3, #0
   1b56c:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   1b570:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1b574:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1b578:	4a0c      	ldr	r2, [pc, #48]	; (1b5ac <mpsl_lib_init+0x54>)
   1b57a:	2119      	movs	r1, #25
   1b57c:	4668      	mov	r0, sp
   1b57e:	f7e8 fd39 	bl	3ff4 <mpsl_init>
	if (err) {
   1b582:	4604      	mov	r4, r0
   1b584:	b110      	cbz	r0, 1b58c <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1b586:	4620      	mov	r0, r4
   1b588:	b002      	add	sp, #8
   1b58a:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b58c:	2201      	movs	r2, #1
   1b58e:	2100      	movs	r1, #0
   1b590:	2008      	movs	r0, #8
   1b592:	f7f7 fe6b 	bl	1326c <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b596:	2201      	movs	r2, #1
   1b598:	2100      	movs	r1, #0
   1b59a:	200b      	movs	r0, #11
   1b59c:	f7f7 fe66 	bl	1326c <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1b5a0:	2201      	movs	r2, #1
   1b5a2:	2100      	movs	r1, #0
   1b5a4:	4610      	mov	r0, r2
   1b5a6:	f7f7 fe61 	bl	1326c <z_arm_irq_priority_set>
	return 0;
   1b5aa:	e7ec      	b.n	1b586 <mpsl_lib_init+0x2e>
   1b5ac:	0001b5b1 	.word	0x0001b5b1

0001b5b0 <m_assert_handler>:
{
   1b5b0:	b538      	push	{r3, r4, r5, lr}
   1b5b2:	460d      	mov	r5, r1
   1b5b4:	4b0d      	ldr	r3, [pc, #52]	; (1b5ec <m_assert_handler+0x3c>)
   1b5b6:	4a0e      	ldr	r2, [pc, #56]	; (1b5f0 <m_assert_handler+0x40>)
   1b5b8:	1a9b      	subs	r3, r3, r2
   1b5ba:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1b5bc:	f04f 0400 	mov.w	r4, #0
   1b5c0:	2201      	movs	r2, #1
   1b5c2:	f362 0402 	bfi	r4, r2, #0, #3
   1b5c6:	f36f 04c5 	bfc	r4, #3, #3
   1b5ca:	f363 148f 	bfi	r4, r3, #6, #10
   1b5ce:	f7f6 fa13 	bl	119f8 <z_log_strdup>
   1b5d2:	4601      	mov	r1, r0
   1b5d4:	4623      	mov	r3, r4
   1b5d6:	462a      	mov	r2, r5
   1b5d8:	4806      	ldr	r0, [pc, #24]	; (1b5f4 <m_assert_handler+0x44>)
   1b5da:	f7f6 fbbb 	bl	11d54 <log_2>
	k_oops();
   1b5de:	4040      	eors	r0, r0
   1b5e0:	f380 8811 	msr	BASEPRI, r0
   1b5e4:	f04f 0003 	mov.w	r0, #3
   1b5e8:	df02      	svc	2
}
   1b5ea:	bd38      	pop	{r3, r4, r5, pc}
   1b5ec:	00025e08 	.word	0x00025e08
   1b5f0:	00025d80 	.word	0x00025d80
   1b5f4:	00027ee4 	.word	0x00027ee4

0001b5f8 <signal_thread>:
{
   1b5f8:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   1b5fa:	f04f 34ff 	mov.w	r4, #4294967295
   1b5fe:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1b602:	4622      	mov	r2, r4
   1b604:	462b      	mov	r3, r5
   1b606:	4806      	ldr	r0, [pc, #24]	; (1b620 <signal_thread+0x28>)
   1b608:	f001 fb78 	bl	1ccfc <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b60c:	4620      	mov	r0, r4
   1b60e:	4629      	mov	r1, r5
   1b610:	f7ff fcfa 	bl	1b008 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1b614:	f7f1 fb31 	bl	cc7a <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1b618:	f7ff fd00 	bl	1b01c <multithreading_lock_release>
	while (true) {
   1b61c:	e7ed      	b.n	1b5fa <signal_thread+0x2>
   1b61e:	bf00      	nop
   1b620:	20000784 	.word	0x20000784

0001b624 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1b624:	b530      	push	{r4, r5, lr}
   1b626:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b628:	4d0f      	ldr	r5, [pc, #60]	; (1b668 <mpsl_signal_thread_init+0x44>)
   1b62a:	2200      	movs	r2, #0
   1b62c:	2300      	movs	r3, #0
   1b62e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b632:	2400      	movs	r4, #0
   1b634:	9404      	str	r4, [sp, #16]
   1b636:	f06f 0309 	mvn.w	r3, #9
   1b63a:	9303      	str	r3, [sp, #12]
   1b63c:	9402      	str	r4, [sp, #8]
   1b63e:	9401      	str	r4, [sp, #4]
   1b640:	9400      	str	r4, [sp, #0]
   1b642:	4b0a      	ldr	r3, [pc, #40]	; (1b66c <mpsl_signal_thread_init+0x48>)
   1b644:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b648:	4909      	ldr	r1, [pc, #36]	; (1b670 <mpsl_signal_thread_init+0x4c>)
   1b64a:	4628      	mov	r0, r5
   1b64c:	f009 fc24 	bl	24e98 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1b650:	4908      	ldr	r1, [pc, #32]	; (1b674 <mpsl_signal_thread_init+0x50>)
   1b652:	4628      	mov	r0, r5
   1b654:	f001 f932 	bl	1c8bc <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1b658:	4622      	mov	r2, r4
   1b65a:	2104      	movs	r1, #4
   1b65c:	2019      	movs	r0, #25
   1b65e:	f7f7 fe05 	bl	1326c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1b662:	4620      	mov	r0, r4
   1b664:	b009      	add	sp, #36	; 0x24
   1b666:	bd30      	pop	{r4, r5, pc}
   1b668:	20001c98 	.word	0x20001c98
   1b66c:	0001b5f9 	.word	0x0001b5f9
   1b670:	20004d60 	.word	0x20004d60
   1b674:	00027ef8 	.word	0x00027ef8

0001b678 <mpsl_low_prio_irq_handler>:
{
   1b678:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1b67a:	4802      	ldr	r0, [pc, #8]	; (1b684 <mpsl_low_prio_irq_handler+0xc>)
   1b67c:	f001 fb16 	bl	1ccac <z_impl_k_sem_give>
}
   1b680:	bd08      	pop	{r3, pc}
   1b682:	bf00      	nop
   1b684:	20000784 	.word	0x20000784

0001b688 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   1b688:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1b68a:	4b02      	ldr	r3, [pc, #8]	; (1b694 <mpsl_hfclk_callback+0xc>)
   1b68c:	681b      	ldr	r3, [r3, #0]
   1b68e:	2000      	movs	r0, #0
   1b690:	4798      	blx	r3
}
   1b692:	bd08      	pop	{r3, pc}
   1b694:	20002fe4 	.word	0x20002fe4

0001b698 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1b698:	b508      	push	{r3, lr}
	switch (domain) {
   1b69a:	b128      	cbz	r0, 1b6a8 <nrfx_clock_start+0x10>
   1b69c:	2801      	cmp	r0, #1
   1b69e:	d102      	bne.n	1b6a6 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1b6a0:	4804      	ldr	r0, [pc, #16]	; (1b6b4 <nrfx_clock_start+0x1c>)
   1b6a2:	f7e8 fb11 	bl	3cc8 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1b6a6:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1b6a8:	4b03      	ldr	r3, [pc, #12]	; (1b6b8 <nrfx_clock_start+0x20>)
   1b6aa:	681b      	ldr	r3, [r3, #0]
   1b6ac:	2001      	movs	r0, #1
   1b6ae:	4798      	blx	r3
}
   1b6b0:	e7f9      	b.n	1b6a6 <nrfx_clock_start+0xe>
   1b6b2:	bf00      	nop
   1b6b4:	0001b689 	.word	0x0001b689
   1b6b8:	20002fe4 	.word	0x20002fe4

0001b6bc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1b6bc:	4b01      	ldr	r3, [pc, #4]	; (1b6c4 <nrfx_clock_init+0x8>)
   1b6be:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1b6c0:	4801      	ldr	r0, [pc, #4]	; (1b6c8 <nrfx_clock_init+0xc>)
   1b6c2:	4770      	bx	lr
   1b6c4:	20002fe4 	.word	0x20002fe4
   1b6c8:	0bad0000 	.word	0x0bad0000

0001b6cc <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b6cc:	4b03      	ldr	r3, [pc, #12]	; (1b6dc <nrf52_errata_36+0x10>)
   1b6ce:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1b6d0:	2b08      	cmp	r3, #8
   1b6d2:	d001      	beq.n	1b6d8 <nrf52_errata_36+0xc>
        return false;
   1b6d4:	2000      	movs	r0, #0
   1b6d6:	4770      	bx	lr
                        return true;
   1b6d8:	2001      	movs	r0, #1
}
   1b6da:	4770      	bx	lr
   1b6dc:	10000130 	.word	0x10000130

0001b6e0 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b6e0:	4b03      	ldr	r3, [pc, #12]	; (1b6f0 <nrf52_errata_66+0x10>)
   1b6e2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1b6e4:	2b08      	cmp	r3, #8
   1b6e6:	d001      	beq.n	1b6ec <nrf52_errata_66+0xc>
        return false;
   1b6e8:	2000      	movs	r0, #0
   1b6ea:	4770      	bx	lr
                        return true;
   1b6ec:	2001      	movs	r0, #1
}
   1b6ee:	4770      	bx	lr
   1b6f0:	10000130 	.word	0x10000130

0001b6f4 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b6f4:	4b08      	ldr	r3, [pc, #32]	; (1b718 <nrf52_errata_98+0x24>)
   1b6f6:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1b6f8:	3304      	adds	r3, #4
   1b6fa:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1b6fc:	2a08      	cmp	r2, #8
   1b6fe:	d001      	beq.n	1b704 <nrf52_errata_98+0x10>
        return false;
   1b700:	2000      	movs	r0, #0
   1b702:	4770      	bx	lr
                switch(var2)
   1b704:	2b00      	cmp	r3, #0
   1b706:	d804      	bhi.n	1b712 <nrf52_errata_98+0x1e>
   1b708:	e8df f003 	tbb	[pc, r3]
   1b70c:	01          	.byte	0x01
   1b70d:	00          	.byte	0x00
            if (var1 == 0x08)
   1b70e:	2001      	movs	r0, #1
   1b710:	4770      	bx	lr
                        return false;
   1b712:	2000      	movs	r0, #0
}
   1b714:	4770      	bx	lr
   1b716:	bf00      	nop
   1b718:	10000130 	.word	0x10000130

0001b71c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b71c:	4b08      	ldr	r3, [pc, #32]	; (1b740 <nrf52_errata_103+0x24>)
   1b71e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1b720:	3304      	adds	r3, #4
   1b722:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1b724:	2a08      	cmp	r2, #8
   1b726:	d001      	beq.n	1b72c <nrf52_errata_103+0x10>
        return false;
   1b728:	2000      	movs	r0, #0
   1b72a:	4770      	bx	lr
                switch(var2)
   1b72c:	2b00      	cmp	r3, #0
   1b72e:	d804      	bhi.n	1b73a <nrf52_errata_103+0x1e>
   1b730:	e8df f003 	tbb	[pc, r3]
   1b734:	01          	.byte	0x01
   1b735:	00          	.byte	0x00
            if (var1 == 0x08)
   1b736:	2001      	movs	r0, #1
   1b738:	4770      	bx	lr
                        return false;
   1b73a:	2000      	movs	r0, #0
}
   1b73c:	4770      	bx	lr
   1b73e:	bf00      	nop
   1b740:	10000130 	.word	0x10000130

0001b744 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b744:	4b08      	ldr	r3, [pc, #32]	; (1b768 <nrf52_errata_115+0x24>)
   1b746:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1b748:	3304      	adds	r3, #4
   1b74a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1b74c:	2a08      	cmp	r2, #8
   1b74e:	d001      	beq.n	1b754 <nrf52_errata_115+0x10>
        return false;
   1b750:	2000      	movs	r0, #0
   1b752:	4770      	bx	lr
                switch(var2)
   1b754:	2b00      	cmp	r3, #0
   1b756:	d804      	bhi.n	1b762 <nrf52_errata_115+0x1e>
   1b758:	e8df f003 	tbb	[pc, r3]
   1b75c:	01          	.byte	0x01
   1b75d:	00          	.byte	0x00
            if (var1 == 0x08)
   1b75e:	2001      	movs	r0, #1
   1b760:	4770      	bx	lr
                        return false;
   1b762:	2000      	movs	r0, #0
}
   1b764:	4770      	bx	lr
   1b766:	bf00      	nop
   1b768:	10000130 	.word	0x10000130

0001b76c <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b76c:	4b08      	ldr	r3, [pc, #32]	; (1b790 <nrf52_errata_120+0x24>)
   1b76e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1b770:	3304      	adds	r3, #4
   1b772:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1b774:	2a08      	cmp	r2, #8
   1b776:	d001      	beq.n	1b77c <nrf52_errata_120+0x10>
        return false;
   1b778:	2000      	movs	r0, #0
   1b77a:	4770      	bx	lr
                switch(var2)
   1b77c:	2b00      	cmp	r3, #0
   1b77e:	d804      	bhi.n	1b78a <nrf52_errata_120+0x1e>
   1b780:	e8df f003 	tbb	[pc, r3]
   1b784:	01          	.byte	0x01
   1b785:	00          	.byte	0x00
            if (var1 == 0x08)
   1b786:	2001      	movs	r0, #1
   1b788:	4770      	bx	lr
                        return false;
   1b78a:	2000      	movs	r0, #0
}
   1b78c:	4770      	bx	lr
   1b78e:	bf00      	nop
   1b790:	10000130 	.word	0x10000130

0001b794 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b794:	4b03      	ldr	r3, [pc, #12]	; (1b7a4 <nrf52_errata_136+0x10>)
   1b796:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1b798:	2b08      	cmp	r3, #8
   1b79a:	d001      	beq.n	1b7a0 <nrf52_errata_136+0xc>
        return false;
   1b79c:	2000      	movs	r0, #0
   1b79e:	4770      	bx	lr
                        return true;
   1b7a0:	2001      	movs	r0, #1
}
   1b7a2:	4770      	bx	lr
   1b7a4:	10000130 	.word	0x10000130

0001b7a8 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b7a8:	4b06      	ldr	r3, [pc, #24]	; (1b7c4 <nrf52_configuration_249+0x1c>)
   1b7aa:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1b7ac:	4a06      	ldr	r2, [pc, #24]	; (1b7c8 <nrf52_configuration_249+0x20>)
   1b7ae:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1b7b0:	2b08      	cmp	r3, #8
   1b7b2:	d001      	beq.n	1b7b8 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1b7b4:	2000      	movs	r0, #0
   1b7b6:	4770      	bx	lr
                switch(var2)
   1b7b8:	2a04      	cmp	r2, #4
   1b7ba:	d801      	bhi.n	1b7c0 <nrf52_configuration_249+0x18>
   1b7bc:	2000      	movs	r0, #0
   1b7be:	4770      	bx	lr
                        return true;
   1b7c0:	2001      	movs	r0, #1
    #endif
}
   1b7c2:	4770      	bx	lr
   1b7c4:	10000130 	.word	0x10000130
   1b7c8:	10000134 	.word	0x10000134

0001b7cc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1b7cc:	4b02      	ldr	r3, [pc, #8]	; (1b7d8 <nvmc_wait+0xc>)
   1b7ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1b7d2:	2b00      	cmp	r3, #0
   1b7d4:	d0fa      	beq.n	1b7cc <nvmc_wait>
}
   1b7d6:	4770      	bx	lr
   1b7d8:	4001e000 	.word	0x4001e000

0001b7dc <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   1b7dc:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b7de:	4b03      	ldr	r3, [pc, #12]	; (1b7ec <nvmc_config+0x10>)
   1b7e0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   1b7e4:	f7ff fff2 	bl	1b7cc <nvmc_wait>
}
   1b7e8:	bd08      	pop	{r3, pc}
   1b7ea:	bf00      	nop
   1b7ec:	4001e000 	.word	0x4001e000

0001b7f0 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1b7f0:	4b01      	ldr	r3, [pc, #4]	; (1b7f8 <SystemCoreClockUpdate+0x8>)
   1b7f2:	4a02      	ldr	r2, [pc, #8]	; (1b7fc <SystemCoreClockUpdate+0xc>)
   1b7f4:	601a      	str	r2, [r3, #0]
}
   1b7f6:	4770      	bx	lr
   1b7f8:	20000564 	.word	0x20000564
   1b7fc:	03d09000 	.word	0x03d09000

0001b800 <SystemInit>:

void SystemInit(void)
{
   1b800:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1b802:	f7ff ff63 	bl	1b6cc <nrf52_errata_36>
   1b806:	b140      	cbz	r0, 1b81a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1b808:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b80c:	2200      	movs	r2, #0
   1b80e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1b812:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1b816:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1b81a:	f7ff ff61 	bl	1b6e0 <nrf52_errata_66>
   1b81e:	2800      	cmp	r0, #0
   1b820:	d046      	beq.n	1b8b0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1b822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b826:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1b82a:	4b56      	ldr	r3, [pc, #344]	; (1b984 <SystemInit+0x184>)
   1b82c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1b830:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1b834:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1b838:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1b83c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1b840:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1b844:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1b848:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1b84c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1b850:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1b854:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1b858:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1b85c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1b860:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1b864:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1b868:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1b86c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1b870:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1b874:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1b878:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1b87c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1b880:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1b884:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1b888:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1b88c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1b890:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1b894:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1b898:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1b89c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1b8a0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1b8a4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1b8a8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1b8ac:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1b8b0:	f7ff ff20 	bl	1b6f4 <nrf52_errata_98>
   1b8b4:	b110      	cbz	r0, 1b8bc <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1b8b6:	4b34      	ldr	r3, [pc, #208]	; (1b988 <SystemInit+0x188>)
   1b8b8:	4a34      	ldr	r2, [pc, #208]	; (1b98c <SystemInit+0x18c>)
   1b8ba:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1b8bc:	f7ff ff2e 	bl	1b71c <nrf52_errata_103>
   1b8c0:	b118      	cbz	r0, 1b8ca <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1b8c2:	4b33      	ldr	r3, [pc, #204]	; (1b990 <SystemInit+0x190>)
   1b8c4:	22fb      	movs	r2, #251	; 0xfb
   1b8c6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1b8ca:	f7ff ff3b 	bl	1b744 <nrf52_errata_115>
   1b8ce:	b148      	cbz	r0, 1b8e4 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1b8d0:	4930      	ldr	r1, [pc, #192]	; (1b994 <SystemInit+0x194>)
   1b8d2:	680b      	ldr	r3, [r1, #0]
   1b8d4:	f023 030f 	bic.w	r3, r3, #15
   1b8d8:	4a2f      	ldr	r2, [pc, #188]	; (1b998 <SystemInit+0x198>)
   1b8da:	6812      	ldr	r2, [r2, #0]
   1b8dc:	f002 020f 	and.w	r2, r2, #15
   1b8e0:	4313      	orrs	r3, r2
   1b8e2:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1b8e4:	f7ff ff42 	bl	1b76c <nrf52_errata_120>
   1b8e8:	b118      	cbz	r0, 1b8f2 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1b8ea:	4b2c      	ldr	r3, [pc, #176]	; (1b99c <SystemInit+0x19c>)
   1b8ec:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b8f0:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1b8f2:	f7ff ff4f 	bl	1b794 <nrf52_errata_136>
   1b8f6:	b160      	cbz	r0, 1b912 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1b8f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b8fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1b900:	f013 0f01 	tst.w	r3, #1
   1b904:	d005      	beq.n	1b912 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1b906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b90a:	f06f 0201 	mvn.w	r2, #1
   1b90e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1b912:	f7ff ff49 	bl	1b7a8 <nrf52_configuration_249>
   1b916:	b138      	cbz	r0, 1b928 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1b918:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b91c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1b920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b924:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b928:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b92c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1b930:	2b00      	cmp	r3, #0
   1b932:	db08      	blt.n	1b946 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1b934:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b938:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b93c:	2b00      	cmp	r3, #0
   1b93e:	db02      	blt.n	1b946 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1b940:	f7ff ff56 	bl	1b7f0 <SystemCoreClockUpdate>
}
   1b944:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1b946:	2001      	movs	r0, #1
   1b948:	f7ff ff48 	bl	1b7dc <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b94c:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1b950:	2512      	movs	r5, #18
   1b952:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1b956:	f7ff ff39 	bl	1b7cc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1b95a:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1b95e:	f7ff ff35 	bl	1b7cc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1b962:	2000      	movs	r0, #0
   1b964:	f7ff ff3a 	bl	1b7dc <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   1b968:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1b96c:	490c      	ldr	r1, [pc, #48]	; (1b9a0 <SystemInit+0x1a0>)
   1b96e:	68ca      	ldr	r2, [r1, #12]
   1b970:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1b974:	4b0b      	ldr	r3, [pc, #44]	; (1b9a4 <SystemInit+0x1a4>)
   1b976:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1b978:	60cb      	str	r3, [r1, #12]
   1b97a:	f3bf 8f4f 	dsb	sy
    __NOP();
   1b97e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1b980:	e7fd      	b.n	1b97e <SystemInit+0x17e>
   1b982:	bf00      	nop
   1b984:	4000c000 	.word	0x4000c000
   1b988:	4000568c 	.word	0x4000568c
   1b98c:	00038148 	.word	0x00038148
   1b990:	4000f000 	.word	0x4000f000
   1b994:	40000ee4 	.word	0x40000ee4
   1b998:	10000258 	.word	0x10000258
   1b99c:	40029640 	.word	0x40029640
   1b9a0:	e000ed00 	.word	0xe000ed00
   1b9a4:	05fa0004 	.word	0x05fa0004

0001b9a8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1b9a8:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1b9aa:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1b9ac:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   1b9b0:	f1d3 031f 	rsbs	r3, r3, #31
   1b9b4:	d415      	bmi.n	1b9e2 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1b9b6:	2201      	movs	r2, #1
   1b9b8:	409a      	lsls	r2, r3
   1b9ba:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b9be:	f3bf 8f5b 	dmb	ish
   1b9c2:	e850 5f00 	ldrex	r5, [r0]
   1b9c6:	42a5      	cmp	r5, r4
   1b9c8:	d104      	bne.n	1b9d4 <nrfx_flag32_alloc+0x2c>
   1b9ca:	e840 2c00 	strex	ip, r2, [r0]
   1b9ce:	f1bc 0f00 	cmp.w	ip, #0
   1b9d2:	d1f6      	bne.n	1b9c2 <nrfx_flag32_alloc+0x1a>
   1b9d4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1b9d8:	d1e7      	bne.n	1b9aa <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   1b9da:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   1b9dc:	4802      	ldr	r0, [pc, #8]	; (1b9e8 <nrfx_flag32_alloc+0x40>)
}
   1b9de:	bc30      	pop	{r4, r5}
   1b9e0:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   1b9e2:	4802      	ldr	r0, [pc, #8]	; (1b9ec <nrfx_flag32_alloc+0x44>)
   1b9e4:	e7fb      	b.n	1b9de <nrfx_flag32_alloc+0x36>
   1b9e6:	bf00      	nop
   1b9e8:	0bad0000 	.word	0x0bad0000
   1b9ec:	0bad0002 	.word	0x0bad0002

0001b9f0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1b9f0:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1b9f2:	6803      	ldr	r3, [r0, #0]
   1b9f4:	460c      	mov	r4, r1
   1b9f6:	fa23 f101 	lsr.w	r1, r3, r1
   1b9fa:	f011 0f01 	tst.w	r1, #1
   1b9fe:	d114      	bne.n	1ba2a <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   1ba00:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1ba02:	2301      	movs	r3, #1
   1ba04:	40a3      	lsls	r3, r4
   1ba06:	4313      	orrs	r3, r2
   1ba08:	f3bf 8f5b 	dmb	ish
   1ba0c:	e850 1f00 	ldrex	r1, [r0]
   1ba10:	4291      	cmp	r1, r2
   1ba12:	d104      	bne.n	1ba1e <nrfx_flag32_free+0x2e>
   1ba14:	e840 3c00 	strex	ip, r3, [r0]
   1ba18:	f1bc 0f00 	cmp.w	ip, #0
   1ba1c:	d1f6      	bne.n	1ba0c <nrfx_flag32_free+0x1c>
   1ba1e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ba22:	d1ed      	bne.n	1ba00 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1ba24:	4802      	ldr	r0, [pc, #8]	; (1ba30 <nrfx_flag32_free+0x40>)
}
   1ba26:	bc10      	pop	{r4}
   1ba28:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   1ba2a:	4802      	ldr	r0, [pc, #8]	; (1ba34 <nrfx_flag32_free+0x44>)
   1ba2c:	e7fb      	b.n	1ba26 <nrfx_flag32_free+0x36>
   1ba2e:	bf00      	nop
   1ba30:	0bad0000 	.word	0x0bad0000
   1ba34:	0bad0004 	.word	0x0bad0004

0001ba38 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1ba38:	3008      	adds	r0, #8
   1ba3a:	4b03      	ldr	r3, [pc, #12]	; (1ba48 <pin_in_use+0x10>)
   1ba3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ba40:	f000 0001 	and.w	r0, r0, #1
   1ba44:	4770      	bx	lr
   1ba46:	bf00      	nop
   1ba48:	20000568 	.word	0x20000568

0001ba4c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1ba4c:	3008      	adds	r0, #8
   1ba4e:	4b03      	ldr	r3, [pc, #12]	; (1ba5c <pin_in_use_by_te+0x10>)
   1ba50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ba54:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1ba58:	4770      	bx	lr
   1ba5a:	bf00      	nop
   1ba5c:	20000568 	.word	0x20000568

0001ba60 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1ba60:	3008      	adds	r0, #8
   1ba62:	4b04      	ldr	r3, [pc, #16]	; (1ba74 <pin_has_trigger+0x14>)
   1ba64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ba68:	f010 001c 	ands.w	r0, r0, #28
   1ba6c:	bf18      	it	ne
   1ba6e:	2001      	movne	r0, #1
   1ba70:	4770      	bx	lr
   1ba72:	bf00      	nop
   1ba74:	20000568 	.word	0x20000568

0001ba78 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ba78:	3008      	adds	r0, #8
   1ba7a:	4b03      	ldr	r3, [pc, #12]	; (1ba88 <pin_is_output+0x10>)
   1ba7c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ba80:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1ba84:	4770      	bx	lr
   1ba86:	bf00      	nop
   1ba88:	20000568 	.word	0x20000568

0001ba8c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ba8c:	3008      	adds	r0, #8
   1ba8e:	4b02      	ldr	r3, [pc, #8]	; (1ba98 <pin_te_get+0xc>)
   1ba90:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ba94:	0b40      	lsrs	r0, r0, #13
   1ba96:	4770      	bx	lr
   1ba98:	20000568 	.word	0x20000568

0001ba9c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1ba9c:	2200      	movs	r2, #0
   1ba9e:	e004      	b.n	1baaa <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1baa0:	f04f 33ff 	mov.w	r3, #4294967295
   1baa4:	4283      	cmp	r3, r0
   1baa6:	d00f      	beq.n	1bac8 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1baa8:	3201      	adds	r2, #1
   1baaa:	2a2f      	cmp	r2, #47	; 0x2f
   1baac:	d80a      	bhi.n	1bac4 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1baae:	f102 0308 	add.w	r3, r2, #8
   1bab2:	4906      	ldr	r1, [pc, #24]	; (1bacc <handler_in_use+0x30>)
   1bab4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1bab8:	f413 7f80 	tst.w	r3, #256	; 0x100
   1babc:	d0f0      	beq.n	1baa0 <handler_in_use+0x4>
   1babe:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1bac2:	e7ef      	b.n	1baa4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   1bac4:	2000      	movs	r0, #0
   1bac6:	4770      	bx	lr
            return true;
   1bac8:	2001      	movs	r0, #1
}
   1baca:	4770      	bx	lr
   1bacc:	20000568 	.word	0x20000568

0001bad0 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1bad0:	2300      	movs	r3, #0
   1bad2:	b113      	cbz	r3, 1bada <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   1bad4:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bad8:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1bada:	4a07      	ldr	r2, [pc, #28]	; (1baf8 <find_handler+0x28>)
   1badc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1bae0:	4282      	cmp	r2, r0
   1bae2:	d001      	beq.n	1bae8 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1bae4:	3301      	adds	r3, #1
   1bae6:	e7f4      	b.n	1bad2 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1bae8:	4a03      	ldr	r2, [pc, #12]	; (1baf8 <find_handler+0x28>)
   1baea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1baee:	6852      	ldr	r2, [r2, #4]
   1baf0:	428a      	cmp	r2, r1
   1baf2:	d1f7      	bne.n	1bae4 <find_handler+0x14>
            return i;
   1baf4:	4618      	mov	r0, r3
   1baf6:	4770      	bx	lr
   1baf8:	20000568 	.word	0x20000568

0001bafc <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1bafc:	3008      	adds	r0, #8
   1bafe:	4b06      	ldr	r3, [pc, #24]	; (1bb18 <channel_handler_get+0x1c>)
   1bb00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1bb04:	f410 7f80 	tst.w	r0, #256	; 0x100
   1bb08:	d004      	beq.n	1bb14 <channel_handler_get+0x18>
   1bb0a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   1bb0e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1bb12:	4770      	bx	lr
        return NULL;
   1bb14:	2000      	movs	r0, #0
}
   1bb16:	4770      	bx	lr
   1bb18:	20000568 	.word	0x20000568

0001bb1c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1bb1c:	b570      	push	{r4, r5, r6, lr}
   1bb1e:	4604      	mov	r4, r0
   1bb20:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1bb22:	f7ff ffeb 	bl	1bafc <channel_handler_get>

    if (handler)
   1bb26:	b120      	cbz	r0, 1bb32 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1bb28:	6806      	ldr	r6, [r0, #0]
   1bb2a:	6842      	ldr	r2, [r0, #4]
   1bb2c:	4629      	mov	r1, r5
   1bb2e:	4620      	mov	r0, r4
   1bb30:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1bb32:	4b04      	ldr	r3, [pc, #16]	; (1bb44 <call_handler+0x28>)
   1bb34:	689b      	ldr	r3, [r3, #8]
   1bb36:	b123      	cbz	r3, 1bb42 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1bb38:	4a02      	ldr	r2, [pc, #8]	; (1bb44 <call_handler+0x28>)
   1bb3a:	68d2      	ldr	r2, [r2, #12]
   1bb3c:	4629      	mov	r1, r5
   1bb3e:	4620      	mov	r0, r4
   1bb40:	4798      	blx	r3
    }
}
   1bb42:	bd70      	pop	{r4, r5, r6, pc}
   1bb44:	20000568 	.word	0x20000568

0001bb48 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   1bb48:	b570      	push	{r4, r5, r6, lr}
   1bb4a:	4604      	mov	r4, r0
   1bb4c:	460d      	mov	r5, r1
   1bb4e:	4616      	mov	r6, r2
    if (is_level(trigger))
   1bb50:	4608      	mov	r0, r1
   1bb52:	f009 f8a5 	bl	24ca0 <is_level>
   1bb56:	b9d0      	cbnz	r0, 1bb8e <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1bb58:	2e02      	cmp	r6, #2
   1bb5a:	d03e      	beq.n	1bbda <next_sense_cond_call_handler+0x92>
   1bb5c:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   1bb5e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1bb62:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1bb64:	2901      	cmp	r1, #1
   1bb66:	d03a      	beq.n	1bbde <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
   1bb68:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1bb6c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1bb70:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1bb74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1bb78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1bb7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1bb80:	2d03      	cmp	r5, #3
   1bb82:	d030      	beq.n	1bbe6 <next_sense_cond_call_handler+0x9e>
   1bb84:	2e02      	cmp	r6, #2
   1bb86:	d02c      	beq.n	1bbe2 <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1bb88:	2e03      	cmp	r6, #3
   1bb8a:	d031      	beq.n	1bbf0 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   1bb8c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   1bb8e:	4629      	mov	r1, r5
   1bb90:	4620      	mov	r0, r4
   1bb92:	f7ff ffc3 	bl	1bb1c <call_handler>
    *p_pin = pin_number & 0x1F;
   1bb96:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1bb9a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1bb9c:	2c01      	cmp	r4, #1
   1bb9e:	d01a      	beq.n	1bbd6 <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
   1bba0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1bba4:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
   1bba8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1bbac:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1bbb0:	4296      	cmp	r6, r2
   1bbb2:	d1eb      	bne.n	1bb8c <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1bbb4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1bbb8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1bbbc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1bbc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1bbc4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1bbc8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1bbcc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1bbd0:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   1bbd4:	e7da      	b.n	1bb8c <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   1bbd6:	4908      	ldr	r1, [pc, #32]	; (1bbf8 <next_sense_cond_call_handler+0xb0>)
   1bbd8:	e7e4      	b.n	1bba4 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1bbda:	2003      	movs	r0, #3
   1bbdc:	e7bf      	b.n	1bb5e <next_sense_cond_call_handler+0x16>
   1bbde:	4906      	ldr	r1, [pc, #24]	; (1bbf8 <next_sense_cond_call_handler+0xb0>)
   1bbe0:	e7c4      	b.n	1bb6c <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1bbe2:	2d01      	cmp	r5, #1
   1bbe4:	d1d0      	bne.n	1bb88 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   1bbe6:	4629      	mov	r1, r5
   1bbe8:	4620      	mov	r0, r4
   1bbea:	f7ff ff97 	bl	1bb1c <call_handler>
}
   1bbee:	e7cd      	b.n	1bb8c <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1bbf0:	2d02      	cmp	r5, #2
   1bbf2:	d1cb      	bne.n	1bb8c <next_sense_cond_call_handler+0x44>
   1bbf4:	e7f7      	b.n	1bbe6 <next_sense_cond_call_handler+0x9e>
   1bbf6:	bf00      	nop
   1bbf8:	50000300 	.word	0x50000300

0001bbfc <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   1bbfc:	b410      	push	{r4}
   1bbfe:	b083      	sub	sp, #12
   1bc00:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1bc02:	4b12      	ldr	r3, [pc, #72]	; (1bc4c <latch_pending_read_and_check+0x50>)
   1bc04:	e893 0003 	ldmia.w	r3, {r0, r1}
   1bc08:	ab02      	add	r3, sp, #8
   1bc0a:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1bc0e:	4620      	mov	r0, r4
   1bc10:	2300      	movs	r3, #0
   1bc12:	e00b      	b.n	1bc2c <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   1bc14:	aa02      	add	r2, sp, #8
   1bc16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1bc1a:	f852 2c08 	ldr.w	r2, [r2, #-8]
   1bc1e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1bc22:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1bc26:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1bc2a:	3301      	adds	r3, #1
   1bc2c:	2b01      	cmp	r3, #1
   1bc2e:	d9f1      	bls.n	1bc14 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1bc30:	2300      	movs	r3, #0
   1bc32:	2b01      	cmp	r3, #1
   1bc34:	d804      	bhi.n	1bc40 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   1bc36:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1bc3a:	b92a      	cbnz	r2, 1bc48 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1bc3c:	3301      	adds	r3, #1
   1bc3e:	e7f8      	b.n	1bc32 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   1bc40:	2000      	movs	r0, #0
}
   1bc42:	b003      	add	sp, #12
   1bc44:	bc10      	pop	{r4}
   1bc46:	4770      	bx	lr
            return true;
   1bc48:	2001      	movs	r0, #1
   1bc4a:	e7fa      	b.n	1bc42 <latch_pending_read_and_check+0x46>
   1bc4c:	00025f28 	.word	0x00025f28

0001bc50 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1bc50:	f100 0208 	add.w	r2, r0, #8
   1bc54:	4b0e      	ldr	r3, [pc, #56]	; (1bc90 <release_handler+0x40>)
   1bc56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1bc5a:	f413 7f80 	tst.w	r3, #256	; 0x100
   1bc5e:	d016      	beq.n	1bc8e <release_handler+0x3e>
{
   1bc60:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1bc62:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1bc66:	4610      	mov	r0, r2
   1bc68:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1bc6c:	4a08      	ldr	r2, [pc, #32]	; (1bc90 <release_handler+0x40>)
   1bc6e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1bc72:	4620      	mov	r0, r4
   1bc74:	f7ff ff12 	bl	1ba9c <handler_in_use>
   1bc78:	b100      	cbz	r0, 1bc7c <release_handler+0x2c>
}
   1bc7a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   1bc7c:	4804      	ldr	r0, [pc, #16]	; (1bc90 <release_handler+0x40>)
   1bc7e:	2300      	movs	r3, #0
   1bc80:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1bc84:	4621      	mov	r1, r4
   1bc86:	3074      	adds	r0, #116	; 0x74
   1bc88:	f7ff feb2 	bl	1b9f0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1bc8c:	e7f5      	b.n	1bc7a <release_handler+0x2a>
   1bc8e:	4770      	bx	lr
   1bc90:	20000568 	.word	0x20000568

0001bc94 <pin_handler_trigger_uninit>:
{
   1bc94:	b510      	push	{r4, lr}
   1bc96:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   1bc98:	f7ff fed8 	bl	1ba4c <pin_in_use_by_te>
   1bc9c:	b140      	cbz	r0, 1bcb0 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1bc9e:	4620      	mov	r0, r4
   1bca0:	f7ff fef4 	bl	1ba8c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1bca4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1bca8:	4b06      	ldr	r3, [pc, #24]	; (1bcc4 <pin_handler_trigger_uninit+0x30>)
   1bcaa:	2200      	movs	r2, #0
   1bcac:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1bcb0:	4620      	mov	r0, r4
   1bcb2:	f7ff ffcd 	bl	1bc50 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1bcb6:	3408      	adds	r4, #8
   1bcb8:	4b03      	ldr	r3, [pc, #12]	; (1bcc8 <pin_handler_trigger_uninit+0x34>)
   1bcba:	2200      	movs	r2, #0
   1bcbc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   1bcc0:	bd10      	pop	{r4, pc}
   1bcc2:	bf00      	nop
   1bcc4:	40006000 	.word	0x40006000
   1bcc8:	20000568 	.word	0x20000568

0001bccc <pin_handler_set>:
{
   1bccc:	b570      	push	{r4, r5, r6, lr}
   1bcce:	b082      	sub	sp, #8
   1bcd0:	4606      	mov	r6, r0
   1bcd2:	460c      	mov	r4, r1
   1bcd4:	4615      	mov	r5, r2
    release_handler(pin);
   1bcd6:	f7ff ffbb 	bl	1bc50 <release_handler>
    if (!handler)
   1bcda:	b324      	cbz	r4, 1bd26 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   1bcdc:	4629      	mov	r1, r5
   1bcde:	4620      	mov	r0, r4
   1bce0:	f7ff fef6 	bl	1bad0 <find_handler>
    if (handler_id < 0)
   1bce4:	1e03      	subs	r3, r0, #0
   1bce6:	db13      	blt.n	1bd10 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   1bce8:	4a10      	ldr	r2, [pc, #64]	; (1bd2c <pin_handler_set+0x60>)
   1bcea:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1bcee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1bcf2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1bcf4:	025b      	lsls	r3, r3, #9
   1bcf6:	b29b      	uxth	r3, r3
   1bcf8:	f106 0008 	add.w	r0, r6, #8
   1bcfc:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   1bd00:	430b      	orrs	r3, r1
   1bd02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1bd06:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   1bd0a:	4809      	ldr	r0, [pc, #36]	; (1bd30 <pin_handler_set+0x64>)
}
   1bd0c:	b002      	add	sp, #8
   1bd0e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1bd10:	f10d 0107 	add.w	r1, sp, #7
   1bd14:	4807      	ldr	r0, [pc, #28]	; (1bd34 <pin_handler_set+0x68>)
   1bd16:	f7ff fe47 	bl	1b9a8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1bd1a:	4b05      	ldr	r3, [pc, #20]	; (1bd30 <pin_handler_set+0x64>)
   1bd1c:	4298      	cmp	r0, r3
   1bd1e:	d1f5      	bne.n	1bd0c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1bd20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bd24:	e7e0      	b.n	1bce8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   1bd26:	4802      	ldr	r0, [pc, #8]	; (1bd30 <pin_handler_set+0x64>)
   1bd28:	e7f0      	b.n	1bd0c <pin_handler_set+0x40>
   1bd2a:	bf00      	nop
   1bd2c:	20000568 	.word	0x20000568
   1bd30:	0bad0000 	.word	0x0bad0000
   1bd34:	200005dc 	.word	0x200005dc

0001bd38 <port_event_handle>:

static void port_event_handle(void)
{
   1bd38:	b570      	push	{r4, r5, r6, lr}
   1bd3a:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1bd3c:	4a2c      	ldr	r2, [pc, #176]	; (1bdf0 <port_event_handle+0xb8>)
   1bd3e:	466b      	mov	r3, sp
   1bd40:	e892 0003 	ldmia.w	r2, {r0, r1}
   1bd44:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1bd48:	2300      	movs	r3, #0
   1bd4a:	a802      	add	r0, sp, #8
   1bd4c:	e00b      	b.n	1bd66 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   1bd4e:	aa04      	add	r2, sp, #16
   1bd50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1bd54:	f852 2c10 	ldr.w	r2, [r2, #-16]
   1bd58:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1bd5c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1bd60:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1bd64:	3301      	adds	r3, #1
   1bd66:	2b01      	cmp	r3, #1
   1bd68:	d9f1      	bls.n	1bd4e <port_event_handle+0x16>
   1bd6a:	e03d      	b.n	1bde8 <port_event_handle+0xb0>
        case 1: return NRF_P1;
   1bd6c:	4e21      	ldr	r6, [pc, #132]	; (1bdf4 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1bd6e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   1bd72:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   1bd76:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1bd7a:	f7ff fee5 	bl	1bb48 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   1bd7e:	2301      	movs	r3, #1
   1bd80:	40ab      	lsls	r3, r5
   1bd82:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   1bd86:	ab04      	add	r3, sp, #16
   1bd88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1bd8c:	f853 0c08 	ldr.w	r0, [r3, #-8]
   1bd90:	b1f8      	cbz	r0, 1bdd2 <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
   1bd92:	fa90 f0a0 	rbit	r0, r0
   1bd96:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   1bd9a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1bd9e:	f100 0208 	add.w	r2, r0, #8
   1bda2:	4b15      	ldr	r3, [pc, #84]	; (1bdf8 <port_event_handle+0xc0>)
   1bda4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   1bda8:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1bdac:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   1bdae:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1bdb2:	ae02      	add	r6, sp, #8
   1bdb4:	2301      	movs	r3, #1
   1bdb6:	fa03 f202 	lsl.w	r2, r3, r2
   1bdba:	5d73      	ldrb	r3, [r6, r5]
   1bdbc:	ea23 0302 	bic.w	r3, r3, r2
   1bdc0:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
   1bdc2:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   1bdc6:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1bdc8:	2b01      	cmp	r3, #1
   1bdca:	d0cf      	beq.n	1bd6c <port_event_handle+0x34>
        case 0: return NRF_P0;
   1bdcc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1bdd0:	e7cd      	b.n	1bd6e <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1bdd2:	3401      	adds	r4, #1
   1bdd4:	2c01      	cmp	r4, #1
   1bdd6:	d9d6      	bls.n	1bd86 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1bdd8:	4b08      	ldr	r3, [pc, #32]	; (1bdfc <port_event_handle+0xc4>)
   1bdda:	2200      	movs	r2, #0
   1bddc:	601a      	str	r2, [r3, #0]
   1bdde:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   1bde0:	a802      	add	r0, sp, #8
   1bde2:	f7ff ff0b 	bl	1bbfc <latch_pending_read_and_check>
   1bde6:	b108      	cbz	r0, 1bdec <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1bde8:	2400      	movs	r4, #0
   1bdea:	e7f3      	b.n	1bdd4 <port_event_handle+0x9c>
}
   1bdec:	b004      	add	sp, #16
   1bdee:	bd70      	pop	{r4, r5, r6, pc}
   1bdf0:	00025f28 	.word	0x00025f28
   1bdf4:	50000300 	.word	0x50000300
   1bdf8:	20000568 	.word	0x20000568
   1bdfc:	4000617c 	.word	0x4000617c

0001be00 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   1be00:	b538      	push	{r3, r4, r5, lr}
   1be02:	4604      	mov	r4, r0
    while (mask)
   1be04:	b1cc      	cbz	r4, 1be3a <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   1be06:	fa94 f3a4 	rbit	r3, r4
   1be0a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1be0e:	2201      	movs	r2, #1
   1be10:	409a      	lsls	r2, r3
   1be12:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1be16:	4a09      	ldr	r2, [pc, #36]	; (1be3c <gpiote_evt_handle+0x3c>)
   1be18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1be1c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1be20:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1be24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1be28:	f3c0 4001 	ubfx	r0, r0, #16, #2
   1be2c:	f008 ff36 	bl	24c9c <gpiote_polarity_to_trigger>
   1be30:	4601      	mov	r1, r0
   1be32:	4628      	mov	r0, r5
   1be34:	f7ff fe72 	bl	1bb1c <call_handler>
   1be38:	e7e4      	b.n	1be04 <gpiote_evt_handle+0x4>
    }
}
   1be3a:	bd38      	pop	{r3, r4, r5, pc}
   1be3c:	40006000 	.word	0x40006000

0001be40 <nrfx_gpiote_input_configure>:
{
   1be40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1be44:	4604      	mov	r4, r0
   1be46:	4615      	mov	r5, r2
   1be48:	461e      	mov	r6, r3
    if (p_input_config)
   1be4a:	b361      	cbz	r1, 1bea6 <nrfx_gpiote_input_configure+0x66>
   1be4c:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   1be4e:	f008 ff0f 	bl	24c70 <pin_is_task_output>
   1be52:	2800      	cmp	r0, #0
   1be54:	f040 8097 	bne.w	1bf86 <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
   1be58:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1be5c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1be5e:	2b01      	cmp	r3, #1
   1be60:	d042      	beq.n	1bee8 <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
   1be62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1be66:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1be6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1be6e:	2f00      	cmp	r7, #0
   1be70:	d03c      	beq.n	1beec <nrfx_gpiote_input_configure+0xac>
   1be72:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1be74:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   1be78:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1be7c:	2f00      	cmp	r7, #0
   1be7e:	d037      	beq.n	1bef0 <nrfx_gpiote_input_configure+0xb0>
   1be80:	7839      	ldrb	r1, [r7, #0]
   1be82:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1be84:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   1be86:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1be8a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1be8e:	4a42      	ldr	r2, [pc, #264]	; (1bf98 <nrfx_gpiote_input_configure+0x158>)
   1be90:	f104 0108 	add.w	r1, r4, #8
   1be94:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1be98:	f023 0302 	bic.w	r3, r3, #2
   1be9c:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1be9e:	f043 0301 	orr.w	r3, r3, #1
   1bea2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1bea6:	b1b5      	cbz	r5, 1bed6 <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1bea8:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1beac:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   1beb0:	4620      	mov	r0, r4
   1beb2:	f7ff fde1 	bl	1ba78 <pin_is_output>
   1beb6:	b1e8      	cbz	r0, 1bef4 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
   1beb8:	f1b9 0f00 	cmp.w	r9, #0
   1bebc:	d165      	bne.n	1bf8a <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1bebe:	4b36      	ldr	r3, [pc, #216]	; (1bf98 <nrfx_gpiote_input_configure+0x158>)
   1bec0:	f104 0208 	add.w	r2, r4, #8
   1bec4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   1bec8:	f020 001c 	bic.w	r0, r0, #28
   1becc:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1bece:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   1bed2:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   1bed6:	2e00      	cmp	r6, #0
   1bed8:	d05b      	beq.n	1bf92 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1beda:	6872      	ldr	r2, [r6, #4]
   1bedc:	6831      	ldr	r1, [r6, #0]
   1bede:	4620      	mov	r0, r4
   1bee0:	f7ff fef4 	bl	1bccc <pin_handler_set>
}
   1bee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
   1bee8:	482c      	ldr	r0, [pc, #176]	; (1bf9c <nrfx_gpiote_input_configure+0x15c>)
   1beea:	e7bc      	b.n	1be66 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1beec:	2100      	movs	r1, #0
   1beee:	e7c1      	b.n	1be74 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1bef0:	2100      	movs	r1, #0
   1bef2:	e7c7      	b.n	1be84 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1bef4:	4b28      	ldr	r3, [pc, #160]	; (1bf98 <nrfx_gpiote_input_configure+0x158>)
   1bef6:	f104 0208 	add.w	r2, r4, #8
   1befa:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   1befe:	f027 0720 	bic.w	r7, r7, #32
   1bf02:	04ff      	lsls	r7, r7, #19
   1bf04:	0cff      	lsrs	r7, r7, #19
   1bf06:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   1bf0a:	f1b9 0f00 	cmp.w	r9, #0
   1bf0e:	d0d6      	beq.n	1bebe <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
   1bf10:	f1b8 0f03 	cmp.w	r8, #3
   1bf14:	d83b      	bhi.n	1bf8e <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1bf16:	686b      	ldr	r3, [r5, #4]
   1bf18:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1bf1a:	f1b8 0f00 	cmp.w	r8, #0
   1bf1e:	d106      	bne.n	1bf2e <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   1bf20:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   1bf24:	4b1e      	ldr	r3, [pc, #120]	; (1bfa0 <nrfx_gpiote_input_configure+0x160>)
   1bf26:	2200      	movs	r2, #0
   1bf28:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1bf2c:	e7c7      	b.n	1bebe <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   1bf2e:	4640      	mov	r0, r8
   1bf30:	f008 feb5 	bl	24c9e <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1bf34:	4b1a      	ldr	r3, [pc, #104]	; (1bfa0 <nrfx_gpiote_input_configure+0x160>)
   1bf36:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1bf3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1bf3e:	f021 0103 	bic.w	r1, r1, #3
   1bf42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1bf46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1bf4a:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1bf4e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1bf52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1bf56:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   1bf5a:	0221      	lsls	r1, r4, #8
   1bf5c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1bf60:	0400      	lsls	r0, r0, #16
   1bf62:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1bf66:	4301      	orrs	r1, r0
   1bf68:	ea4c 0101 	orr.w	r1, ip, r1
   1bf6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1bf70:	036d      	lsls	r5, r5, #13
   1bf72:	b2ad      	uxth	r5, r5
   1bf74:	f104 0308 	add.w	r3, r4, #8
   1bf78:	432f      	orrs	r7, r5
   1bf7a:	f047 0720 	orr.w	r7, r7, #32
   1bf7e:	4a06      	ldr	r2, [pc, #24]	; (1bf98 <nrfx_gpiote_input_configure+0x158>)
   1bf80:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   1bf84:	e79b      	b.n	1bebe <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
   1bf86:	4807      	ldr	r0, [pc, #28]	; (1bfa4 <nrfx_gpiote_input_configure+0x164>)
   1bf88:	e7ac      	b.n	1bee4 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
   1bf8a:	4806      	ldr	r0, [pc, #24]	; (1bfa4 <nrfx_gpiote_input_configure+0x164>)
   1bf8c:	e7aa      	b.n	1bee4 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
   1bf8e:	4805      	ldr	r0, [pc, #20]	; (1bfa4 <nrfx_gpiote_input_configure+0x164>)
   1bf90:	e7a8      	b.n	1bee4 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
   1bf92:	4805      	ldr	r0, [pc, #20]	; (1bfa8 <nrfx_gpiote_input_configure+0x168>)
   1bf94:	e7a6      	b.n	1bee4 <nrfx_gpiote_input_configure+0xa4>
   1bf96:	bf00      	nop
   1bf98:	20000568 	.word	0x20000568
   1bf9c:	50000300 	.word	0x50000300
   1bfa0:	40006000 	.word	0x40006000
   1bfa4:	0bad0004 	.word	0x0bad0004
   1bfa8:	0bad0000 	.word	0x0bad0000

0001bfac <nrfx_gpiote_output_configure>:
{
   1bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bfae:	4604      	mov	r4, r0
   1bfb0:	4615      	mov	r5, r2
    if (p_config)
   1bfb2:	2900      	cmp	r1, #0
   1bfb4:	d052      	beq.n	1c05c <nrfx_gpiote_output_configure+0xb0>
   1bfb6:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1bfb8:	f008 fe69 	bl	24c8e <pin_is_input>
   1bfbc:	b128      	cbz	r0, 1bfca <nrfx_gpiote_output_configure+0x1e>
   1bfbe:	4620      	mov	r0, r4
   1bfc0:	f7ff fd44 	bl	1ba4c <pin_in_use_by_te>
   1bfc4:	2800      	cmp	r0, #0
   1bfc6:	f040 809d 	bne.w	1c104 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1bfca:	4620      	mov	r0, r4
   1bfcc:	f7ff fd48 	bl	1ba60 <pin_has_trigger>
   1bfd0:	b118      	cbz	r0, 1bfda <nrfx_gpiote_output_configure+0x2e>
   1bfd2:	7873      	ldrb	r3, [r6, #1]
   1bfd4:	2b01      	cmp	r3, #1
   1bfd6:	f000 8097 	beq.w	1c108 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1bfda:	f106 0c01 	add.w	ip, r6, #1
   1bfde:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   1bfe0:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1bfe4:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1bfe6:	2b01      	cmp	r3, #1
   1bfe8:	d07c      	beq.n	1c0e4 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
   1bfea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1bfee:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1bff2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1bff6:	f1bc 0f00 	cmp.w	ip, #0
   1bffa:	d075      	beq.n	1c0e8 <nrfx_gpiote_output_configure+0x13c>
   1bffc:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1bffe:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1c002:	2f00      	cmp	r7, #0
   1c004:	d072      	beq.n	1c0ec <nrfx_gpiote_output_configure+0x140>
   1c006:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1c00a:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1c00e:	2e00      	cmp	r6, #0
   1c010:	d06f      	beq.n	1c0f2 <nrfx_gpiote_output_configure+0x146>
   1c012:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1c016:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   1c01a:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1c01e:	f1bc 0f00 	cmp.w	ip, #0
   1c022:	d069      	beq.n	1c0f8 <nrfx_gpiote_output_configure+0x14c>
   1c024:	7873      	ldrb	r3, [r6, #1]
   1c026:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1c028:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1c02c:	2f00      	cmp	r7, #0
   1c02e:	d065      	beq.n	1c0fc <nrfx_gpiote_output_configure+0x150>
   1c030:	78b7      	ldrb	r7, [r6, #2]
   1c032:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1c034:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1c036:	2e00      	cmp	r6, #0
   1c038:	d062      	beq.n	1c100 <nrfx_gpiote_output_configure+0x154>
   1c03a:	7836      	ldrb	r6, [r6, #0]
   1c03c:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1c03e:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1c040:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   1c042:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1c046:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1c04a:	4a33      	ldr	r2, [pc, #204]	; (1c118 <nrfx_gpiote_output_configure+0x16c>)
   1c04c:	f104 0108 	add.w	r1, r4, #8
   1c050:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1c054:	f043 0303 	orr.w	r3, r3, #3
   1c058:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1c05c:	2d00      	cmp	r5, #0
   1c05e:	d055      	beq.n	1c10c <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
   1c060:	4620      	mov	r0, r4
   1c062:	f008 fe14 	bl	24c8e <pin_is_input>
   1c066:	2800      	cmp	r0, #0
   1c068:	d152      	bne.n	1c110 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
   1c06a:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   1c06c:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   1c070:	4b2a      	ldr	r3, [pc, #168]	; (1c11c <nrfx_gpiote_output_configure+0x170>)
   1c072:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1c076:	4928      	ldr	r1, [pc, #160]	; (1c118 <nrfx_gpiote_output_configure+0x16c>)
   1c078:	f104 0008 	add.w	r0, r4, #8
   1c07c:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   1c080:	f023 0320 	bic.w	r3, r3, #32
   1c084:	04db      	lsls	r3, r3, #19
   1c086:	0cdb      	lsrs	r3, r3, #19
   1c088:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1c08c:	7869      	ldrb	r1, [r5, #1]
   1c08e:	2900      	cmp	r1, #0
   1c090:	d040      	beq.n	1c114 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1c092:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1c096:	4d21      	ldr	r5, [pc, #132]	; (1c11c <nrfx_gpiote_output_configure+0x170>)
   1c098:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   1c09c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1c0a0:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
   1c0a4:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   1c0a8:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c0ac:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   1c0b0:	0220      	lsls	r0, r4, #8
   1c0b2:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1c0b6:	0409      	lsls	r1, r1, #16
   1c0b8:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c0bc:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1c0be:	ea4f 500c 	mov.w	r0, ip, lsl #20
   1c0c2:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1c0c6:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1c0c8:	4339      	orrs	r1, r7
   1c0ca:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1c0ce:	0352      	lsls	r2, r2, #13
   1c0d0:	b292      	uxth	r2, r2
   1c0d2:	3408      	adds	r4, #8
   1c0d4:	431a      	orrs	r2, r3
   1c0d6:	f042 0220 	orr.w	r2, r2, #32
   1c0da:	4b0f      	ldr	r3, [pc, #60]	; (1c118 <nrfx_gpiote_output_configure+0x16c>)
   1c0dc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   1c0e0:	480f      	ldr	r0, [pc, #60]	; (1c120 <nrfx_gpiote_output_configure+0x174>)
   1c0e2:	e014      	b.n	1c10e <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
   1c0e4:	490f      	ldr	r1, [pc, #60]	; (1c124 <nrfx_gpiote_output_configure+0x178>)
   1c0e6:	e782      	b.n	1bfee <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1c0e8:	2300      	movs	r3, #0
   1c0ea:	e788      	b.n	1bffe <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1c0ec:	f04f 0e00 	mov.w	lr, #0
   1c0f0:	e78b      	b.n	1c00a <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1c0f2:	f04f 0e00 	mov.w	lr, #0
   1c0f6:	e78e      	b.n	1c016 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1c0f8:	2300      	movs	r3, #0
   1c0fa:	e795      	b.n	1c028 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1c0fc:	2700      	movs	r7, #0
   1c0fe:	e799      	b.n	1c034 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1c100:	2600      	movs	r6, #0
   1c102:	e79c      	b.n	1c03e <nrfx_gpiote_output_configure+0x92>
   1c104:	4808      	ldr	r0, [pc, #32]	; (1c128 <nrfx_gpiote_output_configure+0x17c>)
   1c106:	e002      	b.n	1c10e <nrfx_gpiote_output_configure+0x162>
   1c108:	4807      	ldr	r0, [pc, #28]	; (1c128 <nrfx_gpiote_output_configure+0x17c>)
   1c10a:	e000      	b.n	1c10e <nrfx_gpiote_output_configure+0x162>
   1c10c:	4804      	ldr	r0, [pc, #16]	; (1c120 <nrfx_gpiote_output_configure+0x174>)
}
   1c10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   1c110:	4805      	ldr	r0, [pc, #20]	; (1c128 <nrfx_gpiote_output_configure+0x17c>)
   1c112:	e7fc      	b.n	1c10e <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
   1c114:	4802      	ldr	r0, [pc, #8]	; (1c120 <nrfx_gpiote_output_configure+0x174>)
   1c116:	e7fa      	b.n	1c10e <nrfx_gpiote_output_configure+0x162>
   1c118:	20000568 	.word	0x20000568
   1c11c:	40006000 	.word	0x40006000
   1c120:	0bad0000 	.word	0x0bad0000
   1c124:	50000300 	.word	0x50000300
   1c128:	0bad0004 	.word	0x0bad0004

0001c12c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1c12c:	4b01      	ldr	r3, [pc, #4]	; (1c134 <nrfx_gpiote_global_callback_set+0x8>)
   1c12e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   1c130:	60d9      	str	r1, [r3, #12]
}
   1c132:	4770      	bx	lr
   1c134:	20000568 	.word	0x20000568

0001c138 <nrfx_gpiote_channel_get>:
{
   1c138:	b538      	push	{r3, r4, r5, lr}
   1c13a:	4604      	mov	r4, r0
   1c13c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   1c13e:	f7ff fc85 	bl	1ba4c <pin_in_use_by_te>
   1c142:	b140      	cbz	r0, 1c156 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1c144:	f104 0008 	add.w	r0, r4, #8
   1c148:	4b04      	ldr	r3, [pc, #16]	; (1c15c <nrfx_gpiote_channel_get+0x24>)
   1c14a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   1c14e:	0b5b      	lsrs	r3, r3, #13
   1c150:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1c152:	4803      	ldr	r0, [pc, #12]	; (1c160 <nrfx_gpiote_channel_get+0x28>)
}
   1c154:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1c156:	4803      	ldr	r0, [pc, #12]	; (1c164 <nrfx_gpiote_channel_get+0x2c>)
   1c158:	e7fc      	b.n	1c154 <nrfx_gpiote_channel_get+0x1c>
   1c15a:	bf00      	nop
   1c15c:	20000568 	.word	0x20000568
   1c160:	0bad0000 	.word	0x0bad0000
   1c164:	0bad0004 	.word	0x0bad0004

0001c168 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1c168:	4b0f      	ldr	r3, [pc, #60]	; (1c1a8 <nrfx_gpiote_init+0x40>)
   1c16a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1c16e:	b10b      	cbz	r3, 1c174 <nrfx_gpiote_init+0xc>
        return err_code;
   1c170:	480e      	ldr	r0, [pc, #56]	; (1c1ac <nrfx_gpiote_init+0x44>)
}
   1c172:	4770      	bx	lr
{
   1c174:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1c176:	4c0c      	ldr	r4, [pc, #48]	; (1c1a8 <nrfx_gpiote_init+0x40>)
   1c178:	2260      	movs	r2, #96	; 0x60
   1c17a:	2100      	movs	r1, #0
   1c17c:	f104 0010 	add.w	r0, r4, #16
   1c180:	f009 fc51 	bl	25a26 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1c184:	2006      	movs	r0, #6
   1c186:	f7f7 f83f 	bl	13208 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c18a:	4b09      	ldr	r3, [pc, #36]	; (1c1b0 <nrfx_gpiote_init+0x48>)
   1c18c:	2200      	movs	r2, #0
   1c18e:	601a      	str	r2, [r3, #0]
   1c190:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1c192:	4b08      	ldr	r3, [pc, #32]	; (1c1b4 <nrfx_gpiote_init+0x4c>)
   1c194:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c198:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1c19c:	2301      	movs	r3, #1
   1c19e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1c1a2:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   1c1a4:	4804      	ldr	r0, [pc, #16]	; (1c1b8 <nrfx_gpiote_init+0x50>)
}
   1c1a6:	bd10      	pop	{r4, pc}
   1c1a8:	20000568 	.word	0x20000568
   1c1ac:	0bad0005 	.word	0x0bad0005
   1c1b0:	4000617c 	.word	0x4000617c
   1c1b4:	40006000 	.word	0x40006000
   1c1b8:	0bad0000 	.word	0x0bad0000

0001c1bc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1c1bc:	4b03      	ldr	r3, [pc, #12]	; (1c1cc <nrfx_gpiote_is_init+0x10>)
   1c1be:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1c1c2:	3800      	subs	r0, #0
   1c1c4:	bf18      	it	ne
   1c1c6:	2001      	movne	r0, #1
   1c1c8:	4770      	bx	lr
   1c1ca:	bf00      	nop
   1c1cc:	20000568 	.word	0x20000568

0001c1d0 <nrfx_gpiote_channel_free>:
{
   1c1d0:	b508      	push	{r3, lr}
   1c1d2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1c1d4:	4801      	ldr	r0, [pc, #4]	; (1c1dc <nrfx_gpiote_channel_free+0xc>)
   1c1d6:	f7ff fc0b 	bl	1b9f0 <nrfx_flag32_free>
}
   1c1da:	bd08      	pop	{r3, pc}
   1c1dc:	200005d8 	.word	0x200005d8

0001c1e0 <nrfx_gpiote_channel_alloc>:
{
   1c1e0:	b508      	push	{r3, lr}
   1c1e2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1c1e4:	4801      	ldr	r0, [pc, #4]	; (1c1ec <nrfx_gpiote_channel_alloc+0xc>)
   1c1e6:	f7ff fbdf 	bl	1b9a8 <nrfx_flag32_alloc>
}
   1c1ea:	bd08      	pop	{r3, pc}
   1c1ec:	200005d8 	.word	0x200005d8

0001c1f0 <nrfx_gpiote_trigger_enable>:
{
   1c1f0:	b538      	push	{r3, r4, r5, lr}
   1c1f2:	4604      	mov	r4, r0
   1c1f4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c1f6:	f7ff fc29 	bl	1ba4c <pin_in_use_by_te>
   1c1fa:	b308      	cbz	r0, 1c240 <nrfx_gpiote_trigger_enable+0x50>
   1c1fc:	4620      	mov	r0, r4
   1c1fe:	f008 fd46 	bl	24c8e <pin_is_input>
   1c202:	b1e8      	cbz	r0, 1c240 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   1c204:	4620      	mov	r0, r4
   1c206:	f7ff fc41 	bl	1ba8c <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1c20a:	0083      	lsls	r3, r0, #2
   1c20c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   1c210:	b29b      	uxth	r3, r3
   1c212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c216:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c21a:	2200      	movs	r2, #0
   1c21c:	601a      	str	r2, [r3, #0]
   1c21e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1c220:	4a22      	ldr	r2, [pc, #136]	; (1c2ac <nrfx_gpiote_trigger_enable+0xbc>)
   1c222:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1c226:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1c22a:	f043 0301 	orr.w	r3, r3, #1
   1c22e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   1c232:	b39d      	cbz	r5, 1c29c <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1c234:	2301      	movs	r3, #1
   1c236:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   1c23a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   1c23e:	e02d      	b.n	1c29c <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1c240:	f104 0308 	add.w	r3, r4, #8
   1c244:	4a1a      	ldr	r2, [pc, #104]	; (1c2b0 <nrfx_gpiote_trigger_enable+0xc0>)
   1c246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1c24a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1c24e:	2b04      	cmp	r3, #4
   1c250:	d012      	beq.n	1c278 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1c252:	2b05      	cmp	r3, #5
   1c254:	d023      	beq.n	1c29e <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
   1c256:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1c25a:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1c25c:	2b01      	cmp	r3, #1
   1c25e:	d009      	beq.n	1c274 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
   1c260:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   1c264:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1c268:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1c26a:	f013 0f01 	tst.w	r3, #1
   1c26e:	d018      	beq.n	1c2a2 <nrfx_gpiote_trigger_enable+0xb2>
   1c270:	2003      	movs	r0, #3
   1c272:	e002      	b.n	1c27a <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   1c274:	4b0f      	ldr	r3, [pc, #60]	; (1c2b4 <nrfx_gpiote_trigger_enable+0xc4>)
   1c276:	e7f5      	b.n	1c264 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1c278:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   1c27a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1c27e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1c280:	2c01      	cmp	r4, #1
   1c282:	d010      	beq.n	1c2a6 <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
   1c284:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1c288:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1c28c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1c290:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1c294:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1c298:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   1c29c:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1c29e:	2002      	movs	r0, #2
   1c2a0:	e7eb      	b.n	1c27a <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1c2a2:	2002      	movs	r0, #2
   1c2a4:	e7e9      	b.n	1c27a <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   1c2a6:	4903      	ldr	r1, [pc, #12]	; (1c2b4 <nrfx_gpiote_trigger_enable+0xc4>)
   1c2a8:	e7ee      	b.n	1c288 <nrfx_gpiote_trigger_enable+0x98>
   1c2aa:	bf00      	nop
   1c2ac:	40006000 	.word	0x40006000
   1c2b0:	20000568 	.word	0x20000568
   1c2b4:	50000300 	.word	0x50000300

0001c2b8 <nrfx_gpiote_trigger_disable>:
{
   1c2b8:	b510      	push	{r4, lr}
   1c2ba:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1c2bc:	f7ff fbc6 	bl	1ba4c <pin_in_use_by_te>
   1c2c0:	b1a0      	cbz	r0, 1c2ec <nrfx_gpiote_trigger_disable+0x34>
   1c2c2:	4620      	mov	r0, r4
   1c2c4:	f008 fce3 	bl	24c8e <pin_is_input>
   1c2c8:	b180      	cbz	r0, 1c2ec <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   1c2ca:	4620      	mov	r0, r4
   1c2cc:	f7ff fbde 	bl	1ba8c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1c2d0:	2201      	movs	r2, #1
   1c2d2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1c2d4:	4b0e      	ldr	r3, [pc, #56]	; (1c310 <nrfx_gpiote_trigger_disable+0x58>)
   1c2d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1c2da:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1c2de:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   1c2e2:	f022 0203 	bic.w	r2, r2, #3
   1c2e6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   1c2ea:	e00e      	b.n	1c30a <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   1c2ec:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1c2f0:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1c2f2:	2c01      	cmp	r4, #1
   1c2f4:	d00a      	beq.n	1c30c <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   1c2f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1c2fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c2fe:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1c302:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1c306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1c30a:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   1c30c:	4901      	ldr	r1, [pc, #4]	; (1c314 <nrfx_gpiote_trigger_disable+0x5c>)
   1c30e:	e7f4      	b.n	1c2fa <nrfx_gpiote_trigger_disable+0x42>
   1c310:	40006000 	.word	0x40006000
   1c314:	50000300 	.word	0x50000300

0001c318 <nrfx_gpiote_pin_uninit>:
{
   1c318:	b510      	push	{r4, lr}
   1c31a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1c31c:	f7ff fb8c 	bl	1ba38 <pin_in_use>
   1c320:	b908      	cbnz	r0, 1c326 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   1c322:	480c      	ldr	r0, [pc, #48]	; (1c354 <nrfx_gpiote_pin_uninit+0x3c>)
}
   1c324:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   1c326:	4620      	mov	r0, r4
   1c328:	f7ff ffc6 	bl	1c2b8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1c32c:	4620      	mov	r0, r4
   1c32e:	f7ff fcb1 	bl	1bc94 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   1c332:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1c336:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1c338:	2c01      	cmp	r4, #1
   1c33a:	d008      	beq.n	1c34e <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   1c33c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1c340:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c344:	2102      	movs	r1, #2
   1c346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   1c34a:	4803      	ldr	r0, [pc, #12]	; (1c358 <nrfx_gpiote_pin_uninit+0x40>)
   1c34c:	e7ea      	b.n	1c324 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   1c34e:	4a03      	ldr	r2, [pc, #12]	; (1c35c <nrfx_gpiote_pin_uninit+0x44>)
   1c350:	e7f6      	b.n	1c340 <nrfx_gpiote_pin_uninit+0x28>
   1c352:	bf00      	nop
   1c354:	0bad0004 	.word	0x0bad0004
   1c358:	0bad0000 	.word	0x0bad0000
   1c35c:	50000300 	.word	0x50000300

0001c360 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   1c360:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1c362:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   1c364:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c368:	2100      	movs	r1, #0
    uint32_t status = 0;
   1c36a:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c36c:	e003      	b.n	1c376 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   1c36e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   1c370:	3304      	adds	r3, #4
   1c372:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1c374:	3101      	adds	r1, #1
   1c376:	2907      	cmp	r1, #7
   1c378:	d814      	bhi.n	1c3a4 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c37a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1c37e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   1c382:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1c384:	2a00      	cmp	r2, #0
   1c386:	d0f2      	beq.n	1c36e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   1c388:	4a0b      	ldr	r2, [pc, #44]	; (1c3b8 <nrfx_gpiote_irq_handler+0x58>)
   1c38a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1c38e:	4210      	tst	r0, r2
   1c390:	d0ed      	beq.n	1c36e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   1c392:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1c396:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1c39a:	2400      	movs	r4, #0
   1c39c:	6014      	str	r4, [r2, #0]
   1c39e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   1c3a0:	4305      	orrs	r5, r0
   1c3a2:	e7e4      	b.n	1c36e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c3a4:	4b05      	ldr	r3, [pc, #20]	; (1c3bc <nrfx_gpiote_irq_handler+0x5c>)
   1c3a6:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1c3a8:	b91b      	cbnz	r3, 1c3b2 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   1c3aa:	4628      	mov	r0, r5
   1c3ac:	f7ff fd28 	bl	1be00 <gpiote_evt_handle>
}
   1c3b0:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   1c3b2:	f7ff fcc1 	bl	1bd38 <port_event_handle>
   1c3b6:	e7f8      	b.n	1c3aa <nrfx_gpiote_irq_handler+0x4a>
   1c3b8:	40006000 	.word	0x40006000
   1c3bc:	4000617c 	.word	0x4000617c

0001c3c0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1c3c0:	b508      	push	{r3, lr}
   1c3c2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1c3c4:	4801      	ldr	r0, [pc, #4]	; (1c3cc <nrfx_ppi_channel_alloc+0xc>)
   1c3c6:	f7ff faef 	bl	1b9a8 <nrfx_flag32_alloc>
}
   1c3ca:	bd08      	pop	{r3, pc}
   1c3cc:	200005e4 	.word	0x200005e4

0001c3d0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1c3d0:	4b03      	ldr	r3, [pc, #12]	; (1c3e0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1c3d2:	4a04      	ldr	r2, [pc, #16]	; (1c3e4 <z_device_state_init+0x14>)
   1c3d4:	4293      	cmp	r3, r2
   1c3d6:	d201      	bcs.n	1c3dc <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1c3d8:	3318      	adds	r3, #24
   1c3da:	e7fa      	b.n	1c3d2 <z_device_state_init+0x2>
	}
}
   1c3dc:	4770      	bx	lr
   1c3de:	bf00      	nop
   1c3e0:	00025b24 	.word	0x00025b24
   1c3e4:	00025bcc 	.word	0x00025bcc

0001c3e8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1c3e8:	b570      	push	{r4, r5, r6, lr}
   1c3ea:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c3ec:	4b11      	ldr	r3, [pc, #68]	; (1c434 <z_sys_init_run_level+0x4c>)
   1c3ee:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1c3f2:	e009      	b.n	1c408 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1c3f4:	4240      	negs	r0, r0
   1c3f6:	e017      	b.n	1c428 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1c3f8:	68eb      	ldr	r3, [r5, #12]
   1c3fa:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1c3fc:	68ea      	ldr	r2, [r5, #12]
   1c3fe:	7853      	ldrb	r3, [r2, #1]
   1c400:	f043 0301 	orr.w	r3, r3, #1
   1c404:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c406:	3408      	adds	r4, #8
   1c408:	1c73      	adds	r3, r6, #1
   1c40a:	4a0a      	ldr	r2, [pc, #40]	; (1c434 <z_sys_init_run_level+0x4c>)
   1c40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c410:	42a3      	cmp	r3, r4
   1c412:	d90d      	bls.n	1c430 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1c414:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1c416:	6823      	ldr	r3, [r4, #0]
   1c418:	4628      	mov	r0, r5
   1c41a:	4798      	blx	r3
		if (dev != NULL) {
   1c41c:	2d00      	cmp	r5, #0
   1c41e:	d0f2      	beq.n	1c406 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1c420:	2800      	cmp	r0, #0
   1c422:	d0eb      	beq.n	1c3fc <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1c424:	2800      	cmp	r0, #0
   1c426:	dbe5      	blt.n	1c3f4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1c428:	28ff      	cmp	r0, #255	; 0xff
   1c42a:	dde5      	ble.n	1c3f8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1c42c:	20ff      	movs	r0, #255	; 0xff
   1c42e:	e7e3      	b.n	1c3f8 <z_sys_init_run_level+0x10>
		}
	}
}
   1c430:	bd70      	pop	{r4, r5, r6, pc}
   1c432:	bf00      	nop
   1c434:	00027f10 	.word	0x00027f10

0001c438 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1c438:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1c43a:	4605      	mov	r5, r0
   1c43c:	b328      	cbz	r0, 1c48a <z_impl_device_get_binding+0x52>
   1c43e:	7803      	ldrb	r3, [r0, #0]
   1c440:	b32b      	cbz	r3, 1c48e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1c442:	4c14      	ldr	r4, [pc, #80]	; (1c494 <z_impl_device_get_binding+0x5c>)
   1c444:	e000      	b.n	1c448 <z_impl_device_get_binding+0x10>
   1c446:	3418      	adds	r4, #24
   1c448:	4b13      	ldr	r3, [pc, #76]	; (1c498 <z_impl_device_get_binding+0x60>)
   1c44a:	429c      	cmp	r4, r3
   1c44c:	d008      	beq.n	1c460 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1c44e:	4620      	mov	r0, r4
   1c450:	f008 fc2b 	bl	24caa <z_device_ready>
   1c454:	2800      	cmp	r0, #0
   1c456:	d0f6      	beq.n	1c446 <z_impl_device_get_binding+0xe>
   1c458:	6823      	ldr	r3, [r4, #0]
   1c45a:	42ab      	cmp	r3, r5
   1c45c:	d1f3      	bne.n	1c446 <z_impl_device_get_binding+0xe>
   1c45e:	e012      	b.n	1c486 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1c460:	4c0c      	ldr	r4, [pc, #48]	; (1c494 <z_impl_device_get_binding+0x5c>)
   1c462:	e000      	b.n	1c466 <z_impl_device_get_binding+0x2e>
   1c464:	3418      	adds	r4, #24
   1c466:	4b0c      	ldr	r3, [pc, #48]	; (1c498 <z_impl_device_get_binding+0x60>)
   1c468:	429c      	cmp	r4, r3
   1c46a:	d00b      	beq.n	1c484 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c46c:	4620      	mov	r0, r4
   1c46e:	f008 fc1c 	bl	24caa <z_device_ready>
   1c472:	2800      	cmp	r0, #0
   1c474:	d0f6      	beq.n	1c464 <z_impl_device_get_binding+0x2c>
   1c476:	6821      	ldr	r1, [r4, #0]
   1c478:	4628      	mov	r0, r5
   1c47a:	f7f0 fae7 	bl	ca4c <strcmp>
   1c47e:	2800      	cmp	r0, #0
   1c480:	d1f0      	bne.n	1c464 <z_impl_device_get_binding+0x2c>
   1c482:	e000      	b.n	1c486 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1c484:	2400      	movs	r4, #0
}
   1c486:	4620      	mov	r0, r4
   1c488:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1c48a:	4604      	mov	r4, r0
   1c48c:	e7fb      	b.n	1c486 <z_impl_device_get_binding+0x4e>
   1c48e:	2400      	movs	r4, #0
   1c490:	e7f9      	b.n	1c486 <z_impl_device_get_binding+0x4e>
   1c492:	bf00      	nop
   1c494:	00025b24 	.word	0x00025b24
   1c498:	00025bcc 	.word	0x00025bcc

0001c49c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   1c49c:	2804      	cmp	r0, #4
   1c49e:	d80c      	bhi.n	1c4ba <reason_to_str+0x1e>
   1c4a0:	e8df f000 	tbb	[pc, r0]
   1c4a4:	07050d03 	.word	0x07050d03
   1c4a8:	09          	.byte	0x09
   1c4a9:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1c4aa:	4806      	ldr	r0, [pc, #24]	; (1c4c4 <reason_to_str+0x28>)
   1c4ac:	4770      	bx	lr
		return "Stack overflow";
   1c4ae:	4806      	ldr	r0, [pc, #24]	; (1c4c8 <reason_to_str+0x2c>)
   1c4b0:	4770      	bx	lr
		return "Kernel oops";
   1c4b2:	4806      	ldr	r0, [pc, #24]	; (1c4cc <reason_to_str+0x30>)
   1c4b4:	4770      	bx	lr
		return "Kernel panic";
   1c4b6:	4806      	ldr	r0, [pc, #24]	; (1c4d0 <reason_to_str+0x34>)
   1c4b8:	4770      	bx	lr
	default:
		return "Unknown error";
   1c4ba:	4806      	ldr	r0, [pc, #24]	; (1c4d4 <reason_to_str+0x38>)
   1c4bc:	4770      	bx	lr
		return "Unhandled interrupt";
   1c4be:	4806      	ldr	r0, [pc, #24]	; (1c4d8 <reason_to_str+0x3c>)
	}
}
   1c4c0:	4770      	bx	lr
   1c4c2:	bf00      	nop
   1c4c4:	00027f78 	.word	0x00027f78
   1c4c8:	00027f4c 	.word	0x00027f4c
   1c4cc:	00027f5c 	.word	0x00027f5c
   1c4d0:	00027f68 	.word	0x00027f68
   1c4d4:	00027f28 	.word	0x00027f28
   1c4d8:	00027f38 	.word	0x00027f38

0001c4dc <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1c4dc:	b130      	cbz	r0, 1c4ec <thread_name_get+0x10>
{
   1c4de:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1c4e0:	f008 fcc9 	bl	24e76 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1c4e4:	b120      	cbz	r0, 1c4f0 <thread_name_get+0x14>
   1c4e6:	7803      	ldrb	r3, [r0, #0]
   1c4e8:	b123      	cbz	r3, 1c4f4 <thread_name_get+0x18>
}
   1c4ea:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1c4ec:	4802      	ldr	r0, [pc, #8]	; (1c4f8 <thread_name_get+0x1c>)
}
   1c4ee:	4770      	bx	lr
		thread_name = "unknown";
   1c4f0:	4801      	ldr	r0, [pc, #4]	; (1c4f8 <thread_name_get+0x1c>)
   1c4f2:	e7fa      	b.n	1c4ea <thread_name_get+0xe>
   1c4f4:	4800      	ldr	r0, [pc, #0]	; (1c4f8 <thread_name_get+0x1c>)
	return thread_name;
   1c4f6:	e7f8      	b.n	1c4ea <thread_name_get+0xe>
   1c4f8:	00027f88 	.word	0x00027f88

0001c4fc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c500:	b082      	sub	sp, #8
   1c502:	4605      	mov	r5, r0
   1c504:	460e      	mov	r6, r1
	__asm__ volatile(
   1c506:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c50a:	f3ef 8711 	mrs	r7, BASEPRI
   1c50e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c512:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1c516:	f001 f9a5 	bl	1d864 <z_impl_z_current_get>
   1c51a:	4604      	mov	r4, r0
   1c51c:	4b29      	ldr	r3, [pc, #164]	; (1c5c4 <z_fatal_error+0xc8>)
   1c51e:	4a2a      	ldr	r2, [pc, #168]	; (1c5c8 <z_fatal_error+0xcc>)
   1c520:	1a9b      	subs	r3, r3, r2
   1c522:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c524:	f04f 0800 	mov.w	r8, #0
   1c528:	2201      	movs	r2, #1
   1c52a:	f362 0802 	bfi	r8, r2, #0, #3
   1c52e:	f36f 08c5 	bfc	r8, #3, #3
   1c532:	f363 188f 	bfi	r8, r3, #6, #10
   1c536:	4628      	mov	r0, r5
   1c538:	f7ff ffb0 	bl	1c49c <reason_to_str>
   1c53c:	4602      	mov	r2, r0
   1c53e:	f8ad 8000 	strh.w	r8, [sp]
   1c542:	2300      	movs	r3, #0
   1c544:	4629      	mov	r1, r5
   1c546:	4821      	ldr	r0, [pc, #132]	; (1c5cc <z_fatal_error+0xd0>)
   1c548:	f7f5 fb90 	bl	11c6c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1c54c:	b11e      	cbz	r6, 1c556 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1c54e:	69f3      	ldr	r3, [r6, #28]
   1c550:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1c554:	bb2b      	cbnz	r3, 1c5a2 <z_fatal_error+0xa6>
   1c556:	4b1b      	ldr	r3, [pc, #108]	; (1c5c4 <z_fatal_error+0xc8>)
   1c558:	4a1b      	ldr	r2, [pc, #108]	; (1c5c8 <z_fatal_error+0xcc>)
   1c55a:	1a9b      	subs	r3, r3, r2
   1c55c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1c55e:	f04f 0800 	mov.w	r8, #0
   1c562:	2201      	movs	r2, #1
   1c564:	f362 0802 	bfi	r8, r2, #0, #3
   1c568:	f36f 08c5 	bfc	r8, #3, #3
   1c56c:	f363 188f 	bfi	r8, r3, #6, #10
   1c570:	4620      	mov	r0, r4
   1c572:	f7ff ffb3 	bl	1c4dc <thread_name_get>
   1c576:	f7f5 fa3f 	bl	119f8 <z_log_strdup>
   1c57a:	4602      	mov	r2, r0
   1c57c:	4643      	mov	r3, r8
   1c57e:	4621      	mov	r1, r4
   1c580:	4813      	ldr	r0, [pc, #76]	; (1c5d0 <z_fatal_error+0xd4>)
   1c582:	f7f5 fbe7 	bl	11d54 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1c586:	4631      	mov	r1, r6
   1c588:	4628      	mov	r0, r5
   1c58a:	f7fe fd4f 	bl	1b02c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1c58e:	f387 8811 	msr	BASEPRI, r7
   1c592:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1c596:	4620      	mov	r0, r4
   1c598:	f7f7 fbe8 	bl	13d6c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1c59c:	b002      	add	sp, #8
   1c59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c5a2:	4b08      	ldr	r3, [pc, #32]	; (1c5c4 <z_fatal_error+0xc8>)
   1c5a4:	4a08      	ldr	r2, [pc, #32]	; (1c5c8 <z_fatal_error+0xcc>)
   1c5a6:	1a9b      	subs	r3, r3, r2
   1c5a8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   1c5aa:	f04f 0100 	mov.w	r1, #0
   1c5ae:	2201      	movs	r2, #1
   1c5b0:	f362 0102 	bfi	r1, r2, #0, #3
   1c5b4:	f36f 01c5 	bfc	r1, #3, #3
   1c5b8:	f363 118f 	bfi	r1, r3, #6, #10
   1c5bc:	4805      	ldr	r0, [pc, #20]	; (1c5d4 <z_fatal_error+0xd8>)
   1c5be:	f7f5 fc49 	bl	11e54 <log_0>
   1c5c2:	e7c8      	b.n	1c556 <z_fatal_error+0x5a>
   1c5c4:	00025e30 	.word	0x00025e30
   1c5c8:	00025d80 	.word	0x00025d80
   1c5cc:	00027f90 	.word	0x00027f90
   1c5d0:	00027fdc 	.word	0x00027fdc
   1c5d4:	00027fb8 	.word	0x00027fb8

0001c5d8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1c5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c5da:	b089      	sub	sp, #36	; 0x24
   1c5dc:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1c5de:	4b15      	ldr	r3, [pc, #84]	; (1c634 <init_idle_thread+0x5c>)
   1c5e0:	25b8      	movs	r5, #184	; 0xb8
   1c5e2:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1c5e6:	4b14      	ldr	r3, [pc, #80]	; (1c638 <init_idle_thread+0x60>)
   1c5e8:	f44f 76b0 	mov.w	r6, #352	; 0x160
   1c5ec:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1c5f0:	af06      	add	r7, sp, #24
   1c5f2:	4603      	mov	r3, r0
   1c5f4:	4a11      	ldr	r2, [pc, #68]	; (1c63c <init_idle_thread+0x64>)
   1c5f6:	2108      	movs	r1, #8
   1c5f8:	4638      	mov	r0, r7
   1c5fa:	f004 fbc7 	bl	20d8c <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c5fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1c602:	480f      	ldr	r0, [pc, #60]	; (1c640 <init_idle_thread+0x68>)
   1c604:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1c608:	9705      	str	r7, [sp, #20]
   1c60a:	2301      	movs	r3, #1
   1c60c:	9304      	str	r3, [sp, #16]
   1c60e:	230f      	movs	r3, #15
   1c610:	9303      	str	r3, [sp, #12]
   1c612:	2300      	movs	r3, #0
   1c614:	9302      	str	r3, [sp, #8]
   1c616:	9301      	str	r3, [sp, #4]
   1c618:	9400      	str	r4, [sp, #0]
   1c61a:	4b0a      	ldr	r3, [pc, #40]	; (1c644 <init_idle_thread+0x6c>)
   1c61c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1c620:	4631      	mov	r1, r6
   1c622:	4628      	mov	r0, r5
   1c624:	f000 f96e 	bl	1c904 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c628:	7b6b      	ldrb	r3, [r5, #13]
   1c62a:	f023 0304 	bic.w	r3, r3, #4
   1c62e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1c630:	b009      	add	sp, #36	; 0x24
   1c632:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c634:	20001d50 	.word	0x20001d50
   1c638:	200059a0 	.word	0x200059a0
   1c63c:	00027ff4 	.word	0x00027ff4
   1c640:	20002fe8 	.word	0x20002fe8
   1c644:	0001ca69 	.word	0x0001ca69

0001c648 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1c648:	b570      	push	{r4, r5, r6, lr}
   1c64a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1c64c:	f001 f83e 	bl	1d6cc <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1c650:	4d1b      	ldr	r5, [pc, #108]	; (1c6c0 <prepare_multithreading+0x78>)
   1c652:	4b1c      	ldr	r3, [pc, #112]	; (1c6c4 <prepare_multithreading+0x7c>)
   1c654:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c656:	4b1c      	ldr	r3, [pc, #112]	; (1c6c8 <prepare_multithreading+0x80>)
   1c658:	9305      	str	r3, [sp, #20]
   1c65a:	2301      	movs	r3, #1
   1c65c:	9304      	str	r3, [sp, #16]
   1c65e:	2400      	movs	r4, #0
   1c660:	9403      	str	r4, [sp, #12]
   1c662:	9402      	str	r4, [sp, #8]
   1c664:	9401      	str	r4, [sp, #4]
   1c666:	9400      	str	r4, [sp, #0]
   1c668:	4b18      	ldr	r3, [pc, #96]	; (1c6cc <prepare_multithreading+0x84>)
   1c66a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c66e:	4918      	ldr	r1, [pc, #96]	; (1c6d0 <prepare_multithreading+0x88>)
   1c670:	4628      	mov	r0, r5
   1c672:	f000 f947 	bl	1c904 <z_setup_new_thread>
   1c676:	4606      	mov	r6, r0
   1c678:	7b6b      	ldrb	r3, [r5, #13]
   1c67a:	f023 0304 	bic.w	r3, r3, #4
   1c67e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1c680:	4628      	mov	r0, r5
   1c682:	f008 fed3 	bl	2542c <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1c686:	2c00      	cmp	r4, #0
   1c688:	dd02      	ble.n	1c690 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1c68a:	4630      	mov	r0, r6
   1c68c:	b006      	add	sp, #24
   1c68e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1c690:	4620      	mov	r0, r4
   1c692:	f7ff ffa1 	bl	1c5d8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1c696:	4b0f      	ldr	r3, [pc, #60]	; (1c6d4 <prepare_multithreading+0x8c>)
   1c698:	22b8      	movs	r2, #184	; 0xb8
   1c69a:	fb02 3204 	mla	r2, r2, r4, r3
   1c69e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1c6a2:	4b08      	ldr	r3, [pc, #32]	; (1c6c4 <prepare_multithreading+0x7c>)
   1c6a4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1c6a8:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1c6aa:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1c6ac:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   1c6b0:	4a09      	ldr	r2, [pc, #36]	; (1c6d8 <prepare_multithreading+0x90>)
   1c6b2:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1c6b6:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1c6ba:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1c6bc:	3401      	adds	r4, #1
   1c6be:	e7e2      	b.n	1c686 <prepare_multithreading+0x3e>
   1c6c0:	20001e08 	.word	0x20001e08
   1c6c4:	20002fe8 	.word	0x20002fe8
   1c6c8:	00028000 	.word	0x00028000
   1c6cc:	0001c6dd 	.word	0x0001c6dd
   1c6d0:	20005180 	.word	0x20005180
   1c6d4:	20001d50 	.word	0x20001d50
   1c6d8:	20005b00 	.word	0x20005b00

0001c6dc <bg_thread_main>:
{
   1c6dc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1c6de:	4b0a      	ldr	r3, [pc, #40]	; (1c708 <bg_thread_main+0x2c>)
   1c6e0:	2201      	movs	r2, #1
   1c6e2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c6e4:	2002      	movs	r0, #2
   1c6e6:	f7ff fe7f 	bl	1c3e8 <z_sys_init_run_level>
	boot_banner();
   1c6ea:	f001 fe35 	bl	1e358 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1c6ee:	2003      	movs	r0, #3
   1c6f0:	f7ff fe7a 	bl	1c3e8 <z_sys_init_run_level>
	z_init_static_threads();
   1c6f4:	f000 f96a 	bl	1c9cc <z_init_static_threads>
	main();
   1c6f8:	f004 fab2 	bl	20c60 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1c6fc:	4a03      	ldr	r2, [pc, #12]	; (1c70c <bg_thread_main+0x30>)
   1c6fe:	7b13      	ldrb	r3, [r2, #12]
   1c700:	f023 0301 	bic.w	r3, r3, #1
   1c704:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1c706:	bd08      	pop	{r3, pc}
   1c708:	20003a0c 	.word	0x20003a0c
   1c70c:	20001e08 	.word	0x20001e08

0001c710 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1c710:	b508      	push	{r3, lr}
   1c712:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c714:	4a01      	ldr	r2, [pc, #4]	; (1c71c <switch_to_main_thread+0xc>)
   1c716:	4802      	ldr	r0, [pc, #8]	; (1c720 <switch_to_main_thread+0x10>)
   1c718:	f7f6 fe9c 	bl	13454 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1c71c:	0001c6dd 	.word	0x0001c6dd
   1c720:	20001e08 	.word	0x20001e08

0001c724 <z_bss_zero>:
{
   1c724:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1c726:	4803      	ldr	r0, [pc, #12]	; (1c734 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
   1c728:	4a03      	ldr	r2, [pc, #12]	; (1c738 <z_bss_zero+0x14>)
   1c72a:	1a12      	subs	r2, r2, r0
   1c72c:	2100      	movs	r1, #0
   1c72e:	f009 f97a 	bl	25a26 <memset>
}
   1c732:	bd08      	pop	{r3, pc}
   1c734:	200008c0 	.word	0x200008c0
   1c738:	20003bcc 	.word	0x20003bcc

0001c73c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1c73c:	b500      	push	{lr}
   1c73e:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1c740:	f7f5 f8b8 	bl	118b4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1c744:	4b1d      	ldr	r3, [pc, #116]	; (1c7bc <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1c746:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1c74a:	4c1d      	ldr	r4, [pc, #116]	; (1c7c0 <z_cstart+0x84>)
   1c74c:	6963      	ldr	r3, [r4, #20]
   1c74e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1c752:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c754:	23e0      	movs	r3, #224	; 0xe0
   1c756:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1c75a:	2320      	movs	r3, #32
   1c75c:	77e3      	strb	r3, [r4, #31]
   1c75e:	2500      	movs	r5, #0
   1c760:	7625      	strb	r5, [r4, #24]
   1c762:	7665      	strb	r5, [r4, #25]
   1c764:	76a5      	strb	r5, [r4, #26]
   1c766:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1c76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c76c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1c770:	6263      	str	r3, [r4, #36]	; 0x24
   1c772:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1c776:	f7f7 fa69 	bl	13c4c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1c77a:	f7f6 fcd9 	bl	13130 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1c77e:	f04f 33ff 	mov.w	r3, #4294967295
   1c782:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1c784:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1c786:	f7f7 fbcd 	bl	13f24 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1c78a:	f7f7 fb05 	bl	13d98 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1c78e:	2401      	movs	r4, #1
   1c790:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c794:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1c798:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1c79a:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1c79c:	4b09      	ldr	r3, [pc, #36]	; (1c7c4 <z_cstart+0x88>)
   1c79e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1c7a2:	f7ff fe15 	bl	1c3d0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1c7a6:	4628      	mov	r0, r5
   1c7a8:	f7ff fe1e 	bl	1c3e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1c7ac:	4620      	mov	r0, r4
   1c7ae:	f7ff fe1b 	bl	1c3e8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1c7b2:	f7ff ff49 	bl	1c648 <prepare_multithreading>
   1c7b6:	f7ff ffab 	bl	1c710 <switch_to_main_thread>
   1c7ba:	bf00      	nop
   1c7bc:	20006320 	.word	0x20006320
   1c7c0:	e000ed00 	.word	0xe000ed00
   1c7c4:	20002fe8 	.word	0x20002fe8

0001c7c8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1c7c8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c7ca:	4c06      	ldr	r4, [pc, #24]	; (1c7e4 <statics_init+0x1c>)
   1c7cc:	4b06      	ldr	r3, [pc, #24]	; (1c7e8 <statics_init+0x20>)
   1c7ce:	429c      	cmp	r4, r3
   1c7d0:	d206      	bcs.n	1c7e0 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1c7d2:	68a2      	ldr	r2, [r4, #8]
   1c7d4:	6861      	ldr	r1, [r4, #4]
   1c7d6:	4620      	mov	r0, r4
   1c7d8:	f008 fa74 	bl	24cc4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c7dc:	3414      	adds	r4, #20
   1c7de:	e7f5      	b.n	1c7cc <statics_init+0x4>
		}
	}
	return 0;
}
   1c7e0:	2000      	movs	r0, #0
   1c7e2:	bd10      	pop	{r4, pc}
   1c7e4:	200006dc 	.word	0x200006dc
   1c7e8:	200006f0 	.word	0x200006f0

0001c7ec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1c7ec:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c7ee:	4c06      	ldr	r4, [pc, #24]	; (1c808 <init_mem_slab_module+0x1c>)
	int rc = 0;
   1c7f0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c7f2:	4b06      	ldr	r3, [pc, #24]	; (1c80c <init_mem_slab_module+0x20>)
   1c7f4:	429c      	cmp	r4, r3
   1c7f6:	d206      	bcs.n	1c806 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1c7f8:	4620      	mov	r0, r4
   1c7fa:	f008 fad3 	bl	24da4 <create_free_list>
		if (rc < 0) {
   1c7fe:	2800      	cmp	r0, #0
   1c800:	db01      	blt.n	1c806 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c802:	341c      	adds	r4, #28
   1c804:	e7f5      	b.n	1c7f2 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1c806:	bd10      	pop	{r4, pc}
   1c808:	20000688 	.word	0x20000688
   1c80c:	200006dc 	.word	0x200006dc

0001c810 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c810:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c812:	b083      	sub	sp, #12
   1c814:	460c      	mov	r4, r1
   1c816:	461f      	mov	r7, r3
	__asm__ volatile(
   1c818:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c81c:	f3ef 8111 	mrs	r1, BASEPRI
   1c820:	f383 8812 	msr	BASEPRI_MAX, r3
   1c824:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1c828:	6943      	ldr	r3, [r0, #20]
   1c82a:	b16b      	cbz	r3, 1c848 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   1c82c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1c82e:	6943      	ldr	r3, [r0, #20]
   1c830:	681b      	ldr	r3, [r3, #0]
   1c832:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1c834:	6983      	ldr	r3, [r0, #24]
   1c836:	3301      	adds	r3, #1
   1c838:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1c83a:	2000      	movs	r0, #0
	__asm__ volatile(
   1c83c:	f381 8811 	msr	BASEPRI, r1
   1c840:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1c844:	b003      	add	sp, #12
   1c846:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c848:	4616      	mov	r6, r2
   1c84a:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1c84e:	ea56 0307 	orrs.w	r3, r6, r7
   1c852:	d104      	bne.n	1c85e <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1c854:	2300      	movs	r3, #0
   1c856:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1c858:	f06f 000b 	mvn.w	r0, #11
   1c85c:	e7ee      	b.n	1c83c <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1c85e:	e9cd 6700 	strd	r6, r7, [sp]
   1c862:	4602      	mov	r2, r0
   1c864:	4628      	mov	r0, r5
   1c866:	f000 fe07 	bl	1d478 <z_pend_curr>
		if (result == 0) {
   1c86a:	2800      	cmp	r0, #0
   1c86c:	d1ea      	bne.n	1c844 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   1c86e:	4b02      	ldr	r3, [pc, #8]	; (1c878 <k_mem_slab_alloc+0x68>)
   1c870:	689b      	ldr	r3, [r3, #8]
   1c872:	695b      	ldr	r3, [r3, #20]
   1c874:	6023      	str	r3, [r4, #0]
		return result;
   1c876:	e7e5      	b.n	1c844 <k_mem_slab_alloc+0x34>
   1c878:	20002fe8 	.word	0x20002fe8

0001c87c <z_thread_monitor_exit>:
	__asm__ volatile(
   1c87c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c880:	f3ef 8111 	mrs	r1, BASEPRI
   1c884:	f383 8812 	msr	BASEPRI_MAX, r3
   1c888:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1c88c:	4b0a      	ldr	r3, [pc, #40]	; (1c8b8 <z_thread_monitor_exit+0x3c>)
   1c88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c890:	4283      	cmp	r3, r0
   1c892:	d104      	bne.n	1c89e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1c894:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1c896:	4b08      	ldr	r3, [pc, #32]	; (1c8b8 <z_thread_monitor_exit+0x3c>)
   1c898:	629a      	str	r2, [r3, #40]	; 0x28
   1c89a:	e007      	b.n	1c8ac <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1c89c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1c89e:	b113      	cbz	r3, 1c8a6 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1c8a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1c8a2:	4282      	cmp	r2, r0
   1c8a4:	d1fa      	bne.n	1c89c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1c8a6:	b10b      	cbz	r3, 1c8ac <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1c8a8:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1c8aa:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1c8ac:	f381 8811 	msr	BASEPRI, r1
   1c8b0:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1c8b4:	4770      	bx	lr
   1c8b6:	bf00      	nop
   1c8b8:	20002fe8 	.word	0x20002fe8

0001c8bc <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1c8bc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1c8be:	4604      	mov	r4, r0
   1c8c0:	b140      	cbz	r0, 1c8d4 <z_impl_k_thread_name_set+0x18>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1c8c2:	2220      	movs	r2, #32
   1c8c4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1c8c8:	f009 f8b5 	bl	25a36 <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1c8cc:	2000      	movs	r0, #0
   1c8ce:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1c8d2:	bd10      	pop	{r4, pc}
		thread = _current;
   1c8d4:	4b01      	ldr	r3, [pc, #4]	; (1c8dc <z_impl_k_thread_name_set+0x20>)
   1c8d6:	689c      	ldr	r4, [r3, #8]
   1c8d8:	e7f3      	b.n	1c8c2 <z_impl_k_thread_name_set+0x6>
   1c8da:	bf00      	nop
   1c8dc:	20002fe8 	.word	0x20002fe8

0001c8e0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1c8e0:	b538      	push	{r3, r4, r5, lr}
   1c8e2:	4614      	mov	r4, r2
   1c8e4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c8e6:	ea54 0305 	orrs.w	r3, r4, r5
   1c8ea:	d102      	bne.n	1c8f2 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1c8ec:	f008 fac5 	bl	24e7a <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1c8f0:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c8f2:	462b      	mov	r3, r5
   1c8f4:	4902      	ldr	r1, [pc, #8]	; (1c900 <schedule_new_thread+0x20>)
   1c8f6:	3018      	adds	r0, #24
   1c8f8:	f001 f866 	bl	1d9c8 <z_add_timeout>
   1c8fc:	e7f8      	b.n	1c8f0 <schedule_new_thread+0x10>
   1c8fe:	bf00      	nop
   1c900:	00025465 	.word	0x00025465

0001c904 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c908:	b085      	sub	sp, #20
   1c90a:	4604      	mov	r4, r0
   1c90c:	460f      	mov	r7, r1
   1c90e:	4615      	mov	r5, r2
   1c910:	461e      	mov	r6, r3
   1c912:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1c916:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1c91a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1c91e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1c922:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1c926:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1c928:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1c92a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c92c:	2204      	movs	r2, #4
   1c92e:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c930:	f008 faa7 	bl	24e82 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1c934:	462a      	mov	r2, r5
   1c936:	4639      	mov	r1, r7
   1c938:	4620      	mov	r0, r4
   1c93a:	f008 fa84 	bl	24e46 <setup_thread_stack>
   1c93e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c940:	f8cd 8008 	str.w	r8, [sp, #8]
   1c944:	f8cd 9004 	str.w	r9, [sp, #4]
   1c948:	f8cd a000 	str.w	sl, [sp]
   1c94c:	4633      	mov	r3, r6
   1c94e:	4602      	mov	r2, r0
   1c950:	4639      	mov	r1, r7
   1c952:	4620      	mov	r0, r4
   1c954:	f7f6 fd2e 	bl	133b4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1c958:	2300      	movs	r3, #0
   1c95a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1c95c:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1c95e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1c962:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1c966:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1c96a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c96e:	f3ef 8211 	mrs	r2, BASEPRI
   1c972:	f383 8812 	msr	BASEPRI_MAX, r3
   1c976:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1c97a:	4b13      	ldr	r3, [pc, #76]	; (1c9c8 <z_setup_new_thread+0xc4>)
   1c97c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1c97e:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1c980:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   1c982:	f382 8811 	msr	BASEPRI, r2
   1c986:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1c98a:	f1bb 0f00 	cmp.w	fp, #0
   1c98e:	d013      	beq.n	1c9b8 <z_setup_new_thread+0xb4>
   1c990:	221f      	movs	r2, #31
   1c992:	4659      	mov	r1, fp
   1c994:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1c998:	f009 f84d 	bl	25a36 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1c99c:	2300      	movs	r3, #0
   1c99e:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1c9a2:	4b09      	ldr	r3, [pc, #36]	; (1c9c8 <z_setup_new_thread+0xc4>)
   1c9a4:	689b      	ldr	r3, [r3, #8]
   1c9a6:	b15b      	cbz	r3, 1c9c0 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1c9a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1c9ac:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   1c9b0:	4628      	mov	r0, r5
   1c9b2:	b005      	add	sp, #20
   1c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1c9b8:	2300      	movs	r3, #0
   1c9ba:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1c9be:	e7f0      	b.n	1c9a2 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1c9c0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1c9c4:	e7f4      	b.n	1c9b0 <z_setup_new_thread+0xac>
   1c9c6:	bf00      	nop
   1c9c8:	20002fe8 	.word	0x20002fe8

0001c9cc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1c9cc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1c9d0:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1c9d2:	4c23      	ldr	r4, [pc, #140]	; (1ca60 <z_init_static_threads+0x94>)
   1c9d4:	4b23      	ldr	r3, [pc, #140]	; (1ca64 <z_init_static_threads+0x98>)
   1c9d6:	429c      	cmp	r4, r3
   1c9d8:	d215      	bcs.n	1ca06 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1c9da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c9dc:	9305      	str	r3, [sp, #20]
   1c9de:	6a23      	ldr	r3, [r4, #32]
   1c9e0:	9304      	str	r3, [sp, #16]
   1c9e2:	69e3      	ldr	r3, [r4, #28]
   1c9e4:	9303      	str	r3, [sp, #12]
   1c9e6:	69a3      	ldr	r3, [r4, #24]
   1c9e8:	9302      	str	r3, [sp, #8]
   1c9ea:	6963      	ldr	r3, [r4, #20]
   1c9ec:	9301      	str	r3, [sp, #4]
   1c9ee:	6923      	ldr	r3, [r4, #16]
   1c9f0:	9300      	str	r3, [sp, #0]
   1c9f2:	68e3      	ldr	r3, [r4, #12]
   1c9f4:	68a2      	ldr	r2, [r4, #8]
   1c9f6:	6861      	ldr	r1, [r4, #4]
   1c9f8:	6820      	ldr	r0, [r4, #0]
   1c9fa:	f7ff ff83 	bl	1c904 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1c9fe:	6823      	ldr	r3, [r4, #0]
   1ca00:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1ca02:	3430      	adds	r4, #48	; 0x30
   1ca04:	e7e6      	b.n	1c9d4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1ca06:	f000 fbef 	bl	1d1e8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ca0a:	4c15      	ldr	r4, [pc, #84]	; (1ca60 <z_init_static_threads+0x94>)
   1ca0c:	e01b      	b.n	1ca46 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1ca0e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1ca10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ca14:	ea4f 79e3 	mov.w	r9, r3, asr #31
   1ca18:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1ca1c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1ca20:	03d8      	lsls	r0, r3, #15
   1ca22:	f240 35e7 	movw	r5, #999	; 0x3e7
   1ca26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ca2a:	2300      	movs	r3, #0
   1ca2c:	1940      	adds	r0, r0, r5
   1ca2e:	f04f 0500 	mov.w	r5, #0
   1ca32:	eb45 0101 	adc.w	r1, r5, r1
   1ca36:	f7e3 ff59 	bl	8ec <__aeabi_uldivmod>
   1ca3a:	4602      	mov	r2, r0
   1ca3c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1ca3e:	4630      	mov	r0, r6
   1ca40:	f7ff ff4e 	bl	1c8e0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ca44:	3430      	adds	r4, #48	; 0x30
   1ca46:	4b07      	ldr	r3, [pc, #28]	; (1ca64 <z_init_static_threads+0x98>)
   1ca48:	429c      	cmp	r4, r3
   1ca4a:	d204      	bcs.n	1ca56 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ca4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ca4e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ca52:	d0f7      	beq.n	1ca44 <z_init_static_threads+0x78>
   1ca54:	e7db      	b.n	1ca0e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1ca56:	f000 fdc5 	bl	1d5e4 <k_sched_unlock>
}
   1ca5a:	b006      	add	sp, #24
   1ca5c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1ca60:	20000688 	.word	0x20000688
   1ca64:	20000688 	.word	0x20000688

0001ca68 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1ca68:	b508      	push	{r3, lr}
   1ca6a:	e001      	b.n	1ca70 <idle+0x8>
	arch_cpu_idle();
   1ca6c:	f7f6 fb66 	bl	1313c <arch_cpu_idle>
	__asm__ volatile(
   1ca70:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ca74:	f3ef 8311 	mrs	r3, BASEPRI
   1ca78:	f382 8812 	msr	BASEPRI_MAX, r2
   1ca7c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1ca80:	f008 fe42 	bl	25708 <z_get_next_timeout_expiry>
   1ca84:	4b03      	ldr	r3, [pc, #12]	; (1ca94 <idle+0x2c>)
   1ca86:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1ca88:	f7f5 fdba 	bl	12600 <pm_system_suspend>
   1ca8c:	2800      	cmp	r0, #0
   1ca8e:	d1ef      	bne.n	1ca70 <idle+0x8>
   1ca90:	e7ec      	b.n	1ca6c <idle+0x4>
   1ca92:	bf00      	nop
   1ca94:	20002fe8 	.word	0x20002fe8

0001ca98 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ca98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ca9c:	b083      	sub	sp, #12
   1ca9e:	4604      	mov	r4, r0
   1caa0:	461d      	mov	r5, r3
   1caa2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1caa6:	f3ef 8711 	mrs	r7, BASEPRI
   1caaa:	f383 8812 	msr	BASEPRI_MAX, r3
   1caae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1cab2:	68c1      	ldr	r1, [r0, #12]
   1cab4:	b999      	cbnz	r1, 1cade <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1cab6:	2900      	cmp	r1, #0
   1cab8:	d14f      	bne.n	1cb5a <z_impl_k_mutex_lock+0xc2>
   1caba:	4b3a      	ldr	r3, [pc, #232]	; (1cba4 <z_impl_k_mutex_lock+0x10c>)
   1cabc:	689b      	ldr	r3, [r3, #8]
   1cabe:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1cac2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1cac4:	3101      	adds	r1, #1
   1cac6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1cac8:	4b36      	ldr	r3, [pc, #216]	; (1cba4 <z_impl_k_mutex_lock+0x10c>)
   1caca:	689b      	ldr	r3, [r3, #8]
   1cacc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1cace:	f387 8811 	msr	BASEPRI, r7
   1cad2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1cad6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1cad8:	b003      	add	sp, #12
   1cada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cade:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1cae0:	6882      	ldr	r2, [r0, #8]
   1cae2:	4b30      	ldr	r3, [pc, #192]	; (1cba4 <z_impl_k_mutex_lock+0x10c>)
   1cae4:	689b      	ldr	r3, [r3, #8]
   1cae6:	429a      	cmp	r2, r3
   1cae8:	d0e5      	beq.n	1cab6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1caea:	ea55 0106 	orrs.w	r1, r5, r6
   1caee:	bf0c      	ite	eq
   1caf0:	f04f 0801 	moveq.w	r8, #1
   1caf4:	f04f 0800 	movne.w	r8, #0
   1caf8:	d031      	beq.n	1cb5e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1cafa:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1cafe:	4649      	mov	r1, r9
   1cb00:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1cb04:	f008 f9f0 	bl	24ee8 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1cb08:	4581      	cmp	r9, r0
   1cb0a:	dc2f      	bgt.n	1cb6c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1cb0c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1cb10:	9600      	str	r6, [sp, #0]
   1cb12:	9501      	str	r5, [sp, #4]
   1cb14:	4622      	mov	r2, r4
   1cb16:	4639      	mov	r1, r7
   1cb18:	4823      	ldr	r0, [pc, #140]	; (1cba8 <z_impl_k_mutex_lock+0x110>)
   1cb1a:	f000 fcad 	bl	1d478 <z_pend_curr>
	if (got_mutex == 0) {
   1cb1e:	2800      	cmp	r0, #0
   1cb20:	d0da      	beq.n	1cad8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1cb22:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb26:	f3ef 8511 	mrs	r5, BASEPRI
   1cb2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb2e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1cb32:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cb34:	42a3      	cmp	r3, r4
   1cb36:	d01f      	beq.n	1cb78 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1cb38:	b1f3      	cbz	r3, 1cb78 <z_impl_k_mutex_lock+0xe0>
   1cb3a:	6921      	ldr	r1, [r4, #16]
   1cb3c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1cb40:	f008 f9d2 	bl	24ee8 <new_prio_for_inheritance>
   1cb44:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1cb46:	4620      	mov	r0, r4
   1cb48:	f008 f9d9 	bl	24efe <adjust_owner_prio>
   1cb4c:	b9b0      	cbnz	r0, 1cb7c <z_impl_k_mutex_lock+0xe4>
   1cb4e:	f1b9 0f00 	cmp.w	r9, #0
   1cb52:	d015      	beq.n	1cb80 <z_impl_k_mutex_lock+0xe8>
   1cb54:	f04f 0801 	mov.w	r8, #1
   1cb58:	e012      	b.n	1cb80 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1cb5a:	6923      	ldr	r3, [r4, #16]
   1cb5c:	e7b1      	b.n	1cac2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1cb5e:	f387 8811 	msr	BASEPRI, r7
   1cb62:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1cb66:	f06f 000f 	mvn.w	r0, #15
   1cb6a:	e7b5      	b.n	1cad8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1cb6c:	4601      	mov	r1, r0
   1cb6e:	4620      	mov	r0, r4
   1cb70:	f008 f9c5 	bl	24efe <adjust_owner_prio>
   1cb74:	4681      	mov	r9, r0
   1cb76:	e7cb      	b.n	1cb10 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1cb78:	6921      	ldr	r1, [r4, #16]
   1cb7a:	e7e4      	b.n	1cb46 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1cb7c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1cb80:	f1b8 0f00 	cmp.w	r8, #0
   1cb84:	d106      	bne.n	1cb94 <z_impl_k_mutex_lock+0xfc>
   1cb86:	f385 8811 	msr	BASEPRI, r5
   1cb8a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1cb8e:	f06f 000a 	mvn.w	r0, #10
   1cb92:	e7a1      	b.n	1cad8 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1cb94:	4629      	mov	r1, r5
   1cb96:	4804      	ldr	r0, [pc, #16]	; (1cba8 <z_impl_k_mutex_lock+0x110>)
   1cb98:	f000 fb0a 	bl	1d1b0 <z_reschedule>
	return -EAGAIN;
   1cb9c:	f06f 000a 	mvn.w	r0, #10
   1cba0:	e79a      	b.n	1cad8 <z_impl_k_mutex_lock+0x40>
   1cba2:	bf00      	nop
   1cba4:	20002fe8 	.word	0x20002fe8
   1cba8:	20003014 	.word	0x20003014

0001cbac <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1cbac:	6882      	ldr	r2, [r0, #8]
   1cbae:	2a00      	cmp	r2, #0
   1cbb0:	d035      	beq.n	1cc1e <z_impl_k_mutex_unlock+0x72>
{
   1cbb2:	b538      	push	{r3, r4, r5, lr}
   1cbb4:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1cbb6:	4b1d      	ldr	r3, [pc, #116]	; (1cc2c <z_impl_k_mutex_unlock+0x80>)
   1cbb8:	689b      	ldr	r3, [r3, #8]
   1cbba:	429a      	cmp	r2, r3
   1cbbc:	d132      	bne.n	1cc24 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1cbbe:	7bda      	ldrb	r2, [r3, #15]
   1cbc0:	3a01      	subs	r2, #1
   1cbc2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1cbc4:	68c3      	ldr	r3, [r0, #12]
   1cbc6:	2b01      	cmp	r3, #1
   1cbc8:	d905      	bls.n	1cbd6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1cbca:	3b01      	subs	r3, #1
   1cbcc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1cbce:	f000 fd09 	bl	1d5e4 <k_sched_unlock>

	return 0;
   1cbd2:	2000      	movs	r0, #0
}
   1cbd4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1cbd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cbda:	f3ef 8511 	mrs	r5, BASEPRI
   1cbde:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbe2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1cbe6:	6901      	ldr	r1, [r0, #16]
   1cbe8:	f008 f989 	bl	24efe <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1cbec:	4620      	mov	r0, r4
   1cbee:	f008 fcdf 	bl	255b0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1cbf2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1cbf4:	b160      	cbz	r0, 1cc10 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1cbf6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cbfa:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1cbfc:	2300      	movs	r3, #0
   1cbfe:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1cc02:	f008 fc13 	bl	2542c <z_ready_thread>
		z_reschedule(&lock, key);
   1cc06:	4629      	mov	r1, r5
   1cc08:	4809      	ldr	r0, [pc, #36]	; (1cc30 <z_impl_k_mutex_unlock+0x84>)
   1cc0a:	f000 fad1 	bl	1d1b0 <z_reschedule>
   1cc0e:	e7de      	b.n	1cbce <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1cc10:	2300      	movs	r3, #0
   1cc12:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1cc14:	f385 8811 	msr	BASEPRI, r5
   1cc18:	f3bf 8f6f 	isb	sy
   1cc1c:	e7d7      	b.n	1cbce <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1cc1e:	f06f 0015 	mvn.w	r0, #21
}
   1cc22:	4770      	bx	lr
		return -EPERM;
   1cc24:	f04f 30ff 	mov.w	r0, #4294967295
   1cc28:	e7d4      	b.n	1cbd4 <z_impl_k_mutex_unlock+0x28>
   1cc2a:	bf00      	nop
   1cc2c:	20002fe8 	.word	0x20002fe8
   1cc30:	20003014 	.word	0x20003014

0001cc34 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1cc34:	b5d0      	push	{r4, r6, r7, lr}
   1cc36:	b082      	sub	sp, #8
   1cc38:	4601      	mov	r1, r0
   1cc3a:	4616      	mov	r6, r2
   1cc3c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cc3e:	4602      	mov	r2, r0
	__asm__ volatile(
   1cc40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc44:	f3ef 8411 	mrs	r4, BASEPRI
   1cc48:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc4c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1cc50:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1cc54:	b188      	cbz	r0, 1cc7a <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cc56:	6803      	ldr	r3, [r0, #0]
   1cc58:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1cc5c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1cc5e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1cc60:	4290      	cmp	r0, r2
   1cc62:	d008      	beq.n	1cc76 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1cc64:	2101      	movs	r1, #1
   1cc66:	f008 f9cf 	bl	25008 <z_queue_node_peek>
	__asm__ volatile(
   1cc6a:	f384 8811 	msr	BASEPRI, r4
   1cc6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1cc72:	b002      	add	sp, #8
   1cc74:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   1cc76:	604b      	str	r3, [r1, #4]
}
   1cc78:	e7f4      	b.n	1cc64 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cc7a:	ea56 0307 	orrs.w	r3, r6, r7
   1cc7e:	d00a      	beq.n	1cc96 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1cc80:	e9cd 6700 	strd	r6, r7, [sp]
   1cc84:	4621      	mov	r1, r4
   1cc86:	4610      	mov	r0, r2
   1cc88:	f000 fbf6 	bl	1d478 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1cc8c:	b948      	cbnz	r0, 1cca2 <z_impl_k_queue_get+0x6e>
   1cc8e:	4b06      	ldr	r3, [pc, #24]	; (1cca8 <z_impl_k_queue_get+0x74>)
   1cc90:	689b      	ldr	r3, [r3, #8]
   1cc92:	6958      	ldr	r0, [r3, #20]
   1cc94:	e7ed      	b.n	1cc72 <z_impl_k_queue_get+0x3e>
   1cc96:	f384 8811 	msr	BASEPRI, r4
   1cc9a:	f3bf 8f6f 	isb	sy
		return NULL;
   1cc9e:	2000      	movs	r0, #0
   1cca0:	e7e7      	b.n	1cc72 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1cca2:	2000      	movs	r0, #0
   1cca4:	e7e5      	b.n	1cc72 <z_impl_k_queue_get+0x3e>
   1cca6:	bf00      	nop
   1cca8:	20002fe8 	.word	0x20002fe8

0001ccac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ccac:	b538      	push	{r3, r4, r5, lr}
   1ccae:	4604      	mov	r4, r0
	__asm__ volatile(
   1ccb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccb4:	f3ef 8511 	mrs	r5, BASEPRI
   1ccb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1ccbc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1ccc0:	f008 fc76 	bl	255b0 <z_unpend_first_thread>

	if (thread != NULL) {
   1ccc4:	b148      	cbz	r0, 1ccda <z_impl_k_sem_give+0x2e>
   1ccc6:	2200      	movs	r2, #0
   1ccc8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1cccc:	f008 fbae 	bl	2542c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1ccd0:	4629      	mov	r1, r5
   1ccd2:	4809      	ldr	r0, [pc, #36]	; (1ccf8 <z_impl_k_sem_give+0x4c>)
   1ccd4:	f000 fa6c 	bl	1d1b0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1ccd8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ccda:	68a3      	ldr	r3, [r4, #8]
   1ccdc:	68e2      	ldr	r2, [r4, #12]
   1ccde:	4293      	cmp	r3, r2
   1cce0:	d008      	beq.n	1ccf4 <z_impl_k_sem_give+0x48>
   1cce2:	2201      	movs	r2, #1
   1cce4:	4413      	add	r3, r2
   1cce6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1cce8:	2102      	movs	r1, #2
   1ccea:	f104 0010 	add.w	r0, r4, #16
   1ccee:	f008 fe36 	bl	2595e <z_handle_obj_poll_events>
}
   1ccf2:	e7ed      	b.n	1ccd0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ccf4:	2200      	movs	r2, #0
   1ccf6:	e7f5      	b.n	1cce4 <z_impl_k_sem_give+0x38>
   1ccf8:	20003014 	.word	0x20003014

0001ccfc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1ccfc:	b530      	push	{r4, r5, lr}
   1ccfe:	b083      	sub	sp, #12
   1cd00:	461d      	mov	r5, r3
   1cd02:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd06:	f3ef 8111 	mrs	r1, BASEPRI
   1cd0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1cd12:	6883      	ldr	r3, [r0, #8]
   1cd14:	b143      	cbz	r3, 1cd28 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1cd16:	3b01      	subs	r3, #1
   1cd18:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1cd1a:	f381 8811 	msr	BASEPRI, r1
   1cd1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1cd22:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1cd24:	b003      	add	sp, #12
   1cd26:	bd30      	pop	{r4, r5, pc}
   1cd28:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cd2a:	ea54 0305 	orrs.w	r3, r4, r5
   1cd2e:	d006      	beq.n	1cd3e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1cd30:	e9cd 4500 	strd	r4, r5, [sp]
   1cd34:	4602      	mov	r2, r0
   1cd36:	4805      	ldr	r0, [pc, #20]	; (1cd4c <z_impl_k_sem_take+0x50>)
   1cd38:	f000 fb9e 	bl	1d478 <z_pend_curr>
	return ret;
   1cd3c:	e7f2      	b.n	1cd24 <z_impl_k_sem_take+0x28>
   1cd3e:	f381 8811 	msr	BASEPRI, r1
   1cd42:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1cd46:	f06f 000f 	mvn.w	r0, #15
   1cd4a:	e7eb      	b.n	1cd24 <z_impl_k_sem_take+0x28>
   1cd4c:	20003014 	.word	0x20003014

0001cd50 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1cd50:	b510      	push	{r4, lr}
   1cd52:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1cd54:	4b08      	ldr	r3, [pc, #32]	; (1cd78 <k_sys_work_q_init+0x28>)
   1cd56:	9302      	str	r3, [sp, #8]
   1cd58:	2400      	movs	r4, #0
   1cd5a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1cd5e:	ab02      	add	r3, sp, #8
   1cd60:	9300      	str	r3, [sp, #0]
   1cd62:	f04f 33ff 	mov.w	r3, #4294967295
   1cd66:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1cd6a:	4904      	ldr	r1, [pc, #16]	; (1cd7c <k_sys_work_q_init+0x2c>)
   1cd6c:	4804      	ldr	r0, [pc, #16]	; (1cd80 <k_sys_work_q_init+0x30>)
   1cd6e:	f000 f96f 	bl	1d050 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1cd72:	4620      	mov	r0, r4
   1cd74:	b004      	add	sp, #16
   1cd76:	bd10      	pop	{r4, pc}
   1cd78:	0002800c 	.word	0x0002800c
   1cd7c:	20006320 	.word	0x20006320
   1cd80:	20001ec0 	.word	0x20001ec0

0001cd84 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd86:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1cd88:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1cd8a:	f013 0f02 	tst.w	r3, #2
   1cd8e:	d15b      	bne.n	1ce48 <submit_to_queue_locked+0xc4>
   1cd90:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1cd92:	f013 0f04 	tst.w	r3, #4
   1cd96:	d15c      	bne.n	1ce52 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1cd98:	680b      	ldr	r3, [r1, #0]
   1cd9a:	2b00      	cmp	r3, #0
   1cd9c:	d037      	beq.n	1ce0e <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1cd9e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1cda0:	f013 0f01 	tst.w	r3, #1
   1cda4:	d036      	beq.n	1ce14 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1cda6:	68a3      	ldr	r3, [r4, #8]
   1cda8:	602b      	str	r3, [r5, #0]
			ret = 2;
   1cdaa:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1cdac:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1cdae:	2e00      	cmp	r6, #0
   1cdb0:	d03e      	beq.n	1ce30 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1cdb2:	4b29      	ldr	r3, [pc, #164]	; (1ce58 <submit_to_queue_locked+0xd4>)
   1cdb4:	689b      	ldr	r3, [r3, #8]
   1cdb6:	42b3      	cmp	r3, r6
   1cdb8:	d02e      	beq.n	1ce18 <submit_to_queue_locked+0x94>
   1cdba:	2300      	movs	r3, #0
   1cdbc:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1cdbe:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1cdc2:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1cdc6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1cdca:	f013 0f01 	tst.w	r3, #1
   1cdce:	d032      	beq.n	1ce36 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1cdd0:	b101      	cbz	r1, 1cdd4 <submit_to_queue_locked+0x50>
   1cdd2:	b39a      	cbz	r2, 1ce3c <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1cdd4:	b100      	cbz	r0, 1cdd8 <submit_to_queue_locked+0x54>
   1cdd6:	b3a1      	cbz	r1, 1ce42 <submit_to_queue_locked+0xbe>
	parent->next = child;
   1cdd8:	2300      	movs	r3, #0
   1cdda:	6023      	str	r3, [r4, #0]
	return list->tail;
   1cddc:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1cde0:	b30b      	cbz	r3, 1ce26 <submit_to_queue_locked+0xa2>
	parent->next = child;
   1cde2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cde4:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1cde8:	2200      	movs	r2, #0
   1cdea:	4611      	mov	r1, r2
   1cdec:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1cdf0:	f008 fc1e 	bl	25630 <z_sched_wake>
		ret = 1;
   1cdf4:	2001      	movs	r0, #1

		if (rc < 0) {
   1cdf6:	2800      	cmp	r0, #0
   1cdf8:	db06      	blt.n	1ce08 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1cdfa:	68e3      	ldr	r3, [r4, #12]
   1cdfc:	f043 0304 	orr.w	r3, r3, #4
   1ce00:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1ce02:	682b      	ldr	r3, [r5, #0]
   1ce04:	60a3      	str	r3, [r4, #8]
   1ce06:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1ce08:	2800      	cmp	r0, #0
   1ce0a:	dc21      	bgt.n	1ce50 <submit_to_queue_locked+0xcc>
   1ce0c:	e01e      	b.n	1ce4c <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1ce0e:	6883      	ldr	r3, [r0, #8]
   1ce10:	600b      	str	r3, [r1, #0]
   1ce12:	e7c4      	b.n	1cd9e <submit_to_queue_locked+0x1a>
		ret = 1;
   1ce14:	2701      	movs	r7, #1
   1ce16:	e7c9      	b.n	1cdac <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ce18:	f008 f827 	bl	24e6a <k_is_in_isr>
   1ce1c:	b908      	cbnz	r0, 1ce22 <submit_to_queue_locked+0x9e>
   1ce1e:	2301      	movs	r3, #1
   1ce20:	e7cc      	b.n	1cdbc <submit_to_queue_locked+0x38>
   1ce22:	2300      	movs	r3, #0
   1ce24:	e7ca      	b.n	1cdbc <submit_to_queue_locked+0x38>
   1ce26:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1ce2a:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1ce2e:	e7db      	b.n	1cde8 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1ce30:	f06f 0015 	mvn.w	r0, #21
   1ce34:	e7df      	b.n	1cdf6 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1ce36:	f06f 0012 	mvn.w	r0, #18
   1ce3a:	e7dc      	b.n	1cdf6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1ce3c:	f06f 000f 	mvn.w	r0, #15
   1ce40:	e7d9      	b.n	1cdf6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1ce42:	f06f 000f 	mvn.w	r0, #15
   1ce46:	e7d6      	b.n	1cdf6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1ce48:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1ce4c:	2300      	movs	r3, #0
   1ce4e:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1ce50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1ce52:	2000      	movs	r0, #0
   1ce54:	e7fa      	b.n	1ce4c <submit_to_queue_locked+0xc8>
   1ce56:	bf00      	nop
   1ce58:	20002fe8 	.word	0x20002fe8

0001ce5c <finalize_cancel_locked>:
{
   1ce5c:	b570      	push	{r4, r5, r6, lr}
   1ce5e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1ce60:	68c3      	ldr	r3, [r0, #12]
   1ce62:	f023 0302 	bic.w	r3, r3, #2
   1ce66:	60c3      	str	r3, [r0, #12]
	return list->head;
   1ce68:	4b19      	ldr	r3, [pc, #100]	; (1ced0 <finalize_cancel_locked+0x74>)
   1ce6a:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ce6c:	b1e8      	cbz	r0, 1ceaa <finalize_cancel_locked+0x4e>
   1ce6e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ce70:	b100      	cbz	r0, 1ce74 <finalize_cancel_locked+0x18>
	return node->next;
   1ce72:	6804      	ldr	r4, [r0, #0]
   1ce74:	2600      	movs	r6, #0
   1ce76:	e01d      	b.n	1ceb4 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   1ce78:	b15e      	cbz	r6, 1ce92 <finalize_cancel_locked+0x36>
	return node->next;
   1ce7a:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1ce7c:	6033      	str	r3, [r6, #0]
	return list->tail;
   1ce7e:	4b14      	ldr	r3, [pc, #80]	; (1ced0 <finalize_cancel_locked+0x74>)
   1ce80:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ce82:	4298      	cmp	r0, r3
   1ce84:	d00e      	beq.n	1cea4 <finalize_cancel_locked+0x48>
	parent->next = child;
   1ce86:	2300      	movs	r3, #0
   1ce88:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1ce8c:	f7ff ff0e 	bl	1ccac <z_impl_k_sem_give>
}
   1ce90:	e015      	b.n	1cebe <finalize_cancel_locked+0x62>
	return node->next;
   1ce92:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ce94:	4b0e      	ldr	r3, [pc, #56]	; (1ced0 <finalize_cancel_locked+0x74>)
   1ce96:	601a      	str	r2, [r3, #0]
	return list->tail;
   1ce98:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ce9a:	4298      	cmp	r0, r3
   1ce9c:	d1f3      	bne.n	1ce86 <finalize_cancel_locked+0x2a>
	list->tail = node;
   1ce9e:	4b0c      	ldr	r3, [pc, #48]	; (1ced0 <finalize_cancel_locked+0x74>)
   1cea0:	605a      	str	r2, [r3, #4]
}
   1cea2:	e7f0      	b.n	1ce86 <finalize_cancel_locked+0x2a>
	list->tail = node;
   1cea4:	4b0a      	ldr	r3, [pc, #40]	; (1ced0 <finalize_cancel_locked+0x74>)
   1cea6:	605e      	str	r6, [r3, #4]
}
   1cea8:	e7ed      	b.n	1ce86 <finalize_cancel_locked+0x2a>
   1ceaa:	4604      	mov	r4, r0
   1ceac:	e7e2      	b.n	1ce74 <finalize_cancel_locked+0x18>
   1ceae:	4623      	mov	r3, r4
   1ceb0:	4620      	mov	r0, r4
   1ceb2:	461c      	mov	r4, r3
   1ceb4:	b150      	cbz	r0, 1cecc <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1ceb6:	6843      	ldr	r3, [r0, #4]
   1ceb8:	42ab      	cmp	r3, r5
   1ceba:	d0dd      	beq.n	1ce78 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1cebc:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1cebe:	2c00      	cmp	r4, #0
   1cec0:	d0f5      	beq.n	1ceae <finalize_cancel_locked+0x52>
   1cec2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cec4:	2c00      	cmp	r4, #0
   1cec6:	d0f3      	beq.n	1ceb0 <finalize_cancel_locked+0x54>
	return node->next;
   1cec8:	6823      	ldr	r3, [r4, #0]
   1ceca:	e7f1      	b.n	1ceb0 <finalize_cancel_locked+0x54>
}
   1cecc:	bd70      	pop	{r4, r5, r6, pc}
   1cece:	bf00      	nop
   1ced0:	20003014 	.word	0x20003014

0001ced4 <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   1ced4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ced6:	68c5      	ldr	r5, [r0, #12]
   1ced8:	f015 0f02 	tst.w	r5, #2
   1cedc:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   1cee0:	d101      	bne.n	1cee6 <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   1cee2:	4628      	mov	r0, r5
   1cee4:	bd70      	pop	{r4, r5, r6, pc}
   1cee6:	4604      	mov	r4, r0
   1cee8:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1ceea:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ceee:	2201      	movs	r2, #1
   1cef0:	2100      	movs	r1, #0
   1cef2:	f008 f8f7 	bl	250e4 <z_impl_k_sem_init>
	canceler->work = work;
   1cef6:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1cef8:	2300      	movs	r3, #0
   1cefa:	6033      	str	r3, [r6, #0]
	return list->tail;
   1cefc:	4b05      	ldr	r3, [pc, #20]	; (1cf14 <cancel_sync_locked+0x40>)
   1cefe:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1cf00:	b11b      	cbz	r3, 1cf0a <cancel_sync_locked+0x36>
	parent->next = child;
   1cf02:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1cf04:	4b03      	ldr	r3, [pc, #12]	; (1cf14 <cancel_sync_locked+0x40>)
   1cf06:	605e      	str	r6, [r3, #4]
}
   1cf08:	e7eb      	b.n	1cee2 <cancel_sync_locked+0xe>
   1cf0a:	4b02      	ldr	r3, [pc, #8]	; (1cf14 <cancel_sync_locked+0x40>)
   1cf0c:	605e      	str	r6, [r3, #4]
	list->head = node;
   1cf0e:	601e      	str	r6, [r3, #0]
}
   1cf10:	e7e7      	b.n	1cee2 <cancel_sync_locked+0xe>
   1cf12:	bf00      	nop
   1cf14:	20003014 	.word	0x20003014

0001cf18 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1cf18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf1a:	b085      	sub	sp, #20
   1cf1c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1cf1e:	e016      	b.n	1cf4e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1cf20:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1cf24:	f023 0204 	bic.w	r2, r3, #4
   1cf28:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1cf2c:	f013 0f04 	tst.w	r3, #4
   1cf30:	d158      	bne.n	1cfe4 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1cf32:	2300      	movs	r3, #0
   1cf34:	9302      	str	r3, [sp, #8]
   1cf36:	f04f 32ff 	mov.w	r2, #4294967295
   1cf3a:	f04f 33ff 	mov.w	r3, #4294967295
   1cf3e:	e9cd 2300 	strd	r2, r3, [sp]
   1cf42:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1cf46:	4631      	mov	r1, r6
   1cf48:	482e      	ldr	r0, [pc, #184]	; (1d004 <work_queue_main+0xec>)
   1cf4a:	f000 fcc9 	bl	1d8e0 <z_sched_wait>
	__asm__ volatile(
   1cf4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf52:	f3ef 8611 	mrs	r6, BASEPRI
   1cf56:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf5a:	f3bf 8f6f 	isb	sy
	return list->head;
   1cf5e:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1cf62:	2c00      	cmp	r4, #0
   1cf64:	d0dc      	beq.n	1cf20 <work_queue_main+0x8>
	return node->next;
   1cf66:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1cf68:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1cf6c:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cf70:	4294      	cmp	r4, r2
   1cf72:	d034      	beq.n	1cfde <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1cf74:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1cf78:	f043 0302 	orr.w	r3, r3, #2
   1cf7c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1cf80:	68e3      	ldr	r3, [r4, #12]
   1cf82:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1cf86:	f023 0304 	bic.w	r3, r3, #4
   1cf8a:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1cf8c:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1cf8e:	2c00      	cmp	r4, #0
   1cf90:	d0cf      	beq.n	1cf32 <work_queue_main+0x1a>
	__asm__ volatile(
   1cf92:	f386 8811 	msr	BASEPRI, r6
   1cf96:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1cf9a:	4620      	mov	r0, r4
   1cf9c:	4798      	blx	r3
	__asm__ volatile(
   1cf9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cfa2:	f3ef 8611 	mrs	r6, BASEPRI
   1cfa6:	f383 8812 	msr	BASEPRI_MAX, r3
   1cfaa:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1cfae:	68e3      	ldr	r3, [r4, #12]
   1cfb0:	f023 0301 	bic.w	r3, r3, #1
   1cfb4:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1cfb6:	f013 0f02 	tst.w	r3, #2
   1cfba:	d11e      	bne.n	1cffa <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   1cfbc:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1cfc0:	f023 0302 	bic.w	r3, r3, #2
   1cfc4:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1cfc8:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1cfcc:	f386 8811 	msr	BASEPRI, r6
   1cfd0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1cfd4:	2b00      	cmp	r3, #0
   1cfd6:	d1ba      	bne.n	1cf4e <work_queue_main+0x36>
	z_impl_k_yield();
   1cfd8:	f000 fb84 	bl	1d6e4 <z_impl_k_yield>
}
   1cfdc:	e7b7      	b.n	1cf4e <work_queue_main+0x36>
	list->tail = node;
   1cfde:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1cfe2:	e7c7      	b.n	1cf74 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1cfe4:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1cfe8:	2200      	movs	r2, #0
   1cfea:	2101      	movs	r1, #1
   1cfec:	4638      	mov	r0, r7
   1cfee:	f008 fb1f 	bl	25630 <z_sched_wake>
   1cff2:	2800      	cmp	r0, #0
   1cff4:	d1f8      	bne.n	1cfe8 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1cff6:	2300      	movs	r3, #0
   1cff8:	e7c9      	b.n	1cf8e <work_queue_main+0x76>
			finalize_cancel_locked(work);
   1cffa:	4620      	mov	r0, r4
   1cffc:	f7ff ff2e 	bl	1ce5c <finalize_cancel_locked>
   1d000:	e7dc      	b.n	1cfbc <work_queue_main+0xa4>
   1d002:	bf00      	nop
   1d004:	20003014 	.word	0x20003014

0001d008 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d008:	b570      	push	{r4, r5, r6, lr}
   1d00a:	4606      	mov	r6, r0
   1d00c:	4608      	mov	r0, r1
   1d00e:	4614      	mov	r4, r2
   1d010:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d012:	ea54 0305 	orrs.w	r3, r4, r5
   1d016:	d00c      	beq.n	1d032 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   1d018:	68cb      	ldr	r3, [r1, #12]
   1d01a:	f043 0308 	orr.w	r3, r3, #8
   1d01e:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1d020:	6833      	ldr	r3, [r6, #0]
   1d022:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d024:	462b      	mov	r3, r5
   1d026:	4905      	ldr	r1, [pc, #20]	; (1d03c <schedule_for_queue_locked+0x34>)
   1d028:	3010      	adds	r0, #16
   1d02a:	f000 fccd 	bl	1d9c8 <z_add_timeout>

	return ret;
   1d02e:	2001      	movs	r0, #1
}
   1d030:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   1d032:	4631      	mov	r1, r6
   1d034:	f7ff fea6 	bl	1cd84 <submit_to_queue_locked>
   1d038:	e7fa      	b.n	1d030 <schedule_for_queue_locked+0x28>
   1d03a:	bf00      	nop
   1d03c:	0002518f 	.word	0x0002518f

0001d040 <k_work_submit>:
{
   1d040:	b508      	push	{r3, lr}
   1d042:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1d044:	4801      	ldr	r0, [pc, #4]	; (1d04c <k_work_submit+0xc>)
   1d046:	f008 f8d6 	bl	251f6 <k_work_submit_to_queue>
}
   1d04a:	bd08      	pop	{r3, pc}
   1d04c:	20001ec0 	.word	0x20001ec0

0001d050 <k_work_queue_start>:
{
   1d050:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d052:	b089      	sub	sp, #36	; 0x24
   1d054:	4604      	mov	r4, r0
   1d056:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1d058:	2000      	movs	r0, #0
   1d05a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1d05e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1d062:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1d066:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1d06a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1d06e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1d072:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1d076:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1d07a:	b1fd      	cbz	r5, 1d0bc <k_work_queue_start+0x6c>
   1d07c:	7928      	ldrb	r0, [r5, #4]
   1d07e:	b9f8      	cbnz	r0, 1d0c0 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d080:	2001      	movs	r0, #1
	*flagp = flags;
   1d082:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d086:	f04f 36ff 	mov.w	r6, #4294967295
   1d08a:	f04f 37ff 	mov.w	r7, #4294967295
   1d08e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1d092:	2000      	movs	r0, #0
   1d094:	9004      	str	r0, [sp, #16]
   1d096:	9303      	str	r3, [sp, #12]
   1d098:	9002      	str	r0, [sp, #8]
   1d09a:	9001      	str	r0, [sp, #4]
   1d09c:	9400      	str	r4, [sp, #0]
   1d09e:	4b0a      	ldr	r3, [pc, #40]	; (1d0c8 <k_work_queue_start+0x78>)
   1d0a0:	4620      	mov	r0, r4
   1d0a2:	f007 fef9 	bl	24e98 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1d0a6:	b125      	cbz	r5, 1d0b2 <k_work_queue_start+0x62>
   1d0a8:	6829      	ldr	r1, [r5, #0]
   1d0aa:	b111      	cbz	r1, 1d0b2 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1d0ac:	4620      	mov	r0, r4
   1d0ae:	f7ff fc05 	bl	1c8bc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1d0b2:	4620      	mov	r0, r4
   1d0b4:	f007 fee1 	bl	24e7a <z_impl_k_thread_start>
}
   1d0b8:	b009      	add	sp, #36	; 0x24
   1d0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d0bc:	2001      	movs	r0, #1
   1d0be:	e7e0      	b.n	1d082 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1d0c0:	f240 1001 	movw	r0, #257	; 0x101
   1d0c4:	e7dd      	b.n	1d082 <k_work_queue_start+0x32>
   1d0c6:	bf00      	nop
   1d0c8:	0001cf19 	.word	0x0001cf19

0001d0cc <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1d0cc:	b508      	push	{r3, lr}
   1d0ce:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1d0d0:	4801      	ldr	r0, [pc, #4]	; (1d0d8 <k_work_schedule+0xc>)
   1d0d2:	f008 f8bc 	bl	2524e <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1d0d6:	bd08      	pop	{r3, pc}
   1d0d8:	20001ec0 	.word	0x20001ec0

0001d0dc <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d0dc:	b508      	push	{r3, lr}
   1d0de:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1d0e0:	4801      	ldr	r0, [pc, #4]	; (1d0e8 <k_work_reschedule+0xc>)
   1d0e2:	f008 f8ce 	bl	25282 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1d0e6:	bd08      	pop	{r3, pc}
   1d0e8:	20001ec0 	.word	0x20001ec0

0001d0ec <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1d0ec:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d0f2:	bf08      	it	eq
   1d0f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1d0f8:	d100      	bne.n	1d0fc <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1d0fa:	bd38      	pop	{r3, r4, r5, pc}
   1d0fc:	4902      	ldr	r1, [pc, #8]	; (1d108 <add_thread_timeout+0x1c>)
   1d0fe:	3018      	adds	r0, #24
   1d100:	f000 fc62 	bl	1d9c8 <z_add_timeout>
   1d104:	e7f9      	b.n	1d0fa <add_thread_timeout+0xe>
   1d106:	bf00      	nop
   1d108:	00025465 	.word	0x00025465

0001d10c <z_reset_time_slice>:
{
   1d10c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1d10e:	4b08      	ldr	r3, [pc, #32]	; (1d130 <z_reset_time_slice+0x24>)
   1d110:	681b      	ldr	r3, [r3, #0]
   1d112:	b903      	cbnz	r3, 1d116 <z_reset_time_slice+0xa>
}
   1d114:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1d116:	f7fd fc91 	bl	1aa3c <sys_clock_elapsed>
   1d11a:	4603      	mov	r3, r0
   1d11c:	4a04      	ldr	r2, [pc, #16]	; (1d130 <z_reset_time_slice+0x24>)
   1d11e:	6810      	ldr	r0, [r2, #0]
   1d120:	4403      	add	r3, r0
   1d122:	4a04      	ldr	r2, [pc, #16]	; (1d134 <z_reset_time_slice+0x28>)
   1d124:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1d126:	2100      	movs	r1, #0
   1d128:	f008 fb04 	bl	25734 <z_set_timeout_expiry>
}
   1d12c:	e7f2      	b.n	1d114 <z_reset_time_slice+0x8>
   1d12e:	bf00      	nop
   1d130:	20003024 	.word	0x20003024
   1d134:	20002fe8 	.word	0x20002fe8

0001d138 <k_sched_time_slice_set>:
{
   1d138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d13c:	4606      	mov	r6, r0
   1d13e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1d140:	2300      	movs	r3, #0
	__asm__ volatile(
   1d142:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d146:	f3ef 8711 	mrs	r7, BASEPRI
   1d14a:	f382 8812 	msr	BASEPRI_MAX, r2
   1d14e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1d152:	e009      	b.n	1d168 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   1d154:	4b13      	ldr	r3, [pc, #76]	; (1d1a4 <k_sched_time_slice_set+0x6c>)
   1d156:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   1d15a:	f7ff ffd7 	bl	1d10c <z_reset_time_slice>
	__asm__ volatile(
   1d15e:	f387 8811 	msr	BASEPRI, r7
   1d162:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1d166:	2301      	movs	r3, #1
   1d168:	b9cb      	cbnz	r3, 1d19e <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   1d16a:	2300      	movs	r3, #0
   1d16c:	4a0e      	ldr	r2, [pc, #56]	; (1d1a8 <k_sched_time_slice_set+0x70>)
   1d16e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d170:	0c75      	lsrs	r5, r6, #17
   1d172:	03f4      	lsls	r4, r6, #15
   1d174:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d17c:	2300      	movs	r3, #0
   1d17e:	1820      	adds	r0, r4, r0
   1d180:	f04f 0100 	mov.w	r1, #0
   1d184:	eb45 0101 	adc.w	r1, r5, r1
   1d188:	f7e3 fbb0 	bl	8ec <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1d18c:	4b07      	ldr	r3, [pc, #28]	; (1d1ac <k_sched_time_slice_set+0x74>)
   1d18e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1d190:	2e00      	cmp	r6, #0
   1d192:	dddf      	ble.n	1d154 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   1d194:	2802      	cmp	r0, #2
   1d196:	bfb8      	it	lt
   1d198:	2002      	movlt	r0, #2
   1d19a:	6018      	str	r0, [r3, #0]
   1d19c:	e7da      	b.n	1d154 <k_sched_time_slice_set+0x1c>
}
   1d19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d1a2:	bf00      	nop
   1d1a4:	20003020 	.word	0x20003020
   1d1a8:	20002fe8 	.word	0x20002fe8
   1d1ac:	20003024 	.word	0x20003024

0001d1b0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1d1b0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1d1b2:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d1b4:	b921      	cbnz	r1, 1d1c0 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d1b6:	f3ef 8305 	mrs	r3, IPSR
   1d1ba:	b913      	cbnz	r3, 1d1c2 <z_reschedule+0x12>
   1d1bc:	2101      	movs	r1, #1
   1d1be:	e000      	b.n	1d1c2 <z_reschedule+0x12>
   1d1c0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1d1c2:	f011 0f01 	tst.w	r1, #1
   1d1c6:	d007      	beq.n	1d1d8 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1d1c8:	4b06      	ldr	r3, [pc, #24]	; (1d1e4 <z_reschedule+0x34>)
   1d1ca:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1d1cc:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1d1ce:	429a      	cmp	r2, r3
   1d1d0:	d002      	beq.n	1d1d8 <z_reschedule+0x28>
	ret = arch_swap(key);
   1d1d2:	f7f6 f897 	bl	13304 <arch_swap>
		z_swap(lock, key);
   1d1d6:	e003      	b.n	1d1e0 <z_reschedule+0x30>
   1d1d8:	f380 8811 	msr	BASEPRI, r0
   1d1dc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1d1e0:	bd08      	pop	{r3, pc}
   1d1e2:	bf00      	nop
   1d1e4:	20002fe8 	.word	0x20002fe8

0001d1e8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1d1e8:	2300      	movs	r3, #0
	__asm__ volatile(
   1d1ea:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d1ee:	f3ef 8111 	mrs	r1, BASEPRI
   1d1f2:	f382 8812 	msr	BASEPRI_MAX, r2
   1d1f6:	f3bf 8f6f 	isb	sy
   1d1fa:	b953      	cbnz	r3, 1d212 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1d1fc:	4b05      	ldr	r3, [pc, #20]	; (1d214 <k_sched_lock+0x2c>)
   1d1fe:	689a      	ldr	r2, [r3, #8]
   1d200:	7bd3      	ldrb	r3, [r2, #15]
   1d202:	3b01      	subs	r3, #1
   1d204:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1d206:	f381 8811 	msr	BASEPRI, r1
   1d20a:	f3bf 8f6f 	isb	sy
   1d20e:	2301      	movs	r3, #1
   1d210:	e7f3      	b.n	1d1fa <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1d212:	4770      	bx	lr
   1d214:	20002fe8 	.word	0x20002fe8

0001d218 <update_cache>:
{
   1d218:	b538      	push	{r3, r4, r5, lr}
   1d21a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   1d21c:	480f      	ldr	r0, [pc, #60]	; (1d25c <update_cache+0x44>)
   1d21e:	f008 f8fe 	bl	2541e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d222:	4605      	mov	r5, r0
   1d224:	b170      	cbz	r0, 1d244 <update_cache+0x2c>
	if (preempt_ok != 0) {
   1d226:	b984      	cbnz	r4, 1d24a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1d228:	4b0d      	ldr	r3, [pc, #52]	; (1d260 <update_cache+0x48>)
   1d22a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1d22c:	7b5a      	ldrb	r2, [r3, #13]
   1d22e:	f012 0f1f 	tst.w	r2, #31
   1d232:	d10a      	bne.n	1d24a <update_cache+0x32>
	return node->next != NULL;
   1d234:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1d236:	b942      	cbnz	r2, 1d24a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1d238:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1d23a:	2a7f      	cmp	r2, #127	; 0x7f
   1d23c:	d905      	bls.n	1d24a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1d23e:	4a08      	ldr	r2, [pc, #32]	; (1d260 <update_cache+0x48>)
   1d240:	61d3      	str	r3, [r2, #28]
   1d242:	e00a      	b.n	1d25a <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1d244:	4b06      	ldr	r3, [pc, #24]	; (1d260 <update_cache+0x48>)
   1d246:	68dd      	ldr	r5, [r3, #12]
   1d248:	e7ed      	b.n	1d226 <update_cache+0xe>
		if (thread != _current) {
   1d24a:	4b05      	ldr	r3, [pc, #20]	; (1d260 <update_cache+0x48>)
   1d24c:	689b      	ldr	r3, [r3, #8]
   1d24e:	42ab      	cmp	r3, r5
   1d250:	d001      	beq.n	1d256 <update_cache+0x3e>
			z_reset_time_slice();
   1d252:	f7ff ff5b 	bl	1d10c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1d256:	4b02      	ldr	r3, [pc, #8]	; (1d260 <update_cache+0x48>)
   1d258:	61dd      	str	r5, [r3, #28]
}
   1d25a:	bd38      	pop	{r3, r4, r5, pc}
   1d25c:	20003008 	.word	0x20003008
   1d260:	20002fe8 	.word	0x20002fe8

0001d264 <move_thread_to_end_of_prio_q>:
{
   1d264:	b538      	push	{r3, r4, r5, lr}
   1d266:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1d268:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1d26a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d26e:	2b00      	cmp	r3, #0
   1d270:	db28      	blt.n	1d2c4 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d272:	7b6b      	ldrb	r3, [r5, #13]
   1d274:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d278:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1d27a:	4b1a      	ldr	r3, [pc, #104]	; (1d2e4 <move_thread_to_end_of_prio_q+0x80>)
   1d27c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d280:	429c      	cmp	r4, r3
   1d282:	d02d      	beq.n	1d2e0 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d284:	b16c      	cbz	r4, 1d2a2 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d286:	4621      	mov	r1, r4
   1d288:	4628      	mov	r0, r5
   1d28a:	f008 f85f 	bl	2534c <z_sched_prio_cmp>
   1d28e:	2800      	cmp	r0, #0
   1d290:	dc20      	bgt.n	1d2d4 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d292:	b134      	cbz	r4, 1d2a2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1d294:	4b13      	ldr	r3, [pc, #76]	; (1d2e4 <move_thread_to_end_of_prio_q+0x80>)
   1d296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d298:	429c      	cmp	r4, r3
   1d29a:	d002      	beq.n	1d2a2 <move_thread_to_end_of_prio_q+0x3e>
   1d29c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d29e:	2c00      	cmp	r4, #0
   1d2a0:	d1f0      	bne.n	1d284 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1d2a2:	4b10      	ldr	r3, [pc, #64]	; (1d2e4 <move_thread_to_end_of_prio_q+0x80>)
   1d2a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1d2a6:	f103 0120 	add.w	r1, r3, #32
   1d2aa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1d2ac:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1d2ae:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1d2b0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1d2b2:	4b0c      	ldr	r3, [pc, #48]	; (1d2e4 <move_thread_to_end_of_prio_q+0x80>)
   1d2b4:	6898      	ldr	r0, [r3, #8]
   1d2b6:	42a8      	cmp	r0, r5
   1d2b8:	bf14      	ite	ne
   1d2ba:	2000      	movne	r0, #0
   1d2bc:	2001      	moveq	r0, #1
   1d2be:	f7ff ffab 	bl	1d218 <update_cache>
}
   1d2c2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d2c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1d2c8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1d2ca:	4601      	mov	r1, r0
   1d2cc:	4806      	ldr	r0, [pc, #24]	; (1d2e8 <move_thread_to_end_of_prio_q+0x84>)
   1d2ce:	f008 f87b 	bl	253c8 <z_priq_dumb_remove>
}
   1d2d2:	e7ce      	b.n	1d272 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1d2d4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1d2d6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1d2d8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1d2da:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d2dc:	6065      	str	r5, [r4, #4]
}
   1d2de:	e7e8      	b.n	1d2b2 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d2e0:	2400      	movs	r4, #0
   1d2e2:	e7cf      	b.n	1d284 <move_thread_to_end_of_prio_q+0x20>
   1d2e4:	20002fe8 	.word	0x20002fe8
   1d2e8:	20003008 	.word	0x20003008

0001d2ec <z_time_slice>:
{
   1d2ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d2ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d2f2:	f3ef 8411 	mrs	r4, BASEPRI
   1d2f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2fa:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1d2fe:	4b1c      	ldr	r3, [pc, #112]	; (1d370 <z_time_slice+0x84>)
   1d300:	689b      	ldr	r3, [r3, #8]
   1d302:	4a1c      	ldr	r2, [pc, #112]	; (1d374 <z_time_slice+0x88>)
   1d304:	6812      	ldr	r2, [r2, #0]
   1d306:	4293      	cmp	r3, r2
   1d308:	d01d      	beq.n	1d346 <z_time_slice+0x5a>
	pending_current = NULL;
   1d30a:	4a1a      	ldr	r2, [pc, #104]	; (1d374 <z_time_slice+0x88>)
   1d30c:	2100      	movs	r1, #0
   1d30e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1d310:	4a19      	ldr	r2, [pc, #100]	; (1d378 <z_time_slice+0x8c>)
   1d312:	6812      	ldr	r2, [r2, #0]
   1d314:	b322      	cbz	r2, 1d360 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1d316:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1d318:	2a7f      	cmp	r2, #127	; 0x7f
   1d31a:	d821      	bhi.n	1d360 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1d31c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1d31e:	f012 0f1f 	tst.w	r2, #31
   1d322:	d11d      	bne.n	1d360 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1d324:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1d328:	4a14      	ldr	r2, [pc, #80]	; (1d37c <z_time_slice+0x90>)
   1d32a:	6812      	ldr	r2, [r2, #0]
   1d32c:	4291      	cmp	r1, r2
   1d32e:	db17      	blt.n	1d360 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1d330:	4a13      	ldr	r2, [pc, #76]	; (1d380 <z_time_slice+0x94>)
   1d332:	4293      	cmp	r3, r2
   1d334:	d014      	beq.n	1d360 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1d336:	4a0e      	ldr	r2, [pc, #56]	; (1d370 <z_time_slice+0x84>)
   1d338:	6912      	ldr	r2, [r2, #16]
   1d33a:	4282      	cmp	r2, r0
   1d33c:	dd0a      	ble.n	1d354 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1d33e:	1a10      	subs	r0, r2, r0
   1d340:	4b0b      	ldr	r3, [pc, #44]	; (1d370 <z_time_slice+0x84>)
   1d342:	6118      	str	r0, [r3, #16]
   1d344:	e00f      	b.n	1d366 <z_time_slice+0x7a>
		z_reset_time_slice();
   1d346:	f7ff fee1 	bl	1d10c <z_reset_time_slice>
	__asm__ volatile(
   1d34a:	f384 8811 	msr	BASEPRI, r4
   1d34e:	f3bf 8f6f 	isb	sy
		return;
   1d352:	e00c      	b.n	1d36e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   1d354:	4618      	mov	r0, r3
   1d356:	f7ff ff85 	bl	1d264 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1d35a:	f7ff fed7 	bl	1d10c <z_reset_time_slice>
   1d35e:	e002      	b.n	1d366 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1d360:	4b03      	ldr	r3, [pc, #12]	; (1d370 <z_time_slice+0x84>)
   1d362:	2200      	movs	r2, #0
   1d364:	611a      	str	r2, [r3, #16]
   1d366:	f384 8811 	msr	BASEPRI, r4
   1d36a:	f3bf 8f6f 	isb	sy
}
   1d36e:	bd10      	pop	{r4, pc}
   1d370:	20002fe8 	.word	0x20002fe8
   1d374:	2000301c 	.word	0x2000301c
   1d378:	20003024 	.word	0x20003024
   1d37c:	20003020 	.word	0x20003020
   1d380:	20001d50 	.word	0x20001d50

0001d384 <ready_thread>:
{
   1d384:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1d386:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1d388:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1d38c:	2a00      	cmp	r2, #0
   1d38e:	db2d      	blt.n	1d3ec <ready_thread+0x68>
   1d390:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d392:	f013 0f1f 	tst.w	r3, #31
   1d396:	d105      	bne.n	1d3a4 <ready_thread+0x20>
	return node->next != NULL;
   1d398:	6982      	ldr	r2, [r0, #24]
   1d39a:	b10a      	cbz	r2, 1d3a0 <ready_thread+0x1c>
   1d39c:	2200      	movs	r2, #0
   1d39e:	e002      	b.n	1d3a6 <ready_thread+0x22>
   1d3a0:	2201      	movs	r2, #1
   1d3a2:	e000      	b.n	1d3a6 <ready_thread+0x22>
   1d3a4:	2200      	movs	r2, #0
   1d3a6:	b30a      	cbz	r2, 1d3ec <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1d3a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d3ac:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1d3ae:	4b14      	ldr	r3, [pc, #80]	; (1d400 <ready_thread+0x7c>)
   1d3b0:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d3b4:	429d      	cmp	r5, r3
   1d3b6:	d020      	beq.n	1d3fa <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d3b8:	b16d      	cbz	r5, 1d3d6 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d3ba:	4629      	mov	r1, r5
   1d3bc:	4620      	mov	r0, r4
   1d3be:	f007 ffc5 	bl	2534c <z_sched_prio_cmp>
   1d3c2:	2800      	cmp	r0, #0
   1d3c4:	dc13      	bgt.n	1d3ee <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d3c6:	b135      	cbz	r5, 1d3d6 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1d3c8:	4b0d      	ldr	r3, [pc, #52]	; (1d400 <ready_thread+0x7c>)
   1d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d3cc:	429d      	cmp	r5, r3
   1d3ce:	d002      	beq.n	1d3d6 <ready_thread+0x52>
   1d3d0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d3d2:	2d00      	cmp	r5, #0
   1d3d4:	d1f0      	bne.n	1d3b8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1d3d6:	4b0a      	ldr	r3, [pc, #40]	; (1d400 <ready_thread+0x7c>)
   1d3d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1d3da:	f103 0120 	add.w	r1, r3, #32
   1d3de:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1d3e0:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1d3e2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1d3e4:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   1d3e6:	2000      	movs	r0, #0
   1d3e8:	f7ff ff16 	bl	1d218 <update_cache>
}
   1d3ec:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1d3ee:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1d3f0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1d3f2:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1d3f4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d3f6:	606c      	str	r4, [r5, #4]
}
   1d3f8:	e7f5      	b.n	1d3e6 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d3fa:	2500      	movs	r5, #0
   1d3fc:	e7dc      	b.n	1d3b8 <ready_thread+0x34>
   1d3fe:	bf00      	nop
   1d400:	20002fe8 	.word	0x20002fe8

0001d404 <z_sched_start>:
{
   1d404:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d406:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d40a:	f3ef 8411 	mrs	r4, BASEPRI
   1d40e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d412:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1d416:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1d418:	f013 0f04 	tst.w	r3, #4
   1d41c:	d104      	bne.n	1d428 <z_sched_start+0x24>
	__asm__ volatile(
   1d41e:	f384 8811 	msr	BASEPRI, r4
   1d422:	f3bf 8f6f 	isb	sy
}
   1d426:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d428:	f023 0304 	bic.w	r3, r3, #4
   1d42c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1d42e:	f7ff ffa9 	bl	1d384 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1d432:	4621      	mov	r1, r4
   1d434:	4801      	ldr	r0, [pc, #4]	; (1d43c <z_sched_start+0x38>)
   1d436:	f7ff febb 	bl	1d1b0 <z_reschedule>
   1d43a:	e7f4      	b.n	1d426 <z_sched_start+0x22>
   1d43c:	20003020 	.word	0x20003020

0001d440 <unready_thread>:
{
   1d440:	b510      	push	{r4, lr}
   1d442:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1d444:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1d446:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1d44a:	2b00      	cmp	r3, #0
   1d44c:	db08      	blt.n	1d460 <unready_thread+0x20>
	update_cache(thread == _current);
   1d44e:	4b08      	ldr	r3, [pc, #32]	; (1d470 <unready_thread+0x30>)
   1d450:	6898      	ldr	r0, [r3, #8]
   1d452:	42a0      	cmp	r0, r4
   1d454:	bf14      	ite	ne
   1d456:	2000      	movne	r0, #0
   1d458:	2001      	moveq	r0, #1
   1d45a:	f7ff fedd 	bl	1d218 <update_cache>
}
   1d45e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d460:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1d464:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1d466:	4601      	mov	r1, r0
   1d468:	4802      	ldr	r0, [pc, #8]	; (1d474 <unready_thread+0x34>)
   1d46a:	f007 ffad 	bl	253c8 <z_priq_dumb_remove>
}
   1d46e:	e7ee      	b.n	1d44e <unready_thread+0xe>
   1d470:	20002fe8 	.word	0x20002fe8
   1d474:	20003008 	.word	0x20003008

0001d478 <z_pend_curr>:
{
   1d478:	b510      	push	{r4, lr}
   1d47a:	460c      	mov	r4, r1
   1d47c:	4611      	mov	r1, r2
	pending_current = _current;
   1d47e:	4b06      	ldr	r3, [pc, #24]	; (1d498 <z_pend_curr+0x20>)
   1d480:	6898      	ldr	r0, [r3, #8]
   1d482:	4b06      	ldr	r3, [pc, #24]	; (1d49c <z_pend_curr+0x24>)
   1d484:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1d486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d48a:	f008 f849 	bl	25520 <pend>
   1d48e:	4620      	mov	r0, r4
   1d490:	f7f5 ff38 	bl	13304 <arch_swap>
}
   1d494:	bd10      	pop	{r4, pc}
   1d496:	bf00      	nop
   1d498:	20002fe8 	.word	0x20002fe8
   1d49c:	2000301c 	.word	0x2000301c

0001d4a0 <z_set_prio>:
{
   1d4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d4a4:	4604      	mov	r4, r0
   1d4a6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1d4a8:	2300      	movs	r3, #0
	__asm__ volatile(
   1d4aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d4ae:	f3ef 8611 	mrs	r6, BASEPRI
   1d4b2:	f382 8812 	msr	BASEPRI_MAX, r2
   1d4b6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1d4ba:	4698      	mov	r8, r3
   1d4bc:	e008      	b.n	1d4d0 <z_set_prio+0x30>
		if (need_sched) {
   1d4be:	f012 0801 	ands.w	r8, r2, #1
   1d4c2:	d111      	bne.n	1d4e8 <z_set_prio+0x48>
			thread->base.prio = prio;
   1d4c4:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1d4c6:	f386 8811 	msr	BASEPRI, r6
   1d4ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1d4ce:	2301      	movs	r3, #1
   1d4d0:	461a      	mov	r2, r3
   1d4d2:	2b00      	cmp	r3, #0
   1d4d4:	d13d      	bne.n	1d552 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1d4d6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d4d8:	f013 0f1f 	tst.w	r3, #31
   1d4dc:	d1ef      	bne.n	1d4be <z_set_prio+0x1e>
	return node->next != NULL;
   1d4de:	69a1      	ldr	r1, [r4, #24]
   1d4e0:	2900      	cmp	r1, #0
   1d4e2:	d1ec      	bne.n	1d4be <z_set_prio+0x1e>
   1d4e4:	2201      	movs	r2, #1
   1d4e6:	e7ea      	b.n	1d4be <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d4e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d4ec:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1d4ee:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1d55c <z_set_prio+0xbc>
   1d4f2:	4621      	mov	r1, r4
   1d4f4:	4648      	mov	r0, r9
   1d4f6:	f007 ff67 	bl	253c8 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1d4fa:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d4fc:	7b63      	ldrb	r3, [r4, #13]
   1d4fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d502:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1d504:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d508:	454d      	cmp	r5, r9
   1d50a:	d020      	beq.n	1d54e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d50c:	b16d      	cbz	r5, 1d52a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d50e:	4629      	mov	r1, r5
   1d510:	4620      	mov	r0, r4
   1d512:	f007 ff1b 	bl	2534c <z_sched_prio_cmp>
   1d516:	2800      	cmp	r0, #0
   1d518:	dc13      	bgt.n	1d542 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d51a:	b135      	cbz	r5, 1d52a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1d51c:	4b0e      	ldr	r3, [pc, #56]	; (1d558 <z_set_prio+0xb8>)
   1d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d520:	429d      	cmp	r5, r3
   1d522:	d002      	beq.n	1d52a <z_set_prio+0x8a>
   1d524:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d526:	2d00      	cmp	r5, #0
   1d528:	d1f0      	bne.n	1d50c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1d52a:	4b0b      	ldr	r3, [pc, #44]	; (1d558 <z_set_prio+0xb8>)
   1d52c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1d52e:	f103 0120 	add.w	r1, r3, #32
   1d532:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1d534:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1d536:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1d538:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1d53a:	2001      	movs	r0, #1
   1d53c:	f7ff fe6c 	bl	1d218 <update_cache>
   1d540:	e7c1      	b.n	1d4c6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1d542:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1d544:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1d546:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1d548:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d54a:	606c      	str	r4, [r5, #4]
}
   1d54c:	e7f5      	b.n	1d53a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d54e:	2500      	movs	r5, #0
   1d550:	e7dc      	b.n	1d50c <z_set_prio+0x6c>
}
   1d552:	4640      	mov	r0, r8
   1d554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d558:	20002fe8 	.word	0x20002fe8
   1d55c:	20003008 	.word	0x20003008

0001d560 <z_impl_k_thread_suspend>:
{
   1d560:	b538      	push	{r3, r4, r5, lr}
   1d562:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1d564:	3018      	adds	r0, #24
   1d566:	f008 f8b1 	bl	256cc <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1d56a:	2300      	movs	r3, #0
	__asm__ volatile(
   1d56c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d570:	f3ef 8511 	mrs	r5, BASEPRI
   1d574:	f382 8812 	msr	BASEPRI_MAX, r2
   1d578:	f3bf 8f6f 	isb	sy
   1d57c:	e010      	b.n	1d5a0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d57e:	7b63      	ldrb	r3, [r4, #13]
   1d580:	f043 0310 	orr.w	r3, r3, #16
   1d584:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1d586:	4b15      	ldr	r3, [pc, #84]	; (1d5dc <z_impl_k_thread_suspend+0x7c>)
   1d588:	6898      	ldr	r0, [r3, #8]
   1d58a:	42a0      	cmp	r0, r4
   1d58c:	bf14      	ite	ne
   1d58e:	2000      	movne	r0, #0
   1d590:	2001      	moveq	r0, #1
   1d592:	f7ff fe41 	bl	1d218 <update_cache>
	__asm__ volatile(
   1d596:	f385 8811 	msr	BASEPRI, r5
   1d59a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1d59e:	2301      	movs	r3, #1
   1d5a0:	b963      	cbnz	r3, 1d5bc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1d5a2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1d5a4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1d5a8:	2b00      	cmp	r3, #0
   1d5aa:	dae8      	bge.n	1d57e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d5ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1d5b0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1d5b2:	4621      	mov	r1, r4
   1d5b4:	480a      	ldr	r0, [pc, #40]	; (1d5e0 <z_impl_k_thread_suspend+0x80>)
   1d5b6:	f007 ff07 	bl	253c8 <z_priq_dumb_remove>
}
   1d5ba:	e7e0      	b.n	1d57e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1d5bc:	4b07      	ldr	r3, [pc, #28]	; (1d5dc <z_impl_k_thread_suspend+0x7c>)
   1d5be:	689b      	ldr	r3, [r3, #8]
   1d5c0:	42a3      	cmp	r3, r4
   1d5c2:	d000      	beq.n	1d5c6 <z_impl_k_thread_suspend+0x66>
}
   1d5c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d5c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d5ca:	f3ef 8011 	mrs	r0, BASEPRI
   1d5ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5d2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d5d6:	f007 fee2 	bl	2539e <z_reschedule_irqlock>
   1d5da:	e7f3      	b.n	1d5c4 <z_impl_k_thread_suspend+0x64>
   1d5dc:	20002fe8 	.word	0x20002fe8
   1d5e0:	20003008 	.word	0x20003008

0001d5e4 <k_sched_unlock>:

void k_sched_unlock(void)
{
   1d5e4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1d5e6:	2300      	movs	r3, #0
   1d5e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d5ec:	f3ef 8411 	mrs	r4, BASEPRI
   1d5f0:	f382 8812 	msr	BASEPRI_MAX, r2
   1d5f4:	f3bf 8f6f 	isb	sy
   1d5f8:	b96b      	cbnz	r3, 1d616 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1d5fa:	4b0c      	ldr	r3, [pc, #48]	; (1d62c <k_sched_unlock+0x48>)
   1d5fc:	689a      	ldr	r2, [r3, #8]
   1d5fe:	7bd3      	ldrb	r3, [r2, #15]
   1d600:	3301      	adds	r3, #1
   1d602:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1d604:	2000      	movs	r0, #0
   1d606:	f7ff fe07 	bl	1d218 <update_cache>
	__asm__ volatile(
   1d60a:	f384 8811 	msr	BASEPRI, r4
   1d60e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1d612:	2301      	movs	r3, #1
   1d614:	e7f0      	b.n	1d5f8 <k_sched_unlock+0x14>
	__asm__ volatile(
   1d616:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d61a:	f3ef 8011 	mrs	r0, BASEPRI
   1d61e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d622:	f3bf 8f6f 	isb	sy
   1d626:	f007 feba 	bl	2539e <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1d62a:	bd10      	pop	{r4, pc}
   1d62c:	20002fe8 	.word	0x20002fe8

0001d630 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   1d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1d632:	7b43      	ldrb	r3, [r0, #13]
   1d634:	f013 0f08 	tst.w	r3, #8
   1d638:	d145      	bne.n	1d6c6 <end_thread+0x96>
   1d63a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1d63c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1d640:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d644:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1d646:	f013 0f80 	tst.w	r3, #128	; 0x80
   1d64a:	d114      	bne.n	1d676 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   1d64c:	68ab      	ldr	r3, [r5, #8]
   1d64e:	b15b      	cbz	r3, 1d668 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1d650:	4628      	mov	r0, r5
   1d652:	f007 fe79 	bl	25348 <pended_on_thread>
   1d656:	4629      	mov	r1, r5
   1d658:	f007 feb6 	bl	253c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d65c:	7b6b      	ldrb	r3, [r5, #13]
   1d65e:	f023 0302 	bic.w	r3, r3, #2
   1d662:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1d664:	2300      	movs	r3, #0
   1d666:	60ab      	str	r3, [r5, #8]
   1d668:	f105 0018 	add.w	r0, r5, #24
   1d66c:	f008 f82e 	bl	256cc <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1d670:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d674:	e01c      	b.n	1d6b0 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d67a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1d67c:	4601      	mov	r1, r0
   1d67e:	4812      	ldr	r0, [pc, #72]	; (1d6c8 <end_thread+0x98>)
   1d680:	f007 fea2 	bl	253c8 <z_priq_dumb_remove>
}
   1d684:	e7e2      	b.n	1d64c <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1d686:	4620      	mov	r0, r4
   1d688:	f007 fe5e 	bl	25348 <pended_on_thread>
   1d68c:	4621      	mov	r1, r4
   1d68e:	f007 fe9b 	bl	253c8 <z_priq_dumb_remove>
   1d692:	7b63      	ldrb	r3, [r4, #13]
   1d694:	f023 0302 	bic.w	r3, r3, #2
   1d698:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1d69a:	2600      	movs	r6, #0
   1d69c:	60a6      	str	r6, [r4, #8]
   1d69e:	f104 0018 	add.w	r0, r4, #24
   1d6a2:	f008 f813 	bl	256cc <z_abort_timeout>
   1d6a6:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1d6aa:	4620      	mov	r0, r4
   1d6ac:	f7ff fe6a 	bl	1d384 <ready_thread>
	return list->head == list;
   1d6b0:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d6b2:	42bc      	cmp	r4, r7
   1d6b4:	d001      	beq.n	1d6ba <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d6b6:	2c00      	cmp	r4, #0
   1d6b8:	d1e5      	bne.n	1d686 <end_thread+0x56>
		update_cache(1);
   1d6ba:	2001      	movs	r0, #1
   1d6bc:	f7ff fdac 	bl	1d218 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1d6c0:	4628      	mov	r0, r5
   1d6c2:	f7ff f8db 	bl	1c87c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1d6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d6c8:	20003008 	.word	0x20003008

0001d6cc <z_sched_init>:
{
   1d6cc:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1d6ce:	4804      	ldr	r0, [pc, #16]	; (1d6e0 <z_sched_init+0x14>)
   1d6d0:	f007 ffaa 	bl	25628 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1d6d4:	2100      	movs	r1, #0
   1d6d6:	4608      	mov	r0, r1
   1d6d8:	f7ff fd2e 	bl	1d138 <k_sched_time_slice_set>
}
   1d6dc:	bd08      	pop	{r3, pc}
   1d6de:	bf00      	nop
   1d6e0:	20003004 	.word	0x20003004

0001d6e4 <z_impl_k_yield>:
{
   1d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d6ea:	f3ef 8611 	mrs	r6, BASEPRI
   1d6ee:	f383 8812 	msr	BASEPRI_MAX, r3
   1d6f2:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   1d6f6:	4c1c      	ldr	r4, [pc, #112]	; (1d768 <z_impl_k_yield+0x84>)
   1d6f8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1d6fa:	7b4b      	ldrb	r3, [r1, #13]
   1d6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d700:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1d702:	f104 0720 	add.w	r7, r4, #32
   1d706:	4638      	mov	r0, r7
   1d708:	f007 fe5e 	bl	253c8 <z_priq_dumb_remove>
	queue_thread(_current);
   1d70c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1d70e:	7b6b      	ldrb	r3, [r5, #13]
   1d710:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d714:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1d716:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d718:	42bc      	cmp	r4, r7
   1d71a:	d023      	beq.n	1d764 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d71c:	b16c      	cbz	r4, 1d73a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d71e:	4621      	mov	r1, r4
   1d720:	4628      	mov	r0, r5
   1d722:	f007 fe13 	bl	2534c <z_sched_prio_cmp>
   1d726:	2800      	cmp	r0, #0
   1d728:	dc16      	bgt.n	1d758 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d72a:	b134      	cbz	r4, 1d73a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1d72c:	4b0e      	ldr	r3, [pc, #56]	; (1d768 <z_impl_k_yield+0x84>)
   1d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d730:	429c      	cmp	r4, r3
   1d732:	d002      	beq.n	1d73a <z_impl_k_yield+0x56>
   1d734:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d736:	2c00      	cmp	r4, #0
   1d738:	d1f0      	bne.n	1d71c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1d73a:	4b0b      	ldr	r3, [pc, #44]	; (1d768 <z_impl_k_yield+0x84>)
   1d73c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1d73e:	f103 0120 	add.w	r1, r3, #32
   1d742:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1d744:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1d746:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1d748:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1d74a:	2001      	movs	r0, #1
   1d74c:	f7ff fd64 	bl	1d218 <update_cache>
   1d750:	4630      	mov	r0, r6
   1d752:	f7f5 fdd7 	bl	13304 <arch_swap>
}
   1d756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1d758:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1d75a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1d75c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1d75e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d760:	6065      	str	r5, [r4, #4]
}
   1d762:	e7f2      	b.n	1d74a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d764:	2400      	movs	r4, #0
   1d766:	e7d9      	b.n	1d71c <z_impl_k_yield+0x38>
   1d768:	20002fe8 	.word	0x20002fe8

0001d76c <z_tick_sleep>:
{
   1d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d770:	4604      	mov	r4, r0
   1d772:	460d      	mov	r5, r1
	if (ticks == 0) {
   1d774:	ea54 0105 	orrs.w	r1, r4, r5
   1d778:	d037      	beq.n	1d7ea <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1d77a:	f06f 0101 	mvn.w	r1, #1
   1d77e:	1a0a      	subs	r2, r1, r0
   1d780:	f04f 31ff 	mov.w	r1, #4294967295
   1d784:	eb61 0305 	sbc.w	r3, r1, r5
   1d788:	2a01      	cmp	r2, #1
   1d78a:	f173 0300 	sbcs.w	r3, r3, #0
   1d78e:	db30      	blt.n	1d7f2 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1d790:	f06f 0601 	mvn.w	r6, #1
   1d794:	1a36      	subs	r6, r6, r0
   1d796:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d79a:	f3ef 8811 	mrs	r8, BASEPRI
   1d79e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7a2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1d7a6:	4f16      	ldr	r7, [pc, #88]	; (1d800 <z_tick_sleep+0x94>)
   1d7a8:	68b8      	ldr	r0, [r7, #8]
   1d7aa:	4b16      	ldr	r3, [pc, #88]	; (1d804 <z_tick_sleep+0x98>)
   1d7ac:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1d7ae:	f7ff fe47 	bl	1d440 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1d7b2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1d7b4:	4622      	mov	r2, r4
   1d7b6:	462b      	mov	r3, r5
   1d7b8:	4913      	ldr	r1, [pc, #76]	; (1d808 <z_tick_sleep+0x9c>)
   1d7ba:	3018      	adds	r0, #24
   1d7bc:	f000 f904 	bl	1d9c8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1d7c0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1d7c2:	7b53      	ldrb	r3, [r2, #13]
   1d7c4:	f043 0310 	orr.w	r3, r3, #16
   1d7c8:	7353      	strb	r3, [r2, #13]
   1d7ca:	4640      	mov	r0, r8
   1d7cc:	f7f5 fd9a 	bl	13304 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1d7d0:	2500      	movs	r5, #0
   1d7d2:	f007 ffda 	bl	2578a <sys_clock_tick_get_32>
   1d7d6:	1a34      	subs	r4, r6, r0
   1d7d8:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1d7dc:	2c01      	cmp	r4, #1
   1d7de:	f175 0300 	sbcs.w	r3, r5, #0
   1d7e2:	da0a      	bge.n	1d7fa <z_tick_sleep+0x8e>
	return 0;
   1d7e4:	2000      	movs	r0, #0
}
   1d7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1d7ea:	f7ff ff7b 	bl	1d6e4 <z_impl_k_yield>
		return 0;
   1d7ee:	2000      	movs	r0, #0
   1d7f0:	e7f9      	b.n	1d7e6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1d7f2:	f007 ffca 	bl	2578a <sys_clock_tick_get_32>
   1d7f6:	1906      	adds	r6, r0, r4
   1d7f8:	e7cd      	b.n	1d796 <z_tick_sleep+0x2a>
		return ticks;
   1d7fa:	4620      	mov	r0, r4
   1d7fc:	e7f3      	b.n	1d7e6 <z_tick_sleep+0x7a>
   1d7fe:	bf00      	nop
   1d800:	20002fe8 	.word	0x20002fe8
   1d804:	2000301c 	.word	0x2000301c
   1d808:	00025465 	.word	0x00025465

0001d80c <z_impl_k_sleep>:
{
   1d80c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d80e:	f1b1 3fff 	cmp.w	r1, #4294967295
   1d812:	bf08      	it	eq
   1d814:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1d818:	d01a      	beq.n	1d850 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1d81a:	f7ff ffa7 	bl	1d76c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1d81e:	4604      	mov	r4, r0
   1d820:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   1d822:	0169      	lsls	r1, r5, #5
   1d824:	0143      	lsls	r3, r0, #5
   1d826:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1d82a:	1a18      	subs	r0, r3, r0
   1d82c:	eb62 0305 	sbc.w	r3, r2, r5
   1d830:	009a      	lsls	r2, r3, #2
   1d832:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   1d836:	0081      	lsls	r1, r0, #2
   1d838:	4613      	mov	r3, r2
   1d83a:	1908      	adds	r0, r1, r4
   1d83c:	eb45 0303 	adc.w	r3, r5, r3
   1d840:	00da      	lsls	r2, r3, #3
   1d842:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1d846:	00c1      	lsls	r1, r0, #3
   1d848:	0bc8      	lsrs	r0, r1, #15
   1d84a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1d84e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1d850:	4b03      	ldr	r3, [pc, #12]	; (1d860 <z_impl_k_sleep+0x54>)
   1d852:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1d854:	f7ff fe84 	bl	1d560 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1d858:	f04f 30ff 	mov.w	r0, #4294967295
   1d85c:	e7f7      	b.n	1d84e <z_impl_k_sleep+0x42>
   1d85e:	bf00      	nop
   1d860:	20002fe8 	.word	0x20002fe8

0001d864 <z_impl_z_current_get>:
}
   1d864:	4b01      	ldr	r3, [pc, #4]	; (1d86c <z_impl_z_current_get+0x8>)
   1d866:	6898      	ldr	r0, [r3, #8]
   1d868:	4770      	bx	lr
   1d86a:	bf00      	nop
   1d86c:	20002fe8 	.word	0x20002fe8

0001d870 <z_impl_k_is_preempt_thread>:
   1d870:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1d874:	b933      	cbnz	r3, 1d884 <z_impl_k_is_preempt_thread+0x14>
   1d876:	4b05      	ldr	r3, [pc, #20]	; (1d88c <z_impl_k_is_preempt_thread+0x1c>)
   1d878:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1d87a:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1d87c:	2b7f      	cmp	r3, #127	; 0x7f
   1d87e:	d803      	bhi.n	1d888 <z_impl_k_is_preempt_thread+0x18>
   1d880:	2001      	movs	r0, #1
   1d882:	4770      	bx	lr
   1d884:	2000      	movs	r0, #0
   1d886:	4770      	bx	lr
   1d888:	2000      	movs	r0, #0
}
   1d88a:	4770      	bx	lr
   1d88c:	20002fe8 	.word	0x20002fe8

0001d890 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1d890:	b538      	push	{r3, r4, r5, lr}
   1d892:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d896:	f3ef 8511 	mrs	r5, BASEPRI
   1d89a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d89e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1d8a2:	7b43      	ldrb	r3, [r0, #13]
   1d8a4:	f013 0f08 	tst.w	r3, #8
   1d8a8:	d004      	beq.n	1d8b4 <z_thread_abort+0x24>
	__asm__ volatile(
   1d8aa:	f385 8811 	msr	BASEPRI, r5
   1d8ae:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1d8b2:	bd38      	pop	{r3, r4, r5, pc}
   1d8b4:	4604      	mov	r4, r0
	end_thread(thread);
   1d8b6:	f7ff febb 	bl	1d630 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1d8ba:	4b08      	ldr	r3, [pc, #32]	; (1d8dc <z_thread_abort+0x4c>)
   1d8bc:	689b      	ldr	r3, [r3, #8]
   1d8be:	42a3      	cmp	r3, r4
   1d8c0:	d004      	beq.n	1d8cc <z_thread_abort+0x3c>
   1d8c2:	f385 8811 	msr	BASEPRI, r5
   1d8c6:	f3bf 8f6f 	isb	sy
   1d8ca:	e7f2      	b.n	1d8b2 <z_thread_abort+0x22>
   1d8cc:	f3ef 8305 	mrs	r3, IPSR
   1d8d0:	2b00      	cmp	r3, #0
   1d8d2:	d1f6      	bne.n	1d8c2 <z_thread_abort+0x32>
   1d8d4:	4628      	mov	r0, r5
   1d8d6:	f7f5 fd15 	bl	13304 <arch_swap>
	return ret;
   1d8da:	e7f2      	b.n	1d8c2 <z_thread_abort+0x32>
   1d8dc:	20002fe8 	.word	0x20002fe8

0001d8e0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1d8e0:	b5d0      	push	{r4, r6, r7, lr}
   1d8e2:	b082      	sub	sp, #8
   1d8e4:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1d8e6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1d8ea:	e9cd 6700 	strd	r6, r7, [sp]
   1d8ee:	f7ff fdc3 	bl	1d478 <z_pend_curr>

	if (data != NULL) {
   1d8f2:	b11c      	cbz	r4, 1d8fc <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1d8f4:	4b02      	ldr	r3, [pc, #8]	; (1d900 <z_sched_wait+0x20>)
   1d8f6:	689b      	ldr	r3, [r3, #8]
   1d8f8:	695b      	ldr	r3, [r3, #20]
   1d8fa:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1d8fc:	b002      	add	sp, #8
   1d8fe:	bdd0      	pop	{r4, r6, r7, pc}
   1d900:	20002fe8 	.word	0x20002fe8

0001d904 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1d904:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1d906:	4806      	ldr	r0, [pc, #24]	; (1d920 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d908:	4a06      	ldr	r2, [pc, #24]	; (1d924 <z_data_copy+0x20>)
   1d90a:	1a12      	subs	r2, r2, r0
   1d90c:	4906      	ldr	r1, [pc, #24]	; (1d928 <z_data_copy+0x24>)
   1d90e:	f008 f862 	bl	259d6 <memcpy>
   1d912:	4a06      	ldr	r2, [pc, #24]	; (1d92c <z_data_copy+0x28>)
   1d914:	4906      	ldr	r1, [pc, #24]	; (1d930 <z_data_copy+0x2c>)
   1d916:	4807      	ldr	r0, [pc, #28]	; (1d934 <z_data_copy+0x30>)
   1d918:	f008 f85d 	bl	259d6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1d91c:	bd08      	pop	{r3, pc}
   1d91e:	bf00      	nop
   1d920:	20000000 	.word	0x20000000
   1d924:	200008bc 	.word	0x200008bc
   1d928:	000282dc 	.word	0x000282dc
   1d92c:	00000000 	.word	0x00000000
   1d930:	000282dc 	.word	0x000282dc
   1d934:	20000000 	.word	0x20000000

0001d938 <first>:
	return list->head == list;
   1d938:	4b03      	ldr	r3, [pc, #12]	; (1d948 <first+0x10>)
   1d93a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d93c:	4298      	cmp	r0, r3
   1d93e:	d000      	beq.n	1d942 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1d940:	4770      	bx	lr
   1d942:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1d944:	e7fc      	b.n	1d940 <first+0x8>
   1d946:	bf00      	nop
   1d948:	200005e8 	.word	0x200005e8

0001d94c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d94c:	b130      	cbz	r0, 1d95c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1d94e:	4a04      	ldr	r2, [pc, #16]	; (1d960 <next+0x14>)
   1d950:	6852      	ldr	r2, [r2, #4]
   1d952:	4290      	cmp	r0, r2
   1d954:	d001      	beq.n	1d95a <next+0xe>
   1d956:	6800      	ldr	r0, [r0, #0]
   1d958:	4770      	bx	lr
   1d95a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1d95c:	4770      	bx	lr
   1d95e:	bf00      	nop
   1d960:	200005e8 	.word	0x200005e8

0001d964 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1d964:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1d966:	4b04      	ldr	r3, [pc, #16]	; (1d978 <elapsed+0x14>)
   1d968:	681b      	ldr	r3, [r3, #0]
   1d96a:	b10b      	cbz	r3, 1d970 <elapsed+0xc>
   1d96c:	2000      	movs	r0, #0
}
   1d96e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1d970:	f7fd f864 	bl	1aa3c <sys_clock_elapsed>
   1d974:	e7fb      	b.n	1d96e <elapsed+0xa>
   1d976:	bf00      	nop
   1d978:	20003028 	.word	0x20003028

0001d97c <next_timeout>:

static int32_t next_timeout(void)
{
   1d97c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1d97e:	f7ff ffdb 	bl	1d938 <first>
   1d982:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1d984:	f7ff ffee 	bl	1d964 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1d988:	b18c      	cbz	r4, 1d9ae <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1d98a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1d98e:	1a12      	subs	r2, r2, r0
   1d990:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1d994:	2a01      	cmp	r2, #1
   1d996:	f173 0100 	sbcs.w	r1, r3, #0
   1d99a:	db11      	blt.n	1d9c0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1d99c:	4610      	mov	r0, r2
   1d99e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1d9a2:	f173 0300 	sbcs.w	r3, r3, #0
   1d9a6:	db04      	blt.n	1d9b2 <next_timeout+0x36>
   1d9a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d9ac:	e001      	b.n	1d9b2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1d9ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1d9b2:	4b04      	ldr	r3, [pc, #16]	; (1d9c4 <next_timeout+0x48>)
   1d9b4:	691b      	ldr	r3, [r3, #16]
   1d9b6:	b113      	cbz	r3, 1d9be <next_timeout+0x42>
   1d9b8:	4283      	cmp	r3, r0
   1d9ba:	da00      	bge.n	1d9be <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1d9bc:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1d9be:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1d9c0:	2000      	movs	r0, #0
   1d9c2:	e7f6      	b.n	1d9b2 <next_timeout+0x36>
   1d9c4:	20002fe8 	.word	0x20002fe8

0001d9c8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1d9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9cc:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d9d2:	bf08      	it	eq
   1d9d4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1d9d8:	f000 8096 	beq.w	1db08 <z_add_timeout+0x140>
   1d9dc:	4682      	mov	sl, r0
   1d9de:	4614      	mov	r4, r2
   1d9e0:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1d9e2:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1d9e4:	2300      	movs	r3, #0
	__asm__ volatile(
   1d9e6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d9ea:	f3ef 8b11 	mrs	fp, BASEPRI
   1d9ee:	f382 8812 	msr	BASEPRI_MAX, r2
   1d9f2:	f3bf 8f6f 	isb	sy
   1d9f6:	e02e      	b.n	1da56 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1d9f8:	2201      	movs	r2, #1
   1d9fa:	2300      	movs	r3, #0
   1d9fc:	e04b      	b.n	1da96 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1d9fe:	f7ff ffb1 	bl	1d964 <elapsed>
   1da02:	1822      	adds	r2, r4, r0
   1da04:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1da08:	3201      	adds	r2, #1
   1da0a:	f143 0300 	adc.w	r3, r3, #0
   1da0e:	f8ca 2010 	str.w	r2, [sl, #16]
   1da12:	f8ca 3014 	str.w	r3, [sl, #20]
   1da16:	e042      	b.n	1da9e <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1da18:	9b00      	ldr	r3, [sp, #0]
   1da1a:	1ac2      	subs	r2, r0, r3
   1da1c:	9b01      	ldr	r3, [sp, #4]
   1da1e:	eb61 0303 	sbc.w	r3, r1, r3
   1da22:	f8cc 2010 	str.w	r2, [ip, #16]
   1da26:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1da2a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1da2e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1da32:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1da36:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1da3a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1da3e:	f1bc 0f00 	cmp.w	ip, #0
   1da42:	d049      	beq.n	1dad8 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1da44:	f7ff ff78 	bl	1d938 <first>
   1da48:	4582      	cmp	sl, r0
   1da4a:	d050      	beq.n	1daee <z_add_timeout+0x126>
	__asm__ volatile(
   1da4c:	f38b 8811 	msr	BASEPRI, fp
   1da50:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1da54:	2301      	movs	r3, #1
   1da56:	2b00      	cmp	r3, #0
   1da58:	d156      	bne.n	1db08 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1da5a:	f06f 0301 	mvn.w	r3, #1
   1da5e:	ebb3 0804 	subs.w	r8, r3, r4
   1da62:	f04f 30ff 	mov.w	r0, #4294967295
   1da66:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1da6a:	f1b8 0f00 	cmp.w	r8, #0
   1da6e:	f179 0300 	sbcs.w	r3, r9, #0
   1da72:	dbc4      	blt.n	1d9fe <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1da74:	4a26      	ldr	r2, [pc, #152]	; (1db10 <z_add_timeout+0x148>)
   1da76:	6813      	ldr	r3, [r2, #0]
   1da78:	6852      	ldr	r2, [r2, #4]
   1da7a:	18e3      	adds	r3, r4, r3
   1da7c:	eb45 0202 	adc.w	r2, r5, r2
   1da80:	f06f 0101 	mvn.w	r1, #1
   1da84:	1ace      	subs	r6, r1, r3
   1da86:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   1da8a:	4632      	mov	r2, r6
   1da8c:	463b      	mov	r3, r7
   1da8e:	2e01      	cmp	r6, #1
   1da90:	f177 0100 	sbcs.w	r1, r7, #0
   1da94:	dbb0      	blt.n	1d9f8 <z_add_timeout+0x30>
   1da96:	f8ca 2010 	str.w	r2, [sl, #16]
   1da9a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1da9e:	f7ff ff4b 	bl	1d938 <first>
   1daa2:	4684      	mov	ip, r0
   1daa4:	f1bc 0f00 	cmp.w	ip, #0
   1daa8:	d0c9      	beq.n	1da3e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   1daaa:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1daae:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1dab2:	e9cd 2300 	strd	r2, r3, [sp]
   1dab6:	4282      	cmp	r2, r0
   1dab8:	418b      	sbcs	r3, r1
   1daba:	dbad      	blt.n	1da18 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   1dabc:	9b00      	ldr	r3, [sp, #0]
   1dabe:	1a1a      	subs	r2, r3, r0
   1dac0:	9b01      	ldr	r3, [sp, #4]
   1dac2:	eb63 0301 	sbc.w	r3, r3, r1
   1dac6:	f8ca 2010 	str.w	r2, [sl, #16]
   1daca:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1dace:	4660      	mov	r0, ip
   1dad0:	f7ff ff3c 	bl	1d94c <next>
   1dad4:	4684      	mov	ip, r0
   1dad6:	e7e5      	b.n	1daa4 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1dad8:	4b0e      	ldr	r3, [pc, #56]	; (1db14 <z_add_timeout+0x14c>)
   1dada:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1dadc:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   1dae0:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   1dae4:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1dae8:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1daec:	e7aa      	b.n	1da44 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1daee:	f7ff ff45 	bl	1d97c <next_timeout>

			if (next_time == 0 ||
   1daf2:	4603      	mov	r3, r0
   1daf4:	b118      	cbz	r0, 1dafe <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1daf6:	4a08      	ldr	r2, [pc, #32]	; (1db18 <z_add_timeout+0x150>)
   1daf8:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1dafa:	4282      	cmp	r2, r0
   1dafc:	d0a6      	beq.n	1da4c <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1dafe:	2100      	movs	r1, #0
   1db00:	4618      	mov	r0, r3
   1db02:	f7fc ff67 	bl	1a9d4 <sys_clock_set_timeout>
   1db06:	e7a1      	b.n	1da4c <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1db08:	b003      	add	sp, #12
   1db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db0e:	bf00      	nop
   1db10:	20001f98 	.word	0x20001f98
   1db14:	200005e8 	.word	0x200005e8
   1db18:	20002fe8 	.word	0x20002fe8

0001db1c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db1e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1db20:	f7ff fbe4 	bl	1d2ec <z_time_slice>
	__asm__ volatile(
   1db24:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db28:	f3ef 8511 	mrs	r5, BASEPRI
   1db2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1db30:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1db34:	4b28      	ldr	r3, [pc, #160]	; (1dbd8 <sys_clock_announce+0xbc>)
   1db36:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1db38:	f7ff fefe 	bl	1d938 <first>
   1db3c:	4604      	mov	r4, r0
   1db3e:	b350      	cbz	r0, 1db96 <sys_clock_announce+0x7a>
   1db40:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1db44:	4b24      	ldr	r3, [pc, #144]	; (1dbd8 <sys_clock_announce+0xbc>)
   1db46:	681b      	ldr	r3, [r3, #0]
   1db48:	17d9      	asrs	r1, r3, #31
   1db4a:	42b3      	cmp	r3, r6
   1db4c:	eb71 0207 	sbcs.w	r2, r1, r7
   1db50:	db21      	blt.n	1db96 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1db52:	4a22      	ldr	r2, [pc, #136]	; (1dbdc <sys_clock_announce+0xc0>)
   1db54:	e9d2 0100 	ldrd	r0, r1, [r2]
   1db58:	1980      	adds	r0, r0, r6
   1db5a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1db5e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1db62:	1b9b      	subs	r3, r3, r6
   1db64:	4a1c      	ldr	r2, [pc, #112]	; (1dbd8 <sys_clock_announce+0xbc>)
   1db66:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   1db68:	2200      	movs	r2, #0
   1db6a:	2300      	movs	r3, #0
   1db6c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1db70:	4620      	mov	r0, r4
   1db72:	f007 fd94 	bl	2569e <remove_timeout>
	__asm__ volatile(
   1db76:	f385 8811 	msr	BASEPRI, r5
   1db7a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1db7e:	68a3      	ldr	r3, [r4, #8]
   1db80:	4620      	mov	r0, r4
   1db82:	4798      	blx	r3
	__asm__ volatile(
   1db84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db88:	f3ef 8511 	mrs	r5, BASEPRI
   1db8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1db90:	f3bf 8f6f 	isb	sy
   1db94:	e7d0      	b.n	1db38 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   1db96:	b144      	cbz	r4, 1dbaa <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1db98:	4b0f      	ldr	r3, [pc, #60]	; (1dbd8 <sys_clock_announce+0xbc>)
   1db9a:	6819      	ldr	r1, [r3, #0]
   1db9c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1dba0:	1a52      	subs	r2, r2, r1
   1dba2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   1dba6:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   1dbaa:	480c      	ldr	r0, [pc, #48]	; (1dbdc <sys_clock_announce+0xc0>)
   1dbac:	490a      	ldr	r1, [pc, #40]	; (1dbd8 <sys_clock_announce+0xbc>)
   1dbae:	680c      	ldr	r4, [r1, #0]
   1dbb0:	e9d0 2300 	ldrd	r2, r3, [r0]
   1dbb4:	1912      	adds	r2, r2, r4
   1dbb6:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   1dbba:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   1dbbe:	2400      	movs	r4, #0
   1dbc0:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1dbc2:	f7ff fedb 	bl	1d97c <next_timeout>
   1dbc6:	4621      	mov	r1, r4
   1dbc8:	f7fc ff04 	bl	1a9d4 <sys_clock_set_timeout>
	__asm__ volatile(
   1dbcc:	f385 8811 	msr	BASEPRI, r5
   1dbd0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1dbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dbd6:	bf00      	nop
   1dbd8:	20003028 	.word	0x20003028
   1dbdc:	20001f98 	.word	0x20001f98

0001dbe0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1dbe0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1dbe2:	2100      	movs	r1, #0
	__asm__ volatile(
   1dbe4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dbe8:	f3ef 8411 	mrs	r4, BASEPRI
   1dbec:	f383 8812 	msr	BASEPRI_MAX, r3
   1dbf0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1dbf4:	2200      	movs	r2, #0
   1dbf6:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1dbf8:	b969      	cbnz	r1, 1dc16 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1dbfa:	f7fc ff1f 	bl	1aa3c <sys_clock_elapsed>
   1dbfe:	4b07      	ldr	r3, [pc, #28]	; (1dc1c <sys_clock_tick_get+0x3c>)
   1dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc04:	1812      	adds	r2, r2, r0
   1dc06:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1dc0a:	f384 8811 	msr	BASEPRI, r4
   1dc0e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1dc12:	2101      	movs	r1, #1
   1dc14:	e7f0      	b.n	1dbf8 <sys_clock_tick_get+0x18>
	}
	return t;
}
   1dc16:	4610      	mov	r0, r2
   1dc18:	4619      	mov	r1, r3
   1dc1a:	bd10      	pop	{r4, pc}
   1dc1c:	20001f98 	.word	0x20001f98

0001dc20 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1dc20:	b570      	push	{r4, r5, r6, lr}
   1dc22:	4604      	mov	r4, r0
	__asm__ volatile(
   1dc24:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc28:	f3ef 8611 	mrs	r6, BASEPRI
   1dc2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc30:	f3bf 8f6f 	isb	sy
   1dc34:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1dc36:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1dc3a:	ea52 0103 	orrs.w	r1, r2, r3
   1dc3e:	d005      	beq.n	1dc4c <z_timer_expiration_handler+0x2c>
   1dc40:	f1b3 3fff 	cmp.w	r3, #4294967295
   1dc44:	bf08      	it	eq
   1dc46:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1dc4a:	d127      	bne.n	1dc9c <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1dc4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dc4e:	3301      	adds	r3, #1
   1dc50:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1dc52:	6a23      	ldr	r3, [r4, #32]
   1dc54:	b173      	cbz	r3, 1dc74 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   1dc56:	f386 8811 	msr	BASEPRI, r6
   1dc5a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1dc5e:	6a23      	ldr	r3, [r4, #32]
   1dc60:	4620      	mov	r0, r4
   1dc62:	4798      	blx	r3
	__asm__ volatile(
   1dc64:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc68:	f3ef 8511 	mrs	r5, BASEPRI
   1dc6c:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc70:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1dc74:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1dc78:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dc7a:	42a3      	cmp	r3, r4
   1dc7c:	d012      	beq.n	1dca4 <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1dc7e:	b18c      	cbz	r4, 1dca4 <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   1dc80:	4620      	mov	r0, r4
   1dc82:	f007 fb6d 	bl	25360 <z_unpend_thread_no_timeout>
   1dc86:	2300      	movs	r3, #0
   1dc88:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   1dc8c:	f385 8811 	msr	BASEPRI, r5
   1dc90:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   1dc94:	4620      	mov	r0, r4
   1dc96:	f007 fbc9 	bl	2542c <z_ready_thread>
}
   1dc9a:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1dc9c:	4904      	ldr	r1, [pc, #16]	; (1dcb0 <z_timer_expiration_handler+0x90>)
   1dc9e:	f7ff fe93 	bl	1d9c8 <z_add_timeout>
   1dca2:	e7d3      	b.n	1dc4c <z_timer_expiration_handler+0x2c>
   1dca4:	f385 8811 	msr	BASEPRI, r5
   1dca8:	f3bf 8f6f 	isb	sy
		return;
   1dcac:	e7f5      	b.n	1dc9a <z_timer_expiration_handler+0x7a>
   1dcae:	bf00      	nop
   1dcb0:	0001dc21 	.word	0x0001dc21

0001dcb4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1dcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcb8:	b087      	sub	sp, #28
   1dcba:	4614      	mov	r4, r2
   1dcbc:	461d      	mov	r5, r3
   1dcbe:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1dcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
   1dcc6:	bf08      	it	eq
   1dcc8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1dccc:	d035      	beq.n	1dd3a <z_impl_k_timer_start+0x86>
   1dcce:	4606      	mov	r6, r0
   1dcd0:	4613      	mov	r3, r2
   1dcd2:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1dcd4:	f1b9 3fff 	cmp.w	r9, #4294967295
   1dcd8:	bf08      	it	eq
   1dcda:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   1dcde:	d012      	beq.n	1dd06 <z_impl_k_timer_start+0x52>
   1dce0:	ea58 0109 	orrs.w	r1, r8, r9
   1dce4:	d00f      	beq.n	1dd06 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   1dce6:	f06f 0701 	mvn.w	r7, #1
   1dcea:	ebb7 0708 	subs.w	r7, r7, r8
   1dcee:	9702      	str	r7, [sp, #8]
   1dcf0:	f04f 31ff 	mov.w	r1, #4294967295
   1dcf4:	eb61 0709 	sbc.w	r7, r1, r9
   1dcf8:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1dcfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1dcfe:	2800      	cmp	r0, #0
   1dd00:	f171 0100 	sbcs.w	r1, r1, #0
   1dd04:	db1c      	blt.n	1dd40 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1dd06:	f06f 0101 	mvn.w	r1, #1
   1dd0a:	ebb1 0a03 	subs.w	sl, r1, r3
   1dd0e:	f04f 31ff 	mov.w	r1, #4294967295
   1dd12:	eb61 0b02 	sbc.w	fp, r1, r2
   1dd16:	f1ba 0f00 	cmp.w	sl, #0
   1dd1a:	f17b 0100 	sbcs.w	r1, fp, #0
   1dd1e:	db23      	blt.n	1dd68 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1dd20:	4630      	mov	r0, r6
   1dd22:	f007 fcd3 	bl	256cc <z_abort_timeout>
	timer->period = period;
   1dd26:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   1dd2a:	2300      	movs	r3, #0
   1dd2c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1dd2e:	4622      	mov	r2, r4
   1dd30:	462b      	mov	r3, r5
   1dd32:	4917      	ldr	r1, [pc, #92]	; (1dd90 <z_impl_k_timer_start+0xdc>)
   1dd34:	4630      	mov	r0, r6
   1dd36:	f7ff fe47 	bl	1d9c8 <z_add_timeout>
		     duration);
}
   1dd3a:	b007      	add	sp, #28
   1dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   1dd40:	f118 31ff 	adds.w	r1, r8, #4294967295
   1dd44:	9104      	str	r1, [sp, #16]
   1dd46:	f149 31ff 	adc.w	r1, r9, #4294967295
   1dd4a:	9105      	str	r1, [sp, #20]
   1dd4c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   1dd50:	4638      	mov	r0, r7
   1dd52:	4641      	mov	r1, r8
   1dd54:	2f01      	cmp	r7, #1
   1dd56:	f178 0700 	sbcs.w	r7, r8, #0
   1dd5a:	db02      	blt.n	1dd62 <z_impl_k_timer_start+0xae>
   1dd5c:	4680      	mov	r8, r0
   1dd5e:	4689      	mov	r9, r1
   1dd60:	e7d1      	b.n	1dd06 <z_impl_k_timer_start+0x52>
   1dd62:	2001      	movs	r0, #1
   1dd64:	2100      	movs	r1, #0
   1dd66:	e7f9      	b.n	1dd5c <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1dd68:	f113 33ff 	adds.w	r3, r3, #4294967295
   1dd6c:	9300      	str	r3, [sp, #0]
   1dd6e:	f142 33ff 	adc.w	r3, r2, #4294967295
   1dd72:	9301      	str	r3, [sp, #4]
   1dd74:	e9dd 0100 	ldrd	r0, r1, [sp]
   1dd78:	4602      	mov	r2, r0
   1dd7a:	460b      	mov	r3, r1
   1dd7c:	2800      	cmp	r0, #0
   1dd7e:	f171 0100 	sbcs.w	r1, r1, #0
   1dd82:	db02      	blt.n	1dd8a <z_impl_k_timer_start+0xd6>
   1dd84:	4614      	mov	r4, r2
   1dd86:	461d      	mov	r5, r3
   1dd88:	e7ca      	b.n	1dd20 <z_impl_k_timer_start+0x6c>
   1dd8a:	2200      	movs	r2, #0
   1dd8c:	4613      	mov	r3, r2
   1dd8e:	e7f9      	b.n	1dd84 <z_impl_k_timer_start+0xd0>
   1dd90:	0001dc21 	.word	0x0001dc21

0001dd94 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1dd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd98:	b08d      	sub	sp, #52	; 0x34
   1dd9a:	4605      	mov	r5, r0
   1dd9c:	9107      	str	r1, [sp, #28]
   1dd9e:	9202      	str	r2, [sp, #8]
   1dda0:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1dda2:	4ba4      	ldr	r3, [pc, #656]	; (1e034 <z_impl_k_poll+0x2a0>)
   1dda4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1dda8:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   1ddac:	2301      	movs	r3, #1
   1ddae:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   1ddb2:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1ddb6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1ddba:	4613      	mov	r3, r2
   1ddbc:	430b      	orrs	r3, r1
   1ddbe:	bf0c      	ite	eq
   1ddc0:	2301      	moveq	r3, #1
   1ddc2:	2300      	movne	r3, #0
   1ddc4:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   1ddc6:	2600      	movs	r6, #0
	int events_registered = 0;
   1ddc8:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   1ddca:	e02e      	b.n	1de2a <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   1ddcc:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1ddce:	689b      	ldr	r3, [r3, #8]
   1ddd0:	b1c3      	cbz	r3, 1de04 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1ddd2:	2302      	movs	r3, #2
   1ddd4:	9305      	str	r3, [sp, #20]
			return true;
   1ddd6:	2301      	movs	r3, #1
   1ddd8:	e014      	b.n	1de04 <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   1ddda:	6923      	ldr	r3, [r4, #16]
	return list->head;
   1dddc:	681b      	ldr	r3, [r3, #0]
   1ddde:	b18b      	cbz	r3, 1de04 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1dde0:	2304      	movs	r3, #4
   1dde2:	9305      	str	r3, [sp, #20]
			return true;
   1dde4:	2301      	movs	r3, #1
   1dde6:	e00d      	b.n	1de04 <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   1dde8:	6923      	ldr	r3, [r4, #16]
   1ddea:	689b      	ldr	r3, [r3, #8]
   1ddec:	b153      	cbz	r3, 1de04 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   1ddee:	2301      	movs	r3, #1
   1ddf0:	9305      	str	r3, [sp, #20]
   1ddf2:	e007      	b.n	1de04 <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   1ddf4:	6923      	ldr	r3, [r4, #16]
   1ddf6:	6a1b      	ldr	r3, [r3, #32]
   1ddf8:	b123      	cbz	r3, 1de04 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1ddfa:	2310      	movs	r3, #16
   1ddfc:	9305      	str	r3, [sp, #20]
			return true;
   1ddfe:	2301      	movs	r3, #1
   1de00:	e000      	b.n	1de04 <z_impl_k_poll+0x70>
	switch (event->type) {
   1de02:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   1de04:	2b00      	cmp	r3, #0
   1de06:	d03d      	beq.n	1de84 <z_impl_k_poll+0xf0>
	event->poller = NULL;
   1de08:	2100      	movs	r1, #0
   1de0a:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1de0c:	68e3      	ldr	r3, [r4, #12]
   1de0e:	f3c3 3245 	ubfx	r2, r3, #13, #6
   1de12:	9805      	ldr	r0, [sp, #20]
   1de14:	4302      	orrs	r2, r0
   1de16:	f362 3352 	bfi	r3, r2, #13, #6
   1de1a:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1de1c:	7039      	strb	r1, [r7, #0]
   1de1e:	9b08      	ldr	r3, [sp, #32]
   1de20:	f383 8811 	msr	BASEPRI, r3
   1de24:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1de28:	3601      	adds	r6, #1
   1de2a:	9b07      	ldr	r3, [sp, #28]
   1de2c:	42b3      	cmp	r3, r6
   1de2e:	f340 81bf 	ble.w	1e1b0 <z_impl_k_poll+0x41c>
	__asm__ volatile(
   1de32:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de36:	f3ef 8211 	mrs	r2, BASEPRI
   1de3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1de3e:	f3bf 8f6f 	isb	sy
   1de42:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   1de44:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1de48:	00a3      	lsls	r3, r4, #2
   1de4a:	9309      	str	r3, [sp, #36]	; 0x24
   1de4c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   1de50:	7b63      	ldrb	r3, [r4, #13]
   1de52:	f003 031f 	and.w	r3, r3, #31
   1de56:	3b01      	subs	r3, #1
   1de58:	2b07      	cmp	r3, #7
   1de5a:	d8d2      	bhi.n	1de02 <z_impl_k_poll+0x6e>
   1de5c:	a201      	add	r2, pc, #4	; (adr r2, 1de64 <z_impl_k_poll+0xd0>)
   1de5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1de62:	bf00      	nop
   1de64:	0001dde9 	.word	0x0001dde9
   1de68:	0001ddcd 	.word	0x0001ddcd
   1de6c:	0001de03 	.word	0x0001de03
   1de70:	0001dddb 	.word	0x0001dddb
   1de74:	0001de03 	.word	0x0001de03
   1de78:	0001de03 	.word	0x0001de03
   1de7c:	0001de03 	.word	0x0001de03
   1de80:	0001ddf5 	.word	0x0001ddf5
		} else if (!just_check && poller->is_polling) {
   1de84:	9b06      	ldr	r3, [sp, #24]
   1de86:	2b00      	cmp	r3, #0
   1de88:	d1c9      	bne.n	1de1e <z_impl_k_poll+0x8a>
   1de8a:	783b      	ldrb	r3, [r7, #0]
   1de8c:	2b00      	cmp	r3, #0
   1de8e:	d0c6      	beq.n	1de1e <z_impl_k_poll+0x8a>
	switch (event->type) {
   1de90:	7b63      	ldrb	r3, [r4, #13]
   1de92:	f003 031f 	and.w	r3, r3, #31
   1de96:	3b01      	subs	r3, #1
   1de98:	2b07      	cmp	r3, #7
   1de9a:	d846      	bhi.n	1df2a <z_impl_k_poll+0x196>
   1de9c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1dea0:	000800cc 	.word	0x000800cc
   1dea4:	006a0045 	.word	0x006a0045
   1dea8:	00450045 	.word	0x00450045
   1deac:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   1deb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1deb4:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1deb8:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1debc:	4598      	cmp	r8, r3
   1debe:	d02b      	beq.n	1df18 <z_impl_k_poll+0x184>
   1dec0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1dec4:	b343      	cbz	r3, 1df18 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1dec6:	6898      	ldr	r0, [r3, #8]
   1dec8:	f007 fcc0 	bl	2584c <poller_thread>
   1decc:	900b      	str	r0, [sp, #44]	; 0x2c
   1dece:	4638      	mov	r0, r7
   1ded0:	f007 fcbc 	bl	2584c <poller_thread>
   1ded4:	4601      	mov	r1, r0
   1ded6:	900a      	str	r0, [sp, #40]	; 0x28
   1ded8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1deda:	f007 fa37 	bl	2534c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1dede:	2800      	cmp	r0, #0
   1dee0:	dc1a      	bgt.n	1df18 <z_impl_k_poll+0x184>
	return list->head == list;
   1dee2:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dee6:	45d0      	cmp	r8, sl
   1dee8:	d02f      	beq.n	1df4a <z_impl_k_poll+0x1b6>
   1deea:	4653      	mov	r3, sl
   1deec:	46a2      	mov	sl, r4
   1deee:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1def0:	b38c      	cbz	r4, 1df56 <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   1def2:	68a0      	ldr	r0, [r4, #8]
   1def4:	f007 fcaa 	bl	2584c <poller_thread>
   1def8:	4601      	mov	r1, r0
   1defa:	980a      	ldr	r0, [sp, #40]	; 0x28
   1defc:	f007 fa26 	bl	2534c <z_sched_prio_cmp>
   1df00:	2800      	cmp	r0, #0
   1df02:	dc16      	bgt.n	1df32 <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1df04:	b34c      	cbz	r4, 1df5a <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   1df06:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1df0a:	429c      	cmp	r4, r3
   1df0c:	d030      	beq.n	1df70 <z_impl_k_poll+0x1dc>
   1df0e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1df10:	2c00      	cmp	r4, #0
   1df12:	d1ed      	bne.n	1def0 <z_impl_k_poll+0x15c>
   1df14:	4654      	mov	r4, sl
   1df16:	e021      	b.n	1df5c <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   1df18:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1df1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1df1e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1df22:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1df24:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1df26:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   1df2a:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   1df2c:	f10b 0b01 	add.w	fp, fp, #1
   1df30:	e775      	b.n	1de1e <z_impl_k_poll+0x8a>
   1df32:	4623      	mov	r3, r4
   1df34:	4654      	mov	r4, sl
   1df36:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1df38:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1df3a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1df3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1df3e:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1df42:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1df44:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1df48:	e7ef      	b.n	1df2a <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1df4a:	f04f 0a00 	mov.w	sl, #0
   1df4e:	4653      	mov	r3, sl
   1df50:	46a2      	mov	sl, r4
   1df52:	461c      	mov	r4, r3
   1df54:	e7cc      	b.n	1def0 <z_impl_k_poll+0x15c>
   1df56:	4654      	mov	r4, sl
   1df58:	e000      	b.n	1df5c <z_impl_k_poll+0x1c8>
   1df5a:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1df5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1df60:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1df62:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1df66:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1df68:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1df6a:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1df6e:	e7dc      	b.n	1df2a <z_impl_k_poll+0x196>
   1df70:	4654      	mov	r4, sl
   1df72:	e7f3      	b.n	1df5c <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   1df74:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1df78:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1df7c:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1df80:	4598      	cmp	r8, r3
   1df82:	d02b      	beq.n	1dfdc <z_impl_k_poll+0x248>
   1df84:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1df88:	b343      	cbz	r3, 1dfdc <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1df8a:	6898      	ldr	r0, [r3, #8]
   1df8c:	f007 fc5e 	bl	2584c <poller_thread>
   1df90:	900b      	str	r0, [sp, #44]	; 0x2c
   1df92:	4638      	mov	r0, r7
   1df94:	f007 fc5a 	bl	2584c <poller_thread>
   1df98:	4601      	mov	r1, r0
   1df9a:	900a      	str	r0, [sp, #40]	; 0x28
   1df9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1df9e:	f007 f9d5 	bl	2534c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1dfa2:	2800      	cmp	r0, #0
   1dfa4:	dc1a      	bgt.n	1dfdc <z_impl_k_poll+0x248>
	return list->head == list;
   1dfa6:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dfaa:	45d0      	cmp	r8, sl
   1dfac:	d02c      	beq.n	1e008 <z_impl_k_poll+0x274>
   1dfae:	4653      	mov	r3, sl
   1dfb0:	46a2      	mov	sl, r4
   1dfb2:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1dfb4:	b374      	cbz	r4, 1e014 <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   1dfb6:	68a0      	ldr	r0, [r4, #8]
   1dfb8:	f007 fc48 	bl	2584c <poller_thread>
   1dfbc:	4601      	mov	r1, r0
   1dfbe:	980a      	ldr	r0, [sp, #40]	; 0x28
   1dfc0:	f007 f9c4 	bl	2534c <z_sched_prio_cmp>
   1dfc4:	2800      	cmp	r0, #0
   1dfc6:	dc13      	bgt.n	1dff0 <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1dfc8:	b334      	cbz	r4, 1e018 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   1dfca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1dfce:	429c      	cmp	r4, r3
   1dfd0:	d02d      	beq.n	1e02e <z_impl_k_poll+0x29a>
   1dfd2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1dfd4:	2c00      	cmp	r4, #0
   1dfd6:	d1ed      	bne.n	1dfb4 <z_impl_k_poll+0x220>
   1dfd8:	4654      	mov	r4, sl
   1dfda:	e01e      	b.n	1e01a <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   1dfdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1dfe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dfe2:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1dfe6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1dfe8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1dfea:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1dfee:	e79c      	b.n	1df2a <z_impl_k_poll+0x196>
   1dff0:	4623      	mov	r3, r4
   1dff2:	4654      	mov	r4, sl
   1dff4:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1dff6:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1dff8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1dffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dffc:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1e000:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e002:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1e006:	e790      	b.n	1df2a <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e008:	f04f 0a00 	mov.w	sl, #0
   1e00c:	4653      	mov	r3, sl
   1e00e:	46a2      	mov	sl, r4
   1e010:	461c      	mov	r4, r3
   1e012:	e7cf      	b.n	1dfb4 <z_impl_k_poll+0x220>
   1e014:	4654      	mov	r4, sl
   1e016:	e000      	b.n	1e01a <z_impl_k_poll+0x286>
   1e018:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1e01a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e020:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e024:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e026:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e028:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1e02c:	e77d      	b.n	1df2a <z_impl_k_poll+0x196>
   1e02e:	4654      	mov	r4, sl
   1e030:	e7f3      	b.n	1e01a <z_impl_k_poll+0x286>
   1e032:	bf00      	nop
   1e034:	20002fe8 	.word	0x20002fe8
		add_event(&event->signal->poll_events, event, poller);
   1e038:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   1e03c:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e040:	4598      	cmp	r8, r3
   1e042:	d02b      	beq.n	1e09c <z_impl_k_poll+0x308>
   1e044:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1e048:	b343      	cbz	r3, 1e09c <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e04a:	6898      	ldr	r0, [r3, #8]
   1e04c:	f007 fbfe 	bl	2584c <poller_thread>
   1e050:	4682      	mov	sl, r0
   1e052:	4638      	mov	r0, r7
   1e054:	f007 fbfa 	bl	2584c <poller_thread>
   1e058:	4601      	mov	r1, r0
   1e05a:	900a      	str	r0, [sp, #40]	; 0x28
   1e05c:	4650      	mov	r0, sl
   1e05e:	f007 f975 	bl	2534c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e062:	2800      	cmp	r0, #0
   1e064:	dc1a      	bgt.n	1e09c <z_impl_k_poll+0x308>
	return list->head == list;
   1e066:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e06a:	45d0      	cmp	r8, sl
   1e06c:	d02c      	beq.n	1e0c8 <z_impl_k_poll+0x334>
   1e06e:	4653      	mov	r3, sl
   1e070:	46a2      	mov	sl, r4
   1e072:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e074:	b374      	cbz	r4, 1e0d4 <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e076:	68a0      	ldr	r0, [r4, #8]
   1e078:	f007 fbe8 	bl	2584c <poller_thread>
   1e07c:	4601      	mov	r1, r0
   1e07e:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e080:	f007 f964 	bl	2534c <z_sched_prio_cmp>
   1e084:	2800      	cmp	r0, #0
   1e086:	dc13      	bgt.n	1e0b0 <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e088:	b334      	cbz	r4, 1e0d8 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   1e08a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e08e:	429c      	cmp	r4, r3
   1e090:	d02d      	beq.n	1e0ee <z_impl_k_poll+0x35a>
   1e092:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e094:	2c00      	cmp	r4, #0
   1e096:	d1ed      	bne.n	1e074 <z_impl_k_poll+0x2e0>
   1e098:	4654      	mov	r4, sl
   1e09a:	e01e      	b.n	1e0da <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   1e09c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e0a2:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e0a6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e0a8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e0aa:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1e0ae:	e73c      	b.n	1df2a <z_impl_k_poll+0x196>
   1e0b0:	4623      	mov	r3, r4
   1e0b2:	4654      	mov	r4, sl
   1e0b4:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1e0b6:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1e0b8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e0ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e0bc:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1e0c0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e0c2:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1e0c6:	e730      	b.n	1df2a <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e0c8:	f04f 0a00 	mov.w	sl, #0
   1e0cc:	4653      	mov	r3, sl
   1e0ce:	46a2      	mov	sl, r4
   1e0d0:	461c      	mov	r4, r3
   1e0d2:	e7cf      	b.n	1e074 <z_impl_k_poll+0x2e0>
   1e0d4:	4654      	mov	r4, sl
   1e0d6:	e000      	b.n	1e0da <z_impl_k_poll+0x346>
   1e0d8:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1e0da:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e0e0:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e0e4:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e0e6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e0e8:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1e0ec:	e71d      	b.n	1df2a <z_impl_k_poll+0x196>
   1e0ee:	4654      	mov	r4, sl
   1e0f0:	e7f3      	b.n	1e0da <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   1e0f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1e0f6:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   1e0fa:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e0fe:	4598      	cmp	r8, r3
   1e100:	d02b      	beq.n	1e15a <z_impl_k_poll+0x3c6>
   1e102:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1e106:	b343      	cbz	r3, 1e15a <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1e108:	6898      	ldr	r0, [r3, #8]
   1e10a:	f007 fb9f 	bl	2584c <poller_thread>
   1e10e:	900b      	str	r0, [sp, #44]	; 0x2c
   1e110:	4638      	mov	r0, r7
   1e112:	f007 fb9b 	bl	2584c <poller_thread>
   1e116:	4601      	mov	r1, r0
   1e118:	900a      	str	r0, [sp, #40]	; 0x28
   1e11a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e11c:	f007 f916 	bl	2534c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1e120:	2800      	cmp	r0, #0
   1e122:	dc1a      	bgt.n	1e15a <z_impl_k_poll+0x3c6>
	return list->head == list;
   1e124:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e128:	45d0      	cmp	r8, sl
   1e12a:	d02c      	beq.n	1e186 <z_impl_k_poll+0x3f2>
   1e12c:	4653      	mov	r3, sl
   1e12e:	46a2      	mov	sl, r4
   1e130:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e132:	b374      	cbz	r4, 1e192 <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1e134:	68a0      	ldr	r0, [r4, #8]
   1e136:	f007 fb89 	bl	2584c <poller_thread>
   1e13a:	4601      	mov	r1, r0
   1e13c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e13e:	f007 f905 	bl	2534c <z_sched_prio_cmp>
   1e142:	2800      	cmp	r0, #0
   1e144:	dc13      	bgt.n	1e16e <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e146:	b334      	cbz	r4, 1e196 <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   1e148:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e14c:	429c      	cmp	r4, r3
   1e14e:	d02d      	beq.n	1e1ac <z_impl_k_poll+0x418>
   1e150:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e152:	2c00      	cmp	r4, #0
   1e154:	d1ed      	bne.n	1e132 <z_impl_k_poll+0x39e>
   1e156:	4654      	mov	r4, sl
   1e158:	e01e      	b.n	1e198 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   1e15a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e160:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e164:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e166:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e168:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1e16c:	e6dd      	b.n	1df2a <z_impl_k_poll+0x196>
   1e16e:	4623      	mov	r3, r4
   1e170:	4654      	mov	r4, sl
   1e172:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1e174:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1e176:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1e178:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e17a:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1e17e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e180:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1e184:	e6d1      	b.n	1df2a <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e186:	f04f 0a00 	mov.w	sl, #0
   1e18a:	4653      	mov	r3, sl
   1e18c:	46a2      	mov	sl, r4
   1e18e:	461c      	mov	r4, r3
   1e190:	e7cf      	b.n	1e132 <z_impl_k_poll+0x39e>
   1e192:	4654      	mov	r4, sl
   1e194:	e000      	b.n	1e198 <z_impl_k_poll+0x404>
   1e196:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1e198:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1e19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e19e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1e1a2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1e1a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e1a6:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1e1aa:	e6be      	b.n	1df2a <z_impl_k_poll+0x196>
   1e1ac:	4654      	mov	r4, sl
   1e1ae:	e7f3      	b.n	1e198 <z_impl_k_poll+0x404>
   1e1b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1b4:	f3ef 8111 	mrs	r1, BASEPRI
   1e1b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1bc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1e1c0:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   1e1c4:	b1cb      	cbz	r3, 1e1fa <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1e1c6:	2300      	movs	r3, #0
   1e1c8:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e1cc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1e1d0:	4323      	orrs	r3, r4
   1e1d2:	d045      	beq.n	1e260 <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1e1d4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1e1d8:	e9cd 3400 	strd	r3, r4, [sp]
   1e1dc:	4a3c      	ldr	r2, [pc, #240]	; (1e2d0 <z_impl_k_poll+0x53c>)
   1e1de:	483d      	ldr	r0, [pc, #244]	; (1e2d4 <z_impl_k_poll+0x540>)
   1e1e0:	f7ff f94a 	bl	1d478 <z_pend_curr>
   1e1e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1e8:	f3ef 8c11 	mrs	ip, BASEPRI
   1e1ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1f0:	f3bf 8f6f 	isb	sy
   1e1f4:	4661      	mov	r1, ip
	while (num_events--) {
   1e1f6:	465b      	mov	r3, fp
   1e1f8:	e04e      	b.n	1e298 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   1e1fa:	4608      	mov	r0, r1
	while (num_events--) {
   1e1fc:	465b      	mov	r3, fp
   1e1fe:	e014      	b.n	1e22a <z_impl_k_poll+0x496>
	return node->next != NULL;
   1e200:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1e202:	b12a      	cbz	r2, 1e210 <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1e204:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1e206:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1e208:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1e20a:	2200      	movs	r2, #0
   1e20c:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   1e20e:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   1e210:	f380 8811 	msr	BASEPRI, r0
   1e214:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e218:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e21c:	f3ef 8011 	mrs	r0, BASEPRI
   1e220:	f383 8812 	msr	BASEPRI_MAX, r3
   1e224:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1e228:	463b      	mov	r3, r7
   1e22a:	1e5f      	subs	r7, r3, #1
   1e22c:	b193      	cbz	r3, 1e254 <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   1e22e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1e232:	009e      	lsls	r6, r3, #2
   1e234:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1e238:	2200      	movs	r2, #0
   1e23a:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1e23c:	7b5a      	ldrb	r2, [r3, #13]
   1e23e:	f002 021f 	and.w	r2, r2, #31
   1e242:	2a08      	cmp	r2, #8
   1e244:	d8e4      	bhi.n	1e210 <z_impl_k_poll+0x47c>
   1e246:	2401      	movs	r4, #1
   1e248:	fa04 f202 	lsl.w	r2, r4, r2
   1e24c:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1e250:	d0de      	beq.n	1e210 <z_impl_k_poll+0x47c>
   1e252:	e7d5      	b.n	1e200 <z_impl_k_poll+0x46c>
	__asm__ volatile(
   1e254:	f381 8811 	msr	BASEPRI, r1
   1e258:	f3bf 8f6f 	isb	sy
		return 0;
   1e25c:	4618      	mov	r0, r3
   1e25e:	e034      	b.n	1e2ca <z_impl_k_poll+0x536>
   1e260:	f381 8811 	msr	BASEPRI, r1
   1e264:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1e268:	f06f 000a 	mvn.w	r0, #10
   1e26c:	e02d      	b.n	1e2ca <z_impl_k_poll+0x536>
	return node->next != NULL;
   1e26e:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1e270:	b12a      	cbz	r2, 1e27e <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   1e272:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   1e274:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   1e276:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   1e278:	2200      	movs	r2, #0
   1e27a:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   1e27c:	605a      	str	r2, [r3, #4]
   1e27e:	f381 8811 	msr	BASEPRI, r1
   1e282:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e286:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e28a:	f3ef 8111 	mrs	r1, BASEPRI
   1e28e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e292:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1e296:	4623      	mov	r3, r4
   1e298:	1e5c      	subs	r4, r3, #1
   1e29a:	b193      	cbz	r3, 1e2c2 <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   1e29c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e2a0:	009f      	lsls	r7, r3, #2
   1e2a2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1e2a6:	2200      	movs	r2, #0
   1e2a8:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1e2aa:	7b5a      	ldrb	r2, [r3, #13]
   1e2ac:	f002 021f 	and.w	r2, r2, #31
   1e2b0:	2a08      	cmp	r2, #8
   1e2b2:	d8e4      	bhi.n	1e27e <z_impl_k_poll+0x4ea>
   1e2b4:	2601      	movs	r6, #1
   1e2b6:	fa06 f202 	lsl.w	r2, r6, r2
   1e2ba:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1e2be:	d0de      	beq.n	1e27e <z_impl_k_poll+0x4ea>
   1e2c0:	e7d5      	b.n	1e26e <z_impl_k_poll+0x4da>
	__asm__ volatile(
   1e2c2:	f38c 8811 	msr	BASEPRI, ip
   1e2c6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1e2ca:	b00d      	add	sp, #52	; 0x34
   1e2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2d0:	200005f0 	.word	0x200005f0
   1e2d4:	2000302c 	.word	0x2000302c

0001e2d8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1e2d8:	b538      	push	{r3, r4, r5, lr}
   1e2da:	4603      	mov	r3, r0
	__asm__ volatile(
   1e2dc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e2e0:	f3ef 8511 	mrs	r5, BASEPRI
   1e2e4:	f382 8812 	msr	BASEPRI_MAX, r2
   1e2e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1e2ec:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1e2ee:	2201      	movs	r2, #1
   1e2f0:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1e2f2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1e2f4:	4283      	cmp	r3, r0
   1e2f6:	d011      	beq.n	1e31c <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   1e2f8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1e2fa:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1e2fc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e2fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e300:	2300      	movs	r3, #0
   1e302:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1e304:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   1e306:	b148      	cbz	r0, 1e31c <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1e308:	2101      	movs	r1, #1
   1e30a:	f007 faef 	bl	258ec <signal_poll_event>
   1e30e:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1e310:	4629      	mov	r1, r5
   1e312:	4805      	ldr	r0, [pc, #20]	; (1e328 <z_impl_k_poll_signal_raise+0x50>)
   1e314:	f7fe ff4c 	bl	1d1b0 <z_reschedule>
	return rc;
}
   1e318:	4620      	mov	r0, r4
   1e31a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e31c:	f385 8811 	msr	BASEPRI, r5
   1e320:	f3bf 8f6f 	isb	sy
		return 0;
   1e324:	2400      	movs	r4, #0
   1e326:	e7f7      	b.n	1e318 <z_impl_k_poll_signal_raise+0x40>
   1e328:	2000302c 	.word	0x2000302c

0001e32c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1e32c:	b538      	push	{r3, r4, r5, lr}
   1e32e:	4604      	mov	r4, r0
   1e330:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1e332:	f006 fd9a 	bl	24e6a <k_is_in_isr>
   1e336:	b948      	cbnz	r0, 1e34c <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1e338:	4b05      	ldr	r3, [pc, #20]	; (1e350 <z_thread_aligned_alloc+0x24>)
   1e33a:	689b      	ldr	r3, [r3, #8]
   1e33c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1e340:	b118      	cbz	r0, 1e34a <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1e342:	462a      	mov	r2, r5
   1e344:	4621      	mov	r1, r4
   1e346:	f007 fb1a 	bl	2597e <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1e34a:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1e34c:	4801      	ldr	r0, [pc, #4]	; (1e354 <z_thread_aligned_alloc+0x28>)
   1e34e:	e7f7      	b.n	1e340 <z_thread_aligned_alloc+0x14>
   1e350:	20002fe8 	.word	0x20002fe8
   1e354:	200006dc 	.word	0x200006dc

0001e358 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1e358:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1e35a:	4a03      	ldr	r2, [pc, #12]	; (1e368 <boot_banner+0x10>)
   1e35c:	4903      	ldr	r1, [pc, #12]	; (1e36c <boot_banner+0x14>)
   1e35e:	4804      	ldr	r0, [pc, #16]	; (1e370 <boot_banner+0x18>)
   1e360:	f002 fd06 	bl	20d70 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1e364:	bd08      	pop	{r3, pc}
   1e366:	bf00      	nop
   1e368:	000261b0 	.word	0x000261b0
   1e36c:	00028018 	.word	0x00028018
   1e370:	00028028 	.word	0x00028028

0001e374 <nrf_cc3xx_platform_init>:
   1e374:	b510      	push	{r4, lr}
   1e376:	4c0c      	ldr	r4, [pc, #48]	; (1e3a8 <nrf_cc3xx_platform_init+0x34>)
   1e378:	6823      	ldr	r3, [r4, #0]
   1e37a:	b113      	cbz	r3, 1e382 <nrf_cc3xx_platform_init+0xe>
   1e37c:	4b0b      	ldr	r3, [pc, #44]	; (1e3ac <nrf_cc3xx_platform_init+0x38>)
   1e37e:	681b      	ldr	r3, [r3, #0]
   1e380:	b92b      	cbnz	r3, 1e38e <nrf_cc3xx_platform_init+0x1a>
   1e382:	f000 fe73 	bl	1f06c <CC_LibInit>
   1e386:	b930      	cbnz	r0, 1e396 <nrf_cc3xx_platform_init+0x22>
   1e388:	4b08      	ldr	r3, [pc, #32]	; (1e3ac <nrf_cc3xx_platform_init+0x38>)
   1e38a:	2201      	movs	r2, #1
   1e38c:	601a      	str	r2, [r3, #0]
   1e38e:	2301      	movs	r3, #1
   1e390:	6023      	str	r3, [r4, #0]
   1e392:	2000      	movs	r0, #0
   1e394:	bd10      	pop	{r4, pc}
   1e396:	3801      	subs	r0, #1
   1e398:	2806      	cmp	r0, #6
   1e39a:	d901      	bls.n	1e3a0 <nrf_cc3xx_platform_init+0x2c>
   1e39c:	4804      	ldr	r0, [pc, #16]	; (1e3b0 <nrf_cc3xx_platform_init+0x3c>)
   1e39e:	bd10      	pop	{r4, pc}
   1e3a0:	4b04      	ldr	r3, [pc, #16]	; (1e3b4 <nrf_cc3xx_platform_init+0x40>)
   1e3a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e3a6:	bd10      	pop	{r4, pc}
   1e3a8:	2000302c 	.word	0x2000302c
   1e3ac:	20003030 	.word	0x20003030
   1e3b0:	ffff8ffe 	.word	0xffff8ffe
   1e3b4:	00028050 	.word	0x00028050

0001e3b8 <nrf_cc3xx_platform_abort>:
   1e3b8:	f3bf 8f4f 	dsb	sy
   1e3bc:	4905      	ldr	r1, [pc, #20]	; (1e3d4 <nrf_cc3xx_platform_abort+0x1c>)
   1e3be:	4b06      	ldr	r3, [pc, #24]	; (1e3d8 <nrf_cc3xx_platform_abort+0x20>)
   1e3c0:	68ca      	ldr	r2, [r1, #12]
   1e3c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e3c6:	4313      	orrs	r3, r2
   1e3c8:	60cb      	str	r3, [r1, #12]
   1e3ca:	f3bf 8f4f 	dsb	sy
   1e3ce:	bf00      	nop
   1e3d0:	e7fd      	b.n	1e3ce <nrf_cc3xx_platform_abort+0x16>
   1e3d2:	bf00      	nop
   1e3d4:	e000ed00 	.word	0xe000ed00
   1e3d8:	05fa0004 	.word	0x05fa0004

0001e3dc <CC_PalAbort>:
   1e3dc:	b4f0      	push	{r4, r5, r6, r7}
   1e3de:	4f09      	ldr	r7, [pc, #36]	; (1e404 <CC_PalAbort+0x28>)
   1e3e0:	4e09      	ldr	r6, [pc, #36]	; (1e408 <CC_PalAbort+0x2c>)
   1e3e2:	4c0a      	ldr	r4, [pc, #40]	; (1e40c <CC_PalAbort+0x30>)
   1e3e4:	4a0a      	ldr	r2, [pc, #40]	; (1e410 <CC_PalAbort+0x34>)
   1e3e6:	4d0b      	ldr	r5, [pc, #44]	; (1e414 <CC_PalAbort+0x38>)
   1e3e8:	490b      	ldr	r1, [pc, #44]	; (1e418 <CC_PalAbort+0x3c>)
   1e3ea:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1e3ee:	603b      	str	r3, [r7, #0]
   1e3f0:	6852      	ldr	r2, [r2, #4]
   1e3f2:	6033      	str	r3, [r6, #0]
   1e3f4:	6023      	str	r3, [r4, #0]
   1e3f6:	2400      	movs	r4, #0
   1e3f8:	602b      	str	r3, [r5, #0]
   1e3fa:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1e3fe:	bcf0      	pop	{r4, r5, r6, r7}
   1e400:	4710      	bx	r2
   1e402:	bf00      	nop
   1e404:	5002b400 	.word	0x5002b400
   1e408:	5002b404 	.word	0x5002b404
   1e40c:	5002b408 	.word	0x5002b408
   1e410:	200005f8 	.word	0x200005f8
   1e414:	5002b40c 	.word	0x5002b40c
   1e418:	5002a000 	.word	0x5002a000

0001e41c <nrf_cc3xx_platform_set_abort>:
   1e41c:	e9d0 1200 	ldrd	r1, r2, [r0]
   1e420:	4b01      	ldr	r3, [pc, #4]	; (1e428 <nrf_cc3xx_platform_set_abort+0xc>)
   1e422:	e9c3 1200 	strd	r1, r2, [r3]
   1e426:	4770      	bx	lr
   1e428:	200005f8 	.word	0x200005f8

0001e42c <nrf_cc3xx_platform_ctr_drbg_init>:
   1e42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e430:	4c15      	ldr	r4, [pc, #84]	; (1e488 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1e432:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1e490 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1e436:	2800      	cmp	r0, #0
   1e438:	bf18      	it	ne
   1e43a:	4604      	movne	r4, r0
   1e43c:	b083      	sub	sp, #12
   1e43e:	6820      	ldr	r0, [r4, #0]
   1e440:	4540      	cmp	r0, r8
   1e442:	d01d      	beq.n	1e480 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1e444:	460d      	mov	r5, r1
   1e446:	4620      	mov	r0, r4
   1e448:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1e44c:	f104 0904 	add.w	r9, r4, #4
   1e450:	4616      	mov	r6, r2
   1e452:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1e456:	f000 f8d3 	bl	1e600 <mbedtls_platform_zeroize>
   1e45a:	4648      	mov	r0, r9
   1e45c:	f000 fcf2 	bl	1ee44 <cc_mbedtls_entropy_init>
   1e460:	4638      	mov	r0, r7
   1e462:	f000 fb1f 	bl	1eaa4 <cc_mbedtls_ctr_drbg_init>
   1e466:	4909      	ldr	r1, [pc, #36]	; (1e48c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1e468:	9600      	str	r6, [sp, #0]
   1e46a:	464a      	mov	r2, r9
   1e46c:	4638      	mov	r0, r7
   1e46e:	462b      	mov	r3, r5
   1e470:	f000 fb2e 	bl	1ead0 <cc_mbedtls_ctr_drbg_seed>
   1e474:	b908      	cbnz	r0, 1e47a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1e476:	f8c4 8000 	str.w	r8, [r4]
   1e47a:	b003      	add	sp, #12
   1e47c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e480:	2000      	movs	r0, #0
   1e482:	b003      	add	sp, #12
   1e484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e488:	20003a10 	.word	0x20003a10
   1e48c:	0001eec1 	.word	0x0001eec1
   1e490:	5ac9bca5 	.word	0x5ac9bca5

0001e494 <nrf_cc3xx_platform_ctr_drbg_get>:
   1e494:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e496:	4c0d      	ldr	r4, [pc, #52]	; (1e4cc <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1e498:	4e0d      	ldr	r6, [pc, #52]	; (1e4d0 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1e49a:	2800      	cmp	r0, #0
   1e49c:	bf08      	it	eq
   1e49e:	4620      	moveq	r0, r4
   1e4a0:	b083      	sub	sp, #12
   1e4a2:	6807      	ldr	r7, [r0, #0]
   1e4a4:	42b7      	cmp	r7, r6
   1e4a6:	d10e      	bne.n	1e4c6 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1e4a8:	2600      	movs	r6, #0
   1e4aa:	461d      	mov	r5, r3
   1e4ac:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1e4b0:	9600      	str	r6, [sp, #0]
   1e4b2:	4633      	mov	r3, r6
   1e4b4:	4614      	mov	r4, r2
   1e4b6:	f000 fb57 	bl	1eb68 <cc_mbedtls_ctr_drbg_random_with_add>
   1e4ba:	2800      	cmp	r0, #0
   1e4bc:	bf18      	it	ne
   1e4be:	4634      	movne	r4, r6
   1e4c0:	602c      	str	r4, [r5, #0]
   1e4c2:	b003      	add	sp, #12
   1e4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e4c6:	4803      	ldr	r0, [pc, #12]	; (1e4d4 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1e4c8:	e7fb      	b.n	1e4c2 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1e4ca:	bf00      	nop
   1e4cc:	20003a10 	.word	0x20003a10
   1e4d0:	5ac9bca5 	.word	0x5ac9bca5
   1e4d4:	ffff8fe8 	.word	0xffff8fe8

0001e4d8 <mutex_free>:
   1e4d8:	b510      	push	{r4, lr}
   1e4da:	4604      	mov	r4, r0
   1e4dc:	b130      	cbz	r0, 1e4ec <mutex_free+0x14>
   1e4de:	6863      	ldr	r3, [r4, #4]
   1e4e0:	06db      	lsls	r3, r3, #27
   1e4e2:	d502      	bpl.n	1e4ea <mutex_free+0x12>
   1e4e4:	2300      	movs	r3, #0
   1e4e6:	6023      	str	r3, [r4, #0]
   1e4e8:	6063      	str	r3, [r4, #4]
   1e4ea:	bd10      	pop	{r4, pc}
   1e4ec:	4b02      	ldr	r3, [pc, #8]	; (1e4f8 <mutex_free+0x20>)
   1e4ee:	4803      	ldr	r0, [pc, #12]	; (1e4fc <mutex_free+0x24>)
   1e4f0:	685b      	ldr	r3, [r3, #4]
   1e4f2:	4798      	blx	r3
   1e4f4:	e7f3      	b.n	1e4de <mutex_free+0x6>
   1e4f6:	bf00      	nop
   1e4f8:	200005f8 	.word	0x200005f8
   1e4fc:	0002806c 	.word	0x0002806c

0001e500 <mutex_unlock>:
   1e500:	b168      	cbz	r0, 1e51e <mutex_unlock+0x1e>
   1e502:	6843      	ldr	r3, [r0, #4]
   1e504:	b13b      	cbz	r3, 1e516 <mutex_unlock+0x16>
   1e506:	06db      	lsls	r3, r3, #27
   1e508:	d507      	bpl.n	1e51a <mutex_unlock+0x1a>
   1e50a:	f3bf 8f5f 	dmb	sy
   1e50e:	2300      	movs	r3, #0
   1e510:	6003      	str	r3, [r0, #0]
   1e512:	4618      	mov	r0, r3
   1e514:	4770      	bx	lr
   1e516:	4803      	ldr	r0, [pc, #12]	; (1e524 <mutex_unlock+0x24>)
   1e518:	4770      	bx	lr
   1e51a:	4803      	ldr	r0, [pc, #12]	; (1e528 <mutex_unlock+0x28>)
   1e51c:	4770      	bx	lr
   1e51e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1e522:	4770      	bx	lr
   1e524:	ffff8fea 	.word	0xffff8fea
   1e528:	ffff8fe9 	.word	0xffff8fe9

0001e52c <mutex_init>:
   1e52c:	b510      	push	{r4, lr}
   1e52e:	4604      	mov	r4, r0
   1e530:	b120      	cbz	r0, 1e53c <mutex_init+0x10>
   1e532:	2200      	movs	r2, #0
   1e534:	2311      	movs	r3, #17
   1e536:	6022      	str	r2, [r4, #0]
   1e538:	6063      	str	r3, [r4, #4]
   1e53a:	bd10      	pop	{r4, pc}
   1e53c:	4801      	ldr	r0, [pc, #4]	; (1e544 <mutex_init+0x18>)
   1e53e:	f7ff ff4d 	bl	1e3dc <CC_PalAbort>
   1e542:	e7f6      	b.n	1e532 <mutex_init+0x6>
   1e544:	00028094 	.word	0x00028094

0001e548 <mutex_lock>:
   1e548:	b1c0      	cbz	r0, 1e57c <mutex_lock+0x34>
   1e54a:	6843      	ldr	r3, [r0, #4]
   1e54c:	b1a3      	cbz	r3, 1e578 <mutex_lock+0x30>
   1e54e:	06db      	lsls	r3, r3, #27
   1e550:	d510      	bpl.n	1e574 <mutex_lock+0x2c>
   1e552:	2201      	movs	r2, #1
   1e554:	f3bf 8f5b 	dmb	ish
   1e558:	e850 3f00 	ldrex	r3, [r0]
   1e55c:	e840 2100 	strex	r1, r2, [r0]
   1e560:	2900      	cmp	r1, #0
   1e562:	d1f9      	bne.n	1e558 <mutex_lock+0x10>
   1e564:	f3bf 8f5b 	dmb	ish
   1e568:	2b01      	cmp	r3, #1
   1e56a:	d0f3      	beq.n	1e554 <mutex_lock+0xc>
   1e56c:	f3bf 8f5f 	dmb	sy
   1e570:	2000      	movs	r0, #0
   1e572:	4770      	bx	lr
   1e574:	4803      	ldr	r0, [pc, #12]	; (1e584 <mutex_lock+0x3c>)
   1e576:	4770      	bx	lr
   1e578:	4803      	ldr	r0, [pc, #12]	; (1e588 <mutex_lock+0x40>)
   1e57a:	4770      	bx	lr
   1e57c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1e580:	4770      	bx	lr
   1e582:	bf00      	nop
   1e584:	ffff8fe9 	.word	0xffff8fe9
   1e588:	ffff8fea 	.word	0xffff8fea

0001e58c <nrf_cc3xx_platform_set_mutexes>:
   1e58c:	b570      	push	{r4, r5, r6, lr}
   1e58e:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e592:	4c13      	ldr	r4, [pc, #76]	; (1e5e0 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1e594:	4d13      	ldr	r5, [pc, #76]	; (1e5e4 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1e596:	e9c4 2300 	strd	r2, r3, [r4]
   1e59a:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1e59e:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1e5a2:	4b11      	ldr	r3, [pc, #68]	; (1e5e8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1e5a4:	6808      	ldr	r0, [r1, #0]
   1e5a6:	6018      	str	r0, [r3, #0]
   1e5a8:	6848      	ldr	r0, [r1, #4]
   1e5aa:	6058      	str	r0, [r3, #4]
   1e5ac:	6888      	ldr	r0, [r1, #8]
   1e5ae:	6098      	str	r0, [r3, #8]
   1e5b0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1e5b4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1e5b8:	60de      	str	r6, [r3, #12]
   1e5ba:	6118      	str	r0, [r3, #16]
   1e5bc:	06cb      	lsls	r3, r1, #27
   1e5be:	d50d      	bpl.n	1e5dc <nrf_cc3xx_platform_set_mutexes+0x50>
   1e5c0:	2300      	movs	r3, #0
   1e5c2:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1e5c6:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1e5ca:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1e5ce:	4790      	blx	r2
   1e5d0:	6823      	ldr	r3, [r4, #0]
   1e5d2:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1e5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e5da:	4718      	bx	r3
   1e5dc:	bd70      	pop	{r4, r5, r6, pc}
   1e5de:	bf00      	nop
   1e5e0:	20000608 	.word	0x20000608
   1e5e4:	20003a10 	.word	0x20003a10
   1e5e8:	20000618 	.word	0x20000618

0001e5ec <mbedtls_zeroize_internal>:
   1e5ec:	b138      	cbz	r0, 1e5fe <mbedtls_zeroize_internal+0x12>
   1e5ee:	b131      	cbz	r1, 1e5fe <mbedtls_zeroize_internal+0x12>
   1e5f0:	4401      	add	r1, r0
   1e5f2:	2200      	movs	r2, #0
   1e5f4:	4603      	mov	r3, r0
   1e5f6:	3001      	adds	r0, #1
   1e5f8:	4281      	cmp	r1, r0
   1e5fa:	701a      	strb	r2, [r3, #0]
   1e5fc:	d1fa      	bne.n	1e5f4 <mbedtls_zeroize_internal+0x8>
   1e5fe:	4770      	bx	lr

0001e600 <mbedtls_platform_zeroize>:
   1e600:	b138      	cbz	r0, 1e612 <mbedtls_platform_zeroize+0x12>
   1e602:	b131      	cbz	r1, 1e612 <mbedtls_platform_zeroize+0x12>
   1e604:	4401      	add	r1, r0
   1e606:	2200      	movs	r2, #0
   1e608:	4603      	mov	r3, r0
   1e60a:	3001      	adds	r0, #1
   1e60c:	4288      	cmp	r0, r1
   1e60e:	701a      	strb	r2, [r3, #0]
   1e610:	d1fa      	bne.n	1e608 <mbedtls_platform_zeroize+0x8>
   1e612:	4770      	bx	lr

0001e614 <block_cipher_df>:
   1e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e618:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1e61c:	b0b1      	sub	sp, #196	; 0xc4
   1e61e:	f200 812e 	bhi.w	1e87e <block_cipher_df+0x26a>
   1e622:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1e890 <block_cipher_df+0x27c>
   1e626:	4614      	mov	r4, r2
   1e628:	460d      	mov	r5, r1
   1e62a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1e62e:	2100      	movs	r1, #0
   1e630:	4682      	mov	sl, r0
   1e632:	4648      	mov	r0, r9
   1e634:	f007 f9f7 	bl	25a26 <memset>
   1e638:	a813      	add	r0, sp, #76	; 0x4c
   1e63a:	f001 f9e5 	bl	1fa08 <cc_mbedtls_aes_init>
   1e63e:	2600      	movs	r6, #0
   1e640:	4629      	mov	r1, r5
   1e642:	2320      	movs	r3, #32
   1e644:	ba65      	rev16	r5, r4
   1e646:	4622      	mov	r2, r4
   1e648:	f109 0018 	add.w	r0, r9, #24
   1e64c:	f8a9 5012 	strh.w	r5, [r9, #18]
   1e650:	f889 3017 	strb.w	r3, [r9, #23]
   1e654:	f8a9 6010 	strh.w	r6, [r9, #16]
   1e658:	f007 f9bd 	bl	259d6 <memcpy>
   1e65c:	eb09 0304 	add.w	r3, r9, r4
   1e660:	2280      	movs	r2, #128	; 0x80
   1e662:	4d88      	ldr	r5, [pc, #544]	; (1e884 <block_cipher_df+0x270>)
   1e664:	761a      	strb	r2, [r3, #24]
   1e666:	4b88      	ldr	r3, [pc, #544]	; (1e888 <block_cipher_df+0x274>)
   1e668:	9503      	str	r5, [sp, #12]
   1e66a:	9304      	str	r3, [sp, #16]
   1e66c:	a813      	add	r0, sp, #76	; 0x4c
   1e66e:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1e672:	a903      	add	r1, sp, #12
   1e674:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1e678:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1e67c:	f001 f9da 	bl	1fa34 <cc_mbedtls_aes_setkey_enc>
   1e680:	4680      	mov	r8, r0
   1e682:	2800      	cmp	r0, #0
   1e684:	f040 80da 	bne.w	1e83c <block_cipher_df+0x228>
   1e688:	f104 0319 	add.w	r3, r4, #25
   1e68c:	9301      	str	r3, [sp, #4]
   1e68e:	af07      	add	r7, sp, #28
   1e690:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1e694:	2210      	movs	r2, #16
   1e696:	2100      	movs	r1, #0
   1e698:	4638      	mov	r0, r7
   1e69a:	f007 f9c4 	bl	25a26 <memset>
   1e69e:	4c7b      	ldr	r4, [pc, #492]	; (1e88c <block_cipher_df+0x278>)
   1e6a0:	9d01      	ldr	r5, [sp, #4]
   1e6a2:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1e6a6:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1e6aa:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1e6ae:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1e6b2:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1e6b6:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1e6ba:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1e6be:	404e      	eors	r6, r1
   1e6c0:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1e6c4:	f88d 601d 	strb.w	r6, [sp, #29]
   1e6c8:	ea8e 0303 	eor.w	r3, lr, r3
   1e6cc:	4050      	eors	r0, r2
   1e6ce:	ea8c 0101 	eor.w	r1, ip, r1
   1e6d2:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1e6d6:	f88d 301c 	strb.w	r3, [sp, #28]
   1e6da:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1e6de:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1e6e2:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1e6e6:	f88d 001e 	strb.w	r0, [sp, #30]
   1e6ea:	f88d 101f 	strb.w	r1, [sp, #31]
   1e6ee:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1e6f2:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1e6f6:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1e6fa:	405a      	eors	r2, r3
   1e6fc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1e700:	f88d 2020 	strb.w	r2, [sp, #32]
   1e704:	ea8c 0606 	eor.w	r6, ip, r6
   1e708:	4048      	eors	r0, r1
   1e70a:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1e70e:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1e712:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1e716:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1e71a:	ea8e 0303 	eor.w	r3, lr, r3
   1e71e:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1e722:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1e726:	ea8c 0101 	eor.w	r1, ip, r1
   1e72a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1e72e:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1e732:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1e736:	ea82 020c 	eor.w	r2, r2, ip
   1e73a:	4073      	eors	r3, r6
   1e73c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1e740:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1e744:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1e748:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1e74c:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1e750:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1e754:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1e758:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1e75c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1e760:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1e764:	ea8e 0202 	eor.w	r2, lr, r2
   1e768:	4041      	eors	r1, r0
   1e76a:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1e76e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1e772:	4073      	eors	r3, r6
   1e774:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1e778:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1e77c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1e780:	ea8c 0000 	eor.w	r0, ip, r0
   1e784:	4056      	eors	r6, r2
   1e786:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1e78a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1e78e:	463b      	mov	r3, r7
   1e790:	463a      	mov	r2, r7
   1e792:	2101      	movs	r1, #1
   1e794:	a813      	add	r0, sp, #76	; 0x4c
   1e796:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1e79a:	f001 f965 	bl	1fa68 <cc_mbedtls_aes_crypt_ecb>
   1e79e:	2d10      	cmp	r5, #16
   1e7a0:	bf94      	ite	ls
   1e7a2:	1b6d      	subls	r5, r5, r5
   1e7a4:	3d10      	subhi	r5, #16
   1e7a6:	2800      	cmp	r0, #0
   1e7a8:	d167      	bne.n	1e87a <block_cipher_df+0x266>
   1e7aa:	3410      	adds	r4, #16
   1e7ac:	2d00      	cmp	r5, #0
   1e7ae:	f47f af78 	bne.w	1e6a2 <block_cipher_df+0x8e>
   1e7b2:	eb0b 0008 	add.w	r0, fp, r8
   1e7b6:	2210      	movs	r2, #16
   1e7b8:	4639      	mov	r1, r7
   1e7ba:	f007 f90c 	bl	259d6 <memcpy>
   1e7be:	f899 3003 	ldrb.w	r3, [r9, #3]
   1e7c2:	f108 0810 	add.w	r8, r8, #16
   1e7c6:	3301      	adds	r3, #1
   1e7c8:	f1b8 0f20 	cmp.w	r8, #32
   1e7cc:	f889 3003 	strb.w	r3, [r9, #3]
   1e7d0:	f47f af60 	bne.w	1e694 <block_cipher_df+0x80>
   1e7d4:	2280      	movs	r2, #128	; 0x80
   1e7d6:	4659      	mov	r1, fp
   1e7d8:	a813      	add	r0, sp, #76	; 0x4c
   1e7da:	f001 f92b 	bl	1fa34 <cc_mbedtls_aes_setkey_enc>
   1e7de:	4680      	mov	r8, r0
   1e7e0:	bb78      	cbnz	r0, 1e842 <block_cipher_df+0x22e>
   1e7e2:	f10a 0520 	add.w	r5, sl, #32
   1e7e6:	4654      	mov	r4, sl
   1e7e8:	ab0f      	add	r3, sp, #60	; 0x3c
   1e7ea:	461a      	mov	r2, r3
   1e7ec:	2101      	movs	r1, #1
   1e7ee:	a813      	add	r0, sp, #76	; 0x4c
   1e7f0:	f001 f93a 	bl	1fa68 <cc_mbedtls_aes_crypt_ecb>
   1e7f4:	2210      	movs	r2, #16
   1e7f6:	4680      	mov	r8, r0
   1e7f8:	a90f      	add	r1, sp, #60	; 0x3c
   1e7fa:	4620      	mov	r0, r4
   1e7fc:	4414      	add	r4, r2
   1e7fe:	f1b8 0f00 	cmp.w	r8, #0
   1e802:	d11e      	bne.n	1e842 <block_cipher_df+0x22e>
   1e804:	f007 f8e7 	bl	259d6 <memcpy>
   1e808:	42ac      	cmp	r4, r5
   1e80a:	d1ed      	bne.n	1e7e8 <block_cipher_df+0x1d4>
   1e80c:	a813      	add	r0, sp, #76	; 0x4c
   1e80e:	f001 f90b 	bl	1fa28 <cc_mbedtls_aes_free>
   1e812:	481f      	ldr	r0, [pc, #124]	; (1e890 <block_cipher_df+0x27c>)
   1e814:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1e818:	f7ff fef2 	bl	1e600 <mbedtls_platform_zeroize>
   1e81c:	4658      	mov	r0, fp
   1e81e:	2120      	movs	r1, #32
   1e820:	f7ff feee 	bl	1e600 <mbedtls_platform_zeroize>
   1e824:	a803      	add	r0, sp, #12
   1e826:	2110      	movs	r1, #16
   1e828:	f7ff feea 	bl	1e600 <mbedtls_platform_zeroize>
   1e82c:	4638      	mov	r0, r7
   1e82e:	2110      	movs	r1, #16
   1e830:	f7ff fee6 	bl	1e600 <mbedtls_platform_zeroize>
   1e834:	4640      	mov	r0, r8
   1e836:	b031      	add	sp, #196	; 0xc4
   1e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e83c:	af07      	add	r7, sp, #28
   1e83e:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1e842:	a813      	add	r0, sp, #76	; 0x4c
   1e844:	f001 f8f0 	bl	1fa28 <cc_mbedtls_aes_free>
   1e848:	4811      	ldr	r0, [pc, #68]	; (1e890 <block_cipher_df+0x27c>)
   1e84a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1e84e:	f7ff fed7 	bl	1e600 <mbedtls_platform_zeroize>
   1e852:	4658      	mov	r0, fp
   1e854:	2120      	movs	r1, #32
   1e856:	f7ff fed3 	bl	1e600 <mbedtls_platform_zeroize>
   1e85a:	a803      	add	r0, sp, #12
   1e85c:	2110      	movs	r1, #16
   1e85e:	f7ff fecf 	bl	1e600 <mbedtls_platform_zeroize>
   1e862:	4638      	mov	r0, r7
   1e864:	2110      	movs	r1, #16
   1e866:	f7ff fecb 	bl	1e600 <mbedtls_platform_zeroize>
   1e86a:	4650      	mov	r0, sl
   1e86c:	2120      	movs	r1, #32
   1e86e:	f7ff fec7 	bl	1e600 <mbedtls_platform_zeroize>
   1e872:	4640      	mov	r0, r8
   1e874:	b031      	add	sp, #196	; 0xc4
   1e876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e87a:	4680      	mov	r8, r0
   1e87c:	e7e1      	b.n	1e842 <block_cipher_df+0x22e>
   1e87e:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1e882:	e7f6      	b.n	1e872 <block_cipher_df+0x25e>
   1e884:	03020100 	.word	0x03020100
   1e888:	07060504 	.word	0x07060504
   1e88c:	20003054 	.word	0x20003054
   1e890:	20003044 	.word	0x20003044

0001e894 <ctr_drbg_update_internal>:
   1e894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e898:	b088      	sub	sp, #32
   1e89a:	4604      	mov	r4, r0
   1e89c:	2220      	movs	r2, #32
   1e89e:	460d      	mov	r5, r1
   1e8a0:	4668      	mov	r0, sp
   1e8a2:	2100      	movs	r1, #0
   1e8a4:	eb04 0802 	add.w	r8, r4, r2
   1e8a8:	f007 f8bd 	bl	25a26 <memset>
   1e8ac:	466e      	mov	r6, sp
   1e8ae:	7be2      	ldrb	r2, [r4, #15]
   1e8b0:	3201      	adds	r2, #1
   1e8b2:	b2d2      	uxtb	r2, r2
   1e8b4:	73e2      	strb	r2, [r4, #15]
   1e8b6:	2a00      	cmp	r2, #0
   1e8b8:	d14d      	bne.n	1e956 <ctr_drbg_update_internal+0xc2>
   1e8ba:	7ba2      	ldrb	r2, [r4, #14]
   1e8bc:	3201      	adds	r2, #1
   1e8be:	b2d2      	uxtb	r2, r2
   1e8c0:	73a2      	strb	r2, [r4, #14]
   1e8c2:	2a00      	cmp	r2, #0
   1e8c4:	d147      	bne.n	1e956 <ctr_drbg_update_internal+0xc2>
   1e8c6:	7b63      	ldrb	r3, [r4, #13]
   1e8c8:	3301      	adds	r3, #1
   1e8ca:	b2db      	uxtb	r3, r3
   1e8cc:	7363      	strb	r3, [r4, #13]
   1e8ce:	2b00      	cmp	r3, #0
   1e8d0:	d141      	bne.n	1e956 <ctr_drbg_update_internal+0xc2>
   1e8d2:	7b23      	ldrb	r3, [r4, #12]
   1e8d4:	3301      	adds	r3, #1
   1e8d6:	b2db      	uxtb	r3, r3
   1e8d8:	7323      	strb	r3, [r4, #12]
   1e8da:	2b00      	cmp	r3, #0
   1e8dc:	d13b      	bne.n	1e956 <ctr_drbg_update_internal+0xc2>
   1e8de:	7ae3      	ldrb	r3, [r4, #11]
   1e8e0:	3301      	adds	r3, #1
   1e8e2:	b2db      	uxtb	r3, r3
   1e8e4:	72e3      	strb	r3, [r4, #11]
   1e8e6:	2b00      	cmp	r3, #0
   1e8e8:	d135      	bne.n	1e956 <ctr_drbg_update_internal+0xc2>
   1e8ea:	7aa3      	ldrb	r3, [r4, #10]
   1e8ec:	3301      	adds	r3, #1
   1e8ee:	b2db      	uxtb	r3, r3
   1e8f0:	72a3      	strb	r3, [r4, #10]
   1e8f2:	2b00      	cmp	r3, #0
   1e8f4:	d12f      	bne.n	1e956 <ctr_drbg_update_internal+0xc2>
   1e8f6:	7a63      	ldrb	r3, [r4, #9]
   1e8f8:	3301      	adds	r3, #1
   1e8fa:	b2db      	uxtb	r3, r3
   1e8fc:	7263      	strb	r3, [r4, #9]
   1e8fe:	bb53      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e900:	7a23      	ldrb	r3, [r4, #8]
   1e902:	3301      	adds	r3, #1
   1e904:	b2db      	uxtb	r3, r3
   1e906:	7223      	strb	r3, [r4, #8]
   1e908:	bb2b      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e90a:	79e3      	ldrb	r3, [r4, #7]
   1e90c:	3301      	adds	r3, #1
   1e90e:	b2db      	uxtb	r3, r3
   1e910:	71e3      	strb	r3, [r4, #7]
   1e912:	bb03      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e914:	79a3      	ldrb	r3, [r4, #6]
   1e916:	3301      	adds	r3, #1
   1e918:	b2db      	uxtb	r3, r3
   1e91a:	71a3      	strb	r3, [r4, #6]
   1e91c:	b9db      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e91e:	7963      	ldrb	r3, [r4, #5]
   1e920:	3301      	adds	r3, #1
   1e922:	b2db      	uxtb	r3, r3
   1e924:	7163      	strb	r3, [r4, #5]
   1e926:	b9b3      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e928:	7923      	ldrb	r3, [r4, #4]
   1e92a:	3301      	adds	r3, #1
   1e92c:	b2db      	uxtb	r3, r3
   1e92e:	7123      	strb	r3, [r4, #4]
   1e930:	b98b      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e932:	78e3      	ldrb	r3, [r4, #3]
   1e934:	3301      	adds	r3, #1
   1e936:	b2db      	uxtb	r3, r3
   1e938:	70e3      	strb	r3, [r4, #3]
   1e93a:	b963      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e93c:	78a3      	ldrb	r3, [r4, #2]
   1e93e:	3301      	adds	r3, #1
   1e940:	b2db      	uxtb	r3, r3
   1e942:	70a3      	strb	r3, [r4, #2]
   1e944:	b93b      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e946:	7863      	ldrb	r3, [r4, #1]
   1e948:	3301      	adds	r3, #1
   1e94a:	b2db      	uxtb	r3, r3
   1e94c:	7063      	strb	r3, [r4, #1]
   1e94e:	b913      	cbnz	r3, 1e956 <ctr_drbg_update_internal+0xc2>
   1e950:	7823      	ldrb	r3, [r4, #0]
   1e952:	3301      	adds	r3, #1
   1e954:	7023      	strb	r3, [r4, #0]
   1e956:	4633      	mov	r3, r6
   1e958:	4622      	mov	r2, r4
   1e95a:	2101      	movs	r1, #1
   1e95c:	4640      	mov	r0, r8
   1e95e:	f001 f883 	bl	1fa68 <cc_mbedtls_aes_crypt_ecb>
   1e962:	4607      	mov	r7, r0
   1e964:	2800      	cmp	r0, #0
   1e966:	d12b      	bne.n	1e9c0 <ctr_drbg_update_internal+0x12c>
   1e968:	3610      	adds	r6, #16
   1e96a:	ab08      	add	r3, sp, #32
   1e96c:	429e      	cmp	r6, r3
   1e96e:	d19e      	bne.n	1e8ae <ctr_drbg_update_internal+0x1a>
   1e970:	9e01      	ldr	r6, [sp, #4]
   1e972:	686a      	ldr	r2, [r5, #4]
   1e974:	9f00      	ldr	r7, [sp, #0]
   1e976:	6829      	ldr	r1, [r5, #0]
   1e978:	68ab      	ldr	r3, [r5, #8]
   1e97a:	4072      	eors	r2, r6
   1e97c:	9e02      	ldr	r6, [sp, #8]
   1e97e:	9201      	str	r2, [sp, #4]
   1e980:	4079      	eors	r1, r7
   1e982:	4073      	eors	r3, r6
   1e984:	9100      	str	r1, [sp, #0]
   1e986:	9e03      	ldr	r6, [sp, #12]
   1e988:	68e9      	ldr	r1, [r5, #12]
   1e98a:	692a      	ldr	r2, [r5, #16]
   1e98c:	9302      	str	r3, [sp, #8]
   1e98e:	4071      	eors	r1, r6
   1e990:	9e04      	ldr	r6, [sp, #16]
   1e992:	696b      	ldr	r3, [r5, #20]
   1e994:	9103      	str	r1, [sp, #12]
   1e996:	4056      	eors	r6, r2
   1e998:	9a05      	ldr	r2, [sp, #20]
   1e99a:	9604      	str	r6, [sp, #16]
   1e99c:	ea83 0102 	eor.w	r1, r3, r2
   1e9a0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1e9a4:	9d06      	ldr	r5, [sp, #24]
   1e9a6:	9105      	str	r1, [sp, #20]
   1e9a8:	4055      	eors	r5, r2
   1e9aa:	9a07      	ldr	r2, [sp, #28]
   1e9ac:	4640      	mov	r0, r8
   1e9ae:	4053      	eors	r3, r2
   1e9b0:	4669      	mov	r1, sp
   1e9b2:	2280      	movs	r2, #128	; 0x80
   1e9b4:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1e9b8:	f001 f83c 	bl	1fa34 <cc_mbedtls_aes_setkey_enc>
   1e9bc:	4607      	mov	r7, r0
   1e9be:	b138      	cbz	r0, 1e9d0 <ctr_drbg_update_internal+0x13c>
   1e9c0:	4668      	mov	r0, sp
   1e9c2:	2120      	movs	r1, #32
   1e9c4:	f7ff fe1c 	bl	1e600 <mbedtls_platform_zeroize>
   1e9c8:	4638      	mov	r0, r7
   1e9ca:	b008      	add	sp, #32
   1e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e9d0:	2210      	movs	r2, #16
   1e9d2:	4620      	mov	r0, r4
   1e9d4:	eb0d 0102 	add.w	r1, sp, r2
   1e9d8:	f006 fffd 	bl	259d6 <memcpy>
   1e9dc:	e7f0      	b.n	1e9c0 <ctr_drbg_update_internal+0x12c>
   1e9de:	bf00      	nop

0001e9e0 <mbedtls_ctr_drbg_reseed_internal>:
   1e9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e9e4:	4604      	mov	r4, r0
   1e9e6:	6980      	ldr	r0, [r0, #24]
   1e9e8:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1e9ec:	d852      	bhi.n	1ea94 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1e9ee:	461d      	mov	r5, r3
   1e9f0:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1e9f4:	42ab      	cmp	r3, r5
   1e9f6:	d34d      	bcc.n	1ea94 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1e9f8:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1e9fc:	1a18      	subs	r0, r3, r0
   1e9fe:	4290      	cmp	r0, r2
   1ea00:	4616      	mov	r6, r2
   1ea02:	d347      	bcc.n	1ea94 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1ea04:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1eaa0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1ea08:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1ea0c:	460f      	mov	r7, r1
   1ea0e:	4648      	mov	r0, r9
   1ea10:	2100      	movs	r1, #0
   1ea12:	f007 f808 	bl	25a26 <memset>
   1ea16:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1ea1a:	69a2      	ldr	r2, [r4, #24]
   1ea1c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1ea20:	4649      	mov	r1, r9
   1ea22:	4798      	blx	r3
   1ea24:	2800      	cmp	r0, #0
   1ea26:	d138      	bne.n	1ea9a <mbedtls_ctr_drbg_reseed_internal+0xba>
   1ea28:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1ea2c:	b13d      	cbz	r5, 1ea3e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1ea2e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1ea32:	462a      	mov	r2, r5
   1ea34:	eb09 0108 	add.w	r1, r9, r8
   1ea38:	4798      	blx	r3
   1ea3a:	bb70      	cbnz	r0, 1ea9a <mbedtls_ctr_drbg_reseed_internal+0xba>
   1ea3c:	44a8      	add	r8, r5
   1ea3e:	b107      	cbz	r7, 1ea42 <mbedtls_ctr_drbg_reseed_internal+0x62>
   1ea40:	b9c6      	cbnz	r6, 1ea74 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1ea42:	4917      	ldr	r1, [pc, #92]	; (1eaa0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ea44:	4642      	mov	r2, r8
   1ea46:	4608      	mov	r0, r1
   1ea48:	f7ff fde4 	bl	1e614 <block_cipher_df>
   1ea4c:	4605      	mov	r5, r0
   1ea4e:	b138      	cbz	r0, 1ea60 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1ea50:	4813      	ldr	r0, [pc, #76]	; (1eaa0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ea52:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1ea56:	f7ff fdd3 	bl	1e600 <mbedtls_platform_zeroize>
   1ea5a:	4628      	mov	r0, r5
   1ea5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ea60:	490f      	ldr	r1, [pc, #60]	; (1eaa0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ea62:	4620      	mov	r0, r4
   1ea64:	f7ff ff16 	bl	1e894 <ctr_drbg_update_internal>
   1ea68:	4605      	mov	r5, r0
   1ea6a:	2800      	cmp	r0, #0
   1ea6c:	d1f0      	bne.n	1ea50 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1ea6e:	2301      	movs	r3, #1
   1ea70:	6123      	str	r3, [r4, #16]
   1ea72:	e7ed      	b.n	1ea50 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1ea74:	4639      	mov	r1, r7
   1ea76:	eb09 0008 	add.w	r0, r9, r8
   1ea7a:	4632      	mov	r2, r6
   1ea7c:	f006 ffab 	bl	259d6 <memcpy>
   1ea80:	4907      	ldr	r1, [pc, #28]	; (1eaa0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ea82:	44b0      	add	r8, r6
   1ea84:	4642      	mov	r2, r8
   1ea86:	4608      	mov	r0, r1
   1ea88:	f7ff fdc4 	bl	1e614 <block_cipher_df>
   1ea8c:	4605      	mov	r5, r0
   1ea8e:	2800      	cmp	r0, #0
   1ea90:	d1de      	bne.n	1ea50 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1ea92:	e7e5      	b.n	1ea60 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1ea94:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1ea98:	e7df      	b.n	1ea5a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1ea9a:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1ea9e:	e7dc      	b.n	1ea5a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1eaa0:	200031e4 	.word	0x200031e4

0001eaa4 <cc_mbedtls_ctr_drbg_init>:
   1eaa4:	b510      	push	{r4, lr}
   1eaa6:	22a4      	movs	r2, #164	; 0xa4
   1eaa8:	4604      	mov	r4, r0
   1eaaa:	2100      	movs	r1, #0
   1eaac:	f006 ffbb 	bl	25a26 <memset>
   1eab0:	4b06      	ldr	r3, [pc, #24]	; (1eacc <cc_mbedtls_ctr_drbg_init+0x28>)
   1eab2:	f04f 31ff 	mov.w	r1, #4294967295
   1eab6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1eaba:	6121      	str	r1, [r4, #16]
   1eabc:	61e2      	str	r2, [r4, #28]
   1eabe:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1eac2:	681b      	ldr	r3, [r3, #0]
   1eac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eac8:	4718      	bx	r3
   1eaca:	bf00      	nop
   1eacc:	2000065c 	.word	0x2000065c

0001ead0 <cc_mbedtls_ctr_drbg_seed>:
   1ead0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ead4:	b085      	sub	sp, #20
   1ead6:	4605      	mov	r5, r0
   1ead8:	460f      	mov	r7, r1
   1eada:	4616      	mov	r6, r2
   1eadc:	4668      	mov	r0, sp
   1eade:	2210      	movs	r2, #16
   1eae0:	2100      	movs	r1, #0
   1eae2:	4699      	mov	r9, r3
   1eae4:	f006 ff9f 	bl	25a26 <memset>
   1eae8:	4b1d      	ldr	r3, [pc, #116]	; (1eb60 <cc_mbedtls_ctr_drbg_seed+0x90>)
   1eaea:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1eaee:	681b      	ldr	r3, [r3, #0]
   1eaf0:	4640      	mov	r0, r8
   1eaf2:	4798      	blx	r3
   1eaf4:	b120      	cbz	r0, 1eb00 <cc_mbedtls_ctr_drbg_seed+0x30>
   1eaf6:	4604      	mov	r4, r0
   1eaf8:	4620      	mov	r0, r4
   1eafa:	b005      	add	sp, #20
   1eafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1eb00:	f105 0420 	add.w	r4, r5, #32
   1eb04:	4620      	mov	r0, r4
   1eb06:	f000 ff7f 	bl	1fa08 <cc_mbedtls_aes_init>
   1eb0a:	69aa      	ldr	r2, [r5, #24]
   1eb0c:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1eb10:	692e      	ldr	r6, [r5, #16]
   1eb12:	b9e2      	cbnz	r2, 1eb4e <cc_mbedtls_ctr_drbg_seed+0x7e>
   1eb14:	2220      	movs	r2, #32
   1eb16:	2e00      	cmp	r6, #0
   1eb18:	61aa      	str	r2, [r5, #24]
   1eb1a:	db1f      	blt.n	1eb5c <cc_mbedtls_ctr_drbg_seed+0x8c>
   1eb1c:	4620      	mov	r0, r4
   1eb1e:	4669      	mov	r1, sp
   1eb20:	2280      	movs	r2, #128	; 0x80
   1eb22:	f000 ff87 	bl	1fa34 <cc_mbedtls_aes_setkey_enc>
   1eb26:	4604      	mov	r4, r0
   1eb28:	b930      	cbnz	r0, 1eb38 <cc_mbedtls_ctr_drbg_seed+0x68>
   1eb2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1eb2c:	4633      	mov	r3, r6
   1eb2e:	4649      	mov	r1, r9
   1eb30:	4628      	mov	r0, r5
   1eb32:	f7ff ff55 	bl	1e9e0 <mbedtls_ctr_drbg_reseed_internal>
   1eb36:	4604      	mov	r4, r0
   1eb38:	4b0a      	ldr	r3, [pc, #40]	; (1eb64 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1eb3a:	4640      	mov	r0, r8
   1eb3c:	681b      	ldr	r3, [r3, #0]
   1eb3e:	4798      	blx	r3
   1eb40:	2800      	cmp	r0, #0
   1eb42:	bf18      	it	ne
   1eb44:	4604      	movne	r4, r0
   1eb46:	4620      	mov	r0, r4
   1eb48:	b005      	add	sp, #20
   1eb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1eb4e:	2e00      	cmp	r6, #0
   1eb50:	dae4      	bge.n	1eb1c <cc_mbedtls_ctr_drbg_seed+0x4c>
   1eb52:	2a17      	cmp	r2, #23
   1eb54:	d802      	bhi.n	1eb5c <cc_mbedtls_ctr_drbg_seed+0x8c>
   1eb56:	1c53      	adds	r3, r2, #1
   1eb58:	085e      	lsrs	r6, r3, #1
   1eb5a:	e7df      	b.n	1eb1c <cc_mbedtls_ctr_drbg_seed+0x4c>
   1eb5c:	2600      	movs	r6, #0
   1eb5e:	e7dd      	b.n	1eb1c <cc_mbedtls_ctr_drbg_seed+0x4c>
   1eb60:	20000660 	.word	0x20000660
   1eb64:	20000664 	.word	0x20000664

0001eb68 <cc_mbedtls_ctr_drbg_random_with_add>:
   1eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb6c:	b08d      	sub	sp, #52	; 0x34
   1eb6e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1eb72:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1eb76:	f200 80e4 	bhi.w	1ed42 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1eb7a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1eb7e:	f200 80dd 	bhi.w	1ed3c <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1eb82:	4604      	mov	r4, r0
   1eb84:	4615      	mov	r5, r2
   1eb86:	460e      	mov	r6, r1
   1eb88:	2220      	movs	r2, #32
   1eb8a:	2100      	movs	r1, #0
   1eb8c:	a804      	add	r0, sp, #16
   1eb8e:	461f      	mov	r7, r3
   1eb90:	f006 ff49 	bl	25a26 <memset>
   1eb94:	4b6c      	ldr	r3, [pc, #432]	; (1ed48 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1eb96:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1eb9a:	681b      	ldr	r3, [r3, #0]
   1eb9c:	4648      	mov	r0, r9
   1eb9e:	4798      	blx	r3
   1eba0:	4683      	mov	fp, r0
   1eba2:	2800      	cmp	r0, #0
   1eba4:	f040 8093 	bne.w	1ecce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1eba8:	6922      	ldr	r2, [r4, #16]
   1ebaa:	69e3      	ldr	r3, [r4, #28]
   1ebac:	429a      	cmp	r2, r3
   1ebae:	f300 8092 	bgt.w	1ecd6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1ebb2:	6963      	ldr	r3, [r4, #20]
   1ebb4:	2b00      	cmp	r3, #0
   1ebb6:	f040 808e 	bne.w	1ecd6 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1ebba:	f1b8 0f00 	cmp.w	r8, #0
   1ebbe:	f040 80a9 	bne.w	1ed14 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1ebc2:	f8df a188 	ldr.w	sl, [pc, #392]	; 1ed4c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ebc6:	466f      	mov	r7, sp
   1ebc8:	2d00      	cmp	r5, #0
   1ebca:	f000 8098 	beq.w	1ecfe <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1ebce:	f104 0820 	add.w	r8, r4, #32
   1ebd2:	466f      	mov	r7, sp
   1ebd4:	e00e      	b.n	1ebf4 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1ebd6:	2d10      	cmp	r5, #16
   1ebd8:	46ab      	mov	fp, r5
   1ebda:	bf28      	it	cs
   1ebdc:	f04f 0b10 	movcs.w	fp, #16
   1ebe0:	4630      	mov	r0, r6
   1ebe2:	465a      	mov	r2, fp
   1ebe4:	4639      	mov	r1, r7
   1ebe6:	f006 fef6 	bl	259d6 <memcpy>
   1ebea:	ebb5 050b 	subs.w	r5, r5, fp
   1ebee:	445e      	add	r6, fp
   1ebf0:	f000 8085 	beq.w	1ecfe <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1ebf4:	7be3      	ldrb	r3, [r4, #15]
   1ebf6:	3301      	adds	r3, #1
   1ebf8:	b2db      	uxtb	r3, r3
   1ebfa:	73e3      	strb	r3, [r4, #15]
   1ebfc:	2b00      	cmp	r3, #0
   1ebfe:	d14d      	bne.n	1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec00:	7ba3      	ldrb	r3, [r4, #14]
   1ec02:	3301      	adds	r3, #1
   1ec04:	b2db      	uxtb	r3, r3
   1ec06:	73a3      	strb	r3, [r4, #14]
   1ec08:	2b00      	cmp	r3, #0
   1ec0a:	d147      	bne.n	1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec0c:	7b63      	ldrb	r3, [r4, #13]
   1ec0e:	3301      	adds	r3, #1
   1ec10:	b2db      	uxtb	r3, r3
   1ec12:	7363      	strb	r3, [r4, #13]
   1ec14:	2b00      	cmp	r3, #0
   1ec16:	d141      	bne.n	1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec18:	7b23      	ldrb	r3, [r4, #12]
   1ec1a:	3301      	adds	r3, #1
   1ec1c:	b2db      	uxtb	r3, r3
   1ec1e:	7323      	strb	r3, [r4, #12]
   1ec20:	2b00      	cmp	r3, #0
   1ec22:	d13b      	bne.n	1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec24:	7ae3      	ldrb	r3, [r4, #11]
   1ec26:	3301      	adds	r3, #1
   1ec28:	b2db      	uxtb	r3, r3
   1ec2a:	72e3      	strb	r3, [r4, #11]
   1ec2c:	2b00      	cmp	r3, #0
   1ec2e:	d135      	bne.n	1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec30:	7aa3      	ldrb	r3, [r4, #10]
   1ec32:	3301      	adds	r3, #1
   1ec34:	b2db      	uxtb	r3, r3
   1ec36:	72a3      	strb	r3, [r4, #10]
   1ec38:	2b00      	cmp	r3, #0
   1ec3a:	d12f      	bne.n	1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec3c:	7a63      	ldrb	r3, [r4, #9]
   1ec3e:	3301      	adds	r3, #1
   1ec40:	b2db      	uxtb	r3, r3
   1ec42:	7263      	strb	r3, [r4, #9]
   1ec44:	bb53      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec46:	7a23      	ldrb	r3, [r4, #8]
   1ec48:	3301      	adds	r3, #1
   1ec4a:	b2db      	uxtb	r3, r3
   1ec4c:	7223      	strb	r3, [r4, #8]
   1ec4e:	bb2b      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec50:	79e3      	ldrb	r3, [r4, #7]
   1ec52:	3301      	adds	r3, #1
   1ec54:	b2db      	uxtb	r3, r3
   1ec56:	71e3      	strb	r3, [r4, #7]
   1ec58:	bb03      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec5a:	79a3      	ldrb	r3, [r4, #6]
   1ec5c:	3301      	adds	r3, #1
   1ec5e:	b2db      	uxtb	r3, r3
   1ec60:	71a3      	strb	r3, [r4, #6]
   1ec62:	b9db      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec64:	7963      	ldrb	r3, [r4, #5]
   1ec66:	3301      	adds	r3, #1
   1ec68:	b2db      	uxtb	r3, r3
   1ec6a:	7163      	strb	r3, [r4, #5]
   1ec6c:	b9b3      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec6e:	7923      	ldrb	r3, [r4, #4]
   1ec70:	3301      	adds	r3, #1
   1ec72:	b2db      	uxtb	r3, r3
   1ec74:	7123      	strb	r3, [r4, #4]
   1ec76:	b98b      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec78:	78e3      	ldrb	r3, [r4, #3]
   1ec7a:	3301      	adds	r3, #1
   1ec7c:	b2db      	uxtb	r3, r3
   1ec7e:	70e3      	strb	r3, [r4, #3]
   1ec80:	b963      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec82:	78a3      	ldrb	r3, [r4, #2]
   1ec84:	3301      	adds	r3, #1
   1ec86:	b2db      	uxtb	r3, r3
   1ec88:	70a3      	strb	r3, [r4, #2]
   1ec8a:	b93b      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec8c:	7863      	ldrb	r3, [r4, #1]
   1ec8e:	3301      	adds	r3, #1
   1ec90:	b2db      	uxtb	r3, r3
   1ec92:	7063      	strb	r3, [r4, #1]
   1ec94:	b913      	cbnz	r3, 1ec9c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ec96:	7823      	ldrb	r3, [r4, #0]
   1ec98:	3301      	adds	r3, #1
   1ec9a:	7023      	strb	r3, [r4, #0]
   1ec9c:	463b      	mov	r3, r7
   1ec9e:	4622      	mov	r2, r4
   1eca0:	2101      	movs	r1, #1
   1eca2:	4640      	mov	r0, r8
   1eca4:	f000 fee0 	bl	1fa68 <cc_mbedtls_aes_crypt_ecb>
   1eca8:	4683      	mov	fp, r0
   1ecaa:	2800      	cmp	r0, #0
   1ecac:	d093      	beq.n	1ebd6 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1ecae:	f8da 3000 	ldr.w	r3, [sl]
   1ecb2:	4648      	mov	r0, r9
   1ecb4:	4798      	blx	r3
   1ecb6:	2120      	movs	r1, #32
   1ecb8:	4603      	mov	r3, r0
   1ecba:	a804      	add	r0, sp, #16
   1ecbc:	2b00      	cmp	r3, #0
   1ecbe:	bf18      	it	ne
   1ecc0:	469b      	movne	fp, r3
   1ecc2:	f7ff fc9d 	bl	1e600 <mbedtls_platform_zeroize>
   1ecc6:	4638      	mov	r0, r7
   1ecc8:	2110      	movs	r1, #16
   1ecca:	f7ff fc99 	bl	1e600 <mbedtls_platform_zeroize>
   1ecce:	4658      	mov	r0, fp
   1ecd0:	b00d      	add	sp, #52	; 0x34
   1ecd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecd6:	4642      	mov	r2, r8
   1ecd8:	4639      	mov	r1, r7
   1ecda:	2300      	movs	r3, #0
   1ecdc:	4620      	mov	r0, r4
   1ecde:	f7ff fe7f 	bl	1e9e0 <mbedtls_ctr_drbg_reseed_internal>
   1ece2:	f8df a068 	ldr.w	sl, [pc, #104]	; 1ed4c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ece6:	2800      	cmp	r0, #0
   1ece8:	f43f af6d 	beq.w	1ebc6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1ecec:	f8da 3000 	ldr.w	r3, [sl]
   1ecf0:	4648      	mov	r0, r9
   1ecf2:	4798      	blx	r3
   1ecf4:	4683      	mov	fp, r0
   1ecf6:	2800      	cmp	r0, #0
   1ecf8:	f43f af65 	beq.w	1ebc6 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1ecfc:	e7e7      	b.n	1ecce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ecfe:	a904      	add	r1, sp, #16
   1ed00:	4620      	mov	r0, r4
   1ed02:	f7ff fdc7 	bl	1e894 <ctr_drbg_update_internal>
   1ed06:	4683      	mov	fp, r0
   1ed08:	2800      	cmp	r0, #0
   1ed0a:	d1d0      	bne.n	1ecae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ed0c:	6923      	ldr	r3, [r4, #16]
   1ed0e:	3301      	adds	r3, #1
   1ed10:	6123      	str	r3, [r4, #16]
   1ed12:	e7cc      	b.n	1ecae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ed14:	4642      	mov	r2, r8
   1ed16:	4639      	mov	r1, r7
   1ed18:	a804      	add	r0, sp, #16
   1ed1a:	f7ff fc7b 	bl	1e614 <block_cipher_df>
   1ed1e:	4683      	mov	fp, r0
   1ed20:	b118      	cbz	r0, 1ed2a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1ed22:	f8df a028 	ldr.w	sl, [pc, #40]	; 1ed4c <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ed26:	466f      	mov	r7, sp
   1ed28:	e7c1      	b.n	1ecae <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ed2a:	a904      	add	r1, sp, #16
   1ed2c:	4620      	mov	r0, r4
   1ed2e:	f7ff fdb1 	bl	1e894 <ctr_drbg_update_internal>
   1ed32:	4683      	mov	fp, r0
   1ed34:	2800      	cmp	r0, #0
   1ed36:	f43f af44 	beq.w	1ebc2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1ed3a:	e7f2      	b.n	1ed22 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1ed3c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1ed40:	e7c5      	b.n	1ecce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ed42:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1ed46:	e7c2      	b.n	1ecce <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ed48:	20000660 	.word	0x20000660
   1ed4c:	20000664 	.word	0x20000664

0001ed50 <entropy_update>:
   1ed50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ed54:	2b20      	cmp	r3, #32
   1ed56:	b08b      	sub	sp, #44	; 0x2c
   1ed58:	461d      	mov	r5, r3
   1ed5a:	4606      	mov	r6, r0
   1ed5c:	4689      	mov	r9, r1
   1ed5e:	4690      	mov	r8, r2
   1ed60:	d826      	bhi.n	1edb0 <entropy_update+0x60>
   1ed62:	b2db      	uxtb	r3, r3
   1ed64:	af02      	add	r7, sp, #8
   1ed66:	6831      	ldr	r1, [r6, #0]
   1ed68:	f88d 9004 	strb.w	r9, [sp, #4]
   1ed6c:	f88d 3005 	strb.w	r3, [sp, #5]
   1ed70:	f106 0904 	add.w	r9, r6, #4
   1ed74:	b921      	cbnz	r1, 1ed80 <entropy_update+0x30>
   1ed76:	4648      	mov	r0, r9
   1ed78:	f000 feba 	bl	1faf0 <cc_mbedtls_sha256_starts>
   1ed7c:	4604      	mov	r4, r0
   1ed7e:	b940      	cbnz	r0, 1ed92 <entropy_update+0x42>
   1ed80:	2301      	movs	r3, #1
   1ed82:	6033      	str	r3, [r6, #0]
   1ed84:	2202      	movs	r2, #2
   1ed86:	a901      	add	r1, sp, #4
   1ed88:	4648      	mov	r0, r9
   1ed8a:	f000 fec5 	bl	1fb18 <cc_mbedtls_sha256_update>
   1ed8e:	4604      	mov	r4, r0
   1ed90:	b138      	cbz	r0, 1eda2 <entropy_update+0x52>
   1ed92:	4638      	mov	r0, r7
   1ed94:	2120      	movs	r1, #32
   1ed96:	f7ff fc33 	bl	1e600 <mbedtls_platform_zeroize>
   1ed9a:	4620      	mov	r0, r4
   1ed9c:	b00b      	add	sp, #44	; 0x2c
   1ed9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1eda2:	462a      	mov	r2, r5
   1eda4:	4641      	mov	r1, r8
   1eda6:	4648      	mov	r0, r9
   1eda8:	f000 feb6 	bl	1fb18 <cc_mbedtls_sha256_update>
   1edac:	4604      	mov	r4, r0
   1edae:	e7f0      	b.n	1ed92 <entropy_update+0x42>
   1edb0:	af02      	add	r7, sp, #8
   1edb2:	4619      	mov	r1, r3
   1edb4:	4610      	mov	r0, r2
   1edb6:	2300      	movs	r3, #0
   1edb8:	463a      	mov	r2, r7
   1edba:	f000 ffad 	bl	1fd18 <cc_mbedtls_sha256>
   1edbe:	4604      	mov	r4, r0
   1edc0:	2800      	cmp	r0, #0
   1edc2:	d1e6      	bne.n	1ed92 <entropy_update+0x42>
   1edc4:	2320      	movs	r3, #32
   1edc6:	461d      	mov	r5, r3
   1edc8:	46b8      	mov	r8, r7
   1edca:	e7cc      	b.n	1ed66 <entropy_update+0x16>

0001edcc <entropy_gather_internal.part.0>:
   1edcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1edce:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1edd2:	b0a7      	sub	sp, #156	; 0x9c
   1edd4:	2b00      	cmp	r3, #0
   1edd6:	bfd8      	it	le
   1edd8:	ae02      	addle	r6, sp, #8
   1edda:	dd2c      	ble.n	1ee36 <entropy_gather_internal.part.0+0x6a>
   1eddc:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1ede0:	4605      	mov	r5, r0
   1ede2:	2300      	movs	r3, #0
   1ede4:	ae02      	add	r6, sp, #8
   1ede6:	9301      	str	r3, [sp, #4]
   1ede8:	f1a4 0701 	sub.w	r7, r4, #1
   1edec:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1edf0:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1edf4:	4631      	mov	r1, r6
   1edf6:	ab01      	add	r3, sp, #4
   1edf8:	2290      	movs	r2, #144	; 0x90
   1edfa:	47a0      	blx	r4
   1edfc:	fab7 f787 	clz	r7, r7
   1ee00:	097f      	lsrs	r7, r7, #5
   1ee02:	4604      	mov	r4, r0
   1ee04:	b910      	cbnz	r0, 1ee0c <entropy_gather_internal.part.0+0x40>
   1ee06:	9b01      	ldr	r3, [sp, #4]
   1ee08:	b93b      	cbnz	r3, 1ee1a <entropy_gather_internal.part.0+0x4e>
   1ee0a:	b1a7      	cbz	r7, 1ee36 <entropy_gather_internal.part.0+0x6a>
   1ee0c:	4630      	mov	r0, r6
   1ee0e:	2190      	movs	r1, #144	; 0x90
   1ee10:	f7ff fbf6 	bl	1e600 <mbedtls_platform_zeroize>
   1ee14:	4620      	mov	r0, r4
   1ee16:	b027      	add	sp, #156	; 0x9c
   1ee18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee1a:	4601      	mov	r1, r0
   1ee1c:	4632      	mov	r2, r6
   1ee1e:	4628      	mov	r0, r5
   1ee20:	f7ff ff96 	bl	1ed50 <entropy_update>
   1ee24:	b950      	cbnz	r0, 1ee3c <entropy_gather_internal.part.0+0x70>
   1ee26:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1ee2a:	9a01      	ldr	r2, [sp, #4]
   1ee2c:	4413      	add	r3, r2
   1ee2e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1ee32:	2f00      	cmp	r7, #0
   1ee34:	d1ea      	bne.n	1ee0c <entropy_gather_internal.part.0+0x40>
   1ee36:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1ee3a:	e7e7      	b.n	1ee0c <entropy_gather_internal.part.0+0x40>
   1ee3c:	4604      	mov	r4, r0
   1ee3e:	4620      	mov	r0, r4
   1ee40:	b027      	add	sp, #156	; 0x9c
   1ee42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ee44 <cc_mbedtls_entropy_init>:
   1ee44:	b570      	push	{r4, r5, r6, lr}
   1ee46:	2500      	movs	r5, #0
   1ee48:	4604      	mov	r4, r0
   1ee4a:	4629      	mov	r1, r5
   1ee4c:	2214      	movs	r2, #20
   1ee4e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1ee52:	30f8      	adds	r0, #248	; 0xf8
   1ee54:	f006 fde7 	bl	25a26 <memset>
   1ee58:	4b15      	ldr	r3, [pc, #84]	; (1eeb0 <cc_mbedtls_entropy_init+0x6c>)
   1ee5a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1ee5e:	681b      	ldr	r3, [r3, #0]
   1ee60:	4630      	mov	r0, r6
   1ee62:	4798      	blx	r3
   1ee64:	4620      	mov	r0, r4
   1ee66:	f840 5b04 	str.w	r5, [r0], #4
   1ee6a:	f000 fe27 	bl	1fabc <cc_mbedtls_sha256_init>
   1ee6e:	4b11      	ldr	r3, [pc, #68]	; (1eeb4 <cc_mbedtls_entropy_init+0x70>)
   1ee70:	4630      	mov	r0, r6
   1ee72:	681b      	ldr	r3, [r3, #0]
   1ee74:	4798      	blx	r3
   1ee76:	b9c8      	cbnz	r0, 1eeac <cc_mbedtls_entropy_init+0x68>
   1ee78:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1ee7c:	42ab      	cmp	r3, r5
   1ee7e:	dc0f      	bgt.n	1eea0 <cc_mbedtls_entropy_init+0x5c>
   1ee80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1ee84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1ee88:	490b      	ldr	r1, [pc, #44]	; (1eeb8 <cc_mbedtls_entropy_init+0x74>)
   1ee8a:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1ee8e:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1ee92:	3301      	adds	r3, #1
   1ee94:	2020      	movs	r0, #32
   1ee96:	2101      	movs	r1, #1
   1ee98:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1ee9c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1eea0:	4b06      	ldr	r3, [pc, #24]	; (1eebc <cc_mbedtls_entropy_init+0x78>)
   1eea2:	4630      	mov	r0, r6
   1eea4:	681b      	ldr	r3, [r3, #0]
   1eea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1eeaa:	4718      	bx	r3
   1eeac:	bd70      	pop	{r4, r5, r6, pc}
   1eeae:	bf00      	nop
   1eeb0:	2000065c 	.word	0x2000065c
   1eeb4:	20000660 	.word	0x20000660
   1eeb8:	0001f90d 	.word	0x0001f90d
   1eebc:	20000664 	.word	0x20000664

0001eec0 <cc_mbedtls_entropy_func>:
   1eec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eec4:	2a20      	cmp	r2, #32
   1eec6:	b088      	sub	sp, #32
   1eec8:	d876      	bhi.n	1efb8 <cc_mbedtls_entropy_func+0xf8>
   1eeca:	4b3d      	ldr	r3, [pc, #244]	; (1efc0 <cc_mbedtls_entropy_func+0x100>)
   1eecc:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1eed0:	681b      	ldr	r3, [r3, #0]
   1eed2:	4604      	mov	r4, r0
   1eed4:	4648      	mov	r0, r9
   1eed6:	4617      	mov	r7, r2
   1eed8:	4688      	mov	r8, r1
   1eeda:	4798      	blx	r3
   1eedc:	4605      	mov	r5, r0
   1eede:	bba0      	cbnz	r0, 1ef4a <cc_mbedtls_entropy_func+0x8a>
   1eee0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1eee4:	f240 1601 	movw	r6, #257	; 0x101
   1eee8:	e001      	b.n	1eeee <cc_mbedtls_entropy_func+0x2e>
   1eeea:	3e01      	subs	r6, #1
   1eeec:	d060      	beq.n	1efb0 <cc_mbedtls_entropy_func+0xf0>
   1eeee:	4620      	mov	r0, r4
   1eef0:	b37b      	cbz	r3, 1ef52 <cc_mbedtls_entropy_func+0x92>
   1eef2:	f7ff ff6b 	bl	1edcc <entropy_gather_internal.part.0>
   1eef6:	4605      	mov	r5, r0
   1eef8:	bb68      	cbnz	r0, 1ef56 <cc_mbedtls_entropy_func+0x96>
   1eefa:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1eefe:	2b00      	cmp	r3, #0
   1ef00:	ddf3      	ble.n	1eeea <cc_mbedtls_entropy_func+0x2a>
   1ef02:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1ef06:	4290      	cmp	r0, r2
   1ef08:	d3ef      	bcc.n	1eeea <cc_mbedtls_entropy_func+0x2a>
   1ef0a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1ef0e:	2a01      	cmp	r2, #1
   1ef10:	d1eb      	bne.n	1eeea <cc_mbedtls_entropy_func+0x2a>
   1ef12:	281f      	cmp	r0, #31
   1ef14:	d9e9      	bls.n	1eeea <cc_mbedtls_entropy_func+0x2a>
   1ef16:	466e      	mov	r6, sp
   1ef18:	4629      	mov	r1, r5
   1ef1a:	2220      	movs	r2, #32
   1ef1c:	4630      	mov	r0, r6
   1ef1e:	f104 0a04 	add.w	sl, r4, #4
   1ef22:	f006 fd80 	bl	25a26 <memset>
   1ef26:	4631      	mov	r1, r6
   1ef28:	4650      	mov	r0, sl
   1ef2a:	f000 fe1f 	bl	1fb6c <cc_mbedtls_sha256_finish>
   1ef2e:	4605      	mov	r5, r0
   1ef30:	b198      	cbz	r0, 1ef5a <cc_mbedtls_entropy_func+0x9a>
   1ef32:	4630      	mov	r0, r6
   1ef34:	2120      	movs	r1, #32
   1ef36:	f7ff fb63 	bl	1e600 <mbedtls_platform_zeroize>
   1ef3a:	4b22      	ldr	r3, [pc, #136]	; (1efc4 <cc_mbedtls_entropy_func+0x104>)
   1ef3c:	4648      	mov	r0, r9
   1ef3e:	681b      	ldr	r3, [r3, #0]
   1ef40:	4798      	blx	r3
   1ef42:	2800      	cmp	r0, #0
   1ef44:	bf18      	it	ne
   1ef46:	f06f 051d 	mvnne.w	r5, #29
   1ef4a:	4628      	mov	r0, r5
   1ef4c:	b008      	add	sp, #32
   1ef4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ef52:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1ef56:	466e      	mov	r6, sp
   1ef58:	e7eb      	b.n	1ef32 <cc_mbedtls_entropy_func+0x72>
   1ef5a:	4650      	mov	r0, sl
   1ef5c:	f000 fdc2 	bl	1fae4 <cc_mbedtls_sha256_free>
   1ef60:	4650      	mov	r0, sl
   1ef62:	f000 fdab 	bl	1fabc <cc_mbedtls_sha256_init>
   1ef66:	4629      	mov	r1, r5
   1ef68:	4650      	mov	r0, sl
   1ef6a:	f000 fdc1 	bl	1faf0 <cc_mbedtls_sha256_starts>
   1ef6e:	4605      	mov	r5, r0
   1ef70:	2800      	cmp	r0, #0
   1ef72:	d1de      	bne.n	1ef32 <cc_mbedtls_entropy_func+0x72>
   1ef74:	4650      	mov	r0, sl
   1ef76:	2220      	movs	r2, #32
   1ef78:	4631      	mov	r1, r6
   1ef7a:	f000 fdcd 	bl	1fb18 <cc_mbedtls_sha256_update>
   1ef7e:	4605      	mov	r5, r0
   1ef80:	2800      	cmp	r0, #0
   1ef82:	d1d6      	bne.n	1ef32 <cc_mbedtls_entropy_func+0x72>
   1ef84:	4603      	mov	r3, r0
   1ef86:	4632      	mov	r2, r6
   1ef88:	2120      	movs	r1, #32
   1ef8a:	4630      	mov	r0, r6
   1ef8c:	f000 fec4 	bl	1fd18 <cc_mbedtls_sha256>
   1ef90:	4605      	mov	r5, r0
   1ef92:	2800      	cmp	r0, #0
   1ef94:	d1cd      	bne.n	1ef32 <cc_mbedtls_entropy_func+0x72>
   1ef96:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1ef9a:	2b00      	cmp	r3, #0
   1ef9c:	bfc4      	itt	gt
   1ef9e:	2300      	movgt	r3, #0
   1efa0:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1efa4:	463a      	mov	r2, r7
   1efa6:	4640      	mov	r0, r8
   1efa8:	4631      	mov	r1, r6
   1efaa:	f006 fd14 	bl	259d6 <memcpy>
   1efae:	e7c0      	b.n	1ef32 <cc_mbedtls_entropy_func+0x72>
   1efb0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1efb4:	466e      	mov	r6, sp
   1efb6:	e7bc      	b.n	1ef32 <cc_mbedtls_entropy_func+0x72>
   1efb8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1efbc:	e7c5      	b.n	1ef4a <cc_mbedtls_entropy_func+0x8a>
   1efbe:	bf00      	nop
   1efc0:	20000660 	.word	0x20000660
   1efc4:	20000664 	.word	0x20000664

0001efc8 <RndStartupTest.constprop.0>:
   1efc8:	b530      	push	{r4, r5, lr}
   1efca:	b0c3      	sub	sp, #268	; 0x10c
   1efcc:	22dc      	movs	r2, #220	; 0xdc
   1efce:	2100      	movs	r1, #0
   1efd0:	a80b      	add	r0, sp, #44	; 0x2c
   1efd2:	f006 fd28 	bl	25a26 <memset>
   1efd6:	2228      	movs	r2, #40	; 0x28
   1efd8:	2100      	movs	r1, #0
   1efda:	a801      	add	r0, sp, #4
   1efdc:	f006 fd23 	bl	25a26 <memset>
   1efe0:	a801      	add	r0, sp, #4
   1efe2:	f000 fec1 	bl	1fd68 <RNG_PLAT_SetUserRngParameters>
   1efe6:	4604      	mov	r4, r0
   1efe8:	b110      	cbz	r0, 1eff0 <RndStartupTest.constprop.0+0x28>
   1efea:	4620      	mov	r0, r4
   1efec:	b043      	add	sp, #268	; 0x10c
   1efee:	bd30      	pop	{r4, r5, pc}
   1eff0:	4d18      	ldr	r5, [pc, #96]	; (1f054 <RndStartupTest.constprop.0+0x8c>)
   1eff2:	f04f 31ff 	mov.w	r1, #4294967295
   1eff6:	6828      	ldr	r0, [r5, #0]
   1eff8:	f000 f93c 	bl	1f274 <CC_PalMutexLock>
   1effc:	4604      	mov	r4, r0
   1effe:	b9c0      	cbnz	r0, 1f032 <RndStartupTest.constprop.0+0x6a>
   1f000:	2000      	movs	r0, #0
   1f002:	f000 f967 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   1f006:	bb00      	cbnz	r0, 1f04a <RndStartupTest.constprop.0+0x82>
   1f008:	4a13      	ldr	r2, [pc, #76]	; (1f058 <RndStartupTest.constprop.0+0x90>)
   1f00a:	a901      	add	r1, sp, #4
   1f00c:	a80b      	add	r0, sp, #44	; 0x2c
   1f00e:	f000 fc6f 	bl	1f8f0 <LLF_RND_RunTrngStartupTest>
   1f012:	4604      	mov	r4, r0
   1f014:	2001      	movs	r0, #1
   1f016:	f000 f95d 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   1f01a:	b990      	cbnz	r0, 1f042 <RndStartupTest.constprop.0+0x7a>
   1f01c:	6828      	ldr	r0, [r5, #0]
   1f01e:	f000 f931 	bl	1f284 <CC_PalMutexUnlock>
   1f022:	2800      	cmp	r0, #0
   1f024:	d0e1      	beq.n	1efea <RndStartupTest.constprop.0+0x22>
   1f026:	480d      	ldr	r0, [pc, #52]	; (1f05c <RndStartupTest.constprop.0+0x94>)
   1f028:	f7ff f9d8 	bl	1e3dc <CC_PalAbort>
   1f02c:	4620      	mov	r0, r4
   1f02e:	b043      	add	sp, #268	; 0x10c
   1f030:	bd30      	pop	{r4, r5, pc}
   1f032:	480b      	ldr	r0, [pc, #44]	; (1f060 <RndStartupTest.constprop.0+0x98>)
   1f034:	f7ff f9d2 	bl	1e3dc <CC_PalAbort>
   1f038:	2c01      	cmp	r4, #1
   1f03a:	bf08      	it	eq
   1f03c:	2405      	moveq	r4, #5
   1f03e:	d0ed      	beq.n	1f01c <RndStartupTest.constprop.0+0x54>
   1f040:	e7de      	b.n	1f000 <RndStartupTest.constprop.0+0x38>
   1f042:	4808      	ldr	r0, [pc, #32]	; (1f064 <RndStartupTest.constprop.0+0x9c>)
   1f044:	f7ff f9ca 	bl	1e3dc <CC_PalAbort>
   1f048:	e7e8      	b.n	1f01c <RndStartupTest.constprop.0+0x54>
   1f04a:	4807      	ldr	r0, [pc, #28]	; (1f068 <RndStartupTest.constprop.0+0xa0>)
   1f04c:	f7ff f9c6 	bl	1e3dc <CC_PalAbort>
   1f050:	e7da      	b.n	1f008 <RndStartupTest.constprop.0+0x40>
   1f052:	bf00      	nop
   1f054:	20000658 	.word	0x20000658
   1f058:	200033cc 	.word	0x200033cc
   1f05c:	00028110 	.word	0x00028110
   1f060:	000280b8 	.word	0x000280b8
   1f064:	000280f0 	.word	0x000280f0
   1f068:	000280d0 	.word	0x000280d0

0001f06c <CC_LibInit>:
   1f06c:	b510      	push	{r4, lr}
   1f06e:	b082      	sub	sp, #8
   1f070:	f000 f854 	bl	1f11c <CC_HalInit>
   1f074:	b128      	cbz	r0, 1f082 <CC_LibInit+0x16>
   1f076:	f000 f8a3 	bl	1f1c0 <CC_PalTerminate>
   1f07a:	2403      	movs	r4, #3
   1f07c:	4620      	mov	r0, r4
   1f07e:	b002      	add	sp, #8
   1f080:	bd10      	pop	{r4, pc}
   1f082:	f000 f86f 	bl	1f164 <CC_PalInit>
   1f086:	b9d0      	cbnz	r0, 1f0be <CC_LibInit+0x52>
   1f088:	f000 f924 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   1f08c:	b9d8      	cbnz	r0, 1f0c6 <CC_LibInit+0x5a>
   1f08e:	4b1e      	ldr	r3, [pc, #120]	; (1f108 <CC_LibInit+0x9c>)
   1f090:	681b      	ldr	r3, [r3, #0]
   1f092:	0e1b      	lsrs	r3, r3, #24
   1f094:	2bf0      	cmp	r3, #240	; 0xf0
   1f096:	d10a      	bne.n	1f0ae <CC_LibInit+0x42>
   1f098:	4a1c      	ldr	r2, [pc, #112]	; (1f10c <CC_LibInit+0xa0>)
   1f09a:	4b1d      	ldr	r3, [pc, #116]	; (1f110 <CC_LibInit+0xa4>)
   1f09c:	6812      	ldr	r2, [r2, #0]
   1f09e:	429a      	cmp	r2, r3
   1f0a0:	d029      	beq.n	1f0f6 <CC_LibInit+0x8a>
   1f0a2:	f000 f83d 	bl	1f120 <CC_HalTerminate>
   1f0a6:	2407      	movs	r4, #7
   1f0a8:	f000 f88a 	bl	1f1c0 <CC_PalTerminate>
   1f0ac:	e7e6      	b.n	1f07c <CC_LibInit+0x10>
   1f0ae:	f000 f837 	bl	1f120 <CC_HalTerminate>
   1f0b2:	f000 f885 	bl	1f1c0 <CC_PalTerminate>
   1f0b6:	2406      	movs	r4, #6
   1f0b8:	4620      	mov	r0, r4
   1f0ba:	b002      	add	sp, #8
   1f0bc:	bd10      	pop	{r4, pc}
   1f0be:	2404      	movs	r4, #4
   1f0c0:	4620      	mov	r0, r4
   1f0c2:	b002      	add	sp, #8
   1f0c4:	bd10      	pop	{r4, pc}
   1f0c6:	f000 f82b 	bl	1f120 <CC_HalTerminate>
   1f0ca:	f000 f879 	bl	1f1c0 <CC_PalTerminate>
   1f0ce:	f7ff ff7b 	bl	1efc8 <RndStartupTest.constprop.0>
   1f0d2:	4604      	mov	r4, r0
   1f0d4:	b958      	cbnz	r0, 1f0ee <CC_LibInit+0x82>
   1f0d6:	4602      	mov	r2, r0
   1f0d8:	4601      	mov	r1, r0
   1f0da:	f7ff f9a7 	bl	1e42c <nrf_cc3xx_platform_ctr_drbg_init>
   1f0de:	b930      	cbnz	r0, 1f0ee <CC_LibInit+0x82>
   1f0e0:	490c      	ldr	r1, [pc, #48]	; (1f114 <CC_LibInit+0xa8>)
   1f0e2:	ab01      	add	r3, sp, #4
   1f0e4:	2268      	movs	r2, #104	; 0x68
   1f0e6:	f7ff f9d5 	bl	1e494 <nrf_cc3xx_platform_ctr_drbg_get>
   1f0ea:	2800      	cmp	r0, #0
   1f0ec:	d0c6      	beq.n	1f07c <CC_LibInit+0x10>
   1f0ee:	2405      	movs	r4, #5
   1f0f0:	4620      	mov	r0, r4
   1f0f2:	b002      	add	sp, #8
   1f0f4:	bd10      	pop	{r4, pc}
   1f0f6:	2001      	movs	r0, #1
   1f0f8:	f000 f8ec 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   1f0fc:	2800      	cmp	r0, #0
   1f0fe:	d1e2      	bne.n	1f0c6 <CC_LibInit+0x5a>
   1f100:	4b05      	ldr	r3, [pc, #20]	; (1f118 <CC_LibInit+0xac>)
   1f102:	6018      	str	r0, [r3, #0]
   1f104:	e7e3      	b.n	1f0ce <CC_LibInit+0x62>
   1f106:	bf00      	nop
   1f108:	5002b928 	.word	0x5002b928
   1f10c:	5002ba24 	.word	0x5002ba24
   1f110:	20e00000 	.word	0x20e00000
   1f114:	20003364 	.word	0x20003364
   1f118:	5002ba0c 	.word	0x5002ba0c

0001f11c <CC_HalInit>:
   1f11c:	2000      	movs	r0, #0
   1f11e:	4770      	bx	lr

0001f120 <CC_HalTerminate>:
   1f120:	2000      	movs	r0, #0
   1f122:	4770      	bx	lr

0001f124 <CC_HalClearInterruptBit>:
   1f124:	0543      	lsls	r3, r0, #21
   1f126:	d503      	bpl.n	1f130 <CC_HalClearInterruptBit+0xc>
   1f128:	4b03      	ldr	r3, [pc, #12]	; (1f138 <CC_HalClearInterruptBit+0x14>)
   1f12a:	f04f 32ff 	mov.w	r2, #4294967295
   1f12e:	601a      	str	r2, [r3, #0]
   1f130:	4b02      	ldr	r3, [pc, #8]	; (1f13c <CC_HalClearInterruptBit+0x18>)
   1f132:	6018      	str	r0, [r3, #0]
   1f134:	4770      	bx	lr
   1f136:	bf00      	nop
   1f138:	5002b108 	.word	0x5002b108
   1f13c:	5002ba08 	.word	0x5002ba08

0001f140 <CC_HalMaskInterrupt>:
   1f140:	4b01      	ldr	r3, [pc, #4]	; (1f148 <CC_HalMaskInterrupt+0x8>)
   1f142:	6018      	str	r0, [r3, #0]
   1f144:	4770      	bx	lr
   1f146:	bf00      	nop
   1f148:	5002ba04 	.word	0x5002ba04

0001f14c <CC_HalWaitInterrupt>:
   1f14c:	b108      	cbz	r0, 1f152 <CC_HalWaitInterrupt+0x6>
   1f14e:	f000 b86f 	b.w	1f230 <CC_PalWaitInterrupt>
   1f152:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1f156:	4770      	bx	lr

0001f158 <CC_HalWaitInterruptRND>:
   1f158:	b108      	cbz	r0, 1f15e <CC_HalWaitInterruptRND+0x6>
   1f15a:	f000 b84f 	b.w	1f1fc <CC_PalWaitInterruptRND>
   1f15e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1f162:	4770      	bx	lr

0001f164 <CC_PalInit>:
   1f164:	b510      	push	{r4, lr}
   1f166:	4811      	ldr	r0, [pc, #68]	; (1f1ac <CC_PalInit+0x48>)
   1f168:	f000 f870 	bl	1f24c <CC_PalMutexCreate>
   1f16c:	b100      	cbz	r0, 1f170 <CC_PalInit+0xc>
   1f16e:	bd10      	pop	{r4, pc}
   1f170:	480f      	ldr	r0, [pc, #60]	; (1f1b0 <CC_PalInit+0x4c>)
   1f172:	f000 f86b 	bl	1f24c <CC_PalMutexCreate>
   1f176:	2800      	cmp	r0, #0
   1f178:	d1f9      	bne.n	1f16e <CC_PalInit+0xa>
   1f17a:	4c0e      	ldr	r4, [pc, #56]	; (1f1b4 <CC_PalInit+0x50>)
   1f17c:	4620      	mov	r0, r4
   1f17e:	f000 f865 	bl	1f24c <CC_PalMutexCreate>
   1f182:	2800      	cmp	r0, #0
   1f184:	d1f3      	bne.n	1f16e <CC_PalInit+0xa>
   1f186:	4b0c      	ldr	r3, [pc, #48]	; (1f1b8 <CC_PalInit+0x54>)
   1f188:	480c      	ldr	r0, [pc, #48]	; (1f1bc <CC_PalInit+0x58>)
   1f18a:	601c      	str	r4, [r3, #0]
   1f18c:	f000 f85e 	bl	1f24c <CC_PalMutexCreate>
   1f190:	4601      	mov	r1, r0
   1f192:	2800      	cmp	r0, #0
   1f194:	d1eb      	bne.n	1f16e <CC_PalInit+0xa>
   1f196:	f000 f82d 	bl	1f1f4 <CC_PalDmaInit>
   1f19a:	4604      	mov	r4, r0
   1f19c:	b108      	cbz	r0, 1f1a2 <CC_PalInit+0x3e>
   1f19e:	4620      	mov	r0, r4
   1f1a0:	bd10      	pop	{r4, pc}
   1f1a2:	f000 f879 	bl	1f298 <CC_PalPowerSaveModeInit>
   1f1a6:	4620      	mov	r0, r4
   1f1a8:	e7fa      	b.n	1f1a0 <CC_PalInit+0x3c>
   1f1aa:	bf00      	nop
   1f1ac:	20000654 	.word	0x20000654
   1f1b0:	20000648 	.word	0x20000648
   1f1b4:	20000650 	.word	0x20000650
   1f1b8:	20000658 	.word	0x20000658
   1f1bc:	2000064c 	.word	0x2000064c

0001f1c0 <CC_PalTerminate>:
   1f1c0:	b508      	push	{r3, lr}
   1f1c2:	4808      	ldr	r0, [pc, #32]	; (1f1e4 <CC_PalTerminate+0x24>)
   1f1c4:	f000 f84c 	bl	1f260 <CC_PalMutexDestroy>
   1f1c8:	4807      	ldr	r0, [pc, #28]	; (1f1e8 <CC_PalTerminate+0x28>)
   1f1ca:	f000 f849 	bl	1f260 <CC_PalMutexDestroy>
   1f1ce:	4807      	ldr	r0, [pc, #28]	; (1f1ec <CC_PalTerminate+0x2c>)
   1f1d0:	f000 f846 	bl	1f260 <CC_PalMutexDestroy>
   1f1d4:	4806      	ldr	r0, [pc, #24]	; (1f1f0 <CC_PalTerminate+0x30>)
   1f1d6:	f000 f843 	bl	1f260 <CC_PalMutexDestroy>
   1f1da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f1de:	f000 b80b 	b.w	1f1f8 <CC_PalDmaTerminate>
   1f1e2:	bf00      	nop
   1f1e4:	20000654 	.word	0x20000654
   1f1e8:	20000648 	.word	0x20000648
   1f1ec:	20000650 	.word	0x20000650
   1f1f0:	2000064c 	.word	0x2000064c

0001f1f4 <CC_PalDmaInit>:
   1f1f4:	2000      	movs	r0, #0
   1f1f6:	4770      	bx	lr

0001f1f8 <CC_PalDmaTerminate>:
   1f1f8:	4770      	bx	lr
   1f1fa:	bf00      	nop

0001f1fc <CC_PalWaitInterruptRND>:
   1f1fc:	b410      	push	{r4}
   1f1fe:	4c08      	ldr	r4, [pc, #32]	; (1f220 <CC_PalWaitInterruptRND+0x24>)
   1f200:	4602      	mov	r2, r0
   1f202:	6823      	ldr	r3, [r4, #0]
   1f204:	4213      	tst	r3, r2
   1f206:	d0fc      	beq.n	1f202 <CC_PalWaitInterruptRND+0x6>
   1f208:	b121      	cbz	r1, 1f214 <CC_PalWaitInterruptRND+0x18>
   1f20a:	4b06      	ldr	r3, [pc, #24]	; (1f224 <CC_PalWaitInterruptRND+0x28>)
   1f20c:	4806      	ldr	r0, [pc, #24]	; (1f228 <CC_PalWaitInterruptRND+0x2c>)
   1f20e:	681b      	ldr	r3, [r3, #0]
   1f210:	600b      	str	r3, [r1, #0]
   1f212:	6003      	str	r3, [r0, #0]
   1f214:	4b05      	ldr	r3, [pc, #20]	; (1f22c <CC_PalWaitInterruptRND+0x30>)
   1f216:	601a      	str	r2, [r3, #0]
   1f218:	2000      	movs	r0, #0
   1f21a:	bc10      	pop	{r4}
   1f21c:	4770      	bx	lr
   1f21e:	bf00      	nop
   1f220:	5002ba00 	.word	0x5002ba00
   1f224:	5002b104 	.word	0x5002b104
   1f228:	5002b108 	.word	0x5002b108
   1f22c:	5002ba08 	.word	0x5002ba08

0001f230 <CC_PalWaitInterrupt>:
   1f230:	4904      	ldr	r1, [pc, #16]	; (1f244 <CC_PalWaitInterrupt+0x14>)
   1f232:	4602      	mov	r2, r0
   1f234:	680b      	ldr	r3, [r1, #0]
   1f236:	421a      	tst	r2, r3
   1f238:	d0fc      	beq.n	1f234 <CC_PalWaitInterrupt+0x4>
   1f23a:	4b03      	ldr	r3, [pc, #12]	; (1f248 <CC_PalWaitInterrupt+0x18>)
   1f23c:	2000      	movs	r0, #0
   1f23e:	601a      	str	r2, [r3, #0]
   1f240:	4770      	bx	lr
   1f242:	bf00      	nop
   1f244:	5002ba00 	.word	0x5002ba00
   1f248:	5002ba08 	.word	0x5002ba08

0001f24c <CC_PalMutexCreate>:
   1f24c:	b508      	push	{r3, lr}
   1f24e:	4b03      	ldr	r3, [pc, #12]	; (1f25c <CC_PalMutexCreate+0x10>)
   1f250:	6802      	ldr	r2, [r0, #0]
   1f252:	681b      	ldr	r3, [r3, #0]
   1f254:	6810      	ldr	r0, [r2, #0]
   1f256:	4798      	blx	r3
   1f258:	2000      	movs	r0, #0
   1f25a:	bd08      	pop	{r3, pc}
   1f25c:	20000608 	.word	0x20000608

0001f260 <CC_PalMutexDestroy>:
   1f260:	b508      	push	{r3, lr}
   1f262:	4b03      	ldr	r3, [pc, #12]	; (1f270 <CC_PalMutexDestroy+0x10>)
   1f264:	6802      	ldr	r2, [r0, #0]
   1f266:	685b      	ldr	r3, [r3, #4]
   1f268:	6810      	ldr	r0, [r2, #0]
   1f26a:	4798      	blx	r3
   1f26c:	2000      	movs	r0, #0
   1f26e:	bd08      	pop	{r3, pc}
   1f270:	20000608 	.word	0x20000608

0001f274 <CC_PalMutexLock>:
   1f274:	4b02      	ldr	r3, [pc, #8]	; (1f280 <CC_PalMutexLock+0xc>)
   1f276:	6802      	ldr	r2, [r0, #0]
   1f278:	689b      	ldr	r3, [r3, #8]
   1f27a:	6810      	ldr	r0, [r2, #0]
   1f27c:	4718      	bx	r3
   1f27e:	bf00      	nop
   1f280:	20000608 	.word	0x20000608

0001f284 <CC_PalMutexUnlock>:
   1f284:	b508      	push	{r3, lr}
   1f286:	4b03      	ldr	r3, [pc, #12]	; (1f294 <CC_PalMutexUnlock+0x10>)
   1f288:	6802      	ldr	r2, [r0, #0]
   1f28a:	68db      	ldr	r3, [r3, #12]
   1f28c:	6810      	ldr	r0, [r2, #0]
   1f28e:	4798      	blx	r3
   1f290:	2000      	movs	r0, #0
   1f292:	bd08      	pop	{r3, pc}
   1f294:	20000608 	.word	0x20000608

0001f298 <CC_PalPowerSaveModeInit>:
   1f298:	b570      	push	{r4, r5, r6, lr}
   1f29a:	4c09      	ldr	r4, [pc, #36]	; (1f2c0 <CC_PalPowerSaveModeInit+0x28>)
   1f29c:	4d09      	ldr	r5, [pc, #36]	; (1f2c4 <CC_PalPowerSaveModeInit+0x2c>)
   1f29e:	6920      	ldr	r0, [r4, #16]
   1f2a0:	68ab      	ldr	r3, [r5, #8]
   1f2a2:	4798      	blx	r3
   1f2a4:	b118      	cbz	r0, 1f2ae <CC_PalPowerSaveModeInit+0x16>
   1f2a6:	4b08      	ldr	r3, [pc, #32]	; (1f2c8 <CC_PalPowerSaveModeInit+0x30>)
   1f2a8:	4808      	ldr	r0, [pc, #32]	; (1f2cc <CC_PalPowerSaveModeInit+0x34>)
   1f2aa:	685b      	ldr	r3, [r3, #4]
   1f2ac:	4798      	blx	r3
   1f2ae:	4a08      	ldr	r2, [pc, #32]	; (1f2d0 <CC_PalPowerSaveModeInit+0x38>)
   1f2b0:	68eb      	ldr	r3, [r5, #12]
   1f2b2:	6920      	ldr	r0, [r4, #16]
   1f2b4:	2100      	movs	r1, #0
   1f2b6:	6011      	str	r1, [r2, #0]
   1f2b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f2bc:	4718      	bx	r3
   1f2be:	bf00      	nop
   1f2c0:	20000618 	.word	0x20000618
   1f2c4:	20000608 	.word	0x20000608
   1f2c8:	200005f8 	.word	0x200005f8
   1f2cc:	00028128 	.word	0x00028128
   1f2d0:	200035ec 	.word	0x200035ec

0001f2d4 <CC_PalPowerSaveModeSelect>:
   1f2d4:	b570      	push	{r4, r5, r6, lr}
   1f2d6:	4d1a      	ldr	r5, [pc, #104]	; (1f340 <CC_PalPowerSaveModeSelect+0x6c>)
   1f2d8:	4e1a      	ldr	r6, [pc, #104]	; (1f344 <CC_PalPowerSaveModeSelect+0x70>)
   1f2da:	4604      	mov	r4, r0
   1f2dc:	68b2      	ldr	r2, [r6, #8]
   1f2de:	6928      	ldr	r0, [r5, #16]
   1f2e0:	4790      	blx	r2
   1f2e2:	b9f0      	cbnz	r0, 1f322 <CC_PalPowerSaveModeSelect+0x4e>
   1f2e4:	b15c      	cbz	r4, 1f2fe <CC_PalPowerSaveModeSelect+0x2a>
   1f2e6:	4c18      	ldr	r4, [pc, #96]	; (1f348 <CC_PalPowerSaveModeSelect+0x74>)
   1f2e8:	6823      	ldr	r3, [r4, #0]
   1f2ea:	b1ab      	cbz	r3, 1f318 <CC_PalPowerSaveModeSelect+0x44>
   1f2ec:	2b01      	cmp	r3, #1
   1f2ee:	d01a      	beq.n	1f326 <CC_PalPowerSaveModeSelect+0x52>
   1f2f0:	3b01      	subs	r3, #1
   1f2f2:	6023      	str	r3, [r4, #0]
   1f2f4:	6928      	ldr	r0, [r5, #16]
   1f2f6:	68f3      	ldr	r3, [r6, #12]
   1f2f8:	4798      	blx	r3
   1f2fa:	2000      	movs	r0, #0
   1f2fc:	bd70      	pop	{r4, r5, r6, pc}
   1f2fe:	4c12      	ldr	r4, [pc, #72]	; (1f348 <CC_PalPowerSaveModeSelect+0x74>)
   1f300:	6821      	ldr	r1, [r4, #0]
   1f302:	b939      	cbnz	r1, 1f314 <CC_PalPowerSaveModeSelect+0x40>
   1f304:	4b11      	ldr	r3, [pc, #68]	; (1f34c <CC_PalPowerSaveModeSelect+0x78>)
   1f306:	4a12      	ldr	r2, [pc, #72]	; (1f350 <CC_PalPowerSaveModeSelect+0x7c>)
   1f308:	2001      	movs	r0, #1
   1f30a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1f30e:	6813      	ldr	r3, [r2, #0]
   1f310:	2b00      	cmp	r3, #0
   1f312:	d1fc      	bne.n	1f30e <CC_PalPowerSaveModeSelect+0x3a>
   1f314:	3101      	adds	r1, #1
   1f316:	6021      	str	r1, [r4, #0]
   1f318:	68f3      	ldr	r3, [r6, #12]
   1f31a:	6928      	ldr	r0, [r5, #16]
   1f31c:	4798      	blx	r3
   1f31e:	2000      	movs	r0, #0
   1f320:	bd70      	pop	{r4, r5, r6, pc}
   1f322:	480c      	ldr	r0, [pc, #48]	; (1f354 <CC_PalPowerSaveModeSelect+0x80>)
   1f324:	bd70      	pop	{r4, r5, r6, pc}
   1f326:	4a0a      	ldr	r2, [pc, #40]	; (1f350 <CC_PalPowerSaveModeSelect+0x7c>)
   1f328:	6813      	ldr	r3, [r2, #0]
   1f32a:	2b00      	cmp	r3, #0
   1f32c:	d1fc      	bne.n	1f328 <CC_PalPowerSaveModeSelect+0x54>
   1f32e:	4a07      	ldr	r2, [pc, #28]	; (1f34c <CC_PalPowerSaveModeSelect+0x78>)
   1f330:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1f334:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1f338:	f7ff ff02 	bl	1f140 <CC_HalMaskInterrupt>
   1f33c:	6823      	ldr	r3, [r4, #0]
   1f33e:	e7d7      	b.n	1f2f0 <CC_PalPowerSaveModeSelect+0x1c>
   1f340:	20000618 	.word	0x20000618
   1f344:	20000608 	.word	0x20000608
   1f348:	200035ec 	.word	0x200035ec
   1f34c:	5002a000 	.word	0x5002a000
   1f350:	5002b910 	.word	0x5002b910
   1f354:	ffff8fe9 	.word	0xffff8fe9

0001f358 <mutex_init>:
   1f358:	4b01      	ldr	r3, [pc, #4]	; (1f360 <mutex_init+0x8>)
   1f35a:	681b      	ldr	r3, [r3, #0]
   1f35c:	4718      	bx	r3
   1f35e:	bf00      	nop
   1f360:	20000608 	.word	0x20000608

0001f364 <mutex_lock>:
   1f364:	4b01      	ldr	r3, [pc, #4]	; (1f36c <mutex_lock+0x8>)
   1f366:	689b      	ldr	r3, [r3, #8]
   1f368:	4718      	bx	r3
   1f36a:	bf00      	nop
   1f36c:	20000608 	.word	0x20000608

0001f370 <mutex_unlock>:
   1f370:	4b01      	ldr	r3, [pc, #4]	; (1f378 <mutex_unlock+0x8>)
   1f372:	68db      	ldr	r3, [r3, #12]
   1f374:	4718      	bx	r3
   1f376:	bf00      	nop
   1f378:	20000608 	.word	0x20000608

0001f37c <startTrngHW>:
   1f37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f380:	2800      	cmp	r0, #0
   1f382:	d07b      	beq.n	1f47c <startTrngHW+0x100>
   1f384:	460c      	mov	r4, r1
   1f386:	2900      	cmp	r1, #0
   1f388:	d078      	beq.n	1f47c <startTrngHW+0x100>
   1f38a:	461d      	mov	r5, r3
   1f38c:	2b00      	cmp	r3, #0
   1f38e:	d075      	beq.n	1f47c <startTrngHW+0x100>
   1f390:	4606      	mov	r6, r0
   1f392:	b122      	cbz	r2, 1f39e <startTrngHW+0x22>
   1f394:	2201      	movs	r2, #1
   1f396:	2300      	movs	r3, #0
   1f398:	602a      	str	r2, [r5, #0]
   1f39a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   1f39e:	682b      	ldr	r3, [r5, #0]
   1f3a0:	2b00      	cmp	r3, #0
   1f3a2:	d067      	beq.n	1f474 <startTrngHW+0xf8>
   1f3a4:	4629      	mov	r1, r5
   1f3a6:	4620      	mov	r0, r4
   1f3a8:	f000 fda4 	bl	1fef4 <LLF_RND_GetFastestRosc>
   1f3ac:	4607      	mov	r7, r0
   1f3ae:	2800      	cmp	r0, #0
   1f3b0:	d161      	bne.n	1f476 <startTrngHW+0xfa>
   1f3b2:	6828      	ldr	r0, [r5, #0]
   1f3b4:	4621      	mov	r1, r4
   1f3b6:	f000 fd7f 	bl	1feb8 <LLF_RND_GetRoscSampleCnt>
   1f3ba:	4607      	mov	r7, r0
   1f3bc:	2800      	cmp	r0, #0
   1f3be:	d15a      	bne.n	1f476 <startTrngHW+0xfa>
   1f3c0:	682b      	ldr	r3, [r5, #0]
   1f3c2:	2b08      	cmp	r3, #8
   1f3c4:	d069      	beq.n	1f49a <startTrngHW+0x11e>
   1f3c6:	2b04      	cmp	r3, #4
   1f3c8:	d06a      	beq.n	1f4a0 <startTrngHW+0x124>
   1f3ca:	f1a3 0802 	sub.w	r8, r3, #2
   1f3ce:	fab8 f888 	clz	r8, r8
   1f3d2:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1f3d6:	4b34      	ldr	r3, [pc, #208]	; (1f4a8 <startTrngHW+0x12c>)
   1f3d8:	4934      	ldr	r1, [pc, #208]	; (1f4ac <startTrngHW+0x130>)
   1f3da:	4a35      	ldr	r2, [pc, #212]	; (1f4b0 <startTrngHW+0x134>)
   1f3dc:	2001      	movs	r0, #1
   1f3de:	6018      	str	r0, [r3, #0]
   1f3e0:	469c      	mov	ip, r3
   1f3e2:	6008      	str	r0, [r1, #0]
   1f3e4:	f8cc 0000 	str.w	r0, [ip]
   1f3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f3ea:	6013      	str	r3, [r2, #0]
   1f3ec:	6811      	ldr	r1, [r2, #0]
   1f3ee:	428b      	cmp	r3, r1
   1f3f0:	d1f8      	bne.n	1f3e4 <startTrngHW+0x68>
   1f3f2:	4b30      	ldr	r3, [pc, #192]	; (1f4b4 <startTrngHW+0x138>)
   1f3f4:	f04f 0900 	mov.w	r9, #0
   1f3f8:	f8c3 9000 	str.w	r9, [r3]
   1f3fc:	f04f 30ff 	mov.w	r0, #4294967295
   1f400:	f7ff fe90 	bl	1f124 <CC_HalClearInterruptBit>
   1f404:	4b2c      	ldr	r3, [pc, #176]	; (1f4b8 <startTrngHW+0x13c>)
   1f406:	f06f 021b 	mvn.w	r2, #27
   1f40a:	601a      	str	r2, [r3, #0]
   1f40c:	4648      	mov	r0, r9
   1f40e:	f7ff fe97 	bl	1f140 <CC_HalMaskInterrupt>
   1f412:	4a2a      	ldr	r2, [pc, #168]	; (1f4bc <startTrngHW+0x140>)
   1f414:	4b2a      	ldr	r3, [pc, #168]	; (1f4c0 <startTrngHW+0x144>)
   1f416:	f8c2 8000 	str.w	r8, [r2]
   1f41a:	6818      	ldr	r0, [r3, #0]
   1f41c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1f420:	f7ff fe8e 	bl	1f140 <CC_HalMaskInterrupt>
   1f424:	4b27      	ldr	r3, [pc, #156]	; (1f4c4 <startTrngHW+0x148>)
   1f426:	220a      	movs	r2, #10
   1f428:	601a      	str	r2, [r3, #0]
   1f42a:	9908      	ldr	r1, [sp, #32]
   1f42c:	6923      	ldr	r3, [r4, #16]
   1f42e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f430:	2901      	cmp	r1, #1
   1f432:	d027      	beq.n	1f484 <startTrngHW+0x108>
   1f434:	4924      	ldr	r1, [pc, #144]	; (1f4c8 <startTrngHW+0x14c>)
   1f436:	fba1 1303 	umull	r1, r3, r1, r3
   1f43a:	091b      	lsrs	r3, r3, #4
   1f43c:	fb03 f302 	mul.w	r3, r3, r2
   1f440:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f444:	4921      	ldr	r1, [pc, #132]	; (1f4cc <startTrngHW+0x150>)
   1f446:	4a1b      	ldr	r2, [pc, #108]	; (1f4b4 <startTrngHW+0x138>)
   1f448:	03db      	lsls	r3, r3, #15
   1f44a:	099b      	lsrs	r3, r3, #6
   1f44c:	600b      	str	r3, [r1, #0]
   1f44e:	2301      	movs	r3, #1
   1f450:	6013      	str	r3, [r2, #0]
   1f452:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   1f456:	682a      	ldr	r2, [r5, #0]
   1f458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f45c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1f460:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1f464:	682a      	ldr	r2, [r5, #0]
   1f466:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f46a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1f46e:	4638      	mov	r0, r7
   1f470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f474:	4f16      	ldr	r7, [pc, #88]	; (1f4d0 <startTrngHW+0x154>)
   1f476:	4638      	mov	r0, r7
   1f478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f47c:	4f15      	ldr	r7, [pc, #84]	; (1f4d4 <startTrngHW+0x158>)
   1f47e:	4638      	mov	r0, r7
   1f480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f484:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f488:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1f48c:	3101      	adds	r1, #1
   1f48e:	d002      	beq.n	1f496 <startTrngHW+0x11a>
   1f490:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1f494:	e7ce      	b.n	1f434 <startTrngHW+0xb8>
   1f496:	2316      	movs	r3, #22
   1f498:	e7d0      	b.n	1f43c <startTrngHW+0xc0>
   1f49a:	f04f 0803 	mov.w	r8, #3
   1f49e:	e79a      	b.n	1f3d6 <startTrngHW+0x5a>
   1f4a0:	f04f 0802 	mov.w	r8, #2
   1f4a4:	e797      	b.n	1f3d6 <startTrngHW+0x5a>
   1f4a6:	bf00      	nop
   1f4a8:	5002b1c4 	.word	0x5002b1c4
   1f4ac:	5002b140 	.word	0x5002b140
   1f4b0:	5002b130 	.word	0x5002b130
   1f4b4:	5002b12c 	.word	0x5002b12c
   1f4b8:	5002b100 	.word	0x5002b100
   1f4bc:	5002b10c 	.word	0x5002b10c
   1f4c0:	5002ba04 	.word	0x5002ba04
   1f4c4:	5002b138 	.word	0x5002b138
   1f4c8:	aaaaaaab 	.word	0xaaaaaaab
   1f4cc:	5002b1d8 	.word	0x5002b1d8
   1f4d0:	00f10c31 	.word	0x00f10c31
   1f4d4:	00f10c35 	.word	0x00f10c35

0001f4d8 <LLF_RND_RepetitionCounterTest.part.0>:
   1f4d8:	b4f0      	push	{r4, r5, r6, r7}
   1f4da:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1f4de:	2400      	movs	r4, #0
   1f4e0:	f10c 3cff 	add.w	ip, ip, #4294967295
   1f4e4:	4626      	mov	r6, r4
   1f4e6:	4627      	mov	r7, r4
   1f4e8:	e006      	b.n	1f4f8 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1f4ea:	429f      	cmp	r7, r3
   1f4ec:	d016      	beq.n	1f51c <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1f4ee:	2601      	movs	r6, #1
   1f4f0:	4565      	cmp	r5, ip
   1f4f2:	d819      	bhi.n	1f528 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1f4f4:	462c      	mov	r4, r5
   1f4f6:	461f      	mov	r7, r3
   1f4f8:	0963      	lsrs	r3, r4, #5
   1f4fa:	f004 011f 	and.w	r1, r4, #31
   1f4fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1f502:	291f      	cmp	r1, #31
   1f504:	fa23 f301 	lsr.w	r3, r3, r1
   1f508:	f104 0501 	add.w	r5, r4, #1
   1f50c:	bf18      	it	ne
   1f50e:	f003 0301 	andne.w	r3, r3, #1
   1f512:	2c00      	cmp	r4, #0
   1f514:	d1e9      	bne.n	1f4ea <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1f516:	2601      	movs	r6, #1
   1f518:	4635      	mov	r5, r6
   1f51a:	e7eb      	b.n	1f4f4 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1f51c:	3601      	adds	r6, #1
   1f51e:	4296      	cmp	r6, r2
   1f520:	d1e6      	bne.n	1f4f0 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1f522:	4803      	ldr	r0, [pc, #12]	; (1f530 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1f524:	bcf0      	pop	{r4, r5, r6, r7}
   1f526:	4770      	bx	lr
   1f528:	2000      	movs	r0, #0
   1f52a:	bcf0      	pop	{r4, r5, r6, r7}
   1f52c:	4770      	bx	lr
   1f52e:	bf00      	nop
   1f530:	00f10c36 	.word	0x00f10c36

0001f534 <LLF_RND_AdaptiveProportionTest>:
   1f534:	2800      	cmp	r0, #0
   1f536:	d061      	beq.n	1f5fc <LLF_RND_AdaptiveProportionTest+0xc8>
   1f538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f53c:	1e4c      	subs	r4, r1, #1
   1f53e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1f542:	d227      	bcs.n	1f594 <LLF_RND_AdaptiveProportionTest+0x60>
   1f544:	b333      	cbz	r3, 1f594 <LLF_RND_AdaptiveProportionTest+0x60>
   1f546:	b32a      	cbz	r2, 1f594 <LLF_RND_AdaptiveProportionTest+0x60>
   1f548:	00cd      	lsls	r5, r1, #3
   1f54a:	2b01      	cmp	r3, #1
   1f54c:	f105 3eff 	add.w	lr, r5, #4294967295
   1f550:	d030      	beq.n	1f5b4 <LLF_RND_AdaptiveProportionTest+0x80>
   1f552:	2100      	movs	r1, #0
   1f554:	468c      	mov	ip, r1
   1f556:	460f      	mov	r7, r1
   1f558:	460e      	mov	r6, r1
   1f55a:	f103 38ff 	add.w	r8, r3, #4294967295
   1f55e:	094c      	lsrs	r4, r1, #5
   1f560:	f001 051f 	and.w	r5, r1, #31
   1f564:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1f568:	2d1f      	cmp	r5, #31
   1f56a:	fa24 f405 	lsr.w	r4, r4, r5
   1f56e:	bf18      	it	ne
   1f570:	f004 0401 	andne.w	r4, r4, #1
   1f574:	b921      	cbnz	r1, 1f580 <LLF_RND_AdaptiveProportionTest+0x4c>
   1f576:	2601      	movs	r6, #1
   1f578:	46b4      	mov	ip, r6
   1f57a:	4631      	mov	r1, r6
   1f57c:	4627      	mov	r7, r4
   1f57e:	e7ee      	b.n	1f55e <LLF_RND_AdaptiveProportionTest+0x2a>
   1f580:	42b3      	cmp	r3, r6
   1f582:	d013      	beq.n	1f5ac <LLF_RND_AdaptiveProportionTest+0x78>
   1f584:	42a7      	cmp	r7, r4
   1f586:	d101      	bne.n	1f58c <LLF_RND_AdaptiveProportionTest+0x58>
   1f588:	f10c 0c01 	add.w	ip, ip, #1
   1f58c:	4546      	cmp	r6, r8
   1f58e:	d104      	bne.n	1f59a <LLF_RND_AdaptiveProportionTest+0x66>
   1f590:	4562      	cmp	r2, ip
   1f592:	d202      	bcs.n	1f59a <LLF_RND_AdaptiveProportionTest+0x66>
   1f594:	481a      	ldr	r0, [pc, #104]	; (1f600 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1f596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f59a:	463c      	mov	r4, r7
   1f59c:	3101      	adds	r1, #1
   1f59e:	458e      	cmp	lr, r1
   1f5a0:	f106 0601 	add.w	r6, r6, #1
   1f5a4:	d2ea      	bcs.n	1f57c <LLF_RND_AdaptiveProportionTest+0x48>
   1f5a6:	2000      	movs	r0, #0
   1f5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f5ac:	2600      	movs	r6, #0
   1f5ae:	f04f 0c01 	mov.w	ip, #1
   1f5b2:	e7f3      	b.n	1f59c <LLF_RND_AdaptiveProportionTest+0x68>
   1f5b4:	2600      	movs	r6, #0
   1f5b6:	46b4      	mov	ip, r6
   1f5b8:	4637      	mov	r7, r6
   1f5ba:	4634      	mov	r4, r6
   1f5bc:	0961      	lsrs	r1, r4, #5
   1f5be:	f004 031f 	and.w	r3, r4, #31
   1f5c2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1f5c6:	2b1f      	cmp	r3, #31
   1f5c8:	fa21 f103 	lsr.w	r1, r1, r3
   1f5cc:	bf18      	it	ne
   1f5ce:	f001 0101 	andne.w	r1, r1, #1
   1f5d2:	b13c      	cbz	r4, 1f5e4 <LLF_RND_AdaptiveProportionTest+0xb0>
   1f5d4:	b95f      	cbnz	r7, 1f5ee <LLF_RND_AdaptiveProportionTest+0xba>
   1f5d6:	458c      	cmp	ip, r1
   1f5d8:	d001      	beq.n	1f5de <LLF_RND_AdaptiveProportionTest+0xaa>
   1f5da:	4661      	mov	r1, ip
   1f5dc:	e008      	b.n	1f5f0 <LLF_RND_AdaptiveProportionTest+0xbc>
   1f5de:	3601      	adds	r6, #1
   1f5e0:	4661      	mov	r1, ip
   1f5e2:	e005      	b.n	1f5f0 <LLF_RND_AdaptiveProportionTest+0xbc>
   1f5e4:	2601      	movs	r6, #1
   1f5e6:	4634      	mov	r4, r6
   1f5e8:	468c      	mov	ip, r1
   1f5ea:	2701      	movs	r7, #1
   1f5ec:	e7e6      	b.n	1f5bc <LLF_RND_AdaptiveProportionTest+0x88>
   1f5ee:	463e      	mov	r6, r7
   1f5f0:	42b2      	cmp	r2, r6
   1f5f2:	d3cf      	bcc.n	1f594 <LLF_RND_AdaptiveProportionTest+0x60>
   1f5f4:	3401      	adds	r4, #1
   1f5f6:	42ac      	cmp	r4, r5
   1f5f8:	d1f6      	bne.n	1f5e8 <LLF_RND_AdaptiveProportionTest+0xb4>
   1f5fa:	e7d4      	b.n	1f5a6 <LLF_RND_AdaptiveProportionTest+0x72>
   1f5fc:	4800      	ldr	r0, [pc, #0]	; (1f600 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1f5fe:	4770      	bx	lr
   1f600:	00f10c37 	.word	0x00f10c37

0001f604 <getTrngSource>:
   1f604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f608:	b08d      	sub	sp, #52	; 0x34
   1f60a:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1f60e:	4607      	mov	r7, r0
   1f610:	460c      	mov	r4, r1
   1f612:	2d00      	cmp	r5, #0
   1f614:	d14d      	bne.n	1f6b2 <getTrngSource+0xae>
   1f616:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1f61a:	601e      	str	r6, [r3, #0]
   1f61c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f61e:	2100      	movs	r1, #0
   1f620:	6019      	str	r1, [r3, #0]
   1f622:	2a00      	cmp	r2, #0
   1f624:	f000 8120 	beq.w	1f868 <getTrngSource+0x264>
   1f628:	4a9b      	ldr	r2, [pc, #620]	; (1f898 <getTrngSource+0x294>)
   1f62a:	4b9c      	ldr	r3, [pc, #624]	; (1f89c <getTrngSource+0x298>)
   1f62c:	6811      	ldr	r1, [r2, #0]
   1f62e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f630:	681b      	ldr	r3, [r3, #0]
   1f632:	429a      	cmp	r2, r3
   1f634:	d148      	bne.n	1f6c8 <getTrngSource+0xc4>
   1f636:	290a      	cmp	r1, #10
   1f638:	d146      	bne.n	1f6c8 <getTrngSource+0xc4>
   1f63a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   1f63e:	9304      	str	r3, [sp, #16]
   1f640:	4b97      	ldr	r3, [pc, #604]	; (1f8a0 <getTrngSource+0x29c>)
   1f642:	fba3 230a 	umull	r2, r3, r3, sl
   1f646:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1f64a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1f64e:	f106 0208 	add.w	r2, r6, #8
   1f652:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1f656:	2304      	movs	r3, #4
   1f658:	9203      	str	r2, [sp, #12]
   1f65a:	9302      	str	r3, [sp, #8]
   1f65c:	46b8      	mov	r8, r7
   1f65e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f660:	f8c3 a000 	str.w	sl, [r3]
   1f664:	f1ba 0f00 	cmp.w	sl, #0
   1f668:	f000 80c4 	beq.w	1f7f4 <getTrngSource+0x1f0>
   1f66c:	9e03      	ldr	r6, [sp, #12]
   1f66e:	4655      	mov	r5, sl
   1f670:	f04f 0900 	mov.w	r9, #0
   1f674:	f000 fc4e 	bl	1ff14 <LLF_RND_TurnOffTrng>
   1f678:	2300      	movs	r3, #0
   1f67a:	9305      	str	r3, [sp, #20]
   1f67c:	f1b8 0f00 	cmp.w	r8, #0
   1f680:	f000 80e6 	beq.w	1f850 <getTrngSource+0x24c>
   1f684:	2c00      	cmp	r4, #0
   1f686:	f000 80e3 	beq.w	1f850 <getTrngSource+0x24c>
   1f68a:	9b04      	ldr	r3, [sp, #16]
   1f68c:	2b00      	cmp	r3, #0
   1f68e:	f000 80dd 	beq.w	1f84c <getTrngSource+0x248>
   1f692:	a904      	add	r1, sp, #16
   1f694:	4620      	mov	r0, r4
   1f696:	f000 fc2d 	bl	1fef4 <LLF_RND_GetFastestRosc>
   1f69a:	b1b8      	cbz	r0, 1f6cc <getTrngSource+0xc8>
   1f69c:	4b81      	ldr	r3, [pc, #516]	; (1f8a4 <getTrngSource+0x2a0>)
   1f69e:	4298      	cmp	r0, r3
   1f6a0:	f040 80a8 	bne.w	1f7f4 <getTrngSource+0x1f0>
   1f6a4:	9002      	str	r0, [sp, #8]
   1f6a6:	f000 fc35 	bl	1ff14 <LLF_RND_TurnOffTrng>
   1f6aa:	9802      	ldr	r0, [sp, #8]
   1f6ac:	b00d      	add	sp, #52	; 0x34
   1f6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1f6b6:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1f6ba:	3001      	adds	r0, #1
   1f6bc:	bf14      	ite	ne
   1f6be:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1f6c2:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1f6c6:	e7a8      	b.n	1f61a <getTrngSource+0x16>
   1f6c8:	4877      	ldr	r0, [pc, #476]	; (1f8a8 <getTrngSource+0x2a4>)
   1f6ca:	e7eb      	b.n	1f6a4 <getTrngSource+0xa0>
   1f6cc:	9804      	ldr	r0, [sp, #16]
   1f6ce:	4621      	mov	r1, r4
   1f6d0:	f000 fbf2 	bl	1feb8 <LLF_RND_GetRoscSampleCnt>
   1f6d4:	2800      	cmp	r0, #0
   1f6d6:	d1e1      	bne.n	1f69c <getTrngSource+0x98>
   1f6d8:	9f04      	ldr	r7, [sp, #16]
   1f6da:	2f08      	cmp	r7, #8
   1f6dc:	f000 80ba 	beq.w	1f854 <getTrngSource+0x250>
   1f6e0:	2f04      	cmp	r7, #4
   1f6e2:	f000 80b9 	beq.w	1f858 <getTrngSource+0x254>
   1f6e6:	f1a7 0702 	sub.w	r7, r7, #2
   1f6ea:	fab7 f787 	clz	r7, r7
   1f6ee:	097f      	lsrs	r7, r7, #5
   1f6f0:	496e      	ldr	r1, [pc, #440]	; (1f8ac <getTrngSource+0x2a8>)
   1f6f2:	2301      	movs	r3, #1
   1f6f4:	600b      	str	r3, [r1, #0]
   1f6f6:	f841 3c84 	str.w	r3, [r1, #-132]
   1f6fa:	4619      	mov	r1, r3
   1f6fc:	4b6b      	ldr	r3, [pc, #428]	; (1f8ac <getTrngSource+0x2a8>)
   1f6fe:	4867      	ldr	r0, [pc, #412]	; (1f89c <getTrngSource+0x298>)
   1f700:	6019      	str	r1, [r3, #0]
   1f702:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f704:	6003      	str	r3, [r0, #0]
   1f706:	6800      	ldr	r0, [r0, #0]
   1f708:	4283      	cmp	r3, r0
   1f70a:	d1f7      	bne.n	1f6fc <getTrngSource+0xf8>
   1f70c:	4a68      	ldr	r2, [pc, #416]	; (1f8b0 <getTrngSource+0x2ac>)
   1f70e:	2300      	movs	r3, #0
   1f710:	6013      	str	r3, [r2, #0]
   1f712:	f04f 30ff 	mov.w	r0, #4294967295
   1f716:	f7ff fd05 	bl	1f124 <CC_HalClearInterruptBit>
   1f71a:	2300      	movs	r3, #0
   1f71c:	4618      	mov	r0, r3
   1f71e:	4b65      	ldr	r3, [pc, #404]	; (1f8b4 <getTrngSource+0x2b0>)
   1f720:	f06f 011b 	mvn.w	r1, #27
   1f724:	6019      	str	r1, [r3, #0]
   1f726:	f7ff fd0b 	bl	1f140 <CC_HalMaskInterrupt>
   1f72a:	4963      	ldr	r1, [pc, #396]	; (1f8b8 <getTrngSource+0x2b4>)
   1f72c:	4b63      	ldr	r3, [pc, #396]	; (1f8bc <getTrngSource+0x2b8>)
   1f72e:	600f      	str	r7, [r1, #0]
   1f730:	6818      	ldr	r0, [r3, #0]
   1f732:	4f5b      	ldr	r7, [pc, #364]	; (1f8a0 <getTrngSource+0x29c>)
   1f734:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1f738:	f7ff fd02 	bl	1f140 <CC_HalMaskInterrupt>
   1f73c:	4b56      	ldr	r3, [pc, #344]	; (1f898 <getTrngSource+0x294>)
   1f73e:	4860      	ldr	r0, [pc, #384]	; (1f8c0 <getTrngSource+0x2bc>)
   1f740:	210a      	movs	r1, #10
   1f742:	6019      	str	r1, [r3, #0]
   1f744:	6921      	ldr	r1, [r4, #16]
   1f746:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f748:	fba7 c101 	umull	ip, r1, r7, r1
   1f74c:	0909      	lsrs	r1, r1, #4
   1f74e:	fb03 f301 	mul.w	r3, r3, r1
   1f752:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f756:	03db      	lsls	r3, r3, #15
   1f758:	099b      	lsrs	r3, r3, #6
   1f75a:	6003      	str	r3, [r0, #0]
   1f75c:	4b54      	ldr	r3, [pc, #336]	; (1f8b0 <getTrngSource+0x2ac>)
   1f75e:	2201      	movs	r2, #1
   1f760:	601a      	str	r2, [r3, #0]
   1f762:	9904      	ldr	r1, [sp, #16]
   1f764:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1f768:	020b      	lsls	r3, r1, #8
   1f76a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1f76e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1f772:	4313      	orrs	r3, r2
   1f774:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1f778:	a805      	add	r0, sp, #20
   1f77a:	f000 fb8d 	bl	1fe98 <LLF_RND_WaitRngInterrupt>
   1f77e:	9b05      	ldr	r3, [sp, #20]
   1f780:	f003 031a 	and.w	r3, r3, #26
   1f784:	4303      	orrs	r3, r0
   1f786:	d135      	bne.n	1f7f4 <getTrngSource+0x1f0>
   1f788:	4a4e      	ldr	r2, [pc, #312]	; (1f8c4 <getTrngSource+0x2c0>)
   1f78a:	4b4f      	ldr	r3, [pc, #316]	; (1f8c8 <getTrngSource+0x2c4>)
   1f78c:	6812      	ldr	r2, [r2, #0]
   1f78e:	9206      	str	r2, [sp, #24]
   1f790:	681a      	ldr	r2, [r3, #0]
   1f792:	9207      	str	r2, [sp, #28]
   1f794:	685a      	ldr	r2, [r3, #4]
   1f796:	9208      	str	r2, [sp, #32]
   1f798:	689a      	ldr	r2, [r3, #8]
   1f79a:	9209      	str	r2, [sp, #36]	; 0x24
   1f79c:	68da      	ldr	r2, [r3, #12]
   1f79e:	920a      	str	r2, [sp, #40]	; 0x28
   1f7a0:	3310      	adds	r3, #16
   1f7a2:	fba7 2705 	umull	r2, r7, r7, r5
   1f7a6:	681b      	ldr	r3, [r3, #0]
   1f7a8:	930b      	str	r3, [sp, #44]	; 0x2c
   1f7aa:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1f7ae:	d102      	bne.n	1f7b6 <getTrngSource+0x1b2>
   1f7b0:	f1bb 0f00 	cmp.w	fp, #0
   1f7b4:	d141      	bne.n	1f83a <getTrngSource+0x236>
   1f7b6:	2218      	movs	r2, #24
   1f7b8:	4630      	mov	r0, r6
   1f7ba:	eb0d 0102 	add.w	r1, sp, r2
   1f7be:	f000 fb0f 	bl	1fde0 <CC_PalMemCopyPlat>
   1f7c2:	3d18      	subs	r5, #24
   1f7c4:	3618      	adds	r6, #24
   1f7c6:	f109 0901 	add.w	r9, r9, #1
   1f7ca:	2d00      	cmp	r5, #0
   1f7cc:	f47f af52 	bne.w	1f674 <getTrngSource+0x70>
   1f7d0:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1f7d4:	d85d      	bhi.n	1f892 <getTrngSource+0x28e>
   1f7d6:	9d03      	ldr	r5, [sp, #12]
   1f7d8:	6962      	ldr	r2, [r4, #20]
   1f7da:	4651      	mov	r1, sl
   1f7dc:	4628      	mov	r0, r5
   1f7de:	f7ff fe7b 	bl	1f4d8 <LLF_RND_RepetitionCounterTest.part.0>
   1f7e2:	2800      	cmp	r0, #0
   1f7e4:	d04b      	beq.n	1f87e <getTrngSource+0x27a>
   1f7e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1f7e8:	2300      	movs	r3, #0
   1f7ea:	6013      	str	r3, [r2, #0]
   1f7ec:	4b2d      	ldr	r3, [pc, #180]	; (1f8a4 <getTrngSource+0x2a0>)
   1f7ee:	4298      	cmp	r0, r3
   1f7f0:	f43f af58 	beq.w	1f6a4 <getTrngSource+0xa0>
   1f7f4:	9d04      	ldr	r5, [sp, #16]
   1f7f6:	2d08      	cmp	r5, #8
   1f7f8:	d034      	beq.n	1f864 <getTrngSource+0x260>
   1f7fa:	2200      	movs	r2, #0
   1f7fc:	ab04      	add	r3, sp, #16
   1f7fe:	006d      	lsls	r5, r5, #1
   1f800:	9200      	str	r2, [sp, #0]
   1f802:	4621      	mov	r1, r4
   1f804:	4640      	mov	r0, r8
   1f806:	9504      	str	r5, [sp, #16]
   1f808:	f7ff fdb8 	bl	1f37c <startTrngHW>
   1f80c:	4b2f      	ldr	r3, [pc, #188]	; (1f8cc <getTrngSource+0x2c8>)
   1f80e:	4298      	cmp	r0, r3
   1f810:	d024      	beq.n	1f85c <getTrngSource+0x258>
   1f812:	2800      	cmp	r0, #0
   1f814:	f47f af46 	bne.w	1f6a4 <getTrngSource+0xa0>
   1f818:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1f81c:	0a13      	lsrs	r3, r2, #8
   1f81e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1f822:	4313      	orrs	r3, r2
   1f824:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f828:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1f82c:	9b02      	ldr	r3, [sp, #8]
   1f82e:	3b01      	subs	r3, #1
   1f830:	9302      	str	r3, [sp, #8]
   1f832:	f47f af14 	bne.w	1f65e <getTrngSource+0x5a>
   1f836:	2000      	movs	r0, #0
   1f838:	e734      	b.n	1f6a4 <getTrngSource+0xa0>
   1f83a:	4630      	mov	r0, r6
   1f83c:	465a      	mov	r2, fp
   1f83e:	a906      	add	r1, sp, #24
   1f840:	f000 face 	bl	1fde0 <CC_PalMemCopyPlat>
   1f844:	eba5 050b 	sub.w	r5, r5, fp
   1f848:	445e      	add	r6, fp
   1f84a:	e7bc      	b.n	1f7c6 <getTrngSource+0x1c2>
   1f84c:	481f      	ldr	r0, [pc, #124]	; (1f8cc <getTrngSource+0x2c8>)
   1f84e:	e725      	b.n	1f69c <getTrngSource+0x98>
   1f850:	481f      	ldr	r0, [pc, #124]	; (1f8d0 <getTrngSource+0x2cc>)
   1f852:	e723      	b.n	1f69c <getTrngSource+0x98>
   1f854:	2703      	movs	r7, #3
   1f856:	e74b      	b.n	1f6f0 <getTrngSource+0xec>
   1f858:	2702      	movs	r7, #2
   1f85a:	e749      	b.n	1f6f0 <getTrngSource+0xec>
   1f85c:	6a23      	ldr	r3, [r4, #32]
   1f85e:	2b00      	cmp	r3, #0
   1f860:	f43f af20 	beq.w	1f6a4 <getTrngSource+0xa0>
   1f864:	481b      	ldr	r0, [pc, #108]	; (1f8d4 <getTrngSource+0x2d0>)
   1f866:	e71d      	b.n	1f6a4 <getTrngSource+0xa0>
   1f868:	9500      	str	r5, [sp, #0]
   1f86a:	ab04      	add	r3, sp, #16
   1f86c:	2201      	movs	r2, #1
   1f86e:	4621      	mov	r1, r4
   1f870:	4638      	mov	r0, r7
   1f872:	f7ff fd83 	bl	1f37c <startTrngHW>
   1f876:	2800      	cmp	r0, #0
   1f878:	f43f aee2 	beq.w	1f640 <getTrngSource+0x3c>
   1f87c:	e712      	b.n	1f6a4 <getTrngSource+0xa0>
   1f87e:	69a2      	ldr	r2, [r4, #24]
   1f880:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f884:	4651      	mov	r1, sl
   1f886:	4628      	mov	r0, r5
   1f888:	f7ff fe54 	bl	1f534 <LLF_RND_AdaptiveProportionTest>
   1f88c:	2800      	cmp	r0, #0
   1f88e:	d1aa      	bne.n	1f7e6 <getTrngSource+0x1e2>
   1f890:	e7d1      	b.n	1f836 <getTrngSource+0x232>
   1f892:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1f894:	601d      	str	r5, [r3, #0]
   1f896:	e7ad      	b.n	1f7f4 <getTrngSource+0x1f0>
   1f898:	5002b138 	.word	0x5002b138
   1f89c:	5002b130 	.word	0x5002b130
   1f8a0:	aaaaaaab 	.word	0xaaaaaaab
   1f8a4:	00f10c02 	.word	0x00f10c02
   1f8a8:	00f10c30 	.word	0x00f10c30
   1f8ac:	5002b1c4 	.word	0x5002b1c4
   1f8b0:	5002b12c 	.word	0x5002b12c
   1f8b4:	5002b100 	.word	0x5002b100
   1f8b8:	5002b10c 	.word	0x5002b10c
   1f8bc:	5002ba04 	.word	0x5002ba04
   1f8c0:	5002b1d8 	.word	0x5002b1d8
   1f8c4:	5002b114 	.word	0x5002b114
   1f8c8:	5002b118 	.word	0x5002b118
   1f8cc:	00f10c31 	.word	0x00f10c31
   1f8d0:	00f10c35 	.word	0x00f10c35
   1f8d4:	00f10c32 	.word	0x00f10c32

0001f8d8 <LLF_RND_GetTrngSource>:
   1f8d8:	b430      	push	{r4, r5}
   1f8da:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1f8de:	9d04      	ldr	r5, [sp, #16]
   1f8e0:	9402      	str	r4, [sp, #8]
   1f8e2:	2400      	movs	r4, #0
   1f8e4:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1f8e8:	bc30      	pop	{r4, r5}
   1f8ea:	f7ff be8b 	b.w	1f604 <getTrngSource>
   1f8ee:	bf00      	nop

0001f8f0 <LLF_RND_RunTrngStartupTest>:
   1f8f0:	b510      	push	{r4, lr}
   1f8f2:	b086      	sub	sp, #24
   1f8f4:	ab05      	add	r3, sp, #20
   1f8f6:	2401      	movs	r4, #1
   1f8f8:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1f8fc:	9300      	str	r3, [sp, #0]
   1f8fe:	2200      	movs	r2, #0
   1f900:	ab04      	add	r3, sp, #16
   1f902:	f7ff fe7f 	bl	1f604 <getTrngSource>
   1f906:	b006      	add	sp, #24
   1f908:	bd10      	pop	{r4, pc}
   1f90a:	bf00      	nop

0001f90c <mbedtls_hardware_poll>:
   1f90c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f90e:	b089      	sub	sp, #36	; 0x24
   1f910:	9205      	str	r2, [sp, #20]
   1f912:	2900      	cmp	r1, #0
   1f914:	d064      	beq.n	1f9e0 <mbedtls_hardware_poll+0xd4>
   1f916:	461c      	mov	r4, r3
   1f918:	2b00      	cmp	r3, #0
   1f91a:	d061      	beq.n	1f9e0 <mbedtls_hardware_poll+0xd4>
   1f91c:	4615      	mov	r5, r2
   1f91e:	2a00      	cmp	r2, #0
   1f920:	d05e      	beq.n	1f9e0 <mbedtls_hardware_poll+0xd4>
   1f922:	4f31      	ldr	r7, [pc, #196]	; (1f9e8 <mbedtls_hardware_poll+0xdc>)
   1f924:	460e      	mov	r6, r1
   1f926:	6838      	ldr	r0, [r7, #0]
   1f928:	f04f 31ff 	mov.w	r1, #4294967295
   1f92c:	f7ff fca2 	bl	1f274 <CC_PalMutexLock>
   1f930:	2800      	cmp	r0, #0
   1f932:	d14b      	bne.n	1f9cc <mbedtls_hardware_poll+0xc0>
   1f934:	2000      	movs	r0, #0
   1f936:	f7ff fccd 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   1f93a:	2800      	cmp	r0, #0
   1f93c:	d142      	bne.n	1f9c4 <mbedtls_hardware_poll+0xb8>
   1f93e:	482b      	ldr	r0, [pc, #172]	; (1f9ec <mbedtls_hardware_poll+0xe0>)
   1f940:	f000 fa12 	bl	1fd68 <RNG_PLAT_SetUserRngParameters>
   1f944:	b1d8      	cbz	r0, 1f97e <mbedtls_hardware_poll+0x72>
   1f946:	2001      	movs	r0, #1
   1f948:	f04f 36ff 	mov.w	r6, #4294967295
   1f94c:	f7ff fcc2 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   1f950:	2800      	cmp	r0, #0
   1f952:	d133      	bne.n	1f9bc <mbedtls_hardware_poll+0xb0>
   1f954:	4826      	ldr	r0, [pc, #152]	; (1f9f0 <mbedtls_hardware_poll+0xe4>)
   1f956:	f44f 7108 	mov.w	r1, #544	; 0x220
   1f95a:	f7fe fe47 	bl	1e5ec <mbedtls_zeroize_internal>
   1f95e:	4825      	ldr	r0, [pc, #148]	; (1f9f4 <mbedtls_hardware_poll+0xe8>)
   1f960:	21dc      	movs	r1, #220	; 0xdc
   1f962:	f7fe fe43 	bl	1e5ec <mbedtls_zeroize_internal>
   1f966:	4821      	ldr	r0, [pc, #132]	; (1f9ec <mbedtls_hardware_poll+0xe0>)
   1f968:	2128      	movs	r1, #40	; 0x28
   1f96a:	f7fe fe3f 	bl	1e5ec <mbedtls_zeroize_internal>
   1f96e:	6838      	ldr	r0, [r7, #0]
   1f970:	f7ff fc88 	bl	1f284 <CC_PalMutexUnlock>
   1f974:	2800      	cmp	r0, #0
   1f976:	d12d      	bne.n	1f9d4 <mbedtls_hardware_poll+0xc8>
   1f978:	4630      	mov	r0, r6
   1f97a:	b009      	add	sp, #36	; 0x24
   1f97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f97e:	491c      	ldr	r1, [pc, #112]	; (1f9f0 <mbedtls_hardware_poll+0xe4>)
   1f980:	9003      	str	r0, [sp, #12]
   1f982:	ab07      	add	r3, sp, #28
   1f984:	4602      	mov	r2, r0
   1f986:	9102      	str	r1, [sp, #8]
   1f988:	9300      	str	r3, [sp, #0]
   1f98a:	4918      	ldr	r1, [pc, #96]	; (1f9ec <mbedtls_hardware_poll+0xe0>)
   1f98c:	4819      	ldr	r0, [pc, #100]	; (1f9f4 <mbedtls_hardware_poll+0xe8>)
   1f98e:	9401      	str	r4, [sp, #4]
   1f990:	ab05      	add	r3, sp, #20
   1f992:	f7ff ffa1 	bl	1f8d8 <LLF_RND_GetTrngSource>
   1f996:	4603      	mov	r3, r0
   1f998:	2800      	cmp	r0, #0
   1f99a:	d1d4      	bne.n	1f946 <mbedtls_hardware_poll+0x3a>
   1f99c:	6822      	ldr	r2, [r4, #0]
   1f99e:	42aa      	cmp	r2, r5
   1f9a0:	d3d1      	bcc.n	1f946 <mbedtls_hardware_poll+0x3a>
   1f9a2:	9907      	ldr	r1, [sp, #28]
   1f9a4:	4630      	mov	r0, r6
   1f9a6:	3108      	adds	r1, #8
   1f9a8:	462a      	mov	r2, r5
   1f9aa:	461e      	mov	r6, r3
   1f9ac:	f000 fa18 	bl	1fde0 <CC_PalMemCopyPlat>
   1f9b0:	6025      	str	r5, [r4, #0]
   1f9b2:	2001      	movs	r0, #1
   1f9b4:	f7ff fc8e 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   1f9b8:	2800      	cmp	r0, #0
   1f9ba:	d0cb      	beq.n	1f954 <mbedtls_hardware_poll+0x48>
   1f9bc:	480e      	ldr	r0, [pc, #56]	; (1f9f8 <mbedtls_hardware_poll+0xec>)
   1f9be:	f7fe fd0d 	bl	1e3dc <CC_PalAbort>
   1f9c2:	e7c7      	b.n	1f954 <mbedtls_hardware_poll+0x48>
   1f9c4:	480d      	ldr	r0, [pc, #52]	; (1f9fc <mbedtls_hardware_poll+0xf0>)
   1f9c6:	f7fe fd09 	bl	1e3dc <CC_PalAbort>
   1f9ca:	e7b8      	b.n	1f93e <mbedtls_hardware_poll+0x32>
   1f9cc:	480c      	ldr	r0, [pc, #48]	; (1fa00 <mbedtls_hardware_poll+0xf4>)
   1f9ce:	f7fe fd05 	bl	1e3dc <CC_PalAbort>
   1f9d2:	e7af      	b.n	1f934 <mbedtls_hardware_poll+0x28>
   1f9d4:	480b      	ldr	r0, [pc, #44]	; (1fa04 <mbedtls_hardware_poll+0xf8>)
   1f9d6:	f7fe fd01 	bl	1e3dc <CC_PalAbort>
   1f9da:	4630      	mov	r0, r6
   1f9dc:	b009      	add	sp, #36	; 0x24
   1f9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f9e0:	f04f 36ff 	mov.w	r6, #4294967295
   1f9e4:	e7c8      	b.n	1f978 <mbedtls_hardware_poll+0x6c>
   1f9e6:	bf00      	nop
   1f9e8:	20000658 	.word	0x20000658
   1f9ec:	200038ec 	.word	0x200038ec
   1f9f0:	200036cc 	.word	0x200036cc
   1f9f4:	200035f0 	.word	0x200035f0
   1f9f8:	000280f0 	.word	0x000280f0
   1f9fc:	000280d0 	.word	0x000280d0
   1fa00:	000280b8 	.word	0x000280b8
   1fa04:	00028148 	.word	0x00028148

0001fa08 <cc_mbedtls_aes_init>:
   1fa08:	b510      	push	{r4, lr}
   1fa0a:	4604      	mov	r4, r0
   1fa0c:	b130      	cbz	r0, 1fa1c <cc_mbedtls_aes_init+0x14>
   1fa0e:	2200      	movs	r2, #0
   1fa10:	2301      	movs	r3, #1
   1fa12:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1fa16:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1fa1a:	bd10      	pop	{r4, pc}
   1fa1c:	4801      	ldr	r0, [pc, #4]	; (1fa24 <cc_mbedtls_aes_init+0x1c>)
   1fa1e:	f7fe fcdd 	bl	1e3dc <CC_PalAbort>
   1fa22:	e7f4      	b.n	1fa0e <cc_mbedtls_aes_init+0x6>
   1fa24:	00028160 	.word	0x00028160

0001fa28 <cc_mbedtls_aes_free>:
   1fa28:	b118      	cbz	r0, 1fa32 <cc_mbedtls_aes_free+0xa>
   1fa2a:	2274      	movs	r2, #116	; 0x74
   1fa2c:	2100      	movs	r1, #0
   1fa2e:	f000 b9d9 	b.w	1fde4 <CC_PalMemSetPlat>
   1fa32:	4770      	bx	lr

0001fa34 <cc_mbedtls_aes_setkey_enc>:
   1fa34:	b190      	cbz	r0, 1fa5c <cc_mbedtls_aes_setkey_enc+0x28>
   1fa36:	b1a1      	cbz	r1, 1fa62 <cc_mbedtls_aes_setkey_enc+0x2e>
   1fa38:	b510      	push	{r4, lr}
   1fa3a:	2a80      	cmp	r2, #128	; 0x80
   1fa3c:	f04f 0400 	mov.w	r4, #0
   1fa40:	6384      	str	r4, [r0, #56]	; 0x38
   1fa42:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1fa46:	d106      	bne.n	1fa56 <cc_mbedtls_aes_setkey_enc+0x22>
   1fa48:	6304      	str	r4, [r0, #48]	; 0x30
   1fa4a:	2210      	movs	r2, #16
   1fa4c:	3010      	adds	r0, #16
   1fa4e:	f000 f9c7 	bl	1fde0 <CC_PalMemCopyPlat>
   1fa52:	4620      	mov	r0, r4
   1fa54:	bd10      	pop	{r4, pc}
   1fa56:	f06f 001f 	mvn.w	r0, #31
   1fa5a:	bd10      	pop	{r4, pc}
   1fa5c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1fa60:	4770      	bx	lr
   1fa62:	f06f 001f 	mvn.w	r0, #31
   1fa66:	4770      	bx	lr

0001fa68 <cc_mbedtls_aes_crypt_ecb>:
   1fa68:	b320      	cbz	r0, 1fab4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1fa6a:	b31a      	cbz	r2, 1fab4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1fa6c:	b313      	cbz	r3, 1fab4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1fa6e:	2901      	cmp	r1, #1
   1fa70:	d820      	bhi.n	1fab4 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1fa72:	b570      	push	{r4, r5, r6, lr}
   1fa74:	4604      	mov	r4, r0
   1fa76:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1fa78:	b086      	sub	sp, #24
   1fa7a:	d016      	beq.n	1faaa <cc_mbedtls_aes_crypt_ecb+0x42>
   1fa7c:	2901      	cmp	r1, #1
   1fa7e:	d116      	bne.n	1faae <cc_mbedtls_aes_crypt_ecb+0x46>
   1fa80:	2100      	movs	r1, #0
   1fa82:	2510      	movs	r5, #16
   1fa84:	ae04      	add	r6, sp, #16
   1fa86:	6361      	str	r1, [r4, #52]	; 0x34
   1fa88:	4610      	mov	r0, r2
   1fa8a:	e9cd 5600 	strd	r5, r6, [sp]
   1fa8e:	aa02      	add	r2, sp, #8
   1fa90:	4629      	mov	r1, r5
   1fa92:	f000 fa4d 	bl	1ff30 <SetDataBuffersInfo>
   1fa96:	b950      	cbnz	r0, 1faae <cc_mbedtls_aes_crypt_ecb+0x46>
   1fa98:	462b      	mov	r3, r5
   1fa9a:	4632      	mov	r2, r6
   1fa9c:	a902      	add	r1, sp, #8
   1fa9e:	4620      	mov	r0, r4
   1faa0:	f000 fcda 	bl	20458 <ProcessAesDrv>
   1faa4:	b918      	cbnz	r0, 1faae <cc_mbedtls_aes_crypt_ecb+0x46>
   1faa6:	b006      	add	sp, #24
   1faa8:	bd70      	pop	{r4, r5, r6, pc}
   1faaa:	2900      	cmp	r1, #0
   1faac:	d0e8      	beq.n	1fa80 <cc_mbedtls_aes_crypt_ecb+0x18>
   1faae:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1fab2:	e7f8      	b.n	1faa6 <cc_mbedtls_aes_crypt_ecb+0x3e>
   1fab4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1fab8:	4770      	bx	lr
   1faba:	bf00      	nop

0001fabc <cc_mbedtls_sha256_init>:
   1fabc:	b510      	push	{r4, lr}
   1fabe:	4604      	mov	r4, r0
   1fac0:	b128      	cbz	r0, 1face <cc_mbedtls_sha256_init+0x12>
   1fac2:	4620      	mov	r0, r4
   1fac4:	21f0      	movs	r1, #240	; 0xf0
   1fac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1faca:	f000 b98d 	b.w	1fde8 <CC_PalMemSetZeroPlat>
   1face:	4804      	ldr	r0, [pc, #16]	; (1fae0 <cc_mbedtls_sha256_init+0x24>)
   1fad0:	f7fe fc84 	bl	1e3dc <CC_PalAbort>
   1fad4:	4620      	mov	r0, r4
   1fad6:	21f0      	movs	r1, #240	; 0xf0
   1fad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fadc:	f000 b984 	b.w	1fde8 <CC_PalMemSetZeroPlat>
   1fae0:	00028174 	.word	0x00028174

0001fae4 <cc_mbedtls_sha256_free>:
   1fae4:	b110      	cbz	r0, 1faec <cc_mbedtls_sha256_free+0x8>
   1fae6:	21f0      	movs	r1, #240	; 0xf0
   1fae8:	f7fe bd80 	b.w	1e5ec <mbedtls_zeroize_internal>
   1faec:	4770      	bx	lr
   1faee:	bf00      	nop

0001faf0 <cc_mbedtls_sha256_starts>:
   1faf0:	b508      	push	{r3, lr}
   1faf2:	b161      	cbz	r1, 1fb0e <cc_mbedtls_sha256_starts+0x1e>
   1faf4:	2901      	cmp	r1, #1
   1faf6:	d107      	bne.n	1fb08 <cc_mbedtls_sha256_starts+0x18>
   1faf8:	2102      	movs	r1, #2
   1fafa:	f000 f85b 	bl	1fbb4 <mbedtls_sha_starts_internal>
   1fafe:	2800      	cmp	r0, #0
   1fb00:	bf18      	it	ne
   1fb02:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1fb06:	bd08      	pop	{r3, pc}
   1fb08:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fb0c:	bd08      	pop	{r3, pc}
   1fb0e:	2101      	movs	r1, #1
   1fb10:	f000 f850 	bl	1fbb4 <mbedtls_sha_starts_internal>
   1fb14:	e7f3      	b.n	1fafe <cc_mbedtls_sha256_starts+0xe>
   1fb16:	bf00      	nop

0001fb18 <cc_mbedtls_sha256_update>:
   1fb18:	b570      	push	{r4, r5, r6, lr}
   1fb1a:	188e      	adds	r6, r1, r2
   1fb1c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1fb20:	b0a0      	sub	sp, #128	; 0x80
   1fb22:	460b      	mov	r3, r1
   1fb24:	4614      	mov	r4, r2
   1fb26:	4605      	mov	r5, r0
   1fb28:	d801      	bhi.n	1fb2e <cc_mbedtls_sha256_update+0x16>
   1fb2a:	2a80      	cmp	r2, #128	; 0x80
   1fb2c:	d90c      	bls.n	1fb48 <cc_mbedtls_sha256_update+0x30>
   1fb2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1fb32:	d917      	bls.n	1fb64 <cc_mbedtls_sha256_update+0x4c>
   1fb34:	4622      	mov	r2, r4
   1fb36:	4619      	mov	r1, r3
   1fb38:	4628      	mov	r0, r5
   1fb3a:	f000 f87d 	bl	1fc38 <mbedtls_sha_update_internal>
   1fb3e:	4604      	mov	r4, r0
   1fb40:	b984      	cbnz	r4, 1fb64 <cc_mbedtls_sha256_update+0x4c>
   1fb42:	4620      	mov	r0, r4
   1fb44:	b020      	add	sp, #128	; 0x80
   1fb46:	bd70      	pop	{r4, r5, r6, pc}
   1fb48:	4668      	mov	r0, sp
   1fb4a:	f000 f949 	bl	1fde0 <CC_PalMemCopyPlat>
   1fb4e:	4622      	mov	r2, r4
   1fb50:	4669      	mov	r1, sp
   1fb52:	4628      	mov	r0, r5
   1fb54:	f000 f870 	bl	1fc38 <mbedtls_sha_update_internal>
   1fb58:	2180      	movs	r1, #128	; 0x80
   1fb5a:	4604      	mov	r4, r0
   1fb5c:	4668      	mov	r0, sp
   1fb5e:	f000 f943 	bl	1fde8 <CC_PalMemSetZeroPlat>
   1fb62:	e7ed      	b.n	1fb40 <cc_mbedtls_sha256_update+0x28>
   1fb64:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1fb68:	e7eb      	b.n	1fb42 <cc_mbedtls_sha256_update+0x2a>
   1fb6a:	bf00      	nop

0001fb6c <cc_mbedtls_sha256_finish>:
   1fb6c:	b570      	push	{r4, r5, r6, lr}
   1fb6e:	b1e8      	cbz	r0, 1fbac <cc_mbedtls_sha256_finish+0x40>
   1fb70:	460e      	mov	r6, r1
   1fb72:	b1d9      	cbz	r1, 1fbac <cc_mbedtls_sha256_finish+0x40>
   1fb74:	4604      	mov	r4, r0
   1fb76:	f000 f831 	bl	1fbdc <mbedtls_sha_finish_internal>
   1fb7a:	4605      	mov	r5, r0
   1fb7c:	b9b0      	cbnz	r0, 1fbac <cc_mbedtls_sha256_finish+0x40>
   1fb7e:	6823      	ldr	r3, [r4, #0]
   1fb80:	2b01      	cmp	r3, #1
   1fb82:	d00b      	beq.n	1fb9c <cc_mbedtls_sha256_finish+0x30>
   1fb84:	2b02      	cmp	r3, #2
   1fb86:	d001      	beq.n	1fb8c <cc_mbedtls_sha256_finish+0x20>
   1fb88:	4628      	mov	r0, r5
   1fb8a:	bd70      	pop	{r4, r5, r6, pc}
   1fb8c:	f104 0108 	add.w	r1, r4, #8
   1fb90:	4630      	mov	r0, r6
   1fb92:	221c      	movs	r2, #28
   1fb94:	f000 f924 	bl	1fde0 <CC_PalMemCopyPlat>
   1fb98:	4628      	mov	r0, r5
   1fb9a:	bd70      	pop	{r4, r5, r6, pc}
   1fb9c:	f104 0108 	add.w	r1, r4, #8
   1fba0:	4630      	mov	r0, r6
   1fba2:	2220      	movs	r2, #32
   1fba4:	f000 f91c 	bl	1fde0 <CC_PalMemCopyPlat>
   1fba8:	4628      	mov	r0, r5
   1fbaa:	bd70      	pop	{r4, r5, r6, pc}
   1fbac:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1fbb0:	e7ea      	b.n	1fb88 <cc_mbedtls_sha256_finish+0x1c>
   1fbb2:	bf00      	nop

0001fbb4 <mbedtls_sha_starts_internal>:
   1fbb4:	b178      	cbz	r0, 1fbd6 <mbedtls_sha_starts_internal+0x22>
   1fbb6:	b538      	push	{r3, r4, r5, lr}
   1fbb8:	4604      	mov	r4, r0
   1fbba:	460d      	mov	r5, r1
   1fbbc:	21f0      	movs	r1, #240	; 0xf0
   1fbbe:	f000 f913 	bl	1fde8 <CC_PalMemSetZeroPlat>
   1fbc2:	2340      	movs	r3, #64	; 0x40
   1fbc4:	6025      	str	r5, [r4, #0]
   1fbc6:	65e3      	str	r3, [r4, #92]	; 0x5c
   1fbc8:	4620      	mov	r0, r4
   1fbca:	f000 f9e5 	bl	1ff98 <InitHashDrv>
   1fbce:	3800      	subs	r0, #0
   1fbd0:	bf18      	it	ne
   1fbd2:	2001      	movne	r0, #1
   1fbd4:	bd38      	pop	{r3, r4, r5, pc}
   1fbd6:	2001      	movs	r0, #1
   1fbd8:	4770      	bx	lr
   1fbda:	bf00      	nop

0001fbdc <mbedtls_sha_finish_internal>:
   1fbdc:	b570      	push	{r4, r5, r6, lr}
   1fbde:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1fbe0:	b0a4      	sub	sp, #144	; 0x90
   1fbe2:	4604      	mov	r4, r0
   1fbe4:	ae04      	add	r6, sp, #16
   1fbe6:	b9e5      	cbnz	r5, 1fc22 <mbedtls_sha_finish_internal+0x46>
   1fbe8:	2201      	movs	r2, #1
   1fbea:	2300      	movs	r3, #0
   1fbec:	6062      	str	r2, [r4, #4]
   1fbee:	4630      	mov	r0, r6
   1fbf0:	e9cd 3300 	strd	r3, r3, [sp]
   1fbf4:	aa02      	add	r2, sp, #8
   1fbf6:	4629      	mov	r1, r5
   1fbf8:	f000 f99a 	bl	1ff30 <SetDataBuffersInfo>
   1fbfc:	b110      	cbz	r0, 1fc04 <mbedtls_sha_finish_internal+0x28>
   1fbfe:	2001      	movs	r0, #1
   1fc00:	b024      	add	sp, #144	; 0x90
   1fc02:	bd70      	pop	{r4, r5, r6, pc}
   1fc04:	462a      	mov	r2, r5
   1fc06:	a902      	add	r1, sp, #8
   1fc08:	4620      	mov	r0, r4
   1fc0a:	f000 f9ef 	bl	1ffec <ProcessHashDrv>
   1fc0e:	2800      	cmp	r0, #0
   1fc10:	d1f5      	bne.n	1fbfe <mbedtls_sha_finish_internal+0x22>
   1fc12:	4620      	mov	r0, r4
   1fc14:	f000 fb18 	bl	20248 <FinishHashDrv>
   1fc18:	2800      	cmp	r0, #0
   1fc1a:	d1f0      	bne.n	1fbfe <mbedtls_sha_finish_internal+0x22>
   1fc1c:	6620      	str	r0, [r4, #96]	; 0x60
   1fc1e:	b024      	add	sp, #144	; 0x90
   1fc20:	bd70      	pop	{r4, r5, r6, pc}
   1fc22:	2d80      	cmp	r5, #128	; 0x80
   1fc24:	462a      	mov	r2, r5
   1fc26:	4630      	mov	r0, r6
   1fc28:	bf28      	it	cs
   1fc2a:	2280      	movcs	r2, #128	; 0x80
   1fc2c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1fc30:	f000 f8d6 	bl	1fde0 <CC_PalMemCopyPlat>
   1fc34:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1fc36:	e7d7      	b.n	1fbe8 <mbedtls_sha_finish_internal+0xc>

0001fc38 <mbedtls_sha_update_internal>:
   1fc38:	2800      	cmp	r0, #0
   1fc3a:	d054      	beq.n	1fce6 <mbedtls_sha_update_internal+0xae>
   1fc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc3e:	4614      	mov	r4, r2
   1fc40:	b0a5      	sub	sp, #148	; 0x94
   1fc42:	b1b2      	cbz	r2, 1fc72 <mbedtls_sha_update_internal+0x3a>
   1fc44:	460e      	mov	r6, r1
   1fc46:	b351      	cbz	r1, 1fc9e <mbedtls_sha_update_internal+0x66>
   1fc48:	4605      	mov	r5, r0
   1fc4a:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1fc4e:	1a1a      	subs	r2, r3, r0
   1fc50:	fbb2 f7f3 	udiv	r7, r2, r3
   1fc54:	fb03 2717 	mls	r7, r3, r7, r2
   1fc58:	42a7      	cmp	r7, r4
   1fc5a:	bf28      	it	cs
   1fc5c:	4627      	movcs	r7, r4
   1fc5e:	2f00      	cmp	r7, #0
   1fc60:	d143      	bne.n	1fcea <mbedtls_sha_update_internal+0xb2>
   1fc62:	4283      	cmp	r3, r0
   1fc64:	d008      	beq.n	1fc78 <mbedtls_sha_update_internal+0x40>
   1fc66:	fbb4 f7f3 	udiv	r7, r4, r3
   1fc6a:	fb03 f707 	mul.w	r7, r3, r7
   1fc6e:	b9cf      	cbnz	r7, 1fca4 <mbedtls_sha_update_internal+0x6c>
   1fc70:	bb6c      	cbnz	r4, 1fcce <mbedtls_sha_update_internal+0x96>
   1fc72:	2000      	movs	r0, #0
   1fc74:	b025      	add	sp, #148	; 0x94
   1fc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fc78:	2b80      	cmp	r3, #128	; 0x80
   1fc7a:	bf28      	it	cs
   1fc7c:	2380      	movcs	r3, #128	; 0x80
   1fc7e:	461a      	mov	r2, r3
   1fc80:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1fc84:	a804      	add	r0, sp, #16
   1fc86:	f000 f8ab 	bl	1fde0 <CC_PalMemCopyPlat>
   1fc8a:	2300      	movs	r3, #0
   1fc8c:	e9cd 3300 	strd	r3, r3, [sp]
   1fc90:	a804      	add	r0, sp, #16
   1fc92:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1fc94:	aa02      	add	r2, sp, #8
   1fc96:	f000 f94b 	bl	1ff30 <SetDataBuffersInfo>
   1fc9a:	2800      	cmp	r0, #0
   1fc9c:	d032      	beq.n	1fd04 <mbedtls_sha_update_internal+0xcc>
   1fc9e:	2001      	movs	r0, #1
   1fca0:	b025      	add	sp, #148	; 0x94
   1fca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fca4:	2300      	movs	r3, #0
   1fca6:	e9cd 3300 	strd	r3, r3, [sp]
   1fcaa:	aa02      	add	r2, sp, #8
   1fcac:	4639      	mov	r1, r7
   1fcae:	4630      	mov	r0, r6
   1fcb0:	f000 f93e 	bl	1ff30 <SetDataBuffersInfo>
   1fcb4:	2800      	cmp	r0, #0
   1fcb6:	d1f2      	bne.n	1fc9e <mbedtls_sha_update_internal+0x66>
   1fcb8:	a902      	add	r1, sp, #8
   1fcba:	463a      	mov	r2, r7
   1fcbc:	4628      	mov	r0, r5
   1fcbe:	f000 f995 	bl	1ffec <ProcessHashDrv>
   1fcc2:	2800      	cmp	r0, #0
   1fcc4:	d1eb      	bne.n	1fc9e <mbedtls_sha_update_internal+0x66>
   1fcc6:	1be4      	subs	r4, r4, r7
   1fcc8:	443e      	add	r6, r7
   1fcca:	2c00      	cmp	r4, #0
   1fccc:	d0d1      	beq.n	1fc72 <mbedtls_sha_update_internal+0x3a>
   1fcce:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1fcd0:	3019      	adds	r0, #25
   1fcd2:	4622      	mov	r2, r4
   1fcd4:	4631      	mov	r1, r6
   1fcd6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1fcda:	f000 f881 	bl	1fde0 <CC_PalMemCopyPlat>
   1fcde:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1fce0:	4422      	add	r2, r4
   1fce2:	662a      	str	r2, [r5, #96]	; 0x60
   1fce4:	e7c5      	b.n	1fc72 <mbedtls_sha_update_internal+0x3a>
   1fce6:	2001      	movs	r0, #1
   1fce8:	4770      	bx	lr
   1fcea:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1fcee:	4418      	add	r0, r3
   1fcf0:	463a      	mov	r2, r7
   1fcf2:	f000 f875 	bl	1fde0 <CC_PalMemCopyPlat>
   1fcf6:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1fcfa:	4438      	add	r0, r7
   1fcfc:	443e      	add	r6, r7
   1fcfe:	1be4      	subs	r4, r4, r7
   1fd00:	6628      	str	r0, [r5, #96]	; 0x60
   1fd02:	e7ae      	b.n	1fc62 <mbedtls_sha_update_internal+0x2a>
   1fd04:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1fd06:	a902      	add	r1, sp, #8
   1fd08:	4628      	mov	r0, r5
   1fd0a:	f000 f96f 	bl	1ffec <ProcessHashDrv>
   1fd0e:	2800      	cmp	r0, #0
   1fd10:	d1c5      	bne.n	1fc9e <mbedtls_sha_update_internal+0x66>
   1fd12:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1fd14:	6628      	str	r0, [r5, #96]	; 0x60
   1fd16:	e7a6      	b.n	1fc66 <mbedtls_sha_update_internal+0x2e>

0001fd18 <cc_mbedtls_sha256>:
   1fd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd1a:	461c      	mov	r4, r3
   1fd1c:	4605      	mov	r5, r0
   1fd1e:	4811      	ldr	r0, [pc, #68]	; (1fd64 <cc_mbedtls_sha256+0x4c>)
   1fd20:	460e      	mov	r6, r1
   1fd22:	4617      	mov	r7, r2
   1fd24:	f7ff feca 	bl	1fabc <cc_mbedtls_sha256_init>
   1fd28:	4621      	mov	r1, r4
   1fd2a:	480e      	ldr	r0, [pc, #56]	; (1fd64 <cc_mbedtls_sha256+0x4c>)
   1fd2c:	f7ff fee0 	bl	1faf0 <cc_mbedtls_sha256_starts>
   1fd30:	4604      	mov	r4, r0
   1fd32:	b120      	cbz	r0, 1fd3e <cc_mbedtls_sha256+0x26>
   1fd34:	480b      	ldr	r0, [pc, #44]	; (1fd64 <cc_mbedtls_sha256+0x4c>)
   1fd36:	f7ff fed5 	bl	1fae4 <cc_mbedtls_sha256_free>
   1fd3a:	4620      	mov	r0, r4
   1fd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fd3e:	4809      	ldr	r0, [pc, #36]	; (1fd64 <cc_mbedtls_sha256+0x4c>)
   1fd40:	4632      	mov	r2, r6
   1fd42:	4629      	mov	r1, r5
   1fd44:	f7ff fee8 	bl	1fb18 <cc_mbedtls_sha256_update>
   1fd48:	4604      	mov	r4, r0
   1fd4a:	2800      	cmp	r0, #0
   1fd4c:	d1f2      	bne.n	1fd34 <cc_mbedtls_sha256+0x1c>
   1fd4e:	4639      	mov	r1, r7
   1fd50:	4804      	ldr	r0, [pc, #16]	; (1fd64 <cc_mbedtls_sha256+0x4c>)
   1fd52:	f7ff ff0b 	bl	1fb6c <cc_mbedtls_sha256_finish>
   1fd56:	4604      	mov	r4, r0
   1fd58:	4802      	ldr	r0, [pc, #8]	; (1fd64 <cc_mbedtls_sha256+0x4c>)
   1fd5a:	f7ff fec3 	bl	1fae4 <cc_mbedtls_sha256_free>
   1fd5e:	4620      	mov	r0, r4
   1fd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fd62:	bf00      	nop
   1fd64:	20003914 	.word	0x20003914

0001fd68 <RNG_PLAT_SetUserRngParameters>:
   1fd68:	b530      	push	{r4, r5, lr}
   1fd6a:	b083      	sub	sp, #12
   1fd6c:	231c      	movs	r3, #28
   1fd6e:	a901      	add	r1, sp, #4
   1fd70:	4604      	mov	r4, r0
   1fd72:	9301      	str	r3, [sp, #4]
   1fd74:	f000 f83c 	bl	1fdf0 <CC_PalTrngParamGet>
   1fd78:	4605      	mov	r5, r0
   1fd7a:	b938      	cbnz	r0, 1fd8c <RNG_PLAT_SetUserRngParameters+0x24>
   1fd7c:	9b01      	ldr	r3, [sp, #4]
   1fd7e:	2b1c      	cmp	r3, #28
   1fd80:	d007      	beq.n	1fd92 <RNG_PLAT_SetUserRngParameters+0x2a>
   1fd82:	4d15      	ldr	r5, [pc, #84]	; (1fdd8 <RNG_PLAT_SetUserRngParameters+0x70>)
   1fd84:	4620      	mov	r0, r4
   1fd86:	211c      	movs	r1, #28
   1fd88:	f000 f82e 	bl	1fde8 <CC_PalMemSetZeroPlat>
   1fd8c:	4628      	mov	r0, r5
   1fd8e:	b003      	add	sp, #12
   1fd90:	bd30      	pop	{r4, r5, pc}
   1fd92:	e9d4 3200 	ldrd	r3, r2, [r4]
   1fd96:	2101      	movs	r1, #1
   1fd98:	3b00      	subs	r3, #0
   1fd9a:	bf18      	it	ne
   1fd9c:	2301      	movne	r3, #1
   1fd9e:	61e1      	str	r1, [r4, #28]
   1fda0:	b10a      	cbz	r2, 1fda6 <RNG_PLAT_SetUserRngParameters+0x3e>
   1fda2:	f043 0302 	orr.w	r3, r3, #2
   1fda6:	68a2      	ldr	r2, [r4, #8]
   1fda8:	b932      	cbnz	r2, 1fdb8 <RNG_PLAT_SetUserRngParameters+0x50>
   1fdaa:	68e2      	ldr	r2, [r4, #12]
   1fdac:	b942      	cbnz	r2, 1fdc0 <RNG_PLAT_SetUserRngParameters+0x58>
   1fdae:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1fdb2:	b97b      	cbnz	r3, 1fdd4 <RNG_PLAT_SetUserRngParameters+0x6c>
   1fdb4:	4d09      	ldr	r5, [pc, #36]	; (1fddc <RNG_PLAT_SetUserRngParameters+0x74>)
   1fdb6:	e7e5      	b.n	1fd84 <RNG_PLAT_SetUserRngParameters+0x1c>
   1fdb8:	68e2      	ldr	r2, [r4, #12]
   1fdba:	f043 0304 	orr.w	r3, r3, #4
   1fdbe:	b13a      	cbz	r2, 1fdd0 <RNG_PLAT_SetUserRngParameters+0x68>
   1fdc0:	f043 0308 	orr.w	r3, r3, #8
   1fdc4:	2200      	movs	r2, #0
   1fdc6:	4628      	mov	r0, r5
   1fdc8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1fdcc:	b003      	add	sp, #12
   1fdce:	bd30      	pop	{r4, r5, pc}
   1fdd0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1fdd4:	4615      	mov	r5, r2
   1fdd6:	e7d9      	b.n	1fd8c <RNG_PLAT_SetUserRngParameters+0x24>
   1fdd8:	00f00c37 	.word	0x00f00c37
   1fddc:	00f00c0e 	.word	0x00f00c0e

0001fde0 <CC_PalMemCopyPlat>:
   1fde0:	f005 be07 	b.w	259f2 <memmove>

0001fde4 <CC_PalMemSetPlat>:
   1fde4:	f005 be1f 	b.w	25a26 <memset>

0001fde8 <CC_PalMemSetZeroPlat>:
   1fde8:	460a      	mov	r2, r1
   1fdea:	2100      	movs	r1, #0
   1fdec:	f005 be1b 	b.w	25a26 <memset>

0001fdf0 <CC_PalTrngParamGet>:
   1fdf0:	b118      	cbz	r0, 1fdfa <CC_PalTrngParamGet+0xa>
   1fdf2:	b111      	cbz	r1, 1fdfa <CC_PalTrngParamGet+0xa>
   1fdf4:	680b      	ldr	r3, [r1, #0]
   1fdf6:	2b1c      	cmp	r3, #28
   1fdf8:	d001      	beq.n	1fdfe <CC_PalTrngParamGet+0xe>
   1fdfa:	2001      	movs	r0, #1
   1fdfc:	4770      	bx	lr
   1fdfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fe02:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1fe06:	3201      	adds	r2, #1
   1fe08:	bf14      	ite	ne
   1fe0a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1fe0e:	f241 225c 	movweq	r2, #4700	; 0x125c
   1fe12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fe16:	6002      	str	r2, [r0, #0]
   1fe18:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1fe1c:	3201      	adds	r2, #1
   1fe1e:	bf14      	ite	ne
   1fe20:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1fe24:	f641 1264 	movweq	r2, #6500	; 0x1964
   1fe28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fe2c:	6042      	str	r2, [r0, #4]
   1fe2e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1fe32:	3201      	adds	r2, #1
   1fe34:	bf14      	ite	ne
   1fe36:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1fe3a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1fe3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fe42:	6082      	str	r2, [r0, #8]
   1fe44:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1fe48:	3201      	adds	r2, #1
   1fe4a:	bf14      	ite	ne
   1fe4c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1fe50:	f241 3288 	movweq	r2, #5000	; 0x1388
   1fe54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fe58:	60c2      	str	r2, [r0, #12]
   1fe5a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1fe5e:	3201      	adds	r2, #1
   1fe60:	bf14      	ite	ne
   1fe62:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1fe66:	2290      	moveq	r2, #144	; 0x90
   1fe68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fe6c:	6102      	str	r2, [r0, #16]
   1fe6e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1fe72:	3201      	adds	r2, #1
   1fe74:	bf14      	ite	ne
   1fe76:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1fe7a:	2251      	moveq	r2, #81	; 0x51
   1fe7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fe80:	6142      	str	r2, [r0, #20]
   1fe82:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1fe86:	3201      	adds	r2, #1
   1fe88:	bf14      	ite	ne
   1fe8a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1fe8e:	f240 3337 	movweq	r3, #823	; 0x337
   1fe92:	6183      	str	r3, [r0, #24]
   1fe94:	2000      	movs	r0, #0
   1fe96:	4770      	bx	lr

0001fe98 <LLF_RND_WaitRngInterrupt>:
   1fe98:	b508      	push	{r3, lr}
   1fe9a:	4601      	mov	r1, r0
   1fe9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1fea0:	f7ff f95a 	bl	1f158 <CC_HalWaitInterruptRND>
   1fea4:	4902      	ldr	r1, [pc, #8]	; (1feb0 <LLF_RND_WaitRngInterrupt+0x18>)
   1fea6:	4a03      	ldr	r2, [pc, #12]	; (1feb4 <LLF_RND_WaitRngInterrupt+0x1c>)
   1fea8:	2300      	movs	r3, #0
   1feaa:	600b      	str	r3, [r1, #0]
   1feac:	6013      	str	r3, [r2, #0]
   1feae:	bd08      	pop	{r3, pc}
   1feb0:	5002b1c8 	.word	0x5002b1c8
   1feb4:	5002b12c 	.word	0x5002b12c

0001feb8 <LLF_RND_GetRoscSampleCnt>:
   1feb8:	3801      	subs	r0, #1
   1feba:	2807      	cmp	r0, #7
   1febc:	d805      	bhi.n	1feca <LLF_RND_GetRoscSampleCnt+0x12>
   1febe:	e8df f000 	tbb	[pc, r0]
   1fec2:	0e0a      	.short	0x0e0a
   1fec4:	04041204 	.word	0x04041204
   1fec8:	0604      	.short	0x0604
   1feca:	4809      	ldr	r0, [pc, #36]	; (1fef0 <LLF_RND_GetRoscSampleCnt+0x38>)
   1fecc:	4770      	bx	lr
   1fece:	68cb      	ldr	r3, [r1, #12]
   1fed0:	624b      	str	r3, [r1, #36]	; 0x24
   1fed2:	2000      	movs	r0, #0
   1fed4:	4770      	bx	lr
   1fed6:	680b      	ldr	r3, [r1, #0]
   1fed8:	624b      	str	r3, [r1, #36]	; 0x24
   1feda:	2000      	movs	r0, #0
   1fedc:	4770      	bx	lr
   1fede:	684b      	ldr	r3, [r1, #4]
   1fee0:	624b      	str	r3, [r1, #36]	; 0x24
   1fee2:	2000      	movs	r0, #0
   1fee4:	4770      	bx	lr
   1fee6:	688b      	ldr	r3, [r1, #8]
   1fee8:	624b      	str	r3, [r1, #36]	; 0x24
   1feea:	2000      	movs	r0, #0
   1feec:	4770      	bx	lr
   1feee:	bf00      	nop
   1fef0:	00f10c31 	.word	0x00f10c31

0001fef4 <LLF_RND_GetFastestRosc>:
   1fef4:	680b      	ldr	r3, [r1, #0]
   1fef6:	e002      	b.n	1fefe <LLF_RND_GetFastestRosc+0xa>
   1fef8:	2b08      	cmp	r3, #8
   1fefa:	600b      	str	r3, [r1, #0]
   1fefc:	d806      	bhi.n	1ff0c <LLF_RND_GetFastestRosc+0x18>
   1fefe:	6a02      	ldr	r2, [r0, #32]
   1ff00:	4213      	tst	r3, r2
   1ff02:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ff06:	d0f7      	beq.n	1fef8 <LLF_RND_GetFastestRosc+0x4>
   1ff08:	2000      	movs	r0, #0
   1ff0a:	4770      	bx	lr
   1ff0c:	4800      	ldr	r0, [pc, #0]	; (1ff10 <LLF_RND_GetFastestRosc+0x1c>)
   1ff0e:	4770      	bx	lr
   1ff10:	00f10c31 	.word	0x00f10c31

0001ff14 <LLF_RND_TurnOffTrng>:
   1ff14:	4904      	ldr	r1, [pc, #16]	; (1ff28 <LLF_RND_TurnOffTrng+0x14>)
   1ff16:	4a05      	ldr	r2, [pc, #20]	; (1ff2c <LLF_RND_TurnOffTrng+0x18>)
   1ff18:	2300      	movs	r3, #0
   1ff1a:	600b      	str	r3, [r1, #0]
   1ff1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1ff20:	6013      	str	r3, [r2, #0]
   1ff22:	f7ff b8ff 	b.w	1f124 <CC_HalClearInterruptBit>
   1ff26:	bf00      	nop
   1ff28:	5002b12c 	.word	0x5002b12c
   1ff2c:	5002b1c4 	.word	0x5002b1c4

0001ff30 <SetDataBuffersInfo>:
   1ff30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff32:	b083      	sub	sp, #12
   1ff34:	2400      	movs	r4, #0
   1ff36:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1ff3a:	f88d 4007 	strb.w	r4, [sp, #7]
   1ff3e:	d325      	bcc.n	1ff8c <SetDataBuffersInfo+0x5c>
   1ff40:	460c      	mov	r4, r1
   1ff42:	4404      	add	r4, r0
   1ff44:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1ff48:	4605      	mov	r5, r0
   1ff4a:	d81f      	bhi.n	1ff8c <SetDataBuffersInfo+0x5c>
   1ff4c:	4617      	mov	r7, r2
   1ff4e:	461e      	mov	r6, r3
   1ff50:	2201      	movs	r2, #1
   1ff52:	f10d 0307 	add.w	r3, sp, #7
   1ff56:	f000 fe7f 	bl	20c58 <CC_PalDataBufferAttrGet>
   1ff5a:	4604      	mov	r4, r0
   1ff5c:	b9b0      	cbnz	r0, 1ff8c <SetDataBuffersInfo+0x5c>
   1ff5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ff60:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ff64:	603d      	str	r5, [r7, #0]
   1ff66:	713b      	strb	r3, [r7, #4]
   1ff68:	b192      	cbz	r2, 1ff90 <SetDataBuffersInfo+0x60>
   1ff6a:	b14e      	cbz	r6, 1ff80 <SetDataBuffersInfo+0x50>
   1ff6c:	4602      	mov	r2, r0
   1ff6e:	9908      	ldr	r1, [sp, #32]
   1ff70:	f10d 0307 	add.w	r3, sp, #7
   1ff74:	4630      	mov	r0, r6
   1ff76:	f000 fe6f 	bl	20c58 <CC_PalDataBufferAttrGet>
   1ff7a:	b938      	cbnz	r0, 1ff8c <SetDataBuffersInfo+0x5c>
   1ff7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ff80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ff82:	4620      	mov	r0, r4
   1ff84:	6016      	str	r6, [r2, #0]
   1ff86:	7113      	strb	r3, [r2, #4]
   1ff88:	b003      	add	sp, #12
   1ff8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff8c:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1ff90:	4620      	mov	r0, r4
   1ff92:	b003      	add	sp, #12
   1ff94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ff96:	bf00      	nop

0001ff98 <InitHashDrv>:
   1ff98:	b1e8      	cbz	r0, 1ffd6 <InitHashDrv+0x3e>
   1ff9a:	b510      	push	{r4, lr}
   1ff9c:	6804      	ldr	r4, [r0, #0]
   1ff9e:	2c01      	cmp	r4, #1
   1ffa0:	d004      	beq.n	1ffac <InitHashDrv+0x14>
   1ffa2:	2c02      	cmp	r4, #2
   1ffa4:	d010      	beq.n	1ffc8 <InitHashDrv+0x30>
   1ffa6:	b144      	cbz	r4, 1ffba <InitHashDrv+0x22>
   1ffa8:	480c      	ldr	r0, [pc, #48]	; (1ffdc <InitHashDrv+0x44>)
   1ffaa:	bd10      	pop	{r4, pc}
   1ffac:	490c      	ldr	r1, [pc, #48]	; (1ffe0 <InitHashDrv+0x48>)
   1ffae:	2220      	movs	r2, #32
   1ffb0:	3008      	adds	r0, #8
   1ffb2:	f7ff ff15 	bl	1fde0 <CC_PalMemCopyPlat>
   1ffb6:	2000      	movs	r0, #0
   1ffb8:	bd10      	pop	{r4, pc}
   1ffba:	490a      	ldr	r1, [pc, #40]	; (1ffe4 <InitHashDrv+0x4c>)
   1ffbc:	2214      	movs	r2, #20
   1ffbe:	3008      	adds	r0, #8
   1ffc0:	f7ff ff0e 	bl	1fde0 <CC_PalMemCopyPlat>
   1ffc4:	4620      	mov	r0, r4
   1ffc6:	bd10      	pop	{r4, pc}
   1ffc8:	4907      	ldr	r1, [pc, #28]	; (1ffe8 <InitHashDrv+0x50>)
   1ffca:	2220      	movs	r2, #32
   1ffcc:	3008      	adds	r0, #8
   1ffce:	f7ff ff07 	bl	1fde0 <CC_PalMemCopyPlat>
   1ffd2:	2000      	movs	r0, #0
   1ffd4:	bd10      	pop	{r4, pc}
   1ffd6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1ffda:	4770      	bx	lr
   1ffdc:	00f30001 	.word	0x00f30001
   1ffe0:	000281b8 	.word	0x000281b8
   1ffe4:	00028184 	.word	0x00028184
   1ffe8:	00028198 	.word	0x00028198

0001ffec <ProcessHashDrv>:
   1ffec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fff0:	2900      	cmp	r1, #0
   1fff2:	f000 80ef 	beq.w	201d4 <ProcessHashDrv+0x1e8>
   1fff6:	4604      	mov	r4, r0
   1fff8:	2800      	cmp	r0, #0
   1fffa:	f000 80ef 	beq.w	201dc <ProcessHashDrv+0x1f0>
   1fffe:	6803      	ldr	r3, [r0, #0]
   20000:	4617      	mov	r7, r2
   20002:	460e      	mov	r6, r1
   20004:	2b00      	cmp	r3, #0
   20006:	f000 80b9 	beq.w	2017c <ProcessHashDrv+0x190>
   2000a:	3b01      	subs	r3, #1
   2000c:	2b01      	cmp	r3, #1
   2000e:	f200 80cd 	bhi.w	201ac <ProcessHashDrv+0x1c0>
   20012:	4874      	ldr	r0, [pc, #464]	; (201e4 <ProcessHashDrv+0x1f8>)
   20014:	f04f 31ff 	mov.w	r1, #4294967295
   20018:	f04f 0802 	mov.w	r8, #2
   2001c:	f7ff f92a 	bl	1f274 <CC_PalMutexLock>
   20020:	2800      	cmp	r0, #0
   20022:	f040 80b5 	bne.w	20190 <ProcessHashDrv+0x1a4>
   20026:	2000      	movs	r0, #0
   20028:	f7ff f954 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   2002c:	4605      	mov	r5, r0
   2002e:	2800      	cmp	r0, #0
   20030:	f040 80b8 	bne.w	201a4 <ProcessHashDrv+0x1b8>
   20034:	4a6c      	ldr	r2, [pc, #432]	; (201e8 <ProcessHashDrv+0x1fc>)
   20036:	6813      	ldr	r3, [r2, #0]
   20038:	2b00      	cmp	r3, #0
   2003a:	d1fc      	bne.n	20036 <ProcessHashDrv+0x4a>
   2003c:	486b      	ldr	r0, [pc, #428]	; (201ec <ProcessHashDrv+0x200>)
   2003e:	6803      	ldr	r3, [r0, #0]
   20040:	2b00      	cmp	r3, #0
   20042:	d1fc      	bne.n	2003e <ProcessHashDrv+0x52>
   20044:	f04f 30ff 	mov.w	r0, #4294967295
   20048:	f7ff f86c 	bl	1f124 <CC_HalClearInterruptBit>
   2004c:	4b68      	ldr	r3, [pc, #416]	; (201f0 <ProcessHashDrv+0x204>)
   2004e:	6818      	ldr	r0, [r3, #0]
   20050:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   20054:	f7ff f874 	bl	1f140 <CC_HalMaskInterrupt>
   20058:	4866      	ldr	r0, [pc, #408]	; (201f4 <ProcessHashDrv+0x208>)
   2005a:	4a67      	ldr	r2, [pc, #412]	; (201f8 <ProcessHashDrv+0x20c>)
   2005c:	4967      	ldr	r1, [pc, #412]	; (201fc <ProcessHashDrv+0x210>)
   2005e:	2301      	movs	r3, #1
   20060:	6003      	str	r3, [r0, #0]
   20062:	2007      	movs	r0, #7
   20064:	6010      	str	r0, [r2, #0]
   20066:	600b      	str	r3, [r1, #0]
   20068:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   2006c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2006e:	6013      	str	r3, [r2, #0]
   20070:	4b63      	ldr	r3, [pc, #396]	; (20200 <ProcessHashDrv+0x214>)
   20072:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   20074:	6051      	str	r1, [r2, #4]
   20076:	f8c3 8000 	str.w	r8, [r3]
   2007a:	6823      	ldr	r3, [r4, #0]
   2007c:	b15b      	cbz	r3, 20096 <ProcessHashDrv+0xaa>
   2007e:	3b01      	subs	r3, #1
   20080:	2b01      	cmp	r3, #1
   20082:	d817      	bhi.n	200b4 <ProcessHashDrv+0xc8>
   20084:	4b5f      	ldr	r3, [pc, #380]	; (20204 <ProcessHashDrv+0x218>)
   20086:	6a62      	ldr	r2, [r4, #36]	; 0x24
   20088:	601a      	str	r2, [r3, #0]
   2008a:	6a22      	ldr	r2, [r4, #32]
   2008c:	f843 2c04 	str.w	r2, [r3, #-4]
   20090:	69e2      	ldr	r2, [r4, #28]
   20092:	f843 2c08 	str.w	r2, [r3, #-8]
   20096:	4b5c      	ldr	r3, [pc, #368]	; (20208 <ProcessHashDrv+0x21c>)
   20098:	69a2      	ldr	r2, [r4, #24]
   2009a:	601a      	str	r2, [r3, #0]
   2009c:	6962      	ldr	r2, [r4, #20]
   2009e:	f843 2c04 	str.w	r2, [r3, #-4]
   200a2:	6922      	ldr	r2, [r4, #16]
   200a4:	f843 2c08 	str.w	r2, [r3, #-8]
   200a8:	68e2      	ldr	r2, [r4, #12]
   200aa:	f843 2c0c 	str.w	r2, [r3, #-12]
   200ae:	68a2      	ldr	r2, [r4, #8]
   200b0:	f843 2c10 	str.w	r2, [r3, #-16]
   200b4:	4a55      	ldr	r2, [pc, #340]	; (2020c <ProcessHashDrv+0x220>)
   200b6:	6813      	ldr	r3, [r2, #0]
   200b8:	2b00      	cmp	r3, #0
   200ba:	d1fc      	bne.n	200b6 <ProcessHashDrv+0xca>
   200bc:	2f00      	cmp	r7, #0
   200be:	d059      	beq.n	20174 <ProcessHashDrv+0x188>
   200c0:	6863      	ldr	r3, [r4, #4]
   200c2:	2b01      	cmp	r3, #1
   200c4:	bf04      	itt	eq
   200c6:	4a52      	ldreq	r2, [pc, #328]	; (20210 <ProcessHashDrv+0x224>)
   200c8:	6013      	streq	r3, [r2, #0]
   200ca:	4a52      	ldr	r2, [pc, #328]	; (20214 <ProcessHashDrv+0x228>)
   200cc:	4b52      	ldr	r3, [pc, #328]	; (20218 <ProcessHashDrv+0x22c>)
   200ce:	6831      	ldr	r1, [r6, #0]
   200d0:	6011      	str	r1, [r2, #0]
   200d2:	2040      	movs	r0, #64	; 0x40
   200d4:	601f      	str	r7, [r3, #0]
   200d6:	f7ff f839 	bl	1f14c <CC_HalWaitInterrupt>
   200da:	4605      	mov	r5, r0
   200dc:	4a4b      	ldr	r2, [pc, #300]	; (2020c <ProcessHashDrv+0x220>)
   200de:	6813      	ldr	r3, [r2, #0]
   200e0:	2b00      	cmp	r3, #0
   200e2:	d1fc      	bne.n	200de <ProcessHashDrv+0xf2>
   200e4:	4a41      	ldr	r2, [pc, #260]	; (201ec <ProcessHashDrv+0x200>)
   200e6:	6813      	ldr	r3, [r2, #0]
   200e8:	2b00      	cmp	r3, #0
   200ea:	d1fc      	bne.n	200e6 <ProcessHashDrv+0xfa>
   200ec:	6823      	ldr	r3, [r4, #0]
   200ee:	b15b      	cbz	r3, 20108 <ProcessHashDrv+0x11c>
   200f0:	3b01      	subs	r3, #1
   200f2:	2b01      	cmp	r3, #1
   200f4:	d817      	bhi.n	20126 <ProcessHashDrv+0x13a>
   200f6:	4a43      	ldr	r2, [pc, #268]	; (20204 <ProcessHashDrv+0x218>)
   200f8:	4b48      	ldr	r3, [pc, #288]	; (2021c <ProcessHashDrv+0x230>)
   200fa:	6812      	ldr	r2, [r2, #0]
   200fc:	6262      	str	r2, [r4, #36]	; 0x24
   200fe:	681a      	ldr	r2, [r3, #0]
   20100:	6222      	str	r2, [r4, #32]
   20102:	3b04      	subs	r3, #4
   20104:	681b      	ldr	r3, [r3, #0]
   20106:	61e3      	str	r3, [r4, #28]
   20108:	4a3f      	ldr	r2, [pc, #252]	; (20208 <ProcessHashDrv+0x21c>)
   2010a:	4b45      	ldr	r3, [pc, #276]	; (20220 <ProcessHashDrv+0x234>)
   2010c:	6812      	ldr	r2, [r2, #0]
   2010e:	61a2      	str	r2, [r4, #24]
   20110:	681a      	ldr	r2, [r3, #0]
   20112:	6162      	str	r2, [r4, #20]
   20114:	f853 2c04 	ldr.w	r2, [r3, #-4]
   20118:	6122      	str	r2, [r4, #16]
   2011a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   2011e:	60e2      	str	r2, [r4, #12]
   20120:	3b0c      	subs	r3, #12
   20122:	681b      	ldr	r3, [r3, #0]
   20124:	60a3      	str	r3, [r4, #8]
   20126:	4b3f      	ldr	r3, [pc, #252]	; (20224 <ProcessHashDrv+0x238>)
   20128:	4a3f      	ldr	r2, [pc, #252]	; (20228 <ProcessHashDrv+0x23c>)
   2012a:	681b      	ldr	r3, [r3, #0]
   2012c:	64a3      	str	r3, [r4, #72]	; 0x48
   2012e:	6812      	ldr	r2, [r2, #0]
   20130:	4b32      	ldr	r3, [pc, #200]	; (201fc <ProcessHashDrv+0x210>)
   20132:	64e2      	str	r2, [r4, #76]	; 0x4c
   20134:	4836      	ldr	r0, [pc, #216]	; (20210 <ProcessHashDrv+0x224>)
   20136:	493d      	ldr	r1, [pc, #244]	; (2022c <ProcessHashDrv+0x240>)
   20138:	2201      	movs	r2, #1
   2013a:	601a      	str	r2, [r3, #0]
   2013c:	2300      	movs	r3, #0
   2013e:	4a33      	ldr	r2, [pc, #204]	; (2020c <ProcessHashDrv+0x220>)
   20140:	6003      	str	r3, [r0, #0]
   20142:	600b      	str	r3, [r1, #0]
   20144:	6813      	ldr	r3, [r2, #0]
   20146:	2b00      	cmp	r3, #0
   20148:	d1fc      	bne.n	20144 <ProcessHashDrv+0x158>
   2014a:	4a2a      	ldr	r2, [pc, #168]	; (201f4 <ProcessHashDrv+0x208>)
   2014c:	6013      	str	r3, [r2, #0]
   2014e:	2d00      	cmp	r5, #0
   20150:	d13a      	bne.n	201c8 <ProcessHashDrv+0x1dc>
   20152:	4b27      	ldr	r3, [pc, #156]	; (201f0 <ProcessHashDrv+0x204>)
   20154:	6818      	ldr	r0, [r3, #0]
   20156:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2015a:	f7fe fff1 	bl	1f140 <CC_HalMaskInterrupt>
   2015e:	2001      	movs	r0, #1
   20160:	f7ff f8b8 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   20164:	bb60      	cbnz	r0, 201c0 <ProcessHashDrv+0x1d4>
   20166:	481f      	ldr	r0, [pc, #124]	; (201e4 <ProcessHashDrv+0x1f8>)
   20168:	f7ff f88c 	bl	1f284 <CC_PalMutexUnlock>
   2016c:	bb10      	cbnz	r0, 201b4 <ProcessHashDrv+0x1c8>
   2016e:	4628      	mov	r0, r5
   20170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20174:	4b2d      	ldr	r3, [pc, #180]	; (2022c <ProcessHashDrv+0x240>)
   20176:	2204      	movs	r2, #4
   20178:	601a      	str	r2, [r3, #0]
   2017a:	e7af      	b.n	200dc <ProcessHashDrv+0xf0>
   2017c:	4819      	ldr	r0, [pc, #100]	; (201e4 <ProcessHashDrv+0x1f8>)
   2017e:	f04f 31ff 	mov.w	r1, #4294967295
   20182:	f04f 0801 	mov.w	r8, #1
   20186:	f7ff f875 	bl	1f274 <CC_PalMutexLock>
   2018a:	2800      	cmp	r0, #0
   2018c:	f43f af4b 	beq.w	20026 <ProcessHashDrv+0x3a>
   20190:	4827      	ldr	r0, [pc, #156]	; (20230 <ProcessHashDrv+0x244>)
   20192:	f7fe f923 	bl	1e3dc <CC_PalAbort>
   20196:	2000      	movs	r0, #0
   20198:	f7ff f89c 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   2019c:	4605      	mov	r5, r0
   2019e:	2800      	cmp	r0, #0
   201a0:	f43f af48 	beq.w	20034 <ProcessHashDrv+0x48>
   201a4:	4823      	ldr	r0, [pc, #140]	; (20234 <ProcessHashDrv+0x248>)
   201a6:	f7fe f919 	bl	1e3dc <CC_PalAbort>
   201aa:	e743      	b.n	20034 <ProcessHashDrv+0x48>
   201ac:	4d22      	ldr	r5, [pc, #136]	; (20238 <ProcessHashDrv+0x24c>)
   201ae:	4628      	mov	r0, r5
   201b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   201b4:	4821      	ldr	r0, [pc, #132]	; (2023c <ProcessHashDrv+0x250>)
   201b6:	f7fe f911 	bl	1e3dc <CC_PalAbort>
   201ba:	4628      	mov	r0, r5
   201bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   201c0:	481f      	ldr	r0, [pc, #124]	; (20240 <ProcessHashDrv+0x254>)
   201c2:	f7fe f90b 	bl	1e3dc <CC_PalAbort>
   201c6:	e7ce      	b.n	20166 <ProcessHashDrv+0x17a>
   201c8:	f104 0008 	add.w	r0, r4, #8
   201cc:	2110      	movs	r1, #16
   201ce:	f7ff fe0b 	bl	1fde8 <CC_PalMemSetZeroPlat>
   201d2:	e7be      	b.n	20152 <ProcessHashDrv+0x166>
   201d4:	4d1b      	ldr	r5, [pc, #108]	; (20244 <ProcessHashDrv+0x258>)
   201d6:	4628      	mov	r0, r5
   201d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   201dc:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   201e0:	e7c5      	b.n	2016e <ProcessHashDrv+0x182>
   201e2:	bf00      	nop
   201e4:	20000654 	.word	0x20000654
   201e8:	5002b91c 	.word	0x5002b91c
   201ec:	5002bc20 	.word	0x5002bc20
   201f0:	5002ba04 	.word	0x5002ba04
   201f4:	5002b818 	.word	0x5002b818
   201f8:	5002b900 	.word	0x5002b900
   201fc:	5002b7c4 	.word	0x5002b7c4
   20200:	5002b7c0 	.word	0x5002b7c0
   20204:	5002b65c 	.word	0x5002b65c
   20208:	5002b650 	.word	0x5002b650
   2020c:	5002b910 	.word	0x5002b910
   20210:	5002b684 	.word	0x5002b684
   20214:	5002bc28 	.word	0x5002bc28
   20218:	5002bc2c 	.word	0x5002bc2c
   2021c:	5002b658 	.word	0x5002b658
   20220:	5002b64c 	.word	0x5002b64c
   20224:	5002b7cc 	.word	0x5002b7cc
   20228:	5002b7d0 	.word	0x5002b7d0
   2022c:	5002b7c8 	.word	0x5002b7c8
   20230:	000280b8 	.word	0x000280b8
   20234:	000280d0 	.word	0x000280d0
   20238:	00f30001 	.word	0x00f30001
   2023c:	00028110 	.word	0x00028110
   20240:	000280f0 	.word	0x000280f0
   20244:	00f30003 	.word	0x00f30003

00020248 <FinishHashDrv>:
   20248:	2800      	cmp	r0, #0
   2024a:	d03b      	beq.n	202c4 <FinishHashDrv+0x7c>
   2024c:	b4f0      	push	{r4, r5, r6, r7}
   2024e:	b082      	sub	sp, #8
   20250:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20252:	9301      	str	r3, [sp, #4]
   20254:	6883      	ldr	r3, [r0, #8]
   20256:	fa93 fc83 	rev.w	ip, r3
   2025a:	9b01      	ldr	r3, [sp, #4]
   2025c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   20260:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   20264:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   20268:	ba1b      	rev	r3, r3
   2026a:	6243      	str	r3, [r0, #36]	; 0x24
   2026c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2026e:	9301      	str	r3, [sp, #4]
   20270:	ba09      	rev	r1, r1
   20272:	6a83      	ldr	r3, [r0, #40]	; 0x28
   20274:	61c1      	str	r1, [r0, #28]
   20276:	ba12      	rev	r2, r2
   20278:	6202      	str	r2, [r0, #32]
   2027a:	ba3f      	rev	r7, r7
   2027c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   20280:	ba36      	rev	r6, r6
   20282:	ba2d      	rev	r5, r5
   20284:	ba24      	rev	r4, r4
   20286:	e9c0 c702 	strd	ip, r7, [r0, #8]
   2028a:	e9c0 6504 	strd	r6, r5, [r0, #16]
   2028e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   20290:	6b06      	ldr	r6, [r0, #48]	; 0x30
   20292:	6b45      	ldr	r5, [r0, #52]	; 0x34
   20294:	6184      	str	r4, [r0, #24]
   20296:	fa93 fc83 	rev.w	ip, r3
   2029a:	6b84      	ldr	r4, [r0, #56]	; 0x38
   2029c:	9b01      	ldr	r3, [sp, #4]
   2029e:	ba3f      	rev	r7, r7
   202a0:	ba36      	rev	r6, r6
   202a2:	ba2d      	rev	r5, r5
   202a4:	ba24      	rev	r4, r4
   202a6:	ba09      	rev	r1, r1
   202a8:	ba12      	rev	r2, r2
   202aa:	ba1b      	rev	r3, r3
   202ac:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   202b0:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   202b4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   202b8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   202bc:	2000      	movs	r0, #0
   202be:	b002      	add	sp, #8
   202c0:	bcf0      	pop	{r4, r5, r6, r7}
   202c2:	4770      	bx	lr
   202c4:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   202c8:	4770      	bx	lr
   202ca:	bf00      	nop

000202cc <LoadAesKey>:
   202cc:	2800      	cmp	r0, #0
   202ce:	d03b      	beq.n	20348 <LoadAesKey+0x7c>
   202d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   202d4:	2b00      	cmp	r3, #0
   202d6:	d02c      	beq.n	20332 <LoadAesKey+0x66>
   202d8:	2b03      	cmp	r3, #3
   202da:	b510      	push	{r4, lr}
   202dc:	d00f      	beq.n	202fe <LoadAesKey+0x32>
   202de:	481c      	ldr	r0, [pc, #112]	; (20350 <LoadAesKey+0x84>)
   202e0:	4c1c      	ldr	r4, [pc, #112]	; (20354 <LoadAesKey+0x88>)
   202e2:	6822      	ldr	r2, [r4, #0]
   202e4:	4b1c      	ldr	r3, [pc, #112]	; (20358 <LoadAesKey+0x8c>)
   202e6:	6812      	ldr	r2, [r2, #0]
   202e8:	601a      	str	r2, [r3, #0]
   202ea:	6822      	ldr	r2, [r4, #0]
   202ec:	6852      	ldr	r2, [r2, #4]
   202ee:	605a      	str	r2, [r3, #4]
   202f0:	6822      	ldr	r2, [r4, #0]
   202f2:	6892      	ldr	r2, [r2, #8]
   202f4:	609a      	str	r2, [r3, #8]
   202f6:	6822      	ldr	r2, [r4, #0]
   202f8:	68d2      	ldr	r2, [r2, #12]
   202fa:	60da      	str	r2, [r3, #12]
   202fc:	bd10      	pop	{r4, pc}
   202fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
   20300:	6c00      	ldr	r0, [r0, #64]	; 0x40
   20302:	4c14      	ldr	r4, [pc, #80]	; (20354 <LoadAesKey+0x88>)
   20304:	f000 fba4 	bl	20a50 <kmu_validate_kdr_slot_and_size>
   20308:	2800      	cmp	r0, #0
   2030a:	d1ea      	bne.n	202e2 <LoadAesKey+0x16>
   2030c:	6821      	ldr	r1, [r4, #0]
   2030e:	4a12      	ldr	r2, [pc, #72]	; (20358 <LoadAesKey+0x8c>)
   20310:	6809      	ldr	r1, [r1, #0]
   20312:	6011      	str	r1, [r2, #0]
   20314:	6821      	ldr	r1, [r4, #0]
   20316:	4b11      	ldr	r3, [pc, #68]	; (2035c <LoadAesKey+0x90>)
   20318:	6849      	ldr	r1, [r1, #4]
   2031a:	6019      	str	r1, [r3, #0]
   2031c:	6821      	ldr	r1, [r4, #0]
   2031e:	6889      	ldr	r1, [r1, #8]
   20320:	6091      	str	r1, [r2, #8]
   20322:	6822      	ldr	r2, [r4, #0]
   20324:	68d2      	ldr	r2, [r2, #12]
   20326:	609a      	str	r2, [r3, #8]
   20328:	f000 fb9e 	bl	20a68 <kmu_use_kdr_key>
   2032c:	2800      	cmp	r0, #0
   2032e:	d1d8      	bne.n	202e2 <LoadAesKey+0x16>
   20330:	bd10      	pop	{r4, pc}
   20332:	4a09      	ldr	r2, [pc, #36]	; (20358 <LoadAesKey+0x8c>)
   20334:	6901      	ldr	r1, [r0, #16]
   20336:	6011      	str	r1, [r2, #0]
   20338:	6941      	ldr	r1, [r0, #20]
   2033a:	6051      	str	r1, [r2, #4]
   2033c:	6981      	ldr	r1, [r0, #24]
   2033e:	6091      	str	r1, [r2, #8]
   20340:	69c1      	ldr	r1, [r0, #28]
   20342:	60d1      	str	r1, [r2, #12]
   20344:	4618      	mov	r0, r3
   20346:	4770      	bx	lr
   20348:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2034c:	4770      	bx	lr
   2034e:	bf00      	nop
   20350:	00f10009 	.word	0x00f10009
   20354:	20000644 	.word	0x20000644
   20358:	5002b400 	.word	0x5002b400
   2035c:	5002b404 	.word	0x5002b404

00020360 <InitAes.part.0>:
   20360:	4a32      	ldr	r2, [pc, #200]	; (2042c <InitAes.part.0+0xcc>)
   20362:	b510      	push	{r4, lr}
   20364:	4604      	mov	r4, r0
   20366:	6813      	ldr	r3, [r2, #0]
   20368:	2b00      	cmp	r3, #0
   2036a:	d1fc      	bne.n	20366 <InitAes.part.0+0x6>
   2036c:	4a30      	ldr	r2, [pc, #192]	; (20430 <InitAes.part.0+0xd0>)
   2036e:	6813      	ldr	r3, [r2, #0]
   20370:	2b00      	cmp	r3, #0
   20372:	d1fc      	bne.n	2036e <InitAes.part.0+0xe>
   20374:	4a2f      	ldr	r2, [pc, #188]	; (20434 <InitAes.part.0+0xd4>)
   20376:	6813      	ldr	r3, [r2, #0]
   20378:	2b00      	cmp	r3, #0
   2037a:	d1fc      	bne.n	20376 <InitAes.part.0+0x16>
   2037c:	4a2e      	ldr	r2, [pc, #184]	; (20438 <InitAes.part.0+0xd8>)
   2037e:	6813      	ldr	r3, [r2, #0]
   20380:	2b00      	cmp	r3, #0
   20382:	d1fc      	bne.n	2037e <InitAes.part.0+0x1e>
   20384:	4a2d      	ldr	r2, [pc, #180]	; (2043c <InitAes.part.0+0xdc>)
   20386:	6813      	ldr	r3, [r2, #0]
   20388:	2b00      	cmp	r3, #0
   2038a:	d1fc      	bne.n	20386 <InitAes.part.0+0x26>
   2038c:	4a2c      	ldr	r2, [pc, #176]	; (20440 <InitAes.part.0+0xe0>)
   2038e:	6813      	ldr	r3, [r2, #0]
   20390:	2b00      	cmp	r3, #0
   20392:	d1fc      	bne.n	2038e <InitAes.part.0+0x2e>
   20394:	f04f 30ff 	mov.w	r0, #4294967295
   20398:	f7fe fec4 	bl	1f124 <CC_HalClearInterruptBit>
   2039c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2039e:	f023 0304 	bic.w	r3, r3, #4
   203a2:	2b03      	cmp	r3, #3
   203a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   203a6:	d036      	beq.n	20416 <InitAes.part.0+0xb6>
   203a8:	2b01      	cmp	r3, #1
   203aa:	4b26      	ldr	r3, [pc, #152]	; (20444 <InitAes.part.0+0xe4>)
   203ac:	6818      	ldr	r0, [r3, #0]
   203ae:	bf0c      	ite	eq
   203b0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   203b4:	f020 0020 	bicne.w	r0, r0, #32
   203b8:	f7fe fec2 	bl	1f140 <CC_HalMaskInterrupt>
   203bc:	4b22      	ldr	r3, [pc, #136]	; (20448 <InitAes.part.0+0xe8>)
   203be:	4a1b      	ldr	r2, [pc, #108]	; (2042c <InitAes.part.0+0xcc>)
   203c0:	2101      	movs	r1, #1
   203c2:	6019      	str	r1, [r3, #0]
   203c4:	6813      	ldr	r3, [r2, #0]
   203c6:	2b00      	cmp	r3, #0
   203c8:	d1fc      	bne.n	203c4 <InitAes.part.0+0x64>
   203ca:	4a19      	ldr	r2, [pc, #100]	; (20430 <InitAes.part.0+0xd0>)
   203cc:	6813      	ldr	r3, [r2, #0]
   203ce:	2b00      	cmp	r3, #0
   203d0:	d1fc      	bne.n	203cc <InitAes.part.0+0x6c>
   203d2:	491e      	ldr	r1, [pc, #120]	; (2044c <InitAes.part.0+0xec>)
   203d4:	4a15      	ldr	r2, [pc, #84]	; (2042c <InitAes.part.0+0xcc>)
   203d6:	600b      	str	r3, [r1, #0]
   203d8:	6813      	ldr	r3, [r2, #0]
   203da:	2b00      	cmp	r3, #0
   203dc:	d1fc      	bne.n	203d8 <InitAes.part.0+0x78>
   203de:	4a14      	ldr	r2, [pc, #80]	; (20430 <InitAes.part.0+0xd0>)
   203e0:	6813      	ldr	r3, [r2, #0]
   203e2:	2b00      	cmp	r3, #0
   203e4:	d1fc      	bne.n	203e0 <InitAes.part.0+0x80>
   203e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   203e8:	f022 0104 	bic.w	r1, r2, #4
   203ec:	2903      	cmp	r1, #3
   203ee:	bf18      	it	ne
   203f0:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   203f2:	4917      	ldr	r1, [pc, #92]	; (20450 <InitAes.part.0+0xf0>)
   203f4:	ea4f 0282 	mov.w	r2, r2, lsl #2
   203f8:	bf18      	it	ne
   203fa:	f003 0301 	andne.w	r3, r3, #1
   203fe:	f002 021c 	and.w	r2, r2, #28
   20402:	4313      	orrs	r3, r2
   20404:	600b      	str	r3, [r1, #0]
   20406:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20408:	2b07      	cmp	r3, #7
   2040a:	d102      	bne.n	20412 <InitAes.part.0+0xb2>
   2040c:	4b11      	ldr	r3, [pc, #68]	; (20454 <InitAes.part.0+0xf4>)
   2040e:	2201      	movs	r2, #1
   20410:	601a      	str	r2, [r3, #0]
   20412:	2000      	movs	r0, #0
   20414:	bd10      	pop	{r4, pc}
   20416:	2b01      	cmp	r3, #1
   20418:	4b0a      	ldr	r3, [pc, #40]	; (20444 <InitAes.part.0+0xe4>)
   2041a:	6818      	ldr	r0, [r3, #0]
   2041c:	bf0c      	ite	eq
   2041e:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   20422:	f020 0010 	bicne.w	r0, r0, #16
   20426:	f7fe fe8b 	bl	1f140 <CC_HalMaskInterrupt>
   2042a:	e7c7      	b.n	203bc <InitAes.part.0+0x5c>
   2042c:	5002b910 	.word	0x5002b910
   20430:	5002b470 	.word	0x5002b470
   20434:	5002bd20 	.word	0x5002bd20
   20438:	5002bc20 	.word	0x5002bc20
   2043c:	5002bd38 	.word	0x5002bd38
   20440:	5002bc38 	.word	0x5002bc38
   20444:	5002ba04 	.word	0x5002ba04
   20448:	5002b900 	.word	0x5002b900
   2044c:	5002b4bc 	.word	0x5002b4bc
   20450:	5002b4c0 	.word	0x5002b4c0
   20454:	5002b47c 	.word	0x5002b47c

00020458 <ProcessAesDrv>:
   20458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2045c:	b087      	sub	sp, #28
   2045e:	2900      	cmp	r1, #0
   20460:	f000 80a5 	beq.w	205ae <ProcessAesDrv+0x156>
   20464:	4616      	mov	r6, r2
   20466:	2a00      	cmp	r2, #0
   20468:	f000 80a1 	beq.w	205ae <ProcessAesDrv+0x156>
   2046c:	4604      	mov	r4, r0
   2046e:	2800      	cmp	r0, #0
   20470:	f000 813f 	beq.w	206f2 <ProcessAesDrv+0x29a>
   20474:	461f      	mov	r7, r3
   20476:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   20478:	460d      	mov	r5, r1
   2047a:	2b00      	cmp	r3, #0
   2047c:	d150      	bne.n	20520 <ProcessAesDrv+0xc8>
   2047e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   20482:	d252      	bcs.n	2052a <ProcessAesDrv+0xd2>
   20484:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   20488:	2b04      	cmp	r3, #4
   2048a:	f000 8109 	beq.w	206a0 <ProcessAesDrv+0x248>
   2048e:	f04f 0800 	mov.w	r8, #0
   20492:	48aa      	ldr	r0, [pc, #680]	; (2073c <ProcessAesDrv+0x2e4>)
   20494:	f04f 31ff 	mov.w	r1, #4294967295
   20498:	f7fe feec 	bl	1f274 <CC_PalMutexLock>
   2049c:	2800      	cmp	r0, #0
   2049e:	f040 80de 	bne.w	2065e <ProcessAesDrv+0x206>
   204a2:	2000      	movs	r0, #0
   204a4:	f7fe ff16 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   204a8:	2800      	cmp	r0, #0
   204aa:	f040 80e1 	bne.w	20670 <ProcessAesDrv+0x218>
   204ae:	4ba4      	ldr	r3, [pc, #656]	; (20740 <ProcessAesDrv+0x2e8>)
   204b0:	4aa4      	ldr	r2, [pc, #656]	; (20744 <ProcessAesDrv+0x2ec>)
   204b2:	2101      	movs	r1, #1
   204b4:	6019      	str	r1, [r3, #0]
   204b6:	6813      	ldr	r3, [r2, #0]
   204b8:	2b00      	cmp	r3, #0
   204ba:	d1fc      	bne.n	204b6 <ProcessAesDrv+0x5e>
   204bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   204be:	2b03      	cmp	r3, #3
   204c0:	dc39      	bgt.n	20536 <ProcessAesDrv+0xde>
   204c2:	2b00      	cmp	r3, #0
   204c4:	da3a      	bge.n	2053c <ProcessAesDrv+0xe4>
   204c6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 20790 <ProcessAesDrv+0x338>
   204ca:	4a9e      	ldr	r2, [pc, #632]	; (20744 <ProcessAesDrv+0x2ec>)
   204cc:	6813      	ldr	r3, [r2, #0]
   204ce:	2b00      	cmp	r3, #0
   204d0:	d1fc      	bne.n	204cc <ProcessAesDrv+0x74>
   204d2:	f1b8 0f00 	cmp.w	r8, #0
   204d6:	f040 80da 	bne.w	2068e <ProcessAesDrv+0x236>
   204da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   204dc:	f023 0304 	bic.w	r3, r3, #4
   204e0:	2b03      	cmp	r3, #3
   204e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   204e4:	d058      	beq.n	20598 <ProcessAesDrv+0x140>
   204e6:	2b01      	cmp	r3, #1
   204e8:	4b97      	ldr	r3, [pc, #604]	; (20748 <ProcessAesDrv+0x2f0>)
   204ea:	6818      	ldr	r0, [r3, #0]
   204ec:	bf0c      	ite	eq
   204ee:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   204f2:	f040 0020 	orrne.w	r0, r0, #32
   204f6:	f7fe fe23 	bl	1f140 <CC_HalMaskInterrupt>
   204fa:	4b91      	ldr	r3, [pc, #580]	; (20740 <ProcessAesDrv+0x2e8>)
   204fc:	2200      	movs	r2, #0
   204fe:	601a      	str	r2, [r3, #0]
   20500:	2001      	movs	r0, #1
   20502:	f7fe fee7 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   20506:	2800      	cmp	r0, #0
   20508:	f040 80bd 	bne.w	20686 <ProcessAesDrv+0x22e>
   2050c:	488b      	ldr	r0, [pc, #556]	; (2073c <ProcessAesDrv+0x2e4>)
   2050e:	f7fe feb9 	bl	1f284 <CC_PalMutexUnlock>
   20512:	2800      	cmp	r0, #0
   20514:	f040 80b0 	bne.w	20678 <ProcessAesDrv+0x220>
   20518:	4648      	mov	r0, r9
   2051a:	b007      	add	sp, #28
   2051c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20520:	2b01      	cmp	r3, #1
   20522:	d1af      	bne.n	20484 <ProcessAesDrv+0x2c>
   20524:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   20528:	d3ac      	bcc.n	20484 <ProcessAesDrv+0x2c>
   2052a:	f8df 9268 	ldr.w	r9, [pc, #616]	; 20794 <ProcessAesDrv+0x33c>
   2052e:	4648      	mov	r0, r9
   20530:	b007      	add	sp, #28
   20532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20536:	3b06      	subs	r3, #6
   20538:	2b01      	cmp	r3, #1
   2053a:	d8c4      	bhi.n	204c6 <ProcessAesDrv+0x6e>
   2053c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2053e:	2b01      	cmp	r3, #1
   20540:	f200 80d4 	bhi.w	206ec <ProcessAesDrv+0x294>
   20544:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   20546:	2b01      	cmp	r3, #1
   20548:	d837      	bhi.n	205ba <ProcessAesDrv+0x162>
   2054a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2054c:	2b01      	cmp	r3, #1
   2054e:	f200 8131 	bhi.w	207b4 <ProcessAesDrv+0x35c>
   20552:	4620      	mov	r0, r4
   20554:	f7ff ff04 	bl	20360 <InitAes.part.0>
   20558:	4681      	mov	r9, r0
   2055a:	2800      	cmp	r0, #0
   2055c:	d1b5      	bne.n	204ca <ProcessAesDrv+0x72>
   2055e:	4620      	mov	r0, r4
   20560:	f7ff feb4 	bl	202cc <LoadAesKey>
   20564:	4681      	mov	r9, r0
   20566:	2800      	cmp	r0, #0
   20568:	d1af      	bne.n	204ca <ProcessAesDrv+0x72>
   2056a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2056c:	2b07      	cmp	r3, #7
   2056e:	d8aa      	bhi.n	204c6 <ProcessAesDrv+0x6e>
   20570:	a201      	add	r2, pc, #4	; (adr r2, 20578 <ProcessAesDrv+0x120>)
   20572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20576:	bf00      	nop
   20578:	000205d5 	.word	0x000205d5
   2057c:	000205c1 	.word	0x000205c1
   20580:	00020731 	.word	0x00020731
   20584:	000205c1 	.word	0x000205c1
   20588:	000204c7 	.word	0x000204c7
   2058c:	000204c7 	.word	0x000204c7
   20590:	00020731 	.word	0x00020731
   20594:	000205c1 	.word	0x000205c1
   20598:	2b01      	cmp	r3, #1
   2059a:	4b6b      	ldr	r3, [pc, #428]	; (20748 <ProcessAesDrv+0x2f0>)
   2059c:	6818      	ldr	r0, [r3, #0]
   2059e:	bf0c      	ite	eq
   205a0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   205a4:	f040 0010 	orrne.w	r0, r0, #16
   205a8:	f7fe fdca 	bl	1f140 <CC_HalMaskInterrupt>
   205ac:	e7a5      	b.n	204fa <ProcessAesDrv+0xa2>
   205ae:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 20798 <ProcessAesDrv+0x340>
   205b2:	4648      	mov	r0, r9
   205b4:	b007      	add	sp, #28
   205b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205ba:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 2079c <ProcessAesDrv+0x344>
   205be:	e784      	b.n	204ca <ProcessAesDrv+0x72>
   205c0:	4b62      	ldr	r3, [pc, #392]	; (2074c <ProcessAesDrv+0x2f4>)
   205c2:	6822      	ldr	r2, [r4, #0]
   205c4:	601a      	str	r2, [r3, #0]
   205c6:	6862      	ldr	r2, [r4, #4]
   205c8:	605a      	str	r2, [r3, #4]
   205ca:	68a2      	ldr	r2, [r4, #8]
   205cc:	609a      	str	r2, [r3, #8]
   205ce:	68e2      	ldr	r2, [r4, #12]
   205d0:	60da      	str	r2, [r3, #12]
   205d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   205d4:	682a      	ldr	r2, [r5, #0]
   205d6:	f023 0304 	bic.w	r3, r3, #4
   205da:	2b03      	cmp	r3, #3
   205dc:	d009      	beq.n	205f2 <ProcessAesDrv+0x19a>
   205de:	6e21      	ldr	r1, [r4, #96]	; 0x60
   205e0:	6833      	ldr	r3, [r6, #0]
   205e2:	2901      	cmp	r1, #1
   205e4:	bf07      	ittee	eq
   205e6:	485a      	ldreq	r0, [pc, #360]	; (20750 <ProcessAesDrv+0x2f8>)
   205e8:	495a      	ldreq	r1, [pc, #360]	; (20754 <ProcessAesDrv+0x2fc>)
   205ea:	485b      	ldrne	r0, [pc, #364]	; (20758 <ProcessAesDrv+0x300>)
   205ec:	495b      	ldrne	r1, [pc, #364]	; (2075c <ProcessAesDrv+0x304>)
   205ee:	6003      	str	r3, [r0, #0]
   205f0:	600f      	str	r7, [r1, #0]
   205f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   205f4:	2b01      	cmp	r3, #1
   205f6:	bf0b      	itete	eq
   205f8:	4b59      	ldreq	r3, [pc, #356]	; (20760 <ProcessAesDrv+0x308>)
   205fa:	4b5a      	ldrne	r3, [pc, #360]	; (20764 <ProcessAesDrv+0x30c>)
   205fc:	495a      	ldreq	r1, [pc, #360]	; (20768 <ProcessAesDrv+0x310>)
   205fe:	495b      	ldrne	r1, [pc, #364]	; (2076c <ProcessAesDrv+0x314>)
   20600:	600a      	str	r2, [r1, #0]
   20602:	601f      	str	r7, [r3, #0]
   20604:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20606:	f023 0304 	bic.w	r3, r3, #4
   2060a:	2b03      	cmp	r3, #3
   2060c:	d074      	beq.n	206f8 <ProcessAesDrv+0x2a0>
   2060e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   20610:	2b01      	cmp	r3, #1
   20612:	bf0c      	ite	eq
   20614:	2080      	moveq	r0, #128	; 0x80
   20616:	2020      	movne	r0, #32
   20618:	f7fe fd98 	bl	1f14c <CC_HalWaitInterrupt>
   2061c:	4681      	mov	r9, r0
   2061e:	2800      	cmp	r0, #0
   20620:	f47f af53 	bne.w	204ca <ProcessAesDrv+0x72>
   20624:	4b47      	ldr	r3, [pc, #284]	; (20744 <ProcessAesDrv+0x2ec>)
   20626:	681a      	ldr	r2, [r3, #0]
   20628:	2a00      	cmp	r2, #0
   2062a:	d1fc      	bne.n	20626 <ProcessAesDrv+0x1ce>
   2062c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2062e:	3b01      	subs	r3, #1
   20630:	4691      	mov	r9, r2
   20632:	2b06      	cmp	r3, #6
   20634:	d810      	bhi.n	20658 <ProcessAesDrv+0x200>
   20636:	e8df f003 	tbb	[pc, r3]
   2063a:	7d04      	.short	0x7d04
   2063c:	7d0f0f04 	.word	0x7d0f0f04
   20640:	04          	.byte	0x04
   20641:	00          	.byte	0x00
   20642:	4a42      	ldr	r2, [pc, #264]	; (2074c <ProcessAesDrv+0x2f4>)
   20644:	4b4a      	ldr	r3, [pc, #296]	; (20770 <ProcessAesDrv+0x318>)
   20646:	6812      	ldr	r2, [r2, #0]
   20648:	6022      	str	r2, [r4, #0]
   2064a:	681a      	ldr	r2, [r3, #0]
   2064c:	6062      	str	r2, [r4, #4]
   2064e:	685a      	ldr	r2, [r3, #4]
   20650:	60a2      	str	r2, [r4, #8]
   20652:	3308      	adds	r3, #8
   20654:	681b      	ldr	r3, [r3, #0]
   20656:	60e3      	str	r3, [r4, #12]
   20658:	2301      	movs	r3, #1
   2065a:	65a3      	str	r3, [r4, #88]	; 0x58
   2065c:	e735      	b.n	204ca <ProcessAesDrv+0x72>
   2065e:	4845      	ldr	r0, [pc, #276]	; (20774 <ProcessAesDrv+0x31c>)
   20660:	f7fd febc 	bl	1e3dc <CC_PalAbort>
   20664:	2000      	movs	r0, #0
   20666:	f7fe fe35 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   2066a:	2800      	cmp	r0, #0
   2066c:	f43f af1f 	beq.w	204ae <ProcessAesDrv+0x56>
   20670:	4841      	ldr	r0, [pc, #260]	; (20778 <ProcessAesDrv+0x320>)
   20672:	f7fd feb3 	bl	1e3dc <CC_PalAbort>
   20676:	e71a      	b.n	204ae <ProcessAesDrv+0x56>
   20678:	4840      	ldr	r0, [pc, #256]	; (2077c <ProcessAesDrv+0x324>)
   2067a:	f7fd feaf 	bl	1e3dc <CC_PalAbort>
   2067e:	4648      	mov	r0, r9
   20680:	b007      	add	sp, #28
   20682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20686:	483e      	ldr	r0, [pc, #248]	; (20780 <ProcessAesDrv+0x328>)
   20688:	f7fd fea8 	bl	1e3dc <CC_PalAbort>
   2068c:	e73e      	b.n	2050c <ProcessAesDrv+0xb4>
   2068e:	2304      	movs	r3, #4
   20690:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   20694:	2120      	movs	r1, #32
   20696:	f104 0010 	add.w	r0, r4, #16
   2069a:	f7ff fba5 	bl	1fde8 <CC_PalMemSetZeroPlat>
   2069e:	e71c      	b.n	204da <ProcessAesDrv+0x82>
   206a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   206a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   206a4:	f000 f9c8 	bl	20a38 <kmu_validate_slot_and_size>
   206a8:	b9e8      	cbnz	r0, 206e6 <ProcessAesDrv+0x28e>
   206aa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 207a0 <ProcessAesDrv+0x348>
   206ae:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 207a4 <ProcessAesDrv+0x34c>
   206b2:	f8d8 3000 	ldr.w	r3, [r8]
   206b6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 207a8 <ProcessAesDrv+0x350>
   206ba:	681b      	ldr	r3, [r3, #0]
   206bc:	f8cb 3000 	str.w	r3, [fp]
   206c0:	f8d8 3000 	ldr.w	r3, [r8]
   206c4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 207ac <ProcessAesDrv+0x354>
   206c8:	685b      	ldr	r3, [r3, #4]
   206ca:	f8ca 3000 	str.w	r3, [sl]
   206ce:	f8d8 3000 	ldr.w	r3, [r8]
   206d2:	4a2c      	ldr	r2, [pc, #176]	; (20784 <ProcessAesDrv+0x32c>)
   206d4:	689b      	ldr	r3, [r3, #8]
   206d6:	f8c9 3000 	str.w	r3, [r9]
   206da:	f8d8 3000 	ldr.w	r3, [r8]
   206de:	68db      	ldr	r3, [r3, #12]
   206e0:	6013      	str	r3, [r2, #0]
   206e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   206e4:	b171      	cbz	r1, 20704 <ProcessAesDrv+0x2ac>
   206e6:	f04f 0801 	mov.w	r8, #1
   206ea:	e6d2      	b.n	20492 <ProcessAesDrv+0x3a>
   206ec:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 207b0 <ProcessAesDrv+0x358>
   206f0:	e6eb      	b.n	204ca <ProcessAesDrv+0x72>
   206f2:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   206f6:	e70f      	b.n	20518 <ProcessAesDrv+0xc0>
   206f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   206fa:	2b01      	cmp	r3, #1
   206fc:	bf0c      	ite	eq
   206fe:	2040      	moveq	r0, #64	; 0x40
   20700:	2010      	movne	r0, #16
   20702:	e789      	b.n	20618 <ProcessAesDrv+0x1c0>
   20704:	f104 0310 	add.w	r3, r4, #16
   20708:	4618      	mov	r0, r3
   2070a:	9305      	str	r3, [sp, #20]
   2070c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   20710:	e9cd 3200 	strd	r3, r2, [sp]
   20714:	9002      	str	r0, [sp, #8]
   20716:	2010      	movs	r0, #16
   20718:	9003      	str	r0, [sp, #12]
   2071a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   2071e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   20720:	f000 f9ae 	bl	20a80 <kmu_derive_cmac>
   20724:	2800      	cmp	r0, #0
   20726:	d148      	bne.n	207ba <ProcessAesDrv+0x362>
   20728:	2300      	movs	r3, #0
   2072a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2072e:	e7da      	b.n	206e6 <ProcessAesDrv+0x28e>
   20730:	4b15      	ldr	r3, [pc, #84]	; (20788 <ProcessAesDrv+0x330>)
   20732:	e746      	b.n	205c2 <ProcessAesDrv+0x16a>
   20734:	4a14      	ldr	r2, [pc, #80]	; (20788 <ProcessAesDrv+0x330>)
   20736:	4b15      	ldr	r3, [pc, #84]	; (2078c <ProcessAesDrv+0x334>)
   20738:	e785      	b.n	20646 <ProcessAesDrv+0x1ee>
   2073a:	bf00      	nop
   2073c:	20000654 	.word	0x20000654
   20740:	5002b810 	.word	0x5002b810
   20744:	5002b910 	.word	0x5002b910
   20748:	5002ba04 	.word	0x5002ba04
   2074c:	5002b440 	.word	0x5002b440
   20750:	5002bd28 	.word	0x5002bd28
   20754:	5002bd2c 	.word	0x5002bd2c
   20758:	5002bd30 	.word	0x5002bd30
   2075c:	5002bd34 	.word	0x5002bd34
   20760:	5002bc2c 	.word	0x5002bc2c
   20764:	5002bc34 	.word	0x5002bc34
   20768:	5002bc28 	.word	0x5002bc28
   2076c:	5002bc30 	.word	0x5002bc30
   20770:	5002b444 	.word	0x5002b444
   20774:	000280b8 	.word	0x000280b8
   20778:	000280d0 	.word	0x000280d0
   2077c:	00028110 	.word	0x00028110
   20780:	000280f0 	.word	0x000280f0
   20784:	5002b40c 	.word	0x5002b40c
   20788:	5002b460 	.word	0x5002b460
   2078c:	5002b464 	.word	0x5002b464
   20790:	00f10001 	.word	0x00f10001
   20794:	00f10005 	.word	0x00f10005
   20798:	00f1000b 	.word	0x00f1000b
   2079c:	00f10003 	.word	0x00f10003
   207a0:	20000644 	.word	0x20000644
   207a4:	5002b400 	.word	0x5002b400
   207a8:	5002b404 	.word	0x5002b404
   207ac:	5002b408 	.word	0x5002b408
   207b0:	00f10002 	.word	0x00f10002
   207b4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 207f0 <ProcessAesDrv+0x398>
   207b8:	e687      	b.n	204ca <ProcessAesDrv+0x72>
   207ba:	f8d8 3000 	ldr.w	r3, [r8]
   207be:	4a0b      	ldr	r2, [pc, #44]	; (207ec <ProcessAesDrv+0x394>)
   207c0:	681b      	ldr	r3, [r3, #0]
   207c2:	f8cb 3000 	str.w	r3, [fp]
   207c6:	f8d8 3000 	ldr.w	r3, [r8]
   207ca:	685b      	ldr	r3, [r3, #4]
   207cc:	f8ca 3000 	str.w	r3, [sl]
   207d0:	f8d8 3000 	ldr.w	r3, [r8]
   207d4:	689b      	ldr	r3, [r3, #8]
   207d6:	f8c9 3000 	str.w	r3, [r9]
   207da:	f8d8 3000 	ldr.w	r3, [r8]
   207de:	68db      	ldr	r3, [r3, #12]
   207e0:	6013      	str	r3, [r2, #0]
   207e2:	9805      	ldr	r0, [sp, #20]
   207e4:	2110      	movs	r1, #16
   207e6:	f7ff faff 	bl	1fde8 <CC_PalMemSetZeroPlat>
   207ea:	e79d      	b.n	20728 <ProcessAesDrv+0x2d0>
   207ec:	5002b40c 	.word	0x5002b40c
   207f0:	00f10004 	.word	0x00f10004

000207f4 <FinishAesDrv>:
   207f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207f8:	b301      	cbz	r1, 2083c <FinishAesDrv+0x48>
   207fa:	b1fa      	cbz	r2, 2083c <FinishAesDrv+0x48>
   207fc:	4604      	mov	r4, r0
   207fe:	2800      	cmp	r0, #0
   20800:	d07a      	beq.n	208f8 <FinishAesDrv+0x104>
   20802:	461d      	mov	r5, r3
   20804:	6b43      	ldr	r3, [r0, #52]	; 0x34
   20806:	2b07      	cmp	r3, #7
   20808:	460e      	mov	r6, r1
   2080a:	d01b      	beq.n	20844 <FinishAesDrv+0x50>
   2080c:	b95d      	cbnz	r5, 20826 <FinishAesDrv+0x32>
   2080e:	2b03      	cmp	r3, #3
   20810:	d110      	bne.n	20834 <FinishAesDrv+0x40>
   20812:	6d83      	ldr	r3, [r0, #88]	; 0x58
   20814:	b973      	cbnz	r3, 20834 <FinishAesDrv+0x40>
   20816:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2081a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2081e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   20822:	600b      	str	r3, [r1, #0]
   20824:	2510      	movs	r5, #16
   20826:	462b      	mov	r3, r5
   20828:	4631      	mov	r1, r6
   2082a:	4620      	mov	r0, r4
   2082c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20830:	f7ff be12 	b.w	20458 <ProcessAesDrv>
   20834:	462f      	mov	r7, r5
   20836:	4638      	mov	r0, r7
   20838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2083c:	4f66      	ldr	r7, [pc, #408]	; (209d8 <FinishAesDrv+0x1e4>)
   2083e:	4638      	mov	r0, r7
   20840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20844:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   20846:	2b00      	cmp	r3, #0
   20848:	d159      	bne.n	208fe <FinishAesDrv+0x10a>
   2084a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2084e:	d25b      	bcs.n	20908 <FinishAesDrv+0x114>
   20850:	b915      	cbnz	r5, 20858 <FinishAesDrv+0x64>
   20852:	6da3      	ldr	r3, [r4, #88]	; 0x58
   20854:	2b00      	cmp	r3, #0
   20856:	d157      	bne.n	20908 <FinishAesDrv+0x114>
   20858:	4860      	ldr	r0, [pc, #384]	; (209dc <FinishAesDrv+0x1e8>)
   2085a:	f04f 31ff 	mov.w	r1, #4294967295
   2085e:	f7fe fd09 	bl	1f274 <CC_PalMutexLock>
   20862:	2800      	cmp	r0, #0
   20864:	f040 8097 	bne.w	20996 <FinishAesDrv+0x1a2>
   20868:	2000      	movs	r0, #0
   2086a:	f7fe fd33 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   2086e:	2800      	cmp	r0, #0
   20870:	f040 808d 	bne.w	2098e <FinishAesDrv+0x19a>
   20874:	4b5a      	ldr	r3, [pc, #360]	; (209e0 <FinishAesDrv+0x1ec>)
   20876:	4a5b      	ldr	r2, [pc, #364]	; (209e4 <FinishAesDrv+0x1f0>)
   20878:	2101      	movs	r1, #1
   2087a:	6019      	str	r1, [r3, #0]
   2087c:	6813      	ldr	r3, [r2, #0]
   2087e:	2b00      	cmp	r3, #0
   20880:	d1fc      	bne.n	2087c <FinishAesDrv+0x88>
   20882:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20884:	2b03      	cmp	r3, #3
   20886:	dd20      	ble.n	208ca <FinishAesDrv+0xd6>
   20888:	3b06      	subs	r3, #6
   2088a:	2b01      	cmp	r3, #1
   2088c:	d81f      	bhi.n	208ce <FinishAesDrv+0xda>
   2088e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   20890:	2b01      	cmp	r3, #1
   20892:	d83b      	bhi.n	2090c <FinishAesDrv+0x118>
   20894:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   20896:	2b01      	cmp	r3, #1
   20898:	f200 8085 	bhi.w	209a6 <FinishAesDrv+0x1b2>
   2089c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2089e:	2b01      	cmp	r3, #1
   208a0:	f200 8083 	bhi.w	209aa <FinishAesDrv+0x1b6>
   208a4:	4620      	mov	r0, r4
   208a6:	f7ff fd5b 	bl	20360 <InitAes.part.0>
   208aa:	4607      	mov	r7, r0
   208ac:	b980      	cbnz	r0, 208d0 <FinishAesDrv+0xdc>
   208ae:	4620      	mov	r0, r4
   208b0:	f7ff fd0c 	bl	202cc <LoadAesKey>
   208b4:	4607      	mov	r7, r0
   208b6:	b958      	cbnz	r0, 208d0 <FinishAesDrv+0xdc>
   208b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   208ba:	2b07      	cmp	r3, #7
   208bc:	d807      	bhi.n	208ce <FinishAesDrv+0xda>
   208be:	e8df f003 	tbb	[pc, r3]
   208c2:	2730      	.short	0x2730
   208c4:	06062755 	.word	0x06062755
   208c8:	2755      	.short	0x2755
   208ca:	2b00      	cmp	r3, #0
   208cc:	dadf      	bge.n	2088e <FinishAesDrv+0x9a>
   208ce:	4f46      	ldr	r7, [pc, #280]	; (209e8 <FinishAesDrv+0x1f4>)
   208d0:	4a44      	ldr	r2, [pc, #272]	; (209e4 <FinishAesDrv+0x1f0>)
   208d2:	6813      	ldr	r3, [r2, #0]
   208d4:	2b00      	cmp	r3, #0
   208d6:	d1fc      	bne.n	208d2 <FinishAesDrv+0xde>
   208d8:	4a41      	ldr	r2, [pc, #260]	; (209e0 <FinishAesDrv+0x1ec>)
   208da:	2001      	movs	r0, #1
   208dc:	6013      	str	r3, [r2, #0]
   208de:	f7fe fcf9 	bl	1f2d4 <CC_PalPowerSaveModeSelect>
   208e2:	2800      	cmp	r0, #0
   208e4:	d15b      	bne.n	2099e <FinishAesDrv+0x1aa>
   208e6:	483d      	ldr	r0, [pc, #244]	; (209dc <FinishAesDrv+0x1e8>)
   208e8:	f7fe fccc 	bl	1f284 <CC_PalMutexUnlock>
   208ec:	2800      	cmp	r0, #0
   208ee:	d0a2      	beq.n	20836 <FinishAesDrv+0x42>
   208f0:	483e      	ldr	r0, [pc, #248]	; (209ec <FinishAesDrv+0x1f8>)
   208f2:	f7fd fd73 	bl	1e3dc <CC_PalAbort>
   208f6:	e79e      	b.n	20836 <FinishAesDrv+0x42>
   208f8:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   208fc:	e79b      	b.n	20836 <FinishAesDrv+0x42>
   208fe:	2b01      	cmp	r3, #1
   20900:	d1a6      	bne.n	20850 <FinishAesDrv+0x5c>
   20902:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   20906:	d3a3      	bcc.n	20850 <FinishAesDrv+0x5c>
   20908:	4f39      	ldr	r7, [pc, #228]	; (209f0 <FinishAesDrv+0x1fc>)
   2090a:	e794      	b.n	20836 <FinishAesDrv+0x42>
   2090c:	4f39      	ldr	r7, [pc, #228]	; (209f4 <FinishAesDrv+0x200>)
   2090e:	e7df      	b.n	208d0 <FinishAesDrv+0xdc>
   20910:	4b39      	ldr	r3, [pc, #228]	; (209f8 <FinishAesDrv+0x204>)
   20912:	6822      	ldr	r2, [r4, #0]
   20914:	601a      	str	r2, [r3, #0]
   20916:	6862      	ldr	r2, [r4, #4]
   20918:	605a      	str	r2, [r3, #4]
   2091a:	68a2      	ldr	r2, [r4, #8]
   2091c:	609a      	str	r2, [r3, #8]
   2091e:	68e2      	ldr	r2, [r4, #12]
   20920:	60da      	str	r2, [r3, #12]
   20922:	4936      	ldr	r1, [pc, #216]	; (209fc <FinishAesDrv+0x208>)
   20924:	4a36      	ldr	r2, [pc, #216]	; (20a00 <FinishAesDrv+0x20c>)
   20926:	2301      	movs	r3, #1
   20928:	600b      	str	r3, [r1, #0]
   2092a:	6015      	str	r5, [r2, #0]
   2092c:	2d00      	cmp	r5, #0
   2092e:	d13e      	bne.n	209ae <FinishAesDrv+0x1ba>
   20930:	6da2      	ldr	r2, [r4, #88]	; 0x58
   20932:	b90a      	cbnz	r2, 20938 <FinishAesDrv+0x144>
   20934:	4a33      	ldr	r2, [pc, #204]	; (20a04 <FinishAesDrv+0x210>)
   20936:	6013      	str	r3, [r2, #0]
   20938:	4b2a      	ldr	r3, [pc, #168]	; (209e4 <FinishAesDrv+0x1f0>)
   2093a:	681f      	ldr	r7, [r3, #0]
   2093c:	2f00      	cmp	r7, #0
   2093e:	d1fc      	bne.n	2093a <FinishAesDrv+0x146>
   20940:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20942:	3b01      	subs	r3, #1
   20944:	2b06      	cmp	r3, #6
   20946:	d8c3      	bhi.n	208d0 <FinishAesDrv+0xdc>
   20948:	a201      	add	r2, pc, #4	; (adr r2, 20950 <FinishAesDrv+0x15c>)
   2094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2094e:	bf00      	nop
   20950:	00020971 	.word	0x00020971
   20954:	00020989 	.word	0x00020989
   20958:	00020971 	.word	0x00020971
   2095c:	000208d1 	.word	0x000208d1
   20960:	000208d1 	.word	0x000208d1
   20964:	00020989 	.word	0x00020989
   20968:	00020971 	.word	0x00020971
   2096c:	4b26      	ldr	r3, [pc, #152]	; (20a08 <FinishAesDrv+0x214>)
   2096e:	e7d0      	b.n	20912 <FinishAesDrv+0x11e>
   20970:	4a21      	ldr	r2, [pc, #132]	; (209f8 <FinishAesDrv+0x204>)
   20972:	4b26      	ldr	r3, [pc, #152]	; (20a0c <FinishAesDrv+0x218>)
   20974:	6812      	ldr	r2, [r2, #0]
   20976:	6022      	str	r2, [r4, #0]
   20978:	681a      	ldr	r2, [r3, #0]
   2097a:	6062      	str	r2, [r4, #4]
   2097c:	685a      	ldr	r2, [r3, #4]
   2097e:	60a2      	str	r2, [r4, #8]
   20980:	3308      	adds	r3, #8
   20982:	681b      	ldr	r3, [r3, #0]
   20984:	60e3      	str	r3, [r4, #12]
   20986:	e7a3      	b.n	208d0 <FinishAesDrv+0xdc>
   20988:	4a1f      	ldr	r2, [pc, #124]	; (20a08 <FinishAesDrv+0x214>)
   2098a:	4b21      	ldr	r3, [pc, #132]	; (20a10 <FinishAesDrv+0x21c>)
   2098c:	e7f2      	b.n	20974 <FinishAesDrv+0x180>
   2098e:	4821      	ldr	r0, [pc, #132]	; (20a14 <FinishAesDrv+0x220>)
   20990:	f7fd fd24 	bl	1e3dc <CC_PalAbort>
   20994:	e76e      	b.n	20874 <FinishAesDrv+0x80>
   20996:	4820      	ldr	r0, [pc, #128]	; (20a18 <FinishAesDrv+0x224>)
   20998:	f7fd fd20 	bl	1e3dc <CC_PalAbort>
   2099c:	e764      	b.n	20868 <FinishAesDrv+0x74>
   2099e:	481f      	ldr	r0, [pc, #124]	; (20a1c <FinishAesDrv+0x228>)
   209a0:	f7fd fd1c 	bl	1e3dc <CC_PalAbort>
   209a4:	e79f      	b.n	208e6 <FinishAesDrv+0xf2>
   209a6:	4f1e      	ldr	r7, [pc, #120]	; (20a20 <FinishAesDrv+0x22c>)
   209a8:	e792      	b.n	208d0 <FinishAesDrv+0xdc>
   209aa:	4f1e      	ldr	r7, [pc, #120]	; (20a24 <FinishAesDrv+0x230>)
   209ac:	e790      	b.n	208d0 <FinishAesDrv+0xdc>
   209ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   209b0:	6833      	ldr	r3, [r6, #0]
   209b2:	2a01      	cmp	r2, #1
   209b4:	d00a      	beq.n	209cc <FinishAesDrv+0x1d8>
   209b6:	491c      	ldr	r1, [pc, #112]	; (20a28 <FinishAesDrv+0x234>)
   209b8:	4a1c      	ldr	r2, [pc, #112]	; (20a2c <FinishAesDrv+0x238>)
   209ba:	600b      	str	r3, [r1, #0]
   209bc:	2010      	movs	r0, #16
   209be:	6015      	str	r5, [r2, #0]
   209c0:	f7fe fbc4 	bl	1f14c <CC_HalWaitInterrupt>
   209c4:	4607      	mov	r7, r0
   209c6:	2800      	cmp	r0, #0
   209c8:	d0b6      	beq.n	20938 <FinishAesDrv+0x144>
   209ca:	e781      	b.n	208d0 <FinishAesDrv+0xdc>
   209cc:	4918      	ldr	r1, [pc, #96]	; (20a30 <FinishAesDrv+0x23c>)
   209ce:	4a19      	ldr	r2, [pc, #100]	; (20a34 <FinishAesDrv+0x240>)
   209d0:	600b      	str	r3, [r1, #0]
   209d2:	2040      	movs	r0, #64	; 0x40
   209d4:	6015      	str	r5, [r2, #0]
   209d6:	e7f3      	b.n	209c0 <FinishAesDrv+0x1cc>
   209d8:	00f1000b 	.word	0x00f1000b
   209dc:	20000654 	.word	0x20000654
   209e0:	5002b810 	.word	0x5002b810
   209e4:	5002b910 	.word	0x5002b910
   209e8:	00f10001 	.word	0x00f10001
   209ec:	00028110 	.word	0x00028110
   209f0:	00f10005 	.word	0x00f10005
   209f4:	00f10002 	.word	0x00f10002
   209f8:	5002b440 	.word	0x5002b440
   209fc:	5002b47c 	.word	0x5002b47c
   20a00:	5002b4bc 	.word	0x5002b4bc
   20a04:	5002b524 	.word	0x5002b524
   20a08:	5002b460 	.word	0x5002b460
   20a0c:	5002b444 	.word	0x5002b444
   20a10:	5002b464 	.word	0x5002b464
   20a14:	000280d0 	.word	0x000280d0
   20a18:	000280b8 	.word	0x000280b8
   20a1c:	000280f0 	.word	0x000280f0
   20a20:	00f10003 	.word	0x00f10003
   20a24:	00f10004 	.word	0x00f10004
   20a28:	5002bc30 	.word	0x5002bc30
   20a2c:	5002bc34 	.word	0x5002bc34
   20a30:	5002bc28 	.word	0x5002bc28
   20a34:	5002bc2c 	.word	0x5002bc2c

00020a38 <kmu_validate_slot_and_size>:
   20a38:	b921      	cbnz	r1, 20a44 <kmu_validate_slot_and_size+0xc>
   20a3a:	4b03      	ldr	r3, [pc, #12]	; (20a48 <kmu_validate_slot_and_size+0x10>)
   20a3c:	2800      	cmp	r0, #0
   20a3e:	bf18      	it	ne
   20a40:	4618      	movne	r0, r3
   20a42:	4770      	bx	lr
   20a44:	4801      	ldr	r0, [pc, #4]	; (20a4c <kmu_validate_slot_and_size+0x14>)
   20a46:	4770      	bx	lr
   20a48:	00f70001 	.word	0x00f70001
   20a4c:	00f70003 	.word	0x00f70003

00020a50 <kmu_validate_kdr_slot_and_size>:
   20a50:	b921      	cbnz	r1, 20a5c <kmu_validate_kdr_slot_and_size+0xc>
   20a52:	4b03      	ldr	r3, [pc, #12]	; (20a60 <kmu_validate_kdr_slot_and_size+0x10>)
   20a54:	2800      	cmp	r0, #0
   20a56:	bf18      	it	ne
   20a58:	4618      	movne	r0, r3
   20a5a:	4770      	bx	lr
   20a5c:	4801      	ldr	r0, [pc, #4]	; (20a64 <kmu_validate_kdr_slot_and_size+0x14>)
   20a5e:	4770      	bx	lr
   20a60:	00f70001 	.word	0x00f70001
   20a64:	00f70003 	.word	0x00f70003

00020a68 <kmu_use_kdr_key>:
   20a68:	4903      	ldr	r1, [pc, #12]	; (20a78 <kmu_use_kdr_key+0x10>)
   20a6a:	4b04      	ldr	r3, [pc, #16]	; (20a7c <kmu_use_kdr_key+0x14>)
   20a6c:	2000      	movs	r0, #0
   20a6e:	2201      	movs	r2, #1
   20a70:	6008      	str	r0, [r1, #0]
   20a72:	601a      	str	r2, [r3, #0]
   20a74:	4770      	bx	lr
   20a76:	bf00      	nop
   20a78:	5002ba38 	.word	0x5002ba38
   20a7c:	5002b478 	.word	0x5002b478

00020a80 <kmu_derive_cmac>:
   20a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a84:	b0cd      	sub	sp, #308	; 0x134
   20a86:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   20a8a:	460f      	mov	r7, r1
   20a8c:	2100      	movs	r1, #0
   20a8e:	460c      	mov	r4, r1
   20a90:	4681      	mov	r9, r0
   20a92:	4616      	mov	r6, r2
   20a94:	a80e      	add	r0, sp, #56	; 0x38
   20a96:	2274      	movs	r2, #116	; 0x74
   20a98:	469b      	mov	fp, r3
   20a9a:	f004 ffc4 	bl	25a26 <memset>
   20a9e:	4621      	mov	r1, r4
   20aa0:	2280      	movs	r2, #128	; 0x80
   20aa2:	a82c      	add	r0, sp, #176	; 0xb0
   20aa4:	942b      	str	r4, [sp, #172]	; 0xac
   20aa6:	f004 ffbe 	bl	25a26 <memset>
   20aaa:	2384      	movs	r3, #132	; 0x84
   20aac:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   20ab0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   20ab4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   20ab8:	9305      	str	r3, [sp, #20]
   20aba:	d860      	bhi.n	20b7e <kmu_derive_cmac+0xfe>
   20abc:	ab05      	add	r3, sp, #20
   20abe:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   20ac2:	9301      	str	r3, [sp, #4]
   20ac4:	9502      	str	r5, [sp, #8]
   20ac6:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   20aca:	4659      	mov	r1, fp
   20acc:	4630      	mov	r0, r6
   20ace:	f8cd a000 	str.w	sl, [sp]
   20ad2:	f000 f865 	bl	20ba0 <UtilCmacBuildDataForDerivation>
   20ad6:	2800      	cmp	r0, #0
   20ad8:	d14c      	bne.n	20b74 <kmu_derive_cmac+0xf4>
   20ada:	2303      	movs	r3, #3
   20adc:	f88d 3013 	strb.w	r3, [sp, #19]
   20ae0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   20ae4:	901c      	str	r0, [sp, #112]	; 0x70
   20ae6:	2200      	movs	r2, #0
   20ae8:	2110      	movs	r1, #16
   20aea:	a80e      	add	r0, sp, #56	; 0x38
   20aec:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   20af0:	2607      	movs	r6, #7
   20af2:	2301      	movs	r3, #1
   20af4:	2401      	movs	r4, #1
   20af6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   20afa:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   20afe:	971a      	str	r7, [sp, #104]	; 0x68
   20b00:	961b      	str	r6, [sp, #108]	; 0x6c
   20b02:	9426      	str	r4, [sp, #152]	; 0x98
   20b04:	f10d 0920 	add.w	r9, sp, #32
   20b08:	f7ff f96e 	bl	1fde8 <CC_PalMemSetZeroPlat>
   20b0c:	2110      	movs	r1, #16
   20b0e:	e9cd 1900 	strd	r1, r9, [sp]
   20b12:	ab0a      	add	r3, sp, #40	; 0x28
   20b14:	9905      	ldr	r1, [sp, #20]
   20b16:	4650      	mov	r0, sl
   20b18:	aa06      	add	r2, sp, #24
   20b1a:	f7ff fa09 	bl	1ff30 <SetDataBuffersInfo>
   20b1e:	4607      	mov	r7, r0
   20b20:	b150      	cbz	r0, 20b38 <kmu_derive_cmac+0xb8>
   20b22:	e01e      	b.n	20b62 <kmu_derive_cmac+0xe2>
   20b24:	f7ff f95c 	bl	1fde0 <CC_PalMemCopyPlat>
   20b28:	2110      	movs	r1, #16
   20b2a:	a80e      	add	r0, sp, #56	; 0x38
   20b2c:	f7ff f95c 	bl	1fde8 <CC_PalMemSetZeroPlat>
   20b30:	3401      	adds	r4, #1
   20b32:	1bad      	subs	r5, r5, r6
   20b34:	b2e4      	uxtb	r4, r4
   20b36:	d027      	beq.n	20b88 <kmu_derive_cmac+0x108>
   20b38:	9b05      	ldr	r3, [sp, #20]
   20b3a:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   20b3e:	2d10      	cmp	r5, #16
   20b40:	464a      	mov	r2, r9
   20b42:	a906      	add	r1, sp, #24
   20b44:	a80e      	add	r0, sp, #56	; 0x38
   20b46:	462e      	mov	r6, r5
   20b48:	bf28      	it	cs
   20b4a:	2610      	movcs	r6, #16
   20b4c:	f7ff fe52 	bl	207f4 <FinishAesDrv>
   20b50:	4603      	mov	r3, r0
   20b52:	4632      	mov	r2, r6
   20b54:	eb08 0007 	add.w	r0, r8, r7
   20b58:	a90e      	add	r1, sp, #56	; 0x38
   20b5a:	4437      	add	r7, r6
   20b5c:	2b00      	cmp	r3, #0
   20b5e:	d0e1      	beq.n	20b24 <kmu_derive_cmac+0xa4>
   20b60:	461f      	mov	r7, r3
   20b62:	a80e      	add	r0, sp, #56	; 0x38
   20b64:	2274      	movs	r2, #116	; 0x74
   20b66:	2100      	movs	r1, #0
   20b68:	f7ff f93c 	bl	1fde4 <CC_PalMemSetPlat>
   20b6c:	4638      	mov	r0, r7
   20b6e:	b04d      	add	sp, #308	; 0x134
   20b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b74:	4f08      	ldr	r7, [pc, #32]	; (20b98 <kmu_derive_cmac+0x118>)
   20b76:	4638      	mov	r0, r7
   20b78:	b04d      	add	sp, #308	; 0x134
   20b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b7e:	4f07      	ldr	r7, [pc, #28]	; (20b9c <kmu_derive_cmac+0x11c>)
   20b80:	4638      	mov	r0, r7
   20b82:	b04d      	add	sp, #308	; 0x134
   20b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b88:	a80e      	add	r0, sp, #56	; 0x38
   20b8a:	2274      	movs	r2, #116	; 0x74
   20b8c:	2100      	movs	r1, #0
   20b8e:	462f      	mov	r7, r5
   20b90:	f7ff f928 	bl	1fde4 <CC_PalMemSetPlat>
   20b94:	e7ea      	b.n	20b6c <kmu_derive_cmac+0xec>
   20b96:	bf00      	nop
   20b98:	00f1000e 	.word	0x00f1000e
   20b9c:	00f1000f 	.word	0x00f1000f

00020ba0 <UtilCmacBuildDataForDerivation>:
   20ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ba4:	b082      	sub	sp, #8
   20ba6:	2600      	movs	r6, #0
   20ba8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   20baa:	9601      	str	r6, [sp, #4]
   20bac:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   20bb0:	d83c      	bhi.n	20c2c <UtilCmacBuildDataForDerivation+0x8c>
   20bb2:	00ee      	lsls	r6, r5, #3
   20bb4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   20bb8:	f101 35ff 	add.w	r5, r1, #4294967295
   20bbc:	461f      	mov	r7, r3
   20bbe:	bf34      	ite	cc
   20bc0:	2303      	movcc	r3, #3
   20bc2:	2304      	movcs	r3, #4
   20bc4:	2d3f      	cmp	r5, #63	; 0x3f
   20bc6:	460c      	mov	r4, r1
   20bc8:	9300      	str	r3, [sp, #0]
   20bca:	d82f      	bhi.n	20c2c <UtilCmacBuildDataForDerivation+0x8c>
   20bcc:	b370      	cbz	r0, 20c2c <UtilCmacBuildDataForDerivation+0x8c>
   20bce:	4690      	mov	r8, r2
   20bd0:	b117      	cbz	r7, 20bd8 <UtilCmacBuildDataForDerivation+0x38>
   20bd2:	b35a      	cbz	r2, 20c2c <UtilCmacBuildDataForDerivation+0x8c>
   20bd4:	2f40      	cmp	r7, #64	; 0x40
   20bd6:	d829      	bhi.n	20c2c <UtilCmacBuildDataForDerivation+0x8c>
   20bd8:	9a08      	ldr	r2, [sp, #32]
   20bda:	b33a      	cbz	r2, 20c2c <UtilCmacBuildDataForDerivation+0x8c>
   20bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20bde:	6811      	ldr	r1, [r2, #0]
   20be0:	b321      	cbz	r1, 20c2c <UtilCmacBuildDataForDerivation+0x8c>
   20be2:	19e2      	adds	r2, r4, r7
   20be4:	4413      	add	r3, r2
   20be6:	4299      	cmp	r1, r3
   20be8:	d320      	bcc.n	20c2c <UtilCmacBuildDataForDerivation+0x8c>
   20bea:	9b08      	ldr	r3, [sp, #32]
   20bec:	4622      	mov	r2, r4
   20bee:	4601      	mov	r1, r0
   20bf0:	1c58      	adds	r0, r3, #1
   20bf2:	f7ff f8f5 	bl	1fde0 <CC_PalMemCopyPlat>
   20bf6:	9b08      	ldr	r3, [sp, #32]
   20bf8:	4423      	add	r3, r4
   20bfa:	2200      	movs	r2, #0
   20bfc:	3402      	adds	r4, #2
   20bfe:	705a      	strb	r2, [r3, #1]
   20c00:	bb07      	cbnz	r7, 20c44 <UtilCmacBuildDataForDerivation+0xa4>
   20c02:	2eff      	cmp	r6, #255	; 0xff
   20c04:	9600      	str	r6, [sp, #0]
   20c06:	d915      	bls.n	20c34 <UtilCmacBuildDataForDerivation+0x94>
   20c08:	9b08      	ldr	r3, [sp, #32]
   20c0a:	0235      	lsls	r5, r6, #8
   20c0c:	b2ad      	uxth	r5, r5
   20c0e:	1918      	adds	r0, r3, r4
   20c10:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   20c14:	2202      	movs	r2, #2
   20c16:	a901      	add	r1, sp, #4
   20c18:	9501      	str	r5, [sp, #4]
   20c1a:	f7ff f8e1 	bl	1fde0 <CC_PalMemCopyPlat>
   20c1e:	3402      	adds	r4, #2
   20c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c22:	2000      	movs	r0, #0
   20c24:	601c      	str	r4, [r3, #0]
   20c26:	b002      	add	sp, #8
   20c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c2c:	4809      	ldr	r0, [pc, #36]	; (20c54 <UtilCmacBuildDataForDerivation+0xb4>)
   20c2e:	b002      	add	sp, #8
   20c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c34:	9b08      	ldr	r3, [sp, #32]
   20c36:	2201      	movs	r2, #1
   20c38:	1918      	adds	r0, r3, r4
   20c3a:	4669      	mov	r1, sp
   20c3c:	f7ff f8d0 	bl	1fde0 <CC_PalMemCopyPlat>
   20c40:	3401      	adds	r4, #1
   20c42:	e7ed      	b.n	20c20 <UtilCmacBuildDataForDerivation+0x80>
   20c44:	9b08      	ldr	r3, [sp, #32]
   20c46:	4641      	mov	r1, r8
   20c48:	1918      	adds	r0, r3, r4
   20c4a:	463a      	mov	r2, r7
   20c4c:	f7ff f8c8 	bl	1fde0 <CC_PalMemCopyPlat>
   20c50:	443c      	add	r4, r7
   20c52:	e7d6      	b.n	20c02 <UtilCmacBuildDataForDerivation+0x62>
   20c54:	80000006 	.word	0x80000006

00020c58 <CC_PalDataBufferAttrGet>:
   20c58:	2000      	movs	r0, #0
   20c5a:	7018      	strb	r0, [r3, #0]
   20c5c:	4770      	bx	lr
   20c5e:	bf00      	nop

00020c60 <main>:




void main(void)
{
   20c60:	b508      	push	{r3, lr}
	
	
	timer_init();
   20c62:	f7ef fe31 	bl	108c8 <timer_init>
	timer_start();
   20c66:	f7ef fe49 	bl	108fc <timer_start>
	configure_dk_buttons_leds();
   20c6a:	f7ef fd6f 	bl	1074c <configure_dk_buttons_leds>
	init_bluethooth_scan();
   20c6e:	f7ef fc4f 	bl	10510 <init_bluethooth_scan>

	for(;;){
   20c72:	e7fe      	b.n	20c72 <main+0x12>

00020c74 <angle_move_servo>:

void angle_move_servo(int N, uint32_t angle)
{
   20c74:	b510      	push	{r4, lr}
   20c76:	4604      	mov	r4, r0
   20c78:	4608      	mov	r0, r1
    if (angle >= 270)
   20c7a:	f5b1 7f87 	cmp.w	r1, #270	; 0x10e
   20c7e:	d301      	bcc.n	20c84 <angle_move_servo+0x10>
    {
        angle = 270;
   20c80:	f44f 7087 	mov.w	r0, #270	; 0x10e
    } else if(angle <= 0)
    {
        angle = 0;
    }
    
    angle = convert_to_raw(angle);
   20c84:	f7ef fe46 	bl	10914 <convert_to_raw>
   20c88:	4601      	mov	r1, r0
    raw_move_servo(N, angle);
   20c8a:	4620      	mov	r0, r4
   20c8c:	f7ef febe 	bl	10a0c <raw_move_servo>
}
   20c90:	bd10      	pop	{r4, pc}

00020c92 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   20c92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   20c96:	b2db      	uxtb	r3, r3
   20c98:	2b09      	cmp	r3, #9
   20c9a:	d802      	bhi.n	20ca2 <char2hex+0x10>
		*x = c - '0';
   20c9c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   20c9e:	2000      	movs	r0, #0
   20ca0:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   20ca2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   20ca6:	b2db      	uxtb	r3, r3
   20ca8:	2b05      	cmp	r3, #5
   20caa:	d803      	bhi.n	20cb4 <char2hex+0x22>
		*x = c - 'a' + 10;
   20cac:	3857      	subs	r0, #87	; 0x57
   20cae:	7008      	strb	r0, [r1, #0]
	return 0;
   20cb0:	2000      	movs	r0, #0
   20cb2:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   20cb4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   20cb8:	b2db      	uxtb	r3, r3
   20cba:	2b05      	cmp	r3, #5
   20cbc:	d803      	bhi.n	20cc6 <char2hex+0x34>
		*x = c - 'A' + 10;
   20cbe:	3837      	subs	r0, #55	; 0x37
   20cc0:	7008      	strb	r0, [r1, #0]
	return 0;
   20cc2:	2000      	movs	r0, #0
   20cc4:	4770      	bx	lr
		return -EINVAL;
   20cc6:	f06f 0015 	mvn.w	r0, #21
}
   20cca:	4770      	bx	lr

00020ccc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   20ccc:	4602      	mov	r2, r0
   20cce:	b1b0      	cbz	r0, 20cfe <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   20cd0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   20cd2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   20cd6:	2b02      	cmp	r3, #2
   20cd8:	d00b      	beq.n	20cf2 <sys_notify_validate+0x26>
   20cda:	2b03      	cmp	r3, #3
   20cdc:	d004      	beq.n	20ce8 <sys_notify_validate+0x1c>
   20cde:	2b01      	cmp	r3, #1
   20ce0:	d004      	beq.n	20cec <sys_notify_validate+0x20>
   20ce2:	f06f 0015 	mvn.w	r0, #21
   20ce6:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   20ce8:	6803      	ldr	r3, [r0, #0]
   20cea:	b15b      	cbz	r3, 20d04 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   20cec:	2000      	movs	r0, #0
   20cee:	6090      	str	r0, [r2, #8]
   20cf0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   20cf2:	6803      	ldr	r3, [r0, #0]
   20cf4:	2b00      	cmp	r3, #0
   20cf6:	d1f9      	bne.n	20cec <sys_notify_validate+0x20>
			rv = -EINVAL;
   20cf8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   20cfc:	4770      	bx	lr
		return -EINVAL;
   20cfe:	f06f 0015 	mvn.w	r0, #21
   20d02:	4770      	bx	lr
			rv = -EINVAL;
   20d04:	f06f 0015 	mvn.w	r0, #21
   20d08:	4770      	bx	lr

00020d0a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   20d0a:	b510      	push	{r4, lr}
   20d0c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   20d0e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   20d10:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   20d14:	6081      	str	r1, [r0, #8]
	switch (method) {
   20d16:	2a02      	cmp	r2, #2
   20d18:	d004      	beq.n	20d24 <sys_notify_finalize+0x1a>
   20d1a:	2a03      	cmp	r2, #3
   20d1c:	d105      	bne.n	20d2a <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   20d1e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   20d20:	2000      	movs	r0, #0
		break;
   20d22:	e004      	b.n	20d2e <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   20d24:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   20d26:	2400      	movs	r4, #0
		break;
   20d28:	e001      	b.n	20d2e <sys_notify_finalize+0x24>
	switch (method) {
   20d2a:	2400      	movs	r4, #0
   20d2c:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   20d2e:	2200      	movs	r2, #0
   20d30:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   20d32:	b108      	cbz	r0, 20d38 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   20d34:	f7fd fad0 	bl	1e2d8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   20d38:	4620      	mov	r0, r4
   20d3a:	bd10      	pop	{r4, pc}

00020d3c <arch_printk_char_out>:
}
   20d3c:	2000      	movs	r0, #0
   20d3e:	4770      	bx	lr

00020d40 <str_out>:
{
   20d40:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   20d42:	680c      	ldr	r4, [r1, #0]
   20d44:	b154      	cbz	r4, 20d5c <str_out+0x1c>
   20d46:	688a      	ldr	r2, [r1, #8]
   20d48:	684b      	ldr	r3, [r1, #4]
   20d4a:	429a      	cmp	r2, r3
   20d4c:	da06      	bge.n	20d5c <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   20d4e:	3b01      	subs	r3, #1
   20d50:	429a      	cmp	r2, r3
   20d52:	d008      	beq.n	20d66 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   20d54:	1c53      	adds	r3, r2, #1
   20d56:	608b      	str	r3, [r1, #8]
   20d58:	54a0      	strb	r0, [r4, r2]
   20d5a:	e002      	b.n	20d62 <str_out+0x22>
		ctx->count++;
   20d5c:	688b      	ldr	r3, [r1, #8]
   20d5e:	3301      	adds	r3, #1
   20d60:	608b      	str	r3, [r1, #8]
}
   20d62:	bc10      	pop	{r4}
   20d64:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   20d66:	1c53      	adds	r3, r2, #1
   20d68:	608b      	str	r3, [r1, #8]
   20d6a:	2300      	movs	r3, #0
   20d6c:	54a3      	strb	r3, [r4, r2]
   20d6e:	e7f8      	b.n	20d62 <str_out+0x22>

00020d70 <printk>:
{
   20d70:	b40f      	push	{r0, r1, r2, r3}
   20d72:	b500      	push	{lr}
   20d74:	b083      	sub	sp, #12
   20d76:	a904      	add	r1, sp, #16
   20d78:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   20d7c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   20d7e:	f7ef fe75 	bl	10a6c <vprintk>
}
   20d82:	b003      	add	sp, #12
   20d84:	f85d eb04 	ldr.w	lr, [sp], #4
   20d88:	b004      	add	sp, #16
   20d8a:	4770      	bx	lr

00020d8c <snprintk>:
{
   20d8c:	b40c      	push	{r2, r3}
   20d8e:	b500      	push	{lr}
   20d90:	b083      	sub	sp, #12
   20d92:	ab04      	add	r3, sp, #16
   20d94:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   20d98:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   20d9a:	f7ef fe77 	bl	10a8c <vsnprintk>
}
   20d9e:	b003      	add	sp, #12
   20da0:	f85d eb04 	ldr.w	lr, [sp], #4
   20da4:	b002      	add	sp, #8
   20da6:	4770      	bx	lr

00020da8 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   20da8:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20dac:	8b01      	ldrh	r1, [r0, #24]
   20dae:	f021 0107 	bic.w	r1, r1, #7
   20db2:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   20db4:	8301      	strh	r1, [r0, #24]
}
   20db6:	4770      	bx	lr

00020db8 <notify_monitors>:
{
   20db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20dbc:	4606      	mov	r6, r0
   20dbe:	460f      	mov	r7, r1
   20dc0:	4690      	mov	r8, r2
	return list->head;
   20dc2:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   20dc4:	b119      	cbz	r1, 20dce <notify_monitors+0x16>
   20dc6:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   20dc8:	b131      	cbz	r1, 20dd8 <notify_monitors+0x20>
	return node->next;
   20dca:	680c      	ldr	r4, [r1, #0]
   20dcc:	e004      	b.n	20dd8 <notify_monitors+0x20>
   20dce:	460c      	mov	r4, r1
   20dd0:	e002      	b.n	20dd8 <notify_monitors+0x20>
   20dd2:	4623      	mov	r3, r4
   20dd4:	4621      	mov	r1, r4
   20dd6:	461c      	mov	r4, r3
   20dd8:	b159      	cbz	r1, 20df2 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   20dda:	684d      	ldr	r5, [r1, #4]
   20ddc:	4643      	mov	r3, r8
   20dde:	463a      	mov	r2, r7
   20de0:	4630      	mov	r0, r6
   20de2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   20de4:	2c00      	cmp	r4, #0
   20de6:	d0f4      	beq.n	20dd2 <notify_monitors+0x1a>
   20de8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   20dea:	2c00      	cmp	r4, #0
   20dec:	d0f2      	beq.n	20dd4 <notify_monitors+0x1c>
	return node->next;
   20dee:	6823      	ldr	r3, [r4, #0]
   20df0:	e7f0      	b.n	20dd4 <notify_monitors+0x1c>
}
   20df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020df6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20df6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   20df8:	f013 0307 	ands.w	r3, r3, #7
   20dfc:	d103      	bne.n	20e06 <process_recheck+0x10>
	return list->head;
   20dfe:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   20e00:	b10a      	cbz	r2, 20e06 <process_recheck+0x10>
		evt = EVT_START;
   20e02:	2003      	movs	r0, #3
   20e04:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   20e06:	2b02      	cmp	r3, #2
   20e08:	d003      	beq.n	20e12 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   20e0a:	2b01      	cmp	r3, #1
   20e0c:	d006      	beq.n	20e1c <process_recheck+0x26>
	int evt = EVT_NOP;
   20e0e:	2000      	movs	r0, #0
   20e10:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   20e12:	8b42      	ldrh	r2, [r0, #26]
   20e14:	2a00      	cmp	r2, #0
   20e16:	d1f8      	bne.n	20e0a <process_recheck+0x14>
		evt = EVT_STOP;
   20e18:	2004      	movs	r0, #4
   20e1a:	4770      	bx	lr
   20e1c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   20e1e:	b10b      	cbz	r3, 20e24 <process_recheck+0x2e>
		evt = EVT_RESET;
   20e20:	2005      	movs	r0, #5
}
   20e22:	4770      	bx	lr
	int evt = EVT_NOP;
   20e24:	2000      	movs	r0, #0
   20e26:	4770      	bx	lr

00020e28 <process_complete>:
{
   20e28:	b538      	push	{r3, r4, r5, lr}
   20e2a:	4604      	mov	r4, r0
   20e2c:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20e2e:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   20e30:	2a00      	cmp	r2, #0
   20e32:	db07      	blt.n	20e44 <process_complete+0x1c>
   20e34:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   20e38:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   20e3a:	2a01      	cmp	r2, #1
   20e3c:	d90e      	bls.n	20e5c <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   20e3e:	2b04      	cmp	r3, #4
   20e40:	d032      	beq.n	20ea8 <process_complete+0x80>
}
   20e42:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   20e44:	e9d0 0100 	ldrd	r0, r1, [r0]
   20e48:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   20e4c:	2300      	movs	r3, #0
   20e4e:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   20e50:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   20e52:	2101      	movs	r1, #1
   20e54:	4620      	mov	r0, r4
   20e56:	f7ff ffa7 	bl	20da8 <set_state>
   20e5a:	e7f2      	b.n	20e42 <process_complete+0x1a>
		*clients = mgr->clients;
   20e5c:	e9d0 0100 	ldrd	r0, r1, [r0]
   20e60:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   20e64:	2200      	movs	r2, #0
   20e66:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   20e68:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   20e6a:	2b06      	cmp	r3, #6
   20e6c:	d117      	bne.n	20e9e <process_complete+0x76>
	return list->head;
   20e6e:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20e70:	b13b      	cbz	r3, 20e82 <process_complete+0x5a>
				mgr->refs += 1U;
   20e72:	8b62      	ldrh	r2, [r4, #26]
   20e74:	3201      	adds	r2, #1
   20e76:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   20e78:	2b00      	cmp	r3, #0
   20e7a:	d0f9      	beq.n	20e70 <process_complete+0x48>
	return node->next;
   20e7c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20e7e:	2b00      	cmp	r3, #0
   20e80:	d1f6      	bne.n	20e70 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   20e82:	2102      	movs	r1, #2
   20e84:	4620      	mov	r0, r4
   20e86:	f7ff ff8f 	bl	20da8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   20e8a:	4620      	mov	r0, r4
   20e8c:	f7ff ffb3 	bl	20df6 <process_recheck>
   20e90:	2800      	cmp	r0, #0
   20e92:	d0d6      	beq.n	20e42 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   20e94:	8b23      	ldrh	r3, [r4, #24]
   20e96:	f043 0320 	orr.w	r3, r3, #32
   20e9a:	8323      	strh	r3, [r4, #24]
   20e9c:	e7d1      	b.n	20e42 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   20e9e:	2100      	movs	r1, #0
   20ea0:	4620      	mov	r0, r4
   20ea2:	f7ff ff81 	bl	20da8 <set_state>
   20ea6:	e7f0      	b.n	20e8a <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   20ea8:	2100      	movs	r1, #0
   20eaa:	f7ff ff7d 	bl	20da8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   20eae:	4620      	mov	r0, r4
   20eb0:	f7ff ffa1 	bl	20df6 <process_recheck>
   20eb4:	2800      	cmp	r0, #0
   20eb6:	d0c4      	beq.n	20e42 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   20eb8:	8b23      	ldrh	r3, [r4, #24]
   20eba:	f043 0320 	orr.w	r3, r3, #32
   20ebe:	8323      	strh	r3, [r4, #24]
}
   20ec0:	e7bf      	b.n	20e42 <process_complete+0x1a>

00020ec2 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   20ec2:	b158      	cbz	r0, 20edc <validate_args+0x1a>
{
   20ec4:	b510      	push	{r4, lr}
   20ec6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   20ec8:	b159      	cbz	r1, 20ee2 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   20eca:	1d08      	adds	r0, r1, #4
   20ecc:	f7ff fefe 	bl	20ccc <sys_notify_validate>
	if ((rv == 0)
   20ed0:	b918      	cbnz	r0, 20eda <validate_args+0x18>
	    && ((cli->notify.flags
   20ed2:	68a3      	ldr	r3, [r4, #8]
   20ed4:	f033 0303 	bics.w	r3, r3, #3
   20ed8:	d106      	bne.n	20ee8 <validate_args+0x26>
}
   20eda:	bd10      	pop	{r4, pc}
		return -EINVAL;
   20edc:	f06f 0015 	mvn.w	r0, #21
}
   20ee0:	4770      	bx	lr
		return -EINVAL;
   20ee2:	f06f 0015 	mvn.w	r0, #21
   20ee6:	e7f8      	b.n	20eda <validate_args+0x18>
		rv = -EINVAL;
   20ee8:	f06f 0015 	mvn.w	r0, #21
   20eec:	e7f5      	b.n	20eda <validate_args+0x18>

00020eee <notify_one>:
{
   20eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ef2:	4607      	mov	r7, r0
   20ef4:	460c      	mov	r4, r1
   20ef6:	4616      	mov	r6, r2
   20ef8:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   20efa:	4619      	mov	r1, r3
   20efc:	1d20      	adds	r0, r4, #4
   20efe:	f7ff ff04 	bl	20d0a <sys_notify_finalize>
	if (cb) {
   20f02:	b128      	cbz	r0, 20f10 <notify_one+0x22>
   20f04:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   20f06:	462b      	mov	r3, r5
   20f08:	4632      	mov	r2, r6
   20f0a:	4621      	mov	r1, r4
   20f0c:	4638      	mov	r0, r7
   20f0e:	47c0      	blx	r8
}
   20f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020f14 <notify_all>:
{
   20f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20f18:	4681      	mov	r9, r0
   20f1a:	460c      	mov	r4, r1
   20f1c:	4690      	mov	r8, r2
   20f1e:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   20f20:	e005      	b.n	20f2e <notify_all+0x1a>
	list->tail = node;
   20f22:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   20f24:	463b      	mov	r3, r7
   20f26:	4642      	mov	r2, r8
   20f28:	4648      	mov	r0, r9
   20f2a:	f7ff ffe0 	bl	20eee <notify_one>
	return list->head;
   20f2e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   20f30:	b129      	cbz	r1, 20f3e <notify_all+0x2a>
	return node->next;
   20f32:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   20f34:	6025      	str	r5, [r4, #0]
	return list->tail;
   20f36:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20f38:	428e      	cmp	r6, r1
   20f3a:	d1f3      	bne.n	20f24 <notify_all+0x10>
   20f3c:	e7f1      	b.n	20f22 <notify_all+0xe>
}
   20f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020f42 <transition_complete>:
{
   20f42:	b510      	push	{r4, lr}
	__asm__ volatile(
   20f44:	f04f 0440 	mov.w	r4, #64	; 0x40
   20f48:	f3ef 8211 	mrs	r2, BASEPRI
   20f4c:	f384 8812 	msr	BASEPRI_MAX, r4
   20f50:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   20f54:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   20f56:	2101      	movs	r1, #1
   20f58:	f7ef fdae 	bl	10ab8 <process_event>
}
   20f5c:	bd10      	pop	{r4, pc}

00020f5e <onoff_manager_init>:
	if ((mgr == NULL)
   20f5e:	4603      	mov	r3, r0
   20f60:	b168      	cbz	r0, 20f7e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   20f62:	b179      	cbz	r1, 20f84 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   20f64:	680a      	ldr	r2, [r1, #0]
   20f66:	b182      	cbz	r2, 20f8a <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   20f68:	684a      	ldr	r2, [r1, #4]
   20f6a:	b18a      	cbz	r2, 20f90 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   20f6c:	2000      	movs	r0, #0
   20f6e:	6018      	str	r0, [r3, #0]
   20f70:	6058      	str	r0, [r3, #4]
   20f72:	6098      	str	r0, [r3, #8]
   20f74:	60d8      	str	r0, [r3, #12]
   20f76:	6158      	str	r0, [r3, #20]
   20f78:	6198      	str	r0, [r3, #24]
   20f7a:	6119      	str	r1, [r3, #16]
	return 0;
   20f7c:	4770      	bx	lr
		return -EINVAL;
   20f7e:	f06f 0015 	mvn.w	r0, #21
   20f82:	4770      	bx	lr
   20f84:	f06f 0015 	mvn.w	r0, #21
   20f88:	4770      	bx	lr
   20f8a:	f06f 0015 	mvn.w	r0, #21
   20f8e:	4770      	bx	lr
   20f90:	f06f 0015 	mvn.w	r0, #21
}
   20f94:	4770      	bx	lr

00020f96 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   20f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f98:	4604      	mov	r4, r0
   20f9a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   20f9c:	f7ff ff91 	bl	20ec2 <validate_args>

	if (rv < 0) {
   20fa0:	1e06      	subs	r6, r0, #0
   20fa2:	db37      	blt.n	21014 <onoff_request+0x7e>
   20fa4:	f04f 0340 	mov.w	r3, #64	; 0x40
   20fa8:	f3ef 8211 	mrs	r2, BASEPRI
   20fac:	f383 8812 	msr	BASEPRI_MAX, r3
   20fb0:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20fb4:	8b25      	ldrh	r5, [r4, #24]
   20fb6:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   20fba:	8b63      	ldrh	r3, [r4, #26]
   20fbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   20fc0:	428b      	cmp	r3, r1
   20fc2:	d02f      	beq.n	21024 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   20fc4:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   20fc6:	2d02      	cmp	r5, #2
   20fc8:	d00c      	beq.n	20fe4 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   20fca:	b18d      	cbz	r5, 20ff0 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   20fcc:	2d04      	cmp	r5, #4
   20fce:	d00f      	beq.n	20ff0 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   20fd0:	2d06      	cmp	r5, #6
   20fd2:	d00d      	beq.n	20ff0 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   20fd4:	2d05      	cmp	r5, #5
   20fd6:	d01f      	beq.n	21018 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   20fd8:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   20fdc:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   20fde:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   20fe0:	4608      	mov	r0, r1
   20fe2:	e00a      	b.n	20ffa <onoff_request+0x64>
		mgr->refs += 1U;
   20fe4:	3301      	adds	r3, #1
   20fe6:	8363      	strh	r3, [r4, #26]
		notify = true;
   20fe8:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   20fea:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   20fec:	4618      	mov	r0, r3
   20fee:	e004      	b.n	20ffa <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   20ff0:	fab5 f385 	clz	r3, r5
   20ff4:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   20ff6:	2100      	movs	r1, #0
		add_client = true;
   20ff8:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   20ffa:	b128      	cbz	r0, 21008 <onoff_request+0x72>
	parent->next = child;
   20ffc:	2000      	movs	r0, #0
   20ffe:	6038      	str	r0, [r7, #0]
	return list->tail;
   21000:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   21002:	b1a8      	cbz	r0, 21030 <onoff_request+0x9a>
	parent->next = child;
   21004:	6007      	str	r7, [r0, #0]
	list->tail = node;
   21006:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   21008:	b9ab      	cbnz	r3, 21036 <onoff_request+0xa0>
	__asm__ volatile(
   2100a:	f382 8811 	msr	BASEPRI, r2
   2100e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   21012:	b9a9      	cbnz	r1, 21040 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   21014:	4630      	mov	r0, r6
   21016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   21018:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   2101c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   2101e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   21020:	4608      	mov	r0, r1
   21022:	e7ea      	b.n	20ffa <onoff_request+0x64>
		rv = -EAGAIN;
   21024:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   21028:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   2102a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   2102c:	4608      	mov	r0, r1
   2102e:	e7e4      	b.n	20ffa <onoff_request+0x64>
   21030:	6067      	str	r7, [r4, #4]
	list->head = node;
   21032:	6027      	str	r7, [r4, #0]
}
   21034:	e7e8      	b.n	21008 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   21036:	2102      	movs	r1, #2
   21038:	4620      	mov	r0, r4
   2103a:	f7ef fd3d 	bl	10ab8 <process_event>
   2103e:	e7e9      	b.n	21014 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   21040:	2300      	movs	r3, #0
   21042:	462a      	mov	r2, r5
   21044:	4639      	mov	r1, r7
   21046:	4620      	mov	r0, r4
   21048:	f7ff ff51 	bl	20eee <notify_one>
   2104c:	e7e2      	b.n	21014 <onoff_request+0x7e>

0002104e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2104e:	b508      	push	{r3, lr}
   21050:	4604      	mov	r4, r0
   21052:	4608      	mov	r0, r1
   21054:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   21056:	461a      	mov	r2, r3
   21058:	47a0      	blx	r4
	return z_impl_z_current_get();
   2105a:	f7fc fc03 	bl	1d864 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2105e:	f7f2 fe85 	bl	13d6c <z_impl_k_thread_abort>

00021062 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21062:	00c9      	lsls	r1, r1, #3
   21064:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   21066:	4408      	add	r0, r1
   21068:	4770      	bx	lr

0002106a <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2106a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2106e:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   21070:	4299      	cmp	r1, r3
   21072:	d00e      	beq.n	21092 <free_list_remove_bidx+0x28>
{
   21074:	b410      	push	{r4}
   21076:	00cc      	lsls	r4, r1, #3
   21078:	4404      	add	r4, r0
   2107a:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   2107c:	3204      	adds	r2, #4
   2107e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   21082:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   21084:	3206      	adds	r2, #6
   21086:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   21088:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   2108a:	3304      	adds	r3, #4
   2108c:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   2108e:	bc10      	pop	{r4}
   21090:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   21092:	2301      	movs	r3, #1
   21094:	fa03 f102 	lsl.w	r1, r3, r2
   21098:	68c3      	ldr	r3, [r0, #12]
   2109a:	ea23 0301 	bic.w	r3, r3, r1
   2109e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   210a0:	3204      	adds	r2, #4
   210a2:	2300      	movs	r3, #0
   210a4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   210a8:	4770      	bx	lr

000210aa <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   210aa:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   210ac:	1d13      	adds	r3, r2, #4
   210ae:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   210b2:	b984      	cbnz	r4, 210d6 <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   210b4:	2301      	movs	r3, #1
   210b6:	fa03 f402 	lsl.w	r4, r3, r2
   210ba:	68c3      	ldr	r3, [r0, #12]
   210bc:	4323      	orrs	r3, r4
   210be:	60c3      	str	r3, [r0, #12]
		b->next = c;
   210c0:	3204      	adds	r2, #4
   210c2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   210c6:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   210c8:	1d1a      	adds	r2, r3, #4
   210ca:	b289      	uxth	r1, r1
   210cc:	5281      	strh	r1, [r0, r2]
   210ce:	3306      	adds	r3, #6
   210d0:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   210d2:	bc70      	pop	{r4, r5, r6}
   210d4:	4770      	bx	lr
	void *cmem = &buf[c];
   210d6:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   210d8:	3204      	adds	r2, #4
   210da:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   210dc:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   210de:	1d2e      	adds	r6, r5, #4
   210e0:	5383      	strh	r3, [r0, r6]
   210e2:	3506      	adds	r5, #6
   210e4:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   210e6:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   210e8:	3306      	adds	r3, #6
   210ea:	b289      	uxth	r1, r1
   210ec:	52c1      	strh	r1, [r0, r3]
   210ee:	5281      	strh	r1, [r0, r2]
   210f0:	e7ef      	b.n	210d2 <free_list_add_bidx+0x28>

000210f2 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   210f2:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   210f4:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   210f6:	3302      	adds	r3, #2
   210f8:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   210fa:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   210fc:	1a89      	subs	r1, r1, r2
   210fe:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21102:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   21104:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21106:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   21108:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   2110a:	3402      	adds	r4, #2
   2110c:	5303      	strh	r3, [r0, r4]
   2110e:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21112:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   21116:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   21118:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   2111c:	bc30      	pop	{r4, r5}
   2111e:	4770      	bx	lr

00021120 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   21120:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   21122:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   21124:	3102      	adds	r1, #2
   21126:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   21128:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   2112a:	3402      	adds	r4, #2
   2112c:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2112e:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21130:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21134:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   21136:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   21138:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   2113a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   2113e:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   21142:	bc30      	pop	{r4, r5}
   21144:	4770      	bx	lr

00021146 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21146:	3904      	subs	r1, #4
   21148:	1a08      	subs	r0, r1, r0
}
   2114a:	08c0      	lsrs	r0, r0, #3
   2114c:	4770      	bx	lr

0002114e <free_list_remove>:
{
   2114e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   21150:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   21154:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21156:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   21158:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   2115c:	f1c2 021f 	rsb	r2, r2, #31
   21160:	f7ff ff83 	bl	2106a <free_list_remove_bidx>
}
   21164:	bd08      	pop	{r3, pc}

00021166 <free_list_add>:
{
   21166:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   21168:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2116c:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2116e:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   21170:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   21174:	f1c2 021f 	rsb	r2, r2, #31
   21178:	f7ff ff97 	bl	210aa <free_list_add_bidx>
}
   2117c:	bd08      	pop	{r3, pc}

0002117e <free_chunk>:
{
   2117e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21180:	4604      	mov	r4, r0
   21182:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   21184:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   21186:	1cb7      	adds	r7, r6, #2
   21188:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   2118a:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   2118e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   21192:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   21194:	f013 0f01 	tst.w	r3, #1
   21198:	d00c      	beq.n	211b4 <free_chunk+0x36>
   2119a:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2119c:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   2119e:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   211a2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   211a4:	f013 0f01 	tst.w	r3, #1
   211a8:	d00e      	beq.n	211c8 <free_chunk+0x4a>
	free_list_add(h, c);
   211aa:	4629      	mov	r1, r5
   211ac:	4620      	mov	r0, r4
   211ae:	f7ff ffda 	bl	21166 <free_list_add>
}
   211b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   211b4:	f7ff ffcb 	bl	2114e <free_list_remove>
   211b8:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   211ba:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   211be:	4629      	mov	r1, r5
   211c0:	4620      	mov	r0, r4
   211c2:	f7ff ffad 	bl	21120 <merge_chunks>
   211c6:	e7e8      	b.n	2119a <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   211c8:	4620      	mov	r0, r4
   211ca:	f7ff ffc0 	bl	2114e <free_list_remove>
   211ce:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   211d0:	462a      	mov	r2, r5
   211d2:	1a69      	subs	r1, r5, r1
   211d4:	4620      	mov	r0, r4
   211d6:	f7ff ffa3 	bl	21120 <merge_chunks>
   211da:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   211dc:	1aed      	subs	r5, r5, r3
   211de:	e7e4      	b.n	211aa <free_chunk+0x2c>

000211e0 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   211e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   211e2:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   211e6:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   211ea:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   211ee:	b1b7      	cbz	r7, 2121e <alloc_chunk+0x3e>
   211f0:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   211f4:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   211f6:	1d14      	adds	r4, r2, #4
   211f8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   211fc:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   211fe:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   21202:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   21206:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   2120a:	d912      	bls.n	21232 <alloc_chunk+0x52>
   2120c:	4405      	add	r5, r0
   2120e:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   21210:	1d15      	adds	r5, r2, #4
   21212:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   21216:	3e01      	subs	r6, #1
   21218:	d001      	beq.n	2121e <alloc_chunk+0x3e>
   2121a:	42a7      	cmp	r7, r4
   2121c:	d1eb      	bne.n	211f6 <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2121e:	68c4      	ldr	r4, [r0, #12]
   21220:	f1c3 0220 	rsb	r2, r3, #32
   21224:	2301      	movs	r3, #1
   21226:	4093      	lsls	r3, r2
   21228:	425b      	negs	r3, r3

	if (bmask != 0U) {
   2122a:	401c      	ands	r4, r3
   2122c:	d105      	bne.n	2123a <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2122e:	4620      	mov	r0, r4
   21230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   21232:	4621      	mov	r1, r4
   21234:	f7ff ff19 	bl	2106a <free_list_remove_bidx>
				return c;
   21238:	e7f9      	b.n	2122e <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   2123a:	fa94 f2a4 	rbit	r2, r4
   2123e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21242:	1d13      	adds	r3, r2, #4
   21244:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   21248:	4621      	mov	r1, r4
   2124a:	f7ff ff0e 	bl	2106a <free_list_remove_bidx>
		return c;
   2124e:	e7ee      	b.n	2122e <alloc_chunk+0x4e>

00021250 <sys_heap_free>:
	if (mem == NULL) {
   21250:	b179      	cbz	r1, 21272 <sys_heap_free+0x22>
{
   21252:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   21254:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   21256:	4620      	mov	r0, r4
   21258:	f7ff ff75 	bl	21146 <mem_to_chunkid>
   2125c:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   2125e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21262:	8853      	ldrh	r3, [r2, #2]
   21264:	f023 0301 	bic.w	r3, r3, #1
   21268:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   2126a:	4620      	mov	r0, r4
   2126c:	f7ff ff87 	bl	2117e <free_chunk>
}
   21270:	bd10      	pop	{r4, pc}
   21272:	4770      	bx	lr

00021274 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   21274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   21276:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   21278:	b341      	cbz	r1, 212cc <sys_heap_alloc+0x58>
   2127a:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   2127c:	68aa      	ldr	r2, [r5, #8]
   2127e:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   21282:	d925      	bls.n	212d0 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21284:	330b      	adds	r3, #11
   21286:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   21288:	4621      	mov	r1, r4
   2128a:	4628      	mov	r0, r5
   2128c:	f7ff ffa8 	bl	211e0 <alloc_chunk>
	if (c == 0U) {
   21290:	4607      	mov	r7, r0
   21292:	b1f8      	cbz	r0, 212d4 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   21294:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   21296:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   2129a:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   2129c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   212a0:	d309      	bcc.n	212b6 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   212a2:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   212a4:	885a      	ldrh	r2, [r3, #2]
   212a6:	f042 0201 	orr.w	r2, r2, #1
   212aa:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   212ac:	4639      	mov	r1, r7
   212ae:	4628      	mov	r0, r5
   212b0:	f7ff fed7 	bl	21062 <chunk_mem>
}
   212b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   212b6:	4404      	add	r4, r0
   212b8:	4622      	mov	r2, r4
   212ba:	4601      	mov	r1, r0
   212bc:	4628      	mov	r0, r5
   212be:	f7ff ff18 	bl	210f2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   212c2:	4621      	mov	r1, r4
   212c4:	4628      	mov	r0, r5
   212c6:	f7ff ff4e 	bl	21166 <free_list_add>
   212ca:	e7ea      	b.n	212a2 <sys_heap_alloc+0x2e>
		return NULL;
   212cc:	2000      	movs	r0, #0
   212ce:	e7f1      	b.n	212b4 <sys_heap_alloc+0x40>
   212d0:	2000      	movs	r0, #0
   212d2:	e7ef      	b.n	212b4 <sys_heap_alloc+0x40>
		return NULL;
   212d4:	2000      	movs	r0, #0
   212d6:	e7ed      	b.n	212b4 <sys_heap_alloc+0x40>

000212d8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   212d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   212dc:	460d      	mov	r5, r1
   212de:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   212e0:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   212e2:	424b      	negs	r3, r1
   212e4:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   212e8:	ea31 0303 	bics.w	r3, r1, r3
   212ec:	d03e      	beq.n	2136c <sys_heap_aligned_alloc+0x94>
		align -= rew;
   212ee:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   212f2:	f1b8 0f03 	cmp.w	r8, #3
   212f6:	d844      	bhi.n	21382 <sys_heap_aligned_alloc+0xaa>
   212f8:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   212fa:	2c00      	cmp	r4, #0
   212fc:	d057      	beq.n	213ae <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   212fe:	68b3      	ldr	r3, [r6, #8]
   21300:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   21304:	d955      	bls.n	213b2 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   21306:	1929      	adds	r1, r5, r4
   21308:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2130a:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2130c:	08c9      	lsrs	r1, r1, #3
   2130e:	4630      	mov	r0, r6
   21310:	f7ff ff66 	bl	211e0 <alloc_chunk>

	if (c0 == 0) {
   21314:	4607      	mov	r7, r0
   21316:	2800      	cmp	r0, #0
   21318:	d04d      	beq.n	213b6 <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   2131a:	4601      	mov	r1, r0
   2131c:	4630      	mov	r0, r6
   2131e:	f7ff fea0 	bl	21062 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   21322:	4440      	add	r0, r8
   21324:	4428      	add	r0, r5
   21326:	3801      	subs	r0, #1
   21328:	426d      	negs	r5, r5
   2132a:	4005      	ands	r5, r0
   2132c:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21330:	442c      	add	r4, r5
   21332:	3407      	adds	r4, #7
   21334:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   21338:	4629      	mov	r1, r5
   2133a:	4630      	mov	r0, r6
   2133c:	f7ff ff03 	bl	21146 <mem_to_chunkid>
   21340:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   21342:	1ba4      	subs	r4, r4, r6
   21344:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   21346:	4287      	cmp	r7, r0
   21348:	d31d      	bcc.n	21386 <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   2134a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   2134e:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   21352:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   21354:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   21358:	429c      	cmp	r4, r3
   2135a:	d31e      	bcc.n	2139a <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   2135c:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2135e:	8873      	ldrh	r3, [r6, #2]
   21360:	f043 0301 	orr.w	r3, r3, #1
   21364:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   21366:	4628      	mov	r0, r5
   21368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   2136c:	2904      	cmp	r1, #4
   2136e:	d903      	bls.n	21378 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   21370:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   21374:	2204      	movs	r2, #4
   21376:	e7c0      	b.n	212fa <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   21378:	4611      	mov	r1, r2
   2137a:	f7ff ff7b 	bl	21274 <sys_heap_alloc>
   2137e:	4605      	mov	r5, r0
   21380:	e7f1      	b.n	21366 <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   21382:	2204      	movs	r2, #4
   21384:	e7b9      	b.n	212fa <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   21386:	4602      	mov	r2, r0
   21388:	4639      	mov	r1, r7
   2138a:	4630      	mov	r0, r6
   2138c:	f7ff feb1 	bl	210f2 <split_chunks>
		free_list_add(h, c0);
   21390:	4639      	mov	r1, r7
   21392:	4630      	mov	r0, r6
   21394:	f7ff fee7 	bl	21166 <free_list_add>
   21398:	e7d7      	b.n	2134a <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   2139a:	4622      	mov	r2, r4
   2139c:	4641      	mov	r1, r8
   2139e:	4630      	mov	r0, r6
   213a0:	f7ff fea7 	bl	210f2 <split_chunks>
		free_list_add(h, c_end);
   213a4:	4621      	mov	r1, r4
   213a6:	4630      	mov	r0, r6
   213a8:	f7ff fedd 	bl	21166 <free_list_add>
   213ac:	e7d6      	b.n	2135c <sys_heap_aligned_alloc+0x84>
		return NULL;
   213ae:	2500      	movs	r5, #0
   213b0:	e7d9      	b.n	21366 <sys_heap_aligned_alloc+0x8e>
   213b2:	2500      	movs	r5, #0
   213b4:	e7d7      	b.n	21366 <sys_heap_aligned_alloc+0x8e>
		return NULL;
   213b6:	2500      	movs	r5, #0
   213b8:	e7d5      	b.n	21366 <sys_heap_aligned_alloc+0x8e>

000213ba <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   213ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   213bc:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   213be:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   213c0:	1dc8      	adds	r0, r1, #7
   213c2:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   213c6:	440d      	add	r5, r1
   213c8:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   213cc:	1a2d      	subs	r5, r5, r0
   213ce:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   213d2:	4607      	mov	r7, r0
	heap->heap = h;
   213d4:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   213d6:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   213da:	2300      	movs	r3, #0
   213dc:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   213de:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   213e2:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   213e6:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   213ea:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   213ec:	f102 0c07 	add.w	ip, r2, #7
   213f0:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   213f4:	42b3      	cmp	r3, r6
   213f6:	da05      	bge.n	21404 <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   213f8:	1d1a      	adds	r2, r3, #4
   213fa:	2400      	movs	r4, #0
   213fc:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   21400:	3301      	adds	r3, #1
   21402:	e7f7      	b.n	213f4 <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21404:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   21406:	b29b      	uxth	r3, r3
   21408:	2200      	movs	r2, #0
   2140a:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2140c:	f043 0301 	orr.w	r3, r3, #1
   21410:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   21412:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21416:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   21418:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   2141c:	1c94      	adds	r4, r2, #2
   2141e:	5306      	strh	r6, [r0, r4]
   21420:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   21422:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   21426:	4405      	add	r5, r0
   21428:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2142a:	2301      	movs	r3, #1
   2142c:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   2142e:	f7ff fe9a 	bl	21166 <free_list_add>
}
   21432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021434 <outs>:
{
   21434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21438:	4607      	mov	r7, r0
   2143a:	460e      	mov	r6, r1
   2143c:	4614      	mov	r4, r2
   2143e:	4698      	mov	r8, r3
	size_t count = 0;
   21440:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21442:	e006      	b.n	21452 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   21444:	4631      	mov	r1, r6
   21446:	f814 0b01 	ldrb.w	r0, [r4], #1
   2144a:	47b8      	blx	r7
		if (rc < 0) {
   2144c:	2800      	cmp	r0, #0
   2144e:	db09      	blt.n	21464 <outs+0x30>
		++count;
   21450:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21452:	4544      	cmp	r4, r8
   21454:	d3f6      	bcc.n	21444 <outs+0x10>
   21456:	f1b8 0f00 	cmp.w	r8, #0
   2145a:	d102      	bne.n	21462 <outs+0x2e>
   2145c:	7823      	ldrb	r3, [r4, #0]
   2145e:	2b00      	cmp	r3, #0
   21460:	d1f0      	bne.n	21444 <outs+0x10>
	return (int)count;
   21462:	4628      	mov	r0, r5
}
   21464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021468 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   21468:	4770      	bx	lr

0002146a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2146a:	2300      	movs	r3, #0
   2146c:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   2146e:	6003      	str	r3, [r0, #0]
}
   21470:	4770      	bx	lr

00021472 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   21472:	6803      	ldr	r3, [r0, #0]
   21474:	b12b      	cbz	r3, 21482 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   21476:	6843      	ldr	r3, [r0, #4]
   21478:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   2147a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2147c:	2300      	movs	r3, #0
   2147e:	600b      	str	r3, [r1, #0]
}
   21480:	4770      	bx	lr
		list->head = msg;
   21482:	6001      	str	r1, [r0, #0]
   21484:	e7f9      	b.n	2147a <log_list_add_tail+0x8>

00021486 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   21486:	6800      	ldr	r0, [r0, #0]
   21488:	4770      	bx	lr

0002148a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2148a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2148c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2148e:	b108      	cbz	r0, 21494 <log_list_head_get+0xa>
		list->head = list->head->next;
   21490:	6802      	ldr	r2, [r0, #0]
   21492:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   21494:	4770      	bx	lr

00021496 <dummy_timestamp>:
}
   21496:	2000      	movs	r0, #0
   21498:	4770      	bx	lr

0002149a <msg_filter_check>:
}
   2149a:	2001      	movs	r0, #1
   2149c:	4770      	bx	lr

0002149e <default_get_timestamp>:
{
   2149e:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   214a0:	f003 f847 	bl	24532 <sys_clock_cycle_get_32>
}
   214a4:	bd08      	pop	{r3, pc}

000214a6 <z_log_get_tag>:
}
   214a6:	2000      	movs	r0, #0
   214a8:	4770      	bx	lr

000214aa <block_on_alloc>:
}
   214aa:	2000      	movs	r0, #0
   214ac:	4770      	bx	lr

000214ae <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   214ae:	2901      	cmp	r1, #1
   214b0:	d906      	bls.n	214c0 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   214b2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   214b4:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   214b6:	2906      	cmp	r1, #6
   214b8:	d907      	bls.n	214ca <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   214ba:	3907      	subs	r1, #7
		cont = cont->next;
   214bc:	681b      	ldr	r3, [r3, #0]
   214be:	e7fa      	b.n	214b6 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   214c0:	3104      	adds	r1, #4
   214c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   214c6:	6888      	ldr	r0, [r1, #8]
   214c8:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   214ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   214ce:	6848      	ldr	r0, [r1, #4]
}
   214d0:	4770      	bx	lr

000214d2 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   214d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214d6:	460d      	mov	r5, r1
	struct log_msg_cont *cont = msg->payload.ext.next;
   214d8:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   214da:	2a03      	cmp	r2, #3
   214dc:	d917      	bls.n	2150e <copy_args_to_msg+0x3c>
   214de:	6809      	ldr	r1, [r1, #0]
   214e0:	686b      	ldr	r3, [r5, #4]
   214e2:	6181      	str	r1, [r0, #24]
   214e4:	61c3      	str	r3, [r0, #28]
		(void)memcpy(msg->payload.ext.data.args, args,
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   214e6:	1e94      	subs	r4, r2, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   214e8:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   214ea:	b1b4      	cbz	r4, 2151a <copy_args_to_msg+0x48>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   214ec:	46a0      	mov	r8, r4
   214ee:	2c07      	cmp	r4, #7
   214f0:	bf28      	it	cs
   214f2:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   214f6:	ea4f 0788 	mov.w	r7, r8, lsl #2
   214fa:	463a      	mov	r2, r7
   214fc:	4629      	mov	r1, r5
   214fe:	1d30      	adds	r0, r6, #4
   21500:	f004 fa69 	bl	259d6 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   21504:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   21508:	443d      	add	r5, r7
		cont = cont->next;
   2150a:	6836      	ldr	r6, [r6, #0]
   2150c:	e7ed      	b.n	214ea <copy_args_to_msg+0x18>
   2150e:	0092      	lsls	r2, r2, #2
   21510:	3014      	adds	r0, #20
   21512:	f004 fa60 	bl	259d6 <memcpy>
		nargs  = 0U;
   21516:	2400      	movs	r4, #0
   21518:	e7e7      	b.n	214ea <copy_args_to_msg+0x18>
	}
}
   2151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002151e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2151e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21522:	461c      	mov	r4, r3
   21524:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21528:	8903      	ldrh	r3, [r0, #8]
   2152a:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2152e:	42a3      	cmp	r3, r4
   21530:	d91f      	bls.n	21572 <log_msg_hexdump_data_op+0x54>
   21532:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   21534:	6811      	ldr	r1, [r2, #0]
   21536:	4421      	add	r1, r4
   21538:	4299      	cmp	r1, r3
   2153a:	d901      	bls.n	21540 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   2153c:	1b19      	subs	r1, r3, r4
   2153e:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   21540:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21542:	2b0c      	cmp	r3, #12
   21544:	d919      	bls.n	2157a <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   21546:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   2154a:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2154c:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   2154e:	42a3      	cmp	r3, r4
   21550:	d91e      	bls.n	21590 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   21552:	42bb      	cmp	r3, r7
   21554:	bf28      	it	cs
   21556:	463b      	movcs	r3, r7
   21558:	461d      	mov	r5, r3

		if (put_op) {
   2155a:	f1b9 0f00 	cmp.w	r9, #0
   2155e:	d010      	beq.n	21582 <log_msg_hexdump_data_op+0x64>
   21560:	461a      	mov	r2, r3
   21562:	4641      	mov	r1, r8
   21564:	eb0c 0004 	add.w	r0, ip, r4
   21568:	f004 fa35 	bl	259d6 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   2156c:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   2156e:	44a8      	add	r8, r5
   21570:	e021      	b.n	215b6 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   21572:	2300      	movs	r3, #0
   21574:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   21576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   2157a:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   2157e:	2600      	movs	r6, #0
   21580:	e7e5      	b.n	2154e <log_msg_hexdump_data_op+0x30>
   21582:	461a      	mov	r2, r3
   21584:	eb0c 0104 	add.w	r1, ip, r4
   21588:	4640      	mov	r0, r8
   2158a:	f004 fa24 	bl	259d6 <memcpy>
   2158e:	e7ed      	b.n	2156c <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   21590:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   21592:	b91e      	cbnz	r6, 2159c <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   21594:	6946      	ldr	r6, [r0, #20]
   21596:	e001      	b.n	2159c <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   21598:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   2159a:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   2159c:	2c1b      	cmp	r4, #27
   2159e:	d8fb      	bhi.n	21598 <log_msg_hexdump_data_op+0x7a>
   215a0:	e009      	b.n	215b6 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   215a2:	1931      	adds	r1, r6, r4
   215a4:	462a      	mov	r2, r5
   215a6:	3104      	adds	r1, #4
   215a8:	4640      	mov	r0, r8
   215aa:	f004 fa14 	bl	259d6 <memcpy>
		cont = cont->next;
   215ae:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   215b0:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   215b2:	44a8      	add	r8, r5
		offset = 0;
   215b4:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   215b6:	2f00      	cmp	r7, #0
   215b8:	d0dd      	beq.n	21576 <log_msg_hexdump_data_op+0x58>
   215ba:	2e00      	cmp	r6, #0
   215bc:	d0db      	beq.n	21576 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   215be:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   215c2:	42bd      	cmp	r5, r7
   215c4:	bf28      	it	cs
   215c6:	463d      	movcs	r5, r7
		if (put_op) {
   215c8:	f1b9 0f00 	cmp.w	r9, #0
   215cc:	d0e9      	beq.n	215a2 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   215ce:	1930      	adds	r0, r6, r4
   215d0:	462a      	mov	r2, r5
   215d2:	4641      	mov	r1, r8
   215d4:	3004      	adds	r0, #4
   215d6:	f004 f9fe 	bl	259d6 <memcpy>
   215da:	e7e8      	b.n	215ae <log_msg_hexdump_data_op+0x90>

000215dc <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   215dc:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   215de:	f3bf 8f5b 	dmb	ish
   215e2:	e850 3f00 	ldrex	r3, [r0]
   215e6:	3301      	adds	r3, #1
   215e8:	e840 3200 	strex	r2, r3, [r0]
   215ec:	2a00      	cmp	r2, #0
   215ee:	d1f8      	bne.n	215e2 <log_msg_get+0x6>
   215f0:	f3bf 8f5b 	dmb	ish
}
   215f4:	4770      	bx	lr

000215f6 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   215f6:	7a40      	ldrb	r0, [r0, #9]
}
   215f8:	0900      	lsrs	r0, r0, #4
   215fa:	4770      	bx	lr

000215fc <log_msg_arg_get>:
{
   215fc:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   215fe:	7a43      	ldrb	r3, [r0, #9]
   21600:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   21604:	d20a      	bcs.n	2161c <log_msg_arg_get+0x20>
   21606:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21608:	2a03      	cmp	r2, #3
   2160a:	d804      	bhi.n	21616 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   2160c:	3104      	adds	r1, #4
   2160e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21612:	6840      	ldr	r0, [r0, #4]
   21614:	e003      	b.n	2161e <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   21616:	f7ff ff4a 	bl	214ae <cont_arg_get>
   2161a:	e000      	b.n	2161e <log_msg_arg_get+0x22>
		return 0;
   2161c:	2000      	movs	r0, #0
}
   2161e:	bd08      	pop	{r3, pc}

00021620 <log_msg_str_get>:
}
   21620:	6900      	ldr	r0, [r0, #16]
   21622:	4770      	bx	lr

00021624 <log_msg_put>:
{
   21624:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   21626:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21628:	f3bf 8f5b 	dmb	ish
   2162c:	e853 2f00 	ldrex	r2, [r3]
   21630:	3a01      	subs	r2, #1
   21632:	e843 2100 	strex	r1, r2, [r3]
   21636:	2900      	cmp	r1, #0
   21638:	d1f8      	bne.n	2162c <log_msg_put+0x8>
   2163a:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   2163e:	6843      	ldr	r3, [r0, #4]
   21640:	b103      	cbz	r3, 21644 <log_msg_put+0x20>
}
   21642:	bd08      	pop	{r3, pc}
		msg_free(msg);
   21644:	f7f0 fd08 	bl	12058 <msg_free>
}
   21648:	e7fb      	b.n	21642 <log_msg_put+0x1e>

0002164a <msg_alloc>:
{
   2164a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2164c:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2164e:	f7f0 fce7 	bl	12020 <log_msg_chunk_alloc>
	if (msg != NULL) {
   21652:	4607      	mov	r7, r0
   21654:	b140      	cbz	r0, 21668 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   21656:	2301      	movs	r3, #1
   21658:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2165a:	2200      	movs	r2, #0
   2165c:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   2165e:	f04f 0300 	mov.w	r3, #0
   21662:	f362 0300 	bfi	r3, r2, #0, #1
   21666:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21668:	b1f7      	cbz	r7, 216a8 <msg_alloc+0x5e>
   2166a:	2d03      	cmp	r5, #3
   2166c:	d91c      	bls.n	216a8 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   2166e:	7a7b      	ldrb	r3, [r7, #9]
   21670:	f36f 1307 	bfc	r3, #4, #4
   21674:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   21676:	7a3b      	ldrb	r3, [r7, #8]
   21678:	f043 0302 	orr.w	r3, r3, #2
   2167c:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2167e:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   21680:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   21684:	2300      	movs	r3, #0
   21686:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   21688:	2d00      	cmp	r5, #0
   2168a:	dd0d      	ble.n	216a8 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2168c:	f7f0 fcc8 	bl	12020 <log_msg_chunk_alloc>
		if (cont == NULL) {
   21690:	4604      	mov	r4, r0
   21692:	b128      	cbz	r0, 216a0 <msg_alloc+0x56>
		*next = cont;
   21694:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   21696:	2300      	movs	r3, #0
   21698:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   2169a:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   2169c:	3d07      	subs	r5, #7
   2169e:	e7f3      	b.n	21688 <msg_alloc+0x3e>
			msg_free(msg);
   216a0:	4638      	mov	r0, r7
   216a2:	f7f0 fcd9 	bl	12058 <msg_free>
			return NULL;
   216a6:	4627      	mov	r7, r4
}
   216a8:	4638      	mov	r0, r7
   216aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000216ac <log_msg_create_n>:
{
   216ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   216ae:	4607      	mov	r7, r0
   216b0:	460e      	mov	r6, r1
   216b2:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   216b4:	4610      	mov	r0, r2
   216b6:	f7ff ffc8 	bl	2164a <msg_alloc>
	if (msg != NULL) {
   216ba:	4605      	mov	r5, r0
   216bc:	b140      	cbz	r0, 216d0 <log_msg_create_n+0x24>
		msg->str = str;
   216be:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   216c0:	7a43      	ldrb	r3, [r0, #9]
   216c2:	f364 1307 	bfi	r3, r4, #4, #4
   216c6:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   216c8:	4622      	mov	r2, r4
   216ca:	4631      	mov	r1, r6
   216cc:	f7ff ff01 	bl	214d2 <copy_args_to_msg>
}
   216d0:	4628      	mov	r0, r5
   216d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000216d4 <log_msg_hexdump_create>:
{
   216d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   216d8:	4606      	mov	r6, r0
   216da:	460f      	mov	r7, r1
   216dc:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   216de:	f643 75ff 	movw	r5, #16383	; 0x3fff
   216e2:	4295      	cmp	r5, r2
   216e4:	bf28      	it	cs
   216e6:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   216e8:	f7f0 fc9a 	bl	12020 <log_msg_chunk_alloc>
	if (msg == NULL) {
   216ec:	4681      	mov	r9, r0
   216ee:	2800      	cmp	r0, #0
   216f0:	d041      	beq.n	21776 <log_msg_hexdump_create+0xa2>
	msg->hdr.ref_cnt = 1;
   216f2:	2301      	movs	r3, #1
   216f4:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   216f6:	7a03      	ldrb	r3, [r0, #8]
   216f8:	f043 0301 	orr.w	r3, r3, #1
   216fc:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   216fe:	8903      	ldrh	r3, [r0, #8]
   21700:	f365 038f 	bfi	r3, r5, #2, #14
   21704:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   21706:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21708:	2c0c      	cmp	r4, #12
   2170a:	d923      	bls.n	21754 <log_msg_hexdump_create+0x80>
   2170c:	683a      	ldr	r2, [r7, #0]
   2170e:	687b      	ldr	r3, [r7, #4]
   21710:	6182      	str	r2, [r0, #24]
   21712:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   21714:	2300      	movs	r3, #0
   21716:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   21718:	7a03      	ldrb	r3, [r0, #8]
   2171a:	f043 0302 	orr.w	r3, r3, #2
   2171e:	7203      	strb	r3, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21720:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21722:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   21724:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   21728:	b32d      	cbz	r5, 21776 <log_msg_hexdump_create+0xa2>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2172a:	f7f0 fc79 	bl	12020 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2172e:	4604      	mov	r4, r0
   21730:	b1e8      	cbz	r0, 2176e <log_msg_hexdump_create+0x9a>
		*prev_cont = cont;
   21732:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   21736:	2300      	movs	r3, #0
   21738:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   2173a:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   2173c:	462e      	mov	r6, r5
   2173e:	2d1c      	cmp	r5, #28
   21740:	bf28      	it	cs
   21742:	261c      	movcs	r6, #28
   21744:	4632      	mov	r2, r6
   21746:	4639      	mov	r1, r7
   21748:	3004      	adds	r0, #4
   2174a:	f004 f944 	bl	259d6 <memcpy>
		data += chunk_length;
   2174e:	4437      	add	r7, r6
		length -= chunk_length;
   21750:	1bad      	subs	r5, r5, r6
   21752:	e7e9      	b.n	21728 <log_msg_hexdump_create+0x54>
   21754:	462a      	mov	r2, r5
   21756:	4639      	mov	r1, r7
   21758:	3014      	adds	r0, #20
   2175a:	f004 f93c 	bl	259d6 <memcpy>
		msg->hdr.params.generic.ext = 0;
   2175e:	f899 3008 	ldrb.w	r3, [r9, #8]
   21762:	f36f 0341 	bfc	r3, #1, #1
   21766:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   2176a:	2500      	movs	r5, #0
   2176c:	e7da      	b.n	21724 <log_msg_hexdump_create+0x50>
			msg_free(msg);
   2176e:	4648      	mov	r0, r9
   21770:	f7f0 fc72 	bl	12058 <msg_free>
			return NULL;
   21774:	46a1      	mov	r9, r4
}
   21776:	4648      	mov	r0, r9
   21778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002177c <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2177c:	b510      	push	{r4, lr}
   2177e:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   21780:	2400      	movs	r4, #0
   21782:	9400      	str	r4, [sp, #0]
   21784:	f7ff fecb 	bl	2151e <log_msg_hexdump_data_op>
}
   21788:	b002      	add	sp, #8
   2178a:	bd10      	pop	{r4, pc}

0002178c <buffer_write>:
{
   2178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2178e:	4607      	mov	r7, r0
   21790:	460d      	mov	r5, r1
   21792:	4614      	mov	r4, r2
   21794:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   21796:	4632      	mov	r2, r6
   21798:	4621      	mov	r1, r4
   2179a:	4628      	mov	r0, r5
   2179c:	47b8      	blx	r7
		buf += processed;
   2179e:	4405      	add	r5, r0
	} while (len != 0);
   217a0:	1a24      	subs	r4, r4, r0
   217a2:	d1f8      	bne.n	21796 <buffer_write+0xa>
}
   217a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000217a6 <color_prefix>:
{
   217a6:	b508      	push	{r3, lr}
   217a8:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   217aa:	2201      	movs	r2, #1
   217ac:	f7f0 fcec 	bl	12188 <color_print>
}
   217b0:	bd08      	pop	{r3, pc}

000217b2 <color_postfix>:
{
   217b2:	b508      	push	{r3, lr}
   217b4:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   217b6:	2200      	movs	r2, #0
   217b8:	f7f0 fce6 	bl	12188 <color_print>
}
   217bc:	bd08      	pop	{r3, pc}

000217be <postfix_print>:
{
   217be:	b538      	push	{r3, r4, r5, lr}
   217c0:	4605      	mov	r5, r0
   217c2:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   217c4:	f001 0101 	and.w	r1, r1, #1
   217c8:	f7ff fff3 	bl	217b2 <color_postfix>
	newline_print(output, flags);
   217cc:	4621      	mov	r1, r4
   217ce:	4628      	mov	r0, r5
   217d0:	f7f0 fcf0 	bl	121b4 <newline_print>
}
   217d4:	bd38      	pop	{r3, r4, r5, pc}

000217d6 <std_print>:
{
   217d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   217da:	b08e      	sub	sp, #56	; 0x38
   217dc:	af0e      	add	r7, sp, #56	; 0x38
   217de:	4606      	mov	r6, r0
   217e0:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   217e2:	f7ff ff1d 	bl	21620 <log_msg_str_get>
   217e6:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   217e8:	4630      	mov	r0, r6
   217ea:	f7ff ff04 	bl	215f6 <log_msg_nargs_get>
   217ee:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   217f0:	0083      	lsls	r3, r0, #2
   217f2:	3307      	adds	r3, #7
   217f4:	f023 0307 	bic.w	r3, r3, #7
   217f8:	ebad 0d03 	sub.w	sp, sp, r3
   217fc:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   217fe:	2400      	movs	r4, #0
   21800:	4544      	cmp	r4, r8
   21802:	d207      	bcs.n	21814 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   21804:	4621      	mov	r1, r4
   21806:	4630      	mov	r0, r6
   21808:	f7ff fef8 	bl	215fc <log_msg_arg_get>
   2180c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   21810:	3401      	adds	r4, #1
   21812:	e7f5      	b.n	21800 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   21814:	4630      	mov	r0, r6
   21816:	f7ff feee 	bl	215f6 <log_msg_nargs_get>
   2181a:	280f      	cmp	r0, #15
   2181c:	d815      	bhi.n	2184a <std_print+0x74>
   2181e:	e8df f010 	tbh	[pc, r0, lsl #1]
   21822:	0010      	.short	0x0010
   21824:	001d0017 	.word	0x001d0017
   21828:	002d0024 	.word	0x002d0024
   2182c:	00450038 	.word	0x00450038
   21830:	00650054 	.word	0x00650054
   21834:	008d0078 	.word	0x008d0078
   21838:	00bd00a4 	.word	0x00bd00a4
   2183c:	00f500d8 	.word	0x00f500d8
   21840:	0114      	.short	0x0114
		print_formatted(output, str);
   21842:	4651      	mov	r1, sl
   21844:	4648      	mov	r0, r9
   21846:	f7f0 fc47 	bl	120d8 <print_formatted>
}
   2184a:	46bd      	mov	sp, r7
   2184c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   21850:	682a      	ldr	r2, [r5, #0]
   21852:	4651      	mov	r1, sl
   21854:	4648      	mov	r0, r9
   21856:	f7f0 fc3f 	bl	120d8 <print_formatted>
		break;
   2185a:	e7f6      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   2185c:	686b      	ldr	r3, [r5, #4]
   2185e:	682a      	ldr	r2, [r5, #0]
   21860:	4651      	mov	r1, sl
   21862:	4648      	mov	r0, r9
   21864:	f7f0 fc38 	bl	120d8 <print_formatted>
		break;
   21868:	e7ef      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   2186a:	686b      	ldr	r3, [r5, #4]
   2186c:	682a      	ldr	r2, [r5, #0]
   2186e:	68a9      	ldr	r1, [r5, #8]
   21870:	9100      	str	r1, [sp, #0]
   21872:	4651      	mov	r1, sl
   21874:	4648      	mov	r0, r9
   21876:	f7f0 fc2f 	bl	120d8 <print_formatted>
		break;
   2187a:	e7e6      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2187c:	686b      	ldr	r3, [r5, #4]
   2187e:	682a      	ldr	r2, [r5, #0]
   21880:	68e9      	ldr	r1, [r5, #12]
   21882:	9101      	str	r1, [sp, #4]
   21884:	68a9      	ldr	r1, [r5, #8]
   21886:	9100      	str	r1, [sp, #0]
   21888:	4651      	mov	r1, sl
   2188a:	4648      	mov	r0, r9
   2188c:	f7f0 fc24 	bl	120d8 <print_formatted>
		break;
   21890:	e7db      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   21892:	686b      	ldr	r3, [r5, #4]
   21894:	682a      	ldr	r2, [r5, #0]
   21896:	6929      	ldr	r1, [r5, #16]
   21898:	9102      	str	r1, [sp, #8]
   2189a:	68e9      	ldr	r1, [r5, #12]
   2189c:	9101      	str	r1, [sp, #4]
   2189e:	68a9      	ldr	r1, [r5, #8]
   218a0:	9100      	str	r1, [sp, #0]
   218a2:	4651      	mov	r1, sl
   218a4:	4648      	mov	r0, r9
   218a6:	f7f0 fc17 	bl	120d8 <print_formatted>
		break;
   218aa:	e7ce      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   218ac:	686b      	ldr	r3, [r5, #4]
   218ae:	682a      	ldr	r2, [r5, #0]
   218b0:	6969      	ldr	r1, [r5, #20]
   218b2:	9103      	str	r1, [sp, #12]
   218b4:	6929      	ldr	r1, [r5, #16]
   218b6:	9102      	str	r1, [sp, #8]
   218b8:	68e9      	ldr	r1, [r5, #12]
   218ba:	9101      	str	r1, [sp, #4]
   218bc:	68a9      	ldr	r1, [r5, #8]
   218be:	9100      	str	r1, [sp, #0]
   218c0:	4651      	mov	r1, sl
   218c2:	4648      	mov	r0, r9
   218c4:	f7f0 fc08 	bl	120d8 <print_formatted>
		break;
   218c8:	e7bf      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   218ca:	686b      	ldr	r3, [r5, #4]
   218cc:	682a      	ldr	r2, [r5, #0]
   218ce:	69a9      	ldr	r1, [r5, #24]
   218d0:	9104      	str	r1, [sp, #16]
   218d2:	6969      	ldr	r1, [r5, #20]
   218d4:	9103      	str	r1, [sp, #12]
   218d6:	6929      	ldr	r1, [r5, #16]
   218d8:	9102      	str	r1, [sp, #8]
   218da:	68e9      	ldr	r1, [r5, #12]
   218dc:	9101      	str	r1, [sp, #4]
   218de:	68a9      	ldr	r1, [r5, #8]
   218e0:	9100      	str	r1, [sp, #0]
   218e2:	4651      	mov	r1, sl
   218e4:	4648      	mov	r0, r9
   218e6:	f7f0 fbf7 	bl	120d8 <print_formatted>
		break;
   218ea:	e7ae      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   218ec:	686b      	ldr	r3, [r5, #4]
   218ee:	682a      	ldr	r2, [r5, #0]
   218f0:	69e9      	ldr	r1, [r5, #28]
   218f2:	9105      	str	r1, [sp, #20]
   218f4:	69a9      	ldr	r1, [r5, #24]
   218f6:	9104      	str	r1, [sp, #16]
   218f8:	6969      	ldr	r1, [r5, #20]
   218fa:	9103      	str	r1, [sp, #12]
   218fc:	6929      	ldr	r1, [r5, #16]
   218fe:	9102      	str	r1, [sp, #8]
   21900:	68e9      	ldr	r1, [r5, #12]
   21902:	9101      	str	r1, [sp, #4]
   21904:	68a9      	ldr	r1, [r5, #8]
   21906:	9100      	str	r1, [sp, #0]
   21908:	4651      	mov	r1, sl
   2190a:	4648      	mov	r0, r9
   2190c:	f7f0 fbe4 	bl	120d8 <print_formatted>
		break;
   21910:	e79b      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   21912:	686b      	ldr	r3, [r5, #4]
   21914:	682a      	ldr	r2, [r5, #0]
   21916:	6a29      	ldr	r1, [r5, #32]
   21918:	9106      	str	r1, [sp, #24]
   2191a:	69e9      	ldr	r1, [r5, #28]
   2191c:	9105      	str	r1, [sp, #20]
   2191e:	69a9      	ldr	r1, [r5, #24]
   21920:	9104      	str	r1, [sp, #16]
   21922:	6969      	ldr	r1, [r5, #20]
   21924:	9103      	str	r1, [sp, #12]
   21926:	6929      	ldr	r1, [r5, #16]
   21928:	9102      	str	r1, [sp, #8]
   2192a:	68e9      	ldr	r1, [r5, #12]
   2192c:	9101      	str	r1, [sp, #4]
   2192e:	68a9      	ldr	r1, [r5, #8]
   21930:	9100      	str	r1, [sp, #0]
   21932:	4651      	mov	r1, sl
   21934:	4648      	mov	r0, r9
   21936:	f7f0 fbcf 	bl	120d8 <print_formatted>
		break;
   2193a:	e786      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2193c:	686b      	ldr	r3, [r5, #4]
   2193e:	682a      	ldr	r2, [r5, #0]
   21940:	6a69      	ldr	r1, [r5, #36]	; 0x24
   21942:	9107      	str	r1, [sp, #28]
   21944:	6a29      	ldr	r1, [r5, #32]
   21946:	9106      	str	r1, [sp, #24]
   21948:	69e9      	ldr	r1, [r5, #28]
   2194a:	9105      	str	r1, [sp, #20]
   2194c:	69a9      	ldr	r1, [r5, #24]
   2194e:	9104      	str	r1, [sp, #16]
   21950:	6969      	ldr	r1, [r5, #20]
   21952:	9103      	str	r1, [sp, #12]
   21954:	6929      	ldr	r1, [r5, #16]
   21956:	9102      	str	r1, [sp, #8]
   21958:	68e9      	ldr	r1, [r5, #12]
   2195a:	9101      	str	r1, [sp, #4]
   2195c:	68a9      	ldr	r1, [r5, #8]
   2195e:	9100      	str	r1, [sp, #0]
   21960:	4651      	mov	r1, sl
   21962:	4648      	mov	r0, r9
   21964:	f7f0 fbb8 	bl	120d8 <print_formatted>
		break;
   21968:	e76f      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2196a:	686b      	ldr	r3, [r5, #4]
   2196c:	682a      	ldr	r2, [r5, #0]
   2196e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   21970:	9108      	str	r1, [sp, #32]
   21972:	6a69      	ldr	r1, [r5, #36]	; 0x24
   21974:	9107      	str	r1, [sp, #28]
   21976:	6a29      	ldr	r1, [r5, #32]
   21978:	9106      	str	r1, [sp, #24]
   2197a:	69e9      	ldr	r1, [r5, #28]
   2197c:	9105      	str	r1, [sp, #20]
   2197e:	69a9      	ldr	r1, [r5, #24]
   21980:	9104      	str	r1, [sp, #16]
   21982:	6969      	ldr	r1, [r5, #20]
   21984:	9103      	str	r1, [sp, #12]
   21986:	6929      	ldr	r1, [r5, #16]
   21988:	9102      	str	r1, [sp, #8]
   2198a:	68e9      	ldr	r1, [r5, #12]
   2198c:	9101      	str	r1, [sp, #4]
   2198e:	68a9      	ldr	r1, [r5, #8]
   21990:	9100      	str	r1, [sp, #0]
   21992:	4651      	mov	r1, sl
   21994:	4648      	mov	r0, r9
   21996:	f7f0 fb9f 	bl	120d8 <print_formatted>
		break;
   2199a:	e756      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   2199c:	686b      	ldr	r3, [r5, #4]
   2199e:	682a      	ldr	r2, [r5, #0]
   219a0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   219a2:	9109      	str	r1, [sp, #36]	; 0x24
   219a4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   219a6:	9108      	str	r1, [sp, #32]
   219a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   219aa:	9107      	str	r1, [sp, #28]
   219ac:	6a29      	ldr	r1, [r5, #32]
   219ae:	9106      	str	r1, [sp, #24]
   219b0:	69e9      	ldr	r1, [r5, #28]
   219b2:	9105      	str	r1, [sp, #20]
   219b4:	69a9      	ldr	r1, [r5, #24]
   219b6:	9104      	str	r1, [sp, #16]
   219b8:	6969      	ldr	r1, [r5, #20]
   219ba:	9103      	str	r1, [sp, #12]
   219bc:	6929      	ldr	r1, [r5, #16]
   219be:	9102      	str	r1, [sp, #8]
   219c0:	68e9      	ldr	r1, [r5, #12]
   219c2:	9101      	str	r1, [sp, #4]
   219c4:	68a9      	ldr	r1, [r5, #8]
   219c6:	9100      	str	r1, [sp, #0]
   219c8:	4651      	mov	r1, sl
   219ca:	4648      	mov	r0, r9
   219cc:	f7f0 fb84 	bl	120d8 <print_formatted>
		break;
   219d0:	e73b      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   219d2:	686b      	ldr	r3, [r5, #4]
   219d4:	682a      	ldr	r2, [r5, #0]
   219d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   219d8:	910a      	str	r1, [sp, #40]	; 0x28
   219da:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   219dc:	9109      	str	r1, [sp, #36]	; 0x24
   219de:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   219e0:	9108      	str	r1, [sp, #32]
   219e2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   219e4:	9107      	str	r1, [sp, #28]
   219e6:	6a29      	ldr	r1, [r5, #32]
   219e8:	9106      	str	r1, [sp, #24]
   219ea:	69e9      	ldr	r1, [r5, #28]
   219ec:	9105      	str	r1, [sp, #20]
   219ee:	69a9      	ldr	r1, [r5, #24]
   219f0:	9104      	str	r1, [sp, #16]
   219f2:	6969      	ldr	r1, [r5, #20]
   219f4:	9103      	str	r1, [sp, #12]
   219f6:	6929      	ldr	r1, [r5, #16]
   219f8:	9102      	str	r1, [sp, #8]
   219fa:	68e9      	ldr	r1, [r5, #12]
   219fc:	9101      	str	r1, [sp, #4]
   219fe:	68a9      	ldr	r1, [r5, #8]
   21a00:	9100      	str	r1, [sp, #0]
   21a02:	4651      	mov	r1, sl
   21a04:	4648      	mov	r0, r9
   21a06:	f7f0 fb67 	bl	120d8 <print_formatted>
		break;
   21a0a:	e71e      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   21a0c:	686b      	ldr	r3, [r5, #4]
   21a0e:	682a      	ldr	r2, [r5, #0]
   21a10:	6b69      	ldr	r1, [r5, #52]	; 0x34
   21a12:	910b      	str	r1, [sp, #44]	; 0x2c
   21a14:	6b29      	ldr	r1, [r5, #48]	; 0x30
   21a16:	910a      	str	r1, [sp, #40]	; 0x28
   21a18:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   21a1a:	9109      	str	r1, [sp, #36]	; 0x24
   21a1c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   21a1e:	9108      	str	r1, [sp, #32]
   21a20:	6a69      	ldr	r1, [r5, #36]	; 0x24
   21a22:	9107      	str	r1, [sp, #28]
   21a24:	6a29      	ldr	r1, [r5, #32]
   21a26:	9106      	str	r1, [sp, #24]
   21a28:	69e9      	ldr	r1, [r5, #28]
   21a2a:	9105      	str	r1, [sp, #20]
   21a2c:	69a9      	ldr	r1, [r5, #24]
   21a2e:	9104      	str	r1, [sp, #16]
   21a30:	6969      	ldr	r1, [r5, #20]
   21a32:	9103      	str	r1, [sp, #12]
   21a34:	6929      	ldr	r1, [r5, #16]
   21a36:	9102      	str	r1, [sp, #8]
   21a38:	68e9      	ldr	r1, [r5, #12]
   21a3a:	9101      	str	r1, [sp, #4]
   21a3c:	68a9      	ldr	r1, [r5, #8]
   21a3e:	9100      	str	r1, [sp, #0]
   21a40:	4651      	mov	r1, sl
   21a42:	4648      	mov	r0, r9
   21a44:	f7f0 fb48 	bl	120d8 <print_formatted>
		break;
   21a48:	e6ff      	b.n	2184a <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   21a4a:	686b      	ldr	r3, [r5, #4]
   21a4c:	682a      	ldr	r2, [r5, #0]
   21a4e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   21a50:	910c      	str	r1, [sp, #48]	; 0x30
   21a52:	6b69      	ldr	r1, [r5, #52]	; 0x34
   21a54:	910b      	str	r1, [sp, #44]	; 0x2c
   21a56:	6b29      	ldr	r1, [r5, #48]	; 0x30
   21a58:	910a      	str	r1, [sp, #40]	; 0x28
   21a5a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   21a5c:	9109      	str	r1, [sp, #36]	; 0x24
   21a5e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   21a60:	9108      	str	r1, [sp, #32]
   21a62:	6a69      	ldr	r1, [r5, #36]	; 0x24
   21a64:	9107      	str	r1, [sp, #28]
   21a66:	6a29      	ldr	r1, [r5, #32]
   21a68:	9106      	str	r1, [sp, #24]
   21a6a:	69e9      	ldr	r1, [r5, #28]
   21a6c:	9105      	str	r1, [sp, #20]
   21a6e:	69a9      	ldr	r1, [r5, #24]
   21a70:	9104      	str	r1, [sp, #16]
   21a72:	6969      	ldr	r1, [r5, #20]
   21a74:	9103      	str	r1, [sp, #12]
   21a76:	6929      	ldr	r1, [r5, #16]
   21a78:	9102      	str	r1, [sp, #8]
   21a7a:	68e9      	ldr	r1, [r5, #12]
   21a7c:	9101      	str	r1, [sp, #4]
   21a7e:	68a9      	ldr	r1, [r5, #8]
   21a80:	9100      	str	r1, [sp, #0]
   21a82:	4651      	mov	r1, sl
   21a84:	4648      	mov	r0, r9
   21a86:	f7f0 fb27 	bl	120d8 <print_formatted>
}
   21a8a:	e6de      	b.n	2184a <std_print+0x74>

00021a8c <log_output_flush>:
{
   21a8c:	b510      	push	{r4, lr}
   21a8e:	4604      	mov	r4, r0
		     output->control_block->offset,
   21a90:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   21a92:	6853      	ldr	r3, [r2, #4]
   21a94:	6812      	ldr	r2, [r2, #0]
   21a96:	6881      	ldr	r1, [r0, #8]
   21a98:	6800      	ldr	r0, [r0, #0]
   21a9a:	f7ff fe77 	bl	2178c <buffer_write>
	output->control_block->offset = 0;
   21a9e:	6863      	ldr	r3, [r4, #4]
   21aa0:	2200      	movs	r2, #0
   21aa2:	601a      	str	r2, [r3, #0]
}
   21aa4:	bd10      	pop	{r4, pc}

00021aa6 <out_func>:
{
   21aa6:	b538      	push	{r3, r4, r5, lr}
   21aa8:	4605      	mov	r5, r0
   21aaa:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   21aac:	684b      	ldr	r3, [r1, #4]
   21aae:	681a      	ldr	r2, [r3, #0]
   21ab0:	68cb      	ldr	r3, [r1, #12]
   21ab2:	429a      	cmp	r2, r3
   21ab4:	d00f      	beq.n	21ad6 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   21ab6:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21ab8:	f3bf 8f5b 	dmb	ish
   21abc:	e853 2f00 	ldrex	r2, [r3]
   21ac0:	1c51      	adds	r1, r2, #1
   21ac2:	e843 1000 	strex	r0, r1, [r3]
   21ac6:	2800      	cmp	r0, #0
   21ac8:	d1f8      	bne.n	21abc <out_func+0x16>
   21aca:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   21ace:	68a3      	ldr	r3, [r4, #8]
   21ad0:	549d      	strb	r5, [r3, r2]
}
   21ad2:	2000      	movs	r0, #0
   21ad4:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   21ad6:	4608      	mov	r0, r1
   21ad8:	f7ff ffd8 	bl	21a8c <log_output_flush>
   21adc:	e7eb      	b.n	21ab6 <out_func+0x10>

00021ade <log_output_msg_process>:
{
   21ade:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ae0:	b085      	sub	sp, #20
   21ae2:	4606      	mov	r6, r0
   21ae4:	460c      	mov	r4, r1
   21ae6:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   21ae8:	7a0b      	ldrb	r3, [r1, #8]
   21aea:	f083 0301 	eor.w	r3, r3, #1
   21aee:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   21af2:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   21af4:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   21af6:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   21afa:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   21afc:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   21b00:	f011 0507 	ands.w	r5, r1, #7
   21b04:	d10f      	bne.n	21b26 <log_output_msg_process+0x48>
   21b06:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   21b08:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   21b0a:	f013 0f01 	tst.w	r3, #1
   21b0e:	d014      	beq.n	21b3a <log_output_msg_process+0x5c>
	} else if (raw_string) {
   21b10:	b9c5      	cbnz	r5, 21b44 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   21b12:	4631      	mov	r1, r6
   21b14:	4620      	mov	r0, r4
   21b16:	f7f0 fc5f 	bl	123d8 <raw_string_print>
	if (!raw_string) {
   21b1a:	b9cd      	cbnz	r5, 21b50 <log_output_msg_process+0x72>
	log_output_flush(output);
   21b1c:	4630      	mov	r0, r6
   21b1e:	f7ff ffb5 	bl	21a8c <log_output_flush>
}
   21b22:	b005      	add	sp, #20
   21b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   21b26:	9002      	str	r0, [sp, #8]
   21b28:	f8cd c004 	str.w	ip, [sp, #4]
   21b2c:	9500      	str	r5, [sp, #0]
   21b2e:	4639      	mov	r1, r7
   21b30:	4630      	mov	r0, r6
   21b32:	f7f0 fbeb 	bl	1230c <prefix_print>
   21b36:	4602      	mov	r2, r0
   21b38:	e7e6      	b.n	21b08 <log_output_msg_process+0x2a>
		std_print(msg, output);
   21b3a:	4631      	mov	r1, r6
   21b3c:	4620      	mov	r0, r4
   21b3e:	f7ff fe4a 	bl	217d6 <std_print>
   21b42:	e7ea      	b.n	21b1a <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   21b44:	463b      	mov	r3, r7
   21b46:	4631      	mov	r1, r6
   21b48:	4620      	mov	r0, r4
   21b4a:	f7f0 fc1b 	bl	12384 <hexdump_print>
   21b4e:	e7e4      	b.n	21b1a <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   21b50:	462a      	mov	r2, r5
   21b52:	4639      	mov	r1, r7
   21b54:	4630      	mov	r0, r6
   21b56:	f7ff fe32 	bl	217be <postfix_print>
   21b5a:	e7df      	b.n	21b1c <log_output_msg_process+0x3e>

00021b5c <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   21b5c:	2200      	movs	r2, #0
   21b5e:	6002      	str	r2, [r0, #0]
   21b60:	6042      	str	r2, [r0, #4]
   21b62:	6082      	str	r2, [r0, #8]
}
   21b64:	4770      	bx	lr

00021b66 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   21b66:	428b      	cmp	r3, r1
   21b68:	d808      	bhi.n	21b7c <_copy+0x16>
{
   21b6a:	b538      	push	{r3, r4, r5, lr}
   21b6c:	4615      	mov	r5, r2
   21b6e:	461c      	mov	r4, r3
   21b70:	461a      	mov	r2, r3
   21b72:	4629      	mov	r1, r5
   21b74:	f003 ff2f 	bl	259d6 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
   21b78:	4620      	mov	r0, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   21b7a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   21b7c:	2000      	movs	r0, #0
}
   21b7e:	4770      	bx	lr

00021b80 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   21b80:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   21b82:	f003 ff50 	bl	25a26 <memset>
	(void)memset(to, val, len);
}
   21b86:	bd08      	pop	{r3, pc}

00021b88 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   21b88:	09c3      	lsrs	r3, r0, #7
   21b8a:	005a      	lsls	r2, r3, #1
   21b8c:	4413      	add	r3, r2
   21b8e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   21b92:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   21b96:	b2c0      	uxtb	r0, r0
   21b98:	4770      	bx	lr

00021b9a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   21b9a:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   21b9c:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   21b9e:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   21ba2:	2a00      	cmp	r2, #0
   21ba4:	db03      	blt.n	21bae <gf_double+0x14>
   21ba6:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   21ba8:	f100 020f 	add.w	r2, r0, #15
   21bac:	e004      	b.n	21bb8 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   21bae:	2487      	movs	r4, #135	; 0x87
   21bb0:	e7fa      	b.n	21ba8 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   21bb2:	f813 0901 	ldrb.w	r0, [r3], #-1
   21bb6:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   21bb8:	7818      	ldrb	r0, [r3, #0]
   21bba:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   21bbe:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   21bc2:	428b      	cmp	r3, r1
   21bc4:	d1f5      	bne.n	21bb2 <gf_double+0x18>
	}
}
   21bc6:	bc10      	pop	{r4}
   21bc8:	4770      	bx	lr

00021bca <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   21bca:	b130      	cbz	r0, 21bda <tc_cmac_erase+0x10>
{
   21bcc:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   21bce:	2258      	movs	r2, #88	; 0x58
   21bd0:	2100      	movs	r1, #0
   21bd2:	f7ff ffd5 	bl	21b80 <_set>

	return TC_CRYPTO_SUCCESS;
   21bd6:	2001      	movs	r0, #1
}
   21bd8:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   21bda:	2000      	movs	r0, #0
}
   21bdc:	4770      	bx	lr

00021bde <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   21bde:	b1a0      	cbz	r0, 21c0a <tc_cmac_init+0x2c>
{
   21be0:	b510      	push	{r4, lr}
   21be2:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   21be4:	2210      	movs	r2, #16
   21be6:	2100      	movs	r1, #0
   21be8:	f7ff ffca 	bl	21b80 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   21bec:	2210      	movs	r2, #16
   21bee:	2100      	movs	r1, #0
   21bf0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21bf4:	f7ff ffc4 	bl	21b80 <_set>
	s->leftover_offset = 0;
   21bf8:	2300      	movs	r3, #0
   21bfa:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   21bfc:	2200      	movs	r2, #0
   21bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21c02:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   21c06:	2001      	movs	r0, #1
}
   21c08:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   21c0a:	2000      	movs	r0, #0
}
   21c0c:	4770      	bx	lr

00021c0e <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   21c0e:	b338      	cbz	r0, 21c60 <tc_cmac_setup+0x52>
{
   21c10:	b570      	push	{r4, r5, r6, lr}
   21c12:	460d      	mov	r5, r1
   21c14:	4616      	mov	r6, r2
   21c16:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   21c18:	b321      	cbz	r1, 21c64 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   21c1a:	2258      	movs	r2, #88	; 0x58
   21c1c:	2100      	movs	r1, #0
   21c1e:	f7ff ffaf 	bl	21b80 <_set>
	s->sched = sched;
   21c22:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   21c24:	4629      	mov	r1, r5
   21c26:	4630      	mov	r0, r6
   21c28:	f7f0 fda8 	bl	1277c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   21c2c:	2210      	movs	r2, #16
   21c2e:	2100      	movs	r1, #0
   21c30:	4620      	mov	r0, r4
   21c32:	f7ff ffa5 	bl	21b80 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   21c36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21c38:	4621      	mov	r1, r4
   21c3a:	4620      	mov	r0, r4
   21c3c:	f7f0 fdfc 	bl	12838 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   21c40:	f104 0510 	add.w	r5, r4, #16
   21c44:	4621      	mov	r1, r4
   21c46:	4628      	mov	r0, r5
   21c48:	f7ff ffa7 	bl	21b9a <gf_double>
	gf_double (s->K2, s->K1);
   21c4c:	4629      	mov	r1, r5
   21c4e:	f104 0020 	add.w	r0, r4, #32
   21c52:	f7ff ffa2 	bl	21b9a <gf_double>
	tc_cmac_init(s);
   21c56:	4620      	mov	r0, r4
   21c58:	f7ff ffc1 	bl	21bde <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   21c5c:	2001      	movs	r0, #1
}
   21c5e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   21c60:	2000      	movs	r0, #0
}
   21c62:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   21c64:	2000      	movs	r0, #0
   21c66:	e7fa      	b.n	21c5e <tc_cmac_setup+0x50>

00021c68 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   21c68:	2800      	cmp	r0, #0
   21c6a:	d062      	beq.n	21d32 <tc_cmac_update+0xca>
{
   21c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c70:	460e      	mov	r6, r1
   21c72:	4617      	mov	r7, r2
   21c74:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   21c76:	2a00      	cmp	r2, #0
   21c78:	d05d      	beq.n	21d36 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   21c7a:	2900      	cmp	r1, #0
   21c7c:	d05e      	beq.n	21d3c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   21c7e:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   21c82:	ea50 0301 	orrs.w	r3, r0, r1
   21c86:	d05b      	beq.n	21d40 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   21c88:	f110 32ff 	adds.w	r2, r0, #4294967295
   21c8c:	f141 33ff 	adc.w	r3, r1, #4294967295
   21c90:	6522      	str	r2, [r4, #80]	; 0x50
   21c92:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   21c94:	6c65      	ldr	r5, [r4, #68]	; 0x44
   21c96:	b3a5      	cbz	r5, 21d02 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   21c98:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   21c9c:	4547      	cmp	r7, r8
   21c9e:	d30d      	bcc.n	21cbc <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   21ca0:	f105 0030 	add.w	r0, r5, #48	; 0x30
   21ca4:	4643      	mov	r3, r8
   21ca6:	4632      	mov	r2, r6
   21ca8:	4641      	mov	r1, r8
   21caa:	4420      	add	r0, r4
   21cac:	f7ff ff5b 	bl	21b66 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   21cb0:	3d10      	subs	r5, #16
   21cb2:	442f      	add	r7, r5
		data += remaining_space;
   21cb4:	4446      	add	r6, r8
		s->leftover_offset = 0;
   21cb6:	2300      	movs	r3, #0
   21cb8:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21cba:	e013      	b.n	21ce4 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   21cbc:	f105 0030 	add.w	r0, r5, #48	; 0x30
   21cc0:	463b      	mov	r3, r7
   21cc2:	4632      	mov	r2, r6
   21cc4:	4639      	mov	r1, r7
   21cc6:	4420      	add	r0, r4
   21cc8:	f7ff ff4d 	bl	21b66 <_copy>
			s->leftover_offset += data_length;
   21ccc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   21cce:	443b      	add	r3, r7
   21cd0:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   21cd2:	2001      	movs	r0, #1
   21cd4:	e030      	b.n	21d38 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   21cd6:	18e2      	adds	r2, r4, r3
   21cd8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   21cdc:	5ce1      	ldrb	r1, [r4, r3]
   21cde:	404a      	eors	r2, r1
   21ce0:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21ce2:	3301      	adds	r3, #1
   21ce4:	2b0f      	cmp	r3, #15
   21ce6:	d9f6      	bls.n	21cd6 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   21ce8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21cea:	4621      	mov	r1, r4
   21cec:	4620      	mov	r0, r4
   21cee:	f7f0 fda3 	bl	12838 <tc_aes_encrypt>
   21cf2:	e006      	b.n	21d02 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   21cf4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21cf6:	4621      	mov	r1, r4
   21cf8:	4620      	mov	r0, r4
   21cfa:	f7f0 fd9d 	bl	12838 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   21cfe:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   21d00:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   21d02:	2f10      	cmp	r7, #16
   21d04:	d908      	bls.n	21d18 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21d06:	2300      	movs	r3, #0
   21d08:	2b0f      	cmp	r3, #15
   21d0a:	d8f3      	bhi.n	21cf4 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   21d0c:	5cf0      	ldrb	r0, [r6, r3]
   21d0e:	5ce5      	ldrb	r5, [r4, r3]
   21d10:	4068      	eors	r0, r5
   21d12:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21d14:	3301      	adds	r3, #1
   21d16:	e7f7      	b.n	21d08 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   21d18:	b90f      	cbnz	r7, 21d1e <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   21d1a:	2001      	movs	r0, #1
   21d1c:	e00c      	b.n	21d38 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   21d1e:	463b      	mov	r3, r7
   21d20:	4632      	mov	r2, r6
   21d22:	4639      	mov	r1, r7
   21d24:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21d28:	f7ff ff1d 	bl	21b66 <_copy>
		s->leftover_offset = data_length;
   21d2c:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   21d2e:	2001      	movs	r0, #1
   21d30:	e002      	b.n	21d38 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   21d32:	2000      	movs	r0, #0
}
   21d34:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   21d36:	2001      	movs	r0, #1
}
   21d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   21d3c:	2000      	movs	r0, #0
   21d3e:	e7fb      	b.n	21d38 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   21d40:	2000      	movs	r0, #0
   21d42:	e7f9      	b.n	21d38 <tc_cmac_update+0xd0>

00021d44 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   21d44:	b370      	cbz	r0, 21da4 <tc_cmac_final+0x60>
{
   21d46:	b538      	push	{r3, r4, r5, lr}
   21d48:	460c      	mov	r4, r1
   21d4a:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   21d4c:	b361      	cbz	r1, 21da8 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   21d4e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   21d50:	2a10      	cmp	r2, #16
   21d52:	d10d      	bne.n	21d70 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   21d54:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21d56:	2300      	movs	r3, #0
   21d58:	2b0f      	cmp	r3, #15
   21d5a:	d819      	bhi.n	21d90 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   21d5c:	18e2      	adds	r2, r4, r3
   21d5e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   21d62:	5cc8      	ldrb	r0, [r1, r3]
   21d64:	4050      	eors	r0, r2
   21d66:	5ce2      	ldrb	r2, [r4, r3]
   21d68:	4042      	eors	r2, r0
   21d6a:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21d6c:	3301      	adds	r3, #1
   21d6e:	e7f3      	b.n	21d58 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   21d70:	f102 0030 	add.w	r0, r2, #48	; 0x30
   21d74:	f1c2 0210 	rsb	r2, r2, #16
   21d78:	2100      	movs	r1, #0
   21d7a:	4420      	add	r0, r4
   21d7c:	f7ff ff00 	bl	21b80 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   21d80:	6c63      	ldr	r3, [r4, #68]	; 0x44
   21d82:	4423      	add	r3, r4
   21d84:	2280      	movs	r2, #128	; 0x80
   21d86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   21d8a:	f104 0120 	add.w	r1, r4, #32
   21d8e:	e7e2      	b.n	21d56 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   21d90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21d92:	4621      	mov	r1, r4
   21d94:	4628      	mov	r0, r5
   21d96:	f7f0 fd4f 	bl	12838 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   21d9a:	4620      	mov	r0, r4
   21d9c:	f7ff ff15 	bl	21bca <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   21da0:	2001      	movs	r0, #1
}
   21da2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   21da4:	2000      	movs	r0, #0
}
   21da6:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   21da8:	2000      	movs	r0, #0
   21daa:	e7fa      	b.n	21da2 <tc_cmac_final+0x5e>

00021dac <abort_function>:
{
   21dac:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   21dae:	2000      	movs	r0, #0
   21db0:	f7ef fc9e 	bl	116f0 <sys_reboot>

00021db4 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21db4:	b538      	push	{r3, r4, r5, lr}
   21db6:	4604      	mov	r4, r0

	if (esf != NULL) {
   21db8:	460d      	mov	r5, r1
   21dba:	b111      	cbz	r1, 21dc2 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   21dbc:	4608      	mov	r0, r1
   21dbe:	f7f1 f9d5 	bl	1316c <esf_dump>
	}
	z_fatal_error(reason, esf);
   21dc2:	4629      	mov	r1, r5
   21dc4:	4620      	mov	r0, r4
   21dc6:	f7fa fb99 	bl	1c4fc <z_fatal_error>
}
   21dca:	bd38      	pop	{r3, r4, r5, pc}

00021dcc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   21dcc:	b508      	push	{r3, lr}
   21dce:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   21dd0:	6800      	ldr	r0, [r0, #0]
   21dd2:	f7ff ffef 	bl	21db4 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   21dd6:	bd08      	pop	{r3, pc}

00021dd8 <z_irq_spurious>:
{
   21dd8:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   21dda:	2100      	movs	r1, #0
   21ddc:	2001      	movs	r0, #1
   21dde:	f7ff ffe9 	bl	21db4 <z_arm_fatal_error>
}
   21de2:	bd08      	pop	{r3, pc}

00021de4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   21de4:	b508      	push	{r3, lr}
	handler();
   21de6:	f7f1 fa6d 	bl	132c4 <z_SysNmiOnReset>
	z_arm_int_exit();
   21dea:	f7f1 fb69 	bl	134c0 <z_arm_exc_exit>
}
   21dee:	bd08      	pop	{r3, pc}

00021df0 <memory_fault_recoverable>:
}
   21df0:	2000      	movs	r0, #0
   21df2:	4770      	bx	lr

00021df4 <fault_handle>:
{
   21df4:	b508      	push	{r3, lr}
	*recoverable = false;
   21df6:	2300      	movs	r3, #0
   21df8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   21dfa:	1ecb      	subs	r3, r1, #3
   21dfc:	2b09      	cmp	r3, #9
   21dfe:	d81a      	bhi.n	21e36 <fault_handle+0x42>
   21e00:	e8df f003 	tbb	[pc, r3]
   21e04:	110d0905 	.word	0x110d0905
   21e08:	19191919 	.word	0x19191919
   21e0c:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   21e0e:	4611      	mov	r1, r2
   21e10:	f7f1 fdea 	bl	139e8 <hard_fault>
}
   21e14:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   21e16:	2100      	movs	r1, #0
   21e18:	f7f1 fd04 	bl	13824 <mem_manage_fault>
		break;
   21e1c:	e7fa      	b.n	21e14 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   21e1e:	2100      	movs	r1, #0
   21e20:	f7f1 fc28 	bl	13674 <bus_fault>
		break;
   21e24:	e7f6      	b.n	21e14 <fault_handle+0x20>
		reason = usage_fault(esf);
   21e26:	f7f1 fb59 	bl	134dc <usage_fault>
		break;
   21e2a:	e7f3      	b.n	21e14 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   21e2c:	4611      	mov	r1, r2
   21e2e:	f7f1 fc07 	bl	13640 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   21e32:	2000      	movs	r0, #0
		break;
   21e34:	e7ee      	b.n	21e14 <fault_handle+0x20>
		reserved_exception(esf, fault);
   21e36:	f7f1 fe7d 	bl	13b34 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   21e3a:	2000      	movs	r0, #0
	return reason;
   21e3c:	e7ea      	b.n	21e14 <fault_handle+0x20>

00021e3e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   21e3e:	6843      	ldr	r3, [r0, #4]
   21e40:	1e5a      	subs	r2, r3, #1
		&&
   21e42:	4213      	tst	r3, r2
   21e44:	d106      	bne.n	21e54 <mpu_partition_is_valid+0x16>
		&&
   21e46:	2b1f      	cmp	r3, #31
   21e48:	d906      	bls.n	21e58 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   21e4a:	6803      	ldr	r3, [r0, #0]
		&&
   21e4c:	421a      	tst	r2, r3
   21e4e:	d005      	beq.n	21e5c <mpu_partition_is_valid+0x1e>
   21e50:	2000      	movs	r0, #0
   21e52:	4770      	bx	lr
   21e54:	2000      	movs	r0, #0
   21e56:	4770      	bx	lr
   21e58:	2000      	movs	r0, #0
   21e5a:	4770      	bx	lr
   21e5c:	2001      	movs	r0, #1
}
   21e5e:	4770      	bx	lr

00021e60 <mpu_configure_region>:
{
   21e60:	b500      	push	{lr}
   21e62:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   21e64:	680b      	ldr	r3, [r1, #0]
   21e66:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   21e68:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   21e6a:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   21e6c:	2b20      	cmp	r3, #32
   21e6e:	d912      	bls.n	21e96 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   21e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21e74:	d811      	bhi.n	21e9a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   21e76:	3b01      	subs	r3, #1
   21e78:	fab3 f383 	clz	r3, r3
   21e7c:	f1c3 031f 	rsb	r3, r3, #31
   21e80:	005b      	lsls	r3, r3, #1
   21e82:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   21e86:	4313      	orrs	r3, r2
   21e88:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   21e8a:	a901      	add	r1, sp, #4
   21e8c:	f7f1 ffb4 	bl	13df8 <region_allocate_and_init>
}
   21e90:	b005      	add	sp, #20
   21e92:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   21e96:	2308      	movs	r3, #8
   21e98:	e7f5      	b.n	21e86 <mpu_configure_region+0x26>
		return REGION_4G;
   21e9a:	233e      	movs	r3, #62	; 0x3e
   21e9c:	e7f3      	b.n	21e86 <mpu_configure_region+0x26>

00021e9e <arm_core_mpu_configure_static_mpu_regions>:
{
   21e9e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   21ea0:	f7f2 f80c 	bl	13ebc <mpu_configure_static_mpu_regions>
}
   21ea4:	bd08      	pop	{r3, pc}

00021ea6 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   21ea6:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   21ea8:	f7f2 f812 	bl	13ed0 <mpu_configure_dynamic_mpu_regions>
}
   21eac:	bd08      	pop	{r3, pc}

00021eae <malloc_prepare>:
}
   21eae:	2000      	movs	r0, #0
   21eb0:	4770      	bx	lr

00021eb2 <_stdout_hook_default>:
}
   21eb2:	f04f 30ff 	mov.w	r0, #4294967295
   21eb6:	4770      	bx	lr

00021eb8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   21eb8:	b084      	sub	sp, #16
   21eba:	ab04      	add	r3, sp, #16
   21ebc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   21ec0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   21ec4:	2b06      	cmp	r3, #6
   21ec6:	d001      	beq.n	21ecc <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   21ec8:	b004      	add	sp, #16
   21eca:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   21ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21ed0:	2201      	movs	r2, #1
   21ed2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   21ed6:	f3bf 8f4f 	dsb	sy
        __WFE();
   21eda:	bf20      	wfe
    while (true)
   21edc:	e7fd      	b.n	21eda <pm_power_state_set+0x22>

00021ede <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   21ede:	b084      	sub	sp, #16
   21ee0:	ab04      	add	r3, sp, #16
   21ee2:	e903 0007 	stmdb	r3, {r0, r1, r2}
   21ee6:	2300      	movs	r3, #0
   21ee8:	f383 8811 	msr	BASEPRI, r3
   21eec:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   21ef0:	b004      	add	sp, #16
   21ef2:	4770      	bx	lr

00021ef4 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   21ef4:	b510      	push	{r4, lr}
   21ef6:	b08a      	sub	sp, #40	; 0x28
   21ef8:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   21efa:	a905      	add	r1, sp, #20
   21efc:	f7f2 f910 	bl	14120 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   21f00:	4669      	mov	r1, sp
   21f02:	4620      	mov	r0, r4
   21f04:	f7f2 f90c 	bl	14120 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   21f08:	2210      	movs	r2, #16
   21f0a:	f10d 0101 	add.w	r1, sp, #1
   21f0e:	f10d 0015 	add.w	r0, sp, #21
   21f12:	f003 fd52 	bl	259ba <memcmp>
}
   21f16:	b00a      	add	sp, #40	; 0x28
   21f18:	bd10      	pop	{r4, pc}

00021f1a <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   21f1a:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   21f1c:	7803      	ldrb	r3, [r0, #0]
   21f1e:	780a      	ldrb	r2, [r1, #0]
   21f20:	4293      	cmp	r3, r2
   21f22:	d107      	bne.n	21f34 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   21f24:	2b01      	cmp	r3, #1
   21f26:	d00c      	beq.n	21f42 <bt_uuid_cmp+0x28>
   21f28:	2b02      	cmp	r3, #2
   21f2a:	d00e      	beq.n	21f4a <bt_uuid_cmp+0x30>
   21f2c:	b12b      	cbz	r3, 21f3a <bt_uuid_cmp+0x20>
   21f2e:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   21f32:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   21f34:	f7ff ffde 	bl	21ef4 <uuid128_cmp>
   21f38:	e7fb      	b.n	21f32 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   21f3a:	8840      	ldrh	r0, [r0, #2]
   21f3c:	884b      	ldrh	r3, [r1, #2]
   21f3e:	1ac0      	subs	r0, r0, r3
   21f40:	e7f7      	b.n	21f32 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   21f42:	6840      	ldr	r0, [r0, #4]
   21f44:	684b      	ldr	r3, [r1, #4]
   21f46:	1ac0      	subs	r0, r0, r3
   21f48:	e7f3      	b.n	21f32 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   21f4a:	2210      	movs	r2, #16
   21f4c:	3101      	adds	r1, #1
   21f4e:	3001      	adds	r0, #1
   21f50:	f003 fd33 	bl	259ba <memcmp>
   21f54:	e7ed      	b.n	21f32 <bt_uuid_cmp+0x18>

00021f56 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   21f56:	b470      	push	{r4, r5, r6}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   21f58:	2a04      	cmp	r2, #4
   21f5a:	d00f      	beq.n	21f7c <bt_uuid_create+0x26>
   21f5c:	2a10      	cmp	r2, #16
   21f5e:	d01c      	beq.n	21f9a <bt_uuid_create+0x44>
   21f60:	2a02      	cmp	r2, #2
   21f62:	d002      	beq.n	21f6a <bt_uuid_create+0x14>
   21f64:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   21f66:	bc70      	pop	{r4, r5, r6}
   21f68:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_16;
   21f6a:	2300      	movs	r3, #0
   21f6c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   21f6e:	784a      	ldrb	r2, [r1, #1]
   21f70:	780b      	ldrb	r3, [r1, #0]
   21f72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   21f76:	8043      	strh	r3, [r0, #2]
	return true;
   21f78:	2001      	movs	r0, #1
		break;
   21f7a:	e7f4      	b.n	21f66 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   21f7c:	2301      	movs	r3, #1
   21f7e:	7003      	strb	r3, [r0, #0]
   21f80:	78cc      	ldrb	r4, [r1, #3]
   21f82:	788a      	ldrb	r2, [r1, #2]
   21f84:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   21f88:	784d      	ldrb	r5, [r1, #1]
   21f8a:	780a      	ldrb	r2, [r1, #0]
   21f8c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   21f90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   21f94:	6042      	str	r2, [r0, #4]
	return true;
   21f96:	4618      	mov	r0, r3
		break;
   21f98:	e7e5      	b.n	21f66 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   21f9a:	4603      	mov	r3, r0
   21f9c:	2202      	movs	r2, #2
   21f9e:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21fa2:	680e      	ldr	r6, [r1, #0]
   21fa4:	684d      	ldr	r5, [r1, #4]
   21fa6:	688c      	ldr	r4, [r1, #8]
   21fa8:	68ca      	ldr	r2, [r1, #12]
   21faa:	f8c0 6001 	str.w	r6, [r0, #1]
   21fae:	605d      	str	r5, [r3, #4]
   21fb0:	609c      	str	r4, [r3, #8]
   21fb2:	60da      	str	r2, [r3, #12]
	return true;
   21fb4:	2001      	movs	r0, #1
   21fb6:	e7d6      	b.n	21f66 <bt_uuid_create+0x10>

00021fb8 <bt_addr_le_create_static>:
{
   21fb8:	b510      	push	{r4, lr}
   21fba:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   21fbc:	2301      	movs	r3, #1
   21fbe:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   21fc2:	2106      	movs	r1, #6
   21fc4:	f7f9 faac 	bl	1b520 <bt_rand>
	if (err) {
   21fc8:	b918      	cbnz	r0, 21fd2 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   21fca:	79a3      	ldrb	r3, [r4, #6]
   21fcc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   21fd0:	71a3      	strb	r3, [r4, #6]
}
   21fd2:	bd10      	pop	{r4, pc}

00021fd4 <hci_disconn_complete_prio>:
{
   21fd4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   21fd6:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   21fd8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   21fdc:	781b      	ldrb	r3, [r3, #0]
   21fde:	b103      	cbz	r3, 21fe2 <hci_disconn_complete_prio+0xe>
}
   21fe0:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   21fe2:	4620      	mov	r0, r4
   21fe4:	f7f4 ffb8 	bl	16f58 <bt_conn_lookup_handle>
	if (!conn) {
   21fe8:	4605      	mov	r5, r0
   21fea:	b130      	cbz	r0, 21ffa <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   21fec:	2101      	movs	r1, #1
   21fee:	f7f4 ffbd 	bl	16f6c <bt_conn_set_state>
	bt_conn_unref(conn);
   21ff2:	4628      	mov	r0, r5
   21ff4:	f000 fab0 	bl	22558 <bt_conn_unref>
   21ff8:	e7f2      	b.n	21fe0 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   21ffa:	4620      	mov	r0, r4
   21ffc:	f7f2 f9b6 	bl	1436c <conn_handle_disconnected>
		return;
   22000:	e7ee      	b.n	21fe0 <hci_disconn_complete_prio+0xc>

00022002 <set_event_mask>:
{
   22002:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   22004:	2108      	movs	r1, #8
   22006:	f640 4001 	movw	r0, #3073	; 0xc01
   2200a:	f7f2 fec5 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   2200e:	b1b8      	cbz	r0, 22040 <set_event_mask+0x3e>
   22010:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   22012:	2108      	movs	r1, #8
   22014:	4408      	add	r0, r1
   22016:	f001 fe94 	bl	23d42 <net_buf_simple_add>
	dst[0] = val;
   2201a:	2310      	movs	r3, #16
   2201c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   2201e:	2388      	movs	r3, #136	; 0x88
   22020:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   22022:	2200      	movs	r2, #0
   22024:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   22026:	2302      	movs	r3, #2
   22028:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   2202a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   2202c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   2202e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   22030:	2320      	movs	r3, #32
   22032:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   22034:	4621      	mov	r1, r4
   22036:	f640 4001 	movw	r0, #3073	; 0xc01
   2203a:	f7f2 fee9 	bl	14e10 <bt_hci_cmd_send_sync>
}
   2203e:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   22040:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22044:	e7fb      	b.n	2203e <set_event_mask+0x3c>

00022046 <bt_le_create_conn>:
{
   22046:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   22048:	f7f3 f99a 	bl	15380 <bt_le_create_conn_legacy>
}
   2204c:	bd08      	pop	{r3, pc}

0002204e <bt_hci_disconnect>:
{
   2204e:	b570      	push	{r4, r5, r6, lr}
   22050:	4605      	mov	r5, r0
   22052:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   22054:	2103      	movs	r1, #3
   22056:	f240 4006 	movw	r0, #1030	; 0x406
   2205a:	f7f2 fe9d 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   2205e:	b168      	cbz	r0, 2207c <bt_hci_disconnect+0x2e>
   22060:	4606      	mov	r6, r0
   22062:	2103      	movs	r1, #3
   22064:	3008      	adds	r0, #8
   22066:	f001 fe6c 	bl	23d42 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2206a:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   2206c:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2206e:	2200      	movs	r2, #0
   22070:	4631      	mov	r1, r6
   22072:	f240 4006 	movw	r0, #1030	; 0x406
   22076:	f7f2 fecb 	bl	14e10 <bt_hci_cmd_send_sync>
}
   2207a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2207c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22080:	e7fb      	b.n	2207a <bt_hci_disconnect+0x2c>

00022082 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   22082:	8802      	ldrh	r2, [r0, #0]
   22084:	8843      	ldrh	r3, [r0, #2]
   22086:	429a      	cmp	r2, r3
   22088:	d819      	bhi.n	220be <bt_le_conn_params_valid+0x3c>
   2208a:	2a05      	cmp	r2, #5
   2208c:	d919      	bls.n	220c2 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2208e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   22092:	d818      	bhi.n	220c6 <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   22094:	8881      	ldrh	r1, [r0, #4]
   22096:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2209a:	d216      	bcs.n	220ca <bt_le_conn_params_valid+0x48>
{
   2209c:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   2209e:	88c0      	ldrh	r0, [r0, #6]
   220a0:	f1a0 020a 	sub.w	r2, r0, #10
   220a4:	b292      	uxth	r2, r2
   220a6:	f640 4476 	movw	r4, #3190	; 0xc76
   220aa:	42a2      	cmp	r2, r4
   220ac:	d80f      	bhi.n	220ce <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   220ae:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   220b2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   220b6:	d20c      	bcs.n	220d2 <bt_le_conn_params_valid+0x50>
	return true;
   220b8:	2001      	movs	r0, #1
}
   220ba:	bc10      	pop	{r4}
   220bc:	4770      	bx	lr
		return false;
   220be:	2000      	movs	r0, #0
   220c0:	4770      	bx	lr
   220c2:	2000      	movs	r0, #0
   220c4:	4770      	bx	lr
   220c6:	2000      	movs	r0, #0
   220c8:	4770      	bx	lr
		return false;
   220ca:	2000      	movs	r0, #0
}
   220cc:	4770      	bx	lr
		return false;
   220ce:	2000      	movs	r0, #0
   220d0:	e7f3      	b.n	220ba <bt_le_conn_params_valid+0x38>
   220d2:	2000      	movs	r0, #0
   220d4:	e7f1      	b.n	220ba <bt_le_conn_params_valid+0x38>

000220d6 <bt_le_set_data_len>:
{
   220d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220d8:	4606      	mov	r6, r0
   220da:	460f      	mov	r7, r1
   220dc:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   220de:	2106      	movs	r1, #6
   220e0:	f242 0022 	movw	r0, #8226	; 0x2022
   220e4:	f7f2 fe58 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   220e8:	b170      	cbz	r0, 22108 <bt_le_set_data_len+0x32>
   220ea:	4605      	mov	r5, r0
   220ec:	2106      	movs	r1, #6
   220ee:	3008      	adds	r0, #8
   220f0:	f001 fe27 	bl	23d42 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   220f4:	8833      	ldrh	r3, [r6, #0]
   220f6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   220f8:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   220fa:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   220fc:	4629      	mov	r1, r5
   220fe:	f242 0022 	movw	r0, #8226	; 0x2022
   22102:	f7f3 f9e3 	bl	154cc <bt_hci_cmd_send>
}
   22106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   22108:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2210c:	e7fb      	b.n	22106 <bt_le_set_data_len+0x30>

0002210e <bt_le_set_phy>:
{
   2210e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22112:	4607      	mov	r7, r0
   22114:	460e      	mov	r6, r1
   22116:	4615      	mov	r5, r2
   22118:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2211a:	2107      	movs	r1, #7
   2211c:	f242 0032 	movw	r0, #8242	; 0x2032
   22120:	f7f2 fe3a 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   22124:	b1a0      	cbz	r0, 22150 <bt_le_set_phy+0x42>
   22126:	4680      	mov	r8, r0
   22128:	2107      	movs	r1, #7
   2212a:	3008      	adds	r0, #8
   2212c:	f001 fe09 	bl	23d42 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22130:	883b      	ldrh	r3, [r7, #0]
   22132:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   22134:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   22136:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   22138:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   2213a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2213e:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   22142:	4641      	mov	r1, r8
   22144:	f242 0032 	movw	r0, #8242	; 0x2032
   22148:	f7f3 f9c0 	bl	154cc <bt_hci_cmd_send>
}
   2214c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   22150:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22154:	e7fa      	b.n	2214c <bt_le_set_phy+0x3e>

00022156 <hci_le_read_remote_features>:
{
   22156:	b538      	push	{r3, r4, r5, lr}
   22158:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2215a:	2102      	movs	r1, #2
   2215c:	f242 0016 	movw	r0, #8214	; 0x2016
   22160:	f7f2 fe1a 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   22164:	b168      	cbz	r0, 22182 <hci_le_read_remote_features+0x2c>
   22166:	4605      	mov	r5, r0
   22168:	2102      	movs	r1, #2
   2216a:	3008      	adds	r0, #8
   2216c:	f001 fde9 	bl	23d42 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22170:	8823      	ldrh	r3, [r4, #0]
   22172:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   22174:	4629      	mov	r1, r5
   22176:	f242 0016 	movw	r0, #8214	; 0x2016
   2217a:	f7f3 f9a7 	bl	154cc <bt_hci_cmd_send>
	return 0;
   2217e:	2000      	movs	r0, #0
}
   22180:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   22182:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22186:	e7fb      	b.n	22180 <hci_le_read_remote_features+0x2a>

00022188 <enh_conn_complete>:
{
   22188:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   2218a:	f7f3 fa65 	bl	15658 <bt_hci_le_enh_conn_complete>
}
   2218e:	bd08      	pop	{r3, pc}

00022190 <le_enh_conn_complete>:
{
   22190:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   22192:	6880      	ldr	r0, [r0, #8]
   22194:	f7ff fff8 	bl	22188 <enh_conn_complete>
}
   22198:	bd08      	pop	{r3, pc}

0002219a <le_legacy_conn_complete>:
{
   2219a:	b500      	push	{lr}
   2219c:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2219e:	6883      	ldr	r3, [r0, #8]
	enh.status         = evt->status;
   221a0:	781a      	ldrb	r2, [r3, #0]
   221a2:	f88d 2000 	strb.w	r2, [sp]
	enh.handle         = evt->handle;
   221a6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   221aa:	f8ad 2001 	strh.w	r2, [sp, #1]
	enh.role           = evt->role;
   221ae:	78da      	ldrb	r2, [r3, #3]
   221b0:	f88d 2003 	strb.w	r2, [sp, #3]
	enh.interval       = evt->interval;
   221b4:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   221b8:	f8ad 2017 	strh.w	r2, [sp, #23]
	enh.latency        = evt->latency;
   221bc:	f8b3 200d 	ldrh.w	r2, [r3, #13]
   221c0:	f8ad 2019 	strh.w	r2, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   221c4:	f8b3 200f 	ldrh.w	r2, [r3, #15]
   221c8:	f8ad 201b 	strh.w	r2, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   221cc:	7c5a      	ldrb	r2, [r3, #17]
   221ce:	f88d 201d 	strb.w	r2, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   221d2:	f853 0f04 	ldr.w	r0, [r3, #4]!
   221d6:	9001      	str	r0, [sp, #4]
   221d8:	889a      	ldrh	r2, [r3, #4]
   221da:	799b      	ldrb	r3, [r3, #6]
   221dc:	f8ad 2008 	strh.w	r2, [sp, #8]
   221e0:	f88d 300a 	strb.w	r3, [sp, #10]
	memcpy(dst, src, sizeof(*dst));
   221e4:	2300      	movs	r3, #0
   221e6:	f8cd 300b 	str.w	r3, [sp, #11]
   221ea:	f8ad 300f 	strh.w	r3, [sp, #15]
   221ee:	f8cd 3011 	str.w	r3, [sp, #17]
   221f2:	f8ad 3015 	strh.w	r3, [sp, #21]
	enh_conn_complete(&enh);
   221f6:	4668      	mov	r0, sp
   221f8:	f7ff ffc6 	bl	22188 <enh_conn_complete>
}
   221fc:	b009      	add	sp, #36	; 0x24
   221fe:	f85d fb04 	ldr.w	pc, [sp], #4

00022202 <le_conn_param_req_reply>:
{
   22202:	b570      	push	{r4, r5, r6, lr}
   22204:	4605      	mov	r5, r0
   22206:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   22208:	210e      	movs	r1, #14
   2220a:	f242 0020 	movw	r0, #8224	; 0x2020
   2220e:	f7f2 fdc3 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   22212:	b1c0      	cbz	r0, 22246 <le_conn_param_req_reply+0x44>
   22214:	4606      	mov	r6, r0
   22216:	210e      	movs	r1, #14
   22218:	3008      	adds	r0, #8
   2221a:	f001 fd92 	bl	23d42 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2221e:	2300      	movs	r3, #0
   22220:	6003      	str	r3, [r0, #0]
   22222:	6043      	str	r3, [r0, #4]
   22224:	6083      	str	r3, [r0, #8]
   22226:	8183      	strh	r3, [r0, #12]
	cp->handle = sys_cpu_to_le16(handle);
   22228:	8005      	strh	r5, [r0, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   2222a:	8823      	ldrh	r3, [r4, #0]
   2222c:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   2222e:	8863      	ldrh	r3, [r4, #2]
   22230:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   22232:	88a3      	ldrh	r3, [r4, #4]
   22234:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   22236:	88e3      	ldrh	r3, [r4, #6]
   22238:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   2223a:	4631      	mov	r1, r6
   2223c:	f242 0020 	movw	r0, #8224	; 0x2020
   22240:	f7f3 f944 	bl	154cc <bt_hci_cmd_send>
}
   22244:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   22246:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2224a:	e7fb      	b.n	22244 <le_conn_param_req_reply+0x42>

0002224c <bt_init>:
{
   2224c:	b510      	push	{r4, lr}
	err = hci_init();
   2224e:	f7f3 f855 	bl	152fc <hci_init>
	if (err) {
   22252:	4604      	mov	r4, r0
   22254:	b108      	cbz	r0, 2225a <bt_init+0xe>
}
   22256:	4620      	mov	r0, r4
   22258:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   2225a:	f7f5 f97f 	bl	1755c <bt_conn_init>
		if (err) {
   2225e:	4604      	mov	r4, r0
   22260:	2800      	cmp	r0, #0
   22262:	d1f8      	bne.n	22256 <bt_init+0xa>
	bt_finalize_init();
   22264:	f7f3 fdea 	bl	15e3c <bt_finalize_init>
	return 0;
   22268:	e7f5      	b.n	22256 <bt_init+0xa>

0002226a <bt_addr_le_is_bonded>:
}
   2226a:	2000      	movs	r0, #0
   2226c:	4770      	bx	lr

0002226e <is_adv_using_rand_addr>:
}
   2226e:	2000      	movs	r0, #0
   22270:	4770      	bx	lr

00022272 <bt_lookup_id_addr>:
}
   22272:	4608      	mov	r0, r1
   22274:	4770      	bx	lr

00022276 <bt_id_set_private_addr>:
{
   22276:	b500      	push	{lr}
   22278:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2227a:	2106      	movs	r1, #6
   2227c:	4668      	mov	r0, sp
   2227e:	f7f9 f94f 	bl	1b520 <bt_rand>
	if (err) {
   22282:	b110      	cbz	r0, 2228a <bt_id_set_private_addr+0x14>
}
   22284:	b003      	add	sp, #12
   22286:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   2228a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2228e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22292:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   22296:	4668      	mov	r0, sp
   22298:	f7f3 fef8 	bl	1608c <set_random_address>
	if (err)  {
   2229c:	e7f2      	b.n	22284 <bt_id_set_private_addr+0xe>

0002229e <bt_id_scan_random_addr_check>:
}
   2229e:	2001      	movs	r0, #1
   222a0:	4770      	bx	lr

000222a2 <get_adv_props_legacy>:
	switch (evt_type) {
   222a2:	2804      	cmp	r0, #4
   222a4:	d80a      	bhi.n	222bc <get_adv_props_legacy+0x1a>
   222a6:	e8df f000 	tbb	[pc, r0]
   222aa:	0b03      	.short	0x0b03
   222ac:	050c      	.short	0x050c
   222ae:	07          	.byte	0x07
   222af:	00          	.byte	0x00
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   222b0:	2003      	movs	r0, #3
   222b2:	4770      	bx	lr
		return 0;
   222b4:	2000      	movs	r0, #0
   222b6:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   222b8:	200a      	movs	r0, #10
   222ba:	4770      	bx	lr
		return 0;
   222bc:	2000      	movs	r0, #0
   222be:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   222c0:	2005      	movs	r0, #5
}
   222c2:	4770      	bx	lr

000222c4 <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   222c4:	7803      	ldrb	r3, [r0, #0]
   222c6:	2b01      	cmp	r3, #1
   222c8:	d815      	bhi.n	222f6 <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   222ca:	6843      	ldr	r3, [r0, #4]
   222cc:	f033 030f 	bics.w	r3, r3, #15
   222d0:	d113      	bne.n	222fa <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   222d2:	8902      	ldrh	r2, [r0, #8]
   222d4:	1f13      	subs	r3, r2, #4
   222d6:	b29b      	uxth	r3, r3
   222d8:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   222dc:	428b      	cmp	r3, r1
   222de:	d80e      	bhi.n	222fe <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   222e0:	8941      	ldrh	r1, [r0, #10]
   222e2:	1f0b      	subs	r3, r1, #4
   222e4:	b29b      	uxth	r3, r3
   222e6:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   222ea:	4283      	cmp	r3, r0
   222ec:	d809      	bhi.n	22302 <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   222ee:	428a      	cmp	r2, r1
   222f0:	d309      	bcc.n	22306 <valid_le_scan_param+0x42>
	return true;
   222f2:	2001      	movs	r0, #1
   222f4:	4770      	bx	lr
		return false;
   222f6:	2000      	movs	r0, #0
   222f8:	4770      	bx	lr
		return false;
   222fa:	2000      	movs	r0, #0
   222fc:	4770      	bx	lr
		return false;
   222fe:	2000      	movs	r0, #0
   22300:	4770      	bx	lr
		return false;
   22302:	2000      	movs	r0, #0
   22304:	4770      	bx	lr
		return false;
   22306:	2000      	movs	r0, #0
}
   22308:	4770      	bx	lr

0002230a <bt_le_scan_set_enable>:
{
   2230a:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   2230c:	f7f4 f92c 	bl	16568 <bt_le_scan_set_enable_legacy>
}
   22310:	bd08      	pop	{r3, pc}

00022312 <start_passive_scan>:
{
   22312:	b508      	push	{r3, lr}
	if (fast_scan) {
   22314:	b128      	cbz	r0, 22322 <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   22316:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   22318:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2231a:	2000      	movs	r0, #0
   2231c:	f7f4 f960 	bl	165e0 <start_le_scan_legacy>
}
   22320:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   22322:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   22324:	f44f 6100 	mov.w	r1, #2048	; 0x800
   22328:	e7f7      	b.n	2231a <start_passive_scan+0x8>

0002232a <tx_notify>:
{
   2232a:	b570      	push	{r4, r5, r6, lr}
   2232c:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   2232e:	e010      	b.n	22352 <tx_notify+0x28>
   22330:	f383 8811 	msr	BASEPRI, r3
   22334:	f3bf 8f6f 	isb	sy
}
   22338:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   2233a:	6262      	str	r2, [r4, #36]	; 0x24
   2233c:	f383 8811 	msr	BASEPRI, r3
   22340:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   22344:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   22346:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   22348:	f7f4 fbe4 	bl	16b14 <tx_free>
		cb(conn, user_data);
   2234c:	4631      	mov	r1, r6
   2234e:	4620      	mov	r0, r4
   22350:	47a8      	blx	r5
	__asm__ volatile(
   22352:	f04f 0240 	mov.w	r2, #64	; 0x40
   22356:	f3ef 8311 	mrs	r3, BASEPRI
   2235a:	f382 8812 	msr	BASEPRI_MAX, r2
   2235e:	f3bf 8f6f 	isb	sy
	return list->head;
   22362:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   22364:	2800      	cmp	r0, #0
   22366:	d0e3      	beq.n	22330 <tx_notify+0x6>
	return node->next;
   22368:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2236a:	6222      	str	r2, [r4, #32]
	return list->tail;
   2236c:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2236e:	4281      	cmp	r1, r0
   22370:	d1e4      	bne.n	2233c <tx_notify+0x12>
   22372:	e7e2      	b.n	2233a <tx_notify+0x10>

00022374 <send_acl>:
{
   22374:	b570      	push	{r4, r5, r6, lr}
   22376:	4605      	mov	r5, r0
   22378:	460c      	mov	r4, r1
	switch (flags) {
   2237a:	2a03      	cmp	r2, #3
   2237c:	d819      	bhi.n	223b2 <send_acl+0x3e>
   2237e:	e8df f002 	tbb	[pc, r2]
   22382:	1602      	.short	0x1602
   22384:	1602      	.short	0x1602
		flags = BT_ACL_CONT;
   22386:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   22388:	2104      	movs	r1, #4
   2238a:	f104 0008 	add.w	r0, r4, #8
   2238e:	f001 fce9 	bl	23d64 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   22392:	f9b5 3000 	ldrsh.w	r3, [r5]
   22396:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   2239a:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2239c:	89a3      	ldrh	r3, [r4, #12]
   2239e:	3b04      	subs	r3, #4
   223a0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   223a2:	2302      	movs	r3, #2
   223a4:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   223a6:	4620      	mov	r0, r4
   223a8:	f7f3 f886 	bl	154b8 <bt_send>
}
   223ac:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   223ae:	2601      	movs	r6, #1
   223b0:	e7ea      	b.n	22388 <send_acl+0x14>
   223b2:	f06f 0015 	mvn.w	r0, #21
   223b6:	e7f9      	b.n	223ac <send_acl+0x38>

000223b8 <process_unack_tx>:
{
   223b8:	b510      	push	{r4, lr}
   223ba:	4604      	mov	r4, r0
   223bc:	e028      	b.n	22410 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   223be:	3b01      	subs	r3, #1
   223c0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   223c2:	f382 8811 	msr	BASEPRI, r2
   223c6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   223ca:	4620      	mov	r0, r4
   223cc:	f7f4 fbee 	bl	16bac <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   223d0:	f7fa fc6c 	bl	1ccac <z_impl_k_sem_give>
			continue;
   223d4:	e01c      	b.n	22410 <process_unack_tx+0x58>
	list->tail = node;
   223d6:	61a3      	str	r3, [r4, #24]
   223d8:	f382 8811 	msr	BASEPRI, r2
   223dc:	f3bf 8f6f 	isb	sy
		if (!node) {
   223e0:	b350      	cbz	r0, 22438 <process_unack_tx+0x80>
	__asm__ volatile(
   223e2:	f04f 0240 	mov.w	r2, #64	; 0x40
   223e6:	f3ef 8311 	mrs	r3, BASEPRI
   223ea:	f382 8812 	msr	BASEPRI_MAX, r2
   223ee:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   223f2:	68c2      	ldr	r2, [r0, #12]
   223f4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   223f6:	2200      	movs	r2, #0
   223f8:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   223fa:	f383 8811 	msr	BASEPRI, r3
   223fe:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   22402:	f7f4 fb87 	bl	16b14 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   22406:	4620      	mov	r0, r4
   22408:	f7f4 fbd0 	bl	16bac <bt_conn_get_pkts>
   2240c:	f7fa fc4e 	bl	1ccac <z_impl_k_sem_give>
	__asm__ volatile(
   22410:	f04f 0340 	mov.w	r3, #64	; 0x40
   22414:	f3ef 8211 	mrs	r2, BASEPRI
   22418:	f383 8812 	msr	BASEPRI_MAX, r3
   2241c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   22420:	69e3      	ldr	r3, [r4, #28]
   22422:	2b00      	cmp	r3, #0
   22424:	d1cb      	bne.n	223be <process_unack_tx+0x6>
	return list->head;
   22426:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   22428:	2800      	cmp	r0, #0
   2242a:	d0d5      	beq.n	223d8 <process_unack_tx+0x20>
	return node->next;
   2242c:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2242e:	6163      	str	r3, [r4, #20]
	return list->tail;
   22430:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22432:	4288      	cmp	r0, r1
   22434:	d1d0      	bne.n	223d8 <process_unack_tx+0x20>
   22436:	e7ce      	b.n	223d6 <process_unack_tx+0x1e>
}
   22438:	bd10      	pop	{r4, pc}

0002243a <bt_conn_reset_rx_state>:
{
   2243a:	b510      	push	{r4, lr}
   2243c:	4604      	mov	r4, r0
	if (!conn->rx) {
   2243e:	6900      	ldr	r0, [r0, #16]
   22440:	b118      	cbz	r0, 2244a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   22442:	f001 fc34 	bl	23cae <net_buf_unref>
	conn->rx = NULL;
   22446:	2300      	movs	r3, #0
   22448:	6123      	str	r3, [r4, #16]
}
   2244a:	bd10      	pop	{r4, pc}

0002244c <conn_cleanup>:
{
   2244c:	b538      	push	{r3, r4, r5, lr}
   2244e:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   22450:	e004      	b.n	2245c <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   22452:	f7f4 fb5f 	bl	16b14 <tx_free>
		net_buf_unref(buf);
   22456:	4620      	mov	r0, r4
   22458:	f001 fc29 	bl	23cae <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2245c:	2200      	movs	r2, #0
   2245e:	2300      	movs	r3, #0
   22460:	f105 0038 	add.w	r0, r5, #56	; 0x38
   22464:	f001 fbf7 	bl	23c56 <net_buf_get>
   22468:	4604      	mov	r4, r0
   2246a:	b118      	cbz	r0, 22474 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   2246c:	6960      	ldr	r0, [r4, #20]
   2246e:	2800      	cmp	r0, #0
   22470:	d1ef      	bne.n	22452 <conn_cleanup+0x6>
   22472:	e7f0      	b.n	22456 <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   22474:	4628      	mov	r0, r5
   22476:	f7ff ffe0 	bl	2243a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2247a:	2200      	movs	r2, #0
   2247c:	2300      	movs	r3, #0
   2247e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   22482:	f7fa fe2b 	bl	1d0dc <k_work_reschedule>
}
   22486:	bd38      	pop	{r3, r4, r5, pc}

00022488 <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22488:	f3bf 8f5b 	dmb	ish
   2248c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   22490:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   22494:	b33b      	cbz	r3, 224e6 <conn_prepare_events+0x5e>
{
   22496:	b510      	push	{r4, lr}
   22498:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   2249a:	7a83      	ldrb	r3, [r0, #10]
   2249c:	b983      	cbnz	r3, 224c0 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   2249e:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   224a0:	f3bf 8f5b 	dmb	ish
   224a4:	e853 2f00 	ldrex	r2, [r3]
   224a8:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   224ac:	e843 1c00 	strex	ip, r1, [r3]
   224b0:	f1bc 0f00 	cmp.w	ip, #0
   224b4:	d1f6      	bne.n	224a4 <conn_prepare_events+0x1c>
   224b6:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   224ba:	f012 0f40 	tst.w	r2, #64	; 0x40
   224be:	d10d      	bne.n	224dc <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   224c0:	7a83      	ldrb	r3, [r0, #10]
   224c2:	2b07      	cmp	r3, #7
   224c4:	d112      	bne.n	224ec <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   224c6:	f100 0338 	add.w	r3, r0, #56	; 0x38
   224ca:	2200      	movs	r2, #0
   224cc:	2104      	movs	r1, #4
   224ce:	4620      	mov	r0, r4
   224d0:	f003 fa2e 	bl	25930 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   224d4:	2301      	movs	r3, #1
   224d6:	7323      	strb	r3, [r4, #12]
	return 0;
   224d8:	2000      	movs	r0, #0
}
   224da:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   224dc:	f7ff ffb6 	bl	2244c <conn_cleanup>
		return -ENOTCONN;
   224e0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   224e4:	e7f9      	b.n	224da <conn_prepare_events+0x52>
		return -ENOTCONN;
   224e6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   224ea:	4770      	bx	lr
		return -ENOTCONN;
   224ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   224f0:	e7f3      	b.n	224da <conn_prepare_events+0x52>

000224f2 <bt_conn_recv>:
{
   224f2:	b570      	push	{r4, r5, r6, lr}
   224f4:	4604      	mov	r4, r0
   224f6:	460d      	mov	r5, r1
   224f8:	4616      	mov	r6, r2
	tx_notify(conn);
   224fa:	f7ff ff16 	bl	2232a <tx_notify>
		bt_acl_recv(conn, buf, flags);
   224fe:	4632      	mov	r2, r6
   22500:	4629      	mov	r1, r5
   22502:	4620      	mov	r0, r4
   22504:	f7f4 fbe8 	bl	16cd8 <bt_acl_recv>
}
   22508:	bd70      	pop	{r4, r5, r6, pc}

0002250a <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2250a:	f3bf 8f5b 	dmb	ish
   2250e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   22512:	f3bf 8f5b 	dmb	ish
		if (!old) {
   22516:	b1eb      	cbz	r3, 22554 <bt_conn_ref+0x4a>
{
   22518:	b410      	push	{r4}
   2251a:	e006      	b.n	2252a <bt_conn_ref+0x20>
   2251c:	f3bf 8f5b 	dmb	ish
   22520:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   22524:	f3bf 8f5b 	dmb	ish
		if (!old) {
   22528:	b193      	cbz	r3, 22550 <bt_conn_ref+0x46>
   2252a:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2252e:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22530:	f3bf 8f5b 	dmb	ish
   22534:	e852 4f00 	ldrex	r4, [r2]
   22538:	429c      	cmp	r4, r3
   2253a:	d104      	bne.n	22546 <bt_conn_ref+0x3c>
   2253c:	e842 1c00 	strex	ip, r1, [r2]
   22540:	f1bc 0f00 	cmp.w	ip, #0
   22544:	d1f6      	bne.n	22534 <bt_conn_ref+0x2a>
   22546:	f3bf 8f5b 	dmb	ish
   2254a:	d1e7      	bne.n	2251c <bt_conn_ref+0x12>
}
   2254c:	bc10      	pop	{r4}
   2254e:	4770      	bx	lr
			return NULL;
   22550:	2000      	movs	r0, #0
   22552:	e7fb      	b.n	2254c <bt_conn_ref+0x42>
   22554:	2000      	movs	r0, #0
}
   22556:	4770      	bx	lr

00022558 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   22558:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2255a:	f3bf 8f5b 	dmb	ish
   2255e:	e850 3f00 	ldrex	r3, [r0]
   22562:	3b01      	subs	r3, #1
   22564:	e840 3200 	strex	r2, r3, [r0]
   22568:	2a00      	cmp	r2, #0
   2256a:	d1f8      	bne.n	2255e <bt_conn_unref+0x6>
   2256c:	f3bf 8f5b 	dmb	ish
}
   22570:	4770      	bx	lr

00022572 <conn_lookup_handle>:
{
   22572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22576:	4607      	mov	r7, r0
   22578:	460e      	mov	r6, r1
   2257a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2257c:	2400      	movs	r4, #0
   2257e:	e003      	b.n	22588 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   22580:	4628      	mov	r0, r5
   22582:	f7ff ffe9 	bl	22558 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   22586:	3401      	adds	r4, #1
   22588:	42b4      	cmp	r4, r6
   2258a:	d21c      	bcs.n	225c6 <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2258c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   22590:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   22594:	f7ff ffb9 	bl	2250a <bt_conn_ref>
		if (!conn) {
   22598:	4605      	mov	r5, r0
   2259a:	2800      	cmp	r0, #0
   2259c:	d0f3      	beq.n	22586 <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2259e:	7a83      	ldrb	r3, [r0, #10]
   225a0:	2b01      	cmp	r3, #1
   225a2:	d006      	beq.n	225b2 <conn_lookup_handle+0x40>
   225a4:	b25a      	sxtb	r2, r3
   225a6:	2a00      	cmp	r2, #0
   225a8:	d0ea      	beq.n	22580 <conn_lookup_handle+0xe>
   225aa:	3b07      	subs	r3, #7
   225ac:	b2db      	uxtb	r3, r3
   225ae:	2b01      	cmp	r3, #1
   225b0:	d8e6      	bhi.n	22580 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   225b2:	882b      	ldrh	r3, [r5, #0]
   225b4:	4543      	cmp	r3, r8
   225b6:	d102      	bne.n	225be <conn_lookup_handle+0x4c>
}
   225b8:	4628      	mov	r0, r5
   225ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   225be:	4628      	mov	r0, r5
   225c0:	f7ff ffca 	bl	22558 <bt_conn_unref>
			continue;
   225c4:	e7df      	b.n	22586 <conn_lookup_handle+0x14>
	return NULL;
   225c6:	2500      	movs	r5, #0
   225c8:	e7f6      	b.n	225b8 <conn_lookup_handle+0x46>

000225ca <bt_conn_connected>:
{
   225ca:	b510      	push	{r4, lr}
   225cc:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   225ce:	f7f5 f8a9 	bl	17724 <bt_l2cap_connected>
	notify_connected(conn);
   225d2:	4620      	mov	r0, r4
   225d4:	f7f4 fac2 	bl	16b5c <notify_connected>
}
   225d8:	bd10      	pop	{r4, pc}

000225da <bt_conn_get_security>:
}
   225da:	2001      	movs	r0, #1
   225dc:	4770      	bx	lr

000225de <bt_conn_is_peer_addr_le>:
{
   225de:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   225e0:	7a03      	ldrb	r3, [r0, #8]
   225e2:	428b      	cmp	r3, r1
   225e4:	d001      	beq.n	225ea <bt_conn_is_peer_addr_le+0xc>
		return false;
   225e6:	2000      	movs	r0, #0
}
   225e8:	bd38      	pop	{r3, r4, r5, pc}
   225ea:	4604      	mov	r4, r0
   225ec:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   225ee:	2207      	movs	r2, #7
   225f0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   225f4:	4628      	mov	r0, r5
   225f6:	f003 f9e0 	bl	259ba <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   225fa:	b1a8      	cbz	r0, 22628 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   225fc:	78e3      	ldrb	r3, [r4, #3]
   225fe:	b14b      	cbz	r3, 22614 <bt_conn_is_peer_addr_le+0x36>
   22600:	2207      	movs	r2, #7
   22602:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   22606:	4628      	mov	r0, r5
   22608:	f003 f9d7 	bl	259ba <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2260c:	fab0 f080 	clz	r0, r0
   22610:	0940      	lsrs	r0, r0, #5
   22612:	e7e9      	b.n	225e8 <bt_conn_is_peer_addr_le+0xa>
   22614:	2207      	movs	r2, #7
   22616:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2261a:	4628      	mov	r0, r5
   2261c:	f003 f9cd 	bl	259ba <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   22620:	fab0 f080 	clz	r0, r0
   22624:	0940      	lsrs	r0, r0, #5
   22626:	e7df      	b.n	225e8 <bt_conn_is_peer_addr_le+0xa>
		return true;
   22628:	2001      	movs	r0, #1
   2262a:	e7dd      	b.n	225e8 <bt_conn_is_peer_addr_le+0xa>

0002262c <bt_conn_le_conn_update>:
{
   2262c:	b570      	push	{r4, r5, r6, lr}
   2262e:	4605      	mov	r5, r0
   22630:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   22632:	210e      	movs	r1, #14
   22634:	f242 0013 	movw	r0, #8211	; 0x2013
   22638:	f7f2 fbae 	bl	14d98 <bt_hci_cmd_create>
	if (!buf) {
   2263c:	b1c8      	cbz	r0, 22672 <bt_conn_le_conn_update+0x46>
   2263e:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   22640:	210e      	movs	r1, #14
   22642:	3008      	adds	r0, #8
   22644:	f001 fb7d 	bl	23d42 <net_buf_simple_add>
   22648:	2200      	movs	r2, #0
   2264a:	6002      	str	r2, [r0, #0]
   2264c:	6042      	str	r2, [r0, #4]
   2264e:	6082      	str	r2, [r0, #8]
   22650:	8182      	strh	r2, [r0, #12]
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   22652:	882b      	ldrh	r3, [r5, #0]
   22654:	8003      	strh	r3, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   22656:	8823      	ldrh	r3, [r4, #0]
   22658:	8043      	strh	r3, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2265a:	8863      	ldrh	r3, [r4, #2]
   2265c:	8083      	strh	r3, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2265e:	88a3      	ldrh	r3, [r4, #4]
   22660:	80c3      	strh	r3, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   22662:	88e3      	ldrh	r3, [r4, #6]
   22664:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22666:	4631      	mov	r1, r6
   22668:	f242 0013 	movw	r0, #8211	; 0x2013
   2266c:	f7f2 fbd0 	bl	14e10 <bt_hci_cmd_send_sync>
}
   22670:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   22672:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22676:	e7fb      	b.n	22670 <bt_conn_le_conn_update+0x44>

00022678 <l2cap_connected>:
}
   22678:	4770      	bx	lr

0002267a <l2cap_chan_recv>:
{
   2267a:	b510      	push	{r4, lr}
   2267c:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   2267e:	6843      	ldr	r3, [r0, #4]
   22680:	691b      	ldr	r3, [r3, #16]
   22682:	4798      	blx	r3
	net_buf_unref(buf);
   22684:	4620      	mov	r0, r4
   22686:	f001 fb12 	bl	23cae <net_buf_unref>
}
   2268a:	bd10      	pop	{r4, pc}

0002268c <l2cap_disconnected>:
{
   2268c:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2268e:	3010      	adds	r0, #16
   22690:	f002 fe1d 	bl	252ce <k_work_cancel_delayable>
}
   22694:	bd08      	pop	{r3, pc}

00022696 <bt_l2cap_chan_remove>:
	return list->head;
   22696:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22698:	b103      	cbz	r3, 2269c <bt_l2cap_chan_remove+0x6>
   2269a:	3b08      	subs	r3, #8
   2269c:	2200      	movs	r2, #0
   2269e:	e016      	b.n	226ce <bt_l2cap_chan_remove+0x38>
{
   226a0:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   226a2:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   226a6:	b142      	cbz	r2, 226ba <bt_l2cap_chan_remove+0x24>
	return node->next;
   226a8:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   226aa:	6014      	str	r4, [r2, #0]
	return list->tail;
   226ac:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   226ae:	42a1      	cmp	r1, r4
   226b0:	d00a      	beq.n	226c8 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   226b2:	2200      	movs	r2, #0
   226b4:	609a      	str	r2, [r3, #8]
}
   226b6:	bc10      	pop	{r4}
   226b8:	4770      	bx	lr
	return node->next;
   226ba:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   226bc:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   226be:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   226c0:	42a1      	cmp	r1, r4
   226c2:	d1f6      	bne.n	226b2 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   226c4:	6542      	str	r2, [r0, #84]	; 0x54
}
   226c6:	e7f4      	b.n	226b2 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   226c8:	6542      	str	r2, [r0, #84]	; 0x54
}
   226ca:	e7f2      	b.n	226b2 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   226cc:	4613      	mov	r3, r2
   226ce:	b14b      	cbz	r3, 226e4 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   226d0:	428b      	cmp	r3, r1
   226d2:	d0e5      	beq.n	226a0 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   226d4:	f113 0208 	adds.w	r2, r3, #8
   226d8:	d0f8      	beq.n	226cc <bt_l2cap_chan_remove+0x36>
	return node->next;
   226da:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   226dc:	2b00      	cmp	r3, #0
   226de:	d0f6      	beq.n	226ce <bt_l2cap_chan_remove+0x38>
   226e0:	3b08      	subs	r3, #8
   226e2:	e7f4      	b.n	226ce <bt_l2cap_chan_remove+0x38>
   226e4:	4770      	bx	lr

000226e6 <bt_l2cap_chan_del>:
{
   226e6:	b538      	push	{r3, r4, r5, lr}
   226e8:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   226ea:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   226ec:	6803      	ldr	r3, [r0, #0]
   226ee:	b123      	cbz	r3, 226fa <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   226f0:	686b      	ldr	r3, [r5, #4]
   226f2:	b103      	cbz	r3, 226f6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   226f4:	4798      	blx	r3
	chan->conn = NULL;
   226f6:	2300      	movs	r3, #0
   226f8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   226fa:	68e3      	ldr	r3, [r4, #12]
   226fc:	b10b      	cbz	r3, 22702 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   226fe:	4620      	mov	r0, r4
   22700:	4798      	blx	r3
	if (ops->released) {
   22702:	69eb      	ldr	r3, [r5, #28]
   22704:	b10b      	cbz	r3, 2270a <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   22706:	4620      	mov	r0, r4
   22708:	4798      	blx	r3
}
   2270a:	bd38      	pop	{r3, r4, r5, pc}

0002270c <bt_l2cap_chan_add>:
{
   2270c:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2270e:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   22712:	2400      	movs	r4, #0
   22714:	608c      	str	r4, [r1, #8]
	return list->tail;
   22716:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   22718:	b12c      	cbz	r4, 22726 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2271a:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2271c:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   2271e:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   22720:	60ca      	str	r2, [r1, #12]
}
   22722:	bc10      	pop	{r4}
   22724:	4770      	bx	lr
   22726:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   22728:	6503      	str	r3, [r0, #80]	; 0x50
}
   2272a:	e7f8      	b.n	2271e <bt_l2cap_chan_add+0x12>

0002272c <bt_l2cap_create_pdu_timeout>:
{
   2272c:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   2272e:	3104      	adds	r1, #4
   22730:	f7f4 fd4e 	bl	171d0 <bt_conn_create_pdu_timeout>
}
   22734:	bd08      	pop	{r3, pc}

00022736 <bt_l2cap_send_cb>:
{
   22736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22738:	4605      	mov	r5, r0
   2273a:	460f      	mov	r7, r1
   2273c:	4614      	mov	r4, r2
   2273e:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   22740:	2104      	movs	r1, #4
   22742:	f102 0008 	add.w	r0, r2, #8
   22746:	f001 fb0d 	bl	23d64 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2274a:	89a3      	ldrh	r3, [r4, #12]
   2274c:	3b04      	subs	r3, #4
   2274e:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   22750:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22752:	9b06      	ldr	r3, [sp, #24]
   22754:	4632      	mov	r2, r6
   22756:	4621      	mov	r1, r4
   22758:	4628      	mov	r0, r5
   2275a:	f7f4 fb73 	bl	16e44 <bt_conn_send_cb>
}
   2275e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022760 <l2cap_send_reject>:
{
   22760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22764:	b083      	sub	sp, #12
   22766:	4605      	mov	r5, r0
   22768:	4690      	mov	r8, r2
   2276a:	461c      	mov	r4, r3
   2276c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   22770:	1cbb      	adds	r3, r7, #2
   22772:	460a      	mov	r2, r1
   22774:	2101      	movs	r1, #1
   22776:	2000      	movs	r0, #0
   22778:	f7f5 f810 	bl	1779c <l2cap_create_le_sig_pdu>
	if (!buf) {
   2277c:	b1b0      	cbz	r0, 227ac <l2cap_send_reject+0x4c>
   2277e:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   22780:	f100 0908 	add.w	r9, r0, #8
   22784:	2102      	movs	r1, #2
   22786:	4648      	mov	r0, r9
   22788:	f001 fadb 	bl	23d42 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2278c:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   22790:	b124      	cbz	r4, 2279c <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22792:	463a      	mov	r2, r7
   22794:	4621      	mov	r1, r4
   22796:	4648      	mov	r0, r9
   22798:	f001 fad9 	bl	23d4e <net_buf_simple_add_mem>
   2279c:	2300      	movs	r3, #0
   2279e:	9300      	str	r3, [sp, #0]
   227a0:	4632      	mov	r2, r6
   227a2:	2105      	movs	r1, #5
   227a4:	4628      	mov	r0, r5
   227a6:	f7ff ffc6 	bl	22736 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   227aa:	b910      	cbnz	r0, 227b2 <l2cap_send_reject+0x52>
}
   227ac:	b003      	add	sp, #12
   227ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   227b2:	4630      	mov	r0, r6
   227b4:	f001 fa7b 	bl	23cae <net_buf_unref>
}
   227b8:	e7f8      	b.n	227ac <l2cap_send_reject+0x4c>

000227ba <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   227ba:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   227bc:	b110      	cbz	r0, 227c4 <bt_l2cap_le_lookup_tx_cid+0xa>
   227be:	3808      	subs	r0, #8
   227c0:	e000      	b.n	227c4 <bt_l2cap_le_lookup_tx_cid+0xa>
   227c2:	3808      	subs	r0, #8
   227c4:	b148      	cbz	r0, 227da <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   227c6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   227ca:	428b      	cmp	r3, r1
   227cc:	d005      	beq.n	227da <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   227ce:	f110 0308 	adds.w	r3, r0, #8
   227d2:	d003      	beq.n	227dc <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   227d4:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   227d6:	2800      	cmp	r0, #0
   227d8:	d1f3      	bne.n	227c2 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   227da:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   227dc:	4618      	mov	r0, r3
   227de:	e7f1      	b.n	227c4 <bt_l2cap_le_lookup_tx_cid+0xa>

000227e0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   227e0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   227e2:	b110      	cbz	r0, 227ea <bt_l2cap_le_lookup_rx_cid+0xa>
   227e4:	3808      	subs	r0, #8
   227e6:	e000      	b.n	227ea <bt_l2cap_le_lookup_rx_cid+0xa>
   227e8:	3808      	subs	r0, #8
   227ea:	b148      	cbz	r0, 22800 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   227ec:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   227f0:	428b      	cmp	r3, r1
   227f2:	d005      	beq.n	22800 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   227f4:	f110 0308 	adds.w	r3, r0, #8
   227f8:	d003      	beq.n	22802 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   227fa:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   227fc:	2800      	cmp	r0, #0
   227fe:	d1f3      	bne.n	227e8 <bt_l2cap_le_lookup_rx_cid+0x8>
}
   22800:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22802:	4618      	mov	r0, r3
   22804:	e7f1      	b.n	227ea <bt_l2cap_le_lookup_rx_cid+0xa>

00022806 <bt_l2cap_update_conn_param>:
{
   22806:	b570      	push	{r4, r5, r6, lr}
   22808:	b082      	sub	sp, #8
   2280a:	4605      	mov	r5, r0
   2280c:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2280e:	f7f4 fed1 	bl	175b4 <get_ident>
   22812:	4602      	mov	r2, r0
   22814:	2308      	movs	r3, #8
   22816:	2112      	movs	r1, #18
   22818:	2000      	movs	r0, #0
   2281a:	f7f4 ffbf 	bl	1779c <l2cap_create_le_sig_pdu>
	if (!buf) {
   2281e:	b1e0      	cbz	r0, 2285a <bt_l2cap_update_conn_param+0x54>
   22820:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   22822:	2108      	movs	r1, #8
   22824:	4408      	add	r0, r1
   22826:	f001 fa8c 	bl	23d42 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2282a:	8823      	ldrh	r3, [r4, #0]
   2282c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2282e:	8863      	ldrh	r3, [r4, #2]
   22830:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   22832:	88a3      	ldrh	r3, [r4, #4]
   22834:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   22836:	88e3      	ldrh	r3, [r4, #6]
   22838:	80c3      	strh	r3, [r0, #6]
   2283a:	2300      	movs	r3, #0
   2283c:	9300      	str	r3, [sp, #0]
   2283e:	4632      	mov	r2, r6
   22840:	2105      	movs	r1, #5
   22842:	4628      	mov	r0, r5
   22844:	f7ff ff77 	bl	22736 <bt_l2cap_send_cb>
	if (err) {
   22848:	4604      	mov	r4, r0
   2284a:	b910      	cbnz	r0, 22852 <bt_l2cap_update_conn_param+0x4c>
}
   2284c:	4620      	mov	r0, r4
   2284e:	b002      	add	sp, #8
   22850:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   22852:	4630      	mov	r0, r6
   22854:	f001 fa2b 	bl	23cae <net_buf_unref>
		return err;
   22858:	e7f8      	b.n	2284c <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2285a:	f06f 040b 	mvn.w	r4, #11
   2285e:	e7f5      	b.n	2284c <bt_l2cap_update_conn_param+0x46>

00022860 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   22860:	4770      	bx	lr

00022862 <att_sent>:
{
   22862:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   22864:	684b      	ldr	r3, [r1, #4]
   22866:	695b      	ldr	r3, [r3, #20]
   22868:	b10b      	cbz	r3, 2286e <att_sent+0xc>
   2286a:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   2286c:	4798      	blx	r3
}
   2286e:	bd08      	pop	{r3, pc}

00022870 <range_is_valid>:
	if (!start || !end) {
   22870:	b120      	cbz	r0, 2287c <range_is_valid+0xc>
   22872:	b119      	cbz	r1, 2287c <range_is_valid+0xc>
	if (start > end) {
   22874:	4288      	cmp	r0, r1
   22876:	d806      	bhi.n	22886 <range_is_valid+0x16>
	return true;
   22878:	2001      	movs	r0, #1
}
   2287a:	4770      	bx	lr
		if (err) {
   2287c:	b10a      	cbz	r2, 22882 <range_is_valid+0x12>
			*err = 0U;
   2287e:	2300      	movs	r3, #0
   22880:	8013      	strh	r3, [r2, #0]
		return false;
   22882:	2000      	movs	r0, #0
   22884:	4770      	bx	lr
		if (err) {
   22886:	b102      	cbz	r2, 2288a <range_is_valid+0x1a>
			*err = start;
   22888:	8010      	strh	r0, [r2, #0]
		return false;
   2288a:	2000      	movs	r0, #0
   2288c:	4770      	bx	lr

0002288e <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2288e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   22892:	d201      	bcs.n	22898 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   22894:	200e      	movs	r0, #14
}
   22896:	4770      	bx	lr
		return -err;
   22898:	4240      	negs	r0, r0
   2289a:	b2c0      	uxtb	r0, r0
   2289c:	4770      	bx	lr

0002289e <attr_read_type_cb>:
{
   2289e:	b410      	push	{r4}
	if (!data->rsp->len) {
   228a0:	68d4      	ldr	r4, [r2, #12]
   228a2:	7823      	ldrb	r3, [r4, #0]
   228a4:	b923      	cbnz	r3, 228b0 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   228a6:	3102      	adds	r1, #2
   228a8:	7021      	strb	r1, [r4, #0]
	return true;
   228aa:	2001      	movs	r0, #1
}
   228ac:	bc10      	pop	{r4}
   228ae:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   228b0:	3102      	adds	r1, #2
   228b2:	428b      	cmp	r3, r1
   228b4:	d005      	beq.n	228c2 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   228b6:	8983      	ldrh	r3, [r0, #12]
   228b8:	3b02      	subs	r3, #2
   228ba:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   228bc:	2000      	movs	r0, #0
   228be:	6110      	str	r0, [r2, #16]
		return false;
   228c0:	e7f4      	b.n	228ac <attr_read_type_cb+0xe>
	return true;
   228c2:	2001      	movs	r0, #1
   228c4:	e7f2      	b.n	228ac <attr_read_type_cb+0xe>

000228c6 <attr_read_group_cb>:
	if (!data->rsp->len) {
   228c6:	68d0      	ldr	r0, [r2, #12]
   228c8:	7803      	ldrb	r3, [r0, #0]
   228ca:	b91b      	cbnz	r3, 228d4 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   228cc:	3104      	adds	r1, #4
   228ce:	7001      	strb	r1, [r0, #0]
	return true;
   228d0:	2001      	movs	r0, #1
   228d2:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   228d4:	3104      	adds	r1, #4
   228d6:	428b      	cmp	r3, r1
   228d8:	d006      	beq.n	228e8 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   228da:	6891      	ldr	r1, [r2, #8]
   228dc:	898b      	ldrh	r3, [r1, #12]
   228de:	3b04      	subs	r3, #4
   228e0:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   228e2:	2000      	movs	r0, #0
   228e4:	6110      	str	r0, [r2, #16]
		return false;
   228e6:	4770      	bx	lr
	return true;
   228e8:	2001      	movs	r0, #1
}
   228ea:	4770      	bx	lr

000228ec <att_prepare_write_req>:
}
   228ec:	2006      	movs	r0, #6
   228ee:	4770      	bx	lr

000228f0 <att_exec_write_req>:
}
   228f0:	2006      	movs	r0, #6
   228f2:	4770      	bx	lr

000228f4 <att_op_get_type>:
	switch (op) {
   228f4:	1e43      	subs	r3, r0, #1
   228f6:	2bd1      	cmp	r3, #209	; 0xd1
   228f8:	d874      	bhi.n	229e4 <att_op_get_type+0xf0>
   228fa:	e8df f003 	tbb	[pc, r3]
   228fe:	696d      	.short	0x696d
   22900:	696d696d 	.word	0x696d696d
   22904:	696d696d 	.word	0x696d696d
   22908:	696d696d 	.word	0x696d696d
   2290c:	696d696d 	.word	0x696d696d
   22910:	6973736d 	.word	0x6973736d
   22914:	736d696d 	.word	0x736d696d
   22918:	7871736f 	.word	0x7871736f
   2291c:	73737373 	.word	0x73737373
   22920:	73737373 	.word	0x73737373
   22924:	73737373 	.word	0x73737373
   22928:	73737373 	.word	0x73737373
   2292c:	73737373 	.word	0x73737373
   22930:	73737373 	.word	0x73737373
   22934:	73737373 	.word	0x73737373
   22938:	73737373 	.word	0x73737373
   2293c:	73737373 	.word	0x73737373
   22940:	73737373 	.word	0x73737373
   22944:	73737373 	.word	0x73737373
   22948:	73737373 	.word	0x73737373
   2294c:	6b737373 	.word	0x6b737373
   22950:	73737373 	.word	0x73737373
   22954:	73737373 	.word	0x73737373
   22958:	73737373 	.word	0x73737373
   2295c:	73737373 	.word	0x73737373
   22960:	73737373 	.word	0x73737373
   22964:	73737373 	.word	0x73737373
   22968:	73737373 	.word	0x73737373
   2296c:	73737373 	.word	0x73737373
   22970:	73737373 	.word	0x73737373
   22974:	73737373 	.word	0x73737373
   22978:	73737373 	.word	0x73737373
   2297c:	73737373 	.word	0x73737373
   22980:	73737373 	.word	0x73737373
   22984:	73737373 	.word	0x73737373
   22988:	73737373 	.word	0x73737373
   2298c:	73737373 	.word	0x73737373
   22990:	73737373 	.word	0x73737373
   22994:	73737373 	.word	0x73737373
   22998:	73737373 	.word	0x73737373
   2299c:	73737373 	.word	0x73737373
   229a0:	73737373 	.word	0x73737373
   229a4:	73737373 	.word	0x73737373
   229a8:	73737373 	.word	0x73737373
   229ac:	73737373 	.word	0x73737373
   229b0:	73737373 	.word	0x73737373
   229b4:	73737373 	.word	0x73737373
   229b8:	73737373 	.word	0x73737373
   229bc:	73737373 	.word	0x73737373
   229c0:	73737373 	.word	0x73737373
   229c4:	73737373 	.word	0x73737373
   229c8:	73737373 	.word	0x73737373
   229cc:	6b737373 	.word	0x6b737373
{
   229d0:	2001      	movs	r0, #1
   229d2:	4770      	bx	lr
		return ATT_COMMAND;
   229d4:	2000      	movs	r0, #0
   229d6:	4770      	bx	lr
		return ATT_RESPONSE;
   229d8:	2002      	movs	r0, #2
   229da:	4770      	bx	lr
		return ATT_NOTIFICATION;
   229dc:	2003      	movs	r0, #3
   229de:	4770      	bx	lr
		return ATT_INDICATION;
   229e0:	2005      	movs	r0, #5
   229e2:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   229e4:	f010 0f40 	tst.w	r0, #64	; 0x40
   229e8:	d103      	bne.n	229f2 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   229ea:	2006      	movs	r0, #6
   229ec:	4770      	bx	lr
		return ATT_CONFIRMATION;
   229ee:	2004      	movs	r0, #4
   229f0:	4770      	bx	lr
		return ATT_COMMAND;
   229f2:	2000      	movs	r0, #0
}
   229f4:	4770      	bx	lr

000229f6 <att_chan_attach>:
{
   229f6:	b538      	push	{r3, r4, r5, lr}
   229f8:	4604      	mov	r4, r0
   229fa:	460d      	mov	r5, r1
	return list->head;
   229fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   229fe:	b143      	cbz	r3, 22a12 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   22a00:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   22a04:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   22a06:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   22a0a:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   22a0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   22a0e:	b122      	cbz	r2, 22a1a <att_chan_attach+0x24>
}
   22a10:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   22a12:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   22a14:	f002 fb07 	bl	25026 <z_impl_k_queue_init>
}
   22a18:	e7f2      	b.n	22a00 <att_chan_attach+0xa>
	list->tail = node;
   22a1a:	62a3      	str	r3, [r4, #40]	; 0x28
}
   22a1c:	e7f8      	b.n	22a10 <att_chan_attach+0x1a>

00022a1e <chan_req_send>:
{
   22a1e:	b570      	push	{r4, r5, r6, lr}
   22a20:	4606      	mov	r6, r0
   22a22:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   22a24:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   22a28:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   22a2a:	2200      	movs	r2, #0
	while (buf) {
   22a2c:	b11b      	cbz	r3, 22a36 <chan_req_send+0x18>
		bytes += buf->len;
   22a2e:	899c      	ldrh	r4, [r3, #12]
   22a30:	4422      	add	r2, r4
		buf = buf->frags;
   22a32:	681b      	ldr	r3, [r3, #0]
   22a34:	e7fa      	b.n	22a2c <chan_req_send+0xe>
   22a36:	4291      	cmp	r1, r2
   22a38:	d30e      	bcc.n	22a58 <chan_req_send+0x3a>
	chan->req = req;
   22a3a:	f8c6 50f4 	str.w	r5, [r6, #244]	; 0xf4
	buf = req->buf;
   22a3e:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   22a40:	2200      	movs	r2, #0
   22a42:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   22a44:	4621      	mov	r1, r4
   22a46:	4630      	mov	r0, r6
   22a48:	f7f5 f974 	bl	17d34 <chan_send>
	if (err) {
   22a4c:	b118      	cbz	r0, 22a56 <chan_req_send+0x38>
		req->buf = buf;
   22a4e:	60ac      	str	r4, [r5, #8]
		chan->req = NULL;
   22a50:	2300      	movs	r3, #0
   22a52:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
}
   22a56:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   22a58:	f06f 0079 	mvn.w	r0, #121	; 0x79
   22a5c:	e7fb      	b.n	22a56 <chan_req_send+0x38>

00022a5e <bt_att_chan_req_send>:
{
   22a5e:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   22a60:	f7ff ffdd 	bl	22a1e <chan_req_send>
}
   22a64:	bd08      	pop	{r3, pc}

00022a66 <bt_att_status>:
{
   22a66:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22a68:	f3bf 8f5b 	dmb	ish
   22a6c:	680b      	ldr	r3, [r1, #0]
   22a6e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   22a72:	f013 0f01 	tst.w	r3, #1
   22a76:	d007      	beq.n	22a88 <bt_att_status+0x22>
   22a78:	4604      	mov	r4, r0
   22a7a:	3808      	subs	r0, #8
	if (!chan->att) {
   22a7c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   22a80:	b113      	cbz	r3, 22a88 <bt_att_status+0x22>
	if (chan->req) {
   22a82:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   22a86:	b102      	cbz	r2, 22a8a <bt_att_status+0x24>
}
   22a88:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   22a8a:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   22a8c:	2d00      	cmp	r5, #0
   22a8e:	d0fb      	beq.n	22a88 <bt_att_status+0x22>
	return node->next;
   22a90:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   22a92:	605a      	str	r2, [r3, #4]
	return list->tail;
   22a94:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22a96:	42a9      	cmp	r1, r5
   22a98:	d00e      	beq.n	22ab8 <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22a9a:	4629      	mov	r1, r5
   22a9c:	f7ff ffdf 	bl	22a5e <bt_att_chan_req_send>
   22aa0:	2800      	cmp	r0, #0
   22aa2:	daf1      	bge.n	22a88 <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   22aa4:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   22aa8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   22aaa:	602a      	str	r2, [r5, #0]
	list->head = node;
   22aac:	605d      	str	r5, [r3, #4]
	return list->tail;
   22aae:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   22ab0:	2a00      	cmp	r2, #0
   22ab2:	d1e9      	bne.n	22a88 <bt_att_status+0x22>
	list->tail = node;
   22ab4:	609d      	str	r5, [r3, #8]
}
   22ab6:	e7e7      	b.n	22a88 <bt_att_status+0x22>
	list->tail = node;
   22ab8:	609a      	str	r2, [r3, #8]
}
   22aba:	e7ee      	b.n	22a9a <bt_att_status+0x34>

00022abc <att_req_send_process>:
{
   22abc:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   22abe:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   22ac0:	2e00      	cmp	r6, #0
   22ac2:	d038      	beq.n	22b36 <att_req_send_process+0x7a>
   22ac4:	4605      	mov	r5, r0
	return node->next;
   22ac6:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   22ac8:	6043      	str	r3, [r0, #4]
	return list->tail;
   22aca:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22acc:	4296      	cmp	r6, r2
   22ace:	d00d      	beq.n	22aec <att_req_send_process+0x30>
	return list->head;
   22ad0:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22ad2:	b198      	cbz	r0, 22afc <att_req_send_process+0x40>
   22ad4:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   22ad8:	d012      	beq.n	22b00 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22ada:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   22ade:	d014      	beq.n	22b0a <att_req_send_process+0x4e>
	return node->next;
   22ae0:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   22ae4:	b18c      	cbz	r4, 22b0a <att_req_send_process+0x4e>
   22ae6:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   22aea:	e00e      	b.n	22b0a <att_req_send_process+0x4e>
	list->tail = node;
   22aec:	6083      	str	r3, [r0, #8]
}
   22aee:	e7ef      	b.n	22ad0 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22af0:	4631      	mov	r1, r6
   22af2:	f7ff ffb4 	bl	22a5e <bt_att_chan_req_send>
   22af6:	2800      	cmp	r0, #0
   22af8:	db0c      	blt.n	22b14 <att_req_send_process+0x58>
   22afa:	e01c      	b.n	22b36 <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22afc:	4604      	mov	r4, r0
   22afe:	e004      	b.n	22b0a <att_req_send_process+0x4e>
   22b00:	4604      	mov	r4, r0
   22b02:	e002      	b.n	22b0a <att_req_send_process+0x4e>
   22b04:	4623      	mov	r3, r4
   22b06:	4620      	mov	r0, r4
   22b08:	461c      	mov	r4, r3
   22b0a:	b178      	cbz	r0, 22b2c <att_req_send_process+0x70>
		if (!chan->req) {
   22b0c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   22b10:	2b00      	cmp	r3, #0
   22b12:	d0ed      	beq.n	22af0 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22b14:	2c00      	cmp	r4, #0
   22b16:	d0f5      	beq.n	22b04 <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22b18:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   22b1c:	d0f3      	beq.n	22b06 <att_req_send_process+0x4a>
	return node->next;
   22b1e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   22b22:	2b00      	cmp	r3, #0
   22b24:	d0ef      	beq.n	22b06 <att_req_send_process+0x4a>
   22b26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   22b2a:	e7ec      	b.n	22b06 <att_req_send_process+0x4a>
	return list->head;
   22b2c:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   22b2e:	6033      	str	r3, [r6, #0]
	list->head = node;
   22b30:	606e      	str	r6, [r5, #4]
	return list->tail;
   22b32:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   22b34:	b103      	cbz	r3, 22b38 <att_req_send_process+0x7c>
}
   22b36:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   22b38:	60ae      	str	r6, [r5, #8]
}
   22b3a:	e7fc      	b.n	22b36 <att_req_send_process+0x7a>

00022b3c <bt_att_chan_send>:
{
   22b3c:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   22b3e:	f7f5 f8f9 	bl	17d34 <chan_send>
}
   22b42:	bd08      	pop	{r3, pc}

00022b44 <chan_req_sent>:
{
   22b44:	b508      	push	{r3, lr}
	if (chan->req) {
   22b46:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   22b4a:	b133      	cbz	r3, 22b5a <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   22b4c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   22b50:	2300      	movs	r3, #0
   22b52:	f500 7088 	add.w	r0, r0, #272	; 0x110
   22b56:	f7fa fac1 	bl	1d0dc <k_work_reschedule>
}
   22b5a:	bd08      	pop	{r3, pc}

00022b5c <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   22b5c:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22b5e:	f3bf 8f5b 	dmb	ish
   22b62:	e850 3f00 	ldrex	r3, [r0]
   22b66:	f023 0302 	bic.w	r3, r3, #2
   22b6a:	e840 3200 	strex	r2, r3, [r0]
   22b6e:	2a00      	cmp	r2, #0
   22b70:	d1f7      	bne.n	22b62 <chan_cfm_sent+0x6>
   22b72:	f3bf 8f5b 	dmb	ish
}
   22b76:	4770      	bx	lr

00022b78 <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   22b78:	30f0      	adds	r0, #240	; 0xf0
   22b7a:	f3bf 8f5b 	dmb	ish
   22b7e:	e850 3f00 	ldrex	r3, [r0]
   22b82:	f023 0301 	bic.w	r3, r3, #1
   22b86:	e840 3200 	strex	r2, r3, [r0]
   22b8a:	2a00      	cmp	r2, #0
   22b8c:	d1f7      	bne.n	22b7e <chan_rsp_sent+0x6>
   22b8e:	f3bf 8f5b 	dmb	ish
}
   22b92:	4770      	bx	lr

00022b94 <process_queue>:
{
   22b94:	b570      	push	{r4, r5, r6, lr}
   22b96:	4605      	mov	r5, r0
   22b98:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   22b9a:	2200      	movs	r2, #0
   22b9c:	2300      	movs	r3, #0
   22b9e:	4608      	mov	r0, r1
   22ba0:	f001 f859 	bl	23c56 <net_buf_get>
	if (buf) {
   22ba4:	b170      	cbz	r0, 22bc4 <process_queue+0x30>
   22ba6:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   22ba8:	2200      	movs	r2, #0
   22baa:	4601      	mov	r1, r0
   22bac:	4628      	mov	r0, r5
   22bae:	f7f5 f8c1 	bl	17d34 <chan_send>
		if (err) {
   22bb2:	4605      	mov	r5, r0
   22bb4:	b908      	cbnz	r0, 22bba <process_queue+0x26>
}
   22bb6:	4628      	mov	r0, r5
   22bb8:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   22bba:	4631      	mov	r1, r6
   22bbc:	4620      	mov	r0, r4
   22bbe:	f002 fa4a 	bl	25056 <k_queue_prepend>
			return err;
   22bc2:	e7f8      	b.n	22bb6 <process_queue+0x22>
	return -ENOENT;
   22bc4:	f06f 0501 	mvn.w	r5, #1
   22bc8:	e7f5      	b.n	22bb6 <process_queue+0x22>

00022bca <bt_att_sent>:
{
   22bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22bcc:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   22bce:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   22bd2:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   22bd6:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   22bda:	b10b      	cbz	r3, 22be0 <bt_att_sent+0x16>
		chan->sent(chan);
   22bdc:	4630      	mov	r0, r6
   22bde:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   22be0:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   22be4:	f3bf 8f5b 	dmb	ish
   22be8:	e853 2f00 	ldrex	r2, [r3]
   22bec:	f022 0210 	bic.w	r2, r2, #16
   22bf0:	e843 2100 	strex	r1, r2, [r3]
   22bf4:	2900      	cmp	r1, #0
   22bf6:	d1f7      	bne.n	22be8 <bt_att_sent+0x1e>
   22bf8:	f3bf 8f5b 	dmb	ish
	if (!att) {
   22bfc:	b145      	cbz	r5, 22c10 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   22bfe:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   22c02:	b133      	cbz	r3, 22c12 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   22c04:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   22c08:	4630      	mov	r0, r6
   22c0a:	f7ff ffc3 	bl	22b94 <process_queue>
	if (!err) {
   22c0e:	b9c0      	cbnz	r0, 22c42 <bt_att_sent+0x78>
}
   22c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   22c12:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   22c14:	2f00      	cmp	r7, #0
   22c16:	d0f5      	beq.n	22c04 <bt_att_sent+0x3a>
	return node->next;
   22c18:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   22c1a:	606b      	str	r3, [r5, #4]
	return list->tail;
   22c1c:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22c1e:	42ba      	cmp	r2, r7
   22c20:	d00d      	beq.n	22c3e <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22c22:	4639      	mov	r1, r7
   22c24:	4630      	mov	r0, r6
   22c26:	f7ff fefa 	bl	22a1e <chan_req_send>
   22c2a:	2800      	cmp	r0, #0
   22c2c:	daf0      	bge.n	22c10 <bt_att_sent+0x46>
	return list->head;
   22c2e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   22c30:	603b      	str	r3, [r7, #0]
	list->head = node;
   22c32:	606f      	str	r7, [r5, #4]
	return list->tail;
   22c34:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   22c36:	2b00      	cmp	r3, #0
   22c38:	d1e4      	bne.n	22c04 <bt_att_sent+0x3a>
	list->tail = node;
   22c3a:	60af      	str	r7, [r5, #8]
}
   22c3c:	e7e2      	b.n	22c04 <bt_att_sent+0x3a>
	list->tail = node;
   22c3e:	60ab      	str	r3, [r5, #8]
}
   22c40:	e7ef      	b.n	22c22 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   22c42:	f105 010c 	add.w	r1, r5, #12
   22c46:	4630      	mov	r0, r6
   22c48:	f7ff ffa4 	bl	22b94 <process_queue>
   22c4c:	e7e0      	b.n	22c10 <bt_att_sent+0x46>

00022c4e <att_send_process>:
{
   22c4e:	b570      	push	{r4, r5, r6, lr}
   22c50:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   22c52:	2200      	movs	r2, #0
   22c54:	2300      	movs	r3, #0
   22c56:	300c      	adds	r0, #12
   22c58:	f000 fffd 	bl	23c56 <net_buf_get>
	if (!buf) {
   22c5c:	b360      	cbz	r0, 22cb8 <att_send_process+0x6a>
   22c5e:	4605      	mov	r5, r0
	return list->head;
   22c60:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22c62:	b158      	cbz	r0, 22c7c <att_send_process+0x2e>
   22c64:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   22c68:	d00c      	beq.n	22c84 <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22c6a:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   22c6e:	d006      	beq.n	22c7e <att_send_process+0x30>
	return node->next;
   22c70:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   22c74:	b11c      	cbz	r4, 22c7e <att_send_process+0x30>
   22c76:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   22c7a:	e000      	b.n	22c7e <att_send_process+0x30>
   22c7c:	4604      	mov	r4, r0
   22c7e:	f06f 0301 	mvn.w	r3, #1
   22c82:	e004      	b.n	22c8e <att_send_process+0x40>
   22c84:	4604      	mov	r4, r0
   22c86:	e7fa      	b.n	22c7e <att_send_process+0x30>
   22c88:	4622      	mov	r2, r4
   22c8a:	4620      	mov	r0, r4
   22c8c:	4614      	mov	r4, r2
   22c8e:	b188      	cbz	r0, 22cb4 <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   22c90:	2200      	movs	r2, #0
   22c92:	4629      	mov	r1, r5
   22c94:	f7ff ff52 	bl	22b3c <bt_att_chan_send>
		if (err >= 0) {
   22c98:	1e03      	subs	r3, r0, #0
   22c9a:	da0b      	bge.n	22cb4 <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22c9c:	2c00      	cmp	r4, #0
   22c9e:	d0f3      	beq.n	22c88 <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22ca0:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   22ca4:	d0f1      	beq.n	22c8a <att_send_process+0x3c>
	return node->next;
   22ca6:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   22caa:	2a00      	cmp	r2, #0
   22cac:	d0ed      	beq.n	22c8a <att_send_process+0x3c>
   22cae:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   22cb2:	e7ea      	b.n	22c8a <att_send_process+0x3c>
	if (err < 0) {
   22cb4:	2b00      	cmp	r3, #0
   22cb6:	db00      	blt.n	22cba <att_send_process+0x6c>
}
   22cb8:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   22cba:	4629      	mov	r1, r5
   22cbc:	f106 000c 	add.w	r0, r6, #12
   22cc0:	f002 f9c9 	bl	25056 <k_queue_prepend>
   22cc4:	e7f8      	b.n	22cb8 <att_send_process+0x6a>

00022cc6 <write_cb>:
{
   22cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   22cc8:	b083      	sub	sp, #12
   22cca:	4606      	mov	r6, r0
   22ccc:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   22cce:	222a      	movs	r2, #42	; 0x2a
   22cd0:	4601      	mov	r1, r0
   22cd2:	6820      	ldr	r0, [r4, #0]
   22cd4:	f000 fe39 	bl	2394a <bt_gatt_check_perm>
   22cd8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   22cda:	bb08      	cbnz	r0, 22d20 <write_cb+0x5a>
   22cdc:	4605      	mov	r5, r0
	if (!data->req) {
   22cde:	7a23      	ldrb	r3, [r4, #8]
   22ce0:	b11b      	cbz	r3, 22cea <write_cb+0x24>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   22ce2:	2b18      	cmp	r3, #24
   22ce4:	d016      	beq.n	22d14 <write_cb+0x4e>
	uint8_t flags = 0U;
   22ce6:	4603      	mov	r3, r0
   22ce8:	e000      	b.n	22cec <write_cb+0x26>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   22cea:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   22cec:	68b7      	ldr	r7, [r6, #8]
   22cee:	9301      	str	r3, [sp, #4]
   22cf0:	8a63      	ldrh	r3, [r4, #18]
   22cf2:	9300      	str	r3, [sp, #0]
   22cf4:	8a23      	ldrh	r3, [r4, #16]
   22cf6:	68e2      	ldr	r2, [r4, #12]
   22cf8:	4631      	mov	r1, r6
   22cfa:	6820      	ldr	r0, [r4, #0]
   22cfc:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   22cfe:	2800      	cmp	r0, #0
   22d00:	db02      	blt.n	22d08 <write_cb+0x42>
   22d02:	8a23      	ldrh	r3, [r4, #16]
   22d04:	4298      	cmp	r0, r3
   22d06:	d007      	beq.n	22d18 <write_cb+0x52>
		data->err = err_to_att(write);
   22d08:	f7ff fdc1 	bl	2288e <err_to_att>
   22d0c:	7520      	strb	r0, [r4, #20]
}
   22d0e:	4628      	mov	r0, r5
   22d10:	b003      	add	sp, #12
   22d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   22d14:	2304      	movs	r3, #4
   22d16:	e7e9      	b.n	22cec <write_cb+0x26>
	data->err = 0U;
   22d18:	2300      	movs	r3, #0
   22d1a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   22d1c:	2501      	movs	r5, #1
   22d1e:	e7f6      	b.n	22d0e <write_cb+0x48>
		return BT_GATT_ITER_STOP;
   22d20:	2500      	movs	r5, #0
   22d22:	e7f4      	b.n	22d0e <write_cb+0x48>

00022d24 <bt_att_chan_send_rsp>:
{
   22d24:	b538      	push	{r3, r4, r5, lr}
   22d26:	4604      	mov	r4, r0
   22d28:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   22d2a:	f7ff ff07 	bl	22b3c <bt_att_chan_send>
	if (err) {
   22d2e:	b900      	cbnz	r0, 22d32 <bt_att_chan_send_rsp+0xe>
}
   22d30:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   22d32:	4629      	mov	r1, r5
   22d34:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   22d38:	f000 ffac 	bl	23c94 <net_buf_put>
}
   22d3c:	e7f8      	b.n	22d30 <bt_att_chan_send_rsp+0xc>

00022d3e <att_chan_read>:
{
   22d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d42:	b085      	sub	sp, #20
   22d44:	4680      	mov	r8, r0
   22d46:	4689      	mov	r9, r1
   22d48:	9202      	str	r2, [sp, #8]
   22d4a:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   22d4c:	6881      	ldr	r1, [r0, #8]
   22d4e:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   22d50:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   22d54:	4613      	mov	r3, r2
	size_t bytes = 0;
   22d56:	2200      	movs	r2, #0
	while (buf) {
   22d58:	b11b      	cbz	r3, 22d62 <att_chan_read+0x24>
		bytes += buf->len;
   22d5a:	8999      	ldrh	r1, [r3, #12]
   22d5c:	440a      	add	r2, r1
		buf = buf->frags;
   22d5e:	681b      	ldr	r3, [r3, #0]
   22d60:	e7fa      	b.n	22d58 <att_chan_read+0x1a>
   22d62:	4290      	cmp	r0, r2
   22d64:	d804      	bhi.n	22d70 <att_chan_read+0x32>
		return 0;
   22d66:	2400      	movs	r4, #0
}
   22d68:	4620      	mov	r0, r4
   22d6a:	b005      	add	sp, #20
   22d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   22d70:	9802      	ldr	r0, [sp, #8]
   22d72:	f000 ffc6 	bl	23d02 <net_buf_frag_last>
   22d76:	4607      	mov	r7, r0
	size_t len, total = 0;
   22d78:	f04f 0a00 	mov.w	sl, #0
   22d7c:	e083      	b.n	22e86 <att_chan_read+0x148>
		bytes += buf->len;
   22d7e:	8999      	ldrh	r1, [r3, #12]
   22d80:	440a      	add	r2, r1
		buf = buf->frags;
   22d82:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22d84:	2b00      	cmp	r3, #0
   22d86:	d1fa      	bne.n	22d7e <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22d88:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   22d8a:	f107 0608 	add.w	r6, r7, #8
   22d8e:	4630      	mov	r0, r6
   22d90:	f001 f814 	bl	23dbc <net_buf_simple_tailroom>
   22d94:	4284      	cmp	r4, r0
   22d96:	d32c      	bcc.n	22df2 <att_chan_read+0xb4>
   22d98:	4630      	mov	r0, r6
   22d9a:	f001 f80f 	bl	23dbc <net_buf_simple_tailroom>
   22d9e:	4606      	mov	r6, r0
		if (!len) {
   22da0:	2e00      	cmp	r6, #0
   22da2:	d032      	beq.n	22e0a <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   22da4:	f8d9 4004 	ldr.w	r4, [r9, #4]
   22da8:	68b9      	ldr	r1, [r7, #8]
   22daa:	89ba      	ldrh	r2, [r7, #12]
   22dac:	9500      	str	r5, [sp, #0]
   22dae:	b2b3      	uxth	r3, r6
   22db0:	440a      	add	r2, r1
   22db2:	4649      	mov	r1, r9
   22db4:	9803      	ldr	r0, [sp, #12]
   22db6:	47a0      	blx	r4
		if (read < 0) {
   22db8:	1e04      	subs	r4, r0, #0
   22dba:	db5a      	blt.n	22e72 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   22dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22dbe:	b12b      	cbz	r3, 22dcc <att_chan_read+0x8e>
   22dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22dc2:	4621      	mov	r1, r4
   22dc4:	4638      	mov	r0, r7
   22dc6:	4798      	blx	r3
   22dc8:	2800      	cmp	r0, #0
   22dca:	d061      	beq.n	22e90 <att_chan_read+0x152>
		net_buf_add(frag, read);
   22dcc:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   22dce:	4621      	mov	r1, r4
   22dd0:	f107 0008 	add.w	r0, r7, #8
   22dd4:	f000 ffb5 	bl	23d42 <net_buf_simple_add>
		total += read;
   22dd8:	44a2      	add	sl, r4
		offset += read;
   22dda:	4425      	add	r5, r4
   22ddc:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   22dde:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   22de2:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   22de4:	2200      	movs	r2, #0
	while (buf) {
   22de6:	2b00      	cmp	r3, #0
   22de8:	d049      	beq.n	22e7e <att_chan_read+0x140>
		bytes += buf->len;
   22dea:	8999      	ldrh	r1, [r3, #12]
   22dec:	440a      	add	r2, r1
		buf = buf->frags;
   22dee:	681b      	ldr	r3, [r3, #0]
   22df0:	e7f9      	b.n	22de6 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22df2:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   22df6:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   22df8:	2200      	movs	r2, #0
	while (buf) {
   22dfa:	e002      	b.n	22e02 <att_chan_read+0xc4>
		bytes += buf->len;
   22dfc:	8999      	ldrh	r1, [r3, #12]
   22dfe:	440a      	add	r2, r1
		buf = buf->frags;
   22e00:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22e02:	2b00      	cmp	r3, #0
   22e04:	d1fa      	bne.n	22dfc <att_chan_read+0xbe>
   22e06:	1ab6      	subs	r6, r6, r2
   22e08:	e7ca      	b.n	22da0 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   22e0a:	9b02      	ldr	r3, [sp, #8]
   22e0c:	7998      	ldrb	r0, [r3, #6]
   22e0e:	f7f6 fd53 	bl	198b8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   22e12:	2200      	movs	r2, #0
   22e14:	2300      	movs	r3, #0
   22e16:	f000 ff17 	bl	23c48 <net_buf_alloc_fixed>
			if (!frag) {
   22e1a:	4607      	mov	r7, r0
   22e1c:	b150      	cbz	r0, 22e34 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   22e1e:	4601      	mov	r1, r0
   22e20:	f8dd b008 	ldr.w	fp, [sp, #8]
   22e24:	4658      	mov	r0, fp
   22e26:	f000 ff7d 	bl	23d24 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22e2a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   22e2e:	4632      	mov	r2, r6
	while (buf) {
   22e30:	465b      	mov	r3, fp
   22e32:	e004      	b.n	22e3e <att_chan_read+0x100>
				return total;
   22e34:	4654      	mov	r4, sl
   22e36:	e797      	b.n	22d68 <att_chan_read+0x2a>
		bytes += buf->len;
   22e38:	8999      	ldrh	r1, [r3, #12]
   22e3a:	440a      	add	r2, r1
		buf = buf->frags;
   22e3c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22e3e:	2b00      	cmp	r3, #0
   22e40:	d1fa      	bne.n	22e38 <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22e42:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   22e44:	f107 0b08 	add.w	fp, r7, #8
   22e48:	4658      	mov	r0, fp
   22e4a:	f000 ffb7 	bl	23dbc <net_buf_simple_tailroom>
   22e4e:	4284      	cmp	r4, r0
   22e50:	d304      	bcc.n	22e5c <att_chan_read+0x11e>
   22e52:	4658      	mov	r0, fp
   22e54:	f000 ffb2 	bl	23dbc <net_buf_simple_tailroom>
   22e58:	4606      	mov	r6, r0
   22e5a:	e7a3      	b.n	22da4 <att_chan_read+0x66>
   22e5c:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   22e60:	9b02      	ldr	r3, [sp, #8]
   22e62:	e002      	b.n	22e6a <att_chan_read+0x12c>
		bytes += buf->len;
   22e64:	899a      	ldrh	r2, [r3, #12]
   22e66:	4416      	add	r6, r2
		buf = buf->frags;
   22e68:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22e6a:	2b00      	cmp	r3, #0
   22e6c:	d1fa      	bne.n	22e64 <att_chan_read+0x126>
   22e6e:	1b8e      	subs	r6, r1, r6
   22e70:	e798      	b.n	22da4 <att_chan_read+0x66>
			if (total) {
   22e72:	f1ba 0f00 	cmp.w	sl, #0
   22e76:	f43f af77 	beq.w	22d68 <att_chan_read+0x2a>
				return total;
   22e7a:	4654      	mov	r4, sl
   22e7c:	e774      	b.n	22d68 <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   22e7e:	4290      	cmp	r0, r2
   22e80:	d906      	bls.n	22e90 <att_chan_read+0x152>
   22e82:	45b3      	cmp	fp, r6
   22e84:	d104      	bne.n	22e90 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22e86:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   22e8a:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   22e8c:	2200      	movs	r2, #0
	while (buf) {
   22e8e:	e779      	b.n	22d84 <att_chan_read+0x46>
	return total;
   22e90:	4654      	mov	r4, sl
   22e92:	e769      	b.n	22d68 <att_chan_read+0x2a>

00022e94 <read_cb>:
{
   22e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e96:	b083      	sub	sp, #12
   22e98:	4606      	mov	r6, r0
   22e9a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   22e9c:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   22e9e:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   22ea0:	2300      	movs	r3, #0
   22ea2:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   22ea4:	2215      	movs	r2, #21
   22ea6:	4631      	mov	r1, r6
   22ea8:	f000 fd4f 	bl	2394a <bt_gatt_check_perm>
   22eac:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   22eae:	b118      	cbz	r0, 22eb8 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   22eb0:	2500      	movs	r5, #0
}
   22eb2:	4628      	mov	r0, r5
   22eb4:	b003      	add	sp, #12
   22eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22eb8:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   22eba:	2300      	movs	r3, #0
   22ebc:	9301      	str	r3, [sp, #4]
   22ebe:	9300      	str	r3, [sp, #0]
   22ec0:	88a3      	ldrh	r3, [r4, #4]
   22ec2:	68a2      	ldr	r2, [r4, #8]
   22ec4:	4631      	mov	r1, r6
   22ec6:	4638      	mov	r0, r7
   22ec8:	f7ff ff39 	bl	22d3e <att_chan_read>
	if (ret < 0) {
   22ecc:	2800      	cmp	r0, #0
   22ece:	db01      	blt.n	22ed4 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   22ed0:	2501      	movs	r5, #1
   22ed2:	e7ee      	b.n	22eb2 <read_cb+0x1e>
		data->err = err_to_att(ret);
   22ed4:	f7ff fcdb 	bl	2288e <err_to_att>
   22ed8:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   22eda:	e7ea      	b.n	22eb2 <read_cb+0x1e>

00022edc <find_info_cb>:
{
   22edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ee0:	4606      	mov	r6, r0
   22ee2:	460f      	mov	r7, r1
   22ee4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   22ee6:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   22eea:	6893      	ldr	r3, [r2, #8]
   22eec:	b14b      	cbz	r3, 22f02 <find_info_cb+0x26>
	switch (data->rsp->format) {
   22eee:	68a3      	ldr	r3, [r4, #8]
   22ef0:	781d      	ldrb	r5, [r3, #0]
   22ef2:	2d01      	cmp	r5, #1
   22ef4:	d013      	beq.n	22f1e <find_info_cb+0x42>
   22ef6:	2d02      	cmp	r5, #2
   22ef8:	d02d      	beq.n	22f56 <find_info_cb+0x7a>
   22efa:	2500      	movs	r5, #0
}
   22efc:	4628      	mov	r0, r5
   22efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   22f02:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   22f04:	2101      	movs	r1, #1
   22f06:	3008      	adds	r0, #8
   22f08:	f000 ff1b 	bl	23d42 <net_buf_simple_add>
   22f0c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   22f0e:	6833      	ldr	r3, [r6, #0]
   22f10:	781b      	ldrb	r3, [r3, #0]
   22f12:	b913      	cbnz	r3, 22f1a <find_info_cb+0x3e>
   22f14:	2301      	movs	r3, #1
   22f16:	7003      	strb	r3, [r0, #0]
   22f18:	e7e9      	b.n	22eee <find_info_cb+0x12>
   22f1a:	2302      	movs	r3, #2
   22f1c:	e7fb      	b.n	22f16 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   22f1e:	6833      	ldr	r3, [r6, #0]
   22f20:	f893 9000 	ldrb.w	r9, [r3]
   22f24:	f1b9 0f00 	cmp.w	r9, #0
   22f28:	d001      	beq.n	22f2e <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   22f2a:	2500      	movs	r5, #0
   22f2c:	e7e6      	b.n	22efc <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   22f2e:	6860      	ldr	r0, [r4, #4]
   22f30:	2104      	movs	r1, #4
   22f32:	3008      	adds	r0, #8
   22f34:	f000 ff05 	bl	23d42 <net_buf_simple_add>
   22f38:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   22f3a:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   22f3c:	6832      	ldr	r2, [r6, #0]
   22f3e:	68e3      	ldr	r3, [r4, #12]
   22f40:	8852      	ldrh	r2, [r2, #2]
   22f42:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   22f44:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   22f48:	6862      	ldr	r2, [r4, #4]
   22f4a:	8992      	ldrh	r2, [r2, #12]
   22f4c:	1a9b      	subs	r3, r3, r2
   22f4e:	2b04      	cmp	r3, #4
   22f50:	d8d4      	bhi.n	22efc <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   22f52:	464d      	mov	r5, r9
   22f54:	e7d2      	b.n	22efc <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   22f56:	6833      	ldr	r3, [r6, #0]
   22f58:	781b      	ldrb	r3, [r3, #0]
   22f5a:	2b02      	cmp	r3, #2
   22f5c:	d001      	beq.n	22f62 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   22f5e:	2500      	movs	r5, #0
   22f60:	e7cc      	b.n	22efc <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   22f62:	6860      	ldr	r0, [r4, #4]
   22f64:	2112      	movs	r1, #18
   22f66:	3008      	adds	r0, #8
   22f68:	f000 feeb 	bl	23d42 <net_buf_simple_add>
   22f6c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   22f6e:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   22f70:	68e2      	ldr	r2, [r4, #12]
   22f72:	6833      	ldr	r3, [r6, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22f74:	f853 5f01 	ldr.w	r5, [r3, #1]!
   22f78:	6858      	ldr	r0, [r3, #4]
   22f7a:	6899      	ldr	r1, [r3, #8]
   22f7c:	68db      	ldr	r3, [r3, #12]
   22f7e:	f8c2 5002 	str.w	r5, [r2, #2]
   22f82:	f8c2 0006 	str.w	r0, [r2, #6]
   22f86:	f8c2 100a 	str.w	r1, [r2, #10]
   22f8a:	f8c2 300e 	str.w	r3, [r2, #14]
		if (chan->chan.tx.mtu - data->buf->len >
   22f8e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   22f92:	6862      	ldr	r2, [r4, #4]
   22f94:	8992      	ldrh	r2, [r2, #12]
   22f96:	1a9b      	subs	r3, r3, r2
   22f98:	2b12      	cmp	r3, #18
   22f9a:	d801      	bhi.n	22fa0 <find_info_cb+0xc4>
	return BT_GATT_ITER_STOP;
   22f9c:	2500      	movs	r5, #0
   22f9e:	e7ad      	b.n	22efc <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   22fa0:	2501      	movs	r5, #1
   22fa2:	e7ab      	b.n	22efc <find_info_cb+0x20>

00022fa4 <att_chan_mtu_updated>:
{
   22fa4:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   22fa6:	6806      	ldr	r6, [r0, #0]
	return list->head;
   22fa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22faa:	b15c      	cbz	r4, 22fc4 <att_chan_mtu_updated+0x20>
   22fac:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   22fb0:	d00c      	beq.n	22fcc <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22fb2:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   22fb6:	d006      	beq.n	22fc6 <att_chan_mtu_updated+0x22>
	return node->next;
   22fb8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   22fbc:	b11b      	cbz	r3, 22fc6 <att_chan_mtu_updated+0x22>
   22fbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   22fc2:	e000      	b.n	22fc6 <att_chan_mtu_updated+0x22>
   22fc4:	4623      	mov	r3, r4
   22fc6:	2200      	movs	r2, #0
   22fc8:	4611      	mov	r1, r2
   22fca:	e004      	b.n	22fd6 <att_chan_mtu_updated+0x32>
   22fcc:	4623      	mov	r3, r4
   22fce:	e7fa      	b.n	22fc6 <att_chan_mtu_updated+0x22>
   22fd0:	461d      	mov	r5, r3
   22fd2:	461c      	mov	r4, r3
   22fd4:	462b      	mov	r3, r5
   22fd6:	b1bc      	cbz	r4, 23008 <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   22fd8:	4284      	cmp	r4, r0
   22fda:	d009      	beq.n	22ff0 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   22fdc:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   22fe0:	42a9      	cmp	r1, r5
   22fe2:	bf38      	it	cc
   22fe4:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   22fe6:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   22fea:	42a2      	cmp	r2, r4
   22fec:	bf38      	it	cc
   22fee:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22ff0:	2b00      	cmp	r3, #0
   22ff2:	d0ed      	beq.n	22fd0 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22ff4:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   22ff8:	d0eb      	beq.n	22fd2 <att_chan_mtu_updated+0x2e>
	return node->next;
   22ffa:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   22ffe:	2d00      	cmp	r5, #0
   23000:	d0e7      	beq.n	22fd2 <att_chan_mtu_updated+0x2e>
   23002:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   23006:	e7e4      	b.n	22fd2 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   23008:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2300c:	428b      	cmp	r3, r1
   2300e:	d803      	bhi.n	23018 <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   23010:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   23014:	4294      	cmp	r4, r2
   23016:	d90a      	bls.n	2302e <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   23018:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2301c:	4282      	cmp	r2, r0
   2301e:	bf38      	it	cc
   23020:	4602      	movcc	r2, r0
   23022:	4299      	cmp	r1, r3
   23024:	bf38      	it	cc
   23026:	4619      	movcc	r1, r3
   23028:	6830      	ldr	r0, [r6, #0]
   2302a:	f7f6 fba3 	bl	19774 <bt_gatt_att_max_mtu_changed>
}
   2302e:	bd70      	pop	{r4, r5, r6, pc}

00023030 <att_get_fixed_chan>:
{
   23030:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   23032:	2104      	movs	r1, #4
   23034:	f7ff fbc1 	bl	227ba <bt_l2cap_le_lookup_tx_cid>
}
   23038:	3808      	subs	r0, #8
   2303a:	bd08      	pop	{r3, pc}

0002303c <att_write_cmd>:
{
   2303c:	b530      	push	{r4, r5, lr}
   2303e:	b085      	sub	sp, #20
   23040:	4605      	mov	r5, r0
   23042:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   23044:	f101 0008 	add.w	r0, r1, #8
   23048:	f000 feac 	bl	23da4 <net_buf_simple_pull_le16>
   2304c:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2304e:	68a2      	ldr	r2, [r4, #8]
   23050:	89a1      	ldrh	r1, [r4, #12]
   23052:	9102      	str	r1, [sp, #8]
   23054:	9201      	str	r2, [sp, #4]
   23056:	2100      	movs	r1, #0
   23058:	9100      	str	r1, [sp, #0]
   2305a:	460a      	mov	r2, r1
   2305c:	4628      	mov	r0, r5
   2305e:	f7f5 f9b1 	bl	183c4 <att_write_rsp>
}
   23062:	b005      	add	sp, #20
   23064:	bd30      	pop	{r4, r5, pc}

00023066 <att_write_req>:
{
   23066:	b530      	push	{r4, r5, lr}
   23068:	b085      	sub	sp, #20
   2306a:	4605      	mov	r5, r0
   2306c:	460c      	mov	r4, r1
   2306e:	f101 0008 	add.w	r0, r1, #8
   23072:	f000 fe97 	bl	23da4 <net_buf_simple_pull_le16>
   23076:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   23078:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2307a:	89a1      	ldrh	r1, [r4, #12]
   2307c:	9102      	str	r1, [sp, #8]
   2307e:	9201      	str	r2, [sp, #4]
   23080:	2200      	movs	r2, #0
   23082:	9200      	str	r2, [sp, #0]
   23084:	2213      	movs	r2, #19
   23086:	2112      	movs	r1, #18
   23088:	4628      	mov	r0, r5
   2308a:	f7f5 f99b 	bl	183c4 <att_write_rsp>
}
   2308e:	b005      	add	sp, #20
   23090:	bd30      	pop	{r4, r5, pc}

00023092 <att_read_group_req>:
{
   23092:	b5f0      	push	{r4, r5, r6, r7, lr}
   23094:	b089      	sub	sp, #36	; 0x24
   23096:	4605      	mov	r5, r0
   23098:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   2309a:	7b0c      	ldrb	r4, [r1, #12]
   2309c:	3c04      	subs	r4, #4
   2309e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   230a0:	2c02      	cmp	r4, #2
   230a2:	d001      	beq.n	230a8 <att_read_group_req+0x16>
   230a4:	2c10      	cmp	r4, #16
   230a6:	d142      	bne.n	2312e <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   230a8:	2104      	movs	r1, #4
   230aa:	3008      	adds	r0, #8
   230ac:	f000 fe6a 	bl	23d84 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   230b0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   230b2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   230b4:	4622      	mov	r2, r4
   230b6:	1d01      	adds	r1, r0, #4
   230b8:	a801      	add	r0, sp, #4
   230ba:	f7fe ff4c 	bl	21f56 <bt_uuid_create>
   230be:	b3c8      	cbz	r0, 23134 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   230c0:	f10d 0216 	add.w	r2, sp, #22
   230c4:	4639      	mov	r1, r7
   230c6:	4630      	mov	r0, r6
   230c8:	f7ff fbd2 	bl	22870 <range_is_valid>
   230cc:	b1f0      	cbz	r0, 2310c <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   230ce:	2300      	movs	r3, #0
   230d0:	f88d 3018 	strb.w	r3, [sp, #24]
   230d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   230d8:	f8ad 301a 	strh.w	r3, [sp, #26]
   230dc:	a906      	add	r1, sp, #24
   230de:	a801      	add	r0, sp, #4
   230e0:	f7fe ff1b 	bl	21f1a <bt_uuid_cmp>
   230e4:	b158      	cbz	r0, 230fe <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   230e6:	2300      	movs	r3, #0
   230e8:	f88d 301c 	strb.w	r3, [sp, #28]
   230ec:	f642 0301 	movw	r3, #10241	; 0x2801
   230f0:	f8ad 301e 	strh.w	r3, [sp, #30]
   230f4:	a907      	add	r1, sp, #28
   230f6:	a801      	add	r0, sp, #4
   230f8:	f7fe ff0f 	bl	21f1a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   230fc:	b978      	cbnz	r0, 2311e <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   230fe:	463b      	mov	r3, r7
   23100:	4632      	mov	r2, r6
   23102:	a901      	add	r1, sp, #4
   23104:	4628      	mov	r0, r5
   23106:	f7f5 fa15 	bl	18534 <att_read_group_rsp>
   2310a:	e011      	b.n	23130 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2310c:	2301      	movs	r3, #1
   2310e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23112:	2110      	movs	r1, #16
   23114:	4628      	mov	r0, r5
   23116:	f7f5 f85f 	bl	181d8 <send_err_rsp>
		return 0;
   2311a:	2000      	movs	r0, #0
   2311c:	e008      	b.n	23130 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2311e:	2310      	movs	r3, #16
   23120:	4632      	mov	r2, r6
   23122:	4619      	mov	r1, r3
   23124:	4628      	mov	r0, r5
   23126:	f7f5 f857 	bl	181d8 <send_err_rsp>
		return 0;
   2312a:	2000      	movs	r0, #0
   2312c:	e000      	b.n	23130 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   2312e:	2004      	movs	r0, #4
}
   23130:	b009      	add	sp, #36	; 0x24
   23132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   23134:	200e      	movs	r0, #14
   23136:	e7fb      	b.n	23130 <att_read_group_req+0x9e>

00023138 <att_read_blob_req>:
{
   23138:	b500      	push	{lr}
   2313a:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2313c:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   2313e:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   23140:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   23142:	9200      	str	r2, [sp, #0]
   23144:	220d      	movs	r2, #13
   23146:	210c      	movs	r1, #12
   23148:	f7f5 fa86 	bl	18658 <att_read_rsp>
}
   2314c:	b003      	add	sp, #12
   2314e:	f85d fb04 	ldr.w	pc, [sp], #4

00023152 <att_read_req>:
{
   23152:	b500      	push	{lr}
   23154:	b083      	sub	sp, #12
	req = (void *)buf->data;
   23156:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   23158:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2315a:	2200      	movs	r2, #0
   2315c:	9200      	str	r2, [sp, #0]
   2315e:	220b      	movs	r2, #11
   23160:	210a      	movs	r1, #10
   23162:	f7f5 fa79 	bl	18658 <att_read_rsp>
}
   23166:	b003      	add	sp, #12
   23168:	f85d fb04 	ldr.w	pc, [sp], #4

0002316c <att_read_type_req>:
{
   2316c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2316e:	b087      	sub	sp, #28
   23170:	4605      	mov	r5, r0
   23172:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   23174:	7b0c      	ldrb	r4, [r1, #12]
   23176:	3c04      	subs	r4, #4
   23178:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2317a:	2c02      	cmp	r4, #2
   2317c:	d001      	beq.n	23182 <att_read_type_req+0x16>
   2317e:	2c10      	cmp	r4, #16
   23180:	d123      	bne.n	231ca <att_read_type_req+0x5e>
   23182:	2104      	movs	r1, #4
   23184:	3008      	adds	r0, #8
   23186:	f000 fdfd 	bl	23d84 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2318a:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2318c:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2318e:	4622      	mov	r2, r4
   23190:	1d01      	adds	r1, r0, #4
   23192:	a801      	add	r0, sp, #4
   23194:	f7fe fedf 	bl	21f56 <bt_uuid_create>
   23198:	b1c8      	cbz	r0, 231ce <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2319a:	f10d 0216 	add.w	r2, sp, #22
   2319e:	4639      	mov	r1, r7
   231a0:	4630      	mov	r0, r6
   231a2:	f7ff fb65 	bl	22870 <range_is_valid>
   231a6:	b138      	cbz	r0, 231b8 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   231a8:	463b      	mov	r3, r7
   231aa:	4632      	mov	r2, r6
   231ac:	a901      	add	r1, sp, #4
   231ae:	4628      	mov	r0, r5
   231b0:	f7f5 faa2 	bl	186f8 <att_read_type_rsp>
}
   231b4:	b007      	add	sp, #28
   231b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   231b8:	2301      	movs	r3, #1
   231ba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   231be:	2108      	movs	r1, #8
   231c0:	4628      	mov	r0, r5
   231c2:	f7f5 f809 	bl	181d8 <send_err_rsp>
		return 0;
   231c6:	2000      	movs	r0, #0
   231c8:	e7f4      	b.n	231b4 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   231ca:	2004      	movs	r0, #4
   231cc:	e7f2      	b.n	231b4 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   231ce:	200e      	movs	r0, #14
   231d0:	e7f0      	b.n	231b4 <att_read_type_req+0x48>

000231d2 <att_find_type_req>:
{
   231d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   231d6:	b087      	sub	sp, #28
   231d8:	4607      	mov	r7, r0
   231da:	460c      	mov	r4, r1
   231dc:	2106      	movs	r1, #6
   231de:	f104 0008 	add.w	r0, r4, #8
   231e2:	f000 fdcf 	bl	23d84 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   231e6:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   231e8:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   231ea:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   231ee:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   231f2:	f10d 020e 	add.w	r2, sp, #14
   231f6:	4631      	mov	r1, r6
   231f8:	4628      	mov	r0, r5
   231fa:	f7ff fb39 	bl	22870 <range_is_valid>
   231fe:	b1d0      	cbz	r0, 23236 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   23200:	2300      	movs	r3, #0
   23202:	f88d 3010 	strb.w	r3, [sp, #16]
   23206:	f8ad 8012 	strh.w	r8, [sp, #18]
   2320a:	f88d 3014 	strb.w	r3, [sp, #20]
   2320e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   23212:	f8ad 3016 	strh.w	r3, [sp, #22]
   23216:	a905      	add	r1, sp, #20
   23218:	a804      	add	r0, sp, #16
   2321a:	f7fe fe7e 	bl	21f1a <bt_uuid_cmp>
   2321e:	b998      	cbnz	r0, 23248 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   23220:	7b23      	ldrb	r3, [r4, #12]
   23222:	9300      	str	r3, [sp, #0]
   23224:	464b      	mov	r3, r9
   23226:	4632      	mov	r2, r6
   23228:	4629      	mov	r1, r5
   2322a:	4638      	mov	r0, r7
   2322c:	f7f5 faae 	bl	1878c <att_find_type_rsp>
}
   23230:	b007      	add	sp, #28
   23232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   23236:	2301      	movs	r3, #1
   23238:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2323c:	2106      	movs	r1, #6
   2323e:	4638      	mov	r0, r7
   23240:	f7f4 ffca 	bl	181d8 <send_err_rsp>
		return 0;
   23244:	2000      	movs	r0, #0
   23246:	e7f3      	b.n	23230 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   23248:	230a      	movs	r3, #10
   2324a:	462a      	mov	r2, r5
   2324c:	2106      	movs	r1, #6
   2324e:	4638      	mov	r0, r7
   23250:	f7f4 ffc2 	bl	181d8 <send_err_rsp>
		return 0;
   23254:	2000      	movs	r0, #0
   23256:	e7eb      	b.n	23230 <att_find_type_req+0x5e>

00023258 <att_find_info_req>:
{
   23258:	b570      	push	{r4, r5, r6, lr}
   2325a:	b082      	sub	sp, #8
   2325c:	4604      	mov	r4, r0
	req = (void *)buf->data;
   2325e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   23260:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   23262:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   23264:	f10d 0206 	add.w	r2, sp, #6
   23268:	4631      	mov	r1, r6
   2326a:	4628      	mov	r0, r5
   2326c:	f7ff fb00 	bl	22870 <range_is_valid>
   23270:	b130      	cbz	r0, 23280 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   23272:	4632      	mov	r2, r6
   23274:	4629      	mov	r1, r5
   23276:	4620      	mov	r0, r4
   23278:	f7f5 facc 	bl	18814 <att_find_info_rsp>
}
   2327c:	b002      	add	sp, #8
   2327e:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   23280:	2301      	movs	r3, #1
   23282:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   23286:	2104      	movs	r1, #4
   23288:	4620      	mov	r0, r4
   2328a:	f7f4 ffa5 	bl	181d8 <send_err_rsp>
		return 0;
   2328e:	2000      	movs	r0, #0
   23290:	e7f4      	b.n	2327c <att_find_info_req+0x24>

00023292 <bt_att_init>:
{
   23292:	b508      	push	{r3, lr}
	bt_gatt_init();
   23294:	f7f5 fe56 	bl	18f44 <bt_gatt_init>
}
   23298:	bd08      	pop	{r3, pc}

0002329a <att_confirm>:
{
   2329a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2329c:	2300      	movs	r3, #0
   2329e:	898a      	ldrh	r2, [r1, #12]
   232a0:	6889      	ldr	r1, [r1, #8]
   232a2:	f7f5 fb55 	bl	18950 <att_handle_rsp>
}
   232a6:	bd08      	pop	{r3, pc}

000232a8 <att_chan_detach>:
{
   232a8:	b510      	push	{r4, lr}
   232aa:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   232ac:	6800      	ldr	r0, [r0, #0]
   232ae:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   232b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   232b4:	2100      	movs	r1, #0
   232b6:	b1e3      	cbz	r3, 232f2 <att_chan_detach+0x4a>
   232b8:	4293      	cmp	r3, r2
   232ba:	d002      	beq.n	232c2 <att_chan_detach+0x1a>
   232bc:	4619      	mov	r1, r3
   232be:	681b      	ldr	r3, [r3, #0]
   232c0:	e7f9      	b.n	232b6 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   232c2:	b149      	cbz	r1, 232d8 <att_chan_detach+0x30>
	return node->next;
   232c4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   232c8:	600b      	str	r3, [r1, #0]
	return list->tail;
   232ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   232cc:	4293      	cmp	r3, r2
   232ce:	d00b      	beq.n	232e8 <att_chan_detach+0x40>
	parent->next = child;
   232d0:	2300      	movs	r3, #0
   232d2:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   232d6:	e00c      	b.n	232f2 <att_chan_detach+0x4a>
	return node->next;
   232d8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   232dc:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   232de:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   232e0:	4291      	cmp	r1, r2
   232e2:	d1f5      	bne.n	232d0 <att_chan_detach+0x28>
	list->tail = node;
   232e4:	6283      	str	r3, [r0, #40]	; 0x28
}
   232e6:	e7f3      	b.n	232d0 <att_chan_detach+0x28>
	list->tail = node;
   232e8:	6281      	str	r1, [r0, #40]	; 0x28
}
   232ea:	e7f1      	b.n	232d0 <att_chan_detach+0x28>
		net_buf_unref(buf);
   232ec:	4618      	mov	r0, r3
   232ee:	f000 fcde 	bl	23cae <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   232f2:	2200      	movs	r2, #0
   232f4:	2300      	movs	r3, #0
   232f6:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   232fa:	f000 fcac 	bl	23c56 <net_buf_get>
   232fe:	4603      	mov	r3, r0
   23300:	2800      	cmp	r0, #0
   23302:	d1f3      	bne.n	232ec <att_chan_detach+0x44>
	if (chan->req) {
   23304:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   23308:	b12b      	cbz	r3, 23316 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2330a:	230e      	movs	r3, #14
   2330c:	2200      	movs	r2, #0
   2330e:	4611      	mov	r1, r2
   23310:	4620      	mov	r0, r4
   23312:	f7f5 fb1d 	bl	18950 <att_handle_rsp>
	chan->att = NULL;
   23316:	2300      	movs	r3, #0
   23318:	6023      	str	r3, [r4, #0]
}
   2331a:	bd10      	pop	{r4, pc}

0002331c <bt_att_disconnected>:
{
   2331c:	b538      	push	{r3, r4, r5, lr}
   2331e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   23320:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   23324:	b125      	cbz	r5, 23330 <bt_att_disconnected+0x14>
   23326:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   23328:	f7ff ffbe 	bl	232a8 <att_chan_detach>
	return list->head;
   2332c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   2332e:	b103      	cbz	r3, 23332 <bt_att_disconnected+0x16>
}
   23330:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   23332:	4628      	mov	r0, r5
   23334:	f7f5 fb58 	bl	189e8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   23338:	6820      	ldr	r0, [r4, #0]
   2333a:	f7f6 fa67 	bl	1980c <bt_gatt_disconnected>
   2333e:	e7f7      	b.n	23330 <bt_att_disconnected+0x14>

00023340 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   23340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23344:	b082      	sub	sp, #8
   23346:	4607      	mov	r7, r0
   23348:	460d      	mov	r5, r1
   2334a:	4614      	mov	r4, r2
   2334c:	461e      	mov	r6, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2334e:	f7f4 fbd7 	bl	17b00 <att_get>
	if (!att) {
   23352:	b158      	cbz	r0, 2336c <bt_att_send+0x2c>
   23354:	4680      	mov	r8, r0
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   23356:	b17c      	cbz	r4, 23378 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   23358:	9600      	str	r6, [sp, #0]
   2335a:	4623      	mov	r3, r4
   2335c:	462a      	mov	r2, r5
   2335e:	2104      	movs	r1, #4
   23360:	4638      	mov	r0, r7
   23362:	f7ff f9e8 	bl	22736 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   23366:	b002      	add	sp, #8
   23368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2336c:	4628      	mov	r0, r5
   2336e:	f000 fc9e 	bl	23cae <net_buf_unref>
		return -ENOTCONN;
   23372:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   23376:	e7f6      	b.n	23366 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   23378:	4629      	mov	r1, r5
   2337a:	300c      	adds	r0, #12
   2337c:	f000 fc8a 	bl	23c94 <net_buf_put>
	att_send_process(att);
   23380:	4640      	mov	r0, r8
   23382:	f7ff fc64 	bl	22c4e <att_send_process>
	return 0;
   23386:	2000      	movs	r0, #0
   23388:	e7ed      	b.n	23366 <bt_att_send+0x26>

0002338a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2338a:	b510      	push	{r4, lr}
   2338c:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2338e:	f7f4 fbb7 	bl	17b00 <att_get>
	if (!att) {
   23392:	b170      	cbz	r0, 233b2 <bt_att_req_send+0x28>
   23394:	4603      	mov	r3, r0
	parent->next = child;
   23396:	2200      	movs	r2, #0
   23398:	6022      	str	r2, [r4, #0]
	return list->tail;
   2339a:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2339c:	b132      	cbz	r2, 233ac <bt_att_req_send+0x22>
	parent->next = child;
   2339e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   233a0:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   233a2:	4618      	mov	r0, r3
   233a4:	f7ff fb8a 	bl	22abc <att_req_send_process>

	return 0;
   233a8:	2000      	movs	r0, #0
}
   233aa:	bd10      	pop	{r4, pc}
   233ac:	6084      	str	r4, [r0, #8]
	list->head = node;
   233ae:	6044      	str	r4, [r0, #4]
}
   233b0:	e7f7      	b.n	233a2 <bt_att_req_send+0x18>
		return -ENOTCONN;
   233b2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   233b6:	e7f8      	b.n	233aa <bt_att_req_send+0x20>

000233b8 <update_range>:
{
   233b8:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   233ba:	8804      	ldrh	r4, [r0, #0]
   233bc:	42a2      	cmp	r2, r4
   233be:	d302      	bcc.n	233c6 <update_range+0xe>
   233c0:	880d      	ldrh	r5, [r1, #0]
   233c2:	42ab      	cmp	r3, r5
   233c4:	d908      	bls.n	233d8 <update_range+0x20>
	if (*start > new_start) {
   233c6:	42a2      	cmp	r2, r4
   233c8:	d200      	bcs.n	233cc <update_range+0x14>
		*start = new_start;
   233ca:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   233cc:	880a      	ldrh	r2, [r1, #0]
   233ce:	4293      	cmp	r3, r2
   233d0:	d904      	bls.n	233dc <update_range+0x24>
		*end = new_end;
   233d2:	800b      	strh	r3, [r1, #0]
	return true;
   233d4:	2001      	movs	r0, #1
   233d6:	e002      	b.n	233de <update_range+0x26>
		return false;
   233d8:	2000      	movs	r0, #0
   233da:	e000      	b.n	233de <update_range+0x26>
	return true;
   233dc:	2001      	movs	r0, #1
}
   233de:	bc30      	pop	{r4, r5}
   233e0:	4770      	bx	lr

000233e2 <cf_set_value>:
{
   233e2:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   233e4:	2300      	movs	r3, #0
   233e6:	e001      	b.n	233ec <cf_set_value+0xa>
   233e8:	3301      	adds	r3, #1
   233ea:	b29b      	uxth	r3, r3
   233ec:	2b02      	cmp	r3, #2
   233ee:	d824      	bhi.n	2343a <cf_set_value+0x58>
   233f0:	08dd      	lsrs	r5, r3, #3
   233f2:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   233f6:	d90f      	bls.n	23418 <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   233f8:	1944      	adds	r4, r0, r5
   233fa:	7a24      	ldrb	r4, [r4, #8]
   233fc:	f003 0607 	and.w	r6, r3, #7
   23400:	40f4      	lsrs	r4, r6
   23402:	f014 0f01 	tst.w	r4, #1
   23406:	d0ef      	beq.n	233e8 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   23408:	5d4c      	ldrb	r4, [r1, r5]
   2340a:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   2340e:	f016 0f01 	tst.w	r6, #1
   23412:	d1e9      	bne.n	233e8 <cf_set_value+0x6>
			return false;
   23414:	2000      	movs	r0, #0
   23416:	e013      	b.n	23440 <cf_set_value+0x5e>
   23418:	2300      	movs	r3, #0
   2341a:	e008      	b.n	2342e <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   2341c:	5ccc      	ldrb	r4, [r1, r3]
   2341e:	f004 0407 	and.w	r4, r4, #7
   23422:	18c5      	adds	r5, r0, r3
   23424:	7a2e      	ldrb	r6, [r5, #8]
   23426:	4334      	orrs	r4, r6
   23428:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   2342a:	3301      	adds	r3, #1
   2342c:	b29b      	uxth	r3, r3
   2342e:	4293      	cmp	r3, r2
   23430:	d205      	bcs.n	2343e <cf_set_value+0x5c>
   23432:	2b00      	cmp	r3, #0
   23434:	d0f2      	beq.n	2341c <cf_set_value+0x3a>
	return true;
   23436:	2001      	movs	r0, #1
   23438:	e002      	b.n	23440 <cf_set_value+0x5e>
   2343a:	2300      	movs	r3, #0
   2343c:	e7f7      	b.n	2342e <cf_set_value+0x4c>
   2343e:	2001      	movs	r0, #1
}
   23440:	bc70      	pop	{r4, r5, r6}
   23442:	4770      	bx	lr

00023444 <gatt_ccc_changed>:
{
   23444:	b510      	push	{r4, lr}
   23446:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   23448:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2344a:	460b      	mov	r3, r1
   2344c:	2b00      	cmp	r3, #0
   2344e:	dd07      	ble.n	23460 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   23450:	8953      	ldrh	r3, [r2, #10]
   23452:	4299      	cmp	r1, r3
   23454:	d003      	beq.n	2345e <gatt_ccc_changed+0x1a>
		ccc->value = value;
   23456:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   23458:	68d3      	ldr	r3, [r2, #12]
   2345a:	b103      	cbz	r3, 2345e <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2345c:	4798      	blx	r3
}
   2345e:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   23460:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   23464:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   23468:	8924      	ldrh	r4, [r4, #8]
   2346a:	428c      	cmp	r4, r1
   2346c:	d900      	bls.n	23470 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   2346e:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23470:	3301      	adds	r3, #1
   23472:	e7eb      	b.n	2344c <gatt_ccc_changed+0x8>

00023474 <gatt_indicate_rsp>:
{
   23474:	b510      	push	{r4, lr}
   23476:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   23478:	68a3      	ldr	r3, [r4, #8]
   2347a:	b113      	cbz	r3, 23482 <gatt_indicate_rsp+0xe>
   2347c:	460a      	mov	r2, r1
		params->func(conn, params, err);
   2347e:	4621      	mov	r1, r4
   23480:	4798      	blx	r3
	params->_ref--;
   23482:	7da3      	ldrb	r3, [r4, #22]
   23484:	3b01      	subs	r3, #1
   23486:	b2db      	uxtb	r3, r3
   23488:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2348a:	68e2      	ldr	r2, [r4, #12]
   2348c:	b112      	cbz	r2, 23494 <gatt_indicate_rsp+0x20>
   2348e:	b90b      	cbnz	r3, 23494 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   23490:	4620      	mov	r0, r4
   23492:	4790      	blx	r2
}
   23494:	bd10      	pop	{r4, pc}

00023496 <match_uuid>:
	data->attr = attr;
   23496:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   23498:	8091      	strh	r1, [r2, #4]
}
   2349a:	2000      	movs	r0, #0
   2349c:	4770      	bx	lr

0002349e <gen_hash_m>:
{
   2349e:	b5f0      	push	{r4, r5, r6, r7, lr}
   234a0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   234a2:	6806      	ldr	r6, [r0, #0]
   234a4:	7835      	ldrb	r5, [r6, #0]
   234a6:	2d00      	cmp	r5, #0
   234a8:	d161      	bne.n	2356e <gen_hash_m+0xd0>
   234aa:	4607      	mov	r7, r0
   234ac:	4614      	mov	r4, r2
	switch (u16->val) {
   234ae:	8873      	ldrh	r3, [r6, #2]
   234b0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   234b4:	d019      	beq.n	234ea <gen_hash_m+0x4c>
   234b6:	d913      	bls.n	234e0 <gen_hash_m+0x42>
   234b8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   234bc:	33ff      	adds	r3, #255	; 0xff
   234be:	b29b      	uxth	r3, r3
   234c0:	2b04      	cmp	r3, #4
   234c2:	d85a      	bhi.n	2357a <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   234c4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   234c8:	2202      	movs	r2, #2
   234ca:	f10d 010e 	add.w	r1, sp, #14
   234ce:	4620      	mov	r0, r4
   234d0:	f7fe fbca 	bl	21c68 <tc_cmac_update>
   234d4:	2800      	cmp	r0, #0
   234d6:	d13a      	bne.n	2354e <gen_hash_m+0xb0>
			state->err = -EINVAL;
   234d8:	f06f 0315 	mvn.w	r3, #21
   234dc:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   234de:	e047      	b.n	23570 <gen_hash_m+0xd2>
	switch (u16->val) {
   234e0:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   234e4:	b29b      	uxth	r3, r3
   234e6:	2b03      	cmp	r3, #3
   234e8:	d845      	bhi.n	23576 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   234ea:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   234ee:	2202      	movs	r2, #2
   234f0:	f10d 010e 	add.w	r1, sp, #14
   234f4:	4620      	mov	r0, r4
   234f6:	f7fe fbb7 	bl	21c68 <tc_cmac_update>
   234fa:	b918      	cbnz	r0, 23504 <gen_hash_m+0x66>
			state->err = -EINVAL;
   234fc:	f06f 0315 	mvn.w	r3, #21
   23500:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   23502:	e035      	b.n	23570 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   23504:	8873      	ldrh	r3, [r6, #2]
   23506:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2350a:	2202      	movs	r2, #2
   2350c:	f10d 010e 	add.w	r1, sp, #14
   23510:	4620      	mov	r0, r4
   23512:	f7fe fba9 	bl	21c68 <tc_cmac_update>
   23516:	b180      	cbz	r0, 2353a <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   23518:	687e      	ldr	r6, [r7, #4]
   2351a:	2000      	movs	r0, #0
   2351c:	9000      	str	r0, [sp, #0]
   2351e:	2310      	movs	r3, #16
   23520:	eb0d 0203 	add.w	r2, sp, r3
   23524:	4639      	mov	r1, r7
   23526:	47b0      	blx	r6
		if (len < 0) {
   23528:	1e02      	subs	r2, r0, #0
   2352a:	db0a      	blt.n	23542 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   2352c:	a904      	add	r1, sp, #16
   2352e:	4620      	mov	r0, r4
   23530:	f7fe fb9a 	bl	21c68 <tc_cmac_update>
   23534:	b138      	cbz	r0, 23546 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   23536:	2501      	movs	r5, #1
   23538:	e01a      	b.n	23570 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2353a:	f06f 0315 	mvn.w	r3, #21
   2353e:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   23540:	e016      	b.n	23570 <gen_hash_m+0xd2>
			state->err = len;
   23542:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   23544:	e014      	b.n	23570 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   23546:	f06f 0315 	mvn.w	r3, #21
   2354a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2354c:	e010      	b.n	23570 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   2354e:	8873      	ldrh	r3, [r6, #2]
   23550:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23554:	2202      	movs	r2, #2
   23556:	f10d 010e 	add.w	r1, sp, #14
   2355a:	4620      	mov	r0, r4
   2355c:	f7fe fb84 	bl	21c68 <tc_cmac_update>
   23560:	b108      	cbz	r0, 23566 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   23562:	2501      	movs	r5, #1
   23564:	e004      	b.n	23570 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   23566:	f06f 0315 	mvn.w	r3, #21
   2356a:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2356c:	e000      	b.n	23570 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   2356e:	2501      	movs	r5, #1
}
   23570:	4628      	mov	r0, r5
   23572:	b009      	add	sp, #36	; 0x24
   23574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   23576:	2501      	movs	r5, #1
   23578:	e7fa      	b.n	23570 <gen_hash_m+0xd2>
   2357a:	2501      	movs	r5, #1
   2357c:	e7f8      	b.n	23570 <gen_hash_m+0xd2>

0002357e <find_ccc_cfg>:
{
   2357e:	b5f0      	push	{r4, r5, r6, r7, lr}
   23580:	b083      	sub	sp, #12
   23582:	4607      	mov	r7, r0
   23584:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23586:	2400      	movs	r4, #0
   23588:	b11c      	cbz	r4, 23592 <find_ccc_cfg+0x14>
	return NULL;
   2358a:	2600      	movs	r6, #0
}
   2358c:	4630      	mov	r0, r6
   2358e:	b003      	add	sp, #12
   23590:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   23592:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   23596:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   2359a:	b167      	cbz	r7, 235b6 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   2359c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   235a0:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   235a2:	3201      	adds	r2, #1
   235a4:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   235a8:	4638      	mov	r0, r7
   235aa:	f7ff f818 	bl	225de <bt_conn_is_peer_addr_le>
   235ae:	2800      	cmp	r0, #0
   235b0:	d1ec      	bne.n	2358c <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   235b2:	3401      	adds	r4, #1
   235b4:	e7e8      	b.n	23588 <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   235b6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   235ba:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   235be:	2300      	movs	r3, #0
   235c0:	9300      	str	r3, [sp, #0]
   235c2:	f8cd 3003 	str.w	r3, [sp, #3]
   235c6:	2207      	movs	r2, #7
   235c8:	4669      	mov	r1, sp
   235ca:	3001      	adds	r0, #1
   235cc:	f002 f9f5 	bl	259ba <memcmp>
   235d0:	2800      	cmp	r0, #0
   235d2:	d1ee      	bne.n	235b2 <find_ccc_cfg+0x34>
   235d4:	e7da      	b.n	2358c <find_ccc_cfg+0xe>

000235d6 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   235d6:	2300      	movs	r3, #0
   235d8:	6003      	str	r3, [r0, #0]
   235da:	6043      	str	r3, [r0, #4]
   235dc:	6083      	str	r3, [r0, #8]
}
   235de:	4770      	bx	lr

000235e0 <bt_gatt_clear_sc>:
{
   235e0:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   235e2:	f7f5 faa1 	bl	18b28 <find_sc_cfg>
	if (!cfg) {
   235e6:	b108      	cbz	r0, 235ec <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   235e8:	f7ff fff5 	bl	235d6 <clear_sc_cfg>
}
   235ec:	2000      	movs	r0, #0
   235ee:	bd08      	pop	{r3, pc}

000235f0 <sc_reset>:
   235f0:	2300      	movs	r3, #0
   235f2:	6083      	str	r3, [r0, #8]
}
   235f4:	4770      	bx	lr

000235f6 <sc_restore_rsp>:
{
   235f6:	b538      	push	{r3, r4, r5, lr}
   235f8:	4605      	mov	r5, r0
   235fa:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   235fc:	f7f5 fa6a 	bl	18ad4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   23600:	b188      	cbz	r0, 23626 <sc_restore_rsp+0x30>
   23602:	4603      	mov	r3, r0
   23604:	7a02      	ldrb	r2, [r0, #8]
   23606:	f012 0f01 	tst.w	r2, #1
   2360a:	d00c      	beq.n	23626 <sc_restore_rsp+0x30>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2360c:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2360e:	f3bf 8f5b 	dmb	ish
   23612:	e853 2f00 	ldrex	r2, [r3]
   23616:	f042 0201 	orr.w	r2, r2, #1
   2361a:	e843 2100 	strex	r1, r2, [r3]
   2361e:	2900      	cmp	r1, #0
   23620:	d1f7      	bne.n	23612 <sc_restore_rsp+0x1c>
   23622:	f3bf 8f5b 	dmb	ish
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   23626:	b104      	cbz	r4, 2362a <sc_restore_rsp+0x34>
}
   23628:	bd38      	pop	{r3, r4, r5, pc}
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2362a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2362e:	7a28      	ldrb	r0, [r5, #8]
   23630:	f7f5 fa7a 	bl	18b28 <find_sc_cfg>
		if (sc_cfg) {
   23634:	2800      	cmp	r0, #0
   23636:	d0f7      	beq.n	23628 <sc_restore_rsp+0x32>
			sc_reset(sc_cfg);
   23638:	f7ff ffda 	bl	235f0 <sc_reset>
}
   2363c:	e7f4      	b.n	23628 <sc_restore_rsp+0x32>

0002363e <gatt_foreach_iter>:
	if (handle > end_handle) {
   2363e:	4299      	cmp	r1, r3
   23640:	d822      	bhi.n	23688 <gatt_foreach_iter+0x4a>
{
   23642:	b538      	push	{r3, r4, r5, lr}
   23644:	4605      	mov	r5, r0
   23646:	460c      	mov	r4, r1
	if (handle < start_handle) {
   23648:	4291      	cmp	r1, r2
   2364a:	d31f      	bcc.n	2368c <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2364c:	9b04      	ldr	r3, [sp, #16]
   2364e:	b123      	cbz	r3, 2365a <gatt_foreach_iter+0x1c>
   23650:	6801      	ldr	r1, [r0, #0]
   23652:	4618      	mov	r0, r3
   23654:	f7fe fc61 	bl	21f1a <bt_uuid_cmp>
   23658:	b9d0      	cbnz	r0, 23690 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2365a:	9b05      	ldr	r3, [sp, #20]
   2365c:	b12b      	cbz	r3, 2366a <gatt_foreach_iter+0x2c>
   2365e:	68eb      	ldr	r3, [r5, #12]
   23660:	9a05      	ldr	r2, [sp, #20]
   23662:	4293      	cmp	r3, r2
   23664:	d001      	beq.n	2366a <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   23666:	2001      	movs	r0, #1
   23668:	e011      	b.n	2368e <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2366a:	9b06      	ldr	r3, [sp, #24]
   2366c:	881b      	ldrh	r3, [r3, #0]
   2366e:	3b01      	subs	r3, #1
   23670:	9a06      	ldr	r2, [sp, #24]
   23672:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   23674:	9a08      	ldr	r2, [sp, #32]
   23676:	4621      	mov	r1, r4
   23678:	4628      	mov	r0, r5
   2367a:	9b07      	ldr	r3, [sp, #28]
   2367c:	4798      	blx	r3
	if (!*num_matches) {
   2367e:	9b06      	ldr	r3, [sp, #24]
   23680:	881b      	ldrh	r3, [r3, #0]
   23682:	b923      	cbnz	r3, 2368e <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   23684:	2000      	movs	r0, #0
   23686:	e002      	b.n	2368e <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   23688:	2000      	movs	r0, #0
}
   2368a:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2368c:	2001      	movs	r0, #1
}
   2368e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   23690:	2001      	movs	r0, #1
   23692:	e7fc      	b.n	2368e <gatt_foreach_iter+0x50>

00023694 <gatt_req_alloc>:
{
   23694:	b538      	push	{r3, r4, r5, lr}
   23696:	4605      	mov	r5, r0
   23698:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2369a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2369e:	2100      	movs	r1, #0
   236a0:	f7f5 f928 	bl	188f4 <bt_att_req_alloc>
	if (!req) {
   236a4:	4603      	mov	r3, r0
   236a6:	b108      	cbz	r0, 236ac <gatt_req_alloc+0x18>
	req->func = func;
   236a8:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   236aa:	60c4      	str	r4, [r0, #12]
}
   236ac:	4618      	mov	r0, r3
   236ae:	bd38      	pop	{r3, r4, r5, pc}

000236b0 <clear_ccc_cfg>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   236b0:	2300      	movs	r3, #0
   236b2:	f8c0 3001 	str.w	r3, [r0, #1]
   236b6:	6043      	str	r3, [r0, #4]
	cfg->id = 0U;
   236b8:	7003      	strb	r3, [r0, #0]
	cfg->value = 0U;
   236ba:	8103      	strh	r3, [r0, #8]
}
   236bc:	4770      	bx	lr

000236be <clear_cf_cfg>:
{
   236be:	b082      	sub	sp, #8
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   236c0:	2300      	movs	r3, #0
   236c2:	9300      	str	r3, [sp, #0]
   236c4:	f8cd 3003 	str.w	r3, [sp, #3]
   236c8:	f8c0 3001 	str.w	r3, [r0, #1]
   236cc:	6043      	str	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   236ce:	7203      	strb	r3, [r0, #8]
	atomic_set(cfg->flags, 0);
   236d0:	300c      	adds	r0, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   236d2:	f3bf 8f5b 	dmb	ish
   236d6:	e850 2f00 	ldrex	r2, [r0]
   236da:	e840 3100 	strex	r1, r3, [r0]
   236de:	2900      	cmp	r1, #0
   236e0:	d1f9      	bne.n	236d6 <clear_cf_cfg+0x18>
   236e2:	f3bf 8f5b 	dmb	ish
}
   236e6:	b002      	add	sp, #8
   236e8:	4770      	bx	lr

000236ea <remove_cf_cfg>:
{
   236ea:	b570      	push	{r4, r5, r6, lr}
   236ec:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   236ee:	f7f5 f9f1 	bl	18ad4 <find_cf_cfg>
	if (!cfg) {
   236f2:	b300      	cbz	r0, 23736 <remove_cf_cfg+0x4c>
   236f4:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   236f6:	f104 0688 	add.w	r6, r4, #136	; 0x88
   236fa:	4631      	mov	r1, r6
   236fc:	7a20      	ldrb	r0, [r4, #8]
   236fe:	f7fe fdb4 	bl	2226a <bt_addr_le_is_bonded>
   23702:	b918      	cbnz	r0, 2370c <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   23704:	4628      	mov	r0, r5
   23706:	f7ff ffda 	bl	236be <clear_cf_cfg>
   2370a:	e014      	b.n	23736 <remove_cf_cfg+0x4c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2370c:	6833      	ldr	r3, [r6, #0]
   2370e:	f8c5 3001 	str.w	r3, [r5, #1]
   23712:	88b2      	ldrh	r2, [r6, #4]
   23714:	79b3      	ldrb	r3, [r6, #6]
   23716:	f8a5 2005 	strh.w	r2, [r5, #5]
   2371a:	71eb      	strb	r3, [r5, #7]
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   2371c:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2371e:	f3bf 8f5b 	dmb	ish
   23722:	e855 3f00 	ldrex	r3, [r5]
   23726:	f023 0302 	bic.w	r3, r3, #2
   2372a:	e845 3200 	strex	r2, r3, [r5]
   2372e:	2a00      	cmp	r2, #0
   23730:	d1f7      	bne.n	23722 <remove_cf_cfg+0x38>
   23732:	f3bf 8f5b 	dmb	ish
}
   23736:	bd70      	pop	{r4, r5, r6, pc}

00023738 <sc_ccc_cfg_write>:
{
   23738:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2373a:	2a02      	cmp	r2, #2
   2373c:	d003      	beq.n	23746 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2373e:	f7f5 fa17 	bl	18b70 <sc_clear>
}
   23742:	2002      	movs	r0, #2
   23744:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   23746:	2300      	movs	r3, #0
   23748:	461a      	mov	r2, r3
   2374a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2374e:	7a00      	ldrb	r0, [r0, #8]
   23750:	f7f5 fb3c 	bl	18dcc <sc_save>
   23754:	e7f5      	b.n	23742 <sc_ccc_cfg_write+0xa>

00023756 <bt_gatt_attr_read>:
{
   23756:	b510      	push	{r4, lr}
   23758:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2375c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   23760:	428c      	cmp	r4, r1
   23762:	d30c      	bcc.n	2377e <bt_gatt_attr_read+0x28>
   23764:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   23766:	1a64      	subs	r4, r4, r1
   23768:	42a3      	cmp	r3, r4
   2376a:	bfa8      	it	ge
   2376c:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2376e:	b29c      	uxth	r4, r3
   23770:	4622      	mov	r2, r4
   23772:	9b03      	ldr	r3, [sp, #12]
   23774:	4419      	add	r1, r3
   23776:	f002 f92e 	bl	259d6 <memcpy>
	return len;
   2377a:	4620      	mov	r0, r4
}
   2377c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2377e:	f06f 0006 	mvn.w	r0, #6
   23782:	e7fb      	b.n	2377c <bt_gatt_attr_read+0x26>

00023784 <read_appearance>:
{
   23784:	b510      	push	{r4, lr}
   23786:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   23788:	2400      	movs	r4, #0
   2378a:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2378e:	2402      	movs	r4, #2
   23790:	9402      	str	r4, [sp, #8]
   23792:	f10d 0416 	add.w	r4, sp, #22
   23796:	9401      	str	r4, [sp, #4]
   23798:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2379c:	9400      	str	r4, [sp, #0]
   2379e:	f7ff ffda 	bl	23756 <bt_gatt_attr_read>
}
   237a2:	b006      	add	sp, #24
   237a4:	bd10      	pop	{r4, pc}

000237a6 <read_name>:
{
   237a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   237aa:	b084      	sub	sp, #16
   237ac:	4604      	mov	r4, r0
   237ae:	460d      	mov	r5, r1
   237b0:	4616      	mov	r6, r2
   237b2:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   237b4:	f7f2 fc06 	bl	15fc4 <bt_get_name>
   237b8:	4680      	mov	r8, r0
				 strlen(name));
   237ba:	f7e9 f951 	bl	ca60 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   237be:	b280      	uxth	r0, r0
   237c0:	9002      	str	r0, [sp, #8]
   237c2:	f8cd 8004 	str.w	r8, [sp, #4]
   237c6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   237ca:	9300      	str	r3, [sp, #0]
   237cc:	463b      	mov	r3, r7
   237ce:	4632      	mov	r2, r6
   237d0:	4629      	mov	r1, r5
   237d2:	4620      	mov	r0, r4
   237d4:	f7ff ffbf 	bl	23756 <bt_gatt_attr_read>
}
   237d8:	b004      	add	sp, #16
   237da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000237de <cf_read>:
{
   237de:	b5f0      	push	{r4, r5, r6, r7, lr}
   237e0:	b087      	sub	sp, #28
   237e2:	4604      	mov	r4, r0
   237e4:	460d      	mov	r5, r1
   237e6:	4616      	mov	r6, r2
   237e8:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   237ea:	2300      	movs	r3, #0
   237ec:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   237f0:	f7f5 f970 	bl	18ad4 <find_cf_cfg>
	if (cfg) {
   237f4:	b110      	cbz	r0, 237fc <cf_read+0x1e>
		memcpy(data, cfg->data, sizeof(data));
   237f6:	7a03      	ldrb	r3, [r0, #8]
   237f8:	f88d 3014 	strb.w	r3, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   237fc:	2301      	movs	r3, #1
   237fe:	9302      	str	r3, [sp, #8]
   23800:	ab05      	add	r3, sp, #20
   23802:	9301      	str	r3, [sp, #4]
   23804:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   23808:	9300      	str	r3, [sp, #0]
   2380a:	463b      	mov	r3, r7
   2380c:	4632      	mov	r2, r6
   2380e:	4629      	mov	r1, r5
   23810:	4620      	mov	r0, r4
   23812:	f7ff ffa0 	bl	23756 <bt_gatt_attr_read>
}
   23816:	b007      	add	sp, #28
   23818:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002381a <bt_gatt_attr_read_service>:
{
   2381a:	b570      	push	{r4, r5, r6, lr}
   2381c:	b086      	sub	sp, #24
   2381e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   23822:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   23824:	7826      	ldrb	r6, [r4, #0]
   23826:	b146      	cbz	r6, 2383a <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   23828:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2382a:	2610      	movs	r6, #16
   2382c:	9602      	str	r6, [sp, #8]
   2382e:	9401      	str	r4, [sp, #4]
   23830:	9500      	str	r5, [sp, #0]
   23832:	f7ff ff90 	bl	23756 <bt_gatt_attr_read>
}
   23836:	b006      	add	sp, #24
   23838:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2383a:	8864      	ldrh	r4, [r4, #2]
   2383c:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   23840:	2402      	movs	r4, #2
   23842:	9402      	str	r4, [sp, #8]
   23844:	f10d 0416 	add.w	r4, sp, #22
   23848:	9401      	str	r4, [sp, #4]
   2384a:	9500      	str	r5, [sp, #0]
   2384c:	f7ff ff83 	bl	23756 <bt_gatt_attr_read>
   23850:	e7f1      	b.n	23836 <bt_gatt_attr_read_service+0x1c>

00023852 <bt_gatt_attr_read_ccc>:
{
   23852:	b5f0      	push	{r4, r5, r6, r7, lr}
   23854:	b087      	sub	sp, #28
   23856:	4605      	mov	r5, r0
   23858:	460c      	mov	r4, r1
   2385a:	4616      	mov	r6, r2
   2385c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2385e:	68c9      	ldr	r1, [r1, #12]
   23860:	f7ff fe8d 	bl	2357e <find_ccc_cfg>
	if (cfg) {
   23864:	b190      	cbz	r0, 2388c <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   23866:	8903      	ldrh	r3, [r0, #8]
   23868:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2386c:	2302      	movs	r3, #2
   2386e:	9302      	str	r3, [sp, #8]
   23870:	f10d 0316 	add.w	r3, sp, #22
   23874:	9301      	str	r3, [sp, #4]
   23876:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2387a:	9300      	str	r3, [sp, #0]
   2387c:	463b      	mov	r3, r7
   2387e:	4632      	mov	r2, r6
   23880:	4621      	mov	r1, r4
   23882:	4628      	mov	r0, r5
   23884:	f7ff ff67 	bl	23756 <bt_gatt_attr_read>
}
   23888:	b007      	add	sp, #28
   2388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2388c:	2300      	movs	r3, #0
   2388e:	f8ad 3016 	strh.w	r3, [sp, #22]
   23892:	e7eb      	b.n	2386c <bt_gatt_attr_read_ccc+0x1a>

00023894 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23894:	b1b8      	cbz	r0, 238c6 <bt_gatt_attr_value_handle+0x32>
{
   23896:	b510      	push	{r4, lr}
   23898:	b082      	sub	sp, #8
   2389a:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2389c:	2300      	movs	r3, #0
   2389e:	f88d 3004 	strb.w	r3, [sp, #4]
   238a2:	f642 0303 	movw	r3, #10243	; 0x2803
   238a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   238aa:	a901      	add	r1, sp, #4
   238ac:	6800      	ldr	r0, [r0, #0]
   238ae:	f7fe fb34 	bl	21f1a <bt_uuid_cmp>
   238b2:	b950      	cbnz	r0, 238ca <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   238b4:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   238b6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   238b8:	b940      	cbnz	r0, 238cc <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   238ba:	4620      	mov	r0, r4
   238bc:	f7f5 fb76 	bl	18fac <bt_gatt_attr_get_handle>
   238c0:	3001      	adds	r0, #1
   238c2:	b280      	uxth	r0, r0
   238c4:	e002      	b.n	238cc <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   238c6:	2000      	movs	r0, #0
}
   238c8:	4770      	bx	lr
	uint16_t handle = 0;
   238ca:	2000      	movs	r0, #0
}
   238cc:	b002      	add	sp, #8
   238ce:	bd10      	pop	{r4, pc}

000238d0 <bt_gatt_attr_read_chrc>:
{
   238d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   238d4:	b08a      	sub	sp, #40	; 0x28
   238d6:	4605      	mov	r5, r0
   238d8:	460c      	mov	r4, r1
   238da:	4616      	mov	r6, r2
   238dc:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   238de:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   238e2:	f898 3006 	ldrb.w	r3, [r8, #6]
   238e6:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   238ea:	4608      	mov	r0, r1
   238ec:	f7ff ffd2 	bl	23894 <bt_gatt_attr_value_handle>
   238f0:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   238f4:	f8d8 1000 	ldr.w	r1, [r8]
   238f8:	780b      	ldrb	r3, [r1, #0]
   238fa:	b993      	cbnz	r3, 23922 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   238fc:	884b      	ldrh	r3, [r1, #2]
   238fe:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   23902:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   23904:	9302      	str	r3, [sp, #8]
   23906:	ab05      	add	r3, sp, #20
   23908:	9301      	str	r3, [sp, #4]
   2390a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2390e:	9300      	str	r3, [sp, #0]
   23910:	463b      	mov	r3, r7
   23912:	4632      	mov	r2, r6
   23914:	4621      	mov	r1, r4
   23916:	4628      	mov	r0, r5
   23918:	f7ff ff1d 	bl	23756 <bt_gatt_attr_read>
}
   2391c:	b00a      	add	sp, #40	; 0x28
   2391e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   23922:	f851 cf01 	ldr.w	ip, [r1, #1]!
   23926:	6848      	ldr	r0, [r1, #4]
   23928:	688a      	ldr	r2, [r1, #8]
   2392a:	68cb      	ldr	r3, [r1, #12]
   2392c:	f8cd c017 	str.w	ip, [sp, #23]
   23930:	f8cd 001b 	str.w	r0, [sp, #27]
   23934:	f8cd 201f 	str.w	r2, [sp, #31]
   23938:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
		value_len += 16U;
   2393c:	2313      	movs	r3, #19
   2393e:	e7e1      	b.n	23904 <bt_gatt_attr_read_chrc+0x34>

00023940 <db_hash_process>:
{
   23940:	b508      	push	{r3, lr}
	db_hash_gen(true);
   23942:	2001      	movs	r0, #1
   23944:	f7f5 fbac 	bl	190a0 <db_hash_gen>
}
   23948:	bd08      	pop	{r3, pc}

0002394a <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2394a:	f012 0f01 	tst.w	r2, #1
   2394e:	d005      	beq.n	2395c <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   23950:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   23952:	f013 0f15 	tst.w	r3, #21
   23956:	d01a      	beq.n	2398e <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   23958:	684b      	ldr	r3, [r1, #4]
   2395a:	b1d3      	cbz	r3, 23992 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2395c:	f012 0f02 	tst.w	r2, #2
   23960:	d005      	beq.n	2396e <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   23962:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   23964:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   23968:	d015      	beq.n	23996 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2396a:	688b      	ldr	r3, [r1, #8]
   2396c:	b1ab      	cbz	r3, 2399a <bt_gatt_check_perm+0x50>
{
   2396e:	b510      	push	{r4, lr}
	mask &= attr->perm;
   23970:	7c8c      	ldrb	r4, [r1, #18]
   23972:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   23974:	f014 0f30 	tst.w	r4, #48	; 0x30
   23978:	d103      	bne.n	23982 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2397a:	f014 000c 	ands.w	r0, r4, #12
   2397e:	d10e      	bne.n	2399e <bt_gatt_check_perm+0x54>
}
   23980:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   23982:	f7fe fe2a 	bl	225da <bt_conn_get_security>
   23986:	2802      	cmp	r0, #2
   23988:	d8f7      	bhi.n	2397a <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   2398a:	2005      	movs	r0, #5
   2398c:	e7f8      	b.n	23980 <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2398e:	2002      	movs	r0, #2
   23990:	4770      	bx	lr
   23992:	2002      	movs	r0, #2
   23994:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   23996:	2003      	movs	r0, #3
   23998:	4770      	bx	lr
   2399a:	2003      	movs	r0, #3
}
   2399c:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2399e:	200f      	movs	r0, #15
   239a0:	e7ee      	b.n	23980 <bt_gatt_check_perm+0x36>

000239a2 <bt_gatt_change_aware>:
{
   239a2:	b510      	push	{r4, lr}
   239a4:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   239a6:	f7f5 f895 	bl	18ad4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   239aa:	2800      	cmp	r0, #0
   239ac:	d042      	beq.n	23a34 <bt_gatt_change_aware+0x92>
   239ae:	7a02      	ldrb	r2, [r0, #8]
   239b0:	f012 0f01 	tst.w	r2, #1
   239b4:	d101      	bne.n	239ba <bt_gatt_change_aware+0x18>
		return true;
   239b6:	2001      	movs	r0, #1
}
   239b8:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   239ba:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   239be:	f3bf 8f5b 	dmb	ish
   239c2:	68c2      	ldr	r2, [r0, #12]
   239c4:	f3bf 8f5b 	dmb	ish
   239c8:	f012 0f01 	tst.w	r2, #1
   239cc:	d134      	bne.n	23a38 <bt_gatt_change_aware+0x96>
	if (!req) {
   239ce:	b90c      	cbnz	r4, 239d4 <bt_gatt_change_aware+0x32>
		return false;
   239d0:	4620      	mov	r0, r4
   239d2:	e7f1      	b.n	239b8 <bt_gatt_change_aware+0x16>
   239d4:	f3bf 8f5b 	dmb	ish
   239d8:	68c3      	ldr	r3, [r0, #12]
   239da:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   239de:	f013 0f02 	tst.w	r3, #2
   239e2:	d10d      	bne.n	23a00 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   239e4:	f3bf 8f5b 	dmb	ish
   239e8:	e851 3f00 	ldrex	r3, [r1]
   239ec:	f043 0302 	orr.w	r3, r3, #2
   239f0:	e841 3200 	strex	r2, r3, [r1]
   239f4:	2a00      	cmp	r2, #0
   239f6:	d1f7      	bne.n	239e8 <bt_gatt_change_aware+0x46>
   239f8:	f3bf 8f5b 	dmb	ish
	return false;
   239fc:	2000      	movs	r0, #0
   239fe:	e7db      	b.n	239b8 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23a00:	f3bf 8f5b 	dmb	ish
   23a04:	e851 3f00 	ldrex	r3, [r1]
   23a08:	f023 0302 	bic.w	r3, r3, #2
   23a0c:	e841 3200 	strex	r2, r3, [r1]
   23a10:	2a00      	cmp	r2, #0
   23a12:	d1f7      	bne.n	23a04 <bt_gatt_change_aware+0x62>
   23a14:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23a18:	f3bf 8f5b 	dmb	ish
   23a1c:	e851 3f00 	ldrex	r3, [r1]
   23a20:	f043 0301 	orr.w	r3, r3, #1
   23a24:	e841 3200 	strex	r2, r3, [r1]
   23a28:	2a00      	cmp	r2, #0
   23a2a:	d1f7      	bne.n	23a1c <bt_gatt_change_aware+0x7a>
   23a2c:	f3bf 8f5b 	dmb	ish
		return true;
   23a30:	4620      	mov	r0, r4
   23a32:	e7c1      	b.n	239b8 <bt_gatt_change_aware+0x16>
		return true;
   23a34:	2001      	movs	r0, #1
   23a36:	e7bf      	b.n	239b8 <bt_gatt_change_aware+0x16>
		return true;
   23a38:	2001      	movs	r0, #1
   23a3a:	e7bd      	b.n	239b8 <bt_gatt_change_aware+0x16>

00023a3c <bt_smp_recv>:
{
   23a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a3e:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   23a40:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   23a42:	f04f 32ff 	mov.w	r2, #4294967295
   23a46:	f04f 33ff 	mov.w	r3, #4294967295
   23a4a:	2100      	movs	r1, #0
   23a4c:	4608      	mov	r0, r1
   23a4e:	f7fe fe6d 	bl	2272c <bt_l2cap_create_pdu_timeout>
   23a52:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   23a54:	f100 0608 	add.w	r6, r0, #8
   23a58:	2101      	movs	r1, #1
   23a5a:	4630      	mov	r0, r6
   23a5c:	f000 f971 	bl	23d42 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   23a60:	2505      	movs	r5, #5
   23a62:	7005      	strb	r5, [r0, #0]
   23a64:	2101      	movs	r1, #1
   23a66:	4630      	mov	r0, r6
   23a68:	f000 f96b 	bl	23d42 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   23a6c:	7005      	strb	r5, [r0, #0]
   23a6e:	2300      	movs	r3, #0
   23a70:	9300      	str	r3, [sp, #0]
   23a72:	4622      	mov	r2, r4
   23a74:	2106      	movs	r1, #6
   23a76:	4638      	mov	r0, r7
   23a78:	f7fe fe5d 	bl	22736 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   23a7c:	b910      	cbnz	r0, 23a84 <bt_smp_recv+0x48>
}
   23a7e:	2000      	movs	r0, #0
   23a80:	b003      	add	sp, #12
   23a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   23a84:	4620      	mov	r0, r4
   23a86:	f000 f912 	bl	23cae <net_buf_unref>
   23a8a:	e7f8      	b.n	23a7e <bt_smp_recv+0x42>

00023a8c <bt_smp_sign>:
}
   23a8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23a90:	4770      	bx	lr

00023a92 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   23a92:	2000      	movs	r0, #0
   23a94:	4770      	bx	lr

00023a96 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   23a96:	4770      	bx	lr

00023a98 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   23a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a9c:	4604      	mov	r4, r0
   23a9e:	460d      	mov	r5, r1
   23aa0:	4617      	mov	r7, r2
   23aa2:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23aa4:	7980      	ldrb	r0, [r0, #6]
   23aa6:	f7f5 ff07 	bl	198b8 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   23aaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   23aac:	681b      	ldr	r3, [r3, #0]
   23aae:	f8d3 8000 	ldr.w	r8, [r3]
   23ab2:	463a      	mov	r2, r7
   23ab4:	4633      	mov	r3, r6
   23ab6:	4629      	mov	r1, r5
   23ab8:	4620      	mov	r0, r4
   23aba:	47c0      	blx	r8
}
   23abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023ac0 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   23ac0:	b538      	push	{r3, r4, r5, lr}
   23ac2:	4604      	mov	r4, r0
   23ac4:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23ac6:	7980      	ldrb	r0, [r0, #6]
   23ac8:	f7f5 fef6 	bl	198b8 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   23acc:	7963      	ldrb	r3, [r4, #5]
   23ace:	f013 0f02 	tst.w	r3, #2
   23ad2:	d105      	bne.n	23ae0 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   23ad4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   23ad6:	681b      	ldr	r3, [r3, #0]
   23ad8:	689b      	ldr	r3, [r3, #8]
   23ada:	4629      	mov	r1, r5
   23adc:	4620      	mov	r0, r4
   23ade:	4798      	blx	r3
}
   23ae0:	bd38      	pop	{r3, r4, r5, pc}

00023ae2 <net_buf_id>:
{
   23ae2:	b510      	push	{r4, lr}
   23ae4:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23ae6:	7980      	ldrb	r0, [r0, #6]
   23ae8:	f7f5 fee6 	bl	198b8 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   23aec:	7f03      	ldrb	r3, [r0, #28]
   23aee:	3317      	adds	r3, #23
   23af0:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   23af4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23af6:	1a20      	subs	r0, r4, r0
}
   23af8:	fbb0 f0f3 	udiv	r0, r0, r3
   23afc:	bd10      	pop	{r4, pc}

00023afe <fixed_data_alloc>:
{
   23afe:	b570      	push	{r4, r5, r6, lr}
   23b00:	4604      	mov	r4, r0
   23b02:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23b04:	7980      	ldrb	r0, [r0, #6]
   23b06:	f7f5 fed7 	bl	198b8 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23b0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   23b0c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   23b0e:	682a      	ldr	r2, [r5, #0]
   23b10:	6819      	ldr	r1, [r3, #0]
   23b12:	428a      	cmp	r2, r1
   23b14:	bf28      	it	cs
   23b16:	460a      	movcs	r2, r1
   23b18:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   23b1a:	685d      	ldr	r5, [r3, #4]
   23b1c:	681e      	ldr	r6, [r3, #0]
   23b1e:	4620      	mov	r0, r4
   23b20:	f7ff ffdf 	bl	23ae2 <net_buf_id>
}
   23b24:	fb00 5006 	mla	r0, r0, r6, r5
   23b28:	bd70      	pop	{r4, r5, r6, pc}

00023b2a <net_buf_reset>:
	buf->len  = 0U;
   23b2a:	2300      	movs	r3, #0
   23b2c:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   23b2e:	6903      	ldr	r3, [r0, #16]
   23b30:	6083      	str	r3, [r0, #8]
}
   23b32:	4770      	bx	lr

00023b34 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   23b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b38:	b083      	sub	sp, #12
   23b3a:	4605      	mov	r5, r0
   23b3c:	9101      	str	r1, [sp, #4]
   23b3e:	4616      	mov	r6, r2
   23b40:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   23b42:	4610      	mov	r0, r2
   23b44:	4619      	mov	r1, r3
   23b46:	f001 fe2a 	bl	2579e <sys_clock_timeout_end_calc>
   23b4a:	4682      	mov	sl, r0
   23b4c:	9100      	str	r1, [sp, #0]
   23b4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b52:	f3ef 8211 	mrs	r2, BASEPRI
   23b56:	f383 8812 	msr	BASEPRI_MAX, r3
   23b5a:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   23b5e:	8b6b      	ldrh	r3, [r5, #26]
   23b60:	2b00      	cmp	r3, #0
   23b62:	d042      	beq.n	23bea <net_buf_alloc_len+0xb6>
   23b64:	4693      	mov	fp, r2

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   23b66:	8b2a      	ldrh	r2, [r5, #24]
   23b68:	4293      	cmp	r3, r2
   23b6a:	d20b      	bcs.n	23b84 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   23b6c:	2200      	movs	r2, #0
   23b6e:	2300      	movs	r3, #0
   23b70:	4628      	mov	r0, r5
   23b72:	f7f9 f85f 	bl	1cc34 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   23b76:	4604      	mov	r4, r0
   23b78:	b120      	cbz	r0, 23b84 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   23b7a:	f38b 8811 	msr	BASEPRI, fp
   23b7e:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   23b82:	e015      	b.n	23bb0 <net_buf_alloc_len+0x7c>
			}
		}

		uninit_count = pool->uninit_count--;
   23b84:	8b6a      	ldrh	r2, [r5, #26]
   23b86:	1e53      	subs	r3, r2, #1
   23b88:	836b      	strh	r3, [r5, #26]
   23b8a:	f38b 8811 	msr	BASEPRI, fp
   23b8e:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   23b92:	7f2c      	ldrb	r4, [r5, #28]
   23b94:	3417      	adds	r4, #23
   23b96:	f024 0403 	bic.w	r4, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   23b9a:	8b2b      	ldrh	r3, [r5, #24]
   23b9c:	1a9b      	subs	r3, r3, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   23b9e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   23ba0:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   23ba4:	4628      	mov	r0, r5
   23ba6:	f7f5 fe7b 	bl	198a0 <pool_id>
   23baa:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   23bac:	7f2b      	ldrb	r3, [r5, #28]
   23bae:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   23bb0:	9b01      	ldr	r3, [sp, #4]
   23bb2:	2b00      	cmp	r3, #0
   23bb4:	d038      	beq.n	23c28 <net_buf_alloc_len+0xf4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   23bb6:	ea56 0307 	orrs.w	r3, r6, r7
   23bba:	d005      	beq.n	23bc8 <net_buf_alloc_len+0x94>
   23bbc:	f1b7 3fff 	cmp.w	r7, #4294967295
   23bc0:	bf08      	it	eq
   23bc2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23bc6:	d11d      	bne.n	23c04 <net_buf_alloc_len+0xd0>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   23bc8:	4632      	mov	r2, r6
   23bca:	463b      	mov	r3, r7
   23bcc:	a901      	add	r1, sp, #4
   23bce:	4620      	mov	r0, r4
   23bd0:	f7ff ff62 	bl	23a98 <data_alloc>
   23bd4:	4605      	mov	r5, r0
   23bd6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   23bd8:	bb40      	cbnz	r0, 23c2c <net_buf_alloc_len+0xf8>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23bda:	79a0      	ldrb	r0, [r4, #6]
   23bdc:	f7f5 fe6c 	bl	198b8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   23be0:	4621      	mov	r1, r4
   23be2:	f001 fa38 	bl	25056 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   23be6:	462c      	mov	r4, r5
}
   23be8:	e02a      	b.n	23c40 <net_buf_alloc_len+0x10c>
   23bea:	f382 8811 	msr	BASEPRI, r2
   23bee:	f3bf 8f6f 	isb	sy
   23bf2:	4632      	mov	r2, r6
   23bf4:	463b      	mov	r3, r7
   23bf6:	4628      	mov	r0, r5
   23bf8:	f7f9 f81c 	bl	1cc34 <z_impl_k_queue_get>
	if (!buf) {
   23bfc:	4604      	mov	r4, r0
   23bfe:	2800      	cmp	r0, #0
   23c00:	d1d6      	bne.n	23bb0 <net_buf_alloc_len+0x7c>
   23c02:	e01d      	b.n	23c40 <net_buf_alloc_len+0x10c>
			int64_t remaining = end - sys_clock_tick_get();
   23c04:	f7f9 ffec 	bl	1dbe0 <sys_clock_tick_get>
   23c08:	ebba 0800 	subs.w	r8, sl, r0
   23c0c:	9b00      	ldr	r3, [sp, #0]
   23c0e:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   23c12:	f1b8 0f01 	cmp.w	r8, #1
   23c16:	f179 0300 	sbcs.w	r3, r9, #0
   23c1a:	db02      	blt.n	23c22 <net_buf_alloc_len+0xee>
				timeout = Z_TIMEOUT_TICKS(remaining);
   23c1c:	4646      	mov	r6, r8
   23c1e:	464f      	mov	r7, r9
   23c20:	e7d2      	b.n	23bc8 <net_buf_alloc_len+0x94>
				timeout = K_NO_WAIT;
   23c22:	2600      	movs	r6, #0
   23c24:	2700      	movs	r7, #0
   23c26:	e7cf      	b.n	23bc8 <net_buf_alloc_len+0x94>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   23c28:	2300      	movs	r3, #0
   23c2a:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   23c2c:	2301      	movs	r3, #1
   23c2e:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   23c30:	2300      	movs	r3, #0
   23c32:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   23c34:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   23c36:	9b01      	ldr	r3, [sp, #4]
   23c38:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   23c3a:	4620      	mov	r0, r4
   23c3c:	f7ff ff75 	bl	23b2a <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   23c40:	4620      	mov	r0, r4
   23c42:	b003      	add	sp, #12
   23c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023c48 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   23c48:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23c4a:	6a41      	ldr	r1, [r0, #36]	; 0x24
   23c4c:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   23c4e:	6809      	ldr	r1, [r1, #0]
   23c50:	f7ff ff70 	bl	23b34 <net_buf_alloc_len>
}
   23c54:	bd08      	pop	{r3, pc}

00023c56 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   23c56:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   23c58:	4605      	mov	r5, r0
   23c5a:	f7f8 ffeb 	bl	1cc34 <z_impl_k_queue_get>
	if (!buf) {
   23c5e:	4606      	mov	r6, r0
   23c60:	b190      	cbz	r0, 23c88 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   23c62:	4604      	mov	r4, r0
   23c64:	e00a      	b.n	23c7c <net_buf_get+0x26>
   23c66:	2200      	movs	r2, #0
   23c68:	2300      	movs	r3, #0
   23c6a:	4628      	mov	r0, r5
   23c6c:	f7f8 ffe2 	bl	1cc34 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   23c70:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   23c72:	7963      	ldrb	r3, [r4, #5]
   23c74:	f023 0301 	bic.w	r3, r3, #1
   23c78:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   23c7a:	4604      	mov	r4, r0
   23c7c:	7963      	ldrb	r3, [r4, #5]
   23c7e:	f013 0f01 	tst.w	r3, #1
   23c82:	d1f0      	bne.n	23c66 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   23c84:	2300      	movs	r3, #0
   23c86:	6023      	str	r3, [r4, #0]

	return buf;
}
   23c88:	4630      	mov	r0, r6
   23c8a:	bd70      	pop	{r4, r5, r6, pc}

00023c8c <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   23c8c:	6883      	ldr	r3, [r0, #8]
   23c8e:	440b      	add	r3, r1
   23c90:	6003      	str	r3, [r0, #0]
}
   23c92:	4770      	bx	lr

00023c94 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   23c94:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   23c96:	460a      	mov	r2, r1
   23c98:	6814      	ldr	r4, [r2, #0]
   23c9a:	b12c      	cbz	r4, 23ca8 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   23c9c:	7953      	ldrb	r3, [r2, #5]
   23c9e:	f043 0301 	orr.w	r3, r3, #1
   23ca2:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   23ca4:	4622      	mov	r2, r4
   23ca6:	e7f7      	b.n	23c98 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   23ca8:	f001 f9e0 	bl	2506c <k_queue_append_list>
}
   23cac:	bd10      	pop	{r4, pc}

00023cae <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   23cae:	b538      	push	{r3, r4, r5, lr}
   23cb0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   23cb2:	e00f      	b.n	23cd4 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   23cb4:	4620      	mov	r0, r4
   23cb6:	f7ff ff03 	bl	23ac0 <data_unref>
			buf->__buf = NULL;
   23cba:	2300      	movs	r3, #0
   23cbc:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   23cbe:	2300      	movs	r3, #0
   23cc0:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   23cc2:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   23cc4:	79a0      	ldrb	r0, [r4, #6]
   23cc6:	f7f5 fdf7 	bl	198b8 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   23cca:	6a03      	ldr	r3, [r0, #32]
   23ccc:	b16b      	cbz	r3, 23cea <net_buf_unref+0x3c>
			pool->destroy(buf);
   23cce:	4620      	mov	r0, r4
   23cd0:	4798      	blx	r3
{
   23cd2:	462c      	mov	r4, r5
	while (buf) {
   23cd4:	b184      	cbz	r4, 23cf8 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   23cd6:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   23cd8:	7923      	ldrb	r3, [r4, #4]
   23cda:	3b01      	subs	r3, #1
   23cdc:	b2db      	uxtb	r3, r3
   23cde:	7123      	strb	r3, [r4, #4]
   23ce0:	b953      	cbnz	r3, 23cf8 <net_buf_unref+0x4a>
		if (buf->__buf) {
   23ce2:	6921      	ldr	r1, [r4, #16]
   23ce4:	2900      	cmp	r1, #0
   23ce6:	d1e5      	bne.n	23cb4 <net_buf_unref+0x6>
   23ce8:	e7e9      	b.n	23cbe <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23cea:	79a0      	ldrb	r0, [r4, #6]
   23cec:	f7f5 fde4 	bl	198b8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   23cf0:	4621      	mov	r1, r4
   23cf2:	f001 f9b0 	bl	25056 <k_queue_prepend>
}
   23cf6:	e7ec      	b.n	23cd2 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   23cf8:	bd38      	pop	{r3, r4, r5, pc}

00023cfa <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   23cfa:	7902      	ldrb	r2, [r0, #4]
   23cfc:	3201      	adds	r2, #1
   23cfe:	7102      	strb	r2, [r0, #4]
	return buf;
}
   23d00:	4770      	bx	lr

00023d02 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   23d02:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   23d04:	4618      	mov	r0, r3
   23d06:	681b      	ldr	r3, [r3, #0]
   23d08:	2b00      	cmp	r3, #0
   23d0a:	d1fb      	bne.n	23d04 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   23d0c:	4770      	bx	lr

00023d0e <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   23d0e:	b570      	push	{r4, r5, r6, lr}
   23d10:	4604      	mov	r4, r0
   23d12:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   23d14:	6806      	ldr	r6, [r0, #0]
   23d16:	b11e      	cbz	r6, 23d20 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   23d18:	4608      	mov	r0, r1
   23d1a:	f7ff fff2 	bl	23d02 <net_buf_frag_last>
   23d1e:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   23d20:	6025      	str	r5, [r4, #0]
}
   23d22:	bd70      	pop	{r4, r5, r6, pc}

00023d24 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   23d24:	b538      	push	{r3, r4, r5, lr}
   23d26:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   23d28:	b138      	cbz	r0, 23d3a <net_buf_frag_add+0x16>
   23d2a:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   23d2c:	f7ff ffe9 	bl	23d02 <net_buf_frag_last>
   23d30:	4629      	mov	r1, r5
   23d32:	f7ff ffec 	bl	23d0e <net_buf_frag_insert>

	return head;
   23d36:	4620      	mov	r0, r4
}
   23d38:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   23d3a:	4608      	mov	r0, r1
   23d3c:	f7ff ffdd 	bl	23cfa <net_buf_ref>
   23d40:	e7fa      	b.n	23d38 <net_buf_frag_add+0x14>

00023d42 <net_buf_simple_add>:
	return buf->data + buf->len;
   23d42:	6802      	ldr	r2, [r0, #0]
   23d44:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   23d46:	4419      	add	r1, r3
   23d48:	8081      	strh	r1, [r0, #4]
	return tail;
}
   23d4a:	18d0      	adds	r0, r2, r3
   23d4c:	4770      	bx	lr

00023d4e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   23d4e:	b538      	push	{r3, r4, r5, lr}
   23d50:	460d      	mov	r5, r1
   23d52:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   23d54:	4611      	mov	r1, r2
   23d56:	f7ff fff4 	bl	23d42 <net_buf_simple_add>
   23d5a:	4622      	mov	r2, r4
   23d5c:	4629      	mov	r1, r5
   23d5e:	f001 fe3a 	bl	259d6 <memcpy>
}
   23d62:	bd38      	pop	{r3, r4, r5, pc}

00023d64 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   23d64:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   23d66:	6800      	ldr	r0, [r0, #0]
   23d68:	1a40      	subs	r0, r0, r1
   23d6a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   23d6c:	889a      	ldrh	r2, [r3, #4]
   23d6e:	4411      	add	r1, r2
   23d70:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   23d72:	4770      	bx	lr

00023d74 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   23d74:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   23d76:	8882      	ldrh	r2, [r0, #4]
   23d78:	1a52      	subs	r2, r2, r1
   23d7a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   23d7c:	6800      	ldr	r0, [r0, #0]
   23d7e:	4408      	add	r0, r1
   23d80:	6018      	str	r0, [r3, #0]
}
   23d82:	4770      	bx	lr

00023d84 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   23d84:	4603      	mov	r3, r0
	void *data = buf->data;
   23d86:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   23d88:	889a      	ldrh	r2, [r3, #4]
   23d8a:	1a52      	subs	r2, r2, r1
   23d8c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   23d8e:	4401      	add	r1, r0
   23d90:	6019      	str	r1, [r3, #0]

	return data;
}
   23d92:	4770      	bx	lr

00023d94 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   23d94:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   23d96:	6803      	ldr	r3, [r0, #0]
   23d98:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   23d9a:	2101      	movs	r1, #1
   23d9c:	f7ff ffea 	bl	23d74 <net_buf_simple_pull>

	return val;
}
   23da0:	4620      	mov	r0, r4
   23da2:	bd10      	pop	{r4, pc}

00023da4 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   23da4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   23da6:	6803      	ldr	r3, [r0, #0]
   23da8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   23daa:	2102      	movs	r1, #2
   23dac:	f7ff ffe2 	bl	23d74 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   23db0:	4620      	mov	r0, r4
   23db2:	bd10      	pop	{r4, pc}

00023db4 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   23db4:	6802      	ldr	r2, [r0, #0]
   23db6:	6880      	ldr	r0, [r0, #8]
}
   23db8:	1a10      	subs	r0, r2, r0
   23dba:	4770      	bx	lr

00023dbc <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   23dbc:	b538      	push	{r3, r4, r5, lr}
   23dbe:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   23dc0:	88c5      	ldrh	r5, [r0, #6]
   23dc2:	f7ff fff7 	bl	23db4 <net_buf_simple_headroom>
   23dc6:	1a2d      	subs	r5, r5, r0
   23dc8:	88a0      	ldrh	r0, [r4, #4]
}
   23dca:	1a28      	subs	r0, r5, r0
   23dcc:	bd38      	pop	{r3, r4, r5, pc}

00023dce <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   23dce:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   23dd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   23dd4:	0089      	lsls	r1, r1, #2
   23dd6:	3138      	adds	r1, #56	; 0x38
}
   23dd8:	4408      	add	r0, r1
   23dda:	4770      	bx	lr

00023ddc <get_sub_config>:
	const struct nrf_clock_control_config *config =
   23ddc:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   23dde:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   23de2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   23de6:	4770      	bx	lr

00023de8 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   23de8:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   23dea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   23dee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   23df2:	4770      	bx	lr

00023df4 <get_status>:
{
   23df4:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   23df6:	b2c9      	uxtb	r1, r1
   23df8:	f7ff ffe9 	bl	23dce <get_sub_data>
   23dfc:	6880      	ldr	r0, [r0, #8]
}
   23dfe:	f000 0007 	and.w	r0, r0, #7
   23e02:	bd08      	pop	{r3, pc}

00023e04 <set_off_state>:
	__asm__ volatile(
   23e04:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e08:	f3ef 8211 	mrs	r2, BASEPRI
   23e0c:	f383 8812 	msr	BASEPRI_MAX, r3
   23e10:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23e14:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23e16:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   23e1a:	d001      	beq.n	23e20 <set_off_state+0x1c>
   23e1c:	428b      	cmp	r3, r1
   23e1e:	d107      	bne.n	23e30 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   23e20:	2301      	movs	r3, #1
   23e22:	6003      	str	r3, [r0, #0]
	int err = 0;
   23e24:	2000      	movs	r0, #0
	__asm__ volatile(
   23e26:	f382 8811 	msr	BASEPRI, r2
   23e2a:	f3bf 8f6f 	isb	sy
}
   23e2e:	4770      	bx	lr
		err = -EPERM;
   23e30:	f04f 30ff 	mov.w	r0, #4294967295
   23e34:	e7f7      	b.n	23e26 <set_off_state+0x22>

00023e36 <set_starting_state>:
{
   23e36:	b410      	push	{r4}
	__asm__ volatile(
   23e38:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e3c:	f3ef 8211 	mrs	r2, BASEPRI
   23e40:	f383 8812 	msr	BASEPRI_MAX, r3
   23e44:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23e48:	6803      	ldr	r3, [r0, #0]
   23e4a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   23e4e:	f003 0307 	and.w	r3, r3, #7
   23e52:	2b01      	cmp	r3, #1
   23e54:	d009      	beq.n	23e6a <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   23e56:	428c      	cmp	r4, r1
   23e58:	d00a      	beq.n	23e70 <set_starting_state+0x3a>
		err = -EPERM;
   23e5a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   23e5e:	f382 8811 	msr	BASEPRI, r2
   23e62:	f3bf 8f6f 	isb	sy
}
   23e66:	bc10      	pop	{r4}
   23e68:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   23e6a:	6001      	str	r1, [r0, #0]
	int err = 0;
   23e6c:	2000      	movs	r0, #0
   23e6e:	e7f6      	b.n	23e5e <set_starting_state+0x28>
		err = -EALREADY;
   23e70:	f06f 0077 	mvn.w	r0, #119	; 0x77
   23e74:	e7f3      	b.n	23e5e <set_starting_state+0x28>

00023e76 <set_on_state>:
	__asm__ volatile(
   23e76:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e7a:	f3ef 8211 	mrs	r2, BASEPRI
   23e7e:	f383 8812 	msr	BASEPRI_MAX, r3
   23e82:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   23e86:	6803      	ldr	r3, [r0, #0]
   23e88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23e8c:	f043 0302 	orr.w	r3, r3, #2
   23e90:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   23e92:	f382 8811 	msr	BASEPRI, r2
   23e96:	f3bf 8f6f 	isb	sy
}
   23e9a:	4770      	bx	lr

00023e9c <clkstarted_handle>:
{
   23e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e9e:	4606      	mov	r6, r0
   23ea0:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   23ea2:	f7ff ff94 	bl	23dce <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   23ea6:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   23ea8:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   23eaa:	2300      	movs	r3, #0
   23eac:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   23eb0:	f7ff ffe1 	bl	23e76 <set_on_state>
	if (callback) {
   23eb4:	b11d      	cbz	r5, 23ebe <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   23eb6:	463a      	mov	r2, r7
   23eb8:	4621      	mov	r1, r4
   23eba:	4630      	mov	r0, r6
   23ebc:	47a8      	blx	r5
}
   23ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023ec0 <stop>:
{
   23ec0:	b570      	push	{r4, r5, r6, lr}
   23ec2:	4606      	mov	r6, r0
   23ec4:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   23ec6:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   23ec8:	4621      	mov	r1, r4
   23eca:	f7ff ff80 	bl	23dce <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   23ece:	4629      	mov	r1, r5
   23ed0:	3008      	adds	r0, #8
   23ed2:	f7ff ff97 	bl	23e04 <set_off_state>
	if (err < 0) {
   23ed6:	2800      	cmp	r0, #0
   23ed8:	db06      	blt.n	23ee8 <stop+0x28>
	get_sub_config(dev, type)->stop();
   23eda:	4621      	mov	r1, r4
   23edc:	4630      	mov	r0, r6
   23ede:	f7ff ff7d 	bl	23ddc <get_sub_config>
   23ee2:	6843      	ldr	r3, [r0, #4]
   23ee4:	4798      	blx	r3
	return 0;
   23ee6:	2000      	movs	r0, #0
}
   23ee8:	bd70      	pop	{r4, r5, r6, pc}

00023eea <api_stop>:
{
   23eea:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   23eec:	2280      	movs	r2, #128	; 0x80
   23eee:	f7ff ffe7 	bl	23ec0 <stop>
}
   23ef2:	bd08      	pop	{r3, pc}

00023ef4 <async_start>:
{
   23ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ef8:	4606      	mov	r6, r0
   23efa:	4690      	mov	r8, r2
   23efc:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   23efe:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   23f00:	4629      	mov	r1, r5
   23f02:	f7ff ff64 	bl	23dce <get_sub_data>
   23f06:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   23f08:	9906      	ldr	r1, [sp, #24]
   23f0a:	3008      	adds	r0, #8
   23f0c:	f7ff ff93 	bl	23e36 <set_starting_state>
	if (err < 0) {
   23f10:	2800      	cmp	r0, #0
   23f12:	db09      	blt.n	23f28 <async_start+0x34>
	subdata->cb = cb;
   23f14:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   23f18:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   23f1a:	4629      	mov	r1, r5
   23f1c:	4630      	mov	r0, r6
   23f1e:	f7ff ff5d 	bl	23ddc <get_sub_config>
   23f22:	6803      	ldr	r3, [r0, #0]
   23f24:	4798      	blx	r3
	return 0;
   23f26:	2000      	movs	r0, #0
}
   23f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023f2c <api_start>:
{
   23f2c:	b510      	push	{r4, lr}
   23f2e:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   23f30:	2480      	movs	r4, #128	; 0x80
   23f32:	9400      	str	r4, [sp, #0]
   23f34:	f7ff ffde 	bl	23ef4 <async_start>
}
   23f38:	b002      	add	sp, #8
   23f3a:	bd10      	pop	{r4, pc}

00023f3c <onoff_started_callback>:
{
   23f3c:	b510      	push	{r4, lr}
   23f3e:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   23f40:	b2c9      	uxtb	r1, r1
   23f42:	f7ff ff51 	bl	23de8 <get_onoff_manager>
	notify(mgr, 0);
   23f46:	2100      	movs	r1, #0
   23f48:	47a0      	blx	r4
}
   23f4a:	bd10      	pop	{r4, pc}

00023f4c <hfclk_start>:
{
   23f4c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   23f4e:	2001      	movs	r0, #1
   23f50:	f7f7 fba2 	bl	1b698 <nrfx_clock_start>
}
   23f54:	bd08      	pop	{r3, pc}

00023f56 <lfclk_start>:
{
   23f56:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   23f58:	2000      	movs	r0, #0
   23f5a:	f7f7 fb9d 	bl	1b698 <nrfx_clock_start>
}
   23f5e:	bd08      	pop	{r3, pc}

00023f60 <hfclk_stop>:
{
   23f60:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   23f62:	2001      	movs	r0, #1
   23f64:	f000 fe63 	bl	24c2e <nrfx_clock_stop>
}
   23f68:	bd08      	pop	{r3, pc}

00023f6a <lfclk_stop>:
{
   23f6a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   23f6c:	2000      	movs	r0, #0
   23f6e:	f000 fe5e 	bl	24c2e <nrfx_clock_stop>
}
   23f72:	bd08      	pop	{r3, pc}

00023f74 <blocking_start_callback>:
{
   23f74:	b508      	push	{r3, lr}
   23f76:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   23f78:	f7f8 fe98 	bl	1ccac <z_impl_k_sem_give>
}
   23f7c:	bd08      	pop	{r3, pc}

00023f7e <get_pull>:
	if (flags & GPIO_PULL_UP) {
   23f7e:	f010 0f10 	tst.w	r0, #16
   23f82:	d104      	bne.n	23f8e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   23f84:	f010 0f20 	tst.w	r0, #32
   23f88:	d103      	bne.n	23f92 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   23f8a:	2000      	movs	r0, #0
   23f8c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   23f8e:	2003      	movs	r0, #3
   23f90:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   23f92:	2001      	movs	r0, #1
}
   23f94:	4770      	bx	lr

00023f96 <gpio_nrfx_port_get_raw>:
	return port->config;
   23f96:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23f98:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   23f9a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   23f9e:	600b      	str	r3, [r1, #0]
}
   23fa0:	2000      	movs	r0, #0
   23fa2:	4770      	bx	lr

00023fa4 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   23fa4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23fa6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   23fa8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   23fac:	4042      	eors	r2, r0
   23fae:	400a      	ands	r2, r1
   23fb0:	4042      	eors	r2, r0
    p_reg->OUT = value;
   23fb2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   23fb6:	2000      	movs	r0, #0
   23fb8:	4770      	bx	lr

00023fba <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   23fba:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23fbc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   23fbe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   23fc2:	2000      	movs	r0, #0
   23fc4:	4770      	bx	lr

00023fc6 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   23fc6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23fc8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   23fca:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   23fce:	2000      	movs	r0, #0
   23fd0:	4770      	bx	lr

00023fd2 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   23fd2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23fd4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   23fd6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   23fda:	404b      	eors	r3, r1
    p_reg->OUT = value;
   23fdc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   23fe0:	2000      	movs	r0, #0
   23fe2:	4770      	bx	lr

00023fe4 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   23fe4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   23fe8:	d007      	beq.n	23ffa <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   23fea:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   23fee:	d00d      	beq.n	2400c <get_trigger+0x28>
   23ff0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   23ff4:	d008      	beq.n	24008 <get_trigger+0x24>
   23ff6:	2001      	movs	r0, #1
}
   23ff8:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   23ffa:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   23ffe:	d001      	beq.n	24004 <get_trigger+0x20>
   24000:	2005      	movs	r0, #5
   24002:	4770      	bx	lr
   24004:	2004      	movs	r0, #4
   24006:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   24008:	2002      	movs	r0, #2
   2400a:	4770      	bx	lr
   2400c:	2003      	movs	r0, #3
   2400e:	4770      	bx	lr

00024010 <gpio_nrfx_manage_callback>:
{
   24010:	b470      	push	{r4, r5, r6}
	return port->data;
   24012:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24014:	1d05      	adds	r5, r0, #4
	return list->head;
   24016:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   24018:	b1db      	cbz	r3, 24052 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   2401a:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2401c:	2400      	movs	r4, #0
   2401e:	e00a      	b.n	24036 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   24020:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   24022:	6043      	str	r3, [r0, #4]
	return list->tail;
   24024:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   24026:	42a1      	cmp	r1, r4
   24028:	d10f      	bne.n	2404a <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   2402a:	606b      	str	r3, [r5, #4]
}
   2402c:	e00d      	b.n	2404a <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   2402e:	606c      	str	r4, [r5, #4]
}
   24030:	e00b      	b.n	2404a <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24032:	461c      	mov	r4, r3
   24034:	681b      	ldr	r3, [r3, #0]
   24036:	b15b      	cbz	r3, 24050 <gpio_nrfx_manage_callback+0x40>
   24038:	429e      	cmp	r6, r3
   2403a:	d1fa      	bne.n	24032 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   2403c:	2c00      	cmp	r4, #0
   2403e:	d0ef      	beq.n	24020 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   24040:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   24042:	6023      	str	r3, [r4, #0]
	return list->tail;
   24044:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   24046:	4299      	cmp	r1, r3
   24048:	d0f1      	beq.n	2402e <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   2404a:	2300      	movs	r3, #0
   2404c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2404e:	e000      	b.n	24052 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   24050:	b152      	cbz	r2, 24068 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   24052:	b162      	cbz	r2, 2406e <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   24054:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   24056:	600b      	str	r3, [r1, #0]
	list->head = node;
   24058:	6041      	str	r1, [r0, #4]
	return list->tail;
   2405a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2405c:	b10b      	cbz	r3, 24062 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2405e:	2000      	movs	r0, #0
   24060:	e006      	b.n	24070 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   24062:	6069      	str	r1, [r5, #4]
   24064:	2000      	movs	r0, #0
}
   24066:	e003      	b.n	24070 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   24068:	f06f 0015 	mvn.w	r0, #21
   2406c:	e000      	b.n	24070 <gpio_nrfx_manage_callback+0x60>
	return 0;
   2406e:	2000      	movs	r0, #0
}
   24070:	bc70      	pop	{r4, r5, r6}
   24072:	4770      	bx	lr

00024074 <nrfx_gpio_handler>:
{
   24074:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   24076:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   2407a:	0940      	lsrs	r0, r0, #5
   2407c:	f7f5 fe2e 	bl	19cdc <get_dev>
	if (port == NULL) {
   24080:	b1d8      	cbz	r0, 240ba <nrfx_gpio_handler+0x46>
   24082:	4606      	mov	r6, r0
	return port->data;
   24084:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   24086:	2501      	movs	r5, #1
   24088:	40a5      	lsls	r5, r4
	return list->head;
   2408a:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2408c:	b119      	cbz	r1, 24096 <nrfx_gpio_handler+0x22>
   2408e:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   24090:	b149      	cbz	r1, 240a6 <nrfx_gpio_handler+0x32>
	return node->next;
   24092:	680c      	ldr	r4, [r1, #0]
   24094:	e007      	b.n	240a6 <nrfx_gpio_handler+0x32>
   24096:	460c      	mov	r4, r1
   24098:	e005      	b.n	240a6 <nrfx_gpio_handler+0x32>
   2409a:	b164      	cbz	r4, 240b6 <nrfx_gpio_handler+0x42>
   2409c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   2409e:	b104      	cbz	r4, 240a2 <nrfx_gpio_handler+0x2e>
	return node->next;
   240a0:	6823      	ldr	r3, [r4, #0]
   240a2:	4621      	mov	r1, r4
   240a4:	461c      	mov	r4, r3
   240a6:	b141      	cbz	r1, 240ba <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   240a8:	688a      	ldr	r2, [r1, #8]
   240aa:	402a      	ands	r2, r5
   240ac:	d0f5      	beq.n	2409a <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   240ae:	684b      	ldr	r3, [r1, #4]
   240b0:	4630      	mov	r0, r6
   240b2:	4798      	blx	r3
   240b4:	e7f1      	b.n	2409a <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   240b6:	4623      	mov	r3, r4
   240b8:	e7f3      	b.n	240a2 <nrfx_gpio_handler+0x2e>
}
   240ba:	bd70      	pop	{r4, r5, r6, pc}

000240bc <endtx_isr>:
	return dev->config;
   240bc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   240be:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   240c0:	f04f 0140 	mov.w	r1, #64	; 0x40
   240c4:	f3ef 8211 	mrs	r2, BASEPRI
   240c8:	f381 8812 	msr	BASEPRI_MAX, r1
   240cc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   240d0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   240d4:	b131      	cbz	r1, 240e4 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   240d6:	2100      	movs	r1, #0
   240d8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   240dc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   240e0:	2101      	movs	r1, #1
   240e2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   240e4:	f382 8811 	msr	BASEPRI, r2
   240e8:	f3bf 8f6f 	isb	sy
}
   240ec:	4770      	bx	lr

000240ee <uarte_nrfx_isr_int>:
{
   240ee:	b538      	push	{r3, r4, r5, lr}
   240f0:	4604      	mov	r4, r0
	return dev->config;
   240f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   240f4:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   240f6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   240fa:	f413 7f80 	tst.w	r3, #256	; 0x100
   240fe:	d002      	beq.n	24106 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24100:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   24104:	b9db      	cbnz	r3, 2413e <uarte_nrfx_isr_int+0x50>
	return dev->config;
   24106:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   24108:	685b      	ldr	r3, [r3, #4]
   2410a:	f013 0f10 	tst.w	r3, #16
   2410e:	d015      	beq.n	2413c <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   24110:	f04f 0240 	mov.w	r2, #64	; 0x40
   24114:	f3ef 8311 	mrs	r3, BASEPRI
   24118:	f382 8812 	msr	BASEPRI_MAX, r2
   2411c:	f3bf 8f6f 	isb	sy
   24120:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   24124:	b112      	cbz	r2, 2412c <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   24126:	2200      	movs	r2, #0
   24128:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2412c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   24130:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   24134:	f383 8811 	msr	BASEPRI, r3
   24138:	f3bf 8f6f 	isb	sy
}
   2413c:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2413e:	f7ff ffbd 	bl	240bc <endtx_isr>
   24142:	e7e0      	b.n	24106 <uarte_nrfx_isr_int+0x18>

00024144 <uarte_nrfx_configure>:
{
   24144:	b570      	push	{r4, r5, r6, lr}
   24146:	b082      	sub	sp, #8
   24148:	4605      	mov	r5, r0
   2414a:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   2414c:	794b      	ldrb	r3, [r1, #5]
   2414e:	2b01      	cmp	r3, #1
   24150:	d006      	beq.n	24160 <uarte_nrfx_configure+0x1c>
   24152:	2b03      	cmp	r3, #3
   24154:	d011      	beq.n	2417a <uarte_nrfx_configure+0x36>
   24156:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2415a:	4618      	mov	r0, r3
   2415c:	b002      	add	sp, #8
   2415e:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   24160:	2300      	movs	r3, #0
   24162:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   24166:	79a3      	ldrb	r3, [r4, #6]
   24168:	2b03      	cmp	r3, #3
   2416a:	d138      	bne.n	241de <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   2416c:	79e3      	ldrb	r3, [r4, #7]
   2416e:	b143      	cbz	r3, 24182 <uarte_nrfx_configure+0x3e>
   24170:	2b01      	cmp	r3, #1
   24172:	d010      	beq.n	24196 <uarte_nrfx_configure+0x52>
   24174:	f06f 0385 	mvn.w	r3, #133	; 0x85
   24178:	e7ef      	b.n	2415a <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2417a:	2310      	movs	r3, #16
   2417c:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   24180:	e7f1      	b.n	24166 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   24182:	2300      	movs	r3, #0
   24184:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   24188:	7923      	ldrb	r3, [r4, #4]
   2418a:	b143      	cbz	r3, 2419e <uarte_nrfx_configure+0x5a>
   2418c:	2b02      	cmp	r3, #2
   2418e:	d022      	beq.n	241d6 <uarte_nrfx_configure+0x92>
   24190:	f06f 0385 	mvn.w	r3, #133	; 0x85
   24194:	e7e1      	b.n	2415a <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   24196:	2301      	movs	r3, #1
   24198:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2419c:	e7f4      	b.n	24188 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2419e:	2300      	movs	r3, #0
   241a0:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   241a4:	6821      	ldr	r1, [r4, #0]
   241a6:	4628      	mov	r0, r5
   241a8:	f7f5 ff9c 	bl	1a0e4 <baudrate_set>
   241ac:	4603      	mov	r3, r0
   241ae:	b9c8      	cbnz	r0, 241e4 <uarte_nrfx_configure+0xa0>
	return dev->config;
   241b0:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   241b2:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   241b4:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   241b8:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   241bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
   241c0:	4331      	orrs	r1, r6
   241c2:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   241c4:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   241c8:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   241ca:	3204      	adds	r2, #4
   241cc:	e894 0003 	ldmia.w	r4, {r0, r1}
   241d0:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   241d4:	e7c1      	b.n	2415a <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   241d6:	230e      	movs	r3, #14
   241d8:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   241dc:	e7e2      	b.n	241a4 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   241de:	f06f 0385 	mvn.w	r3, #133	; 0x85
   241e2:	e7ba      	b.n	2415a <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   241e4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   241e8:	e7b7      	b.n	2415a <uarte_nrfx_configure+0x16>

000241ea <uarte_nrfx_config_get>:
{
   241ea:	460b      	mov	r3, r1
	return dev->data;
   241ec:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   241ee:	6891      	ldr	r1, [r2, #8]
   241f0:	6850      	ldr	r0, [r2, #4]
   241f2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   241f6:	2000      	movs	r0, #0
   241f8:	4770      	bx	lr

000241fa <uarte_nrfx_err_check>:
	return dev->config;
   241fa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   241fc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   241fe:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   24202:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   24206:	4770      	bx	lr

00024208 <is_tx_ready>:
	return dev->config;
   24208:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2420a:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2420c:	685b      	ldr	r3, [r3, #4]
   2420e:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24212:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   24216:	b929      	cbnz	r1, 24224 <is_tx_ready+0x1c>
   24218:	b933      	cbnz	r3, 24228 <is_tx_ready+0x20>
   2421a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2421e:	b92b      	cbnz	r3, 2422c <is_tx_ready+0x24>
   24220:	2000      	movs	r0, #0
   24222:	4770      	bx	lr
   24224:	2001      	movs	r0, #1
   24226:	4770      	bx	lr
   24228:	2000      	movs	r0, #0
   2422a:	4770      	bx	lr
   2422c:	2001      	movs	r0, #1
}
   2422e:	4770      	bx	lr

00024230 <uarte_enable>:
	return dev->config;
   24230:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   24232:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24234:	2208      	movs	r2, #8
   24236:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2423a:	4770      	bx	lr

0002423c <tx_start>:
{
   2423c:	b510      	push	{r4, lr}
	return dev->config;
   2423e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   24240:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24242:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24246:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2424a:	2300      	movs	r3, #0
   2424c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   24250:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   24254:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   24258:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   2425c:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2425e:	685b      	ldr	r3, [r3, #4]
   24260:	f013 0f10 	tst.w	r3, #16
   24264:	d102      	bne.n	2426c <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24266:	2301      	movs	r3, #1
   24268:	60a3      	str	r3, [r4, #8]
}
   2426a:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2426c:	2101      	movs	r1, #1
   2426e:	f7ff ffdf 	bl	24230 <uarte_enable>
    p_reg->INTENSET = mask;
   24272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   24276:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2427a:	e7f4      	b.n	24266 <tx_start+0x2a>

0002427c <uarte_nrfx_poll_in>:
{
   2427c:	b410      	push	{r4}
	return dev->data;
   2427e:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   24280:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   24282:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24284:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24288:	b152      	cbz	r2, 242a0 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   2428a:	7c62      	ldrb	r2, [r4, #17]
   2428c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2428e:	2000      	movs	r0, #0
   24290:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   24294:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24298:	2201      	movs	r2, #1
   2429a:	601a      	str	r2, [r3, #0]
}
   2429c:	bc10      	pop	{r4}
   2429e:	4770      	bx	lr
		return -1;
   242a0:	f04f 30ff 	mov.w	r0, #4294967295
   242a4:	e7fa      	b.n	2429c <uarte_nrfx_poll_in+0x20>

000242a6 <wait_tx_ready>:
{
   242a6:	b570      	push	{r4, r5, r6, lr}
   242a8:	4606      	mov	r6, r0
   242aa:	e014      	b.n	242d6 <wait_tx_ready+0x30>
		if (res) {
   242ac:	b17d      	cbz	r5, 242ce <wait_tx_ready+0x28>
	__asm__ volatile(
   242ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   242b2:	f3ef 8411 	mrs	r4, BASEPRI
   242b6:	f383 8812 	msr	BASEPRI_MAX, r3
   242ba:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   242be:	4630      	mov	r0, r6
   242c0:	f7ff ffa2 	bl	24208 <is_tx_ready>
   242c4:	b9a0      	cbnz	r0, 242f0 <wait_tx_ready+0x4a>
	__asm__ volatile(
   242c6:	f384 8811 	msr	BASEPRI, r4
   242ca:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   242ce:	2021      	movs	r0, #33	; 0x21
   242d0:	2100      	movs	r1, #0
   242d2:	f7f9 fa9b 	bl	1d80c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   242d6:	2464      	movs	r4, #100	; 0x64
   242d8:	4630      	mov	r0, r6
   242da:	f7ff ff95 	bl	24208 <is_tx_ready>
   242de:	4605      	mov	r5, r0
   242e0:	2800      	cmp	r0, #0
   242e2:	d1e3      	bne.n	242ac <wait_tx_ready+0x6>
   242e4:	2001      	movs	r0, #1
   242e6:	f000 fcbf 	bl	24c68 <nrfx_busy_wait>
   242ea:	3c01      	subs	r4, #1
   242ec:	d1f4      	bne.n	242d8 <wait_tx_ready+0x32>
   242ee:	e7dd      	b.n	242ac <wait_tx_ready+0x6>
}
   242f0:	4620      	mov	r0, r4
   242f2:	bd70      	pop	{r4, r5, r6, pc}

000242f4 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   242f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242f6:	4604      	mov	r4, r0
	return dev->config;
   242f8:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   242fa:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   242fc:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   242fe:	2100      	movs	r1, #0
   24300:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   24304:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   24306:	f7f5 fe1f 	bl	19f48 <uarte_nrfx_pins_configure>
	return dev->data;
   2430a:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2430c:	3104      	adds	r1, #4
   2430e:	4620      	mov	r0, r4
   24310:	f7ff ff18 	bl	24144 <uarte_nrfx_configure>
	if (err) {
   24314:	4604      	mov	r4, r0
   24316:	bb68      	cbnz	r0, 24374 <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   24318:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2431a:	f013 0f02 	tst.w	r3, #2
   2431e:	d12b      	bne.n	24378 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24320:	2308      	movs	r3, #8
   24322:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   24326:	7a33      	ldrb	r3, [r6, #8]
   24328:	b95b      	cbnz	r3, 24342 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2432a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2432e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   24332:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24336:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2433a:	2301      	movs	r3, #1
   2433c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24340:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   24342:	6873      	ldr	r3, [r6, #4]
   24344:	f013 0f02 	tst.w	r3, #2
   24348:	d103      	bne.n	24352 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   2434a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2434e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   24352:	6873      	ldr	r3, [r6, #4]
   24354:	f013 0f10 	tst.w	r3, #16
   24358:	d003      	beq.n	24362 <uarte_instance_init+0x6e>
   2435a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2435e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   24362:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24364:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24368:	2300      	movs	r3, #0
   2436a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2436e:	2301      	movs	r3, #1
   24370:	60ab      	str	r3, [r5, #8]
   24372:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   24374:	4620      	mov	r0, r4
   24376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   24378:	4639      	mov	r1, r7
   2437a:	4628      	mov	r0, r5
   2437c:	f7f5 ff92 	bl	1a2a4 <endtx_stoptx_ppi_init>
		if (err < 0) {
   24380:	2800      	cmp	r0, #0
   24382:	dacd      	bge.n	24320 <uarte_instance_init+0x2c>
			return err;
   24384:	4604      	mov	r4, r0
   24386:	e7f5      	b.n	24374 <uarte_instance_init+0x80>

00024388 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   24388:	b510      	push	{r4, lr}
   2438a:	4604      	mov	r4, r0
   2438c:	2200      	movs	r2, #0
   2438e:	2101      	movs	r1, #1
   24390:	2002      	movs	r0, #2
   24392:	f7ee ff6b 	bl	1326c <z_arm_irq_priority_set>
   24396:	2002      	movs	r0, #2
   24398:	f7ee ff36 	bl	13208 <arch_irq_enable>
   2439c:	2100      	movs	r1, #0
   2439e:	4620      	mov	r0, r4
   243a0:	f7ff ffa8 	bl	242f4 <uarte_instance_init>
   243a4:	bd10      	pop	{r4, pc}

000243a6 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   243a6:	b510      	push	{r4, lr}
   243a8:	4604      	mov	r4, r0
   243aa:	2200      	movs	r2, #0
   243ac:	2101      	movs	r1, #1
   243ae:	2028      	movs	r0, #40	; 0x28
   243b0:	f7ee ff5c 	bl	1326c <z_arm_irq_priority_set>
   243b4:	2028      	movs	r0, #40	; 0x28
   243b6:	f7ee ff27 	bl	13208 <arch_irq_enable>
   243ba:	2100      	movs	r1, #0
   243bc:	4620      	mov	r0, r4
   243be:	f7ff ff99 	bl	242f4 <uarte_instance_init>
   243c2:	bd10      	pop	{r4, pc}

000243c4 <rng_pool_put>:
{
   243c4:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   243c6:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   243c8:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   243ca:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   243cc:	1a9a      	subs	r2, r3, r2
   243ce:	ea34 0202 	bics.w	r2, r4, r2
   243d2:	d008      	beq.n	243e6 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   243d4:	18c2      	adds	r2, r0, r3
   243d6:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   243d8:	3301      	adds	r3, #1
   243da:	b25b      	sxtb	r3, r3
   243dc:	4023      	ands	r3, r4
   243de:	7083      	strb	r3, [r0, #2]
	return 0;
   243e0:	2000      	movs	r0, #0
}
   243e2:	bc10      	pop	{r4}
   243e4:	4770      	bx	lr
		return -ENOBUFS;
   243e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   243ea:	e7fa      	b.n	243e2 <rng_pool_put+0x1e>

000243ec <rng_pool_init>:
	rngp->first_alloc = 0U;
   243ec:	2300      	movs	r3, #0
   243ee:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   243f0:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   243f2:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   243f4:	3901      	subs	r1, #1
   243f6:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   243f8:	7102      	strb	r2, [r0, #4]
}
   243fa:	4770      	bx	lr

000243fc <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   243fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   243fe:	b083      	sub	sp, #12
   24400:	460f      	mov	r7, r1
   24402:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   24404:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   24408:	2400      	movs	r4, #0
	int res = -EINVAL;
   2440a:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2440e:	e00a      	b.n	24426 <entropy_cc3xx_rng_get_entropy+0x2a>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   24410:	ab01      	add	r3, sp, #4
   24412:	462a      	mov	r2, r5
   24414:	1939      	adds	r1, r7, r4
   24416:	2000      	movs	r0, #0
   24418:	f7fa f83c 	bl	1e494 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   2441c:	9b01      	ldr	r3, [sp, #4]
   2441e:	42ab      	cmp	r3, r5
   24420:	d109      	bne.n	24436 <entropy_cc3xx_rng_get_entropy+0x3a>
			return -EINVAL;
		}

		if (res != 0) {
   24422:	b950      	cbnz	r0, 2443a <entropy_cc3xx_rng_get_entropy+0x3e>
			break;
		}

		offset += chunk_size;
   24424:	442c      	add	r4, r5
	while (offset < length) {
   24426:	42a6      	cmp	r6, r4
   24428:	d907      	bls.n	2443a <entropy_cc3xx_rng_get_entropy+0x3e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2442a:	1b33      	subs	r3, r6, r4
   2442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24430:	d2ee      	bcs.n	24410 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   24432:	461d      	mov	r5, r3
   24434:	e7ec      	b.n	24410 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   24436:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   2443a:	b003      	add	sp, #12
   2443c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002443e <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2443e:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   24440:	2200      	movs	r2, #0
   24442:	4611      	mov	r1, r2
   24444:	4610      	mov	r0, r2
   24446:	f7f9 fff1 	bl	1e42c <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   2444a:	b900      	cbnz	r0, 2444e <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   2444c:	bd08      	pop	{r3, pc}
			return -EINVAL;
   2444e:	f06f 0015 	mvn.w	r0, #21
   24452:	e7fb      	b.n	2444c <entropy_cc3xx_rng_init+0xe>

00024454 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   24454:	4770      	bx	lr

00024456 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   24456:	1a40      	subs	r0, r0, r1
}
   24458:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2445c:	4770      	bx	lr

0002445e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2445e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   24462:	009b      	lsls	r3, r3, #2
   24464:	b29b      	uxth	r3, r3
   24466:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2446a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2446e:	2200      	movs	r2, #0
   24470:	601a      	str	r2, [r3, #0]
   24472:	681b      	ldr	r3, [r3, #0]
}
   24474:	4770      	bx	lr

00024476 <absolute_time_to_cc>:
}
   24476:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2447a:	4770      	bx	lr

0002447c <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2447c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   24480:	b672      	cpsid	i
}
   24482:	4770      	bx	lr

00024484 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   24484:	f380 8810 	msr	PRIMASK, r0
}
   24488:	4770      	bx	lr

0002448a <set_absolute_alarm>:
{
   2448a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2448c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2448e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   24492:	f7f6 f893 	bl	1a5bc <get_comparator>
   24496:	4607      	mov	r7, r0
   24498:	e019      	b.n	244ce <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   2449a:	2013      	movs	r0, #19
   2449c:	f001 f979 	bl	25792 <z_impl_k_busy_wait>
}
   244a0:	e022      	b.n	244e8 <set_absolute_alarm+0x5e>
		event_clear(chan);
   244a2:	4630      	mov	r0, r6
   244a4:	f7ff ffdb 	bl	2445e <event_clear>
		event_enable(chan);
   244a8:	4630      	mov	r0, r6
   244aa:	f7f6 f88f 	bl	1a5cc <event_enable>
		set_comparator(chan, cc_val);
   244ae:	4629      	mov	r1, r5
   244b0:	4630      	mov	r0, r6
   244b2:	f7f6 f879 	bl	1a5a8 <set_comparator>
		now2 = counter();
   244b6:	f7f6 f89d 	bl	1a5f4 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   244ba:	4284      	cmp	r4, r0
   244bc:	d01e      	beq.n	244fc <set_absolute_alarm+0x72>
   244be:	1c81      	adds	r1, r0, #2
   244c0:	4628      	mov	r0, r5
   244c2:	f7ff ffc8 	bl	24456 <counter_sub>
	} while ((now2 != now) &&
   244c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   244ca:	d917      	bls.n	244fc <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   244cc:	462f      	mov	r7, r5
		now = counter();
   244ce:	f7f6 f891 	bl	1a5f4 <counter>
   244d2:	4604      	mov	r4, r0
		set_comparator(chan, now);
   244d4:	4601      	mov	r1, r0
   244d6:	4630      	mov	r0, r6
   244d8:	f7f6 f866 	bl	1a5a8 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   244dc:	4621      	mov	r1, r4
   244de:	4638      	mov	r0, r7
   244e0:	f7ff ffb9 	bl	24456 <counter_sub>
   244e4:	2801      	cmp	r0, #1
   244e6:	d0d8      	beq.n	2449a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   244e8:	1ca7      	adds	r7, r4, #2
   244ea:	4639      	mov	r1, r7
   244ec:	4628      	mov	r0, r5
   244ee:	f7ff ffb2 	bl	24456 <counter_sub>
   244f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   244f6:	d9d4      	bls.n	244a2 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   244f8:	463d      	mov	r5, r7
   244fa:	e7d2      	b.n	244a2 <set_absolute_alarm+0x18>
}
   244fc:	4628      	mov	r0, r5
   244fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024500 <compare_set>:
{
   24500:	b5f0      	push	{r4, r5, r6, r7, lr}
   24502:	b083      	sub	sp, #12
   24504:	4604      	mov	r4, r0
   24506:	4617      	mov	r7, r2
   24508:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2450a:	f7f6 f879 	bl	1a600 <compare_int_lock>
   2450e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   24510:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24512:	9301      	str	r3, [sp, #4]
   24514:	9b08      	ldr	r3, [sp, #32]
   24516:	9300      	str	r3, [sp, #0]
   24518:	463a      	mov	r2, r7
   2451a:	462b      	mov	r3, r5
   2451c:	4620      	mov	r0, r4
   2451e:	f7f6 f95d 	bl	1a7dc <compare_set_nolocks>
   24522:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   24524:	4631      	mov	r1, r6
   24526:	4620      	mov	r0, r4
   24528:	f7f6 f8ce 	bl	1a6c8 <compare_int_unlock>
}
   2452c:	4628      	mov	r0, r5
   2452e:	b003      	add	sp, #12
   24530:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024532 <sys_clock_cycle_get_32>:
{
   24532:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   24534:	f7f6 f932 	bl	1a79c <z_nrf_rtc_timer_read>
}
   24538:	bd08      	pop	{r3, pc}

0002453a <event_packet_is_discardable>:
	switch (hdr->evt) {
   2453a:	7803      	ldrb	r3, [r0, #0]
   2453c:	2b3e      	cmp	r3, #62	; 0x3e
   2453e:	d003      	beq.n	24548 <event_packet_is_discardable+0xe>
   24540:	2bff      	cmp	r3, #255	; 0xff
   24542:	d008      	beq.n	24556 <event_packet_is_discardable+0x1c>
   24544:	2000      	movs	r0, #0
   24546:	4770      	bx	lr
		switch (me->subevent) {
   24548:	7883      	ldrb	r3, [r0, #2]
   2454a:	2b02      	cmp	r3, #2
   2454c:	d001      	beq.n	24552 <event_packet_is_discardable+0x18>
			return false;
   2454e:	2000      	movs	r0, #0
   24550:	4770      	bx	lr
			return true;
   24552:	2001      	movs	r0, #1
   24554:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   24556:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   24558:	2b80      	cmp	r3, #128	; 0x80
   2455a:	d001      	beq.n	24560 <event_packet_is_discardable+0x26>
			return false;
   2455c:	2000      	movs	r0, #0
}
   2455e:	4770      	bx	lr
			return true;
   24560:	2001      	movs	r0, #1
   24562:	4770      	bx	lr

00024564 <hci_driver_send>:
{
   24564:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   24566:	8983      	ldrh	r3, [r0, #12]
   24568:	b183      	cbz	r3, 2458c <hci_driver_send+0x28>
   2456a:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2456c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2456e:	b14b      	cbz	r3, 24584 <hci_driver_send+0x20>
   24570:	2b02      	cmp	r3, #2
   24572:	d10e      	bne.n	24592 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   24574:	f7f6 fdba 	bl	1b0ec <acl_handle>
   24578:	4605      	mov	r5, r0
	if (!err) {
   2457a:	b965      	cbnz	r5, 24596 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2457c:	4620      	mov	r0, r4
   2457e:	f7ff fb96 	bl	23cae <net_buf_unref>
   24582:	e008      	b.n	24596 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   24584:	f7f6 fdcc 	bl	1b120 <cmd_handle>
   24588:	4605      	mov	r5, r0
		break;
   2458a:	e7f6      	b.n	2457a <hci_driver_send+0x16>
		return -EINVAL;
   2458c:	f06f 0515 	mvn.w	r5, #21
   24590:	e001      	b.n	24596 <hci_driver_send+0x32>
	switch (type) {
   24592:	f06f 0515 	mvn.w	r5, #21
}
   24596:	4628      	mov	r0, r5
   24598:	bd38      	pop	{r3, r4, r5, pc}

0002459a <fetch_and_process_hci_evt>:
{
   2459a:	b538      	push	{r3, r4, r5, lr}
   2459c:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2459e:	f04f 30ff 	mov.w	r0, #4294967295
   245a2:	f04f 31ff 	mov.w	r1, #4294967295
   245a6:	f7f6 fd2f 	bl	1b008 <multithreading_lock_acquire>
	if (!errcode) {
   245aa:	4605      	mov	r5, r0
   245ac:	b110      	cbz	r0, 245b4 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   245ae:	b145      	cbz	r5, 245c2 <fetch_and_process_hci_evt+0x28>
		return false;
   245b0:	2000      	movs	r0, #0
}
   245b2:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   245b4:	4620      	mov	r0, r4
   245b6:	f7f6 ffa1 	bl	1b4fc <hci_internal_evt_get>
   245ba:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   245bc:	f7f6 fd2e 	bl	1b01c <multithreading_lock_release>
   245c0:	e7f5      	b.n	245ae <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   245c2:	4620      	mov	r0, r4
   245c4:	f7f6 fdee 	bl	1b1a4 <event_packet_process>
	return true;
   245c8:	2001      	movs	r0, #1
   245ca:	e7f2      	b.n	245b2 <fetch_and_process_hci_evt+0x18>

000245cc <fetch_and_process_acl_data>:
{
   245cc:	b538      	push	{r3, r4, r5, lr}
   245ce:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   245d0:	f04f 30ff 	mov.w	r0, #4294967295
   245d4:	f04f 31ff 	mov.w	r1, #4294967295
   245d8:	f7f6 fd16 	bl	1b008 <multithreading_lock_acquire>
	if (!errcode) {
   245dc:	4605      	mov	r5, r0
   245de:	b110      	cbz	r0, 245e6 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   245e0:	b145      	cbz	r5, 245f4 <fetch_and_process_acl_data+0x28>
		return false;
   245e2:	2000      	movs	r0, #0
}
   245e4:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   245e6:	4620      	mov	r0, r4
   245e8:	f7e8 ffe6 	bl	d5b8 <sdc_hci_data_get>
   245ec:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   245ee:	f7f6 fd15 	bl	1b01c <multithreading_lock_release>
   245f2:	e7f5      	b.n	245e0 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   245f4:	4620      	mov	r0, r4
   245f6:	f7f6 fe0d 	bl	1b214 <data_packet_process>
	return true;
   245fa:	2001      	movs	r0, #1
   245fc:	e7f2      	b.n	245e4 <fetch_and_process_acl_data+0x18>

000245fe <configure_supported_features>:
{
   245fe:	b508      	push	{r3, lr}
			err = sdc_support_scan();
   24600:	f7e0 f818 	bl	4634 <sdc_support_scan>
			if (err) {
   24604:	b948      	cbnz	r0, 2461a <configure_supported_features+0x1c>
		err = sdc_support_master();
   24606:	f7e0 f805 	bl	4614 <sdc_support_master>
		if (err) {
   2460a:	b948      	cbnz	r0, 24620 <configure_supported_features+0x22>
		err = sdc_support_dle();
   2460c:	f7df ffe2 	bl	45d4 <sdc_support_dle>
		if (err) {
   24610:	b948      	cbnz	r0, 24626 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   24612:	f7df ffef 	bl	45f4 <sdc_support_le_2m_phy>
		if (err) {
   24616:	b948      	cbnz	r0, 2462c <configure_supported_features+0x2e>
}
   24618:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2461a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2461e:	e7fb      	b.n	24618 <configure_supported_features+0x1a>
			return -ENOTSUP;
   24620:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24624:	e7f8      	b.n	24618 <configure_supported_features+0x1a>
			return -ENOTSUP;
   24626:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2462a:	e7f5      	b.n	24618 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2462c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24630:	e7f2      	b.n	24618 <configure_supported_features+0x1a>

00024632 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   24632:	f242 0344 	movw	r3, #8260	; 0x2044
   24636:	4298      	cmp	r0, r3
   24638:	d834      	bhi.n	246a4 <command_generates_command_complete_event+0x72>
   2463a:	f242 030d 	movw	r3, #8205	; 0x200d
   2463e:	4298      	cmp	r0, r3
   24640:	d20b      	bcs.n	2465a <command_generates_command_complete_event+0x28>
   24642:	f240 4306 	movw	r3, #1030	; 0x406
   24646:	4298      	cmp	r0, r3
   24648:	d02e      	beq.n	246a8 <command_generates_command_complete_event+0x76>
   2464a:	f240 431d 	movw	r3, #1053	; 0x41d
   2464e:	4298      	cmp	r0, r3
   24650:	d001      	beq.n	24656 <command_generates_command_complete_event+0x24>
		return true;
   24652:	2001      	movs	r0, #1
   24654:	4770      	bx	lr
	switch (hci_opcode) {
   24656:	2000      	movs	r0, #0
   24658:	4770      	bx	lr
   2465a:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   2465e:	380d      	subs	r0, #13
   24660:	2837      	cmp	r0, #55	; 0x37
   24662:	d823      	bhi.n	246ac <command_generates_command_complete_event+0x7a>
   24664:	e8df f000 	tbb	[pc, r0]
   24668:	2222221c 	.word	0x2222221c
   2466c:	221c2222 	.word	0x221c2222
   24670:	22221c22 	.word	0x22221c22
   24674:	2222221c 	.word	0x2222221c
   24678:	22222222 	.word	0x22222222
   2467c:	22222222 	.word	0x22222222
   24680:	22222222 	.word	0x22222222
   24684:	22222222 	.word	0x22222222
   24688:	22222222 	.word	0x22222222
   2468c:	22221c22 	.word	0x22221c22
   24690:	22222222 	.word	0x22222222
   24694:	22222222 	.word	0x22222222
   24698:	22222222 	.word	0x22222222
   2469c:	1c1c2222 	.word	0x1c1c2222
   246a0:	2000      	movs	r0, #0
   246a2:	4770      	bx	lr
		return true;
   246a4:	2001      	movs	r0, #1
   246a6:	4770      	bx	lr
	switch (hci_opcode) {
   246a8:	2000      	movs	r0, #0
   246aa:	4770      	bx	lr
		return true;
   246ac:	2001      	movs	r0, #1
}
   246ae:	4770      	bx	lr

000246b0 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   246b0:	230f      	movs	r3, #15
   246b2:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   246b4:	2304      	movs	r3, #4
   246b6:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   246b8:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   246ba:	2301      	movs	r3, #1
   246bc:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   246be:	8081      	strh	r1, [r0, #4]
}
   246c0:	4770      	bx	lr

000246c2 <encode_command_complete_header>:
{
   246c2:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   246c4:	240e      	movs	r4, #14
   246c6:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   246c8:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   246ca:	2201      	movs	r2, #1
   246cc:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   246ce:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   246d2:	7143      	strb	r3, [r0, #5]
}
   246d4:	bc10      	pop	{r4}
   246d6:	4770      	bx	lr

000246d8 <le_read_supported_states>:
	*buf = states1;
   246d8:	2370      	movs	r3, #112	; 0x70
   246da:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   246dc:	2340      	movs	r3, #64	; 0x40
   246de:	7103      	strb	r3, [r0, #4]
}
   246e0:	4770      	bx	lr

000246e2 <status_param_cmd_put>:
}
   246e2:	2001      	movs	r0, #1
   246e4:	4770      	bx	lr

000246e6 <link_control_cmd_put>:
{
   246e6:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   246e8:	7842      	ldrb	r2, [r0, #1]
   246ea:	f810 3b03 	ldrb.w	r3, [r0], #3
   246ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   246f2:	b21b      	sxth	r3, r3
	switch (opcode)	{
   246f4:	f240 4206 	movw	r2, #1030	; 0x406
   246f8:	4293      	cmp	r3, r2
   246fa:	d005      	beq.n	24708 <link_control_cmd_put+0x22>
   246fc:	f240 421d 	movw	r2, #1053	; 0x41d
   24700:	4293      	cmp	r3, r2
   24702:	d004      	beq.n	2470e <link_control_cmd_put+0x28>
   24704:	2001      	movs	r0, #1
}
   24706:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   24708:	f7e9 f8ad 	bl	d866 <sdc_hci_cmd_lc_disconnect>
   2470c:	e7fb      	b.n	24706 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2470e:	f7e9 f8ac 	bl	d86a <sdc_hci_cmd_lc_read_remote_version_information>
   24712:	e7f8      	b.n	24706 <link_control_cmd_put+0x20>

00024714 <controller_and_baseband_cmd_put>:
{
   24714:	b538      	push	{r3, r4, r5, lr}
   24716:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   24718:	3003      	adds	r0, #3
   2471a:	7865      	ldrb	r5, [r4, #1]
   2471c:	7823      	ldrb	r3, [r4, #0]
   2471e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   24722:	b21b      	sxth	r3, r3
	switch (opcode)	{
   24724:	f640 4463 	movw	r4, #3171	; 0xc63
   24728:	42a3      	cmp	r3, r4
   2472a:	d02c      	beq.n	24786 <controller_and_baseband_cmd_put+0x72>
   2472c:	f101 0106 	add.w	r1, r1, #6
   24730:	dc16      	bgt.n	24760 <controller_and_baseband_cmd_put+0x4c>
   24732:	f640 4403 	movw	r4, #3075	; 0xc03
   24736:	42a3      	cmp	r3, r4
   24738:	d022      	beq.n	24780 <controller_and_baseband_cmd_put+0x6c>
   2473a:	f640 442d 	movw	r4, #3117	; 0xc2d
   2473e:	42a3      	cmp	r3, r4
   24740:	d105      	bne.n	2474e <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   24742:	7813      	ldrb	r3, [r2, #0]
   24744:	3303      	adds	r3, #3
   24746:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   24748:	f7e8 ff5d 	bl	d606 <sdc_hci_cmd_cb_read_transmit_power_level>
   2474c:	e007      	b.n	2475e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2474e:	f640 4201 	movw	r2, #3073	; 0xc01
   24752:	4293      	cmp	r3, r2
   24754:	d102      	bne.n	2475c <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   24756:	f7e8 ff58 	bl	d60a <sdc_hci_cmd_cb_set_event_mask>
   2475a:	e000      	b.n	2475e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2475c:	2001      	movs	r0, #1
}
   2475e:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   24760:	f640 447b 	movw	r4, #3195	; 0xc7b
   24764:	42a3      	cmp	r3, r4
   24766:	d011      	beq.n	2478c <controller_and_baseband_cmd_put+0x78>
   24768:	f640 447c 	movw	r4, #3196	; 0xc7c
   2476c:	42a3      	cmp	r3, r4
   2476e:	d105      	bne.n	2477c <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   24770:	7813      	ldrb	r3, [r2, #0]
   24772:	3302      	adds	r3, #2
   24774:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   24776:	f7e8 ff52 	bl	d61e <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2477a:	e7f0      	b.n	2475e <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2477c:	2001      	movs	r0, #1
   2477e:	e7ee      	b.n	2475e <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   24780:	f7e0 f898 	bl	48b4 <sdc_hci_cmd_cb_reset>
   24784:	e7eb      	b.n	2475e <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   24786:	f7e8 ff45 	bl	d614 <sdc_hci_cmd_cb_set_event_mask_page_2>
   2478a:	e7e8      	b.n	2475e <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   2478c:	7813      	ldrb	r3, [r2, #0]
   2478e:	3304      	adds	r3, #4
   24790:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   24792:	f7e8 ff36 	bl	d602 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   24796:	e7e2      	b.n	2475e <controller_and_baseband_cmd_put+0x4a>

00024798 <supported_commands>:
{
   24798:	b510      	push	{r4, lr}
   2479a:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2479c:	222e      	movs	r2, #46	; 0x2e
   2479e:	2100      	movs	r1, #0
   247a0:	f001 f941 	bl	25a26 <memset>
	cmds->hci_disconnect = 1;
   247a4:	2320      	movs	r3, #32
   247a6:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   247a8:	2380      	movs	r3, #128	; 0x80
   247aa:	70a3      	strb	r3, [r4, #2]
	cmds->hci_reset = 1;
   247ac:	23c0      	movs	r3, #192	; 0xc0
   247ae:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   247b0:	2304      	movs	r3, #4
   247b2:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_supported_features = 1;
   247b4:	2328      	movs	r3, #40	; 0x28
   247b6:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   247b8:	2302      	movs	r3, #2
   247ba:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   247bc:	2304      	movs	r3, #4
   247be:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_random_address = 1;
   247c0:	2317      	movs	r3, #23
   247c2:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_clear_white_list = 1;
   247c4:	23fc      	movs	r3, #252	; 0xfc
   247c6:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_rand = 1;
   247c8:	23ff      	movs	r3, #255	; 0xff
   247ca:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_test_end = 1;
   247cc:	2379      	movs	r3, #121	; 0x79
   247ce:	7723      	strb	r3, [r4, #28]
	cmds->hci_write_authenticated_payload_timeout = 1;
   247d0:	2330      	movs	r3, #48	; 0x30
   247d2:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_read_suggested_default_data_length = 1;
   247d6:	23c0      	movs	r3, #192	; 0xc0
   247d8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_resolving_list_size = 1;
   247dc:	2379      	movs	r3, #121	; 0x79
   247de:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_receiver_test_v2 = 1;
   247e2:	23fe      	movs	r3, #254	; 0xfe
   247e4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   247e8:	2301      	movs	r3, #1
   247ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   247ee:	2380      	movs	r3, #128	; 0x80
   247f0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   247f4:	2304      	movs	r3, #4
   247f6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   247fa:	bd10      	pop	{r4, pc}

000247fc <supported_features>:
   247fc:	2300      	movs	r3, #0
   247fe:	6003      	str	r3, [r0, #0]
   24800:	6043      	str	r3, [r0, #4]
	features->bdedr_not_supported = 1;
   24802:	7903      	ldrb	r3, [r0, #4]
	features->le_supported = 1;
   24804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   24808:	7103      	strb	r3, [r0, #4]
}
   2480a:	4770      	bx	lr

0002480c <info_param_cmd_put>:
{
   2480c:	b538      	push	{r3, r4, r5, lr}
   2480e:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   24810:	1d88      	adds	r0, r1, #6
   24812:	7865      	ldrb	r5, [r4, #1]
   24814:	7823      	ldrb	r3, [r4, #0]
   24816:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2481a:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2481c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   24820:	3b01      	subs	r3, #1
   24822:	2b08      	cmp	r3, #8
   24824:	d820      	bhi.n	24868 <info_param_cmd_put+0x5c>
   24826:	e8df f003 	tbb	[pc, r3]
   2482a:	0b05      	.short	0x0b05
   2482c:	1f1f1f12 	.word	0x1f1f1f12
   24830:	1f1f      	.short	0x1f1f
   24832:	19          	.byte	0x19
   24833:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   24834:	7813      	ldrb	r3, [r2, #0]
   24836:	3308      	adds	r3, #8
   24838:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2483a:	f7e8 ffcd 	bl	d7d8 <sdc_hci_cmd_ip_read_local_version_information>
   2483e:	e014      	b.n	2486a <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   24840:	7813      	ldrb	r3, [r2, #0]
   24842:	3340      	adds	r3, #64	; 0x40
   24844:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   24846:	f7ff ffa7 	bl	24798 <supported_commands>
		return 0;
   2484a:	2000      	movs	r0, #0
   2484c:	e00d      	b.n	2486a <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2484e:	7813      	ldrb	r3, [r2, #0]
   24850:	3308      	adds	r3, #8
   24852:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   24854:	f7ff ffd2 	bl	247fc <supported_features>
		return 0;
   24858:	2000      	movs	r0, #0
   2485a:	e006      	b.n	2486a <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2485c:	7813      	ldrb	r3, [r2, #0]
   2485e:	3306      	adds	r3, #6
   24860:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   24862:	f7e8 ffb7 	bl	d7d4 <sdc_hci_cmd_ip_read_bd_addr>
   24866:	e000      	b.n	2486a <info_param_cmd_put+0x5e>
   24868:	2001      	movs	r0, #1
}
   2486a:	bd38      	pop	{r3, r4, r5, pc}

0002486c <le_supported_features>:
   2486c:	2300      	movs	r3, #0
   2486e:	6003      	str	r3, [r0, #0]
   24870:	7103      	strb	r3, [r0, #4]
	features->le_encryption = 1;
   24872:	7803      	ldrb	r3, [r0, #0]
	features->extended_scanner_filter_policies = 1;
   24874:	f043 03f5 	orr.w	r3, r3, #245	; 0xf5
   24878:	7003      	strb	r3, [r0, #0]
	features->le_2m_phy = 1;
   2487a:	7843      	ldrb	r3, [r0, #1]
	features->channel_selection_algorithm_2 = 1;
   2487c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   24880:	7043      	strb	r3, [r0, #1]
}
   24882:	4770      	bx	lr

00024884 <vs_zephyr_supported_commands>:
   24884:	2300      	movs	r3, #0
   24886:	8003      	strh	r3, [r0, #0]
	cmds->read_version_info = 1;
   24888:	7803      	ldrb	r3, [r0, #0]
	cmds->write_bd_addr = 1;
   2488a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2488e:	7003      	strb	r3, [r0, #0]
	cmds->read_static_addresses = 1;
   24890:	7843      	ldrb	r3, [r0, #1]
	cmds->read_chip_temperature = 1;
   24892:	f043 0307 	orr.w	r3, r3, #7
   24896:	7043      	strb	r3, [r0, #1]
}
   24898:	4770      	bx	lr

0002489a <vs_supported_commands>:
	cmds->event_length_set = 1;
   2489a:	233f      	movs	r3, #63	; 0x3f
   2489c:	7003      	strb	r3, [r0, #0]
}
   2489e:	4770      	bx	lr

000248a0 <le_controller_cmd_put>:
{
   248a0:	b538      	push	{r3, r4, r5, lr}
   248a2:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   248a4:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   248a6:	3106      	adds	r1, #6
   248a8:	7865      	ldrb	r5, [r4, #1]
   248aa:	7823      	ldrb	r3, [r4, #0]
   248ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   248b0:	b21b      	sxth	r3, r3
	switch (opcode)	{
   248b2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   248b6:	3b01      	subs	r3, #1
   248b8:	2b4d      	cmp	r3, #77	; 0x4d
   248ba:	f200 80c4 	bhi.w	24a46 <le_controller_cmd_put+0x1a6>
   248be:	e8df f003 	tbb	[pc, r3]
   248c2:	2a27      	.short	0x2a27
   248c4:	c239c231 	.word	0xc239c231
   248c8:	c2c2c2c2 	.word	0xc2c2c2c2
   248cc:	45423f3c 	.word	0x45423f3c
   248d0:	55524f48 	.word	0x55524f48
   248d4:	645e5b58 	.word	0x645e5b58
   248d8:	c2746d67 	.word	0xc2746d67
   248dc:	c2c277c2 	.word	0xc2c277c2
   248e0:	7fc2c2c2 	.word	0x7fc2c2c2
   248e4:	c2c28c85 	.word	0xc2c28c85
   248e8:	9895928f 	.word	0x9895928f
   248ec:	a29fc2c2 	.word	0xa29fc2c2
   248f0:	b5b2aca5 	.word	0xb5b2aca5
   248f4:	c2c2c2c2 	.word	0xc2c2c2c2
   248f8:	c2c2c2c2 	.word	0xc2c2c2c2
   248fc:	c2c2c2c2 	.word	0xc2c2c2c2
   24900:	c2c2c2c2 	.word	0xc2c2c2c2
   24904:	c2c2c2c2 	.word	0xc2c2c2c2
   24908:	c2c2c2c2 	.word	0xc2c2c2c2
   2490c:	bfc2c2b8 	.word	0xbfc2c2b8
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   24910:	f7e8 ff94 	bl	d83c <sdc_hci_cmd_le_set_event_mask>
   24914:	e098      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   24916:	7813      	ldrb	r3, [r2, #0]
   24918:	3303      	adds	r3, #3
   2491a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2491c:	4608      	mov	r0, r1
   2491e:	f7e8 ff71 	bl	d804 <sdc_hci_cmd_le_read_buffer_size>
   24922:	e091      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   24924:	7813      	ldrb	r3, [r2, #0]
   24926:	3308      	adds	r3, #8
   24928:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2492a:	4608      	mov	r0, r1
   2492c:	f7ff ff9e 	bl	2486c <le_supported_features>
		return 0;
   24930:	2000      	movs	r0, #0
   24932:	e089      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   24934:	f7e8 ff8d 	bl	d852 <sdc_hci_cmd_le_set_random_address>
   24938:	e086      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2493a:	f7e8 ff90 	bl	d85e <sdc_hci_cmd_le_set_scan_params>
   2493e:	e083      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   24940:	f7e8 ff8b 	bl	d85a <sdc_hci_cmd_le_set_scan_enable>
   24944:	e080      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   24946:	f7e8 ff53 	bl	d7f0 <sdc_hci_cmd_le_create_conn>
   2494a:	e07d      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn_cancel();
   2494c:	f7e8 ff52 	bl	d7f4 <sdc_hci_cmd_le_create_conn_cancel>
   24950:	e07a      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   24952:	7813      	ldrb	r3, [r2, #0]
   24954:	3301      	adds	r3, #1
   24956:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   24958:	4608      	mov	r0, r1
   2495a:	f7e8 ff63 	bl	d824 <sdc_hci_cmd_le_read_white_list_size>
   2495e:	e073      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_white_list();
   24960:	f7e8 ff42 	bl	d7e8 <sdc_hci_cmd_le_clear_white_list>
   24964:	e070      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   24966:	f7e8 ff3b 	bl	d7e0 <sdc_hci_cmd_le_add_device_to_white_list>
   2496a:	e06d      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   2496c:	f7e8 ff5e 	bl	d82c <sdc_hci_cmd_le_remove_device_from_white_list>
   24970:	e06a      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   24972:	f7e8 ff3b 	bl	d7ec <sdc_hci_cmd_le_conn_update>
   24976:	e067      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   24978:	f7e8 ff65 	bl	d846 <sdc_hci_cmd_le_set_host_channel_classification>
   2497c:	e064      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2497e:	7813      	ldrb	r3, [r2, #0]
   24980:	3307      	adds	r3, #7
   24982:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   24984:	f7e8 ff40 	bl	d808 <sdc_hci_cmd_le_read_channel_map>
   24988:	e05e      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2498a:	f7e8 ff43 	bl	d814 <sdc_hci_cmd_le_read_remote_features>
   2498e:	e05b      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   24990:	7813      	ldrb	r3, [r2, #0]
   24992:	3310      	adds	r3, #16
   24994:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   24996:	f7e8 ff31 	bl	d7fc <sdc_hci_cmd_le_encrypt>
   2499a:	e055      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2499c:	7813      	ldrb	r3, [r2, #0]
   2499e:	3308      	adds	r3, #8
   249a0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   249a2:	4608      	mov	r0, r1
   249a4:	f7e8 ff2c 	bl	d800 <sdc_hci_cmd_le_rand>
   249a8:	e04e      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   249aa:	f7e8 ff25 	bl	d7f8 <sdc_hci_cmd_le_enable_encryption>
   249ae:	e04b      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   249b0:	7813      	ldrb	r3, [r2, #0]
   249b2:	3308      	adds	r3, #8
   249b4:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   249b6:	4608      	mov	r0, r1
   249b8:	f7ff fe8e 	bl	246d8 <le_read_supported_states>
		return 0;
   249bc:	2000      	movs	r0, #0
   249be:	e043      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   249c0:	7813      	ldrb	r3, [r2, #0]
   249c2:	3302      	adds	r3, #2
   249c4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   249c6:	f7e8 ff35 	bl	d834 <sdc_hci_cmd_le_set_data_length>
   249ca:	e03d      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out +=
   249cc:	7813      	ldrb	r3, [r2, #0]
   249ce:	3304      	adds	r3, #4
   249d0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   249d2:	4608      	mov	r0, r1
   249d4:	f7e8 ff22 	bl	d81c <sdc_hci_cmd_le_read_suggested_default_data_length>
   249d8:	e036      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   249da:	f7e8 ff42 	bl	d862 <sdc_hci_cmd_le_write_suggested_default_data_length>
   249de:	e033      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   249e0:	f7e8 fefc 	bl	d7dc <sdc_hci_cmd_le_add_device_to_resolving_list>
   249e4:	e030      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   249e6:	f7e8 ff1f 	bl	d828 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   249ea:	e02d      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_resolving_list();
   249ec:	f7e8 fefa 	bl	d7e4 <sdc_hci_cmd_le_clear_resolving_list>
   249f0:	e02a      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   249f2:	7813      	ldrb	r3, [r2, #0]
   249f4:	3301      	adds	r3, #1
   249f6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   249f8:	4608      	mov	r0, r1
   249fa:	f7e8 ff0d 	bl	d818 <sdc_hci_cmd_le_read_resolving_list_size>
   249fe:	e023      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   24a00:	f7e8 ff16 	bl	d830 <sdc_hci_cmd_le_set_address_resolution_enable>
   24a04:	e020      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   24a06:	f7e8 ff26 	bl	d856 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   24a0a:	e01d      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   24a0c:	7813      	ldrb	r3, [r2, #0]
   24a0e:	3308      	adds	r3, #8
   24a10:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   24a12:	4608      	mov	r0, r1
   24a14:	f7e8 fefa 	bl	d80c <sdc_hci_cmd_le_read_max_data_length>
   24a18:	e016      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   24a1a:	7813      	ldrb	r3, [r2, #0]
   24a1c:	3304      	adds	r3, #4
   24a1e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   24a20:	f7e8 fef6 	bl	d810 <sdc_hci_cmd_le_read_phy>
   24a24:	e010      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   24a26:	f7e8 ff07 	bl	d838 <sdc_hci_cmd_le_set_default_phy>
   24a2a:	e00d      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   24a2c:	f7e8 ff0d 	bl	d84a <sdc_hci_cmd_le_set_phy>
   24a30:	e00a      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   24a32:	7813      	ldrb	r3, [r2, #0]
   24a34:	3302      	adds	r3, #2
   24a36:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   24a38:	4608      	mov	r0, r1
   24a3a:	f7e8 fef1 	bl	d820 <sdc_hci_cmd_le_read_transmit_power>
   24a3e:	e003      	b.n	24a48 <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   24a40:	f7e8 ff05 	bl	d84e <sdc_hci_cmd_le_set_privacy_mode>
   24a44:	e000      	b.n	24a48 <le_controller_cmd_put+0x1a8>
   24a46:	2001      	movs	r0, #1
}
   24a48:	bd38      	pop	{r3, r4, r5, pc}

00024a4a <vs_cmd_put>:
{
   24a4a:	b538      	push	{r3, r4, r5, lr}
   24a4c:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   24a4e:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   24a50:	3106      	adds	r1, #6
   24a52:	7865      	ldrb	r5, [r4, #1]
   24a54:	7823      	ldrb	r3, [r4, #0]
   24a56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   24a5a:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   24a5e:	42a3      	cmp	r3, r4
   24a60:	d90f      	bls.n	24a82 <vs_cmd_put+0x38>
   24a62:	f64f 5405 	movw	r4, #64773	; 0xfd05
   24a66:	42a3      	cmp	r3, r4
   24a68:	d85b      	bhi.n	24b22 <vs_cmd_put+0xd8>
   24a6a:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   24a6e:	d319      	bcc.n	24aa4 <vs_cmd_put+0x5a>
   24a70:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   24a74:	2b05      	cmp	r3, #5
   24a76:	d850      	bhi.n	24b1a <vs_cmd_put+0xd0>
   24a78:	e8df f003 	tbb	[pc, r3]
   24a7c:	46434038 	.word	0x46434038
   24a80:	4c49      	.short	0x4c49
   24a82:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   24a86:	d801      	bhi.n	24a8c <vs_cmd_put+0x42>
   24a88:	2001      	movs	r0, #1
}
   24a8a:	bd38      	pop	{r3, r4, r5, pc}
   24a8c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   24a90:	3b01      	subs	r3, #1
   24a92:	2b09      	cmp	r3, #9
   24a94:	d843      	bhi.n	24b1e <vs_cmd_put+0xd4>
   24a96:	e8df f003 	tbb	[pc, r3]
   24a9a:	0e07      	.short	0x0e07
   24a9c:	26424242 	.word	0x26424242
   24aa0:	1f164242 	.word	0x1f164242
	switch (opcode)	{
   24aa4:	2001      	movs	r0, #1
   24aa6:	e7f0      	b.n	24a8a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   24aa8:	7813      	ldrb	r3, [r2, #0]
   24aaa:	330c      	adds	r3, #12
   24aac:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   24aae:	4608      	mov	r0, r1
   24ab0:	f7df ff14 	bl	48dc <sdc_hci_cmd_vs_zephyr_read_version_info>
   24ab4:	e7e9      	b.n	24a8a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   24ab6:	7813      	ldrb	r3, [r2, #0]
   24ab8:	3340      	adds	r3, #64	; 0x40
   24aba:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   24abc:	4608      	mov	r0, r1
   24abe:	f7ff fee1 	bl	24884 <vs_zephyr_supported_commands>
		return 0;
   24ac2:	2000      	movs	r0, #0
   24ac4:	e7e1      	b.n	24a8a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   24ac6:	7813      	ldrb	r3, [r2, #0]
   24ac8:	3301      	adds	r3, #1
   24aca:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   24acc:	3316      	adds	r3, #22
   24ace:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   24ad0:	4608      	mov	r0, r1
   24ad2:	f7e8 fe2e 	bl	d732 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   24ad6:	e7d8      	b.n	24a8a <vs_cmd_put+0x40>
		*param_length_out +=
   24ad8:	7813      	ldrb	r3, [r2, #0]
   24ada:	3320      	adds	r3, #32
   24adc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   24ade:	4608      	mov	r0, r1
   24ae0:	f7e8 fdda 	bl	d698 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   24ae4:	e7d1      	b.n	24a8a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   24ae6:	f7e8 fe73 	bl	d7d0 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   24aea:	e7ce      	b.n	24a8a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   24aec:	7813      	ldrb	r3, [r2, #0]
   24aee:	3340      	adds	r3, #64	; 0x40
   24af0:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   24af2:	4608      	mov	r0, r1
   24af4:	f7ff fed1 	bl	2489a <vs_supported_commands>
		return 0;
   24af8:	2000      	movs	r0, #0
   24afa:	e7c6      	b.n	24a8a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   24afc:	f7e8 fdc5 	bl	d68a <sdc_hci_cmd_vs_llpm_mode_set>
   24b00:	e7c3      	b.n	24a8a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   24b02:	f7e8 fd96 	bl	d632 <sdc_hci_cmd_vs_conn_update>
   24b06:	e7c0      	b.n	24a8a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   24b08:	f7e8 fd8b 	bl	d622 <sdc_hci_cmd_vs_conn_event_extend>
   24b0c:	e7bd      	b.n	24a8a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   24b0e:	f7e8 fdbe 	bl	d68e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   24b12:	e7ba      	b.n	24a8a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   24b14:	f7e8 fdb7 	bl	d686 <sdc_hci_cmd_vs_event_length_set>
   24b18:	e7b7      	b.n	24a8a <vs_cmd_put+0x40>
	switch (opcode)	{
   24b1a:	2001      	movs	r0, #1
   24b1c:	e7b5      	b.n	24a8a <vs_cmd_put+0x40>
   24b1e:	2001      	movs	r0, #1
   24b20:	e7b3      	b.n	24a8a <vs_cmd_put+0x40>
   24b22:	2001      	movs	r0, #1
   24b24:	e7b1      	b.n	24a8a <vs_cmd_put+0x40>

00024b26 <cmd_put>:
{
   24b26:	b570      	push	{r4, r5, r6, lr}
   24b28:	b082      	sub	sp, #8
   24b2a:	460e      	mov	r6, r1
   24b2c:	7842      	ldrb	r2, [r0, #1]
   24b2e:	7805      	ldrb	r5, [r0, #0]
   24b30:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   24b34:	2304      	movs	r3, #4
   24b36:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   24b3a:	0893      	lsrs	r3, r2, #2
   24b3c:	2a23      	cmp	r2, #35	; 0x23
   24b3e:	d80b      	bhi.n	24b58 <cmd_put+0x32>
   24b40:	b21a      	sxth	r2, r3
   24b42:	2a00      	cmp	r2, #0
   24b44:	d03a      	beq.n	24bbc <cmd_put+0x96>
   24b46:	3b01      	subs	r3, #1
   24b48:	2b07      	cmp	r3, #7
   24b4a:	d839      	bhi.n	24bc0 <cmd_put+0x9a>
   24b4c:	e8df f003 	tbb	[pc, r3]
   24b50:	241e381a 	.word	0x241e381a
   24b54:	3038382a 	.word	0x3038382a
   24b58:	2b3f      	cmp	r3, #63	; 0x3f
   24b5a:	d105      	bne.n	24b68 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   24b5c:	f10d 0207 	add.w	r2, sp, #7
   24b60:	f7ff ff73 	bl	24a4a <vs_cmd_put>
   24b64:	4604      	mov	r4, r0
		break;
   24b66:	e000      	b.n	24b6a <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   24b68:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   24b6a:	4628      	mov	r0, r5
   24b6c:	f7ff fd61 	bl	24632 <command_generates_command_complete_event>
   24b70:	b108      	cbz	r0, 24b76 <cmd_put+0x50>
   24b72:	2c01      	cmp	r4, #1
   24b74:	d126      	bne.n	24bc4 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   24b76:	4622      	mov	r2, r4
   24b78:	4629      	mov	r1, r5
   24b7a:	4630      	mov	r0, r6
   24b7c:	f7ff fd98 	bl	246b0 <encode_command_status>
}
   24b80:	b002      	add	sp, #8
   24b82:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   24b84:	f7ff fdaf 	bl	246e6 <link_control_cmd_put>
   24b88:	4604      	mov	r4, r0
		break;
   24b8a:	e7ee      	b.n	24b6a <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   24b8c:	f10d 0207 	add.w	r2, sp, #7
   24b90:	f7ff fdc0 	bl	24714 <controller_and_baseband_cmd_put>
   24b94:	4604      	mov	r4, r0
		break;
   24b96:	e7e8      	b.n	24b6a <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   24b98:	f10d 0207 	add.w	r2, sp, #7
   24b9c:	f7ff fe36 	bl	2480c <info_param_cmd_put>
   24ba0:	4604      	mov	r4, r0
		break;
   24ba2:	e7e2      	b.n	24b6a <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   24ba4:	f10d 0207 	add.w	r2, sp, #7
   24ba8:	f7ff fd9b 	bl	246e2 <status_param_cmd_put>
   24bac:	4604      	mov	r4, r0
		break;
   24bae:	e7dc      	b.n	24b6a <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   24bb0:	f10d 0207 	add.w	r2, sp, #7
   24bb4:	f7ff fe74 	bl	248a0 <le_controller_cmd_put>
   24bb8:	4604      	mov	r4, r0
		break;
   24bba:	e7d6      	b.n	24b6a <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   24bbc:	2401      	movs	r4, #1
   24bbe:	e7d4      	b.n	24b6a <cmd_put+0x44>
   24bc0:	2401      	movs	r4, #1
   24bc2:	e7d2      	b.n	24b6a <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   24bc4:	4623      	mov	r3, r4
   24bc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24bca:	4629      	mov	r1, r5
   24bcc:	4630      	mov	r0, r6
   24bce:	f7ff fd78 	bl	246c2 <encode_command_complete_header>
}
   24bd2:	e7d5      	b.n	24b80 <cmd_put+0x5a>

00024bd4 <m_config_clock_source_get>:
}
   24bd4:	2001      	movs	r0, #1
   24bd6:	4770      	bx	lr

00024bd8 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24bd8:	4668      	mov	r0, sp
   24bda:	f020 0107 	bic.w	r1, r0, #7
   24bde:	468d      	mov	sp, r1
   24be0:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   24be2:	f7de fa4b 	bl	307c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   24be6:	f7ee fb5d 	bl	132a4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   24bea:	f7ee fc69 	bl	134c0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24bee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24bf2:	4685      	mov	sp, r0
   24bf4:	4770      	bx	lr

00024bf6 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24bf6:	4668      	mov	r0, sp
   24bf8:	f020 0107 	bic.w	r1, r0, #7
   24bfc:	468d      	mov	sp, r1
   24bfe:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   24c00:	f7de f9be 	bl	2f80 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   24c04:	f7ee fb4e 	bl	132a4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24c08:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24c0c:	4685      	mov	sp, r0
   24c0e:	4770      	bx	lr

00024c10 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24c10:	4668      	mov	r0, sp
   24c12:	f020 0107 	bic.w	r1, r0, #7
   24c16:	468d      	mov	sp, r1
   24c18:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   24c1a:	f7e7 ff56 	bl	caca <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   24c1e:	f7ee fb41 	bl	132a4 <_arch_isr_direct_pm>
   24c22:	f7ee fc4d 	bl	134c0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24c26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24c2a:	4685      	mov	sp, r0
   24c2c:	4770      	bx	lr

00024c2e <nrfx_clock_stop>:
	switch (domain) {
   24c2e:	2801      	cmp	r0, #1
   24c30:	d000      	beq.n	24c34 <nrfx_clock_stop+0x6>
   24c32:	4770      	bx	lr
{
   24c34:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   24c36:	f7df f839 	bl	3cac <mpsl_clock_hfclk_release>
}
   24c3a:	bd08      	pop	{r3, pc}

00024c3c <nrfx_clock_enable>:
}
   24c3c:	4770      	bx	lr

00024c3e <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   24c3e:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   24c40:	f7de fe52 	bl	38e8 <MPSL_IRQ_CLOCK_Handler>
}
   24c44:	bd08      	pop	{r3, pc}

00024c46 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   24c46:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   24c48:	f7f9 fb94 	bl	1e374 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   24c4c:	bd08      	pop	{r3, pc}

00024c4e <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   24c4e:	b510      	push	{r4, lr}
   24c50:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   24c52:	f7ee f997 	bl	12f84 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   24c56:	f7ee fa57 	bl	13108 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   24c5a:	4620      	mov	r0, r4
   24c5c:	f7ff fff3 	bl	24c46 <hw_cc3xx_init_internal>
	return res;
}
   24c60:	bd10      	pop	{r4, pc}

00024c62 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   24c62:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   24c64:	4780      	blx	r0
}
   24c66:	bd08      	pop	{r3, pc}

00024c68 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   24c68:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   24c6a:	f000 fd92 	bl	25792 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   24c6e:	bd08      	pop	{r3, pc}

00024c70 <pin_is_task_output>:
{
   24c70:	b510      	push	{r4, lr}
   24c72:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   24c74:	f7f6 ff00 	bl	1ba78 <pin_is_output>
   24c78:	b128      	cbz	r0, 24c86 <pin_is_task_output+0x16>
   24c7a:	4620      	mov	r0, r4
   24c7c:	f7f6 fee6 	bl	1ba4c <pin_in_use_by_te>
   24c80:	b118      	cbz	r0, 24c8a <pin_is_task_output+0x1a>
   24c82:	2001      	movs	r0, #1
   24c84:	e000      	b.n	24c88 <pin_is_task_output+0x18>
   24c86:	2000      	movs	r0, #0
}
   24c88:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   24c8a:	2000      	movs	r0, #0
   24c8c:	e7fc      	b.n	24c88 <pin_is_task_output+0x18>

00024c8e <pin_is_input>:
{
   24c8e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   24c90:	f7f6 fef2 	bl	1ba78 <pin_is_output>
   24c94:	f080 0001 	eor.w	r0, r0, #1
}
   24c98:	b2c0      	uxtb	r0, r0
   24c9a:	bd08      	pop	{r3, pc}

00024c9c <gpiote_polarity_to_trigger>:
}
   24c9c:	4770      	bx	lr

00024c9e <gpiote_trigger_to_polarity>:
}
   24c9e:	4770      	bx	lr

00024ca0 <is_level>:
}
   24ca0:	2803      	cmp	r0, #3
   24ca2:	bf94      	ite	ls
   24ca4:	2000      	movls	r0, #0
   24ca6:	2001      	movhi	r0, #1
   24ca8:	4770      	bx	lr

00024caa <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   24caa:	b148      	cbz	r0, 24cc0 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   24cac:	68c3      	ldr	r3, [r0, #12]
   24cae:	8818      	ldrh	r0, [r3, #0]
   24cb0:	f3c0 0008 	ubfx	r0, r0, #0, #9
   24cb4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   24cb8:	bf14      	ite	ne
   24cba:	2000      	movne	r0, #0
   24cbc:	2001      	moveq	r0, #1
   24cbe:	4770      	bx	lr
		return false;
   24cc0:	2000      	movs	r0, #0
}
   24cc2:	4770      	bx	lr

00024cc4 <k_heap_init>:
{
   24cc4:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   24cc6:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   24cca:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   24ccc:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   24cce:	f7fc fb74 	bl	213ba <sys_heap_init>
}
   24cd2:	bd10      	pop	{r4, pc}

00024cd4 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   24cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24cd8:	b087      	sub	sp, #28
   24cda:	4680      	mov	r8, r0
   24cdc:	9103      	str	r1, [sp, #12]
   24cde:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24ce0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   24ce4:	f000 fd5b 	bl	2579e <sys_clock_timeout_end_calc>
   24ce8:	4681      	mov	r9, r0
   24cea:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24cec:	f108 0314 	add.w	r3, r8, #20
   24cf0:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   24cf2:	f04f 0340 	mov.w	r3, #64	; 0x40
   24cf6:	f3ef 8511 	mrs	r5, BASEPRI
   24cfa:	f383 8812 	msr	BASEPRI_MAX, r3
   24cfe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   24d02:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   24d06:	4654      	mov	r4, sl

	while (ret == NULL) {
   24d08:	e00f      	b.n	24d2a <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24d0a:	e9cd 6700 	strd	r6, r7, [sp]
   24d0e:	f108 020c 	add.w	r2, r8, #12
   24d12:	4629      	mov	r1, r5
   24d14:	9805      	ldr	r0, [sp, #20]
   24d16:	f7f8 fbaf 	bl	1d478 <z_pend_curr>
   24d1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d1e:	f3ef 8511 	mrs	r5, BASEPRI
   24d22:	f383 8812 	msr	BASEPRI_MAX, r3
   24d26:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   24d2a:	b9b4      	cbnz	r4, 24d5a <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24d2c:	9a04      	ldr	r2, [sp, #16]
   24d2e:	9903      	ldr	r1, [sp, #12]
   24d30:	4640      	mov	r0, r8
   24d32:	f7fc fad1 	bl	212d8 <sys_heap_aligned_alloc>
   24d36:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   24d38:	f7f8 ff52 	bl	1dbe0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24d3c:	b96c      	cbnz	r4, 24d5a <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   24d3e:	ebb9 0600 	subs.w	r6, r9, r0
   24d42:	eb6b 0701 	sbc.w	r7, fp, r1
   24d46:	2e01      	cmp	r6, #1
   24d48:	f177 0300 	sbcs.w	r3, r7, #0
   24d4c:	db05      	blt.n	24d5a <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   24d4e:	f1ba 0f00 	cmp.w	sl, #0
   24d52:	d1da      	bne.n	24d0a <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   24d54:	f04f 0a01 	mov.w	sl, #1
   24d58:	e7d7      	b.n	24d0a <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   24d5a:	f385 8811 	msr	BASEPRI, r5
   24d5e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24d62:	4620      	mov	r0, r4
   24d64:	b007      	add	sp, #28
   24d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024d6a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24d6a:	b570      	push	{r4, r5, r6, lr}
   24d6c:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24d6e:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   24d72:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d76:	f3ef 8511 	mrs	r5, BASEPRI
   24d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   24d7e:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   24d82:	f7fc fa65 	bl	21250 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24d86:	f104 000c 	add.w	r0, r4, #12
   24d8a:	f000 fc3c 	bl	25606 <z_unpend_all>
   24d8e:	b920      	cbnz	r0, 24d9a <k_heap_free+0x30>
	__asm__ volatile(
   24d90:	f385 8811 	msr	BASEPRI, r5
   24d94:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24d98:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   24d9a:	4629      	mov	r1, r5
   24d9c:	4630      	mov	r0, r6
   24d9e:	f7f8 fa07 	bl	1d1b0 <z_reschedule>
   24da2:	e7f9      	b.n	24d98 <k_heap_free+0x2e>

00024da4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24da4:	68c2      	ldr	r2, [r0, #12]
   24da6:	6903      	ldr	r3, [r0, #16]
   24da8:	431a      	orrs	r2, r3
   24daa:	f012 0203 	ands.w	r2, r2, #3
   24dae:	d10d      	bne.n	24dcc <create_free_list+0x28>
	slab->free_list = NULL;
   24db0:	2100      	movs	r1, #0
   24db2:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   24db4:	e005      	b.n	24dc2 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   24db6:	6941      	ldr	r1, [r0, #20]
   24db8:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   24dba:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   24dbc:	68c1      	ldr	r1, [r0, #12]
   24dbe:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   24dc0:	3201      	adds	r2, #1
   24dc2:	6881      	ldr	r1, [r0, #8]
   24dc4:	4291      	cmp	r1, r2
   24dc6:	d8f6      	bhi.n	24db6 <create_free_list+0x12>
	return 0;
   24dc8:	2000      	movs	r0, #0
   24dca:	4770      	bx	lr
		return -EINVAL;
   24dcc:	f06f 0015 	mvn.w	r0, #21
}
   24dd0:	4770      	bx	lr

00024dd2 <k_mem_slab_init>:
{
   24dd2:	b510      	push	{r4, lr}
   24dd4:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   24dd6:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   24dd8:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   24dda:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   24ddc:	2300      	movs	r3, #0
   24dde:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   24de0:	f7ff ffe0 	bl	24da4 <create_free_list>
	if (rc < 0) {
   24de4:	2800      	cmp	r0, #0
   24de6:	db01      	blt.n	24dec <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   24de8:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   24dea:	6064      	str	r4, [r4, #4]
}
   24dec:	bd10      	pop	{r4, pc}

00024dee <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24df0:	4604      	mov	r4, r0
   24df2:	460d      	mov	r5, r1
	__asm__ volatile(
   24df4:	f04f 0340 	mov.w	r3, #64	; 0x40
   24df8:	f3ef 8611 	mrs	r6, BASEPRI
   24dfc:	f383 8812 	msr	BASEPRI_MAX, r3
   24e00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24e04:	6943      	ldr	r3, [r0, #20]
   24e06:	b163      	cbz	r3, 24e22 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   24e08:	682b      	ldr	r3, [r5, #0]
   24e0a:	6962      	ldr	r2, [r4, #20]
   24e0c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24e0e:	682b      	ldr	r3, [r5, #0]
   24e10:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   24e12:	69a3      	ldr	r3, [r4, #24]
   24e14:	3b01      	subs	r3, #1
   24e16:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   24e18:	f386 8811 	msr	BASEPRI, r6
   24e1c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24e22:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24e26:	f000 fbc3 	bl	255b0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   24e2a:	2800      	cmp	r0, #0
   24e2c:	d0ec      	beq.n	24e08 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24e2e:	682a      	ldr	r2, [r5, #0]
   24e30:	2100      	movs	r1, #0
   24e32:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24e36:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   24e38:	f000 faf8 	bl	2542c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24e3c:	4631      	mov	r1, r6
   24e3e:	4638      	mov	r0, r7
   24e40:	f7f8 f9b6 	bl	1d1b0 <z_reschedule>
			return;
   24e44:	e7ec      	b.n	24e20 <k_mem_slab_free+0x32>

00024e46 <setup_thread_stack>:
{
   24e46:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24e48:	3207      	adds	r2, #7
   24e4a:	f022 0207 	bic.w	r2, r2, #7
   24e4e:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   24e52:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   24e56:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   24e5a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   24e5e:	2200      	movs	r2, #0
   24e60:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   24e64:	18c8      	adds	r0, r1, r3
   24e66:	bc10      	pop	{r4}
   24e68:	4770      	bx	lr

00024e6a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24e6a:	f3ef 8005 	mrs	r0, IPSR
}
   24e6e:	3800      	subs	r0, #0
   24e70:	bf18      	it	ne
   24e72:	2001      	movne	r0, #1
   24e74:	4770      	bx	lr

00024e76 <k_thread_name_get>:
}
   24e76:	3078      	adds	r0, #120	; 0x78
   24e78:	4770      	bx	lr

00024e7a <z_impl_k_thread_start>:
{
   24e7a:	b508      	push	{r3, lr}
	z_sched_start(thread);
   24e7c:	f7f8 fac2 	bl	1d404 <z_sched_start>
}
   24e80:	bd08      	pop	{r3, pc}

00024e82 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   24e82:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   24e84:	2400      	movs	r4, #0
   24e86:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   24e88:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24e8a:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   24e8c:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   24e8e:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   24e90:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   24e92:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   24e94:	bc10      	pop	{r4}
   24e96:	4770      	bx	lr

00024e98 <z_impl_k_thread_create>:
{
   24e98:	b5f0      	push	{r4, r5, r6, r7, lr}
   24e9a:	b087      	sub	sp, #28
   24e9c:	4604      	mov	r4, r0
   24e9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24ea2:	2500      	movs	r5, #0
   24ea4:	9505      	str	r5, [sp, #20]
   24ea6:	9d10      	ldr	r5, [sp, #64]	; 0x40
   24ea8:	9504      	str	r5, [sp, #16]
   24eaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   24eac:	9503      	str	r5, [sp, #12]
   24eae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24eb0:	9502      	str	r5, [sp, #8]
   24eb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   24eb4:	9501      	str	r5, [sp, #4]
   24eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24eb8:	9500      	str	r5, [sp, #0]
   24eba:	f7f7 fd23 	bl	1c904 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24ebe:	f1b7 3fff 	cmp.w	r7, #4294967295
   24ec2:	bf08      	it	eq
   24ec4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24ec8:	d102      	bne.n	24ed0 <z_impl_k_thread_create+0x38>
}
   24eca:	4620      	mov	r0, r4
   24ecc:	b007      	add	sp, #28
   24ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   24ed0:	4632      	mov	r2, r6
   24ed2:	463b      	mov	r3, r7
   24ed4:	4620      	mov	r0, r4
   24ed6:	f7f7 fd03 	bl	1c8e0 <schedule_new_thread>
   24eda:	e7f6      	b.n	24eca <z_impl_k_thread_create+0x32>

00024edc <z_pm_save_idle_exit>:
{
   24edc:	b508      	push	{r3, lr}
	pm_system_resume();
   24ede:	f7ed fb29 	bl	12534 <pm_system_resume>
	sys_clock_idle_exit();
   24ee2:	f7ff fab7 	bl	24454 <sys_clock_idle_exit>
}
   24ee6:	bd08      	pop	{r3, pc}

00024ee8 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   24ee8:	4288      	cmp	r0, r1
   24eea:	da00      	bge.n	24eee <new_prio_for_inheritance+0x6>
   24eec:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   24eee:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   24ef2:	db01      	blt.n	24ef8 <new_prio_for_inheritance+0x10>
   24ef4:	4608      	mov	r0, r1
   24ef6:	4770      	bx	lr
   24ef8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   24efc:	4770      	bx	lr

00024efe <adjust_owner_prio>:
{
   24efe:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   24f00:	6880      	ldr	r0, [r0, #8]
   24f02:	f990 300e 	ldrsb.w	r3, [r0, #14]
   24f06:	428b      	cmp	r3, r1
   24f08:	d101      	bne.n	24f0e <adjust_owner_prio+0x10>
	return false;
   24f0a:	2000      	movs	r0, #0
}
   24f0c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   24f0e:	f7f8 fac7 	bl	1d4a0 <z_set_prio>
   24f12:	e7fb      	b.n	24f0c <adjust_owner_prio+0xe>

00024f14 <z_impl_k_mutex_init>:
{
   24f14:	4603      	mov	r3, r0
	mutex->owner = NULL;
   24f16:	2000      	movs	r0, #0
   24f18:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   24f1a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   24f1c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   24f1e:	605b      	str	r3, [r3, #4]
}
   24f20:	4770      	bx	lr

00024f22 <prepare_thread_to_run>:
{
   24f22:	b508      	push	{r3, lr}
   24f24:	2200      	movs	r2, #0
   24f26:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   24f2a:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   24f2c:	f000 fa7e 	bl	2542c <z_ready_thread>
}
   24f30:	bd08      	pop	{r3, pc}

00024f32 <queue_insert>:
{
   24f32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f36:	4605      	mov	r5, r0
   24f38:	460e      	mov	r6, r1
   24f3a:	4614      	mov	r4, r2
   24f3c:	461f      	mov	r7, r3
   24f3e:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24f42:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   24f46:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f4a:	f3ef 8911 	mrs	r9, BASEPRI
   24f4e:	f383 8812 	msr	BASEPRI_MAX, r3
   24f52:	f3bf 8f6f 	isb	sy
	if (is_append) {
   24f56:	b102      	cbz	r2, 24f5a <queue_insert+0x28>
	return list->tail;
   24f58:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24f5a:	4640      	mov	r0, r8
   24f5c:	f000 fb28 	bl	255b0 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   24f60:	b9a0      	cbnz	r0, 24f8c <queue_insert+0x5a>
	if (alloc) {
   24f62:	b9e7      	cbnz	r7, 24f9e <queue_insert+0x6c>
	node->next_and_flags = flags;
   24f64:	2300      	movs	r3, #0
   24f66:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24f68:	b356      	cbz	r6, 24fc0 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24f6a:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24f6c:	f033 0303 	bics.w	r3, r3, #3
   24f70:	d134      	bne.n	24fdc <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24f72:	6823      	ldr	r3, [r4, #0]
   24f74:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24f78:	6023      	str	r3, [r4, #0]
	return list->tail;
   24f7a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   24f7c:	b35a      	cbz	r2, 24fd6 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24f7e:	6813      	ldr	r3, [r2, #0]
   24f80:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24f84:	4323      	orrs	r3, r4
   24f86:	6013      	str	r3, [r2, #0]
	list->tail = node;
   24f88:	606c      	str	r4, [r5, #4]
}
   24f8a:	e031      	b.n	24ff0 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   24f8c:	4621      	mov	r1, r4
   24f8e:	f7ff ffc8 	bl	24f22 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   24f92:	4649      	mov	r1, r9
   24f94:	4640      	mov	r0, r8
   24f96:	f7f8 f90b 	bl	1d1b0 <z_reschedule>
		return 0;
   24f9a:	2000      	movs	r0, #0
   24f9c:	e032      	b.n	25004 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   24f9e:	2108      	movs	r1, #8
   24fa0:	2000      	movs	r0, #0
   24fa2:	f7f9 f9c3 	bl	1e32c <z_thread_aligned_alloc>
		if (anode == NULL) {
   24fa6:	b120      	cbz	r0, 24fb2 <queue_insert+0x80>
		anode->data = data;
   24fa8:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   24faa:	2201      	movs	r2, #1
   24fac:	6002      	str	r2, [r0, #0]
		data = anode;
   24fae:	4604      	mov	r4, r0
   24fb0:	e7da      	b.n	24f68 <queue_insert+0x36>
	__asm__ volatile(
   24fb2:	f389 8811 	msr	BASEPRI, r9
   24fb6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24fba:	f06f 000b 	mvn.w	r0, #11
   24fbe:	e021      	b.n	25004 <queue_insert+0xd2>
	return list->head;
   24fc0:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24fc2:	6823      	ldr	r3, [r4, #0]
   24fc4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24fc8:	4313      	orrs	r3, r2
   24fca:	6023      	str	r3, [r4, #0]
	list->head = node;
   24fcc:	602c      	str	r4, [r5, #0]
	return list->tail;
   24fce:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   24fd0:	b973      	cbnz	r3, 24ff0 <queue_insert+0xbe>
	list->tail = node;
   24fd2:	606c      	str	r4, [r5, #4]
}
   24fd4:	e00c      	b.n	24ff0 <queue_insert+0xbe>
	list->tail = node;
   24fd6:	606c      	str	r4, [r5, #4]
	list->head = node;
   24fd8:	602c      	str	r4, [r5, #0]
}
   24fda:	e009      	b.n	24ff0 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24fdc:	6822      	ldr	r2, [r4, #0]
   24fde:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24fe2:	4313      	orrs	r3, r2
   24fe4:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24fe6:	6833      	ldr	r3, [r6, #0]
   24fe8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24fec:	431c      	orrs	r4, r3
   24fee:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24ff0:	2104      	movs	r1, #4
   24ff2:	f105 0010 	add.w	r0, r5, #16
   24ff6:	f000 fcb2 	bl	2595e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   24ffa:	4649      	mov	r1, r9
   24ffc:	4640      	mov	r0, r8
   24ffe:	f7f8 f8d7 	bl	1d1b0 <z_reschedule>
	return 0;
   25002:	2000      	movs	r0, #0
}
   25004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025008 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   25008:	b160      	cbz	r0, 25024 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2500a:	6803      	ldr	r3, [r0, #0]
   2500c:	f013 0f03 	tst.w	r3, #3
   25010:	d008      	beq.n	25024 <z_queue_node_peek+0x1c>
{
   25012:	b510      	push	{r4, lr}
		ret = anode->data;
   25014:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25016:	b909      	cbnz	r1, 2501c <z_queue_node_peek+0x14>
		ret = anode->data;
   25018:	4620      	mov	r0, r4
}
   2501a:	bd10      	pop	{r4, pc}
			k_free(anode);
   2501c:	f000 fcc3 	bl	259a6 <k_free>
		ret = anode->data;
   25020:	4620      	mov	r0, r4
   25022:	e7fa      	b.n	2501a <z_queue_node_peek+0x12>
}
   25024:	4770      	bx	lr

00025026 <z_impl_k_queue_init>:
	list->head = NULL;
   25026:	2300      	movs	r3, #0
   25028:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2502a:	6043      	str	r3, [r0, #4]
   2502c:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   25030:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   25032:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   25034:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   25038:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2503a:	6143      	str	r3, [r0, #20]
}
   2503c:	4770      	bx	lr

0002503e <k_queue_append>:
{
   2503e:	b500      	push	{lr}
   25040:	b083      	sub	sp, #12
   25042:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   25044:	2301      	movs	r3, #1
   25046:	9300      	str	r3, [sp, #0]
   25048:	2300      	movs	r3, #0
   2504a:	4619      	mov	r1, r3
   2504c:	f7ff ff71 	bl	24f32 <queue_insert>
}
   25050:	b003      	add	sp, #12
   25052:	f85d fb04 	ldr.w	pc, [sp], #4

00025056 <k_queue_prepend>:
{
   25056:	b500      	push	{lr}
   25058:	b083      	sub	sp, #12
   2505a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2505c:	2100      	movs	r1, #0
   2505e:	9100      	str	r1, [sp, #0]
   25060:	460b      	mov	r3, r1
   25062:	f7ff ff66 	bl	24f32 <queue_insert>
}
   25066:	b003      	add	sp, #12
   25068:	f85d fb04 	ldr.w	pc, [sp], #4

0002506c <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   2506c:	b3a1      	cbz	r1, 250d8 <k_queue_append_list+0x6c>
{
   2506e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25072:	4606      	mov	r6, r0
   25074:	4617      	mov	r7, r2
   25076:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   25078:	b38a      	cbz	r2, 250de <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2507a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2507e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25082:	f3ef 8811 	mrs	r8, BASEPRI
   25086:	f383 8812 	msr	BASEPRI_MAX, r3
   2508a:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2508e:	4628      	mov	r0, r5
   25090:	f000 fa8e 	bl	255b0 <z_unpend_first_thread>
   25094:	e006      	b.n	250a4 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   25096:	4621      	mov	r1, r4
   25098:	f7ff ff43 	bl	24f22 <prepare_thread_to_run>
		head = *(void **)head;
   2509c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2509e:	4628      	mov	r0, r5
   250a0:	f000 fa86 	bl	255b0 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   250a4:	b10c      	cbz	r4, 250aa <k_queue_append_list+0x3e>
   250a6:	2800      	cmp	r0, #0
   250a8:	d1f5      	bne.n	25096 <k_queue_append_list+0x2a>
	if (head != NULL) {
   250aa:	b13c      	cbz	r4, 250bc <k_queue_append_list+0x50>
	return list->tail;
   250ac:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   250ae:	b18a      	cbz	r2, 250d4 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   250b0:	6813      	ldr	r3, [r2, #0]
   250b2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   250b6:	431c      	orrs	r4, r3
   250b8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   250ba:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   250bc:	2104      	movs	r1, #4
   250be:	f106 0010 	add.w	r0, r6, #16
   250c2:	f000 fc4c 	bl	2595e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   250c6:	4641      	mov	r1, r8
   250c8:	4628      	mov	r0, r5
   250ca:	f7f8 f871 	bl	1d1b0 <z_reschedule>
	return 0;
   250ce:	2000      	movs	r0, #0
}
   250d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   250d4:	6034      	str	r4, [r6, #0]
}
   250d6:	e7f0      	b.n	250ba <k_queue_append_list+0x4e>
		return -EINVAL;
   250d8:	f06f 0015 	mvn.w	r0, #21
}
   250dc:	4770      	bx	lr
		return -EINVAL;
   250de:	f06f 0015 	mvn.w	r0, #21
   250e2:	e7f5      	b.n	250d0 <k_queue_append_list+0x64>

000250e4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   250e4:	b15a      	cbz	r2, 250fe <z_impl_k_sem_init+0x1a>
   250e6:	428a      	cmp	r2, r1
   250e8:	d30c      	bcc.n	25104 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   250ea:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   250ec:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   250ee:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   250f0:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   250f2:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   250f6:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   250f8:	6143      	str	r3, [r0, #20]
	return 0;
   250fa:	2000      	movs	r0, #0
   250fc:	4770      	bx	lr
		return -EINVAL;
   250fe:	f06f 0015 	mvn.w	r0, #21
   25102:	4770      	bx	lr
   25104:	f06f 0015 	mvn.w	r0, #21
}
   25108:	4770      	bx	lr

0002510a <cancel_async_locked>:
{
   2510a:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   2510c:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2510e:	f012 0f02 	tst.w	r2, #2
   25112:	d009      	beq.n	25128 <cancel_async_locked+0x1e>
	return *flagp;
   25114:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   25116:	f012 000f 	ands.w	r0, r2, #15
   2511a:	d037      	beq.n	2518c <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   2511c:	f042 0202 	orr.w	r2, r2, #2
   25120:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   25122:	f002 000f 	and.w	r0, r2, #15
	return ret;
   25126:	4770      	bx	lr
{
   25128:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   2512a:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   2512c:	f022 0104 	bic.w	r1, r2, #4
   25130:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   25132:	f012 0f04 	tst.w	r2, #4
   25136:	d011      	beq.n	2515c <cancel_async_locked+0x52>
	return list->head;
   25138:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2513c:	2100      	movs	r1, #0
   2513e:	b16a      	cbz	r2, 2515c <cancel_async_locked+0x52>
   25140:	4290      	cmp	r0, r2
   25142:	d002      	beq.n	2514a <cancel_async_locked+0x40>
   25144:	4611      	mov	r1, r2
   25146:	6812      	ldr	r2, [r2, #0]
   25148:	e7f9      	b.n	2513e <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2514a:	b191      	cbz	r1, 25172 <cancel_async_locked+0x68>
	return node->next;
   2514c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   2514e:	600a      	str	r2, [r1, #0]
	return list->tail;
   25150:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   25154:	4293      	cmp	r3, r2
   25156:	d016      	beq.n	25186 <cancel_async_locked+0x7c>
	parent->next = child;
   25158:	2200      	movs	r2, #0
   2515a:	601a      	str	r2, [r3, #0]
	return *flagp;
   2515c:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2515e:	f012 000f 	ands.w	r0, r2, #15
   25162:	d004      	beq.n	2516e <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   25164:	f042 0202 	orr.w	r2, r2, #2
   25168:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2516a:	f002 000f 	and.w	r0, r2, #15
}
   2516e:	bc10      	pop	{r4}
   25170:	4770      	bx	lr
	return node->next;
   25172:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   25174:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   25178:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2517c:	428b      	cmp	r3, r1
   2517e:	d1eb      	bne.n	25158 <cancel_async_locked+0x4e>
	list->tail = node;
   25180:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   25184:	e7e8      	b.n	25158 <cancel_async_locked+0x4e>
	list->tail = node;
   25186:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   2518a:	e7e5      	b.n	25158 <cancel_async_locked+0x4e>
   2518c:	4770      	bx	lr

0002518e <work_timeout>:
{
   2518e:	b510      	push	{r4, lr}
   25190:	b082      	sub	sp, #8
   25192:	4603      	mov	r3, r0
   25194:	f04f 0240 	mov.w	r2, #64	; 0x40
   25198:	f3ef 8411 	mrs	r4, BASEPRI
   2519c:	f382 8812 	msr	BASEPRI_MAX, r2
   251a0:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   251a4:	2200      	movs	r2, #0
   251a6:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   251a8:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   251ac:	f022 0108 	bic.w	r1, r2, #8
   251b0:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   251b4:	f012 0f08 	tst.w	r2, #8
   251b8:	d105      	bne.n	251c6 <work_timeout+0x38>
	__asm__ volatile(
   251ba:	f384 8811 	msr	BASEPRI, r4
   251be:	f3bf 8f6f 	isb	sy
}
   251c2:	b002      	add	sp, #8
   251c4:	bd10      	pop	{r4, pc}
   251c6:	3810      	subs	r0, #16
		queue = dw->queue;
   251c8:	699b      	ldr	r3, [r3, #24]
   251ca:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   251cc:	a901      	add	r1, sp, #4
   251ce:	f7f7 fdd9 	bl	1cd84 <submit_to_queue_locked>
   251d2:	e7f2      	b.n	251ba <work_timeout+0x2c>

000251d4 <cancel_delayable_async_locked>:
{
   251d4:	b510      	push	{r4, lr}
   251d6:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   251d8:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   251da:	f023 0208 	bic.w	r2, r3, #8
   251de:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   251e0:	f013 0f08 	tst.w	r3, #8
   251e4:	d103      	bne.n	251ee <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   251e6:	4620      	mov	r0, r4
   251e8:	f7ff ff8f 	bl	2510a <cancel_async_locked>
}
   251ec:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   251ee:	3010      	adds	r0, #16
   251f0:	f000 fa6c 	bl	256cc <z_abort_timeout>
		ret = true;
   251f4:	e7f7      	b.n	251e6 <cancel_delayable_async_locked+0x12>

000251f6 <k_work_submit_to_queue>:
{
   251f6:	b530      	push	{r4, r5, lr}
   251f8:	b083      	sub	sp, #12
   251fa:	9001      	str	r0, [sp, #4]
   251fc:	4608      	mov	r0, r1
	__asm__ volatile(
   251fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   25202:	f3ef 8511 	mrs	r5, BASEPRI
   25206:	f383 8812 	msr	BASEPRI_MAX, r3
   2520a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2520e:	a901      	add	r1, sp, #4
   25210:	f7f7 fdb8 	bl	1cd84 <submit_to_queue_locked>
   25214:	4604      	mov	r4, r0
	__asm__ volatile(
   25216:	f385 8811 	msr	BASEPRI, r5
   2521a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2521e:	2800      	cmp	r0, #0
   25220:	dc02      	bgt.n	25228 <k_work_submit_to_queue+0x32>
}
   25222:	4620      	mov	r0, r4
   25224:	b003      	add	sp, #12
   25226:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   25228:	f7f8 fb22 	bl	1d870 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2522c:	2800      	cmp	r0, #0
   2522e:	d0f8      	beq.n	25222 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   25230:	f7f8 fa58 	bl	1d6e4 <z_impl_k_yield>
	return ret;
   25234:	e7f5      	b.n	25222 <k_work_submit_to_queue+0x2c>

00025236 <k_work_init_delayable>:
{
   25236:	b538      	push	{r3, r4, r5, lr}
   25238:	4604      	mov	r4, r0
   2523a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2523c:	2230      	movs	r2, #48	; 0x30
   2523e:	2100      	movs	r1, #0
   25240:	f000 fbf1 	bl	25a26 <memset>
   25244:	6065      	str	r5, [r4, #4]
   25246:	f44f 7380 	mov.w	r3, #256	; 0x100
   2524a:	60e3      	str	r3, [r4, #12]
}
   2524c:	bd38      	pop	{r3, r4, r5, pc}

0002524e <k_work_schedule_for_queue>:
{
   2524e:	b510      	push	{r4, lr}
   25250:	b082      	sub	sp, #8
   25252:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   25254:	f04f 0040 	mov.w	r0, #64	; 0x40
   25258:	f3ef 8411 	mrs	r4, BASEPRI
   2525c:	f380 8812 	msr	BASEPRI_MAX, r0
   25260:	f3bf 8f6f 	isb	sy
	return *flagp;
   25264:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25266:	f010 0f0e 	tst.w	r0, #14
   2526a:	d006      	beq.n	2527a <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2526c:	2000      	movs	r0, #0
	__asm__ volatile(
   2526e:	f384 8811 	msr	BASEPRI, r4
   25272:	f3bf 8f6f 	isb	sy
}
   25276:	b002      	add	sp, #8
   25278:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2527a:	a801      	add	r0, sp, #4
   2527c:	f7f7 fec4 	bl	1d008 <schedule_for_queue_locked>
   25280:	e7f5      	b.n	2526e <k_work_schedule_for_queue+0x20>

00025282 <k_work_reschedule_for_queue>:
{
   25282:	b5f0      	push	{r4, r5, r6, r7, lr}
   25284:	b083      	sub	sp, #12
   25286:	9001      	str	r0, [sp, #4]
   25288:	460c      	mov	r4, r1
   2528a:	4616      	mov	r6, r2
   2528c:	461d      	mov	r5, r3
	__asm__ volatile(
   2528e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25292:	f3ef 8711 	mrs	r7, BASEPRI
   25296:	f383 8812 	msr	BASEPRI_MAX, r3
   2529a:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   2529e:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   252a0:	f023 0208 	bic.w	r2, r3, #8
   252a4:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   252a6:	f013 0f08 	tst.w	r3, #8
   252aa:	d10b      	bne.n	252c4 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   252ac:	4632      	mov	r2, r6
   252ae:	462b      	mov	r3, r5
   252b0:	4621      	mov	r1, r4
   252b2:	a801      	add	r0, sp, #4
   252b4:	f7f7 fea8 	bl	1d008 <schedule_for_queue_locked>
	__asm__ volatile(
   252b8:	f387 8811 	msr	BASEPRI, r7
   252bc:	f3bf 8f6f 	isb	sy
}
   252c0:	b003      	add	sp, #12
   252c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   252c4:	f101 0010 	add.w	r0, r1, #16
   252c8:	f000 fa00 	bl	256cc <z_abort_timeout>
		ret = true;
   252cc:	e7ee      	b.n	252ac <k_work_reschedule_for_queue+0x2a>

000252ce <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   252ce:	b510      	push	{r4, lr}
	__asm__ volatile(
   252d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   252d4:	f3ef 8411 	mrs	r4, BASEPRI
   252d8:	f383 8812 	msr	BASEPRI_MAX, r3
   252dc:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   252e0:	f7ff ff78 	bl	251d4 <cancel_delayable_async_locked>
	__asm__ volatile(
   252e4:	f384 8811 	msr	BASEPRI, r4
   252e8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   252ec:	bd10      	pop	{r4, pc}

000252ee <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   252ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252f0:	460f      	mov	r7, r1
	__asm__ volatile(
   252f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   252f6:	f3ef 8611 	mrs	r6, BASEPRI
   252fa:	f383 8812 	msr	BASEPRI_MAX, r3
   252fe:	f3bf 8f6f 	isb	sy
	return *flagp;
   25302:	68c3      	ldr	r3, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   25304:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   25308:	2b00      	cmp	r3, #0
   2530a:	bf14      	ite	ne
   2530c:	2501      	movne	r5, #1
   2530e:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   25310:	d107      	bne.n	25322 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   25312:	2000      	movs	r0, #0
	__asm__ volatile(
   25314:	f386 8811 	msr	BASEPRI, r6
   25318:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2531c:	b948      	cbnz	r0, 25332 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2531e:	4628      	mov	r0, r5
   25320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25322:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   25324:	f7ff ff56 	bl	251d4 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   25328:	4639      	mov	r1, r7
   2532a:	4620      	mov	r0, r4
   2532c:	f7f7 fdd2 	bl	1ced4 <cancel_sync_locked>
   25330:	e7f0      	b.n	25314 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   25332:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   25336:	f04f 32ff 	mov.w	r2, #4294967295
   2533a:	f04f 33ff 	mov.w	r3, #4294967295
   2533e:	f7f7 fcdd 	bl	1ccfc <z_impl_k_sem_take>
   25342:	e7ec      	b.n	2531e <k_work_cancel_delayable_sync+0x30>

00025344 <thread_active_elsewhere>:
}
   25344:	2000      	movs	r0, #0
   25346:	4770      	bx	lr

00025348 <pended_on_thread>:
}
   25348:	6880      	ldr	r0, [r0, #8]
   2534a:	4770      	bx	lr

0002534c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2534c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25350:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   25354:	4283      	cmp	r3, r0
   25356:	d001      	beq.n	2535c <z_sched_prio_cmp+0x10>
		return b2 - b1;
   25358:	1ac0      	subs	r0, r0, r3
   2535a:	4770      	bx	lr
	return 0;
   2535c:	2000      	movs	r0, #0
}
   2535e:	4770      	bx	lr

00025360 <z_unpend_thread_no_timeout>:
{
   25360:	b538      	push	{r3, r4, r5, lr}
   25362:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   25364:	2300      	movs	r3, #0
	__asm__ volatile(
   25366:	f04f 0240 	mov.w	r2, #64	; 0x40
   2536a:	f3ef 8511 	mrs	r5, BASEPRI
   2536e:	f382 8812 	msr	BASEPRI_MAX, r2
   25372:	f3bf 8f6f 	isb	sy
   25376:	b98b      	cbnz	r3, 2539c <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25378:	4620      	mov	r0, r4
   2537a:	f7ff ffe5 	bl	25348 <pended_on_thread>
   2537e:	4621      	mov	r1, r4
   25380:	f000 f822 	bl	253c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25384:	7b63      	ldrb	r3, [r4, #13]
   25386:	f023 0302 	bic.w	r3, r3, #2
   2538a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2538c:	2300      	movs	r3, #0
   2538e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   25390:	f385 8811 	msr	BASEPRI, r5
   25394:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25398:	2301      	movs	r3, #1
   2539a:	e7ec      	b.n	25376 <z_unpend_thread_no_timeout+0x16>
}
   2539c:	bd38      	pop	{r3, r4, r5, pc}

0002539e <z_reschedule_irqlock>:
{
   2539e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   253a0:	4603      	mov	r3, r0
   253a2:	b920      	cbnz	r0, 253ae <z_reschedule_irqlock+0x10>
   253a4:	f3ef 8205 	mrs	r2, IPSR
   253a8:	b942      	cbnz	r2, 253bc <z_reschedule_irqlock+0x1e>
   253aa:	2201      	movs	r2, #1
   253ac:	e000      	b.n	253b0 <z_reschedule_irqlock+0x12>
   253ae:	2200      	movs	r2, #0
	if (resched(key)) {
   253b0:	b932      	cbnz	r2, 253c0 <z_reschedule_irqlock+0x22>
   253b2:	f383 8811 	msr	BASEPRI, r3
   253b6:	f3bf 8f6f 	isb	sy
}
   253ba:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   253bc:	2200      	movs	r2, #0
   253be:	e7f7      	b.n	253b0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   253c0:	4618      	mov	r0, r3
   253c2:	f7ed ff9f 	bl	13304 <arch_swap>
	return ret;
   253c6:	e7f8      	b.n	253ba <z_reschedule_irqlock+0x1c>

000253c8 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   253c8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   253ca:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   253cc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   253ce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   253d0:	2300      	movs	r3, #0
   253d2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   253d4:	604b      	str	r3, [r1, #4]
}
   253d6:	4770      	bx	lr

000253d8 <z_unpend_thread>:
{
   253d8:	b538      	push	{r3, r4, r5, lr}
   253da:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   253dc:	2300      	movs	r3, #0
	__asm__ volatile(
   253de:	f04f 0240 	mov.w	r2, #64	; 0x40
   253e2:	f3ef 8511 	mrs	r5, BASEPRI
   253e6:	f382 8812 	msr	BASEPRI_MAX, r2
   253ea:	f3bf 8f6f 	isb	sy
   253ee:	b98b      	cbnz	r3, 25414 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   253f0:	4620      	mov	r0, r4
   253f2:	f7ff ffa9 	bl	25348 <pended_on_thread>
   253f6:	4621      	mov	r1, r4
   253f8:	f7ff ffe6 	bl	253c8 <z_priq_dumb_remove>
   253fc:	7b63      	ldrb	r3, [r4, #13]
   253fe:	f023 0302 	bic.w	r3, r3, #2
   25402:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   25404:	2300      	movs	r3, #0
   25406:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   25408:	f385 8811 	msr	BASEPRI, r5
   2540c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25410:	2301      	movs	r3, #1
   25412:	e7ec      	b.n	253ee <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   25414:	f104 0018 	add.w	r0, r4, #24
   25418:	f000 f958 	bl	256cc <z_abort_timeout>
}
   2541c:	bd38      	pop	{r3, r4, r5, pc}

0002541e <z_priq_dumb_best>:
{
   2541e:	4603      	mov	r3, r0
	return list->head == list;
   25420:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25422:	4283      	cmp	r3, r0
   25424:	d000      	beq.n	25428 <z_priq_dumb_best+0xa>
}
   25426:	4770      	bx	lr
	struct k_thread *thread = NULL;
   25428:	2000      	movs	r0, #0
	return thread;
   2542a:	e7fc      	b.n	25426 <z_priq_dumb_best+0x8>

0002542c <z_ready_thread>:
{
   2542c:	b538      	push	{r3, r4, r5, lr}
   2542e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   25430:	2300      	movs	r3, #0
	__asm__ volatile(
   25432:	f04f 0240 	mov.w	r2, #64	; 0x40
   25436:	f3ef 8511 	mrs	r5, BASEPRI
   2543a:	f382 8812 	msr	BASEPRI_MAX, r2
   2543e:	f3bf 8f6f 	isb	sy
   25442:	e007      	b.n	25454 <z_ready_thread+0x28>
			ready_thread(thread);
   25444:	4620      	mov	r0, r4
   25446:	f7f7 ff9d 	bl	1d384 <ready_thread>
	__asm__ volatile(
   2544a:	f385 8811 	msr	BASEPRI, r5
   2544e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25452:	2301      	movs	r3, #1
   25454:	b92b      	cbnz	r3, 25462 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   25456:	4620      	mov	r0, r4
   25458:	f7ff ff74 	bl	25344 <thread_active_elsewhere>
   2545c:	2800      	cmp	r0, #0
   2545e:	d1f4      	bne.n	2544a <z_ready_thread+0x1e>
   25460:	e7f0      	b.n	25444 <z_ready_thread+0x18>
}
   25462:	bd38      	pop	{r3, r4, r5, pc}

00025464 <z_thread_timeout>:
{
   25464:	b570      	push	{r4, r5, r6, lr}
   25466:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   25468:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   2546c:	2300      	movs	r3, #0
	__asm__ volatile(
   2546e:	f04f 0240 	mov.w	r2, #64	; 0x40
   25472:	f3ef 8611 	mrs	r6, BASEPRI
   25476:	f382 8812 	msr	BASEPRI_MAX, r2
   2547a:	f3bf 8f6f 	isb	sy
   2547e:	e019      	b.n	254b4 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25480:	4628      	mov	r0, r5
   25482:	f7ff ff61 	bl	25348 <pended_on_thread>
   25486:	4629      	mov	r1, r5
   25488:	f7ff ff9e 	bl	253c8 <z_priq_dumb_remove>
   2548c:	7b6b      	ldrb	r3, [r5, #13]
   2548e:	f023 0302 	bic.w	r3, r3, #2
   25492:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   25494:	2300      	movs	r3, #0
   25496:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25498:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2549c:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   254a0:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   254a4:	4628      	mov	r0, r5
   254a6:	f7f7 ff6d 	bl	1d384 <ready_thread>
	__asm__ volatile(
   254aa:	f386 8811 	msr	BASEPRI, r6
   254ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   254b2:	2301      	movs	r3, #1
   254b4:	b94b      	cbnz	r3, 254ca <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   254b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   254ba:	f013 0f28 	tst.w	r3, #40	; 0x28
   254be:	d1f4      	bne.n	254aa <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   254c0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   254c4:	2b00      	cmp	r3, #0
   254c6:	d1db      	bne.n	25480 <z_thread_timeout+0x1c>
   254c8:	e7e6      	b.n	25498 <z_thread_timeout+0x34>
}
   254ca:	bd70      	pop	{r4, r5, r6, pc}

000254cc <add_to_waitq_locked>:
{
   254cc:	b570      	push	{r4, r5, r6, lr}
   254ce:	4605      	mov	r5, r0
   254d0:	460e      	mov	r6, r1
	unready_thread(thread);
   254d2:	f7f7 ffb5 	bl	1d440 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   254d6:	7b6b      	ldrb	r3, [r5, #13]
   254d8:	f043 0302 	orr.w	r3, r3, #2
   254dc:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   254de:	b1b6      	cbz	r6, 2550e <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   254e0:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   254e2:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   254e4:	42a6      	cmp	r6, r4
   254e6:	d019      	beq.n	2551c <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   254e8:	b164      	cbz	r4, 25504 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   254ea:	4621      	mov	r1, r4
   254ec:	4628      	mov	r0, r5
   254ee:	f7ff ff2d 	bl	2534c <z_sched_prio_cmp>
   254f2:	2800      	cmp	r0, #0
   254f4:	dc0c      	bgt.n	25510 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   254f6:	b12c      	cbz	r4, 25504 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   254f8:	6873      	ldr	r3, [r6, #4]
   254fa:	429c      	cmp	r4, r3
   254fc:	d002      	beq.n	25504 <add_to_waitq_locked+0x38>
   254fe:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25500:	2c00      	cmp	r4, #0
   25502:	d1f1      	bne.n	254e8 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   25504:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   25506:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   25508:	606b      	str	r3, [r5, #4]
	tail->next = node;
   2550a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2550c:	6075      	str	r5, [r6, #4]
}
   2550e:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   25510:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   25512:	606b      	str	r3, [r5, #4]
	node->next = successor;
   25514:	602c      	str	r4, [r5, #0]
	prev->next = node;
   25516:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25518:	6065      	str	r5, [r4, #4]
}
   2551a:	e7f8      	b.n	2550e <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2551c:	2400      	movs	r4, #0
   2551e:	e7e3      	b.n	254e8 <add_to_waitq_locked+0x1c>

00025520 <pend>:
{
   25520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25524:	4605      	mov	r5, r0
   25526:	460f      	mov	r7, r1
   25528:	4691      	mov	r9, r2
   2552a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   2552c:	2400      	movs	r4, #0
	__asm__ volatile(
   2552e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25532:	f3ef 8611 	mrs	r6, BASEPRI
   25536:	f383 8812 	msr	BASEPRI_MAX, r3
   2553a:	f3bf 8f6f 	isb	sy
   2553e:	b94c      	cbnz	r4, 25554 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   25540:	4639      	mov	r1, r7
   25542:	4628      	mov	r0, r5
   25544:	f7ff ffc2 	bl	254cc <add_to_waitq_locked>
	__asm__ volatile(
   25548:	f386 8811 	msr	BASEPRI, r6
   2554c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25550:	2401      	movs	r4, #1
   25552:	e7f4      	b.n	2553e <pend+0x1e>
	add_thread_timeout(thread, timeout);
   25554:	464a      	mov	r2, r9
   25556:	4643      	mov	r3, r8
   25558:	4628      	mov	r0, r5
   2555a:	f7f7 fdc7 	bl	1d0ec <add_thread_timeout>
}
   2555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025562 <z_unpend1_no_timeout>:
{
   25562:	b570      	push	{r4, r5, r6, lr}
   25564:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   25566:	2300      	movs	r3, #0
	__asm__ volatile(
   25568:	f04f 0240 	mov.w	r2, #64	; 0x40
   2556c:	f3ef 8511 	mrs	r5, BASEPRI
   25570:	f382 8812 	msr	BASEPRI_MAX, r2
   25574:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   25578:	461c      	mov	r4, r3
   2557a:	e00f      	b.n	2559c <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2557c:	f7ff fee4 	bl	25348 <pended_on_thread>
   25580:	4621      	mov	r1, r4
   25582:	f7ff ff21 	bl	253c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25586:	7b63      	ldrb	r3, [r4, #13]
   25588:	f023 0302 	bic.w	r3, r3, #2
   2558c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2558e:	2300      	movs	r3, #0
   25590:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   25592:	f385 8811 	msr	BASEPRI, r5
   25596:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2559a:	2301      	movs	r3, #1
   2559c:	b933      	cbnz	r3, 255ac <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   2559e:	4630      	mov	r0, r6
   255a0:	f7ff ff3d 	bl	2541e <z_priq_dumb_best>
		if (thread != NULL) {
   255a4:	4604      	mov	r4, r0
   255a6:	2800      	cmp	r0, #0
   255a8:	d1e8      	bne.n	2557c <z_unpend1_no_timeout+0x1a>
   255aa:	e7f2      	b.n	25592 <z_unpend1_no_timeout+0x30>
}
   255ac:	4620      	mov	r0, r4
   255ae:	bd70      	pop	{r4, r5, r6, pc}

000255b0 <z_unpend_first_thread>:
{
   255b0:	b570      	push	{r4, r5, r6, lr}
   255b2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   255b4:	2300      	movs	r3, #0
	__asm__ volatile(
   255b6:	f04f 0240 	mov.w	r2, #64	; 0x40
   255ba:	f3ef 8511 	mrs	r5, BASEPRI
   255be:	f382 8812 	msr	BASEPRI_MAX, r2
   255c2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   255c6:	461c      	mov	r4, r3
   255c8:	e013      	b.n	255f2 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   255ca:	f7ff febd 	bl	25348 <pended_on_thread>
   255ce:	4621      	mov	r1, r4
   255d0:	f7ff fefa 	bl	253c8 <z_priq_dumb_remove>
   255d4:	7b63      	ldrb	r3, [r4, #13]
   255d6:	f023 0302 	bic.w	r3, r3, #2
   255da:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   255dc:	2300      	movs	r3, #0
   255de:	60a3      	str	r3, [r4, #8]
   255e0:	f104 0018 	add.w	r0, r4, #24
   255e4:	f000 f872 	bl	256cc <z_abort_timeout>
	__asm__ volatile(
   255e8:	f385 8811 	msr	BASEPRI, r5
   255ec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   255f0:	2301      	movs	r3, #1
   255f2:	b933      	cbnz	r3, 25602 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   255f4:	4630      	mov	r0, r6
   255f6:	f7ff ff12 	bl	2541e <z_priq_dumb_best>
		if (thread != NULL) {
   255fa:	4604      	mov	r4, r0
   255fc:	2800      	cmp	r0, #0
   255fe:	d1e4      	bne.n	255ca <z_unpend_first_thread+0x1a>
   25600:	e7f2      	b.n	255e8 <z_unpend_first_thread+0x38>
}
   25602:	4620      	mov	r0, r4
   25604:	bd70      	pop	{r4, r5, r6, pc}

00025606 <z_unpend_all>:
{
   25606:	b538      	push	{r3, r4, r5, lr}
   25608:	4605      	mov	r5, r0
	int need_sched = 0;
   2560a:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2560c:	e006      	b.n	2561c <z_unpend_all+0x16>
		z_unpend_thread(thread);
   2560e:	4620      	mov	r0, r4
   25610:	f7ff fee2 	bl	253d8 <z_unpend_thread>
		z_ready_thread(thread);
   25614:	4620      	mov	r0, r4
   25616:	f7ff ff09 	bl	2542c <z_ready_thread>
		need_sched = 1;
   2561a:	2001      	movs	r0, #1
	return list->head == list;
   2561c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2561e:	42a5      	cmp	r5, r4
   25620:	d001      	beq.n	25626 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25622:	2c00      	cmp	r4, #0
   25624:	d1f3      	bne.n	2560e <z_unpend_all+0x8>
}
   25626:	bd38      	pop	{r3, r4, r5, pc}

00025628 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   25628:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   2562a:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   2562c:	6083      	str	r3, [r0, #8]
}
   2562e:	4770      	bx	lr

00025630 <z_sched_wake>:
{
   25630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25634:	4606      	mov	r6, r0
   25636:	4688      	mov	r8, r1
   25638:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   2563a:	2300      	movs	r3, #0
	__asm__ volatile(
   2563c:	f04f 0240 	mov.w	r2, #64	; 0x40
   25640:	f3ef 8511 	mrs	r5, BASEPRI
   25644:	f382 8812 	msr	BASEPRI_MAX, r2
   25648:	f3bf 8f6f 	isb	sy
	bool ret = false;
   2564c:	4699      	mov	r9, r3
   2564e:	e01b      	b.n	25688 <z_sched_wake+0x58>
   25650:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   25654:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25656:	f7ff fe77 	bl	25348 <pended_on_thread>
   2565a:	4621      	mov	r1, r4
   2565c:	f7ff feb4 	bl	253c8 <z_priq_dumb_remove>
   25660:	7b63      	ldrb	r3, [r4, #13]
   25662:	f023 0302 	bic.w	r3, r3, #2
   25666:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   25668:	2300      	movs	r3, #0
   2566a:	60a3      	str	r3, [r4, #8]
   2566c:	f104 0018 	add.w	r0, r4, #24
   25670:	f000 f82c 	bl	256cc <z_abort_timeout>
			ready_thread(thread);
   25674:	4620      	mov	r0, r4
   25676:	f7f7 fe85 	bl	1d384 <ready_thread>
			ret = true;
   2567a:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   2567e:	f385 8811 	msr	BASEPRI, r5
   25682:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25686:	2301      	movs	r3, #1
   25688:	b933      	cbnz	r3, 25698 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   2568a:	4630      	mov	r0, r6
   2568c:	f7ff fec7 	bl	2541e <z_priq_dumb_best>
		if (thread != NULL) {
   25690:	4604      	mov	r4, r0
   25692:	2800      	cmp	r0, #0
   25694:	d1dc      	bne.n	25650 <z_sched_wake+0x20>
   25696:	e7f2      	b.n	2567e <z_sched_wake+0x4e>
}
   25698:	4648      	mov	r0, r9
   2569a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002569e <remove_timeout>:
{
   2569e:	b538      	push	{r3, r4, r5, lr}
   256a0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   256a2:	f7f8 f953 	bl	1d94c <next>
   256a6:	b148      	cbz	r0, 256bc <remove_timeout+0x1e>
   256a8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   256aa:	6920      	ldr	r0, [r4, #16]
   256ac:	6965      	ldr	r5, [r4, #20]
   256ae:	6913      	ldr	r3, [r2, #16]
   256b0:	6951      	ldr	r1, [r2, #20]
   256b2:	181b      	adds	r3, r3, r0
   256b4:	eb45 0101 	adc.w	r1, r5, r1
   256b8:	6113      	str	r3, [r2, #16]
   256ba:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   256bc:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   256be:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   256c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   256c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   256c4:	2300      	movs	r3, #0
   256c6:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   256c8:	6063      	str	r3, [r4, #4]
}
   256ca:	bd38      	pop	{r3, r4, r5, pc}

000256cc <z_abort_timeout>:
{
   256cc:	b570      	push	{r4, r5, r6, lr}
   256ce:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   256d0:	2300      	movs	r3, #0
	__asm__ volatile(
   256d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   256d6:	f3ef 8611 	mrs	r6, BASEPRI
   256da:	f382 8812 	msr	BASEPRI_MAX, r2
   256de:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   256e2:	f06f 0015 	mvn.w	r0, #21
   256e6:	e008      	b.n	256fa <z_abort_timeout+0x2e>
			remove_timeout(to);
   256e8:	4620      	mov	r0, r4
   256ea:	f7ff ffd8 	bl	2569e <remove_timeout>
			ret = 0;
   256ee:	4628      	mov	r0, r5
	__asm__ volatile(
   256f0:	f386 8811 	msr	BASEPRI, r6
   256f4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   256f8:	2301      	movs	r3, #1
   256fa:	461d      	mov	r5, r3
   256fc:	b91b      	cbnz	r3, 25706 <z_abort_timeout+0x3a>
	return node->next != NULL;
   256fe:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   25700:	2b00      	cmp	r3, #0
   25702:	d1f1      	bne.n	256e8 <z_abort_timeout+0x1c>
   25704:	e7f4      	b.n	256f0 <z_abort_timeout+0x24>
}
   25706:	bd70      	pop	{r4, r5, r6, pc}

00025708 <z_get_next_timeout_expiry>:
{
   25708:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   2570a:	2300      	movs	r3, #0
	__asm__ volatile(
   2570c:	f04f 0240 	mov.w	r2, #64	; 0x40
   25710:	f3ef 8411 	mrs	r4, BASEPRI
   25714:	f382 8812 	msr	BASEPRI_MAX, r2
   25718:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2571c:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   25720:	b93b      	cbnz	r3, 25732 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   25722:	f7f8 f92b 	bl	1d97c <next_timeout>
	__asm__ volatile(
   25726:	f384 8811 	msr	BASEPRI, r4
   2572a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2572e:	2301      	movs	r3, #1
   25730:	e7f6      	b.n	25720 <z_get_next_timeout_expiry+0x18>
}
   25732:	bd10      	pop	{r4, pc}

00025734 <z_set_timeout_expiry>:
{
   25734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25736:	4606      	mov	r6, r0
   25738:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   2573a:	2300      	movs	r3, #0
	__asm__ volatile(
   2573c:	f04f 0240 	mov.w	r2, #64	; 0x40
   25740:	f3ef 8511 	mrs	r5, BASEPRI
   25744:	f382 8812 	msr	BASEPRI_MAX, r2
   25748:	f3bf 8f6f 	isb	sy
   2574c:	e00a      	b.n	25764 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   2574e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   25750:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   25754:	2801      	cmp	r0, #1
   25756:	dd00      	ble.n	2575a <z_set_timeout_expiry+0x26>
   25758:	b97c      	cbnz	r4, 2577a <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   2575a:	f385 8811 	msr	BASEPRI, r5
   2575e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   25762:	2301      	movs	r3, #1
   25764:	461c      	mov	r4, r3
   25766:	b97b      	cbnz	r3, 25788 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   25768:	f7f8 f908 	bl	1d97c <next_timeout>
			      || (ticks <= next_to);
   2576c:	f1b0 3fff 	cmp.w	r0, #4294967295
   25770:	d0ed      	beq.n	2574e <z_set_timeout_expiry+0x1a>
   25772:	42b0      	cmp	r0, r6
   25774:	dbec      	blt.n	25750 <z_set_timeout_expiry+0x1c>
   25776:	2401      	movs	r4, #1
   25778:	e7ea      	b.n	25750 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2577a:	4639      	mov	r1, r7
   2577c:	42b0      	cmp	r0, r6
   2577e:	bfa8      	it	ge
   25780:	4630      	movge	r0, r6
   25782:	f7f5 f927 	bl	1a9d4 <sys_clock_set_timeout>
   25786:	e7e8      	b.n	2575a <z_set_timeout_expiry+0x26>
}
   25788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002578a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2578a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2578c:	f7f8 fa28 	bl	1dbe0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   25790:	bd08      	pop	{r3, pc}

00025792 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   25792:	b900      	cbnz	r0, 25796 <z_impl_k_busy_wait+0x4>
   25794:	4770      	bx	lr
{
   25796:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   25798:	f7ee fc3a 	bl	14010 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2579c:	bd08      	pop	{r3, pc}

0002579e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2579e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   257a0:	f1b1 3fff 	cmp.w	r1, #4294967295
   257a4:	bf08      	it	eq
   257a6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   257aa:	d024      	beq.n	257f6 <sys_clock_timeout_end_calc+0x58>
   257ac:	4604      	mov	r4, r0
   257ae:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   257b0:	ea54 0105 	orrs.w	r1, r4, r5
   257b4:	d00d      	beq.n	257d2 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   257b6:	f06f 0101 	mvn.w	r1, #1
   257ba:	1a0a      	subs	r2, r1, r0
   257bc:	f04f 31ff 	mov.w	r1, #4294967295
   257c0:	eb61 0305 	sbc.w	r3, r1, r5
   257c4:	2a00      	cmp	r2, #0
   257c6:	f173 0100 	sbcs.w	r1, r3, #0
   257ca:	db05      	blt.n	257d8 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   257cc:	4610      	mov	r0, r2
   257ce:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   257d0:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   257d2:	f7f8 fa05 	bl	1dbe0 <sys_clock_tick_get>
   257d6:	e7fb      	b.n	257d0 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   257d8:	f7f8 fa02 	bl	1dbe0 <sys_clock_tick_get>
   257dc:	4623      	mov	r3, r4
   257de:	462a      	mov	r2, r5
   257e0:	2c01      	cmp	r4, #1
   257e2:	f175 0400 	sbcs.w	r4, r5, #0
   257e6:	db03      	blt.n	257f0 <sys_clock_timeout_end_calc+0x52>
   257e8:	18c0      	adds	r0, r0, r3
   257ea:	eb42 0101 	adc.w	r1, r2, r1
   257ee:	e7ef      	b.n	257d0 <sys_clock_timeout_end_calc+0x32>
   257f0:	2301      	movs	r3, #1
   257f2:	2200      	movs	r2, #0
   257f4:	e7f8      	b.n	257e8 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   257f6:	f04f 30ff 	mov.w	r0, #4294967295
   257fa:	4601      	mov	r1, r0
   257fc:	e7e8      	b.n	257d0 <sys_clock_timeout_end_calc+0x32>

000257fe <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   257fe:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   25800:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   25802:	2300      	movs	r3, #0
   25804:	6303      	str	r3, [r0, #48]	; 0x30
   25806:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2580a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2580c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2580e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   25810:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   25812:	6343      	str	r3, [r0, #52]	; 0x34
}
   25814:	4770      	bx	lr

00025816 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   25816:	b510      	push	{r4, lr}
   25818:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2581a:	f7ff ff57 	bl	256cc <z_abort_timeout>

	if (inactive) {
   2581e:	b9a0      	cbnz	r0, 2584a <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   25820:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25822:	b10b      	cbz	r3, 25828 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   25824:	4620      	mov	r0, r4
   25826:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   25828:	f104 0018 	add.w	r0, r4, #24
   2582c:	f7ff fe99 	bl	25562 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   25830:	b158      	cbz	r0, 2584a <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   25832:	f7ff fdfb 	bl	2542c <z_ready_thread>
	__asm__ volatile(
   25836:	f04f 0340 	mov.w	r3, #64	; 0x40
   2583a:	f3ef 8011 	mrs	r0, BASEPRI
   2583e:	f383 8812 	msr	BASEPRI_MAX, r3
   25842:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25846:	f7ff fdaa 	bl	2539e <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   2584a:	bd10      	pop	{r4, pc}

0002584c <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2584c:	b108      	cbz	r0, 25852 <poller_thread+0x6>
   2584e:	3860      	subs	r0, #96	; 0x60
   25850:	4770      	bx	lr
}
   25852:	4770      	bx	lr

00025854 <signal_poller>:
{
   25854:	b538      	push	{r3, r4, r5, lr}
   25856:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   25858:	6880      	ldr	r0, [r0, #8]
   2585a:	f7ff fff7 	bl	2584c <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2585e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   25860:	f013 0f02 	tst.w	r3, #2
   25864:	d028      	beq.n	258b8 <signal_poller+0x64>
   25866:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   25868:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   2586c:	f06f 0001 	mvn.w	r0, #1
   25870:	f04f 31ff 	mov.w	r1, #4294967295
   25874:	428b      	cmp	r3, r1
   25876:	bf08      	it	eq
   25878:	4282      	cmpeq	r2, r0
   2587a:	d01f      	beq.n	258bc <signal_poller+0x68>
	z_unpend_thread(thread);
   2587c:	4620      	mov	r0, r4
   2587e:	f7ff fdab 	bl	253d8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   25882:	2d08      	cmp	r5, #8
   25884:	d00a      	beq.n	2589c <signal_poller+0x48>
   25886:	2300      	movs	r3, #0
   25888:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   2588c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2588e:	f013 0f1f 	tst.w	r3, #31
   25892:	d108      	bne.n	258a6 <signal_poller+0x52>
	return node->next != NULL;
   25894:	69a3      	ldr	r3, [r4, #24]
   25896:	b123      	cbz	r3, 258a2 <signal_poller+0x4e>
   25898:	2300      	movs	r3, #0
   2589a:	e005      	b.n	258a8 <signal_poller+0x54>
   2589c:	f06f 0303 	mvn.w	r3, #3
   258a0:	e7f2      	b.n	25888 <signal_poller+0x34>
   258a2:	2301      	movs	r3, #1
   258a4:	e000      	b.n	258a8 <signal_poller+0x54>
   258a6:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   258a8:	b90b      	cbnz	r3, 258ae <signal_poller+0x5a>
		return 0;
   258aa:	2000      	movs	r0, #0
   258ac:	e005      	b.n	258ba <signal_poller+0x66>
	z_ready_thread(thread);
   258ae:	4620      	mov	r0, r4
   258b0:	f7ff fdbc 	bl	2542c <z_ready_thread>
	return 0;
   258b4:	2000      	movs	r0, #0
   258b6:	e000      	b.n	258ba <signal_poller+0x66>
		return 0;
   258b8:	2000      	movs	r0, #0
}
   258ba:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   258bc:	f06f 000a 	mvn.w	r0, #10
   258c0:	e7fb      	b.n	258ba <signal_poller+0x66>

000258c2 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   258c2:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   258c4:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   258c6:	7823      	ldrb	r3, [r4, #0]
   258c8:	b173      	cbz	r3, 258e8 <signal_triggered_work+0x26>
   258ca:	f854 5c04 	ldr.w	r5, [r4, #-4]
   258ce:	b15d      	cbz	r5, 258e8 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   258d0:	f1a4 0614 	sub.w	r6, r4, #20
   258d4:	f104 0014 	add.w	r0, r4, #20
   258d8:	f7ff fef8 	bl	256cc <z_abort_timeout>
		twork->poll_result = 0;
   258dc:	2300      	movs	r3, #0
   258de:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   258e0:	4631      	mov	r1, r6
   258e2:	4628      	mov	r0, r5
   258e4:	f7ff fc87 	bl	251f6 <k_work_submit_to_queue>
	}

	return 0;
}
   258e8:	2000      	movs	r0, #0
   258ea:	bd70      	pop	{r4, r5, r6, pc}

000258ec <signal_poll_event>:
{
   258ec:	b570      	push	{r4, r5, r6, lr}
   258ee:	4604      	mov	r4, r0
   258f0:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   258f2:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   258f4:	b1d6      	cbz	r6, 2592c <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   258f6:	7873      	ldrb	r3, [r6, #1]
   258f8:	2b01      	cmp	r3, #1
   258fa:	d00d      	beq.n	25918 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   258fc:	2b02      	cmp	r3, #2
   258fe:	d012      	beq.n	25926 <signal_poll_event+0x3a>
		poller->is_polling = false;
   25900:	2000      	movs	r0, #0
   25902:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   25904:	2300      	movs	r3, #0
   25906:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   25908:	68e3      	ldr	r3, [r4, #12]
   2590a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2590e:	430d      	orrs	r5, r1
   25910:	f365 3352 	bfi	r3, r5, #13, #6
   25914:	60e3      	str	r3, [r4, #12]
}
   25916:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   25918:	f7ff ff9c 	bl	25854 <signal_poller>
		poller->is_polling = false;
   2591c:	2300      	movs	r3, #0
   2591e:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   25920:	4298      	cmp	r0, r3
   25922:	daef      	bge.n	25904 <signal_poll_event+0x18>
   25924:	e7f7      	b.n	25916 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   25926:	f7ff ffcc 	bl	258c2 <signal_triggered_work>
   2592a:	e7f7      	b.n	2591c <signal_poll_event+0x30>
	int retcode = 0;
   2592c:	2000      	movs	r0, #0
   2592e:	e7e9      	b.n	25904 <signal_poll_event+0x18>

00025930 <k_poll_event_init>:
{
   25930:	b430      	push	{r4, r5}
	event->poller = NULL;
   25932:	2400      	movs	r4, #0
   25934:	6084      	str	r4, [r0, #8]
	event->type = type;
   25936:	7b45      	ldrb	r5, [r0, #13]
   25938:	f361 0504 	bfi	r5, r1, #0, #5
   2593c:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2593e:	68c1      	ldr	r1, [r0, #12]
   25940:	f364 3152 	bfi	r1, r4, #13, #6
   25944:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   25946:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2594a:	f362 01c3 	bfi	r1, r2, #3, #1
   2594e:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   25950:	89c2      	ldrh	r2, [r0, #14]
   25952:	f364 120f 	bfi	r2, r4, #4, #12
   25956:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   25958:	6103      	str	r3, [r0, #16]
}
   2595a:	bc30      	pop	{r4, r5}
   2595c:	4770      	bx	lr

0002595e <z_handle_obj_poll_events>:
{
   2595e:	b508      	push	{r3, lr}
   25960:	4603      	mov	r3, r0
	return list->head == list;
   25962:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   25964:	4283      	cmp	r3, r0
   25966:	d009      	beq.n	2597c <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   25968:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2596a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2596c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2596e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25970:	2300      	movs	r3, #0
   25972:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   25974:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   25976:	b108      	cbz	r0, 2597c <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   25978:	f7ff ffb8 	bl	258ec <signal_poll_event>
}
   2597c:	bd08      	pop	{r3, pc}

0002597e <z_heap_aligned_alloc>:
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   2597e:	3204      	adds	r2, #4
   25980:	d20f      	bcs.n	259a2 <z_heap_aligned_alloc+0x24>
{
   25982:	b5d0      	push	{r4, r6, r7, lr}
   25984:	b082      	sub	sp, #8
   25986:	4604      	mov	r4, r0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   25988:	2600      	movs	r6, #0
   2598a:	2700      	movs	r7, #0
   2598c:	e9cd 6700 	strd	r6, r7, [sp]
   25990:	f041 0104 	orr.w	r1, r1, #4
   25994:	f7ff f99e 	bl	24cd4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   25998:	b108      	cbz	r0, 2599e <z_heap_aligned_alloc+0x20>
	*heap_ref = heap;
   2599a:	f840 4b04 	str.w	r4, [r0], #4
}
   2599e:	b002      	add	sp, #8
   259a0:	bdd0      	pop	{r4, r6, r7, pc}
		return NULL;
   259a2:	2000      	movs	r0, #0
}
   259a4:	4770      	bx	lr

000259a6 <k_free>:
	if (ptr != NULL) {
   259a6:	b130      	cbz	r0, 259b6 <k_free+0x10>
{
   259a8:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   259aa:	1f01      	subs	r1, r0, #4
   259ac:	f850 0c04 	ldr.w	r0, [r0, #-4]
   259b0:	f7ff f9db 	bl	24d6a <k_heap_free>
}
   259b4:	bd08      	pop	{r3, pc}
   259b6:	4770      	bx	lr

000259b8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   259b8:	4770      	bx	lr

000259ba <memcmp>:
   259ba:	b530      	push	{r4, r5, lr}
   259bc:	3901      	subs	r1, #1
   259be:	2400      	movs	r4, #0
   259c0:	42a2      	cmp	r2, r4
   259c2:	d101      	bne.n	259c8 <memcmp+0xe>
   259c4:	2000      	movs	r0, #0
   259c6:	e005      	b.n	259d4 <memcmp+0x1a>
   259c8:	5d03      	ldrb	r3, [r0, r4]
   259ca:	3401      	adds	r4, #1
   259cc:	5d0d      	ldrb	r5, [r1, r4]
   259ce:	42ab      	cmp	r3, r5
   259d0:	d0f6      	beq.n	259c0 <memcmp+0x6>
   259d2:	1b58      	subs	r0, r3, r5
   259d4:	bd30      	pop	{r4, r5, pc}

000259d6 <memcpy>:
   259d6:	440a      	add	r2, r1
   259d8:	4291      	cmp	r1, r2
   259da:	f100 33ff 	add.w	r3, r0, #4294967295
   259de:	d100      	bne.n	259e2 <memcpy+0xc>
   259e0:	4770      	bx	lr
   259e2:	b510      	push	{r4, lr}
   259e4:	f811 4b01 	ldrb.w	r4, [r1], #1
   259e8:	f803 4f01 	strb.w	r4, [r3, #1]!
   259ec:	4291      	cmp	r1, r2
   259ee:	d1f9      	bne.n	259e4 <memcpy+0xe>
   259f0:	bd10      	pop	{r4, pc}

000259f2 <memmove>:
   259f2:	4288      	cmp	r0, r1
   259f4:	b510      	push	{r4, lr}
   259f6:	eb01 0402 	add.w	r4, r1, r2
   259fa:	d902      	bls.n	25a02 <memmove+0x10>
   259fc:	4284      	cmp	r4, r0
   259fe:	4623      	mov	r3, r4
   25a00:	d807      	bhi.n	25a12 <memmove+0x20>
   25a02:	1e43      	subs	r3, r0, #1
   25a04:	42a1      	cmp	r1, r4
   25a06:	d008      	beq.n	25a1a <memmove+0x28>
   25a08:	f811 2b01 	ldrb.w	r2, [r1], #1
   25a0c:	f803 2f01 	strb.w	r2, [r3, #1]!
   25a10:	e7f8      	b.n	25a04 <memmove+0x12>
   25a12:	4402      	add	r2, r0
   25a14:	4601      	mov	r1, r0
   25a16:	428a      	cmp	r2, r1
   25a18:	d100      	bne.n	25a1c <memmove+0x2a>
   25a1a:	bd10      	pop	{r4, pc}
   25a1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   25a20:	f802 4d01 	strb.w	r4, [r2, #-1]!
   25a24:	e7f7      	b.n	25a16 <memmove+0x24>

00025a26 <memset>:
   25a26:	4402      	add	r2, r0
   25a28:	4603      	mov	r3, r0
   25a2a:	4293      	cmp	r3, r2
   25a2c:	d100      	bne.n	25a30 <memset+0xa>
   25a2e:	4770      	bx	lr
   25a30:	f803 1b01 	strb.w	r1, [r3], #1
   25a34:	e7f9      	b.n	25a2a <memset+0x4>

00025a36 <strncpy>:
   25a36:	b510      	push	{r4, lr}
   25a38:	3901      	subs	r1, #1
   25a3a:	4603      	mov	r3, r0
   25a3c:	b132      	cbz	r2, 25a4c <strncpy+0x16>
   25a3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   25a42:	f803 4b01 	strb.w	r4, [r3], #1
   25a46:	3a01      	subs	r2, #1
   25a48:	2c00      	cmp	r4, #0
   25a4a:	d1f7      	bne.n	25a3c <strncpy+0x6>
   25a4c:	441a      	add	r2, r3
   25a4e:	2100      	movs	r1, #0
   25a50:	4293      	cmp	r3, r2
   25a52:	d100      	bne.n	25a56 <strncpy+0x20>
   25a54:	bd10      	pop	{r4, pc}
   25a56:	f803 1b01 	strb.w	r1, [r3], #1
   25a5a:	e7f9      	b.n	25a50 <strncpy+0x1a>

00025a5c <strnlen>:
   25a5c:	b510      	push	{r4, lr}
   25a5e:	4602      	mov	r2, r0
   25a60:	4401      	add	r1, r0
   25a62:	428a      	cmp	r2, r1
   25a64:	4613      	mov	r3, r2
   25a66:	d101      	bne.n	25a6c <strnlen+0x10>
   25a68:	1a18      	subs	r0, r3, r0
   25a6a:	bd10      	pop	{r4, pc}
   25a6c:	781c      	ldrb	r4, [r3, #0]
   25a6e:	3201      	adds	r2, #1
   25a70:	2c00      	cmp	r4, #0
   25a72:	d1f6      	bne.n	25a62 <strnlen+0x6>
   25a74:	e7f8      	b.n	25a68 <strnlen+0xc>
	...

00025a78 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   25a78:	f7f5 bec2 	b.w	1b800 <SystemInit>
