
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	20004d00 	.word	0x20004d00
   4:	000109f9 	.word	0x000109f9

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	0001a981 	.word	0x0001a981
   c:	000109b1 	.word	0x000109b1
	(void)memset(res + 3, 0, 13);
  10:	000109b1 	.word	0x000109b1
  14:	000109b1 	.word	0x000109b1
  18:	000109b1 	.word	0x000109b1
	...
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
  2c:	000100f5 	.word	0x000100f5
	memcpy(out, res, 3);
  30:	000109b1 	.word	0x000109b1
  34:	00000000 	.word	0x00000000
  38:	0001009d 	.word	0x0001009d
  3c:	000109b1 	.word	0x000109b1

00000040 <_irq_vector_table>:
  40:	000101e1 0001bd23 000101e1 000101e1     ....#...........
  50:	000101e1 000101e1 000101e1 000101e1     ................
  60:	0001bceb 000101e1 000101e1 0001bd09     ................
  70:	000101e1 000101e1 000101e1 000101e1     ................
  80:	000101e1 000101e1 000101e1 000101e1     ................
  90:	000101e1 000101e1 000101e1 000101e1     ................
  a0:	000101e1 000101e1 000101e1 000101e1     ................
  b0:	000101e1 000101e1 000101e1 000101e1     ................
  c0:	000101e1 000101e1 000101e1 000101e1     ................
  d0:	000101e1 000101e1 000101e1 000101e1     ................
  e0:	000101e1 000101e1 000101e1 000101e1     ................
  f0:	000101e1 000101e1 000101e1 000101e1     ................

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_IDLE_STACK_SIZE+0x1ba>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_IDLE_STACK_SIZE+0xf0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_IDLE_STACK_SIZE+0x13a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_IDLE_STACK_SIZE+0x136>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_IDLE_STACK_SIZE+0x150>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_IDLE_STACK_SIZE+0x19e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__data_size+0x29>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <__data_size+0xaf>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__data_size+0x7f>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__data_size+0x29>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__data_size+0x29>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__data_size+0x29>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_uldivmod>:
     8ec:	b953      	cbnz	r3, 904 <__aeabi_uldivmod+0x18>
     8ee:	b94a      	cbnz	r2, 904 <__aeabi_uldivmod+0x18>
     8f0:	2900      	cmp	r1, #0
     8f2:	bf08      	it	eq
     8f4:	2800      	cmpeq	r0, #0
     8f6:	bf1c      	itt	ne
     8f8:	f04f 31ff 	movne.w	r1, #4294967295
     8fc:	f04f 30ff 	movne.w	r0, #4294967295
     900:	f000 b96c 	b.w	bdc <__aeabi_idiv0>
     904:	f1ad 0c08 	sub.w	ip, sp, #8
     908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     90c:	f000 f806 	bl	91c <__udivmoddi4>
     910:	f8dd e004 	ldr.w	lr, [sp, #4]
     914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     918:	b004      	add	sp, #16
     91a:	4770      	bx	lr

0000091c <__udivmoddi4>:
     91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     920:	9e08      	ldr	r6, [sp, #32]
     922:	460d      	mov	r5, r1
     924:	4604      	mov	r4, r0
     926:	468e      	mov	lr, r1
     928:	2b00      	cmp	r3, #0
     92a:	f040 8082 	bne.w	a32 <__udivmoddi4+0x116>
     92e:	428a      	cmp	r2, r1
     930:	4617      	mov	r7, r2
     932:	d946      	bls.n	9c2 <__udivmoddi4+0xa6>
     934:	fab2 f282 	clz	r2, r2
     938:	b14a      	cbz	r2, 94e <__udivmoddi4+0x32>
     93a:	f1c2 0120 	rsb	r1, r2, #32
     93e:	fa05 f302 	lsl.w	r3, r5, r2
     942:	fa20 f101 	lsr.w	r1, r0, r1
     946:	4097      	lsls	r7, r2
     948:	ea41 0e03 	orr.w	lr, r1, r3
     94c:	4094      	lsls	r4, r2
     94e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     952:	0c23      	lsrs	r3, r4, #16
     954:	fbbe fcf8 	udiv	ip, lr, r8
     958:	b2b9      	uxth	r1, r7
     95a:	fb08 ee1c 	mls	lr, r8, ip, lr
     95e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     962:	fb0c f001 	mul.w	r0, ip, r1
     966:	4298      	cmp	r0, r3
     968:	d90a      	bls.n	980 <__udivmoddi4+0x64>
     96a:	18fb      	adds	r3, r7, r3
     96c:	f10c 35ff 	add.w	r5, ip, #4294967295
     970:	f080 8116 	bcs.w	ba0 <__udivmoddi4+0x284>
     974:	4298      	cmp	r0, r3
     976:	f240 8113 	bls.w	ba0 <__udivmoddi4+0x284>
     97a:	f1ac 0c02 	sub.w	ip, ip, #2
     97e:	443b      	add	r3, r7
     980:	1a1b      	subs	r3, r3, r0
     982:	b2a4      	uxth	r4, r4
     984:	fbb3 f0f8 	udiv	r0, r3, r8
     988:	fb08 3310 	mls	r3, r8, r0, r3
     98c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     990:	fb00 f101 	mul.w	r1, r0, r1
     994:	42a1      	cmp	r1, r4
     996:	d909      	bls.n	9ac <__udivmoddi4+0x90>
     998:	193c      	adds	r4, r7, r4
     99a:	f100 33ff 	add.w	r3, r0, #4294967295
     99e:	f080 8101 	bcs.w	ba4 <__udivmoddi4+0x288>
     9a2:	42a1      	cmp	r1, r4
     9a4:	f240 80fe 	bls.w	ba4 <__udivmoddi4+0x288>
     9a8:	3802      	subs	r0, #2
     9aa:	443c      	add	r4, r7
     9ac:	1a64      	subs	r4, r4, r1
     9ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     9b2:	2100      	movs	r1, #0
     9b4:	b11e      	cbz	r6, 9be <__udivmoddi4+0xa2>
     9b6:	40d4      	lsrs	r4, r2
     9b8:	2300      	movs	r3, #0
     9ba:	e9c6 4300 	strd	r4, r3, [r6]
     9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9c2:	b902      	cbnz	r2, 9c6 <__udivmoddi4+0xaa>
     9c4:	deff      	udf	#255	; 0xff
     9c6:	fab2 f282 	clz	r2, r2
     9ca:	2a00      	cmp	r2, #0
     9cc:	d14f      	bne.n	a6e <__udivmoddi4+0x152>
     9ce:	1bcb      	subs	r3, r1, r7
     9d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     9d4:	fa1f f887 	uxth.w	r8, r7
     9d8:	2101      	movs	r1, #1
     9da:	fbb3 fcfe 	udiv	ip, r3, lr
     9de:	0c25      	lsrs	r5, r4, #16
     9e0:	fb0e 331c 	mls	r3, lr, ip, r3
     9e4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     9e8:	fb08 f30c 	mul.w	r3, r8, ip
     9ec:	42ab      	cmp	r3, r5
     9ee:	d907      	bls.n	a00 <__udivmoddi4+0xe4>
     9f0:	197d      	adds	r5, r7, r5
     9f2:	f10c 30ff 	add.w	r0, ip, #4294967295
     9f6:	d202      	bcs.n	9fe <__udivmoddi4+0xe2>
     9f8:	42ab      	cmp	r3, r5
     9fa:	f200 80e7 	bhi.w	bcc <__udivmoddi4+0x2b0>
     9fe:	4684      	mov	ip, r0
     a00:	1aed      	subs	r5, r5, r3
     a02:	b2a3      	uxth	r3, r4
     a04:	fbb5 f0fe 	udiv	r0, r5, lr
     a08:	fb0e 5510 	mls	r5, lr, r0, r5
     a0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a10:	fb08 f800 	mul.w	r8, r8, r0
     a14:	45a0      	cmp	r8, r4
     a16:	d907      	bls.n	a28 <__udivmoddi4+0x10c>
     a18:	193c      	adds	r4, r7, r4
     a1a:	f100 33ff 	add.w	r3, r0, #4294967295
     a1e:	d202      	bcs.n	a26 <__udivmoddi4+0x10a>
     a20:	45a0      	cmp	r8, r4
     a22:	f200 80d7 	bhi.w	bd4 <__udivmoddi4+0x2b8>
     a26:	4618      	mov	r0, r3
     a28:	eba4 0408 	sub.w	r4, r4, r8
     a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a30:	e7c0      	b.n	9b4 <__udivmoddi4+0x98>
     a32:	428b      	cmp	r3, r1
     a34:	d908      	bls.n	a48 <__udivmoddi4+0x12c>
     a36:	2e00      	cmp	r6, #0
     a38:	f000 80af 	beq.w	b9a <__udivmoddi4+0x27e>
     a3c:	2100      	movs	r1, #0
     a3e:	e9c6 0500 	strd	r0, r5, [r6]
     a42:	4608      	mov	r0, r1
     a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a48:	fab3 f183 	clz	r1, r3
     a4c:	2900      	cmp	r1, #0
     a4e:	d14b      	bne.n	ae8 <__udivmoddi4+0x1cc>
     a50:	42ab      	cmp	r3, r5
     a52:	d302      	bcc.n	a5a <__udivmoddi4+0x13e>
     a54:	4282      	cmp	r2, r0
     a56:	f200 80b7 	bhi.w	bc8 <__udivmoddi4+0x2ac>
     a5a:	1a84      	subs	r4, r0, r2
     a5c:	eb65 0303 	sbc.w	r3, r5, r3
     a60:	2001      	movs	r0, #1
     a62:	469e      	mov	lr, r3
     a64:	2e00      	cmp	r6, #0
     a66:	d0aa      	beq.n	9be <__udivmoddi4+0xa2>
     a68:	e9c6 4e00 	strd	r4, lr, [r6]
     a6c:	e7a7      	b.n	9be <__udivmoddi4+0xa2>
     a6e:	f1c2 0c20 	rsb	ip, r2, #32
     a72:	fa01 f302 	lsl.w	r3, r1, r2
     a76:	4097      	lsls	r7, r2
     a78:	fa20 f00c 	lsr.w	r0, r0, ip
     a7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a80:	fa21 fc0c 	lsr.w	ip, r1, ip
     a84:	4318      	orrs	r0, r3
     a86:	fbbc f1fe 	udiv	r1, ip, lr
     a8a:	0c05      	lsrs	r5, r0, #16
     a8c:	fb0e cc11 	mls	ip, lr, r1, ip
     a90:	fa1f f887 	uxth.w	r8, r7
     a94:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     a98:	fb01 f308 	mul.w	r3, r1, r8
     a9c:	42ab      	cmp	r3, r5
     a9e:	fa04 f402 	lsl.w	r4, r4, r2
     aa2:	d909      	bls.n	ab8 <__udivmoddi4+0x19c>
     aa4:	197d      	adds	r5, r7, r5
     aa6:	f101 3cff 	add.w	ip, r1, #4294967295
     aaa:	f080 808b 	bcs.w	bc4 <__udivmoddi4+0x2a8>
     aae:	42ab      	cmp	r3, r5
     ab0:	f240 8088 	bls.w	bc4 <__udivmoddi4+0x2a8>
     ab4:	3902      	subs	r1, #2
     ab6:	443d      	add	r5, r7
     ab8:	1aeb      	subs	r3, r5, r3
     aba:	b285      	uxth	r5, r0
     abc:	fbb3 f0fe 	udiv	r0, r3, lr
     ac0:	fb0e 3310 	mls	r3, lr, r0, r3
     ac4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     ac8:	fb00 f308 	mul.w	r3, r0, r8
     acc:	42ab      	cmp	r3, r5
     ace:	d907      	bls.n	ae0 <__udivmoddi4+0x1c4>
     ad0:	197d      	adds	r5, r7, r5
     ad2:	f100 3cff 	add.w	ip, r0, #4294967295
     ad6:	d271      	bcs.n	bbc <__udivmoddi4+0x2a0>
     ad8:	42ab      	cmp	r3, r5
     ada:	d96f      	bls.n	bbc <__udivmoddi4+0x2a0>
     adc:	3802      	subs	r0, #2
     ade:	443d      	add	r5, r7
     ae0:	1aeb      	subs	r3, r5, r3
     ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     ae6:	e778      	b.n	9da <__udivmoddi4+0xbe>
     ae8:	f1c1 0c20 	rsb	ip, r1, #32
     aec:	408b      	lsls	r3, r1
     aee:	fa22 f70c 	lsr.w	r7, r2, ip
     af2:	431f      	orrs	r7, r3
     af4:	fa20 f40c 	lsr.w	r4, r0, ip
     af8:	fa05 f301 	lsl.w	r3, r5, r1
     afc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b00:	fa25 f50c 	lsr.w	r5, r5, ip
     b04:	431c      	orrs	r4, r3
     b06:	0c23      	lsrs	r3, r4, #16
     b08:	fbb5 f9fe 	udiv	r9, r5, lr
     b0c:	fa1f f887 	uxth.w	r8, r7
     b10:	fb0e 5519 	mls	r5, lr, r9, r5
     b14:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b18:	fb09 fa08 	mul.w	sl, r9, r8
     b1c:	45aa      	cmp	sl, r5
     b1e:	fa02 f201 	lsl.w	r2, r2, r1
     b22:	fa00 f301 	lsl.w	r3, r0, r1
     b26:	d908      	bls.n	b3a <__udivmoddi4+0x21e>
     b28:	197d      	adds	r5, r7, r5
     b2a:	f109 30ff 	add.w	r0, r9, #4294967295
     b2e:	d247      	bcs.n	bc0 <__udivmoddi4+0x2a4>
     b30:	45aa      	cmp	sl, r5
     b32:	d945      	bls.n	bc0 <__udivmoddi4+0x2a4>
     b34:	f1a9 0902 	sub.w	r9, r9, #2
     b38:	443d      	add	r5, r7
     b3a:	eba5 050a 	sub.w	r5, r5, sl
     b3e:	b2a4      	uxth	r4, r4
     b40:	fbb5 f0fe 	udiv	r0, r5, lr
     b44:	fb0e 5510 	mls	r5, lr, r0, r5
     b48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b4c:	fb00 f808 	mul.w	r8, r0, r8
     b50:	45a0      	cmp	r8, r4
     b52:	d907      	bls.n	b64 <__udivmoddi4+0x248>
     b54:	193c      	adds	r4, r7, r4
     b56:	f100 35ff 	add.w	r5, r0, #4294967295
     b5a:	d22d      	bcs.n	bb8 <__udivmoddi4+0x29c>
     b5c:	45a0      	cmp	r8, r4
     b5e:	d92b      	bls.n	bb8 <__udivmoddi4+0x29c>
     b60:	3802      	subs	r0, #2
     b62:	443c      	add	r4, r7
     b64:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     b68:	eba4 0408 	sub.w	r4, r4, r8
     b6c:	fba0 8902 	umull	r8, r9, r0, r2
     b70:	454c      	cmp	r4, r9
     b72:	46c6      	mov	lr, r8
     b74:	464d      	mov	r5, r9
     b76:	d319      	bcc.n	bac <__udivmoddi4+0x290>
     b78:	d016      	beq.n	ba8 <__udivmoddi4+0x28c>
     b7a:	b15e      	cbz	r6, b94 <__udivmoddi4+0x278>
     b7c:	ebb3 020e 	subs.w	r2, r3, lr
     b80:	eb64 0405 	sbc.w	r4, r4, r5
     b84:	fa04 fc0c 	lsl.w	ip, r4, ip
     b88:	40ca      	lsrs	r2, r1
     b8a:	ea4c 0202 	orr.w	r2, ip, r2
     b8e:	40cc      	lsrs	r4, r1
     b90:	e9c6 2400 	strd	r2, r4, [r6]
     b94:	2100      	movs	r1, #0
     b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b9a:	4631      	mov	r1, r6
     b9c:	4630      	mov	r0, r6
     b9e:	e70e      	b.n	9be <__udivmoddi4+0xa2>
     ba0:	46ac      	mov	ip, r5
     ba2:	e6ed      	b.n	980 <__udivmoddi4+0x64>
     ba4:	4618      	mov	r0, r3
     ba6:	e701      	b.n	9ac <__udivmoddi4+0x90>
     ba8:	4543      	cmp	r3, r8
     baa:	d2e6      	bcs.n	b7a <__udivmoddi4+0x25e>
     bac:	ebb8 0e02 	subs.w	lr, r8, r2
     bb0:	eb69 0507 	sbc.w	r5, r9, r7
     bb4:	3801      	subs	r0, #1
     bb6:	e7e0      	b.n	b7a <__udivmoddi4+0x25e>
     bb8:	4628      	mov	r0, r5
     bba:	e7d3      	b.n	b64 <__udivmoddi4+0x248>
     bbc:	4660      	mov	r0, ip
     bbe:	e78f      	b.n	ae0 <__udivmoddi4+0x1c4>
     bc0:	4681      	mov	r9, r0
     bc2:	e7ba      	b.n	b3a <__udivmoddi4+0x21e>
     bc4:	4661      	mov	r1, ip
     bc6:	e777      	b.n	ab8 <__udivmoddi4+0x19c>
     bc8:	4608      	mov	r0, r1
     bca:	e74b      	b.n	a64 <__udivmoddi4+0x148>
     bcc:	f1ac 0c02 	sub.w	ip, ip, #2
     bd0:	443d      	add	r5, r7
     bd2:	e715      	b.n	a00 <__udivmoddi4+0xe4>
     bd4:	3802      	subs	r0, #2
     bd6:	443c      	add	r4, r7
     bd8:	e726      	b.n	a28 <__udivmoddi4+0x10c>
     bda:	bf00      	nop

00000bdc <__aeabi_idiv0>:
     bdc:	4770      	bx	lr
     bde:	bf00      	nop

00000be0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     be2:	4615      	mov	r5, r2
     be4:	4a0a      	ldr	r2, [pc, #40]	; (c10 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
     be6:	461c      	mov	r4, r3
     be8:	6856      	ldr	r6, [r2, #4]
     bea:	b12e      	cbz	r6, bf8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     bec:	b001      	add	sp, #4
     bee:	462a      	mov	r2, r5
     bf0:	46b4      	mov	ip, r6
     bf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     bf6:	4760      	bx	ip
     bf8:	2000      	movs	r0, #0
     bfa:	f88d 0000 	strb.w	r0, [sp]
     bfe:	4668      	mov	r0, sp
     c00:	f00a f9c2 	bl	af88 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     c04:	f89d 0000 	ldrb.w	r0, [sp]
     c08:	1a28      	subs	r0, r5, r0
     c0a:	7020      	strb	r0, [r4, #0]
     c0c:	2000      	movs	r0, #0
     c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c10:	20000000 	.word	0x20000000

00000c14 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     c14:	4801      	ldr	r0, [pc, #4]	; (c1c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     c16:	7800      	ldrb	r0, [r0, #0]
     c18:	4770      	bx	lr
     c1a:	0000      	.short	0x0000
     c1c:	20000008 	.word	0x20000008

00000c20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     c20:	4905      	ldr	r1, [pc, #20]	; (c38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     c22:	780a      	ldrb	r2, [r1, #0]
     c24:	4290      	cmp	r0, r2
     c26:	d301      	bcc.n	c2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     c28:	2000      	movs	r0, #0
     c2a:	4770      	bx	lr
     c2c:	6849      	ldr	r1, [r1, #4]
     c2e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     c32:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     c36:	4770      	bx	lr
     c38:	20000008 	.word	0x20000008
     c3c:	b570      	push	{r4, r5, r6, lr}
     c3e:	4605      	mov	r5, r0
     c40:	2a20      	cmp	r2, #32
     c42:	d027      	beq.n	c94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     c44:	4819      	ldr	r0, [pc, #100]	; (cac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     c46:	4c1a      	ldr	r4, [pc, #104]	; (cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     c48:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     c4c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     c50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     c54:	2920      	cmp	r1, #32
     c56:	d022      	beq.n	c9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     c58:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     c5c:	7840      	ldrb	r0, [r0, #1]
     c5e:	784c      	ldrb	r4, [r1, #1]
     c60:	7048      	strb	r0, [r1, #1]
     c62:	4620      	mov	r0, r4
     c64:	4601      	mov	r1, r0
     c66:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     c6a:	4291      	cmp	r1, r2
     c6c:	7005      	strb	r5, [r0, #0]
     c6e:	7840      	ldrb	r0, [r0, #1]
     c70:	d1f8      	bne.n	c64 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     c72:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     c76:	2a20      	cmp	r2, #32
     c78:	bf1a      	itte	ne
     c7a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     c7e:	7054      	strbne	r4, [r2, #1]
     c80:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     c84:	2220      	movs	r2, #32
     c86:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     c8a:	f88c 2001 	strb.w	r2, [ip, #1]
     c8e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     c92:	bd70      	pop	{r4, r5, r6, pc}
     c94:	f240 217e 	movw	r1, #638	; 0x27e
     c98:	2070      	movs	r0, #112	; 0x70
     c9a:	f003 f987 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c9e:	f893 4020 	ldrb.w	r4, [r3, #32]
     ca2:	7840      	ldrb	r0, [r0, #1]
     ca4:	f883 0020 	strb.w	r0, [r3, #32]
     ca8:	e7db      	b.n	c62 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     caa:	0000      	.short	0x0000
     cac:	20000ae4 	.word	0x20000ae4
     cb0:	20000b64 	.word	0x20000b64
     cb4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cb8:	b085      	sub	sp, #20
     cba:	4615      	mov	r5, r2
     cbc:	460c      	mov	r4, r1
     cbe:	f002 f915 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     cc2:	4428      	add	r0, r5
     cc4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     cc8:	9002      	str	r0, [sp, #8]
     cca:	6821      	ldr	r1, [r4, #0]
     ccc:	1a08      	subs	r0, r1, r0
     cce:	0200      	lsls	r0, r0, #8
     cd0:	17c1      	asrs	r1, r0, #31
     cd2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     cd6:	1200      	asrs	r0, r0, #8
     cd8:	2800      	cmp	r0, #0
     cda:	f300 80d5 	bgt.w	e88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
     cde:	48ac      	ldr	r0, [pc, #688]	; (f90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
     ce0:	9f08      	ldr	r7, [sp, #32]
     ce2:	4eac      	ldr	r6, [pc, #688]	; (f94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
     ce4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     ce8:	9003      	str	r0, [sp, #12]
     cea:	f890 5020 	ldrb.w	r5, [r0, #32]
     cee:	2020      	movs	r0, #32
     cf0:	46e9      	mov	r9, sp
     cf2:	f10d 0804 	add.w	r8, sp, #4
     cf6:	f88d 0000 	strb.w	r0, [sp]
     cfa:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     cfe:	2d20      	cmp	r5, #32
     d00:	bf18      	it	ne
     d02:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     d06:	d025      	beq.n	d54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     d08:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     d0c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     d10:	6822      	ldr	r2, [r4, #0]
     d12:	68c1      	ldr	r1, [r0, #12]
     d14:	1a51      	subs	r1, r2, r1
     d16:	0209      	lsls	r1, r1, #8
     d18:	17ca      	asrs	r2, r1, #31
     d1a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     d1e:	3008      	adds	r0, #8
     d20:	1209      	asrs	r1, r1, #8
     d22:	d417      	bmi.n	d54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     d24:	8961      	ldrh	r1, [r4, #10]
     d26:	b171      	cbz	r1, d46 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
     d28:	8941      	ldrh	r1, [r0, #10]
     d2a:	b961      	cbnz	r1, d46 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
     d2c:	f000 fdb4 	bl	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
     d30:	f002 f8dc 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     d34:	6821      	ldr	r1, [r4, #0]
     d36:	1a08      	subs	r0, r1, r0
     d38:	0200      	lsls	r0, r0, #8
     d3a:	17c1      	asrs	r1, r0, #31
     d3c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     d40:	1200      	asrs	r0, r0, #8
     d42:	2833      	cmp	r0, #51	; 0x33
     d44:	db06      	blt.n	d54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
     d46:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     d4a:	f889 5000 	strb.w	r5, [r9]
     d4e:	7845      	ldrb	r5, [r0, #1]
     d50:	2d20      	cmp	r5, #32
     d52:	d1d9      	bne.n	d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
     d54:	f899 0000 	ldrb.w	r0, [r9]
     d58:	f888 0000 	strb.w	r0, [r8]
     d5c:	46a1      	mov	r9, r4
     d5e:	2d20      	cmp	r5, #32
     d60:	bf1c      	itt	ne
     d62:	488d      	ldrne	r0, [pc, #564]	; (f98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     d64:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     d68:	f000 810e 	beq.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     d6c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     d70:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     d74:	f8d9 2004 	ldr.w	r2, [r9, #4]
     d78:	f8da 1008 	ldr.w	r1, [sl, #8]
     d7c:	4648      	mov	r0, r9
     d7e:	1a89      	subs	r1, r1, r2
     d80:	0209      	lsls	r1, r1, #8
     d82:	17ca      	asrs	r2, r1, #31
     d84:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     d88:	f10a 0708 	add.w	r7, sl, #8
     d8c:	1209      	asrs	r1, r1, #8
     d8e:	d415      	bmi.n	dbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
     d90:	8979      	ldrh	r1, [r7, #10]
     d92:	2900      	cmp	r1, #0
     d94:	f000 80f8 	beq.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     d98:	8941      	ldrh	r1, [r0, #10]
     d9a:	2900      	cmp	r1, #0
     d9c:	f040 80f4 	bne.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     da0:	f000 fd7a 	bl	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
     da4:	f002 f8a2 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     da8:	6839      	ldr	r1, [r7, #0]
     daa:	1a08      	subs	r0, r1, r0
     dac:	0200      	lsls	r0, r0, #8
     dae:	17c1      	asrs	r1, r0, #31
     db0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     db4:	1200      	asrs	r0, r0, #8
     db6:	2833      	cmp	r0, #51	; 0x33
     db8:	f280 80e6 	bge.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     dbc:	f888 5000 	strb.w	r5, [r8]
     dc0:	f89a 1014 	ldrb.w	r1, [sl, #20]
     dc4:	f899 000c 	ldrb.w	r0, [r9, #12]
     dc8:	4281      	cmp	r1, r0
     dca:	d906      	bls.n	dda <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
     dcc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     dd0:	7845      	ldrb	r5, [r0, #1]
     dd2:	2d20      	cmp	r5, #32
     dd4:	d1ca      	bne.n	d6c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
     dd6:	f000 b8d7 	b.w	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     dda:	f89d 0004 	ldrb.w	r0, [sp, #4]
     dde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     de2:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     de6:	8a68      	ldrh	r0, [r5, #18]
     de8:	68ef      	ldr	r7, [r5, #12]
     dea:	2800      	cmp	r0, #0
     dec:	d143      	bne.n	e76 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
     dee:	8960      	ldrh	r0, [r4, #10]
     df0:	b3e8      	cbz	r0, e6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
     df2:	68a8      	ldr	r0, [r5, #8]
     df4:	f00a f8e8 	bl	afc8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     df8:	8a69      	ldrh	r1, [r5, #18]
     dfa:	7c2a      	ldrb	r2, [r5, #16]
     dfc:	4b67      	ldr	r3, [pc, #412]	; (f9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
     dfe:	4411      	add	r1, r2
     e00:	1c49      	adds	r1, r1, #1
     e02:	1842      	adds	r2, r0, r1
     e04:	4298      	cmp	r0, r3
     e06:	d904      	bls.n	e12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
     e08:	f240 6109 	movw	r1, #1545	; 0x609
     e0c:	2070      	movs	r0, #112	; 0x70
     e0e:	f003 f8cd 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e12:	4863      	ldr	r0, [pc, #396]	; (fa0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
     e14:	4281      	cmp	r1, r0
     e16:	dd04      	ble.n	e22 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
     e18:	f240 610a 	movw	r1, #1546	; 0x60a
     e1c:	2070      	movs	r0, #112	; 0x70
     e1e:	f003 f8c5 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e22:	4860      	ldr	r0, [pc, #384]	; (fa4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
     e24:	4281      	cmp	r1, r0
     e26:	da04      	bge.n	e32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
     e28:	f240 610b 	movw	r1, #1547	; 0x60b
     e2c:	2070      	movs	r0, #112	; 0x70
     e2e:	f003 f8bd 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e32:	485d      	ldr	r0, [pc, #372]	; (fa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
     e34:	4290      	cmp	r0, r2
     e36:	bfdc      	itt	le
     e38:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     e3c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     e40:	dd05      	ble.n	e4e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
     e42:	2a00      	cmp	r2, #0
     e44:	bfbc      	itt	lt
     e46:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     e4a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     e4e:	4610      	mov	r0, r2
     e50:	f002 f84c 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e54:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e58:	1a78      	subs	r0, r7, r1
     e5a:	0200      	lsls	r0, r0, #8
     e5c:	17c2      	asrs	r2, r0, #31
     e5e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     e62:	1200      	asrs	r0, r0, #8
     e64:	2833      	cmp	r0, #51	; 0x33
     e66:	bfb8      	it	lt
     e68:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     e6c:	e000      	b.n	e70 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
     e6e:	e002      	b.n	e76 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
     e70:	bfb8      	it	lt
     e72:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     e76:	9802      	ldr	r0, [sp, #8]
     e78:	1a38      	subs	r0, r7, r0
     e7a:	0200      	lsls	r0, r0, #8
     e7c:	17c1      	asrs	r1, r0, #31
     e7e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     e82:	1200      	asrs	r0, r0, #8
     e84:	2800      	cmp	r0, #0
     e86:	dd03      	ble.n	e90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
     e88:	b009      	add	sp, #36	; 0x24
     e8a:	2000      	movs	r0, #0
     e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e90:	e9d4 1000 	ldrd	r1, r0, [r4]
     e94:	1a40      	subs	r0, r0, r1
     e96:	4438      	add	r0, r7
     e98:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     e9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ea0:	e9c4 1000 	strd	r1, r0, [r4]
     ea4:	9803      	ldr	r0, [sp, #12]
     ea6:	f8dd 8020 	ldr.w	r8, [sp, #32]
     eaa:	466f      	mov	r7, sp
     eac:	f890 5020 	ldrb.w	r5, [r0, #32]
     eb0:	2020      	movs	r0, #32
     eb2:	f10d 0a04 	add.w	sl, sp, #4
     eb6:	f88d 0000 	strb.w	r0, [sp]
     eba:	2d20      	cmp	r5, #32
     ebc:	bf1c      	itt	ne
     ebe:	4836      	ldrne	r0, [pc, #216]	; (f98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     ec0:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     ec4:	d025      	beq.n	f12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     ec6:	bf00      	nop
     ec8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     ecc:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     ed0:	6822      	ldr	r2, [r4, #0]
     ed2:	68c1      	ldr	r1, [r0, #12]
     ed4:	1a51      	subs	r1, r2, r1
     ed6:	0209      	lsls	r1, r1, #8
     ed8:	17ca      	asrs	r2, r1, #31
     eda:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     ede:	3008      	adds	r0, #8
     ee0:	1209      	asrs	r1, r1, #8
     ee2:	d416      	bmi.n	f12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     ee4:	8961      	ldrh	r1, [r4, #10]
     ee6:	b171      	cbz	r1, f06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
     ee8:	8941      	ldrh	r1, [r0, #10]
     eea:	b961      	cbnz	r1, f06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
     eec:	f000 fcd4 	bl	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
     ef0:	f001 fffc 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ef4:	6821      	ldr	r1, [r4, #0]
     ef6:	1a08      	subs	r0, r1, r0
     ef8:	0200      	lsls	r0, r0, #8
     efa:	17c1      	asrs	r1, r0, #31
     efc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     f00:	1200      	asrs	r0, r0, #8
     f02:	2833      	cmp	r0, #51	; 0x33
     f04:	db05      	blt.n	f12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
     f06:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     f0a:	703d      	strb	r5, [r7, #0]
     f0c:	7845      	ldrb	r5, [r0, #1]
     f0e:	2d20      	cmp	r5, #32
     f10:	d1da      	bne.n	ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
     f12:	7838      	ldrb	r0, [r7, #0]
     f14:	f88a 0000 	strb.w	r0, [sl]
     f18:	4627      	mov	r7, r4
     f1a:	2d20      	cmp	r5, #32
     f1c:	bf1c      	itt	ne
     f1e:	481e      	ldrne	r0, [pc, #120]	; (f98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
     f20:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     f24:	d030      	beq.n	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f26:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     f2a:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     f2e:	6879      	ldr	r1, [r7, #4]
     f30:	f8d9 2008 	ldr.w	r2, [r9, #8]
     f34:	4638      	mov	r0, r7
     f36:	1a51      	subs	r1, r2, r1
     f38:	0209      	lsls	r1, r1, #8
     f3a:	17ca      	asrs	r2, r1, #31
     f3c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     f40:	f109 0808 	add.w	r8, r9, #8
     f44:	1209      	asrs	r1, r1, #8
     f46:	d412      	bmi.n	f6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
     f48:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     f4c:	b1e1      	cbz	r1, f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f4e:	8941      	ldrh	r1, [r0, #10]
     f50:	b9d1      	cbnz	r1, f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f52:	f000 fca1 	bl	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
     f56:	f001 ffc9 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f5a:	f8d8 1000 	ldr.w	r1, [r8]
     f5e:	1a08      	subs	r0, r1, r0
     f60:	0200      	lsls	r0, r0, #8
     f62:	17c1      	asrs	r1, r0, #31
     f64:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     f68:	1200      	asrs	r0, r0, #8
     f6a:	2833      	cmp	r0, #51	; 0x33
     f6c:	da0c      	bge.n	f88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
     f6e:	f88a 5000 	strb.w	r5, [sl]
     f72:	f899 0014 	ldrb.w	r0, [r9, #20]
     f76:	7b39      	ldrb	r1, [r7, #12]
     f78:	4288      	cmp	r0, r1
     f7a:	f67f af2e 	bls.w	dda <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
     f7e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     f82:	7845      	ldrb	r5, [r0, #1]
     f84:	2d20      	cmp	r5, #32
     f86:	d1ce      	bne.n	f26 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
     f88:	b009      	add	sp, #36	; 0x24
     f8a:	2001      	movs	r0, #1
     f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f90:	20000b64 	.word	0x20000b64
     f94:	200007e4 	.word	0x200007e4
     f98:	20000ae4 	.word	0x20000ae4
     f9c:	1e847fff 	.word	0x1e847fff
     fa0:	07a12000 	.word	0x07a12000
     fa4:	f85ee000 	.word	0xf85ee000
     fa8:	1e848000 	.word	0x1e848000
     fac:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fb0:	4604      	mov	r4, r0
     fb2:	483c      	ldr	r0, [pc, #240]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
     fb4:	460e      	mov	r6, r1
     fb6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     fba:	4f3b      	ldr	r7, [pc, #236]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     fbc:	f890 5020 	ldrb.w	r5, [r0, #32]
     fc0:	2020      	movs	r0, #32
     fc2:	4698      	mov	r8, r3
     fc4:	4692      	mov	sl, r2
     fc6:	7010      	strb	r0, [r2, #0]
     fc8:	f507 7940 	add.w	r9, r7, #768	; 0x300
     fcc:	2d20      	cmp	r5, #32
     fce:	bf18      	it	ne
     fd0:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     fd4:	d028      	beq.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     fd6:	bf00      	nop
     fd8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     fdc:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     fe0:	f100 0108 	add.w	r1, r0, #8
     fe4:	68c0      	ldr	r0, [r0, #12]
     fe6:	6822      	ldr	r2, [r4, #0]
     fe8:	1a10      	subs	r0, r2, r0
     fea:	0200      	lsls	r0, r0, #8
     fec:	17c2      	asrs	r2, r0, #31
     fee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     ff2:	1200      	asrs	r0, r0, #8
     ff4:	d418      	bmi.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     ff6:	8960      	ldrh	r0, [r4, #10]
     ff8:	b178      	cbz	r0, 101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
     ffa:	8948      	ldrh	r0, [r1, #10]
     ffc:	b968      	cbnz	r0, 101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
     ffe:	4608      	mov	r0, r1
    1000:	f000 fc4a 	bl	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
    1004:	f001 ff72 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1008:	6821      	ldr	r1, [r4, #0]
    100a:	1a08      	subs	r0, r1, r0
    100c:	0200      	lsls	r0, r0, #8
    100e:	17c1      	asrs	r1, r0, #31
    1010:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1014:	1200      	asrs	r0, r0, #8
    1016:	2833      	cmp	r0, #51	; 0x33
    1018:	db06      	blt.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    101a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    101e:	f88a 5000 	strb.w	r5, [sl]
    1022:	7845      	ldrb	r5, [r0, #1]
    1024:	2d20      	cmp	r5, #32
    1026:	d1d7      	bne.n	fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    1028:	f89a 0000 	ldrb.w	r0, [sl]
    102c:	f888 0000 	strb.w	r0, [r8]
    1030:	2d20      	cmp	r5, #32
    1032:	bf18      	it	ne
    1034:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1038:	d030      	beq.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    103a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    103e:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1042:	6861      	ldr	r1, [r4, #4]
    1044:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1048:	4620      	mov	r0, r4
    104a:	1a51      	subs	r1, r2, r1
    104c:	0209      	lsls	r1, r1, #8
    104e:	17ca      	asrs	r2, r1, #31
    1050:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1054:	f109 0608 	add.w	r6, r9, #8
    1058:	1209      	asrs	r1, r1, #8
    105a:	d410      	bmi.n	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
    105c:	8971      	ldrh	r1, [r6, #10]
    105e:	b1e9      	cbz	r1, 109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    1060:	8941      	ldrh	r1, [r0, #10]
    1062:	b9d9      	cbnz	r1, 109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    1064:	f000 fc18 	bl	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
    1068:	f001 ff40 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    106c:	6831      	ldr	r1, [r6, #0]
    106e:	1a08      	subs	r0, r1, r0
    1070:	0200      	lsls	r0, r0, #8
    1072:	17c1      	asrs	r1, r0, #31
    1074:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1078:	1200      	asrs	r0, r0, #8
    107a:	2833      	cmp	r0, #51	; 0x33
    107c:	da0e      	bge.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    107e:	f888 5000 	strb.w	r5, [r8]
    1082:	f899 0014 	ldrb.w	r0, [r9, #20]
    1086:	7b21      	ldrb	r1, [r4, #12]
    1088:	4288      	cmp	r0, r1
    108a:	d802      	bhi.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
    108c:	2000      	movs	r0, #0
    108e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1092:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    1096:	7845      	ldrb	r5, [r0, #1]
    1098:	2d20      	cmp	r5, #32
    109a:	d1ce      	bne.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    109c:	2001      	movs	r0, #1
    109e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    10a2:	0000      	.short	0x0000
    10a4:	20000b64 	.word	0x20000b64
    10a8:	200007e4 	.word	0x200007e4
    10ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b0:	b098      	sub	sp, #96	; 0x60
    10b2:	4616      	mov	r6, r2
    10b4:	460d      	mov	r5, r1
    10b6:	f04f 0800 	mov.w	r8, #0
    10ba:	f04f 0b01 	mov.w	fp, #1
    10be:	f002 f997 	bl	33f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    10c2:	4604      	mov	r4, r0
    10c4:	2d01      	cmp	r5, #1
    10c6:	bf18      	it	ne
    10c8:	2d02      	cmpne	r5, #2
    10ca:	d005      	beq.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    10cc:	f640 1194 	movw	r1, #2452	; 0x994
    10d0:	f04f 0070 	mov.w	r0, #112	; 0x70
    10d4:	f002 ff6a 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d8:	49f9      	ldr	r1, [pc, #996]	; (14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>)
    10da:	2001      	movs	r0, #1
    10dc:	6008      	str	r0, [r1, #0]
    10de:	49f9      	ldr	r1, [pc, #996]	; (14c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c4>)
    10e0:	6889      	ldr	r1, [r1, #8]
    10e2:	6008      	str	r0, [r1, #0]
    10e4:	2000      	movs	r0, #0
    10e6:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    10ea:	900c      	str	r0, [sp, #48]	; 0x30
    10ec:	1e40      	subs	r0, r0, #1
    10ee:	900e      	str	r0, [sp, #56]	; 0x38
    10f0:	49f5      	ldr	r1, [pc, #980]	; (14c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c8>)
    10f2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    10f6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    10fa:	3308      	adds	r3, #8
    10fc:	af0f      	add	r7, sp, #60	; 0x3c
    10fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1100:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1104:	a80f      	add	r0, sp, #60	; 0x3c
    1106:	f000 fbc7 	bl	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
    110a:	900d      	str	r0, [sp, #52]	; 0x34
    110c:	48ee      	ldr	r0, [pc, #952]	; (14c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c8>)
    110e:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    1112:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1116:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    111a:	f1b9 0f00 	cmp.w	r9, #0
    111e:	bf14      	ite	ne
    1120:	f04f 0a01 	movne.w	sl, #1
    1124:	f04f 0a00 	moveq.w	sl, #0
    1128:	980f      	ldr	r0, [sp, #60]	; 0x3c
    112a:	9014      	str	r0, [sp, #80]	; 0x50
    112c:	f1ba 0f00 	cmp.w	sl, #0
    1130:	d009      	beq.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    1132:	48e6      	ldr	r0, [pc, #920]	; (14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>)
    1134:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1138:	b928      	cbnz	r0, 1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    113a:	f002 febf 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    113e:	2800      	cmp	r0, #0
    1140:	bf08      	it	eq
    1142:	2701      	moveq	r7, #1
    1144:	d000      	beq.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    1146:	2700      	movs	r7, #0
    1148:	48e1      	ldr	r0, [pc, #900]	; (14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>)
    114a:	2200      	movs	r2, #0
    114c:	9215      	str	r2, [sp, #84]	; 0x54
    114e:	7800      	ldrb	r0, [r0, #0]
    1150:	4616      	mov	r6, r2
    1152:	2801      	cmp	r0, #1
    1154:	bf18      	it	ne
    1156:	2803      	cmpne	r0, #3
    1158:	d140      	bne.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    115a:	48dd      	ldr	r0, [pc, #884]	; (14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>)
    115c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    1160:	eba8 0009 	sub.w	r0, r8, r9
    1164:	9015      	str	r0, [sp, #84]	; 0x54
    1166:	45c8      	cmp	r8, r9
    1168:	d938      	bls.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    116a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    116c:	ea6f 0108 	mvn.w	r1, r8
    1170:	f8df e360 	ldr.w	lr, [pc, #864]	; 14d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d4>
    1174:	1858      	adds	r0, r3, r1
    1176:	f10d 0c0c 	add.w	ip, sp, #12
    117a:	aa17      	add	r2, sp, #92	; 0x5c
    117c:	4573      	cmp	r3, lr
    117e:	d904      	bls.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    1180:	f240 6109 	movw	r1, #1545	; 0x609
    1184:	2070      	movs	r0, #112	; 0x70
    1186:	f002 ff11 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    118a:	4bd3      	ldr	r3, [pc, #844]	; (14d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d8>)
    118c:	4299      	cmp	r1, r3
    118e:	dd04      	ble.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
    1190:	f240 610a 	movw	r1, #1546	; 0x60a
    1194:	2070      	movs	r0, #112	; 0x70
    1196:	f002 ff09 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    119a:	4bd0      	ldr	r3, [pc, #832]	; (14dc <CONFIG_FPROTECT_BLOCK_SIZE+0x4dc>)
    119c:	4299      	cmp	r1, r3
    119e:	da04      	bge.n	11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
    11a0:	f240 610b 	movw	r1, #1547	; 0x60b
    11a4:	2070      	movs	r0, #112	; 0x70
    11a6:	f002 ff01 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11aa:	49cd      	ldr	r1, [pc, #820]	; (14e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e0>)
    11ac:	4281      	cmp	r1, r0
    11ae:	bfdc      	itt	le
    11b0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    11b4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    11b8:	dd05      	ble.n	11c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c6>
    11ba:	2800      	cmp	r0, #0
    11bc:	bfbc      	itt	lt
    11be:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    11c2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    11c6:	4661      	mov	r1, ip
    11c8:	f001 feac 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    11cc:	9803      	ldr	r0, [sp, #12]
    11ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
    11d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    11d4:	9003      	str	r0, [sp, #12]
    11d6:	1a08      	subs	r0, r1, r0
    11d8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    11dc:	2f00      	cmp	r7, #0
    11de:	bf18      	it	ne
    11e0:	2632      	movne	r6, #50	; 0x32
    11e2:	d104      	bne.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    11e4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    11e8:	2800      	cmp	r0, #0
    11ea:	bf18      	it	ne
    11ec:	2602      	movne	r6, #2
    11ee:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    11f2:	d008      	beq.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
    11f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    11f6:	1b00      	subs	r0, r0, r4
    11f8:	0200      	lsls	r0, r0, #8
    11fa:	17c1      	asrs	r1, r0, #31
    11fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1200:	1200      	asrs	r0, r0, #8
    1202:	2801      	cmp	r0, #1
    1204:	da02      	bge.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    1206:	2004      	movs	r0, #4
    1208:	9918      	ldr	r1, [sp, #96]	; 0x60
    120a:	e00b      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
    120c:	b147      	cbz	r7, 1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    120e:	48af      	ldr	r0, [pc, #700]	; (14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>)
    1210:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1214:	b120      	cbz	r0, 1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1216:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    121a:	1c06      	adds	r6, r0, #0
    121c:	bf18      	it	ne
    121e:	2602      	movne	r6, #2
    1220:	4621      	mov	r1, r4
    1222:	2001      	movs	r0, #1
    1224:	f1b9 0f00 	cmp.w	r9, #0
    1228:	d002      	beq.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    122a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    122c:	2b1e      	cmp	r3, #30
    122e:	da02      	bge.n	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
    1230:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1234:	b113      	cbz	r3, 123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1236:	f04f 0b00 	mov.w	fp, #0
    123a:	1e40      	subs	r0, r0, #1
    123c:	1983      	adds	r3, r0, r6
    123e:	48a4      	ldr	r0, [pc, #656]	; (14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>)
    1240:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1244:	7800      	ldrb	r0, [r0, #0]
    1246:	9015      	str	r0, [sp, #84]	; 0x54
    1248:	980f      	ldr	r0, [sp, #60]	; 0x3c
    124a:	1a80      	subs	r0, r0, r2
    124c:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    1250:	ebac 0001 	sub.w	r0, ip, r1
    1254:	0200      	lsls	r0, r0, #8
    1256:	17c6      	asrs	r6, r0, #31
    1258:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    125c:	1200      	asrs	r0, r0, #8
    125e:	4298      	cmp	r0, r3
    1260:	db18      	blt.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1262:	2a00      	cmp	r2, #0
    1264:	bf18      	it	ne
    1266:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    126a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    126c:	9705      	str	r7, [sp, #20]
    126e:	2700      	movs	r7, #0
    1270:	f001 ffb6 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1274:	1a30      	subs	r0, r6, r0
    1276:	0200      	lsls	r0, r0, #8
    1278:	17c1      	asrs	r1, r0, #31
    127a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    127e:	1200      	asrs	r0, r0, #8
    1280:	283e      	cmp	r0, #62	; 0x3e
    1282:	da3f      	bge.n	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
    1284:	2d01      	cmp	r5, #1
    1286:	d020      	beq.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    1288:	1e70      	subs	r0, r6, #1
    128a:	9905      	ldr	r1, [sp, #20]
    128c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1290:	b319      	cbz	r1, 12da <CONFIG_FPROTECT_BLOCK_SIZE+0x2da>
    1292:	e02d      	b.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
    1294:	b182      	cbz	r2, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    1296:	f1be 0f00 	cmp.w	lr, #0
    129a:	bf04      	itt	eq
    129c:	9815      	ldreq	r0, [sp, #84]	; 0x54
    129e:	2803      	cmpeq	r0, #3
    12a0:	d00a      	beq.n	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    12a2:	b927      	cbnz	r7, 12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
    12a4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    12a8:	2800      	cmp	r0, #0
    12aa:	bf18      	it	ne
    12ac:	1e9b      	subne	r3, r3, #2
    12ae:	2200      	movs	r2, #0
    12b0:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    12b4:	4690      	mov	r8, r2
    12b6:	e7c7      	b.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    12b8:	bb07      	cbnz	r7, 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    12ba:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    12be:	b1e8      	cbz	r0, 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    12c0:	2000      	movs	r0, #0
    12c2:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    12c6:	1e9b      	subs	r3, r3, #2
    12c8:	e7be      	b.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    12ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    12ce:	d120      	bne.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    12d0:	f640 110d 	movw	r1, #2317	; 0x90d
    12d4:	2070      	movs	r0, #112	; 0x70
    12d6:	f002 fe69 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12da:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    12de:	d007      	beq.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
    12e0:	1a21      	subs	r1, r4, r0
    12e2:	0209      	lsls	r1, r1, #8
    12e4:	17ca      	asrs	r2, r1, #31
    12e6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    12ea:	1209      	asrs	r1, r1, #8
    12ec:	2904      	cmp	r1, #4
    12ee:	dd03      	ble.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
    12f0:	4604      	mov	r4, r0
    12f2:	f001 ff7b 	bl	31ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    12f6:	e00c      	b.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    12f8:	2900      	cmp	r1, #0
    12fa:	dd0a      	ble.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
    12fc:	b01b      	add	sp, #108	; 0x6c
    12fe:	2000      	movs	r0, #0
    1300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1304:	1e70      	subs	r0, r6, #1
    1306:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    130a:	4620      	mov	r0, r4
    130c:	f001 ff6e 	bl	31ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1310:	4657      	mov	r7, sl
    1312:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1316:	d024      	beq.n	1362 <CONFIG_FPROTECT_BLOCK_SIZE+0x362>
    1318:	980f      	ldr	r0, [sp, #60]	; 0x3c
    131a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    131c:	1b00      	subs	r0, r0, r4
    131e:	1b1b      	subs	r3, r3, r4
    1320:	4a70      	ldr	r2, [pc, #448]	; (14e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e4>)
    1322:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1326:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    132a:	4583      	cmp	fp, r0
    132c:	bf98      	it	ls
    132e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1332:	d2e3      	bcs.n	12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    1334:	429a      	cmp	r2, r3
    1336:	d3e1      	bcc.n	12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    1338:	4620      	mov	r0, r4
    133a:	f009 fe45 	bl	afc8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    133e:	4965      	ldr	r1, [pc, #404]	; (14d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d4>)
    1340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1342:	1c4b      	adds	r3, r1, #1
    1344:	1a16      	subs	r6, r2, r0
    1346:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    134a:	bf24      	itt	cs
    134c:	eba0 0c02 	subcs.w	ip, r0, r2
    1350:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1354:	d310      	bcc.n	1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    1356:	42b1      	cmp	r1, r6
    1358:	d208      	bcs.n	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
    135a:	1a08      	subs	r0, r1, r0
    135c:	4410      	add	r0, r2
    135e:	1c46      	adds	r6, r0, #1
    1360:	e00a      	b.n	1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    1362:	f640 212d 	movw	r1, #2605	; 0xa2d
    1366:	2070      	movs	r0, #112	; 0x70
    1368:	f002 fe20 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    136c:	4561      	cmp	r1, ip
    136e:	d22c      	bcs.n	13ca <CONFIG_FPROTECT_BLOCK_SIZE+0x3ca>
    1370:	1a89      	subs	r1, r1, r2
    1372:	4408      	add	r0, r1
    1374:	1c40      	adds	r0, r0, #1
    1376:	4246      	negs	r6, r0
    1378:	4854      	ldr	r0, [pc, #336]	; (14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>)
    137a:	7f80      	ldrb	r0, [r0, #30]
    137c:	b350      	cbz	r0, 13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>
    137e:	4628      	mov	r0, r5
    1380:	4645      	mov	r5, r8
    1382:	f04f 0b00 	mov.w	fp, #0
    1386:	46d8      	mov	r8, fp
    1388:	2801      	cmp	r0, #1
    138a:	d005      	beq.n	1398 <CONFIG_FPROTECT_BLOCK_SIZE+0x398>
    138c:	2002      	movs	r0, #2
    138e:	f002 f985 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1392:	2001      	movs	r0, #1
    1394:	f002 f982 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1398:	45a9      	cmp	r9, r5
    139a:	d227      	bcs.n	13ec <CONFIG_FPROTECT_BLOCK_SIZE+0x3ec>
    139c:	eba6 0105 	sub.w	r1, r6, r5
    13a0:	f04f 0301 	mov.w	r3, #1
    13a4:	f04f 0203 	mov.w	r2, #3
    13a8:	f04f 0002 	mov.w	r0, #2
    13ac:	f002 f8a2 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    13b0:	2800      	cmp	r0, #0
    13b2:	bf08      	it	eq
    13b4:	f04f 0801 	moveq.w	r8, #1
    13b8:	f1b9 0f00 	cmp.w	r9, #0
    13bc:	d030      	beq.n	1420 <CONFIG_FPROTECT_BLOCK_SIZE+0x420>
    13be:	2301      	movs	r3, #1
    13c0:	eba6 0109 	sub.w	r1, r6, r9
    13c4:	2203      	movs	r2, #3
    13c6:	4618      	mov	r0, r3
    13c8:	e01e      	b.n	1408 <CONFIG_FPROTECT_BLOCK_SIZE+0x408>
    13ca:	f640 310c 	movw	r1, #2828	; 0xb0c
    13ce:	2070      	movs	r0, #112	; 0x70
    13d0:	f002 fdec 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13d4:	45c1      	cmp	r9, r8
    13d6:	bf34      	ite	cc
    13d8:	4640      	movcc	r0, r8
    13da:	4648      	movcs	r0, r9
    13dc:	4458      	add	r0, fp
    13de:	42b0      	cmp	r0, r6
    13e0:	dbcd      	blt.n	137e <CONFIG_FPROTECT_BLOCK_SIZE+0x37e>
    13e2:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    13e6:	2070      	movs	r0, #112	; 0x70
    13e8:	f002 fde0 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13ec:	d910      	bls.n	1410 <CONFIG_FPROTECT_BLOCK_SIZE+0x410>
    13ee:	2301      	movs	r3, #1
    13f0:	eba6 0109 	sub.w	r1, r6, r9
    13f4:	2203      	movs	r2, #3
    13f6:	4618      	mov	r0, r3
    13f8:	f002 f87c 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    13fc:	b328      	cbz	r0, 144a <CONFIG_FPROTECT_BLOCK_SIZE+0x44a>
    13fe:	b17d      	cbz	r5, 1420 <CONFIG_FPROTECT_BLOCK_SIZE+0x420>
    1400:	1b71      	subs	r1, r6, r5
    1402:	2301      	movs	r3, #1
    1404:	2203      	movs	r2, #3
    1406:	2002      	movs	r0, #2
    1408:	f002 f874 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    140c:	b1e8      	cbz	r0, 144a <CONFIG_FPROTECT_BLOCK_SIZE+0x44a>
    140e:	e007      	b.n	1420 <CONFIG_FPROTECT_BLOCK_SIZE+0x420>
    1410:	ea55 0009 	orrs.w	r0, r5, r9
    1414:	d004      	beq.n	1420 <CONFIG_FPROTECT_BLOCK_SIZE+0x420>
    1416:	f640 1177 	movw	r1, #2423	; 0x977
    141a:	2070      	movs	r0, #112	; 0x70
    141c:	f002 fdc6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1420:	2301      	movs	r3, #1
    1422:	2203      	movs	r2, #3
    1424:	4631      	mov	r1, r6
    1426:	2000      	movs	r0, #0
    1428:	f002 f864 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    142c:	b168      	cbz	r0, 144a <CONFIG_FPROTECT_BLOCK_SIZE+0x44a>
    142e:	2501      	movs	r5, #1
    1430:	f1b8 0f00 	cmp.w	r8, #0
    1434:	d003      	beq.n	143e <CONFIG_FPROTECT_BLOCK_SIZE+0x43e>
    1436:	9814      	ldr	r0, [sp, #80]	; 0x50
    1438:	900f      	str	r0, [sp, #60]	; 0x3c
    143a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    143e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 14e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e8>
    1442:	f1ba 0f00 	cmp.w	sl, #0
    1446:	d10e      	bne.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
    1448:	e009      	b.n	145e <CONFIG_FPROTECT_BLOCK_SIZE+0x45e>
    144a:	2002      	movs	r0, #2
    144c:	f002 f926 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1450:	2001      	movs	r0, #1
    1452:	f002 f923 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1456:	b01b      	add	sp, #108	; 0x6c
    1458:	2000      	movs	r0, #0
    145a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    145e:	481b      	ldr	r0, [pc, #108]	; (14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>)
    1460:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1464:	b100      	cbz	r0, 1468 <CONFIG_FPROTECT_BLOCK_SIZE+0x468>
    1466:	b34f      	cbz	r7, 14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    1468:	f8df a060 	ldr.w	sl, [pc, #96]	; 14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>
    146c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1470:	b118      	cbz	r0, 147a <CONFIG_FPROTECT_BLOCK_SIZE+0x47a>
    1472:	f002 fbeb 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1476:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    147a:	b307      	cbz	r7, 14be <CONFIG_FPROTECT_BLOCK_SIZE+0x4be>
    147c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1480:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1484:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1488:	f8c8 0000 	str.w	r0, [r8]
    148c:	2300      	movs	r3, #0
    148e:	2203      	movs	r2, #3
    1490:	2005      	movs	r0, #5
    1492:	f002 f82f 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1496:	b368      	cbz	r0, 14f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f4>
    1498:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    149c:	2005      	movs	r0, #5
    149e:	f002 f9c9 	bl	3834 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    14a2:	4912      	ldr	r1, [pc, #72]	; (14ec <CONFIG_FPROTECT_BLOCK_SIZE+0x4ec>)
    14a4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    14a8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    14ac:	4910      	ldr	r1, [pc, #64]	; (14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>)
    14ae:	12e0      	asrs	r0, r4, #11
    14b0:	6008      	str	r0, [r1, #0]
    14b2:	4c06      	ldr	r4, [pc, #24]	; (14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>)
    14b4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    14b8:	b3e8      	cbz	r0, 1536 <CONFIG_FPROTECT_BLOCK_SIZE+0x536>
    14ba:	e030      	b.n	151e <CONFIG_FPROTECT_BLOCK_SIZE+0x51e>
    14bc:	e01b      	b.n	14f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f6>
    14be:	e01f      	b.n	1500 <CONFIG_FPROTECT_BLOCK_SIZE+0x500>
    14c0:	40000508 	.word	0x40000508
    14c4:	20000010 	.word	0x20000010
    14c8:	200007e4 	.word	0x200007e4
    14cc:	20000b64 	.word	0x20000b64
    14d0:	20000012 	.word	0x20000012
    14d4:	1e847fff 	.word	0x1e847fff
    14d8:	07a12000 	.word	0x07a12000
    14dc:	f85ee000 	.word	0xf85ee000
    14e0:	1e848000 	.word	0x1e848000
    14e4:	003fffff 	.word	0x003fffff
    14e8:	4001f508 	.word	0x4001f508
    14ec:	4001f098 	.word	0x4001f098
    14f0:	4001f504 	.word	0x4001f504
    14f4:	e025      	b.n	1542 <CONFIG_FPROTECT_BLOCK_SIZE+0x542>
    14f6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 15b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b0>
    14fa:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    14fe:	b1c8      	cbz	r0, 1534 <CONFIG_FPROTECT_BLOCK_SIZE+0x534>
    1500:	4c2b      	ldr	r4, [pc, #172]	; (15b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b0>)
    1502:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1506:	b150      	cbz	r0, 151e <CONFIG_FPROTECT_BLOCK_SIZE+0x51e>
    1508:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    150c:	f8c8 0000 	str.w	r0, [r8]
    1510:	2005      	movs	r0, #5
    1512:	f002 f8c3 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1516:	f002 fc01 	bl	3d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    151a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    151e:	eba6 0009 	sub.w	r0, r6, r9
    1522:	f1a0 0119 	sub.w	r1, r0, #25
    1526:	2900      	cmp	r1, #0
    1528:	dc15      	bgt.n	1556 <CONFIG_FPROTECT_BLOCK_SIZE+0x556>
    152a:	f640 2171 	movw	r1, #2673	; 0xa71
    152e:	2070      	movs	r0, #112	; 0x70
    1530:	f002 fd3c 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1534:	e000      	b.n	1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>
    1536:	e009      	b.n	154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>
    1538:	f002 fba4 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    153c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1540:	e79b      	b.n	147a <CONFIG_FPROTECT_BLOCK_SIZE+0x47a>
    1542:	f240 313e 	movw	r1, #830	; 0x33e
    1546:	2070      	movs	r0, #112	; 0x70
    1548:	f002 fd30 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    154c:	f002 fbd8 	bl	3d00 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1550:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1554:	e7e3      	b.n	151e <CONFIG_FPROTECT_BLOCK_SIZE+0x51e>
    1556:	2203      	movs	r2, #3
    1558:	2301      	movs	r3, #1
    155a:	4610      	mov	r0, r2
    155c:	f001 ffca 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1560:	b308      	cbz	r0, 15a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a6>
    1562:	4814      	ldr	r0, [pc, #80]	; (15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>)
    1564:	6880      	ldr	r0, [r0, #8]
    1566:	f8c0 b000 	str.w	fp, [r0]
    156a:	4813      	ldr	r0, [pc, #76]	; (15b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b8>)
    156c:	f8c0 b000 	str.w	fp, [r0]
    1570:	ac0c      	add	r4, sp, #48	; 0x30
    1572:	4812      	ldr	r0, [pc, #72]	; (15bc <CONFIG_FPROTECT_BLOCK_SIZE+0x5bc>)
    1574:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1578:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    157c:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1580:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1584:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1588:	ac10      	add	r4, sp, #64	; 0x40
    158a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    158e:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1592:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1596:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    159a:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    159e:	b01b      	add	sp, #108	; 0x6c
    15a0:	2001      	movs	r0, #1
    15a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15a6:	f640 2179 	movw	r1, #2681	; 0xa79
    15aa:	2070      	movs	r0, #112	; 0x70
    15ac:	f002 fcfe 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15b0:	20000b64 	.word	0x20000b64
    15b4:	20000010 	.word	0x20000010
    15b8:	40000508 	.word	0x40000508
    15bc:	200007e4 	.word	0x200007e4
    15c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15c4:	4606      	mov	r6, r0
    15c6:	b083      	sub	sp, #12
    15c8:	7808      	ldrb	r0, [r1, #0]
    15ca:	7390      	strb	r0, [r2, #14]
    15cc:	7acf      	ldrb	r7, [r1, #11]
    15ce:	7357      	strb	r7, [r2, #13]
    15d0:	7a88      	ldrb	r0, [r1, #10]
    15d2:	7310      	strb	r0, [r2, #12]
    15d4:	8908      	ldrh	r0, [r1, #8]
    15d6:	4614      	mov	r4, r2
    15d8:	8150      	strh	r0, [r2, #10]
    15da:	460d      	mov	r5, r1
    15dc:	780a      	ldrb	r2, [r1, #0]
    15de:	495f      	ldr	r1, [pc, #380]	; (175c <CONFIG_FPROTECT_BLOCK_SIZE+0x75c>)
    15e0:	4699      	mov	r9, r3
    15e2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    15e6:	424b      	negs	r3, r1
    15e8:	f1ac 0801 	sub.w	r8, ip, #1
    15ec:	b15a      	cbz	r2, 1606 <CONFIG_FPROTECT_BLOCK_SIZE+0x606>
    15ee:	43c0      	mvns	r0, r0
    15f0:	f8d5 8004 	ldr.w	r8, [r5, #4]
    15f4:	f104 0208 	add.w	r2, r4, #8
    15f8:	4288      	cmp	r0, r1
    15fa:	dd3d      	ble.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    15fc:	f240 610a 	movw	r1, #1546	; 0x60a
    1600:	2070      	movs	r0, #112	; 0x70
    1602:	f002 fcd3 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1606:	68ee      	ldr	r6, [r5, #12]
    1608:	686d      	ldr	r5, [r5, #4]
    160a:	ea6f 0900 	mvn.w	r9, r0
    160e:	f104 0208 	add.w	r2, r4, #8
    1612:	eb06 0009 	add.w	r0, r6, r9
    1616:	4546      	cmp	r6, r8
    1618:	d904      	bls.n	1624 <CONFIG_FPROTECT_BLOCK_SIZE+0x624>
    161a:	f240 6109 	movw	r1, #1545	; 0x609
    161e:	2070      	movs	r0, #112	; 0x70
    1620:	f002 fcc4 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1624:	4589      	cmp	r9, r1
    1626:	dce9      	bgt.n	15fc <CONFIG_FPROTECT_BLOCK_SIZE+0x5fc>
    1628:	4599      	cmp	r9, r3
    162a:	db28      	blt.n	167e <CONFIG_FPROTECT_BLOCK_SIZE+0x67e>
    162c:	4584      	cmp	ip, r0
    162e:	bfdc      	itt	le
    1630:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1634:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1638:	dd05      	ble.n	1646 <CONFIG_FPROTECT_BLOCK_SIZE+0x646>
    163a:	2800      	cmp	r0, #0
    163c:	bfbc      	itt	lt
    163e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1642:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1646:	4621      	mov	r1, r4
    1648:	f001 fc6c 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    164c:	6820      	ldr	r0, [r4, #0]
    164e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1652:	1970      	adds	r0, r6, r5
    1654:	1c40      	adds	r0, r0, #1
    1656:	6021      	str	r1, [r4, #0]
    1658:	2f00      	cmp	r7, #0
    165a:	bf08      	it	eq
    165c:	307a      	addeq	r0, #122	; 0x7a
    165e:	d003      	beq.n	1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>
    1660:	2f01      	cmp	r7, #1
    1662:	bf08      	it	eq
    1664:	3048      	addeq	r0, #72	; 0x48
    1666:	d12d      	bne.n	16c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c4>
    1668:	f001 fc40 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    166c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1670:	6060      	str	r0, [r4, #4]
    1672:	b003      	add	sp, #12
    1674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1678:	4601      	mov	r1, r0
    167a:	4298      	cmp	r0, r3
    167c:	da04      	bge.n	1688 <CONFIG_FPROTECT_BLOCK_SIZE+0x688>
    167e:	f240 610b 	movw	r1, #1547	; 0x60b
    1682:	2070      	movs	r0, #112	; 0x70
    1684:	f002 fc92 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1688:	4584      	cmp	ip, r0
    168a:	bfdc      	itt	le
    168c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1690:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1694:	dd05      	ble.n	16a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a2>
    1696:	2800      	cmp	r0, #0
    1698:	bfbc      	itt	lt
    169a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    169e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    16a2:	4621      	mov	r1, r4
    16a4:	f001 fc3e 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    16a8:	6820      	ldr	r0, [r4, #0]
    16aa:	2f00      	cmp	r7, #0
    16ac:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    16b0:	f108 0001 	add.w	r0, r8, #1
    16b4:	6021      	str	r1, [r4, #0]
    16b6:	bf08      	it	eq
    16b8:	307a      	addeq	r0, #122	; 0x7a
    16ba:	d008      	beq.n	16ce <CONFIG_FPROTECT_BLOCK_SIZE+0x6ce>
    16bc:	2f01      	cmp	r7, #1
    16be:	bf08      	it	eq
    16c0:	3048      	addeq	r0, #72	; 0x48
    16c2:	d004      	beq.n	16ce <CONFIG_FPROTECT_BLOCK_SIZE+0x6ce>
    16c4:	f240 61b1 	movw	r1, #1713	; 0x6b1
    16c8:	2070      	movs	r0, #112	; 0x70
    16ca:	f002 fc6f 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16ce:	f001 fc0d 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    16d2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    16d6:	6061      	str	r1, [r4, #4]
    16d8:	8960      	ldrh	r0, [r4, #10]
    16da:	aa01      	add	r2, sp, #4
    16dc:	4669      	mov	r1, sp
    16de:	f001 fc21 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    16e2:	481f      	ldr	r0, [pc, #124]	; (1760 <CONFIG_FPROTECT_BLOCK_SIZE+0x760>)
    16e4:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    16e8:	2920      	cmp	r1, #32
    16ea:	d023      	beq.n	1734 <CONFIG_FPROTECT_BLOCK_SIZE+0x734>
    16ec:	6900      	ldr	r0, [r0, #16]
    16ee:	1d40      	adds	r0, r0, #5
    16f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16f4:	e9d4 2100 	ldrd	r2, r1, [r4]
    16f8:	1a89      	subs	r1, r1, r2
    16fa:	6020      	str	r0, [r4, #0]
    16fc:	4408      	add	r0, r1
    16fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1702:	6060      	str	r0, [r4, #4]
    1704:	464b      	mov	r3, r9
    1706:	4632      	mov	r2, r6
    1708:	4621      	mov	r1, r4
    170a:	68e8      	ldr	r0, [r5, #12]
    170c:	f7ff fad2 	bl	cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1710:	2800      	cmp	r0, #0
    1712:	bf1c      	itt	ne
    1714:	b003      	addne	sp, #12
    1716:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    171a:	e9d4 1000 	ldrd	r1, r0, [r4]
    171e:	1a40      	subs	r0, r0, r1
    1720:	4430      	add	r0, r6
    1722:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1726:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    172a:	e9c4 1000 	strd	r1, r0, [r4]
    172e:	b003      	add	sp, #12
    1730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1734:	8960      	ldrh	r0, [r4, #10]
    1736:	f106 0709 	add.w	r7, r6, #9
    173a:	b120      	cbz	r0, 1746 <CONFIG_FPROTECT_BLOCK_SIZE+0x746>
    173c:	f002 fbbe 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1740:	2800      	cmp	r0, #0
    1742:	bf08      	it	eq
    1744:	3732      	addeq	r7, #50	; 0x32
    1746:	4807      	ldr	r0, [pc, #28]	; (1764 <CONFIG_FPROTECT_BLOCK_SIZE+0x764>)
    1748:	7841      	ldrb	r1, [r0, #1]
    174a:	9800      	ldr	r0, [sp, #0]
    174c:	4281      	cmp	r1, r0
    174e:	bf84      	itt	hi
    1750:	1a08      	subhi	r0, r1, r0
    1752:	4407      	addhi	r7, r0
    1754:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1758:	e7cc      	b.n	16f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f4>
    175a:	0000      	.short	0x0000
    175c:	07a12000 	.word	0x07a12000
    1760:	20000b64 	.word	0x20000b64
    1764:	20000012 	.word	0x20000012
    1768:	b510      	push	{r4, lr}
    176a:	4c15      	ldr	r4, [pc, #84]	; (17c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x7c0>)
    176c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1770:	2820      	cmp	r0, #32
    1772:	bf18      	it	ne
    1774:	bd10      	popne	{r4, pc}
    1776:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    177a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    177e:	f890 1020 	ldrb.w	r1, [r0, #32]
    1782:	2920      	cmp	r1, #32
    1784:	d017      	beq.n	17b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7b6>
    1786:	f8df c03c 	ldr.w	ip, [pc, #60]	; 17c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x7c4>
    178a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    178e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1792:	785b      	ldrb	r3, [r3, #1]
    1794:	f880 3020 	strb.w	r3, [r0, #32]
    1798:	2301      	movs	r3, #1
    179a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    179e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    17a2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    17a6:	2002      	movs	r0, #2
    17a8:	f000 f8b0 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    17ac:	2000      	movs	r0, #0
    17ae:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    17b2:	77a0      	strb	r0, [r4, #30]
    17b4:	bd10      	pop	{r4, pc}
    17b6:	f240 318b 	movw	r1, #907	; 0x38b
    17ba:	2070      	movs	r0, #112	; 0x70
    17bc:	f002 fbf6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17c0:	20000b64 	.word	0x20000b64
    17c4:	20000ae4 	.word	0x20000ae4
    17c8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1888 <CONFIG_FPROTECT_BLOCK_SIZE+0x888>
    17d0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    17d4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    17d8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    17dc:	2c20      	cmp	r4, #32
    17de:	bf08      	it	eq
    17e0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    17e4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 188c <CONFIG_FPROTECT_BLOCK_SIZE+0x88c>
    17e8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1890 <CONFIG_FPROTECT_BLOCK_SIZE+0x890>
    17ec:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    17f0:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    17f4:	2607      	movs	r6, #7
    17f6:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    17fa:	2801      	cmp	r0, #1
    17fc:	d00e      	beq.n	181c <CONFIG_FPROTECT_BLOCK_SIZE+0x81c>
    17fe:	2804      	cmp	r0, #4
    1800:	bf08      	it	eq
    1802:	2602      	moveq	r6, #2
    1804:	d00a      	beq.n	181c <CONFIG_FPROTECT_BLOCK_SIZE+0x81c>
    1806:	2805      	cmp	r0, #5
    1808:	bf0c      	ite	eq
    180a:	2603      	moveq	r6, #3
    180c:	2806      	cmpne	r0, #6
    180e:	d005      	beq.n	181c <CONFIG_FPROTECT_BLOCK_SIZE+0x81c>
    1810:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1814:	f04f 0070 	mov.w	r0, #112	; 0x70
    1818:	f002 fbc8 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    181c:	f1bb 0f00 	cmp.w	fp, #0
    1820:	bf18      	it	ne
    1822:	f3af 8000 	nopne.w
    1826:	f3ef 8010 	mrs	r0, PRIMASK
    182a:	b672      	cpsid	i
    182c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1830:	784a      	ldrb	r2, [r1, #1]
    1832:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1836:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    183a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    183e:	42a2      	cmp	r2, r4
    1840:	bf04      	itt	eq
    1842:	2220      	moveq	r2, #32
    1844:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1848:	b1b8      	cbz	r0, 187a <CONFIG_FPROTECT_BLOCK_SIZE+0x87a>
    184a:	462a      	mov	r2, r5
    184c:	4621      	mov	r1, r4
    184e:	2001      	movs	r0, #1
    1850:	f000 f85c 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    1854:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1858:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    185c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1860:	6840      	ldr	r0, [r0, #4]
    1862:	4631      	mov	r1, r6
    1864:	4790      	blx	r2
    1866:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    186a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    186e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1872:	2c20      	cmp	r4, #32
    1874:	d1bc      	bne.n	17f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f0>
    1876:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    187a:	4806      	ldr	r0, [pc, #24]	; (1894 <CONFIG_FPROTECT_BLOCK_SIZE+0x894>)
    187c:	2800      	cmp	r0, #0
    187e:	bf18      	it	ne
    1880:	f3af 8000 	nopne.w
    1884:	b662      	cpsie	i
    1886:	e7e0      	b.n	184a <CONFIG_FPROTECT_BLOCK_SIZE+0x84a>
    1888:	20000b64 	.word	0x20000b64
    188c:	00000000 	.word	0x00000000
    1890:	20000ae4 	.word	0x20000ae4
    1894:	00000000 	.word	0x00000000
    1898:	b510      	push	{r4, lr}
    189a:	4604      	mov	r4, r0
    189c:	6800      	ldr	r0, [r0, #0]
    189e:	f009 fb93 	bl	afc8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    18a2:	4602      	mov	r2, r0
    18a4:	8960      	ldrh	r0, [r4, #10]
    18a6:	7a21      	ldrb	r1, [r4, #8]
    18a8:	4b14      	ldr	r3, [pc, #80]	; (18fc <CONFIG_FPROTECT_BLOCK_SIZE+0x8fc>)
    18aa:	4408      	add	r0, r1
    18ac:	1c41      	adds	r1, r0, #1
    18ae:	1850      	adds	r0, r2, r1
    18b0:	429a      	cmp	r2, r3
    18b2:	d904      	bls.n	18be <CONFIG_FPROTECT_BLOCK_SIZE+0x8be>
    18b4:	f240 6109 	movw	r1, #1545	; 0x609
    18b8:	2070      	movs	r0, #112	; 0x70
    18ba:	f002 fb77 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18be:	4a10      	ldr	r2, [pc, #64]	; (1900 <CONFIG_FPROTECT_BLOCK_SIZE+0x900>)
    18c0:	4291      	cmp	r1, r2
    18c2:	dd04      	ble.n	18ce <CONFIG_FPROTECT_BLOCK_SIZE+0x8ce>
    18c4:	f240 610a 	movw	r1, #1546	; 0x60a
    18c8:	2070      	movs	r0, #112	; 0x70
    18ca:	f002 fb6f 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ce:	4a0d      	ldr	r2, [pc, #52]	; (1904 <CONFIG_FPROTECT_BLOCK_SIZE+0x904>)
    18d0:	4291      	cmp	r1, r2
    18d2:	da04      	bge.n	18de <CONFIG_FPROTECT_BLOCK_SIZE+0x8de>
    18d4:	f240 610b 	movw	r1, #1547	; 0x60b
    18d8:	2070      	movs	r0, #112	; 0x70
    18da:	f002 fb67 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18de:	490a      	ldr	r1, [pc, #40]	; (1908 <CONFIG_FPROTECT_BLOCK_SIZE+0x908>)
    18e0:	4281      	cmp	r1, r0
    18e2:	bfde      	ittt	le
    18e4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    18e8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    18ec:	bd10      	pople	{r4, pc}
    18ee:	2800      	cmp	r0, #0
    18f0:	bfbc      	itt	lt
    18f2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    18f6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    18fa:	bd10      	pop	{r4, pc}
    18fc:	1e847fff 	.word	0x1e847fff
    1900:	07a12000 	.word	0x07a12000
    1904:	f85ee000 	.word	0xf85ee000
    1908:	1e848000 	.word	0x1e848000
    190c:	f8df c054 	ldr.w	ip, [pc, #84]	; 1964 <CONFIG_FPROTECT_BLOCK_SIZE+0x964>
    1910:	b510      	push	{r4, lr}
    1912:	2300      	movs	r3, #0
    1914:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1918:	2807      	cmp	r0, #7
    191a:	d21e      	bcs.n	195a <CONFIG_FPROTECT_BLOCK_SIZE+0x95a>
    191c:	e8df f000 	tbb	[pc, r0]
    1920:	05050505 	.word	0x05050505
    1924:	00040404 	.word	0x00040404
    1928:	2301      	movs	r3, #1
    192a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    192e:	2b00      	cmp	r3, #0
    1930:	bf08      	it	eq
    1932:	bd10      	popeq	{r4, pc}
    1934:	480c      	ldr	r0, [pc, #48]	; (1968 <CONFIG_FPROTECT_BLOCK_SIZE+0x968>)
    1936:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    193a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    193e:	2820      	cmp	r0, #32
    1940:	bf0e      	itee	eq
    1942:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1946:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    194a:	7041      	strbne	r1, [r0, #1]
    194c:	2020      	movs	r0, #32
    194e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1952:	7058      	strb	r0, [r3, #1]
    1954:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1958:	bd10      	pop	{r4, pc}
    195a:	f44f 7115 	mov.w	r1, #596	; 0x254
    195e:	2070      	movs	r0, #112	; 0x70
    1960:	f002 fb24 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1964:	20000ae4 	.word	0x20000ae4
    1968:	20000b64 	.word	0x20000b64
    196c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1970:	b083      	sub	sp, #12
    1972:	485c      	ldr	r0, [pc, #368]	; (1ae4 <CONFIG_FPROTECT_BLOCK_SIZE+0xae4>)
    1974:	9904      	ldr	r1, [sp, #16]
    1976:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    197a:	9001      	str	r0, [sp, #4]
    197c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1980:	9803      	ldr	r0, [sp, #12]
    1982:	4625      	mov	r5, r4
    1984:	2801      	cmp	r0, #1
    1986:	bf18      	it	ne
    1988:	2802      	cmpne	r0, #2
    198a:	d005      	beq.n	1998 <CONFIG_FPROTECT_BLOCK_SIZE+0x998>
    198c:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    1990:	f04f 0070 	mov.w	r0, #112	; 0x70
    1994:	f002 fb0a 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1998:	2700      	movs	r7, #0
    199a:	2d20      	cmp	r5, #32
    199c:	d04a      	beq.n	1a34 <CONFIG_FPROTECT_BLOCK_SIZE+0xa34>
    199e:	4851      	ldr	r0, [pc, #324]	; (1ae4 <CONFIG_FPROTECT_BLOCK_SIZE+0xae4>)
    19a0:	9100      	str	r1, [sp, #0]
    19a2:	2600      	movs	r6, #0
    19a4:	7f80      	ldrb	r0, [r0, #30]
    19a6:	2800      	cmp	r0, #0
    19a8:	bf08      	it	eq
    19aa:	2602      	moveq	r6, #2
    19ac:	f001 fc18 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    19b0:	f8df a138 	ldr.w	sl, [pc, #312]	; 1aec <CONFIG_FPROTECT_BLOCK_SIZE+0xaec>
    19b4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    19b8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    19bc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1ae8 <CONFIG_FPROTECT_BLOCK_SIZE+0xae8>
    19c0:	688a      	ldr	r2, [r1, #8]
    19c2:	68c9      	ldr	r1, [r1, #12]
    19c4:	1a12      	subs	r2, r2, r0
    19c6:	1a09      	subs	r1, r1, r0
    19c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    19cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19d0:	4296      	cmp	r6, r2
    19d2:	bf98      	it	ls
    19d4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    19d8:	d201      	bcs.n	19de <CONFIG_FPROTECT_BLOCK_SIZE+0x9de>
    19da:	4589      	cmp	r9, r1
    19dc:	d228      	bcs.n	1a30 <CONFIG_FPROTECT_BLOCK_SIZE+0xa30>
    19de:	4a44      	ldr	r2, [pc, #272]	; (1af0 <CONFIG_FPROTECT_BLOCK_SIZE+0xaf0>)
    19e0:	9900      	ldr	r1, [sp, #0]
    19e2:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    19e6:	4622      	mov	r2, r4
    19e8:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    19ec:	784c      	ldrb	r4, [r1, #1]
    19ee:	2c20      	cmp	r4, #32
    19f0:	d016      	beq.n	1a20 <CONFIG_FPROTECT_BLOCK_SIZE+0xa20>
    19f2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    19f6:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    19fa:	f8dc 8008 	ldr.w	r8, [ip, #8]
    19fe:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1a02:	eba8 0800 	sub.w	r8, r8, r0
    1a06:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1a0a:	ebac 0100 	sub.w	r1, ip, r0
    1a0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1a12:	4546      	cmp	r6, r8
    1a14:	bf98      	it	ls
    1a16:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1a1a:	d2e4      	bcs.n	19e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x9e6>
    1a1c:	4589      	cmp	r9, r1
    1a1e:	d3e2      	bcc.n	19e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x9e6>
    1a20:	2a20      	cmp	r2, #32
    1a22:	d005      	beq.n	1a30 <CONFIG_FPROTECT_BLOCK_SIZE+0xa30>
    1a24:	2120      	movs	r1, #32
    1a26:	2004      	movs	r0, #4
    1a28:	9b00      	ldr	r3, [sp, #0]
    1a2a:	f7ff f907 	bl	c3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a2e:	4604      	mov	r4, r0
    1a30:	42ac      	cmp	r4, r5
    1a32:	d115      	bne.n	1a60 <CONFIG_FPROTECT_BLOCK_SIZE+0xa60>
    1a34:	482f      	ldr	r0, [pc, #188]	; (1af4 <CONFIG_FPROTECT_BLOCK_SIZE+0xaf4>)
    1a36:	2800      	cmp	r0, #0
    1a38:	bf18      	it	ne
    1a3a:	f3af 8000 	nopne.w
    1a3e:	f001 fbcf 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a42:	4c28      	ldr	r4, [pc, #160]	; (1ae4 <CONFIG_FPROTECT_BLOCK_SIZE+0xae4>)
    1a44:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1a48:	2920      	cmp	r1, #32
    1a4a:	d00d      	beq.n	1a68 <CONFIG_FPROTECT_BLOCK_SIZE+0xa68>
    1a4c:	68e1      	ldr	r1, [r4, #12]
    1a4e:	1c82      	adds	r2, r0, #2
    1a50:	1a51      	subs	r1, r2, r1
    1a52:	0209      	lsls	r1, r1, #8
    1a54:	17ca      	asrs	r2, r1, #31
    1a56:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1a5a:	1209      	asrs	r1, r1, #8
    1a5c:	2900      	cmp	r1, #0
    1a5e:	dd03      	ble.n	1a68 <CONFIG_FPROTECT_BLOCK_SIZE+0xa68>
    1a60:	b005      	add	sp, #20
    1a62:	2000      	movs	r0, #0
    1a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a68:	2d20      	cmp	r5, #32
    1a6a:	d00d      	beq.n	1a88 <CONFIG_FPROTECT_BLOCK_SIZE+0xa88>
    1a6c:	462a      	mov	r2, r5
    1a6e:	9903      	ldr	r1, [sp, #12]
    1a70:	f7ff fb1c 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1a74:	b358      	cbz	r0, 1ace <CONFIG_FPROTECT_BLOCK_SIZE+0xace>
    1a76:	9801      	ldr	r0, [sp, #4]
    1a78:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1a7c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1a80:	b005      	add	sp, #20
    1a82:	2001      	movs	r0, #1
    1a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a88:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1a8c:	b118      	cbz	r0, 1a96 <CONFIG_FPROTECT_BLOCK_SIZE+0xa96>
    1a8e:	f002 f8dd 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1a92:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1a96:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1a9a:	b150      	cbz	r0, 1ab2 <CONFIG_FPROTECT_BLOCK_SIZE+0xab2>
    1a9c:	4916      	ldr	r1, [pc, #88]	; (1af8 <CONFIG_FPROTECT_BLOCK_SIZE+0xaf8>)
    1a9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1aa2:	6008      	str	r0, [r1, #0]
    1aa4:	2005      	movs	r0, #5
    1aa6:	f001 fdf9 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1aaa:	f002 f937 	bl	3d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1aae:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1ab2:	2004      	movs	r0, #4
    1ab4:	f001 fdf2 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ab8:	f001 fe5e 	bl	3778 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1abc:	2020      	movs	r0, #32
    1abe:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    1ac2:	480e      	ldr	r0, [pc, #56]	; (1afc <CONFIG_FPROTECT_BLOCK_SIZE+0xafc>)
    1ac4:	6880      	ldr	r0, [r0, #8]
    1ac6:	6007      	str	r7, [r0, #0]
    1ac8:	480d      	ldr	r0, [pc, #52]	; (1b00 <CONFIG_FPROTECT_BLOCK_SIZE+0xb00>)
    1aca:	6007      	str	r7, [r0, #0]
    1acc:	e7d8      	b.n	1a80 <CONFIG_FPROTECT_BLOCK_SIZE+0xa80>
    1ace:	462a      	mov	r2, r5
    1ad0:	2120      	movs	r1, #32
    1ad2:	2004      	movs	r0, #4
    1ad4:	9b04      	ldr	r3, [sp, #16]
    1ad6:	f7ff f8b1 	bl	c3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1ada:	b005      	add	sp, #20
    1adc:	2000      	movs	r0, #0
    1ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ae2:	0000      	.short	0x0000
    1ae4:	20000b64 	.word	0x20000b64
    1ae8:	003fffff 	.word	0x003fffff
    1aec:	200007e4 	.word	0x200007e4
    1af0:	20000ae4 	.word	0x20000ae4
    1af4:	00000000 	.word	0x00000000
    1af8:	4001f508 	.word	0x4001f508
    1afc:	20000010 	.word	0x20000010
    1b00:	40000508 	.word	0x40000508

00001b04 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1b04:	4906      	ldr	r1, [pc, #24]	; (1b20 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1b06:	b510      	push	{r4, lr}
    1b08:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1b0c:	2a20      	cmp	r2, #32
    1b0e:	bf1c      	itt	ne
    1b10:	7788      	strbne	r0, [r1, #30]
    1b12:	bd10      	popne	{r4, pc}
    1b14:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1b18:	2070      	movs	r0, #112	; 0x70
    1b1a:	f002 fa47 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b1e:	0000      	.short	0x0000
    1b20:	20000b64 	.word	0x20000b64

00001b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b28:	4e5b      	ldr	r6, [pc, #364]	; (1c98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1b2a:	4681      	mov	r9, r0
    1b2c:	b085      	sub	sp, #20
    1b2e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1b32:	468a      	mov	sl, r1
    1b34:	2820      	cmp	r0, #32
    1b36:	d04d      	beq.n	1bd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    1b38:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1b3c:	f106 040c 	add.w	r4, r6, #12
    1b40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1b44:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1b48:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1b4c:	2020      	movs	r0, #32
    1b4e:	f88d 0000 	strb.w	r0, [sp]
    1b52:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1b56:	aa03      	add	r2, sp, #12
    1b58:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1b5c:	a901      	add	r1, sp, #4
    1b5e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1b62:	6930      	ldr	r0, [r6, #16]
    1b64:	9002      	str	r0, [sp, #8]
    1b66:	6830      	ldr	r0, [r6, #0]
    1b68:	4448      	add	r0, r9
    1b6a:	f001 f9db 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1b6e:	68f8      	ldr	r0, [r7, #12]
    1b70:	9901      	ldr	r1, [sp, #4]
    1b72:	4a4a      	ldr	r2, [pc, #296]	; (1c9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1b74:	4408      	add	r0, r1
    1b76:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    1b7a:	4291      	cmp	r1, r2
    1b7c:	d82f      	bhi.n	1bde <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1b7e:	68b9      	ldr	r1, [r7, #8]
    1b80:	1a41      	subs	r1, r0, r1
    1b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1b86:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1b8a:	d228      	bcs.n	1bde <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1b8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b90:	6060      	str	r0, [r4, #4]
    1b92:	4630      	mov	r0, r6
    1b94:	f884 a00c 	strb.w	sl, [r4, #12]
    1b98:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    1b9c:	46ea      	mov	sl, sp
    1b9e:	2d20      	cmp	r5, #32
    1ba0:	bf1c      	itt	ne
    1ba2:	493f      	ldrne	r1, [pc, #252]	; (1ca0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1ba4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1ba8:	d03c      	beq.n	1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1baa:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1bae:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1bb2:	6860      	ldr	r0, [r4, #4]
    1bb4:	68ba      	ldr	r2, [r7, #8]
    1bb6:	4621      	mov	r1, r4
    1bb8:	1a10      	subs	r0, r2, r0
    1bba:	0200      	lsls	r0, r0, #8
    1bbc:	17c2      	asrs	r2, r0, #31
    1bbe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1bc2:	f107 0608 	add.w	r6, r7, #8
    1bc6:	1200      	asrs	r0, r0, #8
    1bc8:	d41b      	bmi.n	1c02 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    1bca:	8970      	ldrh	r0, [r6, #10]
    1bcc:	b350      	cbz	r0, 1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1bce:	8948      	ldrh	r0, [r1, #10]
    1bd0:	b148      	cbz	r0, 1be6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    1bd2:	e027      	b.n	1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1bd4:	f640 317b 	movw	r1, #2939	; 0xb7b
    1bd8:	2070      	movs	r0, #112	; 0x70
    1bda:	f002 f9e7 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bde:	b005      	add	sp, #20
    1be0:	2001      	movs	r0, #1
    1be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1be6:	4620      	mov	r0, r4
    1be8:	f7ff fe56 	bl	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
    1bec:	f001 f97e 	bl	2eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bf0:	6831      	ldr	r1, [r6, #0]
    1bf2:	1a08      	subs	r0, r1, r0
    1bf4:	0200      	lsls	r0, r0, #8
    1bf6:	17c1      	asrs	r1, r0, #31
    1bf8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1bfc:	1200      	asrs	r0, r0, #8
    1bfe:	2833      	cmp	r0, #51	; 0x33
    1c00:	da10      	bge.n	1c24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1c02:	f88a 5000 	strb.w	r5, [sl]
    1c06:	7d39      	ldrb	r1, [r7, #20]
    1c08:	7b20      	ldrb	r0, [r4, #12]
    1c0a:	4281      	cmp	r1, r0
    1c0c:	d805      	bhi.n	1c1a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1c0e:	9802      	ldr	r0, [sp, #8]
    1c10:	6060      	str	r0, [r4, #4]
    1c12:	b005      	add	sp, #20
    1c14:	2002      	movs	r0, #2
    1c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c1a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1c1e:	7845      	ldrb	r5, [r0, #1]
    1c20:	2d20      	cmp	r5, #32
    1c22:	d1c2      	bne.n	1baa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1c24:	2005      	movs	r0, #5
    1c26:	f001 fd39 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c2a:	4c1b      	ldr	r4, [pc, #108]	; (1c98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1c2c:	f04f 30ff 	mov.w	r0, #4294967295
    1c30:	60a0      	str	r0, [r4, #8]
    1c32:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1c36:	f89d 2000 	ldrb.w	r2, [sp]
    1c3a:	2120      	movs	r1, #32
    1c3c:	2a20      	cmp	r2, #32
    1c3e:	bf13      	iteet	ne
    1c40:	2005      	movne	r0, #5
    1c42:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1c46:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1c4a:	f7fe fff7 	blne	c3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1c4e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1c52:	4913      	ldr	r1, [pc, #76]	; (1ca0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1c54:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1c58:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1c5c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1c60:	7048      	strb	r0, [r1, #1]
    1c62:	6820      	ldr	r0, [r4, #0]
    1c64:	4448      	add	r0, r9
    1c66:	6020      	str	r0, [r4, #0]
    1c68:	2001      	movs	r0, #1
    1c6a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1c6e:	7e60      	ldrb	r0, [r4, #25]
    1c70:	2801      	cmp	r0, #1
    1c72:	d105      	bne.n	1c80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1c74:	6920      	ldr	r0, [r4, #16]
    1c76:	1e40      	subs	r0, r0, #1
    1c78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c7c:	f001 fb54 	bl	3328 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1c80:	f89d 0000 	ldrb.w	r0, [sp]
    1c84:	2820      	cmp	r0, #32
    1c86:	d003      	beq.n	1c90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    1c88:	4806      	ldr	r0, [pc, #24]	; (1ca4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    1c8a:	7840      	ldrb	r0, [r0, #1]
    1c8c:	f002 fa5e 	bl	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c90:	b005      	add	sp, #20
    1c92:	2000      	movs	r0, #0
    1c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c98:	20000b64 	.word	0x20000b64
    1c9c:	07a11f9b 	.word	0x07a11f9b
    1ca0:	20000ae4 	.word	0x20000ae4
    1ca4:	20000010 	.word	0x20000010

00001ca8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    1ca8:	b570      	push	{r4, r5, r6, lr}
    1caa:	4a23      	ldr	r2, [pc, #140]	; (1d38 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    1cac:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1cb0:	2920      	cmp	r1, #32
    1cb2:	d039      	beq.n	1d28 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    1cb4:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1cb8:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    1cbc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1cc0:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    1cc4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    1cc8:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    1ccc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    1cd0:	f891 1020 	ldrb.w	r1, [r1, #32]
    1cd4:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    1cd8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    1cdc:	2920      	cmp	r1, #32
    1cde:	d028      	beq.n	1d32 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    1ce0:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    1ce4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    1ce8:	7d2d      	ldrb	r5, [r5, #20]
    1cea:	4285      	cmp	r5, r0
    1cec:	bf84      	itt	hi
    1cee:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1cf2:	7849      	ldrbhi	r1, [r1, #1]
    1cf4:	d8f2      	bhi.n	1cdc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    1cf6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1cfa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1cfe:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1d02:	6889      	ldr	r1, [r1, #8]
    1d04:	6814      	ldr	r4, [r2, #0]
    1d06:	1a08      	subs	r0, r1, r0
    1d08:	0200      	lsls	r0, r0, #8
    1d0a:	17c1      	asrs	r1, r0, #31
    1d0c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1d10:	1200      	asrs	r0, r0, #8
    1d12:	d407      	bmi.n	1d24 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1d14:	f009 f958 	bl	afc8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d18:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1d1c:	4288      	cmp	r0, r1
    1d1e:	bf24      	itt	cs
    1d20:	1b00      	subcs	r0, r0, r4
    1d22:	bd70      	popcs	{r4, r5, r6, pc}
    1d24:	2000      	movs	r0, #0
    1d26:	bd70      	pop	{r4, r5, r6, pc}
    1d28:	f640 314d 	movw	r1, #2893	; 0xb4d
    1d2c:	2070      	movs	r0, #112	; 0x70
    1d2e:	f002 f93d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d32:	f04f 30ff 	mov.w	r0, #4294967295
    1d36:	bd70      	pop	{r4, r5, r6, pc}
    1d38:	20000b64 	.word	0x20000b64

00001d3c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1d3c:	4806      	ldr	r0, [pc, #24]	; (1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1d3e:	b510      	push	{r4, lr}
    1d40:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1d44:	2920      	cmp	r1, #32
    1d46:	bf1c      	itt	ne
    1d48:	7e00      	ldrbne	r0, [r0, #24]
    1d4a:	bd10      	popne	{r4, pc}
    1d4c:	f640 3174 	movw	r1, #2932	; 0xb74
    1d50:	2070      	movs	r0, #112	; 0x70
    1d52:	f002 f92b 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d56:	0000      	.short	0x0000
    1d58:	20000b64 	.word	0x20000b64

00001d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1d5c:	4602      	mov	r2, r0
    1d5e:	4b14      	ldr	r3, [pc, #80]	; (1db0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1d60:	b510      	push	{r4, lr}
    1d62:	4408      	add	r0, r1
    1d64:	429a      	cmp	r2, r3
    1d66:	d904      	bls.n	1d72 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1d68:	f240 6109 	movw	r1, #1545	; 0x609
    1d6c:	2070      	movs	r0, #112	; 0x70
    1d6e:	f002 f91d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d72:	4a10      	ldr	r2, [pc, #64]	; (1db4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1d74:	4291      	cmp	r1, r2
    1d76:	dd04      	ble.n	1d82 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1d78:	f240 610a 	movw	r1, #1546	; 0x60a
    1d7c:	2070      	movs	r0, #112	; 0x70
    1d7e:	f002 f915 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d82:	4a0d      	ldr	r2, [pc, #52]	; (1db8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1d84:	4291      	cmp	r1, r2
    1d86:	da04      	bge.n	1d92 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1d88:	f240 610b 	movw	r1, #1547	; 0x60b
    1d8c:	2070      	movs	r0, #112	; 0x70
    1d8e:	f002 f90d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d92:	490a      	ldr	r1, [pc, #40]	; (1dbc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1d94:	4281      	cmp	r1, r0
    1d96:	bfde      	ittt	le
    1d98:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1d9c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1da0:	bd10      	pople	{r4, pc}
    1da2:	2800      	cmp	r0, #0
    1da4:	bfbc      	itt	lt
    1da6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1daa:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1dae:	bd10      	pop	{r4, pc}
    1db0:	1e847fff 	.word	0x1e847fff
    1db4:	07a12000 	.word	0x07a12000
    1db8:	f85ee000 	.word	0xf85ee000
    1dbc:	1e848000 	.word	0x1e848000

00001dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1dc0:	4a10      	ldr	r2, [pc, #64]	; (1e04 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1dc2:	1a0b      	subs	r3, r1, r0
    1dc4:	f102 0c01 	add.w	ip, r2, #1
    1dc8:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1dcc:	bf3c      	itt	cc
    1dce:	4618      	movcc	r0, r3
    1dd0:	4770      	bxcc	lr
    1dd2:	b510      	push	{r4, lr}
    1dd4:	1a44      	subs	r4, r0, r1
    1dd6:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1dda:	bf3c      	itt	cc
    1ddc:	4618      	movcc	r0, r3
    1dde:	bd10      	popcc	{r4, pc}
    1de0:	429a      	cmp	r2, r3
    1de2:	d203      	bcs.n	1dec <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1de4:	1a10      	subs	r0, r2, r0
    1de6:	4408      	add	r0, r1
    1de8:	1c40      	adds	r0, r0, #1
    1dea:	bd10      	pop	{r4, pc}
    1dec:	42a2      	cmp	r2, r4
    1dee:	d204      	bcs.n	1dfa <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1df0:	1a51      	subs	r1, r2, r1
    1df2:	4408      	add	r0, r1
    1df4:	1c40      	adds	r0, r0, #1
    1df6:	4240      	negs	r0, r0
    1df8:	bd10      	pop	{r4, pc}
    1dfa:	f640 310c 	movw	r1, #2828	; 0xb0c
    1dfe:	2070      	movs	r0, #112	; 0x70
    1e00:	f002 f8d4 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e04:	1e847fff 	.word	0x1e847fff

00001e08 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1e08:	4907      	ldr	r1, [pc, #28]	; (1e28 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    1e0a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1e0e:	4282      	cmp	r2, r0
    1e10:	bf04      	itt	eq
    1e12:	6848      	ldreq	r0, [r1, #4]
    1e14:	4770      	bxeq	lr
    1e16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1e1a:	4904      	ldr	r1, [pc, #16]	; (1e2c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1e1c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1e20:	3008      	adds	r0, #8
    1e22:	f7ff bd39 	b.w	1898 <CONFIG_FPROTECT_BLOCK_SIZE+0x898>
    1e26:	0000      	.short	0x0000
    1e28:	20000b64 	.word	0x20000b64
    1e2c:	200007e4 	.word	0x200007e4

00001e30 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1e30:	490e      	ldr	r1, [pc, #56]	; (1e6c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1e32:	b510      	push	{r4, lr}
    1e34:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1e38:	2820      	cmp	r0, #32
    1e3a:	d012      	beq.n	1e62 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1e3c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1e40:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1e44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1e48:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1e4c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1e50:	6840      	ldr	r0, [r0, #4]
    1e52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1e56:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    1e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e5e:	2104      	movs	r1, #4
    1e60:	4710      	bx	r2
    1e62:	f640 01bc 	movw	r1, #2236	; 0x8bc
    1e66:	2070      	movs	r0, #112	; 0x70
    1e68:	f002 f8a0 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e6c:	20000b64 	.word	0x20000b64

00001e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e72:	4d6d      	ldr	r5, [pc, #436]	; (2028 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1e74:	496d      	ldr	r1, [pc, #436]	; (202c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1e76:	2601      	movs	r6, #1
    1e78:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1e7c:	2808      	cmp	r0, #8
    1e7e:	d273      	bcs.n	1f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1e80:	e8df f000 	tbb	[pc, r0]
    1e84:	af9d6704 	.word	0xaf9d6704
    1e88:	b9b444cd 	.word	0xb9b444cd
    1e8c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1e90:	b918      	cbnz	r0, 1e9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1e92:	f001 fef7 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1e96:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1e9a:	8ae0      	ldrh	r0, [r4, #22]
    1e9c:	b110      	cbz	r0, 1ea4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1e9e:	f002 f80d 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1ea2:	b188      	cbz	r0, 1ec8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1ea4:	f7ff fc60 	bl	1768 <CONFIG_FPROTECT_BLOCK_SIZE+0x768>
    1ea8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    1eac:	68a1      	ldr	r1, [r4, #8]
    1eae:	f1b1 3fff 	cmp.w	r1, #4294967295
    1eb2:	d005      	beq.n	1ec0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1eb4:	2301      	movs	r3, #1
    1eb6:	2203      	movs	r2, #3
    1eb8:	2005      	movs	r0, #5
    1eba:	f001 fb1b 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1ebe:	b140      	cbz	r0, 1ed2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1ec0:	7e60      	ldrb	r0, [r4, #25]
    1ec2:	2801      	cmp	r0, #1
    1ec4:	d110      	bne.n	1ee8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1ec6:	e009      	b.n	1edc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1ec8:	f44f 6107 	mov.w	r1, #2160	; 0x870
    1ecc:	2070      	movs	r0, #112	; 0x70
    1ece:	f002 f86d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ed2:	f640 0175 	movw	r1, #2165	; 0x875
    1ed6:	2070      	movs	r0, #112	; 0x70
    1ed8:	f002 f868 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1edc:	6920      	ldr	r0, [r4, #16]
    1ede:	1e40      	subs	r0, r0, #1
    1ee0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ee4:	f001 fa20 	bl	3328 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1ee8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1eec:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1ef0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ef4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1ef8:	6840      	ldr	r0, [r0, #4]
    1efa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1efe:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1f02:	b001      	add	sp, #4
    1f04:	2101      	movs	r1, #1
    1f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1f0a:	4710      	bx	r2
    1f0c:	f7ff fc2c 	bl	1768 <CONFIG_FPROTECT_BLOCK_SIZE+0x768>
    1f10:	f04f 30ff 	mov.w	r0, #4294967295
    1f14:	60a0      	str	r0, [r4, #8]
    1f16:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1f1a:	f88d 0000 	strb.w	r0, [sp]
    1f1e:	f89d 0000 	ldrb.w	r0, [sp]
    1f22:	b188      	cbz	r0, 1f48 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1f24:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f28:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1f2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f30:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1f34:	6840      	ldr	r0, [r0, #4]
    1f36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1f3a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1f3e:	b001      	add	sp, #4
    1f40:	2106      	movs	r1, #6
    1f42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1f46:	4710      	bx	r2
    1f48:	f640 0186 	movw	r1, #2182	; 0x886
    1f4c:	2070      	movs	r0, #112	; 0x70
    1f4e:	f002 f82d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f52:	f7ff fc09 	bl	1768 <CONFIG_FPROTECT_BLOCK_SIZE+0x768>
    1f56:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1f5a:	f001 ffaf 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f5e:	b120      	cbz	r0, 1f6a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1f60:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1f64:	b130      	cbz	r0, 1f74 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    1f66:	e009      	b.n	1f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1f68:	e059      	b.n	201e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    1f6a:	f640 0196 	movw	r1, #2198	; 0x896
    1f6e:	2070      	movs	r0, #112	; 0x70
    1f70:	f002 f81c 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f74:	f001 fe86 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1f78:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1f7c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1f80:	b158      	cbz	r0, 1f9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1f82:	492b      	ldr	r1, [pc, #172]	; (2030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1f84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1f88:	6008      	str	r0, [r1, #0]
    1f8a:	2005      	movs	r0, #5
    1f8c:	f001 fb86 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1f90:	f001 fec4 	bl	3d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1f94:	2000      	movs	r0, #0
    1f96:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1f9a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f9e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1fa2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1fa6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1faa:	6840      	ldr	r0, [r0, #4]
    1fac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1fb0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1fb4:	b001      	add	sp, #4
    1fb6:	2100      	movs	r1, #0
    1fb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1fbc:	4710      	bx	r2
    1fbe:	f001 fc25 	bl	380c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1fc2:	8ae0      	ldrh	r0, [r4, #22]
    1fc4:	b110      	cbz	r0, 1fcc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1fc6:	f001 ff79 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1fca:	b128      	cbz	r0, 1fd8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    1fcc:	4819      	ldr	r0, [pc, #100]	; (2034 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    1fce:	7800      	ldrb	r0, [r0, #0]
    1fd0:	2803      	cmp	r0, #3
    1fd2:	bf08      	it	eq
    1fd4:	7766      	strbeq	r6, [r4, #29]
    1fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fd8:	f640 01a1 	movw	r1, #2209	; 0x8a1
    1fdc:	2070      	movs	r0, #112	; 0x70
    1fde:	f001 ffe5 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe2:	4815      	ldr	r0, [pc, #84]	; (2038 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1fe4:	6006      	str	r6, [r0, #0]
    1fe6:	6888      	ldr	r0, [r1, #8]
    1fe8:	6006      	str	r6, [r0, #0]
    1fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fec:	7808      	ldrb	r0, [r1, #0]
    1fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1ff2:	f002 b8ab 	b.w	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ff6:	f7ff fbb7 	bl	1768 <CONFIG_FPROTECT_BLOCK_SIZE+0x768>
    1ffa:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1ffe:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2002:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2006:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    200a:	6840      	ldr	r0, [r0, #4]
    200c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2010:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2014:	b001      	add	sp, #4
    2016:	2105      	movs	r1, #5
    2018:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    201c:	4710      	bx	r2
    201e:	f640 01b4 	movw	r1, #2228	; 0x8b4
    2022:	2070      	movs	r0, #112	; 0x70
    2024:	f001 ffc2 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2028:	200007e4 	.word	0x200007e4
    202c:	20000010 	.word	0x20000010
    2030:	4001f508 	.word	0x4001f508
    2034:	20000012 	.word	0x20000012
    2038:	40000508 	.word	0x40000508

0000203c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    203c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2040:	4682      	mov	sl, r0
    2042:	48dc      	ldr	r0, [pc, #880]	; (23b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2044:	b08b      	sub	sp, #44	; 0x2c
    2046:	6800      	ldr	r0, [r0, #0]
    2048:	4ddb      	ldr	r5, [pc, #876]	; (23b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    204a:	05c0      	lsls	r0, r0, #23
    204c:	0dc0      	lsrs	r0, r0, #23
    204e:	d00e      	beq.n	206e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2050:	3810      	subs	r0, #16
    2052:	b240      	sxtb	r0, r0
    2054:	2800      	cmp	r0, #0
    2056:	bfb8      	it	lt
    2058:	f000 000f 	andlt.w	r0, r0, #15
    205c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2060:	bfac      	ite	ge
    2062:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2066:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    206a:	0940      	lsrs	r0, r0, #5
    206c:	d00d      	beq.n	208a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    206e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2070:	f04f 0b00 	mov.w	fp, #0
    2074:	7800      	ldrb	r0, [r0, #0]
    2076:	2800      	cmp	r0, #0
    2078:	bf18      	it	ne
    207a:	2801      	cmpne	r0, #1
    207c:	d018      	beq.n	20b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    207e:	f240 714f 	movw	r1, #1871	; 0x74f
    2082:	f04f 0070 	mov.w	r0, #112	; 0x70
    2086:	f001 ff91 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    208a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    208e:	f04f 0b01 	mov.w	fp, #1
    2092:	2820      	cmp	r0, #32
    2094:	d007      	beq.n	20a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2096:	980c      	ldr	r0, [sp, #48]	; 0x30
    2098:	7800      	ldrb	r0, [r0, #0]
    209a:	b148      	cbz	r0, 20b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    209c:	f240 714b 	movw	r1, #1867	; 0x74b
    20a0:	2070      	movs	r0, #112	; 0x70
    20a2:	f001 ff83 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20a6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    20aa:	2070      	movs	r0, #112	; 0x70
    20ac:	f001 ff7e 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20b0:	4cc2      	ldr	r4, [pc, #776]	; (23bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    20b2:	b124      	cbz	r4, 20be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    20b4:	2100      	movs	r1, #0
    20b6:	f240 7052 	movw	r0, #1874	; 0x752
    20ba:	f3af 8000 	nop.w
    20be:	49c0      	ldr	r1, [pc, #768]	; (23c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    20c0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    20c4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    20c8:	f04f 0801 	mov.w	r8, #1
    20cc:	9000      	str	r0, [sp, #0]
    20ce:	b124      	cbz	r4, 20da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    20d0:	2100      	movs	r1, #0
    20d2:	f240 705a 	movw	r0, #1882	; 0x75a
    20d6:	f3af 8000 	nop.w
    20da:	f1b8 0f00 	cmp.w	r8, #0
    20de:	d009      	beq.n	20f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    20e0:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    20e4:	f04f 0900 	mov.w	r9, #0
    20e8:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    20ec:	f1bb 0f00 	cmp.w	fp, #0
    20f0:	d007      	beq.n	2102 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    20f2:	e032      	b.n	215a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    20f4:	48b3      	ldr	r0, [pc, #716]	; (23c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    20f6:	2800      	cmp	r0, #0
    20f8:	bf18      	it	ne
    20fa:	f3af 8000 	nopne.w
    20fe:	b662      	cpsie	i
    2100:	e7ee      	b.n	20e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2102:	4637      	mov	r7, r6
    2104:	2001      	movs	r0, #1
    2106:	ea20 0607 	bic.w	r6, r0, r7
    210a:	48af      	ldr	r0, [pc, #700]	; (23c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    210c:	2240      	movs	r2, #64	; 0x40
    210e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2112:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2116:	f009 f8c5 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    211a:	b124      	cbz	r4, 2126 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    211c:	2100      	movs	r1, #0
    211e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2122:	f3af 8000 	nop.w
    2126:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    212a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    212e:	6a09      	ldr	r1, [r1, #32]
    2130:	6201      	str	r1, [r0, #32]
    2132:	b124      	cbz	r4, 213e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2134:	2100      	movs	r1, #0
    2136:	f240 50d1 	movw	r0, #1489	; 0x5d1
    213a:	f3af 8000 	nop.w
    213e:	b124      	cbz	r4, 214a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2140:	2100      	movs	r1, #0
    2142:	f240 7064 	movw	r0, #1892	; 0x764
    2146:	f3af 8000 	nop.w
    214a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    214e:	f88d 0004 	strb.w	r0, [sp, #4]
    2152:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2156:	2800      	cmp	r0, #0
    2158:	d1b9      	bne.n	20ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    215a:	b124      	cbz	r4, 2166 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    215c:	2100      	movs	r1, #0
    215e:	f240 706e 	movw	r0, #1902	; 0x76e
    2162:	f3af 8000 	nop.w
    2166:	f001 f83b 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    216a:	4680      	mov	r8, r0
    216c:	4633      	mov	r3, r6
    216e:	aa06      	add	r2, sp, #24
    2170:	990c      	ldr	r1, [sp, #48]	; 0x30
    2172:	f7ff fa25 	bl	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
    2176:	b124      	cbz	r4, 2182 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2178:	2100      	movs	r1, #0
    217a:	f240 7075 	movw	r0, #1909	; 0x775
    217e:	f3af 8000 	nop.w
    2182:	4991      	ldr	r1, [pc, #580]	; (23c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2184:	a806      	add	r0, sp, #24
    2186:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    218a:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    218e:	2901      	cmp	r1, #1
    2190:	bf18      	it	ne
    2192:	2902      	cmpne	r1, #2
    2194:	d13c      	bne.n	2210 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2196:	9906      	ldr	r1, [sp, #24]
    2198:	9b07      	ldr	r3, [sp, #28]
    219a:	eba1 0108 	sub.w	r1, r1, r8
    219e:	4a8b      	ldr	r2, [pc, #556]	; (23cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    21a0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21a4:	eba3 0308 	sub.w	r3, r3, r8
    21a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    21ac:	2902      	cmp	r1, #2
    21ae:	d371      	bcc.n	2294 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    21b0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    21b4:	d26e      	bcs.n	2294 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    21b6:	429a      	cmp	r2, r3
    21b8:	d36c      	bcc.n	2294 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    21ba:	f04f 0901 	mov.w	r9, #1
    21be:	ab01      	add	r3, sp, #4
    21c0:	aa05      	add	r2, sp, #20
    21c2:	4631      	mov	r1, r6
    21c4:	f7fe fef2 	bl	fac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    21c8:	2800      	cmp	r0, #0
    21ca:	d06b      	beq.n	22a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    21cc:	f89d 1014 	ldrb.w	r1, [sp, #20]
    21d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    21d4:	4633      	mov	r3, r6
    21d6:	428a      	cmp	r2, r1
    21d8:	d068      	beq.n	22ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    21da:	2005      	movs	r0, #5
    21dc:	f7fe fd2e 	bl	c3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    21e0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    21e4:	7048      	strb	r0, [r1, #1]
    21e6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    21ea:	2820      	cmp	r0, #32
    21ec:	bf03      	ittte	eq
    21ee:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    21f2:	f880 a020 	strbeq.w	sl, [r0, #32]
    21f6:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    21fa:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    21fe:	bf18      	it	ne
    2200:	f880 a001 	strbne.w	sl, [r0, #1]
    2204:	4632      	mov	r2, r6
    2206:	4651      	mov	r1, sl
    2208:	f05f 0003 	movs.w	r0, #3
    220c:	f7ff fb7e 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    2210:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2214:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2218:	f88d 0004 	strb.w	r0, [sp, #4]
    221c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    2220:	b124      	cbz	r4, 222c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    2222:	2100      	movs	r1, #0
    2224:	f240 707c 	movw	r0, #1916	; 0x77c
    2228:	f3af 8000 	nop.w
    222c:	4868      	ldr	r0, [pc, #416]	; (23d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    222e:	2800      	cmp	r0, #0
    2230:	bf18      	it	ne
    2232:	f3af 8000 	nopne.w
    2236:	f3ef 8810 	mrs	r8, PRIMASK
    223a:	b672      	cpsid	i
    223c:	b124      	cbz	r4, 2248 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    223e:	2100      	movs	r1, #0
    2240:	f240 7082 	movw	r0, #1922	; 0x782
    2244:	f3af 8000 	nop.w
    2248:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    224c:	f88d 0004 	strb.w	r0, [sp, #4]
    2250:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2254:	2800      	cmp	r0, #0
    2256:	f47f af3a 	bne.w	20ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    225a:	b124      	cbz	r4, 2266 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    225c:	2100      	movs	r1, #0
    225e:	f240 708a 	movw	r0, #1930	; 0x78a
    2262:	f3af 8000 	nop.w
    2266:	f10d 0e18 	add.w	lr, sp, #24
    226a:	9800      	ldr	r0, [sp, #0]
    226c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2270:	f100 0008 	add.w	r0, r0, #8
    2274:	f1b9 0f00 	cmp.w	r9, #0
    2278:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    227c:	d044      	beq.n	2308 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    227e:	b124      	cbz	r4, 228a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    2280:	2100      	movs	r1, #0
    2282:	f240 7097 	movw	r0, #1943	; 0x797
    2286:	f3af 8000 	nop.w
    228a:	f1bb 0f00 	cmp.w	fp, #0
    228e:	d12c      	bne.n	22ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2290:	e016      	b.n	22c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    2292:	e7ff      	b.n	2294 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2294:	4632      	mov	r2, r6
    2296:	4651      	mov	r1, sl
    2298:	2004      	movs	r0, #4
    229a:	f7ff fb37 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    229e:	f04f 0901 	mov.w	r9, #1
    22a2:	e7b5      	b.n	2210 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    22a4:	4632      	mov	r2, r6
    22a6:	4651      	mov	r1, sl
    22a8:	2004      	movs	r0, #4
    22aa:	e7af      	b.n	220c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    22ac:	2920      	cmp	r1, #32
    22ae:	bf19      	ittee	ne
    22b0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    22b4:	7840      	ldrbne	r0, [r0, #1]
    22b6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    22ba:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    22be:	e78f      	b.n	21e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    22c0:	b19f      	cbz	r7, 22ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    22c2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    22c6:	2820      	cmp	r0, #32
    22c8:	d10f      	bne.n	22ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    22ca:	b124      	cbz	r4, 22d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    22cc:	2100      	movs	r1, #0
    22ce:	f240 709c 	movw	r0, #1948	; 0x79c
    22d2:	f3af 8000 	nop.w
    22d6:	4631      	mov	r1, r6
    22d8:	2002      	movs	r0, #2
    22da:	f7ff fb47 	bl	196c <CONFIG_FPROTECT_BLOCK_SIZE+0x96c>
    22de:	b920      	cbnz	r0, 22ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    22e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    22e2:	7800      	ldrb	r0, [r0, #0]
    22e4:	b3f0      	cbz	r0, 2364 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    22e6:	2801      	cmp	r0, #1
    22e8:	d04c      	beq.n	2384 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    22ea:	b124      	cbz	r4, 22f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    22ec:	2100      	movs	r1, #0
    22ee:	f240 70b9 	movw	r0, #1977	; 0x7b9
    22f2:	f3af 8000 	nop.w
    22f6:	f1bb 0f00 	cmp.w	fp, #0
    22fa:	bf18      	it	ne
    22fc:	2001      	movne	r0, #1
    22fe:	d04a      	beq.n	2396 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    2300:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2304:	f04f 0901 	mov.w	r9, #1
    2308:	b124      	cbz	r4, 2314 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    230a:	2100      	movs	r1, #0
    230c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    2310:	f3af 8000 	nop.w
    2314:	f1b8 0f00 	cmp.w	r8, #0
    2318:	d045      	beq.n	23a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    231a:	b124      	cbz	r4, 2326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    231c:	2100      	movs	r1, #0
    231e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2322:	f3af 8000 	nop.w
    2326:	f1b9 0f00 	cmp.w	r9, #0
    232a:	d011      	beq.n	2350 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    232c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2330:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2334:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2338:	2820      	cmp	r0, #32
    233a:	d009      	beq.n	2350 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    233c:	b124      	cbz	r4, 2348 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    233e:	2100      	movs	r1, #0
    2340:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2344:	f3af 8000 	nop.w
    2348:	4822      	ldr	r0, [pc, #136]	; (23d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    234a:	7840      	ldrb	r0, [r0, #1]
    234c:	f001 fefe 	bl	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2350:	b124      	cbz	r4, 235c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2352:	2100      	movs	r1, #0
    2354:	f240 70da 	movw	r0, #2010	; 0x7da
    2358:	f3af 8000 	nop.w
    235c:	b00d      	add	sp, #52	; 0x34
    235e:	4648      	mov	r0, r9
    2360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2364:	e7ff      	b.n	2366 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2366:	b124      	cbz	r4, 2372 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2368:	2100      	movs	r1, #0
    236a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    236e:	f3af 8000 	nop.w
    2372:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2376:	4651      	mov	r1, sl
    2378:	2004      	movs	r0, #4
    237a:	f7ff fac7 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    237e:	f04f 0901 	mov.w	r9, #1
    2382:	e7c1      	b.n	2308 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2384:	2c00      	cmp	r4, #0
    2386:	f43f aea2 	beq.w	20ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    238a:	2100      	movs	r1, #0
    238c:	f240 70af 	movw	r0, #1967	; 0x7af
    2390:	f3af 8000 	nop.w
    2394:	e69b      	b.n	20ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2396:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    239a:	2001      	movs	r0, #1
    239c:	ea20 0101 	bic.w	r1, r0, r1
    23a0:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    23a4:	e7ac      	b.n	2300 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    23a6:	4807      	ldr	r0, [pc, #28]	; (23c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    23a8:	2800      	cmp	r0, #0
    23aa:	bf18      	it	ne
    23ac:	f3af 8000 	nopne.w
    23b0:	b662      	cpsie	i
    23b2:	e7b2      	b.n	231a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    23b4:	e000ed04 	.word	0xe000ed04
    23b8:	20000b64 	.word	0x20000b64
    23bc:	00000000 	.word	0x00000000
    23c0:	200007e4 	.word	0x200007e4
    23c4:	00000000 	.word	0x00000000
    23c8:	20000ae4 	.word	0x20000ae4
    23cc:	003fffff 	.word	0x003fffff
    23d0:	00000000 	.word	0x00000000
    23d4:	20000010 	.word	0x20000010

000023d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    23d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23dc:	48a5      	ldr	r0, [pc, #660]	; (2674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    23de:	b08c      	sub	sp, #48	; 0x30
    23e0:	6800      	ldr	r0, [r0, #0]
    23e2:	05c0      	lsls	r0, r0, #23
    23e4:	0dc0      	lsrs	r0, r0, #23
    23e6:	d011      	beq.n	240c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    23e8:	3810      	subs	r0, #16
    23ea:	b240      	sxtb	r0, r0
    23ec:	2800      	cmp	r0, #0
    23ee:	bfb8      	it	lt
    23f0:	f000 000f 	andlt.w	r0, r0, #15
    23f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    23f8:	bfac      	ite	ge
    23fa:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    23fe:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2402:	0940      	lsrs	r0, r0, #5
    2404:	bf08      	it	eq
    2406:	f04f 0901 	moveq.w	r9, #1
    240a:	d001      	beq.n	2410 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    240c:	f04f 0900 	mov.w	r9, #0
    2410:	980c      	ldr	r0, [sp, #48]	; 0x30
    2412:	7800      	ldrb	r0, [r0, #0]
    2414:	2800      	cmp	r0, #0
    2416:	f04f 0000 	mov.w	r0, #0
    241a:	bf1c      	itt	ne
    241c:	b00d      	addne	sp, #52	; 0x34
    241e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2422:	f8df a254 	ldr.w	sl, [pc, #596]	; 2678 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2426:	4d95      	ldr	r5, [pc, #596]	; (267c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2428:	4c95      	ldr	r4, [pc, #596]	; (2680 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    242a:	f04f 0b00 	mov.w	fp, #0
    242e:	900b      	str	r0, [sp, #44]	; 0x2c
    2430:	b125      	cbz	r5, 243c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2432:	2100      	movs	r1, #0
    2434:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2438:	f3af 8000 	nop.w
    243c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2440:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2444:	f04f 0800 	mov.w	r8, #0
    2448:	b125      	cbz	r5, 2454 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    244a:	2100      	movs	r1, #0
    244c:	f240 605d 	movw	r0, #1629	; 0x65d
    2450:	f3af 8000 	nop.w
    2454:	f1b9 0f00 	cmp.w	r9, #0
    2458:	d11d      	bne.n	2496 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    245a:	4637      	mov	r7, r6
    245c:	2001      	movs	r0, #1
    245e:	ea20 0607 	bic.w	r6, r0, r7
    2462:	4888      	ldr	r0, [pc, #544]	; (2684 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2464:	2240      	movs	r2, #64	; 0x40
    2466:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    246a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    246e:	f008 ff19 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2472:	b125      	cbz	r5, 247e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2474:	2100      	movs	r1, #0
    2476:	f240 50cd 	movw	r0, #1485	; 0x5cd
    247a:	f3af 8000 	nop.w
    247e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2482:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2486:	6a09      	ldr	r1, [r1, #32]
    2488:	6201      	str	r1, [r0, #32]
    248a:	b125      	cbz	r5, 2496 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    248c:	2100      	movs	r1, #0
    248e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2492:	f3af 8000 	nop.w
    2496:	b125      	cbz	r5, 24a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2498:	2100      	movs	r1, #0
    249a:	f240 6065 	movw	r0, #1637	; 0x665
    249e:	f3af 8000 	nop.w
    24a2:	f000 fe9d 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    24a6:	4607      	mov	r7, r0
    24a8:	4633      	mov	r3, r6
    24aa:	466a      	mov	r2, sp
    24ac:	990c      	ldr	r1, [sp, #48]	; 0x30
    24ae:	f7ff f887 	bl	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
    24b2:	b125      	cbz	r5, 24be <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    24b4:	2100      	movs	r1, #0
    24b6:	f240 606b 	movw	r0, #1643	; 0x66b
    24ba:	f3af 8000 	nop.w
    24be:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24c2:	2820      	cmp	r0, #32
    24c4:	d014      	beq.n	24f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    24c6:	6920      	ldr	r0, [r4, #16]
    24c8:	9900      	ldr	r1, [sp, #0]
    24ca:	1a09      	subs	r1, r1, r0
    24cc:	0209      	lsls	r1, r1, #8
    24ce:	17ca      	asrs	r2, r1, #31
    24d0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    24d4:	1209      	asrs	r1, r1, #8
    24d6:	d50b      	bpl.n	24f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    24d8:	e9dd 2100 	ldrd	r2, r1, [sp]
    24dc:	1a89      	subs	r1, r1, r2
    24de:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    24e2:	4408      	add	r0, r1
    24e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24e8:	e9cd 2000 	strd	r2, r0, [sp]
    24ec:	f04f 0801 	mov.w	r8, #1
    24f0:	b14d      	cbz	r5, 2506 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    24f2:	2100      	movs	r1, #0
    24f4:	f240 6075 	movw	r0, #1653	; 0x675
    24f8:	f3af 8000 	nop.w
    24fc:	2100      	movs	r1, #0
    24fe:	f240 607b 	movw	r0, #1659	; 0x67b
    2502:	f3af 8000 	nop.w
    2506:	9800      	ldr	r0, [sp, #0]
    2508:	9901      	ldr	r1, [sp, #4]
    250a:	1bc0      	subs	r0, r0, r7
    250c:	1bc9      	subs	r1, r1, r7
    250e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2512:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2516:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    251a:	d205      	bcs.n	2528 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    251c:	458a      	cmp	sl, r1
    251e:	d303      	bcc.n	2528 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2520:	f1b9 0f00 	cmp.w	r9, #0
    2524:	d10c      	bne.n	2540 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2526:	e003      	b.n	2530 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2528:	f1b9 0f00 	cmp.w	r9, #0
    252c:	d038      	beq.n	25a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    252e:	e094      	b.n	265a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2530:	4633      	mov	r3, r6
    2532:	463a      	mov	r2, r7
    2534:	4669      	mov	r1, sp
    2536:	4854      	ldr	r0, [pc, #336]	; (2688 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2538:	f7fe fbbc 	bl	cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    253c:	ea48 0800 	orr.w	r8, r8, r0
    2540:	f1b8 0f00 	cmp.w	r8, #0
    2544:	d022      	beq.n	258c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2546:	9800      	ldr	r0, [sp, #0]
    2548:	f008 fd3e 	bl	afc8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    254c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2550:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2554:	4b4d      	ldr	r3, [pc, #308]	; (268c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2556:	4411      	add	r1, r2
    2558:	1c49      	adds	r1, r1, #1
    255a:	1842      	adds	r2, r0, r1
    255c:	4298      	cmp	r0, r3
    255e:	d841      	bhi.n	25e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2560:	4849      	ldr	r0, [pc, #292]	; (2688 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2562:	4281      	cmp	r1, r0
    2564:	dc5a      	bgt.n	261c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2566:	4240      	negs	r0, r0
    2568:	4281      	cmp	r1, r0
    256a:	db5f      	blt.n	262c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    256c:	1c58      	adds	r0, r3, #1
    256e:	4290      	cmp	r0, r2
    2570:	bfdc      	itt	le
    2572:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2576:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    257a:	dd05      	ble.n	2588 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    257c:	2a00      	cmp	r2, #0
    257e:	bfbc      	itt	lt
    2580:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2584:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2588:	980c      	ldr	r0, [sp, #48]	; 0x30
    258a:	60c2      	str	r2, [r0, #12]
    258c:	2001      	movs	r0, #1
    258e:	900b      	str	r0, [sp, #44]	; 0x2c
    2590:	2d00      	cmp	r5, #0
    2592:	d062      	beq.n	265a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2594:	2100      	movs	r1, #0
    2596:	f240 608e 	movw	r0, #1678	; 0x68e
    259a:	f3af 8000 	nop.w
    259e:	e05c      	b.n	265a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    25a0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    25a4:	aa08      	add	r2, sp, #32
    25a6:	a907      	add	r1, sp, #28
    25a8:	f000 fcbc 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25ac:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    25b0:	2820      	cmp	r0, #32
    25b2:	d01c      	beq.n	25ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    25b4:	6920      	ldr	r0, [r4, #16]
    25b6:	1d40      	adds	r0, r0, #5
    25b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25bc:	e9dd 2100 	ldrd	r2, r1, [sp]
    25c0:	1a89      	subs	r1, r1, r2
    25c2:	4401      	add	r1, r0
    25c4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    25c8:	e9cd 0100 	strd	r0, r1, [sp]
    25cc:	f008 fcfc 	bl	afc8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    25d0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    25d4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    25d8:	4b2c      	ldr	r3, [pc, #176]	; (268c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    25da:	4411      	add	r1, r2
    25dc:	1c4a      	adds	r2, r1, #1
    25de:	1881      	adds	r1, r0, r2
    25e0:	4298      	cmp	r0, r3
    25e2:	d918      	bls.n	2616 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    25e4:	f240 6109 	movw	r1, #1545	; 0x609
    25e8:	2070      	movs	r0, #112	; 0x70
    25ea:	f001 fcdf 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25ee:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    25f2:	f107 0609 	add.w	r6, r7, #9
    25f6:	b120      	cbz	r0, 2602 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    25f8:	f001 fc60 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    25fc:	2800      	cmp	r0, #0
    25fe:	bf08      	it	eq
    2600:	3632      	addeq	r6, #50	; 0x32
    2602:	4823      	ldr	r0, [pc, #140]	; (2690 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2604:	7841      	ldrb	r1, [r0, #1]
    2606:	9807      	ldr	r0, [sp, #28]
    2608:	4281      	cmp	r1, r0
    260a:	bf84      	itt	hi
    260c:	1a08      	subhi	r0, r1, r0
    260e:	4406      	addhi	r6, r0
    2610:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2614:	e7d2      	b.n	25bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2616:	481c      	ldr	r0, [pc, #112]	; (2688 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2618:	4282      	cmp	r2, r0
    261a:	dd04      	ble.n	2626 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    261c:	f240 610a 	movw	r1, #1546	; 0x60a
    2620:	2070      	movs	r0, #112	; 0x70
    2622:	f001 fcc3 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2626:	481b      	ldr	r0, [pc, #108]	; (2694 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2628:	4282      	cmp	r2, r0
    262a:	da04      	bge.n	2636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    262c:	f240 610b 	movw	r1, #1547	; 0x60b
    2630:	2070      	movs	r0, #112	; 0x70
    2632:	f001 fcbb 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2636:	4818      	ldr	r0, [pc, #96]	; (2698 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2638:	4288      	cmp	r0, r1
    263a:	bfdc      	itt	le
    263c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2640:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2644:	dd05      	ble.n	2652 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2646:	2900      	cmp	r1, #0
    2648:	bfbc      	itt	lt
    264a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    264e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2652:	980c      	ldr	r0, [sp, #48]	; 0x30
    2654:	60c1      	str	r1, [r0, #12]
    2656:	2001      	movs	r0, #1
    2658:	900b      	str	r0, [sp, #44]	; 0x2c
    265a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    265e:	f88d 0010 	strb.w	r0, [sp, #16]
    2662:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2666:	2800      	cmp	r0, #0
    2668:	f47f aee2 	bne.w	2430 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    266c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    266e:	b00d      	add	sp, #52	; 0x34
    2670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2674:	e000ed04 	.word	0xe000ed04
    2678:	003fffff 	.word	0x003fffff
    267c:	00000000 	.word	0x00000000
    2680:	20000b64 	.word	0x20000b64
    2684:	20000ae4 	.word	0x20000ae4
    2688:	07a12000 	.word	0x07a12000
    268c:	1e847fff 	.word	0x1e847fff
    2690:	20000012 	.word	0x20000012
    2694:	f85ee000 	.word	0xf85ee000
    2698:	1e848000 	.word	0x1e848000

0000269c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    269c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26a0:	4d88      	ldr	r5, [pc, #544]	; (28c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    26a2:	b08c      	sub	sp, #48	; 0x30
    26a4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    26a8:	2000      	movs	r0, #0
    26aa:	9009      	str	r0, [sp, #36]	; 0x24
    26ac:	2001      	movs	r0, #1
    26ae:	4c86      	ldr	r4, [pc, #536]	; (28c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    26b0:	f04f 0900 	mov.w	r9, #0
    26b4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    26b8:	4680      	mov	r8, r0
    26ba:	9008      	str	r0, [sp, #32]
    26bc:	b124      	cbz	r4, 26c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    26be:	2100      	movs	r1, #0
    26c0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    26c4:	f3af 8000 	nop.w
    26c8:	9808      	ldr	r0, [sp, #32]
    26ca:	2800      	cmp	r0, #0
    26cc:	d037      	beq.n	273e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    26ce:	bf00      	nop
    26d0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    26d4:	b124      	cbz	r4, 26e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    26d6:	2100      	movs	r1, #0
    26d8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    26dc:	f3af 8000 	nop.w
    26e0:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    26e4:	2240      	movs	r2, #64	; 0x40
    26e6:	ea28 060a 	bic.w	r6, r8, sl
    26ea:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    26ee:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    26f2:	4683      	mov	fp, r0
    26f4:	f008 fdd6 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26f8:	b124      	cbz	r4, 2704 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    26fa:	2100      	movs	r1, #0
    26fc:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2700:	f3af 8000 	nop.w
    2704:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2708:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    270c:	9000      	str	r0, [sp, #0]
    270e:	6a09      	ldr	r1, [r1, #32]
    2710:	6201      	str	r1, [r0, #32]
    2712:	b124      	cbz	r4, 271e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2714:	2100      	movs	r1, #0
    2716:	f240 50d1 	movw	r0, #1489	; 0x5d1
    271a:	f3af 8000 	nop.w
    271e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2722:	f88d 0008 	strb.w	r0, [sp, #8]
    2726:	f89d 0008 	ldrb.w	r0, [sp, #8]
    272a:	b178      	cbz	r0, 274c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    272c:	2c00      	cmp	r4, #0
    272e:	bf1c      	itt	ne
    2730:	2100      	movne	r1, #0
    2732:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2736:	d0c1      	beq.n	26bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2738:	f3af 8000 	nop.w
    273c:	e7be      	b.n	26bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    273e:	4863      	ldr	r0, [pc, #396]	; (28cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2740:	2800      	cmp	r0, #0
    2742:	bf18      	it	ne
    2744:	f3af 8000 	nopne.w
    2748:	b662      	cpsie	i
    274a:	e7c1      	b.n	26d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    274c:	b124      	cbz	r4, 2758 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    274e:	2100      	movs	r1, #0
    2750:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2754:	f3af 8000 	nop.w
    2758:	980c      	ldr	r0, [sp, #48]	; 0x30
    275a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    275e:	2803      	cmp	r0, #3
    2760:	d172      	bne.n	2848 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2762:	f8dd a000 	ldr.w	sl, [sp]
    2766:	f8cd a018 	str.w	sl, [sp, #24]
    276a:	990c      	ldr	r1, [sp, #48]	; 0x30
    276c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2770:	4288      	cmp	r0, r1
    2772:	bf14      	ite	ne
    2774:	f04f 0b00 	movne.w	fp, #0
    2778:	f04f 0b01 	moveq.w	fp, #1
    277c:	f10a 0c20 	add.w	ip, sl, #32
    2780:	4686      	mov	lr, r0
    2782:	2220      	movs	r2, #32
    2784:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2788:	e003      	b.n	2792 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    278a:	4602      	mov	r2, r0
    278c:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2790:	7840      	ldrb	r0, [r0, #1]
    2792:	4288      	cmp	r0, r1
    2794:	d002      	beq.n	279c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2796:	2820      	cmp	r0, #32
    2798:	d00a      	beq.n	27b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    279a:	e7f6      	b.n	278a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    279c:	2820      	cmp	r0, #32
    279e:	d007      	beq.n	27b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    27a0:	4586      	cmp	lr, r0
    27a2:	d107      	bne.n	27b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    27a4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    27a8:	7840      	ldrb	r0, [r0, #1]
    27aa:	f88c 0000 	strb.w	r0, [ip]
    27ae:	e007      	b.n	27c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    27b0:	4648      	mov	r0, r9
    27b2:	e00c      	b.n	27ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    27b4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    27b8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    27bc:	7840      	ldrb	r0, [r0, #1]
    27be:	7048      	strb	r0, [r1, #1]
    27c0:	b124      	cbz	r4, 27cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    27c2:	2100      	movs	r1, #0
    27c4:	f240 5037 	movw	r0, #1335	; 0x537
    27c8:	f3af 8000 	nop.w
    27cc:	4640      	mov	r0, r8
    27ce:	ea10 0f0b 	tst.w	r0, fp
    27d2:	bf18      	it	ne
    27d4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    27d8:	2800      	cmp	r0, #0
    27da:	d052      	beq.n	2882 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    27dc:	b124      	cbz	r4, 27e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    27de:	2100      	movs	r1, #0
    27e0:	f240 70fd 	movw	r0, #2045	; 0x7fd
    27e4:	f3af 8000 	nop.w
    27e8:	4632      	mov	r2, r6
    27ea:	2001      	movs	r0, #1
    27ec:	990c      	ldr	r1, [sp, #48]	; 0x30
    27ee:	f7ff f88d 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    27f2:	9806      	ldr	r0, [sp, #24]
    27f4:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    27f8:	f88d 0008 	strb.w	r0, [sp, #8]
    27fc:	f89d a008 	ldrb.w	sl, [sp, #8]
    2800:	b124      	cbz	r4, 280c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2802:	2100      	movs	r1, #0
    2804:	f640 0008 	movw	r0, #2056	; 0x808
    2808:	f3af 8000 	nop.w
    280c:	4830      	ldr	r0, [pc, #192]	; (28d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    280e:	2800      	cmp	r0, #0
    2810:	bf18      	it	ne
    2812:	f3af 8000 	nopne.w
    2816:	f3ef 8010 	mrs	r0, PRIMASK
    281a:	b672      	cpsid	i
    281c:	9008      	str	r0, [sp, #32]
    281e:	b124      	cbz	r4, 282a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2820:	2100      	movs	r1, #0
    2822:	f640 000d 	movw	r0, #2061	; 0x80d
    2826:	f3af 8000 	nop.w
    282a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    282e:	f88d 0008 	strb.w	r0, [sp, #8]
    2832:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2836:	b140      	cbz	r0, 284a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2838:	2c00      	cmp	r4, #0
    283a:	bf1c      	itt	ne
    283c:	2100      	movne	r1, #0
    283e:	f640 0011 	movwne	r0, #2065	; 0x811
    2842:	f43f af3b 	beq.w	26bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2846:	e777      	b.n	2738 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2848:	e01b      	b.n	2882 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    284a:	f1ba 0f00 	cmp.w	sl, #0
    284e:	d008      	beq.n	2862 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2850:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2854:	2820      	cmp	r0, #32
    2856:	d104      	bne.n	2862 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2858:	4631      	mov	r1, r6
    285a:	2002      	movs	r0, #2
    285c:	f7ff f886 	bl	196c <CONFIG_FPROTECT_BLOCK_SIZE+0x96c>
    2860:	b308      	cbz	r0, 28a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2862:	b124      	cbz	r4, 286e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2864:	2100      	movs	r1, #0
    2866:	f640 0025 	movw	r0, #2085	; 0x825
    286a:	f3af 8000 	nop.w
    286e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2872:	ea28 0000 	bic.w	r0, r8, r0
    2876:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    287a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    287e:	2001      	movs	r0, #1
    2880:	9009      	str	r0, [sp, #36]	; 0x24
    2882:	b124      	cbz	r4, 288e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2884:	2100      	movs	r1, #0
    2886:	f640 002e 	movw	r0, #2094	; 0x82e
    288a:	f3af 8000 	nop.w
    288e:	9808      	ldr	r0, [sp, #32]
    2890:	b188      	cbz	r0, 28b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    2892:	b124      	cbz	r4, 289e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2894:	2100      	movs	r1, #0
    2896:	f640 0032 	movw	r0, #2098	; 0x832
    289a:	f3af 8000 	nop.w
    289e:	9809      	ldr	r0, [sp, #36]	; 0x24
    28a0:	b00d      	add	sp, #52	; 0x34
    28a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28a6:	2c00      	cmp	r4, #0
    28a8:	d0f1      	beq.n	288e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    28aa:	2100      	movs	r1, #0
    28ac:	f44f 6002 	mov.w	r0, #2080	; 0x820
    28b0:	f3af 8000 	nop.w
    28b4:	e7e6      	b.n	2884 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    28b6:	4805      	ldr	r0, [pc, #20]	; (28cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    28b8:	2800      	cmp	r0, #0
    28ba:	bf18      	it	ne
    28bc:	f3af 8000 	nopne.w
    28c0:	b662      	cpsie	i
    28c2:	e7e6      	b.n	2892 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    28c4:	20000b64 	.word	0x20000b64
	...

000028d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    28d4:	b510      	push	{r4, lr}
    28d6:	2820      	cmp	r0, #32
    28d8:	d211      	bcs.n	28fe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    28da:	490e      	ldr	r1, [pc, #56]	; (2914 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    28dc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    28e0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    28e4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    28e8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    28ec:	b13b      	cbz	r3, 28fe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    28ee:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    28f2:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    28f6:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    28fa:	2a01      	cmp	r2, #1
    28fc:	d001      	beq.n	2902 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    28fe:	2000      	movs	r0, #0
    2900:	bd10      	pop	{r4, pc}
    2902:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2906:	4601      	mov	r1, r0
    2908:	2000      	movs	r0, #0
    290a:	f7fe ffff 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    290e:	2001      	movs	r0, #1
    2910:	bd10      	pop	{r4, pc}
    2912:	0000      	.short	0x0000
    2914:	20000b64 	.word	0x20000b64

00002918 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    291c:	4e80      	ldr	r6, [pc, #512]	; (2b20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    291e:	4680      	mov	r8, r0
    2920:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2924:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2928:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    292c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2930:	2800      	cmp	r0, #0
    2932:	d068      	beq.n	2a06 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2934:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2938:	4d7a      	ldr	r5, [pc, #488]	; (2b24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    293a:	b125      	cbz	r5, 2946 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    293c:	2100      	movs	r1, #0
    293e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2942:	f3af 8000 	nop.w
    2946:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    294a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    294e:	2801      	cmp	r0, #1
    2950:	d018      	beq.n	2984 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2952:	b2c0      	uxtb	r0, r0
    2954:	2804      	cmp	r0, #4
    2956:	bf1c      	itt	ne
    2958:	2805      	cmpne	r0, #5
    295a:	2806      	cmpne	r0, #6
    295c:	d058      	beq.n	2a10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    295e:	b12d      	cbz	r5, 296c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2960:	f04f 0100 	mov.w	r1, #0
    2964:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2968:	f3af 8000 	nop.w
    296c:	f001 fc44 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2970:	b125      	cbz	r5, 297c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2972:	2100      	movs	r1, #0
    2974:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2978:	f3af 8000 	nop.w
    297c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2980:	2801      	cmp	r0, #1
    2982:	d1e6      	bne.n	2952 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2984:	2401      	movs	r4, #1
    2986:	b125      	cbz	r5, 2992 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2988:	2100      	movs	r1, #0
    298a:	f640 30d8 	movw	r0, #3032	; 0xbd8
    298e:	f3af 8000 	nop.w
    2992:	2c00      	cmp	r4, #0
    2994:	d042      	beq.n	2a1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2996:	2000      	movs	r0, #0
    2998:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    299c:	b125      	cbz	r5, 29a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    299e:	2100      	movs	r1, #0
    29a0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    29a4:	f3af 8000 	nop.w
    29a8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    29ac:	2001      	movs	r0, #1
    29ae:	ea20 090b 	bic.w	r9, r0, fp
    29b2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    29b6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    29ba:	2240      	movs	r2, #64	; 0x40
    29bc:	f008 fc72 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    29c0:	b125      	cbz	r5, 29cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    29c2:	2100      	movs	r1, #0
    29c4:	f240 50cd 	movw	r0, #1485	; 0x5cd
    29c8:	f3af 8000 	nop.w
    29cc:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    29d0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    29d4:	6a00      	ldr	r0, [r0, #32]
    29d6:	f8ca 0020 	str.w	r0, [sl, #32]
    29da:	b125      	cbz	r5, 29e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    29dc:	2100      	movs	r1, #0
    29de:	f240 50d1 	movw	r0, #1489	; 0x5d1
    29e2:	f3af 8000 	nop.w
    29e6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    29ea:	f88d 0000 	strb.w	r0, [sp]
    29ee:	f89d 0000 	ldrb.w	r0, [sp]
    29f2:	b1d0      	cbz	r0, 2a2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    29f4:	2d00      	cmp	r5, #0
    29f6:	bf1c      	itt	ne
    29f8:	2100      	movne	r1, #0
    29fa:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    29fe:	d0c2      	beq.n	2986 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2a00:	f3af 8000 	nop.w
    2a04:	e7bf      	b.n	2986 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2a06:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2a0a:	2070      	movs	r0, #112	; 0x70
    2a0c:	f001 face 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a10:	464a      	mov	r2, r9
    2a12:	4641      	mov	r1, r8
    2a14:	2001      	movs	r0, #1
    2a16:	f7fe ff79 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    2a1a:	e7a9      	b.n	2970 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2a1c:	4842      	ldr	r0, [pc, #264]	; (2b28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2a1e:	2800      	cmp	r0, #0
    2a20:	bf18      	it	ne
    2a22:	f3af 8000 	nopne.w
    2a26:	b662      	cpsie	i
    2a28:	e7b5      	b.n	2996 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2a2a:	b125      	cbz	r5, 2a36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2a2c:	2100      	movs	r1, #0
    2a2e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2a32:	f3af 8000 	nop.w
    2a36:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    2a3a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2a3e:	4614      	mov	r4, r2
    2a40:	f04f 0b20 	mov.w	fp, #32
    2a44:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2a48:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2a4c:	e003      	b.n	2a56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2a4e:	46a3      	mov	fp, r4
    2a50:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2a54:	785c      	ldrb	r4, [r3, #1]
    2a56:	4544      	cmp	r4, r8
    2a58:	d002      	beq.n	2a60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    2a5a:	2c20      	cmp	r4, #32
    2a5c:	d02b      	beq.n	2ab6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2a5e:	e7f6      	b.n	2a4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2a60:	2c20      	cmp	r4, #32
    2a62:	d028      	beq.n	2ab6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2a64:	42a2      	cmp	r2, r4
    2a66:	d104      	bne.n	2a72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2a68:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2a6c:	7840      	ldrb	r0, [r0, #1]
    2a6e:	7008      	strb	r0, [r1, #0]
    2a70:	e005      	b.n	2a7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2a72:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2a76:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    2a7a:	7849      	ldrb	r1, [r1, #1]
    2a7c:	7041      	strb	r1, [r0, #1]
    2a7e:	f1ba 0f00 	cmp.w	sl, #0
    2a82:	d011      	beq.n	2aa8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2a84:	b125      	cbz	r5, 2a90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2a86:	2100      	movs	r1, #0
    2a88:	f240 502f 	movw	r0, #1327	; 0x52f
    2a8c:	f3af 8000 	nop.w
    2a90:	f89a 0000 	ldrb.w	r0, [sl]
    2a94:	42a0      	cmp	r0, r4
    2a96:	d107      	bne.n	2aa8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2a98:	b125      	cbz	r5, 2aa4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    2a9a:	2100      	movs	r1, #0
    2a9c:	f240 5032 	movw	r0, #1330	; 0x532
    2aa0:	f3af 8000 	nop.w
    2aa4:	f88a b000 	strb.w	fp, [sl]
    2aa8:	b15d      	cbz	r5, 2ac2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2aaa:	2100      	movs	r1, #0
    2aac:	f240 5037 	movw	r0, #1335	; 0x537
    2ab0:	f3af 8000 	nop.w
    2ab4:	e000      	b.n	2ab8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    2ab6:	b125      	cbz	r5, 2ac2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2ab8:	2100      	movs	r1, #0
    2aba:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2abe:	f3af 8000 	nop.w
    2ac2:	481a      	ldr	r0, [pc, #104]	; (2b2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2ac4:	2800      	cmp	r0, #0
    2ac6:	bf18      	it	ne
    2ac8:	f3af 8000 	nopne.w
    2acc:	f3ef 8410 	mrs	r4, PRIMASK
    2ad0:	b672      	cpsid	i
    2ad2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2ad6:	f88d 0000 	strb.w	r0, [sp]
    2ada:	f89d 0000 	ldrb.w	r0, [sp]
    2ade:	b138      	cbz	r0, 2af0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2ae0:	2d00      	cmp	r5, #0
    2ae2:	bf1c      	itt	ne
    2ae4:	2100      	movne	r1, #0
    2ae6:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    2aea:	f43f af4c 	beq.w	2986 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2aee:	e787      	b.n	2a00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2af0:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2af4:	2001      	movs	r0, #1
    2af6:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2afa:	b154      	cbz	r4, 2b12 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2afc:	2d00      	cmp	r5, #0
    2afe:	bf08      	it	eq
    2b00:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b04:	2100      	movs	r1, #0
    2b06:	f640 30fe 	movw	r0, #3070	; 0xbfe
    2b0a:	f3af 8000 	nop.w
    2b0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b12:	4805      	ldr	r0, [pc, #20]	; (2b28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2b14:	2800      	cmp	r0, #0
    2b16:	bf18      	it	ne
    2b18:	f3af 8000 	nopne.w
    2b1c:	b662      	cpsie	i
    2b1e:	e7ed      	b.n	2afc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2b20:	20000b64 	.word	0x20000b64
	...

00002b30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2b30:	b570      	push	{r4, r5, r6, lr}
    2b32:	460d      	mov	r5, r1
    2b34:	4606      	mov	r6, r0
    2b36:	f001 f9af 	bl	3e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2b3a:	480f      	ldr	r0, [pc, #60]	; (2b78 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2b3c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2b40:	2400      	movs	r4, #0
    2b42:	3880      	subs	r0, #128	; 0x80
    2b44:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2b48:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2b4c:	b129      	cbz	r1, 2b5a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2b4e:	1c61      	adds	r1, r4, #1
    2b50:	b2cc      	uxtb	r4, r1
    2b52:	2c20      	cmp	r4, #32
    2b54:	d3f8      	bcc.n	2b48 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2b56:	2020      	movs	r0, #32
    2b58:	bd70      	pop	{r4, r5, r6, pc}
    2b5a:	4808      	ldr	r0, [pc, #32]	; (2b7c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2b5c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2b60:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2b64:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2b68:	4621      	mov	r1, r4
    2b6a:	6045      	str	r5, [r0, #4]
    2b6c:	2001      	movs	r0, #1
    2b6e:	f7fe fecd 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    2b72:	4620      	mov	r0, r4
    2b74:	bd70      	pop	{r4, r5, r6, pc}
    2b76:	0000      	.short	0x0000
    2b78:	20000b64 	.word	0x20000b64
    2b7c:	200007e4 	.word	0x200007e4

00002b80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b84:	b083      	sub	sp, #12
    2b86:	f000 fb2b 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2b8a:	4605      	mov	r5, r0
    2b8c:	f000 fdf4 	bl	3778 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2b90:	4c67      	ldr	r4, [pc, #412]	; (2d30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2b92:	68a0      	ldr	r0, [r4, #8]
    2b94:	f1b0 3fff 	cmp.w	r0, #4294967295
    2b98:	bf1c      	itt	ne
    2b9a:	f04f 30ff 	movne.w	r0, #4294967295
    2b9e:	60a0      	strne	r0, [r4, #8]
    2ba0:	7fa0      	ldrb	r0, [r4, #30]
    2ba2:	f8df b190 	ldr.w	fp, [pc, #400]	; 2d34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    2ba6:	b9a8      	cbnz	r0, 2bd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2ba8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2bac:	1a08      	subs	r0, r1, r0
    2bae:	0200      	lsls	r0, r0, #8
    2bb0:	17c1      	asrs	r1, r0, #31
    2bb2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2bb6:	1200      	asrs	r0, r0, #8
    2bb8:	f44f 710c 	mov.w	r1, #560	; 0x230
    2bbc:	f008 fa31 	bl	b022 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2bc0:	6921      	ldr	r1, [r4, #16]
    2bc2:	4408      	add	r0, r1
    2bc4:	1a28      	subs	r0, r5, r0
    2bc6:	0200      	lsls	r0, r0, #8
    2bc8:	17c1      	asrs	r1, r0, #31
    2bca:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2bce:	1200      	asrs	r0, r0, #8
    2bd0:	0fc0      	lsrs	r0, r0, #31
    2bd2:	d013      	beq.n	2bfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2bd4:	7e60      	ldrb	r0, [r4, #25]
    2bd6:	b328      	cbz	r0, 2c24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2bd8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2bdc:	f88d 0000 	strb.w	r0, [sp]
    2be0:	f89d 0000 	ldrb.w	r0, [sp]
    2be4:	b1f0      	cbz	r0, 2c24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2be6:	f000 fc09 	bl	33fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2bea:	bf00      	nop
    2bec:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2bf0:	b1f0      	cbz	r0, 2c30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2bf2:	f240 4147 	movw	r1, #1095	; 0x447
    2bf6:	2070      	movs	r0, #112	; 0x70
    2bf8:	f001 f9d8 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bfc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2c00:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2c04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2c08:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2c0c:	6840      	ldr	r0, [r0, #4]
    2c0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2c12:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2c16:	2108      	movs	r1, #8
    2c18:	4790      	blx	r2
    2c1a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    2c1e:	2070      	movs	r0, #112	; 0x70
    2c20:	f001 f9c4 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c24:	1ce8      	adds	r0, r5, #3
    2c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c2a:	f000 fadf 	bl	31ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c2e:	e7dd      	b.n	2bec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2c30:	f04f 0a01 	mov.w	sl, #1
    2c34:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2c38:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2c3c:	2820      	cmp	r0, #32
    2c3e:	d024      	beq.n	2c8a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2c40:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2c44:	2020      	movs	r0, #32
    2c46:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2c4a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2c4e:	2600      	movs	r6, #0
    2c50:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2c54:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2c58:	4837      	ldr	r0, [pc, #220]	; (2d38 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    2c5a:	6026      	str	r6, [r4, #0]
    2c5c:	7800      	ldrb	r0, [r0, #0]
    2c5e:	2802      	cmp	r0, #2
    2c60:	bf16      	itet	ne
    2c62:	2803      	cmpne	r0, #3
    2c64:	2001      	moveq	r0, #1
    2c66:	2000      	movne	r0, #0
    2c68:	7720      	strb	r0, [r4, #28]
    2c6a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2c6e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2c72:	f899 0020 	ldrb.w	r0, [r9, #32]
    2c76:	2820      	cmp	r0, #32
    2c78:	d031      	beq.n	2cde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2c7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2c7e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2c82:	7d81      	ldrb	r1, [r0, #22]
    2c84:	2901      	cmp	r1, #1
    2c86:	d005      	beq.n	2c94 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2c88:	e029      	b.n	2cde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2c8a:	f240 414a 	movw	r1, #1098	; 0x44a
    2c8e:	2070      	movs	r0, #112	; 0x70
    2c90:	f001 f98c 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c94:	46ab      	mov	fp, r5
    2c96:	f100 0508 	add.w	r5, r0, #8
    2c9a:	8a40      	ldrh	r0, [r0, #18]
    2c9c:	aa01      	add	r2, sp, #4
    2c9e:	4669      	mov	r1, sp
    2ca0:	f000 f940 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2ca4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ca8:	2820      	cmp	r0, #32
    2caa:	d004      	beq.n	2cb6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2cac:	6920      	ldr	r0, [r4, #16]
    2cae:	1d40      	adds	r0, r0, #5
    2cb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cb4:	e00b      	b.n	2cce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2cb6:	8968      	ldrh	r0, [r5, #10]
    2cb8:	f10b 0b09 	add.w	fp, fp, #9
    2cbc:	b128      	cbz	r0, 2cca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    2cbe:	f001 f8fd 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2cc2:	2800      	cmp	r0, #0
    2cc4:	bf08      	it	eq
    2cc6:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    2cca:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2cce:	e9d5 2100 	ldrd	r2, r1, [r5]
    2cd2:	1a89      	subs	r1, r1, r2
    2cd4:	6028      	str	r0, [r5, #0]
    2cd6:	4408      	add	r0, r1
    2cd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cdc:	6068      	str	r0, [r5, #4]
    2cde:	4639      	mov	r1, r7
    2ce0:	2001      	movs	r0, #1
    2ce2:	f7fe fe43 	bl	196c <CONFIG_FPROTECT_BLOCK_SIZE+0x96c>
    2ce6:	2800      	cmp	r0, #0
    2ce8:	d0f9      	beq.n	2cde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2cea:	4814      	ldr	r0, [pc, #80]	; (2d3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2cec:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2cf0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2cf4:	2802      	cmp	r0, #2
    2cf6:	d104      	bne.n	2d02 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2cf8:	463a      	mov	r2, r7
    2cfa:	4641      	mov	r1, r8
    2cfc:	2006      	movs	r0, #6
    2cfe:	f7fe fe05 	bl	190c <CONFIG_FPROTECT_BLOCK_SIZE+0x90c>
    2d02:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2d06:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2d0a:	2820      	cmp	r0, #32
    2d0c:	d003      	beq.n	2d16 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    2d0e:	480c      	ldr	r0, [pc, #48]	; (2d40 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2d10:	7840      	ldrb	r0, [r0, #1]
    2d12:	f001 fa1b 	bl	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2d16:	7f20      	ldrb	r0, [r4, #28]
    2d18:	2800      	cmp	r0, #0
    2d1a:	bf04      	itt	eq
    2d1c:	b003      	addeq	sp, #12
    2d1e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d22:	f000 fd73 	bl	380c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2d26:	7726      	strb	r6, [r4, #28]
    2d28:	7766      	strb	r6, [r4, #29]
    2d2a:	b003      	add	sp, #12
    2d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d30:	20000b64 	.word	0x20000b64
    2d34:	200007e4 	.word	0x200007e4
    2d38:	20000012 	.word	0x20000012
    2d3c:	20000ae4 	.word	0x20000ae4
    2d40:	20000010 	.word	0x20000010

00002d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2d44:	b510      	push	{r4, lr}
    2d46:	4c32      	ldr	r4, [pc, #200]	; (2e10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2d48:	b082      	sub	sp, #8
    2d4a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2d4e:	2920      	cmp	r1, #32
    2d50:	d008      	beq.n	2d64 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2d52:	68a1      	ldr	r1, [r4, #8]
    2d54:	f1b1 3fff 	cmp.w	r1, #4294967295
    2d58:	d009      	beq.n	2d6e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2d5a:	f640 21e9 	movw	r1, #2793	; 0xae9
    2d5e:	2070      	movs	r0, #112	; 0x70
    2d60:	f001 f924 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d64:	f640 21e8 	movw	r1, #2792	; 0xae8
    2d68:	2070      	movs	r0, #112	; 0x70
    2d6a:	f001 f91f 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d6e:	6862      	ldr	r2, [r4, #4]
    2d70:	4601      	mov	r1, r0
    2d72:	4b28      	ldr	r3, [pc, #160]	; (2e14 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2d74:	1850      	adds	r0, r2, r1
    2d76:	429a      	cmp	r2, r3
    2d78:	d904      	bls.n	2d84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    2d7a:	f240 6109 	movw	r1, #1545	; 0x609
    2d7e:	2070      	movs	r0, #112	; 0x70
    2d80:	f001 f914 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d84:	4a24      	ldr	r2, [pc, #144]	; (2e18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2d86:	4291      	cmp	r1, r2
    2d88:	dd04      	ble.n	2d94 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    2d8a:	f240 610a 	movw	r1, #1546	; 0x60a
    2d8e:	2070      	movs	r0, #112	; 0x70
    2d90:	f001 f90c 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d94:	4a21      	ldr	r2, [pc, #132]	; (2e1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    2d96:	4291      	cmp	r1, r2
    2d98:	da04      	bge.n	2da4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    2d9a:	f240 610b 	movw	r1, #1547	; 0x60b
    2d9e:	2070      	movs	r0, #112	; 0x70
    2da0:	f001 f904 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2da4:	491e      	ldr	r1, [pc, #120]	; (2e20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    2da6:	4281      	cmp	r1, r0
    2da8:	bfdc      	itt	le
    2daa:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2dae:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2db2:	dd05      	ble.n	2dc0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2db4:	2800      	cmp	r0, #0
    2db6:	bfbc      	itt	lt
    2db8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2dbc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2dc0:	aa01      	add	r2, sp, #4
    2dc2:	4669      	mov	r1, sp
    2dc4:	f000 f8ae 	bl	2f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2dc8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2dcc:	280f      	cmp	r0, #15
    2dce:	bf8c      	ite	hi
    2dd0:	2001      	movhi	r0, #1
    2dd2:	2000      	movls	r0, #0
    2dd4:	9900      	ldr	r1, [sp, #0]
    2dd6:	4408      	add	r0, r1
    2dd8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2ddc:	60a1      	str	r1, [r4, #8]
    2dde:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2de2:	f88d 0000 	strb.w	r0, [sp]
    2de6:	f89d 0000 	ldrb.w	r0, [sp]
    2dea:	2800      	cmp	r0, #0
    2dec:	bf04      	itt	eq
    2dee:	b002      	addeq	sp, #8
    2df0:	bd10      	popeq	{r4, pc}
    2df2:	2301      	movs	r3, #1
    2df4:	2203      	movs	r2, #3
    2df6:	2005      	movs	r0, #5
    2df8:	f000 fb7c 	bl	34f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2dfc:	2800      	cmp	r0, #0
    2dfe:	bf1c      	itt	ne
    2e00:	b002      	addne	sp, #8
    2e02:	bd10      	popne	{r4, pc}
    2e04:	f640 21f1 	movw	r1, #2801	; 0xaf1
    2e08:	2070      	movs	r0, #112	; 0x70
    2e0a:	f001 f8cf 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e0e:	0000      	.short	0x0000
    2e10:	20000b64 	.word	0x20000b64
    2e14:	1e847fff 	.word	0x1e847fff
    2e18:	07a12000 	.word	0x07a12000
    2e1c:	f85ee000 	.word	0xf85ee000
    2e20:	1e848000 	.word	0x1e848000

00002e24 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2e24:	b570      	push	{r4, r5, r6, lr}
    2e26:	4c1e      	ldr	r4, [pc, #120]	; (2ea0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2e28:	2120      	movs	r1, #32
    2e2a:	f884 1020 	strb.w	r1, [r4, #32]
    2e2e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2e32:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2e36:	2000      	movs	r0, #0
    2e38:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2e3c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2e40:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2e44:	1e42      	subs	r2, r0, #1
    2e46:	60a2      	str	r2, [r4, #8]
    2e48:	6020      	str	r0, [r4, #0]
    2e4a:	77a0      	strb	r0, [r4, #30]
    2e4c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2e50:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2e54:	7720      	strb	r0, [r4, #28]
    2e56:	7760      	strb	r0, [r4, #29]
    2e58:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2e5c:	4911      	ldr	r1, [pc, #68]	; (2ea4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2e5e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2e62:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2e66:	7008      	strb	r0, [r1, #0]
    2e68:	7048      	strb	r0, [r1, #1]
    2e6a:	8048      	strh	r0, [r1, #2]
    2e6c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2e70:	2210      	movs	r2, #16
    2e72:	7088      	strb	r0, [r1, #2]
    2e74:	f801 0f04 	strb.w	r0, [r1, #4]!
    2e78:	1e52      	subs	r2, r2, #1
    2e7a:	d1fa      	bne.n	2e72 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2e7c:	4d0a      	ldr	r5, [pc, #40]	; (2ea8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2e7e:	2601      	movs	r6, #1
    2e80:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2e84:	20ff      	movs	r0, #255	; 0xff
    2e86:	7028      	strb	r0, [r5, #0]
    2e88:	4808      	ldr	r0, [pc, #32]	; (2eac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2e8a:	f001 f941 	bl	4110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2e8e:	7068      	strb	r0, [r5, #1]
    2e90:	f001 f99c 	bl	41cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2e94:	60a8      	str	r0, [r5, #8]
    2e96:	f000 fce7 	bl	3868 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2e9a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2e9e:	bd70      	pop	{r4, r5, r6, pc}
    2ea0:	20000b64 	.word	0x20000b64
    2ea4:	20000012 	.word	0x20000012
    2ea8:	20000010 	.word	0x20000010
    2eac:	000017c9 	.word	0x000017c9

00002eb0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2eb0:	b570      	push	{r4, r5, r6, lr}
    2eb2:	4605      	mov	r5, r0
    2eb4:	2001      	movs	r0, #1
    2eb6:	fa00 f405 	lsl.w	r4, r0, r5
    2eba:	460e      	mov	r6, r1
    2ebc:	2a00      	cmp	r2, #0
    2ebe:	bf08      	it	eq
    2ec0:	4808      	ldreq	r0, [pc, #32]	; (2ee4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2ec2:	d00c      	beq.n	2ede <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2ec4:	2000      	movs	r0, #0
    2ec6:	f000 fcb5 	bl	3834 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2eca:	00e9      	lsls	r1, r5, #3
    2ecc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2ed0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2ed4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2ed8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2edc:	4802      	ldr	r0, [pc, #8]	; (2ee8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2ede:	6004      	str	r4, [r0, #0]
    2ee0:	bd70      	pop	{r4, r5, r6, pc}
    2ee2:	0000      	.short	0x0000
    2ee4:	4001f508 	.word	0x4001f508
    2ee8:	4001f504 	.word	0x4001f504

00002eec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2eec:	0b41      	lsrs	r1, r0, #13
    2eee:	f248 6237 	movw	r2, #34359	; 0x8637
    2ef2:	4351      	muls	r1, r2
    2ef4:	0c0a      	lsrs	r2, r1, #16
    2ef6:	4b09      	ldr	r3, [pc, #36]	; (2f1c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2ef8:	0251      	lsls	r1, r2, #9
    2efa:	fb02 0203 	mla	r2, r2, r3, r0
    2efe:	4808      	ldr	r0, [pc, #32]	; (2f20 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2f00:	4350      	muls	r0, r2
    2f02:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2f06:	306e      	adds	r0, #110	; 0x6e
    2f08:	0d40      	lsrs	r0, r0, #21
    2f0a:	425b      	negs	r3, r3
    2f0c:	fb10 f303 	smulbb	r3, r0, r3
    2f10:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2f14:	bf88      	it	hi
    2f16:	1c49      	addhi	r1, r1, #1
    2f18:	4408      	add	r0, r1
    2f1a:	4770      	bx	lr
    2f1c:	ffffc2f7 	.word	0xffffc2f7
    2f20:	00010c6f 	.word	0x00010c6f

00002f24 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2f24:	0b43      	lsrs	r3, r0, #13
    2f26:	f248 6c37 	movw	ip, #34359	; 0x8637
    2f2a:	fb03 f30c 	mul.w	r3, r3, ip
    2f2e:	b430      	push	{r4, r5}
    2f30:	0c1b      	lsrs	r3, r3, #16
    2f32:	f8df c044 	ldr.w	ip, [pc, #68]	; 2f78 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2f36:	025c      	lsls	r4, r3, #9
    2f38:	fb03 030c 	mla	r3, r3, ip, r0
    2f3c:	480f      	ldr	r0, [pc, #60]	; (2f7c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2f3e:	4358      	muls	r0, r3
    2f40:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2f44:	eb04 000c 	add.w	r0, r4, ip
    2f48:	f643 5409 	movw	r4, #15625	; 0x3d09
    2f4c:	fb1c f404 	smulbb	r4, ip, r4
    2f50:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2f54:	f643 5508 	movw	r5, #15624	; 0x3d08
    2f58:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2f5c:	442c      	add	r4, r5
    2f5e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2f62:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2f66:	bf84      	itt	hi
    2f68:	f04f 0c00 	movhi.w	ip, #0
    2f6c:	1c40      	addhi	r0, r0, #1
    2f6e:	6008      	str	r0, [r1, #0]
    2f70:	f882 c000 	strb.w	ip, [r2]
    2f74:	bc30      	pop	{r4, r5}
    2f76:	4770      	bx	lr
    2f78:	ffffc2f7 	.word	0xffffc2f7
    2f7c:	00010c6f 	.word	0x00010c6f

00002f80 <MPSL_IRQ_RTC0_Handler>:
    2f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f84:	4c36      	ldr	r4, [pc, #216]	; (3060 <MPSL_IRQ_RTC0_Handler+0xe0>)
    2f86:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f8a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2f8e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2f92:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2f96:	f04f 0500 	mov.w	r5, #0
    2f9a:	d019      	beq.n	2fd0 <MPSL_IRQ_RTC0_Handler+0x50>
    2f9c:	4831      	ldr	r0, [pc, #196]	; (3064 <MPSL_IRQ_RTC0_Handler+0xe4>)
    2f9e:	6800      	ldr	r0, [r0, #0]
    2fa0:	b1b0      	cbz	r0, 2fd0 <MPSL_IRQ_RTC0_Handler+0x50>
    2fa2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2fa6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2faa:	482f      	ldr	r0, [pc, #188]	; (3068 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2fac:	6800      	ldr	r0, [r0, #0]
    2fae:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2fb2:	1a40      	subs	r0, r0, r1
    2fb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fb8:	2802      	cmp	r0, #2
    2fba:	d302      	bcc.n	2fc2 <MPSL_IRQ_RTC0_Handler+0x42>
    2fbc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2fc0:	d306      	bcc.n	2fd0 <MPSL_IRQ_RTC0_Handler+0x50>
    2fc2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2fc6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2fca:	2004      	movs	r0, #4
    2fcc:	f7fe ff50 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2fd0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2fd4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2fd8:	d019      	beq.n	300e <MPSL_IRQ_RTC0_Handler+0x8e>
    2fda:	4824      	ldr	r0, [pc, #144]	; (306c <MPSL_IRQ_RTC0_Handler+0xec>)
    2fdc:	6800      	ldr	r0, [r0, #0]
    2fde:	b1b0      	cbz	r0, 300e <MPSL_IRQ_RTC0_Handler+0x8e>
    2fe0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2fe4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2fe8:	4821      	ldr	r0, [pc, #132]	; (3070 <MPSL_IRQ_RTC0_Handler+0xf0>)
    2fea:	6800      	ldr	r0, [r0, #0]
    2fec:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2ff0:	1a40      	subs	r0, r0, r1
    2ff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ff6:	2802      	cmp	r0, #2
    2ff8:	d302      	bcc.n	3000 <MPSL_IRQ_RTC0_Handler+0x80>
    2ffa:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2ffe:	d306      	bcc.n	300e <MPSL_IRQ_RTC0_Handler+0x8e>
    3000:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3004:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3008:	2005      	movs	r0, #5
    300a:	f7fe ff31 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    300e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3012:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3016:	bf08      	it	eq
    3018:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    301c:	4815      	ldr	r0, [pc, #84]	; (3074 <MPSL_IRQ_RTC0_Handler+0xf4>)
    301e:	6800      	ldr	r0, [r0, #0]
    3020:	2800      	cmp	r0, #0
    3022:	bf08      	it	eq
    3024:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3028:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    302c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3030:	4811      	ldr	r0, [pc, #68]	; (3078 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3032:	6800      	ldr	r0, [r0, #0]
    3034:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3038:	1a40      	subs	r0, r0, r1
    303a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    303e:	2802      	cmp	r0, #2
    3040:	d304      	bcc.n	304c <MPSL_IRQ_RTC0_Handler+0xcc>
    3042:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3046:	bf38      	it	cc
    3048:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    304c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3050:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3058:	2006      	movs	r0, #6
    305a:	f7fe bf09 	b.w	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    305e:	0000      	.short	0x0000
    3060:	4000b000 	.word	0x4000b000
    3064:	4000b140 	.word	0x4000b140
    3068:	4000b540 	.word	0x4000b540
    306c:	4000b144 	.word	0x4000b144
    3070:	4000b544 	.word	0x4000b544
    3074:	4000b148 	.word	0x4000b148
    3078:	4000b548 	.word	0x4000b548

0000307c <MPSL_IRQ_TIMER0_Handler>:
    307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3080:	4d38      	ldr	r5, [pc, #224]	; (3164 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3082:	7828      	ldrb	r0, [r5, #0]
    3084:	2804      	cmp	r0, #4
    3086:	d068      	beq.n	315a <MPSL_IRQ_TIMER0_Handler+0xde>
    3088:	1ce8      	adds	r0, r5, #3
    308a:	2201      	movs	r2, #1
    308c:	7801      	ldrb	r1, [r0, #0]
    308e:	b159      	cbz	r1, 30a8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    3090:	2901      	cmp	r1, #1
    3092:	bf08      	it	eq
    3094:	706a      	strbeq	r2, [r5, #1]
    3096:	d002      	beq.n	309e <MPSL_IRQ_TIMER0_Handler+0x22>
    3098:	7869      	ldrb	r1, [r5, #1]
    309a:	2900      	cmp	r1, #0
    309c:	d058      	beq.n	3150 <MPSL_IRQ_TIMER0_Handler+0xd4>
    309e:	2102      	movs	r1, #2
    30a0:	7001      	strb	r1, [r0, #0]
    30a2:	7840      	ldrb	r0, [r0, #1]
    30a4:	f000 fafa 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30a8:	4c2f      	ldr	r4, [pc, #188]	; (3168 <MPSL_IRQ_TIMER0_Handler+0xec>)
    30aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30ae:	f04f 0800 	mov.w	r8, #0
    30b2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    30b6:	f44f 7780 	mov.w	r7, #256	; 0x100
    30ba:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    30be:	d00a      	beq.n	30d6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    30c0:	482a      	ldr	r0, [pc, #168]	; (316c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    30c2:	6800      	ldr	r0, [r0, #0]
    30c4:	b138      	cbz	r0, 30d6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    30c6:	2003      	movs	r0, #3
    30c8:	f000 fae8 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30cc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30d0:	2003      	movs	r0, #3
    30d2:	f7fe fecd 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30da:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    30de:	d00a      	beq.n	30f6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    30e0:	4823      	ldr	r0, [pc, #140]	; (3170 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    30e2:	6800      	ldr	r0, [r0, #0]
    30e4:	b138      	cbz	r0, 30f6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    30e6:	2002      	movs	r0, #2
    30e8:	f000 fad8 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    30ec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    30f0:	2002      	movs	r0, #2
    30f2:	f7fe febd 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    30f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    30fa:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    30fe:	d00a      	beq.n	3116 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3100:	481c      	ldr	r0, [pc, #112]	; (3174 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3102:	6800      	ldr	r0, [r0, #0]
    3104:	b138      	cbz	r0, 3116 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3106:	2001      	movs	r0, #1
    3108:	f000 fac8 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    310c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3110:	2001      	movs	r0, #1
    3112:	f7fe fead 	bl	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3116:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    311a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    311e:	bf08      	it	eq
    3120:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3124:	4814      	ldr	r0, [pc, #80]	; (3178 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3126:	6800      	ldr	r0, [r0, #0]
    3128:	2800      	cmp	r0, #0
    312a:	bf08      	it	eq
    312c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3130:	2000      	movs	r0, #0
    3132:	f000 fab3 	bl	369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3136:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    313a:	2004      	movs	r0, #4
    313c:	7028      	strb	r0, [r5, #0]
    313e:	f8c5 8008 	str.w	r8, [r5, #8]
    3142:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    314a:	2000      	movs	r0, #0
    314c:	f7fe be90 	b.w	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3150:	f240 316a 	movw	r1, #874	; 0x36a
    3154:	206c      	movs	r0, #108	; 0x6c
    3156:	f000 ff29 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    315a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    315e:	2007      	movs	r0, #7
    3160:	f7fe be86 	b.w	1e70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3164:	2000001c 	.word	0x2000001c
    3168:	40008000 	.word	0x40008000
    316c:	4000814c 	.word	0x4000814c
    3170:	40008148 	.word	0x40008148
    3174:	40008144 	.word	0x40008144
    3178:	40008140 	.word	0x40008140
    317c:	2201      	movs	r2, #1
    317e:	0211      	lsls	r1, r2, #8
    3180:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3184:	2000      	movs	r0, #0
    3186:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    318a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    318e:	f3bf 8f4f 	dsb	sy
    3192:	f3bf 8f6f 	isb	sy
    3196:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    319a:	490e      	ldr	r1, [pc, #56]	; (31d4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    319c:	f841 2f04 	str.w	r2, [r1, #4]!
    31a0:	1e43      	subs	r3, r0, #1
    31a2:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    31a6:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    31aa:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    31ae:	4b0a      	ldr	r3, [pc, #40]	; (31d8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    31b0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    31b4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    31b8:	1d1b      	adds	r3, r3, #4
    31ba:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    31be:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    31c2:	1d1b      	adds	r3, r3, #4
    31c4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    31c8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    31cc:	60ca      	str	r2, [r1, #12]
    31ce:	4903      	ldr	r1, [pc, #12]	; (31dc <MPSL_IRQ_TIMER0_Handler+0x160>)
    31d0:	7048      	strb	r0, [r1, #1]
    31d2:	4770      	bx	lr
    31d4:	40008000 	.word	0x40008000
    31d8:	40008004 	.word	0x40008004
    31dc:	2000001c 	.word	0x2000001c

000031e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    31e0:	4801      	ldr	r0, [pc, #4]	; (31e8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    31e2:	6800      	ldr	r0, [r0, #0]
    31e4:	4770      	bx	lr
    31e6:	0000      	.short	0x0000
    31e8:	4000b504 	.word	0x4000b504

000031ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    31ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31f0:	4e47      	ldr	r6, [pc, #284]	; (3310 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    31f2:	4605      	mov	r5, r0
    31f4:	1ef7      	subs	r7, r6, #3
    31f6:	7832      	ldrb	r2, [r6, #0]
    31f8:	68f9      	ldr	r1, [r7, #12]
    31fa:	2a01      	cmp	r2, #1
    31fc:	bf04      	itt	eq
    31fe:	42a9      	cmpeq	r1, r5
    3200:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3204:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3208:	4b42      	ldr	r3, [pc, #264]	; (3314 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    320a:	6018      	str	r0, [r3, #0]
    320c:	4842      	ldr	r0, [pc, #264]	; (3318 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    320e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3212:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    3216:	f100 0304 	add.w	r3, r0, #4
    321a:	f04f 0400 	mov.w	r4, #0
    321e:	2a00      	cmp	r2, #0
    3220:	d061      	beq.n	32e6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    3222:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3226:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    322a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    322e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3232:	4b3a      	ldr	r3, [pc, #232]	; (331c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3234:	681b      	ldr	r3, [r3, #0]
    3236:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    323a:	f04f 0801 	mov.w	r8, #1
    323e:	2b00      	cmp	r3, #0
    3240:	bf04      	itt	eq
    3242:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    3246:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    324a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    324e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    3252:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    3256:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    325a:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    325e:	1aeb      	subs	r3, r5, r3
    3260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3264:	2b02      	cmp	r3, #2
    3266:	d34b      	bcc.n	3300 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    3268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    326c:	d248      	bcs.n	3300 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    326e:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    3272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3276:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    327a:	b132      	cbz	r2, 328a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    327c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3280:	1a8a      	subs	r2, r1, r2
    3282:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3286:	2a02      	cmp	r2, #2
    3288:	d3f8      	bcc.n	327c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    328a:	f8c7 8008 	str.w	r8, [r7, #8]
    328e:	703c      	strb	r4, [r7, #0]
    3290:	f7ff ff74 	bl	317c <MPSL_IRQ_TIMER0_Handler+0x100>
    3294:	4822      	ldr	r0, [pc, #136]	; (3320 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3296:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    329a:	f364 0101 	bfi	r1, r4, #0, #2
    329e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    32a2:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    32a6:	2102      	movs	r1, #2
    32a8:	f361 0201 	bfi	r2, r1, #0, #2
    32ac:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    32b0:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    32b4:	2104      	movs	r1, #4
    32b6:	f361 0203 	bfi	r2, r1, #0, #4
    32ba:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    32be:	f8c0 800c 	str.w	r8, [r0, #12]
    32c2:	68b9      	ldr	r1, [r7, #8]
    32c4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    32c8:	1580      	asrs	r0, r0, #22
    32ca:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    32ce:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    32d2:	4914      	ldr	r1, [pc, #80]	; (3324 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    32d4:	05c0      	lsls	r0, r0, #23
    32d6:	6008      	str	r0, [r1, #0]
    32d8:	2004      	movs	r0, #4
    32da:	60fd      	str	r5, [r7, #12]
    32dc:	7070      	strb	r0, [r6, #1]
    32de:	f886 8000 	strb.w	r8, [r6]
    32e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32e6:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    32ea:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    32ee:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    32f2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    32f6:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    32fa:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    32fe:	e798      	b.n	3232 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3300:	2100      	movs	r1, #0
    3302:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3306:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    330a:	206c      	movs	r0, #108	; 0x6c
    330c:	f000 fe4e 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3310:	2000001f 	.word	0x2000001f
    3314:	4001f508 	.word	0x4001f508
    3318:	4000b000 	.word	0x4000b000
    331c:	4000b148 	.word	0x4000b148
    3320:	40008000 	.word	0x40008000
    3324:	4001f504 	.word	0x4001f504

00003328 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	4c2c      	ldr	r4, [pc, #176]	; (33dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    332c:	68e2      	ldr	r2, [r4, #12]
    332e:	4282      	cmp	r2, r0
    3330:	bf14      	ite	ne
    3332:	2101      	movne	r1, #1
    3334:	2100      	moveq	r1, #0
    3336:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 33e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    333a:	f89c 5000 	ldrb.w	r5, [ip]
    333e:	2d02      	cmp	r5, #2
    3340:	d002      	beq.n	3348 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3342:	2900      	cmp	r1, #0
    3344:	d037      	beq.n	33b6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    3346:	e002      	b.n	334e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3348:	2900      	cmp	r1, #0
    334a:	bf08      	it	eq
    334c:	bd70      	popeq	{r4, r5, r6, pc}
    334e:	7861      	ldrb	r1, [r4, #1]
    3350:	b381      	cbz	r1, 33b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    3352:	4b24      	ldr	r3, [pc, #144]	; (33e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3354:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3358:	6019      	str	r1, [r3, #0]
    335a:	138b      	asrs	r3, r1, #14
    335c:	4922      	ldr	r1, [pc, #136]	; (33e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    335e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3362:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3366:	2300      	movs	r3, #0
    3368:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    336c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3370:	1ac3      	subs	r3, r0, r3
    3372:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3376:	2b02      	cmp	r3, #2
    3378:	d327      	bcc.n	33ca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    337a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    337e:	d224      	bcs.n	33ca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    3380:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3388:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    338c:	b13d      	cbz	r5, 339e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    338e:	bf00      	nop
    3390:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3394:	1ad3      	subs	r3, r2, r3
    3396:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    339a:	2b02      	cmp	r3, #2
    339c:	d3f8      	bcc.n	3390 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    339e:	4b13      	ldr	r3, [pc, #76]	; (33ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    33a0:	2102      	movs	r1, #2
    33a2:	074a      	lsls	r2, r1, #29
    33a4:	601a      	str	r2, [r3, #0]
    33a6:	60e0      	str	r0, [r4, #12]
    33a8:	2004      	movs	r0, #4
    33aa:	f88c 0001 	strb.w	r0, [ip, #1]
    33ae:	f88c 1000 	strb.w	r1, [ip]
    33b2:	bd70      	pop	{r4, r5, r6, pc}
    33b4:	e004      	b.n	33c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    33b6:	f240 2102 	movw	r1, #514	; 0x202
    33ba:	206c      	movs	r0, #108	; 0x6c
    33bc:	f000 fdf6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33c0:	f240 2106 	movw	r1, #518	; 0x206
    33c4:	206c      	movs	r0, #108	; 0x6c
    33c6:	f000 fdf1 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33ca:	2000      	movs	r0, #0
    33cc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    33d0:	f240 2112 	movw	r1, #530	; 0x212
    33d4:	206c      	movs	r0, #108	; 0x6c
    33d6:	f000 fde9 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33da:	0000      	.short	0x0000
    33dc:	2000001c 	.word	0x2000001c
    33e0:	2000001f 	.word	0x2000001f
    33e4:	4001f508 	.word	0x4001f508
    33e8:	4000b000 	.word	0x4000b000
    33ec:	4001f504 	.word	0x4001f504

000033f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    33f0:	4801      	ldr	r0, [pc, #4]	; (33f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    33f2:	68c0      	ldr	r0, [r0, #12]
    33f4:	4770      	bx	lr
    33f6:	0000      	.short	0x0000
    33f8:	2000001c 	.word	0x2000001c

000033fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    33fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3400:	4936      	ldr	r1, [pc, #216]	; (34dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3402:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3406:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    340a:	4d35      	ldr	r5, [pc, #212]	; (34e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    340c:	1d0b      	adds	r3, r1, #4
    340e:	2200      	movs	r2, #0
    3410:	7828      	ldrb	r0, [r5, #0]
    3412:	b168      	cbz	r0, 3430 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    3414:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3418:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    341c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3420:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3424:	4b2f      	ldr	r3, [pc, #188]	; (34e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3426:	681b      	ldr	r3, [r3, #0]
    3428:	f04f 0c01 	mov.w	ip, #1
    342c:	b99b      	cbnz	r3, 3456 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    342e:	e00c      	b.n	344a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    3430:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3434:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3438:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    343c:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    3440:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3444:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3448:	e7ec      	b.n	3424 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    344a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    344e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3452:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    3456:	2802      	cmp	r0, #2
    3458:	d004      	beq.n	3464 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    345a:	f240 211e 	movw	r1, #542	; 0x21e
    345e:	206c      	movs	r0, #108	; 0x6c
    3460:	f000 fda4 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3464:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3468:	4c1f      	ldr	r4, [pc, #124]	; (34e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    346a:	1cc0      	adds	r0, r0, #3
    346c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3470:	68e3      	ldr	r3, [r4, #12]
    3472:	4e1e      	ldr	r6, [pc, #120]	; (34ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3474:	4298      	cmp	r0, r3
    3476:	d00c      	beq.n	3492 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3478:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    347c:	1bdf      	subs	r7, r3, r7
    347e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3482:	2f04      	cmp	r7, #4
    3484:	d305      	bcc.n	3492 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3486:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    348a:	d202      	bcs.n	3492 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    348c:	f7ff feae 	bl	31ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3490:	e01f      	b.n	34d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    3492:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3496:	1a18      	subs	r0, r3, r0
    3498:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    349c:	2802      	cmp	r0, #2
    349e:	d315      	bcc.n	34cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    34a0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    34a4:	d212      	bcs.n	34cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    34a6:	4912      	ldr	r1, [pc, #72]	; (34f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    34a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    34ac:	6008      	str	r0, [r1, #0]
    34ae:	f8c4 c008 	str.w	ip, [r4, #8]
    34b2:	7022      	strb	r2, [r4, #0]
    34b4:	f8c6 c004 	str.w	ip, [r6, #4]
    34b8:	f8c6 c00c 	str.w	ip, [r6, #12]
    34bc:	0040      	lsls	r0, r0, #1
    34be:	1f09      	subs	r1, r1, #4
    34c0:	6008      	str	r0, [r1, #0]
    34c2:	2004      	movs	r0, #4
    34c4:	7068      	strb	r0, [r5, #1]
    34c6:	f885 c000 	strb.w	ip, [r5]
    34ca:	e002      	b.n	34d2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    34cc:	f8c4 c008 	str.w	ip, [r4, #8]
    34d0:	7022      	strb	r2, [r4, #0]
    34d2:	68a0      	ldr	r0, [r4, #8]
    34d4:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    34d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34dc:	4000b000 	.word	0x4000b000
    34e0:	2000001f 	.word	0x2000001f
    34e4:	4000b148 	.word	0x4000b148
    34e8:	2000001c 	.word	0x2000001c
    34ec:	40008000 	.word	0x40008000
    34f0:	4001f508 	.word	0x4001f508

000034f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    34f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34f8:	f8df c190 	ldr.w	ip, [pc, #400]	; 368c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    34fc:	2600      	movs	r6, #0
    34fe:	2701      	movs	r7, #1
    3500:	f89c 4000 	ldrb.w	r4, [ip]
    3504:	f89c c001 	ldrb.w	ip, [ip, #1]
    3508:	f44f 75a0 	mov.w	r5, #320	; 0x140
    350c:	2807      	cmp	r0, #7
    350e:	d27b      	bcs.n	3608 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3510:	e8df f000 	tbb	[pc, r0]
    3514:	04040404 	.word	0x04040404
    3518:	006c6c6c 	.word	0x006c6c6c
    351c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3690 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    3520:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3524:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3528:	bf04      	itt	eq
    352a:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    352e:	f1b8 0f00 	cmpeq.w	r8, #0
    3532:	d002      	beq.n	353a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3534:	2c02      	cmp	r4, #2
    3536:	d005      	beq.n	3544 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    3538:	e02c      	b.n	3594 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    353a:	f240 2151 	movw	r1, #593	; 0x251
    353e:	206c      	movs	r0, #108	; 0x6c
    3540:	f000 fd34 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3544:	f1ac 0804 	sub.w	r8, ip, #4
    3548:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    354c:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    3550:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    3554:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3558:	2500      	movs	r5, #0
    355a:	2c01      	cmp	r4, #1
    355c:	d002      	beq.n	3564 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    355e:	2c02      	cmp	r4, #2
    3560:	d00b      	beq.n	357a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    3562:	e014      	b.n	358e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3564:	f1bc 0f04 	cmp.w	ip, #4
    3568:	bf24      	itt	cs
    356a:	f8d8 9000 	ldrcs.w	r9, [r8]
    356e:	f1b9 0f00 	cmpcs.w	r9, #0
    3572:	bf08      	it	eq
    3574:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    3578:	e009      	b.n	358e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    357a:	f1bc 0f04 	cmp.w	ip, #4
    357e:	bf24      	itt	cs
    3580:	f8d8 9000 	ldrcs.w	r9, [r8]
    3584:	f1b9 0f00 	cmpcs.w	r9, #0
    3588:	bf08      	it	eq
    358a:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    358e:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    3592:	d1e1      	bne.n	3558 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    3594:	4c3f      	ldr	r4, [pc, #252]	; (3694 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    3596:	f100 0c10 	add.w	ip, r0, #16
    359a:	fa07 fc0c 	lsl.w	ip, r7, ip
    359e:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    35a2:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    35a6:	b1c2      	cbz	r2, 35da <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    35a8:	f04f 0840 	mov.w	r8, #64	; 0x40
    35ac:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    35b0:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    35b4:	44a0      	add	r8, r4
    35b6:	f8c8 7000 	str.w	r7, [r8]
    35ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    35be:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    35c2:	eba1 0000 	sub.w	r0, r1, r0
    35c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35ca:	4282      	cmp	r2, r0
    35cc:	bf98      	it	ls
    35ce:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    35d2:	bf28      	it	cs
    35d4:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    35d8:	d250      	bcs.n	367c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    35da:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    35de:	2b01      	cmp	r3, #1
    35e0:	bf08      	it	eq
    35e2:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    35e6:	2001      	movs	r0, #1
    35e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35ec:	b134      	cbz	r4, 35fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    35ee:	4584      	cmp	ip, r0
    35f0:	d104      	bne.n	35fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    35f2:	f44f 711d 	mov.w	r1, #628	; 0x274
    35f6:	206c      	movs	r0, #108	; 0x6c
    35f8:	f000 fcd8 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35fc:	f1a0 0c04 	sub.w	ip, r0, #4
    3600:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    3604:	2b01      	cmp	r3, #1
    3606:	e000      	b.n	360a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3608:	e03b      	b.n	3682 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    360a:	bf0c      	ite	eq
    360c:	f04f 0801 	moveq.w	r8, #1
    3610:	f04f 0800 	movne.w	r8, #0
    3614:	2c03      	cmp	r4, #3
    3616:	d304      	bcc.n	3622 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    3618:	f240 114d 	movw	r1, #333	; 0x14d
    361c:	206c      	movs	r0, #108	; 0x6c
    361e:	f000 fcc5 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3622:	f8df c074 	ldr.w	ip, [pc, #116]	; 3698 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    3626:	f104 0310 	add.w	r3, r4, #16
    362a:	fa07 f303 	lsl.w	r3, r7, r3
    362e:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3632:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3636:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    363a:	f84c 6004 	str.w	r6, [ip, r4]
    363e:	1f00      	subs	r0, r0, #4
    3640:	b2c0      	uxtb	r0, r0
    3642:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3646:	b16a      	cbz	r2, 3664 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    3648:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    364c:	1b0c      	subs	r4, r1, r4
    364e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    3652:	42a2      	cmp	r2, r4
    3654:	bf98      	it	ls
    3656:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    365a:	bf24      	itt	cs
    365c:	2100      	movcs	r1, #0
    365e:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3662:	d20b      	bcs.n	367c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3664:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3668:	f1b8 0f00 	cmp.w	r8, #0
    366c:	bf18      	it	ne
    366e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3672:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3676:	2001      	movs	r0, #1
    3678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    367c:	2000      	movs	r0, #0
    367e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3682:	f240 2179 	movw	r1, #633	; 0x279
    3686:	206c      	movs	r0, #108	; 0x6c
    3688:	f000 fc90 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    368c:	2000001f 	.word	0x2000001f
    3690:	2000001c 	.word	0x2000001c
    3694:	40008000 	.word	0x40008000
    3698:	4000b000 	.word	0x4000b000

0000369c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    369c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36a0:	2600      	movs	r6, #0
    36a2:	f44f 77a0 	mov.w	r7, #320	; 0x140
    36a6:	f04f 0801 	mov.w	r8, #1
    36aa:	2807      	cmp	r0, #7
    36ac:	d251      	bcs.n	3752 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    36ae:	e8df f000 	tbb	[pc, r0]
    36b2:	0404      	.short	0x0404
    36b4:	19190404 	.word	0x19190404
    36b8:	0019      	.short	0x0019
    36ba:	f100 0110 	add.w	r1, r0, #16
    36be:	fa08 f201 	lsl.w	r2, r8, r1
    36c2:	4926      	ldr	r1, [pc, #152]	; (375c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    36c4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    36c8:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    36cc:	2200      	movs	r2, #0
    36ce:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    36d2:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    36d6:	508e      	str	r6, [r1, r2]
    36d8:	4921      	ldr	r1, [pc, #132]	; (3760 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    36da:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    36de:	9000      	str	r0, [sp, #0]
    36e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36e4:	4d1f      	ldr	r5, [pc, #124]	; (3764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    36e6:	1f01      	subs	r1, r0, #4
    36e8:	b2cc      	uxtb	r4, r1
    36ea:	7829      	ldrb	r1, [r5, #0]
    36ec:	b179      	cbz	r1, 370e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    36ee:	786a      	ldrb	r2, [r5, #1]
    36f0:	4282      	cmp	r2, r0
    36f2:	d10c      	bne.n	370e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    36f4:	4a1c      	ldr	r2, [pc, #112]	; (3768 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    36f6:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    36fa:	6010      	str	r0, [r2, #0]
    36fc:	2901      	cmp	r1, #1
    36fe:	bf08      	it	eq
    3700:	f7ff fd3c 	bleq	317c <MPSL_IRQ_TIMER0_Handler+0x100>
    3704:	702e      	strb	r6, [r5, #0]
    3706:	4919      	ldr	r1, [pc, #100]	; (376c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3708:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    370c:	60c8      	str	r0, [r1, #12]
    370e:	f104 0010 	add.w	r0, r4, #16
    3712:	fa08 f100 	lsl.w	r1, r8, r0
    3716:	4816      	ldr	r0, [pc, #88]	; (3770 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3718:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    371c:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3720:	00a1      	lsls	r1, r4, #2
    3722:	4401      	add	r1, r0
    3724:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    3728:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    372c:	1a89      	subs	r1, r1, r2
    372e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3732:	2902      	cmp	r1, #2
    3734:	d307      	bcc.n	3746 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    3736:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    373a:	2100      	movs	r1, #0
    373c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3740:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    3744:	5046      	str	r6, [r0, r1]
    3746:	480b      	ldr	r0, [pc, #44]	; (3774 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3748:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    374c:	9000      	str	r0, [sp, #0]
    374e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3752:	f240 21f1 	movw	r1, #753	; 0x2f1
    3756:	206c      	movs	r0, #108	; 0x6c
    3758:	f000 fc28 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    375c:	40008000 	.word	0x40008000
    3760:	40008140 	.word	0x40008140
    3764:	2000001f 	.word	0x2000001f
    3768:	4001f508 	.word	0x4001f508
    376c:	2000001c 	.word	0x2000001c
    3770:	4000b000 	.word	0x4000b000
    3774:	4000b140 	.word	0x4000b140

00003778 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3778:	4920      	ldr	r1, [pc, #128]	; (37fc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    377a:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    377e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3782:	481f      	ldr	r0, [pc, #124]	; (3800 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3784:	1d0a      	adds	r2, r1, #4
    3786:	7803      	ldrb	r3, [r0, #0]
    3788:	2000      	movs	r0, #0
    378a:	b15b      	cbz	r3, 37a4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    378c:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3790:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3794:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3798:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    379c:	4919      	ldr	r1, [pc, #100]	; (3804 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    379e:	6809      	ldr	r1, [r1, #0]
    37a0:	b999      	cbnz	r1, 37ca <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    37a2:	e00c      	b.n	37be <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    37a4:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    37a8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    37ac:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    37b0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    37b4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37b8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    37bc:	e7ee      	b.n	379c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    37be:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    37c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    37c6:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    37ca:	490f      	ldr	r1, [pc, #60]	; (3808 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    37cc:	f04f 32ff 	mov.w	r2, #4294967295
    37d0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    37d4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    37d8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    37dc:	1d0a      	adds	r2, r1, #4
    37de:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37e2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    37e6:	1d12      	adds	r2, r2, #4
    37e8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37ec:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    37f0:	1d12      	adds	r2, r2, #4
    37f2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    37f6:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    37fa:	4770      	bx	lr
    37fc:	4000b000 	.word	0x4000b000
    3800:	2000001f 	.word	0x2000001f
    3804:	4000b148 	.word	0x4000b148
    3808:	40008000 	.word	0x40008000

0000380c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    380c:	4808      	ldr	r0, [pc, #32]	; (3830 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    380e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3812:	2800      	cmp	r0, #0
    3814:	bfb8      	it	lt
    3816:	4770      	bxlt	lr
    3818:	f000 011f 	and.w	r1, r0, #31
    381c:	2201      	movs	r2, #1
    381e:	fa02 f101 	lsl.w	r1, r2, r1
    3822:	0940      	lsrs	r0, r0, #5
    3824:	0080      	lsls	r0, r0, #2
    3826:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    382a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    382e:	4770      	bx	lr
    3830:	2000001c 	.word	0x2000001c

00003834 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3834:	b510      	push	{r4, lr}
    3836:	2807      	cmp	r0, #7
    3838:	d20d      	bcs.n	3856 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    383a:	e8df f000 	tbb	[pc, r0]
    383e:	0404      	.short	0x0404
    3840:	06060404 	.word	0x06060404
    3844:	0006      	.short	0x0006
    3846:	4906      	ldr	r1, [pc, #24]	; (3860 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3848:	e002      	b.n	3850 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    384a:	1f00      	subs	r0, r0, #4
    384c:	4905      	ldr	r1, [pc, #20]	; (3864 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    384e:	b2c0      	uxtb	r0, r0
    3850:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3854:	bd10      	pop	{r4, pc}
    3856:	f240 219d 	movw	r1, #669	; 0x29d
    385a:	206c      	movs	r0, #108	; 0x6c
    385c:	f000 fba6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3860:	40008140 	.word	0x40008140
    3864:	4000b140 	.word	0x4000b140

00003868 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3868:	b510      	push	{r4, lr}
    386a:	481c      	ldr	r0, [pc, #112]	; (38dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    386c:	2400      	movs	r4, #0
    386e:	2104      	movs	r1, #4
    3870:	7004      	strb	r4, [r0, #0]
    3872:	1ec0      	subs	r0, r0, #3
    3874:	7001      	strb	r1, [r0, #0]
    3876:	0589      	lsls	r1, r1, #22
    3878:	60c1      	str	r1, [r0, #12]
    387a:	f7ff fc7f 	bl	317c <MPSL_IRQ_TIMER0_Handler+0x100>
    387e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3882:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3886:	f04f 0c01 	mov.w	ip, #1
    388a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    388e:	f3bf 8f4f 	dsb	sy
    3892:	f3bf 8f6f 	isb	sy
    3896:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    389a:	4811      	ldr	r0, [pc, #68]	; (38e0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    389c:	f8c0 c004 	str.w	ip, [r0, #4]
    38a0:	f8c0 c008 	str.w	ip, [r0, #8]
    38a4:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    38a8:	2900      	cmp	r1, #0
    38aa:	d1fb      	bne.n	38a4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    38ac:	1e49      	subs	r1, r1, #1
    38ae:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    38b2:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    38b6:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    38ba:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    38be:	4909      	ldr	r1, [pc, #36]	; (38e4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    38c0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    38c4:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    38c8:	1d09      	adds	r1, r1, #4
    38ca:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    38ce:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    38d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    38d6:	f8c0 c000 	str.w	ip, [r0]
    38da:	bd10      	pop	{r4, pc}
    38dc:	2000001f 	.word	0x2000001f
    38e0:	4000b000 	.word	0x4000b000
    38e4:	4000b004 	.word	0x4000b004

000038e8 <MPSL_IRQ_CLOCK_Handler>:
    38e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38ec:	4c16      	ldr	r4, [pc, #88]	; (3948 <MPSL_IRQ_CLOCK_Handler+0x60>)
    38ee:	7a60      	ldrb	r0, [r4, #9]
    38f0:	2800      	cmp	r0, #0
    38f2:	d027      	beq.n	3944 <MPSL_IRQ_CLOCK_Handler+0x5c>
    38f4:	f44f 7180 	mov.w	r1, #256	; 0x100
    38f8:	058d      	lsls	r5, r1, #22
    38fa:	4628      	mov	r0, r5
    38fc:	f007 fbb5 	bl	b06a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3900:	4680      	mov	r8, r0
    3902:	f44f 7182 	mov.w	r1, #260	; 0x104
    3906:	4628      	mov	r0, r5
    3908:	f007 fbaf 	bl	b06a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    390c:	2600      	movs	r6, #0
    390e:	4607      	mov	r7, r0
    3910:	f1b8 0f00 	cmp.w	r8, #0
    3914:	d009      	beq.n	392a <MPSL_IRQ_CLOCK_Handler+0x42>
    3916:	2001      	movs	r0, #1
    3918:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    391c:	7920      	ldrb	r0, [r4, #4]
    391e:	b120      	cbz	r0, 392a <MPSL_IRQ_CLOCK_Handler+0x42>
    3920:	7126      	strb	r6, [r4, #4]
    3922:	69e0      	ldr	r0, [r4, #28]
    3924:	b108      	cbz	r0, 392a <MPSL_IRQ_CLOCK_Handler+0x42>
    3926:	4780      	blx	r0
    3928:	61e6      	str	r6, [r4, #28]
    392a:	b137      	cbz	r7, 393a <MPSL_IRQ_CLOCK_Handler+0x52>
    392c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3930:	2002      	movs	r0, #2
    3932:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3936:	f000 fa6d 	bl	3e14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    393a:	4640      	mov	r0, r8
    393c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3940:	f000 b85a 	b.w	39f8 <MPSL_IRQ_CLOCK_Handler+0x110>
    3944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3948:	2000002c 	.word	0x2000002c
    394c:	b510      	push	{r4, lr}
    394e:	f007 fc36 	bl	b1be <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3952:	b930      	cbnz	r0, 3962 <MPSL_IRQ_CLOCK_Handler+0x7a>
    3954:	f007 fc54 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3958:	b918      	cbnz	r0, 3962 <MPSL_IRQ_CLOCK_Handler+0x7a>
    395a:	f007 fc87 	bl	b26c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    395e:	2800      	cmp	r0, #0
    3960:	d002      	beq.n	3968 <MPSL_IRQ_CLOCK_Handler+0x80>
    3962:	4902      	ldr	r1, [pc, #8]	; (396c <MPSL_IRQ_CLOCK_Handler+0x84>)
    3964:	2002      	movs	r0, #2
    3966:	6008      	str	r0, [r1, #0]
    3968:	bd10      	pop	{r4, pc}
    396a:	0000      	.short	0x0000
    396c:	40000c34 	.word	0x40000c34
    3970:	b570      	push	{r4, r5, r6, lr}
    3972:	f000 f987 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3976:	f000 faa1 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    397a:	4c09      	ldr	r4, [pc, #36]	; (39a0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    397c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3980:	b130      	cbz	r0, 3990 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3982:	f7ff ffe3 	bl	394c <MPSL_IRQ_CLOCK_Handler+0x64>
    3986:	2001      	movs	r0, #1
    3988:	6128      	str	r0, [r5, #16]
    398a:	2004      	movs	r0, #4
    398c:	72a0      	strb	r0, [r4, #10]
    398e:	e004      	b.n	399a <MPSL_IRQ_CLOCK_Handler+0xb2>
    3990:	2003      	movs	r0, #3
    3992:	72a0      	strb	r0, [r4, #10]
    3994:	2001      	movs	r0, #1
    3996:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    399a:	2000      	movs	r0, #0
    399c:	71e0      	strb	r0, [r4, #7]
    399e:	bd70      	pop	{r4, r5, r6, pc}
    39a0:	2000002c 	.word	0x2000002c
    39a4:	b570      	push	{r4, r5, r6, lr}
    39a6:	4c13      	ldr	r4, [pc, #76]	; (39f4 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    39a8:	79a0      	ldrb	r0, [r4, #6]
    39aa:	b1f0      	cbz	r0, 39ea <MPSL_IRQ_CLOCK_Handler+0x102>
    39ac:	2801      	cmp	r0, #1
    39ae:	d003      	beq.n	39b8 <MPSL_IRQ_CLOCK_Handler+0xd0>
    39b0:	79e1      	ldrb	r1, [r4, #7]
    39b2:	1e40      	subs	r0, r0, #1
    39b4:	4281      	cmp	r1, r0
    39b6:	da18      	bge.n	39ea <MPSL_IRQ_CLOCK_Handler+0x102>
    39b8:	f000 fa80 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    39bc:	4605      	mov	r5, r0
    39be:	f000 fb65 	bl	408c <mpsl_temperature_get>
    39c2:	79a1      	ldrb	r1, [r4, #6]
    39c4:	2901      	cmp	r1, #1
    39c6:	d902      	bls.n	39ce <MPSL_IRQ_CLOCK_Handler+0xe6>
    39c8:	79e1      	ldrb	r1, [r4, #7]
    39ca:	1c49      	adds	r1, r1, #1
    39cc:	71e1      	strb	r1, [r4, #7]
    39ce:	b10d      	cbz	r5, 39d4 <MPSL_IRQ_CLOCK_Handler+0xec>
    39d0:	6961      	ldr	r1, [r4, #20]
    39d2:	e000      	b.n	39d6 <MPSL_IRQ_CLOCK_Handler+0xee>
    39d4:	6921      	ldr	r1, [r4, #16]
    39d6:	1a41      	subs	r1, r0, r1
    39d8:	2902      	cmp	r1, #2
    39da:	da02      	bge.n	39e2 <MPSL_IRQ_CLOCK_Handler+0xfa>
    39dc:	f111 0f02 	cmn.w	r1, #2
    39e0:	dc07      	bgt.n	39f2 <MPSL_IRQ_CLOCK_Handler+0x10a>
    39e2:	b10d      	cbz	r5, 39e8 <MPSL_IRQ_CLOCK_Handler+0x100>
    39e4:	6160      	str	r0, [r4, #20]
    39e6:	e000      	b.n	39ea <MPSL_IRQ_CLOCK_Handler+0x102>
    39e8:	6120      	str	r0, [r4, #16]
    39ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39ee:	f7ff bfbf 	b.w	3970 <MPSL_IRQ_CLOCK_Handler+0x88>
    39f2:	bd70      	pop	{r4, r5, r6, pc}
    39f4:	2000002c 	.word	0x2000002c
    39f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39fc:	4606      	mov	r6, r0
    39fe:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3a02:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3a06:	4628      	mov	r0, r5
    3a08:	f007 fb2f 	bl	b06a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a0c:	4680      	mov	r8, r0
    3a0e:	f44f 7188 	mov.w	r1, #272	; 0x110
    3a12:	4628      	mov	r0, r5
    3a14:	f007 fb29 	bl	b06a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3a18:	4c27      	ldr	r4, [pc, #156]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a1a:	4682      	mov	sl, r0
    3a1c:	7827      	ldrb	r7, [r4, #0]
    3a1e:	f104 0008 	add.w	r0, r4, #8
    3a22:	f007 fb96 	bl	b152 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3a26:	b110      	cbz	r0, 3a2e <MPSL_IRQ_CLOCK_Handler+0x146>
    3a28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3a2c:	e016      	b.n	3a5c <MPSL_IRQ_CLOCK_Handler+0x174>
    3a2e:	f04f 0901 	mov.w	r9, #1
    3a32:	b146      	cbz	r6, 3a46 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3a34:	7aa0      	ldrb	r0, [r4, #10]
    3a36:	2803      	cmp	r0, #3
    3a38:	d105      	bne.n	3a46 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3a3a:	2004      	movs	r0, #4
    3a3c:	72a0      	strb	r0, [r4, #10]
    3a3e:	f7ff ff85 	bl	394c <MPSL_IRQ_CLOCK_Handler+0x64>
    3a42:	f8c5 9010 	str.w	r9, [r5, #16]
    3a46:	2600      	movs	r6, #0
    3a48:	f1b8 0f00 	cmp.w	r8, #0
    3a4c:	d018      	beq.n	3a80 <MPSL_IRQ_CLOCK_Handler+0x198>
    3a4e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3a52:	7aa0      	ldrb	r0, [r4, #10]
    3a54:	2804      	cmp	r0, #4
    3a56:	d004      	beq.n	3a62 <MPSL_IRQ_CLOCK_Handler+0x17a>
    3a58:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3a5c:	206d      	movs	r0, #109	; 0x6d
    3a5e:	f000 faa5 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a62:	f007 fbac 	bl	b1be <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3a66:	b928      	cbnz	r0, 3a74 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a68:	f007 fbca 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a6c:	b910      	cbnz	r0, 3a74 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3a6e:	f007 fbfd 	bl	b26c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3a72:	b108      	cbz	r0, 3a78 <MPSL_IRQ_CLOCK_Handler+0x190>
    3a74:	4811      	ldr	r0, [pc, #68]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a76:	6006      	str	r6, [r0, #0]
    3a78:	2002      	movs	r0, #2
    3a7a:	72a0      	strb	r0, [r4, #10]
    3a7c:	f000 f8e6 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3a80:	f1ba 0f00 	cmp.w	sl, #0
    3a84:	d008      	beq.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a86:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3a8a:	7aa0      	ldrb	r0, [r4, #10]
    3a8c:	2802      	cmp	r0, #2
    3a8e:	d101      	bne.n	3a94 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3a90:	f7ff ff88 	bl	39a4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3a94:	f8c5 9014 	str.w	r9, [r5, #20]
    3a98:	b13f      	cbz	r7, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3a9a:	7026      	strb	r6, [r4, #0]
    3a9c:	7aa0      	ldrb	r0, [r4, #10]
    3a9e:	2802      	cmp	r0, #2
    3aa0:	d101      	bne.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
    3aa2:	f7ff ff65 	bl	3970 <MPSL_IRQ_CLOCK_Handler+0x88>
    3aa6:	f000 f8d1 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3aaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3aae:	4802      	ldr	r0, [pc, #8]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3ab0:	3008      	adds	r0, #8
    3ab2:	f007 bb65 	b.w	b180 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3ab6:	0000      	.short	0x0000
    3ab8:	2000002c 	.word	0x2000002c
    3abc:	40000c34 	.word	0x40000c34
    3ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ac4:	4c5c      	ldr	r4, [pc, #368]	; (3c38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a0>)
    3ac6:	f04f 0800 	mov.w	r8, #0
    3aca:	4606      	mov	r6, r0
    3acc:	f8c4 8018 	str.w	r8, [r4, #24]
    3ad0:	7843      	ldrb	r3, [r0, #1]
    3ad2:	7882      	ldrb	r2, [r0, #2]
    3ad4:	7800      	ldrb	r0, [r0, #0]
    3ad6:	72e0      	strb	r0, [r4, #11]
    3ad8:	7163      	strb	r3, [r4, #5]
    3ada:	2701      	movs	r7, #1
    3adc:	71a2      	strb	r2, [r4, #6]
    3ade:	07bd      	lsls	r5, r7, #30
    3ae0:	f884 8007 	strb.w	r8, [r4, #7]
    3ae4:	2805      	cmp	r0, #5
    3ae6:	d224      	bcs.n	3b32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9a>
    3ae8:	e8df f000 	tbb	[pc, r0]
    3aec:	1f05030f 	.word	0x1f05030f
    3af0:	0021      	.short	0x0021
    3af2:	61a7      	str	r7, [r4, #24]
    3af4:	e009      	b.n	3b0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x72>
    3af6:	f000 f8c5 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3afa:	2101      	movs	r1, #1
    3afc:	4628      	mov	r0, r5
    3afe:	f007 fab9 	bl	b074 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3b02:	2800      	cmp	r0, #0
    3b04:	d0f9      	beq.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
    3b06:	2002      	movs	r0, #2
    3b08:	61a0      	str	r0, [r4, #24]
    3b0a:	f007 fadf 	bl	b0cc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3b0e:	b1b0      	cbz	r0, 3b3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa6>
    3b10:	f000 f9ee 	bl	3ef0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3b14:	7e21      	ldrb	r1, [r4, #24]
    3b16:	f001 0103 	and.w	r1, r1, #3
    3b1a:	4288      	cmp	r0, r1
    3b1c:	d10f      	bne.n	3b3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa6>
    3b1e:	79b0      	ldrb	r0, [r6, #6]
    3b20:	b150      	cbz	r0, 3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    3b22:	2002      	movs	r0, #2
    3b24:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b28:	e06a      	b.n	3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>
    3b2a:	4844      	ldr	r0, [pc, #272]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3b2c:	e7ec      	b.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
    3b2e:	4844      	ldr	r0, [pc, #272]	; (3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>)
    3b30:	e7ea      	b.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
    3b32:	f240 312d 	movw	r1, #813	; 0x32d
    3b36:	e049      	b.n	3bcc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x134>
    3b38:	f000 f9ae 	bl	3e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3b3c:	e060      	b.n	3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>
    3b3e:	60ef      	str	r7, [r5, #12]
    3b40:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3b44:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3b48:	69a0      	ldr	r0, [r4, #24]
    3b4a:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3b4e:	f007 fb22 	bl	b196 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b52:	b940      	cbnz	r0, 3b66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xce>
    3b54:	f007 fb29 	bl	b1aa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b58:	b928      	cbnz	r0, 3b66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xce>
    3b5a:	f007 fb3d 	bl	b1d8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b5e:	b910      	cbnz	r0, 3b66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xce>
    3b60:	f007 fb4e 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b64:	b138      	cbz	r0, 3b76 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xde>
    3b66:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3b6a:	4836      	ldr	r0, [pc, #216]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b6c:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3b70:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3b74:	6001      	str	r1, [r0, #0]
    3b76:	f007 fb0e 	bl	b196 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b7a:	b940      	cbnz	r0, 3b8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf6>
    3b7c:	f007 fb15 	bl	b1aa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b80:	b928      	cbnz	r0, 3b8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf6>
    3b82:	f007 fb29 	bl	b1d8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b86:	b910      	cbnz	r0, 3b8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf6>
    3b88:	f007 fb3a 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b8c:	b110      	cbz	r0, 3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    3b8e:	482d      	ldr	r0, [pc, #180]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b90:	3010      	adds	r0, #16
    3b92:	6007      	str	r7, [r0, #0]
    3b94:	60af      	str	r7, [r5, #8]
    3b96:	2002      	movs	r0, #2
    3b98:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3b9c:	79b0      	ldrb	r0, [r6, #6]
    3b9e:	bb78      	cbnz	r0, 3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>
    3ba0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3ba4:	f010 0f02 	tst.w	r0, #2
    3ba8:	d00e      	beq.n	3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>
    3baa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>
    3bae:	f8d9 1000 	ldr.w	r1, [r9]
    3bb2:	43c9      	mvns	r1, r1
    3bb4:	f341 1700 	sbfx	r7, r1, #4, #1
    3bb8:	f8d9 1000 	ldr.w	r1, [r9]
    3bbc:	f041 0110 	orr.w	r1, r1, #16
    3bc0:	f8c9 1000 	str.w	r1, [r9]
    3bc4:	1c7f      	adds	r7, r7, #1
    3bc6:	e007      	b.n	3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>
    3bc8:	f240 21ee 	movw	r1, #750	; 0x2ee
    3bcc:	206d      	movs	r0, #109	; 0x6d
    3bce:	f000 f9ed 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bd2:	bf00      	nop
    3bd4:	f000 fb10 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3bd8:	4651      	mov	r1, sl
    3bda:	4628      	mov	r0, r5
    3bdc:	f007 fa45 	bl	b06a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3be0:	2800      	cmp	r0, #0
    3be2:	d0f7      	beq.n	3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>
    3be4:	f000 f958 	bl	3e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3be8:	b92f      	cbnz	r7, 3bf6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15e>
    3bea:	f8d9 1000 	ldr.w	r1, [r9]
    3bee:	f021 0110 	bic.w	r1, r1, #16
    3bf2:	f8c9 1000 	str.w	r1, [r9]
    3bf6:	2002      	movs	r0, #2
    3bf8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3bfc:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3c00:	79a0      	ldrb	r0, [r4, #6]
    3c02:	b170      	cbz	r0, 3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c04:	7830      	ldrb	r0, [r6, #0]
    3c06:	b960      	cbnz	r0, 3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c08:	f000 f958 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3c0c:	4606      	mov	r6, r0
    3c0e:	f000 fa3d 	bl	408c <mpsl_temperature_get>
    3c12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3c16:	b116      	cbz	r6, 3c1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x186>
    3c18:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3c1c:	e001      	b.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c1e:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3c22:	2101      	movs	r1, #1
    3c24:	4628      	mov	r0, r5
    3c26:	f007 fa25 	bl	b074 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3c2a:	b108      	cbz	r0, 3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3c2c:	f000 f940 	bl	3eb0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3c30:	f884 800a 	strb.w	r8, [r4, #10]
    3c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c38:	2000002c 	.word	0x2000002c
    3c3c:	00020001 	.word	0x00020001
    3c40:	00030001 	.word	0x00030001
    3c44:	4000053c 	.word	0x4000053c
    3c48:	e000ed10 	.word	0xe000ed10

00003c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3c4c:	b510      	push	{r4, lr}
    3c4e:	f3ef 8410 	mrs	r4, PRIMASK
    3c52:	b672      	cpsid	i
    3c54:	480a      	ldr	r0, [pc, #40]	; (3c80 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3c56:	7841      	ldrb	r1, [r0, #1]
    3c58:	b129      	cbz	r1, 3c66 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3c5a:	7841      	ldrb	r1, [r0, #1]
    3c5c:	1e49      	subs	r1, r1, #1
    3c5e:	7041      	strb	r1, [r0, #1]
    3c60:	7841      	ldrb	r1, [r0, #1]
    3c62:	b129      	cbz	r1, 3c70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3c64:	e008      	b.n	3c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c66:	f240 110d 	movw	r1, #269	; 0x10d
    3c6a:	206d      	movs	r0, #109	; 0x6d
    3c6c:	f000 f99e 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c70:	7880      	ldrb	r0, [r0, #2]
    3c72:	b908      	cbnz	r0, 3c78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3c74:	f000 f930 	bl	3ed8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3c78:	2c00      	cmp	r4, #0
    3c7a:	d100      	bne.n	3c7e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3c7c:	b662      	cpsie	i
    3c7e:	bd10      	pop	{r4, pc}
    3c80:	2000002c 	.word	0x2000002c

00003c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3c84:	b510      	push	{r4, lr}
    3c86:	f3ef 8410 	mrs	r4, PRIMASK
    3c8a:	b672      	cpsid	i
    3c8c:	4806      	ldr	r0, [pc, #24]	; (3ca8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3c8e:	7841      	ldrb	r1, [r0, #1]
    3c90:	1c49      	adds	r1, r1, #1
    3c92:	7041      	strb	r1, [r0, #1]
    3c94:	7840      	ldrb	r0, [r0, #1]
    3c96:	2801      	cmp	r0, #1
    3c98:	d101      	bne.n	3c9e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3c9a:	f007 fa02 	bl	b0a2 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3c9e:	2c00      	cmp	r4, #0
    3ca0:	d100      	bne.n	3ca4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    3ca2:	b662      	cpsie	i
    3ca4:	bd10      	pop	{r4, pc}
    3ca6:	0000      	.short	0x0000
    3ca8:	2000002c 	.word	0x2000002c

00003cac <mpsl_clock_hfclk_release>:
    3cac:	4805      	ldr	r0, [pc, #20]	; (3cc4 <mpsl_clock_hfclk_release+0x18>)
    3cae:	b510      	push	{r4, lr}
    3cb0:	78c1      	ldrb	r1, [r0, #3]
    3cb2:	b121      	cbz	r1, 3cbe <mpsl_clock_hfclk_release+0x12>
    3cb4:	2100      	movs	r1, #0
    3cb6:	7101      	strb	r1, [r0, #4]
    3cb8:	70c1      	strb	r1, [r0, #3]
    3cba:	f7ff ffc7 	bl	3c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3cbe:	2000      	movs	r0, #0
    3cc0:	bd10      	pop	{r4, pc}
    3cc2:	0000      	.short	0x0000
    3cc4:	2000002c 	.word	0x2000002c

00003cc8 <mpsl_clock_hfclk_request>:
    3cc8:	b570      	push	{r4, r5, r6, lr}
    3cca:	4c0c      	ldr	r4, [pc, #48]	; (3cfc <mpsl_clock_hfclk_request+0x34>)
    3ccc:	78e1      	ldrb	r1, [r4, #3]
    3cce:	b961      	cbnz	r1, 3cea <mpsl_clock_hfclk_request+0x22>
    3cd0:	2501      	movs	r5, #1
    3cd2:	70e5      	strb	r5, [r4, #3]
    3cd4:	61e0      	str	r0, [r4, #28]
    3cd6:	f7ff ffd5 	bl	3c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3cda:	f000 f8ef 	bl	3ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3cde:	b130      	cbz	r0, 3cee <mpsl_clock_hfclk_request+0x26>
    3ce0:	69e0      	ldr	r0, [r4, #28]
    3ce2:	b110      	cbz	r0, 3cea <mpsl_clock_hfclk_request+0x22>
    3ce4:	4780      	blx	r0
    3ce6:	2000      	movs	r0, #0
    3ce8:	61e0      	str	r0, [r4, #28]
    3cea:	2000      	movs	r0, #0
    3cec:	bd70      	pop	{r4, r5, r6, pc}
    3cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3cf2:	7125      	strb	r5, [r4, #4]
    3cf4:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3cf8:	e7f7      	b.n	3cea <mpsl_clock_hfclk_request+0x22>
    3cfa:	0000      	.short	0x0000
    3cfc:	2000002c 	.word	0x2000002c

00003d00 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3d00:	f3ef 8010 	mrs	r0, PRIMASK
    3d04:	b672      	cpsid	i
    3d06:	4904      	ldr	r1, [pc, #16]	; (3d18 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3d08:	788a      	ldrb	r2, [r1, #2]
    3d0a:	1c52      	adds	r2, r2, #1
    3d0c:	708a      	strb	r2, [r1, #2]
    3d0e:	2800      	cmp	r0, #0
    3d10:	d100      	bne.n	3d14 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3d12:	b662      	cpsie	i
    3d14:	4770      	bx	lr
    3d16:	0000      	.short	0x0000
    3d18:	2000002c 	.word	0x2000002c

00003d1c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3d1c:	b510      	push	{r4, lr}
    3d1e:	f3ef 8410 	mrs	r4, PRIMASK
    3d22:	b672      	cpsid	i
    3d24:	480a      	ldr	r0, [pc, #40]	; (3d50 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3d26:	7881      	ldrb	r1, [r0, #2]
    3d28:	b129      	cbz	r1, 3d36 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3d2a:	7881      	ldrb	r1, [r0, #2]
    3d2c:	1e49      	subs	r1, r1, #1
    3d2e:	7081      	strb	r1, [r0, #2]
    3d30:	7841      	ldrb	r1, [r0, #1]
    3d32:	b129      	cbz	r1, 3d40 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3d34:	e008      	b.n	3d48 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3d36:	f240 1125 	movw	r1, #293	; 0x125
    3d3a:	206d      	movs	r0, #109	; 0x6d
    3d3c:	f000 f936 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d40:	7880      	ldrb	r0, [r0, #2]
    3d42:	b908      	cbnz	r0, 3d48 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3d44:	f000 f8c8 	bl	3ed8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3d48:	2c00      	cmp	r4, #0
    3d4a:	d100      	bne.n	3d4e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3d4c:	b662      	cpsie	i
    3d4e:	bd10      	pop	{r4, pc}
    3d50:	2000002c 	.word	0x2000002c

00003d54 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d58:	0004      	movs	r4, r0
    3d5a:	f06f 0015 	mvn.w	r0, #21
    3d5e:	d03c      	beq.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d60:	7821      	ldrb	r1, [r4, #0]
    3d62:	2904      	cmp	r1, #4
    3d64:	d839      	bhi.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d66:	2900      	cmp	r1, #0
    3d68:	7861      	ldrb	r1, [r4, #1]
    3d6a:	d038      	beq.n	3dde <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3d6c:	2900      	cmp	r1, #0
    3d6e:	d134      	bne.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d70:	78a1      	ldrb	r1, [r4, #2]
    3d72:	2900      	cmp	r1, #0
    3d74:	d131      	bne.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3d76:	2000      	movs	r0, #0
    3d78:	f007 f942 	bl	b000 <MPSL_IRQ_RADIO_Handler+0x1e>
    3d7c:	2000      	movs	r0, #0
    3d7e:	f007 f932 	bl	afe6 <MPSL_IRQ_RADIO_Handler+0x4>
    3d82:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3d86:	f04f 31ff 	mov.w	r1, #4294967295
    3d8a:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3d8e:	2600      	movs	r6, #0
    3d90:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3d94:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3d98:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3d9c:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3da0:	4f14      	ldr	r7, [pc, #80]	; (3df4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    3da2:	707e      	strb	r6, [r7, #1]
    3da4:	88a0      	ldrh	r0, [r4, #4]
    3da6:	81b8      	strh	r0, [r7, #12]
    3da8:	f007 f972 	bl	b090 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3dac:	2501      	movs	r5, #1
    3dae:	b108      	cbz	r0, 3db4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3db0:	70fd      	strb	r5, [r7, #3]
    3db2:	707d      	strb	r5, [r7, #1]
    3db4:	2101      	movs	r1, #1
    3db6:	4640      	mov	r0, r8
    3db8:	f007 f95c 	bl	b074 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3dbc:	b108      	cbz	r0, 3dc2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3dbe:	f000 f877 	bl	3eb0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3dc2:	4620      	mov	r0, r4
    3dc4:	f7ff fe7c 	bl	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3dc8:	727d      	strb	r5, [r7, #9]
    3dca:	2000      	movs	r0, #0
    3dcc:	f007 f90b 	bl	afe6 <MPSL_IRQ_RADIO_Handler+0x4>
    3dd0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3dd4:	4630      	mov	r0, r6
    3dd6:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dde:	2900      	cmp	r1, #0
    3de0:	d0fb      	beq.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3de2:	2920      	cmp	r1, #32
    3de4:	d8f9      	bhi.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3de6:	78a1      	ldrb	r1, [r4, #2]
    3de8:	2921      	cmp	r1, #33	; 0x21
    3dea:	d8f6      	bhi.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3dec:	2901      	cmp	r1, #1
    3dee:	d1c2      	bne.n	3d76 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3df0:	e7f3      	b.n	3dda <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3df2:	0000      	.short	0x0000
    3df4:	2000002c 	.word	0x2000002c

00003df8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3df8:	4801      	ldr	r0, [pc, #4]	; (3e00 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3dfa:	8980      	ldrh	r0, [r0, #12]
    3dfc:	4770      	bx	lr
    3dfe:	0000      	.short	0x0000
    3e00:	2000002c 	.word	0x2000002c

00003e04 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3e04:	4802      	ldr	r0, [pc, #8]	; (3e10 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    3e06:	7a80      	ldrb	r0, [r0, #10]
    3e08:	2800      	cmp	r0, #0
    3e0a:	d000      	beq.n	3e0e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3e0c:	2001      	movs	r0, #1
    3e0e:	4770      	bx	lr
    3e10:	2000002c 	.word	0x2000002c

00003e14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e16:	4d1f      	ldr	r5, [pc, #124]	; (3e94 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e18:	7ae8      	ldrb	r0, [r5, #11]
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d10f      	bne.n	3e3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e1e:	7e28      	ldrb	r0, [r5, #24]
    3e20:	f000 0003 	and.w	r0, r0, #3
    3e24:	f007 f942 	bl	b0ac <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3e28:	2800      	cmp	r0, #0
    3e2a:	d008      	beq.n	3e3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e2c:	f3ef 8110 	mrs	r1, PRIMASK
    3e30:	b672      	cpsid	i
    3e32:	f7ff ffe7 	bl	3e04 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3e36:	b118      	cbz	r0, 3e40 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3e38:	2900      	cmp	r1, #0
    3e3a:	d100      	bne.n	3e3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3e3c:	b662      	cpsie	i
    3e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e40:	2601      	movs	r6, #1
    3e42:	72ae      	strb	r6, [r5, #10]
    3e44:	b901      	cbnz	r1, 3e48 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3e46:	b662      	cpsie	i
    3e48:	2018      	movs	r0, #24
    3e4a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3e4e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3e52:	61a6      	str	r6, [r4, #24]
    3e54:	f44f 7020 	mov.w	r0, #640	; 0x280
    3e58:	f8ad 0000 	strh.w	r0, [sp]
    3e5c:	f8bd 0000 	ldrh.w	r0, [sp]
    3e60:	1e41      	subs	r1, r0, #1
    3e62:	f8ad 1000 	strh.w	r1, [sp]
    3e66:	d2f9      	bcs.n	3e5c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3e68:	2700      	movs	r7, #0
    3e6a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3e6e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3e72:	4808      	ldr	r0, [pc, #32]	; (3e94 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3e74:	3008      	adds	r0, #8
    3e76:	f007 f97f 	bl	b178 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3e7a:	702f      	strb	r7, [r5, #0]
    3e7c:	f7ff fd78 	bl	3970 <MPSL_IRQ_CLOCK_Handler+0x88>
    3e80:	6166      	str	r6, [r4, #20]
    3e82:	7968      	ldrb	r0, [r5, #5]
    3e84:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3e88:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3e8c:	2018      	movs	r0, #24
    3e8e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e94:	2000002c 	.word	0x2000002c

00003e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3e98:	b510      	push	{r4, lr}
    3e9a:	4c04      	ldr	r4, [pc, #16]	; (3eac <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3e9c:	7e20      	ldrb	r0, [r4, #24]
    3e9e:	f000 0003 	and.w	r0, r0, #3
    3ea2:	f007 f903 	bl	b0ac <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d0f8      	beq.n	3e9c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3eaa:	bd10      	pop	{r4, pc}
    3eac:	2000002c 	.word	0x2000002c

00003eb0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3eb0:	4901      	ldr	r1, [pc, #4]	; (3eb8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3eb2:	2001      	movs	r0, #1
    3eb4:	7008      	strb	r0, [r1, #0]
    3eb6:	4770      	bx	lr
    3eb8:	2000026c 	.word	0x2000026c

00003ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3ebc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3ec0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3ec4:	b918      	cbnz	r0, 3ece <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    3ec6:	4803      	ldr	r0, [pc, #12]	; (3ed4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3ec8:	7800      	ldrb	r0, [r0, #0]
    3eca:	2800      	cmp	r0, #0
    3ecc:	d000      	beq.n	3ed0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3ece:	2001      	movs	r0, #1
    3ed0:	4770      	bx	lr
    3ed2:	0000      	.short	0x0000
    3ed4:	2000026c 	.word	0x2000026c

00003ed8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3ed8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3edc:	2101      	movs	r1, #1
    3ede:	6041      	str	r1, [r0, #4]
    3ee0:	2100      	movs	r1, #0
    3ee2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3ee6:	4801      	ldr	r0, [pc, #4]	; (3eec <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3ee8:	7001      	strb	r1, [r0, #0]
    3eea:	4770      	bx	lr
    3eec:	2000026c 	.word	0x2000026c

00003ef0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3ef0:	4802      	ldr	r0, [pc, #8]	; (3efc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3ef2:	6800      	ldr	r0, [r0, #0]
    3ef4:	f000 0003 	and.w	r0, r0, #3
    3ef8:	4770      	bx	lr
    3efa:	0000      	.short	0x0000
    3efc:	4000041c 	.word	0x4000041c
    3f00:	b510      	push	{r4, lr}
    3f02:	b131      	cbz	r1, 3f12 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3f04:	2901      	cmp	r1, #1
    3f06:	d007      	beq.n	3f18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3f08:	f240 3102 	movw	r1, #770	; 0x302
    3f0c:	a005      	add	r0, pc, #20	; (adr r0, 3f24 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3f0e:	f000 f821 	bl	3f54 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3f12:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    3f16:	e001      	b.n	3f1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3f18:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3f1c:	f000 0001 	and.w	r0, r0, #1
    3f20:	bd10      	pop	{r4, pc}
    3f22:	0000      	.short	0x0000
    3f24:	5f66726e 	.word	0x5f66726e
    3f28:	636f6c63 	.word	0x636f6c63
    3f2c:	00682e6b 	.word	0x00682e6b
    3f30:	f3bf 8f4f 	dsb	sy
    3f34:	4805      	ldr	r0, [pc, #20]	; (3f4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    3f36:	6801      	ldr	r1, [r0, #0]
    3f38:	4a05      	ldr	r2, [pc, #20]	; (3f50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3f3a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f3e:	4311      	orrs	r1, r2
    3f40:	6001      	str	r1, [r0, #0]
    3f42:	f3bf 8f4f 	dsb	sy
    3f46:	bf00      	nop
    3f48:	e7fd      	b.n	3f46 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3f4a:	0000      	.short	0x0000
    3f4c:	e000ed0c 	.word	0xe000ed0c
    3f50:	05fa0004 	.word	0x05fa0004

00003f54 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3f54:	b672      	cpsid	i
    3f56:	4a03      	ldr	r2, [pc, #12]	; (3f64 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3f58:	6852      	ldr	r2, [r2, #4]
    3f5a:	b102      	cbz	r2, 3f5e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3f5c:	4790      	blx	r2
    3f5e:	f7ff ffe7 	bl	3f30 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3f62:	0000      	.short	0x0000
    3f64:	2000004c 	.word	0x2000004c
    3f68:	4806      	ldr	r0, [pc, #24]	; (3f84 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    3f6a:	b510      	push	{r4, lr}
    3f6c:	2100      	movs	r1, #0
    3f6e:	6001      	str	r1, [r0, #0]
    3f70:	2101      	movs	r1, #1
    3f72:	6001      	str	r1, [r0, #0]
    3f74:	4608      	mov	r0, r1
    3f76:	f007 f8c0 	bl	b0fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f7e:	2001      	movs	r0, #1
    3f80:	f007 b8ae 	b.w	b0e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3f84:	40001ffc 	.word	0x40001ffc
    3f88:	4807      	ldr	r0, [pc, #28]	; (3fa8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3f8a:	b510      	push	{r4, lr}
    3f8c:	2101      	movs	r1, #1
    3f8e:	6041      	str	r1, [r0, #4]
    3f90:	1e89      	subs	r1, r1, #2
    3f92:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3f96:	200c      	movs	r0, #12
    3f98:	f007 f8af 	bl	b0fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3fa0:	200c      	movs	r0, #12
    3fa2:	f007 b89d 	b.w	b0e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3fa6:	0000      	.short	0x0000
    3fa8:	4000c000 	.word	0x4000c000

00003fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3fac:	b50e      	push	{r1, r2, r3, lr}
    3fae:	b672      	cpsid	i
    3fb0:	4a0f      	ldr	r2, [pc, #60]	; (3ff0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3fb2:	6855      	ldr	r5, [r2, #4]
    3fb4:	b1d5      	cbz	r5, 3fec <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    3fb6:	2200      	movs	r2, #0
    3fb8:	4603      	mov	r3, r0
    3fba:	466e      	mov	r6, sp
    3fbc:	240a      	movs	r4, #10
    3fbe:	e003      	b.n	3fc8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3fc0:	fbb0 f0f4 	udiv	r0, r0, r4
    3fc4:	1c52      	adds	r2, r2, #1
    3fc6:	b2d2      	uxtb	r2, r2
    3fc8:	2800      	cmp	r0, #0
    3fca:	d1f9      	bne.n	3fc0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3fcc:	54b0      	strb	r0, [r6, r2]
    3fce:	e009      	b.n	3fe4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3fd0:	fbb3 f0f4 	udiv	r0, r3, r4
    3fd4:	fb04 3010 	mls	r0, r4, r0, r3
    3fd8:	fbb3 f3f4 	udiv	r3, r3, r4
    3fdc:	1e52      	subs	r2, r2, #1
    3fde:	b2d2      	uxtb	r2, r2
    3fe0:	3030      	adds	r0, #48	; 0x30
    3fe2:	54b0      	strb	r0, [r6, r2]
    3fe4:	2a00      	cmp	r2, #0
    3fe6:	d1f3      	bne.n	3fd0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3fe8:	4630      	mov	r0, r6
    3fea:	47a8      	blx	r5
    3fec:	f7ff ffa0 	bl	3f30 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3ff0:	2000004c 	.word	0x2000004c

00003ff4 <mpsl_init>:
    3ff4:	b570      	push	{r4, r5, r6, lr}
    3ff6:	4c17      	ldr	r4, [pc, #92]	; (4054 <mpsl_init+0x60>)
    3ff8:	4606      	mov	r6, r0
    3ffa:	460d      	mov	r5, r1
    3ffc:	7860      	ldrb	r0, [r4, #1]
    3ffe:	b110      	cbz	r0, 4006 <mpsl_init+0x12>
    4000:	f04f 30ff 	mov.w	r0, #4294967295
    4004:	bd70      	pop	{r4, r5, r6, pc}
    4006:	b906      	cbnz	r6, 400a <mpsl_init+0x16>
    4008:	4e13      	ldr	r6, [pc, #76]	; (4058 <mpsl_init+0x64>)
    400a:	6062      	str	r2, [r4, #4]
    400c:	7025      	strb	r5, [r4, #0]
    400e:	f7ff ffab 	bl	3f68 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4012:	f7ff ffb9 	bl	3f88 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4016:	4630      	mov	r0, r6
    4018:	f7ff fe9c 	bl	3d54 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    401c:	0006      	movs	r6, r0
    401e:	d1f1      	bne.n	4004 <mpsl_init+0x10>
    4020:	f7fe ff00 	bl	2e24 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4024:	f7ff fef6 	bl	3e14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4028:	f006 ffb4 	bl	af94 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    402c:	4628      	mov	r0, r5
    402e:	f007 f857 	bl	b0e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4032:	2001      	movs	r0, #1
    4034:	2d00      	cmp	r5, #0
    4036:	db09      	blt.n	404c <mpsl_init+0x58>
    4038:	f005 011f 	and.w	r1, r5, #31
    403c:	fa00 f101 	lsl.w	r1, r0, r1
    4040:	096a      	lsrs	r2, r5, #5
    4042:	0092      	lsls	r2, r2, #2
    4044:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4048:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    404c:	7060      	strb	r0, [r4, #1]
    404e:	4630      	mov	r0, r6
    4050:	bd70      	pop	{r4, r5, r6, pc}
    4052:	0000      	.short	0x0000
    4054:	2000004c 	.word	0x2000004c
    4058:	0000b11c 	.word	0x0000b11c

0000405c <mpsl_is_initialized>:
    405c:	4801      	ldr	r0, [pc, #4]	; (4064 <mpsl_is_initialized+0x8>)
    405e:	7840      	ldrb	r0, [r0, #1]
    4060:	4770      	bx	lr
    4062:	0000      	.short	0x0000
    4064:	2000004c 	.word	0x2000004c

00004068 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4068:	4807      	ldr	r0, [pc, #28]	; (4088 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    406a:	f990 0000 	ldrsb.w	r0, [r0]
    406e:	2800      	cmp	r0, #0
    4070:	db09      	blt.n	4086 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4072:	f000 021f 	and.w	r2, r0, #31
    4076:	2101      	movs	r1, #1
    4078:	4091      	lsls	r1, r2
    407a:	0940      	lsrs	r0, r0, #5
    407c:	0080      	lsls	r0, r0, #2
    407e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4082:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4086:	4770      	bx	lr
    4088:	2000004c 	.word	0x2000004c

0000408c <mpsl_temperature_get>:
    408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4090:	2601      	movs	r6, #1
    4092:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4096:	0331      	lsls	r1, r6, #12
    4098:	f04f 0800 	mov.w	r8, #0
    409c:	4640      	mov	r0, r8
    409e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    40a2:	f3bf 8f4f 	dsb	sy
    40a6:	f3bf 8f6f 	isb	sy
    40aa:	4c16      	ldr	r4, [pc, #88]	; (4104 <mpsl_temperature_get+0x78>)
    40ac:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    40b0:	200c      	movs	r0, #12
    40b2:	f007 f841 	bl	b138 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40b6:	4d14      	ldr	r5, [pc, #80]	; (4108 <mpsl_temperature_get+0x7c>)
    40b8:	6828      	ldr	r0, [r5, #0]
    40ba:	43c0      	mvns	r0, r0
    40bc:	f340 1700 	sbfx	r7, r0, #4, #1
    40c0:	6828      	ldr	r0, [r5, #0]
    40c2:	f040 0010 	orr.w	r0, r0, #16
    40c6:	6028      	str	r0, [r5, #0]
    40c8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    40cc:	6026      	str	r6, [r4, #0]
    40ce:	1c7f      	adds	r7, r7, #1
    40d0:	e002      	b.n	40d8 <mpsl_temperature_get+0x4c>
    40d2:	bf00      	nop
    40d4:	f000 f890 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40d8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    40dc:	2800      	cmp	r0, #0
    40de:	d0f9      	beq.n	40d4 <mpsl_temperature_get+0x48>
    40e0:	b91f      	cbnz	r7, 40ea <mpsl_temperature_get+0x5e>
    40e2:	6828      	ldr	r0, [r5, #0]
    40e4:	f020 0010 	bic.w	r0, r0, #16
    40e8:	6028      	str	r0, [r5, #0]
    40ea:	4808      	ldr	r0, [pc, #32]	; (410c <mpsl_temperature_get+0x80>)
    40ec:	6805      	ldr	r5, [r0, #0]
    40ee:	6066      	str	r6, [r4, #4]
    40f0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    40f4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    40f8:	200c      	movs	r0, #12
    40fa:	f007 f81d 	bl	b138 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    40fe:	4628      	mov	r0, r5
    4100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4104:	4000c000 	.word	0x4000c000
    4108:	e000ed10 	.word	0xe000ed10
    410c:	4000c508 	.word	0x4000c508

00004110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4110:	b510      	push	{r4, lr}
    4112:	4602      	mov	r2, r0
    4114:	2005      	movs	r0, #5
    4116:	490c      	ldr	r1, [pc, #48]	; (4148 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4118:	e004      	b.n	4124 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    411a:	bf00      	nop
    411c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4120:	791b      	ldrb	r3, [r3, #4]
    4122:	b133      	cbz	r3, 4132 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4124:	1e40      	subs	r0, r0, #1
    4126:	b2c0      	uxtb	r0, r0
    4128:	d2f8      	bcs.n	411c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    412a:	2148      	movs	r1, #72	; 0x48
    412c:	2069      	movs	r0, #105	; 0x69
    412e:	f7ff ff3d 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4132:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4136:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    413a:	2200      	movs	r2, #0
    413c:	714a      	strb	r2, [r1, #5]
    413e:	718a      	strb	r2, [r1, #6]
    4140:	2201      	movs	r2, #1
    4142:	710a      	strb	r2, [r1, #4]
    4144:	bd10      	pop	{r4, pc}
    4146:	0000      	.short	0x0000
    4148:	20000b98 	.word	0x20000b98

0000414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    414c:	b510      	push	{r4, lr}
    414e:	2805      	cmp	r0, #5
    4150:	d301      	bcc.n	4156 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4152:	2158      	movs	r1, #88	; 0x58
    4154:	e006      	b.n	4164 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4156:	490a      	ldr	r1, [pc, #40]	; (4180 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4158:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    415c:	7901      	ldrb	r1, [r0, #4]
    415e:	2901      	cmp	r1, #1
    4160:	d003      	beq.n	416a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4162:	2159      	movs	r1, #89	; 0x59
    4164:	2069      	movs	r0, #105	; 0x69
    4166:	f7ff ff21 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    416a:	7941      	ldrb	r1, [r0, #5]
    416c:	7982      	ldrb	r2, [r0, #6]
    416e:	1c49      	adds	r1, r1, #1
    4170:	b2c9      	uxtb	r1, r1
    4172:	428a      	cmp	r2, r1
    4174:	d000      	beq.n	4178 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4176:	7141      	strb	r1, [r0, #5]
    4178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    417c:	f7ff bf74 	b.w	4068 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4180:	20000b98 	.word	0x20000b98

00004184 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4184:	b570      	push	{r4, r5, r6, lr}
    4186:	2505      	movs	r5, #5
    4188:	4e0e      	ldr	r6, [pc, #56]	; (41c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    418a:	4c0f      	ldr	r4, [pc, #60]	; (41c8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    418c:	e016      	b.n	41bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    418e:	7821      	ldrb	r1, [r4, #0]
    4190:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4194:	7902      	ldrb	r2, [r0, #4]
    4196:	2a01      	cmp	r2, #1
    4198:	d108      	bne.n	41ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    419a:	7942      	ldrb	r2, [r0, #5]
    419c:	7983      	ldrb	r3, [r0, #6]
    419e:	429a      	cmp	r2, r3
    41a0:	d004      	beq.n	41ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    41a2:	7942      	ldrb	r2, [r0, #5]
    41a4:	7182      	strb	r2, [r0, #6]
    41a6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    41aa:	4780      	blx	r0
    41ac:	7820      	ldrb	r0, [r4, #0]
    41ae:	1c40      	adds	r0, r0, #1
    41b0:	b2c0      	uxtb	r0, r0
    41b2:	7020      	strb	r0, [r4, #0]
    41b4:	2805      	cmp	r0, #5
    41b6:	d301      	bcc.n	41bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    41b8:	2000      	movs	r0, #0
    41ba:	7020      	strb	r0, [r4, #0]
    41bc:	1e6d      	subs	r5, r5, #1
    41be:	b2ed      	uxtb	r5, r5
    41c0:	d2e5      	bcs.n	418e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    41c2:	bd70      	pop	{r4, r5, r6, pc}
    41c4:	20000b98 	.word	0x20000b98
    41c8:	2000026d 	.word	0x2000026d

000041cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    41cc:	b500      	push	{lr}
    41ce:	f006 ffe2 	bl	b196 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    41d2:	b940      	cbnz	r0, 41e6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41d4:	f006 ffe9 	bl	b1aa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    41d8:	b928      	cbnz	r0, 41e6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41da:	f006 fffd 	bl	b1d8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    41de:	b910      	cbnz	r0, 41e6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    41e0:	f007 f80e 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41e4:	b108      	cbz	r0, 41ea <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    41e6:	4802      	ldr	r0, [pc, #8]	; (41f0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    41e8:	bd00      	pop	{pc}
    41ea:	4802      	ldr	r0, [pc, #8]	; (41f4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    41ec:	bd00      	pop	{pc}
    41ee:	0000      	.short	0x0000
    41f0:	4000050c 	.word	0x4000050c
    41f4:	4001e700 	.word	0x4001e700

000041f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    41f8:	b510      	push	{r4, lr}
    41fa:	f007 f801 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41fe:	b330      	cbz	r0, 424e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4200:	f3ef 8010 	mrs	r0, PRIMASK
    4204:	b1c8      	cbz	r0, 423a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4206:	2100      	movs	r1, #0
    4208:	b672      	cpsid	i
    420a:	4812      	ldr	r0, [pc, #72]	; (4254 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    420c:	6802      	ldr	r2, [r0, #0]
    420e:	6803      	ldr	r3, [r0, #0]
    4210:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4214:	f043 0310 	orr.w	r3, r3, #16
    4218:	6003      	str	r3, [r0, #0]
    421a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    421e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4222:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4226:	431c      	orrs	r4, r3
    4228:	d000      	beq.n	422c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    422a:	bf40      	sev
    422c:	bf20      	wfe
    422e:	bf00      	nop
    4230:	bf00      	nop
    4232:	bf00      	nop
    4234:	bf00      	nop
    4236:	b112      	cbz	r2, 423e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4238:	e005      	b.n	4246 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    423a:	2101      	movs	r1, #1
    423c:	e7e4      	b.n	4208 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    423e:	6802      	ldr	r2, [r0, #0]
    4240:	f022 0210 	bic.w	r2, r2, #16
    4244:	6002      	str	r2, [r0, #0]
    4246:	2900      	cmp	r1, #0
    4248:	d000      	beq.n	424c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    424a:	b662      	cpsie	i
    424c:	bd10      	pop	{r4, pc}
    424e:	bf20      	wfe
    4250:	bd10      	pop	{r4, pc}
    4252:	0000      	.short	0x0000
    4254:	e000ed10 	.word	0xe000ed10

00004258 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4258:	0000b471 0000b48d 0000b47b 0000b487     q.......{.......
    4268:	0000b475 0000b46f 0000b46d 0000b493     u...o...m.......
    4278:	0000b481 0000b467 0000b45f 0000b463     ....g..._...c...
    4288:	0000b459                                Y...

0000428c <mpsl_fem_disable>:
    428c:	4801      	ldr	r0, [pc, #4]	; (4294 <mpsl_fem_disable+0x8>)
    428e:	6800      	ldr	r0, [r0, #0]
    4290:	6800      	ldr	r0, [r0, #0]
    4292:	4700      	bx	r0
    4294:	20000054 	.word	0x20000054

00004298 <mpsl_fem_lna_configuration_clear>:
    4298:	4801      	ldr	r0, [pc, #4]	; (42a0 <mpsl_fem_lna_configuration_clear+0x8>)
    429a:	6800      	ldr	r0, [r0, #0]
    429c:	6900      	ldr	r0, [r0, #16]
    429e:	4700      	bx	r0
    42a0:	20000054 	.word	0x20000054

000042a4 <mpsl_fem_lna_configuration_set>:
    42a4:	4a01      	ldr	r2, [pc, #4]	; (42ac <mpsl_fem_lna_configuration_set+0x8>)
    42a6:	6812      	ldr	r2, [r2, #0]
    42a8:	6892      	ldr	r2, [r2, #8]
    42aa:	4710      	bx	r2
    42ac:	20000054 	.word	0x20000054

000042b0 <mpsl_fem_pa_configuration_clear>:
    42b0:	4801      	ldr	r0, [pc, #4]	; (42b8 <mpsl_fem_pa_configuration_clear+0x8>)
    42b2:	6800      	ldr	r0, [r0, #0]
    42b4:	68c0      	ldr	r0, [r0, #12]
    42b6:	4700      	bx	r0
    42b8:	20000054 	.word	0x20000054

000042bc <mpsl_fem_pa_configuration_set>:
    42bc:	4a01      	ldr	r2, [pc, #4]	; (42c4 <mpsl_fem_pa_configuration_set+0x8>)
    42be:	6812      	ldr	r2, [r2, #0]
    42c0:	6852      	ldr	r2, [r2, #4]
    42c2:	4710      	bx	r2
    42c4:	20000054 	.word	0x20000054

000042c8 <mpsl_fem_pa_is_configured>:
    42c8:	4901      	ldr	r1, [pc, #4]	; (42d0 <mpsl_fem_pa_is_configured+0x8>)
    42ca:	6809      	ldr	r1, [r1, #0]
    42cc:	6a09      	ldr	r1, [r1, #32]
    42ce:	4708      	bx	r1
    42d0:	20000054 	.word	0x20000054

000042d4 <mpsl_fem_device_config_254_apply_get>:
    42d4:	4801      	ldr	r0, [pc, #4]	; (42dc <mpsl_fem_device_config_254_apply_get+0x8>)
    42d6:	7800      	ldrb	r0, [r0, #0]
    42d8:	4770      	bx	lr
    42da:	0000      	.short	0x0000
    42dc:	2000026e 	.word	0x2000026e
    42e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    42e2:	4c17      	ldr	r4, [pc, #92]	; (4340 <mpsl_fem_device_config_254_apply_get+0x6c>)
    42e4:	7a20      	ldrb	r0, [r4, #8]
    42e6:	2802      	cmp	r0, #2
    42e8:	d200      	bcs.n	42ec <mpsl_fem_device_config_254_apply_get+0x18>
    42ea:	2002      	movs	r0, #2
    42ec:	f88d 0001 	strb.w	r0, [sp, #1]
    42f0:	79e0      	ldrb	r0, [r4, #7]
    42f2:	2803      	cmp	r0, #3
    42f4:	d200      	bcs.n	42f8 <mpsl_fem_device_config_254_apply_get+0x24>
    42f6:	2003      	movs	r0, #3
    42f8:	f88d 0000 	strb.w	r0, [sp]
    42fc:	79a0      	ldrb	r0, [r4, #6]
    42fe:	f8ad 0004 	strh.w	r0, [sp, #4]
    4302:	7960      	ldrb	r0, [r4, #5]
    4304:	f8ad 0002 	strh.w	r0, [sp, #2]
    4308:	4668      	mov	r0, sp
    430a:	f005 fb5b 	bl	99c4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    430e:	b108      	cbz	r0, 4314 <mpsl_fem_device_config_254_apply_get+0x40>
    4310:	2184      	movs	r1, #132	; 0x84
    4312:	e010      	b.n	4336 <mpsl_fem_device_config_254_apply_get+0x62>
    4314:	68e0      	ldr	r0, [r4, #12]
    4316:	9002      	str	r0, [sp, #8]
    4318:	a802      	add	r0, sp, #8
    431a:	f005 fb69 	bl	99f0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    431e:	b108      	cbz	r0, 4324 <mpsl_fem_device_config_254_apply_get+0x50>
    4320:	2188      	movs	r1, #136	; 0x88
    4322:	e008      	b.n	4336 <mpsl_fem_device_config_254_apply_get+0x62>
    4324:	4807      	ldr	r0, [pc, #28]	; (4344 <mpsl_fem_device_config_254_apply_get+0x70>)
    4326:	6800      	ldr	r0, [r0, #0]
    4328:	9003      	str	r0, [sp, #12]
    432a:	a803      	add	r0, sp, #12
    432c:	f009 f8ef 	bl	d50e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4330:	2800      	cmp	r0, #0
    4332:	d003      	beq.n	433c <mpsl_fem_device_config_254_apply_get+0x68>
    4334:	218c      	movs	r1, #140	; 0x8c
    4336:	2003      	movs	r0, #3
    4338:	f000 f918 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    433c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    433e:	0000      	.short	0x0000
    4340:	20000bc0 	.word	0x20000bc0
    4344:	000045f8 	.word	0x000045f8
    4348:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    434a:	4604      	mov	r4, r0
    434c:	460e      	mov	r6, r1
    434e:	f100 0003 	add.w	r0, r0, #3
    4352:	f020 0003 	bic.w	r0, r0, #3
    4356:	f04f 0100 	mov.w	r1, #0
    435a:	e9cd 0100 	strd	r0, r1, [sp]
    435e:	7831      	ldrb	r1, [r6, #0]
    4360:	0015      	movs	r5, r2
    4362:	f88d 1005 	strb.w	r1, [sp, #5]
    4366:	d000      	beq.n	436a <mpsl_fem_device_config_254_apply_get+0x96>
    4368:	2000      	movs	r0, #0
    436a:	a901      	add	r1, sp, #4
    436c:	f000 fa8e 	bl	488c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    4370:	9900      	ldr	r1, [sp, #0]
    4372:	4408      	add	r0, r1
    4374:	490c      	ldr	r1, [pc, #48]	; (43a8 <mpsl_fem_device_config_254_apply_get+0xd4>)
    4376:	9000      	str	r0, [sp, #0]
    4378:	78c9      	ldrb	r1, [r1, #3]
    437a:	b149      	cbz	r1, 4390 <mpsl_fem_device_config_254_apply_get+0xbc>
    437c:	7c31      	ldrb	r1, [r6, #16]
    437e:	b139      	cbz	r1, 4390 <mpsl_fem_device_config_254_apply_get+0xbc>
    4380:	2225      	movs	r2, #37	; 0x25
    4382:	b105      	cbz	r5, 4386 <mpsl_fem_device_config_254_apply_get+0xb2>
    4384:	2000      	movs	r0, #0
    4386:	f000 fc03 	bl	4b90 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    438a:	9900      	ldr	r1, [sp, #0]
    438c:	4408      	add	r0, r1
    438e:	9000      	str	r0, [sp, #0]
    4390:	462a      	mov	r2, r5
    4392:	4631      	mov	r1, r6
    4394:	4668      	mov	r0, sp
    4396:	f007 f87e 	bl	b496 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    439a:	9800      	ldr	r0, [sp, #0]
    439c:	1dc0      	adds	r0, r0, #7
    439e:	f020 0007 	bic.w	r0, r0, #7
    43a2:	9000      	str	r0, [sp, #0]
    43a4:	1b00      	subs	r0, r0, r4
    43a6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    43a8:	20000058 	.word	0x20000058

000043ac <sdc_build_revision_get>:
    43ac:	b510      	push	{r4, lr}
    43ae:	b128      	cbz	r0, 43bc <sdc_build_revision_get+0x10>
    43b0:	2214      	movs	r2, #20
    43b2:	4904      	ldr	r1, [pc, #16]	; (43c4 <sdc_build_revision_get+0x18>)
    43b4:	f006 ff76 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    43b8:	2000      	movs	r0, #0
    43ba:	bd10      	pop	{r4, pc}
    43bc:	f06f 0015 	mvn.w	r0, #21
    43c0:	bd10      	pop	{r4, pc}
    43c2:	0000      	.short	0x0000
    43c4:	00004614 	.word	0x00004614

000043c8 <sdc_cfg_set>:
    43c8:	b570      	push	{r4, r5, r6, lr}
    43ca:	0003      	movs	r3, r0
    43cc:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    43d0:	d103      	bne.n	43da <sdc_cfg_set+0x12>
    43d2:	4c2a      	ldr	r4, [pc, #168]	; (447c <sdc_cfg_set+0xb4>)
    43d4:	7863      	ldrb	r3, [r4, #1]
    43d6:	b10b      	cbz	r3, 43dc <sdc_cfg_set+0x14>
    43d8:	1180      	asrs	r0, r0, #6
    43da:	bd70      	pop	{r4, r5, r6, pc}
    43dc:	b319      	cbz	r1, 4426 <sdc_cfg_set+0x5e>
    43de:	f06f 0515 	mvn.w	r5, #21
    43e2:	b38a      	cbz	r2, 4448 <sdc_cfg_set+0x80>
    43e4:	4b26      	ldr	r3, [pc, #152]	; (4480 <sdc_cfg_set+0xb8>)
    43e6:	290c      	cmp	r1, #12
    43e8:	d243      	bcs.n	4472 <sdc_cfg_set+0xaa>
    43ea:	e8df f001 	tbb	[pc, r1]
    43ee:	0642      	.short	0x0642
    43f0:	13100c09 	.word	0x13100c09
    43f4:	2818251d 	.word	0x2818251d
    43f8:	332e      	.short	0x332e
    43fa:	7810      	ldrb	r0, [r2, #0]
    43fc:	7018      	strb	r0, [r3, #0]
    43fe:	e02d      	b.n	445c <sdc_cfg_set+0x94>
    4400:	7810      	ldrb	r0, [r2, #0]
    4402:	7058      	strb	r0, [r3, #1]
    4404:	e02a      	b.n	445c <sdc_cfg_set+0x94>
    4406:	6810      	ldr	r0, [r2, #0]
    4408:	f8c3 0005 	str.w	r0, [r3, #5]
    440c:	e026      	b.n	445c <sdc_cfg_set+0x94>
    440e:	6810      	ldr	r0, [r2, #0]
    4410:	60d8      	str	r0, [r3, #12]
    4412:	e023      	b.n	445c <sdc_cfg_set+0x94>
    4414:	7811      	ldrb	r1, [r2, #0]
    4416:	2900      	cmp	r1, #0
    4418:	d1df      	bne.n	43da <sdc_cfg_set+0x12>
    441a:	7099      	strb	r1, [r3, #2]
    441c:	e01e      	b.n	445c <sdc_cfg_set+0x94>
    441e:	7811      	ldrb	r1, [r2, #0]
    4420:	2900      	cmp	r1, #0
    4422:	d1da      	bne.n	43da <sdc_cfg_set+0x12>
    4424:	70d9      	strb	r1, [r3, #3]
    4426:	e019      	b.n	445c <sdc_cfg_set+0x94>
    4428:	78e0      	ldrb	r0, [r4, #3]
    442a:	b110      	cbz	r0, 4432 <sdc_cfg_set+0x6a>
    442c:	7810      	ldrb	r0, [r2, #0]
    442e:	2802      	cmp	r0, #2
    4430:	d31f      	bcc.n	4472 <sdc_cfg_set+0xaa>
    4432:	7810      	ldrb	r0, [r2, #0]
    4434:	7418      	strb	r0, [r3, #16]
    4436:	e011      	b.n	445c <sdc_cfg_set+0x94>
    4438:	8810      	ldrh	r0, [r2, #0]
    443a:	8258      	strh	r0, [r3, #18]
    443c:	e00e      	b.n	445c <sdc_cfg_set+0x94>
    443e:	7811      	ldrb	r1, [r2, #0]
    4440:	2900      	cmp	r1, #0
    4442:	d1ca      	bne.n	43da <sdc_cfg_set+0x12>
    4444:	7119      	strb	r1, [r3, #4]
    4446:	e009      	b.n	445c <sdc_cfg_set+0x94>
    4448:	e013      	b.n	4472 <sdc_cfg_set+0xaa>
    444a:	7810      	ldrb	r0, [r2, #0]
    444c:	2802      	cmp	r0, #2
    444e:	d310      	bcc.n	4472 <sdc_cfg_set+0xaa>
    4450:	7518      	strb	r0, [r3, #20]
    4452:	e003      	b.n	445c <sdc_cfg_set+0x94>
    4454:	7811      	ldrb	r1, [r2, #0]
    4456:	2900      	cmp	r1, #0
    4458:	d1bf      	bne.n	43da <sdc_cfg_set+0x12>
    445a:	7559      	strb	r1, [r3, #21]
    445c:	2201      	movs	r2, #1
    445e:	4908      	ldr	r1, [pc, #32]	; (4480 <sdc_cfg_set+0xb8>)
    4460:	2000      	movs	r0, #0
    4462:	f7ff ff71 	bl	4348 <mpsl_fem_device_config_254_apply_get+0x74>
    4466:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    446a:	db04      	blt.n	4476 <sdc_cfg_set+0xae>
    446c:	f06f 000b 	mvn.w	r0, #11
    4470:	bd70      	pop	{r4, r5, r6, pc}
    4472:	4628      	mov	r0, r5
    4474:	bd70      	pop	{r4, r5, r6, pc}
    4476:	2101      	movs	r1, #1
    4478:	70a1      	strb	r1, [r4, #2]
    447a:	bd70      	pop	{r4, r5, r6, pc}
    447c:	20000058 	.word	0x20000058
    4480:	20000bc0 	.word	0x20000bc0

00004484 <sdc_enable>:
    4484:	b570      	push	{r4, r5, r6, lr}
    4486:	460c      	mov	r4, r1
    4488:	0005      	movs	r5, r0
    448a:	d019      	beq.n	44c0 <sdc_enable+0x3c>
    448c:	b1c4      	cbz	r4, 44c0 <sdc_enable+0x3c>
    448e:	f000 f8e7 	bl	4660 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4492:	b1c0      	cbz	r0, 44c6 <sdc_enable+0x42>
    4494:	4628      	mov	r0, r5
    4496:	f7ff fe3b 	bl	4110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    449a:	4d0c      	ldr	r5, [pc, #48]	; (44cc <sdc_enable+0x48>)
    449c:	2200      	movs	r2, #0
    449e:	490c      	ldr	r1, [pc, #48]	; (44d0 <sdc_enable+0x4c>)
    44a0:	7028      	strb	r0, [r5, #0]
    44a2:	4620      	mov	r0, r4
    44a4:	f7ff ff50 	bl	4348 <mpsl_fem_device_config_254_apply_get+0x74>
    44a8:	f009 fadf 	bl	da6a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    44ac:	2100      	movs	r1, #0
    44ae:	7828      	ldrb	r0, [r5, #0]
    44b0:	f005 fbe6 	bl	9c80 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    44b4:	f7ff ff14 	bl	42e0 <mpsl_fem_device_config_254_apply_get+0xc>
    44b8:	2001      	movs	r0, #1
    44ba:	7068      	strb	r0, [r5, #1]
    44bc:	2000      	movs	r0, #0
    44be:	bd70      	pop	{r4, r5, r6, pc}
    44c0:	f06f 0015 	mvn.w	r0, #21
    44c4:	bd70      	pop	{r4, r5, r6, pc}
    44c6:	f04f 30ff 	mov.w	r0, #4294967295
    44ca:	bd70      	pop	{r4, r5, r6, pc}
    44cc:	20000058 	.word	0x20000058
    44d0:	20000bc0 	.word	0x20000bc0

000044d4 <sdc_init>:
    44d4:	b530      	push	{r4, r5, lr}
    44d6:	b087      	sub	sp, #28
    44d8:	0005      	movs	r5, r0
    44da:	d00c      	beq.n	44f6 <sdc_init+0x22>
    44dc:	f7ff fdbe 	bl	405c <mpsl_is_initialized>
    44e0:	f04f 34ff 	mov.w	r4, #4294967295
    44e4:	b120      	cbz	r0, 44f0 <sdc_init+0x1c>
    44e6:	f7ff fc87 	bl	3df8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    44ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    44ee:	d905      	bls.n	44fc <sdc_init+0x28>
    44f0:	4620      	mov	r0, r4
    44f2:	b007      	add	sp, #28
    44f4:	bd30      	pop	{r4, r5, pc}
    44f6:	f06f 0015 	mvn.w	r0, #21
    44fa:	e7fa      	b.n	44f2 <sdc_init+0x1e>
    44fc:	4c15      	ldr	r4, [pc, #84]	; (4554 <sdc_init+0x80>)
    44fe:	4816      	ldr	r0, [pc, #88]	; (4558 <sdc_init+0x84>)
    4500:	6065      	str	r5, [r4, #4]
    4502:	f000 f9a1 	bl	4848 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4506:	2000      	movs	r0, #0
    4508:	7060      	strb	r0, [r4, #1]
    450a:	70a0      	strb	r0, [r4, #2]
    450c:	70e0      	strb	r0, [r4, #3]
    450e:	4601      	mov	r1, r0
    4510:	2218      	movs	r2, #24
    4512:	4668      	mov	r0, sp
    4514:	f006 ff40 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4518:	2218      	movs	r2, #24
    451a:	4910      	ldr	r1, [pc, #64]	; (455c <sdc_init+0x88>)
    451c:	4668      	mov	r0, sp
    451e:	f006 fec1 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4522:	2218      	movs	r2, #24
    4524:	4669      	mov	r1, sp
    4526:	480e      	ldr	r0, [pc, #56]	; (4560 <sdc_init+0x8c>)
    4528:	f006 febc 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    452c:	f3ef 8410 	mrs	r4, PRIMASK
    4530:	b672      	cpsid	i
    4532:	480c      	ldr	r0, [pc, #48]	; (4564 <sdc_init+0x90>)
    4534:	f06f 010c 	mvn.w	r1, #12
    4538:	f000 fbcc 	bl	4cd4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    453c:	480a      	ldr	r0, [pc, #40]	; (4568 <sdc_init+0x94>)
    453e:	f000 fc99 	bl	4e74 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4542:	b118      	cbz	r0, 454c <sdc_init+0x78>
    4544:	219a      	movs	r1, #154	; 0x9a
    4546:	2003      	movs	r0, #3
    4548:	f000 f810 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    454c:	b904      	cbnz	r4, 4550 <sdc_init+0x7c>
    454e:	b662      	cpsie	i
    4550:	2000      	movs	r0, #0
    4552:	e7ce      	b.n	44f2 <sdc_init+0x1e>
    4554:	20000058 	.word	0x20000058
    4558:	000042e1 	.word	0x000042e1
    455c:	000045fc 	.word	0x000045fc
    4560:	20000bc0 	.word	0x20000bc0
    4564:	4000c000 	.word	0x4000c000
    4568:	0000468d 	.word	0x0000468d

0000456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    456c:	b50e      	push	{r1, r2, r3, lr}
    456e:	b672      	cpsid	i
    4570:	4a15      	ldr	r2, [pc, #84]	; (45c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4572:	6855      	ldr	r5, [r2, #4]
    4574:	b1d5      	cbz	r5, 45ac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4576:	2200      	movs	r2, #0
    4578:	4603      	mov	r3, r0
    457a:	466e      	mov	r6, sp
    457c:	240a      	movs	r4, #10
    457e:	e003      	b.n	4588 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4580:	fbb0 f0f4 	udiv	r0, r0, r4
    4584:	1c52      	adds	r2, r2, #1
    4586:	b2d2      	uxtb	r2, r2
    4588:	2800      	cmp	r0, #0
    458a:	d1f9      	bne.n	4580 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    458c:	54b0      	strb	r0, [r6, r2]
    458e:	e009      	b.n	45a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4590:	fbb3 f0f4 	udiv	r0, r3, r4
    4594:	fb04 3010 	mls	r0, r4, r0, r3
    4598:	fbb3 f3f4 	udiv	r3, r3, r4
    459c:	1e52      	subs	r2, r2, #1
    459e:	b2d2      	uxtb	r2, r2
    45a0:	3030      	adds	r0, #48	; 0x30
    45a2:	54b0      	strb	r0, [r6, r2]
    45a4:	2a00      	cmp	r2, #0
    45a6:	d1f3      	bne.n	4590 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    45a8:	4630      	mov	r0, r6
    45aa:	47a8      	blx	r5
    45ac:	f3bf 8f4f 	dsb	sy
    45b0:	4806      	ldr	r0, [pc, #24]	; (45cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    45b2:	6801      	ldr	r1, [r0, #0]
    45b4:	4a06      	ldr	r2, [pc, #24]	; (45d0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    45b6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    45ba:	4311      	orrs	r1, r2
    45bc:	6001      	str	r1, [r0, #0]
    45be:	f3bf 8f4f 	dsb	sy
    45c2:	bf00      	nop
    45c4:	e7fd      	b.n	45c2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    45c6:	0000      	.short	0x0000
    45c8:	20000058 	.word	0x20000058
    45cc:	e000ed0c 	.word	0xe000ed0c
    45d0:	05fa0004 	.word	0x05fa0004

000045d4 <sdc_support_scan>:
    45d4:	4807      	ldr	r0, [pc, #28]	; (45f4 <sdc_support_scan+0x20>)
    45d6:	b510      	push	{r4, lr}
    45d8:	7881      	ldrb	r1, [r0, #2]
    45da:	7842      	ldrb	r2, [r0, #1]
    45dc:	4311      	orrs	r1, r2
    45de:	d002      	beq.n	45e6 <sdc_support_scan+0x12>
    45e0:	f04f 30ff 	mov.w	r0, #4294967295
    45e4:	bd10      	pop	{r4, pc}
    45e6:	2101      	movs	r1, #1
    45e8:	70c1      	strb	r1, [r0, #3]
    45ea:	f005 fb6d 	bl	9cc8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    45ee:	2000      	movs	r0, #0
    45f0:	bd10      	pop	{r4, pc}
    45f2:	0000      	.short	0x0000
    45f4:	20000058 	.word	0x20000058
    45f8:	00000001 	.word	0x00000001
    45fc:	00010101 	.word	0x00010101
    4600:	031b1b00 	.word	0x031b1b00
    4604:	00000002 	.word	0x00000002
    4608:	00001d4c 	.word	0x00001d4c
    460c:	001f0003 	.word	0x001f0003
    4610:	00000000 	.word	0x00000000
    4614:	66c5e70e 	.word	0x66c5e70e
    4618:	ac3c1867 	.word	0xac3c1867
    461c:	81ccd2b3 	.word	0x81ccd2b3
    4620:	c0f1dca3 	.word	0xc0f1dca3
    4624:	220236c0 	.word	0x220236c0

00004628 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4628:	4a05      	ldr	r2, [pc, #20]	; (4640 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    462a:	b510      	push	{r4, lr}
    462c:	6852      	ldr	r2, [r2, #4]
    462e:	b112      	cbz	r2, 4636 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4634:	4710      	bx	r2
    4636:	2183      	movs	r1, #131	; 0x83
    4638:	2004      	movs	r0, #4
    463a:	f7ff ff97 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    463e:	0000      	.short	0x0000
    4640:	20000bd8 	.word	0x20000bd8

00004644 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4644:	4a05      	ldr	r2, [pc, #20]	; (465c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4646:	b510      	push	{r4, lr}
    4648:	6892      	ldr	r2, [r2, #8]
    464a:	b112      	cbz	r2, 4652 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    464c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4650:	4710      	bx	r2
    4652:	2189      	movs	r1, #137	; 0x89
    4654:	2004      	movs	r0, #4
    4656:	f7ff ff89 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    465a:	0000      	.short	0x0000
    465c:	20000bd8 	.word	0x20000bd8

00004660 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4660:	4805      	ldr	r0, [pc, #20]	; (4678 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4662:	6801      	ldr	r1, [r0, #0]
    4664:	b129      	cbz	r1, 4672 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4666:	6841      	ldr	r1, [r0, #4]
    4668:	b119      	cbz	r1, 4672 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    466a:	6880      	ldr	r0, [r0, #8]
    466c:	b108      	cbz	r0, 4672 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    466e:	2001      	movs	r0, #1
    4670:	4770      	bx	lr
    4672:	2000      	movs	r0, #0
    4674:	4770      	bx	lr
    4676:	0000      	.short	0x0000
    4678:	20000bd8 	.word	0x20000bd8

0000467c <sdc_rand_source_register>:
    467c:	4902      	ldr	r1, [pc, #8]	; (4688 <sdc_rand_source_register+0xc>)
    467e:	c80d      	ldmia	r0, {r0, r2, r3}
    4680:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4684:	2000      	movs	r0, #0
    4686:	4770      	bx	lr
    4688:	20000bd8 	.word	0x20000bd8

0000468c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    468e:	4c12      	ldr	r4, [pc, #72]	; (46d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4690:	2600      	movs	r6, #0
    4692:	6825      	ldr	r5, [r4, #0]
    4694:	e011      	b.n	46ba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4696:	9800      	ldr	r0, [sp, #0]
    4698:	2802      	cmp	r0, #2
    469a:	d002      	beq.n	46a2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    469c:	2803      	cmp	r0, #3
    469e:	d10c      	bne.n	46ba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    46a0:	e006      	b.n	46b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    46a2:	6820      	ldr	r0, [r4, #0]
    46a4:	b110      	cbz	r0, 46ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    46a6:	2000      	movs	r0, #0
    46a8:	6026      	str	r6, [r4, #0]
    46aa:	e005      	b.n	46b8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    46ac:	2128      	movs	r1, #40	; 0x28
    46ae:	e00c      	b.n	46ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    46b0:	6820      	ldr	r0, [r4, #0]
    46b2:	b168      	cbz	r0, 46d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    46b4:	2001      	movs	r0, #1
    46b6:	6026      	str	r6, [r4, #0]
    46b8:	47a8      	blx	r5
    46ba:	4668      	mov	r0, sp
    46bc:	f000 fbac 	bl	4e18 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    46c0:	2800      	cmp	r0, #0
    46c2:	d0e8      	beq.n	4696 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    46c4:	2805      	cmp	r0, #5
    46c6:	d005      	beq.n	46d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    46c8:	2135      	movs	r1, #53	; 0x35
    46ca:	2004      	movs	r0, #4
    46cc:	f7ff ff4e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46d0:	212d      	movs	r1, #45	; 0x2d
    46d2:	e7fa      	b.n	46ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    46d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46d6:	0000      	.short	0x0000
    46d8:	20000060 	.word	0x20000060
    46dc:	b570      	push	{r4, r5, r6, lr}
    46de:	4c14      	ldr	r4, [pc, #80]	; (4730 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    46e0:	4605      	mov	r5, r0
    46e2:	7820      	ldrb	r0, [r4, #0]
    46e4:	b140      	cbz	r0, 46f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    46e6:	78a2      	ldrb	r2, [r4, #2]
    46e8:	1c61      	adds	r1, r4, #1
    46ea:	4628      	mov	r0, r5
    46ec:	1c92      	adds	r2, r2, #2
    46ee:	f006 fdd9 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    46f2:	2000      	movs	r0, #0
    46f4:	7020      	strb	r0, [r4, #0]
    46f6:	e013      	b.n	4720 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    46f8:	480e      	ldr	r0, [pc, #56]	; (4734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    46fa:	f001 fdf9 	bl	62f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    46fe:	2800      	cmp	r0, #0
    4700:	d00f      	beq.n	4722 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    4702:	480c      	ldr	r0, [pc, #48]	; (4734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4704:	7800      	ldrb	r0, [r0, #0]
    4706:	2814      	cmp	r0, #20
    4708:	d104      	bne.n	4714 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    470a:	210a      	movs	r1, #10
    470c:	203e      	movs	r0, #62	; 0x3e
    470e:	f006 ff03 	bl	b518 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4712:	b138      	cbz	r0, 4724 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    4714:	4907      	ldr	r1, [pc, #28]	; (4734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4716:	4628      	mov	r0, r5
    4718:	f006 ff12 	bl	b540 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    471c:	2800      	cmp	r0, #0
    471e:	d000      	beq.n	4722 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    4720:	2001      	movs	r0, #1
    4722:	bd70      	pop	{r4, r5, r6, pc}
    4724:	4903      	ldr	r1, [pc, #12]	; (4734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4726:	4628      	mov	r0, r5
    4728:	f007 f947 	bl	b9ba <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    472c:	e7f8      	b.n	4720 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    472e:	0000      	.short	0x0000
    4730:	20000cec 	.word	0x20000cec
    4734:	20000be4 	.word	0x20000be4
    4738:	b570      	push	{r4, r5, r6, lr}
    473a:	780a      	ldrb	r2, [r1, #0]
    473c:	7082      	strb	r2, [r0, #2]
    473e:	b33a      	cbz	r2, 4790 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4740:	2a01      	cmp	r2, #1
    4742:	d825      	bhi.n	4790 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4744:	2313      	movs	r3, #19
    4746:	7003      	strb	r3, [r0, #0]
    4748:	2300      	movs	r3, #0
    474a:	e00a      	b.n	4762 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    474c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4750:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4754:	78a6      	ldrb	r6, [r4, #2]
    4756:	70ee      	strb	r6, [r5, #3]
    4758:	8864      	ldrh	r4, [r4, #2]
    475a:	0a24      	lsrs	r4, r4, #8
    475c:	1c5b      	adds	r3, r3, #1
    475e:	712c      	strb	r4, [r5, #4]
    4760:	b2db      	uxtb	r3, r3
    4762:	4293      	cmp	r3, r2
    4764:	d3f2      	bcc.n	474c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    4766:	2300      	movs	r3, #0
    4768:	e00b      	b.n	4782 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    476a:	bf00      	nop
    476c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4770:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4774:	792e      	ldrb	r6, [r5, #4]
    4776:	7166      	strb	r6, [r4, #5]
    4778:	88ad      	ldrh	r5, [r5, #4]
    477a:	0a2d      	lsrs	r5, r5, #8
    477c:	1c5b      	adds	r3, r3, #1
    477e:	71a5      	strb	r5, [r4, #6]
    4780:	b2db      	uxtb	r3, r3
    4782:	4293      	cmp	r3, r2
    4784:	d3f2      	bcc.n	476c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4786:	2101      	movs	r1, #1
    4788:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    478c:	b2c0      	uxtb	r0, r0
    478e:	bd70      	pop	{r4, r5, r6, pc}
    4790:	2000      	movs	r0, #0
    4792:	bd70      	pop	{r4, r5, r6, pc}

00004794 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4794:	2101      	movs	r1, #1
    4796:	4a0c      	ldr	r2, [pc, #48]	; (47c8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4798:	2840      	cmp	r0, #64	; 0x40
    479a:	d20c      	bcs.n	47b6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    479c:	2820      	cmp	r0, #32
    479e:	d803      	bhi.n	47a8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    47a0:	1e40      	subs	r0, r0, #1
    47a2:	4081      	lsls	r1, r0
    47a4:	6810      	ldr	r0, [r2, #0]
    47a6:	e002      	b.n	47ae <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    47a8:	3821      	subs	r0, #33	; 0x21
    47aa:	4081      	lsls	r1, r0
    47ac:	6850      	ldr	r0, [r2, #4]
    47ae:	4201      	tst	r1, r0
    47b0:	d107      	bne.n	47c2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    47b2:	2000      	movs	r0, #0
    47b4:	4770      	bx	lr
    47b6:	28ff      	cmp	r0, #255	; 0xff
    47b8:	d003      	beq.n	47c2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    47ba:	3840      	subs	r0, #64	; 0x40
    47bc:	4081      	lsls	r1, r0
    47be:	6890      	ldr	r0, [r2, #8]
    47c0:	e7f5      	b.n	47ae <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    47c2:	2001      	movs	r0, #1
    47c4:	4770      	bx	lr
    47c6:	0000      	.short	0x0000
    47c8:	20000064 	.word	0x20000064

000047cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    47cc:	2101      	movs	r1, #1
    47ce:	1e40      	subs	r0, r0, #1
    47d0:	4081      	lsls	r1, r0
    47d2:	4804      	ldr	r0, [pc, #16]	; (47e4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    47d4:	68c0      	ldr	r0, [r0, #12]
    47d6:	4201      	tst	r1, r0
    47d8:	d001      	beq.n	47de <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    47da:	2001      	movs	r0, #1
    47dc:	4770      	bx	lr
    47de:	2000      	movs	r0, #0
    47e0:	4770      	bx	lr
    47e2:	0000      	.short	0x0000
    47e4:	20000064 	.word	0x20000064

000047e8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    47e8:	4901      	ldr	r1, [pc, #4]	; (47f0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    47ea:	6800      	ldr	r0, [r0, #0]
    47ec:	60c8      	str	r0, [r1, #12]
    47ee:	4770      	bx	lr
    47f0:	20000064 	.word	0x20000064

000047f4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    47f4:	4904      	ldr	r1, [pc, #16]	; (4808 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    47f6:	6802      	ldr	r2, [r0, #0]
    47f8:	6840      	ldr	r0, [r0, #4]
    47fa:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    47fe:	600a      	str	r2, [r1, #0]
    4800:	4a02      	ldr	r2, [pc, #8]	; (480c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4802:	4310      	orrs	r0, r2
    4804:	6048      	str	r0, [r1, #4]
    4806:	4770      	bx	lr
    4808:	20000064 	.word	0x20000064
    480c:	024007f8 	.word	0x024007f8

00004810 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4810:	4805      	ldr	r0, [pc, #20]	; (4828 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4812:	f04f 31ff 	mov.w	r1, #4294967295
    4816:	6001      	str	r1, [r0, #0]
    4818:	0cc9      	lsrs	r1, r1, #19
    481a:	6041      	str	r1, [r0, #4]
    481c:	2100      	movs	r1, #0
    481e:	6081      	str	r1, [r0, #8]
    4820:	211f      	movs	r1, #31
    4822:	60c1      	str	r1, [r0, #12]
    4824:	4770      	bx	lr
    4826:	0000      	.short	0x0000
    4828:	20000064 	.word	0x20000064

0000482c <sdc_hci_cmd_cb_reset>:
    482c:	b510      	push	{r4, lr}
    482e:	f7ff ffef 	bl	4810 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4832:	f008 fe8c 	bl	d54e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4836:	4604      	mov	r4, r0
    4838:	4802      	ldr	r0, [pc, #8]	; (4844 <sdc_hci_cmd_cb_reset+0x18>)
    483a:	6800      	ldr	r0, [r0, #0]
    483c:	b100      	cbz	r0, 4840 <sdc_hci_cmd_cb_reset+0x14>
    483e:	4780      	blx	r0
    4840:	4620      	mov	r0, r4
    4842:	bd10      	pop	{r4, pc}
    4844:	20000074 	.word	0x20000074

00004848 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4848:	4901      	ldr	r1, [pc, #4]	; (4850 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    484a:	6008      	str	r0, [r1, #0]
    484c:	4770      	bx	lr
    484e:	0000      	.short	0x0000
    4850:	20000074 	.word	0x20000074

00004854 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4854:	2102      	movs	r1, #2
    4856:	8001      	strh	r1, [r0, #0]
    4858:	8041      	strh	r1, [r0, #2]
    485a:	2100      	movs	r1, #0
    485c:	7101      	strb	r1, [r0, #4]
    485e:	210e      	movs	r1, #14
    4860:	7141      	strb	r1, [r0, #5]
    4862:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    4866:	80c1      	strh	r1, [r0, #6]
    4868:	4901      	ldr	r1, [pc, #4]	; (4870 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    486a:	6081      	str	r1, [r0, #8]
    486c:	2000      	movs	r0, #0
    486e:	4770      	bx	lr
    4870:	3c186766 	.word	0x3c186766

00004874 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4874:	b510      	push	{r4, lr}
    4876:	b120      	cbz	r0, 4882 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    4878:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    487c:	2017      	movs	r0, #23
    487e:	f7ff fe75 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4882:	4801      	ldr	r0, [pc, #4]	; (4888 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    4884:	7800      	ldrb	r0, [r0, #0]
    4886:	bd10      	pop	{r4, pc}
    4888:	20000df0 	.word	0x20000df0

0000488c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    488e:	4605      	mov	r5, r0
    4890:	7808      	ldrb	r0, [r1, #0]
    4892:	784a      	ldrb	r2, [r1, #1]
    4894:	4290      	cmp	r0, r2
    4896:	d902      	bls.n	489e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    4898:	f240 1163 	movw	r1, #355	; 0x163
    489c:	e00a      	b.n	48b4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    489e:	9500      	str	r5, [sp, #0]
    48a0:	b15d      	cbz	r5, 48ba <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    48a2:	2600      	movs	r6, #0
    48a4:	1ce8      	adds	r0, r5, #3
    48a6:	784c      	ldrb	r4, [r1, #1]
    48a8:	f020 0003 	bic.w	r0, r0, #3
    48ac:	42a8      	cmp	r0, r5
    48ae:	d006      	beq.n	48be <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    48b0:	f240 1179 	movw	r1, #377	; 0x179
    48b4:	2017      	movs	r0, #23
    48b6:	f7ff fe59 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48ba:	2601      	movs	r6, #1
    48bc:	e7f2      	b.n	48a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    48be:	4f12      	ldr	r7, [pc, #72]	; (4908 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    48c0:	4631      	mov	r1, r6
    48c2:	4668      	mov	r0, sp
    48c4:	703c      	strb	r4, [r7, #0]
    48c6:	f000 f881 	bl	49cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x74>
    48ca:	2000      	movs	r0, #0
    48cc:	4603      	mov	r3, r0
    48ce:	9900      	ldr	r1, [sp, #0]
    48d0:	1cc9      	adds	r1, r1, #3
    48d2:	f021 0103 	bic.w	r1, r1, #3
    48d6:	9100      	str	r1, [sp, #0]
    48d8:	b966      	cbnz	r6, 48f4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    48da:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    48de:	6091      	str	r1, [r2, #8]
    48e0:	2100      	movs	r1, #0
    48e2:	e005      	b.n	48f0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    48e4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    48e8:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    48ec:	1c49      	adds	r1, r1, #1
    48ee:	b2c9      	uxtb	r1, r1
    48f0:	42a1      	cmp	r1, r4
    48f2:	d3f7      	bcc.n	48e4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    48f4:	9900      	ldr	r1, [sp, #0]
    48f6:	1c40      	adds	r0, r0, #1
    48f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    48fc:	9100      	str	r1, [sp, #0]
    48fe:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    4902:	d0e4      	beq.n	48ce <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    4904:	1b48      	subs	r0, r1, r5
    4906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4908:	20000df0 	.word	0x20000df0

0000490c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    490c:	b570      	push	{r4, r5, r6, lr}
    490e:	4604      	mov	r4, r0
    4910:	f007 fc5d 	bl	c1ce <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4914:	b108      	cbz	r0, 491a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4916:	2010      	movs	r0, #16
    4918:	bd70      	pop	{r4, r5, r6, pc}
    491a:	7825      	ldrb	r5, [r4, #0]
    491c:	f000 f892 	bl	4a44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xec>
    4920:	4602      	mov	r2, r0
    4922:	480c      	ldr	r0, [pc, #48]	; (4954 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4924:	8861      	ldrh	r1, [r4, #2]
    4926:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    492a:	e00e      	b.n	494a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    492c:	6883      	ldr	r3, [r0, #8]
    492e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4932:	b143      	cbz	r3, 4946 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4934:	1c4a      	adds	r2, r1, #1
    4936:	8062      	strh	r2, [r4, #2]
    4938:	80a1      	strh	r1, [r4, #4]
    493a:	6880      	ldr	r0, [r0, #8]
    493c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4940:	60a0      	str	r0, [r4, #8]
    4942:	2000      	movs	r0, #0
    4944:	bd70      	pop	{r4, r5, r6, pc}
    4946:	1c49      	adds	r1, r1, #1
    4948:	b289      	uxth	r1, r1
    494a:	4291      	cmp	r1, r2
    494c:	d3ee      	bcc.n	492c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    494e:	8061      	strh	r1, [r4, #2]
    4950:	2005      	movs	r0, #5
    4952:	bd70      	pop	{r4, r5, r6, pc}
    4954:	20000df0 	.word	0x20000df0

00004958 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4958:	b570      	push	{r4, r5, r6, lr}
    495a:	4606      	mov	r6, r0
    495c:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4960:	f243 0502 	movw	r5, #12290	; 0x3002
    4964:	38ff      	subs	r0, #255	; 0xff
    4966:	d01a      	beq.n	499e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4968:	b109      	cbz	r1, 496e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    496a:	2007      	movs	r0, #7
    496c:	bd70      	pop	{r4, r5, r6, pc}
    496e:	4630      	mov	r0, r6
    4970:	f000 f81c 	bl	49ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    4974:	0004      	movs	r4, r0
    4976:	d012      	beq.n	499e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4978:	480a      	ldr	r0, [pc, #40]	; (49a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    497a:	4621      	mov	r1, r4
    497c:	6802      	ldr	r2, [r0, #0]
    497e:	4630      	mov	r0, r6
    4980:	4790      	blx	r2
    4982:	4d09      	ldr	r5, [pc, #36]	; (49a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    4984:	2000      	movs	r0, #0
    4986:	68a9      	ldr	r1, [r5, #8]
    4988:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    498c:	f000 f850 	bl	4a30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4990:	4602      	mov	r2, r0
    4992:	4621      	mov	r1, r4
    4994:	6868      	ldr	r0, [r5, #4]
    4996:	f007 fbaa 	bl	c0ee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    499a:	2000      	movs	r0, #0
    499c:	bd70      	pop	{r4, r5, r6, pc}
    499e:	4628      	mov	r0, r5
    49a0:	bd70      	pop	{r4, r5, r6, pc}
    49a2:	0000      	.short	0x0000
    49a4:	00004a58 	.word	0x00004a58
    49a8:	20000df0 	.word	0x20000df0
    49ac:	b570      	push	{r4, r5, r6, lr}
    49ae:	460c      	mov	r4, r1
    49b0:	4605      	mov	r5, r0
    49b2:	f007 fbc2 	bl	c13a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    49b6:	2800      	cmp	r0, #0
    49b8:	d005      	beq.n	49c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x6e>
    49ba:	4803      	ldr	r0, [pc, #12]	; (49c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x70>)
    49bc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    49c0:	6880      	ldr	r0, [r0, #8]
    49c2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    49c6:	bd70      	pop	{r4, r5, r6, pc}
    49c8:	20000df0 	.word	0x20000df0
    49cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49d0:	4e16      	ldr	r6, [pc, #88]	; (4a2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    49d2:	4688      	mov	r8, r1
    49d4:	4605      	mov	r5, r0
    49d6:	2400      	movs	r4, #0
    49d8:	6828      	ldr	r0, [r5, #0]
    49da:	1cc0      	adds	r0, r0, #3
    49dc:	f020 0003 	bic.w	r0, r0, #3
    49e0:	6028      	str	r0, [r5, #0]
    49e2:	4620      	mov	r0, r4
    49e4:	f000 f824 	bl	4a30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    49e8:	5d31      	ldrb	r1, [r6, r4]
    49ea:	4348      	muls	r0, r1
    49ec:	f1b8 0f00 	cmp.w	r8, #0
    49f0:	d001      	beq.n	49f6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9e>
    49f2:	2200      	movs	r2, #0
    49f4:	e000      	b.n	49f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa0>
    49f6:	682a      	ldr	r2, [r5, #0]
    49f8:	4601      	mov	r1, r0
    49fa:	9200      	str	r2, [sp, #0]
    49fc:	b132      	cbz	r2, 4a0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    49fe:	2700      	movs	r7, #0
    4a00:	ea4f 000d 	mov.w	r0, sp
    4a04:	f007 fb52 	bl	c0ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4a08:	b11f      	cbz	r7, 4a12 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4a0a:	e006      	b.n	4a1a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc2>
    4a0c:	2701      	movs	r7, #1
    4a0e:	2000      	movs	r0, #0
    4a10:	e7f8      	b.n	4a04 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    4a12:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4a16:	9a00      	ldr	r2, [sp, #0]
    4a18:	604a      	str	r2, [r1, #4]
    4a1a:	6829      	ldr	r1, [r5, #0]
    4a1c:	1c64      	adds	r4, r4, #1
    4a1e:	4408      	add	r0, r1
    4a20:	6028      	str	r0, [r5, #0]
    4a22:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    4a26:	d0d7      	beq.n	49d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x80>
    4a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4a2c:	20000df0 	.word	0x20000df0
    4a30:	4903      	ldr	r1, [pc, #12]	; (4a40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe8>)
    4a32:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4a36:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4a3a:	1cc0      	adds	r0, r0, #3
    4a3c:	4008      	ands	r0, r1
    4a3e:	4770      	bx	lr
    4a40:	00004a50 	.word	0x00004a50
    4a44:	4801      	ldr	r0, [pc, #4]	; (4a4c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4a46:	7800      	ldrb	r0, [r0, #0]
    4a48:	4770      	bx	lr
    4a4a:	0000      	.short	0x0000
    4a4c:	20000df0 	.word	0x20000df0
    4a50:	000001e0 	.word	0x000001e0
    4a54:	0000c14f 	.word	0x0000c14f
    4a58:	0000cfc1 	.word	0x0000cfc1

00004a5c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4a5c:	b570      	push	{r4, r5, r6, lr}
    4a5e:	4c14      	ldr	r4, [pc, #80]	; (4ab0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4a60:	6823      	ldr	r3, [r4, #0]
    4a62:	b18b      	cbz	r3, 4a88 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4a64:	7a19      	ldrb	r1, [r3, #8]
    4a66:	4281      	cmp	r1, r0
    4a68:	d912      	bls.n	4a90 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4a6a:	685a      	ldr	r2, [r3, #4]
    4a6c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4a70:	b171      	cbz	r1, 4a90 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4a72:	2500      	movs	r5, #0
    4a74:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4a78:	884a      	ldrh	r2, [r1, #2]
    4a7a:	6818      	ldr	r0, [r3, #0]
    4a7c:	f007 fb37 	bl	c0ee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4a80:	6821      	ldr	r1, [r4, #0]
    4a82:	2000      	movs	r0, #0
    4a84:	7a0a      	ldrb	r2, [r1, #8]
    4a86:	e00c      	b.n	4aa2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4a88:	21c8      	movs	r1, #200	; 0xc8
    4a8a:	2018      	movs	r0, #24
    4a8c:	f7ff fd6e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a90:	f243 0002 	movw	r0, #12290	; 0x3002
    4a94:	bd70      	pop	{r4, r5, r6, pc}
    4a96:	684b      	ldr	r3, [r1, #4]
    4a98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4a9c:	b933      	cbnz	r3, 4aac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4a9e:	1c40      	adds	r0, r0, #1
    4aa0:	b2c0      	uxtb	r0, r0
    4aa2:	4282      	cmp	r2, r0
    4aa4:	d8f7      	bhi.n	4a96 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4aa6:	6808      	ldr	r0, [r1, #0]
    4aa8:	f007 fb16 	bl	c0d8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4aac:	2000      	movs	r0, #0
    4aae:	bd70      	pop	{r4, r5, r6, pc}
    4ab0:	20000078 	.word	0x20000078

00004ab4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ab8:	460d      	mov	r5, r1
    4aba:	0004      	movs	r4, r0
    4abc:	4690      	mov	r8, r2
    4abe:	f04f 0600 	mov.w	r6, #0
    4ac2:	d009      	beq.n	4ad8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4ac4:	2700      	movs	r7, #0
    4ac6:	1ce0      	adds	r0, r4, #3
    4ac8:	f020 0003 	bic.w	r0, r0, #3
    4acc:	42a0      	cmp	r0, r4
    4ace:	d005      	beq.n	4adc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4ad0:	2186      	movs	r1, #134	; 0x86
    4ad2:	2018      	movs	r0, #24
    4ad4:	f7ff fd4a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ad8:	2701      	movs	r7, #1
    4ada:	e7f4      	b.n	4ac6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4adc:	b1cd      	cbz	r5, 4b12 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4ade:	4611      	mov	r1, r2
    4ae0:	2000      	movs	r0, #0
    4ae2:	f007 fae3 	bl	c0ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4ae6:	300c      	adds	r0, #12
    4ae8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4aec:	b98f      	cbnz	r7, 4b12 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4aee:	4f0a      	ldr	r7, [pc, #40]	; (4b18 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4af0:	f104 000c 	add.w	r0, r4, #12
    4af4:	00aa      	lsls	r2, r5, #2
    4af6:	603c      	str	r4, [r7, #0]
    4af8:	7225      	strb	r5, [r4, #8]
    4afa:	6060      	str	r0, [r4, #4]
    4afc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4b00:	6020      	str	r0, [r4, #0]
    4b02:	2100      	movs	r1, #0
    4b04:	6860      	ldr	r0, [r4, #4]
    4b06:	f006 fc47 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4b0a:	4641      	mov	r1, r8
    4b0c:	6838      	ldr	r0, [r7, #0]
    4b0e:	f007 facd 	bl	c0ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4b12:	4630      	mov	r0, r6
    4b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b18:	20000078 	.word	0x20000078

00004b1c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4b1c:	4909      	ldr	r1, [pc, #36]	; (4b44 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4b1e:	b510      	push	{r4, lr}
    4b20:	4602      	mov	r2, r0
    4b22:	6809      	ldr	r1, [r1, #0]
    4b24:	2000      	movs	r0, #0
    4b26:	b149      	cbz	r1, 4b3c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4b28:	7a0b      	ldrb	r3, [r1, #8]
    4b2a:	4293      	cmp	r3, r2
    4b2c:	d905      	bls.n	4b3a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4b2e:	6849      	ldr	r1, [r1, #4]
    4b30:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4b34:	2900      	cmp	r1, #0
    4b36:	d000      	beq.n	4b3a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4b38:	1d08      	adds	r0, r1, #4
    4b3a:	bd10      	pop	{r4, pc}
    4b3c:	21ee      	movs	r1, #238	; 0xee
    4b3e:	2018      	movs	r0, #24
    4b40:	f7ff fd14 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b44:	20000078 	.word	0x20000078

00004b48 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4b48:	490a      	ldr	r1, [pc, #40]	; (4b74 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4b4a:	b510      	push	{r4, lr}
    4b4c:	4602      	mov	r2, r0
    4b4e:	6809      	ldr	r1, [r1, #0]
    4b50:	2000      	movs	r0, #0
    4b52:	b159      	cbz	r1, 4b6c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4b54:	7a0b      	ldrb	r3, [r1, #8]
    4b56:	4293      	cmp	r3, r2
    4b58:	d907      	bls.n	4b6a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4b5a:	6849      	ldr	r1, [r1, #4]
    4b5c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4b60:	2900      	cmp	r1, #0
    4b62:	d002      	beq.n	4b6a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4b64:	f831 0b04 	ldrh.w	r0, [r1], #4
    4b68:	4408      	add	r0, r1
    4b6a:	bd10      	pop	{r4, pc}
    4b6c:	21fc      	movs	r1, #252	; 0xfc
    4b6e:	2018      	movs	r0, #24
    4b70:	f7ff fcfc 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b74:	20000078 	.word	0x20000078

00004b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    4b78:	4801      	ldr	r0, [pc, #4]	; (4b80 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    4b7a:	7840      	ldrb	r0, [r0, #1]
    4b7c:	4770      	bx	lr
    4b7e:	0000      	.short	0x0000
    4b80:	2000007c 	.word	0x2000007c

00004b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    4b84:	4801      	ldr	r0, [pc, #4]	; (4b8c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    4b86:	6840      	ldr	r0, [r0, #4]
    4b88:	4770      	bx	lr
    4b8a:	0000      	.short	0x0000
    4b8c:	2000007c 	.word	0x2000007c

00004b90 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b94:	460c      	mov	r4, r1
    4b96:	4607      	mov	r7, r0
    4b98:	4616      	mov	r6, r2
    4b9a:	211c      	movs	r1, #28
    4b9c:	4610      	mov	r0, r2
    4b9e:	460d      	mov	r5, r1
    4ba0:	4622      	mov	r2, r4
    4ba2:	f007 fa3e 	bl	c022 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    4ba6:	4680      	mov	r8, r0
    4ba8:	b157      	cbz	r7, 4bc0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    4baa:	4638      	mov	r0, r7
    4bac:	4641      	mov	r1, r8
    4bae:	4632      	mov	r2, r6
    4bb0:	462b      	mov	r3, r5
    4bb2:	9400      	str	r4, [sp, #0]
    4bb4:	f007 f9dd 	bl	bf72 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4bb8:	4803      	ldr	r0, [pc, #12]	; (4bc8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    4bba:	6047      	str	r7, [r0, #4]
    4bbc:	7004      	strb	r4, [r0, #0]
    4bbe:	7046      	strb	r6, [r0, #1]
    4bc0:	4640      	mov	r0, r8
    4bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bc6:	0000      	.short	0x0000
    4bc8:	2000007c 	.word	0x2000007c

00004bcc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4bcc:	4802      	ldr	r0, [pc, #8]	; (4bd8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4bce:	7842      	ldrb	r2, [r0, #1]
    4bd0:	7801      	ldrb	r1, [r0, #0]
    4bd2:	6840      	ldr	r0, [r0, #4]
    4bd4:	f7ff bfdc 	b.w	4b90 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4bd8:	2000007c 	.word	0x2000007c
    4bdc:	4909      	ldr	r1, [pc, #36]	; (4c04 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    4bde:	b510      	push	{r4, lr}
    4be0:	4807      	ldr	r0, [pc, #28]	; (4c00 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    4be2:	6008      	str	r0, [r1, #0]
    4be4:	4b08      	ldr	r3, [pc, #32]	; (4c08 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    4be6:	2011      	movs	r0, #17
    4be8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4bec:	2200      	movs	r2, #0
    4bee:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4bf2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4bf6:	1c40      	adds	r0, r0, #1
    4bf8:	b2c0      	uxtb	r0, r0
    4bfa:	2814      	cmp	r0, #20
    4bfc:	d3f4      	bcc.n	4be8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    4bfe:	bd10      	pop	{r4, pc}
    4c00:	fffe0000 	.word	0xfffe0000
    4c04:	4001f508 	.word	0x4001f508
    4c08:	4001f000 	.word	0x4001f000
    4c0c:	b570      	push	{r4, r5, r6, lr}
    4c0e:	2420      	movs	r4, #32
    4c10:	2100      	movs	r1, #0
    4c12:	2301      	movs	r3, #1
    4c14:	fa20 f201 	lsr.w	r2, r0, r1
    4c18:	07d2      	lsls	r2, r2, #31
    4c1a:	d020      	beq.n	4c5e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4c1c:	b24a      	sxtb	r2, r1
    4c1e:	2a00      	cmp	r2, #0
    4c20:	db10      	blt.n	4c44 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    4c22:	bf00      	nop
    4c24:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4c28:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4c2c:	f002 051f 	and.w	r5, r2, #31
    4c30:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4c34:	fa03 f505 	lsl.w	r5, r3, r5
    4c38:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4c3c:	f3bf 8f4f 	dsb	sy
    4c40:	f3bf 8f6f 	isb	sy
    4c44:	db0b      	blt.n	4c5e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4c46:	f002 051f 	and.w	r5, r2, #31
    4c4a:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4c4e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    4c52:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4c56:	fa03 f505 	lsl.w	r5, r3, r5
    4c5a:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4c5e:	f101 0101 	add.w	r1, r1, #1
    4c62:	42a1      	cmp	r1, r4
    4c64:	d3d6      	bcc.n	4c14 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    4c66:	bd70      	pop	{r4, r5, r6, pc}
    4c68:	b570      	push	{r4, r5, r6, lr}
    4c6a:	0042      	lsls	r2, r0, #1
    4c6c:	f04f 0100 	mov.w	r1, #0
    4c70:	d501      	bpl.n	4c76 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    4c72:	4a14      	ldr	r2, [pc, #80]	; (4cc4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    4c74:	6011      	str	r1, [r2, #0]
    4c76:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4c7a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4c7e:	429a      	cmp	r2, r3
    4c80:	d003      	beq.n	4c8a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    4c82:	2169      	movs	r1, #105	; 0x69
    4c84:	201b      	movs	r0, #27
    4c86:	f7ff fc71 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c8a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4c8e:	d014      	beq.n	4cba <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    4c90:	4a0d      	ldr	r2, [pc, #52]	; (4cc8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    4c92:	2001      	movs	r0, #1
    4c94:	6050      	str	r0, [r2, #4]
    4c96:	1e83      	subs	r3, r0, #2
    4c98:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4c9c:	4a0b      	ldr	r2, [pc, #44]	; (4ccc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    4c9e:	6090      	str	r0, [r2, #8]
    4ca0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4ca4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4ca8:	4c09      	ldr	r4, [pc, #36]	; (4cd0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    4caa:	6021      	str	r1, [r4, #0]
    4cac:	1d25      	adds	r5, r4, #4
    4cae:	6028      	str	r0, [r5, #0]
    4cb0:	6090      	str	r0, [r2, #8]
    4cb2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4cb6:	6021      	str	r1, [r4, #0]
    4cb8:	6028      	str	r0, [r5, #0]
    4cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4cbe:	f7ff bf8d 	b.w	4bdc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4cc2:	0000      	.short	0x0000
    4cc4:	4001e504 	.word	0x4001e504
    4cc8:	4000e000 	.word	0x4000e000
    4ccc:	4000f000 	.word	0x4000f000
    4cd0:	4000f500 	.word	0x4000f500

00004cd4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4cd4:	b570      	push	{r4, r5, r6, lr}
    4cd6:	4c0a      	ldr	r4, [pc, #40]	; (4d00 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4cd8:	460d      	mov	r5, r1
    4cda:	6020      	str	r0, [r4, #0]
    4cdc:	f7ff ffc4 	bl	4c68 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    4ce0:	6820      	ldr	r0, [r4, #0]
    4ce2:	f7ff ff93 	bl	4c0c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    4ce6:	f000 f883 	bl	4df0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4cea:	f7ff ff77 	bl	4bdc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4cee:	f007 fa63 	bl	c1b8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4cf2:	4628      	mov	r0, r5
    4cf4:	f000 f8b6 	bl	4e64 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4cfc:	f000 b8ce 	b.w	4e9c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4d00:	20000084 	.word	0x20000084

00004d04 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4d04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d08:	4c36      	ldr	r4, [pc, #216]	; (4de4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    4d0a:	b082      	sub	sp, #8
    4d0c:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4d10:	2601      	movs	r6, #1
    4d12:	4835      	ldr	r0, [pc, #212]	; (4de8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4d14:	f006 fa1d 	bl	b152 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4d18:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4de8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    4d1c:	b920      	cbnz	r0, 4d28 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4d1e:	2600      	movs	r6, #0
    4d20:	f109 0001 	add.w	r0, r9, #1
    4d24:	f006 fa2c 	bl	b180 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4d28:	f44f 7580 	mov.w	r5, #256	; 0x100
    4d2c:	f04f 0800 	mov.w	r8, #0
    4d30:	1d2f      	adds	r7, r5, #4
    4d32:	2101      	movs	r1, #1
    4d34:	6061      	str	r1, [r4, #4]
    4d36:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4d3a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4d3e:	9802      	ldr	r0, [sp, #8]
    4d40:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    4d44:	6021      	str	r1, [r4, #0]
    4d46:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4dec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    4d4a:	e01c      	b.n	4d86 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4d4c:	f8da 0000 	ldr.w	r0, [sl]
    4d50:	06c0      	lsls	r0, r0, #27
    4d52:	d518      	bpl.n	4d86 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4d54:	200e      	movs	r0, #14
    4d56:	f007 fa1b 	bl	c190 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4d5a:	f3ef 8010 	mrs	r0, PRIMASK
    4d5e:	9000      	str	r0, [sp, #0]
    4d60:	b672      	cpsid	i
    4d62:	2103      	movs	r1, #3
    4d64:	4620      	mov	r0, r4
    4d66:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    4d6a:	4629      	mov	r1, r5
    4d6c:	f007 fa1d 	bl	c1aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d70:	b930      	cbnz	r0, 4d80 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4d72:	4639      	mov	r1, r7
    4d74:	4620      	mov	r0, r4
    4d76:	f007 fa18 	bl	c1aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d7a:	b908      	cbnz	r0, 4d80 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4d7c:	f7ff fa3c 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4d80:	9800      	ldr	r0, [sp, #0]
    4d82:	b900      	cbnz	r0, 4d86 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4d84:	b662      	cpsie	i
    4d86:	4629      	mov	r1, r5
    4d88:	4620      	mov	r0, r4
    4d8a:	f007 fa0e 	bl	c1aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d8e:	b928      	cbnz	r0, 4d9c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    4d90:	4639      	mov	r1, r7
    4d92:	4620      	mov	r0, r4
    4d94:	f007 fa09 	bl	c1aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4d98:	2800      	cmp	r0, #0
    4d9a:	d0d7      	beq.n	4d4c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    4d9c:	4639      	mov	r1, r7
    4d9e:	4620      	mov	r0, r4
    4da0:	f007 fa03 	bl	c1aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4da4:	2800      	cmp	r0, #0
    4da6:	d1c4      	bne.n	4d32 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    4da8:	b136      	cbz	r6, 4db8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    4daa:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    4dae:	f109 0001 	add.w	r0, r9, #1
    4db2:	f006 f9ce 	bl	b152 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4db6:	e012      	b.n	4dde <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    4db8:	f109 0001 	add.w	r0, r9, #1
    4dbc:	f006 f9c9 	bl	b152 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4dc0:	2800      	cmp	r0, #0
    4dc2:	d1ad      	bne.n	4d20 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4dc4:	2003      	movs	r0, #3
    4dc6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4dca:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4dce:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4dd2:	200e      	movs	r0, #14
    4dd4:	f007 f9dc 	bl	c190 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4dd8:	4803      	ldr	r0, [pc, #12]	; (4de8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4dda:	f006 f9d1 	bl	b180 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4dde:	2000      	movs	r0, #0
    4de0:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4de4:	4000e000 	.word	0x4000e000
    4de8:	2000026f 	.word	0x2000026f
    4dec:	e000ed10 	.word	0xe000ed10

00004df0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4df0:	b510      	push	{r4, lr}
    4df2:	4808      	ldr	r0, [pc, #32]	; (4e14 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4df4:	f006 f9c0 	bl	b178 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4df8:	b108      	cbz	r0, 4dfe <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4dfa:	2125      	movs	r1, #37	; 0x25
    4dfc:	e006      	b.n	4e0c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4dfe:	4805      	ldr	r0, [pc, #20]	; (4e14 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4e00:	1c40      	adds	r0, r0, #1
    4e02:	f006 f9b9 	bl	b178 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4e06:	2800      	cmp	r0, #0
    4e08:	d003      	beq.n	4e12 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4e0a:	2129      	movs	r1, #41	; 0x29
    4e0c:	201d      	movs	r0, #29
    4e0e:	f7ff fbad 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e12:	bd10      	pop	{r4, pc}
    4e14:	2000026f 	.word	0x2000026f

00004e18 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4e18:	b570      	push	{r4, r5, r6, lr}
    4e1a:	4911      	ldr	r1, [pc, #68]	; (4e60 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4e1c:	680a      	ldr	r2, [r1, #0]
    4e1e:	b1ea      	cbz	r2, 4e5c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4e20:	2300      	movs	r3, #0
    4e22:	461d      	mov	r5, r3
    4e24:	2401      	movs	r4, #1
    4e26:	684a      	ldr	r2, [r1, #4]
    4e28:	1c52      	adds	r2, r2, #1
    4e2a:	604a      	str	r2, [r1, #4]
    4e2c:	2a0c      	cmp	r2, #12
    4e2e:	d300      	bcc.n	4e32 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4e30:	604d      	str	r5, [r1, #4]
    4e32:	790e      	ldrb	r6, [r1, #4]
    4e34:	fa04 f206 	lsl.w	r2, r4, r6
    4e38:	680e      	ldr	r6, [r1, #0]
    4e3a:	4216      	tst	r6, r2
    4e3c:	d00b      	beq.n	4e56 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4e3e:	f3ef 8310 	mrs	r3, PRIMASK
    4e42:	b672      	cpsid	i
    4e44:	680c      	ldr	r4, [r1, #0]
    4e46:	4394      	bics	r4, r2
    4e48:	600c      	str	r4, [r1, #0]
    4e4a:	b903      	cbnz	r3, 4e4e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4e4c:	b662      	cpsie	i
    4e4e:	6849      	ldr	r1, [r1, #4]
    4e50:	6001      	str	r1, [r0, #0]
    4e52:	2000      	movs	r0, #0
    4e54:	bd70      	pop	{r4, r5, r6, pc}
    4e56:	1c5b      	adds	r3, r3, #1
    4e58:	2b0c      	cmp	r3, #12
    4e5a:	d3e4      	bcc.n	4e26 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4e5c:	2005      	movs	r0, #5
    4e5e:	bd70      	pop	{r4, r5, r6, pc}
    4e60:	20000088 	.word	0x20000088

00004e64 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4e64:	4802      	ldr	r0, [pc, #8]	; (4e70 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4e66:	2100      	movs	r1, #0
    4e68:	6001      	str	r1, [r0, #0]
    4e6a:	6041      	str	r1, [r0, #4]
    4e6c:	4770      	bx	lr
    4e6e:	0000      	.short	0x0000
    4e70:	20000088 	.word	0x20000088

00004e74 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4e74:	b510      	push	{r4, lr}
    4e76:	4c08      	ldr	r4, [pc, #32]	; (4e98 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4e78:	7861      	ldrb	r1, [r4, #1]
    4e7a:	b109      	cbz	r1, 4e80 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4e7c:	200f      	movs	r0, #15
    4e7e:	bd10      	pop	{r4, pc}
    4e80:	f7ff f946 	bl	4110 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4e84:	7020      	strb	r0, [r4, #0]
    4e86:	28ff      	cmp	r0, #255	; 0xff
    4e88:	d001      	beq.n	4e8e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4e8a:	2000      	movs	r0, #0
    4e8c:	bd10      	pop	{r4, pc}
    4e8e:	2176      	movs	r1, #118	; 0x76
    4e90:	201f      	movs	r0, #31
    4e92:	f7ff fb6b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e96:	0000      	.short	0x0000
    4e98:	20000090 	.word	0x20000090

00004e9c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4e9c:	4901      	ldr	r1, [pc, #4]	; (4ea4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4e9e:	2000      	movs	r0, #0
    4ea0:	7048      	strb	r0, [r1, #1]
    4ea2:	4770      	bx	lr
    4ea4:	20000090 	.word	0x20000090

00004ea8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4ea8:	4806      	ldr	r0, [pc, #24]	; (4ec4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4eaa:	4a07      	ldr	r2, [pc, #28]	; (4ec8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4eac:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4eae:	8852      	ldrh	r2, [r2, #2]
    4eb0:	4291      	cmp	r1, r2
    4eb2:	d104      	bne.n	4ebe <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4eb4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4eb8:	b108      	cbz	r0, 4ebe <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4eba:	2000      	movs	r0, #0
    4ebc:	4770      	bx	lr
    4ebe:	2001      	movs	r0, #1
    4ec0:	4770      	bx	lr
    4ec2:	0000      	.short	0x0000
    4ec4:	20000f74 	.word	0x20000f74
    4ec8:	20000254 	.word	0x20000254

00004ecc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4ecc:	4901      	ldr	r1, [pc, #4]	; (4ed4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4ece:	8048      	strh	r0, [r1, #2]
    4ed0:	4770      	bx	lr
    4ed2:	0000      	.short	0x0000
    4ed4:	20000254 	.word	0x20000254

00004ed8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4ed8:	4808      	ldr	r0, [pc, #32]	; (4efc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4eda:	4a09      	ldr	r2, [pc, #36]	; (4f00 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4edc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4ede:	8852      	ldrh	r2, [r2, #2]
    4ee0:	4291      	cmp	r1, r2
    4ee2:	d109      	bne.n	4ef8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4ee4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4ee8:	8481      	strh	r1, [r0, #36]	; 0x24
    4eea:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4eee:	b119      	cbz	r1, 4ef8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4ef0:	2100      	movs	r1, #0
    4ef2:	7001      	strb	r1, [r0, #0]
    4ef4:	2001      	movs	r0, #1
    4ef6:	4770      	bx	lr
    4ef8:	2000      	movs	r0, #0
    4efa:	4770      	bx	lr
    4efc:	20000f74 	.word	0x20000f74
    4f00:	20000254 	.word	0x20000254

00004f04 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4f04:	4807      	ldr	r0, [pc, #28]	; (4f24 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4f06:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4f0a:	2901      	cmp	r1, #1
    4f0c:	d007      	beq.n	4f1e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4f0e:	2101      	movs	r1, #1
    4f10:	7001      	strb	r1, [r0, #0]
    4f12:	4805      	ldr	r0, [pc, #20]	; (4f28 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4f14:	4903      	ldr	r1, [pc, #12]	; (4f24 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4f16:	8800      	ldrh	r0, [r0, #0]
    4f18:	8488      	strh	r0, [r1, #36]	; 0x24
    4f1a:	2001      	movs	r0, #1
    4f1c:	4770      	bx	lr
    4f1e:	2000      	movs	r0, #0
    4f20:	4770      	bx	lr
    4f22:	0000      	.short	0x0000
    4f24:	20000f74 	.word	0x20000f74
    4f28:	20000254 	.word	0x20000254

00004f2c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4f2c:	4906      	ldr	r1, [pc, #24]	; (4f48 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4f2e:	4b07      	ldr	r3, [pc, #28]	; (4f4c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4f30:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4f32:	885b      	ldrh	r3, [r3, #2]
    4f34:	429a      	cmp	r2, r3
    4f36:	d105      	bne.n	4f44 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4f38:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4f3c:	b112      	cbz	r2, 4f44 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4f3e:	6001      	str	r1, [r0, #0]
    4f40:	2001      	movs	r0, #1
    4f42:	4770      	bx	lr
    4f44:	2000      	movs	r0, #0
    4f46:	4770      	bx	lr
    4f48:	20000f74 	.word	0x20000f74
    4f4c:	20000254 	.word	0x20000254

00004f50 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4f50:	4909      	ldr	r1, [pc, #36]	; (4f78 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4f52:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4f54:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4f58:	3bff      	subs	r3, #255	; 0xff
    4f5a:	d002      	beq.n	4f62 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4f5c:	2100      	movs	r1, #0
    4f5e:	6001      	str	r1, [r0, #0]
    4f60:	e007      	b.n	4f72 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4f62:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4f66:	4904      	ldr	r1, [pc, #16]	; (4f78 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4f68:	2a01      	cmp	r2, #1
    4f6a:	d002      	beq.n	4f72 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4f6c:	6001      	str	r1, [r0, #0]
    4f6e:	2001      	movs	r0, #1
    4f70:	4770      	bx	lr
    4f72:	2000      	movs	r0, #0
    4f74:	4770      	bx	lr
    4f76:	0000      	.short	0x0000
    4f78:	20000f74 	.word	0x20000f74

00004f7c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4f7c:	4901      	ldr	r1, [pc, #4]	; (4f84 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4f7e:	8008      	strh	r0, [r1, #0]
    4f80:	4770      	bx	lr
    4f82:	0000      	.short	0x0000
    4f84:	20000254 	.word	0x20000254
    4f88:	4905      	ldr	r1, [pc, #20]	; (4fa0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x24>)
    4f8a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4f8c:	4282      	cmp	r2, r0
    4f8e:	d105      	bne.n	4f9c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x20>
    4f90:	2000      	movs	r0, #0
    4f92:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4f96:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4f9a:	8488      	strh	r0, [r1, #36]	; 0x24
    4f9c:	4770      	bx	lr
    4f9e:	0000      	.short	0x0000
    4fa0:	20000f74 	.word	0x20000f74

00004fa4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4fa4:	4a0a      	ldr	r2, [pc, #40]	; (4fd0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4fa6:	b110      	cbz	r0, 4fae <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4fa8:	2801      	cmp	r0, #1
    4faa:	d007      	beq.n	4fbc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4fac:	e00e      	b.n	4fcc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4fae:	7850      	ldrb	r0, [r2, #1]
    4fb0:	b160      	cbz	r0, 4fcc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4fb2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4fb6:	6008      	str	r0, [r1, #0]
    4fb8:	88d0      	ldrh	r0, [r2, #6]
    4fba:	e004      	b.n	4fc6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4fbc:	7810      	ldrb	r0, [r2, #0]
    4fbe:	b128      	cbz	r0, 4fcc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4fc0:	6890      	ldr	r0, [r2, #8]
    4fc2:	6008      	str	r0, [r1, #0]
    4fc4:	8990      	ldrh	r0, [r2, #12]
    4fc6:	8088      	strh	r0, [r1, #4]
    4fc8:	2001      	movs	r0, #1
    4fca:	4770      	bx	lr
    4fcc:	2000      	movs	r0, #0
    4fce:	4770      	bx	lr
    4fd0:	20000271 	.word	0x20000271

00004fd4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4fd4:	4a08      	ldr	r2, [pc, #32]	; (4ff8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4fd6:	2301      	movs	r3, #1
    4fd8:	b138      	cbz	r0, 4fea <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4fda:	2801      	cmp	r0, #1
    4fdc:	d104      	bne.n	4fe8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4fde:	7013      	strb	r3, [r2, #0]
    4fe0:	6808      	ldr	r0, [r1, #0]
    4fe2:	6090      	str	r0, [r2, #8]
    4fe4:	8888      	ldrh	r0, [r1, #4]
    4fe6:	8190      	strh	r0, [r2, #12]
    4fe8:	4770      	bx	lr
    4fea:	7053      	strb	r3, [r2, #1]
    4fec:	6808      	ldr	r0, [r1, #0]
    4fee:	f8c2 0002 	str.w	r0, [r2, #2]
    4ff2:	8888      	ldrh	r0, [r1, #4]
    4ff4:	80d0      	strh	r0, [r2, #6]
    4ff6:	4770      	bx	lr
    4ff8:	20000271 	.word	0x20000271

00004ffc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4ffc:	4906      	ldr	r1, [pc, #24]	; (5018 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4ffe:	b110      	cbz	r0, 5006 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5000:	2801      	cmp	r0, #1
    5002:	d002      	beq.n	500a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5004:	e005      	b.n	5012 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5006:	7848      	ldrb	r0, [r1, #1]
    5008:	e000      	b.n	500c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    500a:	7808      	ldrb	r0, [r1, #0]
    500c:	b108      	cbz	r0, 5012 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    500e:	2001      	movs	r0, #1
    5010:	4770      	bx	lr
    5012:	2000      	movs	r0, #0
    5014:	4770      	bx	lr
    5016:	0000      	.short	0x0000
    5018:	20000271 	.word	0x20000271

0000501c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    501c:	4901      	ldr	r1, [pc, #4]	; (5024 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    501e:	7448      	strb	r0, [r1, #17]
    5020:	4770      	bx	lr
    5022:	0000      	.short	0x0000
    5024:	200007d2 	.word	0x200007d2

00005028 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5028:	4901      	ldr	r1, [pc, #4]	; (5030 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    502a:	2001      	movs	r0, #1
    502c:	7188      	strb	r0, [r1, #6]
    502e:	4770      	bx	lr
    5030:	200000ac 	.word	0x200000ac

00005034 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5038:	4d66      	ldr	r5, [pc, #408]	; (51d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    503a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    503c:	782e      	ldrb	r6, [r5, #0]
    503e:	bbee      	cbnz	r6, 50bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5040:	b3e2      	cbz	r2, 50bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5042:	b3db      	cbz	r3, 50bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5044:	b3d4      	cbz	r4, 50bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5046:	f105 0614 	add.w	r6, r5, #20
    504a:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    504e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5052:	2700      	movs	r7, #0
    5054:	71af      	strb	r7, [r5, #6]
    5056:	716f      	strb	r7, [r5, #5]
    5058:	70ef      	strb	r7, [r5, #3]
    505a:	70af      	strb	r7, [r5, #2]
    505c:	712f      	strb	r7, [r5, #4]
    505e:	81af      	strh	r7, [r5, #12]
    5060:	81ef      	strh	r7, [r5, #14]
    5062:	f000 f963 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5066:	4606      	mov	r6, r0
    5068:	f000 f95a 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    506c:	4604      	mov	r4, r0
    506e:	f005 faa3 	bl	a5b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5072:	f004 ff87 	bl	9f84 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5076:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    507a:	f005 fb23 	bl	a6c4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    507e:	f104 0018 	add.w	r0, r4, #24
    5082:	f005 fbfd 	bl	a880 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5086:	6920      	ldr	r0, [r4, #16]
    5088:	f005 fbf0 	bl	a86c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    508c:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5090:	f005 fc14 	bl	a8bc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5094:	f04f 0b01 	mov.w	fp, #1
    5098:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    509c:	2000      	movs	r0, #0
    509e:	f005 f94f 	bl	a340 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    50a2:	2800      	cmp	r0, #0
    50a4:	d07e      	beq.n	51a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    50a6:	484c      	ldr	r0, [pc, #304]	; (51d8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    50a8:	f005 f9be 	bl	a428 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    50ac:	8820      	ldrh	r0, [r4, #0]
    50ae:	f7ff fd4b 	bl	4b48 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    50b2:	6328      	str	r0, [r5, #48]	; 0x30
    50b4:	8820      	ldrh	r0, [r4, #0]
    50b6:	f7ff fd31 	bl	4b1c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    50ba:	e000      	b.n	50be <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    50bc:	e00a      	b.n	50d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    50be:	6368      	str	r0, [r5, #52]	; 0x34
    50c0:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    50c4:	f88d 0000 	strb.w	r0, [sp]
    50c8:	9800      	ldr	r0, [sp, #0]
    50ca:	9000      	str	r0, [sp, #0]
    50cc:	f89d 0000 	ldrb.w	r0, [sp]
    50d0:	b118      	cbz	r0, 50da <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    50d2:	e012      	b.n	50fa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    50d4:	f44f 718a 	mov.w	r1, #276	; 0x114
    50d8:	e079      	b.n	51ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
    50da:	6f20      	ldr	r0, [r4, #112]	; 0x70
    50dc:	b168      	cbz	r0, 50fa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    50de:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    50e0:	88b1      	ldrh	r1, [r6, #4]
    50e2:	4288      	cmp	r0, r1
    50e4:	d109      	bne.n	50fa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    50e6:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    50ea:	2201      	movs	r2, #1
    50ec:	4408      	add	r0, r1
    50ee:	8670      	strh	r0, [r6, #50]	; 0x32
    50f0:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    50f4:	6f21      	ldr	r1, [r4, #112]	; 0x70
    50f6:	f7fd fedb 	bl	2eb0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    50fa:	f106 0168 	add.w	r1, r6, #104	; 0x68
    50fe:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 51dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    5102:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5106:	f109 0808 	add.w	r8, r9, #8
    510a:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    510e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5110:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5114:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5116:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    511a:	f000 f975 	bl	5408 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    511e:	4601      	mov	r1, r0
    5120:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5122:	46ba      	mov	sl, r7
    5124:	f007 f9dc 	bl	c4e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5128:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    512a:	4281      	cmp	r1, r0
    512c:	d200      	bcs.n	5130 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    512e:	4608      	mov	r0, r1
    5130:	7228      	strb	r0, [r5, #8]
    5132:	46a8      	mov	r8, r5
    5134:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5138:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    513a:	7cf7      	ldrb	r7, [r6, #19]
    513c:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    513e:	2908      	cmp	r1, #8
    5140:	d100      	bne.n	5144 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5142:	2104      	movs	r1, #4
    5144:	f007 f9cc 	bl	c4e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5148:	b90f      	cbnz	r7, 514e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    514a:	1d00      	adds	r0, r0, #4
    514c:	b280      	uxth	r0, r0
    514e:	4285      	cmp	r5, r0
    5150:	d200      	bcs.n	5154 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    5152:	4628      	mov	r0, r5
    5154:	b2c0      	uxtb	r0, r0
    5156:	f888 0009 	strb.w	r0, [r8, #9]
    515a:	7cf2      	ldrb	r2, [r6, #19]
    515c:	b102      	cbz	r2, 5160 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    515e:	2204      	movs	r2, #4
    5160:	4410      	add	r0, r2
    5162:	f888 0007 	strb.w	r0, [r8, #7]
    5166:	7cb1      	ldrb	r1, [r6, #18]
    5168:	b1a1      	cbz	r1, 5194 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
    516a:	491c      	ldr	r1, [pc, #112]	; (51dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    516c:	3108      	adds	r1, #8
    516e:	f881 b018 	strb.w	fp, [r1, #24]
    5172:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
    5176:	e9c1 0204 	strd	r0, r2, [r1, #16]
    517a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    517e:	f007 f8a3 	bl	c2c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5182:	4916      	ldr	r1, [pc, #88]	; (51dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    5184:	4603      	mov	r3, r0
    5186:	22fb      	movs	r2, #251	; 0xfb
    5188:	3108      	adds	r1, #8
    518a:	2000      	movs	r0, #0
    518c:	f004 ff44 	bl	a018 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5190:	f004 ff78 	bl	a084 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5194:	2001      	movs	r0, #1
    5196:	f000 fb87 	bl	58a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    519a:	4811      	ldr	r0, [pc, #68]	; (51e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    519c:	6800      	ldr	r0, [r0, #0]
    519e:	2803      	cmp	r0, #3
    51a0:	d013      	beq.n	51ca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    51a2:	e000      	b.n	51a6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    51a4:	e00f      	b.n	51c6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
    51a6:	280b      	cmp	r0, #11
    51a8:	d00f      	beq.n	51ca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    51aa:	4648      	mov	r0, r9
    51ac:	f840 af52 	str.w	sl, [r0, #82]!
    51b0:	f8c0 a004 	str.w	sl, [r0, #4]
    51b4:	4809      	ldr	r0, [pc, #36]	; (51dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    51b6:	88b1      	ldrh	r1, [r6, #4]
    51b8:	3052      	adds	r0, #82	; 0x52
    51ba:	8041      	strh	r1, [r0, #2]
    51bc:	8821      	ldrh	r1, [r4, #0]
    51be:	8001      	strh	r1, [r0, #0]
    51c0:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    51c4:	7101      	strb	r1, [r0, #4]
    51c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51ca:	f240 11c1 	movw	r1, #449	; 0x1c1
    51ce:	2027      	movs	r0, #39	; 0x27
    51d0:	f7ff f9cc 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51d4:	200000ac 	.word	0x200000ac
    51d8:	00005a2c 	.word	0x00005a2c
    51dc:	20000780 	.word	0x20000780
    51e0:	40001550 	.word	0x40001550

000051e4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    51e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51e8:	4605      	mov	r5, r0
    51ea:	f000 f89f 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    51ee:	4e33      	ldr	r6, [pc, #204]	; (52bc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    51f0:	4604      	mov	r4, r0
    51f2:	6a70      	ldr	r0, [r6, #36]	; 0x24
    51f4:	7847      	ldrb	r7, [r0, #1]
    51f6:	b10d      	cbz	r5, 51fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    51f8:	2d01      	cmp	r5, #1
    51fa:	d103      	bne.n	5204 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    51fc:	6b71      	ldr	r1, [r6, #52]	; 0x34
    51fe:	f006 f97a 	bl	b4f6 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5202:	7070      	strb	r0, [r6, #1]
    5204:	7870      	ldrb	r0, [r6, #1]
    5206:	f04f 0800 	mov.w	r8, #0
    520a:	f04f 0901 	mov.w	r9, #1
    520e:	b150      	cbz	r0, 5226 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5210:	2801      	cmp	r0, #1
    5212:	d01a      	beq.n	524a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5214:	2802      	cmp	r0, #2
    5216:	d034      	beq.n	5282 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5218:	2803      	cmp	r0, #3
    521a:	d048      	beq.n	52ae <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    521c:	f240 4115 	movw	r1, #1045	; 0x415
    5220:	2027      	movs	r0, #39	; 0x27
    5222:	f7ff f9a3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5226:	2d01      	cmp	r5, #1
    5228:	d032      	beq.n	5290 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    522a:	f000 f8d9 	bl	53e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    522e:	4639      	mov	r1, r7
    5230:	2201      	movs	r2, #1
    5232:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5234:	f006 fd6b 	bl	bd0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5238:	e028      	b.n	528c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    523a:	bf00      	nop
    523c:	f884 8008 	strb.w	r8, [r4, #8]
    5240:	e031      	b.n	52a6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5242:	bf00      	nop
    5244:	f884 9008 	strb.w	r9, [r4, #8]
    5248:	e02d      	b.n	52a6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    524a:	2d01      	cmp	r5, #1
    524c:	d008      	beq.n	5260 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    524e:	f000 f8c7 	bl	53e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5252:	4639      	mov	r1, r7
    5254:	2200      	movs	r2, #0
    5256:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5258:	f006 fd59 	bl	bd0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    525c:	2d02      	cmp	r5, #2
    525e:	d00b      	beq.n	5278 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5260:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5264:	1c40      	adds	r0, r0, #1
    5266:	f141 0100 	adc.w	r1, r1, #0
    526a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    526e:	7a20      	ldrb	r0, [r4, #8]
    5270:	2801      	cmp	r0, #1
    5272:	d003      	beq.n	527c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5274:	f884 9008 	strb.w	r9, [r4, #8]
    5278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    527c:	f884 8008 	strb.w	r8, [r4, #8]
    5280:	e7fa      	b.n	5278 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5282:	2d01      	cmp	r5, #1
    5284:	d004      	beq.n	5290 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5286:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5288:	f006 ff0b 	bl	c0a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    528c:	2d02      	cmp	r5, #2
    528e:	d0f3      	beq.n	5278 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5290:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5294:	1c40      	adds	r0, r0, #1
    5296:	f141 0100 	adc.w	r1, r1, #0
    529a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    529e:	7a20      	ldrb	r0, [r4, #8]
    52a0:	2801      	cmp	r0, #1
    52a2:	d1cf      	bne.n	5244 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    52a4:	e7ca      	b.n	523c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    52a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52aa:	f001 b883 	b.w	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    52ae:	2d01      	cmp	r5, #1
    52b0:	d0e2      	beq.n	5278 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    52b2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    52b4:	f006 fef5 	bl	c0a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    52b8:	e7f5      	b.n	52a6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    52ba:	0000      	.short	0x0000
    52bc:	200000ac 	.word	0x200000ac

000052c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    52c0:	4812      	ldr	r0, [pc, #72]	; (530c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    52c2:	b508      	push	{r3, lr}
    52c4:	7801      	ldrb	r1, [r0, #0]
    52c6:	b139      	cbz	r1, 52d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    52c8:	7800      	ldrb	r0, [r0, #0]
    52ca:	2801      	cmp	r0, #1
    52cc:	d006      	beq.n	52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    52ce:	f240 11d9 	movw	r1, #473	; 0x1d9
    52d2:	2027      	movs	r0, #39	; 0x27
    52d4:	f7ff f94a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52d8:	f000 f9ce 	bl	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    52dc:	f000 f820 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    52e0:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    52e4:	f88d 1000 	strb.w	r1, [sp]
    52e8:	9900      	ldr	r1, [sp, #0]
    52ea:	9100      	str	r1, [sp, #0]
    52ec:	f89d 1000 	ldrb.w	r1, [sp]
    52f0:	2900      	cmp	r1, #0
    52f2:	d10a      	bne.n	530a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    52f4:	6f01      	ldr	r1, [r0, #112]	; 0x70
    52f6:	2900      	cmp	r1, #0
    52f8:	d007      	beq.n	530a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    52fa:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    52fe:	2200      	movs	r2, #0
    5300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5304:	4611      	mov	r1, r2
    5306:	f7fd bdd3 	b.w	2eb0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    530a:	bd08      	pop	{r3, pc}
    530c:	200000ac 	.word	0x200000ac
    5310:	4a02      	ldr	r2, [pc, #8]	; (531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5312:	8993      	ldrh	r3, [r2, #12]
    5314:	4303      	orrs	r3, r0
    5316:	8193      	strh	r3, [r2, #12]
    5318:	6952      	ldr	r2, [r2, #20]
    531a:	4710      	bx	r2
    531c:	200000ac 	.word	0x200000ac
    5320:	4801      	ldr	r0, [pc, #4]	; (5328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5322:	6840      	ldr	r0, [r0, #4]
    5324:	4770      	bx	lr
    5326:	0000      	.short	0x0000
    5328:	200000e4 	.word	0x200000e4
    532c:	4801      	ldr	r0, [pc, #4]	; (5334 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    532e:	6840      	ldr	r0, [r0, #4]
    5330:	3078      	adds	r0, #120	; 0x78
    5332:	4770      	bx	lr
    5334:	200000e4 	.word	0x200000e4
    5338:	4a01      	ldr	r2, [pc, #4]	; (5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    533a:	2100      	movs	r1, #0
    533c:	6952      	ldr	r2, [r2, #20]
    533e:	4710      	bx	r2
    5340:	200000ac 	.word	0x200000ac
    5344:	b570      	push	{r4, r5, r6, lr}
    5346:	f7ff fff1 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    534a:	4604      	mov	r4, r0
    534c:	f7ff ffe8 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5350:	4605      	mov	r5, r0
    5352:	4621      	mov	r1, r4
    5354:	f007 f96f 	bl	c636 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5358:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    535c:	2901      	cmp	r1, #1
    535e:	d114      	bne.n	538a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5360:	2800      	cmp	r0, #0
    5362:	d012      	beq.n	538a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5364:	4909      	ldr	r1, [pc, #36]	; (538c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    5366:	2001      	movs	r0, #1
    5368:	684a      	ldr	r2, [r1, #4]
    536a:	8829      	ldrh	r1, [r5, #0]
    536c:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    5370:	7a61      	ldrb	r1, [r4, #9]
    5372:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    5376:	7aa1      	ldrb	r1, [r4, #10]
    5378:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    537c:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    5380:	7010      	strb	r0, [r2, #0]
    5382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5386:	f001 b815 	b.w	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    538a:	bd70      	pop	{r4, r5, r6, pc}
    538c:	200000e4 	.word	0x200000e4
    5390:	b570      	push	{r4, r5, r6, lr}
    5392:	4605      	mov	r5, r0
    5394:	2901      	cmp	r1, #1
    5396:	d81c      	bhi.n	53d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5398:	4c10      	ldr	r4, [pc, #64]	; (53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    539a:	69a1      	ldr	r1, [r4, #24]
    539c:	4788      	blx	r1
    539e:	b1c0      	cbz	r0, 53d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    53a0:	7960      	ldrb	r0, [r4, #5]
    53a2:	b9b0      	cbnz	r0, 53d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    53a4:	2d01      	cmp	r5, #1
    53a6:	d116      	bne.n	53d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    53a8:	f104 0010 	add.w	r0, r4, #16
    53ac:	7800      	ldrb	r0, [r0, #0]
    53ae:	06c1      	lsls	r1, r0, #27
    53b0:	d405      	bmi.n	53be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    53b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    53b4:	7809      	ldrb	r1, [r1, #0]
    53b6:	06c9      	lsls	r1, r1, #27
    53b8:	d401      	bmi.n	53be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    53ba:	2101      	movs	r1, #1
    53bc:	e000      	b.n	53c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    53be:	2100      	movs	r1, #0
    53c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    53c2:	b91a      	cbnz	r2, 53cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    53c4:	8962      	ldrh	r2, [r4, #10]
    53c6:	b10a      	cbz	r2, 53cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    53c8:	06c0      	lsls	r0, r0, #27
    53ca:	d502      	bpl.n	53d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    53cc:	89a0      	ldrh	r0, [r4, #12]
    53ce:	4301      	orrs	r1, r0
    53d0:	d001      	beq.n	53d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    53d2:	2001      	movs	r0, #1
    53d4:	bd70      	pop	{r4, r5, r6, pc}
    53d6:	2000      	movs	r0, #0
    53d8:	bd70      	pop	{r4, r5, r6, pc}
    53da:	0000      	.short	0x0000
    53dc:	200000ac 	.word	0x200000ac
    53e0:	b510      	push	{r4, lr}
    53e2:	4c08      	ldr	r4, [pc, #32]	; (5404 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    53e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    53e6:	b138      	cbz	r0, 53f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    53e8:	8962      	ldrh	r2, [r4, #10]
    53ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
    53ec:	1cd2      	adds	r2, r2, #3
    53ee:	f005 ff59 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    53f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    53f4:	6260      	str	r0, [r4, #36]	; 0x24
    53f6:	bd10      	pop	{r4, pc}
    53f8:	f240 415b 	movw	r1, #1115	; 0x45b
    53fc:	2027      	movs	r0, #39	; 0x27
    53fe:	f7ff f8b5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5402:	0000      	.short	0x0000
    5404:	200000ac 	.word	0x200000ac
    5408:	b510      	push	{r4, lr}
    540a:	f7ff ff89 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    540e:	4604      	mov	r4, r0
    5410:	f7ff ff8c 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5414:	7b41      	ldrb	r1, [r0, #13]
    5416:	4a0a      	ldr	r2, [pc, #40]	; (5440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    5418:	2924      	cmp	r1, #36	; 0x24
    541a:	d008      	beq.n	542e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    541c:	7b80      	ldrb	r0, [r0, #14]
    541e:	2824      	cmp	r0, #36	; 0x24
    5420:	d005      	beq.n	542e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5422:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5426:	2804      	cmp	r0, #4
    5428:	d100      	bne.n	542c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    542a:	2008      	movs	r0, #8
    542c:	bd10      	pop	{r4, pc}
    542e:	6850      	ldr	r0, [r2, #4]
    5430:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    5434:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    543c:	f006 bf52 	b.w	c2e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    5440:	200000e4 	.word	0x200000e4
    5444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5448:	4689      	mov	r9, r1
    544a:	4606      	mov	r6, r0
    544c:	f7ff ff6e 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5450:	4c58      	ldr	r4, [pc, #352]	; (55b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    5452:	2700      	movs	r7, #0
    5454:	4605      	mov	r5, r0
    5456:	f88d 7000 	strb.w	r7, [sp]
    545a:	7820      	ldrb	r0, [r4, #0]
    545c:	2802      	cmp	r0, #2
    545e:	d004      	beq.n	546a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    5460:	f240 41ba 	movw	r1, #1210	; 0x4ba
    5464:	2027      	movs	r0, #39	; 0x27
    5466:	f7ff f881 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    546a:	7ba0      	ldrb	r0, [r4, #14]
    546c:	0640      	lsls	r0, r0, #25
    546e:	d406      	bmi.n	547e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    5470:	2040      	movs	r0, #64	; 0x40
    5472:	f7ff ff61 	bl	5338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5476:	89e0      	ldrh	r0, [r4, #14]
    5478:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    547c:	81e0      	strh	r0, [r4, #14]
    547e:	7ce8      	ldrb	r0, [r5, #19]
    5480:	f04f 0801 	mov.w	r8, #1
    5484:	b3c6      	cbz	r6, 54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    5486:	f004 fe2d 	bl	a0e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    548a:	f004 fe11 	bl	a0b0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    548e:	b968      	cbnz	r0, 54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5490:	7ce8      	ldrb	r0, [r5, #19]
    5492:	b158      	cbz	r0, 54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5494:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5496:	7841      	ldrb	r1, [r0, #1]
    5498:	b141      	cbz	r1, 54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    549a:	7800      	ldrb	r0, [r0, #0]
    549c:	7a29      	ldrb	r1, [r5, #8]
    549e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    54a2:	4288      	cmp	r0, r1
    54a4:	d102      	bne.n	54ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    54a6:	f884 8002 	strb.w	r8, [r4, #2]
    54aa:	e064      	b.n	5576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    54ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54ae:	7841      	ldrb	r1, [r0, #1]
    54b0:	8161      	strh	r1, [r4, #10]
    54b2:	b121      	cbz	r1, 54be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    54b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    54b6:	f006 fdc1 	bl	c03c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    54ba:	62a0      	str	r0, [r4, #40]	; 0x28
    54bc:	e000      	b.n	54c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    54be:	62a7      	str	r7, [r4, #40]	; 0x28
    54c0:	89e0      	ldrh	r0, [r4, #14]
    54c2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    54c6:	81e0      	strh	r0, [r4, #14]
    54c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54ca:	79e9      	ldrb	r1, [r5, #7]
    54cc:	7800      	ldrb	r0, [r0, #0]
    54ce:	f3c0 0080 	ubfx	r0, r0, #2, #1
    54d2:	4288      	cmp	r0, r1
    54d4:	d005      	beq.n	54e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    54d6:	f000 f963 	bl	57a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    54da:	89e0      	ldrh	r0, [r4, #14]
    54dc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    54e0:	81e0      	strh	r0, [r4, #14]
    54e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54e4:	7a29      	ldrb	r1, [r5, #8]
    54e6:	7800      	ldrb	r0, [r0, #0]
    54e8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    54ec:	4288      	cmp	r0, r1
    54ee:	d10e      	bne.n	550e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    54f0:	4668      	mov	r0, sp
    54f2:	f000 f917 	bl	5724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    54f6:	e00a      	b.n	550e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    54f8:	e7ff      	b.n	54fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    54fa:	b108      	cbz	r0, 5500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    54fc:	f004 fdec 	bl	a0d8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5500:	78e0      	ldrb	r0, [r4, #3]
    5502:	1c40      	adds	r0, r0, #1
    5504:	70e0      	strb	r0, [r4, #3]
    5506:	89e0      	ldrh	r0, [r4, #14]
    5508:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    550c:	81e0      	strh	r0, [r4, #14]
    550e:	7ca8      	ldrb	r0, [r5, #18]
    5510:	b1a0      	cbz	r0, 553c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    5512:	f7ff ff05 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5516:	4928      	ldr	r1, [pc, #160]	; (55b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5518:	f881 8018 	strb.w	r8, [r1, #24]
    551c:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    5520:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5524:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5528:	f006 fece 	bl	c2c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    552c:	4603      	mov	r3, r0
    552e:	22fb      	movs	r2, #251	; 0xfb
    5530:	4921      	ldr	r1, [pc, #132]	; (55b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5532:	2000      	movs	r0, #0
    5534:	f004 fd70 	bl	a018 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5538:	f004 fda4 	bl	a084 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    553c:	4d1e      	ldr	r5, [pc, #120]	; (55b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    553e:	354a      	adds	r5, #74	; 0x4a
    5540:	f1b9 0f00 	cmp.w	r9, #0
    5544:	d104      	bne.n	5550 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    5546:	78e1      	ldrb	r1, [r4, #3]
    5548:	2001      	movs	r0, #1
    554a:	f7ff ff21 	bl	5390 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    554e:	b1b0      	cbz	r0, 557e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    5550:	f005 f968 	bl	a824 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5554:	f89d 0000 	ldrb.w	r0, [sp]
    5558:	b110      	cbz	r0, 5560 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    555a:	2000      	movs	r0, #0
    555c:	f7ff fe42 	bl	51e4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5560:	b136      	cbz	r6, 5570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    5562:	70e7      	strb	r7, [r4, #3]
    5564:	7968      	ldrb	r0, [r5, #5]
    5566:	1c40      	adds	r0, r0, #1
    5568:	7168      	strb	r0, [r5, #5]
    556a:	f7ff feeb 	bl	5344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    556e:	e002      	b.n	5576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5570:	79a8      	ldrb	r0, [r5, #6]
    5572:	1c40      	adds	r0, r0, #1
    5574:	71a8      	strb	r0, [r5, #6]
    5576:	f000 f87f 	bl	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    557a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    557e:	f89d 0000 	ldrb.w	r0, [sp]
    5582:	b110      	cbz	r0, 558a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5584:	2001      	movs	r0, #1
    5586:	f7ff fe2d 	bl	51e4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    558a:	2000      	movs	r0, #0
    558c:	f000 f98c 	bl	58a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5590:	f89d 0000 	ldrb.w	r0, [sp]
    5594:	b110      	cbz	r0, 559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    5596:	2002      	movs	r0, #2
    5598:	f7ff fe24 	bl	51e4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    559c:	b136      	cbz	r6, 55ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    559e:	70e7      	strb	r7, [r4, #3]
    55a0:	7968      	ldrb	r0, [r5, #5]
    55a2:	1c40      	adds	r0, r0, #1
    55a4:	7168      	strb	r0, [r5, #5]
    55a6:	f7ff fecd 	bl	5344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    55aa:	e7e6      	b.n	557a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    55ac:	79a8      	ldrb	r0, [r5, #6]
    55ae:	1c40      	adds	r0, r0, #1
    55b0:	71a8      	strb	r0, [r5, #6]
    55b2:	e7e2      	b.n	557a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    55b4:	200000ac 	.word	0x200000ac
    55b8:	20000788 	.word	0x20000788
    55bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55c0:	4688      	mov	r8, r1
    55c2:	4681      	mov	r9, r0
    55c4:	f7ff feb2 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    55c8:	4d29      	ldr	r5, [pc, #164]	; (5670 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    55ca:	4604      	mov	r4, r0
    55cc:	7828      	ldrb	r0, [r5, #0]
    55ce:	2801      	cmp	r0, #1
    55d0:	d004      	beq.n	55dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    55d2:	f240 416a 	movw	r1, #1130	; 0x46a
    55d6:	2027      	movs	r0, #39	; 0x27
    55d8:	f7fe ffc8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55dc:	7860      	ldrb	r0, [r4, #1]
    55de:	2600      	movs	r6, #0
    55e0:	2701      	movs	r7, #1
    55e2:	b120      	cbz	r0, 55ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    55e4:	7066      	strb	r6, [r4, #1]
    55e6:	2100      	movs	r1, #0
    55e8:	2004      	movs	r0, #4
    55ea:	f7ff fe91 	bl	5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    55ee:	6a29      	ldr	r1, [r5, #32]
    55f0:	7808      	ldrb	r0, [r1, #0]
    55f2:	43c0      	mvns	r0, r0
    55f4:	0780      	lsls	r0, r0, #30
    55f6:	d109      	bne.n	560c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    55f8:	79a0      	ldrb	r0, [r4, #6]
    55fa:	bb88      	cbnz	r0, 5660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    55fc:	2002      	movs	r0, #2
    55fe:	f7ff fe87 	bl	5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5602:	6a28      	ldr	r0, [r5, #32]
    5604:	7800      	ldrb	r0, [r0, #0]
    5606:	43c0      	mvns	r0, r0
    5608:	0780      	lsls	r0, r0, #30
    560a:	d029      	beq.n	5660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    560c:	6a28      	ldr	r0, [r5, #32]
    560e:	7840      	ldrb	r0, [r0, #1]
    5610:	b110      	cbz	r0, 5618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    5612:	2002      	movs	r0, #2
    5614:	71a0      	strb	r0, [r4, #6]
    5616:	e000      	b.n	561a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5618:	71a7      	strb	r7, [r4, #6]
    561a:	7ce0      	ldrb	r0, [r4, #19]
    561c:	b1a0      	cbz	r0, 5648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    561e:	f7ff fe7f 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5622:	4914      	ldr	r1, [pc, #80]	; (5674 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5624:	7a6d      	ldrb	r5, [r5, #9]
    5626:	760e      	strb	r6, [r1, #24]
    5628:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    562c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5630:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5634:	f006 fe48 	bl	c2c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5638:	4603      	mov	r3, r0
    563a:	462a      	mov	r2, r5
    563c:	490d      	ldr	r1, [pc, #52]	; (5674 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    563e:	2001      	movs	r0, #1
    5640:	f004 fcea 	bl	a018 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5644:	f004 fd1e 	bl	a084 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5648:	ea38 0009 	bics.w	r0, r8, r9
    564c:	d004      	beq.n	5658 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    564e:	2100      	movs	r1, #0
    5650:	4608      	mov	r0, r1
    5652:	f7ff fe9d 	bl	5390 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5656:	b128      	cbz	r0, 5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    5658:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    565c:	f000 b80c 	b.w	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5660:	2003      	movs	r0, #3
    5662:	e7d7      	b.n	5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5664:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5668:	2000      	movs	r0, #0
    566a:	f000 b8df 	b.w	582c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    566e:	0000      	.short	0x0000
    5670:	200000ac 	.word	0x200000ac
    5674:	20000788 	.word	0x20000788
    5678:	b510      	push	{r4, lr}
    567a:	f004 fdc5 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    567e:	f004 fc81 	bl	9f84 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5682:	4c0d      	ldr	r4, [pc, #52]	; (56b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    5684:	89e0      	ldrh	r0, [r4, #14]
    5686:	f7ff fe57 	bl	5338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    568a:	69e2      	ldr	r2, [r4, #28]
    568c:	7961      	ldrb	r1, [r4, #5]
    568e:	78a0      	ldrb	r0, [r4, #2]
    5690:	4790      	blx	r2
    5692:	480a      	ldr	r0, [pc, #40]	; (56bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5694:	7c40      	ldrb	r0, [r0, #17]
    5696:	b158      	cbz	r0, 56b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    5698:	4808      	ldr	r0, [pc, #32]	; (56bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    569a:	3852      	subs	r0, #82	; 0x52
    569c:	f850 1f52 	ldr.w	r1, [r0, #82]!
    56a0:	6081      	str	r1, [r0, #8]
    56a2:	6841      	ldr	r1, [r0, #4]
    56a4:	60c1      	str	r1, [r0, #12]
    56a6:	4805      	ldr	r0, [pc, #20]	; (56bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    56a8:	2101      	movs	r1, #1
    56aa:	7401      	strb	r1, [r0, #16]
    56ac:	f000 fe82 	bl	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    56b0:	2000      	movs	r0, #0
    56b2:	7020      	strb	r0, [r4, #0]
    56b4:	bd10      	pop	{r4, pc}
    56b6:	0000      	.short	0x0000
    56b8:	200000ac 	.word	0x200000ac
    56bc:	200007d2 	.word	0x200007d2
    56c0:	4808      	ldr	r0, [pc, #32]	; (56e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    56c2:	b510      	push	{r4, lr}
    56c4:	7800      	ldrb	r0, [r0, #0]
    56c6:	2802      	cmp	r0, #2
    56c8:	d004      	beq.n	56d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    56ca:	f240 2111 	movw	r1, #529	; 0x211
    56ce:	2027      	movs	r0, #39	; 0x27
    56d0:	f7fe ff4c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56d4:	4904      	ldr	r1, [pc, #16]	; (56e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    56d6:	2001      	movs	r0, #1
    56d8:	71c8      	strb	r0, [r1, #7]
    56da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56de:	f7ff bfcb 	b.w	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    56e2:	0000      	.short	0x0000
    56e4:	200000ac 	.word	0x200000ac
    56e8:	200007d2 	.word	0x200007d2
    56ec:	b430      	push	{r4, r5}
    56ee:	4b0c      	ldr	r3, [pc, #48]	; (5720 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    56f0:	b942      	cbnz	r2, 5704 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    56f2:	79da      	ldrb	r2, [r3, #7]
    56f4:	2aff      	cmp	r2, #255	; 0xff
    56f6:	d105      	bne.n	5704 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    56f8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    56fc:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5700:	42a2      	cmp	r2, r4
    5702:	d00b      	beq.n	571c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    5704:	b131      	cbz	r1, 5714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    5706:	79da      	ldrb	r2, [r3, #7]
    5708:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    570c:	bc30      	pop	{r4, r5}
    570e:	4610      	mov	r0, r2
    5710:	f005 b8c0 	b.w	a894 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5714:	22ff      	movs	r2, #255	; 0xff
    5716:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    571a:	e7f7      	b.n	570c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    571c:	bc30      	pop	{r4, r5}
    571e:	4770      	bx	lr
    5720:	200000ac 	.word	0x200000ac
    5724:	b570      	push	{r4, r5, r6, lr}
    5726:	4606      	mov	r6, r0
    5728:	f7ff fe00 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    572c:	4a1b      	ldr	r2, [pc, #108]	; (579c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    572e:	4604      	mov	r4, r0
    5730:	2501      	movs	r5, #1
    5732:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5734:	7808      	ldrb	r0, [r1, #0]
    5736:	f000 0003 	and.w	r0, r0, #3
    573a:	2801      	cmp	r0, #1
    573c:	d00c      	beq.n	5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    573e:	2802      	cmp	r0, #2
    5740:	d00a      	beq.n	5758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5742:	2803      	cmp	r0, #3
    5744:	d121      	bne.n	578a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5746:	7065      	strb	r5, [r4, #1]
    5748:	89d0      	ldrh	r0, [r2, #14]
    574a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    574e:	81d0      	strh	r0, [r2, #14]
    5750:	2001      	movs	r0, #1
    5752:	f7ff fddd 	bl	5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5756:	e018      	b.n	578a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5758:	7848      	ldrb	r0, [r1, #1]
    575a:	b1b0      	cbz	r0, 578a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    575c:	89d1      	ldrh	r1, [r2, #14]
    575e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5762:	81d1      	strh	r1, [r2, #14]
    5764:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5766:	2900      	cmp	r1, #0
    5768:	d009      	beq.n	577e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    576a:	28fb      	cmp	r0, #251	; 0xfb
    576c:	d808      	bhi.n	5780 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    576e:	7990      	ldrb	r0, [r2, #6]
    5770:	b120      	cbz	r0, 577c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    5772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5776:	2020      	movs	r0, #32
    5778:	f7ff bdde 	b.w	5338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    577c:	7035      	strb	r5, [r6, #0]
    577e:	bd70      	pop	{r4, r5, r6, pc}
    5780:	7950      	ldrb	r0, [r2, #5]
    5782:	f040 0010 	orr.w	r0, r0, #16
    5786:	7150      	strb	r0, [r2, #5]
    5788:	bd70      	pop	{r4, r5, r6, pc}
    578a:	7a20      	ldrb	r0, [r4, #8]
    578c:	2801      	cmp	r0, #1
    578e:	d001      	beq.n	5794 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    5790:	7225      	strb	r5, [r4, #8]
    5792:	bd70      	pop	{r4, r5, r6, pc}
    5794:	2000      	movs	r0, #0
    5796:	7220      	strb	r0, [r4, #8]
    5798:	bd70      	pop	{r4, r5, r6, pc}
    579a:	0000      	.short	0x0000
    579c:	200000ac 	.word	0x200000ac
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	f7ff fdc3 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    57a6:	4604      	mov	r4, r0
    57a8:	7980      	ldrb	r0, [r0, #6]
    57aa:	2800      	cmp	r0, #0
    57ac:	d027      	beq.n	57fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    57ae:	2802      	cmp	r0, #2
    57b0:	d10d      	bne.n	57ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    57b2:	4818      	ldr	r0, [pc, #96]	; (5814 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    57b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
    57b6:	f006 fa83 	bl	bcc0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    57ba:	b308      	cbz	r0, 5800 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    57bc:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    57c0:	1c40      	adds	r0, r0, #1
    57c2:	f141 0100 	adc.w	r1, r1, #0
    57c6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    57ca:	f000 fdf3 	bl	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    57ce:	2500      	movs	r5, #0
    57d0:	71a5      	strb	r5, [r4, #6]
    57d2:	78a0      	ldrb	r0, [r4, #2]
    57d4:	2601      	movs	r6, #1
    57d6:	b170      	cbz	r0, 57f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    57d8:	70a5      	strb	r5, [r4, #2]
    57da:	f7ff fb7d 	bl	4ed8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    57de:	b190      	cbz	r0, 5806 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    57e0:	2100      	movs	r1, #0
    57e2:	2008      	movs	r0, #8
    57e4:	f7ff fd94 	bl	5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    57e8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    57ec:	1c40      	adds	r0, r0, #1
    57ee:	f141 0100 	adc.w	r1, r1, #0
    57f2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    57f6:	79e0      	ldrb	r0, [r4, #7]
    57f8:	2801      	cmp	r0, #1
    57fa:	d009      	beq.n	5810 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    57fc:	71e6      	strb	r6, [r4, #7]
    57fe:	bd70      	pop	{r4, r5, r6, pc}
    5800:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5804:	e001      	b.n	580a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    5806:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    580a:	2027      	movs	r0, #39	; 0x27
    580c:	f7fe feae 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5810:	71e5      	strb	r5, [r4, #7]
    5812:	bd70      	pop	{r4, r5, r6, pc}
    5814:	200000ac 	.word	0x200000ac
    5818:	4803      	ldr	r0, [pc, #12]	; (5828 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    581a:	7800      	ldrb	r0, [r0, #0]
    581c:	2800      	cmp	r0, #0
    581e:	d001      	beq.n	5824 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    5820:	f7ff bf2a 	b.w	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5824:	4770      	bx	lr
    5826:	0000      	.short	0x0000
    5828:	200000ac 	.word	0x200000ac
    582c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5830:	4607      	mov	r7, r0
    5832:	f7ff fd75 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5836:	4680      	mov	r8, r0
    5838:	f7ff fd78 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    583c:	4c17      	ldr	r4, [pc, #92]	; (589c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    583e:	4605      	mov	r5, r0
    5840:	463a      	mov	r2, r7
    5842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5844:	6260      	str	r0, [r4, #36]	; 0x24
    5846:	2101      	movs	r1, #1
    5848:	4640      	mov	r0, r8
    584a:	f7ff ff4f 	bl	56ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    584e:	7ce8      	ldrb	r0, [r5, #19]
    5850:	2600      	movs	r6, #0
    5852:	b178      	cbz	r0, 5874 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5854:	4812      	ldr	r0, [pc, #72]	; (58a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5856:	f004 ff3b 	bl	a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    585a:	4812      	ldr	r0, [pc, #72]	; (58a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    585c:	7606      	strb	r6, [r0, #24]
    585e:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    5862:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5866:	490e      	ldr	r1, [pc, #56]	; (58a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5868:	6a60      	ldr	r0, [r4, #36]	; 0x24
    586a:	f004 fb5d 	bl	9f28 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    586e:	f004 fb6f 	bl	9f50 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    5872:	e004      	b.n	587e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5874:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5876:	f004 ff2b 	bl	a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    587a:	f004 fb83 	bl	9f84 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    587e:	b917      	cbnz	r7, 5886 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    5880:	4630      	mov	r0, r6
    5882:	f004 fdd9 	bl	a438 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5886:	2100      	movs	r1, #0
    5888:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    588c:	4608      	mov	r0, r1
    588e:	f004 ffab 	bl	a7e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5892:	2002      	movs	r0, #2
    5894:	7020      	strb	r0, [r4, #0]
    5896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    589a:	0000      	.short	0x0000
    589c:	200000ac 	.word	0x200000ac
    58a0:	20000680 	.word	0x20000680
    58a4:	20000788 	.word	0x20000788
    58a8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    58ac:	4604      	mov	r4, r0
    58ae:	f7ff fd3d 	bl	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    58b2:	4605      	mov	r5, r0
    58b4:	f7ff fd34 	bl	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    58b8:	4606      	mov	r6, r0
    58ba:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5a20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    58be:	4622      	mov	r2, r4
    58c0:	2100      	movs	r1, #0
    58c2:	f7ff ff13 	bl	56ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    58c6:	79a8      	ldrb	r0, [r5, #6]
    58c8:	f04f 0800 	mov.w	r8, #0
    58cc:	2701      	movs	r7, #1
    58ce:	f1a9 0420 	sub.w	r4, r9, #32
    58d2:	b140      	cbz	r0, 58e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    58d4:	2801      	cmp	r0, #1
    58d6:	d01f      	beq.n	5918 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    58d8:	2802      	cmp	r0, #2
    58da:	d030      	beq.n	593e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    58dc:	2803      	cmp	r0, #3
    58de:	d03c      	beq.n	595a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    58e0:	f240 21ae 	movw	r1, #686	; 0x2ae
    58e4:	e058      	b.n	5998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    58e6:	7a20      	ldrb	r0, [r4, #8]
    58e8:	2150      	movs	r1, #80	; 0x50
    58ea:	f8ad 0004 	strh.w	r0, [sp, #4]
    58ee:	5388      	strh	r0, [r1, r6]
    58f0:	4648      	mov	r0, r9
    58f2:	f7ff fb1b 	bl	4f2c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    58f6:	b128      	cbz	r0, 5904 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    58f8:	2080      	movs	r0, #128	; 0x80
    58fa:	6a21      	ldr	r1, [r4, #32]
    58fc:	f7ff fd08 	bl	5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5900:	70af      	strb	r7, [r5, #2]
    5902:	e02e      	b.n	5962 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5904:	466a      	mov	r2, sp
    5906:	a901      	add	r1, sp, #4
    5908:	6b20      	ldr	r0, [r4, #48]	; 0x30
    590a:	f006 fcf5 	bl	c2f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    590e:	6220      	str	r0, [r4, #32]
    5910:	b110      	cbz	r0, 5918 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5912:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    5916:	b111      	cbz	r1, 591e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5918:	4842      	ldr	r0, [pc, #264]	; (5a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    591a:	6220      	str	r0, [r4, #32]
    591c:	e021      	b.n	5962 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    591e:	f89d 1000 	ldrb.w	r1, [sp]
    5922:	b931      	cbnz	r1, 5932 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    5924:	f8a0 8000 	strh.w	r8, [r0]
    5928:	f880 8002 	strb.w	r8, [r0, #2]
    592c:	2101      	movs	r1, #1
    592e:	f006 ff7b 	bl	c828 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5932:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5936:	6a20      	ldr	r0, [r4, #32]
    5938:	f006 ff48 	bl	c7cc <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    593c:	e011      	b.n	5962 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    593e:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    5942:	f8ad 0004 	strh.w	r0, [sp, #4]
    5946:	466a      	mov	r2, sp
    5948:	a901      	add	r1, sp, #4
    594a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    594c:	f006 fcd4 	bl	c2f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5950:	6220      	str	r0, [r4, #32]
    5952:	b930      	cbnz	r0, 5962 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5954:	f240 219f 	movw	r1, #671	; 0x29f
    5958:	e01e      	b.n	5998 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    595a:	4648      	mov	r0, r9
    595c:	f7ff fae6 	bl	4f2c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5960:	b1c0      	cbz	r0, 5994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    5962:	6a20      	ldr	r0, [r4, #32]
    5964:	2308      	movs	r3, #8
    5966:	7801      	ldrb	r1, [r0, #0]
    5968:	f021 0108 	bic.w	r1, r1, #8
    596c:	7001      	strb	r1, [r0, #0]
    596e:	79ea      	ldrb	r2, [r5, #7]
    5970:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5974:	4311      	orrs	r1, r2
    5976:	f021 0104 	bic.w	r1, r1, #4
    597a:	7001      	strb	r1, [r0, #0]
    597c:	7a2a      	ldrb	r2, [r5, #8]
    597e:	2304      	movs	r3, #4
    5980:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5984:	4311      	orrs	r1, r2
    5986:	f021 0110 	bic.w	r1, r1, #16
    598a:	7001      	strb	r1, [r0, #0]
    598c:	43c9      	mvns	r1, r1
    598e:	0789      	lsls	r1, r1, #30
    5990:	d005      	beq.n	599e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    5992:	e007      	b.n	59a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    5994:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    5998:	2027      	movs	r0, #39	; 0x27
    599a:	f7fe fde7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    599e:	78c0      	ldrb	r0, [r0, #3]
    59a0:	2802      	cmp	r0, #2
    59a2:	d00f      	beq.n	59c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    59a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    59a6:	f006 fa8a 	bl	bebe <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    59aa:	b108      	cbz	r0, 59b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    59ac:	2101      	movs	r1, #1
    59ae:	e00a      	b.n	59c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    59b0:	6a20      	ldr	r0, [r4, #32]
    59b2:	7800      	ldrb	r0, [r0, #0]
    59b4:	43c0      	mvns	r0, r0
    59b6:	0780      	lsls	r0, r0, #30
    59b8:	d004      	beq.n	59c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    59ba:	f7ff fa75 	bl	4ea8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    59be:	f080 0101 	eor.w	r1, r0, #1
    59c2:	e000      	b.n	59c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    59c4:	2100      	movs	r1, #0
    59c6:	6a20      	ldr	r0, [r4, #32]
    59c8:	7802      	ldrb	r2, [r0, #0]
    59ca:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    59ce:	7001      	strb	r1, [r0, #0]
    59d0:	7ca9      	ldrb	r1, [r5, #18]
    59d2:	b191      	cbz	r1, 59fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    59d4:	7841      	ldrb	r1, [r0, #1]
    59d6:	b181      	cbz	r1, 59fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    59d8:	4813      	ldr	r0, [pc, #76]	; (5a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    59da:	f004 fe79 	bl	a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    59de:	4811      	ldr	r0, [pc, #68]	; (5a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    59e0:	3828      	subs	r0, #40	; 0x28
    59e2:	7607      	strb	r7, [r0, #24]
    59e4:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    59e8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    59ec:	480e      	ldr	r0, [pc, #56]	; (5a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    59ee:	6a21      	ldr	r1, [r4, #32]
    59f0:	f004 fa9a 	bl	9f28 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    59f4:	f004 fae4 	bl	9fc0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    59f8:	e003      	b.n	5a02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    59fa:	f004 fe69 	bl	a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    59fe:	f004 fac1 	bl	9f84 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5a02:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5a06:	2101      	movs	r1, #1
    5a08:	2000      	movs	r0, #0
    5a0a:	f004 feed 	bl	a7e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5a0e:	7127      	strb	r7, [r4, #4]
    5a10:	6a20      	ldr	r0, [r4, #32]
    5a12:	8801      	ldrh	r1, [r0, #0]
    5a14:	8221      	strh	r1, [r4, #16]
    5a16:	7880      	ldrb	r0, [r0, #2]
    5a18:	74a0      	strb	r0, [r4, #18]
    5a1a:	7027      	strb	r7, [r4, #0]
    5a1c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5a20:	200000cc 	.word	0x200000cc
    5a24:	200007b0 	.word	0x200007b0
    5a28:	20000680 	.word	0x20000680
    5a2c:	000056c1 	.word	0x000056c1
    5a30:	00005445 	.word	0x00005445
    5a34:	000055bd 	.word	0x000055bd
    5a38:	00005819 	.word	0x00005819

00005a3c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5a3c:	4800      	ldr	r0, [pc, #0]	; (5a40 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5a3e:	4770      	bx	lr
    5a40:	2000116d 	.word	0x2000116d

00005a44 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    5a44:	b570      	push	{r4, r5, r6, lr}
    5a46:	2600      	movs	r6, #0
    5a48:	4635      	mov	r5, r6
    5a4a:	4c0f      	ldr	r4, [pc, #60]	; (5a88 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    5a4c:	e018      	b.n	5a80 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    5a4e:	1960      	adds	r0, r4, r5
    5a50:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5a54:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5a58:	2a01      	cmp	r2, #1
    5a5a:	d002      	beq.n	5a62 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5a5c:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    5a60:	b160      	cbz	r0, 5a7c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    5a62:	480a      	ldr	r0, [pc, #40]	; (5a8c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    5a64:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5a68:	1c73      	adds	r3, r6, #1
    5a6a:	5585      	strb	r5, [r0, r6]
    5a6c:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    5a70:	4630      	mov	r0, r6
    5a72:	b2de      	uxtb	r6, r3
    5a74:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    5a78:	f004 ffde 	bl	aa38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5a7c:	1c6d      	adds	r5, r5, #1
    5a7e:	b2ed      	uxtb	r5, r5
    5a80:	78a0      	ldrb	r0, [r4, #2]
    5a82:	42a8      	cmp	r0, r5
    5a84:	d8e3      	bhi.n	5a4e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    5a86:	bd70      	pop	{r4, r5, r6, pc}
    5a88:	20000f9a 	.word	0x20000f9a
    5a8c:	2000025c 	.word	0x2000025c

00005a90 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5a90:	4904      	ldr	r1, [pc, #16]	; (5aa4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5a92:	788a      	ldrb	r2, [r1, #2]
    5a94:	4282      	cmp	r2, r0
    5a96:	d903      	bls.n	5aa0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5a98:	4408      	add	r0, r1
    5a9a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5a9e:	4770      	bx	lr
    5aa0:	2000      	movs	r0, #0
    5aa2:	4770      	bx	lr
    5aa4:	20000f9a 	.word	0x20000f9a

00005aa8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5aa8:	4904      	ldr	r1, [pc, #16]	; (5abc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5aaa:	788a      	ldrb	r2, [r1, #2]
    5aac:	4282      	cmp	r2, r0
    5aae:	d903      	bls.n	5ab8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5ab0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5ab4:	3083      	adds	r0, #131	; 0x83
    5ab6:	4770      	bx	lr
    5ab8:	2000      	movs	r0, #0
    5aba:	4770      	bx	lr
    5abc:	20000f9a 	.word	0x20000f9a

00005ac0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5ac0:	4a05      	ldr	r2, [pc, #20]	; (5ad8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5ac2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5ac6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5aca:	6802      	ldr	r2, [r0, #0]
    5acc:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5ad0:	8880      	ldrh	r0, [r0, #4]
    5ad2:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5ad6:	4770      	bx	lr
    5ad8:	20000f9a 	.word	0x20000f9a

00005adc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ae0:	4607      	mov	r7, r0
    5ae2:	2400      	movs	r4, #0
    5ae4:	4d10      	ldr	r5, [pc, #64]	; (5b28 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    5ae6:	e019      	b.n	5b1c <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5ae8:	4620      	mov	r0, r4
    5aea:	f7ff ffdd 	bl	5aa8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    5aee:	0003      	movs	r3, r0
    5af0:	d012      	beq.n	5b18 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5af2:	1928      	adds	r0, r5, r4
    5af4:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5af8:	b970      	cbnz	r0, 5b18 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5afa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    5afe:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    5b02:	f206 160b 	addw	r6, r6, #267	; 0x10b
    5b06:	463a      	mov	r2, r7
    5b08:	4631      	mov	r1, r6
    5b0a:	4618      	mov	r0, r3
    5b0c:	f006 fb77 	bl	c1fe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5b10:	4630      	mov	r0, r6
    5b12:	4621      	mov	r1, r4
    5b14:	f7ff ffd4 	bl	5ac0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    5b18:	1c64      	adds	r4, r4, #1
    5b1a:	b2e4      	uxtb	r4, r4
    5b1c:	78a8      	ldrb	r0, [r5, #2]
    5b1e:	42a0      	cmp	r0, r4
    5b20:	d8e2      	bhi.n	5ae8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    5b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b26:	0000      	.short	0x0000
    5b28:	20000f9a 	.word	0x20000f9a

00005b2c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b30:	460e      	mov	r6, r1
    5b32:	4607      	mov	r7, r0
    5b34:	4615      	mov	r5, r2
    5b36:	2106      	movs	r1, #6
    5b38:	4630      	mov	r0, r6
    5b3a:	f006 fdbf 	bl	c6bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5b3e:	4c0d      	ldr	r4, [pc, #52]	; (5b74 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5b40:	b160      	cbz	r0, 5b5c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    5b42:	2000      	movs	r0, #0
    5b44:	e004      	b.n	5b50 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5b46:	1821      	adds	r1, r4, r0
    5b48:	1c40      	adds	r0, r0, #1
    5b4a:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5b4e:	b2c0      	uxtb	r0, r0
    5b50:	78a1      	ldrb	r1, [r4, #2]
    5b52:	4281      	cmp	r1, r0
    5b54:	d8f7      	bhi.n	5b46 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5b56:	2001      	movs	r0, #1
    5b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b5c:	4631      	mov	r1, r6
    5b5e:	4638      	mov	r0, r7
    5b60:	f006 fbd9 	bl	c316 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5b64:	2808      	cmp	r0, #8
    5b66:	d003      	beq.n	5b70 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5b68:	4420      	add	r0, r4
    5b6a:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5b6e:	e7f2      	b.n	5b56 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5b70:	2000      	movs	r0, #0
    5b72:	e7f1      	b.n	5b58 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5b74:	20000f9a 	.word	0x20000f9a

00005b78 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5b78:	4904      	ldr	r1, [pc, #16]	; (5b8c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5b7a:	788a      	ldrb	r2, [r1, #2]
    5b7c:	4282      	cmp	r2, r0
    5b7e:	d903      	bls.n	5b88 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5b80:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5b84:	1cc0      	adds	r0, r0, #3
    5b86:	4770      	bx	lr
    5b88:	2000      	movs	r0, #0
    5b8a:	4770      	bx	lr
    5b8c:	20000f9a 	.word	0x20000f9a

00005b90 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    5b90:	4908      	ldr	r1, [pc, #32]	; (5bb4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    5b92:	788a      	ldrb	r2, [r1, #2]
    5b94:	4282      	cmp	r2, r0
    5b96:	d903      	bls.n	5ba0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    5b98:	180a      	adds	r2, r1, r0
    5b9a:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    5b9e:	b10a      	cbz	r2, 5ba4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    5ba0:	2000      	movs	r0, #0
    5ba2:	4770      	bx	lr
    5ba4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5ba8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5bac:	f200 100b 	addw	r0, r0, #267	; 0x10b
    5bb0:	4770      	bx	lr
    5bb2:	0000      	.short	0x0000
    5bb4:	20000f9a 	.word	0x20000f9a

00005bb8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5bb8:	b510      	push	{r4, lr}
    5bba:	f240 12d3 	movw	r2, #467	; 0x1d3
    5bbe:	2100      	movs	r1, #0
    5bc0:	4808      	ldr	r0, [pc, #32]	; (5be4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5bc2:	f005 fbe9 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bc6:	2208      	movs	r2, #8
    5bc8:	21ff      	movs	r1, #255	; 0xff
    5bca:	4807      	ldr	r0, [pc, #28]	; (5be8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5bcc:	f005 fbe4 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bd0:	4805      	ldr	r0, [pc, #20]	; (5be8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5bd2:	2100      	movs	r1, #0
    5bd4:	1f00      	subs	r0, r0, #4
    5bd6:	7001      	strb	r1, [r0, #0]
    5bd8:	7041      	strb	r1, [r0, #1]
    5bda:	f44f 7161 	mov.w	r1, #900	; 0x384
    5bde:	8041      	strh	r1, [r0, #2]
    5be0:	bd10      	pop	{r4, pc}
    5be2:	0000      	.short	0x0000
    5be4:	20000f9a 	.word	0x20000f9a
    5be8:	2000025c 	.word	0x2000025c

00005bec <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5bec:	4901      	ldr	r1, [pc, #4]	; (5bf4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5bee:	7008      	strb	r0, [r1, #0]
    5bf0:	4770      	bx	lr
    5bf2:	0000      	.short	0x0000
    5bf4:	20000258 	.word	0x20000258

00005bf8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5bf8:	4801      	ldr	r0, [pc, #4]	; (5c00 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5bfa:	7800      	ldrb	r0, [r0, #0]
    5bfc:	4770      	bx	lr
    5bfe:	0000      	.short	0x0000
    5c00:	20000258 	.word	0x20000258

00005c04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5c04:	4b0b      	ldr	r3, [pc, #44]	; (5c34 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5c06:	b510      	push	{r4, lr}
    5c08:	789c      	ldrb	r4, [r3, #2]
    5c0a:	4284      	cmp	r4, r0
    5c0c:	d90f      	bls.n	5c2e <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5c0e:	4418      	add	r0, r3
    5c10:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5c14:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5c18:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5c1c:	700b      	strb	r3, [r1, #0]
    5c1e:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5c22:	6011      	str	r1, [r2, #0]
    5c24:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5c28:	8090      	strh	r0, [r2, #4]
    5c2a:	2001      	movs	r0, #1
    5c2c:	bd10      	pop	{r4, pc}
    5c2e:	2000      	movs	r0, #0
    5c30:	bd10      	pop	{r4, pc}
    5c32:	0000      	.short	0x0000
    5c34:	20000f9a 	.word	0x20000f9a

00005c38 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5c38:	4907      	ldr	r1, [pc, #28]	; (5c58 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5c3a:	788a      	ldrb	r2, [r1, #2]
    5c3c:	4282      	cmp	r2, r0
    5c3e:	d909      	bls.n	5c54 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5c40:	4408      	add	r0, r1
    5c42:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5c46:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5c4a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5c4e:	f000 0001 	and.w	r0, r0, #1
    5c52:	4770      	bx	lr
    5c54:	2000      	movs	r0, #0
    5c56:	4770      	bx	lr
    5c58:	20000f9a 	.word	0x20000f9a

00005c5c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c60:	4698      	mov	r8, r3
    5c62:	4691      	mov	r9, r2
    5c64:	460c      	mov	r4, r1
    5c66:	4605      	mov	r5, r0
    5c68:	f000 f962 	bl	5f30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5c6c:	4606      	mov	r6, r0
    5c6e:	2810      	cmp	r0, #16
    5c70:	d006      	beq.n	5c80 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5c72:	f000 f92d 	bl	5ed0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5c76:	2810      	cmp	r0, #16
    5c78:	d002      	beq.n	5c80 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5c7a:	2012      	movs	r0, #18
    5c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c80:	4f18      	ldr	r7, [pc, #96]	; (5ce4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5c82:	78b8      	ldrb	r0, [r7, #2]
    5c84:	2808      	cmp	r0, #8
    5c86:	d22a      	bcs.n	5cde <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5c88:	2e10      	cmp	r6, #16
    5c8a:	d105      	bne.n	5c98 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5c8c:	2200      	movs	r2, #0
    5c8e:	4621      	mov	r1, r4
    5c90:	4628      	mov	r0, r5
    5c92:	f000 f931 	bl	5ef8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5c96:	4606      	mov	r6, r0
    5c98:	78bc      	ldrb	r4, [r7, #2]
    5c9a:	2210      	movs	r2, #16
    5c9c:	1c60      	adds	r0, r4, #1
    5c9e:	70b8      	strb	r0, [r7, #2]
    5ca0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5ca4:	1ce8      	adds	r0, r5, #3
    5ca6:	4649      	mov	r1, r9
    5ca8:	f006 fcb8 	bl	c61c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5cac:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5cb0:	2210      	movs	r2, #16
    5cb2:	4641      	mov	r1, r8
    5cb4:	f006 fcb2 	bl	c61c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5cb8:	2110      	movs	r1, #16
    5cba:	4640      	mov	r0, r8
    5cbc:	f006 fcfe 	bl	c6bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5cc0:	443c      	add	r4, r7
    5cc2:	2110      	movs	r1, #16
    5cc4:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5cc8:	4648      	mov	r0, r9
    5cca:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5cce:	f006 fcf5 	bl	c6bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5cd2:	77e0      	strb	r0, [r4, #31]
    5cd4:	f804 6c29 	strb.w	r6, [r4, #-41]
    5cd8:	2000      	movs	r0, #0
    5cda:	73e0      	strb	r0, [r4, #15]
    5cdc:	e7ce      	b.n	5c7c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5cde:	2007      	movs	r0, #7
    5ce0:	e7cc      	b.n	5c7c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5ce2:	0000      	.short	0x0000
    5ce4:	20000f9a 	.word	0x20000f9a

00005ce8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5ce8:	4806      	ldr	r0, [pc, #24]	; (5d04 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5cea:	b510      	push	{r4, lr}
    5cec:	7880      	ldrb	r0, [r0, #2]
    5cee:	1e40      	subs	r0, r0, #1
    5cf0:	b244      	sxtb	r4, r0
    5cf2:	e004      	b.n	5cfe <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5cf4:	b2e0      	uxtb	r0, r4
    5cf6:	f000 f963 	bl	5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5cfa:	1e64      	subs	r4, r4, #1
    5cfc:	b264      	sxtb	r4, r4
    5cfe:	2c00      	cmp	r4, #0
    5d00:	daf8      	bge.n	5cf4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    5d02:	bd10      	pop	{r4, pc}
    5d04:	20000f9a 	.word	0x20000f9a

00005d08 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5d08:	4801      	ldr	r0, [pc, #4]	; (5d10 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5d0a:	8840      	ldrh	r0, [r0, #2]
    5d0c:	4770      	bx	lr
    5d0e:	0000      	.short	0x0000
    5d10:	20000258 	.word	0x20000258

00005d14 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5d14:	b138      	cbz	r0, 5d26 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5d16:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5d1a:	4288      	cmp	r0, r1
    5d1c:	d803      	bhi.n	5d26 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5d1e:	4903      	ldr	r1, [pc, #12]	; (5d2c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5d20:	8048      	strh	r0, [r1, #2]
    5d22:	2001      	movs	r0, #1
    5d24:	4770      	bx	lr
    5d26:	2000      	movs	r0, #0
    5d28:	4770      	bx	lr
    5d2a:	0000      	.short	0x0000
    5d2c:	20000258 	.word	0x20000258

00005d30 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    5d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d34:	4614      	mov	r4, r2
    5d36:	2501      	movs	r5, #1
    5d38:	2200      	movs	r2, #0
    5d3a:	461f      	mov	r7, r3
    5d3c:	462e      	mov	r6, r5
    5d3e:	7022      	strb	r2, [r4, #0]
    5d40:	f000 f8f6 	bl	5f30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5d44:	2810      	cmp	r0, #16
    5d46:	d024      	beq.n	5d92 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5d48:	f8df 8054 	ldr.w	r8, [pc, #84]	; 5da0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    5d4c:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    5d50:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5d54:	f001 0101 	and.w	r1, r1, #1
    5d58:	7021      	strb	r1, [r4, #0]
    5d5a:	f000 f8b9 	bl	5ed0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5d5e:	4604      	mov	r4, r0
    5d60:	2810      	cmp	r0, #16
    5d62:	d016      	beq.n	5d92 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5d64:	b107      	cbz	r7, 5d68 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    5d66:	703c      	strb	r4, [r7, #0]
    5d68:	4620      	mov	r0, r4
    5d6a:	f7ff ff05 	bl	5b78 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5d6e:	b180      	cbz	r0, 5d92 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5d70:	f898 1002 	ldrb.w	r1, [r8, #2]
    5d74:	4640      	mov	r0, r8
    5d76:	42a1      	cmp	r1, r4
    5d78:	d903      	bls.n	5d82 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    5d7a:	1901      	adds	r1, r0, r4
    5d7c:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    5d80:	e000      	b.n	5d84 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    5d82:	2600      	movs	r6, #0
    5d84:	eb08 0004 	add.w	r0, r8, r4
    5d88:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5d8c:	2801      	cmp	r0, #1
    5d8e:	d004      	beq.n	5d9a <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    5d90:	2500      	movs	r5, #0
    5d92:	ea45 0006 	orr.w	r0, r5, r6
    5d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d9a:	2501      	movs	r5, #1
    5d9c:	e7f9      	b.n	5d92 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5d9e:	0000      	.short	0x0000
    5da0:	20000f9a 	.word	0x20000f9a

00005da4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5da4:	b570      	push	{r4, r5, r6, lr}
    5da6:	460d      	mov	r5, r1
    5da8:	4606      	mov	r6, r0
    5daa:	f000 f8c1 	bl	5f30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5dae:	4c10      	ldr	r4, [pc, #64]	; (5df0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5db0:	2810      	cmp	r0, #16
    5db2:	d007      	beq.n	5dc4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5db4:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5db8:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5dbc:	07c9      	lsls	r1, r1, #31
    5dbe:	d001      	beq.n	5dc4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5dc0:	2001      	movs	r0, #1
    5dc2:	bd70      	pop	{r4, r5, r6, pc}
    5dc4:	7861      	ldrb	r1, [r4, #1]
    5dc6:	2908      	cmp	r1, #8
    5dc8:	d210      	bcs.n	5dec <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5dca:	2810      	cmp	r0, #16
    5dcc:	d008      	beq.n	5de0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5dce:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5dd2:	2101      	movs	r1, #1
    5dd4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5dd8:	7860      	ldrb	r0, [r4, #1]
    5dda:	1c40      	adds	r0, r0, #1
    5ddc:	7060      	strb	r0, [r4, #1]
    5dde:	e7ef      	b.n	5dc0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5de0:	2201      	movs	r2, #1
    5de2:	4629      	mov	r1, r5
    5de4:	4630      	mov	r0, r6
    5de6:	f000 f887 	bl	5ef8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5dea:	e7f5      	b.n	5dd8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5dec:	2000      	movs	r0, #0
    5dee:	bd70      	pop	{r4, r5, r6, pc}
    5df0:	20000f9a 	.word	0x20000f9a

00005df4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5df4:	b570      	push	{r4, r5, r6, lr}
    5df6:	4d0b      	ldr	r5, [pc, #44]	; (5e24 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5df8:	7828      	ldrb	r0, [r5, #0]
    5dfa:	1e40      	subs	r0, r0, #1
    5dfc:	b244      	sxtb	r4, r0
    5dfe:	e00a      	b.n	5e16 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5e00:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5e04:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5e08:	07c0      	lsls	r0, r0, #31
    5e0a:	d002      	beq.n	5e12 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5e0c:	b2e0      	uxtb	r0, r4
    5e0e:	f000 f91f 	bl	6050 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5e12:	1e64      	subs	r4, r4, #1
    5e14:	b264      	sxtb	r4, r4
    5e16:	2c00      	cmp	r4, #0
    5e18:	daf2      	bge.n	5e00 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5e1a:	4903      	ldr	r1, [pc, #12]	; (5e28 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5e1c:	2000      	movs	r0, #0
    5e1e:	7048      	strb	r0, [r1, #1]
    5e20:	bd70      	pop	{r4, r5, r6, pc}
    5e22:	0000      	.short	0x0000
    5e24:	20000f9a 	.word	0x20000f9a
    5e28:	20000258 	.word	0x20000258

00005e2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e30:	2400      	movs	r4, #0
    5e32:	4625      	mov	r5, r4
    5e34:	4e18      	ldr	r6, [pc, #96]	; (5e98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5e36:	e029      	b.n	5e8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5e38:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5e3c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5e40:	07c0      	lsls	r0, r0, #31
    5e42:	d021      	beq.n	5e88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5e44:	4628      	mov	r0, r5
    5e46:	f000 f843 	bl	5ed0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5e4a:	4603      	mov	r3, r0
    5e4c:	f7ff fe94 	bl	5b78 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5e50:	4601      	mov	r1, r0
    5e52:	2000      	movs	r0, #0
    5e54:	2b10      	cmp	r3, #16
    5e56:	d009      	beq.n	5e6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5e58:	18f2      	adds	r2, r6, r3
    5e5a:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5e5e:	f1bc 0f01 	cmp.w	ip, #1
    5e62:	d002      	beq.n	5e6a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5e64:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5e68:	b102      	cbz	r2, 5e6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5e6a:	2001      	movs	r0, #1
    5e6c:	1e40      	subs	r0, r0, #1
    5e6e:	4201      	tst	r1, r0
    5e70:	d10a      	bne.n	5e88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5e72:	480a      	ldr	r0, [pc, #40]	; (5e9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5e74:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5e78:	5503      	strb	r3, [r0, r4]
    5e7a:	4620      	mov	r0, r4
    5e7c:	1c64      	adds	r4, r4, #1
    5e7e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5e82:	b2e4      	uxtb	r4, r4
    5e84:	f004 fdd8 	bl	aa38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5e88:	1c6d      	adds	r5, r5, #1
    5e8a:	b2ed      	uxtb	r5, r5
    5e8c:	7830      	ldrb	r0, [r6, #0]
    5e8e:	42a8      	cmp	r0, r5
    5e90:	d8d2      	bhi.n	5e38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e96:	0000      	.short	0x0000
    5e98:	20000f9a 	.word	0x20000f9a
    5e9c:	2000025c 	.word	0x2000025c
    5ea0:	4602      	mov	r2, r0
    5ea2:	4809      	ldr	r0, [pc, #36]	; (5ec8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5ea4:	b510      	push	{r4, lr}
    5ea6:	7800      	ldrb	r0, [r0, #0]
    5ea8:	460b      	mov	r3, r1
    5eaa:	b158      	cbz	r0, 5ec4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5eac:	4807      	ldr	r0, [pc, #28]	; (5ecc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5eae:	7881      	ldrb	r1, [r0, #2]
    5eb0:	b141      	cbz	r1, 5ec4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5eb2:	b10b      	cbz	r3, 5eb8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5eb4:	1cc0      	adds	r0, r0, #3
    5eb6:	e001      	b.n	5ebc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5eb8:	4804      	ldr	r0, [pc, #16]	; (5ecc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5eba:	3083      	adds	r0, #131	; 0x83
    5ebc:	f003 ff56 	bl	9d6c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5ec0:	2001      	movs	r0, #1
    5ec2:	bd10      	pop	{r4, pc}
    5ec4:	2000      	movs	r0, #0
    5ec6:	bd10      	pop	{r4, pc}
    5ec8:	20000258 	.word	0x20000258
    5ecc:	20000f9a 	.word	0x20000f9a
    5ed0:	4908      	ldr	r1, [pc, #32]	; (5ef4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5ed2:	b510      	push	{r4, lr}
    5ed4:	4603      	mov	r3, r0
    5ed6:	2000      	movs	r0, #0
    5ed8:	788a      	ldrb	r2, [r1, #2]
    5eda:	e006      	b.n	5eea <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5edc:	180c      	adds	r4, r1, r0
    5ede:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5ee2:	429c      	cmp	r4, r3
    5ee4:	d004      	beq.n	5ef0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5ee6:	1c40      	adds	r0, r0, #1
    5ee8:	b2c0      	uxtb	r0, r0
    5eea:	4282      	cmp	r2, r0
    5eec:	d8f6      	bhi.n	5edc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5eee:	2010      	movs	r0, #16
    5ef0:	bd10      	pop	{r4, pc}
    5ef2:	0000      	.short	0x0000
    5ef4:	20000f9a 	.word	0x20000f9a
    5ef8:	b570      	push	{r4, r5, r6, lr}
    5efa:	4b0c      	ldr	r3, [pc, #48]	; (5f2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5efc:	4604      	mov	r4, r0
    5efe:	7818      	ldrb	r0, [r3, #0]
    5f00:	1c45      	adds	r5, r0, #1
    5f02:	701d      	strb	r5, [r3, #0]
    5f04:	2810      	cmp	r0, #16
    5f06:	d303      	bcc.n	5f10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5f08:	2146      	movs	r1, #70	; 0x46
    5f0a:	2028      	movs	r0, #40	; 0x28
    5f0c:	f7fe fb2e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f10:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5f14:	680d      	ldr	r5, [r1, #0]
    5f16:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5f1a:	8889      	ldrh	r1, [r1, #4]
    5f1c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5f20:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5f24:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5f28:	bd70      	pop	{r4, r5, r6, pc}
    5f2a:	0000      	.short	0x0000
    5f2c:	20000f9a 	.word	0x20000f9a
    5f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f34:	460f      	mov	r7, r1
    5f36:	4606      	mov	r6, r0
    5f38:	2400      	movs	r4, #0
    5f3a:	4d0d      	ldr	r5, [pc, #52]	; (5f70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5f3c:	e00f      	b.n	5f5e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5f3e:	bf00      	nop
    5f40:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5f44:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5f48:	42b1      	cmp	r1, r6
    5f4a:	d106      	bne.n	5f5a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5f4c:	2206      	movs	r2, #6
    5f4e:	4639      	mov	r1, r7
    5f50:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5f54:	f005 f994 	bl	b280 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5f58:	b138      	cbz	r0, 5f6a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5f5a:	1c64      	adds	r4, r4, #1
    5f5c:	b2e4      	uxtb	r4, r4
    5f5e:	7828      	ldrb	r0, [r5, #0]
    5f60:	42a0      	cmp	r0, r4
    5f62:	d8ed      	bhi.n	5f40 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5f64:	2010      	movs	r0, #16
    5f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f6a:	4620      	mov	r0, r4
    5f6c:	e7fb      	b.n	5f66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5f6e:	0000      	.short	0x0000
    5f70:	20000f9a 	.word	0x20000f9a
    5f74:	b570      	push	{r4, r5, r6, lr}
    5f76:	4605      	mov	r5, r0
    5f78:	f7ff ffaa 	bl	5ed0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5f7c:	2810      	cmp	r0, #16
    5f7e:	d11c      	bne.n	5fba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5f80:	4c0e      	ldr	r4, [pc, #56]	; (5fbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5f82:	7820      	ldrb	r0, [r4, #0]
    5f84:	1e40      	subs	r0, r0, #1
    5f86:	b2c0      	uxtb	r0, r0
    5f88:	7020      	strb	r0, [r4, #0]
    5f8a:	42a8      	cmp	r0, r5
    5f8c:	d015      	beq.n	5fba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5f8e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5f92:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5f96:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5f9a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5f9e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5fa2:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5fa6:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5faa:	7820      	ldrb	r0, [r4, #0]
    5fac:	f7ff ff90 	bl	5ed0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5fb0:	2810      	cmp	r0, #16
    5fb2:	d002      	beq.n	5fba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5fb4:	4420      	add	r0, r4
    5fb6:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5fba:	bd70      	pop	{r4, r5, r6, pc}
    5fbc:	20000f9a 	.word	0x20000f9a
    5fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5fc4:	4c21      	ldr	r4, [pc, #132]	; (604c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5fc6:	4606      	mov	r6, r0
    5fc8:	19a7      	adds	r7, r4, r6
    5fca:	78a0      	ldrb	r0, [r4, #2]
    5fcc:	1e40      	subs	r0, r0, #1
    5fce:	b2c5      	uxtb	r5, r0
    5fd0:	70a5      	strb	r5, [r4, #2]
    5fd2:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5fd6:	42ae      	cmp	r6, r5
    5fd8:	d02a      	beq.n	6030 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5fda:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5fde:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5fe2:	f10a 0103 	add.w	r1, sl, #3
    5fe6:	f109 0003 	add.w	r0, r9, #3
    5fea:	2210      	movs	r2, #16
    5fec:	f005 f95a 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5ff0:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5ff4:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5ff8:	2210      	movs	r2, #16
    5ffa:	f005 f953 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5ffe:	1960      	adds	r0, r4, r5
    6000:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6004:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6008:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    600c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6010:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6014:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6018:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    601c:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6020:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6024:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6028:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    602c:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6030:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6034:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6038:	07c0      	lsls	r0, r0, #31
    603a:	d104      	bne.n	6046 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    603c:	4640      	mov	r0, r8
    603e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6042:	f7ff bf97 	b.w	5f74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    604a:	0000      	.short	0x0000
    604c:	20000f9a 	.word	0x20000f9a
    6050:	4905      	ldr	r1, [pc, #20]	; (6068 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    6052:	784a      	ldrb	r2, [r1, #1]
    6054:	1e52      	subs	r2, r2, #1
    6056:	704a      	strb	r2, [r1, #1]
    6058:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    605c:	2200      	movs	r2, #0
    605e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6062:	f7ff bf87 	b.w	5f74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6066:	0000      	.short	0x0000
    6068:	20000f9a 	.word	0x20000f9a

0000606c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6070:	4604      	mov	r4, r0
    6072:	f100 0778 	add.w	r7, r0, #120	; 0x78
    6076:	b171      	cbz	r1, 6096 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    6078:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    607c:	1e75      	subs	r5, r6, #1
    607e:	2901      	cmp	r1, #1
    6080:	d016      	beq.n	60b0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    6082:	2902      	cmp	r1, #2
    6084:	d025      	beq.n	60d2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    6086:	2903      	cmp	r1, #3
    6088:	d110      	bne.n	60ac <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    608a:	4631      	mov	r1, r6
    608c:	4628      	mov	r0, r5
    608e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6092:	f006 bb65 	b.w	c760 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6096:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    609a:	2100      	movs	r1, #0
    609c:	f005 f97c 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    60a0:	4638      	mov	r0, r7
    60a2:	f006 fb1a 	bl	c6da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    60a6:	2020      	movs	r0, #32
    60a8:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    60ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60b0:	68e1      	ldr	r1, [r4, #12]
    60b2:	480d      	ldr	r0, [pc, #52]	; (60e8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    60b4:	460a      	mov	r2, r1
    60b6:	4408      	add	r0, r1
    60b8:	fbb0 f0f1 	udiv	r0, r0, r1
    60bc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    60c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
    60c4:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    60c8:	8ae3      	ldrh	r3, [r4, #22]
    60ca:	4638      	mov	r0, r7
    60cc:	f000 f80e 	bl	60ec <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    60d0:	e7db      	b.n	608a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    60d2:	68c1      	ldr	r1, [r0, #12]
    60d4:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    60d8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    60dc:	4638      	mov	r0, r7
    60de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    60e2:	f000 b803 	b.w	60ec <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    60e6:	0000      	.short	0x0000
    60e8:	01c9c37f 	.word	0x01c9c37f
    60ec:	b530      	push	{r4, r5, lr}
    60ee:	2400      	movs	r4, #0
    60f0:	86c4      	strh	r4, [r0, #54]	; 0x36
    60f2:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    60f4:	4d13      	ldr	r5, [pc, #76]	; (6144 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    60f6:	434c      	muls	r4, r1
    60f8:	fbb4 f4f2 	udiv	r4, r4, r2
    60fc:	8744      	strh	r4, [r0, #58]	; 0x3a
    60fe:	f242 7410 	movw	r4, #10000	; 0x2710
    6102:	4363      	muls	r3, r4
    6104:	fbb3 f3f2 	udiv	r3, r3, r2
    6108:	1c5b      	adds	r3, r3, #1
    610a:	b29b      	uxth	r3, r3
    610c:	fb03 f402 	mul.w	r4, r3, r2
    6110:	8703      	strh	r3, [r0, #56]	; 0x38
    6112:	42ac      	cmp	r4, r5
    6114:	d901      	bls.n	611a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    6116:	1e5b      	subs	r3, r3, #1
    6118:	8703      	strh	r3, [r0, #56]	; 0x38
    611a:	4b0b      	ldr	r3, [pc, #44]	; (6148 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    611c:	f240 2471 	movw	r4, #625	; 0x271
    6120:	fbb3 f3f2 	udiv	r3, r3, r2
    6124:	1c5b      	adds	r3, r3, #1
    6126:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6128:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    612a:	4363      	muls	r3, r4
    612c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6130:	1e5b      	subs	r3, r3, #1
    6132:	fbb3 f3f2 	udiv	r3, r3, r2
    6136:	62c3      	str	r3, [r0, #44]	; 0x2c
    6138:	6a83      	ldr	r3, [r0, #40]	; 0x28
    613a:	434b      	muls	r3, r1
    613c:	fbb3 f1f2 	udiv	r1, r3, r2
    6140:	6281      	str	r1, [r0, #40]	; 0x28
    6142:	bd30      	pop	{r4, r5, pc}
    6144:	01e84800 	.word	0x01e84800
    6148:	02625a00 	.word	0x02625a00

0000614c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    614c:	4909      	ldr	r1, [pc, #36]	; (6174 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    614e:	b508      	push	{r3, lr}
    6150:	7809      	ldrb	r1, [r1, #0]
    6152:	f88d 1000 	strb.w	r1, [sp]
    6156:	9900      	ldr	r1, [sp, #0]
    6158:	9100      	str	r1, [sp, #0]
    615a:	f89d 1000 	ldrb.w	r1, [sp]
    615e:	b109      	cbz	r1, 6164 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    6160:	2000      	movs	r0, #0
    6162:	bd08      	pop	{r3, pc}
    6164:	4903      	ldr	r1, [pc, #12]	; (6174 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6166:	f8d1 2001 	ldr.w	r2, [r1, #1]
    616a:	6002      	str	r2, [r0, #0]
    616c:	7949      	ldrb	r1, [r1, #5]
    616e:	7101      	strb	r1, [r0, #4]
    6170:	2001      	movs	r0, #1
    6172:	bd08      	pop	{r3, pc}
    6174:	2000027f 	.word	0x2000027f

00006178 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6178:	b570      	push	{r4, r5, r6, lr}
    617a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    617e:	b28b      	uxth	r3, r1
    6180:	7ac5      	ldrb	r5, [r0, #11]
    6182:	ea83 0102 	eor.w	r1, r3, r2
    6186:	2200      	movs	r2, #0
    6188:	b2cc      	uxtb	r4, r1
    618a:	0a09      	lsrs	r1, r1, #8
    618c:	fa94 f4a4 	rbit	r4, r4
    6190:	fa91 f1a1 	rbit	r1, r1
    6194:	0e24      	lsrs	r4, r4, #24
    6196:	0e09      	lsrs	r1, r1, #24
    6198:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    619c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    61a0:	1c52      	adds	r2, r2, #1
    61a2:	4419      	add	r1, r3
    61a4:	b2d2      	uxtb	r2, r2
    61a6:	b289      	uxth	r1, r1
    61a8:	2a03      	cmp	r2, #3
    61aa:	d3ed      	bcc.n	6188 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    61ac:	4059      	eors	r1, r3
    61ae:	2225      	movs	r2, #37	; 0x25
    61b0:	fbb1 f3f2 	udiv	r3, r1, r2
    61b4:	fb02 1213 	mls	r2, r2, r3, r1
    61b8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    61bc:	f002 0607 	and.w	r6, r2, #7
    61c0:	785b      	ldrb	r3, [r3, #1]
    61c2:	2401      	movs	r4, #1
    61c4:	fa04 f606 	lsl.w	r6, r4, r6
    61c8:	4233      	tst	r3, r6
    61ca:	d001      	beq.n	61d0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    61cc:	4610      	mov	r0, r2
    61ce:	bd70      	pop	{r4, r5, r6, pc}
    61d0:	434d      	muls	r5, r1
    61d2:	0c29      	lsrs	r1, r5, #16
    61d4:	1c49      	adds	r1, r1, #1
    61d6:	b2c9      	uxtb	r1, r1
    61d8:	2200      	movs	r2, #0
    61da:	1885      	adds	r5, r0, r2
    61dc:	79ab      	ldrb	r3, [r5, #6]
    61de:	428b      	cmp	r3, r1
    61e0:	d312      	bcc.n	6208 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    61e2:	f895 5001 	ldrb.w	r5, [r5, #1]
    61e6:	2300      	movs	r3, #0
    61e8:	fa04 f603 	lsl.w	r6, r4, r3
    61ec:	4235      	tst	r5, r6
    61ee:	d001      	beq.n	61f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    61f0:	1e49      	subs	r1, r1, #1
    61f2:	b2c9      	uxtb	r1, r1
    61f4:	b121      	cbz	r1, 6200 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    61f6:	1c5b      	adds	r3, r3, #1
    61f8:	b2db      	uxtb	r3, r3
    61fa:	2b08      	cmp	r3, #8
    61fc:	d3f4      	bcc.n	61e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    61fe:	e005      	b.n	620c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6200:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6204:	b2c0      	uxtb	r0, r0
    6206:	bd70      	pop	{r4, r5, r6, pc}
    6208:	1ac9      	subs	r1, r1, r3
    620a:	b2c9      	uxtb	r1, r1
    620c:	1c52      	adds	r2, r2, #1
    620e:	b2d2      	uxtb	r2, r2
    6210:	2a05      	cmp	r2, #5
    6212:	d3e2      	bcc.n	61da <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6214:	f240 110d 	movw	r1, #269	; 0x10d
    6218:	2046      	movs	r0, #70	; 0x46
    621a:	f7fe f9a7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    621e:	0000      	movs	r0, r0
    6220:	b570      	push	{r4, r5, r6, lr}
    6222:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6226:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    622a:	2401      	movs	r4, #1
    622c:	fb03 2101 	mla	r1, r3, r1, r2
    6230:	2225      	movs	r2, #37	; 0x25
    6232:	fbb1 f3f2 	udiv	r3, r1, r2
    6236:	fb02 1113 	mls	r1, r2, r3, r1
    623a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    623e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6242:	f001 0307 	and.w	r3, r1, #7
    6246:	7d92      	ldrb	r2, [r2, #22]
    6248:	fa04 f303 	lsl.w	r3, r4, r3
    624c:	421a      	tst	r2, r3
    624e:	d003      	beq.n	6258 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6250:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6254:	2000      	movs	r0, #0
    6256:	bd70      	pop	{r4, r5, r6, pc}
    6258:	f890 2020 	ldrb.w	r2, [r0, #32]
    625c:	fbb1 f3f2 	udiv	r3, r1, r2
    6260:	fb02 1113 	mls	r1, r2, r3, r1
    6264:	1c49      	adds	r1, r1, #1
    6266:	b2c9      	uxtb	r1, r1
    6268:	2300      	movs	r3, #0
    626a:	18c5      	adds	r5, r0, r3
    626c:	7eea      	ldrb	r2, [r5, #27]
    626e:	428a      	cmp	r2, r1
    6270:	d311      	bcc.n	6296 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6272:	f895 5016 	ldrb.w	r5, [r5, #22]
    6276:	2200      	movs	r2, #0
    6278:	fa04 f602 	lsl.w	r6, r4, r2
    627c:	4235      	tst	r5, r6
    627e:	d001      	beq.n	6284 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6280:	1e49      	subs	r1, r1, #1
    6282:	b2c9      	uxtb	r1, r1
    6284:	b121      	cbz	r1, 6290 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6286:	1c52      	adds	r2, r2, #1
    6288:	b2d2      	uxtb	r2, r2
    628a:	2a08      	cmp	r2, #8
    628c:	d3f4      	bcc.n	6278 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    628e:	e004      	b.n	629a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6290:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6294:	e7dc      	b.n	6250 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6296:	1a89      	subs	r1, r1, r2
    6298:	b2c9      	uxtb	r1, r1
    629a:	1c5b      	adds	r3, r3, #1
    629c:	b2db      	uxtb	r3, r3
    629e:	2b05      	cmp	r3, #5
    62a0:	d3e3      	bcc.n	626a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    62a2:	201f      	movs	r0, #31
    62a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000062a8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    62a8:	7841      	ldrb	r1, [r0, #1]
    62aa:	b141      	cbz	r1, 62be <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    62ac:	78c0      	ldrb	r0, [r0, #3]
    62ae:	2819      	cmp	r0, #25
    62b0:	d203      	bcs.n	62ba <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    62b2:	4a04      	ldr	r2, [pc, #16]	; (62c4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    62b4:	5c10      	ldrb	r0, [r2, r0]
    62b6:	4288      	cmp	r0, r1
    62b8:	d101      	bne.n	62be <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    62ba:	2001      	movs	r0, #1
    62bc:	4770      	bx	lr
    62be:	2000      	movs	r0, #0
    62c0:	4770      	bx	lr
    62c2:	0000      	.short	0x0000
    62c4:	0000dcd8 	.word	0x0000dcd8

000062c8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    62c8:	b510      	push	{r4, lr}
    62ca:	2201      	movs	r2, #1
    62cc:	70c1      	strb	r1, [r0, #3]
    62ce:	2919      	cmp	r1, #25
    62d0:	d202      	bcs.n	62d8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    62d2:	4a06      	ldr	r2, [pc, #24]	; (62ec <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    62d4:	5c52      	ldrb	r2, [r2, r1]
    62d6:	e006      	b.n	62e6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    62d8:	29ff      	cmp	r1, #255	; 0xff
    62da:	d004      	beq.n	62e6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    62dc:	f240 31d5 	movw	r1, #981	; 0x3d5
    62e0:	202a      	movs	r0, #42	; 0x2a
    62e2:	f7fe f943 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62e6:	7042      	strb	r2, [r0, #1]
    62e8:	bd10      	pop	{r4, pc}
    62ea:	0000      	.short	0x0000
    62ec:	0000dcd8 	.word	0x0000dcd8

000062f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    62f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62f4:	0006      	movs	r6, r0
    62f6:	d00a      	beq.n	630e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    62f8:	4926      	ldr	r1, [pc, #152]	; (6394 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    62fa:	2201      	movs	r2, #1
    62fc:	7808      	ldrb	r0, [r1, #0]
    62fe:	b148      	cbz	r0, 6314 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6300:	2000      	movs	r0, #0
    6302:	7070      	strb	r0, [r6, #1]
    6304:	2303      	movs	r3, #3
    6306:	7033      	strb	r3, [r6, #0]
    6308:	7132      	strb	r2, [r6, #4]
    630a:	7008      	strb	r0, [r1, #0]
    630c:	e03c      	b.n	6388 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    630e:	f240 21da 	movw	r1, #730	; 0x2da
    6312:	e009      	b.n	6328 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    6314:	4c1f      	ldr	r4, [pc, #124]	; (6394 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    6316:	1ce4      	adds	r4, r4, #3
    6318:	7820      	ldrb	r0, [r4, #0]
    631a:	b940      	cbnz	r0, 632e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    631c:	1ca0      	adds	r0, r4, #2
    631e:	f006 fb0b 	bl	c938 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6322:	b120      	cbz	r0, 632e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6324:	f240 21e9 	movw	r1, #745	; 0x2e9
    6328:	2010      	movs	r0, #16
    632a:	f7fe f91f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    632e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    6332:	2000      	movs	r0, #0
    6334:	f7fe fa9e 	bl	4874 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6338:	4f17      	ldr	r7, [pc, #92]	; (6398 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    633a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 639c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    633e:	4605      	mov	r5, r0
    6340:	6838      	ldr	r0, [r7, #0]
    6342:	b130      	cbz	r0, 6352 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    6344:	8860      	ldrh	r0, [r4, #2]
    6346:	42a8      	cmp	r0, r5
    6348:	d103      	bne.n	6352 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    634a:	4630      	mov	r0, r6
    634c:	f000 f9b4 	bl	66b8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    6350:	e006      	b.n	6360 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
    6352:	f8d9 0000 	ldr.w	r0, [r9]
    6356:	b120      	cbz	r0, 6362 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
    6358:	8860      	ldrh	r0, [r4, #2]
    635a:	4631      	mov	r1, r6
    635c:	f000 f902 	bl	6564 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
    6360:	b990      	cbnz	r0, 6388 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    6362:	1ca0      	adds	r0, r4, #2
    6364:	f006 fae8 	bl	c938 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6368:	b910      	cbnz	r0, 6370 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    636a:	8861      	ldrh	r1, [r4, #2]
    636c:	4541      	cmp	r1, r8
    636e:	d1e7      	bne.n	6340 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
    6370:	480b      	ldr	r0, [pc, #44]	; (63a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
    6372:	6801      	ldr	r1, [r0, #0]
    6374:	b111      	cbz	r1, 637c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    6376:	4630      	mov	r0, r6
    6378:	4788      	blx	r1
    637a:	b928      	cbnz	r0, 6388 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    637c:	4809      	ldr	r0, [pc, #36]	; (63a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
    637e:	6801      	ldr	r1, [r0, #0]
    6380:	b129      	cbz	r1, 638e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    6382:	4630      	mov	r0, r6
    6384:	4788      	blx	r1
    6386:	b110      	cbz	r0, 638e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    6388:	2001      	movs	r0, #1
    638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    638e:	2000      	movs	r0, #0
    6390:	e7fb      	b.n	638a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6392:	0000      	.short	0x0000
    6394:	20000265 	.word	0x20000265
    6398:	200000f4 	.word	0x200000f4
    639c:	200000f0 	.word	0x200000f0
    63a0:	200000f8 	.word	0x200000f8
    63a4:	200000ec 	.word	0x200000ec

000063a8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    63a8:	4901      	ldr	r1, [pc, #4]	; (63b0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    63aa:	7008      	strb	r0, [r1, #0]
    63ac:	f000 b978 	b.w	66a0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    63b0:	20000264 	.word	0x20000264

000063b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    63b4:	4801      	ldr	r0, [pc, #4]	; (63bc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    63b6:	7800      	ldrb	r0, [r0, #0]
    63b8:	f7fd bec8 	b.w	414c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    63bc:	20000264 	.word	0x20000264

000063c0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    63c0:	4902      	ldr	r1, [pc, #8]	; (63cc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    63c2:	4801      	ldr	r0, [pc, #4]	; (63c8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    63c4:	6008      	str	r0, [r1, #0]
    63c6:	4770      	bx	lr
    63c8:	000067fd 	.word	0x000067fd
    63cc:	200000f4 	.word	0x200000f4
    63d0:	b570      	push	{r4, r5, r6, lr}
    63d2:	4604      	mov	r4, r0
    63d4:	7800      	ldrb	r0, [r0, #0]
    63d6:	2805      	cmp	r0, #5
    63d8:	d001      	beq.n	63de <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    63da:	216d      	movs	r1, #109	; 0x6d
    63dc:	e056      	b.n	648c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    63de:	7ba0      	ldrb	r0, [r4, #14]
    63e0:	06c0      	lsls	r0, r0, #27
    63e2:	d401      	bmi.n	63e8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    63e4:	216e      	movs	r1, #110	; 0x6e
    63e6:	e051      	b.n	648c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    63e8:	221c      	movs	r2, #28
    63ea:	1d21      	adds	r1, r4, #4
    63ec:	482d      	ldr	r0, [pc, #180]	; (64a4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    63ee:	f004 ff59 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    63f2:	482c      	ldr	r0, [pc, #176]	; (64a4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    63f4:	7b22      	ldrb	r2, [r4, #12]
    63f6:	f104 0120 	add.w	r1, r4, #32
    63fa:	301c      	adds	r0, #28
    63fc:	f004 ff52 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6400:	4828      	ldr	r0, [pc, #160]	; (64a4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6402:	f04f 0201 	mov.w	r2, #1
    6406:	7a81      	ldrb	r1, [r0, #10]
    6408:	0749      	lsls	r1, r1, #29
    640a:	d502      	bpl.n	6412 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    640c:	7cc1      	ldrb	r1, [r0, #19]
    640e:	29fe      	cmp	r1, #254	; 0xfe
    6410:	d00c      	beq.n	642c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    6412:	2304      	movs	r3, #4
    6414:	7023      	strb	r3, [r4, #0]
    6416:	6801      	ldr	r1, [r0, #0]
    6418:	6061      	str	r1, [r4, #4]
    641a:	6841      	ldr	r1, [r0, #4]
    641c:	60a1      	str	r1, [r4, #8]
    641e:	8901      	ldrh	r1, [r0, #8]
    6420:	81a1      	strh	r1, [r4, #12]
    6422:	7a81      	ldrb	r1, [r0, #10]
    6424:	070d      	lsls	r5, r1, #28
    6426:	d519      	bpl.n	645c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    6428:	73a3      	strb	r3, [r4, #14]
    642a:	e02b      	b.n	6484 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    642c:	2113      	movs	r1, #19
    642e:	7021      	strb	r1, [r4, #0]
    6430:	7801      	ldrb	r1, [r0, #0]
    6432:	7121      	strb	r1, [r4, #4]
    6434:	7162      	strb	r2, [r4, #5]
    6436:	7841      	ldrb	r1, [r0, #1]
    6438:	71a1      	strb	r1, [r4, #6]
    643a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    643e:	f8c4 1007 	str.w	r1, [r4, #7]
    6442:	88c1      	ldrh	r1, [r0, #6]
    6444:	f8a4 100b 	strh.w	r1, [r4, #11]
    6448:	21fe      	movs	r1, #254	; 0xfe
    644a:	7361      	strb	r1, [r4, #13]
    644c:	6941      	ldr	r1, [r0, #20]
    644e:	f8c4 100e 	str.w	r1, [r4, #14]
    6452:	8b01      	ldrh	r1, [r0, #24]
    6454:	8261      	strh	r1, [r4, #18]
    6456:	7a40      	ldrb	r0, [r0, #9]
    6458:	7520      	strb	r0, [r4, #20]
    645a:	bd70      	pop	{r4, r5, r6, pc}
    645c:	07cb      	lsls	r3, r1, #31
    645e:	d003      	beq.n	6468 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    6460:	078b      	lsls	r3, r1, #30
    6462:	d501      	bpl.n	6468 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    6464:	2100      	movs	r1, #0
    6466:	e00c      	b.n	6482 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    6468:	074b      	lsls	r3, r1, #29
    646a:	d501      	bpl.n	6470 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    646c:	73a2      	strb	r2, [r4, #14]
    646e:	e009      	b.n	6484 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    6470:	07ca      	lsls	r2, r1, #31
    6472:	d001      	beq.n	6478 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
    6474:	21b5      	movs	r1, #181	; 0xb5
    6476:	e009      	b.n	648c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6478:	0789      	lsls	r1, r1, #30
    647a:	d501      	bpl.n	6480 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
    647c:	2102      	movs	r1, #2
    647e:	e000      	b.n	6482 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    6480:	2103      	movs	r1, #3
    6482:	73a1      	strb	r1, [r4, #14]
    6484:	7a02      	ldrb	r2, [r0, #8]
    6486:	2a1f      	cmp	r2, #31
    6488:	d903      	bls.n	6492 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    648a:	21b8      	movs	r1, #184	; 0xb8
    648c:	2010      	movs	r0, #16
    648e:	f7fe f86d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6492:	f104 000f 	add.w	r0, r4, #15
    6496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    649a:	4902      	ldr	r1, [pc, #8]	; (64a4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    649c:	311c      	adds	r1, #28
    649e:	f004 bf01 	b.w	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    64a2:	0000      	.short	0x0000
    64a4:	20000e18 	.word	0x20000e18
    64a8:	b510      	push	{r4, lr}
    64aa:	492d      	ldr	r1, [pc, #180]	; (6560 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
    64ac:	b086      	sub	sp, #24
    64ae:	7c8a      	ldrb	r2, [r1, #18]
    64b0:	7801      	ldrb	r1, [r0, #0]
    64b2:	07d3      	lsls	r3, r2, #31
    64b4:	d101      	bne.n	64ba <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
    64b6:	291d      	cmp	r1, #29
    64b8:	d004      	beq.n	64c4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
    64ba:	291c      	cmp	r1, #28
    64bc:	d01f      	beq.n	64fe <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
    64be:	2915      	cmp	r1, #21
    64c0:	d046      	beq.n	6550 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    64c2:	e04a      	b.n	655a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    64c4:	8880      	ldrh	r0, [r0, #4]
    64c6:	f8ad 0000 	strh.w	r0, [sp]
    64ca:	a902      	add	r1, sp, #8
    64cc:	f005 ff6e 	bl	c3ac <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    64d0:	b110      	cbz	r0, 64d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
    64d2:	f44f 71c4 	mov.w	r1, #392	; 0x188
    64d6:	e035      	b.n	6544 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    64d8:	9803      	ldr	r0, [sp, #12]
    64da:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    64de:	f88d 1002 	strb.w	r1, [sp, #2]
    64e2:	7841      	ldrb	r1, [r0, #1]
    64e4:	f88d 1003 	strb.w	r1, [sp, #3]
    64e8:	8840      	ldrh	r0, [r0, #2]
    64ea:	f8ad 0004 	strh.w	r0, [sp, #4]
    64ee:	2102      	movs	r1, #2
    64f0:	4668      	mov	r0, sp
    64f2:	f003 fad3 	bl	9a9c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    64f6:	b340      	cbz	r0, 654a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    64f8:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    64fc:	e022      	b.n	6544 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    64fe:	0791      	lsls	r1, r2, #30
    6500:	d42b      	bmi.n	655a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6502:	8884      	ldrh	r4, [r0, #4]
    6504:	a903      	add	r1, sp, #12
    6506:	4620      	mov	r0, r4
    6508:	f006 ffde 	bl	d4c8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    650c:	b110      	cbz	r0, 6514 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    650e:	f240 11a5 	movw	r1, #421	; 0x1a5
    6512:	e017      	b.n	6544 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6514:	f8ad 4000 	strh.w	r4, [sp]
    6518:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    651c:	f8ad 0002 	strh.w	r0, [sp, #2]
    6520:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6524:	f8ad 0004 	strh.w	r0, [sp, #4]
    6528:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    652c:	f8ad 0006 	strh.w	r0, [sp, #6]
    6530:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6534:	f8ad 0008 	strh.w	r0, [sp, #8]
    6538:	4668      	mov	r0, sp
    653a:	f006 fff0 	bl	d51e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    653e:	b120      	cbz	r0, 654a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6540:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    6544:	2010      	movs	r0, #16
    6546:	f7fe f811 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    654a:	2001      	movs	r0, #1
    654c:	b006      	add	sp, #24
    654e:	bd10      	pop	{r4, pc}
    6550:	0751      	lsls	r1, r2, #29
    6552:	d402      	bmi.n	655a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6554:	7b80      	ldrb	r0, [r0, #14]
    6556:	07c0      	lsls	r0, r0, #31
    6558:	d0f7      	beq.n	654a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    655a:	2000      	movs	r0, #0
    655c:	e7f6      	b.n	654c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
    655e:	0000      	.short	0x0000
    6560:	20000dfc 	.word	0x20000dfc
    6564:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6568:	b087      	sub	sp, #28
    656a:	460c      	mov	r4, r1
    656c:	a902      	add	r1, sp, #8
    656e:	9807      	ldr	r0, [sp, #28]
    6570:	f005 ff1c 	bl	c3ac <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6574:	2800      	cmp	r0, #0
    6576:	d17d      	bne.n	6674 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    6578:	f8df 9120 	ldr.w	r9, [pc, #288]	; 669c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
    657c:	f04f 0801 	mov.w	r8, #1
    6580:	4682      	mov	sl, r0
    6582:	9803      	ldr	r0, [sp, #12]
    6584:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6588:	2800      	cmp	r0, #0
    658a:	d00c      	beq.n	65a6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    658c:	f8d9 2000 	ldr.w	r2, [r9]
    6590:	b162      	cbz	r2, 65ac <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    6592:	4621      	mov	r1, r4
    6594:	9807      	ldr	r0, [sp, #28]
    6596:	4790      	blx	r2
    6598:	b140      	cbz	r0, 65ac <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    659a:	4620      	mov	r0, r4
    659c:	f7ff ff84 	bl	64a8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
    65a0:	2800      	cmp	r0, #0
    65a2:	d1ee      	bne.n	6582 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
    65a4:	2001      	movs	r0, #1
    65a6:	b009      	add	sp, #36	; 0x24
    65a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65ac:	9d03      	ldr	r5, [sp, #12]
    65ae:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    65b2:	3578      	adds	r5, #120	; 0x78
    65b4:	b950      	cbnz	r0, 65cc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    65b6:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    65ba:	f88d 0004 	strb.w	r0, [sp, #4]
    65be:	9801      	ldr	r0, [sp, #4]
    65c0:	9001      	str	r0, [sp, #4]
    65c2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    65c6:	b108      	cbz	r0, 65cc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    65c8:	2001      	movs	r0, #1
    65ca:	e000      	b.n	65ce <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
    65cc:	2000      	movs	r0, #0
    65ce:	4683      	mov	fp, r0
    65d0:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    65d4:	b1c0      	cbz	r0, 6608 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    65d6:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    65da:	0780      	lsls	r0, r0, #30
    65dc:	d514      	bpl.n	6608 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    65de:	f884 a001 	strb.w	sl, [r4, #1]
    65e2:	f884 8000 	strb.w	r8, [r4]
    65e6:	f884 a004 	strb.w	sl, [r4, #4]
    65ea:	9907      	ldr	r1, [sp, #28]
    65ec:	f8a4 1005 	strh.w	r1, [r4, #5]
    65f0:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    65f4:	71e1      	strb	r1, [r4, #7]
    65f6:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    65fa:	8121      	strh	r1, [r4, #8]
    65fc:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    6600:	8161      	strh	r1, [r4, #10]
    6602:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    6606:	e7c8      	b.n	659a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6608:	9807      	ldr	r0, [sp, #28]
    660a:	f7fe fa9d 	bl	4b48 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    660e:	0007      	movs	r7, r0
    6610:	d00d      	beq.n	662e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    6612:	f005 fc07 	bl	be24 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6616:	0006      	movs	r6, r0
    6618:	d015      	beq.n	6646 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
    661a:	f884 a001 	strb.w	sl, [r4, #1]
    661e:	200f      	movs	r0, #15
    6620:	7020      	strb	r0, [r4, #0]
    6622:	9807      	ldr	r0, [sp, #28]
    6624:	80e0      	strh	r0, [r4, #6]
    6626:	8126      	strh	r6, [r4, #8]
    6628:	f884 8004 	strb.w	r8, [r4, #4]
    662c:	e007      	b.n	663e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
    662e:	f240 2133 	movw	r1, #563	; 0x233
    6632:	e02d      	b.n	6690 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
    6634:	2100      	movs	r1, #0
    6636:	4638      	mov	r0, r7
    6638:	460a      	mov	r2, r1
    663a:	f005 fccb 	bl	bfd4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    663e:	1e76      	subs	r6, r6, #1
    6640:	b2b6      	uxth	r6, r6
    6642:	d2f7      	bcs.n	6634 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
    6644:	e7a9      	b.n	659a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6646:	9807      	ldr	r0, [sp, #28]
    6648:	f7fe fa68 	bl	4b1c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    664c:	b1f0      	cbz	r0, 668c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
    664e:	f1bb 0f00 	cmp.w	fp, #0
    6652:	d020      	beq.n	6696 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6654:	f005 fb24 	bl	bca0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6658:	b160      	cbz	r0, 6674 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    665a:	9807      	ldr	r0, [sp, #28]
    665c:	f005 fdbc 	bl	c1d8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6660:	2100      	movs	r1, #0
    6662:	9807      	ldr	r0, [sp, #28]
    6664:	f7fe f978 	bl	4958 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6668:	f884 a001 	strb.w	sl, [r4, #1]
    666c:	210c      	movs	r1, #12
    666e:	4650      	mov	r0, sl
    6670:	7021      	strb	r1, [r4, #0]
    6672:	e000      	b.n	6676 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
    6674:	e00f      	b.n	6696 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6676:	f884 a004 	strb.w	sl, [r4, #4]
    667a:	9907      	ldr	r1, [sp, #28]
    667c:	f8a4 1005 	strh.w	r1, [r4, #5]
    6680:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6684:	71e1      	strb	r1, [r4, #7]
    6686:	3524      	adds	r5, #36	; 0x24
    6688:	7028      	strb	r0, [r5, #0]
    668a:	e786      	b.n	659a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    668c:	f240 2151 	movw	r1, #593	; 0x251
    6690:	2010      	movs	r0, #16
    6692:	f7fd ff6b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6696:	2000      	movs	r0, #0
    6698:	e785      	b.n	65a6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    669a:	0000      	.short	0x0000
    669c:	200000f0 	.word	0x200000f0
    66a0:	4804      	ldr	r0, [pc, #16]	; (66b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    66a2:	2100      	movs	r1, #0
    66a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    66a8:	7001      	strb	r1, [r0, #0]
    66aa:	8042      	strh	r2, [r0, #2]
    66ac:	1f00      	subs	r0, r0, #4
    66ae:	f8a0 1001 	strh.w	r1, [r0, #1]
    66b2:	4770      	bx	lr
    66b4:	20000268 	.word	0x20000268
    66b8:	b570      	push	{r4, r5, r6, lr}
    66ba:	4604      	mov	r4, r0
    66bc:	481b      	ldr	r0, [pc, #108]	; (672c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
    66be:	6801      	ldr	r1, [r0, #0]
    66c0:	b319      	cbz	r1, 670a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    66c2:	4620      	mov	r0, r4
    66c4:	4788      	blx	r1
    66c6:	b300      	cbz	r0, 670a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    66c8:	7820      	ldrb	r0, [r4, #0]
    66ca:	2818      	cmp	r0, #24
    66cc:	d002      	beq.n	66d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
    66ce:	2805      	cmp	r0, #5
    66d0:	d016      	beq.n	6700 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
    66d2:	e018      	b.n	6706 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    66d4:	7920      	ldrb	r0, [r4, #4]
    66d6:	2801      	cmp	r0, #1
    66d8:	d115      	bne.n	6706 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    66da:	88e0      	ldrh	r0, [r4, #6]
    66dc:	2100      	movs	r1, #0
    66de:	f005 fd13 	bl	c108 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    66e2:	0004      	movs	r4, r0
    66e4:	d00f      	beq.n	6706 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    66e6:	8820      	ldrh	r0, [r4, #0]
    66e8:	f005 fd76 	bl	c1d8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    66ec:	8820      	ldrh	r0, [r4, #0]
    66ee:	2100      	movs	r1, #0
    66f0:	f7fe f932 	bl	4958 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    66f4:	b138      	cbz	r0, 6706 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    66f6:	f44f 7185 	mov.w	r1, #266	; 0x10a
    66fa:	2010      	movs	r0, #16
    66fc:	f7fd ff36 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6700:	4620      	mov	r0, r4
    6702:	f7ff fe65 	bl	63d0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    6706:	2001      	movs	r0, #1
    6708:	bd70      	pop	{r4, r5, r6, pc}
    670a:	4d09      	ldr	r5, [pc, #36]	; (6730 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
    670c:	7868      	ldrb	r0, [r5, #1]
    670e:	2800      	cmp	r0, #0
    6710:	d0fa      	beq.n	6708 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
    6712:	2600      	movs	r6, #0
    6714:	7066      	strb	r6, [r4, #1]
    6716:	2014      	movs	r0, #20
    6718:	7020      	strb	r0, [r4, #0]
    671a:	2220      	movs	r2, #32
    671c:	4631      	mov	r1, r6
    671e:	1d20      	adds	r0, r4, #4
    6720:	f004 fe3a 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6724:	2002      	movs	r0, #2
    6726:	7120      	strb	r0, [r4, #4]
    6728:	706e      	strb	r6, [r5, #1]
    672a:	e7ec      	b.n	6706 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    672c:	200000f4 	.word	0x200000f4
    6730:	20000265 	.word	0x20000265

00006734 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    6734:	4801      	ldr	r0, [pc, #4]	; (673c <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    6736:	f006 ba3f 	b.w	cbb8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    673a:	0000      	.short	0x0000
    673c:	200000fc 	.word	0x200000fc

00006740 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    6740:	4801      	ldr	r0, [pc, #4]	; (6748 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    6742:	6840      	ldr	r0, [r0, #4]
    6744:	3080      	adds	r0, #128	; 0x80
    6746:	4770      	bx	lr
    6748:	20000104 	.word	0x20000104

0000674c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    674c:	b510      	push	{r4, lr}
    674e:	4c1f      	ldr	r4, [pc, #124]	; (67cc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    6750:	6860      	ldr	r0, [r4, #4]
    6752:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6756:	f006 fa50 	bl	cbfa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    675a:	6861      	ldr	r1, [r4, #4]
    675c:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    6760:	3132      	adds	r1, #50	; 0x32
    6762:	f7fe fc1f 	bl	4fa4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6766:	6860      	ldr	r0, [r4, #4]
    6768:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    676c:	f006 fa4c 	bl	cc08 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    6770:	6861      	ldr	r1, [r4, #4]
    6772:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    6776:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    677a:	3132      	adds	r1, #50	; 0x32
    677c:	f006 fa29 	bl	cbd2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6780:	b930      	cbnz	r0, 6790 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    6782:	6861      	ldr	r1, [r4, #4]
    6784:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    6788:	3132      	adds	r1, #50	; 0x32
    678a:	f006 fa2b 	bl	cbe4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    678e:	b108      	cbz	r0, 6794 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    6790:	2101      	movs	r1, #1
    6792:	e000      	b.n	6796 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6794:	2100      	movs	r1, #0
    6796:	6860      	ldr	r0, [r4, #4]
    6798:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    679c:	b919      	cbnz	r1, 67a6 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    679e:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    67a2:	2900      	cmp	r1, #0
    67a4:	d010      	beq.n	67c8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    67a6:	2100      	movs	r1, #0
    67a8:	6781      	str	r1, [r0, #120]	; 0x78
    67aa:	f004 fc06 	bl	afba <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    67ae:	6861      	ldr	r1, [r4, #4]
    67b0:	6448      	str	r0, [r1, #68]	; 0x44
    67b2:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    67b6:	b110      	cbz	r0, 67be <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    67b8:	2000      	movs	r0, #0
    67ba:	f7ff f98f 	bl	5adc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    67be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67c2:	2000      	movs	r0, #0
    67c4:	f000 bd82 	b.w	72cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x874>
    67c8:	bd10      	pop	{r4, pc}
    67ca:	0000      	.short	0x0000
    67cc:	20000104 	.word	0x20000104

000067d0 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    67d0:	b510      	push	{r4, lr}
    67d2:	4c09      	ldr	r4, [pc, #36]	; (67f8 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    67d4:	2803      	cmp	r0, #3
    67d6:	6864      	ldr	r4, [r4, #4]
    67d8:	d109      	bne.n	67ee <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    67da:	63e1      	str	r1, [r4, #60]	; 0x3c
    67dc:	b13b      	cbz	r3, 67ee <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    67de:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    67e2:	6819      	ldr	r1, [r3, #0]
    67e4:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    67e8:	8899      	ldrh	r1, [r3, #4]
    67ea:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    67ee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    67f2:	2000      	movs	r0, #0
    67f4:	bd10      	pop	{r4, pc}
    67f6:	0000      	.short	0x0000
    67f8:	20000104 	.word	0x20000104

000067fc <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    67fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67fe:	4604      	mov	r4, r0
    6800:	f006 fa4a 	bl	cc98 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    6804:	bb48      	cbnz	r0, 685a <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6806:	4e17      	ldr	r6, [pc, #92]	; (6864 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    6808:	6870      	ldr	r0, [r6, #4]
    680a:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    680e:	f88d 1000 	strb.w	r1, [sp]
    6812:	9900      	ldr	r1, [sp, #0]
    6814:	9100      	str	r1, [sp, #0]
    6816:	f89d 1000 	ldrb.w	r1, [sp]
    681a:	2500      	movs	r5, #0
    681c:	b139      	cbz	r1, 682e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    681e:	7065      	strb	r5, [r4, #1]
    6820:	2107      	movs	r1, #7
    6822:	7021      	strb	r1, [r4, #0]
    6824:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6826:	6061      	str	r1, [r4, #4]
    6828:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    682c:	e015      	b.n	685a <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    682e:	4620      	mov	r0, r4
    6830:	f000 f96a 	bl	6b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    6834:	b988      	cbnz	r0, 685a <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6836:	6870      	ldr	r0, [r6, #4]
    6838:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    683c:	f88d 1000 	strb.w	r1, [sp]
    6840:	9900      	ldr	r1, [sp, #0]
    6842:	9100      	str	r1, [sp, #0]
    6844:	f89d 1000 	ldrb.w	r1, [sp]
    6848:	b149      	cbz	r1, 685e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    684a:	7065      	strb	r5, [r4, #1]
    684c:	2118      	movs	r1, #24
    684e:	7021      	strb	r1, [r4, #0]
    6850:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    6854:	6061      	str	r1, [r4, #4]
    6856:	300a      	adds	r0, #10
    6858:	7785      	strb	r5, [r0, #30]
    685a:	2001      	movs	r0, #1
    685c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    685e:	2000      	movs	r0, #0
    6860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6862:	0000      	.short	0x0000
    6864:	20000104 	.word	0x20000104

00006868 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    6868:	4809      	ldr	r0, [pc, #36]	; (6890 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    686a:	6841      	ldr	r1, [r0, #4]
    686c:	6d48      	ldr	r0, [r1, #84]	; 0x54
    686e:	b168      	cbz	r0, 688c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    6870:	f101 0059 	add.w	r0, r1, #89	; 0x59
    6874:	2201      	movs	r2, #1
    6876:	7002      	strb	r2, [r0, #0]
    6878:	2300      	movs	r3, #0
    687a:	654b      	str	r3, [r1, #84]	; 0x54
    687c:	7003      	strb	r3, [r0, #0]
    687e:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    6882:	4082      	lsls	r2, r0
    6884:	4803      	ldr	r0, [pc, #12]	; (6894 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    6886:	6002      	str	r2, [r0, #0]
    6888:	2000      	movs	r0, #0
    688a:	4770      	bx	lr
    688c:	200c      	movs	r0, #12
    688e:	4770      	bx	lr
    6890:	20000104 	.word	0x20000104
    6894:	4001f508 	.word	0x4001f508

00006898 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    6898:	4909      	ldr	r1, [pc, #36]	; (68c0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    689a:	b510      	push	{r4, lr}
    689c:	6088      	str	r0, [r1, #8]
    689e:	68c8      	ldr	r0, [r1, #12]
    68a0:	b150      	cbz	r0, 68b8 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    68a2:	f000 ff15 	bl	76d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    68a6:	f000 f82f 	bl	6908 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    68aa:	2800      	cmp	r0, #0
    68ac:	d007      	beq.n	68be <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    68ae:	f640 01f9 	movw	r1, #2297	; 0x8f9
    68b2:	2032      	movs	r0, #50	; 0x32
    68b4:	f7fd fe5a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68b8:	f640 01f5 	movw	r1, #2293	; 0x8f5
    68bc:	e7f9      	b.n	68b2 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    68be:	bd10      	pop	{r4, pc}
    68c0:	20000104 	.word	0x20000104

000068c4 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    68c4:	4902      	ldr	r1, [pc, #8]	; (68d0 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    68c6:	4801      	ldr	r0, [pc, #4]	; (68cc <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    68c8:	60c8      	str	r0, [r1, #12]
    68ca:	4770      	bx	lr
    68cc:	00007918 	.word	0x00007918
    68d0:	20000104 	.word	0x20000104

000068d4 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    68d4:	b570      	push	{r4, r5, r6, lr}
    68d6:	4605      	mov	r5, r0
    68d8:	f7fe f94e 	bl	4b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    68dc:	4604      	mov	r4, r0
    68de:	f7fe f951 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    68e2:	4621      	mov	r1, r4
    68e4:	f006 f9d6 	bl	cc94 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    68e8:	0001      	movs	r1, r0
    68ea:	d006      	beq.n	68fa <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    68ec:	4805      	ldr	r0, [pc, #20]	; (6904 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    68ee:	68c0      	ldr	r0, [r0, #12]
    68f0:	6802      	ldr	r2, [r0, #0]
    68f2:	4628      	mov	r0, r5
    68f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    68f8:	4710      	bx	r2
    68fa:	f640 11f2 	movw	r1, #2546	; 0x9f2
    68fe:	2032      	movs	r0, #50	; 0x32
    6900:	f7fd fe34 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6904:	20000104 	.word	0x20000104

00006908 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    6908:	b570      	push	{r4, r5, r6, lr}
    690a:	4d19      	ldr	r5, [pc, #100]	; (6970 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    690c:	6868      	ldr	r0, [r5, #4]
    690e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    6912:	2901      	cmp	r1, #1
    6914:	d004      	beq.n	6920 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6916:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    691a:	b108      	cbz	r0, 6920 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    691c:	200c      	movs	r0, #12
    691e:	bd70      	pop	{r4, r5, r6, pc}
    6920:	f7fe f954 	bl	4bcc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    6924:	f006 fa1c 	bl	cd60 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    6928:	6868      	ldr	r0, [r5, #4]
    692a:	2400      	movs	r4, #0
    692c:	7004      	strb	r4, [r0, #0]
    692e:	f100 0122 	add.w	r1, r0, #34	; 0x22
    6932:	700c      	strb	r4, [r1, #0]
    6934:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    6938:	f000 f8ac 	bl	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    693c:	6868      	ldr	r0, [r5, #4]
    693e:	2201      	movs	r2, #1
    6940:	2107      	movs	r1, #7
    6942:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    6946:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    694a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    694e:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    6952:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    6956:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    695a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    695e:	f100 0159 	add.w	r1, r0, #89	; 0x59
    6962:	700a      	strb	r2, [r1, #0]
    6964:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    6968:	6544      	str	r4, [r0, #84]	; 0x54
    696a:	700c      	strb	r4, [r1, #0]
    696c:	2000      	movs	r0, #0
    696e:	bd70      	pop	{r4, r5, r6, pc}
    6970:	20000104 	.word	0x20000104

00006974 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    6974:	4805      	ldr	r0, [pc, #20]	; (698c <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    6976:	b510      	push	{r4, lr}
    6978:	6840      	ldr	r0, [r0, #4]
    697a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    697e:	f006 f93c 	bl	cbfa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6986:	f7fe bb39 	b.w	4ffc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    698a:	0000      	.short	0x0000
    698c:	20000104 	.word	0x20000104

00006990 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    6990:	b140      	cbz	r0, 69a4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6992:	2802      	cmp	r0, #2
    6994:	d006      	beq.n	69a4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6996:	2200      	movs	r2, #0
    6998:	4903      	ldr	r1, [pc, #12]	; (69a8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    699a:	6849      	ldr	r1, [r1, #4]
    699c:	f801 2f39 	strb.w	r2, [r1, #57]!
    69a0:	7208      	strb	r0, [r1, #8]
    69a2:	4770      	bx	lr
    69a4:	2201      	movs	r2, #1
    69a6:	e7f7      	b.n	6998 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    69a8:	20000104 	.word	0x20000104

000069ac <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    69ac:	b510      	push	{r4, lr}
    69ae:	4604      	mov	r4, r0
    69b0:	7800      	ldrb	r0, [r0, #0]
    69b2:	07c0      	lsls	r0, r0, #31
    69b4:	d007      	beq.n	69c6 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    69b6:	2300      	movs	r3, #0
    69b8:	7860      	ldrb	r0, [r4, #1]
    69ba:	461a      	mov	r2, r3
    69bc:	4619      	mov	r1, r3
    69be:	f7ff ff07 	bl	67d0 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    69c2:	2800      	cmp	r0, #0
    69c4:	d10c      	bne.n	69e0 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    69c6:	4b07      	ldr	r3, [pc, #28]	; (69e4 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    69c8:	78a0      	ldrb	r0, [r4, #2]
    69ca:	6859      	ldr	r1, [r3, #4]
    69cc:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    69d0:	78e0      	ldrb	r0, [r4, #3]
    69d2:	f7ff ffdd 	bl	6990 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    69d6:	6859      	ldr	r1, [r3, #4]
    69d8:	7920      	ldrb	r0, [r4, #4]
    69da:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    69de:	2000      	movs	r0, #0
    69e0:	bd10      	pop	{r4, pc}
    69e2:	0000      	.short	0x0000
    69e4:	20000104 	.word	0x20000104

000069e8 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    69e8:	4801      	ldr	r0, [pc, #4]	; (69f0 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    69ea:	68c0      	ldr	r0, [r0, #12]
    69ec:	6840      	ldr	r0, [r0, #4]
    69ee:	4700      	bx	r0
    69f0:	20000104 	.word	0x20000104

000069f4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    69f4:	b510      	push	{r4, lr}
    69f6:	2000      	movs	r0, #0
    69f8:	f000 fc8e 	bl	7318 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    69fc:	f000 f84a 	bl	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6a00:	f000 fe66 	bl	76d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    6a04:	4803      	ldr	r0, [pc, #12]	; (6a14 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    6a06:	6840      	ldr	r0, [r0, #4]
    6a08:	2100      	movs	r1, #0
    6a0a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    6a0e:	4608      	mov	r0, r1
    6a10:	bd10      	pop	{r4, pc}
    6a12:	0000      	.short	0x0000
    6a14:	20000104 	.word	0x20000104

00006a18 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    6a18:	b510      	push	{r4, lr}
    6a1a:	f000 f941 	bl	6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6a1e:	4909      	ldr	r1, [pc, #36]	; (6a44 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    6a20:	2201      	movs	r2, #1
    6a22:	b130      	cbz	r0, 6a32 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    6a24:	6848      	ldr	r0, [r1, #4]
    6a26:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    6a2a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6a2c:	881b      	ldrh	r3, [r3, #0]
    6a2e:	8583      	strh	r3, [r0, #44]	; 0x2c
    6a30:	e004      	b.n	6a3c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    6a32:	684b      	ldr	r3, [r1, #4]
    6a34:	2000      	movs	r0, #0
    6a36:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    6a3a:	8598      	strh	r0, [r3, #44]	; 0x2c
    6a3c:	6848      	ldr	r0, [r1, #4]
    6a3e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    6a42:	bd10      	pop	{r4, pc}
    6a44:	20000104 	.word	0x20000104

00006a48 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    6a48:	4802      	ldr	r0, [pc, #8]	; (6a54 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    6a4a:	6840      	ldr	r0, [r0, #4]
    6a4c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6a50:	4770      	bx	lr
    6a52:	0000      	.short	0x0000
    6a54:	20000104 	.word	0x20000104

00006a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    6a58:	b510      	push	{r4, lr}
    6a5a:	f000 f921 	bl	6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6a5e:	490c      	ldr	r1, [pc, #48]	; (6a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    6a60:	b128      	cbz	r0, 6a6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    6a62:	6848      	ldr	r0, [r1, #4]
    6a64:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    6a68:	2801      	cmp	r0, #1
    6a6a:	d00e      	beq.n	6a8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    6a6c:	e00c      	b.n	6a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6a6e:	6849      	ldr	r1, [r1, #4]
    6a70:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    6a74:	2801      	cmp	r0, #1
    6a76:	d001      	beq.n	6a7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    6a78:	2802      	cmp	r0, #2
    6a7a:	d105      	bne.n	6a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6a7c:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    6a80:	2801      	cmp	r0, #1
    6a82:	d003      	beq.n	6a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6a84:	2803      	cmp	r0, #3
    6a86:	d001      	beq.n	6a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6a88:	2000      	movs	r0, #0
    6a8a:	bd10      	pop	{r4, pc}
    6a8c:	2001      	movs	r0, #1
    6a8e:	bd10      	pop	{r4, pc}
    6a90:	20000104 	.word	0x20000104
    6a94:	b510      	push	{r4, lr}
    6a96:	4c07      	ldr	r4, [pc, #28]	; (6ab4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    6a98:	6860      	ldr	r0, [r4, #4]
    6a9a:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    6a9e:	2800      	cmp	r0, #0
    6aa0:	d007      	beq.n	6ab2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    6aa2:	f003 fb97 	bl	a1d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6aa6:	f003 f979 	bl	9d9c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6aaa:	6861      	ldr	r1, [r4, #4]
    6aac:	2000      	movs	r0, #0
    6aae:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    6ab2:	bd10      	pop	{r4, pc}
    6ab4:	20000104 	.word	0x20000104
    6ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6abc:	4d10      	ldr	r5, [pc, #64]	; (6b00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    6abe:	4606      	mov	r6, r0
    6ac0:	460f      	mov	r7, r1
    6ac2:	6868      	ldr	r0, [r5, #4]
    6ac4:	490f      	ldr	r1, [pc, #60]	; (6b04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    6ac6:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    6aca:	5c0c      	ldrb	r4, [r1, r0]
    6acc:	4620      	mov	r0, r4
    6ace:	f003 fef5 	bl	a8bc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6ad2:	6868      	ldr	r0, [r5, #4]
    6ad4:	2101      	movs	r1, #1
    6ad6:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    6ada:	2025      	movs	r0, #37	; 0x25
    6adc:	f007 f862 	bl	dba4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    6ae0:	4638      	mov	r0, r7
    6ae2:	f003 fdf5 	bl	a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ae6:	f04f 0101 	mov.w	r1, #1
    6aea:	4608      	mov	r0, r1
    6aec:	b126      	cbz	r6, 6af8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    6aee:	f003 fc27 	bl	a340 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6af2:	b918      	cbnz	r0, 6afc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    6af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6af8:	f003 fbd6 	bl	a2a8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6afc:	2001      	movs	r0, #1
    6afe:	e7f9      	b.n	6af4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    6b00:	20000104 	.word	0x20000104
    6b04:	0000dcf4 	.word	0x0000dcf4
    6b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b0a:	4e20      	ldr	r6, [pc, #128]	; (6b8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    6b0c:	4604      	mov	r4, r0
    6b0e:	6870      	ldr	r0, [r6, #4]
    6b10:	7801      	ldrb	r1, [r0, #0]
    6b12:	f88d 1000 	strb.w	r1, [sp]
    6b16:	9900      	ldr	r1, [sp, #0]
    6b18:	9100      	str	r1, [sp, #0]
    6b1a:	f89d 1000 	ldrb.w	r1, [sp]
    6b1e:	b389      	cbz	r1, 6b84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    6b20:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6b22:	6882      	ldr	r2, [r0, #8]
    6b24:	f841 2f03 	str.w	r2, [r1, #3]!
    6b28:	8982      	ldrh	r2, [r0, #12]
    6b2a:	808a      	strh	r2, [r1, #4]
    6b2c:	79c0      	ldrb	r0, [r0, #7]
    6b2e:	f006 f864 	bl	cbfa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6b32:	6871      	ldr	r1, [r6, #4]
    6b34:	2500      	movs	r5, #0
    6b36:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6b38:	1c89      	adds	r1, r1, #2
    6b3a:	7090      	strb	r0, [r2, #2]
    6b3c:	7065      	strb	r5, [r4, #1]
    6b3e:	2014      	movs	r0, #20
    6b40:	7020      	strb	r0, [r4, #0]
    6b42:	2220      	movs	r2, #32
    6b44:	1d20      	adds	r0, r4, #4
    6b46:	f004 fbad 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6b4a:	4a11      	ldr	r2, [pc, #68]	; (6b90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    6b4c:	7225      	strb	r5, [r4, #8]
    6b4e:	2301      	movs	r3, #1
    6b50:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6b52:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    6b56:	6871      	ldr	r1, [r6, #4]
    6b58:	700d      	strb	r5, [r1, #0]
    6b5a:	f101 0028 	add.w	r0, r1, #40	; 0x28
    6b5e:	7005      	strb	r5, [r0, #0]
    6b60:	88e0      	ldrh	r0, [r4, #6]
    6b62:	8490      	strh	r0, [r2, #36]	; 0x24
    6b64:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6b66:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    6b6a:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    6b6e:	4610      	mov	r0, r2
    6b70:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    6b74:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6b76:	8800      	ldrh	r0, [r0, #0]
    6b78:	f7fd ffd0 	bl	4b1c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b7c:	f005 f9df 	bl	bf3e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    6b80:	2001      	movs	r0, #1
    6b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b84:	e7ff      	b.n	6b86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    6b86:	2000      	movs	r0, #0
    6b88:	e7fb      	b.n	6b82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    6b8a:	0000      	.short	0x0000
    6b8c:	20000104 	.word	0x20000104
    6b90:	20000e54 	.word	0x20000e54
    6b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b96:	2600      	movs	r6, #0
    6b98:	460f      	mov	r7, r1
    6b9a:	4605      	mov	r5, r0
    6b9c:	f88d 6000 	strb.w	r6, [sp]
    6ba0:	466b      	mov	r3, sp
    6ba2:	f000 f89d 	bl	6ce0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    6ba6:	0001      	movs	r1, r0
    6ba8:	4810      	ldr	r0, [pc, #64]	; (6bec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
    6baa:	d003      	beq.n	6bb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
    6bac:	6840      	ldr	r0, [r0, #4]
    6bae:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
    6bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bb4:	6840      	ldr	r0, [r0, #4]
    6bb6:	f89d 1000 	ldrb.w	r1, [sp]
    6bba:	2f07      	cmp	r7, #7
    6bbc:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    6bc0:	d301      	bcc.n	6bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    6bc2:	4634      	mov	r4, r6
    6bc4:	e002      	b.n	6bcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6bc6:	0022      	movs	r2, r4
    6bc8:	d100      	bne.n	6bcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6bca:	460c      	mov	r4, r1
    6bcc:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
    6bd0:	6869      	ldr	r1, [r5, #4]
    6bd2:	2900      	cmp	r1, #0
    6bd4:	d0ed      	beq.n	6bb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
    6bd6:	7c69      	ldrb	r1, [r5, #17]
    6bd8:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    6bdc:	6869      	ldr	r1, [r5, #4]
    6bde:	680a      	ldr	r2, [r1, #0]
    6be0:	f840 2f6e 	str.w	r2, [r0, #110]!
    6be4:	8889      	ldrh	r1, [r1, #4]
    6be6:	8081      	strh	r1, [r0, #4]
    6be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bea:	0000      	.short	0x0000
    6bec:	20000104 	.word	0x20000104
    6bf0:	b510      	push	{r4, lr}
    6bf2:	4915      	ldr	r1, [pc, #84]	; (6c48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
    6bf4:	6842      	ldr	r2, [r0, #4]
    6bf6:	6849      	ldr	r1, [r1, #4]
    6bf8:	7813      	ldrb	r3, [r2, #0]
    6bfa:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    6bfe:	42a3      	cmp	r3, r4
    6c00:	d11f      	bne.n	6c42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c02:	7853      	ldrb	r3, [r2, #1]
    6c04:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    6c08:	42a3      	cmp	r3, r4
    6c0a:	d11a      	bne.n	6c42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c0c:	7893      	ldrb	r3, [r2, #2]
    6c0e:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    6c12:	42a3      	cmp	r3, r4
    6c14:	d115      	bne.n	6c42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c16:	78d3      	ldrb	r3, [r2, #3]
    6c18:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    6c1c:	42a3      	cmp	r3, r4
    6c1e:	d110      	bne.n	6c42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c20:	7913      	ldrb	r3, [r2, #4]
    6c22:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    6c26:	42a3      	cmp	r3, r4
    6c28:	d10b      	bne.n	6c42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c2a:	7952      	ldrb	r2, [r2, #5]
    6c2c:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    6c30:	429a      	cmp	r2, r3
    6c32:	d106      	bne.n	6c42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c34:	7c40      	ldrb	r0, [r0, #17]
    6c36:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    6c3a:	4288      	cmp	r0, r1
    6c3c:	d101      	bne.n	6c42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6c3e:	2001      	movs	r0, #1
    6c40:	bd10      	pop	{r4, pc}
    6c42:	2000      	movs	r0, #0
    6c44:	bd10      	pop	{r4, pc}
    6c46:	0000      	.short	0x0000
    6c48:	20000104 	.word	0x20000104
    6c4c:	b530      	push	{r4, r5, lr}
    6c4e:	7801      	ldrb	r1, [r0, #0]
    6c50:	b08b      	sub	sp, #44	; 0x2c
    6c52:	f001 040f 	and.w	r4, r1, #15
    6c56:	4622      	mov	r2, r4
    6c58:	a901      	add	r1, sp, #4
    6c5a:	f000 fee9 	bl	7a30 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6c5e:	a801      	add	r0, sp, #4
    6c60:	f7ff ffc6 	bl	6bf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
    6c64:	4605      	mov	r5, r0
    6c66:	f003 facf 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6c6a:	f000 fb6f 	bl	734c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    6c6e:	2c04      	cmp	r4, #4
    6c70:	d111      	bne.n	6c96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6c72:	b185      	cbz	r5, 6c96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6c74:	a80a      	add	r0, sp, #40	; 0x28
    6c76:	f000 fb75 	bl	7364 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    6c7a:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6c7e:	9000      	str	r0, [sp, #0]
    6c80:	4806      	ldr	r0, [pc, #24]	; (6c9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
    6c82:	6840      	ldr	r0, [r0, #4]
    6c84:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6c88:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    6c8c:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6c90:	a801      	add	r0, sp, #4
    6c92:	f006 f867 	bl	cd64 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6c96:	b00b      	add	sp, #44	; 0x2c
    6c98:	2005      	movs	r0, #5
    6c9a:	bd30      	pop	{r4, r5, pc}
    6c9c:	20000104 	.word	0x20000104
    6ca0:	4804      	ldr	r0, [pc, #16]	; (6cb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
    6ca2:	6840      	ldr	r0, [r0, #4]
    6ca4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6ca8:	2803      	cmp	r0, #3
    6caa:	d001      	beq.n	6cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    6cac:	2000      	movs	r0, #0
    6cae:	4770      	bx	lr
    6cb0:	2001      	movs	r0, #1
    6cb2:	4770      	bx	lr
    6cb4:	20000104 	.word	0x20000104
    6cb8:	4908      	ldr	r1, [pc, #32]	; (6cdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    6cba:	b510      	push	{r4, lr}
    6cbc:	6849      	ldr	r1, [r1, #4]
    6cbe:	7c83      	ldrb	r3, [r0, #18]
    6cc0:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6cc4:	429a      	cmp	r2, r3
    6cc6:	d105      	bne.n	6cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
    6cc8:	6880      	ldr	r0, [r0, #8]
    6cca:	2206      	movs	r2, #6
    6ccc:	3132      	adds	r1, #50	; 0x32
    6cce:	f004 fad7 	bl	b280 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6cd2:	b108      	cbz	r0, 6cd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6cd4:	2000      	movs	r0, #0
    6cd6:	bd10      	pop	{r4, pc}
    6cd8:	2001      	movs	r0, #1
    6cda:	bd10      	pop	{r4, pc}
    6cdc:	20000104 	.word	0x20000104
    6ce0:	b570      	push	{r4, r5, r6, lr}
    6ce2:	6841      	ldr	r1, [r0, #4]
    6ce4:	461e      	mov	r6, r3
    6ce6:	4604      	mov	r4, r0
    6ce8:	b1c1      	cbz	r1, 6d1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    6cea:	7c60      	ldrb	r0, [r4, #17]
    6cec:	f005 ff7a 	bl	cbe4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6cf0:	4d10      	ldr	r5, [pc, #64]	; (6d34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    6cf2:	6869      	ldr	r1, [r5, #4]
    6cf4:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6cf8:	b141      	cbz	r1, 6d0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6cfa:	b138      	cbz	r0, 6d0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6cfc:	f005 fb01 	bl	c302 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6d00:	6869      	ldr	r1, [r5, #4]
    6d02:	f801 0f64 	strb.w	r0, [r1, #100]!
    6d06:	7048      	strb	r0, [r1, #1]
    6d08:	2001      	movs	r0, #1
    6d0a:	71c8      	strb	r0, [r1, #7]
    6d0c:	686b      	ldr	r3, [r5, #4]
    6d0e:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6d12:	28ff      	cmp	r0, #255	; 0xff
    6d14:	d004      	beq.n	6d20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    6d16:	f7fe ff8f 	bl	5c38 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6d1a:	7030      	strb	r0, [r6, #0]
    6d1c:	2000      	movs	r0, #0
    6d1e:	bd70      	pop	{r4, r5, r6, pc}
    6d20:	7c60      	ldrb	r0, [r4, #17]
    6d22:	4632      	mov	r2, r6
    6d24:	3364      	adds	r3, #100	; 0x64
    6d26:	6861      	ldr	r1, [r4, #4]
    6d28:	f7ff f802 	bl	5d30 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    6d2c:	f080 0001 	eor.w	r0, r0, #1
    6d30:	bd70      	pop	{r4, r5, r6, pc}
    6d32:	0000      	.short	0x0000
    6d34:	20000104 	.word	0x20000104
    6d38:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6d3a:	4c3d      	ldr	r4, [pc, #244]	; (6e30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
    6d3c:	466f      	mov	r7, sp
    6d3e:	6860      	ldr	r0, [r4, #4]
    6d40:	7801      	ldrb	r1, [r0, #0]
    6d42:	f88d 1008 	strb.w	r1, [sp, #8]
    6d46:	9902      	ldr	r1, [sp, #8]
    6d48:	9102      	str	r1, [sp, #8]
    6d4a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6d4e:	b111      	cbz	r1, 6d56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
    6d50:	f241 41b1 	movw	r1, #5297	; 0x14b1
    6d54:	e04f      	b.n	6df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
    6d56:	2500      	movs	r5, #0
    6d58:	7085      	strb	r5, [r0, #2]
    6d5a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6d5c:	880a      	ldrh	r2, [r1, #0]
    6d5e:	8082      	strh	r2, [r0, #4]
    6d60:	68c8      	ldr	r0, [r1, #12]
    6d62:	f005 fb33 	bl	c3cc <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6d66:	6861      	ldr	r1, [r4, #4]
    6d68:	8348      	strh	r0, [r1, #26]
    6d6a:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6d6c:	8a82      	ldrh	r2, [r0, #20]
    6d6e:	838a      	strh	r2, [r1, #28]
    6d70:	8ac0      	ldrh	r0, [r0, #22]
    6d72:	83c8      	strh	r0, [r1, #30]
    6d74:	f881 5020 	strb.w	r5, [r1, #32]
    6d78:	4669      	mov	r1, sp
    6d7a:	68a0      	ldr	r0, [r4, #8]
    6d7c:	f005 fd8c 	bl	c898 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6d80:	68a0      	ldr	r0, [r4, #8]
    6d82:	7800      	ldrb	r0, [r0, #0]
    6d84:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6d88:	6860      	ldr	r0, [r4, #4]
    6d8a:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6d8e:	b120      	cbz	r0, 6d9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    6d90:	4639      	mov	r1, r7
    6d92:	4630      	mov	r0, r6
    6d94:	f005 ff26 	bl	cbe4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6d98:	b940      	cbnz	r0, 6dac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    6d9a:	6860      	ldr	r0, [r4, #4]
    6d9c:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6da0:	b160      	cbz	r0, 6dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6da2:	4639      	mov	r1, r7
    6da4:	4630      	mov	r0, r6
    6da6:	f005 ff14 	bl	cbd2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6daa:	b138      	cbz	r0, 6dbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6dac:	6860      	ldr	r0, [r4, #4]
    6dae:	9900      	ldr	r1, [sp, #0]
    6db0:	f8c0 100e 	str.w	r1, [r0, #14]
    6db4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6db8:	8241      	strh	r1, [r0, #18]
    6dba:	e003      	b.n	6dc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6dbc:	6860      	ldr	r0, [r4, #4]
    6dbe:	f8c0 500e 	str.w	r5, [r0, #14]
    6dc2:	8245      	strh	r5, [r0, #18]
    6dc4:	6861      	ldr	r1, [r4, #4]
    6dc6:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6dca:	28ff      	cmp	r0, #255	; 0xff
    6dcc:	d016      	beq.n	6dfc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    6dce:	f101 0208 	add.w	r2, r1, #8
    6dd2:	1dc9      	adds	r1, r1, #7
    6dd4:	f7fe ff16 	bl	5c04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6dd8:	b158      	cbz	r0, 6df2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    6dda:	6860      	ldr	r0, [r4, #4]
    6ddc:	79c1      	ldrb	r1, [r0, #7]
    6dde:	f041 0102 	orr.w	r1, r1, #2
    6de2:	71c1      	strb	r1, [r0, #7]
    6de4:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6de8:	6141      	str	r1, [r0, #20]
    6dea:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6dee:	8301      	strh	r1, [r0, #24]
    6df0:	e00f      	b.n	6e12 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    6df2:	f241 41dc 	movw	r1, #5340	; 0x14dc
    6df6:	2032      	movs	r0, #50	; 0x32
    6df8:	f7fd fbb8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dfc:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6e00:	71c8      	strb	r0, [r1, #7]
    6e02:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6e06:	6088      	str	r0, [r1, #8]
    6e08:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6e0c:	8188      	strh	r0, [r1, #12]
    6e0e:	614d      	str	r5, [r1, #20]
    6e10:	830d      	strh	r5, [r1, #24]
    6e12:	6860      	ldr	r0, [r4, #4]
    6e14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6e16:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6e1a:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6e1e:	2101      	movs	r1, #1
    6e20:	7001      	strb	r1, [r0, #0]
    6e22:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e24:	8800      	ldrh	r0, [r0, #0]
    6e26:	f7fd fe79 	bl	4b1c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6e2a:	f005 f88e 	bl	bf4a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6e2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6e30:	20000104 	.word	0x20000104
    6e34:	b570      	push	{r4, r5, r6, lr}
    6e36:	4d39      	ldr	r5, [pc, #228]	; (6f1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
    6e38:	4601      	mov	r1, r0
    6e3a:	2200      	movs	r2, #0
    6e3c:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6e40:	365c      	adds	r6, #92	; 0x5c
    6e42:	8002      	strh	r2, [r0, #0]
    6e44:	2903      	cmp	r1, #3
    6e46:	d002      	beq.n	6e4e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    6e48:	2905      	cmp	r1, #5
    6e4a:	d004      	beq.n	6e56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
    6e4c:	e056      	b.n	6efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6e4e:	2103      	movs	r1, #3
    6e50:	f005 fd39 	bl	c8c6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6e54:	e052      	b.n	6efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6e56:	2105      	movs	r1, #5
    6e58:	f005 fd35 	bl	c8c6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6e5c:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e60:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e62:	6909      	ldr	r1, [r1, #16]
    6e64:	f844 1f0f 	str.w	r1, [r4, #15]!
    6e68:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e6a:	8b0a      	ldrh	r2, [r1, #24]
    6e6c:	80a2      	strh	r2, [r4, #4]
    6e6e:	7e89      	ldrb	r1, [r1, #26]
    6e70:	71a1      	strb	r1, [r4, #6]
    6e72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e74:	68c1      	ldr	r1, [r0, #12]
    6e76:	8b80      	ldrh	r0, [r0, #28]
    6e78:	f005 fc1a 	bl	c6b0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6e7c:	71e0      	strb	r0, [r4, #7]
    6e7e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e82:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e84:	68c1      	ldr	r1, [r0, #12]
    6e86:	6a00      	ldr	r0, [r0, #32]
    6e88:	f005 fc07 	bl	c69a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6e8c:	75e0      	strb	r0, [r4, #23]
    6e8e:	0a00      	lsrs	r0, r0, #8
    6e90:	7620      	strb	r0, [r4, #24]
    6e92:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e96:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e98:	68c0      	ldr	r0, [r0, #12]
    6e9a:	f005 fa97 	bl	c3cc <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6e9e:	7660      	strb	r0, [r4, #25]
    6ea0:	0a00      	lsrs	r0, r0, #8
    6ea2:	76a0      	strb	r0, [r4, #26]
    6ea4:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6ea8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6eaa:	8a89      	ldrh	r1, [r1, #20]
    6eac:	76e1      	strb	r1, [r4, #27]
    6eae:	0a09      	lsrs	r1, r1, #8
    6eb0:	7721      	strb	r1, [r4, #28]
    6eb2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6eb4:	8ac9      	ldrh	r1, [r1, #22]
    6eb6:	7761      	strb	r1, [r4, #29]
    6eb8:	0a09      	lsrs	r1, r1, #8
    6eba:	77a1      	strb	r1, [r4, #30]
    6ebc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6ebe:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6ec2:	f8c4 201f 	str.w	r2, [r4, #31]
    6ec6:	7909      	ldrb	r1, [r1, #4]
    6ec8:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6ecc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6ece:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6ed2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6ed6:	f001 011f 	and.w	r1, r1, #31
    6eda:	f020 001f 	bic.w	r0, r0, #31
    6ede:	4308      	orrs	r0, r1
    6ee0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6ee4:	f002 ff3c 	bl	9d60 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6ee8:	2807      	cmp	r0, #7
    6eea:	d900      	bls.n	6eee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    6eec:	2007      	movs	r0, #7
    6eee:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6ef2:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6ef6:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6efa:	7021      	strb	r1, [r4, #0]
    6efc:	f106 0112 	add.w	r1, r6, #18
    6f00:	68a8      	ldr	r0, [r5, #8]
    6f02:	f005 fcfb 	bl	c8fc <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6f06:	7e71      	ldrb	r1, [r6, #25]
    6f08:	68a8      	ldr	r0, [r5, #8]
    6f0a:	f005 fcfd 	bl	c908 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6f0e:	f000 fba7 	bl	7660 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc08>
    6f12:	68a8      	ldr	r0, [r5, #8]
    6f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f18:	f003 bbda 	b.w	a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6f1c:	20000104 	.word	0x20000104
    6f20:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6f24:	4f65      	ldr	r7, [pc, #404]	; (70bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x664>)
    6f26:	4604      	mov	r4, r0
    6f28:	6878      	ldr	r0, [r7, #4]
    6f2a:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
    6f2e:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6f32:	b180      	cbz	r0, 6f56 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    6f34:	2600      	movs	r6, #0
    6f36:	2500      	movs	r5, #0
    6f38:	7ca0      	ldrb	r0, [r4, #18]
    6f3a:	68a1      	ldr	r1, [r4, #8]
    6f3c:	f005 fe52 	bl	cbe4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6f40:	4682      	mov	sl, r0
    6f42:	f7ff fead 	bl	6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6f46:	b140      	cbz	r0, 6f5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6f48:	6878      	ldr	r0, [r7, #4]
    6f4a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6f4e:	b121      	cbz	r1, 6f5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6f50:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6f54:	e004      	b.n	6f60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
    6f56:	2601      	movs	r6, #1
    6f58:	e7ed      	b.n	6f36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    6f5a:	6878      	ldr	r0, [r7, #4]
    6f5c:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6f60:	4683      	mov	fp, r0
    6f62:	f7fe fda1 	bl	5aa8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6f66:	ea5f 0900 	movs.w	r9, r0
    6f6a:	d00c      	beq.n	6f86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6f6c:	4658      	mov	r0, fp
    6f6e:	f7fe fd8f 	bl	5a90 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6f72:	b100      	cbz	r0, 6f76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
    6f74:	2601      	movs	r6, #1
    6f76:	f1ba 0f00 	cmp.w	sl, #0
    6f7a:	d004      	beq.n	6f86 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6f7c:	4648      	mov	r0, r9
    6f7e:	68a1      	ldr	r1, [r4, #8]
    6f80:	f005 f972 	bl	c268 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6f84:	4605      	mov	r5, r0
    6f86:	6878      	ldr	r0, [r7, #4]
    6f88:	46b9      	mov	r9, r7
    6f8a:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6f8e:	b10d      	cbz	r5, 6f94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    6f90:	f047 0702 	orr.w	r7, r7, #2
    6f94:	f7ff fe84 	bl	6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6f98:	b3a0      	cbz	r0, 7004 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6f9a:	6860      	ldr	r0, [r4, #4]
    6f9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6fa0:	7802      	ldrb	r2, [r0, #0]
    6fa2:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6fa6:	429a      	cmp	r2, r3
    6fa8:	d11f      	bne.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6faa:	7842      	ldrb	r2, [r0, #1]
    6fac:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6fb0:	429a      	cmp	r2, r3
    6fb2:	d11a      	bne.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fb4:	7882      	ldrb	r2, [r0, #2]
    6fb6:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6fba:	429a      	cmp	r2, r3
    6fbc:	d115      	bne.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fbe:	78c2      	ldrb	r2, [r0, #3]
    6fc0:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6fc4:	429a      	cmp	r2, r3
    6fc6:	d110      	bne.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fc8:	7902      	ldrb	r2, [r0, #4]
    6fca:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6fce:	429a      	cmp	r2, r3
    6fd0:	d10b      	bne.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fd2:	7940      	ldrb	r0, [r0, #5]
    6fd4:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6fd8:	4290      	cmp	r0, r2
    6fda:	d106      	bne.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fdc:	7c60      	ldrb	r0, [r4, #17]
    6fde:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6fe2:	4288      	cmp	r0, r1
    6fe4:	d101      	bne.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6fe6:	2001      	movs	r0, #1
    6fe8:	e000      	b.n	6fec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
    6fea:	2000      	movs	r0, #0
    6fec:	4f34      	ldr	r7, [pc, #208]	; (70c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x668>)
    6fee:	4682      	mov	sl, r0
    6ff0:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6ff4:	2808      	cmp	r0, #8
    6ff6:	d006      	beq.n	7006 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6ff8:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6ffc:	4288      	cmp	r0, r1
    6ffe:	d102      	bne.n	7006 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    7000:	2001      	movs	r0, #1
    7002:	e001      	b.n	7008 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
    7004:	e021      	b.n	704a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    7006:	2000      	movs	r0, #0
    7008:	4681      	mov	r9, r0
    700a:	b925      	cbnz	r5, 7016 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
    700c:	b12e      	cbz	r6, 701a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    700e:	4620      	mov	r0, r4
    7010:	f7ff fe52 	bl	6cb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    7014:	b108      	cbz	r0, 701a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    7016:	2001      	movs	r0, #1
    7018:	e000      	b.n	701c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    701a:	2000      	movs	r0, #0
    701c:	f1b8 0f00 	cmp.w	r8, #0
    7020:	d009      	beq.n	7036 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    7022:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    7026:	2901      	cmp	r1, #1
    7028:	d003      	beq.n	7032 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5da>
    702a:	b921      	cbnz	r1, 7036 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    702c:	ea5a 0109 	orrs.w	r1, sl, r9
    7030:	d001      	beq.n	7036 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    7032:	2101      	movs	r1, #1
    7034:	e000      	b.n	7038 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
    7036:	2100      	movs	r1, #0
    7038:	4208      	tst	r0, r1
    703a:	d003      	beq.n	7044 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
    703c:	200c      	movs	r0, #12
    703e:	b004      	add	sp, #16
    7040:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7044:	f003 f8e0 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7048:	e036      	b.n	70b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    704a:	f003 f8dd 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    704e:	f1b8 0f00 	cmp.w	r8, #0
    7052:	d031      	beq.n	70b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    7054:	4620      	mov	r0, r4
    7056:	f7ff fe2f 	bl	6cb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    705a:	b900      	cbnz	r0, 705e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x606>
    705c:	b175      	cbz	r5, 707c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x624>
    705e:	a803      	add	r0, sp, #12
    7060:	f000 f980 	bl	7364 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    7064:	f8d9 2004 	ldr.w	r2, [r9, #4]
    7068:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    706c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7070:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7074:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7078:	463b      	mov	r3, r7
    707a:	e018      	b.n	70ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x656>
    707c:	f8d9 0004 	ldr.w	r0, [r9, #4]
    7080:	464d      	mov	r5, r9
    7082:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    7086:	2803      	cmp	r0, #3
    7088:	d001      	beq.n	708e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x636>
    708a:	2802      	cmp	r0, #2
    708c:	d114      	bne.n	70b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    708e:	f1ba 0f00 	cmp.w	sl, #0
    7092:	d011      	beq.n	70b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x660>
    7094:	a803      	add	r0, sp, #12
    7096:	f000 f965 	bl	7364 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    709a:	686a      	ldr	r2, [r5, #4]
    709c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    70a0:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    70a4:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    70a8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    70ac:	23fe      	movs	r3, #254	; 0xfe
    70ae:	2101      	movs	r1, #1
    70b0:	4620      	mov	r0, r4
    70b2:	3232      	adds	r2, #50	; 0x32
    70b4:	f000 fc46 	bl	7944 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    70b8:	2005      	movs	r0, #5
    70ba:	e7c0      	b.n	703e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e6>
    70bc:	20000104 	.word	0x20000104
    70c0:	20000e54 	.word	0x20000e54
    70c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    70c6:	4c3f      	ldr	r4, [pc, #252]	; (71c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x76c>)
    70c8:	4605      	mov	r5, r0
    70ca:	6860      	ldr	r0, [r4, #4]
    70cc:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    70d0:	2900      	cmp	r1, #0
    70d2:	d06c      	beq.n	71ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    70d4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    70d8:	2802      	cmp	r0, #2
    70da:	d02c      	beq.n	7136 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6de>
    70dc:	2801      	cmp	r0, #1
    70de:	d043      	beq.n	7168 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x710>
    70e0:	f7ff fdde 	bl	6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    70e4:	2800      	cmp	r0, #0
    70e6:	d067      	beq.n	71b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x760>
    70e8:	686a      	ldr	r2, [r5, #4]
    70ea:	6861      	ldr	r1, [r4, #4]
    70ec:	7810      	ldrb	r0, [r2, #0]
    70ee:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    70f2:	4298      	cmp	r0, r3
    70f4:	d14c      	bne.n	7190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    70f6:	7850      	ldrb	r0, [r2, #1]
    70f8:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    70fc:	4298      	cmp	r0, r3
    70fe:	d147      	bne.n	7190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7100:	7890      	ldrb	r0, [r2, #2]
    7102:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7106:	4298      	cmp	r0, r3
    7108:	d142      	bne.n	7190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    710a:	78d0      	ldrb	r0, [r2, #3]
    710c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7110:	4298      	cmp	r0, r3
    7112:	d13d      	bne.n	7190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7114:	7910      	ldrb	r0, [r2, #4]
    7116:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    711a:	4298      	cmp	r0, r3
    711c:	d138      	bne.n	7190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    711e:	7950      	ldrb	r0, [r2, #5]
    7120:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7124:	4290      	cmp	r0, r2
    7126:	d133      	bne.n	7190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7128:	7c68      	ldrb	r0, [r5, #17]
    712a:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    712e:	4290      	cmp	r0, r2
    7130:	d12e      	bne.n	7190 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7132:	2001      	movs	r0, #1
    7134:	e02d      	b.n	7192 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x73a>
    7136:	a803      	add	r0, sp, #12
    7138:	f000 f914 	bl	7364 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    713c:	6862      	ldr	r2, [r4, #4]
    713e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7142:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7146:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    714a:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    714e:	23ff      	movs	r3, #255	; 0xff
    7150:	2100      	movs	r1, #0
    7152:	4628      	mov	r0, r5
    7154:	3232      	adds	r2, #50	; 0x32
    7156:	f000 fbf5 	bl	7944 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    715a:	6861      	ldr	r1, [r4, #4]
    715c:	2001      	movs	r0, #1
    715e:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    7162:	200b      	movs	r0, #11
    7164:	b004      	add	sp, #16
    7166:	bd70      	pop	{r4, r5, r6, pc}
    7168:	a803      	add	r0, sp, #12
    716a:	f000 f8fb 	bl	7364 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    716e:	6862      	ldr	r2, [r4, #4]
    7170:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7174:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7178:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    717c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7180:	23ff      	movs	r3, #255	; 0xff
    7182:	2100      	movs	r1, #0
    7184:	4628      	mov	r0, r5
    7186:	3232      	adds	r2, #50	; 0x32
    7188:	f000 fbdc 	bl	7944 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    718c:	2005      	movs	r0, #5
    718e:	e7e9      	b.n	7164 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
    7190:	2000      	movs	r0, #0
    7192:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    7196:	2901      	cmp	r1, #1
    7198:	d00c      	beq.n	71b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    719a:	b958      	cbnz	r0, 71b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    719c:	490a      	ldr	r1, [pc, #40]	; (71c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x770>)
    719e:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    71a2:	2808      	cmp	r0, #8
    71a4:	d003      	beq.n	71ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x756>
    71a6:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    71aa:	4281      	cmp	r1, r0
    71ac:	d002      	beq.n	71b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x75c>
    71ae:	f003 f82b 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    71b2:	e7eb      	b.n	718c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>
    71b4:	200c      	movs	r0, #12
    71b6:	e7d5      	b.n	7164 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x70c>
    71b8:	f640 6158 	movw	r1, #3672	; 0xe58
    71bc:	2032      	movs	r0, #50	; 0x32
    71be:	f7fd f9d5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71c2:	0000      	.short	0x0000
    71c4:	20000104 	.word	0x20000104
    71c8:	20000e54 	.word	0x20000e54
    71cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    71ce:	4c1e      	ldr	r4, [pc, #120]	; (7248 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f0>)
    71d0:	4605      	mov	r5, r0
    71d2:	6860      	ldr	r0, [r4, #4]
    71d4:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    71d8:	b129      	cbz	r1, 71e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x78e>
    71da:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    71de:	2802      	cmp	r0, #2
    71e0:	d004      	beq.n	71ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x794>
    71e2:	2801      	cmp	r0, #1
    71e4:	d01b      	beq.n	721e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c6>
    71e6:	f003 f80f 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    71ea:	e02a      	b.n	7242 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7ea>
    71ec:	a803      	add	r0, sp, #12
    71ee:	f000 f8b9 	bl	7364 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    71f2:	6862      	ldr	r2, [r4, #4]
    71f4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    71f8:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    71fc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7200:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7204:	23ff      	movs	r3, #255	; 0xff
    7206:	2106      	movs	r1, #6
    7208:	4628      	mov	r0, r5
    720a:	3232      	adds	r2, #50	; 0x32
    720c:	f000 fb9a 	bl	7944 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7210:	6862      	ldr	r2, [r4, #4]
    7212:	200b      	movs	r0, #11
    7214:	2100      	movs	r1, #0
    7216:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    721a:	b004      	add	sp, #16
    721c:	bd70      	pop	{r4, r5, r6, pc}
    721e:	a803      	add	r0, sp, #12
    7220:	f000 f8a0 	bl	7364 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    7224:	6862      	ldr	r2, [r4, #4]
    7226:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    722a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    722e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7232:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7236:	23ff      	movs	r3, #255	; 0xff
    7238:	2106      	movs	r1, #6
    723a:	4628      	mov	r0, r5
    723c:	3232      	adds	r2, #50	; 0x32
    723e:	f000 fb81 	bl	7944 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7242:	2005      	movs	r0, #5
    7244:	e7e9      	b.n	721a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    7246:	0000      	.short	0x0000
    7248:	20000104 	.word	0x20000104
    724c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    724e:	b389      	cbz	r1, 72b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85c>
    7250:	2901      	cmp	r1, #1
    7252:	d034      	beq.n	72be <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x866>
    7254:	2505      	movs	r5, #5
    7256:	2902      	cmp	r1, #2
    7258:	d004      	beq.n	7264 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x80c>
    725a:	2906      	cmp	r1, #6
    725c:	d025      	beq.n	72aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x852>
    725e:	f002 ffd3 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7262:	e01f      	b.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    7264:	4606      	mov	r6, r0
    7266:	f002 ffcf 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    726a:	4c17      	ldr	r4, [pc, #92]	; (72c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x870>)
    726c:	6860      	ldr	r0, [r4, #4]
    726e:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7272:	b1b9      	cbz	r1, 72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    7274:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7278:	2801      	cmp	r0, #1
    727a:	d001      	beq.n	7280 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x828>
    727c:	2802      	cmp	r0, #2
    727e:	d111      	bne.n	72a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x84c>
    7280:	a803      	add	r0, sp, #12
    7282:	f000 f86f 	bl	7364 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x90c>
    7286:	6862      	ldr	r2, [r4, #4]
    7288:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    728c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7290:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7294:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7298:	23ff      	movs	r3, #255	; 0xff
    729a:	2102      	movs	r1, #2
    729c:	4630      	mov	r0, r6
    729e:	3232      	adds	r2, #50	; 0x32
    72a0:	f000 fb50 	bl	7944 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    72a4:	b004      	add	sp, #16
    72a6:	4628      	mov	r0, r5
    72a8:	bd70      	pop	{r4, r5, r6, pc}
    72aa:	b004      	add	sp, #16
    72ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72b0:	f7ff bf8c 	b.w	71cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x774>
    72b4:	b004      	add	sp, #16
    72b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72ba:	f7ff bf03 	b.w	70c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x66c>
    72be:	b004      	add	sp, #16
    72c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72c4:	f7ff be2c 	b.w	6f20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    72c8:	20000104 	.word	0x20000104
    72cc:	b570      	push	{r4, r5, r6, lr}
    72ce:	4c11      	ldr	r4, [pc, #68]	; (7314 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8bc>)
    72d0:	4605      	mov	r5, r0
    72d2:	6861      	ldr	r1, [r4, #4]
    72d4:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    72d8:	2800      	cmp	r0, #0
    72da:	d019      	beq.n	7310 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    72dc:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    72e0:	2800      	cmp	r0, #0
    72e2:	d015      	beq.n	7310 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    72e4:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    72e8:	3132      	adds	r1, #50	; 0x32
    72ea:	f005 fc7b 	bl	cbe4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    72ee:	b140      	cbz	r0, 7302 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8aa>
    72f0:	f7fe fba4 	bl	5a3c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    72f4:	6861      	ldr	r1, [r4, #4]
    72f6:	462a      	mov	r2, r5
    72f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72fc:	3132      	adds	r1, #50	; 0x32
    72fe:	f004 bf7e 	b.w	c1fe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7302:	6860      	ldr	r0, [r4, #4]
    7304:	4629      	mov	r1, r5
    7306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    730a:	3032      	adds	r0, #50	; 0x32
    730c:	f004 bf66 	b.w	c1dc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7310:	bd70      	pop	{r4, r5, r6, pc}
    7312:	0000      	.short	0x0000
    7314:	20000104 	.word	0x20000104
    7318:	4602      	mov	r2, r0
    731a:	480b      	ldr	r0, [pc, #44]	; (7348 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f0>)
    731c:	b082      	sub	sp, #8
    731e:	6840      	ldr	r0, [r0, #4]
    7320:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    7324:	f88d 1000 	strb.w	r1, [sp]
    7328:	9900      	ldr	r1, [sp, #0]
    732a:	9100      	str	r1, [sp, #0]
    732c:	f89d 1000 	ldrb.w	r1, [sp]
    7330:	2900      	cmp	r1, #0
    7332:	d107      	bne.n	7344 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>
    7334:	6d41      	ldr	r1, [r0, #84]	; 0x54
    7336:	2900      	cmp	r1, #0
    7338:	d004      	beq.n	7344 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8ec>
    733a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    733e:	b002      	add	sp, #8
    7340:	f7fb bdb6 	b.w	2eb0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    7344:	b002      	add	sp, #8
    7346:	4770      	bx	lr
    7348:	20000104 	.word	0x20000104
    734c:	b510      	push	{r4, lr}
    734e:	4804      	ldr	r0, [pc, #16]	; (7360 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
    7350:	f003 fa70 	bl	a834 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    7354:	2800      	cmp	r0, #0
    7356:	d102      	bne.n	735e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x906>
    7358:	4901      	ldr	r1, [pc, #4]	; (7360 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x908>)
    735a:	207f      	movs	r0, #127	; 0x7f
    735c:	7008      	strb	r0, [r1, #0]
    735e:	bd10      	pop	{r4, pc}
    7360:	20000104 	.word	0x20000104
    7364:	4a07      	ldr	r2, [pc, #28]	; (7384 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>)
    7366:	b510      	push	{r4, lr}
    7368:	f992 1000 	ldrsb.w	r1, [r2]
    736c:	297f      	cmp	r1, #127	; 0x7f
    736e:	d003      	beq.n	7378 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x920>
    7370:	7001      	strb	r1, [r0, #0]
    7372:	207f      	movs	r0, #127	; 0x7f
    7374:	7010      	strb	r0, [r2, #0]
    7376:	bd10      	pop	{r4, pc}
    7378:	f240 319f 	movw	r1, #927	; 0x39f
    737c:	2032      	movs	r0, #50	; 0x32
    737e:	f7fd f8f5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7382:	0000      	.short	0x0000
    7384:	20000104 	.word	0x20000104
    7388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    738c:	4607      	mov	r7, r0
    738e:	f7fd fbf3 	bl	4b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7392:	4604      	mov	r4, r0
    7394:	f7fd fbf6 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7398:	4621      	mov	r1, r4
    739a:	f005 fc7b 	bl	cc94 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    739e:	0005      	movs	r5, r0
    73a0:	d012      	beq.n	73c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    73a2:	4c2d      	ldr	r4, [pc, #180]	; (7458 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa00>)
    73a4:	6860      	ldr	r0, [r4, #4]
    73a6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    73aa:	2801      	cmp	r0, #1
    73ac:	d004      	beq.n	73b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    73ae:	2802      	cmp	r0, #2
    73b0:	d002      	beq.n	73b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    73b2:	f7ff fc75 	bl	6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    73b6:	b150      	cbz	r0, 73ce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x976>
    73b8:	f06f 0613 	mvn.w	r6, #19
    73bc:	b33f      	cbz	r7, 740e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b6>
    73be:	4628      	mov	r0, r5
    73c0:	f005 fa52 	bl	c868 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    73c4:	b950      	cbnz	r0, 73dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
    73c6:	e005      	b.n	73d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x97c>
    73c8:	f241 4181 	movw	r1, #5249	; 0x1481
    73cc:	e03a      	b.n	7444 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    73ce:	f241 4187 	movw	r1, #5255	; 0x1487
    73d2:	e037      	b.n	7444 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    73d4:	4628      	mov	r0, r5
    73d6:	f005 fa69 	bl	c8ac <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    73da:	b1c0      	cbz	r0, 740e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9b6>
    73dc:	6861      	ldr	r1, [r4, #4]
    73de:	4628      	mov	r0, r5
    73e0:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    73e4:	2a05      	cmp	r2, #5
    73e6:	d202      	bcs.n	73ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x996>
    73e8:	f241 410b 	movw	r1, #5131	; 0x140b
    73ec:	e02a      	b.n	7444 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    73ee:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    73f2:	2a0b      	cmp	r2, #11
    73f4:	d302      	bcc.n	73fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9a4>
    73f6:	f241 410c 	movw	r1, #5132	; 0x140c
    73fa:	e023      	b.n	7444 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    73fc:	68e2      	ldr	r2, [r4, #12]
    73fe:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7402:	6952      	ldr	r2, [r2, #20]
    7404:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    7408:	5851      	ldr	r1, [r2, r1]
    740a:	4788      	blx	r1
    740c:	e016      	b.n	743c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e4>
    740e:	6860      	ldr	r0, [r4, #4]
    7410:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7414:	2905      	cmp	r1, #5
    7416:	d202      	bcs.n	741e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c6>
    7418:	f241 4177 	movw	r1, #5239	; 0x1477
    741c:	e012      	b.n	7444 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    741e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7422:	290b      	cmp	r1, #11
    7424:	d302      	bcc.n	742c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
    7426:	f241 4178 	movw	r1, #5240	; 0x1478
    742a:	e00b      	b.n	7444 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9ec>
    742c:	68e1      	ldr	r1, [r4, #12]
    742e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7432:	6989      	ldr	r1, [r1, #24]
    7434:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    7438:	5808      	ldr	r0, [r1, r0]
    743a:	4780      	blx	r0
    743c:	280f      	cmp	r0, #15
    743e:	d304      	bcc.n	744a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9f2>
    7440:	f241 419c 	movw	r1, #5276	; 0x149c
    7444:	2032      	movs	r0, #50	; 0x32
    7446:	f7fd f891 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    744a:	68e1      	ldr	r1, [r4, #12]
    744c:	6909      	ldr	r1, [r1, #16]
    744e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7456:	4700      	bx	r0
    7458:	20000104 	.word	0x20000104
    745c:	b510      	push	{r4, lr}
    745e:	b118      	cbz	r0, 7468 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa10>
    7460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7464:	f000 b924 	b.w	76b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7468:	2900      	cmp	r1, #0
    746a:	d01d      	beq.n	74a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa50>
    746c:	480f      	ldr	r0, [pc, #60]	; (74ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa54>)
    746e:	6841      	ldr	r1, [r0, #4]
    7470:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7474:	2a0b      	cmp	r2, #11
    7476:	d202      	bcs.n	747e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa26>
    7478:	f241 5143 	movw	r1, #5443	; 0x1543
    747c:	e005      	b.n	748a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa32>
    747e:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7482:	2a0f      	cmp	r2, #15
    7484:	d304      	bcc.n	7490 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa38>
    7486:	f241 5144 	movw	r1, #5444	; 0x1544
    748a:	2032      	movs	r0, #50	; 0x32
    748c:	f7fd f86e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7490:	68c0      	ldr	r0, [r0, #12]
    7492:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7496:	6880      	ldr	r0, [r0, #8]
    7498:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    749c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    74a0:	5840      	ldr	r0, [r0, r1]
    74a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74a6:	4700      	bx	r0
    74a8:	bd10      	pop	{r4, pc}
    74aa:	0000      	.short	0x0000
    74ac:	20000104 	.word	0x20000104
    74b0:	b510      	push	{r4, lr}
    74b2:	f7ff faef 	bl	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    74b6:	f000 f90b 	bl	76d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc78>
    74ba:	4805      	ldr	r0, [pc, #20]	; (74d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa78>)
    74bc:	6881      	ldr	r1, [r0, #8]
    74be:	2000      	movs	r0, #0
    74c0:	f7ff fc3a 	bl	6d38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    74c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74c8:	2003      	movs	r0, #3
    74ca:	f000 bb79 	b.w	7bc0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    74ce:	0000      	.short	0x0000
    74d0:	20000104 	.word	0x20000104
    74d4:	b510      	push	{r4, lr}
    74d6:	f7fd fb4f 	bl	4b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    74da:	4604      	mov	r4, r0
    74dc:	f7fd fb52 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    74e0:	4621      	mov	r1, r4
    74e2:	f005 fbd7 	bl	cc94 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    74e6:	b150      	cbz	r0, 74fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaa6>
    74e8:	f003 f8f2 	bl	a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    74ec:	2000      	movs	r0, #0
    74ee:	f002 ffa3 	bl	a438 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    74f2:	4905      	ldr	r1, [pc, #20]	; (7508 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xab0>)
    74f4:	2006      	movs	r0, #6
    74f6:	6849      	ldr	r1, [r1, #4]
    74f8:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    74fc:	bd10      	pop	{r4, pc}
    74fe:	f240 5184 	movw	r1, #1412	; 0x584
    7502:	2032      	movs	r0, #50	; 0x32
    7504:	f7fd f832 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7508:	20000104 	.word	0x20000104
    750c:	490f      	ldr	r1, [pc, #60]	; (754c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xaf4>)
    750e:	b510      	push	{r4, lr}
    7510:	6848      	ldr	r0, [r1, #4]
    7512:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7516:	2a06      	cmp	r2, #6
    7518:	d202      	bcs.n	7520 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac8>
    751a:	f241 5171 	movw	r1, #5489	; 0x1571
    751e:	e005      	b.n	752c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xad4>
    7520:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7524:	2a0b      	cmp	r2, #11
    7526:	d304      	bcc.n	7532 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xada>
    7528:	f241 5172 	movw	r1, #5490	; 0x1572
    752c:	2032      	movs	r0, #50	; 0x32
    752e:	f7fd f81d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7532:	68c9      	ldr	r1, [r1, #12]
    7534:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7538:	68c9      	ldr	r1, [r1, #12]
    753a:	f06f 0213 	mvn.w	r2, #19
    753e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    7542:	5808      	ldr	r0, [r1, r0]
    7544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7548:	4700      	bx	r0
    754a:	0000      	.short	0x0000
    754c:	20000104 	.word	0x20000104
    7550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7554:	4c31      	ldr	r4, [pc, #196]	; (761c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc4>)
    7556:	4605      	mov	r5, r0
    7558:	460e      	mov	r6, r1
    755a:	6860      	ldr	r0, [r4, #4]
    755c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7560:	b120      	cbz	r0, 756c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
    7562:	2801      	cmp	r0, #1
    7564:	d002      	beq.n	756c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb14>
    7566:	200c      	movs	r0, #12
    7568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    756c:	f003 f824 	bl	a5b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7570:	f002 fe30 	bl	a1d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7574:	f002 fc12 	bl	9d9c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7578:	f003 fa8c 	bl	aa94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    757c:	4828      	ldr	r0, [pc, #160]	; (7620 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbc8>)
    757e:	f002 ff53 	bl	a428 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7582:	4828      	ldr	r0, [pc, #160]	; (7624 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbcc>)
    7584:	f003 f97c 	bl	a880 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7588:	4827      	ldr	r0, [pc, #156]	; (7628 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd0>)
    758a:	f003 f96f 	bl	a86c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    758e:	4630      	mov	r0, r6
    7590:	f003 f89e 	bl	a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7594:	7968      	ldrb	r0, [r5, #5]
    7596:	b110      	cbz	r0, 759e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb46>
    7598:	2001      	movs	r0, #1
    759a:	f7ff febd 	bl	7318 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    759e:	7928      	ldrb	r0, [r5, #4]
    75a0:	2803      	cmp	r0, #3
    75a2:	d001      	beq.n	75a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb50>
    75a4:	b118      	cbz	r0, 75ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb56>
    75a6:	e018      	b.n	75da <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb82>
    75a8:	f640 1188 	movw	r1, #2440	; 0x988
    75ac:	e033      	b.n	7616 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbbe>
    75ae:	6861      	ldr	r1, [r4, #4]
    75b0:	2000      	movs	r0, #0
    75b2:	2503      	movs	r5, #3
    75b4:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    75b8:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    75bc:	1c52      	adds	r2, r2, #1
    75be:	fbb2 f7f5 	udiv	r7, r2, r5
    75c2:	fb05 2217 	mls	r2, r5, r7, r2
    75c6:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    75ca:	fa23 f202 	lsr.w	r2, r3, r2
    75ce:	07d2      	lsls	r2, r2, #31
    75d0:	d103      	bne.n	75da <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb82>
    75d2:	1c40      	adds	r0, r0, #1
    75d4:	b2c0      	uxtb	r0, r0
    75d6:	2803      	cmp	r0, #3
    75d8:	d3ee      	bcc.n	75b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb60>
    75da:	6860      	ldr	r0, [r4, #4]
    75dc:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    75e0:	f003 f870 	bl	a6c4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    75e4:	4631      	mov	r1, r6
    75e6:	2001      	movs	r0, #1
    75e8:	f7ff fa66 	bl	6ab8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    75ec:	2800      	cmp	r0, #0
    75ee:	d0bb      	beq.n	7568 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb10>
    75f0:	f000 f922 	bl	7838 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xde0>
    75f4:	6860      	ldr	r0, [r4, #4]
    75f6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    75fa:	b138      	cbz	r0, 760c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbb4>
    75fc:	f7fe fa22 	bl	5a44 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    7600:	480a      	ldr	r0, [pc, #40]	; (762c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbd4>)
    7602:	6800      	ldr	r0, [r0, #0]
    7604:	2803      	cmp	r0, #3
    7606:	d004      	beq.n	7612 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbba>
    7608:	2000      	movs	r0, #0
    760a:	e7ad      	b.n	7568 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb10>
    760c:	f7fe fc0e 	bl	5e2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7610:	e7f6      	b.n	7600 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xba8>
    7612:	f640 119a 	movw	r1, #2458	; 0x99a
    7616:	2032      	movs	r0, #50	; 0x32
    7618:	f7fc ffa8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    761c:	20000104 	.word	0x20000104
    7620:	00007934 	.word	0x00007934
    7624:	0000dcf1 	.word	0x0000dcf1
    7628:	8e89bed6 	.word	0x8e89bed6
    762c:	40001550 	.word	0x40001550
    7630:	b510      	push	{r4, lr}
    7632:	2000      	movs	r0, #0
    7634:	f7ff fe70 	bl	7318 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c0>
    7638:	4808      	ldr	r0, [pc, #32]	; (765c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc04>)
    763a:	6840      	ldr	r0, [r0, #4]
    763c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7640:	b128      	cbz	r0, 764e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf6>
    7642:	2801      	cmp	r0, #1
    7644:	d003      	beq.n	764e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbf6>
    7646:	2802      	cmp	r0, #2
    7648:	d004      	beq.n	7654 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xbfc>
    764a:	200c      	movs	r0, #12
    764c:	bd10      	pop	{r4, pc}
    764e:	f000 f82f 	bl	76b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7652:	e001      	b.n	7658 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc00>
    7654:	f000 f844 	bl	76e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc88>
    7658:	2000      	movs	r0, #0
    765a:	bd10      	pop	{r4, pc}
    765c:	20000104 	.word	0x20000104
    7660:	b570      	push	{r4, r5, r6, lr}
    7662:	4c12      	ldr	r4, [pc, #72]	; (76ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc54>)
    7664:	6860      	ldr	r0, [r4, #4]
    7666:	f100 0532 	add.w	r5, r0, #50	; 0x32
    766a:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    766e:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7672:	b188      	cbz	r0, 7698 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc40>
    7674:	f7ff fb14 	bl	6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7678:	b130      	cbz	r0, 7688 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
    767a:	6860      	ldr	r0, [r4, #4]
    767c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7680:	b111      	cbz	r1, 7688 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc30>
    7682:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7686:	e002      	b.n	768e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc36>
    7688:	6860      	ldr	r0, [r4, #4]
    768a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    768e:	f7fe fa7f 	bl	5b90 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    7692:	b108      	cbz	r0, 7698 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc40>
    7694:	2601      	movs	r6, #1
    7696:	4605      	mov	r5, r0
    7698:	4629      	mov	r1, r5
    769a:	68a0      	ldr	r0, [r4, #8]
    769c:	f005 f93b 	bl	c916 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    76a0:	4631      	mov	r1, r6
    76a2:	68a0      	ldr	r0, [r4, #8]
    76a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    76a8:	f005 b93b 	b.w	c922 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    76ac:	20000104 	.word	0x20000104
    76b0:	b510      	push	{r4, lr}
    76b2:	f7ff f9ef 	bl	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    76b6:	4905      	ldr	r1, [pc, #20]	; (76cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc74>)
    76b8:	2001      	movs	r0, #1
    76ba:	6849      	ldr	r1, [r1, #4]
    76bc:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    76c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76c4:	2000      	movs	r0, #0
    76c6:	f000 ba7b 	b.w	7bc0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    76ca:	0000      	.short	0x0000
    76cc:	20000104 	.word	0x20000104
    76d0:	4902      	ldr	r1, [pc, #8]	; (76dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc84>)
    76d2:	2000      	movs	r0, #0
    76d4:	6849      	ldr	r1, [r1, #4]
    76d6:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    76da:	4770      	bx	lr
    76dc:	20000104 	.word	0x20000104
    76e0:	b570      	push	{r4, r5, r6, lr}
    76e2:	f7fd fa49 	bl	4b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    76e6:	4604      	mov	r4, r0
    76e8:	f7fd fa4c 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    76ec:	4621      	mov	r1, r4
    76ee:	f005 fad1 	bl	cc94 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    76f2:	0004      	movs	r4, r0
    76f4:	d020      	beq.n	7738 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce0>
    76f6:	f005 fb1d 	bl	cd34 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    76fa:	2000      	movs	r0, #0
    76fc:	f000 fa2a 	bl	7b54 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7700:	b1f8      	cbz	r0, 7742 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcea>
    7702:	4d1e      	ldr	r5, [pc, #120]	; (777c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd24>)
    7704:	6868      	ldr	r0, [r5, #4]
    7706:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    770a:	2802      	cmp	r0, #2
    770c:	d003      	beq.n	7716 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcbe>
    770e:	4621      	mov	r1, r4
    7710:	2000      	movs	r0, #0
    7712:	f7ff f9d1 	bl	6ab8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7716:	1ce0      	adds	r0, r4, #3
    7718:	f004 fdf0 	bl	c2fc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    771c:	6869      	ldr	r1, [r5, #4]
    771e:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    7722:	b128      	cbz	r0, 7730 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcd8>
    7724:	2440      	movs	r4, #64	; 0x40
    7726:	f002 fb59 	bl	9ddc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    772a:	4620      	mov	r0, r4
    772c:	f002 fd60 	bl	a1f0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7730:	f7ff fab6 	bl	6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7734:	b970      	cbnz	r0, 7754 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcfc>
    7736:	e008      	b.n	774a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcf2>
    7738:	f240 4177 	movw	r1, #1143	; 0x477
    773c:	2032      	movs	r0, #50	; 0x32
    773e:	f7fc ff15 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7746:	f7ff bfb3 	b.w	76b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    774a:	6868      	ldr	r0, [r5, #4]
    774c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7750:	2802      	cmp	r0, #2
    7752:	d104      	bne.n	775e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd06>
    7754:	2100      	movs	r1, #0
    7756:	2201      	movs	r2, #1
    7758:	4608      	mov	r0, r1
    775a:	f003 f845 	bl	a7e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    775e:	6868      	ldr	r0, [r5, #4]
    7760:	21ff      	movs	r1, #255	; 0xff
    7762:	f800 1f64 	strb.w	r1, [r0, #100]!
    7766:	7041      	strb	r1, [r0, #1]
    7768:	2100      	movs	r1, #0
    776a:	7201      	strb	r1, [r0, #8]
    776c:	71c1      	strb	r1, [r0, #7]
    776e:	7241      	strb	r1, [r0, #9]
    7770:	7601      	strb	r1, [r0, #24]
    7772:	2105      	movs	r1, #5
    7774:	f800 1c08 	strb.w	r1, [r0, #-8]
    7778:	bd70      	pop	{r4, r5, r6, pc}
    777a:	0000      	.short	0x0000
    777c:	20000104 	.word	0x20000104
    7780:	b570      	push	{r4, r5, r6, lr}
    7782:	f7fd f9f9 	bl	4b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7786:	4604      	mov	r4, r0
    7788:	f7fd f9fc 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    778c:	4621      	mov	r1, r4
    778e:	f005 fa81 	bl	cc94 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7792:	0005      	movs	r5, r0
    7794:	d028      	beq.n	77e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd90>
    7796:	4e19      	ldr	r6, [pc, #100]	; (77fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda4>)
    7798:	2004      	movs	r0, #4
    779a:	6874      	ldr	r4, [r6, #4]
    779c:	345c      	adds	r4, #92	; 0x5c
    779e:	f000 f9d9 	bl	7b54 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    77a2:	b330      	cbz	r0, 77f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd9a>
    77a4:	200c      	movs	r0, #12
    77a6:	7020      	strb	r0, [r4, #0]
    77a8:	2001      	movs	r0, #1
    77aa:	f000 fa09 	bl	7bc0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    77ae:	7828      	ldrb	r0, [r5, #0]
    77b0:	6871      	ldr	r1, [r6, #4]
    77b2:	f3c0 1040 	ubfx	r0, r0, #5, #1
    77b6:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    77ba:	2005      	movs	r0, #5
    77bc:	f7ff fb3a 	bl	6e34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    77c0:	4a0f      	ldr	r2, [pc, #60]	; (7800 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xda8>)
    77c2:	68b1      	ldr	r1, [r6, #8]
    77c4:	2520      	movs	r5, #32
    77c6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    77c8:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    77cc:	7808      	ldrb	r0, [r1, #0]
    77ce:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    77d2:	f020 0020 	bic.w	r0, r0, #32
    77d6:	4318      	orrs	r0, r3
    77d8:	7008      	strb	r0, [r1, #0]
    77da:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    77dc:	7ea2      	ldrb	r2, [r4, #26]
    77de:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    77e2:	4011      	ands	r1, r2
    77e4:	7001      	strb	r1, [r0, #0]
    77e6:	bd70      	pop	{r4, r5, r6, pc}
    77e8:	f240 51ef 	movw	r1, #1519	; 0x5ef
    77ec:	2032      	movs	r0, #50	; 0x32
    77ee:	f7fc febd 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77f6:	f7ff bf5b 	b.w	76b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    77fa:	0000      	.short	0x0000
    77fc:	20000104 	.word	0x20000104
    7800:	20000e54 	.word	0x20000e54
    7804:	b510      	push	{r4, lr}
    7806:	2003      	movs	r0, #3
    7808:	f000 f9a4 	bl	7b54 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    780c:	b168      	cbz	r0, 782a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdd2>
    780e:	2003      	movs	r0, #3
    7810:	f7ff fb10 	bl	6e34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7814:	2201      	movs	r2, #1
    7816:	4611      	mov	r1, r2
    7818:	2000      	movs	r0, #0
    781a:	f002 ffe5 	bl	a7e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    781e:	4905      	ldr	r1, [pc, #20]	; (7834 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xddc>)
    7820:	200b      	movs	r0, #11
    7822:	6849      	ldr	r1, [r1, #4]
    7824:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7828:	bd10      	pop	{r4, pc}
    782a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    782e:	f7ff bf3f 	b.w	76b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    7832:	0000      	.short	0x0000
    7834:	20000104 	.word	0x20000104
    7838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    783c:	4c1d      	ldr	r4, [pc, #116]	; (78b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe5c>)
    783e:	2600      	movs	r6, #0
    7840:	6860      	ldr	r0, [r4, #4]
    7842:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    7846:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    784a:	b911      	cbnz	r1, 7852 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xdfa>
    784c:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7850:	b350      	cbz	r0, 78a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe50>
    7852:	f003 fbb2 	bl	afba <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7856:	4680      	mov	r8, r0
    7858:	6860      	ldr	r0, [r4, #4]
    785a:	4641      	mov	r1, r8
    785c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    785e:	f7fa faaf 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7862:	4f15      	ldr	r7, [pc, #84]	; (78b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe60>)
    7864:	4605      	mov	r5, r0
    7866:	fb90 f0f7 	sdiv	r0, r0, r7
    786a:	fb07 5010 	mls	r0, r7, r0, r5
    786e:	4241      	negs	r1, r0
    7870:	4640      	mov	r0, r8
    7872:	f7fa fa73 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7876:	6861      	ldr	r1, [r4, #4]
    7878:	6448      	str	r0, [r1, #68]	; 0x44
    787a:	fb95 f0f7 	sdiv	r0, r5, r7
    787e:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7880:	4410      	add	r0, r2
    7882:	6788      	str	r0, [r1, #120]	; 0x78
    7884:	f7fe fa40 	bl	5d08 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7888:	6861      	ldr	r1, [r4, #4]
    788a:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    788c:	4290      	cmp	r0, r2
    788e:	d80b      	bhi.n	78a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe50>
    7890:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    7894:	678e      	str	r6, [r1, #120]	; 0x78
    7896:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    789a:	b110      	cbz	r0, 78a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe4a>
    789c:	2001      	movs	r0, #1
    789e:	f7fe f91d 	bl	5adc <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    78a2:	2001      	movs	r0, #1
    78a4:	f7ff fd12 	bl	72cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x874>
    78a8:	6861      	ldr	r1, [r4, #4]
    78aa:	2002      	movs	r0, #2
    78ac:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    78b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78b4:	20000104 	.word	0x20000104
    78b8:	000f4240 	.word	0x000f4240
    78bc:	000076d1 	.word	0x000076d1
    78c0:	000076b1 	.word	0x000076b1
    78c4:	0000cc75 	.word	0x0000cc75
    78c8:	0000cc75 	.word	0x0000cc75
    78cc:	0000cc75 	.word	0x0000cc75
    78d0:	000076e1 	.word	0x000076e1
    78d4:	0000cc75 	.word	0x0000cc75
    78d8:	0000cc75 	.word	0x0000cc75
    78dc:	0000cc75 	.word	0x0000cc75
    78e0:	0000cc75 	.word	0x0000cc75
    78e4:	0000cc75 	.word	0x0000cc75
    78e8:	00007805 	.word	0x00007805
    78ec:	00007781 	.word	0x00007781
    78f0:	0000cc75 	.word	0x0000cc75
    78f4:	0000cc75 	.word	0x0000cc75
    78f8:	000074d5 	.word	0x000074d5
    78fc:	000074b1 	.word	0x000074b1
    7900:	00000000 	.word	0x00000000
    7904:	0000cc7f 	.word	0x0000cc7f
    7908:	0000cc1d 	.word	0x0000cc1d
    790c:	0000cc2f 	.word	0x0000cc2f
    7910:	0000cc3d 	.word	0x0000cc3d
    7914:	00006c4d 	.word	0x00006c4d
    7918:	00007551 	.word	0x00007551
    791c:	00007631 	.word	0x00007631
    7920:	000078f8 	.word	0x000078f8
    7924:	00007900 	.word	0x00007900
    7928:	000078bc 	.word	0x000078bc
    792c:	00007910 	.word	0x00007910
    7930:	00007908 	.word	0x00007908
    7934:	0000750d 	.word	0x0000750d
    7938:	00007389 	.word	0x00007389
    793c:	0000745d 	.word	0x0000745d
    7940:	0000cc91 	.word	0x0000cc91

00007944 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    7944:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7948:	461d      	mov	r5, r3
    794a:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    794e:	4616      	mov	r6, r2
    7950:	4688      	mov	r8, r1
    7952:	4681      	mov	r9, r0
    7954:	f7fd f916 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7958:	4604      	mov	r4, r0
    795a:	f004 fa32 	bl	bdc2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    795e:	2801      	cmp	r0, #1
    7960:	d063      	beq.n	7a2a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    7962:	4620      	mov	r0, r4
    7964:	f005 fa5f 	bl	ce26 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    7968:	4604      	mov	r4, r0
    796a:	221c      	movs	r2, #28
    796c:	2100      	movs	r1, #0
    796e:	f003 fd13 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7972:	2701      	movs	r7, #1
    7974:	7027      	strb	r7, [r4, #0]
    7976:	ea5f 0008 	movs.w	r0, r8
    797a:	d009      	beq.n	7990 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    797c:	2801      	cmp	r0, #1
    797e:	d00b      	beq.n	7998 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    7980:	2802      	cmp	r0, #2
    7982:	d02d      	beq.n	79e0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    7984:	f1b8 0f06 	cmp.w	r8, #6
    7988:	d02c      	beq.n	79e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    798a:	f240 217d 	movw	r1, #637	; 0x27d
    798e:	e049      	b.n	7a24 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    7990:	7aa0      	ldrb	r0, [r4, #10]
    7992:	f040 0001 	orr.w	r0, r0, #1
    7996:	e026      	b.n	79e6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    7998:	7aa0      	ldrb	r0, [r4, #10]
    799a:	f040 0005 	orr.w	r0, r0, #5
    799e:	bf00      	nop
    79a0:	f040 0010 	orr.w	r0, r0, #16
    79a4:	72a0      	strb	r0, [r4, #10]
    79a6:	1c63      	adds	r3, r4, #1
    79a8:	1ca2      	adds	r2, r4, #2
    79aa:	4648      	mov	r0, r9
    79ac:	990a      	ldr	r1, [sp, #40]	; 0x28
    79ae:	f005 fa1f 	bl	cdf0 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    79b2:	f884 a009 	strb.w	sl, [r4, #9]
    79b6:	7327      	strb	r7, [r4, #12]
    79b8:	2000      	movs	r0, #0
    79ba:	7360      	strb	r0, [r4, #13]
    79bc:	20ff      	movs	r0, #255	; 0xff
    79be:	73a0      	strb	r0, [r4, #14]
    79c0:	7aa1      	ldrb	r1, [r4, #10]
    79c2:	0749      	lsls	r1, r1, #29
    79c4:	d518      	bpl.n	79f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    79c6:	f104 0014 	add.w	r0, r4, #20
    79ca:	1e41      	subs	r1, r0, #1
    79cc:	2d02      	cmp	r5, #2
    79ce:	d00d      	beq.n	79ec <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    79d0:	2d03      	cmp	r5, #3
    79d2:	d00b      	beq.n	79ec <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    79d4:	f8d9 2008 	ldr.w	r2, [r9, #8]
    79d8:	6813      	ldr	r3, [r2, #0]
    79da:	6003      	str	r3, [r0, #0]
    79dc:	8892      	ldrh	r2, [r2, #4]
    79de:	e008      	b.n	79f2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    79e0:	7aa0      	ldrb	r0, [r4, #10]
    79e2:	e7dd      	b.n	79a0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    79e4:	7aa0      	ldrb	r0, [r4, #10]
    79e6:	f040 0002 	orr.w	r0, r0, #2
    79ea:	e7d9      	b.n	79a0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    79ec:	6832      	ldr	r2, [r6, #0]
    79ee:	6002      	str	r2, [r0, #0]
    79f0:	88b2      	ldrh	r2, [r6, #4]
    79f2:	8082      	strh	r2, [r0, #4]
    79f4:	700d      	strb	r5, [r1, #0]
    79f6:	e000      	b.n	79fa <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    79f8:	74e0      	strb	r0, [r4, #19]
    79fa:	207f      	movs	r0, #127	; 0x7f
    79fc:	76a0      	strb	r0, [r4, #26]
    79fe:	f884 b01b 	strb.w	fp, [r4, #27]
    7a02:	f7fd f8b9 	bl	4b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7a06:	4604      	mov	r4, r0
    7a08:	f7fd f8bc 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7a0c:	2201      	movs	r2, #1
    7a0e:	4621      	mov	r1, r4
    7a10:	f005 fa12 	bl	ce38 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    7a14:	b120      	cbz	r0, 7a20 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    7a16:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7a1a:	2005      	movs	r0, #5
    7a1c:	f000 b8d0 	b.w	7bc0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7a20:	f240 219d 	movw	r1, #669	; 0x29d
    7a24:	2033      	movs	r0, #51	; 0x33
    7a26:	f7fc fda1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a2a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

00007a30 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    7a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a34:	4616      	mov	r6, r2
    7a36:	460c      	mov	r4, r1
    7a38:	4605      	mov	r5, r0
    7a3a:	f004 ff33 	bl	c8a4 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    7a3e:	7460      	strb	r0, [r4, #17]
    7a40:	4628      	mov	r0, r5
    7a42:	f004 ff26 	bl	c892 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    7a46:	74a0      	strb	r0, [r4, #18]
    7a48:	1cea      	adds	r2, r5, #3
    7a4a:	4b14      	ldr	r3, [pc, #80]	; (7a9c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    7a4c:	1d90      	adds	r0, r2, #6
    7a4e:	2100      	movs	r1, #0
    7a50:	2e07      	cmp	r6, #7
    7a52:	d21f      	bcs.n	7a94 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    7a54:	e8df f006 	tbb	[pc, r6]
    7a58:	1e110b04 	.word	0x1e110b04
    7a5c:	00041e13 	.word	0x00041e13
    7a60:	781b      	ldrb	r3, [r3, #0]
    7a62:	e00d      	b.n	7a80 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7a64:	60e0      	str	r0, [r4, #12]
    7a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a6a:	60e1      	str	r1, [r4, #12]
    7a6c:	e7fb      	b.n	7a66 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    7a6e:	785b      	ldrb	r3, [r3, #1]
    7a70:	7063      	strb	r3, [r4, #1]
    7a72:	e9c4 2001 	strd	r2, r0, [r4, #4]
    7a76:	7421      	strb	r1, [r4, #16]
    7a78:	e7f7      	b.n	7a6a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7a7a:	789b      	ldrb	r3, [r3, #2]
    7a7c:	e000      	b.n	7a80 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7a7e:	78db      	ldrb	r3, [r3, #3]
    7a80:	7063      	strb	r3, [r4, #1]
    7a82:	e9c4 2101 	strd	r2, r1, [r4, #4]
    7a86:	786a      	ldrb	r2, [r5, #1]
    7a88:	1f92      	subs	r2, r2, #6
    7a8a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7a8e:	7422      	strb	r2, [r4, #16]
    7a90:	d0eb      	beq.n	7a6a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7a92:	e7e7      	b.n	7a64 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    7a94:	7061      	strb	r1, [r4, #1]
    7a96:	6061      	str	r1, [r4, #4]
    7a98:	60a1      	str	r1, [r4, #8]
    7a9a:	e7ec      	b.n	7a76 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    7a9c:	0000dcf7 	.word	0x0000dcf7

00007aa0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    7aa0:	b570      	push	{r4, r5, r6, lr}
    7aa2:	f002 fd21 	bl	a4e8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7aa6:	4c0e      	ldr	r4, [pc, #56]	; (7ae0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    7aa8:	4606      	mov	r6, r0
    7aaa:	7860      	ldrb	r0, [r4, #1]
    7aac:	b170      	cbz	r0, 7acc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7aae:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    7ab2:	4632      	mov	r2, r6
    7ab4:	4628      	mov	r0, r5
    7ab6:	f004 fc8f 	bl	c3d8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7aba:	6060      	str	r0, [r4, #4]
    7abc:	42a8      	cmp	r0, r5
    7abe:	d005      	beq.n	7acc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7ac0:	68e1      	ldr	r1, [r4, #12]
    7ac2:	1b40      	subs	r0, r0, r5
    7ac4:	4408      	add	r0, r1
    7ac6:	60e0      	str	r0, [r4, #12]
    7ac8:	f7fb f93c 	bl	2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7acc:	6860      	ldr	r0, [r4, #4]
    7ace:	42b0      	cmp	r0, r6
    7ad0:	d301      	bcc.n	7ad6 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    7ad2:	7820      	ldrb	r0, [r4, #0]
    7ad4:	b108      	cbz	r0, 7ada <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7ad6:	2000      	movs	r0, #0
    7ad8:	bd70      	pop	{r4, r5, r6, pc}
    7ada:	2001      	movs	r0, #1
    7adc:	bd70      	pop	{r4, r5, r6, pc}
    7ade:	0000      	.short	0x0000
    7ae0:	20000ed8 	.word	0x20000ed8

00007ae4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7ae4:	b510      	push	{r4, lr}
    7ae6:	2905      	cmp	r1, #5
    7ae8:	d22d      	bcs.n	7b46 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    7aea:	e8df f001 	tbb	[pc, r1]
    7aee:	0a05      	.short	0x0a05
    7af0:	00280e03 	.word	0x00280e03
    7af4:	2100      	movs	r1, #0
    7af6:	e000      	b.n	7afa <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7af8:	2101      	movs	r1, #1
    7afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7afe:	f000 ba6f 	b.w	7fe0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
    7b02:	2103      	movs	r1, #3
    7b04:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7b08:	bd10      	pop	{r4, pc}
    7b0a:	4911      	ldr	r1, [pc, #68]	; (7b50 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    7b0c:	4604      	mov	r4, r0
    7b0e:	68c0      	ldr	r0, [r0, #12]
    7b10:	6008      	str	r0, [r1, #0]
    7b12:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7b16:	6220      	str	r0, [r4, #32]
    7b18:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    7b1c:	83a0      	strh	r0, [r4, #28]
    7b1e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7b22:	60e0      	str	r0, [r4, #12]
    7b24:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7b28:	82a0      	strh	r0, [r4, #20]
    7b2a:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    7b2e:	82e0      	strh	r0, [r4, #22]
    7b30:	4620      	mov	r0, r4
    7b32:	f005 f9b8 	bl	cea6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x6a>
    7b36:	2002      	movs	r0, #2
    7b38:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7b3c:	bd10      	pop	{r4, pc}
    7b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b42:	f005 b9b0 	b.w	cea6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x6a>
    7b46:	f640 3158 	movw	r1, #2904	; 0xb58
    7b4a:	2035      	movs	r0, #53	; 0x35
    7b4c:	f7fc fd0e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b50:	20000114 	.word	0x20000114

00007b54 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    7b54:	b570      	push	{r4, r5, r6, lr}
    7b56:	4606      	mov	r6, r0
    7b58:	f003 fa2f 	bl	afba <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7b5c:	4c17      	ldr	r4, [pc, #92]	; (7bbc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
    7b5e:	4601      	mov	r1, r0
    7b60:	6920      	ldr	r0, [r4, #16]
    7b62:	f7fa f92d 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7b66:	4605      	mov	r5, r0
    7b68:	b156      	cbz	r6, 7b80 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    7b6a:	2e03      	cmp	r6, #3
    7b6c:	d00d      	beq.n	7b8a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7b6e:	2e04      	cmp	r6, #4
    7b70:	d00e      	beq.n	7b90 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
    7b72:	2e06      	cmp	r6, #6
    7b74:	d01d      	beq.n	7bb2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    7b76:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    7b7a:	2035      	movs	r0, #53	; 0x35
    7b7c:	f7fc fcf6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b80:	2001      	movs	r0, #1
    7b82:	f005 f974 	bl	ce6e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x32>
    7b86:	3098      	adds	r0, #152	; 0x98
    7b88:	e004      	b.n	7b94 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    7b8a:	f44f 7057 	mov.w	r0, #860	; 0x35c
    7b8e:	e001      	b.n	7b94 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    7b90:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    7b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7b96:	4405      	add	r5, r0
    7b98:	39f1      	subs	r1, #241	; 0xf1
    7b9a:	428d      	cmp	r5, r1
    7b9c:	d307      	bcc.n	7bae <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    7b9e:	2600      	movs	r6, #0
    7ba0:	f000 fcea 	bl	8578 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x578>
    7ba4:	b140      	cbz	r0, 7bb8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7ba6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ba8:	38f1      	subs	r0, #241	; 0xf1
    7baa:	4285      	cmp	r5, r0
    7bac:	d203      	bcs.n	7bb6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    7bae:	2601      	movs	r6, #1
    7bb0:	e002      	b.n	7bb8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7bb2:	2001      	movs	r0, #1
    7bb4:	bd70      	pop	{r4, r5, r6, pc}
    7bb6:	2600      	movs	r6, #0
    7bb8:	4630      	mov	r0, r6
    7bba:	bd70      	pop	{r4, r5, r6, pc}
    7bbc:	20000ee8 	.word	0x20000ee8

00007bc0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    7bc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7bc2:	2501      	movs	r5, #1
    7bc4:	4c24      	ldr	r4, [pc, #144]	; (7c58 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7bc6:	2806      	cmp	r0, #6
    7bc8:	d243      	bcs.n	7c52 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7bca:	e8df f000 	tbb	[pc, r0]
    7bce:	1903      	.short	0x1903
    7bd0:	3e232319 	.word	0x3e232319
    7bd4:	f7fe fbee 	bl	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bd8:	7860      	ldrb	r0, [r4, #1]
    7bda:	bb88      	cbnz	r0, 7c40 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7bdc:	2200      	movs	r2, #0
    7bde:	4611      	mov	r1, r2
    7be0:	4668      	mov	r0, sp
    7be2:	f000 fd13 	bl	860c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60c>
    7be6:	b148      	cbz	r0, 7bfc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7be8:	f7fe fdaa 	bl	6740 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7bec:	7800      	ldrb	r0, [r0, #0]
    7bee:	4669      	mov	r1, sp
    7bf0:	f005 f96b 	bl	ceca <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    7bf4:	bb20      	cbnz	r0, 7c40 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7bf6:	f640 2163 	movw	r1, #2659	; 0xa63
    7bfa:	e01c      	b.n	7c36 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7bfc:	70e5      	strb	r5, [r4, #3]
    7bfe:	e020      	b.n	7c42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7c00:	2802      	cmp	r0, #2
    7c02:	d005      	beq.n	7c10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7c04:	2000      	movs	r0, #0
    7c06:	b004      	add	sp, #16
    7c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c0c:	f000 ba04 	b.w	8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    7c10:	2001      	movs	r0, #1
    7c12:	e7f8      	b.n	7c06 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7c14:	2804      	cmp	r0, #4
    7c16:	d011      	beq.n	7c3c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7c18:	f05f 0600 	movs.w	r6, #0
    7c1c:	f7fe fbca 	bl	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c20:	7725      	strb	r5, [r4, #28]
    7c22:	7766      	strb	r6, [r4, #29]
    7c24:	69a1      	ldr	r1, [r4, #24]
    7c26:	2000      	movs	r0, #0
    7c28:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7c2c:	f000 fa7e 	bl	812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
    7c30:	b130      	cbz	r0, 7c40 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7c32:	f640 3118 	movw	r1, #2840	; 0xb18
    7c36:	2035      	movs	r0, #53	; 0x35
    7c38:	f7fc fc98 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c3c:	2601      	movs	r6, #1
    7c3e:	e7ed      	b.n	7c1c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7c40:	e7ff      	b.n	7c42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7c42:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7c46:	f000 ba61 	b.w	810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    7c4a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7c4e:	f7fe bbb1 	b.w	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c52:	f640 31d4 	movw	r1, #3028	; 0xbd4
    7c56:	e7ee      	b.n	7c36 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7c58:	20000ee8 	.word	0x20000ee8

00007c5c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    7c5c:	b508      	push	{r3, lr}
    7c5e:	2244      	movs	r2, #68	; 0x44
    7c60:	2100      	movs	r1, #0
    7c62:	480c      	ldr	r0, [pc, #48]	; (7c94 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7c64:	f003 fb98 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c68:	f7fe fd6a 	bl	6740 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7c6c:	2120      	movs	r1, #32
    7c6e:	7001      	strb	r1, [r0, #0]
    7c70:	4808      	ldr	r0, [pc, #32]	; (7c94 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7c72:	3810      	subs	r0, #16
    7c74:	2100      	movs	r1, #0
    7c76:	6001      	str	r1, [r0, #0]
    7c78:	6041      	str	r1, [r0, #4]
    7c7a:	6081      	str	r1, [r0, #8]
    7c7c:	60c1      	str	r1, [r0, #12]
    7c7e:	f000 f80b 	bl	7c98 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    7c82:	f242 7010 	movw	r0, #10000	; 0x2710
    7c86:	9000      	str	r0, [sp, #0]
    7c88:	2201      	movs	r2, #1
    7c8a:	4669      	mov	r1, sp
    7c8c:	1080      	asrs	r0, r0, #2
    7c8e:	f000 fa8b 	bl	81a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    7c92:	bd08      	pop	{r3, pc}
    7c94:	20000ee8 	.word	0x20000ee8

00007c98 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    7c98:	4804      	ldr	r0, [pc, #16]	; (7cac <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    7c9a:	b510      	push	{r4, lr}
    7c9c:	7800      	ldrb	r0, [r0, #0]
    7c9e:	b108      	cbz	r0, 7ca4 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    7ca0:	f000 f85c 	bl	7d5c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7ca4:	f000 f8b2 	bl	7e0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    7ca8:	2000      	movs	r0, #0
    7caa:	bd10      	pop	{r4, pc}
    7cac:	20000ee8 	.word	0x20000ee8

00007cb0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    7cb0:	4901      	ldr	r1, [pc, #4]	; (7cb8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    7cb2:	7048      	strb	r0, [r1, #1]
    7cb4:	4770      	bx	lr
    7cb6:	0000      	.short	0x0000
    7cb8:	20000ed8 	.word	0x20000ed8

00007cbc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    7cbc:	b570      	push	{r4, r5, r6, lr}
    7cbe:	4605      	mov	r5, r0
    7cc0:	4907      	ldr	r1, [pc, #28]	; (7ce0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
    7cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7cc6:	fbb1 f4f0 	udiv	r4, r1, r0
    7cca:	f005 f94e 	bl	cf6a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    7cce:	1901      	adds	r1, r0, r4
    7cd0:	4628      	mov	r0, r5
    7cd2:	f201 1137 	addw	r1, r1, #311	; 0x137
    7cd6:	f004 ff1c 	bl	cb12 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7cda:	b280      	uxth	r0, r0
    7cdc:	bd70      	pop	{r4, r5, r6, pc}
    7cde:	0000      	.short	0x0000
    7ce0:	00012105 	.word	0x00012105

00007ce4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    7ce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7ce6:	4606      	mov	r6, r0
    7ce8:	b111      	cbz	r1, 7cf0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
    7cea:	2011      	movs	r0, #17
    7cec:	b004      	add	sp, #16
    7cee:	bd70      	pop	{r4, r5, r6, pc}
    7cf0:	4c18      	ldr	r4, [pc, #96]	; (7d54 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    7cf2:	7820      	ldrb	r0, [r4, #0]
    7cf4:	b108      	cbz	r0, 7cfa <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
    7cf6:	200c      	movs	r0, #12
    7cf8:	e7f8      	b.n	7cec <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7cfa:	f7fe fd21 	bl	6740 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7cfe:	4605      	mov	r5, r0
    7d00:	2000      	movs	r0, #0
    7d02:	7060      	strb	r0, [r4, #1]
    7d04:	2004      	movs	r0, #4
    7d06:	7020      	strb	r0, [r4, #0]
    7d08:	4630      	mov	r0, r6
    7d0a:	f000 f8b3 	bl	7e74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7d0e:	f000 fbe3 	bl	84d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d8>
    7d12:	6320      	str	r0, [r4, #48]	; 0x30
    7d14:	2100      	movs	r1, #0
    7d16:	4810      	ldr	r0, [pc, #64]	; (7d58 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
    7d18:	f7fa ff0a 	bl	2b30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7d1c:	7028      	strb	r0, [r5, #0]
    7d1e:	2820      	cmp	r0, #32
    7d20:	d00c      	beq.n	7d3c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
    7d22:	2200      	movs	r2, #0
    7d24:	2101      	movs	r1, #1
    7d26:	4668      	mov	r0, sp
    7d28:	f000 fc70 	bl	860c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60c>
    7d2c:	b148      	cbz	r0, 7d42 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
    7d2e:	7828      	ldrb	r0, [r5, #0]
    7d30:	4669      	mov	r1, sp
    7d32:	f005 f8ca 	bl	ceca <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    7d36:	b138      	cbz	r0, 7d48 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
    7d38:	2000      	movs	r0, #0
    7d3a:	e7d7      	b.n	7cec <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7d3c:	f240 4196 	movw	r1, #1174	; 0x496
    7d40:	e004      	b.n	7d4c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7d42:	f44f 6193 	mov.w	r1, #1176	; 0x498
    7d46:	e001      	b.n	7d4c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7d48:	f240 4199 	movw	r1, #1177	; 0x499
    7d4c:	2035      	movs	r0, #53	; 0x35
    7d4e:	f7fc fc0d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d52:	0000      	.short	0x0000
    7d54:	20000ee8 	.word	0x20000ee8
    7d58:	00007e95 	.word	0x00007e95

00007d5c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    7d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d60:	2700      	movs	r7, #0
    7d62:	f7fe fced 	bl	6740 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d66:	4c17      	ldr	r4, [pc, #92]	; (7dc4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
    7d68:	4605      	mov	r5, r0
    7d6a:	7820      	ldrb	r0, [r4, #0]
    7d6c:	2804      	cmp	r0, #4
    7d6e:	d005      	beq.n	7d7c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7d70:	7820      	ldrb	r0, [r4, #0]
    7d72:	2805      	cmp	r0, #5
    7d74:	d002      	beq.n	7d7c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7d76:	200c      	movs	r0, #12
    7d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d7c:	2001      	movs	r0, #1
    7d7e:	7060      	strb	r0, [r4, #1]
    7d80:	7b20      	ldrb	r0, [r4, #12]
    7d82:	b160      	cbz	r0, 7d9e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    7d84:	f3ef 8610 	mrs	r6, PRIMASK
    7d88:	b672      	cpsid	i
    7d8a:	7b20      	ldrb	r0, [r4, #12]
    7d8c:	b128      	cbz	r0, 7d9a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7d8e:	7b60      	ldrb	r0, [r4, #13]
    7d90:	b118      	cbz	r0, 7d9a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7d92:	f7fe fe2f 	bl	69f4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7d96:	f000 f9b9 	bl	810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    7d9a:	b126      	cbz	r6, 7da6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    7d9c:	e004      	b.n	7da8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7d9e:	7828      	ldrb	r0, [r5, #0]
    7da0:	f7fa fc7c 	bl	269c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    7da4:	e000      	b.n	7da8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7da6:	b662      	cpsie	i
    7da8:	7828      	ldrb	r0, [r5, #0]
    7daa:	f7fa fdb5 	bl	2918 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7dae:	f000 fd5d 	bl	886c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86c>
    7db2:	2000      	movs	r0, #0
    7db4:	7060      	strb	r0, [r4, #1]
    7db6:	7f20      	ldrb	r0, [r4, #28]
    7db8:	b100      	cbz	r0, 7dbc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
    7dba:	270c      	movs	r7, #12
    7dbc:	f000 fd80 	bl	88c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c0>
    7dc0:	4638      	mov	r0, r7
    7dc2:	e7d9      	b.n	7d78 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    7dc4:	20000ee8 	.word	0x20000ee8

00007dc8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    7dc8:	4801      	ldr	r0, [pc, #4]	; (7dd0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    7dca:	7800      	ldrb	r0, [r0, #0]
    7dcc:	4770      	bx	lr
    7dce:	0000      	.short	0x0000
    7dd0:	20000ee8 	.word	0x20000ee8

00007dd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    7dd4:	490c      	ldr	r1, [pc, #48]	; (7e08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    7dd6:	b508      	push	{r3, lr}
    7dd8:	7809      	ldrb	r1, [r1, #0]
    7dda:	b121      	cbz	r1, 7de6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    7ddc:	f240 414f 	movw	r1, #1103	; 0x44f
    7de0:	2035      	movs	r0, #53	; 0x35
    7de2:	f7fc fbc3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7de6:	2300      	movs	r3, #0
    7de8:	9300      	str	r3, [sp, #0]
    7dea:	7801      	ldrb	r1, [r0, #0]
    7dec:	461a      	mov	r2, r3
    7dee:	07c9      	lsls	r1, r1, #31
    7df0:	d003      	beq.n	7dfa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    7df2:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7df6:	2201      	movs	r2, #1
    7df8:	9000      	str	r0, [sp, #0]
    7dfa:	4669      	mov	r1, sp
    7dfc:	4618      	mov	r0, r3
    7dfe:	f000 f9d3 	bl	81a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a8>
    7e02:	2000      	movs	r0, #0
    7e04:	bd08      	pop	{r3, pc}
    7e06:	0000      	.short	0x0000
    7e08:	20000ee8 	.word	0x20000ee8
    7e0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7e0e:	4c18      	ldr	r4, [pc, #96]	; (7e70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    7e10:	2001      	movs	r0, #1
    7e12:	7020      	strb	r0, [r4, #0]
    7e14:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7e18:	e00b      	b.n	7e32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    7e1a:	2100      	movs	r1, #0
    7e1c:	f004 f974 	bl	c108 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7e20:	0006      	movs	r6, r0
    7e22:	d010      	beq.n	7e46 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    7e24:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7e28:	f7fa fd76 	bl	2918 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7e2c:	4630      	mov	r0, r6
    7e2e:	f005 f864 	bl	cefa <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xbe>
    7e32:	4669      	mov	r1, sp
    7e34:	2000      	movs	r0, #0
    7e36:	f004 f970 	bl	c11a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7e3a:	b180      	cbz	r0, 7e5e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e3c:	f44f 710f 	mov.w	r1, #572	; 0x23c
    7e40:	2035      	movs	r0, #53	; 0x35
    7e42:	f7fc fb93 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e46:	f240 5141 	movw	r1, #1345	; 0x541
    7e4a:	e7f9      	b.n	7e40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    7e4c:	9802      	ldr	r0, [sp, #8]
    7e4e:	b130      	cbz	r0, 7e5e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e50:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7e54:	b119      	cbz	r1, 7e5e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e56:	8800      	ldrh	r0, [r0, #0]
    7e58:	42a8      	cmp	r0, r5
    7e5a:	d1de      	bne.n	7e1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    7e5c:	e004      	b.n	7e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    7e5e:	4668      	mov	r0, sp
    7e60:	f7fc fd54 	bl	490c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7e64:	2800      	cmp	r0, #0
    7e66:	d0f1      	beq.n	7e4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    7e68:	2000      	movs	r0, #0
    7e6a:	7020      	strb	r0, [r4, #0]
    7e6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e6e:	0000      	.short	0x0000
    7e70:	20000ed8 	.word	0x20000ed8
    7e74:	4906      	ldr	r1, [pc, #24]	; (7e90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
    7e76:	b140      	cbz	r0, 7e8a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
    7e78:	2201      	movs	r2, #1
    7e7a:	708a      	strb	r2, [r1, #2]
    7e7c:	f242 7210 	movw	r2, #10000	; 0x2710
    7e80:	4350      	muls	r0, r2
    7e82:	684a      	ldr	r2, [r1, #4]
    7e84:	4410      	add	r0, r2
    7e86:	6208      	str	r0, [r1, #32]
    7e88:	4770      	bx	lr
    7e8a:	2000      	movs	r0, #0
    7e8c:	7088      	strb	r0, [r1, #2]
    7e8e:	4770      	bx	lr
    7e90:	20000ee8 	.word	0x20000ee8
    7e94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7e96:	460d      	mov	r5, r1
    7e98:	2001      	movs	r0, #1
    7e9a:	f004 ffd4 	bl	ce46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7e9e:	b2c4      	uxtb	r4, r0
    7ea0:	200b      	movs	r0, #11
    7ea2:	f004 ffd0 	bl	ce46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7ea6:	b2c0      	uxtb	r0, r0
    7ea8:	4284      	cmp	r4, r0
    7eaa:	d002      	beq.n	7eb2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
    7eac:	f240 21c5 	movw	r1, #709	; 0x2c5
    7eb0:	e073      	b.n	7f9a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7eb2:	f7fe fc45 	bl	6740 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7eb6:	2601      	movs	r6, #1
    7eb8:	4c3b      	ldr	r4, [pc, #236]	; (7fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7eba:	2d09      	cmp	r5, #9
    7ebc:	d270      	bcs.n	7fa0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    7ebe:	e8df f005 	tbb	[pc, r5]
    7ec2:	3605      	.short	0x3605
    7ec4:	6f464a4a 	.word	0x6f464a4a
    7ec8:	006a665e 	.word	0x006a665e
    7ecc:	7326      	strb	r6, [r4, #12]
    7ece:	7861      	ldrb	r1, [r4, #1]
    7ed0:	2900      	cmp	r1, #0
    7ed2:	d12b      	bne.n	7f2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7ed4:	7800      	ldrb	r0, [r0, #0]
    7ed6:	f7f9 ff97 	bl	1e08 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7eda:	4605      	mov	r5, r0
    7edc:	6120      	str	r0, [r4, #16]
    7ede:	f000 fd09 	bl	88f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f4>
    7ee2:	b118      	cbz	r0, 7eec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    7ee4:	2000      	movs	r0, #0
    7ee6:	f88d 0004 	strb.w	r0, [sp, #4]
    7eea:	e001      	b.n	7ef0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
    7eec:	f88d 6004 	strb.w	r6, [sp, #4]
    7ef0:	4629      	mov	r1, r5
    7ef2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7ef4:	f7f9 ff64 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7ef8:	6861      	ldr	r1, [r4, #4]
    7efa:	fbb0 f2f1 	udiv	r2, r0, r1
    7efe:	fb01 0012 	mls	r0, r1, r2, r0
    7f02:	b150      	cbz	r0, 7f1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
    7f04:	f05f 0000 	movs.w	r0, #0
    7f08:	f88d 0005 	strb.w	r0, [sp, #5]
    7f0c:	4668      	mov	r0, sp
    7f0e:	f7fe fce1 	bl	68d4 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7f12:	b120      	cbz	r0, 7f1e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
    7f14:	f240 21ff 	movw	r1, #767	; 0x2ff
    7f18:	e03f      	b.n	7f9a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f1a:	2001      	movs	r0, #1
    7f1c:	e7f4      	b.n	7f08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
    7f1e:	4922      	ldr	r1, [pc, #136]	; (7fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7f20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f22:	3910      	subs	r1, #16
    7f24:	38e0      	subs	r0, #224	; 0xe0
    7f26:	60c8      	str	r0, [r1, #12]
    7f28:	f7fa ff0c 	bl	2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7f2c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7f2e:	7860      	ldrb	r0, [r4, #1]
    7f30:	b128      	cbz	r0, 7f3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    7f32:	f7fe fd5f 	bl	69f4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7f36:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f3a:	f000 b8e7 	b.w	810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    7f3e:	7366      	strb	r6, [r4, #13]
    7f40:	f7fe fd52 	bl	69e8 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7f44:	2800      	cmp	r0, #0
    7f46:	d0f1      	beq.n	7f2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7f48:	f240 3112 	movw	r1, #786	; 0x312
    7f4c:	e025      	b.n	7f9a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f4e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f52:	f002 bcb9 	b.w	a8c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7f56:	7805      	ldrb	r5, [r0, #0]
    7f58:	2201      	movs	r2, #1
    7f5a:	2100      	movs	r1, #0
    7f5c:	4668      	mov	r0, sp
    7f5e:	f000 fb55 	bl	860c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60c>
    7f62:	b140      	cbz	r0, 7f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
    7f64:	4669      	mov	r1, sp
    7f66:	4628      	mov	r0, r5
    7f68:	f004 ffaf 	bl	ceca <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    7f6c:	2800      	cmp	r0, #0
    7f6e:	d1dd      	bne.n	7f2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7f70:	f640 217f 	movw	r1, #2687	; 0xa7f
    7f74:	e011      	b.n	7f9a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f76:	70e6      	strb	r6, [r4, #3]
    7f78:	f000 f818 	bl	7fac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7f7c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7f7e:	f000 fafb 	bl	8578 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x578>
    7f82:	2800      	cmp	r0, #0
    7f84:	d1fa      	bne.n	7f7c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    7f86:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f8a:	f004 be45 	b.w	cc18 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7f8e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f92:	f000 b80b 	b.w	7fac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7f96:	f240 3136 	movw	r1, #822	; 0x336
    7f9a:	2035      	movs	r0, #53	; 0x35
    7f9c:	f7fc fae6 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fa0:	f240 313a 	movw	r1, #826	; 0x33a
    7fa4:	e7f9      	b.n	7f9a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7fa6:	0000      	.short	0x0000
    7fa8:	20000ee8 	.word	0x20000ee8
    7fac:	b510      	push	{r4, lr}
    7fae:	4c0b      	ldr	r4, [pc, #44]	; (7fdc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x208>)
    7fb0:	7820      	ldrb	r0, [r4, #0]
    7fb2:	b130      	cbz	r0, 7fc2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
    7fb4:	f000 fc5a 	bl	886c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86c>
    7fb8:	78e0      	ldrb	r0, [r4, #3]
    7fba:	b158      	cbz	r0, 7fd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7fbc:	7f20      	ldrb	r0, [r4, #28]
    7fbe:	b128      	cbz	r0, 7fcc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f8>
    7fc0:	e008      	b.n	7fd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7fc2:	f240 21b1 	movw	r1, #689	; 0x2b1
    7fc6:	2035      	movs	r0, #53	; 0x35
    7fc8:	f7fc fad0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fcc:	f7fe fd24 	bl	6a18 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    7fd0:	f7fe f9f0 	bl	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fd8:	f000 bc72 	b.w	88c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c0>
    7fdc:	20000ee8 	.word	0x20000ee8
    7fe0:	b510      	push	{r4, lr}
    7fe2:	4604      	mov	r4, r0
    7fe4:	2901      	cmp	r1, #1
    7fe6:	d102      	bne.n	7fee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21a>
    7fe8:	480a      	ldr	r0, [pc, #40]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fea:	7800      	ldrb	r0, [r0, #0]
    7fec:	b140      	cbz	r0, 8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    7fee:	2004      	movs	r0, #4
    7ff0:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7ff4:	f002 fab4 	bl	a560 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ffc:	f7fa bdc0 	b.w	2b80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8000:	2200      	movs	r2, #0
    8002:	2101      	movs	r1, #1
    8004:	4620      	mov	r0, r4
    8006:	f004 ff90 	bl	cf2a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xee>
    800a:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    800e:	1c40      	adds	r0, r0, #1
    8010:	8020      	strh	r0, [r4, #0]
    8012:	e7ef      	b.n	7ff4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x220>
    8014:	20000ed8 	.word	0x20000ed8
    8018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    801c:	4c39      	ldr	r4, [pc, #228]	; (8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>)
    801e:	4682      	mov	sl, r0
    8020:	6926      	ldr	r6, [r4, #16]
    8022:	f002 fa61 	bl	a4e8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8026:	4605      	mov	r5, r0
    8028:	69a0      	ldr	r0, [r4, #24]
    802a:	2201      	movs	r2, #1
    802c:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    8030:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    8034:	3062      	adds	r0, #98	; 0x62
    8036:	2101      	movs	r1, #1
    8038:	7281      	strb	r1, [r0, #10]
    803a:	69a0      	ldr	r0, [r4, #24]
    803c:	2100      	movs	r1, #0
    803e:	302c      	adds	r0, #44	; 0x2c
    8040:	f004 fd4e 	bl	cae0 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8044:	2101      	movs	r1, #1
    8046:	2000      	movs	r0, #0
    8048:	f004 ff9b 	bl	cf82 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x146>
    804c:	69a7      	ldr	r7, [r4, #24]
    804e:	1971      	adds	r1, r6, r5
    8050:	4408      	add	r0, r1
    8052:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    8056:	f8d7 800c 	ldr.w	r8, [r7, #12]
    805a:	f001 fc87 	bl	996c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    805e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    8062:	4288      	cmp	r0, r1
    8064:	d00a      	beq.n	807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
    8066:	464a      	mov	r2, r9
    8068:	4641      	mov	r1, r8
    806a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    806e:	f005 f8aa 	bl	d1c6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8072:	4540      	cmp	r0, r8
    8074:	d903      	bls.n	807e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
    8076:	f240 51f6 	movw	r1, #1526	; 0x5f6
    807a:	e022      	b.n	80c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2>
    807c:	2000      	movs	r0, #0
    807e:	4922      	ldr	r1, [pc, #136]	; (8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>)
    8080:	4607      	mov	r7, r0
    8082:	6849      	ldr	r1, [r1, #4]
    8084:	4288      	cmp	r0, r1
    8086:	69a0      	ldr	r0, [r4, #24]
    8088:	68c1      	ldr	r1, [r0, #12]
    808a:	d202      	bcs.n	8092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
    808c:	440f      	add	r7, r1
    808e:	6201      	str	r1, [r0, #32]
    8090:	e008      	b.n	80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    8092:	4638      	mov	r0, r7
    8094:	f004 fb01 	bl	c69a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    8098:	69a1      	ldr	r1, [r4, #24]
    809a:	68c9      	ldr	r1, [r1, #12]
    809c:	f004 faf9 	bl	c692 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    80a0:	69a1      	ldr	r1, [r4, #24]
    80a2:	6208      	str	r0, [r1, #32]
    80a4:	69a0      	ldr	r0, [r4, #24]
    80a6:	68c1      	ldr	r1, [r0, #12]
    80a8:	2005      	movs	r0, #5
    80aa:	f004 fafc 	bl	c6a6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    80ae:	69a1      	ldr	r1, [r4, #24]
    80b0:	b280      	uxth	r0, r0
    80b2:	8388      	strh	r0, [r1, #28]
    80b4:	69a1      	ldr	r1, [r4, #24]
    80b6:	6a09      	ldr	r1, [r1, #32]
    80b8:	1a79      	subs	r1, r7, r1
    80ba:	4288      	cmp	r0, r1
    80bc:	d804      	bhi.n	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    80be:	f640 21ee 	movw	r1, #2798	; 0xaee
    80c2:	2035      	movs	r0, #53	; 0x35
    80c4:	f7fc fa52 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80c8:	2101      	movs	r1, #1
    80ca:	4650      	mov	r0, sl
    80cc:	f004 ff59 	bl	cf82 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x146>
    80d0:	4428      	add	r0, r5
    80d2:	19c5      	adds	r5, r0, r7
    80d4:	2101      	movs	r1, #1
    80d6:	4650      	mov	r0, sl
    80d8:	f004 fa3b 	bl	c552 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    80dc:	4405      	add	r5, r0
    80de:	2001      	movs	r0, #1
    80e0:	f005 fd50 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    80e4:	f64a 2113 	movw	r1, #43539	; 0xaa13
    80e8:	4408      	add	r0, r1
    80ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    80ee:	fbb0 f0f1 	udiv	r0, r0, r1
    80f2:	1a29      	subs	r1, r5, r0
    80f4:	4630      	mov	r0, r6
    80f6:	f7f9 fe31 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    80fa:	69a1      	ldr	r1, [r4, #24]
    80fc:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    8100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8104:	20000ee8 	.word	0x20000ee8
    8108:	20000114 	.word	0x20000114
    810c:	b510      	push	{r4, lr}
    810e:	4c06      	ldr	r4, [pc, #24]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    8110:	7b20      	ldrb	r0, [r4, #12]
    8112:	2800      	cmp	r0, #0
    8114:	d006      	beq.n	8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>
    8116:	f002 fa23 	bl	a560 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    811a:	f7fa fd31 	bl	2b80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    811e:	2000      	movs	r0, #0
    8120:	7320      	strb	r0, [r4, #12]
    8122:	7360      	strb	r0, [r4, #13]
    8124:	bd10      	pop	{r4, pc}
    8126:	0000      	.short	0x0000
    8128:	20000ee8 	.word	0x20000ee8
    812c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    812e:	4c1c      	ldr	r4, [pc, #112]	; (81a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a0>)
    8130:	7820      	ldrb	r0, [r4, #0]
    8132:	2805      	cmp	r0, #5
    8134:	d002      	beq.n	813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    8136:	200c      	movs	r0, #12
    8138:	b004      	add	sp, #16
    813a:	bd10      	pop	{r4, pc}
    813c:	69a1      	ldr	r1, [r4, #24]
    813e:	b129      	cbz	r1, 814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    8140:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    8144:	b128      	cbz	r0, 8152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
    8146:	f240 41fa 	movw	r1, #1274	; 0x4fa
    814a:	e025      	b.n	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    814c:	f240 41f9 	movw	r1, #1273	; 0x4f9
    8150:	e022      	b.n	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    8152:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    8156:	2820      	cmp	r0, #32
    8158:	d002      	beq.n	8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>
    815a:	f240 41fc 	movw	r1, #1276	; 0x4fc
    815e:	e01b      	b.n	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    8160:	4810      	ldr	r0, [pc, #64]	; (81a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>)
    8162:	f7fa fce5 	bl	2b30 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8166:	69a1      	ldr	r1, [r4, #24]
    8168:	2820      	cmp	r0, #32
    816a:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    816e:	d00e      	beq.n	818e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18e>
    8170:	2300      	movs	r3, #0
    8172:	2201      	movs	r2, #1
    8174:	4668      	mov	r0, sp
    8176:	f000 f8bd 	bl	82f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    817a:	69a0      	ldr	r0, [r4, #24]
    817c:	4669      	mov	r1, sp
    817e:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    8182:	f004 fea2 	bl	ceca <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    8186:	b128      	cbz	r0, 8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    8188:	2000      	movs	r0, #0
    818a:	61a0      	str	r0, [r4, #24]
    818c:	e7d4      	b.n	8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>
    818e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    8192:	e001      	b.n	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    8194:	f240 5103 	movw	r1, #1283	; 0x503
    8198:	2035      	movs	r0, #53	; 0x35
    819a:	f7fc f9e7 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    819e:	0000      	.short	0x0000
    81a0:	20000ee8 	.word	0x20000ee8
    81a4:	000081fd 	.word	0x000081fd
    81a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81ac:	4d11      	ldr	r5, [pc, #68]	; (81f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f4>)
    81ae:	4616      	mov	r6, r2
    81b0:	460f      	mov	r7, r1
    81b2:	2400      	movs	r4, #0
    81b4:	6068      	str	r0, [r5, #4]
    81b6:	f004 fed8 	bl	cf6a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    81ba:	f8df c03c 	ldr.w	ip, [pc, #60]	; 81f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f8>
    81be:	2100      	movs	r1, #0
    81c0:	f81c 2001 	ldrb.w	r2, [ip, r1]
    81c4:	4232      	tst	r2, r6
    81c6:	d007      	beq.n	81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>
    81c8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    81cc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    81d0:	1a1b      	subs	r3, r3, r0
    81d2:	1c64      	adds	r4, r4, #1
    81d4:	b2e4      	uxtb	r4, r4
    81d6:	6093      	str	r3, [r2, #8]
    81d8:	1c49      	adds	r1, r1, #1
    81da:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    81de:	d0ef      	beq.n	81c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0>
    81e0:	f016 0f0e 	tst.w	r6, #14
    81e4:	d004      	beq.n	81f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f0>
    81e6:	f640 11b6 	movw	r1, #2486	; 0x9b6
    81ea:	2035      	movs	r0, #53	; 0x35
    81ec:	f7fc f9be 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81f4:	20000ee8 	.word	0x20000ee8
    81f8:	0000dcfb 	.word	0x0000dcfb
    81fc:	b570      	push	{r4, r5, r6, lr}
    81fe:	460d      	mov	r5, r1
    8200:	0004      	movs	r4, r0
    8202:	d00c      	beq.n	821e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21e>
    8204:	2001      	movs	r0, #1
    8206:	f004 fe1e 	bl	ce46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    820a:	b2c6      	uxtb	r6, r0
    820c:	200b      	movs	r0, #11
    820e:	f004 fe1a 	bl	ce46 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8212:	b2c0      	uxtb	r0, r0
    8214:	4286      	cmp	r6, r0
    8216:	d005      	beq.n	8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>
    8218:	f240 215f 	movw	r1, #607	; 0x25f
    821c:	e061      	b.n	82e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    821e:	f44f 7117 	mov.w	r1, #604	; 0x25c
    8222:	e05e      	b.n	82e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    8224:	2d09      	cmp	r5, #9
    8226:	d25f      	bcs.n	82e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    8228:	e8df f005 	tbb	[pc, r5]
    822c:	3d3d3505 	.word	0x3d3d3505
    8230:	4b445e39 	.word	0x4b445e39
    8234:	0059      	.short	0x0059
    8236:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    823a:	b348      	cbz	r0, 8290 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x290>
    823c:	4620      	mov	r0, r4
    823e:	f000 fbc7 	bl	89d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    8242:	f004 fe92 	bl	cf6a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    8246:	f500 709c 	add.w	r0, r0, #312	; 0x138
    824a:	b285      	uxth	r5, r0
    824c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8250:	2128      	movs	r1, #40	; 0x28
    8252:	f004 fe26 	bl	cea2 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x66>
    8256:	182e      	adds	r6, r5, r0
    8258:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    825a:	68e0      	ldr	r0, [r4, #12]
    825c:	4288      	cmp	r0, r1
    825e:	d200      	bcs.n	8262 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x262>
    8260:	4601      	mov	r1, r0
    8262:	4632      	mov	r2, r6
    8264:	4620      	mov	r0, r4
    8266:	f004 fbc4 	bl	c9f2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    826a:	4d21      	ldr	r5, [pc, #132]	; (82f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f0>)
    826c:	4632      	mov	r2, r6
    826e:	6068      	str	r0, [r5, #4]
    8270:	4620      	mov	r0, r4
    8272:	68e1      	ldr	r1, [r4, #12]
    8274:	f004 fbbd 	bl	c9f2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8278:	60a8      	str	r0, [r5, #8]
    827a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    827e:	f004 fc19 	bl	cab4 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8282:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    8286:	60e8      	str	r0, [r5, #12]
    8288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    828c:	f7fa bd5a 	b.w	2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8290:	f240 2165 	movw	r1, #613	; 0x265
    8294:	e025      	b.n	82e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    8296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    829a:	f004 beec 	b.w	d076 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    829e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82a2:	f002 bb11 	b.w	a8c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    82a6:	4620      	mov	r0, r4
    82a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82ac:	2201      	movs	r2, #1
    82ae:	2100      	movs	r1, #0
    82b0:	f004 be3b 	b.w	cf2a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xee>
    82b4:	2001      	movs	r0, #1
    82b6:	f7f9 fc25 	bl	1b04 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    82ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82be:	f004 b801 	b.w	c2c4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    82c2:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    82c6:	2804      	cmp	r0, #4
    82c8:	d002      	beq.n	82d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d0>
    82ca:	f240 2199 	movw	r1, #665	; 0x299
    82ce:	e008      	b.n	82e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    82d0:	4620      	mov	r0, r4
    82d2:	f004 fe12 	bl	cefa <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xbe>
    82d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82da:	f7fe b86b 	b.w	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    82de:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    82e2:	2035      	movs	r0, #53	; 0x35
    82e4:	f7fc f942 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82e8:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    82ec:	e7f9      	b.n	82e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    82ee:	0000      	.short	0x0000
    82f0:	20000ed8 	.word	0x20000ed8
    82f4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    82f8:	4605      	mov	r5, r0
    82fa:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    82fe:	2600      	movs	r6, #0
    8300:	f8d1 b020 	ldr.w	fp, [r1, #32]
    8304:	469a      	mov	sl, r3
    8306:	460c      	mov	r4, r1
    8308:	280d      	cmp	r0, #13
    830a:	d020      	beq.n	834e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34e>
    830c:	280c      	cmp	r0, #12
    830e:	d01e      	beq.n	834e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34e>
    8310:	2824      	cmp	r0, #36	; 0x24
    8312:	d01c      	beq.n	834e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34e>
    8314:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8318:	2824      	cmp	r0, #36	; 0x24
    831a:	d018      	beq.n	834e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34e>
    831c:	2000      	movs	r0, #0
    831e:	4680      	mov	r8, r0
    8320:	f004 fe18 	bl	cf54 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    8324:	4681      	mov	r9, r0
    8326:	f1ba 0f00 	cmp.w	sl, #0
    832a:	d003      	beq.n	8334 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x334>
    832c:	2101      	movs	r1, #1
    832e:	4620      	mov	r0, r4
    8330:	f004 fe48 	bl	cfc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8334:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8338:	2701      	movs	r7, #1
    833a:	b150      	cbz	r0, 8352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    833c:	2801      	cmp	r0, #1
    833e:	d01b      	beq.n	8378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>
    8340:	2802      	cmp	r0, #2
    8342:	d011      	beq.n	8368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    8344:	2803      	cmp	r0, #3
    8346:	d017      	beq.n	8378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>
    8348:	f640 1139 	movw	r1, #2361	; 0x939
    834c:	e07b      	b.n	8446 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x446>
    834e:	2001      	movs	r0, #1
    8350:	e7e5      	b.n	831e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x31e>
    8352:	9802      	ldr	r0, [sp, #8]
    8354:	b128      	cbz	r0, 8362 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x362>
    8356:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    835a:	4620      	mov	r0, r4
    835c:	f004 fda3 	bl	cea6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x6a>
    8360:	e00b      	b.n	837a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37a>
    8362:	f640 01ff 	movw	r1, #2303	; 0x8ff
    8366:	e06e      	b.n	8446 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x446>
    8368:	4838      	ldr	r0, [pc, #224]	; (844c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44c>)
    836a:	6801      	ldr	r1, [r0, #0]
    836c:	2003      	movs	r0, #3
    836e:	eb01 060b 	add.w	r6, r1, fp
    8372:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8376:	e000      	b.n	837a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37a>
    8378:	68e6      	ldr	r6, [r4, #12]
    837a:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    837e:	4631      	mov	r1, r6
    8380:	f7f9 fcec 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8384:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8388:	60e8      	str	r0, [r5, #12]
    838a:	2000      	movs	r0, #0
    838c:	7028      	strb	r0, [r5, #0]
    838e:	f8a5 9008 	strh.w	r9, [r5, #8]
    8392:	4620      	mov	r0, r4
    8394:	f000 faee 	bl	8974 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    8398:	f1a8 0101 	sub.w	r1, r8, #1
    839c:	4208      	tst	r0, r1
    839e:	d101      	bne.n	83a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>
    83a0:	72af      	strb	r7, [r5, #10]
    83a2:	e005      	b.n	83b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b0>
    83a4:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    83a8:	2801      	cmp	r0, #1
    83aa:	d017      	beq.n	83dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>
    83ac:	2003      	movs	r0, #3
    83ae:	72a8      	strb	r0, [r5, #10]
    83b0:	46b9      	mov	r9, r7
    83b2:	72ef      	strb	r7, [r5, #11]
    83b4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    83b8:	f004 fb7c 	bl	cab4 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    83bc:	6068      	str	r0, [r5, #4]
    83be:	f1ba 0f00 	cmp.w	sl, #0
    83c2:	d03c      	beq.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    83c4:	4631      	mov	r1, r6
    83c6:	4628      	mov	r0, r5
    83c8:	f004 f905 	bl	c5d6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    83cc:	b287      	uxth	r7, r0
    83ce:	4620      	mov	r0, r4
    83d0:	f000 fad0 	bl	8974 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    83d4:	f1b8 0f00 	cmp.w	r8, #0
    83d8:	d002      	beq.n	83e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e0>
    83da:	e014      	b.n	8406 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x406>
    83dc:	2002      	movs	r0, #2
    83de:	e7e6      	b.n	83ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ae>
    83e0:	42b8      	cmp	r0, r7
    83e2:	d810      	bhi.n	8406 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x406>
    83e4:	4607      	mov	r7, r0
    83e6:	f885 900a 	strb.w	r9, [r5, #10]
    83ea:	fb06 f107 	mul.w	r1, r6, r7
    83ee:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    83f2:	f7f9 fcb3 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83f6:	60e8      	str	r0, [r5, #12]
    83f8:	b31e      	cbz	r6, 8442 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x442>
    83fa:	4631      	mov	r1, r6
    83fc:	4628      	mov	r0, r5
    83fe:	f004 f8ea 	bl	c5d6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8402:	4438      	add	r0, r7
    8404:	b287      	uxth	r7, r0
    8406:	4639      	mov	r1, r7
    8408:	4620      	mov	r0, r4
    840a:	f004 fddb 	bl	cfc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    840e:	68e8      	ldr	r0, [r5, #12]
    8410:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8414:	6f20      	ldr	r0, [r4, #112]	; 0x70
    8416:	2800      	cmp	r0, #0
    8418:	d011      	beq.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    841a:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    841e:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    8422:	1a40      	subs	r0, r0, r1
    8424:	b202      	sxth	r2, r0
    8426:	2a00      	cmp	r2, #0
    8428:	dd09      	ble.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    842a:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    842e:	4402      	add	r2, r0
    8430:	1e52      	subs	r2, r2, #1
    8432:	fb92 f2f0 	sdiv	r2, r2, r0
    8436:	b292      	uxth	r2, r2
    8438:	fb02 1000 	mla	r0, r2, r0, r1
    843c:	86e0      	strh	r0, [r4, #54]	; 0x36
    843e:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    8442:	f640 1174 	movw	r1, #2420	; 0x974
    8446:	2035      	movs	r0, #53	; 0x35
    8448:	f7fc f890 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    844c:	20000114 	.word	0x20000114
    8450:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8454:	460d      	mov	r5, r1
    8456:	4607      	mov	r7, r0
    8458:	f000 fa58 	bl	890c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90c>
    845c:	4c1d      	ldr	r4, [pc, #116]	; (84d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d4>)
    845e:	6861      	ldr	r1, [r4, #4]
    8460:	f7f9 fc7c 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8464:	4606      	mov	r6, r0
    8466:	4601      	mov	r1, r0
    8468:	4638      	mov	r0, r7
    846a:	f7f9 fca9 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    846e:	4607      	mov	r7, r0
    8470:	f004 fd81 	bl	cf76 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x13a>
    8474:	4287      	cmp	r7, r0
    8476:	da10      	bge.n	849a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49a>
    8478:	6960      	ldr	r0, [r4, #20]
    847a:	f000 fa47 	bl	890c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90c>
    847e:	4631      	mov	r1, r6
    8480:	f7f9 fc9e 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8484:	6861      	ldr	r1, [r4, #4]
    8486:	fbb0 f0f1 	udiv	r0, r0, r1
    848a:	6028      	str	r0, [r5, #0]
    848c:	6861      	ldr	r1, [r4, #4]
    848e:	b004      	add	sp, #16
    8490:	4630      	mov	r0, r6
    8492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8496:	f7f9 bc61 	b.w	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    849a:	2000      	movs	r0, #0
    849c:	f88d 0000 	strb.w	r0, [sp]
    84a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84a2:	9001      	str	r0, [sp, #4]
    84a4:	f004 fd56 	bl	cf54 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    84a8:	f8ad 0008 	strh.w	r0, [sp, #8]
    84ac:	2001      	movs	r0, #1
    84ae:	f88d 000b 	strb.w	r0, [sp, #11]
    84b2:	6960      	ldr	r0, [r4, #20]
    84b4:	f000 fa2a 	bl	890c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90c>
    84b8:	9003      	str	r0, [sp, #12]
    84ba:	f000 f9c1 	bl	8840 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x840>
    84be:	f88d 000a 	strb.w	r0, [sp, #10]
    84c2:	4668      	mov	r0, sp
    84c4:	6861      	ldr	r1, [r4, #4]
    84c6:	f004 f886 	bl	c5d6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    84ca:	6028      	str	r0, [r5, #0]
    84cc:	9803      	ldr	r0, [sp, #12]
    84ce:	b004      	add	sp, #16
    84d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84d4:	20000ee8 	.word	0x20000ee8
    84d8:	b510      	push	{r4, lr}
    84da:	2400      	movs	r4, #0
    84dc:	f004 fd45 	bl	cf6a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    84e0:	4a06      	ldr	r2, [pc, #24]	; (84fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fc>)
    84e2:	2100      	movs	r1, #0
    84e4:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    84e8:	4404      	add	r4, r0
    84ea:	689b      	ldr	r3, [r3, #8]
    84ec:	1c49      	adds	r1, r1, #1
    84ee:	441c      	add	r4, r3
    84f0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    84f4:	d0f6      	beq.n	84e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e4>
    84f6:	4620      	mov	r0, r4
    84f8:	bd10      	pop	{r4, pc}
    84fa:	0000      	.short	0x0000
    84fc:	20000ee8 	.word	0x20000ee8
    8500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8502:	4c1b      	ldr	r4, [pc, #108]	; (8570 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x570>)
    8504:	4606      	mov	r6, r0
    8506:	460d      	mov	r5, r1
    8508:	78a0      	ldrb	r0, [r4, #2]
    850a:	b360      	cbz	r0, 8566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    850c:	4919      	ldr	r1, [pc, #100]	; (8574 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x574>)
    850e:	6a20      	ldr	r0, [r4, #32]
    8510:	4288      	cmp	r0, r1
    8512:	d828      	bhi.n	8566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    8514:	2000      	movs	r0, #0
    8516:	f88d 0000 	strb.w	r0, [sp]
    851a:	9501      	str	r5, [sp, #4]
    851c:	f004 fd1a 	bl	cf54 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    8520:	f8ad 0008 	strh.w	r0, [sp, #8]
    8524:	2001      	movs	r0, #1
    8526:	f88d 000b 	strb.w	r0, [sp, #11]
    852a:	f004 fd24 	bl	cf76 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x13a>
    852e:	4601      	mov	r1, r0
    8530:	4630      	mov	r0, r6
    8532:	f7f9 fc13 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8536:	9003      	str	r0, [sp, #12]
    8538:	2003      	movs	r0, #3
    853a:	f88d 000a 	strb.w	r0, [sp, #10]
    853e:	4668      	mov	r0, sp
    8540:	f7f9 ff4a 	bl	23d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8544:	4606      	mov	r6, r0
    8546:	4629      	mov	r1, r5
    8548:	9803      	ldr	r0, [sp, #12]
    854a:	f7f9 fc07 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    854e:	4605      	mov	r5, r0
    8550:	6a21      	ldr	r1, [r4, #32]
    8552:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8554:	f7f9 fc02 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8558:	4601      	mov	r1, r0
    855a:	b13e      	cbz	r6, 856c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56c>
    855c:	4628      	mov	r0, r5
    855e:	f7f9 fc2f 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8562:	2800      	cmp	r0, #0
    8564:	db02      	blt.n	856c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56c>
    8566:	2001      	movs	r0, #1
    8568:	b004      	add	sp, #16
    856a:	bd70      	pop	{r4, r5, r6, pc}
    856c:	2000      	movs	r0, #0
    856e:	e7fb      	b.n	8568 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x568>
    8570:	20000ee8 	.word	0x20000ee8
    8574:	07a12000 	.word	0x07a12000
    8578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    857c:	f002 fd1d 	bl	afba <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8580:	4c21      	ldr	r4, [pc, #132]	; (8608 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x608>)
    8582:	4607      	mov	r7, r0
    8584:	6920      	ldr	r0, [r4, #16]
    8586:	f000 f95b 	bl	8840 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x840>
    858a:	4606      	mov	r6, r0
    858c:	f7f9 fb8c 	bl	1ca8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    8590:	4605      	mov	r5, r0
    8592:	2865      	cmp	r0, #101	; 0x65
    8594:	d326      	bcc.n	85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    8596:	1c68      	adds	r0, r5, #1
    8598:	d027      	beq.n	85ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ea>
    859a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    859c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    859e:	1948      	adds	r0, r1, r5
    85a0:	4282      	cmp	r2, r0
    85a2:	d800      	bhi.n	85a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a6>
    85a4:	1a55      	subs	r5, r2, r1
    85a6:	f06f 0139 	mvn.w	r1, #57	; 0x39
    85aa:	4638      	mov	r0, r7
    85ac:	f7f9 fbd6 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85b0:	4629      	mov	r1, r5
    85b2:	f000 f9bd 	bl	8930 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x930>
    85b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85b8:	4408      	add	r0, r1
    85ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85bc:	1a45      	subs	r5, r0, r1
    85be:	f241 3088 	movw	r0, #5000	; 0x1388
    85c2:	4285      	cmp	r5, r0
    85c4:	d900      	bls.n	85c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c8>
    85c6:	4605      	mov	r5, r0
    85c8:	f002 fcf7 	bl	afba <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85cc:	4601      	mov	r1, r0
    85ce:	4638      	mov	r0, r7
    85d0:	f7f9 fbf6 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    85d4:	309d      	adds	r0, #157	; 0x9d
    85d6:	4285      	cmp	r5, r0
    85d8:	d304      	bcc.n	85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    85da:	4631      	mov	r1, r6
    85dc:	4628      	mov	r0, r5
    85de:	f7f9 faa1 	bl	1b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    85e2:	b120      	cbz	r0, 85ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ee>
    85e4:	2000      	movs	r0, #0
    85e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    85ec:	e7e5      	b.n	85ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ba>
    85ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    85f0:	4905      	ldr	r1, [pc, #20]	; (8608 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x608>)
    85f2:	4428      	add	r0, r5
    85f4:	3910      	subs	r1, #16
    85f6:	6260      	str	r0, [r4, #36]	; 0x24
    85f8:	68c8      	ldr	r0, [r1, #12]
    85fa:	4428      	add	r0, r5
    85fc:	60c8      	str	r0, [r1, #12]
    85fe:	f7fa fba1 	bl	2d44 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8602:	2001      	movs	r0, #1
    8604:	e7ef      	b.n	85e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e6>
    8606:	0000      	.short	0x0000
    8608:	20000ee8 	.word	0x20000ee8
    860c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8610:	b08c      	sub	sp, #48	; 0x30
    8612:	4616      	mov	r6, r2
    8614:	4607      	mov	r7, r0
    8616:	f002 fcd0 	bl	afba <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    861a:	4c87      	ldr	r4, [pc, #540]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    861c:	9002      	str	r0, [sp, #8]
    861e:	2500      	movs	r5, #0
    8620:	f8d4 a008 	ldr.w	sl, [r4, #8]
    8624:	f004 fca1 	bl	cf6a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    8628:	68a1      	ldr	r1, [r4, #8]
    862a:	4408      	add	r0, r1
    862c:	6861      	ldr	r1, [r4, #4]
    862e:	4288      	cmp	r0, r1
    8630:	d101      	bne.n	8636 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x636>
    8632:	2001      	movs	r0, #1
    8634:	e000      	b.n	8638 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x638>
    8636:	2000      	movs	r0, #0
    8638:	4683      	mov	fp, r0
    863a:	980d      	ldr	r0, [sp, #52]	; 0x34
    863c:	ea06 090b 	and.w	r9, r6, fp
    8640:	2800      	cmp	r0, #0
    8642:	d065      	beq.n	8710 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x710>
    8644:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    8648:	9802      	ldr	r0, [sp, #8]
    864a:	f7f9 fb87 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    864e:	9000      	str	r0, [sp, #0]
    8650:	f001 f992 	bl	9978 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    8654:	4680      	mov	r8, r0
    8656:	4878      	ldr	r0, [pc, #480]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    8658:	7800      	ldrb	r0, [r0, #0]
    865a:	4e77      	ldr	r6, [pc, #476]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    865c:	362c      	adds	r6, #44	; 0x2c
    865e:	2805      	cmp	r0, #5
    8660:	d12e      	bne.n	86c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c0>
    8662:	4875      	ldr	r0, [pc, #468]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    8664:	6980      	ldr	r0, [r0, #24]
    8666:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    866a:	f001 f965 	bl	9938 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    866e:	4604      	mov	r4, r0
    8670:	4540      	cmp	r0, r8
    8672:	d009      	beq.n	8688 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x688>
    8674:	4870      	ldr	r0, [pc, #448]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    8676:	4621      	mov	r1, r4
    8678:	6980      	ldr	r0, [r0, #24]
    867a:	f500 7084 	add.w	r0, r0, #264	; 0x108
    867e:	f001 f91f 	bl	98c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8682:	2000      	movs	r0, #0
    8684:	6170      	str	r0, [r6, #20]
    8686:	e00c      	b.n	86a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a2>
    8688:	496b      	ldr	r1, [pc, #428]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    868a:	6988      	ldr	r0, [r1, #24]
    868c:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8690:	6170      	str	r0, [r6, #20]
    8692:	698a      	ldr	r2, [r1, #24]
    8694:	6b08      	ldr	r0, [r1, #48]	; 0x30
    8696:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    869a:	4290      	cmp	r0, r2
    869c:	d200      	bcs.n	86a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a0>
    869e:	4610      	mov	r0, r2
    86a0:	6308      	str	r0, [r1, #48]	; 0x30
    86a2:	4865      	ldr	r0, [pc, #404]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    86a4:	6980      	ldr	r0, [r0, #24]
    86a6:	b130      	cbz	r0, 86b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b6>
    86a8:	b144      	cbz	r4, 86bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6bc>
    86aa:	e9d4 1200 	ldrd	r1, r2, [r4]
    86ae:	4411      	add	r1, r2
    86b0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    86b4:	e004      	b.n	86c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c0>
    86b6:	f240 51c5 	movw	r1, #1477	; 0x5c5
    86ba:	e017      	b.n	86ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ec>
    86bc:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    86c0:	4641      	mov	r1, r8
    86c2:	4630      	mov	r0, r6
    86c4:	f001 f8fc 	bl	98c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    86c8:	ea5f 0008 	movs.w	r0, r8
    86cc:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>
    86d0:	9a00      	ldr	r2, [sp, #0]
    86d2:	f8d8 4004 	ldr.w	r4, [r8, #4]
    86d6:	d00c      	beq.n	86f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f2>
    86d8:	e9d0 1000 	ldrd	r1, r0, [r0]
    86dc:	4408      	add	r0, r1
    86de:	4621      	mov	r1, r4
    86e0:	f004 fd71 	bl	d1c6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    86e4:	42a0      	cmp	r0, r4
    86e6:	d904      	bls.n	86f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f2>
    86e8:	f240 51e3 	movw	r1, #1507	; 0x5e3
    86ec:	2035      	movs	r0, #53	; 0x35
    86ee:	f7fb ff3d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86f2:	4601      	mov	r1, r0
    86f4:	9800      	ldr	r0, [sp, #0]
    86f6:	f7f9 fb31 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    86fa:	4606      	mov	r6, r0
    86fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8700:	4644      	mov	r4, r8
    8702:	4241      	negs	r1, r0
    8704:	4630      	mov	r0, r6
    8706:	f7f9 fb29 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    870a:	62e0      	str	r0, [r4, #44]	; 0x2c
    870c:	2001      	movs	r0, #1
    870e:	e042      	b.n	8796 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x796>
    8710:	f1b9 0f00 	cmp.w	r9, #0
    8714:	d018      	beq.n	8748 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x748>
    8716:	2001      	movs	r0, #1
    8718:	f004 fba9 	bl	ce6e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x32>
    871c:	4604      	mov	r4, r0
    871e:	2001      	movs	r0, #1
    8720:	f005 fa30 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8724:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8728:	4401      	add	r1, r0
    872a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    872e:	fbb1 f0f0 	udiv	r0, r1, r0
    8732:	1821      	adds	r1, r4, r0
    8734:	31f1      	adds	r1, #241	; 0xf1
    8736:	9802      	ldr	r0, [sp, #8]
    8738:	f7ff fee2 	bl	8500 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x500>
    873c:	b908      	cbnz	r0, 8742 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x742>
    873e:	f04f 0a00 	mov.w	sl, #0
    8742:	9e02      	ldr	r6, [sp, #8]
    8744:	9508      	str	r5, [sp, #32]
    8746:	e027      	b.n	8798 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x798>
    8748:	b12e      	cbz	r6, 8756 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x756>
    874a:	a908      	add	r1, sp, #32
    874c:	9802      	ldr	r0, [sp, #8]
    874e:	f7ff fe7f 	bl	8450 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x450>
    8752:	4606      	mov	r6, r0
    8754:	e020      	b.n	8798 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x798>
    8756:	9802      	ldr	r0, [sp, #8]
    8758:	f000 f8d8 	bl	890c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90c>
    875c:	4c36      	ldr	r4, [pc, #216]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    875e:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    8762:	f7f9 fafb 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8766:	4606      	mov	r6, r0
    8768:	6920      	ldr	r0, [r4, #16]
    876a:	f000 f8c3 	bl	88f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f4>
    876e:	6861      	ldr	r1, [r4, #4]
    8770:	4348      	muls	r0, r1
    8772:	78a1      	ldrb	r1, [r4, #2]
    8774:	b131      	cbz	r1, 8784 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x784>
    8776:	6a21      	ldr	r1, [r4, #32]
    8778:	4281      	cmp	r1, r0
    877a:	d302      	bcc.n	8782 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x782>
    877c:	1a09      	subs	r1, r1, r0
    877e:	6221      	str	r1, [r4, #32]
    8780:	e000      	b.n	8784 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x784>
    8782:	6225      	str	r5, [r4, #32]
    8784:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    8786:	4601      	mov	r1, r0
    8788:	4610      	mov	r0, r2
    878a:	f7f9 fae7 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    878e:	62e0      	str	r0, [r4, #44]	; 0x2c
    8790:	4630      	mov	r0, r6
    8792:	f000 f8af 	bl	88f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f4>
    8796:	9008      	str	r0, [sp, #32]
    8798:	2001      	movs	r0, #1
    879a:	f004 fb68 	bl	ce6e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x32>
    879e:	4604      	mov	r4, r0
    87a0:	2001      	movs	r0, #1
    87a2:	f005 f9ef 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    87a6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    87aa:	4401      	add	r1, r0
    87ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    87b0:	fbb1 f0f0 	udiv	r0, r1, r0
    87b4:	4404      	add	r4, r0
    87b6:	4651      	mov	r1, sl
    87b8:	4630      	mov	r0, r6
    87ba:	34f1      	adds	r4, #241	; 0xf1
    87bc:	f000 f8b8 	bl	8930 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x930>
    87c0:	491d      	ldr	r1, [pc, #116]	; (8838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    87c2:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    87c6:	6892      	ldr	r2, [r2, #8]
    87c8:	4282      	cmp	r2, r0
    87ca:	d800      	bhi.n	87ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ce>
    87cc:	4610      	mov	r0, r2
    87ce:	6288      	str	r0, [r1, #40]	; 0x28
    87d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    87d2:	b102      	cbz	r2, 87d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d6>
    87d4:	610e      	str	r6, [r1, #16]
    87d6:	4688      	mov	r8, r1
    87d8:	614e      	str	r6, [r1, #20]
    87da:	f1bb 0f00 	cmp.w	fp, #0
    87de:	d002      	beq.n	87e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e6>
    87e0:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    87e4:	e001      	b.n	87ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ea>
    87e6:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    87ea:	f04f 0a01 	mov.w	sl, #1
    87ee:	f887 a00b 	strb.w	sl, [r7, #11]
    87f2:	f004 fbaf 	bl	cf54 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    87f6:	8138      	strh	r0, [r7, #8]
    87f8:	4630      	mov	r0, r6
    87fa:	f000 f821 	bl	8840 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x840>
    87fe:	72b8      	strb	r0, [r7, #10]
    8800:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    8804:	6078      	str	r0, [r7, #4]
    8806:	f1b9 0f00 	cmp.w	r9, #0
    880a:	d008      	beq.n	881e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x81e>
    880c:	f887 a000 	strb.w	sl, [r7]
    8810:	490a      	ldr	r1, [pc, #40]	; (883c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>)
    8812:	9802      	ldr	r0, [sp, #8]
    8814:	f000 f88c 	bl	8930 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x930>
    8818:	1b00      	subs	r0, r0, r4
    881a:	60f8      	str	r0, [r7, #12]
    881c:	e001      	b.n	8822 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x822>
    881e:	703d      	strb	r5, [r7, #0]
    8820:	60fe      	str	r6, [r7, #12]
    8822:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    8826:	42a0      	cmp	r0, r4
    8828:	d303      	bcc.n	8832 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x832>
    882a:	2001      	movs	r0, #1
    882c:	b00f      	add	sp, #60	; 0x3c
    882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8832:	2000      	movs	r0, #0
    8834:	e7fa      	b.n	882c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82c>
    8836:	0000      	.short	0x0000
    8838:	20000ee8 	.word	0x20000ee8
    883c:	07a12000 	.word	0x07a12000
    8840:	4a09      	ldr	r2, [pc, #36]	; (8868 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x868>)
    8842:	b510      	push	{r4, lr}
    8844:	7811      	ldrb	r1, [r2, #0]
    8846:	2904      	cmp	r1, #4
    8848:	d10c      	bne.n	8864 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x864>
    884a:	6851      	ldr	r1, [r2, #4]
    884c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    884e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8852:	004c      	lsls	r4, r1, #1
    8854:	4601      	mov	r1, r0
    8856:	4610      	mov	r0, r2
    8858:	f7f9 fab2 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    885c:	42a0      	cmp	r0, r4
    885e:	d201      	bcs.n	8864 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x864>
    8860:	2003      	movs	r0, #3
    8862:	bd10      	pop	{r4, pc}
    8864:	2002      	movs	r0, #2
    8866:	bd10      	pop	{r4, pc}
    8868:	20000ee8 	.word	0x20000ee8
    886c:	b570      	push	{r4, r5, r6, lr}
    886e:	4d13      	ldr	r5, [pc, #76]	; (88bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8bc>)
    8870:	7f28      	ldrb	r0, [r5, #28]
    8872:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    8876:	2800      	cmp	r0, #0
    8878:	7828      	ldrb	r0, [r5, #0]
    887a:	d00f      	beq.n	889c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x89c>
    887c:	2805      	cmp	r0, #5
    887e:	d004      	beq.n	888a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88a>
    8880:	f240 318f 	movw	r1, #911	; 0x38f
    8884:	2035      	movs	r0, #53	; 0x35
    8886:	f7fb fe71 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    888a:	4620      	mov	r0, r4
    888c:	f004 faea 	bl	ce64 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    8890:	b178      	cbz	r0, 88b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b2>
    8892:	4620      	mov	r0, r4
    8894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8898:	f000 bff0 	b.w	987c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    889c:	2805      	cmp	r0, #5
    889e:	d108      	bne.n	88b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b2>
    88a0:	4620      	mov	r0, r4
    88a2:	f004 fadf 	bl	ce64 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    88a6:	b920      	cbnz	r0, 88b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b2>
    88a8:	69a8      	ldr	r0, [r5, #24]
    88aa:	f500 7084 	add.w	r0, r0, #264	; 0x108
    88ae:	f001 f827 	bl	9900 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    88b2:	4620      	mov	r0, r4
    88b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88b8:	f001 b822 	b.w	9900 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    88bc:	20000ee8 	.word	0x20000ee8
    88c0:	b510      	push	{r4, lr}
    88c2:	f7fd ffd1 	bl	6868 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    88c6:	490a      	ldr	r1, [pc, #40]	; (88f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f0>)
    88c8:	2000      	movs	r0, #0
    88ca:	70c8      	strb	r0, [r1, #3]
    88cc:	7708      	strb	r0, [r1, #28]
    88ce:	6188      	str	r0, [r1, #24]
    88d0:	7008      	strb	r0, [r1, #0]
    88d2:	f7fd ff35 	bl	6740 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    88d6:	4604      	mov	r4, r0
    88d8:	7800      	ldrb	r0, [r0, #0]
    88da:	f7f9 fffb 	bl	28d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    88de:	b110      	cbz	r0, 88e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e6>
    88e0:	2020      	movs	r0, #32
    88e2:	7020      	strb	r0, [r4, #0]
    88e4:	bd10      	pop	{r4, pc}
    88e6:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    88ea:	2035      	movs	r0, #53	; 0x35
    88ec:	f7fb fe3e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88f0:	20000ee8 	.word	0x20000ee8
    88f4:	b510      	push	{r4, lr}
    88f6:	4c04      	ldr	r4, [pc, #16]	; (8908 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x908>)
    88f8:	4601      	mov	r1, r0
    88fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    88fc:	f7f9 fa60 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8900:	6861      	ldr	r1, [r4, #4]
    8902:	fbb0 f0f1 	udiv	r0, r0, r1
    8906:	bd10      	pop	{r4, pc}
    8908:	20000ee8 	.word	0x20000ee8
    890c:	b510      	push	{r4, lr}
    890e:	4c07      	ldr	r4, [pc, #28]	; (892c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92c>)
    8910:	4601      	mov	r1, r0
    8912:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8914:	f7f9 fa54 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8918:	6861      	ldr	r1, [r4, #4]
    891a:	fbb0 f2f1 	udiv	r2, r0, r1
    891e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8924:	4351      	muls	r1, r2
    8926:	f7f9 ba19 	b.w	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    892a:	0000      	.short	0x0000
    892c:	20000ee8 	.word	0x20000ee8
    8930:	b570      	push	{r4, r5, r6, lr}
    8932:	4605      	mov	r5, r0
    8934:	480d      	ldr	r0, [pc, #52]	; (896c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96c>)
    8936:	460c      	mov	r4, r1
    8938:	7881      	ldrb	r1, [r0, #2]
    893a:	b1a9      	cbz	r1, 8968 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x968>
    893c:	4a0c      	ldr	r2, [pc, #48]	; (8970 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x970>)
    893e:	6a01      	ldr	r1, [r0, #32]
    8940:	4291      	cmp	r1, r2
    8942:	d211      	bcs.n	8968 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x968>
    8944:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8946:	f7f9 fa09 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    894a:	4606      	mov	r6, r0
    894c:	4621      	mov	r1, r4
    894e:	4628      	mov	r0, r5
    8950:	f7f9 fa04 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8954:	4601      	mov	r1, r0
    8956:	4630      	mov	r0, r6
    8958:	f7f9 fa32 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    895c:	2800      	cmp	r0, #0
    895e:	dd03      	ble.n	8968 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x968>
    8960:	1a20      	subs	r0, r4, r0
    8962:	d500      	bpl.n	8966 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x966>
    8964:	2000      	movs	r0, #0
    8966:	bd70      	pop	{r4, r5, r6, pc}
    8968:	4620      	mov	r0, r4
    896a:	bd70      	pop	{r4, r5, r6, pc}
    896c:	20000ee8 	.word	0x20000ee8
    8970:	07a12000 	.word	0x07a12000

00008974 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    8974:	b570      	push	{r4, r5, r6, lr}
    8976:	4605      	mov	r5, r0
    8978:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    897c:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    8980:	b1c9      	cbz	r1, 89b6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    8982:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    8986:	1a0c      	subs	r4, r1, r0
    8988:	f1b4 0404 	subs.w	r4, r4, #4
    898c:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    8990:	b140      	cbz	r0, 89a4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    8992:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    8996:	2300      	movs	r3, #0
    8998:	2109      	movs	r1, #9
    899a:	f105 0078 	add.w	r0, r5, #120	; 0x78
    899e:	f003 fd2e 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89a2:	b160      	cbz	r0, 89be <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    89a4:	4628      	mov	r0, r5
    89a6:	f004 fbff 	bl	d1a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    89aa:	b138      	cbz	r0, 89bc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    89ac:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    89b0:	1a40      	subs	r0, r0, r1
    89b2:	1f00      	subs	r0, r0, #4
    89b4:	e003      	b.n	89be <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    89b6:	f1c0 0402 	rsb	r4, r0, #2
    89ba:	e7e7      	b.n	898c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    89bc:	4620      	mov	r0, r4
    89be:	42a0      	cmp	r0, r4
    89c0:	da00      	bge.n	89c4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    89c2:	4604      	mov	r4, r0
    89c4:	2c00      	cmp	r4, #0
    89c6:	dc01      	bgt.n	89cc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    89c8:	2000      	movs	r0, #0
    89ca:	bd70      	pop	{r4, r5, r6, pc}
    89cc:	b2a0      	uxth	r0, r4
    89ce:	bd70      	pop	{r4, r5, r6, pc}

000089d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    89d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89d2:	4d36      	ldr	r5, [pc, #216]	; (8aac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    89d4:	2600      	movs	r6, #0
    89d6:	4604      	mov	r4, r0
    89d8:	6068      	str	r0, [r5, #4]
    89da:	806e      	strh	r6, [r5, #2]
    89dc:	706e      	strb	r6, [r5, #1]
    89de:	702e      	strb	r6, [r5, #0]
    89e0:	8800      	ldrh	r0, [r0, #0]
    89e2:	f7fc facb 	bl	4f7c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    89e6:	6868      	ldr	r0, [r5, #4]
    89e8:	8800      	ldrh	r0, [r0, #0]
    89ea:	f7fc fa6f 	bl	4ecc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    89ee:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    89f2:	6869      	ldr	r1, [r5, #4]
    89f4:	1c40      	adds	r0, r0, #1
    89f6:	b282      	uxth	r2, r0
    89f8:	f101 0078 	add.w	r0, r1, #120	; 0x78
    89fc:	f003 fe8f 	bl	c71e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8a00:	b120      	cbz	r0, 8a0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    8a02:	f44f 71ac 	mov.w	r1, #344	; 0x158
    8a06:	2036      	movs	r0, #54	; 0x36
    8a08:	f7fb fdb0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a0c:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    8a10:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8a14:	4630      	mov	r0, r6
    8a16:	2924      	cmp	r1, #36	; 0x24
    8a18:	d10a      	bne.n	8a30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8a1a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8a1e:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8a22:	1a51      	subs	r1, r2, r1
    8a24:	b209      	sxth	r1, r1
    8a26:	2900      	cmp	r1, #0
    8a28:	db02      	blt.n	8a30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8a2a:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8a2e:	e00f      	b.n	8a50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8a30:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8a34:	2924      	cmp	r1, #36	; 0x24
    8a36:	d001      	beq.n	8a3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8a38:	2925      	cmp	r1, #37	; 0x25
    8a3a:	d10c      	bne.n	8a56 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8a3c:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8a40:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8a44:	1a51      	subs	r1, r2, r1
    8a46:	b209      	sxth	r1, r1
    8a48:	2900      	cmp	r1, #0
    8a4a:	db04      	blt.n	8a56 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8a4c:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8a50:	f000 fd5a 	bl	9508 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8a54:	b318      	cbz	r0, 8a9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8a56:	f000 fbfd 	bl	9254 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8a5a:	2800      	cmp	r0, #0
    8a5c:	d125      	bne.n	8aaa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8a5e:	6868      	ldr	r0, [r5, #4]
    8a60:	3078      	adds	r0, #120	; 0x78
    8a62:	f004 fb16 	bl	d092 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8a66:	b120      	cbz	r0, 8a72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8a68:	6868      	ldr	r0, [r5, #4]
    8a6a:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8a6e:	f000 faad 	bl	8fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8a72:	480f      	ldr	r0, [pc, #60]	; (8ab0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8a74:	9000      	str	r0, [sp, #0]
    8a76:	4b0f      	ldr	r3, [pc, #60]	; (8ab4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8a78:	4a0f      	ldr	r2, [pc, #60]	; (8ab8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8a7a:	4621      	mov	r1, r4
    8a7c:	4630      	mov	r0, r6
    8a7e:	f7fc fad9 	bl	5034 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8a82:	6868      	ldr	r0, [r5, #4]
    8a84:	2300      	movs	r3, #0
    8a86:	2105      	movs	r1, #5
    8a88:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8a8c:	3078      	adds	r0, #120	; 0x78
    8a8e:	f003 fcb6 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a92:	2800      	cmp	r0, #0
    8a94:	d009      	beq.n	8aaa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8a9a:	f7fc bac5 	b.w	5028 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8a9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8aa2:	2100      	movs	r1, #0
    8aa4:	4608      	mov	r0, r1
    8aa6:	f000 bb81 	b.w	91ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8aac:	2000011c 	.word	0x2000011c
    8ab0:	000091ad 	.word	0x000091ad
    8ab4:	00008bdd 	.word	0x00008bdd
    8ab8:	00009481 	.word	0x00009481
    8abc:	4411      	add	r1, r2
    8abe:	78c2      	ldrb	r2, [r0, #3]
    8ac0:	480c      	ldr	r0, [pc, #48]	; (8af4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8ac2:	1d89      	adds	r1, r1, #6
    8ac4:	b289      	uxth	r1, r1
    8ac6:	6840      	ldr	r0, [r0, #4]
    8ac8:	2a01      	cmp	r2, #1
    8aca:	d006      	beq.n	8ada <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8acc:	b142      	cbz	r2, 8ae0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8ace:	2a18      	cmp	r2, #24
    8ad0:	d105      	bne.n	8ade <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8ad2:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8ad6:	b132      	cbz	r2, 8ae6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8ad8:	e009      	b.n	8aee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8ada:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8ade:	4770      	bx	lr
    8ae0:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8ae4:	4770      	bx	lr
    8ae6:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8aea:	b902      	cbnz	r2, 8aee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8aec:	2100      	movs	r1, #0
    8aee:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8af2:	4770      	bx	lr
    8af4:	2000011c 	.word	0x2000011c
    8af8:	490b      	ldr	r1, [pc, #44]	; (8b28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8afa:	78c2      	ldrb	r2, [r0, #3]
    8afc:	6849      	ldr	r1, [r1, #4]
    8afe:	2a01      	cmp	r2, #1
    8b00:	d006      	beq.n	8b10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8b02:	b15a      	cbz	r2, 8b1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8b04:	2a18      	cmp	r2, #24
    8b06:	d108      	bne.n	8b1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8b08:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8b0c:	f003 bea6 	b.w	c85c <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8b10:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8b14:	7241      	strb	r1, [r0, #9]
    8b16:	0a09      	lsrs	r1, r1, #8
    8b18:	7281      	strb	r1, [r0, #10]
    8b1a:	4770      	bx	lr
    8b1c:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8b20:	7341      	strb	r1, [r0, #13]
    8b22:	0a09      	lsrs	r1, r1, #8
    8b24:	7381      	strb	r1, [r0, #14]
    8b26:	4770      	bx	lr
    8b28:	2000011c 	.word	0x2000011c
    8b2c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8b2e:	4c2a      	ldr	r4, [pc, #168]	; (8bd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8b30:	2300      	movs	r3, #0
    8b32:	4619      	mov	r1, r3
    8b34:	6860      	ldr	r0, [r4, #4]
    8b36:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8b3a:	3078      	adds	r0, #120	; 0x78
    8b3c:	f003 fc5f 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b40:	2800      	cmp	r0, #0
    8b42:	d048      	beq.n	8bd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b44:	6860      	ldr	r0, [r4, #4]
    8b46:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8b4a:	f88d 1000 	strb.w	r1, [sp]
    8b4e:	9900      	ldr	r1, [sp, #0]
    8b50:	9100      	str	r1, [sp, #0]
    8b52:	f89d 1000 	ldrb.w	r1, [sp]
    8b56:	2900      	cmp	r1, #0
    8b58:	d03d      	beq.n	8bd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b5a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8b5e:	f003 fca7 	bl	c4b0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8b62:	2800      	cmp	r0, #0
    8b64:	d137      	bne.n	8bd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b66:	6860      	ldr	r0, [r4, #4]
    8b68:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8b6c:	280a      	cmp	r0, #10
    8b6e:	d932      	bls.n	8bd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b70:	4668      	mov	r0, sp
    8b72:	f7fd faeb 	bl	614c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8b76:	2800      	cmp	r0, #0
    8b78:	d02d      	beq.n	8bd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8b7a:	6861      	ldr	r1, [r4, #4]
    8b7c:	2205      	movs	r2, #5
    8b7e:	4668      	mov	r0, sp
    8b80:	318e      	adds	r1, #142	; 0x8e
    8b82:	f002 fb7d 	bl	b280 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8b86:	2500      	movs	r5, #0
    8b88:	b310      	cbz	r0, 8bd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8b8a:	6860      	ldr	r0, [r4, #4]
    8b8c:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8b90:	7808      	ldrb	r0, [r1, #0]
    8b92:	b158      	cbz	r0, 8bac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8b94:	2205      	movs	r2, #5
    8b96:	4668      	mov	r0, sp
    8b98:	1c49      	adds	r1, r1, #1
    8b9a:	f002 fb71 	bl	b280 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8b9e:	2800      	cmp	r0, #0
    8ba0:	d119      	bne.n	8bd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ba2:	6860      	ldr	r0, [r4, #4]
    8ba4:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8ba8:	7800      	ldrb	r0, [r0, #0]
    8baa:	b940      	cbnz	r0, 8bbe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8bac:	6860      	ldr	r0, [r4, #4]
    8bae:	9900      	ldr	r1, [sp, #0]
    8bb0:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8bb4:	f8c0 1001 	str.w	r1, [r0, #1]
    8bb8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8bbc:	7141      	strb	r1, [r0, #5]
    8bbe:	6860      	ldr	r0, [r4, #4]
    8bc0:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8bc4:	7808      	ldrb	r0, [r1, #0]
    8bc6:	1c40      	adds	r0, r0, #1
    8bc8:	7008      	strb	r0, [r1, #0]
    8bca:	2001      	movs	r0, #1
    8bcc:	f000 fd04 	bl	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8bd0:	6860      	ldr	r0, [r4, #4]
    8bd2:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8bd6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8bd8:	2000011c 	.word	0x2000011c
    8bdc:	4a0c      	ldr	r2, [pc, #48]	; (8c10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8bde:	7851      	ldrb	r1, [r2, #1]
    8be0:	b999      	cbnz	r1, 8c0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8be2:	4611      	mov	r1, r2
    8be4:	2801      	cmp	r0, #1
    8be6:	6849      	ldr	r1, [r1, #4]
    8be8:	d008      	beq.n	8bfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8bea:	7890      	ldrb	r0, [r2, #2]
    8bec:	0740      	lsls	r0, r0, #29
    8bee:	d503      	bpl.n	8bf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8bf0:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8bf4:	2807      	cmp	r0, #7
    8bf6:	d008      	beq.n	8c0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8bf8:	2001      	movs	r0, #1
    8bfa:	4770      	bx	lr
    8bfc:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8c00:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8c02:	4288      	cmp	r0, r1
    8c04:	d801      	bhi.n	8c0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8c06:	f7fe bf4b 	b.w	7aa0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8c0a:	2000      	movs	r0, #0
    8c0c:	4770      	bx	lr
    8c0e:	0000      	.short	0x0000
    8c10:	2000011c 	.word	0x2000011c
    8c14:	b538      	push	{r3, r4, r5, lr}
    8c16:	4c87      	ldr	r4, [pc, #540]	; (8e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8c18:	6860      	ldr	r0, [r4, #4]
    8c1a:	3078      	adds	r0, #120	; 0x78
    8c1c:	f004 fa39 	bl	d092 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8c20:	2800      	cmp	r0, #0
    8c22:	d15b      	bne.n	8cdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8c24:	6860      	ldr	r0, [r4, #4]
    8c26:	2300      	movs	r3, #0
    8c28:	2101      	movs	r1, #1
    8c2a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8c2e:	3078      	adds	r0, #120	; 0x78
    8c30:	f003 fbe5 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c34:	2800      	cmp	r0, #0
    8c36:	d151      	bne.n	8cdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8c38:	6860      	ldr	r0, [r4, #4]
    8c3a:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8c3e:	f88d 1000 	strb.w	r1, [sp]
    8c42:	9900      	ldr	r1, [sp, #0]
    8c44:	9100      	str	r1, [sp, #0]
    8c46:	f89d 1000 	ldrb.w	r1, [sp]
    8c4a:	b109      	cbz	r1, 8c50 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8c4c:	2002      	movs	r0, #2
    8c4e:	e038      	b.n	8cc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8c50:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8c54:	2300      	movs	r3, #0
    8c56:	4619      	mov	r1, r3
    8c58:	3078      	adds	r0, #120	; 0x78
    8c5a:	f003 fbd0 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c5e:	b128      	cbz	r0, 8c6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8c60:	6860      	ldr	r0, [r4, #4]
    8c62:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8c66:	b108      	cbz	r0, 8c6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8c68:	2012      	movs	r0, #18
    8c6a:	e02a      	b.n	8cc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8c6c:	6860      	ldr	r0, [r4, #4]
    8c6e:	2500      	movs	r5, #0
    8c70:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8c74:	2a12      	cmp	r2, #18
    8c76:	d01d      	beq.n	8cb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8c78:	dc04      	bgt.n	8c84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8c7a:	2a03      	cmp	r2, #3
    8c7c:	d025      	beq.n	8cca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8c7e:	2a11      	cmp	r2, #17
    8c80:	d104      	bne.n	8c8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8c82:	e019      	b.n	8cb8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    8c84:	2a18      	cmp	r2, #24
    8c86:	d01b      	beq.n	8cc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    8c88:	2a23      	cmp	r2, #35	; 0x23
    8c8a:	d028      	beq.n	8cde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    8c8c:	2300      	movs	r3, #0
    8c8e:	2104      	movs	r1, #4
    8c90:	3078      	adds	r0, #120	; 0x78
    8c92:	f003 fbb4 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c96:	2800      	cmp	r0, #0
    8c98:	d120      	bne.n	8cdc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8c9a:	6860      	ldr	r0, [r4, #4]
    8c9c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8ca0:	2919      	cmp	r1, #25
    8ca2:	d07c      	beq.n	8d9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    8ca4:	dc22      	bgt.n	8cec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    8ca6:	2901      	cmp	r1, #1
    8ca8:	d02c      	beq.n	8d04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    8caa:	2902      	cmp	r1, #2
    8cac:	d037      	beq.n	8d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    8cae:	2903      	cmp	r1, #3
    8cb0:	d134      	bne.n	8d1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    8cb2:	e022      	b.n	8cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    8cb4:	200b      	movs	r0, #11
    8cb6:	e004      	b.n	8cc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8cbc:	f000 bba0 	b.w	9400 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    8cc0:	2006      	movs	r0, #6
    8cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8cc6:	f000 bc87 	b.w	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8cca:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    8cce:	7101      	strb	r1, [r0, #4]
    8cd0:	2007      	movs	r0, #7
    8cd2:	f000 fc81 	bl	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8cd6:	6860      	ldr	r0, [r4, #4]
    8cd8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8cdc:	bd38      	pop	{r3, r4, r5, pc}
    8cde:	2018      	movs	r0, #24
    8ce0:	f000 fc7a 	bl	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8ce4:	6860      	ldr	r0, [r4, #4]
    8ce6:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    8cea:	bd38      	pop	{r3, r4, r5, pc}
    8cec:	291d      	cmp	r1, #29
    8cee:	d018      	beq.n	8d22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8cf0:	291e      	cmp	r1, #30
    8cf2:	d016      	beq.n	8d22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8cf4:	2921      	cmp	r1, #33	; 0x21
    8cf6:	d176      	bne.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8cf8:	e056      	b.n	8da8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    8cfa:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    8cfe:	7141      	strb	r1, [r0, #5]
    8d00:	2007      	movs	r0, #7
    8d02:	e07e      	b.n	8e02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    8d04:	200c      	movs	r0, #12
    8d06:	f000 fc67 	bl	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8d0a:	6860      	ldr	r0, [r4, #4]
    8d0c:	f820 5fba 	strh.w	r5, [r0, #186]!
    8d10:	7981      	ldrb	r1, [r0, #6]
    8d12:	f041 0101 	orr.w	r1, r1, #1
    8d16:	7181      	strb	r1, [r0, #6]
    8d18:	f800 5c34 	strb.w	r5, [r0, #-52]
    8d1c:	e063      	b.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8d1e:	2013      	movs	r0, #19
    8d20:	e037      	b.n	8d92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    8d22:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    8d26:	f88d 2000 	strb.w	r2, [sp]
    8d2a:	9a00      	ldr	r2, [sp, #0]
    8d2c:	9200      	str	r2, [sp, #0]
    8d2e:	f89d 2000 	ldrb.w	r2, [sp]
    8d32:	bbaa      	cbnz	r2, 8da0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    8d34:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    8d38:	f88d 2000 	strb.w	r2, [sp]
    8d3c:	9a00      	ldr	r2, [sp, #0]
    8d3e:	9200      	str	r2, [sp, #0]
    8d40:	f89d 2000 	ldrb.w	r2, [sp]
    8d44:	b1aa      	cbz	r2, 8d72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    8d46:	2924      	cmp	r1, #36	; 0x24
    8d48:	d011      	beq.n	8d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8d4a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8d4e:	2924      	cmp	r1, #36	; 0x24
    8d50:	d00d      	beq.n	8d6e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8d52:	2300      	movs	r3, #0
    8d54:	f500 7293 	add.w	r2, r0, #294	; 0x126
    8d58:	f500 7199 	add.w	r1, r0, #306	; 0x132
    8d5c:	f003 fe3b 	bl	c9d6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8d60:	6860      	ldr	r0, [r4, #4]
    8d62:	211e      	movs	r1, #30
    8d64:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    8d68:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    8d6c:	e003      	b.n	8d76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    8d6e:	2301      	movs	r3, #1
    8d70:	e7f0      	b.n	8d54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    8d72:	291e      	cmp	r1, #30
    8d74:	d137      	bne.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8d76:	6860      	ldr	r0, [r4, #4]
    8d78:	f003 fe48 	bl	ca0c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8d7c:	f000 f85c 	bl	8e38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    8d80:	6861      	ldr	r1, [r4, #4]
    8d82:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8d86:	8bc2      	ldrh	r2, [r0, #30]
    8d88:	f821 2ffe 	strh.w	r2, [r1, #254]!
    8d8c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8d8e:	8048      	strh	r0, [r1, #2]
    8d90:	2015      	movs	r0, #21
    8d92:	f000 fc21 	bl	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8d96:	6860      	ldr	r0, [r4, #4]
    8d98:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    8d9c:	e001      	b.n	8da2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    8d9e:	e02f      	b.n	8e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    8da0:	e021      	b.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8da2:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8da6:	e01e      	b.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8da8:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8dac:	2901      	cmp	r1, #1
    8dae:	d108      	bne.n	8dc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    8db0:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    8db4:	f88d 1000 	strb.w	r1, [sp]
    8db8:	9900      	ldr	r1, [sp, #0]
    8dba:	9100      	str	r1, [sp, #0]
    8dbc:	f89d 1000 	ldrb.w	r1, [sp]
    8dc0:	b121      	cbz	r1, 8dcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    8dc2:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8dc6:	2902      	cmp	r1, #2
    8dc8:	d005      	beq.n	8dd6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    8dca:	e00c      	b.n	8de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8dcc:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    8dd0:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    8dd4:	e002      	b.n	8ddc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    8dd6:	f850 1f62 	ldr.w	r1, [r0, #98]!
    8dda:	6840      	ldr	r0, [r0, #4]
    8ddc:	f000 fc1e 	bl	961c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    8de0:	2018      	movs	r0, #24
    8de2:	f000 fbf9 	bl	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8de6:	6860      	ldr	r0, [r4, #4]
    8de8:	3078      	adds	r0, #120	; 0x78
    8dea:	f004 f952 	bl	d092 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8dee:	2800      	cmp	r0, #0
    8df0:	f47f af7b 	bne.w	8cea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    8df4:	6860      	ldr	r0, [r4, #4]
    8df6:	3078      	adds	r0, #120	; 0x78
    8df8:	f004 f94b 	bl	d092 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8dfc:	b128      	cbz	r0, 8e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    8dfe:	e00f      	b.n	8e20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8e00:	2011      	movs	r0, #17
    8e02:	f000 fbe9 	bl	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e06:	6860      	ldr	r0, [r4, #4]
    8e08:	e7c8      	b.n	8d9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    8e0a:	6860      	ldr	r0, [r4, #4]
    8e0c:	2300      	movs	r3, #0
    8e0e:	4619      	mov	r1, r3
    8e10:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e14:	3078      	adds	r0, #120	; 0x78
    8e16:	f003 faf2 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e1a:	b108      	cbz	r0, 8e20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8e1c:	f000 fa44 	bl	92a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    8e20:	6860      	ldr	r0, [r4, #4]
    8e22:	3078      	adds	r0, #120	; 0x78
    8e24:	f004 f935 	bl	d092 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8e28:	2800      	cmp	r0, #0
    8e2a:	d1e1      	bne.n	8df0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    8e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e30:	f7ff be7c 	b.w	8b2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    8e34:	2000011c 	.word	0x2000011c
    8e38:	480a      	ldr	r0, [pc, #40]	; (8e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    8e3a:	b510      	push	{r4, lr}
    8e3c:	6841      	ldr	r1, [r0, #4]
    8e3e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    8e42:	2801      	cmp	r0, #1
    8e44:	d009      	beq.n	8e5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    8e46:	8808      	ldrh	r0, [r1, #0]
    8e48:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    8e4c:	312c      	adds	r1, #44	; 0x2c
    8e4e:	f003 fd9e 	bl	c98e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e56:	f7fd baad 	b.w	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8e5a:	2002      	movs	r0, #2
    8e5c:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8e60:	bd10      	pop	{r4, pc}
    8e62:	0000      	.short	0x0000
    8e64:	2000011c 	.word	0x2000011c
    8e68:	b570      	push	{r4, r5, r6, lr}
    8e6a:	4c22      	ldr	r4, [pc, #136]	; (8ef4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    8e6c:	f04f 0500 	mov.w	r5, #0
    8e70:	8861      	ldrh	r1, [r4, #2]
    8e72:	0748      	lsls	r0, r1, #29
    8e74:	d510      	bpl.n	8e98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    8e76:	6860      	ldr	r0, [r4, #4]
    8e78:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e7c:	2a03      	cmp	r2, #3
    8e7e:	d004      	beq.n	8e8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    8e80:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8e84:	2a07      	cmp	r2, #7
    8e86:	d107      	bne.n	8e98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    8e88:	e002      	b.n	8e90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    8e8a:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    8e8e:	e026      	b.n	8ede <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    8e90:	2201      	movs	r2, #1
    8e92:	7022      	strb	r2, [r4, #0]
    8e94:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    8e98:	0788      	lsls	r0, r1, #30
    8e9a:	d508      	bpl.n	8eae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    8e9c:	68a0      	ldr	r0, [r4, #8]
    8e9e:	78c0      	ldrb	r0, [r0, #3]
    8ea0:	2819      	cmp	r0, #25
    8ea2:	d21a      	bcs.n	8eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    8ea4:	4914      	ldr	r1, [pc, #80]	; (8ef8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    8ea6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8eaa:	b1b0      	cbz	r0, 8eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    8eac:	4780      	blx	r0
    8eae:	f000 f867 	bl	8f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    8eb2:	f000 f823 	bl	8efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    8eb6:	4606      	mov	r6, r0
    8eb8:	7860      	ldrb	r0, [r4, #1]
    8eba:	0700      	lsls	r0, r0, #28
    8ebc:	d515      	bpl.n	8eea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    8ebe:	6860      	ldr	r0, [r4, #4]
    8ec0:	2300      	movs	r3, #0
    8ec2:	2105      	movs	r1, #5
    8ec4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8ec8:	3078      	adds	r0, #120	; 0x78
    8eca:	f003 fa98 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ece:	b148      	cbz	r0, 8ee4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    8ed0:	6860      	ldr	r0, [r4, #4]
    8ed2:	2608      	movs	r6, #8
    8ed4:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    8ed8:	e007      	b.n	8eea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    8eda:	f240 61b1 	movw	r1, #1713	; 0x6b1
    8ede:	2036      	movs	r0, #54	; 0x36
    8ee0:	f7fb fb44 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ee4:	2000      	movs	r0, #0
    8ee6:	f7fc f97d 	bl	51e4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8eea:	6860      	ldr	r0, [r4, #4]
    8eec:	f004 f901 	bl	d0f2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    8ef0:	4630      	mov	r0, r6
    8ef2:	bd70      	pop	{r4, r5, r6, pc}
    8ef4:	2000011c 	.word	0x2000011c
    8ef8:	20000190 	.word	0x20000190
    8efc:	b570      	push	{r4, r5, r6, lr}
    8efe:	4c1e      	ldr	r4, [pc, #120]	; (8f78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    8f00:	2000      	movs	r0, #0
    8f02:	78a1      	ldrb	r1, [r4, #2]
    8f04:	07c9      	lsls	r1, r1, #31
    8f06:	d01b      	beq.n	8f40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    8f08:	68e0      	ldr	r0, [r4, #12]
    8f0a:	2300      	movs	r3, #0
    8f0c:	2105      	movs	r1, #5
    8f0e:	78c5      	ldrb	r5, [r0, #3]
    8f10:	6860      	ldr	r0, [r4, #4]
    8f12:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8f16:	3078      	adds	r0, #120	; 0x78
    8f18:	f003 fa71 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f1c:	b188      	cbz	r0, 8f42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f1e:	2d06      	cmp	r5, #6
    8f20:	d00f      	beq.n	8f42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f22:	dc06      	bgt.n	8f32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    8f24:	2d02      	cmp	r5, #2
    8f26:	d00c      	beq.n	8f42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f28:	2d04      	cmp	r5, #4
    8f2a:	d00a      	beq.n	8f42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f2c:	2d05      	cmp	r5, #5
    8f2e:	d106      	bne.n	8f3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    8f30:	e007      	b.n	8f42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f32:	2d0b      	cmp	r5, #11
    8f34:	d005      	beq.n	8f42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f36:	2d0d      	cmp	r5, #13
    8f38:	d003      	beq.n	8f42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f3a:	2d11      	cmp	r5, #17
    8f3c:	d001      	beq.n	8f42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    8f3e:	2008      	movs	r0, #8
    8f40:	bd70      	pop	{r4, r5, r6, pc}
    8f42:	68e0      	ldr	r0, [r4, #12]
    8f44:	f7fd f9b0 	bl	62a8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8f48:	b148      	cbz	r0, 8f5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    8f4a:	68e0      	ldr	r0, [r4, #12]
    8f4c:	78c0      	ldrb	r0, [r0, #3]
    8f4e:	2819      	cmp	r0, #25
    8f50:	d205      	bcs.n	8f5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    8f52:	490a      	ldr	r1, [pc, #40]	; (8f7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    8f54:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8f58:	b108      	cbz	r0, 8f5e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    8f5a:	4780      	blx	r0
    8f5c:	e002      	b.n	8f64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    8f5e:	2000      	movs	r0, #0
    8f60:	f000 fb82 	bl	9668 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc98>
    8f64:	6861      	ldr	r1, [r4, #4]
    8f66:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    8f6a:	1c52      	adds	r2, r2, #1
    8f6c:	f143 0300 	adc.w	r3, r3, #0
    8f70:	e9c1 2300 	strd	r2, r3, [r1]
    8f74:	bd70      	pop	{r4, r5, r6, pc}
    8f76:	0000      	.short	0x0000
    8f78:	2000011c 	.word	0x2000011c
    8f7c:	2000012c 	.word	0x2000012c
    8f80:	b510      	push	{r4, lr}
    8f82:	4c11      	ldr	r4, [pc, #68]	; (8fc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    8f84:	78a0      	ldrb	r0, [r4, #2]
    8f86:	0700      	lsls	r0, r0, #28
    8f88:	d517      	bpl.n	8fba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    8f8a:	6860      	ldr	r0, [r4, #4]
    8f8c:	2100      	movs	r1, #0
    8f8e:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8f92:	f000 fc3d 	bl	9810 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe40>
    8f96:	6860      	ldr	r0, [r4, #4]
    8f98:	3078      	adds	r0, #120	; 0x78
    8f9a:	f004 f87a 	bl	d092 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f9e:	b168      	cbz	r0, 8fbc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    8fa0:	6860      	ldr	r0, [r4, #4]
    8fa2:	21fe      	movs	r1, #254	; 0xfe
    8fa4:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    8fa8:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    8fac:	2908      	cmp	r1, #8
    8fae:	d104      	bne.n	8fba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    8fb0:	2102      	movs	r1, #2
    8fb2:	7021      	strb	r1, [r4, #0]
    8fb4:	2100      	movs	r1, #0
    8fb6:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    8fba:	bd10      	pop	{r4, pc}
    8fbc:	f240 61bd 	movw	r1, #1725	; 0x6bd
    8fc0:	2036      	movs	r0, #54	; 0x36
    8fc2:	f7fb fad3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fc6:	0000      	.short	0x0000
    8fc8:	2000011c 	.word	0x2000011c
    8fcc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    8fce:	4605      	mov	r5, r0
    8fd0:	4668      	mov	r0, sp
    8fd2:	f7fb ffbd 	bl	4f50 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8fd6:	b318      	cbz	r0, 9020 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    8fd8:	2222      	movs	r2, #34	; 0x22
    8fda:	2100      	movs	r1, #0
    8fdc:	9800      	ldr	r0, [sp, #0]
    8fde:	f002 f9db 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8fe2:	2103      	movs	r1, #3
    8fe4:	9800      	ldr	r0, [sp, #0]
    8fe6:	f003 fc1f 	bl	c828 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    8fea:	9800      	ldr	r0, [sp, #0]
    8fec:	7801      	ldrb	r1, [r0, #0]
    8fee:	f021 0110 	bic.w	r1, r1, #16
    8ff2:	7001      	strb	r1, [r0, #0]
    8ff4:	4629      	mov	r1, r5
    8ff6:	f7fd f967 	bl	62c8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8ffa:	2100      	movs	r1, #0
    8ffc:	4c6a      	ldr	r4, [pc, #424]	; (91a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    8ffe:	2d19      	cmp	r5, #25
    9000:	d270      	bcs.n	90e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    9002:	e8df f005 	tbb	[pc, r5]
    9006:	1c24      	.short	0x1c24
    9008:	c9c94c10 	.word	0xc9c94c10
    900c:	c97016c2 	.word	0xc97016c2
    9010:	c964c2c2 	.word	0xc964c2c2
    9014:	b6c9c9c9 	.word	0xb6c9c9c9
    9018:	8181c2c2 	.word	0x8181c2c2
    901c:	00a3c99a 	.word	0x00a3c99a
    9020:	f640 014f 	movw	r1, #2127	; 0x84f
    9024:	e0bd      	b.n	91a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    9026:	6860      	ldr	r0, [r4, #4]
    9028:	9900      	ldr	r1, [sp, #0]
    902a:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    902e:	7108      	strb	r0, [r1, #4]
    9030:	e0ab      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9032:	6861      	ldr	r1, [r4, #4]
    9034:	9800      	ldr	r0, [sp, #0]
    9036:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    903a:	7101      	strb	r1, [r0, #4]
    903c:	e0a5      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    903e:	6860      	ldr	r0, [r4, #4]
    9040:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9044:	9800      	ldr	r0, [sp, #0]
    9046:	1c49      	adds	r1, r1, #1
    9048:	f003 fbce 	bl	c7e8 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    904c:	e09d      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    904e:	6860      	ldr	r0, [r4, #4]
    9050:	9d00      	ldr	r5, [sp, #0]
    9052:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    9056:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    905a:	f003 fb29 	bl	c6b0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    905e:	7128      	strb	r0, [r5, #4]
    9060:	6860      	ldr	r0, [r4, #4]
    9062:	9d00      	ldr	r5, [sp, #0]
    9064:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    9068:	c803      	ldmia	r0, {r0, r1}
    906a:	f003 fb16 	bl	c69a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    906e:	7168      	strb	r0, [r5, #5]
    9070:	0a00      	lsrs	r0, r0, #8
    9072:	71a8      	strb	r0, [r5, #6]
    9074:	6860      	ldr	r0, [r4, #4]
    9076:	9d00      	ldr	r5, [sp, #0]
    9078:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    907c:	f003 f9a6 	bl	c3cc <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    9080:	71e8      	strb	r0, [r5, #7]
    9082:	0a00      	lsrs	r0, r0, #8
    9084:	7228      	strb	r0, [r5, #8]
    9086:	6862      	ldr	r2, [r4, #4]
    9088:	9800      	ldr	r0, [sp, #0]
    908a:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    908e:	7241      	strb	r1, [r0, #9]
    9090:	0a09      	lsrs	r1, r1, #8
    9092:	7281      	strb	r1, [r0, #10]
    9094:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    9098:	f003 fbab 	bl	c7f2 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    909c:	e075      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    909e:	6861      	ldr	r1, [r4, #4]
    90a0:	9800      	ldr	r0, [sp, #0]
    90a2:	f201 115b 	addw	r1, r1, #347	; 0x15b
    90a6:	f003 fbaf 	bl	c808 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    90aa:	6861      	ldr	r1, [r4, #4]
    90ac:	9800      	ldr	r0, [sp, #0]
    90ae:	f201 1163 	addw	r1, r1, #355	; 0x163
    90b2:	f003 fba2 	bl	c7fa <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    90b6:	6861      	ldr	r1, [r4, #4]
    90b8:	9800      	ldr	r0, [sp, #0]
    90ba:	f201 1175 	addw	r1, r1, #373	; 0x175
    90be:	f003 fba8 	bl	c812 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    90c2:	6861      	ldr	r1, [r4, #4]
    90c4:	9800      	ldr	r0, [sp, #0]
    90c6:	31f0      	adds	r1, #240	; 0xf0
    90c8:	f003 fb9a 	bl	c800 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    90cc:	e05d      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    90ce:	9800      	ldr	r0, [sp, #0]
    90d0:	220b      	movs	r2, #11
    90d2:	7102      	strb	r2, [r0, #4]
    90d4:	2259      	movs	r2, #89	; 0x59
    90d6:	7142      	strb	r2, [r0, #5]
    90d8:	7181      	strb	r1, [r0, #6]
    90da:	21fe      	movs	r1, #254	; 0xfe
    90dc:	71c1      	strb	r1, [r0, #7]
    90de:	2112      	movs	r1, #18
    90e0:	7201      	strb	r1, [r0, #8]
    90e2:	e052      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    90e4:	e058      	b.n	9198 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    90e6:	9101      	str	r1, [sp, #4]
    90e8:	9102      	str	r1, [sp, #8]
    90ea:	f000 fe0f 	bl	9d0c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    90ee:	f644 112f 	movw	r1, #18735	; 0x492f
    90f2:	4008      	ands	r0, r1
    90f4:	f88d 0004 	strb.w	r0, [sp, #4]
    90f8:	0a00      	lsrs	r0, r0, #8
    90fa:	f88d 0005 	strb.w	r0, [sp, #5]
    90fe:	a901      	add	r1, sp, #4
    9100:	9800      	ldr	r0, [sp, #0]
    9102:	f003 fb8c 	bl	c81e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9106:	e040      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9108:	6860      	ldr	r0, [r4, #4]
    910a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    910e:	9800      	ldr	r0, [sp, #0]
    9110:	f003 fb9c 	bl	c84c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9114:	6860      	ldr	r0, [r4, #4]
    9116:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    911a:	9800      	ldr	r0, [sp, #0]
    911c:	f003 fb9a 	bl	c854 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9120:	6860      	ldr	r0, [r4, #4]
    9122:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9126:	9800      	ldr	r0, [sp, #0]
    9128:	f003 fb88 	bl	c83c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    912c:	6860      	ldr	r0, [r4, #4]
    912e:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    9132:	9800      	ldr	r0, [sp, #0]
    9134:	f003 fb86 	bl	c844 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9138:	e027      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    913a:	6861      	ldr	r1, [r4, #4]
    913c:	9800      	ldr	r0, [sp, #0]
    913e:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    9142:	7102      	strb	r2, [r0, #4]
    9144:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    9148:	7141      	strb	r1, [r0, #5]
    914a:	e01e      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    914c:	6860      	ldr	r0, [r4, #4]
    914e:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    9152:	f003 f9f8 	bl	c546 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9156:	4601      	mov	r1, r0
    9158:	9800      	ldr	r0, [sp, #0]
    915a:	f003 fb83 	bl	c864 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    915e:	6860      	ldr	r0, [r4, #4]
    9160:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    9164:	f003 f9ef 	bl	c546 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    9168:	4601      	mov	r1, r0
    916a:	9800      	ldr	r0, [sp, #0]
    916c:	f003 fb64 	bl	c838 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    9170:	e00b      	b.n	918a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9172:	6860      	ldr	r0, [r4, #4]
    9174:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    9178:	9800      	ldr	r0, [sp, #0]
    917a:	f003 fb31 	bl	c7e0 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    917e:	6860      	ldr	r0, [r4, #4]
    9180:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    9184:	9800      	ldr	r0, [sp, #0]
    9186:	f003 fb2d 	bl	c7e4 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    918a:	f7fb febb 	bl	4f04 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    918e:	b130      	cbz	r0, 919e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    9190:	9800      	ldr	r0, [sp, #0]
    9192:	f7ff fcb1 	bl	8af8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9196:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9198:	f640 01db 	movw	r1, #2267	; 0x8db
    919c:	e001      	b.n	91a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    919e:	f640 01e1 	movw	r1, #2273	; 0x8e1
    91a2:	2036      	movs	r0, #54	; 0x36
    91a4:	f7fb f9e2 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91a8:	2000011c 	.word	0x2000011c
    91ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91b0:	4c27      	ldr	r4, [pc, #156]	; (9250 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    91b2:	4680      	mov	r8, r0
    91b4:	460d      	mov	r5, r1
    91b6:	8860      	ldrh	r0, [r4, #2]
    91b8:	f04f 0600 	mov.w	r6, #0
    91bc:	05c1      	lsls	r1, r0, #23
    91be:	4620      	mov	r0, r4
    91c0:	6840      	ldr	r0, [r0, #4]
    91c2:	d502      	bpl.n	91ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    91c4:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    91c8:	e004      	b.n	91d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    91ca:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    91ce:	1c49      	adds	r1, r1, #1
    91d0:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    91d4:	f003 ffe8 	bl	d1a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    91d8:	2701      	movs	r7, #1
    91da:	b1e0      	cbz	r0, 9216 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    91dc:	8860      	ldrh	r0, [r4, #2]
    91de:	0500      	lsls	r0, r0, #20
    91e0:	d506      	bpl.n	91f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    91e2:	6860      	ldr	r0, [r4, #4]
    91e4:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    91e8:	b111      	cbz	r1, 91f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    91ea:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    91ee:	e012      	b.n	9216 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    91f0:	6860      	ldr	r0, [r4, #4]
    91f2:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    91f6:	1c49      	adds	r1, r1, #1
    91f8:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    91fc:	f003 ff6a 	bl	d0d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    9200:	6860      	ldr	r0, [r4, #4]
    9202:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    9206:	4291      	cmp	r1, r2
    9208:	d305      	bcc.n	9216 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    920a:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    920e:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    9212:	f7fd f8cf 	bl	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9216:	8860      	ldrh	r0, [r4, #2]
    9218:	f410 7f40 	tst.w	r0, #768	; 0x300
    921c:	d008      	beq.n	9230 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    921e:	6860      	ldr	r0, [r4, #4]
    9220:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9224:	b921      	cbnz	r1, 9230 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9226:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    922a:	2101      	movs	r1, #1
    922c:	f7fe fc5a 	bl	7ae4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9230:	ea58 0005 	orrs.w	r0, r8, r5
    9234:	d104      	bne.n	9240 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    9236:	f7ff fe17 	bl	8e68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    923a:	4605      	mov	r5, r0
    923c:	f7ff fcea 	bl	8c14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    9240:	4629      	mov	r1, r5
    9242:	4640      	mov	r0, r8
    9244:	f000 fa48 	bl	96d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd08>
    9248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    924c:	f7fb be44 	b.w	4ed8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9250:	2000011c 	.word	0x2000011c
    9254:	4813      	ldr	r0, [pc, #76]	; (92a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    9256:	6840      	ldr	r0, [r0, #4]
    9258:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    925c:	b129      	cbz	r1, 926a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    925e:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    9262:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    9266:	4291      	cmp	r1, r2
    9268:	d215      	bcs.n	9296 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    926a:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    926e:	b129      	cbz	r1, 927c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    9270:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    9274:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    9278:	4291      	cmp	r1, r2
    927a:	d20c      	bcs.n	9296 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    927c:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    9280:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9284:	428a      	cmp	r2, r1
    9286:	d206      	bcs.n	9296 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9288:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    928c:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    9290:	b11a      	cbz	r2, 929a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    9292:	4288      	cmp	r0, r1
    9294:	d303      	bcc.n	929e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    9296:	2001      	movs	r0, #1
    9298:	4770      	bx	lr
    929a:	2806      	cmp	r0, #6
    929c:	d2fb      	bcs.n	9296 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    929e:	2000      	movs	r0, #0
    92a0:	4770      	bx	lr
    92a2:	0000      	.short	0x0000
    92a4:	2000011c 	.word	0x2000011c
    92a8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    92aa:	4c54      	ldr	r4, [pc, #336]	; (93fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    92ac:	6860      	ldr	r0, [r4, #4]
    92ae:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    92b2:	f88d 1000 	strb.w	r1, [sp]
    92b6:	9900      	ldr	r1, [sp, #0]
    92b8:	9100      	str	r1, [sp, #0]
    92ba:	f89d 1000 	ldrb.w	r1, [sp]
    92be:	b129      	cbz	r1, 92cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    92c0:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    92c4:	f003 f8f4 	bl	c4b0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    92c8:	2800      	cmp	r0, #0
    92ca:	d00a      	beq.n	92e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    92cc:	6860      	ldr	r0, [r4, #4]
    92ce:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    92d2:	b181      	cbz	r1, 92f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    92d4:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    92d8:	b149      	cbz	r1, 92ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    92da:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    92de:	b108      	cbz	r0, 92e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    92e0:	200a      	movs	r0, #10
    92e2:	e087      	b.n	93f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    92e4:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    92e8:	2036      	movs	r0, #54	; 0x36
    92ea:	f7fb f93f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92ee:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    92f2:	f000 b885 	b.w	9400 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    92f6:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    92fa:	b109      	cbz	r1, 9300 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    92fc:	2008      	movs	r0, #8
    92fe:	e079      	b.n	93f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9300:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9304:	2500      	movs	r5, #0
    9306:	b181      	cbz	r1, 932a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    9308:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    930c:	0780      	lsls	r0, r0, #30
    930e:	d10b      	bne.n	9328 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9310:	200c      	movs	r0, #12
    9312:	f000 f961 	bl	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9316:	6860      	ldr	r0, [r4, #4]
    9318:	2101      	movs	r1, #1
    931a:	f820 5fb4 	strh.w	r5, [r0, #180]!
    931e:	7101      	strb	r1, [r0, #4]
    9320:	7b01      	ldrb	r1, [r0, #12]
    9322:	f041 0101 	orr.w	r1, r1, #1
    9326:	7301      	strb	r1, [r0, #12]
    9328:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    932a:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    932e:	f88d 1004 	strb.w	r1, [sp, #4]
    9332:	9901      	ldr	r1, [sp, #4]
    9334:	9101      	str	r1, [sp, #4]
    9336:	f89d 1004 	ldrb.w	r1, [sp, #4]
    933a:	b141      	cbz	r1, 934e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    933c:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    9340:	f88d 1000 	strb.w	r1, [sp]
    9344:	9900      	ldr	r1, [sp, #0]
    9346:	9100      	str	r1, [sp, #0]
    9348:	f89d 1000 	ldrb.w	r1, [sp]
    934c:	b391      	cbz	r1, 93b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    934e:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9352:	2901      	cmp	r1, #1
    9354:	d1e8      	bne.n	9328 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9356:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    935a:	f88d 1000 	strb.w	r1, [sp]
    935e:	9900      	ldr	r1, [sp, #0]
    9360:	9100      	str	r1, [sp, #0]
    9362:	f89d 1000 	ldrb.w	r1, [sp]
    9366:	2900      	cmp	r1, #0
    9368:	d1de      	bne.n	9328 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    936a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    936e:	f003 f89f 	bl	c4b0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9372:	2800      	cmp	r0, #0
    9374:	d1d8      	bne.n	9328 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9376:	6860      	ldr	r0, [r4, #4]
    9378:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    937c:	f003 fe91 	bl	d0a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9380:	4605      	mov	r5, r0
    9382:	6860      	ldr	r0, [r4, #4]
    9384:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9388:	f003 fe8b 	bl	d0a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    938c:	4606      	mov	r6, r0
    938e:	6860      	ldr	r0, [r4, #4]
    9390:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    9394:	4628      	mov	r0, r5
    9396:	f003 fe8f 	bl	d0b8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    939a:	b350      	cbz	r0, 93f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    939c:	6860      	ldr	r0, [r4, #4]
    939e:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    93a2:	4630      	mov	r0, r6
    93a4:	f003 fe88 	bl	d0b8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    93a8:	b318      	cbz	r0, 93f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    93aa:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    93ae:	2000      	movs	r0, #0
    93b0:	f000 b8ee 	b.w	9590 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    93b4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    93b8:	2924      	cmp	r1, #36	; 0x24
    93ba:	d018      	beq.n	93ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    93bc:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    93c0:	2924      	cmp	r1, #36	; 0x24
    93c2:	d014      	beq.n	93ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    93c4:	f05f 0300 	movs.w	r3, #0
    93c8:	f500 7293 	add.w	r2, r0, #294	; 0x126
    93cc:	f500 7199 	add.w	r1, r0, #306	; 0x132
    93d0:	f003 fb01 	bl	c9d6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    93d4:	6860      	ldr	r0, [r4, #4]
    93d6:	4602      	mov	r2, r0
    93d8:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    93dc:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    93e0:	8bc8      	ldrh	r0, [r1, #30]
    93e2:	f822 0ffe 	strh.w	r0, [r2, #254]!
    93e6:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    93e8:	8050      	strh	r0, [r2, #2]
    93ea:	2014      	movs	r0, #20
    93ec:	e002      	b.n	93f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    93ee:	2301      	movs	r3, #1
    93f0:	e7ea      	b.n	93c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    93f2:	2016      	movs	r0, #22
    93f4:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    93f8:	f000 b8ee 	b.w	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    93fc:	2000011c 	.word	0x2000011c
    9400:	b510      	push	{r4, lr}
    9402:	4c1e      	ldr	r4, [pc, #120]	; (947c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    9404:	6862      	ldr	r2, [r4, #4]
    9406:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    940a:	2808      	cmp	r0, #8
    940c:	d20d      	bcs.n	942a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    940e:	f1c0 0108 	rsb	r1, r0, #8
    9412:	4410      	add	r0, r2
    9414:	b2c9      	uxtb	r1, r1
    9416:	f200 1075 	addw	r0, r0, #373	; 0x175
    941a:	f7fb f905 	bl	4628 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    941e:	6861      	ldr	r1, [r4, #4]
    9420:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9424:	4410      	add	r0, r2
    9426:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    942a:	6862      	ldr	r2, [r4, #4]
    942c:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9430:	3808      	subs	r0, #8
    9432:	2804      	cmp	r0, #4
    9434:	d20c      	bcs.n	9450 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    9436:	f1c0 0104 	rsb	r1, r0, #4
    943a:	4410      	add	r0, r2
    943c:	b2c9      	uxtb	r1, r1
    943e:	30f0      	adds	r0, #240	; 0xf0
    9440:	f7fb f8f2 	bl	4628 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9444:	6861      	ldr	r1, [r4, #4]
    9446:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    944a:	4410      	add	r0, r2
    944c:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9450:	6860      	ldr	r0, [r4, #4]
    9452:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    9456:	290c      	cmp	r1, #12
    9458:	d30e      	bcc.n	9478 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    945a:	d005      	beq.n	9468 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    945c:	f640 1131 	movw	r1, #2353	; 0x931
    9460:	f04f 0036 	mov.w	r0, #54	; 0x36
    9464:	f7fb f882 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9468:	2100      	movs	r1, #0
    946a:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    946e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9472:	2003      	movs	r0, #3
    9474:	f000 b8b0 	b.w	95d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9478:	bd10      	pop	{r4, pc}
    947a:	0000      	.short	0x0000
    947c:	2000011c 	.word	0x2000011c
    9480:	b570      	push	{r4, r5, r6, lr}
    9482:	4b20      	ldr	r3, [pc, #128]	; (9504 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    9484:	4602      	mov	r2, r0
    9486:	460c      	mov	r4, r1
    9488:	8858      	ldrh	r0, [r3, #2]
    948a:	4310      	orrs	r0, r2
    948c:	8058      	strh	r0, [r3, #2]
    948e:	4618      	mov	r0, r3
    9490:	0791      	lsls	r1, r2, #30
    9492:	6840      	ldr	r0, [r0, #4]
    9494:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    9498:	d507      	bpl.n	94aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    949a:	b121      	cbz	r1, 94a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    949c:	f640 21c5 	movw	r1, #2757	; 0xac5
    94a0:	2036      	movs	r0, #54	; 0x36
    94a2:	f7fb f863 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94a6:	609c      	str	r4, [r3, #8]
    94a8:	e003      	b.n	94b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    94aa:	b101      	cbz	r1, 94ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    94ac:	60dc      	str	r4, [r3, #12]
    94ae:	0791      	lsls	r1, r2, #30
    94b0:	d515      	bpl.n	94de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    94b2:	78e1      	ldrb	r1, [r4, #3]
    94b4:	2906      	cmp	r1, #6
    94b6:	d002      	beq.n	94be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    94b8:	290b      	cmp	r1, #11
    94ba:	d110      	bne.n	94de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    94bc:	e008      	b.n	94d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    94be:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    94c2:	2918      	cmp	r1, #24
    94c4:	d10b      	bne.n	94de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    94c6:	2100      	movs	r1, #0
    94c8:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    94cc:	2101      	movs	r1, #1
    94ce:	e004      	b.n	94da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    94d0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    94d4:	2912      	cmp	r1, #18
    94d6:	d102      	bne.n	94de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    94d8:	2100      	movs	r1, #0
    94da:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    94de:	0691      	lsls	r1, r2, #26
    94e0:	d501      	bpl.n	94e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    94e2:	2108      	movs	r1, #8
    94e4:	7059      	strb	r1, [r3, #1]
    94e6:	0611      	lsls	r1, r2, #24
    94e8:	d50a      	bpl.n	9500 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    94ea:	8a82      	ldrh	r2, [r0, #20]
    94ec:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    94f0:	4620      	mov	r0, r4
    94f2:	f7ff fae3 	bl	8abc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    94f6:	4620      	mov	r0, r4
    94f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    94fc:	f7ff bafc 	b.w	8af8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9500:	bd70      	pop	{r4, r5, r6, pc}
    9502:	0000      	.short	0x0000
    9504:	2000011c 	.word	0x2000011c
    9508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    950c:	4c1f      	ldr	r4, [pc, #124]	; (958c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    950e:	2501      	movs	r5, #1
    9510:	6862      	ldr	r2, [r4, #4]
    9512:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    9516:	b908      	cbnz	r0, 951c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    9518:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    951c:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    9520:	b909      	cbnz	r1, 9526 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    9522:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9526:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    952a:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    952e:	3262      	adds	r2, #98	; 0x62
    9530:	2001      	movs	r0, #1
    9532:	7290      	strb	r0, [r2, #10]
    9534:	2000      	movs	r0, #0
    9536:	f000 f82b 	bl	9590 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    953a:	6860      	ldr	r0, [r4, #4]
    953c:	302c      	adds	r0, #44	; 0x2c
    953e:	f003 fab9 	bl	cab4 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9542:	4606      	mov	r6, r0
    9544:	6860      	ldr	r0, [r4, #4]
    9546:	f003 fa61 	bl	ca0c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    954a:	b1c0      	cbz	r0, 957e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    954c:	6860      	ldr	r0, [r4, #4]
    954e:	302c      	adds	r0, #44	; 0x2c
    9550:	f003 fab0 	bl	cab4 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9554:	6861      	ldr	r1, [r4, #4]
    9556:	4607      	mov	r7, r0
    9558:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    955c:	8808      	ldrh	r0, [r1, #0]
    955e:	312c      	adds	r1, #44	; 0x2c
    9560:	f003 fa15 	bl	c98e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9564:	42be      	cmp	r6, r7
    9566:	d20a      	bcs.n	957e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9568:	f7f8 fbe8 	bl	1d3c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    956c:	4601      	mov	r1, r0
    956e:	1bb8      	subs	r0, r7, r6
    9570:	2865      	cmp	r0, #101	; 0x65
    9572:	d200      	bcs.n	9576 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    9574:	2065      	movs	r0, #101	; 0x65
    9576:	f7f8 fad5 	bl	1b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    957a:	b100      	cbz	r0, 957e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    957c:	2500      	movs	r5, #0
    957e:	2104      	movs	r1, #4
    9580:	6860      	ldr	r0, [r4, #4]
    9582:	f7fe faaf 	bl	7ae4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9586:	4628      	mov	r0, r5
    9588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    958c:	2000011c 	.word	0x2000011c
    9590:	b510      	push	{r4, lr}
    9592:	4c10      	ldr	r4, [pc, #64]	; (95d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    9594:	6861      	ldr	r1, [r4, #4]
    9596:	880a      	ldrh	r2, [r1, #0]
    9598:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    959c:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    95a0:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    95a4:	f003 fd7d 	bl	d0a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    95a8:	6861      	ldr	r1, [r4, #4]
    95aa:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    95ae:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    95b2:	f003 fd76 	bl	d0a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    95b6:	6862      	ldr	r2, [r4, #4]
    95b8:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    95bc:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    95c0:	2001      	movs	r0, #1
    95c2:	7008      	strb	r0, [r1, #0]
    95c4:	2000      	movs	r0, #0
    95c6:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    95ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95ce:	f7fc bef1 	b.w	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95d2:	0000      	.short	0x0000
    95d4:	2000011c 	.word	0x2000011c
    95d8:	490f      	ldr	r1, [pc, #60]	; (9618 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    95da:	280c      	cmp	r0, #12
    95dc:	6849      	ldr	r1, [r1, #4]
    95de:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    95e2:	d014      	beq.n	960e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95e4:	2813      	cmp	r0, #19
    95e6:	d012      	beq.n	960e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95e8:	2818      	cmp	r0, #24
    95ea:	d010      	beq.n	960e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95ec:	2200      	movs	r2, #0
    95ee:	2811      	cmp	r0, #17
    95f0:	d00e      	beq.n	9610 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    95f2:	2807      	cmp	r0, #7
    95f4:	d00b      	beq.n	960e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95f6:	2815      	cmp	r0, #21
    95f8:	d00a      	beq.n	9610 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    95fa:	2801      	cmp	r0, #1
    95fc:	d007      	beq.n	960e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    95fe:	2800      	cmp	r0, #0
    9600:	d005      	beq.n	960e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9602:	2802      	cmp	r0, #2
    9604:	d003      	beq.n	960e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9606:	f821 2fb4 	strh.w	r2, [r1, #180]!
    960a:	2001      	movs	r0, #1
    960c:	7108      	strb	r0, [r1, #4]
    960e:	4770      	bx	lr
    9610:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    9614:	4770      	bx	lr
    9616:	0000      	.short	0x0000
    9618:	2000011c 	.word	0x2000011c
    961c:	b538      	push	{r3, r4, r5, lr}
    961e:	4c11      	ldr	r4, [pc, #68]	; (9664 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    9620:	6862      	ldr	r2, [r4, #4]
    9622:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    9626:	f8ad 2000 	strh.w	r2, [sp]
    962a:	f002 ffa4 	bl	c576 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    962e:	f89d 3000 	ldrb.w	r3, [sp]
    9632:	b2c2      	uxtb	r2, r0
    9634:	2100      	movs	r1, #0
    9636:	4293      	cmp	r3, r2
    9638:	d003      	beq.n	9642 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    963a:	6863      	ldr	r3, [r4, #4]
    963c:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    9640:	e002      	b.n	9648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    9642:	6862      	ldr	r2, [r4, #4]
    9644:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    9648:	f89d 2001 	ldrb.w	r2, [sp, #1]
    964c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    9650:	4282      	cmp	r2, r0
    9652:	d003      	beq.n	965c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    9654:	6861      	ldr	r1, [r4, #4]
    9656:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    965a:	bd38      	pop	{r3, r4, r5, pc}
    965c:	6860      	ldr	r0, [r4, #4]
    965e:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    9662:	bd38      	pop	{r3, r4, r5, pc}
    9664:	2000011c 	.word	0x2000011c
    9668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    966c:	4c19      	ldr	r4, [pc, #100]	; (96d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd04>)
    966e:	2600      	movs	r6, #0
    9670:	2703      	movs	r7, #3
    9672:	f8d4 c004 	ldr.w	ip, [r4, #4]
    9676:	2501      	movs	r5, #1
    9678:	b1a0      	cbz	r0, 96a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcd4>
    967a:	68e0      	ldr	r0, [r4, #12]
    967c:	78c0      	ldrb	r0, [r0, #3]
    967e:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    9682:	fa05 f000 	lsl.w	r0, r5, r0
    9686:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    968a:	b130      	cbz	r0, 969a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcca>
    968c:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    9690:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    9694:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9698:	e017      	b.n	96ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcfa>
    969a:	f240 5143 	movw	r1, #1347	; 0x543
    969e:	2036      	movs	r0, #54	; 0x36
    96a0:	f7fa ff64 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96a4:	2300      	movs	r3, #0
    96a6:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    96aa:	4619      	mov	r1, r3
    96ac:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    96b0:	f002 fea5 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96b4:	b160      	cbz	r0, 96d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd00>
    96b6:	68e0      	ldr	r0, [r4, #12]
    96b8:	78c1      	ldrb	r1, [r0, #3]
    96ba:	6860      	ldr	r0, [r4, #4]
    96bc:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    96c0:	f800 7f86 	strb.w	r7, [r0, #134]!
    96c4:	8686      	strh	r6, [r0, #52]	; 0x34
    96c6:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    96ca:	2000      	movs	r0, #0
    96cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96d0:	2001      	movs	r0, #1
    96d2:	e7fb      	b.n	96cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcfc>
    96d4:	2000011c 	.word	0x2000011c
    96d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96da:	4d4c      	ldr	r5, [pc, #304]	; (980c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe3c>)
    96dc:	4607      	mov	r7, r0
    96de:	460e      	mov	r6, r1
    96e0:	6868      	ldr	r0, [r5, #4]
    96e2:	f100 0478 	add.w	r4, r0, #120	; 0x78
    96e6:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    96ea:	f88d 0000 	strb.w	r0, [sp]
    96ee:	9800      	ldr	r0, [sp, #0]
    96f0:	9000      	str	r0, [sp, #0]
    96f2:	f89d 0000 	ldrb.w	r0, [sp]
    96f6:	b930      	cbnz	r0, 9706 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd36>
    96f8:	7c22      	ldrb	r2, [r4, #16]
    96fa:	2300      	movs	r3, #0
    96fc:	2101      	movs	r1, #1
    96fe:	4620      	mov	r0, r4
    9700:	f002 fe7d 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9704:	b110      	cbz	r0, 970c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd3c>
    9706:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    9708:	1c40      	adds	r0, r0, #1
    970a:	8760      	strh	r0, [r4, #58]	; 0x3a
    970c:	2001      	movs	r0, #1
    970e:	213d      	movs	r1, #61	; 0x3d
    9710:	bbf7      	cbnz	r7, 9790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc0>
    9712:	782a      	ldrb	r2, [r5, #0]
    9714:	2a02      	cmp	r2, #2
    9716:	d006      	beq.n	9726 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd56>
    9718:	2a01      	cmp	r2, #1
    971a:	d006      	beq.n	972a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd5a>
    971c:	b1c6      	cbz	r6, 9750 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd80>
    971e:	06f2      	lsls	r2, r6, #27
    9720:	d507      	bpl.n	9732 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd62>
    9722:	211e      	movs	r1, #30
    9724:	e043      	b.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    9726:	2116      	movs	r1, #22
    9728:	e041      	b.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    972a:	6869      	ldr	r1, [r5, #4]
    972c:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    9730:	e03d      	b.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    9732:	0732      	lsls	r2, r6, #28
    9734:	d43b      	bmi.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    9736:	07b1      	lsls	r1, r6, #30
    9738:	d001      	beq.n	973e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd6e>
    973a:	212a      	movs	r1, #42	; 0x2a
    973c:	e037      	b.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    973e:	06b1      	lsls	r1, r6, #26
    9740:	d404      	bmi.n	974c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7c>
    9742:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    9746:	2036      	movs	r0, #54	; 0x36
    9748:	f7fa ff10 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    974c:	2123      	movs	r1, #35	; 0x23
    974e:	e02e      	b.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    9750:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    9754:	b129      	cbz	r1, 9762 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd92>
    9756:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    9758:	1c4a      	adds	r2, r1, #1
    975a:	87a2      	strh	r2, [r4, #60]	; 0x3c
    975c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    975e:	4291      	cmp	r1, r2
    9760:	d21d      	bcs.n	979e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdce>
    9762:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    9766:	b139      	cbz	r1, 9778 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda8>
    9768:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    976c:	1c4a      	adds	r2, r1, #1
    976e:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    9772:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    9774:	4291      	cmp	r1, r2
    9776:	d212      	bcs.n	979e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdce>
    9778:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    977a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    977c:	428a      	cmp	r2, r1
    977e:	d30b      	bcc.n	9798 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc8>
    9780:	686b      	ldr	r3, [r5, #4]
    9782:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    9786:	f88d 3000 	strb.w	r3, [sp]
    978a:	9b00      	ldr	r3, [sp, #0]
    978c:	9300      	str	r3, [sp, #0]
    978e:	e000      	b.n	9792 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc2>
    9790:	e00d      	b.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    9792:	f89d 3000 	ldrb.w	r3, [sp]
    9796:	b913      	cbnz	r3, 979e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdce>
    9798:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    979a:	429a      	cmp	r2, r3
    979c:	d301      	bcc.n	97a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdd2>
    979e:	2122      	movs	r1, #34	; 0x22
    97a0:	e005      	b.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    97a2:	7c62      	ldrb	r2, [r4, #17]
    97a4:	b1f2      	cbz	r2, 97e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe14>
    97a6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    97a8:	428a      	cmp	r2, r1
    97aa:	d304      	bcc.n	97b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xde6>
    97ac:	2108      	movs	r1, #8
    97ae:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    97b2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    97b6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    97ba:	f88d 0000 	strb.w	r0, [sp]
    97be:	9800      	ldr	r0, [sp, #0]
    97c0:	9000      	str	r0, [sp, #0]
    97c2:	f89d 0000 	ldrb.w	r0, [sp]
    97c6:	b1d8      	cbz	r0, 9800 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe30>
    97c8:	2000      	movs	r0, #0
    97ca:	7360      	strb	r0, [r4, #13]
    97cc:	73a0      	strb	r0, [r4, #14]
    97ce:	7460      	strb	r0, [r4, #17]
    97d0:	2102      	movs	r1, #2
    97d2:	6868      	ldr	r0, [r5, #4]
    97d4:	f7fe f986 	bl	7ae4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    97d8:	6868      	ldr	r0, [r5, #4]
    97da:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    97de:	2901      	cmp	r1, #1
    97e0:	d005      	beq.n	97ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    97e2:	e009      	b.n	97f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    97e4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    97e6:	2906      	cmp	r1, #6
    97e8:	d3e5      	bcc.n	97b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xde6>
    97ea:	213e      	movs	r1, #62	; 0x3e
    97ec:	e7df      	b.n	97ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdde>
    97ee:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    97f2:	7801      	ldrb	r1, [r0, #0]
    97f4:	1e49      	subs	r1, r1, #1
    97f6:	7001      	strb	r1, [r0, #0]
    97f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    97fc:	f7fc bdda 	b.w	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9800:	6868      	ldr	r0, [r5, #4]
    9802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9806:	2100      	movs	r1, #0
    9808:	f7fe b96c 	b.w	7ae4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    980c:	2000011c 	.word	0x2000011c
    9810:	4a19      	ldr	r2, [pc, #100]	; (9878 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xea8>)
    9812:	2901      	cmp	r1, #1
    9814:	6852      	ldr	r2, [r2, #4]
    9816:	d010      	beq.n	983a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6a>
    9818:	2100      	movs	r1, #0
    981a:	b1c8      	cbz	r0, 9850 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe80>
    981c:	2801      	cmp	r0, #1
    981e:	d022      	beq.n	9866 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe96>
    9820:	2803      	cmp	r0, #3
    9822:	d109      	bne.n	9838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    9824:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    9828:	2813      	cmp	r0, #19
    982a:	d005      	beq.n	9838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    982c:	2816      	cmp	r0, #22
    982e:	d003      	beq.n	9838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    9830:	2818      	cmp	r0, #24
    9832:	d001      	beq.n	9838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    9834:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    9838:	4770      	bx	lr
    983a:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    983e:	2801      	cmp	r0, #1
    9840:	d0fa      	beq.n	9838 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe68>
    9842:	bf00      	nop
    9844:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    9848:	7801      	ldrb	r1, [r0, #0]
    984a:	1e49      	subs	r1, r1, #1
    984c:	7001      	strb	r1, [r0, #0]
    984e:	4770      	bx	lr
    9850:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    9854:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    9858:	1ac0      	subs	r0, r0, r3
    985a:	b200      	sxth	r0, r0
    985c:	2800      	cmp	r0, #0
    985e:	dbf6      	blt.n	984e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe7e>
    9860:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    9864:	4770      	bx	lr
    9866:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    986a:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    986e:	1a40      	subs	r0, r0, r1
    9870:	b200      	sxth	r0, r0
    9872:	2800      	cmp	r0, #0
    9874:	dae6      	bge.n	9844 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe74>
    9876:	4770      	bx	lr
    9878:	2000011c 	.word	0x2000011c

0000987c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    987c:	b510      	push	{r4, lr}
    987e:	6941      	ldr	r1, [r0, #20]
    9880:	b119      	cbz	r1, 988a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    9882:	6842      	ldr	r2, [r0, #4]
    9884:	684b      	ldr	r3, [r1, #4]
    9886:	429a      	cmp	r2, r3
    9888:	d203      	bcs.n	9892 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    988a:	21c1      	movs	r1, #193	; 0xc1
    988c:	2037      	movs	r0, #55	; 0x37
    988e:	f7fa fe6d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9892:	6902      	ldr	r2, [r0, #16]
    9894:	610a      	str	r2, [r1, #16]
    9896:	68c3      	ldr	r3, [r0, #12]
    9898:	60cb      	str	r3, [r1, #12]
    989a:	b10a      	cbz	r2, 98a0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    989c:	60d1      	str	r1, [r2, #12]
    989e:	e001      	b.n	98a4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    98a0:	4a06      	ldr	r2, [pc, #24]	; (98bc <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    98a2:	6011      	str	r1, [r2, #0]
    98a4:	68ca      	ldr	r2, [r1, #12]
    98a6:	b132      	cbz	r2, 98b6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    98a8:	6111      	str	r1, [r2, #16]
    98aa:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    98ae:	4410      	add	r0, r2
    98b0:	684a      	ldr	r2, [r1, #4]
    98b2:	1a80      	subs	r0, r0, r2
    98b4:	e000      	b.n	98b8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    98b6:	2000      	movs	r0, #0
    98b8:	6088      	str	r0, [r1, #8]
    98ba:	bd10      	pop	{r4, pc}
    98bc:	200001f4 	.word	0x200001f4

000098c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    98c0:	b510      	push	{r4, lr}
    98c2:	2200      	movs	r2, #0
    98c4:	6101      	str	r1, [r0, #16]
    98c6:	b189      	cbz	r1, 98ec <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    98c8:	68cb      	ldr	r3, [r1, #12]
    98ca:	60c8      	str	r0, [r1, #12]
    98cc:	60c3      	str	r3, [r0, #12]
    98ce:	b103      	cbz	r3, 98d2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    98d0:	6118      	str	r0, [r3, #16]
    98d2:	6901      	ldr	r1, [r0, #16]
    98d4:	6082      	str	r2, [r0, #8]
    98d6:	2900      	cmp	r1, #0
    98d8:	d00f      	beq.n	98fa <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    98da:	688b      	ldr	r3, [r1, #8]
    98dc:	b163      	cbz	r3, 98f8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    98de:	6844      	ldr	r4, [r0, #4]
    98e0:	42a3      	cmp	r3, r4
    98e2:	d207      	bcs.n	98f4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    98e4:	212a      	movs	r1, #42	; 0x2a
    98e6:	2037      	movs	r0, #55	; 0x37
    98e8:	f7fa fe40 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ec:	4903      	ldr	r1, [pc, #12]	; (98fc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    98ee:	60c2      	str	r2, [r0, #12]
    98f0:	6008      	str	r0, [r1, #0]
    98f2:	e7ee      	b.n	98d2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    98f4:	1b1b      	subs	r3, r3, r4
    98f6:	6083      	str	r3, [r0, #8]
    98f8:	608a      	str	r2, [r1, #8]
    98fa:	bd10      	pop	{r4, pc}
    98fc:	200001f4 	.word	0x200001f4

00009900 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    9900:	6901      	ldr	r1, [r0, #16]
    9902:	b149      	cbz	r1, 9918 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    9904:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    9908:	441a      	add	r2, r3
    990a:	688b      	ldr	r3, [r1, #8]
    990c:	441a      	add	r2, r3
    990e:	608a      	str	r2, [r1, #8]
    9910:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    9914:	60d1      	str	r1, [r2, #12]
    9916:	e002      	b.n	991e <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    9918:	4a06      	ldr	r2, [pc, #24]	; (9934 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    991a:	68c1      	ldr	r1, [r0, #12]
    991c:	6011      	str	r1, [r2, #0]
    991e:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    9922:	b109      	cbz	r1, 9928 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    9924:	6108      	str	r0, [r1, #16]
    9926:	4770      	bx	lr
    9928:	2800      	cmp	r0, #0
    992a:	d0fc      	beq.n	9926 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    992c:	2100      	movs	r1, #0
    992e:	6081      	str	r1, [r0, #8]
    9930:	4770      	bx	lr
    9932:	0000      	.short	0x0000
    9934:	200001f4 	.word	0x200001f4

00009938 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    9938:	b510      	push	{r4, lr}
    993a:	4604      	mov	r4, r0
    993c:	490a      	ldr	r1, [pc, #40]	; (9968 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    993e:	2000      	movs	r0, #0
    9940:	4602      	mov	r2, r0
    9942:	6809      	ldr	r1, [r1, #0]
    9944:	1e43      	subs	r3, r0, #1
    9946:	e008      	b.n	995a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    9948:	688a      	ldr	r2, [r1, #8]
    994a:	42a2      	cmp	r2, r4
    994c:	d303      	bcc.n	9956 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    994e:	429a      	cmp	r2, r3
    9950:	d201      	bcs.n	9956 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    9952:	4613      	mov	r3, r2
    9954:	4608      	mov	r0, r1
    9956:	460a      	mov	r2, r1
    9958:	68c9      	ldr	r1, [r1, #12]
    995a:	2900      	cmp	r1, #0
    995c:	d1f4      	bne.n	9948 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    995e:	2800      	cmp	r0, #0
    9960:	d100      	bne.n	9964 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    9962:	4610      	mov	r0, r2
    9964:	bd10      	pop	{r4, pc}
    9966:	0000      	.short	0x0000
    9968:	200001f4 	.word	0x200001f4

0000996c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    996c:	4801      	ldr	r0, [pc, #4]	; (9974 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    996e:	6800      	ldr	r0, [r0, #0]
    9970:	4770      	bx	lr
    9972:	0000      	.short	0x0000
    9974:	200001f4 	.word	0x200001f4

00009978 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    9978:	4804      	ldr	r0, [pc, #16]	; (998c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    997a:	6801      	ldr	r1, [r0, #0]
    997c:	2000      	movs	r0, #0
    997e:	e001      	b.n	9984 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    9980:	4608      	mov	r0, r1
    9982:	68c9      	ldr	r1, [r1, #12]
    9984:	2900      	cmp	r1, #0
    9986:	d1fb      	bne.n	9980 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    9988:	4770      	bx	lr
    998a:	0000      	.short	0x0000
    998c:	200001f4 	.word	0x200001f4

00009990 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    9990:	4801      	ldr	r0, [pc, #4]	; (9998 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    9992:	2100      	movs	r1, #0
    9994:	6001      	str	r1, [r0, #0]
    9996:	4770      	bx	lr
    9998:	200001f4 	.word	0x200001f4

0000999c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    999c:	4903      	ldr	r1, [pc, #12]	; (99ac <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    999e:	2000      	movs	r0, #0
    99a0:	6809      	ldr	r1, [r1, #0]
    99a2:	2900      	cmp	r1, #0
    99a4:	d000      	beq.n	99a8 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    99a6:	200c      	movs	r0, #12
    99a8:	4770      	bx	lr
    99aa:	0000      	.short	0x0000
    99ac:	200001f4 	.word	0x200001f4

000099b0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    99b0:	4903      	ldr	r1, [pc, #12]	; (99c0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    99b2:	884a      	ldrh	r2, [r1, #2]
    99b4:	8002      	strh	r2, [r0, #0]
    99b6:	7809      	ldrb	r1, [r1, #0]
    99b8:	7081      	strb	r1, [r0, #2]
    99ba:	2000      	movs	r0, #0
    99bc:	4770      	bx	lr
    99be:	0000      	.short	0x0000
    99c0:	20000dfc 	.word	0x20000dfc

000099c4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    99c4:	7801      	ldrb	r1, [r0, #0]
    99c6:	b171      	cbz	r1, 99e6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    99c8:	7841      	ldrb	r1, [r0, #1]
    99ca:	b161      	cbz	r1, 99e6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    99cc:	8841      	ldrh	r1, [r0, #2]
    99ce:	291b      	cmp	r1, #27
    99d0:	d309      	bcc.n	99e6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    99d2:	8881      	ldrh	r1, [r0, #4]
    99d4:	291b      	cmp	r1, #27
    99d6:	d306      	bcc.n	99e6 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    99d8:	4904      	ldr	r1, [pc, #16]	; (99ec <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    99da:	6802      	ldr	r2, [r0, #0]
    99dc:	600a      	str	r2, [r1, #0]
    99de:	8880      	ldrh	r0, [r0, #4]
    99e0:	8088      	strh	r0, [r1, #4]
    99e2:	2000      	movs	r0, #0
    99e4:	4770      	bx	lr
    99e6:	2012      	movs	r0, #18
    99e8:	4770      	bx	lr
    99ea:	0000      	.short	0x0000
    99ec:	20000dfc 	.word	0x20000dfc

000099f0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    99f0:	6800      	ldr	r0, [r0, #0]
    99f2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    99f6:	4288      	cmp	r0, r1
    99f8:	d303      	bcc.n	9a02 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    99fa:	4903      	ldr	r1, [pc, #12]	; (9a08 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    99fc:	6088      	str	r0, [r1, #8]
    99fe:	2000      	movs	r0, #0
    9a00:	4770      	bx	lr
    9a02:	2012      	movs	r0, #18
    9a04:	4770      	bx	lr
    9a06:	0000      	.short	0x0000
    9a08:	20000dfc 	.word	0x20000dfc

00009a0c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    9a0c:	b510      	push	{r4, lr}
    9a0e:	b086      	sub	sp, #24
    9a10:	4604      	mov	r4, r0
    9a12:	f003 fe38 	bl	d686 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x12a>
    9a16:	2800      	cmp	r0, #0
    9a18:	d103      	bne.n	9a22 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    9a1a:	f003 ff55 	bl	d8c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
    9a1e:	b110      	cbz	r0, 9a26 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    9a20:	200c      	movs	r0, #12
    9a22:	b006      	add	sp, #24
    9a24:	bd10      	pop	{r4, pc}
    9a26:	2102      	movs	r1, #2
    9a28:	f104 0010 	add.w	r0, r4, #16
    9a2c:	f000 f8ee 	bl	9c0c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    9a30:	78a0      	ldrb	r0, [r4, #2]
    9a32:	f88d 0008 	strb.w	r0, [sp, #8]
    9a36:	78a0      	ldrb	r0, [r4, #2]
    9a38:	f88d 0000 	strb.w	r0, [sp]
    9a3c:	7860      	ldrb	r0, [r4, #1]
    9a3e:	f88d 0003 	strb.w	r0, [sp, #3]
    9a42:	7820      	ldrb	r0, [r4, #0]
    9a44:	f88d 0002 	strb.w	r0, [sp, #2]
    9a48:	7e20      	ldrb	r0, [r4, #24]
    9a4a:	f88d 0004 	strb.w	r0, [sp, #4]
    9a4e:	78a0      	ldrb	r0, [r4, #2]
    9a50:	07c0      	lsls	r0, r0, #31
    9a52:	d00b      	beq.n	9a6c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    9a54:	78e0      	ldrb	r0, [r4, #3]
    9a56:	2801      	cmp	r0, #1
    9a58:	d011      	beq.n	9a7e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    9a5a:	b190      	cbz	r0, 9a82 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    9a5c:	f05f 0000 	movs.w	r0, #0
    9a60:	f88d 0001 	strb.w	r0, [sp, #1]
    9a64:	68a0      	ldr	r0, [r4, #8]
    9a66:	9003      	str	r0, [sp, #12]
    9a68:	6920      	ldr	r0, [r4, #16]
    9a6a:	9004      	str	r0, [sp, #16]
    9a6c:	a802      	add	r0, sp, #8
    9a6e:	f7fe f9b1 	bl	7dd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    9a72:	2800      	cmp	r0, #0
    9a74:	d1d5      	bne.n	9a22 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    9a76:	4668      	mov	r0, sp
    9a78:	f7fc ff98 	bl	69ac <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    9a7c:	e7d1      	b.n	9a22 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    9a7e:	2002      	movs	r0, #2
    9a80:	e7ee      	b.n	9a60 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    9a82:	2001      	movs	r0, #1
    9a84:	e7ec      	b.n	9a60 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

00009a88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9a88:	4a03      	ldr	r2, [pc, #12]	; (9a98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9a8a:	e9d2 1200 	ldrd	r1, r2, [r2]
    9a8e:	6001      	str	r1, [r0, #0]
    9a90:	6042      	str	r2, [r0, #4]
    9a92:	2000      	movs	r0, #0
    9a94:	4770      	bx	lr
    9a96:	0000      	.short	0x0000
    9a98:	00009c60 	.word	0x00009c60

00009a9c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    9a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9aa0:	b086      	sub	sp, #24
    9aa2:	468a      	mov	sl, r1
    9aa4:	4606      	mov	r6, r0
    9aa6:	8800      	ldrh	r0, [r0, #0]
    9aa8:	a901      	add	r1, sp, #4
    9aaa:	f002 fc7f 	bl	c3ac <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9aae:	2800      	cmp	r0, #0
    9ab0:	d139      	bne.n	9b26 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    9ab2:	9802      	ldr	r0, [sp, #8]
    9ab4:	f04f 0801 	mov.w	r8, #1
    9ab8:	4601      	mov	r1, r0
    9aba:	4689      	mov	r9, r1
    9abc:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    9ac0:	f88d 1000 	strb.w	r1, [sp]
    9ac4:	9900      	ldr	r1, [sp, #0]
    9ac6:	9100      	str	r1, [sp, #0]
    9ac8:	f89d 5000 	ldrb.w	r5, [sp]
    9acc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9ad0:	3078      	adds	r0, #120	; 0x78
    9ad2:	2921      	cmp	r1, #33	; 0x21
    9ad4:	d100      	bne.n	9ad8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    9ad6:	b13d      	cbz	r5, 9ae8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    9ad8:	2400      	movs	r4, #0
    9ada:	304e      	adds	r0, #78	; 0x4e
    9adc:	2108      	movs	r1, #8
    9ade:	4607      	mov	r7, r0
    9ae0:	f003 fb85 	bl	d1ee <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    9ae4:	b110      	cbz	r0, 9aec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    9ae6:	e007      	b.n	9af8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    9ae8:	2401      	movs	r4, #1
    9aea:	e7f6      	b.n	9ada <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    9aec:	210b      	movs	r1, #11
    9aee:	4638      	mov	r0, r7
    9af0:	f003 fb7d 	bl	d1ee <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    9af4:	b900      	cbnz	r0, 9af8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    9af6:	b1ac      	cbz	r4, 9b24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    9af8:	a804      	add	r0, sp, #16
    9afa:	9000      	str	r0, [sp, #0]
    9afc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b00:	ab03      	add	r3, sp, #12
    9b02:	4632      	mov	r2, r6
    9b04:	4649      	mov	r1, r9
    9b06:	f003 fe7f 	bl	d808 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    9b0a:	0007      	movs	r7, r0
    9b0c:	d10b      	bne.n	9b26 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    9b0e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b12:	9c02      	ldr	r4, [sp, #8]
    9b14:	b150      	cbz	r0, 9b2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    9b16:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    9b1a:	bf00      	nop
    9b1c:	f884 8001 	strb.w	r8, [r4, #1]
    9b20:	b94d      	cbnz	r5, 9b36 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    9b22:	e006      	b.n	9b32 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    9b24:	201a      	movs	r0, #26
    9b26:	b006      	add	sp, #24
    9b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b2c:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    9b30:	e7f4      	b.n	9b1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    9b32:	7820      	ldrb	r0, [r4, #0]
    9b34:	b108      	cbz	r0, 9b3a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    9b36:	273a      	movs	r7, #58	; 0x3a
    9b38:	e012      	b.n	9b60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    9b3a:	f884 a000 	strb.w	sl, [r4]
    9b3e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    9b42:	70a0      	strb	r0, [r4, #2]
    9b44:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9b48:	70e1      	strb	r1, [r4, #3]
    9b4a:	f88d 0000 	strb.w	r0, [sp]
    9b4e:	f88d 1001 	strb.w	r1, [sp, #1]
    9b52:	88b0      	ldrh	r0, [r6, #4]
    9b54:	f8ad 0002 	strh.w	r0, [sp, #2]
    9b58:	4669      	mov	r1, sp
    9b5a:	4648      	mov	r0, r9
    9b5c:	f002 fcef 	bl	c53e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    9b60:	2000      	movs	r0, #0
    9b62:	7060      	strb	r0, [r4, #1]
    9b64:	4638      	mov	r0, r7
    9b66:	e7de      	b.n	9b26 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

00009b68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9b68:	b510      	push	{r4, lr}
    9b6a:	f002 fb47 	bl	c1fc <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9b6e:	f7fc f823 	bl	5bb8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9b72:	f000 f8db 	bl	9d2c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9b76:	f002 fedd 	bl	c934 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9b7a:	4810      	ldr	r0, [pc, #64]	; (9bbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    9b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9b80:	4b0f      	ldr	r3, [pc, #60]	; (9bc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    9b82:	8281      	strh	r1, [r0, #20]
    9b84:	2100      	movs	r1, #0
    9b86:	7581      	strb	r1, [r0, #22]
    9b88:	8301      	strh	r1, [r0, #24]
    9b8a:	221b      	movs	r2, #27
    9b8c:	801a      	strh	r2, [r3, #0]
    9b8e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9b92:	805c      	strh	r4, [r3, #2]
    9b94:	809a      	strh	r2, [r3, #4]
    9b96:	80dc      	strh	r4, [r3, #6]
    9b98:	7381      	strb	r1, [r0, #14]
    9b9a:	73c1      	strb	r1, [r0, #15]
    9b9c:	2303      	movs	r3, #3
    9b9e:	7003      	strb	r3, [r0, #0]
    9ba0:	2302      	movs	r3, #2
    9ba2:	7043      	strb	r3, [r0, #1]
    9ba4:	8042      	strh	r2, [r0, #2]
    9ba6:	8082      	strh	r2, [r0, #4]
    9ba8:	f640 62a6 	movw	r2, #3750	; 0xea6
    9bac:	6082      	str	r2, [r0, #8]
    9bae:	4a04      	ldr	r2, [pc, #16]	; (9bc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    9bb0:	1f92      	subs	r2, r2, #6
    9bb2:	7011      	strb	r1, [r2, #0]
    9bb4:	7481      	strb	r1, [r0, #18]
    9bb6:	7301      	strb	r1, [r0, #12]
    9bb8:	bd10      	pop	{r4, pc}
    9bba:	0000      	.short	0x0000
    9bbc:	20000dfc 	.word	0x20000dfc
    9bc0:	20000206 	.word	0x20000206
    9bc4:	4904      	ldr	r1, [pc, #16]	; (9bd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x70>)
    9bc6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    9bca:	4288      	cmp	r0, r1
    9bcc:	d301      	bcc.n	9bd2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6a>
    9bce:	2000      	movs	r0, #0
    9bd0:	4770      	bx	lr
    9bd2:	2001      	movs	r0, #1
    9bd4:	4770      	bx	lr
    9bd6:	0000      	.short	0x0000
    9bd8:	0270f3cc 	.word	0x0270f3cc
    9bdc:	4904      	ldr	r1, [pc, #16]	; (9bf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>)
    9bde:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    9be2:	4288      	cmp	r0, r1
    9be4:	d301      	bcc.n	9bea <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    9be6:	2000      	movs	r0, #0
    9be8:	4770      	bx	lr
    9bea:	2001      	movs	r0, #1
    9bec:	4770      	bx	lr
    9bee:	0000      	.short	0x0000
    9bf0:	009c363d 	.word	0x009c363d
    9bf4:	4904      	ldr	r1, [pc, #16]	; (9c08 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa0>)
    9bf6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    9bfa:	4288      	cmp	r0, r1
    9bfc:	d301      	bcc.n	9c02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    9bfe:	2000      	movs	r0, #0
    9c00:	4770      	bx	lr
    9c02:	2001      	movs	r0, #1
    9c04:	4770      	bx	lr
    9c06:	0000      	.short	0x0000
    9c08:	009c363d 	.word	0x009c363d
    9c0c:	b530      	push	{r4, r5, lr}
    9c0e:	2200      	movs	r2, #0
    9c10:	4d07      	ldr	r5, [pc, #28]	; (9c30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>)
    9c12:	e009      	b.n	9c28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc0>
    9c14:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    9c18:	462b      	mov	r3, r5
    9c1a:	429c      	cmp	r4, r3
    9c1c:	d800      	bhi.n	9c20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9c1e:	4623      	mov	r3, r4
    9c20:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    9c24:	1c52      	adds	r2, r2, #1
    9c26:	b2d2      	uxtb	r2, r2
    9c28:	428a      	cmp	r2, r1
    9c2a:	d3f3      	bcc.n	9c14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xac>
    9c2c:	bd30      	pop	{r4, r5, pc}
    9c2e:	0000      	.short	0x0000
    9c30:	00f42400 	.word	0x00f42400
    9c34:	4a09      	ldr	r2, [pc, #36]	; (9c5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>)
    9c36:	4290      	cmp	r0, r2
    9c38:	d80b      	bhi.n	9c52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    9c3a:	2901      	cmp	r1, #1
    9c3c:	d002      	beq.n	9c44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
    9c3e:	2904      	cmp	r1, #4
    9c40:	d003      	beq.n	9c4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9c42:	e008      	b.n	9c56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
    9c44:	f240 7153 	movw	r1, #1875	; 0x753
    9c48:	e001      	b.n	9c4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    9c4a:	f640 11c4 	movw	r1, #2500	; 0x9c4
    9c4e:	4288      	cmp	r0, r1
    9c50:	d201      	bcs.n	9c56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
    9c52:	2000      	movs	r0, #0
    9c54:	4770      	bx	lr
    9c56:	2001      	movs	r0, #1
    9c58:	4770      	bx	lr
    9c5a:	0000      	.short	0x0000
    9c5c:	0270fd8f 	.word	0x0270fd8f
    9c60:	0b12fe0b 	.word	0x0b12fe0b
    9c64:	12fe0059 	.word	0x12fe0059
    9c68:	05060708 	.word	0x05060708
    9c6c:	00020304 	.word	0x00020304
    9c70:	f0f4f8fc 	.word	0xf0f4f8fc
    9c74:	0304d8ec 	.word	0x0304d8ec
    9c78:	f4f8fc00 	.word	0xf4f8fc00
    9c7c:	00d8ecf0 	.word	0x00d8ecf0

00009c80 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    9c80:	b510      	push	{r4, lr}
    9c82:	460c      	mov	r4, r1
    9c84:	f7fc fb90 	bl	63a8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    9c88:	4805      	ldr	r0, [pc, #20]	; (9ca0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    9c8a:	6004      	str	r4, [r0, #0]
    9c8c:	6840      	ldr	r0, [r0, #4]
    9c8e:	f003 febc 	bl	da0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    9c92:	f003 fc61 	bl	d558 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    9c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c9a:	f7fc bd4b 	b.w	6734 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    9c9e:	0000      	.short	0x0000
    9ca0:	20000210 	.word	0x20000210

00009ca4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    9ca4:	b510      	push	{r4, lr}
    9ca6:	4c07      	ldr	r4, [pc, #28]	; (9cc4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    9ca8:	68a0      	ldr	r0, [r4, #8]
    9caa:	f003 feae 	bl	da0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    9cae:	68e0      	ldr	r0, [r4, #12]
    9cb0:	f003 feab 	bl	da0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    9cb4:	f002 faa2 	bl	c1fc <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9cb8:	f7fb ff7e 	bl	5bb8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cc0:	f7ff bf52 	b.w	9b68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    9cc4:	20000210 	.word	0x20000210

00009cc8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    9cc8:	b500      	push	{lr}
    9cca:	4905      	ldr	r1, [pc, #20]	; (9ce0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    9ccc:	4805      	ldr	r0, [pc, #20]	; (9ce4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    9cce:	f003 fe8f 	bl	d9f0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    9cd2:	4804      	ldr	r0, [pc, #16]	; (9ce4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    9cd4:	4904      	ldr	r1, [pc, #16]	; (9ce8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    9cd6:	1d00      	adds	r0, r0, #4
    9cd8:	f85d eb04 	ldr.w	lr, [sp], #4
    9cdc:	f003 be88 	b.w	d9f0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    9ce0:	20000220 	.word	0x20000220
    9ce4:	20000214 	.word	0x20000214
    9ce8:	20000228 	.word	0x20000228
    9cec:	b510      	push	{r4, lr}
    9cee:	f7fc fde9 	bl	68c4 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    9cf2:	f7ff fe4d 	bl	9990 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    9cf6:	f7fd ffb1 	bl	7c5c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    9cfa:	4803      	ldr	r0, [pc, #12]	; (9d08 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x40>)
    9cfc:	f7fc fdcc 	bl	6898 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    9d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d04:	f7fc bb5c 	b.w	63c0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    9d08:	2000117d 	.word	0x2000117d

00009d0c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    9d0c:	4801      	ldr	r0, [pc, #4]	; (9d14 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    9d0e:	6800      	ldr	r0, [r0, #0]
    9d10:	4770      	bx	lr
    9d12:	0000      	.short	0x0000
    9d14:	20000230 	.word	0x20000230

00009d18 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    9d18:	4803      	ldr	r0, [pc, #12]	; (9d28 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    9d1a:	8800      	ldrh	r0, [r0, #0]
    9d1c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9d20:	0040      	lsls	r0, r0, #1
    9d22:	1c40      	adds	r0, r0, #1
    9d24:	4770      	bx	lr
    9d26:	0000      	.short	0x0000
    9d28:	20000230 	.word	0x20000230

00009d2c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    9d2c:	b510      	push	{r4, lr}
    9d2e:	f7fa f863 	bl	3df8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    9d32:	2200      	movs	r2, #0
    9d34:	4b08      	ldr	r3, [pc, #32]	; (9d58 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    9d36:	4611      	mov	r1, r2
    9d38:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    9d3c:	4284      	cmp	r4, r0
    9d3e:	d303      	bcc.n	9d48 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    9d40:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9d44:	7882      	ldrb	r2, [r0, #2]
    9d46:	e003      	b.n	9d50 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    9d48:	1c49      	adds	r1, r1, #1
    9d4a:	b2c9      	uxtb	r1, r1
    9d4c:	290c      	cmp	r1, #12
    9d4e:	d3f3      	bcc.n	9d38 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    9d50:	4802      	ldr	r0, [pc, #8]	; (9d5c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    9d52:	7002      	strb	r2, [r0, #0]
    9d54:	bd10      	pop	{r4, pc}
    9d56:	0000      	.short	0x0000
    9d58:	0000da3a 	.word	0x0000da3a
    9d5c:	20000285 	.word	0x20000285

00009d60 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    9d60:	4801      	ldr	r0, [pc, #4]	; (9d68 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    9d62:	7800      	ldrb	r0, [r0, #0]
    9d64:	4770      	bx	lr
    9d66:	0000      	.short	0x0000
    9d68:	20000285 	.word	0x20000285

00009d6c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    9d6c:	b570      	push	{r4, r5, r6, lr}
    9d6e:	4605      	mov	r5, r0
    9d70:	4616      	mov	r6, r2
    9d72:	460c      	mov	r4, r1
    9d74:	2002      	movs	r0, #2
    9d76:	f000 f9f9 	bl	a16c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    9d7a:	4906      	ldr	r1, [pc, #24]	; (9d94 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    9d7c:	2001      	movs	r0, #1
    9d7e:	1ef6      	subs	r6, r6, #3
    9d80:	7008      	strb	r0, [r1, #0]
    9d82:	4805      	ldr	r0, [pc, #20]	; (9d98 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    9d84:	6006      	str	r6, [r0, #0]
    9d86:	4804      	ldr	r0, [pc, #16]	; (9d98 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    9d88:	3808      	subs	r0, #8
    9d8a:	6005      	str	r5, [r0, #0]
    9d8c:	1f00      	subs	r0, r0, #4
    9d8e:	6004      	str	r4, [r0, #0]
    9d90:	bd70      	pop	{r4, r5, r6, pc}
    9d92:	0000      	.short	0x0000
    9d94:	20000286 	.word	0x20000286
    9d98:	4000f510 	.word	0x4000f510

00009d9c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    9d9c:	b510      	push	{r4, lr}
    9d9e:	4c0c      	ldr	r4, [pc, #48]	; (9dd0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    9da0:	7820      	ldrb	r0, [r4, #0]
    9da2:	b180      	cbz	r0, 9dc6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    9da4:	490b      	ldr	r1, [pc, #44]	; (9dd4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    9da6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    9daa:	6008      	str	r0, [r1, #0]
    9dac:	f000 f86a 	bl	9e84 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    9db0:	2100      	movs	r1, #0
    9db2:	b120      	cbz	r0, 9dbe <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    9db4:	2001      	movs	r0, #1
    9db6:	7060      	strb	r0, [r4, #1]
    9db8:	4807      	ldr	r0, [pc, #28]	; (9dd8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    9dba:	6800      	ldr	r0, [r0, #0]
    9dbc:	e001      	b.n	9dc2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    9dbe:	7061      	strb	r1, [r4, #1]
    9dc0:	2010      	movs	r0, #16
    9dc2:	70a0      	strb	r0, [r4, #2]
    9dc4:	7021      	strb	r1, [r4, #0]
    9dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9dca:	2000      	movs	r0, #0
    9dcc:	f000 b9ce 	b.w	a16c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    9dd0:	20000286 	.word	0x20000286
    9dd4:	4001f508 	.word	0x4001f508
    9dd8:	4000f400 	.word	0x4000f400

00009ddc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    9ddc:	b510      	push	{r4, lr}
    9dde:	2002      	movs	r0, #2
    9de0:	f000 f9c4 	bl	a16c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    9de4:	4904      	ldr	r1, [pc, #16]	; (9df8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    9de6:	2001      	movs	r0, #1
    9de8:	7008      	strb	r0, [r1, #0]
    9dea:	f000 f859 	bl	9ea0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    9dee:	4903      	ldr	r1, [pc, #12]	; (9dfc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    9df0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    9df4:	6008      	str	r0, [r1, #0]
    9df6:	bd10      	pop	{r4, pc}
    9df8:	20000286 	.word	0x20000286
    9dfc:	4001f504 	.word	0x4001f504

00009e00 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    9e00:	4803      	ldr	r0, [pc, #12]	; (9e10 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    9e02:	2100      	movs	r1, #0
    9e04:	7001      	strb	r1, [r0, #0]
    9e06:	7041      	strb	r1, [r0, #1]
    9e08:	2110      	movs	r1, #16
    9e0a:	7081      	strb	r1, [r0, #2]
    9e0c:	4770      	bx	lr
    9e0e:	0000      	.short	0x0000
    9e10:	20000286 	.word	0x20000286

00009e14 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    9e14:	4807      	ldr	r0, [pc, #28]	; (9e34 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    9e16:	b510      	push	{r4, lr}
    9e18:	7801      	ldrb	r1, [r0, #0]
    9e1a:	b141      	cbz	r1, 9e2e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    9e1c:	f000 f832 	bl	9e84 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    9e20:	b118      	cbz	r0, 9e2a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    9e22:	4805      	ldr	r0, [pc, #20]	; (9e38 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    9e24:	6800      	ldr	r0, [r0, #0]
    9e26:	b2c0      	uxtb	r0, r0
    9e28:	bd10      	pop	{r4, pc}
    9e2a:	2010      	movs	r0, #16
    9e2c:	bd10      	pop	{r4, pc}
    9e2e:	7880      	ldrb	r0, [r0, #2]
    9e30:	bd10      	pop	{r4, pc}
    9e32:	0000      	.short	0x0000
    9e34:	20000286 	.word	0x20000286
    9e38:	4000f400 	.word	0x4000f400

00009e3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    9e3c:	4808      	ldr	r0, [pc, #32]	; (9e60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    9e3e:	b510      	push	{r4, lr}
    9e40:	7801      	ldrb	r1, [r0, #0]
    9e42:	b159      	cbz	r1, 9e5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    9e44:	4807      	ldr	r0, [pc, #28]	; (9e64 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    9e46:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    9e4a:	b128      	cbz	r0, 9e58 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    9e4c:	f000 f80c 	bl	9e68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    9e50:	2800      	cmp	r0, #0
    9e52:	d000      	beq.n	9e56 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    9e54:	2001      	movs	r0, #1
    9e56:	bd10      	pop	{r4, pc}
    9e58:	2002      	movs	r0, #2
    9e5a:	bd10      	pop	{r4, pc}
    9e5c:	7840      	ldrb	r0, [r0, #1]
    9e5e:	bd10      	pop	{r4, pc}
    9e60:	20000286 	.word	0x20000286
    9e64:	4000f000 	.word	0x4000f000
    9e68:	4805      	ldr	r0, [pc, #20]	; (9e80 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    9e6a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    9e6e:	b111      	cbz	r1, 9e76 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    9e70:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    9e74:	b108      	cbz	r0, 9e7a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    9e76:	2000      	movs	r0, #0
    9e78:	4770      	bx	lr
    9e7a:	2001      	movs	r0, #1
    9e7c:	4770      	bx	lr
    9e7e:	0000      	.short	0x0000
    9e80:	4000f000 	.word	0x4000f000
    9e84:	4805      	ldr	r0, [pc, #20]	; (9e9c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    9e86:	b510      	push	{r4, lr}
    9e88:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    9e8c:	b120      	cbz	r0, 9e98 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    9e8e:	f7ff ffeb 	bl	9e68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    9e92:	b108      	cbz	r0, 9e98 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    9e94:	2001      	movs	r0, #1
    9e96:	bd10      	pop	{r4, pc}
    9e98:	2000      	movs	r0, #0
    9e9a:	bd10      	pop	{r4, pc}
    9e9c:	4000f000 	.word	0x4000f000
    9ea0:	4804      	ldr	r0, [pc, #16]	; (9eb4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    9ea2:	2100      	movs	r1, #0
    9ea4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    9ea8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    9eac:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    9eb0:	4770      	bx	lr
    9eb2:	0000      	.short	0x0000
    9eb4:	4000f000 	.word	0x4000f000

00009eb8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    9eb8:	4a08      	ldr	r2, [pc, #32]	; (9edc <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    9eba:	b510      	push	{r4, lr}
    9ebc:	e9c2 0102 	strd	r0, r1, [r2, #8]
    9ec0:	4907      	ldr	r1, [pc, #28]	; (9ee0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    9ec2:	4610      	mov	r0, r2
    9ec4:	f7fa f9ee 	bl	42a4 <mpsl_fem_lna_configuration_set>
    9ec8:	2800      	cmp	r0, #0
    9eca:	d005      	beq.n	9ed8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    9ecc:	1c40      	adds	r0, r0, #1
    9ece:	d003      	beq.n	9ed8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    9ed0:	217d      	movs	r1, #125	; 0x7d
    9ed2:	2040      	movs	r0, #64	; 0x40
    9ed4:	f7fa fb4a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ed8:	bd10      	pop	{r4, pc}
    9eda:	0000      	.short	0x0000
    9edc:	20000234 	.word	0x20000234
    9ee0:	00009f10 	.word	0x00009f10

00009ee4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    9ee4:	4a08      	ldr	r2, [pc, #32]	; (9f08 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    9ee6:	b510      	push	{r4, lr}
    9ee8:	e9c2 0102 	strd	r0, r1, [r2, #8]
    9eec:	4907      	ldr	r1, [pc, #28]	; (9f0c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    9eee:	4610      	mov	r0, r2
    9ef0:	f7fa f9e4 	bl	42bc <mpsl_fem_pa_configuration_set>
    9ef4:	2800      	cmp	r0, #0
    9ef6:	d005      	beq.n	9f04 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    9ef8:	1c40      	adds	r0, r0, #1
    9efa:	d003      	beq.n	9f04 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    9efc:	2172      	movs	r1, #114	; 0x72
    9efe:	2040      	movs	r0, #64	; 0x40
    9f00:	f7fa fb34 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f04:	bd10      	pop	{r4, pc}
    9f06:	0000      	.short	0x0000
    9f08:	20000234 	.word	0x20000234
    9f0c:	00009f10 	.word	0x00009f10
    9f10:	00000001 	.word	0x00000001
    9f14:	40001110 	.word	0x40001110
	...

00009f28 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    9f28:	4a07      	ldr	r2, [pc, #28]	; (9f48 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    9f2a:	b510      	push	{r4, lr}
    9f2c:	7853      	ldrb	r3, [r2, #1]
    9f2e:	b133      	cbz	r3, 9f3e <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    9f30:	4b06      	ldr	r3, [pc, #24]	; (9f4c <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    9f32:	6019      	str	r1, [r3, #0]
    9f34:	1d19      	adds	r1, r3, #4
    9f36:	6008      	str	r0, [r1, #0]
    9f38:	2001      	movs	r0, #1
    9f3a:	7090      	strb	r0, [r2, #2]
    9f3c:	bd10      	pop	{r4, pc}
    9f3e:	21ba      	movs	r1, #186	; 0xba
    9f40:	203c      	movs	r0, #60	; 0x3c
    9f42:	f7fa fb13 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f46:	0000      	.short	0x0000
    9f48:	20000289 	.word	0x20000289
    9f4c:	4000f50c 	.word	0x4000f50c

00009f50 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    9f50:	4809      	ldr	r0, [pc, #36]	; (9f78 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    9f52:	b510      	push	{r4, lr}
    9f54:	7801      	ldrb	r1, [r0, #0]
    9f56:	b151      	cbz	r1, 9f6e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    9f58:	7880      	ldrb	r0, [r0, #2]
    9f5a:	b140      	cbz	r0, 9f6e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    9f5c:	4907      	ldr	r1, [pc, #28]	; (9f7c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    9f5e:	2000      	movs	r0, #0
    9f60:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    9f64:	4906      	ldr	r1, [pc, #24]	; (9f80 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    9f66:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    9f6a:	6008      	str	r0, [r1, #0]
    9f6c:	bd10      	pop	{r4, pc}
    9f6e:	21e1      	movs	r1, #225	; 0xe1
    9f70:	203c      	movs	r0, #60	; 0x3c
    9f72:	f7fa fafb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f76:	0000      	.short	0x0000
    9f78:	20000289 	.word	0x20000289
    9f7c:	4000f000 	.word	0x4000f000
    9f80:	4001f504 	.word	0x4001f504

00009f84 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    9f84:	b570      	push	{r4, r5, r6, lr}
    9f86:	4c0b      	ldr	r4, [pc, #44]	; (9fb4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    9f88:	2500      	movs	r5, #0
    9f8a:	7820      	ldrb	r0, [r4, #0]
    9f8c:	b158      	cbz	r0, 9fa6 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    9f8e:	f000 f8e5 	bl	a15c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    9f92:	4809      	ldr	r0, [pc, #36]	; (9fb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    9f94:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    9f98:	b118      	cbz	r0, 9fa2 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    9f9a:	4808      	ldr	r0, [pc, #32]	; (9fbc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    9f9c:	6800      	ldr	r0, [r0, #0]
    9f9e:	70e0      	strb	r0, [r4, #3]
    9fa0:	e000      	b.n	9fa4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    9fa2:	70e5      	strb	r5, [r4, #3]
    9fa4:	7025      	strb	r5, [r4, #0]
    9fa6:	2000      	movs	r0, #0
    9fa8:	f000 f8e0 	bl	a16c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    9fac:	7065      	strb	r5, [r4, #1]
    9fae:	70a5      	strb	r5, [r4, #2]
    9fb0:	bd70      	pop	{r4, r5, r6, pc}
    9fb2:	0000      	.short	0x0000
    9fb4:	20000289 	.word	0x20000289
    9fb8:	4000f000 	.word	0x4000f000
    9fbc:	4000f400 	.word	0x4000f400

00009fc0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    9fc0:	480d      	ldr	r0, [pc, #52]	; (9ff8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    9fc2:	b510      	push	{r4, lr}
    9fc4:	7801      	ldrb	r1, [r0, #0]
    9fc6:	b191      	cbz	r1, 9fee <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    9fc8:	7880      	ldrb	r0, [r0, #2]
    9fca:	b180      	cbz	r0, 9fee <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    9fcc:	490b      	ldr	r1, [pc, #44]	; (9ffc <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    9fce:	2000      	movs	r0, #0
    9fd0:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    9fd4:	4a0a      	ldr	r2, [pc, #40]	; (a000 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    9fd6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    9fda:	6010      	str	r0, [r2, #0]
    9fdc:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    9fe0:	2a01      	cmp	r2, #1
    9fe2:	d103      	bne.n	9fec <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    9fe4:	604a      	str	r2, [r1, #4]
    9fe6:	4906      	ldr	r1, [pc, #24]	; (a000 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    9fe8:	1d09      	adds	r1, r1, #4
    9fea:	6008      	str	r0, [r1, #0]
    9fec:	bd10      	pop	{r4, pc}
    9fee:	21d1      	movs	r1, #209	; 0xd1
    9ff0:	203c      	movs	r0, #60	; 0x3c
    9ff2:	f7fa fabb 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ff6:	0000      	.short	0x0000
    9ff8:	20000289 	.word	0x20000289
    9ffc:	4000f000 	.word	0x4000f000
    a000:	4001f504 	.word	0x4001f504

0000a004 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a004:	4803      	ldr	r0, [pc, #12]	; (a014 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    a006:	2100      	movs	r1, #0
    a008:	7001      	strb	r1, [r0, #0]
    a00a:	7041      	strb	r1, [r0, #1]
    a00c:	7081      	strb	r1, [r0, #2]
    a00e:	70c1      	strb	r1, [r0, #3]
    a010:	4770      	bx	lr
    a012:	0000      	.short	0x0000
    a014:	20000289 	.word	0x20000289

0000a018 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a01c:	4605      	mov	r5, r0
    a01e:	461c      	mov	r4, r3
    a020:	4690      	mov	r8, r2
    a022:	460f      	mov	r7, r1
    a024:	2001      	movs	r0, #1
    a026:	f000 f8a1 	bl	a16c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a02a:	4e12      	ldr	r6, [pc, #72]	; (a074 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    a02c:	4812      	ldr	r0, [pc, #72]	; (a078 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a02e:	7134      	strb	r4, [r6, #4]
    a030:	6007      	str	r7, [r0, #0]
    a032:	4911      	ldr	r1, [pc, #68]	; (a078 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a034:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    a038:	1f09      	subs	r1, r1, #4
    a03a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a03e:	6008      	str	r0, [r1, #0]
    a040:	f001 f8de 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a044:	b938      	cbnz	r0, a056 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    a046:	480c      	ldr	r0, [pc, #48]	; (a078 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a048:	3010      	adds	r0, #16
    a04a:	6801      	ldr	r1, [r0, #0]
    a04c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a050:	ea41 0108 	orr.w	r1, r1, r8
    a054:	6001      	str	r1, [r0, #0]
    a056:	f000 f881 	bl	a15c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a05a:	b93d      	cbnz	r5, a06c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    a05c:	4808      	ldr	r0, [pc, #32]	; (a080 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    a05e:	4a07      	ldr	r2, [pc, #28]	; (a07c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a060:	4906      	ldr	r1, [pc, #24]	; (a07c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a062:	3afc      	subs	r2, #252	; 0xfc
    a064:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    a068:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    a06c:	2001      	movs	r0, #1
    a06e:	7070      	strb	r0, [r6, #1]
    a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a074:	20000289 	.word	0x20000289
    a078:	4000f508 	.word	0x4000f508
    a07c:	4000f100 	.word	0x4000f100
    a080:	4001f088 	.word	0x4001f088

0000a084 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    a084:	4808      	ldr	r0, [pc, #32]	; (a0a8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    a086:	b510      	push	{r4, lr}
    a088:	7841      	ldrb	r1, [r0, #1]
    a08a:	b149      	cbz	r1, a0a0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    a08c:	2101      	movs	r1, #1
    a08e:	7001      	strb	r1, [r0, #0]
    a090:	4806      	ldr	r0, [pc, #24]	; (a0ac <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    a092:	2200      	movs	r2, #0
    a094:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    a098:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    a09c:	6001      	str	r1, [r0, #0]
    a09e:	bd10      	pop	{r4, pc}
    a0a0:	21c5      	movs	r1, #197	; 0xc5
    a0a2:	203c      	movs	r0, #60	; 0x3c
    a0a4:	f7fa fa62 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0a8:	20000289 	.word	0x20000289
    a0ac:	4000f000 	.word	0x4000f000

0000a0b0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a0b0:	4806      	ldr	r0, [pc, #24]	; (a0cc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a0b2:	7801      	ldrb	r1, [r0, #0]
    a0b4:	b141      	cbz	r1, a0c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a0b6:	4806      	ldr	r0, [pc, #24]	; (a0d0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a0b8:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a0bc:	2800      	cmp	r0, #0
    a0be:	d002      	beq.n	a0c6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a0c0:	4804      	ldr	r0, [pc, #16]	; (a0d4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a0c2:	6800      	ldr	r0, [r0, #0]
    a0c4:	b2c0      	uxtb	r0, r0
    a0c6:	4770      	bx	lr
    a0c8:	78c0      	ldrb	r0, [r0, #3]
    a0ca:	4770      	bx	lr
    a0cc:	20000289 	.word	0x20000289
    a0d0:	4000f000 	.word	0x4000f000
    a0d4:	4000f400 	.word	0x4000f400

0000a0d8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a0d8:	4901      	ldr	r1, [pc, #4]	; (a0e0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a0da:	2001      	movs	r0, #1
    a0dc:	6088      	str	r0, [r1, #8]
    a0de:	4770      	bx	lr
    a0e0:	4000f000 	.word	0x4000f000

0000a0e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a0e8:	2800      	cmp	r0, #0
    a0ea:	d02e      	beq.n	a14a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a0ec:	4818      	ldr	r0, [pc, #96]	; (a150 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a0ee:	7800      	ldrb	r0, [r0, #0]
    a0f0:	b1b0      	cbz	r0, a120 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a0f2:	4d18      	ldr	r5, [pc, #96]	; (a154 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a0f4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a0f8:	2800      	cmp	r0, #0
    a0fa:	d126      	bne.n	a14a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a0fc:	2702      	movs	r7, #2
    a0fe:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a102:	4c15      	ldr	r4, [pc, #84]	; (a158 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a104:	6820      	ldr	r0, [r4, #0]
    a106:	43c0      	mvns	r0, r0
    a108:	f340 1600 	sbfx	r6, r0, #4, #1
    a10c:	6820      	ldr	r0, [r4, #0]
    a10e:	f040 0010 	orr.w	r0, r0, #16
    a112:	6020      	str	r0, [r4, #0]
    a114:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a118:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a11c:	1c76      	adds	r6, r6, #1
    a11e:	e009      	b.n	a134 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    a120:	f240 1153 	movw	r1, #339	; 0x153
    a124:	203c      	movs	r0, #60	; 0x3c
    a126:	f7fa fa21 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a12a:	bf00      	nop
    a12c:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a130:	f7fa f862 	bl	41f8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a134:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a138:	2800      	cmp	r0, #0
    a13a:	d0f7      	beq.n	a12c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    a13c:	b91e      	cbnz	r6, a146 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a13e:	6820      	ldr	r0, [r4, #0]
    a140:	f020 0010 	bic.w	r0, r0, #16
    a144:	6020      	str	r0, [r4, #0]
    a146:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a14e:	0000      	.short	0x0000
    a150:	20000289 	.word	0x20000289
    a154:	4000f000 	.word	0x4000f000
    a158:	e000ed10 	.word	0xe000ed10
    a15c:	4902      	ldr	r1, [pc, #8]	; (a168 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    a15e:	4801      	ldr	r0, [pc, #4]	; (a164 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    a160:	6008      	str	r0, [r1, #0]
    a162:	4770      	bx	lr
    a164:	02020000 	.word	0x02020000
    a168:	4001f508 	.word	0x4001f508

0000a16c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a16c:	b510      	push	{r4, lr}
    a16e:	4604      	mov	r4, r0
    a170:	f000 f822 	bl	a1b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a174:	2c00      	cmp	r4, #0
    a176:	d017      	beq.n	a1a8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a178:	4a0c      	ldr	r2, [pc, #48]	; (a1ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a17a:	480c      	ldr	r0, [pc, #48]	; (a1ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a17c:	490c      	ldr	r1, [pc, #48]	; (a1b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a17e:	3214      	adds	r2, #20
    a180:	4b0c      	ldr	r3, [pc, #48]	; (a1b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a182:	2c01      	cmp	r4, #1
    a184:	d005      	beq.n	a192 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a186:	2c02      	cmp	r4, #2
    a188:	d008      	beq.n	a19c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a18a:	2183      	movs	r1, #131	; 0x83
    a18c:	203d      	movs	r0, #61	; 0x3d
    a18e:	f7fa f9ed 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a192:	2402      	movs	r4, #2
    a194:	6004      	str	r4, [r0, #0]
    a196:	6011      	str	r1, [r2, #0]
    a198:	0620      	lsls	r0, r4, #24
    a19a:	e004      	b.n	a1a6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a19c:	2403      	movs	r4, #3
    a19e:	6004      	str	r4, [r0, #0]
    a1a0:	6011      	str	r1, [r2, #0]
    a1a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a1a6:	6018      	str	r0, [r3, #0]
    a1a8:	bd10      	pop	{r4, pc}
    a1aa:	0000      	.short	0x0000
    a1ac:	4000f500 	.word	0x4000f500
    a1b0:	2000127f 	.word	0x2000127f
    a1b4:	4001f504 	.word	0x4001f504
    a1b8:	4804      	ldr	r0, [pc, #16]	; (a1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a1ba:	2100      	movs	r1, #0
    a1bc:	6001      	str	r1, [r0, #0]
    a1be:	6001      	str	r1, [r0, #0]
    a1c0:	4903      	ldr	r1, [pc, #12]	; (a1d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a1c2:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a1c6:	6008      	str	r0, [r1, #0]
    a1c8:	4770      	bx	lr
    a1ca:	0000      	.short	0x0000
    a1cc:	4000f500 	.word	0x4000f500
    a1d0:	4001f508 	.word	0x4001f508

0000a1d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a1d4:	4805      	ldr	r0, [pc, #20]	; (a1ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a1d6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a1da:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a1de:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a1e2:	2100      	movs	r1, #0
    a1e4:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    a1e8:	4770      	bx	lr
    a1ea:	0000      	.short	0x0000
    a1ec:	40001000 	.word	0x40001000

0000a1f0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a1f0:	4904      	ldr	r1, [pc, #16]	; (a204 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a1f2:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    a1f6:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    a1fa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a1fe:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    a202:	4770      	bx	lr
    a204:	40001000 	.word	0x40001000

0000a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a20a:	4c23      	ldr	r4, [pc, #140]	; (a298 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    a20c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a210:	f010 0f10 	tst.w	r0, #16
    a214:	d001      	beq.n	a21a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    a216:	2701      	movs	r7, #1
    a218:	e000      	b.n	a21c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    a21a:	2700      	movs	r7, #0
    a21c:	2010      	movs	r0, #16
    a21e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    a222:	2002      	movs	r0, #2
    a224:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a228:	481c      	ldr	r0, [pc, #112]	; (a29c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    a22a:	2500      	movs	r5, #0
    a22c:	491d      	ldr	r1, [pc, #116]	; (a2a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    a22e:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    a232:	481b      	ldr	r0, [pc, #108]	; (a2a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    a234:	6008      	str	r0, [r1, #0]
    a236:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    a23a:	f44f 7688 	mov.w	r6, #272	; 0x110
    a23e:	f010 0fff 	tst.w	r0, #255	; 0xff
    a242:	d018      	beq.n	a276 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a244:	20ff      	movs	r0, #255	; 0xff
    a246:	f88d 0000 	strb.w	r0, [sp]
    a24a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a24e:	2001      	movs	r0, #1
    a250:	6120      	str	r0, [r4, #16]
    a252:	e004      	b.n	a25e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    a254:	f89d 0000 	ldrb.w	r0, [sp]
    a258:	1e40      	subs	r0, r0, #1
    a25a:	f88d 0000 	strb.w	r0, [sp]
    a25e:	f89d 0000 	ldrb.w	r0, [sp]
    a262:	b128      	cbz	r0, a270 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    a264:	4631      	mov	r1, r6
    a266:	4620      	mov	r0, r4
    a268:	f003 fcb6 	bl	dbd8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    a26c:	2800      	cmp	r0, #0
    a26e:	d0f1      	beq.n	a254 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    a270:	f89d 0000 	ldrb.w	r0, [sp]
    a274:	b158      	cbz	r0, a28e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    a276:	f000 fc91 	bl	ab9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    a27a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a27e:	f000 fe0d 	bl	ae9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    a282:	2f00      	cmp	r7, #0
    a284:	d002      	beq.n	a28c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    a286:	2010      	movs	r0, #16
    a288:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    a28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a28e:	f240 718f 	movw	r1, #1935	; 0x78f
    a292:	203e      	movs	r0, #62	; 0x3e
    a294:	f7fa f96a 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a298:	40001000 	.word	0x40001000
    a29c:	20000f3c 	.word	0x20000f3c
    a2a0:	0c0e0000 	.word	0x0c0e0000
    a2a4:	4001f508 	.word	0x4001f508

0000a2a8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2ac:	4d20      	ldr	r5, [pc, #128]	; (a330 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    a2ae:	4607      	mov	r7, r0
    a2b0:	4688      	mov	r8, r1
    a2b2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    a2b6:	07c1      	lsls	r1, r0, #31
    a2b8:	d018      	beq.n	a2ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    a2ba:	4a1e      	ldr	r2, [pc, #120]	; (a334 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    a2bc:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    a2c0:	6011      	str	r1, [r2, #0]
    a2c2:	4c1d      	ldr	r4, [pc, #116]	; (a338 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    a2c4:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    a2c8:	f041 0101 	orr.w	r1, r1, #1
    a2cc:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    a2d0:	f040 0002 	orr.w	r0, r0, #2
    a2d4:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    a2d8:	4640      	mov	r0, r8
    a2da:	f000 fe43 	bl	af64 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a2de:	f000 fbfb 	bl	aad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a2e2:	2601      	movs	r6, #1
    a2e4:	b13f      	cbz	r7, a2f6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    a2e6:	2f01      	cmp	r7, #1
    a2e8:	d00e      	beq.n	a308 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    a2ea:	e016      	b.n	a31a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a2ec:	f240 611a 	movw	r1, #1562	; 0x61a
    a2f0:	203e      	movs	r0, #62	; 0x3e
    a2f2:	f7fa f93b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2f6:	4640      	mov	r0, r8
    a2f8:	f000 fc1e 	bl	ab38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    a2fc:	4640      	mov	r0, r8
    a2fe:	f000 fbcf 	bl	aaa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a302:	726e      	strb	r6, [r5, #9]
    a304:	6026      	str	r6, [r4, #0]
    a306:	e008      	b.n	a31a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a308:	f000 fc3e 	bl	ab88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a30c:	f000 fd8c 	bl	ae28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a310:	2002      	movs	r0, #2
    a312:	7268      	strb	r0, [r5, #9]
    a314:	f000 fcb0 	bl	ac78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    a318:	6066      	str	r6, [r4, #4]
    a31a:	4808      	ldr	r0, [pc, #32]	; (a33c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a31c:	64c6      	str	r6, [r0, #76]	; 0x4c
    a31e:	4807      	ldr	r0, [pc, #28]	; (a33c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a320:	300c      	adds	r0, #12
    a322:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    a326:	4638      	mov	r0, r7
    a328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a32c:	f003 bc3c 	b.w	dba8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a330:	20000f3c 	.word	0x20000f3c
    a334:	4001f504 	.word	0x4001f504
    a338:	40001000 	.word	0x40001000
    a33c:	40008000 	.word	0x40008000

0000a340 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    a340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a344:	4d35      	ldr	r5, [pc, #212]	; (a41c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    a346:	4606      	mov	r6, r0
    a348:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a34c:	4689      	mov	r9, r1
    a34e:	6028      	str	r0, [r5, #0]
    a350:	4c33      	ldr	r4, [pc, #204]	; (a420 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    a352:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    a356:	f040 0002 	orr.w	r0, r0, #2
    a35a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    a35e:	4608      	mov	r0, r1
    a360:	f000 fe00 	bl	af64 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a364:	f000 fbb8 	bl	aad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a368:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a424 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    a36c:	2700      	movs	r7, #0
    a36e:	b116      	cbz	r6, a376 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    a370:	2e01      	cmp	r6, #1
    a372:	d027      	beq.n	a3c4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    a374:	e03f      	b.n	a3f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a376:	4648      	mov	r0, r9
    a378:	f000 fbde 	bl	ab38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    a37c:	79e0      	ldrb	r0, [r4, #7]
    a37e:	2801      	cmp	r0, #1
    a380:	d105      	bne.n	a38e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    a382:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a386:	f041 0108 	orr.w	r1, r1, #8
    a38a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a38e:	4648      	mov	r0, r9
    a390:	f000 fb86 	bl	aaa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a394:	2001      	movs	r0, #1
    a396:	7260      	strb	r0, [r4, #9]
    a398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a39a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    a39e:	62a0      	str	r0, [r4, #40]	; 0x28
    a3a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a3a4:	6028      	str	r0, [r5, #0]
    a3a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a3aa:	f1b9 0f02 	cmp.w	r9, #2
    a3ae:	d007      	beq.n	a3c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    a3b0:	f640 0034 	movw	r0, #2100	; 0x834
    a3b4:	f649 72ec 	movw	r2, #40940	; 0x9fec
    a3b8:	4410      	add	r0, r2
    a3ba:	fbb0 f7f1 	udiv	r7, r0, r1
    a3be:	e01a      	b.n	a3f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a3c0:	4608      	mov	r0, r1
    a3c2:	e7f7      	b.n	a3b4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    a3c4:	f000 fbe0 	bl	ab88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a3c8:	f000 fd2e 	bl	ae28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a3cc:	79e0      	ldrb	r0, [r4, #7]
    a3ce:	2801      	cmp	r0, #1
    a3d0:	d105      	bne.n	a3de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    a3d2:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a3d6:	f041 0104 	orr.w	r1, r1, #4
    a3da:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a3de:	2002      	movs	r0, #2
    a3e0:	7260      	strb	r0, [r4, #9]
    a3e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a3e4:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    a3e8:	62a0      	str	r0, [r4, #40]	; 0x28
    a3ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    a3ee:	6028      	str	r0, [r5, #0]
    a3f0:	2729      	movs	r7, #41	; 0x29
    a3f2:	f000 fc41 	bl	ac78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    a3f6:	f000 fc2b 	bl	ac50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    a3fa:	f000 fddb 	bl	afb4 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    a3fe:	6800      	ldr	r0, [r0, #0]
    a400:	2801      	cmp	r0, #1
    a402:	d006      	beq.n	a412 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    a404:	2100      	movs	r1, #0
    a406:	4630      	mov	r0, r6
    a408:	f003 fbce 	bl	dba8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a40c:	4638      	mov	r0, r7
    a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a412:	f7ff fef9 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a416:	2000      	movs	r0, #0
    a418:	e7f9      	b.n	a40e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    a41a:	0000      	.short	0x0000
    a41c:	4001f504 	.word	0x4001f504
    a420:	20000f3c 	.word	0x20000f3c
    a424:	40001000 	.word	0x40001000

0000a428 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    a428:	b510      	push	{r4, lr}
    a42a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    a42c:	4901      	ldr	r1, [pc, #4]	; (a434 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    a42e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    a432:	bd10      	pop	{r4, pc}
    a434:	20000f2c 	.word	0x20000f2c

0000a438 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    a438:	b570      	push	{r4, r5, r6, lr}
    a43a:	4c11      	ldr	r4, [pc, #68]	; (a480 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    a43c:	4606      	mov	r6, r0
    a43e:	2002      	movs	r0, #2
    a440:	7320      	strb	r0, [r4, #12]
    a442:	2596      	movs	r5, #150	; 0x96
    a444:	f000 f85e 	bl	a504 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    a448:	4602      	mov	r2, r0
    a44a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    a44e:	f894 1020 	ldrb.w	r1, [r4, #32]
    a452:	2801      	cmp	r0, #1
    a454:	d00f      	beq.n	a476 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    a456:	4628      	mov	r0, r5
    a458:	f003 fbc8 	bl	dbec <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    a45c:	6120      	str	r0, [r4, #16]
    a45e:	4809      	ldr	r0, [pc, #36]	; (a484 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    a460:	2100      	movs	r1, #0
    a462:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    a466:	6921      	ldr	r1, [r4, #16]
    a468:	69e0      	ldr	r0, [r4, #28]
    a46a:	4408      	add	r0, r1
    a46c:	4905      	ldr	r1, [pc, #20]	; (a484 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    a46e:	1d09      	adds	r1, r1, #4
    a470:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    a474:	bd70      	pop	{r4, r5, r6, pc}
    a476:	4633      	mov	r3, r6
    a478:	4628      	mov	r0, r5
    a47a:	f003 fbd3 	bl	dc24 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    a47e:	e7ed      	b.n	a45c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    a480:	20000f3c 	.word	0x20000f3c
    a484:	40008000 	.word	0x40008000

0000a488 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    a488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a48c:	2238      	movs	r2, #56	; 0x38
    a48e:	2100      	movs	r1, #0
    a490:	4813      	ldr	r0, [pc, #76]	; (a4e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    a492:	f000 ff81 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a496:	f000 fd01 	bl	ae9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    a49a:	f000 fe86 	bl	b1aa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    a49e:	4d11      	ldr	r5, [pc, #68]	; (a4e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a4a0:	4e10      	ldr	r6, [pc, #64]	; (a4e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a4a2:	2400      	movs	r4, #0
    a4a4:	4f0f      	ldr	r7, [pc, #60]	; (a4e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a4a6:	3508      	adds	r5, #8
    a4a8:	3610      	adds	r6, #16
    a4aa:	b928      	cbnz	r0, a4b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    a4ac:	f000 fe94 	bl	b1d8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    a4b0:	b910      	cbnz	r0, a4b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    a4b2:	f000 fe9b 	bl	b1ec <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    a4b6:	b108      	cbz	r0, a4bc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    a4b8:	2224      	movs	r2, #36	; 0x24
    a4ba:	e006      	b.n	a4ca <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    a4bc:	f000 fed6 	bl	b26c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    a4c0:	b910      	cbnz	r0, a4c8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    a4c2:	f000 fec9 	bl	b258 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    a4c6:	b140      	cbz	r0, a4da <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    a4c8:	2240      	movs	r2, #64	; 0x40
    a4ca:	21ff      	movs	r1, #255	; 0xff
    a4cc:	4638      	mov	r0, r7
    a4ce:	f000 ff63 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a4d2:	602c      	str	r4, [r5, #0]
    a4d4:	6034      	str	r4, [r6, #0]
    a4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4da:	2238      	movs	r2, #56	; 0x38
    a4dc:	e7f5      	b.n	a4ca <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    a4de:	0000      	.short	0x0000
    a4e0:	20000f3c 	.word	0x20000f3c
    a4e4:	40000e00 	.word	0x40000e00

0000a4e8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    a4e8:	4805      	ldr	r0, [pc, #20]	; (a500 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    a4ea:	b510      	push	{r4, lr}
    a4ec:	69c0      	ldr	r0, [r0, #28]
    a4ee:	2800      	cmp	r0, #0
    a4f0:	d104      	bne.n	a4fc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    a4f2:	f240 11fb 	movw	r1, #507	; 0x1fb
    a4f6:	203e      	movs	r0, #62	; 0x3e
    a4f8:	f7fa f838 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4fc:	bd10      	pop	{r4, pc}
    a4fe:	0000      	.short	0x0000
    a500:	20000f3c 	.word	0x20000f3c

0000a504 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    a504:	4814      	ldr	r0, [pc, #80]	; (a558 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    a506:	b510      	push	{r4, lr}
    a508:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    a50c:	7a40      	ldrb	r0, [r0, #9]
    a50e:	b141      	cbz	r1, a522 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    a510:	2902      	cmp	r1, #2
    a512:	d00b      	beq.n	a52c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    a514:	2802      	cmp	r0, #2
    a516:	d009      	beq.n	a52c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    a518:	2901      	cmp	r1, #1
    a51a:	d00b      	beq.n	a534 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    a51c:	2801      	cmp	r0, #1
    a51e:	d009      	beq.n	a534 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    a520:	e016      	b.n	a550 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    a522:	2800      	cmp	r0, #0
    a524:	d1f6      	bne.n	a514 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    a526:	f240 117d 	movw	r1, #381	; 0x17d
    a52a:	e00e      	b.n	a54a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    a52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a530:	f000 bc2a 	b.w	ad88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    a534:	4809      	ldr	r0, [pc, #36]	; (a55c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    a536:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    a53a:	f000 000f 	and.w	r0, r0, #15
    a53e:	2803      	cmp	r0, #3
    a540:	d006      	beq.n	a550 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    a542:	2804      	cmp	r0, #4
    a544:	d006      	beq.n	a554 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    a546:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    a54a:	203e      	movs	r0, #62	; 0x3e
    a54c:	f7fa f80e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a550:	2001      	movs	r0, #1
    a552:	bd10      	pop	{r4, pc}
    a554:	2002      	movs	r0, #2
    a556:	bd10      	pop	{r4, pc}
    a558:	20000f3c 	.word	0x20000f3c
    a55c:	40001000 	.word	0x40001000

0000a560 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    a560:	b510      	push	{r4, lr}
    a562:	f000 fc7d 	bl	ae60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    a566:	f7ff fe4f 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a56a:	f003 fab3 	bl	dad4 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    a56e:	480f      	ldr	r0, [pc, #60]	; (a5ac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    a570:	4a0f      	ldr	r2, [pc, #60]	; (a5b0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    a572:	6a81      	ldr	r1, [r0, #40]	; 0x28
    a574:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    a578:	6011      	str	r1, [r2, #0]
    a57a:	2400      	movs	r4, #0
    a57c:	6284      	str	r4, [r0, #40]	; 0x28
    a57e:	7304      	strb	r4, [r0, #12]
    a580:	61c4      	str	r4, [r0, #28]
    a582:	6184      	str	r4, [r0, #24]
    a584:	f000 fc6c 	bl	ae60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    a588:	480a      	ldr	r0, [pc, #40]	; (a5b4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    a58a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    a58e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    a592:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    a596:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    a59a:	2001      	movs	r0, #1
    a59c:	f003 fad3 	bl	db46 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    a5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5a4:	2001      	movs	r0, #1
    a5a6:	f003 bac1 	b.w	db2c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    a5aa:	0000      	.short	0x0000
    a5ac:	20000f3c 	.word	0x20000f3c
    a5b0:	4001f508 	.word	0x4001f508
    a5b4:	40008000 	.word	0x40008000

0000a5b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    a5b8:	b570      	push	{r4, r5, r6, lr}
    a5ba:	2001      	movs	r0, #1
    a5bc:	f003 fac3 	bl	db46 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    a5c0:	4c37      	ldr	r4, [pc, #220]	; (a6a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    a5c2:	2000      	movs	r0, #0
    a5c4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    a5c8:	2001      	movs	r0, #1
    a5ca:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    a5ce:	f000 fe23 	bl	b218 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    a5d2:	4d34      	ldr	r5, [pc, #208]	; (a6a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    a5d4:	b118      	cbz	r0, a5de <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    a5d6:	6828      	ldr	r0, [r5, #0]
    a5d8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    a5dc:	6028      	str	r0, [r5, #0]
    a5de:	f000 fe0f 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a5e2:	b128      	cbz	r0, a5f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    a5e4:	6828      	ldr	r0, [r5, #0]
    a5e6:	4930      	ldr	r1, [pc, #192]	; (a6a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    a5e8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    a5ec:	4308      	orrs	r0, r1
    a5ee:	6028      	str	r0, [r5, #0]
    a5f0:	f000 fe22 	bl	b238 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    a5f4:	b138      	cbz	r0, a606 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    a5f6:	482b      	ldr	r0, [pc, #172]	; (a6a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    a5f8:	1d00      	adds	r0, r0, #4
    a5fa:	6801      	ldr	r1, [r0, #0]
    a5fc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    a600:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    a604:	6001      	str	r1, [r0, #0]
    a606:	4927      	ldr	r1, [pc, #156]	; (a6a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    a608:	4828      	ldr	r0, [pc, #160]	; (a6ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    a60a:	313c      	adds	r1, #60	; 0x3c
    a60c:	6008      	str	r0, [r1, #0]
    a60e:	f7f9 fe61 	bl	42d4 <mpsl_fem_device_config_254_apply_get>
    a612:	b140      	cbz	r0, a626 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    a614:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a618:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    a61c:	1c41      	adds	r1, r0, #1
    a61e:	d002      	beq.n	a626 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    a620:	4920      	ldr	r1, [pc, #128]	; (a6a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    a622:	3110      	adds	r1, #16
    a624:	6008      	str	r0, [r1, #0]
    a626:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    a62a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    a62c:	1c41      	adds	r1, r0, #1
    a62e:	d004      	beq.n	a63a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    a630:	491f      	ldr	r1, [pc, #124]	; (a6b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    a632:	680a      	ldr	r2, [r1, #0]
    a634:	f360 4217 	bfi	r2, r0, #16, #8
    a638:	600a      	str	r2, [r1, #0]
    a63a:	f240 1103 	movw	r1, #259	; 0x103
    a63e:	f240 605b 	movw	r0, #1627	; 0x65b
    a642:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    a646:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    a64a:	2001      	movs	r0, #1
    a64c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    a650:	f000 fc88 	bl	af64 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a654:	f240 1001 	movw	r0, #257	; 0x101
    a658:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    a65c:	2002      	movs	r0, #2
    a65e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a662:	4915      	ldr	r1, [pc, #84]	; (a6b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    a664:	4813      	ldr	r0, [pc, #76]	; (a6b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    a666:	6008      	str	r0, [r1, #0]
    a668:	4914      	ldr	r1, [pc, #80]	; (a6bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    a66a:	2000      	movs	r0, #0
    a66c:	4d14      	ldr	r5, [pc, #80]	; (a6c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    a66e:	8608      	strh	r0, [r1, #48]	; 0x30
    a670:	3110      	adds	r1, #16
    a672:	61c8      	str	r0, [r1, #28]
    a674:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    a678:	7028      	strb	r0, [r5, #0]
    a67a:	2001      	movs	r0, #1
    a67c:	f003 fa56 	bl	db2c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    a680:	2010      	movs	r0, #16
    a682:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    a686:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    a68a:	2002      	movs	r0, #2
    a68c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    a690:	6868      	ldr	r0, [r5, #4]
    a692:	2800      	cmp	r0, #0
    a694:	d002      	beq.n	a69c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    a696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a69a:	4700      	bx	r0
    a69c:	bd70      	pop	{r4, r5, r6, pc}
    a69e:	0000      	.short	0x0000
    a6a0:	40001000 	.word	0x40001000
    a6a4:	4000173c 	.word	0x4000173c
    a6a8:	80000096 	.word	0x80000096
    a6ac:	8900002c 	.word	0x8900002c
    a6b0:	4000158c 	.word	0x4000158c
    a6b4:	0c0e0000 	.word	0x0c0e0000
    a6b8:	4001f508 	.word	0x4001f508
    a6bc:	20000f2c 	.word	0x20000f2c
    a6c0:	2000024c 	.word	0x2000024c

0000a6c4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    a6c4:	4901      	ldr	r1, [pc, #4]	; (a6cc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    a6c6:	7508      	strb	r0, [r1, #20]
    a6c8:	4770      	bx	lr
    a6ca:	0000      	.short	0x0000
    a6cc:	20000f3c 	.word	0x20000f3c

0000a6d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    a6d0:	4905      	ldr	r1, [pc, #20]	; (a6e8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    a6d2:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    a6d6:	4805      	ldr	r0, [pc, #20]	; (a6ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    a6d8:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    a6dc:	f041 0101 	orr.w	r1, r1, #1
    a6e0:	7001      	strb	r1, [r0, #0]
    a6e2:	f000 ba7b 	b.w	abdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    a6e6:	0000      	.short	0x0000
    a6e8:	40001000 	.word	0x40001000
    a6ec:	20000f3c 	.word	0x20000f3c

0000a6f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    a6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6f4:	4e36      	ldr	r6, [pc, #216]	; (a7d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    a6f6:	4607      	mov	r7, r0
    a6f8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a6fc:	4689      	mov	r9, r1
    a6fe:	4614      	mov	r4, r2
    a700:	6030      	str	r0, [r6, #0]
    a702:	4610      	mov	r0, r2
    a704:	f000 fc2e 	bl	af64 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a708:	f000 f9e6 	bl	aad8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a70c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; a7d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    a710:	4d31      	ldr	r5, [pc, #196]	; (a7d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    a712:	f04f 0801 	mov.w	r8, #1
    a716:	b127      	cbz	r7, a722 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    a718:	2f01      	cmp	r7, #1
    a71a:	d01d      	beq.n	a758 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    a71c:	f240 710f 	movw	r1, #1807	; 0x70f
    a720:	e04c      	b.n	a7bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    a722:	4620      	mov	r0, r4
    a724:	f000 fa08 	bl	ab38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    a728:	4620      	mov	r0, r4
    a72a:	f000 f9b9 	bl	aaa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a72e:	2c02      	cmp	r4, #2
    a730:	d00f      	beq.n	a752 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    a732:	f640 0034 	movw	r0, #2100	; 0x834
    a736:	bf00      	nop
    a738:	f649 51f8 	movw	r1, #40440	; 0x9df8
    a73c:	4401      	add	r1, r0
    a73e:	4648      	mov	r0, r9
    a740:	f000 fbb4 	bl	aeac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    a744:	4604      	mov	r4, r0
    a746:	4650      	mov	r0, sl
    a748:	f000 fb9c 	bl	ae84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    a74c:	f885 8009 	strb.w	r8, [r5, #9]
    a750:	e014      	b.n	a77c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    a752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a756:	e7ef      	b.n	a738 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    a758:	f000 fa16 	bl	ab88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a75c:	f000 fb64 	bl	ae28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a760:	f000 fa8a 	bl	ac78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    a764:	f649 71ba 	movw	r1, #40890	; 0x9fba
    a768:	4648      	mov	r0, r9
    a76a:	f000 fb9f 	bl	aeac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    a76e:	4604      	mov	r4, r0
    a770:	4818      	ldr	r0, [pc, #96]	; (a7d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    a772:	1d00      	adds	r0, r0, #4
    a774:	f000 fb86 	bl	ae84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    a778:	2002      	movs	r0, #2
    a77a:	7268      	strb	r0, [r5, #9]
    a77c:	f8df 905c 	ldr.w	r9, [pc, #92]	; a7dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    a780:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    a784:	4917      	ldr	r1, [pc, #92]	; (a7e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    a786:	4816      	ldr	r0, [pc, #88]	; (a7e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    a788:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    a78c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    a78e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    a792:	62a8      	str	r0, [r5, #40]	; 0x28
    a794:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    a798:	6030      	str	r0, [r6, #0]
    a79a:	2010      	movs	r0, #16
    a79c:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    a7a0:	03c0      	lsls	r0, r0, #15
    a7a2:	6030      	str	r0, [r6, #0]
    a7a4:	f000 fa54 	bl	ac50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    a7a8:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    a7ac:	480b      	ldr	r0, [pc, #44]	; (a7dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    a7ae:	300c      	adds	r0, #12
    a7b0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    a7b4:	42a0      	cmp	r0, r4
    a7b6:	d304      	bcc.n	a7c2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    a7b8:	f240 7136 	movw	r1, #1846	; 0x736
    a7bc:	203e      	movs	r0, #62	; 0x3e
    a7be:	f7f9 fed5 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7c2:	4621      	mov	r1, r4
    a7c4:	4638      	mov	r0, r7
    a7c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a7ca:	f003 b9ed 	b.w	dba8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a7ce:	0000      	.short	0x0000
    a7d0:	4001f504 	.word	0x4001f504
    a7d4:	40001000 	.word	0x40001000
    a7d8:	20000f3c 	.word	0x20000f3c
    a7dc:	40008000 	.word	0x40008000
    a7e0:	40008140 	.word	0x40008140
    a7e4:	4001f098 	.word	0x4001f098

0000a7e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    a7e8:	4b0d      	ldr	r3, [pc, #52]	; (a820 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    a7ea:	b510      	push	{r4, lr}
    a7ec:	71d8      	strb	r0, [r3, #7]
    a7ee:	729a      	strb	r2, [r3, #10]
    a7f0:	b151      	cbz	r1, a808 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    a7f2:	2002      	movs	r0, #2
    a7f4:	7218      	strb	r0, [r3, #8]
    a7f6:	2801      	cmp	r0, #1
    a7f8:	d008      	beq.n	a80c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    a7fa:	2802      	cmp	r0, #2
    a7fc:	d00f      	beq.n	a81e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    a7fe:	f640 1112 	movw	r1, #2322	; 0x912
    a802:	203e      	movs	r0, #62	; 0x3e
    a804:	f7f9 feb2 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a808:	2001      	movs	r0, #1
    a80a:	e7f3      	b.n	a7f4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    a80c:	7a58      	ldrb	r0, [r3, #9]
    a80e:	2802      	cmp	r0, #2
    a810:	d105      	bne.n	a81e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    a812:	f000 f9b9 	bl	ab88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    a816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a81a:	f000 bb05 	b.w	ae28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    a81e:	bd10      	pop	{r4, pc}
    a820:	20000f3c 	.word	0x20000f3c

0000a824 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    a824:	4902      	ldr	r1, [pc, #8]	; (a830 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    a826:	2000      	movs	r0, #0
    a828:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    a82c:	4770      	bx	lr
    a82e:	0000      	.short	0x0000
    a830:	40008000 	.word	0x40008000

0000a834 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    a834:	b538      	push	{r3, r4, r5, lr}
    a836:	4c0b      	ldr	r4, [pc, #44]	; (a864 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    a838:	4605      	mov	r5, r0
    a83a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    a83e:	4620      	mov	r0, r4
    a840:	f003 f9ca 	bl	dbd8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    a844:	2800      	cmp	r0, #0
    a846:	d00c      	beq.n	a862 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    a848:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    a84c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    a850:	4240      	negs	r0, r0
    a852:	7028      	strb	r0, [r5, #0]
    a854:	2000      	movs	r0, #0
    a856:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    a85a:	4803      	ldr	r0, [pc, #12]	; (a868 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    a85c:	6800      	ldr	r0, [r0, #0]
    a85e:	9000      	str	r0, [sp, #0]
    a860:	2001      	movs	r0, #1
    a862:	bd38      	pop	{r3, r4, r5, pc}
    a864:	40001000 	.word	0x40001000
    a868:	4000111c 	.word	0x4000111c

0000a86c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    a86c:	4903      	ldr	r1, [pc, #12]	; (a87c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    a86e:	0e02      	lsrs	r2, r0, #24
    a870:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    a874:	0200      	lsls	r0, r0, #8
    a876:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    a87a:	4770      	bx	lr
    a87c:	40001000 	.word	0x40001000

0000a880 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    a880:	6800      	ldr	r0, [r0, #0]
    a882:	4903      	ldr	r1, [pc, #12]	; (a890 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    a884:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a888:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    a88c:	4770      	bx	lr
    a88e:	0000      	.short	0x0000
    a890:	40001000 	.word	0x40001000

0000a894 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    a894:	b510      	push	{r4, lr}
    a896:	f000 fb41 	bl	af1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    a89a:	4807      	ldr	r0, [pc, #28]	; (a8b8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    a89c:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    a8a0:	b2c0      	uxtb	r0, r0
    a8a2:	2803      	cmp	r0, #3
    a8a4:	d001      	beq.n	a8aa <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    a8a6:	280b      	cmp	r0, #11
    a8a8:	d104      	bne.n	a8b4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    a8aa:	f44f 7121 	mov.w	r1, #644	; 0x284
    a8ae:	203e      	movs	r0, #62	; 0x3e
    a8b0:	f7f9 fe5c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8b4:	bd10      	pop	{r4, pc}
    a8b6:	0000      	.short	0x0000
    a8b8:	40001000 	.word	0x40001000

0000a8bc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    a8bc:	4901      	ldr	r1, [pc, #4]	; (a8c4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    a8be:	7548      	strb	r0, [r1, #21]
    a8c0:	4770      	bx	lr
    a8c2:	0000      	.short	0x0000
    a8c4:	20000f3c 	.word	0x20000f3c

0000a8c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    a8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8cc:	4853      	ldr	r0, [pc, #332]	; (aa1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    a8ce:	f04f 0a01 	mov.w	sl, #1
    a8d2:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    a8d6:	4851      	ldr	r0, [pc, #324]	; (aa1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    a8d8:	300c      	adds	r0, #12
    a8da:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    a8de:	4850      	ldr	r0, [pc, #320]	; (aa20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    a8e0:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    a8e4:	4c4f      	ldr	r4, [pc, #316]	; (aa24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    a8e6:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    a8ea:	f000 f957 	bl	ab9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    a8ee:	494e      	ldr	r1, [pc, #312]	; (aa28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    a8f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a8f2:	6008      	str	r0, [r1, #0]
    a8f4:	f8df 9134 	ldr.w	r9, [pc, #308]	; aa2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    a8f8:	2600      	movs	r6, #0
    a8fa:	62a6      	str	r6, [r4, #40]	; 0x28
    a8fc:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    a900:	f240 121d 	movw	r2, #285	; 0x11d
    a904:	4391      	bics	r1, r2
    a906:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    a90a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    a90e:	f000 f9c5 	bl	ac9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    a912:	4605      	mov	r5, r0
    a914:	4841      	ldr	r0, [pc, #260]	; (aa1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    a916:	3008      	adds	r0, #8
    a918:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    a91c:	61e0      	str	r0, [r4, #28]
    a91e:	f7ff fdf1 	bl	a504 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    a922:	f884 0020 	strb.w	r0, [r4, #32]
    a926:	7a60      	ldrb	r0, [r4, #9]
    a928:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    a92c:	61a6      	str	r6, [r4, #24]
    a92e:	4e40      	ldr	r6, [pc, #256]	; (aa30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    a930:	07a8      	lsls	r0, r5, #30
    a932:	d502      	bpl.n	a93a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    a934:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    a938:	61a0      	str	r0, [r4, #24]
    a93a:	0728      	lsls	r0, r5, #28
    a93c:	d502      	bpl.n	a944 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    a93e:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    a942:	61a0      	str	r0, [r4, #24]
    a944:	f04f 0800 	mov.w	r8, #0
    a948:	4639      	mov	r1, r7
    a94a:	4628      	mov	r0, r5
    a94c:	f000 fa32 	bl	adb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    a950:	b918      	cbnz	r0, a95a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    a952:	f8c9 a010 	str.w	sl, [r9, #16]
    a956:	f04f 0801 	mov.w	r8, #1
    a95a:	4f32      	ldr	r7, [pc, #200]	; (aa24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    a95c:	07e8      	lsls	r0, r5, #31
    a95e:	f1a7 0710 	sub.w	r7, r7, #16
    a962:	d002      	beq.n	a96a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    a964:	6838      	ldr	r0, [r7, #0]
    a966:	4780      	blx	r0
    a968:	e031      	b.n	a9ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    a96a:	07a8      	lsls	r0, r5, #30
    a96c:	d526      	bpl.n	a9bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    a96e:	0768      	lsls	r0, r5, #29
    a970:	d41e      	bmi.n	a9b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a972:	f000 fc61 	bl	b238 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    a976:	b9d8      	cbnz	r0, a9b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a978:	f000 fc4e 	bl	b218 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    a97c:	b9c0      	cbnz	r0, a9b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a97e:	482d      	ldr	r0, [pc, #180]	; (aa34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    a980:	6800      	ldr	r0, [r0, #0]
    a982:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    a986:	f3c0 6100 	ubfx	r1, r0, #24, #1
    a98a:	f000 030f 	and.w	r3, r0, #15
    a98e:	f3c0 1203 	ubfx	r2, r0, #4, #4
    a992:	f3c0 2003 	ubfx	r0, r0, #8, #4
    a996:	b159      	cbz	r1, a9b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a998:	b10b      	cbz	r3, a99e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    a99a:	b102      	cbz	r2, a99e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    a99c:	b940      	cbnz	r0, a9b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a99e:	4825      	ldr	r0, [pc, #148]	; (aa34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    a9a0:	1d00      	adds	r0, r0, #4
    a9a2:	6800      	ldr	r0, [r0, #0]
    a9a4:	b120      	cbz	r0, a9b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a9a6:	f1bc 0f03 	cmp.w	ip, #3
    a9aa:	d201      	bcs.n	a9b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    a9ac:	f045 0504 	orr.w	r5, r5, #4
    a9b0:	f345 0080 	sbfx	r0, r5, #2, #1
    a9b4:	4641      	mov	r1, r8
    a9b6:	1c40      	adds	r0, r0, #1
    a9b8:	687a      	ldr	r2, [r7, #4]
    a9ba:	e007      	b.n	a9cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    a9bc:	f015 0f28 	tst.w	r5, #40	; 0x28
    a9c0:	d005      	beq.n	a9ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    a9c2:	f345 1140 	sbfx	r1, r5, #5, #1
    a9c6:	68ba      	ldr	r2, [r7, #8]
    a9c8:	4640      	mov	r0, r8
    a9ca:	1c49      	adds	r1, r1, #1
    a9cc:	4790      	blx	r2
    a9ce:	06e8      	lsls	r0, r5, #27
    a9d0:	d501      	bpl.n	a9d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    a9d2:	68f8      	ldr	r0, [r7, #12]
    a9d4:	4780      	blx	r0
    a9d6:	7a60      	ldrb	r0, [r4, #9]
    a9d8:	2802      	cmp	r0, #2
    a9da:	d11c      	bne.n	aa16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    a9dc:	7b20      	ldrb	r0, [r4, #12]
    a9de:	2800      	cmp	r0, #0
    a9e0:	d019      	beq.n	aa16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    a9e2:	2802      	cmp	r0, #2
    a9e4:	d004      	beq.n	a9f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    a9e6:	2801      	cmp	r0, #1
    a9e8:	d006      	beq.n	a9f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    a9ea:	f640 21e1 	movw	r1, #2785	; 0xae1
    a9ee:	e009      	b.n	aa04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    a9f0:	6921      	ldr	r1, [r4, #16]
    a9f2:	69e0      	ldr	r0, [r4, #28]
    a9f4:	4408      	add	r0, r1
    a9f6:	e008      	b.n	aa0a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    a9f8:	69e1      	ldr	r1, [r4, #28]
    a9fa:	6920      	ldr	r0, [r4, #16]
    a9fc:	4288      	cmp	r0, r1
    a9fe:	d804      	bhi.n	aa0a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    aa00:	f640 21e2 	movw	r1, #2786	; 0xae2
    aa04:	203e      	movs	r0, #62	; 0x3e
    aa06:	f7f9 fdb1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa0a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    aa0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa12:	f000 ba17 	b.w	ae44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    aa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa1a:	0000      	.short	0x0000
    aa1c:	40008000 	.word	0x40008000
    aa20:	4000b000 	.word	0x4000b000
    aa24:	20000f3c 	.word	0x20000f3c
    aa28:	4001f508 	.word	0x4001f508
    aa2c:	40001000 	.word	0x40001000
    aa30:	40008004 	.word	0x40008004
    aa34:	40001450 	.word	0x40001450

0000aa38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    aa38:	b570      	push	{r4, r5, r6, lr}
    aa3a:	4b15      	ldr	r3, [pc, #84]	; (aa90 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    aa3c:	888c      	ldrh	r4, [r1, #4]
    aa3e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    aa42:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    aa46:	780c      	ldrb	r4, [r1, #0]
    aa48:	f8d1 1001 	ldr.w	r1, [r1, #1]
    aa4c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    aa50:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    aa54:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    aa58:	2101      	movs	r1, #1
    aa5a:	4081      	lsls	r1, r0
    aa5c:	430c      	orrs	r4, r1
    aa5e:	b2e4      	uxtb	r4, r4
    aa60:	b132      	cbz	r2, aa70 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    aa62:	2a01      	cmp	r2, #1
    aa64:	d00a      	beq.n	aa7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    aa66:	f240 41ac 	movw	r1, #1196	; 0x4ac
    aa6a:	203e      	movs	r0, #62	; 0x3e
    aa6c:	f7f9 fd7e 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa70:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    aa74:	f3c0 2007 	ubfx	r0, r0, #8, #8
    aa78:	4388      	bics	r0, r1
    aa7a:	e004      	b.n	aa86 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    aa7c:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    aa80:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    aa84:	b2c0      	uxtb	r0, r0
    aa86:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    aa8a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    aa8e:	bd70      	pop	{r4, r5, r6, pc}
    aa90:	40001000 	.word	0x40001000

0000aa94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    aa94:	4901      	ldr	r1, [pc, #4]	; (aa9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    aa96:	2001      	movs	r0, #1
    aa98:	7008      	strb	r0, [r1, #0]
    aa9a:	4770      	bx	lr
    aa9c:	2000024c 	.word	0x2000024c
    aaa0:	b510      	push	{r4, lr}
    aaa2:	4604      	mov	r4, r0
    aaa4:	f000 fbc8 	bl	b238 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    aaa8:	2800      	cmp	r0, #0
    aaaa:	d00e      	beq.n	aaca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    aaac:	4a09      	ldr	r2, [pc, #36]	; (aad4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    aaae:	6811      	ldr	r1, [r2, #0]
    aab0:	0650      	lsls	r0, r2, #25
    aab2:	2c02      	cmp	r4, #2
    aab4:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    aab8:	d008      	beq.n	aacc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    aaba:	f3c0 2006 	ubfx	r0, r0, #8, #7
    aabe:	bf00      	nop
    aac0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    aac4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    aac8:	6010      	str	r0, [r2, #0]
    aaca:	bd10      	pop	{r4, pc}
    aacc:	f3c0 6006 	ubfx	r0, r0, #24, #7
    aad0:	e7f6      	b.n	aac0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    aad2:	0000      	.short	0x0000
    aad4:	40001588 	.word	0x40001588
    aad8:	4815      	ldr	r0, [pc, #84]	; (ab30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    aada:	7d41      	ldrb	r1, [r0, #21]
    aadc:	2925      	cmp	r1, #37	; 0x25
    aade:	d00a      	beq.n	aaf6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    aae0:	2926      	cmp	r1, #38	; 0x26
    aae2:	d00b      	beq.n	aafc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    aae4:	2927      	cmp	r1, #39	; 0x27
    aae6:	d00c      	beq.n	ab02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    aae8:	7d40      	ldrb	r0, [r0, #21]
    aaea:	0040      	lsls	r0, r0, #1
    aaec:	290a      	cmp	r1, #10
    aaee:	d80b      	bhi.n	ab08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    aaf0:	f600 1064 	addw	r0, r0, #2404	; 0x964
    aaf4:	e00a      	b.n	ab0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    aaf6:	f640 1062 	movw	r0, #2402	; 0x962
    aafa:	e00f      	b.n	ab1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    aafc:	f640 107a 	movw	r0, #2426	; 0x97a
    ab00:	e00c      	b.n	ab1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    ab02:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    ab06:	e009      	b.n	ab1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    ab08:	f600 1066 	addw	r0, r0, #2406	; 0x966
    ab0c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    ab10:	d204      	bcs.n	ab1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    ab12:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    ab16:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    ab1a:	e001      	b.n	ab20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    ab1c:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    ab20:	4a04      	ldr	r2, [pc, #16]	; (ab34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    ab22:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    ab26:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ab2a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    ab2e:	4770      	bx	lr
    ab30:	20000f3c 	.word	0x20000f3c
    ab34:	40001000 	.word	0x40001000
    ab38:	4912      	ldr	r1, [pc, #72]	; (ab84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    ab3a:	b508      	push	{r3, lr}
    ab3c:	f991 2014 	ldrsb.w	r2, [r1, #20]
    ab40:	7d49      	ldrb	r1, [r1, #21]
    ab42:	2801      	cmp	r0, #1
    ab44:	d00a      	beq.n	ab5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    ab46:	2802      	cmp	r0, #2
    ab48:	d00a      	beq.n	ab60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    ab4a:	2804      	cmp	r0, #4
    ab4c:	d00a      	beq.n	ab64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    ab4e:	2808      	cmp	r0, #8
    ab50:	d00a      	beq.n	ab68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ab52:	f240 31ed 	movw	r1, #1005	; 0x3ed
    ab56:	2006      	movs	r0, #6
    ab58:	f7f9 fd08 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab5c:	2000      	movs	r0, #0
    ab5e:	e004      	b.n	ab6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    ab60:	2001      	movs	r0, #1
    ab62:	e002      	b.n	ab6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    ab64:	2003      	movs	r0, #3
    ab66:	e000      	b.n	ab6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    ab68:	2002      	movs	r0, #2
    ab6a:	466b      	mov	r3, sp
    ab6c:	f7f6 f838 	bl	be0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    ab70:	b118      	cbz	r0, ab7a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    ab72:	f240 41de 	movw	r1, #1246	; 0x4de
    ab76:	203e      	movs	r0, #62	; 0x3e
    ab78:	e7ee      	b.n	ab58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    ab7a:	f99d 0000 	ldrsb.w	r0, [sp]
    ab7e:	f000 f9eb 	bl	af58 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    ab82:	bd08      	pop	{r3, pc}
    ab84:	20000f3c 	.word	0x20000f3c
    ab88:	4803      	ldr	r0, [pc, #12]	; (ab98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    ab8a:	7a01      	ldrb	r1, [r0, #8]
    ab8c:	2901      	cmp	r1, #1
    ab8e:	d102      	bne.n	ab96 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    ab90:	7a80      	ldrb	r0, [r0, #10]
    ab92:	f7ff bfd1 	b.w	ab38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    ab96:	4770      	bx	lr
    ab98:	20000f3c 	.word	0x20000f3c
    ab9c:	4805      	ldr	r0, [pc, #20]	; (abb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    ab9e:	7a40      	ldrb	r0, [r0, #9]
    aba0:	2801      	cmp	r0, #1
    aba2:	d003      	beq.n	abac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    aba4:	2802      	cmp	r0, #2
    aba6:	d103      	bne.n	abb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    aba8:	f002 bf7c 	b.w	daa4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    abac:	f002 bf86 	b.w	dabc <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    abb0:	4770      	bx	lr
    abb2:	0000      	.short	0x0000
    abb4:	20000f3c 	.word	0x20000f3c
    abb8:	4807      	ldr	r0, [pc, #28]	; (abd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    abba:	2100      	movs	r1, #0
    abbc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    abc0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    abc4:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    abc8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    abcc:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    abd0:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    abd4:	4770      	bx	lr
    abd6:	0000      	.short	0x0000
    abd8:	40001000 	.word	0x40001000
    abdc:	4818      	ldr	r0, [pc, #96]	; (ac40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    abde:	b510      	push	{r4, lr}
    abe0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    abe4:	07c1      	lsls	r1, r0, #31
    abe6:	d029      	beq.n	ac3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    abe8:	0781      	lsls	r1, r0, #30
    abea:	d514      	bpl.n	ac16 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    abec:	4815      	ldr	r0, [pc, #84]	; (ac44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    abee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    abf2:	f041 0101 	orr.w	r1, r1, #1
    abf6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    abfa:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    abfe:	b2c0      	uxtb	r0, r0
    ac00:	280b      	cmp	r0, #11
    ac02:	d005      	beq.n	ac10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    ac04:	280a      	cmp	r0, #10
    ac06:	d003      	beq.n	ac10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    ac08:	2803      	cmp	r0, #3
    ac0a:	d001      	beq.n	ac10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    ac0c:	2802      	cmp	r0, #2
    ac0e:	d115      	bne.n	ac3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    ac10:	f240 510f 	movw	r1, #1295	; 0x50f
    ac14:	e00f      	b.n	ac36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    ac16:	0740      	lsls	r0, r0, #29
    ac18:	d510      	bpl.n	ac3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    ac1a:	480a      	ldr	r0, [pc, #40]	; (ac44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    ac1c:	490a      	ldr	r1, [pc, #40]	; (ac48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    ac1e:	3008      	adds	r0, #8
    ac20:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ac24:	f44f 71a0 	mov.w	r1, #320	; 0x140
    ac28:	4808      	ldr	r0, [pc, #32]	; (ac4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    ac2a:	f002 ffda 	bl	dbe2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    ac2e:	2800      	cmp	r0, #0
    ac30:	d004      	beq.n	ac3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    ac32:	f240 5117 	movw	r1, #1303	; 0x517
    ac36:	203e      	movs	r0, #62	; 0x3e
    ac38:	f7f9 fc98 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac3c:	bd10      	pop	{r4, pc}
    ac3e:	0000      	.short	0x0000
    ac40:	20000f3c 	.word	0x20000f3c
    ac44:	40001000 	.word	0x40001000
    ac48:	4001f098 	.word	0x4001f098
    ac4c:	40008000 	.word	0x40008000
    ac50:	4808      	ldr	r0, [pc, #32]	; (ac74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    ac52:	4601      	mov	r1, r0
    ac54:	79c2      	ldrb	r2, [r0, #7]
    ac56:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    ac5a:	b112      	cbz	r2, ac62 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    ac5c:	2a01      	cmp	r2, #1
    ac5e:	d003      	beq.n	ac68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    ac60:	e006      	b.n	ac70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    ac62:	f041 0102 	orr.w	r1, r1, #2
    ac66:	e001      	b.n	ac6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    ac68:	f041 0104 	orr.w	r1, r1, #4
    ac6c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    ac70:	f7ff bfb4 	b.w	abdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    ac74:	20000f3c 	.word	0x20000f3c
    ac78:	b510      	push	{r4, lr}
    ac7a:	f000 fadd 	bl	b238 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ac7e:	2800      	cmp	r0, #0
    ac80:	d108      	bne.n	ac94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    ac82:	f000 fac9 	bl	b218 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ac86:	2800      	cmp	r0, #0
    ac88:	d104      	bne.n	ac94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    ac8a:	4803      	ldr	r0, [pc, #12]	; (ac98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    ac8c:	6801      	ldr	r1, [r0, #0]
    ac8e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    ac92:	6001      	str	r1, [r0, #0]
    ac94:	bd10      	pop	{r4, pc}
    ac96:	0000      	.short	0x0000
    ac98:	40001568 	.word	0x40001568
    ac9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aca0:	4d35      	ldr	r5, [pc, #212]	; (ad78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    aca2:	2400      	movs	r4, #0
    aca4:	7b28      	ldrb	r0, [r5, #12]
    aca6:	b138      	cbz	r0, acb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    aca8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    acac:	4833      	ldr	r0, [pc, #204]	; (ad7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    acae:	f002 ff98 	bl	dbe2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    acb2:	b108      	cbz	r0, acb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    acb4:	2601      	movs	r6, #1
    acb6:	e000      	b.n	acba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    acb8:	2600      	movs	r6, #0
    acba:	7a68      	ldrb	r0, [r5, #9]
    acbc:	4f30      	ldr	r7, [pc, #192]	; (ad80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    acbe:	f44f 7186 	mov.w	r1, #268	; 0x10c
    acc2:	2801      	cmp	r0, #1
    acc4:	d002      	beq.n	accc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    acc6:	2802      	cmp	r0, #2
    acc8:	d008      	beq.n	acdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    acca:	e018      	b.n	acfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    accc:	4638      	mov	r0, r7
    acce:	f002 ff83 	bl	dbd8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    acd2:	b108      	cbz	r0, acd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    acd4:	2408      	movs	r4, #8
    acd6:	e012      	b.n	acfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    acd8:	2400      	movs	r4, #0
    acda:	e010      	b.n	acfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    acdc:	4638      	mov	r0, r7
    acde:	f002 ff7b 	bl	dbd8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    ace2:	b100      	cbz	r0, ace6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    ace4:	2002      	movs	r0, #2
    ace6:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    acea:	43c9      	mvns	r1, r1
    acec:	f341 0100 	sbfx	r1, r1, #0, #1
    acf0:	1c49      	adds	r1, r1, #1
    acf2:	d001      	beq.n	acf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    acf4:	2400      	movs	r4, #0
    acf6:	e000      	b.n	acfa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    acf8:	2404      	movs	r4, #4
    acfa:	4304      	orrs	r4, r0
    acfc:	4334      	orrs	r4, r6
    acfe:	f014 0f0b 	tst.w	r4, #11
    ad02:	d107      	bne.n	ad14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    ad04:	f44f 7188 	mov.w	r1, #272	; 0x110
    ad08:	4638      	mov	r0, r7
    ad0a:	f002 ff65 	bl	dbd8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    ad0e:	b100      	cbz	r0, ad12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    ad10:	2010      	movs	r0, #16
    ad12:	4304      	orrs	r4, r0
    ad14:	481b      	ldr	r0, [pc, #108]	; (ad84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    ad16:	7800      	ldrb	r0, [r0, #0]
    ad18:	b1f8      	cbz	r0, ad5a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    ad1a:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    ad1e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    ad22:	d007      	beq.n	ad34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    ad24:	f44f 718a 	mov.w	r1, #276	; 0x114
    ad28:	4638      	mov	r0, r7
    ad2a:	f002 ff55 	bl	dbd8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    ad2e:	b108      	cbz	r0, ad34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    ad30:	2001      	movs	r0, #1
    ad32:	e000      	b.n	ad36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    ad34:	2000      	movs	r0, #0
    ad36:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    ad3a:	b13e      	cbz	r6, ad4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    ad3c:	f44f 718c 	mov.w	r1, #280	; 0x118
    ad40:	4638      	mov	r0, r7
    ad42:	f002 ff49 	bl	dbd8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    ad46:	b108      	cbz	r0, ad4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    ad48:	2001      	movs	r0, #1
    ad4a:	e000      	b.n	ad4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    ad4c:	2000      	movs	r0, #0
    ad4e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    ad52:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    ad56:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    ad5a:	f7ff ff2d 	bl	abb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    ad5e:	06e0      	lsls	r0, r4, #27
    ad60:	d506      	bpl.n	ad70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ad62:	0720      	lsls	r0, r4, #28
    ad64:	d404      	bmi.n	ad70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ad66:	7a68      	ldrb	r0, [r5, #9]
    ad68:	2801      	cmp	r0, #1
    ad6a:	d101      	bne.n	ad70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ad6c:	f044 0420 	orr.w	r4, r4, #32
    ad70:	4620      	mov	r0, r4
    ad72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad76:	0000      	.short	0x0000
    ad78:	20000f3c 	.word	0x20000f3c
    ad7c:	40008000 	.word	0x40008000
    ad80:	40001000 	.word	0x40001000
    ad84:	2000024c 	.word	0x2000024c
    ad88:	4809      	ldr	r0, [pc, #36]	; (adb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    ad8a:	b510      	push	{r4, lr}
    ad8c:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    ad90:	f000 000f 	and.w	r0, r0, #15
    ad94:	2803      	cmp	r0, #3
    ad96:	d006      	beq.n	ada6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    ad98:	2804      	cmp	r0, #4
    ad9a:	d006      	beq.n	adaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    ad9c:	f240 11dd 	movw	r1, #477	; 0x1dd
    ada0:	203e      	movs	r0, #62	; 0x3e
    ada2:	f7f9 fbe3 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ada6:	2001      	movs	r0, #1
    ada8:	bd10      	pop	{r4, pc}
    adaa:	2002      	movs	r0, #2
    adac:	bd10      	pop	{r4, pc}
    adae:	0000      	.short	0x0000
    adb0:	40001000 	.word	0x40001000
    adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adb8:	4c19      	ldr	r4, [pc, #100]	; (ae20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    adba:	460d      	mov	r5, r1
    adbc:	7a21      	ldrb	r1, [r4, #8]
    adbe:	b129      	cbz	r1, adcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    adc0:	f010 0f11 	tst.w	r0, #17
    adc4:	d00b      	beq.n	adde <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    adc6:	f7ff fa1f 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    adca:	e027      	b.n	ae1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    adcc:	4915      	ldr	r1, [pc, #84]	; (ae24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    adce:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    add2:	6008      	str	r0, [r1, #0]
    add4:	f000 f862 	bl	ae9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    add8:	2000      	movs	r0, #0
    adda:	7320      	strb	r0, [r4, #12]
    addc:	e01e      	b.n	ae1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    adde:	2901      	cmp	r1, #1
    ade0:	d001      	beq.n	ade6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    ade2:	2601      	movs	r6, #1
    ade4:	e000      	b.n	ade8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    ade6:	2600      	movs	r6, #0
    ade8:	79e0      	ldrb	r0, [r4, #7]
    adea:	2801      	cmp	r0, #1
    adec:	d00e      	beq.n	ae0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    adee:	2700      	movs	r7, #0
    adf0:	f000 f854 	bl	ae9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    adf4:	2196      	movs	r1, #150	; 0x96
    adf6:	4630      	mov	r0, r6
    adf8:	f000 f866 	bl	aec8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    adfc:	4601      	mov	r1, r0
    adfe:	b14f      	cbz	r7, ae14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    ae00:	353b      	adds	r5, #59	; 0x3b
    ae02:	428d      	cmp	r5, r1
    ae04:	d904      	bls.n	ae10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    ae06:	2000      	movs	r0, #0
    ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae0c:	2701      	movs	r7, #1
    ae0e:	e7ef      	b.n	adf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    ae10:	2001      	movs	r0, #1
    ae12:	71e0      	strb	r0, [r4, #7]
    ae14:	7aa2      	ldrb	r2, [r4, #10]
    ae16:	4630      	mov	r0, r6
    ae18:	f7ff fc6a 	bl	a6f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    ae1c:	2001      	movs	r0, #1
    ae1e:	e7f3      	b.n	ae08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ae20:	20000f3c 	.word	0x20000f3c
    ae24:	4001f508 	.word	0x4001f508
    ae28:	4805      	ldr	r0, [pc, #20]	; (ae40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    ae2a:	2100      	movs	r1, #0
    ae2c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    ae30:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ae34:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    ae38:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ae3c:	4770      	bx	lr
    ae3e:	0000      	.short	0x0000
    ae40:	40001000 	.word	0x40001000
    ae44:	4804      	ldr	r0, [pc, #16]	; (ae58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    ae46:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ae48:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ae4c:	6281      	str	r1, [r0, #40]	; 0x28
    ae4e:	4903      	ldr	r1, [pc, #12]	; (ae5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    ae50:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    ae54:	6008      	str	r0, [r1, #0]
    ae56:	4770      	bx	lr
    ae58:	20000f3c 	.word	0x20000f3c
    ae5c:	4001f504 	.word	0x4001f504
    ae60:	4a07      	ldr	r2, [pc, #28]	; (ae80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    ae62:	2000      	movs	r0, #0
    ae64:	3208      	adds	r2, #8
    ae66:	4906      	ldr	r1, [pc, #24]	; (ae80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    ae68:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ae6c:	1d0a      	adds	r2, r1, #4
    ae6e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ae72:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ae76:	4902      	ldr	r1, [pc, #8]	; (ae80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    ae78:	310c      	adds	r1, #12
    ae7a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ae7e:	4770      	bx	lr
    ae80:	40008000 	.word	0x40008000
    ae84:	4903      	ldr	r1, [pc, #12]	; (ae94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    ae86:	79c9      	ldrb	r1, [r1, #7]
    ae88:	2900      	cmp	r1, #0
    ae8a:	d102      	bne.n	ae92 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    ae8c:	4902      	ldr	r1, [pc, #8]	; (ae98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    ae8e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ae92:	4770      	bx	lr
    ae94:	20000f3c 	.word	0x20000f3c
    ae98:	4001f098 	.word	0x4001f098
    ae9c:	4802      	ldr	r0, [pc, #8]	; (aea8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    ae9e:	2100      	movs	r1, #0
    aea0:	71c1      	strb	r1, [r0, #7]
    aea2:	7201      	strb	r1, [r0, #8]
    aea4:	7241      	strb	r1, [r0, #9]
    aea6:	4770      	bx	lr
    aea8:	20000f3c 	.word	0x20000f3c
    aeac:	4a05      	ldr	r2, [pc, #20]	; (aec4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    aeae:	79d2      	ldrb	r2, [r2, #7]
    aeb0:	2a01      	cmp	r2, #1
    aeb2:	d006      	beq.n	aec2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    aeb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aeb8:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    aebc:	fbb1 f1f2 	udiv	r1, r1, r2
    aec0:	1a40      	subs	r0, r0, r1
    aec2:	4770      	bx	lr
    aec4:	20000f3c 	.word	0x20000f3c
    aec8:	b570      	push	{r4, r5, r6, lr}
    aeca:	4c13      	ldr	r4, [pc, #76]	; (af18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    aecc:	4603      	mov	r3, r0
    aece:	460d      	mov	r5, r1
    aed0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    aed4:	2000      	movs	r0, #0
    aed6:	b15a      	cbz	r2, aef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    aed8:	4621      	mov	r1, r4
    aeda:	f891 1020 	ldrb.w	r1, [r1, #32]
    aede:	b163      	cbz	r3, aefa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    aee0:	2b01      	cmp	r3, #1
    aee2:	d111      	bne.n	af08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    aee4:	2a01      	cmp	r2, #1
    aee6:	4628      	mov	r0, r5
    aee8:	d012      	beq.n	af10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    aeea:	f002 febf 	bl	dc6c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    aeee:	e009      	b.n	af04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    aef0:	f240 7152 	movw	r1, #1874	; 0x752
    aef4:	203e      	movs	r0, #62	; 0x3e
    aef6:	f7f9 fb39 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aefa:	2a01      	cmp	r2, #1
    aefc:	4628      	mov	r0, r5
    aefe:	d004      	beq.n	af0a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    af00:	f002 fec2 	bl	dc88 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    af04:	69e1      	ldr	r1, [r4, #28]
    af06:	4408      	add	r0, r1
    af08:	bd70      	pop	{r4, r5, r6, pc}
    af0a:	f002 fed7 	bl	dcbc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    af0e:	e7f9      	b.n	af04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    af10:	f002 fec5 	bl	dc9e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    af14:	e7f6      	b.n	af04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    af16:	0000      	.short	0x0000
    af18:	20000f3c 	.word	0x20000f3c
    af1c:	b510      	push	{r4, lr}
    af1e:	2200      	movs	r2, #0
    af20:	2901      	cmp	r1, #1
    af22:	d008      	beq.n	af36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    af24:	2902      	cmp	r1, #2
    af26:	d004      	beq.n	af32 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    af28:	f240 2163 	movw	r1, #611	; 0x263
    af2c:	203e      	movs	r0, #62	; 0x3e
    af2e:	f7f9 fb1d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    af36:	4905      	ldr	r1, [pc, #20]	; (af4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    af38:	430a      	orrs	r2, r1
    af3a:	4905      	ldr	r1, [pc, #20]	; (af50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    af3c:	600a      	str	r2, [r1, #0]
    af3e:	4905      	ldr	r1, [pc, #20]	; (af54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    af40:	4308      	orrs	r0, r1
    af42:	4903      	ldr	r1, [pc, #12]	; (af50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    af44:	1d09      	adds	r1, r1, #4
    af46:	6008      	str	r0, [r1, #0]
    af48:	bd10      	pop	{r4, pc}
    af4a:	0000      	.short	0x0000
    af4c:	00100108 	.word	0x00100108
    af50:	40001514 	.word	0x40001514
    af54:	02030000 	.word	0x02030000

0000af58 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    af58:	4901      	ldr	r1, [pc, #4]	; (af60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    af5a:	b2c0      	uxtb	r0, r0
    af5c:	6008      	str	r0, [r1, #0]
    af5e:	4770      	bx	lr
    af60:	4000150c 	.word	0x4000150c

0000af64 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    af64:	b510      	push	{r4, lr}
    af66:	4907      	ldr	r1, [pc, #28]	; (af84 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    af68:	2801      	cmp	r0, #1
    af6a:	d005      	beq.n	af78 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    af6c:	2802      	cmp	r0, #2
    af6e:	d005      	beq.n	af7c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    af70:	218b      	movs	r1, #139	; 0x8b
    af72:	203f      	movs	r0, #63	; 0x3f
    af74:	f7f9 fafa 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af78:	2003      	movs	r0, #3
    af7a:	e000      	b.n	af7e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    af7c:	2004      	movs	r0, #4
    af7e:	6008      	str	r0, [r1, #0]
    af80:	bd10      	pop	{r4, pc}
    af82:	0000      	.short	0x0000
    af84:	40001510 	.word	0x40001510

0000af88 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    af88:	4770      	bx	lr
    af8a:	2100      	movs	r1, #0
    af8c:	7081      	strb	r1, [r0, #2]
    af8e:	7001      	strb	r1, [r0, #0]
    af90:	7041      	strb	r1, [r0, #1]
    af92:	4770      	bx	lr

0000af94 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    af94:	b570      	push	{r4, r5, r6, lr}
    af96:	f7f5 fe3d 	bl	c14 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    af9a:	4605      	mov	r5, r0
    af9c:	2400      	movs	r4, #0
    af9e:	e006      	b.n	afae <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    afa0:	4620      	mov	r0, r4
    afa2:	f7f5 fe3d 	bl	c20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    afa6:	f7ff fff0 	bl	af8a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    afaa:	1c64      	adds	r4, r4, #1
    afac:	b2e4      	uxtb	r4, r4
    afae:	42ac      	cmp	r4, r5
    afb0:	d3f6      	bcc.n	afa0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    afb2:	bd70      	pop	{r4, r5, r6, pc}

0000afb4 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    afb4:	2000      	movs	r0, #0
    afb6:	f7f8 bc3d 	b.w	3834 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000afba <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    afba:	b510      	push	{r4, lr}
    afbc:	f7f8 f910 	bl	31e0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    afc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afc4:	f000 b800 	b.w	afc8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000afc8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    afc8:	0a41      	lsrs	r1, r0, #9
    afca:	f643 5209 	movw	r2, #15625	; 0x3d09
    afce:	4351      	muls	r1, r2
    afd0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    afd4:	fb10 f002 	smulbb	r0, r0, r2
    afd8:	f500 7080 	add.w	r0, r0, #256	; 0x100
    afdc:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    afe0:	4770      	bx	lr

0000afe2 <MPSL_IRQ_RADIO_Handler>:
    afe2:	f7f6 bf25 	b.w	1e30 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    afe6:	2800      	cmp	r0, #0
    afe8:	db09      	blt.n	affe <MPSL_IRQ_RADIO_Handler+0x1c>
    afea:	f000 021f 	and.w	r2, r0, #31
    afee:	2101      	movs	r1, #1
    aff0:	4091      	lsls	r1, r2
    aff2:	0940      	lsrs	r0, r0, #5
    aff4:	0080      	lsls	r0, r0, #2
    aff6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    affa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    affe:	4770      	bx	lr
    b000:	2800      	cmp	r0, #0
    b002:	db0d      	blt.n	b020 <MPSL_IRQ_RADIO_Handler+0x3e>
    b004:	f000 021f 	and.w	r2, r0, #31
    b008:	2101      	movs	r1, #1
    b00a:	4091      	lsls	r1, r2
    b00c:	0940      	lsrs	r0, r0, #5
    b00e:	0080      	lsls	r0, r0, #2
    b010:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b014:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b018:	f3bf 8f4f 	dsb	sy
    b01c:	f3bf 8f6f 	isb	sy
    b020:	4770      	bx	lr

0000b022 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    b022:	b570      	push	{r4, r5, r6, lr}
    b024:	4602      	mov	r2, r0
    b026:	2000      	movs	r0, #0
    b028:	2900      	cmp	r1, #0
    b02a:	d01d      	beq.n	b068 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    b02c:	fba2 0101 	umull	r0, r1, r2, r1
    b030:	0a40      	lsrs	r0, r0, #9
    b032:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    b036:	0a49      	lsrs	r1, r1, #9
    b038:	1c40      	adds	r0, r0, #1
    b03a:	f141 0100 	adc.w	r1, r1, #0
    b03e:	f240 72a1 	movw	r2, #1953	; 0x7a1
    b042:	1883      	adds	r3, r0, r2
    b044:	f141 0100 	adc.w	r1, r1, #0
    b048:	1c5b      	adds	r3, r3, #1
    b04a:	f141 0400 	adc.w	r4, r1, #0
    b04e:	2100      	movs	r1, #0
    b050:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    b054:	41a1      	sbcs	r1, r4
    b056:	d203      	bcs.n	b060 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    b058:	2171      	movs	r1, #113	; 0x71
    b05a:	206d      	movs	r0, #109	; 0x6d
    b05c:	f7f8 ffa6 	bl	3fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b060:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    b064:	fbb0 f0f2 	udiv	r0, r0, r2
    b068:	bd70      	pop	{r4, r5, r6, pc}
    b06a:	5840      	ldr	r0, [r0, r1]
    b06c:	2800      	cmp	r0, #0
    b06e:	d000      	beq.n	b072 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    b070:	2001      	movs	r0, #1
    b072:	4770      	bx	lr
    b074:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    b078:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    b07c:	f002 0201 	and.w	r2, r2, #1
    b080:	03c0      	lsls	r0, r0, #15
    b082:	d503      	bpl.n	b08c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b084:	428a      	cmp	r2, r1
    b086:	d101      	bne.n	b08c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b088:	2001      	movs	r0, #1
    b08a:	4770      	bx	lr
    b08c:	2000      	movs	r0, #0
    b08e:	4770      	bx	lr

0000b090 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    b090:	b510      	push	{r4, lr}
    b092:	2101      	movs	r1, #1
    b094:	0788      	lsls	r0, r1, #30
    b096:	f7f8 ff33 	bl	3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b09a:	2800      	cmp	r0, #0
    b09c:	d000      	beq.n	b0a0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    b09e:	2001      	movs	r0, #1
    b0a0:	bd10      	pop	{r4, pc}

0000b0a2 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    b0a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b0a6:	2101      	movs	r1, #1
    b0a8:	6001      	str	r1, [r0, #0]
    b0aa:	4770      	bx	lr

0000b0ac <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    b0ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b0b0:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    b0b4:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    b0b8:	f002 0203 	and.w	r2, r2, #3
    b0bc:	03c9      	lsls	r1, r1, #15
    b0be:	d503      	bpl.n	b0c8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b0c0:	4282      	cmp	r2, r0
    b0c2:	d101      	bne.n	b0c8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b0c4:	2001      	movs	r0, #1
    b0c6:	4770      	bx	lr
    b0c8:	2000      	movs	r0, #0
    b0ca:	4770      	bx	lr

0000b0cc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    b0cc:	b510      	push	{r4, lr}
    b0ce:	2100      	movs	r1, #0
    b0d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b0d4:	f7f8 ff14 	bl	3f00 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b0d8:	2800      	cmp	r0, #0
    b0da:	d000      	beq.n	b0de <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    b0dc:	2001      	movs	r0, #1
    b0de:	bd10      	pop	{r4, pc}
    b0e0:	2800      	cmp	r0, #0
    b0e2:	db09      	blt.n	b0f8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    b0e4:	f000 021f 	and.w	r2, r0, #31
    b0e8:	2101      	movs	r1, #1
    b0ea:	4091      	lsls	r1, r2
    b0ec:	0940      	lsrs	r0, r0, #5
    b0ee:	0080      	lsls	r0, r0, #2
    b0f0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b0f4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b0f8:	4770      	bx	lr
    b0fa:	2800      	cmp	r0, #0
    b0fc:	db0d      	blt.n	b11a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    b0fe:	f000 021f 	and.w	r2, r0, #31
    b102:	2101      	movs	r1, #1
    b104:	4091      	lsls	r1, r2
    b106:	0940      	lsrs	r0, r0, #5
    b108:	0080      	lsls	r0, r0, #2
    b10a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b10e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b112:	f3bf 8f4f 	dsb	sy
    b116:	f3bf 8f6f 	isb	sy
    b11a:	4770      	bx	lr
    b11c:	00021000 	.word	0x00021000
    b120:	000000fa 	.word	0x000000fa
    b124:	24625723 	.word	0x24625723
    b128:	578f3123 	.word	0x578f3123
    b12c:	2fd1ee74 	.word	0x2fd1ee74
    b130:	4594c088 	.word	0x4594c088
    b134:	36f9a2f7 	.word	0x36f9a2f7
    b138:	2800      	cmp	r0, #0
    b13a:	db09      	blt.n	b150 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    b13c:	f000 021f 	and.w	r2, r0, #31
    b140:	2101      	movs	r1, #1
    b142:	4091      	lsls	r1, r2
    b144:	0940      	lsrs	r0, r0, #5
    b146:	0080      	lsls	r0, r0, #2
    b148:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b14c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b150:	4770      	bx	lr

0000b152 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    b152:	f3ef 8110 	mrs	r1, PRIMASK
    b156:	b672      	cpsid	i
    b158:	7802      	ldrb	r2, [r0, #0]
    b15a:	2a01      	cmp	r2, #1
    b15c:	d001      	beq.n	b162 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    b15e:	2201      	movs	r2, #1
    b160:	e000      	b.n	b164 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    b162:	2200      	movs	r2, #0
    b164:	2301      	movs	r3, #1
    b166:	7003      	strb	r3, [r0, #0]
    b168:	b901      	cbnz	r1, b16c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    b16a:	b662      	cpsie	i
    b16c:	b10a      	cbz	r2, b172 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    b16e:	2000      	movs	r0, #0
    b170:	4770      	bx	lr
    b172:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b176:	4770      	bx	lr

0000b178 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    b178:	2100      	movs	r1, #0
    b17a:	7001      	strb	r1, [r0, #0]
    b17c:	4608      	mov	r0, r1
    b17e:	4770      	bx	lr

0000b180 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    b180:	f3ef 8110 	mrs	r1, PRIMASK
    b184:	b672      	cpsid	i
    b186:	2200      	movs	r2, #0
    b188:	7002      	strb	r2, [r0, #0]
    b18a:	b901      	cbnz	r1, b18e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    b18c:	b662      	cpsie	i
    b18e:	2000      	movs	r0, #0
    b190:	4770      	bx	lr

0000b192 <mpsl_low_priority_process>:
    b192:	f7f8 bff7 	b.w	4184 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000b196 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    b196:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b19a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b19e:	280f      	cmp	r0, #15
    b1a0:	d001      	beq.n	b1a6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    b1a2:	2000      	movs	r0, #0
    b1a4:	4770      	bx	lr
    b1a6:	2001      	movs	r0, #1
    b1a8:	4770      	bx	lr

0000b1aa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    b1aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b1ae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b1b2:	280a      	cmp	r0, #10
    b1b4:	d001      	beq.n	b1ba <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    b1b6:	2000      	movs	r0, #0
    b1b8:	4770      	bx	lr
    b1ba:	2001      	movs	r0, #1
    b1bc:	4770      	bx	lr

0000b1be <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    b1be:	b500      	push	{lr}
    b1c0:	f7ff fff3 	bl	b1aa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b1c4:	b120      	cbz	r0, b1d0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    b1c6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b1ca:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b1ce:	b108      	cbz	r0, b1d4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    b1d0:	2000      	movs	r0, #0
    b1d2:	bd00      	pop	{pc}
    b1d4:	2001      	movs	r0, #1
    b1d6:	bd00      	pop	{pc}

0000b1d8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    b1d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b1dc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b1e0:	280e      	cmp	r0, #14
    b1e2:	d001      	beq.n	b1e8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    b1e4:	2000      	movs	r0, #0
    b1e6:	4770      	bx	lr
    b1e8:	2001      	movs	r0, #1
    b1ea:	4770      	bx	lr

0000b1ec <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    b1ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b1f0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b1f4:	2810      	cmp	r0, #16
    b1f6:	d001      	beq.n	b1fc <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    b1f8:	2000      	movs	r0, #0
    b1fa:	4770      	bx	lr
    b1fc:	2001      	movs	r0, #1
    b1fe:	4770      	bx	lr

0000b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    b200:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b204:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b208:	2806      	cmp	r0, #6
    b20a:	d003      	beq.n	b214 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b20c:	1c40      	adds	r0, r0, #1
    b20e:	d001      	beq.n	b214 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b210:	2000      	movs	r0, #0
    b212:	4770      	bx	lr
    b214:	2001      	movs	r0, #1
    b216:	4770      	bx	lr

0000b218 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    b218:	b500      	push	{lr}
    b21a:	f7ff fff1 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b21e:	b148      	cbz	r0, b234 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b220:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b224:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b228:	2806      	cmp	r0, #6
    b22a:	d303      	bcc.n	b234 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b22c:	1c40      	adds	r0, r0, #1
    b22e:	d001      	beq.n	b234 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b230:	2001      	movs	r0, #1
    b232:	bd00      	pop	{pc}
    b234:	2000      	movs	r0, #0
    b236:	bd00      	pop	{pc}

0000b238 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    b238:	b500      	push	{lr}
    b23a:	f7ff ffe1 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b23e:	b138      	cbz	r0, b250 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    b240:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b244:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b248:	2806      	cmp	r0, #6
    b24a:	d303      	bcc.n	b254 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b24c:	1c40      	adds	r0, r0, #1
    b24e:	d001      	beq.n	b254 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b250:	2000      	movs	r0, #0
    b252:	bd00      	pop	{pc}
    b254:	2001      	movs	r0, #1
    b256:	bd00      	pop	{pc}

0000b258 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    b258:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b25c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b260:	280d      	cmp	r0, #13
    b262:	d001      	beq.n	b268 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    b264:	2000      	movs	r0, #0
    b266:	4770      	bx	lr
    b268:	2001      	movs	r0, #1
    b26a:	4770      	bx	lr

0000b26c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    b26c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b270:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b274:	2808      	cmp	r0, #8
    b276:	d001      	beq.n	b27c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    b278:	2000      	movs	r0, #0
    b27a:	4770      	bx	lr
    b27c:	2001      	movs	r0, #1
    b27e:	4770      	bx	lr

0000b280 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    b280:	2a00      	cmp	r2, #0
    b282:	bf04      	itt	eq
    b284:	2000      	moveq	r0, #0
    b286:	4770      	bxeq	lr
    b288:	1e52      	subs	r2, r2, #1
    b28a:	d007      	beq.n	b29c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    b28c:	7803      	ldrb	r3, [r0, #0]
    b28e:	f891 c000 	ldrb.w	ip, [r1]
    b292:	4563      	cmp	r3, ip
    b294:	bf04      	itt	eq
    b296:	1c40      	addeq	r0, r0, #1
    b298:	1c49      	addeq	r1, r1, #1
    b29a:	d0f5      	beq.n	b288 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    b29c:	7800      	ldrb	r0, [r0, #0]
    b29e:	7809      	ldrb	r1, [r1, #0]
    b2a0:	1a40      	subs	r0, r0, r1
    b2a2:	4770      	bx	lr

0000b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    b2a4:	b4f0      	push	{r4, r5, r6, r7}
    b2a6:	ea80 0c01 	eor.w	ip, r0, r1
    b2aa:	4603      	mov	r3, r0
    b2ac:	f01c 0f03 	tst.w	ip, #3
    b2b0:	d13c      	bne.n	b32c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b2b2:	f013 0f03 	tst.w	r3, #3
    b2b6:	d00b      	beq.n	b2d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    b2b8:	2a00      	cmp	r2, #0
    b2ba:	bf04      	itt	eq
    b2bc:	bcf0      	popeq	{r4, r5, r6, r7}
    b2be:	4770      	bxeq	lr
    b2c0:	f811 cb01 	ldrb.w	ip, [r1], #1
    b2c4:	f803 cb01 	strb.w	ip, [r3], #1
    b2c8:	1e52      	subs	r2, r2, #1
    b2ca:	f013 0f03 	tst.w	r3, #3
    b2ce:	d1f3      	bne.n	b2b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    b2d0:	2a03      	cmp	r2, #3
    b2d2:	d94f      	bls.n	b374 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b2d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b2d8:	d24c      	bcs.n	b374 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b2da:	f1c2 0c00 	rsb	ip, r2, #0
    b2de:	ea4f 74ec 	mov.w	r4, ip, asr #31
    b2e2:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    b2e6:	ea4f 0cac 	mov.w	ip, ip, asr #2
    b2ea:	f1cc 0c00 	rsb	ip, ip, #0
    b2ee:	f1bc 0f00 	cmp.w	ip, #0
    b2f2:	dd1b      	ble.n	b32c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b2f4:	1f0d      	subs	r5, r1, #4
    b2f6:	1f1c      	subs	r4, r3, #4
    b2f8:	f01c 0f01 	tst.w	ip, #1
    b2fc:	d003      	beq.n	b306 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    b2fe:	f855 6f04 	ldr.w	r6, [r5, #4]!
    b302:	f844 6f04 	str.w	r6, [r4, #4]!
    b306:	ea5f 066c 	movs.w	r6, ip, asr #1
    b30a:	d007      	beq.n	b31c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    b30c:	686f      	ldr	r7, [r5, #4]
    b30e:	6067      	str	r7, [r4, #4]
    b310:	f855 7f08 	ldr.w	r7, [r5, #8]!
    b314:	f844 7f08 	str.w	r7, [r4, #8]!
    b318:	1e76      	subs	r6, r6, #1
    b31a:	d1f7      	bne.n	b30c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    b31c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    b320:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    b324:	f1cc 0c00 	rsb	ip, ip, #0
    b328:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    b32c:	2a00      	cmp	r2, #0
    b32e:	bf04      	itt	eq
    b330:	bcf0      	popeq	{r4, r5, r6, r7}
    b332:	4770      	bxeq	lr
    b334:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b338:	d226      	bcs.n	b388 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b33a:	2a00      	cmp	r2, #0
    b33c:	bfdc      	itt	le
    b33e:	bcf0      	pople	{r4, r5, r6, r7}
    b340:	4770      	bxle	lr
    b342:	1e49      	subs	r1, r1, #1
    b344:	1e5b      	subs	r3, r3, #1
    b346:	f012 0f01 	tst.w	r2, #1
    b34a:	d003      	beq.n	b354 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    b34c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b350:	f803 cf01 	strb.w	ip, [r3, #1]!
    b354:	1052      	asrs	r2, r2, #1
    b356:	bf04      	itt	eq
    b358:	bcf0      	popeq	{r4, r5, r6, r7}
    b35a:	4770      	bxeq	lr
    b35c:	f891 c001 	ldrb.w	ip, [r1, #1]
    b360:	f883 c001 	strb.w	ip, [r3, #1]
    b364:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    b368:	f803 cf02 	strb.w	ip, [r3, #2]!
    b36c:	1e52      	subs	r2, r2, #1
    b36e:	d1f5      	bne.n	b35c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    b370:	bcf0      	pop	{r4, r5, r6, r7}
    b372:	4770      	bx	lr
    b374:	2a04      	cmp	r2, #4
    b376:	d3d9      	bcc.n	b32c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b378:	f851 cb04 	ldr.w	ip, [r1], #4
    b37c:	1f12      	subs	r2, r2, #4
    b37e:	f843 cb04 	str.w	ip, [r3], #4
    b382:	2a04      	cmp	r2, #4
    b384:	d2f8      	bcs.n	b378 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    b386:	e7d1      	b.n	b32c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b388:	f811 cb01 	ldrb.w	ip, [r1], #1
    b38c:	f803 cb01 	strb.w	ip, [r3], #1
    b390:	1e52      	subs	r2, r2, #1
    b392:	d1f9      	bne.n	b388 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b394:	bcf0      	pop	{r4, r5, r6, r7}
    b396:	4770      	bx	lr

0000b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    b398:	b470      	push	{r4, r5, r6}
    b39a:	4603      	mov	r3, r0
    b39c:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    b3a0:	f010 0f03 	tst.w	r0, #3
    b3a4:	d009      	beq.n	b3ba <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    b3a6:	2a00      	cmp	r2, #0
    b3a8:	bf04      	itt	eq
    b3aa:	bc70      	popeq	{r4, r5, r6}
    b3ac:	4770      	bxeq	lr
    b3ae:	f803 cb01 	strb.w	ip, [r3], #1
    b3b2:	1e52      	subs	r2, r2, #1
    b3b4:	f013 0f03 	tst.w	r3, #3
    b3b8:	d1f5      	bne.n	b3a6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    b3ba:	b2c9      	uxtb	r1, r1
    b3bc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b3c0:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    b3c4:	2a03      	cmp	r2, #3
    b3c6:	d939      	bls.n	b43c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    b3c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b3cc:	d236      	bcs.n	b43c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    b3ce:	4251      	negs	r1, r2
    b3d0:	17cc      	asrs	r4, r1, #31
    b3d2:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    b3d6:	1089      	asrs	r1, r1, #2
    b3d8:	424e      	negs	r6, r1
    b3da:	2e00      	cmp	r6, #0
    b3dc:	dd11      	ble.n	b402 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b3de:	1f19      	subs	r1, r3, #4
    b3e0:	f016 0f01 	tst.w	r6, #1
    b3e4:	bf18      	it	ne
    b3e6:	f841 5f04 	strne.w	r5, [r1, #4]!
    b3ea:	1074      	asrs	r4, r6, #1
    b3ec:	d004      	beq.n	b3f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    b3ee:	604d      	str	r5, [r1, #4]
    b3f0:	f841 5f08 	str.w	r5, [r1, #8]!
    b3f4:	1e64      	subs	r4, r4, #1
    b3f6:	d1fa      	bne.n	b3ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    b3f8:	4271      	negs	r1, r6
    b3fa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    b3fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    b402:	2a00      	cmp	r2, #0
    b404:	bf04      	itt	eq
    b406:	bc70      	popeq	{r4, r5, r6}
    b408:	4770      	bxeq	lr
    b40a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b40e:	d21d      	bcs.n	b44c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    b410:	2a00      	cmp	r2, #0
    b412:	bfdc      	itt	le
    b414:	bc70      	pople	{r4, r5, r6}
    b416:	4770      	bxle	lr
    b418:	1e59      	subs	r1, r3, #1
    b41a:	f012 0f01 	tst.w	r2, #1
    b41e:	bf18      	it	ne
    b420:	f801 cf01 	strbne.w	ip, [r1, #1]!
    b424:	1052      	asrs	r2, r2, #1
    b426:	bf04      	itt	eq
    b428:	bc70      	popeq	{r4, r5, r6}
    b42a:	4770      	bxeq	lr
    b42c:	f881 c001 	strb.w	ip, [r1, #1]
    b430:	f801 cf02 	strb.w	ip, [r1, #2]!
    b434:	1e52      	subs	r2, r2, #1
    b436:	d1f9      	bne.n	b42c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    b438:	bc70      	pop	{r4, r5, r6}
    b43a:	4770      	bx	lr
    b43c:	2a04      	cmp	r2, #4
    b43e:	d3e0      	bcc.n	b402 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b440:	1f12      	subs	r2, r2, #4
    b442:	f843 5b04 	str.w	r5, [r3], #4
    b446:	2a04      	cmp	r2, #4
    b448:	d2fa      	bcs.n	b440 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    b44a:	e7da      	b.n	b402 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b44c:	f803 cb01 	strb.w	ip, [r3], #1
    b450:	1e52      	subs	r2, r2, #1
    b452:	d1fb      	bne.n	b44c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    b454:	bc70      	pop	{r4, r5, r6}
    b456:	4770      	bx	lr
    b458:	f04f 30ff 	mov.w	r0, #4294967295
    b45c:	4770      	bx	lr
    b45e:	2000      	movs	r0, #0
    b460:	4770      	bx	lr
    b462:	2000      	movs	r0, #0
    b464:	4770      	bx	lr
    b466:	f04f 30ff 	mov.w	r0, #4294967295
    b46a:	4770      	bx	lr
    b46c:	4770      	bx	lr
    b46e:	4770      	bx	lr
    b470:	2000      	movs	r0, #0
    b472:	4770      	bx	lr
    b474:	f04f 30ff 	mov.w	r0, #4294967295
    b478:	4770      	bx	lr
    b47a:	f04f 30ff 	mov.w	r0, #4294967295
    b47e:	4770      	bx	lr
    b480:	2100      	movs	r1, #0
    b482:	7001      	strb	r1, [r0, #0]
    b484:	4770      	bx	lr
    b486:	f04f 30ff 	mov.w	r0, #4294967295
    b48a:	4770      	bx	lr
    b48c:	f04f 30ff 	mov.w	r0, #4294967295
    b490:	4770      	bx	lr
    b492:	2000      	movs	r0, #0
    b494:	4770      	bx	lr
    b496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b49a:	4606      	mov	r6, r0
    b49c:	460c      	mov	r4, r1
    b49e:	7808      	ldrb	r0, [r1, #0]
    b4a0:	7849      	ldrb	r1, [r1, #1]
    b4a2:	2700      	movs	r7, #0
    b4a4:	4408      	add	r0, r1
    b4a6:	4691      	mov	r9, r2
    b4a8:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    b4ac:	463d      	mov	r5, r7
    b4ae:	e00e      	b.n	b4ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    b4b0:	7a23      	ldrb	r3, [r4, #8]
    b4b2:	2b02      	cmp	r3, #2
    b4b4:	d200      	bcs.n	b4b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    b4b6:	2302      	movs	r3, #2
    b4b8:	79e2      	ldrb	r2, [r4, #7]
    b4ba:	2a03      	cmp	r2, #3
    b4bc:	d200      	bcs.n	b4c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    b4be:	2203      	movs	r2, #3
    b4c0:	79a1      	ldrb	r1, [r4, #6]
    b4c2:	7960      	ldrb	r0, [r4, #5]
    b4c4:	f000 fe44 	bl	c150 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    b4c8:	1c6d      	adds	r5, r5, #1
    b4ca:	4407      	add	r7, r0
    b4cc:	b2ed      	uxtb	r5, r5
    b4ce:	4545      	cmp	r5, r8
    b4d0:	d3ee      	bcc.n	b4b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    b4d2:	6830      	ldr	r0, [r6, #0]
    b4d4:	1cc0      	adds	r0, r0, #3
    b4d6:	f020 0003 	bic.w	r0, r0, #3
    b4da:	6030      	str	r0, [r6, #0]
    b4dc:	f1b9 0f00 	cmp.w	r9, #0
    b4e0:	d000      	beq.n	b4e4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    b4e2:	2000      	movs	r0, #0
    b4e4:	463a      	mov	r2, r7
    b4e6:	4641      	mov	r1, r8
    b4e8:	f7f9 fae4 	bl	4ab4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    b4ec:	6831      	ldr	r1, [r6, #0]
    b4ee:	4408      	add	r0, r1
    b4f0:	6030      	str	r0, [r6, #0]
    b4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b4f6 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    b4f6:	2000      	movs	r0, #0
    b4f8:	4770      	bx	lr

0000b4fa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    b4fa:	b510      	push	{r4, lr}
    b4fc:	4604      	mov	r4, r0
    b4fe:	4620      	mov	r0, r4
    b500:	f7f9 f8ec 	bl	46dc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    b504:	2800      	cmp	r0, #0
    b506:	d006      	beq.n	b516 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    b508:	78a1      	ldrb	r1, [r4, #2]
    b50a:	7820      	ldrb	r0, [r4, #0]
    b50c:	f000 f804 	bl	b518 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    b510:	2800      	cmp	r0, #0
    b512:	d0f4      	beq.n	b4fe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    b514:	2001      	movs	r0, #1
    b516:	bd10      	pop	{r4, pc}
    b518:	b570      	push	{r4, r5, r6, lr}
    b51a:	460c      	mov	r4, r1
    b51c:	4605      	mov	r5, r0
    b51e:	f7f9 f939 	bl	4794 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    b522:	2800      	cmp	r0, #0
    b524:	d002      	beq.n	b52c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    b526:	2d3e      	cmp	r5, #62	; 0x3e
    b528:	d001      	beq.n	b52e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    b52a:	2001      	movs	r0, #1
    b52c:	bd70      	pop	{r4, r5, r6, pc}
    b52e:	2c12      	cmp	r4, #18
    b530:	d004      	beq.n	b53c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    b532:	4620      	mov	r0, r4
    b534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b538:	f7f9 b948 	b.w	47cc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    b53c:	2000      	movs	r0, #0
    b53e:	bd70      	pop	{r4, r5, r6, pc}

0000b540 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    b540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b544:	4604      	mov	r4, r0
    b546:	f891 c000 	ldrb.w	ip, [r1]
    b54a:	2000      	movs	r0, #0
    b54c:	270c      	movs	r7, #12
    b54e:	223e      	movs	r2, #62	; 0x3e
    b550:	2612      	movs	r6, #18
    b552:	25ff      	movs	r5, #255	; 0xff
    b554:	f04f 0b14 	mov.w	fp, #20
    b558:	f04f 0e13 	mov.w	lr, #19
    b55c:	f04f 0a05 	mov.w	sl, #5
    b560:	f104 030d 	add.w	r3, r4, #13
    b564:	f04f 0911 	mov.w	r9, #17
    b568:	f1bc 0f20 	cmp.w	ip, #32
    b56c:	d272      	bcs.n	b654 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    b56e:	e8df f00c 	tbb	[pc, ip]
    b572:	1071      	.short	0x1071
    b574:	fc2e2927 	.word	0xfc2e2927
    b578:	c0aea46d 	.word	0xc0aea46d
    b57c:	f9fafbda 	.word	0xf9fafbda
    b580:	71f6f7f8 	.word	0x71f6f7f8
    b584:	f5725071 	.word	0xf5725071
    b588:	f1f2f3f4 	.word	0xf1f2f3f4
    b58c:	edeeeff0 	.word	0xedeeeff0
    b590:	ec71      	.short	0xec71
    b592:	7027      	strb	r7, [r4, #0]
    b594:	7908      	ldrb	r0, [r1, #4]
    b596:	70a0      	strb	r0, [r4, #2]
    b598:	7948      	ldrb	r0, [r1, #5]
    b59a:	70e0      	strb	r0, [r4, #3]
    b59c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    b5a0:	0a00      	lsrs	r0, r0, #8
    b5a2:	7120      	strb	r0, [r4, #4]
    b5a4:	79c8      	ldrb	r0, [r1, #7]
    b5a6:	7160      	strb	r0, [r4, #5]
    b5a8:	7a08      	ldrb	r0, [r1, #8]
    b5aa:	71a0      	strb	r0, [r4, #6]
    b5ac:	8908      	ldrh	r0, [r1, #8]
    b5ae:	0a00      	lsrs	r0, r0, #8
    b5b0:	71e0      	strb	r0, [r4, #7]
    b5b2:	7a88      	ldrb	r0, [r1, #10]
    b5b4:	7220      	strb	r0, [r4, #8]
    b5b6:	8948      	ldrh	r0, [r1, #10]
    b5b8:	0a00      	lsrs	r0, r0, #8
    b5ba:	7260      	strb	r0, [r4, #9]
    b5bc:	2008      	movs	r0, #8
    b5be:	e154      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b5c0:	2010      	movs	r0, #16
    b5c2:	e000      	b.n	b5c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    b5c4:	201a      	movs	r0, #26
    b5c6:	7020      	strb	r0, [r4, #0]
    b5c8:	7908      	ldrb	r0, [r1, #4]
    b5ca:	70a0      	strb	r0, [r4, #2]
    b5cc:	e154      	b.n	b878 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    b5ce:	7022      	strb	r2, [r4, #0]
    b5d0:	2002      	movs	r0, #2
    b5d2:	70a0      	strb	r0, [r4, #2]
    b5d4:	7908      	ldrb	r0, [r1, #4]
    b5d6:	70e0      	strb	r0, [r4, #3]
    b5d8:	7b88      	ldrb	r0, [r1, #14]
    b5da:	7120      	strb	r0, [r4, #4]
    b5dc:	7948      	ldrb	r0, [r1, #5]
    b5de:	7160      	strb	r0, [r4, #5]
    b5e0:	f8d1 0006 	ldr.w	r0, [r1, #6]
    b5e4:	f8c4 0006 	str.w	r0, [r4, #6]
    b5e8:	8948      	ldrh	r0, [r1, #10]
    b5ea:	8160      	strh	r0, [r4, #10]
    b5ec:	7b08      	ldrb	r0, [r1, #12]
    b5ee:	7320      	strb	r0, [r4, #12]
    b5f0:	7b0e      	ldrb	r6, [r1, #12]
    b5f2:	1d0d      	adds	r5, r1, #4
    b5f4:	2e1f      	cmp	r6, #31
    b5f6:	d300      	bcc.n	b5fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    b5f8:	261f      	movs	r6, #31
    b5fa:	4618      	mov	r0, r3
    b5fc:	4632      	mov	r2, r6
    b5fe:	f105 010b 	add.w	r1, r5, #11
    b602:	f7ff fe4f 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b606:	360d      	adds	r6, #13
    b608:	7a69      	ldrb	r1, [r5, #9]
    b60a:	55a1      	strb	r1, [r4, r6]
    b60c:	1e76      	subs	r6, r6, #1
    b60e:	b2f0      	uxtb	r0, r6
    b610:	e129      	b.n	b866 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    b612:	7022      	strb	r2, [r4, #0]
    b614:	200b      	movs	r0, #11
    b616:	70a0      	strb	r0, [r4, #2]
    b618:	7908      	ldrb	r0, [r1, #4]
    b61a:	70e0      	strb	r0, [r4, #3]
    b61c:	7948      	ldrb	r0, [r1, #5]
    b61e:	7120      	strb	r0, [r4, #4]
    b620:	7988      	ldrb	r0, [r1, #6]
    b622:	7160      	strb	r0, [r4, #5]
    b624:	f8d1 0007 	ldr.w	r0, [r1, #7]
    b628:	f8c4 0006 	str.w	r0, [r4, #6]
    b62c:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    b630:	8160      	strh	r0, [r4, #10]
    b632:	7b48      	ldrb	r0, [r1, #13]
    b634:	7320      	strb	r0, [r4, #12]
    b636:	f8d1 000e 	ldr.w	r0, [r1, #14]
    b63a:	f8c4 000d 	str.w	r0, [r4, #13]
    b63e:	8a48      	ldrh	r0, [r1, #18]
    b640:	f8a4 0011 	strh.w	r0, [r4, #17]
    b644:	7d08      	ldrb	r0, [r1, #20]
    b646:	74e0      	strb	r0, [r4, #19]
    b648:	4630      	mov	r0, r6
    b64a:	e10e      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b64c:	4620      	mov	r0, r4
    b64e:	f000 f98d 	bl	b96c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    b652:	e108      	b.n	b866 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    b654:	e10b      	b.n	b86e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    b656:	7022      	strb	r2, [r4, #0]
    b658:	200a      	movs	r0, #10
    b65a:	70a0      	strb	r0, [r4, #2]
    b65c:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    b660:	70e0      	strb	r0, [r4, #3]
    b662:	7888      	ldrb	r0, [r1, #2]
    b664:	7120      	strb	r0, [r4, #4]
    b666:	8848      	ldrh	r0, [r1, #2]
    b668:	0a00      	lsrs	r0, r0, #8
    b66a:	7160      	strb	r0, [r4, #5]
    b66c:	7908      	ldrb	r0, [r1, #4]
    b66e:	71a0      	strb	r0, [r4, #6]
    b670:	7948      	ldrb	r0, [r1, #5]
    b672:	71e0      	strb	r0, [r4, #7]
    b674:	f8d1 0006 	ldr.w	r0, [r1, #6]
    b678:	60a0      	str	r0, [r4, #8]
    b67a:	8948      	ldrh	r0, [r1, #10]
    b67c:	81a0      	strh	r0, [r4, #12]
    b67e:	68c8      	ldr	r0, [r1, #12]
    b680:	f8c4 000e 	str.w	r0, [r4, #14]
    b684:	8a08      	ldrh	r0, [r1, #16]
    b686:	8260      	strh	r0, [r4, #18]
    b688:	f8d1 0012 	ldr.w	r0, [r1, #18]
    b68c:	6160      	str	r0, [r4, #20]
    b68e:	8ac8      	ldrh	r0, [r1, #22]
    b690:	8320      	strh	r0, [r4, #24]
    b692:	7e08      	ldrb	r0, [r1, #24]
    b694:	76a0      	strb	r0, [r4, #26]
    b696:	8b08      	ldrh	r0, [r1, #24]
    b698:	0a00      	lsrs	r0, r0, #8
    b69a:	76e0      	strb	r0, [r4, #27]
    b69c:	7e88      	ldrb	r0, [r1, #26]
    b69e:	7720      	strb	r0, [r4, #28]
    b6a0:	8b48      	ldrh	r0, [r1, #26]
    b6a2:	0a00      	lsrs	r0, r0, #8
    b6a4:	7760      	strb	r0, [r4, #29]
    b6a6:	7f08      	ldrb	r0, [r1, #28]
    b6a8:	77a0      	strb	r0, [r4, #30]
    b6aa:	8b88      	ldrh	r0, [r1, #28]
    b6ac:	0a00      	lsrs	r0, r0, #8
    b6ae:	77e0      	strb	r0, [r4, #31]
    b6b0:	7f88      	ldrb	r0, [r1, #30]
    b6b2:	f884 0020 	strb.w	r0, [r4, #32]
    b6b6:	201f      	movs	r0, #31
    b6b8:	e0d7      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b6ba:	7022      	strb	r2, [r4, #0]
    b6bc:	f884 b002 	strb.w	fp, [r4, #2]
    b6c0:	7908      	ldrb	r0, [r1, #4]
    b6c2:	70e0      	strb	r0, [r4, #3]
    b6c4:	8888      	ldrh	r0, [r1, #4]
    b6c6:	0a00      	lsrs	r0, r0, #8
    b6c8:	7120      	strb	r0, [r4, #4]
    b6ca:	7988      	ldrb	r0, [r1, #6]
    b6cc:	e0ed      	b.n	b8aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    b6ce:	7022      	strb	r2, [r4, #0]
    b6d0:	2004      	movs	r0, #4
    b6d2:	70a0      	strb	r0, [r4, #2]
    b6d4:	7908      	ldrb	r0, [r1, #4]
    b6d6:	70e0      	strb	r0, [r4, #3]
    b6d8:	7988      	ldrb	r0, [r1, #6]
    b6da:	7120      	strb	r0, [r4, #4]
    b6dc:	88c8      	ldrh	r0, [r1, #6]
    b6de:	0a00      	lsrs	r0, r0, #8
    b6e0:	7160      	strb	r0, [r4, #5]
    b6e2:	6888      	ldr	r0, [r1, #8]
    b6e4:	f8c4 0006 	str.w	r0, [r4, #6]
    b6e8:	68c8      	ldr	r0, [r1, #12]
    b6ea:	f8c4 000a 	str.w	r0, [r4, #10]
    b6ee:	200c      	movs	r0, #12
    b6f0:	e0bb      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b6f2:	7022      	strb	r2, [r4, #0]
    b6f4:	2003      	movs	r0, #3
    b6f6:	70a0      	strb	r0, [r4, #2]
    b6f8:	7908      	ldrb	r0, [r1, #4]
    b6fa:	70e0      	strb	r0, [r4, #3]
    b6fc:	7988      	ldrb	r0, [r1, #6]
    b6fe:	7120      	strb	r0, [r4, #4]
    b700:	88c8      	ldrh	r0, [r1, #6]
    b702:	0a00      	lsrs	r0, r0, #8
    b704:	7160      	strb	r0, [r4, #5]
    b706:	7a08      	ldrb	r0, [r1, #8]
    b708:	71a0      	strb	r0, [r4, #6]
    b70a:	8908      	ldrh	r0, [r1, #8]
    b70c:	0a00      	lsrs	r0, r0, #8
    b70e:	71e0      	strb	r0, [r4, #7]
    b710:	7a88      	ldrb	r0, [r1, #10]
    b712:	7220      	strb	r0, [r4, #8]
    b714:	8948      	ldrh	r0, [r1, #10]
    b716:	0a00      	lsrs	r0, r0, #8
    b718:	7260      	strb	r0, [r4, #9]
    b71a:	7b08      	ldrb	r0, [r1, #12]
    b71c:	72a0      	strb	r0, [r4, #10]
    b71e:	8988      	ldrh	r0, [r1, #12]
    b720:	0a00      	lsrs	r0, r0, #8
    b722:	72e0      	strb	r0, [r4, #11]
    b724:	e120      	b.n	b968 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    b726:	7022      	strb	r2, [r4, #0]
    b728:	f884 a002 	strb.w	sl, [r4, #2]
    b72c:	7908      	ldrb	r0, [r1, #4]
    b72e:	70e0      	strb	r0, [r4, #3]
    b730:	8888      	ldrh	r0, [r1, #4]
    b732:	0a00      	lsrs	r0, r0, #8
    b734:	7120      	strb	r0, [r4, #4]
    b736:	f8d1 0006 	ldr.w	r0, [r1, #6]
    b73a:	f8c4 0005 	str.w	r0, [r4, #5]
    b73e:	f8d1 000a 	ldr.w	r0, [r1, #10]
    b742:	f8c4 0009 	str.w	r0, [r4, #9]
    b746:	89c8      	ldrh	r0, [r1, #14]
    b748:	e010      	b.n	b76c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    b74a:	e0fa      	b.n	b942 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    b74c:	e0ce      	b.n	b8ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    b74e:	e0af      	b.n	b8b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    b750:	e0da      	b.n	b908 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    b752:	e0e8      	b.n	b926 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    b754:	e0a1      	b.n	b89a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    b756:	e08c      	b.n	b872 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    b758:	e090      	b.n	b87c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    b75a:	e033      	b.n	b7c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    b75c:	e02f      	b.n	b7be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    b75e:	e043      	b.n	b7e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    b760:	e03d      	b.n	b7de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    b762:	e021      	b.n	b7a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    b764:	e015      	b.n	b792 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    b766:	e008      	b.n	b77a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    b768:	e004      	b.n	b774 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    b76a:	e046      	b.n	b7fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    b76c:	f8a4 000d 	strh.w	r0, [r4, #13]
    b770:	200d      	movs	r0, #13
    b772:	e07a      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b774:	f884 9000 	strb.w	r9, [r4]
    b778:	e038      	b.n	b7ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    b77a:	f884 a000 	strb.w	sl, [r4]
    b77e:	7908      	ldrb	r0, [r1, #4]
    b780:	70a0      	strb	r0, [r4, #2]
    b782:	7948      	ldrb	r0, [r1, #5]
    b784:	70e0      	strb	r0, [r4, #3]
    b786:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    b78a:	0a00      	lsrs	r0, r0, #8
    b78c:	7120      	strb	r0, [r4, #4]
    b78e:	79c8      	ldrb	r0, [r1, #7]
    b790:	e08b      	b.n	b8aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    b792:	2008      	movs	r0, #8
    b794:	7020      	strb	r0, [r4, #0]
    b796:	7908      	ldrb	r0, [r1, #4]
    b798:	70a0      	strb	r0, [r4, #2]
    b79a:	7988      	ldrb	r0, [r1, #6]
    b79c:	70e0      	strb	r0, [r4, #3]
    b79e:	88c8      	ldrh	r0, [r1, #6]
    b7a0:	0a00      	lsrs	r0, r0, #8
    b7a2:	7120      	strb	r0, [r4, #4]
    b7a4:	7a08      	ldrb	r0, [r1, #8]
    b7a6:	e080      	b.n	b8aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    b7a8:	2030      	movs	r0, #48	; 0x30
    b7aa:	7020      	strb	r0, [r4, #0]
    b7ac:	7908      	ldrb	r0, [r1, #4]
    b7ae:	70a0      	strb	r0, [r4, #2]
    b7b0:	7988      	ldrb	r0, [r1, #6]
    b7b2:	70e0      	strb	r0, [r4, #3]
    b7b4:	88c8      	ldrh	r0, [r1, #6]
    b7b6:	0a00      	lsrs	r0, r0, #8
    b7b8:	7120      	strb	r0, [r4, #4]
    b7ba:	2003      	movs	r0, #3
    b7bc:	e055      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b7be:	7022      	strb	r2, [r4, #0]
    b7c0:	2007      	movs	r0, #7
    b7c2:	e077      	b.n	b8b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    b7c4:	7022      	strb	r2, [r4, #0]
    b7c6:	70a7      	strb	r7, [r4, #2]
    b7c8:	7908      	ldrb	r0, [r1, #4]
    b7ca:	70e0      	strb	r0, [r4, #3]
    b7cc:	7988      	ldrb	r0, [r1, #6]
    b7ce:	7120      	strb	r0, [r4, #4]
    b7d0:	88c8      	ldrh	r0, [r1, #6]
    b7d2:	0a00      	lsrs	r0, r0, #8
    b7d4:	7160      	strb	r0, [r4, #5]
    b7d6:	7a08      	ldrb	r0, [r1, #8]
    b7d8:	71a0      	strb	r0, [r4, #6]
    b7da:	7a48      	ldrb	r0, [r1, #9]
    b7dc:	e05a      	b.n	b894 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    b7de:	4620      	mov	r0, r4
    b7e0:	1d09      	adds	r1, r1, #4
    b7e2:	f7f8 ffa9 	bl	4738 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    b7e6:	e03e      	b.n	b866 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    b7e8:	2057      	movs	r0, #87	; 0x57
    b7ea:	7020      	strb	r0, [r4, #0]
    b7ec:	7908      	ldrb	r0, [r1, #4]
    b7ee:	70a0      	strb	r0, [r4, #2]
    b7f0:	8888      	ldrh	r0, [r1, #4]
    b7f2:	0a00      	lsrs	r0, r0, #8
    b7f4:	70e0      	strb	r0, [r4, #3]
    b7f6:	2002      	movs	r0, #2
    b7f8:	e037      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b7fa:	7022      	strb	r2, [r4, #0]
    b7fc:	220d      	movs	r2, #13
    b7fe:	70a2      	strb	r2, [r4, #2]
    b800:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    b804:	70e2      	strb	r2, [r4, #3]
    b806:	894a      	ldrh	r2, [r1, #10]
    b808:	80a2      	strh	r2, [r4, #4]
    b80a:	784a      	ldrb	r2, [r1, #1]
    b80c:	71a2      	strb	r2, [r4, #6]
    b80e:	f8d1 2002 	ldr.w	r2, [r1, #2]
    b812:	f8c4 2007 	str.w	r2, [r4, #7]
    b816:	88ca      	ldrh	r2, [r1, #6]
    b818:	f8a4 200b 	strh.w	r2, [r4, #11]
    b81c:	7b0a      	ldrb	r2, [r1, #12]
    b81e:	4620      	mov	r0, r4
    b820:	7362      	strb	r2, [r4, #13]
    b822:	7b4a      	ldrb	r2, [r1, #13]
    b824:	7382      	strb	r2, [r0, #14]
    b826:	7b8a      	ldrb	r2, [r1, #14]
    b828:	73c2      	strb	r2, [r0, #15]
    b82a:	7e8a      	ldrb	r2, [r1, #26]
    b82c:	7402      	strb	r2, [r0, #16]
    b82e:	7a4a      	ldrb	r2, [r1, #9]
    b830:	7442      	strb	r2, [r0, #17]
    b832:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    b836:	f8ad 2000 	strh.w	r2, [sp]
    b83a:	8242      	strh	r2, [r0, #18]
    b83c:	7cca      	ldrb	r2, [r1, #19]
    b83e:	7502      	strb	r2, [r0, #20]
    b840:	694a      	ldr	r2, [r1, #20]
    b842:	f8c0 2015 	str.w	r2, [r0, #21]
    b846:	8b0a      	ldrh	r2, [r1, #24]
    b848:	f8a0 2019 	strh.w	r2, [r0, #25]
    b84c:	7a0a      	ldrb	r2, [r1, #8]
    b84e:	76c2      	strb	r2, [r0, #27]
    b850:	7a0d      	ldrb	r5, [r1, #8]
    b852:	2de5      	cmp	r5, #229	; 0xe5
    b854:	d300      	bcc.n	b858 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    b856:	25e5      	movs	r5, #229	; 0xe5
    b858:	462a      	mov	r2, r5
    b85a:	301c      	adds	r0, #28
    b85c:	311c      	adds	r1, #28
    b85e:	f7ff fd21 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b862:	351a      	adds	r5, #26
    b864:	b2e8      	uxtb	r0, r5
    b866:	2800      	cmp	r0, #0
    b868:	d001      	beq.n	b86e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    b86a:	7060      	strb	r0, [r4, #1]
    b86c:	1c80      	adds	r0, r0, #2
    b86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b872:	7022      	strb	r2, [r4, #0]
    b874:	f884 9002 	strb.w	r9, [r4, #2]
    b878:	2001      	movs	r0, #1
    b87a:	e7f6      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b87c:	7022      	strb	r2, [r4, #0]
    b87e:	70a6      	strb	r6, [r4, #2]
    b880:	7908      	ldrb	r0, [r1, #4]
    b882:	70e0      	strb	r0, [r4, #3]
    b884:	7948      	ldrb	r0, [r1, #5]
    b886:	7120      	strb	r0, [r4, #4]
    b888:	7988      	ldrb	r0, [r1, #6]
    b88a:	7160      	strb	r0, [r4, #5]
    b88c:	88c8      	ldrh	r0, [r1, #6]
    b88e:	0a00      	lsrs	r0, r0, #8
    b890:	71a0      	strb	r0, [r4, #6]
    b892:	7a08      	ldrb	r0, [r1, #8]
    b894:	71e0      	strb	r0, [r4, #7]
    b896:	2006      	movs	r0, #6
    b898:	e7e7      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b89a:	7025      	strb	r5, [r4, #0]
    b89c:	20a1      	movs	r0, #161	; 0xa1
    b89e:	70a0      	strb	r0, [r4, #2]
    b8a0:	7908      	ldrb	r0, [r1, #4]
    b8a2:	70e0      	strb	r0, [r4, #3]
    b8a4:	7948      	ldrb	r0, [r1, #5]
    b8a6:	7120      	strb	r0, [r4, #4]
    b8a8:	2000      	movs	r0, #0
    b8aa:	7160      	strb	r0, [r4, #5]
    b8ac:	2004      	movs	r0, #4
    b8ae:	e7dc      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b8b0:	7025      	strb	r5, [r4, #0]
    b8b2:	20a2      	movs	r0, #162	; 0xa2
    b8b4:	70a0      	strb	r0, [r4, #2]
    b8b6:	7908      	ldrb	r0, [r1, #4]
    b8b8:	70e0      	strb	r0, [r4, #3]
    b8ba:	8888      	ldrh	r0, [r1, #4]
    b8bc:	0a00      	lsrs	r0, r0, #8
    b8be:	7120      	strb	r0, [r4, #4]
    b8c0:	7988      	ldrb	r0, [r1, #6]
    b8c2:	7160      	strb	r0, [r4, #5]
    b8c4:	88c8      	ldrh	r0, [r1, #6]
    b8c6:	0a00      	lsrs	r0, r0, #8
    b8c8:	71a0      	strb	r0, [r4, #6]
    b8ca:	7a08      	ldrb	r0, [r1, #8]
    b8cc:	71e0      	strb	r0, [r4, #7]
    b8ce:	8908      	ldrh	r0, [r1, #8]
    b8d0:	0a00      	lsrs	r0, r0, #8
    b8d2:	7220      	strb	r0, [r4, #8]
    b8d4:	7a88      	ldrb	r0, [r1, #10]
    b8d6:	7260      	strb	r0, [r4, #9]
    b8d8:	8948      	ldrh	r0, [r1, #10]
    b8da:	0a00      	lsrs	r0, r0, #8
    b8dc:	72a0      	strb	r0, [r4, #10]
    b8de:	7b08      	ldrb	r0, [r1, #12]
    b8e0:	72e0      	strb	r0, [r4, #11]
    b8e2:	8988      	ldrh	r0, [r1, #12]
    b8e4:	0a00      	lsrs	r0, r0, #8
    b8e6:	7320      	strb	r0, [r4, #12]
    b8e8:	200b      	movs	r0, #11
    b8ea:	e7be      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b8ec:	7025      	strb	r5, [r4, #0]
    b8ee:	20a3      	movs	r0, #163	; 0xa3
    b8f0:	70a0      	strb	r0, [r4, #2]
    b8f2:	7908      	ldrb	r0, [r1, #4]
    b8f4:	70e0      	strb	r0, [r4, #3]
    b8f6:	8888      	ldrh	r0, [r1, #4]
    b8f8:	0a00      	lsrs	r0, r0, #8
    b8fa:	7120      	strb	r0, [r4, #4]
    b8fc:	7988      	ldrb	r0, [r1, #6]
    b8fe:	7160      	strb	r0, [r4, #5]
    b900:	79c8      	ldrb	r0, [r1, #7]
    b902:	71a0      	strb	r0, [r4, #6]
    b904:	2005      	movs	r0, #5
    b906:	e7b0      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b908:	7022      	strb	r2, [r4, #0]
    b90a:	f884 e002 	strb.w	lr, [r4, #2]
    b90e:	7908      	ldrb	r0, [r1, #4]
    b910:	70e0      	strb	r0, [r4, #3]
    b912:	7948      	ldrb	r0, [r1, #5]
    b914:	7120      	strb	r0, [r4, #4]
    b916:	f8d1 0006 	ldr.w	r0, [r1, #6]
    b91a:	f8c4 0005 	str.w	r0, [r4, #5]
    b91e:	8948      	ldrh	r0, [r1, #10]
    b920:	f8a4 0009 	strh.w	r0, [r4, #9]
    b924:	e020      	b.n	b968 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    b926:	7025      	strb	r5, [r4, #0]
    b928:	20a4      	movs	r0, #164	; 0xa4
    b92a:	70a0      	strb	r0, [r4, #2]
    b92c:	7908      	ldrb	r0, [r1, #4]
    b92e:	70e0      	strb	r0, [r4, #3]
    b930:	8888      	ldrh	r0, [r1, #4]
    b932:	0a00      	lsrs	r0, r0, #8
    b934:	7120      	strb	r0, [r4, #4]
    b936:	7988      	ldrb	r0, [r1, #6]
    b938:	7160      	strb	r0, [r4, #5]
    b93a:	79c8      	ldrb	r0, [r1, #7]
    b93c:	71a0      	strb	r0, [r4, #6]
    b93e:	2007      	movs	r0, #7
    b940:	e793      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    b942:	7025      	strb	r5, [r4, #0]
    b944:	2080      	movs	r0, #128	; 0x80
    b946:	70a0      	strb	r0, [r4, #2]
    b948:	888a      	ldrh	r2, [r1, #4]
    b94a:	f8a4 2003 	strh.w	r2, [r4, #3]
    b94e:	88ca      	ldrh	r2, [r1, #6]
    b950:	f8a4 2005 	strh.w	r2, [r4, #5]
    b954:	7a0a      	ldrb	r2, [r1, #8]
    b956:	71e2      	strb	r2, [r4, #7]
    b958:	7a4a      	ldrb	r2, [r1, #9]
    b95a:	8122      	strh	r2, [r4, #8]
    b95c:	7a8a      	ldrb	r2, [r1, #10]
    b95e:	72a2      	strb	r2, [r4, #10]
    b960:	7ac9      	ldrb	r1, [r1, #11]
    b962:	f001 0101 	and.w	r1, r1, #1
    b966:	72e1      	strb	r1, [r4, #11]
    b968:	200a      	movs	r0, #10
    b96a:	e77e      	b.n	b86a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000b96c <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    b96c:	223e      	movs	r2, #62	; 0x3e
    b96e:	7002      	strb	r2, [r0, #0]
    b970:	2201      	movs	r2, #1
    b972:	7082      	strb	r2, [r0, #2]
    b974:	790a      	ldrb	r2, [r1, #4]
    b976:	70c2      	strb	r2, [r0, #3]
    b978:	798a      	ldrb	r2, [r1, #6]
    b97a:	7102      	strb	r2, [r0, #4]
    b97c:	88ca      	ldrh	r2, [r1, #6]
    b97e:	0a12      	lsrs	r2, r2, #8
    b980:	7142      	strb	r2, [r0, #5]
    b982:	7a0a      	ldrb	r2, [r1, #8]
    b984:	7182      	strb	r2, [r0, #6]
    b986:	7a4a      	ldrb	r2, [r1, #9]
    b988:	71c2      	strb	r2, [r0, #7]
    b98a:	f8d1 200a 	ldr.w	r2, [r1, #10]
    b98e:	6082      	str	r2, [r0, #8]
    b990:	89ca      	ldrh	r2, [r1, #14]
    b992:	8182      	strh	r2, [r0, #12]
    b994:	7c0a      	ldrb	r2, [r1, #16]
    b996:	7382      	strb	r2, [r0, #14]
    b998:	8a0a      	ldrh	r2, [r1, #16]
    b99a:	0a12      	lsrs	r2, r2, #8
    b99c:	73c2      	strb	r2, [r0, #15]
    b99e:	7c8a      	ldrb	r2, [r1, #18]
    b9a0:	7402      	strb	r2, [r0, #16]
    b9a2:	8a4a      	ldrh	r2, [r1, #18]
    b9a4:	0a12      	lsrs	r2, r2, #8
    b9a6:	7442      	strb	r2, [r0, #17]
    b9a8:	7d0a      	ldrb	r2, [r1, #20]
    b9aa:	7482      	strb	r2, [r0, #18]
    b9ac:	8a8a      	ldrh	r2, [r1, #20]
    b9ae:	0a12      	lsrs	r2, r2, #8
    b9b0:	74c2      	strb	r2, [r0, #19]
    b9b2:	7d89      	ldrb	r1, [r1, #22]
    b9b4:	7501      	strb	r1, [r0, #20]
    b9b6:	2013      	movs	r0, #19
    b9b8:	4770      	bx	lr

0000b9ba <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    b9ba:	223e      	movs	r2, #62	; 0x3e
    b9bc:	7002      	strb	r2, [r0, #0]
    b9be:	2201      	movs	r2, #1
    b9c0:	7082      	strb	r2, [r0, #2]
    b9c2:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    b9c6:	70c2      	strb	r2, [r0, #3]
    b9c8:	788a      	ldrb	r2, [r1, #2]
    b9ca:	7102      	strb	r2, [r0, #4]
    b9cc:	884a      	ldrh	r2, [r1, #2]
    b9ce:	0a12      	lsrs	r2, r2, #8
    b9d0:	7142      	strb	r2, [r0, #5]
    b9d2:	790a      	ldrb	r2, [r1, #4]
    b9d4:	7182      	strb	r2, [r0, #6]
    b9d6:	794a      	ldrb	r2, [r1, #5]
    b9d8:	71c2      	strb	r2, [r0, #7]
    b9da:	f8d1 2006 	ldr.w	r2, [r1, #6]
    b9de:	6082      	str	r2, [r0, #8]
    b9e0:	894a      	ldrh	r2, [r1, #10]
    b9e2:	8182      	strh	r2, [r0, #12]
    b9e4:	7e0a      	ldrb	r2, [r1, #24]
    b9e6:	7382      	strb	r2, [r0, #14]
    b9e8:	8b0a      	ldrh	r2, [r1, #24]
    b9ea:	0a12      	lsrs	r2, r2, #8
    b9ec:	73c2      	strb	r2, [r0, #15]
    b9ee:	7e8a      	ldrb	r2, [r1, #26]
    b9f0:	7402      	strb	r2, [r0, #16]
    b9f2:	8b4a      	ldrh	r2, [r1, #26]
    b9f4:	0a12      	lsrs	r2, r2, #8
    b9f6:	7442      	strb	r2, [r0, #17]
    b9f8:	7f0a      	ldrb	r2, [r1, #28]
    b9fa:	7482      	strb	r2, [r0, #18]
    b9fc:	8b8a      	ldrh	r2, [r1, #28]
    b9fe:	0a12      	lsrs	r2, r2, #8
    ba00:	74c2      	strb	r2, [r0, #19]
    ba02:	7f89      	ldrb	r1, [r1, #30]
    ba04:	7501      	strb	r1, [r0, #20]
    ba06:	2113      	movs	r1, #19
    ba08:	7041      	strb	r1, [r0, #1]
    ba0a:	4608      	mov	r0, r1
    ba0c:	4770      	bx	lr

0000ba0e <sdc_hci_evt_get>:
    ba0e:	b510      	push	{r4, lr}
    ba10:	b120      	cbz	r0, ba1c <sdc_hci_evt_get+0xe>
    ba12:	f7ff fd72 	bl	b4fa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    ba16:	b120      	cbz	r0, ba22 <sdc_hci_evt_get+0x14>
    ba18:	2000      	movs	r0, #0
    ba1a:	bd10      	pop	{r4, pc}
    ba1c:	f06f 0015 	mvn.w	r0, #21
    ba20:	bd10      	pop	{r4, pc}
    ba22:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ba26:	bd10      	pop	{r4, pc}

0000ba28 <sdc_hci_cmd_cb_set_event_mask>:
    ba28:	b510      	push	{r4, lr}
    ba2a:	f7f8 fee3 	bl	47f4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    ba2e:	2000      	movs	r0, #0
    ba30:	bd10      	pop	{r4, pc}

0000ba32 <sdc_hci_cmd_vs_conn_event_extend>:
    ba32:	b508      	push	{r3, lr}
    ba34:	7800      	ldrb	r0, [r0, #0]
    ba36:	f88d 0000 	strb.w	r0, [sp]
    ba3a:	4668      	mov	r0, sp
    ba3c:	f001 fd67 	bl	d50e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ba40:	bd08      	pop	{r3, pc}

0000ba42 <sdc_hci_cmd_vs_conn_update>:
    ba42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ba44:	2100      	movs	r1, #0
    ba46:	9100      	str	r1, [sp, #0]
    ba48:	9101      	str	r1, [sp, #4]
    ba4a:	9102      	str	r1, [sp, #8]
    ba4c:	9103      	str	r1, [sp, #12]
    ba4e:	f8d0 1002 	ldr.w	r1, [r0, #2]
    ba52:	f641 524c 	movw	r2, #7500	; 0x1d4c
    ba56:	4291      	cmp	r1, r2
    ba58:	d304      	bcc.n	ba64 <sdc_hci_cmd_vs_conn_update+0x22>
    ba5a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ba5e:	fbb1 f1f2 	udiv	r1, r1, r2
    ba62:	e005      	b.n	ba70 <sdc_hci_cmd_vs_conn_update+0x2e>
    ba64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba68:	fbb1 f1f2 	udiv	r1, r1, r2
    ba6c:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    ba70:	8802      	ldrh	r2, [r0, #0]
    ba72:	b289      	uxth	r1, r1
    ba74:	f8ad 2000 	strh.w	r2, [sp]
    ba78:	f8ad 1002 	strh.w	r1, [sp, #2]
    ba7c:	f8ad 1004 	strh.w	r1, [sp, #4]
    ba80:	88c1      	ldrh	r1, [r0, #6]
    ba82:	f8ad 1006 	strh.w	r1, [sp, #6]
    ba86:	8900      	ldrh	r0, [r0, #8]
    ba88:	f8ad 0008 	strh.w	r0, [sp, #8]
    ba8c:	4668      	mov	r0, sp
    ba8e:	f001 fc08 	bl	d2a2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    ba92:	b004      	add	sp, #16
    ba94:	bd10      	pop	{r4, pc}

0000ba96 <sdc_hci_cmd_vs_event_length_set>:
    ba96:	f7fd bfab 	b.w	99f0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ba9a <sdc_hci_cmd_vs_llpm_mode_set>:
    ba9a:	2001      	movs	r0, #1
    ba9c:	4770      	bx	lr

0000ba9e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ba9e:	7800      	ldrb	r0, [r0, #0]
    baa0:	b100      	cbz	r0, baa4 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    baa2:	2001      	movs	r0, #1
    baa4:	f001 bd0b 	b.w	d4be <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000baa8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    baa8:	b570      	push	{r4, r5, r6, lr}
    baaa:	4605      	mov	r5, r0
    baac:	2210      	movs	r2, #16
    baae:	2100      	movs	r1, #0
    bab0:	f7ff fc72 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bab4:	2210      	movs	r2, #16
    bab6:	2100      	movs	r1, #0
    bab8:	f105 0010 	add.w	r0, r5, #16
    babc:	f7ff fc6c 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bac0:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    bac4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    bac8:	1c40      	adds	r0, r0, #1
    baca:	d10b      	bne.n	bae4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bacc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    bad0:	1c40      	adds	r0, r0, #1
    bad2:	d107      	bne.n	bae4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bad4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    bad8:	1c40      	adds	r0, r0, #1
    bada:	d103      	bne.n	bae4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    badc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    bae0:	1c40      	adds	r0, r0, #1
    bae2:	d00b      	beq.n	bafc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    bae4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    bae8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    baec:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    baf0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    baf4:	612a      	str	r2, [r5, #16]
    baf6:	6168      	str	r0, [r5, #20]
    baf8:	61a9      	str	r1, [r5, #24]
    bafa:	61eb      	str	r3, [r5, #28]
    bafc:	2000      	movs	r0, #0
    bafe:	f7f9 fa7d 	bl	4ffc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    bb02:	b918      	cbnz	r0, bb0c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    bb04:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    bb08:	07c0      	lsls	r0, r0, #31
    bb0a:	d118      	bne.n	bb3e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    bb0c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    bb10:	1c40      	adds	r0, r0, #1
    bb12:	d10b      	bne.n	bb2c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    bb14:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    bb18:	1c40      	adds	r0, r0, #1
    bb1a:	d107      	bne.n	bb2c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    bb1c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    bb20:	1c40      	adds	r0, r0, #1
    bb22:	d103      	bne.n	bb2c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    bb24:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    bb28:	1c40      	adds	r0, r0, #1
    bb2a:	d008      	beq.n	bb3e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    bb2c:	f854 0f90 	ldr.w	r0, [r4, #144]!
    bb30:	6861      	ldr	r1, [r4, #4]
    bb32:	68a2      	ldr	r2, [r4, #8]
    bb34:	68e3      	ldr	r3, [r4, #12]
    bb36:	6028      	str	r0, [r5, #0]
    bb38:	6069      	str	r1, [r5, #4]
    bb3a:	60aa      	str	r2, [r5, #8]
    bb3c:	60eb      	str	r3, [r5, #12]
    bb3e:	2000      	movs	r0, #0
    bb40:	bd70      	pop	{r4, r5, r6, pc}

0000bb42 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    bb42:	b538      	push	{r3, r4, r5, lr}
    bb44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    bb48:	4604      	mov	r4, r0
    bb4a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    bb4e:	1c40      	adds	r0, r0, #1
    bb50:	d105      	bne.n	bb5e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    bb52:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    bb56:	43c0      	mvns	r0, r0
    bb58:	0400      	lsls	r0, r0, #16
    bb5a:	0c00      	lsrs	r0, r0, #16
    bb5c:	d03e      	beq.n	bbdc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    bb5e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    bb62:	07c0      	lsls	r0, r0, #31
    bb64:	d03a      	beq.n	bbdc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    bb66:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    bb6a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    bb6e:	f8ad 1000 	strh.w	r1, [sp]
    bb72:	f8c4 0001 	str.w	r0, [r4, #1]
    bb76:	f8bd 0000 	ldrh.w	r0, [sp]
    bb7a:	f8a4 0005 	strh.w	r0, [r4, #5]
    bb7e:	79a0      	ldrb	r0, [r4, #6]
    bb80:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    bb84:	71a0      	strb	r0, [r4, #6]
    bb86:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    bb8a:	1c40      	adds	r0, r0, #1
    bb8c:	d00f      	beq.n	bbae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    bb8e:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    bb92:	1c40      	adds	r0, r0, #1
    bb94:	d00b      	beq.n	bbae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    bb96:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    bb9a:	1c40      	adds	r0, r0, #1
    bb9c:	d007      	beq.n	bbae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    bb9e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    bba2:	1c40      	adds	r0, r0, #1
    bba4:	d003      	beq.n	bbae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    bba6:	2000      	movs	r0, #0
    bba8:	f7f9 fa28 	bl	4ffc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    bbac:	b140      	cbz	r0, bbc0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    bbae:	2210      	movs	r2, #16
    bbb0:	2100      	movs	r1, #0
    bbb2:	1de0      	adds	r0, r4, #7
    bbb4:	f7ff fbf0 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bbb8:	2001      	movs	r0, #1
    bbba:	7020      	strb	r0, [r4, #0]
    bbbc:	2000      	movs	r0, #0
    bbbe:	bd38      	pop	{r3, r4, r5, pc}
    bbc0:	f855 2f90 	ldr.w	r2, [r5, #144]!
    bbc4:	6869      	ldr	r1, [r5, #4]
    bbc6:	68a8      	ldr	r0, [r5, #8]
    bbc8:	68eb      	ldr	r3, [r5, #12]
    bbca:	f8c4 2007 	str.w	r2, [r4, #7]
    bbce:	f8c4 100b 	str.w	r1, [r4, #11]
    bbd2:	f8c4 000f 	str.w	r0, [r4, #15]
    bbd6:	f8c4 3013 	str.w	r3, [r4, #19]
    bbda:	e7ed      	b.n	bbb8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    bbdc:	2000      	movs	r0, #0
    bbde:	e7ec      	b.n	bbba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000bbe0 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    bbe0:	f001 bc87 	b.w	d4f2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000bbe4 <sdc_hci_cmd_ip_read_bd_addr>:
    bbe4:	f001 bca7 	b.w	d536 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000bbe8 <sdc_hci_cmd_ip_read_local_version_information>:
    bbe8:	f7fd bf4e 	b.w	9a88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000bbec <sdc_hci_cmd_le_add_device_to_resolving_list>:
    bbec:	f001 bb10 	b.w	d210 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000bbf0 <sdc_hci_cmd_le_add_device_to_white_list>:
    bbf0:	f001 bb29 	b.w	d246 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000bbf4 <sdc_hci_cmd_le_clear_resolving_list>:
    bbf4:	f001 bb3e 	b.w	d274 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000bbf8 <sdc_hci_cmd_le_clear_white_list>:
    bbf8:	f001 bb49 	b.w	d28e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000bbfc <sdc_hci_cmd_le_encrypt>:
    bbfc:	f001 bb93 	b.w	d326 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000bc00 <sdc_hci_cmd_le_rand>:
    bc00:	f001 bb9a 	b.w	d338 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000bc04 <sdc_hci_cmd_le_read_buffer_size>:
    bc04:	f7fd bed4 	b.w	99b0 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000bc08 <sdc_hci_cmd_le_read_resolving_list_size>:
    bc08:	f001 bb9c 	b.w	d344 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000bc0c <sdc_hci_cmd_le_read_transmit_power>:
    bc0c:	f001 bb9e 	b.w	d34c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000bc10 <sdc_hci_cmd_le_read_white_list_size>:
    bc10:	f001 bba5 	b.w	d35e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000bc14 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    bc14:	f001 bba7 	b.w	d366 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000bc18 <sdc_hci_cmd_le_remove_device_from_white_list>:
    bc18:	f001 bbbe 	b.w	d398 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000bc1c <sdc_hci_cmd_le_set_address_resolution_enable>:
    bc1c:	f001 bbd1 	b.w	d3c2 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000bc20 <sdc_hci_cmd_le_set_event_mask>:
    bc20:	b510      	push	{r4, lr}
    bc22:	f7f8 fde1 	bl	47e8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    bc26:	2000      	movs	r0, #0
    bc28:	bd10      	pop	{r4, pc}

0000bc2a <sdc_hci_cmd_le_set_privacy_mode>:
    bc2a:	f001 bbd8 	b.w	d3de <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000bc2e <sdc_hci_cmd_le_set_random_address>:
    bc2e:	f001 bbec 	b.w	d40a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000bc32 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    bc32:	f001 bbf8 	b.w	d426 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000bc36 <sdc_hci_cmd_le_set_scan_enable>:
    bc36:	f001 bbff 	b.w	d438 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000bc3a <sdc_hci_cmd_le_set_scan_params>:
    bc3a:	f001 bc13 	b.w	d464 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>
    bc3e:	b570      	push	{r4, r5, r6, lr}
    bc40:	880b      	ldrh	r3, [r1, #0]
    bc42:	7f04      	ldrb	r4, [r0, #28]
    bc44:	f100 0524 	add.w	r5, r0, #36	; 0x24
    bc48:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    bc4c:	8802      	ldrh	r2, [r0, #0]
    bc4e:	4435      	add	r5, r6
    bc50:	1da4      	adds	r4, r4, #6
    bc52:	882d      	ldrh	r5, [r5, #0]
    bc54:	4422      	add	r2, r4
    bc56:	b292      	uxth	r2, r2
    bc58:	4425      	add	r5, r4
    bc5a:	1e54      	subs	r4, r2, #1
    bc5c:	442c      	add	r4, r5
    bc5e:	fb94 f4f2 	sdiv	r4, r4, r2
    bc62:	fb02 6204 	mla	r2, r2, r4, r6
    bc66:	8840      	ldrh	r0, [r0, #2]
    bc68:	b292      	uxth	r2, r2
    bc6a:	4290      	cmp	r0, r2
    bc6c:	d903      	bls.n	bc76 <sdc_hci_cmd_le_set_scan_params+0x3c>
    bc6e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    bc72:	4310      	orrs	r0, r2
    bc74:	e002      	b.n	bc7c <sdc_hci_cmd_le_set_scan_params+0x42>
    bc76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    bc7a:	4398      	bics	r0, r3
    bc7c:	8008      	strh	r0, [r1, #0]
    bc7e:	bd70      	pop	{r4, r5, r6, pc}
    bc80:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    bc84:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    bc88:	429a      	cmp	r2, r3
    bc8a:	d107      	bne.n	bc9c <sdc_hci_cmd_le_set_scan_params+0x62>
    bc8c:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    bc90:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    bc94:	4288      	cmp	r0, r1
    bc96:	d001      	beq.n	bc9c <sdc_hci_cmd_le_set_scan_params+0x62>
    bc98:	2001      	movs	r0, #1
    bc9a:	4770      	bx	lr
    bc9c:	2000      	movs	r0, #0
    bc9e:	4770      	bx	lr

0000bca0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    bca0:	8881      	ldrh	r1, [r0, #4]
    bca2:	88c0      	ldrh	r0, [r0, #6]
    bca4:	4288      	cmp	r0, r1
    bca6:	d101      	bne.n	bcac <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    bca8:	2001      	movs	r0, #1
    bcaa:	4770      	bx	lr
    bcac:	2000      	movs	r0, #0
    bcae:	4770      	bx	lr

0000bcb0 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    bcb0:	8881      	ldrh	r1, [r0, #4]
    bcb2:	8900      	ldrh	r0, [r0, #8]
    bcb4:	4288      	cmp	r0, r1
    bcb6:	d101      	bne.n	bcbc <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    bcb8:	2001      	movs	r0, #1
    bcba:	4770      	bx	lr
    bcbc:	2000      	movs	r0, #0
    bcbe:	4770      	bx	lr

0000bcc0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    bcc0:	b570      	push	{r4, r5, r6, lr}
    bcc2:	4604      	mov	r4, r0
    bcc4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    bcc8:	8880      	ldrh	r0, [r0, #4]
    bcca:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    bcce:	4401      	add	r1, r0
    bcd0:	8a20      	ldrh	r0, [r4, #16]
    bcd2:	2800      	cmp	r0, #0
    bcd4:	d01a      	beq.n	bd0c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    bcd6:	89a2      	ldrh	r2, [r4, #12]
    bcd8:	2500      	movs	r5, #0
    bcda:	4410      	add	r0, r2
    bcdc:	b280      	uxth	r0, r0
    bcde:	81a0      	strh	r0, [r4, #12]
    bce0:	880a      	ldrh	r2, [r1, #0]
    bce2:	4290      	cmp	r0, r2
    bce4:	d905      	bls.n	bcf2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    bce6:	f240 1163 	movw	r1, #355	; 0x163
    bcea:	f04f 0014 	mov.w	r0, #20
    bcee:	f7f8 fc3d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcf2:	d109      	bne.n	bd08 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    bcf4:	69a0      	ldr	r0, [r4, #24]
    bcf6:	b108      	cbz	r0, bcfc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    bcf8:	7f40      	ldrb	r0, [r0, #29]
    bcfa:	7088      	strb	r0, [r1, #2]
    bcfc:	f104 0104 	add.w	r1, r4, #4
    bd00:	4620      	mov	r0, r4
    bd02:	f7ff ff9c 	bl	bc3e <sdc_hci_cmd_le_set_scan_params+0x4>
    bd06:	81a5      	strh	r5, [r4, #12]
    bd08:	8225      	strh	r5, [r4, #16]
    bd0a:	2001      	movs	r0, #1
    bd0c:	bd70      	pop	{r4, r5, r6, pc}

0000bd0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    bd0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd10:	4604      	mov	r4, r0
    bd12:	f100 0324 	add.w	r3, r0, #36	; 0x24
    bd16:	88c0      	ldrh	r0, [r0, #6]
    bd18:	460e      	mov	r6, r1
    bd1a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    bd1e:	8a60      	ldrh	r0, [r4, #18]
    bd20:	19d9      	adds	r1, r3, r7
    bd22:	b108      	cbz	r0, bd28 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    bd24:	42b0      	cmp	r0, r6
    bd26:	d201      	bcs.n	bd2c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    bd28:	2000      	movs	r0, #0
    bd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd2c:	89e0      	ldrh	r0, [r4, #14]
    bd2e:	2500      	movs	r5, #0
    bd30:	b140      	cbz	r0, bd44 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    bd32:	f8b1 c000 	ldrh.w	ip, [r1]
    bd36:	4560      	cmp	r0, ip
    bd38:	d008      	beq.n	bd4c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    bd3a:	f240 214b 	movw	r1, #587	; 0x24b
    bd3e:	2014      	movs	r0, #20
    bd40:	f7f8 fc14 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd44:	7f60      	ldrb	r0, [r4, #29]
    bd46:	7088      	strb	r0, [r1, #2]
    bd48:	800d      	strh	r5, [r1, #0]
    bd4a:	e00e      	b.n	bd6a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    bd4c:	f894 c01c 	ldrb.w	ip, [r4, #28]
    bd50:	4418      	add	r0, r3
    bd52:	f10c 0c06 	add.w	ip, ip, #6
    bd56:	44bc      	add	ip, r7
    bd58:	4460      	add	r0, ip
    bd5a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    bd5e:	f820 cc03 	strh.w	ip, [r0, #-3]
    bd62:	f894 c020 	ldrb.w	ip, [r4, #32]
    bd66:	f800 cc01 	strb.w	ip, [r0, #-1]
    bd6a:	89e0      	ldrh	r0, [r4, #14]
    bd6c:	4430      	add	r0, r6
    bd6e:	81e0      	strh	r0, [r4, #14]
    bd70:	8808      	ldrh	r0, [r1, #0]
    bd72:	4430      	add	r0, r6
    bd74:	8008      	strh	r0, [r1, #0]
    bd76:	b19a      	cbz	r2, bda0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    bd78:	1da1      	adds	r1, r4, #6
    bd7a:	4620      	mov	r0, r4
    bd7c:	f7ff ff5f 	bl	bc3e <sdc_hci_cmd_le_set_scan_params+0x4>
    bd80:	81e5      	strh	r5, [r4, #14]
    bd82:	7f60      	ldrb	r0, [r4, #29]
    bd84:	1c40      	adds	r0, r0, #1
    bd86:	7760      	strb	r0, [r4, #29]
    bd88:	7da0      	ldrb	r0, [r4, #22]
    bd8a:	f88d 0000 	strb.w	r0, [sp]
    bd8e:	9800      	ldr	r0, [sp, #0]
    bd90:	9000      	str	r0, [sp, #0]
    bd92:	f89d 0000 	ldrb.w	r0, [sp]
    bd96:	b178      	cbz	r0, bdb8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    bd98:	88e0      	ldrh	r0, [r4, #6]
    bd9a:	82a0      	strh	r0, [r4, #20]
    bd9c:	75a5      	strb	r5, [r4, #22]
    bd9e:	e00b      	b.n	bdb8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    bda0:	7f20      	ldrb	r0, [r4, #28]
    bda2:	89e1      	ldrh	r1, [r4, #14]
    bda4:	1d80      	adds	r0, r0, #6
    bda6:	4438      	add	r0, r7
    bda8:	4419      	add	r1, r3
    bdaa:	4408      	add	r0, r1
    bdac:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    bdb0:	83e1      	strh	r1, [r4, #30]
    bdb2:	7880      	ldrb	r0, [r0, #2]
    bdb4:	f884 0020 	strb.w	r0, [r4, #32]
    bdb8:	8265      	strh	r5, [r4, #18]
    bdba:	2001      	movs	r0, #1
    bdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bdbe <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    bdbe:	1cc0      	adds	r0, r0, #3
    bdc0:	4770      	bx	lr

0000bdc2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    bdc2:	b510      	push	{r4, lr}
    bdc4:	88c2      	ldrh	r2, [r0, #6]
    bdc6:	8943      	ldrh	r3, [r0, #10]
    bdc8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    bdcc:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    bdd0:	1a61      	subs	r1, r4, r1
    bdd2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    bdd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    bdda:	429a      	cmp	r2, r3
    bddc:	d101      	bne.n	bde2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    bdde:	8842      	ldrh	r2, [r0, #2]
    bde0:	4411      	add	r1, r2
    bde2:	7f02      	ldrb	r2, [r0, #28]
    bde4:	8800      	ldrh	r0, [r0, #0]
    bde6:	4410      	add	r0, r2
    bde8:	1d80      	adds	r0, r0, #6
    bdea:	b280      	uxth	r0, r0
    bdec:	fb91 f0f0 	sdiv	r0, r1, r0
    bdf0:	b280      	uxth	r0, r0
    bdf2:	bd10      	pop	{r4, pc}

0000bdf4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    bdf4:	b510      	push	{r4, lr}
    bdf6:	4604      	mov	r4, r0
    bdf8:	88c0      	ldrh	r0, [r0, #6]
    bdfa:	88a1      	ldrh	r1, [r4, #4]
    bdfc:	4281      	cmp	r1, r0
    bdfe:	d007      	beq.n	be10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    be00:	89a0      	ldrh	r0, [r4, #12]
    be02:	b928      	cbnz	r0, be10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    be04:	8a20      	ldrh	r0, [r4, #16]
    be06:	b918      	cbnz	r0, be10 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    be08:	88a0      	ldrh	r0, [r4, #4]
    be0a:	8aa1      	ldrh	r1, [r4, #20]
    be0c:	4288      	cmp	r0, r1
    be0e:	d101      	bne.n	be14 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    be10:	2000      	movs	r0, #0
    be12:	bd10      	pop	{r4, pc}
    be14:	1d21      	adds	r1, r4, #4
    be16:	4620      	mov	r0, r4
    be18:	f7ff ff11 	bl	bc3e <sdc_hci_cmd_le_set_scan_params+0x4>
    be1c:	2000      	movs	r0, #0
    be1e:	8220      	strh	r0, [r4, #16]
    be20:	2001      	movs	r0, #1
    be22:	bd10      	pop	{r4, pc}

0000be24 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    be24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be28:	8941      	ldrh	r1, [r0, #10]
    be2a:	8886      	ldrh	r6, [r0, #4]
    be2c:	4604      	mov	r4, r0
    be2e:	2500      	movs	r5, #0
    be30:	f100 070a 	add.w	r7, r0, #10
    be34:	e006      	b.n	be44 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    be36:	4639      	mov	r1, r7
    be38:	4620      	mov	r0, r4
    be3a:	f7ff ff00 	bl	bc3e <sdc_hci_cmd_le_set_scan_params+0x4>
    be3e:	1c6d      	adds	r5, r5, #1
    be40:	8961      	ldrh	r1, [r4, #10]
    be42:	b2ad      	uxth	r5, r5
    be44:	42b1      	cmp	r1, r6
    be46:	d1f6      	bne.n	be36 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    be48:	4628      	mov	r0, r5
    be4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000be4e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    be4e:	b530      	push	{r4, r5, lr}
    be50:	88c4      	ldrh	r4, [r0, #6]
    be52:	8881      	ldrh	r1, [r0, #4]
    be54:	f100 0224 	add.w	r2, r0, #36	; 0x24
    be58:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    be5c:	4413      	add	r3, r2
    be5e:	8882      	ldrh	r2, [r0, #4]
    be60:	8a85      	ldrh	r5, [r0, #20]
    be62:	42aa      	cmp	r2, r5
    be64:	d012      	beq.n	be8c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    be66:	42a1      	cmp	r1, r4
    be68:	d010      	beq.n	be8c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    be6a:	8981      	ldrh	r1, [r0, #12]
    be6c:	b971      	cbnz	r1, be8c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    be6e:	6982      	ldr	r2, [r0, #24]
    be70:	b172      	cbz	r2, be90 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    be72:	4610      	mov	r0, r2
    be74:	f7ff ff1c 	bl	bcb0 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    be78:	b950      	cbnz	r0, be90 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    be7a:	8910      	ldrh	r0, [r2, #8]
    be7c:	3224      	adds	r2, #36	; 0x24
    be7e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    be82:	4410      	add	r0, r2
    be84:	7899      	ldrb	r1, [r3, #2]
    be86:	7880      	ldrb	r0, [r0, #2]
    be88:	4288      	cmp	r0, r1
    be8a:	d101      	bne.n	be90 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    be8c:	2000      	movs	r0, #0
    be8e:	bd30      	pop	{r4, r5, pc}
    be90:	4618      	mov	r0, r3
    be92:	bd30      	pop	{r4, r5, pc}

0000be94 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    be94:	8803      	ldrh	r3, [r0, #0]
    be96:	2b45      	cmp	r3, #69	; 0x45
    be98:	d200      	bcs.n	be9c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    be9a:	2345      	movs	r3, #69	; 0x45
    be9c:	8013      	strh	r3, [r2, #0]
    be9e:	88c2      	ldrh	r2, [r0, #6]
    bea0:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    bea4:	f100 0224 	add.w	r2, r0, #36	; 0x24
    bea8:	441a      	add	r2, r3
    beaa:	600a      	str	r2, [r1, #0]
    beac:	89c0      	ldrh	r0, [r0, #14]
    beae:	4770      	bx	lr

0000beb0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    beb0:	7f00      	ldrb	r0, [r0, #28]
    beb2:	1d80      	adds	r0, r0, #6
    beb4:	4408      	add	r0, r1
    beb6:	1ec0      	subs	r0, r0, #3
    beb8:	6010      	str	r0, [r2, #0]
    beba:	8808      	ldrh	r0, [r1, #0]
    bebc:	4770      	bx	lr

0000bebe <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    bebe:	b538      	push	{r3, r4, r5, lr}
    bec0:	88c4      	ldrh	r4, [r0, #6]
    bec2:	8881      	ldrh	r1, [r0, #4]
    bec4:	f100 0224 	add.w	r2, r0, #36	; 0x24
    bec8:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    becc:	441a      	add	r2, r3
    bece:	42a1      	cmp	r1, r4
    bed0:	d010      	beq.n	bef4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    bed2:	8983      	ldrh	r3, [r0, #12]
    bed4:	8a05      	ldrh	r5, [r0, #16]
    bed6:	8812      	ldrh	r2, [r2, #0]
    bed8:	442b      	add	r3, r5
    beda:	4293      	cmp	r3, r2
    bedc:	d308      	bcc.n	bef0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    bede:	f8ad 1000 	strh.w	r1, [sp]
    bee2:	4669      	mov	r1, sp
    bee4:	f7ff feab 	bl	bc3e <sdc_hci_cmd_le_set_scan_params+0x4>
    bee8:	f8bd 0000 	ldrh.w	r0, [sp]
    beec:	42a0      	cmp	r0, r4
    beee:	d001      	beq.n	bef4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    bef0:	2001      	movs	r0, #1
    bef2:	bd38      	pop	{r3, r4, r5, pc}
    bef4:	2000      	movs	r0, #0
    bef6:	bd38      	pop	{r3, r4, r5, pc}

0000bef8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    bef8:	b570      	push	{r4, r5, r6, lr}
    befa:	88c6      	ldrh	r6, [r0, #6]
    befc:	8885      	ldrh	r5, [r0, #4]
    befe:	4603      	mov	r3, r0
    bf00:	f100 0424 	add.w	r4, r0, #36	; 0x24
    bf04:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    bf08:	4420      	add	r0, r4
    bf0a:	42b5      	cmp	r5, r6
    bf0c:	d102      	bne.n	bf14 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    bf0e:	2000      	movs	r0, #0
    bf10:	8218      	strh	r0, [r3, #16]
    bf12:	bd70      	pop	{r4, r5, r6, pc}
    bf14:	8804      	ldrh	r4, [r0, #0]
    bf16:	899d      	ldrh	r5, [r3, #12]
    bf18:	7f1e      	ldrb	r6, [r3, #28]
    bf1a:	1b64      	subs	r4, r4, r5
    bf1c:	4435      	add	r5, r6
    bf1e:	4428      	add	r0, r5
    bf20:	880d      	ldrh	r5, [r1, #0]
    bf22:	b2a4      	uxth	r4, r4
    bf24:	1cc0      	adds	r0, r0, #3
    bf26:	42a5      	cmp	r5, r4
    bf28:	d900      	bls.n	bf2c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    bf2a:	800c      	strh	r4, [r1, #0]
    bf2c:	899c      	ldrh	r4, [r3, #12]
    bf2e:	b124      	cbz	r4, bf3a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    bf30:	2400      	movs	r4, #0
    bf32:	7014      	strb	r4, [r2, #0]
    bf34:	8809      	ldrh	r1, [r1, #0]
    bf36:	8219      	strh	r1, [r3, #16]
    bf38:	bd70      	pop	{r4, r5, r6, pc}
    bf3a:	2401      	movs	r4, #1
    bf3c:	e7f9      	b.n	bf32 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000bf3e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    bf3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bf42:	8281      	strh	r1, [r0, #20]
    bf44:	2100      	movs	r1, #0
    bf46:	7581      	strb	r1, [r0, #22]
    bf48:	4770      	bx	lr

0000bf4a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    bf4a:	b510      	push	{r4, lr}
    bf4c:	8a81      	ldrh	r1, [r0, #20]
    bf4e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    bf52:	3aff      	subs	r2, #255	; 0xff
    bf54:	d004      	beq.n	bf60 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    bf56:	f44f 7159 	mov.w	r1, #868	; 0x364
    bf5a:	2014      	movs	r0, #20
    bf5c:	f7f8 fb06 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf60:	88c1      	ldrh	r1, [r0, #6]
    bf62:	8281      	strh	r1, [r0, #20]
    bf64:	89c1      	ldrh	r1, [r0, #14]
    bf66:	b109      	cbz	r1, bf6c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    bf68:	2101      	movs	r1, #1
    bf6a:	e000      	b.n	bf6e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    bf6c:	2100      	movs	r1, #0
    bf6e:	7581      	strb	r1, [r0, #22]
    bf70:	bd10      	pop	{r4, pc}

0000bf72 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    bf72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf76:	461d      	mov	r5, r3
    bf78:	4616      	mov	r6, r2
    bf7a:	9f06      	ldr	r7, [sp, #24]
    bf7c:	460b      	mov	r3, r1
    bf7e:	4604      	mov	r4, r0
    bf80:	463a      	mov	r2, r7
    bf82:	4629      	mov	r1, r5
    bf84:	4630      	mov	r0, r6
    bf86:	f000 f84c 	bl	c022 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    bf8a:	4283      	cmp	r3, r0
    bf8c:	d201      	bcs.n	bf92 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    bf8e:	21a8      	movs	r1, #168	; 0xa8
    bf90:	e018      	b.n	bfc4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    bf92:	1ce0      	adds	r0, r4, #3
    bf94:	f020 0103 	bic.w	r1, r0, #3
    bf98:	4620      	mov	r0, r4
    bf9a:	42a1      	cmp	r1, r4
    bf9c:	d001      	beq.n	bfa2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    bf9e:	21a9      	movs	r1, #169	; 0xa9
    bfa0:	e010      	b.n	bfc4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    bfa2:	2224      	movs	r2, #36	; 0x24
    bfa4:	2100      	movs	r1, #0
    bfa6:	f7ff f9f7 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bfaa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    bfae:	82a0      	strh	r0, [r4, #20]
    bfb0:	19a8      	adds	r0, r5, r6
    bfb2:	1d80      	adds	r0, r0, #6
    bfb4:	4378      	muls	r0, r7
    bfb6:	b280      	uxth	r0, r0
    bfb8:	7725      	strb	r5, [r4, #28]
    bfba:	8060      	strh	r0, [r4, #2]
    bfbc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    bfc0:	d903      	bls.n	bfca <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    bfc2:	21af      	movs	r1, #175	; 0xaf
    bfc4:	2014      	movs	r0, #20
    bfc6:	f7f8 fad1 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfca:	8026      	strh	r6, [r4, #0]
    bfcc:	2000      	movs	r0, #0
    bfce:	7760      	strb	r0, [r4, #29]
    bfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bfd4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfd8:	460b      	mov	r3, r1
    bfda:	4604      	mov	r4, r0
    bfdc:	f100 0124 	add.w	r1, r0, #36	; 0x24
    bfe0:	8905      	ldrh	r5, [r0, #8]
    bfe2:	8946      	ldrh	r6, [r0, #10]
    bfe4:	8880      	ldrh	r0, [r0, #4]
    bfe6:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    bfea:	4439      	add	r1, r7
    bfec:	460f      	mov	r7, r1
    bfee:	4285      	cmp	r5, r0
    bff0:	d102      	bne.n	bff8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    bff2:	2000      	movs	r0, #0
    bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bff8:	b10a      	cbz	r2, bffe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    bffa:	1cc8      	adds	r0, r1, #3
    bffc:	6010      	str	r0, [r2, #0]
    bffe:	b123      	cbz	r3, c00a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    c000:	7f22      	ldrb	r2, [r4, #28]
    c002:	1cf9      	adds	r1, r7, #3
    c004:	4618      	mov	r0, r3
    c006:	f7ff f94d 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c00a:	883f      	ldrh	r7, [r7, #0]
    c00c:	f104 0108 	add.w	r1, r4, #8
    c010:	4620      	mov	r0, r4
    c012:	f7ff fe14 	bl	bc3e <sdc_hci_cmd_le_set_scan_params+0x4>
    c016:	42b5      	cmp	r5, r6
    c018:	d101      	bne.n	c01e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    c01a:	8920      	ldrh	r0, [r4, #8]
    c01c:	8160      	strh	r0, [r4, #10]
    c01e:	4638      	mov	r0, r7
    c020:	e7e8      	b.n	bff4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000c022 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    c022:	4401      	add	r1, r0
    c024:	1d89      	adds	r1, r1, #6
    c026:	4351      	muls	r1, r2
    c028:	b28a      	uxth	r2, r1
    c02a:	2100      	movs	r1, #0
    c02c:	2845      	cmp	r0, #69	; 0x45
    c02e:	d201      	bcs.n	c034 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    c030:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    c034:	3224      	adds	r2, #36	; 0x24
    c036:	1850      	adds	r0, r2, r1
    c038:	b280      	uxth	r0, r0
    c03a:	4770      	bx	lr

0000c03c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    c03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c040:	4688      	mov	r8, r1
    c042:	88c1      	ldrh	r1, [r0, #6]
    c044:	4604      	mov	r4, r0
    c046:	8900      	ldrh	r0, [r0, #8]
    c048:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    c04c:	f104 0524 	add.w	r5, r4, #36	; 0x24
    c050:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c054:	eb05 0906 	add.w	r9, r5, r6
    c058:	f7ff fe12 	bl	bc80 <sdc_hci_cmd_le_set_scan_params+0x46>
    c05c:	2200      	movs	r2, #0
    c05e:	b998      	cbnz	r0, c088 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    c060:	8820      	ldrh	r0, [r4, #0]
    c062:	2845      	cmp	r0, #69	; 0x45
    c064:	d200      	bcs.n	c068 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    c066:	2045      	movs	r0, #69	; 0x45
    c068:	42b7      	cmp	r7, r6
    c06a:	d906      	bls.n	c07a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c06c:	7f23      	ldrb	r3, [r4, #28]
    c06e:	1bb9      	subs	r1, r7, r6
    c070:	1ac9      	subs	r1, r1, r3
    c072:	1f89      	subs	r1, r1, #6
    c074:	4281      	cmp	r1, r0
    c076:	da00      	bge.n	c07a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c078:	4608      	mov	r0, r1
    c07a:	89e1      	ldrh	r1, [r4, #14]
    c07c:	b111      	cbz	r1, c084 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    c07e:	f8b9 3000 	ldrh.w	r3, [r9]
    c082:	1ac0      	subs	r0, r0, r3
    c084:	4540      	cmp	r0, r8
    c086:	da03      	bge.n	c090 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    c088:	8262      	strh	r2, [r4, #18]
    c08a:	2000      	movs	r0, #0
    c08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c090:	7f20      	ldrb	r0, [r4, #28]
    c092:	4429      	add	r1, r5
    c094:	1d80      	adds	r0, r0, #6
    c096:	4430      	add	r0, r6
    c098:	4408      	add	r0, r1
    c09a:	f8a4 8012 	strh.w	r8, [r4, #18]
    c09e:	1ec0      	subs	r0, r0, #3
    c0a0:	e7f4      	b.n	c08c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000c0a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    c0a2:	2100      	movs	r1, #0
    c0a4:	81c1      	strh	r1, [r0, #14]
    c0a6:	8241      	strh	r1, [r0, #18]
    c0a8:	7581      	strb	r1, [r0, #22]
    c0aa:	4770      	bx	lr

0000c0ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    c0ac:	b510      	push	{r4, lr}
    c0ae:	000c      	movs	r4, r1
    c0b0:	d006      	beq.n	c0c0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    c0b2:	2c08      	cmp	r4, #8
    c0b4:	d209      	bcs.n	c0ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    c0b6:	f240 1195 	movw	r1, #405	; 0x195
    c0ba:	2015      	movs	r0, #21
    c0bc:	f7f8 fa56 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0c0:	b108      	cbz	r0, c0c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    c0c2:	2100      	movs	r1, #0
    c0c4:	6001      	str	r1, [r0, #0]
    c0c6:	2000      	movs	r0, #0
    c0c8:	bd10      	pop	{r4, pc}
    c0ca:	b118      	cbz	r0, c0d4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    c0cc:	b2a1      	uxth	r1, r4
    c0ce:	6800      	ldr	r0, [r0, #0]
    c0d0:	f000 f814 	bl	c0fc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    c0d4:	1d20      	adds	r0, r4, #4
    c0d6:	bd10      	pop	{r4, pc}

0000c0d8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    c0d8:	2100      	movs	r1, #0
    c0da:	6802      	ldr	r2, [r0, #0]
    c0dc:	e003      	b.n	c0e6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    c0de:	8893      	ldrh	r3, [r2, #4]
    c0e0:	6812      	ldr	r2, [r2, #0]
    c0e2:	4419      	add	r1, r3
    c0e4:	b289      	uxth	r1, r1
    c0e6:	2a00      	cmp	r2, #0
    c0e8:	d1f9      	bne.n	c0de <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    c0ea:	f000 b807 	b.w	c0fc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000c0ee <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    c0ee:	2300      	movs	r3, #0
    c0f0:	600b      	str	r3, [r1, #0]
    c0f2:	808a      	strh	r2, [r1, #4]
    c0f4:	6802      	ldr	r2, [r0, #0]
    c0f6:	600a      	str	r2, [r1, #0]
    c0f8:	6001      	str	r1, [r0, #0]
    c0fa:	4770      	bx	lr
    c0fc:	2300      	movs	r3, #0
    c0fe:	6043      	str	r3, [r0, #4]
    c100:	1d02      	adds	r2, r0, #4
    c102:	8101      	strh	r1, [r0, #8]
    c104:	6002      	str	r2, [r0, #0]
    c106:	4770      	bx	lr

0000c108 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    c108:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    c10c:	3aff      	subs	r2, #255	; 0xff
    c10e:	d000      	beq.n	c112 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    c110:	b109      	cbz	r1, c116 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    c112:	2000      	movs	r0, #0
    c114:	4770      	bx	lr
    c116:	f7f8 bc49 	b.w	49ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>

0000c11a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    c11a:	b570      	push	{r4, r5, r6, lr}
    c11c:	4605      	mov	r5, r0
    c11e:	460c      	mov	r4, r1
    c120:	4608      	mov	r0, r1
    c122:	f000 f854 	bl	c1ce <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    c126:	b108      	cbz	r0, c12c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    c128:	2010      	movs	r0, #16
    c12a:	bd70      	pop	{r4, r5, r6, pc}
    c12c:	b10d      	cbz	r5, c132 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    c12e:	2007      	movs	r0, #7
    c130:	bd70      	pop	{r4, r5, r6, pc}
    c132:	7025      	strb	r5, [r4, #0]
    c134:	2000      	movs	r0, #0
    c136:	8060      	strh	r0, [r4, #2]
    c138:	bd70      	pop	{r4, r5, r6, pc}
    c13a:	b510      	push	{r4, lr}
    c13c:	4604      	mov	r4, r0
    c13e:	f7f8 fc81 	bl	4a44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xec>
    c142:	42a0      	cmp	r0, r4
    c144:	d901      	bls.n	c14a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    c146:	2001      	movs	r0, #1
    c148:	bd10      	pop	{r4, pc}
    c14a:	2000      	movs	r0, #0
    c14c:	bd10      	pop	{r4, pc}
    c14e:	4770      	bx	lr

0000c150 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    c150:	b570      	push	{r4, r5, r6, lr}
    c152:	460e      	mov	r6, r1
    c154:	461d      	mov	r5, r3
    c156:	4611      	mov	r1, r2
    c158:	f000 f811 	bl	c17e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    c15c:	4604      	mov	r4, r0
    c15e:	4629      	mov	r1, r5
    c160:	4630      	mov	r0, r6
    c162:	f000 f803 	bl	c16c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    c166:	4420      	add	r0, r4
    c168:	1d00      	adds	r0, r0, #4
    c16a:	bd70      	pop	{r4, r5, r6, pc}
    c16c:	b510      	push	{r4, lr}
    c16e:	460a      	mov	r2, r1
    c170:	2101      	movs	r1, #1
    c172:	f7ff ff56 	bl	c022 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c176:	1cc0      	adds	r0, r0, #3
    c178:	f020 0003 	bic.w	r0, r0, #3
    c17c:	bd10      	pop	{r4, pc}
    c17e:	b510      	push	{r4, lr}
    c180:	460a      	mov	r2, r1
    c182:	2101      	movs	r1, #1
    c184:	f7ff ff4d 	bl	c022 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c188:	1cc0      	adds	r0, r0, #3
    c18a:	f020 0003 	bic.w	r0, r0, #3
    c18e:	bd10      	pop	{r4, pc}
    c190:	2800      	cmp	r0, #0
    c192:	db09      	blt.n	c1a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    c194:	f000 021f 	and.w	r2, r0, #31
    c198:	2101      	movs	r1, #1
    c19a:	4091      	lsls	r1, r2
    c19c:	0940      	lsrs	r0, r0, #5
    c19e:	0080      	lsls	r0, r0, #2
    c1a0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c1a4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c1a8:	4770      	bx	lr
    c1aa:	5840      	ldr	r0, [r0, r1]
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d000      	beq.n	c1b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    c1b0:	2001      	movs	r0, #1
    c1b2:	4770      	bx	lr

0000c1b4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    c1b4:	f7f8 bda6 	b.w	4d04 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000c1b8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    c1b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c1bc:	2000      	movs	r0, #0
    c1be:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    c1c2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c1c6:	2001      	movs	r0, #1
    c1c8:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c1cc:	4770      	bx	lr

0000c1ce <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    c1ce:	b108      	cbz	r0, c1d4 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    c1d0:	2000      	movs	r0, #0
    c1d2:	4770      	bx	lr
    c1d4:	2001      	movs	r0, #1
    c1d6:	4770      	bx	lr

0000c1d8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    c1d8:	f7f8 bed6 	b.w	4f88 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0xc>

0000c1dc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    c1dc:	b510      	push	{r4, lr}
    c1de:	2900      	cmp	r1, #0
    c1e0:	4604      	mov	r4, r0
    c1e2:	f04f 0106 	mov.w	r1, #6
    c1e6:	d002      	beq.n	c1ee <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    c1e8:	f7f8 fa1e 	bl	4628 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    c1ec:	e001      	b.n	c1f2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    c1ee:	f7f8 fa29 	bl	4644 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    c1f2:	7960      	ldrb	r0, [r4, #5]
    c1f4:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    c1f8:	7160      	strb	r0, [r4, #5]
    c1fa:	bd10      	pop	{r4, pc}

0000c1fc <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    c1fc:	4770      	bx	lr

0000c1fe <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    c1fe:	b530      	push	{r4, r5, lr}
    c200:	460c      	mov	r4, r1
    c202:	4605      	mov	r5, r0
    c204:	b08d      	sub	sp, #52	; 0x34
    c206:	f04f 0103 	mov.w	r1, #3
    c20a:	f104 0003 	add.w	r0, r4, #3
    c20e:	b112      	cbz	r2, c216 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    c210:	f7f8 fa0a 	bl	4628 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    c214:	e001      	b.n	c21a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    c216:	f7f8 fa15 	bl	4644 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    c21a:	7960      	ldrb	r0, [r4, #5]
    c21c:	220d      	movs	r2, #13
    c21e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    c222:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    c226:	7160      	strb	r0, [r4, #5]
    c228:	2100      	movs	r1, #0
    c22a:	a804      	add	r0, sp, #16
    c22c:	f7ff f8b4 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c230:	78e0      	ldrb	r0, [r4, #3]
    c232:	f88d 001f 	strb.w	r0, [sp, #31]
    c236:	7920      	ldrb	r0, [r4, #4]
    c238:	f88d 001e 	strb.w	r0, [sp, #30]
    c23c:	7960      	ldrb	r0, [r4, #5]
    c23e:	f88d 001d 	strb.w	r0, [sp, #29]
    c242:	2210      	movs	r2, #16
    c244:	4629      	mov	r1, r5
    c246:	4668      	mov	r0, sp
    c248:	f7ff f82c 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c24c:	4668      	mov	r0, sp
    c24e:	f7ff ffb1 	bl	c1b4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    c252:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c256:	7020      	strb	r0, [r4, #0]
    c258:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    c25c:	7060      	strb	r0, [r4, #1]
    c25e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    c262:	70a0      	strb	r0, [r4, #2]
    c264:	b00d      	add	sp, #52	; 0x34
    c266:	bd30      	pop	{r4, r5, pc}

0000c268 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    c268:	b530      	push	{r4, r5, lr}
    c26a:	b08d      	sub	sp, #52	; 0x34
    c26c:	460c      	mov	r4, r1
    c26e:	4605      	mov	r5, r0
    c270:	220d      	movs	r2, #13
    c272:	2100      	movs	r1, #0
    c274:	a804      	add	r0, sp, #16
    c276:	f7ff f88f 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c27a:	78e0      	ldrb	r0, [r4, #3]
    c27c:	f88d 001f 	strb.w	r0, [sp, #31]
    c280:	7920      	ldrb	r0, [r4, #4]
    c282:	f88d 001e 	strb.w	r0, [sp, #30]
    c286:	7960      	ldrb	r0, [r4, #5]
    c288:	f88d 001d 	strb.w	r0, [sp, #29]
    c28c:	2210      	movs	r2, #16
    c28e:	4629      	mov	r1, r5
    c290:	4668      	mov	r0, sp
    c292:	f7ff f807 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c296:	4668      	mov	r0, sp
    c298:	f7ff ff8c 	bl	c1b4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    c29c:	7820      	ldrb	r0, [r4, #0]
    c29e:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    c2a2:	4288      	cmp	r0, r1
    c2a4:	d10c      	bne.n	c2c0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    c2a6:	7860      	ldrb	r0, [r4, #1]
    c2a8:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    c2ac:	4288      	cmp	r0, r1
    c2ae:	d107      	bne.n	c2c0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    c2b0:	78a0      	ldrb	r0, [r4, #2]
    c2b2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    c2b6:	4288      	cmp	r0, r1
    c2b8:	d102      	bne.n	c2c0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    c2ba:	2001      	movs	r0, #1
    c2bc:	b00d      	add	sp, #52	; 0x34
    c2be:	bd30      	pop	{r4, r5, pc}
    c2c0:	2000      	movs	r0, #0
    c2c2:	e7fb      	b.n	c2bc <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000c2c4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    c2c4:	f7f9 b9d8 	b.w	5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    c2c8:	b510      	push	{r4, lr}
    c2ca:	2801      	cmp	r0, #1
    c2cc:	d008      	beq.n	c2e0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    c2ce:	2802      	cmp	r0, #2
    c2d0:	d004      	beq.n	c2dc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    c2d2:	f240 31ad 	movw	r1, #941	; 0x3ad
    c2d6:	2006      	movs	r0, #6
    c2d8:	f7f8 f948 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2dc:	2001      	movs	r0, #1
    c2de:	bd10      	pop	{r4, pc}
    c2e0:	2000      	movs	r0, #0
    c2e2:	bd10      	pop	{r4, pc}
    c2e4:	2900      	cmp	r1, #0
    c2e6:	d004      	beq.n	c2f2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    c2e8:	2801      	cmp	r0, #1
    c2ea:	d003      	beq.n	c2f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    c2ec:	2901      	cmp	r1, #1
    c2ee:	d001      	beq.n	c2f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    c2f0:	2002      	movs	r0, #2
    c2f2:	4770      	bx	lr
    c2f4:	2001      	movs	r0, #1
    c2f6:	4770      	bx	lr
    c2f8:	f7ff bdfe 	b.w	bef8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000c2fc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    c2fc:	2101      	movs	r1, #1
    c2fe:	f7f9 bdcf 	b.w	5ea0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000c302 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    c302:	b510      	push	{r4, lr}
    c304:	f001 fbbc 	bl	da80 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    c308:	b118      	cbz	r0, c312 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    c30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c30e:	f7fd bd81 	b.w	9e14 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    c312:	20ff      	movs	r0, #255	; 0xff
    c314:	bd10      	pop	{r4, pc}

0000c316 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    c316:	b510      	push	{r4, lr}
    c318:	f7f9 fe0a 	bl	5f30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    c31c:	2810      	cmp	r0, #16
    c31e:	d003      	beq.n	c328 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    c320:	f7f9 fdd6 	bl	5ed0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    c324:	2810      	cmp	r0, #16
    c326:	d100      	bne.n	c32a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    c328:	2008      	movs	r0, #8
    c32a:	bd10      	pop	{r4, pc}

0000c32c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    c32c:	b510      	push	{r4, lr}
    c32e:	f7f9 fdff 	bl	5f30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    c332:	2810      	cmp	r0, #16
    c334:	d007      	beq.n	c346 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    c336:	f7f9 fdcb 	bl	5ed0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    c33a:	2810      	cmp	r0, #16
    c33c:	d003      	beq.n	c346 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    c33e:	f7f9 fe3f 	bl	5fc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    c342:	2001      	movs	r0, #1
    c344:	bd10      	pop	{r4, pc}
    c346:	2000      	movs	r0, #0
    c348:	bd10      	pop	{r4, pc}

0000c34a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    c34a:	b510      	push	{r4, lr}
    c34c:	f7f9 fdf0 	bl	5f30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    c350:	2810      	cmp	r0, #16
    c352:	d003      	beq.n	c35c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    c354:	f7f9 fe7c 	bl	6050 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    c358:	2001      	movs	r0, #1
    c35a:	bd10      	pop	{r4, pc}
    c35c:	2000      	movs	r0, #0
    c35e:	bd10      	pop	{r4, pc}

0000c360 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    c360:	b570      	push	{r4, r5, r6, lr}
    c362:	460e      	mov	r6, r1
    c364:	b08c      	sub	sp, #48	; 0x30
    c366:	4614      	mov	r4, r2
    c368:	4601      	mov	r1, r0
    c36a:	461d      	mov	r5, r3
    c36c:	2210      	movs	r2, #16
    c36e:	4668      	mov	r0, sp
    c370:	f000 f954 	bl	c61c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    c374:	2210      	movs	r2, #16
    c376:	4631      	mov	r1, r6
    c378:	a804      	add	r0, sp, #16
    c37a:	f000 f94f 	bl	c61c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    c37e:	4668      	mov	r0, sp
    c380:	f7ff ff18 	bl	c1b4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    c384:	a908      	add	r1, sp, #32
    c386:	f04f 0210 	mov.w	r2, #16
    c38a:	4628      	mov	r0, r5
    c38c:	b11c      	cbz	r4, c396 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    c38e:	f000 f945 	bl	c61c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    c392:	b00c      	add	sp, #48	; 0x30
    c394:	bd70      	pop	{r4, r5, r6, pc}
    c396:	f7fe ff85 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c39a:	e7fa      	b.n	c392 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    c39c:	0781      	lsls	r1, r0, #30
    c39e:	d501      	bpl.n	c3a4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    c3a0:	2002      	movs	r0, #2
    c3a2:	4770      	bx	lr
    c3a4:	07c0      	lsls	r0, r0, #31
    c3a6:	d0fc      	beq.n	c3a2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    c3a8:	2001      	movs	r0, #1
    c3aa:	4770      	bx	lr

0000c3ac <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    c3ac:	b510      	push	{r4, lr}
    c3ae:	460c      	mov	r4, r1
    c3b0:	2100      	movs	r1, #0
    c3b2:	f7ff fea9 	bl	c108 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    c3b6:	6060      	str	r0, [r4, #4]
    c3b8:	b110      	cbz	r0, c3c0 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    c3ba:	2000      	movs	r0, #0
    c3bc:	7020      	strb	r0, [r4, #0]
    c3be:	bd10      	pop	{r4, pc}
    c3c0:	2002      	movs	r0, #2
    c3c2:	bd10      	pop	{r4, pc}

0000c3c4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    c3c4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c3c8:	4348      	muls	r0, r1
    c3ca:	4770      	bx	lr

0000c3cc <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    c3cc:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c3d0:	fbb0 f0f1 	udiv	r0, r0, r1
    c3d4:	b280      	uxth	r0, r0
    c3d6:	4770      	bx	lr

0000c3d8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    c3d8:	b570      	push	{r4, r5, r6, lr}
    c3da:	4604      	mov	r4, r0
    c3dc:	4290      	cmp	r0, r2
    c3de:	d20b      	bcs.n	c3f8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    c3e0:	1b10      	subs	r0, r2, r4
    c3e2:	2865      	cmp	r0, #101	; 0x65
    c3e4:	d200      	bcs.n	c3e8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    c3e6:	2065      	movs	r0, #101	; 0x65
    c3e8:	1825      	adds	r5, r4, r0
    c3ea:	428d      	cmp	r5, r1
    c3ec:	d803      	bhi.n	c3f6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    c3ee:	2104      	movs	r1, #4
    c3f0:	f7f5 fb98 	bl	1b24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    c3f4:	b108      	cbz	r0, c3fa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    c3f6:	4620      	mov	r0, r4
    c3f8:	bd70      	pop	{r4, r5, r6, pc}
    c3fa:	4628      	mov	r0, r5
    c3fc:	bd70      	pop	{r4, r5, r6, pc}

0000c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    c3fe:	b510      	push	{r4, lr}
    c400:	f1a2 030f 	sub.w	r3, r2, #15
    c404:	290c      	cmp	r1, #12
    c406:	d24f      	bcs.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c408:	e8df f001 	tbb	[pc, r1]
    c40c:	120d0806 	.word	0x120d0806
    c410:	2f271815 	.word	0x2f271815
    c414:	3d354c32 	.word	0x3d354c32
    c418:	b3a2      	cbz	r2, c484 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    c41a:	e045      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c41c:	2a07      	cmp	r2, #7
    c41e:	d045      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c420:	2a08      	cmp	r2, #8
    c422:	d043      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c424:	e040      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c426:	2a0c      	cmp	r2, #12
    c428:	d040      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c42a:	2a0b      	cmp	r2, #11
    c42c:	d03e      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c42e:	e03b      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c430:	2a0d      	cmp	r2, #13
    c432:	d03b      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c434:	e038      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c436:	2b0c      	cmp	r3, #12
    c438:	d938      	bls.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c43a:	e035      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c43c:	2a12      	cmp	r2, #18
    c43e:	d035      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c440:	2a11      	cmp	r2, #17
    c442:	d033      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c444:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    c448:	b120      	cbz	r0, c454 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    c44a:	2a12      	cmp	r2, #18
    c44c:	d32c      	bcc.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c44e:	2a1a      	cmp	r2, #26
    c450:	d92c      	bls.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c452:	e029      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c454:	2a16      	cmp	r2, #22
    c456:	d2fa      	bcs.n	c44e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    c458:	e026      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c45a:	2b03      	cmp	r3, #3
    c45c:	d926      	bls.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c45e:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    c462:	b308      	cbz	r0, c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c464:	2a1b      	cmp	r2, #27
    c466:	d921      	bls.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c468:	e01e      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c46a:	2a04      	cmp	r2, #4
    c46c:	d01e      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c46e:	e01b      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c470:	2a01      	cmp	r2, #1
    c472:	d01b      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c474:	e018      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c476:	2a1c      	cmp	r2, #28
    c478:	d018      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c47a:	2a1d      	cmp	r2, #29
    c47c:	d016      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c47e:	2a1e      	cmp	r2, #30
    c480:	d014      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c482:	e011      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c484:	e012      	b.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c486:	2a1f      	cmp	r2, #31
    c488:	d010      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c48a:	2a20      	cmp	r2, #32
    c48c:	d00e      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c48e:	2a21      	cmp	r2, #33	; 0x21
    c490:	d00c      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c492:	2a22      	cmp	r2, #34	; 0x22
    c494:	d00a      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c496:	2a23      	cmp	r2, #35	; 0x23
    c498:	d008      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c49a:	2a24      	cmp	r2, #36	; 0x24
    c49c:	d006      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c49e:	2a26      	cmp	r2, #38	; 0x26
    c4a0:	d004      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c4a2:	e001      	b.n	c4a8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    c4a4:	2a05      	cmp	r2, #5
    c4a6:	d001      	beq.n	c4ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    c4a8:	2000      	movs	r0, #0
    c4aa:	bd10      	pop	{r4, pc}
    c4ac:	2001      	movs	r0, #1
    c4ae:	bd10      	pop	{r4, pc}

0000c4b0 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    c4b0:	280c      	cmp	r0, #12
    c4b2:	d013      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4b4:	280b      	cmp	r0, #11
    c4b6:	d011      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4b8:	280d      	cmp	r0, #13
    c4ba:	d00f      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4bc:	281f      	cmp	r0, #31
    c4be:	d00d      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4c0:	2820      	cmp	r0, #32
    c4c2:	d00b      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4c4:	2821      	cmp	r0, #33	; 0x21
    c4c6:	d009      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4c8:	2822      	cmp	r0, #34	; 0x22
    c4ca:	d007      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4cc:	2823      	cmp	r0, #35	; 0x23
    c4ce:	d005      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4d0:	2824      	cmp	r0, #36	; 0x24
    c4d2:	d003      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4d4:	2826      	cmp	r0, #38	; 0x26
    c4d6:	d001      	beq.n	c4dc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    c4d8:	2000      	movs	r0, #0
    c4da:	4770      	bx	lr
    c4dc:	2001      	movs	r0, #1
    c4de:	4770      	bx	lr

0000c4e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    c4e0:	f011 0f0c 	tst.w	r1, #12
    c4e4:	d016      	beq.n	c514 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    c4e6:	074a      	lsls	r2, r1, #29
    c4e8:	f44f 7116 	mov.w	r1, #600	; 0x258
    c4ec:	2a00      	cmp	r2, #0
    c4ee:	da02      	bge.n	c4f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    c4f0:	f04f 0210 	mov.w	r2, #16
    c4f4:	e001      	b.n	c4fa <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    c4f6:	f04f 0240 	mov.w	r2, #64	; 0x40
    c4fa:	da01      	bge.n	c500 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    c4fc:	f04f 0196 	mov.w	r1, #150	; 0x96
    c500:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    c504:	eba0 0301 	sub.w	r3, r0, r1
    c508:	4288      	cmp	r0, r1
    c50a:	d910      	bls.n	c52e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    c50c:	fb93 f0f2 	sdiv	r0, r3, r2
    c510:	b280      	uxth	r0, r0
    c512:	4770      	bx	lr
    c514:	2902      	cmp	r1, #2
    c516:	d002      	beq.n	c51e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    c518:	2870      	cmp	r0, #112	; 0x70
    c51a:	d80a      	bhi.n	c532 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    c51c:	e007      	b.n	c52e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    c51e:	283c      	cmp	r0, #60	; 0x3c
    c520:	d905      	bls.n	c52e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    c522:	383c      	subs	r0, #60	; 0x3c
    c524:	17c1      	asrs	r1, r0, #31
    c526:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    c52a:	1080      	asrs	r0, r0, #2
    c52c:	e7f0      	b.n	c510 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    c52e:	2000      	movs	r0, #0
    c530:	e7ee      	b.n	c510 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    c532:	3870      	subs	r0, #112	; 0x70
    c534:	17c1      	asrs	r1, r0, #31
    c536:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    c53a:	10c0      	asrs	r0, r0, #3
    c53c:	e7e8      	b.n	c510 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000c53e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    c53e:	6809      	ldr	r1, [r1, #0]
    c540:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    c544:	4770      	bx	lr

0000c546 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    c546:	2801      	cmp	r0, #1
    c548:	d002      	beq.n	c550 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    c54a:	2802      	cmp	r0, #2
    c54c:	d000      	beq.n	c550 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    c54e:	2000      	movs	r0, #0
    c550:	4770      	bx	lr

0000c552 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    c552:	b510      	push	{r4, lr}
    c554:	f640 12c4 	movw	r2, #2500	; 0x9c4
    c558:	2901      	cmp	r1, #1
    c55a:	d006      	beq.n	c56a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    c55c:	2902      	cmp	r1, #2
    c55e:	d005      	beq.n	c56c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    c560:	f240 31b1 	movw	r1, #945	; 0x3b1
    c564:	2029      	movs	r0, #41	; 0x29
    c566:	f7f8 f801 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c56a:	b108      	cbz	r0, c570 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    c56c:	4610      	mov	r0, r2
    c56e:	bd10      	pop	{r4, pc}
    c570:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c574:	bd10      	pop	{r4, pc}

0000c576 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    c576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c578:	b2cf      	uxtb	r7, r1
    c57a:	4606      	mov	r6, r0
    c57c:	f3c1 2407 	ubfx	r4, r1, #8, #8
    c580:	4621      	mov	r1, r4
    c582:	4638      	mov	r0, r7
    c584:	f000 f8bd 	bl	c702 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    c588:	b2f5      	uxtb	r5, r6
    c58a:	f3c6 2607 	ubfx	r6, r6, #8, #8
    c58e:	b920      	cbnz	r0, c59a <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    c590:	4631      	mov	r1, r6
    c592:	4628      	mov	r0, r5
    c594:	f000 f8b5 	bl	c702 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    c598:	b140      	cbz	r0, c5ac <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    c59a:	4027      	ands	r7, r4
    c59c:	4035      	ands	r5, r6
    c59e:	403d      	ands	r5, r7
    c5a0:	4644      	mov	r4, r8
    c5a2:	f365 0407 	bfi	r4, r5, #0, #8
    c5a6:	f365 240f 	bfi	r4, r5, #8, #8
    c5aa:	e006      	b.n	c5ba <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    c5ac:	4025      	ands	r5, r4
    c5ae:	4644      	mov	r4, r8
    c5b0:	f365 0407 	bfi	r4, r5, #0, #8
    c5b4:	403e      	ands	r6, r7
    c5b6:	f366 240f 	bfi	r4, r6, #8, #8
    c5ba:	b2e0      	uxtb	r0, r4
    c5bc:	f7ff feee 	bl	c39c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    c5c0:	f88d 0000 	strb.w	r0, [sp]
    c5c4:	f3c4 2007 	ubfx	r0, r4, #8, #8
    c5c8:	f7ff fee8 	bl	c39c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    c5cc:	f88d 0001 	strb.w	r0, [sp, #1]
    c5d0:	f8bd 0000 	ldrh.w	r0, [sp]
    c5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c5d6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    c5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5da:	460c      	mov	r4, r1
    c5dc:	4605      	mov	r5, r0
    c5de:	68c6      	ldr	r6, [r0, #12]
    c5e0:	f7f5 fefa 	bl	23d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    c5e4:	b198      	cbz	r0, c60e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    c5e6:	b1bc      	cbz	r4, c618 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    c5e8:	4630      	mov	r0, r6
    c5ea:	68e9      	ldr	r1, [r5, #12]
    c5ec:	f7f5 fbe8 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    c5f0:	2800      	cmp	r0, #0
    c5f2:	dd11      	ble.n	c618 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    c5f4:	4420      	add	r0, r4
    c5f6:	1e40      	subs	r0, r0, #1
    c5f8:	fbb0 f7f4 	udiv	r7, r0, r4
    c5fc:	fb07 f104 	mul.w	r1, r7, r4
    c600:	4630      	mov	r0, r6
    c602:	f7f5 fbab 	bl	1d5c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c606:	60e8      	str	r0, [r5, #12]
    c608:	4638      	mov	r0, r7
    c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c60e:	f240 2136 	movw	r1, #566	; 0x236
    c612:	2029      	movs	r0, #41	; 0x29
    c614:	f7f7 ffaa 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c618:	2000      	movs	r0, #0
    c61a:	e7f6      	b.n	c60a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000c61c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    c61c:	b530      	push	{r4, r5, lr}
    c61e:	4613      	mov	r3, r2
    c620:	e006      	b.n	c630 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    c622:	18cc      	adds	r4, r1, r3
    c624:	1ad5      	subs	r5, r2, r3
    c626:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    c62a:	1e5b      	subs	r3, r3, #1
    c62c:	5544      	strb	r4, [r0, r5]
    c62e:	b2db      	uxtb	r3, r3
    c630:	2b00      	cmp	r3, #0
    c632:	d1f6      	bne.n	c622 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    c634:	bd30      	pop	{r4, r5, pc}

0000c636 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    c636:	b538      	push	{r3, r4, r5, lr}
    c638:	4605      	mov	r5, r0
    c63a:	460c      	mov	r4, r1
    c63c:	4668      	mov	r0, sp
    c63e:	f7fe f8f9 	bl	a834 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    c642:	b310      	cbz	r0, c68a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    c644:	f99d 0000 	ldrsb.w	r0, [sp]
    c648:	7260      	strb	r0, [r4, #9]
    c64a:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    c64e:	72a1      	strb	r1, [r4, #10]
    c650:	f994 100b 	ldrsb.w	r1, [r4, #11]
    c654:	2200      	movs	r2, #0
    c656:	1a41      	subs	r1, r0, r1
    c658:	d500      	bpl.n	c65c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    c65a:	4249      	negs	r1, r1
    c65c:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    c660:	428b      	cmp	r3, r1
    c662:	dc10      	bgt.n	c686 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    c664:	2bff      	cmp	r3, #255	; 0xff
    c666:	d00e      	beq.n	c686 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    c668:	7b21      	ldrb	r1, [r4, #12]
    c66a:	1c49      	adds	r1, r1, #1
    c66c:	b2c9      	uxtb	r1, r1
    c66e:	7321      	strb	r1, [r4, #12]
    c670:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    c674:	4299      	cmp	r1, r3
    c676:	d802      	bhi.n	c67e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    c678:	7ae1      	ldrb	r1, [r4, #11]
    c67a:	297f      	cmp	r1, #127	; 0x7f
    c67c:	d103      	bne.n	c686 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    c67e:	72e0      	strb	r0, [r4, #11]
    c680:	2000      	movs	r0, #0
    c682:	7320      	strb	r0, [r4, #12]
    c684:	2201      	movs	r2, #1
    c686:	4610      	mov	r0, r2
    c688:	bd38      	pop	{r3, r4, r5, pc}
    c68a:	207f      	movs	r0, #127	; 0x7f
    c68c:	7260      	strb	r0, [r4, #9]
    c68e:	2000      	movs	r0, #0
    c690:	bd38      	pop	{r3, r4, r5, pc}

0000c692 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    c692:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c696:	4348      	muls	r0, r1
    c698:	4770      	bx	lr

0000c69a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    c69a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c69e:	fbb0 f0f1 	udiv	r0, r0, r1
    c6a2:	b280      	uxth	r0, r0
    c6a4:	4770      	bx	lr

0000c6a6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    c6a6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c6aa:	fb10 f001 	smulbb	r0, r0, r1
    c6ae:	4770      	bx	lr

0000c6b0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    c6b0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c6b4:	fbb0 f0f1 	udiv	r0, r0, r1
    c6b8:	b2c0      	uxtb	r0, r0
    c6ba:	4770      	bx	lr

0000c6bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    c6bc:	b510      	push	{r4, lr}
    c6be:	2300      	movs	r3, #0
    c6c0:	461a      	mov	r2, r3
    c6c2:	e003      	b.n	c6cc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    c6c4:	5c84      	ldrb	r4, [r0, r2]
    c6c6:	4323      	orrs	r3, r4
    c6c8:	1c52      	adds	r2, r2, #1
    c6ca:	b2d2      	uxtb	r2, r2
    c6cc:	428a      	cmp	r2, r1
    c6ce:	d3f9      	bcc.n	c6c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    c6d0:	b10b      	cbz	r3, c6d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    c6d2:	2000      	movs	r0, #0
    c6d4:	bd10      	pop	{r4, pc}
    c6d6:	2001      	movs	r0, #1
    c6d8:	bd10      	pop	{r4, pc}
    c6da:	b510      	push	{r4, lr}
    c6dc:	4604      	mov	r4, r0
    c6de:	f7fd fb15 	bl	9d0c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    c6e2:	f644 112b 	movw	r1, #18731	; 0x492b
    c6e6:	4008      	ands	r0, r1
    c6e8:	2101      	movs	r1, #1
    c6ea:	7561      	strb	r1, [r4, #21]
    c6ec:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    c6f0:	0a00      	lsrs	r0, r0, #8
    c6f2:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    c6f6:	20fe      	movs	r0, #254	; 0xfe
    c6f8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    c6fc:	207f      	movs	r0, #127	; 0x7f
    c6fe:	7260      	strb	r0, [r4, #9]
    c700:	bd10      	pop	{r4, pc}
    c702:	2801      	cmp	r0, #1
    c704:	d002      	beq.n	c70c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    c706:	2802      	cmp	r0, #2
    c708:	d003      	beq.n	c712 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    c70a:	e004      	b.n	c716 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    c70c:	2901      	cmp	r1, #1
    c70e:	d004      	beq.n	c71a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    c710:	e001      	b.n	c716 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    c712:	2902      	cmp	r1, #2
    c714:	d001      	beq.n	c71a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    c716:	2000      	movs	r0, #0
    c718:	4770      	bx	lr
    c71a:	2001      	movs	r0, #1
    c71c:	4770      	bx	lr

0000c71e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    c71e:	b510      	push	{r4, lr}
    c720:	4604      	mov	r4, r0
    c722:	f890 0020 	ldrb.w	r0, [r0, #32]
    c726:	b108      	cbz	r0, c72c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    c728:	2825      	cmp	r0, #37	; 0x25
    c72a:	d901      	bls.n	c730 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    c72c:	2012      	movs	r0, #18
    c72e:	bd10      	pop	{r4, pc}
    c730:	b12a      	cbz	r2, c73e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    c732:	7d60      	ldrb	r0, [r4, #21]
    c734:	b128      	cbz	r0, c742 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    c736:	2801      	cmp	r0, #1
    c738:	d009      	beq.n	c74e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    c73a:	201f      	movs	r0, #31
    c73c:	bd10      	pop	{r4, pc}
    c73e:	2000      	movs	r0, #0
    c740:	bd10      	pop	{r4, pc}
    c742:	4620      	mov	r0, r4
    c744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c748:	4611      	mov	r1, r2
    c74a:	f7f9 bd69 	b.w	6220 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    c74e:	88a2      	ldrh	r2, [r4, #4]
    c750:	6909      	ldr	r1, [r1, #16]
    c752:	f104 0015 	add.w	r0, r4, #21
    c756:	f7f9 fd0f 	bl	6178 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    c75a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    c75e:	e7ee      	b.n	c73e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000c760 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    c760:	b530      	push	{r4, r5, lr}
    c762:	1c42      	adds	r2, r0, #1
    c764:	428a      	cmp	r2, r1
    c766:	d004      	beq.n	c772 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    c768:	680a      	ldr	r2, [r1, #0]
    c76a:	f8c0 2001 	str.w	r2, [r0, #1]
    c76e:	7909      	ldrb	r1, [r1, #4]
    c770:	7141      	strb	r1, [r0, #5]
    c772:	7941      	ldrb	r1, [r0, #5]
    c774:	f001 011f 	and.w	r1, r1, #31
    c778:	7141      	strb	r1, [r0, #5]
    c77a:	2100      	movs	r1, #0
    c77c:	72c1      	strb	r1, [r0, #11]
    c77e:	1843      	adds	r3, r0, r1
    c780:	1c49      	adds	r1, r1, #1
    c782:	785c      	ldrb	r4, [r3, #1]
    c784:	b2c9      	uxtb	r1, r1
    c786:	f004 0201 	and.w	r2, r4, #1
    c78a:	0864      	lsrs	r4, r4, #1
    c78c:	f004 0501 	and.w	r5, r4, #1
    c790:	4415      	add	r5, r2
    c792:	0862      	lsrs	r2, r4, #1
    c794:	f002 0401 	and.w	r4, r2, #1
    c798:	442c      	add	r4, r5
    c79a:	0852      	lsrs	r2, r2, #1
    c79c:	f002 0501 	and.w	r5, r2, #1
    c7a0:	442c      	add	r4, r5
    c7a2:	0852      	lsrs	r2, r2, #1
    c7a4:	f002 0501 	and.w	r5, r2, #1
    c7a8:	442c      	add	r4, r5
    c7aa:	0852      	lsrs	r2, r2, #1
    c7ac:	f002 0501 	and.w	r5, r2, #1
    c7b0:	442c      	add	r4, r5
    c7b2:	0852      	lsrs	r2, r2, #1
    c7b4:	f002 0501 	and.w	r5, r2, #1
    c7b8:	442c      	add	r4, r5
    c7ba:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    c7be:	719a      	strb	r2, [r3, #6]
    c7c0:	7ac3      	ldrb	r3, [r0, #11]
    c7c2:	2905      	cmp	r1, #5
    c7c4:	441a      	add	r2, r3
    c7c6:	72c2      	strb	r2, [r0, #11]
    c7c8:	d3d9      	bcc.n	c77e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    c7ca:	bd30      	pop	{r4, r5, pc}

0000c7cc <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    c7cc:	b510      	push	{r4, lr}
    c7ce:	29fb      	cmp	r1, #251	; 0xfb
    c7d0:	d904      	bls.n	c7dc <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    c7d2:	f44f 61af 	mov.w	r1, #1400	; 0x578
    c7d6:	202a      	movs	r0, #42	; 0x2a
    c7d8:	f7f7 fec8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7dc:	7041      	strb	r1, [r0, #1]
    c7de:	bd10      	pop	{r4, pc}

0000c7e0 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    c7e0:	7101      	strb	r1, [r0, #4]
    c7e2:	4770      	bx	lr

0000c7e4 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    c7e4:	7141      	strb	r1, [r0, #5]
    c7e6:	4770      	bx	lr

0000c7e8 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    c7e8:	680a      	ldr	r2, [r1, #0]
    c7ea:	6042      	str	r2, [r0, #4]
    c7ec:	7909      	ldrb	r1, [r1, #4]
    c7ee:	7201      	strb	r1, [r0, #8]
    c7f0:	4770      	bx	lr

0000c7f2 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    c7f2:	72c1      	strb	r1, [r0, #11]
    c7f4:	0a09      	lsrs	r1, r1, #8
    c7f6:	7301      	strb	r1, [r0, #12]
    c7f8:	4770      	bx	lr

0000c7fa <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    c7fa:	8809      	ldrh	r1, [r1, #0]
    c7fc:	8181      	strh	r1, [r0, #12]
    c7fe:	4770      	bx	lr

0000c800 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    c800:	6809      	ldr	r1, [r1, #0]
    c802:	f8c0 1016 	str.w	r1, [r0, #22]
    c806:	4770      	bx	lr

0000c808 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    c808:	680a      	ldr	r2, [r1, #0]
    c80a:	6042      	str	r2, [r0, #4]
    c80c:	6849      	ldr	r1, [r1, #4]
    c80e:	6081      	str	r1, [r0, #8]
    c810:	4770      	bx	lr

0000c812 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    c812:	680a      	ldr	r2, [r1, #0]
    c814:	f840 2f0e 	str.w	r2, [r0, #14]!
    c818:	6849      	ldr	r1, [r1, #4]
    c81a:	6041      	str	r1, [r0, #4]
    c81c:	4770      	bx	lr

0000c81e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    c81e:	680a      	ldr	r2, [r1, #0]
    c820:	6042      	str	r2, [r0, #4]
    c822:	6849      	ldr	r1, [r1, #4]
    c824:	6081      	str	r1, [r0, #8]
    c826:	4770      	bx	lr

0000c828 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    c828:	7802      	ldrb	r2, [r0, #0]
    c82a:	f001 0103 	and.w	r1, r1, #3
    c82e:	f022 0203 	bic.w	r2, r2, #3
    c832:	430a      	orrs	r2, r1
    c834:	7002      	strb	r2, [r0, #0]
    c836:	4770      	bx	lr

0000c838 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    c838:	7101      	strb	r1, [r0, #4]
    c83a:	4770      	bx	lr

0000c83c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    c83c:	7101      	strb	r1, [r0, #4]
    c83e:	0a09      	lsrs	r1, r1, #8
    c840:	7141      	strb	r1, [r0, #5]
    c842:	4770      	bx	lr

0000c844 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    c844:	7181      	strb	r1, [r0, #6]
    c846:	0a09      	lsrs	r1, r1, #8
    c848:	71c1      	strb	r1, [r0, #7]
    c84a:	4770      	bx	lr

0000c84c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    c84c:	7201      	strb	r1, [r0, #8]
    c84e:	0a09      	lsrs	r1, r1, #8
    c850:	7241      	strb	r1, [r0, #9]
    c852:	4770      	bx	lr

0000c854 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    c854:	7281      	strb	r1, [r0, #10]
    c856:	0a09      	lsrs	r1, r1, #8
    c858:	72c1      	strb	r1, [r0, #11]
    c85a:	4770      	bx	lr

0000c85c <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    c85c:	7181      	strb	r1, [r0, #6]
    c85e:	0a09      	lsrs	r1, r1, #8
    c860:	71c1      	strb	r1, [r0, #7]
    c862:	4770      	bx	lr

0000c864 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    c864:	7141      	strb	r1, [r0, #5]
    c866:	4770      	bx	lr

0000c868 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    c868:	7841      	ldrb	r1, [r0, #1]
    c86a:	7800      	ldrb	r0, [r0, #0]
    c86c:	f010 000f 	ands.w	r0, r0, #15
    c870:	d005      	beq.n	c87e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    c872:	2801      	cmp	r0, #1
    c874:	d007      	beq.n	c886 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    c876:	2802      	cmp	r0, #2
    c878:	d001      	beq.n	c87e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    c87a:	2806      	cmp	r0, #6
    c87c:	d105      	bne.n	c88a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    c87e:	1f89      	subs	r1, r1, #6
    c880:	291f      	cmp	r1, #31
    c882:	d904      	bls.n	c88e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    c884:	e001      	b.n	c88a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    c886:	290c      	cmp	r1, #12
    c888:	d001      	beq.n	c88e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    c88a:	2000      	movs	r0, #0
    c88c:	4770      	bx	lr
    c88e:	2001      	movs	r0, #1
    c890:	4770      	bx	lr

0000c892 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    c892:	7800      	ldrb	r0, [r0, #0]
    c894:	09c0      	lsrs	r0, r0, #7
    c896:	4770      	bx	lr

0000c898 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    c898:	f850 2f03 	ldr.w	r2, [r0, #3]!
    c89c:	600a      	str	r2, [r1, #0]
    c89e:	8880      	ldrh	r0, [r0, #4]
    c8a0:	8088      	strh	r0, [r1, #4]
    c8a2:	4770      	bx	lr

0000c8a4 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    c8a4:	7800      	ldrb	r0, [r0, #0]
    c8a6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    c8aa:	4770      	bx	lr

0000c8ac <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    c8ac:	7801      	ldrb	r1, [r0, #0]
    c8ae:	f001 010f 	and.w	r1, r1, #15
    c8b2:	2904      	cmp	r1, #4
    c8b4:	d105      	bne.n	c8c2 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    c8b6:	7840      	ldrb	r0, [r0, #1]
    c8b8:	1f80      	subs	r0, r0, #6
    c8ba:	281f      	cmp	r0, #31
    c8bc:	d801      	bhi.n	c8c2 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    c8be:	2001      	movs	r0, #1
    c8c0:	4770      	bx	lr
    c8c2:	2000      	movs	r0, #0
    c8c4:	4770      	bx	lr

0000c8c6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    c8c6:	b510      	push	{r4, lr}
    c8c8:	7802      	ldrb	r2, [r0, #0]
    c8ca:	f001 030f 	and.w	r3, r1, #15
    c8ce:	f022 020f 	bic.w	r2, r2, #15
    c8d2:	431a      	orrs	r2, r3
    c8d4:	7002      	strb	r2, [r0, #0]
    c8d6:	2907      	cmp	r1, #7
    c8d8:	d20c      	bcs.n	c8f4 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    c8da:	e8df f001 	tbb	[pc, r1]
    c8de:	0604      	.short	0x0604
    c8e0:	08040604 	.word	0x08040604
    c8e4:	0004      	.short	0x0004
    c8e6:	2106      	movs	r1, #6
    c8e8:	e002      	b.n	c8f0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    c8ea:	210c      	movs	r1, #12
    c8ec:	e000      	b.n	c8f0 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    c8ee:	2122      	movs	r1, #34	; 0x22
    c8f0:	7041      	strb	r1, [r0, #1]
    c8f2:	bd10      	pop	{r4, pc}
    c8f4:	216e      	movs	r1, #110	; 0x6e
    c8f6:	202a      	movs	r0, #42	; 0x2a
    c8f8:	f7f7 fe38 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000c8fc <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    c8fc:	680a      	ldr	r2, [r1, #0]
    c8fe:	f840 2f09 	str.w	r2, [r0, #9]!
    c902:	8889      	ldrh	r1, [r1, #4]
    c904:	8081      	strh	r1, [r0, #4]
    c906:	4770      	bx	lr

0000c908 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    c908:	7802      	ldrb	r2, [r0, #0]
    c90a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    c90e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    c912:	7002      	strb	r2, [r0, #0]
    c914:	4770      	bx	lr

0000c916 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    c916:	680a      	ldr	r2, [r1, #0]
    c918:	f840 2f03 	str.w	r2, [r0, #3]!
    c91c:	8889      	ldrh	r1, [r1, #4]
    c91e:	8081      	strh	r1, [r0, #4]
    c920:	4770      	bx	lr

0000c922 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    c922:	7802      	ldrb	r2, [r0, #0]
    c924:	2340      	movs	r3, #64	; 0x40
    c926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    c92a:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    c92e:	430a      	orrs	r2, r1
    c930:	7002      	strb	r2, [r0, #0]
    c932:	4770      	bx	lr

0000c934 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    c934:	f7f9 beb4 	b.w	66a0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    c938:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c93c:	4604      	mov	r4, r0
    c93e:	2000      	movs	r0, #0
    c940:	f7f7 ff98 	bl	4874 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    c944:	4605      	mov	r5, r0
    c946:	1c40      	adds	r0, r0, #1
    c948:	2600      	movs	r6, #0
    c94a:	b2c7      	uxtb	r7, r0
    c94c:	46b0      	mov	r8, r6
    c94e:	e017      	b.n	c980 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
    c950:	8820      	ldrh	r0, [r4, #0]
    c952:	1c40      	adds	r0, r0, #1
    c954:	b280      	uxth	r0, r0
    c956:	8020      	strh	r0, [r4, #0]
    c958:	42b8      	cmp	r0, r7
    c95a:	d302      	bcc.n	c962 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    c95c:	4640      	mov	r0, r8
    c95e:	f8a4 8000 	strh.w	r8, [r4]
    c962:	b280      	uxth	r0, r0
    c964:	42a8      	cmp	r0, r5
    c966:	d304      	bcc.n	c972 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    c968:	42b8      	cmp	r0, r7
    c96a:	d202      	bcs.n	c972 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    c96c:	2000      	movs	r0, #0
    c96e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c972:	4669      	mov	r1, sp
    c974:	f7ff fd1a 	bl	c3ac <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    c978:	2800      	cmp	r0, #0
    c97a:	d0f8      	beq.n	c96e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
    c97c:	1c76      	adds	r6, r6, #1
    c97e:	b2f6      	uxtb	r6, r6
    c980:	42be      	cmp	r6, r7
    c982:	d3e5      	bcc.n	c950 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    c984:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c988:	8020      	strh	r0, [r4, #0]
    c98a:	2012      	movs	r0, #18
    c98c:	e7ef      	b.n	c96e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0000c98e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    c98e:	b570      	push	{r4, r5, r6, lr}
    c990:	8050      	strh	r0, [r2, #2]
    c992:	890c      	ldrh	r4, [r1, #8]
    c994:	8094      	strh	r4, [r2, #4]
    c996:	898b      	ldrh	r3, [r1, #12]
    c998:	80d3      	strh	r3, [r2, #6]
    c99a:	8948      	ldrh	r0, [r1, #10]
    c99c:	8110      	strh	r0, [r2, #8]
    c99e:	89cd      	ldrh	r5, [r1, #14]
    c9a0:	8155      	strh	r5, [r2, #10]
    c9a2:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    c9a4:	42ae      	cmp	r6, r5
    c9a6:	d108      	bne.n	c9ba <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    c9a8:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    c9aa:	4285      	cmp	r5, r0
    c9ac:	d105      	bne.n	c9ba <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    c9ae:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    c9b0:	429d      	cmp	r5, r3
    c9b2:	d102      	bne.n	c9ba <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    c9b4:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    c9b6:	42a3      	cmp	r3, r4
    c9b8:	d001      	beq.n	c9be <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    c9ba:	2301      	movs	r3, #1
    c9bc:	e000      	b.n	c9c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    c9be:	2300      	movs	r3, #0
    c9c0:	7313      	strb	r3, [r2, #12]
    c9c2:	8548      	strh	r0, [r1, #42]	; 0x2a
    c9c4:	8950      	ldrh	r0, [r2, #10]
    c9c6:	85c8      	strh	r0, [r1, #46]	; 0x2e
    c9c8:	8890      	ldrh	r0, [r2, #4]
    c9ca:	8588      	strh	r0, [r1, #44]	; 0x2c
    c9cc:	88d0      	ldrh	r0, [r2, #6]
    c9ce:	8608      	strh	r0, [r1, #48]	; 0x30
    c9d0:	2001      	movs	r0, #1
    c9d2:	7010      	strb	r0, [r2, #0]
    c9d4:	bd70      	pop	{r4, r5, r6, pc}

0000c9d6 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    c9d6:	b510      	push	{r4, lr}
    c9d8:	888c      	ldrh	r4, [r1, #4]
    c9da:	890a      	ldrh	r2, [r1, #8]
    c9dc:	884b      	ldrh	r3, [r1, #2]
    c9de:	88c9      	ldrh	r1, [r1, #6]
    c9e0:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    c9e4:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    c9e8:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    c9ec:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    c9f0:	bd10      	pop	{r4, pc}

0000c9f2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    c9f2:	b570      	push	{r4, r5, r6, lr}
    c9f4:	4615      	mov	r5, r2
    c9f6:	460c      	mov	r4, r1
    c9f8:	f000 f8b4 	bl	cb64 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x52>
    c9fc:	3096      	adds	r0, #150	; 0x96
    c9fe:	4428      	add	r0, r5
    ca00:	42a0      	cmp	r0, r4
    ca02:	d801      	bhi.n	ca08 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    ca04:	1a20      	subs	r0, r4, r0
    ca06:	bd70      	pop	{r4, r5, r6, pc}
    ca08:	2000      	movs	r0, #0
    ca0a:	bd70      	pop	{r4, r5, r6, pc}

0000ca0c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    ca0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca10:	4604      	mov	r4, r0
    ca12:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    ca14:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    ca16:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    ca1a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    ca1e:	4285      	cmp	r5, r0
    ca20:	d300      	bcc.n	ca24 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    ca22:	4605      	mov	r5, r0
    ca24:	4620      	mov	r0, r4
    ca26:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    ca2a:	f000 f88b 	bl	cb44 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x32>
    ca2e:	4601      	mov	r1, r0
    ca30:	86e5      	strh	r5, [r4, #54]	; 0x36
    ca32:	8761      	strh	r1, [r4, #58]	; 0x3a
    ca34:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    ca36:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ca3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    ca3c:	4680      	mov	r8, r0
    ca3e:	42aa      	cmp	r2, r5
    ca40:	d200      	bcs.n	ca44 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    ca42:	462a      	mov	r2, r5
    ca44:	428b      	cmp	r3, r1
    ca46:	d200      	bcs.n	ca4a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    ca48:	460b      	mov	r3, r1
    ca4a:	8202      	strh	r2, [r0, #16]
    ca4c:	f8a8 3012 	strh.w	r3, [r8, #18]
    ca50:	42bd      	cmp	r5, r7
    ca52:	d101      	bne.n	ca58 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    ca54:	42b1      	cmp	r1, r6
    ca56:	d001      	beq.n	ca5c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    ca58:	2001      	movs	r0, #1
    ca5a:	e000      	b.n	ca5e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    ca5c:	2000      	movs	r0, #0
    ca5e:	4681      	mov	r9, r0
    ca60:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    ca64:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    ca68:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    ca6a:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    ca6c:	4285      	cmp	r5, r0
    ca6e:	d300      	bcc.n	ca72 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    ca70:	4605      	mov	r5, r0
    ca72:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    ca76:	4620      	mov	r0, r4
    ca78:	f000 f86c 	bl	cb54 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x42>
    ca7c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    ca80:	2902      	cmp	r1, #2
    ca82:	d108      	bne.n	ca96 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    ca84:	42af      	cmp	r7, r5
    ca86:	d200      	bcs.n	ca8a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    ca88:	463d      	mov	r5, r7
    ca8a:	4286      	cmp	r6, r0
    ca8c:	d200      	bcs.n	ca90 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    ca8e:	4630      	mov	r0, r6
    ca90:	2100      	movs	r1, #0
    ca92:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    ca96:	f8a8 5008 	strh.w	r5, [r8, #8]
    ca9a:	f8a8 000c 	strh.w	r0, [r8, #12]
    ca9e:	42bd      	cmp	r5, r7
    caa0:	d101      	bne.n	caa6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    caa2:	42b0      	cmp	r0, r6
    caa4:	d001      	beq.n	caaa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    caa6:	2001      	movs	r0, #1
    caa8:	e000      	b.n	caac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    caaa:	2000      	movs	r0, #0
    caac:	ea40 0009 	orr.w	r0, r0, r9
    cab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000cab4 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    cab4:	6840      	ldr	r0, [r0, #4]
    cab6:	4770      	bx	lr

0000cab8 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    cab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cabc:	4616      	mov	r6, r2
    cabe:	460f      	mov	r7, r1
    cac0:	4604      	mov	r4, r0
    cac2:	f000 f84f 	bl	cb64 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x52>
    cac6:	4605      	mov	r5, r0
    cac8:	463a      	mov	r2, r7
    caca:	68e1      	ldr	r1, [r4, #12]
    cacc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    cace:	f000 f834 	bl	cb3a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x28>
    cad2:	19a9      	adds	r1, r5, r6
    cad4:	4281      	cmp	r1, r0
    cad6:	d300      	bcc.n	cada <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    cad8:	4608      	mov	r0, r1
    cada:	6320      	str	r0, [r4, #48]	; 0x30
    cadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cae0 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    cae0:	221b      	movs	r2, #27
    cae2:	8402      	strh	r2, [r0, #32]
    cae4:	8382      	strh	r2, [r0, #28]
    cae6:	82c2      	strh	r2, [r0, #22]
    cae8:	8282      	strh	r2, [r0, #20]
    caea:	8142      	strh	r2, [r0, #10]
    caec:	8202      	strh	r2, [r0, #16]
    caee:	8102      	strh	r2, [r0, #8]
    caf0:	8542      	strh	r2, [r0, #42]	; 0x2a
    caf2:	8582      	strh	r2, [r0, #44]	; 0x2c
    caf4:	8482      	strh	r2, [r0, #36]	; 0x24
    caf6:	2900      	cmp	r1, #0
    caf8:	d10a      	bne.n	cb10 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    cafa:	f44f 71a4 	mov.w	r1, #328	; 0x148
    cafe:	8441      	strh	r1, [r0, #34]	; 0x22
    cb00:	83c1      	strh	r1, [r0, #30]
    cb02:	8341      	strh	r1, [r0, #26]
    cb04:	8301      	strh	r1, [r0, #24]
    cb06:	81c1      	strh	r1, [r0, #14]
    cb08:	8241      	strh	r1, [r0, #18]
    cb0a:	8181      	strh	r1, [r0, #12]
    cb0c:	85c1      	strh	r1, [r0, #46]	; 0x2e
    cb0e:	8601      	strh	r1, [r0, #48]	; 0x30
    cb10:	4770      	bx	lr

0000cb12 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    cb12:	6800      	ldr	r0, [r0, #0]
    cb14:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    cb18:	4290      	cmp	r0, r2
    cb1a:	d903      	bls.n	cb24 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    cb1c:	1a40      	subs	r0, r0, r1
    cb1e:	389c      	subs	r0, #156	; 0x9c
    cb20:	0840      	lsrs	r0, r0, #1
    cb22:	4770      	bx	lr
    cb24:	2000      	movs	r0, #0
    cb26:	4770      	bx	lr
    cb28:	2902      	cmp	r1, #2
    cb2a:	d003      	beq.n	cb34 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x22>
    cb2c:	00c0      	lsls	r0, r0, #3
    cb2e:	3070      	adds	r0, #112	; 0x70
    cb30:	b280      	uxth	r0, r0
    cb32:	4770      	bx	lr
    cb34:	0080      	lsls	r0, r0, #2
    cb36:	303c      	adds	r0, #60	; 0x3c
    cb38:	e7fa      	b.n	cb30 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x1e>
    cb3a:	4288      	cmp	r0, r1
    cb3c:	d300      	bcc.n	cb40 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x2e>
    cb3e:	4608      	mov	r0, r1
    cb40:	1a80      	subs	r0, r0, r2
    cb42:	4770      	bx	lr
    cb44:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    cb48:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    cb4c:	4281      	cmp	r1, r0
    cb4e:	d200      	bcs.n	cb52 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x40>
    cb50:	4608      	mov	r0, r1
    cb52:	4770      	bx	lr
    cb54:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    cb58:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    cb5c:	4281      	cmp	r1, r0
    cb5e:	d200      	bcs.n	cb62 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x50>
    cb60:	4608      	mov	r0, r1
    cb62:	4770      	bx	lr
    cb64:	2196      	movs	r1, #150	; 0x96
    cb66:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    cb6a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    cb6e:	f000 b800 	b.w	cb72 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x60>
    cb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb76:	460d      	mov	r5, r1
    cb78:	4606      	mov	r6, r0
    cb7a:	4698      	mov	r8, r3
    cb7c:	4617      	mov	r7, r2
    cb7e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    cb80:	4611      	mov	r1, r2
    cb82:	f7ff ffd1 	bl	cb28 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    cb86:	4604      	mov	r4, r0
    cb88:	4639      	mov	r1, r7
    cb8a:	4630      	mov	r0, r6
    cb8c:	f7ff ffe2 	bl	cb54 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x42>
    cb90:	42a0      	cmp	r0, r4
    cb92:	d200      	bcs.n	cb96 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x84>
    cb94:	4604      	mov	r4, r0
    cb96:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    cb98:	4641      	mov	r1, r8
    cb9a:	f7ff ffc5 	bl	cb28 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x16>
    cb9e:	4607      	mov	r7, r0
    cba0:	4641      	mov	r1, r8
    cba2:	4630      	mov	r0, r6
    cba4:	f7ff ffce 	bl	cb44 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x32>
    cba8:	42b8      	cmp	r0, r7
    cbaa:	d300      	bcc.n	cbae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x9c>
    cbac:	4638      	mov	r0, r7
    cbae:	4420      	add	r0, r4
    cbb0:	4428      	add	r0, r5
    cbb2:	1d80      	adds	r0, r0, #6
    cbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cbb8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    cbb8:	b510      	push	{r4, lr}
    cbba:	4604      	mov	r4, r0
    cbbc:	2108      	movs	r1, #8
    cbbe:	4620      	mov	r0, r4
    cbc0:	f7f7 fd40 	bl	4644 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    cbc4:	6820      	ldr	r0, [r4, #0]
    cbc6:	2800      	cmp	r0, #0
    cbc8:	d102      	bne.n	cbd0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    cbca:	6860      	ldr	r0, [r4, #4]
    cbcc:	2800      	cmp	r0, #0
    cbce:	d0f5      	beq.n	cbbc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    cbd0:	bd10      	pop	{r4, pc}
    cbd2:	2801      	cmp	r0, #1
    cbd4:	d102      	bne.n	cbdc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    cbd6:	7948      	ldrb	r0, [r1, #5]
    cbd8:	0980      	lsrs	r0, r0, #6
    cbda:	d001      	beq.n	cbe0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    cbdc:	2000      	movs	r0, #0
    cbde:	4770      	bx	lr
    cbe0:	2001      	movs	r0, #1
    cbe2:	4770      	bx	lr
    cbe4:	2801      	cmp	r0, #1
    cbe6:	d106      	bne.n	cbf6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    cbe8:	7948      	ldrb	r0, [r1, #5]
    cbea:	2101      	movs	r1, #1
    cbec:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    cbf0:	d101      	bne.n	cbf6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    cbf2:	2001      	movs	r0, #1
    cbf4:	4770      	bx	lr
    cbf6:	2000      	movs	r0, #0
    cbf8:	4770      	bx	lr
    cbfa:	b118      	cbz	r0, cc04 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    cbfc:	2802      	cmp	r0, #2
    cbfe:	d001      	beq.n	cc04 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    cc00:	2001      	movs	r0, #1
    cc02:	4770      	bx	lr
    cc04:	2000      	movs	r0, #0
    cc06:	4770      	bx	lr
    cc08:	2802      	cmp	r0, #2
    cc0a:	d003      	beq.n	cc14 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    cc0c:	2803      	cmp	r0, #3
    cc0e:	d001      	beq.n	cc14 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    cc10:	2000      	movs	r0, #0
    cc12:	4770      	bx	lr
    cc14:	2001      	movs	r0, #1
    cc16:	4770      	bx	lr

0000cc18 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    cc18:	f7fa bd4a 	b.w	76b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    cc1c:	b510      	push	{r4, lr}
    cc1e:	f7fa fb95 	bl	734c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    cc22:	f7f9 ff37 	bl	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    cc26:	f7fd faef 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    cc2a:	2005      	movs	r0, #5
    cc2c:	bd10      	pop	{r4, pc}
    cc2e:	b510      	push	{r4, lr}
    cc30:	f7fa fb8c 	bl	734c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    cc34:	f7fd fae8 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    cc38:	2005      	movs	r0, #5
    cc3a:	bd10      	pop	{r4, pc}
    cc3c:	b530      	push	{r4, r5, lr}
    cc3e:	b089      	sub	sp, #36	; 0x24
    cc40:	4605      	mov	r5, r0
    cc42:	f7fa fb83 	bl	734c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    cc46:	7828      	ldrb	r0, [r5, #0]
    cc48:	4669      	mov	r1, sp
    cc4a:	f000 040f 	and.w	r4, r0, #15
    cc4e:	4622      	mov	r2, r4
    cc50:	4628      	mov	r0, r5
    cc52:	f7fa feed 	bl	7a30 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    cc56:	2200      	movs	r2, #0
    cc58:	4621      	mov	r1, r4
    cc5a:	4668      	mov	r0, sp
    cc5c:	f7f9 ff9a 	bl	6b94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    cc60:	4621      	mov	r1, r4
    cc62:	4668      	mov	r0, sp
    cc64:	f7fa faf2 	bl	724c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7f4>
    cc68:	4604      	mov	r4, r0
    cc6a:	f7f9 ff13 	bl	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    cc6e:	b009      	add	sp, #36	; 0x24
    cc70:	4620      	mov	r0, r4
    cc72:	bd30      	pop	{r4, r5, pc}
    cc74:	f240 21f2 	movw	r1, #754	; 0x2f2
    cc78:	2032      	movs	r0, #50	; 0x32
    cc7a:	f7f7 fc77 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc7e:	b510      	push	{r4, lr}
    cc80:	f7fa fb64 	bl	734c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8f4>
    cc84:	f7fd fac0 	bl	a208 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    cc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cc8c:	f7fa bd28 	b.w	76e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc88>
    cc90:	f7fa bd0e 	b.w	76b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc58>
    cc94:	f7ff b9d2 	b.w	c03c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000cc98 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc9a:	b08b      	sub	sp, #44	; 0x2c
    cc9c:	4607      	mov	r7, r0
    cc9e:	f7f7 ff71 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    cca2:	4604      	mov	r4, r0
    cca4:	f7ff f8d3 	bl	be4e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    cca8:	0005      	movs	r5, r0
    ccaa:	d00c      	beq.n	ccc6 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    ccac:	4620      	mov	r0, r4
    ccae:	4629      	mov	r1, r5
    ccb0:	466a      	mov	r2, sp
    ccb2:	f7ff f8fd 	bl	beb0 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ccb6:	4606      	mov	r6, r0
    ccb8:	f7f7 ff5e 	bl	4b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ccbc:	42b0      	cmp	r0, r6
    ccbe:	d005      	beq.n	cccc <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    ccc0:	f44f 7198 	mov.w	r1, #304	; 0x130
    ccc4:	e033      	b.n	cd2e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    ccc6:	2000      	movs	r0, #0
    ccc8:	b00b      	add	sp, #44	; 0x2c
    ccca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cccc:	a901      	add	r1, sp, #4
    ccce:	9800      	ldr	r0, [sp, #0]
    ccd0:	f000 f8b4 	bl	ce3c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ccd4:	1d3e      	adds	r6, r7, #4
    ccd6:	4628      	mov	r0, r5
    ccd8:	f7ff f871 	bl	bdbe <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ccdc:	4605      	mov	r5, r0
    ccde:	4601      	mov	r1, r0
    cce0:	221c      	movs	r2, #28
    cce2:	4630      	mov	r0, r6
    cce4:	f7fe fade 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cce8:	7aa8      	ldrb	r0, [r5, #10]
    ccea:	f04f 0500 	mov.w	r5, #0
    ccee:	06c1      	lsls	r1, r0, #27
    ccf0:	d50d      	bpl.n	cd0e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    ccf2:	0740      	lsls	r0, r0, #29
    ccf4:	d40a      	bmi.n	cd0c <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    ccf6:	f89d 2014 	ldrb.w	r2, [sp, #20]
    ccfa:	f106 001c 	add.w	r0, r6, #28
    ccfe:	9904      	ldr	r1, [sp, #16]
    cd00:	f7fe fad0 	bl	b2a4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd04:	f89d 0014 	ldrb.w	r0, [sp, #20]
    cd08:	7230      	strb	r0, [r6, #8]
    cd0a:	e000      	b.n	cd0e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    cd0c:	7235      	strb	r5, [r6, #8]
    cd0e:	707d      	strb	r5, [r7, #1]
    cd10:	2005      	movs	r0, #5
    cd12:	7038      	strb	r0, [r7, #0]
    cd14:	4620      	mov	r0, r4
    cd16:	f7ff f86d 	bl	bdf4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    cd1a:	b130      	cbz	r0, cd2a <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    cd1c:	2100      	movs	r1, #0
    cd1e:	4620      	mov	r0, r4
    cd20:	460a      	mov	r2, r1
    cd22:	f7ff f957 	bl	bfd4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    cd26:	2001      	movs	r0, #1
    cd28:	e7ce      	b.n	ccc8 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    cd2a:	f240 1173 	movw	r1, #371	; 0x173
    cd2e:	2033      	movs	r0, #51	; 0x33
    cd30:	f7f7 fc1c 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000cd34 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    cd34:	b510      	push	{r4, lr}
    cd36:	f7f7 ff25 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    cd3a:	f000 f874 	bl	ce26 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    cd3e:	4604      	mov	r4, r0
    cd40:	221c      	movs	r2, #28
    cd42:	2100      	movs	r1, #0
    cd44:	f7fe fb28 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd48:	207f      	movs	r0, #127	; 0x7f
    cd4a:	76a0      	strb	r0, [r4, #26]
    cd4c:	21ff      	movs	r1, #255	; 0xff
    cd4e:	73a1      	strb	r1, [r4, #14]
    cd50:	7061      	strb	r1, [r4, #1]
    cd52:	74e1      	strb	r1, [r4, #19]
    cd54:	7aa0      	ldrb	r0, [r4, #10]
    cd56:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    cd5a:	3020      	adds	r0, #32
    cd5c:	72a0      	strb	r0, [r4, #10]
    cd5e:	bd10      	pop	{r4, pc}

0000cd60 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    cd60:	f7ff bfe8 	b.w	cd34 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000cd64 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    cd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cd68:	461e      	mov	r6, r3
    cd6a:	4617      	mov	r7, r2
    cd6c:	4689      	mov	r9, r1
    cd6e:	4682      	mov	sl, r0
    cd70:	f8dd 8020 	ldr.w	r8, [sp, #32]
    cd74:	f7f7 ff06 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    cd78:	4604      	mov	r4, r0
    cd7a:	f7ff f822 	bl	bdc2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    cd7e:	2801      	cmp	r0, #1
    cd80:	d034      	beq.n	cdec <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    cd82:	4620      	mov	r0, r4
    cd84:	f000 f84f 	bl	ce26 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    cd88:	4604      	mov	r4, r0
    cd8a:	221c      	movs	r2, #28
    cd8c:	2100      	movs	r1, #0
    cd8e:	f7fe fb03 	bl	b398 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd92:	2501      	movs	r5, #1
    cd94:	7025      	strb	r5, [r4, #0]
    cd96:	1c63      	adds	r3, r4, #1
    cd98:	1ca2      	adds	r2, r4, #2
    cd9a:	4649      	mov	r1, r9
    cd9c:	4650      	mov	r0, sl
    cd9e:	f000 f827 	bl	cdf0 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    cda2:	f884 8009 	strb.w	r8, [r4, #9]
    cda6:	7aa0      	ldrb	r0, [r4, #10]
    cda8:	21ff      	movs	r1, #255	; 0xff
    cdaa:	f367 0000 	bfi	r0, r7, #0, #1
    cdae:	f040 001a 	orr.w	r0, r0, #26
    cdb2:	72a0      	strb	r0, [r4, #10]
    cdb4:	7325      	strb	r5, [r4, #12]
    cdb6:	2000      	movs	r0, #0
    cdb8:	7360      	strb	r0, [r4, #13]
    cdba:	73a1      	strb	r1, [r4, #14]
    cdbc:	74e1      	strb	r1, [r4, #19]
    cdbe:	207f      	movs	r0, #127	; 0x7f
    cdc0:	76a0      	strb	r0, [r4, #26]
    cdc2:	76e6      	strb	r6, [r4, #27]
    cdc4:	f7f7 fed8 	bl	4b78 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    cdc8:	4604      	mov	r4, r0
    cdca:	f7f7 fedb 	bl	4b84 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    cdce:	2201      	movs	r2, #1
    cdd0:	4621      	mov	r1, r4
    cdd2:	f000 f831 	bl	ce38 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    cdd6:	b120      	cbz	r0, cde2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    cdd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cddc:	2005      	movs	r0, #5
    cdde:	f7fa beef 	b.w	7bc0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    cde2:	f240 21c9 	movw	r1, #713	; 0x2c9
    cde6:	2033      	movs	r0, #51	; 0x33
    cde8:	f7f7 fbc0 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cdf0:	b510      	push	{r4, lr}
    cdf2:	461c      	mov	r4, r3
    cdf4:	460b      	mov	r3, r1
    cdf6:	29ff      	cmp	r1, #255	; 0xff
    cdf8:	d00d      	beq.n	ce16 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    cdfa:	4621      	mov	r1, r4
    cdfc:	4618      	mov	r0, r3
    cdfe:	f7f8 ff01 	bl	5c04 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    ce02:	b120      	cbz	r0, ce0e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    ce04:	7820      	ldrb	r0, [r4, #0]
    ce06:	f040 0002 	orr.w	r0, r0, #2
    ce0a:	7020      	strb	r0, [r4, #0]
    ce0c:	bd10      	pop	{r4, pc}
    ce0e:	2150      	movs	r1, #80	; 0x50
    ce10:	2033      	movs	r0, #51	; 0x33
    ce12:	f7f7 fbab 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce16:	7c41      	ldrb	r1, [r0, #17]
    ce18:	7021      	strb	r1, [r4, #0]
    ce1a:	6840      	ldr	r0, [r0, #4]
    ce1c:	6801      	ldr	r1, [r0, #0]
    ce1e:	6011      	str	r1, [r2, #0]
    ce20:	8880      	ldrh	r0, [r0, #4]
    ce22:	8090      	strh	r0, [r2, #4]
    ce24:	bd10      	pop	{r4, pc}
    ce26:	b51c      	push	{r2, r3, r4, lr}
    ce28:	4669      	mov	r1, sp
    ce2a:	aa01      	add	r2, sp, #4
    ce2c:	f7ff f832 	bl	be94 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    ce30:	9800      	ldr	r0, [sp, #0]
    ce32:	f7fe ffc4 	bl	bdbe <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ce36:	bd1c      	pop	{r2, r3, r4, pc}
    ce38:	f7fe bf69 	b.w	bd0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000ce3c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    ce3c:	7802      	ldrb	r2, [r0, #0]
    ce3e:	f002 020f 	and.w	r2, r2, #15
    ce42:	f7fa bdf5 	b.w	7a30 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    ce46:	2800      	cmp	r0, #0
    ce48:	db04      	blt.n	ce54 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    ce4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce4e:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    ce52:	e005      	b.n	ce60 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    ce54:	f000 000f 	and.w	r0, r0, #15
    ce58:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce5c:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    ce60:	0940      	lsrs	r0, r0, #5
    ce62:	4770      	bx	lr
    ce64:	6940      	ldr	r0, [r0, #20]
    ce66:	2800      	cmp	r0, #0
    ce68:	d000      	beq.n	ce6c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
    ce6a:	2001      	movs	r0, #1
    ce6c:	4770      	bx	lr
    ce6e:	b510      	push	{r4, lr}
    ce70:	2808      	cmp	r0, #8
    ce72:	d00a      	beq.n	ce8a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x4e>
    ce74:	2804      	cmp	r0, #4
    ce76:	d00a      	beq.n	ce8e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x52>
    ce78:	2802      	cmp	r0, #2
    ce7a:	d00a      	beq.n	ce92 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x56>
    ce7c:	2108      	movs	r1, #8
    ce7e:	2801      	cmp	r0, #1
    ce80:	d009      	beq.n	ce96 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x5a>
    ce82:	21d9      	movs	r1, #217	; 0xd9
    ce84:	2005      	movs	r0, #5
    ce86:	f7f7 fb71 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce8a:	2140      	movs	r1, #64	; 0x40
    ce8c:	e7f7      	b.n	ce7e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x42>
    ce8e:	2110      	movs	r1, #16
    ce90:	e7f5      	b.n	ce7e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x42>
    ce92:	2104      	movs	r1, #4
    ce94:	e7f3      	b.n	ce7e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x42>
    ce96:	222a      	movs	r2, #42	; 0x2a
    ce98:	2028      	movs	r0, #40	; 0x28
    ce9a:	fb11 0002 	smlabb	r0, r1, r2, r0
    ce9e:	b280      	uxth	r0, r0
    cea0:	bd10      	pop	{r4, pc}
    cea2:	2000      	movs	r0, #0
    cea4:	4770      	bx	lr
    cea6:	b570      	push	{r4, r5, r6, lr}
    cea8:	4604      	mov	r4, r0
    ceaa:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ceae:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ceb2:	f000 f80c 	bl	cece <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x92>
    ceb6:	4605      	mov	r5, r0
    ceb8:	f000 f857 	bl	cf6a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12e>
    cebc:	4601      	mov	r1, r0
    cebe:	462a      	mov	r2, r5
    cec0:	4620      	mov	r0, r4
    cec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cec6:	f7ff bdf7 	b.w	cab8 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ceca:	f7f5 b8b7 	b.w	203c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    cece:	b510      	push	{r4, lr}
    ced0:	4604      	mov	r4, r0
    ced2:	4608      	mov	r0, r1
    ced4:	f000 fe56 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ced8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cedc:	2c02      	cmp	r4, #2
    cede:	d00a      	beq.n	cef6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xba>
    cee0:	f640 0234 	movw	r2, #2100	; 0x834
    cee4:	4410      	add	r0, r2
    cee6:	f24a 5295 	movw	r2, #42389	; 0xa595
    ceea:	4410      	add	r0, r2
    ceec:	fbb0 f0f1 	udiv	r0, r0, r1
    cef0:	f200 1037 	addw	r0, r0, #311	; 0x137
    cef4:	bd10      	pop	{r4, pc}
    cef6:	460a      	mov	r2, r1
    cef8:	e7f4      	b.n	cee4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa8>
    cefa:	b510      	push	{r4, lr}
    cefc:	4604      	mov	r4, r0
    cefe:	2000      	movs	r0, #0
    cf00:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    cf04:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    cf08:	f7f5 fce4 	bl	28d4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    cf0c:	b140      	cbz	r0, cf20 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xe4>
    cf0e:	2020      	movs	r0, #32
    cf10:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    cf14:	f504 7084 	add.w	r0, r4, #264	; 0x108
    cf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf1c:	f7fc bcf0 	b.w	9900 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    cf20:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    cf24:	2035      	movs	r0, #53	; 0x35
    cf26:	f7f7 fb21 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cf2c:	4613      	mov	r3, r2
    cf2e:	460a      	mov	r2, r1
    cf30:	4604      	mov	r4, r0
    cf32:	4601      	mov	r1, r0
    cf34:	4668      	mov	r0, sp
    cf36:	f7fb f9dd 	bl	82f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f4>
    cf3a:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    cf3e:	4669      	mov	r1, sp
    cf40:	f7ff ffc3 	bl	ceca <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x8e>
    cf44:	2800      	cmp	r0, #0
    cf46:	d104      	bne.n	cf52 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x116>
    cf48:	f640 2139 	movw	r1, #2617	; 0xa39
    cf4c:	2035      	movs	r0, #53	; 0x35
    cf4e:	f7f7 fb0d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    cf54:	b510      	push	{r4, lr}
    cf56:	245b      	movs	r4, #91	; 0x5b
    cf58:	f000 fdd2 	bl	db00 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    cf5c:	b910      	cbnz	r0, cf64 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x128>
    cf5e:	f000 fdc5 	bl	daec <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    cf62:	b100      	cbz	r0, cf66 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x12a>
    cf64:	2462      	movs	r4, #98	; 0x62
    cf66:	4620      	mov	r0, r4
    cf68:	bd10      	pop	{r4, pc}
    cf6a:	b510      	push	{r4, lr}
    cf6c:	f7ff fff2 	bl	cf54 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    cf70:	3069      	adds	r0, #105	; 0x69
    cf72:	b280      	uxth	r0, r0
    cf74:	bd10      	pop	{r4, pc}
    cf76:	b510      	push	{r4, lr}
    cf78:	f7ff ffec 	bl	cf54 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x118>
    cf7c:	30ff      	adds	r0, #255	; 0xff
    cf7e:	b280      	uxth	r0, r0
    cf80:	bd10      	pop	{r4, pc}
    cf82:	b1d0      	cbz	r0, cfba <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x17e>
    cf84:	2908      	cmp	r1, #8
    cf86:	d011      	beq.n	cfac <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x170>
    cf88:	2904      	cmp	r1, #4
    cf8a:	d00b      	beq.n	cfa4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x168>
    cf8c:	2000      	movs	r0, #0
    cf8e:	2902      	cmp	r1, #2
    cf90:	d010      	beq.n	cfb4 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x178>
    cf92:	2108      	movs	r1, #8
    cf94:	3028      	adds	r0, #40	; 0x28
    cf96:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    cf9a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    cf9e:	4408      	add	r0, r1
    cfa0:	3098      	adds	r0, #152	; 0x98
    cfa2:	4770      	bx	lr
    cfa4:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    cfa8:	2110      	movs	r1, #16
    cfaa:	e7f4      	b.n	cf96 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x15a>
    cfac:	f44f 70c8 	mov.w	r0, #400	; 0x190
    cfb0:	2140      	movs	r1, #64	; 0x40
    cfb2:	e7f0      	b.n	cf96 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x15a>
    cfb4:	2104      	movs	r1, #4
    cfb6:	3018      	adds	r0, #24
    cfb8:	e7ed      	b.n	cf96 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x15a>
    cfba:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    cfbe:	4770      	bx	lr

0000cfc0 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    cfc0:	f7f7 bd4c 	b.w	4a5c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000cfc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    cfc4:	b538      	push	{r3, r4, r5, lr}
    cfc6:	460d      	mov	r5, r1
    cfc8:	4604      	mov	r4, r0
    cfca:	e050      	b.n	d06e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    cfcc:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    cfd0:	1c40      	adds	r0, r0, #1
    cfd2:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    cfd6:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    cfda:	1c40      	adds	r0, r0, #1
    cfdc:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    cfe0:	4620      	mov	r0, r4
    cfe2:	f000 f8e1 	bl	d1a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    cfe6:	b198      	cbz	r0, d010 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    cfe8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cfec:	1c40      	adds	r0, r0, #1
    cfee:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    cff2:	4620      	mov	r0, r4
    cff4:	f000 f86e 	bl	d0d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    cff8:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    cffc:	4288      	cmp	r0, r1
    cffe:	d307      	bcc.n	d010 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    d000:	2000      	movs	r0, #0
    d002:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    d006:	2001      	movs	r0, #1
    d008:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    d00c:	f7f9 f9d2 	bl	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d010:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    d014:	b120      	cbz	r0, d020 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    d016:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    d01a:	1c40      	adds	r0, r0, #1
    d01c:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    d020:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    d024:	b120      	cbz	r0, d030 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    d026:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    d02a:	1c40      	adds	r0, r0, #1
    d02c:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    d030:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    d034:	f88d 0000 	strb.w	r0, [sp]
    d038:	9800      	ldr	r0, [sp, #0]
    d03a:	9000      	str	r0, [sp, #0]
    d03c:	f89d 0000 	ldrb.w	r0, [sp]
    d040:	b940      	cbnz	r0, d054 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    d042:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    d046:	2300      	movs	r3, #0
    d048:	2101      	movs	r1, #1
    d04a:	f104 0078 	add.w	r0, r4, #120	; 0x78
    d04e:	f7ff f9d6 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d052:	b120      	cbz	r0, d05e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    d054:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    d058:	1c40      	adds	r0, r0, #1
    d05a:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    d05e:	4620      	mov	r0, r4
    d060:	f000 f847 	bl	d0f2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    d064:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    d068:	1c40      	adds	r0, r0, #1
    d06a:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    d06e:	1e6d      	subs	r5, r5, #1
    d070:	b2ad      	uxth	r5, r5
    d072:	d2ab      	bcs.n	cfcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    d074:	bd38      	pop	{r3, r4, r5, pc}

0000d076 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    d076:	b510      	push	{r4, lr}
    d078:	f7fc f8ec 	bl	9254 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    d07c:	b128      	cbz	r0, d08a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    d07e:	2000      	movs	r0, #0
    d080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d084:	4601      	mov	r1, r0
    d086:	f7fc b891 	b.w	91ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    d08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d08e:	f7f8 b917 	b.w	52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    d092:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    d096:	28fe      	cmp	r0, #254	; 0xfe
    d098:	d001      	beq.n	d09e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    d09a:	2001      	movs	r0, #1
    d09c:	4770      	bx	lr
    d09e:	2000      	movs	r0, #0
    d0a0:	4770      	bx	lr
    d0a2:	b510      	push	{r4, lr}
    d0a4:	2801      	cmp	r0, #1
    d0a6:	d006      	beq.n	d0b6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    d0a8:	2802      	cmp	r0, #2
    d0aa:	d004      	beq.n	d0b6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    d0ac:	f240 2163 	movw	r1, #611	; 0x263
    d0b0:	2006      	movs	r0, #6
    d0b2:	f7f7 fa5b 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0b6:	bd10      	pop	{r4, pc}
    d0b8:	2801      	cmp	r0, #1
    d0ba:	d002      	beq.n	d0c2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    d0bc:	2802      	cmp	r0, #2
    d0be:	d105      	bne.n	d0cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    d0c0:	e002      	b.n	d0c8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    d0c2:	2901      	cmp	r1, #1
    d0c4:	d004      	beq.n	d0d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    d0c6:	e001      	b.n	d0cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    d0c8:	2902      	cmp	r1, #2
    d0ca:	d001      	beq.n	d0d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    d0cc:	2000      	movs	r0, #0
    d0ce:	4770      	bx	lr
    d0d0:	2001      	movs	r0, #1
    d0d2:	4770      	bx	lr
    d0d4:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    d0d8:	428a      	cmp	r2, r1
    d0da:	d301      	bcc.n	d0e0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    d0dc:	1a51      	subs	r1, r2, r1
    d0de:	e000      	b.n	d0e2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    d0e0:	2100      	movs	r1, #0
    d0e2:	8a82      	ldrh	r2, [r0, #20]
    d0e4:	1d52      	adds	r2, r2, #5
    d0e6:	428a      	cmp	r2, r1
    d0e8:	d302      	bcc.n	d0f0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    d0ea:	2101      	movs	r1, #1
    d0ec:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    d0f0:	4770      	bx	lr
    d0f2:	b570      	push	{r4, r5, r6, lr}
    d0f4:	4604      	mov	r4, r0
    d0f6:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    d0fa:	2500      	movs	r5, #0
    d0fc:	2601      	movs	r6, #1
    d0fe:	280c      	cmp	r0, #12
    d100:	d02c      	beq.n	d15c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    d102:	280d      	cmp	r0, #13
    d104:	d129      	bne.n	d15a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    d106:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    d10a:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    d10e:	1c40      	adds	r0, r0, #1
    d110:	4288      	cmp	r0, r1
    d112:	d122      	bne.n	d15a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    d114:	8820      	ldrh	r0, [r4, #0]
    d116:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    d11a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    d11e:	f7ff f955 	bl	c3cc <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    d122:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    d126:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    d12a:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    d12e:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    d132:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    d136:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    d13a:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    d13e:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    d142:	2102      	movs	r1, #2
    d144:	4620      	mov	r0, r4
    d146:	f7f8 ff91 	bl	606c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    d14a:	f7f9 f933 	bl	63b4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d14e:	2103      	movs	r1, #3
    d150:	4620      	mov	r0, r4
    d152:	f7fa fcc7 	bl	7ae4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    d156:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    d15a:	bd70      	pop	{r4, r5, r6, pc}
    d15c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    d160:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    d164:	1c40      	adds	r0, r0, #1
    d166:	4288      	cmp	r0, r1
    d168:	d1f7      	bne.n	d15a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    d16a:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    d16e:	f8d0 1001 	ldr.w	r1, [r0, #1]
    d172:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    d176:	7940      	ldrb	r0, [r0, #5]
    d178:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    d17c:	2103      	movs	r1, #3
    d17e:	4620      	mov	r0, r4
    d180:	f7f8 ff74 	bl	606c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    d184:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    d188:	7800      	ldrb	r0, [r0, #0]
    d18a:	b140      	cbz	r0, d19e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    d18c:	2101      	movs	r1, #1
    d18e:	20fe      	movs	r0, #254	; 0xfe
    d190:	f7fc fb3e 	bl	9810 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe40>
    d194:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    d198:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    d19c:	bd70      	pop	{r4, r5, r6, pc}
    d19e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    d1a2:	2036      	movs	r0, #54	; 0x36
    d1a4:	f7f7 f9e2 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1a8:	b510      	push	{r4, lr}
    d1aa:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    d1ae:	b941      	cbnz	r1, d1c2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    d1b0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    d1b4:	2300      	movs	r3, #0
    d1b6:	2106      	movs	r1, #6
    d1b8:	3078      	adds	r0, #120	; 0x78
    d1ba:	f7ff f920 	bl	c3fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    d1be:	2800      	cmp	r0, #0
    d1c0:	d000      	beq.n	d1c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    d1c2:	2001      	movs	r0, #1
    d1c4:	bd10      	pop	{r4, pc}

0000d1c6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    d1c6:	b510      	push	{r4, lr}
    d1c8:	460c      	mov	r4, r1
    d1ca:	4601      	mov	r1, r0
    d1cc:	4610      	mov	r0, r2
    d1ce:	f7f4 fdf7 	bl	1dc0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d1d2:	2800      	cmp	r0, #0
    d1d4:	da06      	bge.n	d1e4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    d1d6:	1a21      	subs	r1, r4, r0
    d1d8:	1e49      	subs	r1, r1, #1
    d1da:	fbb1 f1f4 	udiv	r1, r1, r4
    d1de:	fb01 0004 	mla	r0, r1, r4, r0
    d1e2:	bd10      	pop	{r4, pc}
    d1e4:	fb90 f1f4 	sdiv	r1, r0, r4
    d1e8:	fb01 0014 	mls	r0, r1, r4, r0
    d1ec:	bd10      	pop	{r4, pc}
    d1ee:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    d1f2:	f001 0107 	and.w	r1, r1, #7
    d1f6:	7800      	ldrb	r0, [r0, #0]
    d1f8:	2201      	movs	r2, #1
    d1fa:	408a      	lsls	r2, r1
    d1fc:	4010      	ands	r0, r2
    d1fe:	40c8      	lsrs	r0, r1
    d200:	4770      	bx	lr
    d202:	b118      	cbz	r0, d20c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    d204:	2802      	cmp	r0, #2
    d206:	d001      	beq.n	d20c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    d208:	2001      	movs	r0, #1
    d20a:	4770      	bx	lr
    d20c:	2000      	movs	r0, #0
    d20e:	4770      	bx	lr

0000d210 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    d210:	b510      	push	{r4, lr}
    d212:	4604      	mov	r4, r0
    d214:	7800      	ldrb	r0, [r0, #0]
    d216:	b118      	cbz	r0, d220 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    d218:	2801      	cmp	r0, #1
    d21a:	d001      	beq.n	d220 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    d21c:	2012      	movs	r0, #18
    d21e:	bd10      	pop	{r4, pc}
    d220:	f000 fb4b 	bl	d8ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d224:	b120      	cbz	r0, d230 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    d226:	f7f8 fce7 	bl	5bf8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    d22a:	b108      	cbz	r0, d230 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    d22c:	200c      	movs	r0, #12
    d22e:	bd10      	pop	{r4, pc}
    d230:	7820      	ldrb	r0, [r4, #0]
    d232:	f7ff ffe6 	bl	d202 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d236:	1de2      	adds	r2, r4, #7
    d238:	f104 0317 	add.w	r3, r4, #23
    d23c:	1c61      	adds	r1, r4, #1
    d23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d242:	f7f8 bd0b 	b.w	5c5c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000d246 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    d246:	b510      	push	{r4, lr}
    d248:	4604      	mov	r4, r0
    d24a:	f000 fbc6 	bl	d9da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    d24e:	b108      	cbz	r0, d254 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    d250:	200c      	movs	r0, #12
    d252:	bd10      	pop	{r4, pc}
    d254:	7820      	ldrb	r0, [r4, #0]
    d256:	b118      	cbz	r0, d260 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    d258:	2801      	cmp	r0, #1
    d25a:	d001      	beq.n	d260 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    d25c:	2012      	movs	r0, #18
    d25e:	bd10      	pop	{r4, pc}
    d260:	f7ff ffcf 	bl	d202 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d264:	1c61      	adds	r1, r4, #1
    d266:	f7f8 fd9d 	bl	5da4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    d26a:	b108      	cbz	r0, d270 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    d26c:	2000      	movs	r0, #0
    d26e:	bd10      	pop	{r4, pc}
    d270:	2007      	movs	r0, #7
    d272:	bd10      	pop	{r4, pc}

0000d274 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    d274:	b510      	push	{r4, lr}
    d276:	f000 fb20 	bl	d8ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d27a:	b120      	cbz	r0, d286 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    d27c:	f7f8 fcbc 	bl	5bf8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    d280:	b108      	cbz	r0, d286 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    d282:	200c      	movs	r0, #12
    d284:	bd10      	pop	{r4, pc}
    d286:	f7f8 fd2f 	bl	5ce8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    d28a:	2000      	movs	r0, #0
    d28c:	bd10      	pop	{r4, pc}

0000d28e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    d28e:	b510      	push	{r4, lr}
    d290:	f000 fba3 	bl	d9da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    d294:	b108      	cbz	r0, d29a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    d296:	200c      	movs	r0, #12
    d298:	bd10      	pop	{r4, pc}
    d29a:	f7f8 fdab 	bl	5df4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    d29e:	2000      	movs	r0, #0
    d2a0:	bd10      	pop	{r4, pc}

0000d2a2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    d2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d2a4:	4605      	mov	r5, r0
    d2a6:	f000 f959 	bl	d55c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    d2aa:	2800      	cmp	r0, #0
    d2ac:	d112      	bne.n	d2d4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    d2ae:	8828      	ldrh	r0, [r5, #0]
    d2b0:	2100      	movs	r1, #0
    d2b2:	f7fe ff29 	bl	c108 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d2b6:	0004      	movs	r4, r0
    d2b8:	d00d      	beq.n	d2d6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    d2ba:	f000 faea 	bl	d892 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x336>
    d2be:	b150      	cbz	r0, d2d6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    d2c0:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    d2c4:	f88d 0000 	strb.w	r0, [sp]
    d2c8:	9800      	ldr	r0, [sp, #0]
    d2ca:	9000      	str	r0, [sp, #0]
    d2cc:	f89d 0000 	ldrb.w	r0, [sp]
    d2d0:	b118      	cbz	r0, d2da <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    d2d2:	203a      	movs	r0, #58	; 0x3a
    d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2d6:	2002      	movs	r0, #2
    d2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2da:	88a8      	ldrh	r0, [r5, #4]
    d2dc:	f7ff f872 	bl	c3c4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    d2e0:	4606      	mov	r6, r0
    d2e2:	4601      	mov	r1, r0
    d2e4:	2008      	movs	r0, #8
    d2e6:	f7ff f9de 	bl	c6a6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    d2ea:	4601      	mov	r1, r0
    d2ec:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    d2f0:	4281      	cmp	r1, r0
    d2f2:	d301      	bcc.n	d2f8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    d2f4:	42b0      	cmp	r0, r6
    d2f6:	d301      	bcc.n	d2fc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    d2f8:	2012      	movs	r0, #18
    d2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2fc:	4631      	mov	r1, r6
    d2fe:	2005      	movs	r0, #5
    d300:	f7ff f9d1 	bl	c6a6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    d304:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    d308:	2000      	movs	r0, #0
    d30a:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    d30e:	88e8      	ldrh	r0, [r5, #6]
    d310:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    d314:	8928      	ldrh	r0, [r5, #8]
    d316:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    d31a:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    d31e:	2001      	movs	r0, #1
    d320:	7020      	strb	r0, [r4, #0]
    d322:	2000      	movs	r0, #0
    d324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d326 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    d326:	b510      	push	{r4, lr}
    d328:	460b      	mov	r3, r1
    d32a:	2201      	movs	r2, #1
    d32c:	f100 0110 	add.w	r1, r0, #16
    d330:	f7ff f816 	bl	c360 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    d334:	2000      	movs	r0, #0
    d336:	bd10      	pop	{r4, pc}

0000d338 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    d338:	b510      	push	{r4, lr}
    d33a:	2108      	movs	r1, #8
    d33c:	f7f7 f982 	bl	4644 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d340:	2000      	movs	r0, #0
    d342:	bd10      	pop	{r4, pc}

0000d344 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    d344:	2108      	movs	r1, #8
    d346:	7001      	strb	r1, [r0, #0]
    d348:	2000      	movs	r0, #0
    d34a:	4770      	bx	lr

0000d34c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    d34c:	b510      	push	{r4, lr}
    d34e:	4604      	mov	r4, r0
    d350:	20d8      	movs	r0, #216	; 0xd8
    d352:	7020      	strb	r0, [r4, #0]
    d354:	f000 fa78 	bl	d848 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ec>
    d358:	7060      	strb	r0, [r4, #1]
    d35a:	2000      	movs	r0, #0
    d35c:	bd10      	pop	{r4, pc}

0000d35e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    d35e:	2108      	movs	r1, #8
    d360:	7001      	strb	r1, [r0, #0]
    d362:	2000      	movs	r0, #0
    d364:	4770      	bx	lr

0000d366 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    d366:	b510      	push	{r4, lr}
    d368:	4604      	mov	r4, r0
    d36a:	7800      	ldrb	r0, [r0, #0]
    d36c:	b108      	cbz	r0, d372 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    d36e:	2801      	cmp	r0, #1
    d370:	d110      	bne.n	d394 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    d372:	f000 faa2 	bl	d8ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d376:	b120      	cbz	r0, d382 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    d378:	f7f8 fc3e 	bl	5bf8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    d37c:	b108      	cbz	r0, d382 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    d37e:	200c      	movs	r0, #12
    d380:	bd10      	pop	{r4, pc}
    d382:	7820      	ldrb	r0, [r4, #0]
    d384:	f7ff ff3d 	bl	d202 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d388:	1c61      	adds	r1, r4, #1
    d38a:	f7fe ffcf 	bl	c32c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    d38e:	b108      	cbz	r0, d394 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    d390:	2000      	movs	r0, #0
    d392:	bd10      	pop	{r4, pc}
    d394:	2012      	movs	r0, #18
    d396:	bd10      	pop	{r4, pc}

0000d398 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    d398:	b510      	push	{r4, lr}
    d39a:	4604      	mov	r4, r0
    d39c:	f000 fb1d 	bl	d9da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    d3a0:	b108      	cbz	r0, d3a6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    d3a2:	200c      	movs	r0, #12
    d3a4:	bd10      	pop	{r4, pc}
    d3a6:	7820      	ldrb	r0, [r4, #0]
    d3a8:	b108      	cbz	r0, d3ae <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    d3aa:	2801      	cmp	r0, #1
    d3ac:	d107      	bne.n	d3be <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    d3ae:	f7ff ff28 	bl	d202 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d3b2:	1c61      	adds	r1, r4, #1
    d3b4:	f7fe ffc9 	bl	c34a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    d3b8:	b108      	cbz	r0, d3be <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    d3ba:	2000      	movs	r0, #0
    d3bc:	bd10      	pop	{r4, pc}
    d3be:	2012      	movs	r0, #18
    d3c0:	bd10      	pop	{r4, pc}

0000d3c2 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    d3c2:	b510      	push	{r4, lr}
    d3c4:	4604      	mov	r4, r0
    d3c6:	f000 fa78 	bl	d8ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d3ca:	b108      	cbz	r0, d3d0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    d3cc:	200c      	movs	r0, #12
    d3ce:	bd10      	pop	{r4, pc}
    d3d0:	7820      	ldrb	r0, [r4, #0]
    d3d2:	f000 0001 	and.w	r0, r0, #1
    d3d6:	f7f8 fc09 	bl	5bec <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    d3da:	2000      	movs	r0, #0
    d3dc:	bd10      	pop	{r4, pc}

0000d3de <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    d3de:	b510      	push	{r4, lr}
    d3e0:	4604      	mov	r4, r0
    d3e2:	f000 fa6a 	bl	d8ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35e>
    d3e6:	b120      	cbz	r0, d3f2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    d3e8:	f7f8 fc06 	bl	5bf8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    d3ec:	b108      	cbz	r0, d3f2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    d3ee:	200c      	movs	r0, #12
    d3f0:	bd10      	pop	{r4, pc}
    d3f2:	7820      	ldrb	r0, [r4, #0]
    d3f4:	f7ff ff05 	bl	d202 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    d3f8:	79e2      	ldrb	r2, [r4, #7]
    d3fa:	1c61      	adds	r1, r4, #1
    d3fc:	f7f8 fb96 	bl	5b2c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    d400:	b108      	cbz	r0, d406 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    d402:	2000      	movs	r0, #0
    d404:	bd10      	pop	{r4, pc}
    d406:	2002      	movs	r0, #2
    d408:	bd10      	pop	{r4, pc}

0000d40a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    d40a:	b510      	push	{r4, lr}
    d40c:	4604      	mov	r4, r0
    d40e:	2001      	movs	r0, #1
    d410:	f000 f8d9 	bl	d5c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    d414:	b128      	cbz	r0, d422 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    d416:	4621      	mov	r1, r4
    d418:	2001      	movs	r0, #1
    d41a:	f7f7 fddb 	bl	4fd4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    d41e:	2000      	movs	r0, #0
    d420:	bd10      	pop	{r4, pc}
    d422:	200c      	movs	r0, #12
    d424:	bd10      	pop	{r4, pc}

0000d426 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    d426:	b510      	push	{r4, lr}
    d428:	8800      	ldrh	r0, [r0, #0]
    d42a:	f7f8 fc73 	bl	5d14 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    d42e:	b108      	cbz	r0, d434 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    d430:	2000      	movs	r0, #0
    d432:	bd10      	pop	{r4, pc}
    d434:	2030      	movs	r0, #48	; 0x30
    d436:	bd10      	pop	{r4, pc}

0000d438 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    d438:	b51c      	push	{r2, r3, r4, lr}
    d43a:	7801      	ldrb	r1, [r0, #0]
    d43c:	f88d 1000 	strb.w	r1, [sp]
    d440:	7840      	ldrb	r0, [r0, #1]
    d442:	f88d 0001 	strb.w	r0, [sp, #1]
    d446:	2000      	movs	r0, #0
    d448:	f8ad 0002 	strh.w	r0, [sp, #2]
    d44c:	f8ad 0004 	strh.w	r0, [sp, #4]
    d450:	4601      	mov	r1, r0
    d452:	4668      	mov	r0, sp
    d454:	f000 f8f7 	bl	d646 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xea>
    d458:	2800      	cmp	r0, #0
    d45a:	d102      	bne.n	d462 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    d45c:	4668      	mov	r0, sp
    d45e:	f000 f8d6 	bl	d60e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xb2>
    d462:	bd1c      	pop	{r2, r3, r4, pc}

0000d464 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    d464:	b500      	push	{lr}
    d466:	b087      	sub	sp, #28
    d468:	7941      	ldrb	r1, [r0, #5]
    d46a:	f88d 1000 	strb.w	r1, [sp]
    d46e:	7981      	ldrb	r1, [r0, #6]
    d470:	f88d 1001 	strb.w	r1, [sp, #1]
    d474:	2101      	movs	r1, #1
    d476:	f88d 1002 	strb.w	r1, [sp, #2]
    d47a:	7801      	ldrb	r1, [r0, #0]
    d47c:	f88d 1003 	strb.w	r1, [sp, #3]
    d480:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    d484:	f240 2271 	movw	r2, #625	; 0x271
    d488:	4351      	muls	r1, r2
    d48a:	9102      	str	r1, [sp, #8]
    d48c:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    d490:	4350      	muls	r0, r2
    d492:	9004      	str	r0, [sp, #16]
    d494:	2007      	movs	r0, #7
    d496:	f88d 0018 	strb.w	r0, [sp, #24]
    d49a:	2000      	movs	r0, #0
    d49c:	f88d 0019 	strb.w	r0, [sp, #25]
    d4a0:	9804      	ldr	r0, [sp, #16]
    d4a2:	f7fc fba7 	bl	9bf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8c>
    d4a6:	b140      	cbz	r0, d4ba <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    d4a8:	9802      	ldr	r0, [sp, #8]
    d4aa:	f7fc fb97 	bl	9bdc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x74>
    d4ae:	b120      	cbz	r0, d4ba <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    d4b0:	4668      	mov	r0, sp
    d4b2:	f7fc faab 	bl	9a0c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    d4b6:	b007      	add	sp, #28
    d4b8:	bd00      	pop	{pc}
    d4ba:	2030      	movs	r0, #48	; 0x30
    d4bc:	e7fb      	b.n	d4b6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000d4be <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    d4be:	b510      	push	{r4, lr}
    d4c0:	f7f7 fdac 	bl	501c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    d4c4:	2000      	movs	r0, #0
    d4c6:	bd10      	pop	{r4, pc}

0000d4c8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    d4c8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    d4ca:	460c      	mov	r4, r1
    d4cc:	4605      	mov	r5, r0
    d4ce:	f000 f9da 	bl	d886 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x32a>
    d4d2:	b160      	cbz	r0, d4ee <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    d4d4:	4669      	mov	r1, sp
    d4d6:	4628      	mov	r0, r5
    d4d8:	f7fe ff68 	bl	c3ac <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d4dc:	2800      	cmp	r0, #0
    d4de:	d105      	bne.n	d4ec <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    d4e0:	2101      	movs	r1, #1
    d4e2:	4622      	mov	r2, r4
    d4e4:	9801      	ldr	r0, [sp, #4]
    d4e6:	f000 f959 	bl	d79c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    d4ea:	2000      	movs	r0, #0
    d4ec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    d4ee:	2001      	movs	r0, #1
    d4f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000d4f2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    d4f2:	b510      	push	{r4, lr}
    d4f4:	4604      	mov	r4, r0
    d4f6:	2000      	movs	r0, #0
    d4f8:	f000 f865 	bl	d5c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    d4fc:	b128      	cbz	r0, d50a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    d4fe:	4621      	mov	r1, r4
    d500:	2000      	movs	r0, #0
    d502:	f7f7 fd67 	bl	4fd4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    d506:	2000      	movs	r0, #0
    d508:	bd10      	pop	{r4, pc}
    d50a:	200c      	movs	r0, #12
    d50c:	bd10      	pop	{r4, pc}

0000d50e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    d50e:	b510      	push	{r4, lr}
    d510:	7800      	ldrb	r0, [r0, #0]
    d512:	f000 0001 	and.w	r0, r0, #1
    d516:	f7fa fbcb 	bl	7cb0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    d51a:	2000      	movs	r0, #0
    d51c:	bd10      	pop	{r4, pc}

0000d51e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    d51e:	b510      	push	{r4, lr}
    d520:	4604      	mov	r4, r0
    d522:	f000 f9b0 	bl	d886 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x32a>
    d526:	b120      	cbz	r0, d532 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    d528:	4620      	mov	r0, r4
    d52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d52e:	f000 b9d6 	b.w	d8de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x382>
    d532:	2001      	movs	r0, #1
    d534:	bd10      	pop	{r4, pc}

0000d536 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    d536:	b510      	push	{r4, lr}
    d538:	4604      	mov	r4, r0
    d53a:	4601      	mov	r1, r0
    d53c:	2000      	movs	r0, #0
    d53e:	f7f7 fd31 	bl	4fa4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    d542:	b910      	cbnz	r0, d54a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    d544:	2000      	movs	r0, #0
    d546:	6020      	str	r0, [r4, #0]
    d548:	80a0      	strh	r0, [r4, #4]
    d54a:	2000      	movs	r0, #0
    d54c:	bd10      	pop	{r4, pc}

0000d54e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    d54e:	b510      	push	{r4, lr}
    d550:	f7fc fba8 	bl	9ca4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    d554:	2000      	movs	r0, #0
    d556:	bd10      	pop	{r4, pc}

0000d558 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    d558:	f7fc bb06 	b.w	9b68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000d55c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    d55c:	b510      	push	{r4, lr}
    d55e:	4604      	mov	r4, r0
    d560:	2000      	movs	r0, #0
    d562:	8822      	ldrh	r2, [r4, #0]
    d564:	b086      	sub	sp, #24
    d566:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    d56a:	39ff      	subs	r1, #255	; 0xff
    d56c:	d008      	beq.n	d580 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    d56e:	a903      	add	r1, sp, #12
    d570:	4610      	mov	r0, r2
    d572:	f7fe ff1b 	bl	c3ac <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d576:	b110      	cbz	r0, d57e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    d578:	2002      	movs	r0, #2
    d57a:	b006      	add	sp, #24
    d57c:	bd10      	pop	{r4, pc}
    d57e:	9804      	ldr	r0, [sp, #16]
    d580:	8921      	ldrh	r1, [r4, #8]
    d582:	89a3      	ldrh	r3, [r4, #12]
    d584:	8962      	ldrh	r2, [r4, #10]
    d586:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    d58a:	88e3      	ldrh	r3, [r4, #6]
    d58c:	88a2      	ldrh	r2, [r4, #4]
    d58e:	8861      	ldrh	r1, [r4, #2]
    d590:	f000 f8d9 	bl	d746 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1ea>
    d594:	b108      	cbz	r0, d59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    d596:	2000      	movs	r0, #0
    d598:	e7ef      	b.n	d57a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    d59a:	2030      	movs	r0, #48	; 0x30
    d59c:	e7ed      	b.n	d57a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    d59e:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d5a2:	4288      	cmp	r0, r1
    d5a4:	d303      	bcc.n	d5ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    d5a6:	f640 0148 	movw	r1, #2120	; 0x848
    d5aa:	4288      	cmp	r0, r1
    d5ac:	d300      	bcc.n	d5b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    d5ae:	4608      	mov	r0, r1
    d5b0:	4770      	bx	lr
    d5b2:	07c1      	lsls	r1, r0, #31
    d5b4:	d001      	beq.n	d5ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    d5b6:	2001      	movs	r0, #1
    d5b8:	4770      	bx	lr
    d5ba:	0780      	lsls	r0, r0, #30
    d5bc:	d501      	bpl.n	d5c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    d5be:	2002      	movs	r0, #2
    d5c0:	4770      	bx	lr
    d5c2:	2000      	movs	r0, #0
    d5c4:	4770      	bx	lr
    d5c6:	b510      	push	{r4, lr}
    d5c8:	f000 f97e 	bl	d8c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
    d5cc:	b128      	cbz	r0, d5da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    d5ce:	f7f9 fa3b 	bl	6a48 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    d5d2:	2801      	cmp	r0, #1
    d5d4:	d001      	beq.n	d5da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    d5d6:	2000      	movs	r0, #0
    d5d8:	bd10      	pop	{r4, pc}
    d5da:	2001      	movs	r0, #1
    d5dc:	bd10      	pop	{r4, pc}
    d5de:	28fb      	cmp	r0, #251	; 0xfb
    d5e0:	d803      	bhi.n	d5ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x8e>
    d5e2:	f640 0048 	movw	r0, #2120	; 0x848
    d5e6:	4281      	cmp	r1, r0
    d5e8:	d901      	bls.n	d5ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x92>
    d5ea:	2011      	movs	r0, #17
    d5ec:	4770      	bx	lr
    d5ee:	2000      	movs	r0, #0
    d5f0:	4770      	bx	lr
    d5f2:	381b      	subs	r0, #27
    d5f4:	28e1      	cmp	r0, #225	; 0xe1
    d5f6:	d206      	bcs.n	d606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    d5f8:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    d5fc:	d303      	bcc.n	d606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    d5fe:	f244 2090 	movw	r0, #17040	; 0x4290
    d602:	4281      	cmp	r1, r0
    d604:	d901      	bls.n	d60a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    d606:	2012      	movs	r0, #18
    d608:	4770      	bx	lr
    d60a:	2000      	movs	r0, #0
    d60c:	4770      	bx	lr
    d60e:	b510      	push	{r4, lr}
    d610:	4604      	mov	r4, r0
    d612:	7800      	ldrb	r0, [r0, #0]
    d614:	2801      	cmp	r0, #1
    d616:	d009      	beq.n	d62c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd0>
    d618:	f7fa fbd6 	bl	7dc8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    d61c:	2805      	cmp	r0, #5
    d61e:	d003      	beq.n	d628 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xcc>
    d620:	f7fa fb9c 	bl	7d5c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    d624:	2800      	cmp	r0, #0
    d626:	d000      	beq.n	d62a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xce>
    d628:	200c      	movs	r0, #12
    d62a:	bd10      	pop	{r4, pc}
    d62c:	f7f9 f9a2 	bl	6974 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    d630:	b138      	cbz	r0, d642 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xe6>
    d632:	f7f9 f88b 	bl	674c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    d636:	88a1      	ldrh	r1, [r4, #4]
    d638:	8860      	ldrh	r0, [r4, #2]
    d63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d63e:	f7fa bb51 	b.w	7ce4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    d642:	2012      	movs	r0, #18
    d644:	bd10      	pop	{r4, pc}
    d646:	7802      	ldrb	r2, [r0, #0]
    d648:	2a01      	cmp	r2, #1
    d64a:	d001      	beq.n	d650 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf4>
    d64c:	b1ba      	cbz	r2, d67e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
    d64e:	e018      	b.n	d682 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d650:	7842      	ldrb	r2, [r0, #1]
    d652:	b13a      	cbz	r2, d664 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x108>
    d654:	2a01      	cmp	r2, #1
    d656:	d005      	beq.n	d664 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x108>
    d658:	2a02      	cmp	r2, #2
    d65a:	d112      	bne.n	d682 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d65c:	b189      	cbz	r1, d682 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d65e:	8881      	ldrh	r1, [r0, #4]
    d660:	b179      	cbz	r1, d682 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d662:	e000      	b.n	d666 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x10a>
    d664:	b159      	cbz	r1, d67e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
    d666:	8841      	ldrh	r1, [r0, #2]
    d668:	b149      	cbz	r1, d67e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
    d66a:	8880      	ldrh	r0, [r0, #4]
    d66c:	b138      	cbz	r0, d67e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x122>
    d66e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d672:	0049      	lsls	r1, r1, #1
    d674:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    d678:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    d67c:	d201      	bcs.n	d682 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x126>
    d67e:	2000      	movs	r0, #0
    d680:	4770      	bx	lr
    d682:	2012      	movs	r0, #18
    d684:	4770      	bx	lr
    d686:	b570      	push	{r4, r5, r6, lr}
    d688:	4604      	mov	r4, r0
    d68a:	7800      	ldrb	r0, [r0, #0]
    d68c:	2500      	movs	r5, #0
    d68e:	2801      	cmp	r0, #1
    d690:	d004      	beq.n	d69c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
    d692:	b118      	cbz	r0, d69c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
    d694:	2802      	cmp	r0, #2
    d696:	d001      	beq.n	d69c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x140>
    d698:	2803      	cmp	r0, #3
    d69a:	d139      	bne.n	d710 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b4>
    d69c:	7860      	ldrb	r0, [r4, #1]
    d69e:	b128      	cbz	r0, d6ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x150>
    d6a0:	2801      	cmp	r0, #1
    d6a2:	d003      	beq.n	d6ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x150>
    d6a4:	2802      	cmp	r0, #2
    d6a6:	d001      	beq.n	d6ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x150>
    d6a8:	2803      	cmp	r0, #3
    d6aa:	d131      	bne.n	d710 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b4>
    d6ac:	7e60      	ldrb	r0, [r4, #25]
    d6ae:	b948      	cbnz	r0, d6c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x168>
    d6b0:	78a0      	ldrb	r0, [r4, #2]
    d6b2:	2801      	cmp	r0, #1
    d6b4:	d12c      	bne.n	d710 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b4>
    d6b6:	f7fc fb2f 	bl	9d18 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d6ba:	4601      	mov	r1, r0
    d6bc:	78a0      	ldrb	r0, [r4, #2]
    d6be:	ea30 0101 	bics.w	r1, r0, r1
    d6c2:	d001      	beq.n	d6c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x16c>
    d6c4:	2011      	movs	r0, #17
    d6c6:	bd70      	pop	{r4, r5, r6, pc}
    d6c8:	07c0      	lsls	r0, r0, #31
    d6ca:	d006      	beq.n	d6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    d6cc:	78e0      	ldrb	r0, [r4, #3]
    d6ce:	2301      	movs	r3, #1
    d6d0:	6922      	ldr	r2, [r4, #16]
    d6d2:	68a1      	ldr	r1, [r4, #8]
    d6d4:	f000 f820 	bl	d718 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
    d6d8:	4605      	mov	r5, r0
    d6da:	78a0      	ldrb	r0, [r4, #2]
    d6dc:	0780      	lsls	r0, r0, #30
    d6de:	d506      	bpl.n	d6ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x192>
    d6e0:	78e0      	ldrb	r0, [r4, #3]
    d6e2:	2302      	movs	r3, #2
    d6e4:	6922      	ldr	r2, [r4, #16]
    d6e6:	68a1      	ldr	r1, [r4, #8]
    d6e8:	f000 f816 	bl	d718 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
    d6ec:	4305      	orrs	r5, r0
    d6ee:	78a0      	ldrb	r0, [r4, #2]
    d6f0:	0740      	lsls	r0, r0, #29
    d6f2:	d506      	bpl.n	d702 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1a6>
    d6f4:	78e0      	ldrb	r0, [r4, #3]
    d6f6:	2304      	movs	r3, #4
    d6f8:	6922      	ldr	r2, [r4, #16]
    d6fa:	68a1      	ldr	r1, [r4, #8]
    d6fc:	f000 f80c 	bl	d718 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1bc>
    d700:	4305      	orrs	r5, r0
    d702:	b10d      	cbz	r5, d708 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1ac>
    d704:	4628      	mov	r0, r5
    d706:	bd70      	pop	{r4, r5, r6, pc}
    d708:	7e20      	ldrb	r0, [r4, #24]
    d70a:	b108      	cbz	r0, d710 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b4>
    d70c:	2807      	cmp	r0, #7
    d70e:	d901      	bls.n	d714 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1b8>
    d710:	2012      	movs	r0, #18
    d712:	bd70      	pop	{r4, r5, r6, pc}
    d714:	2000      	movs	r0, #0
    d716:	bd70      	pop	{r4, r5, r6, pc}
    d718:	b570      	push	{r4, r5, r6, lr}
    d71a:	4614      	mov	r4, r2
    d71c:	460d      	mov	r5, r1
    d71e:	b108      	cbz	r0, d724 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1c8>
    d720:	2801      	cmp	r0, #1
    d722:	d10a      	bne.n	d73a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1de>
    d724:	4619      	mov	r1, r3
    d726:	4610      	mov	r0, r2
    d728:	f7fc fa84 	bl	9c34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xcc>
    d72c:	b138      	cbz	r0, d73e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e2>
    d72e:	4628      	mov	r0, r5
    d730:	f7fc fa48 	bl	9bc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5c>
    d734:	b118      	cbz	r0, d73e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e2>
    d736:	42ac      	cmp	r4, r5
    d738:	d903      	bls.n	d742 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e6>
    d73a:	2012      	movs	r0, #18
    d73c:	bd70      	pop	{r4, r5, r6, pc}
    d73e:	2030      	movs	r0, #48	; 0x30
    d740:	bd70      	pop	{r4, r5, r6, pc}
    d742:	2000      	movs	r0, #0
    d744:	bd70      	pop	{r4, r5, r6, pc}
    d746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d74a:	461d      	mov	r5, r3
    d74c:	4610      	mov	r0, r2
    d74e:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    d752:	1f8b      	subs	r3, r1, #6
    d754:	f640 427a 	movw	r2, #3194	; 0xc7a
    d758:	9e08      	ldr	r6, [sp, #32]
    d75a:	4293      	cmp	r3, r2
    d75c:	d81c      	bhi.n	d798 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d75e:	1f83      	subs	r3, r0, #6
    d760:	4293      	cmp	r3, r2
    d762:	d819      	bhi.n	d798 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d764:	4281      	cmp	r1, r0
    d766:	d817      	bhi.n	d798 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d768:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d76c:	d214      	bcs.n	d798 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d76e:	f1a4 010a 	sub.w	r1, r4, #10
    d772:	1f12      	subs	r2, r2, #4
    d774:	4291      	cmp	r1, r2
    d776:	d80f      	bhi.n	d798 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d778:	f7fe fe24 	bl	c3c4 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    d77c:	1c6d      	adds	r5, r5, #1
    d77e:	4368      	muls	r0, r5
    d780:	f240 2171 	movw	r1, #625	; 0x271
    d784:	0040      	lsls	r0, r0, #1
    d786:	434c      	muls	r4, r1
    d788:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    d78c:	d204      	bcs.n	d798 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d78e:	42b7      	cmp	r7, r6
    d790:	d802      	bhi.n	d798 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    d792:	2001      	movs	r0, #1
    d794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d798:	2000      	movs	r0, #0
    d79a:	e7fb      	b.n	d794 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x238>
    d79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7a0:	4606      	mov	r6, r0
    d7a2:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    d7a6:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    d7aa:	4615      	mov	r5, r2
    d7ac:	302c      	adds	r0, #44	; 0x2c
    d7ae:	f7fa fa85 	bl	7cbc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    d7b2:	4680      	mov	r8, r0
    d7b4:	2102      	movs	r1, #2
    d7b6:	f7fe fe93 	bl	c4e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    d7ba:	4287      	cmp	r7, r0
    d7bc:	d200      	bcs.n	d7c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x264>
    d7be:	4638      	mov	r0, r7
    d7c0:	4607      	mov	r7, r0
    d7c2:	2102      	movs	r1, #2
    d7c4:	4640      	mov	r0, r8
    d7c6:	f7fe fe8b 	bl	c4e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    d7ca:	4284      	cmp	r4, r0
    d7cc:	d200      	bcs.n	d7d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x274>
    d7ce:	4620      	mov	r0, r4
    d7d0:	8831      	ldrh	r1, [r6, #0]
    d7d2:	8029      	strh	r1, [r5, #0]
    d7d4:	2f1b      	cmp	r7, #27
    d7d6:	d913      	bls.n	d800 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a4>
    d7d8:	2ffb      	cmp	r7, #251	; 0xfb
    d7da:	d300      	bcc.n	d7de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    d7dc:	27fb      	movs	r7, #251	; 0xfb
    d7de:	806f      	strh	r7, [r5, #2]
    d7e0:	281b      	cmp	r0, #27
    d7e2:	d90f      	bls.n	d804 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2a8>
    d7e4:	28fb      	cmp	r0, #251	; 0xfb
    d7e6:	d300      	bcc.n	d7ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28e>
    d7e8:	20fb      	movs	r0, #251	; 0xfb
    d7ea:	80e8      	strh	r0, [r5, #6]
    d7ec:	4640      	mov	r0, r8
    d7ee:	f7ff fed6 	bl	d59e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    d7f2:	80a8      	strh	r0, [r5, #4]
    d7f4:	4640      	mov	r0, r8
    d7f6:	f7ff fed2 	bl	d59e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    d7fa:	8128      	strh	r0, [r5, #8]
    d7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d800:	271b      	movs	r7, #27
    d802:	e7ec      	b.n	d7de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    d804:	201b      	movs	r0, #27
    d806:	e7f0      	b.n	d7ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x28e>
    d808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d80c:	7890      	ldrb	r0, [r2, #2]
    d80e:	9e06      	ldr	r6, [sp, #24]
    d810:	461d      	mov	r5, r3
    d812:	4614      	mov	r4, r2
    d814:	b908      	cbnz	r0, d81a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2be>
    d816:	f7fc fa7f 	bl	9d18 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d81a:	78e4      	ldrb	r4, [r4, #3]
    d81c:	4607      	mov	r7, r0
    d81e:	b914      	cbnz	r4, d826 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ca>
    d820:	f7fc fa7a 	bl	9d18 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d824:	4604      	mov	r4, r0
    d826:	b16f      	cbz	r7, d844 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
    d828:	b164      	cbz	r4, d844 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
    d82a:	4638      	mov	r0, r7
    d82c:	f7ff fec1 	bl	d5b2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    d830:	4620      	mov	r0, r4
    d832:	f7ff febe 	bl	d5b2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    d836:	b12f      	cbz	r7, d844 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
    d838:	b124      	cbz	r4, d844 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e8>
    d83a:	702f      	strb	r7, [r5, #0]
    d83c:	7034      	strb	r4, [r6, #0]
    d83e:	2000      	movs	r0, #0
    d840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d844:	2009      	movs	r0, #9
    d846:	e7fb      	b.n	d840 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e4>
    d848:	b510      	push	{r4, lr}
    d84a:	f7fd fccf 	bl	b1ec <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    d84e:	b928      	cbnz	r0, d85c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    d850:	f7fd fd02 	bl	b258 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    d854:	b910      	cbnz	r0, d85c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    d856:	f7fd fd09 	bl	b26c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    d85a:	b108      	cbz	r0, d860 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    d85c:	2008      	movs	r0, #8
    d85e:	bd10      	pop	{r4, pc}
    d860:	f7fd fc99 	bl	b196 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    d864:	b940      	cbnz	r0, d878 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x31c>
    d866:	f7fd fca0 	bl	b1aa <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d86a:	b928      	cbnz	r0, d878 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x31c>
    d86c:	f7fd fcb4 	bl	b1d8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    d870:	b910      	cbnz	r0, d878 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x31c>
    d872:	f7fd fcc5 	bl	b200 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d876:	b108      	cbz	r0, d87c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x320>
    d878:	2004      	movs	r0, #4
    d87a:	bd10      	pop	{r4, pc}
    d87c:	f240 519c 	movw	r1, #1436	; 0x59c
    d880:	2039      	movs	r0, #57	; 0x39
    d882:	f7f6 fe73 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d886:	b510      	push	{r4, lr}
    d888:	f7fc fa40 	bl	9d0c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    d88c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    d890:	bd10      	pop	{r4, pc}
    d892:	b508      	push	{r3, lr}
    d894:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    d898:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    d89c:	f88d 0000 	strb.w	r0, [sp]
    d8a0:	9800      	ldr	r0, [sp, #0]
    d8a2:	9000      	str	r0, [sp, #0]
    d8a4:	f89d 0000 	ldrb.w	r0, [sp]
    d8a8:	1e40      	subs	r0, r0, #1
    d8aa:	4208      	tst	r0, r1
    d8ac:	d003      	beq.n	d8b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    d8ae:	2904      	cmp	r1, #4
    d8b0:	d001      	beq.n	d8b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    d8b2:	2001      	movs	r0, #1
    d8b4:	bd08      	pop	{r3, pc}
    d8b6:	2000      	movs	r0, #0
    d8b8:	bd08      	pop	{r3, pc}
    d8ba:	b510      	push	{r4, lr}
    d8bc:	f000 f804 	bl	d8c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
    d8c0:	2800      	cmp	r0, #0
    d8c2:	d000      	beq.n	d8c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36a>
    d8c4:	2001      	movs	r0, #1
    d8c6:	bd10      	pop	{r4, pc}
    d8c8:	b510      	push	{r4, lr}
    d8ca:	f7fa fa7d 	bl	7dc8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    d8ce:	2804      	cmp	r0, #4
    d8d0:	d003      	beq.n	d8da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    d8d2:	2805      	cmp	r0, #5
    d8d4:	d001      	beq.n	d8da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    d8d6:	2000      	movs	r0, #0
    d8d8:	bd10      	pop	{r4, pc}
    d8da:	2001      	movs	r0, #1
    d8dc:	bd10      	pop	{r4, pc}
    d8de:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8e0:	b089      	sub	sp, #36	; 0x24
    d8e2:	4604      	mov	r4, r0
    d8e4:	8800      	ldrh	r0, [r0, #0]
    d8e6:	a906      	add	r1, sp, #24
    d8e8:	f7fe fd60 	bl	c3ac <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d8ec:	2800      	cmp	r0, #0
    d8ee:	d143      	bne.n	d978 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d8f0:	9807      	ldr	r0, [sp, #28]
    d8f2:	2601      	movs	r6, #1
    d8f4:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    d8f8:	f88d 1008 	strb.w	r1, [sp, #8]
    d8fc:	9902      	ldr	r1, [sp, #8]
    d8fe:	9102      	str	r1, [sp, #8]
    d900:	f89d 1008 	ldrb.w	r1, [sp, #8]
    d904:	f88d 100c 	strb.w	r1, [sp, #12]
    d908:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    d90c:	3078      	adds	r0, #120	; 0x78
    d90e:	291d      	cmp	r1, #29
    d910:	d102      	bne.n	d918 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3bc>
    d912:	f89d 100c 	ldrb.w	r1, [sp, #12]
    d916:	b141      	cbz	r1, d92a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3ce>
    d918:	2100      	movs	r1, #0
    d91a:	f88d 1004 	strb.w	r1, [sp, #4]
    d91e:	2105      	movs	r1, #5
    d920:	304e      	adds	r0, #78	; 0x4e
    d922:	f7ff fc64 	bl	d1ee <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    d926:	b110      	cbz	r0, d92e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
    d928:	e004      	b.n	d934 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
    d92a:	2101      	movs	r1, #1
    d92c:	e7f5      	b.n	d91a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    d92e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    d932:	b300      	cbz	r0, d976 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    d934:	8921      	ldrh	r1, [r4, #8]
    d936:	88e0      	ldrh	r0, [r4, #6]
    d938:	f7ff fe5b 	bl	d5f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x96>
    d93c:	2800      	cmp	r0, #0
    d93e:	d11b      	bne.n	d978 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d940:	88a1      	ldrh	r1, [r4, #4]
    d942:	8860      	ldrh	r0, [r4, #2]
    d944:	f7ff fe55 	bl	d5f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x96>
    d948:	2800      	cmp	r0, #0
    d94a:	d115      	bne.n	d978 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d94c:	8921      	ldrh	r1, [r4, #8]
    d94e:	88e0      	ldrh	r0, [r4, #6]
    d950:	f7ff fe45 	bl	d5de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x82>
    d954:	2800      	cmp	r0, #0
    d956:	d10f      	bne.n	d978 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d958:	88a1      	ldrh	r1, [r4, #4]
    d95a:	8860      	ldrh	r0, [r4, #2]
    d95c:	f7ff fe3f 	bl	d5de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x82>
    d960:	0007      	movs	r7, r0
    d962:	d109      	bne.n	d978 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d964:	9807      	ldr	r0, [sp, #28]
    d966:	f500 7599 	add.w	r5, r0, #306	; 0x132
    d96a:	706e      	strb	r6, [r5, #1]
    d96c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    d970:	b121      	cbz	r1, d97c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x420>
    d972:	273a      	movs	r7, #58	; 0x3a
    d974:	e02d      	b.n	d9d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x476>
    d976:	201a      	movs	r0, #26
    d978:	b009      	add	sp, #36	; 0x24
    d97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d97c:	4631      	mov	r1, r6
    d97e:	aa03      	add	r2, sp, #12
    d980:	f7ff ff0c 	bl	d79c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    d984:	8861      	ldrh	r1, [r4, #2]
    d986:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    d98a:	4281      	cmp	r1, r0
    d98c:	d200      	bcs.n	d990 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x434>
    d98e:	4608      	mov	r0, r1
    d990:	80e8      	strh	r0, [r5, #6]
    d992:	88a1      	ldrh	r1, [r4, #4]
    d994:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    d998:	4281      	cmp	r1, r0
    d99a:	d200      	bcs.n	d99e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x442>
    d99c:	4608      	mov	r0, r1
    d99e:	8128      	strh	r0, [r5, #8]
    d9a0:	88e2      	ldrh	r2, [r4, #6]
    d9a2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    d9a6:	428a      	cmp	r2, r1
    d9a8:	d200      	bcs.n	d9ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    d9aa:	4611      	mov	r1, r2
    d9ac:	8069      	strh	r1, [r5, #2]
    d9ae:	8922      	ldrh	r2, [r4, #8]
    d9b0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    d9b4:	428a      	cmp	r2, r1
    d9b6:	d200      	bcs.n	d9ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    d9b8:	4611      	mov	r1, r2
    d9ba:	f640 0248 	movw	r2, #2120	; 0x848
    d9be:	80a9      	strh	r1, [r5, #4]
    d9c0:	4291      	cmp	r1, r2
    d9c2:	d300      	bcc.n	d9c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x46a>
    d9c4:	4611      	mov	r1, r2
    d9c6:	80a9      	strh	r1, [r5, #4]
    d9c8:	4290      	cmp	r0, r2
    d9ca:	d200      	bcs.n	d9ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x472>
    d9cc:	4602      	mov	r2, r0
    d9ce:	812a      	strh	r2, [r5, #8]
    d9d0:	702e      	strb	r6, [r5, #0]
    d9d2:	2000      	movs	r0, #0
    d9d4:	7068      	strb	r0, [r5, #1]
    d9d6:	4638      	mov	r0, r7
    d9d8:	e7ce      	b.n	d978 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41c>
    d9da:	b510      	push	{r4, lr}
    d9dc:	f7ff ff74 	bl	d8c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x36c>
    d9e0:	b120      	cbz	r0, d9ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x490>
    d9e2:	f7f9 f839 	bl	6a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    d9e6:	b108      	cbz	r0, d9ec <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x490>
    d9e8:	2001      	movs	r0, #1
    d9ea:	bd10      	pop	{r4, pc}
    d9ec:	2000      	movs	r0, #0
    d9ee:	bd10      	pop	{r4, pc}

0000d9f0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    d9f0:	6802      	ldr	r2, [r0, #0]
    d9f2:	b912      	cbnz	r2, d9fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    d9f4:	6001      	str	r1, [r0, #0]
    d9f6:	4770      	bx	lr
    d9f8:	4602      	mov	r2, r0
    d9fa:	6850      	ldr	r0, [r2, #4]
    d9fc:	b108      	cbz	r0, da02 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    d9fe:	428a      	cmp	r2, r1
    da00:	d1fa      	bne.n	d9f8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    da02:	428a      	cmp	r2, r1
    da04:	d0f7      	beq.n	d9f6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    da06:	6051      	str	r1, [r2, #4]
    da08:	4770      	bx	lr
    da0a:	b510      	push	{r4, lr}
    da0c:	4604      	mov	r4, r0
    da0e:	e002      	b.n	da16 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    da10:	6820      	ldr	r0, [r4, #0]
    da12:	4780      	blx	r0
    da14:	6864      	ldr	r4, [r4, #4]
    da16:	2c00      	cmp	r4, #0
    da18:	d1fa      	bne.n	da10 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    da1a:	bd10      	pop	{r4, pc}
    da1c:	b510      	push	{r4, lr}
    da1e:	f7fa f93b 	bl	7c98 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    da22:	b120      	cbz	r0, da2e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    da24:	f240 111d 	movw	r1, #285	; 0x11d
    da28:	2001      	movs	r0, #1
    da2a:	f7f6 fd9f 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da2e:	f7f8 ff6b 	bl	6908 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    da32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da36:	f7fb bfb1 	b.w	999c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    da3a:	0001      	.short	0x0001
    da3c:	0002000b 	.word	0x0002000b
    da40:	0005000a 	.word	0x0005000a
    da44:	000a0009 	.word	0x000a0009
    da48:	00140008 	.word	0x00140008
    da4c:	001e0007 	.word	0x001e0007
    da50:	00320006 	.word	0x00320006
    da54:	004b0005 	.word	0x004b0005
    da58:	00640004 	.word	0x00640004
    da5c:	00960003 	.word	0x00960003
    da60:	00fa0002 	.word	0x00fa0002
    da64:	01f40001 	.word	0x01f40001
	...

0000da6a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    da6a:	b510      	push	{r4, lr}
    da6c:	f7fc fd0c 	bl	a488 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    da70:	f000 f850 	bl	db14 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    da74:	f7fc f9c4 	bl	9e00 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    da78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da7c:	f7fc bac2 	b.w	a004 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000da80 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    da80:	b510      	push	{r4, lr}
    da82:	24c8      	movs	r4, #200	; 0xc8
    da84:	1e64      	subs	r4, r4, #1
    da86:	b2e4      	uxtb	r4, r4
    da88:	f7fc f9d8 	bl	9e3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    da8c:	2802      	cmp	r0, #2
    da8e:	d003      	beq.n	da98 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    da90:	2801      	cmp	r0, #1
    da92:	d000      	beq.n	da96 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    da94:	2000      	movs	r0, #0
    da96:	bd10      	pop	{r4, pc}
    da98:	2c00      	cmp	r4, #0
    da9a:	d1f3      	bne.n	da84 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    da9c:	2193      	movs	r1, #147	; 0x93
    da9e:	203b      	movs	r0, #59	; 0x3b
    daa0:	f7f6 fd64 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000daa4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    daa4:	b510      	push	{r4, lr}
    daa6:	f7f6 fbf7 	bl	4298 <mpsl_fem_lna_configuration_clear>
    daaa:	2800      	cmp	r0, #0
    daac:	d005      	beq.n	daba <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    daae:	1c40      	adds	r0, r0, #1
    dab0:	d003      	beq.n	daba <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    dab2:	2150      	movs	r1, #80	; 0x50
    dab4:	2040      	movs	r0, #64	; 0x40
    dab6:	f7f6 fd59 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daba:	bd10      	pop	{r4, pc}

0000dabc <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    dabc:	b510      	push	{r4, lr}
    dabe:	f7f6 fbf7 	bl	42b0 <mpsl_fem_pa_configuration_clear>
    dac2:	2800      	cmp	r0, #0
    dac4:	d005      	beq.n	dad2 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    dac6:	1c40      	adds	r0, r0, #1
    dac8:	d003      	beq.n	dad2 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    daca:	2149      	movs	r1, #73	; 0x49
    dacc:	2040      	movs	r0, #64	; 0x40
    dace:	f7f6 fd4d 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dad2:	bd10      	pop	{r4, pc}

0000dad4 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    dad4:	b510      	push	{r4, lr}
    dad6:	f7f6 fbd9 	bl	428c <mpsl_fem_disable>
    dada:	2800      	cmp	r0, #0
    dadc:	d005      	beq.n	daea <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    dade:	1c40      	adds	r0, r0, #1
    dae0:	d003      	beq.n	daea <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    dae2:	2157      	movs	r1, #87	; 0x57
    dae4:	2040      	movs	r0, #64	; 0x40
    dae6:	f7f6 fd41 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daea:	bd10      	pop	{r4, pc}

0000daec <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    daec:	b510      	push	{r4, lr}
    daee:	2100      	movs	r1, #0
    daf0:	4608      	mov	r0, r1
    daf2:	f7f6 fbd7 	bl	42a4 <mpsl_fem_lna_configuration_set>
    daf6:	b108      	cbz	r0, dafc <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    daf8:	2000      	movs	r0, #0
    dafa:	bd10      	pop	{r4, pc}
    dafc:	2001      	movs	r0, #1
    dafe:	bd10      	pop	{r4, pc}

0000db00 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    db00:	b508      	push	{r3, lr}
    db02:	4668      	mov	r0, sp
    db04:	f7f6 fbe0 	bl	42c8 <mpsl_fem_pa_is_configured>
    db08:	f89d 0000 	ldrb.w	r0, [sp]
    db0c:	2800      	cmp	r0, #0
    db0e:	d000      	beq.n	db12 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    db10:	2001      	movs	r0, #1
    db12:	bd08      	pop	{r3, pc}

0000db14 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    db14:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    db18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    db1c:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    db20:	f3bf 8f4f 	dsb	sy
    db24:	f3bf 8f6f 	isb	sy
    db28:	f7fc bb46 	b.w	a1b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    db2c:	2800      	cmp	r0, #0
    db2e:	db09      	blt.n	db44 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    db30:	f000 021f 	and.w	r2, r0, #31
    db34:	2101      	movs	r1, #1
    db36:	4091      	lsls	r1, r2
    db38:	0940      	lsrs	r0, r0, #5
    db3a:	0080      	lsls	r0, r0, #2
    db3c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    db40:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    db44:	4770      	bx	lr
    db46:	2800      	cmp	r0, #0
    db48:	db0d      	blt.n	db66 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    db4a:	f000 021f 	and.w	r2, r0, #31
    db4e:	2101      	movs	r1, #1
    db50:	4091      	lsls	r1, r2
    db52:	0940      	lsrs	r0, r0, #5
    db54:	0080      	lsls	r0, r0, #2
    db56:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    db5a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    db5e:	f3bf 8f4f 	dsb	sy
    db62:	f3bf 8f6f 	isb	sy
    db66:	4770      	bx	lr

0000db68 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    db68:	b510      	push	{r4, lr}
    db6a:	2801      	cmp	r0, #1
    db6c:	d006      	beq.n	db7c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    db6e:	2802      	cmp	r0, #2
    db70:	d006      	beq.n	db80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    db72:	f640 3141 	movw	r1, #2881	; 0xb41
    db76:	203e      	movs	r0, #62	; 0x3e
    db78:	f7f6 fcf8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db7c:	2028      	movs	r0, #40	; 0x28
    db7e:	bd10      	pop	{r4, pc}
    db80:	2018      	movs	r0, #24
    db82:	bd10      	pop	{r4, pc}

0000db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    db84:	b510      	push	{r4, lr}
    db86:	2801      	cmp	r0, #1
    db88:	d006      	beq.n	db98 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    db8a:	2802      	cmp	r0, #2
    db8c:	d007      	beq.n	db9e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    db8e:	f640 3155 	movw	r1, #2901	; 0xb55
    db92:	203e      	movs	r0, #62	; 0x3e
    db94:	f7f6 fcea 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db98:	f641 6014 	movw	r0, #7700	; 0x1e14
    db9c:	bd10      	pop	{r4, pc}
    db9e:	f241 1030 	movw	r0, #4400	; 0x1130
    dba2:	bd10      	pop	{r4, pc}

0000dba4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    dba4:	f7fd b9ba 	b.w	af1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    dba8:	b510      	push	{r4, lr}
    dbaa:	460a      	mov	r2, r1
    dbac:	b130      	cbz	r0, dbbc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    dbae:	2801      	cmp	r0, #1
    dbb0:	d00b      	beq.n	dbca <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    dbb2:	f240 6114 	movw	r1, #1556	; 0x614
    dbb6:	203e      	movs	r0, #62	; 0x3e
    dbb8:	f7f6 fcd8 	bl	456c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbc0:	f102 0128 	add.w	r1, r2, #40	; 0x28
    dbc4:	4610      	mov	r0, r2
    dbc6:	f7fc b98d 	b.w	9ee4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    dbca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbce:	f102 0129 	add.w	r1, r2, #41	; 0x29
    dbd2:	4610      	mov	r0, r2
    dbd4:	f7fc b970 	b.w	9eb8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    dbd8:	5840      	ldr	r0, [r0, r1]
    dbda:	2800      	cmp	r0, #0
    dbdc:	d000      	beq.n	dbe0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    dbde:	2001      	movs	r0, #1
    dbe0:	4770      	bx	lr
    dbe2:	5840      	ldr	r0, [r0, r1]
    dbe4:	2800      	cmp	r0, #0
    dbe6:	d000      	beq.n	dbea <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    dbe8:	2001      	movs	r0, #1
    dbea:	4770      	bx	lr

0000dbec <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    dbec:	b570      	push	{r4, r5, r6, lr}
    dbee:	4605      	mov	r5, r0
    dbf0:	4614      	mov	r4, r2
    dbf2:	4608      	mov	r0, r1
    dbf4:	f7ff ffc6 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dbf8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    dbfc:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    dc00:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    dc04:	4620      	mov	r0, r4
    dc06:	f7ff ffbd 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dc0a:	4428      	add	r0, r5
    dc0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dc10:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    dc14:	fbb0 f5f1 	udiv	r5, r0, r1
    dc18:	4620      	mov	r0, r4
    dc1a:	f7ff ffa5 	bl	db68 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    dc1e:	4428      	add	r0, r5
    dc20:	1d40      	adds	r0, r0, #5
    dc22:	bd70      	pop	{r4, r5, r6, pc}

0000dc24 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc28:	4607      	mov	r7, r0
    dc2a:	461d      	mov	r5, r3
    dc2c:	460e      	mov	r6, r1
    dc2e:	4614      	mov	r4, r2
    dc30:	4610      	mov	r0, r2
    dc32:	f7ff ffa7 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dc36:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    dc3a:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    dc3e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    dc42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    dc46:	2e02      	cmp	r6, #2
    dc48:	d00e      	beq.n	dc68 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    dc4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
    dc4e:	4411      	add	r1, r2
    dc50:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    dc54:	fbb1 f6f0 	udiv	r6, r1, r0
    dc58:	4620      	mov	r0, r4
    dc5a:	f7ff ff85 	bl	db68 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    dc5e:	4430      	add	r0, r6
    dc60:	4428      	add	r0, r5
    dc62:	1d40      	adds	r0, r0, #5
    dc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc68:	4602      	mov	r2, r0
    dc6a:	e7f0      	b.n	dc4e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000dc6c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    dc6c:	b510      	push	{r4, lr}
    dc6e:	4604      	mov	r4, r0
    dc70:	4608      	mov	r0, r1
    dc72:	f7ff ff87 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dc76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dc7a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    dc7e:	fbb0 f0f1 	udiv	r0, r0, r1
    dc82:	1a20      	subs	r0, r4, r0
    dc84:	1e80      	subs	r0, r0, #2
    dc86:	bd10      	pop	{r4, pc}

0000dc88 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    dc88:	b510      	push	{r4, lr}
    dc8a:	4604      	mov	r4, r0
    dc8c:	4608      	mov	r0, r1
    dc8e:	f7ff ff79 	bl	db84 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dc92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dc96:	fbb0 f0f1 	udiv	r0, r0, r1
    dc9a:	1a20      	subs	r0, r4, r0
    dc9c:	bd10      	pop	{r4, pc}

0000dc9e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    dc9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dca2:	2902      	cmp	r1, #2
    dca4:	d008      	beq.n	dcb8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    dca6:	f240 51dc 	movw	r1, #1500	; 0x5dc
    dcaa:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    dcae:	fbb1 f1f2 	udiv	r1, r1, r2
    dcb2:	4408      	add	r0, r1
    dcb4:	1e80      	subs	r0, r0, #2
    dcb6:	4770      	bx	lr
    dcb8:	4611      	mov	r1, r2
    dcba:	e7f6      	b.n	dcaa <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000dcbc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    dcbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dcc0:	2902      	cmp	r1, #2
    dcc2:	d007      	beq.n	dcd4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    dcc4:	f240 51dc 	movw	r1, #1500	; 0x5dc
    dcc8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    dccc:	fbb1 f1f2 	udiv	r1, r1, r2
    dcd0:	4408      	add	r0, r1
    dcd2:	4770      	bx	lr
    dcd4:	4611      	mov	r1, r2
    dcd6:	e7f7      	b.n	dcc8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    dcd8:	1702080c 	.word	0x1702080c
    dcdc:	0201010d 	.word	0x0201010d
    dce0:	01010909 	.word	0x01010909
    dce4:	18090206 	.word	0x18090206
    dce8:	01010318 	.word	0x01010318
    dcec:	03030909 	.word	0x03030909
    dcf0:	05          	.byte	0x05
    dcf1:	55          	.byte	0x55
    dcf2:	5555      	.short	0x5555
    dcf4:	2625      	.short	0x2625
    dcf6:	27          	.byte	0x27
    dcf7:	01          	.byte	0x01
    dcf8:	0103      	.short	0x0103
    dcfa:	01          	.byte	0x01
    dcfb:	01          	.byte	0x01

0000dcfc <KALMAN>:
#include "kalman_filter.h"

int8_t KALMAN(int8_t U){
    dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd00:	b083      	sub	sp, #12
    U = (double)U;
    dd02:	f7f2 fb4f 	bl	3a4 <__aeabi_i2d>
    dd06:	e9cd 0100 	strd	r0, r1, [sp]
    static double P = 0;
    static double U_hat = 0;
    static double K = 0;

    //begin
    K = P*H/(H*P*H+R); // update kalman gain
    dd0a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; ddac <KALMAN+0xb0>
    dd0e:	e9db 6700 	ldrd	r6, r7, [fp]
    dd12:	2200      	movs	r2, #0
    dd14:	4b22      	ldr	r3, [pc, #136]	; (dda0 <KALMAN+0xa4>)
    dd16:	4630      	mov	r0, r6
    dd18:	4639      	mov	r1, r7
    dd1a:	f7f2 f9f7 	bl	10c <__adddf3>
    dd1e:	4602      	mov	r2, r0
    dd20:	460b      	mov	r3, r1
    dd22:	4630      	mov	r0, r6
    dd24:	4639      	mov	r1, r7
    dd26:	f7f2 fcd1 	bl	6cc <__aeabi_ddiv>
    dd2a:	4604      	mov	r4, r0
    dd2c:	460d      	mov	r5, r1
    U_hat = U_hat + K*(U-H*U_hat); // update estimated
    dd2e:	f8df a080 	ldr.w	sl, [pc, #128]	; ddb0 <KALMAN+0xb4>
    dd32:	e9da 8900 	ldrd	r8, r9, [sl]
    dd36:	4642      	mov	r2, r8
    dd38:	464b      	mov	r3, r9
    dd3a:	e9dd 0100 	ldrd	r0, r1, [sp]
    dd3e:	f7f2 f9e3 	bl	108 <__aeabi_dsub>
    dd42:	4602      	mov	r2, r0
    dd44:	460b      	mov	r3, r1
    dd46:	4620      	mov	r0, r4
    dd48:	4629      	mov	r1, r5
    dd4a:	f7f2 fb95 	bl	478 <__aeabi_dmul>
    dd4e:	4602      	mov	r2, r0
    dd50:	460b      	mov	r3, r1
    dd52:	4640      	mov	r0, r8
    dd54:	4649      	mov	r1, r9
    dd56:	f7f2 f9d9 	bl	10c <__adddf3>
    dd5a:	4680      	mov	r8, r0
    dd5c:	4689      	mov	r9, r1

    //Update error covariance
    P = (1-K*H)*P+Q;
    dd5e:	4622      	mov	r2, r4
    dd60:	462b      	mov	r3, r5
    dd62:	2000      	movs	r0, #0
    dd64:	490f      	ldr	r1, [pc, #60]	; (dda4 <KALMAN+0xa8>)
    dd66:	f7f2 f9cf 	bl	108 <__aeabi_dsub>
    dd6a:	4602      	mov	r2, r0
    dd6c:	460b      	mov	r3, r1
    dd6e:	4630      	mov	r0, r6
    dd70:	4639      	mov	r1, r7
    dd72:	f7f2 fb81 	bl	478 <__aeabi_dmul>
    dd76:	2200      	movs	r2, #0
    dd78:	4b0b      	ldr	r3, [pc, #44]	; (dda8 <KALMAN+0xac>)
    dd7a:	f7f2 f9c7 	bl	10c <__adddf3>
    dd7e:	e9cb 0100 	strd	r0, r1, [fp]

    U_hat = (int8_t)U_hat;
    dd82:	4640      	mov	r0, r8
    dd84:	4649      	mov	r1, r9
    dd86:	f7f2 fd89 	bl	89c <__aeabi_d2iz>
    dd8a:	b244      	sxtb	r4, r0
    dd8c:	4620      	mov	r0, r4
    dd8e:	f7f2 fb09 	bl	3a4 <__aeabi_i2d>
    dd92:	e9ca 0100 	strd	r0, r1, [sl]
    return U_hat;


    dd96:	4620      	mov	r0, r4
    dd98:	b003      	add	sp, #12
    dd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd9e:	bf00      	nop
    dda0:	40440000 	.word	0x40440000
    dda4:	3ff00000 	.word	0x3ff00000
    dda8:	40240000 	.word	0x40240000
    ddac:	20001390 	.word	0x20001390
    ddb0:	20001398 	.word	0x20001398

0000ddb4 <device_found>:
#include "observer.h"

static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
			 struct net_buf_simple *ad)
{
    ddb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddb6:	b093      	sub	sp, #76	; 0x4c
    ddb8:	4604      	mov	r4, r0
    ddba:	460d      	mov	r5, r1
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ddbc:	7803      	ldrb	r3, [r0, #0]
    ddbe:	2b03      	cmp	r3, #3
    ddc0:	d82f      	bhi.n	de22 <device_found+0x6e>
    ddc2:	e8df f003 	tbb	[pc, r3]
    ddc6:	1f02      	.short	0x1f02
    ddc8:	2924      	.short	0x2924
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ddca:	4920      	ldr	r1, [pc, #128]	; (de4c <device_found+0x98>)
    ddcc:	a807      	add	r0, sp, #28
    ddce:	f00c fe3c 	bl	1aa4a <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    ddd2:	7963      	ldrb	r3, [r4, #5]
    ddd4:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    ddd6:	78e1      	ldrb	r1, [r4, #3]
    ddd8:	78a0      	ldrb	r0, [r4, #2]
    ddda:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    dddc:	af07      	add	r7, sp, #28
    ddde:	9705      	str	r7, [sp, #20]
    dde0:	9604      	str	r6, [sp, #16]
    dde2:	9003      	str	r0, [sp, #12]
    dde4:	9102      	str	r1, [sp, #8]
    dde6:	9201      	str	r2, [sp, #4]
    dde8:	9300      	str	r3, [sp, #0]
    ddea:	79a3      	ldrb	r3, [r4, #6]
    ddec:	4a18      	ldr	r2, [pc, #96]	; (de50 <device_found+0x9c>)
    ddee:	211e      	movs	r1, #30
    ddf0:	a80a      	add	r0, sp, #40	; 0x28
    ddf2:	f00b fe19 	bl	19a28 <snprintk>
	char addr_str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
	if(!strcmp(addr_str,"E4:A6:69:9D:F7:7F (random)")){
    ddf6:	4917      	ldr	r1, [pc, #92]	; (de54 <device_found+0xa0>)
    ddf8:	a80a      	add	r0, sp, #40	; 0x28
    ddfa:	f00c fe5b 	bl	1aab4 <strcmp>
    ddfe:	b1b0      	cbz	r0, de2e <device_found+0x7a>
	
		rssi = KALMAN(rssi); 
		printk("Device found: %s (Modified RSSI %d)\n", addr_str, rssi);
	}
	
}
    de00:	b013      	add	sp, #76	; 0x4c
    de02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    de04:	4914      	ldr	r1, [pc, #80]	; (de58 <device_found+0xa4>)
    de06:	a807      	add	r0, sp, #28
    de08:	f00c fe1f 	bl	1aa4a <strcpy>
		break;
    de0c:	e7e1      	b.n	ddd2 <device_found+0x1e>
		strcpy(type, "public-id");
    de0e:	4913      	ldr	r1, [pc, #76]	; (de5c <device_found+0xa8>)
    de10:	a807      	add	r0, sp, #28
    de12:	f00c fe1a 	bl	1aa4a <strcpy>
		break;
    de16:	e7dc      	b.n	ddd2 <device_found+0x1e>
		strcpy(type, "random-id");
    de18:	4911      	ldr	r1, [pc, #68]	; (de60 <device_found+0xac>)
    de1a:	a807      	add	r0, sp, #28
    de1c:	f00c fe15 	bl	1aa4a <strcpy>
		break;
    de20:	e7d7      	b.n	ddd2 <device_found+0x1e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    de22:	4a10      	ldr	r2, [pc, #64]	; (de64 <device_found+0xb0>)
    de24:	210a      	movs	r1, #10
    de26:	a807      	add	r0, sp, #28
    de28:	f00b fdfe 	bl	19a28 <snprintk>
		break;
    de2c:	e7d1      	b.n	ddd2 <device_found+0x1e>
		printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
    de2e:	462a      	mov	r2, r5
    de30:	a90a      	add	r1, sp, #40	; 0x28
    de32:	480d      	ldr	r0, [pc, #52]	; (de68 <device_found+0xb4>)
    de34:	f00b fdea 	bl	19a0c <printk>
		rssi = KALMAN(rssi); 
    de38:	4628      	mov	r0, r5
    de3a:	f7ff ff5f 	bl	dcfc <KALMAN>
    de3e:	4602      	mov	r2, r0
		printk("Device found: %s (Modified RSSI %d)\n", addr_str, rssi);
    de40:	a90a      	add	r1, sp, #40	; 0x28
    de42:	480a      	ldr	r0, [pc, #40]	; (de6c <device_found+0xb8>)
    de44:	f00b fde2 	bl	19a0c <printk>
}
    de48:	e7da      	b.n	de00 <device_found+0x4c>
    de4a:	bf00      	nop
    de4c:	0001cd78 	.word	0x0001cd78
    de50:	0001cda8 	.word	0x0001cda8
    de54:	0001cdcc 	.word	0x0001cdcc
    de58:	0001cd80 	.word	0x0001cd80
    de5c:	0001cd88 	.word	0x0001cd88
    de60:	0001cd94 	.word	0x0001cd94
    de64:	0001cda0 	.word	0x0001cda0
    de68:	0001cde8 	.word	0x0001cde8
    de6c:	0001ce04 	.word	0x0001ce04

0000de70 <init_bluethooth_scan>:


void init_bluethooth_scan(){
    de70:	b510      	push	{r4, lr}
    de72:	b086      	sub	sp, #24

	struct bt_le_scan_param scan_param = {
    de74:	2400      	movs	r4, #0
    de76:	9401      	str	r4, [sp, #4]
    de78:	9404      	str	r4, [sp, #16]
    de7a:	9405      	str	r4, [sp, #20]
    de7c:	2301      	movs	r3, #1
    de7e:	9302      	str	r3, [sp, #8]
    de80:	2360      	movs	r3, #96	; 0x60
    de82:	f8ad 300c 	strh.w	r3, [sp, #12]
    de86:	2330      	movs	r3, #48	; 0x30
    de88:	f8ad 300e 	strh.w	r3, [sp, #14]
		.interval   = BT_GAP_SCAN_FAST_INTERVAL,
		.window     = BT_GAP_SCAN_FAST_WINDOW,
	};
	int err;

	printk("Starting Observer\n");
    de8c:	480f      	ldr	r0, [pc, #60]	; (decc <init_bluethooth_scan+0x5c>)
    de8e:	f00b fdbd 	bl	19a0c <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    de92:	4620      	mov	r0, r4
    de94:	f003 fec8 	bl	11c28 <bt_enable>
	if (err) {
    de98:	b968      	cbnz	r0, deb6 <init_bluethooth_scan+0x46>
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	printk("Bluetooth initialized\n");
    de9a:	480d      	ldr	r0, [pc, #52]	; (ded0 <init_bluethooth_scan+0x60>)
    de9c:	f00b fdb6 	bl	19a0c <printk>

	err = bt_le_scan_start(&scan_param, device_found);
    dea0:	490c      	ldr	r1, [pc, #48]	; (ded4 <init_bluethooth_scan+0x64>)
    dea2:	a801      	add	r0, sp, #4
    dea4:	f004 fb54 	bl	12550 <bt_le_scan_start>
    dea8:	4604      	mov	r4, r0
	printk("\n");
    deaa:	480b      	ldr	r0, [pc, #44]	; (ded8 <init_bluethooth_scan+0x68>)
    deac:	f00b fdae 	bl	19a0c <printk>
	if (err) {
    deb0:	b934      	cbnz	r4, dec0 <init_bluethooth_scan+0x50>
		printk("Starting scanning failed (err %d)\n", err);
		return;
	}
    
}
    deb2:	b006      	add	sp, #24
    deb4:	bd10      	pop	{r4, pc}
    deb6:	4601      	mov	r1, r0
		printk("Bluetooth init failed (err %d)\n", err);
    deb8:	4808      	ldr	r0, [pc, #32]	; (dedc <init_bluethooth_scan+0x6c>)
    deba:	f00b fda7 	bl	19a0c <printk>
		return;
    debe:	e7f8      	b.n	deb2 <init_bluethooth_scan+0x42>
		printk("Starting scanning failed (err %d)\n", err);
    dec0:	4621      	mov	r1, r4
    dec2:	4807      	ldr	r0, [pc, #28]	; (dee0 <init_bluethooth_scan+0x70>)
    dec4:	f00b fda2 	bl	19a0c <printk>
		return;
    dec8:	e7f3      	b.n	deb2 <init_bluethooth_scan+0x42>
    deca:	bf00      	nop
    decc:	0001ce2c 	.word	0x0001ce2c
    ded0:	0001ce60 	.word	0x0001ce60
    ded4:	0000ddb5 	.word	0x0000ddb5
    ded8:	0001e1dc 	.word	0x0001e1dc
    dedc:	0001ce40 	.word	0x0001ce40
    dee0:	0001ce78 	.word	0x0001ce78

0000dee4 <button_handler>:
const struct device *dev;

void button_handler(uint32_t button_state, uint32_t has_changed){
	
    int button_pressed = 0;
	if (has_changed & button_state){
    dee4:	4208      	tst	r0, r1
    dee6:	d04f      	beq.n	df88 <button_handler+0xa4>
void button_handler(uint32_t button_state, uint32_t has_changed){
    dee8:	b508      	push	{r3, lr}
		switch (has_changed){
    deea:	3901      	subs	r1, #1
    deec:	2907      	cmp	r1, #7
    deee:	d805      	bhi.n	defc <button_handler+0x18>
    def0:	e8df f001 	tbb	[pc, r1]
    def4:	48042e06 	.word	0x48042e06
    def8:	46040404 	.word	0x46040404
	if (has_changed & button_state){
    defc:	2100      	movs	r1, #0
    defe:	e00e      	b.n	df1e <button_handler+0x3a>
			
			case DK_BTN1_MSK:
				button_pressed = 1;
                gpio_pin_set(dev,26,1);
    df00:	4b22      	ldr	r3, [pc, #136]	; (df8c <button_handler+0xa8>)
    df02:	6818      	ldr	r0, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    df04:	6903      	ldr	r3, [r0, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    df06:	681b      	ldr	r3, [r3, #0]
    df08:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
    df0c:	d118      	bne.n	df40 <button_handler+0x5c>
    df0e:	2301      	movs	r3, #1
	if (value != 0)	{
    df10:	b1c3      	cbz	r3, df44 <button_handler+0x60>
	const struct gpio_driver_api *api =
    df12:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    df14:	68db      	ldr	r3, [r3, #12]
    df16:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    df1a:	4798      	blx	r3
				button_pressed = 1;
    df1c:	2101      	movs	r1, #1
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    df1e:	4b1c      	ldr	r3, [pc, #112]	; (df90 <button_handler+0xac>)
    df20:	4a1c      	ldr	r2, [pc, #112]	; (df94 <button_handler+0xb0>)
    df22:	1a9b      	subs	r3, r3, r2
    df24:	08db      	lsrs	r3, r3, #3
				button_pressed = 4;
				break;
			default:
				break;
		}
		LOG_INF("Button %d pressed", button_pressed);
    df26:	f04f 0200 	mov.w	r2, #0
    df2a:	2003      	movs	r0, #3
    df2c:	f360 0202 	bfi	r2, r0, #0, #3
    df30:	f36f 02c5 	bfc	r2, #3, #3
    df34:	f363 128f 	bfi	r2, r3, #6, #10
    df38:	4817      	ldr	r0, [pc, #92]	; (df98 <button_handler+0xb4>)
    df3a:	f001 f991 	bl	f260 <log_1>

	}
}
    df3e:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
    df40:	2300      	movs	r3, #0
    df42:	e7e5      	b.n	df10 <button_handler+0x2c>
	const struct gpio_driver_api *api =
    df44:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    df46:	691b      	ldr	r3, [r3, #16]
    df48:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    df4c:	4798      	blx	r3
    df4e:	e7e5      	b.n	df1c <button_handler+0x38>
                gpio_pin_set(dev,26,0);
    df50:	4b0e      	ldr	r3, [pc, #56]	; (df8c <button_handler+0xa8>)
    df52:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
    df54:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    df56:	681b      	ldr	r3, [r3, #0]
    df58:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
    df5c:	d108      	bne.n	df70 <button_handler+0x8c>
    df5e:	2300      	movs	r3, #0
	if (value != 0)	{
    df60:	b143      	cbz	r3, df74 <button_handler+0x90>
	const struct gpio_driver_api *api =
    df62:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    df64:	68db      	ldr	r3, [r3, #12]
    df66:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    df6a:	4798      	blx	r3
			    button_pressed = 2;
    df6c:	2102      	movs	r1, #2
	return ret;
    df6e:	e7d6      	b.n	df1e <button_handler+0x3a>
		value = (value != 0) ? 0 : 1;
    df70:	2301      	movs	r3, #1
    df72:	e7f5      	b.n	df60 <button_handler+0x7c>
	const struct gpio_driver_api *api =
    df74:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    df76:	691b      	ldr	r3, [r3, #16]
    df78:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    df7c:	4798      	blx	r3
    df7e:	e7f5      	b.n	df6c <button_handler+0x88>
				button_pressed = 4;
    df80:	2104      	movs	r1, #4
				break;
    df82:	e7cc      	b.n	df1e <button_handler+0x3a>
				button_pressed = 3;
    df84:	2103      	movs	r1, #3
    df86:	e7ca      	b.n	df1e <button_handler+0x3a>
    df88:	4770      	bx	lr
    df8a:	bf00      	nop
    df8c:	20001a10 	.word	0x20001a10
    df90:	0001cc2c 	.word	0x0001cc2c
    df94:	0001cc2c 	.word	0x0001cc2c
    df98:	0001ce9c 	.word	0x0001ce9c

0000df9c <configure_dk_buttons_leds>:

void configure_dk_buttons_leds(){
    df9c:	b508      	push	{r3, lr}
	int err = dk_leds_init();
    df9e:	f005 fec7 	bl	13d30 <dk_leds_init>
	if(err){
    dfa2:	2800      	cmp	r0, #0
    dfa4:	d147      	bne.n	e036 <configure_dk_buttons_leds+0x9a>
		LOG_ERR("Could not init LEDS(err %d",err);
	}

	err = dk_buttons_init(button_handler);
    dfa6:	4854      	ldr	r0, [pc, #336]	; (e0f8 <configure_dk_buttons_leds+0x15c>)
    dfa8:	f005 fd8e 	bl	13ac8 <dk_buttons_init>
	if(err){
    dfac:	4601      	mov	r1, r0
    dfae:	2800      	cmp	r0, #0
    dfb0:	d153      	bne.n	e05a <configure_dk_buttons_leds+0xbe>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    dfb2:	4852      	ldr	r0, [pc, #328]	; (e0fc <configure_dk_buttons_leds+0x160>)
    dfb4:	f007 f8e2 	bl	1517c <z_impl_device_get_binding>
		LOG_ERR("Could not init BUTTONS(err %d", err);
	}

    dev = device_get_binding(LED0);
    dfb8:	4b51      	ldr	r3, [pc, #324]	; (e100 <configure_dk_buttons_leds+0x164>)
    dfba:	6018      	str	r0, [r3, #0]
	if (dev == NULL) {
    dfbc:	2800      	cmp	r0, #0
    dfbe:	d039      	beq.n	e034 <configure_dk_buttons_leds+0x98>
	const struct gpio_driver_api *api =
    dfc0:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
    dfc2:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    dfc4:	6813      	ldr	r3, [r2, #0]
    dfc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dfca:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    dfcc:	680b      	ldr	r3, [r1, #0]
    dfce:	f240 6201 	movw	r2, #1537	; 0x601
    dfd2:	210d      	movs	r1, #13
    dfd4:	4798      	blx	r3
		return;
	}

    err = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (err) {
    dfd6:	2800      	cmp	r0, #0
    dfd8:	d150      	bne.n	e07c <configure_dk_buttons_leds+0xe0>
		LOG_ERR("Could not init gpio %d", PIN);
	}
    err = gpio_pin_configure(dev, 27, GPIO_OUTPUT_ACTIVE | FLAGS);
    dfda:	4b49      	ldr	r3, [pc, #292]	; (e100 <configure_dk_buttons_leds+0x164>)
    dfdc:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
    dfde:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
    dfe0:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    dfe2:	6813      	ldr	r3, [r2, #0]
    dfe4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    dfe8:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    dfea:	680b      	ldr	r3, [r1, #0]
    dfec:	f240 6201 	movw	r2, #1537	; 0x601
    dff0:	211b      	movs	r1, #27
    dff2:	4798      	blx	r3
    if (err) {
    dff4:	2800      	cmp	r0, #0
    dff6:	d153      	bne.n	e0a0 <configure_dk_buttons_leds+0x104>
		LOG_ERR("Could not init gpio %d", 27);
	}
    err = gpio_pin_configure(dev, 26, GPIO_OUTPUT_ACTIVE | FLAGS);
    dff8:	4b41      	ldr	r3, [pc, #260]	; (e100 <configure_dk_buttons_leds+0x164>)
    dffa:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
    dffc:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
    dffe:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e000:	6813      	ldr	r3, [r2, #0]
    e002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    e006:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    e008:	680b      	ldr	r3, [r1, #0]
    e00a:	f240 6201 	movw	r2, #1537	; 0x601
    e00e:	211a      	movs	r1, #26
    e010:	4798      	blx	r3
    if (err) {
    e012:	2800      	cmp	r0, #0
    e014:	d156      	bne.n	e0c4 <configure_dk_buttons_leds+0x128>
		LOG_ERR("Could not init gpio %d", 26);
	}
    gpio_pin_set(dev,27,1);
    e016:	4b3a      	ldr	r3, [pc, #232]	; (e100 <configure_dk_buttons_leds+0x164>)
    e018:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
    e01a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    e01c:	681b      	ldr	r3, [r3, #0]
    e01e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    e022:	d161      	bne.n	e0e8 <configure_dk_buttons_leds+0x14c>
    e024:	2301      	movs	r3, #1
	if (value != 0)	{
    e026:	2b00      	cmp	r3, #0
    e028:	d060      	beq.n	e0ec <configure_dk_buttons_leds+0x150>
	const struct gpio_driver_api *api =
    e02a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    e02c:	68db      	ldr	r3, [r3, #12]
    e02e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e032:	4798      	blx	r3
    
    }
    e034:	bd08      	pop	{r3, pc}
    e036:	4601      	mov	r1, r0
    e038:	4b32      	ldr	r3, [pc, #200]	; (e104 <configure_dk_buttons_leds+0x168>)
    e03a:	4a33      	ldr	r2, [pc, #204]	; (e108 <configure_dk_buttons_leds+0x16c>)
    e03c:	1a9b      	subs	r3, r3, r2
    e03e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init LEDS(err %d",err);
    e040:	f04f 0200 	mov.w	r2, #0
    e044:	2001      	movs	r0, #1
    e046:	f360 0202 	bfi	r2, r0, #0, #3
    e04a:	f36f 02c5 	bfc	r2, #3, #3
    e04e:	f363 128f 	bfi	r2, r3, #6, #10
    e052:	482e      	ldr	r0, [pc, #184]	; (e10c <configure_dk_buttons_leds+0x170>)
    e054:	f001 f904 	bl	f260 <log_1>
    e058:	e7a5      	b.n	dfa6 <configure_dk_buttons_leds+0xa>
    e05a:	4b2a      	ldr	r3, [pc, #168]	; (e104 <configure_dk_buttons_leds+0x168>)
    e05c:	4a2a      	ldr	r2, [pc, #168]	; (e108 <configure_dk_buttons_leds+0x16c>)
    e05e:	1a9b      	subs	r3, r3, r2
    e060:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init BUTTONS(err %d", err);
    e062:	f04f 0200 	mov.w	r2, #0
    e066:	2001      	movs	r0, #1
    e068:	f360 0202 	bfi	r2, r0, #0, #3
    e06c:	f36f 02c5 	bfc	r2, #3, #3
    e070:	f363 128f 	bfi	r2, r3, #6, #10
    e074:	4826      	ldr	r0, [pc, #152]	; (e110 <configure_dk_buttons_leds+0x174>)
    e076:	f001 f8f3 	bl	f260 <log_1>
    e07a:	e79a      	b.n	dfb2 <configure_dk_buttons_leds+0x16>
    e07c:	4b21      	ldr	r3, [pc, #132]	; (e104 <configure_dk_buttons_leds+0x168>)
    e07e:	4a22      	ldr	r2, [pc, #136]	; (e108 <configure_dk_buttons_leds+0x16c>)
    e080:	1a9b      	subs	r3, r3, r2
    e082:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init gpio %d", PIN);
    e084:	f04f 0200 	mov.w	r2, #0
    e088:	2101      	movs	r1, #1
    e08a:	f361 0202 	bfi	r2, r1, #0, #3
    e08e:	f36f 02c5 	bfc	r2, #3, #3
    e092:	f363 128f 	bfi	r2, r3, #6, #10
    e096:	210d      	movs	r1, #13
    e098:	481e      	ldr	r0, [pc, #120]	; (e114 <configure_dk_buttons_leds+0x178>)
    e09a:	f001 f8e1 	bl	f260 <log_1>
    e09e:	e79c      	b.n	dfda <configure_dk_buttons_leds+0x3e>
    e0a0:	4b18      	ldr	r3, [pc, #96]	; (e104 <configure_dk_buttons_leds+0x168>)
    e0a2:	4a19      	ldr	r2, [pc, #100]	; (e108 <configure_dk_buttons_leds+0x16c>)
    e0a4:	1a9b      	subs	r3, r3, r2
    e0a6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init gpio %d", 27);
    e0a8:	f04f 0200 	mov.w	r2, #0
    e0ac:	2101      	movs	r1, #1
    e0ae:	f361 0202 	bfi	r2, r1, #0, #3
    e0b2:	f36f 02c5 	bfc	r2, #3, #3
    e0b6:	f363 128f 	bfi	r2, r3, #6, #10
    e0ba:	211b      	movs	r1, #27
    e0bc:	4815      	ldr	r0, [pc, #84]	; (e114 <configure_dk_buttons_leds+0x178>)
    e0be:	f001 f8cf 	bl	f260 <log_1>
    e0c2:	e799      	b.n	dff8 <configure_dk_buttons_leds+0x5c>
    e0c4:	4b0f      	ldr	r3, [pc, #60]	; (e104 <configure_dk_buttons_leds+0x168>)
    e0c6:	4a10      	ldr	r2, [pc, #64]	; (e108 <configure_dk_buttons_leds+0x16c>)
    e0c8:	1a9b      	subs	r3, r3, r2
    e0ca:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init gpio %d", 26);
    e0cc:	f04f 0200 	mov.w	r2, #0
    e0d0:	2101      	movs	r1, #1
    e0d2:	f361 0202 	bfi	r2, r1, #0, #3
    e0d6:	f36f 02c5 	bfc	r2, #3, #3
    e0da:	f363 128f 	bfi	r2, r3, #6, #10
    e0de:	211a      	movs	r1, #26
    e0e0:	480c      	ldr	r0, [pc, #48]	; (e114 <configure_dk_buttons_leds+0x178>)
    e0e2:	f001 f8bd 	bl	f260 <log_1>
    e0e6:	e796      	b.n	e016 <configure_dk_buttons_leds+0x7a>
		value = (value != 0) ? 0 : 1;
    e0e8:	2300      	movs	r3, #0
    e0ea:	e79c      	b.n	e026 <configure_dk_buttons_leds+0x8a>
	const struct gpio_driver_api *api =
    e0ec:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    e0ee:	691b      	ldr	r3, [r3, #16]
    e0f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e0f4:	4798      	blx	r3
	return ret;
    e0f6:	e79d      	b.n	e034 <configure_dk_buttons_leds+0x98>
    e0f8:	0000dee5 	.word	0x0000dee5
    e0fc:	0001ceec 	.word	0x0001ceec
    e100:	20001a10 	.word	0x20001a10
    e104:	0001cc2c 	.word	0x0001cc2c
    e108:	0001cc2c 	.word	0x0001cc2c
    e10c:	0001ceb0 	.word	0x0001ceb0
    e110:	0001cecc 	.word	0x0001cecc
    e114:	0001cef4 	.word	0x0001cef4

0000e118 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    e118:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    e11a:	680b      	ldr	r3, [r1, #0]
    e11c:	3301      	adds	r3, #1
    e11e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    e120:	4b01      	ldr	r3, [pc, #4]	; (e128 <char_out+0x10>)
    e122:	681b      	ldr	r3, [r3, #0]
    e124:	4798      	blx	r3
}
    e126:	bd08      	pop	{r3, pc}
    e128:	200003c0 	.word	0x200003c0

0000e12c <__printk_hook_install>:
	_char_out = fn;
    e12c:	4b01      	ldr	r3, [pc, #4]	; (e134 <__printk_hook_install+0x8>)
    e12e:	6018      	str	r0, [r3, #0]
}
    e130:	4770      	bx	lr
    e132:	bf00      	nop
    e134:	200003c0 	.word	0x200003c0

0000e138 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    e138:	b500      	push	{lr}
    e13a:	b083      	sub	sp, #12
    e13c:	4602      	mov	r2, r0
    e13e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    e140:	2100      	movs	r1, #0
    e142:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    e144:	a901      	add	r1, sp, #4
    e146:	4803      	ldr	r0, [pc, #12]	; (e154 <vprintk+0x1c>)
    e148:	f000 f8c8 	bl	e2dc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    e14c:	b003      	add	sp, #12
    e14e:	f85d fb04 	ldr.w	pc, [sp], #4
    e152:	bf00      	nop
    e154:	0000e119 	.word	0x0000e119

0000e158 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    e158:	b510      	push	{r4, lr}
    e15a:	b084      	sub	sp, #16
    e15c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    e15e:	9001      	str	r0, [sp, #4]
    e160:	9102      	str	r1, [sp, #8]
    e162:	2100      	movs	r1, #0
    e164:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    e166:	a901      	add	r1, sp, #4
    e168:	4805      	ldr	r0, [pc, #20]	; (e180 <vsnprintk+0x28>)
    e16a:	f000 f8b7 	bl	e2dc <cbvprintf>

	if (ctx.count < ctx.max) {
    e16e:	9b03      	ldr	r3, [sp, #12]
    e170:	9a02      	ldr	r2, [sp, #8]
    e172:	4293      	cmp	r3, r2
    e174:	da01      	bge.n	e17a <vsnprintk+0x22>
		str[ctx.count] = '\0';
    e176:	2200      	movs	r2, #0
    e178:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    e17a:	9803      	ldr	r0, [sp, #12]
    e17c:	b004      	add	sp, #16
    e17e:	bd10      	pop	{r4, pc}
    e180:	000199dd 	.word	0x000199dd

0000e184 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    e184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e188:	b083      	sub	sp, #12
    e18a:	4604      	mov	r4, r0
    e18c:	4608      	mov	r0, r1
    e18e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e190:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    e192:	f013 0f08 	tst.w	r3, #8
    e196:	d105      	bne.n	e1a4 <process_event+0x20>
    e198:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    e19c:	2300      	movs	r3, #0
    e19e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    e1a0:	9301      	str	r3, [sp, #4]
}
    e1a2:	e069      	b.n	e278 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    e1a4:	2901      	cmp	r1, #1
    e1a6:	d009      	beq.n	e1bc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    e1a8:	f043 0320 	orr.w	r3, r3, #32
    e1ac:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e1ae:	f385 8811 	msr	BASEPRI, r5
    e1b2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    e1b6:	b003      	add	sp, #12
    e1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    e1bc:	f043 0310 	orr.w	r3, r3, #16
    e1c0:	8323      	strh	r3, [r4, #24]
    e1c2:	e7f4      	b.n	e1ae <process_event+0x2a>
			evt = process_recheck(mgr);
    e1c4:	4620      	mov	r0, r4
    e1c6:	f00b fc64 	bl	19a92 <process_recheck>
    e1ca:	e057      	b.n	e27c <process_event+0xf8>
			res = mgr->last_res;
    e1cc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    e1d0:	464a      	mov	r2, r9
    e1d2:	4669      	mov	r1, sp
    e1d4:	4620      	mov	r0, r4
    e1d6:	f00b fc75 	bl	19ac4 <process_complete>
		onoff_transition_fn transit = NULL;
    e1da:	2700      	movs	r7, #0
    e1dc:	e05a      	b.n	e294 <process_event+0x110>
			transit = mgr->transitions->start;
    e1de:	6923      	ldr	r3, [r4, #16]
    e1e0:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    e1e2:	2106      	movs	r1, #6
    e1e4:	4620      	mov	r0, r4
    e1e6:	f00b fc2d 	bl	19a44 <set_state>
		res = 0;
    e1ea:	f04f 0900 	mov.w	r9, #0
    e1ee:	e051      	b.n	e294 <process_event+0x110>
			transit = mgr->transitions->stop;
    e1f0:	6923      	ldr	r3, [r4, #16]
    e1f2:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    e1f4:	2104      	movs	r1, #4
    e1f6:	4620      	mov	r0, r4
    e1f8:	f00b fc24 	bl	19a44 <set_state>
		res = 0;
    e1fc:	f04f 0900 	mov.w	r9, #0
    e200:	e048      	b.n	e294 <process_event+0x110>
			transit = mgr->transitions->reset;
    e202:	6923      	ldr	r3, [r4, #16]
    e204:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    e206:	2105      	movs	r1, #5
    e208:	4620      	mov	r0, r4
    e20a:	f00b fc1b 	bl	19a44 <set_state>
		res = 0;
    e20e:	f04f 0900 	mov.w	r9, #0
    e212:	e03f      	b.n	e294 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    e214:	2200      	movs	r2, #0
    e216:	e046      	b.n	e2a6 <process_event+0x122>
    e218:	2200      	movs	r2, #0
    e21a:	e044      	b.n	e2a6 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e21c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    e220:	8323      	strh	r3, [r4, #24]
    e222:	f385 8811 	msr	BASEPRI, r5
    e226:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    e22a:	2900      	cmp	r1, #0
    e22c:	d144      	bne.n	e2b8 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e22e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    e230:	b12b      	cbz	r3, e23e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    e232:	464b      	mov	r3, r9
    e234:	4642      	mov	r2, r8
    e236:	4669      	mov	r1, sp
    e238:	4620      	mov	r0, r4
    e23a:	f00b fcb9 	bl	19bb0 <notify_all>
			if (transit != NULL) {
    e23e:	b117      	cbz	r7, e246 <process_event+0xc2>
				transit(mgr, transition_complete);
    e240:	4925      	ldr	r1, [pc, #148]	; (e2d8 <process_event+0x154>)
    e242:	4620      	mov	r0, r4
    e244:	47b8      	blx	r7
	__asm__ volatile(
    e246:	f04f 0340 	mov.w	r3, #64	; 0x40
    e24a:	f3ef 8511 	mrs	r5, BASEPRI
    e24e:	f383 8812 	msr	BASEPRI_MAX, r3
    e252:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    e256:	8b23      	ldrh	r3, [r4, #24]
    e258:	f023 0308 	bic.w	r3, r3, #8
    e25c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    e25e:	8b23      	ldrh	r3, [r4, #24]
    e260:	f013 0f10 	tst.w	r3, #16
    e264:	d02e      	beq.n	e2c4 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e266:	f023 0310 	bic.w	r3, r3, #16
    e26a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    e26c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    e26e:	8b26      	ldrh	r6, [r4, #24]
    e270:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    e274:	2800      	cmp	r0, #0
    e276:	d09a      	beq.n	e1ae <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    e278:	2802      	cmp	r0, #2
    e27a:	d0a3      	beq.n	e1c4 <process_event+0x40>
		if (evt == EVT_NOP) {
    e27c:	2800      	cmp	r0, #0
    e27e:	d096      	beq.n	e1ae <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    e280:	2801      	cmp	r0, #1
    e282:	d0a3      	beq.n	e1cc <process_event+0x48>
		} else if (evt == EVT_START) {
    e284:	2803      	cmp	r0, #3
    e286:	d0aa      	beq.n	e1de <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    e288:	2804      	cmp	r0, #4
    e28a:	d0b1      	beq.n	e1f0 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    e28c:	2805      	cmp	r0, #5
    e28e:	d0b8      	beq.n	e202 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    e290:	2700      	movs	r7, #0
		res = 0;
    e292:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e294:	8b23      	ldrh	r3, [r4, #24]
    e296:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e29a:	45b0      	cmp	r8, r6
    e29c:	d0ba      	beq.n	e214 <process_event+0x90>
    e29e:	68a2      	ldr	r2, [r4, #8]
    e2a0:	2a00      	cmp	r2, #0
    e2a2:	d0b9      	beq.n	e218 <process_event+0x94>
    e2a4:	2201      	movs	r2, #1
		if (do_monitors
    e2a6:	4611      	mov	r1, r2
    e2a8:	2a00      	cmp	r2, #0
    e2aa:	d1b7      	bne.n	e21c <process_event+0x98>
    e2ac:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    e2ae:	2a00      	cmp	r2, #0
    e2b0:	d1b4      	bne.n	e21c <process_event+0x98>
		    || (transit != NULL)) {
    e2b2:	2f00      	cmp	r7, #0
    e2b4:	d1b2      	bne.n	e21c <process_event+0x98>
    e2b6:	e7d2      	b.n	e25e <process_event+0xda>
				notify_monitors(mgr, state, res);
    e2b8:	464a      	mov	r2, r9
    e2ba:	4641      	mov	r1, r8
    e2bc:	4620      	mov	r0, r4
    e2be:	f00b fbc9 	bl	19a54 <notify_monitors>
    e2c2:	e7b4      	b.n	e22e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e2c4:	f013 0f20 	tst.w	r3, #32
    e2c8:	d004      	beq.n	e2d4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e2ca:	f023 0320 	bic.w	r3, r3, #32
    e2ce:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    e2d0:	2002      	movs	r0, #2
    e2d2:	e7cc      	b.n	e26e <process_event+0xea>
		evt = EVT_NOP;
    e2d4:	2000      	movs	r0, #0
    e2d6:	e7ca      	b.n	e26e <process_event+0xea>
    e2d8:	00019bdf 	.word	0x00019bdf

0000e2dc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2e0:	b093      	sub	sp, #76	; 0x4c
    e2e2:	4606      	mov	r6, r0
    e2e4:	460d      	mov	r5, r1
    e2e6:	4692      	mov	sl, r2
    e2e8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    e2ea:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    e2ec:	f89a 0000 	ldrb.w	r0, [sl]
    e2f0:	2800      	cmp	r0, #0
    e2f2:	f000 84d6 	beq.w	eca2 <cbvprintf+0x9c6>
		if (*fp != '%') {
    e2f6:	2825      	cmp	r0, #37	; 0x25
    e2f8:	d008      	beq.n	e30c <cbvprintf+0x30>
			OUTC(*fp++);
    e2fa:	f10a 0a01 	add.w	sl, sl, #1
    e2fe:	4629      	mov	r1, r5
    e300:	47b0      	blx	r6
    e302:	2800      	cmp	r0, #0
    e304:	f2c0 84ce 	blt.w	eca4 <cbvprintf+0x9c8>
    e308:	3401      	adds	r4, #1
			continue;
    e30a:	e7ef      	b.n	e2ec <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    e30c:	2300      	movs	r3, #0
    e30e:	9306      	str	r3, [sp, #24]
    e310:	9307      	str	r3, [sp, #28]
    e312:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    e314:	9308      	str	r3, [sp, #32]
    e316:	9309      	str	r3, [sp, #36]	; 0x24
    e318:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    e31a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    e31e:	f89a 3001 	ldrb.w	r3, [sl, #1]
    e322:	2b25      	cmp	r3, #37	; 0x25
    e324:	d001      	beq.n	e32a <cbvprintf+0x4e>
	bool loop = true;
    e326:	2701      	movs	r7, #1
    e328:	e02c      	b.n	e384 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    e32a:	f10a 0802 	add.w	r8, sl, #2
    e32e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    e332:	e1a8      	b.n	e686 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    e334:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e338:	f043 0304 	orr.w	r3, r3, #4
    e33c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    e340:	b1ff      	cbz	r7, e382 <cbvprintf+0xa6>
			++sp;
    e342:	f108 0801 	add.w	r8, r8, #1
    e346:	e01c      	b.n	e382 <cbvprintf+0xa6>
			conv->flag_plus = true;
    e348:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e34c:	f043 0308 	orr.w	r3, r3, #8
    e350:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    e354:	e7f4      	b.n	e340 <cbvprintf+0x64>
			conv->flag_space = true;
    e356:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e35a:	f043 0310 	orr.w	r3, r3, #16
    e35e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    e362:	e7ed      	b.n	e340 <cbvprintf+0x64>
			conv->flag_hash = true;
    e364:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e368:	f043 0320 	orr.w	r3, r3, #32
    e36c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    e370:	e7e6      	b.n	e340 <cbvprintf+0x64>
			conv->flag_zero = true;
    e372:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e37a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    e37e:	e7df      	b.n	e340 <cbvprintf+0x64>
		switch (*sp) {
    e380:	2700      	movs	r7, #0
	} while (loop);
    e382:	b34f      	cbz	r7, e3d8 <cbvprintf+0xfc>
		switch (*sp) {
    e384:	f898 3000 	ldrb.w	r3, [r8]
    e388:	3b20      	subs	r3, #32
    e38a:	2b10      	cmp	r3, #16
    e38c:	d8f8      	bhi.n	e380 <cbvprintf+0xa4>
    e38e:	a201      	add	r2, pc, #4	; (adr r2, e394 <cbvprintf+0xb8>)
    e390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e394:	0000e357 	.word	0x0000e357
    e398:	0000e381 	.word	0x0000e381
    e39c:	0000e381 	.word	0x0000e381
    e3a0:	0000e365 	.word	0x0000e365
    e3a4:	0000e381 	.word	0x0000e381
    e3a8:	0000e381 	.word	0x0000e381
    e3ac:	0000e381 	.word	0x0000e381
    e3b0:	0000e381 	.word	0x0000e381
    e3b4:	0000e381 	.word	0x0000e381
    e3b8:	0000e381 	.word	0x0000e381
    e3bc:	0000e381 	.word	0x0000e381
    e3c0:	0000e349 	.word	0x0000e349
    e3c4:	0000e381 	.word	0x0000e381
    e3c8:	0000e335 	.word	0x0000e335
    e3cc:	0000e381 	.word	0x0000e381
    e3d0:	0000e381 	.word	0x0000e381
    e3d4:	0000e373 	.word	0x0000e373
	if (conv->flag_zero && conv->flag_dash) {
    e3d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e3dc:	f003 0344 	and.w	r3, r3, #68	; 0x44
    e3e0:	2b44      	cmp	r3, #68	; 0x44
    e3e2:	d06d      	beq.n	e4c0 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    e3e4:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    e3e8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e3f0:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    e3f4:	f898 3000 	ldrb.w	r3, [r8]
    e3f8:	2b2a      	cmp	r3, #42	; 0x2a
    e3fa:	d068      	beq.n	e4ce <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    e3fc:	a805      	add	r0, sp, #20
    e3fe:	f00b fe67 	bl	1a0d0 <extract_decimal>
	if (sp != wp) {
    e402:	9b05      	ldr	r3, [sp, #20]
    e404:	4598      	cmp	r8, r3
    e406:	d012      	beq.n	e42e <cbvprintf+0x152>
		conv->width_present = true;
    e408:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e410:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    e414:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    e416:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    e41a:	2800      	cmp	r0, #0
    e41c:	db60      	blt.n	e4e0 <cbvprintf+0x204>
    e41e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    e420:	4313      	orrs	r3, r2
    e422:	f89d 2020 	ldrb.w	r2, [sp, #32]
    e426:	f363 0241 	bfi	r2, r3, #1, #1
    e42a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    e42e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    e430:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    e432:	781b      	ldrb	r3, [r3, #0]
    e434:	2b2e      	cmp	r3, #46	; 0x2e
    e436:	bf14      	ite	ne
    e438:	2300      	movne	r3, #0
    e43a:	2301      	moveq	r3, #1
    e43c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e440:	f363 0241 	bfi	r2, r3, #1, #1
    e444:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    e448:	2b00      	cmp	r3, #0
    e44a:	d04b      	beq.n	e4e4 <cbvprintf+0x208>
	++sp;
    e44c:	9b05      	ldr	r3, [sp, #20]
    e44e:	1c5a      	adds	r2, r3, #1
    e450:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    e452:	785b      	ldrb	r3, [r3, #1]
    e454:	2b2a      	cmp	r3, #42	; 0x2a
    e456:	d048      	beq.n	e4ea <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    e458:	a805      	add	r0, sp, #20
    e45a:	f00b fe39 	bl	1a0d0 <extract_decimal>
	conv->prec_value = prec;
    e45e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    e460:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e464:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    e468:	2800      	cmp	r0, #0
    e46a:	db47      	blt.n	e4fc <cbvprintf+0x220>
    e46c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    e46e:	4313      	orrs	r3, r2
    e470:	f89d 2020 	ldrb.w	r2, [sp, #32]
    e474:	f363 0241 	bfi	r2, r3, #1, #1
    e478:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    e47c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    e480:	f898 3000 	ldrb.w	r3, [r8]
    e484:	3b4c      	subs	r3, #76	; 0x4c
    e486:	2b2e      	cmp	r3, #46	; 0x2e
    e488:	f200 80dc 	bhi.w	e644 <cbvprintf+0x368>
    e48c:	e8df f003 	tbb	[pc, r3]
    e490:	dadadaca 	.word	0xdadadaca
    e494:	dadadada 	.word	0xdadadada
    e498:	dadadada 	.word	0xdadadada
    e49c:	dadadada 	.word	0xdadadada
    e4a0:	dadadada 	.word	0xdadadada
    e4a4:	dadadada 	.word	0xdadadada
    e4a8:	dadadada 	.word	0xdadadada
    e4ac:	da6ada38 	.word	0xda6ada38
    e4b0:	dadada51 	.word	0xdadada51
    e4b4:	dadadada 	.word	0xdadadada
    e4b8:	dadadac0 	.word	0xdadadac0
    e4bc:	dada      	.short	0xdada
    e4be:	b6          	.byte	0xb6
    e4bf:	00          	.byte	0x00
		conv->flag_zero = false;
    e4c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e4c4:	f36f 1386 	bfc	r3, #6, #1
    e4c8:	f88d 3020 	strb.w	r3, [sp, #32]
    e4cc:	e78a      	b.n	e3e4 <cbvprintf+0x108>
		conv->width_star = true;
    e4ce:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e4d2:	f043 0301 	orr.w	r3, r3, #1
    e4d6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    e4da:	4643      	mov	r3, r8
    e4dc:	3301      	adds	r3, #1
    e4de:	e7a7      	b.n	e430 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    e4e0:	2201      	movs	r2, #1
    e4e2:	e79d      	b.n	e420 <cbvprintf+0x144>
		return sp;
    e4e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
    e4e8:	e7ca      	b.n	e480 <cbvprintf+0x1a4>
		conv->prec_star = true;
    e4ea:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e4ee:	f043 0304 	orr.w	r3, r3, #4
    e4f2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    e4f6:	f102 0801 	add.w	r8, r2, #1
    e4fa:	e7c1      	b.n	e480 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    e4fc:	2201      	movs	r2, #1
    e4fe:	e7b6      	b.n	e46e <cbvprintf+0x192>
		if (*++sp == 'h') {
    e500:	f108 0201 	add.w	r2, r8, #1
    e504:	f898 3001 	ldrb.w	r3, [r8, #1]
    e508:	2b68      	cmp	r3, #104	; 0x68
    e50a:	d008      	beq.n	e51e <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    e50c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e510:	2102      	movs	r1, #2
    e512:	f361 03c6 	bfi	r3, r1, #3, #4
    e516:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    e51a:	4690      	mov	r8, r2
    e51c:	e02b      	b.n	e576 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    e51e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e522:	2201      	movs	r2, #1
    e524:	f362 03c6 	bfi	r3, r2, #3, #4
    e528:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    e52c:	f108 0802 	add.w	r8, r8, #2
    e530:	e021      	b.n	e576 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    e532:	f108 0201 	add.w	r2, r8, #1
    e536:	f898 3001 	ldrb.w	r3, [r8, #1]
    e53a:	2b6c      	cmp	r3, #108	; 0x6c
    e53c:	d008      	beq.n	e550 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    e53e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e542:	2103      	movs	r1, #3
    e544:	f361 03c6 	bfi	r3, r1, #3, #4
    e548:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    e54c:	4690      	mov	r8, r2
    e54e:	e012      	b.n	e576 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    e550:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e554:	2204      	movs	r2, #4
    e556:	f362 03c6 	bfi	r3, r2, #3, #4
    e55a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    e55e:	f108 0802 	add.w	r8, r8, #2
    e562:	e008      	b.n	e576 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    e564:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e568:	2205      	movs	r2, #5
    e56a:	f362 03c6 	bfi	r3, r2, #3, #4
    e56e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    e572:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    e576:	f818 3b01 	ldrb.w	r3, [r8], #1
    e57a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    e57e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    e582:	2a37      	cmp	r2, #55	; 0x37
    e584:	f200 8150 	bhi.w	e828 <cbvprintf+0x54c>
    e588:	e8df f012 	tbh	[pc, r2, lsl #1]
    e58c:	014e0126 	.word	0x014e0126
    e590:	014e014e 	.word	0x014e014e
    e594:	01260126 	.word	0x01260126
    e598:	014e0126 	.word	0x014e0126
    e59c:	014e014e 	.word	0x014e014e
    e5a0:	014e014e 	.word	0x014e014e
    e5a4:	014e014e 	.word	0x014e014e
    e5a8:	014e014e 	.word	0x014e014e
    e5ac:	014e014e 	.word	0x014e014e
    e5b0:	014e014e 	.word	0x014e014e
    e5b4:	014e014e 	.word	0x014e014e
    e5b8:	0113014e 	.word	0x0113014e
    e5bc:	014e014e 	.word	0x014e014e
    e5c0:	014e014e 	.word	0x014e014e
    e5c4:	014e014e 	.word	0x014e014e
    e5c8:	014e014e 	.word	0x014e014e
    e5cc:	014e0126 	.word	0x014e0126
    e5d0:	00630113 	.word	0x00630113
    e5d4:	01260126 	.word	0x01260126
    e5d8:	014e0126 	.word	0x014e0126
    e5dc:	014e0063 	.word	0x014e0063
    e5e0:	014e014e 	.word	0x014e014e
    e5e4:	012f014e 	.word	0x012f014e
    e5e8:	013f0113 	.word	0x013f0113
    e5ec:	014e014e 	.word	0x014e014e
    e5f0:	014e013f 	.word	0x014e013f
    e5f4:	014e0113 	.word	0x014e0113
    e5f8:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    e5fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e600:	2206      	movs	r2, #6
    e602:	f362 03c6 	bfi	r3, r2, #3, #4
    e606:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    e60a:	f108 0801 	add.w	r8, r8, #1
		break;
    e60e:	e7b2      	b.n	e576 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    e610:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e614:	2207      	movs	r2, #7
    e616:	f362 03c6 	bfi	r3, r2, #3, #4
    e61a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    e61e:	f108 0801 	add.w	r8, r8, #1
		break;
    e622:	e7a8      	b.n	e576 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    e624:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e628:	2208      	movs	r2, #8
    e62a:	f362 03c6 	bfi	r3, r2, #3, #4
    e62e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    e632:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    e636:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e63a:	f043 0302 	orr.w	r3, r3, #2
    e63e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    e642:	e798      	b.n	e576 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    e644:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e648:	f36f 03c6 	bfc	r3, #3, #4
    e64c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    e650:	e791      	b.n	e576 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    e652:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    e656:	2101      	movs	r1, #1
    e658:	f361 0202 	bfi	r2, r1, #0, #3
    e65c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    e660:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    e664:	f002 0278 	and.w	r2, r2, #120	; 0x78
    e668:	2a40      	cmp	r2, #64	; 0x40
    e66a:	f000 80aa 	beq.w	e7c2 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    e66e:	2b63      	cmp	r3, #99	; 0x63
    e670:	f000 80ae 	beq.w	e7d0 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    e674:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e678:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e67c:	4317      	orrs	r7, r2
    e67e:	f367 0341 	bfi	r3, r7, #1, #1
    e682:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    e686:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e68a:	f013 0f01 	tst.w	r3, #1
    e68e:	f000 80da 	beq.w	e846 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    e692:	9b03      	ldr	r3, [sp, #12]
    e694:	1d1a      	adds	r2, r3, #4
    e696:	9203      	str	r2, [sp, #12]
    e698:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    e69a:	2f00      	cmp	r7, #0
    e69c:	f2c0 80cb 	blt.w	e836 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    e6a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e6a4:	f013 0f04 	tst.w	r3, #4
    e6a8:	f000 80df 	beq.w	e86a <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    e6ac:	9b03      	ldr	r3, [sp, #12]
    e6ae:	1d1a      	adds	r2, r3, #4
    e6b0:	9203      	str	r2, [sp, #12]
    e6b2:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    e6b6:	f1bb 0f00 	cmp.w	fp, #0
    e6ba:	f2c0 80cd 	blt.w	e858 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    e6be:	2300      	movs	r3, #0
    e6c0:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    e6c2:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    e6c4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e6c8:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    e6cc:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    e6d0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    e6d4:	2b01      	cmp	r3, #1
    e6d6:	f000 80d1 	beq.w	e87c <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    e6da:	2b02      	cmp	r3, #2
    e6dc:	f000 8116 	beq.w	e90c <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    e6e0:	2b04      	cmp	r3, #4
    e6e2:	f000 8167 	beq.w	e9b4 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    e6e6:	2b03      	cmp	r3, #3
    e6e8:	f000 817e 	beq.w	e9e8 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    e6ec:	f89d 9020 	ldrb.w	r9, [sp, #32]
    e6f0:	f019 0303 	ands.w	r3, r9, #3
    e6f4:	9302      	str	r3, [sp, #8]
    e6f6:	f040 817d 	bne.w	e9f4 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    e6fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    e6fe:	3b25      	subs	r3, #37	; 0x25
    e700:	2b53      	cmp	r3, #83	; 0x53
    e702:	f200 8233 	bhi.w	eb6c <cbvprintf+0x890>
    e706:	e8df f013 	tbh	[pc, r3, lsl #1]
    e70a:	0181      	.short	0x0181
    e70c:	02310231 	.word	0x02310231
    e710:	02310231 	.word	0x02310231
    e714:	02310231 	.word	0x02310231
    e718:	02310231 	.word	0x02310231
    e71c:	02310231 	.word	0x02310231
    e720:	02310231 	.word	0x02310231
    e724:	02310231 	.word	0x02310231
    e728:	02310231 	.word	0x02310231
    e72c:	02310231 	.word	0x02310231
    e730:	02310231 	.word	0x02310231
    e734:	02310231 	.word	0x02310231
    e738:	02310231 	.word	0x02310231
    e73c:	02310231 	.word	0x02310231
    e740:	02310231 	.word	0x02310231
    e744:	02310231 	.word	0x02310231
    e748:	02310231 	.word	0x02310231
    e74c:	02310231 	.word	0x02310231
    e750:	02310231 	.word	0x02310231
    e754:	02310231 	.word	0x02310231
    e758:	02310231 	.word	0x02310231
    e75c:	02310231 	.word	0x02310231
    e760:	02310231 	.word	0x02310231
    e764:	02310231 	.word	0x02310231
    e768:	02310231 	.word	0x02310231
    e76c:	02310231 	.word	0x02310231
    e770:	023101c7 	.word	0x023101c7
    e774:	02310231 	.word	0x02310231
    e778:	02310231 	.word	0x02310231
    e77c:	02310231 	.word	0x02310231
    e780:	02310231 	.word	0x02310231
    e784:	01a10231 	.word	0x01a10231
    e788:	023101ab 	.word	0x023101ab
    e78c:	02310231 	.word	0x02310231
    e790:	01ab0231 	.word	0x01ab0231
    e794:	02310231 	.word	0x02310231
    e798:	02310231 	.word	0x02310231
    e79c:	01c70208 	.word	0x01c70208
    e7a0:	023101ea 	.word	0x023101ea
    e7a4:	018f0231 	.word	0x018f0231
    e7a8:	01c70231 	.word	0x01c70231
    e7ac:	02310231 	.word	0x02310231
    e7b0:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    e7b2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    e7b6:	2102      	movs	r1, #2
    e7b8:	f361 0202 	bfi	r2, r1, #0, #3
    e7bc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    e7c0:	e74e      	b.n	e660 <cbvprintf+0x384>
			conv->invalid = true;
    e7c2:	f89d 1020 	ldrb.w	r1, [sp, #32]
    e7c6:	f041 0101 	orr.w	r1, r1, #1
    e7ca:	f88d 1020 	strb.w	r1, [sp, #32]
    e7ce:	e74e      	b.n	e66e <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    e7d0:	1e17      	subs	r7, r2, #0
    e7d2:	bf18      	it	ne
    e7d4:	2701      	movne	r7, #1
    e7d6:	e74d      	b.n	e674 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    e7d8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e7dc:	2204      	movs	r2, #4
    e7de:	f362 0302 	bfi	r3, r2, #0, #3
    e7e2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    e7e6:	2701      	movs	r7, #1
			break;
    e7e8:	e744      	b.n	e674 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    e7ea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e7ee:	2203      	movs	r2, #3
    e7f0:	f362 0302 	bfi	r3, r2, #0, #3
    e7f4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    e7f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e7fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    e800:	2b40      	cmp	r3, #64	; 0x40
    e802:	f47f af37 	bne.w	e674 <cbvprintf+0x398>
			unsupported = true;
    e806:	2701      	movs	r7, #1
    e808:	e734      	b.n	e674 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    e80a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    e80e:	2203      	movs	r2, #3
    e810:	f362 0302 	bfi	r3, r2, #0, #3
    e814:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    e818:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e81c:	f013 0f78 	tst.w	r3, #120	; 0x78
    e820:	f43f af28 	beq.w	e674 <cbvprintf+0x398>
			unsupported = true;
    e824:	2701      	movs	r7, #1
    e826:	e725      	b.n	e674 <cbvprintf+0x398>
		conv->invalid = true;
    e828:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e82c:	f043 0301 	orr.w	r3, r3, #1
    e830:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    e834:	e71e      	b.n	e674 <cbvprintf+0x398>
				conv->flag_dash = true;
    e836:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e83a:	f043 0304 	orr.w	r3, r3, #4
    e83e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    e842:	427f      	negs	r7, r7
    e844:	e72c      	b.n	e6a0 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    e846:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    e84a:	2b00      	cmp	r3, #0
    e84c:	db02      	blt.n	e854 <cbvprintf+0x578>
		int width = -1;
    e84e:	f04f 37ff 	mov.w	r7, #4294967295
    e852:	e725      	b.n	e6a0 <cbvprintf+0x3c4>
			width = conv->width_value;
    e854:	9f09      	ldr	r7, [sp, #36]	; 0x24
    e856:	e723      	b.n	e6a0 <cbvprintf+0x3c4>
				conv->prec_present = false;
    e858:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    e85c:	f36f 0341 	bfc	r3, #1, #1
    e860:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    e864:	f04f 3bff 	mov.w	fp, #4294967295
    e868:	e729      	b.n	e6be <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    e86a:	f013 0f02 	tst.w	r3, #2
    e86e:	d002      	beq.n	e876 <cbvprintf+0x59a>
			precision = conv->prec_value;
    e870:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    e874:	e723      	b.n	e6be <cbvprintf+0x3e2>
		int precision = -1;
    e876:	f04f 3bff 	mov.w	fp, #4294967295
    e87a:	e720      	b.n	e6be <cbvprintf+0x3e2>
			switch (length_mod) {
    e87c:	1ecb      	subs	r3, r1, #3
    e87e:	2b04      	cmp	r3, #4
    e880:	d804      	bhi.n	e88c <cbvprintf+0x5b0>
    e882:	e8df f003 	tbb	[pc, r3]
    e886:	1d0b      	.short	0x1d0b
    e888:	3529      	.short	0x3529
    e88a:	35          	.byte	0x35
    e88b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    e88c:	9b03      	ldr	r3, [sp, #12]
    e88e:	1d1a      	adds	r2, r3, #4
    e890:	9203      	str	r2, [sp, #12]
    e892:	681a      	ldr	r2, [r3, #0]
    e894:	17d3      	asrs	r3, r2, #31
    e896:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e89a:	e006      	b.n	e8aa <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    e89c:	9b03      	ldr	r3, [sp, #12]
    e89e:	1d1a      	adds	r2, r3, #4
    e8a0:	9203      	str	r2, [sp, #12]
    e8a2:	681a      	ldr	r2, [r3, #0]
    e8a4:	17d3      	asrs	r3, r2, #31
    e8a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    e8aa:	2901      	cmp	r1, #1
    e8ac:	d028      	beq.n	e900 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    e8ae:	2902      	cmp	r1, #2
    e8b0:	f47f af1c 	bne.w	e6ec <cbvprintf+0x410>
				value->sint = (short)value->sint;
    e8b4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    e8b8:	17d3      	asrs	r3, r2, #31
    e8ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e8be:	e715      	b.n	e6ec <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    e8c0:	9b03      	ldr	r3, [sp, #12]
    e8c2:	3307      	adds	r3, #7
    e8c4:	f023 0307 	bic.w	r3, r3, #7
    e8c8:	f103 0208 	add.w	r2, r3, #8
    e8cc:	9203      	str	r2, [sp, #12]
    e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    e8d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e8d6:	e7e8      	b.n	e8aa <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    e8d8:	9b03      	ldr	r3, [sp, #12]
    e8da:	3307      	adds	r3, #7
    e8dc:	f023 0307 	bic.w	r3, r3, #7
    e8e0:	f103 0208 	add.w	r2, r3, #8
    e8e4:	9203      	str	r2, [sp, #12]
    e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    e8ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e8ee:	e7dc      	b.n	e8aa <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    e8f0:	9b03      	ldr	r3, [sp, #12]
    e8f2:	1d1a      	adds	r2, r3, #4
    e8f4:	9203      	str	r2, [sp, #12]
    e8f6:	681a      	ldr	r2, [r3, #0]
    e8f8:	17d3      	asrs	r3, r2, #31
				value->sint =
    e8fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e8fe:	e7d4      	b.n	e8aa <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    e900:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e904:	9306      	str	r3, [sp, #24]
    e906:	2300      	movs	r3, #0
    e908:	9307      	str	r3, [sp, #28]
    e90a:	e6ef      	b.n	e6ec <cbvprintf+0x410>
			switch (length_mod) {
    e90c:	1ecb      	subs	r3, r1, #3
    e90e:	2b04      	cmp	r3, #4
    e910:	d804      	bhi.n	e91c <cbvprintf+0x640>
    e912:	e8df f003 	tbb	[pc, r3]
    e916:	1f0b      	.short	0x1f0b
    e918:	4135      	.short	0x4135
    e91a:	41          	.byte	0x41
    e91b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    e91c:	9b03      	ldr	r3, [sp, #12]
    e91e:	1d1a      	adds	r2, r3, #4
    e920:	9203      	str	r2, [sp, #12]
    e922:	681b      	ldr	r3, [r3, #0]
    e924:	9306      	str	r3, [sp, #24]
    e926:	2300      	movs	r3, #0
    e928:	9307      	str	r3, [sp, #28]
				break;
    e92a:	e01e      	b.n	e96a <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    e92c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    e930:	2b63      	cmp	r3, #99	; 0x63
    e932:	d007      	beq.n	e944 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    e934:	9b03      	ldr	r3, [sp, #12]
    e936:	1d1a      	adds	r2, r3, #4
    e938:	9203      	str	r2, [sp, #12]
    e93a:	681b      	ldr	r3, [r3, #0]
    e93c:	9306      	str	r3, [sp, #24]
    e93e:	2300      	movs	r3, #0
    e940:	9307      	str	r3, [sp, #28]
    e942:	e012      	b.n	e96a <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    e944:	9b03      	ldr	r3, [sp, #12]
    e946:	1d1a      	adds	r2, r3, #4
    e948:	9203      	str	r2, [sp, #12]
    e94a:	681b      	ldr	r3, [r3, #0]
    e94c:	9306      	str	r3, [sp, #24]
    e94e:	2300      	movs	r3, #0
    e950:	9307      	str	r3, [sp, #28]
    e952:	e00a      	b.n	e96a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    e954:	9b03      	ldr	r3, [sp, #12]
    e956:	3307      	adds	r3, #7
    e958:	f023 0307 	bic.w	r3, r3, #7
    e95c:	f103 0208 	add.w	r2, r3, #8
    e960:	9203      	str	r2, [sp, #12]
    e962:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    e966:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    e96a:	2901      	cmp	r1, #1
    e96c:	d01c      	beq.n	e9a8 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    e96e:	2902      	cmp	r1, #2
    e970:	f47f aebc 	bne.w	e6ec <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    e974:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    e978:	9306      	str	r3, [sp, #24]
    e97a:	2300      	movs	r3, #0
    e97c:	9307      	str	r3, [sp, #28]
    e97e:	e6b5      	b.n	e6ec <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    e980:	9b03      	ldr	r3, [sp, #12]
    e982:	3307      	adds	r3, #7
    e984:	f023 0307 	bic.w	r3, r3, #7
    e988:	f103 0208 	add.w	r2, r3, #8
    e98c:	9203      	str	r2, [sp, #12]
    e98e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    e992:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    e996:	e7e8      	b.n	e96a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    e998:	9b03      	ldr	r3, [sp, #12]
    e99a:	1d1a      	adds	r2, r3, #4
    e99c:	9203      	str	r2, [sp, #12]
    e99e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    e9a0:	9306      	str	r3, [sp, #24]
    e9a2:	2300      	movs	r3, #0
    e9a4:	9307      	str	r3, [sp, #28]
				break;
    e9a6:	e7e0      	b.n	e96a <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    e9a8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e9ac:	9306      	str	r3, [sp, #24]
    e9ae:	2300      	movs	r3, #0
    e9b0:	9307      	str	r3, [sp, #28]
    e9b2:	e69b      	b.n	e6ec <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    e9b4:	2908      	cmp	r1, #8
    e9b6:	d00b      	beq.n	e9d0 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    e9b8:	9b03      	ldr	r3, [sp, #12]
    e9ba:	3307      	adds	r3, #7
    e9bc:	f023 0307 	bic.w	r3, r3, #7
    e9c0:	f103 0208 	add.w	r2, r3, #8
    e9c4:	9203      	str	r2, [sp, #12]
    e9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e9ce:	e68d      	b.n	e6ec <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    e9d0:	9b03      	ldr	r3, [sp, #12]
    e9d2:	3307      	adds	r3, #7
    e9d4:	f023 0307 	bic.w	r3, r3, #7
    e9d8:	f103 0208 	add.w	r2, r3, #8
    e9dc:	9203      	str	r2, [sp, #12]
    e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e9e6:	e681      	b.n	e6ec <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    e9e8:	9b03      	ldr	r3, [sp, #12]
    e9ea:	1d1a      	adds	r2, r3, #4
    e9ec:	9203      	str	r2, [sp, #12]
    e9ee:	681b      	ldr	r3, [r3, #0]
    e9f0:	9306      	str	r3, [sp, #24]
    e9f2:	e67b      	b.n	e6ec <cbvprintf+0x410>
			OUTS(sp, fp);
    e9f4:	4643      	mov	r3, r8
    e9f6:	4652      	mov	r2, sl
    e9f8:	4629      	mov	r1, r5
    e9fa:	4630      	mov	r0, r6
    e9fc:	f00b fbe5 	bl	1a1ca <outs>
    ea00:	2800      	cmp	r0, #0
    ea02:	f2c0 814f 	blt.w	eca4 <cbvprintf+0x9c8>
    ea06:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    ea08:	46c2      	mov	sl, r8
			continue;
    ea0a:	e46f      	b.n	e2ec <cbvprintf+0x10>
		case '%':
			OUTC('%');
    ea0c:	4629      	mov	r1, r5
    ea0e:	2025      	movs	r0, #37	; 0x25
    ea10:	47b0      	blx	r6
    ea12:	2800      	cmp	r0, #0
    ea14:	f2c0 8146 	blt.w	eca4 <cbvprintf+0x9c8>
    ea18:	3401      	adds	r4, #1
		char sign = 0;
    ea1a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    ea1e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    ea22:	f04f 0a00 	mov.w	sl, #0
			break;
    ea26:	e0a7      	b.n	eb78 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    ea28:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    ea2c:	f1bb 0f00 	cmp.w	fp, #0
    ea30:	db08      	blt.n	ea44 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    ea32:	4659      	mov	r1, fp
    ea34:	4650      	mov	r0, sl
    ea36:	f00c f833 	bl	1aaa0 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    ea3a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    ea3e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    ea42:	e099      	b.n	eb78 <cbvprintf+0x89c>
				len = strlen(bps);
    ea44:	4650      	mov	r0, sl
    ea46:	f00c f823 	bl	1aa90 <strlen>
    ea4a:	e7f6      	b.n	ea3a <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ea4c:	9b06      	ldr	r3, [sp, #24]
    ea4e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    ea52:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    ea56:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    ea5a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    ea5e:	e08b      	b.n	eb78 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    ea60:	f019 0f08 	tst.w	r9, #8
    ea64:	d105      	bne.n	ea72 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    ea66:	f019 0910 	ands.w	r9, r9, #16
    ea6a:	d004      	beq.n	ea76 <cbvprintf+0x79a>
				sign = ' ';
    ea6c:	f04f 0920 	mov.w	r9, #32
    ea70:	e001      	b.n	ea76 <cbvprintf+0x79a>
				sign = '+';
    ea72:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    ea76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    ea7a:	2a00      	cmp	r2, #0
    ea7c:	f173 0100 	sbcs.w	r1, r3, #0
    ea80:	db02      	blt.n	ea88 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    ea82:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ea86:	e009      	b.n	ea9c <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    ea88:	4252      	negs	r2, r2
    ea8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ea8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    ea92:	f04f 092d 	mov.w	r9, #45	; 0x2d
    ea96:	e001      	b.n	ea9c <cbvprintf+0x7c0>
		switch (conv->specifier) {
    ea98:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    ea9c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    eaa0:	9300      	str	r3, [sp, #0]
    eaa2:	ab0c      	add	r3, sp, #48	; 0x30
    eaa4:	aa08      	add	r2, sp, #32
    eaa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    eaaa:	f00b fb24 	bl	1a0f6 <encode_uint>
    eaae:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    eab0:	f1bb 0f00 	cmp.w	fp, #0
    eab4:	f2c0 8090 	blt.w	ebd8 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    eab8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    eabc:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    eac0:	f89d 2020 	ldrb.w	r2, [sp, #32]
    eac4:	f36f 1286 	bfc	r2, #6, #1
    eac8:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    eacc:	459b      	cmp	fp, r3
    eace:	f240 8086 	bls.w	ebde <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    ead2:	ebab 0303 	sub.w	r3, fp, r3
    ead6:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    ead8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    eadc:	e04c      	b.n	eb78 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    eade:	9806      	ldr	r0, [sp, #24]
    eae0:	b930      	cbnz	r0, eaf0 <cbvprintf+0x814>
		char sign = 0;
    eae2:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    eae6:	f8df b1c4 	ldr.w	fp, [pc, #452]	; ecac <cbvprintf+0x9d0>
			bps = "(nil)";
    eaea:	f1ab 0a05 	sub.w	sl, fp, #5
    eaee:	e043      	b.n	eb78 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    eaf0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    eaf4:	9300      	str	r3, [sp, #0]
    eaf6:	ab0c      	add	r3, sp, #48	; 0x30
    eaf8:	aa08      	add	r2, sp, #32
    eafa:	2100      	movs	r1, #0
    eafc:	f00b fafb 	bl	1a0f6 <encode_uint>
    eb00:	4682      	mov	sl, r0
				conv->altform_0c = true;
    eb02:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    eb06:	f043 0310 	orr.w	r3, r3, #16
    eb0a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    eb0e:	2378      	movs	r3, #120	; 0x78
    eb10:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    eb14:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    eb18:	e7ca      	b.n	eab0 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    eb1a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    eb1c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    eb20:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    eb24:	2b07      	cmp	r3, #7
    eb26:	d806      	bhi.n	eb36 <cbvprintf+0x85a>
    eb28:	e8df f003 	tbb	[pc, r3]
    eb2c:	100e0c04 	.word	0x100e0c04
    eb30:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    eb34:	6014      	str	r4, [r2, #0]
		char sign = 0;
    eb36:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    eb3a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    eb3e:	f04f 0a00 	mov.w	sl, #0
}
    eb42:	e019      	b.n	eb78 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    eb44:	7014      	strb	r4, [r2, #0]
		break;
    eb46:	e7f6      	b.n	eb36 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    eb48:	8014      	strh	r4, [r2, #0]
		break;
    eb4a:	e7f4      	b.n	eb36 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    eb4c:	6014      	str	r4, [r2, #0]
		break;
    eb4e:	e7f2      	b.n	eb36 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    eb50:	4620      	mov	r0, r4
    eb52:	17e1      	asrs	r1, r4, #31
    eb54:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    eb58:	e7ed      	b.n	eb36 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    eb5a:	4620      	mov	r0, r4
    eb5c:	17e1      	asrs	r1, r4, #31
    eb5e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    eb62:	e7e8      	b.n	eb36 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    eb64:	6014      	str	r4, [r2, #0]
		break;
    eb66:	e7e6      	b.n	eb36 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    eb68:	6014      	str	r4, [r2, #0]
		break;
    eb6a:	e7e4      	b.n	eb36 <cbvprintf+0x85a>
		switch (conv->specifier) {
    eb6c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    eb70:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    eb74:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    eb78:	f1ba 0f00 	cmp.w	sl, #0
    eb7c:	f000 808e 	beq.w	ec9c <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    eb80:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    eb84:	f1b9 0f00 	cmp.w	r9, #0
    eb88:	d000      	beq.n	eb8c <cbvprintf+0x8b0>
			nj_len += 1U;
    eb8a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    eb8c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    eb90:	f011 0f10 	tst.w	r1, #16
    eb94:	d026      	beq.n	ebe4 <cbvprintf+0x908>
			nj_len += 2U;
    eb96:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    eb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb9a:	4413      	add	r3, r2
		if (conv->pad_fp) {
    eb9c:	f011 0f40 	tst.w	r1, #64	; 0x40
    eba0:	d001      	beq.n	eba6 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    eba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eba4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    eba6:	2f00      	cmp	r7, #0
    eba8:	dd32      	ble.n	ec10 <cbvprintf+0x934>
			width -= (int)nj_len;
    ebaa:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    ebac:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ebb0:	f013 0f04 	tst.w	r3, #4
    ebb4:	d12c      	bne.n	ec10 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    ebb6:	f013 0f40 	tst.w	r3, #64	; 0x40
    ebba:	d018      	beq.n	ebee <cbvprintf+0x912>
					if (sign != 0) {
    ebbc:	f1b9 0f00 	cmp.w	r9, #0
    ebc0:	d018      	beq.n	ebf4 <cbvprintf+0x918>
						OUTC(sign);
    ebc2:	4629      	mov	r1, r5
    ebc4:	4648      	mov	r0, r9
    ebc6:	47b0      	blx	r6
    ebc8:	2800      	cmp	r0, #0
    ebca:	db6b      	blt.n	eca4 <cbvprintf+0x9c8>
    ebcc:	3401      	adds	r4, #1
						sign = 0;
    ebce:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    ebd2:	2330      	movs	r3, #48	; 0x30
    ebd4:	9302      	str	r3, [sp, #8]
    ebd6:	e00f      	b.n	ebf8 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    ebd8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    ebdc:	e7cc      	b.n	eb78 <cbvprintf+0x89c>
    ebde:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    ebe2:	e7c9      	b.n	eb78 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    ebe4:	f011 0f08 	tst.w	r1, #8
    ebe8:	d0d6      	beq.n	eb98 <cbvprintf+0x8bc>
			nj_len += 1U;
    ebea:	3201      	adds	r2, #1
    ebec:	e7d4      	b.n	eb98 <cbvprintf+0x8bc>
				char pad = ' ';
    ebee:	2320      	movs	r3, #32
    ebf0:	9302      	str	r3, [sp, #8]
    ebf2:	e001      	b.n	ebf8 <cbvprintf+0x91c>
					pad = '0';
    ebf4:	2330      	movs	r3, #48	; 0x30
    ebf6:	9302      	str	r3, [sp, #8]
    ebf8:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    ebfa:	1e5f      	subs	r7, r3, #1
    ebfc:	2b00      	cmp	r3, #0
    ebfe:	dd07      	ble.n	ec10 <cbvprintf+0x934>
					OUTC(pad);
    ec00:	4629      	mov	r1, r5
    ec02:	9802      	ldr	r0, [sp, #8]
    ec04:	47b0      	blx	r6
    ec06:	2800      	cmp	r0, #0
    ec08:	db4c      	blt.n	eca4 <cbvprintf+0x9c8>
    ec0a:	3401      	adds	r4, #1
				while (width-- > 0) {
    ec0c:	463b      	mov	r3, r7
    ec0e:	e7f4      	b.n	ebfa <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    ec10:	f1b9 0f00 	cmp.w	r9, #0
    ec14:	d005      	beq.n	ec22 <cbvprintf+0x946>
			OUTC(sign);
    ec16:	4629      	mov	r1, r5
    ec18:	4648      	mov	r0, r9
    ec1a:	47b0      	blx	r6
    ec1c:	2800      	cmp	r0, #0
    ec1e:	db41      	blt.n	eca4 <cbvprintf+0x9c8>
    ec20:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    ec22:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ec26:	f3c3 1200 	ubfx	r2, r3, #4, #1
    ec2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ec2e:	4313      	orrs	r3, r2
    ec30:	d005      	beq.n	ec3e <cbvprintf+0x962>
				OUTC('0');
    ec32:	4629      	mov	r1, r5
    ec34:	2030      	movs	r0, #48	; 0x30
    ec36:	47b0      	blx	r6
    ec38:	2800      	cmp	r0, #0
    ec3a:	db33      	blt.n	eca4 <cbvprintf+0x9c8>
    ec3c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    ec3e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ec42:	f013 0f10 	tst.w	r3, #16
    ec46:	d006      	beq.n	ec56 <cbvprintf+0x97a>
				OUTC(conv->specifier);
    ec48:	4629      	mov	r1, r5
    ec4a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    ec4e:	47b0      	blx	r6
    ec50:	2800      	cmp	r0, #0
    ec52:	db27      	blt.n	eca4 <cbvprintf+0x9c8>
    ec54:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    ec56:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    ec58:	f103 39ff 	add.w	r9, r3, #4294967295
    ec5c:	2b00      	cmp	r3, #0
    ec5e:	dd07      	ble.n	ec70 <cbvprintf+0x994>
				OUTC('0');
    ec60:	4629      	mov	r1, r5
    ec62:	2030      	movs	r0, #48	; 0x30
    ec64:	47b0      	blx	r6
    ec66:	2800      	cmp	r0, #0
    ec68:	db1c      	blt.n	eca4 <cbvprintf+0x9c8>
    ec6a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    ec6c:	464b      	mov	r3, r9
    ec6e:	e7f3      	b.n	ec58 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    ec70:	465b      	mov	r3, fp
    ec72:	4652      	mov	r2, sl
    ec74:	4629      	mov	r1, r5
    ec76:	4630      	mov	r0, r6
    ec78:	f00b faa7 	bl	1a1ca <outs>
    ec7c:	2800      	cmp	r0, #0
    ec7e:	db11      	blt.n	eca4 <cbvprintf+0x9c8>
    ec80:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    ec82:	2f00      	cmp	r7, #0
    ec84:	dd07      	ble.n	ec96 <cbvprintf+0x9ba>
			OUTC(' ');
    ec86:	4629      	mov	r1, r5
    ec88:	2020      	movs	r0, #32
    ec8a:	47b0      	blx	r6
    ec8c:	2800      	cmp	r0, #0
    ec8e:	db09      	blt.n	eca4 <cbvprintf+0x9c8>
    ec90:	3401      	adds	r4, #1
			--width;
    ec92:	3f01      	subs	r7, #1
    ec94:	e7f5      	b.n	ec82 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    ec96:	46c2      	mov	sl, r8
    ec98:	f7ff bb28 	b.w	e2ec <cbvprintf+0x10>
    ec9c:	46c2      	mov	sl, r8
    ec9e:	f7ff bb25 	b.w	e2ec <cbvprintf+0x10>
		}
	}

	return count;
    eca2:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    eca4:	b013      	add	sp, #76	; 0x4c
    eca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecaa:	bf00      	nop
    ecac:	0001cf21 	.word	0x0001cf21

0000ecb0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    ecb0:	b508      	push	{r3, lr}
    ecb2:	f04f 0240 	mov.w	r2, #64	; 0x40
    ecb6:	f3ef 8311 	mrs	r3, BASEPRI
    ecba:	f382 8812 	msr	BASEPRI_MAX, r2
    ecbe:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    ecc2:	f002 f839 	bl	10d38 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    ecc6:	4803      	ldr	r0, [pc, #12]	; (ecd4 <sys_reboot+0x24>)
    ecc8:	f00a fea0 	bl	19a0c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    eccc:	f001 f8e6 	bl	fe9c <arch_cpu_idle>
    ecd0:	e7fc      	b.n	eccc <sys_reboot+0x1c>
    ecd2:	bf00      	nop
    ecd4:	0001cf24 	.word	0x0001cf24

0000ecd8 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    ecd8:	4b05      	ldr	r3, [pc, #20]	; (ecf0 <is_rodata+0x18>)
    ecda:	4298      	cmp	r0, r3
    ecdc:	d304      	bcc.n	ece8 <is_rodata+0x10>
    ecde:	4b05      	ldr	r3, [pc, #20]	; (ecf4 <is_rodata+0x1c>)
    ece0:	4298      	cmp	r0, r3
    ece2:	d303      	bcc.n	ecec <is_rodata+0x14>
    ece4:	2000      	movs	r0, #0
    ece6:	4770      	bx	lr
    ece8:	2000      	movs	r0, #0
    ecea:	4770      	bx	lr
    ecec:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    ecee:	4770      	bx	lr
    ecf0:	0001c96c 	.word	0x0001c96c
    ecf4:	0001e234 	.word	0x0001e234

0000ecf8 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    ecf8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    ecfa:	4b06      	ldr	r3, [pc, #24]	; (ed14 <thread_set+0x1c>)
    ecfc:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ecfe:	b118      	cbz	r0, ed08 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ed00:	4b05      	ldr	r3, [pc, #20]	; (ed18 <thread_set+0x20>)
    ed02:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    ed04:	2b09      	cmp	r3, #9
    ed06:	dc00      	bgt.n	ed0a <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    ed08:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ed0a:	4804      	ldr	r0, [pc, #16]	; (ed1c <thread_set+0x24>)
    ed0c:	f006 fe70 	bl	159f0 <z_impl_k_sem_give>
}
    ed10:	e7fa      	b.n	ed08 <thread_set+0x10>
    ed12:	bf00      	nop
    ed14:	20001a44 	.word	0x20001a44
    ed18:	20001a14 	.word	0x20001a14
    ed1c:	200005b0 	.word	0x200005b0

0000ed20 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    ed20:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    ed22:	4802      	ldr	r0, [pc, #8]	; (ed2c <log_process_thread_timer_expiry_fn+0xc>)
    ed24:	f006 fe64 	bl	159f0 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    ed28:	bd08      	pop	{r3, pc}
    ed2a:	bf00      	nop
    ed2c:	200005b0 	.word	0x200005b0

0000ed30 <next_pending>:
{
    ed30:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    ed32:	4803      	ldr	r0, [pc, #12]	; (ed40 <next_pending+0x10>)
    ed34:	f00b fa72 	bl	1a21c <log_list_head_peek>
}
    ed38:	3800      	subs	r0, #0
    ed3a:	bf18      	it	ne
    ed3c:	2001      	movne	r0, #1
    ed3e:	bd08      	pop	{r3, pc}
    ed40:	20001a20 	.word	0x20001a20

0000ed44 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    ed44:	b530      	push	{r4, r5, lr}
    ed46:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    ed48:	2200      	movs	r2, #0
    ed4a:	490f      	ldr	r1, [pc, #60]	; (ed88 <enable_logger+0x44>)
    ed4c:	480f      	ldr	r0, [pc, #60]	; (ed8c <enable_logger+0x48>)
    ed4e:	f00d fd39 	bl	1c7c4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ed52:	4d0f      	ldr	r5, [pc, #60]	; (ed90 <enable_logger+0x4c>)
    ed54:	2200      	movs	r2, #0
    ed56:	2300      	movs	r3, #0
    ed58:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ed5c:	2400      	movs	r4, #0
    ed5e:	9404      	str	r4, [sp, #16]
    ed60:	230e      	movs	r3, #14
    ed62:	9303      	str	r3, [sp, #12]
    ed64:	9402      	str	r4, [sp, #8]
    ed66:	9401      	str	r4, [sp, #4]
    ed68:	9400      	str	r4, [sp, #0]
    ed6a:	4b0a      	ldr	r3, [pc, #40]	; (ed94 <enable_logger+0x50>)
    ed6c:	f44f 7240 	mov.w	r2, #768	; 0x300
    ed70:	4909      	ldr	r1, [pc, #36]	; (ed98 <enable_logger+0x54>)
    ed72:	4628      	mov	r0, r5
    ed74:	f00d f919 	bl	1bfaa <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ed78:	4908      	ldr	r1, [pc, #32]	; (ed9c <enable_logger+0x58>)
    ed7a:	4628      	mov	r0, r5
    ed7c:	f006 fc40 	bl	15600 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    ed80:	4620      	mov	r0, r4
    ed82:	b009      	add	sp, #36	; 0x24
    ed84:	bd30      	pop	{r4, r5, pc}
    ed86:	bf00      	nop
    ed88:	0000ed21 	.word	0x0000ed21
    ed8c:	200013a0 	.word	0x200013a0
    ed90:	200013d8 	.word	0x200013d8
    ed94:	0000f485 	.word	0x0000f485
    ed98:	20002f60 	.word	0x20002f60
    ed9c:	0001cf50 	.word	0x0001cf50

0000eda0 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    eda0:	4b18      	ldr	r3, [pc, #96]	; (ee04 <log_init+0x64>)
    eda2:	f3bf 8f5b 	dmb	ish
    eda6:	e853 2f00 	ldrex	r2, [r3]
    edaa:	1c51      	adds	r1, r2, #1
    edac:	e843 1000 	strex	r0, r1, [r3]
    edb0:	2800      	cmp	r0, #0
    edb2:	d1f8      	bne.n	eda6 <log_init+0x6>
    edb4:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    edb8:	bb1a      	cbnz	r2, ee02 <log_init+0x62>
{
    edba:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    edbc:	2400      	movs	r4, #0
    edbe:	e009      	b.n	edd4 <log_init+0x34>
					   backend->cb->ctx,
    edc0:	4b11      	ldr	r3, [pc, #68]	; (ee08 <log_init+0x68>)
    edc2:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    edc6:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    edc8:	2204      	movs	r2, #4
    edca:	6819      	ldr	r1, [r3, #0]
    edcc:	4628      	mov	r0, r5
    edce:	f000 fb9d 	bl	f50c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    edd2:	3401      	adds	r4, #1
    edd4:	4b0d      	ldr	r3, [pc, #52]	; (ee0c <log_init+0x6c>)
    edd6:	4a0c      	ldr	r2, [pc, #48]	; (ee08 <log_init+0x68>)
    edd8:	1a9b      	subs	r3, r3, r2
    edda:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    edde:	da0f      	bge.n	ee00 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    ede0:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    ede2:	4d09      	ldr	r5, [pc, #36]	; (ee08 <log_init+0x68>)
    ede4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    ede8:	7b2b      	ldrb	r3, [r5, #12]
    edea:	2b00      	cmp	r3, #0
    edec:	d0f1      	beq.n	edd2 <log_init+0x32>
			if (backend->api->init != NULL) {
    edee:	0123      	lsls	r3, r4, #4
    edf0:	4a05      	ldr	r2, [pc, #20]	; (ee08 <log_init+0x68>)
    edf2:	58d3      	ldr	r3, [r2, r3]
    edf4:	699b      	ldr	r3, [r3, #24]
    edf6:	2b00      	cmp	r3, #0
    edf8:	d0e2      	beq.n	edc0 <log_init+0x20>
				backend->api->init(backend);
    edfa:	4628      	mov	r0, r5
    edfc:	4798      	blx	r3
    edfe:	e7df      	b.n	edc0 <log_init+0x20>
}
    ee00:	bd70      	pop	{r4, r5, r6, pc}
    ee02:	4770      	bx	lr
    ee04:	20001a1c 	.word	0x20001a1c
    ee08:	0001ccd4 	.word	0x0001ccd4
    ee0c:	0001cce4 	.word	0x0001cce4

0000ee10 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    ee10:	b138      	cbz	r0, ee22 <log_set_timestamp_func+0x12>
{
    ee12:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    ee14:	4a04      	ldr	r2, [pc, #16]	; (ee28 <log_set_timestamp_func+0x18>)
    ee16:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    ee18:	4608      	mov	r0, r1
    ee1a:	f000 fdef 	bl	f9fc <log_output_timestamp_freq_set>
	return 0;
    ee1e:	2000      	movs	r0, #0
}
    ee20:	bd08      	pop	{r3, pc}
		return -EINVAL;
    ee22:	f06f 0015 	mvn.w	r0, #21
}
    ee26:	4770      	bx	lr
    ee28:	200003c4 	.word	0x200003c4

0000ee2c <log_core_init>:
{
    ee2c:	b508      	push	{r3, lr}
	panic_mode = false;
    ee2e:	2300      	movs	r3, #0
    ee30:	4a0a      	ldr	r2, [pc, #40]	; (ee5c <log_core_init+0x30>)
    ee32:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    ee34:	4a0a      	ldr	r2, [pc, #40]	; (ee60 <log_core_init+0x34>)
    ee36:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    ee38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ee3c:	4809      	ldr	r0, [pc, #36]	; (ee64 <log_core_init+0x38>)
    ee3e:	f7ff ffe7 	bl	ee10 <log_set_timestamp_func>
		log_msg_pool_init();
    ee42:	f000 fb85 	bl	f550 <log_msg_pool_init>
		log_list_init(&list);
    ee46:	4808      	ldr	r0, [pc, #32]	; (ee68 <log_core_init+0x3c>)
    ee48:	f00b f9da 	bl	1a200 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    ee4c:	2308      	movs	r3, #8
    ee4e:	2248      	movs	r2, #72	; 0x48
    ee50:	4906      	ldr	r1, [pc, #24]	; (ee6c <log_core_init+0x40>)
    ee52:	4807      	ldr	r0, [pc, #28]	; (ee70 <log_core_init+0x44>)
    ee54:	f00d f846 	bl	1bee4 <k_mem_slab_init>
}
    ee58:	bd08      	pop	{r3, pc}
    ee5a:	bf00      	nop
    ee5c:	20002d8d 	.word	0x20002d8d
    ee60:	20001a18 	.word	0x20001a18
    ee64:	0001a235 	.word	0x0001a235
    ee68:	20001a20 	.word	0x20001a20
    ee6c:	20005ec0 	.word	0x20005ec0
    ee70:	20001a28 	.word	0x20001a28

0000ee74 <get_msg>:
{
    ee74:	b510      	push	{r4, lr}
    ee76:	f04f 0340 	mov.w	r3, #64	; 0x40
    ee7a:	f3ef 8411 	mrs	r4, BASEPRI
    ee7e:	f383 8812 	msr	BASEPRI_MAX, r3
    ee82:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    ee86:	4804      	ldr	r0, [pc, #16]	; (ee98 <get_msg+0x24>)
    ee88:	f00b f9ca 	bl	1a220 <log_list_head_get>
	__asm__ volatile(
    ee8c:	f384 8811 	msr	BASEPRI, r4
    ee90:	f3bf 8f6f 	isb	sy
}
    ee94:	bd10      	pop	{r4, pc}
    ee96:	bf00      	nop
    ee98:	20001a20 	.word	0x20001a20

0000ee9c <z_log_notify_backend_enabled>:
{
    ee9c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    ee9e:	4b05      	ldr	r3, [pc, #20]	; (eeb4 <z_log_notify_backend_enabled+0x18>)
    eea0:	781b      	ldrb	r3, [r3, #0]
    eea2:	b11b      	cbz	r3, eeac <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    eea4:	4b03      	ldr	r3, [pc, #12]	; (eeb4 <z_log_notify_backend_enabled+0x18>)
    eea6:	2201      	movs	r2, #1
    eea8:	701a      	strb	r2, [r3, #0]
}
    eeaa:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    eeac:	4802      	ldr	r0, [pc, #8]	; (eeb8 <z_log_notify_backend_enabled+0x1c>)
    eeae:	f006 fd9f 	bl	159f0 <z_impl_k_sem_give>
}
    eeb2:	e7f7      	b.n	eea4 <z_log_notify_backend_enabled+0x8>
    eeb4:	20002d8c 	.word	0x20002d8c
    eeb8:	200005b0 	.word	0x200005b0

0000eebc <z_log_dropped>:
    eebc:	4b0c      	ldr	r3, [pc, #48]	; (eef0 <z_log_dropped+0x34>)
    eebe:	f3bf 8f5b 	dmb	ish
    eec2:	e853 2f00 	ldrex	r2, [r3]
    eec6:	3201      	adds	r2, #1
    eec8:	e843 2100 	strex	r1, r2, [r3]
    eecc:	2900      	cmp	r1, #0
    eece:	d1f8      	bne.n	eec2 <z_log_dropped+0x6>
    eed0:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    eed4:	4b07      	ldr	r3, [pc, #28]	; (eef4 <z_log_dropped+0x38>)
    eed6:	f3bf 8f5b 	dmb	ish
    eeda:	e853 2f00 	ldrex	r2, [r3]
    eede:	3a01      	subs	r2, #1
    eee0:	e843 2100 	strex	r1, r2, [r3]
    eee4:	2900      	cmp	r1, #0
    eee6:	d1f8      	bne.n	eeda <z_log_dropped+0x1e>
    eee8:	f3bf 8f5b 	dmb	ish
}
    eeec:	4770      	bx	lr
    eeee:	bf00      	nop
    eef0:	20001a18 	.word	0x20001a18
    eef4:	20001a14 	.word	0x20001a14

0000eef8 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    eef8:	4b06      	ldr	r3, [pc, #24]	; (ef14 <z_log_dropped_read_and_clear+0x1c>)
}
    eefa:	2000      	movs	r0, #0
    eefc:	4602      	mov	r2, r0
    eefe:	f3bf 8f5b 	dmb	ish
    ef02:	e853 0f00 	ldrex	r0, [r3]
    ef06:	e843 2100 	strex	r1, r2, [r3]
    ef0a:	2900      	cmp	r1, #0
    ef0c:	d1f9      	bne.n	ef02 <z_log_dropped_read_and_clear+0xa>
    ef0e:	f3bf 8f5b 	dmb	ish
    ef12:	4770      	bx	lr
    ef14:	20001a18 	.word	0x20001a18

0000ef18 <dropped_notify>:
{
    ef18:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    ef1a:	f7ff ffed 	bl	eef8 <z_log_dropped_read_and_clear>
    ef1e:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    ef20:	2400      	movs	r4, #0
    ef22:	e000      	b.n	ef26 <dropped_notify+0xe>
    ef24:	3401      	adds	r4, #1
    ef26:	4b0b      	ldr	r3, [pc, #44]	; (ef54 <dropped_notify+0x3c>)
    ef28:	4a0b      	ldr	r2, [pc, #44]	; (ef58 <dropped_notify+0x40>)
    ef2a:	1a9b      	subs	r3, r3, r2
    ef2c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    ef30:	da0f      	bge.n	ef52 <dropped_notify+0x3a>
    ef32:	4809      	ldr	r0, [pc, #36]	; (ef58 <dropped_notify+0x40>)
    ef34:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ef38:	6843      	ldr	r3, [r0, #4]
    ef3a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    ef3c:	2b00      	cmp	r3, #0
    ef3e:	d0f1      	beq.n	ef24 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    ef40:	0123      	lsls	r3, r4, #4
    ef42:	4a05      	ldr	r2, [pc, #20]	; (ef58 <dropped_notify+0x40>)
    ef44:	58d3      	ldr	r3, [r2, r3]
    ef46:	691b      	ldr	r3, [r3, #16]
    ef48:	2b00      	cmp	r3, #0
    ef4a:	d0eb      	beq.n	ef24 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    ef4c:	4629      	mov	r1, r5
    ef4e:	4798      	blx	r3
    ef50:	e7e8      	b.n	ef24 <dropped_notify+0xc>
}
    ef52:	bd38      	pop	{r3, r4, r5, pc}
    ef54:	0001cce4 	.word	0x0001cce4
    ef58:	0001ccd4 	.word	0x0001ccd4

0000ef5c <z_log_dropped_pending>:
	return dropped_cnt > 0;
    ef5c:	4b03      	ldr	r3, [pc, #12]	; (ef6c <z_log_dropped_pending+0x10>)
    ef5e:	6818      	ldr	r0, [r3, #0]
}
    ef60:	2800      	cmp	r0, #0
    ef62:	bfd4      	ite	le
    ef64:	2000      	movle	r0, #0
    ef66:	2001      	movgt	r0, #1
    ef68:	4770      	bx	lr
    ef6a:	bf00      	nop
    ef6c:	20001a18 	.word	0x20001a18

0000ef70 <z_log_strdup>:
{
    ef70:	b510      	push	{r4, lr}
    ef72:	b082      	sub	sp, #8
    ef74:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    ef76:	f7ff feaf 	bl	ecd8 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    ef7a:	bb10      	cbnz	r0, efc2 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    ef7c:	2200      	movs	r2, #0
    ef7e:	2300      	movs	r3, #0
    ef80:	a901      	add	r1, sp, #4
    ef82:	4811      	ldr	r0, [pc, #68]	; (efc8 <z_log_strdup+0x58>)
    ef84:	f006 fae6 	bl	15554 <k_mem_slab_alloc>
	if (err != 0) {
    ef88:	b108      	cbz	r0, ef8e <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    ef8a:	4c10      	ldr	r4, [pc, #64]	; (efcc <z_log_strdup+0x5c>)
    ef8c:	e019      	b.n	efc2 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    ef8e:	9b01      	ldr	r3, [sp, #4]
    ef90:	2201      	movs	r2, #1
    ef92:	f3bf 8f5b 	dmb	ish
    ef96:	e853 1f00 	ldrex	r1, [r3]
    ef9a:	e843 2000 	strex	r0, r2, [r3]
    ef9e:	2800      	cmp	r0, #0
    efa0:	d1f9      	bne.n	ef96 <z_log_strdup+0x26>
    efa2:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    efa6:	2241      	movs	r2, #65	; 0x41
    efa8:	4621      	mov	r1, r4
    efaa:	9801      	ldr	r0, [sp, #4]
    efac:	3004      	adds	r0, #4
    efae:	f00b fd55 	bl	1aa5c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    efb2:	9c01      	ldr	r4, [sp, #4]
    efb4:	237e      	movs	r3, #126	; 0x7e
    efb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    efba:	2300      	movs	r3, #0
    efbc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	return dup->buf;
    efc0:	3404      	adds	r4, #4
}
    efc2:	4620      	mov	r0, r4
    efc4:	b002      	add	sp, #8
    efc6:	bd10      	pop	{r4, pc}
    efc8:	20001a28 	.word	0x20001a28
    efcc:	0001cf58 	.word	0x0001cf58

0000efd0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    efd0:	b140      	cbz	r0, efe4 <log_is_strdup+0x14>
    efd2:	4a07      	ldr	r2, [pc, #28]	; (eff0 <log_is_strdup+0x20>)
    efd4:	4290      	cmp	r0, r2
    efd6:	d307      	bcc.n	efe8 <log_is_strdup+0x18>
    efd8:	f502 7210 	add.w	r2, r2, #576	; 0x240
    efdc:	4290      	cmp	r0, r2
    efde:	d305      	bcc.n	efec <log_is_strdup+0x1c>
    efe0:	2000      	movs	r0, #0
    efe2:	4770      	bx	lr
    efe4:	2000      	movs	r0, #0
    efe6:	4770      	bx	lr
    efe8:	2000      	movs	r0, #0
    efea:	4770      	bx	lr
    efec:	2001      	movs	r0, #1
}
    efee:	4770      	bx	lr
    eff0:	20005ec0 	.word	0x20005ec0

0000eff4 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    eff4:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    eff6:	f013 0f01 	tst.w	r3, #1
    effa:	d000      	beq.n	effe <detect_missed_strdup+0xa>
    effc:	4770      	bx	lr
{
    effe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f002:	b083      	sub	sp, #12
    f004:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    f006:	f00b f9f8 	bl	1a3fa <log_msg_str_get>
    f00a:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    f00c:	4630      	mov	r0, r6
    f00e:	f00b f9df 	bl	1a3d0 <log_msg_nargs_get>
    f012:	4601      	mov	r1, r0
    f014:	4638      	mov	r0, r7
    f016:	f00b f911 	bl	1a23c <z_log_get_s_mask>
    f01a:	4605      	mov	r5, r0
	while (mask) {
    f01c:	e004      	b.n	f028 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    f01e:	2301      	movs	r3, #1
    f020:	fa03 f404 	lsl.w	r4, r3, r4
    f024:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    f028:	b36d      	cbz	r5, f086 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    f02a:	fab5 f485 	clz	r4, r5
    f02e:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    f032:	4621      	mov	r1, r4
    f034:	4630      	mov	r0, r6
    f036:	f00b f9ce 	bl	1a3d6 <log_msg_arg_get>
    f03a:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    f03c:	f7ff fe4c 	bl	ecd8 <is_rodata>
    f040:	2800      	cmp	r0, #0
    f042:	d1ec      	bne.n	f01e <detect_missed_strdup+0x2a>
    f044:	4648      	mov	r0, r9
    f046:	f7ff ffc3 	bl	efd0 <log_is_strdup>
    f04a:	2800      	cmp	r0, #0
    f04c:	d1e7      	bne.n	f01e <detect_missed_strdup+0x2a>
    f04e:	4b0f      	ldr	r3, [pc, #60]	; (f08c <detect_missed_strdup+0x98>)
    f050:	4599      	cmp	r9, r3
    f052:	d0e4      	beq.n	f01e <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    f054:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    f056:	f3c1 1189 	ubfx	r1, r1, #6, #10
    f05a:	f000 fa47 	bl	f4ec <log_source_name_get>
    f05e:	4602      	mov	r2, r0
    f060:	4b0b      	ldr	r3, [pc, #44]	; (f090 <detect_missed_strdup+0x9c>)
    f062:	490c      	ldr	r1, [pc, #48]	; (f094 <detect_missed_strdup+0xa0>)
    f064:	1a5b      	subs	r3, r3, r1
    f066:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    f068:	2101      	movs	r1, #1
    f06a:	f361 0802 	bfi	r8, r1, #0, #3
    f06e:	f36f 08c5 	bfc	r8, #3, #3
    f072:	f363 188f 	bfi	r8, r3, #6, #10
    f076:	f8ad 8000 	strh.w	r8, [sp]
    f07a:	463b      	mov	r3, r7
    f07c:	4621      	mov	r1, r4
    f07e:	4806      	ldr	r0, [pc, #24]	; (f098 <detect_missed_strdup+0xa4>)
    f080:	f000 f8b0 	bl	f1e4 <log_3>
    f084:	e7cb      	b.n	f01e <detect_missed_strdup+0x2a>
}
    f086:	b003      	add	sp, #12
    f088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f08c:	0001cf58 	.word	0x0001cf58
    f090:	0001cc74 	.word	0x0001cc74
    f094:	0001cc2c 	.word	0x0001cc2c
    f098:	0001cf74 	.word	0x0001cf74

0000f09c <msg_process>:
{
    f09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f09e:	4606      	mov	r6, r0
	if (!bypass) {
    f0a0:	bb19      	cbnz	r1, f0ea <msg_process+0x4e>
		    !panic_mode) {
    f0a2:	4b14      	ldr	r3, [pc, #80]	; (f0f4 <msg_process+0x58>)
    f0a4:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    f0a6:	b10b      	cbz	r3, f0ac <msg_process+0x10>
{
    f0a8:	2400      	movs	r4, #0
    f0aa:	e003      	b.n	f0b4 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    f0ac:	f7ff ffa2 	bl	eff4 <detect_missed_strdup>
    f0b0:	e7fa      	b.n	f0a8 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    f0b2:	3401      	adds	r4, #1
    f0b4:	4b10      	ldr	r3, [pc, #64]	; (f0f8 <msg_process+0x5c>)
    f0b6:	4a11      	ldr	r2, [pc, #68]	; (f0fc <msg_process+0x60>)
    f0b8:	1a9b      	subs	r3, r3, r2
    f0ba:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    f0be:	da14      	bge.n	f0ea <msg_process+0x4e>
	return &__log_backends_start[idx];
    f0c0:	4d0e      	ldr	r5, [pc, #56]	; (f0fc <msg_process+0x60>)
    f0c2:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    f0c6:	686b      	ldr	r3, [r5, #4]
    f0c8:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    f0ca:	2b00      	cmp	r3, #0
    f0cc:	d0f1      	beq.n	f0b2 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    f0ce:	4631      	mov	r1, r6
    f0d0:	4628      	mov	r0, r5
    f0d2:	f00b f8ad 	bl	1a230 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    f0d6:	2800      	cmp	r0, #0
    f0d8:	d0eb      	beq.n	f0b2 <msg_process+0x16>
	backend->api->put(backend, msg);
    f0da:	0127      	lsls	r7, r4, #4
    f0dc:	4b07      	ldr	r3, [pc, #28]	; (f0fc <msg_process+0x60>)
    f0de:	59db      	ldr	r3, [r3, r7]
    f0e0:	685b      	ldr	r3, [r3, #4]
    f0e2:	4631      	mov	r1, r6
    f0e4:	4628      	mov	r0, r5
    f0e6:	4798      	blx	r3
}
    f0e8:	e7e3      	b.n	f0b2 <msg_process+0x16>
			log_msg_put(msg.msg);
    f0ea:	4630      	mov	r0, r6
    f0ec:	f00b f987 	bl	1a3fe <log_msg_put>
}
    f0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0f2:	bf00      	nop
    f0f4:	20002d8d 	.word	0x20002d8d
    f0f8:	0001cce4 	.word	0x0001cce4
    f0fc:	0001ccd4 	.word	0x0001ccd4

0000f100 <z_impl_log_process>:
{
    f100:	b510      	push	{r4, lr}
    f102:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    f104:	4b11      	ldr	r3, [pc, #68]	; (f14c <z_impl_log_process+0x4c>)
    f106:	781b      	ldrb	r3, [r3, #0]
    f108:	b903      	cbnz	r3, f10c <z_impl_log_process+0xc>
    f10a:	b1d0      	cbz	r0, f142 <z_impl_log_process+0x42>
	msg = get_msg();
    f10c:	f7ff feb2 	bl	ee74 <get_msg>
	if (msg.msg) {
    f110:	4603      	mov	r3, r0
    f112:	b180      	cbz	r0, f136 <z_impl_log_process+0x36>
		if (!bypass) {
    f114:	b95c      	cbnz	r4, f12e <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f116:	4a0e      	ldr	r2, [pc, #56]	; (f150 <z_impl_log_process+0x50>)
    f118:	f3bf 8f5b 	dmb	ish
    f11c:	e852 1f00 	ldrex	r1, [r2]
    f120:	3901      	subs	r1, #1
    f122:	e842 1000 	strex	r0, r1, [r2]
    f126:	2800      	cmp	r0, #0
    f128:	d1f8      	bne.n	f11c <z_impl_log_process+0x1c>
    f12a:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    f12e:	4621      	mov	r1, r4
    f130:	4618      	mov	r0, r3
    f132:	f7ff ffb3 	bl	f09c <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    f136:	b914      	cbnz	r4, f13e <z_impl_log_process+0x3e>
    f138:	f7ff ff10 	bl	ef5c <z_log_dropped_pending>
    f13c:	b910      	cbnz	r0, f144 <z_impl_log_process+0x44>
	return next_pending();
    f13e:	f7ff fdf7 	bl	ed30 <next_pending>
}
    f142:	bd10      	pop	{r4, pc}
		dropped_notify();
    f144:	f7ff fee8 	bl	ef18 <dropped_notify>
    f148:	e7f9      	b.n	f13e <z_impl_log_process+0x3e>
    f14a:	bf00      	nop
    f14c:	20002d8c 	.word	0x20002d8c
    f150:	20001a14 	.word	0x20001a14

0000f154 <z_log_msg_post_finalize>:
{
    f154:	b510      	push	{r4, lr}
    f156:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    f158:	4b1d      	ldr	r3, [pc, #116]	; (f1d0 <z_log_msg_post_finalize+0x7c>)
    f15a:	f3bf 8f5b 	dmb	ish
    f15e:	e853 2f00 	ldrex	r2, [r3]
    f162:	1c51      	adds	r1, r2, #1
    f164:	e843 1000 	strex	r0, r1, [r3]
    f168:	2800      	cmp	r0, #0
    f16a:	d1f8      	bne.n	f15e <z_log_msg_post_finalize+0xa>
    f16c:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    f170:	4b18      	ldr	r3, [pc, #96]	; (f1d4 <z_log_msg_post_finalize+0x80>)
    f172:	781b      	ldrb	r3, [r3, #0]
    f174:	b93b      	cbnz	r3, f186 <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
    f176:	4b18      	ldr	r3, [pc, #96]	; (f1d8 <z_log_msg_post_finalize+0x84>)
    f178:	681b      	ldr	r3, [r3, #0]
    f17a:	b103      	cbz	r3, f17e <z_log_msg_post_finalize+0x2a>
    f17c:	b19a      	cbz	r2, f1a6 <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    f17e:	2a0a      	cmp	r2, #10
    f180:	d01c      	beq.n	f1bc <z_log_msg_post_finalize+0x68>
}
    f182:	b002      	add	sp, #8
    f184:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    f186:	f04f 0340 	mov.w	r3, #64	; 0x40
    f18a:	f3ef 8411 	mrs	r4, BASEPRI
    f18e:	f383 8812 	msr	BASEPRI_MAX, r3
    f192:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    f196:	2000      	movs	r0, #0
    f198:	f7ff ffb2 	bl	f100 <z_impl_log_process>
	__asm__ volatile(
    f19c:	f384 8811 	msr	BASEPRI, r4
    f1a0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    f1a4:	e7ed      	b.n	f182 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
    f1a6:	2200      	movs	r2, #0
    f1a8:	2300      	movs	r3, #0
    f1aa:	e9cd 2300 	strd	r2, r3, [sp]
    f1ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    f1b2:	2300      	movs	r3, #0
    f1b4:	4809      	ldr	r0, [pc, #36]	; (f1dc <z_log_msg_post_finalize+0x88>)
    f1b6:	f007 fbe3 	bl	16980 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    f1ba:	e7e2      	b.n	f182 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    f1bc:	2b00      	cmp	r3, #0
    f1be:	d0e0      	beq.n	f182 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
    f1c0:	4806      	ldr	r0, [pc, #24]	; (f1dc <z_log_msg_post_finalize+0x88>)
    f1c2:	f00d fb0b 	bl	1c7dc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    f1c6:	4806      	ldr	r0, [pc, #24]	; (f1e0 <z_log_msg_post_finalize+0x8c>)
    f1c8:	f006 fc12 	bl	159f0 <z_impl_k_sem_give>
}
    f1cc:	e7d9      	b.n	f182 <z_log_msg_post_finalize+0x2e>
    f1ce:	bf00      	nop
    f1d0:	20001a14 	.word	0x20001a14
    f1d4:	20002d8d 	.word	0x20002d8d
    f1d8:	20001a44 	.word	0x20001a44
    f1dc:	200013a0 	.word	0x200013a0
    f1e0:	200005b0 	.word	0x200005b0

0000f1e4 <log_3>:
{
    f1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1e8:	4680      	mov	r8, r0
    f1ea:	460f      	mov	r7, r1
    f1ec:	4616      	mov	r6, r2
    f1ee:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    f1f0:	f000 f9d2 	bl	f598 <log_msg_chunk_alloc>

	if (msg != NULL) {
    f1f4:	4604      	mov	r4, r0
    f1f6:	b140      	cbz	r0, f20a <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    f1f8:	2301      	movs	r3, #1
    f1fa:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    f1fc:	2200      	movs	r2, #0
    f1fe:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    f200:	f04f 0300 	mov.w	r3, #0
    f204:	f362 0300 	bfi	r3, r2, #0, #1
    f208:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    f20a:	b14c      	cbz	r4, f220 <log_3+0x3c>
		msg->str = str;
    f20c:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    f210:	7a63      	ldrb	r3, [r4, #9]
    f212:	2203      	movs	r2, #3
    f214:	f362 1307 	bfi	r3, r2, #4, #4
    f218:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    f21a:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    f21c:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    f21e:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    f220:	b1c4      	cbz	r4, f254 <log_3+0x70>
	msg->hdr.ids = src_level;
    f222:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f226:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    f228:	4b0b      	ldr	r3, [pc, #44]	; (f258 <log_3+0x74>)
    f22a:	681b      	ldr	r3, [r3, #0]
    f22c:	4798      	blx	r3
    f22e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    f230:	f04f 0340 	mov.w	r3, #64	; 0x40
    f234:	f3ef 8511 	mrs	r5, BASEPRI
    f238:	f383 8812 	msr	BASEPRI_MAX, r3
    f23c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f240:	4621      	mov	r1, r4
    f242:	4806      	ldr	r0, [pc, #24]	; (f25c <log_3+0x78>)
    f244:	f00a ffe0 	bl	1a208 <log_list_add_tail>
	__asm__ volatile(
    f248:	f385 8811 	msr	BASEPRI, r5
    f24c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    f250:	f7ff ff80 	bl	f154 <z_log_msg_post_finalize>
}
    f254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f258:	200003c4 	.word	0x200003c4
    f25c:	20001a20 	.word	0x20001a20

0000f260 <log_1>:
{
    f260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f262:	4606      	mov	r6, r0
    f264:	460d      	mov	r5, r1
    f266:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    f268:	f000 f996 	bl	f598 <log_msg_chunk_alloc>
	if (msg != NULL) {
    f26c:	4604      	mov	r4, r0
    f26e:	b140      	cbz	r0, f282 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    f270:	2301      	movs	r3, #1
    f272:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    f274:	2100      	movs	r1, #0
    f276:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    f278:	f04f 0300 	mov.w	r3, #0
    f27c:	f361 0300 	bfi	r3, r1, #0, #1
    f280:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    f282:	b134      	cbz	r4, f292 <log_1+0x32>
		msg->str = str;
    f284:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    f286:	7a63      	ldrb	r3, [r4, #9]
    f288:	2201      	movs	r2, #1
    f28a:	f362 1307 	bfi	r3, r2, #4, #4
    f28e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    f290:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    f292:	b1b4      	cbz	r4, f2c2 <log_1+0x62>
	msg->hdr.ids = src_level;
    f294:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    f296:	4b0b      	ldr	r3, [pc, #44]	; (f2c4 <log_1+0x64>)
    f298:	681b      	ldr	r3, [r3, #0]
    f29a:	4798      	blx	r3
    f29c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    f29e:	f04f 0340 	mov.w	r3, #64	; 0x40
    f2a2:	f3ef 8511 	mrs	r5, BASEPRI
    f2a6:	f383 8812 	msr	BASEPRI_MAX, r3
    f2aa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f2ae:	4621      	mov	r1, r4
    f2b0:	4805      	ldr	r0, [pc, #20]	; (f2c8 <log_1+0x68>)
    f2b2:	f00a ffa9 	bl	1a208 <log_list_add_tail>
	__asm__ volatile(
    f2b6:	f385 8811 	msr	BASEPRI, r5
    f2ba:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    f2be:	f7ff ff49 	bl	f154 <z_log_msg_post_finalize>
}
    f2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f2c4:	200003c4 	.word	0x200003c4
    f2c8:	20001a20 	.word	0x20001a20

0000f2cc <log_2>:
{
    f2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2d0:	4607      	mov	r7, r0
    f2d2:	460e      	mov	r6, r1
    f2d4:	4615      	mov	r5, r2
    f2d6:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    f2d8:	f000 f95e 	bl	f598 <log_msg_chunk_alloc>
	if (msg != NULL) {
    f2dc:	4604      	mov	r4, r0
    f2de:	b140      	cbz	r0, f2f2 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    f2e0:	2301      	movs	r3, #1
    f2e2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    f2e4:	2200      	movs	r2, #0
    f2e6:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    f2e8:	f04f 0300 	mov.w	r3, #0
    f2ec:	f362 0300 	bfi	r3, r2, #0, #1
    f2f0:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    f2f2:	b13c      	cbz	r4, f304 <log_2+0x38>
		msg->str = str;
    f2f4:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    f2f6:	7a63      	ldrb	r3, [r4, #9]
    f2f8:	2202      	movs	r2, #2
    f2fa:	f362 1307 	bfi	r3, r2, #4, #4
    f2fe:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    f300:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    f302:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    f304:	b1bc      	cbz	r4, f336 <log_2+0x6a>
	msg->hdr.ids = src_level;
    f306:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    f30a:	4b0c      	ldr	r3, [pc, #48]	; (f33c <log_2+0x70>)
    f30c:	681b      	ldr	r3, [r3, #0]
    f30e:	4798      	blx	r3
    f310:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    f312:	f04f 0340 	mov.w	r3, #64	; 0x40
    f316:	f3ef 8511 	mrs	r5, BASEPRI
    f31a:	f383 8812 	msr	BASEPRI_MAX, r3
    f31e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f322:	4621      	mov	r1, r4
    f324:	4806      	ldr	r0, [pc, #24]	; (f340 <log_2+0x74>)
    f326:	f00a ff6f 	bl	1a208 <log_list_add_tail>
	__asm__ volatile(
    f32a:	f385 8811 	msr	BASEPRI, r5
    f32e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    f332:	f7ff ff0f 	bl	f154 <z_log_msg_post_finalize>
}
    f336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f33a:	bf00      	nop
    f33c:	200003c4 	.word	0x200003c4
    f340:	20001a20 	.word	0x20001a20

0000f344 <log_n>:
{
    f344:	b538      	push	{r3, r4, r5, lr}
    f346:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    f348:	f00b f89d 	bl	1a486 <log_msg_create_n>
		if (msg == NULL) {
    f34c:	b1b8      	cbz	r0, f37e <log_n+0x3a>
    f34e:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    f350:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    f352:	4b0b      	ldr	r3, [pc, #44]	; (f380 <log_n+0x3c>)
    f354:	681b      	ldr	r3, [r3, #0]
    f356:	4798      	blx	r3
    f358:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
    f35a:	f04f 0340 	mov.w	r3, #64	; 0x40
    f35e:	f3ef 8411 	mrs	r4, BASEPRI
    f362:	f383 8812 	msr	BASEPRI_MAX, r3
    f366:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f36a:	4629      	mov	r1, r5
    f36c:	4805      	ldr	r0, [pc, #20]	; (f384 <log_n+0x40>)
    f36e:	f00a ff4b 	bl	1a208 <log_list_add_tail>
	__asm__ volatile(
    f372:	f384 8811 	msr	BASEPRI, r4
    f376:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    f37a:	f7ff feeb 	bl	f154 <z_log_msg_post_finalize>
}
    f37e:	bd38      	pop	{r3, r4, r5, pc}
    f380:	200003c4 	.word	0x200003c4
    f384:	20001a20 	.word	0x20001a20

0000f388 <log_hexdump>:
{
    f388:	b538      	push	{r3, r4, r5, lr}
    f38a:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
    f38c:	f00b f88f 	bl	1a4ae <log_msg_hexdump_create>
		if (msg == NULL) {
    f390:	b1b8      	cbz	r0, f3c2 <log_hexdump+0x3a>
    f392:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    f394:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    f396:	4b0b      	ldr	r3, [pc, #44]	; (f3c4 <log_hexdump+0x3c>)
    f398:	681b      	ldr	r3, [r3, #0]
    f39a:	4798      	blx	r3
    f39c:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
    f39e:	f04f 0340 	mov.w	r3, #64	; 0x40
    f3a2:	f3ef 8411 	mrs	r4, BASEPRI
    f3a6:	f383 8812 	msr	BASEPRI_MAX, r3
    f3aa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f3ae:	4629      	mov	r1, r5
    f3b0:	4805      	ldr	r0, [pc, #20]	; (f3c8 <log_hexdump+0x40>)
    f3b2:	f00a ff29 	bl	1a208 <log_list_add_tail>
	__asm__ volatile(
    f3b6:	f384 8811 	msr	BASEPRI, r4
    f3ba:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    f3be:	f7ff fec9 	bl	f154 <z_log_msg_post_finalize>
}
    f3c2:	bd38      	pop	{r3, r4, r5, pc}
    f3c4:	200003c4 	.word	0x200003c4
    f3c8:	20001a20 	.word	0x20001a20

0000f3cc <log_0>:
{
    f3cc:	b570      	push	{r4, r5, r6, lr}
    f3ce:	4605      	mov	r5, r0
    f3d0:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    f3d2:	f000 f8e1 	bl	f598 <log_msg_chunk_alloc>
	if (msg != NULL) {
    f3d6:	4604      	mov	r4, r0
    f3d8:	b140      	cbz	r0, f3ec <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    f3da:	2301      	movs	r3, #1
    f3dc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    f3de:	2200      	movs	r2, #0
    f3e0:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    f3e2:	f04f 0300 	mov.w	r3, #0
    f3e6:	f362 0300 	bfi	r3, r2, #0, #1
    f3ea:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    f3ec:	b104      	cbz	r4, f3f0 <log_0+0x24>
		msg->str = str;
    f3ee:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    f3f0:	b1b4      	cbz	r4, f420 <log_0+0x54>
	msg->hdr.ids = src_level;
    f3f2:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    f3f4:	4b0b      	ldr	r3, [pc, #44]	; (f424 <log_0+0x58>)
    f3f6:	681b      	ldr	r3, [r3, #0]
    f3f8:	4798      	blx	r3
    f3fa:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    f3fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    f400:	f3ef 8511 	mrs	r5, BASEPRI
    f404:	f383 8812 	msr	BASEPRI_MAX, r3
    f408:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    f40c:	4621      	mov	r1, r4
    f40e:	4806      	ldr	r0, [pc, #24]	; (f428 <log_0+0x5c>)
    f410:	f00a fefa 	bl	1a208 <log_list_add_tail>
	__asm__ volatile(
    f414:	f385 8811 	msr	BASEPRI, r5
    f418:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    f41c:	f7ff fe9a 	bl	f154 <z_log_msg_post_finalize>
}
    f420:	bd70      	pop	{r4, r5, r6, pc}
    f422:	bf00      	nop
    f424:	200003c4 	.word	0x200003c4
    f428:	20001a20 	.word	0x20001a20

0000f42c <z_impl_log_panic>:
	if (panic_mode) {
    f42c:	4b12      	ldr	r3, [pc, #72]	; (f478 <z_impl_log_panic+0x4c>)
    f42e:	781b      	ldrb	r3, [r3, #0]
    f430:	b103      	cbz	r3, f434 <z_impl_log_panic+0x8>
    f432:	4770      	bx	lr
{
    f434:	b510      	push	{r4, lr}
	log_init();
    f436:	f7ff fcb3 	bl	eda0 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    f43a:	2400      	movs	r4, #0
    f43c:	e000      	b.n	f440 <z_impl_log_panic+0x14>
    f43e:	3401      	adds	r4, #1
    f440:	4b0e      	ldr	r3, [pc, #56]	; (f47c <z_impl_log_panic+0x50>)
    f442:	4a0f      	ldr	r2, [pc, #60]	; (f480 <z_impl_log_panic+0x54>)
    f444:	1a9b      	subs	r3, r3, r2
    f446:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    f44a:	da0c      	bge.n	f466 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    f44c:	480c      	ldr	r0, [pc, #48]	; (f480 <z_impl_log_panic+0x54>)
    f44e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    f452:	6843      	ldr	r3, [r0, #4]
    f454:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    f456:	2b00      	cmp	r3, #0
    f458:	d0f1      	beq.n	f43e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    f45a:	0123      	lsls	r3, r4, #4
    f45c:	4a08      	ldr	r2, [pc, #32]	; (f480 <z_impl_log_panic+0x54>)
    f45e:	58d3      	ldr	r3, [r2, r3]
    f460:	695b      	ldr	r3, [r3, #20]
    f462:	4798      	blx	r3
}
    f464:	e7eb      	b.n	f43e <z_impl_log_panic+0x12>
    f466:	2000      	movs	r0, #0
    f468:	f7ff fe4a 	bl	f100 <z_impl_log_process>
		while (log_process(false) == true) {
    f46c:	2800      	cmp	r0, #0
    f46e:	d1fa      	bne.n	f466 <z_impl_log_panic+0x3a>
	panic_mode = true;
    f470:	4b01      	ldr	r3, [pc, #4]	; (f478 <z_impl_log_panic+0x4c>)
    f472:	2201      	movs	r2, #1
    f474:	701a      	strb	r2, [r3, #0]
}
    f476:	bd10      	pop	{r4, pc}
    f478:	20002d8d 	.word	0x20002d8d
    f47c:	0001cce4 	.word	0x0001cce4
    f480:	0001ccd4 	.word	0x0001ccd4

0000f484 <log_process_thread_func>:
{
    f484:	b508      	push	{r3, lr}
	log_init();
    f486:	f7ff fc8b 	bl	eda0 <log_init>
	return z_impl_z_current_get();
    f48a:	f007 f851 	bl	16530 <z_impl_z_current_get>
	thread_set(k_current_get());
    f48e:	f7ff fc33 	bl	ecf8 <thread_set>
    f492:	e006      	b.n	f4a2 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    f494:	f04f 32ff 	mov.w	r2, #4294967295
    f498:	f04f 33ff 	mov.w	r3, #4294967295
    f49c:	4804      	ldr	r0, [pc, #16]	; (f4b0 <log_process_thread_func+0x2c>)
    f49e:	f006 facf 	bl	15a40 <z_impl_k_sem_take>
    f4a2:	2000      	movs	r0, #0
    f4a4:	f7ff fe2c 	bl	f100 <z_impl_log_process>
		if (log_process(false) == false) {
    f4a8:	2800      	cmp	r0, #0
    f4aa:	d1fa      	bne.n	f4a2 <log_process_thread_func+0x1e>
    f4ac:	e7f2      	b.n	f494 <log_process_thread_func+0x10>
    f4ae:	bf00      	nop
    f4b0:	200005b0 	.word	0x200005b0

0000f4b4 <z_log_free>:
{
    f4b4:	b500      	push	{lr}
    f4b6:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    f4b8:	3804      	subs	r0, #4
    f4ba:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f4bc:	f3bf 8f5b 	dmb	ish
    f4c0:	e850 3f00 	ldrex	r3, [r0]
    f4c4:	1e5a      	subs	r2, r3, #1
    f4c6:	e840 2100 	strex	r1, r2, [r0]
    f4ca:	2900      	cmp	r1, #0
    f4cc:	d1f8      	bne.n	f4c0 <z_log_free+0xc>
    f4ce:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    f4d2:	2b01      	cmp	r3, #1
    f4d4:	d002      	beq.n	f4dc <z_log_free+0x28>
}
    f4d6:	b003      	add	sp, #12
    f4d8:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    f4dc:	a901      	add	r1, sp, #4
    f4de:	4802      	ldr	r0, [pc, #8]	; (f4e8 <z_log_free+0x34>)
    f4e0:	f00c fd0e 	bl	1bf00 <k_mem_slab_free>
}
    f4e4:	e7f7      	b.n	f4d6 <z_log_free+0x22>
    f4e6:	bf00      	nop
    f4e8:	20001a28 	.word	0x20001a28

0000f4ec <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    f4ec:	4b05      	ldr	r3, [pc, #20]	; (f504 <log_source_name_get+0x18>)
    f4ee:	4a06      	ldr	r2, [pc, #24]	; (f508 <log_source_name_get+0x1c>)
    f4f0:	1a9b      	subs	r3, r3, r2
    f4f2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    f4f6:	d202      	bcs.n	f4fe <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    f4f8:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    f4fc:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    f4fe:	2000      	movs	r0, #0
}
    f500:	4770      	bx	lr
    f502:	bf00      	nop
    f504:	0001ccd4 	.word	0x0001ccd4
    f508:	0001cc2c 	.word	0x0001cc2c

0000f50c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    f50c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    f50e:	4b07      	ldr	r3, [pc, #28]	; (f52c <log_backend_enable+0x20>)
    f510:	1ac3      	subs	r3, r0, r3
    f512:	111b      	asrs	r3, r3, #4
    f514:	3301      	adds	r3, #1
	backend->cb->id = id;
    f516:	6842      	ldr	r2, [r0, #4]
    f518:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    f51a:	6843      	ldr	r3, [r0, #4]
    f51c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    f51e:	6843      	ldr	r3, [r0, #4]
    f520:	2201      	movs	r2, #1
    f522:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    f524:	f7ff fcba 	bl	ee9c <z_log_notify_backend_enabled>
}
    f528:	bd08      	pop	{r3, pc}
    f52a:	bf00      	nop
    f52c:	0001ccd4 	.word	0x0001ccd4

0000f530 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    f530:	b510      	push	{r4, lr}
    f532:	b082      	sub	sp, #8
    f534:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    f536:	9b01      	ldr	r3, [sp, #4]
    f538:	b133      	cbz	r3, f548 <cont_free+0x18>
		next = cont->next;
    f53a:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    f53c:	a901      	add	r1, sp, #4
    f53e:	4803      	ldr	r0, [pc, #12]	; (f54c <cont_free+0x1c>)
    f540:	f00c fcde 	bl	1bf00 <k_mem_slab_free>
		cont = next;
    f544:	9401      	str	r4, [sp, #4]
    f546:	e7f6      	b.n	f536 <cont_free+0x6>
	}
}
    f548:	b002      	add	sp, #8
    f54a:	bd10      	pop	{r4, pc}
    f54c:	20001a48 	.word	0x20001a48

0000f550 <log_msg_pool_init>:
{
    f550:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    f552:	2320      	movs	r3, #32
    f554:	461a      	mov	r2, r3
    f556:	4902      	ldr	r1, [pc, #8]	; (f560 <log_msg_pool_init+0x10>)
    f558:	4802      	ldr	r0, [pc, #8]	; (f564 <log_msg_pool_init+0x14>)
    f55a:	f00c fcc3 	bl	1bee4 <k_mem_slab_init>
}
    f55e:	bd08      	pop	{r3, pc}
    f560:	20006100 	.word	0x20006100
    f564:	20001a48 	.word	0x20001a48

0000f568 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    f568:	b510      	push	{r4, lr}
    f56a:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    f56c:	2300      	movs	r3, #0
    f56e:	9301      	str	r3, [sp, #4]
    f570:	2001      	movs	r0, #1
    f572:	f7ff fdc5 	bl	f100 <z_impl_log_process>
    f576:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    f578:	f7ff fca0 	bl	eebc <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    f57c:	2200      	movs	r2, #0
    f57e:	2300      	movs	r3, #0
    f580:	a901      	add	r1, sp, #4
    f582:	4804      	ldr	r0, [pc, #16]	; (f594 <log_msg_no_space_handle+0x2c>)
    f584:	f005 ffe6 	bl	15554 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    f588:	b108      	cbz	r0, f58e <log_msg_no_space_handle+0x26>
    f58a:	2c00      	cmp	r4, #0
    f58c:	d1f0      	bne.n	f570 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    f58e:	9801      	ldr	r0, [sp, #4]
    f590:	b002      	add	sp, #8
    f592:	bd10      	pop	{r4, pc}
    f594:	20001a48 	.word	0x20001a48

0000f598 <log_msg_chunk_alloc>:
{
    f598:	b500      	push	{lr}
    f59a:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    f59c:	2300      	movs	r3, #0
    f59e:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    f5a0:	f00a fe6f 	bl	1a282 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f5a4:	b150      	cbz	r0, f5bc <log_msg_chunk_alloc+0x24>
    f5a6:	2200      	movs	r2, #0
    f5a8:	2300      	movs	r3, #0
    f5aa:	a901      	add	r1, sp, #4
    f5ac:	4807      	ldr	r0, [pc, #28]	; (f5cc <log_msg_chunk_alloc+0x34>)
    f5ae:	f005 ffd1 	bl	15554 <k_mem_slab_alloc>
	if (err != 0) {
    f5b2:	b930      	cbnz	r0, f5c2 <log_msg_chunk_alloc+0x2a>
}
    f5b4:	9801      	ldr	r0, [sp, #4]
    f5b6:	b003      	add	sp, #12
    f5b8:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    f5bc:	2200      	movs	r2, #0
    f5be:	2300      	movs	r3, #0
    f5c0:	e7f3      	b.n	f5aa <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    f5c2:	f7ff ffd1 	bl	f568 <log_msg_no_space_handle>
    f5c6:	9001      	str	r0, [sp, #4]
    f5c8:	e7f4      	b.n	f5b4 <log_msg_chunk_alloc+0x1c>
    f5ca:	bf00      	nop
    f5cc:	20001a48 	.word	0x20001a48

0000f5d0 <msg_free>:
{
    f5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5d2:	b083      	sub	sp, #12
    f5d4:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    f5d6:	4604      	mov	r4, r0
    f5d8:	f00a fefa 	bl	1a3d0 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f5dc:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    f5de:	f013 0f01 	tst.w	r3, #1
    f5e2:	d101      	bne.n	f5e8 <msg_free+0x18>
    f5e4:	4606      	mov	r6, r0
    f5e6:	bb50      	cbnz	r0, f63e <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	7a1a      	ldrb	r2, [r3, #8]
    f5ec:	f012 0f02 	tst.w	r2, #2
    f5f0:	d128      	bne.n	f644 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    f5f2:	a901      	add	r1, sp, #4
    f5f4:	4815      	ldr	r0, [pc, #84]	; (f64c <msg_free+0x7c>)
    f5f6:	f00c fc83 	bl	1bf00 <k_mem_slab_free>
}
    f5fa:	b003      	add	sp, #12
    f5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    f5fe:	9801      	ldr	r0, [sp, #4]
    f600:	f00a fefb 	bl	1a3fa <log_msg_str_get>
    f604:	4631      	mov	r1, r6
    f606:	f00a fe19 	bl	1a23c <z_log_get_s_mask>
					if (smask == 0U) {
    f60a:	4607      	mov	r7, r0
    f60c:	b988      	cbnz	r0, f632 <msg_free+0x62>
    f60e:	e7eb      	b.n	f5e8 <msg_free+0x18>
					z_log_free(buf);
    f610:	4628      	mov	r0, r5
    f612:	f7ff ff4f 	bl	f4b4 <z_log_free>
		for (i = 0U; i < nargs; i++) {
    f616:	3401      	adds	r4, #1
    f618:	42b4      	cmp	r4, r6
    f61a:	d2e5      	bcs.n	f5e8 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    f61c:	4621      	mov	r1, r4
    f61e:	9801      	ldr	r0, [sp, #4]
    f620:	f00a fed9 	bl	1a3d6 <log_msg_arg_get>
    f624:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    f626:	f7ff fcd3 	bl	efd0 <log_is_strdup>
    f62a:	2800      	cmp	r0, #0
    f62c:	d0f3      	beq.n	f616 <msg_free+0x46>
				if (smask == 0U) {
    f62e:	2f00      	cmp	r7, #0
    f630:	d0e5      	beq.n	f5fe <msg_free+0x2e>
				if (smask & BIT(i)) {
    f632:	fa27 f304 	lsr.w	r3, r7, r4
    f636:	f013 0f01 	tst.w	r3, #1
    f63a:	d0ec      	beq.n	f616 <msg_free+0x46>
    f63c:	e7e8      	b.n	f610 <msg_free+0x40>
		uint32_t smask = 0U;
    f63e:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    f640:	463c      	mov	r4, r7
    f642:	e7e9      	b.n	f618 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    f644:	6958      	ldr	r0, [r3, #20]
    f646:	f7ff ff73 	bl	f530 <cont_free>
    f64a:	e7d2      	b.n	f5f2 <msg_free+0x22>
    f64c:	20001a48 	.word	0x20001a48

0000f650 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    f650:	b40e      	push	{r1, r2, r3}
    f652:	b500      	push	{lr}
    f654:	b082      	sub	sp, #8
    f656:	4601      	mov	r1, r0
    f658:	ab03      	add	r3, sp, #12
    f65a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    f65e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f660:	4803      	ldr	r0, [pc, #12]	; (f670 <print_formatted+0x20>)
    f662:	f7fe fe3b 	bl	e2dc <cbvprintf>
	va_end(args);

	return length;
}
    f666:	b002      	add	sp, #8
    f668:	f85d eb04 	ldr.w	lr, [sp], #4
    f66c:	b003      	add	sp, #12
    f66e:	4770      	bx	lr
    f670:	0001a889 	.word	0x0001a889

0000f674 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    f674:	b5f0      	push	{r4, r5, r6, r7, lr}
    f676:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    f678:	f011 0f44 	tst.w	r1, #68	; 0x44
    f67c:	d005      	beq.n	f68a <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    f67e:	4b1a      	ldr	r3, [pc, #104]	; (f6e8 <timestamp_print+0x74>)
    f680:	681c      	ldr	r4, [r3, #0]
    f682:	b934      	cbnz	r4, f692 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    f684:	2000      	movs	r0, #0
	}

	return length;
}
    f686:	b005      	add	sp, #20
    f688:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    f68a:	4918      	ldr	r1, [pc, #96]	; (f6ec <timestamp_print+0x78>)
    f68c:	f7ff ffe0 	bl	f650 <print_formatted>
    f690:	e7f9      	b.n	f686 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    f692:	4b17      	ldr	r3, [pc, #92]	; (f6f0 <timestamp_print+0x7c>)
    f694:	6819      	ldr	r1, [r3, #0]
    f696:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    f69a:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    f69e:	4a15      	ldr	r2, [pc, #84]	; (f6f4 <timestamp_print+0x80>)
    f6a0:	fba2 3205 	umull	r3, r2, r2, r5
    f6a4:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    f6a6:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    f6aa:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    f6ae:	4b12      	ldr	r3, [pc, #72]	; (f6f8 <timestamp_print+0x84>)
    f6b0:	fba3 7306 	umull	r7, r3, r3, r6
    f6b4:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    f6b6:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    f6ba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    f6be:	fb05 f101 	mul.w	r1, r5, r1
    f6c2:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f6c6:	fb07 1114 	mls	r1, r7, r4, r1
    f6ca:	fb05 f101 	mul.w	r1, r5, r1
    f6ce:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    f6d2:	9402      	str	r4, [sp, #8]
    f6d4:	9701      	str	r7, [sp, #4]
    f6d6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    f6da:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    f6de:	9100      	str	r1, [sp, #0]
    f6e0:	4906      	ldr	r1, [pc, #24]	; (f6fc <timestamp_print+0x88>)
    f6e2:	f7ff ffb5 	bl	f650 <print_formatted>
    f6e6:	e7ce      	b.n	f686 <timestamp_print+0x12>
    f6e8:	20001a64 	.word	0x20001a64
    f6ec:	0001cfb8 	.word	0x0001cfb8
    f6f0:	20001a68 	.word	0x20001a68
    f6f4:	91a2b3c5 	.word	0x91a2b3c5
    f6f8:	88888889 	.word	0x88888889
    f6fc:	0001cfc4 	.word	0x0001cfc4

0000f700 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    f700:	b161      	cbz	r1, f71c <color_print+0x1c>
{
    f702:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    f704:	b12a      	cbz	r2, f712 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    f706:	4a06      	ldr	r2, [pc, #24]	; (f720 <color_print+0x20>)
    f708:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    f70c:	b912      	cbnz	r2, f714 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    f70e:	4a05      	ldr	r2, [pc, #20]	; (f724 <color_print+0x24>)
    f710:	e000      	b.n	f714 <color_print+0x14>
    f712:	4a04      	ldr	r2, [pc, #16]	; (f724 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    f714:	4904      	ldr	r1, [pc, #16]	; (f728 <color_print+0x28>)
    f716:	f7ff ff9b 	bl	f650 <print_formatted>
	}
}
    f71a:	bd08      	pop	{r3, pc}
    f71c:	4770      	bx	lr
    f71e:	bf00      	nop
    f720:	0001d03c 	.word	0x0001d03c
    f724:	0001cfe0 	.word	0x0001cfe0
    f728:	0001cfe8 	.word	0x0001cfe8

0000f72c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f72c:	f011 0f10 	tst.w	r1, #16
    f730:	d10b      	bne.n	f74a <newline_print+0x1e>
{
    f732:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f734:	f011 0f20 	tst.w	r1, #32
    f738:	d003      	beq.n	f742 <newline_print+0x16>
		print_formatted(ctx, "\n");
    f73a:	4904      	ldr	r1, [pc, #16]	; (f74c <newline_print+0x20>)
    f73c:	f7ff ff88 	bl	f650 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    f740:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    f742:	4903      	ldr	r1, [pc, #12]	; (f750 <newline_print+0x24>)
    f744:	f7ff ff84 	bl	f650 <print_formatted>
    f748:	e7fa      	b.n	f740 <newline_print+0x14>
    f74a:	4770      	bx	lr
    f74c:	0001e1dc 	.word	0x0001e1dc
    f750:	0001e110 	.word	0x0001e110

0000f754 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    f754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f758:	4605      	mov	r5, r0
    f75a:	460f      	mov	r7, r1
    f75c:	4616      	mov	r6, r2
    f75e:	4698      	mov	r8, r3
	newline_print(output, flags);
    f760:	9906      	ldr	r1, [sp, #24]
    f762:	f7ff ffe3 	bl	f72c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    f766:	2400      	movs	r4, #0
    f768:	4544      	cmp	r4, r8
    f76a:	da05      	bge.n	f778 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    f76c:	4923      	ldr	r1, [pc, #140]	; (f7fc <hexdump_line_print+0xa8>)
    f76e:	4628      	mov	r0, r5
    f770:	f7ff ff6e 	bl	f650 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    f774:	3401      	adds	r4, #1
    f776:	e7f7      	b.n	f768 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f778:	2400      	movs	r4, #0
    f77a:	e009      	b.n	f790 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    f77c:	491f      	ldr	r1, [pc, #124]	; (f7fc <hexdump_line_print+0xa8>)
    f77e:	4628      	mov	r0, r5
    f780:	f7ff ff66 	bl	f650 <print_formatted>
    f784:	e00b      	b.n	f79e <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    f786:	491e      	ldr	r1, [pc, #120]	; (f800 <hexdump_line_print+0xac>)
    f788:	4628      	mov	r0, r5
    f78a:	f7ff ff61 	bl	f650 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f78e:	3401      	adds	r4, #1
    f790:	2c0f      	cmp	r4, #15
    f792:	dc0c      	bgt.n	f7ae <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    f794:	2c00      	cmp	r4, #0
    f796:	dd02      	ble.n	f79e <hexdump_line_print+0x4a>
    f798:	f014 0f07 	tst.w	r4, #7
    f79c:	d0ee      	beq.n	f77c <hexdump_line_print+0x28>
		if (i < length) {
    f79e:	42b4      	cmp	r4, r6
    f7a0:	d2f1      	bcs.n	f786 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    f7a2:	5d3a      	ldrb	r2, [r7, r4]
    f7a4:	4917      	ldr	r1, [pc, #92]	; (f804 <hexdump_line_print+0xb0>)
    f7a6:	4628      	mov	r0, r5
    f7a8:	f7ff ff52 	bl	f650 <print_formatted>
    f7ac:	e7ef      	b.n	f78e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    f7ae:	4916      	ldr	r1, [pc, #88]	; (f808 <hexdump_line_print+0xb4>)
    f7b0:	4628      	mov	r0, r5
    f7b2:	f7ff ff4d 	bl	f650 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f7b6:	2400      	movs	r4, #0
    f7b8:	e009      	b.n	f7ce <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    f7ba:	4910      	ldr	r1, [pc, #64]	; (f7fc <hexdump_line_print+0xa8>)
    f7bc:	4628      	mov	r0, r5
    f7be:	f7ff ff47 	bl	f650 <print_formatted>
    f7c2:	e00b      	b.n	f7dc <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    f7c4:	4911      	ldr	r1, [pc, #68]	; (f80c <hexdump_line_print+0xb8>)
    f7c6:	4628      	mov	r0, r5
    f7c8:	f7ff ff42 	bl	f650 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f7cc:	3401      	adds	r4, #1
    f7ce:	2c0f      	cmp	r4, #15
    f7d0:	dc12      	bgt.n	f7f8 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    f7d2:	2c00      	cmp	r4, #0
    f7d4:	dd02      	ble.n	f7dc <hexdump_line_print+0x88>
    f7d6:	f014 0f07 	tst.w	r4, #7
    f7da:	d0ee      	beq.n	f7ba <hexdump_line_print+0x66>
		if (i < length) {
    f7dc:	42b4      	cmp	r4, r6
    f7de:	d206      	bcs.n	f7ee <hexdump_line_print+0x9a>
			char c = (char)data[i];
    f7e0:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    f7e2:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    f7e6:	2b5e      	cmp	r3, #94	; 0x5e
    f7e8:	d9ec      	bls.n	f7c4 <hexdump_line_print+0x70>
    f7ea:	222e      	movs	r2, #46	; 0x2e
    f7ec:	e7ea      	b.n	f7c4 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    f7ee:	4903      	ldr	r1, [pc, #12]	; (f7fc <hexdump_line_print+0xa8>)
    f7f0:	4628      	mov	r0, r5
    f7f2:	f7ff ff2d 	bl	f650 <print_formatted>
    f7f6:	e7e9      	b.n	f7cc <hexdump_line_print+0x78>
		}
	}
}
    f7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7fc:	0001d010 	.word	0x0001d010
    f800:	0001cff4 	.word	0x0001cff4
    f804:	0001cfec 	.word	0x0001cfec
    f808:	0001cff8 	.word	0x0001cff8
    f80c:	0001cffc 	.word	0x0001cffc

0000f810 <ids_print>:
{
    f810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f814:	4680      	mov	r8, r0
    f816:	4616      	mov	r6, r2
    f818:	461d      	mov	r5, r3
    f81a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    f81e:	b959      	cbnz	r1, f838 <ids_print+0x28>
	int total = 0;
    f820:	2400      	movs	r4, #0
	if (source_id >= 0) {
    f822:	2f00      	cmp	r7, #0
    f824:	db1c      	blt.n	f860 <ids_print+0x50>
		total += print_formatted(output,
    f826:	b186      	cbz	r6, f84a <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    f828:	2301      	movs	r3, #1
    f82a:	9a07      	ldr	r2, [sp, #28]
    f82c:	4093      	lsls	r3, r2
				(func_on &&
    f82e:	f013 0f10 	tst.w	r3, #16
    f832:	d118      	bne.n	f866 <ids_print+0x56>
		total += print_formatted(output,
    f834:	4e0d      	ldr	r6, [pc, #52]	; (f86c <ids_print+0x5c>)
    f836:	e009      	b.n	f84c <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    f838:	4b0d      	ldr	r3, [pc, #52]	; (f870 <ids_print+0x60>)
    f83a:	9a07      	ldr	r2, [sp, #28]
    f83c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    f840:	490c      	ldr	r1, [pc, #48]	; (f874 <ids_print+0x64>)
    f842:	f7ff ff05 	bl	f650 <print_formatted>
    f846:	4604      	mov	r4, r0
    f848:	e7eb      	b.n	f822 <ids_print+0x12>
		total += print_formatted(output,
    f84a:	4e08      	ldr	r6, [pc, #32]	; (f86c <ids_print+0x5c>)
    f84c:	4639      	mov	r1, r7
    f84e:	4628      	mov	r0, r5
    f850:	f7ff fe4c 	bl	f4ec <log_source_name_get>
    f854:	4602      	mov	r2, r0
    f856:	4631      	mov	r1, r6
    f858:	4640      	mov	r0, r8
    f85a:	f7ff fef9 	bl	f650 <print_formatted>
    f85e:	4404      	add	r4, r0
}
    f860:	4620      	mov	r0, r4
    f862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    f866:	4e04      	ldr	r6, [pc, #16]	; (f878 <ids_print+0x68>)
    f868:	e7f0      	b.n	f84c <ids_print+0x3c>
    f86a:	bf00      	nop
    f86c:	0001d000 	.word	0x0001d000
    f870:	0001d078 	.word	0x0001d078
    f874:	0001d00c 	.word	0x0001d00c
    f878:	0001d008 	.word	0x0001d008

0000f87c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    f87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f880:	b085      	sub	sp, #20
    f882:	4605      	mov	r5, r0
    f884:	460c      	mov	r4, r1
    f886:	4616      	mov	r6, r2
    f888:	9303      	str	r3, [sp, #12]
    f88a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    f88e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    f892:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f896:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    f89a:	f00a fcf0 	bl	1a27e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    f89e:	b1e8      	cbz	r0, f8dc <prefix_print+0x60>
    f8a0:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    f8a2:	4913      	ldr	r1, [pc, #76]	; (f8f0 <prefix_print+0x74>)
    f8a4:	4628      	mov	r0, r5
    f8a6:	f7ff fed3 	bl	f650 <print_formatted>
    f8aa:	4607      	mov	r7, r0
	}

	if (stamp) {
    f8ac:	f1bb 0f00 	cmp.w	fp, #0
    f8b0:	d116      	bne.n	f8e0 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    f8b2:	4642      	mov	r2, r8
    f8b4:	4651      	mov	r1, sl
    f8b6:	4628      	mov	r0, r5
    f8b8:	f00a fe66 	bl	1a588 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    f8bc:	f8cd 8004 	str.w	r8, [sp, #4]
    f8c0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    f8c4:	9300      	str	r3, [sp, #0]
    f8c6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    f8ca:	4632      	mov	r2, r6
    f8cc:	4649      	mov	r1, r9
    f8ce:	4628      	mov	r0, r5
    f8d0:	f7ff ff9e 	bl	f810 <ids_print>
			domain_id, source_id, level);


	return length;
}
    f8d4:	4438      	add	r0, r7
    f8d6:	b005      	add	sp, #20
    f8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    f8dc:	2700      	movs	r7, #0
    f8de:	e7e5      	b.n	f8ac <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    f8e0:	9a03      	ldr	r2, [sp, #12]
    f8e2:	4621      	mov	r1, r4
    f8e4:	4628      	mov	r0, r5
    f8e6:	f7ff fec5 	bl	f674 <timestamp_print>
    f8ea:	4407      	add	r7, r0
    f8ec:	e7e1      	b.n	f8b2 <prefix_print+0x36>
    f8ee:	bf00      	nop
    f8f0:	0001d014 	.word	0x0001d014

0000f8f4 <hexdump_print>:
{
    f8f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f8f8:	b089      	sub	sp, #36	; 0x24
    f8fa:	4607      	mov	r7, r0
    f8fc:	460e      	mov	r6, r1
    f8fe:	4691      	mov	r9, r2
    f900:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
    f902:	f00a fd7a 	bl	1a3fa <log_msg_str_get>
    f906:	4602      	mov	r2, r0
    f908:	490e      	ldr	r1, [pc, #56]	; (f944 <hexdump_print+0x50>)
    f90a:	4630      	mov	r0, r6
    f90c:	f7ff fea0 	bl	f650 <print_formatted>
	uint32_t offset = 0U;
    f910:	2400      	movs	r4, #0
		length = sizeof(buf);
    f912:	2510      	movs	r5, #16
    f914:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f916:	4623      	mov	r3, r4
    f918:	aa03      	add	r2, sp, #12
    f91a:	eb0d 0105 	add.w	r1, sp, r5
    f91e:	4638      	mov	r0, r7
    f920:	f00a fe1d 	bl	1a55e <log_msg_hexdump_data_get>
		if (length) {
    f924:	9a03      	ldr	r2, [sp, #12]
    f926:	b152      	cbz	r2, f93e <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    f928:	f8cd 8000 	str.w	r8, [sp]
    f92c:	464b      	mov	r3, r9
    f92e:	eb0d 0105 	add.w	r1, sp, r5
    f932:	4630      	mov	r0, r6
    f934:	f7ff ff0e 	bl	f754 <hexdump_line_print>
			offset += length;
    f938:	9d03      	ldr	r5, [sp, #12]
    f93a:	442c      	add	r4, r5
		length = sizeof(buf);
    f93c:	e7e9      	b.n	f912 <hexdump_print+0x1e>
}
    f93e:	b009      	add	sp, #36	; 0x24
    f940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f944:	0001cfe8 	.word	0x0001cfe8

0000f948 <raw_string_print>:
{
    f948:	b5f0      	push	{r4, r5, r6, r7, lr}
    f94a:	b083      	sub	sp, #12
    f94c:	4606      	mov	r6, r0
    f94e:	460c      	mov	r4, r1
	bool eol = false;
    f950:	2700      	movs	r7, #0
	size_t offset = 0;
    f952:	463d      	mov	r5, r7
    f954:	e00d      	b.n	f972 <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
    f956:	68a2      	ldr	r2, [r4, #8]
    f958:	4413      	add	r3, r2
    f95a:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    f95e:	2f0a      	cmp	r7, #10
    f960:	bf14      	ite	ne
    f962:	2700      	movne	r7, #0
    f964:	2701      	moveq	r7, #1
		log_output_flush(output);
    f966:	4620      	mov	r0, r4
    f968:	f00a ff81 	bl	1a86e <log_output_flush>
		offset += length;
    f96c:	9b01      	ldr	r3, [sp, #4]
    f96e:	441d      	add	r5, r3
	} while (length > 0);
    f970:	b173      	cbz	r3, f990 <raw_string_print+0x48>
		length = output->size;
    f972:	68e3      	ldr	r3, [r4, #12]
    f974:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    f976:	462b      	mov	r3, r5
    f978:	aa01      	add	r2, sp, #4
    f97a:	68a1      	ldr	r1, [r4, #8]
    f97c:	4630      	mov	r0, r6
    f97e:	f00a fdee 	bl	1a55e <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    f982:	6863      	ldr	r3, [r4, #4]
    f984:	9a01      	ldr	r2, [sp, #4]
    f986:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f988:	9b01      	ldr	r3, [sp, #4]
    f98a:	2b00      	cmp	r3, #0
    f98c:	d0eb      	beq.n	f966 <raw_string_print+0x1e>
    f98e:	e7e2      	b.n	f956 <raw_string_print+0xe>
	if (eol) {
    f990:	b90f      	cbnz	r7, f996 <raw_string_print+0x4e>
}
    f992:	b003      	add	sp, #12
    f994:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    f996:	4902      	ldr	r1, [pc, #8]	; (f9a0 <raw_string_print+0x58>)
    f998:	4620      	mov	r0, r4
    f99a:	f7ff fe59 	bl	f650 <print_formatted>
}
    f99e:	e7f8      	b.n	f992 <raw_string_print+0x4a>
    f9a0:	0001d018 	.word	0x0001d018

0000f9a4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    f9a4:	b570      	push	{r4, r5, r6, lr}
    f9a6:	b082      	sub	sp, #8
    f9a8:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    f9aa:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f9ac:	f242 730f 	movw	r3, #9999	; 0x270f
    f9b0:	428b      	cmp	r3, r1
    f9b2:	bf28      	it	cs
    f9b4:	460b      	movcs	r3, r1
    f9b6:	4a0e      	ldr	r2, [pc, #56]	; (f9f0 <log_output_dropped_process+0x4c>)
    f9b8:	2105      	movs	r1, #5
    f9ba:	4668      	mov	r0, sp
    f9bc:	f00a f834 	bl	19a28 <snprintk>
    f9c0:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    f9c2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    f9c4:	685b      	ldr	r3, [r3, #4]
    f9c6:	220b      	movs	r2, #11
    f9c8:	490a      	ldr	r1, [pc, #40]	; (f9f4 <log_output_dropped_process+0x50>)
    f9ca:	4628      	mov	r0, r5
    f9cc:	f00a fdcf 	bl	1a56e <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    f9d0:	6863      	ldr	r3, [r4, #4]
    f9d2:	685b      	ldr	r3, [r3, #4]
    f9d4:	4632      	mov	r2, r6
    f9d6:	4669      	mov	r1, sp
    f9d8:	4628      	mov	r0, r5
    f9da:	f00a fdc8 	bl	1a56e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    f9de:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    f9e0:	685b      	ldr	r3, [r3, #4]
    f9e2:	221b      	movs	r2, #27
    f9e4:	4904      	ldr	r1, [pc, #16]	; (f9f8 <log_output_dropped_process+0x54>)
    f9e6:	4628      	mov	r0, r5
    f9e8:	f00a fdc1 	bl	1a56e <buffer_write>
}
    f9ec:	b002      	add	sp, #8
    f9ee:	bd70      	pop	{r4, r5, r6, pc}
    f9f0:	0001cf08 	.word	0x0001cf08
    f9f4:	0001d06c 	.word	0x0001d06c
    f9f8:	0001d050 	.word	0x0001d050

0000f9fc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    f9fc:	4b07      	ldr	r3, [pc, #28]	; (fa1c <log_output_timestamp_freq_set+0x20>)
    f9fe:	2201      	movs	r2, #1
    fa00:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    fa02:	4b07      	ldr	r3, [pc, #28]	; (fa20 <log_output_timestamp_freq_set+0x24>)
    fa04:	4298      	cmp	r0, r3
    fa06:	d905      	bls.n	fa14 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    fa08:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    fa0a:	4a04      	ldr	r2, [pc, #16]	; (fa1c <log_output_timestamp_freq_set+0x20>)
    fa0c:	6813      	ldr	r3, [r2, #0]
    fa0e:	005b      	lsls	r3, r3, #1
    fa10:	6013      	str	r3, [r2, #0]
    fa12:	e7f6      	b.n	fa02 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    fa14:	4b03      	ldr	r3, [pc, #12]	; (fa24 <log_output_timestamp_freq_set+0x28>)
    fa16:	6018      	str	r0, [r3, #0]
}
    fa18:	4770      	bx	lr
    fa1a:	bf00      	nop
    fa1c:	20001a68 	.word	0x20001a68
    fa20:	000f4240 	.word	0x000f4240
    fa24:	20001a64 	.word	0x20001a64

0000fa28 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    fa28:	b570      	push	{r4, r5, r6, lr}
    fa2a:	4606      	mov	r6, r0
    fa2c:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    fa2e:	2400      	movs	r4, #0
    fa30:	42ac      	cmp	r4, r5
    fa32:	d207      	bcs.n	fa44 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
    fa34:	4b04      	ldr	r3, [pc, #16]	; (fa48 <char_out+0x20>)
    fa36:	6818      	ldr	r0, [r3, #0]
    fa38:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    fa3a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    fa3c:	685b      	ldr	r3, [r3, #4]
    fa3e:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    fa40:	3401      	adds	r4, #1
    fa42:	e7f5      	b.n	fa30 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    fa44:	4628      	mov	r0, r5
    fa46:	bd70      	pop	{r4, r5, r6, pc}
    fa48:	20001a80 	.word	0x20001a80

0000fa4c <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    fa4c:	4b01      	ldr	r3, [pc, #4]	; (fa54 <log_backend_uart_init+0x8>)
    fa4e:	4a02      	ldr	r2, [pc, #8]	; (fa58 <log_backend_uart_init+0xc>)
    fa50:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    fa52:	4770      	bx	lr
    fa54:	20001a80 	.word	0x20001a80
    fa58:	0001ca94 	.word	0x0001ca94

0000fa5c <panic>:

static void panic(struct log_backend const *const backend)
{
    fa5c:	b508      	push	{r3, lr}
	in_panic = true;
    fa5e:	4b03      	ldr	r3, [pc, #12]	; (fa6c <panic+0x10>)
    fa60:	2201      	movs	r2, #1
    fa62:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    fa64:	4802      	ldr	r0, [pc, #8]	; (fa70 <panic+0x14>)
    fa66:	f00a ff02 	bl	1a86e <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    fa6a:	bd08      	pop	{r3, pc}
    fa6c:	20002d8e 	.word	0x20002d8e
    fa70:	0001d0c8 	.word	0x0001d0c8

0000fa74 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    fa74:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    fa76:	4802      	ldr	r0, [pc, #8]	; (fa80 <dropped+0xc>)
    fa78:	f7ff ff94 	bl	f9a4 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    fa7c:	bd08      	pop	{r3, pc}
    fa7e:	bf00      	nop
    fa80:	0001d0c8 	.word	0x0001d0c8

0000fa84 <put>:
{
    fa84:	b510      	push	{r4, lr}
    fa86:	460c      	mov	r4, r1
	log_msg_get(msg);
    fa88:	4608      	mov	r0, r1
    fa8a:	f00a fc94 	bl	1a3b6 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    fa8e:	220f      	movs	r2, #15
    fa90:	4621      	mov	r1, r4
    fa92:	4803      	ldr	r0, [pc, #12]	; (faa0 <put+0x1c>)
    fa94:	f00a ff14 	bl	1a8c0 <log_output_msg_process>
	log_msg_put(msg);
    fa98:	4620      	mov	r0, r4
    fa9a:	f00a fcb0 	bl	1a3fe <log_msg_put>
}
    fa9e:	bd10      	pop	{r4, pc}
    faa0:	0001d0c8 	.word	0x0001d0c8

0000faa4 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    faa4:	b570      	push	{r4, r5, r6, lr}
    faa6:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    faa8:	4b2c      	ldr	r3, [pc, #176]	; (fb5c <pm_system_resume+0xb8>)
    faaa:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    faac:	f004 031f 	and.w	r3, r4, #31
    fab0:	2201      	movs	r2, #1
    fab2:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fab4:	0961      	lsrs	r1, r4, #5
    fab6:	4b2a      	ldr	r3, [pc, #168]	; (fb60 <pm_system_resume+0xbc>)
    fab8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    fabc:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fabe:	f3bf 8f5b 	dmb	ish
    fac2:	e853 1f00 	ldrex	r1, [r3]
    fac6:	ea01 0500 	and.w	r5, r1, r0
    faca:	e843 5600 	strex	r6, r5, [r3]
    face:	2e00      	cmp	r6, #0
    fad0:	d1f7      	bne.n	fac2 <pm_system_resume+0x1e>
    fad2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    fad6:	420a      	tst	r2, r1
    fad8:	d03d      	beq.n	fb56 <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
    fada:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    fade:	009a      	lsls	r2, r3, #2
    fae0:	4b20      	ldr	r3, [pc, #128]	; (fb64 <pm_system_resume+0xc0>)
    fae2:	4413      	add	r3, r2
    fae4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    fae8:	ab04      	add	r3, sp, #16
    faea:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    faee:	4b1e      	ldr	r3, [pc, #120]	; (fb68 <pm_system_resume+0xc4>)
    faf0:	b163      	cbz	r3, fb0c <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
    faf2:	f00b f86d 	bl	1abd0 <pm_power_state_exit_post_ops>
	__asm__ volatile(
    faf6:	f04f 0340 	mov.w	r3, #64	; 0x40
    fafa:	f3ef 8611 	mrs	r6, BASEPRI
    fafe:	f383 8812 	msr	BASEPRI_MAX, r3
    fb02:	f3bf 8f6f 	isb	sy
    fb06:	4b19      	ldr	r3, [pc, #100]	; (fb6c <pm_system_resume+0xc8>)
    fb08:	681d      	ldr	r5, [r3, #0]
    fb0a:	e00a      	b.n	fb22 <pm_system_resume+0x7e>
	__asm__ volatile(
    fb0c:	2300      	movs	r3, #0
    fb0e:	f383 8811 	msr	BASEPRI, r3
    fb12:	f3bf 8f6f 	isb	sy
}
    fb16:	e7ee      	b.n	faf6 <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    fb18:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    fb1a:	b10d      	cbz	r5, fb20 <pm_system_resume+0x7c>
	return node->next;
    fb1c:	682b      	ldr	r3, [r5, #0]
    fb1e:	b16b      	cbz	r3, fb3c <pm_system_resume+0x98>
{
    fb20:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    fb22:	b15d      	cbz	r5, fb3c <pm_system_resume+0x98>
			callback = notifier->state_exit;
    fb24:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    fb26:	2a00      	cmp	r2, #0
    fb28:	d0f6      	beq.n	fb18 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
    fb2a:	4b0c      	ldr	r3, [pc, #48]	; (fb5c <pm_system_resume+0xb8>)
    fb2c:	7d1b      	ldrb	r3, [r3, #20]
    fb2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fb32:	0099      	lsls	r1, r3, #2
    fb34:	4b0b      	ldr	r3, [pc, #44]	; (fb64 <pm_system_resume+0xc0>)
    fb36:	5c58      	ldrb	r0, [r3, r1]
    fb38:	4790      	blx	r2
    fb3a:	e7ed      	b.n	fb18 <pm_system_resume+0x74>
	__asm__ volatile(
    fb3c:	f386 8811 	msr	BASEPRI, r6
    fb40:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    fb44:	4807      	ldr	r0, [pc, #28]	; (fb64 <pm_system_resume+0xc0>)
    fb46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fb4a:	00a2      	lsls	r2, r4, #2
    fb4c:	1881      	adds	r1, r0, r2
    fb4e:	2300      	movs	r3, #0
    fb50:	5083      	str	r3, [r0, r2]
    fb52:	604b      	str	r3, [r1, #4]
    fb54:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    fb56:	b004      	add	sp, #16
    fb58:	bd70      	pop	{r4, r5, r6, pc}
    fb5a:	bf00      	nop
    fb5c:	20002370 	.word	0x20002370
    fb60:	20001a90 	.word	0x20001a90
    fb64:	20001a94 	.word	0x20001a94
    fb68:	0001abd1 	.word	0x0001abd1
    fb6c:	20001a88 	.word	0x20001a88

0000fb70 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    fb70:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb72:	b089      	sub	sp, #36	; 0x24
    fb74:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    fb76:	4b55      	ldr	r3, [pc, #340]	; (fccc <pm_system_suspend+0x15c>)
    fb78:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    fb7a:	f004 031f 	and.w	r3, r4, #31
    fb7e:	2201      	movs	r2, #1
    fb80:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    fb82:	0961      	lsrs	r1, r4, #5
    fb84:	4b52      	ldr	r3, [pc, #328]	; (fcd0 <pm_system_suspend+0x160>)
    fb86:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fb8a:	f3bf 8f5b 	dmb	ish
    fb8e:	e853 1f00 	ldrex	r1, [r3]
    fb92:	ea41 0002 	orr.w	r0, r1, r2
    fb96:	e843 0600 	strex	r6, r0, [r3]
    fb9a:	2e00      	cmp	r6, #0
    fb9c:	d1f7      	bne.n	fb8e <pm_system_suspend+0x1e>
    fb9e:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    fba2:	420a      	tst	r2, r1
    fba4:	d017      	beq.n	fbd6 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    fba6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    fbaa:	4a4a      	ldr	r2, [pc, #296]	; (fcd4 <pm_system_suspend+0x164>)
    fbac:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    fbb0:	2b00      	cmp	r3, #0
    fbb2:	f000 8088 	beq.w	fcc6 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    fbb6:	f1b5 3fff 	cmp.w	r5, #4294967295
    fbba:	d11c      	bne.n	fbf6 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    fbbc:	f006 f97a 	bl	15eb4 <k_sched_lock>
	__asm__ volatile(
    fbc0:	f04f 0340 	mov.w	r3, #64	; 0x40
    fbc4:	f3ef 8611 	mrs	r6, BASEPRI
    fbc8:	f383 8812 	msr	BASEPRI_MAX, r3
    fbcc:	f3bf 8f6f 	isb	sy
	return list->head;
    fbd0:	4b41      	ldr	r3, [pc, #260]	; (fcd8 <pm_system_suspend+0x168>)
    fbd2:	681d      	ldr	r5, [r3, #0]
    fbd4:	e02a      	b.n	fc2c <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    fbd6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    fbda:	4b3e      	ldr	r3, [pc, #248]	; (fcd4 <pm_system_suspend+0x164>)
    fbdc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    fbe0:	466f      	mov	r7, sp
    fbe2:	462a      	mov	r2, r5
    fbe4:	4621      	mov	r1, r4
    fbe6:	4638      	mov	r0, r7
    fbe8:	f00a fea9 	bl	1a93e <pm_policy_next_state>
    fbec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    fbf0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    fbf4:	e7d7      	b.n	fba6 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    fbf6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    fbfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    fbfe:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    fc00:	0c59      	lsrs	r1, r3, #17
    fc02:	03d8      	lsls	r0, r3, #15
    fc04:	4e35      	ldr	r6, [pc, #212]	; (fcdc <pm_system_suspend+0x16c>)
    fc06:	4a36      	ldr	r2, [pc, #216]	; (fce0 <pm_system_suspend+0x170>)
    fc08:	2300      	movs	r3, #0
    fc0a:	1980      	adds	r0, r0, r6
    fc0c:	f04f 0600 	mov.w	r6, #0
    fc10:	eb46 0101 	adc.w	r1, r6, r1
    fc14:	f7f0 fe6a 	bl	8ec <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    fc18:	2101      	movs	r1, #1
    fc1a:	1a28      	subs	r0, r5, r0
    fc1c:	f00c fd6d 	bl	1c6fa <z_set_timeout_expiry>
    fc20:	e7cc      	b.n	fbbc <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    fc22:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    fc24:	b10d      	cbz	r5, fc2a <pm_system_suspend+0xba>
	return node->next;
    fc26:	682b      	ldr	r3, [r5, #0]
    fc28:	b16b      	cbz	r3, fc46 <pm_system_suspend+0xd6>
{
    fc2a:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    fc2c:	b15d      	cbz	r5, fc46 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    fc2e:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    fc30:	2a00      	cmp	r2, #0
    fc32:	d0f6      	beq.n	fc22 <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    fc34:	4b25      	ldr	r3, [pc, #148]	; (fccc <pm_system_suspend+0x15c>)
    fc36:	7d1b      	ldrb	r3, [r3, #20]
    fc38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fc3c:	4925      	ldr	r1, [pc, #148]	; (fcd4 <pm_system_suspend+0x164>)
    fc3e:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    fc42:	4790      	blx	r2
    fc44:	e7ed      	b.n	fc22 <pm_system_suspend+0xb2>
	__asm__ volatile(
    fc46:	f386 8811 	msr	BASEPRI, r6
    fc4a:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    fc4e:	f004 031f 	and.w	r3, r4, #31
    fc52:	2101      	movs	r1, #1
    fc54:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fc56:	0963      	lsrs	r3, r4, #5
    fc58:	4a22      	ldr	r2, [pc, #136]	; (fce4 <pm_system_suspend+0x174>)
    fc5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    fc5e:	f3bf 8f5b 	dmb	ish
    fc62:	e853 2f00 	ldrex	r2, [r3]
    fc66:	430a      	orrs	r2, r1
    fc68:	e843 2000 	strex	r0, r2, [r3]
    fc6c:	2800      	cmp	r0, #0
    fc6e:	d1f8      	bne.n	fc62 <pm_system_suspend+0xf2>
    fc70:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    fc74:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    fc78:	4a16      	ldr	r2, [pc, #88]	; (fcd4 <pm_system_suspend+0x164>)
    fc7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    fc7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    fc82:	ab08      	add	r3, sp, #32
    fc84:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    fc88:	4b17      	ldr	r3, [pc, #92]	; (fce8 <pm_system_suspend+0x178>)
    fc8a:	b10b      	cbz	r3, fc90 <pm_system_suspend+0x120>
		pm_power_state_set(info);
    fc8c:	f00a ff8d 	bl	1abaa <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    fc90:	f7ff ff08 	bl	faa4 <pm_system_resume>
	k_sched_unlock();
    fc94:	f006 fb0c 	bl	162b0 <k_sched_unlock>
	bool ret = true;
    fc98:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    fc9a:	f004 021f 	and.w	r2, r4, #31
    fc9e:	2301      	movs	r3, #1
    fca0:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fca2:	0964      	lsrs	r4, r4, #5
    fca4:	4a0a      	ldr	r2, [pc, #40]	; (fcd0 <pm_system_suspend+0x160>)
    fca6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    fcaa:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fcac:	f3bf 8f5b 	dmb	ish
    fcb0:	e854 2f00 	ldrex	r2, [r4]
    fcb4:	401a      	ands	r2, r3
    fcb6:	e844 2100 	strex	r1, r2, [r4]
    fcba:	2900      	cmp	r1, #0
    fcbc:	d1f8      	bne.n	fcb0 <pm_system_suspend+0x140>
    fcbe:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    fcc2:	b009      	add	sp, #36	; 0x24
    fcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    fcc6:	2000      	movs	r0, #0
    fcc8:	e7e7      	b.n	fc9a <pm_system_suspend+0x12a>
    fcca:	bf00      	nop
    fccc:	20002370 	.word	0x20002370
    fcd0:	20001aa0 	.word	0x20001aa0
    fcd4:	20001a94 	.word	0x20001a94
    fcd8:	20001a88 	.word	0x20001a88
    fcdc:	000f423f 	.word	0x000f423f
    fce0:	000f4240 	.word	0x000f4240
    fce4:	20001a90 	.word	0x20001a90
    fce8:	0001abab 	.word	0x0001abab

0000fcec <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    fcec:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    fcee:	4802      	ldr	r0, [pc, #8]	; (fcf8 <nrf_cc3xx_platform_abort_init+0xc>)
    fcf0:	f007 fa12 	bl	17118 <nrf_cc3xx_platform_set_abort>
}
    fcf4:	bd08      	pop	{r3, pc}
    fcf6:	bf00      	nop
    fcf8:	0001d0dc 	.word	0x0001d0dc

0000fcfc <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    fcfc:	b1d0      	cbz	r0, fd34 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    fcfe:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    fd00:	6842      	ldr	r2, [r0, #4]
    fd02:	2a04      	cmp	r2, #4
    fd04:	d005      	beq.n	fd12 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    fd06:	b1d2      	cbz	r2, fd3e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    fd08:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    fd0a:	f005 fdf1 	bl	158f0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    fd0e:	2000      	movs	r0, #0
    }
}
    fd10:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    fd12:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    fd14:	2200      	movs	r2, #0
    fd16:	f3bf 8f5b 	dmb	ish
    fd1a:	e853 1f00 	ldrex	r1, [r3]
    fd1e:	2901      	cmp	r1, #1
    fd20:	d103      	bne.n	fd2a <mutex_unlock_platform+0x2e>
    fd22:	e843 2000 	strex	r0, r2, [r3]
    fd26:	2800      	cmp	r0, #0
    fd28:	d1f7      	bne.n	fd1a <mutex_unlock_platform+0x1e>
    fd2a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    fd2e:	d104      	bne.n	fd3a <mutex_unlock_platform+0x3e>
    fd30:	4610      	mov	r0, r2
    fd32:	e7ed      	b.n	fd10 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    fd34:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    fd38:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    fd3a:	4802      	ldr	r0, [pc, #8]	; (fd44 <mutex_unlock_platform+0x48>)
    fd3c:	e7e8      	b.n	fd10 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    fd3e:	4802      	ldr	r0, [pc, #8]	; (fd48 <mutex_unlock_platform+0x4c>)
    fd40:	e7e6      	b.n	fd10 <mutex_unlock_platform+0x14>
    fd42:	bf00      	nop
    fd44:	ffff8fe9 	.word	0xffff8fe9
    fd48:	ffff8fea 	.word	0xffff8fea

0000fd4c <mutex_lock_platform>:
    if(mutex == NULL) {
    fd4c:	b320      	cbz	r0, fd98 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    fd4e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    fd50:	6842      	ldr	r2, [r0, #4]
    fd52:	2a04      	cmp	r2, #4
    fd54:	d002      	beq.n	fd5c <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    fd56:	b992      	cbnz	r2, fd7e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    fd58:	4811      	ldr	r0, [pc, #68]	; (fda0 <mutex_lock_platform+0x54>)
    fd5a:	e00f      	b.n	fd7c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    fd5c:	6803      	ldr	r3, [r0, #0]
    fd5e:	2201      	movs	r2, #1
    fd60:	f3bf 8f5b 	dmb	ish
    fd64:	e853 1f00 	ldrex	r1, [r3]
    fd68:	2900      	cmp	r1, #0
    fd6a:	d103      	bne.n	fd74 <mutex_lock_platform+0x28>
    fd6c:	e843 2000 	strex	r0, r2, [r3]
    fd70:	2800      	cmp	r0, #0
    fd72:	d1f7      	bne.n	fd64 <mutex_lock_platform+0x18>
    fd74:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    fd78:	d10c      	bne.n	fd94 <mutex_lock_platform+0x48>
    fd7a:	2000      	movs	r0, #0
}
    fd7c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    fd7e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    fd80:	f04f 32ff 	mov.w	r2, #4294967295
    fd84:	f04f 33ff 	mov.w	r3, #4294967295
    fd88:	f005 fd28 	bl	157dc <z_impl_k_mutex_lock>
        if (ret == 0) {
    fd8c:	2800      	cmp	r0, #0
    fd8e:	d0f5      	beq.n	fd7c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    fd90:	4804      	ldr	r0, [pc, #16]	; (fda4 <mutex_lock_platform+0x58>)
    fd92:	e7f3      	b.n	fd7c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    fd94:	4803      	ldr	r0, [pc, #12]	; (fda4 <mutex_lock_platform+0x58>)
    fd96:	e7f1      	b.n	fd7c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    fd98:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    fd9c:	4770      	bx	lr
    fd9e:	bf00      	nop
    fda0:	ffff8fea 	.word	0xffff8fea
    fda4:	ffff8fe9 	.word	0xffff8fe9

0000fda8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    fda8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    fdaa:	4604      	mov	r4, r0
    fdac:	b188      	cbz	r0, fdd2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    fdae:	6863      	ldr	r3, [r4, #4]
    fdb0:	2b04      	cmp	r3, #4
    fdb2:	d00d      	beq.n	fdd0 <mutex_free_platform+0x28>
    fdb4:	2b08      	cmp	r3, #8
    fdb6:	d00b      	beq.n	fdd0 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    fdb8:	b153      	cbz	r3, fdd0 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    fdba:	f013 0f02 	tst.w	r3, #2
    fdbe:	d00d      	beq.n	fddc <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    fdc0:	4621      	mov	r1, r4
    fdc2:	4809      	ldr	r0, [pc, #36]	; (fde8 <mutex_free_platform+0x40>)
    fdc4:	f00c f89c 	bl	1bf00 <k_mem_slab_free>
        mutex->mutex = NULL;
    fdc8:	2300      	movs	r3, #0
    fdca:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    fdcc:	2300      	movs	r3, #0
    fdce:	6063      	str	r3, [r4, #4]
}
    fdd0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    fdd2:	4b06      	ldr	r3, [pc, #24]	; (fdec <mutex_free_platform+0x44>)
    fdd4:	685b      	ldr	r3, [r3, #4]
    fdd6:	4806      	ldr	r0, [pc, #24]	; (fdf0 <mutex_free_platform+0x48>)
    fdd8:	4798      	blx	r3
    fdda:	e7e8      	b.n	fdae <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    fddc:	2214      	movs	r2, #20
    fdde:	2100      	movs	r1, #0
    fde0:	6820      	ldr	r0, [r4, #0]
    fde2:	f00a fec2 	bl	1ab6a <memset>
    fde6:	e7f1      	b.n	fdcc <mutex_free_platform+0x24>
    fde8:	20001aa4 	.word	0x20001aa4
    fdec:	200004bc 	.word	0x200004bc
    fdf0:	0001d0e4 	.word	0x0001d0e4

0000fdf4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    fdf4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    fdf6:	4604      	mov	r4, r0
    fdf8:	b178      	cbz	r0, fe1a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    fdfa:	6863      	ldr	r3, [r4, #4]
    fdfc:	2b04      	cmp	r3, #4
    fdfe:	d00b      	beq.n	fe18 <mutex_init_platform+0x24>
    fe00:	2b08      	cmp	r3, #8
    fe02:	d009      	beq.n	fe18 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    fe04:	b90b      	cbnz	r3, fe0a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    fe06:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    fe08:	b163      	cbz	r3, fe24 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    fe0a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    fe0c:	f00c f90b 	bl	1c026 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    fe10:	6863      	ldr	r3, [r4, #4]
    fe12:	f043 0301 	orr.w	r3, r3, #1
    fe16:	6063      	str	r3, [r4, #4]
}
    fe18:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    fe1a:	4b0f      	ldr	r3, [pc, #60]	; (fe58 <mutex_init_platform+0x64>)
    fe1c:	685b      	ldr	r3, [r3, #4]
    fe1e:	480f      	ldr	r0, [pc, #60]	; (fe5c <mutex_init_platform+0x68>)
    fe20:	4798      	blx	r3
    fe22:	e7ea      	b.n	fdfa <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    fe24:	f04f 32ff 	mov.w	r2, #4294967295
    fe28:	f04f 33ff 	mov.w	r3, #4294967295
    fe2c:	4621      	mov	r1, r4
    fe2e:	480c      	ldr	r0, [pc, #48]	; (fe60 <mutex_init_platform+0x6c>)
    fe30:	f005 fb90 	bl	15554 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    fe34:	b908      	cbnz	r0, fe3a <mutex_init_platform+0x46>
    fe36:	6823      	ldr	r3, [r4, #0]
    fe38:	b91b      	cbnz	r3, fe42 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    fe3a:	4b07      	ldr	r3, [pc, #28]	; (fe58 <mutex_init_platform+0x64>)
    fe3c:	685b      	ldr	r3, [r3, #4]
    fe3e:	4809      	ldr	r0, [pc, #36]	; (fe64 <mutex_init_platform+0x70>)
    fe40:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    fe42:	2214      	movs	r2, #20
    fe44:	2100      	movs	r1, #0
    fe46:	6820      	ldr	r0, [r4, #0]
    fe48:	f00a fe8f 	bl	1ab6a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    fe4c:	6863      	ldr	r3, [r4, #4]
    fe4e:	f043 0302 	orr.w	r3, r3, #2
    fe52:	6063      	str	r3, [r4, #4]
    fe54:	e7d9      	b.n	fe0a <mutex_init_platform+0x16>
    fe56:	bf00      	nop
    fe58:	200004bc 	.word	0x200004bc
    fe5c:	0001d0e4 	.word	0x0001d0e4
    fe60:	20001aa4 	.word	0x20001aa4
    fe64:	0001d10c 	.word	0x0001d10c

0000fe68 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    fe68:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    fe6a:	2340      	movs	r3, #64	; 0x40
    fe6c:	2214      	movs	r2, #20
    fe6e:	4904      	ldr	r1, [pc, #16]	; (fe80 <nrf_cc3xx_platform_mutex_init+0x18>)
    fe70:	4804      	ldr	r0, [pc, #16]	; (fe84 <nrf_cc3xx_platform_mutex_init+0x1c>)
    fe72:	f00c f837 	bl	1bee4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    fe76:	4904      	ldr	r1, [pc, #16]	; (fe88 <nrf_cc3xx_platform_mutex_init+0x20>)
    fe78:	4804      	ldr	r0, [pc, #16]	; (fe8c <nrf_cc3xx_platform_mutex_init+0x24>)
    fe7a:	f007 fa05 	bl	17288 <nrf_cc3xx_platform_set_mutexes>
}
    fe7e:	bd08      	pop	{r3, pc}
    fe80:	20001ac0 	.word	0x20001ac0
    fe84:	20001aa4 	.word	0x20001aa4
    fe88:	0001d14c 	.word	0x0001d14c
    fe8c:	0001d13c 	.word	0x0001d13c

0000fe90 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    fe90:	4901      	ldr	r1, [pc, #4]	; (fe98 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    fe92:	2210      	movs	r2, #16
	str	r2, [r1]
    fe94:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    fe96:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    fe98:	e000ed10 	.word	0xe000ed10

0000fe9c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    fe9c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    fe9e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    fea0:	f380 8811 	msr	BASEPRI, r0
	isb
    fea4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    fea8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    feac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    feae:	b662      	cpsie	i
	isb
    feb0:	f3bf 8f6f 	isb	sy

	bx	lr
    feb4:	4770      	bx	lr
    feb6:	bf00      	nop

0000feb8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    feb8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    feba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    febc:	f381 8811 	msr	BASEPRI, r1

	wfe
    fec0:	bf20      	wfe

	msr	BASEPRI, r0
    fec2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    fec6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    fec8:	4770      	bx	lr
    feca:	bf00      	nop

0000fecc <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    fecc:	b570      	push	{r4, r5, r6, lr}
    fece:	b082      	sub	sp, #8
    fed0:	4604      	mov	r4, r0
    fed2:	4d1f      	ldr	r5, [pc, #124]	; (ff50 <esf_dump+0x84>)
    fed4:	4b1f      	ldr	r3, [pc, #124]	; (ff54 <esf_dump+0x88>)
    fed6:	1aed      	subs	r5, r5, r3
    fed8:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    feda:	2601      	movs	r6, #1
    fedc:	f04f 0300 	mov.w	r3, #0
    fee0:	f366 0302 	bfi	r3, r6, #0, #3
    fee4:	f36f 03c5 	bfc	r3, #3, #3
    fee8:	f365 138f 	bfi	r3, r5, #6, #10
    feec:	f8ad 3000 	strh.w	r3, [sp]
    fef0:	6883      	ldr	r3, [r0, #8]
    fef2:	6842      	ldr	r2, [r0, #4]
    fef4:	6801      	ldr	r1, [r0, #0]
    fef6:	4818      	ldr	r0, [pc, #96]	; (ff58 <esf_dump+0x8c>)
    fef8:	f7ff f974 	bl	f1e4 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    fefc:	f04f 0300 	mov.w	r3, #0
    ff00:	f366 0302 	bfi	r3, r6, #0, #3
    ff04:	f36f 03c5 	bfc	r3, #3, #3
    ff08:	f365 138f 	bfi	r3, r5, #6, #10
    ff0c:	f8ad 3000 	strh.w	r3, [sp]
    ff10:	6963      	ldr	r3, [r4, #20]
    ff12:	6922      	ldr	r2, [r4, #16]
    ff14:	68e1      	ldr	r1, [r4, #12]
    ff16:	4811      	ldr	r0, [pc, #68]	; (ff5c <esf_dump+0x90>)
    ff18:	f7ff f964 	bl	f1e4 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    ff1c:	f04f 0200 	mov.w	r2, #0
    ff20:	f366 0202 	bfi	r2, r6, #0, #3
    ff24:	f36f 02c5 	bfc	r2, #3, #3
    ff28:	f365 128f 	bfi	r2, r5, #6, #10
    ff2c:	69e1      	ldr	r1, [r4, #28]
    ff2e:	480c      	ldr	r0, [pc, #48]	; (ff60 <esf_dump+0x94>)
    ff30:	f7ff f996 	bl	f260 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    ff34:	f04f 0200 	mov.w	r2, #0
    ff38:	f366 0202 	bfi	r2, r6, #0, #3
    ff3c:	f36f 02c5 	bfc	r2, #3, #3
    ff40:	f365 128f 	bfi	r2, r5, #6, #10
    ff44:	69a1      	ldr	r1, [r4, #24]
    ff46:	4807      	ldr	r0, [pc, #28]	; (ff64 <esf_dump+0x98>)
    ff48:	f7ff f98a 	bl	f260 <log_1>
		esf->basic.pc);
}
    ff4c:	b002      	add	sp, #8
    ff4e:	bd70      	pop	{r4, r5, r6, pc}
    ff50:	0001cc9c 	.word	0x0001cc9c
    ff54:	0001cc2c 	.word	0x0001cc2c
    ff58:	0001d160 	.word	0x0001d160
    ff5c:	0001d190 	.word	0x0001d190
    ff60:	0001d1c0 	.word	0x0001d1c0
    ff64:	0001d1d0 	.word	0x0001d1d0

0000ff68 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    ff68:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	db08      	blt.n	ff80 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ff6e:	f000 001f 	and.w	r0, r0, #31
    ff72:	095b      	lsrs	r3, r3, #5
    ff74:	2201      	movs	r2, #1
    ff76:	fa02 f000 	lsl.w	r0, r2, r0
    ff7a:	4a02      	ldr	r2, [pc, #8]	; (ff84 <arch_irq_enable+0x1c>)
    ff7c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    ff80:	4770      	bx	lr
    ff82:	bf00      	nop
    ff84:	e000e100 	.word	0xe000e100

0000ff88 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    ff88:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    ff8a:	2b00      	cmp	r3, #0
    ff8c:	db0d      	blt.n	ffaa <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ff8e:	f000 001f 	and.w	r0, r0, #31
    ff92:	095b      	lsrs	r3, r3, #5
    ff94:	2201      	movs	r2, #1
    ff96:	fa02 f000 	lsl.w	r0, r2, r0
    ff9a:	3320      	adds	r3, #32
    ff9c:	4a03      	ldr	r2, [pc, #12]	; (ffac <arch_irq_disable+0x24>)
    ff9e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ffa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ffa6:	f3bf 8f6f 	isb	sy
}
    ffaa:	4770      	bx	lr
    ffac:	e000e100 	.word	0xe000e100

0000ffb0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    ffb0:	0942      	lsrs	r2, r0, #5
    ffb2:	4b05      	ldr	r3, [pc, #20]	; (ffc8 <arch_irq_is_enabled+0x18>)
    ffb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ffb8:	f000 001f 	and.w	r0, r0, #31
    ffbc:	2301      	movs	r3, #1
    ffbe:	fa03 f000 	lsl.w	r0, r3, r0
}
    ffc2:	4010      	ands	r0, r2
    ffc4:	4770      	bx	lr
    ffc6:	bf00      	nop
    ffc8:	e000e100 	.word	0xe000e100

0000ffcc <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    ffcc:	f012 0f01 	tst.w	r2, #1
    ffd0:	d10c      	bne.n	ffec <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    ffd2:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ffd4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ffd6:	2b00      	cmp	r3, #0
    ffd8:	db0a      	blt.n	fff0 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ffda:	0149      	lsls	r1, r1, #5
    ffdc:	b2c9      	uxtb	r1, r1
    ffde:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    ffe2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    ffe6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    ffea:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    ffec:	2100      	movs	r1, #0
    ffee:	e7f1      	b.n	ffd4 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fff0:	f000 000f 	and.w	r0, r0, #15
    fff4:	0149      	lsls	r1, r1, #5
    fff6:	b2c9      	uxtb	r1, r1
    fff8:	4b01      	ldr	r3, [pc, #4]	; (10000 <z_arm_irq_priority_set+0x34>)
    fffa:	5419      	strb	r1, [r3, r0]
}
    fffc:	4770      	bx	lr
    fffe:	bf00      	nop
   10000:	e000ed14 	.word	0xe000ed14

00010004 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   10004:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   10006:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   10008:	4b05      	ldr	r3, [pc, #20]	; (10020 <_arch_isr_direct_pm+0x1c>)
   1000a:	699b      	ldr	r3, [r3, #24]
   1000c:	b90b      	cbnz	r3, 10012 <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1000e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   10010:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   10012:	4b03      	ldr	r3, [pc, #12]	; (10020 <_arch_isr_direct_pm+0x1c>)
   10014:	2200      	movs	r2, #0
   10016:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   10018:	f00b ffe9 	bl	1bfee <z_pm_save_idle_exit>
   1001c:	e7f7      	b.n	1000e <_arch_isr_direct_pm+0xa>
   1001e:	bf00      	nop
   10020:	20002370 	.word	0x20002370

00010024 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10024:	bf30      	wfi
    b z_SysNmiOnReset
   10026:	f7ff bffd 	b.w	10024 <z_SysNmiOnReset>
   1002a:	bf00      	nop

0001002c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1002c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1002e:	4b0b      	ldr	r3, [pc, #44]	; (1005c <z_arm_prep_c+0x30>)
   10030:	4a0b      	ldr	r2, [pc, #44]	; (10060 <z_arm_prep_c+0x34>)
   10032:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10036:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   10038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1003c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10040:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10044:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1004c:	f005 fa0c 	bl	15468 <z_bss_zero>
	z_data_copy();
   10050:	f006 fabe 	bl	165d0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10054:	f000 fcb6 	bl	109c4 <z_arm_interrupt_init>
	z_cstart();
   10058:	f005 fa12 	bl	15480 <z_cstart>
   1005c:	e000ed00 	.word	0xe000ed00
   10060:	00000000 	.word	0x00000000

00010064 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10064:	4a0a      	ldr	r2, [pc, #40]	; (10090 <arch_swap+0x2c>)
   10066:	6893      	ldr	r3, [r2, #8]
   10068:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   1006c:	4909      	ldr	r1, [pc, #36]	; (10094 <arch_swap+0x30>)
   1006e:	6809      	ldr	r1, [r1, #0]
   10070:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10074:	4908      	ldr	r1, [pc, #32]	; (10098 <arch_swap+0x34>)
   10076:	684b      	ldr	r3, [r1, #4]
   10078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1007c:	604b      	str	r3, [r1, #4]
   1007e:	2300      	movs	r3, #0
   10080:	f383 8811 	msr	BASEPRI, r3
   10084:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10088:	6893      	ldr	r3, [r2, #8]
}
   1008a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   1008e:	4770      	bx	lr
   10090:	20002370 	.word	0x20002370
   10094:	0001df80 	.word	0x0001df80
   10098:	e000ed00 	.word	0xe000ed00

0001009c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1009c:	4913      	ldr	r1, [pc, #76]	; (100ec <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1009e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   100a0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   100a4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   100a6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   100aa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   100ae:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   100b0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   100b4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   100b8:	4f0d      	ldr	r7, [pc, #52]	; (100f0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   100ba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   100be:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   100c0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   100c2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   100c4:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   100c8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   100ca:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   100ce:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   100d2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   100d4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   100d6:	f000 fd17 	bl	10b08 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   100da:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   100de:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   100e2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   100e6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   100ea:	4770      	bx	lr
    ldr r1, =_kernel
   100ec:	20002370 	.word	0x20002370
    ldr v4, =_SCS_ICSR
   100f0:	e000ed04 	.word	0xe000ed04

000100f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   100f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   100f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   100fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   100fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10102:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10104:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10108:	2902      	cmp	r1, #2
    beq _oops
   1010a:	d0ff      	beq.n	1010c <_oops>

0001010c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1010c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1010e:	f00a fc2b 	bl	1a968 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   10112:	bd01      	pop	{r0, pc}

00010114 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   10114:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10116:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   1011a:	490d      	ldr	r1, [pc, #52]	; (10150 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   1011c:	f021 0101 	bic.w	r1, r1, #1
   10120:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   10124:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   10128:	9b01      	ldr	r3, [sp, #4]
   1012a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1012e:	9b02      	ldr	r3, [sp, #8]
   10130:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   10134:	9b03      	ldr	r3, [sp, #12]
   10136:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1013a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1013e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   10142:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   10144:	2300      	movs	r3, #0
   10146:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1014a:	bc10      	pop	{r4}
   1014c:	4770      	bx	lr
   1014e:	bf00      	nop
   10150:	00019ceb 	.word	0x00019ceb

00010154 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   10154:	4b16      	ldr	r3, [pc, #88]	; (101b0 <z_check_thread_stack_fail+0x5c>)
   10156:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   10158:	b1da      	cbz	r2, 10192 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1015a:	f110 0f16 	cmn.w	r0, #22
   1015e:	d01a      	beq.n	10196 <z_check_thread_stack_fail+0x42>
{
   10160:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   10162:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   10166:	f1a3 0420 	sub.w	r4, r3, #32
   1016a:	4284      	cmp	r4, r0
   1016c:	d805      	bhi.n	1017a <z_check_thread_stack_fail+0x26>
   1016e:	4283      	cmp	r3, r0
   10170:	d908      	bls.n	10184 <z_check_thread_stack_fail+0x30>
   10172:	428b      	cmp	r3, r1
   10174:	d808      	bhi.n	10188 <z_check_thread_stack_fail+0x34>
   10176:	2100      	movs	r1, #0
   10178:	e000      	b.n	1017c <z_check_thread_stack_fail+0x28>
   1017a:	2100      	movs	r1, #0
   1017c:	b931      	cbnz	r1, 1018c <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1017e:	2000      	movs	r0, #0
}
   10180:	bc10      	pop	{r4}
   10182:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   10184:	2100      	movs	r1, #0
   10186:	e7f9      	b.n	1017c <z_check_thread_stack_fail+0x28>
   10188:	2101      	movs	r1, #1
   1018a:	e7f7      	b.n	1017c <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   1018c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   10190:	e7f6      	b.n	10180 <z_check_thread_stack_fail+0x2c>
		return 0;
   10192:	2000      	movs	r0, #0
   10194:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   10196:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1019a:	428b      	cmp	r3, r1
   1019c:	bf94      	ite	ls
   1019e:	2100      	movls	r1, #0
   101a0:	2101      	movhi	r1, #1
   101a2:	b909      	cbnz	r1, 101a8 <z_check_thread_stack_fail+0x54>
	return 0;
   101a4:	2000      	movs	r0, #0
}
   101a6:	4770      	bx	lr
		return thread->stack_info.start;
   101a8:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   101ac:	4770      	bx	lr
   101ae:	bf00      	nop
   101b0:	20002370 	.word	0x20002370

000101b4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   101b4:	b508      	push	{r3, lr}
   101b6:	460d      	mov	r5, r1
   101b8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   101ba:	4b08      	ldr	r3, [pc, #32]	; (101dc <arch_switch_to_main_thread+0x28>)
   101bc:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   101be:	f000 fca3 	bl	10b08 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   101c2:	4620      	mov	r0, r4
   101c4:	f385 8809 	msr	PSP, r5
   101c8:	2100      	movs	r1, #0
   101ca:	b663      	cpsie	if
   101cc:	f381 8811 	msr	BASEPRI, r1
   101d0:	f3bf 8f6f 	isb	sy
   101d4:	2200      	movs	r2, #0
   101d6:	2300      	movs	r3, #0
   101d8:	f009 fd87 	bl	19cea <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   101dc:	20002370 	.word	0x20002370

000101e0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   101e0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   101e2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   101e4:	4a0b      	ldr	r2, [pc, #44]	; (10214 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   101e6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   101e8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   101ea:	bf1e      	ittt	ne
	movne	r1, #0
   101ec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   101ee:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   101f0:	f00b fefd 	blne	1bfee <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   101f4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   101f6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   101fa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   101fe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10202:	4905      	ldr	r1, [pc, #20]	; (10218 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10204:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10206:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10208:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1020a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1020e:	4903      	ldr	r1, [pc, #12]	; (1021c <_isr_wrapper+0x3c>)
	bx r1
   10210:	4708      	bx	r1
   10212:	0000      	.short	0x0000
	ldr r2, =_kernel
   10214:	20002370 	.word	0x20002370
	ldr r1, =_sw_isr_table
   10218:	0001caac 	.word	0x0001caac
	ldr r1, =z_arm_int_exit
   1021c:	00010221 	.word	0x00010221

00010220 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10220:	4b04      	ldr	r3, [pc, #16]	; (10234 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10222:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10224:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10226:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10228:	d003      	beq.n	10232 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1022a:	4903      	ldr	r1, [pc, #12]	; (10238 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1022c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10230:	600a      	str	r2, [r1, #0]

00010232 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10232:	4770      	bx	lr
	ldr r3, =_kernel
   10234:	20002370 	.word	0x20002370
	ldr r1, =_SCS_ICSR
   10238:	e000ed04 	.word	0xe000ed04

0001023c <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   1023c:	b508      	push	{r3, lr}
   1023e:	4b4e      	ldr	r3, [pc, #312]	; (10378 <usage_fault+0x13c>)
   10240:	4a4e      	ldr	r2, [pc, #312]	; (1037c <usage_fault+0x140>)
   10242:	1a9b      	subs	r3, r3, r2
   10244:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   10246:	f04f 0100 	mov.w	r1, #0
   1024a:	2201      	movs	r2, #1
   1024c:	f362 0102 	bfi	r1, r2, #0, #3
   10250:	f36f 01c5 	bfc	r1, #3, #3
   10254:	f363 118f 	bfi	r1, r3, #6, #10
   10258:	4849      	ldr	r0, [pc, #292]	; (10380 <usage_fault+0x144>)
   1025a:	f7ff f8b7 	bl	f3cc <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1025e:	4b49      	ldr	r3, [pc, #292]	; (10384 <usage_fault+0x148>)
   10260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10262:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   10266:	d121      	bne.n	102ac <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10268:	4b46      	ldr	r3, [pc, #280]	; (10384 <usage_fault+0x148>)
   1026a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1026c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   10270:	d12d      	bne.n	102ce <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10272:	4b44      	ldr	r3, [pc, #272]	; (10384 <usage_fault+0x148>)
   10274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10276:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1027a:	d139      	bne.n	102f0 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1027c:	4b41      	ldr	r3, [pc, #260]	; (10384 <usage_fault+0x148>)
   1027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10280:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   10284:	d145      	bne.n	10312 <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10286:	4b3f      	ldr	r3, [pc, #252]	; (10384 <usage_fault+0x148>)
   10288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1028a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1028e:	d151      	bne.n	10334 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   10290:	4b3c      	ldr	r3, [pc, #240]	; (10384 <usage_fault+0x148>)
   10292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10294:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   10298:	d15d      	bne.n	10356 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1029a:	4a3a      	ldr	r2, [pc, #232]	; (10384 <usage_fault+0x148>)
   1029c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1029e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   102a2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   102a6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   102a8:	2000      	movs	r0, #0
   102aa:	bd08      	pop	{r3, pc}
   102ac:	4b32      	ldr	r3, [pc, #200]	; (10378 <usage_fault+0x13c>)
   102ae:	4a33      	ldr	r2, [pc, #204]	; (1037c <usage_fault+0x140>)
   102b0:	1a9b      	subs	r3, r3, r2
   102b2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   102b4:	f04f 0100 	mov.w	r1, #0
   102b8:	2201      	movs	r2, #1
   102ba:	f362 0102 	bfi	r1, r2, #0, #3
   102be:	f36f 01c5 	bfc	r1, #3, #3
   102c2:	f363 118f 	bfi	r1, r3, #6, #10
   102c6:	4830      	ldr	r0, [pc, #192]	; (10388 <usage_fault+0x14c>)
   102c8:	f7ff f880 	bl	f3cc <log_0>
   102cc:	e7cc      	b.n	10268 <usage_fault+0x2c>
   102ce:	4b2a      	ldr	r3, [pc, #168]	; (10378 <usage_fault+0x13c>)
   102d0:	4a2a      	ldr	r2, [pc, #168]	; (1037c <usage_fault+0x140>)
   102d2:	1a9b      	subs	r3, r3, r2
   102d4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   102d6:	f04f 0100 	mov.w	r1, #0
   102da:	2201      	movs	r2, #1
   102dc:	f362 0102 	bfi	r1, r2, #0, #3
   102e0:	f36f 01c5 	bfc	r1, #3, #3
   102e4:	f363 118f 	bfi	r1, r3, #6, #10
   102e8:	4828      	ldr	r0, [pc, #160]	; (1038c <usage_fault+0x150>)
   102ea:	f7ff f86f 	bl	f3cc <log_0>
   102ee:	e7c0      	b.n	10272 <usage_fault+0x36>
   102f0:	4b21      	ldr	r3, [pc, #132]	; (10378 <usage_fault+0x13c>)
   102f2:	4a22      	ldr	r2, [pc, #136]	; (1037c <usage_fault+0x140>)
   102f4:	1a9b      	subs	r3, r3, r2
   102f6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   102f8:	f04f 0100 	mov.w	r1, #0
   102fc:	2201      	movs	r2, #1
   102fe:	f362 0102 	bfi	r1, r2, #0, #3
   10302:	f36f 01c5 	bfc	r1, #3, #3
   10306:	f363 118f 	bfi	r1, r3, #6, #10
   1030a:	4821      	ldr	r0, [pc, #132]	; (10390 <usage_fault+0x154>)
   1030c:	f7ff f85e 	bl	f3cc <log_0>
   10310:	e7b4      	b.n	1027c <usage_fault+0x40>
   10312:	4b19      	ldr	r3, [pc, #100]	; (10378 <usage_fault+0x13c>)
   10314:	4a19      	ldr	r2, [pc, #100]	; (1037c <usage_fault+0x140>)
   10316:	1a9b      	subs	r3, r3, r2
   10318:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1031a:	f04f 0100 	mov.w	r1, #0
   1031e:	2201      	movs	r2, #1
   10320:	f362 0102 	bfi	r1, r2, #0, #3
   10324:	f36f 01c5 	bfc	r1, #3, #3
   10328:	f363 118f 	bfi	r1, r3, #6, #10
   1032c:	4819      	ldr	r0, [pc, #100]	; (10394 <usage_fault+0x158>)
   1032e:	f7ff f84d 	bl	f3cc <log_0>
   10332:	e7a8      	b.n	10286 <usage_fault+0x4a>
   10334:	4b10      	ldr	r3, [pc, #64]	; (10378 <usage_fault+0x13c>)
   10336:	4a11      	ldr	r2, [pc, #68]	; (1037c <usage_fault+0x140>)
   10338:	1a9b      	subs	r3, r3, r2
   1033a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1033c:	f04f 0100 	mov.w	r1, #0
   10340:	2201      	movs	r2, #1
   10342:	f362 0102 	bfi	r1, r2, #0, #3
   10346:	f36f 01c5 	bfc	r1, #3, #3
   1034a:	f363 118f 	bfi	r1, r3, #6, #10
   1034e:	4812      	ldr	r0, [pc, #72]	; (10398 <usage_fault+0x15c>)
   10350:	f7ff f83c 	bl	f3cc <log_0>
   10354:	e79c      	b.n	10290 <usage_fault+0x54>
   10356:	4b08      	ldr	r3, [pc, #32]	; (10378 <usage_fault+0x13c>)
   10358:	4a08      	ldr	r2, [pc, #32]	; (1037c <usage_fault+0x140>)
   1035a:	1a9b      	subs	r3, r3, r2
   1035c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1035e:	f04f 0100 	mov.w	r1, #0
   10362:	2201      	movs	r2, #1
   10364:	f362 0102 	bfi	r1, r2, #0, #3
   10368:	f36f 01c5 	bfc	r1, #3, #3
   1036c:	f363 118f 	bfi	r1, r3, #6, #10
   10370:	480a      	ldr	r0, [pc, #40]	; (1039c <usage_fault+0x160>)
   10372:	f7ff f82b 	bl	f3cc <log_0>
   10376:	e790      	b.n	1029a <usage_fault+0x5e>
   10378:	0001cc9c 	.word	0x0001cc9c
   1037c:	0001cc2c 	.word	0x0001cc2c
   10380:	0001d200 	.word	0x0001d200
   10384:	e000ed00 	.word	0xe000ed00
   10388:	0001d218 	.word	0x0001d218
   1038c:	0001d22c 	.word	0x0001d22c
   10390:	0001d248 	.word	0x0001d248
   10394:	0001d268 	.word	0x0001d268
   10398:	0001d290 	.word	0x0001d290
   1039c:	0001d2ac 	.word	0x0001d2ac

000103a0 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   103a0:	b508      	push	{r3, lr}
	*recoverable = false;
   103a2:	2200      	movs	r2, #0
   103a4:	700a      	strb	r2, [r1, #0]
   103a6:	4b08      	ldr	r3, [pc, #32]	; (103c8 <debug_monitor+0x28>)
   103a8:	4908      	ldr	r1, [pc, #32]	; (103cc <debug_monitor+0x2c>)
   103aa:	1a5b      	subs	r3, r3, r1
   103ac:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   103ae:	f04f 0100 	mov.w	r1, #0
   103b2:	2001      	movs	r0, #1
   103b4:	f360 0102 	bfi	r1, r0, #0, #3
   103b8:	f362 01c5 	bfi	r1, r2, #3, #3
   103bc:	f363 118f 	bfi	r1, r3, #6, #10
   103c0:	4803      	ldr	r0, [pc, #12]	; (103d0 <debug_monitor+0x30>)
   103c2:	f7ff f803 	bl	f3cc <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   103c6:	bd08      	pop	{r3, pc}
   103c8:	0001cc9c 	.word	0x0001cc9c
   103cc:	0001cc2c 	.word	0x0001cc2c
   103d0:	0001d2d8 	.word	0x0001d2d8

000103d4 <bus_fault>:
{
   103d4:	b570      	push	{r4, r5, r6, lr}
   103d6:	4605      	mov	r5, r0
   103d8:	460e      	mov	r6, r1
   103da:	4614      	mov	r4, r2
   103dc:	4b5e      	ldr	r3, [pc, #376]	; (10558 <bus_fault+0x184>)
   103de:	4a5f      	ldr	r2, [pc, #380]	; (1055c <bus_fault+0x188>)
   103e0:	1a9b      	subs	r3, r3, r2
   103e2:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   103e4:	f04f 0100 	mov.w	r1, #0
   103e8:	2201      	movs	r2, #1
   103ea:	f362 0102 	bfi	r1, r2, #0, #3
   103ee:	f36f 01c5 	bfc	r1, #3, #3
   103f2:	f363 118f 	bfi	r1, r3, #6, #10
   103f6:	485a      	ldr	r0, [pc, #360]	; (10560 <bus_fault+0x18c>)
   103f8:	f7fe ffe8 	bl	f3cc <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   103fc:	4b59      	ldr	r3, [pc, #356]	; (10564 <bus_fault+0x190>)
   103fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10400:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   10404:	d124      	bne.n	10450 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10406:	4b57      	ldr	r3, [pc, #348]	; (10564 <bus_fault+0x190>)
   10408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1040a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1040e:	d130      	bne.n	10472 <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10410:	4b54      	ldr	r3, [pc, #336]	; (10564 <bus_fault+0x190>)
   10412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10414:	f413 7f00 	tst.w	r3, #512	; 0x200
   10418:	d13c      	bne.n	10494 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1041a:	4b52      	ldr	r3, [pc, #328]	; (10564 <bus_fault+0x190>)
   1041c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1041e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   10422:	d165      	bne.n	104f0 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10424:	4b4f      	ldr	r3, [pc, #316]	; (10564 <bus_fault+0x190>)
   10426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10428:	f413 7f80 	tst.w	r3, #256	; 0x100
   1042c:	d171      	bne.n	10512 <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1042e:	4b4d      	ldr	r3, [pc, #308]	; (10564 <bus_fault+0x190>)
   10430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10432:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   10436:	d17d      	bne.n	10534 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10438:	4a4a      	ldr	r2, [pc, #296]	; (10564 <bus_fault+0x190>)
   1043a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1043c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10440:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10442:	2101      	movs	r1, #1
   10444:	4628      	mov	r0, r5
   10446:	f00a faa1 	bl	1a98c <memory_fault_recoverable>
   1044a:	7020      	strb	r0, [r4, #0]
}
   1044c:	2000      	movs	r0, #0
   1044e:	bd70      	pop	{r4, r5, r6, pc}
   10450:	4b41      	ldr	r3, [pc, #260]	; (10558 <bus_fault+0x184>)
   10452:	4a42      	ldr	r2, [pc, #264]	; (1055c <bus_fault+0x188>)
   10454:	1a9b      	subs	r3, r3, r2
   10456:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   10458:	f04f 0100 	mov.w	r1, #0
   1045c:	2201      	movs	r2, #1
   1045e:	f362 0102 	bfi	r1, r2, #0, #3
   10462:	f36f 01c5 	bfc	r1, #3, #3
   10466:	f363 118f 	bfi	r1, r3, #6, #10
   1046a:	483f      	ldr	r0, [pc, #252]	; (10568 <bus_fault+0x194>)
   1046c:	f7fe ffae 	bl	f3cc <log_0>
   10470:	e7c9      	b.n	10406 <bus_fault+0x32>
   10472:	4b39      	ldr	r3, [pc, #228]	; (10558 <bus_fault+0x184>)
   10474:	4a39      	ldr	r2, [pc, #228]	; (1055c <bus_fault+0x188>)
   10476:	1a9b      	subs	r3, r3, r2
   10478:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   1047a:	f04f 0100 	mov.w	r1, #0
   1047e:	2201      	movs	r2, #1
   10480:	f362 0102 	bfi	r1, r2, #0, #3
   10484:	f36f 01c5 	bfc	r1, #3, #3
   10488:	f363 118f 	bfi	r1, r3, #6, #10
   1048c:	4837      	ldr	r0, [pc, #220]	; (1056c <bus_fault+0x198>)
   1048e:	f7fe ff9d 	bl	f3cc <log_0>
   10492:	e7bd      	b.n	10410 <bus_fault+0x3c>
   10494:	4b30      	ldr	r3, [pc, #192]	; (10558 <bus_fault+0x184>)
   10496:	4a31      	ldr	r2, [pc, #196]	; (1055c <bus_fault+0x188>)
   10498:	1a9b      	subs	r3, r3, r2
   1049a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   1049c:	f04f 0100 	mov.w	r1, #0
   104a0:	2201      	movs	r2, #1
   104a2:	f362 0102 	bfi	r1, r2, #0, #3
   104a6:	f36f 01c5 	bfc	r1, #3, #3
   104aa:	f363 118f 	bfi	r1, r3, #6, #10
   104ae:	4830      	ldr	r0, [pc, #192]	; (10570 <bus_fault+0x19c>)
   104b0:	f7fe ff8c 	bl	f3cc <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   104b4:	4b2b      	ldr	r3, [pc, #172]	; (10564 <bus_fault+0x190>)
   104b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   104b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   104ba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   104be:	d0ac      	beq.n	1041a <bus_fault+0x46>
   104c0:	4b25      	ldr	r3, [pc, #148]	; (10558 <bus_fault+0x184>)
   104c2:	4a26      	ldr	r2, [pc, #152]	; (1055c <bus_fault+0x188>)
   104c4:	1a9b      	subs	r3, r3, r2
   104c6:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   104c8:	f04f 0200 	mov.w	r2, #0
   104cc:	2001      	movs	r0, #1
   104ce:	f360 0202 	bfi	r2, r0, #0, #3
   104d2:	f36f 02c5 	bfc	r2, #3, #3
   104d6:	f363 128f 	bfi	r2, r3, #6, #10
   104da:	4826      	ldr	r0, [pc, #152]	; (10574 <bus_fault+0x1a0>)
   104dc:	f7fe fec0 	bl	f260 <log_1>
			if (from_hard_fault != 0) {
   104e0:	2e00      	cmp	r6, #0
   104e2:	d09a      	beq.n	1041a <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   104e4:	4a1f      	ldr	r2, [pc, #124]	; (10564 <bus_fault+0x190>)
   104e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   104e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   104ec:	6293      	str	r3, [r2, #40]	; 0x28
   104ee:	e794      	b.n	1041a <bus_fault+0x46>
   104f0:	4b19      	ldr	r3, [pc, #100]	; (10558 <bus_fault+0x184>)
   104f2:	4a1a      	ldr	r2, [pc, #104]	; (1055c <bus_fault+0x188>)
   104f4:	1a9b      	subs	r3, r3, r2
   104f6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   104f8:	f04f 0100 	mov.w	r1, #0
   104fc:	2201      	movs	r2, #1
   104fe:	f362 0102 	bfi	r1, r2, #0, #3
   10502:	f36f 01c5 	bfc	r1, #3, #3
   10506:	f363 118f 	bfi	r1, r3, #6, #10
   1050a:	481b      	ldr	r0, [pc, #108]	; (10578 <bus_fault+0x1a4>)
   1050c:	f7fe ff5e 	bl	f3cc <log_0>
   10510:	e788      	b.n	10424 <bus_fault+0x50>
   10512:	4b11      	ldr	r3, [pc, #68]	; (10558 <bus_fault+0x184>)
   10514:	4a11      	ldr	r2, [pc, #68]	; (1055c <bus_fault+0x188>)
   10516:	1a9b      	subs	r3, r3, r2
   10518:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   1051a:	f04f 0100 	mov.w	r1, #0
   1051e:	2201      	movs	r2, #1
   10520:	f362 0102 	bfi	r1, r2, #0, #3
   10524:	f36f 01c5 	bfc	r1, #3, #3
   10528:	f363 118f 	bfi	r1, r3, #6, #10
   1052c:	4813      	ldr	r0, [pc, #76]	; (1057c <bus_fault+0x1a8>)
   1052e:	f7fe ff4d 	bl	f3cc <log_0>
   10532:	e781      	b.n	10438 <bus_fault+0x64>
   10534:	4b08      	ldr	r3, [pc, #32]	; (10558 <bus_fault+0x184>)
   10536:	4a09      	ldr	r2, [pc, #36]	; (1055c <bus_fault+0x188>)
   10538:	1a9b      	subs	r3, r3, r2
   1053a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1053c:	f04f 0100 	mov.w	r1, #0
   10540:	2201      	movs	r2, #1
   10542:	f362 0102 	bfi	r1, r2, #0, #3
   10546:	f36f 01c5 	bfc	r1, #3, #3
   1054a:	f363 118f 	bfi	r1, r3, #6, #10
   1054e:	480c      	ldr	r0, [pc, #48]	; (10580 <bus_fault+0x1ac>)
   10550:	f7fe ff3c 	bl	f3cc <log_0>
   10554:	e770      	b.n	10438 <bus_fault+0x64>
   10556:	bf00      	nop
   10558:	0001cc9c 	.word	0x0001cc9c
   1055c:	0001cc2c 	.word	0x0001cc2c
   10560:	0001d2fc 	.word	0x0001d2fc
   10564:	e000ed00 	.word	0xe000ed00
   10568:	0001d314 	.word	0x0001d314
   1056c:	0001d328 	.word	0x0001d328
   10570:	0001d33c 	.word	0x0001d33c
   10574:	0001d358 	.word	0x0001d358
   10578:	0001d370 	.word	0x0001d370
   1057c:	0001d38c 	.word	0x0001d38c
   10580:	0001d3a4 	.word	0x0001d3a4

00010584 <mem_manage_fault>:
{
   10584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10586:	4605      	mov	r5, r0
   10588:	460c      	mov	r4, r1
   1058a:	4616      	mov	r6, r2
   1058c:	4b64      	ldr	r3, [pc, #400]	; (10720 <mem_manage_fault+0x19c>)
   1058e:	4a65      	ldr	r2, [pc, #404]	; (10724 <mem_manage_fault+0x1a0>)
   10590:	1a9b      	subs	r3, r3, r2
   10592:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   10594:	f04f 0100 	mov.w	r1, #0
   10598:	2201      	movs	r2, #1
   1059a:	f362 0102 	bfi	r1, r2, #0, #3
   1059e:	f36f 01c5 	bfc	r1, #3, #3
   105a2:	f363 118f 	bfi	r1, r3, #6, #10
   105a6:	4860      	ldr	r0, [pc, #384]	; (10728 <mem_manage_fault+0x1a4>)
   105a8:	f7fe ff10 	bl	f3cc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   105ac:	4b5f      	ldr	r3, [pc, #380]	; (1072c <mem_manage_fault+0x1a8>)
   105ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   105b0:	f013 0f10 	tst.w	r3, #16
   105b4:	d132      	bne.n	1061c <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   105b6:	4b5d      	ldr	r3, [pc, #372]	; (1072c <mem_manage_fault+0x1a8>)
   105b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   105ba:	f013 0f08 	tst.w	r3, #8
   105be:	d13e      	bne.n	1063e <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   105c0:	4b5a      	ldr	r3, [pc, #360]	; (1072c <mem_manage_fault+0x1a8>)
   105c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   105c4:	f013 0f02 	tst.w	r3, #2
   105c8:	d14a      	bne.n	10660 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   105ca:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   105ce:	4b57      	ldr	r3, [pc, #348]	; (1072c <mem_manage_fault+0x1a8>)
   105d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   105d2:	f013 0f01 	tst.w	r3, #1
   105d6:	d175      	bne.n	106c4 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   105d8:	4b54      	ldr	r3, [pc, #336]	; (1072c <mem_manage_fault+0x1a8>)
   105da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   105dc:	f013 0f20 	tst.w	r3, #32
   105e0:	f040 8081 	bne.w	106e6 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   105e4:	4b51      	ldr	r3, [pc, #324]	; (1072c <mem_manage_fault+0x1a8>)
   105e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   105e8:	f013 0f10 	tst.w	r3, #16
   105ec:	d104      	bne.n	105f8 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   105ee:	4b4f      	ldr	r3, [pc, #316]	; (1072c <mem_manage_fault+0x1a8>)
   105f0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   105f2:	f014 0402 	ands.w	r4, r4, #2
   105f6:	d005      	beq.n	10604 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   105f8:	4b4c      	ldr	r3, [pc, #304]	; (1072c <mem_manage_fault+0x1a8>)
   105fa:	685c      	ldr	r4, [r3, #4]
   105fc:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   10600:	f040 8082 	bne.w	10708 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10604:	4a49      	ldr	r2, [pc, #292]	; (1072c <mem_manage_fault+0x1a8>)
   10606:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10608:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1060c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1060e:	2101      	movs	r1, #1
   10610:	4628      	mov	r0, r5
   10612:	f00a f9bb 	bl	1a98c <memory_fault_recoverable>
   10616:	7030      	strb	r0, [r6, #0]
}
   10618:	4620      	mov	r0, r4
   1061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1061c:	4b40      	ldr	r3, [pc, #256]	; (10720 <mem_manage_fault+0x19c>)
   1061e:	4a41      	ldr	r2, [pc, #260]	; (10724 <mem_manage_fault+0x1a0>)
   10620:	1a9b      	subs	r3, r3, r2
   10622:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   10624:	f04f 0100 	mov.w	r1, #0
   10628:	2201      	movs	r2, #1
   1062a:	f362 0102 	bfi	r1, r2, #0, #3
   1062e:	f36f 01c5 	bfc	r1, #3, #3
   10632:	f363 118f 	bfi	r1, r3, #6, #10
   10636:	483e      	ldr	r0, [pc, #248]	; (10730 <mem_manage_fault+0x1ac>)
   10638:	f7fe fec8 	bl	f3cc <log_0>
   1063c:	e7bb      	b.n	105b6 <mem_manage_fault+0x32>
   1063e:	4b38      	ldr	r3, [pc, #224]	; (10720 <mem_manage_fault+0x19c>)
   10640:	4a38      	ldr	r2, [pc, #224]	; (10724 <mem_manage_fault+0x1a0>)
   10642:	1a9b      	subs	r3, r3, r2
   10644:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   10646:	f04f 0100 	mov.w	r1, #0
   1064a:	2201      	movs	r2, #1
   1064c:	f362 0102 	bfi	r1, r2, #0, #3
   10650:	f36f 01c5 	bfc	r1, #3, #3
   10654:	f363 118f 	bfi	r1, r3, #6, #10
   10658:	4836      	ldr	r0, [pc, #216]	; (10734 <mem_manage_fault+0x1b0>)
   1065a:	f7fe feb7 	bl	f3cc <log_0>
   1065e:	e7af      	b.n	105c0 <mem_manage_fault+0x3c>
   10660:	4b2f      	ldr	r3, [pc, #188]	; (10720 <mem_manage_fault+0x19c>)
   10662:	4a30      	ldr	r2, [pc, #192]	; (10724 <mem_manage_fault+0x1a0>)
   10664:	1a9b      	subs	r3, r3, r2
   10666:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   10668:	f04f 0100 	mov.w	r1, #0
   1066c:	2201      	movs	r2, #1
   1066e:	f362 0102 	bfi	r1, r2, #0, #3
   10672:	f36f 01c5 	bfc	r1, #3, #3
   10676:	f363 118f 	bfi	r1, r3, #6, #10
   1067a:	482f      	ldr	r0, [pc, #188]	; (10738 <mem_manage_fault+0x1b4>)
   1067c:	f7fe fea6 	bl	f3cc <log_0>
		uint32_t temp = SCB->MMFAR;
   10680:	4b2a      	ldr	r3, [pc, #168]	; (1072c <mem_manage_fault+0x1a8>)
   10682:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10686:	f013 0f80 	tst.w	r3, #128	; 0x80
   1068a:	d102      	bne.n	10692 <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   1068c:	f06f 0715 	mvn.w	r7, #21
   10690:	e79d      	b.n	105ce <mem_manage_fault+0x4a>
   10692:	4b23      	ldr	r3, [pc, #140]	; (10720 <mem_manage_fault+0x19c>)
   10694:	4a23      	ldr	r2, [pc, #140]	; (10724 <mem_manage_fault+0x1a0>)
   10696:	1a9b      	subs	r3, r3, r2
   10698:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1069a:	f04f 0200 	mov.w	r2, #0
   1069e:	2101      	movs	r1, #1
   106a0:	f361 0202 	bfi	r2, r1, #0, #3
   106a4:	f36f 02c5 	bfc	r2, #3, #3
   106a8:	f363 128f 	bfi	r2, r3, #6, #10
   106ac:	4639      	mov	r1, r7
   106ae:	4823      	ldr	r0, [pc, #140]	; (1073c <mem_manage_fault+0x1b8>)
   106b0:	f7fe fdd6 	bl	f260 <log_1>
			if (from_hard_fault != 0) {
   106b4:	2c00      	cmp	r4, #0
   106b6:	d08a      	beq.n	105ce <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   106b8:	4a1c      	ldr	r2, [pc, #112]	; (1072c <mem_manage_fault+0x1a8>)
   106ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
   106bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   106c0:	6293      	str	r3, [r2, #40]	; 0x28
   106c2:	e784      	b.n	105ce <mem_manage_fault+0x4a>
   106c4:	4b16      	ldr	r3, [pc, #88]	; (10720 <mem_manage_fault+0x19c>)
   106c6:	4a17      	ldr	r2, [pc, #92]	; (10724 <mem_manage_fault+0x1a0>)
   106c8:	1a9b      	subs	r3, r3, r2
   106ca:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   106cc:	f04f 0100 	mov.w	r1, #0
   106d0:	2201      	movs	r2, #1
   106d2:	f362 0102 	bfi	r1, r2, #0, #3
   106d6:	f36f 01c5 	bfc	r1, #3, #3
   106da:	f363 118f 	bfi	r1, r3, #6, #10
   106de:	4818      	ldr	r0, [pc, #96]	; (10740 <mem_manage_fault+0x1bc>)
   106e0:	f7fe fe74 	bl	f3cc <log_0>
   106e4:	e778      	b.n	105d8 <mem_manage_fault+0x54>
   106e6:	4b0e      	ldr	r3, [pc, #56]	; (10720 <mem_manage_fault+0x19c>)
   106e8:	4a0e      	ldr	r2, [pc, #56]	; (10724 <mem_manage_fault+0x1a0>)
   106ea:	1a9b      	subs	r3, r3, r2
   106ec:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   106ee:	f04f 0100 	mov.w	r1, #0
   106f2:	2201      	movs	r2, #1
   106f4:	f362 0102 	bfi	r1, r2, #0, #3
   106f8:	f36f 01c5 	bfc	r1, #3, #3
   106fc:	f363 118f 	bfi	r1, r3, #6, #10
   10700:	4810      	ldr	r0, [pc, #64]	; (10744 <mem_manage_fault+0x1c0>)
   10702:	f7fe fe63 	bl	f3cc <log_0>
   10706:	e76d      	b.n	105e4 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   10708:	4629      	mov	r1, r5
   1070a:	4638      	mov	r0, r7
   1070c:	f7ff fd22 	bl	10154 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   10710:	4604      	mov	r4, r0
   10712:	2800      	cmp	r0, #0
   10714:	f43f af76 	beq.w	10604 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   10718:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1071c:	2402      	movs	r4, #2
   1071e:	e771      	b.n	10604 <mem_manage_fault+0x80>
   10720:	0001cc9c 	.word	0x0001cc9c
   10724:	0001cc2c 	.word	0x0001cc2c
   10728:	0001d3d4 	.word	0x0001d3d4
   1072c:	e000ed00 	.word	0xe000ed00
   10730:	0001d3ec 	.word	0x0001d3ec
   10734:	0001d328 	.word	0x0001d328
   10738:	0001d420 	.word	0x0001d420
   1073c:	0001d438 	.word	0x0001d438
   10740:	0001d450 	.word	0x0001d450
   10744:	0001d3a4 	.word	0x0001d3a4

00010748 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   10748:	b570      	push	{r4, r5, r6, lr}
   1074a:	4605      	mov	r5, r0
   1074c:	460c      	mov	r4, r1
   1074e:	4b47      	ldr	r3, [pc, #284]	; (1086c <hard_fault+0x124>)
   10750:	4a47      	ldr	r2, [pc, #284]	; (10870 <hard_fault+0x128>)
   10752:	1a9b      	subs	r3, r3, r2
   10754:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   10756:	f04f 0100 	mov.w	r1, #0
   1075a:	2201      	movs	r2, #1
   1075c:	f362 0102 	bfi	r1, r2, #0, #3
   10760:	f36f 01c5 	bfc	r1, #3, #3
   10764:	f363 118f 	bfi	r1, r3, #6, #10
   10768:	4842      	ldr	r0, [pc, #264]	; (10874 <hard_fault+0x12c>)
   1076a:	f7fe fe2f 	bl	f3cc <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   1076e:	2300      	movs	r3, #0
   10770:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   10772:	4b41      	ldr	r3, [pc, #260]	; (10878 <hard_fault+0x130>)
   10774:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   10776:	f016 0602 	ands.w	r6, r6, #2
   1077a:	d109      	bne.n	10790 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1077c:	4b3e      	ldr	r3, [pc, #248]	; (10878 <hard_fault+0x130>)
   1077e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10780:	2b00      	cmp	r3, #0
   10782:	db17      	blt.n	107b4 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   10784:	4b3c      	ldr	r3, [pc, #240]	; (10878 <hard_fault+0x130>)
   10786:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   10788:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   1078c:	d124      	bne.n	107d8 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   1078e:	bd70      	pop	{r4, r5, r6, pc}
   10790:	4b36      	ldr	r3, [pc, #216]	; (1086c <hard_fault+0x124>)
   10792:	4a37      	ldr	r2, [pc, #220]	; (10870 <hard_fault+0x128>)
   10794:	1a9b      	subs	r3, r3, r2
   10796:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   10798:	f04f 0100 	mov.w	r1, #0
   1079c:	2201      	movs	r2, #1
   1079e:	f362 0102 	bfi	r1, r2, #0, #3
   107a2:	f36f 01c5 	bfc	r1, #3, #3
   107a6:	f363 118f 	bfi	r1, r3, #6, #10
   107aa:	4834      	ldr	r0, [pc, #208]	; (1087c <hard_fault+0x134>)
   107ac:	f7fe fe0e 	bl	f3cc <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   107b0:	2000      	movs	r0, #0
   107b2:	e7ec      	b.n	1078e <hard_fault+0x46>
   107b4:	4b2d      	ldr	r3, [pc, #180]	; (1086c <hard_fault+0x124>)
   107b6:	4a2e      	ldr	r2, [pc, #184]	; (10870 <hard_fault+0x128>)
   107b8:	1a9b      	subs	r3, r3, r2
   107ba:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   107bc:	f04f 0100 	mov.w	r1, #0
   107c0:	2201      	movs	r2, #1
   107c2:	f362 0102 	bfi	r1, r2, #0, #3
   107c6:	f36f 01c5 	bfc	r1, #3, #3
   107ca:	f363 118f 	bfi	r1, r3, #6, #10
   107ce:	482c      	ldr	r0, [pc, #176]	; (10880 <hard_fault+0x138>)
   107d0:	f7fe fdfc 	bl	f3cc <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   107d4:	4630      	mov	r0, r6
   107d6:	e7da      	b.n	1078e <hard_fault+0x46>
   107d8:	4b24      	ldr	r3, [pc, #144]	; (1086c <hard_fault+0x124>)
   107da:	4a25      	ldr	r2, [pc, #148]	; (10870 <hard_fault+0x128>)
   107dc:	1a9b      	subs	r3, r3, r2
   107de:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   107e0:	f04f 0100 	mov.w	r1, #0
   107e4:	2201      	movs	r2, #1
   107e6:	f362 0102 	bfi	r1, r2, #0, #3
   107ea:	f36f 01c5 	bfc	r1, #3, #3
   107ee:	f363 118f 	bfi	r1, r3, #6, #10
   107f2:	4824      	ldr	r0, [pc, #144]	; (10884 <hard_fault+0x13c>)
   107f4:	f7fe fdea 	bl	f3cc <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   107f8:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   107fa:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   107fe:	f64d 7302 	movw	r3, #57090	; 0xdf02
   10802:	429a      	cmp	r2, r3
   10804:	d00e      	beq.n	10824 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
   10806:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1080a:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   1080e:	781b      	ldrb	r3, [r3, #0]
   10810:	b9db      	cbnz	r3, 1084a <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
   10812:	4b1d      	ldr	r3, [pc, #116]	; (10888 <hard_fault+0x140>)
   10814:	781b      	ldrb	r3, [r3, #0]
   10816:	b9f3      	cbnz	r3, 10856 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
   10818:	4b1c      	ldr	r3, [pc, #112]	; (1088c <hard_fault+0x144>)
   1081a:	881b      	ldrh	r3, [r3, #0]
   1081c:	b29b      	uxth	r3, r3
   1081e:	bb03      	cbnz	r3, 10862 <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   10820:	4630      	mov	r0, r6
	return reason;
   10822:	e7b4      	b.n	1078e <hard_fault+0x46>
   10824:	4b11      	ldr	r3, [pc, #68]	; (1086c <hard_fault+0x124>)
   10826:	4a12      	ldr	r2, [pc, #72]	; (10870 <hard_fault+0x128>)
   10828:	1a9b      	subs	r3, r3, r2
   1082a:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1082c:	f04f 0200 	mov.w	r2, #0
   10830:	2101      	movs	r1, #1
   10832:	f361 0202 	bfi	r2, r1, #0, #3
   10836:	f36f 02c5 	bfc	r2, #3, #3
   1083a:	f363 128f 	bfi	r2, r3, #6, #10
   1083e:	6829      	ldr	r1, [r5, #0]
   10840:	4813      	ldr	r0, [pc, #76]	; (10890 <hard_fault+0x148>)
   10842:	f7fe fd0d 	bl	f260 <log_1>
			reason = esf->basic.r0;
   10846:	6828      	ldr	r0, [r5, #0]
   10848:	e7a1      	b.n	1078e <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
   1084a:	4622      	mov	r2, r4
   1084c:	2101      	movs	r1, #1
   1084e:	4628      	mov	r0, r5
   10850:	f7ff fe98 	bl	10584 <mem_manage_fault>
   10854:	e79b      	b.n	1078e <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
   10856:	4622      	mov	r2, r4
   10858:	2101      	movs	r1, #1
   1085a:	4628      	mov	r0, r5
   1085c:	f7ff fdba 	bl	103d4 <bus_fault>
   10860:	e795      	b.n	1078e <hard_fault+0x46>
			reason = usage_fault(esf);
   10862:	4628      	mov	r0, r5
   10864:	f7ff fcea 	bl	1023c <usage_fault>
   10868:	e791      	b.n	1078e <hard_fault+0x46>
   1086a:	bf00      	nop
   1086c:	0001cc9c 	.word	0x0001cc9c
   10870:	0001cc2c 	.word	0x0001cc2c
   10874:	0001d470 	.word	0x0001d470
   10878:	e000ed00 	.word	0xe000ed00
   1087c:	0001d488 	.word	0x0001d488
   10880:	0001d4ac 	.word	0x0001d4ac
   10884:	0001d4bc 	.word	0x0001d4bc
   10888:	e000ed29 	.word	0xe000ed29
   1088c:	e000ed2a 	.word	0xe000ed2a
   10890:	0001d4dc 	.word	0x0001d4dc

00010894 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   10894:	b508      	push	{r3, lr}
   10896:	460a      	mov	r2, r1
   10898:	480b      	ldr	r0, [pc, #44]	; (108c8 <reserved_exception+0x34>)
   1089a:	4b0c      	ldr	r3, [pc, #48]	; (108cc <reserved_exception+0x38>)
   1089c:	1ac0      	subs	r0, r0, r3
   1089e:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   108a0:	f04f 0300 	mov.w	r3, #0
   108a4:	2101      	movs	r1, #1
   108a6:	f361 0302 	bfi	r3, r1, #0, #3
   108aa:	f36f 03c5 	bfc	r3, #3, #3
   108ae:	f360 138f 	bfi	r3, r0, #6, #10
   108b2:	2a0f      	cmp	r2, #15
   108b4:	dc05      	bgt.n	108c2 <reserved_exception+0x2e>
   108b6:	4906      	ldr	r1, [pc, #24]	; (108d0 <reserved_exception+0x3c>)
   108b8:	3a10      	subs	r2, #16
   108ba:	4806      	ldr	r0, [pc, #24]	; (108d4 <reserved_exception+0x40>)
   108bc:	f7fe fd06 	bl	f2cc <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   108c0:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   108c2:	4905      	ldr	r1, [pc, #20]	; (108d8 <reserved_exception+0x44>)
   108c4:	e7f8      	b.n	108b8 <reserved_exception+0x24>
   108c6:	bf00      	nop
   108c8:	0001cc9c 	.word	0x0001cc9c
   108cc:	0001cc2c 	.word	0x0001cc2c
   108d0:	0001d4f8 	.word	0x0001d4f8
   108d4:	0001d52c 	.word	0x0001d52c
   108d8:	0001d510 	.word	0x0001d510

000108dc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   108dc:	b570      	push	{r4, r5, r6, lr}
   108de:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   108e0:	4b2b      	ldr	r3, [pc, #172]	; (10990 <z_arm_fault+0xb4>)
   108e2:	685d      	ldr	r5, [r3, #4]
   108e4:	f3c5 0508 	ubfx	r5, r5, #0, #9
   108e8:	2300      	movs	r3, #0
   108ea:	f383 8811 	msr	BASEPRI, r3
   108ee:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   108f2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   108f6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   108fa:	d12a      	bne.n	10952 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   108fc:	f002 030c 	and.w	r3, r2, #12
   10900:	2b08      	cmp	r3, #8
   10902:	d010      	beq.n	10926 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10904:	f012 0f08 	tst.w	r2, #8
   10908:	d020      	beq.n	1094c <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
   1090a:	460c      	mov	r4, r1
	*nested_exc = false;
   1090c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1090e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   10912:	4629      	mov	r1, r5
   10914:	4620      	mov	r0, r4
   10916:	f00a f83b 	bl	1a990 <fault_handle>
   1091a:	4605      	mov	r5, r0
	if (recoverable) {
   1091c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   10920:	b1d3      	cbz	r3, 10958 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   10922:	b00a      	add	sp, #40	; 0x28
   10924:	bd70      	pop	{r4, r5, r6, pc}
   10926:	4b1b      	ldr	r3, [pc, #108]	; (10994 <z_arm_fault+0xb8>)
   10928:	4a1b      	ldr	r2, [pc, #108]	; (10998 <z_arm_fault+0xbc>)
   1092a:	1a9b      	subs	r3, r3, r2
   1092c:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   1092e:	f04f 0100 	mov.w	r1, #0
   10932:	2201      	movs	r2, #1
   10934:	f362 0102 	bfi	r1, r2, #0, #3
   10938:	f36f 01c5 	bfc	r1, #3, #3
   1093c:	f363 118f 	bfi	r1, r3, #6, #10
   10940:	4816      	ldr	r0, [pc, #88]	; (1099c <z_arm_fault+0xc0>)
   10942:	f7fe fd43 	bl	f3cc <log_0>
	*nested_exc = false;
   10946:	2600      	movs	r6, #0
		return NULL;
   10948:	4634      	mov	r4, r6
   1094a:	e7e0      	b.n	1090e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   1094c:	4604      	mov	r4, r0
			*nested_exc = true;
   1094e:	2601      	movs	r6, #1
   10950:	e7dd      	b.n	1090e <z_arm_fault+0x32>
	*nested_exc = false;
   10952:	2600      	movs	r6, #0
		return NULL;
   10954:	4634      	mov	r4, r6
   10956:	e7da      	b.n	1090e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10958:	2220      	movs	r2, #32
   1095a:	4621      	mov	r1, r4
   1095c:	a801      	add	r0, sp, #4
   1095e:	f00a f8e0 	bl	1ab22 <memcpy>
	if (nested_exc) {
   10962:	b14e      	cbz	r6, 10978 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   10964:	9b08      	ldr	r3, [sp, #32]
   10966:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1096a:	b95a      	cbnz	r2, 10984 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1096c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10970:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   10974:	9308      	str	r3, [sp, #32]
   10976:	e005      	b.n	10984 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   10978:	9b08      	ldr	r3, [sp, #32]
   1097a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1097e:	f023 0301 	bic.w	r3, r3, #1
   10982:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   10984:	a901      	add	r1, sp, #4
   10986:	4628      	mov	r0, r5
   10988:	f009 ffe2 	bl	1a950 <z_arm_fatal_error>
   1098c:	e7c9      	b.n	10922 <z_arm_fault+0x46>
   1098e:	bf00      	nop
   10990:	e000ed00 	.word	0xe000ed00
   10994:	0001cc9c 	.word	0x0001cc9c
   10998:	0001cc2c 	.word	0x0001cc2c
   1099c:	0001d540 	.word	0x0001d540

000109a0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   109a0:	4a02      	ldr	r2, [pc, #8]	; (109ac <z_arm_fault_init+0xc>)
   109a2:	6953      	ldr	r3, [r2, #20]
   109a4:	f043 0310 	orr.w	r3, r3, #16
   109a8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   109aa:	4770      	bx	lr
   109ac:	e000ed00 	.word	0xe000ed00

000109b0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   109b0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   109b4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   109b8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   109ba:	4672      	mov	r2, lr
	bl z_arm_fault
   109bc:	f7ff ff8e 	bl	108dc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   109c0:	bd01      	pop	{r0, pc}
   109c2:	bf00      	nop

000109c4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   109c4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   109c6:	e006      	b.n	109d6 <z_arm_interrupt_init+0x12>
   109c8:	f002 010f 	and.w	r1, r2, #15
   109cc:	4b09      	ldr	r3, [pc, #36]	; (109f4 <z_arm_interrupt_init+0x30>)
   109ce:	440b      	add	r3, r1
   109d0:	2140      	movs	r1, #64	; 0x40
   109d2:	7619      	strb	r1, [r3, #24]
   109d4:	3201      	adds	r2, #1
   109d6:	2a2f      	cmp	r2, #47	; 0x2f
   109d8:	dc0a      	bgt.n	109f0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   109da:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   109dc:	2b00      	cmp	r3, #0
   109de:	dbf3      	blt.n	109c8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   109e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   109e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   109e8:	2140      	movs	r1, #64	; 0x40
   109ea:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   109ee:	e7f1      	b.n	109d4 <z_arm_interrupt_init+0x10>
	}
}
   109f0:	4770      	bx	lr
   109f2:	bf00      	nop
   109f4:	e000ecfc 	.word	0xe000ecfc

000109f8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   109f8:	2000      	movs	r0, #0
    msr CONTROL, r0
   109fa:	f380 8814 	msr	CONTROL, r0
    isb
   109fe:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   10a02:	f00b ffad 	bl	1c960 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   10a06:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   10a08:	490d      	ldr	r1, [pc, #52]	; (10a40 <__start+0x48>)
    str r0, [r1]
   10a0a:	6008      	str	r0, [r1, #0]
    dsb
   10a0c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10a10:	480c      	ldr	r0, [pc, #48]	; (10a44 <__start+0x4c>)
    msr msp, r0
   10a12:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   10a16:	f000 f829 	bl	10a6c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10a1a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   10a1c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   10a20:	4809      	ldr	r0, [pc, #36]	; (10a48 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   10a22:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   10a26:	1840      	adds	r0, r0, r1
    msr PSP, r0
   10a28:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   10a2c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   10a30:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   10a32:	4308      	orrs	r0, r1
    msr CONTROL, r0
   10a34:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   10a38:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   10a3c:	f7ff faf6 	bl	1002c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   10a40:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   10a44:	20004d00 	.word	0x20004d00
    ldr r0, =z_interrupt_stacks
   10a48:	20004e80 	.word	0x20004e80

00010a4c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   10a4c:	4b06      	ldr	r3, [pc, #24]	; (10a68 <z_arm_clear_arm_mpu_config+0x1c>)
   10a4e:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   10a50:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   10a54:	2300      	movs	r3, #0
   10a56:	4283      	cmp	r3, r0
   10a58:	da05      	bge.n	10a66 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   10a5a:	4a03      	ldr	r2, [pc, #12]	; (10a68 <z_arm_clear_arm_mpu_config+0x1c>)
   10a5c:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   10a5e:	2100      	movs	r1, #0
   10a60:	6111      	str	r1, [r2, #16]
   10a62:	3301      	adds	r3, #1
   10a64:	e7f7      	b.n	10a56 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   10a66:	4770      	bx	lr
   10a68:	e000ed90 	.word	0xe000ed90

00010a6c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   10a6c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   10a6e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   10a70:	2400      	movs	r4, #0
   10a72:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   10a76:	f7ff ffe9 	bl	10a4c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10a7a:	4623      	mov	r3, r4
   10a7c:	e008      	b.n	10a90 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   10a7e:	f103 0120 	add.w	r1, r3, #32
   10a82:	4a0e      	ldr	r2, [pc, #56]	; (10abc <z_arm_init_arch_hw_at_boot+0x50>)
   10a84:	f04f 30ff 	mov.w	r0, #4294967295
   10a88:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   10a8c:	3301      	adds	r3, #1
   10a8e:	b2db      	uxtb	r3, r3
   10a90:	2b07      	cmp	r3, #7
   10a92:	d9f4      	bls.n	10a7e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10a94:	2300      	movs	r3, #0
   10a96:	e008      	b.n	10aaa <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   10a98:	f103 0160 	add.w	r1, r3, #96	; 0x60
   10a9c:	4a07      	ldr	r2, [pc, #28]	; (10abc <z_arm_init_arch_hw_at_boot+0x50>)
   10a9e:	f04f 30ff 	mov.w	r0, #4294967295
   10aa2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   10aa6:	3301      	adds	r3, #1
   10aa8:	b2db      	uxtb	r3, r3
   10aaa:	2b07      	cmp	r3, #7
   10aac:	d9f4      	bls.n	10a98 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   10aae:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   10ab0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10ab4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   10ab8:	bd10      	pop	{r4, pc}
   10aba:	bf00      	nop
   10abc:	e000e100 	.word	0xe000e100

00010ac0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   10ac0:	b508      	push	{r3, lr}
	if (_current == thread) {
   10ac2:	4b08      	ldr	r3, [pc, #32]	; (10ae4 <z_impl_k_thread_abort+0x24>)
   10ac4:	689b      	ldr	r3, [r3, #8]
   10ac6:	4283      	cmp	r3, r0
   10ac8:	d002      	beq.n	10ad0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   10aca:	f005 fd47 	bl	1655c <z_thread_abort>
}
   10ace:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10ad0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d0f8      	beq.n	10aca <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10ad8:	4a03      	ldr	r2, [pc, #12]	; (10ae8 <z_impl_k_thread_abort+0x28>)
   10ada:	6853      	ldr	r3, [r2, #4]
   10adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10ae0:	6053      	str	r3, [r2, #4]
   10ae2:	e7f2      	b.n	10aca <z_impl_k_thread_abort+0xa>
   10ae4:	20002370 	.word	0x20002370
   10ae8:	e000ed00 	.word	0xe000ed00

00010aec <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   10aec:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   10aee:	4b03      	ldr	r3, [pc, #12]	; (10afc <z_arm_configure_static_mpu_regions+0x10>)
   10af0:	4a03      	ldr	r2, [pc, #12]	; (10b00 <z_arm_configure_static_mpu_regions+0x14>)
   10af2:	2101      	movs	r1, #1
   10af4:	4803      	ldr	r0, [pc, #12]	; (10b04 <z_arm_configure_static_mpu_regions+0x18>)
   10af6:	f009 ffa0 	bl	1aa3a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   10afa:	bd08      	pop	{r3, pc}
   10afc:	20040000 	.word	0x20040000
   10b00:	20000000 	.word	0x20000000
   10b04:	0001d570 	.word	0x0001d570

00010b08 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   10b08:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   10b0a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   10b0e:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   10b10:	4804      	ldr	r0, [pc, #16]	; (10b24 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   10b12:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   10b14:	2320      	movs	r3, #32
   10b16:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   10b18:	4b03      	ldr	r3, [pc, #12]	; (10b28 <z_arm_configure_dynamic_mpu_regions+0x20>)
   10b1a:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   10b1c:	2101      	movs	r1, #1
   10b1e:	f009 ff90 	bl	1aa42 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   10b22:	bd08      	pop	{r3, pc}
   10b24:	20001fc0 	.word	0x20001fc0
   10b28:	150b0000 	.word	0x150b0000

00010b2c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   10b2c:	4a06      	ldr	r2, [pc, #24]	; (10b48 <region_init+0x1c>)
   10b2e:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   10b30:	680b      	ldr	r3, [r1, #0]
   10b32:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   10b36:	4303      	orrs	r3, r0
   10b38:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   10b3c:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   10b3e:	688b      	ldr	r3, [r1, #8]
   10b40:	f043 0301 	orr.w	r3, r3, #1
   10b44:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   10b46:	4770      	bx	lr
   10b48:	e000ed90 	.word	0xe000ed90

00010b4c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   10b4c:	b510      	push	{r4, lr}
   10b4e:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   10b50:	2807      	cmp	r0, #7
   10b52:	d803      	bhi.n	10b5c <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   10b54:	f7ff ffea 	bl	10b2c <region_init>

	return index;
   10b58:	4620      	mov	r0, r4
}
   10b5a:	bd10      	pop	{r4, pc}
   10b5c:	4b09      	ldr	r3, [pc, #36]	; (10b84 <region_allocate_and_init+0x38>)
   10b5e:	4a0a      	ldr	r2, [pc, #40]	; (10b88 <region_allocate_and_init+0x3c>)
   10b60:	1a9b      	subs	r3, r3, r2
   10b62:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   10b64:	f04f 0200 	mov.w	r2, #0
   10b68:	2101      	movs	r1, #1
   10b6a:	f361 0202 	bfi	r2, r1, #0, #3
   10b6e:	f36f 02c5 	bfc	r2, #3, #3
   10b72:	f363 128f 	bfi	r2, r3, #6, #10
   10b76:	4601      	mov	r1, r0
   10b78:	4804      	ldr	r0, [pc, #16]	; (10b8c <region_allocate_and_init+0x40>)
   10b7a:	f7fe fb71 	bl	f260 <log_1>
		return -EINVAL;
   10b7e:	f06f 0015 	mvn.w	r0, #21
   10b82:	e7ea      	b.n	10b5a <region_allocate_and_init+0xe>
   10b84:	0001cc8c 	.word	0x0001cc8c
   10b88:	0001cc2c 	.word	0x0001cc2c
   10b8c:	0001d57c 	.word	0x0001d57c

00010b90 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   10b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b94:	4680      	mov	r8, r0
   10b96:	460f      	mov	r7, r1
   10b98:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   10b9a:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   10b9c:	2400      	movs	r4, #0
   10b9e:	e009      	b.n	10bb4 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   10ba0:	4629      	mov	r1, r5
   10ba2:	b2f0      	uxtb	r0, r6
   10ba4:	f009 ff2a 	bl	1a9fc <mpu_configure_region>
   10ba8:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   10baa:	f110 0f16 	cmn.w	r0, #22
   10bae:	d025      	beq.n	10bfc <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   10bb0:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   10bb2:	3401      	adds	r4, #1
   10bb4:	42bc      	cmp	r4, r7
   10bb6:	da21      	bge.n	10bfc <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   10bb8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   10bbc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   10bc0:	686a      	ldr	r2, [r5, #4]
   10bc2:	2a00      	cmp	r2, #0
   10bc4:	d0f5      	beq.n	10bb2 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   10bc6:	f1ba 0f00 	cmp.w	sl, #0
   10bca:	d0e9      	beq.n	10ba0 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   10bcc:	4628      	mov	r0, r5
   10bce:	f009 ff04 	bl	1a9da <mpu_partition_is_valid>
		if (do_sanity_check &&
   10bd2:	2800      	cmp	r0, #0
   10bd4:	d1e4      	bne.n	10ba0 <mpu_configure_regions+0x10>
   10bd6:	4b0b      	ldr	r3, [pc, #44]	; (10c04 <mpu_configure_regions+0x74>)
   10bd8:	4a0b      	ldr	r2, [pc, #44]	; (10c08 <mpu_configure_regions+0x78>)
   10bda:	1a9b      	subs	r3, r3, r2
   10bdc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   10bde:	f04f 0200 	mov.w	r2, #0
   10be2:	2101      	movs	r1, #1
   10be4:	f361 0202 	bfi	r2, r1, #0, #3
   10be8:	f36f 02c5 	bfc	r2, #3, #3
   10bec:	f363 128f 	bfi	r2, r3, #6, #10
   10bf0:	4621      	mov	r1, r4
   10bf2:	4806      	ldr	r0, [pc, #24]	; (10c0c <mpu_configure_regions+0x7c>)
   10bf4:	f7fe fb34 	bl	f260 <log_1>
			return -EINVAL;
   10bf8:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   10bfc:	4630      	mov	r0, r6
   10bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c02:	bf00      	nop
   10c04:	0001cc8c 	.word	0x0001cc8c
   10c08:	0001cc2c 	.word	0x0001cc2c
   10c0c:	0001d5a4 	.word	0x0001d5a4

00010c10 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   10c10:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   10c12:	4c03      	ldr	r4, [pc, #12]	; (10c20 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   10c14:	2301      	movs	r3, #1
   10c16:	7822      	ldrb	r2, [r4, #0]
   10c18:	f7ff ffba 	bl	10b90 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10c1c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   10c1e:	bd10      	pop	{r4, pc}
   10c20:	20002d8f 	.word	0x20002d8f

00010c24 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   10c24:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   10c26:	2300      	movs	r3, #0
   10c28:	4a08      	ldr	r2, [pc, #32]	; (10c4c <mpu_configure_dynamic_mpu_regions+0x28>)
   10c2a:	7812      	ldrb	r2, [r2, #0]
   10c2c:	f7ff ffb0 	bl	10b90 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   10c30:	f110 0f16 	cmn.w	r0, #22
   10c34:	d008      	beq.n	10c48 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   10c36:	4603      	mov	r3, r0
   10c38:	2b07      	cmp	r3, #7
   10c3a:	dc05      	bgt.n	10c48 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   10c3c:	4a04      	ldr	r2, [pc, #16]	; (10c50 <mpu_configure_dynamic_mpu_regions+0x2c>)
   10c3e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   10c40:	2100      	movs	r1, #0
   10c42:	6111      	str	r1, [r2, #16]
   10c44:	3301      	adds	r3, #1
   10c46:	e7f7      	b.n	10c38 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   10c48:	bd08      	pop	{r3, pc}
   10c4a:	bf00      	nop
   10c4c:	20002d8f 	.word	0x20002d8f
   10c50:	e000ed90 	.word	0xe000ed90

00010c54 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   10c54:	4b03      	ldr	r3, [pc, #12]	; (10c64 <arm_core_mpu_enable+0x10>)
   10c56:	2205      	movs	r2, #5
   10c58:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   10c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10c5e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   10c62:	4770      	bx	lr
   10c64:	e000ed90 	.word	0xe000ed90

00010c68 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   10c68:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   10c6c:	4b01      	ldr	r3, [pc, #4]	; (10c74 <arm_core_mpu_disable+0xc>)
   10c6e:	2200      	movs	r2, #0
   10c70:	605a      	str	r2, [r3, #4]
}
   10c72:	4770      	bx	lr
   10c74:	e000ed90 	.word	0xe000ed90

00010c78 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   10c78:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10c7a:	4b0e      	ldr	r3, [pc, #56]	; (10cb4 <z_arm_mpu_init+0x3c>)
   10c7c:	681d      	ldr	r5, [r3, #0]
   10c7e:	2d08      	cmp	r5, #8
   10c80:	d815      	bhi.n	10cae <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   10c82:	f7ff fff1 	bl	10c68 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10c86:	2400      	movs	r4, #0
   10c88:	42a5      	cmp	r5, r4
   10c8a:	d90a      	bls.n	10ca2 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10c8c:	4b09      	ldr	r3, [pc, #36]	; (10cb4 <z_arm_mpu_init+0x3c>)
   10c8e:	6859      	ldr	r1, [r3, #4]
   10c90:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   10c94:	0093      	lsls	r3, r2, #2
   10c96:	4419      	add	r1, r3
   10c98:	4620      	mov	r0, r4
   10c9a:	f7ff ff47 	bl	10b2c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10c9e:	3401      	adds	r4, #1
   10ca0:	e7f2      	b.n	10c88 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   10ca2:	4b05      	ldr	r3, [pc, #20]	; (10cb8 <z_arm_mpu_init+0x40>)
   10ca4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   10ca6:	f7ff ffd5 	bl	10c54 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   10caa:	2000      	movs	r0, #0
}
   10cac:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   10cae:	f04f 30ff 	mov.w	r0, #4294967295
   10cb2:	e7fb      	b.n	10cac <z_arm_mpu_init+0x34>
   10cb4:	0001d5d8 	.word	0x0001d5d8
   10cb8:	20002d8f 	.word	0x20002d8f

00010cbc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   10cbc:	4b01      	ldr	r3, [pc, #4]	; (10cc4 <__stdout_hook_install+0x8>)
   10cbe:	6018      	str	r0, [r3, #0]
}
   10cc0:	4770      	bx	lr
   10cc2:	bf00      	nop
   10cc4:	200003e8 	.word	0x200003e8

00010cc8 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10cc8:	4b06      	ldr	r3, [pc, #24]	; (10ce4 <nrf52_errata_197+0x1c>)
   10cca:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   10ccc:	4a06      	ldr	r2, [pc, #24]	; (10ce8 <nrf52_errata_197+0x20>)
   10cce:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   10cd0:	2b08      	cmp	r3, #8
   10cd2:	d001      	beq.n	10cd8 <nrf52_errata_197+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   10cd4:	2000      	movs	r0, #0
   10cd6:	4770      	bx	lr
                switch(var2)
   10cd8:	2a02      	cmp	r2, #2
   10cda:	d001      	beq.n	10ce0 <nrf52_errata_197+0x18>
                        return false;
   10cdc:	2000      	movs	r0, #0
   10cde:	4770      	bx	lr
                        return true;
   10ce0:	2001      	movs	r0, #1
    #endif
}
   10ce2:	4770      	bx	lr
   10ce4:	10000130 	.word	0x10000130
   10ce8:	10000134 	.word	0x10000134

00010cec <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   10cec:	b510      	push	{r4, lr}
	__asm__ volatile(
   10cee:	f04f 0340 	mov.w	r3, #64	; 0x40
   10cf2:	f3ef 8411 	mrs	r4, BASEPRI
   10cf6:	f383 8812 	msr	BASEPRI_MAX, r3
   10cfa:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   10cfe:	2301      	movs	r3, #1
   10d00:	4a0b      	ldr	r2, [pc, #44]	; (10d30 <nordicsemi_nrf52_init+0x44>)
   10d02:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   10d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10d0a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   10d0e:	f7ff ffdb 	bl	10cc8 <nrf52_errata_197>
   10d12:	b110      	cbz	r0, 10d1a <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   10d14:	4b07      	ldr	r3, [pc, #28]	; (10d34 <nordicsemi_nrf52_init+0x48>)
   10d16:	2201      	movs	r2, #1
   10d18:	601a      	str	r2, [r3, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   10d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10d1e:	2201      	movs	r2, #1
   10d20:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   10d24:	f384 8811 	msr	BASEPRI, r4
   10d28:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   10d2c:	2000      	movs	r0, #0
   10d2e:	bd10      	pop	{r4, pc}
   10d30:	4001e000 	.word	0x4001e000
   10d34:	40000638 	.word	0x40000638

00010d38 <sys_arch_reboot>:
    *p_gpregret = val;
   10d38:	b2c0      	uxtb	r0, r0
   10d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10d3e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   10d42:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   10d46:	4905      	ldr	r1, [pc, #20]	; (10d5c <sys_arch_reboot+0x24>)
   10d48:	68ca      	ldr	r2, [r1, #12]
   10d4a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   10d4e:	4b04      	ldr	r3, [pc, #16]	; (10d60 <sys_arch_reboot+0x28>)
   10d50:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   10d52:	60cb      	str	r3, [r1, #12]
   10d54:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   10d58:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   10d5a:	e7fd      	b.n	10d58 <sys_arch_reboot+0x20>
   10d5c:	e000ed00 	.word	0xe000ed00
   10d60:	05fa0004 	.word	0x05fa0004

00010d64 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   10d64:	b130      	cbz	r0, 10d74 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   10d66:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   10d68:	0180      	lsls	r0, r0, #6
   10d6a:	4b03      	ldr	r3, [pc, #12]	; (10d78 <arch_busy_wait+0x14>)
   10d6c:	f043 0301 	orr.w	r3, r3, #1
   10d70:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   10d72:	bd08      	pop	{r3, pc}
   10d74:	4770      	bx	lr
   10d76:	bf00      	nop
   10d78:	0001cd70 	.word	0x0001cd70

00010d7c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   10d7c:	2940      	cmp	r1, #64	; 0x40
   10d7e:	bf28      	it	cs
   10d80:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   10d82:	2300      	movs	r3, #0
   10d84:	428b      	cmp	r3, r1
   10d86:	d217      	bcs.n	10db8 <bt_hex_real+0x3c>
{
   10d88:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   10d8a:	5cc4      	ldrb	r4, [r0, r3]
   10d8c:	0924      	lsrs	r4, r4, #4
   10d8e:	005a      	lsls	r2, r3, #1
   10d90:	4e0c      	ldr	r6, [pc, #48]	; (10dc4 <bt_hex_real+0x48>)
   10d92:	5d34      	ldrb	r4, [r6, r4]
   10d94:	4d0c      	ldr	r5, [pc, #48]	; (10dc8 <bt_hex_real+0x4c>)
   10d96:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   10d9a:	5cc4      	ldrb	r4, [r0, r3]
   10d9c:	f004 040f 	and.w	r4, r4, #15
   10da0:	3201      	adds	r2, #1
   10da2:	5d34      	ldrb	r4, [r6, r4]
   10da4:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   10da6:	3301      	adds	r3, #1
   10da8:	428b      	cmp	r3, r1
   10daa:	d3ee      	bcc.n	10d8a <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   10dac:	4806      	ldr	r0, [pc, #24]	; (10dc8 <bt_hex_real+0x4c>)
   10dae:	2200      	movs	r2, #0
   10db0:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   10db4:	bc70      	pop	{r4, r5, r6}
   10db6:	4770      	bx	lr
	str[i * 2] = '\0';
   10db8:	4803      	ldr	r0, [pc, #12]	; (10dc8 <bt_hex_real+0x4c>)
   10dba:	2200      	movs	r2, #0
   10dbc:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   10dc0:	4770      	bx	lr
   10dc2:	bf00      	nop
   10dc4:	0001d5fc 	.word	0x0001d5fc
   10dc8:	20001fcc 	.word	0x20001fcc

00010dcc <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   10dcc:	b538      	push	{r3, r4, r5, lr}
   10dce:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   10dd0:	4805      	ldr	r0, [pc, #20]	; (10de8 <bt_buf_get_rx+0x1c>)
   10dd2:	f00a f88d 	bl	1aef0 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   10dd6:	4605      	mov	r5, r0
   10dd8:	b120      	cbz	r0, 10de4 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   10dda:	2100      	movs	r1, #0
   10ddc:	3008      	adds	r0, #8
   10dde:	f00a f8a9 	bl	1af34 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10de2:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   10de4:	4628      	mov	r0, r5
   10de6:	bd38      	pop	{r3, r4, r5, pc}
   10de8:	20000650 	.word	0x20000650

00010dec <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   10dec:	b510      	push	{r4, lr}
   10dee:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   10df0:	4b0a      	ldr	r3, [pc, #40]	; (10e1c <bt_buf_get_cmd_complete+0x30>)
   10df2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   10df6:	b158      	cbz	r0, 10e10 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   10df8:	f00a f8d3 	bl	1afa2 <net_buf_ref>
   10dfc:	4604      	mov	r4, r0
   10dfe:	2301      	movs	r3, #1
   10e00:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   10e02:	2100      	movs	r1, #0
   10e04:	8181      	strh	r1, [r0, #12]
   10e06:	3008      	adds	r0, #8
   10e08:	f00a f894 	bl	1af34 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   10e0c:	4620      	mov	r0, r4
   10e0e:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   10e10:	460b      	mov	r3, r1
   10e12:	2001      	movs	r0, #1
   10e14:	f7ff ffda 	bl	10dcc <bt_buf_get_rx>
   10e18:	4604      	mov	r4, r0
   10e1a:	e7f7      	b.n	10e0c <bt_buf_get_cmd_complete+0x20>
   10e1c:	20000290 	.word	0x20000290

00010e20 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   10e20:	b510      	push	{r4, lr}
	switch (evt) {
   10e22:	f1a0 040e 	sub.w	r4, r0, #14
   10e26:	2c01      	cmp	r4, #1
   10e28:	d906      	bls.n	10e38 <bt_buf_get_evt+0x18>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   10e2a:	b959      	cbnz	r1, 10e44 <bt_buf_get_evt+0x24>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   10e2c:	2001      	movs	r0, #1
   10e2e:	f7ff ffcd 	bl	10dcc <bt_buf_get_rx>
   10e32:	4604      	mov	r4, r0
	}
}
   10e34:	4620      	mov	r0, r4
   10e36:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
   10e38:	4610      	mov	r0, r2
   10e3a:	4619      	mov	r1, r3
   10e3c:	f7ff ffd6 	bl	10dec <bt_buf_get_cmd_complete>
   10e40:	4604      	mov	r4, r0
   10e42:	e7f7      	b.n	10e34 <bt_buf_get_evt+0x14>
	return net_buf_alloc_fixed(pool, timeout);
   10e44:	4806      	ldr	r0, [pc, #24]	; (10e60 <bt_buf_get_evt+0x40>)
   10e46:	f00a f853 	bl	1aef0 <net_buf_alloc_fixed>
			if (buf) {
   10e4a:	4604      	mov	r4, r0
   10e4c:	2800      	cmp	r0, #0
   10e4e:	d0f1      	beq.n	10e34 <bt_buf_get_evt+0x14>
	net_buf_simple_reserve(&buf->b, reserve);
   10e50:	2100      	movs	r1, #0
   10e52:	3008      	adds	r0, #8
   10e54:	f00a f86e 	bl	1af34 <net_buf_simple_reserve>
   10e58:	2301      	movs	r3, #1
   10e5a:	7523      	strb	r3, [r4, #20]
			return buf;
   10e5c:	e7ea      	b.n	10e34 <bt_buf_get_evt+0x14>
   10e5e:	bf00      	nop
   10e60:	200005f8 	.word	0x200005f8

00010e64 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   10e64:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   10e66:	7851      	ldrb	r1, [r2, #1]
   10e68:	4b08      	ldr	r3, [pc, #32]	; (10e8c <read_local_ver_complete+0x28>)
   10e6a:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10e6e:	8851      	ldrh	r1, [r2, #2]
   10e70:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   10e74:	7911      	ldrb	r1, [r2, #4]
   10e76:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10e7a:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   10e7e:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10e82:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   10e86:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   10e8a:	4770      	bx	lr
   10e8c:	20000290 	.word	0x20000290

00010e90 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   10e90:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   10e92:	7a19      	ldrb	r1, [r3, #8]
   10e94:	79da      	ldrb	r2, [r3, #7]
   10e96:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   10e9a:	7998      	ldrb	r0, [r3, #6]
   10e9c:	795a      	ldrb	r2, [r3, #5]
   10e9e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   10ea2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   10ea6:	7918      	ldrb	r0, [r3, #4]
   10ea8:	78d9      	ldrb	r1, [r3, #3]
   10eaa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   10eae:	7898      	ldrb	r0, [r3, #2]
   10eb0:	785b      	ldrb	r3, [r3, #1]
   10eb2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   10eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   10eba:	4903      	ldr	r1, [pc, #12]	; (10ec8 <le_read_supp_states_complete+0x38>)
   10ebc:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   10ec0:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   10ec4:	4770      	bx	lr
   10ec6:	bf00      	nop
   10ec8:	20000290 	.word	0x20000290

00010ecc <hci_reset_complete>:
{
   10ecc:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   10ece:	6883      	ldr	r3, [r0, #8]
   10ed0:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   10ed2:	b9a3      	cbnz	r3, 10efe <hci_reset_complete+0x32>
		bt_scan_reset();
   10ed4:	f001 fa6a 	bl	123ac <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10ed8:	f3bf 8f5b 	dmb	ish
   10edc:	4b08      	ldr	r3, [pc, #32]	; (10f00 <hci_reset_complete+0x34>)
   10ede:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   10ee2:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   10ee6:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10eea:	f3bf 8f5b 	dmb	ish
   10eee:	e853 1f00 	ldrex	r1, [r3]
   10ef2:	e843 2000 	strex	r0, r2, [r3]
   10ef6:	2800      	cmp	r0, #0
   10ef8:	d1f9      	bne.n	10eee <hci_reset_complete+0x22>
   10efa:	f3bf 8f5b 	dmb	ish
}
   10efe:	bd08      	pop	{r3, pc}
   10f00:	20000290 	.word	0x20000290

00010f04 <read_local_features_complete>:
{
   10f04:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   10f06:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   10f08:	2208      	movs	r2, #8
   10f0a:	3101      	adds	r1, #1
   10f0c:	4801      	ldr	r0, [pc, #4]	; (10f14 <read_local_features_complete+0x10>)
   10f0e:	f009 fe08 	bl	1ab22 <memcpy>
}
   10f12:	bd08      	pop	{r3, pc}
   10f14:	20000300 	.word	0x20000300

00010f18 <read_supported_commands_complete>:
{
   10f18:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   10f1a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   10f1c:	2240      	movs	r2, #64	; 0x40
   10f1e:	3101      	adds	r1, #1
   10f20:	4801      	ldr	r0, [pc, #4]	; (10f28 <read_supported_commands_complete+0x10>)
   10f22:	f009 fdfe 	bl	1ab22 <memcpy>
}
   10f26:	bd08      	pop	{r3, pc}
   10f28:	20000308 	.word	0x20000308

00010f2c <read_le_features_complete>:
{
   10f2c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   10f2e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   10f30:	2208      	movs	r2, #8
   10f32:	3101      	adds	r1, #1
   10f34:	4801      	ldr	r0, [pc, #4]	; (10f3c <read_le_features_complete+0x10>)
   10f36:	f009 fdf4 	bl	1ab22 <memcpy>
}
   10f3a:	bd08      	pop	{r3, pc}
   10f3c:	20000360 	.word	0x20000360

00010f40 <hci_cmd_done>:
{
   10f40:	b570      	push	{r4, r5, r6, lr}
   10f42:	b084      	sub	sp, #16
   10f44:	4605      	mov	r5, r0
   10f46:	460e      	mov	r6, r1
   10f48:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   10f4a:	7990      	ldrb	r0, [r2, #6]
   10f4c:	f001 fba4 	bl	12698 <net_buf_pool_get>
   10f50:	4b55      	ldr	r3, [pc, #340]	; (110a8 <hci_cmd_done+0x168>)
   10f52:	4283      	cmp	r3, r0
   10f54:	d01c      	beq.n	10f90 <hci_cmd_done+0x50>
   10f56:	4b55      	ldr	r3, [pc, #340]	; (110ac <hci_cmd_done+0x16c>)
   10f58:	4a55      	ldr	r2, [pc, #340]	; (110b0 <hci_cmd_done+0x170>)
   10f5a:	1a9b      	subs	r3, r3, r2
   10f5c:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   10f5e:	f04f 0600 	mov.w	r6, #0
   10f62:	2202      	movs	r2, #2
   10f64:	f362 0602 	bfi	r6, r2, #0, #3
   10f68:	f36f 06c5 	bfc	r6, #3, #3
   10f6c:	f363 168f 	bfi	r6, r3, #6, #10
   10f70:	9500      	str	r5, [sp, #0]
   10f72:	79a0      	ldrb	r0, [r4, #6]
   10f74:	9001      	str	r0, [sp, #4]
   10f76:	f001 fb8f 	bl	12698 <net_buf_pool_get>
   10f7a:	9002      	str	r0, [sp, #8]
   10f7c:	4b4a      	ldr	r3, [pc, #296]	; (110a8 <hci_cmd_done+0x168>)
   10f7e:	9303      	str	r3, [sp, #12]
   10f80:	4633      	mov	r3, r6
   10f82:	2204      	movs	r2, #4
   10f84:	4669      	mov	r1, sp
   10f86:	484b      	ldr	r0, [pc, #300]	; (110b4 <hci_cmd_done+0x174>)
   10f88:	f7fe f9dc 	bl	f344 <log_n>
}
   10f8c:	b004      	add	sp, #16
   10f8e:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   10f90:	4620      	mov	r0, r4
   10f92:	f009 fefa 	bl	1ad8a <net_buf_id>
   10f96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10f9a:	4b47      	ldr	r3, [pc, #284]	; (110b8 <hci_cmd_done+0x178>)
   10f9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   10fa0:	8843      	ldrh	r3, [r0, #2]
   10fa2:	42ab      	cmp	r3, r5
   10fa4:	d133      	bne.n	1100e <hci_cmd_done+0xce>
	if (bt_dev.sent_cmd) {
   10fa6:	4b45      	ldr	r3, [pc, #276]	; (110bc <hci_cmd_done+0x17c>)
   10fa8:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   10fac:	b128      	cbz	r0, 10fba <hci_cmd_done+0x7a>
		net_buf_unref(bt_dev.sent_cmd);
   10fae:	f009 ffd2 	bl	1af56 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   10fb2:	4b42      	ldr	r3, [pc, #264]	; (110bc <hci_cmd_done+0x17c>)
   10fb4:	2200      	movs	r2, #0
   10fb6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	if (cmd(buf)->state && !status) {
   10fba:	4620      	mov	r0, r4
   10fbc:	f009 fee5 	bl	1ad8a <net_buf_id>
   10fc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10fc4:	4b3c      	ldr	r3, [pc, #240]	; (110b8 <hci_cmd_done+0x178>)
   10fc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   10fca:	6843      	ldr	r3, [r0, #4]
   10fcc:	b10b      	cbz	r3, 10fd2 <hci_cmd_done+0x92>
   10fce:	2e00      	cmp	r6, #0
   10fd0:	d039      	beq.n	11046 <hci_cmd_done+0x106>
	if (cmd(buf)->sync) {
   10fd2:	4620      	mov	r0, r4
   10fd4:	f009 fed9 	bl	1ad8a <net_buf_id>
   10fd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10fdc:	4b36      	ldr	r3, [pc, #216]	; (110b8 <hci_cmd_done+0x178>)
   10fde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   10fe2:	6883      	ldr	r3, [r0, #8]
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	d0d1      	beq.n	10f8c <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   10fe8:	4620      	mov	r0, r4
   10fea:	f009 fece 	bl	1ad8a <net_buf_id>
   10fee:	4d32      	ldr	r5, [pc, #200]	; (110b8 <hci_cmd_done+0x178>)
   10ff0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10ff4:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   10ff8:	4620      	mov	r0, r4
   10ffa:	f009 fec6 	bl	1ad8a <net_buf_id>
   10ffe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11002:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   11006:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   11008:	f004 fcf2 	bl	159f0 <z_impl_k_sem_give>
}
   1100c:	e7be      	b.n	10f8c <hci_cmd_done+0x4c>
   1100e:	4b27      	ldr	r3, [pc, #156]	; (110ac <hci_cmd_done+0x16c>)
   11010:	4a27      	ldr	r2, [pc, #156]	; (110b0 <hci_cmd_done+0x170>)
   11012:	1a9b      	subs	r3, r3, r2
   11014:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   11016:	f04f 0600 	mov.w	r6, #0
   1101a:	2202      	movs	r2, #2
   1101c:	f362 0602 	bfi	r6, r2, #0, #3
   11020:	f36f 06c5 	bfc	r6, #3, #3
   11024:	f363 168f 	bfi	r6, r3, #6, #10
   11028:	4620      	mov	r0, r4
   1102a:	f009 feae 	bl	1ad8a <net_buf_id>
   1102e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11032:	4b21      	ldr	r3, [pc, #132]	; (110b8 <hci_cmd_done+0x178>)
   11034:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   11038:	4633      	mov	r3, r6
   1103a:	8842      	ldrh	r2, [r0, #2]
   1103c:	4629      	mov	r1, r5
   1103e:	4820      	ldr	r0, [pc, #128]	; (110c0 <hci_cmd_done+0x180>)
   11040:	f7fe f944 	bl	f2cc <log_2>
		return;
   11044:	e7a2      	b.n	10f8c <hci_cmd_done+0x4c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   11046:	4620      	mov	r0, r4
   11048:	f009 fe9f 	bl	1ad8a <net_buf_id>
   1104c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11050:	4b19      	ldr	r3, [pc, #100]	; (110b8 <hci_cmd_done+0x178>)
   11052:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   11056:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   11058:	6813      	ldr	r3, [r2, #0]
   1105a:	6851      	ldr	r1, [r2, #4]
   1105c:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1105e:	f001 051f 	and.w	r5, r1, #31
   11062:	2201      	movs	r2, #1
   11064:	40aa      	lsls	r2, r5

	if (val) {
   11066:	b170      	cbz	r0, 11086 <hci_cmd_done+0x146>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11068:	0949      	lsrs	r1, r1, #5
   1106a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1106e:	f3bf 8f5b 	dmb	ish
   11072:	e853 1f00 	ldrex	r1, [r3]
   11076:	4311      	orrs	r1, r2
   11078:	e843 1000 	strex	r0, r1, [r3]
   1107c:	2800      	cmp	r0, #0
   1107e:	d1f8      	bne.n	11072 <hci_cmd_done+0x132>
   11080:	f3bf 8f5b 	dmb	ish
   11084:	e7a5      	b.n	10fd2 <hci_cmd_done+0x92>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11086:	0949      	lsrs	r1, r1, #5
   11088:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1108c:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1108e:	f3bf 8f5b 	dmb	ish
   11092:	e853 1f00 	ldrex	r1, [r3]
   11096:	4011      	ands	r1, r2
   11098:	e843 1000 	strex	r0, r1, [r3]
   1109c:	2800      	cmp	r0, #0
   1109e:	d1f8      	bne.n	11092 <hci_cmd_done+0x152>
   110a0:	f3bf 8f5b 	dmb	ish
	}
}
   110a4:	e795      	b.n	10fd2 <hci_cmd_done+0x92>
   110a6:	bf00      	nop
   110a8:	20000624 	.word	0x20000624
   110ac:	0001cc3c 	.word	0x0001cc3c
   110b0:	0001cc2c 	.word	0x0001cc2c
   110b4:	0001d640 	.word	0x0001d640
   110b8:	20002050 	.word	0x20002050
   110bc:	20000290 	.word	0x20000290
   110c0:	0001d678 	.word	0x0001d678

000110c4 <hci_cmd_status>:
{
   110c4:	b538      	push	{r3, r4, r5, lr}
   110c6:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   110c8:	2104      	movs	r1, #4
   110ca:	3008      	adds	r0, #8
   110cc:	f009 ff86 	bl	1afdc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   110d0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   110d2:	4622      	mov	r2, r4
   110d4:	7801      	ldrb	r1, [r0, #0]
   110d6:	8840      	ldrh	r0, [r0, #2]
   110d8:	f7ff ff32 	bl	10f40 <hci_cmd_done>
	if (ncmd) {
   110dc:	b905      	cbnz	r5, 110e0 <hci_cmd_status+0x1c>
}
   110de:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   110e0:	4801      	ldr	r0, [pc, #4]	; (110e8 <hci_cmd_status+0x24>)
   110e2:	f004 fc85 	bl	159f0 <z_impl_k_sem_give>
   110e6:	e7fa      	b.n	110de <hci_cmd_status+0x1a>
   110e8:	20000370 	.word	0x20000370

000110ec <hci_cmd_complete>:
{
   110ec:	b538      	push	{r3, r4, r5, lr}
   110ee:	4604      	mov	r4, r0
   110f0:	2103      	movs	r1, #3
   110f2:	3008      	adds	r0, #8
   110f4:	f009 ff72 	bl	1afdc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   110f8:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   110fa:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   110fc:	4622      	mov	r2, r4
   110fe:	7819      	ldrb	r1, [r3, #0]
   11100:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   11104:	f7ff ff1c 	bl	10f40 <hci_cmd_done>
	if (ncmd) {
   11108:	b905      	cbnz	r5, 1110c <hci_cmd_complete+0x20>
}
   1110a:	bd38      	pop	{r3, r4, r5, pc}
   1110c:	4801      	ldr	r0, [pc, #4]	; (11114 <hci_cmd_complete+0x28>)
   1110e:	f004 fc6f 	bl	159f0 <z_impl_k_sem_give>
   11112:	e7fa      	b.n	1110a <hci_cmd_complete+0x1e>
   11114:	20000370 	.word	0x20000370

00011118 <hci_hardware_error>:
{
   11118:	b508      	push	{r3, lr}
   1111a:	2101      	movs	r1, #1
   1111c:	3008      	adds	r0, #8
   1111e:	f009 ff5d 	bl	1afdc <net_buf_simple_pull_mem>
   11122:	4b09      	ldr	r3, [pc, #36]	; (11148 <hci_hardware_error+0x30>)
   11124:	4a09      	ldr	r2, [pc, #36]	; (1114c <hci_hardware_error+0x34>)
   11126:	1a9b      	subs	r3, r3, r2
   11128:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1112a:	f04f 0200 	mov.w	r2, #0
   1112e:	2101      	movs	r1, #1
   11130:	f361 0202 	bfi	r2, r1, #0, #3
   11134:	f36f 02c5 	bfc	r2, #3, #3
   11138:	f363 128f 	bfi	r2, r3, #6, #10
   1113c:	7801      	ldrb	r1, [r0, #0]
   1113e:	4804      	ldr	r0, [pc, #16]	; (11150 <hci_hardware_error+0x38>)
   11140:	f7fe f88e 	bl	f260 <log_1>
}
   11144:	bd08      	pop	{r3, pc}
   11146:	bf00      	nop
   11148:	0001cc3c 	.word	0x0001cc3c
   1114c:	0001cc2c 	.word	0x0001cc2c
   11150:	0001d6ac 	.word	0x0001d6ac

00011154 <hci_vendor_event>:
{
   11154:	b510      	push	{r4, lr}
   11156:	4b0c      	ldr	r3, [pc, #48]	; (11188 <hci_vendor_event+0x34>)
   11158:	4a0c      	ldr	r2, [pc, #48]	; (1118c <hci_vendor_event+0x38>)
   1115a:	1a9b      	subs	r3, r3, r2
   1115c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   1115e:	f04f 0400 	mov.w	r4, #0
   11162:	2202      	movs	r2, #2
   11164:	f362 0402 	bfi	r4, r2, #0, #3
   11168:	f36f 04c5 	bfc	r4, #3, #3
   1116c:	f363 148f 	bfi	r4, r3, #6, #10
   11170:	8981      	ldrh	r1, [r0, #12]
   11172:	6880      	ldr	r0, [r0, #8]
   11174:	f7ff fe02 	bl	10d7c <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   11178:	f7fd fefa 	bl	ef70 <z_log_strdup>
   1117c:	4601      	mov	r1, r0
   1117e:	4622      	mov	r2, r4
   11180:	4803      	ldr	r0, [pc, #12]	; (11190 <hci_vendor_event+0x3c>)
   11182:	f7fe f86d 	bl	f260 <log_1>
}
   11186:	bd10      	pop	{r4, pc}
   11188:	0001cc3c 	.word	0x0001cc3c
   1118c:	0001cc2c 	.word	0x0001cc2c
   11190:	0001d6d0 	.word	0x0001d6d0

00011194 <hci_le_meta_event>:
{
   11194:	b5f0      	push	{r4, r5, r6, r7, lr}
   11196:	b083      	sub	sp, #12
   11198:	4604      	mov	r4, r0
   1119a:	2101      	movs	r1, #1
   1119c:	3008      	adds	r0, #8
   1119e:	f009 ff1d 	bl	1afdc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   111a2:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   111a4:	2300      	movs	r3, #0
   111a6:	bb1b      	cbnz	r3, 111f0 <hci_le_meta_event+0x5c>
		const struct event_handler *handler = &handlers[i];
   111a8:	4a20      	ldr	r2, [pc, #128]	; (1122c <hci_le_meta_event+0x98>)
   111aa:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   111ae:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   111b2:	4295      	cmp	r5, r2
   111b4:	d108      	bne.n	111c8 <hci_le_meta_event+0x34>
		if (buf->len < handler->min_len) {
   111b6:	89a1      	ldrh	r1, [r4, #12]
   111b8:	7843      	ldrb	r3, [r0, #1]
   111ba:	4299      	cmp	r1, r3
   111bc:	d306      	bcc.n	111cc <hci_le_meta_event+0x38>
		handler->handler(buf);
   111be:	6843      	ldr	r3, [r0, #4]
   111c0:	4620      	mov	r0, r4
   111c2:	4798      	blx	r3
}
   111c4:	b003      	add	sp, #12
   111c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   111c8:	3301      	adds	r3, #1
   111ca:	e7ec      	b.n	111a6 <hci_le_meta_event+0x12>
   111cc:	4a18      	ldr	r2, [pc, #96]	; (11230 <hci_le_meta_event+0x9c>)
   111ce:	4b19      	ldr	r3, [pc, #100]	; (11234 <hci_le_meta_event+0xa0>)
   111d0:	1ad2      	subs	r2, r2, r3
   111d2:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   111d4:	f04f 0300 	mov.w	r3, #0
   111d8:	2001      	movs	r0, #1
   111da:	f360 0302 	bfi	r3, r0, #0, #3
   111de:	f36f 03c5 	bfc	r3, #3, #3
   111e2:	f362 138f 	bfi	r3, r2, #6, #10
   111e6:	462a      	mov	r2, r5
   111e8:	4813      	ldr	r0, [pc, #76]	; (11238 <hci_le_meta_event+0xa4>)
   111ea:	f7fe f86f 	bl	f2cc <log_2>
			return;
   111ee:	e7e9      	b.n	111c4 <hci_le_meta_event+0x30>
   111f0:	4b0f      	ldr	r3, [pc, #60]	; (11230 <hci_le_meta_event+0x9c>)
   111f2:	4a10      	ldr	r2, [pc, #64]	; (11234 <hci_le_meta_event+0xa0>)
   111f4:	1a9b      	subs	r3, r3, r2
   111f6:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   111f8:	f04f 0600 	mov.w	r6, #0
   111fc:	2202      	movs	r2, #2
   111fe:	f362 0602 	bfi	r6, r2, #0, #3
   11202:	f36f 06c5 	bfc	r6, #3, #3
   11206:	f363 168f 	bfi	r6, r3, #6, #10
   1120a:	89a7      	ldrh	r7, [r4, #12]
   1120c:	4639      	mov	r1, r7
   1120e:	68a0      	ldr	r0, [r4, #8]
   11210:	f7ff fdb4 	bl	10d7c <bt_hex_real>
   11214:	f7fd feac 	bl	ef70 <z_log_strdup>
   11218:	4603      	mov	r3, r0
   1121a:	f8ad 6000 	strh.w	r6, [sp]
   1121e:	463a      	mov	r2, r7
   11220:	4629      	mov	r1, r5
   11222:	4806      	ldr	r0, [pc, #24]	; (1123c <hci_le_meta_event+0xa8>)
   11224:	f7fd ffde 	bl	f1e4 <log_3>
}
   11228:	e7cc      	b.n	111c4 <hci_le_meta_event+0x30>
   1122a:	bf00      	nop
   1122c:	0001d9c0 	.word	0x0001d9c0
   11230:	0001cc3c 	.word	0x0001cc3c
   11234:	0001cc2c 	.word	0x0001cc2c
   11238:	0001d6f4 	.word	0x0001d6f4
   1123c:	0001d718 	.word	0x0001d718

00011240 <hci_event>:
{
   11240:	b5f0      	push	{r4, r5, r6, r7, lr}
   11242:	b083      	sub	sp, #12
   11244:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11246:	8983      	ldrh	r3, [r0, #12]
   11248:	2b01      	cmp	r3, #1
   1124a:	d928      	bls.n	1129e <hci_event+0x5e>
   1124c:	2102      	movs	r1, #2
   1124e:	f104 0008 	add.w	r0, r4, #8
   11252:	f009 fec3 	bl	1afdc <net_buf_simple_pull_mem>
   11256:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   11258:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1125a:	2b05      	cmp	r3, #5
   1125c:	d02f      	beq.n	112be <hci_event+0x7e>
   1125e:	d330      	bcc.n	112c2 <hci_event+0x82>
   11260:	3b0e      	subs	r3, #14
   11262:	b2db      	uxtb	r3, r3
   11264:	2b01      	cmp	r3, #1
   11266:	d828      	bhi.n	112ba <hci_event+0x7a>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   11268:	2301      	movs	r3, #1
   1126a:	f013 0f02 	tst.w	r3, #2
   1126e:	d02a      	beq.n	112c6 <hci_event+0x86>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   11270:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   11272:	2300      	movs	r3, #0
   11274:	2b02      	cmp	r3, #2
   11276:	d848      	bhi.n	1130a <hci_event+0xca>
		const struct event_handler *handler = &handlers[i];
   11278:	4a32      	ldr	r2, [pc, #200]	; (11344 <hci_event+0x104>)
   1127a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   1127e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   11282:	4295      	cmp	r5, r2
   11284:	d12d      	bne.n	112e2 <hci_event+0xa2>
		if (buf->len < handler->min_len) {
   11286:	89a1      	ldrh	r1, [r4, #12]
   11288:	7843      	ldrb	r3, [r0, #1]
   1128a:	4299      	cmp	r1, r3
   1128c:	d32b      	bcc.n	112e6 <hci_event+0xa6>
		handler->handler(buf);
   1128e:	6843      	ldr	r3, [r0, #4]
   11290:	4620      	mov	r0, r4
   11292:	4798      	blx	r3
	net_buf_unref(buf);
   11294:	4620      	mov	r0, r4
   11296:	f009 fe5e 	bl	1af56 <net_buf_unref>
}
   1129a:	b003      	add	sp, #12
   1129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1129e:	f640 1317 	movw	r3, #2327	; 0x917
   112a2:	4a29      	ldr	r2, [pc, #164]	; (11348 <hci_event+0x108>)
   112a4:	4929      	ldr	r1, [pc, #164]	; (1134c <hci_event+0x10c>)
   112a6:	482a      	ldr	r0, [pc, #168]	; (11350 <hci_event+0x110>)
   112a8:	f008 fbb0 	bl	19a0c <printk>
   112ac:	4040      	eors	r0, r0
   112ae:	f380 8811 	msr	BASEPRI, r0
   112b2:	f04f 0003 	mov.w	r0, #3
   112b6:	df02      	svc	2
   112b8:	e7c8      	b.n	1124c <hci_event+0xc>
	default:
		return BT_HCI_EVT_FLAG_RECV;
   112ba:	2302      	movs	r3, #2
   112bc:	e7d5      	b.n	1126a <hci_event+0x2a>
	switch (evt) {
   112be:	2303      	movs	r3, #3
   112c0:	e7d3      	b.n	1126a <hci_event+0x2a>
		return BT_HCI_EVT_FLAG_RECV;
   112c2:	2302      	movs	r3, #2
   112c4:	e7d1      	b.n	1126a <hci_event+0x2a>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   112c6:	f640 131b 	movw	r3, #2331	; 0x91b
   112ca:	4a1f      	ldr	r2, [pc, #124]	; (11348 <hci_event+0x108>)
   112cc:	4921      	ldr	r1, [pc, #132]	; (11354 <hci_event+0x114>)
   112ce:	4820      	ldr	r0, [pc, #128]	; (11350 <hci_event+0x110>)
   112d0:	f008 fb9c 	bl	19a0c <printk>
   112d4:	4040      	eors	r0, r0
   112d6:	f380 8811 	msr	BASEPRI, r0
   112da:	f04f 0003 	mov.w	r0, #3
   112de:	df02      	svc	2
   112e0:	e7c6      	b.n	11270 <hci_event+0x30>
	for (i = 0; i < num_handlers; i++) {
   112e2:	3301      	adds	r3, #1
   112e4:	e7c6      	b.n	11274 <hci_event+0x34>
   112e6:	4a1c      	ldr	r2, [pc, #112]	; (11358 <hci_event+0x118>)
   112e8:	4b1c      	ldr	r3, [pc, #112]	; (1135c <hci_event+0x11c>)
   112ea:	1ad2      	subs	r2, r2, r3
   112ec:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   112ee:	f04f 0300 	mov.w	r3, #0
   112f2:	2001      	movs	r0, #1
   112f4:	f360 0302 	bfi	r3, r0, #0, #3
   112f8:	f36f 03c5 	bfc	r3, #3, #3
   112fc:	f362 138f 	bfi	r3, r2, #6, #10
   11300:	462a      	mov	r2, r5
   11302:	4817      	ldr	r0, [pc, #92]	; (11360 <hci_event+0x120>)
   11304:	f7fd ffe2 	bl	f2cc <log_2>
			return;
   11308:	e7c4      	b.n	11294 <hci_event+0x54>
   1130a:	4b13      	ldr	r3, [pc, #76]	; (11358 <hci_event+0x118>)
   1130c:	4a13      	ldr	r2, [pc, #76]	; (1135c <hci_event+0x11c>)
   1130e:	1a9b      	subs	r3, r3, r2
   11310:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   11312:	f04f 0600 	mov.w	r6, #0
   11316:	2202      	movs	r2, #2
   11318:	f362 0602 	bfi	r6, r2, #0, #3
   1131c:	f36f 06c5 	bfc	r6, #3, #3
   11320:	f363 168f 	bfi	r6, r3, #6, #10
   11324:	89a7      	ldrh	r7, [r4, #12]
   11326:	4639      	mov	r1, r7
   11328:	68a0      	ldr	r0, [r4, #8]
   1132a:	f7ff fd27 	bl	10d7c <bt_hex_real>
   1132e:	f7fd fe1f 	bl	ef70 <z_log_strdup>
   11332:	4603      	mov	r3, r0
   11334:	f8ad 6000 	strh.w	r6, [sp]
   11338:	463a      	mov	r2, r7
   1133a:	4629      	mov	r1, r5
   1133c:	4809      	ldr	r0, [pc, #36]	; (11364 <hci_event+0x124>)
   1133e:	f7fd ff51 	bl	f1e4 <log_3>
   11342:	e7a7      	b.n	11294 <hci_event+0x54>
   11344:	0001d9d8 	.word	0x0001d9d8
   11348:	0001d73c 	.word	0x0001d73c
   1134c:	0001d770 	.word	0x0001d770
   11350:	0001d78c 	.word	0x0001d78c
   11354:	0001d7ac 	.word	0x0001d7ac
   11358:	0001cc3c 	.word	0x0001cc3c
   1135c:	0001cc2c 	.word	0x0001cc2c
   11360:	0001d6f4 	.word	0x0001d6f4
   11364:	0001d718 	.word	0x0001d718

00011368 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   11368:	b538      	push	{r3, r4, r5, lr}
   1136a:	e003      	b.n	11374 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   1136c:	f7ff ff68 	bl	11240 <hci_event>
	z_impl_k_yield();
   11370:	f005 f81e 	bl	163b0 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11374:	f04f 32ff 	mov.w	r2, #4294967295
   11378:	f04f 33ff 	mov.w	r3, #4294967295
   1137c:	480c      	ldr	r0, [pc, #48]	; (113b0 <hci_rx_thread+0x48>)
   1137e:	f009 fdbe 	bl	1aefe <net_buf_get>
   11382:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11384:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   11386:	2901      	cmp	r1, #1
   11388:	d0f0      	beq.n	1136c <hci_rx_thread+0x4>
   1138a:	4b0a      	ldr	r3, [pc, #40]	; (113b4 <hci_rx_thread+0x4c>)
   1138c:	4a0a      	ldr	r2, [pc, #40]	; (113b8 <hci_rx_thread+0x50>)
   1138e:	1a9b      	subs	r3, r3, r2
   11390:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   11392:	2201      	movs	r2, #1
   11394:	f362 0502 	bfi	r5, r2, #0, #3
   11398:	f36f 05c5 	bfc	r5, #3, #3
   1139c:	f363 158f 	bfi	r5, r3, #6, #10
   113a0:	462a      	mov	r2, r5
   113a2:	4806      	ldr	r0, [pc, #24]	; (113bc <hci_rx_thread+0x54>)
   113a4:	f7fd ff5c 	bl	f260 <log_1>
			net_buf_unref(buf);
   113a8:	4620      	mov	r0, r4
   113aa:	f009 fdd4 	bl	1af56 <net_buf_unref>
			break;
   113ae:	e7df      	b.n	11370 <hci_rx_thread+0x8>
   113b0:	2000038c 	.word	0x2000038c
   113b4:	0001cc3c 	.word	0x0001cc3c
   113b8:	0001cc2c 	.word	0x0001cc2c
   113bc:	0001d7dc 	.word	0x0001d7dc

000113c0 <bt_hci_cmd_state_set_init>:
{
   113c0:	b510      	push	{r4, lr}
   113c2:	460c      	mov	r4, r1
	state->target = target;
   113c4:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   113c6:	604b      	str	r3, [r1, #4]
	state->val = val;
   113c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   113cc:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   113ce:	f009 fcdc 	bl	1ad8a <net_buf_id>
   113d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   113d6:	4b02      	ldr	r3, [pc, #8]	; (113e0 <bt_hci_cmd_state_set_init+0x20>)
   113d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   113dc:	6044      	str	r4, [r0, #4]
}
   113de:	bd10      	pop	{r4, pc}
   113e0:	20002050 	.word	0x20002050

000113e4 <bt_hci_cmd_create>:
{
   113e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113e8:	4682      	mov	sl, r0
   113ea:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   113ec:	f04f 32ff 	mov.w	r2, #4294967295
   113f0:	f04f 33ff 	mov.w	r3, #4294967295
   113f4:	4817      	ldr	r0, [pc, #92]	; (11454 <bt_hci_cmd_create+0x70>)
   113f6:	f009 fd7b 	bl	1aef0 <net_buf_alloc_fixed>
   113fa:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   113fc:	f100 0808 	add.w	r8, r0, #8
   11400:	2100      	movs	r1, #0
   11402:	4640      	mov	r0, r8
   11404:	f009 fd96 	bl	1af34 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11408:	2700      	movs	r7, #0
   1140a:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   1140c:	4620      	mov	r0, r4
   1140e:	f009 fcbc 	bl	1ad8a <net_buf_id>
   11412:	4d11      	ldr	r5, [pc, #68]	; (11458 <bt_hci_cmd_create+0x74>)
   11414:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11418:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1141c:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   11420:	4620      	mov	r0, r4
   11422:	f009 fcb2 	bl	1ad8a <net_buf_id>
   11426:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1142a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1142e:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   11430:	4620      	mov	r0, r4
   11432:	f009 fcaa 	bl	1ad8a <net_buf_id>
   11436:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1143a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1143e:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   11440:	2103      	movs	r1, #3
   11442:	4640      	mov	r0, r8
   11444:	f009 fdb1 	bl	1afaa <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   11448:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   1144c:	7086      	strb	r6, [r0, #2]
}
   1144e:	4620      	mov	r0, r4
   11450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11454:	20000624 	.word	0x20000624
   11458:	20002050 	.word	0x20002050

0001145c <bt_hci_cmd_send_sync>:
{
   1145c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1145e:	b087      	sub	sp, #28
   11460:	4606      	mov	r6, r0
   11462:	4615      	mov	r5, r2
	if (!buf) {
   11464:	460c      	mov	r4, r1
   11466:	b361      	cbz	r1, 114c2 <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   11468:	2201      	movs	r2, #1
   1146a:	2100      	movs	r1, #0
   1146c:	4668      	mov	r0, sp
   1146e:	f00a feaa 	bl	1c1c6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   11472:	4620      	mov	r0, r4
   11474:	f009 fc89 	bl	1ad8a <net_buf_id>
   11478:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1147c:	4b2f      	ldr	r3, [pc, #188]	; (1153c <bt_hci_cmd_send_sync+0xe0>)
   1147e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   11482:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   11486:	4620      	mov	r0, r4
   11488:	f009 fd8b 	bl	1afa2 <net_buf_ref>
   1148c:	4601      	mov	r1, r0
   1148e:	482c      	ldr	r0, [pc, #176]	; (11540 <bt_hci_cmd_send_sync+0xe4>)
   11490:	f009 fd54 	bl	1af3c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   11494:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   11498:	2300      	movs	r3, #0
   1149a:	4668      	mov	r0, sp
   1149c:	f004 fad0 	bl	15a40 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   114a0:	4607      	mov	r7, r0
   114a2:	b9b0      	cbnz	r0, 114d2 <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   114a4:	4620      	mov	r0, r4
   114a6:	f009 fc70 	bl	1ad8a <net_buf_id>
   114aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   114ae:	4b23      	ldr	r3, [pc, #140]	; (1153c <bt_hci_cmd_send_sync+0xe0>)
   114b0:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   114b4:	b9ff      	cbnz	r7, 114f6 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   114b6:	2d00      	cmp	r5, #0
   114b8:	d03a      	beq.n	11530 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   114ba:	602c      	str	r4, [r5, #0]
	return 0;
   114bc:	2000      	movs	r0, #0
}
   114be:	b007      	add	sp, #28
   114c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   114c2:	f7ff ff8f 	bl	113e4 <bt_hci_cmd_create>
		if (!buf) {
   114c6:	4604      	mov	r4, r0
   114c8:	2800      	cmp	r0, #0
   114ca:	d1cd      	bne.n	11468 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   114cc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   114d0:	e7f5      	b.n	114be <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   114d2:	f240 1331 	movw	r3, #305	; 0x131
   114d6:	4a1b      	ldr	r2, [pc, #108]	; (11544 <bt_hci_cmd_send_sync+0xe8>)
   114d8:	491b      	ldr	r1, [pc, #108]	; (11548 <bt_hci_cmd_send_sync+0xec>)
   114da:	481c      	ldr	r0, [pc, #112]	; (1154c <bt_hci_cmd_send_sync+0xf0>)
   114dc:	f008 fa96 	bl	19a0c <printk>
   114e0:	4639      	mov	r1, r7
   114e2:	481b      	ldr	r0, [pc, #108]	; (11550 <bt_hci_cmd_send_sync+0xf4>)
   114e4:	f008 fa92 	bl	19a0c <printk>
   114e8:	4040      	eors	r0, r0
   114ea:	f380 8811 	msr	BASEPRI, r0
   114ee:	f04f 0003 	mov.w	r0, #3
   114f2:	df02      	svc	2
   114f4:	e7d6      	b.n	114a4 <bt_hci_cmd_send_sync+0x48>
   114f6:	4a17      	ldr	r2, [pc, #92]	; (11554 <bt_hci_cmd_send_sync+0xf8>)
   114f8:	4b17      	ldr	r3, [pc, #92]	; (11558 <bt_hci_cmd_send_sync+0xfc>)
   114fa:	1ad2      	subs	r2, r2, r3
   114fc:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   114fe:	f04f 0300 	mov.w	r3, #0
   11502:	2102      	movs	r1, #2
   11504:	f361 0302 	bfi	r3, r1, #0, #3
   11508:	f36f 03c5 	bfc	r3, #3, #3
   1150c:	f362 138f 	bfi	r3, r2, #6, #10
   11510:	463a      	mov	r2, r7
   11512:	4631      	mov	r1, r6
   11514:	4811      	ldr	r0, [pc, #68]	; (1155c <bt_hci_cmd_send_sync+0x100>)
   11516:	f7fd fed9 	bl	f2cc <log_2>
		net_buf_unref(buf);
   1151a:	4620      	mov	r0, r4
   1151c:	f009 fd1b 	bl	1af56 <net_buf_unref>
		switch (status) {
   11520:	2f09      	cmp	r7, #9
   11522:	d002      	beq.n	1152a <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   11524:	f06f 0004 	mvn.w	r0, #4
   11528:	e7c9      	b.n	114be <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   1152a:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   1152e:	e7c6      	b.n	114be <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   11530:	4620      	mov	r0, r4
   11532:	f009 fd10 	bl	1af56 <net_buf_unref>
	return 0;
   11536:	2000      	movs	r0, #0
   11538:	e7c1      	b.n	114be <bt_hci_cmd_send_sync+0x62>
   1153a:	bf00      	nop
   1153c:	20002050 	.word	0x20002050
   11540:	200003a4 	.word	0x200003a4
   11544:	0001d73c 	.word	0x0001d73c
   11548:	0001d7f0 	.word	0x0001d7f0
   1154c:	0001d78c 	.word	0x0001d78c
   11550:	0001d7fc 	.word	0x0001d7fc
   11554:	0001cc3c 	.word	0x0001cc3c
   11558:	0001cc2c 	.word	0x0001cc2c
   1155c:	0001d81c 	.word	0x0001d81c

00011560 <common_init>:
{
   11560:	b510      	push	{r4, lr}
   11562:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11564:	4b22      	ldr	r3, [pc, #136]	; (115f0 <common_init+0x90>)
   11566:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   1156a:	689b      	ldr	r3, [r3, #8]
   1156c:	f013 0f01 	tst.w	r3, #1
   11570:	d10d      	bne.n	1158e <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   11572:	aa01      	add	r2, sp, #4
   11574:	2100      	movs	r1, #0
   11576:	f640 4003 	movw	r0, #3075	; 0xc03
   1157a:	f7ff ff6f 	bl	1145c <bt_hci_cmd_send_sync>
		if (err) {
   1157e:	4604      	mov	r4, r0
   11580:	b968      	cbnz	r0, 1159e <common_init+0x3e>
		hci_reset_complete(rsp);
   11582:	9801      	ldr	r0, [sp, #4]
   11584:	f7ff fca2 	bl	10ecc <hci_reset_complete>
		net_buf_unref(rsp);
   11588:	9801      	ldr	r0, [sp, #4]
   1158a:	f009 fce4 	bl	1af56 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1158e:	aa01      	add	r2, sp, #4
   11590:	2100      	movs	r1, #0
   11592:	f241 0003 	movw	r0, #4099	; 0x1003
   11596:	f7ff ff61 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   1159a:	4604      	mov	r4, r0
   1159c:	b110      	cbz	r0, 115a4 <common_init+0x44>
}
   1159e:	4620      	mov	r0, r4
   115a0:	b002      	add	sp, #8
   115a2:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   115a4:	9801      	ldr	r0, [sp, #4]
   115a6:	f7ff fcad 	bl	10f04 <read_local_features_complete>
	net_buf_unref(rsp);
   115aa:	9801      	ldr	r0, [sp, #4]
   115ac:	f009 fcd3 	bl	1af56 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   115b0:	aa01      	add	r2, sp, #4
   115b2:	2100      	movs	r1, #0
   115b4:	f241 0001 	movw	r0, #4097	; 0x1001
   115b8:	f7ff ff50 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   115bc:	4604      	mov	r4, r0
   115be:	2800      	cmp	r0, #0
   115c0:	d1ed      	bne.n	1159e <common_init+0x3e>
	read_local_ver_complete(rsp);
   115c2:	9801      	ldr	r0, [sp, #4]
   115c4:	f7ff fc4e 	bl	10e64 <read_local_ver_complete>
	net_buf_unref(rsp);
   115c8:	9801      	ldr	r0, [sp, #4]
   115ca:	f009 fcc4 	bl	1af56 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   115ce:	aa01      	add	r2, sp, #4
   115d0:	2100      	movs	r1, #0
   115d2:	f241 0002 	movw	r0, #4098	; 0x1002
   115d6:	f7ff ff41 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   115da:	4604      	mov	r4, r0
   115dc:	2800      	cmp	r0, #0
   115de:	d1de      	bne.n	1159e <common_init+0x3e>
	read_supported_commands_complete(rsp);
   115e0:	9801      	ldr	r0, [sp, #4]
   115e2:	f7ff fc99 	bl	10f18 <read_supported_commands_complete>
	net_buf_unref(rsp);
   115e6:	9801      	ldr	r0, [sp, #4]
   115e8:	f009 fcb5 	bl	1af56 <net_buf_unref>
	return 0;
   115ec:	e7d7      	b.n	1159e <common_init+0x3e>
   115ee:	bf00      	nop
   115f0:	20000290 	.word	0x20000290

000115f4 <le_init>:
{
   115f4:	b510      	push	{r4, lr}
   115f6:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   115f8:	4b31      	ldr	r3, [pc, #196]	; (116c0 <le_init+0xcc>)
   115fa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   115fe:	f013 0f40 	tst.w	r3, #64	; 0x40
   11602:	d00a      	beq.n	1161a <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11604:	aa01      	add	r2, sp, #4
   11606:	2100      	movs	r1, #0
   11608:	f242 0003 	movw	r0, #8195	; 0x2003
   1160c:	f7ff ff26 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   11610:	4603      	mov	r3, r0
   11612:	b1a8      	cbz	r0, 11640 <le_init+0x4c>
}
   11614:	4618      	mov	r0, r3
   11616:	b002      	add	sp, #8
   11618:	bd10      	pop	{r4, pc}
   1161a:	4b2a      	ldr	r3, [pc, #168]	; (116c4 <le_init+0xd0>)
   1161c:	4a2a      	ldr	r2, [pc, #168]	; (116c8 <le_init+0xd4>)
   1161e:	1a9b      	subs	r3, r3, r2
   11620:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   11622:	f04f 0100 	mov.w	r1, #0
   11626:	2201      	movs	r2, #1
   11628:	f362 0102 	bfi	r1, r2, #0, #3
   1162c:	f36f 01c5 	bfc	r1, #3, #3
   11630:	f363 118f 	bfi	r1, r3, #6, #10
   11634:	4825      	ldr	r0, [pc, #148]	; (116cc <le_init+0xd8>)
   11636:	f7fd fec9 	bl	f3cc <log_0>
		return -ENODEV;
   1163a:	f06f 0312 	mvn.w	r3, #18
   1163e:	e7e9      	b.n	11614 <le_init+0x20>
	read_le_features_complete(rsp);
   11640:	9801      	ldr	r0, [sp, #4]
   11642:	f7ff fc73 	bl	10f2c <read_le_features_complete>
	net_buf_unref(rsp);
   11646:	9801      	ldr	r0, [sp, #4]
   11648:	f009 fc85 	bl	1af56 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1164c:	4b1c      	ldr	r3, [pc, #112]	; (116c0 <le_init+0xcc>)
   1164e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   11652:	f013 0f20 	tst.w	r3, #32
   11656:	d018      	beq.n	1168a <le_init+0x96>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   11658:	4b19      	ldr	r3, [pc, #100]	; (116c0 <le_init+0xcc>)
   1165a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1165e:	f013 0f08 	tst.w	r3, #8
   11662:	d00e      	beq.n	11682 <le_init+0x8e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11664:	aa01      	add	r2, sp, #4
   11666:	2100      	movs	r1, #0
   11668:	f242 001c 	movw	r0, #8220	; 0x201c
   1166c:	f7ff fef6 	bl	1145c <bt_hci_cmd_send_sync>
		if (err) {
   11670:	4603      	mov	r3, r0
   11672:	2800      	cmp	r0, #0
   11674:	d1ce      	bne.n	11614 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   11676:	9801      	ldr	r0, [sp, #4]
   11678:	f7ff fc0a 	bl	10e90 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   1167c:	9801      	ldr	r0, [sp, #4]
   1167e:	f009 fc6a 	bl	1af56 <net_buf_unref>
	return  le_set_event_mask();
   11682:	f009 fac0 	bl	1ac06 <le_set_event_mask>
   11686:	4603      	mov	r3, r0
   11688:	e7c4      	b.n	11614 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1168a:	2102      	movs	r1, #2
   1168c:	f640 406d 	movw	r0, #3181	; 0xc6d
   11690:	f7ff fea8 	bl	113e4 <bt_hci_cmd_create>
		if (!buf) {
   11694:	4604      	mov	r4, r0
   11696:	b180      	cbz	r0, 116ba <le_init+0xc6>
   11698:	2102      	movs	r1, #2
   1169a:	3008      	adds	r0, #8
   1169c:	f009 fc85 	bl	1afaa <net_buf_simple_add>
		cp_le->le = 0x01;
   116a0:	2301      	movs	r3, #1
   116a2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   116a4:	2200      	movs	r2, #0
   116a6:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   116a8:	4621      	mov	r1, r4
   116aa:	f640 406d 	movw	r0, #3181	; 0xc6d
   116ae:	f7ff fed5 	bl	1145c <bt_hci_cmd_send_sync>
		if (err) {
   116b2:	4603      	mov	r3, r0
   116b4:	2800      	cmp	r0, #0
   116b6:	d0cf      	beq.n	11658 <le_init+0x64>
   116b8:	e7ac      	b.n	11614 <le_init+0x20>
			return -ENOBUFS;
   116ba:	f06f 0368 	mvn.w	r3, #104	; 0x68
   116be:	e7a9      	b.n	11614 <le_init+0x20>
   116c0:	20000290 	.word	0x20000290
   116c4:	0001cc3c 	.word	0x0001cc3c
   116c8:	0001cc2c 	.word	0x0001cc2c
   116cc:	0001d838 	.word	0x0001d838

000116d0 <hci_vs_init>:
{
   116d0:	b510      	push	{r4, lr}
   116d2:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   116d4:	aa01      	add	r2, sp, #4
   116d6:	2100      	movs	r1, #0
   116d8:	f64f 4001 	movw	r0, #64513	; 0xfc01
   116dc:	f7ff febe 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   116e0:	bb68      	cbnz	r0, 1173e <hci_vs_init+0x6e>
	net_buf_unref(rsp);
   116e2:	9801      	ldr	r0, [sp, #4]
   116e4:	f009 fc37 	bl	1af56 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   116e8:	aa01      	add	r2, sp, #4
   116ea:	2100      	movs	r1, #0
   116ec:	f64f 4002 	movw	r0, #64514	; 0xfc02
   116f0:	f7ff feb4 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   116f4:	2800      	cmp	r0, #0
   116f6:	d134      	bne.n	11762 <hci_vs_init+0x92>
	rp.cmds = (void *)rsp->data;
   116f8:	9b01      	ldr	r3, [sp, #4]
   116fa:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   116fc:	4c2a      	ldr	r4, [pc, #168]	; (117a8 <hci_vs_init+0xd8>)
   116fe:	2202      	movs	r2, #2
   11700:	3101      	adds	r1, #1
   11702:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   11706:	f009 fa0c 	bl	1ab22 <memcpy>
	net_buf_unref(rsp);
   1170a:	9801      	ldr	r0, [sp, #4]
   1170c:	f009 fc23 	bl	1af56 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   11710:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   11714:	f013 0f04 	tst.w	r3, #4
   11718:	d021      	beq.n	1175e <hci_vs_init+0x8e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1171a:	aa01      	add	r2, sp, #4
   1171c:	2100      	movs	r1, #0
   1171e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11722:	f7ff fe9b 	bl	1145c <bt_hci_cmd_send_sync>
		if (err) {
   11726:	bb68      	cbnz	r0, 11784 <hci_vs_init+0xb4>
		rp.feat = (void *)rsp->data;
   11728:	9b01      	ldr	r3, [sp, #4]
   1172a:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1172c:	2201      	movs	r2, #1
   1172e:	4411      	add	r1, r2
   11730:	481e      	ldr	r0, [pc, #120]	; (117ac <hci_vs_init+0xdc>)
   11732:	f009 f9f6 	bl	1ab22 <memcpy>
		net_buf_unref(rsp);
   11736:	9801      	ldr	r0, [sp, #4]
   11738:	f009 fc0d 	bl	1af56 <net_buf_unref>
   1173c:	e00f      	b.n	1175e <hci_vs_init+0x8e>
   1173e:	4b1c      	ldr	r3, [pc, #112]	; (117b0 <hci_vs_init+0xe0>)
   11740:	4a1c      	ldr	r2, [pc, #112]	; (117b4 <hci_vs_init+0xe4>)
   11742:	1a9b      	subs	r3, r3, r2
   11744:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   11746:	f04f 0100 	mov.w	r1, #0
   1174a:	2202      	movs	r2, #2
   1174c:	f362 0102 	bfi	r1, r2, #0, #3
   11750:	f36f 01c5 	bfc	r1, #3, #3
   11754:	f363 118f 	bfi	r1, r3, #6, #10
   11758:	4817      	ldr	r0, [pc, #92]	; (117b8 <hci_vs_init+0xe8>)
   1175a:	f7fd fe37 	bl	f3cc <log_0>
}
   1175e:	b002      	add	sp, #8
   11760:	bd10      	pop	{r4, pc}
   11762:	4b13      	ldr	r3, [pc, #76]	; (117b0 <hci_vs_init+0xe0>)
   11764:	4a13      	ldr	r2, [pc, #76]	; (117b4 <hci_vs_init+0xe4>)
   11766:	1a9b      	subs	r3, r3, r2
   11768:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read supported vendor commands");
   1176a:	f04f 0100 	mov.w	r1, #0
   1176e:	2202      	movs	r2, #2
   11770:	f362 0102 	bfi	r1, r2, #0, #3
   11774:	f36f 01c5 	bfc	r1, #3, #3
   11778:	f363 118f 	bfi	r1, r3, #6, #10
   1177c:	480f      	ldr	r0, [pc, #60]	; (117bc <hci_vs_init+0xec>)
   1177e:	f7fd fe25 	bl	f3cc <log_0>
		return;
   11782:	e7ec      	b.n	1175e <hci_vs_init+0x8e>
   11784:	4b0a      	ldr	r3, [pc, #40]	; (117b0 <hci_vs_init+0xe0>)
   11786:	4a0b      	ldr	r2, [pc, #44]	; (117b4 <hci_vs_init+0xe4>)
   11788:	1a9b      	subs	r3, r3, r2
   1178a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   1178c:	f04f 0100 	mov.w	r1, #0
   11790:	2202      	movs	r2, #2
   11792:	f362 0102 	bfi	r1, r2, #0, #3
   11796:	f36f 01c5 	bfc	r1, #3, #3
   1179a:	f363 118f 	bfi	r1, r3, #6, #10
   1179e:	4808      	ldr	r0, [pc, #32]	; (117c0 <hci_vs_init+0xf0>)
   117a0:	f7fd fe14 	bl	f3cc <log_0>
			return;
   117a4:	e7db      	b.n	1175e <hci_vs_init+0x8e>
   117a6:	bf00      	nop
   117a8:	20000290 	.word	0x20000290
   117ac:	20000348 	.word	0x20000348
   117b0:	0001cc3c 	.word	0x0001cc3c
   117b4:	0001cc2c 	.word	0x0001cc2c
   117b8:	0001d85c 	.word	0x0001d85c
   117bc:	0001d880 	.word	0x0001d880
   117c0:	0001d8ac 	.word	0x0001d8ac

000117c4 <hci_init>:
{
   117c4:	b508      	push	{r3, lr}
	err = common_init();
   117c6:	f7ff fecb 	bl	11560 <common_init>
	if (err) {
   117ca:	4603      	mov	r3, r0
   117cc:	b108      	cbz	r0, 117d2 <hci_init+0xe>
}
   117ce:	4618      	mov	r0, r3
   117d0:	bd08      	pop	{r3, pc}
	err = le_init();
   117d2:	f7ff ff0f 	bl	115f4 <le_init>
	if (err) {
   117d6:	4603      	mov	r3, r0
   117d8:	2800      	cmp	r0, #0
   117da:	d1f8      	bne.n	117ce <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   117dc:	4b0a      	ldr	r3, [pc, #40]	; (11808 <hci_init+0x44>)
   117de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   117e2:	f013 0f20 	tst.w	r3, #32
   117e6:	d104      	bne.n	117f2 <hci_init+0x2e>
		err = bt_br_init();
   117e8:	f009 fa0b 	bl	1ac02 <bt_br_init>
		if (err) {
   117ec:	4603      	mov	r3, r0
   117ee:	2800      	cmp	r0, #0
   117f0:	d1ed      	bne.n	117ce <hci_init+0xa>
	err = set_event_mask();
   117f2:	f009 fa27 	bl	1ac44 <set_event_mask>
	if (err) {
   117f6:	4603      	mov	r3, r0
   117f8:	2800      	cmp	r0, #0
   117fa:	d1e8      	bne.n	117ce <hci_init+0xa>
	hci_vs_init();
   117fc:	f7ff ff68 	bl	116d0 <hci_vs_init>
	err = bt_id_init();
   11800:	f000 fcba 	bl	12178 <bt_id_init>
   11804:	4603      	mov	r3, r0
	if (err) {
   11806:	e7e2      	b.n	117ce <hci_init+0xa>
   11808:	20000290 	.word	0x20000290

0001180c <bt_send>:
{
   1180c:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   1180e:	4b03      	ldr	r3, [pc, #12]	; (1181c <bt_send+0x10>)
   11810:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   11814:	691b      	ldr	r3, [r3, #16]
   11816:	4798      	blx	r3
}
   11818:	bd08      	pop	{r3, pc}
   1181a:	bf00      	nop
   1181c:	20000290 	.word	0x20000290

00011820 <send_cmd>:
{
   11820:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   11822:	2200      	movs	r2, #0
   11824:	2300      	movs	r3, #0
   11826:	4837      	ldr	r0, [pc, #220]	; (11904 <send_cmd+0xe4>)
   11828:	f009 fb69 	bl	1aefe <net_buf_get>
	BT_ASSERT(buf);
   1182c:	4604      	mov	r4, r0
   1182e:	b370      	cbz	r0, 1188e <send_cmd+0x6e>
   11830:	4d35      	ldr	r5, [pc, #212]	; (11908 <send_cmd+0xe8>)
   11832:	f04f 32ff 	mov.w	r2, #4294967295
   11836:	f04f 33ff 	mov.w	r3, #4294967295
   1183a:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   1183e:	f004 f8ff 	bl	15a40 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   11842:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
   11846:	b1b3      	cbz	r3, 11876 <send_cmd+0x56>
   11848:	4b30      	ldr	r3, [pc, #192]	; (1190c <send_cmd+0xec>)
   1184a:	4a31      	ldr	r2, [pc, #196]	; (11910 <send_cmd+0xf0>)
   1184c:	1a9b      	subs	r3, r3, r2
   1184e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   11850:	f04f 0100 	mov.w	r1, #0
   11854:	2201      	movs	r2, #1
   11856:	f362 0102 	bfi	r1, r2, #0, #3
   1185a:	f36f 01c5 	bfc	r1, #3, #3
   1185e:	f363 118f 	bfi	r1, r3, #6, #10
   11862:	482c      	ldr	r0, [pc, #176]	; (11914 <send_cmd+0xf4>)
   11864:	f7fd fdb2 	bl	f3cc <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   11868:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
   1186c:	f009 fb73 	bl	1af56 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   11870:	2300      	movs	r3, #0
   11872:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
   11876:	4620      	mov	r0, r4
   11878:	f009 fb93 	bl	1afa2 <net_buf_ref>
   1187c:	4b22      	ldr	r3, [pc, #136]	; (11908 <send_cmd+0xe8>)
   1187e:	f8c3 00f8 	str.w	r0, [r3, #248]	; 0xf8
	err = bt_send(buf);
   11882:	4620      	mov	r0, r4
   11884:	f7ff ffc2 	bl	1180c <bt_send>
	if (err) {
   11888:	4601      	mov	r1, r0
   1188a:	b970      	cbnz	r0, 118aa <send_cmd+0x8a>
}
   1188c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   1188e:	f640 132a 	movw	r3, #2346	; 0x92a
   11892:	4a21      	ldr	r2, [pc, #132]	; (11918 <send_cmd+0xf8>)
   11894:	4921      	ldr	r1, [pc, #132]	; (1191c <send_cmd+0xfc>)
   11896:	4822      	ldr	r0, [pc, #136]	; (11920 <send_cmd+0x100>)
   11898:	f008 f8b8 	bl	19a0c <printk>
   1189c:	4040      	eors	r0, r0
   1189e:	f380 8811 	msr	BASEPRI, r0
   118a2:	f04f 0003 	mov.w	r0, #3
   118a6:	df02      	svc	2
   118a8:	e7c2      	b.n	11830 <send_cmd+0x10>
   118aa:	4b18      	ldr	r3, [pc, #96]	; (1190c <send_cmd+0xec>)
   118ac:	4a18      	ldr	r2, [pc, #96]	; (11910 <send_cmd+0xf0>)
   118ae:	1a9b      	subs	r3, r3, r2
   118b0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   118b2:	f04f 0200 	mov.w	r2, #0
   118b6:	2001      	movs	r0, #1
   118b8:	f360 0202 	bfi	r2, r0, #0, #3
   118bc:	f36f 02c5 	bfc	r2, #3, #3
   118c0:	f363 128f 	bfi	r2, r3, #6, #10
   118c4:	4817      	ldr	r0, [pc, #92]	; (11924 <send_cmd+0x104>)
   118c6:	f7fd fccb 	bl	f260 <log_1>
	z_impl_k_sem_give(sem);
   118ca:	4d0f      	ldr	r5, [pc, #60]	; (11908 <send_cmd+0xe8>)
   118cc:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   118d0:	f004 f88e 	bl	159f0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   118d4:	4620      	mov	r0, r4
   118d6:	f009 fa58 	bl	1ad8a <net_buf_id>
   118da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   118de:	4b12      	ldr	r3, [pc, #72]	; (11928 <send_cmd+0x108>)
   118e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   118e4:	4622      	mov	r2, r4
   118e6:	211f      	movs	r1, #31
   118e8:	8840      	ldrh	r0, [r0, #2]
   118ea:	f7ff fb29 	bl	10f40 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   118ee:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
   118f2:	f009 fb30 	bl	1af56 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   118f6:	2300      	movs	r3, #0
   118f8:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
   118fc:	4620      	mov	r0, r4
   118fe:	f009 fb2a 	bl	1af56 <net_buf_unref>
   11902:	e7c3      	b.n	1188c <send_cmd+0x6c>
   11904:	200003a4 	.word	0x200003a4
   11908:	20000290 	.word	0x20000290
   1190c:	0001cc3c 	.word	0x0001cc3c
   11910:	0001cc2c 	.word	0x0001cc2c
   11914:	0001d8fc 	.word	0x0001d8fc
   11918:	0001d73c 	.word	0x0001d73c
   1191c:	0001db38 	.word	0x0001db38
   11920:	0001d78c 	.word	0x0001d78c
   11924:	0001d8d8 	.word	0x0001d8d8
   11928:	20002050 	.word	0x20002050

0001192c <process_events>:
{
   1192c:	b570      	push	{r4, r5, r6, lr}
   1192e:	4604      	mov	r4, r0
   11930:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   11932:	e010      	b.n	11956 <process_events+0x2a>
   11934:	4b0f      	ldr	r3, [pc, #60]	; (11974 <process_events+0x48>)
   11936:	4a10      	ldr	r2, [pc, #64]	; (11978 <process_events+0x4c>)
   11938:	1a9b      	subs	r3, r3, r2
   1193a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1193c:	2202      	movs	r2, #2
   1193e:	f362 0602 	bfi	r6, r2, #0, #3
   11942:	f36f 06c5 	bfc	r6, #3, #3
   11946:	f363 168f 	bfi	r6, r3, #6, #10
   1194a:	4632      	mov	r2, r6
   1194c:	480b      	ldr	r0, [pc, #44]	; (1197c <process_events+0x50>)
   1194e:	f7fd fc87 	bl	f260 <log_1>
	for (; count; ev++, count--) {
   11952:	3414      	adds	r4, #20
   11954:	3d01      	subs	r5, #1
   11956:	b165      	cbz	r5, 11972 <process_events+0x46>
		switch (ev->state) {
   11958:	68e1      	ldr	r1, [r4, #12]
   1195a:	f3c1 3145 	ubfx	r1, r1, #13, #6
   1195e:	2901      	cmp	r1, #1
   11960:	d9f7      	bls.n	11952 <process_events+0x26>
   11962:	2904      	cmp	r1, #4
   11964:	d1e6      	bne.n	11934 <process_events+0x8>
			if (ev->tag == BT_EVENT_CMD_TX) {
   11966:	7b23      	ldrb	r3, [r4, #12]
   11968:	2b00      	cmp	r3, #0
   1196a:	d1f2      	bne.n	11952 <process_events+0x26>
				send_cmd();
   1196c:	f7ff ff58 	bl	11820 <send_cmd>
   11970:	e7ef      	b.n	11952 <process_events+0x26>
}
   11972:	bd70      	pop	{r4, r5, r6, pc}
   11974:	0001cc3c 	.word	0x0001cc3c
   11978:	0001cc2c 	.word	0x0001cc2c
   1197c:	0001d918 	.word	0x0001d918

00011980 <hci_tx_thread>:
{
   11980:	b508      	push	{r3, lr}
   11982:	e005      	b.n	11990 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   11984:	2101      	movs	r1, #1
   11986:	4810      	ldr	r0, [pc, #64]	; (119c8 <hci_tx_thread+0x48>)
   11988:	f7ff ffd0 	bl	1192c <process_events>
	z_impl_k_yield();
   1198c:	f004 fd10 	bl	163b0 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   11990:	480d      	ldr	r0, [pc, #52]	; (119c8 <hci_tx_thread+0x48>)
   11992:	68c3      	ldr	r3, [r0, #12]
   11994:	f36f 3352 	bfc	r3, #13, #6
   11998:	60c3      	str	r3, [r0, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1199a:	f04f 32ff 	mov.w	r2, #4294967295
   1199e:	f04f 33ff 	mov.w	r3, #4294967295
   119a2:	2101      	movs	r1, #1
   119a4:	f005 f85c 	bl	16a60 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   119a8:	2800      	cmp	r0, #0
   119aa:	d0eb      	beq.n	11984 <hci_tx_thread+0x4>
   119ac:	f640 1393 	movw	r3, #2451	; 0x993
   119b0:	4a06      	ldr	r2, [pc, #24]	; (119cc <hci_tx_thread+0x4c>)
   119b2:	4907      	ldr	r1, [pc, #28]	; (119d0 <hci_tx_thread+0x50>)
   119b4:	4807      	ldr	r0, [pc, #28]	; (119d4 <hci_tx_thread+0x54>)
   119b6:	f008 f829 	bl	19a0c <printk>
   119ba:	4040      	eors	r0, r0
   119bc:	f380 8811 	msr	BASEPRI, r0
   119c0:	f04f 0003 	mov.w	r0, #3
   119c4:	df02      	svc	2
   119c6:	e7dd      	b.n	11984 <hci_tx_thread+0x4>
   119c8:	200003ec 	.word	0x200003ec
   119cc:	0001d73c 	.word	0x0001d73c
   119d0:	0001d7f0 	.word	0x0001d7f0
   119d4:	0001d78c 	.word	0x0001d78c

000119d8 <hci_event_prio>:
{
   119d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119dc:	b084      	sub	sp, #16
   119de:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   119e0:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   119e4:	4628      	mov	r0, r5
   119e6:	f009 fb09 	bl	1affc <net_buf_simple_headroom>
   119ea:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   119ee:	89a3      	ldrh	r3, [r4, #12]
   119f0:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   119f4:	2b01      	cmp	r3, #1
   119f6:	d930      	bls.n	11a5a <hci_event_prio+0x82>
	return net_buf_simple_pull_mem(&buf->b, len);
   119f8:	2102      	movs	r1, #2
   119fa:	4628      	mov	r0, r5
   119fc:	f009 faee 	bl	1afdc <net_buf_simple_pull_mem>
   11a00:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   11a02:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   11a04:	2b05      	cmp	r3, #5
   11a06:	d038      	beq.n	11a7a <hci_event_prio+0xa2>
   11a08:	d339      	bcc.n	11a7e <hci_event_prio+0xa6>
   11a0a:	3b0e      	subs	r3, #14
   11a0c:	b2db      	uxtb	r3, r3
   11a0e:	2b01      	cmp	r3, #1
   11a10:	d831      	bhi.n	11a76 <hci_event_prio+0x9e>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   11a12:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   11a14:	f016 0f01 	tst.w	r6, #1
   11a18:	d033      	beq.n	11a82 <hci_event_prio+0xaa>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   11a1a:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   11a1c:	2300      	movs	r3, #0
   11a1e:	2b01      	cmp	r3, #1
   11a20:	d851      	bhi.n	11ac6 <hci_event_prio+0xee>
		const struct event_handler *handler = &handlers[i];
   11a22:	4a3a      	ldr	r2, [pc, #232]	; (11b0c <hci_event_prio+0x134>)
   11a24:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   11a28:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   11a2c:	4295      	cmp	r5, r2
   11a2e:	d136      	bne.n	11a9e <hci_event_prio+0xc6>
		if (buf->len < handler->min_len) {
   11a30:	89a1      	ldrh	r1, [r4, #12]
   11a32:	7843      	ldrb	r3, [r0, #1]
   11a34:	4299      	cmp	r1, r3
   11a36:	d334      	bcc.n	11aa2 <hci_event_prio+0xca>
		handler->handler(buf);
   11a38:	6843      	ldr	r3, [r0, #4]
   11a3a:	4620      	mov	r0, r4
   11a3c:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   11a3e:	f016 0f02 	tst.w	r6, #2
   11a42:	d05e      	beq.n	11b02 <hci_event_prio+0x12a>
	buf->data = buf->__buf + state->offset;
   11a44:	6923      	ldr	r3, [r4, #16]
   11a46:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   11a4a:	4413      	add	r3, r2
   11a4c:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   11a4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   11a52:	81a3      	strh	r3, [r4, #12]
}
   11a54:	b004      	add	sp, #16
   11a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11a5a:	f640 5327 	movw	r3, #3367	; 0xd27
   11a5e:	4a2c      	ldr	r2, [pc, #176]	; (11b10 <hci_event_prio+0x138>)
   11a60:	492c      	ldr	r1, [pc, #176]	; (11b14 <hci_event_prio+0x13c>)
   11a62:	482d      	ldr	r0, [pc, #180]	; (11b18 <hci_event_prio+0x140>)
   11a64:	f007 ffd2 	bl	19a0c <printk>
   11a68:	4040      	eors	r0, r0
   11a6a:	f380 8811 	msr	BASEPRI, r0
   11a6e:	f04f 0003 	mov.w	r0, #3
   11a72:	df02      	svc	2
   11a74:	e7c0      	b.n	119f8 <hci_event_prio+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   11a76:	2602      	movs	r6, #2
   11a78:	e7cc      	b.n	11a14 <hci_event_prio+0x3c>
	switch (evt) {
   11a7a:	2603      	movs	r6, #3
   11a7c:	e7ca      	b.n	11a14 <hci_event_prio+0x3c>
		return BT_HCI_EVT_FLAG_RECV;
   11a7e:	2602      	movs	r6, #2
   11a80:	e7c8      	b.n	11a14 <hci_event_prio+0x3c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   11a82:	f640 532b 	movw	r3, #3371	; 0xd2b
   11a86:	4a22      	ldr	r2, [pc, #136]	; (11b10 <hci_event_prio+0x138>)
   11a88:	4924      	ldr	r1, [pc, #144]	; (11b1c <hci_event_prio+0x144>)
   11a8a:	4823      	ldr	r0, [pc, #140]	; (11b18 <hci_event_prio+0x140>)
   11a8c:	f007 ffbe 	bl	19a0c <printk>
   11a90:	4040      	eors	r0, r0
   11a92:	f380 8811 	msr	BASEPRI, r0
   11a96:	f04f 0003 	mov.w	r0, #3
   11a9a:	df02      	svc	2
   11a9c:	e7bd      	b.n	11a1a <hci_event_prio+0x42>
	for (i = 0; i < num_handlers; i++) {
   11a9e:	3301      	adds	r3, #1
   11aa0:	e7bd      	b.n	11a1e <hci_event_prio+0x46>
   11aa2:	4a1f      	ldr	r2, [pc, #124]	; (11b20 <hci_event_prio+0x148>)
   11aa4:	4b1f      	ldr	r3, [pc, #124]	; (11b24 <hci_event_prio+0x14c>)
   11aa6:	1ad2      	subs	r2, r2, r3
   11aa8:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   11aaa:	f04f 0300 	mov.w	r3, #0
   11aae:	2001      	movs	r0, #1
   11ab0:	f360 0302 	bfi	r3, r0, #0, #3
   11ab4:	f36f 03c5 	bfc	r3, #3, #3
   11ab8:	f362 138f 	bfi	r3, r2, #6, #10
   11abc:	462a      	mov	r2, r5
   11abe:	481a      	ldr	r0, [pc, #104]	; (11b28 <hci_event_prio+0x150>)
   11ac0:	f7fd fc04 	bl	f2cc <log_2>
			return;
   11ac4:	e7bb      	b.n	11a3e <hci_event_prio+0x66>
   11ac6:	4b16      	ldr	r3, [pc, #88]	; (11b20 <hci_event_prio+0x148>)
   11ac8:	4a16      	ldr	r2, [pc, #88]	; (11b24 <hci_event_prio+0x14c>)
   11aca:	1a9b      	subs	r3, r3, r2
   11acc:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   11ace:	f04f 0700 	mov.w	r7, #0
   11ad2:	2202      	movs	r2, #2
   11ad4:	f362 0702 	bfi	r7, r2, #0, #3
   11ad8:	f36f 07c5 	bfc	r7, #3, #3
   11adc:	f363 178f 	bfi	r7, r3, #6, #10
   11ae0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   11ae4:	4641      	mov	r1, r8
   11ae6:	68a0      	ldr	r0, [r4, #8]
   11ae8:	f7ff f948 	bl	10d7c <bt_hex_real>
   11aec:	f7fd fa40 	bl	ef70 <z_log_strdup>
   11af0:	4603      	mov	r3, r0
   11af2:	f8ad 7000 	strh.w	r7, [sp]
   11af6:	4642      	mov	r2, r8
   11af8:	4629      	mov	r1, r5
   11afa:	480c      	ldr	r0, [pc, #48]	; (11b2c <hci_event_prio+0x154>)
   11afc:	f7fd fb72 	bl	f1e4 <log_3>
   11b00:	e79d      	b.n	11a3e <hci_event_prio+0x66>
		net_buf_unref(buf);
   11b02:	4620      	mov	r0, r4
   11b04:	f009 fa27 	bl	1af56 <net_buf_unref>
}
   11b08:	e7a4      	b.n	11a54 <hci_event_prio+0x7c>
   11b0a:	bf00      	nop
   11b0c:	0001d9f0 	.word	0x0001d9f0
   11b10:	0001d73c 	.word	0x0001d73c
   11b14:	0001d770 	.word	0x0001d770
   11b18:	0001d78c 	.word	0x0001d78c
   11b1c:	0001d93c 	.word	0x0001d93c
   11b20:	0001cc3c 	.word	0x0001cc3c
   11b24:	0001cc2c 	.word	0x0001cc2c
   11b28:	0001d6f4 	.word	0x0001d6f4
   11b2c:	0001d718 	.word	0x0001d718

00011b30 <bt_recv>:
{
   11b30:	b538      	push	{r3, r4, r5, lr}
   11b32:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11b34:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   11b36:	2d01      	cmp	r5, #1
   11b38:	d120      	bne.n	11b7c <bt_recv+0x4c>
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   11b3a:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   11b3c:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   11b3e:	2b05      	cmp	r3, #5
   11b40:	d00e      	beq.n	11b60 <bt_recv+0x30>
   11b42:	d30f      	bcc.n	11b64 <bt_recv+0x34>
   11b44:	3b0e      	subs	r3, #14
   11b46:	b2db      	uxtb	r3, r3
   11b48:	2b01      	cmp	r3, #1
   11b4a:	d807      	bhi.n	11b5c <bt_recv+0x2c>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   11b4c:	f015 0f01 	tst.w	r5, #1
   11b50:	d10a      	bne.n	11b68 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   11b52:	f015 0f02 	tst.w	r5, #2
   11b56:	d10b      	bne.n	11b70 <bt_recv+0x40>
		return 0;
   11b58:	2000      	movs	r0, #0
}
   11b5a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV;
   11b5c:	2502      	movs	r5, #2
   11b5e:	e7f5      	b.n	11b4c <bt_recv+0x1c>
	switch (evt) {
   11b60:	2503      	movs	r5, #3
   11b62:	e7f3      	b.n	11b4c <bt_recv+0x1c>
		return BT_HCI_EVT_FLAG_RECV;
   11b64:	2502      	movs	r5, #2
   11b66:	e7f1      	b.n	11b4c <bt_recv+0x1c>
			hci_event_prio(buf);
   11b68:	4620      	mov	r0, r4
   11b6a:	f7ff ff35 	bl	119d8 <hci_event_prio>
   11b6e:	e7f0      	b.n	11b52 <bt_recv+0x22>
			net_buf_put(&bt_dev.rx_queue, buf);
   11b70:	4621      	mov	r1, r4
   11b72:	480e      	ldr	r0, [pc, #56]	; (11bac <bt_recv+0x7c>)
   11b74:	f009 f9e2 	bl	1af3c <net_buf_put>
		return 0;
   11b78:	2000      	movs	r0, #0
   11b7a:	e7ee      	b.n	11b5a <bt_recv+0x2a>
   11b7c:	4b0c      	ldr	r3, [pc, #48]	; (11bb0 <bt_recv+0x80>)
   11b7e:	4a0d      	ldr	r2, [pc, #52]	; (11bb4 <bt_recv+0x84>)
   11b80:	1a9b      	subs	r3, r3, r2
   11b82:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   11b84:	f04f 0200 	mov.w	r2, #0
   11b88:	2101      	movs	r1, #1
   11b8a:	f361 0202 	bfi	r2, r1, #0, #3
   11b8e:	f36f 02c5 	bfc	r2, #3, #3
   11b92:	f363 128f 	bfi	r2, r3, #6, #10
   11b96:	4629      	mov	r1, r5
   11b98:	4807      	ldr	r0, [pc, #28]	; (11bb8 <bt_recv+0x88>)
   11b9a:	f7fd fb61 	bl	f260 <log_1>
		net_buf_unref(buf);
   11b9e:	4620      	mov	r0, r4
   11ba0:	f009 f9d9 	bl	1af56 <net_buf_unref>
		return -EINVAL;
   11ba4:	f06f 0015 	mvn.w	r0, #21
   11ba8:	e7d7      	b.n	11b5a <bt_recv+0x2a>
   11baa:	bf00      	nop
   11bac:	2000038c 	.word	0x2000038c
   11bb0:	0001cc3c 	.word	0x0001cc3c
   11bb4:	0001cc2c 	.word	0x0001cc2c
   11bb8:	0001d958 	.word	0x0001d958

00011bbc <bt_hci_driver_register>:
	if (bt_dev.drv) {
   11bbc:	4b0a      	ldr	r3, [pc, #40]	; (11be8 <bt_hci_driver_register+0x2c>)
   11bbe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   11bc2:	b943      	cbnz	r3, 11bd6 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   11bc4:	68c3      	ldr	r3, [r0, #12]
   11bc6:	b14b      	cbz	r3, 11bdc <bt_hci_driver_register+0x20>
   11bc8:	6903      	ldr	r3, [r0, #16]
   11bca:	b153      	cbz	r3, 11be2 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   11bcc:	4b06      	ldr	r3, [pc, #24]	; (11be8 <bt_hci_driver_register+0x2c>)
   11bce:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
	return 0;
   11bd2:	2000      	movs	r0, #0
   11bd4:	4770      	bx	lr
		return -EALREADY;
   11bd6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11bda:	4770      	bx	lr
		return -EINVAL;
   11bdc:	f06f 0015 	mvn.w	r0, #21
   11be0:	4770      	bx	lr
   11be2:	f06f 0015 	mvn.w	r0, #21
}
   11be6:	4770      	bx	lr
   11be8:	20000290 	.word	0x20000290

00011bec <bt_finalize_init>:
{
   11bec:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11bee:	4b08      	ldr	r3, [pc, #32]	; (11c10 <bt_finalize_init+0x24>)
   11bf0:	f3bf 8f5b 	dmb	ish
   11bf4:	e853 2f00 	ldrex	r2, [r3]
   11bf8:	f042 0202 	orr.w	r2, r2, #2
   11bfc:	e843 2100 	strex	r1, r2, [r3]
   11c00:	2900      	cmp	r1, #0
   11c02:	d1f7      	bne.n	11bf4 <bt_finalize_init+0x8>
   11c04:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   11c08:	2000      	movs	r0, #0
   11c0a:	f000 fc2f 	bl	1246c <bt_le_scan_update>
}
   11c0e:	bd08      	pop	{r3, pc}
   11c10:	2000035c 	.word	0x2000035c

00011c14 <init_work>:
{
   11c14:	b508      	push	{r3, lr}
	err = bt_init();
   11c16:	f009 f836 	bl	1ac86 <bt_init>
	if (ready_cb) {
   11c1a:	4b02      	ldr	r3, [pc, #8]	; (11c24 <init_work+0x10>)
   11c1c:	681b      	ldr	r3, [r3, #0]
   11c1e:	b103      	cbz	r3, 11c22 <init_work+0xe>
		ready_cb(err);
   11c20:	4798      	blx	r3
}
   11c22:	bd08      	pop	{r3, pc}
   11c24:	20002068 	.word	0x20002068

00011c28 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   11c28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   11c2c:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   11c2e:	4b41      	ldr	r3, [pc, #260]	; (11d34 <bt_enable+0x10c>)
   11c30:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   11c34:	2b00      	cmp	r3, #0
   11c36:	d050      	beq.n	11cda <bt_enable+0xb2>
   11c38:	4605      	mov	r5, r0
   11c3a:	4b3f      	ldr	r3, [pc, #252]	; (11d38 <bt_enable+0x110>)
   11c3c:	f3bf 8f5b 	dmb	ish
   11c40:	e853 2f00 	ldrex	r2, [r3]
   11c44:	f042 0101 	orr.w	r1, r2, #1
   11c48:	e843 1000 	strex	r0, r1, [r3]
   11c4c:	2800      	cmp	r0, #0
   11c4e:	d1f7      	bne.n	11c40 <bt_enable+0x18>
   11c50:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11c54:	f012 0f01 	tst.w	r2, #1
   11c58:	d168      	bne.n	11d2c <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   11c5a:	4b38      	ldr	r3, [pc, #224]	; (11d3c <bt_enable+0x114>)
   11c5c:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   11c5e:	f04f 0800 	mov.w	r8, #0
   11c62:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11c66:	4e36      	ldr	r6, [pc, #216]	; (11d40 <bt_enable+0x118>)
   11c68:	e9cd 8906 	strd	r8, r9, [sp, #24]
   11c6c:	2400      	movs	r4, #0
   11c6e:	9404      	str	r4, [sp, #16]
   11c70:	f06f 0308 	mvn.w	r3, #8
   11c74:	9303      	str	r3, [sp, #12]
   11c76:	9402      	str	r4, [sp, #8]
   11c78:	9401      	str	r4, [sp, #4]
   11c7a:	9400      	str	r4, [sp, #0]
   11c7c:	4b31      	ldr	r3, [pc, #196]	; (11d44 <bt_enable+0x11c>)
   11c7e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   11c82:	4931      	ldr	r1, [pc, #196]	; (11d48 <bt_enable+0x120>)
   11c84:	4630      	mov	r0, r6
   11c86:	f00a f990 	bl	1bfaa <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11c8a:	4930      	ldr	r1, [pc, #192]	; (11d4c <bt_enable+0x124>)
   11c8c:	4630      	mov	r0, r6
   11c8e:	f003 fcb7 	bl	15600 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11c92:	4e2f      	ldr	r6, [pc, #188]	; (11d50 <bt_enable+0x128>)
   11c94:	e9cd 8906 	strd	r8, r9, [sp, #24]
   11c98:	9404      	str	r4, [sp, #16]
   11c9a:	f06f 0307 	mvn.w	r3, #7
   11c9e:	9303      	str	r3, [sp, #12]
   11ca0:	9402      	str	r4, [sp, #8]
   11ca2:	9401      	str	r4, [sp, #4]
   11ca4:	9400      	str	r4, [sp, #0]
   11ca6:	4b2b      	ldr	r3, [pc, #172]	; (11d54 <bt_enable+0x12c>)
   11ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11cac:	492a      	ldr	r1, [pc, #168]	; (11d58 <bt_enable+0x130>)
   11cae:	4630      	mov	r0, r6
   11cb0:	f00a f97b 	bl	1bfaa <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11cb4:	4929      	ldr	r1, [pc, #164]	; (11d5c <bt_enable+0x134>)
   11cb6:	4630      	mov	r0, r6
   11cb8:	f003 fca2 	bl	15600 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   11cbc:	4b1d      	ldr	r3, [pc, #116]	; (11d34 <bt_enable+0x10c>)
   11cbe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   11cc2:	68db      	ldr	r3, [r3, #12]
   11cc4:	4798      	blx	r3
	if (err) {
   11cc6:	4604      	mov	r4, r0
   11cc8:	b9d0      	cbnz	r0, 11d00 <bt_enable+0xd8>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   11cca:	b35d      	cbz	r5, 11d24 <bt_enable+0xfc>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   11ccc:	4824      	ldr	r0, [pc, #144]	; (11d60 <bt_enable+0x138>)
   11cce:	f004 f81d 	bl	15d0c <k_work_submit>
	return 0;
}
   11cd2:	4620      	mov	r0, r4
   11cd4:	b008      	add	sp, #32
   11cd6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   11cda:	4b22      	ldr	r3, [pc, #136]	; (11d64 <bt_enable+0x13c>)
   11cdc:	4a22      	ldr	r2, [pc, #136]	; (11d68 <bt_enable+0x140>)
   11cde:	1a9b      	subs	r3, r3, r2
   11ce0:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   11ce2:	f04f 0100 	mov.w	r1, #0
   11ce6:	2201      	movs	r2, #1
   11ce8:	f362 0102 	bfi	r1, r2, #0, #3
   11cec:	f36f 01c5 	bfc	r1, #3, #3
   11cf0:	f363 118f 	bfi	r1, r3, #6, #10
   11cf4:	481d      	ldr	r0, [pc, #116]	; (11d6c <bt_enable+0x144>)
   11cf6:	f7fd fb69 	bl	f3cc <log_0>
		return -ENODEV;
   11cfa:	f06f 0412 	mvn.w	r4, #18
   11cfe:	e7e8      	b.n	11cd2 <bt_enable+0xaa>
   11d00:	4b18      	ldr	r3, [pc, #96]	; (11d64 <bt_enable+0x13c>)
   11d02:	4a19      	ldr	r2, [pc, #100]	; (11d68 <bt_enable+0x140>)
   11d04:	1a9b      	subs	r3, r3, r2
   11d06:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   11d08:	f04f 0200 	mov.w	r2, #0
   11d0c:	2101      	movs	r1, #1
   11d0e:	f361 0202 	bfi	r2, r1, #0, #3
   11d12:	f36f 02c5 	bfc	r2, #3, #3
   11d16:	f363 128f 	bfi	r2, r3, #6, #10
   11d1a:	4601      	mov	r1, r0
   11d1c:	4814      	ldr	r0, [pc, #80]	; (11d70 <bt_enable+0x148>)
   11d1e:	f7fd fa9f 	bl	f260 <log_1>
		return err;
   11d22:	e7d6      	b.n	11cd2 <bt_enable+0xaa>
		return bt_init();
   11d24:	f008 ffaf 	bl	1ac86 <bt_init>
   11d28:	4604      	mov	r4, r0
   11d2a:	e7d2      	b.n	11cd2 <bt_enable+0xaa>
		return -EALREADY;
   11d2c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   11d30:	e7cf      	b.n	11cd2 <bt_enable+0xaa>
   11d32:	bf00      	nop
   11d34:	20000290 	.word	0x20000290
   11d38:	2000035c 	.word	0x2000035c
   11d3c:	20002068 	.word	0x20002068
   11d40:	20001548 	.word	0x20001548
   11d44:	00011981 	.word	0x00011981
   11d48:	200036a0 	.word	0x200036a0
   11d4c:	0001d988 	.word	0x0001d988
   11d50:	20001490 	.word	0x20001490
   11d54:	00011369 	.word	0x00011369
   11d58:	20003280 	.word	0x20003280
   11d5c:	0001d990 	.word	0x0001d990
   11d60:	2000034c 	.word	0x2000034c
   11d64:	0001cc3c 	.word	0x0001cc3c
   11d68:	0001cc2c 	.word	0x0001cc2c
   11d6c:	0001d96c 	.word	0x0001d96c
   11d70:	0001d998 	.word	0x0001d998

00011d74 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   11d74:	b570      	push	{r4, r5, r6, lr}
   11d76:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   11d78:	2400      	movs	r4, #0
   11d7a:	4b0a      	ldr	r3, [pc, #40]	; (11da4 <id_find+0x30>)
   11d7c:	79db      	ldrb	r3, [r3, #7]
   11d7e:	42a3      	cmp	r3, r4
   11d80:	d90c      	bls.n	11d9c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   11d82:	4626      	mov	r6, r4
   11d84:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   11d88:	2207      	movs	r2, #7
   11d8a:	4b06      	ldr	r3, [pc, #24]	; (11da4 <id_find+0x30>)
   11d8c:	4419      	add	r1, r3
   11d8e:	4628      	mov	r0, r5
   11d90:	f008 fe9a 	bl	1aac8 <memcmp>
   11d94:	b120      	cbz	r0, 11da0 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   11d96:	3401      	adds	r4, #1
   11d98:	b2e4      	uxtb	r4, r4
   11d9a:	e7ee      	b.n	11d7a <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   11d9c:	f06f 0601 	mvn.w	r6, #1
}
   11da0:	4630      	mov	r0, r6
   11da2:	bd70      	pop	{r4, r5, r6, pc}
   11da4:	20000290 	.word	0x20000290

00011da8 <set_random_address>:
{
   11da8:	b570      	push	{r4, r5, r6, lr}
   11daa:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   11dac:	2206      	movs	r2, #6
   11dae:	4914      	ldr	r1, [pc, #80]	; (11e00 <set_random_address+0x58>)
   11db0:	f008 fe8a 	bl	1aac8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   11db4:	4605      	mov	r5, r0
   11db6:	b908      	cbnz	r0, 11dbc <set_random_address+0x14>
}
   11db8:	4628      	mov	r0, r5
   11dba:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   11dbc:	2106      	movs	r1, #6
   11dbe:	f242 0005 	movw	r0, #8197	; 0x2005
   11dc2:	f7ff fb0f 	bl	113e4 <bt_hci_cmd_create>
	if (!buf) {
   11dc6:	4605      	mov	r5, r0
   11dc8:	b1b8      	cbz	r0, 11dfa <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11dca:	2206      	movs	r2, #6
   11dcc:	4621      	mov	r1, r4
   11dce:	3008      	adds	r0, #8
   11dd0:	f009 f8f1 	bl	1afb6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   11dd4:	2200      	movs	r2, #0
   11dd6:	4629      	mov	r1, r5
   11dd8:	f242 0005 	movw	r0, #8197	; 0x2005
   11ddc:	f7ff fb3e 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   11de0:	4605      	mov	r5, r0
   11de2:	2800      	cmp	r0, #0
   11de4:	d1e8      	bne.n	11db8 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   11de6:	4e06      	ldr	r6, [pc, #24]	; (11e00 <set_random_address+0x58>)
   11de8:	2206      	movs	r2, #6
   11dea:	4621      	mov	r1, r4
   11dec:	4630      	mov	r0, r6
   11dee:	f008 fe98 	bl	1ab22 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   11df2:	2301      	movs	r3, #1
   11df4:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   11df8:	e7de      	b.n	11db8 <set_random_address+0x10>
		return -ENOBUFS;
   11dfa:	f06f 0568 	mvn.w	r5, #104	; 0x68
   11dfe:	e7db      	b.n	11db8 <set_random_address+0x10>
   11e00:	200002f1 	.word	0x200002f1

00011e04 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   11e04:	b530      	push	{r4, r5, lr}
   11e06:	b085      	sub	sp, #20
   11e08:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   11e0a:	460d      	mov	r5, r1
   11e0c:	b149      	cbz	r1, 11e22 <id_create+0x1e>
   11e0e:	2300      	movs	r3, #0
   11e10:	9302      	str	r3, [sp, #8]
   11e12:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   11e16:	2207      	movs	r2, #7
   11e18:	a902      	add	r1, sp, #8
   11e1a:	4628      	mov	r0, r5
   11e1c:	f008 fe54 	bl	1aac8 <memcmp>
   11e20:	b9e0      	cbnz	r0, 11e5c <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   11e22:	4668      	mov	r0, sp
   11e24:	f008 fedf 	bl	1abe6 <bt_addr_le_create_static>
			if (err) {
   11e28:	4603      	mov	r3, r0
   11e2a:	b9a0      	cbnz	r0, 11e56 <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   11e2c:	4668      	mov	r0, sp
   11e2e:	f7ff ffa1 	bl	11d74 <id_find>
   11e32:	2800      	cmp	r0, #0
   11e34:	daf5      	bge.n	11e22 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   11e36:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   11e3a:	4b0d      	ldr	r3, [pc, #52]	; (11e70 <id_create+0x6c>)
   11e3c:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   11e3e:	2207      	movs	r2, #7
   11e40:	4669      	mov	r1, sp
   11e42:	4620      	mov	r0, r4
   11e44:	f008 fe6d 	bl	1ab22 <memcpy>

		if (addr) {
   11e48:	b125      	cbz	r5, 11e54 <id_create+0x50>
   11e4a:	2207      	movs	r2, #7
   11e4c:	4621      	mov	r1, r4
   11e4e:	4628      	mov	r0, r5
   11e50:	f008 fe67 	bl	1ab22 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   11e54:	2300      	movs	r3, #0
}
   11e56:	4618      	mov	r0, r3
   11e58:	b005      	add	sp, #20
   11e5a:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   11e5c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   11e60:	2207      	movs	r2, #7
   11e62:	4629      	mov	r1, r5
   11e64:	4802      	ldr	r0, [pc, #8]	; (11e70 <id_create+0x6c>)
   11e66:	4420      	add	r0, r4
   11e68:	f008 fe5b 	bl	1ab22 <memcpy>
}
   11e6c:	e7f2      	b.n	11e54 <id_create+0x50>
   11e6e:	bf00      	nop
   11e70:	20000290 	.word	0x20000290

00011e74 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   11e74:	b570      	push	{r4, r5, r6, lr}
   11e76:	b084      	sub	sp, #16
   11e78:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   11e7a:	4605      	mov	r5, r0
   11e7c:	b340      	cbz	r0, 11ed0 <bt_id_create+0x5c>
   11e7e:	2300      	movs	r3, #0
   11e80:	9300      	str	r3, [sp, #0]
   11e82:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   11e86:	2207      	movs	r2, #7
   11e88:	4669      	mov	r1, sp
   11e8a:	f008 fe1d 	bl	1aac8 <memcmp>
   11e8e:	b1f8      	cbz	r0, 11ed0 <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   11e90:	782b      	ldrb	r3, [r5, #0]
   11e92:	2b01      	cmp	r3, #1
   11e94:	d104      	bne.n	11ea0 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   11e96:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   11e98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11e9c:	2bc0      	cmp	r3, #192	; 0xc0
   11e9e:	d012      	beq.n	11ec6 <bt_id_create+0x52>
   11ea0:	4b24      	ldr	r3, [pc, #144]	; (11f34 <bt_id_create+0xc0>)
   11ea2:	4a25      	ldr	r2, [pc, #148]	; (11f38 <bt_id_create+0xc4>)
   11ea4:	1a9b      	subs	r3, r3, r2
   11ea6:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   11ea8:	f04f 0100 	mov.w	r1, #0
   11eac:	2201      	movs	r2, #1
   11eae:	f362 0102 	bfi	r1, r2, #0, #3
   11eb2:	f36f 01c5 	bfc	r1, #3, #3
   11eb6:	f363 118f 	bfi	r1, r3, #6, #10
   11eba:	4820      	ldr	r0, [pc, #128]	; (11f3c <bt_id_create+0xc8>)
   11ebc:	f7fd fa86 	bl	f3cc <log_0>
			return -EINVAL;
   11ec0:	f06f 0015 	mvn.w	r0, #21
   11ec4:	e028      	b.n	11f18 <bt_id_create+0xa4>
		}

		if (id_find(addr) >= 0) {
   11ec6:	4628      	mov	r0, r5
   11ec8:	f7ff ff54 	bl	11d74 <id_find>
   11ecc:	2800      	cmp	r0, #0
   11ece:	da25      	bge.n	11f1c <bt_id_create+0xa8>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   11ed0:	bb54      	cbnz	r4, 11f28 <bt_id_create+0xb4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   11ed2:	4b1b      	ldr	r3, [pc, #108]	; (11f40 <bt_id_create+0xcc>)
   11ed4:	79db      	ldrb	r3, [r3, #7]
   11ed6:	2b01      	cmp	r3, #1
   11ed8:	d029      	beq.n	11f2e <bt_id_create+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11eda:	f3bf 8f5b 	dmb	ish
   11ede:	4b19      	ldr	r3, [pc, #100]	; (11f44 <bt_id_create+0xd0>)
   11ee0:	681b      	ldr	r3, [r3, #0]
   11ee2:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11ee6:	f013 0f01 	tst.w	r3, #1
   11eea:	d10a      	bne.n	11f02 <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   11eec:	b1cd      	cbz	r5, 11f22 <bt_id_create+0xae>
   11eee:	2300      	movs	r3, #0
   11ef0:	9302      	str	r3, [sp, #8]
   11ef2:	f8cd 300b 	str.w	r3, [sp, #11]
   11ef6:	2207      	movs	r2, #7
   11ef8:	a902      	add	r1, sp, #8
   11efa:	4628      	mov	r0, r5
   11efc:	f008 fde4 	bl	1aac8 <memcmp>
   11f00:	b178      	cbz	r0, 11f22 <bt_id_create+0xae>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   11f02:	4b0f      	ldr	r3, [pc, #60]	; (11f40 <bt_id_create+0xcc>)
   11f04:	79de      	ldrb	r6, [r3, #7]
   11f06:	1c72      	adds	r2, r6, #1
   11f08:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   11f0a:	4622      	mov	r2, r4
   11f0c:	4629      	mov	r1, r5
   11f0e:	4630      	mov	r0, r6
   11f10:	f7ff ff78 	bl	11e04 <id_create>
	if (err) {
   11f14:	b900      	cbnz	r0, 11f18 <bt_id_create+0xa4>
		return err;
	}

	return new_id;
   11f16:	4630      	mov	r0, r6
}
   11f18:	b004      	add	sp, #16
   11f1a:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   11f1c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11f20:	e7fa      	b.n	11f18 <bt_id_create+0xa4>
			return -EINVAL;
   11f22:	f06f 0015 	mvn.w	r0, #21
   11f26:	e7f7      	b.n	11f18 <bt_id_create+0xa4>
		return -EINVAL;
   11f28:	f06f 0015 	mvn.w	r0, #21
   11f2c:	e7f4      	b.n	11f18 <bt_id_create+0xa4>
		return -ENOMEM;
   11f2e:	f06f 000b 	mvn.w	r0, #11
   11f32:	e7f1      	b.n	11f18 <bt_id_create+0xa4>
   11f34:	0001cc44 	.word	0x0001cc44
   11f38:	0001cc2c 	.word	0x0001cc2c
   11f3c:	0001da00 	.word	0x0001da00
   11f40:	20000290 	.word	0x20000290
   11f44:	2000035c 	.word	0x2000035c

00011f48 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   11f48:	b530      	push	{r4, r5, lr}
   11f4a:	b087      	sub	sp, #28
   11f4c:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   11f4e:	aa01      	add	r2, sp, #4
   11f50:	2100      	movs	r1, #0
   11f52:	f241 0009 	movw	r0, #4105	; 0x1009
   11f56:	f7ff fa81 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   11f5a:	b9f0      	cbnz	r0, 11f9a <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   11f5c:	9b01      	ldr	r3, [sp, #4]
   11f5e:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   11f60:	3401      	adds	r4, #1
   11f62:	2300      	movs	r3, #0
   11f64:	9302      	str	r3, [sp, #8]
   11f66:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   11f6a:	2206      	movs	r2, #6
   11f6c:	a902      	add	r1, sp, #8
   11f6e:	4620      	mov	r0, r4
   11f70:	f008 fdaa 	bl	1aac8 <memcmp>
   11f74:	b158      	cbz	r0, 11f8e <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   11f76:	4b18      	ldr	r3, [pc, #96]	; (11fd8 <bt_id_read_public_addr+0x90>)
   11f78:	e893 0003 	ldmia.w	r3, {r0, r1}
   11f7c:	9004      	str	r0, [sp, #16]
   11f7e:	f8ad 1014 	strh.w	r1, [sp, #20]
   11f82:	2206      	movs	r2, #6
   11f84:	a904      	add	r1, sp, #16
   11f86:	4620      	mov	r0, r4
   11f88:	f008 fd9e 	bl	1aac8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   11f8c:	b9b8      	cbnz	r0, 11fbe <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   11f8e:	9801      	ldr	r0, [sp, #4]
   11f90:	f008 ffe1 	bl	1af56 <net_buf_unref>
		return 0U;
   11f94:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   11f96:	b007      	add	sp, #28
   11f98:	bd30      	pop	{r4, r5, pc}
   11f9a:	4b10      	ldr	r3, [pc, #64]	; (11fdc <bt_id_read_public_addr+0x94>)
   11f9c:	4a10      	ldr	r2, [pc, #64]	; (11fe0 <bt_id_read_public_addr+0x98>)
   11f9e:	1a9b      	subs	r3, r3, r2
   11fa0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   11fa2:	f04f 0100 	mov.w	r1, #0
   11fa6:	2202      	movs	r2, #2
   11fa8:	f362 0102 	bfi	r1, r2, #0, #3
   11fac:	f36f 01c5 	bfc	r1, #3, #3
   11fb0:	f363 118f 	bfi	r1, r3, #6, #10
   11fb4:	480b      	ldr	r0, [pc, #44]	; (11fe4 <bt_id_read_public_addr+0x9c>)
   11fb6:	f7fd fa09 	bl	f3cc <log_0>
		return 0U;
   11fba:	2000      	movs	r0, #0
   11fbc:	e7eb      	b.n	11f96 <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
   11fbe:	2206      	movs	r2, #6
   11fc0:	4621      	mov	r1, r4
   11fc2:	1c68      	adds	r0, r5, #1
   11fc4:	f008 fdad 	bl	1ab22 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   11fc8:	2300      	movs	r3, #0
   11fca:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   11fcc:	9801      	ldr	r0, [sp, #4]
   11fce:	f008 ffc2 	bl	1af56 <net_buf_unref>
	return 1U;
   11fd2:	2001      	movs	r0, #1
   11fd4:	e7df      	b.n	11f96 <bt_id_read_public_addr+0x4e>
   11fd6:	bf00      	nop
   11fd8:	0001cd50 	.word	0x0001cd50
   11fdc:	0001cc44 	.word	0x0001cc44
   11fe0:	0001cc2c 	.word	0x0001cc2c
   11fe4:	0001da30 	.word	0x0001da30

00011fe8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   11fe8:	b500      	push	{lr}
   11fea:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   11fec:	4668      	mov	r0, sp
   11fee:	f7ff ffab 	bl	11f48 <bt_id_read_public_addr>
   11ff2:	4b06      	ldr	r3, [pc, #24]	; (1200c <bt_setup_public_id_addr+0x24>)
   11ff4:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   11ff6:	b918      	cbnz	r0, 12000 <bt_setup_public_id_addr+0x18>
		return 0;
   11ff8:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   11ffa:	b003      	add	sp, #12
   11ffc:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   12000:	2200      	movs	r2, #0
   12002:	4669      	mov	r1, sp
   12004:	4610      	mov	r0, r2
   12006:	f7ff fefd 	bl	11e04 <id_create>
   1200a:	e7f6      	b.n	11ffa <bt_setup_public_id_addr+0x12>
   1200c:	20000290 	.word	0x20000290

00012010 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   12010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12014:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   12016:	4b2e      	ldr	r3, [pc, #184]	; (120d0 <bt_read_static_addr+0xc0>)
   12018:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   1201c:	f015 0501 	ands.w	r5, r5, #1
   12020:	d010      	beq.n	12044 <bt_read_static_addr+0x34>
   12022:	4607      	mov	r7, r0
   12024:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   12026:	aa01      	add	r2, sp, #4
   12028:	2100      	movs	r1, #0
   1202a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1202e:	f7ff fa15 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   12032:	4604      	mov	r4, r0
   12034:	b9b8      	cbnz	r0, 12066 <bt_read_static_addr+0x56>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   12036:	9b01      	ldr	r3, [sp, #4]
   12038:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1203a:	7875      	ldrb	r5, [r6, #1]
   1203c:	4545      	cmp	r5, r8
   1203e:	bf28      	it	cs
   12040:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   12042:	e029      	b.n	12098 <bt_read_static_addr+0x88>
   12044:	4b23      	ldr	r3, [pc, #140]	; (120d4 <bt_read_static_addr+0xc4>)
   12046:	4a24      	ldr	r2, [pc, #144]	; (120d8 <bt_read_static_addr+0xc8>)
   12048:	1a9b      	subs	r3, r3, r2
   1204a:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   1204c:	f04f 0100 	mov.w	r1, #0
   12050:	2202      	movs	r2, #2
   12052:	f362 0102 	bfi	r1, r2, #0, #3
   12056:	f36f 01c5 	bfc	r1, #3, #3
   1205a:	f363 118f 	bfi	r1, r3, #6, #10
   1205e:	481f      	ldr	r0, [pc, #124]	; (120dc <bt_read_static_addr+0xcc>)
   12060:	f7fd f9b4 	bl	f3cc <log_0>
		return 0;
   12064:	e01e      	b.n	120a4 <bt_read_static_addr+0x94>
   12066:	4b1b      	ldr	r3, [pc, #108]	; (120d4 <bt_read_static_addr+0xc4>)
   12068:	4a1b      	ldr	r2, [pc, #108]	; (120d8 <bt_read_static_addr+0xc8>)
   1206a:	1a9b      	subs	r3, r3, r2
   1206c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   1206e:	f04f 0100 	mov.w	r1, #0
   12072:	2202      	movs	r2, #2
   12074:	f362 0102 	bfi	r1, r2, #0, #3
   12078:	f36f 01c5 	bfc	r1, #3, #3
   1207c:	f363 118f 	bfi	r1, r3, #6, #10
   12080:	4817      	ldr	r0, [pc, #92]	; (120e0 <bt_read_static_addr+0xd0>)
   12082:	f7fd f9a3 	bl	f3cc <log_0>
		return 0;
   12086:	2500      	movs	r5, #0
   12088:	e00c      	b.n	120a4 <bt_read_static_addr+0x94>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1208a:	2216      	movs	r2, #22
   1208c:	1cb1      	adds	r1, r6, #2
   1208e:	fb02 7004 	mla	r0, r2, r4, r7
   12092:	f008 fd46 	bl	1ab22 <memcpy>
	for (i = 0; i < cnt; i++) {
   12096:	3401      	adds	r4, #1
   12098:	42a5      	cmp	r5, r4
   1209a:	dcf6      	bgt.n	1208a <bt_read_static_addr+0x7a>
	}

	net_buf_unref(rsp);
   1209c:	9801      	ldr	r0, [sp, #4]
   1209e:	f008 ff5a 	bl	1af56 <net_buf_unref>
	if (!cnt) {
   120a2:	b11d      	cbz	r5, 120ac <bt_read_static_addr+0x9c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   120a4:	4628      	mov	r0, r5
   120a6:	b002      	add	sp, #8
   120a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120ac:	4b09      	ldr	r3, [pc, #36]	; (120d4 <bt_read_static_addr+0xc4>)
   120ae:	4a0a      	ldr	r2, [pc, #40]	; (120d8 <bt_read_static_addr+0xc8>)
   120b0:	1a9b      	subs	r3, r3, r2
   120b2:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   120b4:	f04f 0100 	mov.w	r1, #0
   120b8:	2202      	movs	r2, #2
   120ba:	f362 0102 	bfi	r1, r2, #0, #3
   120be:	f36f 01c5 	bfc	r1, #3, #3
   120c2:	f363 118f 	bfi	r1, r3, #6, #10
   120c6:	4807      	ldr	r0, [pc, #28]	; (120e4 <bt_read_static_addr+0xd4>)
   120c8:	f7fd f980 	bl	f3cc <log_0>
   120cc:	e7ea      	b.n	120a4 <bt_read_static_addr+0x94>
   120ce:	bf00      	nop
   120d0:	20000290 	.word	0x20000290
   120d4:	0001cc44 	.word	0x0001cc44
   120d8:	0001cc2c 	.word	0x0001cc2c
   120dc:	0001da50 	.word	0x0001da50
   120e0:	0001da7c 	.word	0x0001da7c
   120e4:	0001da9c 	.word	0x0001da9c

000120e8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   120e8:	b510      	push	{r4, lr}
   120ea:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   120ec:	4b17      	ldr	r3, [pc, #92]	; (1214c <bt_setup_random_id_addr+0x64>)
   120ee:	79dc      	ldrb	r4, [r3, #7]
   120f0:	b934      	cbnz	r4, 12100 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   120f2:	2101      	movs	r1, #1
   120f4:	a802      	add	r0, sp, #8
   120f6:	f7ff ff8b 	bl	12010 <bt_read_static_addr>
   120fa:	4b14      	ldr	r3, [pc, #80]	; (1214c <bt_setup_random_id_addr+0x64>)
   120fc:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   120fe:	b938      	cbnz	r0, 12110 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   12100:	2100      	movs	r1, #0
   12102:	4608      	mov	r0, r1
   12104:	f7ff feb6 	bl	11e74 <bt_id_create>
   12108:	4603      	mov	r3, r0
}
   1210a:	4618      	mov	r0, r3
   1210c:	b008      	add	sp, #32
   1210e:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   12110:	4b0e      	ldr	r3, [pc, #56]	; (1214c <bt_setup_random_id_addr+0x64>)
   12112:	79db      	ldrb	r3, [r3, #7]
   12114:	42a3      	cmp	r3, r4
   12116:	d916      	bls.n	12146 <bt_setup_random_id_addr+0x5e>
   12118:	2206      	movs	r2, #6
   1211a:	2116      	movs	r1, #22
   1211c:	ab02      	add	r3, sp, #8
   1211e:	fb01 3104 	mla	r1, r1, r4, r3
   12122:	f10d 0001 	add.w	r0, sp, #1
   12126:	f008 fcfc 	bl	1ab22 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1212a:	2301      	movs	r3, #1
   1212c:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   12130:	2200      	movs	r2, #0
   12132:	4669      	mov	r1, sp
   12134:	4620      	mov	r0, r4
   12136:	f7ff fe65 	bl	11e04 <id_create>
				if (err) {
   1213a:	4603      	mov	r3, r0
   1213c:	2800      	cmp	r0, #0
   1213e:	d1e4      	bne.n	1210a <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   12140:	3401      	adds	r4, #1
   12142:	b2e4      	uxtb	r4, r4
   12144:	e7e4      	b.n	12110 <bt_setup_random_id_addr+0x28>
			return 0;
   12146:	2300      	movs	r3, #0
   12148:	e7df      	b.n	1210a <bt_setup_random_id_addr+0x22>
   1214a:	bf00      	nop
   1214c:	20000290 	.word	0x20000290

00012150 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   12150:	b510      	push	{r4, lr}
   12152:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   12154:	4b07      	ldr	r3, [pc, #28]	; (12174 <bt_id_set_scan_own_addr+0x24>)
   12156:	781b      	ldrb	r3, [r3, #0]
   12158:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   1215a:	f008 fd9e 	bl	1ac9a <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   1215e:	b108      	cbz	r0, 12164 <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
   12160:	2000      	movs	r0, #0
}
   12162:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   12164:	f008 fd9d 	bl	1aca2 <bt_id_set_private_addr>
			if (err) {
   12168:	2800      	cmp	r0, #0
   1216a:	d1fa      	bne.n	12162 <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1216c:	2301      	movs	r3, #1
   1216e:	7023      	strb	r3, [r4, #0]
   12170:	e7f7      	b.n	12162 <bt_id_set_scan_own_addr+0x12>
   12172:	bf00      	nop
   12174:	20000290 	.word	0x20000290

00012178 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   12178:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1217a:	4b25      	ldr	r3, [pc, #148]	; (12210 <bt_id_init+0x98>)
   1217c:	79db      	ldrb	r3, [r3, #7]
   1217e:	b12b      	cbz	r3, 1218c <bt_id_init+0x14>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   12180:	4b23      	ldr	r3, [pc, #140]	; (12210 <bt_id_init+0x98>)
   12182:	79db      	ldrb	r3, [r3, #7]
   12184:	b1c3      	cbz	r3, 121b8 <bt_id_init+0x40>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   12186:	2400      	movs	r4, #0
}
   12188:	4620      	mov	r0, r4
   1218a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   1218c:	f7ff ff2c 	bl	11fe8 <bt_setup_public_id_addr>
		if (err) {
   12190:	4604      	mov	r4, r0
   12192:	2800      	cmp	r0, #0
   12194:	d0f4      	beq.n	12180 <bt_id_init+0x8>
   12196:	4b1f      	ldr	r3, [pc, #124]	; (12214 <bt_id_init+0x9c>)
   12198:	4a1f      	ldr	r2, [pc, #124]	; (12218 <bt_id_init+0xa0>)
   1219a:	1a9b      	subs	r3, r3, r2
   1219c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   1219e:	f04f 0100 	mov.w	r1, #0
   121a2:	2201      	movs	r2, #1
   121a4:	f362 0102 	bfi	r1, r2, #0, #3
   121a8:	f36f 01c5 	bfc	r1, #3, #3
   121ac:	f363 118f 	bfi	r1, r3, #6, #10
   121b0:	481a      	ldr	r0, [pc, #104]	; (1221c <bt_id_init+0xa4>)
   121b2:	f7fd f90b 	bl	f3cc <log_0>
			return err;
   121b6:	e7e7      	b.n	12188 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   121b8:	f7ff ff96 	bl	120e8 <bt_setup_random_id_addr>
		if (err) {
   121bc:	4604      	mov	r4, r0
   121be:	b9b0      	cbnz	r0, 121ee <bt_id_init+0x76>
		err = set_random_address(&bt_dev.id_addr[0].a);
   121c0:	4817      	ldr	r0, [pc, #92]	; (12220 <bt_id_init+0xa8>)
   121c2:	f7ff fdf1 	bl	11da8 <set_random_address>
		if (err) {
   121c6:	4604      	mov	r4, r0
   121c8:	2800      	cmp	r0, #0
   121ca:	d0dd      	beq.n	12188 <bt_id_init+0x10>
   121cc:	4b11      	ldr	r3, [pc, #68]	; (12214 <bt_id_init+0x9c>)
   121ce:	4a12      	ldr	r2, [pc, #72]	; (12218 <bt_id_init+0xa0>)
   121d0:	1a9b      	subs	r3, r3, r2
   121d2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   121d4:	f04f 0100 	mov.w	r1, #0
   121d8:	2201      	movs	r2, #1
   121da:	f362 0102 	bfi	r1, r2, #0, #3
   121de:	f36f 01c5 	bfc	r1, #3, #3
   121e2:	f363 118f 	bfi	r1, r3, #6, #10
   121e6:	480f      	ldr	r0, [pc, #60]	; (12224 <bt_id_init+0xac>)
   121e8:	f7fd f8f0 	bl	f3cc <log_0>
			return err;
   121ec:	e7cc      	b.n	12188 <bt_id_init+0x10>
   121ee:	4b09      	ldr	r3, [pc, #36]	; (12214 <bt_id_init+0x9c>)
   121f0:	4a09      	ldr	r2, [pc, #36]	; (12218 <bt_id_init+0xa0>)
   121f2:	1a9b      	subs	r3, r3, r2
   121f4:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   121f6:	f04f 0100 	mov.w	r1, #0
   121fa:	2201      	movs	r2, #1
   121fc:	f362 0102 	bfi	r1, r2, #0, #3
   12200:	f36f 01c5 	bfc	r1, #3, #3
   12204:	f363 118f 	bfi	r1, r3, #6, #10
   12208:	4804      	ldr	r0, [pc, #16]	; (1221c <bt_id_init+0xa4>)
   1220a:	f7fd f8df 	bl	f3cc <log_0>
			return err;
   1220e:	e7bb      	b.n	12188 <bt_id_init+0x10>
   12210:	20000290 	.word	0x20000290
   12214:	0001cc44 	.word	0x0001cc44
   12218:	0001cc2c 	.word	0x0001cc2c
   1221c:	0001dac8 	.word	0x0001dac8
   12220:	20000291 	.word	0x20000291
   12224:	0001dae8 	.word	0x0001dae8

00012228 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   12228:	b530      	push	{r4, r5, lr}
   1222a:	b087      	sub	sp, #28
   1222c:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1222e:	2102      	movs	r1, #2
   12230:	f242 000c 	movw	r0, #8204	; 0x200c
   12234:	f7ff f8d6 	bl	113e4 <bt_hci_cmd_create>
	if (!buf) {
   12238:	b330      	cbz	r0, 12288 <bt_le_scan_set_enable_legacy+0x60>
   1223a:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   1223c:	2102      	movs	r1, #2
   1223e:	3008      	adds	r0, #8
   12240:	f008 feb3 	bl	1afaa <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   12244:	2c01      	cmp	r4, #1
   12246:	d015      	beq.n	12274 <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   12248:	2300      	movs	r3, #0
   1224a:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   1224c:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1224e:	2c01      	cmp	r4, #1
   12250:	bf14      	ite	ne
   12252:	2400      	movne	r4, #0
   12254:	2401      	moveq	r4, #1
   12256:	9400      	str	r4, [sp, #0]
   12258:	2305      	movs	r3, #5
   1225a:	4a0d      	ldr	r2, [pc, #52]	; (12290 <bt_le_scan_set_enable_legacy+0x68>)
   1225c:	a903      	add	r1, sp, #12
   1225e:	4628      	mov	r0, r5
   12260:	f7ff f8ae 	bl	113c0 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   12264:	2200      	movs	r2, #0
   12266:	4629      	mov	r1, r5
   12268:	f242 000c 	movw	r0, #8204	; 0x200c
   1226c:	f7ff f8f6 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   12270:	b007      	add	sp, #28
   12272:	bd30      	pop	{r4, r5, pc}
   12274:	f3bf 8f5b 	dmb	ish
   12278:	4b05      	ldr	r3, [pc, #20]	; (12290 <bt_le_scan_set_enable_legacy+0x68>)
   1227a:	681b      	ldr	r3, [r3, #0]
   1227c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12280:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   12284:	7043      	strb	r3, [r0, #1]
   12286:	e7e1      	b.n	1224c <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   12288:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1228c:	e7f0      	b.n	12270 <bt_le_scan_set_enable_legacy+0x48>
   1228e:	bf00      	nop
   12290:	2000035c 	.word	0x2000035c

00012294 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf_simple *buf, uint16_t len)
{
   12294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12298:	b084      	sub	sp, #16
   1229a:	460f      	mov	r7, r1
   1229c:	4615      	mov	r5, r2
   1229e:	4698      	mov	r8, r3
   122a0:	f3bf 8f5b 	dmb	ish
   122a4:	4b3e      	ldr	r3, [pc, #248]	; (123a0 <le_adv_recv+0x10c>)
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	BT_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr),
	       info->adv_type, len, info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   122ac:	f013 0f40 	tst.w	r3, #64	; 0x40
   122b0:	d003      	beq.n	122ba <le_adv_recv+0x26>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   122b2:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   122b4:	f013 0f04 	tst.w	r3, #4
   122b8:	d16f      	bne.n	1239a <le_adv_recv+0x106>
		BT_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   122ba:	7802      	ldrb	r2, [r0, #0]
   122bc:	1e93      	subs	r3, r2, #2
   122be:	b2db      	uxtb	r3, r3
   122c0:	2b01      	cmp	r3, #1
   122c2:	d92f      	bls.n	12324 <le_adv_recv+0x90>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   122c4:	2aff      	cmp	r2, #255	; 0xff
   122c6:	d038      	beq.n	1233a <le_adv_recv+0xa6>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   122c8:	4601      	mov	r1, r0
   122ca:	2000      	movs	r0, #0
   122cc:	f008 fce7 	bl	1ac9e <bt_lookup_id_addr>
   122d0:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   122d2:	2207      	movs	r2, #7
   122d4:	4668      	mov	r0, sp
   122d6:	f008 fc24 	bl	1ab22 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	info->addr = &id_addr;
   122da:	f8c7 d000 	str.w	sp, [r7]

	if (scan_dev_found_cb) {
   122de:	4b31      	ldr	r3, [pc, #196]	; (123a4 <le_adv_recv+0x110>)
   122e0:	681b      	ldr	r3, [r3, #0]
   122e2:	b19b      	cbz	r3, 1230c <le_adv_recv+0x78>
	state->offset = net_buf_simple_headroom(buf);
   122e4:	4628      	mov	r0, r5
   122e6:	f008 fe89 	bl	1affc <net_buf_simple_headroom>
   122ea:	b284      	uxth	r4, r0
	state->len = buf->len;
   122ec:	88ae      	ldrh	r6, [r5, #4]
		net_buf_simple_save(buf, &state);

		buf->len = len;
   122ee:	f8a5 8004 	strh.w	r8, [r5, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   122f2:	4b2c      	ldr	r3, [pc, #176]	; (123a4 <le_adv_recv+0x110>)
   122f4:	f8d3 9000 	ldr.w	r9, [r3]
   122f8:	462b      	mov	r3, r5
   122fa:	79fa      	ldrb	r2, [r7, #7]
   122fc:	f997 1005 	ldrsb.w	r1, [r7, #5]
   12300:	4668      	mov	r0, sp
   12302:	47c8      	blx	r9
	buf->data = buf->__buf + state->offset;
   12304:	68ab      	ldr	r3, [r5, #8]
   12306:	4423      	add	r3, r4
   12308:	602b      	str	r3, [r5, #0]
	buf->len = state->len;
   1230a:	80ae      	strh	r6, [r5, #4]
	return list->head;
   1230c:	4b26      	ldr	r3, [pc, #152]	; (123a8 <le_adv_recv+0x114>)
   1230e:	681e      	ldr	r6, [r3, #0]

		net_buf_simple_restore(buf, &state);
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   12310:	b1ee      	cbz	r6, 1234e <le_adv_recv+0xba>
   12312:	3e08      	subs	r6, #8
   12314:	d01d      	beq.n	12352 <le_adv_recv+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12316:	f116 0408 	adds.w	r4, r6, #8
   1231a:	d01f      	beq.n	1235c <le_adv_recv+0xc8>
	return node->next;
   1231c:	68b4      	ldr	r4, [r6, #8]
   1231e:	b1ec      	cbz	r4, 1235c <le_adv_recv+0xc8>
   12320:	3c08      	subs	r4, #8
   12322:	e01b      	b.n	1235c <le_adv_recv+0xc8>
   12324:	2207      	movs	r2, #7
   12326:	4601      	mov	r1, r0
   12328:	4668      	mov	r0, sp
   1232a:	f008 fbfa 	bl	1ab22 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1232e:	f89d 3000 	ldrb.w	r3, [sp]
   12332:	3b02      	subs	r3, #2
   12334:	f88d 3000 	strb.w	r3, [sp]
   12338:	e7cf      	b.n	122da <le_adv_recv+0x46>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   1233a:	2300      	movs	r3, #0
   1233c:	9302      	str	r3, [sp, #8]
   1233e:	f8cd 300b 	str.w	r3, [sp, #11]
   12342:	2207      	movs	r2, #7
   12344:	a902      	add	r1, sp, #8
   12346:	4668      	mov	r0, sp
   12348:	f008 fbeb 	bl	1ab22 <memcpy>
   1234c:	e7c5      	b.n	122da <le_adv_recv+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1234e:	4634      	mov	r4, r6
   12350:	e004      	b.n	1235c <le_adv_recv+0xc8>
   12352:	4634      	mov	r4, r6
   12354:	e002      	b.n	1235c <le_adv_recv+0xc8>
   12356:	4622      	mov	r2, r4
   12358:	4626      	mov	r6, r4
   1235a:	4614      	mov	r4, r2
   1235c:	b1ee      	cbz	r6, 1239a <le_adv_recv+0x106>
		if (listener->recv) {
   1235e:	6833      	ldr	r3, [r6, #0]
   12360:	b18b      	cbz	r3, 12386 <le_adv_recv+0xf2>
	state->offset = net_buf_simple_headroom(buf);
   12362:	4628      	mov	r0, r5
   12364:	f008 fe4a 	bl	1affc <net_buf_simple_headroom>
   12368:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
   1236c:	f8b5 9004 	ldrh.w	r9, [r5, #4]
			net_buf_simple_save(buf, &state);

			buf->len = len;
   12370:	f8a5 8004 	strh.w	r8, [r5, #4]
			listener->recv(info, buf);
   12374:	6833      	ldr	r3, [r6, #0]
   12376:	4629      	mov	r1, r5
   12378:	4638      	mov	r0, r7
   1237a:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   1237c:	68aa      	ldr	r2, [r5, #8]
   1237e:	4452      	add	r2, sl
   12380:	602a      	str	r2, [r5, #0]
	buf->len = state->len;
   12382:	f8a5 9004 	strh.w	r9, [r5, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   12386:	2c00      	cmp	r4, #0
   12388:	d0e5      	beq.n	12356 <le_adv_recv+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1238a:	f114 0208 	adds.w	r2, r4, #8
   1238e:	d0e3      	beq.n	12358 <le_adv_recv+0xc4>
	return node->next;
   12390:	68a2      	ldr	r2, [r4, #8]
   12392:	2a00      	cmp	r2, #0
   12394:	d0e0      	beq.n	12358 <le_adv_recv+0xc4>
   12396:	3a08      	subs	r2, #8
   12398:	e7de      	b.n	12358 <le_adv_recv+0xc4>
	}

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
#endif /* CONFIG_BT_CENTRAL */
}
   1239a:	b004      	add	sp, #16
   1239c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   123a0:	2000035c 	.word	0x2000035c
   123a4:	20002074 	.word	0x20002074
   123a8:	2000206c 	.word	0x2000206c

000123ac <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   123ac:	4b01      	ldr	r3, [pc, #4]	; (123b4 <bt_scan_reset+0x8>)
   123ae:	2200      	movs	r2, #0
   123b0:	601a      	str	r2, [r3, #0]
}
   123b2:	4770      	bx	lr
   123b4:	20002074 	.word	0x20002074

000123b8 <start_le_scan_legacy>:
{
   123b8:	b570      	push	{r4, r5, r6, lr}
   123ba:	b082      	sub	sp, #8
   123bc:	4604      	mov	r4, r0
   123be:	460e      	mov	r6, r1
   123c0:	4615      	mov	r5, r2
	(void)memset(&set_param, 0, sizeof(set_param));
   123c2:	2207      	movs	r2, #7
   123c4:	2100      	movs	r1, #0
   123c6:	4668      	mov	r0, sp
   123c8:	f008 fbcf 	bl	1ab6a <memset>
	set_param.scan_type = scan_type;
   123cc:	f88d 4000 	strb.w	r4, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   123d0:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   123d4:	f8ad 5003 	strh.w	r5, [sp, #3]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   123d8:	2300      	movs	r3, #0
   123da:	f88d 3006 	strb.w	r3, [sp, #6]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   123de:	2c01      	cmp	r4, #1
   123e0:	bf14      	ite	ne
   123e2:	2400      	movne	r4, #0
   123e4:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   123e6:	f10d 0105 	add.w	r1, sp, #5
   123ea:	4620      	mov	r0, r4
   123ec:	f7ff feb0 	bl	12150 <bt_id_set_scan_own_addr>
	if (err) {
   123f0:	b108      	cbz	r0, 123f6 <start_le_scan_legacy+0x3e>
}
   123f2:	b002      	add	sp, #8
   123f4:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   123f6:	2107      	movs	r1, #7
   123f8:	f242 000b 	movw	r0, #8203	; 0x200b
   123fc:	f7fe fff2 	bl	113e4 <bt_hci_cmd_create>
	if (!buf) {
   12400:	4605      	mov	r5, r0
   12402:	b370      	cbz	r0, 12462 <start_le_scan_legacy+0xaa>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12404:	2207      	movs	r2, #7
   12406:	4669      	mov	r1, sp
   12408:	3008      	adds	r0, #8
   1240a:	f008 fdd4 	bl	1afb6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1240e:	2200      	movs	r2, #0
   12410:	4629      	mov	r1, r5
   12412:	f242 000b 	movw	r0, #8203	; 0x200b
   12416:	f7ff f821 	bl	1145c <bt_hci_cmd_send_sync>
	if (err) {
   1241a:	2800      	cmp	r0, #0
   1241c:	d1e9      	bne.n	123f2 <start_le_scan_legacy+0x3a>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1241e:	2001      	movs	r0, #1
   12420:	f008 fc89 	bl	1ad36 <bt_le_scan_set_enable>
	if (err) {
   12424:	2800      	cmp	r0, #0
   12426:	d1e4      	bne.n	123f2 <start_le_scan_legacy+0x3a>
	if (val) {
   12428:	b16c      	cbz	r4, 12446 <start_le_scan_legacy+0x8e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1242a:	4b0f      	ldr	r3, [pc, #60]	; (12468 <start_le_scan_legacy+0xb0>)
   1242c:	f3bf 8f5b 	dmb	ish
   12430:	e853 2f00 	ldrex	r2, [r3]
   12434:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12438:	e843 2100 	strex	r1, r2, [r3]
   1243c:	2900      	cmp	r1, #0
   1243e:	d1f7      	bne.n	12430 <start_le_scan_legacy+0x78>
   12440:	f3bf 8f5b 	dmb	ish
   12444:	e7d5      	b.n	123f2 <start_le_scan_legacy+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12446:	4b08      	ldr	r3, [pc, #32]	; (12468 <start_le_scan_legacy+0xb0>)
   12448:	f3bf 8f5b 	dmb	ish
   1244c:	e853 2f00 	ldrex	r2, [r3]
   12450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   12454:	e843 2100 	strex	r1, r2, [r3]
   12458:	2900      	cmp	r1, #0
   1245a:	d1f7      	bne.n	1244c <start_le_scan_legacy+0x94>
   1245c:	f3bf 8f5b 	dmb	ish
}
   12460:	e7c7      	b.n	123f2 <start_le_scan_legacy+0x3a>
		return -ENOBUFS;
   12462:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12466:	e7c4      	b.n	123f2 <start_le_scan_legacy+0x3a>
   12468:	2000035c 	.word	0x2000035c

0001246c <bt_le_scan_update>:
{
   1246c:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1246e:	f3bf 8f5b 	dmb	ish
   12472:	4b0c      	ldr	r3, [pc, #48]	; (124a4 <bt_le_scan_update+0x38>)
   12474:	681b      	ldr	r3, [r3, #0]
   12476:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1247a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1247e:	d001      	beq.n	12484 <bt_le_scan_update+0x18>
		return 0;
   12480:	2000      	movs	r0, #0
}
   12482:	bd08      	pop	{r3, pc}
   12484:	f3bf 8f5b 	dmb	ish
   12488:	4b06      	ldr	r3, [pc, #24]	; (124a4 <bt_le_scan_update+0x38>)
   1248a:	681b      	ldr	r3, [r3, #0]
   1248c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12490:	f3c3 1040 	ubfx	r0, r3, #5, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   12494:	f013 0f20 	tst.w	r3, #32
   12498:	d0f3      	beq.n	12482 <bt_le_scan_update+0x16>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1249a:	2000      	movs	r0, #0
   1249c:	f008 fc4b 	bl	1ad36 <bt_le_scan_set_enable>
		if (err) {
   124a0:	e7ef      	b.n	12482 <bt_le_scan_update+0x16>
   124a2:	bf00      	nop
   124a4:	2000035c 	.word	0x2000035c

000124a8 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   124a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   124aa:	b085      	sub	sp, #20
   124ac:	4607      	mov	r7, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   124ae:	f100 0608 	add.w	r6, r0, #8
   124b2:	4630      	mov	r0, r6
   124b4:	f008 fd9a 	bl	1afec <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   124b8:	1e45      	subs	r5, r0, #1
   124ba:	b2ed      	uxtb	r5, r5
   124bc:	2800      	cmp	r0, #0
   124be:	d03f      	beq.n	12540 <bt_hci_le_adv_report+0x98>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   124c0:	89bb      	ldrh	r3, [r7, #12]
   124c2:	2b08      	cmp	r3, #8
   124c4:	d92c      	bls.n	12520 <bt_hci_le_adv_report+0x78>
	return net_buf_simple_pull_mem(&buf->b, len);
   124c6:	2109      	movs	r1, #9
   124c8:	4630      	mov	r0, r6
   124ca:	f008 fd87 	bl	1afdc <net_buf_simple_pull_mem>
   124ce:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   124d0:	2301      	movs	r3, #1
   124d2:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   124d6:	2200      	movs	r2, #0
   124d8:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   124dc:	237f      	movs	r3, #127	; 0x7f
   124de:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   124e2:	7a03      	ldrb	r3, [r0, #8]
   124e4:	4403      	add	r3, r0
   124e6:	f993 3009 	ldrsb.w	r3, [r3, #9]
   124ea:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   124ee:	23ff      	movs	r3, #255	; 0xff
   124f0:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   124f4:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   124f8:	7800      	ldrb	r0, [r0, #0]
   124fa:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   124fe:	f008 fbe6 	bl	1acce <get_adv_props_legacy>
   12502:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   12506:	7a23      	ldrb	r3, [r4, #8]
   12508:	4632      	mov	r2, r6
   1250a:	4669      	mov	r1, sp
   1250c:	1c60      	adds	r0, r4, #1
   1250e:	f7ff fec1 	bl	12294 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   12512:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   12514:	3101      	adds	r1, #1
   12516:	4630      	mov	r0, r6
   12518:	f008 fd58 	bl	1afcc <net_buf_simple_pull>
	while (num_reports--) {
   1251c:	4628      	mov	r0, r5
   1251e:	e7cb      	b.n	124b8 <bt_hci_le_adv_report+0x10>
   12520:	4b08      	ldr	r3, [pc, #32]	; (12544 <bt_hci_le_adv_report+0x9c>)
   12522:	4a09      	ldr	r2, [pc, #36]	; (12548 <bt_hci_le_adv_report+0xa0>)
   12524:	1a9b      	subs	r3, r3, r2
   12526:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected end of buffer");
   12528:	f04f 0100 	mov.w	r1, #0
   1252c:	2201      	movs	r2, #1
   1252e:	f362 0102 	bfi	r1, r2, #0, #3
   12532:	f36f 01c5 	bfc	r1, #3, #3
   12536:	f363 118f 	bfi	r1, r3, #6, #10
   1253a:	4804      	ldr	r0, [pc, #16]	; (1254c <bt_hci_le_adv_report+0xa4>)
   1253c:	f7fc ff46 	bl	f3cc <log_0>
	}
}
   12540:	b005      	add	sp, #20
   12542:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12544:	0001cc54 	.word	0x0001cc54
   12548:	0001cc2c 	.word	0x0001cc2c
   1254c:	0001db10 	.word	0x0001db10

00012550 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   12550:	b538      	push	{r3, r4, r5, lr}
   12552:	f3bf 8f5b 	dmb	ish
   12556:	4b48      	ldr	r3, [pc, #288]	; (12678 <bt_le_scan_start+0x128>)
   12558:	681b      	ldr	r3, [r3, #0]
   1255a:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1255e:	f013 0f02 	tst.w	r3, #2
   12562:	d07d      	beq.n	12660 <bt_le_scan_start+0x110>
   12564:	4604      	mov	r4, r0
   12566:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   12568:	f008 fbc2 	bl	1acf0 <valid_le_scan_param>
   1256c:	2800      	cmp	r0, #0
   1256e:	d07a      	beq.n	12666 <bt_le_scan_start+0x116>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   12570:	7823      	ldrb	r3, [r4, #0]
   12572:	b11b      	cbz	r3, 1257c <bt_le_scan_start+0x2c>
   12574:	f008 fba9 	bl	1acca <bt_id_scan_random_addr_check>
   12578:	2800      	cmp	r0, #0
   1257a:	d077      	beq.n	1266c <bt_le_scan_start+0x11c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1257c:	4b3e      	ldr	r3, [pc, #248]	; (12678 <bt_le_scan_start+0x128>)
   1257e:	f3bf 8f5b 	dmb	ish
   12582:	e853 2f00 	ldrex	r2, [r3]
   12586:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   1258a:	e843 1000 	strex	r0, r1, [r3]
   1258e:	2800      	cmp	r0, #0
   12590:	d1f7      	bne.n	12582 <bt_le_scan_start+0x32>
   12592:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   12596:	f012 0f40 	tst.w	r2, #64	; 0x40
   1259a:	d16a      	bne.n	12672 <bt_le_scan_start+0x122>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1259c:	f3bf 8f5b 	dmb	ish
   125a0:	681b      	ldr	r3, [r3, #0]
   125a2:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   125a6:	f013 0f20 	tst.w	r3, #32
   125aa:	d003      	beq.n	125b4 <bt_le_scan_start+0x64>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   125ac:	2000      	movs	r0, #0
   125ae:	f008 fbc2 	bl	1ad36 <bt_le_scan_set_enable>
		if (err) {
   125b2:	b9d8      	cbnz	r0, 125ec <bt_le_scan_start+0x9c>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   125b4:	6863      	ldr	r3, [r4, #4]
	if (val) {
   125b6:	f013 0f01 	tst.w	r3, #1
   125ba:	d025      	beq.n	12608 <bt_le_scan_start+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   125bc:	4b2e      	ldr	r3, [pc, #184]	; (12678 <bt_le_scan_start+0x128>)
   125be:	f3bf 8f5b 	dmb	ish
   125c2:	e853 2f00 	ldrex	r2, [r3]
   125c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   125ca:	e843 2100 	strex	r1, r2, [r3]
   125ce:	2900      	cmp	r1, #0
   125d0:	d1f7      	bne.n	125c2 <bt_le_scan_start+0x72>
   125d2:	f3bf 8f5b 	dmb	ish
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
   125d6:	89a3      	ldrh	r3, [r4, #12]
   125d8:	bb23      	cbnz	r3, 12624 <bt_le_scan_start+0xd4>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
   125da:	8962      	ldrh	r2, [r4, #10]
   125dc:	8921      	ldrh	r1, [r4, #8]
   125de:	7820      	ldrb	r0, [r4, #0]
   125e0:	f7ff feea 	bl	123b8 <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
   125e4:	bb70      	cbnz	r0, 12644 <bt_le_scan_start+0xf4>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   125e6:	4b25      	ldr	r3, [pc, #148]	; (1267c <bt_le_scan_start+0x12c>)
   125e8:	601d      	str	r5, [r3, #0]

	return 0;
}
   125ea:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   125ec:	4b22      	ldr	r3, [pc, #136]	; (12678 <bt_le_scan_start+0x128>)
   125ee:	f3bf 8f5b 	dmb	ish
   125f2:	e853 2f00 	ldrex	r2, [r3]
   125f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   125fa:	e843 2100 	strex	r1, r2, [r3]
   125fe:	2900      	cmp	r1, #0
   12600:	d1f7      	bne.n	125f2 <bt_le_scan_start+0xa2>
   12602:	f3bf 8f5b 	dmb	ish
			return err;
   12606:	e7f0      	b.n	125ea <bt_le_scan_start+0x9a>
   12608:	4b1b      	ldr	r3, [pc, #108]	; (12678 <bt_le_scan_start+0x128>)
   1260a:	f3bf 8f5b 	dmb	ish
   1260e:	e853 2f00 	ldrex	r2, [r3]
   12612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   12616:	e843 2100 	strex	r1, r2, [r3]
   1261a:	2900      	cmp	r1, #0
   1261c:	d1f7      	bne.n	1260e <bt_le_scan_start+0xbe>
   1261e:	f3bf 8f5b 	dmb	ish
   12622:	e7d8      	b.n	125d6 <bt_le_scan_start+0x86>
   12624:	4b14      	ldr	r3, [pc, #80]	; (12678 <bt_le_scan_start+0x128>)
   12626:	f3bf 8f5b 	dmb	ish
   1262a:	e853 2f00 	ldrex	r2, [r3]
   1262e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   12632:	e843 2100 	strex	r1, r2, [r3]
   12636:	2900      	cmp	r1, #0
   12638:	d1f7      	bne.n	1262a <bt_le_scan_start+0xda>
   1263a:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
   1263e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12642:	e7d2      	b.n	125ea <bt_le_scan_start+0x9a>
   12644:	4b0c      	ldr	r3, [pc, #48]	; (12678 <bt_le_scan_start+0x128>)
   12646:	f3bf 8f5b 	dmb	ish
   1264a:	e853 2f00 	ldrex	r2, [r3]
   1264e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   12652:	e843 2100 	strex	r1, r2, [r3]
   12656:	2900      	cmp	r1, #0
   12658:	d1f7      	bne.n	1264a <bt_le_scan_start+0xfa>
   1265a:	f3bf 8f5b 	dmb	ish
		return err;
   1265e:	e7c4      	b.n	125ea <bt_le_scan_start+0x9a>
		return -EAGAIN;
   12660:	f06f 000a 	mvn.w	r0, #10
   12664:	e7c1      	b.n	125ea <bt_le_scan_start+0x9a>
		return -EINVAL;
   12666:	f06f 0015 	mvn.w	r0, #21
   1266a:	e7be      	b.n	125ea <bt_le_scan_start+0x9a>
		return -EINVAL;
   1266c:	f06f 0015 	mvn.w	r0, #21
   12670:	e7bb      	b.n	125ea <bt_le_scan_start+0x9a>
		return -EALREADY;
   12672:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12676:	e7b8      	b.n	125ea <bt_le_scan_start+0x9a>
   12678:	2000035c 	.word	0x2000035c
   1267c:	20002074 	.word	0x20002074

00012680 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   12680:	4b03      	ldr	r3, [pc, #12]	; (12690 <pool_id+0x10>)
   12682:	1ac0      	subs	r0, r0, r3
   12684:	1080      	asrs	r0, r0, #2
}
   12686:	4b03      	ldr	r3, [pc, #12]	; (12694 <pool_id+0x14>)
   12688:	fb03 f000 	mul.w	r0, r3, r0
   1268c:	4770      	bx	lr
   1268e:	bf00      	nop
   12690:	200005f8 	.word	0x200005f8
   12694:	ba2e8ba3 	.word	0xba2e8ba3

00012698 <net_buf_pool_get>:
}
   12698:	222c      	movs	r2, #44	; 0x2c
   1269a:	4b02      	ldr	r3, [pc, #8]	; (126a4 <net_buf_pool_get+0xc>)
   1269c:	fb02 3000 	mla	r0, r2, r0, r3
   126a0:	4770      	bx	lr
   126a2:	bf00      	nop
   126a4:	200005f8 	.word	0x200005f8

000126a8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   126a8:	4800      	ldr	r0, [pc, #0]	; (126ac <get_hf_flags+0x4>)
   126aa:	4770      	bx	lr
   126ac:	200020c8 	.word	0x200020c8

000126b0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   126b0:	4b03      	ldr	r3, [pc, #12]	; (126c0 <get_subsys+0x10>)
   126b2:	1ac0      	subs	r0, r0, r3
   126b4:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   126b6:	4b03      	ldr	r3, [pc, #12]	; (126c4 <get_subsys+0x14>)
   126b8:	fb03 f000 	mul.w	r0, r3, r0
   126bc:	4770      	bx	lr
   126be:	bf00      	nop
   126c0:	20002088 	.word	0x20002088
   126c4:	b6db6db7 	.word	0xb6db6db7

000126c8 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   126c8:	b538      	push	{r3, r4, r5, lr}
   126ca:	4605      	mov	r5, r0
   126cc:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   126ce:	f7ff ffef 	bl	126b0 <get_subsys>
   126d2:	4601      	mov	r1, r0
   126d4:	2240      	movs	r2, #64	; 0x40
   126d6:	4803      	ldr	r0, [pc, #12]	; (126e4 <onoff_stop+0x1c>)
   126d8:	f008 fd0d 	bl	1b0f6 <stop>
   126dc:	4601      	mov	r1, r0
	notify(mgr, res);
   126de:	4628      	mov	r0, r5
   126e0:	47a0      	blx	r4
}
   126e2:	bd38      	pop	{r3, r4, r5, pc}
   126e4:	0001ca04 	.word	0x0001ca04

000126e8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   126e8:	b530      	push	{r4, r5, lr}
   126ea:	b083      	sub	sp, #12
   126ec:	4605      	mov	r5, r0
   126ee:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   126f0:	f7ff ffde 	bl	126b0 <get_subsys>
   126f4:	4601      	mov	r1, r0
   126f6:	2340      	movs	r3, #64	; 0x40
   126f8:	9300      	str	r3, [sp, #0]
   126fa:	4623      	mov	r3, r4
   126fc:	4a05      	ldr	r2, [pc, #20]	; (12714 <onoff_start+0x2c>)
   126fe:	4806      	ldr	r0, [pc, #24]	; (12718 <onoff_start+0x30>)
   12700:	f008 fd13 	bl	1b12a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   12704:	1e01      	subs	r1, r0, #0
   12706:	db01      	blt.n	1270c <onoff_start+0x24>
		notify(mgr, err);
	}
}
   12708:	b003      	add	sp, #12
   1270a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1270c:	4628      	mov	r0, r5
   1270e:	47a0      	blx	r4
}
   12710:	e7fa      	b.n	12708 <onoff_start+0x20>
   12712:	bf00      	nop
   12714:	0001b173 	.word	0x0001b173
   12718:	0001ca04 	.word	0x0001ca04

0001271c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1271c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1271e:	b110      	cbz	r0, 12726 <clock_event_handler+0xa>
   12720:	2801      	cmp	r0, #1
   12722:	d00d      	beq.n	12740 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   12724:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   12726:	2100      	movs	r1, #0
   12728:	4808      	ldr	r0, [pc, #32]	; (1274c <clock_event_handler+0x30>)
   1272a:	f008 fc6b 	bl	1b004 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1272e:	6883      	ldr	r3, [r0, #8]
   12730:	f013 0f07 	tst.w	r3, #7
   12734:	d1f6      	bne.n	12724 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   12736:	2100      	movs	r1, #0
   12738:	4804      	ldr	r0, [pc, #16]	; (1274c <clock_event_handler+0x30>)
   1273a:	f008 fcca 	bl	1b0d2 <clkstarted_handle>
   1273e:	e7f1      	b.n	12724 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   12740:	2101      	movs	r1, #1
   12742:	4802      	ldr	r0, [pc, #8]	; (1274c <clock_event_handler+0x30>)
   12744:	f008 fcc5 	bl	1b0d2 <clkstarted_handle>
}
   12748:	e7ec      	b.n	12724 <clock_event_handler+0x8>
   1274a:	bf00      	nop
   1274c:	0001ca04 	.word	0x0001ca04

00012750 <generic_hfclk_start>:
{
   12750:	b510      	push	{r4, lr}
	__asm__ volatile(
   12752:	f04f 0340 	mov.w	r3, #64	; 0x40
   12756:	f3ef 8411 	mrs	r4, BASEPRI
   1275a:	f383 8812 	msr	BASEPRI_MAX, r3
   1275e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   12762:	4a13      	ldr	r2, [pc, #76]	; (127b0 <generic_hfclk_start+0x60>)
   12764:	6813      	ldr	r3, [r2, #0]
   12766:	f043 0302 	orr.w	r3, r3, #2
   1276a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1276c:	f013 0f01 	tst.w	r3, #1
   12770:	d108      	bne.n	12784 <generic_hfclk_start+0x34>
	bool already_started = false;
   12772:	2300      	movs	r3, #0
	__asm__ volatile(
   12774:	f384 8811 	msr	BASEPRI, r4
   12778:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1277c:	b99b      	cbnz	r3, 127a6 <generic_hfclk_start+0x56>
	hfclk_start();
   1277e:	f008 fd00 	bl	1b182 <hfclk_start>
}
   12782:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12788:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1278c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12790:	f012 0f01 	tst.w	r2, #1
   12794:	d101      	bne.n	1279a <generic_hfclk_start+0x4a>
	bool already_started = false;
   12796:	2300      	movs	r3, #0
   12798:	e7ec      	b.n	12774 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1279a:	f7ff ff85 	bl	126a8 <get_hf_flags>
   1279e:	f008 fc85 	bl	1b0ac <set_on_state>
			already_started = true;
   127a2:	2301      	movs	r3, #1
   127a4:	e7e6      	b.n	12774 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   127a6:	2100      	movs	r1, #0
   127a8:	4802      	ldr	r0, [pc, #8]	; (127b4 <generic_hfclk_start+0x64>)
   127aa:	f008 fc92 	bl	1b0d2 <clkstarted_handle>
		return;
   127ae:	e7e8      	b.n	12782 <generic_hfclk_start+0x32>
   127b0:	200020d8 	.word	0x200020d8
   127b4:	0001ca04 	.word	0x0001ca04

000127b8 <generic_hfclk_stop>:
{
   127b8:	b508      	push	{r3, lr}
   127ba:	4b0a      	ldr	r3, [pc, #40]	; (127e4 <generic_hfclk_stop+0x2c>)
   127bc:	f3bf 8f5b 	dmb	ish
   127c0:	e853 2f00 	ldrex	r2, [r3]
   127c4:	f022 0102 	bic.w	r1, r2, #2
   127c8:	e843 1000 	strex	r0, r1, [r3]
   127cc:	2800      	cmp	r0, #0
   127ce:	d1f7      	bne.n	127c0 <generic_hfclk_stop+0x8>
   127d0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   127d4:	f012 0f01 	tst.w	r2, #1
   127d8:	d000      	beq.n	127dc <generic_hfclk_stop+0x24>
}
   127da:	bd08      	pop	{r3, pc}
	hfclk_stop();
   127dc:	f008 fcdb 	bl	1b196 <hfclk_stop>
   127e0:	e7fb      	b.n	127da <generic_hfclk_stop+0x22>
   127e2:	bf00      	nop
   127e4:	200020d8 	.word	0x200020d8

000127e8 <api_blocking_start>:
{
   127e8:	b500      	push	{lr}
   127ea:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   127ec:	f8cd d000 	str.w	sp, [sp]
   127f0:	f8cd d004 	str.w	sp, [sp, #4]
   127f4:	2300      	movs	r3, #0
   127f6:	9302      	str	r3, [sp, #8]
   127f8:	2301      	movs	r3, #1
   127fa:	9303      	str	r3, [sp, #12]
   127fc:	ab04      	add	r3, sp, #16
   127fe:	9304      	str	r3, [sp, #16]
   12800:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12802:	466b      	mov	r3, sp
   12804:	4a06      	ldr	r2, [pc, #24]	; (12820 <api_blocking_start+0x38>)
   12806:	f008 fcac 	bl	1b162 <api_start>
	if (err < 0) {
   1280a:	2800      	cmp	r0, #0
   1280c:	db05      	blt.n	1281a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1280e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12812:	2300      	movs	r3, #0
   12814:	4668      	mov	r0, sp
   12816:	f003 f913 	bl	15a40 <z_impl_k_sem_take>
}
   1281a:	b007      	add	sp, #28
   1281c:	f85d fb04 	ldr.w	pc, [sp], #4
   12820:	0001b1ab 	.word	0x0001b1ab

00012824 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   12824:	b570      	push	{r4, r5, r6, lr}
   12826:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12828:	2200      	movs	r2, #0
   1282a:	2101      	movs	r1, #1
   1282c:	4610      	mov	r0, r2
   1282e:	f7fd fbcd 	bl	ffcc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   12832:	2000      	movs	r0, #0
   12834:	f7fd fb98 	bl	ff68 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   12838:	4811      	ldr	r0, [pc, #68]	; (12880 <clk_init+0x5c>)
   1283a:	f001 fde1 	bl	14400 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1283e:	4b11      	ldr	r3, [pc, #68]	; (12884 <clk_init+0x60>)
   12840:	4298      	cmp	r0, r3
   12842:	d11a      	bne.n	1287a <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   12844:	f009 fa83 	bl	1bd4e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   12848:	2400      	movs	r4, #0
   1284a:	e003      	b.n	12854 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1284c:	2301      	movs	r3, #1
   1284e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   12850:	441c      	add	r4, r3
   12852:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   12854:	2c01      	cmp	r4, #1
   12856:	d80e      	bhi.n	12876 <clk_init+0x52>
						get_sub_data(dev, i);
   12858:	4621      	mov	r1, r4
   1285a:	4630      	mov	r0, r6
   1285c:	f008 fbd2 	bl	1b004 <get_sub_data>
   12860:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12862:	4621      	mov	r1, r4
   12864:	4630      	mov	r0, r6
   12866:	f008 fbda 	bl	1b01e <get_onoff_manager>
   1286a:	4907      	ldr	r1, [pc, #28]	; (12888 <clk_init+0x64>)
   1286c:	f007 f9c5 	bl	19bfa <onoff_manager_init>
		if (err < 0) {
   12870:	2800      	cmp	r0, #0
   12872:	daeb      	bge.n	1284c <clk_init+0x28>
   12874:	e000      	b.n	12878 <clk_init+0x54>
	}

	return 0;
   12876:	2000      	movs	r0, #0
}
   12878:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1287a:	f06f 0004 	mvn.w	r0, #4
   1287e:	e7fb      	b.n	12878 <clk_init+0x54>
   12880:	0001271d 	.word	0x0001271d
   12884:	0bad0000 	.word	0x0bad0000
   12888:	0001dba0 	.word	0x0001dba0

0001288c <lfclk_spinwait>:
{
   1288c:	b570      	push	{r4, r5, r6, lr}
   1288e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   12890:	2801      	cmp	r0, #1
   12892:	d107      	bne.n	128a4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   12894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12898:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1289c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   128a0:	2b01      	cmp	r3, #1
   128a2:	d058      	beq.n	12956 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   128a4:	f009 fb6a 	bl	1bf7c <k_is_in_isr>
   128a8:	b928      	cbnz	r0, 128b6 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   128aa:	4b2e      	ldr	r3, [pc, #184]	; (12964 <lfclk_spinwait+0xd8>)
   128ac:	781b      	ldrb	r3, [r3, #0]
   128ae:	2b00      	cmp	r3, #0
   128b0:	d041      	beq.n	12936 <lfclk_spinwait+0xaa>
   128b2:	2300      	movs	r3, #0
   128b4:	e000      	b.n	128b8 <lfclk_spinwait+0x2c>
   128b6:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   128b8:	461c      	mov	r4, r3
   128ba:	2b00      	cmp	r3, #0
   128bc:	d03d      	beq.n	1293a <lfclk_spinwait+0xae>
	__asm__ volatile(
   128be:	f04f 0340 	mov.w	r3, #64	; 0x40
   128c2:	f3ef 8611 	mrs	r6, BASEPRI
   128c6:	f383 8812 	msr	BASEPRI_MAX, r3
   128ca:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   128ce:	b924      	cbnz	r4, 128da <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   128d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   128d4:	2202      	movs	r2, #2
   128d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   128da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   128de:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   128e2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   128e6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   128ea:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   128ee:	d12b      	bne.n	12948 <lfclk_spinwait+0xbc>
    return false;
   128f0:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   128f2:	b11a      	cbz	r2, 128fc <lfclk_spinwait+0x70>
   128f4:	2b01      	cmp	r3, #1
   128f6:	d029      	beq.n	1294c <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   128f8:	2d01      	cmp	r5, #1
   128fa:	d027      	beq.n	1294c <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   128fc:	b1fc      	cbz	r4, 1293e <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   128fe:	4630      	mov	r0, r6
   12900:	f7fd fada 	bl	feb8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   12904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12908:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1290c:	2b00      	cmp	r3, #0
   1290e:	d1e4      	bne.n	128da <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12910:	4b15      	ldr	r3, [pc, #84]	; (12968 <lfclk_spinwait+0xdc>)
   12912:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   12914:	2b00      	cmp	r3, #0
   12916:	d0e0      	beq.n	128da <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12918:	4b13      	ldr	r3, [pc, #76]	; (12968 <lfclk_spinwait+0xdc>)
   1291a:	2200      	movs	r2, #0
   1291c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1291e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   12920:	2301      	movs	r3, #1
   12922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12926:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1292a:	4a10      	ldr	r2, [pc, #64]	; (1296c <lfclk_spinwait+0xe0>)
   1292c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12930:	4a0f      	ldr	r2, [pc, #60]	; (12970 <lfclk_spinwait+0xe4>)
   12932:	6013      	str	r3, [r2, #0]
}
   12934:	e7d1      	b.n	128da <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12936:	2301      	movs	r3, #1
   12938:	e7be      	b.n	128b8 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   1293a:	2600      	movs	r6, #0
   1293c:	e7c7      	b.n	128ce <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   1293e:	2021      	movs	r0, #33	; 0x21
   12940:	2100      	movs	r1, #0
   12942:	f003 fdc9 	bl	164d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12946:	e7dd      	b.n	12904 <lfclk_spinwait+0x78>
                return true;
   12948:	2201      	movs	r2, #1
   1294a:	e7d2      	b.n	128f2 <lfclk_spinwait+0x66>
	if (isr_mode) {
   1294c:	b124      	cbz	r4, 12958 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   1294e:	f386 8811 	msr	BASEPRI, r6
   12952:	f3bf 8f6f 	isb	sy
}
   12956:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   12958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1295c:	2202      	movs	r2, #2
   1295e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12962:	e7f8      	b.n	12956 <lfclk_spinwait+0xca>
   12964:	20002d91 	.word	0x20002d91
   12968:	40000104 	.word	0x40000104
   1296c:	e000e100 	.word	0xe000e100
   12970:	40000008 	.word	0x40000008

00012974 <z_nrf_clock_control_lf_on>:
{
   12974:	b510      	push	{r4, lr}
   12976:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12978:	4b10      	ldr	r3, [pc, #64]	; (129bc <z_nrf_clock_control_lf_on+0x48>)
   1297a:	2101      	movs	r1, #1
   1297c:	f3bf 8f5b 	dmb	ish
   12980:	e853 2f00 	ldrex	r2, [r3]
   12984:	e843 1000 	strex	r0, r1, [r3]
   12988:	2800      	cmp	r0, #0
   1298a:	d1f9      	bne.n	12980 <z_nrf_clock_control_lf_on+0xc>
   1298c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   12990:	b11a      	cbz	r2, 1299a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   12992:	1e63      	subs	r3, r4, #1
   12994:	2b01      	cmp	r3, #1
   12996:	d90c      	bls.n	129b2 <z_nrf_clock_control_lf_on+0x3e>
}
   12998:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1299a:	4809      	ldr	r0, [pc, #36]	; (129c0 <z_nrf_clock_control_lf_on+0x4c>)
   1299c:	f008 fb3f 	bl	1b01e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   129a0:	4908      	ldr	r1, [pc, #32]	; (129c4 <z_nrf_clock_control_lf_on+0x50>)
   129a2:	2300      	movs	r3, #0
   129a4:	604b      	str	r3, [r1, #4]
   129a6:	60cb      	str	r3, [r1, #12]
   129a8:	2301      	movs	r3, #1
   129aa:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   129ac:	f007 f941 	bl	19c32 <onoff_request>
   129b0:	e7ef      	b.n	12992 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   129b2:	4620      	mov	r0, r4
   129b4:	f7ff ff6a 	bl	1288c <lfclk_spinwait>
		break;
   129b8:	e7ee      	b.n	12998 <z_nrf_clock_control_lf_on+0x24>
   129ba:	bf00      	nop
   129bc:	200020dc 	.word	0x200020dc
   129c0:	0001ca04 	.word	0x0001ca04
   129c4:	20002078 	.word	0x20002078

000129c8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   129c8:	b510      	push	{r4, lr}
   129ca:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   129cc:	280a      	cmp	r0, #10
   129ce:	d007      	beq.n	129e0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   129d0:	4b07      	ldr	r3, [pc, #28]	; (129f0 <console_out+0x28>)
   129d2:	6818      	ldr	r0, [r3, #0]
   129d4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   129d6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   129d8:	685b      	ldr	r3, [r3, #4]
   129da:	4798      	blx	r3

	return c;
}
   129dc:	4620      	mov	r0, r4
   129de:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   129e0:	4b03      	ldr	r3, [pc, #12]	; (129f0 <console_out+0x28>)
   129e2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   129e4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   129e6:	685b      	ldr	r3, [r3, #4]
   129e8:	210d      	movs	r1, #13
   129ea:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   129ec:	e7f0      	b.n	129d0 <console_out+0x8>
   129ee:	bf00      	nop
   129f0:	200020e0 	.word	0x200020e0

000129f4 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   129f4:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   129f6:	4c04      	ldr	r4, [pc, #16]	; (12a08 <uart_console_hook_install+0x14>)
   129f8:	4620      	mov	r0, r4
   129fa:	f7fe f95f 	bl	10cbc <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   129fe:	4620      	mov	r0, r4
   12a00:	f7fb fb94 	bl	e12c <__printk_hook_install>
#endif
}
   12a04:	bd10      	pop	{r4, pc}
   12a06:	bf00      	nop
   12a08:	000129c9 	.word	0x000129c9

00012a0c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   12a0c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   12a0e:	4806      	ldr	r0, [pc, #24]	; (12a28 <uart_console_init+0x1c>)
   12a10:	4b06      	ldr	r3, [pc, #24]	; (12a2c <uart_console_init+0x20>)
   12a12:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   12a14:	f009 f9d2 	bl	1bdbc <z_device_ready>
   12a18:	b118      	cbz	r0, 12a22 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   12a1a:	f7ff ffeb 	bl	129f4 <uart_console_hook_install>

	return 0;
   12a1e:	2000      	movs	r0, #0
}
   12a20:	bd08      	pop	{r3, pc}
		return -ENODEV;
   12a22:	f06f 0012 	mvn.w	r0, #18
   12a26:	e7fb      	b.n	12a20 <uart_console_init+0x14>
   12a28:	0001ca94 	.word	0x0001ca94
   12a2c:	200020e0 	.word	0x200020e0

00012a30 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12a30:	4b1f      	ldr	r3, [pc, #124]	; (12ab0 <get_drive+0x80>)
   12a32:	4003      	ands	r3, r0
   12a34:	4a1f      	ldr	r2, [pc, #124]	; (12ab4 <get_drive+0x84>)
   12a36:	4293      	cmp	r3, r2
   12a38:	d032      	beq.n	12aa0 <get_drive+0x70>
   12a3a:	d816      	bhi.n	12a6a <get_drive+0x3a>
   12a3c:	2b06      	cmp	r3, #6
   12a3e:	d02b      	beq.n	12a98 <get_drive+0x68>
   12a40:	d906      	bls.n	12a50 <get_drive+0x20>
   12a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12a46:	d10d      	bne.n	12a64 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   12a48:	2301      	movs	r3, #1
   12a4a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   12a4c:	2000      	movs	r0, #0
		break;
   12a4e:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12a50:	b1fb      	cbz	r3, 12a92 <get_drive+0x62>
   12a52:	2b02      	cmp	r3, #2
   12a54:	d103      	bne.n	12a5e <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   12a56:	2304      	movs	r3, #4
   12a58:	700b      	strb	r3, [r1, #0]
	int err = 0;
   12a5a:	2000      	movs	r0, #0
		break;
   12a5c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12a5e:	f06f 0015 	mvn.w	r0, #21
   12a62:	4770      	bx	lr
   12a64:	f06f 0015 	mvn.w	r0, #21
   12a68:	4770      	bx	lr
   12a6a:	4a13      	ldr	r2, [pc, #76]	; (12ab8 <get_drive+0x88>)
   12a6c:	4293      	cmp	r3, r2
   12a6e:	d01b      	beq.n	12aa8 <get_drive+0x78>
   12a70:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   12a74:	d103      	bne.n	12a7e <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   12a76:	2303      	movs	r3, #3
   12a78:	700b      	strb	r3, [r1, #0]
	int err = 0;
   12a7a:	2000      	movs	r0, #0
		break;
   12a7c:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   12a82:	d103      	bne.n	12a8c <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   12a84:	2302      	movs	r3, #2
   12a86:	700b      	strb	r3, [r1, #0]
	int err = 0;
   12a88:	2000      	movs	r0, #0
		break;
   12a8a:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   12a8c:	f06f 0015 	mvn.w	r0, #21
   12a90:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   12a92:	2000      	movs	r0, #0
   12a94:	7008      	strb	r0, [r1, #0]
		break;
   12a96:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   12a98:	2306      	movs	r3, #6
   12a9a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   12a9c:	2000      	movs	r0, #0
		break;
   12a9e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   12aa0:	2307      	movs	r3, #7
   12aa2:	700b      	strb	r3, [r1, #0]
	int err = 0;
   12aa4:	2000      	movs	r0, #0
		break;
   12aa6:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   12aa8:	2305      	movs	r3, #5
   12aaa:	700b      	strb	r3, [r1, #0]
	int err = 0;
   12aac:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   12aae:	4770      	bx	lr
   12ab0:	00f00006 	.word	0x00f00006
   12ab4:	00100006 	.word	0x00100006
   12ab8:	00400002 	.word	0x00400002

00012abc <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12abc:	b128      	cbz	r0, 12aca <get_dev+0xe>
   12abe:	2801      	cmp	r0, #1
   12ac0:	d101      	bne.n	12ac6 <get_dev+0xa>
   12ac2:	4803      	ldr	r0, [pc, #12]	; (12ad0 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   12ac4:	4770      	bx	lr
	const struct device *dev = NULL;
   12ac6:	2000      	movs	r0, #0
   12ac8:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12aca:	4802      	ldr	r0, [pc, #8]	; (12ad4 <get_dev+0x18>)
   12acc:	4770      	bx	lr
   12ace:	bf00      	nop
   12ad0:	0001ca1c 	.word	0x0001ca1c
   12ad4:	0001ca34 	.word	0x0001ca34

00012ad8 <gpio_nrfx_pin_interrupt_configure>:
{
   12ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ada:	b085      	sub	sp, #20
   12adc:	460e      	mov	r6, r1
   12ade:	4619      	mov	r1, r3
	return port->config;
   12ae0:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   12ae2:	7b1b      	ldrb	r3, [r3, #12]
   12ae4:	f006 051f 	and.w	r5, r6, #31
   12ae8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   12aec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   12af0:	d022      	beq.n	12b38 <gpio_nrfx_pin_interrupt_configure+0x60>
   12af2:	4607      	mov	r7, r0
   12af4:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   12af6:	2300      	movs	r3, #0
   12af8:	9302      	str	r3, [sp, #8]
   12afa:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   12afc:	4610      	mov	r0, r2
   12afe:	f008 fb8c 	bl	1b21a <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   12b02:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   12b06:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   12b08:	6899      	ldr	r1, [r3, #8]
   12b0a:	40f1      	lsrs	r1, r6
   12b0c:	f011 0f01 	tst.w	r1, #1
   12b10:	d102      	bne.n	12b18 <gpio_nrfx_pin_interrupt_configure+0x40>
   12b12:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   12b16:	d014      	beq.n	12b42 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12b18:	2300      	movs	r3, #0
   12b1a:	aa02      	add	r2, sp, #8
   12b1c:	4619      	mov	r1, r3
   12b1e:	4628      	mov	r0, r5
   12b20:	f002 f830 	bl	14b84 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   12b24:	4b1b      	ldr	r3, [pc, #108]	; (12b94 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   12b26:	4298      	cmp	r0, r3
   12b28:	d131      	bne.n	12b8e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   12b2a:	2101      	movs	r1, #1
   12b2c:	4628      	mov	r0, r5
   12b2e:	f002 fa01 	bl	14f34 <nrfx_gpiote_trigger_enable>
	return 0;
   12b32:	2000      	movs	r0, #0
}
   12b34:	b005      	add	sp, #20
   12b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   12b38:	4628      	mov	r0, r5
   12b3a:	f002 fa5f 	bl	14ffc <nrfx_gpiote_trigger_disable>
		return 0;
   12b3e:	2000      	movs	r0, #0
   12b40:	e7f8      	b.n	12b34 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   12b42:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   12b46:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12b48:	2a01      	cmp	r2, #1
   12b4a:	d014      	beq.n	12b76 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   12b4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   12b50:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   12b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   12b58:	f013 0f01 	tst.w	r3, #1
   12b5c:	d1dc      	bne.n	12b18 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12b5e:	f10d 0107 	add.w	r1, sp, #7
   12b62:	4628      	mov	r0, r5
   12b64:	f002 f98a 	bl	14e7c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   12b68:	4b0b      	ldr	r3, [pc, #44]	; (12b98 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   12b6a:	4298      	cmp	r0, r3
   12b6c:	d005      	beq.n	12b7a <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   12b6e:	f10d 0307 	add.w	r3, sp, #7
   12b72:	9303      	str	r3, [sp, #12]
   12b74:	e7d0      	b.n	12b18 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   12b76:	4a09      	ldr	r2, [pc, #36]	; (12b9c <gpio_nrfx_pin_interrupt_configure+0xc4>)
   12b78:	e7ea      	b.n	12b50 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   12b7a:	f10d 0007 	add.w	r0, sp, #7
   12b7e:	f002 f9d1 	bl	14f24 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   12b82:	4b04      	ldr	r3, [pc, #16]	; (12b94 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   12b84:	4298      	cmp	r0, r3
   12b86:	d0f2      	beq.n	12b6e <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   12b88:	f06f 000b 	mvn.w	r0, #11
   12b8c:	e7d2      	b.n	12b34 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   12b8e:	f06f 0004 	mvn.w	r0, #4
   12b92:	e7cf      	b.n	12b34 <gpio_nrfx_pin_interrupt_configure+0x5c>
   12b94:	0bad0000 	.word	0x0bad0000
   12b98:	0bad0004 	.word	0x0bad0004
   12b9c:	50000300 	.word	0x50000300

00012ba0 <pin_uninit>:
{
   12ba0:	b530      	push	{r4, r5, lr}
   12ba2:	b083      	sub	sp, #12
   12ba4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   12ba6:	f10d 0107 	add.w	r1, sp, #7
   12baa:	f002 f967 	bl	14e7c <nrfx_gpiote_channel_get>
   12bae:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   12bb0:	4620      	mov	r0, r4
   12bb2:	f002 fa53 	bl	1505c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   12bb6:	4b0b      	ldr	r3, [pc, #44]	; (12be4 <pin_uninit+0x44>)
   12bb8:	4298      	cmp	r0, r3
   12bba:	d10f      	bne.n	12bdc <pin_uninit+0x3c>
	if (free_ch) {
   12bbc:	429d      	cmp	r5, r3
   12bbe:	d005      	beq.n	12bcc <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   12bc0:	4b08      	ldr	r3, [pc, #32]	; (12be4 <pin_uninit+0x44>)
   12bc2:	4298      	cmp	r0, r3
   12bc4:	d107      	bne.n	12bd6 <pin_uninit+0x36>
   12bc6:	2000      	movs	r0, #0
}
   12bc8:	b003      	add	sp, #12
   12bca:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   12bcc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12bd0:	f002 f9a0 	bl	14f14 <nrfx_gpiote_channel_free>
   12bd4:	e7f4      	b.n	12bc0 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   12bd6:	f06f 0004 	mvn.w	r0, #4
   12bda:	e7f5      	b.n	12bc8 <pin_uninit+0x28>
		return -EIO;
   12bdc:	f06f 0004 	mvn.w	r0, #4
   12be0:	e7f2      	b.n	12bc8 <pin_uninit+0x28>
   12be2:	bf00      	nop
   12be4:	0bad0000 	.word	0x0bad0000

00012be8 <gpio_nrfx_pin_configure>:
{
   12be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12bec:	b087      	sub	sp, #28
	return port->config;
   12bee:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12bf2:	f898 300c 	ldrb.w	r3, [r8, #12]
   12bf6:	f001 051f 	and.w	r5, r1, #31
   12bfa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   12bfe:	2a00      	cmp	r2, #0
   12c00:	d044      	beq.n	12c8c <gpio_nrfx_pin_configure+0xa4>
   12c02:	460c      	mov	r4, r1
   12c04:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   12c06:	2600      	movs	r6, #0
   12c08:	9603      	str	r6, [sp, #12]
   12c0a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   12c0c:	f10d 0117 	add.w	r1, sp, #23
   12c10:	4620      	mov	r0, r4
   12c12:	f002 f933 	bl	14e7c <nrfx_gpiote_channel_get>
   12c16:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12c18:	4633      	mov	r3, r6
   12c1a:	aa03      	add	r2, sp, #12
   12c1c:	4631      	mov	r1, r6
   12c1e:	4628      	mov	r0, r5
   12c20:	f001 ffb0 	bl	14b84 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   12c24:	4b30      	ldr	r3, [pc, #192]	; (12ce8 <gpio_nrfx_pin_configure+0x100>)
   12c26:	4298      	cmp	r0, r3
   12c28:	d15b      	bne.n	12ce2 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   12c2a:	4599      	cmp	r9, r3
   12c2c:	d036      	beq.n	12c9c <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   12c2e:	f417 7f00 	tst.w	r7, #512	; 0x200
   12c32:	d043      	beq.n	12cbc <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   12c34:	f10d 0103 	add.w	r1, sp, #3
   12c38:	4638      	mov	r0, r7
   12c3a:	f7ff fef9 	bl	12a30 <get_drive>
		if (rv != 0) {
   12c3e:	4606      	mov	r6, r0
   12c40:	bb40      	cbnz	r0, 12c94 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   12c42:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12c46:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   12c4a:	f417 7f80 	tst.w	r7, #256	; 0x100
   12c4e:	bf0c      	ite	eq
   12c50:	2301      	moveq	r3, #1
   12c52:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   12c54:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   12c58:	4638      	mov	r0, r7
   12c5a:	f008 faab 	bl	1b1b4 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   12c5e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   12c62:	f417 6f00 	tst.w	r7, #2048	; 0x800
   12c66:	d01e      	beq.n	12ca6 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   12c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
   12c6c:	2101      	movs	r1, #1
   12c6e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   12c72:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   12c76:	2200      	movs	r2, #0
   12c78:	a901      	add	r1, sp, #4
   12c7a:	4628      	mov	r0, r5
   12c7c:	f002 f838 	bl	14cf0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12c80:	4b19      	ldr	r3, [pc, #100]	; (12ce8 <gpio_nrfx_pin_configure+0x100>)
   12c82:	4298      	cmp	r0, r3
   12c84:	d006      	beq.n	12c94 <gpio_nrfx_pin_configure+0xac>
   12c86:	f06f 0615 	mvn.w	r6, #21
   12c8a:	e003      	b.n	12c94 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   12c8c:	4628      	mov	r0, r5
   12c8e:	f7ff ff87 	bl	12ba0 <pin_uninit>
   12c92:	4606      	mov	r6, r0
}
   12c94:	4630      	mov	r0, r6
   12c96:	b007      	add	sp, #28
   12c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   12c9c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12ca0:	f002 f938 	bl	14f14 <nrfx_gpiote_channel_free>
   12ca4:	e7c3      	b.n	12c2e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   12ca6:	f417 6f80 	tst.w	r7, #1024	; 0x400
   12caa:	d0e4      	beq.n	12c76 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   12cac:	f8d8 2004 	ldr.w	r2, [r8, #4]
   12cb0:	2301      	movs	r3, #1
   12cb2:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   12cb6:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   12cba:	e7dc      	b.n	12c76 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   12cbc:	4638      	mov	r0, r7
   12cbe:	f008 fa79 	bl	1b1b4 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   12cc2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12cc6:	2300      	movs	r3, #0
   12cc8:	461a      	mov	r2, r3
   12cca:	a902      	add	r1, sp, #8
   12ccc:	4628      	mov	r0, r5
   12cce:	f001 ff59 	bl	14b84 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12cd2:	4b05      	ldr	r3, [pc, #20]	; (12ce8 <gpio_nrfx_pin_configure+0x100>)
   12cd4:	4298      	cmp	r0, r3
   12cd6:	d101      	bne.n	12cdc <gpio_nrfx_pin_configure+0xf4>
   12cd8:	2600      	movs	r6, #0
   12cda:	e7db      	b.n	12c94 <gpio_nrfx_pin_configure+0xac>
   12cdc:	f06f 0615 	mvn.w	r6, #21
   12ce0:	e7d8      	b.n	12c94 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   12ce2:	f06f 0615 	mvn.w	r6, #21
   12ce6:	e7d5      	b.n	12c94 <gpio_nrfx_pin_configure+0xac>
   12ce8:	0bad0000 	.word	0x0bad0000

00012cec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   12cec:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   12cee:	f002 f907 	bl	14f00 <nrfx_gpiote_is_init>
   12cf2:	b108      	cbz	r0, 12cf8 <gpio_nrfx_init+0xc>
		return 0;
   12cf4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   12cf6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   12cf8:	f002 f8d8 	bl	14eac <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   12cfc:	4b08      	ldr	r3, [pc, #32]	; (12d20 <gpio_nrfx_init+0x34>)
   12cfe:	4298      	cmp	r0, r3
   12d00:	d10a      	bne.n	12d18 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   12d02:	2100      	movs	r1, #0
   12d04:	4807      	ldr	r0, [pc, #28]	; (12d24 <gpio_nrfx_init+0x38>)
   12d06:	f002 f8b3 	bl	14e70 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   12d0a:	2200      	movs	r2, #0
   12d0c:	2105      	movs	r1, #5
   12d0e:	2006      	movs	r0, #6
   12d10:	f7fd f95c 	bl	ffcc <z_arm_irq_priority_set>
	return 0;
   12d14:	2000      	movs	r0, #0
   12d16:	e7ee      	b.n	12cf6 <gpio_nrfx_init+0xa>
		return -EIO;
   12d18:	f06f 0004 	mvn.w	r0, #4
   12d1c:	e7eb      	b.n	12cf6 <gpio_nrfx_init+0xa>
   12d1e:	bf00      	nop
   12d20:	0bad0000 	.word	0x0bad0000
   12d24:	0001b2ab 	.word	0x0001b2ab

00012d28 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
   12d28:	b410      	push	{r4}
	return dev->config;
   12d2a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   12d2c:	2900      	cmp	r1, #0
   12d2e:	d17e      	bne.n	12e2e <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   12d30:	68da      	ldr	r2, [r3, #12]
   12d32:	f1b2 3fff 	cmp.w	r2, #4294967295
   12d36:	d017      	beq.n	12d68 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
   12d38:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12d3c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12d3e:	2a01      	cmp	r2, #1
   12d40:	d065      	beq.n	12e0e <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
   12d42:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12d46:	2201      	movs	r2, #1
   12d48:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   12d4a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   12d4e:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   12d50:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12d54:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12d56:	2a01      	cmp	r2, #1
   12d58:	d05b      	beq.n	12e12 <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
   12d5a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   12d5e:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   12d62:	2103      	movs	r1, #3
   12d64:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   12d68:	691a      	ldr	r2, [r3, #16]
   12d6a:	f1b2 3fff 	cmp.w	r2, #4294967295
   12d6e:	d00f      	beq.n	12d90 <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   12d70:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   12d72:	2900      	cmp	r1, #0
   12d74:	d04f      	beq.n	12e16 <uarte_nrfx_pins_configure+0xee>
   12d76:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   12d78:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12d7c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12d7e:	2a01      	cmp	r2, #1
   12d80:	d04b      	beq.n	12e1a <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
   12d82:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12d86:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   12d88:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   12d8c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   12d90:	695a      	ldr	r2, [r3, #20]
   12d92:	f1b2 3fff 	cmp.w	r2, #4294967295
   12d96:	d017      	beq.n	12dc8 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
   12d98:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12d9c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12d9e:	2a01      	cmp	r2, #1
   12da0:	d03d      	beq.n	12e1e <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
   12da2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12da6:	2201      	movs	r2, #1
   12da8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   12daa:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   12dae:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   12db0:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12db4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12db6:	2a01      	cmp	r2, #1
   12db8:	d033      	beq.n	12e22 <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
   12dba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   12dbe:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   12dc2:	2103      	movs	r1, #3
   12dc4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   12dc8:	699a      	ldr	r2, [r3, #24]
   12dca:	f1b2 3fff 	cmp.w	r2, #4294967295
   12dce:	d00e      	beq.n	12dee <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   12dd0:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   12dd2:	b341      	cbz	r1, 12e26 <uarte_nrfx_pins_configure+0xfe>
   12dd4:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   12dd6:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12dda:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12ddc:	2a01      	cmp	r2, #1
   12dde:	d024      	beq.n	12e2a <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
   12de0:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12de4:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   12de6:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   12dea:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   12dee:	681a      	ldr	r2, [r3, #0]
   12df0:	68d8      	ldr	r0, [r3, #12]
   12df2:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   12df4:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   12df8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   12dfc:	681a      	ldr	r2, [r3, #0]
   12dfe:	6959      	ldr	r1, [r3, #20]
   12e00:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   12e02:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   12e06:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   12e0a:	bc10      	pop	{r4}
   12e0c:	4770      	bx	lr
        case 1: return NRF_P1;
   12e0e:	482c      	ldr	r0, [pc, #176]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12e10:	e799      	b.n	12d46 <uarte_nrfx_pins_configure+0x1e>
   12e12:	482b      	ldr	r0, [pc, #172]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12e14:	e7a3      	b.n	12d5e <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
   12e16:	2000      	movs	r0, #0
   12e18:	e7ae      	b.n	12d78 <uarte_nrfx_pins_configure+0x50>
   12e1a:	4c29      	ldr	r4, [pc, #164]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12e1c:	e7b3      	b.n	12d86 <uarte_nrfx_pins_configure+0x5e>
   12e1e:	4828      	ldr	r0, [pc, #160]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12e20:	e7c1      	b.n	12da6 <uarte_nrfx_pins_configure+0x7e>
   12e22:	4827      	ldr	r0, [pc, #156]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12e24:	e7cb      	b.n	12dbe <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
   12e26:	2000      	movs	r0, #0
   12e28:	e7d5      	b.n	12dd6 <uarte_nrfx_pins_configure+0xae>
   12e2a:	4c25      	ldr	r4, [pc, #148]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12e2c:	e7da      	b.n	12de4 <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   12e2e:	68da      	ldr	r2, [r3, #12]
   12e30:	f1b2 3fff 	cmp.w	r2, #4294967295
   12e34:	d00b      	beq.n	12e4e <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
   12e36:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12e3a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12e3c:	2a01      	cmp	r2, #1
   12e3e:	d037      	beq.n	12eb0 <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
   12e40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   12e44:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   12e48:	2102      	movs	r1, #2
   12e4a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   12e4e:	691a      	ldr	r2, [r3, #16]
   12e50:	f1b2 3fff 	cmp.w	r2, #4294967295
   12e54:	d00b      	beq.n	12e6e <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
   12e56:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12e5a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12e5c:	2a01      	cmp	r2, #1
   12e5e:	d029      	beq.n	12eb4 <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
   12e60:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   12e64:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   12e68:	2102      	movs	r1, #2
   12e6a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   12e6e:	695a      	ldr	r2, [r3, #20]
   12e70:	f1b2 3fff 	cmp.w	r2, #4294967295
   12e74:	d00b      	beq.n	12e8e <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
   12e76:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12e7a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12e7c:	2a01      	cmp	r2, #1
   12e7e:	d01b      	beq.n	12eb8 <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
   12e80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   12e84:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   12e88:	2102      	movs	r1, #2
   12e8a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   12e8e:	699a      	ldr	r2, [r3, #24]
   12e90:	f1b2 3fff 	cmp.w	r2, #4294967295
   12e94:	d0ab      	beq.n	12dee <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
   12e96:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   12e9a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12e9c:	2a01      	cmp	r2, #1
   12e9e:	d00d      	beq.n	12ebc <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
   12ea0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   12ea4:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   12ea8:	2102      	movs	r1, #2
   12eaa:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   12eae:	e79e      	b.n	12dee <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
   12eb0:	4803      	ldr	r0, [pc, #12]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12eb2:	e7c7      	b.n	12e44 <uarte_nrfx_pins_configure+0x11c>
   12eb4:	4802      	ldr	r0, [pc, #8]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12eb6:	e7d5      	b.n	12e64 <uarte_nrfx_pins_configure+0x13c>
   12eb8:	4801      	ldr	r0, [pc, #4]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12eba:	e7e3      	b.n	12e84 <uarte_nrfx_pins_configure+0x15c>
   12ebc:	4800      	ldr	r0, [pc, #0]	; (12ec0 <uarte_nrfx_pins_configure+0x198>)
   12ebe:	e7f1      	b.n	12ea4 <uarte_nrfx_pins_configure+0x17c>
   12ec0:	50000300 	.word	0x50000300

00012ec4 <baudrate_set>:
	return dev->config;
   12ec4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12ec6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   12ec8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   12ecc:	d06f      	beq.n	12fae <baudrate_set+0xea>
   12ece:	d83a      	bhi.n	12f46 <baudrate_set+0x82>
   12ed0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   12ed4:	d06e      	beq.n	12fb4 <baudrate_set+0xf0>
   12ed6:	d90a      	bls.n	12eee <baudrate_set+0x2a>
   12ed8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   12edc:	d075      	beq.n	12fca <baudrate_set+0x106>
   12ede:	d924      	bls.n	12f2a <baudrate_set+0x66>
   12ee0:	f647 2312 	movw	r3, #31250	; 0x7a12
   12ee4:	4299      	cmp	r1, r3
   12ee6:	d12b      	bne.n	12f40 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   12ee8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   12eec:	e013      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12eee:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   12ef2:	d061      	beq.n	12fb8 <baudrate_set+0xf4>
   12ef4:	d907      	bls.n	12f06 <baudrate_set+0x42>
   12ef6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   12efa:	d063      	beq.n	12fc4 <baudrate_set+0x100>
   12efc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   12f00:	d110      	bne.n	12f24 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   12f02:	4b3c      	ldr	r3, [pc, #240]	; (12ff4 <baudrate_set+0x130>)
   12f04:	e007      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12f06:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   12f0a:	d058      	beq.n	12fbe <baudrate_set+0xfa>
   12f0c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   12f10:	d105      	bne.n	12f1e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   12f12:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12f16:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   12f1a:	2000      	movs	r0, #0
   12f1c:	4770      	bx	lr
	switch (baudrate) {
   12f1e:	f06f 0015 	mvn.w	r0, #21
   12f22:	4770      	bx	lr
   12f24:	f06f 0015 	mvn.w	r0, #21
   12f28:	4770      	bx	lr
   12f2a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   12f2e:	d04e      	beq.n	12fce <baudrate_set+0x10a>
   12f30:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   12f34:	d101      	bne.n	12f3a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   12f36:	4b30      	ldr	r3, [pc, #192]	; (12ff8 <baudrate_set+0x134>)
   12f38:	e7ed      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12f3a:	f06f 0015 	mvn.w	r0, #21
   12f3e:	4770      	bx	lr
   12f40:	f06f 0015 	mvn.w	r0, #21
   12f44:	4770      	bx	lr
   12f46:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   12f4a:	d042      	beq.n	12fd2 <baudrate_set+0x10e>
   12f4c:	d909      	bls.n	12f62 <baudrate_set+0x9e>
   12f4e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   12f52:	d046      	beq.n	12fe2 <baudrate_set+0x11e>
   12f54:	d91f      	bls.n	12f96 <baudrate_set+0xd2>
   12f56:	4b29      	ldr	r3, [pc, #164]	; (12ffc <baudrate_set+0x138>)
   12f58:	4299      	cmp	r1, r3
   12f5a:	d148      	bne.n	12fee <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   12f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12f60:	e7d9      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12f62:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   12f66:	d037      	beq.n	12fd8 <baudrate_set+0x114>
   12f68:	d905      	bls.n	12f76 <baudrate_set+0xb2>
   12f6a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   12f6e:	d10f      	bne.n	12f90 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   12f70:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   12f74:	e7cf      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12f76:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   12f7a:	4299      	cmp	r1, r3
   12f7c:	d02e      	beq.n	12fdc <baudrate_set+0x118>
   12f7e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   12f82:	d102      	bne.n	12f8a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   12f84:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   12f88:	e7c5      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12f8a:	f06f 0015 	mvn.w	r0, #21
   12f8e:	4770      	bx	lr
   12f90:	f06f 0015 	mvn.w	r0, #21
   12f94:	4770      	bx	lr
   12f96:	4b1a      	ldr	r3, [pc, #104]	; (13000 <baudrate_set+0x13c>)
   12f98:	4299      	cmp	r1, r3
   12f9a:	d025      	beq.n	12fe8 <baudrate_set+0x124>
   12f9c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   12fa0:	d102      	bne.n	12fa8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   12fa2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   12fa6:	e7b6      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12fa8:	f06f 0015 	mvn.w	r0, #21
   12fac:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   12fae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   12fb2:	e7b0      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   12fb4:	4b13      	ldr	r3, [pc, #76]	; (13004 <baudrate_set+0x140>)
   12fb6:	e7ae      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   12fb8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   12fbc:	e7ab      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12fbe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   12fc2:	e7a8      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   12fc4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12fc8:	e7a5      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   12fca:	4b0f      	ldr	r3, [pc, #60]	; (13008 <baudrate_set+0x144>)
   12fcc:	e7a3      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   12fce:	4b0f      	ldr	r3, [pc, #60]	; (1300c <baudrate_set+0x148>)
   12fd0:	e7a1      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   12fd2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   12fd6:	e79e      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   12fd8:	4b0d      	ldr	r3, [pc, #52]	; (13010 <baudrate_set+0x14c>)
   12fda:	e79c      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   12fdc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   12fe0:	e799      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   12fe2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   12fe6:	e796      	b.n	12f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   12fe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12fec:	e793      	b.n	12f16 <baudrate_set+0x52>
	switch (baudrate) {
   12fee:	f06f 0015 	mvn.w	r0, #21
}
   12ff2:	4770      	bx	lr
   12ff4:	0013b000 	.word	0x0013b000
   12ff8:	004ea000 	.word	0x004ea000
   12ffc:	000f4240 	.word	0x000f4240
   13000:	0003d090 	.word	0x0003d090
   13004:	00275000 	.word	0x00275000
   13008:	0075c000 	.word	0x0075c000
   1300c:	003af000 	.word	0x003af000
   13010:	013a9000 	.word	0x013a9000

00013014 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   13014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13018:	4605      	mov	r5, r0
   1301a:	460f      	mov	r7, r1
	return dev->data;
   1301c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13020:	f008 ffac 	bl	1bf7c <k_is_in_isr>
   13024:	b920      	cbnz	r0, 13030 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   13026:	4b16      	ldr	r3, [pc, #88]	; (13080 <uarte_nrfx_poll_out+0x6c>)
   13028:	781b      	ldrb	r3, [r3, #0]
   1302a:	b1ab      	cbz	r3, 13058 <uarte_nrfx_poll_out+0x44>
   1302c:	2300      	movs	r3, #0
   1302e:	e000      	b.n	13032 <uarte_nrfx_poll_out+0x1e>
   13030:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   13032:	b19b      	cbz	r3, 1305c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   13034:	f04f 0340 	mov.w	r3, #64	; 0x40
   13038:	f3ef 8411 	mrs	r4, BASEPRI
   1303c:	f383 8812 	msr	BASEPRI_MAX, r3
   13040:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   13044:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   13046:	4628      	mov	r0, r5
   13048:	f008 f9f9 	bl	1b43e <is_tx_ready>
   1304c:	b950      	cbnz	r0, 13064 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   1304e:	f384 8811 	msr	BASEPRI, r4
   13052:	f3bf 8f6f 	isb	sy
}
   13056:	e7ed      	b.n	13034 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13058:	2301      	movs	r3, #1
   1305a:	e7ea      	b.n	13032 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1305c:	4628      	mov	r0, r5
   1305e:	f008 fa3d 	bl	1b4dc <wait_tx_ready>
   13062:	4606      	mov	r6, r0
	}

	data->char_out = c;
   13064:	4641      	mov	r1, r8
   13066:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   1306a:	2201      	movs	r2, #1
   1306c:	4628      	mov	r0, r5
   1306e:	f008 fa00 	bl	1b472 <tx_start>
	__asm__ volatile(
   13072:	f386 8811 	msr	BASEPRI, r6
   13076:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1307a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1307e:	bf00      	nop
   13080:	20002d91 	.word	0x20002d91

00013084 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   13084:	b538      	push	{r3, r4, r5, lr}
   13086:	4604      	mov	r4, r0
   13088:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1308a:	f101 0012 	add.w	r0, r1, #18
   1308e:	f002 f839 	bl	15104 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   13092:	4b14      	ldr	r3, [pc, #80]	; (130e4 <endtx_stoptx_ppi_init+0x60>)
   13094:	4298      	cmp	r0, r3
   13096:	d111      	bne.n	130bc <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   13098:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1309a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1309e:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   130a0:	4a11      	ldr	r2, [pc, #68]	; (130e8 <endtx_stoptx_ppi_init+0x64>)
   130a2:	33a2      	adds	r3, #162	; 0xa2
   130a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   130a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   130ac:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   130ae:	7ca9      	ldrb	r1, [r5, #18]
   130b0:	2301      	movs	r3, #1
   130b2:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   130b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   130b8:	2000      	movs	r0, #0
}
   130ba:	bd38      	pop	{r3, r4, r5, pc}
   130bc:	4b0b      	ldr	r3, [pc, #44]	; (130ec <endtx_stoptx_ppi_init+0x68>)
   130be:	4a0c      	ldr	r2, [pc, #48]	; (130f0 <endtx_stoptx_ppi_init+0x6c>)
   130c0:	1a9b      	subs	r3, r3, r2
   130c2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   130c4:	f04f 0100 	mov.w	r1, #0
   130c8:	2201      	movs	r2, #1
   130ca:	f362 0102 	bfi	r1, r2, #0, #3
   130ce:	f36f 01c5 	bfc	r1, #3, #3
   130d2:	f363 118f 	bfi	r1, r3, #6, #10
   130d6:	4807      	ldr	r0, [pc, #28]	; (130f4 <endtx_stoptx_ppi_init+0x70>)
   130d8:	f7fc f978 	bl	f3cc <log_0>
		return -EIO;
   130dc:	f06f 0004 	mvn.w	r0, #4
   130e0:	e7eb      	b.n	130ba <endtx_stoptx_ppi_init+0x36>
   130e2:	bf00      	nop
   130e4:	0bad0000 	.word	0x0bad0000
   130e8:	4001f000 	.word	0x4001f000
   130ec:	0001cccc 	.word	0x0001cccc
   130f0:	0001cc2c 	.word	0x0001cc2c
   130f4:	0001dbf8 	.word	0x0001dbf8

000130f8 <random_byte_get>:
	__asm__ volatile(
   130f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   130fc:	f3ef 8211 	mrs	r2, BASEPRI
   13100:	f383 8812 	msr	BASEPRI_MAX, r3
   13104:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   13108:	4b09      	ldr	r3, [pc, #36]	; (13130 <random_byte_get+0x38>)
   1310a:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1310c:	b16b      	cbz	r3, 1312a <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1310e:	4b09      	ldr	r3, [pc, #36]	; (13134 <random_byte_get+0x3c>)
   13110:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   13114:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13116:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1311a:	2100      	movs	r1, #0
   1311c:	6019      	str	r1, [r3, #0]
   1311e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   13120:	f382 8811 	msr	BASEPRI, r2
   13124:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   13128:	4770      	bx	lr
	int retval = -EAGAIN;
   1312a:	f06f 000a 	mvn.w	r0, #10
   1312e:	e7f7      	b.n	13120 <random_byte_get+0x28>
   13130:	4000d100 	.word	0x4000d100
   13134:	4000d000 	.word	0x4000d000

00013138 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   13138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1313c:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1313e:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   13142:	78c5      	ldrb	r5, [r0, #3]
   13144:	462f      	mov	r7, r5
	__asm__ volatile(
   13146:	f04f 0340 	mov.w	r3, #64	; 0x40
   1314a:	f3ef 8811 	mrs	r8, BASEPRI
   1314e:	f383 8812 	msr	BASEPRI_MAX, r3
   13152:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   13156:	7800      	ldrb	r0, [r0, #0]
   13158:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1315a:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1315e:	ebac 0c00 	sub.w	ip, ip, r0
   13162:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   13166:	4562      	cmp	r2, ip
   13168:	d901      	bls.n	1316e <rng_pool_get+0x36>
		len = available;
   1316a:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1316e:	1883      	adds	r3, r0, r2
   13170:	402b      	ands	r3, r5
   13172:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   13174:	f388 8811 	msr	BASEPRI, r8
   13178:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1317c:	460b      	mov	r3, r1
}
   1317e:	e006      	b.n	1318e <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   13180:	1932      	adds	r2, r6, r4
   13182:	7952      	ldrb	r2, [r2, #5]
   13184:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   13188:	3401      	adds	r4, #1
   1318a:	403c      	ands	r4, r7
	while (likely(len--)) {
   1318c:	462a      	mov	r2, r5
   1318e:	1e55      	subs	r5, r2, #1
   13190:	b2ad      	uxth	r5, r5
   13192:	2a00      	cmp	r2, #0
   13194:	d1f4      	bne.n	13180 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   13196:	4570      	cmp	r0, lr
   13198:	d10d      	bne.n	131b6 <rng_pool_get+0x7e>
	__asm__ volatile(
   1319a:	f04f 0040 	mov.w	r0, #64	; 0x40
   1319e:	f3ef 8211 	mrs	r2, BASEPRI
   131a2:	f380 8812 	msr	BASEPRI_MAX, r0
   131a6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   131aa:	7830      	ldrb	r0, [r6, #0]
   131ac:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   131ae:	f382 8811 	msr	BASEPRI, r2
   131b2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   131b6:	1a5b      	subs	r3, r3, r1
   131b8:	b298      	uxth	r0, r3
	available = available - len;
   131ba:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   131be:	7933      	ldrb	r3, [r6, #4]
   131c0:	4563      	cmp	r3, ip
   131c2:	d302      	bcc.n	131ca <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   131c4:	4b02      	ldr	r3, [pc, #8]	; (131d0 <rng_pool_get+0x98>)
   131c6:	2201      	movs	r2, #1
   131c8:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   131ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131ce:	bf00      	nop
   131d0:	4000d000 	.word	0x4000d000

000131d4 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   131d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131d6:	460d      	mov	r5, r1
   131d8:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   131da:	f013 0f01 	tst.w	r3, #1
   131de:	d103      	bne.n	131e8 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   131e0:	4822      	ldr	r0, [pc, #136]	; (1326c <entropy_nrf5_get_entropy_isr+0x98>)
   131e2:	f7ff ffa9 	bl	13138 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   131e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   131e8:	b90a      	cbnz	r2, 131ee <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   131ea:	4620      	mov	r0, r4
   131ec:	e7fb      	b.n	131e6 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   131ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   131f2:	f3ef 8611 	mrs	r6, BASEPRI
   131f6:	f383 8812 	msr	BASEPRI_MAX, r3
   131fa:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   131fe:	200d      	movs	r0, #13
   13200:	f7fc fed6 	bl	ffb0 <arch_irq_is_enabled>
   13204:	4607      	mov	r7, r0
		irq_disable(IRQN);
   13206:	200d      	movs	r0, #13
   13208:	f7fc febe 	bl	ff88 <arch_irq_disable>
	__asm__ volatile(
   1320c:	f386 8811 	msr	BASEPRI, r6
   13210:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13214:	4b16      	ldr	r3, [pc, #88]	; (13270 <entropy_nrf5_get_entropy_isr+0x9c>)
   13216:	2200      	movs	r2, #0
   13218:	601a      	str	r2, [r3, #0]
   1321a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1321c:	4b15      	ldr	r3, [pc, #84]	; (13274 <entropy_nrf5_get_entropy_isr+0xa0>)
   1321e:	2201      	movs	r2, #1
   13220:	601a      	str	r2, [r3, #0]
   13222:	4b15      	ldr	r3, [pc, #84]	; (13278 <entropy_nrf5_get_entropy_isr+0xa4>)
   13224:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   13228:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1322c:	4626      	mov	r6, r4
   1322e:	e004      	b.n	1323a <entropy_nrf5_get_entropy_isr+0x66>
   13230:	f3bf 8f4f 	dsb	sy
				__WFE();
   13234:	bf20      	wfe
				__SEV();
   13236:	bf40      	sev
				__WFE();
   13238:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1323a:	4b0d      	ldr	r3, [pc, #52]	; (13270 <entropy_nrf5_get_entropy_isr+0x9c>)
   1323c:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1323e:	2b00      	cmp	r3, #0
   13240:	d0f6      	beq.n	13230 <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   13242:	f7ff ff59 	bl	130f8 <random_byte_get>
   13246:	4b0c      	ldr	r3, [pc, #48]	; (13278 <entropy_nrf5_get_entropy_isr+0xa4>)
   13248:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1324c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   13250:	2800      	cmp	r0, #0
   13252:	db02      	blt.n	1325a <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   13254:	3e01      	subs	r6, #1
   13256:	b2b6      	uxth	r6, r6
   13258:	55a8      	strb	r0, [r5, r6]
		} while (len);
   1325a:	2e00      	cmp	r6, #0
   1325c:	d1ed      	bne.n	1323a <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1325e:	2f00      	cmp	r7, #0
   13260:	d0c3      	beq.n	131ea <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   13262:	200d      	movs	r0, #13
   13264:	f7fc fe80 	bl	ff68 <arch_irq_enable>
   13268:	e7bf      	b.n	131ea <entropy_nrf5_get_entropy_isr+0x16>
   1326a:	bf00      	nop
   1326c:	2000212c 	.word	0x2000212c
   13270:	4000d100 	.word	0x4000d100
   13274:	4000d000 	.word	0x4000d000
   13278:	e000e100 	.word	0xe000e100

0001327c <isr>:
{
   1327c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1327e:	f7ff ff3b 	bl	130f8 <random_byte_get>
	if (byte < 0) {
   13282:	2800      	cmp	r0, #0
   13284:	db06      	blt.n	13294 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   13286:	b2c4      	uxtb	r4, r0
   13288:	4621      	mov	r1, r4
   1328a:	480a      	ldr	r0, [pc, #40]	; (132b4 <isr+0x38>)
   1328c:	f008 f9b5 	bl	1b5fa <rng_pool_put>
	if (ret < 0) {
   13290:	2800      	cmp	r0, #0
   13292:	db00      	blt.n	13296 <isr+0x1a>
}
   13294:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   13296:	4621      	mov	r1, r4
   13298:	4807      	ldr	r0, [pc, #28]	; (132b8 <isr+0x3c>)
   1329a:	f008 f9ae 	bl	1b5fa <rng_pool_put>
		if (ret < 0) {
   1329e:	2800      	cmp	r0, #0
   132a0:	db03      	blt.n	132aa <isr+0x2e>
	z_impl_k_sem_give(sem);
   132a2:	4806      	ldr	r0, [pc, #24]	; (132bc <isr+0x40>)
   132a4:	f002 fba4 	bl	159f0 <z_impl_k_sem_give>
}
   132a8:	e7f4      	b.n	13294 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   132aa:	4b05      	ldr	r3, [pc, #20]	; (132c0 <isr+0x44>)
   132ac:	2201      	movs	r2, #1
   132ae:	601a      	str	r2, [r3, #0]
}
   132b0:	e7f7      	b.n	132a2 <isr+0x26>
   132b2:	bf00      	nop
   132b4:	2000212c 	.word	0x2000212c
   132b8:	20002141 	.word	0x20002141
   132bc:	20002114 	.word	0x20002114
   132c0:	4000d004 	.word	0x4000d004

000132c4 <entropy_nrf5_get_entropy>:
{
   132c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132c6:	460f      	mov	r7, r1
   132c8:	4614      	mov	r4, r2
	while (len) {
   132ca:	e002      	b.n	132d2 <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   132cc:	1b64      	subs	r4, r4, r5
   132ce:	b2a4      	uxth	r4, r4
		buf += bytes;
   132d0:	442f      	add	r7, r5
	while (len) {
   132d2:	b1e4      	cbz	r4, 1330e <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   132d4:	4e0f      	ldr	r6, [pc, #60]	; (13314 <entropy_nrf5_get_entropy+0x50>)
   132d6:	f04f 32ff 	mov.w	r2, #4294967295
   132da:	f04f 33ff 	mov.w	r3, #4294967295
   132de:	4630      	mov	r0, r6
   132e0:	f002 fbae 	bl	15a40 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   132e4:	4622      	mov	r2, r4
   132e6:	4639      	mov	r1, r7
   132e8:	f106 0045 	add.w	r0, r6, #69	; 0x45
   132ec:	f7ff ff24 	bl	13138 <rng_pool_get>
   132f0:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   132f2:	4630      	mov	r0, r6
   132f4:	f002 fb7c 	bl	159f0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   132f8:	2d00      	cmp	r5, #0
   132fa:	d1e7      	bne.n	132cc <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   132fc:	f04f 32ff 	mov.w	r2, #4294967295
   13300:	f04f 33ff 	mov.w	r3, #4294967295
   13304:	f106 0018 	add.w	r0, r6, #24
   13308:	f002 fb9a 	bl	15a40 <z_impl_k_sem_take>
			continue;
   1330c:	e7e1      	b.n	132d2 <entropy_nrf5_get_entropy+0xe>
}
   1330e:	2000      	movs	r0, #0
   13310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13312:	bf00      	nop
   13314:	200020fc 	.word	0x200020fc

00013318 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   13318:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1331a:	4c18      	ldr	r4, [pc, #96]	; (1337c <entropy_nrf5_init+0x64>)
   1331c:	2201      	movs	r2, #1
   1331e:	4611      	mov	r1, r2
   13320:	4620      	mov	r0, r4
   13322:	f008 ff50 	bl	1c1c6 <z_impl_k_sem_init>
   13326:	2201      	movs	r2, #1
   13328:	2100      	movs	r1, #0
   1332a:	f104 0018 	add.w	r0, r4, #24
   1332e:	f008 ff4a 	bl	1c1c6 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   13332:	2204      	movs	r2, #4
   13334:	2108      	movs	r1, #8
   13336:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1333a:	f008 f972 	bl	1b622 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1333e:	220c      	movs	r2, #12
   13340:	2110      	movs	r1, #16
   13342:	f104 0030 	add.w	r0, r4, #48	; 0x30
   13346:	f008 f96c 	bl	1b622 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1334a:	4b0d      	ldr	r3, [pc, #52]	; (13380 <entropy_nrf5_init+0x68>)
   1334c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13350:	f022 0201 	bic.w	r2, r2, #1
   13354:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   13358:	4a0a      	ldr	r2, [pc, #40]	; (13384 <entropy_nrf5_init+0x6c>)
   1335a:	2400      	movs	r4, #0
   1335c:	6014      	str	r4, [r2, #0]
   1335e:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   13360:	2101      	movs	r1, #1
   13362:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   13366:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   13368:	4622      	mov	r2, r4
   1336a:	200d      	movs	r0, #13
   1336c:	f7fc fe2e 	bl	ffcc <z_arm_irq_priority_set>
	irq_enable(IRQN);
   13370:	200d      	movs	r0, #13
   13372:	f7fc fdf9 	bl	ff68 <arch_irq_enable>

	return 0;
}
   13376:	4620      	mov	r0, r4
   13378:	bd10      	pop	{r4, pc}
   1337a:	bf00      	nop
   1337c:	200020fc 	.word	0x200020fc
   13380:	4000d000 	.word	0x4000d000
   13384:	4000d100 	.word	0x4000d100

00013388 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13388:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1338c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13390:	4b01      	ldr	r3, [pc, #4]	; (13398 <set_comparator+0x10>)
   13392:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   13396:	4770      	bx	lr
   13398:	40011000 	.word	0x40011000

0001339c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1339c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   133a0:	4b01      	ldr	r3, [pc, #4]	; (133a8 <get_comparator+0xc>)
   133a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   133a6:	4770      	bx	lr
   133a8:	40011000 	.word	0x40011000

000133ac <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   133ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   133b0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   133b2:	4a02      	ldr	r2, [pc, #8]	; (133bc <event_enable+0x10>)
   133b4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   133b8:	4770      	bx	lr
   133ba:	bf00      	nop
   133bc:	40011000 	.word	0x40011000

000133c0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   133c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   133c4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   133c6:	4a02      	ldr	r2, [pc, #8]	; (133d0 <event_disable+0x10>)
   133c8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   133cc:	4770      	bx	lr
   133ce:	bf00      	nop
   133d0:	40011000 	.word	0x40011000

000133d4 <counter>:
     return p_reg->COUNTER;
   133d4:	4b01      	ldr	r3, [pc, #4]	; (133dc <counter+0x8>)
   133d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   133da:	4770      	bx	lr
   133dc:	40011000 	.word	0x40011000

000133e0 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   133e0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   133e2:	2301      	movs	r3, #1
   133e4:	4083      	lsls	r3, r0
   133e6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133e8:	4a10      	ldr	r2, [pc, #64]	; (1342c <compare_int_lock+0x4c>)
   133ea:	f3bf 8f5b 	dmb	ish
   133ee:	e852 1f00 	ldrex	r1, [r2]
   133f2:	ea01 0c04 	and.w	ip, r1, r4
   133f6:	e842 ce00 	strex	lr, ip, [r2]
   133fa:	f1be 0f00 	cmp.w	lr, #0
   133fe:	d1f6      	bne.n	133ee <compare_int_lock+0xe>
   13400:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13404:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13408:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1340c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13410:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   13414:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   13418:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1341c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   13420:	420b      	tst	r3, r1
}
   13422:	bf14      	ite	ne
   13424:	2001      	movne	r0, #1
   13426:	2000      	moveq	r0, #0
   13428:	bd10      	pop	{r4, pc}
   1342a:	bf00      	nop
   1342c:	20002154 	.word	0x20002154

00013430 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   13430:	b570      	push	{r4, r5, r6, lr}
   13432:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   13434:	f008 f93d 	bl	1b6b2 <full_int_lock>
   13438:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1343a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1343e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   13440:	4a17      	ldr	r2, [pc, #92]	; (134a0 <channel_processing_check_and_clear+0x70>)
   13442:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   13446:	4213      	tst	r3, r2
   13448:	d105      	bne.n	13456 <channel_processing_check_and_clear+0x26>
	bool result = false;
   1344a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1344c:	4628      	mov	r0, r5
   1344e:	f008 f934 	bl	1b6ba <full_int_unlock>

	return result;
}
   13452:	4630      	mov	r0, r6
   13454:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   13456:	2301      	movs	r3, #1
   13458:	40a3      	lsls	r3, r4
   1345a:	43db      	mvns	r3, r3
   1345c:	4a11      	ldr	r2, [pc, #68]	; (134a4 <channel_processing_check_and_clear+0x74>)
   1345e:	f3bf 8f5b 	dmb	ish
   13462:	e852 1f00 	ldrex	r1, [r2]
   13466:	ea01 0003 	and.w	r0, r1, r3
   1346a:	e842 0600 	strex	r6, r0, [r2]
   1346e:	2e00      	cmp	r6, #0
   13470:	d1f7      	bne.n	13462 <channel_processing_check_and_clear+0x32>
   13472:	f3bf 8f5b 	dmb	ish
   13476:	b959      	cbnz	r1, 13490 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13478:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1347c:	009b      	lsls	r3, r3, #2
   1347e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13484:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13488:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1348a:	b113      	cbz	r3, 13492 <channel_processing_check_and_clear+0x62>
   1348c:	2301      	movs	r3, #1
   1348e:	e000      	b.n	13492 <channel_processing_check_and_clear+0x62>
   13490:	2301      	movs	r3, #1
		if (result) {
   13492:	461e      	mov	r6, r3
   13494:	2b00      	cmp	r3, #0
   13496:	d0d9      	beq.n	1344c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   13498:	4620      	mov	r0, r4
   1349a:	f008 f8fb 	bl	1b694 <event_clear>
   1349e:	e7d5      	b.n	1344c <channel_processing_check_and_clear+0x1c>
   134a0:	40011000 	.word	0x40011000
   134a4:	20002150 	.word	0x20002150

000134a8 <compare_int_unlock>:
	if (key) {
   134a8:	b901      	cbnz	r1, 134ac <compare_int_unlock+0x4>
}
   134aa:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   134ac:	2301      	movs	r3, #1
   134ae:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   134b0:	4a11      	ldr	r2, [pc, #68]	; (134f8 <compare_int_unlock+0x50>)
   134b2:	f3bf 8f5b 	dmb	ish
   134b6:	e852 1f00 	ldrex	r1, [r2]
   134ba:	4319      	orrs	r1, r3
   134bc:	e842 1c00 	strex	ip, r1, [r2]
   134c0:	f1bc 0f00 	cmp.w	ip, #0
   134c4:	d1f7      	bne.n	134b6 <compare_int_unlock+0xe>
   134c6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   134ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   134ce:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   134d0:	4a0a      	ldr	r2, [pc, #40]	; (134fc <compare_int_unlock+0x54>)
   134d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   134d6:	f3bf 8f5b 	dmb	ish
   134da:	4b09      	ldr	r3, [pc, #36]	; (13500 <compare_int_unlock+0x58>)
   134dc:	681b      	ldr	r3, [r3, #0]
   134de:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   134e2:	fa23 f000 	lsr.w	r0, r3, r0
   134e6:	f010 0f01 	tst.w	r0, #1
   134ea:	d0de      	beq.n	134aa <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   134ec:	4b05      	ldr	r3, [pc, #20]	; (13504 <compare_int_unlock+0x5c>)
   134ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   134f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   134f6:	e7d8      	b.n	134aa <compare_int_unlock+0x2>
   134f8:	20002154 	.word	0x20002154
   134fc:	40011000 	.word	0x40011000
   13500:	20002150 	.word	0x20002150
   13504:	e000e100 	.word	0xe000e100

00013508 <sys_clock_timeout_handler>:
{
   13508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1350a:	4607      	mov	r7, r0
   1350c:	4614      	mov	r4, r2
   1350e:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   13510:	4610      	mov	r0, r2
   13512:	4619      	mov	r1, r3
   13514:	f008 f8ca 	bl	1b6ac <absolute_time_to_cc>
   13518:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1351a:	4b15      	ldr	r3, [pc, #84]	; (13570 <sys_clock_timeout_handler+0x68>)
   1351c:	681a      	ldr	r2, [r3, #0]
   1351e:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   13520:	601c      	str	r4, [r3, #0]
   13522:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   13524:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   13528:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1352c:	d308      	bcc.n	13540 <sys_clock_timeout_handler+0x38>
	return false;
   1352e:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   13530:	f003 f95a 	bl	167e8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   13534:	4638      	mov	r0, r7
   13536:	f7ff ff31 	bl	1339c <get_comparator>
   1353a:	42a8      	cmp	r0, r5
   1353c:	d00c      	beq.n	13558 <sys_clock_timeout_handler+0x50>
}
   1353e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   13540:	4b0c      	ldr	r3, [pc, #48]	; (13574 <sys_clock_timeout_handler+0x6c>)
   13542:	6819      	ldr	r1, [r3, #0]
   13544:	0a0b      	lsrs	r3, r1, #8
   13546:	060a      	lsls	r2, r1, #24
   13548:	1952      	adds	r2, r2, r5
   1354a:	f143 0300 	adc.w	r3, r3, #0
   1354e:	490a      	ldr	r1, [pc, #40]	; (13578 <sys_clock_timeout_handler+0x70>)
   13550:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   13554:	2401      	movs	r4, #1
   13556:	e7eb      	b.n	13530 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   13558:	b11c      	cbz	r4, 13562 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1355a:	4638      	mov	r0, r7
   1355c:	f7ff ff26 	bl	133ac <event_enable>
}
   13560:	e7ed      	b.n	1353e <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   13562:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   13566:	4638      	mov	r0, r7
   13568:	f7ff ff0e 	bl	13388 <set_comparator>
   1356c:	e7f5      	b.n	1355a <sys_clock_timeout_handler+0x52>
   1356e:	bf00      	nop
   13570:	20001618 	.word	0x20001618
   13574:	20002158 	.word	0x20002158
   13578:	20001600 	.word	0x20001600

0001357c <z_nrf_rtc_timer_read>:
{
   1357c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1357e:	4b0d      	ldr	r3, [pc, #52]	; (135b4 <z_nrf_rtc_timer_read+0x38>)
   13580:	681b      	ldr	r3, [r3, #0]
   13582:	0a1d      	lsrs	r5, r3, #8
   13584:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   13586:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1358a:	f7ff ff23 	bl	133d4 <counter>
   1358e:	4603      	mov	r3, r0
	val += cntr;
   13590:	1820      	adds	r0, r4, r0
   13592:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   13596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1359a:	d20a      	bcs.n	135b2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1359c:	4b06      	ldr	r3, [pc, #24]	; (135b8 <z_nrf_rtc_timer_read+0x3c>)
   1359e:	e9d3 2300 	ldrd	r2, r3, [r3]
   135a2:	4299      	cmp	r1, r3
   135a4:	bf08      	it	eq
   135a6:	4290      	cmpeq	r0, r2
   135a8:	d203      	bcs.n	135b2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   135aa:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   135ae:	f141 0100 	adc.w	r1, r1, #0
}
   135b2:	bd38      	pop	{r3, r4, r5, pc}
   135b4:	20002158 	.word	0x20002158
   135b8:	20001600 	.word	0x20001600

000135bc <compare_set_nolocks>:
{
   135bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   135c0:	4606      	mov	r6, r0
   135c2:	4614      	mov	r4, r2
   135c4:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   135c6:	4610      	mov	r0, r2
   135c8:	4619      	mov	r1, r3
   135ca:	f008 f86f 	bl	1b6ac <absolute_time_to_cc>
   135ce:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   135d0:	f7ff ffd4 	bl	1357c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   135d4:	42a9      	cmp	r1, r5
   135d6:	bf08      	it	eq
   135d8:	42a0      	cmpeq	r0, r4
   135da:	d21e      	bcs.n	1361a <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   135dc:	ebb4 0800 	subs.w	r8, r4, r0
   135e0:	eb65 0901 	sbc.w	r9, r5, r1
   135e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   135e8:	2300      	movs	r3, #0
   135ea:	454b      	cmp	r3, r9
   135ec:	bf08      	it	eq
   135ee:	4542      	cmpeq	r2, r8
   135f0:	d32e      	bcc.n	13650 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   135f2:	4b19      	ldr	r3, [pc, #100]	; (13658 <compare_set_nolocks+0x9c>)
   135f4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   135f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   135fc:	42ab      	cmp	r3, r5
   135fe:	bf08      	it	eq
   13600:	42a2      	cmpeq	r2, r4
   13602:	d018      	beq.n	13636 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   13604:	4639      	mov	r1, r7
   13606:	4630      	mov	r0, r6
   13608:	f008 f85a 	bl	1b6c0 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1360c:	4639      	mov	r1, r7
   1360e:	f008 f83d 	bl	1b68c <counter_sub>
   13612:	1824      	adds	r4, r4, r0
   13614:	f145 0500 	adc.w	r5, r5, #0
   13618:	e00d      	b.n	13636 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   1361a:	2301      	movs	r3, #1
   1361c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1361e:	4a0f      	ldr	r2, [pc, #60]	; (1365c <compare_set_nolocks+0xa0>)
   13620:	f3bf 8f5b 	dmb	ish
   13624:	e852 1f00 	ldrex	r1, [r2]
   13628:	4319      	orrs	r1, r3
   1362a:	e842 1000 	strex	r0, r1, [r2]
   1362e:	2800      	cmp	r0, #0
   13630:	d1f8      	bne.n	13624 <compare_set_nolocks+0x68>
   13632:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   13636:	4b08      	ldr	r3, [pc, #32]	; (13658 <compare_set_nolocks+0x9c>)
   13638:	0132      	lsls	r2, r6, #4
   1363a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1363e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   13642:	9908      	ldr	r1, [sp, #32]
   13644:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   13646:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13648:	6073      	str	r3, [r6, #4]
	return ret;
   1364a:	2000      	movs	r0, #0
}
   1364c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   13650:	f06f 0015 	mvn.w	r0, #21
   13654:	e7fa      	b.n	1364c <compare_set_nolocks+0x90>
   13656:	bf00      	nop
   13658:	20001608 	.word	0x20001608
   1365c:	20002150 	.word	0x20002150

00013660 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   13660:	b530      	push	{r4, r5, lr}
   13662:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   13664:	2300      	movs	r3, #0
   13666:	4a1e      	ldr	r2, [pc, #120]	; (136e0 <sys_clock_driver_init+0x80>)
   13668:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1366c:	2b00      	cmp	r3, #0
   1366e:	dd25      	ble.n	136bc <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   13670:	4c1b      	ldr	r4, [pc, #108]	; (136e0 <sys_clock_driver_init+0x80>)
   13672:	2502      	movs	r5, #2
   13674:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13678:	4b1a      	ldr	r3, [pc, #104]	; (136e4 <sys_clock_driver_init+0x84>)
   1367a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1367e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13682:	2200      	movs	r2, #0
   13684:	2101      	movs	r1, #1
   13686:	2011      	movs	r0, #17
   13688:	f7fc fca0 	bl	ffcc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1368c:	2011      	movs	r0, #17
   1368e:	f7fc fc6b 	bl	ff68 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13692:	2301      	movs	r3, #1
   13694:	4a14      	ldr	r2, [pc, #80]	; (136e8 <sys_clock_driver_init+0x88>)
   13696:	6013      	str	r3, [r2, #0]
   13698:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1369a:	4a14      	ldr	r2, [pc, #80]	; (136ec <sys_clock_driver_init+0x8c>)
   1369c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1369e:	2400      	movs	r4, #0
   136a0:	9401      	str	r4, [sp, #4]
   136a2:	4b13      	ldr	r3, [pc, #76]	; (136f0 <sys_clock_driver_init+0x90>)
   136a4:	9300      	str	r3, [sp, #0]
   136a6:	4a13      	ldr	r2, [pc, #76]	; (136f4 <sys_clock_driver_init+0x94>)
   136a8:	2300      	movs	r3, #0
   136aa:	4620      	mov	r0, r4
   136ac:	f008 f843 	bl	1b736 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   136b0:	4628      	mov	r0, r5
   136b2:	f7ff f95f 	bl	12974 <z_nrf_clock_control_lf_on>

	return 0;
}
   136b6:	4620      	mov	r0, r4
   136b8:	b003      	add	sp, #12
   136ba:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   136bc:	4a0e      	ldr	r2, [pc, #56]	; (136f8 <sys_clock_driver_init+0x98>)
   136be:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   136c2:	f04f 30ff 	mov.w	r0, #4294967295
   136c6:	f04f 31ff 	mov.w	r1, #4294967295
   136ca:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   136ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   136d2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   136d4:	4902      	ldr	r1, [pc, #8]	; (136e0 <sys_clock_driver_init+0x80>)
   136d6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   136da:	3301      	adds	r3, #1
   136dc:	e7c6      	b.n	1366c <sys_clock_driver_init+0xc>
   136de:	bf00      	nop
   136e0:	40011000 	.word	0x40011000
   136e4:	e000e100 	.word	0xe000e100
   136e8:	40011008 	.word	0x40011008
   136ec:	20002154 	.word	0x20002154
   136f0:	00013509 	.word	0x00013509
   136f4:	007fffff 	.word	0x007fffff
   136f8:	20001608 	.word	0x20001608

000136fc <process_channel>:
{
   136fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13700:	b082      	sub	sp, #8
   13702:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   13704:	f7ff fe94 	bl	13430 <channel_processing_check_and_clear>
   13708:	b910      	cbnz	r0, 13710 <process_channel+0x14>
}
   1370a:	b002      	add	sp, #8
   1370c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   13710:	f7ff ff34 	bl	1357c <z_nrf_rtc_timer_read>
   13714:	4606      	mov	r6, r0
   13716:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   13718:	f007 ffcb 	bl	1b6b2 <full_int_lock>
   1371c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1371e:	4b13      	ldr	r3, [pc, #76]	; (1376c <process_channel+0x70>)
   13720:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   13724:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   13728:	454f      	cmp	r7, r9
   1372a:	bf08      	it	eq
   1372c:	4546      	cmpeq	r6, r8
   1372e:	d20b      	bcs.n	13748 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   13730:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   13732:	4650      	mov	r0, sl
   13734:	f007 ffc1 	bl	1b6ba <full_int_unlock>
		if (handler) {
   13738:	2e00      	cmp	r6, #0
   1373a:	d0e6      	beq.n	1370a <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1373c:	9500      	str	r5, [sp, #0]
   1373e:	4642      	mov	r2, r8
   13740:	464b      	mov	r3, r9
   13742:	4620      	mov	r0, r4
   13744:	47b0      	blx	r6
}
   13746:	e7e0      	b.n	1370a <process_channel+0xe>
			handler = cc_data[chan].callback;
   13748:	4a08      	ldr	r2, [pc, #32]	; (1376c <process_channel+0x70>)
   1374a:	0123      	lsls	r3, r4, #4
   1374c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   13750:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   13752:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   13754:	2000      	movs	r0, #0
   13756:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13758:	f04f 32ff 	mov.w	r2, #4294967295
   1375c:	f04f 33ff 	mov.w	r3, #4294967295
   13760:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   13764:	4620      	mov	r0, r4
   13766:	f7ff fe2b 	bl	133c0 <event_disable>
   1376a:	e7e2      	b.n	13732 <process_channel+0x36>
   1376c:	20001608 	.word	0x20001608

00013770 <rtc_nrf_isr>:
{
   13770:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   13772:	4b0d      	ldr	r3, [pc, #52]	; (137a8 <rtc_nrf_isr+0x38>)
   13774:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   13778:	f013 0f02 	tst.w	r3, #2
   1377c:	d00a      	beq.n	13794 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1377e:	4b0b      	ldr	r3, [pc, #44]	; (137ac <rtc_nrf_isr+0x3c>)
   13780:	681b      	ldr	r3, [r3, #0]
   13782:	b13b      	cbz	r3, 13794 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13784:	4b09      	ldr	r3, [pc, #36]	; (137ac <rtc_nrf_isr+0x3c>)
   13786:	2200      	movs	r2, #0
   13788:	601a      	str	r2, [r3, #0]
   1378a:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   1378c:	4a08      	ldr	r2, [pc, #32]	; (137b0 <rtc_nrf_isr+0x40>)
   1378e:	6813      	ldr	r3, [r2, #0]
   13790:	3301      	adds	r3, #1
   13792:	6013      	str	r3, [r2, #0]
{
   13794:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13796:	2c00      	cmp	r4, #0
   13798:	dd00      	ble.n	1379c <rtc_nrf_isr+0x2c>
}
   1379a:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1379c:	4620      	mov	r0, r4
   1379e:	f7ff ffad 	bl	136fc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   137a2:	3401      	adds	r4, #1
   137a4:	e7f7      	b.n	13796 <rtc_nrf_isr+0x26>
   137a6:	bf00      	nop
   137a8:	40011000 	.word	0x40011000
   137ac:	40011104 	.word	0x40011104
   137b0:	20002158 	.word	0x20002158

000137b4 <sys_clock_set_timeout>:
{
   137b4:	b510      	push	{r4, lr}
   137b6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   137b8:	f1b0 3fff 	cmp.w	r0, #4294967295
   137bc:	d007      	beq.n	137ce <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   137be:	1e44      	subs	r4, r0, #1
   137c0:	2c00      	cmp	r4, #0
   137c2:	dd07      	ble.n	137d4 <sys_clock_set_timeout+0x20>
   137c4:	4b11      	ldr	r3, [pc, #68]	; (1380c <sys_clock_set_timeout+0x58>)
   137c6:	429c      	cmp	r4, r3
   137c8:	dd05      	ble.n	137d6 <sys_clock_set_timeout+0x22>
   137ca:	4c11      	ldr	r4, [pc, #68]	; (13810 <sys_clock_set_timeout+0x5c>)
   137cc:	e003      	b.n	137d6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   137ce:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   137d2:	e7f4      	b.n	137be <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   137d4:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   137d6:	f7ff fed1 	bl	1357c <z_nrf_rtc_timer_read>
   137da:	4b0e      	ldr	r3, [pc, #56]	; (13814 <sys_clock_set_timeout+0x60>)
   137dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   137e0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   137e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   137e6:	d300      	bcc.n	137ea <sys_clock_set_timeout+0x36>
		ticks = 0;
   137e8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   137ea:	4404      	add	r4, r0
   137ec:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   137ee:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   137f2:	d300      	bcc.n	137f6 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   137f4:	4c06      	ldr	r4, [pc, #24]	; (13810 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   137f6:	2000      	movs	r0, #0
   137f8:	9001      	str	r0, [sp, #4]
   137fa:	4907      	ldr	r1, [pc, #28]	; (13818 <sys_clock_set_timeout+0x64>)
   137fc:	9100      	str	r1, [sp, #0]
   137fe:	1912      	adds	r2, r2, r4
   13800:	f143 0300 	adc.w	r3, r3, #0
   13804:	f007 ff97 	bl	1b736 <compare_set>
}
   13808:	b002      	add	sp, #8
   1380a:	bd10      	pop	{r4, pc}
   1380c:	007ffffe 	.word	0x007ffffe
   13810:	007fffff 	.word	0x007fffff
   13814:	20001618 	.word	0x20001618
   13818:	00013509 	.word	0x00013509

0001381c <sys_clock_elapsed>:
{
   1381c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1381e:	f7ff fead 	bl	1357c <z_nrf_rtc_timer_read>
   13822:	4b02      	ldr	r3, [pc, #8]	; (1382c <sys_clock_elapsed+0x10>)
   13824:	681b      	ldr	r3, [r3, #0]
}
   13826:	1ac0      	subs	r0, r0, r3
   13828:	bd08      	pop	{r3, pc}
   1382a:	bf00      	nop
   1382c:	20001618 	.word	0x20001618

00013830 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   13830:	b570      	push	{r4, r5, r6, lr}
   13832:	b082      	sub	sp, #8
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13834:	2400      	movs	r4, #0
	uint32_t ret = 0;
   13836:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13838:	e014      	b.n	13864 <get_buttons+0x34>
   1383a:	4b19      	ldr	r3, [pc, #100]	; (138a0 <get_buttons+0x70>)
   1383c:	4a19      	ldr	r2, [pc, #100]	; (138a4 <get_buttons+0x74>)
   1383e:	1a9b      	subs	r3, r3, r2
   13840:	08db      	lsrs	r3, r3, #3
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   13842:	f04f 0100 	mov.w	r1, #0
   13846:	2201      	movs	r2, #1
   13848:	f362 0102 	bfi	r1, r2, #0, #3
   1384c:	f36f 01c5 	bfc	r1, #3, #3
   13850:	f363 118f 	bfi	r1, r3, #6, #10
   13854:	4814      	ldr	r0, [pc, #80]	; (138a8 <get_buttons+0x78>)
   13856:	f7fb fdb9 	bl	f3cc <log_0>
			return 0;
   1385a:	2500      	movs	r5, #0
			ret |= 1U << i;
		}
	}

	return ret;
}
   1385c:	4628      	mov	r0, r5
   1385e:	b002      	add	sp, #8
   13860:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13862:	3401      	adds	r4, #1
   13864:	2c03      	cmp	r4, #3
   13866:	d8f9      	bhi.n	1385c <get_buttons+0x2c>
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   13868:	4b10      	ldr	r3, [pc, #64]	; (138ac <get_buttons+0x7c>)
   1386a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1386e:	4b10      	ldr	r3, [pc, #64]	; (138b0 <get_buttons+0x80>)
   13870:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13874:	791e      	ldrb	r6, [r3, #4]
	const struct gpio_driver_api *api =
   13876:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
   13878:	685b      	ldr	r3, [r3, #4]
   1387a:	a901      	add	r1, sp, #4
   1387c:	4798      	blx	r3
	if (ret == 0) {
   1387e:	4603      	mov	r3, r0
   13880:	b930      	cbnz	r0, 13890 <get_buttons+0x60>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   13882:	2301      	movs	r3, #1
   13884:	40b3      	lsls	r3, r6
   13886:	9a01      	ldr	r2, [sp, #4]
   13888:	4213      	tst	r3, r2
   1388a:	bf14      	ite	ne
   1388c:	2301      	movne	r3, #1
   1388e:	2300      	moveq	r3, #0
		if (val < 0) {
   13890:	2b00      	cmp	r3, #0
   13892:	dbd2      	blt.n	1383a <get_buttons+0xa>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   13894:	2b00      	cmp	r3, #0
   13896:	d1e4      	bne.n	13862 <get_buttons+0x32>
			ret |= 1U << i;
   13898:	2301      	movs	r3, #1
   1389a:	40a3      	lsls	r3, r4
   1389c:	431d      	orrs	r5, r3
   1389e:	e7e0      	b.n	13862 <get_buttons+0x32>
   138a0:	0001cc64 	.word	0x0001cc64
   138a4:	0001cc2c 	.word	0x0001cc2c
   138a8:	0001dcac 	.word	0x0001dcac
   138ac:	2000215c 	.word	0x2000215c
   138b0:	0001dda8 	.word	0x0001dda8

000138b4 <button_handlers_call>:

static void button_handlers_call(uint32_t button_state, uint32_t has_changed)
{
   138b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138b6:	4606      	mov	r6, r0
   138b8:	460f      	mov	r7, r1
	struct button_handler *handler;

	if (button_handler_cb != NULL) {
   138ba:	4b11      	ldr	r3, [pc, #68]	; (13900 <button_handlers_call+0x4c>)
   138bc:	681b      	ldr	r3, [r3, #0]
   138be:	b103      	cbz	r3, 138c2 <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
   138c0:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   138c2:	f04f 32ff 	mov.w	r2, #4294967295
   138c6:	f04f 33ff 	mov.w	r3, #4294967295
   138ca:	480e      	ldr	r0, [pc, #56]	; (13904 <button_handlers_call+0x50>)
   138cc:	f001 ff86 	bl	157dc <z_impl_k_mutex_lock>
	return list->head;
   138d0:	4b0d      	ldr	r3, [pc, #52]	; (13908 <button_handlers_call+0x54>)
   138d2:	681c      	ldr	r4, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_lock(&button_handler_mut, K_FOREVER);
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   138d4:	b114      	cbz	r4, 138dc <button_handlers_call+0x28>
   138d6:	3c04      	subs	r4, #4
   138d8:	e000      	b.n	138dc <button_handlers_call+0x28>
   138da:	462c      	mov	r4, r5
   138dc:	b15c      	cbz	r4, 138f6 <button_handlers_call+0x42>
			handler->cb(button_state, has_changed);
   138de:	4625      	mov	r5, r4
   138e0:	f855 3b04 	ldr.w	r3, [r5], #4
   138e4:	4639      	mov	r1, r7
   138e6:	4630      	mov	r0, r6
   138e8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   138ea:	2d00      	cmp	r5, #0
   138ec:	d0f5      	beq.n	138da <button_handlers_call+0x26>
	return node->next;
   138ee:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   138f0:	b10c      	cbz	r4, 138f6 <button_handlers_call+0x42>
   138f2:	3c04      	subs	r4, #4
   138f4:	e7f2      	b.n	138dc <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
   138f6:	4803      	ldr	r0, [pc, #12]	; (13904 <button_handlers_call+0x50>)
   138f8:	f001 fffa 	bl	158f0 <z_impl_k_mutex_unlock>
		}
		k_mutex_unlock(&button_handler_mut);
	}
}
   138fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138fe:	bf00      	nop
   13900:	2000216c 	.word	0x2000216c
   13904:	20002170 	.word	0x20002170
   13908:	20002184 	.word	0x20002184

0001390c <callback_ctrl>:
{
   1390c:	b570      	push	{r4, r5, r6, lr}
   1390e:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   13910:	2400      	movs	r4, #0
	int err = 0;
   13912:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   13914:	e00d      	b.n	13932 <callback_ctrl+0x26>
			err = gpio_pin_interrupt_configure(button_devs[i],
   13916:	4b11      	ldr	r3, [pc, #68]	; (1395c <callback_ctrl+0x50>)
   13918:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1391c:	4b10      	ldr	r3, [pc, #64]	; (13960 <callback_ctrl+0x54>)
   1391e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13922:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   13924:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   13926:	699e      	ldr	r6, [r3, #24]
   13928:	2300      	movs	r3, #0
   1392a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1392e:	47b0      	blx	r6
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   13930:	3401      	adds	r4, #1
   13932:	2c03      	cmp	r4, #3
   13934:	d811      	bhi.n	1395a <callback_ctrl+0x4e>
   13936:	b980      	cbnz	r0, 1395a <callback_ctrl+0x4e>
		if (enable) {
   13938:	2d00      	cmp	r5, #0
   1393a:	d0ec      	beq.n	13916 <callback_ctrl+0xa>
			err = gpio_pin_interrupt_configure(button_devs[i],
   1393c:	4b07      	ldr	r3, [pc, #28]	; (1395c <callback_ctrl+0x50>)
   1393e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   13942:	4b07      	ldr	r3, [pc, #28]	; (13960 <callback_ctrl+0x54>)
   13944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13948:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   1394a:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1394c:	699e      	ldr	r6, [r3, #24]
   1394e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   13952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13956:	47b0      	blx	r6
   13958:	e7ea      	b.n	13930 <callback_ctrl+0x24>
}
   1395a:	bd70      	pop	{r4, r5, r6, pc}
   1395c:	2000215c 	.word	0x2000215c
   13960:	0001dda8 	.word	0x0001dda8

00013964 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   13964:	b510      	push	{r4, lr}
	__asm__ volatile(
   13966:	f04f 0340 	mov.w	r3, #64	; 0x40
   1396a:	f3ef 8411 	mrs	r4, BASEPRI
   1396e:	f383 8812 	msr	BASEPRI_MAX, r3
   13972:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   13976:	2000      	movs	r0, #0
   13978:	f7ff ffc8 	bl	1390c <callback_ctrl>

	if (err) {
   1397c:	b938      	cbnz	r0, 1398e <button_pressed+0x2a>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
   1397e:	4b11      	ldr	r3, [pc, #68]	; (139c4 <button_pressed+0x60>)
   13980:	781b      	ldrb	r3, [r3, #0]
   13982:	b1ab      	cbz	r3, 139b0 <button_pressed+0x4c>
	__asm__ volatile(
   13984:	f384 8811 	msr	BASEPRI, r4
   13988:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   1398c:	bd10      	pop	{r4, pc}
   1398e:	4b0e      	ldr	r3, [pc, #56]	; (139c8 <button_pressed+0x64>)
   13990:	4a0e      	ldr	r2, [pc, #56]	; (139cc <button_pressed+0x68>)
   13992:	1a9b      	subs	r3, r3, r2
   13994:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot disable callbacks");
   13996:	f04f 0100 	mov.w	r1, #0
   1399a:	2201      	movs	r2, #1
   1399c:	f362 0102 	bfi	r1, r2, #0, #3
   139a0:	f36f 01c5 	bfc	r1, #3, #3
   139a4:	f363 118f 	bfi	r1, r3, #6, #10
   139a8:	4809      	ldr	r0, [pc, #36]	; (139d0 <button_pressed+0x6c>)
   139aa:	f7fb fd0f 	bl	f3cc <log_0>
   139ae:	e7e6      	b.n	1397e <button_pressed+0x1a>
		state = STATE_SCANNING;
   139b0:	4b04      	ldr	r3, [pc, #16]	; (139c4 <button_pressed+0x60>)
   139b2:	2201      	movs	r2, #1
   139b4:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   139b6:	2221      	movs	r2, #33	; 0x21
   139b8:	2300      	movs	r3, #0
   139ba:	4806      	ldr	r0, [pc, #24]	; (139d4 <button_pressed+0x70>)
   139bc:	f002 f9f4 	bl	15da8 <k_work_reschedule>
		break;
   139c0:	e7e0      	b.n	13984 <button_pressed+0x20>
   139c2:	bf00      	nop
   139c4:	20002d90 	.word	0x20002d90
   139c8:	0001cc64 	.word	0x0001cc64
   139cc:	0001cc2c 	.word	0x0001cc2c
   139d0:	0001dcc4 	.word	0x0001dcc4
   139d4:	20001620 	.word	0x20001620

000139d8 <buttons_scan_fn>:
{
   139d8:	b510      	push	{r4, lr}
	button_scan = get_buttons();
   139da:	f7ff ff29 	bl	13830 <get_buttons>
   139de:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   139e0:	4b27      	ldr	r3, [pc, #156]	; (13a80 <buttons_scan_fn+0xa8>)
   139e2:	f3bf 8f5b 	dmb	ish
   139e6:	e853 2f00 	ldrex	r2, [r3]
   139ea:	e843 4100 	strex	r1, r4, [r3]
   139ee:	2900      	cmp	r1, #0
   139f0:	d1f9      	bne.n	139e6 <buttons_scan_fn+0xe>
   139f2:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   139f6:	4b23      	ldr	r3, [pc, #140]	; (13a84 <buttons_scan_fn+0xac>)
   139f8:	781b      	ldrb	r3, [r3, #0]
   139fa:	b943      	cbnz	r3, 13a0e <buttons_scan_fn+0x36>
		if (button_scan != last_button_scan) {
   139fc:	4b22      	ldr	r3, [pc, #136]	; (13a88 <buttons_scan_fn+0xb0>)
   139fe:	6819      	ldr	r1, [r3, #0]
   13a00:	42a1      	cmp	r1, r4
   13a02:	d007      	beq.n	13a14 <buttons_scan_fn+0x3c>
			button_handlers_call(button_scan, has_changed);
   13a04:	4061      	eors	r1, r4
   13a06:	4620      	mov	r0, r4
   13a08:	f7ff ff54 	bl	138b4 <button_handlers_call>
   13a0c:	e002      	b.n	13a14 <buttons_scan_fn+0x3c>
		initial_run = false;
   13a0e:	4b1d      	ldr	r3, [pc, #116]	; (13a84 <buttons_scan_fn+0xac>)
   13a10:	2200      	movs	r2, #0
   13a12:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
   13a14:	4b1c      	ldr	r3, [pc, #112]	; (13a88 <buttons_scan_fn+0xb0>)
   13a16:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
   13a18:	b994      	cbnz	r4, 13a40 <buttons_scan_fn+0x68>
	__asm__ volatile(
   13a1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   13a1e:	f3ef 8411 	mrs	r4, BASEPRI
   13a22:	f383 8812 	msr	BASEPRI_MAX, r3
   13a26:	f3bf 8f6f 	isb	sy
		switch (state) {
   13a2a:	4b18      	ldr	r3, [pc, #96]	; (13a8c <buttons_scan_fn+0xb4>)
   13a2c:	781b      	ldrb	r3, [r3, #0]
   13a2e:	2b01      	cmp	r3, #1
   13a30:	d00d      	beq.n	13a4e <buttons_scan_fn+0x76>
		int err = 0;
   13a32:	2000      	movs	r0, #0
	__asm__ volatile(
   13a34:	f384 8811 	msr	BASEPRI, r4
   13a38:	f3bf 8f6f 	isb	sy
		if (err) {
   13a3c:	b970      	cbnz	r0, 13a5c <buttons_scan_fn+0x84>
}
   13a3e:	bd10      	pop	{r4, pc}
		k_work_reschedule(&buttons_scan,
   13a40:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13a44:	2300      	movs	r3, #0
   13a46:	4812      	ldr	r0, [pc, #72]	; (13a90 <buttons_scan_fn+0xb8>)
   13a48:	f002 f9ae 	bl	15da8 <k_work_reschedule>
   13a4c:	e7f7      	b.n	13a3e <buttons_scan_fn+0x66>
			state = STATE_WAITING;
   13a4e:	4b0f      	ldr	r3, [pc, #60]	; (13a8c <buttons_scan_fn+0xb4>)
   13a50:	2200      	movs	r2, #0
   13a52:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
   13a54:	2001      	movs	r0, #1
   13a56:	f7ff ff59 	bl	1390c <callback_ctrl>
			break;
   13a5a:	e7eb      	b.n	13a34 <buttons_scan_fn+0x5c>
   13a5c:	4b0d      	ldr	r3, [pc, #52]	; (13a94 <buttons_scan_fn+0xbc>)
   13a5e:	4a0e      	ldr	r2, [pc, #56]	; (13a98 <buttons_scan_fn+0xc0>)
   13a60:	1a9b      	subs	r3, r3, r2
   13a62:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot enable callbacks");
   13a64:	f04f 0100 	mov.w	r1, #0
   13a68:	2201      	movs	r2, #1
   13a6a:	f362 0102 	bfi	r1, r2, #0, #3
   13a6e:	f36f 01c5 	bfc	r1, #3, #3
   13a72:	f363 118f 	bfi	r1, r3, #6, #10
   13a76:	4809      	ldr	r0, [pc, #36]	; (13a9c <buttons_scan_fn+0xc4>)
   13a78:	f7fb fca8 	bl	f3cc <log_0>
}
   13a7c:	e7df      	b.n	13a3e <buttons_scan_fn+0x66>
   13a7e:	bf00      	nop
   13a80:	200021b0 	.word	0x200021b0
   13a84:	2000052c 	.word	0x2000052c
   13a88:	20002198 	.word	0x20002198
   13a8c:	20002d90 	.word	0x20002d90
   13a90:	20001620 	.word	0x20001620
   13a94:	0001cc64 	.word	0x0001cc64
   13a98:	0001cc2c 	.word	0x0001cc2c
   13a9c:	0001dce0 	.word	0x0001dce0

00013aa0 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13aa0:	f3bf 8f5b 	dmb	ish
   13aa4:	4b06      	ldr	r3, [pc, #24]	; (13ac0 <dk_read_buttons+0x20>)
   13aa6:	681b      	ldr	r3, [r3, #0]
   13aa8:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   13aac:	b100      	cbz	r0, 13ab0 <dk_read_buttons+0x10>
		*button_state = current_state;
   13aae:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   13ab0:	b119      	cbz	r1, 13aba <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   13ab2:	4a04      	ldr	r2, [pc, #16]	; (13ac4 <dk_read_buttons+0x24>)
   13ab4:	6812      	ldr	r2, [r2, #0]
   13ab6:	405a      	eors	r2, r3
   13ab8:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   13aba:	4a02      	ldr	r2, [pc, #8]	; (13ac4 <dk_read_buttons+0x24>)
   13abc:	6013      	str	r3, [r2, #0]
}
   13abe:	4770      	bx	lr
   13ac0:	200021b0 	.word	0x200021b0
   13ac4:	2000219c 	.word	0x2000219c

00013ac8 <dk_buttons_init>:
{
   13ac8:	b570      	push	{r4, r5, r6, lr}
	button_handler_cb = button_handler;
   13aca:	4b60      	ldr	r3, [pc, #384]	; (13c4c <dk_buttons_init+0x184>)
   13acc:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   13ace:	4860      	ldr	r0, [pc, #384]	; (13c50 <dk_buttons_init+0x188>)
   13ad0:	f008 faa9 	bl	1c026 <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13ad4:	2400      	movs	r4, #0
   13ad6:	e013      	b.n	13b00 <dk_buttons_init+0x38>
   13ad8:	4b5e      	ldr	r3, [pc, #376]	; (13c54 <dk_buttons_init+0x18c>)
   13ada:	4a5f      	ldr	r2, [pc, #380]	; (13c58 <dk_buttons_init+0x190>)
   13adc:	1a9b      	subs	r3, r3, r2
   13ade:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot bind gpio device");
   13ae0:	f04f 0100 	mov.w	r1, #0
   13ae4:	2201      	movs	r2, #1
   13ae6:	f362 0102 	bfi	r1, r2, #0, #3
   13aea:	f36f 01c5 	bfc	r1, #3, #3
   13aee:	f363 118f 	bfi	r1, r3, #6, #10
   13af2:	485a      	ldr	r0, [pc, #360]	; (13c5c <dk_buttons_init+0x194>)
   13af4:	f7fb fc6a 	bl	f3cc <log_0>
			return -ENODEV;
   13af8:	f06f 0612 	mvn.w	r6, #18
   13afc:	e0a4      	b.n	13c48 <dk_buttons_init+0x180>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13afe:	3401      	adds	r4, #1
   13b00:	2c03      	cmp	r4, #3
   13b02:	d82e      	bhi.n	13b62 <dk_buttons_init+0x9a>
		button_devs[i] = device_get_binding(button_pins[i].port);
   13b04:	4b56      	ldr	r3, [pc, #344]	; (13c60 <dk_buttons_init+0x198>)
   13b06:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   13b0a:	f001 fb37 	bl	1517c <z_impl_device_get_binding>
   13b0e:	4b55      	ldr	r3, [pc, #340]	; (13c64 <dk_buttons_init+0x19c>)
   13b10:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if (!button_devs[i]) {
   13b14:	2800      	cmp	r0, #0
   13b16:	d0df      	beq.n	13ad8 <dk_buttons_init+0x10>
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   13b18:	4b51      	ldr	r3, [pc, #324]	; (13c60 <dk_buttons_init+0x198>)
   13b1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13b1e:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   13b20:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
   13b22:	6905      	ldr	r5, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   13b24:	2301      	movs	r3, #1
   13b26:	fa03 f201 	lsl.w	r2, r3, r1
   13b2a:	682b      	ldr	r3, [r5, #0]
   13b2c:	ea23 0302 	bic.w	r3, r3, r2
   13b30:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   13b32:	6833      	ldr	r3, [r6, #0]
   13b34:	f44f 7288 	mov.w	r2, #272	; 0x110
   13b38:	4798      	blx	r3
		if (err) {
   13b3a:	4606      	mov	r6, r0
   13b3c:	2800      	cmp	r0, #0
   13b3e:	d0de      	beq.n	13afe <dk_buttons_init+0x36>
   13b40:	4b44      	ldr	r3, [pc, #272]	; (13c54 <dk_buttons_init+0x18c>)
   13b42:	4a45      	ldr	r2, [pc, #276]	; (13c58 <dk_buttons_init+0x190>)
   13b44:	1a9b      	subs	r3, r3, r2
   13b46:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot configure button gpio");
   13b48:	f04f 0100 	mov.w	r1, #0
   13b4c:	2201      	movs	r2, #1
   13b4e:	f362 0102 	bfi	r1, r2, #0, #3
   13b52:	f36f 01c5 	bfc	r1, #3, #3
   13b56:	f363 118f 	bfi	r1, r3, #6, #10
   13b5a:	4843      	ldr	r0, [pc, #268]	; (13c68 <dk_buttons_init+0x1a0>)
   13b5c:	f7fb fc36 	bl	f3cc <log_0>
			return err;
   13b60:	e072      	b.n	13c48 <dk_buttons_init+0x180>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13b62:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
   13b64:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13b66:	2c03      	cmp	r4, #3
   13b68:	d828      	bhi.n	13bbc <dk_buttons_init+0xf4>
		err = gpio_pin_interrupt_configure(button_devs[i],
   13b6a:	4b3e      	ldr	r3, [pc, #248]	; (13c64 <dk_buttons_init+0x19c>)
   13b6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   13b70:	4b3b      	ldr	r3, [pc, #236]	; (13c60 <dk_buttons_init+0x198>)
   13b72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13b76:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   13b78:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   13b7a:	699e      	ldr	r6, [r3, #24]
   13b7c:	2300      	movs	r3, #0
   13b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   13b82:	47b0      	blx	r6
		if (err) {
   13b84:	4606      	mov	r6, r0
   13b86:	b940      	cbnz	r0, 13b9a <dk_buttons_init+0xd2>
		pin_mask |= BIT(button_pins[i].number);
   13b88:	4b35      	ldr	r3, [pc, #212]	; (13c60 <dk_buttons_init+0x198>)
   13b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13b8e:	791a      	ldrb	r2, [r3, #4]
   13b90:	2301      	movs	r3, #1
   13b92:	4093      	lsls	r3, r2
   13b94:	431d      	orrs	r5, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13b96:	3401      	adds	r4, #1
   13b98:	e7e5      	b.n	13b66 <dk_buttons_init+0x9e>
   13b9a:	4b2e      	ldr	r3, [pc, #184]	; (13c54 <dk_buttons_init+0x18c>)
   13b9c:	4a2e      	ldr	r2, [pc, #184]	; (13c58 <dk_buttons_init+0x190>)
   13b9e:	1a9b      	subs	r3, r3, r2
   13ba0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot disable callbacks()");
   13ba2:	f04f 0100 	mov.w	r1, #0
   13ba6:	2201      	movs	r2, #1
   13ba8:	f362 0102 	bfi	r1, r2, #0, #3
   13bac:	f36f 01c5 	bfc	r1, #3, #3
   13bb0:	f363 118f 	bfi	r1, r3, #6, #10
   13bb4:	482d      	ldr	r0, [pc, #180]	; (13c6c <dk_buttons_init+0x1a4>)
   13bb6:	f7fb fc09 	bl	f3cc <log_0>
			return err;
   13bba:	e045      	b.n	13c48 <dk_buttons_init+0x180>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   13bbc:	4b2c      	ldr	r3, [pc, #176]	; (13c70 <dk_buttons_init+0x1a8>)
   13bbe:	4a2d      	ldr	r2, [pc, #180]	; (13c74 <dk_buttons_init+0x1ac>)
   13bc0:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   13bc2:	609d      	str	r5, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13bc4:	2400      	movs	r4, #0
   13bc6:	2c03      	cmp	r4, #3
   13bc8:	d81f      	bhi.n	13c0a <dk_buttons_init+0x142>
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   13bca:	4b26      	ldr	r3, [pc, #152]	; (13c64 <dk_buttons_init+0x19c>)
   13bcc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   13bd0:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   13bd2:	69db      	ldr	r3, [r3, #28]
   13bd4:	b133      	cbz	r3, 13be4 <dk_buttons_init+0x11c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   13bd6:	2201      	movs	r2, #1
   13bd8:	4925      	ldr	r1, [pc, #148]	; (13c70 <dk_buttons_init+0x1a8>)
   13bda:	4798      	blx	r3
		if (err) {
   13bdc:	4606      	mov	r6, r0
   13bde:	b918      	cbnz	r0, 13be8 <dk_buttons_init+0x120>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   13be0:	3401      	adds	r4, #1
   13be2:	e7f0      	b.n	13bc6 <dk_buttons_init+0xfe>
		return -ENOTSUP;
   13be4:	f06f 0685 	mvn.w	r6, #133	; 0x85
   13be8:	4b1a      	ldr	r3, [pc, #104]	; (13c54 <dk_buttons_init+0x18c>)
   13bea:	4a1b      	ldr	r2, [pc, #108]	; (13c58 <dk_buttons_init+0x190>)
   13bec:	1a9b      	subs	r3, r3, r2
   13bee:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot add callback");
   13bf0:	f04f 0100 	mov.w	r1, #0
   13bf4:	2201      	movs	r2, #1
   13bf6:	f362 0102 	bfi	r1, r2, #0, #3
   13bfa:	f36f 01c5 	bfc	r1, #3, #3
   13bfe:	f363 118f 	bfi	r1, r3, #6, #10
   13c02:	481d      	ldr	r0, [pc, #116]	; (13c78 <dk_buttons_init+0x1b0>)
   13c04:	f7fb fbe2 	bl	f3cc <log_0>
			return err;
   13c08:	e01e      	b.n	13c48 <dk_buttons_init+0x180>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   13c0a:	4c1c      	ldr	r4, [pc, #112]	; (13c7c <dk_buttons_init+0x1b4>)
   13c0c:	491c      	ldr	r1, [pc, #112]	; (13c80 <dk_buttons_init+0x1b8>)
   13c0e:	4620      	mov	r0, r4
   13c10:	f008 fb2f 	bl	1c272 <k_work_init_delayable>
	state = STATE_SCANNING;
   13c14:	4b1b      	ldr	r3, [pc, #108]	; (13c84 <dk_buttons_init+0x1bc>)
   13c16:	2201      	movs	r2, #1
   13c18:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   13c1a:	2200      	movs	r2, #0
   13c1c:	2300      	movs	r3, #0
   13c1e:	4620      	mov	r0, r4
   13c20:	f002 f8ba 	bl	15d98 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   13c24:	2100      	movs	r1, #0
   13c26:	4608      	mov	r0, r1
   13c28:	f7ff ff3a 	bl	13aa0 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   13c2c:	f7ff fe00 	bl	13830 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13c30:	4b15      	ldr	r3, [pc, #84]	; (13c88 <dk_buttons_init+0x1c0>)
   13c32:	f3bf 8f5b 	dmb	ish
   13c36:	e853 2f00 	ldrex	r2, [r3]
   13c3a:	e843 0100 	strex	r1, r0, [r3]
   13c3e:	2900      	cmp	r1, #0
   13c40:	d1f9      	bne.n	13c36 <dk_buttons_init+0x16e>
   13c42:	f3bf 8f5b 	dmb	ish
	return 0;
   13c46:	2600      	movs	r6, #0
}
   13c48:	4630      	mov	r0, r6
   13c4a:	bd70      	pop	{r4, r5, r6, pc}
   13c4c:	2000216c 	.word	0x2000216c
   13c50:	20002170 	.word	0x20002170
   13c54:	0001cc64 	.word	0x0001cc64
   13c58:	0001cc2c 	.word	0x0001cc2c
   13c5c:	0001dcf8 	.word	0x0001dcf8
   13c60:	0001dda8 	.word	0x0001dda8
   13c64:	2000215c 	.word	0x2000215c
   13c68:	0001dd10 	.word	0x0001dd10
   13c6c:	0001dd30 	.word	0x0001dd30
   13c70:	2000218c 	.word	0x2000218c
   13c74:	00013965 	.word	0x00013965
   13c78:	0001dd4c 	.word	0x0001dd4c
   13c7c:	20001620 	.word	0x20001620
   13c80:	000139d9 	.word	0x000139d9
   13c84:	20002d90 	.word	0x20002d90
   13c88:	200021b0 	.word	0x200021b0

00013c8c <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
   13c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   13c8e:	f030 030f 	bics.w	r3, r0, #15
   13c92:	d140      	bne.n	13d16 <dk_set_leds_state+0x8a>
   13c94:	4606      	mov	r6, r0
   13c96:	460f      	mov	r7, r1
   13c98:	f031 040f 	bics.w	r4, r1, #15
   13c9c:	d00a      	beq.n	13cb4 <dk_set_leds_state+0x28>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
   13c9e:	f06f 0515 	mvn.w	r5, #21
   13ca2:	e036      	b.n	13d12 <dk_set_leds_state+0x86>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   13ca4:	2101      	movs	r1, #1
   13ca6:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
   13ca8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   13caa:	691b      	ldr	r3, [r3, #16]
   13cac:	4798      	blx	r3
   13cae:	4605      	mov	r5, r0
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
						   led_pins[i].number, val);
			if (err) {
   13cb0:	b9ed      	cbnz	r5, 13cee <dk_set_leds_state+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   13cb2:	3401      	adds	r4, #1
   13cb4:	2c03      	cmp	r4, #3
   13cb6:	d82b      	bhi.n	13d10 <dk_set_leds_state+0x84>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   13cb8:	fa26 f304 	lsr.w	r3, r6, r4
   13cbc:	f013 0f01 	tst.w	r3, #1
   13cc0:	d104      	bne.n	13ccc <dk_set_leds_state+0x40>
   13cc2:	fa27 f204 	lsr.w	r2, r7, r4
   13cc6:	f012 0f01 	tst.w	r2, #1
   13cca:	d0f2      	beq.n	13cb2 <dk_set_leds_state+0x26>
			int err = gpio_pin_set_raw(led_devs[i],
   13ccc:	4a13      	ldr	r2, [pc, #76]	; (13d1c <dk_set_leds_state+0x90>)
   13cce:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   13cd2:	4a13      	ldr	r2, [pc, #76]	; (13d20 <dk_set_leds_state+0x94>)
   13cd4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   13cd8:	7912      	ldrb	r2, [r2, #4]
	if (value != 0)	{
   13cda:	f013 0f01 	tst.w	r3, #1
   13cde:	d1e1      	bne.n	13ca4 <dk_set_leds_state+0x18>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   13ce0:	2101      	movs	r1, #1
   13ce2:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
   13ce4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   13ce6:	68db      	ldr	r3, [r3, #12]
   13ce8:	4798      	blx	r3
   13cea:	4605      	mov	r5, r0
   13cec:	e7e0      	b.n	13cb0 <dk_set_leds_state+0x24>
   13cee:	4b0d      	ldr	r3, [pc, #52]	; (13d24 <dk_set_leds_state+0x98>)
   13cf0:	4a0d      	ldr	r2, [pc, #52]	; (13d28 <dk_set_leds_state+0x9c>)
   13cf2:	1a9b      	subs	r3, r3, r2
   13cf4:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Cannot write LED gpio");
   13cf6:	f04f 0100 	mov.w	r1, #0
   13cfa:	2201      	movs	r2, #1
   13cfc:	f362 0102 	bfi	r1, r2, #0, #3
   13d00:	f36f 01c5 	bfc	r1, #3, #3
   13d04:	f363 118f 	bfi	r1, r3, #6, #10
   13d08:	4808      	ldr	r0, [pc, #32]	; (13d2c <dk_set_leds_state+0xa0>)
   13d0a:	f7fb fb5f 	bl	f3cc <log_0>
				return err;
   13d0e:	e000      	b.n	13d12 <dk_set_leds_state+0x86>
			}
		}
	}

	return 0;
   13d10:	2500      	movs	r5, #0
}
   13d12:	4628      	mov	r0, r5
   13d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   13d16:	f06f 0515 	mvn.w	r5, #21
   13d1a:	e7fa      	b.n	13d12 <dk_set_leds_state+0x86>
   13d1c:	200021a0 	.word	0x200021a0
   13d20:	0001ddc8 	.word	0x0001ddc8
   13d24:	0001cc64 	.word	0x0001cc64
   13d28:	0001cc2c 	.word	0x0001cc2c
   13d2c:	0001dd60 	.word	0x0001dd60

00013d30 <dk_leds_init>:
{
   13d30:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   13d32:	2400      	movs	r4, #0
   13d34:	e013      	b.n	13d5e <dk_leds_init+0x2e>
   13d36:	4b26      	ldr	r3, [pc, #152]	; (13dd0 <dk_leds_init+0xa0>)
   13d38:	4a26      	ldr	r2, [pc, #152]	; (13dd4 <dk_leds_init+0xa4>)
   13d3a:	1a9b      	subs	r3, r3, r2
   13d3c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot bind gpio device");
   13d3e:	f04f 0100 	mov.w	r1, #0
   13d42:	2201      	movs	r2, #1
   13d44:	f362 0102 	bfi	r1, r2, #0, #3
   13d48:	f36f 01c5 	bfc	r1, #3, #3
   13d4c:	f363 118f 	bfi	r1, r3, #6, #10
   13d50:	4821      	ldr	r0, [pc, #132]	; (13dd8 <dk_leds_init+0xa8>)
   13d52:	f7fb fb3b 	bl	f3cc <log_0>
			return -ENODEV;
   13d56:	f06f 0512 	mvn.w	r5, #18
   13d5a:	e036      	b.n	13dca <dk_leds_init+0x9a>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   13d5c:	3401      	adds	r4, #1
   13d5e:	2c03      	cmp	r4, #3
   13d60:	d82e      	bhi.n	13dc0 <dk_leds_init+0x90>
		led_devs[i] = device_get_binding(led_pins[i].port);
   13d62:	4b1e      	ldr	r3, [pc, #120]	; (13ddc <dk_leds_init+0xac>)
   13d64:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   13d68:	f001 fa08 	bl	1517c <z_impl_device_get_binding>
   13d6c:	4b1c      	ldr	r3, [pc, #112]	; (13de0 <dk_leds_init+0xb0>)
   13d6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		if (!led_devs[i]) {
   13d72:	2800      	cmp	r0, #0
   13d74:	d0df      	beq.n	13d36 <dk_leds_init+0x6>
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   13d76:	4b19      	ldr	r3, [pc, #100]	; (13ddc <dk_leds_init+0xac>)
   13d78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13d7c:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
   13d7e:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
   13d80:	6905      	ldr	r5, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   13d82:	2301      	movs	r3, #1
   13d84:	fa03 f201 	lsl.w	r2, r3, r1
   13d88:	682b      	ldr	r3, [r5, #0]
   13d8a:	ea23 0302 	bic.w	r3, r3, r2
   13d8e:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   13d90:	6833      	ldr	r3, [r6, #0]
   13d92:	f44f 7200 	mov.w	r2, #512	; 0x200
   13d96:	4798      	blx	r3
		if (err) {
   13d98:	4605      	mov	r5, r0
   13d9a:	2800      	cmp	r0, #0
   13d9c:	d0de      	beq.n	13d5c <dk_leds_init+0x2c>
   13d9e:	4b0c      	ldr	r3, [pc, #48]	; (13dd0 <dk_leds_init+0xa0>)
   13da0:	4a0c      	ldr	r2, [pc, #48]	; (13dd4 <dk_leds_init+0xa4>)
   13da2:	1a9b      	subs	r3, r3, r2
   13da4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot configure LED gpio");
   13da6:	f04f 0100 	mov.w	r1, #0
   13daa:	2201      	movs	r2, #1
   13dac:	f362 0102 	bfi	r1, r2, #0, #3
   13db0:	f36f 01c5 	bfc	r1, #3, #3
   13db4:	f363 118f 	bfi	r1, r3, #6, #10
   13db8:	480a      	ldr	r0, [pc, #40]	; (13de4 <dk_leds_init+0xb4>)
   13dba:	f7fb fb07 	bl	f3cc <log_0>
			return err;
   13dbe:	e004      	b.n	13dca <dk_leds_init+0x9a>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   13dc0:	210f      	movs	r1, #15
   13dc2:	2000      	movs	r0, #0
   13dc4:	f7ff ff62 	bl	13c8c <dk_set_leds_state>
   13dc8:	4605      	mov	r5, r0
}
   13dca:	4628      	mov	r0, r5
   13dcc:	bd70      	pop	{r4, r5, r6, pc}
   13dce:	bf00      	nop
   13dd0:	0001cc64 	.word	0x0001cc64
   13dd4:	0001cc2c 	.word	0x0001cc2c
   13dd8:	0001dcf8 	.word	0x0001dcf8
   13ddc:	0001ddc8 	.word	0x0001ddc8
   13de0:	200021a0 	.word	0x200021a0
   13de4:	0001dd78 	.word	0x0001dd78

00013de8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   13de8:	b508      	push	{r3, lr}
   13dea:	4602      	mov	r2, r0
   13dec:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   13dee:	4802      	ldr	r0, [pc, #8]	; (13df8 <multithreading_lock_acquire+0x10>)
   13df0:	f001 fcf4 	bl	157dc <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   13df4:	bd08      	pop	{r3, pc}
   13df6:	bf00      	nop
   13df8:	20000560 	.word	0x20000560

00013dfc <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   13dfc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   13dfe:	4802      	ldr	r0, [pc, #8]	; (13e08 <multithreading_lock_release+0xc>)
   13e00:	f001 fd76 	bl	158f0 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   13e04:	bd08      	pop	{r3, pc}
   13e06:	bf00      	nop
   13e08:	20000560 	.word	0x20000560

00013e0c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   13e0c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   13e0e:	f7fb fb0d 	bl	f42c <z_impl_log_panic>
   13e12:	4b09      	ldr	r3, [pc, #36]	; (13e38 <k_sys_fatal_error_handler+0x2c>)
   13e14:	4a09      	ldr	r2, [pc, #36]	; (13e3c <k_sys_fatal_error_handler+0x30>)
   13e16:	1a9b      	subs	r3, r3, r2
   13e18:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   13e1a:	f04f 0100 	mov.w	r1, #0
   13e1e:	2201      	movs	r2, #1
   13e20:	f362 0102 	bfi	r1, r2, #0, #3
   13e24:	f36f 01c5 	bfc	r1, #3, #3
   13e28:	f363 118f 	bfi	r1, r3, #6, #10
   13e2c:	4804      	ldr	r0, [pc, #16]	; (13e40 <k_sys_fatal_error_handler+0x34>)
   13e2e:	f7fb facd 	bl	f3cc <log_0>
		sys_arch_reboot(0);
   13e32:	2000      	movs	r0, #0
   13e34:	f7fc ff80 	bl	10d38 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   13e38:	0001cc6c 	.word	0x0001cc6c
   13e3c:	0001cc2c 	.word	0x0001cc2c
   13e40:	0001dde8 	.word	0x0001dde8

00013e44 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   13e44:	b510      	push	{r4, lr}
   13e46:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   13e48:	4a03      	ldr	r2, [pc, #12]	; (13e58 <rand_prio_low_vector_get_blocking+0x14>)
   13e4a:	6810      	ldr	r0, [r2, #0]
   13e4c:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   13e4e:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   13e50:	680c      	ldr	r4, [r1, #0]
   13e52:	4619      	mov	r1, r3
   13e54:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   13e56:	bd10      	pop	{r4, pc}
   13e58:	200021b4 	.word	0x200021b4

00013e5c <sdc_assertion_handler>:
{
   13e5c:	b538      	push	{r3, r4, r5, lr}
   13e5e:	460d      	mov	r5, r1
   13e60:	4b0d      	ldr	r3, [pc, #52]	; (13e98 <sdc_assertion_handler+0x3c>)
   13e62:	4a0e      	ldr	r2, [pc, #56]	; (13e9c <sdc_assertion_handler+0x40>)
   13e64:	1a9b      	subs	r3, r3, r2
   13e66:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   13e68:	f04f 0400 	mov.w	r4, #0
   13e6c:	2201      	movs	r2, #1
   13e6e:	f362 0402 	bfi	r4, r2, #0, #3
   13e72:	f36f 04c5 	bfc	r4, #3, #3
   13e76:	f363 148f 	bfi	r4, r3, #6, #10
   13e7a:	f7fb f879 	bl	ef70 <z_log_strdup>
   13e7e:	4601      	mov	r1, r0
   13e80:	4623      	mov	r3, r4
   13e82:	462a      	mov	r2, r5
   13e84:	4806      	ldr	r0, [pc, #24]	; (13ea0 <sdc_assertion_handler+0x44>)
   13e86:	f7fb fa21 	bl	f2cc <log_2>
	k_oops();
   13e8a:	4040      	eors	r0, r0
   13e8c:	f380 8811 	msr	BASEPRI, r0
   13e90:	f04f 0003 	mov.w	r0, #3
   13e94:	df02      	svc	2
}
   13e96:	bd38      	pop	{r3, r4, r5, pc}
   13e98:	0001ccb4 	.word	0x0001ccb4
   13e9c:	0001cc2c 	.word	0x0001cc2c
   13ea0:	0001de08 	.word	0x0001de08

00013ea4 <host_signal>:
{
   13ea4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   13ea6:	4802      	ldr	r0, [pc, #8]	; (13eb0 <host_signal+0xc>)
   13ea8:	f001 fda2 	bl	159f0 <z_impl_k_sem_give>
}
   13eac:	bd08      	pop	{r3, pc}
   13eae:	bf00      	nop
   13eb0:	200005c8 	.word	0x200005c8

00013eb4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   13eb4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   13eb6:	4803      	ldr	r0, [pc, #12]	; (13ec4 <hci_driver_init+0x10>)
   13eb8:	f7fd fe80 	bl	11bbc <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   13ebc:	4802      	ldr	r0, [pc, #8]	; (13ec8 <hci_driver_init+0x14>)
   13ebe:	f7f0 fb09 	bl	44d4 <sdc_init>
	return err;
}
   13ec2:	bd08      	pop	{r3, pc}
   13ec4:	0001df0c 	.word	0x0001df0c
   13ec8:	00013e5d 	.word	0x00013e5d

00013ecc <cmd_handle>:
{
   13ecc:	b538      	push	{r3, r4, r5, lr}
   13ece:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   13ed0:	f04f 30ff 	mov.w	r0, #4294967295
   13ed4:	f04f 31ff 	mov.w	r1, #4294967295
   13ed8:	f7ff ff86 	bl	13de8 <multithreading_lock_acquire>
	if (!errcode) {
   13edc:	4604      	mov	r4, r0
   13ede:	b110      	cbz	r0, 13ee6 <cmd_handle+0x1a>
	if (errcode) {
   13ee0:	b144      	cbz	r4, 13ef4 <cmd_handle+0x28>
}
   13ee2:	4620      	mov	r0, r4
   13ee4:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   13ee6:	68a8      	ldr	r0, [r5, #8]
   13ee8:	f000 f990 	bl	1420c <hci_internal_cmd_put>
   13eec:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   13eee:	f7ff ff85 	bl	13dfc <multithreading_lock_release>
   13ef2:	e7f5      	b.n	13ee0 <cmd_handle+0x14>
   13ef4:	4801      	ldr	r0, [pc, #4]	; (13efc <cmd_handle+0x30>)
   13ef6:	f001 fd7b 	bl	159f0 <z_impl_k_sem_give>
	return 0;
   13efa:	e7f2      	b.n	13ee2 <cmd_handle+0x16>
   13efc:	200005c8 	.word	0x200005c8

00013f00 <rand_prio_high_vector_get>:
{
   13f00:	b538      	push	{r3, r4, r5, lr}
   13f02:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   13f04:	4b07      	ldr	r3, [pc, #28]	; (13f24 <rand_prio_high_vector_get+0x24>)
   13f06:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   13f08:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   13f0a:	685d      	ldr	r5, [r3, #4]
   13f0c:	b13d      	cbz	r5, 13f1e <rand_prio_high_vector_get+0x1e>
   13f0e:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   13f10:	2300      	movs	r3, #0
   13f12:	4621      	mov	r1, r4
   13f14:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   13f16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   13f1a:	b2c0      	uxtb	r0, r0
   13f1c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   13f1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13f22:	e7f8      	b.n	13f16 <rand_prio_high_vector_get+0x16>
   13f24:	200021b4 	.word	0x200021b4

00013f28 <rand_prio_low_vector_get>:
{
   13f28:	b538      	push	{r3, r4, r5, lr}
   13f2a:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   13f2c:	4b07      	ldr	r3, [pc, #28]	; (13f4c <rand_prio_low_vector_get+0x24>)
   13f2e:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   13f30:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   13f32:	685d      	ldr	r5, [r3, #4]
   13f34:	b13d      	cbz	r5, 13f46 <rand_prio_low_vector_get+0x1e>
   13f36:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   13f38:	2300      	movs	r3, #0
   13f3a:	4621      	mov	r1, r4
   13f3c:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   13f3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   13f42:	b2c0      	uxtb	r0, r0
   13f44:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   13f46:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13f4a:	e7f8      	b.n	13f3e <rand_prio_low_vector_get+0x16>
   13f4c:	200021b4 	.word	0x200021b4

00013f50 <event_packet_process>:
{
   13f50:	b570      	push	{r4, r5, r6, lr}
   13f52:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   13f54:	f007 fc0c 	bl	1b770 <event_packet_is_discardable>
   13f58:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   13f5a:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   13f5c:	461d      	mov	r5, r3
   13f5e:	b183      	cbz	r3, 13f82 <event_packet_process+0x32>
   13f60:	2200      	movs	r2, #0
   13f62:	2300      	movs	r3, #0
   13f64:	4629      	mov	r1, r5
   13f66:	f7fc ff5b 	bl	10e20 <bt_buf_get_evt>
	if (!evt_buf) {
   13f6a:	4606      	mov	r6, r0
   13f6c:	b170      	cbz	r0, 13f8c <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   13f6e:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13f70:	3202      	adds	r2, #2
   13f72:	4621      	mov	r1, r4
   13f74:	3008      	adds	r0, #8
   13f76:	f007 f81e 	bl	1afb6 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   13f7a:	4630      	mov	r0, r6
   13f7c:	f7fd fdd8 	bl	11b30 <bt_recv>
}
   13f80:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   13f82:	f04f 32ff 	mov.w	r2, #4294967295
   13f86:	f04f 33ff 	mov.w	r3, #4294967295
   13f8a:	e7eb      	b.n	13f64 <event_packet_process+0x14>
		if (discardable) {
   13f8c:	2d00      	cmp	r5, #0
   13f8e:	d1f7      	bne.n	13f80 <event_packet_process+0x30>
   13f90:	4b08      	ldr	r3, [pc, #32]	; (13fb4 <event_packet_process+0x64>)
   13f92:	4a09      	ldr	r2, [pc, #36]	; (13fb8 <event_packet_process+0x68>)
   13f94:	1a9b      	subs	r3, r3, r2
   13f96:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   13f98:	f04f 0100 	mov.w	r1, #0
   13f9c:	2201      	movs	r2, #1
   13f9e:	f362 0102 	bfi	r1, r2, #0, #3
   13fa2:	f36f 01c5 	bfc	r1, #3, #3
   13fa6:	f363 118f 	bfi	r1, r3, #6, #10
   13faa:	4804      	ldr	r0, [pc, #16]	; (13fbc <event_packet_process+0x6c>)
   13fac:	f7fb fa0e 	bl	f3cc <log_0>
		return;
   13fb0:	e7e6      	b.n	13f80 <event_packet_process+0x30>
   13fb2:	bf00      	nop
   13fb4:	0001ccb4 	.word	0x0001ccb4
   13fb8:	0001cc2c 	.word	0x0001cc2c
   13fbc:	0001de30 	.word	0x0001de30

00013fc0 <recv_thread>:
{
   13fc0:	b510      	push	{r4, lr}
	bool received_evt = false;
   13fc2:	2400      	movs	r4, #0
   13fc4:	e005      	b.n	13fd2 <recv_thread+0x12>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   13fc6:	4808      	ldr	r0, [pc, #32]	; (13fe8 <recv_thread+0x28>)
   13fc8:	f007 fbfd 	bl	1b7c6 <fetch_and_process_hci_evt>
   13fcc:	4604      	mov	r4, r0
	z_impl_k_yield();
   13fce:	f002 f9ef 	bl	163b0 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   13fd2:	2c00      	cmp	r4, #0
   13fd4:	d1f7      	bne.n	13fc6 <recv_thread+0x6>
	return z_impl_k_sem_take(sem, timeout);
   13fd6:	f04f 32ff 	mov.w	r2, #4294967295
   13fda:	f04f 33ff 	mov.w	r3, #4294967295
   13fde:	4803      	ldr	r0, [pc, #12]	; (13fec <recv_thread+0x2c>)
   13fe0:	f001 fd2e 	bl	15a40 <z_impl_k_sem_take>
   13fe4:	e7ef      	b.n	13fc6 <recv_thread+0x6>
   13fe6:	bf00      	nop
   13fe8:	200021b8 	.word	0x200021b8
   13fec:	200005c8 	.word	0x200005c8

00013ff0 <configure_memory_usage>:
{
   13ff0:	b500      	push	{lr}
   13ff2:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   13ff4:	2000      	movs	r0, #0
   13ff6:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   13ffa:	aa01      	add	r2, sp, #4
   13ffc:	2101      	movs	r1, #1
   13ffe:	f7f0 f9e3 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   14002:	2800      	cmp	r0, #0
   14004:	db3a      	blt.n	1407c <configure_memory_usage+0x8c>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   14006:	2000      	movs	r0, #0
   14008:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1400c:	aa01      	add	r2, sp, #4
   1400e:	2102      	movs	r1, #2
   14010:	f7f0 f9da 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   14014:	2800      	cmp	r0, #0
   14016:	db31      	blt.n	1407c <configure_memory_usage+0x8c>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   14018:	231b      	movs	r3, #27
   1401a:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1401e:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   14022:	2302      	movs	r3, #2
   14024:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   14028:	2103      	movs	r1, #3
   1402a:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1402e:	aa01      	add	r2, sp, #4
   14030:	2000      	movs	r0, #0
   14032:	f7f0 f9c9 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   14036:	2800      	cmp	r0, #0
   14038:	db20      	blt.n	1407c <configure_memory_usage+0x8c>
	cfg.event_length.event_length_us =
   1403a:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1403e:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14040:	aa01      	add	r2, sp, #4
   14042:	2104      	movs	r1, #4
   14044:	2000      	movs	r0, #0
   14046:	f7f0 f9bf 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   1404a:	2800      	cmp	r0, #0
   1404c:	db16      	blt.n	1407c <configure_memory_usage+0x8c>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1404e:	2000      	movs	r0, #0
   14050:	f88d 0004 	strb.w	r0, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14054:	aa01      	add	r2, sp, #4
   14056:	2105      	movs	r1, #5
   14058:	f7f0 f9b6 	bl	43c8 <sdc_cfg_set>
	if (required_memory < 0) {
   1405c:	2800      	cmp	r0, #0
   1405e:	db0d      	blt.n	1407c <configure_memory_usage+0x8c>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   14060:	2303      	movs	r3, #3
   14062:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   14066:	aa01      	add	r2, sp, #4
   14068:	2106      	movs	r1, #6
   1406a:	2000      	movs	r0, #0
   1406c:	f7f0 f9ac 	bl	43c8 <sdc_cfg_set>
		if (required_memory < 0) {
   14070:	2800      	cmp	r0, #0
   14072:	db03      	blt.n	1407c <configure_memory_usage+0x8c>
	if (required_memory > sizeof(sdc_mempool)) {
   14074:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
   14078:	d803      	bhi.n	14082 <configure_memory_usage+0x92>
	return 0;
   1407a:	2000      	movs	r0, #0
}
   1407c:	b003      	add	sp, #12
   1407e:	f85d fb04 	ldr.w	pc, [sp], #4
   14082:	4a0e      	ldr	r2, [pc, #56]	; (140bc <configure_memory_usage+0xcc>)
   14084:	4b0e      	ldr	r3, [pc, #56]	; (140c0 <configure_memory_usage+0xd0>)
   14086:	1ad2      	subs	r2, r2, r3
   14088:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   1408a:	f04f 0300 	mov.w	r3, #0
   1408e:	2101      	movs	r1, #1
   14090:	f361 0302 	bfi	r3, r1, #0, #3
   14094:	f36f 03c5 	bfc	r3, #3, #3
   14098:	f362 138f 	bfi	r3, r2, #6, #10
   1409c:	4602      	mov	r2, r0
   1409e:	f44f 7190 	mov.w	r1, #288	; 0x120
   140a2:	4808      	ldr	r0, [pc, #32]	; (140c4 <configure_memory_usage+0xd4>)
   140a4:	f7fb f912 	bl	f2cc <log_2>
		k_panic();
   140a8:	4040      	eors	r0, r0
   140aa:	f380 8811 	msr	BASEPRI, r0
   140ae:	f04f 0004 	mov.w	r0, #4
   140b2:	df02      	svc	2
		return -ENOMEM;
   140b4:	f06f 000b 	mvn.w	r0, #11
   140b8:	e7e0      	b.n	1407c <configure_memory_usage+0x8c>
   140ba:	bf00      	nop
   140bc:	0001ccb4 	.word	0x0001ccb4
   140c0:	0001cc2c 	.word	0x0001cc2c
   140c4:	0001de4c 	.word	0x0001de4c

000140c8 <hci_driver_open>:
{
   140c8:	b530      	push	{r4, r5, lr}
   140ca:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   140cc:	4d41      	ldr	r5, [pc, #260]	; (141d4 <hci_driver_open+0x10c>)
   140ce:	2200      	movs	r2, #0
   140d0:	2300      	movs	r3, #0
   140d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   140d6:	2400      	movs	r4, #0
   140d8:	9404      	str	r4, [sp, #16]
   140da:	f06f 0309 	mvn.w	r3, #9
   140de:	9303      	str	r3, [sp, #12]
   140e0:	9402      	str	r4, [sp, #8]
   140e2:	9401      	str	r4, [sp, #4]
   140e4:	9400      	str	r4, [sp, #0]
   140e6:	4b3c      	ldr	r3, [pc, #240]	; (141d8 <hci_driver_open+0x110>)
   140e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   140ec:	493b      	ldr	r1, [pc, #236]	; (141dc <hci_driver_open+0x114>)
   140ee:	4628      	mov	r0, r5
   140f0:	f007 ff5b 	bl	1bfaa <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   140f4:	493a      	ldr	r1, [pc, #232]	; (141e0 <hci_driver_open+0x118>)
   140f6:	4628      	mov	r0, r5
   140f8:	f001 fa82 	bl	15600 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   140fc:	a80b      	add	r0, sp, #44	; 0x2c
   140fe:	f7f0 f955 	bl	43ac <sdc_build_revision_get>
   14102:	4a38      	ldr	r2, [pc, #224]	; (141e4 <hci_driver_open+0x11c>)
   14104:	4b38      	ldr	r3, [pc, #224]	; (141e8 <hci_driver_open+0x120>)
   14106:	1ad2      	subs	r2, r2, r3
   14108:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1410a:	f04f 0300 	mov.w	r3, #0
   1410e:	2103      	movs	r1, #3
   14110:	f361 0302 	bfi	r3, r1, #0, #3
   14114:	f364 03c5 	bfi	r3, r4, #3, #3
   14118:	f362 138f 	bfi	r3, r2, #6, #10
   1411c:	2214      	movs	r2, #20
   1411e:	a90b      	add	r1, sp, #44	; 0x2c
   14120:	4832      	ldr	r0, [pc, #200]	; (141ec <hci_driver_open+0x124>)
   14122:	f7fb f931 	bl	f388 <log_hexdump>
	err = configure_supported_features();
   14126:	f007 fb67 	bl	1b7f8 <configure_supported_features>
	if (err) {
   1412a:	4604      	mov	r4, r0
   1412c:	b110      	cbz	r0, 14134 <hci_driver_open+0x6c>
}
   1412e:	4620      	mov	r0, r4
   14130:	b011      	add	sp, #68	; 0x44
   14132:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   14134:	f7ff ff5c 	bl	13ff0 <configure_memory_usage>
	if (err) {
   14138:	4604      	mov	r4, r0
   1413a:	2800      	cmp	r0, #0
   1413c:	d1f7      	bne.n	1412e <hci_driver_open+0x66>
   1413e:	482c      	ldr	r0, [pc, #176]	; (141f0 <hci_driver_open+0x128>)
   14140:	f001 f81c 	bl	1517c <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   14144:	4b2b      	ldr	r3, [pc, #172]	; (141f4 <hci_driver_open+0x12c>)
   14146:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   14148:	b1a8      	cbz	r0, 14176 <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   1414a:	4a2b      	ldr	r2, [pc, #172]	; (141f8 <hci_driver_open+0x130>)
   1414c:	ab08      	add	r3, sp, #32
   1414e:	ca07      	ldmia	r2, {r0, r1, r2}
   14150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   14154:	4618      	mov	r0, r3
   14156:	f7f0 fa91 	bl	467c <sdc_rand_source_register>
	if (err) {
   1415a:	4604      	mov	r4, r0
   1415c:	b9f0      	cbnz	r0, 1419c <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1415e:	f04f 30ff 	mov.w	r0, #4294967295
   14162:	f04f 31ff 	mov.w	r1, #4294967295
   14166:	f7ff fe3f 	bl	13de8 <multithreading_lock_acquire>
	if (!err) {
   1416a:	4605      	mov	r5, r0
   1416c:	b350      	cbz	r0, 141c4 <hci_driver_open+0xfc>
	if (err < 0) {
   1416e:	2d00      	cmp	r5, #0
   14170:	dadd      	bge.n	1412e <hci_driver_open+0x66>
		return err;
   14172:	462c      	mov	r4, r5
   14174:	e7db      	b.n	1412e <hci_driver_open+0x66>
   14176:	4b1b      	ldr	r3, [pc, #108]	; (141e4 <hci_driver_open+0x11c>)
   14178:	4a1b      	ldr	r2, [pc, #108]	; (141e8 <hci_driver_open+0x120>)
   1417a:	1a9b      	subs	r3, r3, r2
   1417c:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   1417e:	f04f 0100 	mov.w	r1, #0
   14182:	2201      	movs	r2, #1
   14184:	f362 0102 	bfi	r1, r2, #0, #3
   14188:	f36f 01c5 	bfc	r1, #3, #3
   1418c:	f363 118f 	bfi	r1, r3, #6, #10
   14190:	481a      	ldr	r0, [pc, #104]	; (141fc <hci_driver_open+0x134>)
   14192:	f7fb f91b 	bl	f3cc <log_0>
		return -ENODEV;
   14196:	f06f 0412 	mvn.w	r4, #18
   1419a:	e7c8      	b.n	1412e <hci_driver_open+0x66>
   1419c:	4b11      	ldr	r3, [pc, #68]	; (141e4 <hci_driver_open+0x11c>)
   1419e:	4a12      	ldr	r2, [pc, #72]	; (141e8 <hci_driver_open+0x120>)
   141a0:	1a9b      	subs	r3, r3, r2
   141a2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   141a4:	f04f 0200 	mov.w	r2, #0
   141a8:	2101      	movs	r1, #1
   141aa:	f361 0202 	bfi	r2, r1, #0, #3
   141ae:	f36f 02c5 	bfc	r2, #3, #3
   141b2:	f363 128f 	bfi	r2, r3, #6, #10
   141b6:	4601      	mov	r1, r0
   141b8:	4811      	ldr	r0, [pc, #68]	; (14200 <hci_driver_open+0x138>)
   141ba:	f7fb f851 	bl	f260 <log_1>
		return -EINVAL;
   141be:	f06f 0415 	mvn.w	r4, #21
   141c2:	e7b4      	b.n	1412e <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   141c4:	490f      	ldr	r1, [pc, #60]	; (14204 <hci_driver_open+0x13c>)
   141c6:	4810      	ldr	r0, [pc, #64]	; (14208 <hci_driver_open+0x140>)
   141c8:	f7f0 f95c 	bl	4484 <sdc_enable>
   141cc:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   141ce:	f7ff fe15 	bl	13dfc <multithreading_lock_release>
   141d2:	e7cc      	b.n	1416e <hci_driver_open+0xa6>
   141d4:	20001650 	.word	0x20001650
   141d8:	00013fc1 	.word	0x00013fc1
   141dc:	20003cc0 	.word	0x20003cc0
   141e0:	0001de70 	.word	0x0001de70
   141e4:	0001ccb4 	.word	0x0001ccb4
   141e8:	0001cc2c 	.word	0x0001cc2c
   141ec:	0001de78 	.word	0x0001de78
   141f0:	0001dc8c 	.word	0x0001dc8c
   141f4:	200021b4 	.word	0x200021b4
   141f8:	0001cd58 	.word	0x0001cd58
   141fc:	0001dea0 	.word	0x0001dea0
   14200:	0001dec0 	.word	0x0001dec0
   14204:	20002200 	.word	0x20002200
   14208:	00013ea5 	.word	0x00013ea5

0001420c <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1420c:	4b0b      	ldr	r3, [pc, #44]	; (1423c <hci_internal_cmd_put+0x30>)
   1420e:	781b      	ldrb	r3, [r3, #0]
   14210:	b96b      	cbnz	r3, 1422e <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   14212:	7883      	ldrb	r3, [r0, #2]
   14214:	3303      	adds	r3, #3
   14216:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1421a:	dc0b      	bgt.n	14234 <hci_internal_cmd_put+0x28>
{
   1421c:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1421e:	4c07      	ldr	r4, [pc, #28]	; (1423c <hci_internal_cmd_put+0x30>)
   14220:	1c61      	adds	r1, r4, #1
   14222:	f007 fd0f 	bl	1bc44 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   14226:	2301      	movs	r3, #1
   14228:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1422a:	2000      	movs	r0, #0
}
   1422c:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1422e:	f04f 30ff 	mov.w	r0, #4294967295
   14232:	4770      	bx	lr
		return -EINVAL;
   14234:	f06f 0015 	mvn.w	r0, #21
}
   14238:	4770      	bx	lr
   1423a:	bf00      	nop
   1423c:	20002320 	.word	0x20002320

00014240 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   14240:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   14242:	4b07      	ldr	r3, [pc, #28]	; (14260 <hci_internal_evt_get+0x20>)
   14244:	781b      	ldrb	r3, [r3, #0]
   14246:	b913      	cbnz	r3, 1424e <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   14248:	f7f7 fbe1 	bl	ba0e <sdc_hci_evt_get>
}
   1424c:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1424e:	4c04      	ldr	r4, [pc, #16]	; (14260 <hci_internal_evt_get+0x20>)
   14250:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   14252:	3202      	adds	r2, #2
   14254:	1c61      	adds	r1, r4, #1
   14256:	f006 fc64 	bl	1ab22 <memcpy>
		cmd_complete_or_status.occurred = false;
   1425a:	2000      	movs	r0, #0
   1425c:	7020      	strb	r0, [r4, #0]
		return 0;
   1425e:	e7f5      	b.n	1424c <hci_internal_evt_get+0xc>
   14260:	20002320 	.word	0x20002320

00014264 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   14264:	b538      	push	{r3, r4, r5, lr}
   14266:	4605      	mov	r5, r0
   14268:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1426a:	4b0a      	ldr	r3, [pc, #40]	; (14294 <bt_rand+0x30>)
   1426c:	681b      	ldr	r3, [r3, #0]
   1426e:	b13b      	cbz	r3, 14280 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   14270:	4b08      	ldr	r3, [pc, #32]	; (14294 <bt_rand+0x30>)
   14272:	6818      	ldr	r0, [r3, #0]
   14274:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   14276:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   14278:	681b      	ldr	r3, [r3, #0]
   1427a:	4629      	mov	r1, r5
   1427c:	4798      	blx	r3
}
   1427e:	bd38      	pop	{r3, r4, r5, pc}
   14280:	4805      	ldr	r0, [pc, #20]	; (14298 <bt_rand+0x34>)
   14282:	f000 ff7b 	bl	1517c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   14286:	4b03      	ldr	r3, [pc, #12]	; (14294 <bt_rand+0x30>)
   14288:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1428a:	2800      	cmp	r0, #0
   1428c:	d1f0      	bne.n	14270 <bt_rand+0xc>
			return -ENODEV;
   1428e:	f06f 0012 	mvn.w	r0, #18
   14292:	e7f4      	b.n	1427e <bt_rand+0x1a>
   14294:	20002368 	.word	0x20002368
   14298:	0001dc8c 	.word	0x0001dc8c

0001429c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1429c:	b510      	push	{r4, lr}
   1429e:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   142a0:	f007 fd21 	bl	1bce6 <m_config_clock_source_get>
   142a4:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   142a8:	2332      	movs	r3, #50	; 0x32
   142aa:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   142ae:	2300      	movs	r3, #0
   142b0:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   142b4:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   142b8:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   142bc:	4a0c      	ldr	r2, [pc, #48]	; (142f0 <mpsl_lib_init+0x54>)
   142be:	2119      	movs	r1, #25
   142c0:	4668      	mov	r0, sp
   142c2:	f7ef fe97 	bl	3ff4 <mpsl_init>
	if (err) {
   142c6:	4604      	mov	r4, r0
   142c8:	b110      	cbz	r0, 142d0 <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   142ca:	4620      	mov	r0, r4
   142cc:	b002      	add	sp, #8
   142ce:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   142d0:	2201      	movs	r2, #1
   142d2:	2100      	movs	r1, #0
   142d4:	2008      	movs	r0, #8
   142d6:	f7fb fe79 	bl	ffcc <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   142da:	2201      	movs	r2, #1
   142dc:	2100      	movs	r1, #0
   142de:	200b      	movs	r0, #11
   142e0:	f7fb fe74 	bl	ffcc <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   142e4:	2201      	movs	r2, #1
   142e6:	2100      	movs	r1, #0
   142e8:	4610      	mov	r0, r2
   142ea:	f7fb fe6f 	bl	ffcc <z_arm_irq_priority_set>
	return 0;
   142ee:	e7ec      	b.n	142ca <mpsl_lib_init+0x2e>
   142f0:	000142f5 	.word	0x000142f5

000142f4 <m_assert_handler>:
{
   142f4:	b538      	push	{r3, r4, r5, lr}
   142f6:	460d      	mov	r5, r1
   142f8:	4b0d      	ldr	r3, [pc, #52]	; (14330 <m_assert_handler+0x3c>)
   142fa:	4a0e      	ldr	r2, [pc, #56]	; (14334 <m_assert_handler+0x40>)
   142fc:	1a9b      	subs	r3, r3, r2
   142fe:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   14300:	f04f 0400 	mov.w	r4, #0
   14304:	2201      	movs	r2, #1
   14306:	f362 0402 	bfi	r4, r2, #0, #3
   1430a:	f36f 04c5 	bfc	r4, #3, #3
   1430e:	f363 148f 	bfi	r4, r3, #6, #10
   14312:	f7fa fe2d 	bl	ef70 <z_log_strdup>
   14316:	4601      	mov	r1, r0
   14318:	4623      	mov	r3, r4
   1431a:	462a      	mov	r2, r5
   1431c:	4806      	ldr	r0, [pc, #24]	; (14338 <m_assert_handler+0x44>)
   1431e:	f7fa ffd5 	bl	f2cc <log_2>
	k_oops();
   14322:	4040      	eors	r0, r0
   14324:	f380 8811 	msr	BASEPRI, r0
   14328:	f04f 0003 	mov.w	r0, #3
   1432c:	df02      	svc	2
}
   1432e:	bd38      	pop	{r3, r4, r5, pc}
   14330:	0001cc84 	.word	0x0001cc84
   14334:	0001cc2c 	.word	0x0001cc2c
   14338:	0001df40 	.word	0x0001df40

0001433c <signal_thread>:
{
   1433c:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   1433e:	f04f 34ff 	mov.w	r4, #4294967295
   14342:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   14346:	4622      	mov	r2, r4
   14348:	462b      	mov	r3, r5
   1434a:	4806      	ldr	r0, [pc, #24]	; (14364 <signal_thread+0x28>)
   1434c:	f001 fb78 	bl	15a40 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   14350:	4620      	mov	r0, r4
   14352:	4629      	mov	r1, r5
   14354:	f7ff fd48 	bl	13de8 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   14358:	f7f6 ff1b 	bl	b192 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1435c:	f7ff fd4e 	bl	13dfc <multithreading_lock_release>
	while (true) {
   14360:	e7ed      	b.n	1433e <signal_thread+0x2>
   14362:	bf00      	nop
   14364:	200005e0 	.word	0x200005e0

00014368 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   14368:	b530      	push	{r4, r5, lr}
   1436a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1436c:	4d0f      	ldr	r5, [pc, #60]	; (143ac <mpsl_signal_thread_init+0x44>)
   1436e:	2200      	movs	r2, #0
   14370:	2300      	movs	r3, #0
   14372:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14376:	2400      	movs	r4, #0
   14378:	9404      	str	r4, [sp, #16]
   1437a:	f06f 0309 	mvn.w	r3, #9
   1437e:	9303      	str	r3, [sp, #12]
   14380:	9402      	str	r4, [sp, #8]
   14382:	9401      	str	r4, [sp, #4]
   14384:	9400      	str	r4, [sp, #0]
   14386:	4b0a      	ldr	r3, [pc, #40]	; (143b0 <mpsl_signal_thread_init+0x48>)
   14388:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1438c:	4909      	ldr	r1, [pc, #36]	; (143b4 <mpsl_signal_thread_init+0x4c>)
   1438e:	4628      	mov	r0, r5
   14390:	f007 fe0b 	bl	1bfaa <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14394:	4908      	ldr	r1, [pc, #32]	; (143b8 <mpsl_signal_thread_init+0x50>)
   14396:	4628      	mov	r0, r5
   14398:	f001 f932 	bl	15600 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1439c:	4622      	mov	r2, r4
   1439e:	2104      	movs	r1, #4
   143a0:	2019      	movs	r0, #25
   143a2:	f7fb fe13 	bl	ffcc <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   143a6:	4620      	mov	r0, r4
   143a8:	b009      	add	sp, #36	; 0x24
   143aa:	bd30      	pop	{r4, r5, pc}
   143ac:	20001708 	.word	0x20001708
   143b0:	0001433d 	.word	0x0001433d
   143b4:	200040e0 	.word	0x200040e0
   143b8:	0001df54 	.word	0x0001df54

000143bc <mpsl_low_prio_irq_handler>:
{
   143bc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   143be:	4802      	ldr	r0, [pc, #8]	; (143c8 <mpsl_low_prio_irq_handler+0xc>)
   143c0:	f001 fb16 	bl	159f0 <z_impl_k_sem_give>
}
   143c4:	bd08      	pop	{r3, pc}
   143c6:	bf00      	nop
   143c8:	200005e0 	.word	0x200005e0

000143cc <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   143cc:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   143ce:	4b02      	ldr	r3, [pc, #8]	; (143d8 <mpsl_hfclk_callback+0xc>)
   143d0:	681b      	ldr	r3, [r3, #0]
   143d2:	2000      	movs	r0, #0
   143d4:	4798      	blx	r3
}
   143d6:	bd08      	pop	{r3, pc}
   143d8:	2000236c 	.word	0x2000236c

000143dc <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   143dc:	b508      	push	{r3, lr}
	switch (domain) {
   143de:	b128      	cbz	r0, 143ec <nrfx_clock_start+0x10>
   143e0:	2801      	cmp	r0, #1
   143e2:	d102      	bne.n	143ea <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   143e4:	4804      	ldr	r0, [pc, #16]	; (143f8 <nrfx_clock_start+0x1c>)
   143e6:	f7ef fc6f 	bl	3cc8 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   143ea:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   143ec:	4b03      	ldr	r3, [pc, #12]	; (143fc <nrfx_clock_start+0x20>)
   143ee:	681b      	ldr	r3, [r3, #0]
   143f0:	2001      	movs	r0, #1
   143f2:	4798      	blx	r3
}
   143f4:	e7f9      	b.n	143ea <nrfx_clock_start+0xe>
   143f6:	bf00      	nop
   143f8:	000143cd 	.word	0x000143cd
   143fc:	2000236c 	.word	0x2000236c

00014400 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   14400:	4b01      	ldr	r3, [pc, #4]	; (14408 <nrfx_clock_init+0x8>)
   14402:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   14404:	4801      	ldr	r0, [pc, #4]	; (1440c <nrfx_clock_init+0xc>)
   14406:	4770      	bx	lr
   14408:	2000236c 	.word	0x2000236c
   1440c:	0bad0000 	.word	0x0bad0000

00014410 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14410:	4b03      	ldr	r3, [pc, #12]	; (14420 <nrf52_errata_36+0x10>)
   14412:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   14414:	2b08      	cmp	r3, #8
   14416:	d001      	beq.n	1441c <nrf52_errata_36+0xc>
        return false;
   14418:	2000      	movs	r0, #0
   1441a:	4770      	bx	lr
                        return true;
   1441c:	2001      	movs	r0, #1
}
   1441e:	4770      	bx	lr
   14420:	10000130 	.word	0x10000130

00014424 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14424:	4b03      	ldr	r3, [pc, #12]	; (14434 <nrf52_errata_66+0x10>)
   14426:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   14428:	2b08      	cmp	r3, #8
   1442a:	d001      	beq.n	14430 <nrf52_errata_66+0xc>
        return false;
   1442c:	2000      	movs	r0, #0
   1442e:	4770      	bx	lr
                        return true;
   14430:	2001      	movs	r0, #1
}
   14432:	4770      	bx	lr
   14434:	10000130 	.word	0x10000130

00014438 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14438:	4b08      	ldr	r3, [pc, #32]	; (1445c <nrf52_errata_98+0x24>)
   1443a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1443c:	3304      	adds	r3, #4
   1443e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   14440:	2a08      	cmp	r2, #8
   14442:	d001      	beq.n	14448 <nrf52_errata_98+0x10>
        return false;
   14444:	2000      	movs	r0, #0
   14446:	4770      	bx	lr
                switch(var2)
   14448:	2b00      	cmp	r3, #0
   1444a:	d804      	bhi.n	14456 <nrf52_errata_98+0x1e>
   1444c:	e8df f003 	tbb	[pc, r3]
   14450:	01          	.byte	0x01
   14451:	00          	.byte	0x00
            if (var1 == 0x08)
   14452:	2001      	movs	r0, #1
   14454:	4770      	bx	lr
                        return false;
   14456:	2000      	movs	r0, #0
}
   14458:	4770      	bx	lr
   1445a:	bf00      	nop
   1445c:	10000130 	.word	0x10000130

00014460 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14460:	4b08      	ldr	r3, [pc, #32]	; (14484 <nrf52_errata_103+0x24>)
   14462:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14464:	3304      	adds	r3, #4
   14466:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   14468:	2a08      	cmp	r2, #8
   1446a:	d001      	beq.n	14470 <nrf52_errata_103+0x10>
        return false;
   1446c:	2000      	movs	r0, #0
   1446e:	4770      	bx	lr
                switch(var2)
   14470:	2b00      	cmp	r3, #0
   14472:	d804      	bhi.n	1447e <nrf52_errata_103+0x1e>
   14474:	e8df f003 	tbb	[pc, r3]
   14478:	01          	.byte	0x01
   14479:	00          	.byte	0x00
            if (var1 == 0x08)
   1447a:	2001      	movs	r0, #1
   1447c:	4770      	bx	lr
                        return false;
   1447e:	2000      	movs	r0, #0
}
   14480:	4770      	bx	lr
   14482:	bf00      	nop
   14484:	10000130 	.word	0x10000130

00014488 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14488:	4b08      	ldr	r3, [pc, #32]	; (144ac <nrf52_errata_115+0x24>)
   1448a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1448c:	3304      	adds	r3, #4
   1448e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   14490:	2a08      	cmp	r2, #8
   14492:	d001      	beq.n	14498 <nrf52_errata_115+0x10>
        return false;
   14494:	2000      	movs	r0, #0
   14496:	4770      	bx	lr
                switch(var2)
   14498:	2b00      	cmp	r3, #0
   1449a:	d804      	bhi.n	144a6 <nrf52_errata_115+0x1e>
   1449c:	e8df f003 	tbb	[pc, r3]
   144a0:	01          	.byte	0x01
   144a1:	00          	.byte	0x00
            if (var1 == 0x08)
   144a2:	2001      	movs	r0, #1
   144a4:	4770      	bx	lr
                        return false;
   144a6:	2000      	movs	r0, #0
}
   144a8:	4770      	bx	lr
   144aa:	bf00      	nop
   144ac:	10000130 	.word	0x10000130

000144b0 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   144b0:	4b08      	ldr	r3, [pc, #32]	; (144d4 <nrf52_errata_120+0x24>)
   144b2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   144b4:	3304      	adds	r3, #4
   144b6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   144b8:	2a08      	cmp	r2, #8
   144ba:	d001      	beq.n	144c0 <nrf52_errata_120+0x10>
        return false;
   144bc:	2000      	movs	r0, #0
   144be:	4770      	bx	lr
                switch(var2)
   144c0:	2b00      	cmp	r3, #0
   144c2:	d804      	bhi.n	144ce <nrf52_errata_120+0x1e>
   144c4:	e8df f003 	tbb	[pc, r3]
   144c8:	01          	.byte	0x01
   144c9:	00          	.byte	0x00
            if (var1 == 0x08)
   144ca:	2001      	movs	r0, #1
   144cc:	4770      	bx	lr
                        return false;
   144ce:	2000      	movs	r0, #0
}
   144d0:	4770      	bx	lr
   144d2:	bf00      	nop
   144d4:	10000130 	.word	0x10000130

000144d8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   144d8:	4b03      	ldr	r3, [pc, #12]	; (144e8 <nrf52_errata_136+0x10>)
   144da:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   144dc:	2b08      	cmp	r3, #8
   144de:	d001      	beq.n	144e4 <nrf52_errata_136+0xc>
        return false;
   144e0:	2000      	movs	r0, #0
   144e2:	4770      	bx	lr
                        return true;
   144e4:	2001      	movs	r0, #1
}
   144e6:	4770      	bx	lr
   144e8:	10000130 	.word	0x10000130

000144ec <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   144ec:	4b06      	ldr	r3, [pc, #24]	; (14508 <nrf52_configuration_249+0x1c>)
   144ee:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   144f0:	4a06      	ldr	r2, [pc, #24]	; (1450c <nrf52_configuration_249+0x20>)
   144f2:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   144f4:	2b08      	cmp	r3, #8
   144f6:	d001      	beq.n	144fc <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   144f8:	2000      	movs	r0, #0
   144fa:	4770      	bx	lr
                switch(var2)
   144fc:	2a04      	cmp	r2, #4
   144fe:	d801      	bhi.n	14504 <nrf52_configuration_249+0x18>
   14500:	2000      	movs	r0, #0
   14502:	4770      	bx	lr
                        return true;
   14504:	2001      	movs	r0, #1
    #endif
}
   14506:	4770      	bx	lr
   14508:	10000130 	.word	0x10000130
   1450c:	10000134 	.word	0x10000134

00014510 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   14510:	4b02      	ldr	r3, [pc, #8]	; (1451c <nvmc_wait+0xc>)
   14512:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   14516:	2b00      	cmp	r3, #0
   14518:	d0fa      	beq.n	14510 <nvmc_wait>
}
   1451a:	4770      	bx	lr
   1451c:	4001e000 	.word	0x4001e000

00014520 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   14520:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14522:	4b03      	ldr	r3, [pc, #12]	; (14530 <nvmc_config+0x10>)
   14524:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   14528:	f7ff fff2 	bl	14510 <nvmc_wait>
}
   1452c:	bd08      	pop	{r3, pc}
   1452e:	bf00      	nop
   14530:	4001e000 	.word	0x4001e000

00014534 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   14534:	4b01      	ldr	r3, [pc, #4]	; (1453c <SystemCoreClockUpdate+0x8>)
   14536:	4a02      	ldr	r2, [pc, #8]	; (14540 <SystemCoreClockUpdate+0xc>)
   14538:	601a      	str	r2, [r3, #0]
}
   1453a:	4770      	bx	lr
   1453c:	20000428 	.word	0x20000428
   14540:	03d09000 	.word	0x03d09000

00014544 <SystemInit>:

void SystemInit(void)
{
   14544:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   14546:	f7ff ff63 	bl	14410 <nrf52_errata_36>
   1454a:	b140      	cbz	r0, 1455e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1454c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14550:	2200      	movs	r2, #0
   14552:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   14556:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1455a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1455e:	f7ff ff61 	bl	14424 <nrf52_errata_66>
   14562:	2800      	cmp	r0, #0
   14564:	d046      	beq.n	145f4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   14566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1456a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1456e:	4b56      	ldr	r3, [pc, #344]	; (146c8 <SystemInit+0x184>)
   14570:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   14574:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   14578:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1457c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   14580:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   14584:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   14588:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1458c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   14590:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   14594:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   14598:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1459c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   145a0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   145a4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   145a8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   145ac:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   145b0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   145b4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   145b8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   145bc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   145c0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   145c4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   145c8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   145cc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   145d0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   145d4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   145d8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   145dc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   145e0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   145e4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   145e8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   145ec:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   145f0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   145f4:	f7ff ff20 	bl	14438 <nrf52_errata_98>
   145f8:	b110      	cbz	r0, 14600 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   145fa:	4b34      	ldr	r3, [pc, #208]	; (146cc <SystemInit+0x188>)
   145fc:	4a34      	ldr	r2, [pc, #208]	; (146d0 <SystemInit+0x18c>)
   145fe:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   14600:	f7ff ff2e 	bl	14460 <nrf52_errata_103>
   14604:	b118      	cbz	r0, 1460e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   14606:	4b33      	ldr	r3, [pc, #204]	; (146d4 <SystemInit+0x190>)
   14608:	22fb      	movs	r2, #251	; 0xfb
   1460a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1460e:	f7ff ff3b 	bl	14488 <nrf52_errata_115>
   14612:	b148      	cbz	r0, 14628 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   14614:	4930      	ldr	r1, [pc, #192]	; (146d8 <SystemInit+0x194>)
   14616:	680b      	ldr	r3, [r1, #0]
   14618:	f023 030f 	bic.w	r3, r3, #15
   1461c:	4a2f      	ldr	r2, [pc, #188]	; (146dc <SystemInit+0x198>)
   1461e:	6812      	ldr	r2, [r2, #0]
   14620:	f002 020f 	and.w	r2, r2, #15
   14624:	4313      	orrs	r3, r2
   14626:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   14628:	f7ff ff42 	bl	144b0 <nrf52_errata_120>
   1462c:	b118      	cbz	r0, 14636 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1462e:	4b2c      	ldr	r3, [pc, #176]	; (146e0 <SystemInit+0x19c>)
   14630:	f44f 7200 	mov.w	r2, #512	; 0x200
   14634:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   14636:	f7ff ff4f 	bl	144d8 <nrf52_errata_136>
   1463a:	b160      	cbz	r0, 14656 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1463c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14640:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   14644:	f013 0f01 	tst.w	r3, #1
   14648:	d005      	beq.n	14656 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1464a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1464e:	f06f 0201 	mvn.w	r2, #1
   14652:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   14656:	f7ff ff49 	bl	144ec <nrf52_configuration_249>
   1465a:	b138      	cbz	r0, 1466c <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1465c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14660:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   14664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14668:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1466c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14670:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   14674:	2b00      	cmp	r3, #0
   14676:	db08      	blt.n	1468a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   14678:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1467c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   14680:	2b00      	cmp	r3, #0
   14682:	db02      	blt.n	1468a <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   14684:	f7ff ff56 	bl	14534 <SystemCoreClockUpdate>
}
   14688:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1468a:	2001      	movs	r0, #1
   1468c:	f7ff ff48 	bl	14520 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14690:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   14694:	2512      	movs	r5, #18
   14696:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1469a:	f7ff ff39 	bl	14510 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1469e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   146a2:	f7ff ff35 	bl	14510 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   146a6:	2000      	movs	r0, #0
   146a8:	f7ff ff3a 	bl	14520 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   146ac:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   146b0:	490c      	ldr	r1, [pc, #48]	; (146e4 <SystemInit+0x1a0>)
   146b2:	68ca      	ldr	r2, [r1, #12]
   146b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   146b8:	4b0b      	ldr	r3, [pc, #44]	; (146e8 <SystemInit+0x1a4>)
   146ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   146bc:	60cb      	str	r3, [r1, #12]
   146be:	f3bf 8f4f 	dsb	sy
    __NOP();
   146c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   146c4:	e7fd      	b.n	146c2 <SystemInit+0x17e>
   146c6:	bf00      	nop
   146c8:	4000c000 	.word	0x4000c000
   146cc:	4000568c 	.word	0x4000568c
   146d0:	00038148 	.word	0x00038148
   146d4:	4000f000 	.word	0x4000f000
   146d8:	40000ee4 	.word	0x40000ee4
   146dc:	10000258 	.word	0x10000258
   146e0:	40029640 	.word	0x40029640
   146e4:	e000ed00 	.word	0xe000ed00
   146e8:	05fa0004 	.word	0x05fa0004

000146ec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   146ec:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   146ee:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   146f0:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   146f4:	f1d3 031f 	rsbs	r3, r3, #31
   146f8:	d415      	bmi.n	14726 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   146fa:	2201      	movs	r2, #1
   146fc:	409a      	lsls	r2, r3
   146fe:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14702:	f3bf 8f5b 	dmb	ish
   14706:	e850 5f00 	ldrex	r5, [r0]
   1470a:	42a5      	cmp	r5, r4
   1470c:	d104      	bne.n	14718 <nrfx_flag32_alloc+0x2c>
   1470e:	e840 2c00 	strex	ip, r2, [r0]
   14712:	f1bc 0f00 	cmp.w	ip, #0
   14716:	d1f6      	bne.n	14706 <nrfx_flag32_alloc+0x1a>
   14718:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1471c:	d1e7      	bne.n	146ee <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   1471e:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   14720:	4802      	ldr	r0, [pc, #8]	; (1472c <nrfx_flag32_alloc+0x40>)
}
   14722:	bc30      	pop	{r4, r5}
   14724:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   14726:	4802      	ldr	r0, [pc, #8]	; (14730 <nrfx_flag32_alloc+0x44>)
   14728:	e7fb      	b.n	14722 <nrfx_flag32_alloc+0x36>
   1472a:	bf00      	nop
   1472c:	0bad0000 	.word	0x0bad0000
   14730:	0bad0002 	.word	0x0bad0002

00014734 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   14734:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   14736:	6803      	ldr	r3, [r0, #0]
   14738:	460c      	mov	r4, r1
   1473a:	fa23 f101 	lsr.w	r1, r3, r1
   1473e:	f011 0f01 	tst.w	r1, #1
   14742:	d114      	bne.n	1476e <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   14744:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   14746:	2301      	movs	r3, #1
   14748:	40a3      	lsls	r3, r4
   1474a:	4313      	orrs	r3, r2
   1474c:	f3bf 8f5b 	dmb	ish
   14750:	e850 1f00 	ldrex	r1, [r0]
   14754:	4291      	cmp	r1, r2
   14756:	d104      	bne.n	14762 <nrfx_flag32_free+0x2e>
   14758:	e840 3c00 	strex	ip, r3, [r0]
   1475c:	f1bc 0f00 	cmp.w	ip, #0
   14760:	d1f6      	bne.n	14750 <nrfx_flag32_free+0x1c>
   14762:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14766:	d1ed      	bne.n	14744 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   14768:	4802      	ldr	r0, [pc, #8]	; (14774 <nrfx_flag32_free+0x40>)
}
   1476a:	bc10      	pop	{r4}
   1476c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   1476e:	4802      	ldr	r0, [pc, #8]	; (14778 <nrfx_flag32_free+0x44>)
   14770:	e7fb      	b.n	1476a <nrfx_flag32_free+0x36>
   14772:	bf00      	nop
   14774:	0bad0000 	.word	0x0bad0000
   14778:	0bad0004 	.word	0x0bad0004

0001477c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1477c:	3008      	adds	r0, #8
   1477e:	4b03      	ldr	r3, [pc, #12]	; (1478c <pin_in_use+0x10>)
   14780:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14784:	f000 0001 	and.w	r0, r0, #1
   14788:	4770      	bx	lr
   1478a:	bf00      	nop
   1478c:	2000042c 	.word	0x2000042c

00014790 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   14790:	3008      	adds	r0, #8
   14792:	4b03      	ldr	r3, [pc, #12]	; (147a0 <pin_in_use_by_te+0x10>)
   14794:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14798:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1479c:	4770      	bx	lr
   1479e:	bf00      	nop
   147a0:	2000042c 	.word	0x2000042c

000147a4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   147a4:	3008      	adds	r0, #8
   147a6:	4b04      	ldr	r3, [pc, #16]	; (147b8 <pin_has_trigger+0x14>)
   147a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   147ac:	f010 001c 	ands.w	r0, r0, #28
   147b0:	bf18      	it	ne
   147b2:	2001      	movne	r0, #1
   147b4:	4770      	bx	lr
   147b6:	bf00      	nop
   147b8:	2000042c 	.word	0x2000042c

000147bc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   147bc:	3008      	adds	r0, #8
   147be:	4b03      	ldr	r3, [pc, #12]	; (147cc <pin_is_output+0x10>)
   147c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   147c4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   147c8:	4770      	bx	lr
   147ca:	bf00      	nop
   147cc:	2000042c 	.word	0x2000042c

000147d0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   147d0:	3008      	adds	r0, #8
   147d2:	4b02      	ldr	r3, [pc, #8]	; (147dc <pin_te_get+0xc>)
   147d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   147d8:	0b40      	lsrs	r0, r0, #13
   147da:	4770      	bx	lr
   147dc:	2000042c 	.word	0x2000042c

000147e0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   147e0:	2200      	movs	r2, #0
   147e2:	e004      	b.n	147ee <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   147e4:	f04f 33ff 	mov.w	r3, #4294967295
   147e8:	4283      	cmp	r3, r0
   147ea:	d00f      	beq.n	1480c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   147ec:	3201      	adds	r2, #1
   147ee:	2a2f      	cmp	r2, #47	; 0x2f
   147f0:	d80a      	bhi.n	14808 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   147f2:	f102 0308 	add.w	r3, r2, #8
   147f6:	4906      	ldr	r1, [pc, #24]	; (14810 <handler_in_use+0x30>)
   147f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   147fc:	f413 7f80 	tst.w	r3, #256	; 0x100
   14800:	d0f0      	beq.n	147e4 <handler_in_use+0x4>
   14802:	f3c3 2343 	ubfx	r3, r3, #9, #4
   14806:	e7ef      	b.n	147e8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   14808:	2000      	movs	r0, #0
   1480a:	4770      	bx	lr
            return true;
   1480c:	2001      	movs	r0, #1
}
   1480e:	4770      	bx	lr
   14810:	2000042c 	.word	0x2000042c

00014814 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   14814:	2300      	movs	r3, #0
   14816:	b113      	cbz	r3, 1481e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   14818:	f04f 30ff 	mov.w	r0, #4294967295
}
   1481c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1481e:	4a07      	ldr	r2, [pc, #28]	; (1483c <find_handler+0x28>)
   14820:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   14824:	4282      	cmp	r2, r0
   14826:	d001      	beq.n	1482c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   14828:	3301      	adds	r3, #1
   1482a:	e7f4      	b.n	14816 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1482c:	4a03      	ldr	r2, [pc, #12]	; (1483c <find_handler+0x28>)
   1482e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   14832:	6852      	ldr	r2, [r2, #4]
   14834:	428a      	cmp	r2, r1
   14836:	d1f7      	bne.n	14828 <find_handler+0x14>
            return i;
   14838:	4618      	mov	r0, r3
   1483a:	4770      	bx	lr
   1483c:	2000042c 	.word	0x2000042c

00014840 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14840:	3008      	adds	r0, #8
   14842:	4b06      	ldr	r3, [pc, #24]	; (1485c <channel_handler_get+0x1c>)
   14844:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   14848:	f410 7f80 	tst.w	r0, #256	; 0x100
   1484c:	d004      	beq.n	14858 <channel_handler_get+0x18>
   1484e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   14852:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   14856:	4770      	bx	lr
        return NULL;
   14858:	2000      	movs	r0, #0
}
   1485a:	4770      	bx	lr
   1485c:	2000042c 	.word	0x2000042c

00014860 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   14860:	b570      	push	{r4, r5, r6, lr}
   14862:	4604      	mov	r4, r0
   14864:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   14866:	f7ff ffeb 	bl	14840 <channel_handler_get>

    if (handler)
   1486a:	b120      	cbz	r0, 14876 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1486c:	6806      	ldr	r6, [r0, #0]
   1486e:	6842      	ldr	r2, [r0, #4]
   14870:	4629      	mov	r1, r5
   14872:	4620      	mov	r0, r4
   14874:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   14876:	4b04      	ldr	r3, [pc, #16]	; (14888 <call_handler+0x28>)
   14878:	689b      	ldr	r3, [r3, #8]
   1487a:	b123      	cbz	r3, 14886 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1487c:	4a02      	ldr	r2, [pc, #8]	; (14888 <call_handler+0x28>)
   1487e:	68d2      	ldr	r2, [r2, #12]
   14880:	4629      	mov	r1, r5
   14882:	4620      	mov	r0, r4
   14884:	4798      	blx	r3
    }
}
   14886:	bd70      	pop	{r4, r5, r6, pc}
   14888:	2000042c 	.word	0x2000042c

0001488c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   1488c:	b570      	push	{r4, r5, r6, lr}
   1488e:	4604      	mov	r4, r0
   14890:	460d      	mov	r5, r1
   14892:	4616      	mov	r6, r2
    if (is_level(trigger))
   14894:	4608      	mov	r0, r1
   14896:	f007 fa8c 	bl	1bdb2 <is_level>
   1489a:	b9d0      	cbnz	r0, 148d2 <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1489c:	2e02      	cmp	r6, #2
   1489e:	d03e      	beq.n	1491e <next_sense_cond_call_handler+0x92>
   148a0:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   148a2:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   148a6:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   148a8:	2901      	cmp	r1, #1
   148aa:	d03a      	beq.n	14922 <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
   148ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   148b0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   148b4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   148b8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   148bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   148c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   148c4:	2d03      	cmp	r5, #3
   148c6:	d030      	beq.n	1492a <next_sense_cond_call_handler+0x9e>
   148c8:	2e02      	cmp	r6, #2
   148ca:	d02c      	beq.n	14926 <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   148cc:	2e03      	cmp	r6, #3
   148ce:	d031      	beq.n	14934 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   148d0:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   148d2:	4629      	mov	r1, r5
   148d4:	4620      	mov	r0, r4
   148d6:	f7ff ffc3 	bl	14860 <call_handler>
    *p_pin = pin_number & 0x1F;
   148da:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   148de:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   148e0:	2c01      	cmp	r4, #1
   148e2:	d01a      	beq.n	1491a <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
   148e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   148e8:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
   148ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   148f0:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   148f4:	4296      	cmp	r6, r2
   148f6:	d1eb      	bne.n	148d0 <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   148f8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   148fc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   14900:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   14904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14908:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1490c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14910:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14914:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   14918:	e7da      	b.n	148d0 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   1491a:	4908      	ldr	r1, [pc, #32]	; (1493c <next_sense_cond_call_handler+0xb0>)
   1491c:	e7e4      	b.n	148e8 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1491e:	2003      	movs	r0, #3
   14920:	e7bf      	b.n	148a2 <next_sense_cond_call_handler+0x16>
   14922:	4906      	ldr	r1, [pc, #24]	; (1493c <next_sense_cond_call_handler+0xb0>)
   14924:	e7c4      	b.n	148b0 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   14926:	2d01      	cmp	r5, #1
   14928:	d1d0      	bne.n	148cc <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   1492a:	4629      	mov	r1, r5
   1492c:	4620      	mov	r0, r4
   1492e:	f7ff ff97 	bl	14860 <call_handler>
}
   14932:	e7cd      	b.n	148d0 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   14934:	2d02      	cmp	r5, #2
   14936:	d1cb      	bne.n	148d0 <next_sense_cond_call_handler+0x44>
   14938:	e7f7      	b.n	1492a <next_sense_cond_call_handler+0x9e>
   1493a:	bf00      	nop
   1493c:	50000300 	.word	0x50000300

00014940 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   14940:	b410      	push	{r4}
   14942:	b083      	sub	sp, #12
   14944:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   14946:	4b12      	ldr	r3, [pc, #72]	; (14990 <latch_pending_read_and_check+0x50>)
   14948:	e893 0003 	ldmia.w	r3, {r0, r1}
   1494c:	ab02      	add	r3, sp, #8
   1494e:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   14952:	4620      	mov	r0, r4
   14954:	2300      	movs	r3, #0
   14956:	e00b      	b.n	14970 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   14958:	aa02      	add	r2, sp, #8
   1495a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1495e:	f852 2c08 	ldr.w	r2, [r2, #-8]
   14962:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   14966:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1496a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1496e:	3301      	adds	r3, #1
   14970:	2b01      	cmp	r3, #1
   14972:	d9f1      	bls.n	14958 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14974:	2300      	movs	r3, #0
   14976:	2b01      	cmp	r3, #1
   14978:	d804      	bhi.n	14984 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   1497a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1497e:	b92a      	cbnz	r2, 1498c <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   14980:	3301      	adds	r3, #1
   14982:	e7f8      	b.n	14976 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   14984:	2000      	movs	r0, #0
}
   14986:	b003      	add	sp, #12
   14988:	bc10      	pop	{r4}
   1498a:	4770      	bx	lr
            return true;
   1498c:	2001      	movs	r0, #1
   1498e:	e7fa      	b.n	14986 <latch_pending_read_and_check+0x46>
   14990:	0001cd64 	.word	0x0001cd64

00014994 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14994:	f100 0208 	add.w	r2, r0, #8
   14998:	4b0e      	ldr	r3, [pc, #56]	; (149d4 <release_handler+0x40>)
   1499a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1499e:	f413 7f80 	tst.w	r3, #256	; 0x100
   149a2:	d016      	beq.n	149d2 <release_handler+0x3e>
{
   149a4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   149a6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   149aa:	4610      	mov	r0, r2
   149ac:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   149b0:	4a08      	ldr	r2, [pc, #32]	; (149d4 <release_handler+0x40>)
   149b2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   149b6:	4620      	mov	r0, r4
   149b8:	f7ff ff12 	bl	147e0 <handler_in_use>
   149bc:	b100      	cbz	r0, 149c0 <release_handler+0x2c>
}
   149be:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   149c0:	4804      	ldr	r0, [pc, #16]	; (149d4 <release_handler+0x40>)
   149c2:	2300      	movs	r3, #0
   149c4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   149c8:	4621      	mov	r1, r4
   149ca:	3074      	adds	r0, #116	; 0x74
   149cc:	f7ff feb2 	bl	14734 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   149d0:	e7f5      	b.n	149be <release_handler+0x2a>
   149d2:	4770      	bx	lr
   149d4:	2000042c 	.word	0x2000042c

000149d8 <pin_handler_trigger_uninit>:
{
   149d8:	b510      	push	{r4, lr}
   149da:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   149dc:	f7ff fed8 	bl	14790 <pin_in_use_by_te>
   149e0:	b140      	cbz	r0, 149f4 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   149e2:	4620      	mov	r0, r4
   149e4:	f7ff fef4 	bl	147d0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   149e8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   149ec:	4b06      	ldr	r3, [pc, #24]	; (14a08 <pin_handler_trigger_uninit+0x30>)
   149ee:	2200      	movs	r2, #0
   149f0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   149f4:	4620      	mov	r0, r4
   149f6:	f7ff ffcd 	bl	14994 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   149fa:	3408      	adds	r4, #8
   149fc:	4b03      	ldr	r3, [pc, #12]	; (14a0c <pin_handler_trigger_uninit+0x34>)
   149fe:	2200      	movs	r2, #0
   14a00:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   14a04:	bd10      	pop	{r4, pc}
   14a06:	bf00      	nop
   14a08:	40006000 	.word	0x40006000
   14a0c:	2000042c 	.word	0x2000042c

00014a10 <pin_handler_set>:
{
   14a10:	b570      	push	{r4, r5, r6, lr}
   14a12:	b082      	sub	sp, #8
   14a14:	4606      	mov	r6, r0
   14a16:	460c      	mov	r4, r1
   14a18:	4615      	mov	r5, r2
    release_handler(pin);
   14a1a:	f7ff ffbb 	bl	14994 <release_handler>
    if (!handler)
   14a1e:	b324      	cbz	r4, 14a6a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   14a20:	4629      	mov	r1, r5
   14a22:	4620      	mov	r0, r4
   14a24:	f7ff fef6 	bl	14814 <find_handler>
    if (handler_id < 0)
   14a28:	1e03      	subs	r3, r0, #0
   14a2a:	db13      	blt.n	14a54 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   14a2c:	4a10      	ldr	r2, [pc, #64]	; (14a70 <pin_handler_set+0x60>)
   14a2e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   14a32:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   14a36:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   14a38:	025b      	lsls	r3, r3, #9
   14a3a:	b29b      	uxth	r3, r3
   14a3c:	f106 0008 	add.w	r0, r6, #8
   14a40:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   14a44:	430b      	orrs	r3, r1
   14a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   14a4a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   14a4e:	4809      	ldr	r0, [pc, #36]	; (14a74 <pin_handler_set+0x64>)
}
   14a50:	b002      	add	sp, #8
   14a52:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   14a54:	f10d 0107 	add.w	r1, sp, #7
   14a58:	4807      	ldr	r0, [pc, #28]	; (14a78 <pin_handler_set+0x68>)
   14a5a:	f7ff fe47 	bl	146ec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   14a5e:	4b05      	ldr	r3, [pc, #20]	; (14a74 <pin_handler_set+0x64>)
   14a60:	4298      	cmp	r0, r3
   14a62:	d1f5      	bne.n	14a50 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   14a64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a68:	e7e0      	b.n	14a2c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   14a6a:	4802      	ldr	r0, [pc, #8]	; (14a74 <pin_handler_set+0x64>)
   14a6c:	e7f0      	b.n	14a50 <pin_handler_set+0x40>
   14a6e:	bf00      	nop
   14a70:	2000042c 	.word	0x2000042c
   14a74:	0bad0000 	.word	0x0bad0000
   14a78:	200004a0 	.word	0x200004a0

00014a7c <port_event_handle>:

static void port_event_handle(void)
{
   14a7c:	b570      	push	{r4, r5, r6, lr}
   14a7e:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   14a80:	4a2c      	ldr	r2, [pc, #176]	; (14b34 <port_event_handle+0xb8>)
   14a82:	466b      	mov	r3, sp
   14a84:	e892 0003 	ldmia.w	r2, {r0, r1}
   14a88:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   14a8c:	2300      	movs	r3, #0
   14a8e:	a802      	add	r0, sp, #8
   14a90:	e00b      	b.n	14aaa <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   14a92:	aa04      	add	r2, sp, #16
   14a94:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14a98:	f852 2c10 	ldr.w	r2, [r2, #-16]
   14a9c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   14aa0:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   14aa4:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   14aa8:	3301      	adds	r3, #1
   14aaa:	2b01      	cmp	r3, #1
   14aac:	d9f1      	bls.n	14a92 <port_event_handle+0x16>
   14aae:	e03d      	b.n	14b2c <port_event_handle+0xb0>
        case 1: return NRF_P1;
   14ab0:	4e21      	ldr	r6, [pc, #132]	; (14b38 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14ab2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   14ab6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   14aba:	f3c2 4201 	ubfx	r2, r2, #16, #2
   14abe:	f7ff fee5 	bl	1488c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   14ac2:	2301      	movs	r3, #1
   14ac4:	40ab      	lsls	r3, r5
   14ac6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   14aca:	ab04      	add	r3, sp, #16
   14acc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   14ad0:	f853 0c08 	ldr.w	r0, [r3, #-8]
   14ad4:	b1f8      	cbz	r0, 14b16 <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
   14ad6:	fa90 f0a0 	rbit	r0, r0
   14ada:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   14ade:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14ae2:	f100 0208 	add.w	r2, r0, #8
   14ae6:	4b15      	ldr	r3, [pc, #84]	; (14b3c <port_event_handle+0xc0>)
   14ae8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   14aec:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   14af0:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   14af2:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   14af6:	ae02      	add	r6, sp, #8
   14af8:	2301      	movs	r3, #1
   14afa:	fa03 f202 	lsl.w	r2, r3, r2
   14afe:	5d73      	ldrb	r3, [r6, r5]
   14b00:	ea23 0302 	bic.w	r3, r3, r2
   14b04:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
   14b06:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   14b0a:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14b0c:	2b01      	cmp	r3, #1
   14b0e:	d0cf      	beq.n	14ab0 <port_event_handle+0x34>
        case 0: return NRF_P0;
   14b10:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   14b14:	e7cd      	b.n	14ab2 <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   14b16:	3401      	adds	r4, #1
   14b18:	2c01      	cmp	r4, #1
   14b1a:	d9d6      	bls.n	14aca <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14b1c:	4b08      	ldr	r3, [pc, #32]	; (14b40 <port_event_handle+0xc4>)
   14b1e:	2200      	movs	r2, #0
   14b20:	601a      	str	r2, [r3, #0]
   14b22:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   14b24:	a802      	add	r0, sp, #8
   14b26:	f7ff ff0b 	bl	14940 <latch_pending_read_and_check>
   14b2a:	b108      	cbz	r0, 14b30 <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   14b2c:	2400      	movs	r4, #0
   14b2e:	e7f3      	b.n	14b18 <port_event_handle+0x9c>
}
   14b30:	b004      	add	sp, #16
   14b32:	bd70      	pop	{r4, r5, r6, pc}
   14b34:	0001cd64 	.word	0x0001cd64
   14b38:	50000300 	.word	0x50000300
   14b3c:	2000042c 	.word	0x2000042c
   14b40:	4000617c 	.word	0x4000617c

00014b44 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   14b44:	b538      	push	{r3, r4, r5, lr}
   14b46:	4604      	mov	r4, r0
    while (mask)
   14b48:	b1cc      	cbz	r4, 14b7e <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   14b4a:	fa94 f3a4 	rbit	r3, r4
   14b4e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   14b52:	2201      	movs	r2, #1
   14b54:	409a      	lsls	r2, r3
   14b56:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14b5a:	4a09      	ldr	r2, [pc, #36]	; (14b80 <gpiote_evt_handle+0x3c>)
   14b5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   14b60:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   14b64:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   14b68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   14b6c:	f3c0 4001 	ubfx	r0, r0, #16, #2
   14b70:	f007 f91d 	bl	1bdae <gpiote_polarity_to_trigger>
   14b74:	4601      	mov	r1, r0
   14b76:	4628      	mov	r0, r5
   14b78:	f7ff fe72 	bl	14860 <call_handler>
   14b7c:	e7e4      	b.n	14b48 <gpiote_evt_handle+0x4>
    }
}
   14b7e:	bd38      	pop	{r3, r4, r5, pc}
   14b80:	40006000 	.word	0x40006000

00014b84 <nrfx_gpiote_input_configure>:
{
   14b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b88:	4604      	mov	r4, r0
   14b8a:	4615      	mov	r5, r2
   14b8c:	461e      	mov	r6, r3
    if (p_input_config)
   14b8e:	b361      	cbz	r1, 14bea <nrfx_gpiote_input_configure+0x66>
   14b90:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   14b92:	f007 f8f6 	bl	1bd82 <pin_is_task_output>
   14b96:	2800      	cmp	r0, #0
   14b98:	f040 8097 	bne.w	14cca <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
   14b9c:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14ba0:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14ba2:	2b01      	cmp	r3, #1
   14ba4:	d042      	beq.n	14c2c <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
   14ba6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14baa:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   14bae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14bb2:	2f00      	cmp	r7, #0
   14bb4:	d03c      	beq.n	14c30 <nrfx_gpiote_input_configure+0xac>
   14bb6:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14bb8:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   14bbc:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14bc0:	2f00      	cmp	r7, #0
   14bc2:	d037      	beq.n	14c34 <nrfx_gpiote_input_configure+0xb0>
   14bc4:	7839      	ldrb	r1, [r7, #0]
   14bc6:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14bc8:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   14bca:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14bce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   14bd2:	4a42      	ldr	r2, [pc, #264]	; (14cdc <nrfx_gpiote_input_configure+0x158>)
   14bd4:	f104 0108 	add.w	r1, r4, #8
   14bd8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14bdc:	f023 0302 	bic.w	r3, r3, #2
   14be0:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   14be2:	f043 0301 	orr.w	r3, r3, #1
   14be6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   14bea:	b1b5      	cbz	r5, 14c1a <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   14bec:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   14bf0:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   14bf4:	4620      	mov	r0, r4
   14bf6:	f7ff fde1 	bl	147bc <pin_is_output>
   14bfa:	b1e8      	cbz	r0, 14c38 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
   14bfc:	f1b9 0f00 	cmp.w	r9, #0
   14c00:	d165      	bne.n	14cce <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   14c02:	4b36      	ldr	r3, [pc, #216]	; (14cdc <nrfx_gpiote_input_configure+0x158>)
   14c04:	f104 0208 	add.w	r2, r4, #8
   14c08:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   14c0c:	f020 001c 	bic.w	r0, r0, #28
   14c10:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   14c12:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   14c16:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   14c1a:	2e00      	cmp	r6, #0
   14c1c:	d05b      	beq.n	14cd6 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14c1e:	6872      	ldr	r2, [r6, #4]
   14c20:	6831      	ldr	r1, [r6, #0]
   14c22:	4620      	mov	r0, r4
   14c24:	f7ff fef4 	bl	14a10 <pin_handler_set>
}
   14c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
   14c2c:	482c      	ldr	r0, [pc, #176]	; (14ce0 <nrfx_gpiote_input_configure+0x15c>)
   14c2e:	e7bc      	b.n	14baa <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14c30:	2100      	movs	r1, #0
   14c32:	e7c1      	b.n	14bb8 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14c34:	2100      	movs	r1, #0
   14c36:	e7c7      	b.n	14bc8 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   14c38:	4b28      	ldr	r3, [pc, #160]	; (14cdc <nrfx_gpiote_input_configure+0x158>)
   14c3a:	f104 0208 	add.w	r2, r4, #8
   14c3e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   14c42:	f027 0720 	bic.w	r7, r7, #32
   14c46:	04ff      	lsls	r7, r7, #19
   14c48:	0cff      	lsrs	r7, r7, #19
   14c4a:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   14c4e:	f1b9 0f00 	cmp.w	r9, #0
   14c52:	d0d6      	beq.n	14c02 <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
   14c54:	f1b8 0f03 	cmp.w	r8, #3
   14c58:	d83b      	bhi.n	14cd2 <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14c5a:	686b      	ldr	r3, [r5, #4]
   14c5c:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   14c5e:	f1b8 0f00 	cmp.w	r8, #0
   14c62:	d106      	bne.n	14c72 <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   14c64:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   14c68:	4b1e      	ldr	r3, [pc, #120]	; (14ce4 <nrfx_gpiote_input_configure+0x160>)
   14c6a:	2200      	movs	r2, #0
   14c6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   14c70:	e7c7      	b.n	14c02 <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   14c72:	4640      	mov	r0, r8
   14c74:	f007 f89c 	bl	1bdb0 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14c78:	4b1a      	ldr	r3, [pc, #104]	; (14ce4 <nrfx_gpiote_input_configure+0x160>)
   14c7a:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   14c7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14c82:	f021 0103 	bic.w	r1, r1, #3
   14c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14c8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14c8e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   14c92:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   14c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14c9a:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   14c9e:	0221      	lsls	r1, r4, #8
   14ca0:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   14ca4:	0400      	lsls	r0, r0, #16
   14ca6:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14caa:	4301      	orrs	r1, r0
   14cac:	ea4c 0101 	orr.w	r1, ip, r1
   14cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14cb4:	036d      	lsls	r5, r5, #13
   14cb6:	b2ad      	uxth	r5, r5
   14cb8:	f104 0308 	add.w	r3, r4, #8
   14cbc:	432f      	orrs	r7, r5
   14cbe:	f047 0720 	orr.w	r7, r7, #32
   14cc2:	4a06      	ldr	r2, [pc, #24]	; (14cdc <nrfx_gpiote_input_configure+0x158>)
   14cc4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   14cc8:	e79b      	b.n	14c02 <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
   14cca:	4807      	ldr	r0, [pc, #28]	; (14ce8 <nrfx_gpiote_input_configure+0x164>)
   14ccc:	e7ac      	b.n	14c28 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
   14cce:	4806      	ldr	r0, [pc, #24]	; (14ce8 <nrfx_gpiote_input_configure+0x164>)
   14cd0:	e7aa      	b.n	14c28 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
   14cd2:	4805      	ldr	r0, [pc, #20]	; (14ce8 <nrfx_gpiote_input_configure+0x164>)
   14cd4:	e7a8      	b.n	14c28 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
   14cd6:	4805      	ldr	r0, [pc, #20]	; (14cec <nrfx_gpiote_input_configure+0x168>)
   14cd8:	e7a6      	b.n	14c28 <nrfx_gpiote_input_configure+0xa4>
   14cda:	bf00      	nop
   14cdc:	2000042c 	.word	0x2000042c
   14ce0:	50000300 	.word	0x50000300
   14ce4:	40006000 	.word	0x40006000
   14ce8:	0bad0004 	.word	0x0bad0004
   14cec:	0bad0000 	.word	0x0bad0000

00014cf0 <nrfx_gpiote_output_configure>:
{
   14cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14cf2:	4604      	mov	r4, r0
   14cf4:	4615      	mov	r5, r2
    if (p_config)
   14cf6:	2900      	cmp	r1, #0
   14cf8:	d052      	beq.n	14da0 <nrfx_gpiote_output_configure+0xb0>
   14cfa:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   14cfc:	f007 f850 	bl	1bda0 <pin_is_input>
   14d00:	b128      	cbz	r0, 14d0e <nrfx_gpiote_output_configure+0x1e>
   14d02:	4620      	mov	r0, r4
   14d04:	f7ff fd44 	bl	14790 <pin_in_use_by_te>
   14d08:	2800      	cmp	r0, #0
   14d0a:	f040 809d 	bne.w	14e48 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   14d0e:	4620      	mov	r0, r4
   14d10:	f7ff fd48 	bl	147a4 <pin_has_trigger>
   14d14:	b118      	cbz	r0, 14d1e <nrfx_gpiote_output_configure+0x2e>
   14d16:	7873      	ldrb	r3, [r6, #1]
   14d18:	2b01      	cmp	r3, #1
   14d1a:	f000 8097 	beq.w	14e4c <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   14d1e:	f106 0c01 	add.w	ip, r6, #1
   14d22:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   14d24:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14d28:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14d2a:	2b01      	cmp	r3, #1
   14d2c:	d07c      	beq.n	14e28 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
   14d2e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14d32:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   14d36:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14d3a:	f1bc 0f00 	cmp.w	ip, #0
   14d3e:	d075      	beq.n	14e2c <nrfx_gpiote_output_configure+0x13c>
   14d40:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14d42:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14d46:	2f00      	cmp	r7, #0
   14d48:	d072      	beq.n	14e30 <nrfx_gpiote_output_configure+0x140>
   14d4a:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14d4e:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   14d52:	2e00      	cmp	r6, #0
   14d54:	d06f      	beq.n	14e36 <nrfx_gpiote_output_configure+0x146>
   14d56:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14d5a:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   14d5e:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14d62:	f1bc 0f00 	cmp.w	ip, #0
   14d66:	d069      	beq.n	14e3c <nrfx_gpiote_output_configure+0x14c>
   14d68:	7873      	ldrb	r3, [r6, #1]
   14d6a:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14d6c:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14d70:	2f00      	cmp	r7, #0
   14d72:	d065      	beq.n	14e40 <nrfx_gpiote_output_configure+0x150>
   14d74:	78b7      	ldrb	r7, [r6, #2]
   14d76:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14d78:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14d7a:	2e00      	cmp	r6, #0
   14d7c:	d062      	beq.n	14e44 <nrfx_gpiote_output_configure+0x154>
   14d7e:	7836      	ldrb	r6, [r6, #0]
   14d80:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14d82:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14d84:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   14d86:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14d8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   14d8e:	4a33      	ldr	r2, [pc, #204]	; (14e5c <nrfx_gpiote_output_configure+0x16c>)
   14d90:	f104 0108 	add.w	r1, r4, #8
   14d94:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   14d98:	f043 0303 	orr.w	r3, r3, #3
   14d9c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   14da0:	2d00      	cmp	r5, #0
   14da2:	d055      	beq.n	14e50 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
   14da4:	4620      	mov	r0, r4
   14da6:	f006 fffb 	bl	1bda0 <pin_is_input>
   14daa:	2800      	cmp	r0, #0
   14dac:	d152      	bne.n	14e54 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
   14dae:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   14db0:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   14db4:	4b2a      	ldr	r3, [pc, #168]	; (14e60 <nrfx_gpiote_output_configure+0x170>)
   14db6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   14dba:	4928      	ldr	r1, [pc, #160]	; (14e5c <nrfx_gpiote_output_configure+0x16c>)
   14dbc:	f104 0008 	add.w	r0, r4, #8
   14dc0:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   14dc4:	f023 0320 	bic.w	r3, r3, #32
   14dc8:	04db      	lsls	r3, r3, #19
   14dca:	0cdb      	lsrs	r3, r3, #19
   14dcc:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   14dd0:	7869      	ldrb	r1, [r5, #1]
   14dd2:	2900      	cmp	r1, #0
   14dd4:	d040      	beq.n	14e58 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   14dd6:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14dda:	4d21      	ldr	r5, [pc, #132]	; (14e60 <nrfx_gpiote_output_configure+0x170>)
   14ddc:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   14de0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   14de4:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
   14de8:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   14dec:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14df0:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   14df4:	0220      	lsls	r0, r4, #8
   14df6:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14dfa:	0409      	lsls	r1, r1, #16
   14dfc:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14e00:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   14e02:	ea4f 500c 	mov.w	r0, ip, lsl #20
   14e06:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14e0a:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14e0c:	4339      	orrs	r1, r7
   14e0e:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14e12:	0352      	lsls	r2, r2, #13
   14e14:	b292      	uxth	r2, r2
   14e16:	3408      	adds	r4, #8
   14e18:	431a      	orrs	r2, r3
   14e1a:	f042 0220 	orr.w	r2, r2, #32
   14e1e:	4b0f      	ldr	r3, [pc, #60]	; (14e5c <nrfx_gpiote_output_configure+0x16c>)
   14e20:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   14e24:	480f      	ldr	r0, [pc, #60]	; (14e64 <nrfx_gpiote_output_configure+0x174>)
   14e26:	e014      	b.n	14e52 <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
   14e28:	490f      	ldr	r1, [pc, #60]	; (14e68 <nrfx_gpiote_output_configure+0x178>)
   14e2a:	e782      	b.n	14d32 <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14e2c:	2300      	movs	r3, #0
   14e2e:	e788      	b.n	14d42 <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14e30:	f04f 0e00 	mov.w	lr, #0
   14e34:	e78b      	b.n	14d4e <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   14e36:	f04f 0e00 	mov.w	lr, #0
   14e3a:	e78e      	b.n	14d5a <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14e3c:	2300      	movs	r3, #0
   14e3e:	e795      	b.n	14d6c <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14e40:	2700      	movs	r7, #0
   14e42:	e799      	b.n	14d78 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14e44:	2600      	movs	r6, #0
   14e46:	e79c      	b.n	14d82 <nrfx_gpiote_output_configure+0x92>
   14e48:	4808      	ldr	r0, [pc, #32]	; (14e6c <nrfx_gpiote_output_configure+0x17c>)
   14e4a:	e002      	b.n	14e52 <nrfx_gpiote_output_configure+0x162>
   14e4c:	4807      	ldr	r0, [pc, #28]	; (14e6c <nrfx_gpiote_output_configure+0x17c>)
   14e4e:	e000      	b.n	14e52 <nrfx_gpiote_output_configure+0x162>
   14e50:	4804      	ldr	r0, [pc, #16]	; (14e64 <nrfx_gpiote_output_configure+0x174>)
}
   14e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   14e54:	4805      	ldr	r0, [pc, #20]	; (14e6c <nrfx_gpiote_output_configure+0x17c>)
   14e56:	e7fc      	b.n	14e52 <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
   14e58:	4802      	ldr	r0, [pc, #8]	; (14e64 <nrfx_gpiote_output_configure+0x174>)
   14e5a:	e7fa      	b.n	14e52 <nrfx_gpiote_output_configure+0x162>
   14e5c:	2000042c 	.word	0x2000042c
   14e60:	40006000 	.word	0x40006000
   14e64:	0bad0000 	.word	0x0bad0000
   14e68:	50000300 	.word	0x50000300
   14e6c:	0bad0004 	.word	0x0bad0004

00014e70 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   14e70:	4b01      	ldr	r3, [pc, #4]	; (14e78 <nrfx_gpiote_global_callback_set+0x8>)
   14e72:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   14e74:	60d9      	str	r1, [r3, #12]
}
   14e76:	4770      	bx	lr
   14e78:	2000042c 	.word	0x2000042c

00014e7c <nrfx_gpiote_channel_get>:
{
   14e7c:	b538      	push	{r3, r4, r5, lr}
   14e7e:	4604      	mov	r4, r0
   14e80:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   14e82:	f7ff fc85 	bl	14790 <pin_in_use_by_te>
   14e86:	b140      	cbz	r0, 14e9a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14e88:	f104 0008 	add.w	r0, r4, #8
   14e8c:	4b04      	ldr	r3, [pc, #16]	; (14ea0 <nrfx_gpiote_channel_get+0x24>)
   14e8e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   14e92:	0b5b      	lsrs	r3, r3, #13
   14e94:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   14e96:	4803      	ldr	r0, [pc, #12]	; (14ea4 <nrfx_gpiote_channel_get+0x28>)
}
   14e98:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14e9a:	4803      	ldr	r0, [pc, #12]	; (14ea8 <nrfx_gpiote_channel_get+0x2c>)
   14e9c:	e7fc      	b.n	14e98 <nrfx_gpiote_channel_get+0x1c>
   14e9e:	bf00      	nop
   14ea0:	2000042c 	.word	0x2000042c
   14ea4:	0bad0000 	.word	0x0bad0000
   14ea8:	0bad0004 	.word	0x0bad0004

00014eac <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14eac:	4b0f      	ldr	r3, [pc, #60]	; (14eec <nrfx_gpiote_init+0x40>)
   14eae:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   14eb2:	b10b      	cbz	r3, 14eb8 <nrfx_gpiote_init+0xc>
        return err_code;
   14eb4:	480e      	ldr	r0, [pc, #56]	; (14ef0 <nrfx_gpiote_init+0x44>)
}
   14eb6:	4770      	bx	lr
{
   14eb8:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   14eba:	4c0c      	ldr	r4, [pc, #48]	; (14eec <nrfx_gpiote_init+0x40>)
   14ebc:	2260      	movs	r2, #96	; 0x60
   14ebe:	2100      	movs	r1, #0
   14ec0:	f104 0010 	add.w	r0, r4, #16
   14ec4:	f005 fe51 	bl	1ab6a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   14ec8:	2006      	movs	r0, #6
   14eca:	f7fb f84d 	bl	ff68 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14ece:	4b09      	ldr	r3, [pc, #36]	; (14ef4 <nrfx_gpiote_init+0x48>)
   14ed0:	2200      	movs	r2, #0
   14ed2:	601a      	str	r2, [r3, #0]
   14ed4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   14ed6:	4b08      	ldr	r3, [pc, #32]	; (14ef8 <nrfx_gpiote_init+0x4c>)
   14ed8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14edc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14ee0:	2301      	movs	r3, #1
   14ee2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   14ee6:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   14ee8:	4804      	ldr	r0, [pc, #16]	; (14efc <nrfx_gpiote_init+0x50>)
}
   14eea:	bd10      	pop	{r4, pc}
   14eec:	2000042c 	.word	0x2000042c
   14ef0:	0bad0005 	.word	0x0bad0005
   14ef4:	4000617c 	.word	0x4000617c
   14ef8:	40006000 	.word	0x40006000
   14efc:	0bad0000 	.word	0x0bad0000

00014f00 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   14f00:	4b03      	ldr	r3, [pc, #12]	; (14f10 <nrfx_gpiote_is_init+0x10>)
   14f02:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   14f06:	3800      	subs	r0, #0
   14f08:	bf18      	it	ne
   14f0a:	2001      	movne	r0, #1
   14f0c:	4770      	bx	lr
   14f0e:	bf00      	nop
   14f10:	2000042c 	.word	0x2000042c

00014f14 <nrfx_gpiote_channel_free>:
{
   14f14:	b508      	push	{r3, lr}
   14f16:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   14f18:	4801      	ldr	r0, [pc, #4]	; (14f20 <nrfx_gpiote_channel_free+0xc>)
   14f1a:	f7ff fc0b 	bl	14734 <nrfx_flag32_free>
}
   14f1e:	bd08      	pop	{r3, pc}
   14f20:	2000049c 	.word	0x2000049c

00014f24 <nrfx_gpiote_channel_alloc>:
{
   14f24:	b508      	push	{r3, lr}
   14f26:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   14f28:	4801      	ldr	r0, [pc, #4]	; (14f30 <nrfx_gpiote_channel_alloc+0xc>)
   14f2a:	f7ff fbdf 	bl	146ec <nrfx_flag32_alloc>
}
   14f2e:	bd08      	pop	{r3, pc}
   14f30:	2000049c 	.word	0x2000049c

00014f34 <nrfx_gpiote_trigger_enable>:
{
   14f34:	b538      	push	{r3, r4, r5, lr}
   14f36:	4604      	mov	r4, r0
   14f38:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14f3a:	f7ff fc29 	bl	14790 <pin_in_use_by_te>
   14f3e:	b308      	cbz	r0, 14f84 <nrfx_gpiote_trigger_enable+0x50>
   14f40:	4620      	mov	r0, r4
   14f42:	f006 ff2d 	bl	1bda0 <pin_is_input>
   14f46:	b1e8      	cbz	r0, 14f84 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   14f48:	4620      	mov	r0, r4
   14f4a:	f7ff fc41 	bl	147d0 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   14f4e:	0083      	lsls	r3, r0, #2
   14f50:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   14f54:	b29b      	uxth	r3, r3
   14f56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14f5a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14f5e:	2200      	movs	r2, #0
   14f60:	601a      	str	r2, [r3, #0]
   14f62:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14f64:	4a22      	ldr	r2, [pc, #136]	; (14ff0 <nrfx_gpiote_trigger_enable+0xbc>)
   14f66:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   14f6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   14f6e:	f043 0301 	orr.w	r3, r3, #1
   14f72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   14f76:	b39d      	cbz	r5, 14fe0 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   14f78:	2301      	movs	r3, #1
   14f7a:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   14f7e:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   14f82:	e02d      	b.n	14fe0 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14f84:	f104 0308 	add.w	r3, r4, #8
   14f88:	4a1a      	ldr	r2, [pc, #104]	; (14ff4 <nrfx_gpiote_trigger_enable+0xc0>)
   14f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   14f8e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   14f92:	2b04      	cmp	r3, #4
   14f94:	d012      	beq.n	14fbc <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   14f96:	2b05      	cmp	r3, #5
   14f98:	d023      	beq.n	14fe2 <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
   14f9a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14f9e:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14fa0:	2b01      	cmp	r3, #1
   14fa2:	d009      	beq.n	14fb8 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
   14fa4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   14fa8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   14fac:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14fae:	f013 0f01 	tst.w	r3, #1
   14fb2:	d018      	beq.n	14fe6 <nrfx_gpiote_trigger_enable+0xb2>
   14fb4:	2003      	movs	r0, #3
   14fb6:	e002      	b.n	14fbe <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   14fb8:	4b0f      	ldr	r3, [pc, #60]	; (14ff8 <nrfx_gpiote_trigger_enable+0xc4>)
   14fba:	e7f5      	b.n	14fa8 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   14fbc:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   14fbe:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14fc2:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14fc4:	2c01      	cmp	r4, #1
   14fc6:	d010      	beq.n	14fea <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
   14fc8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14fcc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14fd0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   14fd4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14fd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   14fdc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   14fe0:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   14fe2:	2002      	movs	r0, #2
   14fe4:	e7eb      	b.n	14fbe <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   14fe6:	2002      	movs	r0, #2
   14fe8:	e7e9      	b.n	14fbe <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   14fea:	4903      	ldr	r1, [pc, #12]	; (14ff8 <nrfx_gpiote_trigger_enable+0xc4>)
   14fec:	e7ee      	b.n	14fcc <nrfx_gpiote_trigger_enable+0x98>
   14fee:	bf00      	nop
   14ff0:	40006000 	.word	0x40006000
   14ff4:	2000042c 	.word	0x2000042c
   14ff8:	50000300 	.word	0x50000300

00014ffc <nrfx_gpiote_trigger_disable>:
{
   14ffc:	b510      	push	{r4, lr}
   14ffe:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15000:	f7ff fbc6 	bl	14790 <pin_in_use_by_te>
   15004:	b1a0      	cbz	r0, 15030 <nrfx_gpiote_trigger_disable+0x34>
   15006:	4620      	mov	r0, r4
   15008:	f006 feca 	bl	1bda0 <pin_is_input>
   1500c:	b180      	cbz	r0, 15030 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   1500e:	4620      	mov	r0, r4
   15010:	f7ff fbde 	bl	147d0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   15014:	2201      	movs	r2, #1
   15016:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   15018:	4b0e      	ldr	r3, [pc, #56]	; (15054 <nrfx_gpiote_trigger_disable+0x58>)
   1501a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1501e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   15022:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   15026:	f022 0203 	bic.w	r2, r2, #3
   1502a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   1502e:	e00e      	b.n	1504e <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   15030:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   15034:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15036:	2c01      	cmp	r4, #1
   15038:	d00a      	beq.n	15050 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   1503a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1503e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15042:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   15046:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1504a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1504e:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   15050:	4901      	ldr	r1, [pc, #4]	; (15058 <nrfx_gpiote_trigger_disable+0x5c>)
   15052:	e7f4      	b.n	1503e <nrfx_gpiote_trigger_disable+0x42>
   15054:	40006000 	.word	0x40006000
   15058:	50000300 	.word	0x50000300

0001505c <nrfx_gpiote_pin_uninit>:
{
   1505c:	b510      	push	{r4, lr}
   1505e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   15060:	f7ff fb8c 	bl	1477c <pin_in_use>
   15064:	b908      	cbnz	r0, 1506a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   15066:	480c      	ldr	r0, [pc, #48]	; (15098 <nrfx_gpiote_pin_uninit+0x3c>)
}
   15068:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   1506a:	4620      	mov	r0, r4
   1506c:	f7ff ffc6 	bl	14ffc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   15070:	4620      	mov	r0, r4
   15072:	f7ff fcb1 	bl	149d8 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   15076:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1507a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1507c:	2c01      	cmp	r4, #1
   1507e:	d008      	beq.n	15092 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   15080:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   15084:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15088:	2102      	movs	r1, #2
   1508a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   1508e:	4803      	ldr	r0, [pc, #12]	; (1509c <nrfx_gpiote_pin_uninit+0x40>)
   15090:	e7ea      	b.n	15068 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   15092:	4a03      	ldr	r2, [pc, #12]	; (150a0 <nrfx_gpiote_pin_uninit+0x44>)
   15094:	e7f6      	b.n	15084 <nrfx_gpiote_pin_uninit+0x28>
   15096:	bf00      	nop
   15098:	0bad0004 	.word	0x0bad0004
   1509c:	0bad0000 	.word	0x0bad0000
   150a0:	50000300 	.word	0x50000300

000150a4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   150a4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   150a6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   150a8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   150ac:	2100      	movs	r1, #0
    uint32_t status = 0;
   150ae:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   150b0:	e003      	b.n	150ba <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   150b2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   150b4:	3304      	adds	r3, #4
   150b6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   150b8:	3101      	adds	r1, #1
   150ba:	2907      	cmp	r1, #7
   150bc:	d814      	bhi.n	150e8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150be:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   150c2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   150c6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   150c8:	2a00      	cmp	r2, #0
   150ca:	d0f2      	beq.n	150b2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   150cc:	4a0b      	ldr	r2, [pc, #44]	; (150fc <nrfx_gpiote_irq_handler+0x58>)
   150ce:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   150d2:	4210      	tst	r0, r2
   150d4:	d0ed      	beq.n	150b2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   150d6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   150da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   150de:	2400      	movs	r4, #0
   150e0:	6014      	str	r4, [r2, #0]
   150e2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   150e4:	4305      	orrs	r5, r0
   150e6:	e7e4      	b.n	150b2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   150e8:	4b05      	ldr	r3, [pc, #20]	; (15100 <nrfx_gpiote_irq_handler+0x5c>)
   150ea:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   150ec:	b91b      	cbnz	r3, 150f6 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   150ee:	4628      	mov	r0, r5
   150f0:	f7ff fd28 	bl	14b44 <gpiote_evt_handle>
}
   150f4:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   150f6:	f7ff fcc1 	bl	14a7c <port_event_handle>
   150fa:	e7f8      	b.n	150ee <nrfx_gpiote_irq_handler+0x4a>
   150fc:	40006000 	.word	0x40006000
   15100:	4000617c 	.word	0x4000617c

00015104 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   15104:	b508      	push	{r3, lr}
   15106:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   15108:	4801      	ldr	r0, [pc, #4]	; (15110 <nrfx_ppi_channel_alloc+0xc>)
   1510a:	f7ff faef 	bl	146ec <nrfx_flag32_alloc>
}
   1510e:	bd08      	pop	{r3, pc}
   15110:	200004a8 	.word	0x200004a8

00015114 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   15114:	4b03      	ldr	r3, [pc, #12]	; (15124 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   15116:	4a04      	ldr	r2, [pc, #16]	; (15128 <z_device_state_init+0x14>)
   15118:	4293      	cmp	r3, r2
   1511a:	d201      	bcs.n	15120 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1511c:	3318      	adds	r3, #24
   1511e:	e7fa      	b.n	15116 <z_device_state_init+0x2>
	}
}
   15120:	4770      	bx	lr
   15122:	bf00      	nop
   15124:	0001ca04 	.word	0x0001ca04
   15128:	0001caac 	.word	0x0001caac

0001512c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1512c:	b570      	push	{r4, r5, r6, lr}
   1512e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15130:	4b11      	ldr	r3, [pc, #68]	; (15178 <z_sys_init_run_level+0x4c>)
   15132:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   15136:	e009      	b.n	1514c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   15138:	4240      	negs	r0, r0
   1513a:	e017      	b.n	1516c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1513c:	68eb      	ldr	r3, [r5, #12]
   1513e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   15140:	68ea      	ldr	r2, [r5, #12]
   15142:	7853      	ldrb	r3, [r2, #1]
   15144:	f043 0301 	orr.w	r3, r3, #1
   15148:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1514a:	3408      	adds	r4, #8
   1514c:	1c73      	adds	r3, r6, #1
   1514e:	4a0a      	ldr	r2, [pc, #40]	; (15178 <z_sys_init_run_level+0x4c>)
   15150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15154:	42a3      	cmp	r3, r4
   15156:	d90d      	bls.n	15174 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   15158:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1515a:	6823      	ldr	r3, [r4, #0]
   1515c:	4628      	mov	r0, r5
   1515e:	4798      	blx	r3
		if (dev != NULL) {
   15160:	2d00      	cmp	r5, #0
   15162:	d0f2      	beq.n	1514a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   15164:	2800      	cmp	r0, #0
   15166:	d0eb      	beq.n	15140 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   15168:	2800      	cmp	r0, #0
   1516a:	dbe5      	blt.n	15138 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1516c:	28ff      	cmp	r0, #255	; 0xff
   1516e:	dde5      	ble.n	1513c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   15170:	20ff      	movs	r0, #255	; 0xff
   15172:	e7e3      	b.n	1513c <z_sys_init_run_level+0x10>
		}
	}
}
   15174:	bd70      	pop	{r4, r5, r6, pc}
   15176:	bf00      	nop
   15178:	0001df6c 	.word	0x0001df6c

0001517c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1517c:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1517e:	4605      	mov	r5, r0
   15180:	b328      	cbz	r0, 151ce <z_impl_device_get_binding+0x52>
   15182:	7803      	ldrb	r3, [r0, #0]
   15184:	b32b      	cbz	r3, 151d2 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   15186:	4c14      	ldr	r4, [pc, #80]	; (151d8 <z_impl_device_get_binding+0x5c>)
   15188:	e000      	b.n	1518c <z_impl_device_get_binding+0x10>
   1518a:	3418      	adds	r4, #24
   1518c:	4b13      	ldr	r3, [pc, #76]	; (151dc <z_impl_device_get_binding+0x60>)
   1518e:	429c      	cmp	r4, r3
   15190:	d008      	beq.n	151a4 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   15192:	4620      	mov	r0, r4
   15194:	f006 fe12 	bl	1bdbc <z_device_ready>
   15198:	2800      	cmp	r0, #0
   1519a:	d0f6      	beq.n	1518a <z_impl_device_get_binding+0xe>
   1519c:	6823      	ldr	r3, [r4, #0]
   1519e:	42ab      	cmp	r3, r5
   151a0:	d1f3      	bne.n	1518a <z_impl_device_get_binding+0xe>
   151a2:	e012      	b.n	151ca <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   151a4:	4c0c      	ldr	r4, [pc, #48]	; (151d8 <z_impl_device_get_binding+0x5c>)
   151a6:	e000      	b.n	151aa <z_impl_device_get_binding+0x2e>
   151a8:	3418      	adds	r4, #24
   151aa:	4b0c      	ldr	r3, [pc, #48]	; (151dc <z_impl_device_get_binding+0x60>)
   151ac:	429c      	cmp	r4, r3
   151ae:	d00b      	beq.n	151c8 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   151b0:	4620      	mov	r0, r4
   151b2:	f006 fe03 	bl	1bdbc <z_device_ready>
   151b6:	2800      	cmp	r0, #0
   151b8:	d0f6      	beq.n	151a8 <z_impl_device_get_binding+0x2c>
   151ba:	6821      	ldr	r1, [r4, #0]
   151bc:	4628      	mov	r0, r5
   151be:	f005 fc79 	bl	1aab4 <strcmp>
   151c2:	2800      	cmp	r0, #0
   151c4:	d1f0      	bne.n	151a8 <z_impl_device_get_binding+0x2c>
   151c6:	e000      	b.n	151ca <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   151c8:	2400      	movs	r4, #0
}
   151ca:	4620      	mov	r0, r4
   151cc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   151ce:	4604      	mov	r4, r0
   151d0:	e7fb      	b.n	151ca <z_impl_device_get_binding+0x4e>
   151d2:	2400      	movs	r4, #0
   151d4:	e7f9      	b.n	151ca <z_impl_device_get_binding+0x4e>
   151d6:	bf00      	nop
   151d8:	0001ca04 	.word	0x0001ca04
   151dc:	0001caac 	.word	0x0001caac

000151e0 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   151e0:	2804      	cmp	r0, #4
   151e2:	d80c      	bhi.n	151fe <reason_to_str+0x1e>
   151e4:	e8df f000 	tbb	[pc, r0]
   151e8:	07050d03 	.word	0x07050d03
   151ec:	09          	.byte	0x09
   151ed:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   151ee:	4806      	ldr	r0, [pc, #24]	; (15208 <reason_to_str+0x28>)
   151f0:	4770      	bx	lr
		return "Stack overflow";
   151f2:	4806      	ldr	r0, [pc, #24]	; (1520c <reason_to_str+0x2c>)
   151f4:	4770      	bx	lr
		return "Kernel oops";
   151f6:	4806      	ldr	r0, [pc, #24]	; (15210 <reason_to_str+0x30>)
   151f8:	4770      	bx	lr
		return "Kernel panic";
   151fa:	4806      	ldr	r0, [pc, #24]	; (15214 <reason_to_str+0x34>)
   151fc:	4770      	bx	lr
	default:
		return "Unknown error";
   151fe:	4806      	ldr	r0, [pc, #24]	; (15218 <reason_to_str+0x38>)
   15200:	4770      	bx	lr
		return "Unhandled interrupt";
   15202:	4806      	ldr	r0, [pc, #24]	; (1521c <reason_to_str+0x3c>)
	}
}
   15204:	4770      	bx	lr
   15206:	bf00      	nop
   15208:	0001dfd4 	.word	0x0001dfd4
   1520c:	0001dfa8 	.word	0x0001dfa8
   15210:	0001dfb8 	.word	0x0001dfb8
   15214:	0001dfc4 	.word	0x0001dfc4
   15218:	0001df84 	.word	0x0001df84
   1521c:	0001df94 	.word	0x0001df94

00015220 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   15220:	b130      	cbz	r0, 15230 <thread_name_get+0x10>
{
   15222:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   15224:	f006 feb0 	bl	1bf88 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   15228:	b120      	cbz	r0, 15234 <thread_name_get+0x14>
   1522a:	7803      	ldrb	r3, [r0, #0]
   1522c:	b123      	cbz	r3, 15238 <thread_name_get+0x18>
}
   1522e:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   15230:	4802      	ldr	r0, [pc, #8]	; (1523c <thread_name_get+0x1c>)
}
   15232:	4770      	bx	lr
		thread_name = "unknown";
   15234:	4801      	ldr	r0, [pc, #4]	; (1523c <thread_name_get+0x1c>)
   15236:	e7fa      	b.n	1522e <thread_name_get+0xe>
   15238:	4800      	ldr	r0, [pc, #0]	; (1523c <thread_name_get+0x1c>)
	return thread_name;
   1523a:	e7f8      	b.n	1522e <thread_name_get+0xe>
   1523c:	0001dfe4 	.word	0x0001dfe4

00015240 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15244:	b082      	sub	sp, #8
   15246:	4605      	mov	r5, r0
   15248:	460e      	mov	r6, r1
	__asm__ volatile(
   1524a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1524e:	f3ef 8711 	mrs	r7, BASEPRI
   15252:	f383 8812 	msr	BASEPRI_MAX, r3
   15256:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1525a:	f001 f969 	bl	16530 <z_impl_z_current_get>
   1525e:	4604      	mov	r4, r0
   15260:	4b29      	ldr	r3, [pc, #164]	; (15308 <z_fatal_error+0xc8>)
   15262:	4a2a      	ldr	r2, [pc, #168]	; (1530c <z_fatal_error+0xcc>)
   15264:	1a9b      	subs	r3, r3, r2
   15266:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   15268:	f04f 0800 	mov.w	r8, #0
   1526c:	2201      	movs	r2, #1
   1526e:	f362 0802 	bfi	r8, r2, #0, #3
   15272:	f36f 08c5 	bfc	r8, #3, #3
   15276:	f363 188f 	bfi	r8, r3, #6, #10
   1527a:	4628      	mov	r0, r5
   1527c:	f7ff ffb0 	bl	151e0 <reason_to_str>
   15280:	4602      	mov	r2, r0
   15282:	f8ad 8000 	strh.w	r8, [sp]
   15286:	2300      	movs	r3, #0
   15288:	4629      	mov	r1, r5
   1528a:	4821      	ldr	r0, [pc, #132]	; (15310 <z_fatal_error+0xd0>)
   1528c:	f7f9 ffaa 	bl	f1e4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   15290:	b11e      	cbz	r6, 1529a <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   15292:	69f3      	ldr	r3, [r6, #28]
   15294:	f3c3 0308 	ubfx	r3, r3, #0, #9
   15298:	bb2b      	cbnz	r3, 152e6 <z_fatal_error+0xa6>
   1529a:	4b1b      	ldr	r3, [pc, #108]	; (15308 <z_fatal_error+0xc8>)
   1529c:	4a1b      	ldr	r2, [pc, #108]	; (1530c <z_fatal_error+0xcc>)
   1529e:	1a9b      	subs	r3, r3, r2
   152a0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   152a2:	f04f 0800 	mov.w	r8, #0
   152a6:	2201      	movs	r2, #1
   152a8:	f362 0802 	bfi	r8, r2, #0, #3
   152ac:	f36f 08c5 	bfc	r8, #3, #3
   152b0:	f363 188f 	bfi	r8, r3, #6, #10
   152b4:	4620      	mov	r0, r4
   152b6:	f7ff ffb3 	bl	15220 <thread_name_get>
   152ba:	f7f9 fe59 	bl	ef70 <z_log_strdup>
   152be:	4602      	mov	r2, r0
   152c0:	4643      	mov	r3, r8
   152c2:	4621      	mov	r1, r4
   152c4:	4813      	ldr	r0, [pc, #76]	; (15314 <z_fatal_error+0xd4>)
   152c6:	f7fa f801 	bl	f2cc <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   152ca:	4631      	mov	r1, r6
   152cc:	4628      	mov	r0, r5
   152ce:	f7fe fd9d 	bl	13e0c <k_sys_fatal_error_handler>
	__asm__ volatile(
   152d2:	f387 8811 	msr	BASEPRI, r7
   152d6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   152da:	4620      	mov	r0, r4
   152dc:	f7fb fbf0 	bl	10ac0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   152e0:	b002      	add	sp, #8
   152e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   152e6:	4b08      	ldr	r3, [pc, #32]	; (15308 <z_fatal_error+0xc8>)
   152e8:	4a08      	ldr	r2, [pc, #32]	; (1530c <z_fatal_error+0xcc>)
   152ea:	1a9b      	subs	r3, r3, r2
   152ec:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   152ee:	f04f 0100 	mov.w	r1, #0
   152f2:	2201      	movs	r2, #1
   152f4:	f362 0102 	bfi	r1, r2, #0, #3
   152f8:	f36f 01c5 	bfc	r1, #3, #3
   152fc:	f363 118f 	bfi	r1, r3, #6, #10
   15300:	4805      	ldr	r0, [pc, #20]	; (15318 <z_fatal_error+0xd8>)
   15302:	f7fa f863 	bl	f3cc <log_0>
   15306:	e7c8      	b.n	1529a <z_fatal_error+0x5a>
   15308:	0001cc9c 	.word	0x0001cc9c
   1530c:	0001cc2c 	.word	0x0001cc2c
   15310:	0001dfec 	.word	0x0001dfec
   15314:	0001e038 	.word	0x0001e038
   15318:	0001e014 	.word	0x0001e014

0001531c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1531c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1531e:	b089      	sub	sp, #36	; 0x24
   15320:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   15322:	4b15      	ldr	r3, [pc, #84]	; (15378 <init_idle_thread+0x5c>)
   15324:	25b8      	movs	r5, #184	; 0xb8
   15326:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1532a:	4b14      	ldr	r3, [pc, #80]	; (1537c <init_idle_thread+0x60>)
   1532c:	f44f 76b0 	mov.w	r6, #352	; 0x160
   15330:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   15334:	af06      	add	r7, sp, #24
   15336:	4603      	mov	r3, r0
   15338:	4a11      	ldr	r2, [pc, #68]	; (15380 <init_idle_thread+0x64>)
   1533a:	2108      	movs	r1, #8
   1533c:	4638      	mov	r0, r7
   1533e:	f004 fb73 	bl	19a28 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15342:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   15346:	480f      	ldr	r0, [pc, #60]	; (15384 <init_idle_thread+0x68>)
   15348:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1534c:	9705      	str	r7, [sp, #20]
   1534e:	2301      	movs	r3, #1
   15350:	9304      	str	r3, [sp, #16]
   15352:	230f      	movs	r3, #15
   15354:	9303      	str	r3, [sp, #12]
   15356:	2300      	movs	r3, #0
   15358:	9302      	str	r3, [sp, #8]
   1535a:	9301      	str	r3, [sp, #4]
   1535c:	9400      	str	r4, [sp, #0]
   1535e:	4b0a      	ldr	r3, [pc, #40]	; (15388 <init_idle_thread+0x6c>)
   15360:	f44f 72a0 	mov.w	r2, #320	; 0x140
   15364:	4631      	mov	r1, r6
   15366:	4628      	mov	r0, r5
   15368:	f000 f96e 	bl	15648 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1536c:	7b6b      	ldrb	r3, [r5, #13]
   1536e:	f023 0304 	bic.w	r3, r3, #4
   15372:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   15374:	b009      	add	sp, #36	; 0x24
   15376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15378:	200017c0 	.word	0x200017c0
   1537c:	20004d20 	.word	0x20004d20
   15380:	0001e050 	.word	0x0001e050
   15384:	20002370 	.word	0x20002370
   15388:	000157ad 	.word	0x000157ad

0001538c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1538c:	b570      	push	{r4, r5, r6, lr}
   1538e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   15390:	f001 f802 	bl	16398 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   15394:	4d1b      	ldr	r5, [pc, #108]	; (15404 <prepare_multithreading+0x78>)
   15396:	4b1c      	ldr	r3, [pc, #112]	; (15408 <prepare_multithreading+0x7c>)
   15398:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1539a:	4b1c      	ldr	r3, [pc, #112]	; (1540c <prepare_multithreading+0x80>)
   1539c:	9305      	str	r3, [sp, #20]
   1539e:	2301      	movs	r3, #1
   153a0:	9304      	str	r3, [sp, #16]
   153a2:	2400      	movs	r4, #0
   153a4:	9403      	str	r4, [sp, #12]
   153a6:	9402      	str	r4, [sp, #8]
   153a8:	9401      	str	r4, [sp, #4]
   153aa:	9400      	str	r4, [sp, #0]
   153ac:	4b18      	ldr	r3, [pc, #96]	; (15410 <prepare_multithreading+0x84>)
   153ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   153b2:	4918      	ldr	r1, [pc, #96]	; (15414 <prepare_multithreading+0x88>)
   153b4:	4628      	mov	r0, r5
   153b6:	f000 f947 	bl	15648 <z_setup_new_thread>
   153ba:	4606      	mov	r6, r0
   153bc:	7b6b      	ldrb	r3, [r5, #13]
   153be:	f023 0304 	bic.w	r3, r3, #4
   153c2:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   153c4:	4628      	mov	r0, r5
   153c6:	f007 f814 	bl	1c3f2 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   153ca:	2c00      	cmp	r4, #0
   153cc:	dd02      	ble.n	153d4 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   153ce:	4630      	mov	r0, r6
   153d0:	b006      	add	sp, #24
   153d2:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   153d4:	4620      	mov	r0, r4
   153d6:	f7ff ffa1 	bl	1531c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   153da:	4b0f      	ldr	r3, [pc, #60]	; (15418 <prepare_multithreading+0x8c>)
   153dc:	22b8      	movs	r2, #184	; 0xb8
   153de:	fb02 3204 	mla	r2, r2, r4, r3
   153e2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   153e6:	4b08      	ldr	r3, [pc, #32]	; (15408 <prepare_multithreading+0x7c>)
   153e8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   153ec:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   153ee:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   153f0:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   153f4:	4a09      	ldr	r2, [pc, #36]	; (1541c <prepare_multithreading+0x90>)
   153f6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   153fa:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   153fe:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   15400:	3401      	adds	r4, #1
   15402:	e7e2      	b.n	153ca <prepare_multithreading+0x3e>
   15404:	20001878 	.word	0x20001878
   15408:	20002370 	.word	0x20002370
   1540c:	0001e05c 	.word	0x0001e05c
   15410:	00015421 	.word	0x00015421
   15414:	20004500 	.word	0x20004500
   15418:	200017c0 	.word	0x200017c0
   1541c:	20004e80 	.word	0x20004e80

00015420 <bg_thread_main>:
{
   15420:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   15422:	4b0a      	ldr	r3, [pc, #40]	; (1544c <bg_thread_main+0x2c>)
   15424:	2201      	movs	r2, #1
   15426:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15428:	2002      	movs	r0, #2
   1542a:	f7ff fe7f 	bl	1512c <z_sys_init_run_level>
	boot_banner();
   1542e:	f001 fdf7 	bl	17020 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   15432:	2003      	movs	r0, #3
   15434:	f7ff fe7a 	bl	1512c <z_sys_init_run_level>
	z_init_static_threads();
   15438:	f000 f96a 	bl	15710 <z_init_static_threads>
	main();
   1543c:	f004 fa8e 	bl	1995c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   15440:	4a03      	ldr	r2, [pc, #12]	; (15450 <bg_thread_main+0x30>)
   15442:	7b13      	ldrb	r3, [r2, #12]
   15444:	f023 0301 	bic.w	r3, r3, #1
   15448:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1544a:	bd08      	pop	{r3, pc}
   1544c:	20002d91 	.word	0x20002d91
   15450:	20001878 	.word	0x20001878

00015454 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   15454:	b508      	push	{r3, lr}
   15456:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15458:	4a01      	ldr	r2, [pc, #4]	; (15460 <switch_to_main_thread+0xc>)
   1545a:	4802      	ldr	r0, [pc, #8]	; (15464 <switch_to_main_thread+0x10>)
   1545c:	f7fa feaa 	bl	101b4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   15460:	00015421 	.word	0x00015421
   15464:	20001878 	.word	0x20001878

00015468 <z_bss_zero>:
{
   15468:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1546a:	4803      	ldr	r0, [pc, #12]	; (15478 <z_bss_zero+0x10>)
   1546c:	4a03      	ldr	r2, [pc, #12]	; (1547c <z_bss_zero+0x14>)
   1546e:	1a12      	subs	r2, r2, r0
   15470:	2100      	movs	r1, #0
   15472:	f005 fb7a 	bl	1ab6a <memset>
}
   15476:	bd08      	pop	{r3, pc}
   15478:	20000680 	.word	0x20000680
   1547c:	20002f50 	.word	0x20002f50

00015480 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   15480:	b500      	push	{lr}
   15482:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   15484:	f7f9 fcd2 	bl	ee2c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   15488:	4b1d      	ldr	r3, [pc, #116]	; (15500 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1548a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1548e:	4c1d      	ldr	r4, [pc, #116]	; (15504 <z_cstart+0x84>)
   15490:	6963      	ldr	r3, [r4, #20]
   15492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15496:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15498:	23e0      	movs	r3, #224	; 0xe0
   1549a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1549e:	2320      	movs	r3, #32
   154a0:	77e3      	strb	r3, [r4, #31]
   154a2:	2500      	movs	r5, #0
   154a4:	7625      	strb	r5, [r4, #24]
   154a6:	7665      	strb	r5, [r4, #25]
   154a8:	76a5      	strb	r5, [r4, #26]
   154aa:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   154ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   154b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   154b4:	6263      	str	r3, [r4, #36]	; 0x24
   154b6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   154ba:	f7fb fa71 	bl	109a0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   154be:	f7fa fce7 	bl	fe90 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   154c2:	f04f 33ff 	mov.w	r3, #4294967295
   154c6:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   154c8:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   154ca:	f7fb fbd5 	bl	10c78 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   154ce:	f7fb fb0d 	bl	10aec <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   154d2:	2401      	movs	r4, #1
   154d4:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   154d8:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   154dc:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   154de:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   154e0:	4b09      	ldr	r3, [pc, #36]	; (15508 <z_cstart+0x88>)
   154e2:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   154e6:	f7ff fe15 	bl	15114 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   154ea:	4628      	mov	r0, r5
   154ec:	f7ff fe1e 	bl	1512c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   154f0:	4620      	mov	r0, r4
   154f2:	f7ff fe1b 	bl	1512c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   154f6:	f7ff ff49 	bl	1538c <prepare_multithreading>
   154fa:	f7ff ffab 	bl	15454 <switch_to_main_thread>
   154fe:	bf00      	nop
   15500:	200056a0 	.word	0x200056a0
   15504:	e000ed00 	.word	0xe000ed00
   15508:	20002370 	.word	0x20002370

0001550c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1550c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1550e:	4c06      	ldr	r4, [pc, #24]	; (15528 <statics_init+0x1c>)
   15510:	4b06      	ldr	r3, [pc, #24]	; (1552c <statics_init+0x20>)
   15512:	429c      	cmp	r4, r3
   15514:	d206      	bcs.n	15524 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15516:	68a2      	ldr	r2, [r4, #8]
   15518:	6861      	ldr	r1, [r4, #4]
   1551a:	4620      	mov	r0, r4
   1551c:	f006 fc5b 	bl	1bdd6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15520:	3414      	adds	r4, #20
   15522:	e7f5      	b.n	15510 <statics_init+0x4>
		}
	}
	return 0;
}
   15524:	2000      	movs	r0, #0
   15526:	bd10      	pop	{r4, pc}
   15528:	2000054c 	.word	0x2000054c
   1552c:	2000054c 	.word	0x2000054c

00015530 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   15530:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15532:	4c06      	ldr	r4, [pc, #24]	; (1554c <init_mem_slab_module+0x1c>)
	int rc = 0;
   15534:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15536:	4b06      	ldr	r3, [pc, #24]	; (15550 <init_mem_slab_module+0x20>)
   15538:	429c      	cmp	r4, r3
   1553a:	d206      	bcs.n	1554a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1553c:	4620      	mov	r0, r4
   1553e:	f006 fcba 	bl	1beb6 <create_free_list>
		if (rc < 0) {
   15542:	2800      	cmp	r0, #0
   15544:	db01      	blt.n	1554a <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15546:	341c      	adds	r4, #28
   15548:	e7f5      	b.n	15536 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1554a:	bd10      	pop	{r4, pc}
   1554c:	2000054c 	.word	0x2000054c
   15550:	2000054c 	.word	0x2000054c

00015554 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15554:	b5f0      	push	{r4, r5, r6, r7, lr}
   15556:	b083      	sub	sp, #12
   15558:	460c      	mov	r4, r1
   1555a:	461f      	mov	r7, r3
	__asm__ volatile(
   1555c:	f04f 0340 	mov.w	r3, #64	; 0x40
   15560:	f3ef 8111 	mrs	r1, BASEPRI
   15564:	f383 8812 	msr	BASEPRI_MAX, r3
   15568:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1556c:	6943      	ldr	r3, [r0, #20]
   1556e:	b16b      	cbz	r3, 1558c <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   15570:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   15572:	6943      	ldr	r3, [r0, #20]
   15574:	681b      	ldr	r3, [r3, #0]
   15576:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   15578:	6983      	ldr	r3, [r0, #24]
   1557a:	3301      	adds	r3, #1
   1557c:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1557e:	2000      	movs	r0, #0
	__asm__ volatile(
   15580:	f381 8811 	msr	BASEPRI, r1
   15584:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   15588:	b003      	add	sp, #12
   1558a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1558c:	4616      	mov	r6, r2
   1558e:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   15592:	ea56 0307 	orrs.w	r3, r6, r7
   15596:	d104      	bne.n	155a2 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   15598:	2300      	movs	r3, #0
   1559a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1559c:	f06f 000b 	mvn.w	r0, #11
   155a0:	e7ee      	b.n	15580 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   155a2:	e9cd 6700 	strd	r6, r7, [sp]
   155a6:	4602      	mov	r2, r0
   155a8:	4628      	mov	r0, r5
   155aa:	f000 fdcb 	bl	16144 <z_pend_curr>
		if (result == 0) {
   155ae:	2800      	cmp	r0, #0
   155b0:	d1ea      	bne.n	15588 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   155b2:	4b02      	ldr	r3, [pc, #8]	; (155bc <k_mem_slab_alloc+0x68>)
   155b4:	689b      	ldr	r3, [r3, #8]
   155b6:	695b      	ldr	r3, [r3, #20]
   155b8:	6023      	str	r3, [r4, #0]
		return result;
   155ba:	e7e5      	b.n	15588 <k_mem_slab_alloc+0x34>
   155bc:	20002370 	.word	0x20002370

000155c0 <z_thread_monitor_exit>:
	__asm__ volatile(
   155c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   155c4:	f3ef 8111 	mrs	r1, BASEPRI
   155c8:	f383 8812 	msr	BASEPRI_MAX, r3
   155cc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   155d0:	4b0a      	ldr	r3, [pc, #40]	; (155fc <z_thread_monitor_exit+0x3c>)
   155d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155d4:	4283      	cmp	r3, r0
   155d6:	d104      	bne.n	155e2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   155d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   155da:	4b08      	ldr	r3, [pc, #32]	; (155fc <z_thread_monitor_exit+0x3c>)
   155dc:	629a      	str	r2, [r3, #40]	; 0x28
   155de:	e007      	b.n	155f0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   155e0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   155e2:	b113      	cbz	r3, 155ea <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   155e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   155e6:	4282      	cmp	r2, r0
   155e8:	d1fa      	bne.n	155e0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   155ea:	b10b      	cbz	r3, 155f0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   155ec:	6f42      	ldr	r2, [r0, #116]	; 0x74
   155ee:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   155f0:	f381 8811 	msr	BASEPRI, r1
   155f4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   155f8:	4770      	bx	lr
   155fa:	bf00      	nop
   155fc:	20002370 	.word	0x20002370

00015600 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   15600:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   15602:	4604      	mov	r4, r0
   15604:	b140      	cbz	r0, 15618 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   15606:	2220      	movs	r2, #32
   15608:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1560c:	f005 fa26 	bl	1aa5c <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   15610:	2000      	movs	r0, #0
   15612:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   15616:	bd10      	pop	{r4, pc}
		thread = _current;
   15618:	4b01      	ldr	r3, [pc, #4]	; (15620 <z_impl_k_thread_name_set+0x20>)
   1561a:	689c      	ldr	r4, [r3, #8]
   1561c:	e7f3      	b.n	15606 <z_impl_k_thread_name_set+0x6>
   1561e:	bf00      	nop
   15620:	20002370 	.word	0x20002370

00015624 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   15624:	b538      	push	{r3, r4, r5, lr}
   15626:	4614      	mov	r4, r2
   15628:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1562a:	ea54 0305 	orrs.w	r3, r4, r5
   1562e:	d102      	bne.n	15636 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   15630:	f006 fcac 	bl	1bf8c <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   15634:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   15636:	462b      	mov	r3, r5
   15638:	4902      	ldr	r1, [pc, #8]	; (15644 <schedule_new_thread+0x20>)
   1563a:	3018      	adds	r0, #24
   1563c:	f001 f82a 	bl	16694 <z_add_timeout>
   15640:	e7f8      	b.n	15634 <schedule_new_thread+0x10>
   15642:	bf00      	nop
   15644:	0001c42b 	.word	0x0001c42b

00015648 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   15648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1564c:	b085      	sub	sp, #20
   1564e:	4604      	mov	r4, r0
   15650:	460f      	mov	r7, r1
   15652:	4615      	mov	r5, r2
   15654:	461e      	mov	r6, r3
   15656:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1565a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1565e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   15662:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   15666:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1566a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1566c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1566e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15670:	2204      	movs	r2, #4
   15672:	9911      	ldr	r1, [sp, #68]	; 0x44
   15674:	f006 fc8e 	bl	1bf94 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   15678:	462a      	mov	r2, r5
   1567a:	4639      	mov	r1, r7
   1567c:	4620      	mov	r0, r4
   1567e:	f006 fc6b 	bl	1bf58 <setup_thread_stack>
   15682:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15684:	f8cd 8008 	str.w	r8, [sp, #8]
   15688:	f8cd 9004 	str.w	r9, [sp, #4]
   1568c:	f8cd a000 	str.w	sl, [sp]
   15690:	4633      	mov	r3, r6
   15692:	4602      	mov	r2, r0
   15694:	4639      	mov	r1, r7
   15696:	4620      	mov	r0, r4
   15698:	f7fa fd3c 	bl	10114 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1569c:	2300      	movs	r3, #0
   1569e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   156a0:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   156a2:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   156a6:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   156aa:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   156ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   156b2:	f3ef 8211 	mrs	r2, BASEPRI
   156b6:	f383 8812 	msr	BASEPRI_MAX, r3
   156ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   156be:	4b13      	ldr	r3, [pc, #76]	; (1570c <z_setup_new_thread+0xc4>)
   156c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   156c2:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   156c4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   156c6:	f382 8811 	msr	BASEPRI, r2
   156ca:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   156ce:	f1bb 0f00 	cmp.w	fp, #0
   156d2:	d013      	beq.n	156fc <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   156d4:	221f      	movs	r2, #31
   156d6:	4659      	mov	r1, fp
   156d8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   156dc:	f005 f9be 	bl	1aa5c <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   156e0:	2300      	movs	r3, #0
   156e2:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   156e6:	4b09      	ldr	r3, [pc, #36]	; (1570c <z_setup_new_thread+0xc4>)
   156e8:	689b      	ldr	r3, [r3, #8]
   156ea:	b15b      	cbz	r3, 15704 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   156ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   156f0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   156f4:	4628      	mov	r0, r5
   156f6:	b005      	add	sp, #20
   156f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   156fc:	2300      	movs	r3, #0
   156fe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15702:	e7f0      	b.n	156e6 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   15704:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   15708:	e7f4      	b.n	156f4 <z_setup_new_thread+0xac>
   1570a:	bf00      	nop
   1570c:	20002370 	.word	0x20002370

00015710 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   15710:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15714:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   15716:	4c23      	ldr	r4, [pc, #140]	; (157a4 <z_init_static_threads+0x94>)
   15718:	4b23      	ldr	r3, [pc, #140]	; (157a8 <z_init_static_threads+0x98>)
   1571a:	429c      	cmp	r4, r3
   1571c:	d215      	bcs.n	1574a <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1571e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15720:	9305      	str	r3, [sp, #20]
   15722:	6a23      	ldr	r3, [r4, #32]
   15724:	9304      	str	r3, [sp, #16]
   15726:	69e3      	ldr	r3, [r4, #28]
   15728:	9303      	str	r3, [sp, #12]
   1572a:	69a3      	ldr	r3, [r4, #24]
   1572c:	9302      	str	r3, [sp, #8]
   1572e:	6963      	ldr	r3, [r4, #20]
   15730:	9301      	str	r3, [sp, #4]
   15732:	6923      	ldr	r3, [r4, #16]
   15734:	9300      	str	r3, [sp, #0]
   15736:	68e3      	ldr	r3, [r4, #12]
   15738:	68a2      	ldr	r2, [r4, #8]
   1573a:	6861      	ldr	r1, [r4, #4]
   1573c:	6820      	ldr	r0, [r4, #0]
   1573e:	f7ff ff83 	bl	15648 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   15742:	6823      	ldr	r3, [r4, #0]
   15744:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   15746:	3430      	adds	r4, #48	; 0x30
   15748:	e7e6      	b.n	15718 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1574a:	f000 fbb3 	bl	15eb4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1574e:	4c15      	ldr	r4, [pc, #84]	; (157a4 <z_init_static_threads+0x94>)
   15750:	e01b      	b.n	1578a <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   15752:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   15754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15758:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   1575c:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   15760:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   15764:	03d8      	lsls	r0, r3, #15
   15766:	f240 35e7 	movw	r5, #999	; 0x3e7
   1576a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1576e:	2300      	movs	r3, #0
   15770:	1940      	adds	r0, r0, r5
   15772:	f04f 0500 	mov.w	r5, #0
   15776:	eb45 0101 	adc.w	r1, r5, r1
   1577a:	f7eb f8b7 	bl	8ec <__aeabi_uldivmod>
   1577e:	4602      	mov	r2, r0
   15780:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   15782:	4630      	mov	r0, r6
   15784:	f7ff ff4e 	bl	15624 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   15788:	3430      	adds	r4, #48	; 0x30
   1578a:	4b07      	ldr	r3, [pc, #28]	; (157a8 <z_init_static_threads+0x98>)
   1578c:	429c      	cmp	r4, r3
   1578e:	d204      	bcs.n	1579a <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15790:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15792:	f1b3 3fff 	cmp.w	r3, #4294967295
   15796:	d0f7      	beq.n	15788 <z_init_static_threads+0x78>
   15798:	e7db      	b.n	15752 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1579a:	f000 fd89 	bl	162b0 <k_sched_unlock>
}
   1579e:	b006      	add	sp, #24
   157a0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   157a4:	2000054c 	.word	0x2000054c
   157a8:	2000054c 	.word	0x2000054c

000157ac <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   157ac:	b508      	push	{r3, lr}
   157ae:	e001      	b.n	157b4 <idle+0x8>
	arch_cpu_idle();
   157b0:	f7fa fb74 	bl	fe9c <arch_cpu_idle>
	__asm__ volatile(
   157b4:	f04f 0240 	mov.w	r2, #64	; 0x40
   157b8:	f3ef 8311 	mrs	r3, BASEPRI
   157bc:	f382 8812 	msr	BASEPRI_MAX, r2
   157c0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   157c4:	f006 ff83 	bl	1c6ce <z_get_next_timeout_expiry>
   157c8:	4b03      	ldr	r3, [pc, #12]	; (157d8 <idle+0x2c>)
   157ca:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   157cc:	f7fa f9d0 	bl	fb70 <pm_system_suspend>
   157d0:	2800      	cmp	r0, #0
   157d2:	d1ef      	bne.n	157b4 <idle+0x8>
   157d4:	e7ec      	b.n	157b0 <idle+0x4>
   157d6:	bf00      	nop
   157d8:	20002370 	.word	0x20002370

000157dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   157dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   157e0:	b083      	sub	sp, #12
   157e2:	4604      	mov	r4, r0
   157e4:	461d      	mov	r5, r3
   157e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   157ea:	f3ef 8711 	mrs	r7, BASEPRI
   157ee:	f383 8812 	msr	BASEPRI_MAX, r3
   157f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   157f6:	68c1      	ldr	r1, [r0, #12]
   157f8:	b999      	cbnz	r1, 15822 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   157fa:	2900      	cmp	r1, #0
   157fc:	d14f      	bne.n	1589e <z_impl_k_mutex_lock+0xc2>
   157fe:	4b3a      	ldr	r3, [pc, #232]	; (158e8 <z_impl_k_mutex_lock+0x10c>)
   15800:	689b      	ldr	r3, [r3, #8]
   15802:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   15806:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   15808:	3101      	adds	r1, #1
   1580a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1580c:	4b36      	ldr	r3, [pc, #216]	; (158e8 <z_impl_k_mutex_lock+0x10c>)
   1580e:	689b      	ldr	r3, [r3, #8]
   15810:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   15812:	f387 8811 	msr	BASEPRI, r7
   15816:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1581a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1581c:	b003      	add	sp, #12
   1581e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15822:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   15824:	6882      	ldr	r2, [r0, #8]
   15826:	4b30      	ldr	r3, [pc, #192]	; (158e8 <z_impl_k_mutex_lock+0x10c>)
   15828:	689b      	ldr	r3, [r3, #8]
   1582a:	429a      	cmp	r2, r3
   1582c:	d0e5      	beq.n	157fa <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1582e:	ea55 0106 	orrs.w	r1, r5, r6
   15832:	bf0c      	ite	eq
   15834:	f04f 0801 	moveq.w	r8, #1
   15838:	f04f 0800 	movne.w	r8, #0
   1583c:	d031      	beq.n	158a2 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1583e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   15842:	4649      	mov	r1, r9
   15844:	f993 000e 	ldrsb.w	r0, [r3, #14]
   15848:	f006 fbd7 	bl	1bffa <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1584c:	4581      	cmp	r9, r0
   1584e:	dc2f      	bgt.n	158b0 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   15850:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   15854:	9600      	str	r6, [sp, #0]
   15856:	9501      	str	r5, [sp, #4]
   15858:	4622      	mov	r2, r4
   1585a:	4639      	mov	r1, r7
   1585c:	4823      	ldr	r0, [pc, #140]	; (158ec <z_impl_k_mutex_lock+0x110>)
   1585e:	f000 fc71 	bl	16144 <z_pend_curr>
	if (got_mutex == 0) {
   15862:	2800      	cmp	r0, #0
   15864:	d0da      	beq.n	1581c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   15866:	f04f 0340 	mov.w	r3, #64	; 0x40
   1586a:	f3ef 8511 	mrs	r5, BASEPRI
   1586e:	f383 8812 	msr	BASEPRI_MAX, r3
   15872:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   15876:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15878:	42a3      	cmp	r3, r4
   1587a:	d01f      	beq.n	158bc <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1587c:	b1f3      	cbz	r3, 158bc <z_impl_k_mutex_lock+0xe0>
   1587e:	6921      	ldr	r1, [r4, #16]
   15880:	f993 000e 	ldrsb.w	r0, [r3, #14]
   15884:	f006 fbb9 	bl	1bffa <new_prio_for_inheritance>
   15888:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1588a:	4620      	mov	r0, r4
   1588c:	f006 fbc0 	bl	1c010 <adjust_owner_prio>
   15890:	b9b0      	cbnz	r0, 158c0 <z_impl_k_mutex_lock+0xe4>
   15892:	f1b9 0f00 	cmp.w	r9, #0
   15896:	d015      	beq.n	158c4 <z_impl_k_mutex_lock+0xe8>
   15898:	f04f 0801 	mov.w	r8, #1
   1589c:	e012      	b.n	158c4 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1589e:	6923      	ldr	r3, [r4, #16]
   158a0:	e7b1      	b.n	15806 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   158a2:	f387 8811 	msr	BASEPRI, r7
   158a6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   158aa:	f06f 000f 	mvn.w	r0, #15
   158ae:	e7b5      	b.n	1581c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   158b0:	4601      	mov	r1, r0
   158b2:	4620      	mov	r0, r4
   158b4:	f006 fbac 	bl	1c010 <adjust_owner_prio>
   158b8:	4681      	mov	r9, r0
   158ba:	e7cb      	b.n	15854 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   158bc:	6921      	ldr	r1, [r4, #16]
   158be:	e7e4      	b.n	1588a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   158c0:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   158c4:	f1b8 0f00 	cmp.w	r8, #0
   158c8:	d106      	bne.n	158d8 <z_impl_k_mutex_lock+0xfc>
   158ca:	f385 8811 	msr	BASEPRI, r5
   158ce:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   158d2:	f06f 000a 	mvn.w	r0, #10
   158d6:	e7a1      	b.n	1581c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   158d8:	4629      	mov	r1, r5
   158da:	4804      	ldr	r0, [pc, #16]	; (158ec <z_impl_k_mutex_lock+0x110>)
   158dc:	f000 face 	bl	15e7c <z_reschedule>
	return -EAGAIN;
   158e0:	f06f 000a 	mvn.w	r0, #10
   158e4:	e79a      	b.n	1581c <z_impl_k_mutex_lock+0x40>
   158e6:	bf00      	nop
   158e8:	20002370 	.word	0x20002370
   158ec:	2000239c 	.word	0x2000239c

000158f0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   158f0:	6882      	ldr	r2, [r0, #8]
   158f2:	2a00      	cmp	r2, #0
   158f4:	d035      	beq.n	15962 <z_impl_k_mutex_unlock+0x72>
{
   158f6:	b538      	push	{r3, r4, r5, lr}
   158f8:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   158fa:	4b1d      	ldr	r3, [pc, #116]	; (15970 <z_impl_k_mutex_unlock+0x80>)
   158fc:	689b      	ldr	r3, [r3, #8]
   158fe:	429a      	cmp	r2, r3
   15900:	d132      	bne.n	15968 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   15902:	7bda      	ldrb	r2, [r3, #15]
   15904:	3a01      	subs	r2, #1
   15906:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   15908:	68c3      	ldr	r3, [r0, #12]
   1590a:	2b01      	cmp	r3, #1
   1590c:	d905      	bls.n	1591a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1590e:	3b01      	subs	r3, #1
   15910:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   15912:	f000 fccd 	bl	162b0 <k_sched_unlock>

	return 0;
   15916:	2000      	movs	r0, #0
}
   15918:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1591a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1591e:	f3ef 8511 	mrs	r5, BASEPRI
   15922:	f383 8812 	msr	BASEPRI_MAX, r3
   15926:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1592a:	6901      	ldr	r1, [r0, #16]
   1592c:	f006 fb70 	bl	1c010 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   15930:	4620      	mov	r0, r4
   15932:	f006 fe20 	bl	1c576 <z_unpend_first_thread>
	mutex->owner = new_owner;
   15936:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   15938:	b160      	cbz	r0, 15954 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1593a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1593e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   15940:	2300      	movs	r3, #0
   15942:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   15946:	f006 fd54 	bl	1c3f2 <z_ready_thread>
		z_reschedule(&lock, key);
   1594a:	4629      	mov	r1, r5
   1594c:	4809      	ldr	r0, [pc, #36]	; (15974 <z_impl_k_mutex_unlock+0x84>)
   1594e:	f000 fa95 	bl	15e7c <z_reschedule>
   15952:	e7de      	b.n	15912 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   15954:	2300      	movs	r3, #0
   15956:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   15958:	f385 8811 	msr	BASEPRI, r5
   1595c:	f3bf 8f6f 	isb	sy
   15960:	e7d7      	b.n	15912 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   15962:	f06f 0015 	mvn.w	r0, #21
}
   15966:	4770      	bx	lr
		return -EPERM;
   15968:	f04f 30ff 	mov.w	r0, #4294967295
   1596c:	e7d4      	b.n	15918 <z_impl_k_mutex_unlock+0x28>
   1596e:	bf00      	nop
   15970:	20002370 	.word	0x20002370
   15974:	2000239c 	.word	0x2000239c

00015978 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   15978:	b5d0      	push	{r4, r6, r7, lr}
   1597a:	b082      	sub	sp, #8
   1597c:	4601      	mov	r1, r0
   1597e:	4616      	mov	r6, r2
   15980:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   15982:	4602      	mov	r2, r0
	__asm__ volatile(
   15984:	f04f 0340 	mov.w	r3, #64	; 0x40
   15988:	f3ef 8411 	mrs	r4, BASEPRI
   1598c:	f383 8812 	msr	BASEPRI_MAX, r3
   15990:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   15994:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   15998:	b188      	cbz	r0, 159be <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1599a:	6803      	ldr	r3, [r0, #0]
   1599c:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   159a0:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   159a2:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   159a4:	4290      	cmp	r0, r2
   159a6:	d008      	beq.n	159ba <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   159a8:	2101      	movs	r1, #1
   159aa:	f006 fbb6 	bl	1c11a <z_queue_node_peek>
	__asm__ volatile(
   159ae:	f384 8811 	msr	BASEPRI, r4
   159b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   159b6:	b002      	add	sp, #8
   159b8:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   159ba:	604b      	str	r3, [r1, #4]
}
   159bc:	e7f4      	b.n	159a8 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   159be:	ea56 0307 	orrs.w	r3, r6, r7
   159c2:	d00a      	beq.n	159da <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   159c4:	e9cd 6700 	strd	r6, r7, [sp]
   159c8:	4621      	mov	r1, r4
   159ca:	4610      	mov	r0, r2
   159cc:	f000 fbba 	bl	16144 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   159d0:	b948      	cbnz	r0, 159e6 <z_impl_k_queue_get+0x6e>
   159d2:	4b06      	ldr	r3, [pc, #24]	; (159ec <z_impl_k_queue_get+0x74>)
   159d4:	689b      	ldr	r3, [r3, #8]
   159d6:	6958      	ldr	r0, [r3, #20]
   159d8:	e7ed      	b.n	159b6 <z_impl_k_queue_get+0x3e>
   159da:	f384 8811 	msr	BASEPRI, r4
   159de:	f3bf 8f6f 	isb	sy
		return NULL;
   159e2:	2000      	movs	r0, #0
   159e4:	e7e7      	b.n	159b6 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   159e6:	2000      	movs	r0, #0
   159e8:	e7e5      	b.n	159b6 <z_impl_k_queue_get+0x3e>
   159ea:	bf00      	nop
   159ec:	20002370 	.word	0x20002370

000159f0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   159f0:	b538      	push	{r3, r4, r5, lr}
   159f2:	4604      	mov	r4, r0
	__asm__ volatile(
   159f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   159f8:	f3ef 8511 	mrs	r5, BASEPRI
   159fc:	f383 8812 	msr	BASEPRI_MAX, r3
   15a00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   15a04:	f006 fdb7 	bl	1c576 <z_unpend_first_thread>

	if (thread != NULL) {
   15a08:	b148      	cbz	r0, 15a1e <z_impl_k_sem_give+0x2e>
   15a0a:	2200      	movs	r2, #0
   15a0c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   15a10:	f006 fcef 	bl	1c3f2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   15a14:	4629      	mov	r1, r5
   15a16:	4809      	ldr	r0, [pc, #36]	; (15a3c <z_impl_k_sem_give+0x4c>)
   15a18:	f000 fa30 	bl	15e7c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   15a1c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15a1e:	68a3      	ldr	r3, [r4, #8]
   15a20:	68e2      	ldr	r2, [r4, #12]
   15a22:	4293      	cmp	r3, r2
   15a24:	d008      	beq.n	15a38 <z_impl_k_sem_give+0x48>
   15a26:	2201      	movs	r2, #1
   15a28:	4413      	add	r3, r2
   15a2a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   15a2c:	2102      	movs	r1, #2
   15a2e:	f104 0010 	add.w	r0, r4, #16
   15a32:	f006 ff60 	bl	1c8f6 <z_handle_obj_poll_events>
}
   15a36:	e7ed      	b.n	15a14 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15a38:	2200      	movs	r2, #0
   15a3a:	e7f5      	b.n	15a28 <z_impl_k_sem_give+0x38>
   15a3c:	2000239c 	.word	0x2000239c

00015a40 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15a40:	b530      	push	{r4, r5, lr}
   15a42:	b083      	sub	sp, #12
   15a44:	461d      	mov	r5, r3
   15a46:	f04f 0340 	mov.w	r3, #64	; 0x40
   15a4a:	f3ef 8111 	mrs	r1, BASEPRI
   15a4e:	f383 8812 	msr	BASEPRI_MAX, r3
   15a52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   15a56:	6883      	ldr	r3, [r0, #8]
   15a58:	b143      	cbz	r3, 15a6c <z_impl_k_sem_take+0x2c>
		sem->count--;
   15a5a:	3b01      	subs	r3, #1
   15a5c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   15a5e:	f381 8811 	msr	BASEPRI, r1
   15a62:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15a66:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   15a68:	b003      	add	sp, #12
   15a6a:	bd30      	pop	{r4, r5, pc}
   15a6c:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15a6e:	ea54 0305 	orrs.w	r3, r4, r5
   15a72:	d006      	beq.n	15a82 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   15a74:	e9cd 4500 	strd	r4, r5, [sp]
   15a78:	4602      	mov	r2, r0
   15a7a:	4805      	ldr	r0, [pc, #20]	; (15a90 <z_impl_k_sem_take+0x50>)
   15a7c:	f000 fb62 	bl	16144 <z_pend_curr>
	return ret;
   15a80:	e7f2      	b.n	15a68 <z_impl_k_sem_take+0x28>
   15a82:	f381 8811 	msr	BASEPRI, r1
   15a86:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   15a8a:	f06f 000f 	mvn.w	r0, #15
   15a8e:	e7eb      	b.n	15a68 <z_impl_k_sem_take+0x28>
   15a90:	2000239c 	.word	0x2000239c

00015a94 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   15a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a96:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   15a98:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15a9a:	f013 0f02 	tst.w	r3, #2
   15a9e:	d15b      	bne.n	15b58 <submit_to_queue_locked+0xc4>
   15aa0:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   15aa2:	f013 0f04 	tst.w	r3, #4
   15aa6:	d15c      	bne.n	15b62 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   15aa8:	680b      	ldr	r3, [r1, #0]
   15aaa:	2b00      	cmp	r3, #0
   15aac:	d037      	beq.n	15b1e <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   15aae:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   15ab0:	f013 0f01 	tst.w	r3, #1
   15ab4:	d036      	beq.n	15b24 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   15ab6:	68a3      	ldr	r3, [r4, #8]
   15ab8:	602b      	str	r3, [r5, #0]
			ret = 2;
   15aba:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   15abc:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   15abe:	2e00      	cmp	r6, #0
   15ac0:	d03e      	beq.n	15b40 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   15ac2:	4b29      	ldr	r3, [pc, #164]	; (15b68 <submit_to_queue_locked+0xd4>)
   15ac4:	689b      	ldr	r3, [r3, #8]
   15ac6:	42b3      	cmp	r3, r6
   15ac8:	d02e      	beq.n	15b28 <submit_to_queue_locked+0x94>
   15aca:	2300      	movs	r3, #0
   15acc:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   15ace:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   15ad2:	f3c3 0180 	ubfx	r1, r3, #2, #1
   15ad6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15ada:	f013 0f01 	tst.w	r3, #1
   15ade:	d032      	beq.n	15b46 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   15ae0:	b101      	cbz	r1, 15ae4 <submit_to_queue_locked+0x50>
   15ae2:	b39a      	cbz	r2, 15b4c <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   15ae4:	b100      	cbz	r0, 15ae8 <submit_to_queue_locked+0x54>
   15ae6:	b3a1      	cbz	r1, 15b52 <submit_to_queue_locked+0xbe>
	parent->next = child;
   15ae8:	2300      	movs	r3, #0
   15aea:	6023      	str	r3, [r4, #0]
	return list->tail;
   15aec:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   15af0:	b30b      	cbz	r3, 15b36 <submit_to_queue_locked+0xa2>
	parent->next = child;
   15af2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15af4:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   15af8:	2200      	movs	r2, #0
   15afa:	4611      	mov	r1, r2
   15afc:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   15b00:	f006 fd79 	bl	1c5f6 <z_sched_wake>
		ret = 1;
   15b04:	2001      	movs	r0, #1

		if (rc < 0) {
   15b06:	2800      	cmp	r0, #0
   15b08:	db06      	blt.n	15b18 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   15b0a:	68e3      	ldr	r3, [r4, #12]
   15b0c:	f043 0304 	orr.w	r3, r3, #4
   15b10:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   15b12:	682b      	ldr	r3, [r5, #0]
   15b14:	60a3      	str	r3, [r4, #8]
   15b16:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   15b18:	2800      	cmp	r0, #0
   15b1a:	dc21      	bgt.n	15b60 <submit_to_queue_locked+0xcc>
   15b1c:	e01e      	b.n	15b5c <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   15b1e:	6883      	ldr	r3, [r0, #8]
   15b20:	600b      	str	r3, [r1, #0]
   15b22:	e7c4      	b.n	15aae <submit_to_queue_locked+0x1a>
		ret = 1;
   15b24:	2701      	movs	r7, #1
   15b26:	e7c9      	b.n	15abc <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   15b28:	f006 fa28 	bl	1bf7c <k_is_in_isr>
   15b2c:	b908      	cbnz	r0, 15b32 <submit_to_queue_locked+0x9e>
   15b2e:	2301      	movs	r3, #1
   15b30:	e7cc      	b.n	15acc <submit_to_queue_locked+0x38>
   15b32:	2300      	movs	r3, #0
   15b34:	e7ca      	b.n	15acc <submit_to_queue_locked+0x38>
   15b36:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   15b3a:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   15b3e:	e7db      	b.n	15af8 <submit_to_queue_locked+0x64>
		return -EINVAL;
   15b40:	f06f 0015 	mvn.w	r0, #21
   15b44:	e7df      	b.n	15b06 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   15b46:	f06f 0012 	mvn.w	r0, #18
   15b4a:	e7dc      	b.n	15b06 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   15b4c:	f06f 000f 	mvn.w	r0, #15
   15b50:	e7d9      	b.n	15b06 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   15b52:	f06f 000f 	mvn.w	r0, #15
   15b56:	e7d6      	b.n	15b06 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   15b58:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   15b5c:	2300      	movs	r3, #0
   15b5e:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   15b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   15b62:	2000      	movs	r0, #0
   15b64:	e7fa      	b.n	15b5c <submit_to_queue_locked+0xc8>
   15b66:	bf00      	nop
   15b68:	20002370 	.word	0x20002370

00015b6c <finalize_cancel_locked>:
{
   15b6c:	b570      	push	{r4, r5, r6, lr}
   15b6e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   15b70:	68c3      	ldr	r3, [r0, #12]
   15b72:	f023 0302 	bic.w	r3, r3, #2
   15b76:	60c3      	str	r3, [r0, #12]
	return list->head;
   15b78:	4b19      	ldr	r3, [pc, #100]	; (15be0 <finalize_cancel_locked+0x74>)
   15b7a:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15b7c:	b1e8      	cbz	r0, 15bba <finalize_cancel_locked+0x4e>
   15b7e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   15b80:	b100      	cbz	r0, 15b84 <finalize_cancel_locked+0x18>
	return node->next;
   15b82:	6804      	ldr	r4, [r0, #0]
   15b84:	2600      	movs	r6, #0
   15b86:	e01d      	b.n	15bc4 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   15b88:	b15e      	cbz	r6, 15ba2 <finalize_cancel_locked+0x36>
	return node->next;
   15b8a:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   15b8c:	6033      	str	r3, [r6, #0]
	return list->tail;
   15b8e:	4b14      	ldr	r3, [pc, #80]	; (15be0 <finalize_cancel_locked+0x74>)
   15b90:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   15b92:	4298      	cmp	r0, r3
   15b94:	d00e      	beq.n	15bb4 <finalize_cancel_locked+0x48>
	parent->next = child;
   15b96:	2300      	movs	r3, #0
   15b98:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   15b9c:	f7ff ff28 	bl	159f0 <z_impl_k_sem_give>
}
   15ba0:	e015      	b.n	15bce <finalize_cancel_locked+0x62>
	return node->next;
   15ba2:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   15ba4:	4b0e      	ldr	r3, [pc, #56]	; (15be0 <finalize_cancel_locked+0x74>)
   15ba6:	601a      	str	r2, [r3, #0]
	return list->tail;
   15ba8:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   15baa:	4298      	cmp	r0, r3
   15bac:	d1f3      	bne.n	15b96 <finalize_cancel_locked+0x2a>
	list->tail = node;
   15bae:	4b0c      	ldr	r3, [pc, #48]	; (15be0 <finalize_cancel_locked+0x74>)
   15bb0:	605a      	str	r2, [r3, #4]
}
   15bb2:	e7f0      	b.n	15b96 <finalize_cancel_locked+0x2a>
	list->tail = node;
   15bb4:	4b0a      	ldr	r3, [pc, #40]	; (15be0 <finalize_cancel_locked+0x74>)
   15bb6:	605e      	str	r6, [r3, #4]
}
   15bb8:	e7ed      	b.n	15b96 <finalize_cancel_locked+0x2a>
   15bba:	4604      	mov	r4, r0
   15bbc:	e7e2      	b.n	15b84 <finalize_cancel_locked+0x18>
   15bbe:	4623      	mov	r3, r4
   15bc0:	4620      	mov	r0, r4
   15bc2:	461c      	mov	r4, r3
   15bc4:	b150      	cbz	r0, 15bdc <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   15bc6:	6843      	ldr	r3, [r0, #4]
   15bc8:	42ab      	cmp	r3, r5
   15bca:	d0dd      	beq.n	15b88 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   15bcc:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15bce:	2c00      	cmp	r4, #0
   15bd0:	d0f5      	beq.n	15bbe <finalize_cancel_locked+0x52>
   15bd2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   15bd4:	2c00      	cmp	r4, #0
   15bd6:	d0f3      	beq.n	15bc0 <finalize_cancel_locked+0x54>
	return node->next;
   15bd8:	6823      	ldr	r3, [r4, #0]
   15bda:	e7f1      	b.n	15bc0 <finalize_cancel_locked+0x54>
}
   15bdc:	bd70      	pop	{r4, r5, r6, pc}
   15bde:	bf00      	nop
   15be0:	2000239c 	.word	0x2000239c

00015be4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   15be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15be6:	b085      	sub	sp, #20
   15be8:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   15bea:	e016      	b.n	15c1a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   15bec:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   15bf0:	f023 0204 	bic.w	r2, r3, #4
   15bf4:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   15bf8:	f013 0f04 	tst.w	r3, #4
   15bfc:	d158      	bne.n	15cb0 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   15bfe:	2300      	movs	r3, #0
   15c00:	9302      	str	r3, [sp, #8]
   15c02:	f04f 32ff 	mov.w	r2, #4294967295
   15c06:	f04f 33ff 	mov.w	r3, #4294967295
   15c0a:	e9cd 2300 	strd	r2, r3, [sp]
   15c0e:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   15c12:	4631      	mov	r1, r6
   15c14:	482e      	ldr	r0, [pc, #184]	; (15cd0 <work_queue_main+0xec>)
   15c16:	f000 fcc9 	bl	165ac <z_sched_wait>
	__asm__ volatile(
   15c1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15c1e:	f3ef 8611 	mrs	r6, BASEPRI
   15c22:	f383 8812 	msr	BASEPRI_MAX, r3
   15c26:	f3bf 8f6f 	isb	sy
	return list->head;
   15c2a:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   15c2e:	2c00      	cmp	r4, #0
   15c30:	d0dc      	beq.n	15bec <work_queue_main+0x8>
	return node->next;
   15c32:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   15c34:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   15c38:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15c3c:	4294      	cmp	r4, r2
   15c3e:	d034      	beq.n	15caa <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   15c40:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   15c44:	f043 0302 	orr.w	r3, r3, #2
   15c48:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   15c4c:	68e3      	ldr	r3, [r4, #12]
   15c4e:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   15c52:	f023 0304 	bic.w	r3, r3, #4
   15c56:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   15c58:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   15c5a:	2c00      	cmp	r4, #0
   15c5c:	d0cf      	beq.n	15bfe <work_queue_main+0x1a>
	__asm__ volatile(
   15c5e:	f386 8811 	msr	BASEPRI, r6
   15c62:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   15c66:	4620      	mov	r0, r4
   15c68:	4798      	blx	r3
	__asm__ volatile(
   15c6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   15c6e:	f3ef 8611 	mrs	r6, BASEPRI
   15c72:	f383 8812 	msr	BASEPRI_MAX, r3
   15c76:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   15c7a:	68e3      	ldr	r3, [r4, #12]
   15c7c:	f023 0301 	bic.w	r3, r3, #1
   15c80:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15c82:	f013 0f02 	tst.w	r3, #2
   15c86:	d11e      	bne.n	15cc6 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   15c88:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   15c8c:	f023 0302 	bic.w	r3, r3, #2
   15c90:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   15c94:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   15c98:	f386 8811 	msr	BASEPRI, r6
   15c9c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   15ca0:	2b00      	cmp	r3, #0
   15ca2:	d1ba      	bne.n	15c1a <work_queue_main+0x36>
	z_impl_k_yield();
   15ca4:	f000 fb84 	bl	163b0 <z_impl_k_yield>
}
   15ca8:	e7b7      	b.n	15c1a <work_queue_main+0x36>
	list->tail = node;
   15caa:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   15cae:	e7c7      	b.n	15c40 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   15cb0:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   15cb4:	2200      	movs	r2, #0
   15cb6:	2101      	movs	r1, #1
   15cb8:	4638      	mov	r0, r7
   15cba:	f006 fc9c 	bl	1c5f6 <z_sched_wake>
   15cbe:	2800      	cmp	r0, #0
   15cc0:	d1f8      	bne.n	15cb4 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   15cc2:	2300      	movs	r3, #0
   15cc4:	e7c9      	b.n	15c5a <work_queue_main+0x76>
			finalize_cancel_locked(work);
   15cc6:	4620      	mov	r0, r4
   15cc8:	f7ff ff50 	bl	15b6c <finalize_cancel_locked>
   15ccc:	e7dc      	b.n	15c88 <work_queue_main+0xa4>
   15cce:	bf00      	nop
   15cd0:	2000239c 	.word	0x2000239c

00015cd4 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   15cd4:	b570      	push	{r4, r5, r6, lr}
   15cd6:	4606      	mov	r6, r0
   15cd8:	4608      	mov	r0, r1
   15cda:	4614      	mov	r4, r2
   15cdc:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15cde:	ea54 0305 	orrs.w	r3, r4, r5
   15ce2:	d00c      	beq.n	15cfe <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   15ce4:	68cb      	ldr	r3, [r1, #12]
   15ce6:	f043 0308 	orr.w	r3, r3, #8
   15cea:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   15cec:	6833      	ldr	r3, [r6, #0]
   15cee:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15cf0:	462b      	mov	r3, r5
   15cf2:	4905      	ldr	r1, [pc, #20]	; (15d08 <schedule_for_queue_locked+0x34>)
   15cf4:	3010      	adds	r0, #16
   15cf6:	f000 fccd 	bl	16694 <z_add_timeout>

	return ret;
   15cfa:	2001      	movs	r0, #1
}
   15cfc:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   15cfe:	4631      	mov	r1, r6
   15d00:	f7ff fec8 	bl	15a94 <submit_to_queue_locked>
   15d04:	e7fa      	b.n	15cfc <schedule_for_queue_locked+0x28>
   15d06:	bf00      	nop
   15d08:	0001c1ed 	.word	0x0001c1ed

00015d0c <k_work_submit>:
{
   15d0c:	b508      	push	{r3, lr}
   15d0e:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   15d10:	4801      	ldr	r0, [pc, #4]	; (15d18 <k_work_submit+0xc>)
   15d12:	f006 fa8e 	bl	1c232 <k_work_submit_to_queue>
}
   15d16:	bd08      	pop	{r3, pc}
   15d18:	20001938 	.word	0x20001938

00015d1c <k_work_queue_start>:
{
   15d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d1e:	b089      	sub	sp, #36	; 0x24
   15d20:	4604      	mov	r4, r0
   15d22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   15d24:	2000      	movs	r0, #0
   15d26:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   15d2a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   15d2e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   15d32:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   15d36:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   15d3a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   15d3e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   15d42:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   15d46:	b1fd      	cbz	r5, 15d88 <k_work_queue_start+0x6c>
   15d48:	7928      	ldrb	r0, [r5, #4]
   15d4a:	b9f8      	cbnz	r0, 15d8c <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   15d4c:	2001      	movs	r0, #1
	*flagp = flags;
   15d4e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15d52:	f04f 36ff 	mov.w	r6, #4294967295
   15d56:	f04f 37ff 	mov.w	r7, #4294967295
   15d5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   15d5e:	2000      	movs	r0, #0
   15d60:	9004      	str	r0, [sp, #16]
   15d62:	9303      	str	r3, [sp, #12]
   15d64:	9002      	str	r0, [sp, #8]
   15d66:	9001      	str	r0, [sp, #4]
   15d68:	9400      	str	r4, [sp, #0]
   15d6a:	4b0a      	ldr	r3, [pc, #40]	; (15d94 <k_work_queue_start+0x78>)
   15d6c:	4620      	mov	r0, r4
   15d6e:	f006 f91c 	bl	1bfaa <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   15d72:	b125      	cbz	r5, 15d7e <k_work_queue_start+0x62>
   15d74:	6829      	ldr	r1, [r5, #0]
   15d76:	b111      	cbz	r1, 15d7e <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   15d78:	4620      	mov	r0, r4
   15d7a:	f7ff fc41 	bl	15600 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   15d7e:	4620      	mov	r0, r4
   15d80:	f006 f904 	bl	1bf8c <z_impl_k_thread_start>
}
   15d84:	b009      	add	sp, #36	; 0x24
   15d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   15d88:	2001      	movs	r0, #1
   15d8a:	e7e0      	b.n	15d4e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   15d8c:	f240 1001 	movw	r0, #257	; 0x101
   15d90:	e7dd      	b.n	15d4e <k_work_queue_start+0x32>
   15d92:	bf00      	nop
   15d94:	00015be5 	.word	0x00015be5

00015d98 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   15d98:	b508      	push	{r3, lr}
   15d9a:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   15d9c:	4801      	ldr	r0, [pc, #4]	; (15da4 <k_work_schedule+0xc>)
   15d9e:	f006 fa74 	bl	1c28a <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   15da2:	bd08      	pop	{r3, pc}
   15da4:	20001938 	.word	0x20001938

00015da8 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   15da8:	b508      	push	{r3, lr}
   15daa:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   15dac:	4801      	ldr	r0, [pc, #4]	; (15db4 <k_work_reschedule+0xc>)
   15dae:	f006 fa86 	bl	1c2be <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   15db2:	bd08      	pop	{r3, pc}
   15db4:	20001938 	.word	0x20001938

00015db8 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   15db8:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15dba:	f1b3 3fff 	cmp.w	r3, #4294967295
   15dbe:	bf08      	it	eq
   15dc0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   15dc4:	d100      	bne.n	15dc8 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   15dc6:	bd38      	pop	{r3, r4, r5, pc}
   15dc8:	4902      	ldr	r1, [pc, #8]	; (15dd4 <add_thread_timeout+0x1c>)
   15dca:	3018      	adds	r0, #24
   15dcc:	f000 fc62 	bl	16694 <z_add_timeout>
   15dd0:	e7f9      	b.n	15dc6 <add_thread_timeout+0xe>
   15dd2:	bf00      	nop
   15dd4:	0001c42b 	.word	0x0001c42b

00015dd8 <z_reset_time_slice>:
{
   15dd8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   15dda:	4b08      	ldr	r3, [pc, #32]	; (15dfc <z_reset_time_slice+0x24>)
   15ddc:	681b      	ldr	r3, [r3, #0]
   15dde:	b903      	cbnz	r3, 15de2 <z_reset_time_slice+0xa>
}
   15de0:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   15de2:	f7fd fd1b 	bl	1381c <sys_clock_elapsed>
   15de6:	4603      	mov	r3, r0
   15de8:	4a04      	ldr	r2, [pc, #16]	; (15dfc <z_reset_time_slice+0x24>)
   15dea:	6810      	ldr	r0, [r2, #0]
   15dec:	4403      	add	r3, r0
   15dee:	4a04      	ldr	r2, [pc, #16]	; (15e00 <z_reset_time_slice+0x28>)
   15df0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   15df2:	2100      	movs	r1, #0
   15df4:	f006 fc81 	bl	1c6fa <z_set_timeout_expiry>
}
   15df8:	e7f2      	b.n	15de0 <z_reset_time_slice+0x8>
   15dfa:	bf00      	nop
   15dfc:	200023ac 	.word	0x200023ac
   15e00:	20002370 	.word	0x20002370

00015e04 <k_sched_time_slice_set>:
{
   15e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e08:	4606      	mov	r6, r0
   15e0a:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   15e0c:	2300      	movs	r3, #0
	__asm__ volatile(
   15e0e:	f04f 0240 	mov.w	r2, #64	; 0x40
   15e12:	f3ef 8711 	mrs	r7, BASEPRI
   15e16:	f382 8812 	msr	BASEPRI_MAX, r2
   15e1a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   15e1e:	e009      	b.n	15e34 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   15e20:	4b13      	ldr	r3, [pc, #76]	; (15e70 <k_sched_time_slice_set+0x6c>)
   15e22:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   15e26:	f7ff ffd7 	bl	15dd8 <z_reset_time_slice>
	__asm__ volatile(
   15e2a:	f387 8811 	msr	BASEPRI, r7
   15e2e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15e32:	2301      	movs	r3, #1
   15e34:	b9cb      	cbnz	r3, 15e6a <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   15e36:	2300      	movs	r3, #0
   15e38:	4a0e      	ldr	r2, [pc, #56]	; (15e74 <k_sched_time_slice_set+0x70>)
   15e3a:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   15e3c:	0c75      	lsrs	r5, r6, #17
   15e3e:	03f4      	lsls	r4, r6, #15
   15e40:	f240 30e7 	movw	r0, #999	; 0x3e7
   15e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15e48:	2300      	movs	r3, #0
   15e4a:	1820      	adds	r0, r4, r0
   15e4c:	f04f 0100 	mov.w	r1, #0
   15e50:	eb45 0101 	adc.w	r1, r5, r1
   15e54:	f7ea fd4a 	bl	8ec <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   15e58:	4b07      	ldr	r3, [pc, #28]	; (15e78 <k_sched_time_slice_set+0x74>)
   15e5a:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   15e5c:	2e00      	cmp	r6, #0
   15e5e:	dddf      	ble.n	15e20 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   15e60:	2802      	cmp	r0, #2
   15e62:	bfb8      	it	lt
   15e64:	2002      	movlt	r0, #2
   15e66:	6018      	str	r0, [r3, #0]
   15e68:	e7da      	b.n	15e20 <k_sched_time_slice_set+0x1c>
}
   15e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e6e:	bf00      	nop
   15e70:	200023a8 	.word	0x200023a8
   15e74:	20002370 	.word	0x20002370
   15e78:	200023ac 	.word	0x200023ac

00015e7c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   15e7c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   15e7e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15e80:	b921      	cbnz	r1, 15e8c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15e82:	f3ef 8305 	mrs	r3, IPSR
   15e86:	b913      	cbnz	r3, 15e8e <z_reschedule+0x12>
   15e88:	2101      	movs	r1, #1
   15e8a:	e000      	b.n	15e8e <z_reschedule+0x12>
   15e8c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   15e8e:	f011 0f01 	tst.w	r1, #1
   15e92:	d007      	beq.n	15ea4 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   15e94:	4b06      	ldr	r3, [pc, #24]	; (15eb0 <z_reschedule+0x34>)
   15e96:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   15e98:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   15e9a:	429a      	cmp	r2, r3
   15e9c:	d002      	beq.n	15ea4 <z_reschedule+0x28>
	ret = arch_swap(key);
   15e9e:	f7fa f8e1 	bl	10064 <arch_swap>
		z_swap(lock, key);
   15ea2:	e003      	b.n	15eac <z_reschedule+0x30>
   15ea4:	f380 8811 	msr	BASEPRI, r0
   15ea8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   15eac:	bd08      	pop	{r3, pc}
   15eae:	bf00      	nop
   15eb0:	20002370 	.word	0x20002370

00015eb4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   15eb4:	2300      	movs	r3, #0
	__asm__ volatile(
   15eb6:	f04f 0240 	mov.w	r2, #64	; 0x40
   15eba:	f3ef 8111 	mrs	r1, BASEPRI
   15ebe:	f382 8812 	msr	BASEPRI_MAX, r2
   15ec2:	f3bf 8f6f 	isb	sy
   15ec6:	b953      	cbnz	r3, 15ede <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   15ec8:	4b05      	ldr	r3, [pc, #20]	; (15ee0 <k_sched_lock+0x2c>)
   15eca:	689a      	ldr	r2, [r3, #8]
   15ecc:	7bd3      	ldrb	r3, [r2, #15]
   15ece:	3b01      	subs	r3, #1
   15ed0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   15ed2:	f381 8811 	msr	BASEPRI, r1
   15ed6:	f3bf 8f6f 	isb	sy
   15eda:	2301      	movs	r3, #1
   15edc:	e7f3      	b.n	15ec6 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   15ede:	4770      	bx	lr
   15ee0:	20002370 	.word	0x20002370

00015ee4 <update_cache>:
{
   15ee4:	b538      	push	{r3, r4, r5, lr}
   15ee6:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   15ee8:	480f      	ldr	r0, [pc, #60]	; (15f28 <update_cache+0x44>)
   15eea:	f006 fa7b 	bl	1c3e4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15eee:	4605      	mov	r5, r0
   15ef0:	b170      	cbz	r0, 15f10 <update_cache+0x2c>
	if (preempt_ok != 0) {
   15ef2:	b984      	cbnz	r4, 15f16 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   15ef4:	4b0d      	ldr	r3, [pc, #52]	; (15f2c <update_cache+0x48>)
   15ef6:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   15ef8:	7b5a      	ldrb	r2, [r3, #13]
   15efa:	f012 0f1f 	tst.w	r2, #31
   15efe:	d10a      	bne.n	15f16 <update_cache+0x32>
	return node->next != NULL;
   15f00:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   15f02:	b942      	cbnz	r2, 15f16 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   15f04:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   15f06:	2a7f      	cmp	r2, #127	; 0x7f
   15f08:	d905      	bls.n	15f16 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   15f0a:	4a08      	ldr	r2, [pc, #32]	; (15f2c <update_cache+0x48>)
   15f0c:	61d3      	str	r3, [r2, #28]
   15f0e:	e00a      	b.n	15f26 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15f10:	4b06      	ldr	r3, [pc, #24]	; (15f2c <update_cache+0x48>)
   15f12:	68dd      	ldr	r5, [r3, #12]
   15f14:	e7ed      	b.n	15ef2 <update_cache+0xe>
		if (thread != _current) {
   15f16:	4b05      	ldr	r3, [pc, #20]	; (15f2c <update_cache+0x48>)
   15f18:	689b      	ldr	r3, [r3, #8]
   15f1a:	42ab      	cmp	r3, r5
   15f1c:	d001      	beq.n	15f22 <update_cache+0x3e>
			z_reset_time_slice();
   15f1e:	f7ff ff5b 	bl	15dd8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   15f22:	4b02      	ldr	r3, [pc, #8]	; (15f2c <update_cache+0x48>)
   15f24:	61dd      	str	r5, [r3, #28]
}
   15f26:	bd38      	pop	{r3, r4, r5, pc}
   15f28:	20002390 	.word	0x20002390
   15f2c:	20002370 	.word	0x20002370

00015f30 <move_thread_to_end_of_prio_q>:
{
   15f30:	b538      	push	{r3, r4, r5, lr}
   15f32:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   15f34:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   15f36:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15f3a:	2b00      	cmp	r3, #0
   15f3c:	db28      	blt.n	15f90 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   15f3e:	7b6b      	ldrb	r3, [r5, #13]
   15f40:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15f44:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   15f46:	4b1a      	ldr	r3, [pc, #104]	; (15fb0 <move_thread_to_end_of_prio_q+0x80>)
   15f48:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f4c:	429c      	cmp	r4, r3
   15f4e:	d02d      	beq.n	15fac <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f50:	b16c      	cbz	r4, 15f6e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15f52:	4621      	mov	r1, r4
   15f54:	4628      	mov	r0, r5
   15f56:	f006 f9dc 	bl	1c312 <z_sched_prio_cmp>
   15f5a:	2800      	cmp	r0, #0
   15f5c:	dc20      	bgt.n	15fa0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15f5e:	b134      	cbz	r4, 15f6e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   15f60:	4b13      	ldr	r3, [pc, #76]	; (15fb0 <move_thread_to_end_of_prio_q+0x80>)
   15f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15f64:	429c      	cmp	r4, r3
   15f66:	d002      	beq.n	15f6e <move_thread_to_end_of_prio_q+0x3e>
   15f68:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f6a:	2c00      	cmp	r4, #0
   15f6c:	d1f0      	bne.n	15f50 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   15f6e:	4b10      	ldr	r3, [pc, #64]	; (15fb0 <move_thread_to_end_of_prio_q+0x80>)
   15f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   15f72:	f103 0120 	add.w	r1, r3, #32
   15f76:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   15f78:	606a      	str	r2, [r5, #4]

	tail->next = node;
   15f7a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   15f7c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   15f7e:	4b0c      	ldr	r3, [pc, #48]	; (15fb0 <move_thread_to_end_of_prio_q+0x80>)
   15f80:	6898      	ldr	r0, [r3, #8]
   15f82:	42a8      	cmp	r0, r5
   15f84:	bf14      	ite	ne
   15f86:	2000      	movne	r0, #0
   15f88:	2001      	moveq	r0, #1
   15f8a:	f7ff ffab 	bl	15ee4 <update_cache>
}
   15f8e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15f90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15f94:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   15f96:	4601      	mov	r1, r0
   15f98:	4806      	ldr	r0, [pc, #24]	; (15fb4 <move_thread_to_end_of_prio_q+0x84>)
   15f9a:	f006 f9f8 	bl	1c38e <z_priq_dumb_remove>
}
   15f9e:	e7ce      	b.n	15f3e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   15fa0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   15fa2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15fa4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15fa6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15fa8:	6065      	str	r5, [r4, #4]
}
   15faa:	e7e8      	b.n	15f7e <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15fac:	2400      	movs	r4, #0
   15fae:	e7cf      	b.n	15f50 <move_thread_to_end_of_prio_q+0x20>
   15fb0:	20002370 	.word	0x20002370
   15fb4:	20002390 	.word	0x20002390

00015fb8 <z_time_slice>:
{
   15fb8:	b510      	push	{r4, lr}
	__asm__ volatile(
   15fba:	f04f 0340 	mov.w	r3, #64	; 0x40
   15fbe:	f3ef 8411 	mrs	r4, BASEPRI
   15fc2:	f383 8812 	msr	BASEPRI_MAX, r3
   15fc6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   15fca:	4b1c      	ldr	r3, [pc, #112]	; (1603c <z_time_slice+0x84>)
   15fcc:	689b      	ldr	r3, [r3, #8]
   15fce:	4a1c      	ldr	r2, [pc, #112]	; (16040 <z_time_slice+0x88>)
   15fd0:	6812      	ldr	r2, [r2, #0]
   15fd2:	4293      	cmp	r3, r2
   15fd4:	d01d      	beq.n	16012 <z_time_slice+0x5a>
	pending_current = NULL;
   15fd6:	4a1a      	ldr	r2, [pc, #104]	; (16040 <z_time_slice+0x88>)
   15fd8:	2100      	movs	r1, #0
   15fda:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   15fdc:	4a19      	ldr	r2, [pc, #100]	; (16044 <z_time_slice+0x8c>)
   15fde:	6812      	ldr	r2, [r2, #0]
   15fe0:	b322      	cbz	r2, 1602c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   15fe2:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   15fe4:	2a7f      	cmp	r2, #127	; 0x7f
   15fe6:	d821      	bhi.n	1602c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   15fe8:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   15fea:	f012 0f1f 	tst.w	r2, #31
   15fee:	d11d      	bne.n	1602c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   15ff0:	f993 100e 	ldrsb.w	r1, [r3, #14]
   15ff4:	4a14      	ldr	r2, [pc, #80]	; (16048 <z_time_slice+0x90>)
   15ff6:	6812      	ldr	r2, [r2, #0]
   15ff8:	4291      	cmp	r1, r2
   15ffa:	db17      	blt.n	1602c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   15ffc:	4a13      	ldr	r2, [pc, #76]	; (1604c <z_time_slice+0x94>)
   15ffe:	4293      	cmp	r3, r2
   16000:	d014      	beq.n	1602c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   16002:	4a0e      	ldr	r2, [pc, #56]	; (1603c <z_time_slice+0x84>)
   16004:	6912      	ldr	r2, [r2, #16]
   16006:	4282      	cmp	r2, r0
   16008:	dd0a      	ble.n	16020 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1600a:	1a10      	subs	r0, r2, r0
   1600c:	4b0b      	ldr	r3, [pc, #44]	; (1603c <z_time_slice+0x84>)
   1600e:	6118      	str	r0, [r3, #16]
   16010:	e00f      	b.n	16032 <z_time_slice+0x7a>
		z_reset_time_slice();
   16012:	f7ff fee1 	bl	15dd8 <z_reset_time_slice>
	__asm__ volatile(
   16016:	f384 8811 	msr	BASEPRI, r4
   1601a:	f3bf 8f6f 	isb	sy
		return;
   1601e:	e00c      	b.n	1603a <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   16020:	4618      	mov	r0, r3
   16022:	f7ff ff85 	bl	15f30 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   16026:	f7ff fed7 	bl	15dd8 <z_reset_time_slice>
   1602a:	e002      	b.n	16032 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1602c:	4b03      	ldr	r3, [pc, #12]	; (1603c <z_time_slice+0x84>)
   1602e:	2200      	movs	r2, #0
   16030:	611a      	str	r2, [r3, #16]
   16032:	f384 8811 	msr	BASEPRI, r4
   16036:	f3bf 8f6f 	isb	sy
}
   1603a:	bd10      	pop	{r4, pc}
   1603c:	20002370 	.word	0x20002370
   16040:	200023a4 	.word	0x200023a4
   16044:	200023ac 	.word	0x200023ac
   16048:	200023a8 	.word	0x200023a8
   1604c:	200017c0 	.word	0x200017c0

00016050 <ready_thread>:
{
   16050:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   16052:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   16054:	f990 200d 	ldrsb.w	r2, [r0, #13]
   16058:	2a00      	cmp	r2, #0
   1605a:	db2d      	blt.n	160b8 <ready_thread+0x68>
   1605c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1605e:	f013 0f1f 	tst.w	r3, #31
   16062:	d105      	bne.n	16070 <ready_thread+0x20>
	return node->next != NULL;
   16064:	6982      	ldr	r2, [r0, #24]
   16066:	b10a      	cbz	r2, 1606c <ready_thread+0x1c>
   16068:	2200      	movs	r2, #0
   1606a:	e002      	b.n	16072 <ready_thread+0x22>
   1606c:	2201      	movs	r2, #1
   1606e:	e000      	b.n	16072 <ready_thread+0x22>
   16070:	2200      	movs	r2, #0
   16072:	b30a      	cbz	r2, 160b8 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   16074:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16078:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1607a:	4b14      	ldr	r3, [pc, #80]	; (160cc <ready_thread+0x7c>)
   1607c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16080:	429d      	cmp	r5, r3
   16082:	d020      	beq.n	160c6 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16084:	b16d      	cbz	r5, 160a2 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16086:	4629      	mov	r1, r5
   16088:	4620      	mov	r0, r4
   1608a:	f006 f942 	bl	1c312 <z_sched_prio_cmp>
   1608e:	2800      	cmp	r0, #0
   16090:	dc13      	bgt.n	160ba <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16092:	b135      	cbz	r5, 160a2 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   16094:	4b0d      	ldr	r3, [pc, #52]	; (160cc <ready_thread+0x7c>)
   16096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16098:	429d      	cmp	r5, r3
   1609a:	d002      	beq.n	160a2 <ready_thread+0x52>
   1609c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1609e:	2d00      	cmp	r5, #0
   160a0:	d1f0      	bne.n	16084 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   160a2:	4b0a      	ldr	r3, [pc, #40]	; (160cc <ready_thread+0x7c>)
   160a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   160a6:	f103 0120 	add.w	r1, r3, #32
   160aa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   160ac:	6062      	str	r2, [r4, #4]
	tail->next = node;
   160ae:	6014      	str	r4, [r2, #0]
	list->tail = node;
   160b0:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   160b2:	2000      	movs	r0, #0
   160b4:	f7ff ff16 	bl	15ee4 <update_cache>
}
   160b8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   160ba:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   160bc:	6063      	str	r3, [r4, #4]
	node->next = successor;
   160be:	6025      	str	r5, [r4, #0]
	prev->next = node;
   160c0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   160c2:	606c      	str	r4, [r5, #4]
}
   160c4:	e7f5      	b.n	160b2 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   160c6:	2500      	movs	r5, #0
   160c8:	e7dc      	b.n	16084 <ready_thread+0x34>
   160ca:	bf00      	nop
   160cc:	20002370 	.word	0x20002370

000160d0 <z_sched_start>:
{
   160d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   160d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   160d6:	f3ef 8411 	mrs	r4, BASEPRI
   160da:	f383 8812 	msr	BASEPRI_MAX, r3
   160de:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   160e2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   160e4:	f013 0f04 	tst.w	r3, #4
   160e8:	d104      	bne.n	160f4 <z_sched_start+0x24>
	__asm__ volatile(
   160ea:	f384 8811 	msr	BASEPRI, r4
   160ee:	f3bf 8f6f 	isb	sy
}
   160f2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   160f4:	f023 0304 	bic.w	r3, r3, #4
   160f8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   160fa:	f7ff ffa9 	bl	16050 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   160fe:	4621      	mov	r1, r4
   16100:	4801      	ldr	r0, [pc, #4]	; (16108 <z_sched_start+0x38>)
   16102:	f7ff febb 	bl	15e7c <z_reschedule>
   16106:	e7f4      	b.n	160f2 <z_sched_start+0x22>
   16108:	200023a8 	.word	0x200023a8

0001610c <unready_thread>:
{
   1610c:	b510      	push	{r4, lr}
   1610e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   16110:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   16112:	f990 300d 	ldrsb.w	r3, [r0, #13]
   16116:	2b00      	cmp	r3, #0
   16118:	db08      	blt.n	1612c <unready_thread+0x20>
	update_cache(thread == _current);
   1611a:	4b08      	ldr	r3, [pc, #32]	; (1613c <unready_thread+0x30>)
   1611c:	6898      	ldr	r0, [r3, #8]
   1611e:	42a0      	cmp	r0, r4
   16120:	bf14      	ite	ne
   16122:	2000      	movne	r0, #0
   16124:	2001      	moveq	r0, #1
   16126:	f7ff fedd 	bl	15ee4 <update_cache>
}
   1612a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1612c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16130:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16132:	4601      	mov	r1, r0
   16134:	4802      	ldr	r0, [pc, #8]	; (16140 <unready_thread+0x34>)
   16136:	f006 f92a 	bl	1c38e <z_priq_dumb_remove>
}
   1613a:	e7ee      	b.n	1611a <unready_thread+0xe>
   1613c:	20002370 	.word	0x20002370
   16140:	20002390 	.word	0x20002390

00016144 <z_pend_curr>:
{
   16144:	b510      	push	{r4, lr}
   16146:	460c      	mov	r4, r1
   16148:	4611      	mov	r1, r2
	pending_current = _current;
   1614a:	4b06      	ldr	r3, [pc, #24]	; (16164 <z_pend_curr+0x20>)
   1614c:	6898      	ldr	r0, [r3, #8]
   1614e:	4b06      	ldr	r3, [pc, #24]	; (16168 <z_pend_curr+0x24>)
   16150:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   16152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16156:	f006 f9c6 	bl	1c4e6 <pend>
   1615a:	4620      	mov	r0, r4
   1615c:	f7f9 ff82 	bl	10064 <arch_swap>
}
   16160:	bd10      	pop	{r4, pc}
   16162:	bf00      	nop
   16164:	20002370 	.word	0x20002370
   16168:	200023a4 	.word	0x200023a4

0001616c <z_set_prio>:
{
   1616c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16170:	4604      	mov	r4, r0
   16172:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   16174:	2300      	movs	r3, #0
	__asm__ volatile(
   16176:	f04f 0240 	mov.w	r2, #64	; 0x40
   1617a:	f3ef 8611 	mrs	r6, BASEPRI
   1617e:	f382 8812 	msr	BASEPRI_MAX, r2
   16182:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   16186:	4698      	mov	r8, r3
   16188:	e008      	b.n	1619c <z_set_prio+0x30>
		if (need_sched) {
   1618a:	f012 0801 	ands.w	r8, r2, #1
   1618e:	d111      	bne.n	161b4 <z_set_prio+0x48>
			thread->base.prio = prio;
   16190:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   16192:	f386 8811 	msr	BASEPRI, r6
   16196:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1619a:	2301      	movs	r3, #1
   1619c:	461a      	mov	r2, r3
   1619e:	2b00      	cmp	r3, #0
   161a0:	d13d      	bne.n	1621e <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   161a2:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   161a4:	f013 0f1f 	tst.w	r3, #31
   161a8:	d1ef      	bne.n	1618a <z_set_prio+0x1e>
	return node->next != NULL;
   161aa:	69a1      	ldr	r1, [r4, #24]
   161ac:	2900      	cmp	r1, #0
   161ae:	d1ec      	bne.n	1618a <z_set_prio+0x1e>
   161b0:	2201      	movs	r2, #1
   161b2:	e7ea      	b.n	1618a <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   161b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   161b8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   161ba:	f8df 906c 	ldr.w	r9, [pc, #108]	; 16228 <z_set_prio+0xbc>
   161be:	4621      	mov	r1, r4
   161c0:	4648      	mov	r0, r9
   161c2:	f006 f8e4 	bl	1c38e <z_priq_dumb_remove>
				thread->base.prio = prio;
   161c6:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   161c8:	7b63      	ldrb	r3, [r4, #13]
   161ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
   161ce:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   161d0:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   161d4:	454d      	cmp	r5, r9
   161d6:	d020      	beq.n	1621a <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   161d8:	b16d      	cbz	r5, 161f6 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   161da:	4629      	mov	r1, r5
   161dc:	4620      	mov	r0, r4
   161de:	f006 f898 	bl	1c312 <z_sched_prio_cmp>
   161e2:	2800      	cmp	r0, #0
   161e4:	dc13      	bgt.n	1620e <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   161e6:	b135      	cbz	r5, 161f6 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   161e8:	4b0e      	ldr	r3, [pc, #56]	; (16224 <z_set_prio+0xb8>)
   161ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   161ec:	429d      	cmp	r5, r3
   161ee:	d002      	beq.n	161f6 <z_set_prio+0x8a>
   161f0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   161f2:	2d00      	cmp	r5, #0
   161f4:	d1f0      	bne.n	161d8 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   161f6:	4b0b      	ldr	r3, [pc, #44]	; (16224 <z_set_prio+0xb8>)
   161f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   161fa:	f103 0120 	add.w	r1, r3, #32
   161fe:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   16200:	6062      	str	r2, [r4, #4]
	tail->next = node;
   16202:	6014      	str	r4, [r2, #0]
	list->tail = node;
   16204:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   16206:	2001      	movs	r0, #1
   16208:	f7ff fe6c 	bl	15ee4 <update_cache>
   1620c:	e7c1      	b.n	16192 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1620e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   16210:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16212:	6025      	str	r5, [r4, #0]
	prev->next = node;
   16214:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16216:	606c      	str	r4, [r5, #4]
}
   16218:	e7f5      	b.n	16206 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1621a:	2500      	movs	r5, #0
   1621c:	e7dc      	b.n	161d8 <z_set_prio+0x6c>
}
   1621e:	4640      	mov	r0, r8
   16220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16224:	20002370 	.word	0x20002370
   16228:	20002390 	.word	0x20002390

0001622c <z_impl_k_thread_suspend>:
{
   1622c:	b538      	push	{r3, r4, r5, lr}
   1622e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16230:	3018      	adds	r0, #24
   16232:	f006 fa2e 	bl	1c692 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   16236:	2300      	movs	r3, #0
	__asm__ volatile(
   16238:	f04f 0240 	mov.w	r2, #64	; 0x40
   1623c:	f3ef 8511 	mrs	r5, BASEPRI
   16240:	f382 8812 	msr	BASEPRI_MAX, r2
   16244:	f3bf 8f6f 	isb	sy
   16248:	e010      	b.n	1626c <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1624a:	7b63      	ldrb	r3, [r4, #13]
   1624c:	f043 0310 	orr.w	r3, r3, #16
   16250:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   16252:	4b15      	ldr	r3, [pc, #84]	; (162a8 <z_impl_k_thread_suspend+0x7c>)
   16254:	6898      	ldr	r0, [r3, #8]
   16256:	42a0      	cmp	r0, r4
   16258:	bf14      	ite	ne
   1625a:	2000      	movne	r0, #0
   1625c:	2001      	moveq	r0, #1
   1625e:	f7ff fe41 	bl	15ee4 <update_cache>
	__asm__ volatile(
   16262:	f385 8811 	msr	BASEPRI, r5
   16266:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1626a:	2301      	movs	r3, #1
   1626c:	b963      	cbnz	r3, 16288 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1626e:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   16270:	f994 300d 	ldrsb.w	r3, [r4, #13]
   16274:	2b00      	cmp	r3, #0
   16276:	dae8      	bge.n	1624a <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16278:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1627c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1627e:	4621      	mov	r1, r4
   16280:	480a      	ldr	r0, [pc, #40]	; (162ac <z_impl_k_thread_suspend+0x80>)
   16282:	f006 f884 	bl	1c38e <z_priq_dumb_remove>
}
   16286:	e7e0      	b.n	1624a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   16288:	4b07      	ldr	r3, [pc, #28]	; (162a8 <z_impl_k_thread_suspend+0x7c>)
   1628a:	689b      	ldr	r3, [r3, #8]
   1628c:	42a3      	cmp	r3, r4
   1628e:	d000      	beq.n	16292 <z_impl_k_thread_suspend+0x66>
}
   16290:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   16292:	f04f 0340 	mov.w	r3, #64	; 0x40
   16296:	f3ef 8011 	mrs	r0, BASEPRI
   1629a:	f383 8812 	msr	BASEPRI_MAX, r3
   1629e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   162a2:	f006 f85f 	bl	1c364 <z_reschedule_irqlock>
   162a6:	e7f3      	b.n	16290 <z_impl_k_thread_suspend+0x64>
   162a8:	20002370 	.word	0x20002370
   162ac:	20002390 	.word	0x20002390

000162b0 <k_sched_unlock>:

void k_sched_unlock(void)
{
   162b0:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   162b2:	2300      	movs	r3, #0
   162b4:	f04f 0240 	mov.w	r2, #64	; 0x40
   162b8:	f3ef 8411 	mrs	r4, BASEPRI
   162bc:	f382 8812 	msr	BASEPRI_MAX, r2
   162c0:	f3bf 8f6f 	isb	sy
   162c4:	b96b      	cbnz	r3, 162e2 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   162c6:	4b0c      	ldr	r3, [pc, #48]	; (162f8 <k_sched_unlock+0x48>)
   162c8:	689a      	ldr	r2, [r3, #8]
   162ca:	7bd3      	ldrb	r3, [r2, #15]
   162cc:	3301      	adds	r3, #1
   162ce:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   162d0:	2000      	movs	r0, #0
   162d2:	f7ff fe07 	bl	15ee4 <update_cache>
	__asm__ volatile(
   162d6:	f384 8811 	msr	BASEPRI, r4
   162da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   162de:	2301      	movs	r3, #1
   162e0:	e7f0      	b.n	162c4 <k_sched_unlock+0x14>
	__asm__ volatile(
   162e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   162e6:	f3ef 8011 	mrs	r0, BASEPRI
   162ea:	f383 8812 	msr	BASEPRI_MAX, r3
   162ee:	f3bf 8f6f 	isb	sy
   162f2:	f006 f837 	bl	1c364 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   162f6:	bd10      	pop	{r4, pc}
   162f8:	20002370 	.word	0x20002370

000162fc <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   162fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   162fe:	7b43      	ldrb	r3, [r0, #13]
   16300:	f013 0f08 	tst.w	r3, #8
   16304:	d145      	bne.n	16392 <end_thread+0x96>
   16306:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   16308:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1630c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   16310:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   16312:	f013 0f80 	tst.w	r3, #128	; 0x80
   16316:	d114      	bne.n	16342 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   16318:	68ab      	ldr	r3, [r5, #8]
   1631a:	b15b      	cbz	r3, 16334 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1631c:	4628      	mov	r0, r5
   1631e:	f005 fff6 	bl	1c30e <pended_on_thread>
   16322:	4629      	mov	r1, r5
   16324:	f006 f833 	bl	1c38e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16328:	7b6b      	ldrb	r3, [r5, #13]
   1632a:	f023 0302 	bic.w	r3, r3, #2
   1632e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   16330:	2300      	movs	r3, #0
   16332:	60ab      	str	r3, [r5, #8]
   16334:	f105 0018 	add.w	r0, r5, #24
   16338:	f006 f9ab 	bl	1c692 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1633c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16340:	e01c      	b.n	1637c <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16346:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16348:	4601      	mov	r1, r0
   1634a:	4812      	ldr	r0, [pc, #72]	; (16394 <end_thread+0x98>)
   1634c:	f006 f81f 	bl	1c38e <z_priq_dumb_remove>
}
   16350:	e7e2      	b.n	16318 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16352:	4620      	mov	r0, r4
   16354:	f005 ffdb 	bl	1c30e <pended_on_thread>
   16358:	4621      	mov	r1, r4
   1635a:	f006 f818 	bl	1c38e <z_priq_dumb_remove>
   1635e:	7b63      	ldrb	r3, [r4, #13]
   16360:	f023 0302 	bic.w	r3, r3, #2
   16364:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   16366:	2600      	movs	r6, #0
   16368:	60a6      	str	r6, [r4, #8]
   1636a:	f104 0018 	add.w	r0, r4, #24
   1636e:	f006 f990 	bl	1c692 <z_abort_timeout>
   16372:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   16376:	4620      	mov	r0, r4
   16378:	f7ff fe6a 	bl	16050 <ready_thread>
	return list->head == list;
   1637c:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1637e:	42bc      	cmp	r4, r7
   16380:	d001      	beq.n	16386 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16382:	2c00      	cmp	r4, #0
   16384:	d1e5      	bne.n	16352 <end_thread+0x56>
		update_cache(1);
   16386:	2001      	movs	r0, #1
   16388:	f7ff fdac 	bl	15ee4 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1638c:	4628      	mov	r0, r5
   1638e:	f7ff f917 	bl	155c0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   16392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16394:	20002390 	.word	0x20002390

00016398 <z_sched_init>:
{
   16398:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1639a:	4804      	ldr	r0, [pc, #16]	; (163ac <z_sched_init+0x14>)
   1639c:	f006 f927 	bl	1c5ee <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   163a0:	2100      	movs	r1, #0
   163a2:	4608      	mov	r0, r1
   163a4:	f7ff fd2e 	bl	15e04 <k_sched_time_slice_set>
}
   163a8:	bd08      	pop	{r3, pc}
   163aa:	bf00      	nop
   163ac:	2000238c 	.word	0x2000238c

000163b0 <z_impl_k_yield>:
{
   163b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   163b6:	f3ef 8611 	mrs	r6, BASEPRI
   163ba:	f383 8812 	msr	BASEPRI_MAX, r3
   163be:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   163c2:	4c1c      	ldr	r4, [pc, #112]	; (16434 <z_impl_k_yield+0x84>)
   163c4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   163c6:	7b4b      	ldrb	r3, [r1, #13]
   163c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   163cc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   163ce:	f104 0720 	add.w	r7, r4, #32
   163d2:	4638      	mov	r0, r7
   163d4:	f005 ffdb 	bl	1c38e <z_priq_dumb_remove>
	queue_thread(_current);
   163d8:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   163da:	7b6b      	ldrb	r3, [r5, #13]
   163dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   163e0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   163e2:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   163e4:	42bc      	cmp	r4, r7
   163e6:	d023      	beq.n	16430 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   163e8:	b16c      	cbz	r4, 16406 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   163ea:	4621      	mov	r1, r4
   163ec:	4628      	mov	r0, r5
   163ee:	f005 ff90 	bl	1c312 <z_sched_prio_cmp>
   163f2:	2800      	cmp	r0, #0
   163f4:	dc16      	bgt.n	16424 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   163f6:	b134      	cbz	r4, 16406 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   163f8:	4b0e      	ldr	r3, [pc, #56]	; (16434 <z_impl_k_yield+0x84>)
   163fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   163fc:	429c      	cmp	r4, r3
   163fe:	d002      	beq.n	16406 <z_impl_k_yield+0x56>
   16400:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16402:	2c00      	cmp	r4, #0
   16404:	d1f0      	bne.n	163e8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   16406:	4b0b      	ldr	r3, [pc, #44]	; (16434 <z_impl_k_yield+0x84>)
   16408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1640a:	f103 0120 	add.w	r1, r3, #32
   1640e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   16410:	606a      	str	r2, [r5, #4]
	tail->next = node;
   16412:	6015      	str	r5, [r2, #0]
	list->tail = node;
   16414:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   16416:	2001      	movs	r0, #1
   16418:	f7ff fd64 	bl	15ee4 <update_cache>
   1641c:	4630      	mov	r0, r6
   1641e:	f7f9 fe21 	bl	10064 <arch_swap>
}
   16422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   16424:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   16426:	606b      	str	r3, [r5, #4]
	node->next = successor;
   16428:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1642a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1642c:	6065      	str	r5, [r4, #4]
}
   1642e:	e7f2      	b.n	16416 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16430:	2400      	movs	r4, #0
   16432:	e7d9      	b.n	163e8 <z_impl_k_yield+0x38>
   16434:	20002370 	.word	0x20002370

00016438 <z_tick_sleep>:
{
   16438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1643c:	4604      	mov	r4, r0
   1643e:	460d      	mov	r5, r1
	if (ticks == 0) {
   16440:	ea54 0105 	orrs.w	r1, r4, r5
   16444:	d037      	beq.n	164b6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   16446:	f06f 0101 	mvn.w	r1, #1
   1644a:	1a0a      	subs	r2, r1, r0
   1644c:	f04f 31ff 	mov.w	r1, #4294967295
   16450:	eb61 0305 	sbc.w	r3, r1, r5
   16454:	2a01      	cmp	r2, #1
   16456:	f173 0300 	sbcs.w	r3, r3, #0
   1645a:	db30      	blt.n	164be <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1645c:	f06f 0601 	mvn.w	r6, #1
   16460:	1a36      	subs	r6, r6, r0
   16462:	f04f 0340 	mov.w	r3, #64	; 0x40
   16466:	f3ef 8811 	mrs	r8, BASEPRI
   1646a:	f383 8812 	msr	BASEPRI_MAX, r3
   1646e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   16472:	4f16      	ldr	r7, [pc, #88]	; (164cc <z_tick_sleep+0x94>)
   16474:	68b8      	ldr	r0, [r7, #8]
   16476:	4b16      	ldr	r3, [pc, #88]	; (164d0 <z_tick_sleep+0x98>)
   16478:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1647a:	f7ff fe47 	bl	1610c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1647e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16480:	4622      	mov	r2, r4
   16482:	462b      	mov	r3, r5
   16484:	4913      	ldr	r1, [pc, #76]	; (164d4 <z_tick_sleep+0x9c>)
   16486:	3018      	adds	r0, #24
   16488:	f000 f904 	bl	16694 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1648c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1648e:	7b53      	ldrb	r3, [r2, #13]
   16490:	f043 0310 	orr.w	r3, r3, #16
   16494:	7353      	strb	r3, [r2, #13]
   16496:	4640      	mov	r0, r8
   16498:	f7f9 fde4 	bl	10064 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1649c:	2500      	movs	r5, #0
   1649e:	f006 f957 	bl	1c750 <sys_clock_tick_get_32>
   164a2:	1a34      	subs	r4, r6, r0
   164a4:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   164a8:	2c01      	cmp	r4, #1
   164aa:	f175 0300 	sbcs.w	r3, r5, #0
   164ae:	da0a      	bge.n	164c6 <z_tick_sleep+0x8e>
	return 0;
   164b0:	2000      	movs	r0, #0
}
   164b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   164b6:	f7ff ff7b 	bl	163b0 <z_impl_k_yield>
		return 0;
   164ba:	2000      	movs	r0, #0
   164bc:	e7f9      	b.n	164b2 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   164be:	f006 f947 	bl	1c750 <sys_clock_tick_get_32>
   164c2:	1906      	adds	r6, r0, r4
   164c4:	e7cd      	b.n	16462 <z_tick_sleep+0x2a>
		return ticks;
   164c6:	4620      	mov	r0, r4
   164c8:	e7f3      	b.n	164b2 <z_tick_sleep+0x7a>
   164ca:	bf00      	nop
   164cc:	20002370 	.word	0x20002370
   164d0:	200023a4 	.word	0x200023a4
   164d4:	0001c42b 	.word	0x0001c42b

000164d8 <z_impl_k_sleep>:
{
   164d8:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   164da:	f1b1 3fff 	cmp.w	r1, #4294967295
   164de:	bf08      	it	eq
   164e0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   164e4:	d01a      	beq.n	1651c <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   164e6:	f7ff ffa7 	bl	16438 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   164ea:	4604      	mov	r4, r0
   164ec:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   164ee:	0169      	lsls	r1, r5, #5
   164f0:	0143      	lsls	r3, r0, #5
   164f2:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   164f6:	1a18      	subs	r0, r3, r0
   164f8:	eb62 0305 	sbc.w	r3, r2, r5
   164fc:	009a      	lsls	r2, r3, #2
   164fe:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   16502:	0081      	lsls	r1, r0, #2
   16504:	4613      	mov	r3, r2
   16506:	1908      	adds	r0, r1, r4
   16508:	eb45 0303 	adc.w	r3, r5, r3
   1650c:	00da      	lsls	r2, r3, #3
   1650e:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   16512:	00c1      	lsls	r1, r0, #3
   16514:	0bc8      	lsrs	r0, r1, #15
   16516:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1651a:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1651c:	4b03      	ldr	r3, [pc, #12]	; (1652c <z_impl_k_sleep+0x54>)
   1651e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   16520:	f7ff fe84 	bl	1622c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   16524:	f04f 30ff 	mov.w	r0, #4294967295
   16528:	e7f7      	b.n	1651a <z_impl_k_sleep+0x42>
   1652a:	bf00      	nop
   1652c:	20002370 	.word	0x20002370

00016530 <z_impl_z_current_get>:
}
   16530:	4b01      	ldr	r3, [pc, #4]	; (16538 <z_impl_z_current_get+0x8>)
   16532:	6898      	ldr	r0, [r3, #8]
   16534:	4770      	bx	lr
   16536:	bf00      	nop
   16538:	20002370 	.word	0x20002370

0001653c <z_impl_k_is_preempt_thread>:
   1653c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   16540:	b933      	cbnz	r3, 16550 <z_impl_k_is_preempt_thread+0x14>
   16542:	4b05      	ldr	r3, [pc, #20]	; (16558 <z_impl_k_is_preempt_thread+0x1c>)
   16544:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16546:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   16548:	2b7f      	cmp	r3, #127	; 0x7f
   1654a:	d803      	bhi.n	16554 <z_impl_k_is_preempt_thread+0x18>
   1654c:	2001      	movs	r0, #1
   1654e:	4770      	bx	lr
   16550:	2000      	movs	r0, #0
   16552:	4770      	bx	lr
   16554:	2000      	movs	r0, #0
}
   16556:	4770      	bx	lr
   16558:	20002370 	.word	0x20002370

0001655c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1655c:	b538      	push	{r3, r4, r5, lr}
   1655e:	f04f 0340 	mov.w	r3, #64	; 0x40
   16562:	f3ef 8511 	mrs	r5, BASEPRI
   16566:	f383 8812 	msr	BASEPRI_MAX, r3
   1656a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1656e:	7b43      	ldrb	r3, [r0, #13]
   16570:	f013 0f08 	tst.w	r3, #8
   16574:	d004      	beq.n	16580 <z_thread_abort+0x24>
	__asm__ volatile(
   16576:	f385 8811 	msr	BASEPRI, r5
   1657a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1657e:	bd38      	pop	{r3, r4, r5, pc}
   16580:	4604      	mov	r4, r0
	end_thread(thread);
   16582:	f7ff febb 	bl	162fc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   16586:	4b08      	ldr	r3, [pc, #32]	; (165a8 <z_thread_abort+0x4c>)
   16588:	689b      	ldr	r3, [r3, #8]
   1658a:	42a3      	cmp	r3, r4
   1658c:	d004      	beq.n	16598 <z_thread_abort+0x3c>
   1658e:	f385 8811 	msr	BASEPRI, r5
   16592:	f3bf 8f6f 	isb	sy
   16596:	e7f2      	b.n	1657e <z_thread_abort+0x22>
   16598:	f3ef 8305 	mrs	r3, IPSR
   1659c:	2b00      	cmp	r3, #0
   1659e:	d1f6      	bne.n	1658e <z_thread_abort+0x32>
   165a0:	4628      	mov	r0, r5
   165a2:	f7f9 fd5f 	bl	10064 <arch_swap>
	return ret;
   165a6:	e7f2      	b.n	1658e <z_thread_abort+0x32>
   165a8:	20002370 	.word	0x20002370

000165ac <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   165ac:	b5d0      	push	{r4, r6, r7, lr}
   165ae:	b082      	sub	sp, #8
   165b0:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   165b2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   165b6:	e9cd 6700 	strd	r6, r7, [sp]
   165ba:	f7ff fdc3 	bl	16144 <z_pend_curr>

	if (data != NULL) {
   165be:	b11c      	cbz	r4, 165c8 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   165c0:	4b02      	ldr	r3, [pc, #8]	; (165cc <z_sched_wait+0x20>)
   165c2:	689b      	ldr	r3, [r3, #8]
   165c4:	695b      	ldr	r3, [r3, #20]
   165c6:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   165c8:	b002      	add	sp, #8
   165ca:	bdd0      	pop	{r4, r6, r7, pc}
   165cc:	20002370 	.word	0x20002370

000165d0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   165d0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   165d2:	4806      	ldr	r0, [pc, #24]	; (165ec <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   165d4:	4a06      	ldr	r2, [pc, #24]	; (165f0 <z_data_copy+0x20>)
   165d6:	1a12      	subs	r2, r2, r0
   165d8:	4906      	ldr	r1, [pc, #24]	; (165f4 <z_data_copy+0x24>)
   165da:	f004 faa2 	bl	1ab22 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   165de:	4a06      	ldr	r2, [pc, #24]	; (165f8 <z_data_copy+0x28>)
   165e0:	4906      	ldr	r1, [pc, #24]	; (165fc <z_data_copy+0x2c>)
   165e2:	4807      	ldr	r0, [pc, #28]	; (16600 <z_data_copy+0x30>)
   165e4:	f004 fa9d 	bl	1ab22 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   165e8:	bd08      	pop	{r3, pc}
   165ea:	bf00      	nop
   165ec:	20000000 	.word	0x20000000
   165f0:	2000067c 	.word	0x2000067c
   165f4:	0001e234 	.word	0x0001e234
   165f8:	00000000 	.word	0x00000000
   165fc:	0001e234 	.word	0x0001e234
   16600:	20000000 	.word	0x20000000

00016604 <first>:
	return list->head == list;
   16604:	4b03      	ldr	r3, [pc, #12]	; (16614 <first+0x10>)
   16606:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16608:	4298      	cmp	r0, r3
   1660a:	d000      	beq.n	1660e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1660c:	4770      	bx	lr
   1660e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   16610:	e7fc      	b.n	1660c <first+0x8>
   16612:	bf00      	nop
   16614:	200004ac 	.word	0x200004ac

00016618 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16618:	b130      	cbz	r0, 16628 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1661a:	4a04      	ldr	r2, [pc, #16]	; (1662c <next+0x14>)
   1661c:	6852      	ldr	r2, [r2, #4]
   1661e:	4290      	cmp	r0, r2
   16620:	d001      	beq.n	16626 <next+0xe>
   16622:	6800      	ldr	r0, [r0, #0]
   16624:	4770      	bx	lr
   16626:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   16628:	4770      	bx	lr
   1662a:	bf00      	nop
   1662c:	200004ac 	.word	0x200004ac

00016630 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   16630:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16632:	4b04      	ldr	r3, [pc, #16]	; (16644 <elapsed+0x14>)
   16634:	681b      	ldr	r3, [r3, #0]
   16636:	b10b      	cbz	r3, 1663c <elapsed+0xc>
   16638:	2000      	movs	r0, #0
}
   1663a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1663c:	f7fd f8ee 	bl	1381c <sys_clock_elapsed>
   16640:	e7fb      	b.n	1663a <elapsed+0xa>
   16642:	bf00      	nop
   16644:	200023b0 	.word	0x200023b0

00016648 <next_timeout>:

static int32_t next_timeout(void)
{
   16648:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1664a:	f7ff ffdb 	bl	16604 <first>
   1664e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   16650:	f7ff ffee 	bl	16630 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   16654:	b18c      	cbz	r4, 1667a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16656:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1665a:	1a12      	subs	r2, r2, r0
   1665c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   16660:	2a01      	cmp	r2, #1
   16662:	f173 0100 	sbcs.w	r1, r3, #0
   16666:	db11      	blt.n	1668c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16668:	4610      	mov	r0, r2
   1666a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1666e:	f173 0300 	sbcs.w	r3, r3, #0
   16672:	db04      	blt.n	1667e <next_timeout+0x36>
   16674:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   16678:	e001      	b.n	1667e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1667a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1667e:	4b04      	ldr	r3, [pc, #16]	; (16690 <next_timeout+0x48>)
   16680:	691b      	ldr	r3, [r3, #16]
   16682:	b113      	cbz	r3, 1668a <next_timeout+0x42>
   16684:	4283      	cmp	r3, r0
   16686:	da00      	bge.n	1668a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   16688:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1668a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1668c:	2000      	movs	r0, #0
   1668e:	e7f6      	b.n	1667e <next_timeout+0x36>
   16690:	20002370 	.word	0x20002370

00016694 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   16694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16698:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1669a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1669e:	bf08      	it	eq
   166a0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   166a4:	f000 8096 	beq.w	167d4 <z_add_timeout+0x140>
   166a8:	4682      	mov	sl, r0
   166aa:	4614      	mov	r4, r2
   166ac:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   166ae:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   166b0:	2300      	movs	r3, #0
	__asm__ volatile(
   166b2:	f04f 0240 	mov.w	r2, #64	; 0x40
   166b6:	f3ef 8b11 	mrs	fp, BASEPRI
   166ba:	f382 8812 	msr	BASEPRI_MAX, r2
   166be:	f3bf 8f6f 	isb	sy
   166c2:	e02e      	b.n	16722 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   166c4:	2201      	movs	r2, #1
   166c6:	2300      	movs	r3, #0
   166c8:	e04b      	b.n	16762 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   166ca:	f7ff ffb1 	bl	16630 <elapsed>
   166ce:	1822      	adds	r2, r4, r0
   166d0:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   166d4:	3201      	adds	r2, #1
   166d6:	f143 0300 	adc.w	r3, r3, #0
   166da:	f8ca 2010 	str.w	r2, [sl, #16]
   166de:	f8ca 3014 	str.w	r3, [sl, #20]
   166e2:	e042      	b.n	1676a <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   166e4:	9b00      	ldr	r3, [sp, #0]
   166e6:	1ac2      	subs	r2, r0, r3
   166e8:	9b01      	ldr	r3, [sp, #4]
   166ea:	eb61 0303 	sbc.w	r3, r1, r3
   166ee:	f8cc 2010 	str.w	r2, [ip, #16]
   166f2:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   166f6:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   166fa:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   166fe:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   16702:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   16706:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1670a:	f1bc 0f00 	cmp.w	ip, #0
   1670e:	d049      	beq.n	167a4 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   16710:	f7ff ff78 	bl	16604 <first>
   16714:	4582      	cmp	sl, r0
   16716:	d050      	beq.n	167ba <z_add_timeout+0x126>
	__asm__ volatile(
   16718:	f38b 8811 	msr	BASEPRI, fp
   1671c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   16720:	2301      	movs	r3, #1
   16722:	2b00      	cmp	r3, #0
   16724:	d156      	bne.n	167d4 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   16726:	f06f 0301 	mvn.w	r3, #1
   1672a:	ebb3 0804 	subs.w	r8, r3, r4
   1672e:	f04f 30ff 	mov.w	r0, #4294967295
   16732:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   16736:	f1b8 0f00 	cmp.w	r8, #0
   1673a:	f179 0300 	sbcs.w	r3, r9, #0
   1673e:	dbc4      	blt.n	166ca <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16740:	4a26      	ldr	r2, [pc, #152]	; (167dc <z_add_timeout+0x148>)
   16742:	6813      	ldr	r3, [r2, #0]
   16744:	6852      	ldr	r2, [r2, #4]
   16746:	18e3      	adds	r3, r4, r3
   16748:	eb45 0202 	adc.w	r2, r5, r2
   1674c:	f06f 0101 	mvn.w	r1, #1
   16750:	1ace      	subs	r6, r1, r3
   16752:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   16756:	4632      	mov	r2, r6
   16758:	463b      	mov	r3, r7
   1675a:	2e01      	cmp	r6, #1
   1675c:	f177 0100 	sbcs.w	r1, r7, #0
   16760:	dbb0      	blt.n	166c4 <z_add_timeout+0x30>
   16762:	f8ca 2010 	str.w	r2, [sl, #16]
   16766:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1676a:	f7ff ff4b 	bl	16604 <first>
   1676e:	4684      	mov	ip, r0
   16770:	f1bc 0f00 	cmp.w	ip, #0
   16774:	d0c9      	beq.n	1670a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   16776:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1677a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1677e:	e9cd 2300 	strd	r2, r3, [sp]
   16782:	4282      	cmp	r2, r0
   16784:	418b      	sbcs	r3, r1
   16786:	dbad      	blt.n	166e4 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   16788:	9b00      	ldr	r3, [sp, #0]
   1678a:	1a1a      	subs	r2, r3, r0
   1678c:	9b01      	ldr	r3, [sp, #4]
   1678e:	eb63 0301 	sbc.w	r3, r3, r1
   16792:	f8ca 2010 	str.w	r2, [sl, #16]
   16796:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1679a:	4660      	mov	r0, ip
   1679c:	f7ff ff3c 	bl	16618 <next>
   167a0:	4684      	mov	ip, r0
   167a2:	e7e5      	b.n	16770 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   167a4:	4b0e      	ldr	r3, [pc, #56]	; (167e0 <z_add_timeout+0x14c>)
   167a6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   167a8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   167ac:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   167b0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   167b4:	f8c3 a004 	str.w	sl, [r3, #4]
}
   167b8:	e7aa      	b.n	16710 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   167ba:	f7ff ff45 	bl	16648 <next_timeout>

			if (next_time == 0 ||
   167be:	4603      	mov	r3, r0
   167c0:	b118      	cbz	r0, 167ca <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   167c2:	4a08      	ldr	r2, [pc, #32]	; (167e4 <z_add_timeout+0x150>)
   167c4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   167c6:	4282      	cmp	r2, r0
   167c8:	d0a6      	beq.n	16718 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   167ca:	2100      	movs	r1, #0
   167cc:	4618      	mov	r0, r3
   167ce:	f7fc fff1 	bl	137b4 <sys_clock_set_timeout>
   167d2:	e7a1      	b.n	16718 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   167d4:	b003      	add	sp, #12
   167d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167da:	bf00      	nop
   167dc:	20001930 	.word	0x20001930
   167e0:	200004ac 	.word	0x200004ac
   167e4:	20002370 	.word	0x20002370

000167e8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   167e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167ea:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   167ec:	f7ff fbe4 	bl	15fb8 <z_time_slice>
	__asm__ volatile(
   167f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   167f4:	f3ef 8511 	mrs	r5, BASEPRI
   167f8:	f383 8812 	msr	BASEPRI_MAX, r3
   167fc:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   16800:	4b28      	ldr	r3, [pc, #160]	; (168a4 <sys_clock_announce+0xbc>)
   16802:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   16804:	f7ff fefe 	bl	16604 <first>
   16808:	4604      	mov	r4, r0
   1680a:	b350      	cbz	r0, 16862 <sys_clock_announce+0x7a>
   1680c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   16810:	4b24      	ldr	r3, [pc, #144]	; (168a4 <sys_clock_announce+0xbc>)
   16812:	681b      	ldr	r3, [r3, #0]
   16814:	17d9      	asrs	r1, r3, #31
   16816:	42b3      	cmp	r3, r6
   16818:	eb71 0207 	sbcs.w	r2, r1, r7
   1681c:	db21      	blt.n	16862 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1681e:	4a22      	ldr	r2, [pc, #136]	; (168a8 <sys_clock_announce+0xc0>)
   16820:	e9d2 0100 	ldrd	r0, r1, [r2]
   16824:	1980      	adds	r0, r0, r6
   16826:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1682a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1682e:	1b9b      	subs	r3, r3, r6
   16830:	4a1c      	ldr	r2, [pc, #112]	; (168a4 <sys_clock_announce+0xbc>)
   16832:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   16834:	2200      	movs	r2, #0
   16836:	2300      	movs	r3, #0
   16838:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1683c:	4620      	mov	r0, r4
   1683e:	f005 ff11 	bl	1c664 <remove_timeout>
	__asm__ volatile(
   16842:	f385 8811 	msr	BASEPRI, r5
   16846:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1684a:	68a3      	ldr	r3, [r4, #8]
   1684c:	4620      	mov	r0, r4
   1684e:	4798      	blx	r3
	__asm__ volatile(
   16850:	f04f 0340 	mov.w	r3, #64	; 0x40
   16854:	f3ef 8511 	mrs	r5, BASEPRI
   16858:	f383 8812 	msr	BASEPRI_MAX, r3
   1685c:	f3bf 8f6f 	isb	sy
   16860:	e7d0      	b.n	16804 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   16862:	b144      	cbz	r4, 16876 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   16864:	4b0f      	ldr	r3, [pc, #60]	; (168a4 <sys_clock_announce+0xbc>)
   16866:	6819      	ldr	r1, [r3, #0]
   16868:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1686c:	1a52      	subs	r2, r2, r1
   1686e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   16872:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   16876:	480c      	ldr	r0, [pc, #48]	; (168a8 <sys_clock_announce+0xc0>)
   16878:	490a      	ldr	r1, [pc, #40]	; (168a4 <sys_clock_announce+0xbc>)
   1687a:	680c      	ldr	r4, [r1, #0]
   1687c:	e9d0 2300 	ldrd	r2, r3, [r0]
   16880:	1912      	adds	r2, r2, r4
   16882:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   16886:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   1688a:	2400      	movs	r4, #0
   1688c:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1688e:	f7ff fedb 	bl	16648 <next_timeout>
   16892:	4621      	mov	r1, r4
   16894:	f7fc ff8e 	bl	137b4 <sys_clock_set_timeout>
	__asm__ volatile(
   16898:	f385 8811 	msr	BASEPRI, r5
   1689c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   168a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168a2:	bf00      	nop
   168a4:	200023b0 	.word	0x200023b0
   168a8:	20001930 	.word	0x20001930

000168ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   168ac:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   168ae:	2100      	movs	r1, #0
	__asm__ volatile(
   168b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   168b4:	f3ef 8411 	mrs	r4, BASEPRI
   168b8:	f383 8812 	msr	BASEPRI_MAX, r3
   168bc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   168c0:	2200      	movs	r2, #0
   168c2:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   168c4:	b969      	cbnz	r1, 168e2 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   168c6:	f7fc ffa9 	bl	1381c <sys_clock_elapsed>
   168ca:	4b07      	ldr	r3, [pc, #28]	; (168e8 <sys_clock_tick_get+0x3c>)
   168cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   168d0:	1812      	adds	r2, r2, r0
   168d2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   168d6:	f384 8811 	msr	BASEPRI, r4
   168da:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   168de:	2101      	movs	r1, #1
   168e0:	e7f0      	b.n	168c4 <sys_clock_tick_get+0x18>
	}
	return t;
}
   168e2:	4610      	mov	r0, r2
   168e4:	4619      	mov	r1, r3
   168e6:	bd10      	pop	{r4, pc}
   168e8:	20001930 	.word	0x20001930

000168ec <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   168ec:	b570      	push	{r4, r5, r6, lr}
   168ee:	4604      	mov	r4, r0
	__asm__ volatile(
   168f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   168f4:	f3ef 8611 	mrs	r6, BASEPRI
   168f8:	f383 8812 	msr	BASEPRI_MAX, r3
   168fc:	f3bf 8f6f 	isb	sy
   16900:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   16902:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   16906:	ea52 0103 	orrs.w	r1, r2, r3
   1690a:	d005      	beq.n	16918 <z_timer_expiration_handler+0x2c>
   1690c:	f1b3 3fff 	cmp.w	r3, #4294967295
   16910:	bf08      	it	eq
   16912:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   16916:	d127      	bne.n	16968 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   16918:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1691a:	3301      	adds	r3, #1
   1691c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1691e:	6a23      	ldr	r3, [r4, #32]
   16920:	b173      	cbz	r3, 16940 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   16922:	f386 8811 	msr	BASEPRI, r6
   16926:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1692a:	6a23      	ldr	r3, [r4, #32]
   1692c:	4620      	mov	r0, r4
   1692e:	4798      	blx	r3
	__asm__ volatile(
   16930:	f04f 0340 	mov.w	r3, #64	; 0x40
   16934:	f3ef 8511 	mrs	r5, BASEPRI
   16938:	f383 8812 	msr	BASEPRI_MAX, r3
   1693c:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   16940:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   16944:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16946:	42a3      	cmp	r3, r4
   16948:	d012      	beq.n	16970 <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1694a:	b18c      	cbz	r4, 16970 <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   1694c:	4620      	mov	r0, r4
   1694e:	f005 fcea 	bl	1c326 <z_unpend_thread_no_timeout>
   16952:	2300      	movs	r3, #0
   16954:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   16958:	f385 8811 	msr	BASEPRI, r5
   1695c:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   16960:	4620      	mov	r0, r4
   16962:	f005 fd46 	bl	1c3f2 <z_ready_thread>
}
   16966:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   16968:	4904      	ldr	r1, [pc, #16]	; (1697c <z_timer_expiration_handler+0x90>)
   1696a:	f7ff fe93 	bl	16694 <z_add_timeout>
   1696e:	e7d3      	b.n	16918 <z_timer_expiration_handler+0x2c>
   16970:	f385 8811 	msr	BASEPRI, r5
   16974:	f3bf 8f6f 	isb	sy
		return;
   16978:	e7f5      	b.n	16966 <z_timer_expiration_handler+0x7a>
   1697a:	bf00      	nop
   1697c:	000168ed 	.word	0x000168ed

00016980 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   16980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16984:	b087      	sub	sp, #28
   16986:	4614      	mov	r4, r2
   16988:	461d      	mov	r5, r3
   1698a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1698e:	f1b3 3fff 	cmp.w	r3, #4294967295
   16992:	bf08      	it	eq
   16994:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   16998:	d035      	beq.n	16a06 <z_impl_k_timer_start+0x86>
   1699a:	4606      	mov	r6, r0
   1699c:	4613      	mov	r3, r2
   1699e:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   169a0:	f1b9 3fff 	cmp.w	r9, #4294967295
   169a4:	bf08      	it	eq
   169a6:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   169aa:	d012      	beq.n	169d2 <z_impl_k_timer_start+0x52>
   169ac:	ea58 0109 	orrs.w	r1, r8, r9
   169b0:	d00f      	beq.n	169d2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   169b2:	f06f 0701 	mvn.w	r7, #1
   169b6:	ebb7 0708 	subs.w	r7, r7, r8
   169ba:	9702      	str	r7, [sp, #8]
   169bc:	f04f 31ff 	mov.w	r1, #4294967295
   169c0:	eb61 0709 	sbc.w	r7, r1, r9
   169c4:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   169c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   169ca:	2800      	cmp	r0, #0
   169cc:	f171 0100 	sbcs.w	r1, r1, #0
   169d0:	db1c      	blt.n	16a0c <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   169d2:	f06f 0101 	mvn.w	r1, #1
   169d6:	ebb1 0a03 	subs.w	sl, r1, r3
   169da:	f04f 31ff 	mov.w	r1, #4294967295
   169de:	eb61 0b02 	sbc.w	fp, r1, r2
   169e2:	f1ba 0f00 	cmp.w	sl, #0
   169e6:	f17b 0100 	sbcs.w	r1, fp, #0
   169ea:	db23      	blt.n	16a34 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   169ec:	4630      	mov	r0, r6
   169ee:	f005 fe50 	bl	1c692 <z_abort_timeout>
	timer->period = period;
   169f2:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   169f6:	2300      	movs	r3, #0
   169f8:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   169fa:	4622      	mov	r2, r4
   169fc:	462b      	mov	r3, r5
   169fe:	4917      	ldr	r1, [pc, #92]	; (16a5c <z_impl_k_timer_start+0xdc>)
   16a00:	4630      	mov	r0, r6
   16a02:	f7ff fe47 	bl	16694 <z_add_timeout>
		     duration);
}
   16a06:	b007      	add	sp, #28
   16a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   16a0c:	f118 31ff 	adds.w	r1, r8, #4294967295
   16a10:	9104      	str	r1, [sp, #16]
   16a12:	f149 31ff 	adc.w	r1, r9, #4294967295
   16a16:	9105      	str	r1, [sp, #20]
   16a18:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   16a1c:	4638      	mov	r0, r7
   16a1e:	4641      	mov	r1, r8
   16a20:	2f01      	cmp	r7, #1
   16a22:	f178 0700 	sbcs.w	r7, r8, #0
   16a26:	db02      	blt.n	16a2e <z_impl_k_timer_start+0xae>
   16a28:	4680      	mov	r8, r0
   16a2a:	4689      	mov	r9, r1
   16a2c:	e7d1      	b.n	169d2 <z_impl_k_timer_start+0x52>
   16a2e:	2001      	movs	r0, #1
   16a30:	2100      	movs	r1, #0
   16a32:	e7f9      	b.n	16a28 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   16a34:	f113 33ff 	adds.w	r3, r3, #4294967295
   16a38:	9300      	str	r3, [sp, #0]
   16a3a:	f142 33ff 	adc.w	r3, r2, #4294967295
   16a3e:	9301      	str	r3, [sp, #4]
   16a40:	e9dd 0100 	ldrd	r0, r1, [sp]
   16a44:	4602      	mov	r2, r0
   16a46:	460b      	mov	r3, r1
   16a48:	2800      	cmp	r0, #0
   16a4a:	f171 0100 	sbcs.w	r1, r1, #0
   16a4e:	db02      	blt.n	16a56 <z_impl_k_timer_start+0xd6>
   16a50:	4614      	mov	r4, r2
   16a52:	461d      	mov	r5, r3
   16a54:	e7ca      	b.n	169ec <z_impl_k_timer_start+0x6c>
   16a56:	2200      	movs	r2, #0
   16a58:	4613      	mov	r3, r2
   16a5a:	e7f9      	b.n	16a50 <z_impl_k_timer_start+0xd0>
   16a5c:	000168ed 	.word	0x000168ed

00016a60 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   16a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a64:	b08d      	sub	sp, #52	; 0x34
   16a66:	4605      	mov	r5, r0
   16a68:	9107      	str	r1, [sp, #28]
   16a6a:	9202      	str	r2, [sp, #8]
   16a6c:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   16a6e:	4ba4      	ldr	r3, [pc, #656]	; (16d00 <z_impl_k_poll+0x2a0>)
   16a70:	f8d3 9008 	ldr.w	r9, [r3, #8]
   16a74:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   16a78:	2301      	movs	r3, #1
   16a7a:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   16a7e:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   16a82:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   16a86:	4613      	mov	r3, r2
   16a88:	430b      	orrs	r3, r1
   16a8a:	bf0c      	ite	eq
   16a8c:	2301      	moveq	r3, #1
   16a8e:	2300      	movne	r3, #0
   16a90:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   16a92:	2600      	movs	r6, #0
	int events_registered = 0;
   16a94:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   16a96:	e02e      	b.n	16af6 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   16a98:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   16a9a:	689b      	ldr	r3, [r3, #8]
   16a9c:	b1c3      	cbz	r3, 16ad0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   16a9e:	2302      	movs	r3, #2
   16aa0:	9305      	str	r3, [sp, #20]
			return true;
   16aa2:	2301      	movs	r3, #1
   16aa4:	e014      	b.n	16ad0 <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   16aa6:	6923      	ldr	r3, [r4, #16]
	return list->head;
   16aa8:	681b      	ldr	r3, [r3, #0]
   16aaa:	b18b      	cbz	r3, 16ad0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   16aac:	2304      	movs	r3, #4
   16aae:	9305      	str	r3, [sp, #20]
			return true;
   16ab0:	2301      	movs	r3, #1
   16ab2:	e00d      	b.n	16ad0 <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   16ab4:	6923      	ldr	r3, [r4, #16]
   16ab6:	689b      	ldr	r3, [r3, #8]
   16ab8:	b153      	cbz	r3, 16ad0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   16aba:	2301      	movs	r3, #1
   16abc:	9305      	str	r3, [sp, #20]
   16abe:	e007      	b.n	16ad0 <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   16ac0:	6923      	ldr	r3, [r4, #16]
   16ac2:	6a1b      	ldr	r3, [r3, #32]
   16ac4:	b123      	cbz	r3, 16ad0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   16ac6:	2310      	movs	r3, #16
   16ac8:	9305      	str	r3, [sp, #20]
			return true;
   16aca:	2301      	movs	r3, #1
   16acc:	e000      	b.n	16ad0 <z_impl_k_poll+0x70>
	switch (event->type) {
   16ace:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   16ad0:	2b00      	cmp	r3, #0
   16ad2:	d03d      	beq.n	16b50 <z_impl_k_poll+0xf0>
	event->poller = NULL;
   16ad4:	2100      	movs	r1, #0
   16ad6:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   16ad8:	68e3      	ldr	r3, [r4, #12]
   16ada:	f3c3 3245 	ubfx	r2, r3, #13, #6
   16ade:	9805      	ldr	r0, [sp, #20]
   16ae0:	4302      	orrs	r2, r0
   16ae2:	f362 3352 	bfi	r3, r2, #13, #6
   16ae6:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   16ae8:	7039      	strb	r1, [r7, #0]
   16aea:	9b08      	ldr	r3, [sp, #32]
   16aec:	f383 8811 	msr	BASEPRI, r3
   16af0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   16af4:	3601      	adds	r6, #1
   16af6:	9b07      	ldr	r3, [sp, #28]
   16af8:	42b3      	cmp	r3, r6
   16afa:	f340 81bf 	ble.w	16e7c <z_impl_k_poll+0x41c>
	__asm__ volatile(
   16afe:	f04f 0340 	mov.w	r3, #64	; 0x40
   16b02:	f3ef 8211 	mrs	r2, BASEPRI
   16b06:	f383 8812 	msr	BASEPRI_MAX, r3
   16b0a:	f3bf 8f6f 	isb	sy
   16b0e:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   16b10:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   16b14:	00a3      	lsls	r3, r4, #2
   16b16:	9309      	str	r3, [sp, #36]	; 0x24
   16b18:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   16b1c:	7b63      	ldrb	r3, [r4, #13]
   16b1e:	f003 031f 	and.w	r3, r3, #31
   16b22:	3b01      	subs	r3, #1
   16b24:	2b07      	cmp	r3, #7
   16b26:	d8d2      	bhi.n	16ace <z_impl_k_poll+0x6e>
   16b28:	a201      	add	r2, pc, #4	; (adr r2, 16b30 <z_impl_k_poll+0xd0>)
   16b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16b2e:	bf00      	nop
   16b30:	00016ab5 	.word	0x00016ab5
   16b34:	00016a99 	.word	0x00016a99
   16b38:	00016acf 	.word	0x00016acf
   16b3c:	00016aa7 	.word	0x00016aa7
   16b40:	00016acf 	.word	0x00016acf
   16b44:	00016acf 	.word	0x00016acf
   16b48:	00016acf 	.word	0x00016acf
   16b4c:	00016ac1 	.word	0x00016ac1
		} else if (!just_check && poller->is_polling) {
   16b50:	9b06      	ldr	r3, [sp, #24]
   16b52:	2b00      	cmp	r3, #0
   16b54:	d1c9      	bne.n	16aea <z_impl_k_poll+0x8a>
   16b56:	783b      	ldrb	r3, [r7, #0]
   16b58:	2b00      	cmp	r3, #0
   16b5a:	d0c6      	beq.n	16aea <z_impl_k_poll+0x8a>
	switch (event->type) {
   16b5c:	7b63      	ldrb	r3, [r4, #13]
   16b5e:	f003 031f 	and.w	r3, r3, #31
   16b62:	3b01      	subs	r3, #1
   16b64:	2b07      	cmp	r3, #7
   16b66:	d846      	bhi.n	16bf6 <z_impl_k_poll+0x196>
   16b68:	e8df f013 	tbh	[pc, r3, lsl #1]
   16b6c:	000800cc 	.word	0x000800cc
   16b70:	006a0045 	.word	0x006a0045
   16b74:	00450045 	.word	0x00450045
   16b78:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   16b7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   16b80:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   16b84:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   16b88:	4598      	cmp	r8, r3
   16b8a:	d02b      	beq.n	16be4 <z_impl_k_poll+0x184>
   16b8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   16b90:	b343      	cbz	r3, 16be4 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   16b92:	6898      	ldr	r0, [r3, #8]
   16b94:	f005 fe3d 	bl	1c812 <poller_thread>
   16b98:	900b      	str	r0, [sp, #44]	; 0x2c
   16b9a:	4638      	mov	r0, r7
   16b9c:	f005 fe39 	bl	1c812 <poller_thread>
   16ba0:	4601      	mov	r1, r0
   16ba2:	900a      	str	r0, [sp, #40]	; 0x28
   16ba4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16ba6:	f005 fbb4 	bl	1c312 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   16baa:	2800      	cmp	r0, #0
   16bac:	dc1a      	bgt.n	16be4 <z_impl_k_poll+0x184>
	return list->head == list;
   16bae:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16bb2:	45d0      	cmp	r8, sl
   16bb4:	d02f      	beq.n	16c16 <z_impl_k_poll+0x1b6>
   16bb6:	4653      	mov	r3, sl
   16bb8:	46a2      	mov	sl, r4
   16bba:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16bbc:	b38c      	cbz	r4, 16c22 <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   16bbe:	68a0      	ldr	r0, [r4, #8]
   16bc0:	f005 fe27 	bl	1c812 <poller_thread>
   16bc4:	4601      	mov	r1, r0
   16bc6:	980a      	ldr	r0, [sp, #40]	; 0x28
   16bc8:	f005 fba3 	bl	1c312 <z_sched_prio_cmp>
   16bcc:	2800      	cmp	r0, #0
   16bce:	dc16      	bgt.n	16bfe <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16bd0:	b34c      	cbz	r4, 16c26 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   16bd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16bd6:	429c      	cmp	r4, r3
   16bd8:	d030      	beq.n	16c3c <z_impl_k_poll+0x1dc>
   16bda:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16bdc:	2c00      	cmp	r4, #0
   16bde:	d1ed      	bne.n	16bbc <z_impl_k_poll+0x15c>
   16be0:	4654      	mov	r4, sl
   16be2:	e021      	b.n	16c28 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   16be4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   16be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16bea:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   16bee:	6063      	str	r3, [r4, #4]
	tail->next = node;
   16bf0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16bf2:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   16bf6:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   16bf8:	f10b 0b01 	add.w	fp, fp, #1
   16bfc:	e775      	b.n	16aea <z_impl_k_poll+0x8a>
   16bfe:	4623      	mov	r3, r4
   16c00:	4654      	mov	r4, sl
   16c02:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   16c04:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   16c06:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16c0a:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   16c0e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16c10:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   16c14:	e7ef      	b.n	16bf6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16c16:	f04f 0a00 	mov.w	sl, #0
   16c1a:	4653      	mov	r3, sl
   16c1c:	46a2      	mov	sl, r4
   16c1e:	461c      	mov	r4, r3
   16c20:	e7cc      	b.n	16bbc <z_impl_k_poll+0x15c>
   16c22:	4654      	mov	r4, sl
   16c24:	e000      	b.n	16c28 <z_impl_k_poll+0x1c8>
   16c26:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   16c28:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   16c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16c2e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   16c32:	6063      	str	r3, [r4, #4]
	tail->next = node;
   16c34:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16c36:	f8c8 4004 	str.w	r4, [r8, #4]
}
   16c3a:	e7dc      	b.n	16bf6 <z_impl_k_poll+0x196>
   16c3c:	4654      	mov	r4, sl
   16c3e:	e7f3      	b.n	16c28 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   16c40:	f8d4 a010 	ldr.w	sl, [r4, #16]
   16c44:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   16c48:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   16c4c:	4598      	cmp	r8, r3
   16c4e:	d02b      	beq.n	16ca8 <z_impl_k_poll+0x248>
   16c50:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   16c54:	b343      	cbz	r3, 16ca8 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   16c56:	6898      	ldr	r0, [r3, #8]
   16c58:	f005 fddb 	bl	1c812 <poller_thread>
   16c5c:	900b      	str	r0, [sp, #44]	; 0x2c
   16c5e:	4638      	mov	r0, r7
   16c60:	f005 fdd7 	bl	1c812 <poller_thread>
   16c64:	4601      	mov	r1, r0
   16c66:	900a      	str	r0, [sp, #40]	; 0x28
   16c68:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16c6a:	f005 fb52 	bl	1c312 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   16c6e:	2800      	cmp	r0, #0
   16c70:	dc1a      	bgt.n	16ca8 <z_impl_k_poll+0x248>
	return list->head == list;
   16c72:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c76:	45d0      	cmp	r8, sl
   16c78:	d02c      	beq.n	16cd4 <z_impl_k_poll+0x274>
   16c7a:	4653      	mov	r3, sl
   16c7c:	46a2      	mov	sl, r4
   16c7e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16c80:	b374      	cbz	r4, 16ce0 <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   16c82:	68a0      	ldr	r0, [r4, #8]
   16c84:	f005 fdc5 	bl	1c812 <poller_thread>
   16c88:	4601      	mov	r1, r0
   16c8a:	980a      	ldr	r0, [sp, #40]	; 0x28
   16c8c:	f005 fb41 	bl	1c312 <z_sched_prio_cmp>
   16c90:	2800      	cmp	r0, #0
   16c92:	dc13      	bgt.n	16cbc <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16c94:	b334      	cbz	r4, 16ce4 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   16c96:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16c9a:	429c      	cmp	r4, r3
   16c9c:	d02d      	beq.n	16cfa <z_impl_k_poll+0x29a>
   16c9e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16ca0:	2c00      	cmp	r4, #0
   16ca2:	d1ed      	bne.n	16c80 <z_impl_k_poll+0x220>
   16ca4:	4654      	mov	r4, sl
   16ca6:	e01e      	b.n	16ce6 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   16ca8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   16cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16cae:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   16cb2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   16cb4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16cb6:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   16cba:	e79c      	b.n	16bf6 <z_impl_k_poll+0x196>
   16cbc:	4623      	mov	r3, r4
   16cbe:	4654      	mov	r4, sl
   16cc0:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   16cc2:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   16cc4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16cc8:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   16ccc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16cce:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   16cd2:	e790      	b.n	16bf6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16cd4:	f04f 0a00 	mov.w	sl, #0
   16cd8:	4653      	mov	r3, sl
   16cda:	46a2      	mov	sl, r4
   16cdc:	461c      	mov	r4, r3
   16cde:	e7cf      	b.n	16c80 <z_impl_k_poll+0x220>
   16ce0:	4654      	mov	r4, sl
   16ce2:	e000      	b.n	16ce6 <z_impl_k_poll+0x286>
   16ce4:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   16ce6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   16cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16cec:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   16cf0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   16cf2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16cf4:	f8c8 4004 	str.w	r4, [r8, #4]
}
   16cf8:	e77d      	b.n	16bf6 <z_impl_k_poll+0x196>
   16cfa:	4654      	mov	r4, sl
   16cfc:	e7f3      	b.n	16ce6 <z_impl_k_poll+0x286>
   16cfe:	bf00      	nop
   16d00:	20002370 	.word	0x20002370
		add_event(&event->signal->poll_events, event, poller);
   16d04:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   16d08:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   16d0c:	4598      	cmp	r8, r3
   16d0e:	d02b      	beq.n	16d68 <z_impl_k_poll+0x308>
   16d10:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   16d14:	b343      	cbz	r3, 16d68 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   16d16:	6898      	ldr	r0, [r3, #8]
   16d18:	f005 fd7b 	bl	1c812 <poller_thread>
   16d1c:	4682      	mov	sl, r0
   16d1e:	4638      	mov	r0, r7
   16d20:	f005 fd77 	bl	1c812 <poller_thread>
   16d24:	4601      	mov	r1, r0
   16d26:	900a      	str	r0, [sp, #40]	; 0x28
   16d28:	4650      	mov	r0, sl
   16d2a:	f005 faf2 	bl	1c312 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   16d2e:	2800      	cmp	r0, #0
   16d30:	dc1a      	bgt.n	16d68 <z_impl_k_poll+0x308>
	return list->head == list;
   16d32:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16d36:	45d0      	cmp	r8, sl
   16d38:	d02c      	beq.n	16d94 <z_impl_k_poll+0x334>
   16d3a:	4653      	mov	r3, sl
   16d3c:	46a2      	mov	sl, r4
   16d3e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16d40:	b374      	cbz	r4, 16da0 <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   16d42:	68a0      	ldr	r0, [r4, #8]
   16d44:	f005 fd65 	bl	1c812 <poller_thread>
   16d48:	4601      	mov	r1, r0
   16d4a:	980a      	ldr	r0, [sp, #40]	; 0x28
   16d4c:	f005 fae1 	bl	1c312 <z_sched_prio_cmp>
   16d50:	2800      	cmp	r0, #0
   16d52:	dc13      	bgt.n	16d7c <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16d54:	b334      	cbz	r4, 16da4 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   16d56:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16d5a:	429c      	cmp	r4, r3
   16d5c:	d02d      	beq.n	16dba <z_impl_k_poll+0x35a>
   16d5e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16d60:	2c00      	cmp	r4, #0
   16d62:	d1ed      	bne.n	16d40 <z_impl_k_poll+0x2e0>
   16d64:	4654      	mov	r4, sl
   16d66:	e01e      	b.n	16da6 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   16d68:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   16d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16d6e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   16d72:	6063      	str	r3, [r4, #4]
	tail->next = node;
   16d74:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16d76:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   16d7a:	e73c      	b.n	16bf6 <z_impl_k_poll+0x196>
   16d7c:	4623      	mov	r3, r4
   16d7e:	4654      	mov	r4, sl
   16d80:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   16d82:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   16d84:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16d88:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   16d8c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16d8e:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   16d92:	e730      	b.n	16bf6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16d94:	f04f 0a00 	mov.w	sl, #0
   16d98:	4653      	mov	r3, sl
   16d9a:	46a2      	mov	sl, r4
   16d9c:	461c      	mov	r4, r3
   16d9e:	e7cf      	b.n	16d40 <z_impl_k_poll+0x2e0>
   16da0:	4654      	mov	r4, sl
   16da2:	e000      	b.n	16da6 <z_impl_k_poll+0x346>
   16da4:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   16da6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   16daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16dac:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   16db0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   16db2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16db4:	f8c8 4004 	str.w	r4, [r8, #4]
}
   16db8:	e71d      	b.n	16bf6 <z_impl_k_poll+0x196>
   16dba:	4654      	mov	r4, sl
   16dbc:	e7f3      	b.n	16da6 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   16dbe:	f8d4 a010 	ldr.w	sl, [r4, #16]
   16dc2:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   16dc6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   16dca:	4598      	cmp	r8, r3
   16dcc:	d02b      	beq.n	16e26 <z_impl_k_poll+0x3c6>
   16dce:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   16dd2:	b343      	cbz	r3, 16e26 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   16dd4:	6898      	ldr	r0, [r3, #8]
   16dd6:	f005 fd1c 	bl	1c812 <poller_thread>
   16dda:	900b      	str	r0, [sp, #44]	; 0x2c
   16ddc:	4638      	mov	r0, r7
   16dde:	f005 fd18 	bl	1c812 <poller_thread>
   16de2:	4601      	mov	r1, r0
   16de4:	900a      	str	r0, [sp, #40]	; 0x28
   16de6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16de8:	f005 fa93 	bl	1c312 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   16dec:	2800      	cmp	r0, #0
   16dee:	dc1a      	bgt.n	16e26 <z_impl_k_poll+0x3c6>
	return list->head == list;
   16df0:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16df4:	45d0      	cmp	r8, sl
   16df6:	d02c      	beq.n	16e52 <z_impl_k_poll+0x3f2>
   16df8:	4653      	mov	r3, sl
   16dfa:	46a2      	mov	sl, r4
   16dfc:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16dfe:	b374      	cbz	r4, 16e5e <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   16e00:	68a0      	ldr	r0, [r4, #8]
   16e02:	f005 fd06 	bl	1c812 <poller_thread>
   16e06:	4601      	mov	r1, r0
   16e08:	980a      	ldr	r0, [sp, #40]	; 0x28
   16e0a:	f005 fa82 	bl	1c312 <z_sched_prio_cmp>
   16e0e:	2800      	cmp	r0, #0
   16e10:	dc13      	bgt.n	16e3a <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16e12:	b334      	cbz	r4, 16e62 <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   16e14:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16e18:	429c      	cmp	r4, r3
   16e1a:	d02d      	beq.n	16e78 <z_impl_k_poll+0x418>
   16e1c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16e1e:	2c00      	cmp	r4, #0
   16e20:	d1ed      	bne.n	16dfe <z_impl_k_poll+0x39e>
   16e22:	4654      	mov	r4, sl
   16e24:	e01e      	b.n	16e64 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   16e26:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   16e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16e2c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   16e30:	6063      	str	r3, [r4, #4]
	tail->next = node;
   16e32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16e34:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   16e38:	e6dd      	b.n	16bf6 <z_impl_k_poll+0x196>
   16e3a:	4623      	mov	r3, r4
   16e3c:	4654      	mov	r4, sl
   16e3e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   16e40:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   16e42:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16e46:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   16e4a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16e4c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   16e50:	e6d1      	b.n	16bf6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16e52:	f04f 0a00 	mov.w	sl, #0
   16e56:	4653      	mov	r3, sl
   16e58:	46a2      	mov	sl, r4
   16e5a:	461c      	mov	r4, r3
   16e5c:	e7cf      	b.n	16dfe <z_impl_k_poll+0x39e>
   16e5e:	4654      	mov	r4, sl
   16e60:	e000      	b.n	16e64 <z_impl_k_poll+0x404>
   16e62:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   16e64:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   16e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16e6a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   16e6e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   16e70:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16e72:	f8c8 4004 	str.w	r4, [r8, #4]
}
   16e76:	e6be      	b.n	16bf6 <z_impl_k_poll+0x196>
   16e78:	4654      	mov	r4, sl
   16e7a:	e7f3      	b.n	16e64 <z_impl_k_poll+0x404>
   16e7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   16e80:	f3ef 8111 	mrs	r1, BASEPRI
   16e84:	f383 8812 	msr	BASEPRI_MAX, r3
   16e88:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   16e8c:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   16e90:	b1cb      	cbz	r3, 16ec6 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   16e92:	2300      	movs	r3, #0
   16e94:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16e98:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   16e9c:	4323      	orrs	r3, r4
   16e9e:	d045      	beq.n	16f2c <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   16ea0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   16ea4:	e9cd 3400 	strd	r3, r4, [sp]
   16ea8:	4a3c      	ldr	r2, [pc, #240]	; (16f9c <z_impl_k_poll+0x53c>)
   16eaa:	483d      	ldr	r0, [pc, #244]	; (16fa0 <z_impl_k_poll+0x540>)
   16eac:	f7ff f94a 	bl	16144 <z_pend_curr>
   16eb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   16eb4:	f3ef 8c11 	mrs	ip, BASEPRI
   16eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   16ebc:	f3bf 8f6f 	isb	sy
   16ec0:	4661      	mov	r1, ip
	while (num_events--) {
   16ec2:	465b      	mov	r3, fp
   16ec4:	e04e      	b.n	16f64 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   16ec6:	4608      	mov	r0, r1
	while (num_events--) {
   16ec8:	465b      	mov	r3, fp
   16eca:	e014      	b.n	16ef6 <z_impl_k_poll+0x496>
	return node->next != NULL;
   16ecc:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   16ece:	b12a      	cbz	r2, 16edc <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   16ed0:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   16ed2:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   16ed4:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   16ed6:	2200      	movs	r2, #0
   16ed8:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   16eda:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   16edc:	f380 8811 	msr	BASEPRI, r0
   16ee0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16ee4:	f04f 0340 	mov.w	r3, #64	; 0x40
   16ee8:	f3ef 8011 	mrs	r0, BASEPRI
   16eec:	f383 8812 	msr	BASEPRI_MAX, r3
   16ef0:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   16ef4:	463b      	mov	r3, r7
   16ef6:	1e5f      	subs	r7, r3, #1
   16ef8:	b193      	cbz	r3, 16f20 <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   16efa:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   16efe:	009e      	lsls	r6, r3, #2
   16f00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   16f04:	2200      	movs	r2, #0
   16f06:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   16f08:	7b5a      	ldrb	r2, [r3, #13]
   16f0a:	f002 021f 	and.w	r2, r2, #31
   16f0e:	2a08      	cmp	r2, #8
   16f10:	d8e4      	bhi.n	16edc <z_impl_k_poll+0x47c>
   16f12:	2401      	movs	r4, #1
   16f14:	fa04 f202 	lsl.w	r2, r4, r2
   16f18:	f412 7f8b 	tst.w	r2, #278	; 0x116
   16f1c:	d0de      	beq.n	16edc <z_impl_k_poll+0x47c>
   16f1e:	e7d5      	b.n	16ecc <z_impl_k_poll+0x46c>
	__asm__ volatile(
   16f20:	f381 8811 	msr	BASEPRI, r1
   16f24:	f3bf 8f6f 	isb	sy
		return 0;
   16f28:	4618      	mov	r0, r3
   16f2a:	e034      	b.n	16f96 <z_impl_k_poll+0x536>
   16f2c:	f381 8811 	msr	BASEPRI, r1
   16f30:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   16f34:	f06f 000a 	mvn.w	r0, #10
   16f38:	e02d      	b.n	16f96 <z_impl_k_poll+0x536>
	return node->next != NULL;
   16f3a:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   16f3c:	b12a      	cbz	r2, 16f4a <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   16f3e:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   16f40:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   16f42:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   16f44:	2200      	movs	r2, #0
   16f46:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   16f48:	605a      	str	r2, [r3, #4]
   16f4a:	f381 8811 	msr	BASEPRI, r1
   16f4e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16f52:	f04f 0340 	mov.w	r3, #64	; 0x40
   16f56:	f3ef 8111 	mrs	r1, BASEPRI
   16f5a:	f383 8812 	msr	BASEPRI_MAX, r3
   16f5e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   16f62:	4623      	mov	r3, r4
   16f64:	1e5c      	subs	r4, r3, #1
   16f66:	b193      	cbz	r3, 16f8e <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   16f68:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16f6c:	009f      	lsls	r7, r3, #2
   16f6e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   16f72:	2200      	movs	r2, #0
   16f74:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   16f76:	7b5a      	ldrb	r2, [r3, #13]
   16f78:	f002 021f 	and.w	r2, r2, #31
   16f7c:	2a08      	cmp	r2, #8
   16f7e:	d8e4      	bhi.n	16f4a <z_impl_k_poll+0x4ea>
   16f80:	2601      	movs	r6, #1
   16f82:	fa06 f202 	lsl.w	r2, r6, r2
   16f86:	f412 7f8b 	tst.w	r2, #278	; 0x116
   16f8a:	d0de      	beq.n	16f4a <z_impl_k_poll+0x4ea>
   16f8c:	e7d5      	b.n	16f3a <z_impl_k_poll+0x4da>
	__asm__ volatile(
   16f8e:	f38c 8811 	msr	BASEPRI, ip
   16f92:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   16f96:	b00d      	add	sp, #52	; 0x34
   16f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f9c:	200004b4 	.word	0x200004b4
   16fa0:	200023b4 	.word	0x200023b4

00016fa4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   16fa4:	b538      	push	{r3, r4, r5, lr}
   16fa6:	4603      	mov	r3, r0
	__asm__ volatile(
   16fa8:	f04f 0240 	mov.w	r2, #64	; 0x40
   16fac:	f3ef 8511 	mrs	r5, BASEPRI
   16fb0:	f382 8812 	msr	BASEPRI_MAX, r2
   16fb4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   16fb8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   16fba:	2201      	movs	r2, #1
   16fbc:	6082      	str	r2, [r0, #8]
	return list->head == list;
   16fbe:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   16fc0:	4283      	cmp	r3, r0
   16fc2:	d011      	beq.n	16fe8 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   16fc4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   16fc6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   16fc8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16fca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16fcc:	2300      	movs	r3, #0
   16fce:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   16fd0:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   16fd2:	b148      	cbz	r0, 16fe8 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16fd4:	2101      	movs	r1, #1
   16fd6:	f005 fc6c 	bl	1c8b2 <signal_poll_event>
   16fda:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   16fdc:	4629      	mov	r1, r5
   16fde:	4805      	ldr	r0, [pc, #20]	; (16ff4 <z_impl_k_poll_signal_raise+0x50>)
   16fe0:	f7fe ff4c 	bl	15e7c <z_reschedule>
	return rc;
}
   16fe4:	4620      	mov	r0, r4
   16fe6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   16fe8:	f385 8811 	msr	BASEPRI, r5
   16fec:	f3bf 8f6f 	isb	sy
		return 0;
   16ff0:	2400      	movs	r4, #0
   16ff2:	e7f7      	b.n	16fe4 <z_impl_k_poll_signal_raise+0x40>
   16ff4:	200023b4 	.word	0x200023b4

00016ff8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   16ff8:	b538      	push	{r3, r4, r5, lr}
   16ffa:	4604      	mov	r4, r0
   16ffc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   16ffe:	f004 ffbd 	bl	1bf7c <k_is_in_isr>
   17002:	b948      	cbnz	r0, 17018 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   17004:	4b05      	ldr	r3, [pc, #20]	; (1701c <z_thread_aligned_alloc+0x24>)
   17006:	689b      	ldr	r3, [r3, #8]
   17008:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1700c:	b118      	cbz	r0, 17016 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1700e:	462a      	mov	r2, r5
   17010:	4621      	mov	r1, r4
   17012:	f005 fc80 	bl	1c916 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   17016:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   17018:	2000      	movs	r0, #0
	return ret;
   1701a:	e7fc      	b.n	17016 <z_thread_aligned_alloc+0x1e>
   1701c:	20002370 	.word	0x20002370

00017020 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   17020:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   17022:	4a03      	ldr	r2, [pc, #12]	; (17030 <boot_banner+0x10>)
   17024:	4903      	ldr	r1, [pc, #12]	; (17034 <boot_banner+0x14>)
   17026:	4804      	ldr	r0, [pc, #16]	; (17038 <boot_banner+0x18>)
   17028:	f002 fcf0 	bl	19a0c <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1702c:	bd08      	pop	{r3, pc}
   1702e:	bf00      	nop
   17030:	0001ce28 	.word	0x0001ce28
   17034:	0001e068 	.word	0x0001e068
   17038:	0001e078 	.word	0x0001e078

0001703c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1703c:	b510      	push	{r4, lr}
   1703e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   17040:	4b08      	ldr	r3, [pc, #32]	; (17064 <k_sys_work_q_init+0x28>)
   17042:	9302      	str	r3, [sp, #8]
   17044:	2400      	movs	r4, #0
   17046:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1704a:	ab02      	add	r3, sp, #8
   1704c:	9300      	str	r3, [sp, #0]
   1704e:	f04f 33ff 	mov.w	r3, #4294967295
   17052:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17056:	4904      	ldr	r1, [pc, #16]	; (17068 <k_sys_work_q_init+0x2c>)
   17058:	4804      	ldr	r0, [pc, #16]	; (1706c <k_sys_work_q_init+0x30>)
   1705a:	f7fe fe5f 	bl	15d1c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1705e:	4620      	mov	r0, r4
   17060:	b004      	add	sp, #16
   17062:	bd10      	pop	{r4, pc}
   17064:	0001e0a0 	.word	0x0001e0a0
   17068:	200056a0 	.word	0x200056a0
   1706c:	20001938 	.word	0x20001938

00017070 <nrf_cc3xx_platform_init>:
   17070:	b510      	push	{r4, lr}
   17072:	4c0c      	ldr	r4, [pc, #48]	; (170a4 <nrf_cc3xx_platform_init+0x34>)
   17074:	6823      	ldr	r3, [r4, #0]
   17076:	b113      	cbz	r3, 1707e <nrf_cc3xx_platform_init+0xe>
   17078:	4b0b      	ldr	r3, [pc, #44]	; (170a8 <nrf_cc3xx_platform_init+0x38>)
   1707a:	681b      	ldr	r3, [r3, #0]
   1707c:	b92b      	cbnz	r3, 1708a <nrf_cc3xx_platform_init+0x1a>
   1707e:	f000 fe73 	bl	17d68 <CC_LibInit>
   17082:	b930      	cbnz	r0, 17092 <nrf_cc3xx_platform_init+0x22>
   17084:	4b08      	ldr	r3, [pc, #32]	; (170a8 <nrf_cc3xx_platform_init+0x38>)
   17086:	2201      	movs	r2, #1
   17088:	601a      	str	r2, [r3, #0]
   1708a:	2301      	movs	r3, #1
   1708c:	6023      	str	r3, [r4, #0]
   1708e:	2000      	movs	r0, #0
   17090:	bd10      	pop	{r4, pc}
   17092:	3801      	subs	r0, #1
   17094:	2806      	cmp	r0, #6
   17096:	d901      	bls.n	1709c <nrf_cc3xx_platform_init+0x2c>
   17098:	4804      	ldr	r0, [pc, #16]	; (170ac <nrf_cc3xx_platform_init+0x3c>)
   1709a:	bd10      	pop	{r4, pc}
   1709c:	4b04      	ldr	r3, [pc, #16]	; (170b0 <nrf_cc3xx_platform_init+0x40>)
   1709e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   170a2:	bd10      	pop	{r4, pc}
   170a4:	200023b4 	.word	0x200023b4
   170a8:	200023b8 	.word	0x200023b8
   170ac:	ffff8ffe 	.word	0xffff8ffe
   170b0:	0001e0ac 	.word	0x0001e0ac

000170b4 <nrf_cc3xx_platform_abort>:
   170b4:	f3bf 8f4f 	dsb	sy
   170b8:	4905      	ldr	r1, [pc, #20]	; (170d0 <nrf_cc3xx_platform_abort+0x1c>)
   170ba:	4b06      	ldr	r3, [pc, #24]	; (170d4 <nrf_cc3xx_platform_abort+0x20>)
   170bc:	68ca      	ldr	r2, [r1, #12]
   170be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   170c2:	4313      	orrs	r3, r2
   170c4:	60cb      	str	r3, [r1, #12]
   170c6:	f3bf 8f4f 	dsb	sy
   170ca:	bf00      	nop
   170cc:	e7fd      	b.n	170ca <nrf_cc3xx_platform_abort+0x16>
   170ce:	bf00      	nop
   170d0:	e000ed00 	.word	0xe000ed00
   170d4:	05fa0004 	.word	0x05fa0004

000170d8 <CC_PalAbort>:
   170d8:	b4f0      	push	{r4, r5, r6, r7}
   170da:	4f09      	ldr	r7, [pc, #36]	; (17100 <CC_PalAbort+0x28>)
   170dc:	4e09      	ldr	r6, [pc, #36]	; (17104 <CC_PalAbort+0x2c>)
   170de:	4c0a      	ldr	r4, [pc, #40]	; (17108 <CC_PalAbort+0x30>)
   170e0:	4a0a      	ldr	r2, [pc, #40]	; (1710c <CC_PalAbort+0x34>)
   170e2:	4d0b      	ldr	r5, [pc, #44]	; (17110 <CC_PalAbort+0x38>)
   170e4:	490b      	ldr	r1, [pc, #44]	; (17114 <CC_PalAbort+0x3c>)
   170e6:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   170ea:	603b      	str	r3, [r7, #0]
   170ec:	6852      	ldr	r2, [r2, #4]
   170ee:	6033      	str	r3, [r6, #0]
   170f0:	6023      	str	r3, [r4, #0]
   170f2:	2400      	movs	r4, #0
   170f4:	602b      	str	r3, [r5, #0]
   170f6:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   170fa:	bcf0      	pop	{r4, r5, r6, r7}
   170fc:	4710      	bx	r2
   170fe:	bf00      	nop
   17100:	5002b400 	.word	0x5002b400
   17104:	5002b404 	.word	0x5002b404
   17108:	5002b408 	.word	0x5002b408
   1710c:	200004bc 	.word	0x200004bc
   17110:	5002b40c 	.word	0x5002b40c
   17114:	5002a000 	.word	0x5002a000

00017118 <nrf_cc3xx_platform_set_abort>:
   17118:	e9d0 1200 	ldrd	r1, r2, [r0]
   1711c:	4b01      	ldr	r3, [pc, #4]	; (17124 <nrf_cc3xx_platform_set_abort+0xc>)
   1711e:	e9c3 1200 	strd	r1, r2, [r3]
   17122:	4770      	bx	lr
   17124:	200004bc 	.word	0x200004bc

00017128 <nrf_cc3xx_platform_ctr_drbg_init>:
   17128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1712c:	4c15      	ldr	r4, [pc, #84]	; (17184 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1712e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1718c <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   17132:	2800      	cmp	r0, #0
   17134:	bf18      	it	ne
   17136:	4604      	movne	r4, r0
   17138:	b083      	sub	sp, #12
   1713a:	6820      	ldr	r0, [r4, #0]
   1713c:	4540      	cmp	r0, r8
   1713e:	d01d      	beq.n	1717c <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   17140:	460d      	mov	r5, r1
   17142:	4620      	mov	r0, r4
   17144:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   17148:	f104 0904 	add.w	r9, r4, #4
   1714c:	4616      	mov	r6, r2
   1714e:	f504 778c 	add.w	r7, r4, #280	; 0x118
   17152:	f000 f8d3 	bl	172fc <mbedtls_platform_zeroize>
   17156:	4648      	mov	r0, r9
   17158:	f000 fcf2 	bl	17b40 <cc_mbedtls_entropy_init>
   1715c:	4638      	mov	r0, r7
   1715e:	f000 fb1f 	bl	177a0 <cc_mbedtls_ctr_drbg_init>
   17162:	4909      	ldr	r1, [pc, #36]	; (17188 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   17164:	9600      	str	r6, [sp, #0]
   17166:	464a      	mov	r2, r9
   17168:	4638      	mov	r0, r7
   1716a:	462b      	mov	r3, r5
   1716c:	f000 fb2e 	bl	177cc <cc_mbedtls_ctr_drbg_seed>
   17170:	b908      	cbnz	r0, 17176 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   17172:	f8c4 8000 	str.w	r8, [r4]
   17176:	b003      	add	sp, #12
   17178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1717c:	2000      	movs	r0, #0
   1717e:	b003      	add	sp, #12
   17180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17184:	20002d94 	.word	0x20002d94
   17188:	00017bbd 	.word	0x00017bbd
   1718c:	5ac9bca5 	.word	0x5ac9bca5

00017190 <nrf_cc3xx_platform_ctr_drbg_get>:
   17190:	b5f0      	push	{r4, r5, r6, r7, lr}
   17192:	4c0d      	ldr	r4, [pc, #52]	; (171c8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   17194:	4e0d      	ldr	r6, [pc, #52]	; (171cc <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   17196:	2800      	cmp	r0, #0
   17198:	bf08      	it	eq
   1719a:	4620      	moveq	r0, r4
   1719c:	b083      	sub	sp, #12
   1719e:	6807      	ldr	r7, [r0, #0]
   171a0:	42b7      	cmp	r7, r6
   171a2:	d10e      	bne.n	171c2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   171a4:	2600      	movs	r6, #0
   171a6:	461d      	mov	r5, r3
   171a8:	f500 708c 	add.w	r0, r0, #280	; 0x118
   171ac:	9600      	str	r6, [sp, #0]
   171ae:	4633      	mov	r3, r6
   171b0:	4614      	mov	r4, r2
   171b2:	f000 fb57 	bl	17864 <cc_mbedtls_ctr_drbg_random_with_add>
   171b6:	2800      	cmp	r0, #0
   171b8:	bf18      	it	ne
   171ba:	4634      	movne	r4, r6
   171bc:	602c      	str	r4, [r5, #0]
   171be:	b003      	add	sp, #12
   171c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   171c2:	4803      	ldr	r0, [pc, #12]	; (171d0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   171c4:	e7fb      	b.n	171be <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   171c6:	bf00      	nop
   171c8:	20002d94 	.word	0x20002d94
   171cc:	5ac9bca5 	.word	0x5ac9bca5
   171d0:	ffff8fe8 	.word	0xffff8fe8

000171d4 <mutex_free>:
   171d4:	b510      	push	{r4, lr}
   171d6:	4604      	mov	r4, r0
   171d8:	b130      	cbz	r0, 171e8 <mutex_free+0x14>
   171da:	6863      	ldr	r3, [r4, #4]
   171dc:	06db      	lsls	r3, r3, #27
   171de:	d502      	bpl.n	171e6 <mutex_free+0x12>
   171e0:	2300      	movs	r3, #0
   171e2:	6023      	str	r3, [r4, #0]
   171e4:	6063      	str	r3, [r4, #4]
   171e6:	bd10      	pop	{r4, pc}
   171e8:	4b02      	ldr	r3, [pc, #8]	; (171f4 <mutex_free+0x20>)
   171ea:	4803      	ldr	r0, [pc, #12]	; (171f8 <mutex_free+0x24>)
   171ec:	685b      	ldr	r3, [r3, #4]
   171ee:	4798      	blx	r3
   171f0:	e7f3      	b.n	171da <mutex_free+0x6>
   171f2:	bf00      	nop
   171f4:	200004bc 	.word	0x200004bc
   171f8:	0001e0c8 	.word	0x0001e0c8

000171fc <mutex_unlock>:
   171fc:	b168      	cbz	r0, 1721a <mutex_unlock+0x1e>
   171fe:	6843      	ldr	r3, [r0, #4]
   17200:	b13b      	cbz	r3, 17212 <mutex_unlock+0x16>
   17202:	06db      	lsls	r3, r3, #27
   17204:	d507      	bpl.n	17216 <mutex_unlock+0x1a>
   17206:	f3bf 8f5f 	dmb	sy
   1720a:	2300      	movs	r3, #0
   1720c:	6003      	str	r3, [r0, #0]
   1720e:	4618      	mov	r0, r3
   17210:	4770      	bx	lr
   17212:	4803      	ldr	r0, [pc, #12]	; (17220 <mutex_unlock+0x24>)
   17214:	4770      	bx	lr
   17216:	4803      	ldr	r0, [pc, #12]	; (17224 <mutex_unlock+0x28>)
   17218:	4770      	bx	lr
   1721a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1721e:	4770      	bx	lr
   17220:	ffff8fea 	.word	0xffff8fea
   17224:	ffff8fe9 	.word	0xffff8fe9

00017228 <mutex_init>:
   17228:	b510      	push	{r4, lr}
   1722a:	4604      	mov	r4, r0
   1722c:	b120      	cbz	r0, 17238 <mutex_init+0x10>
   1722e:	2200      	movs	r2, #0
   17230:	2311      	movs	r3, #17
   17232:	6022      	str	r2, [r4, #0]
   17234:	6063      	str	r3, [r4, #4]
   17236:	bd10      	pop	{r4, pc}
   17238:	4801      	ldr	r0, [pc, #4]	; (17240 <mutex_init+0x18>)
   1723a:	f7ff ff4d 	bl	170d8 <CC_PalAbort>
   1723e:	e7f6      	b.n	1722e <mutex_init+0x6>
   17240:	0001e0f0 	.word	0x0001e0f0

00017244 <mutex_lock>:
   17244:	b1c0      	cbz	r0, 17278 <mutex_lock+0x34>
   17246:	6843      	ldr	r3, [r0, #4]
   17248:	b1a3      	cbz	r3, 17274 <mutex_lock+0x30>
   1724a:	06db      	lsls	r3, r3, #27
   1724c:	d510      	bpl.n	17270 <mutex_lock+0x2c>
   1724e:	2201      	movs	r2, #1
   17250:	f3bf 8f5b 	dmb	ish
   17254:	e850 3f00 	ldrex	r3, [r0]
   17258:	e840 2100 	strex	r1, r2, [r0]
   1725c:	2900      	cmp	r1, #0
   1725e:	d1f9      	bne.n	17254 <mutex_lock+0x10>
   17260:	f3bf 8f5b 	dmb	ish
   17264:	2b01      	cmp	r3, #1
   17266:	d0f3      	beq.n	17250 <mutex_lock+0xc>
   17268:	f3bf 8f5f 	dmb	sy
   1726c:	2000      	movs	r0, #0
   1726e:	4770      	bx	lr
   17270:	4803      	ldr	r0, [pc, #12]	; (17280 <mutex_lock+0x3c>)
   17272:	4770      	bx	lr
   17274:	4803      	ldr	r0, [pc, #12]	; (17284 <mutex_lock+0x40>)
   17276:	4770      	bx	lr
   17278:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1727c:	4770      	bx	lr
   1727e:	bf00      	nop
   17280:	ffff8fe9 	.word	0xffff8fe9
   17284:	ffff8fea 	.word	0xffff8fea

00017288 <nrf_cc3xx_platform_set_mutexes>:
   17288:	b570      	push	{r4, r5, r6, lr}
   1728a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1728e:	4c13      	ldr	r4, [pc, #76]	; (172dc <nrf_cc3xx_platform_set_mutexes+0x54>)
   17290:	4d13      	ldr	r5, [pc, #76]	; (172e0 <nrf_cc3xx_platform_set_mutexes+0x58>)
   17292:	e9c4 2300 	strd	r2, r3, [r4]
   17296:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1729a:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1729e:	4b11      	ldr	r3, [pc, #68]	; (172e4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   172a0:	6808      	ldr	r0, [r1, #0]
   172a2:	6018      	str	r0, [r3, #0]
   172a4:	6848      	ldr	r0, [r1, #4]
   172a6:	6058      	str	r0, [r3, #4]
   172a8:	6888      	ldr	r0, [r1, #8]
   172aa:	6098      	str	r0, [r3, #8]
   172ac:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   172b0:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   172b4:	60de      	str	r6, [r3, #12]
   172b6:	6118      	str	r0, [r3, #16]
   172b8:	06cb      	lsls	r3, r1, #27
   172ba:	d50d      	bpl.n	172d8 <nrf_cc3xx_platform_set_mutexes+0x50>
   172bc:	2300      	movs	r3, #0
   172be:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   172c2:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   172c6:	f505 7088 	add.w	r0, r5, #272	; 0x110
   172ca:	4790      	blx	r2
   172cc:	6823      	ldr	r3, [r4, #0]
   172ce:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   172d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172d6:	4718      	bx	r3
   172d8:	bd70      	pop	{r4, r5, r6, pc}
   172da:	bf00      	nop
   172dc:	200004cc 	.word	0x200004cc
   172e0:	20002d94 	.word	0x20002d94
   172e4:	200004dc 	.word	0x200004dc

000172e8 <mbedtls_zeroize_internal>:
   172e8:	b138      	cbz	r0, 172fa <mbedtls_zeroize_internal+0x12>
   172ea:	b131      	cbz	r1, 172fa <mbedtls_zeroize_internal+0x12>
   172ec:	4401      	add	r1, r0
   172ee:	2200      	movs	r2, #0
   172f0:	4603      	mov	r3, r0
   172f2:	3001      	adds	r0, #1
   172f4:	4281      	cmp	r1, r0
   172f6:	701a      	strb	r2, [r3, #0]
   172f8:	d1fa      	bne.n	172f0 <mbedtls_zeroize_internal+0x8>
   172fa:	4770      	bx	lr

000172fc <mbedtls_platform_zeroize>:
   172fc:	b138      	cbz	r0, 1730e <mbedtls_platform_zeroize+0x12>
   172fe:	b131      	cbz	r1, 1730e <mbedtls_platform_zeroize+0x12>
   17300:	4401      	add	r1, r0
   17302:	2200      	movs	r2, #0
   17304:	4603      	mov	r3, r0
   17306:	3001      	adds	r0, #1
   17308:	4288      	cmp	r0, r1
   1730a:	701a      	strb	r2, [r3, #0]
   1730c:	d1fa      	bne.n	17304 <mbedtls_platform_zeroize+0x8>
   1730e:	4770      	bx	lr

00017310 <block_cipher_df>:
   17310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17314:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   17318:	b0b1      	sub	sp, #196	; 0xc4
   1731a:	f200 812e 	bhi.w	1757a <block_cipher_df+0x26a>
   1731e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1758c <block_cipher_df+0x27c>
   17322:	4614      	mov	r4, r2
   17324:	460d      	mov	r5, r1
   17326:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1732a:	2100      	movs	r1, #0
   1732c:	4682      	mov	sl, r0
   1732e:	4648      	mov	r0, r9
   17330:	f003 fc1b 	bl	1ab6a <memset>
   17334:	a813      	add	r0, sp, #76	; 0x4c
   17336:	f001 f9e5 	bl	18704 <cc_mbedtls_aes_init>
   1733a:	2600      	movs	r6, #0
   1733c:	4629      	mov	r1, r5
   1733e:	2320      	movs	r3, #32
   17340:	ba65      	rev16	r5, r4
   17342:	4622      	mov	r2, r4
   17344:	f109 0018 	add.w	r0, r9, #24
   17348:	f8a9 5012 	strh.w	r5, [r9, #18]
   1734c:	f889 3017 	strb.w	r3, [r9, #23]
   17350:	f8a9 6010 	strh.w	r6, [r9, #16]
   17354:	f003 fbe5 	bl	1ab22 <memcpy>
   17358:	eb09 0304 	add.w	r3, r9, r4
   1735c:	2280      	movs	r2, #128	; 0x80
   1735e:	4d88      	ldr	r5, [pc, #544]	; (17580 <block_cipher_df+0x270>)
   17360:	761a      	strb	r2, [r3, #24]
   17362:	4b88      	ldr	r3, [pc, #544]	; (17584 <block_cipher_df+0x274>)
   17364:	9503      	str	r5, [sp, #12]
   17366:	9304      	str	r3, [sp, #16]
   17368:	a813      	add	r0, sp, #76	; 0x4c
   1736a:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1736e:	a903      	add	r1, sp, #12
   17370:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   17374:	e9cd 5305 	strd	r5, r3, [sp, #20]
   17378:	f001 f9da 	bl	18730 <cc_mbedtls_aes_setkey_enc>
   1737c:	4680      	mov	r8, r0
   1737e:	2800      	cmp	r0, #0
   17380:	f040 80da 	bne.w	17538 <block_cipher_df+0x228>
   17384:	f104 0319 	add.w	r3, r4, #25
   17388:	9301      	str	r3, [sp, #4]
   1738a:	af07      	add	r7, sp, #28
   1738c:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   17390:	2210      	movs	r2, #16
   17392:	2100      	movs	r1, #0
   17394:	4638      	mov	r0, r7
   17396:	f003 fbe8 	bl	1ab6a <memset>
   1739a:	4c7b      	ldr	r4, [pc, #492]	; (17588 <block_cipher_df+0x278>)
   1739c:	9d01      	ldr	r5, [sp, #4]
   1739e:	f89d 601d 	ldrb.w	r6, [sp, #29]
   173a2:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   173a6:	f89d e01c 	ldrb.w	lr, [sp, #28]
   173aa:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   173ae:	f89d c01f 	ldrb.w	ip, [sp, #31]
   173b2:	f89d 001e 	ldrb.w	r0, [sp, #30]
   173b6:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   173ba:	404e      	eors	r6, r1
   173bc:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   173c0:	f88d 601d 	strb.w	r6, [sp, #29]
   173c4:	ea8e 0303 	eor.w	r3, lr, r3
   173c8:	4050      	eors	r0, r2
   173ca:	ea8c 0101 	eor.w	r1, ip, r1
   173ce:	f89d 2020 	ldrb.w	r2, [sp, #32]
   173d2:	f88d 301c 	strb.w	r3, [sp, #28]
   173d6:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   173da:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   173de:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   173e2:	f88d 001e 	strb.w	r0, [sp, #30]
   173e6:	f88d 101f 	strb.w	r1, [sp, #31]
   173ea:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   173ee:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   173f2:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   173f6:	405a      	eors	r2, r3
   173f8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   173fc:	f88d 2020 	strb.w	r2, [sp, #32]
   17400:	ea8c 0606 	eor.w	r6, ip, r6
   17404:	4048      	eors	r0, r1
   17406:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1740a:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1740e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   17412:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   17416:	ea8e 0303 	eor.w	r3, lr, r3
   1741a:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1741e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   17422:	ea8c 0101 	eor.w	r1, ip, r1
   17426:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1742a:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1742e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   17432:	ea82 020c 	eor.w	r2, r2, ip
   17436:	4073      	eors	r3, r6
   17438:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1743c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   17440:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   17444:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   17448:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1744c:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   17450:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   17454:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   17458:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1745c:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   17460:	ea8e 0202 	eor.w	r2, lr, r2
   17464:	4041      	eors	r1, r0
   17466:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1746a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1746e:	4073      	eors	r3, r6
   17470:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   17474:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   17478:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1747c:	ea8c 0000 	eor.w	r0, ip, r0
   17480:	4056      	eors	r6, r2
   17482:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   17486:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1748a:	463b      	mov	r3, r7
   1748c:	463a      	mov	r2, r7
   1748e:	2101      	movs	r1, #1
   17490:	a813      	add	r0, sp, #76	; 0x4c
   17492:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   17496:	f001 f965 	bl	18764 <cc_mbedtls_aes_crypt_ecb>
   1749a:	2d10      	cmp	r5, #16
   1749c:	bf94      	ite	ls
   1749e:	1b6d      	subls	r5, r5, r5
   174a0:	3d10      	subhi	r5, #16
   174a2:	2800      	cmp	r0, #0
   174a4:	d167      	bne.n	17576 <block_cipher_df+0x266>
   174a6:	3410      	adds	r4, #16
   174a8:	2d00      	cmp	r5, #0
   174aa:	f47f af78 	bne.w	1739e <block_cipher_df+0x8e>
   174ae:	eb0b 0008 	add.w	r0, fp, r8
   174b2:	2210      	movs	r2, #16
   174b4:	4639      	mov	r1, r7
   174b6:	f003 fb34 	bl	1ab22 <memcpy>
   174ba:	f899 3003 	ldrb.w	r3, [r9, #3]
   174be:	f108 0810 	add.w	r8, r8, #16
   174c2:	3301      	adds	r3, #1
   174c4:	f1b8 0f20 	cmp.w	r8, #32
   174c8:	f889 3003 	strb.w	r3, [r9, #3]
   174cc:	f47f af60 	bne.w	17390 <block_cipher_df+0x80>
   174d0:	2280      	movs	r2, #128	; 0x80
   174d2:	4659      	mov	r1, fp
   174d4:	a813      	add	r0, sp, #76	; 0x4c
   174d6:	f001 f92b 	bl	18730 <cc_mbedtls_aes_setkey_enc>
   174da:	4680      	mov	r8, r0
   174dc:	bb78      	cbnz	r0, 1753e <block_cipher_df+0x22e>
   174de:	f10a 0520 	add.w	r5, sl, #32
   174e2:	4654      	mov	r4, sl
   174e4:	ab0f      	add	r3, sp, #60	; 0x3c
   174e6:	461a      	mov	r2, r3
   174e8:	2101      	movs	r1, #1
   174ea:	a813      	add	r0, sp, #76	; 0x4c
   174ec:	f001 f93a 	bl	18764 <cc_mbedtls_aes_crypt_ecb>
   174f0:	2210      	movs	r2, #16
   174f2:	4680      	mov	r8, r0
   174f4:	a90f      	add	r1, sp, #60	; 0x3c
   174f6:	4620      	mov	r0, r4
   174f8:	4414      	add	r4, r2
   174fa:	f1b8 0f00 	cmp.w	r8, #0
   174fe:	d11e      	bne.n	1753e <block_cipher_df+0x22e>
   17500:	f003 fb0f 	bl	1ab22 <memcpy>
   17504:	42ac      	cmp	r4, r5
   17506:	d1ed      	bne.n	174e4 <block_cipher_df+0x1d4>
   17508:	a813      	add	r0, sp, #76	; 0x4c
   1750a:	f001 f90b 	bl	18724 <cc_mbedtls_aes_free>
   1750e:	481f      	ldr	r0, [pc, #124]	; (1758c <block_cipher_df+0x27c>)
   17510:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   17514:	f7ff fef2 	bl	172fc <mbedtls_platform_zeroize>
   17518:	4658      	mov	r0, fp
   1751a:	2120      	movs	r1, #32
   1751c:	f7ff feee 	bl	172fc <mbedtls_platform_zeroize>
   17520:	a803      	add	r0, sp, #12
   17522:	2110      	movs	r1, #16
   17524:	f7ff feea 	bl	172fc <mbedtls_platform_zeroize>
   17528:	4638      	mov	r0, r7
   1752a:	2110      	movs	r1, #16
   1752c:	f7ff fee6 	bl	172fc <mbedtls_platform_zeroize>
   17530:	4640      	mov	r0, r8
   17532:	b031      	add	sp, #196	; 0xc4
   17534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17538:	af07      	add	r7, sp, #28
   1753a:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1753e:	a813      	add	r0, sp, #76	; 0x4c
   17540:	f001 f8f0 	bl	18724 <cc_mbedtls_aes_free>
   17544:	4811      	ldr	r0, [pc, #68]	; (1758c <block_cipher_df+0x27c>)
   17546:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1754a:	f7ff fed7 	bl	172fc <mbedtls_platform_zeroize>
   1754e:	4658      	mov	r0, fp
   17550:	2120      	movs	r1, #32
   17552:	f7ff fed3 	bl	172fc <mbedtls_platform_zeroize>
   17556:	a803      	add	r0, sp, #12
   17558:	2110      	movs	r1, #16
   1755a:	f7ff fecf 	bl	172fc <mbedtls_platform_zeroize>
   1755e:	4638      	mov	r0, r7
   17560:	2110      	movs	r1, #16
   17562:	f7ff fecb 	bl	172fc <mbedtls_platform_zeroize>
   17566:	4650      	mov	r0, sl
   17568:	2120      	movs	r1, #32
   1756a:	f7ff fec7 	bl	172fc <mbedtls_platform_zeroize>
   1756e:	4640      	mov	r0, r8
   17570:	b031      	add	sp, #196	; 0xc4
   17572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17576:	4680      	mov	r8, r0
   17578:	e7e1      	b.n	1753e <block_cipher_df+0x22e>
   1757a:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1757e:	e7f6      	b.n	1756e <block_cipher_df+0x25e>
   17580:	03020100 	.word	0x03020100
   17584:	07060504 	.word	0x07060504
   17588:	200023dc 	.word	0x200023dc
   1758c:	200023cc 	.word	0x200023cc

00017590 <ctr_drbg_update_internal>:
   17590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17594:	b088      	sub	sp, #32
   17596:	4604      	mov	r4, r0
   17598:	2220      	movs	r2, #32
   1759a:	460d      	mov	r5, r1
   1759c:	4668      	mov	r0, sp
   1759e:	2100      	movs	r1, #0
   175a0:	eb04 0802 	add.w	r8, r4, r2
   175a4:	f003 fae1 	bl	1ab6a <memset>
   175a8:	466e      	mov	r6, sp
   175aa:	7be2      	ldrb	r2, [r4, #15]
   175ac:	3201      	adds	r2, #1
   175ae:	b2d2      	uxtb	r2, r2
   175b0:	73e2      	strb	r2, [r4, #15]
   175b2:	2a00      	cmp	r2, #0
   175b4:	d14d      	bne.n	17652 <ctr_drbg_update_internal+0xc2>
   175b6:	7ba2      	ldrb	r2, [r4, #14]
   175b8:	3201      	adds	r2, #1
   175ba:	b2d2      	uxtb	r2, r2
   175bc:	73a2      	strb	r2, [r4, #14]
   175be:	2a00      	cmp	r2, #0
   175c0:	d147      	bne.n	17652 <ctr_drbg_update_internal+0xc2>
   175c2:	7b63      	ldrb	r3, [r4, #13]
   175c4:	3301      	adds	r3, #1
   175c6:	b2db      	uxtb	r3, r3
   175c8:	7363      	strb	r3, [r4, #13]
   175ca:	2b00      	cmp	r3, #0
   175cc:	d141      	bne.n	17652 <ctr_drbg_update_internal+0xc2>
   175ce:	7b23      	ldrb	r3, [r4, #12]
   175d0:	3301      	adds	r3, #1
   175d2:	b2db      	uxtb	r3, r3
   175d4:	7323      	strb	r3, [r4, #12]
   175d6:	2b00      	cmp	r3, #0
   175d8:	d13b      	bne.n	17652 <ctr_drbg_update_internal+0xc2>
   175da:	7ae3      	ldrb	r3, [r4, #11]
   175dc:	3301      	adds	r3, #1
   175de:	b2db      	uxtb	r3, r3
   175e0:	72e3      	strb	r3, [r4, #11]
   175e2:	2b00      	cmp	r3, #0
   175e4:	d135      	bne.n	17652 <ctr_drbg_update_internal+0xc2>
   175e6:	7aa3      	ldrb	r3, [r4, #10]
   175e8:	3301      	adds	r3, #1
   175ea:	b2db      	uxtb	r3, r3
   175ec:	72a3      	strb	r3, [r4, #10]
   175ee:	2b00      	cmp	r3, #0
   175f0:	d12f      	bne.n	17652 <ctr_drbg_update_internal+0xc2>
   175f2:	7a63      	ldrb	r3, [r4, #9]
   175f4:	3301      	adds	r3, #1
   175f6:	b2db      	uxtb	r3, r3
   175f8:	7263      	strb	r3, [r4, #9]
   175fa:	bb53      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   175fc:	7a23      	ldrb	r3, [r4, #8]
   175fe:	3301      	adds	r3, #1
   17600:	b2db      	uxtb	r3, r3
   17602:	7223      	strb	r3, [r4, #8]
   17604:	bb2b      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   17606:	79e3      	ldrb	r3, [r4, #7]
   17608:	3301      	adds	r3, #1
   1760a:	b2db      	uxtb	r3, r3
   1760c:	71e3      	strb	r3, [r4, #7]
   1760e:	bb03      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   17610:	79a3      	ldrb	r3, [r4, #6]
   17612:	3301      	adds	r3, #1
   17614:	b2db      	uxtb	r3, r3
   17616:	71a3      	strb	r3, [r4, #6]
   17618:	b9db      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   1761a:	7963      	ldrb	r3, [r4, #5]
   1761c:	3301      	adds	r3, #1
   1761e:	b2db      	uxtb	r3, r3
   17620:	7163      	strb	r3, [r4, #5]
   17622:	b9b3      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   17624:	7923      	ldrb	r3, [r4, #4]
   17626:	3301      	adds	r3, #1
   17628:	b2db      	uxtb	r3, r3
   1762a:	7123      	strb	r3, [r4, #4]
   1762c:	b98b      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   1762e:	78e3      	ldrb	r3, [r4, #3]
   17630:	3301      	adds	r3, #1
   17632:	b2db      	uxtb	r3, r3
   17634:	70e3      	strb	r3, [r4, #3]
   17636:	b963      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   17638:	78a3      	ldrb	r3, [r4, #2]
   1763a:	3301      	adds	r3, #1
   1763c:	b2db      	uxtb	r3, r3
   1763e:	70a3      	strb	r3, [r4, #2]
   17640:	b93b      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   17642:	7863      	ldrb	r3, [r4, #1]
   17644:	3301      	adds	r3, #1
   17646:	b2db      	uxtb	r3, r3
   17648:	7063      	strb	r3, [r4, #1]
   1764a:	b913      	cbnz	r3, 17652 <ctr_drbg_update_internal+0xc2>
   1764c:	7823      	ldrb	r3, [r4, #0]
   1764e:	3301      	adds	r3, #1
   17650:	7023      	strb	r3, [r4, #0]
   17652:	4633      	mov	r3, r6
   17654:	4622      	mov	r2, r4
   17656:	2101      	movs	r1, #1
   17658:	4640      	mov	r0, r8
   1765a:	f001 f883 	bl	18764 <cc_mbedtls_aes_crypt_ecb>
   1765e:	4607      	mov	r7, r0
   17660:	2800      	cmp	r0, #0
   17662:	d12b      	bne.n	176bc <ctr_drbg_update_internal+0x12c>
   17664:	3610      	adds	r6, #16
   17666:	ab08      	add	r3, sp, #32
   17668:	429e      	cmp	r6, r3
   1766a:	d19e      	bne.n	175aa <ctr_drbg_update_internal+0x1a>
   1766c:	9e01      	ldr	r6, [sp, #4]
   1766e:	686a      	ldr	r2, [r5, #4]
   17670:	9f00      	ldr	r7, [sp, #0]
   17672:	6829      	ldr	r1, [r5, #0]
   17674:	68ab      	ldr	r3, [r5, #8]
   17676:	4072      	eors	r2, r6
   17678:	9e02      	ldr	r6, [sp, #8]
   1767a:	9201      	str	r2, [sp, #4]
   1767c:	4079      	eors	r1, r7
   1767e:	4073      	eors	r3, r6
   17680:	9100      	str	r1, [sp, #0]
   17682:	9e03      	ldr	r6, [sp, #12]
   17684:	68e9      	ldr	r1, [r5, #12]
   17686:	692a      	ldr	r2, [r5, #16]
   17688:	9302      	str	r3, [sp, #8]
   1768a:	4071      	eors	r1, r6
   1768c:	9e04      	ldr	r6, [sp, #16]
   1768e:	696b      	ldr	r3, [r5, #20]
   17690:	9103      	str	r1, [sp, #12]
   17692:	4056      	eors	r6, r2
   17694:	9a05      	ldr	r2, [sp, #20]
   17696:	9604      	str	r6, [sp, #16]
   17698:	ea83 0102 	eor.w	r1, r3, r2
   1769c:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   176a0:	9d06      	ldr	r5, [sp, #24]
   176a2:	9105      	str	r1, [sp, #20]
   176a4:	4055      	eors	r5, r2
   176a6:	9a07      	ldr	r2, [sp, #28]
   176a8:	4640      	mov	r0, r8
   176aa:	4053      	eors	r3, r2
   176ac:	4669      	mov	r1, sp
   176ae:	2280      	movs	r2, #128	; 0x80
   176b0:	e9cd 5306 	strd	r5, r3, [sp, #24]
   176b4:	f001 f83c 	bl	18730 <cc_mbedtls_aes_setkey_enc>
   176b8:	4607      	mov	r7, r0
   176ba:	b138      	cbz	r0, 176cc <ctr_drbg_update_internal+0x13c>
   176bc:	4668      	mov	r0, sp
   176be:	2120      	movs	r1, #32
   176c0:	f7ff fe1c 	bl	172fc <mbedtls_platform_zeroize>
   176c4:	4638      	mov	r0, r7
   176c6:	b008      	add	sp, #32
   176c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176cc:	2210      	movs	r2, #16
   176ce:	4620      	mov	r0, r4
   176d0:	eb0d 0102 	add.w	r1, sp, r2
   176d4:	f003 fa25 	bl	1ab22 <memcpy>
   176d8:	e7f0      	b.n	176bc <ctr_drbg_update_internal+0x12c>
   176da:	bf00      	nop

000176dc <mbedtls_ctr_drbg_reseed_internal>:
   176dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   176e0:	4604      	mov	r4, r0
   176e2:	6980      	ldr	r0, [r0, #24]
   176e4:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   176e8:	d852      	bhi.n	17790 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   176ea:	461d      	mov	r5, r3
   176ec:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   176f0:	42ab      	cmp	r3, r5
   176f2:	d34d      	bcc.n	17790 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   176f4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   176f8:	1a18      	subs	r0, r3, r0
   176fa:	4290      	cmp	r0, r2
   176fc:	4616      	mov	r6, r2
   176fe:	d347      	bcc.n	17790 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   17700:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1779c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   17704:	f44f 72c0 	mov.w	r2, #384	; 0x180
   17708:	460f      	mov	r7, r1
   1770a:	4648      	mov	r0, r9
   1770c:	2100      	movs	r1, #0
   1770e:	f003 fa2c 	bl	1ab6a <memset>
   17712:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   17716:	69a2      	ldr	r2, [r4, #24]
   17718:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1771c:	4649      	mov	r1, r9
   1771e:	4798      	blx	r3
   17720:	2800      	cmp	r0, #0
   17722:	d138      	bne.n	17796 <mbedtls_ctr_drbg_reseed_internal+0xba>
   17724:	f8d4 8018 	ldr.w	r8, [r4, #24]
   17728:	b13d      	cbz	r5, 1773a <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1772a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1772e:	462a      	mov	r2, r5
   17730:	eb09 0108 	add.w	r1, r9, r8
   17734:	4798      	blx	r3
   17736:	bb70      	cbnz	r0, 17796 <mbedtls_ctr_drbg_reseed_internal+0xba>
   17738:	44a8      	add	r8, r5
   1773a:	b107      	cbz	r7, 1773e <mbedtls_ctr_drbg_reseed_internal+0x62>
   1773c:	b9c6      	cbnz	r6, 17770 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1773e:	4917      	ldr	r1, [pc, #92]	; (1779c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   17740:	4642      	mov	r2, r8
   17742:	4608      	mov	r0, r1
   17744:	f7ff fde4 	bl	17310 <block_cipher_df>
   17748:	4605      	mov	r5, r0
   1774a:	b138      	cbz	r0, 1775c <mbedtls_ctr_drbg_reseed_internal+0x80>
   1774c:	4813      	ldr	r0, [pc, #76]	; (1779c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1774e:	f44f 71c0 	mov.w	r1, #384	; 0x180
   17752:	f7ff fdd3 	bl	172fc <mbedtls_platform_zeroize>
   17756:	4628      	mov	r0, r5
   17758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1775c:	490f      	ldr	r1, [pc, #60]	; (1779c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1775e:	4620      	mov	r0, r4
   17760:	f7ff ff16 	bl	17590 <ctr_drbg_update_internal>
   17764:	4605      	mov	r5, r0
   17766:	2800      	cmp	r0, #0
   17768:	d1f0      	bne.n	1774c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1776a:	2301      	movs	r3, #1
   1776c:	6123      	str	r3, [r4, #16]
   1776e:	e7ed      	b.n	1774c <mbedtls_ctr_drbg_reseed_internal+0x70>
   17770:	4639      	mov	r1, r7
   17772:	eb09 0008 	add.w	r0, r9, r8
   17776:	4632      	mov	r2, r6
   17778:	f003 f9d3 	bl	1ab22 <memcpy>
   1777c:	4907      	ldr	r1, [pc, #28]	; (1779c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1777e:	44b0      	add	r8, r6
   17780:	4642      	mov	r2, r8
   17782:	4608      	mov	r0, r1
   17784:	f7ff fdc4 	bl	17310 <block_cipher_df>
   17788:	4605      	mov	r5, r0
   1778a:	2800      	cmp	r0, #0
   1778c:	d1de      	bne.n	1774c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1778e:	e7e5      	b.n	1775c <mbedtls_ctr_drbg_reseed_internal+0x80>
   17790:	f06f 0537 	mvn.w	r5, #55	; 0x37
   17794:	e7df      	b.n	17756 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   17796:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1779a:	e7dc      	b.n	17756 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1779c:	2000256c 	.word	0x2000256c

000177a0 <cc_mbedtls_ctr_drbg_init>:
   177a0:	b510      	push	{r4, lr}
   177a2:	22a4      	movs	r2, #164	; 0xa4
   177a4:	4604      	mov	r4, r0
   177a6:	2100      	movs	r1, #0
   177a8:	f003 f9df 	bl	1ab6a <memset>
   177ac:	4b06      	ldr	r3, [pc, #24]	; (177c8 <cc_mbedtls_ctr_drbg_init+0x28>)
   177ae:	f04f 31ff 	mov.w	r1, #4294967295
   177b2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   177b6:	6121      	str	r1, [r4, #16]
   177b8:	61e2      	str	r2, [r4, #28]
   177ba:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   177be:	681b      	ldr	r3, [r3, #0]
   177c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   177c4:	4718      	bx	r3
   177c6:	bf00      	nop
   177c8:	20000520 	.word	0x20000520

000177cc <cc_mbedtls_ctr_drbg_seed>:
   177cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   177d0:	b085      	sub	sp, #20
   177d2:	4605      	mov	r5, r0
   177d4:	460f      	mov	r7, r1
   177d6:	4616      	mov	r6, r2
   177d8:	4668      	mov	r0, sp
   177da:	2210      	movs	r2, #16
   177dc:	2100      	movs	r1, #0
   177de:	4699      	mov	r9, r3
   177e0:	f003 f9c3 	bl	1ab6a <memset>
   177e4:	4b1d      	ldr	r3, [pc, #116]	; (1785c <cc_mbedtls_ctr_drbg_seed+0x90>)
   177e6:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   177ea:	681b      	ldr	r3, [r3, #0]
   177ec:	4640      	mov	r0, r8
   177ee:	4798      	blx	r3
   177f0:	b120      	cbz	r0, 177fc <cc_mbedtls_ctr_drbg_seed+0x30>
   177f2:	4604      	mov	r4, r0
   177f4:	4620      	mov	r0, r4
   177f6:	b005      	add	sp, #20
   177f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   177fc:	f105 0420 	add.w	r4, r5, #32
   17800:	4620      	mov	r0, r4
   17802:	f000 ff7f 	bl	18704 <cc_mbedtls_aes_init>
   17806:	69aa      	ldr	r2, [r5, #24]
   17808:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1780c:	692e      	ldr	r6, [r5, #16]
   1780e:	b9e2      	cbnz	r2, 1784a <cc_mbedtls_ctr_drbg_seed+0x7e>
   17810:	2220      	movs	r2, #32
   17812:	2e00      	cmp	r6, #0
   17814:	61aa      	str	r2, [r5, #24]
   17816:	db1f      	blt.n	17858 <cc_mbedtls_ctr_drbg_seed+0x8c>
   17818:	4620      	mov	r0, r4
   1781a:	4669      	mov	r1, sp
   1781c:	2280      	movs	r2, #128	; 0x80
   1781e:	f000 ff87 	bl	18730 <cc_mbedtls_aes_setkey_enc>
   17822:	4604      	mov	r4, r0
   17824:	b930      	cbnz	r0, 17834 <cc_mbedtls_ctr_drbg_seed+0x68>
   17826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17828:	4633      	mov	r3, r6
   1782a:	4649      	mov	r1, r9
   1782c:	4628      	mov	r0, r5
   1782e:	f7ff ff55 	bl	176dc <mbedtls_ctr_drbg_reseed_internal>
   17832:	4604      	mov	r4, r0
   17834:	4b0a      	ldr	r3, [pc, #40]	; (17860 <cc_mbedtls_ctr_drbg_seed+0x94>)
   17836:	4640      	mov	r0, r8
   17838:	681b      	ldr	r3, [r3, #0]
   1783a:	4798      	blx	r3
   1783c:	2800      	cmp	r0, #0
   1783e:	bf18      	it	ne
   17840:	4604      	movne	r4, r0
   17842:	4620      	mov	r0, r4
   17844:	b005      	add	sp, #20
   17846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1784a:	2e00      	cmp	r6, #0
   1784c:	dae4      	bge.n	17818 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1784e:	2a17      	cmp	r2, #23
   17850:	d802      	bhi.n	17858 <cc_mbedtls_ctr_drbg_seed+0x8c>
   17852:	1c53      	adds	r3, r2, #1
   17854:	085e      	lsrs	r6, r3, #1
   17856:	e7df      	b.n	17818 <cc_mbedtls_ctr_drbg_seed+0x4c>
   17858:	2600      	movs	r6, #0
   1785a:	e7dd      	b.n	17818 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1785c:	20000524 	.word	0x20000524
   17860:	20000528 	.word	0x20000528

00017864 <cc_mbedtls_ctr_drbg_random_with_add>:
   17864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17868:	b08d      	sub	sp, #52	; 0x34
   1786a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1786e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   17872:	f200 80e4 	bhi.w	17a3e <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   17876:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1787a:	f200 80dd 	bhi.w	17a38 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1787e:	4604      	mov	r4, r0
   17880:	4615      	mov	r5, r2
   17882:	460e      	mov	r6, r1
   17884:	2220      	movs	r2, #32
   17886:	2100      	movs	r1, #0
   17888:	a804      	add	r0, sp, #16
   1788a:	461f      	mov	r7, r3
   1788c:	f003 f96d 	bl	1ab6a <memset>
   17890:	4b6c      	ldr	r3, [pc, #432]	; (17a44 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   17892:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   17896:	681b      	ldr	r3, [r3, #0]
   17898:	4648      	mov	r0, r9
   1789a:	4798      	blx	r3
   1789c:	4683      	mov	fp, r0
   1789e:	2800      	cmp	r0, #0
   178a0:	f040 8093 	bne.w	179ca <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   178a4:	6922      	ldr	r2, [r4, #16]
   178a6:	69e3      	ldr	r3, [r4, #28]
   178a8:	429a      	cmp	r2, r3
   178aa:	f300 8092 	bgt.w	179d2 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   178ae:	6963      	ldr	r3, [r4, #20]
   178b0:	2b00      	cmp	r3, #0
   178b2:	f040 808e 	bne.w	179d2 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   178b6:	f1b8 0f00 	cmp.w	r8, #0
   178ba:	f040 80a9 	bne.w	17a10 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   178be:	f8df a188 	ldr.w	sl, [pc, #392]	; 17a48 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   178c2:	466f      	mov	r7, sp
   178c4:	2d00      	cmp	r5, #0
   178c6:	f000 8098 	beq.w	179fa <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   178ca:	f104 0820 	add.w	r8, r4, #32
   178ce:	466f      	mov	r7, sp
   178d0:	e00e      	b.n	178f0 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   178d2:	2d10      	cmp	r5, #16
   178d4:	46ab      	mov	fp, r5
   178d6:	bf28      	it	cs
   178d8:	f04f 0b10 	movcs.w	fp, #16
   178dc:	4630      	mov	r0, r6
   178de:	465a      	mov	r2, fp
   178e0:	4639      	mov	r1, r7
   178e2:	f003 f91e 	bl	1ab22 <memcpy>
   178e6:	ebb5 050b 	subs.w	r5, r5, fp
   178ea:	445e      	add	r6, fp
   178ec:	f000 8085 	beq.w	179fa <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   178f0:	7be3      	ldrb	r3, [r4, #15]
   178f2:	3301      	adds	r3, #1
   178f4:	b2db      	uxtb	r3, r3
   178f6:	73e3      	strb	r3, [r4, #15]
   178f8:	2b00      	cmp	r3, #0
   178fa:	d14d      	bne.n	17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   178fc:	7ba3      	ldrb	r3, [r4, #14]
   178fe:	3301      	adds	r3, #1
   17900:	b2db      	uxtb	r3, r3
   17902:	73a3      	strb	r3, [r4, #14]
   17904:	2b00      	cmp	r3, #0
   17906:	d147      	bne.n	17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17908:	7b63      	ldrb	r3, [r4, #13]
   1790a:	3301      	adds	r3, #1
   1790c:	b2db      	uxtb	r3, r3
   1790e:	7363      	strb	r3, [r4, #13]
   17910:	2b00      	cmp	r3, #0
   17912:	d141      	bne.n	17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17914:	7b23      	ldrb	r3, [r4, #12]
   17916:	3301      	adds	r3, #1
   17918:	b2db      	uxtb	r3, r3
   1791a:	7323      	strb	r3, [r4, #12]
   1791c:	2b00      	cmp	r3, #0
   1791e:	d13b      	bne.n	17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17920:	7ae3      	ldrb	r3, [r4, #11]
   17922:	3301      	adds	r3, #1
   17924:	b2db      	uxtb	r3, r3
   17926:	72e3      	strb	r3, [r4, #11]
   17928:	2b00      	cmp	r3, #0
   1792a:	d135      	bne.n	17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1792c:	7aa3      	ldrb	r3, [r4, #10]
   1792e:	3301      	adds	r3, #1
   17930:	b2db      	uxtb	r3, r3
   17932:	72a3      	strb	r3, [r4, #10]
   17934:	2b00      	cmp	r3, #0
   17936:	d12f      	bne.n	17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17938:	7a63      	ldrb	r3, [r4, #9]
   1793a:	3301      	adds	r3, #1
   1793c:	b2db      	uxtb	r3, r3
   1793e:	7263      	strb	r3, [r4, #9]
   17940:	bb53      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17942:	7a23      	ldrb	r3, [r4, #8]
   17944:	3301      	adds	r3, #1
   17946:	b2db      	uxtb	r3, r3
   17948:	7223      	strb	r3, [r4, #8]
   1794a:	bb2b      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1794c:	79e3      	ldrb	r3, [r4, #7]
   1794e:	3301      	adds	r3, #1
   17950:	b2db      	uxtb	r3, r3
   17952:	71e3      	strb	r3, [r4, #7]
   17954:	bb03      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17956:	79a3      	ldrb	r3, [r4, #6]
   17958:	3301      	adds	r3, #1
   1795a:	b2db      	uxtb	r3, r3
   1795c:	71a3      	strb	r3, [r4, #6]
   1795e:	b9db      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17960:	7963      	ldrb	r3, [r4, #5]
   17962:	3301      	adds	r3, #1
   17964:	b2db      	uxtb	r3, r3
   17966:	7163      	strb	r3, [r4, #5]
   17968:	b9b3      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1796a:	7923      	ldrb	r3, [r4, #4]
   1796c:	3301      	adds	r3, #1
   1796e:	b2db      	uxtb	r3, r3
   17970:	7123      	strb	r3, [r4, #4]
   17972:	b98b      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17974:	78e3      	ldrb	r3, [r4, #3]
   17976:	3301      	adds	r3, #1
   17978:	b2db      	uxtb	r3, r3
   1797a:	70e3      	strb	r3, [r4, #3]
   1797c:	b963      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1797e:	78a3      	ldrb	r3, [r4, #2]
   17980:	3301      	adds	r3, #1
   17982:	b2db      	uxtb	r3, r3
   17984:	70a3      	strb	r3, [r4, #2]
   17986:	b93b      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17988:	7863      	ldrb	r3, [r4, #1]
   1798a:	3301      	adds	r3, #1
   1798c:	b2db      	uxtb	r3, r3
   1798e:	7063      	strb	r3, [r4, #1]
   17990:	b913      	cbnz	r3, 17998 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17992:	7823      	ldrb	r3, [r4, #0]
   17994:	3301      	adds	r3, #1
   17996:	7023      	strb	r3, [r4, #0]
   17998:	463b      	mov	r3, r7
   1799a:	4622      	mov	r2, r4
   1799c:	2101      	movs	r1, #1
   1799e:	4640      	mov	r0, r8
   179a0:	f000 fee0 	bl	18764 <cc_mbedtls_aes_crypt_ecb>
   179a4:	4683      	mov	fp, r0
   179a6:	2800      	cmp	r0, #0
   179a8:	d093      	beq.n	178d2 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   179aa:	f8da 3000 	ldr.w	r3, [sl]
   179ae:	4648      	mov	r0, r9
   179b0:	4798      	blx	r3
   179b2:	2120      	movs	r1, #32
   179b4:	4603      	mov	r3, r0
   179b6:	a804      	add	r0, sp, #16
   179b8:	2b00      	cmp	r3, #0
   179ba:	bf18      	it	ne
   179bc:	469b      	movne	fp, r3
   179be:	f7ff fc9d 	bl	172fc <mbedtls_platform_zeroize>
   179c2:	4638      	mov	r0, r7
   179c4:	2110      	movs	r1, #16
   179c6:	f7ff fc99 	bl	172fc <mbedtls_platform_zeroize>
   179ca:	4658      	mov	r0, fp
   179cc:	b00d      	add	sp, #52	; 0x34
   179ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179d2:	4642      	mov	r2, r8
   179d4:	4639      	mov	r1, r7
   179d6:	2300      	movs	r3, #0
   179d8:	4620      	mov	r0, r4
   179da:	f7ff fe7f 	bl	176dc <mbedtls_ctr_drbg_reseed_internal>
   179de:	f8df a068 	ldr.w	sl, [pc, #104]	; 17a48 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   179e2:	2800      	cmp	r0, #0
   179e4:	f43f af6d 	beq.w	178c2 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   179e8:	f8da 3000 	ldr.w	r3, [sl]
   179ec:	4648      	mov	r0, r9
   179ee:	4798      	blx	r3
   179f0:	4683      	mov	fp, r0
   179f2:	2800      	cmp	r0, #0
   179f4:	f43f af65 	beq.w	178c2 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   179f8:	e7e7      	b.n	179ca <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   179fa:	a904      	add	r1, sp, #16
   179fc:	4620      	mov	r0, r4
   179fe:	f7ff fdc7 	bl	17590 <ctr_drbg_update_internal>
   17a02:	4683      	mov	fp, r0
   17a04:	2800      	cmp	r0, #0
   17a06:	d1d0      	bne.n	179aa <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   17a08:	6923      	ldr	r3, [r4, #16]
   17a0a:	3301      	adds	r3, #1
   17a0c:	6123      	str	r3, [r4, #16]
   17a0e:	e7cc      	b.n	179aa <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   17a10:	4642      	mov	r2, r8
   17a12:	4639      	mov	r1, r7
   17a14:	a804      	add	r0, sp, #16
   17a16:	f7ff fc7b 	bl	17310 <block_cipher_df>
   17a1a:	4683      	mov	fp, r0
   17a1c:	b118      	cbz	r0, 17a26 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   17a1e:	f8df a028 	ldr.w	sl, [pc, #40]	; 17a48 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   17a22:	466f      	mov	r7, sp
   17a24:	e7c1      	b.n	179aa <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   17a26:	a904      	add	r1, sp, #16
   17a28:	4620      	mov	r0, r4
   17a2a:	f7ff fdb1 	bl	17590 <ctr_drbg_update_internal>
   17a2e:	4683      	mov	fp, r0
   17a30:	2800      	cmp	r0, #0
   17a32:	f43f af44 	beq.w	178be <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   17a36:	e7f2      	b.n	17a1e <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   17a38:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   17a3c:	e7c5      	b.n	179ca <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   17a3e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   17a42:	e7c2      	b.n	179ca <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   17a44:	20000524 	.word	0x20000524
   17a48:	20000528 	.word	0x20000528

00017a4c <entropy_update>:
   17a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17a50:	2b20      	cmp	r3, #32
   17a52:	b08b      	sub	sp, #44	; 0x2c
   17a54:	461d      	mov	r5, r3
   17a56:	4606      	mov	r6, r0
   17a58:	4689      	mov	r9, r1
   17a5a:	4690      	mov	r8, r2
   17a5c:	d826      	bhi.n	17aac <entropy_update+0x60>
   17a5e:	b2db      	uxtb	r3, r3
   17a60:	af02      	add	r7, sp, #8
   17a62:	6831      	ldr	r1, [r6, #0]
   17a64:	f88d 9004 	strb.w	r9, [sp, #4]
   17a68:	f88d 3005 	strb.w	r3, [sp, #5]
   17a6c:	f106 0904 	add.w	r9, r6, #4
   17a70:	b921      	cbnz	r1, 17a7c <entropy_update+0x30>
   17a72:	4648      	mov	r0, r9
   17a74:	f000 feba 	bl	187ec <cc_mbedtls_sha256_starts>
   17a78:	4604      	mov	r4, r0
   17a7a:	b940      	cbnz	r0, 17a8e <entropy_update+0x42>
   17a7c:	2301      	movs	r3, #1
   17a7e:	6033      	str	r3, [r6, #0]
   17a80:	2202      	movs	r2, #2
   17a82:	a901      	add	r1, sp, #4
   17a84:	4648      	mov	r0, r9
   17a86:	f000 fec5 	bl	18814 <cc_mbedtls_sha256_update>
   17a8a:	4604      	mov	r4, r0
   17a8c:	b138      	cbz	r0, 17a9e <entropy_update+0x52>
   17a8e:	4638      	mov	r0, r7
   17a90:	2120      	movs	r1, #32
   17a92:	f7ff fc33 	bl	172fc <mbedtls_platform_zeroize>
   17a96:	4620      	mov	r0, r4
   17a98:	b00b      	add	sp, #44	; 0x2c
   17a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17a9e:	462a      	mov	r2, r5
   17aa0:	4641      	mov	r1, r8
   17aa2:	4648      	mov	r0, r9
   17aa4:	f000 feb6 	bl	18814 <cc_mbedtls_sha256_update>
   17aa8:	4604      	mov	r4, r0
   17aaa:	e7f0      	b.n	17a8e <entropy_update+0x42>
   17aac:	af02      	add	r7, sp, #8
   17aae:	4619      	mov	r1, r3
   17ab0:	4610      	mov	r0, r2
   17ab2:	2300      	movs	r3, #0
   17ab4:	463a      	mov	r2, r7
   17ab6:	f000 ffad 	bl	18a14 <cc_mbedtls_sha256>
   17aba:	4604      	mov	r4, r0
   17abc:	2800      	cmp	r0, #0
   17abe:	d1e6      	bne.n	17a8e <entropy_update+0x42>
   17ac0:	2320      	movs	r3, #32
   17ac2:	461d      	mov	r5, r3
   17ac4:	46b8      	mov	r8, r7
   17ac6:	e7cc      	b.n	17a62 <entropy_update+0x16>

00017ac8 <entropy_gather_internal.part.0>:
   17ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17aca:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   17ace:	b0a7      	sub	sp, #156	; 0x9c
   17ad0:	2b00      	cmp	r3, #0
   17ad2:	bfd8      	it	le
   17ad4:	ae02      	addle	r6, sp, #8
   17ad6:	dd2c      	ble.n	17b32 <entropy_gather_internal.part.0+0x6a>
   17ad8:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   17adc:	4605      	mov	r5, r0
   17ade:	2300      	movs	r3, #0
   17ae0:	ae02      	add	r6, sp, #8
   17ae2:	9301      	str	r3, [sp, #4]
   17ae4:	f1a4 0701 	sub.w	r7, r4, #1
   17ae8:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   17aec:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   17af0:	4631      	mov	r1, r6
   17af2:	ab01      	add	r3, sp, #4
   17af4:	2290      	movs	r2, #144	; 0x90
   17af6:	47a0      	blx	r4
   17af8:	fab7 f787 	clz	r7, r7
   17afc:	097f      	lsrs	r7, r7, #5
   17afe:	4604      	mov	r4, r0
   17b00:	b910      	cbnz	r0, 17b08 <entropy_gather_internal.part.0+0x40>
   17b02:	9b01      	ldr	r3, [sp, #4]
   17b04:	b93b      	cbnz	r3, 17b16 <entropy_gather_internal.part.0+0x4e>
   17b06:	b1a7      	cbz	r7, 17b32 <entropy_gather_internal.part.0+0x6a>
   17b08:	4630      	mov	r0, r6
   17b0a:	2190      	movs	r1, #144	; 0x90
   17b0c:	f7ff fbf6 	bl	172fc <mbedtls_platform_zeroize>
   17b10:	4620      	mov	r0, r4
   17b12:	b027      	add	sp, #156	; 0x9c
   17b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b16:	4601      	mov	r1, r0
   17b18:	4632      	mov	r2, r6
   17b1a:	4628      	mov	r0, r5
   17b1c:	f7ff ff96 	bl	17a4c <entropy_update>
   17b20:	b950      	cbnz	r0, 17b38 <entropy_gather_internal.part.0+0x70>
   17b22:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   17b26:	9a01      	ldr	r2, [sp, #4]
   17b28:	4413      	add	r3, r2
   17b2a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   17b2e:	2f00      	cmp	r7, #0
   17b30:	d1ea      	bne.n	17b08 <entropy_gather_internal.part.0+0x40>
   17b32:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   17b36:	e7e7      	b.n	17b08 <entropy_gather_internal.part.0+0x40>
   17b38:	4604      	mov	r4, r0
   17b3a:	4620      	mov	r0, r4
   17b3c:	b027      	add	sp, #156	; 0x9c
   17b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017b40 <cc_mbedtls_entropy_init>:
   17b40:	b570      	push	{r4, r5, r6, lr}
   17b42:	2500      	movs	r5, #0
   17b44:	4604      	mov	r4, r0
   17b46:	4629      	mov	r1, r5
   17b48:	2214      	movs	r2, #20
   17b4a:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   17b4e:	30f8      	adds	r0, #248	; 0xf8
   17b50:	f003 f80b 	bl	1ab6a <memset>
   17b54:	4b15      	ldr	r3, [pc, #84]	; (17bac <cc_mbedtls_entropy_init+0x6c>)
   17b56:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   17b5a:	681b      	ldr	r3, [r3, #0]
   17b5c:	4630      	mov	r0, r6
   17b5e:	4798      	blx	r3
   17b60:	4620      	mov	r0, r4
   17b62:	f840 5b04 	str.w	r5, [r0], #4
   17b66:	f000 fe27 	bl	187b8 <cc_mbedtls_sha256_init>
   17b6a:	4b11      	ldr	r3, [pc, #68]	; (17bb0 <cc_mbedtls_entropy_init+0x70>)
   17b6c:	4630      	mov	r0, r6
   17b6e:	681b      	ldr	r3, [r3, #0]
   17b70:	4798      	blx	r3
   17b72:	b9c8      	cbnz	r0, 17ba8 <cc_mbedtls_entropy_init+0x68>
   17b74:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   17b78:	42ab      	cmp	r3, r5
   17b7a:	dc0f      	bgt.n	17b9c <cc_mbedtls_entropy_init+0x5c>
   17b7c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17b80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   17b84:	490b      	ldr	r1, [pc, #44]	; (17bb4 <cc_mbedtls_entropy_init+0x74>)
   17b86:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   17b8a:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   17b8e:	3301      	adds	r3, #1
   17b90:	2020      	movs	r0, #32
   17b92:	2101      	movs	r1, #1
   17b94:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   17b98:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   17b9c:	4b06      	ldr	r3, [pc, #24]	; (17bb8 <cc_mbedtls_entropy_init+0x78>)
   17b9e:	4630      	mov	r0, r6
   17ba0:	681b      	ldr	r3, [r3, #0]
   17ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17ba6:	4718      	bx	r3
   17ba8:	bd70      	pop	{r4, r5, r6, pc}
   17baa:	bf00      	nop
   17bac:	20000520 	.word	0x20000520
   17bb0:	20000524 	.word	0x20000524
   17bb4:	00018609 	.word	0x00018609
   17bb8:	20000528 	.word	0x20000528

00017bbc <cc_mbedtls_entropy_func>:
   17bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17bc0:	2a20      	cmp	r2, #32
   17bc2:	b088      	sub	sp, #32
   17bc4:	d876      	bhi.n	17cb4 <cc_mbedtls_entropy_func+0xf8>
   17bc6:	4b3d      	ldr	r3, [pc, #244]	; (17cbc <cc_mbedtls_entropy_func+0x100>)
   17bc8:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   17bcc:	681b      	ldr	r3, [r3, #0]
   17bce:	4604      	mov	r4, r0
   17bd0:	4648      	mov	r0, r9
   17bd2:	4617      	mov	r7, r2
   17bd4:	4688      	mov	r8, r1
   17bd6:	4798      	blx	r3
   17bd8:	4605      	mov	r5, r0
   17bda:	bba0      	cbnz	r0, 17c46 <cc_mbedtls_entropy_func+0x8a>
   17bdc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   17be0:	f240 1601 	movw	r6, #257	; 0x101
   17be4:	e001      	b.n	17bea <cc_mbedtls_entropy_func+0x2e>
   17be6:	3e01      	subs	r6, #1
   17be8:	d060      	beq.n	17cac <cc_mbedtls_entropy_func+0xf0>
   17bea:	4620      	mov	r0, r4
   17bec:	b37b      	cbz	r3, 17c4e <cc_mbedtls_entropy_func+0x92>
   17bee:	f7ff ff6b 	bl	17ac8 <entropy_gather_internal.part.0>
   17bf2:	4605      	mov	r5, r0
   17bf4:	bb68      	cbnz	r0, 17c52 <cc_mbedtls_entropy_func+0x96>
   17bf6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   17bfa:	2b00      	cmp	r3, #0
   17bfc:	ddf3      	ble.n	17be6 <cc_mbedtls_entropy_func+0x2a>
   17bfe:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   17c02:	4290      	cmp	r0, r2
   17c04:	d3ef      	bcc.n	17be6 <cc_mbedtls_entropy_func+0x2a>
   17c06:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   17c0a:	2a01      	cmp	r2, #1
   17c0c:	d1eb      	bne.n	17be6 <cc_mbedtls_entropy_func+0x2a>
   17c0e:	281f      	cmp	r0, #31
   17c10:	d9e9      	bls.n	17be6 <cc_mbedtls_entropy_func+0x2a>
   17c12:	466e      	mov	r6, sp
   17c14:	4629      	mov	r1, r5
   17c16:	2220      	movs	r2, #32
   17c18:	4630      	mov	r0, r6
   17c1a:	f104 0a04 	add.w	sl, r4, #4
   17c1e:	f002 ffa4 	bl	1ab6a <memset>
   17c22:	4631      	mov	r1, r6
   17c24:	4650      	mov	r0, sl
   17c26:	f000 fe1f 	bl	18868 <cc_mbedtls_sha256_finish>
   17c2a:	4605      	mov	r5, r0
   17c2c:	b198      	cbz	r0, 17c56 <cc_mbedtls_entropy_func+0x9a>
   17c2e:	4630      	mov	r0, r6
   17c30:	2120      	movs	r1, #32
   17c32:	f7ff fb63 	bl	172fc <mbedtls_platform_zeroize>
   17c36:	4b22      	ldr	r3, [pc, #136]	; (17cc0 <cc_mbedtls_entropy_func+0x104>)
   17c38:	4648      	mov	r0, r9
   17c3a:	681b      	ldr	r3, [r3, #0]
   17c3c:	4798      	blx	r3
   17c3e:	2800      	cmp	r0, #0
   17c40:	bf18      	it	ne
   17c42:	f06f 051d 	mvnne.w	r5, #29
   17c46:	4628      	mov	r0, r5
   17c48:	b008      	add	sp, #32
   17c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c4e:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   17c52:	466e      	mov	r6, sp
   17c54:	e7eb      	b.n	17c2e <cc_mbedtls_entropy_func+0x72>
   17c56:	4650      	mov	r0, sl
   17c58:	f000 fdc2 	bl	187e0 <cc_mbedtls_sha256_free>
   17c5c:	4650      	mov	r0, sl
   17c5e:	f000 fdab 	bl	187b8 <cc_mbedtls_sha256_init>
   17c62:	4629      	mov	r1, r5
   17c64:	4650      	mov	r0, sl
   17c66:	f000 fdc1 	bl	187ec <cc_mbedtls_sha256_starts>
   17c6a:	4605      	mov	r5, r0
   17c6c:	2800      	cmp	r0, #0
   17c6e:	d1de      	bne.n	17c2e <cc_mbedtls_entropy_func+0x72>
   17c70:	4650      	mov	r0, sl
   17c72:	2220      	movs	r2, #32
   17c74:	4631      	mov	r1, r6
   17c76:	f000 fdcd 	bl	18814 <cc_mbedtls_sha256_update>
   17c7a:	4605      	mov	r5, r0
   17c7c:	2800      	cmp	r0, #0
   17c7e:	d1d6      	bne.n	17c2e <cc_mbedtls_entropy_func+0x72>
   17c80:	4603      	mov	r3, r0
   17c82:	4632      	mov	r2, r6
   17c84:	2120      	movs	r1, #32
   17c86:	4630      	mov	r0, r6
   17c88:	f000 fec4 	bl	18a14 <cc_mbedtls_sha256>
   17c8c:	4605      	mov	r5, r0
   17c8e:	2800      	cmp	r0, #0
   17c90:	d1cd      	bne.n	17c2e <cc_mbedtls_entropy_func+0x72>
   17c92:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   17c96:	2b00      	cmp	r3, #0
   17c98:	bfc4      	itt	gt
   17c9a:	2300      	movgt	r3, #0
   17c9c:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   17ca0:	463a      	mov	r2, r7
   17ca2:	4640      	mov	r0, r8
   17ca4:	4631      	mov	r1, r6
   17ca6:	f002 ff3c 	bl	1ab22 <memcpy>
   17caa:	e7c0      	b.n	17c2e <cc_mbedtls_entropy_func+0x72>
   17cac:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   17cb0:	466e      	mov	r6, sp
   17cb2:	e7bc      	b.n	17c2e <cc_mbedtls_entropy_func+0x72>
   17cb4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   17cb8:	e7c5      	b.n	17c46 <cc_mbedtls_entropy_func+0x8a>
   17cba:	bf00      	nop
   17cbc:	20000524 	.word	0x20000524
   17cc0:	20000528 	.word	0x20000528

00017cc4 <RndStartupTest.constprop.0>:
   17cc4:	b530      	push	{r4, r5, lr}
   17cc6:	b0c3      	sub	sp, #268	; 0x10c
   17cc8:	22dc      	movs	r2, #220	; 0xdc
   17cca:	2100      	movs	r1, #0
   17ccc:	a80b      	add	r0, sp, #44	; 0x2c
   17cce:	f002 ff4c 	bl	1ab6a <memset>
   17cd2:	2228      	movs	r2, #40	; 0x28
   17cd4:	2100      	movs	r1, #0
   17cd6:	a801      	add	r0, sp, #4
   17cd8:	f002 ff47 	bl	1ab6a <memset>
   17cdc:	a801      	add	r0, sp, #4
   17cde:	f000 fec1 	bl	18a64 <RNG_PLAT_SetUserRngParameters>
   17ce2:	4604      	mov	r4, r0
   17ce4:	b110      	cbz	r0, 17cec <RndStartupTest.constprop.0+0x28>
   17ce6:	4620      	mov	r0, r4
   17ce8:	b043      	add	sp, #268	; 0x10c
   17cea:	bd30      	pop	{r4, r5, pc}
   17cec:	4d18      	ldr	r5, [pc, #96]	; (17d50 <RndStartupTest.constprop.0+0x8c>)
   17cee:	f04f 31ff 	mov.w	r1, #4294967295
   17cf2:	6828      	ldr	r0, [r5, #0]
   17cf4:	f000 f93c 	bl	17f70 <CC_PalMutexLock>
   17cf8:	4604      	mov	r4, r0
   17cfa:	b9c0      	cbnz	r0, 17d2e <RndStartupTest.constprop.0+0x6a>
   17cfc:	2000      	movs	r0, #0
   17cfe:	f000 f967 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   17d02:	bb00      	cbnz	r0, 17d46 <RndStartupTest.constprop.0+0x82>
   17d04:	4a13      	ldr	r2, [pc, #76]	; (17d54 <RndStartupTest.constprop.0+0x90>)
   17d06:	a901      	add	r1, sp, #4
   17d08:	a80b      	add	r0, sp, #44	; 0x2c
   17d0a:	f000 fc6f 	bl	185ec <LLF_RND_RunTrngStartupTest>
   17d0e:	4604      	mov	r4, r0
   17d10:	2001      	movs	r0, #1
   17d12:	f000 f95d 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   17d16:	b990      	cbnz	r0, 17d3e <RndStartupTest.constprop.0+0x7a>
   17d18:	6828      	ldr	r0, [r5, #0]
   17d1a:	f000 f931 	bl	17f80 <CC_PalMutexUnlock>
   17d1e:	2800      	cmp	r0, #0
   17d20:	d0e1      	beq.n	17ce6 <RndStartupTest.constprop.0+0x22>
   17d22:	480d      	ldr	r0, [pc, #52]	; (17d58 <RndStartupTest.constprop.0+0x94>)
   17d24:	f7ff f9d8 	bl	170d8 <CC_PalAbort>
   17d28:	4620      	mov	r0, r4
   17d2a:	b043      	add	sp, #268	; 0x10c
   17d2c:	bd30      	pop	{r4, r5, pc}
   17d2e:	480b      	ldr	r0, [pc, #44]	; (17d5c <RndStartupTest.constprop.0+0x98>)
   17d30:	f7ff f9d2 	bl	170d8 <CC_PalAbort>
   17d34:	2c01      	cmp	r4, #1
   17d36:	bf08      	it	eq
   17d38:	2405      	moveq	r4, #5
   17d3a:	d0ed      	beq.n	17d18 <RndStartupTest.constprop.0+0x54>
   17d3c:	e7de      	b.n	17cfc <RndStartupTest.constprop.0+0x38>
   17d3e:	4808      	ldr	r0, [pc, #32]	; (17d60 <RndStartupTest.constprop.0+0x9c>)
   17d40:	f7ff f9ca 	bl	170d8 <CC_PalAbort>
   17d44:	e7e8      	b.n	17d18 <RndStartupTest.constprop.0+0x54>
   17d46:	4807      	ldr	r0, [pc, #28]	; (17d64 <RndStartupTest.constprop.0+0xa0>)
   17d48:	f7ff f9c6 	bl	170d8 <CC_PalAbort>
   17d4c:	e7da      	b.n	17d04 <RndStartupTest.constprop.0+0x40>
   17d4e:	bf00      	nop
   17d50:	2000051c 	.word	0x2000051c
   17d54:	20002754 	.word	0x20002754
   17d58:	0001e16c 	.word	0x0001e16c
   17d5c:	0001e114 	.word	0x0001e114
   17d60:	0001e14c 	.word	0x0001e14c
   17d64:	0001e12c 	.word	0x0001e12c

00017d68 <CC_LibInit>:
   17d68:	b510      	push	{r4, lr}
   17d6a:	b082      	sub	sp, #8
   17d6c:	f000 f854 	bl	17e18 <CC_HalInit>
   17d70:	b128      	cbz	r0, 17d7e <CC_LibInit+0x16>
   17d72:	f000 f8a3 	bl	17ebc <CC_PalTerminate>
   17d76:	2403      	movs	r4, #3
   17d78:	4620      	mov	r0, r4
   17d7a:	b002      	add	sp, #8
   17d7c:	bd10      	pop	{r4, pc}
   17d7e:	f000 f86f 	bl	17e60 <CC_PalInit>
   17d82:	b9d0      	cbnz	r0, 17dba <CC_LibInit+0x52>
   17d84:	f000 f924 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   17d88:	b9d8      	cbnz	r0, 17dc2 <CC_LibInit+0x5a>
   17d8a:	4b1e      	ldr	r3, [pc, #120]	; (17e04 <CC_LibInit+0x9c>)
   17d8c:	681b      	ldr	r3, [r3, #0]
   17d8e:	0e1b      	lsrs	r3, r3, #24
   17d90:	2bf0      	cmp	r3, #240	; 0xf0
   17d92:	d10a      	bne.n	17daa <CC_LibInit+0x42>
   17d94:	4a1c      	ldr	r2, [pc, #112]	; (17e08 <CC_LibInit+0xa0>)
   17d96:	4b1d      	ldr	r3, [pc, #116]	; (17e0c <CC_LibInit+0xa4>)
   17d98:	6812      	ldr	r2, [r2, #0]
   17d9a:	429a      	cmp	r2, r3
   17d9c:	d029      	beq.n	17df2 <CC_LibInit+0x8a>
   17d9e:	f000 f83d 	bl	17e1c <CC_HalTerminate>
   17da2:	2407      	movs	r4, #7
   17da4:	f000 f88a 	bl	17ebc <CC_PalTerminate>
   17da8:	e7e6      	b.n	17d78 <CC_LibInit+0x10>
   17daa:	f000 f837 	bl	17e1c <CC_HalTerminate>
   17dae:	f000 f885 	bl	17ebc <CC_PalTerminate>
   17db2:	2406      	movs	r4, #6
   17db4:	4620      	mov	r0, r4
   17db6:	b002      	add	sp, #8
   17db8:	bd10      	pop	{r4, pc}
   17dba:	2404      	movs	r4, #4
   17dbc:	4620      	mov	r0, r4
   17dbe:	b002      	add	sp, #8
   17dc0:	bd10      	pop	{r4, pc}
   17dc2:	f000 f82b 	bl	17e1c <CC_HalTerminate>
   17dc6:	f000 f879 	bl	17ebc <CC_PalTerminate>
   17dca:	f7ff ff7b 	bl	17cc4 <RndStartupTest.constprop.0>
   17dce:	4604      	mov	r4, r0
   17dd0:	b958      	cbnz	r0, 17dea <CC_LibInit+0x82>
   17dd2:	4602      	mov	r2, r0
   17dd4:	4601      	mov	r1, r0
   17dd6:	f7ff f9a7 	bl	17128 <nrf_cc3xx_platform_ctr_drbg_init>
   17dda:	b930      	cbnz	r0, 17dea <CC_LibInit+0x82>
   17ddc:	490c      	ldr	r1, [pc, #48]	; (17e10 <CC_LibInit+0xa8>)
   17dde:	ab01      	add	r3, sp, #4
   17de0:	2268      	movs	r2, #104	; 0x68
   17de2:	f7ff f9d5 	bl	17190 <nrf_cc3xx_platform_ctr_drbg_get>
   17de6:	2800      	cmp	r0, #0
   17de8:	d0c6      	beq.n	17d78 <CC_LibInit+0x10>
   17dea:	2405      	movs	r4, #5
   17dec:	4620      	mov	r0, r4
   17dee:	b002      	add	sp, #8
   17df0:	bd10      	pop	{r4, pc}
   17df2:	2001      	movs	r0, #1
   17df4:	f000 f8ec 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   17df8:	2800      	cmp	r0, #0
   17dfa:	d1e2      	bne.n	17dc2 <CC_LibInit+0x5a>
   17dfc:	4b05      	ldr	r3, [pc, #20]	; (17e14 <CC_LibInit+0xac>)
   17dfe:	6018      	str	r0, [r3, #0]
   17e00:	e7e3      	b.n	17dca <CC_LibInit+0x62>
   17e02:	bf00      	nop
   17e04:	5002b928 	.word	0x5002b928
   17e08:	5002ba24 	.word	0x5002ba24
   17e0c:	20e00000 	.word	0x20e00000
   17e10:	200026ec 	.word	0x200026ec
   17e14:	5002ba0c 	.word	0x5002ba0c

00017e18 <CC_HalInit>:
   17e18:	2000      	movs	r0, #0
   17e1a:	4770      	bx	lr

00017e1c <CC_HalTerminate>:
   17e1c:	2000      	movs	r0, #0
   17e1e:	4770      	bx	lr

00017e20 <CC_HalClearInterruptBit>:
   17e20:	0543      	lsls	r3, r0, #21
   17e22:	d503      	bpl.n	17e2c <CC_HalClearInterruptBit+0xc>
   17e24:	4b03      	ldr	r3, [pc, #12]	; (17e34 <CC_HalClearInterruptBit+0x14>)
   17e26:	f04f 32ff 	mov.w	r2, #4294967295
   17e2a:	601a      	str	r2, [r3, #0]
   17e2c:	4b02      	ldr	r3, [pc, #8]	; (17e38 <CC_HalClearInterruptBit+0x18>)
   17e2e:	6018      	str	r0, [r3, #0]
   17e30:	4770      	bx	lr
   17e32:	bf00      	nop
   17e34:	5002b108 	.word	0x5002b108
   17e38:	5002ba08 	.word	0x5002ba08

00017e3c <CC_HalMaskInterrupt>:
   17e3c:	4b01      	ldr	r3, [pc, #4]	; (17e44 <CC_HalMaskInterrupt+0x8>)
   17e3e:	6018      	str	r0, [r3, #0]
   17e40:	4770      	bx	lr
   17e42:	bf00      	nop
   17e44:	5002ba04 	.word	0x5002ba04

00017e48 <CC_HalWaitInterrupt>:
   17e48:	b108      	cbz	r0, 17e4e <CC_HalWaitInterrupt+0x6>
   17e4a:	f000 b86f 	b.w	17f2c <CC_PalWaitInterrupt>
   17e4e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   17e52:	4770      	bx	lr

00017e54 <CC_HalWaitInterruptRND>:
   17e54:	b108      	cbz	r0, 17e5a <CC_HalWaitInterruptRND+0x6>
   17e56:	f000 b84f 	b.w	17ef8 <CC_PalWaitInterruptRND>
   17e5a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   17e5e:	4770      	bx	lr

00017e60 <CC_PalInit>:
   17e60:	b510      	push	{r4, lr}
   17e62:	4811      	ldr	r0, [pc, #68]	; (17ea8 <CC_PalInit+0x48>)
   17e64:	f000 f870 	bl	17f48 <CC_PalMutexCreate>
   17e68:	b100      	cbz	r0, 17e6c <CC_PalInit+0xc>
   17e6a:	bd10      	pop	{r4, pc}
   17e6c:	480f      	ldr	r0, [pc, #60]	; (17eac <CC_PalInit+0x4c>)
   17e6e:	f000 f86b 	bl	17f48 <CC_PalMutexCreate>
   17e72:	2800      	cmp	r0, #0
   17e74:	d1f9      	bne.n	17e6a <CC_PalInit+0xa>
   17e76:	4c0e      	ldr	r4, [pc, #56]	; (17eb0 <CC_PalInit+0x50>)
   17e78:	4620      	mov	r0, r4
   17e7a:	f000 f865 	bl	17f48 <CC_PalMutexCreate>
   17e7e:	2800      	cmp	r0, #0
   17e80:	d1f3      	bne.n	17e6a <CC_PalInit+0xa>
   17e82:	4b0c      	ldr	r3, [pc, #48]	; (17eb4 <CC_PalInit+0x54>)
   17e84:	480c      	ldr	r0, [pc, #48]	; (17eb8 <CC_PalInit+0x58>)
   17e86:	601c      	str	r4, [r3, #0]
   17e88:	f000 f85e 	bl	17f48 <CC_PalMutexCreate>
   17e8c:	4601      	mov	r1, r0
   17e8e:	2800      	cmp	r0, #0
   17e90:	d1eb      	bne.n	17e6a <CC_PalInit+0xa>
   17e92:	f000 f82d 	bl	17ef0 <CC_PalDmaInit>
   17e96:	4604      	mov	r4, r0
   17e98:	b108      	cbz	r0, 17e9e <CC_PalInit+0x3e>
   17e9a:	4620      	mov	r0, r4
   17e9c:	bd10      	pop	{r4, pc}
   17e9e:	f000 f879 	bl	17f94 <CC_PalPowerSaveModeInit>
   17ea2:	4620      	mov	r0, r4
   17ea4:	e7fa      	b.n	17e9c <CC_PalInit+0x3c>
   17ea6:	bf00      	nop
   17ea8:	20000518 	.word	0x20000518
   17eac:	2000050c 	.word	0x2000050c
   17eb0:	20000514 	.word	0x20000514
   17eb4:	2000051c 	.word	0x2000051c
   17eb8:	20000510 	.word	0x20000510

00017ebc <CC_PalTerminate>:
   17ebc:	b508      	push	{r3, lr}
   17ebe:	4808      	ldr	r0, [pc, #32]	; (17ee0 <CC_PalTerminate+0x24>)
   17ec0:	f000 f84c 	bl	17f5c <CC_PalMutexDestroy>
   17ec4:	4807      	ldr	r0, [pc, #28]	; (17ee4 <CC_PalTerminate+0x28>)
   17ec6:	f000 f849 	bl	17f5c <CC_PalMutexDestroy>
   17eca:	4807      	ldr	r0, [pc, #28]	; (17ee8 <CC_PalTerminate+0x2c>)
   17ecc:	f000 f846 	bl	17f5c <CC_PalMutexDestroy>
   17ed0:	4806      	ldr	r0, [pc, #24]	; (17eec <CC_PalTerminate+0x30>)
   17ed2:	f000 f843 	bl	17f5c <CC_PalMutexDestroy>
   17ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17eda:	f000 b80b 	b.w	17ef4 <CC_PalDmaTerminate>
   17ede:	bf00      	nop
   17ee0:	20000518 	.word	0x20000518
   17ee4:	2000050c 	.word	0x2000050c
   17ee8:	20000514 	.word	0x20000514
   17eec:	20000510 	.word	0x20000510

00017ef0 <CC_PalDmaInit>:
   17ef0:	2000      	movs	r0, #0
   17ef2:	4770      	bx	lr

00017ef4 <CC_PalDmaTerminate>:
   17ef4:	4770      	bx	lr
   17ef6:	bf00      	nop

00017ef8 <CC_PalWaitInterruptRND>:
   17ef8:	b410      	push	{r4}
   17efa:	4c08      	ldr	r4, [pc, #32]	; (17f1c <CC_PalWaitInterruptRND+0x24>)
   17efc:	4602      	mov	r2, r0
   17efe:	6823      	ldr	r3, [r4, #0]
   17f00:	4213      	tst	r3, r2
   17f02:	d0fc      	beq.n	17efe <CC_PalWaitInterruptRND+0x6>
   17f04:	b121      	cbz	r1, 17f10 <CC_PalWaitInterruptRND+0x18>
   17f06:	4b06      	ldr	r3, [pc, #24]	; (17f20 <CC_PalWaitInterruptRND+0x28>)
   17f08:	4806      	ldr	r0, [pc, #24]	; (17f24 <CC_PalWaitInterruptRND+0x2c>)
   17f0a:	681b      	ldr	r3, [r3, #0]
   17f0c:	600b      	str	r3, [r1, #0]
   17f0e:	6003      	str	r3, [r0, #0]
   17f10:	4b05      	ldr	r3, [pc, #20]	; (17f28 <CC_PalWaitInterruptRND+0x30>)
   17f12:	601a      	str	r2, [r3, #0]
   17f14:	2000      	movs	r0, #0
   17f16:	bc10      	pop	{r4}
   17f18:	4770      	bx	lr
   17f1a:	bf00      	nop
   17f1c:	5002ba00 	.word	0x5002ba00
   17f20:	5002b104 	.word	0x5002b104
   17f24:	5002b108 	.word	0x5002b108
   17f28:	5002ba08 	.word	0x5002ba08

00017f2c <CC_PalWaitInterrupt>:
   17f2c:	4904      	ldr	r1, [pc, #16]	; (17f40 <CC_PalWaitInterrupt+0x14>)
   17f2e:	4602      	mov	r2, r0
   17f30:	680b      	ldr	r3, [r1, #0]
   17f32:	421a      	tst	r2, r3
   17f34:	d0fc      	beq.n	17f30 <CC_PalWaitInterrupt+0x4>
   17f36:	4b03      	ldr	r3, [pc, #12]	; (17f44 <CC_PalWaitInterrupt+0x18>)
   17f38:	2000      	movs	r0, #0
   17f3a:	601a      	str	r2, [r3, #0]
   17f3c:	4770      	bx	lr
   17f3e:	bf00      	nop
   17f40:	5002ba00 	.word	0x5002ba00
   17f44:	5002ba08 	.word	0x5002ba08

00017f48 <CC_PalMutexCreate>:
   17f48:	b508      	push	{r3, lr}
   17f4a:	4b03      	ldr	r3, [pc, #12]	; (17f58 <CC_PalMutexCreate+0x10>)
   17f4c:	6802      	ldr	r2, [r0, #0]
   17f4e:	681b      	ldr	r3, [r3, #0]
   17f50:	6810      	ldr	r0, [r2, #0]
   17f52:	4798      	blx	r3
   17f54:	2000      	movs	r0, #0
   17f56:	bd08      	pop	{r3, pc}
   17f58:	200004cc 	.word	0x200004cc

00017f5c <CC_PalMutexDestroy>:
   17f5c:	b508      	push	{r3, lr}
   17f5e:	4b03      	ldr	r3, [pc, #12]	; (17f6c <CC_PalMutexDestroy+0x10>)
   17f60:	6802      	ldr	r2, [r0, #0]
   17f62:	685b      	ldr	r3, [r3, #4]
   17f64:	6810      	ldr	r0, [r2, #0]
   17f66:	4798      	blx	r3
   17f68:	2000      	movs	r0, #0
   17f6a:	bd08      	pop	{r3, pc}
   17f6c:	200004cc 	.word	0x200004cc

00017f70 <CC_PalMutexLock>:
   17f70:	4b02      	ldr	r3, [pc, #8]	; (17f7c <CC_PalMutexLock+0xc>)
   17f72:	6802      	ldr	r2, [r0, #0]
   17f74:	689b      	ldr	r3, [r3, #8]
   17f76:	6810      	ldr	r0, [r2, #0]
   17f78:	4718      	bx	r3
   17f7a:	bf00      	nop
   17f7c:	200004cc 	.word	0x200004cc

00017f80 <CC_PalMutexUnlock>:
   17f80:	b508      	push	{r3, lr}
   17f82:	4b03      	ldr	r3, [pc, #12]	; (17f90 <CC_PalMutexUnlock+0x10>)
   17f84:	6802      	ldr	r2, [r0, #0]
   17f86:	68db      	ldr	r3, [r3, #12]
   17f88:	6810      	ldr	r0, [r2, #0]
   17f8a:	4798      	blx	r3
   17f8c:	2000      	movs	r0, #0
   17f8e:	bd08      	pop	{r3, pc}
   17f90:	200004cc 	.word	0x200004cc

00017f94 <CC_PalPowerSaveModeInit>:
   17f94:	b570      	push	{r4, r5, r6, lr}
   17f96:	4c09      	ldr	r4, [pc, #36]	; (17fbc <CC_PalPowerSaveModeInit+0x28>)
   17f98:	4d09      	ldr	r5, [pc, #36]	; (17fc0 <CC_PalPowerSaveModeInit+0x2c>)
   17f9a:	6920      	ldr	r0, [r4, #16]
   17f9c:	68ab      	ldr	r3, [r5, #8]
   17f9e:	4798      	blx	r3
   17fa0:	b118      	cbz	r0, 17faa <CC_PalPowerSaveModeInit+0x16>
   17fa2:	4b08      	ldr	r3, [pc, #32]	; (17fc4 <CC_PalPowerSaveModeInit+0x30>)
   17fa4:	4808      	ldr	r0, [pc, #32]	; (17fc8 <CC_PalPowerSaveModeInit+0x34>)
   17fa6:	685b      	ldr	r3, [r3, #4]
   17fa8:	4798      	blx	r3
   17faa:	4a08      	ldr	r2, [pc, #32]	; (17fcc <CC_PalPowerSaveModeInit+0x38>)
   17fac:	68eb      	ldr	r3, [r5, #12]
   17fae:	6920      	ldr	r0, [r4, #16]
   17fb0:	2100      	movs	r1, #0
   17fb2:	6011      	str	r1, [r2, #0]
   17fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17fb8:	4718      	bx	r3
   17fba:	bf00      	nop
   17fbc:	200004dc 	.word	0x200004dc
   17fc0:	200004cc 	.word	0x200004cc
   17fc4:	200004bc 	.word	0x200004bc
   17fc8:	0001e184 	.word	0x0001e184
   17fcc:	20002974 	.word	0x20002974

00017fd0 <CC_PalPowerSaveModeSelect>:
   17fd0:	b570      	push	{r4, r5, r6, lr}
   17fd2:	4d1a      	ldr	r5, [pc, #104]	; (1803c <CC_PalPowerSaveModeSelect+0x6c>)
   17fd4:	4e1a      	ldr	r6, [pc, #104]	; (18040 <CC_PalPowerSaveModeSelect+0x70>)
   17fd6:	4604      	mov	r4, r0
   17fd8:	68b2      	ldr	r2, [r6, #8]
   17fda:	6928      	ldr	r0, [r5, #16]
   17fdc:	4790      	blx	r2
   17fde:	b9f0      	cbnz	r0, 1801e <CC_PalPowerSaveModeSelect+0x4e>
   17fe0:	b15c      	cbz	r4, 17ffa <CC_PalPowerSaveModeSelect+0x2a>
   17fe2:	4c18      	ldr	r4, [pc, #96]	; (18044 <CC_PalPowerSaveModeSelect+0x74>)
   17fe4:	6823      	ldr	r3, [r4, #0]
   17fe6:	b1ab      	cbz	r3, 18014 <CC_PalPowerSaveModeSelect+0x44>
   17fe8:	2b01      	cmp	r3, #1
   17fea:	d01a      	beq.n	18022 <CC_PalPowerSaveModeSelect+0x52>
   17fec:	3b01      	subs	r3, #1
   17fee:	6023      	str	r3, [r4, #0]
   17ff0:	6928      	ldr	r0, [r5, #16]
   17ff2:	68f3      	ldr	r3, [r6, #12]
   17ff4:	4798      	blx	r3
   17ff6:	2000      	movs	r0, #0
   17ff8:	bd70      	pop	{r4, r5, r6, pc}
   17ffa:	4c12      	ldr	r4, [pc, #72]	; (18044 <CC_PalPowerSaveModeSelect+0x74>)
   17ffc:	6821      	ldr	r1, [r4, #0]
   17ffe:	b939      	cbnz	r1, 18010 <CC_PalPowerSaveModeSelect+0x40>
   18000:	4b11      	ldr	r3, [pc, #68]	; (18048 <CC_PalPowerSaveModeSelect+0x78>)
   18002:	4a12      	ldr	r2, [pc, #72]	; (1804c <CC_PalPowerSaveModeSelect+0x7c>)
   18004:	2001      	movs	r0, #1
   18006:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1800a:	6813      	ldr	r3, [r2, #0]
   1800c:	2b00      	cmp	r3, #0
   1800e:	d1fc      	bne.n	1800a <CC_PalPowerSaveModeSelect+0x3a>
   18010:	3101      	adds	r1, #1
   18012:	6021      	str	r1, [r4, #0]
   18014:	68f3      	ldr	r3, [r6, #12]
   18016:	6928      	ldr	r0, [r5, #16]
   18018:	4798      	blx	r3
   1801a:	2000      	movs	r0, #0
   1801c:	bd70      	pop	{r4, r5, r6, pc}
   1801e:	480c      	ldr	r0, [pc, #48]	; (18050 <CC_PalPowerSaveModeSelect+0x80>)
   18020:	bd70      	pop	{r4, r5, r6, pc}
   18022:	4a0a      	ldr	r2, [pc, #40]	; (1804c <CC_PalPowerSaveModeSelect+0x7c>)
   18024:	6813      	ldr	r3, [r2, #0]
   18026:	2b00      	cmp	r3, #0
   18028:	d1fc      	bne.n	18024 <CC_PalPowerSaveModeSelect+0x54>
   1802a:	4a07      	ldr	r2, [pc, #28]	; (18048 <CC_PalPowerSaveModeSelect+0x78>)
   1802c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   18030:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   18034:	f7ff ff02 	bl	17e3c <CC_HalMaskInterrupt>
   18038:	6823      	ldr	r3, [r4, #0]
   1803a:	e7d7      	b.n	17fec <CC_PalPowerSaveModeSelect+0x1c>
   1803c:	200004dc 	.word	0x200004dc
   18040:	200004cc 	.word	0x200004cc
   18044:	20002974 	.word	0x20002974
   18048:	5002a000 	.word	0x5002a000
   1804c:	5002b910 	.word	0x5002b910
   18050:	ffff8fe9 	.word	0xffff8fe9

00018054 <mutex_init>:
   18054:	4b01      	ldr	r3, [pc, #4]	; (1805c <mutex_init+0x8>)
   18056:	681b      	ldr	r3, [r3, #0]
   18058:	4718      	bx	r3
   1805a:	bf00      	nop
   1805c:	200004cc 	.word	0x200004cc

00018060 <mutex_lock>:
   18060:	4b01      	ldr	r3, [pc, #4]	; (18068 <mutex_lock+0x8>)
   18062:	689b      	ldr	r3, [r3, #8]
   18064:	4718      	bx	r3
   18066:	bf00      	nop
   18068:	200004cc 	.word	0x200004cc

0001806c <mutex_unlock>:
   1806c:	4b01      	ldr	r3, [pc, #4]	; (18074 <mutex_unlock+0x8>)
   1806e:	68db      	ldr	r3, [r3, #12]
   18070:	4718      	bx	r3
   18072:	bf00      	nop
   18074:	200004cc 	.word	0x200004cc

00018078 <startTrngHW>:
   18078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1807c:	2800      	cmp	r0, #0
   1807e:	d07b      	beq.n	18178 <startTrngHW+0x100>
   18080:	460c      	mov	r4, r1
   18082:	2900      	cmp	r1, #0
   18084:	d078      	beq.n	18178 <startTrngHW+0x100>
   18086:	461d      	mov	r5, r3
   18088:	2b00      	cmp	r3, #0
   1808a:	d075      	beq.n	18178 <startTrngHW+0x100>
   1808c:	4606      	mov	r6, r0
   1808e:	b122      	cbz	r2, 1809a <startTrngHW+0x22>
   18090:	2201      	movs	r2, #1
   18092:	2300      	movs	r3, #0
   18094:	602a      	str	r2, [r5, #0]
   18096:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   1809a:	682b      	ldr	r3, [r5, #0]
   1809c:	2b00      	cmp	r3, #0
   1809e:	d067      	beq.n	18170 <startTrngHW+0xf8>
   180a0:	4629      	mov	r1, r5
   180a2:	4620      	mov	r0, r4
   180a4:	f000 fda4 	bl	18bf0 <LLF_RND_GetFastestRosc>
   180a8:	4607      	mov	r7, r0
   180aa:	2800      	cmp	r0, #0
   180ac:	d161      	bne.n	18172 <startTrngHW+0xfa>
   180ae:	6828      	ldr	r0, [r5, #0]
   180b0:	4621      	mov	r1, r4
   180b2:	f000 fd7f 	bl	18bb4 <LLF_RND_GetRoscSampleCnt>
   180b6:	4607      	mov	r7, r0
   180b8:	2800      	cmp	r0, #0
   180ba:	d15a      	bne.n	18172 <startTrngHW+0xfa>
   180bc:	682b      	ldr	r3, [r5, #0]
   180be:	2b08      	cmp	r3, #8
   180c0:	d069      	beq.n	18196 <startTrngHW+0x11e>
   180c2:	2b04      	cmp	r3, #4
   180c4:	d06a      	beq.n	1819c <startTrngHW+0x124>
   180c6:	f1a3 0802 	sub.w	r8, r3, #2
   180ca:	fab8 f888 	clz	r8, r8
   180ce:	ea4f 1858 	mov.w	r8, r8, lsr #5
   180d2:	4b34      	ldr	r3, [pc, #208]	; (181a4 <startTrngHW+0x12c>)
   180d4:	4934      	ldr	r1, [pc, #208]	; (181a8 <startTrngHW+0x130>)
   180d6:	4a35      	ldr	r2, [pc, #212]	; (181ac <startTrngHW+0x134>)
   180d8:	2001      	movs	r0, #1
   180da:	6018      	str	r0, [r3, #0]
   180dc:	469c      	mov	ip, r3
   180de:	6008      	str	r0, [r1, #0]
   180e0:	f8cc 0000 	str.w	r0, [ip]
   180e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   180e6:	6013      	str	r3, [r2, #0]
   180e8:	6811      	ldr	r1, [r2, #0]
   180ea:	428b      	cmp	r3, r1
   180ec:	d1f8      	bne.n	180e0 <startTrngHW+0x68>
   180ee:	4b30      	ldr	r3, [pc, #192]	; (181b0 <startTrngHW+0x138>)
   180f0:	f04f 0900 	mov.w	r9, #0
   180f4:	f8c3 9000 	str.w	r9, [r3]
   180f8:	f04f 30ff 	mov.w	r0, #4294967295
   180fc:	f7ff fe90 	bl	17e20 <CC_HalClearInterruptBit>
   18100:	4b2c      	ldr	r3, [pc, #176]	; (181b4 <startTrngHW+0x13c>)
   18102:	f06f 021b 	mvn.w	r2, #27
   18106:	601a      	str	r2, [r3, #0]
   18108:	4648      	mov	r0, r9
   1810a:	f7ff fe97 	bl	17e3c <CC_HalMaskInterrupt>
   1810e:	4a2a      	ldr	r2, [pc, #168]	; (181b8 <startTrngHW+0x140>)
   18110:	4b2a      	ldr	r3, [pc, #168]	; (181bc <startTrngHW+0x144>)
   18112:	f8c2 8000 	str.w	r8, [r2]
   18116:	6818      	ldr	r0, [r3, #0]
   18118:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1811c:	f7ff fe8e 	bl	17e3c <CC_HalMaskInterrupt>
   18120:	4b27      	ldr	r3, [pc, #156]	; (181c0 <startTrngHW+0x148>)
   18122:	220a      	movs	r2, #10
   18124:	601a      	str	r2, [r3, #0]
   18126:	9908      	ldr	r1, [sp, #32]
   18128:	6923      	ldr	r3, [r4, #16]
   1812a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1812c:	2901      	cmp	r1, #1
   1812e:	d027      	beq.n	18180 <startTrngHW+0x108>
   18130:	4924      	ldr	r1, [pc, #144]	; (181c4 <startTrngHW+0x14c>)
   18132:	fba1 1303 	umull	r1, r3, r1, r3
   18136:	091b      	lsrs	r3, r3, #4
   18138:	fb03 f302 	mul.w	r3, r3, r2
   1813c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18140:	4921      	ldr	r1, [pc, #132]	; (181c8 <startTrngHW+0x150>)
   18142:	4a1b      	ldr	r2, [pc, #108]	; (181b0 <startTrngHW+0x138>)
   18144:	03db      	lsls	r3, r3, #15
   18146:	099b      	lsrs	r3, r3, #6
   18148:	600b      	str	r3, [r1, #0]
   1814a:	2301      	movs	r3, #1
   1814c:	6013      	str	r3, [r2, #0]
   1814e:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   18152:	682a      	ldr	r2, [r5, #0]
   18154:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   18158:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1815c:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   18160:	682a      	ldr	r2, [r5, #0]
   18162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18166:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1816a:	4638      	mov	r0, r7
   1816c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18170:	4f16      	ldr	r7, [pc, #88]	; (181cc <startTrngHW+0x154>)
   18172:	4638      	mov	r0, r7
   18174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18178:	4f15      	ldr	r7, [pc, #84]	; (181d0 <startTrngHW+0x158>)
   1817a:	4638      	mov	r0, r7
   1817c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18180:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18184:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   18188:	3101      	adds	r1, #1
   1818a:	d002      	beq.n	18192 <startTrngHW+0x11a>
   1818c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   18190:	e7ce      	b.n	18130 <startTrngHW+0xb8>
   18192:	2316      	movs	r3, #22
   18194:	e7d0      	b.n	18138 <startTrngHW+0xc0>
   18196:	f04f 0803 	mov.w	r8, #3
   1819a:	e79a      	b.n	180d2 <startTrngHW+0x5a>
   1819c:	f04f 0802 	mov.w	r8, #2
   181a0:	e797      	b.n	180d2 <startTrngHW+0x5a>
   181a2:	bf00      	nop
   181a4:	5002b1c4 	.word	0x5002b1c4
   181a8:	5002b140 	.word	0x5002b140
   181ac:	5002b130 	.word	0x5002b130
   181b0:	5002b12c 	.word	0x5002b12c
   181b4:	5002b100 	.word	0x5002b100
   181b8:	5002b10c 	.word	0x5002b10c
   181bc:	5002ba04 	.word	0x5002ba04
   181c0:	5002b138 	.word	0x5002b138
   181c4:	aaaaaaab 	.word	0xaaaaaaab
   181c8:	5002b1d8 	.word	0x5002b1d8
   181cc:	00f10c31 	.word	0x00f10c31
   181d0:	00f10c35 	.word	0x00f10c35

000181d4 <LLF_RND_RepetitionCounterTest.part.0>:
   181d4:	b4f0      	push	{r4, r5, r6, r7}
   181d6:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   181da:	2400      	movs	r4, #0
   181dc:	f10c 3cff 	add.w	ip, ip, #4294967295
   181e0:	4626      	mov	r6, r4
   181e2:	4627      	mov	r7, r4
   181e4:	e006      	b.n	181f4 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   181e6:	429f      	cmp	r7, r3
   181e8:	d016      	beq.n	18218 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   181ea:	2601      	movs	r6, #1
   181ec:	4565      	cmp	r5, ip
   181ee:	d819      	bhi.n	18224 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   181f0:	462c      	mov	r4, r5
   181f2:	461f      	mov	r7, r3
   181f4:	0963      	lsrs	r3, r4, #5
   181f6:	f004 011f 	and.w	r1, r4, #31
   181fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   181fe:	291f      	cmp	r1, #31
   18200:	fa23 f301 	lsr.w	r3, r3, r1
   18204:	f104 0501 	add.w	r5, r4, #1
   18208:	bf18      	it	ne
   1820a:	f003 0301 	andne.w	r3, r3, #1
   1820e:	2c00      	cmp	r4, #0
   18210:	d1e9      	bne.n	181e6 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   18212:	2601      	movs	r6, #1
   18214:	4635      	mov	r5, r6
   18216:	e7eb      	b.n	181f0 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   18218:	3601      	adds	r6, #1
   1821a:	4296      	cmp	r6, r2
   1821c:	d1e6      	bne.n	181ec <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1821e:	4803      	ldr	r0, [pc, #12]	; (1822c <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   18220:	bcf0      	pop	{r4, r5, r6, r7}
   18222:	4770      	bx	lr
   18224:	2000      	movs	r0, #0
   18226:	bcf0      	pop	{r4, r5, r6, r7}
   18228:	4770      	bx	lr
   1822a:	bf00      	nop
   1822c:	00f10c36 	.word	0x00f10c36

00018230 <LLF_RND_AdaptiveProportionTest>:
   18230:	2800      	cmp	r0, #0
   18232:	d061      	beq.n	182f8 <LLF_RND_AdaptiveProportionTest+0xc8>
   18234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18238:	1e4c      	subs	r4, r1, #1
   1823a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1823e:	d227      	bcs.n	18290 <LLF_RND_AdaptiveProportionTest+0x60>
   18240:	b333      	cbz	r3, 18290 <LLF_RND_AdaptiveProportionTest+0x60>
   18242:	b32a      	cbz	r2, 18290 <LLF_RND_AdaptiveProportionTest+0x60>
   18244:	00cd      	lsls	r5, r1, #3
   18246:	2b01      	cmp	r3, #1
   18248:	f105 3eff 	add.w	lr, r5, #4294967295
   1824c:	d030      	beq.n	182b0 <LLF_RND_AdaptiveProportionTest+0x80>
   1824e:	2100      	movs	r1, #0
   18250:	468c      	mov	ip, r1
   18252:	460f      	mov	r7, r1
   18254:	460e      	mov	r6, r1
   18256:	f103 38ff 	add.w	r8, r3, #4294967295
   1825a:	094c      	lsrs	r4, r1, #5
   1825c:	f001 051f 	and.w	r5, r1, #31
   18260:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   18264:	2d1f      	cmp	r5, #31
   18266:	fa24 f405 	lsr.w	r4, r4, r5
   1826a:	bf18      	it	ne
   1826c:	f004 0401 	andne.w	r4, r4, #1
   18270:	b921      	cbnz	r1, 1827c <LLF_RND_AdaptiveProportionTest+0x4c>
   18272:	2601      	movs	r6, #1
   18274:	46b4      	mov	ip, r6
   18276:	4631      	mov	r1, r6
   18278:	4627      	mov	r7, r4
   1827a:	e7ee      	b.n	1825a <LLF_RND_AdaptiveProportionTest+0x2a>
   1827c:	42b3      	cmp	r3, r6
   1827e:	d013      	beq.n	182a8 <LLF_RND_AdaptiveProportionTest+0x78>
   18280:	42a7      	cmp	r7, r4
   18282:	d101      	bne.n	18288 <LLF_RND_AdaptiveProportionTest+0x58>
   18284:	f10c 0c01 	add.w	ip, ip, #1
   18288:	4546      	cmp	r6, r8
   1828a:	d104      	bne.n	18296 <LLF_RND_AdaptiveProportionTest+0x66>
   1828c:	4562      	cmp	r2, ip
   1828e:	d202      	bcs.n	18296 <LLF_RND_AdaptiveProportionTest+0x66>
   18290:	481a      	ldr	r0, [pc, #104]	; (182fc <LLF_RND_AdaptiveProportionTest+0xcc>)
   18292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18296:	463c      	mov	r4, r7
   18298:	3101      	adds	r1, #1
   1829a:	458e      	cmp	lr, r1
   1829c:	f106 0601 	add.w	r6, r6, #1
   182a0:	d2ea      	bcs.n	18278 <LLF_RND_AdaptiveProportionTest+0x48>
   182a2:	2000      	movs	r0, #0
   182a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   182a8:	2600      	movs	r6, #0
   182aa:	f04f 0c01 	mov.w	ip, #1
   182ae:	e7f3      	b.n	18298 <LLF_RND_AdaptiveProportionTest+0x68>
   182b0:	2600      	movs	r6, #0
   182b2:	46b4      	mov	ip, r6
   182b4:	4637      	mov	r7, r6
   182b6:	4634      	mov	r4, r6
   182b8:	0961      	lsrs	r1, r4, #5
   182ba:	f004 031f 	and.w	r3, r4, #31
   182be:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   182c2:	2b1f      	cmp	r3, #31
   182c4:	fa21 f103 	lsr.w	r1, r1, r3
   182c8:	bf18      	it	ne
   182ca:	f001 0101 	andne.w	r1, r1, #1
   182ce:	b13c      	cbz	r4, 182e0 <LLF_RND_AdaptiveProportionTest+0xb0>
   182d0:	b95f      	cbnz	r7, 182ea <LLF_RND_AdaptiveProportionTest+0xba>
   182d2:	458c      	cmp	ip, r1
   182d4:	d001      	beq.n	182da <LLF_RND_AdaptiveProportionTest+0xaa>
   182d6:	4661      	mov	r1, ip
   182d8:	e008      	b.n	182ec <LLF_RND_AdaptiveProportionTest+0xbc>
   182da:	3601      	adds	r6, #1
   182dc:	4661      	mov	r1, ip
   182de:	e005      	b.n	182ec <LLF_RND_AdaptiveProportionTest+0xbc>
   182e0:	2601      	movs	r6, #1
   182e2:	4634      	mov	r4, r6
   182e4:	468c      	mov	ip, r1
   182e6:	2701      	movs	r7, #1
   182e8:	e7e6      	b.n	182b8 <LLF_RND_AdaptiveProportionTest+0x88>
   182ea:	463e      	mov	r6, r7
   182ec:	42b2      	cmp	r2, r6
   182ee:	d3cf      	bcc.n	18290 <LLF_RND_AdaptiveProportionTest+0x60>
   182f0:	3401      	adds	r4, #1
   182f2:	42ac      	cmp	r4, r5
   182f4:	d1f6      	bne.n	182e4 <LLF_RND_AdaptiveProportionTest+0xb4>
   182f6:	e7d4      	b.n	182a2 <LLF_RND_AdaptiveProportionTest+0x72>
   182f8:	4800      	ldr	r0, [pc, #0]	; (182fc <LLF_RND_AdaptiveProportionTest+0xcc>)
   182fa:	4770      	bx	lr
   182fc:	00f10c37 	.word	0x00f10c37

00018300 <getTrngSource>:
   18300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18304:	b08d      	sub	sp, #52	; 0x34
   18306:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1830a:	4607      	mov	r7, r0
   1830c:	460c      	mov	r4, r1
   1830e:	2d00      	cmp	r5, #0
   18310:	d14d      	bne.n	183ae <getTrngSource+0xae>
   18312:	f8d1 a010 	ldr.w	sl, [r1, #16]
   18316:	601e      	str	r6, [r3, #0]
   18318:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1831a:	2100      	movs	r1, #0
   1831c:	6019      	str	r1, [r3, #0]
   1831e:	2a00      	cmp	r2, #0
   18320:	f000 8120 	beq.w	18564 <getTrngSource+0x264>
   18324:	4a9b      	ldr	r2, [pc, #620]	; (18594 <getTrngSource+0x294>)
   18326:	4b9c      	ldr	r3, [pc, #624]	; (18598 <getTrngSource+0x298>)
   18328:	6811      	ldr	r1, [r2, #0]
   1832a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1832c:	681b      	ldr	r3, [r3, #0]
   1832e:	429a      	cmp	r2, r3
   18330:	d148      	bne.n	183c4 <getTrngSource+0xc4>
   18332:	290a      	cmp	r1, #10
   18334:	d146      	bne.n	183c4 <getTrngSource+0xc4>
   18336:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   1833a:	9304      	str	r3, [sp, #16]
   1833c:	4b97      	ldr	r3, [pc, #604]	; (1859c <getTrngSource+0x29c>)
   1833e:	fba3 230a 	umull	r2, r3, r3, sl
   18342:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   18346:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1834a:	f106 0208 	add.w	r2, r6, #8
   1834e:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   18352:	2304      	movs	r3, #4
   18354:	9203      	str	r2, [sp, #12]
   18356:	9302      	str	r3, [sp, #8]
   18358:	46b8      	mov	r8, r7
   1835a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1835c:	f8c3 a000 	str.w	sl, [r3]
   18360:	f1ba 0f00 	cmp.w	sl, #0
   18364:	f000 80c4 	beq.w	184f0 <getTrngSource+0x1f0>
   18368:	9e03      	ldr	r6, [sp, #12]
   1836a:	4655      	mov	r5, sl
   1836c:	f04f 0900 	mov.w	r9, #0
   18370:	f000 fc4e 	bl	18c10 <LLF_RND_TurnOffTrng>
   18374:	2300      	movs	r3, #0
   18376:	9305      	str	r3, [sp, #20]
   18378:	f1b8 0f00 	cmp.w	r8, #0
   1837c:	f000 80e6 	beq.w	1854c <getTrngSource+0x24c>
   18380:	2c00      	cmp	r4, #0
   18382:	f000 80e3 	beq.w	1854c <getTrngSource+0x24c>
   18386:	9b04      	ldr	r3, [sp, #16]
   18388:	2b00      	cmp	r3, #0
   1838a:	f000 80dd 	beq.w	18548 <getTrngSource+0x248>
   1838e:	a904      	add	r1, sp, #16
   18390:	4620      	mov	r0, r4
   18392:	f000 fc2d 	bl	18bf0 <LLF_RND_GetFastestRosc>
   18396:	b1b8      	cbz	r0, 183c8 <getTrngSource+0xc8>
   18398:	4b81      	ldr	r3, [pc, #516]	; (185a0 <getTrngSource+0x2a0>)
   1839a:	4298      	cmp	r0, r3
   1839c:	f040 80a8 	bne.w	184f0 <getTrngSource+0x1f0>
   183a0:	9002      	str	r0, [sp, #8]
   183a2:	f000 fc35 	bl	18c10 <LLF_RND_TurnOffTrng>
   183a6:	9802      	ldr	r0, [sp, #8]
   183a8:	b00d      	add	sp, #52	; 0x34
   183aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   183b2:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   183b6:	3001      	adds	r0, #1
   183b8:	bf14      	ite	ne
   183ba:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   183be:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   183c2:	e7a8      	b.n	18316 <getTrngSource+0x16>
   183c4:	4877      	ldr	r0, [pc, #476]	; (185a4 <getTrngSource+0x2a4>)
   183c6:	e7eb      	b.n	183a0 <getTrngSource+0xa0>
   183c8:	9804      	ldr	r0, [sp, #16]
   183ca:	4621      	mov	r1, r4
   183cc:	f000 fbf2 	bl	18bb4 <LLF_RND_GetRoscSampleCnt>
   183d0:	2800      	cmp	r0, #0
   183d2:	d1e1      	bne.n	18398 <getTrngSource+0x98>
   183d4:	9f04      	ldr	r7, [sp, #16]
   183d6:	2f08      	cmp	r7, #8
   183d8:	f000 80ba 	beq.w	18550 <getTrngSource+0x250>
   183dc:	2f04      	cmp	r7, #4
   183de:	f000 80b9 	beq.w	18554 <getTrngSource+0x254>
   183e2:	f1a7 0702 	sub.w	r7, r7, #2
   183e6:	fab7 f787 	clz	r7, r7
   183ea:	097f      	lsrs	r7, r7, #5
   183ec:	496e      	ldr	r1, [pc, #440]	; (185a8 <getTrngSource+0x2a8>)
   183ee:	2301      	movs	r3, #1
   183f0:	600b      	str	r3, [r1, #0]
   183f2:	f841 3c84 	str.w	r3, [r1, #-132]
   183f6:	4619      	mov	r1, r3
   183f8:	4b6b      	ldr	r3, [pc, #428]	; (185a8 <getTrngSource+0x2a8>)
   183fa:	4867      	ldr	r0, [pc, #412]	; (18598 <getTrngSource+0x298>)
   183fc:	6019      	str	r1, [r3, #0]
   183fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18400:	6003      	str	r3, [r0, #0]
   18402:	6800      	ldr	r0, [r0, #0]
   18404:	4283      	cmp	r3, r0
   18406:	d1f7      	bne.n	183f8 <getTrngSource+0xf8>
   18408:	4a68      	ldr	r2, [pc, #416]	; (185ac <getTrngSource+0x2ac>)
   1840a:	2300      	movs	r3, #0
   1840c:	6013      	str	r3, [r2, #0]
   1840e:	f04f 30ff 	mov.w	r0, #4294967295
   18412:	f7ff fd05 	bl	17e20 <CC_HalClearInterruptBit>
   18416:	2300      	movs	r3, #0
   18418:	4618      	mov	r0, r3
   1841a:	4b65      	ldr	r3, [pc, #404]	; (185b0 <getTrngSource+0x2b0>)
   1841c:	f06f 011b 	mvn.w	r1, #27
   18420:	6019      	str	r1, [r3, #0]
   18422:	f7ff fd0b 	bl	17e3c <CC_HalMaskInterrupt>
   18426:	4963      	ldr	r1, [pc, #396]	; (185b4 <getTrngSource+0x2b4>)
   18428:	4b63      	ldr	r3, [pc, #396]	; (185b8 <getTrngSource+0x2b8>)
   1842a:	600f      	str	r7, [r1, #0]
   1842c:	6818      	ldr	r0, [r3, #0]
   1842e:	4f5b      	ldr	r7, [pc, #364]	; (1859c <getTrngSource+0x29c>)
   18430:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   18434:	f7ff fd02 	bl	17e3c <CC_HalMaskInterrupt>
   18438:	4b56      	ldr	r3, [pc, #344]	; (18594 <getTrngSource+0x294>)
   1843a:	4860      	ldr	r0, [pc, #384]	; (185bc <getTrngSource+0x2bc>)
   1843c:	210a      	movs	r1, #10
   1843e:	6019      	str	r1, [r3, #0]
   18440:	6921      	ldr	r1, [r4, #16]
   18442:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18444:	fba7 c101 	umull	ip, r1, r7, r1
   18448:	0909      	lsrs	r1, r1, #4
   1844a:	fb03 f301 	mul.w	r3, r3, r1
   1844e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18452:	03db      	lsls	r3, r3, #15
   18454:	099b      	lsrs	r3, r3, #6
   18456:	6003      	str	r3, [r0, #0]
   18458:	4b54      	ldr	r3, [pc, #336]	; (185ac <getTrngSource+0x2ac>)
   1845a:	2201      	movs	r2, #1
   1845c:	601a      	str	r2, [r3, #0]
   1845e:	9904      	ldr	r1, [sp, #16]
   18460:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   18464:	020b      	lsls	r3, r1, #8
   18466:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1846a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1846e:	4313      	orrs	r3, r2
   18470:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   18474:	a805      	add	r0, sp, #20
   18476:	f000 fb8d 	bl	18b94 <LLF_RND_WaitRngInterrupt>
   1847a:	9b05      	ldr	r3, [sp, #20]
   1847c:	f003 031a 	and.w	r3, r3, #26
   18480:	4303      	orrs	r3, r0
   18482:	d135      	bne.n	184f0 <getTrngSource+0x1f0>
   18484:	4a4e      	ldr	r2, [pc, #312]	; (185c0 <getTrngSource+0x2c0>)
   18486:	4b4f      	ldr	r3, [pc, #316]	; (185c4 <getTrngSource+0x2c4>)
   18488:	6812      	ldr	r2, [r2, #0]
   1848a:	9206      	str	r2, [sp, #24]
   1848c:	681a      	ldr	r2, [r3, #0]
   1848e:	9207      	str	r2, [sp, #28]
   18490:	685a      	ldr	r2, [r3, #4]
   18492:	9208      	str	r2, [sp, #32]
   18494:	689a      	ldr	r2, [r3, #8]
   18496:	9209      	str	r2, [sp, #36]	; 0x24
   18498:	68da      	ldr	r2, [r3, #12]
   1849a:	920a      	str	r2, [sp, #40]	; 0x28
   1849c:	3310      	adds	r3, #16
   1849e:	fba7 2705 	umull	r2, r7, r7, r5
   184a2:	681b      	ldr	r3, [r3, #0]
   184a4:	930b      	str	r3, [sp, #44]	; 0x2c
   184a6:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   184aa:	d102      	bne.n	184b2 <getTrngSource+0x1b2>
   184ac:	f1bb 0f00 	cmp.w	fp, #0
   184b0:	d141      	bne.n	18536 <getTrngSource+0x236>
   184b2:	2218      	movs	r2, #24
   184b4:	4630      	mov	r0, r6
   184b6:	eb0d 0102 	add.w	r1, sp, r2
   184ba:	f000 fb0f 	bl	18adc <CC_PalMemCopyPlat>
   184be:	3d18      	subs	r5, #24
   184c0:	3618      	adds	r6, #24
   184c2:	f109 0901 	add.w	r9, r9, #1
   184c6:	2d00      	cmp	r5, #0
   184c8:	f47f af52 	bne.w	18370 <getTrngSource+0x70>
   184cc:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   184d0:	d85d      	bhi.n	1858e <getTrngSource+0x28e>
   184d2:	9d03      	ldr	r5, [sp, #12]
   184d4:	6962      	ldr	r2, [r4, #20]
   184d6:	4651      	mov	r1, sl
   184d8:	4628      	mov	r0, r5
   184da:	f7ff fe7b 	bl	181d4 <LLF_RND_RepetitionCounterTest.part.0>
   184de:	2800      	cmp	r0, #0
   184e0:	d04b      	beq.n	1857a <getTrngSource+0x27a>
   184e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   184e4:	2300      	movs	r3, #0
   184e6:	6013      	str	r3, [r2, #0]
   184e8:	4b2d      	ldr	r3, [pc, #180]	; (185a0 <getTrngSource+0x2a0>)
   184ea:	4298      	cmp	r0, r3
   184ec:	f43f af58 	beq.w	183a0 <getTrngSource+0xa0>
   184f0:	9d04      	ldr	r5, [sp, #16]
   184f2:	2d08      	cmp	r5, #8
   184f4:	d034      	beq.n	18560 <getTrngSource+0x260>
   184f6:	2200      	movs	r2, #0
   184f8:	ab04      	add	r3, sp, #16
   184fa:	006d      	lsls	r5, r5, #1
   184fc:	9200      	str	r2, [sp, #0]
   184fe:	4621      	mov	r1, r4
   18500:	4640      	mov	r0, r8
   18502:	9504      	str	r5, [sp, #16]
   18504:	f7ff fdb8 	bl	18078 <startTrngHW>
   18508:	4b2f      	ldr	r3, [pc, #188]	; (185c8 <getTrngSource+0x2c8>)
   1850a:	4298      	cmp	r0, r3
   1850c:	d024      	beq.n	18558 <getTrngSource+0x258>
   1850e:	2800      	cmp	r0, #0
   18510:	f47f af46 	bne.w	183a0 <getTrngSource+0xa0>
   18514:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   18518:	0a13      	lsrs	r3, r2, #8
   1851a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1851e:	4313      	orrs	r3, r2
   18520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   18524:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   18528:	9b02      	ldr	r3, [sp, #8]
   1852a:	3b01      	subs	r3, #1
   1852c:	9302      	str	r3, [sp, #8]
   1852e:	f47f af14 	bne.w	1835a <getTrngSource+0x5a>
   18532:	2000      	movs	r0, #0
   18534:	e734      	b.n	183a0 <getTrngSource+0xa0>
   18536:	4630      	mov	r0, r6
   18538:	465a      	mov	r2, fp
   1853a:	a906      	add	r1, sp, #24
   1853c:	f000 face 	bl	18adc <CC_PalMemCopyPlat>
   18540:	eba5 050b 	sub.w	r5, r5, fp
   18544:	445e      	add	r6, fp
   18546:	e7bc      	b.n	184c2 <getTrngSource+0x1c2>
   18548:	481f      	ldr	r0, [pc, #124]	; (185c8 <getTrngSource+0x2c8>)
   1854a:	e725      	b.n	18398 <getTrngSource+0x98>
   1854c:	481f      	ldr	r0, [pc, #124]	; (185cc <getTrngSource+0x2cc>)
   1854e:	e723      	b.n	18398 <getTrngSource+0x98>
   18550:	2703      	movs	r7, #3
   18552:	e74b      	b.n	183ec <getTrngSource+0xec>
   18554:	2702      	movs	r7, #2
   18556:	e749      	b.n	183ec <getTrngSource+0xec>
   18558:	6a23      	ldr	r3, [r4, #32]
   1855a:	2b00      	cmp	r3, #0
   1855c:	f43f af20 	beq.w	183a0 <getTrngSource+0xa0>
   18560:	481b      	ldr	r0, [pc, #108]	; (185d0 <getTrngSource+0x2d0>)
   18562:	e71d      	b.n	183a0 <getTrngSource+0xa0>
   18564:	9500      	str	r5, [sp, #0]
   18566:	ab04      	add	r3, sp, #16
   18568:	2201      	movs	r2, #1
   1856a:	4621      	mov	r1, r4
   1856c:	4638      	mov	r0, r7
   1856e:	f7ff fd83 	bl	18078 <startTrngHW>
   18572:	2800      	cmp	r0, #0
   18574:	f43f aee2 	beq.w	1833c <getTrngSource+0x3c>
   18578:	e712      	b.n	183a0 <getTrngSource+0xa0>
   1857a:	69a2      	ldr	r2, [r4, #24]
   1857c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18580:	4651      	mov	r1, sl
   18582:	4628      	mov	r0, r5
   18584:	f7ff fe54 	bl	18230 <LLF_RND_AdaptiveProportionTest>
   18588:	2800      	cmp	r0, #0
   1858a:	d1aa      	bne.n	184e2 <getTrngSource+0x1e2>
   1858c:	e7d1      	b.n	18532 <getTrngSource+0x232>
   1858e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18590:	601d      	str	r5, [r3, #0]
   18592:	e7ad      	b.n	184f0 <getTrngSource+0x1f0>
   18594:	5002b138 	.word	0x5002b138
   18598:	5002b130 	.word	0x5002b130
   1859c:	aaaaaaab 	.word	0xaaaaaaab
   185a0:	00f10c02 	.word	0x00f10c02
   185a4:	00f10c30 	.word	0x00f10c30
   185a8:	5002b1c4 	.word	0x5002b1c4
   185ac:	5002b12c 	.word	0x5002b12c
   185b0:	5002b100 	.word	0x5002b100
   185b4:	5002b10c 	.word	0x5002b10c
   185b8:	5002ba04 	.word	0x5002ba04
   185bc:	5002b1d8 	.word	0x5002b1d8
   185c0:	5002b114 	.word	0x5002b114
   185c4:	5002b118 	.word	0x5002b118
   185c8:	00f10c31 	.word	0x00f10c31
   185cc:	00f10c35 	.word	0x00f10c35
   185d0:	00f10c32 	.word	0x00f10c32

000185d4 <LLF_RND_GetTrngSource>:
   185d4:	b430      	push	{r4, r5}
   185d6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   185da:	9d04      	ldr	r5, [sp, #16]
   185dc:	9402      	str	r4, [sp, #8]
   185de:	2400      	movs	r4, #0
   185e0:	e9cd 5403 	strd	r5, r4, [sp, #12]
   185e4:	bc30      	pop	{r4, r5}
   185e6:	f7ff be8b 	b.w	18300 <getTrngSource>
   185ea:	bf00      	nop

000185ec <LLF_RND_RunTrngStartupTest>:
   185ec:	b510      	push	{r4, lr}
   185ee:	b086      	sub	sp, #24
   185f0:	ab05      	add	r3, sp, #20
   185f2:	2401      	movs	r4, #1
   185f4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   185f8:	9300      	str	r3, [sp, #0]
   185fa:	2200      	movs	r2, #0
   185fc:	ab04      	add	r3, sp, #16
   185fe:	f7ff fe7f 	bl	18300 <getTrngSource>
   18602:	b006      	add	sp, #24
   18604:	bd10      	pop	{r4, pc}
   18606:	bf00      	nop

00018608 <mbedtls_hardware_poll>:
   18608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1860a:	b089      	sub	sp, #36	; 0x24
   1860c:	9205      	str	r2, [sp, #20]
   1860e:	2900      	cmp	r1, #0
   18610:	d064      	beq.n	186dc <mbedtls_hardware_poll+0xd4>
   18612:	461c      	mov	r4, r3
   18614:	2b00      	cmp	r3, #0
   18616:	d061      	beq.n	186dc <mbedtls_hardware_poll+0xd4>
   18618:	4615      	mov	r5, r2
   1861a:	2a00      	cmp	r2, #0
   1861c:	d05e      	beq.n	186dc <mbedtls_hardware_poll+0xd4>
   1861e:	4f31      	ldr	r7, [pc, #196]	; (186e4 <mbedtls_hardware_poll+0xdc>)
   18620:	460e      	mov	r6, r1
   18622:	6838      	ldr	r0, [r7, #0]
   18624:	f04f 31ff 	mov.w	r1, #4294967295
   18628:	f7ff fca2 	bl	17f70 <CC_PalMutexLock>
   1862c:	2800      	cmp	r0, #0
   1862e:	d14b      	bne.n	186c8 <mbedtls_hardware_poll+0xc0>
   18630:	2000      	movs	r0, #0
   18632:	f7ff fccd 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   18636:	2800      	cmp	r0, #0
   18638:	d142      	bne.n	186c0 <mbedtls_hardware_poll+0xb8>
   1863a:	482b      	ldr	r0, [pc, #172]	; (186e8 <mbedtls_hardware_poll+0xe0>)
   1863c:	f000 fa12 	bl	18a64 <RNG_PLAT_SetUserRngParameters>
   18640:	b1d8      	cbz	r0, 1867a <mbedtls_hardware_poll+0x72>
   18642:	2001      	movs	r0, #1
   18644:	f04f 36ff 	mov.w	r6, #4294967295
   18648:	f7ff fcc2 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   1864c:	2800      	cmp	r0, #0
   1864e:	d133      	bne.n	186b8 <mbedtls_hardware_poll+0xb0>
   18650:	4826      	ldr	r0, [pc, #152]	; (186ec <mbedtls_hardware_poll+0xe4>)
   18652:	f44f 7108 	mov.w	r1, #544	; 0x220
   18656:	f7fe fe47 	bl	172e8 <mbedtls_zeroize_internal>
   1865a:	4825      	ldr	r0, [pc, #148]	; (186f0 <mbedtls_hardware_poll+0xe8>)
   1865c:	21dc      	movs	r1, #220	; 0xdc
   1865e:	f7fe fe43 	bl	172e8 <mbedtls_zeroize_internal>
   18662:	4821      	ldr	r0, [pc, #132]	; (186e8 <mbedtls_hardware_poll+0xe0>)
   18664:	2128      	movs	r1, #40	; 0x28
   18666:	f7fe fe3f 	bl	172e8 <mbedtls_zeroize_internal>
   1866a:	6838      	ldr	r0, [r7, #0]
   1866c:	f7ff fc88 	bl	17f80 <CC_PalMutexUnlock>
   18670:	2800      	cmp	r0, #0
   18672:	d12d      	bne.n	186d0 <mbedtls_hardware_poll+0xc8>
   18674:	4630      	mov	r0, r6
   18676:	b009      	add	sp, #36	; 0x24
   18678:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1867a:	491c      	ldr	r1, [pc, #112]	; (186ec <mbedtls_hardware_poll+0xe4>)
   1867c:	9003      	str	r0, [sp, #12]
   1867e:	ab07      	add	r3, sp, #28
   18680:	4602      	mov	r2, r0
   18682:	9102      	str	r1, [sp, #8]
   18684:	9300      	str	r3, [sp, #0]
   18686:	4918      	ldr	r1, [pc, #96]	; (186e8 <mbedtls_hardware_poll+0xe0>)
   18688:	4819      	ldr	r0, [pc, #100]	; (186f0 <mbedtls_hardware_poll+0xe8>)
   1868a:	9401      	str	r4, [sp, #4]
   1868c:	ab05      	add	r3, sp, #20
   1868e:	f7ff ffa1 	bl	185d4 <LLF_RND_GetTrngSource>
   18692:	4603      	mov	r3, r0
   18694:	2800      	cmp	r0, #0
   18696:	d1d4      	bne.n	18642 <mbedtls_hardware_poll+0x3a>
   18698:	6822      	ldr	r2, [r4, #0]
   1869a:	42aa      	cmp	r2, r5
   1869c:	d3d1      	bcc.n	18642 <mbedtls_hardware_poll+0x3a>
   1869e:	9907      	ldr	r1, [sp, #28]
   186a0:	4630      	mov	r0, r6
   186a2:	3108      	adds	r1, #8
   186a4:	462a      	mov	r2, r5
   186a6:	461e      	mov	r6, r3
   186a8:	f000 fa18 	bl	18adc <CC_PalMemCopyPlat>
   186ac:	6025      	str	r5, [r4, #0]
   186ae:	2001      	movs	r0, #1
   186b0:	f7ff fc8e 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   186b4:	2800      	cmp	r0, #0
   186b6:	d0cb      	beq.n	18650 <mbedtls_hardware_poll+0x48>
   186b8:	480e      	ldr	r0, [pc, #56]	; (186f4 <mbedtls_hardware_poll+0xec>)
   186ba:	f7fe fd0d 	bl	170d8 <CC_PalAbort>
   186be:	e7c7      	b.n	18650 <mbedtls_hardware_poll+0x48>
   186c0:	480d      	ldr	r0, [pc, #52]	; (186f8 <mbedtls_hardware_poll+0xf0>)
   186c2:	f7fe fd09 	bl	170d8 <CC_PalAbort>
   186c6:	e7b8      	b.n	1863a <mbedtls_hardware_poll+0x32>
   186c8:	480c      	ldr	r0, [pc, #48]	; (186fc <mbedtls_hardware_poll+0xf4>)
   186ca:	f7fe fd05 	bl	170d8 <CC_PalAbort>
   186ce:	e7af      	b.n	18630 <mbedtls_hardware_poll+0x28>
   186d0:	480b      	ldr	r0, [pc, #44]	; (18700 <mbedtls_hardware_poll+0xf8>)
   186d2:	f7fe fd01 	bl	170d8 <CC_PalAbort>
   186d6:	4630      	mov	r0, r6
   186d8:	b009      	add	sp, #36	; 0x24
   186da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186dc:	f04f 36ff 	mov.w	r6, #4294967295
   186e0:	e7c8      	b.n	18674 <mbedtls_hardware_poll+0x6c>
   186e2:	bf00      	nop
   186e4:	2000051c 	.word	0x2000051c
   186e8:	20002c74 	.word	0x20002c74
   186ec:	20002a54 	.word	0x20002a54
   186f0:	20002978 	.word	0x20002978
   186f4:	0001e14c 	.word	0x0001e14c
   186f8:	0001e12c 	.word	0x0001e12c
   186fc:	0001e114 	.word	0x0001e114
   18700:	0001e1a4 	.word	0x0001e1a4

00018704 <cc_mbedtls_aes_init>:
   18704:	b510      	push	{r4, lr}
   18706:	4604      	mov	r4, r0
   18708:	b130      	cbz	r0, 18718 <cc_mbedtls_aes_init+0x14>
   1870a:	2200      	movs	r2, #0
   1870c:	2301      	movs	r3, #1
   1870e:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   18712:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   18716:	bd10      	pop	{r4, pc}
   18718:	4801      	ldr	r0, [pc, #4]	; (18720 <cc_mbedtls_aes_init+0x1c>)
   1871a:	f7fe fcdd 	bl	170d8 <CC_PalAbort>
   1871e:	e7f4      	b.n	1870a <cc_mbedtls_aes_init+0x6>
   18720:	0001e1bc 	.word	0x0001e1bc

00018724 <cc_mbedtls_aes_free>:
   18724:	b118      	cbz	r0, 1872e <cc_mbedtls_aes_free+0xa>
   18726:	2274      	movs	r2, #116	; 0x74
   18728:	2100      	movs	r1, #0
   1872a:	f000 b9d9 	b.w	18ae0 <CC_PalMemSetPlat>
   1872e:	4770      	bx	lr

00018730 <cc_mbedtls_aes_setkey_enc>:
   18730:	b190      	cbz	r0, 18758 <cc_mbedtls_aes_setkey_enc+0x28>
   18732:	b1a1      	cbz	r1, 1875e <cc_mbedtls_aes_setkey_enc+0x2e>
   18734:	b510      	push	{r4, lr}
   18736:	2a80      	cmp	r2, #128	; 0x80
   18738:	f04f 0400 	mov.w	r4, #0
   1873c:	6384      	str	r4, [r0, #56]	; 0x38
   1873e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   18742:	d106      	bne.n	18752 <cc_mbedtls_aes_setkey_enc+0x22>
   18744:	6304      	str	r4, [r0, #48]	; 0x30
   18746:	2210      	movs	r2, #16
   18748:	3010      	adds	r0, #16
   1874a:	f000 f9c7 	bl	18adc <CC_PalMemCopyPlat>
   1874e:	4620      	mov	r0, r4
   18750:	bd10      	pop	{r4, pc}
   18752:	f06f 001f 	mvn.w	r0, #31
   18756:	bd10      	pop	{r4, pc}
   18758:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1875c:	4770      	bx	lr
   1875e:	f06f 001f 	mvn.w	r0, #31
   18762:	4770      	bx	lr

00018764 <cc_mbedtls_aes_crypt_ecb>:
   18764:	b320      	cbz	r0, 187b0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   18766:	b31a      	cbz	r2, 187b0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   18768:	b313      	cbz	r3, 187b0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1876a:	2901      	cmp	r1, #1
   1876c:	d820      	bhi.n	187b0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1876e:	b570      	push	{r4, r5, r6, lr}
   18770:	4604      	mov	r4, r0
   18772:	6b81      	ldr	r1, [r0, #56]	; 0x38
   18774:	b086      	sub	sp, #24
   18776:	d016      	beq.n	187a6 <cc_mbedtls_aes_crypt_ecb+0x42>
   18778:	2901      	cmp	r1, #1
   1877a:	d116      	bne.n	187aa <cc_mbedtls_aes_crypt_ecb+0x46>
   1877c:	2100      	movs	r1, #0
   1877e:	2510      	movs	r5, #16
   18780:	ae04      	add	r6, sp, #16
   18782:	6361      	str	r1, [r4, #52]	; 0x34
   18784:	4610      	mov	r0, r2
   18786:	e9cd 5600 	strd	r5, r6, [sp]
   1878a:	aa02      	add	r2, sp, #8
   1878c:	4629      	mov	r1, r5
   1878e:	f000 fa4d 	bl	18c2c <SetDataBuffersInfo>
   18792:	b950      	cbnz	r0, 187aa <cc_mbedtls_aes_crypt_ecb+0x46>
   18794:	462b      	mov	r3, r5
   18796:	4632      	mov	r2, r6
   18798:	a902      	add	r1, sp, #8
   1879a:	4620      	mov	r0, r4
   1879c:	f000 fcda 	bl	19154 <ProcessAesDrv>
   187a0:	b918      	cbnz	r0, 187aa <cc_mbedtls_aes_crypt_ecb+0x46>
   187a2:	b006      	add	sp, #24
   187a4:	bd70      	pop	{r4, r5, r6, pc}
   187a6:	2900      	cmp	r1, #0
   187a8:	d0e8      	beq.n	1877c <cc_mbedtls_aes_crypt_ecb+0x18>
   187aa:	f06f 0021 	mvn.w	r0, #33	; 0x21
   187ae:	e7f8      	b.n	187a2 <cc_mbedtls_aes_crypt_ecb+0x3e>
   187b0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   187b4:	4770      	bx	lr
   187b6:	bf00      	nop

000187b8 <cc_mbedtls_sha256_init>:
   187b8:	b510      	push	{r4, lr}
   187ba:	4604      	mov	r4, r0
   187bc:	b128      	cbz	r0, 187ca <cc_mbedtls_sha256_init+0x12>
   187be:	4620      	mov	r0, r4
   187c0:	21f0      	movs	r1, #240	; 0xf0
   187c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   187c6:	f000 b98d 	b.w	18ae4 <CC_PalMemSetZeroPlat>
   187ca:	4804      	ldr	r0, [pc, #16]	; (187dc <cc_mbedtls_sha256_init+0x24>)
   187cc:	f7fe fc84 	bl	170d8 <CC_PalAbort>
   187d0:	4620      	mov	r0, r4
   187d2:	21f0      	movs	r1, #240	; 0xf0
   187d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   187d8:	f000 b984 	b.w	18ae4 <CC_PalMemSetZeroPlat>
   187dc:	0001e1d0 	.word	0x0001e1d0

000187e0 <cc_mbedtls_sha256_free>:
   187e0:	b110      	cbz	r0, 187e8 <cc_mbedtls_sha256_free+0x8>
   187e2:	21f0      	movs	r1, #240	; 0xf0
   187e4:	f7fe bd80 	b.w	172e8 <mbedtls_zeroize_internal>
   187e8:	4770      	bx	lr
   187ea:	bf00      	nop

000187ec <cc_mbedtls_sha256_starts>:
   187ec:	b508      	push	{r3, lr}
   187ee:	b161      	cbz	r1, 1880a <cc_mbedtls_sha256_starts+0x1e>
   187f0:	2901      	cmp	r1, #1
   187f2:	d107      	bne.n	18804 <cc_mbedtls_sha256_starts+0x18>
   187f4:	2102      	movs	r1, #2
   187f6:	f000 f85b 	bl	188b0 <mbedtls_sha_starts_internal>
   187fa:	2800      	cmp	r0, #0
   187fc:	bf18      	it	ne
   187fe:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   18802:	bd08      	pop	{r3, pc}
   18804:	f06f 0036 	mvn.w	r0, #54	; 0x36
   18808:	bd08      	pop	{r3, pc}
   1880a:	2101      	movs	r1, #1
   1880c:	f000 f850 	bl	188b0 <mbedtls_sha_starts_internal>
   18810:	e7f3      	b.n	187fa <cc_mbedtls_sha256_starts+0xe>
   18812:	bf00      	nop

00018814 <cc_mbedtls_sha256_update>:
   18814:	b570      	push	{r4, r5, r6, lr}
   18816:	188e      	adds	r6, r1, r2
   18818:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1881c:	b0a0      	sub	sp, #128	; 0x80
   1881e:	460b      	mov	r3, r1
   18820:	4614      	mov	r4, r2
   18822:	4605      	mov	r5, r0
   18824:	d801      	bhi.n	1882a <cc_mbedtls_sha256_update+0x16>
   18826:	2a80      	cmp	r2, #128	; 0x80
   18828:	d90c      	bls.n	18844 <cc_mbedtls_sha256_update+0x30>
   1882a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1882e:	d917      	bls.n	18860 <cc_mbedtls_sha256_update+0x4c>
   18830:	4622      	mov	r2, r4
   18832:	4619      	mov	r1, r3
   18834:	4628      	mov	r0, r5
   18836:	f000 f87d 	bl	18934 <mbedtls_sha_update_internal>
   1883a:	4604      	mov	r4, r0
   1883c:	b984      	cbnz	r4, 18860 <cc_mbedtls_sha256_update+0x4c>
   1883e:	4620      	mov	r0, r4
   18840:	b020      	add	sp, #128	; 0x80
   18842:	bd70      	pop	{r4, r5, r6, pc}
   18844:	4668      	mov	r0, sp
   18846:	f000 f949 	bl	18adc <CC_PalMemCopyPlat>
   1884a:	4622      	mov	r2, r4
   1884c:	4669      	mov	r1, sp
   1884e:	4628      	mov	r0, r5
   18850:	f000 f870 	bl	18934 <mbedtls_sha_update_internal>
   18854:	2180      	movs	r1, #128	; 0x80
   18856:	4604      	mov	r4, r0
   18858:	4668      	mov	r0, sp
   1885a:	f000 f943 	bl	18ae4 <CC_PalMemSetZeroPlat>
   1885e:	e7ed      	b.n	1883c <cc_mbedtls_sha256_update+0x28>
   18860:	f06f 0436 	mvn.w	r4, #54	; 0x36
   18864:	e7eb      	b.n	1883e <cc_mbedtls_sha256_update+0x2a>
   18866:	bf00      	nop

00018868 <cc_mbedtls_sha256_finish>:
   18868:	b570      	push	{r4, r5, r6, lr}
   1886a:	b1e8      	cbz	r0, 188a8 <cc_mbedtls_sha256_finish+0x40>
   1886c:	460e      	mov	r6, r1
   1886e:	b1d9      	cbz	r1, 188a8 <cc_mbedtls_sha256_finish+0x40>
   18870:	4604      	mov	r4, r0
   18872:	f000 f831 	bl	188d8 <mbedtls_sha_finish_internal>
   18876:	4605      	mov	r5, r0
   18878:	b9b0      	cbnz	r0, 188a8 <cc_mbedtls_sha256_finish+0x40>
   1887a:	6823      	ldr	r3, [r4, #0]
   1887c:	2b01      	cmp	r3, #1
   1887e:	d00b      	beq.n	18898 <cc_mbedtls_sha256_finish+0x30>
   18880:	2b02      	cmp	r3, #2
   18882:	d001      	beq.n	18888 <cc_mbedtls_sha256_finish+0x20>
   18884:	4628      	mov	r0, r5
   18886:	bd70      	pop	{r4, r5, r6, pc}
   18888:	f104 0108 	add.w	r1, r4, #8
   1888c:	4630      	mov	r0, r6
   1888e:	221c      	movs	r2, #28
   18890:	f000 f924 	bl	18adc <CC_PalMemCopyPlat>
   18894:	4628      	mov	r0, r5
   18896:	bd70      	pop	{r4, r5, r6, pc}
   18898:	f104 0108 	add.w	r1, r4, #8
   1889c:	4630      	mov	r0, r6
   1889e:	2220      	movs	r2, #32
   188a0:	f000 f91c 	bl	18adc <CC_PalMemCopyPlat>
   188a4:	4628      	mov	r0, r5
   188a6:	bd70      	pop	{r4, r5, r6, pc}
   188a8:	f06f 0536 	mvn.w	r5, #54	; 0x36
   188ac:	e7ea      	b.n	18884 <cc_mbedtls_sha256_finish+0x1c>
   188ae:	bf00      	nop

000188b0 <mbedtls_sha_starts_internal>:
   188b0:	b178      	cbz	r0, 188d2 <mbedtls_sha_starts_internal+0x22>
   188b2:	b538      	push	{r3, r4, r5, lr}
   188b4:	4604      	mov	r4, r0
   188b6:	460d      	mov	r5, r1
   188b8:	21f0      	movs	r1, #240	; 0xf0
   188ba:	f000 f913 	bl	18ae4 <CC_PalMemSetZeroPlat>
   188be:	2340      	movs	r3, #64	; 0x40
   188c0:	6025      	str	r5, [r4, #0]
   188c2:	65e3      	str	r3, [r4, #92]	; 0x5c
   188c4:	4620      	mov	r0, r4
   188c6:	f000 f9e5 	bl	18c94 <InitHashDrv>
   188ca:	3800      	subs	r0, #0
   188cc:	bf18      	it	ne
   188ce:	2001      	movne	r0, #1
   188d0:	bd38      	pop	{r3, r4, r5, pc}
   188d2:	2001      	movs	r0, #1
   188d4:	4770      	bx	lr
   188d6:	bf00      	nop

000188d8 <mbedtls_sha_finish_internal>:
   188d8:	b570      	push	{r4, r5, r6, lr}
   188da:	6e05      	ldr	r5, [r0, #96]	; 0x60
   188dc:	b0a4      	sub	sp, #144	; 0x90
   188de:	4604      	mov	r4, r0
   188e0:	ae04      	add	r6, sp, #16
   188e2:	b9e5      	cbnz	r5, 1891e <mbedtls_sha_finish_internal+0x46>
   188e4:	2201      	movs	r2, #1
   188e6:	2300      	movs	r3, #0
   188e8:	6062      	str	r2, [r4, #4]
   188ea:	4630      	mov	r0, r6
   188ec:	e9cd 3300 	strd	r3, r3, [sp]
   188f0:	aa02      	add	r2, sp, #8
   188f2:	4629      	mov	r1, r5
   188f4:	f000 f99a 	bl	18c2c <SetDataBuffersInfo>
   188f8:	b110      	cbz	r0, 18900 <mbedtls_sha_finish_internal+0x28>
   188fa:	2001      	movs	r0, #1
   188fc:	b024      	add	sp, #144	; 0x90
   188fe:	bd70      	pop	{r4, r5, r6, pc}
   18900:	462a      	mov	r2, r5
   18902:	a902      	add	r1, sp, #8
   18904:	4620      	mov	r0, r4
   18906:	f000 f9ef 	bl	18ce8 <ProcessHashDrv>
   1890a:	2800      	cmp	r0, #0
   1890c:	d1f5      	bne.n	188fa <mbedtls_sha_finish_internal+0x22>
   1890e:	4620      	mov	r0, r4
   18910:	f000 fb18 	bl	18f44 <FinishHashDrv>
   18914:	2800      	cmp	r0, #0
   18916:	d1f0      	bne.n	188fa <mbedtls_sha_finish_internal+0x22>
   18918:	6620      	str	r0, [r4, #96]	; 0x60
   1891a:	b024      	add	sp, #144	; 0x90
   1891c:	bd70      	pop	{r4, r5, r6, pc}
   1891e:	2d80      	cmp	r5, #128	; 0x80
   18920:	462a      	mov	r2, r5
   18922:	4630      	mov	r0, r6
   18924:	bf28      	it	cs
   18926:	2280      	movcs	r2, #128	; 0x80
   18928:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1892c:	f000 f8d6 	bl	18adc <CC_PalMemCopyPlat>
   18930:	6e25      	ldr	r5, [r4, #96]	; 0x60
   18932:	e7d7      	b.n	188e4 <mbedtls_sha_finish_internal+0xc>

00018934 <mbedtls_sha_update_internal>:
   18934:	2800      	cmp	r0, #0
   18936:	d054      	beq.n	189e2 <mbedtls_sha_update_internal+0xae>
   18938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1893a:	4614      	mov	r4, r2
   1893c:	b0a5      	sub	sp, #148	; 0x94
   1893e:	b1b2      	cbz	r2, 1896e <mbedtls_sha_update_internal+0x3a>
   18940:	460e      	mov	r6, r1
   18942:	b351      	cbz	r1, 1899a <mbedtls_sha_update_internal+0x66>
   18944:	4605      	mov	r5, r0
   18946:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1894a:	1a1a      	subs	r2, r3, r0
   1894c:	fbb2 f7f3 	udiv	r7, r2, r3
   18950:	fb03 2717 	mls	r7, r3, r7, r2
   18954:	42a7      	cmp	r7, r4
   18956:	bf28      	it	cs
   18958:	4627      	movcs	r7, r4
   1895a:	2f00      	cmp	r7, #0
   1895c:	d143      	bne.n	189e6 <mbedtls_sha_update_internal+0xb2>
   1895e:	4283      	cmp	r3, r0
   18960:	d008      	beq.n	18974 <mbedtls_sha_update_internal+0x40>
   18962:	fbb4 f7f3 	udiv	r7, r4, r3
   18966:	fb03 f707 	mul.w	r7, r3, r7
   1896a:	b9cf      	cbnz	r7, 189a0 <mbedtls_sha_update_internal+0x6c>
   1896c:	bb6c      	cbnz	r4, 189ca <mbedtls_sha_update_internal+0x96>
   1896e:	2000      	movs	r0, #0
   18970:	b025      	add	sp, #148	; 0x94
   18972:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18974:	2b80      	cmp	r3, #128	; 0x80
   18976:	bf28      	it	cs
   18978:	2380      	movcs	r3, #128	; 0x80
   1897a:	461a      	mov	r2, r3
   1897c:	f105 0164 	add.w	r1, r5, #100	; 0x64
   18980:	a804      	add	r0, sp, #16
   18982:	f000 f8ab 	bl	18adc <CC_PalMemCopyPlat>
   18986:	2300      	movs	r3, #0
   18988:	e9cd 3300 	strd	r3, r3, [sp]
   1898c:	a804      	add	r0, sp, #16
   1898e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   18990:	aa02      	add	r2, sp, #8
   18992:	f000 f94b 	bl	18c2c <SetDataBuffersInfo>
   18996:	2800      	cmp	r0, #0
   18998:	d032      	beq.n	18a00 <mbedtls_sha_update_internal+0xcc>
   1899a:	2001      	movs	r0, #1
   1899c:	b025      	add	sp, #148	; 0x94
   1899e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   189a0:	2300      	movs	r3, #0
   189a2:	e9cd 3300 	strd	r3, r3, [sp]
   189a6:	aa02      	add	r2, sp, #8
   189a8:	4639      	mov	r1, r7
   189aa:	4630      	mov	r0, r6
   189ac:	f000 f93e 	bl	18c2c <SetDataBuffersInfo>
   189b0:	2800      	cmp	r0, #0
   189b2:	d1f2      	bne.n	1899a <mbedtls_sha_update_internal+0x66>
   189b4:	a902      	add	r1, sp, #8
   189b6:	463a      	mov	r2, r7
   189b8:	4628      	mov	r0, r5
   189ba:	f000 f995 	bl	18ce8 <ProcessHashDrv>
   189be:	2800      	cmp	r0, #0
   189c0:	d1eb      	bne.n	1899a <mbedtls_sha_update_internal+0x66>
   189c2:	1be4      	subs	r4, r4, r7
   189c4:	443e      	add	r6, r7
   189c6:	2c00      	cmp	r4, #0
   189c8:	d0d1      	beq.n	1896e <mbedtls_sha_update_internal+0x3a>
   189ca:	6e28      	ldr	r0, [r5, #96]	; 0x60
   189cc:	3019      	adds	r0, #25
   189ce:	4622      	mov	r2, r4
   189d0:	4631      	mov	r1, r6
   189d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   189d6:	f000 f881 	bl	18adc <CC_PalMemCopyPlat>
   189da:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   189dc:	4422      	add	r2, r4
   189de:	662a      	str	r2, [r5, #96]	; 0x60
   189e0:	e7c5      	b.n	1896e <mbedtls_sha_update_internal+0x3a>
   189e2:	2001      	movs	r0, #1
   189e4:	4770      	bx	lr
   189e6:	f105 0364 	add.w	r3, r5, #100	; 0x64
   189ea:	4418      	add	r0, r3
   189ec:	463a      	mov	r2, r7
   189ee:	f000 f875 	bl	18adc <CC_PalMemCopyPlat>
   189f2:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   189f6:	4438      	add	r0, r7
   189f8:	443e      	add	r6, r7
   189fa:	1be4      	subs	r4, r4, r7
   189fc:	6628      	str	r0, [r5, #96]	; 0x60
   189fe:	e7ae      	b.n	1895e <mbedtls_sha_update_internal+0x2a>
   18a00:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   18a02:	a902      	add	r1, sp, #8
   18a04:	4628      	mov	r0, r5
   18a06:	f000 f96f 	bl	18ce8 <ProcessHashDrv>
   18a0a:	2800      	cmp	r0, #0
   18a0c:	d1c5      	bne.n	1899a <mbedtls_sha_update_internal+0x66>
   18a0e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   18a10:	6628      	str	r0, [r5, #96]	; 0x60
   18a12:	e7a6      	b.n	18962 <mbedtls_sha_update_internal+0x2e>

00018a14 <cc_mbedtls_sha256>:
   18a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a16:	461c      	mov	r4, r3
   18a18:	4605      	mov	r5, r0
   18a1a:	4811      	ldr	r0, [pc, #68]	; (18a60 <cc_mbedtls_sha256+0x4c>)
   18a1c:	460e      	mov	r6, r1
   18a1e:	4617      	mov	r7, r2
   18a20:	f7ff feca 	bl	187b8 <cc_mbedtls_sha256_init>
   18a24:	4621      	mov	r1, r4
   18a26:	480e      	ldr	r0, [pc, #56]	; (18a60 <cc_mbedtls_sha256+0x4c>)
   18a28:	f7ff fee0 	bl	187ec <cc_mbedtls_sha256_starts>
   18a2c:	4604      	mov	r4, r0
   18a2e:	b120      	cbz	r0, 18a3a <cc_mbedtls_sha256+0x26>
   18a30:	480b      	ldr	r0, [pc, #44]	; (18a60 <cc_mbedtls_sha256+0x4c>)
   18a32:	f7ff fed5 	bl	187e0 <cc_mbedtls_sha256_free>
   18a36:	4620      	mov	r0, r4
   18a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a3a:	4809      	ldr	r0, [pc, #36]	; (18a60 <cc_mbedtls_sha256+0x4c>)
   18a3c:	4632      	mov	r2, r6
   18a3e:	4629      	mov	r1, r5
   18a40:	f7ff fee8 	bl	18814 <cc_mbedtls_sha256_update>
   18a44:	4604      	mov	r4, r0
   18a46:	2800      	cmp	r0, #0
   18a48:	d1f2      	bne.n	18a30 <cc_mbedtls_sha256+0x1c>
   18a4a:	4639      	mov	r1, r7
   18a4c:	4804      	ldr	r0, [pc, #16]	; (18a60 <cc_mbedtls_sha256+0x4c>)
   18a4e:	f7ff ff0b 	bl	18868 <cc_mbedtls_sha256_finish>
   18a52:	4604      	mov	r4, r0
   18a54:	4802      	ldr	r0, [pc, #8]	; (18a60 <cc_mbedtls_sha256+0x4c>)
   18a56:	f7ff fec3 	bl	187e0 <cc_mbedtls_sha256_free>
   18a5a:	4620      	mov	r0, r4
   18a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a5e:	bf00      	nop
   18a60:	20002c9c 	.word	0x20002c9c

00018a64 <RNG_PLAT_SetUserRngParameters>:
   18a64:	b530      	push	{r4, r5, lr}
   18a66:	b083      	sub	sp, #12
   18a68:	231c      	movs	r3, #28
   18a6a:	a901      	add	r1, sp, #4
   18a6c:	4604      	mov	r4, r0
   18a6e:	9301      	str	r3, [sp, #4]
   18a70:	f000 f83c 	bl	18aec <CC_PalTrngParamGet>
   18a74:	4605      	mov	r5, r0
   18a76:	b938      	cbnz	r0, 18a88 <RNG_PLAT_SetUserRngParameters+0x24>
   18a78:	9b01      	ldr	r3, [sp, #4]
   18a7a:	2b1c      	cmp	r3, #28
   18a7c:	d007      	beq.n	18a8e <RNG_PLAT_SetUserRngParameters+0x2a>
   18a7e:	4d15      	ldr	r5, [pc, #84]	; (18ad4 <RNG_PLAT_SetUserRngParameters+0x70>)
   18a80:	4620      	mov	r0, r4
   18a82:	211c      	movs	r1, #28
   18a84:	f000 f82e 	bl	18ae4 <CC_PalMemSetZeroPlat>
   18a88:	4628      	mov	r0, r5
   18a8a:	b003      	add	sp, #12
   18a8c:	bd30      	pop	{r4, r5, pc}
   18a8e:	e9d4 3200 	ldrd	r3, r2, [r4]
   18a92:	2101      	movs	r1, #1
   18a94:	3b00      	subs	r3, #0
   18a96:	bf18      	it	ne
   18a98:	2301      	movne	r3, #1
   18a9a:	61e1      	str	r1, [r4, #28]
   18a9c:	b10a      	cbz	r2, 18aa2 <RNG_PLAT_SetUserRngParameters+0x3e>
   18a9e:	f043 0302 	orr.w	r3, r3, #2
   18aa2:	68a2      	ldr	r2, [r4, #8]
   18aa4:	b932      	cbnz	r2, 18ab4 <RNG_PLAT_SetUserRngParameters+0x50>
   18aa6:	68e2      	ldr	r2, [r4, #12]
   18aa8:	b942      	cbnz	r2, 18abc <RNG_PLAT_SetUserRngParameters+0x58>
   18aaa:	e9c4 3208 	strd	r3, r2, [r4, #32]
   18aae:	b97b      	cbnz	r3, 18ad0 <RNG_PLAT_SetUserRngParameters+0x6c>
   18ab0:	4d09      	ldr	r5, [pc, #36]	; (18ad8 <RNG_PLAT_SetUserRngParameters+0x74>)
   18ab2:	e7e5      	b.n	18a80 <RNG_PLAT_SetUserRngParameters+0x1c>
   18ab4:	68e2      	ldr	r2, [r4, #12]
   18ab6:	f043 0304 	orr.w	r3, r3, #4
   18aba:	b13a      	cbz	r2, 18acc <RNG_PLAT_SetUserRngParameters+0x68>
   18abc:	f043 0308 	orr.w	r3, r3, #8
   18ac0:	2200      	movs	r2, #0
   18ac2:	4628      	mov	r0, r5
   18ac4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   18ac8:	b003      	add	sp, #12
   18aca:	bd30      	pop	{r4, r5, pc}
   18acc:	e9c4 3208 	strd	r3, r2, [r4, #32]
   18ad0:	4615      	mov	r5, r2
   18ad2:	e7d9      	b.n	18a88 <RNG_PLAT_SetUserRngParameters+0x24>
   18ad4:	00f00c37 	.word	0x00f00c37
   18ad8:	00f00c0e 	.word	0x00f00c0e

00018adc <CC_PalMemCopyPlat>:
   18adc:	f002 b80b 	b.w	1aaf6 <memmove>

00018ae0 <CC_PalMemSetPlat>:
   18ae0:	f002 b843 	b.w	1ab6a <memset>

00018ae4 <CC_PalMemSetZeroPlat>:
   18ae4:	460a      	mov	r2, r1
   18ae6:	2100      	movs	r1, #0
   18ae8:	f002 b83f 	b.w	1ab6a <memset>

00018aec <CC_PalTrngParamGet>:
   18aec:	b118      	cbz	r0, 18af6 <CC_PalTrngParamGet+0xa>
   18aee:	b111      	cbz	r1, 18af6 <CC_PalTrngParamGet+0xa>
   18af0:	680b      	ldr	r3, [r1, #0]
   18af2:	2b1c      	cmp	r3, #28
   18af4:	d001      	beq.n	18afa <CC_PalTrngParamGet+0xe>
   18af6:	2001      	movs	r0, #1
   18af8:	4770      	bx	lr
   18afa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18afe:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   18b02:	3201      	adds	r2, #1
   18b04:	bf14      	ite	ne
   18b06:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   18b0a:	f241 225c 	movweq	r2, #4700	; 0x125c
   18b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b12:	6002      	str	r2, [r0, #0]
   18b14:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   18b18:	3201      	adds	r2, #1
   18b1a:	bf14      	ite	ne
   18b1c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   18b20:	f641 1264 	movweq	r2, #6500	; 0x1964
   18b24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b28:	6042      	str	r2, [r0, #4]
   18b2a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   18b2e:	3201      	adds	r2, #1
   18b30:	bf14      	ite	ne
   18b32:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   18b36:	f640 62d8 	movweq	r2, #3800	; 0xed8
   18b3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b3e:	6082      	str	r2, [r0, #8]
   18b40:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   18b44:	3201      	adds	r2, #1
   18b46:	bf14      	ite	ne
   18b48:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   18b4c:	f241 3288 	movweq	r2, #5000	; 0x1388
   18b50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b54:	60c2      	str	r2, [r0, #12]
   18b56:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   18b5a:	3201      	adds	r2, #1
   18b5c:	bf14      	ite	ne
   18b5e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   18b62:	2290      	moveq	r2, #144	; 0x90
   18b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b68:	6102      	str	r2, [r0, #16]
   18b6a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   18b6e:	3201      	adds	r2, #1
   18b70:	bf14      	ite	ne
   18b72:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   18b76:	2251      	moveq	r2, #81	; 0x51
   18b78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b7c:	6142      	str	r2, [r0, #20]
   18b7e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   18b82:	3201      	adds	r2, #1
   18b84:	bf14      	ite	ne
   18b86:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   18b8a:	f240 3337 	movweq	r3, #823	; 0x337
   18b8e:	6183      	str	r3, [r0, #24]
   18b90:	2000      	movs	r0, #0
   18b92:	4770      	bx	lr

00018b94 <LLF_RND_WaitRngInterrupt>:
   18b94:	b508      	push	{r3, lr}
   18b96:	4601      	mov	r1, r0
   18b98:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18b9c:	f7ff f95a 	bl	17e54 <CC_HalWaitInterruptRND>
   18ba0:	4902      	ldr	r1, [pc, #8]	; (18bac <LLF_RND_WaitRngInterrupt+0x18>)
   18ba2:	4a03      	ldr	r2, [pc, #12]	; (18bb0 <LLF_RND_WaitRngInterrupt+0x1c>)
   18ba4:	2300      	movs	r3, #0
   18ba6:	600b      	str	r3, [r1, #0]
   18ba8:	6013      	str	r3, [r2, #0]
   18baa:	bd08      	pop	{r3, pc}
   18bac:	5002b1c8 	.word	0x5002b1c8
   18bb0:	5002b12c 	.word	0x5002b12c

00018bb4 <LLF_RND_GetRoscSampleCnt>:
   18bb4:	3801      	subs	r0, #1
   18bb6:	2807      	cmp	r0, #7
   18bb8:	d805      	bhi.n	18bc6 <LLF_RND_GetRoscSampleCnt+0x12>
   18bba:	e8df f000 	tbb	[pc, r0]
   18bbe:	0e0a      	.short	0x0e0a
   18bc0:	04041204 	.word	0x04041204
   18bc4:	0604      	.short	0x0604
   18bc6:	4809      	ldr	r0, [pc, #36]	; (18bec <LLF_RND_GetRoscSampleCnt+0x38>)
   18bc8:	4770      	bx	lr
   18bca:	68cb      	ldr	r3, [r1, #12]
   18bcc:	624b      	str	r3, [r1, #36]	; 0x24
   18bce:	2000      	movs	r0, #0
   18bd0:	4770      	bx	lr
   18bd2:	680b      	ldr	r3, [r1, #0]
   18bd4:	624b      	str	r3, [r1, #36]	; 0x24
   18bd6:	2000      	movs	r0, #0
   18bd8:	4770      	bx	lr
   18bda:	684b      	ldr	r3, [r1, #4]
   18bdc:	624b      	str	r3, [r1, #36]	; 0x24
   18bde:	2000      	movs	r0, #0
   18be0:	4770      	bx	lr
   18be2:	688b      	ldr	r3, [r1, #8]
   18be4:	624b      	str	r3, [r1, #36]	; 0x24
   18be6:	2000      	movs	r0, #0
   18be8:	4770      	bx	lr
   18bea:	bf00      	nop
   18bec:	00f10c31 	.word	0x00f10c31

00018bf0 <LLF_RND_GetFastestRosc>:
   18bf0:	680b      	ldr	r3, [r1, #0]
   18bf2:	e002      	b.n	18bfa <LLF_RND_GetFastestRosc+0xa>
   18bf4:	2b08      	cmp	r3, #8
   18bf6:	600b      	str	r3, [r1, #0]
   18bf8:	d806      	bhi.n	18c08 <LLF_RND_GetFastestRosc+0x18>
   18bfa:	6a02      	ldr	r2, [r0, #32]
   18bfc:	4213      	tst	r3, r2
   18bfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18c02:	d0f7      	beq.n	18bf4 <LLF_RND_GetFastestRosc+0x4>
   18c04:	2000      	movs	r0, #0
   18c06:	4770      	bx	lr
   18c08:	4800      	ldr	r0, [pc, #0]	; (18c0c <LLF_RND_GetFastestRosc+0x1c>)
   18c0a:	4770      	bx	lr
   18c0c:	00f10c31 	.word	0x00f10c31

00018c10 <LLF_RND_TurnOffTrng>:
   18c10:	4904      	ldr	r1, [pc, #16]	; (18c24 <LLF_RND_TurnOffTrng+0x14>)
   18c12:	4a05      	ldr	r2, [pc, #20]	; (18c28 <LLF_RND_TurnOffTrng+0x18>)
   18c14:	2300      	movs	r3, #0
   18c16:	600b      	str	r3, [r1, #0]
   18c18:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18c1c:	6013      	str	r3, [r2, #0]
   18c1e:	f7ff b8ff 	b.w	17e20 <CC_HalClearInterruptBit>
   18c22:	bf00      	nop
   18c24:	5002b12c 	.word	0x5002b12c
   18c28:	5002b1c4 	.word	0x5002b1c4

00018c2c <SetDataBuffersInfo>:
   18c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c2e:	b083      	sub	sp, #12
   18c30:	2400      	movs	r4, #0
   18c32:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   18c36:	f88d 4007 	strb.w	r4, [sp, #7]
   18c3a:	d325      	bcc.n	18c88 <SetDataBuffersInfo+0x5c>
   18c3c:	460c      	mov	r4, r1
   18c3e:	4404      	add	r4, r0
   18c40:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   18c44:	4605      	mov	r5, r0
   18c46:	d81f      	bhi.n	18c88 <SetDataBuffersInfo+0x5c>
   18c48:	4617      	mov	r7, r2
   18c4a:	461e      	mov	r6, r3
   18c4c:	2201      	movs	r2, #1
   18c4e:	f10d 0307 	add.w	r3, sp, #7
   18c52:	f000 fe7f 	bl	19954 <CC_PalDataBufferAttrGet>
   18c56:	4604      	mov	r4, r0
   18c58:	b9b0      	cbnz	r0, 18c88 <SetDataBuffersInfo+0x5c>
   18c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18c5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18c60:	603d      	str	r5, [r7, #0]
   18c62:	713b      	strb	r3, [r7, #4]
   18c64:	b192      	cbz	r2, 18c8c <SetDataBuffersInfo+0x60>
   18c66:	b14e      	cbz	r6, 18c7c <SetDataBuffersInfo+0x50>
   18c68:	4602      	mov	r2, r0
   18c6a:	9908      	ldr	r1, [sp, #32]
   18c6c:	f10d 0307 	add.w	r3, sp, #7
   18c70:	4630      	mov	r0, r6
   18c72:	f000 fe6f 	bl	19954 <CC_PalDataBufferAttrGet>
   18c76:	b938      	cbnz	r0, 18c88 <SetDataBuffersInfo+0x5c>
   18c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18c7e:	4620      	mov	r0, r4
   18c80:	6016      	str	r6, [r2, #0]
   18c82:	7113      	strb	r3, [r2, #4]
   18c84:	b003      	add	sp, #12
   18c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c88:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   18c8c:	4620      	mov	r0, r4
   18c8e:	b003      	add	sp, #12
   18c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c92:	bf00      	nop

00018c94 <InitHashDrv>:
   18c94:	b1e8      	cbz	r0, 18cd2 <InitHashDrv+0x3e>
   18c96:	b510      	push	{r4, lr}
   18c98:	6804      	ldr	r4, [r0, #0]
   18c9a:	2c01      	cmp	r4, #1
   18c9c:	d004      	beq.n	18ca8 <InitHashDrv+0x14>
   18c9e:	2c02      	cmp	r4, #2
   18ca0:	d010      	beq.n	18cc4 <InitHashDrv+0x30>
   18ca2:	b144      	cbz	r4, 18cb6 <InitHashDrv+0x22>
   18ca4:	480c      	ldr	r0, [pc, #48]	; (18cd8 <InitHashDrv+0x44>)
   18ca6:	bd10      	pop	{r4, pc}
   18ca8:	490c      	ldr	r1, [pc, #48]	; (18cdc <InitHashDrv+0x48>)
   18caa:	2220      	movs	r2, #32
   18cac:	3008      	adds	r0, #8
   18cae:	f7ff ff15 	bl	18adc <CC_PalMemCopyPlat>
   18cb2:	2000      	movs	r0, #0
   18cb4:	bd10      	pop	{r4, pc}
   18cb6:	490a      	ldr	r1, [pc, #40]	; (18ce0 <InitHashDrv+0x4c>)
   18cb8:	2214      	movs	r2, #20
   18cba:	3008      	adds	r0, #8
   18cbc:	f7ff ff0e 	bl	18adc <CC_PalMemCopyPlat>
   18cc0:	4620      	mov	r0, r4
   18cc2:	bd10      	pop	{r4, pc}
   18cc4:	4907      	ldr	r1, [pc, #28]	; (18ce4 <InitHashDrv+0x50>)
   18cc6:	2220      	movs	r2, #32
   18cc8:	3008      	adds	r0, #8
   18cca:	f7ff ff07 	bl	18adc <CC_PalMemCopyPlat>
   18cce:	2000      	movs	r0, #0
   18cd0:	bd10      	pop	{r4, pc}
   18cd2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   18cd6:	4770      	bx	lr
   18cd8:	00f30001 	.word	0x00f30001
   18cdc:	0001e214 	.word	0x0001e214
   18ce0:	0001e1e0 	.word	0x0001e1e0
   18ce4:	0001e1f4 	.word	0x0001e1f4

00018ce8 <ProcessHashDrv>:
   18ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cec:	2900      	cmp	r1, #0
   18cee:	f000 80ef 	beq.w	18ed0 <ProcessHashDrv+0x1e8>
   18cf2:	4604      	mov	r4, r0
   18cf4:	2800      	cmp	r0, #0
   18cf6:	f000 80ef 	beq.w	18ed8 <ProcessHashDrv+0x1f0>
   18cfa:	6803      	ldr	r3, [r0, #0]
   18cfc:	4617      	mov	r7, r2
   18cfe:	460e      	mov	r6, r1
   18d00:	2b00      	cmp	r3, #0
   18d02:	f000 80b9 	beq.w	18e78 <ProcessHashDrv+0x190>
   18d06:	3b01      	subs	r3, #1
   18d08:	2b01      	cmp	r3, #1
   18d0a:	f200 80cd 	bhi.w	18ea8 <ProcessHashDrv+0x1c0>
   18d0e:	4874      	ldr	r0, [pc, #464]	; (18ee0 <ProcessHashDrv+0x1f8>)
   18d10:	f04f 31ff 	mov.w	r1, #4294967295
   18d14:	f04f 0802 	mov.w	r8, #2
   18d18:	f7ff f92a 	bl	17f70 <CC_PalMutexLock>
   18d1c:	2800      	cmp	r0, #0
   18d1e:	f040 80b5 	bne.w	18e8c <ProcessHashDrv+0x1a4>
   18d22:	2000      	movs	r0, #0
   18d24:	f7ff f954 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   18d28:	4605      	mov	r5, r0
   18d2a:	2800      	cmp	r0, #0
   18d2c:	f040 80b8 	bne.w	18ea0 <ProcessHashDrv+0x1b8>
   18d30:	4a6c      	ldr	r2, [pc, #432]	; (18ee4 <ProcessHashDrv+0x1fc>)
   18d32:	6813      	ldr	r3, [r2, #0]
   18d34:	2b00      	cmp	r3, #0
   18d36:	d1fc      	bne.n	18d32 <ProcessHashDrv+0x4a>
   18d38:	486b      	ldr	r0, [pc, #428]	; (18ee8 <ProcessHashDrv+0x200>)
   18d3a:	6803      	ldr	r3, [r0, #0]
   18d3c:	2b00      	cmp	r3, #0
   18d3e:	d1fc      	bne.n	18d3a <ProcessHashDrv+0x52>
   18d40:	f04f 30ff 	mov.w	r0, #4294967295
   18d44:	f7ff f86c 	bl	17e20 <CC_HalClearInterruptBit>
   18d48:	4b68      	ldr	r3, [pc, #416]	; (18eec <ProcessHashDrv+0x204>)
   18d4a:	6818      	ldr	r0, [r3, #0]
   18d4c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   18d50:	f7ff f874 	bl	17e3c <CC_HalMaskInterrupt>
   18d54:	4866      	ldr	r0, [pc, #408]	; (18ef0 <ProcessHashDrv+0x208>)
   18d56:	4a67      	ldr	r2, [pc, #412]	; (18ef4 <ProcessHashDrv+0x20c>)
   18d58:	4967      	ldr	r1, [pc, #412]	; (18ef8 <ProcessHashDrv+0x210>)
   18d5a:	2301      	movs	r3, #1
   18d5c:	6003      	str	r3, [r0, #0]
   18d5e:	2007      	movs	r0, #7
   18d60:	6010      	str	r0, [r2, #0]
   18d62:	600b      	str	r3, [r1, #0]
   18d64:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   18d68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18d6a:	6013      	str	r3, [r2, #0]
   18d6c:	4b63      	ldr	r3, [pc, #396]	; (18efc <ProcessHashDrv+0x214>)
   18d6e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   18d70:	6051      	str	r1, [r2, #4]
   18d72:	f8c3 8000 	str.w	r8, [r3]
   18d76:	6823      	ldr	r3, [r4, #0]
   18d78:	b15b      	cbz	r3, 18d92 <ProcessHashDrv+0xaa>
   18d7a:	3b01      	subs	r3, #1
   18d7c:	2b01      	cmp	r3, #1
   18d7e:	d817      	bhi.n	18db0 <ProcessHashDrv+0xc8>
   18d80:	4b5f      	ldr	r3, [pc, #380]	; (18f00 <ProcessHashDrv+0x218>)
   18d82:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18d84:	601a      	str	r2, [r3, #0]
   18d86:	6a22      	ldr	r2, [r4, #32]
   18d88:	f843 2c04 	str.w	r2, [r3, #-4]
   18d8c:	69e2      	ldr	r2, [r4, #28]
   18d8e:	f843 2c08 	str.w	r2, [r3, #-8]
   18d92:	4b5c      	ldr	r3, [pc, #368]	; (18f04 <ProcessHashDrv+0x21c>)
   18d94:	69a2      	ldr	r2, [r4, #24]
   18d96:	601a      	str	r2, [r3, #0]
   18d98:	6962      	ldr	r2, [r4, #20]
   18d9a:	f843 2c04 	str.w	r2, [r3, #-4]
   18d9e:	6922      	ldr	r2, [r4, #16]
   18da0:	f843 2c08 	str.w	r2, [r3, #-8]
   18da4:	68e2      	ldr	r2, [r4, #12]
   18da6:	f843 2c0c 	str.w	r2, [r3, #-12]
   18daa:	68a2      	ldr	r2, [r4, #8]
   18dac:	f843 2c10 	str.w	r2, [r3, #-16]
   18db0:	4a55      	ldr	r2, [pc, #340]	; (18f08 <ProcessHashDrv+0x220>)
   18db2:	6813      	ldr	r3, [r2, #0]
   18db4:	2b00      	cmp	r3, #0
   18db6:	d1fc      	bne.n	18db2 <ProcessHashDrv+0xca>
   18db8:	2f00      	cmp	r7, #0
   18dba:	d059      	beq.n	18e70 <ProcessHashDrv+0x188>
   18dbc:	6863      	ldr	r3, [r4, #4]
   18dbe:	2b01      	cmp	r3, #1
   18dc0:	bf04      	itt	eq
   18dc2:	4a52      	ldreq	r2, [pc, #328]	; (18f0c <ProcessHashDrv+0x224>)
   18dc4:	6013      	streq	r3, [r2, #0]
   18dc6:	4a52      	ldr	r2, [pc, #328]	; (18f10 <ProcessHashDrv+0x228>)
   18dc8:	4b52      	ldr	r3, [pc, #328]	; (18f14 <ProcessHashDrv+0x22c>)
   18dca:	6831      	ldr	r1, [r6, #0]
   18dcc:	6011      	str	r1, [r2, #0]
   18dce:	2040      	movs	r0, #64	; 0x40
   18dd0:	601f      	str	r7, [r3, #0]
   18dd2:	f7ff f839 	bl	17e48 <CC_HalWaitInterrupt>
   18dd6:	4605      	mov	r5, r0
   18dd8:	4a4b      	ldr	r2, [pc, #300]	; (18f08 <ProcessHashDrv+0x220>)
   18dda:	6813      	ldr	r3, [r2, #0]
   18ddc:	2b00      	cmp	r3, #0
   18dde:	d1fc      	bne.n	18dda <ProcessHashDrv+0xf2>
   18de0:	4a41      	ldr	r2, [pc, #260]	; (18ee8 <ProcessHashDrv+0x200>)
   18de2:	6813      	ldr	r3, [r2, #0]
   18de4:	2b00      	cmp	r3, #0
   18de6:	d1fc      	bne.n	18de2 <ProcessHashDrv+0xfa>
   18de8:	6823      	ldr	r3, [r4, #0]
   18dea:	b15b      	cbz	r3, 18e04 <ProcessHashDrv+0x11c>
   18dec:	3b01      	subs	r3, #1
   18dee:	2b01      	cmp	r3, #1
   18df0:	d817      	bhi.n	18e22 <ProcessHashDrv+0x13a>
   18df2:	4a43      	ldr	r2, [pc, #268]	; (18f00 <ProcessHashDrv+0x218>)
   18df4:	4b48      	ldr	r3, [pc, #288]	; (18f18 <ProcessHashDrv+0x230>)
   18df6:	6812      	ldr	r2, [r2, #0]
   18df8:	6262      	str	r2, [r4, #36]	; 0x24
   18dfa:	681a      	ldr	r2, [r3, #0]
   18dfc:	6222      	str	r2, [r4, #32]
   18dfe:	3b04      	subs	r3, #4
   18e00:	681b      	ldr	r3, [r3, #0]
   18e02:	61e3      	str	r3, [r4, #28]
   18e04:	4a3f      	ldr	r2, [pc, #252]	; (18f04 <ProcessHashDrv+0x21c>)
   18e06:	4b45      	ldr	r3, [pc, #276]	; (18f1c <ProcessHashDrv+0x234>)
   18e08:	6812      	ldr	r2, [r2, #0]
   18e0a:	61a2      	str	r2, [r4, #24]
   18e0c:	681a      	ldr	r2, [r3, #0]
   18e0e:	6162      	str	r2, [r4, #20]
   18e10:	f853 2c04 	ldr.w	r2, [r3, #-4]
   18e14:	6122      	str	r2, [r4, #16]
   18e16:	f853 2c08 	ldr.w	r2, [r3, #-8]
   18e1a:	60e2      	str	r2, [r4, #12]
   18e1c:	3b0c      	subs	r3, #12
   18e1e:	681b      	ldr	r3, [r3, #0]
   18e20:	60a3      	str	r3, [r4, #8]
   18e22:	4b3f      	ldr	r3, [pc, #252]	; (18f20 <ProcessHashDrv+0x238>)
   18e24:	4a3f      	ldr	r2, [pc, #252]	; (18f24 <ProcessHashDrv+0x23c>)
   18e26:	681b      	ldr	r3, [r3, #0]
   18e28:	64a3      	str	r3, [r4, #72]	; 0x48
   18e2a:	6812      	ldr	r2, [r2, #0]
   18e2c:	4b32      	ldr	r3, [pc, #200]	; (18ef8 <ProcessHashDrv+0x210>)
   18e2e:	64e2      	str	r2, [r4, #76]	; 0x4c
   18e30:	4836      	ldr	r0, [pc, #216]	; (18f0c <ProcessHashDrv+0x224>)
   18e32:	493d      	ldr	r1, [pc, #244]	; (18f28 <ProcessHashDrv+0x240>)
   18e34:	2201      	movs	r2, #1
   18e36:	601a      	str	r2, [r3, #0]
   18e38:	2300      	movs	r3, #0
   18e3a:	4a33      	ldr	r2, [pc, #204]	; (18f08 <ProcessHashDrv+0x220>)
   18e3c:	6003      	str	r3, [r0, #0]
   18e3e:	600b      	str	r3, [r1, #0]
   18e40:	6813      	ldr	r3, [r2, #0]
   18e42:	2b00      	cmp	r3, #0
   18e44:	d1fc      	bne.n	18e40 <ProcessHashDrv+0x158>
   18e46:	4a2a      	ldr	r2, [pc, #168]	; (18ef0 <ProcessHashDrv+0x208>)
   18e48:	6013      	str	r3, [r2, #0]
   18e4a:	2d00      	cmp	r5, #0
   18e4c:	d13a      	bne.n	18ec4 <ProcessHashDrv+0x1dc>
   18e4e:	4b27      	ldr	r3, [pc, #156]	; (18eec <ProcessHashDrv+0x204>)
   18e50:	6818      	ldr	r0, [r3, #0]
   18e52:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   18e56:	f7fe fff1 	bl	17e3c <CC_HalMaskInterrupt>
   18e5a:	2001      	movs	r0, #1
   18e5c:	f7ff f8b8 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   18e60:	bb60      	cbnz	r0, 18ebc <ProcessHashDrv+0x1d4>
   18e62:	481f      	ldr	r0, [pc, #124]	; (18ee0 <ProcessHashDrv+0x1f8>)
   18e64:	f7ff f88c 	bl	17f80 <CC_PalMutexUnlock>
   18e68:	bb10      	cbnz	r0, 18eb0 <ProcessHashDrv+0x1c8>
   18e6a:	4628      	mov	r0, r5
   18e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18e70:	4b2d      	ldr	r3, [pc, #180]	; (18f28 <ProcessHashDrv+0x240>)
   18e72:	2204      	movs	r2, #4
   18e74:	601a      	str	r2, [r3, #0]
   18e76:	e7af      	b.n	18dd8 <ProcessHashDrv+0xf0>
   18e78:	4819      	ldr	r0, [pc, #100]	; (18ee0 <ProcessHashDrv+0x1f8>)
   18e7a:	f04f 31ff 	mov.w	r1, #4294967295
   18e7e:	f04f 0801 	mov.w	r8, #1
   18e82:	f7ff f875 	bl	17f70 <CC_PalMutexLock>
   18e86:	2800      	cmp	r0, #0
   18e88:	f43f af4b 	beq.w	18d22 <ProcessHashDrv+0x3a>
   18e8c:	4827      	ldr	r0, [pc, #156]	; (18f2c <ProcessHashDrv+0x244>)
   18e8e:	f7fe f923 	bl	170d8 <CC_PalAbort>
   18e92:	2000      	movs	r0, #0
   18e94:	f7ff f89c 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   18e98:	4605      	mov	r5, r0
   18e9a:	2800      	cmp	r0, #0
   18e9c:	f43f af48 	beq.w	18d30 <ProcessHashDrv+0x48>
   18ea0:	4823      	ldr	r0, [pc, #140]	; (18f30 <ProcessHashDrv+0x248>)
   18ea2:	f7fe f919 	bl	170d8 <CC_PalAbort>
   18ea6:	e743      	b.n	18d30 <ProcessHashDrv+0x48>
   18ea8:	4d22      	ldr	r5, [pc, #136]	; (18f34 <ProcessHashDrv+0x24c>)
   18eaa:	4628      	mov	r0, r5
   18eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18eb0:	4821      	ldr	r0, [pc, #132]	; (18f38 <ProcessHashDrv+0x250>)
   18eb2:	f7fe f911 	bl	170d8 <CC_PalAbort>
   18eb6:	4628      	mov	r0, r5
   18eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ebc:	481f      	ldr	r0, [pc, #124]	; (18f3c <ProcessHashDrv+0x254>)
   18ebe:	f7fe f90b 	bl	170d8 <CC_PalAbort>
   18ec2:	e7ce      	b.n	18e62 <ProcessHashDrv+0x17a>
   18ec4:	f104 0008 	add.w	r0, r4, #8
   18ec8:	2110      	movs	r1, #16
   18eca:	f7ff fe0b 	bl	18ae4 <CC_PalMemSetZeroPlat>
   18ece:	e7be      	b.n	18e4e <ProcessHashDrv+0x166>
   18ed0:	4d1b      	ldr	r5, [pc, #108]	; (18f40 <ProcessHashDrv+0x258>)
   18ed2:	4628      	mov	r0, r5
   18ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ed8:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   18edc:	e7c5      	b.n	18e6a <ProcessHashDrv+0x182>
   18ede:	bf00      	nop
   18ee0:	20000518 	.word	0x20000518
   18ee4:	5002b91c 	.word	0x5002b91c
   18ee8:	5002bc20 	.word	0x5002bc20
   18eec:	5002ba04 	.word	0x5002ba04
   18ef0:	5002b818 	.word	0x5002b818
   18ef4:	5002b900 	.word	0x5002b900
   18ef8:	5002b7c4 	.word	0x5002b7c4
   18efc:	5002b7c0 	.word	0x5002b7c0
   18f00:	5002b65c 	.word	0x5002b65c
   18f04:	5002b650 	.word	0x5002b650
   18f08:	5002b910 	.word	0x5002b910
   18f0c:	5002b684 	.word	0x5002b684
   18f10:	5002bc28 	.word	0x5002bc28
   18f14:	5002bc2c 	.word	0x5002bc2c
   18f18:	5002b658 	.word	0x5002b658
   18f1c:	5002b64c 	.word	0x5002b64c
   18f20:	5002b7cc 	.word	0x5002b7cc
   18f24:	5002b7d0 	.word	0x5002b7d0
   18f28:	5002b7c8 	.word	0x5002b7c8
   18f2c:	0001e114 	.word	0x0001e114
   18f30:	0001e12c 	.word	0x0001e12c
   18f34:	00f30001 	.word	0x00f30001
   18f38:	0001e16c 	.word	0x0001e16c
   18f3c:	0001e14c 	.word	0x0001e14c
   18f40:	00f30003 	.word	0x00f30003

00018f44 <FinishHashDrv>:
   18f44:	2800      	cmp	r0, #0
   18f46:	d03b      	beq.n	18fc0 <FinishHashDrv+0x7c>
   18f48:	b4f0      	push	{r4, r5, r6, r7}
   18f4a:	b082      	sub	sp, #8
   18f4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   18f4e:	9301      	str	r3, [sp, #4]
   18f50:	6883      	ldr	r3, [r0, #8]
   18f52:	fa93 fc83 	rev.w	ip, r3
   18f56:	9b01      	ldr	r3, [sp, #4]
   18f58:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   18f5c:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   18f60:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   18f64:	ba1b      	rev	r3, r3
   18f66:	6243      	str	r3, [r0, #36]	; 0x24
   18f68:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18f6a:	9301      	str	r3, [sp, #4]
   18f6c:	ba09      	rev	r1, r1
   18f6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   18f70:	61c1      	str	r1, [r0, #28]
   18f72:	ba12      	rev	r2, r2
   18f74:	6202      	str	r2, [r0, #32]
   18f76:	ba3f      	rev	r7, r7
   18f78:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   18f7c:	ba36      	rev	r6, r6
   18f7e:	ba2d      	rev	r5, r5
   18f80:	ba24      	rev	r4, r4
   18f82:	e9c0 c702 	strd	ip, r7, [r0, #8]
   18f86:	e9c0 6504 	strd	r6, r5, [r0, #16]
   18f8a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   18f8c:	6b06      	ldr	r6, [r0, #48]	; 0x30
   18f8e:	6b45      	ldr	r5, [r0, #52]	; 0x34
   18f90:	6184      	str	r4, [r0, #24]
   18f92:	fa93 fc83 	rev.w	ip, r3
   18f96:	6b84      	ldr	r4, [r0, #56]	; 0x38
   18f98:	9b01      	ldr	r3, [sp, #4]
   18f9a:	ba3f      	rev	r7, r7
   18f9c:	ba36      	rev	r6, r6
   18f9e:	ba2d      	rev	r5, r5
   18fa0:	ba24      	rev	r4, r4
   18fa2:	ba09      	rev	r1, r1
   18fa4:	ba12      	rev	r2, r2
   18fa6:	ba1b      	rev	r3, r3
   18fa8:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   18fac:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   18fb0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   18fb4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   18fb8:	2000      	movs	r0, #0
   18fba:	b002      	add	sp, #8
   18fbc:	bcf0      	pop	{r4, r5, r6, r7}
   18fbe:	4770      	bx	lr
   18fc0:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   18fc4:	4770      	bx	lr
   18fc6:	bf00      	nop

00018fc8 <LoadAesKey>:
   18fc8:	2800      	cmp	r0, #0
   18fca:	d03b      	beq.n	19044 <LoadAesKey+0x7c>
   18fcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   18fd0:	2b00      	cmp	r3, #0
   18fd2:	d02c      	beq.n	1902e <LoadAesKey+0x66>
   18fd4:	2b03      	cmp	r3, #3
   18fd6:	b510      	push	{r4, lr}
   18fd8:	d00f      	beq.n	18ffa <LoadAesKey+0x32>
   18fda:	481c      	ldr	r0, [pc, #112]	; (1904c <LoadAesKey+0x84>)
   18fdc:	4c1c      	ldr	r4, [pc, #112]	; (19050 <LoadAesKey+0x88>)
   18fde:	6822      	ldr	r2, [r4, #0]
   18fe0:	4b1c      	ldr	r3, [pc, #112]	; (19054 <LoadAesKey+0x8c>)
   18fe2:	6812      	ldr	r2, [r2, #0]
   18fe4:	601a      	str	r2, [r3, #0]
   18fe6:	6822      	ldr	r2, [r4, #0]
   18fe8:	6852      	ldr	r2, [r2, #4]
   18fea:	605a      	str	r2, [r3, #4]
   18fec:	6822      	ldr	r2, [r4, #0]
   18fee:	6892      	ldr	r2, [r2, #8]
   18ff0:	609a      	str	r2, [r3, #8]
   18ff2:	6822      	ldr	r2, [r4, #0]
   18ff4:	68d2      	ldr	r2, [r2, #12]
   18ff6:	60da      	str	r2, [r3, #12]
   18ff8:	bd10      	pop	{r4, pc}
   18ffa:	6b01      	ldr	r1, [r0, #48]	; 0x30
   18ffc:	6c00      	ldr	r0, [r0, #64]	; 0x40
   18ffe:	4c14      	ldr	r4, [pc, #80]	; (19050 <LoadAesKey+0x88>)
   19000:	f000 fba4 	bl	1974c <kmu_validate_kdr_slot_and_size>
   19004:	2800      	cmp	r0, #0
   19006:	d1ea      	bne.n	18fde <LoadAesKey+0x16>
   19008:	6821      	ldr	r1, [r4, #0]
   1900a:	4a12      	ldr	r2, [pc, #72]	; (19054 <LoadAesKey+0x8c>)
   1900c:	6809      	ldr	r1, [r1, #0]
   1900e:	6011      	str	r1, [r2, #0]
   19010:	6821      	ldr	r1, [r4, #0]
   19012:	4b11      	ldr	r3, [pc, #68]	; (19058 <LoadAesKey+0x90>)
   19014:	6849      	ldr	r1, [r1, #4]
   19016:	6019      	str	r1, [r3, #0]
   19018:	6821      	ldr	r1, [r4, #0]
   1901a:	6889      	ldr	r1, [r1, #8]
   1901c:	6091      	str	r1, [r2, #8]
   1901e:	6822      	ldr	r2, [r4, #0]
   19020:	68d2      	ldr	r2, [r2, #12]
   19022:	609a      	str	r2, [r3, #8]
   19024:	f000 fb9e 	bl	19764 <kmu_use_kdr_key>
   19028:	2800      	cmp	r0, #0
   1902a:	d1d8      	bne.n	18fde <LoadAesKey+0x16>
   1902c:	bd10      	pop	{r4, pc}
   1902e:	4a09      	ldr	r2, [pc, #36]	; (19054 <LoadAesKey+0x8c>)
   19030:	6901      	ldr	r1, [r0, #16]
   19032:	6011      	str	r1, [r2, #0]
   19034:	6941      	ldr	r1, [r0, #20]
   19036:	6051      	str	r1, [r2, #4]
   19038:	6981      	ldr	r1, [r0, #24]
   1903a:	6091      	str	r1, [r2, #8]
   1903c:	69c1      	ldr	r1, [r0, #28]
   1903e:	60d1      	str	r1, [r2, #12]
   19040:	4618      	mov	r0, r3
   19042:	4770      	bx	lr
   19044:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   19048:	4770      	bx	lr
   1904a:	bf00      	nop
   1904c:	00f10009 	.word	0x00f10009
   19050:	20000508 	.word	0x20000508
   19054:	5002b400 	.word	0x5002b400
   19058:	5002b404 	.word	0x5002b404

0001905c <InitAes.part.0>:
   1905c:	4a32      	ldr	r2, [pc, #200]	; (19128 <InitAes.part.0+0xcc>)
   1905e:	b510      	push	{r4, lr}
   19060:	4604      	mov	r4, r0
   19062:	6813      	ldr	r3, [r2, #0]
   19064:	2b00      	cmp	r3, #0
   19066:	d1fc      	bne.n	19062 <InitAes.part.0+0x6>
   19068:	4a30      	ldr	r2, [pc, #192]	; (1912c <InitAes.part.0+0xd0>)
   1906a:	6813      	ldr	r3, [r2, #0]
   1906c:	2b00      	cmp	r3, #0
   1906e:	d1fc      	bne.n	1906a <InitAes.part.0+0xe>
   19070:	4a2f      	ldr	r2, [pc, #188]	; (19130 <InitAes.part.0+0xd4>)
   19072:	6813      	ldr	r3, [r2, #0]
   19074:	2b00      	cmp	r3, #0
   19076:	d1fc      	bne.n	19072 <InitAes.part.0+0x16>
   19078:	4a2e      	ldr	r2, [pc, #184]	; (19134 <InitAes.part.0+0xd8>)
   1907a:	6813      	ldr	r3, [r2, #0]
   1907c:	2b00      	cmp	r3, #0
   1907e:	d1fc      	bne.n	1907a <InitAes.part.0+0x1e>
   19080:	4a2d      	ldr	r2, [pc, #180]	; (19138 <InitAes.part.0+0xdc>)
   19082:	6813      	ldr	r3, [r2, #0]
   19084:	2b00      	cmp	r3, #0
   19086:	d1fc      	bne.n	19082 <InitAes.part.0+0x26>
   19088:	4a2c      	ldr	r2, [pc, #176]	; (1913c <InitAes.part.0+0xe0>)
   1908a:	6813      	ldr	r3, [r2, #0]
   1908c:	2b00      	cmp	r3, #0
   1908e:	d1fc      	bne.n	1908a <InitAes.part.0+0x2e>
   19090:	f04f 30ff 	mov.w	r0, #4294967295
   19094:	f7fe fec4 	bl	17e20 <CC_HalClearInterruptBit>
   19098:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1909a:	f023 0304 	bic.w	r3, r3, #4
   1909e:	2b03      	cmp	r3, #3
   190a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   190a2:	d036      	beq.n	19112 <InitAes.part.0+0xb6>
   190a4:	2b01      	cmp	r3, #1
   190a6:	4b26      	ldr	r3, [pc, #152]	; (19140 <InitAes.part.0+0xe4>)
   190a8:	6818      	ldr	r0, [r3, #0]
   190aa:	bf0c      	ite	eq
   190ac:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   190b0:	f020 0020 	bicne.w	r0, r0, #32
   190b4:	f7fe fec2 	bl	17e3c <CC_HalMaskInterrupt>
   190b8:	4b22      	ldr	r3, [pc, #136]	; (19144 <InitAes.part.0+0xe8>)
   190ba:	4a1b      	ldr	r2, [pc, #108]	; (19128 <InitAes.part.0+0xcc>)
   190bc:	2101      	movs	r1, #1
   190be:	6019      	str	r1, [r3, #0]
   190c0:	6813      	ldr	r3, [r2, #0]
   190c2:	2b00      	cmp	r3, #0
   190c4:	d1fc      	bne.n	190c0 <InitAes.part.0+0x64>
   190c6:	4a19      	ldr	r2, [pc, #100]	; (1912c <InitAes.part.0+0xd0>)
   190c8:	6813      	ldr	r3, [r2, #0]
   190ca:	2b00      	cmp	r3, #0
   190cc:	d1fc      	bne.n	190c8 <InitAes.part.0+0x6c>
   190ce:	491e      	ldr	r1, [pc, #120]	; (19148 <InitAes.part.0+0xec>)
   190d0:	4a15      	ldr	r2, [pc, #84]	; (19128 <InitAes.part.0+0xcc>)
   190d2:	600b      	str	r3, [r1, #0]
   190d4:	6813      	ldr	r3, [r2, #0]
   190d6:	2b00      	cmp	r3, #0
   190d8:	d1fc      	bne.n	190d4 <InitAes.part.0+0x78>
   190da:	4a14      	ldr	r2, [pc, #80]	; (1912c <InitAes.part.0+0xd0>)
   190dc:	6813      	ldr	r3, [r2, #0]
   190de:	2b00      	cmp	r3, #0
   190e0:	d1fc      	bne.n	190dc <InitAes.part.0+0x80>
   190e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   190e4:	f022 0104 	bic.w	r1, r2, #4
   190e8:	2903      	cmp	r1, #3
   190ea:	bf18      	it	ne
   190ec:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   190ee:	4917      	ldr	r1, [pc, #92]	; (1914c <InitAes.part.0+0xf0>)
   190f0:	ea4f 0282 	mov.w	r2, r2, lsl #2
   190f4:	bf18      	it	ne
   190f6:	f003 0301 	andne.w	r3, r3, #1
   190fa:	f002 021c 	and.w	r2, r2, #28
   190fe:	4313      	orrs	r3, r2
   19100:	600b      	str	r3, [r1, #0]
   19102:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19104:	2b07      	cmp	r3, #7
   19106:	d102      	bne.n	1910e <InitAes.part.0+0xb2>
   19108:	4b11      	ldr	r3, [pc, #68]	; (19150 <InitAes.part.0+0xf4>)
   1910a:	2201      	movs	r2, #1
   1910c:	601a      	str	r2, [r3, #0]
   1910e:	2000      	movs	r0, #0
   19110:	bd10      	pop	{r4, pc}
   19112:	2b01      	cmp	r3, #1
   19114:	4b0a      	ldr	r3, [pc, #40]	; (19140 <InitAes.part.0+0xe4>)
   19116:	6818      	ldr	r0, [r3, #0]
   19118:	bf0c      	ite	eq
   1911a:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1911e:	f020 0010 	bicne.w	r0, r0, #16
   19122:	f7fe fe8b 	bl	17e3c <CC_HalMaskInterrupt>
   19126:	e7c7      	b.n	190b8 <InitAes.part.0+0x5c>
   19128:	5002b910 	.word	0x5002b910
   1912c:	5002b470 	.word	0x5002b470
   19130:	5002bd20 	.word	0x5002bd20
   19134:	5002bc20 	.word	0x5002bc20
   19138:	5002bd38 	.word	0x5002bd38
   1913c:	5002bc38 	.word	0x5002bc38
   19140:	5002ba04 	.word	0x5002ba04
   19144:	5002b900 	.word	0x5002b900
   19148:	5002b4bc 	.word	0x5002b4bc
   1914c:	5002b4c0 	.word	0x5002b4c0
   19150:	5002b47c 	.word	0x5002b47c

00019154 <ProcessAesDrv>:
   19154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19158:	b087      	sub	sp, #28
   1915a:	2900      	cmp	r1, #0
   1915c:	f000 80a5 	beq.w	192aa <ProcessAesDrv+0x156>
   19160:	4616      	mov	r6, r2
   19162:	2a00      	cmp	r2, #0
   19164:	f000 80a1 	beq.w	192aa <ProcessAesDrv+0x156>
   19168:	4604      	mov	r4, r0
   1916a:	2800      	cmp	r0, #0
   1916c:	f000 813f 	beq.w	193ee <ProcessAesDrv+0x29a>
   19170:	461f      	mov	r7, r3
   19172:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   19174:	460d      	mov	r5, r1
   19176:	2b00      	cmp	r3, #0
   19178:	d150      	bne.n	1921c <ProcessAesDrv+0xc8>
   1917a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1917e:	d252      	bcs.n	19226 <ProcessAesDrv+0xd2>
   19180:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   19184:	2b04      	cmp	r3, #4
   19186:	f000 8109 	beq.w	1939c <ProcessAesDrv+0x248>
   1918a:	f04f 0800 	mov.w	r8, #0
   1918e:	48aa      	ldr	r0, [pc, #680]	; (19438 <ProcessAesDrv+0x2e4>)
   19190:	f04f 31ff 	mov.w	r1, #4294967295
   19194:	f7fe feec 	bl	17f70 <CC_PalMutexLock>
   19198:	2800      	cmp	r0, #0
   1919a:	f040 80de 	bne.w	1935a <ProcessAesDrv+0x206>
   1919e:	2000      	movs	r0, #0
   191a0:	f7fe ff16 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   191a4:	2800      	cmp	r0, #0
   191a6:	f040 80e1 	bne.w	1936c <ProcessAesDrv+0x218>
   191aa:	4ba4      	ldr	r3, [pc, #656]	; (1943c <ProcessAesDrv+0x2e8>)
   191ac:	4aa4      	ldr	r2, [pc, #656]	; (19440 <ProcessAesDrv+0x2ec>)
   191ae:	2101      	movs	r1, #1
   191b0:	6019      	str	r1, [r3, #0]
   191b2:	6813      	ldr	r3, [r2, #0]
   191b4:	2b00      	cmp	r3, #0
   191b6:	d1fc      	bne.n	191b2 <ProcessAesDrv+0x5e>
   191b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   191ba:	2b03      	cmp	r3, #3
   191bc:	dc39      	bgt.n	19232 <ProcessAesDrv+0xde>
   191be:	2b00      	cmp	r3, #0
   191c0:	da3a      	bge.n	19238 <ProcessAesDrv+0xe4>
   191c2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1948c <ProcessAesDrv+0x338>
   191c6:	4a9e      	ldr	r2, [pc, #632]	; (19440 <ProcessAesDrv+0x2ec>)
   191c8:	6813      	ldr	r3, [r2, #0]
   191ca:	2b00      	cmp	r3, #0
   191cc:	d1fc      	bne.n	191c8 <ProcessAesDrv+0x74>
   191ce:	f1b8 0f00 	cmp.w	r8, #0
   191d2:	f040 80da 	bne.w	1938a <ProcessAesDrv+0x236>
   191d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   191d8:	f023 0304 	bic.w	r3, r3, #4
   191dc:	2b03      	cmp	r3, #3
   191de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   191e0:	d058      	beq.n	19294 <ProcessAesDrv+0x140>
   191e2:	2b01      	cmp	r3, #1
   191e4:	4b97      	ldr	r3, [pc, #604]	; (19444 <ProcessAesDrv+0x2f0>)
   191e6:	6818      	ldr	r0, [r3, #0]
   191e8:	bf0c      	ite	eq
   191ea:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   191ee:	f040 0020 	orrne.w	r0, r0, #32
   191f2:	f7fe fe23 	bl	17e3c <CC_HalMaskInterrupt>
   191f6:	4b91      	ldr	r3, [pc, #580]	; (1943c <ProcessAesDrv+0x2e8>)
   191f8:	2200      	movs	r2, #0
   191fa:	601a      	str	r2, [r3, #0]
   191fc:	2001      	movs	r0, #1
   191fe:	f7fe fee7 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   19202:	2800      	cmp	r0, #0
   19204:	f040 80bd 	bne.w	19382 <ProcessAesDrv+0x22e>
   19208:	488b      	ldr	r0, [pc, #556]	; (19438 <ProcessAesDrv+0x2e4>)
   1920a:	f7fe feb9 	bl	17f80 <CC_PalMutexUnlock>
   1920e:	2800      	cmp	r0, #0
   19210:	f040 80b0 	bne.w	19374 <ProcessAesDrv+0x220>
   19214:	4648      	mov	r0, r9
   19216:	b007      	add	sp, #28
   19218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1921c:	2b01      	cmp	r3, #1
   1921e:	d1af      	bne.n	19180 <ProcessAesDrv+0x2c>
   19220:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   19224:	d3ac      	bcc.n	19180 <ProcessAesDrv+0x2c>
   19226:	f8df 9268 	ldr.w	r9, [pc, #616]	; 19490 <ProcessAesDrv+0x33c>
   1922a:	4648      	mov	r0, r9
   1922c:	b007      	add	sp, #28
   1922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19232:	3b06      	subs	r3, #6
   19234:	2b01      	cmp	r3, #1
   19236:	d8c4      	bhi.n	191c2 <ProcessAesDrv+0x6e>
   19238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1923a:	2b01      	cmp	r3, #1
   1923c:	f200 80d4 	bhi.w	193e8 <ProcessAesDrv+0x294>
   19240:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19242:	2b01      	cmp	r3, #1
   19244:	d837      	bhi.n	192b6 <ProcessAesDrv+0x162>
   19246:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19248:	2b01      	cmp	r3, #1
   1924a:	f200 8131 	bhi.w	194b0 <ProcessAesDrv+0x35c>
   1924e:	4620      	mov	r0, r4
   19250:	f7ff ff04 	bl	1905c <InitAes.part.0>
   19254:	4681      	mov	r9, r0
   19256:	2800      	cmp	r0, #0
   19258:	d1b5      	bne.n	191c6 <ProcessAesDrv+0x72>
   1925a:	4620      	mov	r0, r4
   1925c:	f7ff feb4 	bl	18fc8 <LoadAesKey>
   19260:	4681      	mov	r9, r0
   19262:	2800      	cmp	r0, #0
   19264:	d1af      	bne.n	191c6 <ProcessAesDrv+0x72>
   19266:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19268:	2b07      	cmp	r3, #7
   1926a:	d8aa      	bhi.n	191c2 <ProcessAesDrv+0x6e>
   1926c:	a201      	add	r2, pc, #4	; (adr r2, 19274 <ProcessAesDrv+0x120>)
   1926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19272:	bf00      	nop
   19274:	000192d1 	.word	0x000192d1
   19278:	000192bd 	.word	0x000192bd
   1927c:	0001942d 	.word	0x0001942d
   19280:	000192bd 	.word	0x000192bd
   19284:	000191c3 	.word	0x000191c3
   19288:	000191c3 	.word	0x000191c3
   1928c:	0001942d 	.word	0x0001942d
   19290:	000192bd 	.word	0x000192bd
   19294:	2b01      	cmp	r3, #1
   19296:	4b6b      	ldr	r3, [pc, #428]	; (19444 <ProcessAesDrv+0x2f0>)
   19298:	6818      	ldr	r0, [r3, #0]
   1929a:	bf0c      	ite	eq
   1929c:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   192a0:	f040 0010 	orrne.w	r0, r0, #16
   192a4:	f7fe fdca 	bl	17e3c <CC_HalMaskInterrupt>
   192a8:	e7a5      	b.n	191f6 <ProcessAesDrv+0xa2>
   192aa:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 19494 <ProcessAesDrv+0x340>
   192ae:	4648      	mov	r0, r9
   192b0:	b007      	add	sp, #28
   192b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192b6:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 19498 <ProcessAesDrv+0x344>
   192ba:	e784      	b.n	191c6 <ProcessAesDrv+0x72>
   192bc:	4b62      	ldr	r3, [pc, #392]	; (19448 <ProcessAesDrv+0x2f4>)
   192be:	6822      	ldr	r2, [r4, #0]
   192c0:	601a      	str	r2, [r3, #0]
   192c2:	6862      	ldr	r2, [r4, #4]
   192c4:	605a      	str	r2, [r3, #4]
   192c6:	68a2      	ldr	r2, [r4, #8]
   192c8:	609a      	str	r2, [r3, #8]
   192ca:	68e2      	ldr	r2, [r4, #12]
   192cc:	60da      	str	r2, [r3, #12]
   192ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   192d0:	682a      	ldr	r2, [r5, #0]
   192d2:	f023 0304 	bic.w	r3, r3, #4
   192d6:	2b03      	cmp	r3, #3
   192d8:	d009      	beq.n	192ee <ProcessAesDrv+0x19a>
   192da:	6e21      	ldr	r1, [r4, #96]	; 0x60
   192dc:	6833      	ldr	r3, [r6, #0]
   192de:	2901      	cmp	r1, #1
   192e0:	bf07      	ittee	eq
   192e2:	485a      	ldreq	r0, [pc, #360]	; (1944c <ProcessAesDrv+0x2f8>)
   192e4:	495a      	ldreq	r1, [pc, #360]	; (19450 <ProcessAesDrv+0x2fc>)
   192e6:	485b      	ldrne	r0, [pc, #364]	; (19454 <ProcessAesDrv+0x300>)
   192e8:	495b      	ldrne	r1, [pc, #364]	; (19458 <ProcessAesDrv+0x304>)
   192ea:	6003      	str	r3, [r0, #0]
   192ec:	600f      	str	r7, [r1, #0]
   192ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   192f0:	2b01      	cmp	r3, #1
   192f2:	bf0b      	itete	eq
   192f4:	4b59      	ldreq	r3, [pc, #356]	; (1945c <ProcessAesDrv+0x308>)
   192f6:	4b5a      	ldrne	r3, [pc, #360]	; (19460 <ProcessAesDrv+0x30c>)
   192f8:	495a      	ldreq	r1, [pc, #360]	; (19464 <ProcessAesDrv+0x310>)
   192fa:	495b      	ldrne	r1, [pc, #364]	; (19468 <ProcessAesDrv+0x314>)
   192fc:	600a      	str	r2, [r1, #0]
   192fe:	601f      	str	r7, [r3, #0]
   19300:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19302:	f023 0304 	bic.w	r3, r3, #4
   19306:	2b03      	cmp	r3, #3
   19308:	d074      	beq.n	193f4 <ProcessAesDrv+0x2a0>
   1930a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1930c:	2b01      	cmp	r3, #1
   1930e:	bf0c      	ite	eq
   19310:	2080      	moveq	r0, #128	; 0x80
   19312:	2020      	movne	r0, #32
   19314:	f7fe fd98 	bl	17e48 <CC_HalWaitInterrupt>
   19318:	4681      	mov	r9, r0
   1931a:	2800      	cmp	r0, #0
   1931c:	f47f af53 	bne.w	191c6 <ProcessAesDrv+0x72>
   19320:	4b47      	ldr	r3, [pc, #284]	; (19440 <ProcessAesDrv+0x2ec>)
   19322:	681a      	ldr	r2, [r3, #0]
   19324:	2a00      	cmp	r2, #0
   19326:	d1fc      	bne.n	19322 <ProcessAesDrv+0x1ce>
   19328:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1932a:	3b01      	subs	r3, #1
   1932c:	4691      	mov	r9, r2
   1932e:	2b06      	cmp	r3, #6
   19330:	d810      	bhi.n	19354 <ProcessAesDrv+0x200>
   19332:	e8df f003 	tbb	[pc, r3]
   19336:	7d04      	.short	0x7d04
   19338:	7d0f0f04 	.word	0x7d0f0f04
   1933c:	04          	.byte	0x04
   1933d:	00          	.byte	0x00
   1933e:	4a42      	ldr	r2, [pc, #264]	; (19448 <ProcessAesDrv+0x2f4>)
   19340:	4b4a      	ldr	r3, [pc, #296]	; (1946c <ProcessAesDrv+0x318>)
   19342:	6812      	ldr	r2, [r2, #0]
   19344:	6022      	str	r2, [r4, #0]
   19346:	681a      	ldr	r2, [r3, #0]
   19348:	6062      	str	r2, [r4, #4]
   1934a:	685a      	ldr	r2, [r3, #4]
   1934c:	60a2      	str	r2, [r4, #8]
   1934e:	3308      	adds	r3, #8
   19350:	681b      	ldr	r3, [r3, #0]
   19352:	60e3      	str	r3, [r4, #12]
   19354:	2301      	movs	r3, #1
   19356:	65a3      	str	r3, [r4, #88]	; 0x58
   19358:	e735      	b.n	191c6 <ProcessAesDrv+0x72>
   1935a:	4845      	ldr	r0, [pc, #276]	; (19470 <ProcessAesDrv+0x31c>)
   1935c:	f7fd febc 	bl	170d8 <CC_PalAbort>
   19360:	2000      	movs	r0, #0
   19362:	f7fe fe35 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   19366:	2800      	cmp	r0, #0
   19368:	f43f af1f 	beq.w	191aa <ProcessAesDrv+0x56>
   1936c:	4841      	ldr	r0, [pc, #260]	; (19474 <ProcessAesDrv+0x320>)
   1936e:	f7fd feb3 	bl	170d8 <CC_PalAbort>
   19372:	e71a      	b.n	191aa <ProcessAesDrv+0x56>
   19374:	4840      	ldr	r0, [pc, #256]	; (19478 <ProcessAesDrv+0x324>)
   19376:	f7fd feaf 	bl	170d8 <CC_PalAbort>
   1937a:	4648      	mov	r0, r9
   1937c:	b007      	add	sp, #28
   1937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19382:	483e      	ldr	r0, [pc, #248]	; (1947c <ProcessAesDrv+0x328>)
   19384:	f7fd fea8 	bl	170d8 <CC_PalAbort>
   19388:	e73e      	b.n	19208 <ProcessAesDrv+0xb4>
   1938a:	2304      	movs	r3, #4
   1938c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   19390:	2120      	movs	r1, #32
   19392:	f104 0010 	add.w	r0, r4, #16
   19396:	f7ff fba5 	bl	18ae4 <CC_PalMemSetZeroPlat>
   1939a:	e71c      	b.n	191d6 <ProcessAesDrv+0x82>
   1939c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1939e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   193a0:	f000 f9c8 	bl	19734 <kmu_validate_slot_and_size>
   193a4:	b9e8      	cbnz	r0, 193e2 <ProcessAesDrv+0x28e>
   193a6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1949c <ProcessAesDrv+0x348>
   193aa:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 194a0 <ProcessAesDrv+0x34c>
   193ae:	f8d8 3000 	ldr.w	r3, [r8]
   193b2:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 194a4 <ProcessAesDrv+0x350>
   193b6:	681b      	ldr	r3, [r3, #0]
   193b8:	f8cb 3000 	str.w	r3, [fp]
   193bc:	f8d8 3000 	ldr.w	r3, [r8]
   193c0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 194a8 <ProcessAesDrv+0x354>
   193c4:	685b      	ldr	r3, [r3, #4]
   193c6:	f8ca 3000 	str.w	r3, [sl]
   193ca:	f8d8 3000 	ldr.w	r3, [r8]
   193ce:	4a2c      	ldr	r2, [pc, #176]	; (19480 <ProcessAesDrv+0x32c>)
   193d0:	689b      	ldr	r3, [r3, #8]
   193d2:	f8c9 3000 	str.w	r3, [r9]
   193d6:	f8d8 3000 	ldr.w	r3, [r8]
   193da:	68db      	ldr	r3, [r3, #12]
   193dc:	6013      	str	r3, [r2, #0]
   193de:	6b21      	ldr	r1, [r4, #48]	; 0x30
   193e0:	b171      	cbz	r1, 19400 <ProcessAesDrv+0x2ac>
   193e2:	f04f 0801 	mov.w	r8, #1
   193e6:	e6d2      	b.n	1918e <ProcessAesDrv+0x3a>
   193e8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 194ac <ProcessAesDrv+0x358>
   193ec:	e6eb      	b.n	191c6 <ProcessAesDrv+0x72>
   193ee:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   193f2:	e70f      	b.n	19214 <ProcessAesDrv+0xc0>
   193f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   193f6:	2b01      	cmp	r3, #1
   193f8:	bf0c      	ite	eq
   193fa:	2040      	moveq	r0, #64	; 0x40
   193fc:	2010      	movne	r0, #16
   193fe:	e789      	b.n	19314 <ProcessAesDrv+0x1c0>
   19400:	f104 0310 	add.w	r3, r4, #16
   19404:	4618      	mov	r0, r3
   19406:	9305      	str	r3, [sp, #20]
   19408:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1940c:	e9cd 3200 	strd	r3, r2, [sp]
   19410:	9002      	str	r0, [sp, #8]
   19412:	2010      	movs	r0, #16
   19414:	9003      	str	r0, [sp, #12]
   19416:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1941a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1941c:	f000 f9ae 	bl	1977c <kmu_derive_cmac>
   19420:	2800      	cmp	r0, #0
   19422:	d148      	bne.n	194b6 <ProcessAesDrv+0x362>
   19424:	2300      	movs	r3, #0
   19426:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1942a:	e7da      	b.n	193e2 <ProcessAesDrv+0x28e>
   1942c:	4b15      	ldr	r3, [pc, #84]	; (19484 <ProcessAesDrv+0x330>)
   1942e:	e746      	b.n	192be <ProcessAesDrv+0x16a>
   19430:	4a14      	ldr	r2, [pc, #80]	; (19484 <ProcessAesDrv+0x330>)
   19432:	4b15      	ldr	r3, [pc, #84]	; (19488 <ProcessAesDrv+0x334>)
   19434:	e785      	b.n	19342 <ProcessAesDrv+0x1ee>
   19436:	bf00      	nop
   19438:	20000518 	.word	0x20000518
   1943c:	5002b810 	.word	0x5002b810
   19440:	5002b910 	.word	0x5002b910
   19444:	5002ba04 	.word	0x5002ba04
   19448:	5002b440 	.word	0x5002b440
   1944c:	5002bd28 	.word	0x5002bd28
   19450:	5002bd2c 	.word	0x5002bd2c
   19454:	5002bd30 	.word	0x5002bd30
   19458:	5002bd34 	.word	0x5002bd34
   1945c:	5002bc2c 	.word	0x5002bc2c
   19460:	5002bc34 	.word	0x5002bc34
   19464:	5002bc28 	.word	0x5002bc28
   19468:	5002bc30 	.word	0x5002bc30
   1946c:	5002b444 	.word	0x5002b444
   19470:	0001e114 	.word	0x0001e114
   19474:	0001e12c 	.word	0x0001e12c
   19478:	0001e16c 	.word	0x0001e16c
   1947c:	0001e14c 	.word	0x0001e14c
   19480:	5002b40c 	.word	0x5002b40c
   19484:	5002b460 	.word	0x5002b460
   19488:	5002b464 	.word	0x5002b464
   1948c:	00f10001 	.word	0x00f10001
   19490:	00f10005 	.word	0x00f10005
   19494:	00f1000b 	.word	0x00f1000b
   19498:	00f10003 	.word	0x00f10003
   1949c:	20000508 	.word	0x20000508
   194a0:	5002b400 	.word	0x5002b400
   194a4:	5002b404 	.word	0x5002b404
   194a8:	5002b408 	.word	0x5002b408
   194ac:	00f10002 	.word	0x00f10002
   194b0:	f8df 9038 	ldr.w	r9, [pc, #56]	; 194ec <ProcessAesDrv+0x398>
   194b4:	e687      	b.n	191c6 <ProcessAesDrv+0x72>
   194b6:	f8d8 3000 	ldr.w	r3, [r8]
   194ba:	4a0b      	ldr	r2, [pc, #44]	; (194e8 <ProcessAesDrv+0x394>)
   194bc:	681b      	ldr	r3, [r3, #0]
   194be:	f8cb 3000 	str.w	r3, [fp]
   194c2:	f8d8 3000 	ldr.w	r3, [r8]
   194c6:	685b      	ldr	r3, [r3, #4]
   194c8:	f8ca 3000 	str.w	r3, [sl]
   194cc:	f8d8 3000 	ldr.w	r3, [r8]
   194d0:	689b      	ldr	r3, [r3, #8]
   194d2:	f8c9 3000 	str.w	r3, [r9]
   194d6:	f8d8 3000 	ldr.w	r3, [r8]
   194da:	68db      	ldr	r3, [r3, #12]
   194dc:	6013      	str	r3, [r2, #0]
   194de:	9805      	ldr	r0, [sp, #20]
   194e0:	2110      	movs	r1, #16
   194e2:	f7ff faff 	bl	18ae4 <CC_PalMemSetZeroPlat>
   194e6:	e79d      	b.n	19424 <ProcessAesDrv+0x2d0>
   194e8:	5002b40c 	.word	0x5002b40c
   194ec:	00f10004 	.word	0x00f10004

000194f0 <FinishAesDrv>:
   194f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194f4:	b301      	cbz	r1, 19538 <FinishAesDrv+0x48>
   194f6:	b1fa      	cbz	r2, 19538 <FinishAesDrv+0x48>
   194f8:	4604      	mov	r4, r0
   194fa:	2800      	cmp	r0, #0
   194fc:	d07a      	beq.n	195f4 <FinishAesDrv+0x104>
   194fe:	461d      	mov	r5, r3
   19500:	6b43      	ldr	r3, [r0, #52]	; 0x34
   19502:	2b07      	cmp	r3, #7
   19504:	460e      	mov	r6, r1
   19506:	d01b      	beq.n	19540 <FinishAesDrv+0x50>
   19508:	b95d      	cbnz	r5, 19522 <FinishAesDrv+0x32>
   1950a:	2b03      	cmp	r3, #3
   1950c:	d110      	bne.n	19530 <FinishAesDrv+0x40>
   1950e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   19510:	b973      	cbnz	r3, 19530 <FinishAesDrv+0x40>
   19512:	f100 0364 	add.w	r3, r0, #100	; 0x64
   19516:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1951a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1951e:	600b      	str	r3, [r1, #0]
   19520:	2510      	movs	r5, #16
   19522:	462b      	mov	r3, r5
   19524:	4631      	mov	r1, r6
   19526:	4620      	mov	r0, r4
   19528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1952c:	f7ff be12 	b.w	19154 <ProcessAesDrv>
   19530:	462f      	mov	r7, r5
   19532:	4638      	mov	r0, r7
   19534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19538:	4f66      	ldr	r7, [pc, #408]	; (196d4 <FinishAesDrv+0x1e4>)
   1953a:	4638      	mov	r0, r7
   1953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19540:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   19542:	2b00      	cmp	r3, #0
   19544:	d159      	bne.n	195fa <FinishAesDrv+0x10a>
   19546:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1954a:	d25b      	bcs.n	19604 <FinishAesDrv+0x114>
   1954c:	b915      	cbnz	r5, 19554 <FinishAesDrv+0x64>
   1954e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   19550:	2b00      	cmp	r3, #0
   19552:	d157      	bne.n	19604 <FinishAesDrv+0x114>
   19554:	4860      	ldr	r0, [pc, #384]	; (196d8 <FinishAesDrv+0x1e8>)
   19556:	f04f 31ff 	mov.w	r1, #4294967295
   1955a:	f7fe fd09 	bl	17f70 <CC_PalMutexLock>
   1955e:	2800      	cmp	r0, #0
   19560:	f040 8097 	bne.w	19692 <FinishAesDrv+0x1a2>
   19564:	2000      	movs	r0, #0
   19566:	f7fe fd33 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   1956a:	2800      	cmp	r0, #0
   1956c:	f040 808d 	bne.w	1968a <FinishAesDrv+0x19a>
   19570:	4b5a      	ldr	r3, [pc, #360]	; (196dc <FinishAesDrv+0x1ec>)
   19572:	4a5b      	ldr	r2, [pc, #364]	; (196e0 <FinishAesDrv+0x1f0>)
   19574:	2101      	movs	r1, #1
   19576:	6019      	str	r1, [r3, #0]
   19578:	6813      	ldr	r3, [r2, #0]
   1957a:	2b00      	cmp	r3, #0
   1957c:	d1fc      	bne.n	19578 <FinishAesDrv+0x88>
   1957e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19580:	2b03      	cmp	r3, #3
   19582:	dd20      	ble.n	195c6 <FinishAesDrv+0xd6>
   19584:	3b06      	subs	r3, #6
   19586:	2b01      	cmp	r3, #1
   19588:	d81f      	bhi.n	195ca <FinishAesDrv+0xda>
   1958a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1958c:	2b01      	cmp	r3, #1
   1958e:	d83b      	bhi.n	19608 <FinishAesDrv+0x118>
   19590:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19592:	2b01      	cmp	r3, #1
   19594:	f200 8085 	bhi.w	196a2 <FinishAesDrv+0x1b2>
   19598:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1959a:	2b01      	cmp	r3, #1
   1959c:	f200 8083 	bhi.w	196a6 <FinishAesDrv+0x1b6>
   195a0:	4620      	mov	r0, r4
   195a2:	f7ff fd5b 	bl	1905c <InitAes.part.0>
   195a6:	4607      	mov	r7, r0
   195a8:	b980      	cbnz	r0, 195cc <FinishAesDrv+0xdc>
   195aa:	4620      	mov	r0, r4
   195ac:	f7ff fd0c 	bl	18fc8 <LoadAesKey>
   195b0:	4607      	mov	r7, r0
   195b2:	b958      	cbnz	r0, 195cc <FinishAesDrv+0xdc>
   195b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   195b6:	2b07      	cmp	r3, #7
   195b8:	d807      	bhi.n	195ca <FinishAesDrv+0xda>
   195ba:	e8df f003 	tbb	[pc, r3]
   195be:	2730      	.short	0x2730
   195c0:	06062755 	.word	0x06062755
   195c4:	2755      	.short	0x2755
   195c6:	2b00      	cmp	r3, #0
   195c8:	dadf      	bge.n	1958a <FinishAesDrv+0x9a>
   195ca:	4f46      	ldr	r7, [pc, #280]	; (196e4 <FinishAesDrv+0x1f4>)
   195cc:	4a44      	ldr	r2, [pc, #272]	; (196e0 <FinishAesDrv+0x1f0>)
   195ce:	6813      	ldr	r3, [r2, #0]
   195d0:	2b00      	cmp	r3, #0
   195d2:	d1fc      	bne.n	195ce <FinishAesDrv+0xde>
   195d4:	4a41      	ldr	r2, [pc, #260]	; (196dc <FinishAesDrv+0x1ec>)
   195d6:	2001      	movs	r0, #1
   195d8:	6013      	str	r3, [r2, #0]
   195da:	f7fe fcf9 	bl	17fd0 <CC_PalPowerSaveModeSelect>
   195de:	2800      	cmp	r0, #0
   195e0:	d15b      	bne.n	1969a <FinishAesDrv+0x1aa>
   195e2:	483d      	ldr	r0, [pc, #244]	; (196d8 <FinishAesDrv+0x1e8>)
   195e4:	f7fe fccc 	bl	17f80 <CC_PalMutexUnlock>
   195e8:	2800      	cmp	r0, #0
   195ea:	d0a2      	beq.n	19532 <FinishAesDrv+0x42>
   195ec:	483e      	ldr	r0, [pc, #248]	; (196e8 <FinishAesDrv+0x1f8>)
   195ee:	f7fd fd73 	bl	170d8 <CC_PalAbort>
   195f2:	e79e      	b.n	19532 <FinishAesDrv+0x42>
   195f4:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   195f8:	e79b      	b.n	19532 <FinishAesDrv+0x42>
   195fa:	2b01      	cmp	r3, #1
   195fc:	d1a6      	bne.n	1954c <FinishAesDrv+0x5c>
   195fe:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   19602:	d3a3      	bcc.n	1954c <FinishAesDrv+0x5c>
   19604:	4f39      	ldr	r7, [pc, #228]	; (196ec <FinishAesDrv+0x1fc>)
   19606:	e794      	b.n	19532 <FinishAesDrv+0x42>
   19608:	4f39      	ldr	r7, [pc, #228]	; (196f0 <FinishAesDrv+0x200>)
   1960a:	e7df      	b.n	195cc <FinishAesDrv+0xdc>
   1960c:	4b39      	ldr	r3, [pc, #228]	; (196f4 <FinishAesDrv+0x204>)
   1960e:	6822      	ldr	r2, [r4, #0]
   19610:	601a      	str	r2, [r3, #0]
   19612:	6862      	ldr	r2, [r4, #4]
   19614:	605a      	str	r2, [r3, #4]
   19616:	68a2      	ldr	r2, [r4, #8]
   19618:	609a      	str	r2, [r3, #8]
   1961a:	68e2      	ldr	r2, [r4, #12]
   1961c:	60da      	str	r2, [r3, #12]
   1961e:	4936      	ldr	r1, [pc, #216]	; (196f8 <FinishAesDrv+0x208>)
   19620:	4a36      	ldr	r2, [pc, #216]	; (196fc <FinishAesDrv+0x20c>)
   19622:	2301      	movs	r3, #1
   19624:	600b      	str	r3, [r1, #0]
   19626:	6015      	str	r5, [r2, #0]
   19628:	2d00      	cmp	r5, #0
   1962a:	d13e      	bne.n	196aa <FinishAesDrv+0x1ba>
   1962c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1962e:	b90a      	cbnz	r2, 19634 <FinishAesDrv+0x144>
   19630:	4a33      	ldr	r2, [pc, #204]	; (19700 <FinishAesDrv+0x210>)
   19632:	6013      	str	r3, [r2, #0]
   19634:	4b2a      	ldr	r3, [pc, #168]	; (196e0 <FinishAesDrv+0x1f0>)
   19636:	681f      	ldr	r7, [r3, #0]
   19638:	2f00      	cmp	r7, #0
   1963a:	d1fc      	bne.n	19636 <FinishAesDrv+0x146>
   1963c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1963e:	3b01      	subs	r3, #1
   19640:	2b06      	cmp	r3, #6
   19642:	d8c3      	bhi.n	195cc <FinishAesDrv+0xdc>
   19644:	a201      	add	r2, pc, #4	; (adr r2, 1964c <FinishAesDrv+0x15c>)
   19646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1964a:	bf00      	nop
   1964c:	0001966d 	.word	0x0001966d
   19650:	00019685 	.word	0x00019685
   19654:	0001966d 	.word	0x0001966d
   19658:	000195cd 	.word	0x000195cd
   1965c:	000195cd 	.word	0x000195cd
   19660:	00019685 	.word	0x00019685
   19664:	0001966d 	.word	0x0001966d
   19668:	4b26      	ldr	r3, [pc, #152]	; (19704 <FinishAesDrv+0x214>)
   1966a:	e7d0      	b.n	1960e <FinishAesDrv+0x11e>
   1966c:	4a21      	ldr	r2, [pc, #132]	; (196f4 <FinishAesDrv+0x204>)
   1966e:	4b26      	ldr	r3, [pc, #152]	; (19708 <FinishAesDrv+0x218>)
   19670:	6812      	ldr	r2, [r2, #0]
   19672:	6022      	str	r2, [r4, #0]
   19674:	681a      	ldr	r2, [r3, #0]
   19676:	6062      	str	r2, [r4, #4]
   19678:	685a      	ldr	r2, [r3, #4]
   1967a:	60a2      	str	r2, [r4, #8]
   1967c:	3308      	adds	r3, #8
   1967e:	681b      	ldr	r3, [r3, #0]
   19680:	60e3      	str	r3, [r4, #12]
   19682:	e7a3      	b.n	195cc <FinishAesDrv+0xdc>
   19684:	4a1f      	ldr	r2, [pc, #124]	; (19704 <FinishAesDrv+0x214>)
   19686:	4b21      	ldr	r3, [pc, #132]	; (1970c <FinishAesDrv+0x21c>)
   19688:	e7f2      	b.n	19670 <FinishAesDrv+0x180>
   1968a:	4821      	ldr	r0, [pc, #132]	; (19710 <FinishAesDrv+0x220>)
   1968c:	f7fd fd24 	bl	170d8 <CC_PalAbort>
   19690:	e76e      	b.n	19570 <FinishAesDrv+0x80>
   19692:	4820      	ldr	r0, [pc, #128]	; (19714 <FinishAesDrv+0x224>)
   19694:	f7fd fd20 	bl	170d8 <CC_PalAbort>
   19698:	e764      	b.n	19564 <FinishAesDrv+0x74>
   1969a:	481f      	ldr	r0, [pc, #124]	; (19718 <FinishAesDrv+0x228>)
   1969c:	f7fd fd1c 	bl	170d8 <CC_PalAbort>
   196a0:	e79f      	b.n	195e2 <FinishAesDrv+0xf2>
   196a2:	4f1e      	ldr	r7, [pc, #120]	; (1971c <FinishAesDrv+0x22c>)
   196a4:	e792      	b.n	195cc <FinishAesDrv+0xdc>
   196a6:	4f1e      	ldr	r7, [pc, #120]	; (19720 <FinishAesDrv+0x230>)
   196a8:	e790      	b.n	195cc <FinishAesDrv+0xdc>
   196aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   196ac:	6833      	ldr	r3, [r6, #0]
   196ae:	2a01      	cmp	r2, #1
   196b0:	d00a      	beq.n	196c8 <FinishAesDrv+0x1d8>
   196b2:	491c      	ldr	r1, [pc, #112]	; (19724 <FinishAesDrv+0x234>)
   196b4:	4a1c      	ldr	r2, [pc, #112]	; (19728 <FinishAesDrv+0x238>)
   196b6:	600b      	str	r3, [r1, #0]
   196b8:	2010      	movs	r0, #16
   196ba:	6015      	str	r5, [r2, #0]
   196bc:	f7fe fbc4 	bl	17e48 <CC_HalWaitInterrupt>
   196c0:	4607      	mov	r7, r0
   196c2:	2800      	cmp	r0, #0
   196c4:	d0b6      	beq.n	19634 <FinishAesDrv+0x144>
   196c6:	e781      	b.n	195cc <FinishAesDrv+0xdc>
   196c8:	4918      	ldr	r1, [pc, #96]	; (1972c <FinishAesDrv+0x23c>)
   196ca:	4a19      	ldr	r2, [pc, #100]	; (19730 <FinishAesDrv+0x240>)
   196cc:	600b      	str	r3, [r1, #0]
   196ce:	2040      	movs	r0, #64	; 0x40
   196d0:	6015      	str	r5, [r2, #0]
   196d2:	e7f3      	b.n	196bc <FinishAesDrv+0x1cc>
   196d4:	00f1000b 	.word	0x00f1000b
   196d8:	20000518 	.word	0x20000518
   196dc:	5002b810 	.word	0x5002b810
   196e0:	5002b910 	.word	0x5002b910
   196e4:	00f10001 	.word	0x00f10001
   196e8:	0001e16c 	.word	0x0001e16c
   196ec:	00f10005 	.word	0x00f10005
   196f0:	00f10002 	.word	0x00f10002
   196f4:	5002b440 	.word	0x5002b440
   196f8:	5002b47c 	.word	0x5002b47c
   196fc:	5002b4bc 	.word	0x5002b4bc
   19700:	5002b524 	.word	0x5002b524
   19704:	5002b460 	.word	0x5002b460
   19708:	5002b444 	.word	0x5002b444
   1970c:	5002b464 	.word	0x5002b464
   19710:	0001e12c 	.word	0x0001e12c
   19714:	0001e114 	.word	0x0001e114
   19718:	0001e14c 	.word	0x0001e14c
   1971c:	00f10003 	.word	0x00f10003
   19720:	00f10004 	.word	0x00f10004
   19724:	5002bc30 	.word	0x5002bc30
   19728:	5002bc34 	.word	0x5002bc34
   1972c:	5002bc28 	.word	0x5002bc28
   19730:	5002bc2c 	.word	0x5002bc2c

00019734 <kmu_validate_slot_and_size>:
   19734:	b921      	cbnz	r1, 19740 <kmu_validate_slot_and_size+0xc>
   19736:	4b03      	ldr	r3, [pc, #12]	; (19744 <kmu_validate_slot_and_size+0x10>)
   19738:	2800      	cmp	r0, #0
   1973a:	bf18      	it	ne
   1973c:	4618      	movne	r0, r3
   1973e:	4770      	bx	lr
   19740:	4801      	ldr	r0, [pc, #4]	; (19748 <kmu_validate_slot_and_size+0x14>)
   19742:	4770      	bx	lr
   19744:	00f70001 	.word	0x00f70001
   19748:	00f70003 	.word	0x00f70003

0001974c <kmu_validate_kdr_slot_and_size>:
   1974c:	b921      	cbnz	r1, 19758 <kmu_validate_kdr_slot_and_size+0xc>
   1974e:	4b03      	ldr	r3, [pc, #12]	; (1975c <kmu_validate_kdr_slot_and_size+0x10>)
   19750:	2800      	cmp	r0, #0
   19752:	bf18      	it	ne
   19754:	4618      	movne	r0, r3
   19756:	4770      	bx	lr
   19758:	4801      	ldr	r0, [pc, #4]	; (19760 <kmu_validate_kdr_slot_and_size+0x14>)
   1975a:	4770      	bx	lr
   1975c:	00f70001 	.word	0x00f70001
   19760:	00f70003 	.word	0x00f70003

00019764 <kmu_use_kdr_key>:
   19764:	4903      	ldr	r1, [pc, #12]	; (19774 <kmu_use_kdr_key+0x10>)
   19766:	4b04      	ldr	r3, [pc, #16]	; (19778 <kmu_use_kdr_key+0x14>)
   19768:	2000      	movs	r0, #0
   1976a:	2201      	movs	r2, #1
   1976c:	6008      	str	r0, [r1, #0]
   1976e:	601a      	str	r2, [r3, #0]
   19770:	4770      	bx	lr
   19772:	bf00      	nop
   19774:	5002ba38 	.word	0x5002ba38
   19778:	5002b478 	.word	0x5002b478

0001977c <kmu_derive_cmac>:
   1977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19780:	b0cd      	sub	sp, #308	; 0x134
   19782:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   19786:	460f      	mov	r7, r1
   19788:	2100      	movs	r1, #0
   1978a:	460c      	mov	r4, r1
   1978c:	4681      	mov	r9, r0
   1978e:	4616      	mov	r6, r2
   19790:	a80e      	add	r0, sp, #56	; 0x38
   19792:	2274      	movs	r2, #116	; 0x74
   19794:	469b      	mov	fp, r3
   19796:	f001 f9e8 	bl	1ab6a <memset>
   1979a:	4621      	mov	r1, r4
   1979c:	2280      	movs	r2, #128	; 0x80
   1979e:	a82c      	add	r0, sp, #176	; 0xb0
   197a0:	942b      	str	r4, [sp, #172]	; 0xac
   197a2:	f001 f9e2 	bl	1ab6a <memset>
   197a6:	2384      	movs	r3, #132	; 0x84
   197a8:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   197ac:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   197b0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   197b4:	9305      	str	r3, [sp, #20]
   197b6:	d860      	bhi.n	1987a <kmu_derive_cmac+0xfe>
   197b8:	ab05      	add	r3, sp, #20
   197ba:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   197be:	9301      	str	r3, [sp, #4]
   197c0:	9502      	str	r5, [sp, #8]
   197c2:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   197c6:	4659      	mov	r1, fp
   197c8:	4630      	mov	r0, r6
   197ca:	f8cd a000 	str.w	sl, [sp]
   197ce:	f000 f865 	bl	1989c <UtilCmacBuildDataForDerivation>
   197d2:	2800      	cmp	r0, #0
   197d4:	d14c      	bne.n	19870 <kmu_derive_cmac+0xf4>
   197d6:	2303      	movs	r3, #3
   197d8:	f88d 3013 	strb.w	r3, [sp, #19]
   197dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
   197e0:	901c      	str	r0, [sp, #112]	; 0x70
   197e2:	2200      	movs	r2, #0
   197e4:	2110      	movs	r1, #16
   197e6:	a80e      	add	r0, sp, #56	; 0x38
   197e8:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   197ec:	2607      	movs	r6, #7
   197ee:	2301      	movs	r3, #1
   197f0:	2401      	movs	r4, #1
   197f2:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   197f6:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   197fa:	971a      	str	r7, [sp, #104]	; 0x68
   197fc:	961b      	str	r6, [sp, #108]	; 0x6c
   197fe:	9426      	str	r4, [sp, #152]	; 0x98
   19800:	f10d 0920 	add.w	r9, sp, #32
   19804:	f7ff f96e 	bl	18ae4 <CC_PalMemSetZeroPlat>
   19808:	2110      	movs	r1, #16
   1980a:	e9cd 1900 	strd	r1, r9, [sp]
   1980e:	ab0a      	add	r3, sp, #40	; 0x28
   19810:	9905      	ldr	r1, [sp, #20]
   19812:	4650      	mov	r0, sl
   19814:	aa06      	add	r2, sp, #24
   19816:	f7ff fa09 	bl	18c2c <SetDataBuffersInfo>
   1981a:	4607      	mov	r7, r0
   1981c:	b150      	cbz	r0, 19834 <kmu_derive_cmac+0xb8>
   1981e:	e01e      	b.n	1985e <kmu_derive_cmac+0xe2>
   19820:	f7ff f95c 	bl	18adc <CC_PalMemCopyPlat>
   19824:	2110      	movs	r1, #16
   19826:	a80e      	add	r0, sp, #56	; 0x38
   19828:	f7ff f95c 	bl	18ae4 <CC_PalMemSetZeroPlat>
   1982c:	3401      	adds	r4, #1
   1982e:	1bad      	subs	r5, r5, r6
   19830:	b2e4      	uxtb	r4, r4
   19832:	d027      	beq.n	19884 <kmu_derive_cmac+0x108>
   19834:	9b05      	ldr	r3, [sp, #20]
   19836:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1983a:	2d10      	cmp	r5, #16
   1983c:	464a      	mov	r2, r9
   1983e:	a906      	add	r1, sp, #24
   19840:	a80e      	add	r0, sp, #56	; 0x38
   19842:	462e      	mov	r6, r5
   19844:	bf28      	it	cs
   19846:	2610      	movcs	r6, #16
   19848:	f7ff fe52 	bl	194f0 <FinishAesDrv>
   1984c:	4603      	mov	r3, r0
   1984e:	4632      	mov	r2, r6
   19850:	eb08 0007 	add.w	r0, r8, r7
   19854:	a90e      	add	r1, sp, #56	; 0x38
   19856:	4437      	add	r7, r6
   19858:	2b00      	cmp	r3, #0
   1985a:	d0e1      	beq.n	19820 <kmu_derive_cmac+0xa4>
   1985c:	461f      	mov	r7, r3
   1985e:	a80e      	add	r0, sp, #56	; 0x38
   19860:	2274      	movs	r2, #116	; 0x74
   19862:	2100      	movs	r1, #0
   19864:	f7ff f93c 	bl	18ae0 <CC_PalMemSetPlat>
   19868:	4638      	mov	r0, r7
   1986a:	b04d      	add	sp, #308	; 0x134
   1986c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19870:	4f08      	ldr	r7, [pc, #32]	; (19894 <kmu_derive_cmac+0x118>)
   19872:	4638      	mov	r0, r7
   19874:	b04d      	add	sp, #308	; 0x134
   19876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1987a:	4f07      	ldr	r7, [pc, #28]	; (19898 <kmu_derive_cmac+0x11c>)
   1987c:	4638      	mov	r0, r7
   1987e:	b04d      	add	sp, #308	; 0x134
   19880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19884:	a80e      	add	r0, sp, #56	; 0x38
   19886:	2274      	movs	r2, #116	; 0x74
   19888:	2100      	movs	r1, #0
   1988a:	462f      	mov	r7, r5
   1988c:	f7ff f928 	bl	18ae0 <CC_PalMemSetPlat>
   19890:	e7ea      	b.n	19868 <kmu_derive_cmac+0xec>
   19892:	bf00      	nop
   19894:	00f1000e 	.word	0x00f1000e
   19898:	00f1000f 	.word	0x00f1000f

0001989c <UtilCmacBuildDataForDerivation>:
   1989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198a0:	b082      	sub	sp, #8
   198a2:	2600      	movs	r6, #0
   198a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   198a6:	9601      	str	r6, [sp, #4]
   198a8:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   198ac:	d83c      	bhi.n	19928 <UtilCmacBuildDataForDerivation+0x8c>
   198ae:	00ee      	lsls	r6, r5, #3
   198b0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   198b4:	f101 35ff 	add.w	r5, r1, #4294967295
   198b8:	461f      	mov	r7, r3
   198ba:	bf34      	ite	cc
   198bc:	2303      	movcc	r3, #3
   198be:	2304      	movcs	r3, #4
   198c0:	2d3f      	cmp	r5, #63	; 0x3f
   198c2:	460c      	mov	r4, r1
   198c4:	9300      	str	r3, [sp, #0]
   198c6:	d82f      	bhi.n	19928 <UtilCmacBuildDataForDerivation+0x8c>
   198c8:	b370      	cbz	r0, 19928 <UtilCmacBuildDataForDerivation+0x8c>
   198ca:	4690      	mov	r8, r2
   198cc:	b117      	cbz	r7, 198d4 <UtilCmacBuildDataForDerivation+0x38>
   198ce:	b35a      	cbz	r2, 19928 <UtilCmacBuildDataForDerivation+0x8c>
   198d0:	2f40      	cmp	r7, #64	; 0x40
   198d2:	d829      	bhi.n	19928 <UtilCmacBuildDataForDerivation+0x8c>
   198d4:	9a08      	ldr	r2, [sp, #32]
   198d6:	b33a      	cbz	r2, 19928 <UtilCmacBuildDataForDerivation+0x8c>
   198d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   198da:	6811      	ldr	r1, [r2, #0]
   198dc:	b321      	cbz	r1, 19928 <UtilCmacBuildDataForDerivation+0x8c>
   198de:	19e2      	adds	r2, r4, r7
   198e0:	4413      	add	r3, r2
   198e2:	4299      	cmp	r1, r3
   198e4:	d320      	bcc.n	19928 <UtilCmacBuildDataForDerivation+0x8c>
   198e6:	9b08      	ldr	r3, [sp, #32]
   198e8:	4622      	mov	r2, r4
   198ea:	4601      	mov	r1, r0
   198ec:	1c58      	adds	r0, r3, #1
   198ee:	f7ff f8f5 	bl	18adc <CC_PalMemCopyPlat>
   198f2:	9b08      	ldr	r3, [sp, #32]
   198f4:	4423      	add	r3, r4
   198f6:	2200      	movs	r2, #0
   198f8:	3402      	adds	r4, #2
   198fa:	705a      	strb	r2, [r3, #1]
   198fc:	bb07      	cbnz	r7, 19940 <UtilCmacBuildDataForDerivation+0xa4>
   198fe:	2eff      	cmp	r6, #255	; 0xff
   19900:	9600      	str	r6, [sp, #0]
   19902:	d915      	bls.n	19930 <UtilCmacBuildDataForDerivation+0x94>
   19904:	9b08      	ldr	r3, [sp, #32]
   19906:	0235      	lsls	r5, r6, #8
   19908:	b2ad      	uxth	r5, r5
   1990a:	1918      	adds	r0, r3, r4
   1990c:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   19910:	2202      	movs	r2, #2
   19912:	a901      	add	r1, sp, #4
   19914:	9501      	str	r5, [sp, #4]
   19916:	f7ff f8e1 	bl	18adc <CC_PalMemCopyPlat>
   1991a:	3402      	adds	r4, #2
   1991c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1991e:	2000      	movs	r0, #0
   19920:	601c      	str	r4, [r3, #0]
   19922:	b002      	add	sp, #8
   19924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19928:	4809      	ldr	r0, [pc, #36]	; (19950 <UtilCmacBuildDataForDerivation+0xb4>)
   1992a:	b002      	add	sp, #8
   1992c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19930:	9b08      	ldr	r3, [sp, #32]
   19932:	2201      	movs	r2, #1
   19934:	1918      	adds	r0, r3, r4
   19936:	4669      	mov	r1, sp
   19938:	f7ff f8d0 	bl	18adc <CC_PalMemCopyPlat>
   1993c:	3401      	adds	r4, #1
   1993e:	e7ed      	b.n	1991c <UtilCmacBuildDataForDerivation+0x80>
   19940:	9b08      	ldr	r3, [sp, #32]
   19942:	4641      	mov	r1, r8
   19944:	1918      	adds	r0, r3, r4
   19946:	463a      	mov	r2, r7
   19948:	f7ff f8c8 	bl	18adc <CC_PalMemCopyPlat>
   1994c:	443c      	add	r4, r7
   1994e:	e7d6      	b.n	198fe <UtilCmacBuildDataForDerivation+0x62>
   19950:	80000006 	.word	0x80000006

00019954 <CC_PalDataBufferAttrGet>:
   19954:	2000      	movs	r0, #0
   19956:	7018      	strb	r0, [r3, #0]
   19958:	4770      	bx	lr
   1995a:	bf00      	nop

0001995c <main>:




void main(void)
{
   1995c:	b508      	push	{r3, lr}
	
	configure_dk_buttons_leds();
   1995e:	f7f4 fb1d 	bl	df9c <configure_dk_buttons_leds>
	init_bluethooth_scan();
   19962:	f7f4 fa85 	bl	de70 <init_bluethooth_scan>
}
   19966:	bd08      	pop	{r3, pc}

00019968 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   19968:	4602      	mov	r2, r0
   1996a:	b1b0      	cbz	r0, 1999a <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1996c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1996e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   19972:	2b02      	cmp	r3, #2
   19974:	d00b      	beq.n	1998e <sys_notify_validate+0x26>
   19976:	2b03      	cmp	r3, #3
   19978:	d004      	beq.n	19984 <sys_notify_validate+0x1c>
   1997a:	2b01      	cmp	r3, #1
   1997c:	d004      	beq.n	19988 <sys_notify_validate+0x20>
   1997e:	f06f 0015 	mvn.w	r0, #21
   19982:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   19984:	6803      	ldr	r3, [r0, #0]
   19986:	b15b      	cbz	r3, 199a0 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   19988:	2000      	movs	r0, #0
   1998a:	6090      	str	r0, [r2, #8]
   1998c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1998e:	6803      	ldr	r3, [r0, #0]
   19990:	2b00      	cmp	r3, #0
   19992:	d1f9      	bne.n	19988 <sys_notify_validate+0x20>
			rv = -EINVAL;
   19994:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   19998:	4770      	bx	lr
		return -EINVAL;
   1999a:	f06f 0015 	mvn.w	r0, #21
   1999e:	4770      	bx	lr
			rv = -EINVAL;
   199a0:	f06f 0015 	mvn.w	r0, #21
   199a4:	4770      	bx	lr

000199a6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   199a6:	b510      	push	{r4, lr}
   199a8:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   199aa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   199ac:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   199b0:	6081      	str	r1, [r0, #8]
	switch (method) {
   199b2:	2a02      	cmp	r2, #2
   199b4:	d004      	beq.n	199c0 <sys_notify_finalize+0x1a>
   199b6:	2a03      	cmp	r2, #3
   199b8:	d105      	bne.n	199c6 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   199ba:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   199bc:	2000      	movs	r0, #0
		break;
   199be:	e004      	b.n	199ca <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   199c0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   199c2:	2400      	movs	r4, #0
		break;
   199c4:	e001      	b.n	199ca <sys_notify_finalize+0x24>
	switch (method) {
   199c6:	2400      	movs	r4, #0
   199c8:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   199ca:	2200      	movs	r2, #0
   199cc:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   199ce:	b108      	cbz	r0, 199d4 <sys_notify_finalize+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   199d0:	f7fd fae8 	bl	16fa4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   199d4:	4620      	mov	r0, r4
   199d6:	bd10      	pop	{r4, pc}

000199d8 <arch_printk_char_out>:
}
   199d8:	2000      	movs	r0, #0
   199da:	4770      	bx	lr

000199dc <str_out>:
{
   199dc:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   199de:	680c      	ldr	r4, [r1, #0]
   199e0:	b154      	cbz	r4, 199f8 <str_out+0x1c>
   199e2:	688a      	ldr	r2, [r1, #8]
   199e4:	684b      	ldr	r3, [r1, #4]
   199e6:	429a      	cmp	r2, r3
   199e8:	da06      	bge.n	199f8 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   199ea:	3b01      	subs	r3, #1
   199ec:	429a      	cmp	r2, r3
   199ee:	d008      	beq.n	19a02 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   199f0:	1c53      	adds	r3, r2, #1
   199f2:	608b      	str	r3, [r1, #8]
   199f4:	54a0      	strb	r0, [r4, r2]
   199f6:	e002      	b.n	199fe <str_out+0x22>
		ctx->count++;
   199f8:	688b      	ldr	r3, [r1, #8]
   199fa:	3301      	adds	r3, #1
   199fc:	608b      	str	r3, [r1, #8]
}
   199fe:	bc10      	pop	{r4}
   19a00:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   19a02:	1c53      	adds	r3, r2, #1
   19a04:	608b      	str	r3, [r1, #8]
   19a06:	2300      	movs	r3, #0
   19a08:	54a3      	strb	r3, [r4, r2]
   19a0a:	e7f8      	b.n	199fe <str_out+0x22>

00019a0c <printk>:
{
   19a0c:	b40f      	push	{r0, r1, r2, r3}
   19a0e:	b500      	push	{lr}
   19a10:	b083      	sub	sp, #12
   19a12:	a904      	add	r1, sp, #16
   19a14:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19a18:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   19a1a:	f7f4 fb8d 	bl	e138 <vprintk>
}
   19a1e:	b003      	add	sp, #12
   19a20:	f85d eb04 	ldr.w	lr, [sp], #4
   19a24:	b004      	add	sp, #16
   19a26:	4770      	bx	lr

00019a28 <snprintk>:
{
   19a28:	b40c      	push	{r2, r3}
   19a2a:	b500      	push	{lr}
   19a2c:	b083      	sub	sp, #12
   19a2e:	ab04      	add	r3, sp, #16
   19a30:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   19a34:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   19a36:	f7f4 fb8f 	bl	e158 <vsnprintk>
}
   19a3a:	b003      	add	sp, #12
   19a3c:	f85d eb04 	ldr.w	lr, [sp], #4
   19a40:	b002      	add	sp, #8
   19a42:	4770      	bx	lr

00019a44 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   19a44:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19a48:	8b01      	ldrh	r1, [r0, #24]
   19a4a:	f021 0107 	bic.w	r1, r1, #7
   19a4e:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   19a50:	8301      	strh	r1, [r0, #24]
}
   19a52:	4770      	bx	lr

00019a54 <notify_monitors>:
{
   19a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a58:	4606      	mov	r6, r0
   19a5a:	460f      	mov	r7, r1
   19a5c:	4690      	mov	r8, r2
	return list->head;
   19a5e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19a60:	b119      	cbz	r1, 19a6a <notify_monitors+0x16>
   19a62:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   19a64:	b131      	cbz	r1, 19a74 <notify_monitors+0x20>
	return node->next;
   19a66:	680c      	ldr	r4, [r1, #0]
   19a68:	e004      	b.n	19a74 <notify_monitors+0x20>
   19a6a:	460c      	mov	r4, r1
   19a6c:	e002      	b.n	19a74 <notify_monitors+0x20>
   19a6e:	4623      	mov	r3, r4
   19a70:	4621      	mov	r1, r4
   19a72:	461c      	mov	r4, r3
   19a74:	b159      	cbz	r1, 19a8e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   19a76:	684d      	ldr	r5, [r1, #4]
   19a78:	4643      	mov	r3, r8
   19a7a:	463a      	mov	r2, r7
   19a7c:	4630      	mov	r0, r6
   19a7e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19a80:	2c00      	cmp	r4, #0
   19a82:	d0f4      	beq.n	19a6e <notify_monitors+0x1a>
   19a84:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   19a86:	2c00      	cmp	r4, #0
   19a88:	d0f2      	beq.n	19a70 <notify_monitors+0x1c>
	return node->next;
   19a8a:	6823      	ldr	r3, [r4, #0]
   19a8c:	e7f0      	b.n	19a70 <notify_monitors+0x1c>
}
   19a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019a92 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19a92:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   19a94:	f013 0307 	ands.w	r3, r3, #7
   19a98:	d103      	bne.n	19aa2 <process_recheck+0x10>
	return list->head;
   19a9a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   19a9c:	b10a      	cbz	r2, 19aa2 <process_recheck+0x10>
		evt = EVT_START;
   19a9e:	2003      	movs	r0, #3
   19aa0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19aa2:	2b02      	cmp	r3, #2
   19aa4:	d003      	beq.n	19aae <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   19aa6:	2b01      	cmp	r3, #1
   19aa8:	d006      	beq.n	19ab8 <process_recheck+0x26>
	int evt = EVT_NOP;
   19aaa:	2000      	movs	r0, #0
   19aac:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   19aae:	8b42      	ldrh	r2, [r0, #26]
   19ab0:	2a00      	cmp	r2, #0
   19ab2:	d1f8      	bne.n	19aa6 <process_recheck+0x14>
		evt = EVT_STOP;
   19ab4:	2004      	movs	r0, #4
   19ab6:	4770      	bx	lr
   19ab8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   19aba:	b10b      	cbz	r3, 19ac0 <process_recheck+0x2e>
		evt = EVT_RESET;
   19abc:	2005      	movs	r0, #5
}
   19abe:	4770      	bx	lr
	int evt = EVT_NOP;
   19ac0:	2000      	movs	r0, #0
   19ac2:	4770      	bx	lr

00019ac4 <process_complete>:
{
   19ac4:	b538      	push	{r3, r4, r5, lr}
   19ac6:	4604      	mov	r4, r0
   19ac8:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19aca:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   19acc:	2a00      	cmp	r2, #0
   19ace:	db07      	blt.n	19ae0 <process_complete+0x1c>
   19ad0:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   19ad4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   19ad6:	2a01      	cmp	r2, #1
   19ad8:	d90e      	bls.n	19af8 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   19ada:	2b04      	cmp	r3, #4
   19adc:	d032      	beq.n	19b44 <process_complete+0x80>
}
   19ade:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   19ae0:	e9d0 0100 	ldrd	r0, r1, [r0]
   19ae4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   19ae8:	2300      	movs	r3, #0
   19aea:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   19aec:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   19aee:	2101      	movs	r1, #1
   19af0:	4620      	mov	r0, r4
   19af2:	f7ff ffa7 	bl	19a44 <set_state>
   19af6:	e7f2      	b.n	19ade <process_complete+0x1a>
		*clients = mgr->clients;
   19af8:	e9d0 0100 	ldrd	r0, r1, [r0]
   19afc:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   19b00:	2200      	movs	r2, #0
   19b02:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   19b04:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   19b06:	2b06      	cmp	r3, #6
   19b08:	d117      	bne.n	19b3a <process_complete+0x76>
	return list->head;
   19b0a:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   19b0c:	b13b      	cbz	r3, 19b1e <process_complete+0x5a>
				mgr->refs += 1U;
   19b0e:	8b62      	ldrh	r2, [r4, #26]
   19b10:	3201      	adds	r2, #1
   19b12:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   19b14:	2b00      	cmp	r3, #0
   19b16:	d0f9      	beq.n	19b0c <process_complete+0x48>
	return node->next;
   19b18:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   19b1a:	2b00      	cmp	r3, #0
   19b1c:	d1f6      	bne.n	19b0c <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   19b1e:	2102      	movs	r1, #2
   19b20:	4620      	mov	r0, r4
   19b22:	f7ff ff8f 	bl	19a44 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   19b26:	4620      	mov	r0, r4
   19b28:	f7ff ffb3 	bl	19a92 <process_recheck>
   19b2c:	2800      	cmp	r0, #0
   19b2e:	d0d6      	beq.n	19ade <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19b30:	8b23      	ldrh	r3, [r4, #24]
   19b32:	f043 0320 	orr.w	r3, r3, #32
   19b36:	8323      	strh	r3, [r4, #24]
   19b38:	e7d1      	b.n	19ade <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   19b3a:	2100      	movs	r1, #0
   19b3c:	4620      	mov	r0, r4
   19b3e:	f7ff ff81 	bl	19a44 <set_state>
   19b42:	e7f0      	b.n	19b26 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   19b44:	2100      	movs	r1, #0
   19b46:	f7ff ff7d 	bl	19a44 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   19b4a:	4620      	mov	r0, r4
   19b4c:	f7ff ffa1 	bl	19a92 <process_recheck>
   19b50:	2800      	cmp	r0, #0
   19b52:	d0c4      	beq.n	19ade <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19b54:	8b23      	ldrh	r3, [r4, #24]
   19b56:	f043 0320 	orr.w	r3, r3, #32
   19b5a:	8323      	strh	r3, [r4, #24]
}
   19b5c:	e7bf      	b.n	19ade <process_complete+0x1a>

00019b5e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   19b5e:	b158      	cbz	r0, 19b78 <validate_args+0x1a>
{
   19b60:	b510      	push	{r4, lr}
   19b62:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19b64:	b159      	cbz	r1, 19b7e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   19b66:	1d08      	adds	r0, r1, #4
   19b68:	f7ff fefe 	bl	19968 <sys_notify_validate>
	if ((rv == 0)
   19b6c:	b918      	cbnz	r0, 19b76 <validate_args+0x18>
	    && ((cli->notify.flags
   19b6e:	68a3      	ldr	r3, [r4, #8]
   19b70:	f033 0303 	bics.w	r3, r3, #3
   19b74:	d106      	bne.n	19b84 <validate_args+0x26>
}
   19b76:	bd10      	pop	{r4, pc}
		return -EINVAL;
   19b78:	f06f 0015 	mvn.w	r0, #21
}
   19b7c:	4770      	bx	lr
		return -EINVAL;
   19b7e:	f06f 0015 	mvn.w	r0, #21
   19b82:	e7f8      	b.n	19b76 <validate_args+0x18>
		rv = -EINVAL;
   19b84:	f06f 0015 	mvn.w	r0, #21
   19b88:	e7f5      	b.n	19b76 <validate_args+0x18>

00019b8a <notify_one>:
{
   19b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b8e:	4607      	mov	r7, r0
   19b90:	460c      	mov	r4, r1
   19b92:	4616      	mov	r6, r2
   19b94:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19b96:	4619      	mov	r1, r3
   19b98:	1d20      	adds	r0, r4, #4
   19b9a:	f7ff ff04 	bl	199a6 <sys_notify_finalize>
	if (cb) {
   19b9e:	b128      	cbz	r0, 19bac <notify_one+0x22>
   19ba0:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   19ba2:	462b      	mov	r3, r5
   19ba4:	4632      	mov	r2, r6
   19ba6:	4621      	mov	r1, r4
   19ba8:	4638      	mov	r0, r7
   19baa:	47c0      	blx	r8
}
   19bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019bb0 <notify_all>:
{
   19bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19bb4:	4681      	mov	r9, r0
   19bb6:	460c      	mov	r4, r1
   19bb8:	4690      	mov	r8, r2
   19bba:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   19bbc:	e005      	b.n	19bca <notify_all+0x1a>
	list->tail = node;
   19bbe:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   19bc0:	463b      	mov	r3, r7
   19bc2:	4642      	mov	r2, r8
   19bc4:	4648      	mov	r0, r9
   19bc6:	f7ff ffe0 	bl	19b8a <notify_one>
	return list->head;
   19bca:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   19bcc:	b129      	cbz	r1, 19bda <notify_all+0x2a>
	return node->next;
   19bce:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   19bd0:	6025      	str	r5, [r4, #0]
	return list->tail;
   19bd2:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19bd4:	428e      	cmp	r6, r1
   19bd6:	d1f3      	bne.n	19bc0 <notify_all+0x10>
   19bd8:	e7f1      	b.n	19bbe <notify_all+0xe>
}
   19bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019bde <transition_complete>:
{
   19bde:	b510      	push	{r4, lr}
	__asm__ volatile(
   19be0:	f04f 0440 	mov.w	r4, #64	; 0x40
   19be4:	f3ef 8211 	mrs	r2, BASEPRI
   19be8:	f384 8812 	msr	BASEPRI_MAX, r4
   19bec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   19bf0:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   19bf2:	2101      	movs	r1, #1
   19bf4:	f7f4 fac6 	bl	e184 <process_event>
}
   19bf8:	bd10      	pop	{r4, pc}

00019bfa <onoff_manager_init>:
	if ((mgr == NULL)
   19bfa:	4603      	mov	r3, r0
   19bfc:	b168      	cbz	r0, 19c1a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   19bfe:	b179      	cbz	r1, 19c20 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   19c00:	680a      	ldr	r2, [r1, #0]
   19c02:	b182      	cbz	r2, 19c26 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   19c04:	684a      	ldr	r2, [r1, #4]
   19c06:	b18a      	cbz	r2, 19c2c <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19c08:	2000      	movs	r0, #0
   19c0a:	6018      	str	r0, [r3, #0]
   19c0c:	6058      	str	r0, [r3, #4]
   19c0e:	6098      	str	r0, [r3, #8]
   19c10:	60d8      	str	r0, [r3, #12]
   19c12:	6158      	str	r0, [r3, #20]
   19c14:	6198      	str	r0, [r3, #24]
   19c16:	6119      	str	r1, [r3, #16]
	return 0;
   19c18:	4770      	bx	lr
		return -EINVAL;
   19c1a:	f06f 0015 	mvn.w	r0, #21
   19c1e:	4770      	bx	lr
   19c20:	f06f 0015 	mvn.w	r0, #21
   19c24:	4770      	bx	lr
   19c26:	f06f 0015 	mvn.w	r0, #21
   19c2a:	4770      	bx	lr
   19c2c:	f06f 0015 	mvn.w	r0, #21
}
   19c30:	4770      	bx	lr

00019c32 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   19c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c34:	4604      	mov	r4, r0
   19c36:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   19c38:	f7ff ff91 	bl	19b5e <validate_args>

	if (rv < 0) {
   19c3c:	1e06      	subs	r6, r0, #0
   19c3e:	db37      	blt.n	19cb0 <onoff_request+0x7e>
   19c40:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c44:	f3ef 8211 	mrs	r2, BASEPRI
   19c48:	f383 8812 	msr	BASEPRI_MAX, r3
   19c4c:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19c50:	8b25      	ldrh	r5, [r4, #24]
   19c52:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   19c56:	8b63      	ldrh	r3, [r4, #26]
   19c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19c5c:	428b      	cmp	r3, r1
   19c5e:	d02f      	beq.n	19cc0 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   19c60:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   19c62:	2d02      	cmp	r5, #2
   19c64:	d00c      	beq.n	19c80 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   19c66:	b18d      	cbz	r5, 19c8c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   19c68:	2d04      	cmp	r5, #4
   19c6a:	d00f      	beq.n	19c8c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   19c6c:	2d06      	cmp	r5, #6
   19c6e:	d00d      	beq.n	19c8c <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   19c70:	2d05      	cmp	r5, #5
   19c72:	d01f      	beq.n	19cb4 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   19c74:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   19c78:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   19c7a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   19c7c:	4608      	mov	r0, r1
   19c7e:	e00a      	b.n	19c96 <onoff_request+0x64>
		mgr->refs += 1U;
   19c80:	3301      	adds	r3, #1
   19c82:	8363      	strh	r3, [r4, #26]
		notify = true;
   19c84:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   19c86:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   19c88:	4618      	mov	r0, r3
   19c8a:	e004      	b.n	19c96 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   19c8c:	fab5 f385 	clz	r3, r5
   19c90:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   19c92:	2100      	movs	r1, #0
		add_client = true;
   19c94:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   19c96:	b128      	cbz	r0, 19ca4 <onoff_request+0x72>
	parent->next = child;
   19c98:	2000      	movs	r0, #0
   19c9a:	6038      	str	r0, [r7, #0]
	return list->tail;
   19c9c:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   19c9e:	b1a8      	cbz	r0, 19ccc <onoff_request+0x9a>
	parent->next = child;
   19ca0:	6007      	str	r7, [r0, #0]
	list->tail = node;
   19ca2:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   19ca4:	b9ab      	cbnz	r3, 19cd2 <onoff_request+0xa0>
	__asm__ volatile(
   19ca6:	f382 8811 	msr	BASEPRI, r2
   19caa:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   19cae:	b9a9      	cbnz	r1, 19cdc <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   19cb0:	4630      	mov	r0, r6
   19cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   19cb4:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   19cb8:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   19cba:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   19cbc:	4608      	mov	r0, r1
   19cbe:	e7ea      	b.n	19c96 <onoff_request+0x64>
		rv = -EAGAIN;
   19cc0:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   19cc4:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   19cc6:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   19cc8:	4608      	mov	r0, r1
   19cca:	e7e4      	b.n	19c96 <onoff_request+0x64>
   19ccc:	6067      	str	r7, [r4, #4]
	list->head = node;
   19cce:	6027      	str	r7, [r4, #0]
}
   19cd0:	e7e8      	b.n	19ca4 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   19cd2:	2102      	movs	r1, #2
   19cd4:	4620      	mov	r0, r4
   19cd6:	f7f4 fa55 	bl	e184 <process_event>
   19cda:	e7e9      	b.n	19cb0 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   19cdc:	2300      	movs	r3, #0
   19cde:	462a      	mov	r2, r5
   19ce0:	4639      	mov	r1, r7
   19ce2:	4620      	mov	r0, r4
   19ce4:	f7ff ff51 	bl	19b8a <notify_one>
   19ce8:	e7e2      	b.n	19cb0 <onoff_request+0x7e>

00019cea <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19cea:	b508      	push	{r3, lr}
   19cec:	4604      	mov	r4, r0
   19cee:	4608      	mov	r0, r1
   19cf0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   19cf2:	461a      	mov	r2, r3
   19cf4:	47a0      	blx	r4
	return z_impl_z_current_get();
   19cf6:	f7fc fc1b 	bl	16530 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   19cfa:	f7f6 fee1 	bl	10ac0 <z_impl_k_thread_abort>

00019cfe <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   19cfe:	00c9      	lsls	r1, r1, #3
   19d00:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   19d02:	4408      	add	r0, r1
   19d04:	4770      	bx	lr

00019d06 <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   19d06:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   19d0a:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   19d0c:	4299      	cmp	r1, r3
   19d0e:	d00e      	beq.n	19d2e <free_list_remove_bidx+0x28>
{
   19d10:	b410      	push	{r4}
   19d12:	00cc      	lsls	r4, r1, #3
   19d14:	4404      	add	r4, r0
   19d16:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   19d18:	3204      	adds	r2, #4
   19d1a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   19d1e:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   19d20:	3206      	adds	r2, #6
   19d22:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   19d24:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   19d26:	3304      	adds	r3, #4
   19d28:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   19d2a:	bc10      	pop	{r4}
   19d2c:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   19d2e:	2301      	movs	r3, #1
   19d30:	fa03 f102 	lsl.w	r1, r3, r2
   19d34:	68c3      	ldr	r3, [r0, #12]
   19d36:	ea23 0301 	bic.w	r3, r3, r1
   19d3a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   19d3c:	3204      	adds	r2, #4
   19d3e:	2300      	movs	r3, #0
   19d40:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   19d44:	4770      	bx	lr

00019d46 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   19d46:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   19d48:	1d13      	adds	r3, r2, #4
   19d4a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   19d4e:	b984      	cbnz	r4, 19d72 <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   19d50:	2301      	movs	r3, #1
   19d52:	fa03 f402 	lsl.w	r4, r3, r2
   19d56:	68c3      	ldr	r3, [r0, #12]
   19d58:	4323      	orrs	r3, r4
   19d5a:	60c3      	str	r3, [r0, #12]
		b->next = c;
   19d5c:	3204      	adds	r2, #4
   19d5e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   19d62:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   19d64:	1d1a      	adds	r2, r3, #4
   19d66:	b289      	uxth	r1, r1
   19d68:	5281      	strh	r1, [r0, r2]
   19d6a:	3306      	adds	r3, #6
   19d6c:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   19d6e:	bc70      	pop	{r4, r5, r6}
   19d70:	4770      	bx	lr
	void *cmem = &buf[c];
   19d72:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   19d74:	3204      	adds	r2, #4
   19d76:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   19d78:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   19d7a:	1d2e      	adds	r6, r5, #4
   19d7c:	5383      	strh	r3, [r0, r6]
   19d7e:	3506      	adds	r5, #6
   19d80:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   19d82:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   19d84:	3306      	adds	r3, #6
   19d86:	b289      	uxth	r1, r1
   19d88:	52c1      	strh	r1, [r0, r3]
   19d8a:	5281      	strh	r1, [r0, r2]
   19d8c:	e7ef      	b.n	19d6e <free_list_add_bidx+0x28>

00019d8e <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   19d8e:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   19d90:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   19d92:	3302      	adds	r3, #2
   19d94:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   19d96:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   19d98:	1a89      	subs	r1, r1, r2
   19d9a:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19d9e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   19da0:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19da2:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   19da4:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   19da6:	3402      	adds	r4, #2
   19da8:	5303      	strh	r3, [r0, r4]
   19daa:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19dae:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   19db2:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   19db4:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   19db8:	bc30      	pop	{r4, r5}
   19dba:	4770      	bx	lr

00019dbc <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   19dbc:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   19dbe:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   19dc0:	3102      	adds	r1, #2
   19dc2:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   19dc4:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   19dc6:	3402      	adds	r4, #2
   19dc8:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19dca:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19dcc:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19dd0:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   19dd2:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   19dd4:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   19dd6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   19dda:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   19dde:	bc30      	pop	{r4, r5}
   19de0:	4770      	bx	lr

00019de2 <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19de2:	3904      	subs	r1, #4
   19de4:	1a08      	subs	r0, r1, r0
}
   19de6:	08c0      	lsrs	r0, r0, #3
   19de8:	4770      	bx	lr

00019dea <free_list_remove>:
{
   19dea:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   19dec:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   19df0:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19df2:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   19df4:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   19df8:	f1c2 021f 	rsb	r2, r2, #31
   19dfc:	f7ff ff83 	bl	19d06 <free_list_remove_bidx>
}
   19e00:	bd08      	pop	{r3, pc}

00019e02 <free_list_add>:
{
   19e02:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   19e04:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   19e08:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19e0a:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   19e0c:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   19e10:	f1c2 021f 	rsb	r2, r2, #31
   19e14:	f7ff ff97 	bl	19d46 <free_list_add_bidx>
}
   19e18:	bd08      	pop	{r3, pc}

00019e1a <free_chunk>:
{
   19e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e1c:	4604      	mov	r4, r0
   19e1e:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   19e20:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   19e22:	1cb7      	adds	r7, r6, #2
   19e24:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   19e26:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   19e2a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   19e2e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   19e30:	f013 0f01 	tst.w	r3, #1
   19e34:	d00c      	beq.n	19e50 <free_chunk+0x36>
   19e36:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   19e38:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   19e3a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   19e3e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   19e40:	f013 0f01 	tst.w	r3, #1
   19e44:	d00e      	beq.n	19e64 <free_chunk+0x4a>
	free_list_add(h, c);
   19e46:	4629      	mov	r1, r5
   19e48:	4620      	mov	r0, r4
   19e4a:	f7ff ffda 	bl	19e02 <free_list_add>
}
   19e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   19e50:	f7ff ffcb 	bl	19dea <free_list_remove>
   19e54:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   19e56:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   19e5a:	4629      	mov	r1, r5
   19e5c:	4620      	mov	r0, r4
   19e5e:	f7ff ffad 	bl	19dbc <merge_chunks>
   19e62:	e7e8      	b.n	19e36 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   19e64:	4620      	mov	r0, r4
   19e66:	f7ff ffc0 	bl	19dea <free_list_remove>
   19e6a:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   19e6c:	462a      	mov	r2, r5
   19e6e:	1a69      	subs	r1, r5, r1
   19e70:	4620      	mov	r0, r4
   19e72:	f7ff ffa3 	bl	19dbc <merge_chunks>
   19e76:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   19e78:	1aed      	subs	r5, r5, r3
   19e7a:	e7e4      	b.n	19e46 <free_chunk+0x2c>

00019e7c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   19e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   19e7e:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   19e82:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   19e86:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   19e8a:	b1b7      	cbz	r7, 19eba <alloc_chunk+0x3e>
   19e8c:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   19e90:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   19e92:	1d14      	adds	r4, r2, #4
   19e94:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   19e98:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   19e9a:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   19e9e:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   19ea2:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   19ea6:	d912      	bls.n	19ece <alloc_chunk+0x52>
   19ea8:	4405      	add	r5, r0
   19eaa:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   19eac:	1d15      	adds	r5, r2, #4
   19eae:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   19eb2:	3e01      	subs	r6, #1
   19eb4:	d001      	beq.n	19eba <alloc_chunk+0x3e>
   19eb6:	42a7      	cmp	r7, r4
   19eb8:	d1eb      	bne.n	19e92 <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   19eba:	68c4      	ldr	r4, [r0, #12]
   19ebc:	f1c3 0220 	rsb	r2, r3, #32
   19ec0:	2301      	movs	r3, #1
   19ec2:	4093      	lsls	r3, r2
   19ec4:	425b      	negs	r3, r3

	if (bmask != 0U) {
   19ec6:	401c      	ands	r4, r3
   19ec8:	d105      	bne.n	19ed6 <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   19eca:	4620      	mov	r0, r4
   19ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   19ece:	4621      	mov	r1, r4
   19ed0:	f7ff ff19 	bl	19d06 <free_list_remove_bidx>
				return c;
   19ed4:	e7f9      	b.n	19eca <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   19ed6:	fa94 f2a4 	rbit	r2, r4
   19eda:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19ede:	1d13      	adds	r3, r2, #4
   19ee0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   19ee4:	4621      	mov	r1, r4
   19ee6:	f7ff ff0e 	bl	19d06 <free_list_remove_bidx>
		return c;
   19eea:	e7ee      	b.n	19eca <alloc_chunk+0x4e>

00019eec <sys_heap_free>:
	if (mem == NULL) {
   19eec:	b179      	cbz	r1, 19f0e <sys_heap_free+0x22>
{
   19eee:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   19ef0:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   19ef2:	4620      	mov	r0, r4
   19ef4:	f7ff ff75 	bl	19de2 <mem_to_chunkid>
   19ef8:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   19efa:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19efe:	8853      	ldrh	r3, [r2, #2]
   19f00:	f023 0301 	bic.w	r3, r3, #1
   19f04:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   19f06:	4620      	mov	r0, r4
   19f08:	f7ff ff87 	bl	19e1a <free_chunk>
}
   19f0c:	bd10      	pop	{r4, pc}
   19f0e:	4770      	bx	lr

00019f10 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   19f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   19f12:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   19f14:	b341      	cbz	r1, 19f68 <sys_heap_alloc+0x58>
   19f16:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   19f18:	68aa      	ldr	r2, [r5, #8]
   19f1a:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   19f1e:	d925      	bls.n	19f6c <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19f20:	330b      	adds	r3, #11
   19f22:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19f24:	4621      	mov	r1, r4
   19f26:	4628      	mov	r0, r5
   19f28:	f7ff ffa8 	bl	19e7c <alloc_chunk>
	if (c == 0U) {
   19f2c:	4607      	mov	r7, r0
   19f2e:	b1f8      	cbz	r0, 19f70 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   19f30:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   19f32:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   19f36:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   19f38:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   19f3c:	d309      	bcc.n	19f52 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   19f3e:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19f40:	885a      	ldrh	r2, [r3, #2]
   19f42:	f042 0201 	orr.w	r2, r2, #1
   19f46:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   19f48:	4639      	mov	r1, r7
   19f4a:	4628      	mov	r0, r5
   19f4c:	f7ff fed7 	bl	19cfe <chunk_mem>
}
   19f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   19f52:	4404      	add	r4, r0
   19f54:	4622      	mov	r2, r4
   19f56:	4601      	mov	r1, r0
   19f58:	4628      	mov	r0, r5
   19f5a:	f7ff ff18 	bl	19d8e <split_chunks>
		free_list_add(h, c + chunk_sz);
   19f5e:	4621      	mov	r1, r4
   19f60:	4628      	mov	r0, r5
   19f62:	f7ff ff4e 	bl	19e02 <free_list_add>
   19f66:	e7ea      	b.n	19f3e <sys_heap_alloc+0x2e>
		return NULL;
   19f68:	2000      	movs	r0, #0
   19f6a:	e7f1      	b.n	19f50 <sys_heap_alloc+0x40>
   19f6c:	2000      	movs	r0, #0
   19f6e:	e7ef      	b.n	19f50 <sys_heap_alloc+0x40>
		return NULL;
   19f70:	2000      	movs	r0, #0
   19f72:	e7ed      	b.n	19f50 <sys_heap_alloc+0x40>

00019f74 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   19f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f78:	460d      	mov	r5, r1
   19f7a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   19f7c:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   19f7e:	424b      	negs	r3, r1
   19f80:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   19f84:	ea31 0303 	bics.w	r3, r1, r3
   19f88:	d03e      	beq.n	1a008 <sys_heap_aligned_alloc+0x94>
		align -= rew;
   19f8a:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   19f8e:	f1b8 0f03 	cmp.w	r8, #3
   19f92:	d844      	bhi.n	1a01e <sys_heap_aligned_alloc+0xaa>
   19f94:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   19f96:	2c00      	cmp	r4, #0
   19f98:	d057      	beq.n	1a04a <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   19f9a:	68b3      	ldr	r3, [r6, #8]
   19f9c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   19fa0:	d955      	bls.n	1a04e <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   19fa2:	1929      	adds	r1, r5, r4
   19fa4:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19fa6:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   19fa8:	08c9      	lsrs	r1, r1, #3
   19faa:	4630      	mov	r0, r6
   19fac:	f7ff ff66 	bl	19e7c <alloc_chunk>

	if (c0 == 0) {
   19fb0:	4607      	mov	r7, r0
   19fb2:	2800      	cmp	r0, #0
   19fb4:	d04d      	beq.n	1a052 <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   19fb6:	4601      	mov	r1, r0
   19fb8:	4630      	mov	r0, r6
   19fba:	f7ff fea0 	bl	19cfe <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   19fbe:	4440      	add	r0, r8
   19fc0:	4428      	add	r0, r5
   19fc2:	3801      	subs	r0, #1
   19fc4:	426d      	negs	r5, r5
   19fc6:	4005      	ands	r5, r0
   19fc8:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19fcc:	442c      	add	r4, r5
   19fce:	3407      	adds	r4, #7
   19fd0:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   19fd4:	4629      	mov	r1, r5
   19fd6:	4630      	mov	r0, r6
   19fd8:	f7ff ff03 	bl	19de2 <mem_to_chunkid>
   19fdc:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   19fde:	1ba4      	subs	r4, r4, r6
   19fe0:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   19fe2:	4287      	cmp	r7, r0
   19fe4:	d31d      	bcc.n	1a022 <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   19fe6:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   19fea:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   19fee:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   19ff0:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   19ff4:	429c      	cmp	r4, r3
   19ff6:	d31e      	bcc.n	1a036 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   19ff8:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19ffa:	8873      	ldrh	r3, [r6, #2]
   19ffc:	f043 0301 	orr.w	r3, r3, #1
   1a000:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   1a002:	4628      	mov	r0, r5
   1a004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   1a008:	2904      	cmp	r1, #4
   1a00a:	d903      	bls.n	1a014 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   1a00c:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   1a010:	2204      	movs	r2, #4
   1a012:	e7c0      	b.n	19f96 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   1a014:	4611      	mov	r1, r2
   1a016:	f7ff ff7b 	bl	19f10 <sys_heap_alloc>
   1a01a:	4605      	mov	r5, r0
   1a01c:	e7f1      	b.n	1a002 <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   1a01e:	2204      	movs	r2, #4
   1a020:	e7b9      	b.n	19f96 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   1a022:	4602      	mov	r2, r0
   1a024:	4639      	mov	r1, r7
   1a026:	4630      	mov	r0, r6
   1a028:	f7ff feb1 	bl	19d8e <split_chunks>
		free_list_add(h, c0);
   1a02c:	4639      	mov	r1, r7
   1a02e:	4630      	mov	r0, r6
   1a030:	f7ff fee7 	bl	19e02 <free_list_add>
   1a034:	e7d7      	b.n	19fe6 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   1a036:	4622      	mov	r2, r4
   1a038:	4641      	mov	r1, r8
   1a03a:	4630      	mov	r0, r6
   1a03c:	f7ff fea7 	bl	19d8e <split_chunks>
		free_list_add(h, c_end);
   1a040:	4621      	mov	r1, r4
   1a042:	4630      	mov	r0, r6
   1a044:	f7ff fedd 	bl	19e02 <free_list_add>
   1a048:	e7d6      	b.n	19ff8 <sys_heap_aligned_alloc+0x84>
		return NULL;
   1a04a:	2500      	movs	r5, #0
   1a04c:	e7d9      	b.n	1a002 <sys_heap_aligned_alloc+0x8e>
   1a04e:	2500      	movs	r5, #0
   1a050:	e7d7      	b.n	1a002 <sys_heap_aligned_alloc+0x8e>
		return NULL;
   1a052:	2500      	movs	r5, #0
   1a054:	e7d5      	b.n	1a002 <sys_heap_aligned_alloc+0x8e>

0001a056 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1a056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a058:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1a05a:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1a05c:	1dc8      	adds	r0, r1, #7
   1a05e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1a062:	440d      	add	r5, r1
   1a064:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1a068:	1a2d      	subs	r5, r5, r0
   1a06a:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   1a06e:	4607      	mov	r7, r0
	heap->heap = h;
   1a070:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1a072:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   1a076:	2300      	movs	r3, #0
   1a078:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   1a07a:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1a07e:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1a082:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   1a086:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a088:	f102 0c07 	add.w	ip, r2, #7
   1a08c:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1a090:	42b3      	cmp	r3, r6
   1a092:	da05      	bge.n	1a0a0 <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   1a094:	1d1a      	adds	r2, r3, #4
   1a096:	2400      	movs	r4, #0
   1a098:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1a09c:	3301      	adds	r3, #1
   1a09e:	e7f7      	b.n	1a090 <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a0a0:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   1a0a2:	b29b      	uxth	r3, r3
   1a0a4:	2200      	movs	r2, #0
   1a0a6:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a0a8:	f043 0301 	orr.w	r3, r3, #1
   1a0ac:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1a0ae:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a0b2:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   1a0b4:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   1a0b8:	1c94      	adds	r4, r2, #2
   1a0ba:	5306      	strh	r6, [r0, r4]
   1a0bc:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   1a0be:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   1a0c2:	4405      	add	r5, r0
   1a0c4:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a0c6:	2301      	movs	r3, #1
   1a0c8:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1a0ca:	f7ff fe9a 	bl	19e02 <free_list_add>
}
   1a0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a0d0 <extract_decimal>:
{
   1a0d0:	b410      	push	{r4}
   1a0d2:	4604      	mov	r4, r0
	const char *sp = *str;
   1a0d4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   1a0d6:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   1a0d8:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1a0da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a0de:	2909      	cmp	r1, #9
   1a0e0:	d806      	bhi.n	1a0f0 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   1a0e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a0e6:	3201      	adds	r2, #1
   1a0e8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1a0ec:	3830      	subs	r0, #48	; 0x30
   1a0ee:	e7f3      	b.n	1a0d8 <extract_decimal+0x8>
	*str = sp;
   1a0f0:	6022      	str	r2, [r4, #0]
}
   1a0f2:	bc10      	pop	{r4}
   1a0f4:	4770      	bx	lr

0001a0f6 <encode_uint>:
{
   1a0f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0fa:	b083      	sub	sp, #12
   1a0fc:	4604      	mov	r4, r0
   1a0fe:	460d      	mov	r5, r1
   1a100:	9201      	str	r2, [sp, #4]
   1a102:	469a      	mov	sl, r3
   1a104:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   1a108:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1a10a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1a10e:	2b6f      	cmp	r3, #111	; 0x6f
   1a110:	d00f      	beq.n	1a132 <encode_uint+0x3c>
   1a112:	d906      	bls.n	1a122 <encode_uint+0x2c>
   1a114:	2b70      	cmp	r3, #112	; 0x70
   1a116:	d00f      	beq.n	1a138 <encode_uint+0x42>
   1a118:	2b78      	cmp	r3, #120	; 0x78
   1a11a:	d110      	bne.n	1a13e <encode_uint+0x48>
		return 16;
   1a11c:	f04f 0910 	mov.w	r9, #16
   1a120:	e026      	b.n	1a170 <encode_uint+0x7a>
	switch (specifier) {
   1a122:	2b58      	cmp	r3, #88	; 0x58
   1a124:	d002      	beq.n	1a12c <encode_uint+0x36>
   1a126:	f04f 090a 	mov.w	r9, #10
   1a12a:	e021      	b.n	1a170 <encode_uint+0x7a>
		return 16;
   1a12c:	f04f 0910 	mov.w	r9, #16
   1a130:	e01e      	b.n	1a170 <encode_uint+0x7a>
		return 8;
   1a132:	f04f 0908 	mov.w	r9, #8
   1a136:	e01b      	b.n	1a170 <encode_uint+0x7a>
		return 16;
   1a138:	f04f 0910 	mov.w	r9, #16
   1a13c:	e018      	b.n	1a170 <encode_uint+0x7a>
	switch (specifier) {
   1a13e:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   1a142:	e015      	b.n	1a170 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a144:	f1bb 0f19 	cmp.w	fp, #25
   1a148:	d820      	bhi.n	1a18c <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1a14a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a14c:	3237      	adds	r2, #55	; 0x37
   1a14e:	b2d2      	uxtb	r2, r2
   1a150:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   1a154:	4632      	mov	r2, r6
   1a156:	463b      	mov	r3, r7
   1a158:	4620      	mov	r0, r4
   1a15a:	4629      	mov	r1, r5
   1a15c:	f7e6 fbc6 	bl	8ec <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   1a160:	42bd      	cmp	r5, r7
   1a162:	bf08      	it	eq
   1a164:	42b4      	cmpeq	r4, r6
   1a166:	d315      	bcc.n	1a194 <encode_uint+0x9e>
   1a168:	45d0      	cmp	r8, sl
   1a16a:	d913      	bls.n	1a194 <encode_uint+0x9e>
		value /= radix;
   1a16c:	4604      	mov	r4, r0
   1a16e:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   1a170:	464e      	mov	r6, r9
   1a172:	2700      	movs	r7, #0
   1a174:	464a      	mov	r2, r9
   1a176:	463b      	mov	r3, r7
   1a178:	4620      	mov	r0, r4
   1a17a:	4629      	mov	r1, r5
   1a17c:	f7e6 fbb6 	bl	8ec <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a180:	2a09      	cmp	r2, #9
   1a182:	d8df      	bhi.n	1a144 <encode_uint+0x4e>
   1a184:	b2d2      	uxtb	r2, r2
   1a186:	3230      	adds	r2, #48	; 0x30
   1a188:	b2d2      	uxtb	r2, r2
   1a18a:	e7e1      	b.n	1a150 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1a18c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a18e:	3257      	adds	r2, #87	; 0x57
   1a190:	b2d2      	uxtb	r2, r2
   1a192:	e7dd      	b.n	1a150 <encode_uint+0x5a>
	if (conv->flag_hash) {
   1a194:	9b01      	ldr	r3, [sp, #4]
   1a196:	781b      	ldrb	r3, [r3, #0]
   1a198:	f013 0f20 	tst.w	r3, #32
   1a19c:	d005      	beq.n	1a1aa <encode_uint+0xb4>
		if (radix == 8) {
   1a19e:	f1b9 0f08 	cmp.w	r9, #8
   1a1a2:	d006      	beq.n	1a1b2 <encode_uint+0xbc>
		} else if (radix == 16) {
   1a1a4:	f1b9 0f10 	cmp.w	r9, #16
   1a1a8:	d009      	beq.n	1a1be <encode_uint+0xc8>
}
   1a1aa:	4640      	mov	r0, r8
   1a1ac:	b003      	add	sp, #12
   1a1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1a1b2:	9a01      	ldr	r2, [sp, #4]
   1a1b4:	7893      	ldrb	r3, [r2, #2]
   1a1b6:	f043 0308 	orr.w	r3, r3, #8
   1a1ba:	7093      	strb	r3, [r2, #2]
   1a1bc:	e7f5      	b.n	1a1aa <encode_uint+0xb4>
			conv->altform_0c = true;
   1a1be:	9a01      	ldr	r2, [sp, #4]
   1a1c0:	7893      	ldrb	r3, [r2, #2]
   1a1c2:	f043 0310 	orr.w	r3, r3, #16
   1a1c6:	7093      	strb	r3, [r2, #2]
   1a1c8:	e7ef      	b.n	1a1aa <encode_uint+0xb4>

0001a1ca <outs>:
{
   1a1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1ce:	4607      	mov	r7, r0
   1a1d0:	460e      	mov	r6, r1
   1a1d2:	4614      	mov	r4, r2
   1a1d4:	4698      	mov	r8, r3
	size_t count = 0;
   1a1d6:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1a1d8:	e006      	b.n	1a1e8 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   1a1da:	4631      	mov	r1, r6
   1a1dc:	f814 0b01 	ldrb.w	r0, [r4], #1
   1a1e0:	47b8      	blx	r7
		if (rc < 0) {
   1a1e2:	2800      	cmp	r0, #0
   1a1e4:	db09      	blt.n	1a1fa <outs+0x30>
		++count;
   1a1e6:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1a1e8:	4544      	cmp	r4, r8
   1a1ea:	d3f6      	bcc.n	1a1da <outs+0x10>
   1a1ec:	f1b8 0f00 	cmp.w	r8, #0
   1a1f0:	d102      	bne.n	1a1f8 <outs+0x2e>
   1a1f2:	7823      	ldrb	r3, [r4, #0]
   1a1f4:	2b00      	cmp	r3, #0
   1a1f6:	d1f0      	bne.n	1a1da <outs+0x10>
	return (int)count;
   1a1f8:	4628      	mov	r0, r5
}
   1a1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a1fe <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1a1fe:	4770      	bx	lr

0001a200 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1a200:	2300      	movs	r3, #0
   1a202:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   1a204:	6003      	str	r3, [r0, #0]
}
   1a206:	4770      	bx	lr

0001a208 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1a208:	6803      	ldr	r3, [r0, #0]
   1a20a:	b12b      	cbz	r3, 1a218 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   1a20c:	6843      	ldr	r3, [r0, #4]
   1a20e:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   1a210:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1a212:	2300      	movs	r3, #0
   1a214:	600b      	str	r3, [r1, #0]
}
   1a216:	4770      	bx	lr
		list->head = msg;
   1a218:	6001      	str	r1, [r0, #0]
   1a21a:	e7f9      	b.n	1a210 <log_list_add_tail+0x8>

0001a21c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1a21c:	6800      	ldr	r0, [r0, #0]
   1a21e:	4770      	bx	lr

0001a220 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1a220:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1a222:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1a224:	b108      	cbz	r0, 1a22a <log_list_head_get+0xa>
		list->head = list->head->next;
   1a226:	6802      	ldr	r2, [r0, #0]
   1a228:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1a22a:	4770      	bx	lr

0001a22c <dummy_timestamp>:
}
   1a22c:	2000      	movs	r0, #0
   1a22e:	4770      	bx	lr

0001a230 <msg_filter_check>:
}
   1a230:	2001      	movs	r0, #1
   1a232:	4770      	bx	lr

0001a234 <default_get_timestamp>:
{
   1a234:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1a236:	f001 fa97 	bl	1b768 <sys_clock_cycle_get_32>
}
   1a23a:	bd08      	pop	{r3, pc}

0001a23c <z_log_get_s_mask>:
{
   1a23c:	b470      	push	{r4, r5, r6}
   1a23e:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   1a240:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1a242:	4605      	mov	r5, r0
	bool arm = false;
   1a244:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   1a246:	e001      	b.n	1a24c <z_log_get_s_mask+0x10>
			arm = !arm;
   1a248:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   1a24c:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a250:	b19a      	cbz	r2, 1a27a <z_log_get_s_mask+0x3e>
   1a252:	428d      	cmp	r5, r1
   1a254:	d211      	bcs.n	1a27a <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   1a256:	2a25      	cmp	r2, #37	; 0x25
   1a258:	d0f6      	beq.n	1a248 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1a25a:	2c00      	cmp	r4, #0
   1a25c:	d0f6      	beq.n	1a24c <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1a25e:	f042 0620 	orr.w	r6, r2, #32
   1a262:	3e61      	subs	r6, #97	; 0x61
   1a264:	2e19      	cmp	r6, #25
   1a266:	d8f1      	bhi.n	1a24c <z_log_get_s_mask+0x10>
			if (curr == 's') {
   1a268:	2a73      	cmp	r2, #115	; 0x73
   1a26a:	d002      	beq.n	1a272 <z_log_get_s_mask+0x36>
			arg++;
   1a26c:	3501      	adds	r5, #1
			arm = false;
   1a26e:	2400      	movs	r4, #0
   1a270:	e7ec      	b.n	1a24c <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   1a272:	2201      	movs	r2, #1
   1a274:	40aa      	lsls	r2, r5
   1a276:	4310      	orrs	r0, r2
   1a278:	e7f8      	b.n	1a26c <z_log_get_s_mask+0x30>
}
   1a27a:	bc70      	pop	{r4, r5, r6}
   1a27c:	4770      	bx	lr

0001a27e <z_log_get_tag>:
}
   1a27e:	2000      	movs	r0, #0
   1a280:	4770      	bx	lr

0001a282 <block_on_alloc>:
}
   1a282:	2000      	movs	r0, #0
   1a284:	4770      	bx	lr

0001a286 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1a286:	2901      	cmp	r1, #1
   1a288:	d906      	bls.n	1a298 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   1a28a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a28c:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   1a28e:	2906      	cmp	r1, #6
   1a290:	d907      	bls.n	1a2a2 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   1a292:	3907      	subs	r1, #7
		cont = cont->next;
   1a294:	681b      	ldr	r3, [r3, #0]
   1a296:	e7fa      	b.n	1a28e <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   1a298:	3104      	adds	r1, #4
   1a29a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1a29e:	6888      	ldr	r0, [r1, #8]
   1a2a0:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   1a2a2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1a2a6:	6848      	ldr	r0, [r1, #4]
}
   1a2a8:	4770      	bx	lr

0001a2aa <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   1a2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2ae:	460d      	mov	r5, r1
   1a2b0:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   1a2b2:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a2b4:	2a03      	cmp	r2, #3
   1a2b6:	d917      	bls.n	1a2e8 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   1a2b8:	2208      	movs	r2, #8
   1a2ba:	3018      	adds	r0, #24
   1a2bc:	f000 fc31 	bl	1ab22 <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a2c0:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1a2c2:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   1a2c4:	b1b4      	cbz	r4, 1a2f4 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1a2c6:	46a0      	mov	r8, r4
   1a2c8:	2c07      	cmp	r4, #7
   1a2ca:	bf28      	it	cs
   1a2cc:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   1a2d0:	ea4f 0788 	mov.w	r7, r8, lsl #2
   1a2d4:	463a      	mov	r2, r7
   1a2d6:	4629      	mov	r1, r5
   1a2d8:	1d30      	adds	r0, r6, #4
   1a2da:	f000 fc22 	bl	1ab22 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   1a2de:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   1a2e2:	443d      	add	r5, r7
		cont = cont->next;
   1a2e4:	6836      	ldr	r6, [r6, #0]
   1a2e6:	e7ed      	b.n	1a2c4 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   1a2e8:	0092      	lsls	r2, r2, #2
   1a2ea:	3014      	adds	r0, #20
   1a2ec:	f000 fc19 	bl	1ab22 <memcpy>
		nargs  = 0U;
   1a2f0:	2400      	movs	r4, #0
   1a2f2:	e7e7      	b.n	1a2c4 <copy_args_to_msg+0x1a>
	}
}
   1a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a2f8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1a2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a2fc:	461c      	mov	r4, r3
   1a2fe:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1a302:	8903      	ldrh	r3, [r0, #8]
   1a304:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1a308:	42a3      	cmp	r3, r4
   1a30a:	d91f      	bls.n	1a34c <log_msg_hexdump_data_op+0x54>
   1a30c:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   1a30e:	6811      	ldr	r1, [r2, #0]
   1a310:	4421      	add	r1, r4
   1a312:	4299      	cmp	r1, r3
   1a314:	d901      	bls.n	1a31a <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   1a316:	1b19      	subs	r1, r3, r4
   1a318:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   1a31a:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1a31c:	2b0c      	cmp	r3, #12
   1a31e:	d919      	bls.n	1a354 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   1a320:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   1a324:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1a326:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   1a328:	42a3      	cmp	r3, r4
   1a32a:	d91e      	bls.n	1a36a <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1a32c:	42bb      	cmp	r3, r7
   1a32e:	bf28      	it	cs
   1a330:	463b      	movcs	r3, r7
   1a332:	461d      	mov	r5, r3

		if (put_op) {
   1a334:	f1b9 0f00 	cmp.w	r9, #0
   1a338:	d010      	beq.n	1a35c <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1a33a:	461a      	mov	r2, r3
   1a33c:	4641      	mov	r1, r8
   1a33e:	eb0c 0004 	add.w	r0, ip, r4
   1a342:	f000 fbee 	bl	1ab22 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   1a346:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   1a348:	44a8      	add	r8, r5
   1a34a:	e021      	b.n	1a390 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   1a34c:	2300      	movs	r3, #0
   1a34e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1a350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   1a354:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   1a358:	2600      	movs	r6, #0
   1a35a:	e7e5      	b.n	1a328 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1a35c:	461a      	mov	r2, r3
   1a35e:	eb0c 0104 	add.w	r1, ip, r4
   1a362:	4640      	mov	r0, r8
   1a364:	f000 fbdd 	bl	1ab22 <memcpy>
   1a368:	e7ed      	b.n	1a346 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1a36a:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   1a36c:	b91e      	cbnz	r6, 1a376 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   1a36e:	6946      	ldr	r6, [r0, #20]
   1a370:	e001      	b.n	1a376 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   1a372:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   1a374:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   1a376:	2c1b      	cmp	r4, #27
   1a378:	d8fb      	bhi.n	1a372 <log_msg_hexdump_data_op+0x7a>
   1a37a:	e009      	b.n	1a390 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1a37c:	1931      	adds	r1, r6, r4
   1a37e:	462a      	mov	r2, r5
   1a380:	3104      	adds	r1, #4
   1a382:	4640      	mov	r0, r8
   1a384:	f000 fbcd 	bl	1ab22 <memcpy>
		cont = cont->next;
   1a388:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   1a38a:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   1a38c:	44a8      	add	r8, r5
		offset = 0;
   1a38e:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   1a390:	2f00      	cmp	r7, #0
   1a392:	d0dd      	beq.n	1a350 <log_msg_hexdump_data_op+0x58>
   1a394:	2e00      	cmp	r6, #0
   1a396:	d0db      	beq.n	1a350 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1a398:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1a39c:	42bd      	cmp	r5, r7
   1a39e:	bf28      	it	cs
   1a3a0:	463d      	movcs	r5, r7
		if (put_op) {
   1a3a2:	f1b9 0f00 	cmp.w	r9, #0
   1a3a6:	d0e9      	beq.n	1a37c <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   1a3a8:	1930      	adds	r0, r6, r4
   1a3aa:	462a      	mov	r2, r5
   1a3ac:	4641      	mov	r1, r8
   1a3ae:	3004      	adds	r0, #4
   1a3b0:	f000 fbb7 	bl	1ab22 <memcpy>
   1a3b4:	e7e8      	b.n	1a388 <log_msg_hexdump_data_op+0x90>

0001a3b6 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   1a3b6:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a3b8:	f3bf 8f5b 	dmb	ish
   1a3bc:	e850 3f00 	ldrex	r3, [r0]
   1a3c0:	3301      	adds	r3, #1
   1a3c2:	e840 3200 	strex	r2, r3, [r0]
   1a3c6:	2a00      	cmp	r2, #0
   1a3c8:	d1f8      	bne.n	1a3bc <log_msg_get+0x6>
   1a3ca:	f3bf 8f5b 	dmb	ish
}
   1a3ce:	4770      	bx	lr

0001a3d0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1a3d0:	7a40      	ldrb	r0, [r0, #9]
}
   1a3d2:	0900      	lsrs	r0, r0, #4
   1a3d4:	4770      	bx	lr

0001a3d6 <log_msg_arg_get>:
{
   1a3d6:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1a3d8:	7a43      	ldrb	r3, [r0, #9]
   1a3da:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1a3de:	d20a      	bcs.n	1a3f6 <log_msg_arg_get+0x20>
   1a3e0:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a3e2:	2a03      	cmp	r2, #3
   1a3e4:	d804      	bhi.n	1a3f0 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   1a3e6:	3104      	adds	r1, #4
   1a3e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1a3ec:	6840      	ldr	r0, [r0, #4]
   1a3ee:	e003      	b.n	1a3f8 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   1a3f0:	f7ff ff49 	bl	1a286 <cont_arg_get>
   1a3f4:	e000      	b.n	1a3f8 <log_msg_arg_get+0x22>
		return 0;
   1a3f6:	2000      	movs	r0, #0
}
   1a3f8:	bd08      	pop	{r3, pc}

0001a3fa <log_msg_str_get>:
}
   1a3fa:	6900      	ldr	r0, [r0, #16]
   1a3fc:	4770      	bx	lr

0001a3fe <log_msg_put>:
{
   1a3fe:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   1a400:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a402:	f3bf 8f5b 	dmb	ish
   1a406:	e853 2f00 	ldrex	r2, [r3]
   1a40a:	3a01      	subs	r2, #1
   1a40c:	e843 2100 	strex	r1, r2, [r3]
   1a410:	2900      	cmp	r1, #0
   1a412:	d1f8      	bne.n	1a406 <log_msg_put+0x8>
   1a414:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1a418:	6843      	ldr	r3, [r0, #4]
   1a41a:	b103      	cbz	r3, 1a41e <log_msg_put+0x20>
}
   1a41c:	bd08      	pop	{r3, pc}
		msg_free(msg);
   1a41e:	f7f5 f8d7 	bl	f5d0 <msg_free>
}
   1a422:	e7fb      	b.n	1a41c <log_msg_put+0x1e>

0001a424 <msg_alloc>:
{
   1a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a426:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1a428:	f7f5 f8b6 	bl	f598 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1a42c:	4607      	mov	r7, r0
   1a42e:	b140      	cbz	r0, 1a442 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   1a430:	2301      	movs	r3, #1
   1a432:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1a434:	2200      	movs	r2, #0
   1a436:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   1a438:	f04f 0300 	mov.w	r3, #0
   1a43c:	f362 0300 	bfi	r3, r2, #0, #1
   1a440:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a442:	b1f7      	cbz	r7, 1a482 <msg_alloc+0x5e>
   1a444:	2d03      	cmp	r5, #3
   1a446:	d91c      	bls.n	1a482 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   1a448:	7a7b      	ldrb	r3, [r7, #9]
   1a44a:	f36f 1307 	bfc	r3, #4, #4
   1a44e:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   1a450:	7a3b      	ldrb	r3, [r7, #8]
   1a452:	f043 0302 	orr.w	r3, r3, #2
   1a456:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a458:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   1a45a:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   1a45e:	2300      	movs	r3, #0
   1a460:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   1a462:	2d00      	cmp	r5, #0
   1a464:	dd0d      	ble.n	1a482 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1a466:	f7f5 f897 	bl	f598 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1a46a:	4604      	mov	r4, r0
   1a46c:	b128      	cbz	r0, 1a47a <msg_alloc+0x56>
		*next = cont;
   1a46e:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   1a470:	2300      	movs	r3, #0
   1a472:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   1a474:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   1a476:	3d07      	subs	r5, #7
   1a478:	e7f3      	b.n	1a462 <msg_alloc+0x3e>
			msg_free(msg);
   1a47a:	4638      	mov	r0, r7
   1a47c:	f7f5 f8a8 	bl	f5d0 <msg_free>
			return NULL;
   1a480:	4627      	mov	r7, r4
}
   1a482:	4638      	mov	r0, r7
   1a484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a486 <log_msg_create_n>:
{
   1a486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a488:	4607      	mov	r7, r0
   1a48a:	460e      	mov	r6, r1
   1a48c:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   1a48e:	4610      	mov	r0, r2
   1a490:	f7ff ffc8 	bl	1a424 <msg_alloc>
	if (msg != NULL) {
   1a494:	4605      	mov	r5, r0
   1a496:	b140      	cbz	r0, 1a4aa <log_msg_create_n+0x24>
		msg->str = str;
   1a498:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   1a49a:	7a43      	ldrb	r3, [r0, #9]
   1a49c:	f364 1307 	bfi	r3, r4, #4, #4
   1a4a0:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   1a4a2:	4622      	mov	r2, r4
   1a4a4:	4631      	mov	r1, r6
   1a4a6:	f7ff ff00 	bl	1a2aa <copy_args_to_msg>
}
   1a4aa:	4628      	mov	r0, r5
   1a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a4ae <log_msg_hexdump_create>:
{
   1a4ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a4b2:	4606      	mov	r6, r0
   1a4b4:	460f      	mov	r7, r1
   1a4b6:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1a4b8:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1a4bc:	4295      	cmp	r5, r2
   1a4be:	bf28      	it	cs
   1a4c0:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1a4c2:	f7f5 f869 	bl	f598 <log_msg_chunk_alloc>
	if (msg == NULL) {
   1a4c6:	4681      	mov	r9, r0
   1a4c8:	2800      	cmp	r0, #0
   1a4ca:	d045      	beq.n	1a558 <log_msg_hexdump_create+0xaa>
	msg->hdr.ref_cnt = 1;
   1a4cc:	2301      	movs	r3, #1
   1a4ce:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1a4d0:	7a03      	ldrb	r3, [r0, #8]
   1a4d2:	f043 0301 	orr.w	r3, r3, #1
   1a4d6:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   1a4d8:	8903      	ldrh	r3, [r0, #8]
   1a4da:	f365 038f 	bfi	r3, r5, #2, #14
   1a4de:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   1a4e0:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1a4e2:	2c0c      	cmp	r4, #12
   1a4e4:	d927      	bls.n	1a536 <log_msg_hexdump_create+0x88>
		(void)memcpy(msg->payload.ext.data.bytes,
   1a4e6:	2208      	movs	r2, #8
   1a4e8:	4639      	mov	r1, r7
   1a4ea:	3018      	adds	r0, #24
   1a4ec:	f000 fb19 	bl	1ab22 <memcpy>
		msg->payload.ext.next = NULL;
   1a4f0:	2300      	movs	r3, #0
   1a4f2:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
   1a4f6:	f899 3008 	ldrb.w	r3, [r9, #8]
   1a4fa:	f043 0302 	orr.w	r3, r3, #2
   1a4fe:	f889 3008 	strb.w	r3, [r9, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1a502:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1a504:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   1a506:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   1a50a:	b32d      	cbz	r5, 1a558 <log_msg_hexdump_create+0xaa>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1a50c:	f7f5 f844 	bl	f598 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1a510:	4604      	mov	r4, r0
   1a512:	b1e8      	cbz	r0, 1a550 <log_msg_hexdump_create+0xa2>
		*prev_cont = cont;
   1a514:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   1a518:	2300      	movs	r3, #0
   1a51a:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   1a51c:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1a51e:	462e      	mov	r6, r5
   1a520:	2d1c      	cmp	r5, #28
   1a522:	bf28      	it	cs
   1a524:	261c      	movcs	r6, #28
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1a526:	4632      	mov	r2, r6
   1a528:	4639      	mov	r1, r7
   1a52a:	3004      	adds	r0, #4
   1a52c:	f000 faf9 	bl	1ab22 <memcpy>
		data += chunk_length;
   1a530:	4437      	add	r7, r6
		length -= chunk_length;
   1a532:	1bad      	subs	r5, r5, r6
   1a534:	e7e9      	b.n	1a50a <log_msg_hexdump_create+0x5c>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1a536:	462a      	mov	r2, r5
   1a538:	4639      	mov	r1, r7
   1a53a:	3014      	adds	r0, #20
   1a53c:	f000 faf1 	bl	1ab22 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1a540:	f899 3008 	ldrb.w	r3, [r9, #8]
   1a544:	f36f 0341 	bfc	r3, #1, #1
   1a548:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   1a54c:	2500      	movs	r5, #0
   1a54e:	e7da      	b.n	1a506 <log_msg_hexdump_create+0x58>
			msg_free(msg);
   1a550:	4648      	mov	r0, r9
   1a552:	f7f5 f83d 	bl	f5d0 <msg_free>
			return NULL;
   1a556:	46a1      	mov	r9, r4
}
   1a558:	4648      	mov	r0, r9
   1a55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a55e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1a55e:	b510      	push	{r4, lr}
   1a560:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1a562:	2400      	movs	r4, #0
   1a564:	9400      	str	r4, [sp, #0]
   1a566:	f7ff fec7 	bl	1a2f8 <log_msg_hexdump_data_op>
}
   1a56a:	b002      	add	sp, #8
   1a56c:	bd10      	pop	{r4, pc}

0001a56e <buffer_write>:
{
   1a56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a570:	4607      	mov	r7, r0
   1a572:	460d      	mov	r5, r1
   1a574:	4614      	mov	r4, r2
   1a576:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   1a578:	4632      	mov	r2, r6
   1a57a:	4621      	mov	r1, r4
   1a57c:	4628      	mov	r0, r5
   1a57e:	47b8      	blx	r7
		buf += processed;
   1a580:	4405      	add	r5, r0
	} while (len != 0);
   1a582:	1a24      	subs	r4, r4, r0
   1a584:	d1f8      	bne.n	1a578 <buffer_write+0xa>
}
   1a586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a588 <color_prefix>:
{
   1a588:	b508      	push	{r3, lr}
   1a58a:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   1a58c:	2201      	movs	r2, #1
   1a58e:	f7f5 f8b7 	bl	f700 <color_print>
}
   1a592:	bd08      	pop	{r3, pc}

0001a594 <color_postfix>:
{
   1a594:	b508      	push	{r3, lr}
   1a596:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   1a598:	2200      	movs	r2, #0
   1a59a:	f7f5 f8b1 	bl	f700 <color_print>
}
   1a59e:	bd08      	pop	{r3, pc}

0001a5a0 <postfix_print>:
{
   1a5a0:	b538      	push	{r3, r4, r5, lr}
   1a5a2:	4605      	mov	r5, r0
   1a5a4:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   1a5a6:	f001 0101 	and.w	r1, r1, #1
   1a5aa:	f7ff fff3 	bl	1a594 <color_postfix>
	newline_print(output, flags);
   1a5ae:	4621      	mov	r1, r4
   1a5b0:	4628      	mov	r0, r5
   1a5b2:	f7f5 f8bb 	bl	f72c <newline_print>
}
   1a5b6:	bd38      	pop	{r3, r4, r5, pc}

0001a5b8 <std_print>:
{
   1a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a5bc:	b08e      	sub	sp, #56	; 0x38
   1a5be:	af0e      	add	r7, sp, #56	; 0x38
   1a5c0:	4606      	mov	r6, r0
   1a5c2:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   1a5c4:	f7ff ff19 	bl	1a3fa <log_msg_str_get>
   1a5c8:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1a5ca:	4630      	mov	r0, r6
   1a5cc:	f7ff ff00 	bl	1a3d0 <log_msg_nargs_get>
   1a5d0:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1a5d2:	0083      	lsls	r3, r0, #2
   1a5d4:	3307      	adds	r3, #7
   1a5d6:	f023 0307 	bic.w	r3, r3, #7
   1a5da:	ebad 0d03 	sub.w	sp, sp, r3
   1a5de:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1a5e0:	2400      	movs	r4, #0
   1a5e2:	4544      	cmp	r4, r8
   1a5e4:	d207      	bcs.n	1a5f6 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   1a5e6:	4621      	mov	r1, r4
   1a5e8:	4630      	mov	r0, r6
   1a5ea:	f7ff fef4 	bl	1a3d6 <log_msg_arg_get>
   1a5ee:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   1a5f2:	3401      	adds	r4, #1
   1a5f4:	e7f5      	b.n	1a5e2 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   1a5f6:	4630      	mov	r0, r6
   1a5f8:	f7ff feea 	bl	1a3d0 <log_msg_nargs_get>
   1a5fc:	280f      	cmp	r0, #15
   1a5fe:	d815      	bhi.n	1a62c <std_print+0x74>
   1a600:	e8df f010 	tbh	[pc, r0, lsl #1]
   1a604:	00170010 	.word	0x00170010
   1a608:	0024001d 	.word	0x0024001d
   1a60c:	0038002d 	.word	0x0038002d
   1a610:	00540045 	.word	0x00540045
   1a614:	00780065 	.word	0x00780065
   1a618:	00a4008d 	.word	0x00a4008d
   1a61c:	00d800bd 	.word	0x00d800bd
   1a620:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
   1a624:	4651      	mov	r1, sl
   1a626:	4648      	mov	r0, r9
   1a628:	f7f5 f812 	bl	f650 <print_formatted>
}
   1a62c:	46bd      	mov	sp, r7
   1a62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1a632:	682a      	ldr	r2, [r5, #0]
   1a634:	4651      	mov	r1, sl
   1a636:	4648      	mov	r0, r9
   1a638:	f7f5 f80a 	bl	f650 <print_formatted>
		break;
   1a63c:	e7f6      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   1a63e:	686b      	ldr	r3, [r5, #4]
   1a640:	682a      	ldr	r2, [r5, #0]
   1a642:	4651      	mov	r1, sl
   1a644:	4648      	mov	r0, r9
   1a646:	f7f5 f803 	bl	f650 <print_formatted>
		break;
   1a64a:	e7ef      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   1a64c:	686b      	ldr	r3, [r5, #4]
   1a64e:	682a      	ldr	r2, [r5, #0]
   1a650:	68a9      	ldr	r1, [r5, #8]
   1a652:	9100      	str	r1, [sp, #0]
   1a654:	4651      	mov	r1, sl
   1a656:	4648      	mov	r0, r9
   1a658:	f7f4 fffa 	bl	f650 <print_formatted>
		break;
   1a65c:	e7e6      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a65e:	686b      	ldr	r3, [r5, #4]
   1a660:	682a      	ldr	r2, [r5, #0]
   1a662:	68e9      	ldr	r1, [r5, #12]
   1a664:	9101      	str	r1, [sp, #4]
   1a666:	68a9      	ldr	r1, [r5, #8]
   1a668:	9100      	str	r1, [sp, #0]
   1a66a:	4651      	mov	r1, sl
   1a66c:	4648      	mov	r0, r9
   1a66e:	f7f4 ffef 	bl	f650 <print_formatted>
		break;
   1a672:	e7db      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a674:	686b      	ldr	r3, [r5, #4]
   1a676:	682a      	ldr	r2, [r5, #0]
   1a678:	6929      	ldr	r1, [r5, #16]
   1a67a:	9102      	str	r1, [sp, #8]
   1a67c:	68e9      	ldr	r1, [r5, #12]
   1a67e:	9101      	str	r1, [sp, #4]
   1a680:	68a9      	ldr	r1, [r5, #8]
   1a682:	9100      	str	r1, [sp, #0]
   1a684:	4651      	mov	r1, sl
   1a686:	4648      	mov	r0, r9
   1a688:	f7f4 ffe2 	bl	f650 <print_formatted>
		break;
   1a68c:	e7ce      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a68e:	686b      	ldr	r3, [r5, #4]
   1a690:	682a      	ldr	r2, [r5, #0]
   1a692:	6969      	ldr	r1, [r5, #20]
   1a694:	9103      	str	r1, [sp, #12]
   1a696:	6929      	ldr	r1, [r5, #16]
   1a698:	9102      	str	r1, [sp, #8]
   1a69a:	68e9      	ldr	r1, [r5, #12]
   1a69c:	9101      	str	r1, [sp, #4]
   1a69e:	68a9      	ldr	r1, [r5, #8]
   1a6a0:	9100      	str	r1, [sp, #0]
   1a6a2:	4651      	mov	r1, sl
   1a6a4:	4648      	mov	r0, r9
   1a6a6:	f7f4 ffd3 	bl	f650 <print_formatted>
		break;
   1a6aa:	e7bf      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a6ac:	686b      	ldr	r3, [r5, #4]
   1a6ae:	682a      	ldr	r2, [r5, #0]
   1a6b0:	69a9      	ldr	r1, [r5, #24]
   1a6b2:	9104      	str	r1, [sp, #16]
   1a6b4:	6969      	ldr	r1, [r5, #20]
   1a6b6:	9103      	str	r1, [sp, #12]
   1a6b8:	6929      	ldr	r1, [r5, #16]
   1a6ba:	9102      	str	r1, [sp, #8]
   1a6bc:	68e9      	ldr	r1, [r5, #12]
   1a6be:	9101      	str	r1, [sp, #4]
   1a6c0:	68a9      	ldr	r1, [r5, #8]
   1a6c2:	9100      	str	r1, [sp, #0]
   1a6c4:	4651      	mov	r1, sl
   1a6c6:	4648      	mov	r0, r9
   1a6c8:	f7f4 ffc2 	bl	f650 <print_formatted>
		break;
   1a6cc:	e7ae      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a6ce:	686b      	ldr	r3, [r5, #4]
   1a6d0:	682a      	ldr	r2, [r5, #0]
   1a6d2:	69e9      	ldr	r1, [r5, #28]
   1a6d4:	9105      	str	r1, [sp, #20]
   1a6d6:	69a9      	ldr	r1, [r5, #24]
   1a6d8:	9104      	str	r1, [sp, #16]
   1a6da:	6969      	ldr	r1, [r5, #20]
   1a6dc:	9103      	str	r1, [sp, #12]
   1a6de:	6929      	ldr	r1, [r5, #16]
   1a6e0:	9102      	str	r1, [sp, #8]
   1a6e2:	68e9      	ldr	r1, [r5, #12]
   1a6e4:	9101      	str	r1, [sp, #4]
   1a6e6:	68a9      	ldr	r1, [r5, #8]
   1a6e8:	9100      	str	r1, [sp, #0]
   1a6ea:	4651      	mov	r1, sl
   1a6ec:	4648      	mov	r0, r9
   1a6ee:	f7f4 ffaf 	bl	f650 <print_formatted>
		break;
   1a6f2:	e79b      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a6f4:	686b      	ldr	r3, [r5, #4]
   1a6f6:	682a      	ldr	r2, [r5, #0]
   1a6f8:	6a29      	ldr	r1, [r5, #32]
   1a6fa:	9106      	str	r1, [sp, #24]
   1a6fc:	69e9      	ldr	r1, [r5, #28]
   1a6fe:	9105      	str	r1, [sp, #20]
   1a700:	69a9      	ldr	r1, [r5, #24]
   1a702:	9104      	str	r1, [sp, #16]
   1a704:	6969      	ldr	r1, [r5, #20]
   1a706:	9103      	str	r1, [sp, #12]
   1a708:	6929      	ldr	r1, [r5, #16]
   1a70a:	9102      	str	r1, [sp, #8]
   1a70c:	68e9      	ldr	r1, [r5, #12]
   1a70e:	9101      	str	r1, [sp, #4]
   1a710:	68a9      	ldr	r1, [r5, #8]
   1a712:	9100      	str	r1, [sp, #0]
   1a714:	4651      	mov	r1, sl
   1a716:	4648      	mov	r0, r9
   1a718:	f7f4 ff9a 	bl	f650 <print_formatted>
		break;
   1a71c:	e786      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a71e:	686b      	ldr	r3, [r5, #4]
   1a720:	682a      	ldr	r2, [r5, #0]
   1a722:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a724:	9107      	str	r1, [sp, #28]
   1a726:	6a29      	ldr	r1, [r5, #32]
   1a728:	9106      	str	r1, [sp, #24]
   1a72a:	69e9      	ldr	r1, [r5, #28]
   1a72c:	9105      	str	r1, [sp, #20]
   1a72e:	69a9      	ldr	r1, [r5, #24]
   1a730:	9104      	str	r1, [sp, #16]
   1a732:	6969      	ldr	r1, [r5, #20]
   1a734:	9103      	str	r1, [sp, #12]
   1a736:	6929      	ldr	r1, [r5, #16]
   1a738:	9102      	str	r1, [sp, #8]
   1a73a:	68e9      	ldr	r1, [r5, #12]
   1a73c:	9101      	str	r1, [sp, #4]
   1a73e:	68a9      	ldr	r1, [r5, #8]
   1a740:	9100      	str	r1, [sp, #0]
   1a742:	4651      	mov	r1, sl
   1a744:	4648      	mov	r0, r9
   1a746:	f7f4 ff83 	bl	f650 <print_formatted>
		break;
   1a74a:	e76f      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a74c:	686b      	ldr	r3, [r5, #4]
   1a74e:	682a      	ldr	r2, [r5, #0]
   1a750:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1a752:	9108      	str	r1, [sp, #32]
   1a754:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a756:	9107      	str	r1, [sp, #28]
   1a758:	6a29      	ldr	r1, [r5, #32]
   1a75a:	9106      	str	r1, [sp, #24]
   1a75c:	69e9      	ldr	r1, [r5, #28]
   1a75e:	9105      	str	r1, [sp, #20]
   1a760:	69a9      	ldr	r1, [r5, #24]
   1a762:	9104      	str	r1, [sp, #16]
   1a764:	6969      	ldr	r1, [r5, #20]
   1a766:	9103      	str	r1, [sp, #12]
   1a768:	6929      	ldr	r1, [r5, #16]
   1a76a:	9102      	str	r1, [sp, #8]
   1a76c:	68e9      	ldr	r1, [r5, #12]
   1a76e:	9101      	str	r1, [sp, #4]
   1a770:	68a9      	ldr	r1, [r5, #8]
   1a772:	9100      	str	r1, [sp, #0]
   1a774:	4651      	mov	r1, sl
   1a776:	4648      	mov	r0, r9
   1a778:	f7f4 ff6a 	bl	f650 <print_formatted>
		break;
   1a77c:	e756      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a77e:	686b      	ldr	r3, [r5, #4]
   1a780:	682a      	ldr	r2, [r5, #0]
   1a782:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1a784:	9109      	str	r1, [sp, #36]	; 0x24
   1a786:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1a788:	9108      	str	r1, [sp, #32]
   1a78a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a78c:	9107      	str	r1, [sp, #28]
   1a78e:	6a29      	ldr	r1, [r5, #32]
   1a790:	9106      	str	r1, [sp, #24]
   1a792:	69e9      	ldr	r1, [r5, #28]
   1a794:	9105      	str	r1, [sp, #20]
   1a796:	69a9      	ldr	r1, [r5, #24]
   1a798:	9104      	str	r1, [sp, #16]
   1a79a:	6969      	ldr	r1, [r5, #20]
   1a79c:	9103      	str	r1, [sp, #12]
   1a79e:	6929      	ldr	r1, [r5, #16]
   1a7a0:	9102      	str	r1, [sp, #8]
   1a7a2:	68e9      	ldr	r1, [r5, #12]
   1a7a4:	9101      	str	r1, [sp, #4]
   1a7a6:	68a9      	ldr	r1, [r5, #8]
   1a7a8:	9100      	str	r1, [sp, #0]
   1a7aa:	4651      	mov	r1, sl
   1a7ac:	4648      	mov	r0, r9
   1a7ae:	f7f4 ff4f 	bl	f650 <print_formatted>
		break;
   1a7b2:	e73b      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a7b4:	686b      	ldr	r3, [r5, #4]
   1a7b6:	682a      	ldr	r2, [r5, #0]
   1a7b8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a7ba:	910a      	str	r1, [sp, #40]	; 0x28
   1a7bc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1a7be:	9109      	str	r1, [sp, #36]	; 0x24
   1a7c0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1a7c2:	9108      	str	r1, [sp, #32]
   1a7c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a7c6:	9107      	str	r1, [sp, #28]
   1a7c8:	6a29      	ldr	r1, [r5, #32]
   1a7ca:	9106      	str	r1, [sp, #24]
   1a7cc:	69e9      	ldr	r1, [r5, #28]
   1a7ce:	9105      	str	r1, [sp, #20]
   1a7d0:	69a9      	ldr	r1, [r5, #24]
   1a7d2:	9104      	str	r1, [sp, #16]
   1a7d4:	6969      	ldr	r1, [r5, #20]
   1a7d6:	9103      	str	r1, [sp, #12]
   1a7d8:	6929      	ldr	r1, [r5, #16]
   1a7da:	9102      	str	r1, [sp, #8]
   1a7dc:	68e9      	ldr	r1, [r5, #12]
   1a7de:	9101      	str	r1, [sp, #4]
   1a7e0:	68a9      	ldr	r1, [r5, #8]
   1a7e2:	9100      	str	r1, [sp, #0]
   1a7e4:	4651      	mov	r1, sl
   1a7e6:	4648      	mov	r0, r9
   1a7e8:	f7f4 ff32 	bl	f650 <print_formatted>
		break;
   1a7ec:	e71e      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a7ee:	686b      	ldr	r3, [r5, #4]
   1a7f0:	682a      	ldr	r2, [r5, #0]
   1a7f2:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1a7f4:	910b      	str	r1, [sp, #44]	; 0x2c
   1a7f6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a7f8:	910a      	str	r1, [sp, #40]	; 0x28
   1a7fa:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1a7fc:	9109      	str	r1, [sp, #36]	; 0x24
   1a7fe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1a800:	9108      	str	r1, [sp, #32]
   1a802:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a804:	9107      	str	r1, [sp, #28]
   1a806:	6a29      	ldr	r1, [r5, #32]
   1a808:	9106      	str	r1, [sp, #24]
   1a80a:	69e9      	ldr	r1, [r5, #28]
   1a80c:	9105      	str	r1, [sp, #20]
   1a80e:	69a9      	ldr	r1, [r5, #24]
   1a810:	9104      	str	r1, [sp, #16]
   1a812:	6969      	ldr	r1, [r5, #20]
   1a814:	9103      	str	r1, [sp, #12]
   1a816:	6929      	ldr	r1, [r5, #16]
   1a818:	9102      	str	r1, [sp, #8]
   1a81a:	68e9      	ldr	r1, [r5, #12]
   1a81c:	9101      	str	r1, [sp, #4]
   1a81e:	68a9      	ldr	r1, [r5, #8]
   1a820:	9100      	str	r1, [sp, #0]
   1a822:	4651      	mov	r1, sl
   1a824:	4648      	mov	r0, r9
   1a826:	f7f4 ff13 	bl	f650 <print_formatted>
		break;
   1a82a:	e6ff      	b.n	1a62c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1a82c:	686b      	ldr	r3, [r5, #4]
   1a82e:	682a      	ldr	r2, [r5, #0]
   1a830:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1a832:	910c      	str	r1, [sp, #48]	; 0x30
   1a834:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1a836:	910b      	str	r1, [sp, #44]	; 0x2c
   1a838:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1a83a:	910a      	str	r1, [sp, #40]	; 0x28
   1a83c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1a83e:	9109      	str	r1, [sp, #36]	; 0x24
   1a840:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1a842:	9108      	str	r1, [sp, #32]
   1a844:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a846:	9107      	str	r1, [sp, #28]
   1a848:	6a29      	ldr	r1, [r5, #32]
   1a84a:	9106      	str	r1, [sp, #24]
   1a84c:	69e9      	ldr	r1, [r5, #28]
   1a84e:	9105      	str	r1, [sp, #20]
   1a850:	69a9      	ldr	r1, [r5, #24]
   1a852:	9104      	str	r1, [sp, #16]
   1a854:	6969      	ldr	r1, [r5, #20]
   1a856:	9103      	str	r1, [sp, #12]
   1a858:	6929      	ldr	r1, [r5, #16]
   1a85a:	9102      	str	r1, [sp, #8]
   1a85c:	68e9      	ldr	r1, [r5, #12]
   1a85e:	9101      	str	r1, [sp, #4]
   1a860:	68a9      	ldr	r1, [r5, #8]
   1a862:	9100      	str	r1, [sp, #0]
   1a864:	4651      	mov	r1, sl
   1a866:	4648      	mov	r0, r9
   1a868:	f7f4 fef2 	bl	f650 <print_formatted>
}
   1a86c:	e6de      	b.n	1a62c <std_print+0x74>

0001a86e <log_output_flush>:
{
   1a86e:	b510      	push	{r4, lr}
   1a870:	4604      	mov	r4, r0
		     output->control_block->offset,
   1a872:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1a874:	6853      	ldr	r3, [r2, #4]
   1a876:	6812      	ldr	r2, [r2, #0]
   1a878:	6881      	ldr	r1, [r0, #8]
   1a87a:	6800      	ldr	r0, [r0, #0]
   1a87c:	f7ff fe77 	bl	1a56e <buffer_write>
	output->control_block->offset = 0;
   1a880:	6863      	ldr	r3, [r4, #4]
   1a882:	2200      	movs	r2, #0
   1a884:	601a      	str	r2, [r3, #0]
}
   1a886:	bd10      	pop	{r4, pc}

0001a888 <out_func>:
{
   1a888:	b538      	push	{r3, r4, r5, lr}
   1a88a:	4605      	mov	r5, r0
   1a88c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1a88e:	684b      	ldr	r3, [r1, #4]
   1a890:	681a      	ldr	r2, [r3, #0]
   1a892:	68cb      	ldr	r3, [r1, #12]
   1a894:	429a      	cmp	r2, r3
   1a896:	d00f      	beq.n	1a8b8 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   1a898:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a89a:	f3bf 8f5b 	dmb	ish
   1a89e:	e853 2f00 	ldrex	r2, [r3]
   1a8a2:	1c51      	adds	r1, r2, #1
   1a8a4:	e843 1000 	strex	r0, r1, [r3]
   1a8a8:	2800      	cmp	r0, #0
   1a8aa:	d1f8      	bne.n	1a89e <out_func+0x16>
   1a8ac:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1a8b0:	68a3      	ldr	r3, [r4, #8]
   1a8b2:	549d      	strb	r5, [r3, r2]
}
   1a8b4:	2000      	movs	r0, #0
   1a8b6:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   1a8b8:	4608      	mov	r0, r1
   1a8ba:	f7ff ffd8 	bl	1a86e <log_output_flush>
   1a8be:	e7eb      	b.n	1a898 <out_func+0x10>

0001a8c0 <log_output_msg_process>:
{
   1a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8c2:	b085      	sub	sp, #20
   1a8c4:	4606      	mov	r6, r0
   1a8c6:	460c      	mov	r4, r1
   1a8c8:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1a8ca:	7a0b      	ldrb	r3, [r1, #8]
   1a8cc:	f083 0301 	eor.w	r3, r3, #1
   1a8d0:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   1a8d4:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   1a8d6:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   1a8d8:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   1a8dc:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   1a8de:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   1a8e2:	f011 0507 	ands.w	r5, r1, #7
   1a8e6:	d10f      	bne.n	1a908 <log_output_msg_process+0x48>
   1a8e8:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1a8ea:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   1a8ec:	f013 0f01 	tst.w	r3, #1
   1a8f0:	d014      	beq.n	1a91c <log_output_msg_process+0x5c>
	} else if (raw_string) {
   1a8f2:	b9c5      	cbnz	r5, 1a926 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   1a8f4:	4631      	mov	r1, r6
   1a8f6:	4620      	mov	r0, r4
   1a8f8:	f7f5 f826 	bl	f948 <raw_string_print>
	if (!raw_string) {
   1a8fc:	b9cd      	cbnz	r5, 1a932 <log_output_msg_process+0x72>
	log_output_flush(output);
   1a8fe:	4630      	mov	r0, r6
   1a900:	f7ff ffb5 	bl	1a86e <log_output_flush>
}
   1a904:	b005      	add	sp, #20
   1a906:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   1a908:	9002      	str	r0, [sp, #8]
   1a90a:	f8cd c004 	str.w	ip, [sp, #4]
   1a90e:	9500      	str	r5, [sp, #0]
   1a910:	4639      	mov	r1, r7
   1a912:	4630      	mov	r0, r6
   1a914:	f7f4 ffb2 	bl	f87c <prefix_print>
   1a918:	4602      	mov	r2, r0
   1a91a:	e7e6      	b.n	1a8ea <log_output_msg_process+0x2a>
		std_print(msg, output);
   1a91c:	4631      	mov	r1, r6
   1a91e:	4620      	mov	r0, r4
   1a920:	f7ff fe4a 	bl	1a5b8 <std_print>
   1a924:	e7ea      	b.n	1a8fc <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   1a926:	463b      	mov	r3, r7
   1a928:	4631      	mov	r1, r6
   1a92a:	4620      	mov	r0, r4
   1a92c:	f7f4 ffe2 	bl	f8f4 <hexdump_print>
   1a930:	e7e4      	b.n	1a8fc <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   1a932:	462a      	mov	r2, r5
   1a934:	4639      	mov	r1, r7
   1a936:	4630      	mov	r0, r6
   1a938:	f7ff fe32 	bl	1a5a0 <postfix_print>
   1a93c:	e7df      	b.n	1a8fe <log_output_msg_process+0x3e>

0001a93e <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1a93e:	2200      	movs	r2, #0
   1a940:	6002      	str	r2, [r0, #0]
   1a942:	6042      	str	r2, [r0, #4]
   1a944:	6082      	str	r2, [r0, #8]
}
   1a946:	4770      	bx	lr

0001a948 <abort_function>:
{
   1a948:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1a94a:	2000      	movs	r0, #0
   1a94c:	f7f4 f9b0 	bl	ecb0 <sys_reboot>

0001a950 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a950:	b538      	push	{r3, r4, r5, lr}
   1a952:	4604      	mov	r4, r0

	if (esf != NULL) {
   1a954:	460d      	mov	r5, r1
   1a956:	b111      	cbz	r1, 1a95e <z_arm_fatal_error+0xe>
		esf_dump(esf);
   1a958:	4608      	mov	r0, r1
   1a95a:	f7f5 fab7 	bl	fecc <esf_dump>
	}
	z_fatal_error(reason, esf);
   1a95e:	4629      	mov	r1, r5
   1a960:	4620      	mov	r0, r4
   1a962:	f7fa fc6d 	bl	15240 <z_fatal_error>
}
   1a966:	bd38      	pop	{r3, r4, r5, pc}

0001a968 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1a968:	b508      	push	{r3, lr}
   1a96a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1a96c:	6800      	ldr	r0, [r0, #0]
   1a96e:	f7ff ffef 	bl	1a950 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1a972:	bd08      	pop	{r3, pc}

0001a974 <z_irq_spurious>:
{
   1a974:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1a976:	2100      	movs	r1, #0
   1a978:	2001      	movs	r0, #1
   1a97a:	f7ff ffe9 	bl	1a950 <z_arm_fatal_error>
}
   1a97e:	bd08      	pop	{r3, pc}

0001a980 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1a980:	b508      	push	{r3, lr}
	handler();
   1a982:	f7f5 fb4f 	bl	10024 <z_SysNmiOnReset>
	z_arm_int_exit();
   1a986:	f7f5 fc4b 	bl	10220 <z_arm_exc_exit>
}
   1a98a:	bd08      	pop	{r3, pc}

0001a98c <memory_fault_recoverable>:
}
   1a98c:	2000      	movs	r0, #0
   1a98e:	4770      	bx	lr

0001a990 <fault_handle>:
{
   1a990:	b508      	push	{r3, lr}
	*recoverable = false;
   1a992:	2300      	movs	r3, #0
   1a994:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   1a996:	1ecb      	subs	r3, r1, #3
   1a998:	2b09      	cmp	r3, #9
   1a99a:	d81a      	bhi.n	1a9d2 <fault_handle+0x42>
   1a99c:	e8df f003 	tbb	[pc, r3]
   1a9a0:	110d0905 	.word	0x110d0905
   1a9a4:	19191919 	.word	0x19191919
   1a9a8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   1a9aa:	4611      	mov	r1, r2
   1a9ac:	f7f5 fecc 	bl	10748 <hard_fault>
}
   1a9b0:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1a9b2:	2100      	movs	r1, #0
   1a9b4:	f7f5 fde6 	bl	10584 <mem_manage_fault>
		break;
   1a9b8:	e7fa      	b.n	1a9b0 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   1a9ba:	2100      	movs	r1, #0
   1a9bc:	f7f5 fd0a 	bl	103d4 <bus_fault>
		break;
   1a9c0:	e7f6      	b.n	1a9b0 <fault_handle+0x20>
		reason = usage_fault(esf);
   1a9c2:	f7f5 fc3b 	bl	1023c <usage_fault>
		break;
   1a9c6:	e7f3      	b.n	1a9b0 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   1a9c8:	4611      	mov	r1, r2
   1a9ca:	f7f5 fce9 	bl	103a0 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1a9ce:	2000      	movs	r0, #0
		break;
   1a9d0:	e7ee      	b.n	1a9b0 <fault_handle+0x20>
		reserved_exception(esf, fault);
   1a9d2:	f7f5 ff5f 	bl	10894 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1a9d6:	2000      	movs	r0, #0
	return reason;
   1a9d8:	e7ea      	b.n	1a9b0 <fault_handle+0x20>

0001a9da <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   1a9da:	6843      	ldr	r3, [r0, #4]
   1a9dc:	1e5a      	subs	r2, r3, #1
		&&
   1a9de:	4213      	tst	r3, r2
   1a9e0:	d106      	bne.n	1a9f0 <mpu_partition_is_valid+0x16>
		&&
   1a9e2:	2b1f      	cmp	r3, #31
   1a9e4:	d906      	bls.n	1a9f4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   1a9e6:	6803      	ldr	r3, [r0, #0]
		&&
   1a9e8:	421a      	tst	r2, r3
   1a9ea:	d005      	beq.n	1a9f8 <mpu_partition_is_valid+0x1e>
   1a9ec:	2000      	movs	r0, #0
   1a9ee:	4770      	bx	lr
   1a9f0:	2000      	movs	r0, #0
   1a9f2:	4770      	bx	lr
   1a9f4:	2000      	movs	r0, #0
   1a9f6:	4770      	bx	lr
   1a9f8:	2001      	movs	r0, #1
}
   1a9fa:	4770      	bx	lr

0001a9fc <mpu_configure_region>:
{
   1a9fc:	b500      	push	{lr}
   1a9fe:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1aa00:	680b      	ldr	r3, [r1, #0]
   1aa02:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1aa04:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1aa06:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   1aa08:	2b20      	cmp	r3, #32
   1aa0a:	d912      	bls.n	1aa32 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   1aa0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1aa10:	d811      	bhi.n	1aa36 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1aa12:	3b01      	subs	r3, #1
   1aa14:	fab3 f383 	clz	r3, r3
   1aa18:	f1c3 031f 	rsb	r3, r3, #31
   1aa1c:	005b      	lsls	r3, r3, #1
   1aa1e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1aa22:	4313      	orrs	r3, r2
   1aa24:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   1aa26:	a901      	add	r1, sp, #4
   1aa28:	f7f6 f890 	bl	10b4c <region_allocate_and_init>
}
   1aa2c:	b005      	add	sp, #20
   1aa2e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   1aa32:	2308      	movs	r3, #8
   1aa34:	e7f5      	b.n	1aa22 <mpu_configure_region+0x26>
		return REGION_4G;
   1aa36:	233e      	movs	r3, #62	; 0x3e
   1aa38:	e7f3      	b.n	1aa22 <mpu_configure_region+0x26>

0001aa3a <arm_core_mpu_configure_static_mpu_regions>:
{
   1aa3a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1aa3c:	f7f6 f8e8 	bl	10c10 <mpu_configure_static_mpu_regions>
}
   1aa40:	bd08      	pop	{r3, pc}

0001aa42 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   1aa42:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   1aa44:	f7f6 f8ee 	bl	10c24 <mpu_configure_dynamic_mpu_regions>
}
   1aa48:	bd08      	pop	{r3, pc}

0001aa4a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1aa4a:	4602      	mov	r2, r0
   1aa4c:	780b      	ldrb	r3, [r1, #0]
   1aa4e:	b11b      	cbz	r3, 1aa58 <strcpy+0xe>
		*d = *s;
   1aa50:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   1aa54:	3101      	adds	r1, #1
   1aa56:	e7f9      	b.n	1aa4c <strcpy+0x2>
	}

	*d = '\0';
   1aa58:	7013      	strb	r3, [r2, #0]

	return dest;
}
   1aa5a:	4770      	bx	lr

0001aa5c <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1aa5c:	4603      	mov	r3, r0
   1aa5e:	b1a2      	cbz	r2, 1aa8a <strncpy+0x2e>
{
   1aa60:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   1aa62:	780c      	ldrb	r4, [r1, #0]
   1aa64:	b12c      	cbz	r4, 1aa72 <strncpy+0x16>
		*d = *s;
   1aa66:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   1aa6a:	3101      	adds	r1, #1
		d++;
		n--;
   1aa6c:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   1aa6e:	2a00      	cmp	r2, #0
   1aa70:	d1f7      	bne.n	1aa62 <strncpy+0x6>
	}

	while (n > 0) {
   1aa72:	b122      	cbz	r2, 1aa7e <strncpy+0x22>
		*d = '\0';
   1aa74:	2100      	movs	r1, #0
   1aa76:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   1aa7a:	3a01      	subs	r2, #1
   1aa7c:	e7f9      	b.n	1aa72 <strncpy+0x16>
	}

	return dest;
}
   1aa7e:	bc10      	pop	{r4}
   1aa80:	4770      	bx	lr
		*d = '\0';
   1aa82:	2100      	movs	r1, #0
   1aa84:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1aa88:	3a01      	subs	r2, #1
	while (n > 0) {
   1aa8a:	2a00      	cmp	r2, #0
   1aa8c:	d1f9      	bne.n	1aa82 <strncpy+0x26>
   1aa8e:	4770      	bx	lr

0001aa90 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1aa90:	4603      	mov	r3, r0
	size_t n = 0;
   1aa92:	2000      	movs	r0, #0

	while (*s != '\0') {
   1aa94:	781a      	ldrb	r2, [r3, #0]
   1aa96:	b112      	cbz	r2, 1aa9e <strlen+0xe>
		s++;
   1aa98:	3301      	adds	r3, #1
		n++;
   1aa9a:	3001      	adds	r0, #1
   1aa9c:	e7fa      	b.n	1aa94 <strlen+0x4>
	}

	return n;
}
   1aa9e:	4770      	bx	lr

0001aaa0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1aaa0:	4603      	mov	r3, r0
	size_t n = 0;
   1aaa2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1aaa4:	781a      	ldrb	r2, [r3, #0]
   1aaa6:	b122      	cbz	r2, 1aab2 <strnlen+0x12>
   1aaa8:	4288      	cmp	r0, r1
   1aaaa:	d202      	bcs.n	1aab2 <strnlen+0x12>
		s++;
   1aaac:	3301      	adds	r3, #1
		n++;
   1aaae:	3001      	adds	r0, #1
   1aab0:	e7f8      	b.n	1aaa4 <strnlen+0x4>
	}

	return n;
}
   1aab2:	4770      	bx	lr

0001aab4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1aab4:	7803      	ldrb	r3, [r0, #0]
   1aab6:	780a      	ldrb	r2, [r1, #0]
   1aab8:	4293      	cmp	r3, r2
   1aaba:	d103      	bne.n	1aac4 <strcmp+0x10>
   1aabc:	b113      	cbz	r3, 1aac4 <strcmp+0x10>
		s1++;
   1aabe:	3001      	adds	r0, #1
		s2++;
   1aac0:	3101      	adds	r1, #1
   1aac2:	e7f7      	b.n	1aab4 <strcmp>
	}

	return *s1 - *s2;
}
   1aac4:	1a98      	subs	r0, r3, r2
   1aac6:	4770      	bx	lr

0001aac8 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1aac8:	b17a      	cbz	r2, 1aaea <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1aaca:	1e53      	subs	r3, r2, #1
   1aacc:	d00f      	beq.n	1aaee <memcmp+0x26>
{
   1aace:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   1aad0:	7804      	ldrb	r4, [r0, #0]
   1aad2:	780a      	ldrb	r2, [r1, #0]
   1aad4:	4294      	cmp	r4, r2
   1aad6:	d103      	bne.n	1aae0 <memcmp+0x18>
		c1++;
   1aad8:	3001      	adds	r0, #1
		c2++;
   1aada:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   1aadc:	3b01      	subs	r3, #1
   1aade:	d1f7      	bne.n	1aad0 <memcmp+0x8>
	}

	return *c1 - *c2;
   1aae0:	7800      	ldrb	r0, [r0, #0]
   1aae2:	780b      	ldrb	r3, [r1, #0]
   1aae4:	1ac0      	subs	r0, r0, r3
}
   1aae6:	bc10      	pop	{r4}
   1aae8:	4770      	bx	lr
		return 0;
   1aaea:	2000      	movs	r0, #0
   1aaec:	4770      	bx	lr
	return *c1 - *c2;
   1aaee:	7800      	ldrb	r0, [r0, #0]
   1aaf0:	780b      	ldrb	r3, [r1, #0]
   1aaf2:	1ac0      	subs	r0, r0, r3
}
   1aaf4:	4770      	bx	lr

0001aaf6 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1aaf6:	1a43      	subs	r3, r0, r1
   1aaf8:	4293      	cmp	r3, r2
   1aafa:	d30b      	bcc.n	1ab14 <memmove+0x1e>
	char *dest = d;
   1aafc:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1aafe:	b17a      	cbz	r2, 1ab20 <memmove+0x2a>
{
   1ab00:	b410      	push	{r4}
			*dest = *src;
   1ab02:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ab06:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
   1ab0a:	3a01      	subs	r2, #1
		while (n > 0) {
   1ab0c:	2a00      	cmp	r2, #0
   1ab0e:	d1f8      	bne.n	1ab02 <memmove+0xc>
		}
	}

	return d;
}
   1ab10:	bc10      	pop	{r4}
   1ab12:	4770      	bx	lr
		while (n > 0) {
   1ab14:	b11a      	cbz	r2, 1ab1e <memmove+0x28>
			n--;
   1ab16:	3a01      	subs	r2, #1
			dest[n] = src[n];
   1ab18:	5c8b      	ldrb	r3, [r1, r2]
   1ab1a:	5483      	strb	r3, [r0, r2]
   1ab1c:	e7fa      	b.n	1ab14 <memmove+0x1e>
   1ab1e:	4770      	bx	lr
   1ab20:	4770      	bx	lr

0001ab22 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1ab22:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1ab24:	ea80 0301 	eor.w	r3, r0, r1
   1ab28:	f013 0f03 	tst.w	r3, #3
   1ab2c:	d001      	beq.n	1ab32 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   1ab2e:	4603      	mov	r3, r0
   1ab30:	e017      	b.n	1ab62 <memcpy+0x40>
   1ab32:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   1ab34:	f013 0f03 	tst.w	r3, #3
   1ab38:	d00b      	beq.n	1ab52 <memcpy+0x30>
			if (n == 0) {
   1ab3a:	b1a2      	cbz	r2, 1ab66 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   1ab3c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ab40:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1ab44:	3a01      	subs	r2, #1
   1ab46:	e7f5      	b.n	1ab34 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   1ab48:	f851 4b04 	ldr.w	r4, [r1], #4
   1ab4c:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   1ab50:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   1ab52:	2a03      	cmp	r2, #3
   1ab54:	d8f8      	bhi.n	1ab48 <memcpy+0x26>
   1ab56:	e004      	b.n	1ab62 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   1ab58:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ab5c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1ab60:	3a01      	subs	r2, #1
	while (n > 0) {
   1ab62:	2a00      	cmp	r2, #0
   1ab64:	d1f8      	bne.n	1ab58 <memcpy+0x36>
	}

	return d;
}
   1ab66:	bc10      	pop	{r4}
   1ab68:	4770      	bx	lr

0001ab6a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1ab6a:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1ab6c:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1ab6e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1ab70:	f013 0f03 	tst.w	r3, #3
   1ab74:	d004      	beq.n	1ab80 <memset+0x16>
		if (n == 0) {
   1ab76:	b19a      	cbz	r2, 1aba0 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   1ab78:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1ab7c:	3a01      	subs	r2, #1
   1ab7e:	e7f7      	b.n	1ab70 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   1ab80:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   1ab82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   1ab86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1ab8a:	2a03      	cmp	r2, #3
   1ab8c:	d906      	bls.n	1ab9c <memset+0x32>
		*(d_word++) = c_word;
   1ab8e:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   1ab92:	3a04      	subs	r2, #4
   1ab94:	e7f9      	b.n	1ab8a <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   1ab96:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1ab9a:	3a01      	subs	r2, #1
	while (n > 0) {
   1ab9c:	2a00      	cmp	r2, #0
   1ab9e:	d1fa      	bne.n	1ab96 <memset+0x2c>
	}

	return buf;
}
   1aba0:	bc10      	pop	{r4}
   1aba2:	4770      	bx	lr

0001aba4 <_stdout_hook_default>:
}
   1aba4:	f04f 30ff 	mov.w	r0, #4294967295
   1aba8:	4770      	bx	lr

0001abaa <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1abaa:	b084      	sub	sp, #16
   1abac:	ab04      	add	r3, sp, #16
   1abae:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1abb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1abb6:	2b06      	cmp	r3, #6
   1abb8:	d001      	beq.n	1abbe <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1abba:	b004      	add	sp, #16
   1abbc:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1abbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1abc2:	2201      	movs	r2, #1
   1abc4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1abc8:	f3bf 8f4f 	dsb	sy
        __WFE();
   1abcc:	bf20      	wfe
    while (true)
   1abce:	e7fd      	b.n	1abcc <pm_power_state_set+0x22>

0001abd0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1abd0:	b084      	sub	sp, #16
   1abd2:	ab04      	add	r3, sp, #16
   1abd4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1abd8:	2300      	movs	r3, #0
   1abda:	f383 8811 	msr	BASEPRI, r3
   1abde:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1abe2:	b004      	add	sp, #16
   1abe4:	4770      	bx	lr

0001abe6 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1abe6:	b510      	push	{r4, lr}
   1abe8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1abea:	2301      	movs	r3, #1
   1abec:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1abf0:	2106      	movs	r1, #6
   1abf2:	f7f9 fb37 	bl	14264 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1abf6:	b918      	cbnz	r0, 1ac00 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1abf8:	79a3      	ldrb	r3, [r4, #6]
   1abfa:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1abfe:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1ac00:	bd10      	pop	{r4, pc}

0001ac02 <bt_br_init>:
}
   1ac02:	2000      	movs	r0, #0
   1ac04:	4770      	bx	lr

0001ac06 <le_set_event_mask>:
{
   1ac06:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1ac08:	2108      	movs	r1, #8
   1ac0a:	f242 0001 	movw	r0, #8193	; 0x2001
   1ac0e:	f7f6 fbe9 	bl	113e4 <bt_hci_cmd_create>
	if (!buf) {
   1ac12:	b1a0      	cbz	r0, 1ac3e <le_set_event_mask+0x38>
   1ac14:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   1ac16:	2108      	movs	r1, #8
   1ac18:	4408      	add	r0, r1
   1ac1a:	f000 f9c6 	bl	1afaa <net_buf_simple_add>
	dst[0] = val;
   1ac1e:	2302      	movs	r3, #2
   1ac20:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1ac22:	2200      	movs	r2, #0
   1ac24:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
   1ac26:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1ac28:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1ac2a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1ac2c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1ac2e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1ac30:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1ac32:	4621      	mov	r1, r4
   1ac34:	f242 0001 	movw	r0, #8193	; 0x2001
   1ac38:	f7f6 fc10 	bl	1145c <bt_hci_cmd_send_sync>
}
   1ac3c:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1ac3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ac42:	e7fb      	b.n	1ac3c <le_set_event_mask+0x36>

0001ac44 <set_event_mask>:
{
   1ac44:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1ac46:	2108      	movs	r1, #8
   1ac48:	f640 4001 	movw	r0, #3073	; 0xc01
   1ac4c:	f7f6 fbca 	bl	113e4 <bt_hci_cmd_create>
	if (!buf) {
   1ac50:	b1b0      	cbz	r0, 1ac80 <set_event_mask+0x3c>
   1ac52:	4604      	mov	r4, r0
   1ac54:	2108      	movs	r1, #8
   1ac56:	4408      	add	r0, r1
   1ac58:	f000 f9a7 	bl	1afaa <net_buf_simple_add>
	dst[0] = val;
   1ac5c:	2200      	movs	r2, #0
   1ac5e:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   1ac60:	2380      	movs	r3, #128	; 0x80
   1ac62:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1ac64:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1ac66:	2302      	movs	r3, #2
   1ac68:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   1ac6a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1ac6c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1ac6e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1ac70:	2320      	movs	r3, #32
   1ac72:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1ac74:	4621      	mov	r1, r4
   1ac76:	f640 4001 	movw	r0, #3073	; 0xc01
   1ac7a:	f7f6 fbef 	bl	1145c <bt_hci_cmd_send_sync>
}
   1ac7e:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1ac80:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ac84:	e7fb      	b.n	1ac7e <set_event_mask+0x3a>

0001ac86 <bt_init>:
{
   1ac86:	b510      	push	{r4, lr}
	err = hci_init();
   1ac88:	f7f6 fd9c 	bl	117c4 <hci_init>
	if (err) {
   1ac8c:	4604      	mov	r4, r0
   1ac8e:	b108      	cbz	r0, 1ac94 <bt_init+0xe>
}
   1ac90:	4620      	mov	r0, r4
   1ac92:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   1ac94:	f7f6 ffaa 	bl	11bec <bt_finalize_init>
	return 0;
   1ac98:	e7fa      	b.n	1ac90 <bt_init+0xa>

0001ac9a <is_adv_using_rand_addr>:
}
   1ac9a:	2000      	movs	r0, #0
   1ac9c:	4770      	bx	lr

0001ac9e <bt_lookup_id_addr>:
}
   1ac9e:	4608      	mov	r0, r1
   1aca0:	4770      	bx	lr

0001aca2 <bt_id_set_private_addr>:
{
   1aca2:	b500      	push	{lr}
   1aca4:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1aca6:	2106      	movs	r1, #6
   1aca8:	4668      	mov	r0, sp
   1acaa:	f7f9 fadb 	bl	14264 <bt_rand>
	if (err) {
   1acae:	b110      	cbz	r0, 1acb6 <bt_id_set_private_addr+0x14>
}
   1acb0:	b003      	add	sp, #12
   1acb2:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   1acb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1acba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1acbe:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1acc2:	4668      	mov	r0, sp
   1acc4:	f7f7 f870 	bl	11da8 <set_random_address>
	if (err)  {
   1acc8:	e7f2      	b.n	1acb0 <bt_id_set_private_addr+0xe>

0001acca <bt_id_scan_random_addr_check>:
}
   1acca:	2001      	movs	r0, #1
   1accc:	4770      	bx	lr

0001acce <get_adv_props_legacy>:
	switch (evt_type) {
   1acce:	2804      	cmp	r0, #4
   1acd0:	d80a      	bhi.n	1ace8 <get_adv_props_legacy+0x1a>
   1acd2:	e8df f000 	tbb	[pc, r0]
   1acd6:	0b03      	.short	0x0b03
   1acd8:	050c      	.short	0x050c
   1acda:	07          	.byte	0x07
   1acdb:	00          	.byte	0x00
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   1acdc:	2003      	movs	r0, #3
   1acde:	4770      	bx	lr
		return 0;
   1ace0:	2000      	movs	r0, #0
   1ace2:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   1ace4:	200a      	movs	r0, #10
   1ace6:	4770      	bx	lr
		return 0;
   1ace8:	2000      	movs	r0, #0
   1acea:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   1acec:	2005      	movs	r0, #5
}
   1acee:	4770      	bx	lr

0001acf0 <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   1acf0:	7803      	ldrb	r3, [r0, #0]
   1acf2:	2b01      	cmp	r3, #1
   1acf4:	d815      	bhi.n	1ad22 <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1acf6:	6843      	ldr	r3, [r0, #4]
   1acf8:	f033 030f 	bics.w	r3, r3, #15
   1acfc:	d113      	bne.n	1ad26 <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   1acfe:	8902      	ldrh	r2, [r0, #8]
   1ad00:	1f13      	subs	r3, r2, #4
   1ad02:	b29b      	uxth	r3, r3
   1ad04:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   1ad08:	428b      	cmp	r3, r1
   1ad0a:	d80e      	bhi.n	1ad2a <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1ad0c:	8941      	ldrh	r1, [r0, #10]
   1ad0e:	1f0b      	subs	r3, r1, #4
   1ad10:	b29b      	uxth	r3, r3
   1ad12:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   1ad16:	4283      	cmp	r3, r0
   1ad18:	d809      	bhi.n	1ad2e <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   1ad1a:	428a      	cmp	r2, r1
   1ad1c:	d309      	bcc.n	1ad32 <valid_le_scan_param+0x42>
	return true;
   1ad1e:	2001      	movs	r0, #1
   1ad20:	4770      	bx	lr
		return false;
   1ad22:	2000      	movs	r0, #0
   1ad24:	4770      	bx	lr
		return false;
   1ad26:	2000      	movs	r0, #0
   1ad28:	4770      	bx	lr
		return false;
   1ad2a:	2000      	movs	r0, #0
   1ad2c:	4770      	bx	lr
		return false;
   1ad2e:	2000      	movs	r0, #0
   1ad30:	4770      	bx	lr
		return false;
   1ad32:	2000      	movs	r0, #0
}
   1ad34:	4770      	bx	lr

0001ad36 <bt_le_scan_set_enable>:
{
   1ad36:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   1ad38:	f7f7 fa76 	bl	12228 <bt_le_scan_set_enable_legacy>
}
   1ad3c:	bd08      	pop	{r3, pc}

0001ad3e <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1ad3e:	4770      	bx	lr

0001ad40 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   1ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad44:	4604      	mov	r4, r0
   1ad46:	460d      	mov	r5, r1
   1ad48:	4617      	mov	r7, r2
   1ad4a:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ad4c:	7980      	ldrb	r0, [r0, #6]
   1ad4e:	f7f7 fca3 	bl	12698 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   1ad52:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ad54:	681b      	ldr	r3, [r3, #0]
   1ad56:	f8d3 8000 	ldr.w	r8, [r3]
   1ad5a:	463a      	mov	r2, r7
   1ad5c:	4633      	mov	r3, r6
   1ad5e:	4629      	mov	r1, r5
   1ad60:	4620      	mov	r0, r4
   1ad62:	47c0      	blx	r8
}
   1ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ad68 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   1ad68:	b538      	push	{r3, r4, r5, lr}
   1ad6a:	4604      	mov	r4, r0
   1ad6c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ad6e:	7980      	ldrb	r0, [r0, #6]
   1ad70:	f7f7 fc92 	bl	12698 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ad74:	7963      	ldrb	r3, [r4, #5]
   1ad76:	f013 0f02 	tst.w	r3, #2
   1ad7a:	d105      	bne.n	1ad88 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   1ad7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ad7e:	681b      	ldr	r3, [r3, #0]
   1ad80:	689b      	ldr	r3, [r3, #8]
   1ad82:	4629      	mov	r1, r5
   1ad84:	4620      	mov	r0, r4
   1ad86:	4798      	blx	r3
}
   1ad88:	bd38      	pop	{r3, r4, r5, pc}

0001ad8a <net_buf_id>:
{
   1ad8a:	b510      	push	{r4, lr}
   1ad8c:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ad8e:	7980      	ldrb	r0, [r0, #6]
   1ad90:	f7f7 fc82 	bl	12698 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ad94:	7f03      	ldrb	r3, [r0, #28]
   1ad96:	3317      	adds	r3, #23
   1ad98:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ad9c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1ad9e:	1a20      	subs	r0, r4, r0
}
   1ada0:	fbb0 f0f3 	udiv	r0, r0, r3
   1ada4:	bd10      	pop	{r4, pc}

0001ada6 <fixed_data_alloc>:
{
   1ada6:	b570      	push	{r4, r5, r6, lr}
   1ada8:	4604      	mov	r4, r0
   1adaa:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1adac:	7980      	ldrb	r0, [r0, #6]
   1adae:	f7f7 fc73 	bl	12698 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1adb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1adb4:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1adb6:	682a      	ldr	r2, [r5, #0]
   1adb8:	6819      	ldr	r1, [r3, #0]
   1adba:	428a      	cmp	r2, r1
   1adbc:	bf28      	it	cs
   1adbe:	460a      	movcs	r2, r1
   1adc0:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1adc2:	685d      	ldr	r5, [r3, #4]
   1adc4:	681e      	ldr	r6, [r3, #0]
   1adc6:	4620      	mov	r0, r4
   1adc8:	f7ff ffdf 	bl	1ad8a <net_buf_id>
}
   1adcc:	fb00 5006 	mla	r0, r0, r6, r5
   1add0:	bd70      	pop	{r4, r5, r6, pc}

0001add2 <net_buf_reset>:
	buf->len  = 0U;
   1add2:	2300      	movs	r3, #0
   1add4:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   1add6:	6903      	ldr	r3, [r0, #16]
   1add8:	6083      	str	r3, [r0, #8]
}
   1adda:	4770      	bx	lr

0001addc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ade0:	b083      	sub	sp, #12
   1ade2:	4605      	mov	r5, r0
   1ade4:	9101      	str	r1, [sp, #4]
   1ade6:	4616      	mov	r6, r2
   1ade8:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1adea:	4610      	mov	r0, r2
   1adec:	4619      	mov	r1, r3
   1adee:	f001 fcb9 	bl	1c764 <sys_clock_timeout_end_calc>
   1adf2:	4682      	mov	sl, r0
   1adf4:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   1adf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1adfa:	f3ef 8211 	mrs	r2, BASEPRI
   1adfe:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae02:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ae06:	8b6b      	ldrh	r3, [r5, #26]
   1ae08:	2b00      	cmp	r3, #0
   1ae0a:	d042      	beq.n	1ae92 <net_buf_alloc_len+0xb6>
   1ae0c:	4693      	mov	fp, r2

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ae0e:	8b2a      	ldrh	r2, [r5, #24]
   1ae10:	4293      	cmp	r3, r2
   1ae12:	d20b      	bcs.n	1ae2c <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   1ae14:	2200      	movs	r2, #0
   1ae16:	2300      	movs	r3, #0
   1ae18:	4628      	mov	r0, r5
   1ae1a:	f7fa fdad 	bl	15978 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ae1e:	4604      	mov	r4, r0
   1ae20:	b120      	cbz	r0, 1ae2c <net_buf_alloc_len+0x50>
	__asm__ volatile(
   1ae22:	f38b 8811 	msr	BASEPRI, fp
   1ae26:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1ae2a:	e015      	b.n	1ae58 <net_buf_alloc_len+0x7c>
			}
		}

		uninit_count = pool->uninit_count--;
   1ae2c:	8b6a      	ldrh	r2, [r5, #26]
   1ae2e:	1e53      	subs	r3, r2, #1
   1ae30:	836b      	strh	r3, [r5, #26]
   1ae32:	f38b 8811 	msr	BASEPRI, fp
   1ae36:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ae3a:	7f2c      	ldrb	r4, [r5, #28]
   1ae3c:	3417      	adds	r4, #23
   1ae3e:	f024 0403 	bic.w	r4, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ae42:	8b2b      	ldrh	r3, [r5, #24]
   1ae44:	1a9b      	subs	r3, r3, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ae46:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1ae48:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1ae4c:	4628      	mov	r0, r5
   1ae4e:	f7f7 fc17 	bl	12680 <pool_id>
   1ae52:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   1ae54:	7f2b      	ldrb	r3, [r5, #28]
   1ae56:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ae58:	9b01      	ldr	r3, [sp, #4]
   1ae5a:	2b00      	cmp	r3, #0
   1ae5c:	d038      	beq.n	1aed0 <net_buf_alloc_len+0xf4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ae5e:	ea56 0307 	orrs.w	r3, r6, r7
   1ae62:	d005      	beq.n	1ae70 <net_buf_alloc_len+0x94>
   1ae64:	f1b7 3fff 	cmp.w	r7, #4294967295
   1ae68:	bf08      	it	eq
   1ae6a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1ae6e:	d11d      	bne.n	1aeac <net_buf_alloc_len+0xd0>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ae70:	4632      	mov	r2, r6
   1ae72:	463b      	mov	r3, r7
   1ae74:	a901      	add	r1, sp, #4
   1ae76:	4620      	mov	r0, r4
   1ae78:	f7ff ff62 	bl	1ad40 <data_alloc>
   1ae7c:	4605      	mov	r5, r0
   1ae7e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1ae80:	bb40      	cbnz	r0, 1aed4 <net_buf_alloc_len+0xf8>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ae82:	79a0      	ldrb	r0, [r4, #6]
   1ae84:	f7f7 fc08 	bl	12698 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1ae88:	4621      	mov	r1, r4
   1ae8a:	f001 f955 	bl	1c138 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1ae8e:	462c      	mov	r4, r5
}
   1ae90:	e02a      	b.n	1aee8 <net_buf_alloc_len+0x10c>
   1ae92:	f382 8811 	msr	BASEPRI, r2
   1ae96:	f3bf 8f6f 	isb	sy
   1ae9a:	4632      	mov	r2, r6
   1ae9c:	463b      	mov	r3, r7
   1ae9e:	4628      	mov	r0, r5
   1aea0:	f7fa fd6a 	bl	15978 <z_impl_k_queue_get>
	if (!buf) {
   1aea4:	4604      	mov	r4, r0
   1aea6:	2800      	cmp	r0, #0
   1aea8:	d1d6      	bne.n	1ae58 <net_buf_alloc_len+0x7c>
   1aeaa:	e01d      	b.n	1aee8 <net_buf_alloc_len+0x10c>
			int64_t remaining = end - sys_clock_tick_get();
   1aeac:	f7fb fcfe 	bl	168ac <sys_clock_tick_get>
   1aeb0:	ebba 0800 	subs.w	r8, sl, r0
   1aeb4:	9b00      	ldr	r3, [sp, #0]
   1aeb6:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   1aeba:	f1b8 0f01 	cmp.w	r8, #1
   1aebe:	f179 0300 	sbcs.w	r3, r9, #0
   1aec2:	db02      	blt.n	1aeca <net_buf_alloc_len+0xee>
				timeout = Z_TIMEOUT_TICKS(remaining);
   1aec4:	4646      	mov	r6, r8
   1aec6:	464f      	mov	r7, r9
   1aec8:	e7d2      	b.n	1ae70 <net_buf_alloc_len+0x94>
				timeout = K_NO_WAIT;
   1aeca:	2600      	movs	r6, #0
   1aecc:	2700      	movs	r7, #0
   1aece:	e7cf      	b.n	1ae70 <net_buf_alloc_len+0x94>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   1aed0:	2300      	movs	r3, #0
   1aed2:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   1aed4:	2301      	movs	r3, #1
   1aed6:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   1aed8:	2300      	movs	r3, #0
   1aeda:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1aedc:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1aede:	9b01      	ldr	r3, [sp, #4]
   1aee0:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1aee2:	4620      	mov	r0, r4
   1aee4:	f7ff ff75 	bl	1add2 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1aee8:	4620      	mov	r0, r4
   1aeea:	b003      	add	sp, #12
   1aeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001aef0 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   1aef0:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1aef2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1aef4:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1aef6:	6809      	ldr	r1, [r1, #0]
   1aef8:	f7ff ff70 	bl	1addc <net_buf_alloc_len>
}
   1aefc:	bd08      	pop	{r3, pc}

0001aefe <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1aefe:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   1af00:	4605      	mov	r5, r0
   1af02:	f7fa fd39 	bl	15978 <z_impl_k_queue_get>
	if (!buf) {
   1af06:	4606      	mov	r6, r0
   1af08:	b190      	cbz	r0, 1af30 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1af0a:	4604      	mov	r4, r0
   1af0c:	e00a      	b.n	1af24 <net_buf_get+0x26>
   1af0e:	2200      	movs	r2, #0
   1af10:	2300      	movs	r3, #0
   1af12:	4628      	mov	r0, r5
   1af14:	f7fa fd30 	bl	15978 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1af18:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1af1a:	7963      	ldrb	r3, [r4, #5]
   1af1c:	f023 0301 	bic.w	r3, r3, #1
   1af20:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1af22:	4604      	mov	r4, r0
   1af24:	7963      	ldrb	r3, [r4, #5]
   1af26:	f013 0f01 	tst.w	r3, #1
   1af2a:	d1f0      	bne.n	1af0e <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1af2c:	2300      	movs	r3, #0
   1af2e:	6023      	str	r3, [r4, #0]

	return buf;
}
   1af30:	4630      	mov	r0, r6
   1af32:	bd70      	pop	{r4, r5, r6, pc}

0001af34 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1af34:	6883      	ldr	r3, [r0, #8]
   1af36:	440b      	add	r3, r1
   1af38:	6003      	str	r3, [r0, #0]
}
   1af3a:	4770      	bx	lr

0001af3c <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1af3c:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1af3e:	460a      	mov	r2, r1
   1af40:	6814      	ldr	r4, [r2, #0]
   1af42:	b12c      	cbz	r4, 1af50 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   1af44:	7953      	ldrb	r3, [r2, #5]
   1af46:	f043 0301 	orr.w	r3, r3, #1
   1af4a:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1af4c:	4622      	mov	r2, r4
   1af4e:	e7f7      	b.n	1af40 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   1af50:	f001 f8fd 	bl	1c14e <k_queue_append_list>
}
   1af54:	bd10      	pop	{r4, pc}

0001af56 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1af56:	b538      	push	{r3, r4, r5, lr}
   1af58:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   1af5a:	e00f      	b.n	1af7c <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   1af5c:	4620      	mov	r0, r4
   1af5e:	f7ff ff03 	bl	1ad68 <data_unref>
			buf->__buf = NULL;
   1af62:	2300      	movs	r3, #0
   1af64:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   1af66:	2300      	movs	r3, #0
   1af68:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1af6a:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1af6c:	79a0      	ldrb	r0, [r4, #6]
   1af6e:	f7f7 fb93 	bl	12698 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1af72:	6a03      	ldr	r3, [r0, #32]
   1af74:	b16b      	cbz	r3, 1af92 <net_buf_unref+0x3c>
			pool->destroy(buf);
   1af76:	4620      	mov	r0, r4
   1af78:	4798      	blx	r3
{
   1af7a:	462c      	mov	r4, r5
	while (buf) {
   1af7c:	b184      	cbz	r4, 1afa0 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   1af7e:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1af80:	7923      	ldrb	r3, [r4, #4]
   1af82:	3b01      	subs	r3, #1
   1af84:	b2db      	uxtb	r3, r3
   1af86:	7123      	strb	r3, [r4, #4]
   1af88:	b953      	cbnz	r3, 1afa0 <net_buf_unref+0x4a>
		if (buf->__buf) {
   1af8a:	6921      	ldr	r1, [r4, #16]
   1af8c:	2900      	cmp	r1, #0
   1af8e:	d1e5      	bne.n	1af5c <net_buf_unref+0x6>
   1af90:	e7e9      	b.n	1af66 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1af92:	79a0      	ldrb	r0, [r4, #6]
   1af94:	f7f7 fb80 	bl	12698 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1af98:	4621      	mov	r1, r4
   1af9a:	f001 f8cd 	bl	1c138 <k_queue_prepend>
}
   1af9e:	e7ec      	b.n	1af7a <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1afa0:	bd38      	pop	{r3, r4, r5, pc}

0001afa2 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1afa2:	7902      	ldrb	r2, [r0, #4]
   1afa4:	3201      	adds	r2, #1
   1afa6:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1afa8:	4770      	bx	lr

0001afaa <net_buf_simple_add>:
	return buf->data + buf->len;
   1afaa:	6802      	ldr	r2, [r0, #0]
   1afac:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1afae:	4419      	add	r1, r3
   1afb0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1afb2:	18d0      	adds	r0, r2, r3
   1afb4:	4770      	bx	lr

0001afb6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1afb6:	b538      	push	{r3, r4, r5, lr}
   1afb8:	460d      	mov	r5, r1
   1afba:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1afbc:	4611      	mov	r1, r2
   1afbe:	f7ff fff4 	bl	1afaa <net_buf_simple_add>
   1afc2:	4622      	mov	r2, r4
   1afc4:	4629      	mov	r1, r5
   1afc6:	f7ff fdac 	bl	1ab22 <memcpy>
}
   1afca:	bd38      	pop	{r3, r4, r5, pc}

0001afcc <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1afcc:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1afce:	8882      	ldrh	r2, [r0, #4]
   1afd0:	1a52      	subs	r2, r2, r1
   1afd2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1afd4:	6800      	ldr	r0, [r0, #0]
   1afd6:	4408      	add	r0, r1
   1afd8:	6018      	str	r0, [r3, #0]
}
   1afda:	4770      	bx	lr

0001afdc <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1afdc:	4603      	mov	r3, r0
	void *data = buf->data;
   1afde:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1afe0:	889a      	ldrh	r2, [r3, #4]
   1afe2:	1a52      	subs	r2, r2, r1
   1afe4:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1afe6:	4401      	add	r1, r0
   1afe8:	6019      	str	r1, [r3, #0]

	return data;
}
   1afea:	4770      	bx	lr

0001afec <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1afec:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1afee:	6803      	ldr	r3, [r0, #0]
   1aff0:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1aff2:	2101      	movs	r1, #1
   1aff4:	f7ff ffea 	bl	1afcc <net_buf_simple_pull>

	return val;
}
   1aff8:	4620      	mov	r0, r4
   1affa:	bd10      	pop	{r4, pc}

0001affc <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1affc:	6802      	ldr	r2, [r0, #0]
   1affe:	6880      	ldr	r0, [r0, #8]
}
   1b000:	1a10      	subs	r0, r2, r0
   1b002:	4770      	bx	lr

0001b004 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1b004:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1b006:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1b00a:	0089      	lsls	r1, r1, #2
   1b00c:	3138      	adds	r1, #56	; 0x38
}
   1b00e:	4408      	add	r0, r1
   1b010:	4770      	bx	lr

0001b012 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1b012:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   1b014:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   1b018:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1b01c:	4770      	bx	lr

0001b01e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1b01e:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1b020:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   1b024:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1b028:	4770      	bx	lr

0001b02a <get_status>:
{
   1b02a:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1b02c:	b2c9      	uxtb	r1, r1
   1b02e:	f7ff ffe9 	bl	1b004 <get_sub_data>
   1b032:	6880      	ldr	r0, [r0, #8]
}
   1b034:	f000 0007 	and.w	r0, r0, #7
   1b038:	bd08      	pop	{r3, pc}

0001b03a <set_off_state>:
	__asm__ volatile(
   1b03a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b03e:	f3ef 8211 	mrs	r2, BASEPRI
   1b042:	f383 8812 	msr	BASEPRI_MAX, r3
   1b046:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b04a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1b04c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1b050:	d001      	beq.n	1b056 <set_off_state+0x1c>
   1b052:	428b      	cmp	r3, r1
   1b054:	d107      	bne.n	1b066 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1b056:	2301      	movs	r3, #1
   1b058:	6003      	str	r3, [r0, #0]
	int err = 0;
   1b05a:	2000      	movs	r0, #0
	__asm__ volatile(
   1b05c:	f382 8811 	msr	BASEPRI, r2
   1b060:	f3bf 8f6f 	isb	sy
}
   1b064:	4770      	bx	lr
		err = -EPERM;
   1b066:	f04f 30ff 	mov.w	r0, #4294967295
   1b06a:	e7f7      	b.n	1b05c <set_off_state+0x22>

0001b06c <set_starting_state>:
{
   1b06c:	b410      	push	{r4}
	__asm__ volatile(
   1b06e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b072:	f3ef 8211 	mrs	r2, BASEPRI
   1b076:	f383 8812 	msr	BASEPRI_MAX, r3
   1b07a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b07e:	6803      	ldr	r3, [r0, #0]
   1b080:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1b084:	f003 0307 	and.w	r3, r3, #7
   1b088:	2b01      	cmp	r3, #1
   1b08a:	d009      	beq.n	1b0a0 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   1b08c:	428c      	cmp	r4, r1
   1b08e:	d00a      	beq.n	1b0a6 <set_starting_state+0x3a>
		err = -EPERM;
   1b090:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1b094:	f382 8811 	msr	BASEPRI, r2
   1b098:	f3bf 8f6f 	isb	sy
}
   1b09c:	bc10      	pop	{r4}
   1b09e:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1b0a0:	6001      	str	r1, [r0, #0]
	int err = 0;
   1b0a2:	2000      	movs	r0, #0
   1b0a4:	e7f6      	b.n	1b094 <set_starting_state+0x28>
		err = -EALREADY;
   1b0a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1b0aa:	e7f3      	b.n	1b094 <set_starting_state+0x28>

0001b0ac <set_on_state>:
	__asm__ volatile(
   1b0ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0b0:	f3ef 8211 	mrs	r2, BASEPRI
   1b0b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0b8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1b0bc:	6803      	ldr	r3, [r0, #0]
   1b0be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b0c2:	f043 0302 	orr.w	r3, r3, #2
   1b0c6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1b0c8:	f382 8811 	msr	BASEPRI, r2
   1b0cc:	f3bf 8f6f 	isb	sy
}
   1b0d0:	4770      	bx	lr

0001b0d2 <clkstarted_handle>:
{
   1b0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0d4:	4606      	mov	r6, r0
   1b0d6:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1b0d8:	f7ff ff94 	bl	1b004 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1b0dc:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1b0de:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1b0e0:	2300      	movs	r3, #0
   1b0e2:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1b0e6:	f7ff ffe1 	bl	1b0ac <set_on_state>
	if (callback) {
   1b0ea:	b11d      	cbz	r5, 1b0f4 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1b0ec:	463a      	mov	r2, r7
   1b0ee:	4621      	mov	r1, r4
   1b0f0:	4630      	mov	r0, r6
   1b0f2:	47a8      	blx	r5
}
   1b0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b0f6 <stop>:
{
   1b0f6:	b570      	push	{r4, r5, r6, lr}
   1b0f8:	4606      	mov	r6, r0
   1b0fa:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1b0fc:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1b0fe:	4621      	mov	r1, r4
   1b100:	f7ff ff80 	bl	1b004 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1b104:	4629      	mov	r1, r5
   1b106:	3008      	adds	r0, #8
   1b108:	f7ff ff97 	bl	1b03a <set_off_state>
	if (err < 0) {
   1b10c:	2800      	cmp	r0, #0
   1b10e:	db06      	blt.n	1b11e <stop+0x28>
	get_sub_config(dev, type)->stop();
   1b110:	4621      	mov	r1, r4
   1b112:	4630      	mov	r0, r6
   1b114:	f7ff ff7d 	bl	1b012 <get_sub_config>
   1b118:	6843      	ldr	r3, [r0, #4]
   1b11a:	4798      	blx	r3
	return 0;
   1b11c:	2000      	movs	r0, #0
}
   1b11e:	bd70      	pop	{r4, r5, r6, pc}

0001b120 <api_stop>:
{
   1b120:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1b122:	2280      	movs	r2, #128	; 0x80
   1b124:	f7ff ffe7 	bl	1b0f6 <stop>
}
   1b128:	bd08      	pop	{r3, pc}

0001b12a <async_start>:
{
   1b12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b12e:	4606      	mov	r6, r0
   1b130:	4690      	mov	r8, r2
   1b132:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1b134:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1b136:	4629      	mov	r1, r5
   1b138:	f7ff ff64 	bl	1b004 <get_sub_data>
   1b13c:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1b13e:	9906      	ldr	r1, [sp, #24]
   1b140:	3008      	adds	r0, #8
   1b142:	f7ff ff93 	bl	1b06c <set_starting_state>
	if (err < 0) {
   1b146:	2800      	cmp	r0, #0
   1b148:	db09      	blt.n	1b15e <async_start+0x34>
	subdata->cb = cb;
   1b14a:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1b14e:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1b150:	4629      	mov	r1, r5
   1b152:	4630      	mov	r0, r6
   1b154:	f7ff ff5d 	bl	1b012 <get_sub_config>
   1b158:	6803      	ldr	r3, [r0, #0]
   1b15a:	4798      	blx	r3
	return 0;
   1b15c:	2000      	movs	r0, #0
}
   1b15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b162 <api_start>:
{
   1b162:	b510      	push	{r4, lr}
   1b164:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1b166:	2480      	movs	r4, #128	; 0x80
   1b168:	9400      	str	r4, [sp, #0]
   1b16a:	f7ff ffde 	bl	1b12a <async_start>
}
   1b16e:	b002      	add	sp, #8
   1b170:	bd10      	pop	{r4, pc}

0001b172 <onoff_started_callback>:
{
   1b172:	b510      	push	{r4, lr}
   1b174:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1b176:	b2c9      	uxtb	r1, r1
   1b178:	f7ff ff51 	bl	1b01e <get_onoff_manager>
	notify(mgr, 0);
   1b17c:	2100      	movs	r1, #0
   1b17e:	47a0      	blx	r4
}
   1b180:	bd10      	pop	{r4, pc}

0001b182 <hfclk_start>:
{
   1b182:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1b184:	2001      	movs	r0, #1
   1b186:	f7f9 f929 	bl	143dc <nrfx_clock_start>
}
   1b18a:	bd08      	pop	{r3, pc}

0001b18c <lfclk_start>:
{
   1b18c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1b18e:	2000      	movs	r0, #0
   1b190:	f7f9 f924 	bl	143dc <nrfx_clock_start>
}
   1b194:	bd08      	pop	{r3, pc}

0001b196 <hfclk_stop>:
{
   1b196:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1b198:	2001      	movs	r0, #1
   1b19a:	f000 fdd1 	bl	1bd40 <nrfx_clock_stop>
}
   1b19e:	bd08      	pop	{r3, pc}

0001b1a0 <lfclk_stop>:
{
   1b1a0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1b1a2:	2000      	movs	r0, #0
   1b1a4:	f000 fdcc 	bl	1bd40 <nrfx_clock_stop>
}
   1b1a8:	bd08      	pop	{r3, pc}

0001b1aa <blocking_start_callback>:
{
   1b1aa:	b508      	push	{r3, lr}
   1b1ac:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1b1ae:	f7fa fc1f 	bl	159f0 <z_impl_k_sem_give>
}
   1b1b2:	bd08      	pop	{r3, pc}

0001b1b4 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   1b1b4:	f010 0f10 	tst.w	r0, #16
   1b1b8:	d104      	bne.n	1b1c4 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   1b1ba:	f010 0f20 	tst.w	r0, #32
   1b1be:	d103      	bne.n	1b1c8 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1b1c0:	2000      	movs	r0, #0
   1b1c2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   1b1c4:	2003      	movs	r0, #3
   1b1c6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   1b1c8:	2001      	movs	r0, #1
}
   1b1ca:	4770      	bx	lr

0001b1cc <gpio_nrfx_port_get_raw>:
	return port->config;
   1b1cc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b1ce:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1b1d0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1b1d4:	600b      	str	r3, [r1, #0]
}
   1b1d6:	2000      	movs	r0, #0
   1b1d8:	4770      	bx	lr

0001b1da <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   1b1da:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b1dc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1b1de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1b1e2:	4042      	eors	r2, r0
   1b1e4:	400a      	ands	r2, r1
   1b1e6:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1b1e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1b1ec:	2000      	movs	r0, #0
   1b1ee:	4770      	bx	lr

0001b1f0 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1b1f0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b1f2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1b1f4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   1b1f8:	2000      	movs	r0, #0
   1b1fa:	4770      	bx	lr

0001b1fc <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1b1fc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b1fe:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1b200:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1b204:	2000      	movs	r0, #0
   1b206:	4770      	bx	lr

0001b208 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1b208:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b20a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1b20c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1b210:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1b212:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1b216:	2000      	movs	r0, #0
   1b218:	4770      	bx	lr

0001b21a <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   1b21a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   1b21e:	d007      	beq.n	1b230 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b220:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   1b224:	d00d      	beq.n	1b242 <get_trigger+0x28>
   1b226:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   1b22a:	d008      	beq.n	1b23e <get_trigger+0x24>
   1b22c:	2001      	movs	r0, #1
}
   1b22e:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1b230:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   1b234:	d001      	beq.n	1b23a <get_trigger+0x20>
   1b236:	2005      	movs	r0, #5
   1b238:	4770      	bx	lr
   1b23a:	2004      	movs	r0, #4
   1b23c:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1b23e:	2002      	movs	r0, #2
   1b240:	4770      	bx	lr
   1b242:	2003      	movs	r0, #3
   1b244:	4770      	bx	lr

0001b246 <gpio_nrfx_manage_callback>:
{
   1b246:	b470      	push	{r4, r5, r6}
	return port->data;
   1b248:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b24a:	1d05      	adds	r5, r0, #4
	return list->head;
   1b24c:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1b24e:	b1db      	cbz	r3, 1b288 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1b250:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b252:	2400      	movs	r4, #0
   1b254:	e00a      	b.n	1b26c <gpio_nrfx_manage_callback+0x26>
	return node->next;
   1b256:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1b258:	6043      	str	r3, [r0, #4]
	return list->tail;
   1b25a:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b25c:	42a1      	cmp	r1, r4
   1b25e:	d10f      	bne.n	1b280 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   1b260:	606b      	str	r3, [r5, #4]
}
   1b262:	e00d      	b.n	1b280 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   1b264:	606c      	str	r4, [r5, #4]
}
   1b266:	e00b      	b.n	1b280 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b268:	461c      	mov	r4, r3
   1b26a:	681b      	ldr	r3, [r3, #0]
   1b26c:	b15b      	cbz	r3, 1b286 <gpio_nrfx_manage_callback+0x40>
   1b26e:	429e      	cmp	r6, r3
   1b270:	d1fa      	bne.n	1b268 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   1b272:	2c00      	cmp	r4, #0
   1b274:	d0ef      	beq.n	1b256 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   1b276:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   1b278:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b27a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b27c:	4299      	cmp	r1, r3
   1b27e:	d0f1      	beq.n	1b264 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   1b280:	2300      	movs	r3, #0
   1b282:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b284:	e000      	b.n	1b288 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   1b286:	b152      	cbz	r2, 1b29e <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   1b288:	b162      	cbz	r2, 1b2a4 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   1b28a:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   1b28c:	600b      	str	r3, [r1, #0]
	list->head = node;
   1b28e:	6041      	str	r1, [r0, #4]
	return list->tail;
   1b290:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b292:	b10b      	cbz	r3, 1b298 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1b294:	2000      	movs	r0, #0
   1b296:	e006      	b.n	1b2a6 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1b298:	6069      	str	r1, [r5, #4]
   1b29a:	2000      	movs	r0, #0
}
   1b29c:	e003      	b.n	1b2a6 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   1b29e:	f06f 0015 	mvn.w	r0, #21
   1b2a2:	e000      	b.n	1b2a6 <gpio_nrfx_manage_callback+0x60>
	return 0;
   1b2a4:	2000      	movs	r0, #0
}
   1b2a6:	bc70      	pop	{r4, r5, r6}
   1b2a8:	4770      	bx	lr

0001b2aa <nrfx_gpio_handler>:
{
   1b2aa:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   1b2ac:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   1b2b0:	0940      	lsrs	r0, r0, #5
   1b2b2:	f7f7 fc03 	bl	12abc <get_dev>
	if (port == NULL) {
   1b2b6:	b1d8      	cbz	r0, 1b2f0 <nrfx_gpio_handler+0x46>
   1b2b8:	4606      	mov	r6, r0
	return port->data;
   1b2ba:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1b2bc:	2501      	movs	r5, #1
   1b2be:	40a5      	lsls	r5, r4
	return list->head;
   1b2c0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b2c2:	b119      	cbz	r1, 1b2cc <nrfx_gpio_handler+0x22>
   1b2c4:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b2c6:	b149      	cbz	r1, 1b2dc <nrfx_gpio_handler+0x32>
	return node->next;
   1b2c8:	680c      	ldr	r4, [r1, #0]
   1b2ca:	e007      	b.n	1b2dc <nrfx_gpio_handler+0x32>
   1b2cc:	460c      	mov	r4, r1
   1b2ce:	e005      	b.n	1b2dc <nrfx_gpio_handler+0x32>
   1b2d0:	b164      	cbz	r4, 1b2ec <nrfx_gpio_handler+0x42>
   1b2d2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b2d4:	b104      	cbz	r4, 1b2d8 <nrfx_gpio_handler+0x2e>
	return node->next;
   1b2d6:	6823      	ldr	r3, [r4, #0]
   1b2d8:	4621      	mov	r1, r4
   1b2da:	461c      	mov	r4, r3
   1b2dc:	b141      	cbz	r1, 1b2f0 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   1b2de:	688a      	ldr	r2, [r1, #8]
   1b2e0:	402a      	ands	r2, r5
   1b2e2:	d0f5      	beq.n	1b2d0 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1b2e4:	684b      	ldr	r3, [r1, #4]
   1b2e6:	4630      	mov	r0, r6
   1b2e8:	4798      	blx	r3
   1b2ea:	e7f1      	b.n	1b2d0 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1b2ec:	4623      	mov	r3, r4
   1b2ee:	e7f3      	b.n	1b2d8 <nrfx_gpio_handler+0x2e>
}
   1b2f0:	bd70      	pop	{r4, r5, r6, pc}

0001b2f2 <endtx_isr>:
	return dev->config;
   1b2f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1b2f4:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1b2f6:	f04f 0140 	mov.w	r1, #64	; 0x40
   1b2fa:	f3ef 8211 	mrs	r2, BASEPRI
   1b2fe:	f381 8812 	msr	BASEPRI_MAX, r1
   1b302:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b306:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b30a:	b131      	cbz	r1, 1b31a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b30c:	2100      	movs	r1, #0
   1b30e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1b312:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b316:	2101      	movs	r1, #1
   1b318:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1b31a:	f382 8811 	msr	BASEPRI, r2
   1b31e:	f3bf 8f6f 	isb	sy
}
   1b322:	4770      	bx	lr

0001b324 <uarte_nrfx_isr_int>:
{
   1b324:	b538      	push	{r3, r4, r5, lr}
   1b326:	4604      	mov	r4, r0
	return dev->config;
   1b328:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1b32a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1b32c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1b330:	f413 7f80 	tst.w	r3, #256	; 0x100
   1b334:	d002      	beq.n	1b33c <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b336:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   1b33a:	b9db      	cbnz	r3, 1b374 <uarte_nrfx_isr_int+0x50>
	return dev->config;
   1b33c:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b33e:	685b      	ldr	r3, [r3, #4]
   1b340:	f013 0f10 	tst.w	r3, #16
   1b344:	d015      	beq.n	1b372 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   1b346:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b34a:	f3ef 8311 	mrs	r3, BASEPRI
   1b34e:	f382 8812 	msr	BASEPRI_MAX, r2
   1b352:	f3bf 8f6f 	isb	sy
   1b356:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1b35a:	b112      	cbz	r2, 1b362 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b35c:	2200      	movs	r2, #0
   1b35e:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1b362:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1b366:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   1b36a:	f383 8811 	msr	BASEPRI, r3
   1b36e:	f3bf 8f6f 	isb	sy
}
   1b372:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   1b374:	f7ff ffbd 	bl	1b2f2 <endtx_isr>
   1b378:	e7e0      	b.n	1b33c <uarte_nrfx_isr_int+0x18>

0001b37a <uarte_nrfx_configure>:
{
   1b37a:	b570      	push	{r4, r5, r6, lr}
   1b37c:	b082      	sub	sp, #8
   1b37e:	4605      	mov	r5, r0
   1b380:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   1b382:	794b      	ldrb	r3, [r1, #5]
   1b384:	2b01      	cmp	r3, #1
   1b386:	d006      	beq.n	1b396 <uarte_nrfx_configure+0x1c>
   1b388:	2b03      	cmp	r3, #3
   1b38a:	d011      	beq.n	1b3b0 <uarte_nrfx_configure+0x36>
   1b38c:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   1b390:	4618      	mov	r0, r3
   1b392:	b002      	add	sp, #8
   1b394:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1b396:	2300      	movs	r3, #0
   1b398:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1b39c:	79a3      	ldrb	r3, [r4, #6]
   1b39e:	2b03      	cmp	r3, #3
   1b3a0:	d138      	bne.n	1b414 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   1b3a2:	79e3      	ldrb	r3, [r4, #7]
   1b3a4:	b143      	cbz	r3, 1b3b8 <uarte_nrfx_configure+0x3e>
   1b3a6:	2b01      	cmp	r3, #1
   1b3a8:	d010      	beq.n	1b3cc <uarte_nrfx_configure+0x52>
   1b3aa:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b3ae:	e7ef      	b.n	1b390 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1b3b0:	2310      	movs	r3, #16
   1b3b2:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   1b3b6:	e7f1      	b.n	1b39c <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1b3b8:	2300      	movs	r3, #0
   1b3ba:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   1b3be:	7923      	ldrb	r3, [r4, #4]
   1b3c0:	b143      	cbz	r3, 1b3d4 <uarte_nrfx_configure+0x5a>
   1b3c2:	2b02      	cmp	r3, #2
   1b3c4:	d022      	beq.n	1b40c <uarte_nrfx_configure+0x92>
   1b3c6:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b3ca:	e7e1      	b.n	1b390 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1b3cc:	2301      	movs	r3, #1
   1b3ce:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   1b3d2:	e7f4      	b.n	1b3be <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1b3d4:	2300      	movs	r3, #0
   1b3d6:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1b3da:	6821      	ldr	r1, [r4, #0]
   1b3dc:	4628      	mov	r0, r5
   1b3de:	f7f7 fd71 	bl	12ec4 <baudrate_set>
   1b3e2:	4603      	mov	r3, r0
   1b3e4:	b9c8      	cbnz	r0, 1b41a <uarte_nrfx_configure+0xa0>
	return dev->config;
   1b3e6:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   1b3e8:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b3ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   1b3ee:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   1b3f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1b3f6:	4331      	orrs	r1, r6
   1b3f8:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1b3fa:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   1b3fe:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   1b400:	3204      	adds	r2, #4
   1b402:	e894 0003 	ldmia.w	r4, {r0, r1}
   1b406:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   1b40a:	e7c1      	b.n	1b390 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1b40c:	230e      	movs	r3, #14
   1b40e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   1b412:	e7e2      	b.n	1b3da <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   1b414:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b418:	e7ba      	b.n	1b390 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   1b41a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1b41e:	e7b7      	b.n	1b390 <uarte_nrfx_configure+0x16>

0001b420 <uarte_nrfx_config_get>:
{
   1b420:	460b      	mov	r3, r1
	return dev->data;
   1b422:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   1b424:	6891      	ldr	r1, [r2, #8]
   1b426:	6850      	ldr	r0, [r2, #4]
   1b428:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1b42c:	2000      	movs	r0, #0
   1b42e:	4770      	bx	lr

0001b430 <uarte_nrfx_err_check>:
	return dev->config;
   1b430:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1b432:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b434:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b438:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1b43c:	4770      	bx	lr

0001b43e <is_tx_ready>:
	return dev->config;
   1b43e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1b440:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1b442:	685b      	ldr	r3, [r3, #4]
   1b444:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b448:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b44c:	b929      	cbnz	r1, 1b45a <is_tx_ready+0x1c>
   1b44e:	b933      	cbnz	r3, 1b45e <is_tx_ready+0x20>
   1b450:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1b454:	b92b      	cbnz	r3, 1b462 <is_tx_ready+0x24>
   1b456:	2000      	movs	r0, #0
   1b458:	4770      	bx	lr
   1b45a:	2001      	movs	r0, #1
   1b45c:	4770      	bx	lr
   1b45e:	2000      	movs	r0, #0
   1b460:	4770      	bx	lr
   1b462:	2001      	movs	r0, #1
}
   1b464:	4770      	bx	lr

0001b466 <uarte_enable>:
	return dev->config;
   1b466:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1b468:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b46a:	2208      	movs	r2, #8
   1b46c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1b470:	4770      	bx	lr

0001b472 <tx_start>:
{
   1b472:	b510      	push	{r4, lr}
	return dev->config;
   1b474:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1b476:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b478:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b47c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b480:	2300      	movs	r3, #0
   1b482:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1b486:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   1b48a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   1b48e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   1b492:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b494:	685b      	ldr	r3, [r3, #4]
   1b496:	f013 0f10 	tst.w	r3, #16
   1b49a:	d102      	bne.n	1b4a2 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b49c:	2301      	movs	r3, #1
   1b49e:	60a3      	str	r3, [r4, #8]
}
   1b4a0:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1b4a2:	2101      	movs	r1, #1
   1b4a4:	f7ff ffdf 	bl	1b466 <uarte_enable>
    p_reg->INTENSET = mask;
   1b4a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1b4ac:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1b4b0:	e7f4      	b.n	1b49c <tx_start+0x2a>

0001b4b2 <uarte_nrfx_poll_in>:
{
   1b4b2:	b410      	push	{r4}
	return dev->data;
   1b4b4:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   1b4b6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1b4b8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b4ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b4be:	b152      	cbz	r2, 1b4d6 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   1b4c0:	7c62      	ldrb	r2, [r4, #17]
   1b4c2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b4c4:	2000      	movs	r0, #0
   1b4c6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1b4ca:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b4ce:	2201      	movs	r2, #1
   1b4d0:	601a      	str	r2, [r3, #0]
}
   1b4d2:	bc10      	pop	{r4}
   1b4d4:	4770      	bx	lr
		return -1;
   1b4d6:	f04f 30ff 	mov.w	r0, #4294967295
   1b4da:	e7fa      	b.n	1b4d2 <uarte_nrfx_poll_in+0x20>

0001b4dc <wait_tx_ready>:
{
   1b4dc:	b570      	push	{r4, r5, r6, lr}
   1b4de:	4606      	mov	r6, r0
   1b4e0:	e014      	b.n	1b50c <wait_tx_ready+0x30>
		if (res) {
   1b4e2:	b17d      	cbz	r5, 1b504 <wait_tx_ready+0x28>
	__asm__ volatile(
   1b4e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b4e8:	f3ef 8411 	mrs	r4, BASEPRI
   1b4ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4f0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1b4f4:	4630      	mov	r0, r6
   1b4f6:	f7ff ffa2 	bl	1b43e <is_tx_ready>
   1b4fa:	b9a0      	cbnz	r0, 1b526 <wait_tx_ready+0x4a>
	__asm__ volatile(
   1b4fc:	f384 8811 	msr	BASEPRI, r4
   1b500:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   1b504:	2021      	movs	r0, #33	; 0x21
   1b506:	2100      	movs	r1, #0
   1b508:	f7fa ffe6 	bl	164d8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1b50c:	2464      	movs	r4, #100	; 0x64
   1b50e:	4630      	mov	r0, r6
   1b510:	f7ff ff95 	bl	1b43e <is_tx_ready>
   1b514:	4605      	mov	r5, r0
   1b516:	2800      	cmp	r0, #0
   1b518:	d1e3      	bne.n	1b4e2 <wait_tx_ready+0x6>
   1b51a:	2001      	movs	r0, #1
   1b51c:	f000 fc2d 	bl	1bd7a <nrfx_busy_wait>
   1b520:	3c01      	subs	r4, #1
   1b522:	d1f4      	bne.n	1b50e <wait_tx_ready+0x32>
   1b524:	e7dd      	b.n	1b4e2 <wait_tx_ready+0x6>
}
   1b526:	4620      	mov	r0, r4
   1b528:	bd70      	pop	{r4, r5, r6, pc}

0001b52a <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1b52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b52c:	4604      	mov	r4, r0
	return dev->config;
   1b52e:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   1b530:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   1b532:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b534:	2100      	movs	r1, #0
   1b536:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1b53a:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   1b53c:	f7f7 fbf4 	bl	12d28 <uarte_nrfx_pins_configure>
	return dev->data;
   1b540:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1b542:	3104      	adds	r1, #4
   1b544:	4620      	mov	r0, r4
   1b546:	f7ff ff18 	bl	1b37a <uarte_nrfx_configure>
	if (err) {
   1b54a:	4604      	mov	r4, r0
   1b54c:	bb68      	cbnz	r0, 1b5aa <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1b54e:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1b550:	f013 0f02 	tst.w	r3, #2
   1b554:	d12b      	bne.n	1b5ae <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1b556:	2308      	movs	r3, #8
   1b558:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1b55c:	7a33      	ldrb	r3, [r6, #8]
   1b55e:	b95b      	cbnz	r3, 1b578 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b560:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1b564:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1b568:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1b56c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1b570:	2301      	movs	r3, #1
   1b572:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b576:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1b578:	6873      	ldr	r3, [r6, #4]
   1b57a:	f013 0f02 	tst.w	r3, #2
   1b57e:	d103      	bne.n	1b588 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   1b580:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b584:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b588:	6873      	ldr	r3, [r6, #4]
   1b58a:	f013 0f10 	tst.w	r3, #16
   1b58e:	d003      	beq.n	1b598 <uarte_instance_init+0x6e>
   1b590:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1b594:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1b598:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b59a:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1b59e:	2300      	movs	r3, #0
   1b5a0:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b5a4:	2301      	movs	r3, #1
   1b5a6:	60ab      	str	r3, [r5, #8]
   1b5a8:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1b5aa:	4620      	mov	r0, r4
   1b5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   1b5ae:	4639      	mov	r1, r7
   1b5b0:	4628      	mov	r0, r5
   1b5b2:	f7f7 fd67 	bl	13084 <endtx_stoptx_ppi_init>
		if (err < 0) {
   1b5b6:	2800      	cmp	r0, #0
   1b5b8:	dacd      	bge.n	1b556 <uarte_instance_init+0x2c>
			return err;
   1b5ba:	4604      	mov	r4, r0
   1b5bc:	e7f5      	b.n	1b5aa <uarte_instance_init+0x80>

0001b5be <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1b5be:	b510      	push	{r4, lr}
   1b5c0:	4604      	mov	r4, r0
   1b5c2:	2200      	movs	r2, #0
   1b5c4:	2101      	movs	r1, #1
   1b5c6:	2002      	movs	r0, #2
   1b5c8:	f7f4 fd00 	bl	ffcc <z_arm_irq_priority_set>
   1b5cc:	2002      	movs	r0, #2
   1b5ce:	f7f4 fccb 	bl	ff68 <arch_irq_enable>
   1b5d2:	2100      	movs	r1, #0
   1b5d4:	4620      	mov	r0, r4
   1b5d6:	f7ff ffa8 	bl	1b52a <uarte_instance_init>
   1b5da:	bd10      	pop	{r4, pc}

0001b5dc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1b5dc:	b510      	push	{r4, lr}
   1b5de:	4604      	mov	r4, r0
   1b5e0:	2200      	movs	r2, #0
   1b5e2:	2101      	movs	r1, #1
   1b5e4:	2028      	movs	r0, #40	; 0x28
   1b5e6:	f7f4 fcf1 	bl	ffcc <z_arm_irq_priority_set>
   1b5ea:	2028      	movs	r0, #40	; 0x28
   1b5ec:	f7f4 fcbc 	bl	ff68 <arch_irq_enable>
   1b5f0:	2100      	movs	r1, #0
   1b5f2:	4620      	mov	r0, r4
   1b5f4:	f7ff ff99 	bl	1b52a <uarte_instance_init>
   1b5f8:	bd10      	pop	{r4, pc}

0001b5fa <rng_pool_put>:
{
   1b5fa:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   1b5fc:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   1b5fe:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   1b600:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   1b602:	1a9a      	subs	r2, r3, r2
   1b604:	ea34 0202 	bics.w	r2, r4, r2
   1b608:	d008      	beq.n	1b61c <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   1b60a:	18c2      	adds	r2, r0, r3
   1b60c:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   1b60e:	3301      	adds	r3, #1
   1b610:	b25b      	sxtb	r3, r3
   1b612:	4023      	ands	r3, r4
   1b614:	7083      	strb	r3, [r0, #2]
	return 0;
   1b616:	2000      	movs	r0, #0
}
   1b618:	bc10      	pop	{r4}
   1b61a:	4770      	bx	lr
		return -ENOBUFS;
   1b61c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b620:	e7fa      	b.n	1b618 <rng_pool_put+0x1e>

0001b622 <rng_pool_init>:
	rngp->first_alloc = 0U;
   1b622:	2300      	movs	r3, #0
   1b624:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   1b626:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   1b628:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   1b62a:	3901      	subs	r1, #1
   1b62c:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   1b62e:	7102      	strb	r2, [r0, #4]
}
   1b630:	4770      	bx	lr

0001b632 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1b632:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b634:	b083      	sub	sp, #12
   1b636:	460f      	mov	r7, r1
   1b638:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1b63a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1b63e:	2400      	movs	r4, #0
	int res = -EINVAL;
   1b640:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   1b644:	e00a      	b.n	1b65c <entropy_cc3xx_rng_get_entropy+0x2a>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1b646:	ab01      	add	r3, sp, #4
   1b648:	462a      	mov	r2, r5
   1b64a:	1939      	adds	r1, r7, r4
   1b64c:	2000      	movs	r0, #0
   1b64e:	f7fb fd9f 	bl	17190 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   1b652:	9b01      	ldr	r3, [sp, #4]
   1b654:	42ab      	cmp	r3, r5
   1b656:	d109      	bne.n	1b66c <entropy_cc3xx_rng_get_entropy+0x3a>
			return -EINVAL;
		}

		if (res != 0) {
   1b658:	b950      	cbnz	r0, 1b670 <entropy_cc3xx_rng_get_entropy+0x3e>
			break;
		}

		offset += chunk_size;
   1b65a:	442c      	add	r4, r5
	while (offset < length) {
   1b65c:	42a6      	cmp	r6, r4
   1b65e:	d907      	bls.n	1b670 <entropy_cc3xx_rng_get_entropy+0x3e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1b660:	1b33      	subs	r3, r6, r4
   1b662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1b666:	d2ee      	bcs.n	1b646 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   1b668:	461d      	mov	r5, r3
   1b66a:	e7ec      	b.n	1b646 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   1b66c:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   1b670:	b003      	add	sp, #12
   1b672:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b674 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   1b674:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1b676:	2200      	movs	r2, #0
   1b678:	4611      	mov	r1, r2
   1b67a:	4610      	mov	r0, r2
   1b67c:	f7fb fd54 	bl	17128 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   1b680:	b900      	cbnz	r0, 1b684 <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   1b682:	bd08      	pop	{r3, pc}
			return -EINVAL;
   1b684:	f06f 0015 	mvn.w	r0, #21
   1b688:	e7fb      	b.n	1b682 <entropy_cc3xx_rng_init+0xe>

0001b68a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1b68a:	4770      	bx	lr

0001b68c <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1b68c:	1a40      	subs	r0, r0, r1
}
   1b68e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b692:	4770      	bx	lr

0001b694 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1b694:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1b698:	009b      	lsls	r3, r3, #2
   1b69a:	b29b      	uxth	r3, r3
   1b69c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b6a0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1b6a4:	2200      	movs	r2, #0
   1b6a6:	601a      	str	r2, [r3, #0]
   1b6a8:	681b      	ldr	r3, [r3, #0]
}
   1b6aa:	4770      	bx	lr

0001b6ac <absolute_time_to_cc>:
}
   1b6ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b6b0:	4770      	bx	lr

0001b6b2 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b6b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b6b6:	b672      	cpsid	i
}
   1b6b8:	4770      	bx	lr

0001b6ba <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b6ba:	f380 8810 	msr	PRIMASK, r0
}
   1b6be:	4770      	bx	lr

0001b6c0 <set_absolute_alarm>:
{
   1b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6c2:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1b6c4:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1b6c8:	f7f7 fe68 	bl	1339c <get_comparator>
   1b6cc:	4607      	mov	r7, r0
   1b6ce:	e019      	b.n	1b704 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1b6d0:	2013      	movs	r0, #19
   1b6d2:	f001 f841 	bl	1c758 <z_impl_k_busy_wait>
}
   1b6d6:	e022      	b.n	1b71e <set_absolute_alarm+0x5e>
		event_clear(chan);
   1b6d8:	4630      	mov	r0, r6
   1b6da:	f7ff ffdb 	bl	1b694 <event_clear>
		event_enable(chan);
   1b6de:	4630      	mov	r0, r6
   1b6e0:	f7f7 fe64 	bl	133ac <event_enable>
		set_comparator(chan, cc_val);
   1b6e4:	4629      	mov	r1, r5
   1b6e6:	4630      	mov	r0, r6
   1b6e8:	f7f7 fe4e 	bl	13388 <set_comparator>
		now2 = counter();
   1b6ec:	f7f7 fe72 	bl	133d4 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1b6f0:	4284      	cmp	r4, r0
   1b6f2:	d01e      	beq.n	1b732 <set_absolute_alarm+0x72>
   1b6f4:	1c81      	adds	r1, r0, #2
   1b6f6:	4628      	mov	r0, r5
   1b6f8:	f7ff ffc8 	bl	1b68c <counter_sub>
	} while ((now2 != now) &&
   1b6fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b700:	d917      	bls.n	1b732 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1b702:	462f      	mov	r7, r5
		now = counter();
   1b704:	f7f7 fe66 	bl	133d4 <counter>
   1b708:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1b70a:	4601      	mov	r1, r0
   1b70c:	4630      	mov	r0, r6
   1b70e:	f7f7 fe3b 	bl	13388 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1b712:	4621      	mov	r1, r4
   1b714:	4638      	mov	r0, r7
   1b716:	f7ff ffb9 	bl	1b68c <counter_sub>
   1b71a:	2801      	cmp	r0, #1
   1b71c:	d0d8      	beq.n	1b6d0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1b71e:	1ca7      	adds	r7, r4, #2
   1b720:	4639      	mov	r1, r7
   1b722:	4628      	mov	r0, r5
   1b724:	f7ff ffb2 	bl	1b68c <counter_sub>
   1b728:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b72c:	d9d4      	bls.n	1b6d8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1b72e:	463d      	mov	r5, r7
   1b730:	e7d2      	b.n	1b6d8 <set_absolute_alarm+0x18>
}
   1b732:	4628      	mov	r0, r5
   1b734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b736 <compare_set>:
{
   1b736:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b738:	b083      	sub	sp, #12
   1b73a:	4604      	mov	r4, r0
   1b73c:	4617      	mov	r7, r2
   1b73e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1b740:	f7f7 fe4e 	bl	133e0 <compare_int_lock>
   1b744:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1b746:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b748:	9301      	str	r3, [sp, #4]
   1b74a:	9b08      	ldr	r3, [sp, #32]
   1b74c:	9300      	str	r3, [sp, #0]
   1b74e:	463a      	mov	r2, r7
   1b750:	462b      	mov	r3, r5
   1b752:	4620      	mov	r0, r4
   1b754:	f7f7 ff32 	bl	135bc <compare_set_nolocks>
   1b758:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1b75a:	4631      	mov	r1, r6
   1b75c:	4620      	mov	r0, r4
   1b75e:	f7f7 fea3 	bl	134a8 <compare_int_unlock>
}
   1b762:	4628      	mov	r0, r5
   1b764:	b003      	add	sp, #12
   1b766:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b768 <sys_clock_cycle_get_32>:
{
   1b768:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1b76a:	f7f7 ff07 	bl	1357c <z_nrf_rtc_timer_read>
}
   1b76e:	bd08      	pop	{r3, pc}

0001b770 <event_packet_is_discardable>:
	switch (hdr->evt) {
   1b770:	7803      	ldrb	r3, [r0, #0]
   1b772:	2b3e      	cmp	r3, #62	; 0x3e
   1b774:	d003      	beq.n	1b77e <event_packet_is_discardable+0xe>
   1b776:	2bff      	cmp	r3, #255	; 0xff
   1b778:	d008      	beq.n	1b78c <event_packet_is_discardable+0x1c>
   1b77a:	2000      	movs	r0, #0
   1b77c:	4770      	bx	lr
		switch (me->subevent) {
   1b77e:	7883      	ldrb	r3, [r0, #2]
   1b780:	2b02      	cmp	r3, #2
   1b782:	d001      	beq.n	1b788 <event_packet_is_discardable+0x18>
			return false;
   1b784:	2000      	movs	r0, #0
   1b786:	4770      	bx	lr
			return true;
   1b788:	2001      	movs	r0, #1
   1b78a:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   1b78c:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   1b78e:	2b80      	cmp	r3, #128	; 0x80
   1b790:	d001      	beq.n	1b796 <event_packet_is_discardable+0x26>
			return false;
   1b792:	2000      	movs	r0, #0
}
   1b794:	4770      	bx	lr
			return true;
   1b796:	2001      	movs	r0, #1
   1b798:	4770      	bx	lr

0001b79a <hci_driver_send>:
{
   1b79a:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1b79c:	8983      	ldrh	r3, [r0, #12]
   1b79e:	b163      	cbz	r3, 1b7ba <hci_driver_send+0x20>
   1b7a0:	4604      	mov	r4, r0
   1b7a2:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1b7a4:	b963      	cbnz	r3, 1b7c0 <hci_driver_send+0x26>
		err = cmd_handle(buf);
   1b7a6:	f7f8 fb91 	bl	13ecc <cmd_handle>
	if (!err) {
   1b7aa:	4605      	mov	r5, r0
   1b7ac:	b108      	cbz	r0, 1b7b2 <hci_driver_send+0x18>
}
   1b7ae:	4628      	mov	r0, r5
   1b7b0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1b7b2:	4620      	mov	r0, r4
   1b7b4:	f7ff fbcf 	bl	1af56 <net_buf_unref>
   1b7b8:	e7f9      	b.n	1b7ae <hci_driver_send+0x14>
		return -EINVAL;
   1b7ba:	f06f 0515 	mvn.w	r5, #21
   1b7be:	e7f6      	b.n	1b7ae <hci_driver_send+0x14>
		return -EINVAL;
   1b7c0:	f06f 0515 	mvn.w	r5, #21
   1b7c4:	e7f3      	b.n	1b7ae <hci_driver_send+0x14>

0001b7c6 <fetch_and_process_hci_evt>:
{
   1b7c6:	b538      	push	{r3, r4, r5, lr}
   1b7c8:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b7ca:	f04f 30ff 	mov.w	r0, #4294967295
   1b7ce:	f04f 31ff 	mov.w	r1, #4294967295
   1b7d2:	f7f8 fb09 	bl	13de8 <multithreading_lock_acquire>
	if (!errcode) {
   1b7d6:	4605      	mov	r5, r0
   1b7d8:	b110      	cbz	r0, 1b7e0 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   1b7da:	b145      	cbz	r5, 1b7ee <fetch_and_process_hci_evt+0x28>
		return false;
   1b7dc:	2000      	movs	r0, #0
}
   1b7de:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   1b7e0:	4620      	mov	r0, r4
   1b7e2:	f7f8 fd2d 	bl	14240 <hci_internal_evt_get>
   1b7e6:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1b7e8:	f7f8 fb08 	bl	13dfc <multithreading_lock_release>
   1b7ec:	e7f5      	b.n	1b7da <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   1b7ee:	4620      	mov	r0, r4
   1b7f0:	f7f8 fbae 	bl	13f50 <event_packet_process>
	return true;
   1b7f4:	2001      	movs	r0, #1
   1b7f6:	e7f2      	b.n	1b7de <fetch_and_process_hci_evt+0x18>

0001b7f8 <configure_supported_features>:
{
   1b7f8:	b508      	push	{r3, lr}
			err = sdc_support_scan();
   1b7fa:	f7e8 feeb 	bl	45d4 <sdc_support_scan>
			if (err) {
   1b7fe:	b900      	cbnz	r0, 1b802 <configure_supported_features+0xa>
}
   1b800:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   1b802:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b806:	e7fb      	b.n	1b800 <configure_supported_features+0x8>

0001b808 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   1b808:	f242 0344 	movw	r3, #8260	; 0x2044
   1b80c:	4298      	cmp	r0, r3
   1b80e:	d834      	bhi.n	1b87a <command_generates_command_complete_event+0x72>
   1b810:	f242 030d 	movw	r3, #8205	; 0x200d
   1b814:	4298      	cmp	r0, r3
   1b816:	d20b      	bcs.n	1b830 <command_generates_command_complete_event+0x28>
   1b818:	f240 4306 	movw	r3, #1030	; 0x406
   1b81c:	4298      	cmp	r0, r3
   1b81e:	d02e      	beq.n	1b87e <command_generates_command_complete_event+0x76>
   1b820:	f240 431d 	movw	r3, #1053	; 0x41d
   1b824:	4298      	cmp	r0, r3
   1b826:	d001      	beq.n	1b82c <command_generates_command_complete_event+0x24>
		return true;
   1b828:	2001      	movs	r0, #1
   1b82a:	4770      	bx	lr
	switch (hci_opcode) {
   1b82c:	2000      	movs	r0, #0
   1b82e:	4770      	bx	lr
   1b830:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   1b834:	380d      	subs	r0, #13
   1b836:	2837      	cmp	r0, #55	; 0x37
   1b838:	d823      	bhi.n	1b882 <command_generates_command_complete_event+0x7a>
   1b83a:	e8df f000 	tbb	[pc, r0]
   1b83e:	221c      	.short	0x221c
   1b840:	22222222 	.word	0x22222222
   1b844:	1c22221c 	.word	0x1c22221c
   1b848:	221c2222 	.word	0x221c2222
   1b84c:	22222222 	.word	0x22222222
   1b850:	22222222 	.word	0x22222222
   1b854:	22222222 	.word	0x22222222
   1b858:	22222222 	.word	0x22222222
   1b85c:	22222222 	.word	0x22222222
   1b860:	1c222222 	.word	0x1c222222
   1b864:	22222222 	.word	0x22222222
   1b868:	22222222 	.word	0x22222222
   1b86c:	22222222 	.word	0x22222222
   1b870:	22222222 	.word	0x22222222
   1b874:	1c1c      	.short	0x1c1c
   1b876:	2000      	movs	r0, #0
   1b878:	4770      	bx	lr
		return true;
   1b87a:	2001      	movs	r0, #1
   1b87c:	4770      	bx	lr
	switch (hci_opcode) {
   1b87e:	2000      	movs	r0, #0
   1b880:	4770      	bx	lr
		return true;
   1b882:	2001      	movs	r0, #1
}
   1b884:	4770      	bx	lr

0001b886 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1b886:	230f      	movs	r3, #15
   1b888:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1b88a:	2304      	movs	r3, #4
   1b88c:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   1b88e:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   1b890:	2301      	movs	r3, #1
   1b892:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   1b894:	8081      	strh	r1, [r0, #4]
}
   1b896:	4770      	bx	lr

0001b898 <encode_command_complete_header>:
{
   1b898:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1b89a:	240e      	movs	r4, #14
   1b89c:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   1b89e:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   1b8a0:	2201      	movs	r2, #1
   1b8a2:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   1b8a4:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1b8a8:	7143      	strb	r3, [r0, #5]
}
   1b8aa:	bc10      	pop	{r4}
   1b8ac:	4770      	bx	lr

0001b8ae <le_read_supported_states>:
	*buf = states1;
   1b8ae:	2330      	movs	r3, #48	; 0x30
   1b8b0:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   1b8b2:	2300      	movs	r3, #0
   1b8b4:	7103      	strb	r3, [r0, #4]
}
   1b8b6:	4770      	bx	lr

0001b8b8 <status_param_cmd_put>:
}
   1b8b8:	2001      	movs	r0, #1
   1b8ba:	4770      	bx	lr

0001b8bc <controller_and_baseband_cmd_put>:
{
   1b8bc:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   1b8be:	7841      	ldrb	r1, [r0, #1]
   1b8c0:	7803      	ldrb	r3, [r0, #0]
   1b8c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1b8c6:	b21b      	sxth	r3, r3
	switch (opcode)	{
   1b8c8:	f640 4201 	movw	r2, #3073	; 0xc01
   1b8cc:	4293      	cmp	r3, r2
   1b8ce:	d005      	beq.n	1b8dc <controller_and_baseband_cmd_put+0x20>
   1b8d0:	f640 4203 	movw	r2, #3075	; 0xc03
   1b8d4:	4293      	cmp	r3, r2
   1b8d6:	d005      	beq.n	1b8e4 <controller_and_baseband_cmd_put+0x28>
   1b8d8:	2001      	movs	r0, #1
}
   1b8da:	bd08      	pop	{r3, pc}
   1b8dc:	3003      	adds	r0, #3
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1b8de:	f7f0 f8a3 	bl	ba28 <sdc_hci_cmd_cb_set_event_mask>
   1b8e2:	e7fa      	b.n	1b8da <controller_and_baseband_cmd_put+0x1e>
		return sdc_hci_cmd_cb_reset();
   1b8e4:	f7e8 ffa2 	bl	482c <sdc_hci_cmd_cb_reset>
   1b8e8:	e7f7      	b.n	1b8da <controller_and_baseband_cmd_put+0x1e>

0001b8ea <supported_commands>:
{
   1b8ea:	b510      	push	{r4, lr}
   1b8ec:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1b8ee:	222e      	movs	r2, #46	; 0x2e
   1b8f0:	2100      	movs	r1, #0
   1b8f2:	f7ff f93a 	bl	1ab6a <memset>
	cmds->hci_set_event_mask = 1;
   1b8f6:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   1b8f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   1b8fc:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_local_version_information = 1;
   1b8fe:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   1b900:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1b904:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   1b906:	7be3      	ldrb	r3, [r4, #15]
   1b908:	f043 0302 	orr.w	r3, r3, #2
   1b90c:	73e3      	strb	r3, [r4, #15]
	cmds->hci_le_set_event_mask = 1;
   1b90e:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   1b910:	f043 0317 	orr.w	r3, r3, #23
   1b914:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   1b916:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   1b918:	f043 03cc 	orr.w	r3, r3, #204	; 0xcc
   1b91c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_white_list = 1;
   1b91e:	7ee3      	ldrb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   1b920:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
   1b924:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_read_supported_states = 1;
   1b926:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   1b928:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   1b92c:	7723      	strb	r3, [r4, #28]
	cmds->hci_le_add_device_to_resolving_list = 1;
   1b92e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   1b932:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   1b936:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   1b93a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   1b93e:	f043 0386 	orr.w	r3, r3, #134	; 0x86
   1b942:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   1b946:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1b94a:	f043 0301 	orr.w	r3, r3, #1
   1b94e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   1b952:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1b956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b95a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   1b95e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1b962:	f043 0304 	orr.w	r3, r3, #4
   1b966:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   1b96a:	bd10      	pop	{r4, pc}

0001b96c <supported_features>:
{
   1b96c:	b510      	push	{r4, lr}
   1b96e:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   1b970:	2208      	movs	r2, #8
   1b972:	2100      	movs	r1, #0
   1b974:	f7ff f8f9 	bl	1ab6a <memset>
	features->bdedr_not_supported = 1;
   1b978:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   1b97a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1b97e:	7123      	strb	r3, [r4, #4]
}
   1b980:	bd10      	pop	{r4, pc}

0001b982 <info_param_cmd_put>:
{
   1b982:	b538      	push	{r3, r4, r5, lr}
   1b984:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   1b986:	1d88      	adds	r0, r1, #6
   1b988:	7865      	ldrb	r5, [r4, #1]
   1b98a:	7823      	ldrb	r3, [r4, #0]
   1b98c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1b990:	b21b      	sxth	r3, r3
	switch (opcode)	{
   1b992:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1b996:	3b01      	subs	r3, #1
   1b998:	2b08      	cmp	r3, #8
   1b99a:	d820      	bhi.n	1b9de <info_param_cmd_put+0x5c>
   1b99c:	e8df f003 	tbb	[pc, r3]
   1b9a0:	1f120b05 	.word	0x1f120b05
   1b9a4:	1f1f1f1f 	.word	0x1f1f1f1f
   1b9a8:	19          	.byte	0x19
   1b9a9:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1b9aa:	7813      	ldrb	r3, [r2, #0]
   1b9ac:	3308      	adds	r3, #8
   1b9ae:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1b9b0:	f7f0 f91a 	bl	bbe8 <sdc_hci_cmd_ip_read_local_version_information>
   1b9b4:	e014      	b.n	1b9e0 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1b9b6:	7813      	ldrb	r3, [r2, #0]
   1b9b8:	3340      	adds	r3, #64	; 0x40
   1b9ba:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   1b9bc:	f7ff ff95 	bl	1b8ea <supported_commands>
		return 0;
   1b9c0:	2000      	movs	r0, #0
   1b9c2:	e00d      	b.n	1b9e0 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1b9c4:	7813      	ldrb	r3, [r2, #0]
   1b9c6:	3308      	adds	r3, #8
   1b9c8:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   1b9ca:	f7ff ffcf 	bl	1b96c <supported_features>
		return 0;
   1b9ce:	2000      	movs	r0, #0
   1b9d0:	e006      	b.n	1b9e0 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1b9d2:	7813      	ldrb	r3, [r2, #0]
   1b9d4:	3306      	adds	r3, #6
   1b9d6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1b9d8:	f7f0 f904 	bl	bbe4 <sdc_hci_cmd_ip_read_bd_addr>
   1b9dc:	e000      	b.n	1b9e0 <info_param_cmd_put+0x5e>
   1b9de:	2001      	movs	r0, #1
}
   1b9e0:	bd38      	pop	{r3, r4, r5, pc}

0001b9e2 <le_supported_features>:
{
   1b9e2:	b510      	push	{r4, lr}
   1b9e4:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   1b9e6:	2205      	movs	r2, #5
   1b9e8:	2100      	movs	r1, #0
   1b9ea:	f7ff f8be 	bl	1ab6a <memset>
	features->le_encryption = 1;
   1b9ee:	7823      	ldrb	r3, [r4, #0]
	features->extended_scanner_filter_policies = 1;
   1b9f0:	f043 03d5 	orr.w	r3, r3, #213	; 0xd5
   1b9f4:	7023      	strb	r3, [r4, #0]
	features->channel_selection_algorithm_2 = 1;
   1b9f6:	7863      	ldrb	r3, [r4, #1]
   1b9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b9fc:	7063      	strb	r3, [r4, #1]
}
   1b9fe:	bd10      	pop	{r4, pc}

0001ba00 <vs_zephyr_supported_commands>:
{
   1ba00:	b510      	push	{r4, lr}
   1ba02:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1ba04:	2202      	movs	r2, #2
   1ba06:	2100      	movs	r1, #0
   1ba08:	f7ff f8af 	bl	1ab6a <memset>
	cmds->read_version_info = 1;
   1ba0c:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   1ba0e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1ba12:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   1ba14:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   1ba16:	f043 0307 	orr.w	r3, r3, #7
   1ba1a:	7063      	strb	r3, [r4, #1]
}
   1ba1c:	bd10      	pop	{r4, pc}

0001ba1e <vs_supported_commands>:
{
   1ba1e:	b510      	push	{r4, lr}
   1ba20:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   1ba22:	2201      	movs	r2, #1
   1ba24:	2100      	movs	r1, #0
   1ba26:	f7ff f8a0 	bl	1ab6a <memset>
	cmds->read_supported_vs_commands = 1;
   1ba2a:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   1ba2c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1ba30:	7023      	strb	r3, [r4, #0]
}
   1ba32:	bd10      	pop	{r4, pc}

0001ba34 <le_controller_cmd_put>:
{
   1ba34:	b538      	push	{r3, r4, r5, lr}
   1ba36:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ba38:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   1ba3a:	3106      	adds	r1, #6
   1ba3c:	7865      	ldrb	r5, [r4, #1]
   1ba3e:	7823      	ldrb	r3, [r4, #0]
   1ba40:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1ba44:	b21b      	sxth	r3, r3
	switch (opcode)	{
   1ba46:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1ba4a:	3b01      	subs	r3, #1
   1ba4c:	2b4d      	cmp	r3, #77	; 0x4d
   1ba4e:	f200 8089 	bhi.w	1bb64 <le_controller_cmd_put+0x130>
   1ba52:	e8df f003 	tbb	[pc, r3]
   1ba56:	2a27      	.short	0x2a27
   1ba58:	87398731 	.word	0x87398731
   1ba5c:	87878787 	.word	0x87878787
   1ba60:	87873f3c 	.word	0x87873f3c
   1ba64:	4f4c4942 	.word	0x4f4c4942
   1ba68:	87878787 	.word	0x87878787
   1ba6c:	87875852 	.word	0x87875852
   1ba70:	87875f87 	.word	0x87875f87
   1ba74:	87878787 	.word	0x87878787
   1ba78:	87878787 	.word	0x87878787
   1ba7c:	706d6a67 	.word	0x706d6a67
   1ba80:	7a778787 	.word	0x7a778787
   1ba84:	87878787 	.word	0x87878787
   1ba88:	87878787 	.word	0x87878787
   1ba8c:	87878787 	.word	0x87878787
   1ba90:	87878787 	.word	0x87878787
   1ba94:	87878787 	.word	0x87878787
   1ba98:	87878787 	.word	0x87878787
   1ba9c:	87878787 	.word	0x87878787
   1baa0:	8487877d 	.word	0x8487877d
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1baa4:	f7f0 f8bc 	bl	bc20 <sdc_hci_cmd_le_set_event_mask>
   1baa8:	e05d      	b.n	1bb66 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1baaa:	7813      	ldrb	r3, [r2, #0]
   1baac:	3303      	adds	r3, #3
   1baae:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1bab0:	4608      	mov	r0, r1
   1bab2:	f7f0 f8a7 	bl	bc04 <sdc_hci_cmd_le_read_buffer_size>
   1bab6:	e056      	b.n	1bb66 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1bab8:	7813      	ldrb	r3, [r2, #0]
   1baba:	3308      	adds	r3, #8
   1babc:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   1babe:	4608      	mov	r0, r1
   1bac0:	f7ff ff8f 	bl	1b9e2 <le_supported_features>
		return 0;
   1bac4:	2000      	movs	r0, #0
   1bac6:	e04e      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1bac8:	f7f0 f8b1 	bl	bc2e <sdc_hci_cmd_le_set_random_address>
   1bacc:	e04b      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   1bace:	f7f0 f8b4 	bl	bc3a <sdc_hci_cmd_le_set_scan_params>
   1bad2:	e048      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1bad4:	f7f0 f8af 	bl	bc36 <sdc_hci_cmd_le_set_scan_enable>
   1bad8:	e045      	b.n	1bb66 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   1bada:	7813      	ldrb	r3, [r2, #0]
   1badc:	3301      	adds	r3, #1
   1bade:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1bae0:	4608      	mov	r0, r1
   1bae2:	f7f0 f895 	bl	bc10 <sdc_hci_cmd_le_read_white_list_size>
   1bae6:	e03e      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_clear_white_list();
   1bae8:	f7f0 f886 	bl	bbf8 <sdc_hci_cmd_le_clear_white_list>
   1baec:	e03b      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1baee:	f7f0 f87f 	bl	bbf0 <sdc_hci_cmd_le_add_device_to_white_list>
   1baf2:	e038      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1baf4:	f7f0 f890 	bl	bc18 <sdc_hci_cmd_le_remove_device_from_white_list>
   1baf8:	e035      	b.n	1bb66 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1bafa:	7813      	ldrb	r3, [r2, #0]
   1bafc:	3310      	adds	r3, #16
   1bafe:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1bb00:	f7f0 f87c 	bl	bbfc <sdc_hci_cmd_le_encrypt>
   1bb04:	e02f      	b.n	1bb66 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1bb06:	7813      	ldrb	r3, [r2, #0]
   1bb08:	3308      	adds	r3, #8
   1bb0a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1bb0c:	4608      	mov	r0, r1
   1bb0e:	f7f0 f877 	bl	bc00 <sdc_hci_cmd_le_rand>
   1bb12:	e028      	b.n	1bb66 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1bb14:	7813      	ldrb	r3, [r2, #0]
   1bb16:	3308      	adds	r3, #8
   1bb18:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   1bb1a:	4608      	mov	r0, r1
   1bb1c:	f7ff fec7 	bl	1b8ae <le_read_supported_states>
		return 0;
   1bb20:	2000      	movs	r0, #0
   1bb22:	e020      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1bb24:	f7f0 f862 	bl	bbec <sdc_hci_cmd_le_add_device_to_resolving_list>
   1bb28:	e01d      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1bb2a:	f7f0 f873 	bl	bc14 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1bb2e:	e01a      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_clear_resolving_list();
   1bb30:	f7f0 f860 	bl	bbf4 <sdc_hci_cmd_le_clear_resolving_list>
   1bb34:	e017      	b.n	1bb66 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1bb36:	7813      	ldrb	r3, [r2, #0]
   1bb38:	3301      	adds	r3, #1
   1bb3a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1bb3c:	4608      	mov	r0, r1
   1bb3e:	f7f0 f863 	bl	bc08 <sdc_hci_cmd_le_read_resolving_list_size>
   1bb42:	e010      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1bb44:	f7f0 f86a 	bl	bc1c <sdc_hci_cmd_le_set_address_resolution_enable>
   1bb48:	e00d      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1bb4a:	f7f0 f872 	bl	bc32 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1bb4e:	e00a      	b.n	1bb66 <le_controller_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1bb50:	7813      	ldrb	r3, [r2, #0]
   1bb52:	3302      	adds	r3, #2
   1bb54:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1bb56:	4608      	mov	r0, r1
   1bb58:	f7f0 f858 	bl	bc0c <sdc_hci_cmd_le_read_transmit_power>
   1bb5c:	e003      	b.n	1bb66 <le_controller_cmd_put+0x132>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1bb5e:	f7f0 f864 	bl	bc2a <sdc_hci_cmd_le_set_privacy_mode>
   1bb62:	e000      	b.n	1bb66 <le_controller_cmd_put+0x132>
   1bb64:	2001      	movs	r0, #1
}
   1bb66:	bd38      	pop	{r3, r4, r5, pc}

0001bb68 <vs_cmd_put>:
{
   1bb68:	b538      	push	{r3, r4, r5, lr}
   1bb6a:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1bb6c:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   1bb6e:	3106      	adds	r1, #6
   1bb70:	7865      	ldrb	r5, [r4, #1]
   1bb72:	7823      	ldrb	r3, [r4, #0]
   1bb74:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   1bb78:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   1bb7c:	42a3      	cmp	r3, r4
   1bb7e:	d90f      	bls.n	1bba0 <vs_cmd_put+0x38>
   1bb80:	f64f 5405 	movw	r4, #64773	; 0xfd05
   1bb84:	42a3      	cmp	r3, r4
   1bb86:	d85b      	bhi.n	1bc40 <vs_cmd_put+0xd8>
   1bb88:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   1bb8c:	d319      	bcc.n	1bbc2 <vs_cmd_put+0x5a>
   1bb8e:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1bb92:	2b05      	cmp	r3, #5
   1bb94:	d850      	bhi.n	1bc38 <vs_cmd_put+0xd0>
   1bb96:	e8df f003 	tbb	[pc, r3]
   1bb9a:	4038      	.short	0x4038
   1bb9c:	4c494643 	.word	0x4c494643
   1bba0:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1bba4:	d801      	bhi.n	1bbaa <vs_cmd_put+0x42>
   1bba6:	2001      	movs	r0, #1
}
   1bba8:	bd38      	pop	{r3, r4, r5, pc}
   1bbaa:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1bbae:	3b01      	subs	r3, #1
   1bbb0:	2b09      	cmp	r3, #9
   1bbb2:	d843      	bhi.n	1bc3c <vs_cmd_put+0xd4>
   1bbb4:	e8df f003 	tbb	[pc, r3]
   1bbb8:	42420e07 	.word	0x42420e07
   1bbbc:	42422642 	.word	0x42422642
   1bbc0:	1f16      	.short	0x1f16
	switch (opcode)	{
   1bbc2:	2001      	movs	r0, #1
   1bbc4:	e7f0      	b.n	1bba8 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1bbc6:	7813      	ldrb	r3, [r2, #0]
   1bbc8:	330c      	adds	r3, #12
   1bbca:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1bbcc:	4608      	mov	r0, r1
   1bbce:	f7e8 fe41 	bl	4854 <sdc_hci_cmd_vs_zephyr_read_version_info>
   1bbd2:	e7e9      	b.n	1bba8 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1bbd4:	7813      	ldrb	r3, [r2, #0]
   1bbd6:	3340      	adds	r3, #64	; 0x40
   1bbd8:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   1bbda:	4608      	mov	r0, r1
   1bbdc:	f7ff ff10 	bl	1ba00 <vs_zephyr_supported_commands>
		return 0;
   1bbe0:	2000      	movs	r0, #0
   1bbe2:	e7e1      	b.n	1bba8 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   1bbe4:	7813      	ldrb	r3, [r2, #0]
   1bbe6:	3301      	adds	r3, #1
   1bbe8:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1bbea:	3316      	adds	r3, #22
   1bbec:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1bbee:	4608      	mov	r0, r1
   1bbf0:	f7ef ffa7 	bl	bb42 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1bbf4:	e7d8      	b.n	1bba8 <vs_cmd_put+0x40>
		*param_length_out +=
   1bbf6:	7813      	ldrb	r3, [r2, #0]
   1bbf8:	3320      	adds	r3, #32
   1bbfa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1bbfc:	4608      	mov	r0, r1
   1bbfe:	f7ef ff53 	bl	baa8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1bc02:	e7d1      	b.n	1bba8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1bc04:	f7ef ffec 	bl	bbe0 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1bc08:	e7ce      	b.n	1bba8 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1bc0a:	7813      	ldrb	r3, [r2, #0]
   1bc0c:	3340      	adds	r3, #64	; 0x40
   1bc0e:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   1bc10:	4608      	mov	r0, r1
   1bc12:	f7ff ff04 	bl	1ba1e <vs_supported_commands>
		return 0;
   1bc16:	2000      	movs	r0, #0
   1bc18:	e7c6      	b.n	1bba8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1bc1a:	f7ef ff3e 	bl	ba9a <sdc_hci_cmd_vs_llpm_mode_set>
   1bc1e:	e7c3      	b.n	1bba8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1bc20:	f7ef ff0f 	bl	ba42 <sdc_hci_cmd_vs_conn_update>
   1bc24:	e7c0      	b.n	1bba8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1bc26:	f7ef ff04 	bl	ba32 <sdc_hci_cmd_vs_conn_event_extend>
   1bc2a:	e7bd      	b.n	1bba8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1bc2c:	f7ef ff37 	bl	ba9e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1bc30:	e7ba      	b.n	1bba8 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1bc32:	f7ef ff30 	bl	ba96 <sdc_hci_cmd_vs_event_length_set>
   1bc36:	e7b7      	b.n	1bba8 <vs_cmd_put+0x40>
	switch (opcode)	{
   1bc38:	2001      	movs	r0, #1
   1bc3a:	e7b5      	b.n	1bba8 <vs_cmd_put+0x40>
   1bc3c:	2001      	movs	r0, #1
   1bc3e:	e7b3      	b.n	1bba8 <vs_cmd_put+0x40>
   1bc40:	2001      	movs	r0, #1
   1bc42:	e7b1      	b.n	1bba8 <vs_cmd_put+0x40>

0001bc44 <cmd_put>:
{
   1bc44:	b570      	push	{r4, r5, r6, lr}
   1bc46:	b082      	sub	sp, #8
   1bc48:	460e      	mov	r6, r1
   1bc4a:	7842      	ldrb	r2, [r0, #1]
   1bc4c:	7805      	ldrb	r5, [r0, #0]
   1bc4e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1bc52:	2304      	movs	r3, #4
   1bc54:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   1bc58:	0893      	lsrs	r3, r2, #2
   1bc5a:	2a23      	cmp	r2, #35	; 0x23
   1bc5c:	d809      	bhi.n	1bc72 <cmd_put+0x2e>
   1bc5e:	2b03      	cmp	r3, #3
   1bc60:	d335      	bcc.n	1bcce <cmd_put+0x8a>
   1bc62:	3b03      	subs	r3, #3
   1bc64:	2b05      	cmp	r3, #5
   1bc66:	d834      	bhi.n	1bcd2 <cmd_put+0x8e>
   1bc68:	e8df f003 	tbb	[pc, r3]
   1bc6c:	33251f19 	.word	0x33251f19
   1bc70:	2b33      	.short	0x2b33
   1bc72:	2b3f      	cmp	r3, #63	; 0x3f
   1bc74:	d105      	bne.n	1bc82 <cmd_put+0x3e>
		status = vs_cmd_put(cmd_in,
   1bc76:	f10d 0207 	add.w	r2, sp, #7
   1bc7a:	f7ff ff75 	bl	1bb68 <vs_cmd_put>
   1bc7e:	4604      	mov	r4, r0
		break;
   1bc80:	e000      	b.n	1bc84 <cmd_put+0x40>
	switch (BT_OGF(opcode)) {
   1bc82:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   1bc84:	4628      	mov	r0, r5
   1bc86:	f7ff fdbf 	bl	1b808 <command_generates_command_complete_event>
   1bc8a:	b108      	cbz	r0, 1bc90 <cmd_put+0x4c>
   1bc8c:	2c01      	cmp	r4, #1
   1bc8e:	d122      	bne.n	1bcd6 <cmd_put+0x92>
		encode_command_status(raw_event_out, opcode, status);
   1bc90:	4622      	mov	r2, r4
   1bc92:	4629      	mov	r1, r5
   1bc94:	4630      	mov	r0, r6
   1bc96:	f7ff fdf6 	bl	1b886 <encode_command_status>
}
   1bc9a:	b002      	add	sp, #8
   1bc9c:	bd70      	pop	{r4, r5, r6, pc}
		status = controller_and_baseband_cmd_put(cmd_in,
   1bc9e:	f10d 0207 	add.w	r2, sp, #7
   1bca2:	f7ff fe0b 	bl	1b8bc <controller_and_baseband_cmd_put>
   1bca6:	4604      	mov	r4, r0
		break;
   1bca8:	e7ec      	b.n	1bc84 <cmd_put+0x40>
		status = info_param_cmd_put(cmd_in,
   1bcaa:	f10d 0207 	add.w	r2, sp, #7
   1bcae:	f7ff fe68 	bl	1b982 <info_param_cmd_put>
   1bcb2:	4604      	mov	r4, r0
		break;
   1bcb4:	e7e6      	b.n	1bc84 <cmd_put+0x40>
		status = status_param_cmd_put(cmd_in,
   1bcb6:	f10d 0207 	add.w	r2, sp, #7
   1bcba:	f7ff fdfd 	bl	1b8b8 <status_param_cmd_put>
   1bcbe:	4604      	mov	r4, r0
		break;
   1bcc0:	e7e0      	b.n	1bc84 <cmd_put+0x40>
		status = le_controller_cmd_put(cmd_in,
   1bcc2:	f10d 0207 	add.w	r2, sp, #7
   1bcc6:	f7ff feb5 	bl	1ba34 <le_controller_cmd_put>
   1bcca:	4604      	mov	r4, r0
		break;
   1bccc:	e7da      	b.n	1bc84 <cmd_put+0x40>
	switch (BT_OGF(opcode)) {
   1bcce:	2401      	movs	r4, #1
   1bcd0:	e7d8      	b.n	1bc84 <cmd_put+0x40>
   1bcd2:	2401      	movs	r4, #1
   1bcd4:	e7d6      	b.n	1bc84 <cmd_put+0x40>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1bcd6:	4623      	mov	r3, r4
   1bcd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1bcdc:	4629      	mov	r1, r5
   1bcde:	4630      	mov	r0, r6
   1bce0:	f7ff fdda 	bl	1b898 <encode_command_complete_header>
}
   1bce4:	e7d9      	b.n	1bc9a <cmd_put+0x56>

0001bce6 <m_config_clock_source_get>:
}
   1bce6:	2001      	movs	r0, #1
   1bce8:	4770      	bx	lr

0001bcea <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1bcea:	4668      	mov	r0, sp
   1bcec:	f020 0107 	bic.w	r1, r0, #7
   1bcf0:	468d      	mov	sp, r1
   1bcf2:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1bcf4:	f7e7 f9c2 	bl	307c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1bcf8:	f7f4 f984 	bl	10004 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1bcfc:	f7f4 fa90 	bl	10220 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1bd00:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1bd04:	4685      	mov	sp, r0
   1bd06:	4770      	bx	lr

0001bd08 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1bd08:	4668      	mov	r0, sp
   1bd0a:	f020 0107 	bic.w	r1, r0, #7
   1bd0e:	468d      	mov	sp, r1
   1bd10:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1bd12:	f7e7 f935 	bl	2f80 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1bd16:	f7f4 f975 	bl	10004 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1bd1a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1bd1e:	4685      	mov	sp, r0
   1bd20:	4770      	bx	lr

0001bd22 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1bd22:	4668      	mov	r0, sp
   1bd24:	f020 0107 	bic.w	r1, r0, #7
   1bd28:	468d      	mov	sp, r1
   1bd2a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1bd2c:	f7ef f959 	bl	afe2 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1bd30:	f7f4 f968 	bl	10004 <_arch_isr_direct_pm>
   1bd34:	f7f4 fa74 	bl	10220 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1bd38:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1bd3c:	4685      	mov	sp, r0
   1bd3e:	4770      	bx	lr

0001bd40 <nrfx_clock_stop>:
	switch (domain) {
   1bd40:	2801      	cmp	r0, #1
   1bd42:	d000      	beq.n	1bd46 <nrfx_clock_stop+0x6>
   1bd44:	4770      	bx	lr
{
   1bd46:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   1bd48:	f7e7 ffb0 	bl	3cac <mpsl_clock_hfclk_release>
}
   1bd4c:	bd08      	pop	{r3, pc}

0001bd4e <nrfx_clock_enable>:
}
   1bd4e:	4770      	bx	lr

0001bd50 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   1bd50:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   1bd52:	f7e7 fdc9 	bl	38e8 <MPSL_IRQ_CLOCK_Handler>
}
   1bd56:	bd08      	pop	{r3, pc}

0001bd58 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   1bd58:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1bd5a:	f7fb f989 	bl	17070 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   1bd5e:	bd08      	pop	{r3, pc}

0001bd60 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1bd60:	b510      	push	{r4, lr}
   1bd62:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1bd64:	f7f3 ffc2 	bl	fcec <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1bd68:	f7f4 f87e 	bl	fe68 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   1bd6c:	4620      	mov	r0, r4
   1bd6e:	f7ff fff3 	bl	1bd58 <hw_cc3xx_init_internal>
	return res;
}
   1bd72:	bd10      	pop	{r4, pc}

0001bd74 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   1bd74:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1bd76:	4780      	blx	r0
}
   1bd78:	bd08      	pop	{r3, pc}

0001bd7a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1bd7a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1bd7c:	f000 fcec 	bl	1c758 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1bd80:	bd08      	pop	{r3, pc}

0001bd82 <pin_is_task_output>:
{
   1bd82:	b510      	push	{r4, lr}
   1bd84:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1bd86:	f7f8 fd19 	bl	147bc <pin_is_output>
   1bd8a:	b128      	cbz	r0, 1bd98 <pin_is_task_output+0x16>
   1bd8c:	4620      	mov	r0, r4
   1bd8e:	f7f8 fcff 	bl	14790 <pin_in_use_by_te>
   1bd92:	b118      	cbz	r0, 1bd9c <pin_is_task_output+0x1a>
   1bd94:	2001      	movs	r0, #1
   1bd96:	e000      	b.n	1bd9a <pin_is_task_output+0x18>
   1bd98:	2000      	movs	r0, #0
}
   1bd9a:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1bd9c:	2000      	movs	r0, #0
   1bd9e:	e7fc      	b.n	1bd9a <pin_is_task_output+0x18>

0001bda0 <pin_is_input>:
{
   1bda0:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1bda2:	f7f8 fd0b 	bl	147bc <pin_is_output>
   1bda6:	f080 0001 	eor.w	r0, r0, #1
}
   1bdaa:	b2c0      	uxtb	r0, r0
   1bdac:	bd08      	pop	{r3, pc}

0001bdae <gpiote_polarity_to_trigger>:
}
   1bdae:	4770      	bx	lr

0001bdb0 <gpiote_trigger_to_polarity>:
}
   1bdb0:	4770      	bx	lr

0001bdb2 <is_level>:
}
   1bdb2:	2803      	cmp	r0, #3
   1bdb4:	bf94      	ite	ls
   1bdb6:	2000      	movls	r0, #0
   1bdb8:	2001      	movhi	r0, #1
   1bdba:	4770      	bx	lr

0001bdbc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1bdbc:	b148      	cbz	r0, 1bdd2 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1bdbe:	68c3      	ldr	r3, [r0, #12]
   1bdc0:	8818      	ldrh	r0, [r3, #0]
   1bdc2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1bdc6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1bdca:	bf14      	ite	ne
   1bdcc:	2000      	movne	r0, #0
   1bdce:	2001      	moveq	r0, #1
   1bdd0:	4770      	bx	lr
		return false;
   1bdd2:	2000      	movs	r0, #0
}
   1bdd4:	4770      	bx	lr

0001bdd6 <k_heap_init>:
{
   1bdd6:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   1bdd8:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1bddc:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1bdde:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1bde0:	f7fe f939 	bl	1a056 <sys_heap_init>
}
   1bde4:	bd10      	pop	{r4, pc}

0001bde6 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1bde6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdea:	b087      	sub	sp, #28
   1bdec:	4680      	mov	r8, r0
   1bdee:	9103      	str	r1, [sp, #12]
   1bdf0:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1bdf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1bdf6:	f000 fcb5 	bl	1c764 <sys_clock_timeout_end_calc>
   1bdfa:	4681      	mov	r9, r0
   1bdfc:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1bdfe:	f108 0314 	add.w	r3, r8, #20
   1be02:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   1be04:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be08:	f3ef 8511 	mrs	r5, BASEPRI
   1be0c:	f383 8812 	msr	BASEPRI_MAX, r3
   1be10:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   1be14:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   1be18:	4654      	mov	r4, sl

	while (ret == NULL) {
   1be1a:	e00f      	b.n	1be3c <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1be1c:	e9cd 6700 	strd	r6, r7, [sp]
   1be20:	f108 020c 	add.w	r2, r8, #12
   1be24:	4629      	mov	r1, r5
   1be26:	9805      	ldr	r0, [sp, #20]
   1be28:	f7fa f98c 	bl	16144 <z_pend_curr>
   1be2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be30:	f3ef 8511 	mrs	r5, BASEPRI
   1be34:	f383 8812 	msr	BASEPRI_MAX, r3
   1be38:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   1be3c:	b9b4      	cbnz	r4, 1be6c <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1be3e:	9a04      	ldr	r2, [sp, #16]
   1be40:	9903      	ldr	r1, [sp, #12]
   1be42:	4640      	mov	r0, r8
   1be44:	f7fe f896 	bl	19f74 <sys_heap_aligned_alloc>
   1be48:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1be4a:	f7fa fd2f 	bl	168ac <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1be4e:	b96c      	cbnz	r4, 1be6c <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   1be50:	ebb9 0600 	subs.w	r6, r9, r0
   1be54:	eb6b 0701 	sbc.w	r7, fp, r1
   1be58:	2e01      	cmp	r6, #1
   1be5a:	f177 0300 	sbcs.w	r3, r7, #0
   1be5e:	db05      	blt.n	1be6c <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   1be60:	f1ba 0f00 	cmp.w	sl, #0
   1be64:	d1da      	bne.n	1be1c <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   1be66:	f04f 0a01 	mov.w	sl, #1
   1be6a:	e7d7      	b.n	1be1c <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   1be6c:	f385 8811 	msr	BASEPRI, r5
   1be70:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1be74:	4620      	mov	r0, r4
   1be76:	b007      	add	sp, #28
   1be78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001be7c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1be7c:	b570      	push	{r4, r5, r6, lr}
   1be7e:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1be80:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   1be84:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be88:	f3ef 8511 	mrs	r5, BASEPRI
   1be8c:	f383 8812 	msr	BASEPRI_MAX, r3
   1be90:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   1be94:	f7fe f82a 	bl	19eec <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1be98:	f104 000c 	add.w	r0, r4, #12
   1be9c:	f000 fb96 	bl	1c5cc <z_unpend_all>
   1bea0:	b920      	cbnz	r0, 1beac <k_heap_free+0x30>
	__asm__ volatile(
   1bea2:	f385 8811 	msr	BASEPRI, r5
   1bea6:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1beaa:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   1beac:	4629      	mov	r1, r5
   1beae:	4630      	mov	r0, r6
   1beb0:	f7f9 ffe4 	bl	15e7c <z_reschedule>
   1beb4:	e7f9      	b.n	1beaa <k_heap_free+0x2e>

0001beb6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1beb6:	68c2      	ldr	r2, [r0, #12]
   1beb8:	6903      	ldr	r3, [r0, #16]
   1beba:	431a      	orrs	r2, r3
   1bebc:	f012 0203 	ands.w	r2, r2, #3
   1bec0:	d10d      	bne.n	1bede <create_free_list+0x28>
	slab->free_list = NULL;
   1bec2:	2100      	movs	r1, #0
   1bec4:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1bec6:	e005      	b.n	1bed4 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   1bec8:	6941      	ldr	r1, [r0, #20]
   1beca:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   1becc:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   1bece:	68c1      	ldr	r1, [r0, #12]
   1bed0:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1bed2:	3201      	adds	r2, #1
   1bed4:	6881      	ldr	r1, [r0, #8]
   1bed6:	4291      	cmp	r1, r2
   1bed8:	d8f6      	bhi.n	1bec8 <create_free_list+0x12>
	return 0;
   1beda:	2000      	movs	r0, #0
   1bedc:	4770      	bx	lr
		return -EINVAL;
   1bede:	f06f 0015 	mvn.w	r0, #21
}
   1bee2:	4770      	bx	lr

0001bee4 <k_mem_slab_init>:
{
   1bee4:	b510      	push	{r4, lr}
   1bee6:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   1bee8:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   1beea:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   1beec:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   1beee:	2300      	movs	r3, #0
   1bef0:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   1bef2:	f7ff ffe0 	bl	1beb6 <create_free_list>
	if (rc < 0) {
   1bef6:	2800      	cmp	r0, #0
   1bef8:	db01      	blt.n	1befe <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   1befa:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   1befc:	6064      	str	r4, [r4, #4]
}
   1befe:	bd10      	pop	{r4, pc}

0001bf00 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf02:	4604      	mov	r4, r0
   1bf04:	460d      	mov	r5, r1
	__asm__ volatile(
   1bf06:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf0a:	f3ef 8611 	mrs	r6, BASEPRI
   1bf0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1bf16:	6943      	ldr	r3, [r0, #20]
   1bf18:	b163      	cbz	r3, 1bf34 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   1bf1a:	682b      	ldr	r3, [r5, #0]
   1bf1c:	6962      	ldr	r2, [r4, #20]
   1bf1e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1bf20:	682b      	ldr	r3, [r5, #0]
   1bf22:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1bf24:	69a3      	ldr	r3, [r4, #24]
   1bf26:	3b01      	subs	r3, #1
   1bf28:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1bf2a:	f386 8811 	msr	BASEPRI, r6
   1bf2e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1bf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf34:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1bf38:	f000 fb1d 	bl	1c576 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1bf3c:	2800      	cmp	r0, #0
   1bf3e:	d0ec      	beq.n	1bf1a <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1bf40:	682a      	ldr	r2, [r5, #0]
   1bf42:	2100      	movs	r1, #0
   1bf44:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1bf48:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1bf4a:	f000 fa52 	bl	1c3f2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1bf4e:	4631      	mov	r1, r6
   1bf50:	4638      	mov	r0, r7
   1bf52:	f7f9 ff93 	bl	15e7c <z_reschedule>
			return;
   1bf56:	e7ec      	b.n	1bf32 <k_mem_slab_free+0x32>

0001bf58 <setup_thread_stack>:
{
   1bf58:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1bf5a:	3207      	adds	r2, #7
   1bf5c:	f022 0207 	bic.w	r2, r2, #7
   1bf60:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1bf64:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1bf68:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   1bf6c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   1bf70:	2200      	movs	r2, #0
   1bf72:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   1bf76:	18c8      	adds	r0, r1, r3
   1bf78:	bc10      	pop	{r4}
   1bf7a:	4770      	bx	lr

0001bf7c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bf7c:	f3ef 8005 	mrs	r0, IPSR
}
   1bf80:	3800      	subs	r0, #0
   1bf82:	bf18      	it	ne
   1bf84:	2001      	movne	r0, #1
   1bf86:	4770      	bx	lr

0001bf88 <k_thread_name_get>:
}
   1bf88:	3078      	adds	r0, #120	; 0x78
   1bf8a:	4770      	bx	lr

0001bf8c <z_impl_k_thread_start>:
{
   1bf8c:	b508      	push	{r3, lr}
	z_sched_start(thread);
   1bf8e:	f7fa f89f 	bl	160d0 <z_sched_start>
}
   1bf92:	bd08      	pop	{r3, pc}

0001bf94 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1bf94:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   1bf96:	2400      	movs	r4, #0
   1bf98:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   1bf9a:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1bf9c:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   1bf9e:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1bfa0:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1bfa2:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1bfa4:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1bfa6:	bc10      	pop	{r4}
   1bfa8:	4770      	bx	lr

0001bfaa <z_impl_k_thread_create>:
{
   1bfaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bfac:	b087      	sub	sp, #28
   1bfae:	4604      	mov	r4, r0
   1bfb0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1bfb4:	2500      	movs	r5, #0
   1bfb6:	9505      	str	r5, [sp, #20]
   1bfb8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1bfba:	9504      	str	r5, [sp, #16]
   1bfbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1bfbe:	9503      	str	r5, [sp, #12]
   1bfc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1bfc2:	9502      	str	r5, [sp, #8]
   1bfc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1bfc6:	9501      	str	r5, [sp, #4]
   1bfc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1bfca:	9500      	str	r5, [sp, #0]
   1bfcc:	f7f9 fb3c 	bl	15648 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1bfd0:	f1b7 3fff 	cmp.w	r7, #4294967295
   1bfd4:	bf08      	it	eq
   1bfd6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1bfda:	d102      	bne.n	1bfe2 <z_impl_k_thread_create+0x38>
}
   1bfdc:	4620      	mov	r0, r4
   1bfde:	b007      	add	sp, #28
   1bfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1bfe2:	4632      	mov	r2, r6
   1bfe4:	463b      	mov	r3, r7
   1bfe6:	4620      	mov	r0, r4
   1bfe8:	f7f9 fb1c 	bl	15624 <schedule_new_thread>
   1bfec:	e7f6      	b.n	1bfdc <z_impl_k_thread_create+0x32>

0001bfee <z_pm_save_idle_exit>:
{
   1bfee:	b508      	push	{r3, lr}
	pm_system_resume();
   1bff0:	f7f3 fd58 	bl	faa4 <pm_system_resume>
	sys_clock_idle_exit();
   1bff4:	f7ff fb49 	bl	1b68a <sys_clock_idle_exit>
}
   1bff8:	bd08      	pop	{r3, pc}

0001bffa <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1bffa:	4288      	cmp	r0, r1
   1bffc:	da00      	bge.n	1c000 <new_prio_for_inheritance+0x6>
   1bffe:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1c000:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1c004:	db01      	blt.n	1c00a <new_prio_for_inheritance+0x10>
   1c006:	4608      	mov	r0, r1
   1c008:	4770      	bx	lr
   1c00a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1c00e:	4770      	bx	lr

0001c010 <adjust_owner_prio>:
{
   1c010:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1c012:	6880      	ldr	r0, [r0, #8]
   1c014:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c018:	428b      	cmp	r3, r1
   1c01a:	d101      	bne.n	1c020 <adjust_owner_prio+0x10>
	return false;
   1c01c:	2000      	movs	r0, #0
}
   1c01e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1c020:	f7fa f8a4 	bl	1616c <z_set_prio>
   1c024:	e7fb      	b.n	1c01e <adjust_owner_prio+0xe>

0001c026 <z_impl_k_mutex_init>:
{
   1c026:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1c028:	2000      	movs	r0, #0
   1c02a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   1c02c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1c02e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1c030:	605b      	str	r3, [r3, #4]
}
   1c032:	4770      	bx	lr

0001c034 <prepare_thread_to_run>:
{
   1c034:	b508      	push	{r3, lr}
   1c036:	2200      	movs	r2, #0
   1c038:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   1c03c:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   1c03e:	f000 f9d8 	bl	1c3f2 <z_ready_thread>
}
   1c042:	bd08      	pop	{r3, pc}

0001c044 <queue_insert>:
{
   1c044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c048:	4605      	mov	r5, r0
   1c04a:	460e      	mov	r6, r1
   1c04c:	4614      	mov	r4, r2
   1c04e:	461f      	mov	r7, r3
   1c050:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c054:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   1c058:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c05c:	f3ef 8911 	mrs	r9, BASEPRI
   1c060:	f383 8812 	msr	BASEPRI_MAX, r3
   1c064:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1c068:	b102      	cbz	r2, 1c06c <queue_insert+0x28>
	return list->tail;
   1c06a:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1c06c:	4640      	mov	r0, r8
   1c06e:	f000 fa82 	bl	1c576 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1c072:	b9a0      	cbnz	r0, 1c09e <queue_insert+0x5a>
	if (alloc) {
   1c074:	b9e7      	cbnz	r7, 1c0b0 <queue_insert+0x6c>
	node->next_and_flags = flags;
   1c076:	2300      	movs	r3, #0
   1c078:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1c07a:	b356      	cbz	r6, 1c0d2 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c07c:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1c07e:	f033 0303 	bics.w	r3, r3, #3
   1c082:	d134      	bne.n	1c0ee <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c084:	6823      	ldr	r3, [r4, #0]
   1c086:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c08a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1c08c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1c08e:	b35a      	cbz	r2, 1c0e8 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c090:	6813      	ldr	r3, [r2, #0]
   1c092:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c096:	4323      	orrs	r3, r4
   1c098:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c09a:	606c      	str	r4, [r5, #4]
}
   1c09c:	e031      	b.n	1c102 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   1c09e:	4621      	mov	r1, r4
   1c0a0:	f7ff ffc8 	bl	1c034 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   1c0a4:	4649      	mov	r1, r9
   1c0a6:	4640      	mov	r0, r8
   1c0a8:	f7f9 fee8 	bl	15e7c <z_reschedule>
		return 0;
   1c0ac:	2000      	movs	r0, #0
   1c0ae:	e032      	b.n	1c116 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   1c0b0:	2108      	movs	r1, #8
   1c0b2:	2000      	movs	r0, #0
   1c0b4:	f7fa ffa0 	bl	16ff8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1c0b8:	b120      	cbz	r0, 1c0c4 <queue_insert+0x80>
		anode->data = data;
   1c0ba:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   1c0bc:	2201      	movs	r2, #1
   1c0be:	6002      	str	r2, [r0, #0]
		data = anode;
   1c0c0:	4604      	mov	r4, r0
   1c0c2:	e7da      	b.n	1c07a <queue_insert+0x36>
	__asm__ volatile(
   1c0c4:	f389 8811 	msr	BASEPRI, r9
   1c0c8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1c0cc:	f06f 000b 	mvn.w	r0, #11
   1c0d0:	e021      	b.n	1c116 <queue_insert+0xd2>
	return list->head;
   1c0d2:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c0d4:	6823      	ldr	r3, [r4, #0]
   1c0d6:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c0da:	4313      	orrs	r3, r2
   1c0dc:	6023      	str	r3, [r4, #0]
	list->head = node;
   1c0de:	602c      	str	r4, [r5, #0]
	return list->tail;
   1c0e0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   1c0e2:	b973      	cbnz	r3, 1c102 <queue_insert+0xbe>
	list->tail = node;
   1c0e4:	606c      	str	r4, [r5, #4]
}
   1c0e6:	e00c      	b.n	1c102 <queue_insert+0xbe>
	list->tail = node;
   1c0e8:	606c      	str	r4, [r5, #4]
	list->head = node;
   1c0ea:	602c      	str	r4, [r5, #0]
}
   1c0ec:	e009      	b.n	1c102 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c0ee:	6822      	ldr	r2, [r4, #0]
   1c0f0:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c0f4:	4313      	orrs	r3, r2
   1c0f6:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c0f8:	6833      	ldr	r3, [r6, #0]
   1c0fa:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c0fe:	431c      	orrs	r4, r3
   1c100:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1c102:	2104      	movs	r1, #4
   1c104:	f105 0010 	add.w	r0, r5, #16
   1c108:	f000 fbf5 	bl	1c8f6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1c10c:	4649      	mov	r1, r9
   1c10e:	4640      	mov	r0, r8
   1c110:	f7f9 feb4 	bl	15e7c <z_reschedule>
	return 0;
   1c114:	2000      	movs	r0, #0
}
   1c116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c11a <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1c11a:	b160      	cbz	r0, 1c136 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c11c:	6803      	ldr	r3, [r0, #0]
   1c11e:	f013 0f03 	tst.w	r3, #3
   1c122:	d008      	beq.n	1c136 <z_queue_node_peek+0x1c>
{
   1c124:	b510      	push	{r4, lr}
		ret = anode->data;
   1c126:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1c128:	b909      	cbnz	r1, 1c12e <z_queue_node_peek+0x14>
		ret = anode->data;
   1c12a:	4620      	mov	r0, r4
}
   1c12c:	bd10      	pop	{r4, pc}
			k_free(anode);
   1c12e:	f000 fc0c 	bl	1c94a <k_free>
		ret = anode->data;
   1c132:	4620      	mov	r0, r4
   1c134:	e7fa      	b.n	1c12c <z_queue_node_peek+0x12>
}
   1c136:	4770      	bx	lr

0001c138 <k_queue_prepend>:
{
   1c138:	b500      	push	{lr}
   1c13a:	b083      	sub	sp, #12
   1c13c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1c13e:	2100      	movs	r1, #0
   1c140:	9100      	str	r1, [sp, #0]
   1c142:	460b      	mov	r3, r1
   1c144:	f7ff ff7e 	bl	1c044 <queue_insert>
}
   1c148:	b003      	add	sp, #12
   1c14a:	f85d fb04 	ldr.w	pc, [sp], #4

0001c14e <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   1c14e:	b3a1      	cbz	r1, 1c1ba <k_queue_append_list+0x6c>
{
   1c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c154:	4606      	mov	r6, r0
   1c156:	4617      	mov	r7, r2
   1c158:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   1c15a:	b38a      	cbz	r2, 1c1c0 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c15c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1c160:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c164:	f3ef 8811 	mrs	r8, BASEPRI
   1c168:	f383 8812 	msr	BASEPRI_MAX, r3
   1c16c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1c170:	4628      	mov	r0, r5
   1c172:	f000 fa00 	bl	1c576 <z_unpend_first_thread>
   1c176:	e006      	b.n	1c186 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   1c178:	4621      	mov	r1, r4
   1c17a:	f7ff ff5b 	bl	1c034 <prepare_thread_to_run>
		head = *(void **)head;
   1c17e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1c180:	4628      	mov	r0, r5
   1c182:	f000 f9f8 	bl	1c576 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1c186:	b10c      	cbz	r4, 1c18c <k_queue_append_list+0x3e>
   1c188:	2800      	cmp	r0, #0
   1c18a:	d1f5      	bne.n	1c178 <k_queue_append_list+0x2a>
	if (head != NULL) {
   1c18c:	b13c      	cbz	r4, 1c19e <k_queue_append_list+0x50>
	return list->tail;
   1c18e:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1c190:	b18a      	cbz	r2, 1c1b6 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1c192:	6813      	ldr	r3, [r2, #0]
   1c194:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1c198:	431c      	orrs	r4, r3
   1c19a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c19c:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1c19e:	2104      	movs	r1, #4
   1c1a0:	f106 0010 	add.w	r0, r6, #16
   1c1a4:	f000 fba7 	bl	1c8f6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1c1a8:	4641      	mov	r1, r8
   1c1aa:	4628      	mov	r0, r5
   1c1ac:	f7f9 fe66 	bl	15e7c <z_reschedule>
	return 0;
   1c1b0:	2000      	movs	r0, #0
}
   1c1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   1c1b6:	6034      	str	r4, [r6, #0]
}
   1c1b8:	e7f0      	b.n	1c19c <k_queue_append_list+0x4e>
		return -EINVAL;
   1c1ba:	f06f 0015 	mvn.w	r0, #21
}
   1c1be:	4770      	bx	lr
		return -EINVAL;
   1c1c0:	f06f 0015 	mvn.w	r0, #21
   1c1c4:	e7f5      	b.n	1c1b2 <k_queue_append_list+0x64>

0001c1c6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1c1c6:	b15a      	cbz	r2, 1c1e0 <z_impl_k_sem_init+0x1a>
   1c1c8:	428a      	cmp	r2, r1
   1c1ca:	d30c      	bcc.n	1c1e6 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   1c1cc:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1c1ce:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1c1d0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1c1d2:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   1c1d4:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1c1d8:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1c1da:	6143      	str	r3, [r0, #20]
	return 0;
   1c1dc:	2000      	movs	r0, #0
   1c1de:	4770      	bx	lr
		return -EINVAL;
   1c1e0:	f06f 0015 	mvn.w	r0, #21
   1c1e4:	4770      	bx	lr
   1c1e6:	f06f 0015 	mvn.w	r0, #21
}
   1c1ea:	4770      	bx	lr

0001c1ec <work_timeout>:
{
   1c1ec:	b510      	push	{r4, lr}
   1c1ee:	b082      	sub	sp, #8
   1c1f0:	4603      	mov	r3, r0
   1c1f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c1f6:	f3ef 8411 	mrs	r4, BASEPRI
   1c1fa:	f382 8812 	msr	BASEPRI_MAX, r2
   1c1fe:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1c202:	2200      	movs	r2, #0
   1c204:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   1c206:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   1c20a:	f022 0108 	bic.w	r1, r2, #8
   1c20e:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1c212:	f012 0f08 	tst.w	r2, #8
   1c216:	d105      	bne.n	1c224 <work_timeout+0x38>
	__asm__ volatile(
   1c218:	f384 8811 	msr	BASEPRI, r4
   1c21c:	f3bf 8f6f 	isb	sy
}
   1c220:	b002      	add	sp, #8
   1c222:	bd10      	pop	{r4, pc}
   1c224:	3810      	subs	r0, #16
		queue = dw->queue;
   1c226:	699b      	ldr	r3, [r3, #24]
   1c228:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1c22a:	a901      	add	r1, sp, #4
   1c22c:	f7f9 fc32 	bl	15a94 <submit_to_queue_locked>
   1c230:	e7f2      	b.n	1c218 <work_timeout+0x2c>

0001c232 <k_work_submit_to_queue>:
{
   1c232:	b530      	push	{r4, r5, lr}
   1c234:	b083      	sub	sp, #12
   1c236:	9001      	str	r0, [sp, #4]
   1c238:	4608      	mov	r0, r1
	__asm__ volatile(
   1c23a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c23e:	f3ef 8511 	mrs	r5, BASEPRI
   1c242:	f383 8812 	msr	BASEPRI_MAX, r3
   1c246:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1c24a:	a901      	add	r1, sp, #4
   1c24c:	f7f9 fc22 	bl	15a94 <submit_to_queue_locked>
   1c250:	4604      	mov	r4, r0
	__asm__ volatile(
   1c252:	f385 8811 	msr	BASEPRI, r5
   1c256:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1c25a:	2800      	cmp	r0, #0
   1c25c:	dc02      	bgt.n	1c264 <k_work_submit_to_queue+0x32>
}
   1c25e:	4620      	mov	r0, r4
   1c260:	b003      	add	sp, #12
   1c262:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   1c264:	f7fa f96a 	bl	1653c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1c268:	2800      	cmp	r0, #0
   1c26a:	d0f8      	beq.n	1c25e <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   1c26c:	f7fa f8a0 	bl	163b0 <z_impl_k_yield>
	return ret;
   1c270:	e7f5      	b.n	1c25e <k_work_submit_to_queue+0x2c>

0001c272 <k_work_init_delayable>:
{
   1c272:	b538      	push	{r3, r4, r5, lr}
   1c274:	4604      	mov	r4, r0
   1c276:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1c278:	2230      	movs	r2, #48	; 0x30
   1c27a:	2100      	movs	r1, #0
   1c27c:	f7fe fc75 	bl	1ab6a <memset>
   1c280:	6065      	str	r5, [r4, #4]
   1c282:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c286:	60e3      	str	r3, [r4, #12]
}
   1c288:	bd38      	pop	{r3, r4, r5, pc}

0001c28a <k_work_schedule_for_queue>:
{
   1c28a:	b510      	push	{r4, lr}
   1c28c:	b082      	sub	sp, #8
   1c28e:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   1c290:	f04f 0040 	mov.w	r0, #64	; 0x40
   1c294:	f3ef 8411 	mrs	r4, BASEPRI
   1c298:	f380 8812 	msr	BASEPRI_MAX, r0
   1c29c:	f3bf 8f6f 	isb	sy
	return *flagp;
   1c2a0:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1c2a2:	f010 0f0e 	tst.w	r0, #14
   1c2a6:	d006      	beq.n	1c2b6 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1c2a8:	2000      	movs	r0, #0
	__asm__ volatile(
   1c2aa:	f384 8811 	msr	BASEPRI, r4
   1c2ae:	f3bf 8f6f 	isb	sy
}
   1c2b2:	b002      	add	sp, #8
   1c2b4:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   1c2b6:	a801      	add	r0, sp, #4
   1c2b8:	f7f9 fd0c 	bl	15cd4 <schedule_for_queue_locked>
   1c2bc:	e7f5      	b.n	1c2aa <k_work_schedule_for_queue+0x20>

0001c2be <k_work_reschedule_for_queue>:
{
   1c2be:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2c0:	b083      	sub	sp, #12
   1c2c2:	9001      	str	r0, [sp, #4]
   1c2c4:	460c      	mov	r4, r1
   1c2c6:	4616      	mov	r6, r2
   1c2c8:	461d      	mov	r5, r3
	__asm__ volatile(
   1c2ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c2ce:	f3ef 8711 	mrs	r7, BASEPRI
   1c2d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2d6:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   1c2da:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   1c2dc:	f023 0208 	bic.w	r2, r3, #8
   1c2e0:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1c2e2:	f013 0f08 	tst.w	r3, #8
   1c2e6:	d10b      	bne.n	1c300 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   1c2e8:	4632      	mov	r2, r6
   1c2ea:	462b      	mov	r3, r5
   1c2ec:	4621      	mov	r1, r4
   1c2ee:	a801      	add	r0, sp, #4
   1c2f0:	f7f9 fcf0 	bl	15cd4 <schedule_for_queue_locked>
	__asm__ volatile(
   1c2f4:	f387 8811 	msr	BASEPRI, r7
   1c2f8:	f3bf 8f6f 	isb	sy
}
   1c2fc:	b003      	add	sp, #12
   1c2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   1c300:	f101 0010 	add.w	r0, r1, #16
   1c304:	f000 f9c5 	bl	1c692 <z_abort_timeout>
		ret = true;
   1c308:	e7ee      	b.n	1c2e8 <k_work_reschedule_for_queue+0x2a>

0001c30a <thread_active_elsewhere>:
}
   1c30a:	2000      	movs	r0, #0
   1c30c:	4770      	bx	lr

0001c30e <pended_on_thread>:
}
   1c30e:	6880      	ldr	r0, [r0, #8]
   1c310:	4770      	bx	lr

0001c312 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1c312:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1c316:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1c31a:	4283      	cmp	r3, r0
   1c31c:	d001      	beq.n	1c322 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1c31e:	1ac0      	subs	r0, r0, r3
   1c320:	4770      	bx	lr
	return 0;
   1c322:	2000      	movs	r0, #0
}
   1c324:	4770      	bx	lr

0001c326 <z_unpend_thread_no_timeout>:
{
   1c326:	b538      	push	{r3, r4, r5, lr}
   1c328:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1c32a:	2300      	movs	r3, #0
	__asm__ volatile(
   1c32c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c330:	f3ef 8511 	mrs	r5, BASEPRI
   1c334:	f382 8812 	msr	BASEPRI_MAX, r2
   1c338:	f3bf 8f6f 	isb	sy
   1c33c:	b98b      	cbnz	r3, 1c362 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c33e:	4620      	mov	r0, r4
   1c340:	f7ff ffe5 	bl	1c30e <pended_on_thread>
   1c344:	4621      	mov	r1, r4
   1c346:	f000 f822 	bl	1c38e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c34a:	7b63      	ldrb	r3, [r4, #13]
   1c34c:	f023 0302 	bic.w	r3, r3, #2
   1c350:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1c352:	2300      	movs	r3, #0
   1c354:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1c356:	f385 8811 	msr	BASEPRI, r5
   1c35a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c35e:	2301      	movs	r3, #1
   1c360:	e7ec      	b.n	1c33c <z_unpend_thread_no_timeout+0x16>
}
   1c362:	bd38      	pop	{r3, r4, r5, pc}

0001c364 <z_reschedule_irqlock>:
{
   1c364:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c366:	4603      	mov	r3, r0
   1c368:	b920      	cbnz	r0, 1c374 <z_reschedule_irqlock+0x10>
   1c36a:	f3ef 8205 	mrs	r2, IPSR
   1c36e:	b942      	cbnz	r2, 1c382 <z_reschedule_irqlock+0x1e>
   1c370:	2201      	movs	r2, #1
   1c372:	e000      	b.n	1c376 <z_reschedule_irqlock+0x12>
   1c374:	2200      	movs	r2, #0
	if (resched(key)) {
   1c376:	b932      	cbnz	r2, 1c386 <z_reschedule_irqlock+0x22>
   1c378:	f383 8811 	msr	BASEPRI, r3
   1c37c:	f3bf 8f6f 	isb	sy
}
   1c380:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c382:	2200      	movs	r2, #0
   1c384:	e7f7      	b.n	1c376 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1c386:	4618      	mov	r0, r3
   1c388:	f7f3 fe6c 	bl	10064 <arch_swap>
	return ret;
   1c38c:	e7f8      	b.n	1c380 <z_reschedule_irqlock+0x1c>

0001c38e <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   1c38e:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1c390:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   1c392:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c394:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c396:	2300      	movs	r3, #0
   1c398:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1c39a:	604b      	str	r3, [r1, #4]
}
   1c39c:	4770      	bx	lr

0001c39e <z_unpend_thread>:
{
   1c39e:	b538      	push	{r3, r4, r5, lr}
   1c3a0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1c3a2:	2300      	movs	r3, #0
	__asm__ volatile(
   1c3a4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c3a8:	f3ef 8511 	mrs	r5, BASEPRI
   1c3ac:	f382 8812 	msr	BASEPRI_MAX, r2
   1c3b0:	f3bf 8f6f 	isb	sy
   1c3b4:	b98b      	cbnz	r3, 1c3da <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c3b6:	4620      	mov	r0, r4
   1c3b8:	f7ff ffa9 	bl	1c30e <pended_on_thread>
   1c3bc:	4621      	mov	r1, r4
   1c3be:	f7ff ffe6 	bl	1c38e <z_priq_dumb_remove>
   1c3c2:	7b63      	ldrb	r3, [r4, #13]
   1c3c4:	f023 0302 	bic.w	r3, r3, #2
   1c3c8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1c3ca:	2300      	movs	r3, #0
   1c3cc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1c3ce:	f385 8811 	msr	BASEPRI, r5
   1c3d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c3d6:	2301      	movs	r3, #1
   1c3d8:	e7ec      	b.n	1c3b4 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   1c3da:	f104 0018 	add.w	r0, r4, #24
   1c3de:	f000 f958 	bl	1c692 <z_abort_timeout>
}
   1c3e2:	bd38      	pop	{r3, r4, r5, pc}

0001c3e4 <z_priq_dumb_best>:
{
   1c3e4:	4603      	mov	r3, r0
	return list->head == list;
   1c3e6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c3e8:	4283      	cmp	r3, r0
   1c3ea:	d000      	beq.n	1c3ee <z_priq_dumb_best+0xa>
}
   1c3ec:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1c3ee:	2000      	movs	r0, #0
	return thread;
   1c3f0:	e7fc      	b.n	1c3ec <z_priq_dumb_best+0x8>

0001c3f2 <z_ready_thread>:
{
   1c3f2:	b538      	push	{r3, r4, r5, lr}
   1c3f4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1c3f6:	2300      	movs	r3, #0
	__asm__ volatile(
   1c3f8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c3fc:	f3ef 8511 	mrs	r5, BASEPRI
   1c400:	f382 8812 	msr	BASEPRI_MAX, r2
   1c404:	f3bf 8f6f 	isb	sy
   1c408:	e007      	b.n	1c41a <z_ready_thread+0x28>
			ready_thread(thread);
   1c40a:	4620      	mov	r0, r4
   1c40c:	f7f9 fe20 	bl	16050 <ready_thread>
	__asm__ volatile(
   1c410:	f385 8811 	msr	BASEPRI, r5
   1c414:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c418:	2301      	movs	r3, #1
   1c41a:	b92b      	cbnz	r3, 1c428 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1c41c:	4620      	mov	r0, r4
   1c41e:	f7ff ff74 	bl	1c30a <thread_active_elsewhere>
   1c422:	2800      	cmp	r0, #0
   1c424:	d1f4      	bne.n	1c410 <z_ready_thread+0x1e>
   1c426:	e7f0      	b.n	1c40a <z_ready_thread+0x18>
}
   1c428:	bd38      	pop	{r3, r4, r5, pc}

0001c42a <z_thread_timeout>:
{
   1c42a:	b570      	push	{r4, r5, r6, lr}
   1c42c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1c42e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   1c432:	2300      	movs	r3, #0
	__asm__ volatile(
   1c434:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c438:	f3ef 8611 	mrs	r6, BASEPRI
   1c43c:	f382 8812 	msr	BASEPRI_MAX, r2
   1c440:	f3bf 8f6f 	isb	sy
   1c444:	e019      	b.n	1c47a <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c446:	4628      	mov	r0, r5
   1c448:	f7ff ff61 	bl	1c30e <pended_on_thread>
   1c44c:	4629      	mov	r1, r5
   1c44e:	f7ff ff9e 	bl	1c38e <z_priq_dumb_remove>
   1c452:	7b6b      	ldrb	r3, [r5, #13]
   1c454:	f023 0302 	bic.w	r3, r3, #2
   1c458:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1c45a:	2300      	movs	r3, #0
   1c45c:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c45e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1c462:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   1c466:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1c46a:	4628      	mov	r0, r5
   1c46c:	f7f9 fdf0 	bl	16050 <ready_thread>
	__asm__ volatile(
   1c470:	f386 8811 	msr	BASEPRI, r6
   1c474:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c478:	2301      	movs	r3, #1
   1c47a:	b94b      	cbnz	r3, 1c490 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1c47c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1c480:	f013 0f28 	tst.w	r3, #40	; 0x28
   1c484:	d1f4      	bne.n	1c470 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   1c486:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d1db      	bne.n	1c446 <z_thread_timeout+0x1c>
   1c48e:	e7e6      	b.n	1c45e <z_thread_timeout+0x34>
}
   1c490:	bd70      	pop	{r4, r5, r6, pc}

0001c492 <add_to_waitq_locked>:
{
   1c492:	b570      	push	{r4, r5, r6, lr}
   1c494:	4605      	mov	r5, r0
   1c496:	460e      	mov	r6, r1
	unready_thread(thread);
   1c498:	f7f9 fe38 	bl	1610c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1c49c:	7b6b      	ldrb	r3, [r5, #13]
   1c49e:	f043 0302 	orr.w	r3, r3, #2
   1c4a2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   1c4a4:	b1b6      	cbz	r6, 1c4d4 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   1c4a6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1c4a8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c4aa:	42a6      	cmp	r6, r4
   1c4ac:	d019      	beq.n	1c4e2 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c4ae:	b164      	cbz	r4, 1c4ca <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c4b0:	4621      	mov	r1, r4
   1c4b2:	4628      	mov	r0, r5
   1c4b4:	f7ff ff2d 	bl	1c312 <z_sched_prio_cmp>
   1c4b8:	2800      	cmp	r0, #0
   1c4ba:	dc0c      	bgt.n	1c4d6 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c4bc:	b12c      	cbz	r4, 1c4ca <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   1c4be:	6873      	ldr	r3, [r6, #4]
   1c4c0:	429c      	cmp	r4, r3
   1c4c2:	d002      	beq.n	1c4ca <add_to_waitq_locked+0x38>
   1c4c4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c4c6:	2c00      	cmp	r4, #0
   1c4c8:	d1f1      	bne.n	1c4ae <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   1c4ca:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1c4cc:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1c4ce:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1c4d0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1c4d2:	6075      	str	r5, [r6, #4]
}
   1c4d4:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   1c4d6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1c4d8:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1c4da:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1c4dc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1c4de:	6065      	str	r5, [r4, #4]
}
   1c4e0:	e7f8      	b.n	1c4d4 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c4e2:	2400      	movs	r4, #0
   1c4e4:	e7e3      	b.n	1c4ae <add_to_waitq_locked+0x1c>

0001c4e6 <pend>:
{
   1c4e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c4ea:	4605      	mov	r5, r0
   1c4ec:	460f      	mov	r7, r1
   1c4ee:	4691      	mov	r9, r2
   1c4f0:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   1c4f2:	2400      	movs	r4, #0
	__asm__ volatile(
   1c4f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4f8:	f3ef 8611 	mrs	r6, BASEPRI
   1c4fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1c500:	f3bf 8f6f 	isb	sy
   1c504:	b94c      	cbnz	r4, 1c51a <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   1c506:	4639      	mov	r1, r7
   1c508:	4628      	mov	r0, r5
   1c50a:	f7ff ffc2 	bl	1c492 <add_to_waitq_locked>
	__asm__ volatile(
   1c50e:	f386 8811 	msr	BASEPRI, r6
   1c512:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c516:	2401      	movs	r4, #1
   1c518:	e7f4      	b.n	1c504 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   1c51a:	464a      	mov	r2, r9
   1c51c:	4643      	mov	r3, r8
   1c51e:	4628      	mov	r0, r5
   1c520:	f7f9 fc4a 	bl	15db8 <add_thread_timeout>
}
   1c524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c528 <z_unpend1_no_timeout>:
{
   1c528:	b570      	push	{r4, r5, r6, lr}
   1c52a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1c52c:	2300      	movs	r3, #0
	__asm__ volatile(
   1c52e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c532:	f3ef 8511 	mrs	r5, BASEPRI
   1c536:	f382 8812 	msr	BASEPRI_MAX, r2
   1c53a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1c53e:	461c      	mov	r4, r3
   1c540:	e00f      	b.n	1c562 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c542:	f7ff fee4 	bl	1c30e <pended_on_thread>
   1c546:	4621      	mov	r1, r4
   1c548:	f7ff ff21 	bl	1c38e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c54c:	7b63      	ldrb	r3, [r4, #13]
   1c54e:	f023 0302 	bic.w	r3, r3, #2
   1c552:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1c554:	2300      	movs	r3, #0
   1c556:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1c558:	f385 8811 	msr	BASEPRI, r5
   1c55c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c560:	2301      	movs	r3, #1
   1c562:	b933      	cbnz	r3, 1c572 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   1c564:	4630      	mov	r0, r6
   1c566:	f7ff ff3d 	bl	1c3e4 <z_priq_dumb_best>
		if (thread != NULL) {
   1c56a:	4604      	mov	r4, r0
   1c56c:	2800      	cmp	r0, #0
   1c56e:	d1e8      	bne.n	1c542 <z_unpend1_no_timeout+0x1a>
   1c570:	e7f2      	b.n	1c558 <z_unpend1_no_timeout+0x30>
}
   1c572:	4620      	mov	r0, r4
   1c574:	bd70      	pop	{r4, r5, r6, pc}

0001c576 <z_unpend_first_thread>:
{
   1c576:	b570      	push	{r4, r5, r6, lr}
   1c578:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   1c57a:	2300      	movs	r3, #0
	__asm__ volatile(
   1c57c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c580:	f3ef 8511 	mrs	r5, BASEPRI
   1c584:	f382 8812 	msr	BASEPRI_MAX, r2
   1c588:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1c58c:	461c      	mov	r4, r3
   1c58e:	e013      	b.n	1c5b8 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c590:	f7ff febd 	bl	1c30e <pended_on_thread>
   1c594:	4621      	mov	r1, r4
   1c596:	f7ff fefa 	bl	1c38e <z_priq_dumb_remove>
   1c59a:	7b63      	ldrb	r3, [r4, #13]
   1c59c:	f023 0302 	bic.w	r3, r3, #2
   1c5a0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1c5a2:	2300      	movs	r3, #0
   1c5a4:	60a3      	str	r3, [r4, #8]
   1c5a6:	f104 0018 	add.w	r0, r4, #24
   1c5aa:	f000 f872 	bl	1c692 <z_abort_timeout>
	__asm__ volatile(
   1c5ae:	f385 8811 	msr	BASEPRI, r5
   1c5b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c5b6:	2301      	movs	r3, #1
   1c5b8:	b933      	cbnz	r3, 1c5c8 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   1c5ba:	4630      	mov	r0, r6
   1c5bc:	f7ff ff12 	bl	1c3e4 <z_priq_dumb_best>
		if (thread != NULL) {
   1c5c0:	4604      	mov	r4, r0
   1c5c2:	2800      	cmp	r0, #0
   1c5c4:	d1e4      	bne.n	1c590 <z_unpend_first_thread+0x1a>
   1c5c6:	e7f2      	b.n	1c5ae <z_unpend_first_thread+0x38>
}
   1c5c8:	4620      	mov	r0, r4
   1c5ca:	bd70      	pop	{r4, r5, r6, pc}

0001c5cc <z_unpend_all>:
{
   1c5cc:	b538      	push	{r3, r4, r5, lr}
   1c5ce:	4605      	mov	r5, r0
	int need_sched = 0;
   1c5d0:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c5d2:	e006      	b.n	1c5e2 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   1c5d4:	4620      	mov	r0, r4
   1c5d6:	f7ff fee2 	bl	1c39e <z_unpend_thread>
		z_ready_thread(thread);
   1c5da:	4620      	mov	r0, r4
   1c5dc:	f7ff ff09 	bl	1c3f2 <z_ready_thread>
		need_sched = 1;
   1c5e0:	2001      	movs	r0, #1
	return list->head == list;
   1c5e2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c5e4:	42a5      	cmp	r5, r4
   1c5e6:	d001      	beq.n	1c5ec <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c5e8:	2c00      	cmp	r4, #0
   1c5ea:	d1f3      	bne.n	1c5d4 <z_unpend_all+0x8>
}
   1c5ec:	bd38      	pop	{r3, r4, r5, pc}

0001c5ee <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1c5ee:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   1c5f0:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1c5f2:	6083      	str	r3, [r0, #8]
}
   1c5f4:	4770      	bx	lr

0001c5f6 <z_sched_wake>:
{
   1c5f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c5fa:	4606      	mov	r6, r0
   1c5fc:	4688      	mov	r8, r1
   1c5fe:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   1c600:	2300      	movs	r3, #0
	__asm__ volatile(
   1c602:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c606:	f3ef 8511 	mrs	r5, BASEPRI
   1c60a:	f382 8812 	msr	BASEPRI_MAX, r2
   1c60e:	f3bf 8f6f 	isb	sy
	bool ret = false;
   1c612:	4699      	mov	r9, r3
   1c614:	e01b      	b.n	1c64e <z_sched_wake+0x58>
   1c616:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   1c61a:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c61c:	f7ff fe77 	bl	1c30e <pended_on_thread>
   1c620:	4621      	mov	r1, r4
   1c622:	f7ff feb4 	bl	1c38e <z_priq_dumb_remove>
   1c626:	7b63      	ldrb	r3, [r4, #13]
   1c628:	f023 0302 	bic.w	r3, r3, #2
   1c62c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1c62e:	2300      	movs	r3, #0
   1c630:	60a3      	str	r3, [r4, #8]
   1c632:	f104 0018 	add.w	r0, r4, #24
   1c636:	f000 f82c 	bl	1c692 <z_abort_timeout>
			ready_thread(thread);
   1c63a:	4620      	mov	r0, r4
   1c63c:	f7f9 fd08 	bl	16050 <ready_thread>
			ret = true;
   1c640:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   1c644:	f385 8811 	msr	BASEPRI, r5
   1c648:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c64c:	2301      	movs	r3, #1
   1c64e:	b933      	cbnz	r3, 1c65e <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   1c650:	4630      	mov	r0, r6
   1c652:	f7ff fec7 	bl	1c3e4 <z_priq_dumb_best>
		if (thread != NULL) {
   1c656:	4604      	mov	r4, r0
   1c658:	2800      	cmp	r0, #0
   1c65a:	d1dc      	bne.n	1c616 <z_sched_wake+0x20>
   1c65c:	e7f2      	b.n	1c644 <z_sched_wake+0x4e>
}
   1c65e:	4648      	mov	r0, r9
   1c660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c664 <remove_timeout>:
{
   1c664:	b538      	push	{r3, r4, r5, lr}
   1c666:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1c668:	f7f9 ffd6 	bl	16618 <next>
   1c66c:	b148      	cbz	r0, 1c682 <remove_timeout+0x1e>
   1c66e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1c670:	6920      	ldr	r0, [r4, #16]
   1c672:	6965      	ldr	r5, [r4, #20]
   1c674:	6913      	ldr	r3, [r2, #16]
   1c676:	6951      	ldr	r1, [r2, #20]
   1c678:	181b      	adds	r3, r3, r0
   1c67a:	eb45 0101 	adc.w	r1, r5, r1
   1c67e:	6113      	str	r3, [r2, #16]
   1c680:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1c682:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1c684:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1c686:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c688:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c68a:	2300      	movs	r3, #0
   1c68c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1c68e:	6063      	str	r3, [r4, #4]
}
   1c690:	bd38      	pop	{r3, r4, r5, pc}

0001c692 <z_abort_timeout>:
{
   1c692:	b570      	push	{r4, r5, r6, lr}
   1c694:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1c696:	2300      	movs	r3, #0
	__asm__ volatile(
   1c698:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c69c:	f3ef 8611 	mrs	r6, BASEPRI
   1c6a0:	f382 8812 	msr	BASEPRI_MAX, r2
   1c6a4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1c6a8:	f06f 0015 	mvn.w	r0, #21
   1c6ac:	e008      	b.n	1c6c0 <z_abort_timeout+0x2e>
			remove_timeout(to);
   1c6ae:	4620      	mov	r0, r4
   1c6b0:	f7ff ffd8 	bl	1c664 <remove_timeout>
			ret = 0;
   1c6b4:	4628      	mov	r0, r5
	__asm__ volatile(
   1c6b6:	f386 8811 	msr	BASEPRI, r6
   1c6ba:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1c6be:	2301      	movs	r3, #1
   1c6c0:	461d      	mov	r5, r3
   1c6c2:	b91b      	cbnz	r3, 1c6cc <z_abort_timeout+0x3a>
	return node->next != NULL;
   1c6c4:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1c6c6:	2b00      	cmp	r3, #0
   1c6c8:	d1f1      	bne.n	1c6ae <z_abort_timeout+0x1c>
   1c6ca:	e7f4      	b.n	1c6b6 <z_abort_timeout+0x24>
}
   1c6cc:	bd70      	pop	{r4, r5, r6, pc}

0001c6ce <z_get_next_timeout_expiry>:
{
   1c6ce:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1c6d0:	2300      	movs	r3, #0
	__asm__ volatile(
   1c6d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c6d6:	f3ef 8411 	mrs	r4, BASEPRI
   1c6da:	f382 8812 	msr	BASEPRI_MAX, r2
   1c6de:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1c6e2:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   1c6e6:	b93b      	cbnz	r3, 1c6f8 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   1c6e8:	f7f9 ffae 	bl	16648 <next_timeout>
	__asm__ volatile(
   1c6ec:	f384 8811 	msr	BASEPRI, r4
   1c6f0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1c6f4:	2301      	movs	r3, #1
   1c6f6:	e7f6      	b.n	1c6e6 <z_get_next_timeout_expiry+0x18>
}
   1c6f8:	bd10      	pop	{r4, pc}

0001c6fa <z_set_timeout_expiry>:
{
   1c6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6fc:	4606      	mov	r6, r0
   1c6fe:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   1c700:	2300      	movs	r3, #0
	__asm__ volatile(
   1c702:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c706:	f3ef 8511 	mrs	r5, BASEPRI
   1c70a:	f382 8812 	msr	BASEPRI_MAX, r2
   1c70e:	f3bf 8f6f 	isb	sy
   1c712:	e00a      	b.n	1c72a <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   1c714:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   1c716:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1c71a:	2801      	cmp	r0, #1
   1c71c:	dd00      	ble.n	1c720 <z_set_timeout_expiry+0x26>
   1c71e:	b97c      	cbnz	r4, 1c740 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1c720:	f385 8811 	msr	BASEPRI, r5
   1c724:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1c728:	2301      	movs	r3, #1
   1c72a:	461c      	mov	r4, r3
   1c72c:	b97b      	cbnz	r3, 1c74e <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1c72e:	f7f9 ff8b 	bl	16648 <next_timeout>
			      || (ticks <= next_to);
   1c732:	f1b0 3fff 	cmp.w	r0, #4294967295
   1c736:	d0ed      	beq.n	1c714 <z_set_timeout_expiry+0x1a>
   1c738:	42b0      	cmp	r0, r6
   1c73a:	dbec      	blt.n	1c716 <z_set_timeout_expiry+0x1c>
   1c73c:	2401      	movs	r4, #1
   1c73e:	e7ea      	b.n	1c716 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1c740:	4639      	mov	r1, r7
   1c742:	42b0      	cmp	r0, r6
   1c744:	bfa8      	it	ge
   1c746:	4630      	movge	r0, r6
   1c748:	f7f7 f834 	bl	137b4 <sys_clock_set_timeout>
   1c74c:	e7e8      	b.n	1c720 <z_set_timeout_expiry+0x26>
}
   1c74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c750 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1c750:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1c752:	f7fa f8ab 	bl	168ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1c756:	bd08      	pop	{r3, pc}

0001c758 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1c758:	b900      	cbnz	r0, 1c75c <z_impl_k_busy_wait+0x4>
   1c75a:	4770      	bx	lr
{
   1c75c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1c75e:	f7f4 fb01 	bl	10d64 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1c762:	bd08      	pop	{r3, pc}

0001c764 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   1c764:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c766:	f1b1 3fff 	cmp.w	r1, #4294967295
   1c76a:	bf08      	it	eq
   1c76c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1c770:	d024      	beq.n	1c7bc <sys_clock_timeout_end_calc+0x58>
   1c772:	4604      	mov	r4, r0
   1c774:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c776:	ea54 0105 	orrs.w	r1, r4, r5
   1c77a:	d00d      	beq.n	1c798 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1c77c:	f06f 0101 	mvn.w	r1, #1
   1c780:	1a0a      	subs	r2, r1, r0
   1c782:	f04f 31ff 	mov.w	r1, #4294967295
   1c786:	eb61 0305 	sbc.w	r3, r1, r5
   1c78a:	2a00      	cmp	r2, #0
   1c78c:	f173 0100 	sbcs.w	r1, r3, #0
   1c790:	db05      	blt.n	1c79e <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   1c792:	4610      	mov	r0, r2
   1c794:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1c796:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   1c798:	f7fa f888 	bl	168ac <sys_clock_tick_get>
   1c79c:	e7fb      	b.n	1c796 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   1c79e:	f7fa f885 	bl	168ac <sys_clock_tick_get>
   1c7a2:	4623      	mov	r3, r4
   1c7a4:	462a      	mov	r2, r5
   1c7a6:	2c01      	cmp	r4, #1
   1c7a8:	f175 0400 	sbcs.w	r4, r5, #0
   1c7ac:	db03      	blt.n	1c7b6 <sys_clock_timeout_end_calc+0x52>
   1c7ae:	18c0      	adds	r0, r0, r3
   1c7b0:	eb42 0101 	adc.w	r1, r2, r1
   1c7b4:	e7ef      	b.n	1c796 <sys_clock_timeout_end_calc+0x32>
   1c7b6:	2301      	movs	r3, #1
   1c7b8:	2200      	movs	r2, #0
   1c7ba:	e7f8      	b.n	1c7ae <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   1c7bc:	f04f 30ff 	mov.w	r0, #4294967295
   1c7c0:	4601      	mov	r1, r0
   1c7c2:	e7e8      	b.n	1c796 <sys_clock_timeout_end_calc+0x32>

0001c7c4 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   1c7c4:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   1c7c6:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   1c7c8:	2300      	movs	r3, #0
   1c7ca:	6303      	str	r3, [r0, #48]	; 0x30
   1c7cc:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   1c7d0:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   1c7d2:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   1c7d4:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1c7d6:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   1c7d8:	6343      	str	r3, [r0, #52]	; 0x34
}
   1c7da:	4770      	bx	lr

0001c7dc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1c7dc:	b510      	push	{r4, lr}
   1c7de:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1c7e0:	f7ff ff57 	bl	1c692 <z_abort_timeout>

	if (inactive) {
   1c7e4:	b9a0      	cbnz	r0, 1c810 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   1c7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c7e8:	b10b      	cbz	r3, 1c7ee <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1c7ea:	4620      	mov	r0, r4
   1c7ec:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1c7ee:	f104 0018 	add.w	r0, r4, #24
   1c7f2:	f7ff fe99 	bl	1c528 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1c7f6:	b158      	cbz	r0, 1c810 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   1c7f8:	f7ff fdfb 	bl	1c3f2 <z_ready_thread>
	__asm__ volatile(
   1c7fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c800:	f3ef 8011 	mrs	r0, BASEPRI
   1c804:	f383 8812 	msr	BASEPRI_MAX, r3
   1c808:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1c80c:	f7ff fdaa 	bl	1c364 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   1c810:	bd10      	pop	{r4, pc}

0001c812 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1c812:	b108      	cbz	r0, 1c818 <poller_thread+0x6>
   1c814:	3860      	subs	r0, #96	; 0x60
   1c816:	4770      	bx	lr
}
   1c818:	4770      	bx	lr

0001c81a <signal_poller>:
{
   1c81a:	b538      	push	{r3, r4, r5, lr}
   1c81c:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   1c81e:	6880      	ldr	r0, [r0, #8]
   1c820:	f7ff fff7 	bl	1c812 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1c824:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   1c826:	f013 0f02 	tst.w	r3, #2
   1c82a:	d028      	beq.n	1c87e <signal_poller+0x64>
   1c82c:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   1c82e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   1c832:	f06f 0001 	mvn.w	r0, #1
   1c836:	f04f 31ff 	mov.w	r1, #4294967295
   1c83a:	428b      	cmp	r3, r1
   1c83c:	bf08      	it	eq
   1c83e:	4282      	cmpeq	r2, r0
   1c840:	d01f      	beq.n	1c882 <signal_poller+0x68>
	z_unpend_thread(thread);
   1c842:	4620      	mov	r0, r4
   1c844:	f7ff fdab 	bl	1c39e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1c848:	2d08      	cmp	r5, #8
   1c84a:	d00a      	beq.n	1c862 <signal_poller+0x48>
   1c84c:	2300      	movs	r3, #0
   1c84e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   1c852:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c854:	f013 0f1f 	tst.w	r3, #31
   1c858:	d108      	bne.n	1c86c <signal_poller+0x52>
	return node->next != NULL;
   1c85a:	69a3      	ldr	r3, [r4, #24]
   1c85c:	b123      	cbz	r3, 1c868 <signal_poller+0x4e>
   1c85e:	2300      	movs	r3, #0
   1c860:	e005      	b.n	1c86e <signal_poller+0x54>
   1c862:	f06f 0303 	mvn.w	r3, #3
   1c866:	e7f2      	b.n	1c84e <signal_poller+0x34>
   1c868:	2301      	movs	r3, #1
   1c86a:	e000      	b.n	1c86e <signal_poller+0x54>
   1c86c:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   1c86e:	b90b      	cbnz	r3, 1c874 <signal_poller+0x5a>
		return 0;
   1c870:	2000      	movs	r0, #0
   1c872:	e005      	b.n	1c880 <signal_poller+0x66>
	z_ready_thread(thread);
   1c874:	4620      	mov	r0, r4
   1c876:	f7ff fdbc 	bl	1c3f2 <z_ready_thread>
	return 0;
   1c87a:	2000      	movs	r0, #0
   1c87c:	e000      	b.n	1c880 <signal_poller+0x66>
		return 0;
   1c87e:	2000      	movs	r0, #0
}
   1c880:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1c882:	f06f 000a 	mvn.w	r0, #10
   1c886:	e7fb      	b.n	1c880 <signal_poller+0x66>

0001c888 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   1c888:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   1c88a:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1c88c:	7823      	ldrb	r3, [r4, #0]
   1c88e:	b173      	cbz	r3, 1c8ae <signal_triggered_work+0x26>
   1c890:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1c894:	b15d      	cbz	r5, 1c8ae <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1c896:	f1a4 0614 	sub.w	r6, r4, #20
   1c89a:	f104 0014 	add.w	r0, r4, #20
   1c89e:	f7ff fef8 	bl	1c692 <z_abort_timeout>
		twork->poll_result = 0;
   1c8a2:	2300      	movs	r3, #0
   1c8a4:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1c8a6:	4631      	mov	r1, r6
   1c8a8:	4628      	mov	r0, r5
   1c8aa:	f7ff fcc2 	bl	1c232 <k_work_submit_to_queue>
	}

	return 0;
}
   1c8ae:	2000      	movs	r0, #0
   1c8b0:	bd70      	pop	{r4, r5, r6, pc}

0001c8b2 <signal_poll_event>:
{
   1c8b2:	b570      	push	{r4, r5, r6, lr}
   1c8b4:	4604      	mov	r4, r0
   1c8b6:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   1c8b8:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   1c8ba:	b1d6      	cbz	r6, 1c8f2 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   1c8bc:	7873      	ldrb	r3, [r6, #1]
   1c8be:	2b01      	cmp	r3, #1
   1c8c0:	d00d      	beq.n	1c8de <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   1c8c2:	2b02      	cmp	r3, #2
   1c8c4:	d012      	beq.n	1c8ec <signal_poll_event+0x3a>
		poller->is_polling = false;
   1c8c6:	2000      	movs	r0, #0
   1c8c8:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   1c8ca:	2300      	movs	r3, #0
   1c8cc:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   1c8ce:	68e3      	ldr	r3, [r4, #12]
   1c8d0:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1c8d4:	430d      	orrs	r5, r1
   1c8d6:	f365 3352 	bfi	r3, r5, #13, #6
   1c8da:	60e3      	str	r3, [r4, #12]
}
   1c8dc:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   1c8de:	f7ff ff9c 	bl	1c81a <signal_poller>
		poller->is_polling = false;
   1c8e2:	2300      	movs	r3, #0
   1c8e4:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   1c8e6:	4298      	cmp	r0, r3
   1c8e8:	daef      	bge.n	1c8ca <signal_poll_event+0x18>
   1c8ea:	e7f7      	b.n	1c8dc <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   1c8ec:	f7ff ffcc 	bl	1c888 <signal_triggered_work>
   1c8f0:	e7f7      	b.n	1c8e2 <signal_poll_event+0x30>
	int retcode = 0;
   1c8f2:	2000      	movs	r0, #0
   1c8f4:	e7e9      	b.n	1c8ca <signal_poll_event+0x18>

0001c8f6 <z_handle_obj_poll_events>:
{
   1c8f6:	b508      	push	{r3, lr}
   1c8f8:	4603      	mov	r3, r0
	return list->head == list;
   1c8fa:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1c8fc:	4283      	cmp	r3, r0
   1c8fe:	d009      	beq.n	1c914 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   1c900:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1c902:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1c904:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c906:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c908:	2300      	movs	r3, #0
   1c90a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1c90c:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   1c90e:	b108      	cbz	r0, 1c914 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   1c910:	f7ff ffcf 	bl	1c8b2 <signal_poll_event>
}
   1c914:	bd08      	pop	{r3, pc}

0001c916 <z_heap_aligned_alloc>:
{
   1c916:	b5d0      	push	{r4, r6, r7, lr}
   1c918:	b082      	sub	sp, #8
   1c91a:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1c91c:	2000      	movs	r0, #0
   1c91e:	2304      	movs	r3, #4
   1c920:	18d2      	adds	r2, r2, r3
   1c922:	d20e      	bcs.n	1c942 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   1c924:	b978      	cbnz	r0, 1c946 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1c926:	2600      	movs	r6, #0
   1c928:	2700      	movs	r7, #0
   1c92a:	e9cd 6700 	strd	r6, r7, [sp]
   1c92e:	f041 0104 	orr.w	r1, r1, #4
   1c932:	4620      	mov	r0, r4
   1c934:	f7ff fa57 	bl	1bde6 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1c938:	b108      	cbz	r0, 1c93e <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   1c93a:	f840 4b04 	str.w	r4, [r0], #4
}
   1c93e:	b002      	add	sp, #8
   1c940:	bdd0      	pop	{r4, r6, r7, pc}
   1c942:	2001      	movs	r0, #1
   1c944:	e7ee      	b.n	1c924 <z_heap_aligned_alloc+0xe>
		return NULL;
   1c946:	2000      	movs	r0, #0
   1c948:	e7f9      	b.n	1c93e <z_heap_aligned_alloc+0x28>

0001c94a <k_free>:
	if (ptr != NULL) {
   1c94a:	b130      	cbz	r0, 1c95a <k_free+0x10>
{
   1c94c:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   1c94e:	1f01      	subs	r1, r0, #4
   1c950:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1c954:	f7ff fa92 	bl	1be7c <k_heap_free>
}
   1c958:	bd08      	pop	{r3, pc}
   1c95a:	4770      	bx	lr

0001c95c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1c95c:	4770      	bx	lr
	...

0001c960 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1c960:	f7f7 bdf0 	b.w	14544 <SystemInit>
